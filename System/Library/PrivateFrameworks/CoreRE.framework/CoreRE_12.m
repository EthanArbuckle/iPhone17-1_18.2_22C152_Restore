uint64_t re::ecs2::BillboardManager::setHeadPosition(uint64_t result, long long *a2)
{
  long long v2;
  long long v3;

  v3 = *a2;
  if (*(unsigned char *)(result + 400))
  {
    v2 = *a2;
  }
  else
  {
    *(unsigned char *)(result + 400) = 1;
    v2 = v3;
  }
  *(_OWORD *)(result + 416) = v2;
  return result;
}

BOOL re::ecs2::BillboardManager::isEntityUnderBillboardInfluence(uint64_t a1, unint64_t a2)
{
  if (re::ecs2::BillboardService::isBillboardEnabled(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::BillboardService::isBillboardEnabled(void)::onceToken, &__block_literal_global_25);
  }
  if (!re::ecs2::gIsBillboardEnabled) {
    return 0;
  }
  return re::HashTable<re::ecs2::Entity const*,re::ecs2::BillboardData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::containsKey(a1 + 72, a2);
}

BOOL re::ecs2::isBillboardResultChanged(float32x4_t *a1, float32x4_t *a2)
{
  if (re::ecs2::BillboardService::getBillboardTransformChangeThreshold(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::BillboardService::getBillboardTransformChangeThreshold(void)::onceToken, &__block_literal_global_6_0);
  }
  float32x4_t v4 = vsubq_f32(a1[3], a2[3]);
  float32x4_t v5 = vmulq_f32(v4, v4);
  if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v5, 2), vaddq_f32(v5, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v5.f32, 1))).f32[0] > *(float *)&re::ecs2::gBillboardTransformChangeThreshold)return 1; {
  float32x4_t v6 = a1[1];
  }
  int32x4_t v7 = (int32x4_t)vmulq_f32(v6, v6);
  v7.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v7, 2), vadd_f32(*(float32x2_t *)v7.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v7.i8, 1))).u32[0];
  float32x2_t v8 = vrsqrte_f32((float32x2_t)v7.u32[0]);
  float32x2_t v9 = vmul_f32(v8, vrsqrts_f32((float32x2_t)v7.u32[0], vmul_f32(v8, v8)));
  float32x4_t v10 = vmulq_n_f32(v6, vmul_f32(v9, vrsqrts_f32((float32x2_t)v7.u32[0], vmul_f32(v9, v9))).f32[0]);
  float32x4_t v11 = a2[1];
  int32x4_t v12 = (int32x4_t)vmulq_f32(v11, v11);
  v12.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v12, 2), vadd_f32(*(float32x2_t *)v12.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v12.i8, 1))).u32[0];
  float32x2_t v13 = vrsqrte_f32((float32x2_t)v12.u32[0]);
  float32x2_t v14 = vmul_f32(v13, vrsqrts_f32((float32x2_t)v12.u32[0], vmul_f32(v13, v13)));
  float32x4_t v15 = vmulq_f32(v10, vmulq_n_f32(v11, vmul_f32(v14, vrsqrts_f32((float32x2_t)v12.u32[0], vmul_f32(v14, v14))).f32[0]));
  if ((float)(1.0
             - vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v15, 2), vaddq_f32(v15, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v15.f32, 1))).f32[0]) > *(float *)&re::ecs2::gBillboardTransformChangeThreshold)return 1;
  float32x4_t v17 = a1[2];
  int32x4_t v18 = (int32x4_t)vmulq_f32(v17, v17);
  v18.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v18, 2), vadd_f32(*(float32x2_t *)v18.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v18.i8, 1))).u32[0];
  float32x2_t v19 = vrsqrte_f32((float32x2_t)v18.u32[0]);
  float32x2_t v20 = vmul_f32(v19, vrsqrts_f32((float32x2_t)v18.u32[0], vmul_f32(v19, v19)));
  float32x4_t v21 = vmulq_n_f32(v17, vmul_f32(v20, vrsqrts_f32((float32x2_t)v18.u32[0], vmul_f32(v20, v20))).f32[0]);
  float32x4_t v22 = a2[2];
  int32x4_t v23 = (int32x4_t)vmulq_f32(v22, v22);
  v23.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v23, 2), vadd_f32(*(float32x2_t *)v23.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v23.i8, 1))).u32[0];
  float32x2_t v24 = vrsqrte_f32((float32x2_t)v23.u32[0]);
  float32x2_t v25 = vmul_f32(v24, vrsqrts_f32((float32x2_t)v23.u32[0], vmul_f32(v24, v24)));
  float32x4_t v26 = vmulq_f32(v21, vmulq_n_f32(v22, vmul_f32(v25, vrsqrts_f32((float32x2_t)v23.u32[0], vmul_f32(v25, v25))).f32[0]));
  return (float)(1.0
               - vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v26, 2), vaddq_f32(v26, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v26.f32, 1))).f32[0]) > *(float *)&re::ecs2::gBillboardTransformChangeThreshold;
}

void re::ecs2::BillboardManager::getBillboardedTransformByCamera(uint64_t this@<X2>, uint64_t a2@<X0>, float32x4_t *a3@<X1>, int a4@<W3>, _OWORD *a5@<X8>)
{
  uint64_t v249 = this;
  if (!this)
  {
    *a5 = xmmword_23435FD50;
    a5[1] = xmmword_23435FD60;
    long long v12 = xmmword_23435FD80;
    long long v13 = xmmword_23435FBB0;
    goto LABEL_11;
  }
  if (re::ecs2::BillboardService::isBillboardEnabled(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::BillboardService::isBillboardEnabled(void)::onceToken, &__block_literal_global_25);
  }
  if (!re::ecs2::gIsBillboardEnabled
    || !re::HashTable<re::ecs2::Entity const*,re::ecs2::BillboardData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::containsKey(a2 + 72, this)|| (re::ecs2::TransformComponent::worldMatrix4x4F((re::ecs2::TransformComponent **)this, (const re::ecs2::Entity *)1, &v231), float32x4_t v10 = vsubq_f32((float32x4_t)v234, *a3), v11 = vmulq_f32(v10, v10), fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v11, 2), vaddq_f32(v11, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 1))).f32[0]) < 1.0e-10))
  {
LABEL_9:
    re::ecs2::TransformComponent::worldMatrix4x4F((re::ecs2::TransformComponent **)this, (const re::ecs2::Entity *)1, a5);
    return;
  }
  if (!*(void *)(a2 + 480)) {
    goto LABEL_15;
  }
  unint64_t v14 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (this ^ ((unint64_t)this >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                            * (this ^ ((unint64_t)this >> 30))) >> 27));
  uint64_t v15 = *(unsigned int *)(*(void *)(a2 + 488) + 4 * ((v14 ^ (v14 >> 31)) % *(unsigned int *)(a2 + 504)));
  if (v15 == 0x7FFFFFFF) {
    goto LABEL_15;
  }
  uint64_t v200 = *(void *)(a2 + 496);
  if (*(void *)(v200 + 176 * v15 + 16) == this)
  {
LABEL_85:
    float32x4_t v17 = (float32x4_t *)(v200 + 176 * v15 + 32);
    if (!a4 || !v17->i8[0])
    {
      char v16 = 1;
      goto LABEL_16;
    }
    v201 = (_OWORD *)(v200 + 176 * v15);
    long long v202 = v201[8];
    *a5 = v201[7];
    a5[1] = v202;
    long long v12 = v201[9];
    long long v13 = v201[10];
LABEL_11:
    a5[2] = v12;
    a5[3] = v13;
    return;
  }
  while (1)
  {
    LODWORD(v15) = *(_DWORD *)(v200 + 176 * v15 + 8) & 0x7FFFFFFF;
    if (v15 == 0x7FFFFFFF) {
      break;
    }
    if (*(void *)(v200 + 176 * v15 + 16) == this) {
      goto LABEL_85;
    }
  }
LABEL_15:
  char v16 = 0;
  float32x4_t v17 = 0;
LABEL_16:
  long long v18 = xmmword_23435FD50;
  long long v19 = xmmword_23435FD60;
  float32x4_t v245 = (float32x4_t)xmmword_23435FD50;
  long long v246 = xmmword_23435FD60;
  long long v20 = xmmword_23435FD80;
  long long v21 = xmmword_23435FBB0;
  long long v247 = xmmword_23435FD80;
  long long v248 = xmmword_23435FBB0;
  if (re::ecs2::BillboardService::isBillboardEnabled(void)::onceToken != -1)
  {
    dispatch_once(&re::ecs2::BillboardService::isBillboardEnabled(void)::onceToken, &__block_literal_global_25);
    long long v21 = xmmword_23435FBB0;
    long long v19 = xmmword_23435FD60;
    long long v20 = xmmword_23435FD80;
    long long v18 = xmmword_23435FD50;
  }
  if (re::ecs2::gIsBillboardEnabled) {
    uint64_t v22 = a2 + 72;
  }
  else {
    uint64_t v22 = 0;
  }
  if (!re::ecs2::gIsBillboardEnabled) {
    goto LABEL_9;
  }
  long long v219 = v21;
  long long v220 = v19;
  long long v221 = v20;
  long long v222 = v18;
  v240 = 0;
  uint64_t v241 = 0;
  int v242 = 1;
  unint64_t v243 = 0;
  v244 = 0;
  uint64_t v23 = re::HashTable<re::ecs2::Entity const*,re::ecs2::BillboardData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(a2 + 72, this);
  if (!v23) {
    goto LABEL_9;
  }
  v218 = v17;
  if (!*(unsigned char *)(v23 + 72))
  {
    long long v221 = *(_OWORD *)(v23 + 32);
    long long v222 = *(_OWORD *)v23;
    long long v219 = *(_OWORD *)(v23 + 48);
    long long v220 = *(_OWORD *)(v23 + 16);
  }
  float32x2_t v24 = (_anonymous_namespace_ *)re::HashTable<re::ecs2::Entity const*,re::ecs2::BillboardData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(a2 + 72, this);
  if (!v24)
  {
LABEL_88:
    float32x4_t v40 = (float32x4_t)xmmword_23435FBB0;
    float32x4_t v39 = (float32x4_t)xmmword_23435FD50;
    float32x4_t v38 = (float32x4_t)xmmword_23435FD60;
    float32x4_t v37 = (float32x4_t)xmmword_23435FD80;
    goto LABEL_89;
  }
  float32x2_t v25 = v24;
  unint64_t v26 = 0;
  char v27 = 1;
  do
  {
    if (!*((unsigned char *)v25 + 72)) {
      goto LABEL_45;
    }
    if (v240)
    {
      if ((v27 & 1) == 0)
      {
        unint64_t v28 = v26 + 1;
        if (v26 < v243 || v243 >= v28) {
          goto LABEL_42;
        }
        unint64_t v30 = 2 * v243;
        goto LABEL_38;
      }
      if (v26 - 8 < 0xFFFFFFFFFFFFFFF7)
      {
        unint64_t v28 = v26 + 1;
        unint64_t v30 = 16;
LABEL_38:
        if (v30 <= v28) {
          unint64_t v31 = v28;
        }
        else {
          unint64_t v31 = v30;
        }
        re::DynamicOverflowArray<re::RenderFrameDelta *,8ul>::setCapacity(&v240, v31);
        char v27 = v242;
      }
    }
    else
    {
      re::DynamicOverflowArray<re::RenderFrameDelta *,8ul>::setCapacity(&v240, v26 + 1);
      char v27 = v242 + 2;
      v242 += 2;
    }
LABEL_42:
    v32 = v244;
    uint64_t v33 = v241;
    if (v27) {
      v32 = &v243;
    }
    v32[v241] = (unint64_t)v25;
    unint64_t v26 = v33 + 1;
    uint64_t v241 = v33 + 1;
    char v27 = v242 + 2;
    v242 += 2;
LABEL_45:
    float32x2_t v24 = (_anonymous_namespace_ *)re::HashTable<re::ecs2::Entity const*,re::ecs2::BillboardData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(v22, *((void *)v25 + 8));
    float32x2_t v25 = v24;
  }
  while (v24);
  if (!v26) {
    goto LABEL_88;
  }
  v34 = v244;
  if (v27) {
    v35 = &v243;
  }
  else {
    v35 = v244;
  }
  v36 = &v35[v26];
  float32x4_t v37 = (float32x4_t)xmmword_23435FD80;
  float32x4_t v38 = (float32x4_t)xmmword_23435FD60;
  float32x4_t v39 = (float32x4_t)xmmword_23435FD50;
  float32x4_t v40 = (float32x4_t)xmmword_23435FBB0;
  float v41 = 1.0;
  do
  {
    uint64_t v42 = 0;
    v44 = (float32x4_t *)*--v36;
    v43 = v44;
    long long v45 = (__int128)v44[1];
    long long v46 = (__int128)v44[2];
    long long v47 = (__int128)v44[3];
    long long v250 = (__int128)*v44;
    long long v251 = v45;
    long long v252 = v46;
    long long v253 = v47;
    do
    {
      *(float32x4_t *)((char *)&v231 + v42) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v39, COERCE_FLOAT(*(long long *)((char *)&v250 + v42))), v38, *(float32x2_t *)((char *)&v250 + v42), 1), v37, *(float32x4_t *)((char *)&v250 + v42), 2), v40, *(float32x4_t *)((char *)&v250 + v42), 3);
      v42 += 16;
    }
    while (v42 != 64);
    float32x4_t v39 = v231;
    float32x4_t v38 = (float32x4_t)v232;
    float32x4_t v37 = (float32x4_t)v233;
    float32x4_t v40 = (float32x4_t)v234;
    float v48 = v43[8].f32[0];
    if (v48 >= 0.0001)
    {
      float32x4_t v49 = v43[6];
      float32x4_t v50 = v43[7];
      float32x4_t v51 = v43[5];
      int v52 = v43[8].u8[4];
      float32x4_t v53 = *a3;
      int v54 = v43[8].u8[5];
      float32x4_t v55 = vmulq_f32(v231, v231);
      float32x4_t v56 = vmulq_f32((float32x4_t)v232, (float32x4_t)v232);
      LODWORD(v57) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v55, 2), vaddq_f32(v55, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v55.f32, 1))).u32[0];
      LODWORD(v58) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v56, 2), vaddq_f32(v56, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v56.f32, 1))).u32[0];
      float32x4_t v59 = vmulq_f32((float32x4_t)v233, (float32x4_t)v233);
      LODWORD(v60) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v59, 2), vaddq_f32(v59, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v59.f32, 1))).u32[0];
      float32x2_t v61 = vrsqrte_f32((float32x2_t)LODWORD(v57));
      float32x2_t v62 = vmul_f32(v61, vrsqrts_f32((float32x2_t)LODWORD(v57), vmul_f32(v61, v61)));
      float32x4_t v63 = vmulq_n_f32(v231, vmul_f32(v62, vrsqrts_f32((float32x2_t)LODWORD(v57), vmul_f32(v62, v62))).f32[0]);
      float32x2_t v64 = vrsqrte_f32((float32x2_t)LODWORD(v58));
      float32x2_t v65 = vmul_f32(v64, vrsqrts_f32((float32x2_t)LODWORD(v58), vmul_f32(v64, v64)));
      float32x4_t v66 = vmulq_n_f32((float32x4_t)v232, vmul_f32(v65, vrsqrts_f32((float32x2_t)LODWORD(v58), vmul_f32(v65, v65))).f32[0]);
      float32x2_t v67 = vrsqrte_f32((float32x2_t)LODWORD(v60));
      float32x2_t v68 = vmul_f32(v67, vrsqrts_f32((float32x2_t)LODWORD(v60), vmul_f32(v67, v67)));
      float32x4_t v69 = vmulq_n_f32((float32x4_t)v233, vmul_f32(v68, vrsqrts_f32((float32x2_t)LODWORD(v60), vmul_f32(v68, v68))).f32[0]);
      v255[0] = v63;
      v255[1] = v66;
      v255[2] = v69;
      float32x4_t v70 = vsubq_f32(v53, (float32x4_t)v234);
      int32x4_t v71 = (int32x4_t)vmulq_f32(v70, v70);
      v71.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v71, 2), vadd_f32(*(float32x2_t *)v71.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v71.i8, 1))).u32[0];
      float32x2_t v72 = vrsqrte_f32((float32x2_t)v71.u32[0]);
      float32x2_t v73 = vmul_f32(v72, vrsqrts_f32((float32x2_t)v71.u32[0], vmul_f32(v72, v72)));
      float32x4_t v74 = vmulq_n_f32(v70, vmul_f32(v73, vrsqrts_f32((float32x2_t)v71.u32[0], vmul_f32(v73, v73))).f32[0]);
      if (v54)
      {
        int32x4_t v75 = (int32x4_t)vmulq_f32(v50, v50);
        v75.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v75, 2), vadd_f32(*(float32x2_t *)v75.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v75.i8, 1))).u32[0];
        float32x2_t v76 = vrsqrte_f32((float32x2_t)v75.u32[0]);
        float32x2_t v77 = vmul_f32(v76, vrsqrts_f32((float32x2_t)v75.u32[0], vmul_f32(v76, v76)));
        float32x4_t v78 = vmulq_n_f32(v50, vmul_f32(v77, vrsqrts_f32((float32x2_t)v75.u32[0], vmul_f32(v77, v77))).f32[0]);
        if (!v52)
        {
          int32x4_t v79 = vzip2q_s32((int32x4_t)v63, (int32x4_t)v69);
          float32x4_t v80 = (float32x4_t)vzip1q_s32(vzip1q_s32((int32x4_t)v63, (int32x4_t)v69), (int32x4_t)v66);
          float32x4_t v81 = (float32x4_t)vtrn2q_s32((int32x4_t)v63, (int32x4_t)v66);
          v81.i32[2] = v69.i32[1];
          float32x4_t v51 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v80, v78.f32[0]), v81, *(float32x2_t *)v78.f32, 1), (float32x4_t)vzip1q_s32(v79, vdupq_laneq_s32((int32x4_t)v66, 2)), v78, 2);
        }
        int32x4_t v82 = (int32x4_t)vmulq_f32(v51, v51);
        v82.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v82, 2), vadd_f32(*(float32x2_t *)v82.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v82.i8, 1))).u32[0];
        float32x2_t v83 = vrsqrte_f32((float32x2_t)v82.u32[0]);
        float32x2_t v84 = vmul_f32(v83, vrsqrts_f32((float32x2_t)v82.u32[0], vmul_f32(v83, v83)));
        float32x4_t v85 = vmulq_n_f32(v51, vmul_f32(v84, vrsqrts_f32((float32x2_t)v82.u32[0], vmul_f32(v84, v84))).f32[0]);
        float32x4_t v86 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v78, (int32x4_t)v78), (int8x16_t)v78, 0xCuLL);
        float32x4_t v87 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v74, (int32x4_t)v74), (int8x16_t)v74, 0xCuLL), vnegq_f32(v78)), v74, v86);
        float32x4_t v88 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v87, (int32x4_t)v87), (int8x16_t)v87, 0xCuLL);
        int32x4_t v89 = (int32x4_t)vmulq_f32(v87, v87);
        v89.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v89.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v89, 2), *(float32x2_t *)v89.i8)).u32[0];
        float32x2_t v90 = vrsqrte_f32((float32x2_t)v89.u32[0]);
        float32x2_t v91 = vmul_f32(v90, vrsqrts_f32((float32x2_t)v89.u32[0], vmul_f32(v90, v90)));
        float32x4_t v92 = vmulq_n_f32(v88, vmul_f32(v91, vrsqrts_f32((float32x2_t)v89.u32[0], vmul_f32(v91, v91))).f32[0]);
        float32x4_t v93 = vmlaq_f32(vmulq_f32(v86, vnegq_f32(v92)), v78, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v92, (int32x4_t)v92), (int8x16_t)v92, 0xCuLL));
        float32x4_t v94 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v93, (int32x4_t)v93), (int8x16_t)v93, 0xCuLL);
        int32x4_t v95 = (int32x4_t)vmulq_f32(v93, v93);
        v95.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v95.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v95, 2), *(float32x2_t *)v95.i8)).u32[0];
        float32x2_t v96 = vrsqrte_f32((float32x2_t)v95.u32[0]);
        float32x2_t v97 = vmul_f32(v96, vrsqrts_f32((float32x2_t)v95.u32[0], vmul_f32(v96, v96)));
        float32x4_t v74 = vmulq_n_f32(v94, vmul_f32(v97, vrsqrts_f32((float32x2_t)v95.u32[0], vmul_f32(v97, v97))).f32[0]);
        int32x4_t v98 = (int32x4_t)vmulq_f32(v49, v49);
        v98.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v98, 2), vadd_f32(*(float32x2_t *)v98.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v98.i8, 1))).u32[0];
        float32x2_t v99 = vrsqrte_f32((float32x2_t)v98.u32[0]);
        float32x2_t v100 = vmul_f32(v99, vrsqrts_f32((float32x2_t)v98.u32[0], vmul_f32(v99, v99)));
        float32x4_t v101 = vmulq_n_f32(v49, vmul_f32(v100, vrsqrts_f32((float32x2_t)v98.u32[0], vmul_f32(v100, v100))).f32[0]);
        float32x4_t v102 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v101, (int32x4_t)v101), (int8x16_t)v101, 0xCuLL), vnegq_f32(v85)), v101, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v85, (int32x4_t)v85), (int8x16_t)v85, 0xCuLL));
        float32x4_t v103 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v102, (int32x4_t)v102), (int8x16_t)v102, 0xCuLL);
        int32x4_t v104 = (int32x4_t)vmulq_f32(v102, v102);
        v104.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v104.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v104, 2), *(float32x2_t *)v104.i8)).u32[0];
        float32x2_t v105 = vrsqrte_f32((float32x2_t)v104.u32[0]);
        float32x2_t v106 = vmul_f32(v105, vrsqrts_f32((float32x2_t)v104.u32[0], vmul_f32(v105, v105)));
        float32x4_t v107 = vmulq_n_f32(v103, vmul_f32(v106, vrsqrts_f32((float32x2_t)v104.u32[0], vmul_f32(v106, v106))).f32[0]);
      }
      else
      {
        int32x4_t v108 = (int32x4_t)vmulq_f32(v49, v49);
        v108.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v108, 2), vadd_f32(*(float32x2_t *)v108.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v108.i8, 1))).u32[0];
        float32x2_t v109 = vrsqrte_f32((float32x2_t)v108.u32[0]);
        float32x2_t v110 = vmul_f32(v109, vrsqrts_f32((float32x2_t)v108.u32[0], vmul_f32(v109, v109)));
        float32x4_t v101 = vmulq_n_f32(v49, vmul_f32(v110, vrsqrts_f32((float32x2_t)v108.u32[0], vmul_f32(v110, v110))).f32[0]);
        if (v52)
        {
          float32x4_t v111 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v101, (int32x4_t)v101), (int8x16_t)v101, 0xCuLL);
          float32x4_t v112 = vmlaq_f32(vmulq_f32(v111, vnegq_f32(v51)), v101, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v51, (int32x4_t)v51), (int8x16_t)v51, 0xCuLL));
          float32x4_t v113 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v112, (int32x4_t)v112), (int8x16_t)v112, 0xCuLL);
          int32x4_t v114 = (int32x4_t)vmulq_f32(v112, v112);
          v114.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v114.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v114, 2), *(float32x2_t *)v114.i8)).u32[0];
          float32x2_t v115 = vrsqrte_f32((float32x2_t)v114.u32[0]);
          float32x2_t v116 = vmul_f32(v115, vrsqrts_f32((float32x2_t)v114.u32[0], vmul_f32(v115, v115)));
          float32x4_t v107 = vmulq_n_f32(v113, vmul_f32(v116, vrsqrts_f32((float32x2_t)v114.u32[0], vmul_f32(v116, v116))).f32[0]);
        }
        else
        {
          float32x4_t v117 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v63, v49.f32[0]), v66, *(float32x2_t *)v49.f32, 1), v69, v49, 2);
          int8x16_t v118 = (int8x16_t)vmulq_f32(v117, (float32x4_t)xmmword_23437C0A0);
          float32x4_t v119 = vmlaq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v118, (int32x4_t)v118), v118, 0xCuLL), (float32x4_t)xmmword_23435FD80, v117);
          int32x4_t v120 = vzip1q_s32((int32x4_t)v63, (int32x4_t)v69);
          int32x4_t v121 = vzip2q_s32((int32x4_t)v63, (int32x4_t)v69);
          float32x4_t v122 = (float32x4_t)vtrn2q_s32((int32x4_t)v63, (int32x4_t)v66);
          v122.i32[2] = v69.i32[1];
          float32x4_t v123 = vmlaq_lane_f32(vmlaq_n_f32(vmulq_laneq_f32((float32x4_t)vzip1q_s32(v120, (int32x4_t)v66), v119, 2), v122, v119.f32[0]), (float32x4_t)vzip1q_s32(v121, vdupq_laneq_s32((int32x4_t)v66, 2)), *(float32x2_t *)v119.f32, 1);
          int32x4_t v124 = (int32x4_t)vmulq_f32(v123, v123);
          v124.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v124, 2), vadd_f32(*(float32x2_t *)v124.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v124.i8, 1))).u32[0];
          *(float32x2_t *)v122.f32 = vrsqrte_f32((float32x2_t)v124.u32[0]);
          *(float32x2_t *)v122.f32 = vmul_f32(*(float32x2_t *)v122.f32, vrsqrts_f32((float32x2_t)v124.u32[0], vmul_f32(*(float32x2_t *)v122.f32, *(float32x2_t *)v122.f32)));
          float32x4_t v107 = vmulq_n_f32(v123, vmul_f32(*(float32x2_t *)v122.f32, vrsqrts_f32((float32x2_t)v124.u32[0], vmul_f32(*(float32x2_t *)v122.f32, *(float32x2_t *)v122.f32))).f32[0]);
          float32x4_t v111 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v101, (int32x4_t)v101), (int8x16_t)v101, 0xCuLL);
        }
        float32x4_t v125 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v74, (int32x4_t)v74), (int8x16_t)v74, 0xCuLL);
        float32x4_t v126 = vmlaq_f32(vmulq_f32(v125, (float32x4_t)xmmword_23437C080), (float32x4_t)xmmword_23435FD80, v74);
        float32x4_t v127 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v126, (int32x4_t)v126), (int8x16_t)v126, 0xCuLL);
        int32x4_t v128 = (int32x4_t)vmulq_f32(v126, v126);
        v128.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v128.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v128, 2), *(float32x2_t *)v128.i8)).u32[0];
        float32x2_t v129 = vrsqrte_f32((float32x2_t)v128.u32[0]);
        float32x2_t v130 = vmul_f32(v129, vrsqrts_f32((float32x2_t)v128.u32[0], vmul_f32(v129, v129)));
        float32x4_t v92 = vmulq_n_f32(v127, vmul_f32(v130, vrsqrts_f32((float32x2_t)v128.u32[0], vmul_f32(v130, v130))).f32[0]);
        float32x4_t v131 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v92, (int32x4_t)v92), (int8x16_t)v92, 0xCuLL), vnegq_f32(v74)), v92, v125);
        float32x4_t v132 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v131, (int32x4_t)v131), (int8x16_t)v131, 0xCuLL);
        int32x4_t v133 = (int32x4_t)vmulq_f32(v131, v131);
        v133.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v133.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v133, 2), *(float32x2_t *)v133.i8)).u32[0];
        float32x2_t v134 = vrsqrte_f32((float32x2_t)v133.u32[0]);
        float32x2_t v135 = vmul_f32(v134, vrsqrts_f32((float32x2_t)v133.u32[0], vmul_f32(v134, v134)));
        float32x4_t v78 = vmulq_n_f32(v132, vmul_f32(v135, vrsqrts_f32((float32x2_t)v133.u32[0], vmul_f32(v135, v135))).f32[0]);
        float32x4_t v136 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v107, (int32x4_t)v107), (int8x16_t)v107, 0xCuLL), vnegq_f32(v101)), v107, v111);
        float32x4_t v137 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v136, (int32x4_t)v136), (int8x16_t)v136, 0xCuLL);
        int32x4_t v138 = (int32x4_t)vmulq_f32(v136, v136);
        v138.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v138.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v138, 2), *(float32x2_t *)v138.i8)).u32[0];
        float32x2_t v139 = vrsqrte_f32((float32x2_t)v138.u32[0]);
        float32x2_t v140 = vmul_f32(v139, vrsqrts_f32((float32x2_t)v138.u32[0], vmul_f32(v139, v139)));
        float32x4_t v85 = vmulq_n_f32(v137, vmul_f32(v140, vrsqrts_f32((float32x2_t)v138.u32[0], vmul_f32(v140, v140))).f32[0]);
      }
      float32x4_t v141 = vmulq_f32(v107, (float32x4_t)xmmword_23435FD50);
      float32x4_t v142 = vmulq_f32(v85, (float32x4_t)xmmword_23435FD50);
      float32x4_t v143 = vmulq_f32(v101, (float32x4_t)xmmword_23435FD50);
      float32x4_t v144 = vmulq_f32(v107, (float32x4_t)xmmword_23435FD60);
      float32x4_t v145 = vmulq_f32(v85, (float32x4_t)xmmword_23435FD60);
      float32x4_t v146 = vmulq_f32(v101, (float32x4_t)xmmword_23435FD60);
      float32x4_t v147 = vmulq_f32(v107, (float32x4_t)xmmword_23435FD80);
      LODWORD(v148) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v147, 2), vaddq_f32(v147, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v147.f32, 1))).u32[0];
      float32x4_t v149 = vmulq_f32(v85, (float32x4_t)xmmword_23435FD80);
      LODWORD(v150) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v149, 2), vaddq_f32(v149, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v149.f32, 1))).u32[0];
      float32x4_t v151 = vmulq_f32(v101, (float32x4_t)xmmword_23435FD80);
      LODWORD(v152) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v151, 2), vaddq_f32(v151, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v151.f32, 1))).u32[0];
      float32x4_t v153 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v92, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v144, 2), vaddq_f32(v144, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v144.f32, 1))).f32[0]), v78, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v145, 2), vaddq_f32(v145, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v145.f32, 1))).f32[0]), v74, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v146, 2), vaddq_f32(v146, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v146.f32, 1))).f32[0]);
      float32x4_t v154 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v92, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v141, 2), vaddq_f32(v141, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v141.f32, 1))).f32[0]), v78, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v142, 2), vaddq_f32(v142, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v142.f32, 1))).f32[0]), v74, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v143, 2), vaddq_f32(v143, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v143.f32, 1))).f32[0]);
      float32x4_t v155 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v92, v148), v78, v150), v74, v152);
      v254[0] = v154;
      v254[1] = v153;
      v254[2] = v155;
      if (v48 < 0.9999)
      {
        float v225 = v58;
        float v226 = v57;
        float v227 = v60;
        float32x4_t v228 = (float32x4_t)v234;
        v156.i64[0] = re::makeQuaternionFromMatrix<float>(v255);
        v156.i64[1] = v157;
        float32x4_t v230 = v156;
        v158.i64[0] = re::makeQuaternionFromMatrix<float>(v254);
        v158.i64[1] = v159;
        float32x4_t v160 = vmulq_f32(v230, v158);
        float32x4_t v161 = (float32x4_t)vextq_s8((int8x16_t)v160, (int8x16_t)v160, 8uLL);
        *(float32x2_t *)v160.f32 = vadd_f32(*(float32x2_t *)v160.f32, *(float32x2_t *)v161.f32);
        v160.f32[0] = vaddv_f32(*(float32x2_t *)v160.f32);
        v161.i64[0] = 0;
        float32x4_t v162 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vcgeq_f32(v160, v161)), 0), (int8x16_t)vnegq_f32(v158), (int8x16_t)v158);
        float v163 = 1.0;
        float32x4_t v164 = vsubq_f32(v230, v162);
        int8x16_t v165 = (int8x16_t)vmulq_f32(v164, v164);
        float32x4_t v229 = v162;
        float32x4_t v166 = vaddq_f32(v162, v230);
        int8x16_t v167 = (int8x16_t)vmulq_f32(v166, v166);
        float v168 = atan2f(sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v165.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v165, v165, 8uLL)))), sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v167.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v167, v167, 8uLL)))));
        float v169 = v168 + v168;
        float v170 = 1.0;
        if ((float)(v168 + v168) != 0.0) {
          float v170 = sinf(v168 + v168) / v169;
        }
        float v171 = (float)(1.0 - v48) * v169;
        if (v171 != 0.0)
        {
          float v223 = v170;
          float v172 = sinf((float)(1.0 - v48) * v169);
          float v170 = v223;
          float v163 = v172 / v171;
        }
        float v173 = v48 * v169;
        float v174 = 1.0;
        if (v173 != 0.0)
        {
          float v224 = v170;
          float v175 = sinf(v173);
          float v170 = v224;
          float v174 = v175 / v173;
        }
        float v176 = v170;
        float32x2_t v177 = vrecpe_f32((float32x2_t)LODWORD(v170));
        float32x2_t v178 = vmul_f32(v177, vrecps_f32((float32x2_t)LODWORD(v176), v177));
        float v179 = vmul_f32(v178, vrecps_f32((float32x2_t)LODWORD(v176), v178)).f32[0];
        v178.f32[0] = (float)(1.0 - v48) * (float)(v179 * v163);
        float32x4_t v180 = vmlaq_f32(vmulq_n_f32(v229, v48 * (float)(v179 * v174)), v230, (float32x4_t)vdupq_lane_s32((int32x2_t)v178, 0));
        int8x16_t v181 = (int8x16_t)vmulq_f32(v180, v180);
        float32x4_t v154 = (float32x4_t)vextq_s8(v181, v181, 8uLL);
        float32x2_t v182 = vadd_f32(*(float32x2_t *)v181.i8, *(float32x2_t *)v154.f32);
        if (vaddv_f32(v182) == 0.0)
        {
          float32x4_t v183 = (float32x4_t)xmmword_23435FBB0;
        }
        else
        {
          unsigned __int32 v184 = vadd_f32(v182, (float32x2_t)vdup_lane_s32((int32x2_t)v182, 1)).u32[0];
          float32x2_t v185 = vrsqrte_f32((float32x2_t)v184);
          float32x2_t v186 = vmul_f32(v185, vrsqrts_f32((float32x2_t)v184, vmul_f32(v185, v185)));
          float32x4_t v183 = vmulq_n_f32(v180, vmul_f32(v186, vrsqrts_f32((float32x2_t)v184, vmul_f32(v186, v186))).f32[0]);
        }
        float v60 = v227;
        float32x4_t v40 = v228;
        float v41 = 1.0;
        float v58 = v225;
        float v57 = v226;
        float v187 = (float)(v183.f32[0] + v183.f32[0]) * v183.f32[0];
        float v188 = vmuls_lane_f32(v183.f32[1] + v183.f32[1], *(float32x2_t *)v183.f32, 1);
        float v189 = vmuls_lane_f32(v183.f32[2] + v183.f32[2], v183, 2);
        float v190 = vmuls_lane_f32(v183.f32[0] + v183.f32[0], *(float32x2_t *)v183.f32, 1);
        float v191 = vmuls_lane_f32(v183.f32[0] + v183.f32[0], v183, 2);
        float v192 = vmuls_lane_f32(v183.f32[1] + v183.f32[1], v183, 2);
        float v193 = vmuls_lane_f32(v183.f32[0] + v183.f32[0], v183, 3);
        float v194 = vmuls_lane_f32(v183.f32[1] + v183.f32[1], v183, 3);
        float v195 = vmuls_lane_f32(v183.f32[2] + v183.f32[2], v183, 3);
        v154.f32[0] = 1.0 - (float)(v188 + v189);
        v154.f32[1] = v190 + v195;
        v154.f32[2] = v191 - v194;
        v153.f32[0] = v190 - v195;
        v153.f32[1] = 1.0 - (float)(v187 + v189);
        v153.f32[2] = v192 + v193;
        v155.f32[0] = v191 + v194;
        v155.f32[1] = v192 - v193;
        v155.f32[2] = 1.0 - (float)(v187 + v188);
      }
      uint64_t v196 = 0;
      LODWORD(v197) = 0;
      HIDWORD(v197) = sqrtf(v58);
      *(void *)&long long v198 = 0;
      *((void *)&v198 + 1) = COERCE_UNSIGNED_INT(sqrtf(v60));
      long long v250 = COERCE_UNSIGNED_INT(sqrtf(v57));
      long long v251 = v197;
      long long v252 = v198;
      do
      {
        *(float32x4_t *)((char *)&v231 + v196) = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v154, COERCE_FLOAT(*(long long *)((char *)&v250 + v196))), v153, *(float32x2_t *)((char *)&v250 + v196), 1), v155, *(float32x4_t *)((char *)&v250 + v196), 2);
        v196 += 16;
      }
      while (v196 != 48);
      float32x4_t v39 = v231;
      float32x4_t v38 = (float32x4_t)v232;
      float32x4_t v37 = (float32x4_t)v233;
      v39.i32[3] = 0;
      v38.i32[3] = 0;
      v37.i32[3] = 0;
      v40.f32[3] = v41;
      char v27 = v242;
      v34 = v244;
    }
    if (v27) {
      v199 = &v243;
    }
    else {
      v199 = v34;
    }
  }
  while (v36 != v199);
LABEL_89:
  uint64_t v203 = 0;
  long long v250 = v222;
  long long v251 = v220;
  long long v252 = v221;
  long long v253 = v219;
  do
  {
    *(float32x4_t *)((char *)&v231 + v203) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v39, COERCE_FLOAT(*(long long *)((char *)&v250 + v203))), v38, *(float32x2_t *)((char *)&v250 + v203), 1), v37, *(float32x4_t *)((char *)&v250 + v203), 2), v40, *(float32x4_t *)((char *)&v250 + v203), 3);
    v203 += 16;
  }
  while (v203 != 64);
  float32x4_t v245 = v231;
  long long v246 = v232;
  long long v247 = v233;
  long long v248 = v234;
  uint64_t v204 = (uint64_t)v218;
  if (a4)
  {
    if (v16)
    {
      if (re::ecs2::isBillboardResultChanged(&v245, v218 + 1))
      {
        uint64_t v205 = this;
        do
        {
          uint64_t v206 = v205;
          uint64_t v205 = *(void *)(v205 + 24);
        }
        while (v205);
        v207 = *(re::EventBus **)(*(void *)(v206 + 16) + 288);
        v231.i64[0] = this;
        re::EventBus::publish<re::ecs2::Entity,REBillboardTransformChangedEvent>(v207, this, (uint64_t)&v231);
        goto LABEL_101;
      }
    }
    else
    {
      uint64_t v208 = this;
      do
      {
        uint64_t v209 = v208;
        uint64_t v208 = *(void *)(v208 + 24);
      }
      while (v208);
      v210 = *(re::EventBus **)(*(void *)(v209 + 16) + 288);
      v231.i64[0] = this;
      re::EventBus::publish<re::ecs2::Entity,REBillboardTransformChangedEvent>(v210, this, (uint64_t)&v231);
      long long v238 = 0u;
      long long v239 = 0u;
      long long v236 = 0u;
      long long v237 = 0u;
      long long v234 = 0u;
      long long v235 = 0u;
      long long v232 = 0u;
      long long v233 = 0u;
      float32x4_t v231 = 0u;
      uint64_t v204 = re::HashTable<re::ecs2::Entity const*,re::ecs2::BillboardTransform,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add(a2 + 480, &v249, &v231);
LABEL_101:
      long long v212 = v247;
      long long v211 = v248;
      long long v213 = v246;
      *(float32x4_t *)(v204 + 16) = v245;
      *(_OWORD *)(v204 + 32) = v213;
      *(_OWORD *)(v204 + 48) = v212;
      *(_OWORD *)(v204 + 64) = v211;
    }
    long long v214 = v246;
    *(float32x4_t *)(v204 + 80) = v245;
    *(_OWORD *)(v204 + 96) = v214;
    long long v215 = v248;
    *(_OWORD *)(v204 + 112) = v247;
    *(_OWORD *)(v204 + 128) = v215;
    *(unsigned char *)uint64_t v204 = 1;
  }
  long long v216 = v246;
  *a5 = v245;
  a5[1] = v216;
  long long v217 = v248;
  a5[2] = v247;
  a5[3] = v217;
  if (v240 && (v242 & 1) == 0) {
    (*(void (**)(void))(*v240 + 40))();
  }
}

uint64_t re::HashTable<re::ecs2::Entity const*,re::ecs2::BillboardData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(uint64_t a1, unint64_t a2)
{
  if (!*(void *)a1) {
    return 0;
  }
  unint64_t v2 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
  uint64_t v3 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * ((v2 ^ (v2 >> 31)) % *(unsigned int *)(a1 + 24)));
  if (v3 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 16);
  if (*(void *)(v5 + 176 * v3 + 16) != a2)
  {
    while (1)
    {
      LODWORD(v3) = *(_DWORD *)(v5 + 176 * v3 + 8) & 0x7FFFFFFF;
      if (v3 == 0x7FFFFFFF) {
        break;
      }
      if (*(void *)(v5 + 176 * v3 + 16) == a2) {
        return v5 + 176 * v3 + 32;
      }
    }
    return 0;
  }
  return v5 + 176 * v3 + 32;
}

uint64_t re::EventBus::publish<re::ecs2::Entity,REBillboardTransformChangedEvent>(re::EventBus *a1, uint64_t a2, uint64_t a3)
{
  Type = re::EventBus::getTypeId<REBillboardTransformChangedEvent>();
  return re::EventBus::publish(a1, a2, (uint64_t)Type, a3, 8uLL, 0);
}

uint64_t re::HashTable<re::ecs2::Entity const*,re::ecs2::BillboardTransform,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add(uint64_t a1, uint64_t *a2, _OWORD *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  unint64_t v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (!*(void *)a1)
  {
    LODWORD(v9) = 0;
    goto LABEL_8;
  }
  unint64_t v9 = v8 % *(unsigned int *)(a1 + 24);
  uint64_t v10 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v9);
  if (v10 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v13 = re::HashTable<re::ecs2::Entity const*,re::ecs2::BillboardTransform,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::addAsMove(a1, v9, v8, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v12 = *(void *)(a1 + 16) + 176 * v13;
    return v12 + 32;
  }
  uint64_t v11 = *(void *)(a1 + 16);
  while (*(void *)(v11 + 176 * v10 + 16) != v6)
  {
    LODWORD(v10) = *(_DWORD *)(v11 + 176 * v10 + 8) & 0x7FFFFFFF;
    if (v10 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  uint64_t v12 = v11 + 176 * v10;
  return v12 + 32;
}

void re::ecs2::BillboardManager::flushDirtyComponentsQueueAndUpdatePerEntityStateData(re::ecs2::BillboardManager *this)
{
  unint64_t v2 = (re::ecs2::ECSManager *)*((void *)this + 1);
  if (v2) {
    re::ecs2::ECSManager::flushComponentToMarkDirtyQueue(v2);
  }
  if (*((_DWORD *)this + 37))
  {
    re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>::updatePerEntityStateData((uint64_t)this + 16);
  }
}

void re::ecs2::BillboardManagerStateTracking::~BillboardManagerStateTracking(re::ecs2::BillboardManagerStateTracking *this)
{
  re::ecs2::BillboardManagerStateTracking::~BillboardManagerStateTracking(this);
  JUMPOUT(0x237DBCBD0);
}

{
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 40);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 34);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 31);
  *(void *)this = &unk_26E6F8000;
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 25);
  re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 19);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 13);
  re::HashTable<re::ecs2::Entity const*,re::ecs2::BillboardData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::deinit((uint64_t *)this + 7);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 1);
}

uint64_t re::ecs2::BillboardManagerStateTracking::trackedComponents(re::ecs2::BillboardManagerStateTracking *this)
{
  return *((void *)this + 33);
}

uint64_t re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>::trackedActivationComponents()
{
  return 0;
}

void re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>::clearEntityHierarchyStateData(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 84))
  {
    re::StackScratchAllocator::StackScratchAllocator((re::StackScratchAllocator *)v17);
    v11[0] = 0;
    v11[1] = 0;
    int v12 = 1;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v13 = 0;
    int v16 = 0;
    re::BucketArray<re::ecs2::Entity const*,32ul>::init((uint64_t)v11, (uint64_t)v17, 1uLL);
    *(void *)re::BucketArray<re::ecs2::Entity const*,32ul>::addUninitialized((uint64_t)v11) = a2;
    uint64_t v4 = v15;
    if (v15)
    {
      uint64_t v5 = a1 + 56;
      do
      {
        unint64_t v6 = *(void *)re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v11, v4 - 1);
        re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v11, --v15);
        ++v16;
        re::HashTable<re::ecs2::Entity const*,re::ecs2::BillboardData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::remove(v5, v6);
        uint64_t v7 = *(void *)(v6 + 328);
        if (v7)
        {
          unint64_t v8 = *(uint64_t **)(v6 + 344);
          uint64_t v9 = 8 * v7;
          do
          {
            uint64_t v10 = *v8++;
            *(void *)re::BucketArray<re::ecs2::Entity const*,32ul>::addUninitialized((uint64_t)v11) = v10;
            v9 -= 8;
          }
          while (v9);
        }
        uint64_t v4 = v15;
      }
      while (v15);
    }
    re::BucketArray<re::ecs2::Entity const*,32ul>::deinit((uint64_t)v11);
    if (v11[0])
    {
      if ((v12 & 1) == 0) {
        (*(void (**)(void))(*(void *)v11[0] + 40))();
      }
    }
    re::StackScratchAllocator::~StackScratchAllocator((re::StackScratchAllocator *)v17);
  }
}

void re::ecs2::BillboardManager::~BillboardManager(re::ecs2::BillboardManager *this)
{
}

{
  uint64_t vars8;

  re::HashTable<re::ecs2::Entity const*,re::ecs2::BillboardData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::deinit((uint64_t *)this + 60);
  re::HashTable<unsigned long long,re::ecs2::RenderPassGroupBoundsInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)this + 54);
  re::ecs2::BillboardManagerStateTracking::~BillboardManagerStateTracking((re::ecs2::BillboardManager *)((char *)this + 16));
  JUMPOUT(0x237DBCBD0);
}

void re::internal::CallableMemFn<re::ecs2::BillboardManagerStateTracking,REEventHandlerResult (re::ecs2::BillboardManagerStateTracking::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BillboardManagerStateTracking,REEventHandlerResult (re::ecs2::BillboardManagerStateTracking::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(void *a1, void *a2)
{
  unint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    unint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BillboardManagerStateTracking,REEventHandlerResult (re::ecs2::BillboardManagerStateTracking::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6F7E48;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BillboardManagerStateTracking,REEventHandlerResult (re::ecs2::BillboardManagerStateTracking::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6F7E48;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BillboardManagerStateTracking,REEventHandlerResult (re::ecs2::BillboardManagerStateTracking::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BillboardManagerStateTracking,REEventHandlerResult (re::ecs2::BillboardManagerStateTracking::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BillboardManagerStateTracking,REEventHandlerResult (re::ecs2::BillboardManagerStateTracking::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BillboardManagerStateTracking,REEventHandlerResult (re::ecs2::BillboardManagerStateTracking::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6F7EA0;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BillboardManagerStateTracking,REEventHandlerResult (re::ecs2::BillboardManagerStateTracking::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6F7EA0;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BillboardManagerStateTracking,REEventHandlerResult (re::ecs2::BillboardManagerStateTracking::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BillboardManagerStateTracking,REEventHandlerResult (re::ecs2::BillboardManagerStateTracking::*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BillboardManagerStateTracking,REEventHandlerResult (re::ecs2::BillboardManagerStateTracking::*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BillboardManagerStateTracking,REEventHandlerResult (re::ecs2::BillboardManagerStateTracking::*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6F7EF8;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BillboardManagerStateTracking,REEventHandlerResult (re::ecs2::BillboardManagerStateTracking::*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6F7EF8;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BillboardManagerStateTracking,REEventHandlerResult (re::ecs2::BillboardManagerStateTracking::*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BillboardManagerStateTracking,REEventHandlerResult (re::ecs2::BillboardManagerStateTracking::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BillboardManagerStateTracking,REEventHandlerResult (re::ecs2::BillboardManagerStateTracking::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BillboardManagerStateTracking,REEventHandlerResult (re::ecs2::BillboardManagerStateTracking::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6F7F50;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BillboardManagerStateTracking,REEventHandlerResult (re::ecs2::BillboardManagerStateTracking::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6F7F50;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BillboardManagerStateTracking,REEventHandlerResult (re::ecs2::BillboardManagerStateTracking::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BillboardManagerStateTracking,REEventHandlerResult (re::ecs2::BillboardManagerStateTracking::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BillboardManagerStateTracking,REEventHandlerResult (re::ecs2::BillboardManagerStateTracking::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BillboardManagerStateTracking,REEventHandlerResult (re::ecs2::BillboardManagerStateTracking::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6F7FA8;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BillboardManagerStateTracking,REEventHandlerResult (re::ecs2::BillboardManagerStateTracking::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6F7FA8;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BillboardManagerStateTracking,REEventHandlerResult (re::ecs2::BillboardManagerStateTracking::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::size()
{
  return 32;
}

uint64_t re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::HashSetBase(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 36) = 0x7FFFFFFFLL;
  uint64_t v4 = *(void *)a2;
  if (v4)
  {
    if (*(_DWORD *)(a2 + 28) <= 3u) {
      signed int v5 = 3;
    }
    else {
      signed int v5 = *(_DWORD *)(a2 + 28);
    }
    re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::init(a1, v4, v5);
    re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::copy(a1, a2);
  }
  return a1;
}

void re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::copy(uint64_t a1, uint64_t a2)
{
  re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::clear(a1);
  unsigned int v4 = *(_DWORD *)(a2 + 28);
  if (*(_DWORD *)(a1 + 24) < v4) {
    re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::setCapacity(a1, v4);
  }
  unint64_t v5 = *(unsigned int *)(a2 + 32);
  if (v5)
  {
    uint64_t v6 = 0;
    for (unint64_t i = 0; i < v5; ++i)
    {
      uint64_t v8 = *(void *)(a2 + 16) + v6;
      if ((*(_DWORD *)(v8 + 8) & 0x80000000) != 0)
      {
        re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::addAsCopy(a1, *(void *)v8 % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)v8, v8 + 16, (void *)(v8 + 16));
        unint64_t v5 = *(unsigned int *)(a2 + 32);
      }
      v6 += 24;
    }
  }
}

uint64_t re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>::trackedComponents()
{
  return 0;
}

double re::HashTable<re::ecs2::Entity const*,re::ecs2::BillboardData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    unsigned int v3 = *((_DWORD *)a1 + 8);
    if (v3)
    {
      uint64_t v4 = 0;
      uint64_t v5 = 176 * v3;
      do
      {
        uint64_t v6 = a1[2] + v4;
        int v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0) {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
        }
        v4 += 176;
      }
      while (v5 != v4);
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

void re::HashTable<re::ecs2::Entity const*,re::ecs2::BillboardData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  uint64_t v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    int v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    uint64_t v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      uint64_t v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  int v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + 176 * v10, 16);
  if (v12)
  {
    uint64_t v14 = v12;
    *(void *)(a1 + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &unk_2343655D0, 4 * v10);
    }
    *(void *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

uint64_t (***re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>::subscribeToEventToInvalidateEntityHierarchy<REComponentDidActivateEvent>(re *a1, re::EventBus *a2, uint64_t a3, uint64_t a4))(void)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v15 = re::globalAllocators(a1)[2];
  uint64_t v8 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v15 + 32))(v15, 32, 0);
  *uint64_t v8 = &unk_26E6F8098;
  v8[1] = a1;
  v8[2] = re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>::invalidateEntityHierarchyEventHandler<REComponentDidActivateEvent>;
  v8[3] = 0;
  int v16 = v8;
  uint64_t v9 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(a2, (uint64_t)v14, a4, 0);
  uint64_t v11 = v10;
  int v12 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a3);
  *int v12 = v9;
  v12[1] = v11;
  return re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v14);
}

uint64_t (***re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>::subscribeToEventToInvalidateEntityHierarchy<REComponentWillDeactivateEvent>(re *a1, re::EventBus *a2, uint64_t a3, uint64_t a4))(void)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v15 = re::globalAllocators(a1)[2];
  uint64_t v8 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v15 + 32))(v15, 32, 0);
  *uint64_t v8 = &unk_26E6F80F0;
  v8[1] = a1;
  v8[2] = re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>::invalidateEntityHierarchyEventHandler<REComponentWillDeactivateEvent>;
  v8[3] = 0;
  int v16 = v8;
  uint64_t v9 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(a2, (uint64_t)v14, a4, 0);
  uint64_t v11 = v10;
  int v12 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a3);
  *int v12 = v9;
  v12[1] = v11;
  return re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v14);
}

uint64_t re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>::invalidateEntityHierarchyEventHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  if (!*(unsigned char *)(a2 + 371)
    && (*(unsigned char *)(a2 + 288) & 1) != 0
    && !re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a1 + 200, &v4))
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 40))(a1, v4);
    re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add(a1 + 104, &v4);
  }
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6F8040;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6F8040;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

uint64_t re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>::invalidateEntityHierarchyEventHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  if (!*(unsigned char *)(a2 + 371)
    && (*(unsigned char *)(a2 + 288) & 1) != 0
    && !re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a1 + 200, &v4))
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 40))(a1, v4);
    re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add(a1 + 104, &v4);
  }
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6F8098;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6F8098;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

uint64_t re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>::invalidateEntityHierarchyEventHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  if (!*(unsigned char *)(a2 + 371)
    && (*(unsigned char *)(a2 + 288) & 1) != 0
    && !re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a1 + 200, &v4))
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 40))(a1, v4);
    re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add(a1 + 104, &v4);
  }
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6F80F0;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6F80F0;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

uint64_t re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>::invalidateEntityHierarchyEventHandler<RESceneEntityDidReparentEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  if (!*(unsigned char *)(a2 + 371)
    && (*(unsigned char *)(a2 + 288) & 1) != 0
    && !re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a1 + 200, &v4))
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 40))(a1, v4);
    re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add(a1 + 104, &v4);
  }
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6F8148;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6F8148;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::size()
{
  return 32;
}

uint64_t re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>::invalidateEntityHierarchyEventHandler<RESceneEntityDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = a2;
  if (!*(unsigned char *)(a2 + 371))
  {
    uint64_t v3 = a1 + 200;
    (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
    re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add(a1 + 104, &v5);
    re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove(v3, &v5);
  }
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>::*)(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>::*)(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>::*)(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6F81A0;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>::*)(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6F81A0;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>::*)(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)>::size()
{
  return 32;
}

uint64_t re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>::invalidateEntityHierarchyEventHandler<RESceneEntityWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = a2;
  uint64_t v3 = a1 + 200;
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove(a1 + 104, &v5);
  re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add(v3, &v5);
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>::*)(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>::*)(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>::*)(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6F81F8;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>::*)(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6F81F8;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>::*)(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::size()
{
  return 32;
}

uint64_t re::HashTable<re::ecs2::Entity const*,BOOL,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add(uint64_t result, uint64_t *a2, unsigned char *a3)
{
  uint64_t v5 = result;
  uint64_t v6 = *a2;
  unint64_t v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  unint64_t v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (*(void *)result)
  {
    unint64_t v9 = v8 % *(unsigned int *)(result + 24);
    uint64_t v10 = *(unsigned int *)(*(void *)(result + 8) + 4 * v9);
    if (v10 != 0x7FFFFFFF)
    {
      uint64_t v11 = *(void *)(result + 16);
      if (*(void *)(v11 + 32 * v10 + 16) == v6) {
        return result;
      }
      while (1)
      {
        uint64_t v10 = *(_DWORD *)(v11 + 32 * v10 + 8) & 0x7FFFFFFF;
        if (v10 == 0x7FFFFFFF) {
          break;
        }
        if (*(void *)(v11 + 32 * v10 + 16) == v6) {
          return result;
        }
      }
    }
  }
  else
  {
    LODWORD(v9) = 0;
  }
  double result = re::HashTable<re::ecs2::Entity const*,BOOL,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::addAsMove(result, v9, v8, a2, a3);
  ++*(_DWORD *)(v5 + 40);
  return result;
}

uint64_t re::HashTable<re::ecs2::Entity const*,BOOL,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, unsigned char *a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::ecs2::Entity const*,BOOL,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::setCapacity(a1, (2 * *(_DWORD *)(a1 + 28)));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 32 * v9 + 8);
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 32 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v11 + 32 * v9 + 8) = v12 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + 32 * v9 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 32 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 32 * v9) = a3;
  *(void *)(*(void *)(a1 + 16) + 32 * v9 + 16) = *a4;
  uint64_t v13 = *(void *)(a1 + 8);
  *(unsigned char *)(*(void *)(a1 + 16) + 32 * v9 + 24) = *a5;
  *(_DWORD *)(v13 + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<re::ecs2::Entity const*,BOOL,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(void *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v13, v4, a2);
      long long v5 = *(_OWORD *)v13;
      *(_OWORD *)uint64_t v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      uint64_t v6 = *(void *)&v13[16];
      uint64_t v7 = *(void *)(a1 + 16);
      *(void *)&v13[16] = v7;
      *(void *)(a1 + 16) = v6;
      long long v9 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v9;
      uint64_t v10 = v8;
      if (v8)
      {
        uint64_t v11 = v7 + 16;
        do
        {
          if ((*(_DWORD *)(v11 - 8) & 0x80000000) != 0) {
            re::HashTable<re::ecs2::Entity const*,BOOL,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::addAsMove(a1, *(void *)(v11 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(v11 - 16), (void *)v11, (unsigned char *)(v11 + 8));
          }
          v11 += 32;
          --v10;
        }
        while (v10);
      }
      re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2) {
      signed int v12 = a2;
    }
    else {
      signed int v12 = 3;
    }
  }
}

void re::HashTable<re::ecs2::Entity const*,re::ecs2::BillboardData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v32, 0, 36);
      *(void *)&v32[36] = 0x7FFFFFFFLL;
      re::HashTable<re::ecs2::Entity const*,re::ecs2::BillboardData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::init((uint64_t)v32, v4, a2);
      long long v5 = *(_OWORD *)a1;
      *(void *)a1 = *(void *)v32;
      uint64_t v6 = *(void *)(a1 + 16);
      long long v7 = *(_OWORD *)&v32[8];
      *(_OWORD *)v32 = v5;
      *(void *)&v32[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      long long v9 = *(_OWORD *)&v32[24];
      *(_OWORD *)&v32[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v32[32];
      *(_OWORD *)(a1 + 24) = v9;
      unsigned int v10 = v8;
      if (v8)
      {
        uint64_t v11 = 0;
        unint64_t v12 = 0;
        uint64_t v13 = v7;
        int v14 = DWORD1(v9);
        do
        {
          uint64_t v15 = (uint64_t *)(*(void *)&v32[16] + v11);
          if ((*(_DWORD *)(*(void *)&v32[16] + v11 + 8) & 0x80000000) != 0)
          {
            unint64_t v16 = *v15;
            unint64_t v17 = *(unsigned int *)(a1 + 24);
            unint64_t v18 = *v15 % v17;
            unsigned int v19 = *(_DWORD *)(a1 + 36);
            if (v19 == 0x7FFFFFFF)
            {
              unsigned int v19 = *(_DWORD *)(a1 + 32);
              unsigned int v20 = v19;
              if (v19 == v17)
              {
                re::HashTable<re::ecs2::Entity const*,re::ecs2::BillboardData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::setCapacity(a1, (2 * v14));
                unint64_t v18 = v16 % *(unsigned int *)(a1 + 24);
                unsigned int v20 = *(_DWORD *)(a1 + 32);
                uint64_t v13 = *(void *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v20 + 1;
              uint64_t v21 = *(void *)(a1 + 16);
              int v22 = *(_DWORD *)(v21 + 176 * v19 + 8);
            }
            else
            {
              uint64_t v21 = *(void *)(a1 + 16);
              int v22 = *(_DWORD *)(v21 + 176 * v19 + 8);
              *(_DWORD *)(a1 + 36) = v22 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v21 + 176 * v19 + 8) = v22 | 0x80000000;
            uint64_t v23 = *(void *)(a1 + 16) + 176 * v19;
            *(_DWORD *)(v23 + 8) = *(_DWORD *)(v23 + 8) & 0x80000000 | *(_DWORD *)(v13 + 4 * v18);
            *(void *)(*(void *)(a1 + 16) + 176 * v19) = v16;
            *(void *)(*(void *)(a1 + 16) + 176 * v19 + 16) = v15[2];
            float32x2_t v24 = (_OWORD *)(*(void *)(a1 + 16) + 176 * v19);
            v24[2] = *((_OWORD *)v15 + 2);
            long long v25 = *((_OWORD *)v15 + 3);
            long long v26 = *((_OWORD *)v15 + 4);
            long long v27 = *((_OWORD *)v15 + 6);
            v24[5] = *((_OWORD *)v15 + 5);
            v24[6] = v27;
            v24[3] = v25;
            v24[4] = v26;
            long long v28 = *((_OWORD *)v15 + 7);
            long long v29 = *((_OWORD *)v15 + 8);
            long long v30 = *((_OWORD *)v15 + 10);
            v24[9] = *((_OWORD *)v15 + 9);
            v24[10] = v30;
            v24[7] = v28;
            v24[8] = v29;
            uint64_t v13 = *(void *)(a1 + 8);
            *(_DWORD *)(v13 + 4 * v18) = v19;
            int v14 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v14;
            unsigned int v10 = *(_DWORD *)&v32[32];
          }
          ++v12;
          v11 += 176;
        }
        while (v12 < v10);
      }
      re::HashTable<re::ecs2::Entity const*,re::ecs2::BillboardData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::deinit((uint64_t *)v32);
    }
  }
  else
  {
    if (a2) {
      signed int v31 = a2;
    }
    else {
      signed int v31 = 3;
    }
  }
}

void re::HashTable<re::ecs2::Scene const*,re::ecs2::CameraPosition,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      int v11 = *(_DWORD *)(a1 + 28);
      signed int v12 = 2 * v11;
      uint64_t v13 = *(void *)a1;
      if (*(void *)a1)
      {
        if (v12) {
          BOOL v14 = v9 == v12;
        }
        else {
          BOOL v14 = 1;
        }
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v28, 0, 36);
          *(void *)&v28[36] = 0x7FFFFFFFLL;
          re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::init((uint64_t)v28, v13, v12);
          long long v15 = *(_OWORD *)v28;
          *(_OWORD *)long long v28 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          uint64_t v16 = *(void *)&v28[16];
          uint64_t v17 = *(void *)(a1 + 16);
          *(void *)&v28[16] = v17;
          *(void *)(a1 + 16) = v16;
          long long v19 = *(_OWORD *)&v28[24];
          *(_OWORD *)&v28[24] = *(_OWORD *)(a1 + 24);
          unsigned int v18 = *(_DWORD *)&v28[32];
          *(_OWORD *)(a1 + 24) = v19;
          uint64_t v20 = v18;
          if (v18)
          {
            uint64_t v21 = v17 + 16;
            do
            {
              if ((*(_DWORD *)(v21 - 8) & 0x80000000) != 0) {
                re::HashTable<re::ecs2::Scene const*,re::ecs2::CameraPosition,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::addAsMove(a1, *(void *)(v21 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(v21 - 16), v21, v21 + 16);
              }
              v21 += 80;
              --v20;
            }
            while (v20);
          }
          re::HashTable<unsigned long long,re::ecs2::RenderPassGroupBoundsInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v28);
        }
      }
      else
      {
        if (v12) {
          signed int v24 = 2 * v11;
        }
        else {
          signed int v24 = 3;
        }
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v22 = *(void *)(a1 + 16);
    int v23 = *(_DWORD *)(v22 + 80 * v9 + 8);
  }
  else
  {
    uint64_t v22 = *(void *)(a1 + 16);
    int v23 = *(_DWORD *)(v22 + 80 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v23 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v22 + 80 * v9 + 8) = v23 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + 80 * v9 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 80 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 80 * v9) = a3;
  *(void *)(*(void *)(a1 + 16) + 80 * v9 + 16) = *a4;
  uint64_t v25 = *(void *)(a1 + 16);
  uint64_t v26 = v25 + 80 * v9;
  *(unsigned char *)(v26 + 32) = *(unsigned char *)a5;
  int v27 = *(unsigned __int8 *)(a5 + 16);
  *(unsigned char *)(v26 + 48) = v27;
  if (v27) {
    *(_OWORD *)(v25 + 80 * v9 + 64) = *(_OWORD *)(a5 + 32);
  }
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
}

uint64_t re::HashTable<re::ecs2::Entity const*,re::ecs2::BillboardTransform,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, _OWORD *a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      int v11 = *(_DWORD *)(a1 + 28);
      signed int v12 = 2 * v11;
      uint64_t v13 = *(void *)a1;
      if (*(void *)a1)
      {
        if (v12) {
          BOOL v14 = v9 == v12;
        }
        else {
          BOOL v14 = 1;
        }
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v34, 0, 36);
          *(void *)&v34[36] = 0x7FFFFFFFLL;
          re::HashTable<re::ecs2::Entity const*,re::ecs2::BillboardData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::init((uint64_t)v34, v13, v12);
          long long v15 = *(_OWORD *)v34;
          *(_OWORD *)v34 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          uint64_t v16 = *(void *)&v34[16];
          uint64_t v17 = *(void *)(a1 + 16);
          *(void *)&v34[16] = v17;
          *(void *)(a1 + 16) = v16;
          long long v19 = *(_OWORD *)&v34[24];
          *(_OWORD *)&v34[24] = *(_OWORD *)(a1 + 24);
          unsigned int v18 = *(_DWORD *)&v34[32];
          *(_OWORD *)(a1 + 24) = v19;
          uint64_t v20 = v18;
          if (v18)
          {
            uint64_t v21 = v17 + 16;
            do
            {
              if ((*(_DWORD *)(v21 - 8) & 0x80000000) != 0) {
                re::HashTable<re::ecs2::Entity const*,re::ecs2::BillboardTransform,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::addAsMove(a1, *(void *)(v21 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(v21 - 16), v21, v21 + 16);
              }
              v21 += 176;
              --v20;
            }
            while (v20);
          }
          re::HashTable<re::ecs2::Entity const*,re::ecs2::BillboardData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::deinit((uint64_t *)v34);
        }
      }
      else
      {
        if (v12) {
          signed int v24 = 2 * v11;
        }
        else {
          signed int v24 = 3;
        }
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v22 = *(void *)(a1 + 16);
    int v23 = *(_DWORD *)(v22 + 176 * v9 + 8);
  }
  else
  {
    uint64_t v22 = *(void *)(a1 + 16);
    int v23 = *(_DWORD *)(v22 + 176 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v23 & 0x7FFFFFFF;
  }
  uint64_t v25 = 176 * v9;
  *(_DWORD *)(v22 + v25 + 8) = v23 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + v25 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + v25 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + v25) = a3;
  *(void *)(*(void *)(a1 + 16) + v25 + 16) = *a4;
  uint64_t v26 = (_OWORD *)(*(void *)(a1 + 16) + v25);
  v26[2] = *a5;
  long long v27 = a5[1];
  long long v28 = a5[2];
  long long v29 = a5[4];
  v26[5] = a5[3];
  v26[6] = v29;
  v26[3] = v27;
  v26[4] = v28;
  long long v30 = a5[5];
  long long v31 = a5[6];
  long long v32 = a5[8];
  v26[9] = a5[7];
  v26[10] = v32;
  v26[7] = v30;
  v26[8] = v31;
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::ecs2::RigComponent::updateRigRuntimeData(re::Allocator **a1, int a2, re::Allocator *a3, re::Allocator *a4, uint64_t a5, uint64_t a6, unint64_t *a7)
{
  BOOL v14 = (re::RigAsset *)re::AssetHandle::asset<re::MeshAsset>((re::MeshAsset *)(a5 + 32));
  long long v15 = v14;
  if (a6) {
    uint64_t v16 = (const re::MeshNameMap *)(a6 + 216);
  }
  else {
    uint64_t v16 = (re::RigAsset *)((char *)v14 + 448);
  }
  unint64_t v17 = *(void *)(a5 + 40);
  if (v17) {
    uint64_t v18 = *(void *)(v17 + 664);
  }
  else {
    uint64_t v18 = 0;
  }
  unint64_t v19 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (v17 ^ (v17 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v17 ^ (v17 >> 30))) >> 27));
  unint64_t v20 = (*((void *)v16 + 1)
       + ((v18 ^ (v19 >> 31) ^ v19) << 6)
       + ((v18 ^ (v19 >> 31) ^ v19) >> 2)
       - 0x61C8864680B583E9) ^ v18 ^ (v19 >> 31) ^ v19;
  uint64_t v21 = a1[5];
  if (a2)
  {
    if (v21)
    {
      unint64_t v22 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * ((unint64_t)v21 ^ ((unint64_t)v21 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                                * ((unint64_t)v21 ^ ((unint64_t)v21 >> 30))) >> 27));
      v20 ^= (v20 << 6) - 0x61C8864680B583E9 + (v20 >> 2) + (*((void *)v21 + 83) ^ (v22 >> 31) ^ v22);
      int v23 = (const re::AssetType *)*((void *)v21 + 33);
      signed int v24 = (re::RigAsset *)re::AssetHandle::assetWithType((re::AssetHandle *)(a1 + 4), v23, 0);
      uint64_t v25 = v24;
      if (a1[7])
      {
        a1[7] = 0;
        re::DynamicArray<re::RigDefinition>::deinit((uint64_t)(a1 + 8));
        signed int v24 = (re::RigAsset *)re::DynamicArray<re::MeshRigGraphIndex>::deinit((uint64_t)(a1 + 18));
      }
      goto LABEL_16;
    }
  }
  else if (v21)
  {
    re::AssetHandle::loadAsync((re::AssetHandle *)(a1 + 4));
  }
  if ((re::Allocator *)v20 != a1[7])
  {
    a1[7] = (re::Allocator *)v20;
    re::DynamicArray<re::RigDefinition>::deinit((uint64_t)(a1 + 8));
    re::DynamicArray<re::MeshRigGraphIndex>::deinit((uint64_t)(a1 + 18));
    re::RigAsset::init((re::RigAsset *)(a1 + 8), v15, 0);
    unint64_t v20 = (unint64_t)a1[7];
  }
  uint64_t v25 = (const re::RigAsset *)(a1 + 8);
  signed int v24 = (re::RigAsset *)re::RigAsset::assetType(v14);
  int v23 = v24;
LABEL_16:
  uint64_t v26 = re::RigAsset::assetType(v24);
  if (v26 == (uint64_t *)v23)
  {
    long long v29 = a1[24];
    re::RigRuntimeData::update((re::RigRuntimeData *)(a1 + 23), v25, v15, v16, v20);
    if (v29 == a1[24]) {
      return;
    }
  }
  else
  {
    long long v27 = re::RigGraphAsset::assetType((re::RigGraphAsset *)v26);
    if (v27 != (uint64_t *)v23)
    {
      long long v28 = *re::ecsComponentsLogObjects((re *)v27);
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_233120000, v28, OS_LOG_TYPE_DEFAULT, "Unknown rig asset type", buf, 2u);
      }
      return;
    }
    unint64_t v30 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * ((unint64_t)a3 ^ ((unint64_t)a3 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                            * ((unint64_t)a3 ^ ((unint64_t)a3 >> 30))) >> 27));
    re::RigRuntimeData::update(a1 + 23, v25, v15, (uint64_t)v16, a3, a7, a4, (re::Allocator *)(((v30 ^ (v30 >> 31)) - 0x61C8864680B583E9 + (v20 << 6) + (v20 >> 2)) ^ v20));
  }
  re::ecs2::Component::markDirty(a1);
}

BOOL re::ecs2::RigComponentStateImpl::processDirtyComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v22, a5, 0);
  unint64_t v8 = v22;
  unint64_t v9 = v23;
  unint64_t v22 = a4;
  unint64_t v23 = v8;
  unint64_t v24 = v9;
  uint64_t v10 = (unsigned __int16)v9;
  uint64_t v11 = v9 & 0xFFFF0000;
  if (v8 != a5 || v10 != 0xFFFF || v11 != 4294901760)
  {
    do
    {
      uint64_t v14 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v23);
      uint64_t v15 = *(void *)v14;
      uint64_t v16 = *(void *)(*(void *)(*(void *)v14 + 16) + 176);
      if (v16 && *(void *)(v16 + 40))
      {
        unint64_t v17 = v22;
        unint64_t v18 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v23);
        re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v17, v18, *(void *)(a3 + 40));
      }
      else
      {
        unint64_t v19 = v22;
        unint64_t v20 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v23);
        re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v19, v20, *(void *)(a3 + 32));
        re::RigRuntimeData::clear((re::RigRuntimeData *)(v15 + 184));
      }
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v23);
    }
    while (v23 != a5 || (unsigned __int16)v24 != 0xFFFF || WORD1(v24) != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

unint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::setComponentState(re::ecs2::ComponentBucketsBase **a1, unint64_t a2, unint64_t a3, unsigned int a4)
{
  unint64_t result = re::ecs2::ComponentBucketsBase::moveComponent(a1[2], a2, a3, (unint64_t)a1[a4 + 3]);
  if (!a4)
  {
    BOOL v10 = result == a2 && v9 == a3;
    if (!v10 || ((v9 ^ a3) & 0xFFFFFF00000000) != 0)
    {
      signed int v12 = *(uint64_t (**)(void))(**((void **)*a1 + 28) + 16);
      return v12();
    }
  }
  return result;
}

BOOL re::ecs2::RigComponentStateImpl::processPreparingComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v48 = 0;
  uint64_t v49 = 0;
  uint64_t v8 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 8) + 40) + 32))(*(void *)(*(void *)(a1 + 8) + 40));
  uint64_t v9 = re::ServiceLocator::serviceOrNull<re::ecs2::PhysicsSimulationService>(v8);
  if (v9)
  {
    uint64_t v10 = v9;
    uint64_t v11 = *(void *)(a3 + 8);
    uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 24))(v9);
    uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v10 + 40))(v10, v11);
    uint64_t v48 = v12;
    uint64_t v49 = v13;
  }
  v43 = (re::ecs2::ComponentBucketsBase **)a3;
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v45, a5, 0);
  unint64_t v14 = v45;
  unint64_t v15 = v46;
  unint64_t v45 = a4;
  unint64_t v46 = v14;
  unint64_t v47 = v15;
  uint64_t v16 = (unsigned __int16)v15;
  uint64_t v17 = v15 & 0xFFFF0000;
  if (v14 != a5 || v16 != 0xFFFF || v17 != 4294901760)
  {
    do
    {
      unint64_t v20 = (re::ecs2::RigComponentHelper **)re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v46);
      unint64_t v22 = *v20;
      uint64_t v23 = *((void *)*v20 + 2);
      uint64_t v24 = *(void *)(*(void *)(v23 + 176) + 40);
      if (v24)
      {
        unsigned int v25 = atomic_load((unsigned int *)(v24 + 704));
        if (v25 == 2)
        {
          int v26 = re::ecs2::RigComponentHelper::areAssetAndDependenciesLoaded(*v20, v21);
          long long v27 = (re::ecs2::PhysicsSimulationData *)re::ecs2::PhysicsSimulationMapping::physicsSimulationDataForEntity(&v48, v23);
          if (v27 && (uint64_t v28 = re::ecs2::PhysicsSimulationData::ensurePhysicsSimulation(v27)) != 0)
          {
            long long v29 = *(re::Allocator **)(v28 + 56);
            objc_storeWeak((id *)v22 + 61, (id)(v28 + 8));
          }
          else
          {
            long long v29 = 0;
          }
          unint64_t v30 = (re::Allocator *)(*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 8) + 40) + 32))(*(void *)(*(void *)(a1 + 8) + 40));
          long long v31 = (re::ecs2::EntityComponentCollection *)(v23 + 32);
          uint64_t v32 = *(void *)(v23 + 176);
          uint64_t v33 = re::ecs2::EntityComponentCollection::get(v31, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
          v34 = (unint64_t *)re::ecs2::EntityComponentCollection::get(v31, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::IKParametersComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
          re::ecs2::RigComponent::updateRigRuntimeData((re::Allocator **)v22, v26, v29, v30, v32, v33, v34);
          if (v26)
          {
            unint64_t v35 = v45;
            v36 = (re::RigGraphAsset *)re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v46);
            float32x4_t v37 = re::RigGraphAsset::assetType(v36);
            float32x4_t v38 = (uint64_t *)*((void *)v22 + 5);
            if (v38) {
              float32x4_t v38 = (uint64_t *)v38[33];
            }
            if (v37 == v38) {
              unsigned int v39 = 3;
            }
            else {
              unsigned int v39 = 1;
            }
            re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::setComponentState(v43, v35, (unint64_t)v36, v39);
          }
        }
      }
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v46);
    }
    while (v46 != a5 || (unsigned __int16)v47 != 0xFFFF || WORD1(v47) != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

BOOL re::ecs2::RigComponentStateImpl::processUpdatingComponents(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  uint64_t v8 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 8) + 40) + 32))(*(void *)(*(void *)(a1 + 8) + 40));
  uint64_t v9 = re::ServiceLocator::serviceOrNull<re::ecs2::PhysicsSimulationService>(v8);
  if (v9)
  {
    uint64_t v10 = v9;
    uint64_t v11 = *(void *)(a3 + 8);
    uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 24))(v9);
    uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v10 + 40))(v10, v11);
    uint64_t v39 = v12;
    uint64_t v40 = v13;
  }
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v36, a5, 0);
  uint64_t v14 = v36;
  uint64_t v15 = v37;
  uint64_t v36 = a4;
  uint64_t v37 = v14;
  uint64_t v38 = v15;
  uint64_t v16 = (unsigned __int16)v15;
  uint64_t v17 = v15 & 0xFFFF0000;
  if (v14 != a5 || v16 != 0xFFFF || v17 != 4294901760)
  {
    do
    {
      uint64_t v20 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v37);
      uint64_t v21 = *(void *)v20;
      uint64_t v22 = *(void *)(*(void *)v20 + 16);
      uint64_t v23 = (re::ecs2::PhysicsSimulationData *)re::ecs2::PhysicsSimulationMapping::physicsSimulationDataForEntity(&v39, v22);
      if (v23) {
        uint64_t v24 = re::ecs2::PhysicsSimulationData::ensurePhysicsSimulation(v23);
      }
      else {
        uint64_t v24 = 0;
      }
      WeakRetained = (char *)objc_loadWeakRetained((id *)(v21 + 488));
      if (WeakRetained) {
        int v26 = WeakRetained - 8;
      }
      else {
        int v26 = 0;
      }
      if (WeakRetained) {

      }
      if (v26 != (char *)v24)
      {
        if (v24) {
          long long v27 = *(re::Allocator **)(v24 + 56);
        }
        else {
          long long v27 = 0;
        }
        uint64_t v28 = (re::Allocator *)(*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 8) + 40) + 32))(*(void *)(*(void *)(a1 + 8) + 40));
        long long v29 = (re::ecs2::EntityComponentCollection *)(v22 + 32);
        uint64_t v30 = *(void *)(v22 + 176);
        uint64_t v31 = re::ecs2::EntityComponentCollection::get(v29, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
        uint64_t v32 = (unint64_t *)re::ecs2::EntityComponentCollection::get(v29, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::IKParametersComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
        re::ecs2::RigComponent::updateRigRuntimeData((re::Allocator **)v21, 1, v27, v28, v30, v31, v32);
        if (v24) {
          uint64_t v33 = (void *)(v24 + 8);
        }
        else {
          uint64_t v33 = 0;
        }
        objc_storeWeak((id *)(v21 + 488), v33);
      }
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v37);
    }
    while (v37 != a5 || (unsigned __int16)v38 != 0xFFFF || WORD1(v38) != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

uint64_t re::ecs2::RigSystem::update(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v44[0] = a2;
  v44[1] = a3;
  re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v43);
  WeakRetained = (id *)(*(uint64_t (**)(void))(**(void **)(a1 + 40) + 120))(*(void *)(a1 + 40));
  if (v5)
  {
    uint64_t v6 = WeakRetained;
    unint64_t v7 = 0;
    uint64_t v8 = 8 * v5;
    do
    {
      WeakRetained = (id *)objc_loadWeakRetained(v6);
      if (WeakRetained)
      {
        uint64_t v9 = WeakRetained;
        uint64_t v10 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(WeakRetained + 24), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RigComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
        if (v10) {
          uint64_t v11 = *(void *)(v10 + 24);
        }
        else {
          uint64_t v11 = 0;
        }
        v7 += v11;
      }
      ++v6;
      v8 -= 8;
    }
    while (v8);
  }
  else
  {
    unint64_t v7 = 0;
  }
  isStatisticCollectionEnabled = (re *)re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)WeakRetained);
  if (isStatisticCollectionEnabled)
  {
    uint64_t v13 = re::profilerThreadContext(isStatisticCollectionEnabled);
    uint64_t v14 = *(int64x2_t **)(v13 + 152);
    if (v14)
    {
      unint64_t v15 = v14[440].u64[0];
      if (v15 >= v7) {
        unint64_t v15 = v7;
      }
      v14[440].i64[0] = v15;
      unint64_t v16 = v14[440].u64[1];
      if (v16 <= v7) {
        unint64_t v16 = v7;
      }
      v14[440].i64[1] = v16;
      int64x2_t v17 = vdupq_n_s64(1uLL);
      v17.i64[0] = v7;
      v14[441] = vaddq_s64(v14[441], v17);
      *(unsigned char *)(v13 + 184) = 0;
    }
  }
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v42, 3037, a1);
  unint64_t v18 = (_anonymous_namespace_ *)re::DynamicOverflowArray<unsigned long long,2ul>::DynamicOverflowArray((uint64_t)&v50, (uint64_t *)(a1 + 272));
  v53[2] = *(void *)(a1 + 312);
  int v46 = 1;
  uint64_t v47 = 0;
  uint64_t v48 = 0;
  v45[1] = 0;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v45, 0);
  v46 += 2;
  unint64_t v19 = *(void *)(a1 + 312);
  if ((v19 & 0x3F) != 0) {
    unint64_t v20 = (v19 >> 6) + 1;
  }
  else {
    unint64_t v20 = v19 >> 6;
  }
  uint64_t v49 = *(void *)(a1 + 312);
  uint64_t v54 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((_anonymous_namespace_ *)v45, v20, &v54);
  int v21 = *(_DWORD *)(a1 + 288);
  if (v21) {
    uint64_t v22 = (void *)(a1 + 296);
  }
  else {
    uint64_t v22 = *(void **)(a1 + 304);
  }
  uint64_t v23 = *(void *)(a1 + 280);
  uint64_t v24 = (uint64_t *)(a1 + 296);
  while (1)
  {
    uint64_t v25 = a1 + 296;
    if ((v21 & 1) == 0) {
      uint64_t v25 = *(void *)(a1 + 304);
    }
    if (v22 == (void *)(v25 + 8 * v23)) {
      break;
    }
    *v22++ = 0;
    int v21 = *(_DWORD *)(a1 + 288);
  }
  int v26 = v53;
  if ((v52 & 1) == 0) {
    int v26 = (unint64_t *)v53[1];
  }
  uint64_t v27 = v51;
  if ((v51 & 0x3FFFFFFFFFFFFFFLL) != 0)
  {
    uint64_t v28 = 0;
    while (1)
    {
      unint64_t v30 = *v26++;
      unint64_t v29 = v30;
      if (v30) {
        break;
      }
      v28 -= 64;
      if (!--v27) {
        goto LABEL_42;
      }
    }
    unint64_t v31 = __clz(__rbit64(v29));
    if (v31 + 1 != v28)
    {
      unint64_t FirstBitSet = v31 - v28;
      do
      {
        uint64_t v33 = (void *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1 + 104, FirstBitSet);
        if (re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::update(v33, (uint64_t)v44)) {
          re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v45, FirstBitSet);
        }
        else {
          re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)v45, FirstBitSet);
        }
        unint64_t FirstBitSet = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet((uint64_t)&v50, FirstBitSet + 1);
      }
      while (FirstBitSet != -1);
    }
  }
LABEL_42:
  re::DynamicBitset<unsigned long long,64ul>::orWithBitSet(a1 + 272, (uint64_t)v45);
  if (*(unsigned char *)(a1 + 336))
  {
    unint64_t v34 = *(void *)(a1 + 280);
    int v35 = *(_DWORD *)(a1 + 288);
    if (v34 >= 0xB)
    {
      if ((v35 & 1) == 0) {
        uint64_t v24 = *(uint64_t **)(a1 + 304);
      }
      uint64_t v36 = 8 * v34;
      while (!*v24)
      {
        ++v24;
        v36 -= 8;
        if (!v36) {
          goto LABEL_58;
        }
      }
      goto LABEL_56;
    }
    if ((v35 & 1) == 0) {
      uint64_t v24 = *(uint64_t **)(a1 + 304);
    }
    if (v34)
    {
      uint64_t v37 = 0;
      uint64_t v38 = 8 * v34;
      do
      {
        uint64_t v39 = *v24++;
        v37 |= v39;
        v38 -= 8;
      }
      while (v38);
      if (v37)
      {
LABEL_56:
        uint64_t v40 = *(re::ecs2::System **)(a1 + 320);
        if (!*((unsigned char *)v40 + 86)) {
          re::ecs2::System::queueToRun(v40, 0.0);
        }
      }
    }
  }
LABEL_58:
  if (v45[0] && (v46 & 1) == 0) {
    (*(void (**)(void))(*(void *)v45[0] + 40))();
  }
  if (v50 && (v52 & 1) == 0) {
    (*(void (**)(void))(*(void *)v50 + 40))();
  }
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v42);
  return re::ProfilerTimeGuard<(re::ProfilerStatistic)125>::end((uint64_t)v43);
}

uint64_t re::ecs2::RigSystem::update(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v29[0] = a3;
  v29[1] = a4;
  uint64_t v6 = re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v28);
  isStatisticCollectionEnabled = (re *)re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v6);
  if (isStatisticCollectionEnabled)
  {
    uint64_t v8 = re::profilerThreadContext(isStatisticCollectionEnabled);
    uint64_t v9 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RigComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    unint64_t v10 = v9 ? *(void *)(v9 + 24) : 0;
    uint64_t v11 = *(int64x2_t **)(v8 + 152);
    if (v11)
    {
      unint64_t v12 = v11[440].u64[0];
      if (v12 >= v10) {
        unint64_t v12 = v10;
      }
      v11[440].i64[0] = v12;
      unint64_t v13 = v11[440].u64[1];
      if (v13 <= v10) {
        unint64_t v13 = v10;
      }
      v11[440].i64[1] = v13;
      int64x2_t v14 = vdupq_n_s64(1uLL);
      v14.i64[0] = v10;
      v11[441] = vaddq_s64(v11[441], v14);
      *(unsigned char *)(v8 + 184) = 0;
    }
  }
  re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RigComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v27, 3037, a1);
  uint64_t v30 = a2;
  unint64_t v15 = *(void *)(*(void *)(a1 + 168)
                  + 16
                  * re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(a1 + 160), &v30)+ 8);
  re::DynamicBitset<unsigned long long,64ul>::clearBit(a1 + 272, v15);
  unint64_t v16 = (void *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1 + 104, v15);
  if (re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::update(v16, (uint64_t)v29)) {
    re::DynamicBitset<unsigned long long,256ul>::setBit(a1 + 272, v15);
  }
  if (*(unsigned char *)(a1 + 336))
  {
    unint64_t v17 = *(void *)(a1 + 280);
    int v18 = *(_DWORD *)(a1 + 288);
    if (v17 >= 0xB)
    {
      if (v18) {
        unint64_t v19 = (void *)(a1 + 296);
      }
      else {
        unint64_t v19 = *(void **)(a1 + 304);
      }
      uint64_t v21 = 8 * v17;
      while (!*v19)
      {
        ++v19;
        v21 -= 8;
        if (!v21) {
          goto LABEL_31;
        }
      }
LABEL_29:
      uint64_t v25 = *(re::ecs2::System **)(a1 + 320);
      if (!*((unsigned char *)v25 + 86)) {
        re::ecs2::System::queueToRun(v25, 0.0);
      }
      goto LABEL_31;
    }
    if (v18)
    {
      unint64_t v20 = (uint64_t *)(a1 + 296);
      if (!v17) {
        goto LABEL_31;
      }
    }
    else
    {
      unint64_t v20 = *(uint64_t **)(a1 + 304);
      if (!v17) {
        goto LABEL_31;
      }
    }
    uint64_t v22 = 0;
    uint64_t v23 = 8 * v17;
    do
    {
      uint64_t v24 = *v20++;
      v22 |= v24;
      v23 -= 8;
    }
    while (v23);
    if (v22) {
      goto LABEL_29;
    }
  }
LABEL_31:
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v27);
  return re::ProfilerTimeGuard<(re::ProfilerStatistic)125>::end((uint64_t)v28);
}

void re::ecs2::RigSystem::willAddSceneToECSService(re::ecs2::RigSystem *this, re::ecs2::Scene *a2)
{
  uint64_t v67 = *MEMORY[0x263EF8340];
  uint64_t v4 = (char *)this + 104;
  v57[0] = (uint64_t)a2;
  uint64_t v5 = (re::ecs2::RigSystem *)((char *)this + 224);
  unint64_t v6 = *((void *)this + 29);
  int v7 = *((_DWORD *)this + 60);
  if (v6 >= 0xB)
  {
    if (v7) {
      uint64_t v8 = (void *)((char *)this + 248);
    }
    else {
      uint64_t v8 = (void *)*((void *)this + 32);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_17;
      }
    }
    goto LABEL_16;
  }
  if (v7)
  {
    uint64_t v9 = (uint64_t *)((char *)this + 248);
    if (!v6) {
      goto LABEL_17;
    }
  }
  else
  {
    uint64_t v9 = (uint64_t *)*((void *)this + 32);
    if (!v6) {
      goto LABEL_17;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
  {
LABEL_16:
    *(void *)&long long v49 = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet((uint64_t)this + 224, 0);
    uint64_t v14 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)v4, v49);
    re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::init(v14, (uint64_t)v4, (uint64_t)a2);
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((re::ecs2::RigSystem *)((char *)this + 160), v57, (uint64_t *)&v49);
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)v5, v49);
    unint64_t v15 = (char *)this + 272;
    unint64_t v16 = v49;
    goto LABEL_49;
  }
LABEL_17:
  long long v56 = 0u;
  long long v49 = 0u;
  *(void *)&long long v50 = 0;
  *((void *)&v50 + 1) = -1;
  long long v51 = 0u;
  long long v52 = 0u;
  uint64_t v53 = 0;
  uint64_t v54 = 1;
  long long v55 = 0uLL;
  unint64_t v17 = *((void *)this + 18);
  *(void *)&long long v56 = 0;
  unint64_t v18 = *((void *)this + 14);
  DWORD2(v56) = 0;
  if (v17 + 1 > 4 * v18)
  {
    re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>,4ul>::setBucketsCapacity((uint64_t *)this + 13, (v17 + 4) >> 2);
    unint64_t v18 = *((void *)this + 14);
  }
  if (v18 <= v17 >> 2)
  {
    v57[1] = 0;
    memset(v66, 0, sizeof(v66));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v58 = 136315906;
    float32x4_t v59 = "operator[]";
    __int16 v60 = 1024;
    int v61 = 858;
    __int16 v62 = 2048;
    unint64_t v63 = v17 >> 2;
    __int16 v64 = 2048;
    unint64_t v65 = v18;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_69;
  }
  if (*((unsigned char *)this + 120)) {
    unint64_t v19 = (char *)this + 128;
  }
  else {
    unint64_t v19 = (char *)*((void *)this + 17);
  }
  uint64_t v20 = *(void *)&v19[8 * (v17 >> 2)];
  ++*((void *)this + 18);
  ++*((_DWORD *)this + 38);
  uint64_t v21 = v20 + 112 * (v17 & 3);
  long long v22 = v49;
  long long v23 = v50;
  long long v24 = v51;
  *(void *)(v21 + 48) = v52;
  *(_OWORD *)(v21 + 16) = v23;
  *(_OWORD *)(v21 + 32) = v24;
  *(_OWORD *)uint64_t v21 = v22;
  re::BucketArray<RESubscriptionHandle,8ul>::BucketArray(v21 + 56, (uint64_t)&v52 + 8);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStateSceneData(&v49);
  uint64_t v26 = *((void *)this + 18);
  if (!v26)
  {
LABEL_69:
    re::internal::assertLog((re::internal *)4, v25, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
  }
  uint64_t v27 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)v4, v26 - 1);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::init(v27, (uint64_t)v4, v57[0]);
  *(void *)&v66[0] = *((void *)this + 18) - 1;
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((re::ecs2::RigSystem *)((char *)this + 160), v57, (uint64_t *)v66);
  unint64_t v28 = *((void *)this + 18);
  unint64_t v29 = *((void *)this + 33);
  if ((v28 & 0x3F) != 0) {
    unint64_t v30 = (v28 >> 6) + 1;
  }
  else {
    unint64_t v30 = v28 >> 6;
  }
  *((void *)this + 33) = v28;
  *(void *)&long long v49 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize(v5, v30, &v49);
  if (v28 && v29 > v28)
  {
    uint64_t v31 = 63;
    uint64_t v32 = *((void *)this + 33) & 0x3FLL;
    if (v32 && v32 != 63) {
      uint64_t v31 = ~(-1 << v32);
    }
    if (*((unsigned char *)this + 240)) {
      uint64_t v33 = (char *)this + 248;
    }
    else {
      uint64_t v33 = (char *)*((void *)this + 32);
    }
    *(void *)&v33[8 * *((void *)this + 29) - 8] &= v31;
  }
  unint64_t v34 = *((void *)this + 18);
  unint64_t v35 = *((void *)this + 39);
  if ((v34 & 0x3F) != 0) {
    unint64_t v36 = (v34 >> 6) + 1;
  }
  else {
    unint64_t v36 = v34 >> 6;
  }
  *((void *)this + 39) = v34;
  *(void *)&long long v49 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((re::ecs2::RigSystem *)((char *)this + 272), v36, &v49);
  if (v34 && v35 > v34)
  {
    uint64_t v37 = 63;
    uint64_t v38 = *((void *)this + 39) & 0x3FLL;
    if (v38 && v38 != 63) {
      uint64_t v37 = ~(-1 << v38);
    }
    if (*((unsigned char *)this + 288)) {
      uint64_t v39 = (char *)this + 296;
    }
    else {
      uint64_t v39 = (char *)*((void *)this + 38);
    }
    *(void *)&v39[8 * *((void *)this + 35) - 8] &= v37;
  }
  unint64_t v16 = *(void *)&v66[0];
  unint64_t v15 = (char *)this + 272;
LABEL_49:
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v15, v16);
  if (!*((unsigned char *)this + 336)) {
    return;
  }
  unint64_t v40 = *((void *)this + 35);
  int v41 = *((_DWORD *)this + 72);
  if (v40 >= 0xB)
  {
    if (v41) {
      uint64_t v42 = (void *)((char *)this + 296);
    }
    else {
      uint64_t v42 = (void *)*((void *)this + 38);
    }
    uint64_t v44 = 8 * v40;
    while (!*v42)
    {
      ++v42;
      v44 -= 8;
      if (!v44) {
        return;
      }
    }
LABEL_65:
    uint64_t v48 = (re::ecs2::System *)*((void *)this + 40);
    if (!*((unsigned char *)v48 + 86)) {
      re::ecs2::System::queueToRun(v48, 0.0);
    }
    return;
  }
  if (v41)
  {
    v43 = (uint64_t *)((char *)this + 296);
    if (!v40) {
      return;
    }
  }
  else
  {
    v43 = (uint64_t *)*((void *)this + 38);
    if (!v40) {
      return;
    }
  }
  uint64_t v45 = 0;
  uint64_t v46 = 8 * v40;
  do
  {
    uint64_t v47 = *v43++;
    v45 |= v47;
    v46 -= 8;
  }
  while (v46);
  if (v45) {
    goto LABEL_65;
  }
}

uint64_t re::ecs2::RigSystem::willRemoveSceneFromECSService(re::ecs2::RigSystem *this, re::ecs2::Scene *a2)
{
  unint64_t v16 = a2;
  uint64_t v3 = (uint64_t *)((char *)this + 160);
  uint64_t result = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)this + 20, &v16);
  if (result != -1)
  {
    uint64_t v5 = *((void *)this + 21) + 16 * result;
    re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)this + 224, *(void *)(v5 + 8));
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)this + 272, *(void *)(v5 + 8));
    unint64_t v6 = (void *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)this + 104, *(void *)(v5 + 8));
    if (*v6)
    {
      int v7 = v6;
      *unint64_t v6 = 0;
      uint64_t v8 = v6 + 1;
      uint64_t v9 = *(void *)(v6[1] + 288);
      if (v9)
      {
        uint64_t v10 = v6[12];
        if (v10)
        {
          for (unint64_t i = 0; i != v10; ++i)
          {
            uint64_t v12 = re::BucketArray<RESubscriptionHandle,8ul>::operator[]((uint64_t)(v7 + 7), i);
            re::EventBus::unsubscribe(v9, *(void *)v12, *(void *)(v12 + 8));
          }
        }
      }
      re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)(v7 + 7));
      uint64_t v13 = 0;
      uint64_t v14 = v7 + 3;
      do
      {
        unint64_t v15 = (re::ecs2::ComponentBucketsBase *)v7[2];
        if (*(void *)v15) {
          re::ecs2::ComponentBucketsBase::removeBucket(v15, v14[v13]);
        }
        v14[v13++] = -1;
      }
      while (v13 != 4);
      *uint64_t v8 = 0;
      v8[1] = 0;
    }
    return re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::remove(v3, &v16);
  }
  return result;
}

void *re::ecs2::allocInfo_RigComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_180, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_180))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF83FC8, "RigComponent");
    __cxa_guard_release(&_MergedGlobals_180);
  }
  return &unk_26AF83FC8;
}

void re::ecs2::initInfo_RigComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v13[0] = 0x3C4B66CFEC8413DALL;
  v13[1] = "RigComponent";
  re::StringID::destroyString((re::StringID *)v13);
  *((_OWORD *)this + 2) = v14;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF83FA8, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF83FA8);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF83FB8 = v7;
      uint64_t v8 = re::introspectionAllocator((re *)v7);
      uint64_t v10 = re::introspect_AssetHandle((re *)1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + 8) = "rigAssetHandle";
      *(void *)(v11 + 16) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x2000000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + 48) = 0;
      *(void *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF83FC0 = v11;
      __cxa_guard_release(&qword_26AF83FA8);
    }
  }
  *((void *)this + 2) = 0x1F000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((void *)this + 8) = &qword_26AF83FB8;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::RigComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::RigComponent>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::RigComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::RigComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v12 = v14;
}

ArcSharedObject *re::internal::defaultConstruct<re::ecs2::RigComponent>(uint64_t a1, uint64_t a2, ArcSharedObject *a3)
{
  return re::make::shared::unsafelyInplace<re::ecs2::RigComponent>(a3);
}

void re::internal::defaultDestruct<re::ecs2::RigComponent>(int a1, int a2, re::ecs2::RigComponent *this)
{
}

uint64_t re::ecs2::introspect_RigComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RigComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_RigComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_RigComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::RigComponent>, this);
}

void *re::ecs2::allocInfo_RigSystem(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF83FB0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF83FB0))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF84040, "RigSystem");
    __cxa_guard_release(&qword_26AF83FB0);
  }
  return &unk_26AF84040;
}

void re::ecs2::initInfo_RigSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v5[0] = 0x84A3ECD4567ELL;
  v5[1] = "RigSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0x18000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 8) = &re::ecs2::initInfo_RigSystem(re::IntrospectionBase *)::structureAttributes;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::RigSystem>;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::RigSystem>;
  *((void *)this + 11) = re::internal::defaultRetain<re::ecs2::RigSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 12) = re::internal::defaultRelease<re::ecs2::RigSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::RigSystem>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::RigSystem>;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

re::ecs2::RigSystem *re::internal::defaultConstruct<re::ecs2::RigSystem>(uint64_t a1, uint64_t a2, re::ecs2::RigSystem *a3)
{
  return re::ecs2::RigSystem::RigSystem(a3);
}

void *re::internal::defaultDestruct<re::ecs2::RigSystem>(uint64_t a1, uint64_t a2, void *a3)
{
  a3[43] = &unk_26E6F8250;
  re::FixedArray<CoreIKTransform>::deinit(a3 + 45);
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a3 + 13);
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultDestructV2<re::ecs2::RigSystem>(void *a1)
{
  a1[43] = &unk_26E6F8250;
  re::FixedArray<CoreIKTransform>::deinit(a1 + 45);
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 13);
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_RigSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RigSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_RigSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_RigSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::RigSystem>, this);
}

uint64_t re::ecs2::RigComponentStateImpl::dependsOnComponents(re::ecs2::RigComponentStateImpl *this)
{
  return *((void *)this + 4);
}

unint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::RigComponent>::didDependentComponentChange(uint64_t a1, re::ecs2::ComponentBucketsBase **a2, uint64_t a3)
{
  unint64_t result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a3 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RigComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (result)
  {
    uint64_t v5 = (re::ecs2::Component *)result;
    uint64_t v6 = 3;
    unint64_t v7 = 0xFFFFFFFFLL;
    do
    {
      unint64_t v8 = re::ecs2::ComponentBucketsBase::componentHandle(a2[2], (unint64_t)a2[v6], v5);
      if (v8 != -1 && (v9 & 0xFFFFFF00000000) != 0)
      {
        unint64_t v11 = v8;
        unint64_t v7 = v9;
        goto LABEL_11;
      }
      ++v6;
    }
    while (v6 != 7);
    unint64_t v11 = -1;
LABEL_11:
    return re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::setComponentState(a2, v11, v7, 0);
  }
  return result;
}

void re::ecs2::RigSystem::~RigSystem(re::ecs2::RigSystem *this)
{
  *((void *)this + 43) = &unk_26E6F8250;
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 45);
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 13);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  *((void *)this + 43) = &unk_26E6F8250;
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 45);
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 13);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::RigSystem::typeInfo(re::ecs2::RigSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RigSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_RigSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_RigSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::RigSystem>, 0);
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::update(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*a1 + 224);
  unint64_t v5 = a1[3];
  unint64_t v6 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](a1[2] + 8, v5);
  if (*(_DWORD *)(v6 + 40)) {
    uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, void *, unint64_t, unint64_t, void))(*(void *)v4 + 24))(v4, a2, a1, v5, v6, 0);
  }
  else {
    uint64_t v7 = 0;
  }
  unint64_t v8 = a1[5];
  unint64_t v9 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](a1[2] + 8, v8);
  if (*(_DWORD *)(v9 + 40)) {
    uint64_t v7 = v7 | (*(unsigned int (**)(uint64_t, uint64_t, void *, unint64_t, unint64_t, void))(*(void *)v4 + 32))(v4, a2, a1, v8, v9, 0);
  }
  unint64_t v10 = a1[6];
  unint64_t v11 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](a1[2] + 8, v10);
  if (*(_DWORD *)(v11 + 40)) {
    return v7 | (*(unsigned int (**)(uint64_t, uint64_t, void *, unint64_t, unint64_t, void))(*(void *)v4 + 40))(v4, a2, a1, v10, v11, 0);
  }
  return v7;
}

uint64_t re::DynamicBitset<unsigned long long,64ul>::orWithBitSet(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 40);
  if (v4 > *(void *)(a1 + 40))
  {
    if ((v4 & 0x3F) != 0) {
      unint64_t v5 = (v4 >> 6) + 1;
    }
    else {
      unint64_t v5 = v4 >> 6;
    }
    *(void *)(a1 + 40) = v4;
    uint64_t v11 = 0;
    re::DynamicOverflowArray<unsigned long long,2ul>::resize((_anonymous_namespace_ *)a1, v5, &v11);
  }
  unint64_t v6 = *(void *)(a2 + 8);
  if (v6 >= *(void *)(a1 + 8)) {
    unint64_t v6 = *(void *)(a1 + 8);
  }
  if (v6)
  {
    for (uint64_t i = 0; i != v6; ++i)
    {
      uint64_t v8 = *(void *)(a2 + 32);
      if (*(unsigned char *)(a2 + 16)) {
        uint64_t v8 = a2 + 24;
      }
      uint64_t v9 = a1 + 24;
      if ((*(unsigned char *)(a1 + 16) & 1) == 0) {
        uint64_t v9 = *(void *)(a1 + 32);
      }
      *(void *)(v9 + 8 * i) |= *(void *)(v8 + 8 * i);
    }
  }
  return a1;
}

uint64_t re::DynamicOverflowArray<unsigned long long,2ul>::DynamicOverflowArray(uint64_t a1, uint64_t *a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 1;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  uint64_t v3 = *a2;
  if (*a2)
  {
    unint64_t v5 = a2[1];
    *(void *)a1 = v3;
    re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)a1, v5);
    *(_DWORD *)(a1 + 16) += 2;
    re::DynamicOverflowArray<unsigned long long,2ul>::copy(a1, (uint64_t)a2);
  }
  return a1;
}

void *re::DynamicOverflowArray<unsigned long long,2ul>::copy(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 8);
  if (v4 >= *(void *)(a1 + 8))
  {
    re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)a1, *(void *)(a2 + 8));
    if (*(unsigned char *)(a2 + 16)) {
      uint64_t v7 = (const void *)(a2 + 24);
    }
    else {
      uint64_t v7 = *(const void **)(a2 + 32);
    }
    uint64_t v8 = *(void *)(a1 + 8);
    int v9 = *(_DWORD *)(a1 + 16);
    if (v9)
    {
      unint64_t v10 = (void *)(a1 + 24);
      if (!v8)
      {
LABEL_18:
        if (v9) {
          uint64_t v11 = a1 + 24;
        }
        else {
          uint64_t v11 = *(void *)(a1 + 32);
        }
        uint64_t v12 = *(void *)(a1 + 8);
        uint64_t v13 = (void *)(v11 + 8 * v12);
        if (*(_DWORD *)(a2 + 16)) {
          uint64_t v14 = a2 + 24;
        }
        else {
          uint64_t v14 = *(void *)(a2 + 32);
        }
        unint64_t result = memcpy(v13, (const void *)(v14 + 8 * v12), 8 * v4 - 8 * v12);
        goto LABEL_25;
      }
    }
    else
    {
      unint64_t v10 = *(void **)(a1 + 32);
      if (!v8) {
        goto LABEL_18;
      }
    }
    memmove(v10, v7, 8 * v8);
    int v9 = *(_DWORD *)(a1 + 16);
    goto LABEL_18;
  }
  if (*(unsigned char *)(a2 + 16)) {
    unint64_t v5 = (const void *)(a2 + 24);
  }
  else {
    unint64_t v5 = *(const void **)(a2 + 32);
  }
  if ((*(unsigned char *)(a1 + 16) & 1) == 0)
  {
    unint64_t result = *(void **)(a1 + 32);
    if (!v4) {
      goto LABEL_25;
    }
    goto LABEL_15;
  }
  unint64_t result = (void *)(a1 + 24);
  if (v4) {
LABEL_15:
  }
    unint64_t result = memmove(result, v5, 8 * v4);
LABEL_25:
  *(void *)(a1 + 8) = v4;
  return result;
}

uint64_t *re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v84 = *MEMORY[0x263EF8340];
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a3 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RigComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)+ 480;
  for (uint64_t i = 24; i != 56; i += 8)
  {
    uint64_t v7 = (_anonymous_namespace_ *)re::ecs2::ComponentBucketsBase::addBucket(*(re::ecs2::ComponentBucketsBase **)(a1 + 16));
    *(void *)(a1 + i) = v7;
  }
  int v9 = *(re::EventBus **)(a3 + 288);
  if (v9)
  {
    uint64_t v82 = re::globalAllocators((re *)result)[2];
    unint64_t v10 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v82 + 32))(v82, 32, 0);
    *unint64_t v10 = &unk_26E6F8340;
    v10[1] = a1;
    v10[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::componentChangedHandler<REComponentDidChangeEvent>;
    v10[3] = 0;
    float32x2_t v83 = v10;
    uint64_t v11 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v81, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::RigComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    uint64_t v13 = v12;
    uint64_t v14 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *uint64_t v14 = v11;
    v14[1] = v13;
    unint64_t v15 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v81);
    uint64_t v79 = re::globalAllocators(v15)[2];
    unint64_t v16 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v79 + 32))(v79, 32, 0);
    *unint64_t v16 = &unk_26E6F8398;
    v16[1] = a1;
    v16[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::componentChangedHandler<REComponentDidActivateEvent>;
    v16[3] = 0;
    float32x4_t v80 = v16;
    uint64_t v17 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v78, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::RigComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    uint64_t v19 = v18;
    uint64_t v20 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *uint64_t v20 = v17;
    v20[1] = v19;
    uint64_t v21 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v78);
    uint64_t v76 = re::globalAllocators(v21)[2];
    long long v22 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v76 + 32))(v76, 32, 0);
    *long long v22 = &unk_26E6F83F0;
    v22[1] = a1;
    v22[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::componentChangedHandler<REComponentWillDeactivateEvent>;
    v22[3] = 0;
    float32x2_t v77 = v22;
    uint64_t v23 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v75, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::RigComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    uint64_t v25 = v24;
    uint64_t v26 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *uint64_t v26 = v23;
    v26[1] = v25;
    uint64_t v27 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v75);
    uint64_t v73 = re::globalAllocators(v27)[2];
    unint64_t v28 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v73 + 32))(v73, 32, 0);
    *unint64_t v28 = &unk_26E6F8448;
    v28[1] = a1;
    uint64_t v28[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::componentChangedHandler<REComponentDidAddEvent>;
    v28[3] = 0;
    float32x4_t v74 = v28;
    uint64_t v29 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v72, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::RigComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    uint64_t v31 = v30;
    uint64_t v32 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    void *v32 = v29;
    v32[1] = v31;
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v72);
    unint64_t result = (uint64_t *)(***(uint64_t (****)(void))(a2 + 224))();
    if (v33)
    {
      unint64_t v34 = result;
      uint64_t v35 = 8 * v33;
      do
      {
        uint64_t v36 = *v34++;
        uint64_t v70 = re::globalAllocators((re *)result)[2];
        int32x4_t v71 = 0;
        uint64_t v37 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v70 + 32))(v70, 32, 0);
        *uint64_t v37 = &unk_26E6F8340;
        v37[1] = a1;
        v37[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>;
        v37[3] = 0;
        int32x4_t v71 = v37;
        uint64_t v38 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v69, v36, 0);
        uint64_t v40 = v39;
        int v41 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *int v41 = v38;
        v41[1] = v40;
        uint64_t v42 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v69);
        uint64_t v67 = re::globalAllocators(v42)[2];
        float32x2_t v68 = 0;
        v43 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v67 + 32))(v67, 32, 0);
        void *v43 = &unk_26E6F8398;
        v43[1] = a1;
        uint64_t v43[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>;
        v43[3] = 0;
        float32x2_t v68 = v43;
        uint64_t v44 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v66, v36, 0);
        uint64_t v46 = v45;
        uint64_t v47 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *uint64_t v47 = v44;
        v47[1] = v46;
        uint64_t v48 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v66);
        uint64_t v64 = re::globalAllocators(v48)[2];
        unint64_t v65 = 0;
        long long v49 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v64 + 32))(v64, 32, 0);
        *long long v49 = &unk_26E6F83F0;
        v49[1] = a1;
        v49[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>;
        v49[3] = 0;
        unint64_t v65 = v49;
        uint64_t v50 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v63, v36, 0);
        uint64_t v52 = v51;
        uint64_t v53 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *uint64_t v53 = v50;
        v53[1] = v52;
        uint64_t v54 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v63);
        uint64_t v61 = re::globalAllocators(v54)[2];
        __int16 v62 = 0;
        long long v55 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v61 + 32))(v61, 32, 0);
        *long long v55 = &unk_26E6F8448;
        v55[1] = a1;
        v55[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>;
        v55[3] = 0;
        __int16 v62 = v55;
        uint64_t v56 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v60, v36, 0);
        uint64_t v58 = v57;
        float32x4_t v59 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *float32x4_t v59 = v56;
        v59[1] = v58;
        unint64_t result = (uint64_t *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v60);
        v35 -= 8;
      }
      while (v35);
    }
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::componentChangedHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v4 + 7, &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(void *)(*((void *)v4 + 8) + 16 * v5 + 8));
  if (!*((unsigned char *)v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *((void *)v4 + 22);
  int v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if (v7) {
      uint64_t v8 = (void *)((char *)v4 + 192);
    }
    else {
      uint64_t v8 = (void *)*((void *)v4 + 25);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v14 = (re::ecs2::System *)*((void *)v4 + 27);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    int v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    int v9 = (uint64_t *)*((void *)v4 + 25);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RigComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    unint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::componentChangedHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v4 + 7, &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(void *)(*((void *)v4 + 8) + 16 * v5 + 8));
  if (!*((unsigned char *)v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *((void *)v4 + 22);
  int v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if (v7) {
      uint64_t v8 = (void *)((char *)v4 + 192);
    }
    else {
      uint64_t v8 = (void *)*((void *)v4 + 25);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v14 = (re::ecs2::System *)*((void *)v4 + 27);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    int v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    int v9 = (uint64_t *)*((void *)v4 + 25);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RigComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    unint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::componentChangedHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v4 + 7, &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(void *)(*((void *)v4 + 8) + 16 * v5 + 8));
  if (!*((unsigned char *)v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *((void *)v4 + 22);
  int v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if (v7) {
      uint64_t v8 = (void *)((char *)v4 + 192);
    }
    else {
      uint64_t v8 = (void *)*((void *)v4 + 25);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v14 = (re::ecs2::System *)*((void *)v4 + 27);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    int v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    int v9 = (uint64_t *)*((void *)v4 + 25);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RigComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    unint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::componentChangedHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v4 + 7, &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(void *)(*((void *)v4 + 8) + 16 * v5 + 8));
  if (!*((unsigned char *)v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *((void *)v4 + 22);
  int v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if (v7) {
      uint64_t v8 = (void *)((char *)v4 + 192);
    }
    else {
      uint64_t v8 = (void *)*((void *)v4 + 25);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v14 = (re::ecs2::System *)*((void *)v4 + 27);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    int v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    int v9 = (uint64_t *)*((void *)v4 + 25);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RigComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    unint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6F8340;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6F8340;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6F8398;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6F8398;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6F83F0;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6F83F0;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6F8448;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6F8448;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

uint64_t *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>,4ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  uint64_t v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        unint64_t v4 = v3[1];
        if (v4 <= a2) {
          break;
        }
        unint64_t result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)*v3 + 32))(*v3, 448, 0);
        unint64_t result = (uint64_t *)re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::add((uint64_t)v3, &v5);
        unint64_t v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

uint64_t re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  *(void *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(void *)(a1 + 40) = 0;
  uint64_t result = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>,4ul>::setBucketsCapacity(a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

ArcSharedObject *re::make::shared::unsafelyInplace<re::ecs2::RigComponent>(ArcSharedObject *a1)
{
  *((_OWORD *)a1 + 29) = 0u;
  *((_OWORD *)a1 + 30) = 0u;
  *((_OWORD *)a1 + 27) = 0u;
  *((_OWORD *)a1 + 28) = 0u;
  *((_OWORD *)a1 + 25) = 0u;
  *((_OWORD *)a1 + 26) = 0u;
  *((_OWORD *)a1 + 23) = 0u;
  *((_OWORD *)a1 + 24) = 0u;
  *((_OWORD *)a1 + 21) = 0u;
  *((_OWORD *)a1 + 22) = 0u;
  *((_OWORD *)a1 + 19) = 0u;
  *((_OWORD *)a1 + 20) = 0u;
  *((_OWORD *)a1 + 17) = 0u;
  *((_OWORD *)a1 + 18) = 0u;
  *((_OWORD *)a1 + 15) = 0u;
  *((_OWORD *)a1 + 16) = 0u;
  *((_OWORD *)a1 + 13) = 0u;
  *((_OWORD *)a1 + 14) = 0u;
  *((_OWORD *)a1 + 11) = 0u;
  *((_OWORD *)a1 + 12) = 0u;
  *((_OWORD *)a1 + 9) = 0u;
  *((_OWORD *)a1 + 10) = 0u;
  *((_OWORD *)a1 + 7) = 0u;
  *((_OWORD *)a1 + 8) = 0u;
  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 6) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *(_OWORD *)a1 = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(void *)(v2 + 16) = 0;
  *(unsigned char *)(v2 + 24) = 0;
  *(void *)uint64_t v2 = &unk_26E6E0690;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_DWORD *)(v2 + 128) = 0;
  *(_OWORD *)(v2 + 136) = 0u;
  *(_OWORD *)(v2 + 152) = 0u;
  *(_DWORD *)(v2 + 168) = 0;
  *(void *)(v2 + 176) = 0;
  *(void *)(v2 + 184) = 0;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 76) = 0u;
  *(void *)(v2 + 192) = -1;
  *(_OWORD *)(v2 + 248) = 0u;
  *(_OWORD *)(v2 + 232) = 0u;
  *(_OWORD *)(v2 + 216) = 0u;
  *(_OWORD *)(v2 + 200) = 0u;
  *(_OWORD *)(v2 + 264) = 0u;
  *(_OWORD *)(v2 + 280) = 0u;
  *(_DWORD *)(v2 + 296) = 1;
  *(void *)(v2 + 312) = 0;
  *(void *)(v2 + 320) = 0;
  *(_DWORD *)(v2 + 328) = 0;
  *(void *)(v2 + 304) = 0;
  *(_OWORD *)(v2 + 336) = 0u;
  *(_OWORD *)(v2 + 352) = 0u;
  *(_OWORD *)(v2 + 368) = 0u;
  *(_OWORD *)(v2 + 384) = 0u;
  *(_OWORD *)(v2 + 400) = 0u;
  *(_OWORD *)(v2 + 416) = 0u;
  *(_OWORD *)(v2 + 428) = 0u;
  *(void *)(v2 + 444) = 0x7FFFFFFFLL;
  *(void *)(v2 + 464) = 0;
  *(void *)(v2 + 472) = 0;
  *(void *)(v2 + 456) = 0;
  *((unsigned char *)a1 + 480) = 0;
  objc_initWeak((id *)(v2 + 488), 0);
  return a1;
}

re::ecs2::RigSystem *re::ecs2::RigSystem::RigSystem(re::ecs2::RigSystem *this)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  re::ecs2::System::System((uint64_t)this, 1, 1);
  *(void *)uint64_t v2 = &unk_26E6F82B8;
  uint64_t v3 = v2 + 344;
  *(void *)(v2 + 112) = 0;
  *(void *)(v2 + 104) = 0;
  uint64_t v4 = v2 + 104;
  *(_DWORD *)(v2 + 120) = 1;
  *(void *)(v2 + 136) = 0;
  *(void *)(v2 + 144) = 0;
  *(void *)(v2 + 128) = 0;
  *(_DWORD *)(v2 + 152) = 0;
  *(_OWORD *)(v2 + 176) = 0u;
  *(_OWORD *)(v2 + 192) = 0u;
  *(_OWORD *)(v2 + 208) = 0u;
  *(_OWORD *)(v2 + 224) = 0u;
  uint64_t v5 = (void *)(v2 + 224);
  *(_OWORD *)(v2 + 1re::HashTable<re::ecs2::Entity const*,re::ecs2::BillboardData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::deinit((uint64_t *)this + 60) = 0u;
  uint64_t v6 = (void *)(v2 + 160);
  *(_DWORD *)(v2 + 240) = 1;
  uint64_t v7 = (void *)(v2 + 272);
  *(_OWORD *)(v2 + 248) = 0u;
  *(void *)(v2 + 280) = 0;
  *(_OWORD *)(v2 + 264) = 0u;
  *(_DWORD *)(v2 + 288) = 1;
  *(_OWORD *)(v2 + 321) = 0u;
  *(_OWORD *)(v2 + 296) = 0u;
  *(_OWORD *)(v2 + 312) = 0u;
  uint64_t v10 = (_anonymous_namespace_ *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v5, 0);
  *((_DWORD *)this + 60) += 2;
  *((void *)this + 33) = 0;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v7, 0);
  *((_DWORD *)this + 72) += 2;
  *((void *)this + 39) = 0;
  *((void *)this + 40) = this;
  *((void *)this + 41) = v3;
  *((unsigned char *)this + 336) = 1;
  LOWORD(v13) = 257;
  HIDWORD(v13) = 1023969417;
  LOBYTE(v14) = 0;
  re::ecs2::System::setTaskOptions(this, (uint64_t *)&v13);
  *((void *)this + 43) = &unk_26E6F8250;
  *((void *)this + 44) = this;
  *((void *)this + 46) = 0;
  *((void *)this + 47) = 0;
  *((void *)this + 45) = 0;
  uint64_t v13 = re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  uint64_t v14 = re::ecs2::ComponentImpl<re::ecs2::MeshSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  v12[0] = &v13;
  v12[1] = 2;
  re::FixedArray<re::ecs2::ComponentTypeBase const*>::operator=((re::ecs2::RigSystem *)((char *)this + 360), (uint64_t)v12);
  return this;
}

id re::internal::defaultRetain<re::ecs2::RigSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::RigSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
}

void *re::ecs2::introspect_TextAnchor(re::ecs2 *this, const re::IntrospectionBase *a2)
{
  int v2 = (int)this;
  {
    if (v9)
    {
      uint64_t v10 = re::introspectionAllocator(v9);
      uint64_t v11 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v10 + 32))(v10, 24, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *((void *)v11 + 1) = 0;
      *((void *)v11 + 2) = "TopLeft";
      re::ecs2::introspect_TextAnchor(BOOL)::enumAttributes = (uint64_t)v11;
      uint64_t v12 = re::introspectionAllocator(v11);
      uint64_t v13 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 24, 8);
      *(_DWORD *)uint64_t v13 = 1;
      *(void *)(v13 + 8) = 1;
      *(void *)(v13 + 16) = "Center";
      qword_26879F650 = v13;
    }
  }
  {
    uint64_t v14 = re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&re::ecs2::introspect_TextAnchor(BOOL)::info, "TextAnchor", 4, 4, 1, 1);
    *(void *)uint64_t v14 = &unk_26E715E00;
    *((void *)v14 + 8) = &re::ecs2::introspect_TextAnchor(BOOL)::enumTable;
    *((_DWORD *)v14 + 4) = 9;
  }
  if (v2)
  {
    if (re::ecs2::introspect_TextAnchor(BOOL)::isInitialized) {
      return &re::ecs2::introspect_TextAnchor(BOOL)::info;
    }
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v16);
    char v3 = re::ecs2::introspect_TextAnchor(BOOL)::isInitialized;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v16);
    if (v3) {
      return &re::ecs2::introspect_TextAnchor(BOOL)::info;
    }
    uint64_t v5 = re::introspectionSharedMutex(v4);
    std::__shared_mutex_base::lock(v5);
    if (re::ecs2::introspect_TextAnchor(BOOL)::isInitialized)
    {
LABEL_9:
      uint64_t v7 = re::introspectionSharedMutex(v6);
      std::__shared_mutex_base::unlock(v7);
      return &re::ecs2::introspect_TextAnchor(BOOL)::info;
    }
  }
  re::ecs2::introspect_TextAnchor(BOOL)::isInitialized = 1;
  re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&re::ecs2::introspect_TextAnchor(BOOL)::info, a2);
  v15[0] = 0x106ABB8C40F4C4;
  v15[1] = (uint64_t)"TextAnchor";
  xmmword_26879F680 = v16;
  re::StringID::destroyString((re::StringID *)v15);
  if ((v2 & 1) == 0) {
    goto LABEL_9;
  }
  return &re::ecs2::introspect_TextAnchor(BOOL)::info;
}

void re::internal::registerEnumType<re::ecs2::TextAnchor>(re::TypeRegistry *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  v33[0] = 0x607DD0F01DCLL;
  v33[1] = "uint32_t";
  unint64_t v8 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)a1 + 200, v33);
  if (!v8)
  {
    re::StringID::destroyString((re::StringID *)v33);
    goto LABEL_29;
  }
  uint64_t v9 = *v8;
  re::StringID::destroyString((re::StringID *)v33);
  if (!a1)
  {
LABEL_29:
    re::internal::assertLog((re::internal *)5, v11, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, a3[1]);
    _os_crash();
    __break(1u);
    return;
  }
  uint64_t v12 = *(unsigned int **)(a2 + 64);
  v32[0] = a1;
  v32[1] = v9;
  re::TypeBuilder::beginEnumType((uint64_t)v33, a3, 1, 1, (uint64_t)v32);
  unint64_t v13 = *v12;
  if (v13)
  {
    for (unint64_t i = 0; i < v13; ++i)
    {
      uint64_t v15 = *(void *)(*((void *)v12 + 1) + 8 * i);
      if (*(_DWORD *)v15 == 1)
      {
        long long v16 = *(char **)(v15 + 16);
        if (v16)
        {
          uint64_t v17 = *v16;
          if (*v16)
          {
            char v18 = v16[1];
            if (v18)
            {
              unint64_t v19 = (unsigned __int8 *)(v16 + 2);
              do
              {
                uint64_t v17 = 31 * v17 + v18;
                int v20 = *v19++;
                char v18 = v20;
              }
              while (v20);
            }
          }
        }
        else
        {
          uint64_t v17 = 0;
        }
        uint64_t v21 = *(void *)(v15 + 8);
        *(void *)&v31.var0 = 2 * v17;
        v31.var1 = v16;
        re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v33, v21, &v31);
        re::StringID::destroyString((re::StringID *)&v31);
        unint64_t v13 = *v12;
      }
    }
    if (v13)
    {
      for (unint64_t j = 0; j < v13; ++j)
      {
        uint64_t v23 = *(void *)(*((void *)v12 + 1) + 8 * j);
        if (*(_DWORD *)v23 == 2)
        {
          uint64_t v24 = *(char **)(v23 + 16);
          if (v24)
          {
            uint64_t v25 = *v24;
            if (*v24)
            {
              char v26 = v24[1];
              if (v26)
              {
                uint64_t v27 = (unsigned __int8 *)(v24 + 2);
                do
                {
                  uint64_t v25 = 31 * v25 + v26;
                  int v28 = *v27++;
                  char v26 = v28;
                }
                while (v28);
              }
            }
          }
          else
          {
            uint64_t v25 = 0;
          }
          uint64_t v29 = *(void *)(v23 + 8);
          *(void *)&v31.var0 = 2 * v25;
          v31.var1 = v24;
          re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v33, v29, &v31);
          re::StringID::destroyString((re::StringID *)&v31);
          unint64_t v13 = *v12;
        }
      }
    }
  }
  re::TypeBuilder::commitTo((re::TypeBuilder *)v33, a1, a4);
  re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v33, v30);
}

double re::ecs2::downgradeDynamicTextComponentFromFall2023@<D0>(re::ecs2 *this@<X0>, unsigned char *a2@<X8>)
{
  char v6 = *((unsigned char *)this + 112);
  long long v8 = *((_OWORD *)this + 6);
  char v9 = v6;
  re::ColorGamut4F::as((uint64_t)&v8, 0, 3, (uint64_t)&v10);
  double result = *(double *)&v10;
  *((_OWORD *)this + 6) = v10;
  *((unsigned char *)this + 112) = v11;
  *a2 = 1;
  return result;
}

void *re::ecs2::allocInfo_DynamicTextComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF840C0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF840C0))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF84108, "DynamicTextComponent");
    __cxa_guard_release(&qword_26AF840C0);
  }
  return &unk_26AF84108;
}

void re::ecs2::initInfo_DynamicTextComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v29[0] = 0x7EF097E9DE0238E2;
  v29[1] = "DynamicTextComponent";
  re::StringID::destroyString((re::StringID *)v29);
  *((_OWORD *)this + 2) = v30;
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_181, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&_MergedGlobals_181);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF840D0 = v7;
      long long v8 = re::introspectionAllocator((re *)v7);
      uint64_t v9 = re::introspect_Vector4F((re::IntrospectionBase **)1);
      uint64_t v10 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v10 = 1;
      *(void *)(v10 + 8) = "color";
      *(void *)(v10 + 16) = v9;
      *(void *)(v10 + 24) = 0;
      *(void *)(v10 + 32) = 0x6000000001;
      *(_DWORD *)(v10 + 40) = 0;
      *(void *)(v10 + 48) = 0;
      *(void *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_26AF840D8 = v10;
      char v11 = re::introspectionAllocator((re *)v10);
      unint64_t v13 = re::IntrospectionInfo<re::DynamicString>::get(1, v12);
      uint64_t v14 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v11 + 32))(v11, 72, 8);
      *(_DWORD *)uint64_t v14 = 1;
      *(void *)(v14 + 8) = "text";
      *(void *)(v14 + 16) = v13;
      *(void *)(v14 + 24) = 0;
      *(void *)(v14 + 32) = 0x2000000002;
      *(_DWORD *)(v14 + 40) = 0;
      *(void *)(v14 + 48) = 0;
      *(void *)(v14 + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_26AF840E0 = v14;
      uint64_t v15 = re::introspectionAllocator((re *)v14);
      re::ecs2::introspect_TextAnchor((re::ecs2 *)1, v16);
      uint64_t v17 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v15 + 32))(v15, 72, 8);
      *(_DWORD *)uint64_t v17 = 1;
      *(void *)(v17 + 8) = "anchor";
      *(void *)(v17 + 16) = &re::ecs2::introspect_TextAnchor(BOOL)::info;
      *(void *)(v17 + 24) = 0;
      *(void *)(v17 + 32) = 0x4000000003;
      *(_DWORD *)(v17 + 40) = 0;
      *(void *)(v17 + 48) = 0;
      *(void *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_26AF840E8 = v17;
      char v18 = re::introspectionAllocator((re *)v17);
      int v20 = re::introspect_AssetHandle((re *)1, v19);
      uint64_t v21 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v18 + 32))(v18, 72, 8);
      *(_DWORD *)uint64_t v21 = 1;
      *(void *)(v21 + 8) = "fontAssetHandle";
      *(void *)(v21 + 16) = v20;
      *(void *)(v21 + 24) = 0;
      *(void *)(v21 + 32) = 0x4800000004;
      *(_DWORD *)(v21 + 40) = 0;
      *(void *)(v21 + 48) = 0;
      *(void *)(v21 + 56) = 0;
      *(_DWORD *)(v21 + 64) = 0;
      qword_26AF840F0 = v21;
      uint64_t v22 = re::introspectionAllocator((re *)v21);
      uint64_t v24 = re::introspect_ColorGamut((re *)1, v23);
      uint64_t v25 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v22 + 32))(v22, 72, 8);
      *(_DWORD *)uint64_t v25 = 1;
      *(void *)(v25 + 8) = "colorGamut";
      *(void *)(v25 + 16) = v24;
      *(void *)(v25 + 24) = 0;
      *(void *)(v25 + 32) = 0x7000000005;
      *(_DWORD *)(v25 + 40) = 0;
      *(void *)(v25 + 48) = 0;
      *(void *)(v25 + 56) = 0;
      *(_DWORD *)(v25 + 64) = 0;
      qword_26AF840F8 = v25;
      char v26 = re::introspectionAllocator((re *)v25);
      uint64_t v27 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v26 + 32))(v26, 64, 8);
      *(_DWORD *)uint64_t v27 = 6;
      *(void *)(v27 + 8) = 1;
      *(void *)(v27 + 16) = 0;
      *(void *)(v27 + 24) = 0;
      *(void *)(v27 + 32) = 0;
      *(unsigned char *)(v27 + 40) = 1;
      *(void *)(v27 + 48) = re::ecs2::downgradeDynamicTextComponentFromFall2023;
      *(_DWORD *)(v27 + 56) = 2;
      qword_26AF84100 = v27;
      __cxa_guard_release(&_MergedGlobals_181);
    }
  }
  *((void *)this + 2) = 0x8000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 7;
  *((void *)this + 8) = &qword_26AF840D0;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::DynamicTextComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::DynamicTextComponent>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::DynamicTextComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::DynamicTextComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v28 = v30;
}

uint64_t re::internal::defaultConstruct<re::ecs2::DynamicTextComponent>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::make::shared::unsafelyInplace<re::ecs2::DynamicTextComponent>(a3);
}

void *re::internal::defaultDestruct<re::ecs2::DynamicTextComponent>(uint64_t a1, uint64_t a2, void *a3)
{
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 9));
  re::DynamicString::deinit((re::DynamicString *)(a3 + 4));
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultDestructV2<re::ecs2::DynamicTextComponent>(void *a1)
{
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 9));
  re::DynamicString::deinit((re::DynamicString *)(a1 + 4));
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_DynamicTextComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"DynamicTextComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_DynamicTextComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_DynamicTextComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::DynamicTextComponent>, this);
}

void *re::ecs2::allocInfo_DynamicTextSystem(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF840C8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF840C8))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF84180, "DynamicTextSystem");
    __cxa_guard_release(&qword_26AF840C8);
  }
  return &unk_26AF84180;
}

void re::ecs2::initInfo_DynamicTextSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v5[0] = 0x67A59726D7E78E76;
  v5[1] = "DynamicTextSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0xA000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 8) = &re::ecs2::initInfo_DynamicTextSystem(re::IntrospectionBase *)::structureAttributes;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::DynamicTextSystem>;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::DynamicTextSystem>;
  *((void *)this + 11) = re::internal::defaultRetain<re::ecs2::DynamicTextSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 12) = re::internal::defaultRelease<re::ecs2::DynamicTextSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::DynamicTextSystem>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::DynamicTextSystem>;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

double re::internal::defaultConstruct<re::ecs2::DynamicTextSystem>(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  a3[8] = 0u;
  a3[9] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  re::ecs2::System::System((uint64_t)a3, 1, 1);
  *(void *)(v3 + 152) = 0;
  double result = 0.0;
  *(_OWORD *)(v3 + 136) = 0u;
  *(_OWORD *)(v3 + 120) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(void *)uint64_t v3 = &unk_26E6F84A0;
  return result;
}

void *re::internal::defaultDestruct<re::ecs2::DynamicTextSystem>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

double re::internal::defaultConstructV2<re::ecs2::DynamicTextSystem>(_OWORD *a1)
{
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  re::ecs2::System::System((uint64_t)a1, 1, 1);
  *(void *)(v1 + 152) = 0;
  double result = 0.0;
  *(_OWORD *)(v1 + 136) = 0u;
  *(_OWORD *)(v1 + 120) = 0u;
  *(_OWORD *)(v1 + 104) = 0u;
  *(void *)uint64_t v1 = &unk_26E6F84A0;
  return result;
}

void *re::internal::defaultDestructV2<re::ecs2::DynamicTextSystem>(void *a1)
{
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_DynamicTextSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"DynamicTextSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_DynamicTextSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_DynamicTextSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::DynamicTextSystem>, this);
}

uint64_t re::ecs2::DynamicTextComponent::computeObjectSpaceSize(re::ecs2::DynamicTextComponent *this, re::TextManager *a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v3 = *((void *)this + 10);
  if (!v3)
  {
    uint64_t v10 = *re::ecsComponentsLogObjects(this);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      int v12 = 134217984;
      unint64_t v13 = this;
      _os_log_impl(&dword_233120000, v10, OS_LOG_TYPE_DEFAULT, "DynamicTextComponent %p has null font asset.", (uint8_t *)&v12, 0xCu);
    }
    return 0;
  }
  unsigned int v4 = atomic_load((unsigned int *)(v3 + 704));
  if (v4 != 2) {
    return 0;
  }
  re::makeFontID((re::ecs2::DynamicTextComponent *)((char *)this + 72), (re::StringID *)&v12);
  uint64_t v9 = re::TextManager::computeSize((BOOL)a2, (re::ecs2::DynamicTextComponent *)((char *)this + 32), (const re::FontID *)&v12, v6, v7, v8);
  re::StringID::destroyString((re::StringID *)&v12);
  return v9;
}

uint64_t re::ecs2::DynamicTextSystem::updateScenes(uint64_t result, void *a2)
{
  uint64_t v2 = result;
  uint64_t v121 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(result + 104);
  if (!v3 || (*(unsigned char *)(v3 + 424) & 0x10) != 0)
  {
    uint64_t v4 = a2[1];
    if (v4)
    {
      uint64_t v5 = (void *)*a2;
      uint64_t v6 = *a2 + 8 * v4;
      double v7 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
      uint64_t v84 = v6;
      uint64_t v86 = result;
      do
      {
        uint64_t v8 = *v5;
        if (*v5)
        {
          uint64_t v9 = *(void *)(v2 + 112);
          if (!v9)
          {
            re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) ", "m_renderManager", "updateSceneInternal", 114);
            _os_crash();
            __break(1u);
          }
          float32x4_t v88 = *(re::TextManager **)(v9 + 72);
          if (v88)
          {
            uint64_t v10 = *(unsigned __int8 **)(v9 + 152);
            float32x4_t v85 = v5;
            if (v10) {
              unsigned int v87 = *v10;
            }
            else {
              unsigned int v87 = 0;
            }
            re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v102);
            re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(v8 + 200), (const re::ecs2::ComponentTypeBase *)v7[223]);
            re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v101, 3019, v2);
            uint64_t v11 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(v8 + 200), (const re::ecs2::ComponentTypeBase *)v7[223]);
            if (v11)
            {
              int v12 = *(re::ecs2::DynamicTextComponent ***)(v11 + 40);
              uint64_t v13 = *(void *)(v11 + 24);
            }
            else
            {
              int v12 = 0;
              uint64_t v13 = 0;
            }
            uint64_t v14 = (*(uint64_t (**)(void))(**(void **)(v2 + 136) + 24))(*(void *)(v2 + 136));
            uint64_t v15 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t))(*(void *)v14 + 16))(v14);
            int v16 = *((_DWORD *)v15 + 31);
            if (!v16) {
              int v16 = *((_DWORD *)v15 + 4);
            }
            signed int v17 = v16 + 1;
            unsigned int v99 = 0;
            long long v97 = 0u;
            long long v98 = 0u;
            uint64_t v100 = 0x7FFFFFFFLL;
            v113.i32[0] = 0;
            *(_OWORD *)buf = 0u;
            StringID v112 = (StringID)0;
            *(uint64_t *)((char *)v113.i64 + 4) = 0x7FFFFFFFLL;
            if (v13)
            {
              uint64_t v20 = 8 * v13;
              uint64_t v21 = v12;
              do
              {
                uint64_t v22 = (uint64_t)*v21++;
                v91.i64[0] = 0;
                (*(void (**)(StringID *__return_ptr, uint64_t, void))(*(void *)v14 + 8))(&v103, v14, *(void *)(v22 + 16));
                if (v103.var0) {
                  var1 = v103.var1;
                }
                else {
                  var1 = 0;
                }
                v91.i64[0] = (uint64_t)var1;
                v103.var0 = 0;
                unint64_t v19 = (_anonymous_namespace_ *)re::HashTable<unsigned long long,unsigned long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add<int>((uint64_t)buf, (uint64_t *)&v91, (int *)&v103);
                ++*(void *)v19;
                v20 -= 8;
              }
              while (v20);
            }
            __int32 v24 = v113.i32[0];
            if (v113.i32[0])
            {
              uint64_t v25 = 0;
              char v26 = (int *)(*(void *)&v112.var0 + 8);
              while (1)
              {
                int v27 = *v26;
                v26 += 8;
                if (v27 < 0) {
                  break;
                }
                if (v113.u32[0] == ++v25)
                {
                  LODWORD(v25) = v113.i32[0];
                  break;
                }
              }
            }
            else
            {
              LODWORD(v25) = 0;
            }
            if (v113.i32[0] != v25)
            {
              uint64_t v28 = v25;
              uint64_t v29 = *(void *)&v112.var0;
              do
              {
                uint64_t v30 = v29 + 32 * v28;
                unint64_t v31 = *(void *)(v30 + 24);
                v105.i64[0] = 0;
                v103.var1 = 0;
                v104.i64[0] = 0;
                *(void *)&v103.var0 = 0;
                v104.i32[2] = 0;
                re::DynamicArray<re::RenderText>::setCapacity(&v103, v31);
                unint64_t v34 = *(void *)(v30 + 16);
                uint64_t v33 = (void *)(v30 + 16);
                unint64_t v32 = v34;
                ++v104.i32[2];
                unint64_t v35 = 0x94D049BB133111EBLL
                    * ((0xBF58476D1CE4E5B9 * (v34 ^ (v34 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v34 ^ (v34 >> 30))) >> 27));
                unint64_t v36 = v35 ^ (v35 >> 31);
                if ((void)v97)
                {
                  unint64_t v37 = v36 % DWORD2(v98);
                  uint64_t v38 = *(unsigned int *)(*((void *)&v97 + 1) + 4 * v37);
                  if (v38 != 0x7FFFFFFF)
                  {
                    while (*(void *)(v98 + (v38 << 6) + 16) != v32)
                    {
                      uint64_t v38 = *(_DWORD *)(v98 + (v38 << 6) + 8) & 0x7FFFFFFF;
                      if (v38 == 0x7FFFFFFF) {
                        goto LABEL_36;
                      }
                    }
                    goto LABEL_37;
                  }
                }
                else
                {
                  LODWORD(v37) = 0;
                }
LABEL_36:
                re::HashTable<unsigned long long,re::DynamicArray<re::RenderText>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove((uint64_t)&v97, v37, v36, v33, (uint64_t)&v103);
                ++HIDWORD(v100);
LABEL_37:
                unint64_t v19 = (_anonymous_namespace_ *)re::DynamicArray<re::RenderText>::deinit((uint64_t)&v103);
                uint64_t v29 = *(void *)&v112.var0;
                if (v113.i32[0] <= (v25 + 1)) {
                  __int32 v39 = v25 + 1;
                }
                else {
                  __int32 v39 = v113.i32[0];
                }
                while (1)
                {
                  uint64_t v28 = (v25 + 1);
                  if (v39 - 1 == v25) {
                    break;
                  }
                  LODWORD(v25) = v25 + 1;
                  __int32 v40 = v28;
                  if ((*(_DWORD *)(*(void *)&v112.var0 + 32 * v28 + 8) & 0x80000000) != 0) {
                    goto LABEL_44;
                  }
                }
                __int32 v40 = v39;
LABEL_44:
                LODWORD(v25) = v40;
              }
              while (v24 != v40);
            }
            double v41 = re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)buf);
            uint64_t v96 = (*(uint64_t (**)(void, double))(**(void **)(v86 + 144) + 16))(*(void *)(v86 + 144), v41);
            if (v13)
            {
              uint64_t v42 = &v12[v13];
              do
              {
                int32x4_t v95 = *v12;
                v43 = (re::ecs2::TransformComponent **)*((void *)v95 + 2);
                uint64_t v44 = (re *)re::ecs2::RenderOptions::forEntity((re::ecs2::RenderOptions *)&v96, (unint64_t)v43);
                if (*(unsigned char *)v44)
                {
                  uint64_t v45 = *((void *)v95 + 10);
                  if (v45)
                  {
                    unint64_t v46 = *((void *)v95 + 5);
                    if (v46) {
                      unint64_t v47 = v46 >> 1;
                    }
                    else {
                      unint64_t v47 = v46 >> 1;
                    }
                    if (v47)
                    {
                      unsigned int v48 = atomic_load((unsigned int *)(v45 + 704));
                      if (v48 == 2)
                      {
                        re::ecs2::TransformComponent::worldMatrix4x4F(v43, (const re::ecs2::Entity *)1, &v91);
                        if (*((_DWORD *)v95 + 16) == 1)
                        {
                          uint64_t v49 = re::ecs2::DynamicTextComponent::computeObjectSpaceSize(v95, v88);
                          uint64_t v50 = 0;
                          float32x4_t v51 = vnegq_f32(vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v91, *(float *)&v49 * 0.5), (float32x4_t)0, (float32x4_t)v92), (float32x4_t)0, v93), vmlaq_f32(vmlaq_n_f32(vmulq_f32(v91, (float32x4_t)0), (float32x4_t)v92, *((float *)&v49 + 1) * -0.5), (float32x4_t)0, v93)));
                          v51.i32[3] = 1.0;
                          StringID v103 = (StringID)v91;
                          float32x4_t v104 = (float32x4_t)v92;
                          float32x4_t v105 = v93;
                          float32x4_t v106 = v94;
                          do
                          {
                            *(float32x4_t *)&buf[v50] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_23435FD50, COERCE_FLOAT(*(_OWORD *)((char *)&v103 + v50))), (float32x4_t)xmmword_23435FD60, *(float32x2_t *)((char *)&v103.var0 + v50), 1), (float32x4_t)xmmword_23435FD80, *(float32x4_t *)((char *)&v103 + v50), 2), v51, *(float32x4_t *)((char *)&v103 + v50), 3);
                            v50 += 16;
                          }
                          while (v50 != 64);
                          float32x4_t v91 = *(float32x4_t *)buf;
                          StringID v92 = v112;
                          float32x4_t v93 = v113;
                          float32x4_t v94 = v114;
                        }
                        re::StringID::invalid((re::StringID *)buf);
                        v112.var1 = (char *)0x3F8000003F800000;
                        *(void *)&v112.var0 = 0x3F8000003F800000;
                        float32x4_t v113 = 0u;
                        float32x4_t v114 = 0u;
                        float32x4_t v115 = 0u;
                        float32x4_t v116 = 0u;
                        uint64_t v117 = -1;
                        uint64_t v118 = 0;
                        uint64_t v119 = 0;
                        long long v120 = re::kInvalidStringRenderHandle;
                        char v52 = *((unsigned char *)v95 + 112);
                        long long v89 = *((_OWORD *)v95 + 6);
                        char v90 = v52;
                        re::ColorGamut4F::as((uint64_t)&v89, v87, 1, (uint64_t)&v103);
                        StringID v112 = v103;
                        re::makeFontID((re::ecs2::DynamicTextComponent *)((char *)v95 + 72), (re::StringID *)&v89);
                        long long v53 = v89;
                        *(void *)&long long v89 = 0;
                        *((void *)&v89 + 1) = "";
                        uint8_t v54 = buf[0];
                        long long v55 = *(char **)&buf[8];
                        *(_OWORD *)buf = v53;
                        *(void *)&v103.var0 = v53 & 0xFFFFFFFFFFFFFFFELL | v54 & 1;
                        v103.var1 = v55;
                        re::StringID::destroyString((re::StringID *)&v103);
                        re::StringID::destroyString((re::StringID *)&v89);
                        float32x4_t v113 = v91;
                        float32x4_t v114 = (float32x4_t)v92;
                        float32x4_t v115 = v93;
                        float32x4_t v116 = v94;
                        re::StringID::invalid((re::StringID *)&v103);
                        v104.i64[0] = 0x3F8000003F800000;
                        v104.i64[1] = 0x3F8000003F800000;
                        float32x4_t v105 = 0u;
                        float32x4_t v106 = 0u;
                        long long v107 = 0u;
                        long long v108 = 0u;
                        long long v109 = 0u;
                        uint64_t v110 = -1;
                        re::TextManager::drawDynamicText((uint64_t)v88, (uint64_t)&v103, (void *)v95 + 4, (uint64_t)buf);
                        (*(void (**)(long long *__return_ptr, uint64_t, re::ecs2::TransformComponent **))(*(void *)v14 + 8))(&v89, v14, v43);
                        if ((_BYTE)v89) {
                          unint64_t v56 = *((void *)&v89 + 1);
                        }
                        else {
                          unint64_t v56 = 0;
                        }
                        if ((void)v97)
                        {
                          unint64_t v57 = 0x94D049BB133111EBLL
                              * ((0xBF58476D1CE4E5B9 * (v56 ^ (v56 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                * (v56 ^ (v56 >> 30))) >> 27));
                          uint64_t v58 = *(unsigned int *)(*((void *)&v97 + 1) + 4 * ((v57 ^ (v57 >> 31)) % DWORD2(v98)));
                          if (v58 == 0x7FFFFFFF)
                          {
LABEL_65:
                            uint64_t v59 = 0;
                          }
                          else
                          {
                            while (*(void *)(v98 + (v58 << 6) + 16) != v56)
                            {
                              uint64_t v58 = *(_DWORD *)(v98 + (v58 << 6) + 8) & 0x7FFFFFFF;
                              if (v58 == 0x7FFFFFFF) {
                                goto LABEL_65;
                              }
                            }
                            uint64_t v59 = v98 + (v58 << 6) + 24;
                          }
                        }
                        else
                        {
                          uint64_t v59 = 0;
                        }
                        unint64_t v61 = *(void *)(v59 + 16);
                        if (v61 >= *(void *)(v59 + 8))
                        {
                          re::DynamicArray<re::RenderText>::growCapacity((void *)v59, v61 + 1);
                          unint64_t v61 = *(void *)(v59 + 16);
                        }
                        __int16 v62 = re::StringID::StringID((re::StringID *)(*(void *)(v59 + 32) + (v61 << 7)), &v103);
                        float32x4_t v63 = v104;
                        float32x4_t v64 = v106;
                        *((float32x4_t *)v62 + 2) = v105;
                        *((float32x4_t *)v62 + 3) = v64;
                        *((float32x4_t *)v62 + 1) = v63;
                        long long v65 = v107;
                        long long v66 = v108;
                        long long v67 = v109;
                        *((void *)v62 + 14) = v110;
                        *((_OWORD *)v62 + 5) = v66;
                        *((_OWORD *)v62 + 6) = v67;
                        *((_OWORD *)v62 + 4) = v65;
                        ++*(void *)(v59 + 16);
                        ++*(_DWORD *)(v59 + 24);
                        re::StringID::destroyString((re::StringID *)&v103);
                        re::StringID::destroyString((re::StringID *)buf);
                      }
                      else
                      {
                        re::AssetHandle::loadAsync((re::ecs2::DynamicTextComponent *)((char *)v95 + 72));
                      }
                    }
                  }
                  else
                  {
                    __int16 v60 = *re::ecsComponentsLogObjects(v44);
                    if (os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_DWORD *)buf = 134217984;
                      *(void *)&buf[4] = &v95;
                      _os_log_impl(&dword_233120000, v60, OS_LOG_TYPE_DEFAULT, "DynamicTextComponent %p has null font asset.", buf, 0xCu);
                    }
                  }
                }
                ++v12;
              }
              while (v12 != v42);
            }
            uint64_t v68 = *(void *)(*(void *)(v86 + 112) + 104);
            if (v68) {
              float32x4_t v69 = (re::DynamicString **)re::RenderFrameBox::get(v68 + 344, 0xFFFFFFFFFFFFFFFuLL);
            }
            else {
              float32x4_t v69 = 0;
            }
            unsigned int v70 = v99;
            if (v99)
            {
              uint64_t v71 = 0;
              float32x2_t v72 = (int *)(v98 + 8);
              while (1)
              {
                int v73 = *v72;
                v72 += 16;
                if (v73 < 0) {
                  break;
                }
                if (v99 == ++v71)
                {
                  LODWORD(v71) = v99;
                  break;
                }
              }
            }
            else
            {
              LODWORD(v71) = 0;
            }
            if (v99 != v71)
            {
              uint64_t v74 = v71;
              uint64_t v75 = v98;
              unsigned int v76 = v99;
              do
              {
                uint64_t v77 = v75 + (v74 << 6);
                float32x4_t v78 = (void *)(v77 + 40);
                if (*(void *)(v77 + 40))
                {
                  re::ecs2::RenderingSubsystem::nonOwningStreamNameForWorldRoot((re::ecs2::RenderingSubsystem *)v8, *(const re::ecs2::Scene **)(v77 + 16), v69, buf);
                  if (*v78)
                  {
                    *(void *)&v103.var0 = *(void *)buf >> 1;
                    uint64_t v79 = **(void **)(re::RenderFrameData::stream((re::RenderFrameData *)(v69 + 33), (const re::WeakStringID *)&v103)+ 48);
                    (*(void (**)(void))(v79 + 712))();
                    unsigned int v76 = v99;
                    uint64_t v75 = v98;
                  }
                  re::StringID::destroyString((re::StringID *)buf);
                }
                if (v76 <= (int)v71 + 1) {
                  unsigned int v80 = v71 + 1;
                }
                else {
                  unsigned int v80 = v76;
                }
                while (1)
                {
                  uint64_t v74 = (v71 + 1);
                  if (v80 - 1 == v71) {
                    break;
                  }
                  LODWORD(v71) = v71 + 1;
                  unsigned int v81 = v74;
                  if ((*(_DWORD *)(v75 + (v74 << 6) + 8) & 0x80000000) != 0) {
                    goto LABEL_97;
                  }
                }
                unsigned int v81 = v80;
LABEL_97:
                LODWORD(v71) = v81;
              }
              while (v70 != v81);
            }
            re::ecs2::RenderingSubsystem::nonOwningStreamNameForWorldRoot((re::ecs2::RenderingSubsystem *)v8, 0, v69, buf);
            uint64_t v2 = v86;
            uint64_t v82 = *(void *)(*(void *)(v86 + 112) + 104);
            if (v82) {
              float32x2_t v83 = *(os_unfair_lock_s **)(v82 + 304);
            }
            else {
              float32x2_t v83 = 0;
            }
            uint64_t v6 = v84;
            double v7 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
            uint64_t v5 = v85;
            *(void *)&v103.var0 = *(void *)buf >> 1;
            re::DebugRenderer::appendDebugTextToRenderFrame(v83, (re::RenderFrame *)v69, (const re::WeakStringID *)&v103);
            re::StringID::destroyString((re::StringID *)buf);
            re::HashTable<unsigned long long,re::DynamicArray<re::RenderText>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)&v97);
            re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v101);
            double result = re::ProfilerTimeGuard<(re::ProfilerStatistic)122>::end((uint64_t)v102);
          }
        }
        ++v5;
      }
      while (v5 != (void *)v6);
    }
  }
  return result;
}

void re::ecs2::DynamicTextSystem::~DynamicTextSystem(re::ecs2::DynamicTextSystem *this)
{
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::DynamicTextSystem::typeInfo(re::ecs2::DynamicTextSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"DynamicTextSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_DynamicTextSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_DynamicTextSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::DynamicTextSystem>, 0);
}

uint64_t re::make::shared::unsafelyInplace<re::ecs2::DynamicTextComponent>(uint64_t a1)
{
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  uint64_t v2 = (void *)(a1 + 32);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(void *)(v3 + 16) = 0;
  *(unsigned char *)(v3 + 24) = 0;
  *(void *)uint64_t v3 = &unk_26E6EA050;
  *(_OWORD *)uint64_t v2 = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  re::DynamicString::setCapacity(v2, 0);
  *(_DWORD *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 96) = 0x3F8000003F800000;
  *(void *)(a1 + 104) = 0x3F8000003F800000;
  *(void *)(a1 + 88) = 0;
  *(unsigned char *)(a1 + 112) = 0;
  return a1;
}

id re::internal::defaultRetain<re::ecs2::DynamicTextSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::DynamicTextSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
}

double re::HashTable<unsigned long long,re::DynamicArray<re::RenderText>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    unint64_t v3 = *((unsigned int *)a1 + 8);
    if (v3)
    {
      uint64_t v4 = 0;
      for (unint64_t i = 0; i < v3; ++i)
      {
        uint64_t v6 = a1[2] + v4;
        int v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
          re::DynamicArray<re::RenderText>::deinit(v6 + 24);
          unint64_t v3 = *((unsigned int *)a1 + 8);
        }
        v4 += 64;
      }
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

void *re::DynamicArray<re::RenderText>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      double result = (void *)*result;
      if (!*v5)
      {
        double result = (void *)re::DynamicArray<re::RenderText>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (a2 >> 57)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 128, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          unint64_t v2 = a2 << 7;
          double result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, a2 << 7, 16);
          if (result)
          {
            int v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        double result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      int v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = (uint64_t *)v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = &v8[16 * v9];
        uint64_t v11 = v7;
        do
        {
          uint64_t v12 = *v8;
          *uint64_t v11 = *v11 & 0xFFFFFFFFFFFFFFFELL | *v8 & 1;
          *uint64_t v11 = *v8 & 0xFFFFFFFFFFFFFFFELL | v12 & 1;
          v11[1] = v8[1];
          *uint64_t v8 = 0;
          v8[1] = (uint64_t)"";
          uint64_t v13 = v8[14];
          long long v14 = *((_OWORD *)v8 + 4);
          long long v15 = *((_OWORD *)v8 + 6);
          *((_OWORD *)v11 + 5) = *((_OWORD *)v8 + 5);
          *((_OWORD *)v11 + 6) = v15;
          *((_OWORD *)v11 + 4) = v14;
          long long v17 = *((_OWORD *)v8 + 2);
          long long v16 = *((_OWORD *)v8 + 3);
          *((_OWORD *)v11 + 1) = *((_OWORD *)v8 + 1);
          *((_OWORD *)v11 + 2) = v17;
          *((_OWORD *)v11 + 3) = v16;
          v11[14] = v13;
          re::StringID::destroyString((re::StringID *)v8);
          v8 += 16;
          v11 += 16;
        }
        while (v8 != v10);
        uint64_t v8 = (uint64_t *)v5[4];
      }
      double result = (void *)(*(uint64_t (**)(void, uint64_t *))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

uint64_t re::DynamicArray<re::RenderText>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    uint64_t v3 = *(re::StringID **)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = v4 << 7;
        do
        {
          re::StringID::destroyString(v3);
          uint64_t v3 = (re::StringID *)((char *)v3 + 128);
          v5 -= 128;
        }
        while (v5);
        uint64_t result = *(void *)a1;
        uint64_t v3 = *(re::StringID **)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, re::StringID *))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

void re::HashTable<unsigned long long,re::DynamicArray<re::RenderText>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      int v11 = *(_DWORD *)(a1 + 28);
      signed int v12 = 2 * v11;
      uint64_t v13 = *(void *)a1;
      if (*(void *)a1)
      {
        if (v12) {
          BOOL v14 = v9 == v12;
        }
        else {
          BOOL v14 = 1;
        }
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v28, 0, 36);
          *(void *)&v28[36] = 0x7FFFFFFFLL;
          re::HashTable<unsigned long long,re::Function<void ()(void)>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v28, v13, v12);
          long long v15 = *(_OWORD *)v28;
          *(_OWORD *)uint64_t v28 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          uint64_t v16 = *(void *)&v28[16];
          uint64_t v17 = *(void *)(a1 + 16);
          *(void *)&v28[16] = v17;
          *(void *)(a1 + 16) = v16;
          long long v19 = *(_OWORD *)&v28[24];
          *(_OWORD *)&v28[24] = *(_OWORD *)(a1 + 24);
          unsigned int v18 = *(_DWORD *)&v28[32];
          *(_OWORD *)(a1 + 24) = v19;
          uint64_t v20 = v18;
          if (v18)
          {
            uint64_t v21 = v17 + 16;
            do
            {
              if ((*(_DWORD *)(v21 - 8) & 0x80000000) != 0) {
                re::HashTable<unsigned long long,re::DynamicArray<re::RenderText>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, *(void *)(v21 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(v21 - 16), v21, v21 + 8);
              }
              v21 += 64;
              --v20;
            }
            while (v20);
          }
          re::HashTable<unsigned long long,re::DynamicArray<re::RenderText>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v28);
        }
      }
      else
      {
        if (v12) {
          signed int v24 = 2 * v11;
        }
        else {
          signed int v24 = 3;
        }
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v22 = *(void *)(a1 + 16);
    int v23 = *(_DWORD *)(v22 + (v9 << 6) + 8);
  }
  else
  {
    uint64_t v22 = *(void *)(a1 + 16);
    int v23 = *(_DWORD *)(v22 + (v9 << 6) + 8);
    *(_DWORD *)(a1 + 36) = v23 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v22 + (v9 << 6) + 8) = v23 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + (v9 << 6) + 8) = *(_DWORD *)(*(void *)(a1 + 16) + (v9 << 6) + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + (v9 << 6)) = a3;
  *(void *)(*(void *)(a1 + 16) + (v9 << 6) + 16) = *a4;
  uint64_t v25 = *(void *)(a1 + 16) + (v9 << 6);
  *(void *)(v25 + 56) = 0;
  *(_DWORD *)(v25 + 48) = 0;
  *(void *)(v25 + 32) = 0;
  *(void *)(v25 + 40) = 0;
  *(void *)(v25 + 24) = 0;
  *(void *)(v25 + 24) = *(void *)a5;
  *(void *)a5 = 0;
  *(void *)(v25 + 32) = *(void *)(a5 + 8);
  *(void *)(a5 + 8) = 0;
  uint64_t v26 = *(void *)(v25 + 40);
  *(void *)(v25 + 40) = *(void *)(a5 + 16);
  *(void *)(a5 + 16) = v26;
  uint64_t v27 = *(void *)(v25 + 56);
  *(void *)(v25 + 56) = *(void *)(a5 + 32);
  *(void *)(a5 + 32) = v27;
  ++*(_DWORD *)(a5 + 24);
  ++*(_DWORD *)(v25 + 48);
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
}

void *re::DynamicArray<re::RenderText>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    uint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::RenderText>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::RenderText>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void *re::ecs2::allocInfo_ReplayEntityState(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_182, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_182))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF84260, "ReplayEntityState");
    __cxa_guard_release(&_MergedGlobals_182);
  }
  return &unk_26AF84260;
}

void re::ecs2::initInfo_ReplayEntityState(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v18[0] = 0xB913E3D0408EBFCELL;
  v18[1] = "ReplayEntityState";
  re::StringID::destroyString((re::StringID *)v18);
  *((_OWORD *)this + 2) = v19;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF84200, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF84200);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      unint64_t v7 = re::IntrospectionInfo<re::DynamicString>::get(1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + 8) = "name";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 32) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 48) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF84248 = v8;
      uint64_t v9 = re::introspectionAllocator((re *)v8);
      int v11 = re::introspect_uint64_t((re *)1, v10);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + 8) = "parent";
      *(void *)(v12 + 16) = v11;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 32) = 0x2000000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 48) = 0;
      *(void *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF84250 = v12;
      uint64_t v13 = re::introspectionAllocator((re *)v12);
      long long v15 = re::introspect_uint8_t((re *)1, v14);
      uint64_t v16 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v13 + 32))(v13, 72, 8);
      *(_DWORD *)uint64_t v16 = 1;
      *(void *)(v16 + 8) = "active";
      *(void *)(v16 + 16) = v15;
      *(void *)(v16 + 24) = 0;
      *(void *)(v16 + 32) = 0x2800000003;
      *(_DWORD *)(v16 + 40) = 0;
      *(void *)(v16 + 48) = 0;
      *(void *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_26AF84258 = v16;
      __cxa_guard_release(&qword_26AF84200);
    }
  }
  *((void *)this + 2) = 0x3000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((void *)this + 8) = &qword_26AF84248;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::ReplayEntityState>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::ReplayEntityState>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::ReplayEntityState>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::ReplayEntityState>;
  re::IntrospectionRegistry::add(this, v3);
  long long v17 = v19;
}

void *re::internal::defaultConstruct<re::ecs2::ReplayEntityState>(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  return re::DynamicString::setCapacity((void *)a3, 0);
}

double re::internal::defaultDestruct<re::ecs2::ReplayEntityState>(int a1, int a2, re::DynamicString *this)
{
  return re::DynamicString::deinit(this);
}

void *re::internal::defaultConstructV2<re::ecs2::ReplayEntityState>(_anonymous_namespace_ *a1)
{
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  return re::DynamicString::setCapacity(a1, 0);
}

double re::ecs2::StateRecorderSystem::StateRecorderSystem(re::ecs2::StateRecorderSystem *this)
{
  re::ecs2::System::System((uint64_t)this, 2);
  *(void *)uint64_t v1 = &unk_26E6F8530;
  *(_WORD *)(v1 + 104) = 0;
  double result = 0.0;
  *(_OWORD *)(v1 + 112) = 0u;
  *(_OWORD *)(v1 + 128) = 0u;
  *(_OWORD *)(v1 + 140) = 0u;
  *(void *)(v1 + 156) = 0x7FFFFFFFLL;
  *(void *)(v1 + 208) = 0;
  *(unsigned char *)(v1 + 216) = 0;
  *(_OWORD *)(v1 + 240) = 0u;
  *(_DWORD *)(v1 + 256) = 0;
  *(_OWORD *)(v1 + 224) = 0u;
  *(void *)(v1 + 184) = 0;
  *(void *)(v1 + 192) = 0;
  *(void *)(v1 + 176) = 0;
  *(unsigned char *)(v1 + 200) = 0;
  *(void *)(v1 + 2re::HashTable<re::ecs2::Entity const*,re::ecs2::BillboardData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::deinit((uint64_t *)this + 60) = 0x7FFFFFFFLL;
  *(void *)(v1 + 304) = 0;
  *(void *)(v1 + 272) = 0;
  *(void *)(v1 + 280) = 0;
  *(_DWORD *)(v1 + 296) = 0;
  *(void *)(v1 + 288) = 0;
  return result;
}

uint64_t re::ecs2::StateRecorderSystem::willAddSystemToECSService(re::ecs2::StateRecorderSystem *this)
{
  uint64_t v1 = this;
  if (!*((unsigned char *)this + 200))
  {
    uint64_t v2 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
    this = (re::ecs2::StateRecorderSystem *)re::ServiceLocator::serviceOrNull<re::TraceService>(v2);
    *((void *)v1 + 23) = this;
  }
  unint64_t v3 = re::globalAllocators(this);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3[2] + 32))(v3[2], 616, 8);
  *(_OWORD *)uint64_t v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  re::DynamicString::setCapacity((void *)v4, 0);
  *(void *)(v4 + 48) = 0;
  *(_DWORD *)(v4 + 56) = -1;
  *(void *)(v4 + 96) = 0;
  *(_OWORD *)(v4 + re::HashTable<re::ecs2::Entity const*,re::ecs2::BillboardData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::deinit((uint64_t *)this + 60) = 0u;
  *(_OWORD *)(v4 + 76) = 0u;
  re::ecs2::ECSJSONSerializer::ECSJSONSerializer((re::ecs2::ECSJSONSerializer *)(v4 + 104));
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF84220, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF84220))
  {
    qword_26AF84218 = re::internal::getOrCreateInfo((re::internal *)"ReplayEntityState", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_ReplayEntityState, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_ReplayEntityState, (void (*)(re::IntrospectionBase *))&unk_26AF84208, 0);
    __cxa_guard_release(&qword_26AF84220);
  }
  re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v11);
  v10[0] = 0xB913E3D0408EBFCELL;
  v10[1] = "ReplayEntityState";
  uint64_t v5 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v10);
  if (v5)
  {
    uint64_t v6 = *v5;
  }
  else
  {
    unint64_t v7 = 0;
    uint64_t v6 = 0xFFFFFFFFLL;
  }
  *(void *)(v4 + 48) = v7;
  *(void *)(v4 + 56) = v6;
  re::StringID::destroyString((re::StringID *)v10);
  re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v11);
  *((void *)v1 + 26) = v4;
  uint64_t v8 = (*(uint64_t (**)(void))(**((void **)v1 + 5) + 32))(*((void *)v1 + 5));
  uint64_t result = re::ServiceLocator::serviceOrNull<re::EventBus>(v8);
  *((void *)v1 + 24) = result;
  return result;
}

re::ecs2::StateRecorderSystem *re::ecs2::StateRecorderSystem::willAddSceneToECSService(re::ecs2::StateRecorderSystem *this, re::EventBus **a2)
{
  if (*((unsigned char *)this + 104)) {
    return re::ecs2::StateRecorderSystem::startRecordingScene(this, a2);
  }
  return this;
}

re::ecs2::StateRecorderSystem *re::ecs2::StateRecorderSystem::startRecordingScene(re::ecs2::StateRecorderSystem *this, re::EventBus **a2)
{
  uint64_t v58 = *MEMORY[0x263EF8340];
  uint64_t v33 = (re::ecs2::Scene *)a2;
  unint64_t v3 = a2[36];
  if (v3)
  {
    uint64_t v32 = 0;
    v30[1] = 0;
    v30[2] = 0;
    int v31 = 0;
    uint64_t v4 = (re *)re::DynamicArray<re::RigNodeConstraint>::setCapacity(v30, 8uLL);
    ++v31;
    uint64_t v56 = re::globalAllocators(v4)[2];
    uint64_t v5 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v56 + 32))(v56, 32, 0);
    *uint64_t v5 = &unk_26E6F85B8;
    v5[1] = this;
    void v5[2] = re::ecs2::StateRecorderSystem::onEntityAdded;
    v5[3] = 0;
    unint64_t v57 = v5;
    v29.n128_u64[0] = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityDidAddEvent>(v3, (uint64_t)v55, 0, 0);
    v29.n128_u64[1] = v6;
    re::DynamicArray<re::RigNodeConstraint>::add((_anonymous_namespace_ *)v30, &v29);
    unint64_t v7 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidAddEvent const&)>::destroyCallable((uint64_t)v55);
    uint64_t v53 = re::globalAllocators(v7)[2];
    uint64_t v8 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v53 + 32))(v53, 32, 0);
    *uint64_t v8 = &unk_26E6F8620;
    v8[1] = this;
    v8[2] = re::ecs2::StateRecorderSystem::onEntityRemoved;
    v8[3] = 0;
    uint8_t v54 = v8;
    v29.n128_u64[0] = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityWillRemoveEvent>(v3, (uint64_t)v52, 0, 0);
    v29.n128_u64[1] = v9;
    re::DynamicArray<re::RigNodeConstraint>::add((_anonymous_namespace_ *)v30, &v29);
    int v10 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::destroyCallable((uint64_t)v52);
    uint64_t v50 = re::globalAllocators(v10)[2];
    char v11 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v50 + 32))(v50, 32, 0);
    *char v11 = &unk_26E6F8678;
    v11[1] = this;
    void v11[2] = re::ecs2::StateRecorderSystem::onEntityDidActivate;
    v11[3] = 0;
    float32x4_t v51 = v11;
    v29.n128_u64[0] = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityDidActivateEvent>(v3, (uint64_t)v49, 0, 0);
    v29.n128_u64[1] = v12;
    re::DynamicArray<re::RigNodeConstraint>::add((_anonymous_namespace_ *)v30, &v29);
    uint64_t v13 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)>::destroyCallable((uint64_t)v49);
    uint64_t v47 = re::globalAllocators(v13)[2];
    BOOL v14 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v47 + 32))(v47, 32, 0);
    *BOOL v14 = &unk_26E6F86D0;
    v14[1] = this;
    v14[2] = re::ecs2::StateRecorderSystem::onEntityWillDeactivate;
    v14[3] = 0;
    unsigned int v48 = v14;
    v29.n128_u64[0] = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityWillDeactivateEvent>(v3, (uint64_t)v46, 0, 0);
    v29.n128_u64[1] = v15;
    re::DynamicArray<re::RigNodeConstraint>::add((_anonymous_namespace_ *)v30, &v29);
    uint64_t v16 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::destroyCallable((uint64_t)v46);
    uint64_t v44 = re::globalAllocators(v16)[2];
    long long v17 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v44 + 32))(v44, 32, 0);
    *long long v17 = &unk_26E6F8728;
    v17[1] = this;
    v17[2] = re::ecs2::StateRecorderSystem::onEntityReparented;
    v17[3] = 0;
    uint64_t v45 = v17;
    v29.n128_u64[0] = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityDidReparentEvent>(v3, (uint64_t)v43, 0, 0);
    v29.n128_u64[1] = v18;
    re::DynamicArray<re::RigNodeConstraint>::add((_anonymous_namespace_ *)v30, &v29);
    long long v19 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::destroyCallable((uint64_t)v43);
    uint64_t v41 = re::globalAllocators(v19)[2];
    uint64_t v20 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v41 + 32))(v41, 32, 0);
    *uint64_t v20 = &unk_26E6F8780;
    v20[1] = this;
    v20[2] = re::ecs2::StateRecorderSystem::onComponentAdded;
    v20[3] = 0;
    uint64_t v42 = v20;
    v29.n128_u64[0] = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v3, (uint64_t)v40, 0, 0);
    v29.n128_u64[1] = v21;
    re::DynamicArray<re::RigNodeConstraint>::add((_anonymous_namespace_ *)v30, &v29);
    uint64_t v22 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v40);
    uint64_t v38 = re::globalAllocators(v22)[2];
    int v23 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v38 + 32))(v38, 32, 0);
    *int v23 = &unk_26E6F87D8;
    v23[1] = this;
    v23[2] = re::ecs2::StateRecorderSystem::onComponentDidChange;
    v23[3] = 0;
    __int32 v39 = v23;
    v29.n128_u64[0] = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v3, (uint64_t)v37, 0, 0);
    v29.n128_u64[1] = v24;
    re::DynamicArray<re::RigNodeConstraint>::add((_anonymous_namespace_ *)v30, &v29);
    uint64_t v25 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v37);
    uint64_t v35 = re::globalAllocators(v25)[2];
    uint64_t v26 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v35 + 32))(v35, 32, 0);
    *uint64_t v26 = &unk_26E6F8830;
    v26[1] = this;
    v26[2] = re::ecs2::StateRecorderSystem::onComponentRemoved;
    v26[3] = 0;
    unint64_t v36 = v26;
    v29.n128_u64[0] = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillRemoveEvent>(v3, (uint64_t)v34, 0, 0);
    v29.n128_u64[1] = v27;
    re::DynamicArray<re::RigNodeConstraint>::add((_anonymous_namespace_ *)v30, &v29);
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::destroyCallable((uint64_t)v34);
    re::HashTable<re::ecs2::Scene *,re::DynamicArray<RESubscriptionHandle>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::addNew((uint64_t)this + 120, (uint64_t *)&v33, (uint64_t)v30);
    if (v30[0] && v32) {
      (*(void (**)(void))(*(void *)v30[0] + 40))();
    }
    a2 = (re::EventBus **)v33;
  }
  return re::ecs2::StateRecorderSystem::recordAllEntities(this, *((re::ecs2::Entity ****)a2[13] + 44));
}

uint64_t re::ecs2::StateRecorderSystem::willRemoveSceneFromECSService(uint64_t this, unint64_t a2)
{
  if (*(unsigned char *)(this + 104)) {
    return re::ecs2::StateRecorderSystem::stopRecordingScene(this, a2);
  }
  return this;
}

uint64_t re::ecs2::StateRecorderSystem::stopRecordingScene(uint64_t this, unint64_t a2)
{
  unint64_t v14 = a2;
  uint64_t v2 = *(void *)(a2 + 288);
  if (v2)
  {
    uint64_t v3 = this + 120;
    LODWORD(v4) = 0x7FFFFFFF;
    if (*(void *)(this + 120))
    {
      unint64_t v5 = 0x94D049BB133111EBLL
         * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
      uint64_t v6 = *(unsigned int *)(*(void *)(this + 128) + 4 * ((v5 ^ (v5 >> 31)) % *(unsigned int *)(this + 144)));
      if (v6 != 0x7FFFFFFF)
      {
        uint64_t v7 = *(void *)(this + 136);
        if (*(void *)(v7 + (v6 << 6) + 16) == a2)
        {
          LODWORD(v4) = v6;
        }
        else
        {
          uint64_t v4 = v6;
          while (1)
          {
            uint64_t v4 = *(_DWORD *)(v7 + (v4 << 6) + 8) & 0x7FFFFFFF;
            if (v4 == 0x7FFFFFFF) {
              break;
            }
            if (*(void *)(v7 + (v4 << 6) + 16) == a2) {
              goto LABEL_11;
            }
          }
          LODWORD(v4) = 0x7FFFFFFF;
        }
      }
    }
LABEL_11:
    unint64_t v8 = *(void *)(this + 136) + ((unint64_t)v4 << 6);
    uint64_t v9 = *(void *)(v8 + 40);
    if (v9)
    {
      int v10 = *(uint64_t **)(v8 + 56);
      char v11 = &v10[2 * v9];
      do
      {
        uint64_t v12 = *v10;
        unint64_t v13 = v10[1];
        v10 += 2;
        re::EventBus::unsubscribe(v2, v12, v13);
      }
      while (v10 != v11);
    }
    return re::HashTable<re::ecs2::Scene *,re::DynamicArray<RESubscriptionHandle>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::remove(v3, (uint64_t *)&v14);
  }
  return this;
}

re *re::ecs2::StateRecorderSystem::willRemoveSystemFromECSService(uint64_t **this)
{
  uint64_t result = re::ecs2::StateRecorderSystem::stopRecording((re *)this);
  uint64_t v3 = this[26];
  if (v3)
  {
    uint64_t v4 = re::globalAllocators(result)[2];
    v3[13] = (uint64_t)&unk_26E6D44A0;
    re::DynamicArray<unsigned long>::deinit((uint64_t)(v3 + 72));
    re::DynamicArray<unsigned long>::deinit((uint64_t)(v3 + 67));
    re::DynamicArray<unsigned long>::deinit((uint64_t)(v3 + 62));
    re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(v3 + 56);
    re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::~Serializer((uint64_t)(v3 + 13));
    re::DynamicArray<unsigned long>::deinit((uint64_t)(v3 + 8));
    double v5 = re::DynamicString::deinit((re::DynamicString *)v3);
    uint64_t result = (re *)(*(uint64_t (**)(uint64_t, uint64_t *, double))(*(void *)v4 + 40))(v4, v3, v5);
  }
  this[26] = 0;
  this[24] = 0;
  return result;
}

re *re::ecs2::StateRecorderSystem::stopRecording(re *this)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (*((unsigned char *)this + 104))
  {
    uint64_t v1 = (uint64_t)this;
    *((unsigned char *)this + 104) = 0;
    if (*((unsigned char *)this + 216))
    {
      re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear((uint64_t)this + 224);
      uint64_t v2 = (re *)re::DynamicArray<re::TraceEntry>::clear(v1 + 272);
      *(unsigned char *)(v1 + 216) = 0;
      uint64_t v3 = *re::ecsComponentsLogObjects(v2);
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v14) = 0;
        _os_log_impl(&dword_233120000, v3, OS_LOG_TYPE_DEFAULT, "[StateRecorderSystem] Targeted mode stopped", (uint8_t *)&v14, 2u);
      }
    }
    uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(v1 + 40) + 32))(*(void *)(v1 + 40));
    uint64_t v5 = re::ServiceLocator::serviceOrNull<re::NetworkSystem>(v4);
    if (v5)
    {
      uint64_t v6 = v5;
      *(void *)&long long v14 = v1;
      *((void *)&v14 + 1) = re::ecs2::StateRecorderSystem::onEntityMetadataUpdated;
      uint64_t v15 = 0;
      uint64_t v16 = re::Event<re::NetworkSystem,re::ecs2::Entity *>::createSubscription<re::ecs2::StateRecorderSystem>(re::ecs2::StateRecorderSystem *,REEventHandlerResult (re::ecs2::StateRecorderSystem::*)(re::NetworkSystem*,re::ecs2::Entity *))::{lambda(re::NetworkSystem*,re::Event<re::NetworkSystem,re::ecs2::Entity *>::Subscription const&,re::ecs2::Entity *&&)#1}::__invoke;
      re::Event<re::GeometricObjectBase>::removeSubscription(v5 + 616, &v14);
      *(void *)&long long v14 = v1;
      *((void *)&v14 + 1) = re::ecs2::StateRecorderSystem::onLocalComponentDidUpdated;
      uint64_t v15 = 0;
      uint64_t v16 = re::Event<re::NetworkSystem,re::ecs2::Component *>::createSubscription<re::ecs2::StateRecorderSystem>(re::ecs2::StateRecorderSystem *,REEventHandlerResult (re::ecs2::StateRecorderSystem::*)(re::NetworkSystem*,re::ecs2::Component *))::{lambda(re::NetworkSystem*,re::Event<re::NetworkSystem,re::ecs2::Component *>::Subscription const&,re::ecs2::Component *&&)#1}::__invoke;
      re::Event<re::GeometricObjectBase>::removeSubscription(v6 + 880, &v14);
      *(void *)&long long v14 = v1;
      *((void *)&v14 + 1) = re::ecs2::StateRecorderSystem::onEntityUpdatedFromNetwork;
      uint64_t v15 = 0;
      uint64_t v16 = re::Event<re::NetworkSystem,re::ecs2::Entity *>::createSubscription<re::ecs2::StateRecorderSystem>(re::ecs2::StateRecorderSystem *,REEventHandlerResult (re::ecs2::StateRecorderSystem::*)(re::NetworkSystem*,re::ecs2::Entity *))::{lambda(re::NetworkSystem*,re::Event<re::NetworkSystem,re::ecs2::Entity *>::Subscription const&,re::ecs2::Entity *&&)#1}::__invoke;
      re::Event<re::GeometricObjectBase>::removeSubscription(v6 + 88, &v14);
      *(void *)&long long v14 = v1;
      *((void *)&v14 + 1) = re::ecs2::StateRecorderSystem::onComponentUpdatedFromNetwork;
      uint64_t v15 = 0;
      uint64_t v16 = re::Event<re::NetworkSystem,re::ecs2::Component *>::createSubscription<re::ecs2::StateRecorderSystem>(re::ecs2::StateRecorderSystem *,REEventHandlerResult (re::ecs2::StateRecorderSystem::*)(re::NetworkSystem*,re::ecs2::Component *))::{lambda(re::NetworkSystem*,re::Event<re::NetworkSystem,re::ecs2::Component *>::Subscription const&,re::ecs2::Component *&&)#1}::__invoke;
      re::Event<re::GeometricObjectBase>::removeSubscription(v6 + 352, &v14);
    }
    while (*(_DWORD *)(v1 + 148))
    {
      uint64_t v7 = *(unsigned int *)(v1 + 152);
      uint64_t v8 = *(void *)(v1 + 136);
      uint64_t v9 = 0;
      if (v7)
      {
        int v10 = (int *)(v8 + 8);
        while (1)
        {
          int v11 = *v10;
          v10 += 16;
          if (v11 < 0) {
            break;
          }
          if (v7 == ++v9)
          {
            LODWORD(v9) = *(_DWORD *)(v1 + 152);
            break;
          }
        }
      }
      re::ecs2::StateRecorderSystem::stopRecordingScene(v1, *(void *)(v8 + ((unint64_t)v9 << 6) + 16));
    }
    this = re::internal::destroyPersistent<re::TraceDelta>((re *)"stopRecording", 265, *(void *)(v1 + 168));
    *(void *)(v1 + 168) = 0;
    uint64_t v12 = *(re::EventBus **)(v1 + 192);
    if (v12)
    {
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF84240, memory_order_acquire) & 1) == 0)
      {
        if (__cxa_guard_acquire(&qword_26AF84240))
        {
          qword_26AF84238 = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"N2re4ecs225StateRecorderDidStopEventE" & 0x7FFFFFFFFFFFFFFFLL), v13);
          __cxa_guard_release(&qword_26AF84240);
        }
      }
      return (re *)re::EventBus::publish(v12, v1, qword_26AF84238, (uint64_t)&v14, 1uLL, 0);
    }
  }
  return this;
}

uint64_t re::ecs2::StateRecorderSystem::onEntityMetadataUpdated(re::ecs2::StateRecorderSystem *this, re::NetworkSystem *a2, re::ecs2::Entity *a3)
{
  re::ecs2::StateRecorderSystem::logEntityUpdated((uint64_t)this, (uint64_t)a3, 1);
  uint64_t v5 = (void *)*((void *)a3 + 25);
  if (v5) {
    re::ecs2::StateRecorderSystem::logComponentUpdated((uint64_t)this, v5, 1);
  }
  return 0;
}

uint64_t re::ecs2::StateRecorderSystem::onLocalComponentDidUpdated(re::ecs2::StateRecorderSystem *this, re::NetworkSystem *a2, re::ecs2::Component *a3)
{
  return 0;
}

uint64_t re::ecs2::StateRecorderSystem::onEntityUpdatedFromNetwork(re::ecs2::StateRecorderSystem *this, re::NetworkSystem *a2, re::ecs2::Entity *a3)
{
  return 0;
}

uint64_t re::ecs2::StateRecorderSystem::onComponentUpdatedFromNetwork(re::ecs2::StateRecorderSystem *this, re::NetworkSystem *a2, re::ecs2::Component *a3)
{
  return 0;
}

void re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 28))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 24);
    if (v2) {
      memset_pattern16(*(void **)(a1 + 8), &memset_pattern_9, 4 * v2);
    }
    uint64_t v3 = *(unsigned int *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = 0;
      uint64_t v5 = 24 * v3;
      do
      {
        uint64_t v6 = *(void *)(a1 + 16) + v4;
        int v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0) {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
        }
        v4 += 24;
      }
      while (v5 != v4);
    }
    *(_DWORD *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    int v8 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v8;
  }
}

uint64_t re::DynamicArray<re::TraceEntry>::clear(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void *)(result + 16);
  *(void *)(result + 16) = 0;
  if (v2)
  {
    uint64_t v3 = v2 << 6;
    uint64_t v4 = *(void *)(result + 32) + 24;
    do
    {
      uint64_t result = re::DynamicArray<unsigned long>::deinit(v4);
      v4 += 64;
      v3 -= 64;
    }
    while (v3);
  }
  ++*(_DWORD *)(v1 + 24);
  return result;
}

re *re::internal::destroyPersistent<re::TraceDelta>(re *result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v4 = re::globalAllocators(result)[2];
    re::DynamicArray<re::TraceEntry>::deinit(a3 + 16);
    uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 40);
    return (re *)v5(v4, a3);
  }
  return result;
}

re::ecs2::StateRecorderSystem *re::ecs2::StateRecorderSystem::recordAllEntities(re::ecs2::StateRecorderSystem *this, re::ecs2::Entity ***a2)
{
  uint64_t v3 = this;
  if (a2) {
    this = (re::ecs2::StateRecorderSystem *)re::ecs2::StateRecorderSystem::recordEntity(this, (re::ecs2::Entity *)a2);
  }
  uint64_t v4 = a2[41];
  if (v4)
  {
    uint64_t v5 = a2[43];
    uint64_t v6 = 8 * (void)v4;
    do
    {
      int v7 = *v5;
      if (!*((unsigned char *)v3 + 216)
        || (this = (re::ecs2::StateRecorderSystem *)re::ecs2::StateRecorderSystem::isAppTLE(v3, *v5), this))
      {
        this = (re::ecs2::StateRecorderSystem *)re::ecs2::StateRecorderSystem::recordAllDescendants(v3, (re::ecs2::Entity ***)v7);
      }
      ++v5;
      v6 -= 8;
    }
    while (v6);
  }
  return this;
}

uint64_t re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityDidAddEvent>(re::EventBus *a1, uint64_t a2, uint64_t a3, char a4)
{
  v9[5] = *MEMORY[0x263EF8340];
  v9[3] = *(void *)(a2 + 24);
  v9[4] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidAddEvent const&)>::operator=<24ul>((uint64_t)v9, a2);
  uint64_t v7 = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityDidAddEvent>(a1, 0, (uint64_t)v9, a3, a4);
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidAddEvent const&)>::destroyCallable((uint64_t)v9);
  return v7;
}

uint64_t re::ecs2::StateRecorderSystem::onEntityAdded(re::ecs2::StateRecorderSystem *this, re::ecs2::Entity *a2, re::ecs2::Entity **a3)
{
  if (a2)
  {
    if (*((unsigned char *)this + 216) && re::ecs2::StateRecorderSystem::shouldEntityBeInAppEntitySet(this, a2))
    {
      uint64_t v6 = *((void *)a2 + 3);
      uint64_t v7 = a2;
      if (v6)
      {
        uint64_t v7 = a2;
        if ((*(unsigned char *)(v6 + 288) & 0x80) == 0)
        {
          do
          {
            uint64_t v7 = (re::ecs2::Entity *)v6;
            uint64_t v6 = *(void *)(v6 + 24);
          }
          while (v6 && (*(unsigned char *)(v6 + 288) & 0x80) == 0);
        }
      }
      uint64_t v13 = *((void *)v7 + 37);
      if (!re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::contains((uint64_t)this + 224, &v13))re::ecs2::StateRecorderSystem::recordAllDescendants(this, (re::ecs2::Entity ***)v7); {
    }
      }
    uint64_t v8 = *((void *)a2 + 25);
    if (v8 && *(void *)(v8 + 32))
    {
      uint64_t OwnerPeerID = RESyncableGetOwnerPeerID();
      int v10 = *a3;
      if (OwnerPeerID)
      {
        char v11 = 2;
LABEL_16:
        re::ecs2::StateRecorderSystem::logEntityAdded(this, v10, v11);
        return 0;
      }
    }
    else
    {
      int v10 = *a3;
    }
    char v11 = 1;
    goto LABEL_16;
  }
  return 0;
}

uint64_t re::ecs2::StateRecorderSystem::onEntityRemoved(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return 0;
}

uint64_t re::ecs2::StateRecorderSystem::onEntityDidActivate(uint64_t a1, uint64_t a2)
{
  return 0;
}

uint64_t re::ecs2::StateRecorderSystem::onEntityWillDeactivate(uint64_t a1, uint64_t a2)
{
  return 0;
}

uint64_t re::ecs2::StateRecorderSystem::onEntityReparented(re::ecs2::StateRecorderSystem *a1, re::ecs2::Entity *a2, uint64_t a3)
{
  if (!*((unsigned char *)a1 + 216)) {
    goto LABEL_14;
  }
  uint64_t v12 = (re::ecs2::Entity **)*((void *)a2 + 37);
  BOOL v6 = re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::contains((uint64_t)a1 + 224, (uint64_t *)&v12);
  int shouldEntityBeInAppEntitySet = re::ecs2::StateRecorderSystem::shouldEntityBeInAppEntitySet(a1, a2);
  if (!v6)
  {
    if (!shouldEntityBeInAppEntitySet) {
      return 0;
    }
    uint64_t v8 = *((void *)a2 + 3);
    uint64_t v9 = (re::ecs2::Entity ***)a2;
    if (v8)
    {
      uint64_t v9 = (re::ecs2::Entity ***)a2;
      if ((*(unsigned char *)(v8 + 288) & 0x80) == 0)
      {
        do
        {
          uint64_t v9 = (re::ecs2::Entity ***)v8;
          uint64_t v8 = *(void *)(v8 + 24);
        }
        while (v8 && (*(unsigned char *)(v8 + 288) & 0x80) == 0);
      }
    }
    uint64_t v12 = v9[37];
    if (re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::contains((uint64_t)a1 + 224, (uint64_t *)&v12))
    {
      int v10 = (re::ecs2::Entity ***)a2;
    }
    else
    {
      int v10 = v9;
    }
    re::ecs2::StateRecorderSystem::recordAllDescendants(a1, v10);
LABEL_14:
    re::ecs2::StateRecorderSystem::logEntityUpdated((uint64_t)a1, *(void *)(a3 + 8), 1);
    return 0;
  }
  if (shouldEntityBeInAppEntitySet) {
    goto LABEL_14;
  }
  re::ecs2::StateRecorderSystem::logEntityRemoved((uint64_t)a1, *((void *)a2 + 37));
  return 0;
}

uint64_t re::ecs2::StateRecorderSystem::onComponentAdded(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(const re::ecs2::ComponentTypeBase **)(a3 + 8);
  BOOL v6 = (void *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 4), v5);
  if (v6)
  {
    re::ecs2::StateRecorderSystem::logComponentAdded(a1, v6);
  }
  else
  {
    uint64_t v7 = *re::ecsComponentsLogObjects(0);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = a2[37];
      uint64_t v10 = a2[35];
      uint64_t v11 = *((void *)v5 + 4);
      int v12 = 134218499;
      uint64_t v13 = v9;
      __int16 v14 = 2081;
      uint64_t v15 = v10;
      __int16 v16 = 2081;
      uint64_t v17 = v11;
      _os_log_error_impl(&dword_233120000, v7, OS_LOG_TYPE_ERROR, "[StateRecorderSystem] Received onComponentAdded event for entity id=%llu, name=%{private}s, component=%{private}s, but entity doesn't have such component.", (uint8_t *)&v12, 0x20u);
    }
  }
  return 0;
}

uint64_t re::ecs2::StateRecorderSystem::onComponentDidChange(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(const re::ecs2::ComponentTypeBase **)(a3 + 8);
  BOOL v6 = (void *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 4), v5);
  if (v6)
  {
    re::ecs2::StateRecorderSystem::logComponentUpdated(a1, v6, 1);
  }
  else
  {
    uint64_t v7 = *re::ecsComponentsLogObjects(0);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = a2[37];
      uint64_t v10 = a2[35];
      uint64_t v11 = *((void *)v5 + 4);
      int v12 = 134218499;
      uint64_t v13 = v9;
      __int16 v14 = 2081;
      uint64_t v15 = v10;
      __int16 v16 = 2081;
      uint64_t v17 = v11;
      _os_log_error_impl(&dword_233120000, v7, OS_LOG_TYPE_ERROR, "[StateRecorderSystem] Received onComponentDidChange event for entity id=%llu, name=%{private}s, component=%{private}s, but entity doesn't have such component.", (uint8_t *)&v12, 0x20u);
    }
  }
  return 0;
}

uint64_t re::ecs2::StateRecorderSystem::onComponentRemoved(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(const re::ecs2::ComponentTypeBase **)(a3 + 8);
  uint64_t v6 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 4), v5);
  if (v6)
  {
    uint64_t v7 = (void *)v6;
    uint64_t v8 = *(void *)(v6 + 16);
    if (v8)
    {
      if (!*(unsigned char *)(a1 + 216)
        || (*(void *)uint64_t v17 = *(void *)(v8 + 296),
            re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::contains(a1 + 224, (uint64_t *)v17)))
      {
        uint64_t v9 = *(void *)(a1 + 168);
        if (v9)
        {
          uint64_t v10 = (_anonymous_namespace_ *)(v9 + 16);
          *(void *)uint64_t v17 = *(void *)(v7[2] + 296);
          *(void *)&v17[8] = *(void *)((*(uint64_t (**)(void *))(*v7 + 40))(v7) + 24) >> 1;
          *(_WORD *)&v17[16] = 259;
          uint64_t v23 = 0;
          int v22 = 0;
          uint64_t v20 = 0;
          uint64_t v21 = 0;
          uint64_t v19 = 0;
          __n128 v11 = re::DynamicArray<re::TraceEntry>::add(v10, (__n128 *)v17);
          if (v19)
          {
            if (v23) {
              (*(void (**)(__n128))(*(void *)v19 + 40))(v11);
            }
          }
        }
      }
    }
  }
  else
  {
    int v12 = *re::ecsComponentsLogObjects(0);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      uint64_t v14 = a2[37];
      uint64_t v15 = a2[35];
      uint64_t v16 = *((void *)v5 + 4);
      *(_DWORD *)uint64_t v17 = 134218499;
      *(void *)&v17[4] = v14;
      *(_WORD *)&v17[12] = 2081;
      *(void *)&v17[14] = v15;
      __int16 v18 = 2081;
      uint64_t v19 = v16;
      _os_log_error_impl(&dword_233120000, v12, OS_LOG_TYPE_ERROR, "[StateRecorderSystem] Received onComponentRemoved event for entity id=%llu, name=%{private}s, component=%{private}s, but entity doesn't have such component.", v17, 0x20u);
    }
  }
  return 0;
}

unint64_t re::HashTable<re::ecs2::Scene *,re::DynamicArray<RESubscriptionHandle>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::addNew(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  unint64_t v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (!*(void *)a1)
  {
    LODWORD(v9) = 0;
    goto LABEL_8;
  }
  unint64_t v9 = v8 % *(unsigned int *)(a1 + 24);
  uint64_t v10 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v9);
  if (v10 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v13 = re::HashTable<re::ecs2::Scene *,re::DynamicArray<RESubscriptionHandle>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::addAsMove(a1, v9, v8, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    unint64_t v12 = *(void *)(a1 + 16) + ((unint64_t)v13 << 6);
    return v12 + 24;
  }
  uint64_t v11 = *(void *)(a1 + 16);
  while (*(void *)(v11 + (v10 << 6) + 16) != v6)
  {
    uint64_t v10 = *(_DWORD *)(v11 + (v10 << 6) + 8) & 0x7FFFFFFF;
    if (v10 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  unint64_t v12 = v11 + (v10 << 6);
  return v12 + 24;
}

uint64_t re::HashTable<re::ecs2::Scene *,re::DynamicArray<RESubscriptionHandle>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::remove(uint64_t a1, uint64_t *a2)
{
  if (!*(void *)a1) {
    return 0;
  }
  uint64_t v3 = *a2;
  unint64_t v4 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  unint64_t v5 = ((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) ^ ((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) >> 31))
     % *(unsigned int *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(unsigned int *)(v6 + 4 * v5);
  if (v7 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v9 = *(void *)(a1 + 16);
  uint64_t v10 = v9 + (v7 << 6);
  if (*(void *)(v10 + 16) != v3)
  {
    while (1)
    {
      unsigned int v11 = v7;
      int v12 = *(_DWORD *)(v9 + (v7 << 6) + 8);
      uint64_t v7 = v12 & 0x7FFFFFFF;
      if ((v12 & 0x7FFFFFFF) == 0x7FFFFFFF) {
        return 0;
      }
      uint64_t v13 = v9 + (v7 << 6);
      if (*(void *)(v13 + 16) == v3)
      {
        *(_DWORD *)(v9 + ((unint64_t)v11 << 6) + 8) = *(_DWORD *)(v9 + ((unint64_t)v11 << 6) + 8) & 0x80000000 | *(_DWORD *)(v13 + 8) & 0x7FFFFFFF;
        goto LABEL_9;
      }
    }
  }
  *(_DWORD *)(v6 + 4 * v5) = *(_DWORD *)(v10 + 8) & 0x7FFFFFFF;
LABEL_9:
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = v14 + (v7 << 6);
  int v18 = *(_DWORD *)(v15 + 8);
  uint64_t v17 = (int *)(v15 + 8);
  int v16 = v18;
  if (v18 < 0)
  {
    *uint64_t v17 = v16 & 0x7FFFFFFF;
    re::DynamicArray<unsigned long>::deinit(v14 + (v7 << 6) + 24);
    uint64_t v14 = *(void *)(a1 + 16);
    int v16 = *(_DWORD *)(v14 + (v7 << 6) + 8);
  }
  int v19 = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(v14 + (v7 << 6) + 8) = *(_DWORD *)(a1 + 36) | v16 & 0x80000000;
  --*(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 36) = v7;
  *(_DWORD *)(a1 + 40) = v19 + 1;
  return 1;
}

void re::ecs2::StateRecorderSystem::update(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v113 = *MEMORY[0x263EF8340];
  uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 120))(*(void *)(a1 + 40));
  if (v5)
  {
    uint64_t v6 = (id *)v4;
    uint64_t v7 = 0;
    uint64_t v8 = 8 * v5;
    do
    {
      WeakRetained = (char *)objc_loadWeakRetained(v6);
      if (WeakRetained)
      {
        uint64_t v10 = WeakRetained;
        uint64_t v11 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(WeakRetained + 192), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::NetworkComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
        if (v11) {
          uint64_t v12 = *(void *)(v11 + 24);
        }
        else {
          uint64_t v12 = 0;
        }
        v7 += v12;
      }
      ++v6;
      v8 -= 8;
    }
    while (v8);
  }
  uint64_t v13 = a1;
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v89, 3089, a1);
  if (a3 != 1) {
    goto LABEL_115;
  }
  uint64_t v14 = *(void *)(a1 + 184);
  if (v14 && (*(uint64_t (**)(uint64_t))(*(void *)v14 + 72))(v14) || *(unsigned char *)(a1 + 105))
  {
    uint64_t v15 = 1;
  }
  else
  {
    uint64_t v15 = *(void *)(a1 + 184);
    if (!v15)
    {
      if (!*(unsigned char *)(a1 + 104)) {
        goto LABEL_46;
      }
      goto LABEL_45;
    }
    uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 96))(v15);
  }
  if (*(unsigned char *)(a1 + 104))
  {
    if (v15)
    {
      uint64_t v15 = (*(uint64_t (**)(void))(**(void **)(a1 + 184) + 88))(*(void *)(a1 + 184));
      if ((v15 & 1) == 0)
      {
        uint64_t v16 = *(void *)(a1 + 168);
        *(void *)(v16 + 8) = 0;
        re::DynamicArray<re::TraceEntry>::clear(v16 + 16);
        **(unsigned char **)(a1 + 168) = 3;
        uint64_t v17 = *(void *)(a1 + 184);
        if (v17 && ((*(void (**)(uint64_t))(*(void *)v17 + 104))(v17), v18))
        {
          *(unsigned char *)(a1 + 216) = 1;
        }
        else if (*(unsigned char *)(a1 + 216))
        {
          *(unsigned char *)(a1 + 216) = 0;
        }
        re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear(a1 + 224);
        re::DynamicArray<re::TraceEntry>::clear(a1 + 272);
        uint64_t v15 = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 104))(*(void *)(a1 + 40));
        uint64_t v34 = *(void *)(v15 + 24);
        if (v34)
        {
          uint64_t v35 = *(uint64_t **)(v15 + 40);
          uint64_t v36 = 8 * v34;
          do
          {
            uint64_t v37 = *v35++;
            uint64_t v15 = (uint64_t)re::ecs2::StateRecorderSystem::recordAllEntities((re::ecs2::StateRecorderSystem *)a1, *(re::ecs2::Entity ****)(*(void *)(v37 + 104) + 352));
            v36 -= 8;
          }
          while (v36);
        }
      }
      goto LABEL_46;
    }
LABEL_45:
    uint64_t v15 = (uint64_t)re::ecs2::StateRecorderSystem::stopRecording((re *)a1);
    goto LABEL_46;
  }
  if (v15)
  {
    *(unsigned char *)(a1 + 104) = 1;
    int v19 = re::globalAllocators((re *)v15);
    uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v19[2] + 32))(v19[2], 56, 8);
    *(_OWORD *)uint64_t v20 = 0u;
    *(_OWORD *)(v20 + 16) = 0u;
    *(_OWORD *)(v20 + 32) = 0u;
    *(void *)(v20 + 48) = 0;
    *(void *)(a1 + 168) = v20;
    *(unsigned char *)uint64_t v20 = 1;
    uint64_t v21 = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 32))(*(void *)(a1 + 40));
    uint64_t v22 = re::ServiceLocator::serviceOrNull<re::NetworkSystem>(v21);
    if (v22)
    {
      uint64_t v24 = (_DWORD *)v22;
      buf.n128_u64[0] = a1;
      buf.n128_u64[1] = (unint64_t)re::ecs2::StateRecorderSystem::onEntityMetadataUpdated;
      uint64_t v103 = 0;
      float32x4_t v104 = re::Event<re::NetworkSystem,re::ecs2::Entity *>::createSubscription<re::ecs2::StateRecorderSystem>(re::ecs2::StateRecorderSystem *,REEventHandlerResult (re::ecs2::StateRecorderSystem::*)(re::NetworkSystem*,re::ecs2::Entity *))::{lambda(re::NetworkSystem*,re::Event<re::NetworkSystem,re::ecs2::Entity *>::Subscription const&,re::ecs2::Entity *&&)#1}::__invoke;
      re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription((_DWORD *)(v22 + 616), (uint64_t)&buf);
      buf.n128_u64[0] = a1;
      buf.n128_u64[1] = (unint64_t)re::ecs2::StateRecorderSystem::onLocalComponentDidUpdated;
      uint64_t v103 = 0;
      float32x4_t v104 = re::Event<re::NetworkSystem,re::ecs2::Component *>::createSubscription<re::ecs2::StateRecorderSystem>(re::ecs2::StateRecorderSystem *,REEventHandlerResult (re::ecs2::StateRecorderSystem::*)(re::NetworkSystem*,re::ecs2::Component *))::{lambda(re::NetworkSystem*,re::Event<re::NetworkSystem,re::ecs2::Component *>::Subscription const&,re::ecs2::Component *&&)#1}::__invoke;
      re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription(v24 + 220, (uint64_t)&buf);
      buf.n128_u64[0] = a1;
      buf.n128_u64[1] = (unint64_t)re::ecs2::StateRecorderSystem::onEntityUpdatedFromNetwork;
      uint64_t v103 = 0;
      float32x4_t v104 = re::Event<re::NetworkSystem,re::ecs2::Entity *>::createSubscription<re::ecs2::StateRecorderSystem>(re::ecs2::StateRecorderSystem *,REEventHandlerResult (re::ecs2::StateRecorderSystem::*)(re::NetworkSystem*,re::ecs2::Entity *))::{lambda(re::NetworkSystem*,re::Event<re::NetworkSystem,re::ecs2::Entity *>::Subscription const&,re::ecs2::Entity *&&)#1}::__invoke;
      re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription(v24 + 22, (uint64_t)&buf);
      buf.n128_u64[0] = a1;
      buf.n128_u64[1] = (unint64_t)re::ecs2::StateRecorderSystem::onComponentUpdatedFromNetwork;
      uint64_t v103 = 0;
      float32x4_t v104 = re::Event<re::NetworkSystem,re::ecs2::Component *>::createSubscription<re::ecs2::StateRecorderSystem>(re::ecs2::StateRecorderSystem *,REEventHandlerResult (re::ecs2::StateRecorderSystem::*)(re::NetworkSystem*,re::ecs2::Component *))::{lambda(re::NetworkSystem*,re::Event<re::NetworkSystem,re::ecs2::Component *>::Subscription const&,re::ecs2::Component *&&)#1}::__invoke;
      v23.n128_f64[0] = re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription(v24 + 88, (uint64_t)&buf);
    }
    uint64_t v25 = *(void *)(a1 + 184);
    if (v25)
    {
      uint64_t v26 = (re *)(*(uint64_t (**)(uint64_t, __n128))(*(void *)v25 + 104))(v25, v23);
      if (v27)
      {
        *(unsigned char *)(a1 + 216) = 1;
        uint64_t v28 = *re::ecsComponentsLogObjects(v26);
        if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
        {
          buf.n128_u16[0] = 0;
          _os_log_impl(&dword_233120000, v28, OS_LOG_TYPE_DEFAULT, "[StateRecorderSystem] Targeted mode started", (uint8_t *)&buf, 2u);
        }
      }
    }
    __n128 v29 = *(re::EventBus **)(a1 + 192);
    if (v29)
    {
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF84230, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26AF84230))
      {
        qword_26AF84228 = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"N2re4ecs227StateRecorderWillStartEventE" & 0x7FFFFFFFFFFFFFFFLL), v85);
        __cxa_guard_release(&qword_26AF84230);
      }
      re::EventBus::publish(v29, a1, qword_26AF84228, (uint64_t)&buf, 1uLL, 0);
    }
    uint64_t v15 = (*(uint64_t (**)(void, __n128))(**(void **)(a1 + 40) + 120))(*(void *)(a1 + 40), v23);
    if (v30)
    {
      int v31 = (id *)v15;
      uint64_t v32 = 8 * v30;
      do
      {
        uint64_t v15 = (uint64_t)objc_loadWeakRetained(v31);
        if (v15)
        {
          uint64_t v33 = (void *)v15;
          re::ecs2::StateRecorderSystem::startRecordingScene((re::ecs2::StateRecorderSystem *)a1, (re::EventBus **)(v15 - 8));
        }
        ++v31;
        v32 -= 8;
      }
      while (v32);
    }
  }
LABEL_46:
  if (!*(unsigned char *)(a1 + 104)) {
    goto LABEL_115;
  }
  uint64_t v38 = *(re::EventBus **)(a1 + 192);
  if (v38)
  {
    updated = re::EventBus::getTypeId<re::ecs2::StateRecorderWillUpdateEvent>();
    uint64_t v15 = re::EventBus::publish(v38, a1, (uint64_t)updated, (uint64_t)&buf, 1uLL, 0);
  }
  __int32 v40 = re::ecs2::ComponentTypeRegistry::instance((re::ecs2::ComponentTypeRegistry *)v15);
  uint64_t v41 = (uint64_t)v40;
  uint64_t v42 = *((void *)v40 + 3);
  if (v42 != *(void *)(a1 + 176)) {
    goto LABEL_52;
  }
  __int32 v40 = (char *)(*(uint64_t (**)(void))(**(void **)(a1 + 184) + 80))(*(void *)(a1 + 184));
  if ((v40 & 1) == 0)
  {
    uint64_t v42 = *(void *)(v41 + 24);
LABEL_52:
    *(void *)(a1 + 176) = v42;
    v43 = re::globalAllocators((re *)v40);
    uint64_t v44 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v43[2] + 32))(v43[2], 56, 8);
    *(_OWORD *)uint64_t v44 = 0u;
    *(_OWORD *)(v44 + 16) = 0u;
    *(_OWORD *)(v44 + 32) = 0u;
    *(void *)(v44 + 48) = 0;
    *(void *)unsigned int v99 = v44;
    *(unsigned char *)uint64_t v44 = 4;
    if (*(void *)(v41 + 24))
    {
      unint64_t v45 = 0;
      do
      {
        uint64_t v46 = re::ecs2::ComponentTypeRegistry::operator[](v41, v45);
        size_t v47 = strlen(*(const char **)(v46 + 32));
        buf.n128_u64[0] = *(void *)(v46 + 32);
        buf.n128_u64[1] = v47;
        re::DynamicArray<unsigned char>::DynamicArray((uint64_t)&v92, (uint64_t)&buf);
        __n128 buf = (__n128)(*(void *)(v46 + 24) >> 1);
        LOWORD(v103) = 1;
        re::DynamicArray<BOOL>::DynamicArray((uint64_t)&v104, &v92);
        __n128 v48 = re::DynamicArray<re::TraceEntry>::add((_anonymous_namespace_ *)(v44 + 16), &buf);
        if (v104 && v108) {
          (*(void (**)(__n128))(*(void *)v104 + 40))(v48);
        }
        if (v92 && v95) {
          (*(void (**)(__n128))(*(void *)v92 + 40))(v48);
        }
        ++v45;
      }
      while (v45 < *(void *)(v41 + 24));
    }
    double Current = CFAbsoluteTimeGetCurrent();
    uint64_t v13 = a1;
    if (Current < *(double *)(a1 + 112) + 0.0001) {
      double Current = *(double *)(a1 + 112) + 0.0001;
    }
    *(double *)(v44 + 8) = Current;
    *(double *)(a1 + 112) = Current;
    re::TraceDelta::sort((re::TraceDelta *)v44);
    re::TraceDelta::reduce((void *)v44);
    uint64_t v50 = *(void *)(a1 + 184);
    if (v50)
    {
      *(void *)unsigned int v99 = 0;
      buf.n128_u64[0] = v44;
      (*(void (**)(uint64_t, __n128 *))(*(void *)v50 + 16))(v50, &buf);
      std::unique_ptr<re::TraceDelta,re::REDeleter<re::TraceDelta>>::~unique_ptr[abi:nn180100]((re *)&buf);
    }
    std::unique_ptr<re::TraceDelta,re::REDeleter<re::TraceDelta>>::~unique_ptr[abi:nn180100]((re *)v99);
  }
  if (*(unsigned char *)(v13 + 216)) {
    re::ecs2::StateRecorderSystem::processDeferredEntries((re::ecs2::StateRecorderSystem *)v13);
  }
  double v51 = CFAbsoluteTimeGetCurrent();
  if (v51 < *(double *)(v13 + 112) + 0.0001) {
    double v51 = *(double *)(v13 + 112) + 0.0001;
  }
  char v52 = *(double **)(v13 + 168);
  v52[1] = v51;
  *(double *)(v13 + 112) = v51;
  re::TraceDelta::sort((re::TraceDelta *)v52);
  re::TraceDelta::reduce(*(void **)(v13 + 168));
  uint64_t v53 = (*(uint64_t (**)(void))(**(void **)(v13 + 40) + 120))(*(void *)(v13 + 40));
  if (v54)
  {
    long long v55 = (id *)v53;
    uint64_t v86 = (id *)(v53 + 8 * v54);
    do
    {
      uint64_t v56 = objc_loadWeakRetained(v55);
      if (v56)
      {
        unint64_t v57 = v56;
        uint64_t v58 = *(void *)(v13 + 168);
        uint64_t v59 = re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v90);
        float32x4_t v88 = re::ecs2::ComponentTypeRegistry::instance(v59);
        uint64_t v60 = *(void *)(v58 + 32);
        if (v60)
        {
          unint64_t v61 = (void **)(*(void *)(v58 + 48) + 56);
          for (uint64_t i = v60 << 6; i; i -= 64)
          {
            if (*((unsigned __int8 *)v61 - 40) - 1 <= 1)
            {
              buf.n128_u64[0] = (unint64_t)*(v61 - 7);
              uint64_t v63 = re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet((uint64_t)(v57 + 18), (uint64_t *)&buf);
              if (v63)
              {
                uint64_t v64 = *(void *)(v63 + 8);
                if (!v64) {
                  goto LABEL_98;
                }
              }
              else
              {
                uint64_t v64 = v57[12];
                if (*(void *)(v64 + 296) != buf.n128_u64[0]) {
                  goto LABEL_98;
                }
              }
              uint64_t v65 = (uint64_t)*(v61 - 6);
              if (v65)
              {
                long long v66 = (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentTypeRegistry::componentTypeWithHash((os_unfair_lock_s *)v88, v65);
                if (!v66) {
                  goto LABEL_98;
                }
                uint64_t v67 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v64 + 32), v66);
                if (!v67) {
                  goto LABEL_98;
                }
                uint64_t v68 = v67;
                uint64_t v69 = *(void *)(v13 + 208);
                *(void *)(v69 + 80) = 0;
                ++*(_DWORD *)(v69 + 88);
                buf.n128_u16[4] = 0;
                buf.n128_u64[0] = (unint64_t)&unk_26E714878;
                uint64_t v103 = v69 + 64;
                float32x4_t v104 = &unk_26E7148D0;
                uint64_t v105 = 0;
                float32x4_t v106 = &unk_26E6BE858;
                long long v107 = &v104;
                LOWORD(v108) = 0;
                uint64_t v109 = 0;
                uint64_t v110 = 0;
                uint64_t v111 = 0x2000;
                uint64_t v112 = 0;
                re::ecs2::serializeComponent<re::ecs2::ECSJSONSerializer>(v69 + 104, v67, (uint64_t)&buf, (uint64_t)&v92);
                if ((_BYTE)v92)
                {
                  buf.n128_u8[8] = 0;
                  google::protobuf::io::CopyingOutputStreamAdaptor::Flush((google::protobuf::io::CopyingOutputStreamAdaptor *)&v106);
                  re::DynamicArray<BOOL>::resize((uint64_t)(v61 - 4), *(void *)(v69 + 80));
                  memcpy(*v61, *(const void **)(v69 + 96), *(void *)(v69 + 80));
                }
                else
                {
                  unsigned int v76 = *re::ecsComponentsLogObjects(v70);
                  if (os_log_type_enabled(v76, OS_LOG_TYPE_ERROR))
                  {
                    uint64_t v78 = *(void *)((*(uint64_t (**)(uint64_t))(*(void *)v68 + 40))(v68) + 32);
                    uint64_t v79 = (char *)&v95 + 1;
                    if (v95) {
                      uint64_t v79 = v96;
                    }
                    *(_DWORD *)unsigned int v99 = 136315394;
                    *(void *)&v99[4] = v78;
                    __int16 v100 = 2080;
                    float32x4_t v101 = v79;
                    _os_log_error_impl(&dword_233120000, v76, OS_LOG_TYPE_ERROR, "[StateRecorderSystem] Failed to serialize %s. Details: %s", v99, 0x16u);
                  }
                }
                if (!(_BYTE)v92 && v94 && (v95 & 1) != 0) {
                  (*(void (**)(void))(*(void *)v94 + 40))();
                }
              }
              else
              {
                uint64_t v71 = *(void *)(v13 + 208);
                size_t v72 = strlen(*(const char **)(v64 + 280));
                buf.n128_u64[0] = *(void *)(v64 + 280);
                buf.n128_u64[1] = v72;
                re::DynamicString::operator=((re::DynamicString *)v71, (uint64_t)&buf);
                *(unsigned char *)(v71 + 40) = (*(unsigned char *)(v64 + 288) & 8) != 0;
                uint64_t v73 = *(void *)(v64 + 24);
                if (v73) {
                  uint64_t v73 = *(void *)(v73 + 296);
                }
                *(void *)(v71 + 32) = v73;
                *(void *)(v71 + 80) = 0;
                ++*(_DWORD *)(v71 + 88);
                buf.n128_u16[4] = 0;
                buf.n128_u64[0] = (unint64_t)&unk_26E714878;
                uint64_t v103 = v71 + 64;
                float32x4_t v104 = &unk_26E7148D0;
                uint64_t v105 = 0;
                float32x4_t v106 = &unk_26E6BE858;
                long long v107 = &v104;
                LOWORD(v108) = 0;
                uint64_t v109 = 0;
                uint64_t v110 = 0;
                uint64_t v111 = 0x2000;
                uint64_t v112 = 0;
                re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v91);
                re::TypeRegistry::typeInfo(*(re **)(v71 + 376), (re **)(v71 + 48), &v92);
                re::TypeInfo::TypeInfo((uint64_t)v99, (uint64_t)&v93);
                uint64_t v74 = re::ecs2::serializeObject<re::ecs2::ECSJSONSerializer>(v71 + 104, v71, (uint64_t)v99, (uint64_t)&buf, (uint64_t)&v92);
                if ((_BYTE)v92)
                {
                  buf.n128_u8[8] = 0;
                  google::protobuf::io::CopyingOutputStreamAdaptor::Flush((google::protobuf::io::CopyingOutputStreamAdaptor *)&v106);
                  re::DynamicArray<BOOL>::resize((uint64_t)(v61 - 4), *(void *)(v71 + 80));
                  memcpy(*v61, *(const void **)(v71 + 96), *(void *)(v71 + 80));
                }
                else
                {
                  uint64_t v75 = *re::ecsComponentsLogObjects(v74);
                  if (os_log_type_enabled(v75, OS_LOG_TYPE_ERROR))
                  {
                    uint64_t v77 = (char *)&v95 + 1;
                    if (v95) {
                      uint64_t v77 = v96;
                    }
                    *(_DWORD *)long long v97 = 136315138;
                    long long v98 = v77;
                    _os_log_error_impl(&dword_233120000, v75, OS_LOG_TYPE_ERROR, "[StateRecorderSystem] Failed to serialize entity state. Details: %s", v97, 0xCu);
                  }
                }
                if (!(_BYTE)v92 && v94 && (v95 & 1) != 0) {
                  (*(void (**)(void))(*(void *)v94 + 40))();
                }
                re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v91);
              }
              re::DynamicArrayBufferedOutputStream::~DynamicArrayBufferedOutputStream((re::DynamicArrayBufferedOutputStream *)&buf);
              uint64_t v13 = a1;
            }
LABEL_98:
            v61 += 8;
          }
        }
        re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v90);
      }
      ++v55;
    }
    while (v55 != v86);
  }
  uint64_t v80 = *(void *)(v13 + 184);
  uint64_t v81 = *(void *)(v13 + 168);
  if (v80)
  {
    buf.n128_u64[0] = *(void *)(v13 + 168);
    (*(void (**)(uint64_t, __n128 *))(*(void *)v80 + 16))(v80, &buf);
    uint64_t v82 = std::unique_ptr<re::TraceDelta,re::REDeleter<re::TraceDelta>>::~unique_ptr[abi:nn180100]((re *)&buf);
    float32x2_t v83 = re::globalAllocators(v82);
    uint64_t v84 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v83[2] + 32))(v83[2], 56, 8);
    *(_OWORD *)uint64_t v84 = 0u;
    *(_OWORD *)(v84 + 16) = 0u;
    *(_OWORD *)(v84 + 32) = 0u;
    *(void *)(v84 + 48) = 0;
    *(void *)(v13 + 168) = v84;
  }
  else
  {
    *(void *)(v81 + 8) = 0;
    re::DynamicArray<re::TraceEntry>::clear(v81 + 16);
    uint64_t v84 = *(void *)(v13 + 168);
  }
  *(unsigned char *)uint64_t v84 = 1;
LABEL_115:
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v89);
}

__n128 re::DynamicArray<re::TraceEntry>::add(_anonymous_namespace_ *this, __n128 *a2)
{
  unint64_t v4 = *((void *)this + 2);
  if (v4 >= *((void *)this + 1))
  {
    re::DynamicArray<re::TraceEntry>::growCapacity(this, v4 + 1);
    unint64_t v4 = *((void *)this + 2);
  }
  uint64_t v5 = (__n128 *)(*((void *)this + 4) + (v4 << 6));
  __n128 result = *a2;
  v5[1].n128_u16[0] = a2[1].n128_u16[0];
  *uint64_t v5 = result;
  v5[3].n128_u64[1] = 0;
  v5[2].n128_u64[0] = 0;
  v5[2].n128_u64[1] = 0;
  v5[1].n128_u64[1] = 0;
  v5[3].n128_u32[0] = 0;
  unint64_t v7 = a2[2].n128_u64[0];
  v5[1].n128_u64[1] = a2[1].n128_u64[1];
  v5[2].n128_u64[0] = v7;
  a2[1].n128_u64[1] = 0;
  a2[2].n128_u64[0] = 0;
  unint64_t v8 = v5[2].n128_u64[1];
  v5[2].n128_u64[1] = a2[2].n128_u64[1];
  a2[2].n128_u64[1] = v8;
  unint64_t v9 = v5[3].n128_u64[1];
  v5[3].n128_u64[1] = a2[3].n128_u64[1];
  a2[3].n128_u64[1] = v9;
  ++a2[3].n128_u32[0];
  ++v5[3].n128_u32[0];
  ++*((void *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

uint64_t re::ecs2::StateRecorderSystem::recordEntity(re::ecs2::StateRecorderSystem *this, re::ecs2::Entity *a2)
{
  uint64_t result = (uint64_t)re::ecs2::StateRecorderSystem::logEntityAdded(this, a2, 1);
  uint64_t v5 = *((void *)a2 + 7);
  if (v5)
  {
    uint64_t v6 = (void **)*((void *)a2 + 9);
    uint64_t v7 = 8 * v5;
    do
    {
      unint64_t v8 = *v6++;
      uint64_t result = re::ecs2::StateRecorderSystem::logComponentAdded((uint64_t)this, v8);
      v7 -= 8;
    }
    while (v7);
  }
  return result;
}

uint64_t re::ecs2::StateRecorderSystem::recordAllDescendants(re::ecs2::StateRecorderSystem *this, re::ecs2::Entity ***a2)
{
  uint64_t result = re::ecs2::StateRecorderSystem::recordEntity(this, (re::ecs2::Entity *)a2);
  uint64_t v5 = a2[41];
  if (v5)
  {
    uint64_t v6 = a2[43];
    uint64_t v7 = 8 * (void)v5;
    do
    {
      unint64_t v8 = *v6++;
      uint64_t result = re::ecs2::StateRecorderSystem::recordAllDescendants(this, v8);
      v7 -= 8;
    }
    while (v7);
  }
  return result;
}

unsigned char *re::ecs2::StateRecorderSystem::logEntityAdded(unsigned char *this, re::ecs2::Entity *a2, char a3)
{
  uint64_t v5 = this;
  if (this[216])
  {
    this = (unsigned char *)re::ecs2::StateRecorderSystem::shouldEntityBeInAppEntitySet((re::ecs2::StateRecorderSystem *)this, a2);
    if (!this) {
      return this;
    }
    v8.n128_u64[0] = *((void *)a2 + 37);
    this = (unsigned char *)re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew((uint64_t)(v5 + 224), (uint64_t *)&v8);
  }
  uint64_t v6 = *((void *)v5 + 21);
  if (v6)
  {
    __n128 v8 = (__n128)*((unint64_t *)a2 + 37);
    char v9 = 1;
    char v10 = a3;
    uint64_t v15 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v11 = 0;
    int v14 = 0;
    __n128 v7 = re::DynamicArray<re::TraceEntry>::add((_anonymous_namespace_ *)(v6 + 16), &v8);
    this = v11;
    if (v11)
    {
      if (v15) {
        return (unsigned char *)(*(uint64_t (**)(__n128))(*(void *)v11 + 40))(v7);
      }
    }
  }
  return this;
}

uint64_t re::ecs2::StateRecorderSystem::logComponentAdded(uint64_t a1, void *a2)
{
  *(void *)&long long v8 = *(void *)(a2[2] + 296);
  uint64_t result = (*(uint64_t (**)(void *))(*a2 + 40))(a2);
  *((void *)&v8 + 1) = *(void *)(result + 24) >> 1;
  __int16 v9 = 257;
  uint64_t v14 = 0;
  int v13 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v10 = 0;
  if (*(unsigned char *)(a1 + 216)
    && (uint64_t v7 = *(void *)(a2[2] + 296),
        uint64_t result = re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::contains(a1 + 224, &v7), (result & 1) == 0))
  {
    uint64_t v6 = (_anonymous_namespace_ *)(a1 + 272);
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 168);
    if (!v5) {
      return result;
    }
    uint64_t v6 = (_anonymous_namespace_ *)(v5 + 16);
  }
  re::DynamicArray<re::TraceEntry>::add(v6, &v8);
  uint64_t result = v10;
  if (v10)
  {
    if (v14) {
      return (*(uint64_t (**)(void))(*(void *)v10 + 40))();
    }
  }
  return result;
}

uint64_t re::ecs2::StateRecorderSystem::logComponentUpdated(uint64_t result, void *a2, char a3)
{
  uint64_t v3 = a2[2];
  if (v3)
  {
    uint64_t v6 = result;
    if (!*(unsigned char *)(result + 216)
      || (v10.n128_u64[0] = *(void *)(v3 + 296),
          uint64_t result = re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::contains(result + 224, (uint64_t *)&v10), (result & 1) != 0))
    {
      uint64_t v7 = *(void *)(v6 + 168);
      if (v7)
      {
        long long v8 = (_anonymous_namespace_ *)(v7 + 16);
        v10.n128_u64[0] = *(void *)(a2[2] + 296);
        v10.n128_u64[1] = *(void *)((*(uint64_t (**)(void *))(*a2 + 40))(a2) + 24) >> 1;
        char v11 = 2;
        char v12 = a3;
        uint64_t v17 = 0;
        int v16 = 0;
        uint64_t v14 = 0;
        uint64_t v15 = 0;
        uint64_t v13 = 0;
        __n128 v9 = re::DynamicArray<re::TraceEntry>::add(v8, &v10);
        uint64_t result = v13;
        if (v13)
        {
          if (v17) {
            return (*(uint64_t (**)(__n128))(*(void *)v13 + 40))(v9);
          }
        }
      }
    }
  }
  return result;
}

uint64_t re::DynamicArray<re::TraceEntry>::add(_anonymous_namespace_ *this, long long *a2)
{
  unint64_t v4 = *((void *)this + 2);
  if (v4 >= *((void *)this + 1))
  {
    re::DynamicArray<re::TraceEntry>::growCapacity(this, v4 + 1);
    unint64_t v4 = *((void *)this + 2);
  }
  uint64_t v5 = *((void *)this + 4) + (v4 << 6);
  long long v6 = *a2;
  *(_WORD *)(v5 + 16) = *((_WORD *)a2 + 8);
  *(_OWORD *)uint64_t v5 = v6;
  uint64_t result = re::DynamicArray<BOOL>::DynamicArray(v5 + 24, (uint64_t *)a2 + 3);
  ++*((void *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

uint64_t re::ecs2::StateRecorderSystem::logEntityUpdated(uint64_t result, uint64_t a2, char a3)
{
  uint64_t v5 = result;
  if (!*(unsigned char *)(result + 216)
    || (v8.n128_u64[0] = *(void *)(a2 + 296),
        uint64_t result = re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::contains(result + 224, (uint64_t *)&v8), (result & 1) != 0))
  {
    uint64_t v6 = *(void *)(v5 + 168);
    if (v6)
    {
      __n128 v8 = (__n128)*(unint64_t *)(a2 + 296);
      char v9 = 2;
      char v10 = a3;
      uint64_t v15 = 0;
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      uint64_t v11 = 0;
      int v14 = 0;
      __n128 v7 = re::DynamicArray<re::TraceEntry>::add((_anonymous_namespace_ *)(v6 + 16), &v8);
      uint64_t result = v11;
      if (v11)
      {
        if (v15) {
          return (*(uint64_t (**)(__n128))(*(void *)v11 + 40))(v7);
        }
      }
    }
  }
  return result;
}

uint64_t re::ecs2::StateRecorderSystem::logEntityRemoved(uint64_t a1, uint64_t a2)
{
  long long v6 = (unint64_t)a2;
  __int16 v7 = 259;
  uint64_t v12 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v8 = 0;
  int v11 = 0;
  if (*(unsigned char *)(a1 + 216))
  {
    uint64_t v5 = a2;
    if (!re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::contains(a1 + 224, &v5))goto LABEL_6; {
    re::DynamicArray<re::TraceEntry>::add((_anonymous_namespace_ *)(a1 + 272), &v6);
    }
  }
  uint64_t v3 = *(void *)(a1 + 168);
  if (v3) {
    re::DynamicArray<re::TraceEntry>::add((_anonymous_namespace_ *)(v3 + 16), &v6);
  }
LABEL_6:
  uint64_t result = v8;
  if (v8)
  {
    if (v12) {
      return (*(uint64_t (**)(void))(*(void *)v8 + 40))();
    }
  }
  return result;
}

void *re::ecs2::allocInfo_StateRecorderSystem(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF84210, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF84210))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF842D8, "StateRecorderSystem");
    __cxa_guard_release(&qword_26AF84210);
  }
  return &unk_26AF842D8;
}

void re::ecs2::initInfo_StateRecorderSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v5[0] = 0x8307BF99908B0EBCLL;
  v5[1] = "StateRecorderSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0x13800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 8) = &re::ecs2::initInfo_StateRecorderSystem(re::IntrospectionBase *)::structureAttributes;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::StateRecorderSystem>;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::StateRecorderSystem>;
  *((void *)this + 11) = re::internal::defaultRetain<re::ecs2::StateRecorderSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 12) = re::internal::defaultRelease<re::ecs2::StateRecorderSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::StateRecorderSystem>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::StateRecorderSystem>;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

double re::internal::defaultConstruct<re::ecs2::StateRecorderSystem>(int a1, int a2, re::ecs2::StateRecorderSystem *this)
{
  return re::ecs2::StateRecorderSystem::StateRecorderSystem(this);
}

void *re::internal::defaultDestruct<re::ecs2::StateRecorderSystem>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  re::DynamicArray<re::TraceEntry>::deinit((uint64_t)(a3 + 34));
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit(a3 + 28);
  re::HashTable<re::ecs2::Scene *,re::DynamicArray<RESubscriptionHandle>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit(a3 + 15);
  *a3 = (uint64_t)&unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultDestructV2<re::ecs2::StateRecorderSystem>(uint64_t *a1)
{
  re::DynamicArray<re::TraceEntry>::deinit((uint64_t)(a1 + 34));
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit(a1 + 28);
  re::HashTable<re::ecs2::Scene *,re::DynamicArray<RESubscriptionHandle>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit(a1 + 15);
  *a1 = (uint64_t)&unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_StateRecorderSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"StateRecorderSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_StateRecorderSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_StateRecorderSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::StateRecorderSystem>, this);
}

void re::ecs2::StateRecorderSystem::~StateRecorderSystem(re::ecs2::StateRecorderSystem *this)
{
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  re::DynamicArray<re::TraceEntry>::deinit((uint64_t)this + 272);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 28);
  re::HashTable<re::ecs2::Scene *,re::DynamicArray<RESubscriptionHandle>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 15);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::StateRecorderSystem::typeInfo(re::ecs2::StateRecorderSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"StateRecorderSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_StateRecorderSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_StateRecorderSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::StateRecorderSystem>, 0);
}

void re::internal::CallableMemFn<re::ecs2::StateRecorderSystem,REEventHandlerResult (re::ecs2::StateRecorderSystem::*)(re::ecs2::Entity *,RESceneEntityDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidAddEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::StateRecorderSystem,REEventHandlerResult (re::ecs2::StateRecorderSystem::*)(re::ecs2::Entity *,RESceneEntityDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidAddEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  long long v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::StateRecorderSystem,REEventHandlerResult (re::ecs2::StateRecorderSystem::*)(re::ecs2::Entity *,RESceneEntityDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6F85B8;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::StateRecorderSystem,REEventHandlerResult (re::ecs2::StateRecorderSystem::*)(re::ecs2::Entity *,RESceneEntityDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6F85B8;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::StateRecorderSystem,REEventHandlerResult (re::ecs2::StateRecorderSystem::*)(re::ecs2::Entity *,RESceneEntityDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidAddEvent const&)>::size()
{
  return 32;
}

uint64_t (***re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidAddEvent const&)>::destroyCallable(uint64_t a1))(void)
{
  uint64_t result = *(uint64_t (****)(void))(a1 + 32);
  if (result)
  {
    uint64_t result = (uint64_t (***)(void))(**result)(result);
    if (*(void *)(a1 + 32) != a1) {
      uint64_t result = (uint64_t (***)(void))(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24));
    }
    *(void *)(a1 + 32) = 0;
  }
  return result;
}

void re::internal::CallableMemFn<re::ecs2::StateRecorderSystem,REEventHandlerResult (re::ecs2::StateRecorderSystem::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::StateRecorderSystem,REEventHandlerResult (re::ecs2::StateRecorderSystem::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  long long v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::StateRecorderSystem,REEventHandlerResult (re::ecs2::StateRecorderSystem::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6F8620;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::StateRecorderSystem,REEventHandlerResult (re::ecs2::StateRecorderSystem::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6F8620;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::StateRecorderSystem,REEventHandlerResult (re::ecs2::StateRecorderSystem::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::StateRecorderSystem,REEventHandlerResult (re::ecs2::StateRecorderSystem::*)(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::StateRecorderSystem,REEventHandlerResult (re::ecs2::StateRecorderSystem::*)(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  long long v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::StateRecorderSystem,REEventHandlerResult (re::ecs2::StateRecorderSystem::*)(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6F8678;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::StateRecorderSystem,REEventHandlerResult (re::ecs2::StateRecorderSystem::*)(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6F8678;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::StateRecorderSystem,REEventHandlerResult (re::ecs2::StateRecorderSystem::*)(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::StateRecorderSystem,REEventHandlerResult (re::ecs2::StateRecorderSystem::*)(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::StateRecorderSystem,REEventHandlerResult (re::ecs2::StateRecorderSystem::*)(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  long long v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::StateRecorderSystem,REEventHandlerResult (re::ecs2::StateRecorderSystem::*)(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6F86D0;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::StateRecorderSystem,REEventHandlerResult (re::ecs2::StateRecorderSystem::*)(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6F86D0;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::StateRecorderSystem,REEventHandlerResult (re::ecs2::StateRecorderSystem::*)(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::StateRecorderSystem,REEventHandlerResult (re::ecs2::StateRecorderSystem::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::StateRecorderSystem,REEventHandlerResult (re::ecs2::StateRecorderSystem::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  long long v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::StateRecorderSystem,REEventHandlerResult (re::ecs2::StateRecorderSystem::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6F8728;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::StateRecorderSystem,REEventHandlerResult (re::ecs2::StateRecorderSystem::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6F8728;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::StateRecorderSystem,REEventHandlerResult (re::ecs2::StateRecorderSystem::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::StateRecorderSystem,REEventHandlerResult (re::ecs2::StateRecorderSystem::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::StateRecorderSystem,REEventHandlerResult (re::ecs2::StateRecorderSystem::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  long long v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::StateRecorderSystem,REEventHandlerResult (re::ecs2::StateRecorderSystem::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6F8780;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::StateRecorderSystem,REEventHandlerResult (re::ecs2::StateRecorderSystem::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6F8780;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::StateRecorderSystem,REEventHandlerResult (re::ecs2::StateRecorderSystem::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::StateRecorderSystem,REEventHandlerResult (re::ecs2::StateRecorderSystem::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::StateRecorderSystem,REEventHandlerResult (re::ecs2::StateRecorderSystem::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  long long v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::StateRecorderSystem,REEventHandlerResult (re::ecs2::StateRecorderSystem::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6F87D8;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::StateRecorderSystem,REEventHandlerResult (re::ecs2::StateRecorderSystem::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6F87D8;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::StateRecorderSystem,REEventHandlerResult (re::ecs2::StateRecorderSystem::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::StateRecorderSystem,REEventHandlerResult (re::ecs2::StateRecorderSystem::*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::StateRecorderSystem,REEventHandlerResult (re::ecs2::StateRecorderSystem::*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  long long v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::StateRecorderSystem,REEventHandlerResult (re::ecs2::StateRecorderSystem::*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6F8830;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::StateRecorderSystem,REEventHandlerResult (re::ecs2::StateRecorderSystem::*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6F8830;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::StateRecorderSystem,REEventHandlerResult (re::ecs2::StateRecorderSystem::*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::size()
{
  return 32;
}

uint64_t re::DynamicArray<re::TraceEntry>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = v4 << 6;
        uint64_t v6 = v3 + 24;
        do
        {
          re::DynamicArray<unsigned long>::deinit(v6);
          v6 += 64;
          v5 -= 64;
        }
        while (v5);
        uint64_t result = *(void *)a1;
        uint64_t v3 = *(void *)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::Event<re::NetworkSystem,re::ecs2::Entity *>::createSubscription<re::ecs2::StateRecorderSystem>(re::ecs2::StateRecorderSystem *,REEventHandlerResult (re::ecs2::StateRecorderSystem::*)(re::NetworkSystem*,re::ecs2::Entity *))::{lambda(re::NetworkSystem*,re::Event<re::NetworkSystem,re::ecs2::Entity *>::Subscription const&,re::ecs2::Entity *&&)#1}::__invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = (uint64_t (*)(void *, uint64_t, void))a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = (void *)(*a2 + (v5 >> 1));
  if (v5) {
    uint64_t v4 = *(uint64_t (**)(void *, uint64_t, void))(*v6 + v4);
  }
  return v4(v6, a1, *a3);
}

uint64_t re::Event<re::NetworkSystem,re::ecs2::Component *>::createSubscription<re::ecs2::StateRecorderSystem>(re::ecs2::StateRecorderSystem *,REEventHandlerResult (re::ecs2::StateRecorderSystem::*)(re::NetworkSystem*,re::ecs2::Component *))::{lambda(re::NetworkSystem*,re::Event<re::NetworkSystem,re::ecs2::Component *>::Subscription const&,re::ecs2::Component *&&)#1}::__invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = (uint64_t (*)(void *, uint64_t, void))a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = (void *)(*a2 + (v5 >> 1));
  if (v5) {
    uint64_t v4 = *(uint64_t (**)(void *, uint64_t, void))(*v6 + v4);
  }
  return v4(v6, a1, *a3);
}

uint64_t re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityDidAddEvent>(re::EventBus *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  v14[8] = *MEMORY[0x263EF8340];
  Type = re::EventBus::getTypeId<RESceneEntityDidAddEvent>();
  unint64_t EventInfo = re::EventBus::addOrGetEventInfo(a1, (uint64_t)Type);
  re::EventBus::createHandler<re::ecs2::Entity,RESceneEntityDidAddEvent>(a3, a5, v14);
  uint64_t v12 = re::EventBus::EventInfo::addSubscription(EventInfo, (uint64_t)v14, a2, a4);
  re::FunctionBase<48ul,REEventHandlerResult ()(void *,void const*)>::destroyCallable((uint64_t)v14);
  return v12;
}

uint64_t (***re::EventBus::createHandler<re::ecs2::Entity,RESceneEntityDidAddEvent>@<X0>(uint64_t a1@<X2>, char a2@<W4>, void *a3@<X8>))(void)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v9 = *(void *)(a1 + 24);
  uint64_t v10 = 0;
  if (a2)
  {
    uint64_t v6 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidAddEvent const&)>::operator=<24ul>((uint64_t)v8, a1);
    a3[6] = re::globalAllocators(v6)[2];
    a3[7] = 0;
    uint64_t v5 = &unk_26E6F8888;
  }
  else
  {
    uint64_t v4 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidAddEvent const&)>::operator=<24ul>((uint64_t)v8, a1);
    a3[6] = re::globalAllocators(v4)[2];
    a3[7] = 0;
    uint64_t v5 = &unk_26E6F88E0;
  }
  *a3 = v5;
  a3[4] = v9;
  a3[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidAddEvent const&)>::operator=<24ul>((uint64_t)(a3 + 1), (uint64_t)v8);
  a3[7] = a3;
  return re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidAddEvent const&)>::destroyCallable((uint64_t)v8);
}

char *re::EventBus::getTypeId<RESceneEntityDidAddEvent>()
{
  v0 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
  {
    v0 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
    if (v2)
    {
      re::EventBus::getTypeId<RESceneEntityDidAddEvent>(void)const::s_id = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"24RESceneEntityDidAddEvent" & 0x7FFFFFFFFFFFFFFFLL), v3);
      v0 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
    }
  }
  return v0[313];
}

void *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,RESceneEntityDidAddEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidAddEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#1},REEventHandlerResult ()(void *,void const*)>::~Callable(void *a1)
{
  *a1 = &unk_26E6F8888;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidAddEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  return a1;
}

void re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,RESceneEntityDidAddEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidAddEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#1},REEventHandlerResult ()(void *,void const*)>::~Callable(void *a1)
{
  *a1 = &unk_26E6F8888;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidAddEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,RESceneEntityDidAddEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidAddEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#1},REEventHandlerResult ()(void *,void const*)>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  uint64_t v5 = *a2;
  (*(void (**)(void, uint64_t *, uint64_t))(**(void **)(a1 + 40) + 16))(*(void *)(a1 + 40), &v5, v3);
  return 1;
}

void *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,RESceneEntityDidAddEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidAddEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#1},REEventHandlerResult ()(void *,void const*)>::cloneInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E6F8888;
  a2[4] = *(void *)(a1 + 32);
  a2[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidAddEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

void *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,RESceneEntityDidAddEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidAddEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#1},REEventHandlerResult ()(void *,void const*)>::moveInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E6F8888;
  a2[4] = *(void *)(a1 + 32);
  a2[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidAddEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,RESceneEntityDidAddEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidAddEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#1},REEventHandlerResult ()(void *,void const*)>::size()
{
  return 48;
}

void *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,RESceneEntityDidAddEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidAddEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::~Callable(void *a1)
{
  *a1 = &unk_26E6F88E0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidAddEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  return a1;
}

void re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,RESceneEntityDidAddEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidAddEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::~Callable(void *a1)
{
  *a1 = &unk_26E6F88E0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidAddEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,RESceneEntityDidAddEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidAddEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  uint64_t v5 = *a2;
  return (*(uint64_t (**)(void, uint64_t *, uint64_t))(**(void **)(a1 + 40) + 16))(*(void *)(a1 + 40), &v5, v3);
}

void *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,RESceneEntityDidAddEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidAddEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::cloneInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E6F88E0;
  a2[4] = *(void *)(a1 + 32);
  a2[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidAddEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

void *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,RESceneEntityDidAddEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidAddEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::moveInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E6F88E0;
  a2[4] = *(void *)(a1 + 32);
  a2[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidAddEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,RESceneEntityDidAddEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidAddEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::size()
{
  return 48;
}

uint64_t re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidAddEvent const&)>::operator=<24ul>(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidAddEvent const&)>::destroyCallable(a1);
    uint64_t v4 = *(void *)(a2 + 32);
    if (v4)
    {
      unint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4);
      uint64_t v6 = a1;
      if (v5 >= 0x19)
      {
        unint64_t v7 = v5;
        uint64_t v8 = *(void *)(a1 + 24);
        if (v8) {
          uint64_t v6 = (*(uint64_t (**)(uint64_t, unint64_t, void))(*(void *)v8 + 32))(v8, v7, 0);
        }
        else {
          uint64_t v6 = 0;
        }
      }
      *(void *)(a1 + 32) = v6;
      (*(void (**)(void))(**(void **)(a2 + 32) + 24))(*(void *)(a2 + 32));
    }
  }
  return a1;
}

uint64_t re::HashTable<re::ecs2::Scene *,re::DynamicArray<RESubscriptionHandle>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::ecs2::Scene *,re::DynamicArray<RESubscriptionHandle>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + (v9 << 6) + 8);
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + (v9 << 6) + 8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v11 + (v9 << 6) + 8) = v12 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + (v9 << 6) + 8) = *(_DWORD *)(*(void *)(a1 + 16) + (v9 << 6) + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + (v9 << 6)) = a3;
  *(void *)(*(void *)(a1 + 16) + (v9 << 6) + 16) = *a4;
  uint64_t v13 = *(void *)(a1 + 16) + (v9 << 6);
  *(void *)(v13 + 56) = 0;
  *(_DWORD *)(v13 + 48) = 0;
  *(void *)(v13 + 32) = 0;
  *(void *)(v13 + 40) = 0;
  *(void *)(v13 + 24) = 0;
  uint64_t v14 = *(void *)(a5 + 8);
  *(void *)(v13 + 24) = *(void *)a5;
  *(void *)(v13 + 32) = v14;
  *(void *)a5 = 0;
  *(void *)(a5 + 8) = 0;
  uint64_t v15 = *(void *)(v13 + 40);
  *(void *)(v13 + 40) = *(void *)(a5 + 16);
  *(void *)(a5 + 16) = v15;
  uint64_t v16 = *(void *)(v13 + 56);
  *(void *)(v13 + 56) = *(void *)(a5 + 32);
  *(void *)(a5 + 32) = v16;
  ++*(_DWORD *)(a5 + 24);
  ++*(_DWORD *)(v13 + 48);
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<re::ecs2::Scene *,re::DynamicArray<RESubscriptionHandle>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(void *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<re::ecs2::Scene *,re::DynamicArray<RESubscriptionHandle>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::init((uint64_t)v13, v4, a2);
      long long v5 = *(_OWORD *)v13;
      *(_OWORD *)uint64_t v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      uint64_t v6 = *(void *)&v13[16];
      *(void *)&v13[16] = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = v6;
      long long v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      unsigned int v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      unsigned int v9 = v7;
      if (v7)
      {
        uint64_t v10 = 0;
        unint64_t v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(void *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashTable<re::ecs2::Scene *,re::DynamicArray<RESubscriptionHandle>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::addAsMove(a1, *(void *)(*(void *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(*(void *)&v13[16] + v10), *(void *)&v13[16] + v10 + 16, *(void *)&v13[16] + v10 + 24);
            unsigned int v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 64;
        }
        while (v11 < v9);
      }
      re::HashTable<re::ecs2::Scene *,re::DynamicArray<RESubscriptionHandle>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2) {
      signed int v12 = a2;
    }
    else {
      signed int v12 = 3;
    }
  }
}

void re::HashTable<re::ecs2::Scene *,re::DynamicArray<RESubscriptionHandle>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  long long v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    unsigned int v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    long long v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      long long v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  signed int v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + (v10 << 6), 16);
  if (v12)
  {
    uint64_t v14 = v12;
    *(void *)(a1 + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &memset_pattern_9, 4 * v10);
    }
    *(void *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

char *re::EventBus::getTypeId<re::ecs2::StateRecorderWillUpdateEvent>()
{
  v0 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
  {
    v0 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
    if (v2)
    {
      re::EventBus::getTypeId<re::ecs2::StateRecorderWillUpdateEvent>(void)const::s_id = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"N2re4ecs228StateRecorderWillUpdateEventE" & 0x7FFFFFFFFFFFFFFFLL), v3);
      v0 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
    }
  }
  return v0[311];
}

re *std::unique_ptr<re::TraceDelta,re::REDeleter<re::TraceDelta>>::~unique_ptr[abi:nn180100](re *a1)
{
  uint64_t v2 = *(void *)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    uint64_t v3 = re::globalAllocators(a1)[2];
    re::DynamicArray<re::TraceEntry>::deinit(v2 + 16);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v3 + 40))(v3, v2);
  }
  return a1;
}

uint64_t re::DynamicArray<unsigned char>::DynamicArray(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  unint64_t v3 = *(void *)(a2 + 8);
  if (v3)
  {
    re::DynamicArray<BOOL>::setCapacity((void *)a1, v3);
    ++*(_DWORD *)(a1 + 24);
    re::DynamicArray<REFrameAnalysisBottleneck>::copy((void *)a1, 0, *(char **)a2, *(void *)(a2 + 8));
  }
  return a1;
}

void *re::DynamicArray<re::TraceEntry>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    unint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::TraceEntry>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::TraceEntry>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void *re::DynamicArray<re::TraceEntry>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      uint64_t result = (void *)*result;
      if (!*v5)
      {
        uint64_t result = (void *)re::DynamicArray<re::TraceEntry>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (a2 >> 58)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 64, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          unint64_t v2 = a2 << 6;
          uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, a2 << 6, 8);
          if (result)
          {
            unint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        uint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      unint64_t v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = v8 + (v9 << 6);
        uint64_t v11 = v7;
        do
        {
          long long v12 = *(_OWORD *)v8;
          *((_WORD *)v11 + 8) = *(_WORD *)(v8 + 16);
          *(_OWORD *)uint64_t v11 = v12;
          v11[7] = 0;
          v11[4] = 0;
          v11[5] = 0;
          v11[3] = 0;
          *((_DWORD *)v11 + 12) = 0;
          uint64_t v13 = *(void *)(v8 + 24);
          uint64_t v14 = *(void *)(v8 + 32);
          uint64_t v15 = v8 + 24;
          v11[3] = v13;
          v11[4] = v14;
          *(void *)uint64_t v15 = 0;
          *(void *)(v15 + 8) = 0;
          uint64_t v16 = v11[5];
          v11[5] = *(void *)(v15 + 16);
          *(void *)(v15 + 16) = v16;
          uint64_t v17 = v11[7];
          v11[7] = *(void *)(v15 + 32);
          *(void *)(v15 + 32) = v17;
          ++*(_DWORD *)(v15 + 24);
          ++*((_DWORD *)v11 + 12);
          re::DynamicArray<unsigned long>::deinit(v15);
          uint64_t v8 = v15 + 40;
          v11 += 8;
        }
        while (v8 != v10);
        uint64_t v8 = v5[4];
      }
      uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

id re::internal::defaultRetain<re::ecs2::StateRecorderSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::StateRecorderSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
}

void ___ZN2re4ecs212ShadowHelper32forceEnableMeshProjectiveShadowsEv_block_invoke(uint64_t a1, const char *a2)
{
  re::Defaults::BOOLValue((re::Defaults *)"forceEnableMeshProjectiveShadows", a2, &v5);
  if (v5)
  {
    re::ecs2::ShadowHelper::forceEnableMeshProjectiveShadows(void)::g_forceEnableMeshProjectiveShadows = v6;
    if (v6)
    {
      uint64_t v3 = *re::ecsComponentsLogObjects(v2);
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)unint64_t v4 = 0;
        _os_log_impl(&dword_233120000, v3, OS_LOG_TYPE_DEFAULT, "Mesh Projective Shadows have been force-enabled. Planar Projective Shadows will be disabled.", v4, 2u);
      }
    }
  }
}

void ___ZN2re4ecs212ShadowHelper25enableShadowTechniqueLogsEv_block_invoke(uint64_t a1, const char *a2)
{
  re::Defaults::BOOLValue((re::Defaults *)"Shadow.LogTechnique", a2, v2);
  if (v2[0]) {
    re::ecs2::ShadowHelper::enableShadowTechniqueLogs(void)::g_enableShadowTechniqueLogs = v2[1];
  }
}

void re::ecs2::ShadowHelper::findShadowReceiverAnchor(uint64_t a1@<X0>, uint64_t a2@<X1>, const re::ecs2::ComponentTypeBase *a3@<X2>, int a4@<W3>, char *a5@<X8>)
{
  (*(void (**)(uint64_t *__return_ptr))(**(void **)a2 + 8))(&v19);
  if ((_BYTE)v19) {
    uint64_t v10 = v20;
  }
  else {
    uint64_t v10 = 0;
  }
  if (a1)
  {
    char v11 = 0;
    while (1)
    {
      if (a3
        && (v11 & 1) != 0
        && re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), a3))
      {
        goto LABEL_29;
      }
      if (a4 == 2) {
        goto LABEL_16;
      }
      if (a4 != 1) {
        break;
      }
      uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AnchorShadowMarker,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
      if (v15)
      {
LABEL_31:
        goto LABEL_32;
      }
      uint64_t v12 = *(void *)(a1 + 128);
      uint64_t v17 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AnchoringComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
      if (v12)
      {
        uint64_t v14 = v17;
        if (v17)
        {
          if (*(unsigned char *)(v12 + 41) || (*(_DWORD *)(v17 + 32) - 3) <= 1)
          {
LABEL_28:
LABEL_32:
            char v18 = 1;
            goto LABEL_30;
          }
        }
      }
LABEL_17:
      a1 = *(void *)(a1 + 24);
      if (a1 && (*(unsigned char *)(a1 + 288) & 0x80) == 0)
      {
        (*(void (**)(uint64_t *__return_ptr))(**(void **)a2 + 8))(&v19);
        uint64_t v16 = v20;
        if (!(_BYTE)v19) {
          uint64_t v16 = 0;
        }
        char v11 = 1;
        if (v10 == v16) {
          continue;
        }
      }
      goto LABEL_29;
    }
    if (a4) {
      goto LABEL_17;
    }
    uint64_t v12 = *(void *)(a1 + 128);
    uint64_t v13 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AnchoringComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    if (v12)
    {
      uint64_t v14 = v13;
      if (v13)
      {
        if (*(unsigned char *)(v12 + 41) || (*(_DWORD *)(v13 + 32) - 3) <= 1) {
          goto LABEL_28;
        }
      }
    }
LABEL_16:
    uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AnchorShadowMarker,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    if (v15) {
      goto LABEL_31;
    }
    goto LABEL_17;
  }
LABEL_29:
  char v18 = 0;
LABEL_30:
  *a5 = v18;
}

__n128 re::ecs2::anonymous namespace'::shadowReceiverAnchorFromAnchor@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  float32x4_t v3 = *(float32x4_t *)(a1 + 48);
  float32x4_t v4 = *(float32x4_t *)(a1 + 64);
  float32x4_t v6 = *(float32x4_t *)(a1 + 80);
  __n128 result = *(__n128 *)(a1 + 96);
  int32x4_t v7 = (int32x4_t)vmulq_f32(v3, v3);
  v7.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v7, 2), vadd_f32(*(float32x2_t *)v7.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v7.i8, 1))).u32[0];
  float32x2_t v8 = vrsqrte_f32((float32x2_t)v7.u32[0]);
  float32x2_t v9 = vmul_f32(v8, vrsqrts_f32((float32x2_t)v7.u32[0], vmul_f32(v8, v8)));
  float32x4_t v10 = vmulq_n_f32(v3, vmul_f32(v9, vrsqrts_f32((float32x2_t)v7.u32[0], vmul_f32(v9, v9))).f32[0]);
  float32x4_t v11 = vmulq_f32(v4, v10);
  float32x4_t v12 = vmulq_f32(v10, v10);
  v12.f32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 2), vaddq_f32(v12, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v12.f32, 1))).f32[0];
  float32x4_t v13 = vsubq_f32(v4, vmulq_n_f32(v10, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v11, 2), vaddq_f32(v11, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 1))).f32[0]/ v12.f32[0]));
  int32x4_t v14 = (int32x4_t)vmulq_f32(v13, v13);
  v14.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v14, 2), vadd_f32(*(float32x2_t *)v14.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v14.i8, 1))).u32[0];
  float32x2_t v15 = vrsqrte_f32((float32x2_t)v14.u32[0]);
  float32x2_t v16 = vmul_f32(v15, vrsqrts_f32((float32x2_t)v14.u32[0], vmul_f32(v15, v15)));
  v14.i32[0] = vmul_f32(v16, vrsqrts_f32((float32x2_t)v14.u32[0], vmul_f32(v16, v16))).u32[0];
  float32x4_t v17 = vmulq_f32(v6, v10);
  float32x4_t v18 = vmulq_n_f32(v13, *(float *)v14.i32);
  float32x4_t v19 = vsubq_f32(v6, vmulq_n_f32(v10, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v17, 2), vaddq_f32(v17, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v17.f32, 1))).f32[0]/ v12.f32[0]));
  float32x4_t v20 = vmulq_f32(v6, v18);
  float32x4_t v21 = vmulq_f32(v18, v18);
  float32x4_t v22 = vsubq_f32(v19, vmulq_n_f32(v18, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v20, 2), vaddq_f32(v20, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v20.f32, 1))).f32[0]/ vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v21, 2), vaddq_f32(v21, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v21.f32, 1))).f32[0]));
  int32x4_t v23 = (int32x4_t)vmulq_f32(v22, v22);
  v23.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v23, 2), vadd_f32(*(float32x2_t *)v23.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v23.i8, 1))).u32[0];
  *(float32x2_t *)v21.f32 = vrsqrte_f32((float32x2_t)v23.u32[0]);
  *(float32x2_t *)v21.f32 = vmul_f32(*(float32x2_t *)v21.f32, vrsqrts_f32((float32x2_t)v23.u32[0], vmul_f32(*(float32x2_t *)v21.f32, *(float32x2_t *)v21.f32)));
  *(float32x4_t *)a3 = v10;
  *(float32x4_t *)(a3 + 16) = v18;
  *(float32x4_t *)(a3 + 32) = vmulq_n_f32(v22, vmul_f32(*(float32x2_t *)v21.f32, vrsqrts_f32((float32x2_t)v23.u32[0], vmul_f32(*(float32x2_t *)v21.f32, *(float32x2_t *)v21.f32))).f32[0]);
  *(__n128 *)(a3 + 48) = result;
  *(_DWORD *)(a3 + 64) = *(_DWORD *)(a2 + 32);
  return result;
}

uint64_t re::ecs2::anonymous namespace'::shadowReceiverAnchorFromAnchorShadowMarker@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  float32x4_t v3 = *(float32x4_t *)(this + 32);
  int32x4_t v4 = (int32x4_t)vmulq_f32(v3, v3);
  *(_OWORD *)(a2 + 48) = *(_OWORD *)(this + 48);
  unsigned __int32 v5 = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v4, 2), vadd_f32(*(float32x2_t *)v4.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v4.i8, 1))).u32[0];
  *(float32x2_t *)v4.i8 = vrsqrte_f32((float32x2_t)v5);
  *(float32x2_t *)v4.i8 = vmul_f32(*(float32x2_t *)v4.i8, vrsqrts_f32((float32x2_t)v5, vmul_f32(*(float32x2_t *)v4.i8, *(float32x2_t *)v4.i8)));
  float32x4_t v6 = vmulq_n_f32(v3, vmul_f32(*(float32x2_t *)v4.i8, vrsqrts_f32((float32x2_t)v5, vmul_f32(*(float32x2_t *)v4.i8, *(float32x2_t *)v4.i8))).f32[0]);
  if (fabsf(v6.f32[2]) >= 0.00001)
  {
    v7.i32[0] = 0;
    v7.f32[1] = -v6.f32[2];
    v7.i64[1] = v6.u32[1];
  }
  else
  {
    v7.i64[1] = 0;
    v7.f32[0] = -v6.f32[1];
    v7.i32[1] = v6.i32[0];
  }
  int32x4_t v8 = (int32x4_t)vmulq_f32(v7, v7);
  v8.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v8, 2), vadd_f32(*(float32x2_t *)v8.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v8.i8, 1))).u32[0];
  float32x2_t v9 = vrsqrte_f32((float32x2_t)v8.u32[0]);
  float32x2_t v10 = vmul_f32(v9, vrsqrts_f32((float32x2_t)v8.u32[0], vmul_f32(v9, v9)));
  float32x4_t v11 = vmulq_n_f32(v7, vmul_f32(v10, vrsqrts_f32((float32x2_t)v8.u32[0], vmul_f32(v10, v10))).f32[0]);
  float32x4_t v12 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v11, (int32x4_t)v11), (int8x16_t)v11, 0xCuLL), vnegq_f32(v6)), v11, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v6, (int32x4_t)v6), (int8x16_t)v6, 0xCuLL));
  int32x4_t v13 = (int32x4_t)vmulq_f32(v12, v12);
  v13.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v13.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v13, 2), *(float32x2_t *)v13.i8)).u32[0];
  float32x2_t v14 = vrsqrte_f32((float32x2_t)v13.u32[0]);
  float32x2_t v15 = vmul_f32(v14, vrsqrts_f32((float32x2_t)v13.u32[0], vmul_f32(v14, v14)));
  *(float32x4_t *)a2 = vmulq_n_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v12, (int32x4_t)v12), (int8x16_t)v12, 0xCuLL), vmul_f32(v15, vrsqrts_f32((float32x2_t)v13.u32[0], vmul_f32(v15, v15))).f32[0]);
  *(float32x4_t *)(a2 + 16) = v6;
  *(float32x4_t *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 64) = 3;
  return this;
}

float32x4_t re::ecs2::ShadowHelper::expandSkinnedMeshBoundingBox@<Q0>(float32x4_t *a1@<X0>, uint64_t a2@<X1>, float32x4_t *a3@<X8>)
{
  float32x4_t v5 = a1[1];
  *a3 = *a1;
  a3[1] = v5;
  float32x4_t v6 = (float32x4_t *)re::AssetHandle::loadedAsset<re::MeshAsset>((re::MeshAsset *)(a2 + 32));
  if (v6)
  {
    uint64_t v8 = *(void *)(a2 + 16);
    v24[0] = (float32x4_t)xmmword_23435FD50;
    v24[1] = (float32x4_t)xmmword_23435FD60;
    v24[2] = (float32x4_t)xmmword_23435FD80;
    v24[3] = (float32x4_t)xmmword_23435FBB0;
    re::MeshAsset::aabbFromMesh(v6, v24, (uint64_t)v25);
    float32x4_t v9 = *a3;
    float32x4_t v10 = a3[1];
    v9.i32[3] = 0;
    float32x4_t v11 = (float32x4_t)v25[0];
    float32x4_t v12 = (float32x4_t)v25[1];
    v11.i32[3] = 0;
    v10.i32[3] = 0;
    v12.i32[3] = 0;
    float32x4_t v22 = vmaxnmq_f32(v10, v12);
    float32x4_t v23 = vminnmq_f32(v9, v11);
    *a3 = v23;
    a3[1] = v22;
    uint64_t v13 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v8 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::DynamicBoundingBoxComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType);
    if (v13)
    {
      uint64_t v14 = *(void *)(v13 + 96);
      if (v14) {
        float32x2_t v15 = (re::MeshBoundingBoxes *)(v14 + 80);
      }
      else {
        float32x2_t v15 = 0;
      }
      if (v14)
      {
        uint64_t v16 = *(void *)(v14 + 104);
        if (v16)
        {
          for (unint64_t i = 0; i != v16; ++i)
          {
            uint64_t v18 = re::MeshBoundingBoxes::boundingBox(v15, i);
            float32x4_t v20 = v22;
            float32x4_t v19 = v23;
            v19.i32[3] = 0;
            float32x4_t result = *(float32x4_t *)v18;
            float32x4_t v21 = *(float32x4_t *)(v18 + 16);
            result.i32[3] = 0;
            v20.i32[3] = 0;
            v21.i32[3] = 0;
            float32x4_t v22 = vmaxnmq_f32(v20, v21);
            float32x4_t v23 = vminnmq_f32(v19, result);
            *a3 = v23;
            a3[1] = v22;
          }
        }
      }
    }
  }
  return result;
}

void *re::ecs2::allocInfo_AnchorShadowMarker(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_183, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_183))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF84368, "AnchorShadowMarker");
    __cxa_guard_release(&_MergedGlobals_183);
  }
  return &unk_26AF84368;
}

void re::ecs2::initInfo_AnchorShadowMarker(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v9[0] = 0x12136136298219DELL;
  v9[1] = "AnchorShadowMarker";
  re::StringID::destroyString((re::StringID *)v9);
  *((_OWORD *)this + 2) = v10;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF84360, memory_order_acquire) & 1) == 0)
  {
    int32x4_t v4 = (re *)__cxa_guard_acquire(&qword_26AF84360);
    if (v4)
    {
      float32x4_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF84358 = v7;
      __cxa_guard_release(&qword_26AF84360);
    }
  }
  *((void *)this + 2) = 0x7000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((void *)this + 8) = &qword_26AF84358;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::AnchorShadowMarker>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::AnchorShadowMarker>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::AnchorShadowMarker>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::AnchorShadowMarker>;
  re::IntrospectionRegistry::add(this, v3);
  long long v8 = v10;
}

double re::internal::defaultConstruct<re::ecs2::AnchorShadowMarker>(int a1, int a2, ArcSharedObject *this)
{
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)(v3 + 16) = 0;
  *(_WORD *)(v3 + 24) = 0;
  *(void *)uint64_t v3 = &unk_26E6EDD20;
  double result = 0.0;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(unsigned char *)(v3 + 64) = 0;
  return result;
}

void *re::internal::defaultDestruct<re::ecs2::AnchorShadowMarker>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

double re::internal::defaultConstructV2<re::ecs2::AnchorShadowMarker>(ArcSharedObject *a1)
{
  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 6) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *(_OWORD *)a1 = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(void *)(v1 + 16) = 0;
  *(_WORD *)(v1 + 24) = 0;
  *(void *)uint64_t v1 = &unk_26E6EDD20;
  double result = 0.0;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  *(unsigned char *)(v1 + 64) = 0;
  return result;
}

void *re::internal::defaultDestructV2<re::ecs2::AnchorShadowMarker>(void *a1)
{
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_AnchorShadowMarker(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AnchorShadowMarker", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_AnchorShadowMarker, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_AnchorShadowMarker, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::AnchorShadowMarker>, this);
}

uint64_t re::ecs2::AnchorShadowMarker::setFloorPlane(uint64_t a1, long long *a2, long long *a3)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  long long v10 = *a3;
  long long v11 = *a2;
  *(_OWORD *)&v12[1] = *a3;
  *(_OWORD *)&v12[17] = v11;
  if (!*(unsigned char *)(a1 + 64))
  {
    *(_OWORD *)float32x4_t v12 = v10;
    *(_OWORD *)&v12[16] = v11;
    int32x4_t v4 = (_OWORD *)(a1 + 80);
    goto LABEL_5;
  }
  int32x4_t v4 = (_OWORD *)(a1 + 80);
  BOOL v5 = re::SortingPlane::operator==((float *)(a1 + 80), (float *)&v12[1]);
  int v6 = *(unsigned __int8 *)(a1 + 64);
  *(_OWORD *)float32x4_t v12 = v10;
  *(_OWORD *)&v12[16] = v11;
  if (!v6)
  {
LABEL_5:
    uint64_t result = 1;
    *(unsigned char *)(a1 + 64) = 1;
    long long v8 = *(_OWORD *)v12;
    long long v9 = *(_OWORD *)&v12[16];
    goto LABEL_6;
  }
  uint64_t result = !v5;
  long long v8 = v10;
  long long v9 = v11;
LABEL_6:
  *int32x4_t v4 = v8;
  v4[1] = v9;
  return result;
}

re::ecs2::PortalManagerStateTracking *re::ecs2::PortalManagerStateTracking::PortalManagerStateTracking(re::ecs2::PortalManagerStateTracking *this)
{
  void v5[2] = *MEMORY[0x263EF8340];
  unint64_t v2 = (void *)re::ecs2::HierarchyStateTracking<unsigned long long>::HierarchyStateTracking((uint64_t)this);
  *unint64_t v2 = &unk_26E6F8978;
  *((void *)this + 61) = 0;
  *((_DWORD *)this + 124) = 0;
  *(_OWORD *)((char *)this + 568) = 0u;
  *(_OWORD *)((char *)this + 584) = 0u;
  *((_DWORD *)this + 150) = 0;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 28) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 3re::HashTable<re::ecs2::Entity const*,re::ecs2::BillboardData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::deinit((uint64_t *)this + 60) = 0u;
  *(_OWORD *)((char *)this + 376) = 0u;
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  *(_OWORD *)((char *)this + 424) = 0u;
  *(_OWORD *)((char *)this + 440) = 0u;
  *(_OWORD *)((char *)this + 456) = 0u;
  *(_OWORD *)((char *)this + 468) = 0u;
  *(void *)((char *)this + 604) = 0x7FFFFFFFLL;
  *(_OWORD *)((char *)this + 648) = 0u;
  *(_OWORD *)((char *)this + 664) = 0u;
  *(_OWORD *)((char *)this + 616) = 0u;
  *(_OWORD *)((char *)this + 632) = 0u;
  v5[0] = re::ecs2::ComponentImpl<re::ecs2::WorldRootComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v5[1] = re::ecs2::ComponentImpl<re::ecs2::PortalComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v4[0] = v5;
  v4[1] = 2;
  re::FixedArray<re::ecs2::ComponentTypeBase const*>::operator=((_anonymous_namespace_ *)(v2 + 32), (uint64_t)v4);
  return this;
}

uint64_t re::ecs2::HierarchyStateTracking<unsigned long long>::HierarchyStateTracking(uint64_t a1)
{
  *(void *)a1 = &unk_26E6F8AB0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 0;
  *(void *)(a1 + 44) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_DWORD *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  uint64_t v2 = a1 + 56;
  *(void *)(a1 + 92) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_DWORD *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 104) = 0u;
  uint64_t v3 = a1 + 104;
  *(void *)(a1 + 140) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_DWORD *)(a1 + 184) = 0;
  *(_OWORD *)(a1 + 152) = 0u;
  uint64_t v4 = a1 + 152;
  *(void *)(a1 + 188) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_DWORD *)(a1 + 232) = 0;
  *(_OWORD *)(a1 + 200) = 0u;
  uint64_t v5 = a1 + 200;
  *(void *)(a1 + 236) = 0x7FFFFFFFLL;
  return a1;
}

uint64_t *re::HashSet<re::ecs2::PortalComponent const*,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,true,false>::~HashSet(uint64_t *a1)
{
  return a1;
}

uint64_t re::ecs2::PortalManagerStateTracking::trackedComponents(re::ecs2::PortalManagerStateTracking *this)
{
  return *((void *)this + 34);
}

void re::ecs2::PortalManagerStateTracking::buildPerEntityStateForDirtyEntityHierarchies(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2;
  v64[1] = *MEMORY[0x263EF8340];
  uint64_t v48 = *(unsigned int *)(a2 + 32);
  uint64_t v4 = 0;
  if (v48)
  {
    uint64_t v5 = (int *)(*(void *)(a2 + 16) + 8);
    while (1)
    {
      int v6 = *v5;
      v5 += 6;
      if (v6 < 0) {
        break;
      }
      if (v48 == ++v4)
      {
        LODWORD(v4) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  if (v48 != v4)
  {
    uint64_t v7 = v4;
    uint64_t v8 = *(void *)(a2 + 16);
    long long v9 = (void *)(a1 + 56);
    unint64_t v45 = (_anonymous_namespace_ *)(a1 + 344);
    uint64_t v46 = (_anonymous_namespace_ *)(a1 + 408);
    do
    {
      uint64_t v10 = *(void *)(v8 + 24 * v7 + 16);
      uint64_t v11 = *(void *)(v10 + 208);
      v50.n128_u64[0] = v11;
      if (v11)
      {
        float32x4_t v12 = re::ecs2::PortalComponent::targetWorldRootToken(v11, *(void *)(a1 + 248));
        re::ecs2::PortalManagerStateTracking::addComponentForWorldId(a1, (unint64_t)v12, v50.n128_i64[0]);
        unint64_t v13 = v50.n128_u64[0];
        unint64_t v52 = (unint64_t)v12;
        v51.n128_u64[0] = v50.n128_u64[0];
        if (v12)
        {
          uint64_t v14 = re::HashBrown<unsigned long long,re::HashSet<re::ecs2::PortalComponent const*,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::find(v45, (unint64_t)v12);
          if (v14 == -1)
          {
            unint64_t v63 = v13;
            long long v59 = 0u;
            long long v60 = 0u;
            LODWORD(v61) = 0;
            *(void *)((char *)&v61 + 4) = 0x7FFFFFFFLL;
            re::HashSetBase<re::ecs2::PortalComponent const*,re::ecs2::PortalComponent const*,re::internal::ValueAsKey<re::ecs2::PortalComponent const*>,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,true,false>::add((uint64_t)&v59, (uint64_t *)&v63);
            re::HashBrown<unsigned long long,re::HashSet<re::ecs2::PortalComponent const*,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::addNew(v45, &v52, (uint64_t)&v59);
            re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)&v59);
          }
          else
          {
            re::HashSetBase<re::ecs2::PortalComponent const*,re::ecs2::PortalComponent const*,re::internal::ValueAsKey<re::ecs2::PortalComponent const*>,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,true,false>::add(*(void *)(a1 + 352) + 56 * v14 + 8, (uint64_t *)&v51);
          }
        }
        float32x2_t v15 = (void *)v50.n128_u64[0];
        *(void *)(v50.n128_u64[0] + 136) = v12;
        unint64_t v16 = v15[6];
        unint64_t v52 = v16;
        if (v16)
        {
          uint64_t v17 = re::HashBrown<unsigned long long,re::HashSet<re::ecs2::PortalComponent const*,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::find(v46, v16);
          if (v17 == -1)
          {
            long long v60 = 0u;
            long long v61 = 0u;
            long long v59 = 0u;
            DWORD1(v61) = 0x7FFFFFFF;
            uint64_t v18 = re::HashBrown<unsigned long long,re::HashSet<re::ecs2::PortalComponent const*,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::addNew(v46, &v52, (uint64_t)&v59);
            re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)&v59);
          }
          else
          {
            uint64_t v18 = (void *)(*(void *)(a1 + 416) + 56 * v17 + 8);
          }
          re::HashSetBase<re::ecs2::PortalComponent const*,re::ecs2::PortalComponent const*,re::internal::ValueAsKey<re::ecs2::PortalComponent const*>,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,true,false>::add((uint64_t)v18, (uint64_t *)&v50);
          float32x2_t v15 = (void *)v50.n128_u64[0];
        }
        re::ecs2::EntityHandle::EntityHandle(location, (const re::ecs2::EntityHandle *)(v15 + 5));
        re::ecs2::EntityHandle::operator=((re::ecs2::EntityHandle *)(v15 + 18), location);
        re::ecs2::EntityHandle::reset((re::ecs2::EntityHandle *)location);
        objc_destroyWeak(location);
        location[0] = 0;
      }
      uint64_t v19 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v10 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::WorldRootComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
      if (v19)
      {
        uint64_t v20 = v19;
        re::ecs2::PortalManagerStateTracking::addComponentForWorldId(a1, *(void *)(v19 + 32), v19);
        *(void *)(v20 + 48) = *(void *)(v20 + 32);
      }
      unint64_t v62 = v10;
      if (!re::HashTable<re::ecs2::Entity const*,unsigned long long,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::containsKey(a1 + 56, (uint64_t *)&v62))
      {
        unint64_t v21 = v62;
        do
        {
          uint64_t v22 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v21 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::WorldRootComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
          if (v22)
          {
            BOOL v23 = !*(unsigned char *)(v22 + 40) && v21 == v62;
            if (!v23)
            {
              unint64_t v21 = *(void *)(v22 + 32);
              goto LABEL_32;
            }
          }
          unint64_t v21 = *(void *)(v21 + 24);
          if (!v21) {
            goto LABEL_32;
          }
        }
        while ((*(unsigned char *)(v21 + 288) & 0x80) == 0);
        unint64_t v21 = 0;
LABEL_32:
        re::StackScratchAllocator::StackScratchAllocator((re::StackScratchAllocator *)&v59);
        unint64_t v52 = 0;
        uint64_t v53 = 0;
        int v54 = 1;
        uint64_t v56 = 0;
        unint64_t v57 = 0;
        uint64_t v55 = 0;
        int v58 = 0;
        re::BucketArray<re::ecs2::PortalManagerStateTracking::buildWorldIdsForEntityHierarchy(re::ecs2::Entity const*)::EntityWorldId,32ul>::init((uint64_t)&v52, (uint64_t)&v59, 1uLL);
        v51.n128_u64[0] = v62;
        v51.n128_u64[1] = v21;
        __n128 v24 = re::BucketArray<re::ecs2::PortalManagerStateTracking::buildWorldIdsForEntityHierarchy(re::ecs2::Entity const*)::EntityWorldId,32ul>::add((uint64_t)&v52, &v51);
        unint64_t v25 = v57;
        if (v57)
        {
          while (1)
          {
            __n128 v51 = *(__n128 *)re::BucketArray<re::ecs2::PortalManagerStateTracking::buildWorldIdsForEntityHierarchy(re::ecs2::Entity const*)::EntityWorldId,32ul>::operator[]((uint64_t)&v52, --v25);
            re::BucketArray<re::ecs2::PortalManagerStateTracking::buildWorldIdsForEntityHierarchy(re::ecs2::Entity const*)::EntityWorldId,32ul>::operator[]((uint64_t)&v52, v25);
            unint64_t v57 = v25;
            ++v58;
            if (*(unsigned char *)(v51.n128_u64[0] + 288)) {
              break;
            }
LABEL_62:
            if (!v25) {
              goto LABEL_65;
            }
          }
          LOBYTE(v63) = 0;
          uint64_t v26 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v51.n128_u64[0] + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::WorldRootComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
          uint64_t v27 = v26;
          if (v26)
          {
            unint64_t v2 = *(void *)(v26 + 32);
            int v28 = v63;
            if (*(unsigned char *)(v26 + 40))
            {
              if (!(_BYTE)v63) {
                LOBYTE(v63) = 1;
              }
              v64[0] = v2;
              unint64_t v29 = v2;
              uint64_t v30 = v64;
              if (!v2)
              {
LABEL_39:
                re::HashTable<re::ecs2::Entity const*,re::ecs2::EntityVisualProxyScopeData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::remove(a1 + 56, (uint64_t *)&v51);
LABEL_55:
                uint64_t v37 = *(void *)(v51.n128_u64[0] + 328);
                if (v37)
                {
                  uint64_t v38 = *(unint64_t **)(v51.n128_u64[0] + 344);
                  uint64_t v39 = 8 * v37;
                  do
                  {
                    unint64_t v41 = *v38++;
                    unint64_t v40 = v41;
                    unint64_t v42 = v51.n128_u64[1];
                    if (v27) {
                      unint64_t v42 = v29;
                    }
                    v50.n128_u64[0] = v40;
                    v50.n128_u64[1] = v42;
                    __n128 v24 = re::BucketArray<re::ecs2::PortalManagerStateTracking::buildWorldIdsForEntityHierarchy(re::ecs2::Entity const*)::EntityWorldId,32ul>::add((uint64_t)&v52, &v50);
                    v39 -= 8;
                  }
                  while (v39);
                  unint64_t v25 = v57;
                }
                unint64_t v2 = v29;
                goto LABEL_62;
              }
LABEL_45:
              unint64_t v32 = 0x94D049BB133111EBLL
                  * ((0xBF58476D1CE4E5B9 * (v51.n128_u64[0] ^ (v51.n128_u64[0] >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                            * (v51.n128_u64[0] ^ (v51.n128_u64[0] >> 30))) >> 27));
              unint64_t v33 = v32 ^ (v32 >> 31);
              if (*v9)
              {
                unint64_t v34 = v33 % *(unsigned int *)(a1 + 80);
                uint64_t v35 = *(unsigned int *)(*(void *)(a1 + 64) + 4 * v34);
                if (v35 != 0x7FFFFFFF)
                {
                  uint64_t v36 = *(void *)(a1 + 72);
                  while (*(void *)(v36 + 32 * v35 + 16) != v51.n128_u64[0])
                  {
                    uint64_t v35 = *(_DWORD *)(v36 + 32 * v35 + 8) & 0x7FFFFFFF;
                    if (v35 == 0x7FFFFFFF) {
                      goto LABEL_52;
                    }
                  }
                  *(void *)(v36 + 32 * v35 + 24) = v2;
                  goto LABEL_54;
                }
              }
              else
              {
                LODWORD(v34) = 0;
              }
LABEL_52:
              re::HashTable<re::ecs2::Entity const*,unsigned long long,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::addEmplace<unsigned long long &>(a1 + 56, v34, v33, &v51, v30);
LABEL_54:
              ++*(_DWORD *)(a1 + 96);
              goto LABEL_55;
            }
          }
          else
          {
            int v28 = v63;
          }
          unint64_t v29 = v2;
          BOOL v23 = v28 == 0;
          int v31 = (__n128 *)&v63;
          if (v23)
          {
            int v31 = &v51;
            uint64_t v30 = &v51.n128_u64[1];
          }
          else
          {
            uint64_t v30 = v64;
          }
          unint64_t v2 = v31->n128_u64[1];
          if (!v2) {
            goto LABEL_39;
          }
          goto LABEL_45;
        }
LABEL_65:
        while (v53)
          re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)&v52);
        unint64_t v2 = a2;
        if (v52 && (v54 & 1) == 0) {
          (*(void (**)(__n128))(*(void *)v52 + 40))(v24);
        }
        re::StackScratchAllocator::~StackScratchAllocator((re::StackScratchAllocator *)&v59);
      }
      uint64_t v8 = *(void *)(v2 + 16);
      if (*(_DWORD *)(v2 + 32) <= (v4 + 1)) {
        int v43 = v4 + 1;
      }
      else {
        int v43 = *(_DWORD *)(v2 + 32);
      }
      while (1)
      {
        uint64_t v7 = (v4 + 1);
        if (v43 - 1 == v4) {
          break;
        }
        LODWORD(v4) = v4 + 1;
        int v44 = v7;
        if ((*(_DWORD *)(v8 + 24 * v7 + 8) & 0x80000000) != 0) {
          goto LABEL_77;
        }
      }
      int v44 = v43;
LABEL_77:
      LODWORD(v4) = v44;
    }
    while (v48 != v44);
  }
}

uint64_t re::ecs2::PortalManagerStateTracking::addComponentForWorldId(uint64_t result, unint64_t a2, uint64_t a3)
{
  v28[1] = *MEMORY[0x263EF8340];
  uint64_t v26 = a3;
  unint64_t v27 = a2;
  if (a2)
  {
    uint64_t v5 = (void *)result;
    int v6 = (_anonymous_namespace_ *)(result + 280);
    uint64_t v7 = re::HashBrown<unsigned long long,re::HashSet<re::ecs2::PortalComponent const*,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::find((void *)(result + 280), a2);
    if (v7 == -1)
    {
      v28[0] = a3;
      long long v23 = 0u;
      long long v24 = 0u;
      LODWORD(v25) = 0;
      *(void *)((char *)&v25 + 4) = 0x7FFFFFFFLL;
      re::HashSetBase<re::ecs2::Component const*,re::ecs2::Component const*,re::internal::ValueAsKey<re::ecs2::Component const*>,re::Hash<re::ecs2::Component const*>,re::EqualTo<re::ecs2::Component const*>,true,false>::add((uint64_t)&v23, v28);
      if (re::HashBrown<unsigned long long,re::HashSet<re::ecs2::PortalComponent const*,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::find(v6, a2) == -1)re::HashBrown<unsigned long long,re::HashSet<re::ecs2::Component const*,re::Hash<re::ecs2::Component const*>,re::EqualTo<re::ecs2::Component const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::internalAdd(v6, (uint64_t *)&v27, (uint64_t)&v23); {
      re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)&v23);
      }
      re::SmallHashSet<unsigned long long,8ul,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false>::add((uint64_t)(v5 + 59), (uint64_t *)&v27);
      uint64_t result = re::HashBrown<void const*,unsigned long,re::Hash<void const*>,re::EqualTo<void const*>,void,false>::find(v5 + 77, v27);
      if (result == -1)
      {
        if (!v5[84])
        {
        }
        uint64_t v9 = v5[81];
        if (!v9 || (unint64_t v10 = v5[79], v10 > 8 * v9))
        {
          uint64_t result = re::HashBrown<unsigned long long,re::ecs2::PortalServiceQuery::WorldType,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::resize(v5 + 77, 1u);
          unint64_t v10 = v5[79];
        }
        unint64_t v11 = 0xBF58476D1CE4E5B9;
        unint64_t v12 = 0x94D049BB133111EBLL;
        unint64_t v13 = (0x94D049BB133111EBLL
             * ((0xBF58476D1CE4E5B9 * (v27 ^ (v27 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v27 ^ (v27 >> 30))) >> 27))) ^ ((0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * (v27 ^ (v27 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v27 ^ (v27 >> 30))) >> 27))) >> 31);
        unint64_t v14 = v10 >> 4;
        uint64_t v15 = v5[77];
        unint64_t v16 = v13 % v14;
        while (1)
        {
          unint64_t v17 = __clz(__rbit64(*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v15 + 16 * v16)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800)));
          if (v17 < 0x40) {
            break;
          }
          if (v16 + 1 == v14) {
            unint64_t v16 = 0;
          }
          else {
            ++v16;
          }
          if (v16 == v13 % v14)
          {
            re::internal::assertLog((re::internal *)4, v8, -1.79399301e-307, 4.74803907e-38, "assertion failure: '%s' (%s:line %i) Unexpected full hash-table", "blockIndex != h1(key) % blockCount()", "internalAdd", 656, v23, v24, v25, v26);
            uint64_t result = _os_crash();
            __break(1u);
            break;
          }
        }
        uint64_t v18 = v15 + 16 * v16;
        uint64_t v19 = *(unsigned __int8 *)(v18 + v17) == 255;
        *(unsigned char *)(v18 + v17) = v13 & 0x7F;
        unint64_t v20 = v27;
        uint64_t v21 = v5[78] + 16 * (v17 + 16 * v16);
        *(void *)uint64_t v21 = v27;
        *(_DWORD *)(v21 + 8) = 1;
        ++v5[80];
        v5[81] -= v19;
        unint64_t v22 = (((v20 ^ (v20 >> 30)) * v11) ^ (((v20 ^ (v20 >> 30)) * v11) >> 27)) * v12;
        v5[82] ^= (v22 >> 31) ^ v22;
      }
    }
    else
    {
      return re::HashSetBase<re::ecs2::Component const*,re::ecs2::Component const*,re::internal::ValueAsKey<re::ecs2::Component const*>,re::Hash<re::ecs2::Component const*>,re::EqualTo<re::ecs2::Component const*>,true,false>::add(v5[36] + 56 * v7 + 8, &v26);
    }
  }
  return result;
}

void *re::HashBrown<unsigned long long,re::HashSet<re::ecs2::PortalComponent const*,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::addNew(_anonymous_namespace_ *a1, unint64_t *a2, uint64_t a3)
{
  uint64_t v6 = re::HashBrown<unsigned long long,re::HashSet<re::ecs2::PortalComponent const*,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::find(a1, *a2);
  if (v6 != -1) {
    return (void *)(*((void *)a1 + 1) + 56 * v6 + 8);
  }
  return re::HashBrown<unsigned long long,re::HashSet<re::ecs2::PortalComponent const*,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::internalAdd(a1, (uint64_t *)a2, a3);
}

uint64_t re::HashSetBase<re::ecs2::PortalComponent const*,re::ecs2::PortalComponent const*,re::internal::ValueAsKey<re::ecs2::PortalComponent const*>,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,true,false>::add(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  unint64_t v6 = (0x94D049BB133111EBLL * (v5 ^ (v5 >> 27))) ^ ((0x94D049BB133111EBLL * (v5 ^ (v5 >> 27))) >> 31);
  unint64_t v7 = *(unsigned int *)(a1 + 24);
  if (!v7)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  unint64_t v8 = v6 % v7;
  uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * (v6 % v7));
  if (v9 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v12 = re::HashSetBase<re::ecs2::PortalComponent const*,re::ecs2::PortalComponent const*,re::internal::ValueAsKey<re::ecs2::PortalComponent const*>,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,true,false>::addAsCopy(a1, v8, v6, (uint64_t)a2, a2);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v11 = *(void *)(a1 + 16) + 24 * v12;
    return v11 + 16;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  while (*(void *)(v10 + 24 * v9 + 16) != v4)
  {
    LODWORD(v9) = *(_DWORD *)(v10 + 24 * v9 + 8) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  uint64_t v11 = v10 + 24 * v9;
  return v11 + 16;
}

BOOL re::HashTable<re::ecs2::Entity const*,unsigned long long,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::containsKey(uint64_t a1, uint64_t *a2)
{
  if (!*(void *)a1) {
    return 0;
  }
  uint64_t v2 = *a2;
  unint64_t v3 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  uint64_t v4 = *(unsigned int *)(*(void *)(a1 + 8)
                       + 4
                       * (((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) ^ ((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) >> 31))
                        % *(unsigned int *)(a1 + 24)));
  if (v4 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 16);
  if (*(void *)(v6 + 32 * v4 + 16) == v2) {
    return 1;
  }
  do
  {
    uint64_t v4 = *(_DWORD *)(v6 + 32 * v4 + 8) & 0x7FFFFFFF;
    BOOL result = v4 != 0x7FFFFFFF;
  }
  while (v4 != 0x7FFFFFFF && *(void *)(v6 + 32 * v4 + 16) != v2);
  return result;
}

__n128 re::BucketArray<re::ecs2::PortalManagerStateTracking::buildWorldIdsForEntityHierarchy(re::ecs2::Entity const*)::EntityWorldId,32ul>::add(uint64_t a1, __n128 *a2)
{
  unint64_t v4 = *(void *)(a1 + 40);
  unint64_t v5 = *(void *)(a1 + 8);
  if (v4 + 1 > 32 * v5)
  {
    re::BucketArray<re::ecs2::PortalManagerStateTracking::buildWorldIdsForEntityHierarchy(re::ecs2::Entity const*)::EntityWorldId,32ul>::setBucketsCapacity((void *)a1, (v4 + 32) >> 5);
    unint64_t v5 = *(void *)(a1 + 8);
  }
  if (v5 <= v4 >> 5)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v6 = a1 + 24;
  }
  else {
    uint64_t v6 = *(void *)(a1 + 32);
  }
  uint64_t v7 = *(void *)(v6 + 8 * (v4 >> 5));
  ++*(void *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  __n128 result = *a2;
  *(__n128 *)(v7 + 16 * (v4 & 0x1F)) = *a2;
  return result;
}

void re::ecs2::PortalManagerStateTracking::clearEntityHierarchyStateData(re::ecs2::PortalManagerStateTracking *this, const re::ecs2::Entity *a2)
{
  uint64_t v2 = a2;
  unint64_t v4 = (const re::ecs2::Entity *)((char *)a2 + 32);
  unint64_t v5 = (void *)*((void *)a2 + 26);
  unint64_t v34 = v5;
  if (v5)
  {
    unint64_t v6 = v5[17];
    re::ecs2::PortalManagerStateTracking::removeComponentForWorldId(this, v6, (unint64_t)v5);
    re::ecs2::PortalManagerStateTracking::removePortalComponentForWorldId(this, v6, (const re::ecs2::PortalComponent *)v5);
    re::ecs2::EntityHandle::EntityHandle(location, (const re::ecs2::EntityHandle *)(v5 + 18));
    id v7 = location[1];
    re::ecs2::EntityHandle::reset((re::ecs2::EntityHandle *)location);
    objc_destroyWeak(location);
    if (v7)
    {
      uint64_t v8 = re::HashBrown<unsigned long long,re::HashSet<re::ecs2::PortalComponent const*,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::find((void *)this + 51, (unint64_t)v7);
      if (v8 != -1)
      {
        uint64_t v9 = *((void *)this + 52) + 56 * v8;
        re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove(v9 + 8, (uint64_t *)&v34);
        if (!*(_DWORD *)(v9 + 36)) {
          re::HashBrown<unsigned long long,re::HashSet<re::ecs2::PortalComponent const*,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::remove((long long *)((char *)this + 408), (unint64_t)v7);
        }
      }
    }
  }
  unint64_t v10 = re::ecs2::EntityComponentCollection::get(v4, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::WorldRootComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v10) {
    re::ecs2::PortalManagerStateTracking::removeComponentForWorldId(this, *(void *)(v10 + 48), v10);
  }
  uint64_t v11 = (long long *)((char *)this + 408);
  unint64_t v12 = *((void *)v2 + 37);
  uint64_t v13 = re::HashBrown<unsigned long long,re::HashSet<re::ecs2::PortalComponent const*,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::find((void *)this + 51, v12);
  if (v13 == -1) {
    goto LABEL_35;
  }
  uint64_t v14 = *((void *)this + 52) + 56 * v13;
  uint64_t v15 = v14 + 8;
  uint64_t v16 = *(unsigned int *)(v14 + 40);
  if (v16)
  {
    uint64_t v17 = 0;
    uint64_t v18 = (int *)(*(void *)(v14 + 24) + 8);
    while (1)
    {
      int v19 = *v18;
      v18 += 6;
      if (v19 < 0) {
        break;
      }
      if (v16 == ++v17)
      {
        LODWORD(v17) = v16;
        break;
      }
    }
  }
  else
  {
    LODWORD(v17) = 0;
  }
  if (v16 == v17) {
    goto LABEL_34;
  }
  unint64_t v32 = (unint64_t *)v2;
  uint64_t v20 = v17;
  do
  {
    uint64_t v21 = *(const re::ecs2::PortalComponent **)(*(void *)(v15 + 16) + 24 * v20 + 16);
    unint64_t v22 = *((void *)v21 + 17);
    re::ecs2::PortalManagerStateTracking::removeComponentForWorldId(this, v22, (unint64_t)v21);
    re::ecs2::PortalManagerStateTracking::removePortalComponentForWorldId(this, v22, v21);
    unint64_t v23 = *((void *)v21 + 2);
    location[0] = (id)v23;
    unint64_t v24 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * (v23 ^ (v23 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v23 ^ (v23 >> 30))) >> 27));
    unint64_t v25 = v24 ^ (v24 >> 31);
    unint64_t v26 = *((unsigned int *)this + 32);
    if (!v26)
    {
      LODWORD(v27) = 0;
LABEL_24:
      re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::addAsCopy((uint64_t)this + 104, v27, v25, (uint64_t)location, location);
      ++*((_DWORD *)this + 36);
      goto LABEL_25;
    }
    unint64_t v27 = v25 % v26;
    uint64_t v28 = *(unsigned int *)(*((void *)this + 14) + 4 * (v25 % v26));
    if (v28 == 0x7FFFFFFF) {
      goto LABEL_24;
    }
    uint64_t v29 = *((void *)this + 15);
    while (*(void *)(v29 + 24 * v28 + 16) != v23)
    {
      LODWORD(vre::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 28) = *(_DWORD *)(v29 + 24 * v28 + 8) & 0x7FFFFFFF;
      if (v28 == 0x7FFFFFFF) {
        goto LABEL_24;
      }
    }
LABEL_25:
    if (*(_DWORD *)(v15 + 32) <= (v17 + 1)) {
      int v30 = v17 + 1;
    }
    else {
      int v30 = *(_DWORD *)(v15 + 32);
    }
    while (1)
    {
      uint64_t v20 = (v17 + 1);
      if (v30 - 1 == v17) {
        break;
      }
      LODWORD(v17) = v17 + 1;
      int v31 = v20;
      if ((*(_DWORD *)(*(void *)(v15 + 16) + 24 * v20 + 8) & 0x80000000) != 0) {
        goto LABEL_32;
      }
    }
    int v31 = v30;
LABEL_32:
    LODWORD(v17) = v31;
  }
  while (v16 != v31);
  uint64_t v11 = (long long *)((char *)this + 408);
  uint64_t v2 = (const re::ecs2::Entity *)v32;
  unint64_t v12 = v32[37];
LABEL_34:
  re::HashBrown<unsigned long long,re::HashSet<re::ecs2::PortalComponent const*,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::remove(v11, v12);
LABEL_35:
  re::ecs2::HierarchyStateTracking<unsigned long long>::clearEntityHierarchyStateData((uint64_t)this, (uint64_t)v2);
}

uint64_t re::ecs2::PortalManagerStateTracking::removeComponentForWorldId(re::ecs2::PortalManagerStateTracking *this, unint64_t a2, unint64_t a3)
{
  unint64_t v6 = (long long *)((char *)this + 280);
  uint64_t result = re::HashBrown<unsigned long long,re::HashSet<re::ecs2::PortalComponent const*,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::find((void *)this + 35, a2);
  if (result != -1)
  {
    uint64_t v8 = *((void *)this + 36) + 56 * result;
    uint64_t v9 = v8 + 8;
    unint64_t v10 = *(unsigned int *)(v8 + 32);
    if (v10)
    {
      unint64_t v11 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * (a3 ^ (a3 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a3 ^ (a3 >> 30))) >> 27));
      unint64_t v12 = (v11 ^ (v11 >> 31)) % v10;
      uint64_t v13 = *(void *)(v9 + 8);
      uint64_t v14 = *(unsigned int *)(v13 + 4 * v12);
      if (v14 != 0x7FFFFFFF)
      {
        uint64_t v15 = *(void *)(v9 + 16);
        if (*(void *)(v15 + 24 * v14 + 16) == a3)
        {
          *(_DWORD *)(v13 + 4 * v12) = *(_DWORD *)(v15 + 24 * v14 + 8) & 0x7FFFFFFF;
LABEL_9:
          uint64_t v17 = *(void *)(v9 + 16);
          uint64_t v18 = v17 + 24 * v14;
          int v21 = *(_DWORD *)(v18 + 8);
          uint64_t v20 = (int *)(v18 + 8);
          int v19 = v21;
          if (v21 < 0)
          {
            *uint64_t v20 = v19 & 0x7FFFFFFF;
            uint64_t v17 = *(void *)(v9 + 16);
            int v19 = *(_DWORD *)(v17 + 24 * v14 + 8);
          }
          int v22 = *(_DWORD *)(v9 + 40);
          *(_DWORD *)(v17 + 24 * v14 + 8) = *(_DWORD *)(v9 + 36) | v19 & 0x80000000;
          --*(_DWORD *)(v9 + 28);
          *(_DWORD *)(v9 + 36) = v14;
          *(_DWORD *)(v9 + 40) = v22 + 1;
        }
        else
        {
          while (1)
          {
            unsigned int v16 = v14;
            LODWORD(v14) = *(_DWORD *)(v15 + 24 * v14 + 8) & 0x7FFFFFFF;
            if (v14 == 0x7FFFFFFF) {
              break;
            }
            if (*(void *)(v15 + 24 * v14 + 16) == a3)
            {
              *(_DWORD *)(v15 + 24 * v16 + 8) = *(_DWORD *)(v15 + 24 * v16 + 8) & 0x80000000 | *(_DWORD *)(v15 + 24 * v14 + 8) & 0x7FFFFFFF;
              goto LABEL_9;
            }
          }
        }
      }
    }
    if (!*(_DWORD *)(v9 + 28))
    {
      uint64_t v23 = re::HashBrown<unsigned long long,re::HashSet<re::ecs2::PortalComponent const*,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::find(v6, a2);
      if (v23 != -1)
      {
        unint64_t v25 = (int8x16_t *)(*((void *)this + 35) + (v23 & 0xFFFFFFFFFFFFFFF0));
        v26.i64[0] = -1;
        v26.i64[1] = -1;
        int8x8_t v27 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(*v25, v26), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800);
        char v28 = *(void *)&v27 ? -1 : 0x80;
        v25->i8[v23 & 0xF] = v28;
        uint64_t v29 = (void *)(*((void *)this + 36) + 56 * v23);
        unint64_t v30 = 0x94D049BB133111EBLL
            * ((0xBF58476D1CE4E5B9 * (*v29 ^ (*v29 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*v29 ^ (*v29 >> 30))) >> 27));
        *((void *)this + 40) ^= (v30 >> 31) ^ v30;
        re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit(v29 + 1);
        uint64_t v31 = *(void *)&v27 ? *((void *)this + 39) + 1 : *((void *)this + 39);
        unint64_t v32 = *((void *)this + 37);
        unint64_t v33 = *((void *)this + 38) - 1;
        *((void *)this + 38) = v33;
        *((void *)this + 39) = v31;
        if (v32 >= 0x11 && v33 < v32 >> 2) {
          re::HashBrown<unsigned long long,re::HashSet<re::ecs2::Component const*,re::Hash<re::ecs2::Component const*>,re::EqualTo<re::ecs2::Component const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::resize(v6, 0);
        }
      }
      if (*((_DWORD *)this + 149))
      {
        unint64_t v34 = *((unsigned int *)this + 148);
        if (!v34
          || (unint64_t v35 = 0x94D049BB133111EBLL
                  * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27)),
              unint64_t v36 = (v35 ^ (v35 >> 31)) % v34,
              uint64_t v37 = *((void *)this + 72),
              uint64_t v38 = *(unsigned int *)(v37 + 4 * v36),
              v38 == 0x7FFFFFFF))
        {
LABEL_45:
          uint64_t result = re::HashBrown<void const*,unsigned long,re::Hash<void const*>,re::EqualTo<void const*>,void,false>::find((void *)this + 77, a2);
          if (result != -1)
          {
            unint64_t v52 = (int8x16_t *)(*((void *)this + 77) + (result & 0xFFFFFFFFFFFFFFF0));
            v53.i64[0] = -1;
            v53.i64[1] = -1;
            int8x8_t v54 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(*v52, v53), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800);
            if (v54) {
              char v55 = -1;
            }
            else {
              char v55 = 0x80;
            }
            v52->i8[result & 0xF] = v55;
            unint64_t v56 = *(void *)(*((void *)this + 78) + 16 * result);
            unint64_t v57 = 0x94D049BB133111EBLL
                * ((0xBF58476D1CE4E5B9 * (v56 ^ (v56 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v56 ^ (v56 >> 30))) >> 27));
            *((void *)this + 82) ^= (v57 >> 31) ^ v57;
            uint64_t v58 = *((void *)this + 81);
            if (v54) {
              ++v58;
            }
            unint64_t v59 = *((void *)this + 80) - 1;
            *((void *)this + 80) = v59;
            *((void *)this + 81) = v58;
            unint64_t v60 = *((void *)this + 79);
            if (v60 >= 0x11 && v59 < v60 >> 2)
            {
              return re::HashBrown<unsigned long long,re::ecs2::PortalServiceQuery::WorldType,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::resize((uint64_t *)this + 77, 0);
            }
          }
          return result;
        }
        uint64_t v39 = *((void *)this + 73);
        if (*(void *)(v39 + 16 * v38 + 8) != a2)
        {
          while (1)
          {
            unsigned int v48 = v38;
            uint64_t v38 = *(_DWORD *)(v39 + 16 * v38) & 0x7FFFFFFF;
            if (v38 == 0x7FFFFFFF) {
              goto LABEL_45;
            }
            if (*(void *)(v39 + 16 * v38 + 8) == a2)
            {
              *(_DWORD *)(v39 + 16 * v48) = *(_DWORD *)(v39 + 16 * v48) & 0x80000000 | *(_DWORD *)(v39 + 16 * v38) & 0x7FFFFFFF;
              goto LABEL_41;
            }
          }
        }
        *(_DWORD *)(v37 + 4 * v36) = *(_DWORD *)(v39 + 16 * v38) & 0x7FFFFFFF;
LABEL_41:
        uint64_t v49 = *((void *)this + 73);
        __n128 v50 = (int *)(v49 + 16 * v38);
        int v51 = *v50;
        if (*v50 < 0)
        {
          *__n128 v50 = v51 & 0x7FFFFFFF;
          uint64_t v49 = *((void *)this + 73);
          int v51 = *(_DWORD *)(v49 + 16 * v38);
        }
        *(_DWORD *)(v49 + 16 * v38) = *((_DWORD *)this + 151) | v51 & 0x80000000;
        *((_DWORD *)this + 151) = v38;
        --*((_DWORD *)this + 149);
        size_t v47 = (char *)this + 608;
      }
      else
      {
        unint64_t v40 = (char *)this + 504;
        unint64_t v41 = *((void *)this + 61);
        unint64_t v42 = (char *)this + 8 * v41 + 504;
        int v43 = (char *)this + 504;
        if (v41)
        {
          uint64_t v44 = 8 * v41;
          int v43 = (char *)this + 504;
          while (*(void *)v43 != a2)
          {
            v43 += 8;
            v44 -= 8;
            if (!v44)
            {
              int v43 = (char *)this + 8 * v41 + 504;
              break;
            }
          }
        }
        unint64_t v45 = (v43 - v40) >> 3;
        if (v45 == v41) {
          goto LABEL_45;
        }
        if (v41 <= v45)
        {
          re::internal::assertLog((re::internal *)6, v24, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "removeAt", 527, v45, v41);
          uint64_t result = _os_crash();
          __break(1u);
          return result;
        }
        unint64_t v46 = v41 - 1;
        if (v46 > v45) {
          *(void *)&v40[8 * v45] = *((void *)v42 - 1);
        }
        *((void *)this + 61) = v46;
        size_t v47 = (char *)this + 496;
      }
      ++*(_DWORD *)v47;
      goto LABEL_45;
    }
  }
  return result;
}

void re::ecs2::PortalManagerStateTracking::removePortalComponentForWorldId(re::ecs2::PortalManagerStateTracking *this, unint64_t a2, const re::ecs2::PortalComponent *a3)
{
  uint64_t v8 = a3;
  unint64_t v5 = (long long *)((char *)this + 344);
  uint64_t v6 = re::HashBrown<unsigned long long,re::HashSet<re::ecs2::PortalComponent const*,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::find((void *)this + 43, a2);
  if (v6 != -1)
  {
    uint64_t v7 = *((void *)this + 44) + 56 * v6;
    re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove(v7 + 8, (uint64_t *)&v8);
    if (!*(_DWORD *)(v7 + 36)) {
      re::HashBrown<unsigned long long,re::HashSet<re::ecs2::PortalComponent const*,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::remove(v5, a2);
    }
  }
}

void re::HashBrown<unsigned long long,re::HashSet<re::ecs2::PortalComponent const*,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::remove(long long *a1, unint64_t a2)
{
  uint64_t v3 = re::HashBrown<unsigned long long,re::HashSet<re::ecs2::PortalComponent const*,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::find(a1, a2);
  if (v3 != -1)
  {
    unint64_t v4 = (int8x16_t *)(*(void *)a1 + (v3 & 0xFFFFFFFFFFFFFFF0));
    v5.i64[0] = -1;
    v5.i64[1] = -1;
    int8x8_t v6 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(*v4, v5), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800);
    char v7 = *(void *)&v6 ? -1 : 0x80;
    v4->i8[v3 & 0xF] = v7;
    uint64_t v8 = (void *)(*((void *)a1 + 1) + 56 * v3);
    unint64_t v9 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * (*v8 ^ (*v8 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*v8 ^ (*v8 >> 30))) >> 27));
    *((void *)a1 + 5) ^= (v9 >> 31) ^ v9;
    re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit(v8 + 1);
    uint64_t v10 = *(void *)&v6 ? *((void *)a1 + 4) + 1 : *((void *)a1 + 4);
    unint64_t v11 = *((void *)a1 + 2);
    unint64_t v12 = *((void *)a1 + 3) - 1;
    *((void *)a1 + 3) = v12;
    *((void *)a1 + 4) = v10;
    if (v11 >= 0x11 && v12 < v11 >> 2)
    {
      re::HashBrown<unsigned long long,re::HashSet<re::ecs2::PortalComponent const*,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::resize(a1, 0);
    }
  }
}

void re::ecs2::HierarchyStateTracking<unsigned long long>::clearEntityHierarchyStateData(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 84))
  {
    re::StackScratchAllocator::StackScratchAllocator((re::StackScratchAllocator *)v17);
    v11[0] = 0;
    v11[1] = 0;
    int v12 = 1;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v13 = 0;
    int v16 = 0;
    re::BucketArray<re::ecs2::Entity const*,32ul>::init((uint64_t)v11, (uint64_t)v17, 1uLL);
    *(void *)re::BucketArray<re::ecs2::Entity const*,32ul>::addUninitialized((uint64_t)v11) = a2;
    uint64_t v4 = v15;
    if (v15)
    {
      uint64_t v5 = a1 + 56;
      do
      {
        uint64_t v10 = 0;
        uint64_t v10 = *(void *)re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v11, v4 - 1);
        re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v11, --v15);
        ++v16;
        re::HashTable<re::ecs2::Entity const*,re::ecs2::EntityVisualProxyScopeData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::remove(v5, &v10);
        uint64_t v6 = *(void *)(v10 + 328);
        if (v6)
        {
          char v7 = *(uint64_t **)(v10 + 344);
          uint64_t v8 = 8 * v6;
          do
          {
            uint64_t v9 = *v7++;
            *(void *)re::BucketArray<re::ecs2::Entity const*,32ul>::addUninitialized((uint64_t)v11) = v9;
            v8 -= 8;
          }
          while (v8);
        }
        uint64_t v4 = v15;
      }
      while (v15);
    }
    re::BucketArray<re::ecs2::Entity const*,32ul>::deinit((uint64_t)v11);
    if (v11[0])
    {
      if ((v12 & 1) == 0) {
        (*(void (**)(void))(*(void *)v11[0] + 40))();
      }
    }
    re::StackScratchAllocator::~StackScratchAllocator((re::StackScratchAllocator *)v17);
  }
}

uint64_t re::HashSetBase<re::ecs2::Component const*,re::ecs2::Component const*,re::internal::ValueAsKey<re::ecs2::Component const*>,re::Hash<re::ecs2::Component const*>,re::EqualTo<re::ecs2::Component const*>,true,false>::add(uint64_t result, uint64_t *a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *a2;
  unint64_t v5 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  unint64_t v6 = (0x94D049BB133111EBLL * (v5 ^ (v5 >> 27))) ^ ((0x94D049BB133111EBLL * (v5 ^ (v5 >> 27))) >> 31);
  unint64_t v7 = *(unsigned int *)(result + 24);
  if (v7)
  {
    unint64_t v8 = v6 % v7;
    uint64_t v9 = *(unsigned int *)(*(void *)(result + 8) + 4 * (v6 % v7));
    if (v9 != 0x7FFFFFFF)
    {
      uint64_t v10 = *(void *)(result + 16);
      if (*(void *)(v10 + 24 * v9 + 16) == v4) {
        return result;
      }
      while (1)
      {
        LODWORD(v9) = *(_DWORD *)(v10 + 24 * v9 + 8) & 0x7FFFFFFF;
        if (v9 == 0x7FFFFFFF) {
          break;
        }
        if (*(void *)(v10 + 24 * v9 + 16) == v4) {
          return result;
        }
      }
    }
  }
  else
  {
    LODWORD(v8) = 0;
  }
  uint64_t result = re::HashSetBase<re::ecs2::Component const*,re::ecs2::Component const*,re::internal::ValueAsKey<re::ecs2::Component const*>,re::Hash<re::ecs2::Component const*>,re::EqualTo<re::ecs2::Component const*>,true,false>::addAsCopy(result, v8, v6, a2);
  ++*(_DWORD *)(v3 + 40);
  return result;
}

uint64_t re::SmallHashSet<unsigned long long,8ul,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false>::add(uint64_t a1, uint64_t *a2)
{
  if (*(_DWORD *)(a1 + 124))
  {
    uint64_t v4 = a1 + 96;
LABEL_3:
    return re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::add(v4, a2);
  }
  unint64_t v7 = (uint64_t *)(a1 + 16);
  unint64_t v6 = *(void *)(a1 + 16);
  unint64_t v8 = (uint64_t *)(a1 + 32);
  if (v6)
  {
    uint64_t v9 = 0;
    while (v8[v9] != *a2)
    {
      if (v6 == ++v9) {
        goto LABEL_13;
      }
    }
    if (v9 != v6) {
      return (uint64_t)&v8[v9];
    }
LABEL_13:
    if (v6 > 7)
    {
      uint64_t v13 = *(uint64_t **)a1;
      if (!*(void *)a1)
      {
      }
      if (!*(void *)(a1 + 96)) {
        re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::init(a1 + 96, (uint64_t)v13, 16);
      }
      if (*v7)
      {
        uint64_t v14 = 8 * *v7;
        do
        {
          re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::add(a1 + 96, v8++);
          v14 -= 8;
        }
        while (v14);
      }
      *(void *)(a1 + 16) = 0;
      ++*(_DWORD *)(a1 + 24);
      uint64_t v4 = a1 + 96;
      goto LABEL_3;
    }
  }
  int v10 = re::DynamicInlineArray<unsigned long long,8ul>::ensureCapacity((void *)(a1 + 16), (uint64_t)a2);
  uint64_t v12 = *v7;
  if (v10)
  {
    v8[v12++] = *a2;
    *(void *)(a1 + 16) = v12;
    ++*(_DWORD *)(a1 + 24);
  }
  if (v12) {
    return (uint64_t)&v8[v12 - 1];
  }
  re::internal::assertLog((re::internal *)6, v11, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, -1, 0);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

void *re::ecs2::PortalManagerQuery::perEntityStateMap(re::ecs2::PortalManagerQuery *this)
{
  uint64_t v1 = *((void *)this + 1);
  if (v1) {
    return (void *)(v1 + 56);
  }
  {
    return &re::ecs2::PortalManagerQuery::perEntityStateMap(void)const::empty;
  }
  __cxa_atexit((void (*)(void *))re::HashTable<re::ecs2::Entity const*,unsigned long long,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::~HashTable, &re::ecs2::PortalManagerQuery::perEntityStateMap(void)const::empty, &dword_233120000);
  return &re::ecs2::PortalManagerQuery::perEntityStateMap(void)const::empty;
}

uint64_t *re::HashTable<re::ecs2::Entity const*,unsigned long long,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::~HashTable(uint64_t *a1)
{
  return a1;
}

void *re::ecs2::PortalManagerQuery::worldIdForEntity@<X0>(void *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a2;
  uint64_t v4 = result[1];
  if (v4
    && (uint64_t result = (void *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(v4 + 56, &v5)) != 0)
  {
    *(unsigned char *)a3 = 1;
    *(void *)(a3 + 8) = *result;
  }
  else
  {
    *(unsigned char *)a3 = 0;
  }
  return result;
}

uint64_t *re::ecs2::PortalManagerQuery::worldIds(re::ecs2::PortalManagerQuery *this)
{
  uint64_t v1 = *((void *)this + 1);
  if (v1) {
    return (uint64_t *)(v1 + 472);
  }
  uint64_t result = &qword_26879A060;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26879A050, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_26879A050))
    {
      qword_26879A060 = 0;
      dword_26879A068 = 0;
      qword_26879A070 = 0;
      dword_26879A078 = 0;
      xmmword_26879A0C0 = 0u;
      unk_26879A0D0 = 0u;
      dword_26879A0E0 = 0;
      *(void *)algn_26879A0E4 = 0x7FFFFFFFLL;
      __cxa_atexit((void (*)(void *))re::SmallHashSet<unsigned long long,8ul,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false>::~SmallHashSet, &qword_26879A060, &dword_233120000);
      __cxa_guard_release(&qword_26879A050);
    }
    return &qword_26879A060;
  }
  return result;
}

uint64_t re::ecs2::PortalManagerQuery::worldTypeForWorldId(re::ecs2::PortalManagerQuery *this, unint64_t a2)
{
  uint64_t result = 0;
  if (a2)
  {
    uint64_t v4 = *((void *)this + 1);
    if (v4) {
      return *(unsigned int *)(*(void *)(v4 + 624)
    }
                             + 16
                             * re::HashBrown<void const*,unsigned long,re::Hash<void const*>,re::EqualTo<void const*>,void,false>::find((void *)(v4 + 616), a2)+ 8);
  }
  return result;
}

void *re::ecs2::PortalManagerQuery::portalsForWorldId(re::ecs2::PortalManagerQuery *this, unint64_t a2)
{
  uint64_t v2 = *((void *)this + 1);
  if (v2)
  {
    uint64_t v3 = re::HashBrown<unsigned long long,re::HashSet<re::ecs2::PortalComponent const*,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::find((void *)(v2 + 344), a2);
    if (v3 != -1) {
      return (void *)(*(void *)(v2 + 352) + 56 * v3 + 8);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_51, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&_MergedGlobals_51))
    {
      return &_MergedGlobals_8;
    }
    uint64_t v5 = &_MergedGlobals_8;
    __cxa_atexit((void (*)(void *))re::HashSet<re::ecs2::PortalComponent const*,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,true,false>::~HashSet, &_MergedGlobals_8, &dword_233120000);
    unint64_t v6 = &_MergedGlobals_51;
  }
  else
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26879A058, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_26879A058))
    {
      return &unk_26AF712A0;
    }
    uint64_t v5 = &unk_26AF712A0;
    __cxa_atexit((void (*)(void *))re::HashSet<re::ecs2::PortalComponent const*,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,true,false>::~HashSet, &unk_26AF712A0, &dword_233120000);
    unint64_t v6 = &qword_26879A058;
  }
  __cxa_guard_release(v6);
  return v5;
}

uint64_t re::ecs2::PortalManager::init(uint64_t result, uint64_t a2)
{
  *(void *)(result + 256) = a2;
  *(void *)(result + 696) = result + 8;
  return result;
}

uint64_t re::ecs2::PortalManager::query(re::ecs2::PortalManager *this)
{
  if (*((_DWORD *)this + 35)) {
    re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8);
  }
  return (uint64_t)this + 688;
}

void re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData(uint64_t a1)
{
  uint64_t v1 = a1 + 104;
  uint64_t v2 = a1 + 200;
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, a1 + 104);
  re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::clear(v1);
  re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::clear(v2);
}

uint64_t re::ecs2::PortalManager::registerScene(re::ecs2::PortalManager *this, re::ecs2::Scene *a2)
{
  return re::ecs2::HierarchyStateTracking<unsigned long long>::registerScene((re::ecs2::PortalManager *)((char *)this + 8), (uint64_t)a2);
}

uint64_t re::ecs2::HierarchyStateTracking<unsigned long long>::registerScene(_anonymous_namespace_ *a1, uint64_t a2)
{
  uint64_t v21 = a2;
  uint64_t v2 = *(re::EventBus **)(a2 + 288);
  if (v2)
  {
    v15[0] = 0;
    v15[1] = 0;
    int v16 = 1;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v17 = 0;
    int v20 = 0;
    uint64_t v4 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(void *)a1 + 16))(a1);
    if (v5)
    {
      unint64_t v6 = (uint64_t *)v4;
      uint64_t v7 = 8 * v5;
      do
      {
        uint64_t v8 = *v6++;
        re::ecs2::HierarchyStateTracking<unsigned long long>::subscribeToEventToInvalidateEntityHierarchy<REComponentDidChangeEvent>(a1, v2, (uint64_t)v15, v8);
        re::ecs2::HierarchyStateTracking<unsigned long long>::subscribeToEventToInvalidateEntityHierarchy<REComponentDidActivateEvent>(a1, v2, (uint64_t)v15, v8);
        re::ecs2::HierarchyStateTracking<unsigned long long>::subscribeToEventToInvalidateEntityHierarchy<REComponentWillDeactivateEvent>(a1, v2, (uint64_t)v15, v8);
        v7 -= 8;
      }
      while (v7);
    }
    uint64_t v9 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(void *)a1 + 24))(a1);
    if (v10)
    {
      uint64_t v11 = (uint64_t *)v9;
      uint64_t v12 = 8 * v10;
      do
      {
        uint64_t v13 = *v11++;
        re::ecs2::HierarchyStateTracking<unsigned long long>::subscribeToEventToInvalidateEntityHierarchy<REComponentDidActivateEvent>(a1, v2, (uint64_t)v15, v13);
        re::ecs2::HierarchyStateTracking<unsigned long long>::subscribeToEventToInvalidateEntityHierarchy<REComponentWillDeactivateEvent>(a1, v2, (uint64_t)v15, v13);
        v12 -= 8;
      }
      while (v12);
    }
    re::ecs2::HierarchyStateTracking<unsigned long long>::subscribeToEventToInvalidateEntityHierarchy<RESceneEntityDidReparentEvent>(a1, v2, (uint64_t)v15, 0);
    re::ecs2::HierarchyStateTracking<unsigned long long>::subscribeToEventToInvalidateEntityHierarchy<RESceneEntityDidActivateEvent>(a1, v2, (uint64_t)v15, 0);
    re::ecs2::HierarchyStateTracking<unsigned long long>::subscribeToEventToInvalidateEntityHierarchy<RESceneEntityWillDeactivateEvent>(a1, v2, (uint64_t)v15, 0);
    re::HashTable<re::ecs2::Scene const*,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::add((uint64_t)a1 + 152, &v21, (uint64_t)v15);
    re::HashSetBase<re::ecs2::Scene const*,re::ecs2::Scene const*,re::internal::ValueAsKey<re::ecs2::Scene const*>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::add((uint64_t)a1 + 8, &v21);
    re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)v15);
    uint64_t result = v15[0];
    if (v15[0])
    {
      if ((v16 & 1) == 0) {
        return (*(uint64_t (**)(void))(*(void *)v15[0] + 40))();
      }
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) An event bus is expected for this system to track entity state changes.", "eventBus", "registerScene", 100);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::ecs2::PortalManager::unregisterScene(re::ecs2::PortalManager *this, re::ecs2::Scene *a2)
{
  return re::ecs2::HierarchyStateTracking<unsigned long long>::unregisterScene((uint64_t)this + 8, (uint64_t)a2);
}

uint64_t re::ecs2::HierarchyStateTracking<unsigned long long>::unregisterScene(uint64_t a1, uint64_t a2)
{
  uint64_t v14 = a2;
  re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove(a1 + 8, &v14);
  uint64_t v3 = *(void *)(v14 + 104);
  uint64_t v4 = *(void *)(v3 + 328);
  if (v4)
  {
    uint64_t v5 = *(void *)(v3 + 344);
    uint64_t v6 = 8 * v4;
    do
    {
      if (*(unsigned char *)(*(void *)v5 + 288)) {
        (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
      }
      v5 += 8;
      v6 -= 8;
    }
    while (v6);
  }
  uint64_t v7 = a1 + 152;
  uint64_t result = re::HashTable<re::ecs2::Scene const*,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::tryGet(v7, &v14);
  if (result)
  {
    uint64_t v9 = *(void *)(v14 + 288);
    if (v9)
    {
      uint64_t v10 = result;
      uint64_t v11 = *(void *)(result + 40);
      if (v11)
      {
        for (unint64_t i = 0; i != v11; ++i)
        {
          uint64_t v13 = re::BucketArray<RESubscriptionHandle,8ul>::operator[](v10, i);
          re::EventBus::unsubscribe(v9, *(void *)v13, *(void *)(v13 + 8));
        }
      }
    }
    return re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::remove(v7, &v14);
  }
  return result;
}

void re::ecs2::PortalManager::updateWorldIds(re::ecs2::PortalManager *this)
{
}

void re::ecs2::PortalManagerStateTracking::~PortalManagerStateTracking(re::ecs2::PortalManagerStateTracking *this)
{
  re::ecs2::PortalManagerStateTracking::~PortalManagerStateTracking(this);
  JUMPOUT(0x237DBCBD0);
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_26E6F8978;
  uint64_t v2 = *((void *)this + 84);
  if (v2)
  {
    if (*((void *)this + 78)) {
      *((void *)this + 7re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
    }
    if (*((void *)this + 77))
    {
      (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
      *((void *)this + 77) = 0;
    }
    *(_OWORD *)((char *)this + 64re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0u;
    *(_OWORD *)((char *)this + 664) = 0u;
    *(_OWORD *)((char *)this + 632) = 0u;
  }
  re::SmallHashSet<unsigned long long,8ul,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false>::~SmallHashSet((uint64_t)this + 472);
  re::HashBrown<unsigned long long,re::HashSet<re::ecs2::PortalComponent const*,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 408);
  re::HashBrown<unsigned long long,re::HashSet<re::ecs2::PortalComponent const*,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 344);
  re::HashBrown<unsigned long long,re::HashSet<re::ecs2::PortalComponent const*,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 280);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 32);
  re::ecs2::HierarchyStateTracking<unsigned long long>::~HierarchyStateTracking((uint64_t *)this);
}

uint64_t re::ecs2::HierarchyStateTracking<unsigned long long>::trackedActivationComponents()
{
  return 0;
}

void re::ecs2::PortalManager::~PortalManager(re::ecs2::PortalManager *this)
{
}

{
  uint64_t vars8;

  re::ecs2::PortalManagerStateTracking::~PortalManagerStateTracking((re::ecs2::PortalManager *)((char *)this + 8));
  JUMPOUT(0x237DBCBD0);
}

uint64_t *re::ecs2::HierarchyStateTracking<unsigned long long>::~HierarchyStateTracking(uint64_t *a1)
{
  *a1 = (uint64_t)&unk_26E6F8AB0;
  uint64_t v2 = a1 + 1;
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit(a1 + 25);
  re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit(a1 + 19);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit(a1 + 13);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(a1 + 7);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit(v2);
  return a1;
}

double re::HashBrown<unsigned long long,re::HashSet<re::ecs2::PortalComponent const*,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit(uint64_t a1)
{
  if (*(void *)(a1 + 56))
  {
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      uint64_t v3 = *(void *)(a1 + 16);
      if (v3)
      {
        uint64_t v4 = 56 * v3;
        uint64_t v5 = (uint64_t *)(v2 + 8);
        do
        {
          re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit(v5);
          v5 += 7;
          v4 -= 56;
        }
        while (v4);
      }
      *(void *)(a1 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
    }
    if (*(void *)a1)
    {
      (*(void (**)(void))(**(void **)(a1 + 56) + 40))(*(void *)(a1 + 56));
      *(void *)a1 = 0;
    }
    double result = 0.0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

uint64_t re::ecs2::HierarchyStateTracking<unsigned long long>::trackedComponents()
{
  return 0;
}

uint64_t re::HashBrown<unsigned long long,re::HashSet<re::ecs2::PortalComponent const*,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::find(void *a1, unint64_t a2)
{
  if (!a1[7]) {
    return -1;
  }
  unint64_t v2 = a1[2];
  if (v2 < 0x10 || !a1[3]) {
    return -1;
  }
  unint64_t v3 = v2 >> 4;
  unint64_t v4 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
  unint64_t v5 = v4 ^ (v4 >> 31);
  unint64_t v6 = v5 % v3;
  int8x16_t v7 = vdupq_n_s8(v5 & 0x7F);
  v8.i64[0] = -1;
  v8.i64[1] = -1;
  unint64_t v9 = v5 % v3;
  while (1)
  {
    int8x16_t v10 = *(int8x16_t *)(*a1 + 16 * v9);
    unint64_t v11 = (unint64_t)vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(v7, v10), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800);
    unint64_t v12 = __clz(__rbit64(v11));
    if (v12 <= 0x3F) {
      break;
    }
LABEL_10:
    if (vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(v10, v8), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800))
    {
      return -1;
    }
    if (v9 + 1 == v3) {
      unint64_t v9 = 0;
    }
    else {
      ++v9;
    }
    uint64_t v14 = -1;
    if (v9 == v6) {
      return v14;
    }
  }
  uint64_t v13 = 16 * v9;
  while (1)
  {
    uint64_t v14 = v12 + v13;
    if (*(void *)(a1[1] + 56 * (v12 + v13)) == a2) {
      return v14;
    }
    if (v12 <= 0x3E)
    {
      unint64_t v12 = __clz(__rbit64((-2 << v12) & v11));
      if (v12 < 0x40) {
        continue;
      }
    }
    goto LABEL_10;
  }
}

void *re::HashBrown<unsigned long long,re::HashSet<re::ecs2::PortalComponent const*,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::internalAdd(_anonymous_namespace_ *a1, uint64_t *a2, uint64_t a3)
{
  if (!*((void *)a1 + 7))
  {
  }
  uint64_t v6 = *((void *)a1 + 4);
  if (!v6 || (unint64_t v7 = *((void *)a1 + 2), v7 > 8 * v6))
  {
    re::HashBrown<unsigned long long,re::HashSet<re::ecs2::PortalComponent const*,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::resize((long long *)a1, 1u);
    unint64_t v7 = *((void *)a1 + 2);
  }
  unint64_t v8 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  unint64_t v9 = (0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) ^ ((0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) >> 31);
  unint64_t v10 = v7 >> 4;
  unint64_t v11 = v9 % (v7 >> 4);
  uint64_t v12 = *(void *)a1;
  unint64_t v13 = __clz(__rbit64(*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*(void *)a1 + 16 * v11)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800)));
  if (v13 >= 0x40)
  {
    do
    {
      if (v11 + 1 == v10) {
        unint64_t v11 = 0;
      }
      else {
        ++v11;
      }
      unint64_t v13 = __clz(__rbit64(*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v12 + 16 * v11)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800)));
    }
    while (v13 > 0x3F);
  }
  uint64_t v14 = v12 + 16 * v11;
  int v15 = *(unsigned __int8 *)(v14 + v13);
  *(unsigned char *)(v14 + v13) = v9 & 0x7F;
  unint64_t v16 = v13 + 16 * v11;
  uint64_t v19 = *(void *)a3;
  uint64_t v18 = *(void *)(a3 + 8);
  uint64_t v39 = *a2;
  uint64_t v17 = v39;
  uint64_t v40 = v19;
  *(void *)a3 = 0;
  *(void *)(a3 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
  uint64_t v20 = *(void *)(a3 + 16);
  uint64_t v41 = v18;
  uint64_t v42 = v20;
  *(void *)(a3 + 16) = 0;
  int v22 = *(_DWORD *)(a3 + 24);
  unsigned int v21 = *(_DWORD *)(a3 + 28);
  int v43 = v22;
  unsigned int v44 = v21;
  unsigned int v24 = *(_DWORD *)(a3 + 32);
  int v23 = *(_DWORD *)(a3 + 36);
  unsigned int v45 = v24;
  int v46 = v23;
  int v47 = 0;
  *(_OWORD *)(a3 + 24) = xmmword_23436F740;
  unint64_t v25 = (uint64_t *)(*((void *)a1 + 1) + 56 * v16);
  BOOL v28 = v25 == &v39;
  *unint64_t v25 = v17;
  uint64_t v26 = (uint64_t)(v25 + 1);
  if (!v28)
  {
    uint64_t v27 = *(void *)v26;
    if (*(void *)v26) {
      BOOL v28 = v27 == v19;
    }
    else {
      BOOL v28 = 1;
    }
    if (v28)
    {
      *(void *)uint64_t v26 = v19;
      uint64_t v40 = v27;
      uint64_t v29 = *(void *)(v26 + 8);
      *(void *)(v26 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v18;
      uint64_t v41 = v29;
      uint64_t v30 = *(void *)(v26 + 16);
      *(void *)(v26 + 16) = v20;
      uint64_t v42 = v30;
      LODWORD(v30) = *(_DWORD *)(v26 + 24);
      *(_DWORD *)(v26 + 24) = v22;
      int v43 = v30;
      LODWORD(v30) = *(_DWORD *)(v26 + 28);
      *(_DWORD *)(v26 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 28) = v21;
      unsigned int v44 = v30;
      LODWORD(v30) = *(_DWORD *)(v26 + 32);
      *(_DWORD *)(v26 + 32) = v24;
      unsigned int v45 = v30;
      LODWORD(v30) = *(_DWORD *)(v26 + 36);
      *(_DWORD *)(v26 + 36) = v23;
      int v46 = v30;
    }
    else
    {
      re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::clear(v26);
      if (v19)
      {
        if (*(_DWORD *)(v26 + 24) < v44) {
          re::HashSetBase<re::ecs2::PortalComponent const*,re::ecs2::PortalComponent const*,re::internal::ValueAsKey<re::ecs2::PortalComponent const*>,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,true,false>::setCapacity(v26, v44);
        }
        unint64_t v31 = v45;
        if (v45)
        {
          uint64_t v32 = 0;
          unint64_t v33 = 0;
          do
          {
            if ((*(_DWORD *)(v42 + v32 + 8) & 0x80000000) != 0)
            {
              re::HashSetBase<re::ecs2::PortalComponent const*,re::ecs2::PortalComponent const*,re::internal::ValueAsKey<re::ecs2::PortalComponent const*>,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,true,false>::addAsCopy(v26, *(void *)(v42 + v32) % (unint64_t)*(unsigned int *)(v26 + 24), *(void *)(v42 + v32), v42 + v32 + 16, (void *)(v42 + v32 + 16));
              unint64_t v31 = v45;
            }
            ++v33;
            v32 += 24;
          }
          while (v33 < v31);
        }
        ++*(_DWORD *)(v26 + 40);
      }
    }
  }
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit(&v40);
  uint64_t v34 = *((void *)a1 + 4) - (v15 == 255);
  ++*((void *)a1 + 3);
  *((void *)a1 + 4) = v34;
  unint64_t v35 = (unint64_t *)(*((void *)a1 + 1) + 56 * v16);
  unint64_t v37 = *v35;
  double result = v35 + 1;
  unint64_t v38 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (v37 ^ (v37 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v37 ^ (v37 >> 30))) >> 27));
  *((void *)a1 + 5) ^= (v38 >> 31) ^ v38;
  return result;
}

void re::HashBrown<unsigned long long,re::HashSet<re::ecs2::PortalComponent const*,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::resize(long long *a1, unsigned int a2)
{
  unint64_t v3 = *((void *)a1 + 2);
  uint64_t v4 = *((void *)a1 + 3) + a2;
  unint64_t v5 = (((unint64_t)(151 * v4) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  unint64_t v6 = ((3 * v3) >> 1) & 0x1FFFFFFFFFFFFFFLL;
  if (v5 > (192 * v3) >> 7) {
    unint64_t v6 = (((unint64_t)(151 * v4) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  }
  unint64_t v7 = (v6 << 7) / 0x97;
  uint64_t v8 = *((void *)a1 + 7);
  long long v27 = 0u;
  *(_OWORD *)BOOL v28 = 0u;
  if (v5 > v3) {
    uint64_t v9 = v7;
  }
  else {
    uint64_t v9 = v4;
  }
  memset(&v28[16], 0, 32);
  re::HashBrown<unsigned long long,re::HashSet<re::ecs2::PortalComponent const*,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::init(&v27, v8, v9);
  unint64_t v10 = *((void *)a1 + 2);
  if (v10 >= 0x10)
  {
    uint64_t v11 = 0;
    unint64_t v12 = v10 >> 4;
    while (1)
    {
      unsigned __int16 v13 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*(void *)a1 + v11)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800).u16[0];
      unint64_t v14 = (unsigned __int16)~v13;
      if (v13 != 0xFFFF) {
        break;
      }
      v11 += 16;
      if (!--v12) {
        goto LABEL_12;
      }
    }
    unint64_t v15 = __clz(__rbit64(v14)) + v11;
    while (v15 != -1)
    {
      re::HashBrown<unsigned long long,re::HashSet<re::ecs2::PortalComponent const*,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::internalAdd(&v27, *((void *)a1 + 1) + 56 * v15, *((void *)a1 + 1) + 56 * v15 + 8);
      unint64_t v22 = v15 >> 4;
      unint64_t v10 = *((void *)a1 + 2);
      if (v15 >> 4 >= v10 >> 4) {
        break;
      }
      unint64_t v23 = __clz(__rbit64((-2 << (v15 & 0xF)) & v14));
      if (v23 >= 0x40)
      {
        uint64_t v24 = 16 * v22;
        unint64_t v25 = ~v22 + (v10 >> 4);
        while (v25)
        {
          unint64_t v14 = (unsigned __int16)~*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*(void *)a1 + v24 + 16)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800);
          unint64_t v26 = __clz(__rbit64(v14));
          v24 += 16;
          --v25;
          if (v26 <= 0x3F)
          {
            unint64_t v15 = v26 + v24;
            goto LABEL_20;
          }
        }
        break;
      }
      unint64_t v15 = v23 + (v15 & 0xFFFFFFFFFFFFFFF0);
LABEL_20:
      ;
    }
  }
LABEL_12:
  uint64_t v16 = *(void *)&v28[40];
  *(void *)&v28[40] = *((void *)a1 + 7);
  long long v17 = v27;
  long long v18 = *(_OWORD *)v28;
  long long v27 = *a1;
  *(void *)BOOL v28 = v10;
  long long v19 = *(_OWORD *)&v28[16];
  long long v20 = *(long long *)((char *)a1 + 40);
  *((void *)a1 + 6) = *(void *)&v28[32];
  *((void *)a1 + 7) = v16;
  *(_OWORD *)&v28[24] = v20;
  long long v21 = *(long long *)((char *)a1 + 24);
  *a1 = v17;
  a1[1] = v18;
  a1[2] = v19;
  *(_OWORD *)&v28[8] = v21;
  re::HashBrown<unsigned long long,re::HashSet<re::ecs2::PortalComponent const*,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)&v27);
}

void *re::HashBrown<unsigned long long,re::HashSet<re::ecs2::PortalComponent const*,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::init(void *result, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = result;
  result[7] = a2;
  unint64_t v4 = 151 * a3;
  unint64_t v5 = ((unint64_t)(151 * a3) >> 7) + 15;
  result[2] = v5 & 0x3FFFFFFFFFFFFF0;
  if ((v5 & 0x3FFFFFFFFFFFFF0) != 0)
  {
    unint64_t v6 = v5 >> 4;
    double result = (void *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a2 + 32))(a2, 57 * (v5 & 0x3FFFFFFFFFFFFF0), 16);
    *unint64_t v3 = result;
    if (v4 >= 0x80)
    {
      uint64_t v7 = 0;
      *(void *)&long long v8 = -1;
      *((void *)&v8 + 1) = -1;
      do
        *(_OWORD *)(*v3 + 16 * v7++) = v8;
      while (v6 != v7);
      double result = (void *)*v3;
    }
    v3[1] = &result[2 * v6];
    if (v3[2])
    {
      uint64_t v9 = 0;
      unint64_t v10 = 0;
      do
      {
        uint64_t v11 = v3[1] + v9;
        *(_OWORD *)(v11 + 16) = 0uLL;
        *(_OWORD *)(v11 + 32) = 0uLL;
        *(void *)(v11 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
        *(_OWORD *)uint64_t v11 = 0uLL;
        *(_DWORD *)(v11 + 44) = 0x7FFFFFFF;
        ++v10;
        unint64_t v12 = v3[2];
        v9 += 56;
      }
      while (v10 < v12);
    }
    else
    {
      unint64_t v12 = 0;
    }
  }
  else
  {
    unint64_t v12 = 0;
    *double result = 0;
    result[1] = 0;
  }
  v3[5] = 0;
  v3[6] = 0;
  v3[3] = 0;
  v3[4] = v12;
  return result;
}

void re::HashSetBase<re::ecs2::PortalComponent const*,re::ecs2::PortalComponent const*,re::internal::ValueAsKey<re::ecs2::PortalComponent const*>,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(void *)&v13[36] = 0x7FFFFFFFLL;
      re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::init((uint64_t)v13, v4, a2);
      long long v5 = *(_OWORD *)v13;
      *(_OWORD *)unsigned __int16 v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      uint64_t v6 = *(void *)&v13[16];
      *(void *)&v13[16] = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = v6;
      long long v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      unsigned int v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      unsigned int v9 = v7;
      if (v7)
      {
        uint64_t v10 = 0;
        unint64_t v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(void *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashSetBase<re::ecs2::PortalComponent const*,re::ecs2::PortalComponent const*,re::internal::ValueAsKey<re::ecs2::PortalComponent const*>,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,true,false>::addAsCopy(a1, *(void *)(*(void *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(*(void *)&v13[16] + v10), *(void *)&v13[16] + v10 + 16, (void *)(*(void *)&v13[16] + v10 + 16));
            unsigned int v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 24;
        }
        while (v11 < v9);
      }
      re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2) {
      signed int v12 = a2;
    }
    else {
      signed int v12 = 3;
    }
  }
}

uint64_t re::HashSetBase<re::ecs2::PortalComponent const*,re::ecs2::PortalComponent const*,re::internal::ValueAsKey<re::ecs2::PortalComponent const*>,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,true,false>::addAsCopy(uint64_t a1, unsigned int a2, unint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v8 = *(unsigned int *)(a1 + 36);
  if (v8 == 0x7FFFFFFF)
  {
    uint64_t v8 = *(unsigned int *)(a1 + 32);
    int v9 = v8;
    if (v8 == *(_DWORD *)(a1 + 24))
    {
      re::HashSetBase<re::ecs2::PortalComponent const*,re::ecs2::PortalComponent const*,re::internal::ValueAsKey<re::ecs2::PortalComponent const*>,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,true,false>::setCapacity(a1, (2 * *(_DWORD *)(a1 + 28)));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v9 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v9 + 1;
    uint64_t v10 = *(void *)(a1 + 16);
    int v11 = *(_DWORD *)(v10 + 24 * v8 + 8);
  }
  else
  {
    uint64_t v10 = *(void *)(a1 + 16);
    int v11 = *(_DWORD *)(v10 + 24 * v8 + 8);
    *(_DWORD *)(a1 + 36) = v11 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v10 + 24 * v8 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v11 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + 24 * v8 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 24 * v8 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 24 * vre::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = a3;
  *(void *)(*(void *)(a1 + 16) + 24 * v8 + 16) = *a5;
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v8;
  ++*(_DWORD *)(a1 + 28);
  return v8;
}

uint64_t re::BucketArray<re::ecs2::PortalManagerStateTracking::buildWorldIdsForEntityHierarchy(re::ecs2::Entity const*)::EntityWorldId,32ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  *(void *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(void *)(a1 + 40) = 0;
  uint64_t result = re::BucketArray<re::ecs2::PortalManagerStateTracking::buildWorldIdsForEntityHierarchy(re::ecs2::Entity const*)::EntityWorldId,32ul>::setBucketsCapacity(a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

void *re::BucketArray<re::ecs2::PortalManagerStateTracking::buildWorldIdsForEntityHierarchy(re::ecs2::Entity const*)::EntityWorldId,32ul>::setBucketsCapacity(void *result, unint64_t a2)
{
  unint64_t v3 = result;
  if (*result)
  {
    if (result[5] < 32 * a2)
    {
      while (1)
      {
        unint64_t v4 = v3[1];
        if (v4 <= a2) {
          break;
        }
        uint64_t result = (void *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      if (v4 < a2)
      {
        long long v5 = v3 + 3;
        do
        {
          uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t, void))(*(void *)*v3 + 32))(*v3, 512, 0);
          uint64_t v6 = result;
          if (*v3)
          {
            unint64_t v7 = v3[1];
            int v8 = *((_DWORD *)v3 + 4);
            if ((v8 & 1) == 0)
            {
              unint64_t v9 = *v5;
              BOOL v11 = v7 >= *v5;
              unint64_t v10 = v7 + 1;
              BOOL v11 = !v11 || v9 >= v10;
              if (v11) {
                goto LABEL_24;
              }
              unint64_t v12 = 2 * v9;
              goto LABEL_20;
            }
            unint64_t v10 = v7 + 1;
            if (v10 >= 3)
            {
              unint64_t v12 = 4;
LABEL_20:
              if (v12 <= v10) {
                unint64_t v14 = v10;
              }
              else {
                unint64_t v14 = v12;
              }
              uint64_t result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v14);
              int v8 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            unint64_t v13 = v3[1] + 1;
            uint64_t result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v13);
            int v8 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + 4) = v8;
          }
LABEL_24:
          unint64_t v15 = v3 + 3;
          if ((v8 & 1) == 0) {
            unint64_t v15 = (void *)v3[4];
          }
          unint64_t v16 = v3[1];
          v15[v16++] = v6;
          v3[1] = v16;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v16 < a2);
      }
    }
  }
  else
  {
  }
  return result;
}

uint64_t re::BucketArray<re::ecs2::PortalManagerStateTracking::buildWorldIdsForEntityHierarchy(re::ecs2::Entity const*)::EntityWorldId,32ul>::operator[](uint64_t a1, unint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1011, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(void *)(a1 + 8) <= a2 >> 5) {
    goto LABEL_8;
  }
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v3 = a1 + 24;
  }
  else {
    uint64_t v3 = *(void *)(a1 + 32);
  }
  return *(void *)(v3 + 8 * (a2 >> 5)) + 16 * (a2 & 0x1F);
}

uint64_t re::HashSetBase<re::ecs2::Component const*,re::ecs2::Component const*,re::internal::ValueAsKey<re::ecs2::Component const*>,re::Hash<re::ecs2::Component const*>,re::EqualTo<re::ecs2::Component const*>,true,false>::addAsCopy(uint64_t a1, unsigned int a2, unint64_t a3, void *a4)
{
  uint64_t v7 = *(unsigned int *)(a1 + 36);
  if (v7 == 0x7FFFFFFF)
  {
    uint64_t v7 = *(unsigned int *)(a1 + 32);
    int v8 = v7;
    if (v7 == *(_DWORD *)(a1 + 24))
    {
      re::HashSetBase<re::internal::TimelineTree *,re::internal::TimelineTree *,re::internal::ValueAsKey<re::internal::TimelineTree *>,re::Hash<re::internal::TimelineTree *>,re::EqualTo<re::internal::TimelineTree *>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v8 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v8 + 1;
    uint64_t v9 = *(void *)(a1 + 16);
    int v10 = *(_DWORD *)(v9 + 24 * v7 + 8);
  }
  else
  {
    uint64_t v9 = *(void *)(a1 + 16);
    int v10 = *(_DWORD *)(v9 + 24 * v7 + 8);
    *(_DWORD *)(a1 + 36) = v10 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v9 + 24 * v7 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v10 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + 24 * v7 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 24 * v7 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 24 * v7) = a3;
  *(void *)(*(void *)(a1 + 16) + 24 * v7 + 16) = *a4;
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v7;
  ++*(_DWORD *)(a1 + 28);
  return v7;
}

void re::HashBrown<unsigned long long,re::HashSet<re::ecs2::Component const*,re::Hash<re::ecs2::Component const*>,re::EqualTo<re::ecs2::Component const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::internalAdd(_anonymous_namespace_ *a1, uint64_t *a2, uint64_t a3)
{
  if (!*((void *)a1 + 7))
  {
  }
  uint64_t v6 = *((void *)a1 + 4);
  if (!v6 || (unint64_t v7 = *((void *)a1 + 2), v7 > 8 * v6))
  {
    re::HashBrown<unsigned long long,re::HashSet<re::ecs2::Component const*,re::Hash<re::ecs2::Component const*>,re::EqualTo<re::ecs2::Component const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::resize((long long *)a1, 1u);
    unint64_t v7 = *((void *)a1 + 2);
  }
  unint64_t v8 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  unint64_t v9 = (0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) ^ ((0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) >> 31);
  unint64_t v10 = v7 >> 4;
  unint64_t v11 = v9 % (v7 >> 4);
  uint64_t v12 = *(void *)a1;
  unint64_t v13 = __clz(__rbit64(*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*(void *)a1 + 16 * v11)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800)));
  if (v13 >= 0x40)
  {
    do
    {
      if (v11 + 1 == v10) {
        unint64_t v11 = 0;
      }
      else {
        ++v11;
      }
      unint64_t v13 = __clz(__rbit64(*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v12 + 16 * v11)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800)));
    }
    while (v13 > 0x3F);
  }
  uint64_t v14 = v12 + 16 * v11;
  int v15 = *(unsigned __int8 *)(v14 + v13);
  *(unsigned char *)(v14 + v13) = v9 & 0x7F;
  unint64_t v16 = v13 + 16 * v11;
  uint64_t v18 = *(void *)a3;
  uint64_t v17 = *(void *)(a3 + 8);
  uint64_t v40 = *a2;
  uint64_t v41 = *(void *)a3;
  *(void *)a3 = 0;
  *(void *)(a3 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
  uint64_t v19 = *(void *)(a3 + 16);
  *(void *)&long long v42 = v17;
  *((void *)&v42 + 1) = v19;
  *(void *)(a3 + 16) = 0;
  unsigned int v20 = *(_DWORD *)(a3 + 24);
  unsigned int v21 = *(_DWORD *)(a3 + 28);
  *(void *)&long long v43 = __PAIR64__(v21, v20);
  uint64_t v23 = *(unsigned int *)(a3 + 32);
  int v22 = *(_DWORD *)(a3 + 36);
  DWORD2(v43) = *(_DWORD *)(a3 + 32);
  HIDWORD(v43) = v22;
  int v44 = 0;
  *(_OWORD *)(a3 + 24) = xmmword_23436F740;
  uint64_t v24 = *((void *)a1 + 1);
  *(void *)(v24 + 56 * v16) = v40;
  uint64_t v25 = v24 + 56 * v16 + 8;
  if (*(void *)v25) {
    BOOL v26 = *(void *)v25 == v18;
  }
  else {
    BOOL v26 = 1;
  }
  if (v26)
  {
    uint64_t v41 = *(void *)(v24 + 56 * v16 + 8);
    long long v27 = *(_OWORD *)(v24 + 56 * v16 + 16);
    *(void *)uint64_t v25 = v18;
    *(void *)(v24 + 56 * v16 + 16) = v17;
    *(void *)(v24 + 56 * v16 + 24) = v19;
    long long v28 = *(_OWORD *)(v24 + 56 * v16 + 32);
    *(_DWORD *)(v24 + 56 * v16 + 32) = v20;
    *(_DWORD *)(v24 + 56 * v16 + 36) = v21;
    *(_DWORD *)(v24 + 56 * v16 + 40) = v23;
    *(_DWORD *)(v24 + 56 * v16 + 44) = v22;
    long long v42 = v27;
    long long v43 = v28;
  }
  else
  {
    if (*(_DWORD *)(v24 + 56 * v16 + 36))
    {
      uint64_t v29 = *(unsigned int *)(v24 + 56 * v16 + 32);
      if (v29) {
        memset_pattern16(*(void **)(v24 + 56 * v16 + 16), &unk_2343655D0, 4 * v29);
      }
      uint64_t v30 = *(unsigned int *)(v25 + 32);
      if (v30)
      {
        uint64_t v31 = 0;
        uint64_t v32 = 24 * v30;
        do
        {
          uint64_t v33 = *(void *)(v25 + 16) + v31;
          int v34 = *(_DWORD *)(v33 + 8);
          if (v34 < 0) {
            *(_DWORD *)(v33 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v34 & 0x7FFFFFFF;
          }
          v31 += 24;
        }
        while (v32 != v31);
      }
      *(_DWORD *)(v25 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 28) = 0;
      *(_DWORD *)(v25 + 32) = 0;
      int v35 = *(_DWORD *)(v25 + 40) + 1;
      *(_DWORD *)(v25 + 36) = 0x7FFFFFFF;
      *(_DWORD *)(v25 + 40) = v35;
    }
    if (v18)
    {
      if (*(_DWORD *)(v25 + 24) < v21) {
        re::HashSetBase<re::internal::TimelineTree *,re::internal::TimelineTree *,re::internal::ValueAsKey<re::internal::TimelineTree *>,re::Hash<re::internal::TimelineTree *>,re::EqualTo<re::internal::TimelineTree *>,true,false>::setCapacity(v25, v21);
      }
      if (v23)
      {
        unint64_t v36 = (void *)(v19 + 16);
        do
        {
          if ((*(_DWORD *)(v36 - 1) & 0x80000000) != 0) {
            re::HashSetBase<re::ecs2::Component const*,re::ecs2::Component const*,re::internal::ValueAsKey<re::ecs2::Component const*>,re::Hash<re::ecs2::Component const*>,re::EqualTo<re::ecs2::Component const*>,true,false>::addAsCopy(v25, *(v36 - 2) % (unint64_t)*(unsigned int *)(v25 + 24), *(v36 - 2), v36);
          }
          v36 += 3;
          --v23;
        }
        while (v23);
      }
      ++*(_DWORD *)(v25 + 40);
    }
  }
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit(&v41);
  uint64_t v37 = *((void *)a1 + 4) - (v15 == 255);
  ++*((void *)a1 + 3);
  *((void *)a1 + 4) = v37;
  unint64_t v38 = *(void *)(*((void *)a1 + 1) + 56 * v16);
  unint64_t v39 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (v38 ^ (v38 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v38 ^ (v38 >> 30))) >> 27));
  *((void *)a1 + 5) ^= (v39 >> 31) ^ v39;
}

void re::HashBrown<unsigned long long,re::HashSet<re::ecs2::Component const*,re::Hash<re::ecs2::Component const*>,re::EqualTo<re::ecs2::Component const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::resize(long long *a1, unsigned int a2)
{
  unint64_t v3 = *((void *)a1 + 2);
  uint64_t v4 = *((void *)a1 + 3) + a2;
  unint64_t v5 = (((unint64_t)(151 * v4) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  unint64_t v6 = ((3 * v3) >> 1) & 0x1FFFFFFFFFFFFFFLL;
  if (v5 > (192 * v3) >> 7) {
    unint64_t v6 = (((unint64_t)(151 * v4) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  }
  unint64_t v7 = (v6 << 7) / 0x97;
  uint64_t v8 = *((void *)a1 + 7);
  long long v27 = 0u;
  *(_OWORD *)long long v28 = 0u;
  if (v5 > v3) {
    uint64_t v9 = v7;
  }
  else {
    uint64_t v9 = v4;
  }
  memset(&v28[16], 0, 32);
  re::HashBrown<unsigned long long,re::HashSet<re::ecs2::PortalComponent const*,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::init(&v27, v8, v9);
  unint64_t v10 = *((void *)a1 + 2);
  if (v10 >= 0x10)
  {
    uint64_t v11 = 0;
    unint64_t v12 = v10 >> 4;
    while (1)
    {
      unsigned __int16 v13 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*(void *)a1 + v11)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800).u16[0];
      unint64_t v14 = (unsigned __int16)~v13;
      if (v13 != 0xFFFF) {
        break;
      }
      v11 += 16;
      if (!--v12) {
        goto LABEL_12;
      }
    }
    unint64_t v15 = __clz(__rbit64(v14)) + v11;
    while (v15 != -1)
    {
      re::HashBrown<unsigned long long,re::HashSet<re::ecs2::Component const*,re::Hash<re::ecs2::Component const*>,re::EqualTo<re::ecs2::Component const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::internalAdd(&v27, *((void *)a1 + 1) + 56 * v15, *((void *)a1 + 1) + 56 * v15 + 8);
      unint64_t v22 = v15 >> 4;
      unint64_t v10 = *((void *)a1 + 2);
      if (v15 >> 4 >= v10 >> 4) {
        break;
      }
      unint64_t v23 = __clz(__rbit64((-2 << (v15 & 0xF)) & v14));
      if (v23 >= 0x40)
      {
        uint64_t v24 = 16 * v22;
        unint64_t v25 = ~v22 + (v10 >> 4);
        while (v25)
        {
          unint64_t v14 = (unsigned __int16)~*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*(void *)a1 + v24 + 16)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800);
          unint64_t v26 = __clz(__rbit64(v14));
          v24 += 16;
          --v25;
          if (v26 <= 0x3F)
          {
            unint64_t v15 = v26 + v24;
            goto LABEL_20;
          }
        }
        break;
      }
      unint64_t v15 = v23 + (v15 & 0xFFFFFFFFFFFFFFF0);
LABEL_20:
      ;
    }
  }
LABEL_12:
  uint64_t v16 = *(void *)&v28[40];
  *(void *)&v28[40] = *((void *)a1 + 7);
  long long v17 = v27;
  long long v18 = *(_OWORD *)v28;
  long long v27 = *a1;
  *(void *)long long v28 = v10;
  long long v19 = *(_OWORD *)&v28[16];
  long long v20 = *(long long *)((char *)a1 + 40);
  *((void *)a1 + 6) = *(void *)&v28[32];
  *((void *)a1 + 7) = v16;
  *(_OWORD *)&v28[24] = v20;
  long long v21 = *(long long *)((char *)a1 + 24);
  *a1 = v17;
  a1[1] = v18;
  a1[2] = v19;
  *(_OWORD *)&v28[8] = v21;
  re::HashBrown<unsigned long long,re::HashSet<re::ecs2::PortalComponent const*,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)&v27);
}

uint64_t re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::add(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  unint64_t v6 = (0x94D049BB133111EBLL * (v5 ^ (v5 >> 27))) ^ ((0x94D049BB133111EBLL * (v5 ^ (v5 >> 27))) >> 31);
  unint64_t v7 = *(unsigned int *)(a1 + 24);
  if (!v7)
  {
    LODWORD(vre::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
    goto LABEL_8;
  }
  unint64_t v8 = v6 % v7;
  uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * (v6 % v7));
  if (v9 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v12 = re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::addAsCopy(a1, v8, v6, (uint64_t)a2, a2);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v11 = *(void *)(a1 + 16) + 16 * v12;
    return v11 + 8;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  while (*(void *)(v10 + 16 * v9 + 8) != v4)
  {
    uint64_t v9 = *(_DWORD *)(v10 + 16 * v9) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  uint64_t v11 = v10 + 16 * v9;
  return v11 + 8;
}

void re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  unint64_t v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    unint64_t v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    unint64_t v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      unint64_t v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  unsigned int v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + 16 * v10, 16);
  if (v12)
  {
    unint64_t v14 = v12;
    *(void *)(a1 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &unk_2343655D0, 4 * v10);
    }
    *(void *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 601);
    _os_crash();
    __break(1u);
  }
}

uint64_t re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::addAsCopy(uint64_t a1, unsigned int a2, unint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v7 = *(unsigned int *)(a1 + 36);
  if (v7 == 0x7FFFFFFF)
  {
    uint64_t v7 = *(unsigned int *)(a1 + 32);
    int v8 = v7;
    if (v7 == *(_DWORD *)(a1 + 24))
    {
      re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v8 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v8 + 1;
    uint64_t v10 = *(void *)(a1 + 16);
    int v11 = *(_DWORD *)(v10 + 16 * v7);
  }
  else
  {
    uint64_t v10 = *(void *)(a1 + 16);
    int v11 = *(_DWORD *)(v10 + 16 * v7);
    *(_DWORD *)(a1 + 36) = v11 & 0x7FFFFFFF;
  }
  uint64_t v12 = 16 * v7;
  *(_DWORD *)(v10 + v12) = v11 | 0x80000000;
  uint64_t v13 = *(void *)(a1 + 8);
  *(_DWORD *)(*(void *)(a1 + 16) + v12) = *(_DWORD *)(*(void *)(a1 + 16) + 16 * v7) & 0x80000000 | *(_DWORD *)(v13 + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 16 * v7 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = *a5;
  *(_DWORD *)(v13 + 4 * a2) = v7;
  ++*(_DWORD *)(a1 + 28);
  return v7;
}

void re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v15, 0, 36);
      *(void *)&v15[36] = 0x7FFFFFFFLL;
      re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::init((uint64_t)v15, v4, a2);
      long long v5 = *(_OWORD *)v15;
      *(_OWORD *)unint64_t v15 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      uint64_t v6 = *(void *)&v15[16];
      *(void *)&v15[16] = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = v6;
      long long v8 = *(_OWORD *)&v15[24];
      *(_OWORD *)&v15[24] = *(_OWORD *)(a1 + 24);
      unsigned int v7 = *(_DWORD *)&v15[32];
      *(_OWORD *)(a1 + 24) = v8;
      unsigned int v9 = v7;
      if (v7)
      {
        uint64_t v10 = 0;
        unint64_t v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(void *)&v15[16] + v10) & 0x80000000) != 0)
          {
            unint64_t v12 = 0xBF58476D1CE4E5B9
                * (*(void *)(*(void *)&v15[16] + v10 + 8) ^ (*(void *)(*(void *)&v15[16] + v10 + 8) >> 30));
            unint64_t v13 = (0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) ^ ((0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) >> 31);
            re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::addAsCopy(a1, v13 % *(unsigned int *)(a1 + 24), v13, *(void *)&v15[16] + v10 + 8, *(void *)&v15[16] + v10 + 8);
            unsigned int v9 = *(_DWORD *)&v15[32];
          }
          ++v11;
          v10 += 16;
        }
        while (v11 < v9);
      }
      re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::deinit((uint64_t *)v15);
    }
  }
  else
  {
    if (a2) {
      signed int v14 = a2;
    }
    else {
      signed int v14 = 3;
    }
  }
}

uint64_t re::DynamicInlineArray<unsigned long long,8ul>::ensureCapacity(void *a1, uint64_t a2)
{
  if (*a1 <= 7uLL) {
    return 1;
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Capacity limit reached. DynamicInlineArray<T,N> cannot be resized.", "false", "ensureCapacity", 277);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::HashBrown<unsigned long long,re::ecs2::PortalServiceQuery::WorldType,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::resize(uint64_t *a1, unsigned int a2)
{
  unint64_t v3 = a1[2];
  uint64_t v4 = a1[3] + a2;
  unint64_t v5 = (((unint64_t)(151 * v4) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  unint64_t v6 = ((3 * v3) >> 1) & 0x1FFFFFFFFFFFFFFLL;
  if (v5 > (192 * v3) >> 7) {
    unint64_t v6 = (((unint64_t)(151 * v4) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  }
  unint64_t v7 = (v6 << 7) / 0x97;
  uint64_t v8 = a1[7];
  long long v51 = 0u;
  *(_OWORD *)unint64_t v52 = 0u;
  if (v5 > v3) {
    uint64_t v9 = v7;
  }
  else {
    uint64_t v9 = v4;
  }
  memset(&v52[16], 0, 32);
  uint64_t v10 = (_anonymous_namespace_ *)re::HashBrown<unsigned long long,re::ecs2::PortalServiceQuery::WorldType,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::init(&v51, v8, v9);
  unint64_t v11 = a1[2];
  if (v11 >= 0x10)
  {
    uint64_t v12 = 0;
    unint64_t v13 = v11 >> 4;
    int8x16_t v14 = (int8x16_t)xmmword_2343680E0;
    while (1)
    {
      unsigned __int16 v15 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*a1 + v12)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800).u16[0];
      unint64_t v16 = (unsigned __int16)~v15;
      if (v15 != 0xFFFF) {
        break;
      }
      v12 += 16;
      if (!--v13) {
        goto LABEL_12;
      }
    }
    unint64_t v17 = __clz(__rbit64(v16)) + v12;
    while (v17 != -1)
    {
      uint64_t v28 = a1[1];
      if (!*(void *)&v52[40])
      {
        int8x16_t v50 = v14;
        int8x16_t v14 = v50;
      }
      if (!*(void *)&v52[16]
        || (unint64_t v29 = *(void *)v52, *(void *)v52 > (unint64_t)(8 * *(void *)&v52[16])))
      {
        int8x16_t v49 = v14;
        uint64_t v10 = (_anonymous_namespace_ *)re::HashBrown<unsigned long long,re::ecs2::PortalServiceQuery::WorldType,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::resize(&v51, 1);
        int8x16_t v14 = v49;
        unint64_t v29 = *(void *)v52;
      }
      uint64_t v30 = (void *)(v28 + 16 * v17);
      unint64_t v31 = 0xBF58476D1CE4E5B9 * (*v30 ^ (*v30 >> 30));
      unint64_t v32 = (0x94D049BB133111EBLL * (v31 ^ (v31 >> 27))) ^ ((0x94D049BB133111EBLL * (v31 ^ (v31 >> 27))) >> 31);
      unint64_t v33 = v29 >> 4;
      unint64_t v34 = v32 % (v29 >> 4);
      unint64_t v35 = __clz(__rbit64(*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v51 + 16 * v34)), v14)))), (int8x8_t)0x3830282018100800)));
      if (v35 >= 0x40)
      {
        do
        {
          if (v34 + 1 == v33) {
            unint64_t v34 = 0;
          }
          else {
            ++v34;
          }
          unint64_t v35 = __clz(__rbit64(*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v51 + 16 * v34)), v14)))), (int8x8_t)0x3830282018100800)));
        }
        while (v35 > 0x3F);
      }
      unint64_t v36 = (int *)(v30 + 1);
      uint64_t v37 = v51 + 16 * v34;
      uint64_t v38 = *(unsigned __int8 *)(v37 + v35) == 255;
      *(unsigned char *)(v37 + v35) = v32 & 0x7F;
      unint64_t v39 = *v30;
      int v40 = *v36;
      uint64_t v41 = *(void *)&v52[8];
      uint64_t v42 = *((void *)&v51 + 1) + 16 * (v35 + 16 * v34);
      *(void *)uint64_t v42 = v39;
      *(_DWORD *)(v42 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v40;
      *(void *)&v52[8] = v41 + 1;
      *(void *)&v52[16] -= v38;
      unint64_t v43 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * (v39 ^ (v39 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v39 ^ (v39 >> 30))) >> 27));
      *(void *)&v52[24] ^= (v43 >> 31) ^ v43;
      unint64_t v44 = v17 >> 4;
      unint64_t v11 = a1[2];
      if (v17 >> 4 >= v11 >> 4) {
        break;
      }
      unint64_t v45 = __clz(__rbit64((-2 << (v17 & 0xF)) & v16));
      if (v45 >= 0x40)
      {
        uint64_t v46 = 16 * v44;
        unint64_t v47 = ~v44 + (v11 >> 4);
        while (v47)
        {
          unint64_t v16 = (unsigned __int16)~*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*a1 + v46 + 16)), v14)))), (int8x8_t)0x3830282018100800);
          unint64_t v48 = __clz(__rbit64(v16));
          v46 += 16;
          --v47;
          if (v48 <= 0x3F)
          {
            unint64_t v17 = v48 + v46;
            goto LABEL_32;
          }
        }
        break;
      }
      unint64_t v17 = v45 + (v17 & 0xFFFFFFFFFFFFFFF0);
LABEL_32:
      ;
    }
  }
LABEL_12:
  uint64_t v19 = *(void *)&v52[40];
  *(void *)&v52[40] = a1[7];
  uint64_t result = *(void *)&v52[40];
  long long v20 = v51;
  long long v21 = *(_OWORD *)v52;
  *(void *)unint64_t v52 = v11;
  uint64_t v22 = *a1;
  uint64_t v23 = a1[1];
  *(void *)&long long v51 = *a1;
  *((void *)&v51 + 1) = v23;
  long long v24 = *(_OWORD *)&v52[16];
  long long v25 = *(_OWORD *)(a1 + 5);
  a1[6] = *(void *)&v52[32];
  a1[7] = v19;
  *(_OWORD *)&unsigned char v52[24] = v25;
  long long v26 = *(_OWORD *)(a1 + 3);
  *(_OWORD *)a1 = v20;
  *((_OWORD *)a1 + 1) = v21;
  *((_OWORD *)a1 + 2) = v24;
  *(_OWORD *)&v52[8] = v26;
  if (result)
  {
    if (v23) {
      *((void *)&v51 + 1) = 0;
    }
    if (v22)
    {
      long long v27 = *(uint64_t (**)(void))(*(void *)result + 40);
      return v27();
    }
  }
  return result;
}

void *re::HashBrown<unsigned long long,re::ecs2::PortalServiceQuery::WorldType,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::init(void *result, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = result;
  result[7] = a2;
  unint64_t v4 = 151 * a3;
  unint64_t v5 = ((unint64_t)(151 * a3) >> 7) + 15;
  result[2] = v5 & 0x3FFFFFFFFFFFFF0;
  if ((v5 & 0x3FFFFFFFFFFFFF0) != 0)
  {
    unint64_t v6 = v5 >> 4;
    uint64_t result = (void *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a2 + 32))(a2, 17 * (v5 & 0x3FFFFFFFFFFFFF0), 16);
    *unint64_t v3 = result;
    if (v4 >= 0x80)
    {
      uint64_t v7 = 0;
      *(void *)&long long v8 = -1;
      *((void *)&v8 + 1) = -1;
      do
        *(_OWORD *)(*v3 + 16 * v7++) = v8;
      while (v6 != v7);
      uint64_t result = (void *)*v3;
    }
    uint64_t v9 = &result[2 * v6];
    v3[1] = v9;
    uint64_t v10 = v3[2];
    if (v10)
    {
      unint64_t v11 = v9 + 1;
      uint64_t v12 = v3[2];
      do
      {
        *((void *)v11 - 1) = 0;
        *unint64_t v11 = 0;
        v11 += 4;
        --v12;
      }
      while (v12);
    }
  }
  else
  {
    uint64_t v10 = 0;
    *uint64_t result = 0;
    result[1] = 0;
  }
  v3[5] = 0;
  v3[6] = 0;
  v3[3] = 0;
  v3[4] = v10;
  return result;
}

uint64_t (***re::ecs2::HierarchyStateTracking<unsigned long long>::subscribeToEventToInvalidateEntityHierarchy<REComponentDidChangeEvent>(re *a1, re::EventBus *a2, uint64_t a3, uint64_t a4))(void)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v15 = re::globalAllocators(a1)[2];
  long long v8 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v15 + 32))(v15, 32, 0);
  *long long v8 = &unk_26E6F8AF0;
  v8[1] = a1;
  v8[2] = re::ecs2::HierarchyStateTracking<unsigned long long>::invalidateEntityHierarchyEventHandler<REComponentDidChangeEvent>;
  v8[3] = 0;
  unint64_t v16 = v8;
  uint64_t v9 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(a2, (uint64_t)v14, a4, 0);
  uint64_t v11 = v10;
  uint64_t v12 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a3);
  *uint64_t v12 = v9;
  v12[1] = v11;
  return re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v14);
}

uint64_t (***re::ecs2::HierarchyStateTracking<unsigned long long>::subscribeToEventToInvalidateEntityHierarchy<REComponentDidActivateEvent>(re *a1, re::EventBus *a2, uint64_t a3, uint64_t a4))(void)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v15 = re::globalAllocators(a1)[2];
  long long v8 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v15 + 32))(v15, 32, 0);
  *long long v8 = &unk_26E6F8B48;
  v8[1] = a1;
  v8[2] = re::ecs2::HierarchyStateTracking<unsigned long long>::invalidateEntityHierarchyEventHandler<REComponentDidActivateEvent>;
  v8[3] = 0;
  unint64_t v16 = v8;
  uint64_t v9 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(a2, (uint64_t)v14, a4, 0);
  uint64_t v11 = v10;
  uint64_t v12 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a3);
  *uint64_t v12 = v9;
  v12[1] = v11;
  return re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v14);
}

uint64_t (***re::ecs2::HierarchyStateTracking<unsigned long long>::subscribeToEventToInvalidateEntityHierarchy<REComponentWillDeactivateEvent>(re *a1, re::EventBus *a2, uint64_t a3, uint64_t a4))(void)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v15 = re::globalAllocators(a1)[2];
  long long v8 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v15 + 32))(v15, 32, 0);
  *long long v8 = &unk_26E6F8BA0;
  v8[1] = a1;
  v8[2] = re::ecs2::HierarchyStateTracking<unsigned long long>::invalidateEntityHierarchyEventHandler<REComponentWillDeactivateEvent>;
  v8[3] = 0;
  unint64_t v16 = v8;
  uint64_t v9 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(a2, (uint64_t)v14, a4, 0);
  uint64_t v11 = v10;
  uint64_t v12 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a3);
  *uint64_t v12 = v9;
  v12[1] = v11;
  return re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v14);
}

uint64_t (***re::ecs2::HierarchyStateTracking<unsigned long long>::subscribeToEventToInvalidateEntityHierarchy<RESceneEntityDidReparentEvent>(re *a1, re::EventBus *a2, uint64_t a3, uint64_t a4))(void)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v15 = re::globalAllocators(a1)[2];
  long long v8 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v15 + 32))(v15, 32, 0);
  *long long v8 = &unk_26E6F8BF8;
  v8[1] = a1;
  v8[2] = re::ecs2::HierarchyStateTracking<unsigned long long>::invalidateEntityHierarchyEventHandler<RESceneEntityDidReparentEvent>;
  v8[3] = 0;
  unint64_t v16 = v8;
  uint64_t v9 = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityDidReparentEvent>(a2, (uint64_t)v14, a4, 0);
  uint64_t v11 = v10;
  uint64_t v12 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a3);
  *uint64_t v12 = v9;
  v12[1] = v11;
  return re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::destroyCallable((uint64_t)v14);
}

uint64_t (***re::ecs2::HierarchyStateTracking<unsigned long long>::subscribeToEventToInvalidateEntityHierarchy<RESceneEntityDidActivateEvent>(re *a1, re::EventBus *a2, uint64_t a3, uint64_t a4))(void)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v15 = re::globalAllocators(a1)[2];
  long long v8 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v15 + 32))(v15, 32, 0);
  *long long v8 = &unk_26E6F8C50;
  v8[1] = a1;
  v8[2] = re::ecs2::HierarchyStateTracking<unsigned long long>::invalidateEntityHierarchyEventHandler<RESceneEntityDidActivateEvent>;
  v8[3] = 0;
  unint64_t v16 = v8;
  uint64_t v9 = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityDidActivateEvent>(a2, (uint64_t)v14, a4, 0);
  uint64_t v11 = v10;
  uint64_t v12 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a3);
  *uint64_t v12 = v9;
  v12[1] = v11;
  return re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)>::destroyCallable((uint64_t)v14);
}

uint64_t (***re::ecs2::HierarchyStateTracking<unsigned long long>::subscribeToEventToInvalidateEntityHierarchy<RESceneEntityWillDeactivateEvent>(re *a1, re::EventBus *a2, uint64_t a3, uint64_t a4))(void)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v15 = re::globalAllocators(a1)[2];
  long long v8 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v15 + 32))(v15, 32, 0);
  *long long v8 = &unk_26E6F8CA8;
  v8[1] = a1;
  v8[2] = re::ecs2::HierarchyStateTracking<unsigned long long>::invalidateEntityHierarchyEventHandler<RESceneEntityWillDeactivateEvent>;
  v8[3] = 0;
  unint64_t v16 = v8;
  uint64_t v9 = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityWillDeactivateEvent>(a2, (uint64_t)v14, a4, 0);
  uint64_t v11 = v10;
  uint64_t v12 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a3);
  *uint64_t v12 = v9;
  v12[1] = v11;
  return re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::destroyCallable((uint64_t)v14);
}

uint64_t re::ecs2::HierarchyStateTracking<unsigned long long>::invalidateEntityHierarchyEventHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  if (!*(unsigned char *)(a2 + 371)
    && (*(unsigned char *)(a2 + 288) & 1) != 0
    && !re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a1 + 200, &v4))
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 40))(a1, v4);
    re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add(a1 + 104, &v4);
  }
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<unsigned long long>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<unsigned long long>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<unsigned long long>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<unsigned long long>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(void *a1, void *a2)
{
  unint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    unint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<unsigned long long>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<unsigned long long>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6F8AF0;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<unsigned long long>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<unsigned long long>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6F8AF0;
  *(void *)(a2 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<unsigned long long>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<unsigned long long>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

uint64_t re::ecs2::HierarchyStateTracking<unsigned long long>::invalidateEntityHierarchyEventHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  if (!*(unsigned char *)(a2 + 371)
    && (*(unsigned char *)(a2 + 288) & 1) != 0
    && !re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a1 + 200, &v4))
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 40))(a1, v4);
    re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add(a1 + 104, &v4);
  }
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<unsigned long long>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<unsigned long long>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<unsigned long long>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<unsigned long long>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<unsigned long long>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<unsigned long long>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6F8B48;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<unsigned long long>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<unsigned long long>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6F8B48;
  *(void *)(a2 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<unsigned long long>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<unsigned long long>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

uint64_t re::ecs2::HierarchyStateTracking<unsigned long long>::invalidateEntityHierarchyEventHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  if (!*(unsigned char *)(a2 + 371)
    && (*(unsigned char *)(a2 + 288) & 1) != 0
    && !re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a1 + 200, &v4))
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 40))(a1, v4);
    re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add(a1 + 104, &v4);
  }
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<unsigned long long>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<unsigned long long>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<unsigned long long>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<unsigned long long>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<unsigned long long>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<unsigned long long>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6F8BA0;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<unsigned long long>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<unsigned long long>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6F8BA0;
  *(void *)(a2 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<unsigned long long>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<unsigned long long>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

uint64_t re::ecs2::HierarchyStateTracking<unsigned long long>::invalidateEntityHierarchyEventHandler<RESceneEntityDidReparentEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  if (!*(unsigned char *)(a2 + 371)
    && (*(unsigned char *)(a2 + 288) & 1) != 0
    && !re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a1 + 200, &v4))
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 40))(a1, v4);
    re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add(a1 + 104, &v4);
  }
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<unsigned long long>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<unsigned long long>::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<unsigned long long>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<unsigned long long>::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<unsigned long long>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<unsigned long long>::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6F8BF8;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<unsigned long long>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<unsigned long long>::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6F8BF8;
  *(void *)(a2 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<unsigned long long>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<unsigned long long>::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::size()
{
  return 32;
}

uint64_t re::ecs2::HierarchyStateTracking<unsigned long long>::invalidateEntityHierarchyEventHandler<RESceneEntityDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = a2;
  if (!*(unsigned char *)(a2 + 371))
  {
    uint64_t v3 = a1 + 200;
    (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
    re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add(a1 + 104, &v5);
    re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove(v3, &v5);
  }
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<unsigned long long>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<unsigned long long>::*)(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<unsigned long long>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<unsigned long long>::*)(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<unsigned long long>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<unsigned long long>::*)(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6F8C50;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<unsigned long long>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<unsigned long long>::*)(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6F8C50;
  *(void *)(a2 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<unsigned long long>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<unsigned long long>::*)(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)>::size()
{
  return 32;
}

uint64_t re::ecs2::HierarchyStateTracking<unsigned long long>::invalidateEntityHierarchyEventHandler<RESceneEntityWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = a2;
  uint64_t v3 = a1 + 200;
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove(a1 + 104, &v5);
  re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add(v3, &v5);
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<unsigned long long>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<unsigned long long>::*)(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<unsigned long long>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<unsigned long long>::*)(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<unsigned long long>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<unsigned long long>::*)(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6F8CA8;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<unsigned long long>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<unsigned long long>::*)(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6F8CA8;
  *(void *)(a2 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<unsigned long long>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<unsigned long long>::*)(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::PeerVideoStreamingManager::~PeerVideoStreamingManager(re::PeerVideoStreamingManager *this)
{
  if (*((unsigned char *)this + 32)) {
    re::PeerVideoStreamingManager::deinit(this);
  }
  re::Event<re::GeometricObjectBase>::~Event((void *)this + 28);
  re::HashTable<re::PeerVideoStreamId,re::StreamingInternal::StreamReadEnd,re::Hash<re::PeerVideoStreamId>,re::EqualTo<re::PeerVideoStreamId>,true,false>::deinit((uint64_t *)this + 22);
  re::HashTable<re::PeerVideoStreamId,re::StreamingInternal::StreamWriteEnd,re::Hash<re::PeerVideoStreamId>,re::EqualTo<re::PeerVideoStreamId>,true,false>::deinit((uint64_t *)this + 16);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 80);
  uint64_t v2 = (const void *)*((void *)this + 7);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 1);
  *((void *)this + 1) = 0;
}

{
  uint64_t vars8;

  re::PeerVideoStreamingManager::~PeerVideoStreamingManager(this);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::PeerVideoStreamingManager::deinit(re::PeerVideoStreamingManager *this)
{
  uint64_t v2 = *((void *)this + 12);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 14);
    uint64_t v4 = 8 * v2;
    do
    {
      v3 += 8;
      RESyncNetSessionRemoveObserver();
      v4 -= 8;
    }
    while (v4);
  }
  RESyncServiceRemoveObserver();
  RESyncRelease();
  uint64_t result = RESyncRelease();
  uint64_t v7 = *((void *)this + 28);
  unint64_t v6 = (char *)this + 224;
  if (v7)
  {
    return re::DynamicArray<unsigned long>::deinit((uint64_t)v6);
  }
  return result;
}

uint64_t ___ZN2re25PeerVideoStreamingManager15setupSessionObsEv_block_invoke(re *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  uint64_t v8 = *((void *)a1 + 4);
  uint64_t v9 = re::globalAllocators(a1)[2];
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v9 + 32))(v9, 40, 0);
  *(void *)uint64_t v10 = &unk_26E6F8DD0;
  *(void *)(v10 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v8;
  *(void *)(v10 + 16) = a3;
  *(void *)(v10 + 24) = a4;
  *(_DWORD *)(v10 + 32) = a5;
  v26[0] = &unk_26E7161C0;
  v26[1] = a4;
  v26[2] = a4;
  v26[3] = a4 + a5;
  re::OPackReader::OPackReader((uint64_t)v27, (uint64_t)v26);
  uint64_t v12 = (re *)re::OPackReader::next((re::OPackReader *)v27, v11);
  if (!v12 || v30 != 12)
  {
    long long v18 = *re::peerVideoStreamingLogObjects(v12);
    if (!os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
      goto LABEL_33;
    }
    LOWORD(v23) = 0;
    uint64_t v19 = "Failed to read message. Unexpected OPack type. Skipping reading payload.";
    long long v20 = (uint8_t *)&v23;
    goto LABEL_39;
  }
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  int v25 = 0;
  int8x16_t v14 = (re *)re::OPackReader::next((re::OPackReader *)v27, v13);
  if (v14 && v30 == 13)
  {
    while (1)
    {
      int8x16_t v14 = (re *)re::OPackReader::next((re::OPackReader *)v27, v15);
      if (!v14 || v30 != 6) {
        break;
      }
      if (v31 == 1)
      {
        int8x16_t v14 = (re *)re::OPackReader::next((re::OPackReader *)v27, v16);
        if (!v14 || v30 != 6) {
          goto LABEL_32;
        }
        int v25 = v31;
      }
      else if ((_BYTE)v31)
      {
        re::OPackReader::next((re::OPackReader *)v27, v16);
      }
      else
      {
        int8x16_t v14 = (re *)re::OPackReader::next((re::OPackReader *)v27, v16);
        if (!v14 || v30 != 13) {
          goto LABEL_32;
        }
        while (1)
        {
          int8x16_t v14 = (re *)re::OPackReader::next((re::OPackReader *)v27, v17);
          if (!v14 || v30 != 6) {
            break;
          }
          if (v31 == 1)
          {
            int8x16_t v14 = (re *)re::OPackReader::next((re::OPackReader *)v27, v15);
            if (!v14 || v30 != 6) {
              goto LABEL_32;
            }
            uint64_t v24 = v31;
          }
          else if ((_BYTE)v31)
          {
            re::OPackReader::next((re::OPackReader *)v27, v15);
          }
          else
          {
            int8x16_t v14 = (re *)re::OPackReader::next((re::OPackReader *)v27, v15);
            if (!v14 || v30 != 6) {
              goto LABEL_32;
            }
            uint64_t v23 = v31;
          }
        }
        if (v29 != 5) {
          goto LABEL_32;
        }
      }
    }
    if (v29 == 5)
    {
      (*(void (**)(uint64_t, uint64_t *, unsigned char *))(*(void *)v10 + 16))(v10, &v23, v27);
      goto LABEL_33;
    }
  }
LABEL_32:
  long long v18 = *re::peerVideoStreamingLogObjects(v14);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
  {
    __int16 v22 = 0;
    uint64_t v19 = "Failed to read message header. Skipping reading payload.";
    long long v20 = (uint8_t *)&v22;
LABEL_39:
    _os_log_error_impl(&dword_233120000, v18, OS_LOG_TYPE_ERROR, v19, v20, 2u);
  }
LABEL_33:
  if (v33)
  {
    if (v37) {
      (*(void (**)(uint64_t))(*(void *)v33 + 40))(v33);
    }
    uint64_t v37 = 0;
    uint64_t v34 = 0;
    uint64_t v35 = 0;
    uint64_t v33 = 0;
    ++v36;
  }
  re::OPackReader::Buffer::~Buffer((re::OPackReader::Buffer *)&v32);
  re::zerocopy::BufferedReadStream::~BufferedReadStream((re::zerocopy::BufferedReadStream *)&v28);
  (**(void (***)(uint64_t))v10)(v10);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v9 + 40))(v9, v10);
}

uint64_t ___ZN2re25PeerVideoStreamingManager15setupSessionObsEv_block_invoke_2(uint64_t a1)
{
  uint64_t v61 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t result = RESyncParticipantGetPeerID();
  uint64_t v53 = result;
  uint64_t v3 = *(unsigned int *)(v1 + 160);
  if (v3)
  {
    uint64_t v4 = 0;
    uint64_t v5 = (_DWORD *)(*(void *)(v1 + 144) + 8);
    while ((*v5 & 0x80000000) == 0)
    {
      v5 += 84;
      if (v3 == ++v4)
      {
        LODWORD(v4) = *(_DWORD *)(v1 + 160);
        break;
      }
    }
  }
  else
  {
    LODWORD(v4) = 0;
  }
  if (v3 != v4)
  {
    uint64_t v6 = v4;
    do
    {
      uint64_t v7 = *(void *)(v1 + 144) + 336 * v6;
      uint64_t result = re::DynamicArray<unsigned long long>::remove(v7 + 32, &v53);
      if (result)
      {
        uint64_t v8 = *re::peerVideoStreamingLogObjects((re *)result);
        uint64_t result = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
        if (result)
        {
          uint64_t v9 = (uint64_t *)(v7 + 16);
          uint64_t v10 = v53;
          uint64_t v12 = *v9;
          uint64_t v11 = v9[1];
          uint64_t v13 = v8;
          re::DynamicString::format((re::DynamicString *)"%llu_%llu", (re::DynamicString *)&v48, v12, v11);
          int8x16_t v14 = (v49 & 1) != 0 ? v50 : (char *)&v49 + 1;
          *(_DWORD *)__n128 buf = 134218242;
          *(void *)&buf[4] = v10;
          __int16 v55 = 2080;
          *(void *)unint64_t v56 = v14;
          _os_log_impl(&dword_233120000, v13, OS_LOG_TYPE_DEFAULT, "Peer %llu left. Removed as client from write end: %s", buf, 0x16u);

          uint64_t result = (uint64_t)v48;
          if (v48)
          {
            if (v49) {
              uint64_t result = (*(uint64_t (**)(void))(*v48 + 40))();
            }
          }
        }
      }
      if (*(_DWORD *)(v1 + 160) <= (v4 + 1)) {
        int v15 = v4 + 1;
      }
      else {
        int v15 = *(_DWORD *)(v1 + 160);
      }
      while (1)
      {
        uint64_t v6 = (v4 + 1);
        if (v15 - 1 == v4) {
          break;
        }
        LODWORD(v4) = v4 + 1;
        int v16 = v6;
        if ((*(_DWORD *)(*(void *)(v1 + 144) + 336 * v6 + 8) & 0x80000000) != 0) {
          goto LABEL_24;
        }
      }
      int v16 = v15;
LABEL_24:
      LODWORD(v4) = v16;
    }
    while (v3 != v16);
  }
  unint64_t v52 = 0;
  unint64_t v49 = 0;
  int8x16_t v50 = 0;
  unint64_t v48 = 0;
  int v51 = 0;
  uint64_t v17 = *(unsigned int *)(v1 + 208);
  if (v17)
  {
    uint64_t v18 = 0;
    uint64_t v19 = (int *)(*(void *)(v1 + 192) + 8);
    while (1)
    {
      int v20 = *v19;
      v19 += 42;
      if (v20 < 0) {
        break;
      }
      if (v17 == ++v18)
      {
        LODWORD(v1re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = *(_DWORD *)(v1 + 208);
        break;
      }
    }
  }
  else
  {
    LODWORD(v1re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
  }
  if (v17 != v18)
  {
    long long v21 = 0;
    unint64_t v22 = 0;
    uint64_t v46 = v1 + 176;
    uint64_t v23 = v18;
    do
    {
      uint64_t v24 = *(void *)(v1 + 192);
      uint64_t v25 = v24 + 168 * v23;
      long long v26 = (uint64_t *)(v25 + 16);
      if (*(void *)(v25 + 40) == v53)
      {
        if (v22 >= v49)
        {
          if (v49 < v22 + 1)
          {
            if (v48)
            {
              unint64_t v27 = 8;
              if (v49) {
                unint64_t v27 = 2 * v49;
              }
              if (v27 <= v22 + 1) {
                unint64_t v28 = v22 + 1;
              }
              else {
                unint64_t v28 = v27;
              }
              re::DynamicArray<re::RigNodeConstraint>::setCapacity(&v48, v28);
            }
            else
            {
              re::DynamicArray<re::RigNodeConstraint>::setCapacity(&v48, v22 + 1);
              ++v51;
            }
          }
          unint64_t v22 = (unint64_t)v50;
          long long v21 = v52;
        }
        v21[v22] = *(_OWORD *)v26;
        unint64_t v22 = (unint64_t)++v50;
        ++v51;
      }
      uint64_t result = re::DynamicArray<unsigned long long>::remove(v24 + 168 * v23 + 48, &v53);
      if (result)
      {
        char v29 = *re::peerVideoStreamingLogObjects((re *)result);
        uint64_t result = os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT);
        if (result)
        {
          uint64_t v30 = v53;
          uint64_t v31 = *v26;
          uint64_t v32 = v26[1];
          uint64_t v33 = v29;
          re::DynamicString::format((re::DynamicString *)"%llu_%llu", (re::DynamicString *)buf, v31, v32);
          uint64_t v34 = &buf[9];
          if (buf[8]) {
            uint64_t v34 = *(unsigned char **)&v56[2];
          }
          *(_DWORD *)unint64_t v57 = 134218242;
          uint64_t v58 = v30;
          __int16 v59 = 2080;
          unint64_t v60 = v34;
          _os_log_impl(&dword_233120000, v33, OS_LOG_TYPE_DEFAULT, "Peer %llu left. Removed as proxy client from read end: %s", v57, 0x16u);

          uint64_t result = *(void *)buf;
          if (*(void *)buf && (buf[8] & 1) != 0) {
            uint64_t result = (*(uint64_t (**)(void))(**(void **)buf + 40))();
          }
        }
      }
      unsigned int v35 = *(_DWORD *)(v1 + 208);
      if (v35 <= (int)v18 + 1) {
        unsigned int v35 = v18 + 1;
      }
      while (1)
      {
        uint64_t v23 = (v18 + 1);
        if (v35 - 1 == v18) {
          break;
        }
        LODWORD(v1re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v18 + 1;
        unsigned int v36 = v23;
        if ((*(_DWORD *)(*(void *)(v1 + 192) + 168 * v23 + 8) & 0x80000000) != 0) {
          goto LABEL_59;
        }
      }
      unsigned int v36 = v35;
LABEL_59:
      LODWORD(v1re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v36;
    }
    while (v17 != v36);
    unint64_t v45 = v52;
    if (v22)
    {
      uint64_t v37 = 16 * v22;
      uint64_t v38 = v52;
      do
      {
        long long v47 = *v38;
        re::HashTable<re::PeerVideoStreamId,re::StreamingInternal::StreamReadEnd,re::Hash<re::PeerVideoStreamId>,re::EqualTo<re::PeerVideoStreamId>,true,false>::remove(v46, (re::PeerVideoStreamId *)&v47);
        int v40 = *re::peerVideoStreamingLogObjects(v39);
        if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v41 = v53;
          long long v42 = v47;
          unint64_t v43 = v40;
          re::DynamicString::format((re::DynamicString *)"%llu_%llu", (re::DynamicString *)buf, v42);
          unint64_t v44 = (buf[8] & 1) != 0 ? *(unsigned char **)&v56[2] : &buf[9];
          *(_DWORD *)unint64_t v57 = 134218242;
          uint64_t v58 = v41;
          __int16 v59 = 2080;
          unint64_t v60 = v44;
          _os_log_impl(&dword_233120000, v43, OS_LOG_TYPE_DEFAULT, "Peer %llu left. Removed read end: %s", v57, 0x16u);

          if (*(void *)buf)
          {
            if (buf[8]) {
              (*(void (**)(void))(**(void **)buf + 40))();
            }
          }
        }
        ++v38;
        v37 -= 16;
      }
      while (v37);
    }
    uint64_t result = (uint64_t)v48;
    if (v48)
    {
      if (v45) {
        return (*(uint64_t (**)(void))(*v48 + 40))();
      }
    }
  }
  return result;
}

void re::HashTable<re::PeerVideoStreamId,re::StreamingInternal::StreamReadEnd,re::Hash<re::PeerVideoStreamId>,re::EqualTo<re::PeerVideoStreamId>,true,false>::remove(uint64_t a1, re::PeerVideoStreamId *this)
{
  if (*(void *)a1)
  {
    unint64_t v4 = re::PeerVideoStreamId::hash(this) % *(unsigned int *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v6 = *(unsigned int *)(v5 + 4 * v4);
    if (v6 != 0x7FFFFFFF)
    {
      uint64_t v7 = *(void *)(a1 + 16);
      uint64_t v8 = 0x7FFFFFFFLL;
      while (*(void *)(v7 + 168 * v6 + 16) != *(void *)this
           || *(void *)(v7 + 168 * v6 + 24) != *((void *)this + 1))
      {
        uint64_t v8 = v6;
        uint64_t v6 = *(_DWORD *)(v7 + 168 * v6 + 8) & 0x7FFFFFFF;
        if (v6 == 0x7FFFFFFF) {
          return;
        }
      }
      int v9 = *(_DWORD *)(v7 + 168 * v6 + 8) & 0x7FFFFFFF;
      if (v8 == 0x7FFFFFFF) {
        *(_DWORD *)(v5 + 4 * v4) = v9;
      }
      else {
        *(_DWORD *)(v7 + 168 * v8 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = *(_DWORD *)(v7 + 168 * v8 + 8) & 0x80000000 | v9;
      }
      re::HashTable<re::PeerVideoStreamId,re::StreamingInternal::StreamReadEnd,re::Hash<re::PeerVideoStreamId>,re::EqualTo<re::PeerVideoStreamId>,true,false>::EntryWithHash::free(*(void *)(a1 + 16) + 168 * v6);
      int v10 = *(_DWORD *)(a1 + 40);
      *(_DWORD *)(*(void *)(a1 + 16) + 168 * v6 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 168 * v6 + 8) & 0x80000000 | *(_DWORD *)(a1 + 36);
      --*(_DWORD *)(a1 + 28);
      *(_DWORD *)(a1 + 36) = v6;
      *(_DWORD *)(a1 + 40) = v10 + 1;
    }
  }
}

uint64_t re::PeerVideoStreamingManager::init(uint64_t a1, uint64_t a2)
{
  objc_storeStrong((id *)(a1 + 8), *(id *)a2);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 8);
  re::DynamicArray<re::EvaluationRegister>::setCapacity((void *)(a1 + 224), 0);
  ++*(_DWORD *)(a1 + 248);
  *(void *)(a1 + 72) = RESyncNetSessionObserverCreate();
  v11[0] = MEMORY[0x263EF8330];
  v11[1] = 3221225472;
  void v11[2] = ___ZN2re25PeerVideoStreamingManager15setupSessionObsEv_block_invoke;
  v11[3] = &__block_descriptor_40_e38_v36__0__RESyncNetSession__8Q16r_v24I32l;
  v11[4] = a1;
  RESyncNetSessionObserverOnReceiveData();
  RESyncNetSessionObserverOnParticipantLeave();
  *(void *)(a1 + 64) = RESyncServiceObserverCreate();
  RESyncServiceObserverOnSessionDidAdd();
  RESyncServiceObserverOnSessionWillRemove();
  RESyncServiceAddObserver();
  uint64_t SessionCount = RESyncServiceGetSessionCount();
  if (SessionCount)
  {
    uint64_t v8 = SessionCount;
    for (uint64_t i = 0; i != v8; ++i)
    {
      RESyncServiceGetSession();
      v11[0] = RESyncSessionGetNetSession();
      if (v11[0])
      {
        re::DynamicArray<re::RigDataValue *>::add((_anonymous_namespace_ *)(a1 + 80), v11);
        RESyncNetSessionAddObserver();
      }
    }
  }
  uint64_t result = RESyncServiceGetLocalPeerId();
  *(void *)(a1 + 40) = result;
  *(unsigned char *)(a1 + 32) = 1;
  return result;
}

uint64_t ___ZN2re25PeerVideoStreamingManager4initERKNS0_6ConfigE_block_invoke(uint64_t result, uint64_t a2)
{
  uint64_t v7 = a2;
  uint64_t v2 = *(void **)(result + 32);
  uint64_t v3 = v2[14];
  uint64_t v4 = v2[12];
  if (v4)
  {
    uint64_t v5 = 8 * v4;
    uint64_t v6 = (void *)v2[14];
    while (*v6 != a2)
    {
      ++v6;
      v5 -= 8;
      if (!v5)
      {
        uint64_t v6 = (void *)(v3 + 8 * v4);
        break;
      }
    }
  }
  else
  {
    uint64_t v6 = (void *)v2[14];
  }
  if (v4 == ((uint64_t)v6 - v3) >> 3)
  {
    re::DynamicArray<re::RigDataValue *>::add((_anonymous_namespace_ *)(v2 + 10), &v7);
    return RESyncNetSessionAddObserver();
  }
  return result;
}

uint64_t ___ZN2re25PeerVideoStreamingManager4initERKNS0_6ConfigE_block_invoke_2(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void *)(result + 32);
  uint64_t v4 = *(void *)(v3 + 112);
  uint64_t v5 = *(void *)(v3 + 96);
  if (v5)
  {
    uint64_t v6 = 8 * v5;
    uint64_t v7 = *(void **)(v3 + 112);
    while (*v7 != a2)
    {
      ++v7;
      v6 -= 8;
      if (!v6)
      {
        uint64_t v7 = (void *)(v4 + 8 * v5);
        break;
      }
    }
  }
  else
  {
    uint64_t v7 = *(void **)(v3 + 112);
  }
  if (v5 != ((uint64_t)v7 - v4) >> 3)
  {
    uint64_t result = RESyncNetSessionRemoveObserver();
    uint64_t v8 = *(void **)(v3 + 112);
    unint64_t v9 = *(void *)(v3 + 96);
    int v10 = &v8[v9];
    uint64_t v11 = v8;
    if (v9)
    {
      uint64_t v12 = 8 * v9;
      uint64_t v11 = *(void **)(v3 + 112);
      while (*v11 != a2)
      {
        ++v11;
        v12 -= 8;
        if (!v12)
        {
          uint64_t v11 = &v8[v9];
          break;
        }
      }
    }
    unint64_t v13 = v11 - v8;
    if (v13 != v9)
    {
      if (v9 <= v13)
      {
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      unint64_t v14 = v9 - 1;
      if (v14 > v13) {
        v8[v13] = *(v10 - 1);
      }
      *(void *)(v3 + 96) = v14;
      ++*(_DWORD *)(v3 + 104);
    }
  }
  return result;
}

void re::PeerVideoStreamingManager::createStream(re::PeerVideoStreamingManager *this@<X0>, uint64_t a2@<X1>, re *a3@<X8>)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  uint64_t v6 = *((void *)this + 5);
  *(void *)&long long v34 = v6;
  *((void *)&v34 + 1) = a2;
  long long v32 = 0u;
  long long v33 = 0u;
  memset(v31, 0, sizeof(v31));
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v24 = 0u;
  long long v22 = 0u;
  memset(v23, 0, sizeof(v23));
  long long v21 = 0u;
  uint64_t v7 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v24, 0);
  *((void *)&v26 + 1) = 0;
  long long v27 = 0uLL;
  re::DynamicString::setCapacity(&v26, 0);
  long long v28 = 0uLL;
  *(void *)&long long v29 = 0;
  *((void *)&v29 + 1) = 0x3FF0000000000000;
  LOBYTE(v30) = 0;
  *((void *)&v30 + 1) = 0;
  *(void *)&v31[0] = 0;
  *(_OWORD *)((char *)v31 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = *MEMORY[0x263F010E0];
  *((void *)&v31[1] + 1) = *(void *)(MEMORY[0x263F010E0] + 16);
  long long v32 = *(_OWORD *)((char *)v31 + 8);
  *(void *)&long long v33 = *((void *)&v31[1] + 1);
  BYTE8(v33) = 0;
  unint64_t v8 = re::PeerVideoStreamId::hash((re::PeerVideoStreamId *)&v34);
  if (!*((void *)this + 16))
  {
    LODWORD(v9) = 0;
    goto LABEL_9;
  }
  unint64_t v9 = v8 % *((unsigned int *)this + 38);
  uint64_t v10 = *(unsigned int *)(*((void *)this + 17) + 4 * v9);
  if (v10 == 0x7FFFFFFF)
  {
LABEL_9:
    unsigned int v12 = re::HashTable<re::PeerVideoStreamId,re::StreamingInternal::StreamWriteEnd,re::Hash<re::PeerVideoStreamId>,re::EqualTo<re::PeerVideoStreamId>,true,false>::addAsMove((uint64_t)this + 128, v9, v8, &v34, (uint64_t)&v21);
    ++*((_DWORD *)this + 42);
    uint64_t v13 = *((void *)this + 18) + 336 * v12;
    goto LABEL_10;
  }
  uint64_t v11 = *((void *)this + 18);
  while (*(void *)(v11 + 336 * v10 + 16) != v6 || *(void *)(v11 + 336 * v10 + 24) != a2)
  {
    uint64_t v10 = *(_DWORD *)(v11 + 336 * v10 + 8) & 0x7FFFFFFF;
    if (v10 == 0x7FFFFFFF) {
      goto LABEL_9;
    }
  }
  uint64_t v13 = v11 + 336 * v10;
LABEL_10:
  uint64_t v14 = v13 + 32;
  __n128 v15 = re::PeerVideoFileWriter::destroy((re::PeerVideoFileWriter *)&v24);
  if ((void)v26)
  {
    if (BYTE8(v26)) {
      (*(void (**)(__n128))(*(void *)v26 + 40))(v15);
    }
    __n128 v15 = 0uLL;
    long long v26 = 0u;
    long long v27 = 0u;
  }
  if ((void)v24)
  {
    if (BYTE8(v24)) {
      (*(void (**)(__n128))(*(void *)v24 + 40))(v15);
    }
    long long v24 = 0u;
    long long v25 = 0u;
  }
  re::PeerVideoStreamingEncoder::~PeerVideoStreamingEncoder((re::PeerVideoStreamingEncoder *)((char *)v23 + 8));
  int v16 = (re *)v21;
  if ((void)v21 && *(void *)&v23[0]) {
    int v16 = (re *)(*(uint64_t (**)(void))(*(void *)v21 + 40))();
  }
  uint64_t v17 = *re::peerVideoStreamingLogObjects(v16);
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v18 = v17;
    re::DynamicString::format((re::DynamicString *)"%llu_%llu", (re::DynamicString *)&v21, v6, a2);
    if (BYTE8(v21)) {
      uint64_t v19 = (char *)v22;
    }
    else {
      uint64_t v19 = (char *)&v21 + 9;
    }
    int v20 = *((_DWORD *)this + 39);
    *(_DWORD *)__n128 buf = 136315650;
    unsigned int v36 = v19;
    __int16 v37 = 2048;
    uint64_t v38 = v14 + 40;
    __int16 v39 = 1024;
    int v40 = v20;
    _os_log_debug_impl(&dword_233120000, v18, OS_LOG_TYPE_DEBUG, "Created stream: %s with encoder 0x%p (count=%u)", buf, 0x1Cu);

    if (void)v21 && (BYTE8(v21)) {
      (*(void (**)(void))(*(void *)v21 + 40))();
    }
  }
  *(void *)&long long v21 = this;
  re::make::shared::object<re::PeerVideoStreamHandle,re::PeerVideoStreamId &,re::PeerVideoStreamingManager *>(a3, (uint64_t *)&v34, (uint64_t *)&v21);
}

BOOL re::PeerVideoStreamingManager::hasClients(re *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v4 = *(void *)(v2 + 24);
  uint64_t v3 = (re::PeerVideoStreamId *)(v2 + 24);
  if (!v4)
  {
    uint64_t v7 = *re::peerVideoStreamingLogObjects(a1);
    BOOL result = os_log_type_enabled(v7, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    __int16 v11 = 0;
    unint64_t v8 = "Invalid stream handle in method hasClients";
    unint64_t v9 = (uint8_t *)&v11;
LABEL_9:
    _os_log_error_impl(&dword_233120000, v7, OS_LOG_TYPE_ERROR, v8, v9, 2u);
    return 0;
  }
  uint64_t v5 = re::HashTable<re::PeerVideoStreamId,re::StreamingInternal::StreamWriteEnd,re::Hash<re::PeerVideoStreamId>,re::EqualTo<re::PeerVideoStreamId>,true,false>::tryGet((uint64_t)a1 + 128, v3);
  if (v5) {
    return *(void *)(v5 + 16) != 0;
  }
  uint64_t v7 = *re::peerVideoStreamingLogObjects(0);
  BOOL result = os_log_type_enabled(v7, OS_LOG_TYPE_ERROR);
  if (result)
  {
    __int16 v10 = 0;
    unint64_t v8 = "No write end found for handle in method hasClients";
    unint64_t v9 = (uint8_t *)&v10;
    goto LABEL_9;
  }
  return result;
}

uint64_t re::HashTable<re::PeerVideoStreamId,re::StreamingInternal::StreamWriteEnd,re::Hash<re::PeerVideoStreamId>,re::EqualTo<re::PeerVideoStreamId>,true,false>::tryGet(uint64_t a1, re::PeerVideoStreamId *this)
{
  if (!*(void *)a1) {
    return 0;
  }
  uint64_t v4 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * (re::PeerVideoStreamId::hash(this) % *(unsigned int *)(a1 + 24)));
  if (v4 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 16);
  while (*(void *)(v5 + 336 * v4 + 16) != *(void *)this || *(void *)(v5 + 336 * v4 + 24) != *((void *)this + 1))
  {
    uint64_t v4 = *(_DWORD *)(v5 + 336 * v4 + 8) & 0x7FFFFFFF;
    if (v4 == 0x7FFFFFFF) {
      return 0;
    }
  }
  return v5 + 336 * v4 + 32;
}

BOOL re::PeerVideoStreamingManager::newClientsAwaitingFrame(re *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v4 = *(void *)(v2 + 24);
  uint64_t v3 = (re::PeerVideoStreamId *)(v2 + 24);
  if (!v4)
  {
    uint64_t v7 = *re::peerVideoStreamingLogObjects(a1);
    BOOL result = os_log_type_enabled(v7, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    __int16 v11 = 0;
    unint64_t v8 = "Invalid stream handle in method newClientsAwaitingFrame";
    unint64_t v9 = (uint8_t *)&v11;
LABEL_9:
    _os_log_error_impl(&dword_233120000, v7, OS_LOG_TYPE_ERROR, v8, v9, 2u);
    return 0;
  }
  uint64_t v5 = re::HashTable<re::PeerVideoStreamId,re::StreamingInternal::StreamWriteEnd,re::Hash<re::PeerVideoStreamId>,re::EqualTo<re::PeerVideoStreamId>,true,false>::tryGet((uint64_t)a1 + 128, v3);
  if (v5) {
    return *(unsigned char *)(v5 + 112) != 0;
  }
  uint64_t v7 = *re::peerVideoStreamingLogObjects(0);
  BOOL result = os_log_type_enabled(v7, OS_LOG_TYPE_ERROR);
  if (result)
  {
    __int16 v10 = 0;
    unint64_t v8 = "No write end found for handle in method newClientsAwaitingFrame";
    unint64_t v9 = (uint8_t *)&v10;
    goto LABEL_9;
  }
  return result;
}

uint64_t re::PeerVideoStreamingManager::createFrameForWriting(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v62 = *MEMORY[0x263EF8340];
  if (!*(void *)(*(void *)a2 + 24))
  {
    uint64_t v23 = *re::peerVideoStreamingLogObjects((re *)a1);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      LOWORD(cacheOut) = 0;
      _os_log_error_impl(&dword_233120000, v23, OS_LOG_TYPE_ERROR, "Failed to create frame for writing. Invalid stream handle.", (uint8_t *)&cacheOut, 2u);
    }
    return 0;
  }
  if (re::internal::enableSignposts(0, 0) && re::internal::enableHighFrequencyNetworkTracing(0, 0)) {
    kdebug_trace();
  }
  uint64_t v10 = re::HashTable<re::PeerVideoStreamId,re::StreamingInternal::StreamWriteEnd,re::Hash<re::PeerVideoStreamId>,re::EqualTo<re::PeerVideoStreamId>,true,false>::tryGet(a1 + 128, (re::PeerVideoStreamId *)(*(void *)a2 + 24));
  if (!v10)
  {
    long long v24 = *re::peerVideoStreamingLogObjects(0);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      uint64_t v47 = *(void *)(*(void *)a2 + 24);
      uint64_t v48 = *(void *)(*(void *)a2 + 32);
      unint64_t v49 = v24;
      re::DynamicString::format((re::DynamicString *)"%llu_%llu", (re::DynamicString *)&cacheOut, v47, v48);
      int8x16_t v50 = (v57 & 1) != 0 ? v59 : v58;
      *(_DWORD *)__n128 buf = 136315138;
      uint64_t v61 = v50;
      _os_log_error_impl(&dword_233120000, v49, OS_LOG_TYPE_ERROR, "Failed to create frame for writing. No write end found for handle %s.", buf, 0xCu);

      if (cacheOut)
      {
        if (v57) {
          (*(void (**)(void))(*(void *)cacheOut + 40))();
        }
      }
    }
    return 0;
  }
  re::PeerVideoStreamingEncoder::createPixelBufferFromPool(v10 + 40, a3, &pixelBuffer);
  unsigned int v12 = pixelBuffer;
  if (pixelBuffer)
  {
    if (*(void *)(a1 + 56))
    {
      CFAllocatorRef v13 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    }
    else
    {
      uint64_t v32 = re::ServiceLocator::serviceOrNull<re::RenderManager>(*(void *)(a1 + 16));
      if (!v32)
      {
        unint64_t v43 = *re::peerVideoStreamingLogObjects(0);
        uint64_t v19 = (re *)os_log_type_enabled(v43, OS_LOG_TYPE_ERROR);
        if (!v19) {
          goto LABEL_42;
        }
        LOWORD(cacheOut) = 0;
        long long v22 = "Failed to create CVMetalTextureCache. No RenderManager";
        p_CVMetalTextureRef cacheOut = (uint8_t *)&cacheOut;
        unsigned int v36 = v43;
        uint32_t v37 = 2;
        goto LABEL_26;
      }
      CVMetalTextureRef cacheOut = 0;
      CFAllocatorRef v13 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
      long long v33 = (re *)CVMetalTextureCacheCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, *(id *)(v32 + 184), 0, &cacheOut);
      if (v33)
      {
        int v34 = (int)v33;
        long long v21 = *re::peerVideoStreamingLogObjects(v33);
        uint64_t v19 = (re *)os_log_type_enabled(v21, OS_LOG_TYPE_ERROR);
        if (v19)
        {
          *(_DWORD *)__n128 buf = 67109120;
          LODWORD(v61) = v34;
          long long v22 = "Error creating texture cache: %d";
          goto LABEL_25;
        }
LABEL_42:
        unint64_t v44 = *re::peerVideoStreamingLogObjects(v19);
        if (!os_log_type_enabled(v44, OS_LOG_TYPE_ERROR)) {
          goto LABEL_43;
        }
        uint64_t v51 = *(void *)(*(void *)a2 + 24);
        uint64_t v52 = *(void *)(*(void *)a2 + 32);
        long long v29 = v44;
        re::DynamicString::format((re::DynamicString *)"%llu_%llu", (re::DynamicString *)&cacheOut, v51, v52);
        if (v57) {
          uint64_t v53 = v59;
        }
        else {
          uint64_t v53 = v58;
        }
        *(_DWORD *)__n128 buf = 136315138;
        uint64_t v61 = v53;
        uint64_t v31 = "Failed to create frame for writing. Could not create CVMetalTexture for stream %s";
LABEL_59:
        _os_log_error_impl(&dword_233120000, v29, OS_LOG_TYPE_ERROR, v31, buf, 0xCu);

        if (cacheOut && (v57 & 1) != 0) {
          (*(void (**)(void))(*(void *)cacheOut + 40))();
        }
        goto LABEL_43;
      }
      uint64_t v46 = *(const void **)(a1 + 56);
      *(void *)(a1 + 56) = cacheOut;
      if (v46) {
        CFRelease(v46);
      }
    }
    size_t Width = CVPixelBufferGetWidth(v12);
    size_t Height = CVPixelBufferGetHeight(v12);
    PixelFormatType = (re::PeerVideoStreamingUtils *)CVPixelBufferGetPixelFormatType(v12);
    int v18 = re::PeerVideoStreamingUtils::mtlPixelFormatFromCVPixelFormat(PixelFormatType, v17);
    CVMetalTextureRef cacheOut = 0;
    uint64_t v19 = (re *)CVMetalTextureCacheCreateTextureFromImage(v13, *(CVMetalTextureCacheRef *)(a1 + 56), v12, 0, (MTLPixelFormat)v18, Width, Height, 0, &cacheOut);
    if (!v19)
    {
      CVMetalTextureRef v38 = cacheOut;
      CVMetalTextureRef v54 = cacheOut;
      if (cacheOut)
      {
        CVPixelBufferRef v39 = pixelBuffer;
        CVMetalTextureRef v40 = cacheOut;
        if (pixelBuffer)
        {
          CFRetain(pixelBuffer);
          CFRetain(v38);
          CVMetalTextureRef v40 = v39;
        }
        CFRetain(v40);
        CFRetain(v38);
        long long v42 = *(const void **)a4;
        uint64_t v41 = *(const void **)(a4 + 8);
        *(void *)a4 = v39;
        *(void *)(a4 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v38;
        *(void *)(a4 + 16) = a5;
        if (v41) {
          CFRelease(v41);
        }
        if (v42) {
          CFRelease(v42);
        }
        CFRelease(v38);
        if (v39) {
          CFRelease(v39);
        }
        if (!re::internal::enableSignposts(0, 0)
          || !re::internal::enableHighFrequencyNetworkTracing(0, 0)
          || (kdebug_trace(), (CVMetalTextureRef v38 = v54) != 0))
        {
          CFRelease(v38);
        }
        uint64_t v25 = 1;
        goto LABEL_44;
      }
      goto LABEL_42;
    }
    int v20 = (int)v19;
    long long v21 = *re::peerVideoStreamingLogObjects(v19);
    uint64_t v19 = (re *)os_log_type_enabled(v21, OS_LOG_TYPE_ERROR);
    if (v19)
    {
      *(_DWORD *)__n128 buf = 67109120;
      LODWORD(v61) = v20;
      long long v22 = "Failed to create texture from image: %d";
LABEL_25:
      p_CVMetalTextureRef cacheOut = buf;
      unsigned int v36 = v21;
      uint32_t v37 = 8;
LABEL_26:
      _os_log_error_impl(&dword_233120000, v36, OS_LOG_TYPE_ERROR, v22, p_cacheOut, v37);
      goto LABEL_42;
    }
    goto LABEL_42;
  }
  long long v26 = *re::peerVideoStreamingLogObjects(v11);
  if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
  {
    uint64_t v27 = *(void *)(*(void *)a2 + 24);
    uint64_t v28 = *(void *)(*(void *)a2 + 32);
    long long v29 = v26;
    re::DynamicString::format((re::DynamicString *)"%llu_%llu", (re::DynamicString *)&cacheOut, v27, v28);
    if (v57) {
      long long v30 = v59;
    }
    else {
      long long v30 = v58;
    }
    *(_DWORD *)__n128 buf = 136315138;
    uint64_t v61 = v30;
    uint64_t v31 = "Failed to create frame for writing. Could not create pixel buffer for stream %s.";
    goto LABEL_59;
  }
LABEL_43:
  uint64_t v25 = 0;
LABEL_44:
  if (pixelBuffer) {
    CFRelease(pixelBuffer);
  }
  return v25;
}

void re::PeerVideoStreamingManager::writeFrame(id *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  if (*(void *)(*a2 + 24))
  {
    if (re::internal::enableSignposts(0, 0) && re::internal::enableHighFrequencyNetworkTracing(0, 0)) {
      kdebug_trace();
    }
    uint64_t v6 = re::HashTable<re::PeerVideoStreamId,re::StreamingInternal::StreamWriteEnd,re::Hash<re::PeerVideoStreamId>,re::EqualTo<re::PeerVideoStreamId>,true,false>::tryGet((uint64_t)(a1 + 16), (re::PeerVideoStreamId *)(*a2 + 24));
    if (v6)
    {
      uint64_t v7 = v6;
      if (*(void *)(v6 + 16))
      {
        size_t Width = CVPixelBufferGetWidth(*(CVPixelBufferRef *)a3);
        size_t Height = CVPixelBufferGetHeight(*(CVPixelBufferRef *)a3);
        size_t BytesPerRow = CVPixelBufferGetBytesPerRow(*(CVPixelBufferRef *)a3);
        size_t v11 = BytesPerRow * Height;
        uint64_t v12 = *(void *)(a3 + 16);
        uint64_t v13 = *a2;
        if (*a2) {
          size_t BytesPerRow = (size_t)(id)(v13 + 8);
        }
        uint64_t v14 = re::globalAllocators((re *)BytesPerRow)[2];
        uint64_t v25 = v14;
        __n128 v15 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v14 + 32))(v14, 56, 0);
        *__n128 v15 = &unk_26E6F8E38;
        v15[1] = a1;
        void v15[2] = v13;
        v15[3] = v11;
        v15[4] = Width;
        v15[5] = Height;
        v15[6] = v12;
        long long v26 = v15;
        uint64_t v16 = *(unsigned __int8 *)(v7 + 112);
        uint64_t v22 = v14;
        uint64_t v23 = 0;
        re::FunctionBase<24ul,void ()(opaqueCMSampleBuffer *)>::operator=<24ul>((uint64_t)v21, (uint64_t)buf);
        id v20 = a1[1];
        re::PeerVideoStreamingEncoder::encodeFrame(v7 + 40, (CVPixelBufferRef *)a3, v16, (uint64_t)v21, &v20);
        id v17 = v20;
        id v20 = 0;

        re::FunctionBase<24ul,void ()(opaqueCMSampleBuffer *)>::destroyCallable((uint64_t)v21);
        *(unsigned char *)(v7 + 112) = 0;
        re::FunctionBase<24ul,void ()(opaqueCMSampleBuffer *)>::destroyCallable((uint64_t)buf);
      }
      else if (re::internal::enableSignposts(0, 0) && re::internal::enableHighFrequencyNetworkTracing(0, 0))
      {
        kdebug_trace();
      }
    }
    else
    {
      uint64_t v19 = *re::peerVideoStreamingLogObjects(0);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)__n128 buf = 0;
        _os_log_error_impl(&dword_233120000, v19, OS_LOG_TYPE_ERROR, "Failed to write frame. No write end found for handle.", buf, 2u);
      }
      if (re::internal::enableSignposts(0, 0) && re::internal::enableHighFrequencyNetworkTracing(0, 0)) {
        kdebug_trace();
      }
    }
  }
  else
  {
    int v18 = *re::peerVideoStreamingLogObjects((re *)a1);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__n128 buf = 0;
      _os_log_error_impl(&dword_233120000, v18, OS_LOG_TYPE_ERROR, "Failed to write frame. Invalid stream handle.", buf, 2u);
    }
  }
}

void re::PeerVideoStreamingManager::writeFrameToVideoFile(re *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, int a6, float64_t a7, float64_t a8)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  if (!*(void *)(*(void *)a2 + 24))
  {
    long long v24 = *re::peerVideoStreamingLogObjects(a1);
    if (!os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
      return;
    }
    *(_WORD *)__n128 buf = 0;
    uint64_t v25 = "Failed to write frame to video file. Invalid stream handle.";
LABEL_13:
    _os_log_error_impl(&dword_233120000, v24, OS_LOG_TYPE_ERROR, v25, buf, 2u);
    return;
  }
  if (re::internal::enableSignposts(0, 0) && re::internal::enableHighFrequencyNetworkTracing(0, 0)) {
    kdebug_trace();
  }
  uint64_t v16 = re::HashTable<re::PeerVideoStreamId,re::StreamingInternal::StreamWriteEnd,re::Hash<re::PeerVideoStreamId>,re::EqualTo<re::PeerVideoStreamId>,true,false>::tryGet((uint64_t)a1 + 128, (re::PeerVideoStreamId *)(*(void *)a2 + 24));
  if (!v16)
  {
    long long v24 = *re::peerVideoStreamingLogObjects(0);
    if (!os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
      return;
    }
    *(_WORD *)__n128 buf = 0;
    uint64_t v25 = "Failed to write frame to video file. No write end found for handle.";
    goto LABEL_13;
  }
  id v17 = (unsigned char *)v16;
  if (!*(unsigned char *)(v16 + 296))
  {
    id v18 = a4;
    uint64_t v19 = [v18 URLByDeletingPathExtension];
    id v20 = [v19 absoluteString];
    long long v21 = objc_msgSend(v20, "stringByAppendingFormat:", @"_%llu", a5);

    uint64_t v22 = [v18 pathExtension];
    if (v22)
    {
      uint64_t v23 = [v18 pathExtension];
    }
    else
    {
      uint64_t v23 = @"mov";
    }

    id v26 = v21;
    uint64_t v27 = (_anonymous_namespace_ *)[v26 UTF8String];
    re::DynamicString::operator=((re::DynamicString *)(v17 + 128), (re::DynamicString *)buf);
    if (*(void *)buf && (buf[8] & 1) != 0) {
      (*(void (**)(void))(**(void **)buf + 40))();
    }
    uint64_t v28 = v23;
    long long v29 = (_anonymous_namespace_ *)[(__CFString *)v28 UTF8String];
    re::DynamicString::operator=((re::DynamicString *)(v17 + 160), (re::DynamicString *)buf);
    long long v30 = *(re **)buf;
    if (*(void *)buf && (buf[8] & 1) != 0) {
      long long v30 = (re *)(*(uint64_t (**)(void))(**(void **)buf + 40))();
    }
    uint64_t v31 = *re::peerVideoStreamingLogObjects(v30);
    if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
    {
      id v37 = v18;
      id v32 = v26;
      uint64_t v34 = *(void *)(*(void *)a2 + 24);
      uint64_t v33 = *(void *)(*(void *)a2 + 32);
      unsigned int v35 = v31;
      re::DynamicString::format((re::DynamicString *)"%llu_%llu", (re::DynamicString *)&v38, v34, v33);
      id v26 = v32;
      if (v39) {
        unsigned int v36 = *(unsigned char **)&v40[7];
      }
      else {
        unsigned int v36 = v40;
      }
      *(_DWORD *)__n128 buf = 136315650;
      *(void *)&uint8_t buf[4] = v36;
      __int16 v42 = 2112;
      id v43 = v32;
      __int16 v44 = 2112;
      unint64_t v45 = v28;
      _os_log_impl(&dword_233120000, v35, OS_LOG_TYPE_DEFAULT, "Set video file writer output path for write end: %s, output path: %@.%@", buf, 0x20u);

      if (v38 && (v39 & 1) != 0) {
        (*(void (**)(void))(*(void *)v38 + 40))();
      }
      id v18 = v37;
    }
    v17[296] = 1;
  }
  re::PeerVideoFileWriter::appendFrame((uint64_t)(v17 + 128), a3, a5, a6, a7, a8);
  if (re::internal::enableSignposts(0, 0) && re::internal::enableHighFrequencyNetworkTracing(0, 0)) {
    kdebug_trace();
  }
}

void re::PeerVideoStreamingManager::stopAllVideoFileWriters(re::PeerVideoStreamingManager *this)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((unsigned int *)this + 40);
  if (v2)
  {
    uint64_t v3 = 0;
    uint64_t v4 = (_DWORD *)(*((void *)this + 18) + 8);
    while ((*v4 & 0x80000000) == 0)
    {
      v4 += 84;
      if (v2 == ++v3)
      {
        LODWORD(v3) = *((_DWORD *)this + 40);
        break;
      }
    }
  }
  else
  {
    LODWORD(v3) = 0;
  }
  if (v2 != v3)
  {
    uint64_t v5 = v3;
    unsigned int v6 = *((_DWORD *)this + 40);
    do
    {
      uint64_t v7 = *((void *)this + 18);
      uint64_t v8 = v7 + 336 * v5;
      if (*(unsigned char *)(v8 + 328))
      {
        unint64_t v9 = (unsigned char *)(v8 + 328);
        uint64_t v10 = v7 + 336 * v5;
        v15[0] = MEMORY[0x263EF8330];
        v15[1] = 3221225472;
        void v15[2] = ___ZN2re25PeerVideoStreamingManager23stopAllVideoFileWritersEv_block_invoke;
        v15[3] = &__block_descriptor_48_e5_v8__0l;
        uint64_t v11 = v10 + 160;
        v15[4] = v10 + 16;
        v15[5] = v10 + 32;
        uint64_t v12 = (re *)_Block_copy(v15);
        v16[3] = re::globalAllocators(v12)[2];
        id v17 = 0;
        v16[0] = &unk_26E6F8EA0;
        v16[1] = _Block_copy(v12);
        id v17 = v16;
        re::PeerVideoFileWriter::flush(v11, (uint64_t)v16);
        re::FunctionBase<24ul,void ()(void)>::destroyCallable((uint64_t)v16);

        *unint64_t v9 = 0;
        unsigned int v6 = *((_DWORD *)this + 40);
      }
      if (v6 <= (int)v3 + 1) {
        unsigned int v13 = v3 + 1;
      }
      else {
        unsigned int v13 = v6;
      }
      while (1)
      {
        uint64_t v5 = (v3 + 1);
        if (v13 - 1 == v3) {
          break;
        }
        LODWORD(v3) = v3 + 1;
        unsigned int v14 = v5;
        if ((*(_DWORD *)(*((void *)this + 18) + 336 * v5 + 8) & 0x80000000) != 0) {
          goto LABEL_18;
        }
      }
      unsigned int v14 = v13;
LABEL_18:
      LODWORD(v3) = v14;
    }
    while (v2 != v14);
  }
}

double ___ZN2re25PeerVideoStreamingManager23stopAllVideoFileWritersEv_block_invoke(re *a1)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v2 = *re::peerVideoStreamingLogObjects(a1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = (uint64_t *)*((void *)a1 + 4);
    uint64_t v4 = *v3;
    uint64_t v5 = v3[1];
    unsigned int v6 = v2;
    re::DynamicString::format((re::DynamicString *)"%llu_%llu", (re::DynamicString *)&v9, v4, v5);
    if (v10) {
      uint64_t v7 = *(unsigned char **)&v11[7];
    }
    else {
      uint64_t v7 = v11;
    }
    *(_DWORD *)__n128 buf = 136315138;
    unsigned int v13 = v7;
    _os_log_impl(&dword_233120000, v6, OS_LOG_TYPE_DEFAULT, "Flushed video file writer for write end: %s", buf, 0xCu);

    if (v9 && (v10 & 1) != 0) {
      (*(void (**)(void))(*(void *)v9 + 40))();
    }
  }
  *(void *)&double result = re::PeerVideoFileWriter::destroy((re::PeerVideoFileWriter *)(*((void *)a1 + 5) + 128)).n128_u64[0];
  return result;
}

uint64_t anonymous namespace'::makeMessage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  v9[0] = &unk_26E716118;
  v9[1] = a1;
  uint64_t v8 = (re::zerocopy *)v9;
  char v10 = -46;
  re::zerocopy::writeAll((re::zerocopy *)v9, (re::zerocopy::WriteStream *)&v10, (char *)1);
  char v10 = -30;
  re::zerocopy::writeAll((re::zerocopy *)v9, (re::zerocopy::WriteStream *)&v10, (char *)1);
  char v10 = 8;
  re::zerocopy::writeAll((re::zerocopy *)v9, (re::zerocopy::WriteStream *)&v10, (char *)1);
  uint64_t v5 = *(void *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  char v10 = -30;
  re::zerocopy::writeAll((re::zerocopy *)v9, (re::zerocopy::WriteStream *)&v10, (char *)1);
  char v10 = 8;
  re::zerocopy::writeAll((re::zerocopy *)v9, (re::zerocopy::WriteStream *)&v10, (char *)1);
  re::OPackWriter::writeInteger(&v8, v5);
  char v10 = 9;
  re::zerocopy::writeAll((re::zerocopy *)v9, (re::zerocopy::WriteStream *)&v10, (char *)1);
  re::OPackWriter::writeInteger(&v8, v6);
  char v10 = 9;
  re::zerocopy::writeAll((re::zerocopy *)v9, (re::zerocopy::WriteStream *)&v10, (char *)1);
  re::OPackWriter::writeInteger(&v8, *(unsigned int *)(a2 + 16));
  return (*(uint64_t (**)(void, re::zerocopy **))(**(void **)(a3 + 32) + 16))(*(void *)(a3 + 32), &v8);
}

uint64_t (***re::PeerVideoStreamingManager::makeUnsubscribeMessage(re *a1, uint64_t a2, uint64_t a3))(void)
{
  v8[5] = *MEMORY[0x263EF8340];
  v6[0] = a2;
  v6[1] = a3;
  int v7 = 2;
  uint64_t v4 = re::globalAllocators(a1)[2];
  v8[0] = &unk_26E6F8F60;
  v8[3] = v4;
  v8[4] = v8;
  return re::FunctionBase<24ul,void ()(re::OPackWriter &)>::destroyCallable((uint64_t)v8);
}

void re::PeerVideoStreamingManager::connectToStream(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, re *a5@<X8>)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  *(void *)&long long v27 = a3;
  *((void *)&v27 + 1) = a4;
  if (!a3)
  {
    uint64_t v12 = *re::peerVideoStreamingLogObjects((re *)a1);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      LOWORD(to) = 0;
      unsigned int v13 = "Failed to connect to stream. Invalid stream id.";
      goto LABEL_21;
    }
LABEL_22:
    *(void *)a5 = 0;
    return;
  }
  uint64_t v10 = a1 + 176;
  BOOL v11 = re::HashTable<re::PeerVideoStreamId,re::StreamingInternal::StreamReadEnd,re::Hash<re::PeerVideoStreamId>,re::EqualTo<re::PeerVideoStreamId>,true,false>::containsKey(a1 + 176, (re::PeerVideoStreamId *)&v27);
  if (v11)
  {
    uint64_t v12 = *re::peerVideoStreamingLogObjects((re *)v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      LOWORD(to) = 0;
      unsigned int v13 = "There is already a connection to this stream. Multiple connections are unsupported.";
LABEL_21:
      _os_log_error_impl(&dword_233120000, v12, OS_LOG_TYPE_ERROR, v13, (uint8_t *)&to, 2u);
      goto LABEL_22;
    }
    goto LABEL_22;
  }
  if (!*(void *)(a1 + 96) || !**(void **)(a1 + 112))
  {
    uint64_t v12 = *re::peerVideoStreamingLogObjects((re *)v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      LOWORD(to) = 0;
      unsigned int v13 = "Failed to connect to stream. Could not get Session";
      goto LABEL_21;
    }
    goto LABEL_22;
  }
  id to = (id)a1;
  re::make::shared::object<re::PeerVideoStreamHandle,re::PeerVideoStreamId &,re::PeerVideoStreamingManager *>(a5, (uint64_t *)&v27, (uint64_t *)&to);
  if (*(void *)a5) {
    uint64_t v14 = (void *)(*(void *)a5 + 8);
  }
  else {
    uint64_t v14 = 0;
  }
  objc_initWeak(&location, v14);
  id to = 0;
  objc_copyWeak(&to, &location);
  uint64_t v29 = a2;
  long long v30 = 0;
  uint64_t v31 = 0;
  p_id to = 0;
  int v33 = 0;
  char v39 = 0;
  char v40 = 0;
  uint64_t v41 = 0;
  VTDecompressionSessionRef session = 0;
  uint64_t v36 = 0;
  uint64_t v34 = 0;
  char v37 = 0;
  unint64_t v15 = re::PeerVideoStreamId::hash((re::PeerVideoStreamId *)&v27);
  if (*(void *)(a1 + 176))
  {
    unint64_t v16 = v15 % *(unsigned int *)(a1 + 200);
    uint64_t v17 = *(unsigned int *)(*(void *)(a1 + 184) + 4 * v16);
    if (v17 != 0x7FFFFFFF)
    {
      uint64_t v18 = *(void *)(a1 + 192);
      while (*(void *)(v18 + 168 * v17 + 16) != a3 || *(void *)(v18 + 168 * v17 + 24) != a4)
      {
        uint64_t v17 = *(_DWORD *)(v18 + 168 * v17 + 8) & 0x7FFFFFFF;
        if (v17 == 0x7FFFFFFF) {
          goto LABEL_25;
        }
      }
      goto LABEL_28;
    }
  }
  else
  {
    LODWORD(v16) = 0;
  }
LABEL_25:
  re::HashTable<re::PeerVideoStreamId,re::StreamingInternal::StreamReadEnd,re::Hash<re::PeerVideoStreamId>,re::EqualTo<re::PeerVideoStreamId>,true,false>::addAsMove(v10, v16, v15, &v27, (uint64_t)&to);
  ++*(_DWORD *)(a1 + 216);
  if (v37 && cf) {
    CFRelease(cf);
  }
LABEL_28:
  VTDecompressionSessionRef v19 = session;
  if (session)
  {
    VTDecompressionSessionInvalidate(session);
    CFRelease(v19);
    VTDecompressionSessionRef session = 0;
  }
  if (v30)
  {
    if (v34) {
      (*(void (**)(void))(*v30 + 40))();
    }
    uint64_t v34 = 0;
    uint64_t v31 = 0;
    p_id to = 0;
    long long v30 = 0;
    ++v33;
  }
  objc_destroyWeak(&to);
  id to = 0;
  objc_destroyWeak(&location);
  id location = 0;
  *(void *)__n128 buf = a3;
  *(void *)&buf[8] = a4;
  *(_DWORD *)&uint8_t buf[16] = 1;
  uint64_t v31 = re::globalAllocators(v20)[2];
  p_id to = &to;
  id to = &unk_26E6F8EF8;
  re::FunctionBase<24ul,void ()(re::OPackWriter &)>::destroyCallable((uint64_t)&to);
  long long v21 = (re *)RESyncNetSessionSendData();
  uint64_t v22 = *re::peerVideoStreamingLogObjects(v21);
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v23 = v22;
    re::DynamicString::format((re::DynamicString *)"%llu_%llu", (re::DynamicString *)&to, a3, a4);
    long long v24 = (v29 & 1) != 0 ? v30 : (uint64_t *)((char *)&v29 + 1);
    *(_DWORD *)__n128 buf = 136315394;
    *(void *)&uint8_t buf[4] = v24;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = a2;
    _os_log_impl(&dword_233120000, v23, OS_LOG_TYPE_DEFAULT, "Opened read end for: %s, served by %llu. Sent subscribe message.", buf, 0x16u);

    if (to)
    {
      if (v29) {
        (*(void (**)(void))(*(void *)to + 40))();
      }
    }
  }
  if (v25[0])
  {
    if (v25[4]) {
      (*(void (**)(void))(*(void *)v25[0] + 40))();
    }
  }
}

BOOL re::HashTable<re::PeerVideoStreamId,re::StreamingInternal::StreamReadEnd,re::Hash<re::PeerVideoStreamId>,re::EqualTo<re::PeerVideoStreamId>,true,false>::containsKey(uint64_t a1, re::PeerVideoStreamId *this)
{
  uint64_t v2 = 0x7FFFFFFFLL;
  if (*(void *)a1)
  {
    uint64_t v5 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * (re::PeerVideoStreamId::hash(this) % *(unsigned int *)(a1 + 24)));
    if (v5 != 0x7FFFFFFF)
    {
      uint64_t v6 = *(void *)(a1 + 16);
      uint64_t v2 = 0x7FFFFFFFLL;
      while (*(void *)(v6 + 168 * v5 + 16) != *(void *)this
           || *(void *)(v6 + 168 * v5 + 24) != *((void *)this + 1))
      {
        uint64_t v5 = *(_DWORD *)(v6 + 168 * v5 + 8) & 0x7FFFFFFF;
        if (v5 == 0x7FFFFFFF) {
          return v2 != 0x7FFFFFFF;
        }
      }
      uint64_t v2 = v5;
    }
  }
  return v2 != 0x7FFFFFFF;
}

BOOL re::PeerVideoStreamingManager::consumeFrame(re *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v5 = *(void *)(v3 + 24);
  uint64_t v4 = (re::PeerVideoStreamId *)(v3 + 24);
  if (!v5)
  {
    uint64_t v14 = *re::peerVideoStreamingLogObjects(a1);
    BOOL result = os_log_type_enabled(v14, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    *(_WORD *)unint64_t v16 = 0;
    unint64_t v15 = "Failed to consume frame. Invalid handle.";
LABEL_13:
    _os_log_error_impl(&dword_233120000, v14, OS_LOG_TYPE_ERROR, v15, v16, 2u);
    return 0;
  }
  uint64_t v7 = re::HashTable<re::PeerVideoStreamId,re::StreamingInternal::StreamReadEnd,re::Hash<re::PeerVideoStreamId>,re::EqualTo<re::PeerVideoStreamId>,true,false>::tryGet((uint64_t)a1 + 176, v4);
  if (!v7)
  {
    uint64_t v14 = *re::peerVideoStreamingLogObjects(0);
    BOOL result = os_log_type_enabled(v14, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    *(_WORD *)unint64_t v16 = 0;
    unint64_t v15 = "Failed to consume frame. There is no read end for the given handle.";
    goto LABEL_13;
  }
  uint64_t v8 = v7;
  int v10 = *(unsigned __int8 *)(v7 + 72);
  uint64_t v9 = v7 + 72;
  if (!v10) {
    return 0;
  }
  uint64_t v11 = *a3;
  *a3 = *(void *)(v8 + 80);
  *(void *)(v8 + 80) = v11;
  a3[1] = *(void *)(v8 + 88);
  v16[0] = 0;
  re::Optional<re::OutputVideoFrame>::operator=(v9, v16);
  if (v16[0] && cf) {
    CFRelease(cf);
  }
  uint64_t v12 = a3[1];
  if (*(unsigned char *)(v8 + 112))
  {
    *(void *)(v8 + 120) = v12;
    return 1;
  }
  else
  {
    BOOL result = 1;
    *(unsigned char *)(v8 + 112) = 1;
    *(void *)(v8 + 120) = v12;
  }
  return result;
}

uint64_t re::HashTable<re::PeerVideoStreamId,re::StreamingInternal::StreamReadEnd,re::Hash<re::PeerVideoStreamId>,re::EqualTo<re::PeerVideoStreamId>,true,false>::tryGet(uint64_t a1, re::PeerVideoStreamId *this)
{
  if (!*(void *)a1) {
    return 0;
  }
  uint64_t v4 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * (re::PeerVideoStreamId::hash(this) % *(unsigned int *)(a1 + 24)));
  if (v4 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 16);
  while (*(void *)(v5 + 168 * v4 + 16) != *(void *)this || *(void *)(v5 + 168 * v4 + 24) != *((void *)this + 1))
  {
    uint64_t v4 = *(_DWORD *)(v5 + 168 * v4 + 8) & 0x7FFFFFFF;
    if (v4 == 0x7FFFFFFF) {
      return 0;
    }
  }
  return v5 + 168 * v4 + 32;
}

uint64_t re::Optional<re::OutputVideoFrame>::operator=(uint64_t a1, unsigned __int8 *a2)
{
  int v3 = *a2;
  if (*(unsigned char *)a1) {
    BOOL v4 = 0;
  }
  else {
    BOOL v4 = v3 == 0;
  }
  if (!v4)
  {
    if (*(unsigned char *)a1) {
      BOOL v5 = v3 == 0;
    }
    else {
      BOOL v5 = 0;
    }
    if (v5)
    {
      uint64_t v9 = *(const void **)(a1 + 8);
      if (v9) {
        CFRelease(v9);
      }
      *(unsigned char *)a1 = 0;
    }
    else
    {
      if (*(unsigned char *)a1) {
        BOOL v6 = 1;
      }
      else {
        BOOL v6 = v3 == 0;
      }
      if (v6)
      {
        uint64_t v7 = *(void *)(a1 + 8);
        uint64_t v8 = *((void *)a2 + 2);
        *(void *)(a1 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = *((void *)a2 + 1);
        *((void *)a2 + 1) = v7;
        *(void *)(a1 + 16) = v8;
      }
      else
      {
        *(unsigned char *)a1 = 1;
        uint64_t v10 = *((void *)a2 + 2);
        *(void *)(a1 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = *((void *)a2 + 1);
        *((void *)a2 + 1) = 0;
        *(void *)(a1 + 16) = v10;
      }
    }
  }
  return a1;
}

BOOL re::PeerVideoStreamingManager::peekFrame(re *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = *a2;
  uint64_t v5 = *(void *)(v3 + 24);
  BOOL v4 = (re::PeerVideoStreamId *)(v3 + 24);
  if (!v5)
  {
    uint64_t v12 = *re::peerVideoStreamingLogObjects(a1);
    BOOL result = os_log_type_enabled(v12, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    __int16 v16 = 0;
    unsigned int v13 = "Failed to peek frame. Invalid handle.";
    uint64_t v14 = (uint8_t *)&v16;
LABEL_13:
    _os_log_error_impl(&dword_233120000, v12, OS_LOG_TYPE_ERROR, v13, v14, 2u);
    return 0;
  }
  uint64_t v7 = re::HashTable<re::PeerVideoStreamId,re::StreamingInternal::StreamReadEnd,re::Hash<re::PeerVideoStreamId>,re::EqualTo<re::PeerVideoStreamId>,true,false>::tryGet((uint64_t)a1 + 176, v4);
  if (!v7)
  {
    uint64_t v12 = *re::peerVideoStreamingLogObjects(0);
    BOOL result = os_log_type_enabled(v12, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    __int16 v15 = 0;
    unsigned int v13 = "Failed to peek frame. There is no read end for the given handle.";
    uint64_t v14 = (uint8_t *)&v15;
    goto LABEL_13;
  }
  uint64_t v8 = v7;
  if (!*(unsigned char *)(v7 + 72)) {
    return 0;
  }
  uint64_t v9 = *(const void **)a3;
  uint64_t v10 = *(const void **)(v7 + 80);
  *(void *)a3 = v10;
  if (v10) {
    CFRetain(v10);
  }
  if (v9) {
    CFRelease(v9);
  }
  *(void *)(a3 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = *(void *)(v8 + 88);
  return 1;
}

void re::PeerVideoStreamingManager::lastConsumedFrameNumber(re *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *a2;
  uint64_t v6 = *(void *)(v4 + 24);
  uint64_t v5 = (re::PeerVideoStreamId *)(v4 + 24);
  if (!v6)
  {
    uint64_t v9 = *re::peerVideoStreamingLogObjects(a1);
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
LABEL_8:
      *(unsigned char *)a3 = 0;
      return;
    }
    __int16 v13 = 0;
    uint64_t v10 = "Failed to get last consumed frame number. Invalid handle.";
    uint64_t v11 = (uint8_t *)&v13;
LABEL_11:
    _os_log_error_impl(&dword_233120000, v9, OS_LOG_TYPE_ERROR, v10, v11, 2u);
    goto LABEL_8;
  }
  uint64_t v7 = re::HashTable<re::PeerVideoStreamId,re::StreamingInternal::StreamReadEnd,re::Hash<re::PeerVideoStreamId>,re::EqualTo<re::PeerVideoStreamId>,true,false>::tryGet((uint64_t)a1 + 176, v5);
  if (!v7)
  {
    uint64_t v9 = *re::peerVideoStreamingLogObjects(0);
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      goto LABEL_8;
    }
    __int16 v12 = 0;
    uint64_t v10 = "Failed to get last consumed frame number. No read end for handle.";
    uint64_t v11 = (uint8_t *)&v12;
    goto LABEL_11;
  }
  int v8 = *(unsigned __int8 *)(v7 + 112);
  *(unsigned char *)a3 = v8;
  if (v8) {
    *(void *)(a3 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = *(void *)(v7 + 120);
  }
}

uint64_t re::PeerVideoStreamingManager::streamStatus(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v5[0] = a2;
  v5[1] = a3;
  if (!a2) {
    return 0;
  }
  if (re::HashTable<re::PeerVideoStreamId,re::StreamingInternal::StreamWriteEnd,re::Hash<re::PeerVideoStreamId>,re::EqualTo<re::PeerVideoStreamId>,true,false>::tryGet(a1 + 128, (re::PeerVideoStreamId *)v5))
  {
    return 2;
  }
  if (re::HashTable<re::PeerVideoStreamId,re::StreamingInternal::StreamReadEnd,re::Hash<re::PeerVideoStreamId>,re::EqualTo<re::PeerVideoStreamId>,true,false>::tryGet(a1 + 176, (re::PeerVideoStreamId *)v5))
  {
    return 3;
  }
  return 1;
}

void re::PeerVideoStreamingManager::setUserData(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = (re::PeerVideoStreamId *)(*a2 + 24);
  uint64_t v5 = *(void *)v4;
  if (!*(void *)v4)
  {
    __int16 v13 = *re::peerVideoStreamingLogObjects((re *)a1);
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      return;
    }
    __int16 v21 = 0;
    uint64_t v14 = "Error setting userData. Invalid handle";
    __int16 v15 = (uint8_t *)&v21;
LABEL_22:
    _os_log_error_impl(&dword_233120000, v13, OS_LOG_TYPE_ERROR, v14, v15, 2u);
    return;
  }
  int v8 = (uint64_t *)(a1 + 128);
  if (re::HashTable<re::PeerVideoStreamId,re::StreamingInternal::StreamWriteEnd,re::Hash<re::PeerVideoStreamId>,re::EqualTo<re::PeerVideoStreamId>,true,false>::containsKey(a1 + 128, (re::PeerVideoStreamId *)(*a2 + 24)))
  {
    uint64_t v9 = *v8;
    uint64_t v10 = 0x7FFFFFFFLL;
    if (v9)
    {
      uint64_t v11 = *(unsigned int *)(*(void *)(a1 + 136) + 4
                                                    * (re::PeerVideoStreamId::hash(v4) % *(unsigned int *)(a1 + 152)));
      if (v11 != 0x7FFFFFFF)
      {
        uint64_t v12 = *(void *)(a1 + 144);
        uint64_t v10 = 0x7FFFFFFFLL;
        while (*(void *)(v12 + 336 * v11 + 16) != v5 || *(void *)(v12 + 336 * v11 + 24) != *(void *)(v3 + 32))
        {
          uint64_t v11 = *(_DWORD *)(v12 + 336 * v11 + 8) & 0x7FFFFFFF;
          if (v11 == 0x7FFFFFFF) {
            goto LABEL_24;
          }
        }
        uint64_t v10 = v11;
      }
    }
LABEL_24:
    *(void *)(*(void *)(a1 + 144) + 336 * v10 + 152) = a3;
    return;
  }
  BOOL v16 = re::HashTable<re::PeerVideoStreamId,re::StreamingInternal::StreamReadEnd,re::Hash<re::PeerVideoStreamId>,re::EqualTo<re::PeerVideoStreamId>,true,false>::containsKey(a1 + 176, v4);
  if (!v16)
  {
    __int16 v13 = *re::peerVideoStreamingLogObjects((re *)v16);
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      return;
    }
    __int16 v20 = 0;
    uint64_t v14 = "Error setting userData. No read or write end for handle.";
    __int16 v15 = (uint8_t *)&v20;
    goto LABEL_22;
  }
  uint64_t v17 = 0x7FFFFFFFLL;
  if (*(void *)(a1 + 176))
  {
    uint64_t v18 = *(unsigned int *)(*(void *)(a1 + 184) + 4 * (re::PeerVideoStreamId::hash(v4) % *(unsigned int *)(a1 + 200)));
    if (v18 != 0x7FFFFFFF)
    {
      uint64_t v19 = *(void *)(a1 + 192);
      uint64_t v17 = 0x7FFFFFFFLL;
      while (*(void *)(v19 + 168 * v18 + 16) != v5 || *(void *)(v19 + 168 * v18 + 24) != *(void *)(v3 + 32))
      {
        uint64_t v18 = *(_DWORD *)(v19 + 168 * v18 + 8) & 0x7FFFFFFF;
        if (v18 == 0x7FFFFFFF) {
          goto LABEL_26;
        }
      }
      uint64_t v17 = v18;
    }
  }
LABEL_26:
  *(void *)(*(void *)(a1 + 192) + 168 * v17 + 1re::HashTable<re::ecs2::Entity const*,re::ecs2::BillboardData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::deinit((uint64_t *)this + 60) = a3;
}

BOOL re::HashTable<re::PeerVideoStreamId,re::StreamingInternal::StreamWriteEnd,re::Hash<re::PeerVideoStreamId>,re::EqualTo<re::PeerVideoStreamId>,true,false>::containsKey(uint64_t a1, re::PeerVideoStreamId *this)
{
  uint64_t v2 = 0x7FFFFFFFLL;
  if (*(void *)a1)
  {
    uint64_t v5 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * (re::PeerVideoStreamId::hash(this) % *(unsigned int *)(a1 + 24)));
    if (v5 != 0x7FFFFFFF)
    {
      uint64_t v6 = *(void *)(a1 + 16);
      uint64_t v2 = 0x7FFFFFFFLL;
      while (*(void *)(v6 + 336 * v5 + 16) != *(void *)this
           || *(void *)(v6 + 336 * v5 + 24) != *((void *)this + 1))
      {
        uint64_t v5 = *(_DWORD *)(v6 + 336 * v5 + 8) & 0x7FFFFFFF;
        if (v5 == 0x7FFFFFFF) {
          return v2 != 0x7FFFFFFF;
        }
      }
      uint64_t v2 = v5;
    }
  }
  return v2 != 0x7FFFFFFF;
}

void re::PeerVideoStreamingManager::getUserData(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *a2;
  uint64_t v5 = (re::PeerVideoStreamId *)(*a2 + 24);
  uint64_t v6 = *(void *)v5;
  if (!*(void *)v5)
  {
    __int16 v13 = *re::peerVideoStreamingLogObjects((re *)a1);
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      goto LABEL_21;
    }
    __int16 v24 = 0;
    uint64_t v14 = "Error getting userData. Invalid handle";
    __int16 v15 = (uint8_t *)&v24;
    goto LABEL_28;
  }
  int v8 = (uint64_t *)(a1 + 128);
  if (!re::HashTable<re::PeerVideoStreamId,re::StreamingInternal::StreamWriteEnd,re::Hash<re::PeerVideoStreamId>,re::EqualTo<re::PeerVideoStreamId>,true,false>::containsKey(a1 + 128, (re::PeerVideoStreamId *)(*a2 + 24)))
  {
    BOOL v16 = re::HashTable<re::PeerVideoStreamId,re::StreamingInternal::StreamReadEnd,re::Hash<re::PeerVideoStreamId>,re::EqualTo<re::PeerVideoStreamId>,true,false>::containsKey(a1 + 176, v5);
    if (v16)
    {
      uint64_t v17 = 0x7FFFFFFFLL;
      if (*(void *)(a1 + 176))
      {
        uint64_t v18 = *(unsigned int *)(*(void *)(a1 + 184)
                              + 4 * (re::PeerVideoStreamId::hash(v5) % *(unsigned int *)(a1 + 200)));
        if (v18 != 0x7FFFFFFF)
        {
          uint64_t v19 = *(void *)(a1 + 192);
          uint64_t v17 = 0x7FFFFFFFLL;
          while (*(void *)(v19 + 168 * v18 + 16) != v6 || *(void *)(v19 + 168 * v18 + 24) != *(void *)(v4 + 32))
          {
            uint64_t v18 = *(_DWORD *)(v19 + 168 * v18 + 8) & 0x7FFFFFFF;
            if (v18 == 0x7FFFFFFF) {
              goto LABEL_25;
            }
          }
          uint64_t v17 = v18;
        }
      }
LABEL_25:
      uint64_t v22 = *(void *)(a1 + 192) + 168 * v17;
      *(unsigned char *)a3 = 1;
      uint64_t v21 = *(void *)(v22 + 160);
      goto LABEL_26;
    }
    __int16 v13 = *re::peerVideoStreamingLogObjects((re *)v16);
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
LABEL_21:
      *(unsigned char *)a3 = 0;
      return;
    }
    __int16 v23 = 0;
    uint64_t v14 = "Error getting userData. No read or write end for handle.";
    __int16 v15 = (uint8_t *)&v23;
LABEL_28:
    _os_log_error_impl(&dword_233120000, v13, OS_LOG_TYPE_ERROR, v14, v15, 2u);
    goto LABEL_21;
  }
  uint64_t v9 = *v8;
  uint64_t v10 = 0x7FFFFFFFLL;
  if (v9)
  {
    uint64_t v11 = *(unsigned int *)(*(void *)(a1 + 136) + 4 * (re::PeerVideoStreamId::hash(v5) % *(unsigned int *)(a1 + 152)));
    if (v11 != 0x7FFFFFFF)
    {
      uint64_t v12 = *(void *)(a1 + 144);
      uint64_t v10 = 0x7FFFFFFFLL;
      while (*(void *)(v12 + 336 * v11 + 16) != v6 || *(void *)(v12 + 336 * v11 + 24) != *(void *)(v4 + 32))
      {
        uint64_t v11 = *(_DWORD *)(v12 + 336 * v11 + 8) & 0x7FFFFFFF;
        if (v11 == 0x7FFFFFFF) {
          goto LABEL_23;
        }
      }
      uint64_t v10 = v11;
    }
  }
LABEL_23:
  uint64_t v20 = *(void *)(a1 + 144) + 336 * v10;
  *(unsigned char *)a3 = 1;
  uint64_t v21 = *(void *)(v20 + 152);
LABEL_26:
  *(void *)(a3 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v21;
}

uint64_t re::PeerVideoStreamingManager::clientCount(re::PeerVideoStreamingManager *this)
{
  return *((unsigned __int16 *)this + 24);
}

void re::PeerVideoStreamingManager::close(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  *(void *)&long long v37 = a2;
  *((void *)&v37 + 1) = a3;
  unint64_t v6 = a1 + 128;
  if (!re::HashTable<re::PeerVideoStreamId,re::StreamingInternal::StreamWriteEnd,re::Hash<re::PeerVideoStreamId>,re::EqualTo<re::PeerVideoStreamId>,true,false>::containsKey(a1 + 128, (re::PeerVideoStreamId *)&v37))
  {
    if (!re::HashTable<re::PeerVideoStreamId,re::StreamingInternal::StreamReadEnd,re::Hash<re::PeerVideoStreamId>,re::EqualTo<re::PeerVideoStreamId>,true,false>::containsKey(a1 + 176, (re::PeerVideoStreamId *)&v37))return; {
    if (*(void *)(a1 + 176))
    }
    {
      uint64_t v13 = *(unsigned int *)(*(void *)(a1 + 184)
                            + 4
                            * (re::PeerVideoStreamId::hash((re::PeerVideoStreamId *)&v37) % *(unsigned int *)(a1 + 200)));
      if (v13 != 0x7FFFFFFF)
      {
        uint64_t v14 = *(void *)(a1 + 192);
        do
        {
          if (*(void *)(v14 + 168 * v13 + 16) == a2 && *(void *)(v14 + 168 * v13 + 24) == a3) {
            break;
          }
          uint64_t v13 = *(_DWORD *)(v14 + 168 * v13 + 8) & 0x7FFFFFFF;
        }
        while (v13 != 0x7FFFFFFF);
      }
    }
    re::HashTable<re::PeerVideoStreamId,re::StreamingInternal::StreamReadEnd,re::Hash<re::PeerVideoStreamId>,re::EqualTo<re::PeerVideoStreamId>,true,false>::remove(a1 + 176, (re::PeerVideoStreamId *)&v37);
    if (*(void *)(a1 + 96) && **(void **)(a1 + 112))
    {
      re::PeerVideoStreamingManager::makeUnsubscribeMessage((re *)&v30, a2, a3);
      RESyncNetSessionSendData();
      __int16 v23 = v30;
      if (!v30 || !v34) {
        goto LABEL_31;
      }
    }
    else
    {
      __int16 v24 = *re::peerVideoStreamingLogObjects(v22);
      __int16 v23 = (re *)os_log_type_enabled(v24, OS_LOG_TYPE_ERROR);
      if (!v23) {
        goto LABEL_31;
      }
      uint64_t v28 = v24;
      re::DynamicString::format((re::DynamicString *)"%llu_%llu", (re::DynamicString *)&v30, a2, a3);
      uint64_t v29 = (v31 & 1) != 0 ? v33 : v32;
      *(_DWORD *)__n128 buf = 136315138;
      char v39 = v29;
      _os_log_error_impl(&dword_233120000, v28, OS_LOG_TYPE_ERROR, "Failed to send unsubscribe while closing read end %s. No Session", buf, 0xCu);

      __int16 v23 = v30;
      if (!v30 || (v31 & 1) == 0) {
        goto LABEL_31;
      }
    }
    __int16 v23 = (re *)(*(uint64_t (**)(re *))(*(void *)v23 + 40))(v23);
LABEL_31:
    uint64_t v25 = *re::peerVideoStreamingLogObjects(v23);
    if (!os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    id v26 = v25;
    re::DynamicString::format((re::DynamicString *)"%llu_%llu", (re::DynamicString *)&v30, a2, a3);
    if (v31) {
      long long v27 = v33;
    }
    else {
      long long v27 = v32;
    }
    *(_DWORD *)__n128 buf = 136315138;
    char v39 = v27;
    _os_log_impl(&dword_233120000, v26, OS_LOG_TYPE_DEFAULT, "Closed read end: %s.", buf, 0xCu);

    goto LABEL_36;
  }
  uint64_t v7 = (re *)re::HashTable<re::PeerVideoStreamId,re::StreamingInternal::StreamWriteEnd,re::Hash<re::PeerVideoStreamId>,re::EqualTo<re::PeerVideoStreamId>,true,false>::tryGet(v6, (re::PeerVideoStreamId *)&v37);
  if (*((unsigned char *)v7 + 296))
  {
    int v8 = v7;
    uint64_t v9 = *re::peerVideoStreamingLogObjects(v7);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = v9;
      re::DynamicString::format((re::DynamicString *)"%llu_%llu", (re::DynamicString *)&v30, a2, a3);
      if (v31) {
        uint64_t v11 = v33;
      }
      else {
        uint64_t v11 = v32;
      }
      *(_DWORD *)__n128 buf = 136315138;
      char v39 = v11;
      _os_log_impl(&dword_233120000, v10, OS_LOG_TYPE_DEFAULT, "Write end %s is active, deferring close until after flush", buf, 0xCu);

      if (v30)
      {
        if (v31) {
          (*(void (**)(void))(*(void *)v30 + 40))();
        }
      }
    }
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 3221225472;
    aBlock[2] = ___ZN2re25PeerVideoStreamingManager5closeENS_17PeerVideoStreamIdE_block_invoke;
    aBlock[3] = &__block_descriptor_56_e5_v8__0l;
    aBlock[4] = a1;
    long long v36 = v37;
    uint64_t v12 = (re *)_Block_copy(aBlock);
    v42[3] = re::globalAllocators(v12)[2];
    uint64_t v43 = 0;
    v42[0] = &unk_26E6F8EA0;
    v42[1] = _Block_copy(v12);
    uint64_t v43 = v42;
    re::PeerVideoFileWriter::flush((uint64_t)v8 + 128, (uint64_t)v42);
    re::FunctionBase<24ul,void ()(void)>::destroyCallable((uint64_t)v42);

    *((unsigned char *)v8 + 296) = 0;
    return;
  }
  __int16 v15 = (re *)re::HashTable<re::PeerVideoStreamId,re::StreamingInternal::StreamWriteEnd,re::Hash<re::PeerVideoStreamId>,re::EqualTo<re::PeerVideoStreamId>,true,false>::remove(v6, (re::PeerVideoStreamId *)&v37);
  BOOL v16 = re::peerVideoStreamingLogObjects(v15);
  uint64_t v17 = (re *)re::PeerVideoStreamingLogObjects::loggingEnabled((re::PeerVideoStreamingLogObjects *)v16);
  if (!v17) {
    return;
  }
  uint64_t v18 = *re::peerVideoStreamingLogObjects(v17);
  if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT)) {
    return;
  }
  uint64_t v19 = v18;
  re::DynamicString::format((re::DynamicString *)"%llu_%llu", (re::DynamicString *)&v30, a2, a3);
  if (v31) {
    uint64_t v20 = v33;
  }
  else {
    uint64_t v20 = v32;
  }
  int v21 = *(_DWORD *)(a1 + 156);
  *(_DWORD *)__n128 buf = 136315394;
  char v39 = v20;
  __int16 v40 = 1024;
  int v41 = v21;
  _os_log_impl(&dword_233120000, v19, OS_LOG_TYPE_DEFAULT, "Closed write end: %s (count=%u)", buf, 0x12u);

LABEL_36:
  if (v30 && (v31 & 1) != 0) {
    (*(void (**)(void))(*(void *)v30 + 40))();
  }
}

uint64_t ___ZN2re25PeerVideoStreamingManager5closeENS_17PeerVideoStreamIdE_block_invoke(void *a1)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[4];
  uint64_t v3 = *re::peerVideoStreamingLogObjects((re *)a1);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = a1[5];
    uint64_t v5 = a1[6];
    unint64_t v6 = v3;
    re::DynamicString::format((re::DynamicString *)"%llu_%llu", (re::DynamicString *)&v16, v4, v5);
    uint64_t v7 = (v17 & 1) != 0 ? v19 : v18;
    *(_DWORD *)__n128 buf = 136315138;
    int v21 = v7;
    _os_log_impl(&dword_233120000, v6, OS_LOG_TYPE_DEFAULT, "Flushed video file writer for write end: %s", buf, 0xCu);

    if (v16)
    {
      if (v17) {
        (*(void (**)(void))(*(void *)v16 + 40))();
      }
    }
  }
  int v8 = (re *)re::HashTable<re::PeerVideoStreamId,re::StreamingInternal::StreamWriteEnd,re::Hash<re::PeerVideoStreamId>,re::EqualTo<re::PeerVideoStreamId>,true,false>::remove(v2 + 128, (re::PeerVideoStreamId *)(a1 + 5));
  uint64_t v9 = *re::peerVideoStreamingLogObjects(v8);
  uint64_t result = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
  if (result)
  {
    uint64_t v11 = a1[5];
    uint64_t v12 = a1[6];
    uint64_t v13 = v9;
    re::DynamicString::format((re::DynamicString *)"%llu_%llu", (re::DynamicString *)&v16, v11, v12);
    if (v17) {
      uint64_t v14 = v19;
    }
    else {
      uint64_t v14 = v18;
    }
    int v15 = *(_DWORD *)(v2 + 156);
    *(_DWORD *)__n128 buf = 136315394;
    int v21 = v14;
    __int16 v22 = 1024;
    int v23 = v15;
    _os_log_impl(&dword_233120000, v13, OS_LOG_TYPE_DEFAULT, "Closed write end: %s (count=%u)", buf, 0x12u);

    uint64_t result = v16;
    if (v16)
    {
      if (v17) {
        return (*(uint64_t (**)(void))(*(void *)v16 + 40))();
      }
    }
  }
  return result;
}

unint64_t re::HashTable<re::PeerVideoStreamId,re::StreamingInternal::StreamWriteEnd,re::Hash<re::PeerVideoStreamId>,re::EqualTo<re::PeerVideoStreamId>,true,false>::remove(unint64_t result, re::PeerVideoStreamId *this)
{
  if (*(void *)result)
  {
    unint64_t v3 = result;
    uint64_t result = re::PeerVideoStreamId::hash(this);
    unint64_t v4 = result % *(unsigned int *)(v3 + 24);
    uint64_t v5 = *(void *)(v3 + 8);
    uint64_t v6 = *(unsigned int *)(v5 + 4 * v4);
    if (v6 != 0x7FFFFFFF)
    {
      uint64_t v7 = *(void *)(v3 + 16);
      uint64_t v8 = 0x7FFFFFFFLL;
      while (*(void *)(v7 + 336 * v6 + 16) != *(void *)this
           || *(void *)(v7 + 336 * v6 + 24) != *((void *)this + 1))
      {
        uint64_t v8 = v6;
        uint64_t v6 = *(_DWORD *)(v7 + 336 * v6 + 8) & 0x7FFFFFFF;
        if (v6 == 0x7FFFFFFF) {
          return result;
        }
      }
      int v9 = *(_DWORD *)(v7 + 336 * v6 + 8) & 0x7FFFFFFF;
      if (v8 == 0x7FFFFFFF) {
        *(_DWORD *)(v5 + 4 * v4) = v9;
      }
      else {
        *(_DWORD *)(v7 + 336 * v8 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = *(_DWORD *)(v7 + 336 * v8 + 8) & 0x80000000 | v9;
      }
      uint64_t result = re::HashTable<re::PeerVideoStreamId,re::StreamingInternal::StreamWriteEnd,re::Hash<re::PeerVideoStreamId>,re::EqualTo<re::PeerVideoStreamId>,true,false>::EntryWithHash::free(*(void *)(v3 + 16) + 336 * v6);
      int v10 = *(_DWORD *)(v3 + 40);
      *(_DWORD *)(*(void *)(v3 + 16) + 336 * v6 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = *(_DWORD *)(*(void *)(v3 + 16) + 336 * v6 + 8) & 0x80000000 | *(_DWORD *)(v3 + 36);
      --*(_DWORD *)(v3 + 28);
      *(_DWORD *)(v3 + 36) = v6;
      *(_DWORD *)(v3 + 40) = v10 + 1;
    }
  }
  return result;
}

uint64_t re::PeerVideoStreamingManager::newFrameEvent(re::PeerVideoStreamingManager *this)
{
  return (uint64_t)this + 224;
}

void _ZN2re8internal8CallableIZZNS_25PeerVideoStreamingManager15setupSessionObsEvEUb_E3__0FvRKN12_GLOBAL__N_113MessageHeaderERNS_11OPackReaderEEJEED0Ev()
{
}

void _ZNK2re8internal8CallableIZZNS_25PeerVideoStreamingManager15setupSessionObsEvEUb_E3__0FvRKN12_GLOBAL__N_113MessageHeaderERNS_11OPackReaderEEJEEclES7_S9_(re *a1, uint64_t a2, re::OPackReader *a3)
{
  uint64_t v96 = *MEMORY[0x263EF8340];
  uint64_t v4 = *((void *)a1 + 1);
  int v5 = *(_DWORD *)(a2 + 16);
  if (v5 != 3)
  {
    if (v5 != 2)
    {
      if (v5 != 1)
      {
        uint64_t v38 = *re::peerVideoStreamingLogObjects(a1);
        if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)__n128 buf = 0;
          _os_log_error_impl(&dword_233120000, v38, OS_LOG_TYPE_ERROR, "Received unknown message type.", buf, 2u);
        }
        return;
      }
      uint64_t v6 = (const void *)*((void *)a1 + 2);
      uint64_t v7 = *(void *)a2;
      uint64_t v8 = *(void *)(a2 + 8);
      *(void *)&long long v95 = *(void *)a2;
      *((void *)&v95 + 1) = v8;
      CFTypeRef cf = v6;
      int v9 = *re::peerVideoStreamingLogObjects(a1);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__n128 buf = 134217984;
        *(void *)&uint8_t buf[4] = v6;
        _os_log_impl(&dword_233120000, v9, OS_LOG_TYPE_DEFAULT, "Received subscribe message from peer %llu", buf, 0xCu);
      }
      re::OPackReader::next(a3, v10);
      if (re::HashTable<re::PeerVideoStreamId,re::StreamingInternal::StreamWriteEnd,re::Hash<re::PeerVideoStreamId>,re::EqualTo<re::PeerVideoStreamId>,true,false>::containsKey(v4 + 128, (re::PeerVideoStreamId *)&v95))
      {
        uint64_t v11 = 0x7FFFFFFFLL;
        if (*(void *)(v4 + 128))
        {
          uint64_t v12 = *(unsigned int *)(*(void *)(v4 + 136)
                                + 4
                                * (re::PeerVideoStreamId::hash((re::PeerVideoStreamId *)&v95)
                                 % *(unsigned int *)(v4 + 152)));
          if (v12 != 0x7FFFFFFF)
          {
            uint64_t v13 = *(void *)(v4 + 144);
            uint64_t v11 = 0x7FFFFFFFLL;
            while (*(void *)(v13 + 336 * v12 + 16) != v7 || *(void *)(v13 + 336 * v12 + 24) != v8)
            {
              uint64_t v12 = *(_DWORD *)(v13 + 336 * v12 + 8) & 0x7FFFFFFF;
              if (v12 == 0x7FFFFFFF) {
                goto LABEL_82;
              }
            }
            uint64_t v11 = v12;
          }
        }
LABEL_82:
        uint64_t v55 = *(void *)(v4 + 144);
        unint64_t v56 = (void *)(v55 + 336 * v11);
        uint64_t v57 = v56[8];
        uint64_t v58 = v56[6];
        if (v58)
        {
          uint64_t v59 = 8 * v58;
          unint64_t v60 = (CFTypeRef *)v56[8];
          while (*v60 != cf)
          {
            ++v60;
            v59 -= 8;
            if (!v59)
            {
              unint64_t v60 = (CFTypeRef *)(v57 + 8 * v58);
              break;
            }
          }
        }
        else
        {
          unint64_t v60 = (CFTypeRef *)v56[8];
        }
        if (v58 != ((uint64_t)v60 - v57) >> 3) {
          return;
        }
        uint64_t v61 = (re *)re::DynamicArray<re::TransitionCondition *>::add(v56 + 4, &cf);
        *(unsigned char *)(v55 + 336 * v11 + 144) = 1;
        ++*(_WORD *)(v4 + 48);
        uint64_t v62 = *re::peerVideoStreamingLogObjects(v61);
        if (!os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT)) {
          return;
        }
        CFTypeRef v63 = cf;
        uint64_t v64 = v62;
        re::DynamicString::format((re::DynamicString *)"%llu_%llu", (re::DynamicString *)buf, v7, v8);
        if (buf[8]) {
          uint64_t v65 = v92;
        }
        else {
          uint64_t v65 = &buf[9];
        }
        *(_DWORD *)float32x4_t v88 = 134218242;
        *(void *)&v88[4] = v63;
        *(_WORD *)&v88[12] = 2080;
        *(void *)&v88[14] = v65;
        long long v66 = "Added client %llu to write end %s";
LABEL_122:
        uint64_t v73 = v88;
        uint64_t v74 = v64;
        uint32_t v75 = 22;
        goto LABEL_123;
      }
      BOOL v44 = re::HashTable<re::PeerVideoStreamId,re::StreamingInternal::StreamReadEnd,re::Hash<re::PeerVideoStreamId>,re::EqualTo<re::PeerVideoStreamId>,true,false>::containsKey(v4 + 176, (re::PeerVideoStreamId *)&v95);
      if (v44)
      {
        uint64_t v45 = 0x7FFFFFFFLL;
        if (*(void *)(v4 + 176))
        {
          uint64_t v46 = *(unsigned int *)(*(void *)(v4 + 184)
                                + 4
                                * (re::PeerVideoStreamId::hash((re::PeerVideoStreamId *)&v95)
                                 % *(unsigned int *)(v4 + 200)));
          if (v46 != 0x7FFFFFFF)
          {
            uint64_t v47 = *(void *)(v4 + 192);
            uint64_t v45 = 0x7FFFFFFFLL;
            while (*(void *)(v47 + 168 * v46 + 16) != v7 || *(void *)(v47 + 168 * v46 + 24) != v8)
            {
              uint64_t v46 = *(_DWORD *)(v47 + 168 * v46 + 8) & 0x7FFFFFFF;
              if (v46 == 0x7FFFFFFF) {
                goto LABEL_110;
              }
            }
            uint64_t v45 = v46;
          }
        }
LABEL_110:
        unsigned int v76 = (void *)(*(void *)(v4 + 192) + 168 * v45);
        uint64_t v77 = v76[10];
        uint64_t v78 = v76[8];
        if (v78)
        {
          uint64_t v79 = 8 * v78;
          uint64_t v80 = (CFTypeRef *)v76[10];
          while (*v80 != cf)
          {
            ++v80;
            v79 -= 8;
            if (!v79)
            {
              uint64_t v80 = (CFTypeRef *)(v77 + 8 * v78);
              break;
            }
          }
        }
        else
        {
          uint64_t v80 = (CFTypeRef *)v76[10];
        }
        if (v78 != ((uint64_t)v80 - v77) >> 3) {
          return;
        }
        uint64_t v81 = (re *)re::DynamicArray<re::TransitionCondition *>::add(v76 + 6, &cf);
        ++*(_WORD *)(v4 + 48);
        uint64_t v82 = *re::peerVideoStreamingLogObjects(v81);
        if (!os_log_type_enabled(v82, OS_LOG_TYPE_DEFAULT)) {
          return;
        }
        CFTypeRef v83 = cf;
        uint64_t v64 = v82;
        re::DynamicString::format((re::DynamicString *)"%llu_%llu", (re::DynamicString *)buf, v7, v8);
        if (buf[8]) {
          uint64_t v84 = v92;
        }
        else {
          uint64_t v84 = &buf[9];
        }
        *(_DWORD *)float32x4_t v88 = 134218242;
        *(void *)&v88[4] = v83;
        *(_WORD *)&v88[12] = 2080;
        *(void *)&v88[14] = v84;
        long long v66 = "Added proxy client %llu to read end %s";
        goto LABEL_122;
      }
      uint64_t v48 = *re::peerVideoStreamingLogObjects((re *)v44);
      if (!os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT)) {
        return;
      }
      *(_WORD *)__n128 buf = 0;
      unint64_t v49 = "Received subscribe message for nonexisting stream id.";
LABEL_62:
      _os_log_impl(&dword_233120000, v48, OS_LOG_TYPE_DEFAULT, v49, buf, 2u);
      return;
    }
    long long v30 = (const void *)*((void *)a1 + 2);
    uint64_t v31 = *(void *)a2;
    uint64_t v32 = *(void *)(a2 + 8);
    *(void *)float32x4_t v88 = *(void *)a2;
    *(void *)&v88[8] = v32;
    CFTypeRef cf = v30;
    int v33 = *re::peerVideoStreamingLogObjects(a1);
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__n128 buf = 134217984;
      *(void *)&uint8_t buf[4] = v30;
      _os_log_impl(&dword_233120000, v33, OS_LOG_TYPE_DEFAULT, "Received unsubscribe message from peer %llu", buf, 0xCu);
    }
    re::OPackReader::next(a3, v34);
    if (re::HashTable<re::PeerVideoStreamId,re::StreamingInternal::StreamWriteEnd,re::Hash<re::PeerVideoStreamId>,re::EqualTo<re::PeerVideoStreamId>,true,false>::containsKey(v4 + 128, (re::PeerVideoStreamId *)v88))
    {
      uint64_t v35 = 0x7FFFFFFFLL;
      if (*(void *)(v4 + 128))
      {
        uint64_t v36 = *(unsigned int *)(*(void *)(v4 + 136)
                              + 4
                              * (re::PeerVideoStreamId::hash((re::PeerVideoStreamId *)v88) % *(unsigned int *)(v4 + 152)));
        if (v36 != 0x7FFFFFFF)
        {
          uint64_t v37 = *(void *)(v4 + 144);
          uint64_t v35 = 0x7FFFFFFFLL;
          while (*(void *)(v37 + 336 * v36 + 16) != v31 || *(void *)(v37 + 336 * v36 + 24) != v32)
          {
            uint64_t v36 = *(_DWORD *)(v37 + 336 * v36 + 8) & 0x7FFFFFFF;
            if (v36 == 0x7FFFFFFF) {
              goto LABEL_95;
            }
          }
          uint64_t v35 = v36;
        }
      }
LABEL_95:
      BOOL v67 = re::DynamicArray<unsigned long long>::remove(*(void *)(v4 + 144) + 336 * v35 + 32, &cf);
      if (!v67) {
        return;
      }
      --*(_WORD *)(v4 + 48);
      uint64_t v68 = *re::peerVideoStreamingLogObjects((re *)v67);
      if (!os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT)) {
        return;
      }
      uint64_t v64 = v68;
      re::DynamicString::format((re::DynamicString *)"%llu_%llu", (re::DynamicString *)buf, v31, v32);
      if (buf[8]) {
        uint64_t v69 = v92;
      }
      else {
        uint64_t v69 = &buf[9];
      }
      LODWORD(v95) = 136315138;
      *(void *)((char *)&v95 + 4) = v69;
      long long v66 = "Removed as client from write end: %s";
    }
    else
    {
      BOOL v40 = re::HashTable<re::PeerVideoStreamId,re::StreamingInternal::StreamReadEnd,re::Hash<re::PeerVideoStreamId>,re::EqualTo<re::PeerVideoStreamId>,true,false>::containsKey(v4 + 176, (re::PeerVideoStreamId *)v88);
      if (!v40)
      {
        uint64_t v48 = *re::peerVideoStreamingLogObjects((re *)v40);
        if (!os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT)) {
          return;
        }
        *(_WORD *)__n128 buf = 0;
        unint64_t v49 = "Received unsubscribe message for nonexisting stream id.";
        goto LABEL_62;
      }
      uint64_t v41 = 0x7FFFFFFFLL;
      if (*(void *)(v4 + 176))
      {
        uint64_t v42 = *(unsigned int *)(*(void *)(v4 + 184)
                              + 4
                              * (re::PeerVideoStreamId::hash((re::PeerVideoStreamId *)v88) % *(unsigned int *)(v4 + 200)));
        if (v42 != 0x7FFFFFFF)
        {
          uint64_t v43 = *(void *)(v4 + 192);
          uint64_t v41 = 0x7FFFFFFFLL;
          while (*(void *)(v43 + 168 * v42 + 16) != v31 || *(void *)(v43 + 168 * v42 + 24) != v32)
          {
            uint64_t v42 = *(_DWORD *)(v43 + 168 * v42 + 8) & 0x7FFFFFFF;
            if (v42 == 0x7FFFFFFF) {
              goto LABEL_102;
            }
          }
          uint64_t v41 = v42;
        }
      }
LABEL_102:
      BOOL v70 = re::DynamicArray<unsigned long long>::remove(*(void *)(v4 + 192) + 168 * v41 + 48, &cf);
      if (!v70) {
        return;
      }
      --*(_WORD *)(v4 + 48);
      uint64_t v71 = *re::peerVideoStreamingLogObjects((re *)v70);
      if (!os_log_type_enabled(v71, OS_LOG_TYPE_DEFAULT)) {
        return;
      }
      uint64_t v64 = v71;
      re::DynamicString::format((re::DynamicString *)"%llu_%llu", (re::DynamicString *)buf, v31, v32);
      if (buf[8]) {
        size_t v72 = v92;
      }
      else {
        size_t v72 = &buf[9];
      }
      LODWORD(v95) = 136315138;
      *(void *)((char *)&v95 + 4) = v72;
      long long v66 = "Removed as proxy client from read end: %s";
    }
    uint64_t v73 = (uint8_t *)&v95;
    uint64_t v74 = v64;
    uint32_t v75 = 12;
LABEL_123:
    _os_log_impl(&dword_233120000, v74, OS_LOG_TYPE_DEFAULT, v66, v73, v75);

    uint64_t v53 = *(void *)buf;
    if (*(void *)buf && (buf[8] & 1) != 0)
    {
LABEL_125:
      (*(void (**)(uint64_t))(*(void *)v53 + 40))(v53);
      return;
    }
    return;
  }
  uint64_t v15 = *(void *)a2;
  uint64_t v14 = *(void *)(a2 + 8);
  uint64_t v16 = *((void *)a1 + 2);
  *(void *)&long long v95 = *(void *)a2;
  *((void *)&v95 + 1) = v14;
  uint64_t v17 = re::internal::enableSignposts(0, 0);
  if (v17)
  {
    uint64_t v17 = re::internal::enableHighFrequencyNetworkTracing(0, 0);
    if (v17) {
      uint64_t v17 = kdebug_trace();
    }
  }
  if (!*(void *)(v4 + 96) || !**(void **)(v4 + 112))
  {
    char v39 = *re::peerVideoStreamingLogObjects((re *)v17);
    if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__n128 buf = 0;
      _os_log_error_impl(&dword_233120000, v39, OS_LOG_TYPE_ERROR, "Failed to process frame message. No Session available.", buf, 2u);
    }
    if (!re::internal::enableSignposts(0, 0) || !re::internal::enableHighFrequencyNetworkTracing(0, 0)) {
      return;
    }
    goto LABEL_41;
  }
  uint64_t v18 = re::HashTable<re::PeerVideoStreamId,re::StreamingInternal::StreamReadEnd,re::Hash<re::PeerVideoStreamId>,re::EqualTo<re::PeerVideoStreamId>,true,false>::tryGet(v4 + 176, (re::PeerVideoStreamId *)&v95);
  if (!v18)
  {
    int8x16_t v50 = *re::peerVideoStreamingLogObjects(0);
    if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v51 = v50;
      re::DynamicString::format((re::DynamicString *)"%llu_%llu", (re::DynamicString *)buf, v15, v14);
      uint64_t v52 = (buf[8] & 1) != 0 ? v92 : &buf[9];
      *(_DWORD *)float32x4_t v88 = 136315138;
      *(void *)&v88[4] = v52;
      _os_log_impl(&dword_233120000, v51, OS_LOG_TYPE_DEFAULT, "Received frame message for unknown stream id %s. Sending unsubscribe.", v88, 0xCu);

      if (*(void *)buf)
      {
        if (buf[8]) {
          (*(void (**)(void))(**(void **)buf + 40))();
        }
      }
    }
    re::PeerVideoStreamingManager::makeUnsubscribeMessage((re *)buf, v15, v14);
    RESyncNetSessionSendData();
    if (re::internal::enableSignposts(0, 0) && re::internal::enableHighFrequencyNetworkTracing(0, 0)) {
      kdebug_trace();
    }
    uint64_t v53 = *(void *)buf;
    if (*(void *)buf && v94) {
      goto LABEL_125;
    }
    return;
  }
  uint64_t v20 = v18;
  uint64_t v86 = 0;
  CFTypeRef cf = 0;
  BOOL v21 = re::PeerVideoStreamingUtils::readCMSampleBuffer(a3, (re::OPackReader *)(v18 + 64), (unint64_t *)&cf, &v86, v19);
  if (v21)
  {
    __int16 v22 = v86;
    uint64_t v23 = re::globalAllocators((re *)v21)[2];
    uint64_t v93 = v23;
    uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v23 + 32))(v23, 48, 0);
    *(void *)uint64_t v24 = &unk_26E6F9010;
    *(void *)(v24 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v4;
    *(_OWORD *)(v24 + 16) = v95;
    *(void *)(v24 + 32) = v22;
    *(void *)(v24 + 40) = v16;
    uint64_t v94 = v24;
    uint64_t v25 = (opaqueCMSampleBuffer *)cf;
    uint64_t v89 = v23;
    uint64_t v90 = 0;
    re::FunctionBase<24ul,void ()(re::OutputVideoFrame &&)>::operator=<24ul>((uint64_t)v88, (uint64_t)buf);
    id v85 = *(id *)(v4 + 8);
    re::PeerVideoStreamingDecoder::decodeFrame((VTDecompressionSessionRef *)(v20 + 56), v25, (uint64_t)v88, &v85);
    id v26 = v85;
    id v85 = 0;

    re::FunctionBase<24ul,void ()(re::OutputVideoFrame &&)>::destroyCallable((uint64_t)v88);
    CFRelease(cf);
    uint64_t v27 = *(void *)(v20 + 32);
    if (v27)
    {
      uint64_t v28 = *(void *)(v20 + 48);
      uint64_t v29 = 8 * v27;
      do
      {
        v28 += 8;
        RESyncNetSessionSendDataUnreliableUnordered();
        v29 -= 8;
      }
      while (v29);
    }
    re::FunctionBase<24ul,void ()(re::OutputVideoFrame &&)>::destroyCallable((uint64_t)buf);
    return;
  }
  CVMetalTextureRef v54 = *re::peerVideoStreamingLogObjects((re *)v21);
  if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)__n128 buf = 0;
    _os_log_error_impl(&dword_233120000, v54, OS_LOG_TYPE_ERROR, "Failed to read CMSampleBuffer", buf, 2u);
  }
  if (re::internal::enableSignposts(0, 0) && re::internal::enableHighFrequencyNetworkTracing(0, 0)) {
LABEL_41:
  }
    kdebug_trace();
}

uint64_t _ZNK2re8internal8CallableIZZNS_25PeerVideoStreamingManager15setupSessionObsEvEUb_E3__0FvRKN12_GLOBAL__N_113MessageHeaderERNS_11OPackReaderEEJEE9cloneIntoEPv(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6F8DD0;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v2;
  return a2;
}

uint64_t _ZN2re8internal8CallableIZZNS_25PeerVideoStreamingManager15setupSessionObsEvEUb_E3__0FvRKN12_GLOBAL__N_113MessageHeaderERNS_11OPackReaderEEJEE8moveIntoEPv(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6F8DD0;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v2;
  return a2;
}

uint64_t _ZNK2re8internal8CallableIZZNS_25PeerVideoStreamingManager15setupSessionObsEvEUb_E3__0FvRKN12_GLOBAL__N_113MessageHeaderERNS_11OPackReaderEEJEE4sizeEv()
{
  return 40;
}

void *re::internal::Callable<re::PeerVideoStreamingManager::writeFrame(re::SharedPtr<re::PeerVideoStreamHandle>,re::InputVideoFrame const&)::$_0,void ()(opaqueCMSampleBuffer *)>::~Callable(void *a1)
{
  *a1 = &unk_26E6F8E38;
  uint64_t v2 = a1[2];
  if (v2)
  {

    a1[2] = 0;
  }
  return a1;
}

void re::internal::Callable<re::PeerVideoStreamingManager::writeFrame(re::SharedPtr<re::PeerVideoStreamHandle>,re::InputVideoFrame const&)::$_0,void ()(opaqueCMSampleBuffer *)>::~Callable(void *a1)
{
  *a1 = &unk_26E6F8E38;
  uint64_t v2 = a1[2];
  if (v2)
  {

    a1[2] = 0;
  }
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::internal::Callable<re::PeerVideoStreamingManager::writeFrame(re::SharedPtr<re::PeerVideoStreamHandle>,re::InputVideoFrame const&)::$_0,void ()(opaqueCMSampleBuffer *)>::operator()(void *a1, CMSampleBufferRef *a2)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  unint64_t v3 = *a2;
  uint64_t v4 = a1[1];
  size_t TotalSampleSize = CMSampleBufferGetTotalSampleSize(*a2);
  int NumSamples = CMSampleBufferGetNumSamples(v3);
  CFArrayRef SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray(v3, 0);
  Count = (re *)CFArrayGetCount(SampleAttachmentsArray);
  int v9 = (int)Count;
  uint64_t v10 = *re::peerVideoStreamingLogObjects(Count);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    unint64_t v21 = a1[3];
    uint64_t v22 = a1[4];
    uint64_t v23 = a1[5];
    *(_DWORD *)__n128 buf = 134219520;
    *(void *)&uint8_t buf[4] = v21;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = TotalSampleSize;
    *(_WORD *)&unsigned char buf[22] = 2048;
    size_t v28 = v21 / TotalSampleSize;
    *(_WORD *)uint64_t v29 = 2048;
    *(void *)&void v29[2] = v22;
    __int16 v30 = 2048;
    uint64_t v31 = v23;
    __int16 v32 = 1024;
    int v33 = NumSamples;
    __int16 v34 = 1024;
    int v35 = v9;
    _os_log_debug_impl(&dword_233120000, v10, OS_LOG_TYPE_DEBUG, "Encode succeeded. Input buffer size: %lu. Encoded buffer size: %lu. Compression factor: %lu, w: %zu, h: %zu, n:%d/%d", buf, 0x40u);
  }
  uint64_t v11 = (re::PeerVideoStreamId *)(a1[2] + 24);
  uint64_t v12 = (re *)re::HashTable<re::PeerVideoStreamId,re::StreamingInternal::StreamWriteEnd,re::Hash<re::PeerVideoStreamId>,re::EqualTo<re::PeerVideoStreamId>,true,false>::tryGet(v4 + 128, v11);
  if (!v12 || (uint64_t v13 = v12, !*((void *)v12 + 2)))
  {
    uint64_t result = re::internal::enableSignposts(0, 0);
    if (!result) {
      return result;
    }
    uint64_t result = re::internal::enableHighFrequencyNetworkTracing(0, 0);
    if (!result) {
      return result;
    }
    return kdebug_trace();
  }
  if (*(void *)(v4 + 96) && **(void **)(v4 + 112))
  {
    uint64_t v14 = a1[6];
    long long v25 = *(_OWORD *)v11;
    int v26 = 3;
    uint64_t v15 = re::globalAllocators(v12)[2];
    *(void *)&uint8_t buf[16] = v14;
    size_t v28 = v15;
    *(void *)__n128 buf = &unk_26E6F8FB8;
    *(void *)&buf[8] = v3;
    *(void *)uint64_t v29 = buf;
    re::FunctionBase<24ul,void ()(re::OPackWriter &)>::destroyCallable((uint64_t)buf);
    uint64_t v16 = *((void *)v13 + 2);
    if (v16)
    {
      uint64_t v17 = *((void *)v13 + 4);
      uint64_t v18 = 8 * v16;
      do
      {
        v17 += 8;
        RESyncNetSessionSendDataUnreliableUnordered();
        v18 -= 8;
      }
      while (v18);
    }
    if (re::internal::enableSignposts(0, 0) && re::internal::enableHighFrequencyNetworkTracing(0, 0)) {
      kdebug_trace();
    }
    uint64_t result = v24[0];
    if (v24[0])
    {
      if (v24[4]) {
        return (*(uint64_t (**)(void))(*(void *)v24[0] + 40))();
      }
    }
    return result;
  }
  uint64_t v20 = *re::peerVideoStreamingLogObjects(v12);
  if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)__n128 buf = 0;
    _os_log_error_impl(&dword_233120000, v20, OS_LOG_TYPE_ERROR, "No Session available in OnEncodeSucceeded", buf, 2u);
  }
  uint64_t result = re::internal::enableSignposts(0, 0);
  if (result)
  {
    uint64_t result = re::internal::enableHighFrequencyNetworkTracing(0, 0);
    if (result) {
      return kdebug_trace();
    }
  }
  return result;
}

uint64_t re::internal::Callable<re::PeerVideoStreamingManager::writeFrame(re::SharedPtr<re::PeerVideoStreamHandle>,re::InputVideoFrame const&)::$_0,void ()(opaqueCMSampleBuffer *)>::cloneInto(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_26E6F8E38;
  *(void *)(a2 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v5;
  *(void *)(a2 + 16) = v4;
  if (v4) {
    id v6 = (id)(v4 + 8);
  }
  long long v7 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v7;
  return a2;
}

uint64_t re::internal::Callable<re::PeerVideoStreamingManager::writeFrame(re::SharedPtr<re::PeerVideoStreamHandle>,re::InputVideoFrame const&)::$_0,void ()(opaqueCMSampleBuffer *)>::moveInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6F8E38;
  *(_OWORD *)(a2 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = *(_OWORD *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  long long v2 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v2;
  return a2;
}

uint64_t re::internal::Callable<re::PeerVideoStreamingManager::writeFrame(re::SharedPtr<re::PeerVideoStreamHandle>,re::InputVideoFrame const&)::$_0,void ()(opaqueCMSampleBuffer *)>::size()
{
  return 56;
}

uint64_t re::FunctionBase<24ul,void ()(opaqueCMSampleBuffer *)>::operator=<24ul>(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    re::FunctionBase<24ul,void ()(opaqueCMSampleBuffer *)>::destroyCallable(a1);
    uint64_t v4 = *(void *)(a2 + 32);
    if (v4)
    {
      unint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4);
      uint64_t v6 = a1;
      if (v5 >= 0x19)
      {
        unint64_t v7 = v5;
        uint64_t v8 = *(void *)(a1 + 24);
        if (v8) {
          uint64_t v6 = (*(uint64_t (**)(uint64_t, unint64_t, void))(*(void *)v8 + 32))(v8, v7, 0);
        }
        else {
          uint64_t v6 = 0;
        }
      }
      *(void *)(a1 + 32) = v6;
      (*(void (**)(void))(**(void **)(a2 + 32) + 24))(*(void *)(a2 + 32));
    }
  }
  return a1;
}

uint64_t (***re::FunctionBase<24ul,void ()(opaqueCMSampleBuffer *)>::destroyCallable(uint64_t a1))(void)
{
  uint64_t result = *(uint64_t (****)(void))(a1 + 32);
  if (result)
  {
    uint64_t result = (uint64_t (***)(void))(**result)(result);
    if (*(void *)(a1 + 32) != a1) {
      uint64_t result = (uint64_t (***)(void))(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24));
    }
    *(void *)(a1 + 32) = 0;
  }
  return result;
}

uint64_t re::internal::Callable<void({block_pointer} {__strong})(void),void ()(void)>::~Callable(uint64_t a1)
{
  return a1;
}

void re::internal::Callable<void({block_pointer} {__strong})(void),void ()(void)>::~Callable(uint64_t a1)
{
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::internal::Callable<void({block_pointer} {__strong})(void),void ()(void)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 16))();
}

void *re::internal::Callable<void({block_pointer} {__strong})(void),void ()(void)>::cloneInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E6F8EA0;
  a2[1] = _Block_copy(*(const void **)(a1 + 8));
  return a2;
}

void *re::internal::Callable<void({block_pointer} {__strong})(void),void ()(void)>::moveInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E6F8EA0;
  a2[1] = _Block_copy(*(const void **)(a1 + 8));
  return a2;
}

uint64_t re::internal::Callable<void({block_pointer} {__strong})(void),void ()(void)>::size()
{
  return 16;
}

void re::internal::Callable<re::PeerVideoStreamingManager::makeSubscribeMessage(re::PeerVideoStreamId)::$_0,void ()(re::OPackWriter &)>::~Callable()
{
}

uint64_t re::internal::Callable<re::PeerVideoStreamingManager::makeSubscribeMessage(re::PeerVideoStreamId)::$_0,void ()(re::OPackWriter &)>::operator()(uint64_t a1, re::zerocopy **a2)
{
  char v3 = 4;
  return re::zerocopy::writeAll(*a2, (re::zerocopy::WriteStream *)&v3, (char *)1);
}

void *re::internal::Callable<re::PeerVideoStreamingManager::makeSubscribeMessage(re::PeerVideoStreamId)::$_0,void ()(re::OPackWriter &)>::cloneInto(uint64_t a1, void *a2)
{
  uint64_t result = a2;
  *a2 = &unk_26E6F8EF8;
  return result;
}

void *re::internal::Callable<re::PeerVideoStreamingManager::makeSubscribeMessage(re::PeerVideoStreamId)::$_0,void ()(re::OPackWriter &)>::moveInto(uint64_t a1, void *a2)
{
  uint64_t result = a2;
  *a2 = &unk_26E6F8EF8;
  return result;
}

uint64_t re::internal::Callable<re::PeerVideoStreamingManager::makeSubscribeMessage(re::PeerVideoStreamId)::$_0,void ()(re::OPackWriter &)>::size()
{
  return 16;
}

uint64_t (***re::FunctionBase<24ul,void ()(re::OPackWriter &)>::destroyCallable(uint64_t a1))(void)
{
  uint64_t result = *(uint64_t (****)(void))(a1 + 32);
  if (result)
  {
    uint64_t result = (uint64_t (***)(void))(**result)(result);
    if (*(void *)(a1 + 32) != a1) {
      uint64_t result = (uint64_t (***)(void))(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24));
    }
    *(void *)(a1 + 32) = 0;
  }
  return result;
}

void re::internal::Callable<re::PeerVideoStreamingManager::makeUnsubscribeMessage(re::PeerVideoStreamId)::$_0,void ()(re::OPackWriter &)>::~Callable()
{
}

uint64_t re::internal::Callable<re::PeerVideoStreamingManager::makeUnsubscribeMessage(re::PeerVideoStreamId)::$_0,void ()(re::OPackWriter &)>::operator()(uint64_t a1, re::zerocopy **a2)
{
  char v3 = 4;
  return re::zerocopy::writeAll(*a2, (re::zerocopy::WriteStream *)&v3, (char *)1);
}

void *re::internal::Callable<re::PeerVideoStreamingManager::makeUnsubscribeMessage(re::PeerVideoStreamId)::$_0,void ()(re::OPackWriter &)>::cloneInto(uint64_t a1, void *a2)
{
  uint64_t result = a2;
  *a2 = &unk_26E6F8F60;
  return result;
}

void *re::internal::Callable<re::PeerVideoStreamingManager::makeUnsubscribeMessage(re::PeerVideoStreamId)::$_0,void ()(re::OPackWriter &)>::moveInto(uint64_t a1, void *a2)
{
  uint64_t result = a2;
  *a2 = &unk_26E6F8F60;
  return result;
}

uint64_t re::internal::Callable<re::PeerVideoStreamingManager::makeUnsubscribeMessage(re::PeerVideoStreamId)::$_0,void ()(re::OPackWriter &)>::size()
{
  return 16;
}

void re::internal::Callable<re::PeerVideoStreamingManager::makeFrameMessage(re::PeerVideoStreamId,opaqueCMSampleBuffer *,unsigned long long)::$_0,void ()(re::OPackWriter &)>::~Callable()
{
}

uint64_t re::internal::Callable<re::PeerVideoStreamingManager::makeFrameMessage(re::PeerVideoStreamId,opaqueCMSampleBuffer *,unsigned long long)::$_0,void ()(re::OPackWriter &)>::operator()(uint64_t a1, re::zerocopy **this)
{
  return re::PeerVideoStreamingUtils::writeCMSampleBuffer(this, *(re::OPackWriter **)(a1 + 8), *(opaqueCMSampleBuffer **)(a1 + 16));
}

uint64_t re::internal::Callable<re::PeerVideoStreamingManager::makeFrameMessage(re::PeerVideoStreamId,opaqueCMSampleBuffer *,unsigned long long)::$_0,void ()(re::OPackWriter &)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6F8FB8;
  *(_OWORD *)(a2 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = *(_OWORD *)(a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<re::PeerVideoStreamingManager::makeFrameMessage(re::PeerVideoStreamId,opaqueCMSampleBuffer *,unsigned long long)::$_0,void ()(re::OPackWriter &)>::moveInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6F8FB8;
  *(_OWORD *)(a2 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = *(_OWORD *)(a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<re::PeerVideoStreamingManager::makeFrameMessage(re::PeerVideoStreamId,opaqueCMSampleBuffer *,unsigned long long)::$_0,void ()(re::OPackWriter &)>::size()
{
  return 24;
}

void re::internal::Callable<re::PeerVideoStreamingManager::processFrameMessage(unsigned long long,re::PeerVideoStreamId,re::OPackReader &,void const*,unsigned long)::$_0,void ()(re::OutputVideoFrame &&)>::~Callable()
{
}

uint64_t re::internal::Callable<re::PeerVideoStreamingManager::processFrameMessage(unsigned long long,re::PeerVideoStreamId,re::OPackReader &,void const*,unsigned long)::$_0,void ()(re::OutputVideoFrame &&)>::operator()(void *a1, uint64_t a2)
{
  uint64_t v48 = *MEMORY[0x263EF8340];
  uint64_t v4 = a1[1];
  uint64_t v5 = re::HashTable<re::PeerVideoStreamId,re::StreamingInternal::StreamReadEnd,re::Hash<re::PeerVideoStreamId>,re::EqualTo<re::PeerVideoStreamId>,true,false>::tryGet(v4 + 176, (re::PeerVideoStreamId *)(a1 + 2));
  if (v5)
  {
    uint64_t v6 = v5;
    if (*(unsigned char *)(v5 + 96))
    {
      uint64_t v8 = a1 + 4;
      unint64_t v7 = a1[4];
      if (v7 <= *(void *)(v5 + 104))
      {
LABEL_53:
        uint64_t result = re::internal::enableSignposts(0, 0);
        if (result)
        {
          uint64_t result = re::internal::enableHighFrequencyNetworkTracing(0, 0);
          if (result) {
            return kdebug_trace();
          }
        }
        return result;
      }
    }
    else
    {
      uint64_t v8 = a1 + 4;
      unint64_t v7 = a1[4];
      if (!v7) {
        goto LABEL_53;
      }
      *(unsigned char *)(v5 + 96) = 1;
    }
    *(void *)(v5 + 104) = v7;
    LOBYTE(cf[0]) = 1;
    uint64_t v10 = *(const void **)a2;
    uint64_t v11 = *(void *)(a2 + 8);
    *(void *)a2 = 0;
    cf[1] = v10;
    *(void *)&long long v44 = v11;
    re::Optional<re::OutputVideoFrame>::operator=(v5 + 72, (unsigned __int8 *)cf);
    if (LOBYTE(cf[0]) && cf[1]) {
      CFRelease(cf[1]);
    }
    *(void *)(v6 + 8re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = *v8;
    id WeakRetained = objc_loadWeakRetained((id *)v6);
    if (WeakRetained)
    {

      uint64_t v13 = (char *)objc_loadWeakRetained((id *)v6);
      uint64_t v14 = v13;
      uint64_t v15 = v13 - 8;
      if (!v13) {
        uint64_t v15 = 0;
      }
      int v33 = v15;
      if (v13) {
        uint64_t v16 = v13;
      }
      int v17 = *(_DWORD *)(v4 + 304);
      *(_DWORD *)(v4 + 304) = v17 + 1;
      if (*(void *)(v4 + 240))
      {
        unint64_t v18 = 0;
        do
        {
          if ((*(unsigned int (**)(uint64_t))(*(void *)(v4 + 256) + 32 * v18 + 24))(v4) == 1) {
            re::DynamicArray<re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::Subscription>::removeStableAt((void *)(v4 + 224), v18);
          }
          else {
            ++v18;
          }
        }
        while (v18 < *(void *)(v4 + 240));
        int v17 = *(_DWORD *)(v4 + 304) - 1;
      }
      *(_DWORD *)(v4 + 304) = v17;
      if (!v17)
      {
        uint64_t v19 = *(void *)(v4 + 280);
        if (v19)
        {
          uint64_t v20 = 0;
          for (unint64_t i = 0; i != v19; ++i)
          {
            unint64_t v22 = *(void *)(v4 + 280);
            if (v22 <= i)
            {
              long long v46 = 0u;
              long long v47 = 0u;
              long long v44 = 0u;
              long long v45 = 0u;
              *(_OWORD *)CFTypeRef cf = 0u;
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              int v35 = 136315906;
              uint64_t v36 = "operator[]";
              __int16 v37 = 1024;
              int v38 = 789;
              __int16 v39 = 2048;
              unint64_t v40 = i;
              __int16 v41 = 2048;
              unint64_t v42 = v22;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
            }
            uint64_t v23 = *(void *)(v4 + 296) + v20;
            long long v24 = *(_OWORD *)(v23 + 16);
            *(_OWORD *)__int16 v34 = *(_OWORD *)v23;
            *(_OWORD *)&v34[16] = v24;
            *(void *)&v34[32] = *(void *)(v23 + 32);
            if (v34[0])
            {
              long long v25 = (_anonymous_namespace_ *)re::DynamicArray<re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::Subscription>::indexOf((uint64_t)cf, *(void *)(v4 + 240), *(char **)(v4 + 256), &v34[8]);
              if (!LOBYTE(cf[0]))
              {
                unint64_t v26 = *(void *)(v4 + 232);
                unint64_t v27 = *(void *)(v4 + 240);
                if (v27 >= v26)
                {
                  unint64_t v28 = v27 + 1;
                  if (v26 < v27 + 1)
                  {
                    if (*(void *)(v4 + 224))
                    {
                      if (v26) {
                        unint64_t v29 = 2 * v26;
                      }
                      else {
                        unint64_t v29 = 8;
                      }
                      if (v29 <= v28) {
                        unint64_t v30 = v27 + 1;
                      }
                      else {
                        unint64_t v30 = v29;
                      }
                      re::DynamicArray<re::EvaluationRegister>::setCapacity((void *)(v4 + 224), v30);
                    }
                    else
                    {
                      re::DynamicArray<re::EvaluationRegister>::setCapacity((void *)(v4 + 224), v28);
                      ++*(_DWORD *)(v4 + 248);
                    }
                  }
                  unint64_t v27 = *(void *)(v4 + 240);
                }
                uint64_t v31 = (_OWORD *)(*(void *)(v4 + 256) + 32 * v27);
                long long v32 = *(_OWORD *)&v34[24];
                *uint64_t v31 = *(_OWORD *)&v34[8];
                v31[1] = v32;
                ++*(void *)(v4 + 240);
                ++*(_DWORD *)(v4 + 248);
              }
            }
            else
            {
              re::DynamicArray<re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::Subscription>::indexOf((uint64_t)cf, *(void *)(v4 + 240), *(char **)(v4 + 256), &v34[8]);
              if (LOBYTE(cf[0])) {
                re::DynamicArray<re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::Subscription>::removeStableAt((void *)(v4 + 224), (unint64_t)cf[1]);
              }
            }
            v20 += 40;
          }
        }
      }
      if (v33) {

      }
      if (v14) {
    }
      }
    goto LABEL_53;
  }
  uint64_t result = re::internal::enableSignposts(0, 0);
  if (result)
  {
    uint64_t result = re::internal::enableHighFrequencyNetworkTracing(0, 0);
    if (result)
    {
      return kdebug_trace();
    }
  }
  return result;
}

uint64_t re::internal::Callable<re::PeerVideoStreamingManager::processFrameMessage(unsigned long long,re::PeerVideoStreamId,re::OPackReader &,void const*,unsigned long)::$_0,void ()(re::OutputVideoFrame &&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6F9010;
  long long v2 = *(_OWORD *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(_OWORD *)(a2 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v2;
  return a2;
}

uint64_t re::internal::Callable<re::PeerVideoStreamingManager::processFrameMessage(unsigned long long,re::PeerVideoStreamId,re::OPackReader &,void const*,unsigned long)::$_0,void ()(re::OutputVideoFrame &&)>::moveInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6F9010;
  long long v2 = *(_OWORD *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(_OWORD *)(a2 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v2;
  return a2;
}

uint64_t re::internal::Callable<re::PeerVideoStreamingManager::processFrameMessage(unsigned long long,re::PeerVideoStreamId,re::OPackReader &,void const*,unsigned long)::$_0,void ()(re::OutputVideoFrame &&)>::size()
{
  return 48;
}

double re::HashTable<re::PeerVideoStreamId,re::StreamingInternal::StreamWriteEnd,re::Hash<re::PeerVideoStreamId>,re::EqualTo<re::PeerVideoStreamId>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    if (*((_DWORD *)a1 + 8))
    {
      uint64_t v3 = 0;
      unint64_t v4 = 0;
      do
      {
        re::HashTable<re::PeerVideoStreamId,re::StreamingInternal::StreamWriteEnd,re::Hash<re::PeerVideoStreamId>,re::EqualTo<re::PeerVideoStreamId>,true,false>::EntryWithHash::free(a1[2] + v3);
        ++v4;
        v3 += 336;
      }
      while (v4 < *((unsigned int *)a1 + 8));
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

uint64_t re::HashTable<re::PeerVideoStreamId,re::StreamingInternal::StreamWriteEnd,re::Hash<re::PeerVideoStreamId>,re::EqualTo<re::PeerVideoStreamId>,true,false>::EntryWithHash::free(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 8);
  if (v1 < 0)
  {
    uint64_t v2 = result;
    *(_DWORD *)(result + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v1 & 0x7FFFFFFF;
    uint64_t v3 = result + 32;
    unint64_t v4 = (re::DynamicString *)(result + 160);
    re::PeerVideoFileWriter::destroy((re::PeerVideoFileWriter *)(result + 160));
    re::DynamicString::deinit((re::DynamicString *)(v2 + 192));
    re::DynamicString::deinit(v4);
    re::PeerVideoStreamingEncoder::~PeerVideoStreamingEncoder((re::PeerVideoStreamingEncoder *)(v2 + 72));
    return re::DynamicArray<unsigned long>::deinit(v3);
  }
  return result;
}

double re::HashTable<re::PeerVideoStreamId,re::StreamingInternal::StreamReadEnd,re::Hash<re::PeerVideoStreamId>,re::EqualTo<re::PeerVideoStreamId>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    if (*((_DWORD *)a1 + 8))
    {
      uint64_t v3 = 0;
      unint64_t v4 = 0;
      do
      {
        re::HashTable<re::PeerVideoStreamId,re::StreamingInternal::StreamReadEnd,re::Hash<re::PeerVideoStreamId>,re::EqualTo<re::PeerVideoStreamId>,true,false>::EntryWithHash::free(a1[2] + v3);
        ++v4;
        v3 += 168;
      }
      while (v4 < *((unsigned int *)a1 + 8));
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

void re::HashTable<re::PeerVideoStreamId,re::StreamingInternal::StreamReadEnd,re::Hash<re::PeerVideoStreamId>,re::EqualTo<re::PeerVideoStreamId>,true,false>::EntryWithHash::free(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 8);
  if (v1 < 0)
  {
    *(_DWORD *)(a1 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v1 & 0x7FFFFFFF;
    uint64_t v3 = (id *)(a1 + 32);
    if (*(unsigned char *)(a1 + 104))
    {
      unint64_t v4 = *(const void **)(a1 + 112);
      if (v4) {
        CFRelease(v4);
      }
    }
    re::PeerVideoStreamingDecoder::~PeerVideoStreamingDecoder((VTDecompressionSessionRef *)(a1 + 88));
    re::DynamicArray<unsigned long>::deinit(a1 + 48);
    objc_destroyWeak(v3);
    *(void *)(a1 + 32) = 0;
  }
}

void re::HashTable<re::PeerVideoStreamId,re::StreamingInternal::StreamWriteEnd,re::Hash<re::PeerVideoStreamId>,re::EqualTo<re::PeerVideoStreamId>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  uint64_t v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    unint64_t v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    uint64_t v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      uint64_t v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  uint64_t v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + 336 * v10, 16);
  if (v12)
  {
    uint64_t v14 = v12;
    *(void *)(a1 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &unk_2343655D0, 4 * v10);
    }
    *(void *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

void re::HashTable<re::PeerVideoStreamId,re::StreamingInternal::StreamReadEnd,re::Hash<re::PeerVideoStreamId>,re::EqualTo<re::PeerVideoStreamId>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  uint64_t v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    unint64_t v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    uint64_t v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      uint64_t v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  uint64_t v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + 168 * v10, 16);
  if (v12)
  {
    uint64_t v14 = v12;
    *(void *)(a1 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &unk_2343655D0, 4 * v10);
    }
    *(void *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

uint64_t re::HashTable<re::PeerVideoStreamId,re::StreamingInternal::StreamWriteEnd,re::Hash<re::PeerVideoStreamId>,re::EqualTo<re::PeerVideoStreamId>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _OWORD *a4, uint64_t a5)
{
  uint64_t v10 = *(unsigned int *)(a1 + 36);
  if (v10 == 0x7FFFFFFF)
  {
    uint64_t v10 = *(unsigned int *)(a1 + 32);
    int v11 = v10;
    if (v10 == *(_DWORD *)(a1 + 24))
    {
      int v12 = *(_DWORD *)(a1 + 28);
      signed int v13 = 2 * v12;
      uint64_t v14 = *(void *)a1;
      if (*(void *)a1)
      {
        if (v13) {
          BOOL v15 = v10 == v13;
        }
        else {
          BOOL v15 = 1;
        }
        if (!v15 && (v12 & 0x80000000) == 0)
        {
          memset(v37, 0, 36);
          *(void *)&v37[36] = 0x7FFFFFFFLL;
          re::HashTable<re::PeerVideoStreamId,re::StreamingInternal::StreamWriteEnd,re::Hash<re::PeerVideoStreamId>,re::EqualTo<re::PeerVideoStreamId>,true,false>::init((uint64_t)v37, v14, v13);
          long long v16 = *(_OWORD *)v37;
          *(_OWORD *)__int16 v37 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v16;
          uint64_t v17 = *(void *)&v37[16];
          uint64_t v18 = *(void *)(a1 + 16);
          *(void *)&v37[16] = v18;
          *(void *)(a1 + 16) = v17;
          long long v20 = *(_OWORD *)&v37[24];
          *(_OWORD *)&unsigned char v37[24] = *(_OWORD *)(a1 + 24);
          unsigned int v19 = *(_DWORD *)&v37[32];
          *(_OWORD *)(a1 + 24) = v20;
          unint64_t v21 = v19;
          if (v19)
          {
            unint64_t v22 = 0;
            uint64_t v23 = v18 + 16;
            do
            {
              if ((*(_DWORD *)(v23 - 8) & 0x80000000) != 0) {
                re::HashTable<re::PeerVideoStreamId,re::StreamingInternal::StreamWriteEnd,re::Hash<re::PeerVideoStreamId>,re::EqualTo<re::PeerVideoStreamId>,true,false>::addAsMove(a1, *(void *)(v23 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(v23 - 16), v23, v23 + 16);
              }
              ++v22;
              v23 += 336;
            }
            while (v22 < v21);
          }
          re::HashTable<re::PeerVideoStreamId,re::StreamingInternal::StreamWriteEnd,re::Hash<re::PeerVideoStreamId>,re::EqualTo<re::PeerVideoStreamId>,true,false>::deinit((uint64_t *)v37);
        }
      }
      else
      {
        if (v13) {
          signed int v26 = 2 * v12;
        }
        else {
          signed int v26 = 3;
        }
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v11 + 1;
    uint64_t v24 = *(void *)(a1 + 16);
    int v25 = *(_DWORD *)(v24 + 336 * v10 + 8);
  }
  else
  {
    uint64_t v24 = *(void *)(a1 + 16);
    int v25 = *(_DWORD *)(v24 + 336 * v10 + 8);
    *(_DWORD *)(a1 + 36) = v25 & 0x7FFFFFFF;
  }
  uint64_t v27 = 336 * v10;
  *(_DWORD *)(v24 + v27 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v25 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + v27 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = *(_DWORD *)(*(void *)(a1 + 16) + v27 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + v27) = a3;
  *(_OWORD *)(*(void *)(a1 + 16) + v27 + 16) = *a4;
  uint64_t v28 = *(void *)(a1 + 16) + v27;
  *(void *)(v28 + 64) = 0;
  *(_DWORD *)(v28 + 56) = 0;
  *(void *)(v28 + 40) = 0;
  *(void *)(v28 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
  *(void *)(v28 + 32) = 0;
  *(void *)(v28 + 32) = *(void *)a5;
  *(void *)a5 = 0;
  *(void *)(v28 + 40) = *(void *)(a5 + 8);
  *(void *)(a5 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
  uint64_t v29 = *(void *)(v28 + 48);
  *(void *)(v28 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = *(void *)(a5 + 16);
  *(void *)(a5 + 16) = v29;
  uint64_t v30 = *(void *)(v28 + 64);
  *(void *)(v28 + 64) = *(void *)(a5 + 32);
  *(void *)(a5 + 32) = v30;
  ++*(_DWORD *)(a5 + 24);
  ++*(_DWORD *)(v28 + 56);
  *(void *)(v28 + 72) = 0;
  *(void *)(v28 + 80) = 0;
  v28 += 72;
  *(_DWORD *)(v28 + 16) = 0;
  *(void *)(v28 + 32) = 0;
  *(void *)(v28 + 40) = 0;
  *(void *)(v28 + 24) = 0;
  *(_DWORD *)(v28 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
  *(void *)(v28 + 56) = 0;
  *(void *)(v28 + 64) = 0;
  re::PeerVideoStreamingEncoder::operator=((long long *)v28, (long long *)(a5 + 40));
  *(_OWORD *)(v28 + 72) = *(_OWORD *)(a5 + 112);
  re::DynamicString::DynamicString((re::DynamicString *)(v28 + 88), (const re::DynamicString *)(a5 + 128));
  re::DynamicString::DynamicString((re::DynamicString *)(v28 + 120), (const re::DynamicString *)(a5 + 160));
  long long v31 = *(_OWORD *)(a5 + 192);
  long long v32 = *(_OWORD *)(a5 + 208);
  *(_OWORD *)(v28 + 184) = *(_OWORD *)(a5 + 224);
  *(_OWORD *)(v28 + 16re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v32;
  *(_OWORD *)(v28 + 152) = v31;
  long long v33 = *(_OWORD *)(a5 + 240);
  long long v34 = *(_OWORD *)(a5 + 256);
  long long v35 = *(_OWORD *)(a5 + 272);
  *(void *)(v28 + 24re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = *(void *)(a5 + 288);
  *(_OWORD *)(v28 + 232) = v35;
  *(_OWORD *)(v28 + 216) = v34;
  *(_OWORD *)(v28 + 200) = v33;
  *(unsigned char *)(v28 + 256) = *(unsigned char *)(a5 + 296);
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return v10;
}

void re::make::shared::object<re::PeerVideoStreamHandle,re::PeerVideoStreamId &,re::PeerVideoStreamingManager *>(re *a1, uint64_t *a2, uint64_t *a3)
{
  unint64_t v6 = re::globalAllocators(a1);
  unint64_t v7 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6[2] + 32))(v6[2], 48, 8);
  uint64_t v9 = *a2;
  uint64_t v8 = a2[1];
  uint64_t v10 = *a3;
  ArcSharedObject::ArcSharedObject(v7, 0);
  *((void *)v7 + 3) = v9;
  *(void *)unint64_t v7 = &unk_26E6E52F8;
  *((void *)v7 + 4) = v8;
  *((void *)v7 + 5) = v10;
  *(void *)a1 = v7;
}

void re::HashTable<re::PeerVideoStreamId,re::StreamingInternal::StreamReadEnd,re::Hash<re::PeerVideoStreamId>,re::EqualTo<re::PeerVideoStreamId>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _OWORD *a4, uint64_t a5)
{
  unsigned int v10 = *(_DWORD *)(a1 + 36);
  if (v10 == 0x7FFFFFFF)
  {
    unsigned int v10 = *(_DWORD *)(a1 + 32);
    unsigned int v11 = v10;
    if (v10 == *(_DWORD *)(a1 + 24))
    {
      int v12 = *(_DWORD *)(a1 + 28);
      signed int v13 = 2 * v12;
      uint64_t v14 = *(void *)a1;
      if (*(void *)a1)
      {
        if (v13) {
          BOOL v15 = v10 == v13;
        }
        else {
          BOOL v15 = 1;
        }
        if (!v15 && (v12 & 0x80000000) == 0)
        {
          memset(v36, 0, 36);
          *(void *)&v36[36] = 0x7FFFFFFFLL;
          re::HashTable<re::PeerVideoStreamId,re::StreamingInternal::StreamReadEnd,re::Hash<re::PeerVideoStreamId>,re::EqualTo<re::PeerVideoStreamId>,true,false>::init((uint64_t)v36, v14, v13);
          long long v16 = *(_OWORD *)v36;
          *(_OWORD *)uint64_t v36 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v16;
          uint64_t v17 = *(void *)&v36[16];
          uint64_t v18 = *(void *)(a1 + 16);
          *(void *)&v36[16] = v18;
          *(void *)(a1 + 16) = v17;
          long long v20 = *(_OWORD *)&v36[24];
          *(_OWORD *)&v36[24] = *(_OWORD *)(a1 + 24);
          unsigned int v19 = *(_DWORD *)&v36[32];
          *(_OWORD *)(a1 + 24) = v20;
          unint64_t v21 = v19;
          if (v19)
          {
            unint64_t v22 = 0;
            uint64_t v23 = v18 + 16;
            do
            {
              if ((*(_DWORD *)(v23 - 8) & 0x80000000) != 0) {
                re::HashTable<re::PeerVideoStreamId,re::StreamingInternal::StreamReadEnd,re::Hash<re::PeerVideoStreamId>,re::EqualTo<re::PeerVideoStreamId>,true,false>::addAsMove(a1, *(void *)(v23 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(v23 - 16), v23, v23 + 16);
              }
              ++v22;
              v23 += 168;
            }
            while (v22 < v21);
          }
          re::HashTable<re::PeerVideoStreamId,re::StreamingInternal::StreamReadEnd,re::Hash<re::PeerVideoStreamId>,re::EqualTo<re::PeerVideoStreamId>,true,false>::deinit((uint64_t *)v36);
        }
      }
      else
      {
        if (v13) {
          signed int v26 = 2 * v12;
        }
        else {
          signed int v26 = 3;
        }
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      unsigned int v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v11 + 1;
    uint64_t v24 = *(void *)(a1 + 16);
    int v25 = *(_DWORD *)(v24 + 168 * v10 + 8);
  }
  else
  {
    uint64_t v24 = *(void *)(a1 + 16);
    int v25 = *(_DWORD *)(v24 + 168 * v10 + 8);
    *(_DWORD *)(a1 + 36) = v25 & 0x7FFFFFFF;
  }
  uint64_t v27 = 168 * v10;
  *(_DWORD *)(v24 + v27 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v25 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + v27 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = *(_DWORD *)(*(void *)(a1 + 16) + v27 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + v27) = a3;
  *(_OWORD *)(*(void *)(a1 + 16) + v27 + 16) = *a4;
  uint64_t v28 = *(void *)(a1 + 16);
  *(void *)(v28 + v27 + 32) = 0;
  uint64_t v29 = v28 + v27 + 32;
  objc_moveWeak((id *)v29, (id *)a5);
  uint64_t v30 = *(void *)(a5 + 8);
  *(void *)(v29 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
  *(void *)(v29 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v30;
  *(void *)(v29 + 16) = 0;
  *(_DWORD *)(v29 + 40) = 0;
  *(void *)(v29 + 24) = 0;
  *(void *)(v29 + 32) = 0;
  *(void *)(v29 + 16) = *(void *)(a5 + 16);
  *(void *)(a5 + 16) = 0;
  *(void *)(v29 + 24) = *(void *)(a5 + 24);
  *(void *)(a5 + 24) = 0;
  uint64_t v31 = *(void *)(v29 + 32);
  *(void *)(v29 + 32) = *(void *)(a5 + 32);
  *(void *)(a5 + 32) = v31;
  uint64_t v32 = *(void *)(v29 + 48);
  *(void *)(v29 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = *(void *)(a5 + 48);
  *(void *)(a5 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v32;
  ++*(_DWORD *)(a5 + 40);
  ++*(_DWORD *)(v29 + 40);
  *(_OWORD *)(v29 + 56) = *(_OWORD *)(a5 + 56);
  LODWORD(v32) = *(unsigned __int8 *)(a5 + 72);
  *(unsigned char *)(v29 + 72) = v32;
  if (v32)
  {
    uint64_t v33 = v28 + 168 * v10;
    *(void *)(v33 + 112) = *(void *)(a5 + 80);
    *(void *)(a5 + 80) = 0;
    *(void *)(v33 + 120) = *(void *)(a5 + 88);
  }
  int v34 = *(unsigned __int8 *)(a5 + 96);
  *(unsigned char *)(v28 + 168 * v10 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 28) = v34;
  if (v34) {
    *(void *)(v28 + 168 * v10 + 136) = *(void *)(a5 + 104);
  }
  int v35 = *(unsigned __int8 *)(a5 + 112);
  *(unsigned char *)(v28 + 168 * v10 + 144) = v35;
  if (v35) {
    *(void *)(v28 + 168 * v10 + 152) = *(void *)(a5 + 120);
  }
  *(void *)(v28 + 168 * v10 + 1re::HashTable<re::ecs2::Entity const*,re::ecs2::BillboardData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::deinit((uint64_t *)this + 60) = *(void *)(a5 + 128);
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v10;
  ++*(_DWORD *)(a1 + 28);
}

id *re::ecs2::PhysicsConstraintsComponent::PhysicsConstraintsComponent(id *this)
{
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0);
  *(void *)(v2 + 16) = 0;
  *(_WORD *)(v2 + 24) = 0;
  *(void *)uint64_t v2 = &unk_26E6F9078;
  re::StringID::invalid((re::StringID *)(v2 + 32));
  this[6] = 0;
  this[7] = 0;
  *((_DWORD *)this + 1re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
  this[8] = 0;
  this[15] = 0;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_DWORD *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 28) = 0;
  objc_initWeak(this + 16, 0);
  return this;
}

uint64_t re::ecs2::PhysicsConstraintsComponent::syncConstraintArrays(re::ecs2::PhysicsConstraintsComponent *this, char a2)
{
  uint64_t v58 = *MEMORY[0x263EF8340];
  uint64_t v5 = (void *)((char *)this + 88);
  uint64_t v4 = *((void *)this + 11);
  __dst = 0;
  v47[1] = 0;
  unint64_t v48 = 0;
  v47[0] = 0;
  int v49 = 0;
  if (v4)
  {
    unint64_t v6 = *((void *)this + 13);
    v47[0] = v4;
    re::DynamicArray<float *>::setCapacity(v47, v6);
    ++v49;
    unint64_t v7 = *((void *)this + 13);
    if (v7 >= v48)
    {
      re::DynamicArray<float *>::setCapacity(v47, *((void *)this + 13));
      unint64_t v8 = v48;
      if (v48)
      {
        memmove(__dst, *((const void **)this + 15), 8 * v48);
        unint64_t v8 = v48;
      }
      memcpy((char *)__dst + 8 * v8, (const void *)(*((void *)this + 15) + 8 * v8), 8 * v7 - 8 * v8);
    }
    else if (v7)
    {
      memmove(__dst, *((const void **)this + 15), 8 * v7);
    }
    unint64_t v48 = v7;
  }
  *((void *)this + 13) = 0;
  ++*((_DWORD *)this + 28);
  uint64_t v9 = *((void *)this + 2);
  if (!v9) {
    goto LABEL_41;
  }
  do
  {
    uint64_t v10 = v9;
    uint64_t v9 = *(void *)(v9 + 24);
  }
  while (v9);
  uint64_t v11 = (*(uint64_t (**)(void))(**(void **)(*(void *)(v10 + 16) + 56) + 32))(*(void *)(*(void *)(v10 + 16) + 56));
  int v12 = (re::ecs2::PhysicsSimulationService *)re::ServiceLocator::serviceOrNull<re::ecs2::PhysicsSimulationService>(v11);
  if (v12)
  {
    signed int v13 = re::ecs2::PhysicsSimulationService::physicsSimulationForEntity(v12, *((const re::ecs2::Entity **)this + 2));
    BOOL v14 = v13 == 0;
    if (v13 && (a2 & 1) == 0)
    {
      if (*((void *)this + 8))
      {
        unint64_t v15 = 0;
        do
        {
          uint64_t v16 = *((void *)this + 10);
          if ((v15 & 0x80000000) != 0) {
            goto LABEL_28;
          }
          if (v15 >= v48) {
            goto LABEL_28;
          }
          uint64_t v17 = (void *)*((void *)__dst + v15);
          if (!v17) {
            goto LABEL_28;
          }
          if (!re::StringID::operator==((void *)(v16 + 304 * v15 + 8), v17 + 3)) {
            goto LABEL_28;
          }
          int v18 = *(_DWORD *)(v16 + 304 * v15);
          if (v18 != (*(unsigned int (**)(void *))(*v17 + 32))(v17)) {
            goto LABEL_28;
          }
          unsigned int v19 = (float32x4_t *)(v16 + 304 * v15);
          float32x4_t v43 = v19[5];
          float32x4_t v45 = v19[4];
          (*(void (**)(re::Constraint **__return_ptr, void *))(*v17 + 40))(v53, v17);
          uint32x4_t v20 = (uint32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(v45, *(float32x4_t *)v53));
          v20.i32[3] = v20.i32[2];
          if ((vmaxvq_u32(v20) & 0x80000000) != 0
            || (vmaxvq_u32((uint32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(v43, v54))) & 0x80000000) != 0
            || (unint64_t v21 = (float32x4_t *)(v16 + 304 * v15),
                float32x4_t v44 = v21[10],
                float32x4_t v46 = v21[9],
                (*(void (**)(unsigned char *__return_ptr, void *))(*v17 + 48))(v52, v17),
                uint32x4_t v22 = (uint32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(v46, *(float32x4_t *)v52)),
                v22.i32[3] = v22.i32[2],
                (vmaxvq_u32(v22) & 0x80000000) != 0)
            || (vmaxvq_u32((uint32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(v44, *(float32x4_t *)&v52[16]))) & 0x80000000) != 0)
          {
LABEL_28:
            v53[0] = 0;
            uint64_t v24 = *((void *)this + 2);
            do
            {
              uint64_t v25 = v24;
              uint64_t v24 = *(void *)(v24 + 24);
            }
            while (v24);
            v53[0] = re::ecs2::PhysicsConstraint::makeJoint((re::ecs2::PhysicsConstraint *)(v16 + 304 * v15), *(re::ecs2::Scene **)(v25 + 16));
            re::DynamicArray<re::TransitionCondition *>::add(v5, v53);
            if (v53[0])
            {
              uint64_t v26 = *((void *)v13 + 23);
              uint64_t v27 = *((void *)v13 + 21);
              if (v27)
              {
                uint64_t v28 = 8 * v27;
                uint64_t v29 = (re::Constraint **)*((void *)v13 + 23);
                while (*v29 != v53[0])
                {
                  ++v29;
                  v28 -= 8;
                  if (!v28)
                  {
                    uint64_t v29 = (re::Constraint **)(v26 + 8 * v27);
                    break;
                  }
                }
              }
              else
              {
                uint64_t v29 = (re::Constraint **)*((void *)v13 + 23);
              }
              if (v27 == ((uint64_t)v29 - v26) >> 3) {
                re::PhysicsJointCollection::add((re::ecs2::PhysicsSimulationData *)((char *)v13 + 136), v53[0]);
              }
            }
          }
          else
          {
            unint64_t v23 = v48;
            if (v48 <= v15)
            {
              uint64_t v51 = 0;
              long long v56 = 0u;
              long long v57 = 0u;
              float32x4_t v54 = 0u;
              long long v55 = 0u;
              *(_OWORD *)uint64_t v53 = 0u;
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              *(_DWORD *)uint64_t v52 = 136315906;
              *(void *)&v52[4] = "operator[]";
              *(_WORD *)&v52[12] = 1024;
              *(_DWORD *)&v52[14] = 789;
              *(_WORD *)&v52[18] = 2048;
              *(void *)&v52[20] = v15;
              *(_WORD *)&v52[28] = 2048;
              *(void *)&v52[30] = v23;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_63:
              uint64_t v51 = 0;
              long long v56 = 0u;
              long long v57 = 0u;
              float32x4_t v54 = 0u;
              long long v55 = 0u;
              *(_OWORD *)uint64_t v53 = 0u;
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              *(_DWORD *)uint64_t v52 = 136315906;
              *(void *)&v52[4] = "operator[]";
              *(_WORD *)&v52[12] = 1024;
              *(_DWORD *)&v52[14] = 789;
              *(_WORD *)&v52[18] = 2048;
              *(void *)&v52[20] = v15;
              *(_WORD *)&v52[28] = 2048;
              *(void *)&v52[30] = v23;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
            }
            re::DynamicArray<re::TransitionCondition *>::add(v5, (void *)__dst + v15);
            unint64_t v23 = v48;
            if (v48 <= v15) {
              goto LABEL_63;
            }
            *((void *)__dst + vre::HashTable<re::ecs2::Scene *,re::DynamicArray<RESubscriptionHandle>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 15) = 0;
          }
          ++v15;
        }
        while (*((void *)this + 8) > v15);
      }
      BOOL v14 = 0;
    }
  }
  else
  {
LABEL_41:
    signed int v13 = 0;
    BOOL v14 = 1;
  }
  id WeakRetained = objc_loadWeakRetained((id *)this + 16);
  if (WeakRetained)
  {
    uint64_t v31 = WeakRetained;

    unint64_t v32 = v48;
    if (v48)
    {
      unint64_t v33 = 0;
      do
      {
        int v34 = (void (***)(void))*((void *)__dst + v33);
        if (v34)
        {
          uint64_t v35 = v31[22];
          uint64_t v36 = v31[20];
          if (v36)
          {
            uint64_t v37 = 8 * v36;
            int v38 = (void *)v31[22];
            while ((void (***)(void))*v38 != v34)
            {
              ++v38;
              v37 -= 8;
              if (!v37)
              {
                int v38 = (void *)(v35 + 8 * v36);
                break;
              }
            }
          }
          else
          {
            int v38 = (void *)v31[22];
          }
          if (v36 != ((uint64_t)v38 - v35) >> 3)
          {
            v53[0] = *((re::Constraint **)__dst + v33);
            BOOL v39 = re::DynamicArray<re::Allocator const*>::removeStable(v31 + 18, v53);
            uint64_t v40 = re::globalAllocators((re *)v39)[2];
            (**v34)(v34);
            (*(void (**)(uint64_t, void (***)(void)))(*(void *)v40 + 40))(v40, v34);
            unint64_t v32 = v48;
          }
        }
        ++v33;
      }
      while (v32 > v33);
    }
  }
  if (v14) {
    __int16 v41 = 0;
  }
  else {
    __int16 v41 = (char *)v13 + 8;
  }
  objc_storeWeak((id *)this + 16, v41);
  *((unsigned char *)this + 25) = 0;
  uint64_t result = v47[0];
  if (v47[0])
  {
    if (__dst) {
      return (*(uint64_t (**)(void))(*(void *)v47[0] + 40))();
    }
  }
  return result;
}

void *re::ecs2::PhysicsConstraintsComponent::addOrReplacePhysicsConstraint(re::ecs2::PhysicsConstraintsComponent *this, const re::ecs2::PhysicsConstraint *a2, unint64_t a3)
{
  uint64_t v5 = (uint64_t *)((char *)a2 + 8);
  unint64_t v6 = *((void *)this + 8);
  if (!v6) {
    goto LABEL_12;
  }
  unint64_t v8 = 0;
  uint64_t v9 = *((void *)this + 10);
  uint64_t v10 = v9;
  do
  {
    if (re::StringID::operator==((void *)(v10 + 8), v5))
    {
      if (v6 > v8)
      {
        *(_DWORD *)uint64_t v10 = *(_DWORD *)a2;
        re::StringID::operator=((unint64_t *)(v10 + 8), v5);
        *(unsigned char *)(v10 + 24) = *((unsigned char *)a2 + 24);
        re::ecs2::EntityHandle::operator=((re::ecs2::EntityHandle *)(v10 + 32), (id *)a2 + 4);
        long long v35 = *((_OWORD *)a2 + 5);
        *(_OWORD *)(v10 + 64) = *((_OWORD *)a2 + 4);
        *(_OWORD *)(v10 + 80) = v35;
        re::StringID::operator=((unint64_t *)(v10 + 96), (uint64_t *)a2 + 12);
        re::ecs2::EntityHandle::operator=((re::ecs2::EntityHandle *)(v10 + 112), (id *)a2 + 14);
        *(_OWORD *)(v10 + 144) = *((_OWORD *)a2 + 9);
        long long v36 = *((_OWORD *)a2 + 10);
        long long v37 = *((_OWORD *)a2 + 11);
        long long v38 = *((_OWORD *)a2 + 13);
        *(_OWORD *)(v10 + 192) = *((_OWORD *)a2 + 12);
        *(_OWORD *)(v10 + 20re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v38;
        *(_OWORD *)(v10 + 1re::HashTable<re::ecs2::Entity const*,re::ecs2::BillboardData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::deinit((uint64_t *)this + 60) = v36;
        *(_OWORD *)(v10 + 176) = v37;
        long long v39 = *((_OWORD *)a2 + 14);
        long long v40 = *((_OWORD *)a2 + 15);
        long long v41 = *((_OWORD *)a2 + 17);
        *(_OWORD *)(v10 + 256) = *((_OWORD *)a2 + 16);
        *(_OWORD *)(v10 + re::DynamicArray<re::TraceEntry>::deinit((uint64_t)this + 272) = v41;
        *(_OWORD *)(v10 + 224) = v39;
        *(_OWORD *)(v10 + 240) = v40;
        uint64_t result = re::StringID::operator=((unint64_t *)(v10 + 288), (uint64_t *)a2 + 36);
        goto LABEL_17;
      }
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_19;
    }
    ++v8;
    v10 += 304;
  }
  while (v6 != v8);
  if (v6 > a3)
  {
    uint64_t v11 = v9 + 304 * a3;
    *(_DWORD *)uint64_t v11 = *(_DWORD *)a2;
    re::StringID::operator=((unint64_t *)(v11 + 8), v5);
    *(unsigned char *)(v11 + 24) = *((unsigned char *)a2 + 24);
    re::ecs2::EntityHandle::operator=((re::ecs2::EntityHandle *)(v11 + 32), (id *)a2 + 4);
    long long v12 = *((_OWORD *)a2 + 5);
    *(_OWORD *)(v11 + 64) = *((_OWORD *)a2 + 4);
    *(_OWORD *)(v11 + 80) = v12;
    re::StringID::operator=((unint64_t *)(v11 + 96), (uint64_t *)a2 + 12);
    re::ecs2::EntityHandle::operator=((re::ecs2::EntityHandle *)(v11 + 112), (id *)a2 + 14);
    *(_OWORD *)(v11 + 144) = *((_OWORD *)a2 + 9);
    long long v13 = *((_OWORD *)a2 + 10);
    long long v14 = *((_OWORD *)a2 + 11);
    long long v15 = *((_OWORD *)a2 + 13);
    *(_OWORD *)(v11 + 192) = *((_OWORD *)a2 + 12);
    *(_OWORD *)(v11 + 20re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v15;
    *(_OWORD *)(v11 + 1re::HashTable<re::ecs2::Entity const*,re::ecs2::BillboardData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::deinit((uint64_t *)this + 60) = v13;
    *(_OWORD *)(v11 + 176) = v14;
    long long v16 = *((_OWORD *)a2 + 14);
    long long v17 = *((_OWORD *)a2 + 15);
    long long v18 = *((_OWORD *)a2 + 17);
    *(_OWORD *)(v11 + 256) = *((_OWORD *)a2 + 16);
    *(_OWORD *)(v11 + re::DynamicArray<re::TraceEntry>::deinit((uint64_t)this + 272) = v18;
    *(_OWORD *)(v11 + 224) = v16;
    *(_OWORD *)(v11 + 240) = v17;
    uint64_t result = re::StringID::operator=((unint64_t *)(v11 + 288), (uint64_t *)a2 + 36);
    if (*((void *)this + 13) > a3)
    {
      uint32x4_t v20 = *(re::Constraint **)(*((void *)this + 15) + 8 * a3);
      if (v20)
      {
        unint64_t v21 = *(const re::ecs2::Entity **)(*(void *)((*(uint64_t (**)(void *))(**((void **)v20 + 5)
                                                                                           + 16))(*((void **)v20 + 5))
                                                     + 72)
                                         + 40);
        uint32x4_t v22 = v21;
        do
        {
          unint64_t v23 = v22;
          uint32x4_t v22 = (const re::ecs2::Entity *)*((void *)v22 + 3);
        }
        while (v22);
        uint64_t v24 = (*(uint64_t (**)(void))(**(void **)(*((void *)v23 + 2) + 56) + 32))(*(void *)(*((void *)v23 + 2) + 56));
        uint64_t v25 = (re::ecs2::PhysicsSimulationService *)re::ServiceLocator::serviceOrNull<re::ecs2::PhysicsSimulationService>(v24);
        uint64_t v26 = re::ecs2::PhysicsSimulationService::physicsSimulationForEntity(v25, v21);
        if (*((void *)this + 13) > a3)
        {
          *(void *)(*((void *)this + 15) + 8 * a3) = 0;
          uint64_t result = re::PhysicsSimulation::addConstraintToDelete(v26, v20);
          goto LABEL_17;
        }
LABEL_19:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
    }
  }
  else
  {
LABEL_12:
    if (v6 >= *((void *)this + 7))
    {
      re::DynamicArray<re::ecs2::PhysicsConstraint>::growCapacity((void *)this + 6, v6 + 1);
      unint64_t v6 = *((void *)this + 8);
    }
    uint64_t v27 = *((void *)this + 10) + 304 * v6;
    *(_DWORD *)uint64_t v27 = *(_DWORD *)a2;
    re::StringID::StringID((re::StringID *)(v27 + 8), (const StringID *)v5);
    *(unsigned char *)(v27 + 24) = *((unsigned char *)a2 + 24);
    re::ecs2::EntityHandle::EntityHandle((id *)(v27 + 32), (const re::ecs2::PhysicsConstraint *)((char *)a2 + 32));
    long long v28 = *((_OWORD *)a2 + 5);
    *(_OWORD *)(v27 + 64) = *((_OWORD *)a2 + 4);
    *(_OWORD *)(v27 + 80) = v28;
    re::StringID::StringID((re::StringID *)(v27 + 96), (const StringID *)a2 + 6);
    re::ecs2::EntityHandle::EntityHandle((id *)(v27 + 112), (const re::ecs2::PhysicsConstraint *)((char *)a2 + 112));
    *(_OWORD *)(v27 + 144) = *((_OWORD *)a2 + 9);
    long long v29 = *((_OWORD *)a2 + 10);
    long long v30 = *((_OWORD *)a2 + 11);
    long long v31 = *((_OWORD *)a2 + 13);
    *(_OWORD *)(v27 + 192) = *((_OWORD *)a2 + 12);
    *(_OWORD *)(v27 + 20re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v31;
    *(_OWORD *)(v27 + 1re::HashTable<re::ecs2::Entity const*,re::ecs2::BillboardData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::deinit((uint64_t *)this + 60) = v29;
    *(_OWORD *)(v27 + 176) = v30;
    long long v32 = *((_OWORD *)a2 + 14);
    long long v33 = *((_OWORD *)a2 + 15);
    long long v34 = *((_OWORD *)a2 + 17);
    *(_OWORD *)(v27 + 256) = *((_OWORD *)a2 + 16);
    *(_OWORD *)(v27 + re::DynamicArray<re::TraceEntry>::deinit((uint64_t)this + 272) = v34;
    *(_OWORD *)(v27 + 224) = v32;
    *(_OWORD *)(v27 + 240) = v33;
    uint64_t result = re::StringID::StringID((re::StringID *)(v27 + 288), (const StringID *)a2 + 18);
    ++*((void *)this + 8);
    ++*((_DWORD *)this + 18);
  }
LABEL_17:
  *((unsigned char *)this + 25) = 1;
  return result;
}

re::ecs2::PhysicsSimulationData *re::ecs2::PhysicsSimulationService::physicsSimulationForEntity(re::ecs2::PhysicsSimulationService *this, const re::ecs2::Entity *a2)
{
  uint64_t v4 = a2;
  do
  {
    uint64_t v5 = v4;
    uint64_t v4 = (const re::ecs2::Entity *)*((void *)v4 + 3);
  }
  while (v4);
  uint64_t v6 = *((void *)v5 + 2);
  uint64_t v7 = (*(uint64_t (**)(re::ecs2::PhysicsSimulationService *))(*(void *)this + 24))(this);
  uint64_t v8 = (*(uint64_t (**)(re::ecs2::PhysicsSimulationService *, uint64_t))(*(void *)this + 40))(this, v6);
  v10[0] = v7;
  v10[1] = v8;
  uint64_t result = (re::ecs2::PhysicsSimulationData *)re::ecs2::PhysicsSimulationMapping::physicsSimulationDataForEntity(v10, (uint64_t)a2);
  if (result) {
    return (re::ecs2::PhysicsSimulationData *)re::ecs2::PhysicsSimulationData::ensurePhysicsSimulation(result);
  }
  return result;
}

void re::ecs2::PhysicsConstraintsComponent::removePhysicsConstraint(re::ecs2::PhysicsConstraintsComponent *this, const re::StringID *a2)
{
  uint64_t v2 = *((void *)this + 8);
  if (v2)
  {
    unint64_t v5 = 0;
    for (unint64_t i = (void *)(*((void *)this + 10) + 8); !re::StringID::operator==(i, a2); i += 38)
    {
      if (v2 == ++v5) {
        return;
      }
    }
    re::DynamicArray<re::ecs2::PhysicsConstraint>::removeAt((uint64_t)this + 48, v5);
    if (v5 < *((void *)this + 13)) {
      re::DynamicArray<re::internal::AnimationCompositionChainBase *>::removeAt((uint64_t)this + 88, v5);
    }
    *((unsigned char *)this + 25) = 1;
  }
}

void re::DynamicArray<re::ecs2::PhysicsConstraint>::removeAt(uint64_t a1, unint64_t a2)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 <= a2)
  {
    memset(v29, 0, sizeof(v29));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (v2 - 1 > a2)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = v4 + 304 * v2;
    uint64_t v6 = v5 - 304;
    uint64_t v7 = v4 + 304 * a2;
    *(_DWORD *)uint64_t v7 = *(_DWORD *)(v5 - 304);
    uint64_t v8 = *(void *)(v5 - 296);
    uint64_t v9 = *(void *)(v5 - 288);
    *(void *)(v6 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
    *(void *)(v6 + 16) = "";
    uint64_t v10 = *(void *)(v7 + 16);
    unint64_t v11 = v8 & 0xFFFFFFFFFFFFFFFELL | *(void *)(v7 + 8) & 1;
    *(void *)(v7 + 16) = v9;
    *(void *)&v29[0] = v11;
    *((void *)&v29[0] + 1) = v10;
    *(void *)(v7 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v8;
    re::StringID::destroyString((re::StringID *)v29);
    *(unsigned char *)(v7 + 24) = *(unsigned char *)(v5 - 280);
    re::ecs2::EntityHandle::operator=((id *)(v7 + 32), v5 - 272);
    uint64_t v12 = *(void *)(v5 - 208);
    uint64_t v13 = *(void *)(v5 - 200);
    *(void *)(v5 - 20re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
    *(void *)(v5 - 200) = "";
    uint64_t v14 = *(void *)(v7 + 104);
    unint64_t v15 = v12 & 0xFFFFFFFFFFFFFFFELL | *(void *)(v7 + 96) & 1;
    long long v16 = *(_OWORD *)(v5 - 224);
    *(_OWORD *)(v7 + 64) = *(_OWORD *)(v5 - 240);
    *(_OWORD *)(v7 + 80) = v16;
    *(void *)(v7 + 104) = v13;
    *(void *)&v29[0] = v15;
    *((void *)&v29[0] + 1) = v14;
    *(void *)(v7 + 96) = v12;
    re::StringID::destroyString((re::StringID *)v29);
    re::ecs2::EntityHandle::operator=((id *)(v7 + 112), v5 - 192);
    *(_OWORD *)(v7 + 144) = *(_OWORD *)(v5 - 160);
    long long v17 = *(_OWORD *)(v5 - 144);
    long long v18 = *(_OWORD *)(v5 - 128);
    long long v19 = *(_OWORD *)(v5 - 96);
    *(_OWORD *)(v7 + 192) = *(_OWORD *)(v5 - 112);
    *(_OWORD *)(v7 + 20re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v19;
    *(_OWORD *)(v7 + 1re::HashTable<re::ecs2::Entity const*,re::ecs2::BillboardData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::deinit((uint64_t *)this + 60) = v17;
    *(_OWORD *)(v7 + 176) = v18;
    long long v20 = *(_OWORD *)(v5 - 80);
    long long v21 = *(_OWORD *)(v5 - 64);
    long long v22 = *(_OWORD *)(v5 - 48);
    long long v23 = *(_OWORD *)(v5 - 32);
    uint64_t v24 = *(void *)(v5 - 16);
    uint64_t v25 = *(void *)(v5 - 8);
    *(void *)(v5 - 16) = 0;
    *(void *)(v5 - re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "";
    uint64_t v26 = *(void *)(v7 + 296);
    unint64_t v27 = v24 & 0xFFFFFFFFFFFFFFFELL | *(void *)(v7 + 288) & 1;
    *(_OWORD *)(v7 + 256) = v22;
    *(_OWORD *)(v7 + re::DynamicArray<re::TraceEntry>::deinit((uint64_t)this + 272) = v23;
    *(_OWORD *)(v7 + 224) = v20;
    *(_OWORD *)(v7 + 240) = v21;
    *(void *)(v7 + 296) = v25;
    *(void *)&v29[0] = v27;
    *((void *)&v29[0] + 1) = v26;
    *(void *)(v7 + 28re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v24;
    re::StringID::destroyString((re::StringID *)v29);
    unint64_t v2 = *(void *)(a1 + 16);
  }
  uint64_t v28 = *(void *)(a1 + 32) + 304 * v2;
  re::StringID::destroyString((re::StringID *)(v28 - 16));
  re::ecs2::EntityHandle::reset((re::ecs2::EntityHandle *)(v28 - 192));
  objc_destroyWeak((id *)(v28 - 192));
  *(void *)(v28 - 192) = 0;
  re::StringID::destroyString((re::StringID *)(v28 - 208));
  re::ecs2::EntityHandle::reset((re::ecs2::EntityHandle *)(v28 - 272));
  objc_destroyWeak((id *)(v28 - 272));
  *(void *)(v28 - re::DynamicArray<re::TraceEntry>::deinit((uint64_t)this + 272) = 0;
  re::StringID::destroyString((re::StringID *)(v28 - 296));
  --*(void *)(a1 + 16);
  ++*(_DWORD *)(a1 + 24);
}

void re::ecs2::PhysicsConstraintsComponent::removePhysicsConstraintLeaveJoint(re::ecs2::PhysicsConstraintsComponent *this, const re::StringID *a2)
{
  uint64_t v2 = *((void *)this + 8);
  if (v2)
  {
    unint64_t v5 = 0;
    for (unint64_t i = (void *)(*((void *)this + 10) + 8); !re::StringID::operator==(i, a2); i += 38)
    {
      if (v2 == ++v5) {
        return;
      }
    }
    re::DynamicArray<re::ecs2::PhysicsConstraint>::removeAt((uint64_t)this + 48, v5);
  }
}

void *re::ecs2::PhysicsConstraintsComponent::deferDeleteConstraint(re::ecs2::PhysicsConstraintsComponent *this, re::Constraint *a2)
{
  uint64_t v9 = a2;
  re::DynamicArray<unsigned long long>::remove((uint64_t)this + 88, &v9);
  uint64_t v2 = *(const re::ecs2::Entity **)(*(void *)((*(uint64_t (**)(void))(**((void **)v9 + 5) + 16))(*((void *)v9 + 5))
                                              + 72)
                                  + 40);
  uint64_t v3 = v2;
  do
  {
    uint64_t v4 = v3;
    uint64_t v3 = (const re::ecs2::Entity *)*((void *)v3 + 3);
  }
  while (v3);
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(*((void *)v4 + 2) + 56) + 32))(*(void *)(*((void *)v4 + 2) + 56));
  uint64_t v6 = (re::ecs2::PhysicsSimulationService *)re::ServiceLocator::serviceOrNull<re::ecs2::PhysicsSimulationService>(v5);
  uint64_t v7 = re::ecs2::PhysicsSimulationService::physicsSimulationForEntity(v6, v2);
  return re::PhysicsSimulation::addConstraintToDelete(v7, v9);
}

unint64_t re::ecs2::PhysicsConstraintsComponent::pinNameA(re::ecs2::PhysicsConstraintsComponent *this, unint64_t a2)
{
  unint64_t v2 = *((void *)this + 8);
  if (a2 >= v2 - 1) {
    unint64_t v3 = v2 - 1;
  }
  else {
    unint64_t v3 = a2;
  }
  if (v2 <= v3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *((void *)this + 10) + 304 * v3 + 96;
}

unint64_t *re::ecs2::PhysicsConstraintsComponent::setPinNameA(re::ecs2::PhysicsConstraintsComponent *this, unint64_t a2, const re::StringID *a3)
{
  unint64_t v3 = *((void *)this + 8);
  if (a2 >= v3 - 1) {
    unint64_t v4 = v3 - 1;
  }
  else {
    unint64_t v4 = a2;
  }
  if (v3 <= v4)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v5 = (unint64_t *)(*((void *)this + 10) + 304 * v4 + 96);
  return re::StringID::operator=(v5, (uint64_t *)a3);
}

unint64_t re::ecs2::PhysicsConstraintsComponent::pinNameB(re::ecs2::PhysicsConstraintsComponent *this, unint64_t a2)
{
  unint64_t v2 = *((void *)this + 8);
  if (a2 >= v2 - 1) {
    unint64_t v3 = v2 - 1;
  }
  else {
    unint64_t v3 = a2;
  }
  if (v2 <= v3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *((void *)this + 10) + 304 * v3 + 288;
}

unint64_t *re::ecs2::PhysicsConstraintsComponent::setPinNameB(re::ecs2::PhysicsConstraintsComponent *this, unint64_t a2, const re::StringID *a3)
{
  unint64_t v3 = *((void *)this + 8);
  if (a2 >= v3 - 1) {
    unint64_t v4 = v3 - 1;
  }
  else {
    unint64_t v4 = a2;
  }
  if (v3 <= v4)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v5 = (unint64_t *)(*((void *)this + 10) + 304 * v4 + 288);
  return re::StringID::operator=(v5, (uint64_t *)a3);
}

void *re::ecs2::PhysicsConstraintsComponent::setLinearLimits(void *result, unint64_t a2, uint64_t a3, double a4)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (result[8] <= a2)
  {
    memset(v11, 0, sizeof(v11));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v5 = result[10];
  if (fabsf(*(float *)&a4) == INFINITY || *((float *)&a4 + 1) == INFINITY) {
    unsigned int v7 = -1;
  }
  else {
    unsigned int v7 = 0;
  }
  int8x8_t v8 = vbsl_s8((int8x8_t)vdup_n_s32(v7), (int8x8_t)0xBF8000003F800000, *(int8x8_t *)&a4);
  switch(a3)
  {
    case 2:
      *(int8x8_t *)(v5 + 304 * a2 + 256) = v8;
      break;
    case 1:
      *(int8x8_t *)(v5 + 304 * a2 + 24re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v8;
      break;
    case 0:
      *(int8x8_t *)(v5 + 304 * a2 + 240) = v8;
      break;
  }
  if (result[13] > a2)
  {
    uint64_t v9 = *(void **)(result[15] + 8 * a2);
    uint64_t result = (void *)(*(uint64_t (**)(void *))(*v9 + 32))(v9);
    if (result == 6)
    {
      *(int8x8_t *)&v11[0] = v8;
      return (void *)re::Generic6DOFConstraint::setLinearLimit((uint64_t)v9, a3, v11);
    }
    else if (result == 4)
    {
      v9[7] = v8;
      uint64_t v10 = *(uint64_t (**)(void *))(*v9 + 56);
      return (void *)v10(v9);
    }
  }
  return result;
}

__n64 re::ecs2::PhysicsConstraintsComponent::linearLimits(uint64_t a1, unint64_t a2, int a3)
{
  if (*(void *)(a1 + 64) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v3 = *(void *)(a1 + 80);
  if (a3 == 2)
  {
    uint64_t v8 = v3 + 304 * a2;
    result.n64_u32[0] = *(_DWORD *)(v8 + 256);
    uint64_t v6 = (unsigned __int32 *)(v8 + 260);
  }
  else if (a3 == 1)
  {
    uint64_t v7 = v3 + 304 * a2;
    result.n64_u32[0] = *(_DWORD *)(v7 + 248);
    uint64_t v6 = (unsigned __int32 *)(v7 + 252);
  }
  else
  {
    result.n64_u64[0] = 0;
    if (a3) {
      return result;
    }
    uint64_t v5 = v3 + 304 * a2;
    result.n64_u32[0] = *(_DWORD *)(v5 + 240);
    uint64_t v6 = (unsigned __int32 *)(v5 + 244);
  }
  result.n64_u32[1] = *v6;
  return result;
}

void *re::ecs2::PhysicsConstraintsComponent::setAngularLimits(void *result, unint64_t a2, uint64_t a3, double a4)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  if (result[8] <= a2)
  {
    memset(v21, 0, sizeof(v21));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v5 = result[10];
  if (fabsf(*(float *)&a4) == INFINITY || *((float *)&a4 + 1) == INFINITY) {
    unsigned int v7 = -1;
  }
  else {
    unsigned int v7 = 0;
  }
  int8x8_t v8 = vbsl_s8((int8x8_t)vdup_n_s32(v7), (int8x8_t)0xBF8000003F800000, *(int8x8_t *)&a4);
  switch(a3)
  {
    case 2:
      *(int8x8_t *)(v5 + 304 * a2 + 280) = v8;
      break;
    case 1:
      *(int8x8_t *)(v5 + 304 * a2 + re::DynamicArray<re::TraceEntry>::deinit((uint64_t)this + 272) = v8;
      break;
    case 0:
      *(int8x8_t *)(v5 + 304 * a2 + 264) = v8;
      break;
  }
  if (result[13] > a2)
  {
    int32x2_t v20 = (int32x2_t)v8;
    uint64_t v9 = *(int8x8_t **)(result[15] + 8 * a2);
    __n64 result = (void *)(*(uint64_t (**)(int8x8_t *))(*(void *)v9 + 32))(v9);
    if (result == 6)
    {
      *(int32x2_t *)&v21[0] = v20;
      return (void *)re::Generic6DOFConstraint::setAngularLimit((uint64_t)v9, a3, v21);
    }
    else
    {
      v10.i32[1] = v20.i32[1];
      if (result == 3)
      {
        return (void *)re::HingeJoint::setAngularLimit((uint64_t)v9, *(double *)&v20, *(float *)&v20.i32[1]);
      }
      else if (result == 2)
      {
        if (a3 == 1)
        {
          v11.i32[0] = vdup_lane_s32(v20, 1).u32[0];
          v11.i32[1] = v9[7].i32[1];
          float32x2_t v12 = (float32x2_t)vdup_n_s32(0x40490FDBu);
          float32x2_t v13 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v11, v12), (int8x8_t)v12, (int8x8_t)v11);
        }
        else
        {
          v10.i32[0] = v9[7].i32[0];
          float32x2_t v14 = (float32x2_t)vdup_n_s32(0x40490FDBu);
          float32x2_t v13 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v10, v14), (int8x8_t)v14, (int8x8_t)v10);
        }
        __asm { FMOV            V1.2S, #-1.0 }
        v9[7] = vbsl_s8((int8x8_t)vcgt_f32(_D1, v13), (int8x8_t)_D1, (int8x8_t)v13);
        long long v19 = *(uint64_t (**)(int8x8_t *))(*(void *)v9 + 56);
        return (void *)v19(v9);
      }
    }
  }
  return result;
}

uint64_t re::ecs2::PhysicsConstraintsComponent::collisionEnabled(re::ecs2::PhysicsConstraintsComponent *this, unint64_t a2)
{
  if (*((void *)this + 8) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(unsigned __int8 *)(*((void *)this + 10) + 304 * a2 + 24);
}

uint64_t re::ecs2::PhysicsConstraintsComponent::setCollisionEnabled(uint64_t this, unint64_t a2, char a3)
{
  if (*(void *)(this + 64) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  *(unsigned char *)(*(void *)(this + 80) + 304 * a2 + 24) = a3;
  return this;
}

void *re::ecs2::allocInfo_PhysicsConstraintsComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF843F0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF843F0))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF84458, "PhysicsConstraintsComponent");
    __cxa_guard_release(&qword_26AF843F0);
  }
  return &unk_26AF84458;
}

void re::ecs2::initInfo_PhysicsConstraintsComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  unint64_t v29 = 0xC606B99E7D5E985CLL;
  v30[0] = "PhysicsConstraintsComponent";
  re::StringID::destroyString((re::StringID *)&v29);
  *((_OWORD *)this + 2) = v24;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF843E8, memory_order_acquire) & 1) == 0)
  {
    unint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF843E8);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF84400 = v7;
      int8x8_t v8 = re::introspectionAllocator((re *)v7);
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF843F8, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26AF843F8))
      {
        re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_26AF84418);
        qword_26AF84418 = (uint64_t)&unk_26E6F9100;
        __cxa_guard_release(&qword_26AF843F8);
      }
      if ((_MergedGlobals_184 & 1) == 0)
      {
        uint64_t v9 = re::ecs2::introspect_PhysicsConstraint((re::IntrospectionBase **)1);
        if ((_MergedGlobals_184 & 1) == 0)
        {
          uint64_t v10 = v9;
          _MergedGlobals_184 = 1;
          int v11 = *(_DWORD *)(v9 + 24);
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF84418, 0);
          qword_26AF84428 = 0x2800000003;
          dword_26AF84430 = v11;
          word_26AF84434 = 0;
          *(void *)&xmmword_26AF84438 = 0;
          *((void *)&xmmword_26AF84438 + 1) = 0xFFFFFFFFLL;
          qword_26AF84448 = v10;
          unk_26AF84450 = 0;
          qword_26AF84418 = (uint64_t)&unk_26E6F9100;
          re::IntrospectionRegistry::add(v12, v13);
          re::getPrettyTypeName((re *)&qword_26AF84418, (const re::IntrospectionBase *)&v29);
          if (v30[0]) {
            float32x2_t v14 = (const char *)v30[1];
          }
          else {
            float32x2_t v14 = (char *)v30 + 1;
          }
          if (v29 && (v30[0] & 1) != 0) {
            (*(void (**)(void))(*(void *)v29 + 40))();
          }
          long long v26 = *(_OWORD *)(v10 + 32);
          unint64_t v15 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v27);
          if (v15)
          {
            uint64_t v16 = *v15;
            *((void *)&v25 + 1) = v16;
          }
          else
          {
            long long v28 = v26;
            re::TypeBuilder::beginListType((uint64_t)&v29, v27, 1, 0x28uLL, 8uLL, &v28);
            re::TypeBuilder::setConstructor((uint64_t)&v29, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::PhysicsConstraint>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
            re::TypeBuilder::setDestructor((uint64_t)&v29, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::PhysicsConstraint>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
            re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v29, 1);
            re::TypeBuilder::setListAccessors((uint64_t)&v29, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::PhysicsConstraint>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::PhysicsConstraint>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
            re::TypeBuilder::setListIndexer((uint64_t)&v29, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::PhysicsConstraint>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
            re::TypeBuilder::setListIterator((uint64_t)&v29, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::PhysicsConstraint>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::PhysicsConstraint>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::PhysicsConstraint>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
            re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v29, v17);
          }
          xmmword_26AF84438 = v25;
          re::StringID::destroyString((re::StringID *)v27);
        }
      }
      uint64_t v18 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v18 = 1;
      *(void *)(v18 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "m_constraints";
      *(void *)(v18 + 16) = &qword_26AF84418;
      *(void *)(v18 + 24) = 0;
      *(void *)(v18 + 32) = 0x3000000001;
      *(_DWORD *)(v18 + 40) = 0;
      *(void *)(v18 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      *(void *)(v18 + 56) = 0;
      *(_DWORD *)(v18 + 64) = 0;
      qword_26AF84408 = v18;
      long long v19 = re::introspectionAllocator((re *)v18);
      long long v21 = re::introspect_BOOL((re *)1, v20);
      uint64_t v22 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v19 + 32))(v19, 72, 8);
      *(_DWORD *)uint64_t v22 = 1;
      *(void *)(v22 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "m_dirty";
      *(void *)(v22 + 16) = v21;
      *(void *)(v22 + 24) = 0;
      *(void *)(v22 + 32) = 0x1900000002;
      *(_DWORD *)(v22 + 40) = 0;
      *(void *)(v22 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      *(void *)(v22 + 56) = 0;
      *(_DWORD *)(v22 + 64) = 0;
      qword_26AF84410 = v22;
      __cxa_guard_release(&qword_26AF843E8);
    }
  }
  *((void *)this + 2) = 0x8800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((void *)this + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = &qword_26AF84400;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::PhysicsConstraintsComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::PhysicsConstraintsComponent>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::PhysicsConstraintsComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::PhysicsConstraintsComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v23 = v24;
}

id *re::internal::defaultConstruct<re::ecs2::PhysicsConstraintsComponent>(int a1, int a2, id *this)
{
  return re::ecs2::PhysicsConstraintsComponent::PhysicsConstraintsComponent(this);
}

uint64_t re::internal::defaultDestruct<re::ecs2::PhysicsConstraintsComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

uint64_t re::internal::defaultDestructV2<re::ecs2::PhysicsConstraintsComponent>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_PhysicsConstraintsComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"PhysicsConstraintsComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_PhysicsConstraintsComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_PhysicsConstraintsComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::PhysicsConstraintsComponent>, this);
}

void re::ecs2::PhysicsConstraintsComponent::~PhysicsConstraintsComponent(id *this)
{
  re::ecs2::PhysicsConstraintsComponent::~PhysicsConstraintsComponent(this);
  JUMPOUT(0x237DBCBD0);
}

{
  *this = &unk_26E6F9078;
  objc_destroyWeak(this + 16);
  this[16] = 0;
  re::DynamicArray<unsigned long>::deinit((uint64_t)(this + 11));
  re::DynamicArray<re::ecs2::PhysicsConstraint>::deinit((uint64_t)(this + 6));
  re::StringID::destroyString((re::StringID *)(this + 4));
  *this = &unk_26E6DECE0;
  objc_destructInstance(this + 1);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::PhysicsConstraintsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::allocator()
{
  return *((void *)re::ecs2::ComponentImpl<re::ecs2::PhysicsConstraintsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::PhysicsConstraintsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::PhysicsConstraintsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::PhysicsConstraintsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

void *re::DynamicArray<re::ecs2::PhysicsConstraint>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    unint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::ecs2::PhysicsConstraint>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::ecs2::PhysicsConstraint>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void *re::DynamicArray<re::ecs2::PhysicsConstraint>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      __n64 result = (void *)*result;
      if (!*v5)
      {
        __n64 result = (void *)re::DynamicArray<re::ecs2::PhysicsConstraint>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x130uLL))
        {
          uint64_t v2 = 304 * a2;
          __n64 result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 304 * a2, 16);
          if (result)
          {
            unint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 304, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        __n64 result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      unint64_t v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = v8 + 304 * v9;
        uint64_t v11 = (uint64_t)(v7 + 14);
        uint64_t v12 = v8 + 112;
        do
        {
          *(_DWORD *)(v11 - 112) = *(_DWORD *)(v12 - 112);
          char v13 = *(void *)(v12 - 104);
          *(void *)(v11 - 104) = *(void *)(v11 - 104) & 0xFFFFFFFFFFFFFFFELL | *(void *)(v12 - 104) & 1;
          *(void *)(v11 - 104) = *(void *)(v12 - 104) & 0xFFFFFFFFFFFFFFFELL | v13 & 1;
          *(void *)(v11 - 96) = *(void *)(v12 - 96);
          *(void *)(v12 - 96) = "";
          *(void *)(v12 - 104) = 0;
          *(unsigned char *)(v11 - 8re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = *(unsigned char *)(v12 - 88);
          re::ecs2::EntityHandle::EntityHandle(v11 - 80, v12 - 80);
          long long v14 = *(_OWORD *)(v12 - 32);
          *(_OWORD *)(v11 - 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = *(_OWORD *)(v12 - 48);
          *(_OWORD *)(v11 - 32) = v14;
          char v15 = *(void *)(v12 - 16);
          *(void *)(v11 - 16) = *(void *)(v11 - 16) & 0xFFFFFFFFFFFFFFFELL | *(void *)(v12 - 16) & 1;
          *(void *)(v11 - 16) = *(void *)(v12 - 16) & 0xFFFFFFFFFFFFFFFELL | v15 & 1;
          *(void *)(v11 - re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = *(void *)(v12 - 8);
          *(void *)(v12 - re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "";
          *(void *)(v12 - 16) = 0;
          re::ecs2::EntityHandle::EntityHandle(v11, v12);
          *(_OWORD *)(v11 + 32) = *(_OWORD *)(v12 + 32);
          long long v16 = *(_OWORD *)(v12 + 48);
          long long v17 = *(_OWORD *)(v12 + 64);
          long long v18 = *(_OWORD *)(v12 + 96);
          *(_OWORD *)(v11 + 80) = *(_OWORD *)(v12 + 80);
          *(_OWORD *)(v11 + 96) = v18;
          *(_OWORD *)(v11 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v16;
          *(_OWORD *)(v11 + 64) = v17;
          long long v19 = *(_OWORD *)(v12 + 112);
          long long v20 = *(_OWORD *)(v12 + 128);
          long long v21 = *(_OWORD *)(v12 + 160);
          *(_OWORD *)(v11 + 144) = *(_OWORD *)(v12 + 144);
          *(_OWORD *)(v11 + 1re::HashTable<re::ecs2::Entity const*,re::ecs2::BillboardData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::deinit((uint64_t *)this + 60) = v21;
          *(_OWORD *)(v11 + 112) = v19;
          *(_OWORD *)(v11 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 28) = v20;
          char v22 = *(void *)(v12 + 176);
          *(void *)(v11 + 176) = *(void *)(v11 + 176) & 0xFFFFFFFFFFFFFFFELL | *(void *)(v12 + 176) & 1;
          *(void *)(v11 + 176) = *(void *)(v12 + 176) & 0xFFFFFFFFFFFFFFFELL | v22 & 1;
          *(void *)(v11 + 184) = *(void *)(v12 + 184);
          *(void *)(v12 + 184) = "";
          *(void *)(v12 + 176) = 0;
          re::StringID::destroyString((re::StringID *)(v12 + 176));
          re::ecs2::EntityHandle::reset((re::ecs2::EntityHandle *)v12);
          objc_destroyWeak((id *)v12);
          *(void *)uint64_t v12 = 0;
          re::StringID::destroyString((re::StringID *)(v12 - 16));
          re::ecs2::EntityHandle::reset((re::ecs2::EntityHandle *)(v12 - 80));
          objc_destroyWeak((id *)(v12 - 80));
          *(void *)(v12 - 80) = 0;
          re::StringID::destroyString((re::StringID *)(v12 - 104));
          v11 += 304;
          uint64_t v23 = v12 + 192;
          v12 += 304;
        }
        while (v23 != v10);
        uint64_t v8 = v5[4];
      }
      __n64 result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

void *re::IntrospectionDynamicArray<re::ecs2::PhysicsConstraint>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::ecs2::PhysicsConstraint>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionDynamicArray<re::ecs2::PhysicsConstraint>::construct(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::PhysicsConstraint>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::ecs2::PhysicsConstraint>::deinit(a2);
}

void *re::IntrospectionDynamicArray<re::ecs2::PhysicsConstraint>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<re::ecs2::PhysicsConstraint>::deinit(a2);
  *(void *)a2 = a3;
  __n64 result = re::DynamicArray<re::ecs2::PhysicsConstraint>::setCapacity((void *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::ecs2::PhysicsConstraint>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (!*(void *)a4)
  {
    *(void *)a4 = a2;
    re::DynamicArray<re::ecs2::PhysicsConstraint>::setCapacity((void *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  unint64_t v10 = *(void *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
    {
      re::DynamicArray<re::ecs2::PhysicsConstraint>::resize(a4, a5);
    }
  }
  else
  {
    re::DynamicArray<re::ecs2::PhysicsConstraint>::setCapacity((void *)a4, a5);
    for (unint64_t i = a5 - *(void *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::ecs2::PhysicsConstraint>::addElement(uint64_t a1, re *a2, int a3, uint64_t a4)
{
  re::ecs2::PhysicsConstraint::PhysicsConstraint((re::ecs2::PhysicsConstraint *)&v22);
  unint64_t v7 = *(void *)(a4 + 16);
  if (v7 >= *(void *)(a4 + 8))
  {
    re::DynamicArray<re::ecs2::PhysicsConstraint>::growCapacity((void *)a4, v7 + 1);
    unint64_t v7 = *(void *)(a4 + 16);
  }
  uint64_t v8 = *(void *)(a4 + 32) + 304 * v7;
  *(_DWORD *)uint64_t v8 = v22;
  char v9 = v23;
  *(void *)(v8 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = *(void *)(v8 + 8) & 0xFFFFFFFFFFFFFFFELL | v23 & 1;
  *(void *)(v8 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v23 & 0xFFFFFFFFFFFFFFFELL | v9 & 1;
  *(void *)(v8 + 16) = v24;
  uint64_t v23 = 0;
  long long v24 = "";
  *(unsigned char *)(v8 + 24) = v25;
  re::ecs2::EntityHandle::EntityHandle(v8 + 32, (uint64_t)v26);
  long long v10 = v28;
  *(_OWORD *)(v8 + 64) = v27;
  *(_OWORD *)(v8 + 80) = v10;
  char v11 = v29;
  *(void *)(v8 + 96) = *(void *)(v8 + 96) & 0xFFFFFFFFFFFFFFFELL | v29 & 1;
  *(void *)(v8 + 96) = v29 & 0xFFFFFFFFFFFFFFFELL | v11 & 1;
  *(void *)(v8 + 104) = v30;
  uint64_t v29 = 0;
  uint64_t v30 = "";
  re::ecs2::EntityHandle::EntityHandle(v8 + 112, (uint64_t)v31);
  *(_OWORD *)(v8 + 144) = v32;
  long long v12 = v33;
  long long v13 = v34;
  long long v14 = v36;
  *(_OWORD *)(v8 + 192) = v35;
  *(_OWORD *)(v8 + 20re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v14;
  *(_OWORD *)(v8 + 1re::HashTable<re::ecs2::Entity const*,re::ecs2::BillboardData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::deinit((uint64_t *)this + 60) = v12;
  *(_OWORD *)(v8 + 176) = v13;
  long long v15 = v37;
  long long v16 = v38;
  long long v17 = v40;
  *(_OWORD *)(v8 + 256) = v39;
  *(_OWORD *)(v8 + re::DynamicArray<re::TraceEntry>::deinit((uint64_t)this + 272) = v17;
  *(_OWORD *)(v8 + 224) = v15;
  *(_OWORD *)(v8 + 240) = v16;
  char v18 = v41;
  *(void *)(v8 + 28re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = *(void *)(v8 + 288) & 0xFFFFFFFFFFFFFFFELL | v41 & 1;
  *(void *)(v8 + 28re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v41 & 0xFFFFFFFFFFFFFFFELL | v18 & 1;
  *(void *)(v8 + 296) = v42;
  uint64_t v41 = 0;
  unint64_t v42 = "";
  ++*(void *)(a4 + 16);
  ++*(_DWORD *)(a4 + 24);
  re::StringID::destroyString((re::StringID *)&v41);
  re::ecs2::EntityHandle::reset((re::ecs2::EntityHandle *)v31);
  objc_destroyWeak(v31);
  v31[0] = 0;
  re::StringID::destroyString((re::StringID *)&v29);
  re::ecs2::EntityHandle::reset((re::ecs2::EntityHandle *)v26);
  objc_destroyWeak(v26);
  v26[0] = 0;
  re::StringID::destroyString((re::StringID *)&v23);
  long long v19 = (re::IntrospectionBase *)(*(void *)(a4 + 32) + 304 * *(void *)(a4 + 16) - 304);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v19);
  return v19;
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::PhysicsConstraint>::size(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::PhysicsConstraint>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 304 * a3;
}

{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 304 * a3;
}

uint64_t re::DynamicArray<re::ecs2::PhysicsConstraint>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = 0;
        uint64_t v6 = 304 * v4;
        do
        {
          uint64_t v7 = v3 + v5;
          re::StringID::destroyString((re::StringID *)(v3 + v5 + 288));
          re::ecs2::EntityHandle::reset((re::ecs2::EntityHandle *)(v3 + v5 + 112));
          objc_destroyWeak((id *)(v3 + v5 + 112));
          *(void *)(v7 + 112) = 0;
          re::StringID::destroyString((re::StringID *)(v3 + v5 + 96));
          re::ecs2::EntityHandle::reset((re::ecs2::EntityHandle *)(v3 + v5 + 32));
          objc_destroyWeak((id *)(v3 + v5 + 32));
          *(void *)(v7 + 32) = 0;
          re::StringID::destroyString((re::StringID *)(v3 + v5 + 8));
          v5 += 304;
        }
        while (v6 != v5);
        uint64_t result = *(void *)a1;
        uint64_t v3 = *(void *)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

void re::DynamicArray<re::ecs2::PhysicsConstraint>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 16);
  if (v4 >= a2)
  {
    if (v4 <= a2) {
      return;
    }
    uint64_t v7 = 304 * a2 + 288;
    unint64_t v8 = a2;
    do
    {
      char v9 = (re::StringID *)(*(void *)(a1 + 32) + v7);
      re::StringID::destroyString(v9);
      re::ecs2::EntityHandle::reset((re::StringID *)((char *)v9 - 176));
      objc_destroyWeak((id *)v9 - 22);
      *((void *)v9 - 22) = 0;
      re::StringID::destroyString((re::StringID *)((char *)v9 - 192));
      re::ecs2::EntityHandle::reset((re::StringID *)((char *)v9 - 256));
      objc_destroyWeak((id *)v9 - 32);
      *((void *)v9 - 32) = 0;
      re::StringID::destroyString((re::StringID *)((char *)v9 - 280));
      ++v8;
      v7 += 304;
    }
    while (v8 < *(void *)(a1 + 16));
  }
  else
  {
    if (*(void *)(a1 + 8) < a2)
    {
      re::DynamicArray<re::ecs2::PhysicsConstraint>::setCapacity((void *)a1, a2);
      unint64_t v4 = *(void *)(a1 + 16);
    }
    unint64_t v5 = a2 - v4;
    if (a2 > v4)
    {
      uint64_t v6 = 304 * v4;
      do
      {
        re::ecs2::PhysicsConstraint::PhysicsConstraint((re::ecs2::PhysicsConstraint *)(*(void *)(a1 + 32) + v6));
        v6 += 304;
        --v5;
      }
      while (v5);
    }
  }
  *(void *)(a1 + 16) = a2;
  ++*(_DWORD *)(a1 + 24);
}

void *re::TypeBuilderHelper::registerDynamicArray<re::ecs2::PhysicsConstraint>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)a1 = a3;
  uint64_t result = re::DynamicArray<re::ecs2::PhysicsConstraint>::setCapacity((void *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::PhysicsConstraint>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::ecs2::PhysicsConstraint>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  if (*(re::Allocator **)a1 == a3)
  {
    uint64_t v8 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = 0;
    if (v8)
    {
      uint64_t v9 = 0;
      uint64_t v10 = *(void *)(a1 + 32);
      uint64_t v11 = 304 * v8;
      do
      {
        uint64_t v12 = v10 + v9;
        re::StringID::destroyString((re::StringID *)(v10 + v9 + 288));
        re::ecs2::EntityHandle::reset((re::ecs2::EntityHandle *)(v10 + v9 + 112));
        objc_destroyWeak((id *)(v10 + v9 + 112));
        *(void *)(v12 + 112) = 0;
        re::StringID::destroyString((re::StringID *)(v10 + v9 + 96));
        re::ecs2::EntityHandle::reset((re::ecs2::EntityHandle *)(v10 + v9 + 32));
        objc_destroyWeak((id *)(v10 + v9 + 32));
        *(void *)(v12 + 32) = 0;
        re::StringID::destroyString((re::StringID *)(v10 + v9 + 8));
        v9 += 304;
      }
      while (v11 != v9);
    }
  }
  else
  {
    re::DynamicArray<re::ecs2::PhysicsConstraint>::deinit(a1);
    *(void *)a1 = a3;
    re::DynamicArray<re::ecs2::PhysicsConstraint>::setCapacity((void *)a1, a4);
  }
  ++*(_DWORD *)(a1 + 24);
  re::DynamicArray<re::ecs2::PhysicsConstraint>::resize(a1, a4);
  {
    re::TypeRegistry::typeInfo(*(void **)a2, *(void *)(*(void *)(a2 + 16) + 72), v18);
    re::TypeInfo::TypeInfo((uint64_t)v17, (uint64_t)&v19);
    uint64_t v14 = *(void *)(a1 + 16);
    if (v14)
    {
      long long v15 = *(char **)(a1 + 32);
      uint64_t v16 = 304 * v14;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v17, v15, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v17, (void **)v15, a3, 0);
        v15 += 304;
        v16 -= 304;
      }
      while (v16);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::PhysicsConstraint>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 32) + 304 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::PhysicsConstraint>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::PhysicsConstraint>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 24))
  {
    int v3 = a1[3];
    unint64_t v4 = *(void *)(v2 + 16);
    if (v3 < (int)v4) {
      a1[3] = ++v3;
    }
    if (v4 <= v3) {
      return 0;
    }
    else {
      return *(void *)(v2 + 32) + 304 * v3;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::PhysicsConstraint>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, result);
  }
  return result;
}

void *re::ecs2::allocInfo_DirectParameterTextureEntry(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF844D8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF844D8))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF846B0, "DirectParameterTextureEntry");
    __cxa_guard_release(&qword_26AF844D8);
  }
  return &unk_26AF846B0;
}

void re::ecs2::initInfo_DirectParameterTextureEntry(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v14[0] = 0x9695A29D8174CBAELL;
  v14[1] = "DirectParameterTextureEntry";
  re::StringID::destroyString((re::StringID *)v14);
  *((_OWORD *)this + 2) = v15;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF844E0, memory_order_acquire) & 1) == 0)
  {
    unint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF844E0);
    if (v4)
    {
      unint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v7 = re::introspect_AssetHandle((re *)1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "textureAsset";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 32) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF84570 = v8;
      uint64_t v9 = re::introspectionAllocator((re *)v8);
      uint64_t v11 = re::introspect_size_t((re *)1, v10);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "offset";
      *(void *)(v12 + 16) = v11;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 32) = 0x1800000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      *(void *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF84578 = v12;
      __cxa_guard_release(&qword_26AF844E0);
    }
  }
  *((void *)this + 2) = 0x2000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((void *)this + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = &qword_26AF84570;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::DirectParameterTextureEntry>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::DirectParameterTextureEntry>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::DirectParameterTextureEntry>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::DirectParameterTextureEntry>;
  re::IntrospectionRegistry::add(this, v3);
  long long v13 = v15;
}

void re::internal::defaultConstruct<re::ecs2::DirectParameterTextureEntry>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
}

void re::internal::defaultDestruct<re::ecs2::DirectParameterTextureEntry>(int a1, int a2, re::AssetHandle *this)
{
}

void *re::internal::defaultConstructV2<re::ecs2::DirectParameterTextureEntry>(void *result)
{
  *uint64_t result = 0;
  result[1] = 0;
  result[2] = 0;
  return result;
}

void *re::ecs2::allocInfo_DirectParameterBuffer(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF844F0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF844F0))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF84728, "DirectParameterBuffer");
    __cxa_guard_release(&qword_26AF844F0);
  }
  return &unk_26AF84728;
}

void re::ecs2::initInfo_DirectParameterBuffer(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v11[0] = 0xB22795DB4CEC1C00;
  v11[1] = "DirectParameterBuffer";
  re::StringID::destroyString((re::StringID *)v11);
  *((_OWORD *)this + 2) = v12;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF844F8, memory_order_acquire) & 1) == 0)
  {
    unint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF844F8);
    if (v4)
    {
      unint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::introspect_DirectResourceId((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "resourceID";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0x1800000001;
      *(_DWORD *)(v7 + 40) = 0;
      *(void *)(v7 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF84580 = v7;
      uint64_t v8 = (re::ecs2 *)re::introspectionAllocator((re *)v7);
      re::IntrospectionInfo<re::DynamicArray<re::ecs2::DirectParameterTextureEntry>>::get(v8);
      uint64_t v9 = (*(uint64_t (**)(re::ecs2 *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v9 = 1;
      *(void *)(v9 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "textures";
      *(void *)(v9 + 16) = &qword_26AF845B0;
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 32) = 0x2800000002;
      *(_DWORD *)(v9 + 40) = 0;
      *(void *)(v9 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      *(void *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_26AF84588 = v9;
      __cxa_guard_release(&qword_26AF844F8);
    }
  }
  *((void *)this + 2) = 0x5800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((void *)this + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = &qword_26AF84580;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::DirectParameterBuffer>;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::DirectParameterBuffer>;
  *((void *)this + 11) = re::internal::defaultRetain<re::ecs2::DirectParameterBuffer>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 12) = re::internal::defaultRelease<re::ecs2::DirectParameterBuffer>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::DirectParameterBuffer>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::DirectParameterBuffer>;
  re::IntrospectionRegistry::add(this, v3);
  long long v10 = v12;
}

void re::IntrospectionInfo<re::DynamicArray<re::ecs2::DirectParameterTextureEntry>>::get(re::ecs2 *a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF84550, memory_order_acquire) & 1) == 0)
  {
    a1 = (re::ecs2 *)__cxa_guard_acquire(&qword_26AF84550);
    if (a1)
    {
      re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_26AF845B0);
      qword_26AF845B0 = (uint64_t)&unk_26E6F91E0;
      __cxa_guard_release(&qword_26AF84550);
    }
  }
  if ((_MergedGlobals_185 & 1) == 0)
  {
    int v1 = (void *)qword_26AF844E8;
    if (qword_26AF844E8
      || (int v1 = re::ecs2::allocInfo_DirectParameterTextureEntry(a1),
          qword_26AF844E8 = (uint64_t)v1,
          re::ecs2::initInfo_DirectParameterTextureEntry((re::ecs2 *)v1, v2),
          (_MergedGlobals_185 & 1) == 0))
    {
      _MergedGlobals_185 = 1;
      int v3 = *((_DWORD *)v1 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF845B0, 0);
      qword_26AF845C0 = 0x2800000003;
      dword_26AF845C8 = v3;
      word_26AF845CC = 0;
      *(void *)&xmmword_26AF845D0 = 0;
      *((void *)&xmmword_26AF845D0 + 1) = 0xFFFFFFFFLL;
      qword_26AF845E0 = (uint64_t)v1;
      unk_26AF845E8 = 0;
      qword_26AF845B0 = (uint64_t)&unk_26E6F91E0;
      re::IntrospectionRegistry::add(v4, v5);
      re::getPrettyTypeName((re *)&qword_26AF845B0, (const re::IntrospectionBase *)&v14);
      if (v15) {
        uint64_t v6 = *(const char **)&v16[7];
      }
      else {
        uint64_t v6 = v16;
      }
      if (v14 && (v15 & 1) != 0) {
        (*(void (**)(void))(*(void *)v14 + 40))();
      }
      long long v11 = *((_OWORD *)v1 + 2);
      uint64_t v7 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v12);
      if (v7)
      {
        uint64_t v8 = *v7;
        *((void *)&v10 + 1) = v8;
      }
      else
      {
        long long v13 = v11;
        re::TypeBuilder::beginListType((uint64_t)&v14, v12, 1, 0x28uLL, 8uLL, &v13);
        re::TypeBuilder::setConstructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::DirectParameterTextureEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::DirectParameterTextureEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v14, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::DirectParameterTextureEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::DirectParameterTextureEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v14, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::DirectParameterTextureEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v14, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::DirectParameterTextureEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::DirectParameterTextureEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::DirectParameterTextureEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v14, v9);
      }
      xmmword_26AF845D0 = v10;
      re::StringID::destroyString((re::StringID *)v12);
    }
  }
}

re::ecs2::DirectParameterBuffer *re::internal::defaultConstruct<re::ecs2::DirectParameterBuffer>(int a1, int a2, re::ecs2::DirectParameterBuffer *this)
{
  return re::ecs2::DirectParameterBuffer::DirectParameterBuffer(this);
}

uint64_t re::internal::defaultDestruct<re::ecs2::DirectParameterBuffer>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

uint64_t re::internal::defaultDestructV2<re::ecs2::DirectParameterBuffer>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

void *re::ecs2::allocInfo_DirectParameterHandle(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF84518, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF84518))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF847A0, "DirectParameterHandle");
    __cxa_guard_release(&qword_26AF84518);
  }
  return &unk_26AF847A0;
}

void re::ecs2::initInfo_DirectParameterHandle(re::ecs2 *this, re::IntrospectionBase *a2)
{
  *(void *)&long long v17 = 0xB22795DB5F39CFD0;
  *((void *)&v17 + 1) = "DirectParameterHandle";
  re::StringID::destroyString((re::StringID *)&v17);
  *((_OWORD *)this + 2) = v15;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF84510, memory_order_acquire) & 1) == 0)
  {
    unint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF84510);
    if (v4)
    {
      unint64_t v5 = (re::ecs2 *)re::introspectionAllocator(v4);
      uint64_t v6 = v5;
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF84558, memory_order_acquire) & 1) == 0)
      {
        unint64_t v5 = (re::ecs2 *)__cxa_guard_acquire(&qword_26AF84558);
        if (v5)
        {
          re::IntrospectionPointer::IntrospectionPointer((re::IntrospectionPointer *)&qword_26AF845F0);
          __cxa_guard_release(&qword_26AF84558);
        }
      }
      if ((byte_26AF844D1 & 1) == 0)
      {
        byte_26AF844D1 = 1;
        uint64_t v7 = (re::ecs2 *)qword_26AF84500;
        if (!qword_26AF84500)
        {
          uint64_t v7 = (re::ecs2 *)re::ecs2::allocInfo_DirectParameterBuffer(v5);
          qword_26AF84500 = (uint64_t)v7;
          re::ecs2::initInfo_DirectParameterBuffer(v7, v8);
        }
        ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF845F0, 0);
        qword_26AF84600 = 0x800000001;
        dword_26AF84608 = 8;
        word_26AF8460C = 0;
        *(void *)&xmmword_26AF84610 = 0;
        *((void *)&xmmword_26AF84610 + 1) = 0xFFFFFFFFLL;
        qword_26AF845F0 = (uint64_t)&unk_26E6CDA08;
        qword_26AF84620 = (uint64_t)v7;
        unk_26AF84628 = 0;
        re::IntrospectionRegistry::add(v9, v10);
        re::getPrettyTypeName((re *)&qword_26AF845F0, (const re::IntrospectionBase *)&v17);
        if (BYTE8(v17)) {
          long long v11 = v18;
        }
        else {
          long long v11 = (char *)&v17 + 9;
        }
        if (void)v17 && (BYTE8(v17)) {
          (*(void (**)(void))(*(void *)v17 + 40))();
        }
        if (v19 >> 1 == 94623636 && (v20 == "char*" || !strcmp(v20, "char*")))
        {
          long long v12 = v17;
        }
        else
        {
          long long v17 = *((_OWORD *)v7 + 2);
          long long v12 = v16;
        }
        xmmword_26AF84610 = v12;
        re::StringID::destroyString((re::StringID *)&v19);
      }
      uint64_t v13 = (*(uint64_t (**)(re::ecs2 *, uint64_t, uint64_t))(*(void *)v6 + 32))(v6, 72, 8);
      *(_DWORD *)uint64_t v13 = 1;
      *(void *)(v13 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "dataRawPtr";
      *(void *)(v13 + 16) = &qword_26AF845F0;
      *(void *)(v13 + 24) = 0;
      *(void *)(v13 + 32) = 1;
      *(_DWORD *)(v13 + 40) = 0;
      *(void *)(v13 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      *(void *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_26AF84508 = v13;
      __cxa_guard_release(&qword_26AF84510);
    }
  }
  *((void *)this + 2) = 0x800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((void *)this + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = &qword_26AF84508;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::DirectParameterHandle>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::DirectParameterHandle>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::DirectParameterHandle>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::DirectParameterHandle>;
  re::IntrospectionRegistry::add(this, v3);
  long long v14 = v15;
}

void re::internal::defaultConstruct<re::ecs2::DirectParameterHandle>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = 0;
}

void re::internal::defaultDestruct<re::ecs2::DirectParameterHandle>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)a3)
  {

    *(void *)a3 = 0;
  }
}

void *re::internal::defaultConstructV2<re::ecs2::DirectParameterHandle>(void *result)
{
  *uint64_t result = 0;
  return result;
}

void re::internal::defaultDestructV2<re::ecs2::DirectParameterHandle>(uint64_t a1)
{
  if (*(void *)a1)
  {

    *(void *)a1 = 0;
  }
}

void *re::ecs2::allocInfo_SerializableDirectMaterialParameters(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF84528, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF84528))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF84818, "SerializableDirectMaterialParameters");
    __cxa_guard_release(&qword_26AF84528);
  }
  return &unk_26AF84818;
}

void re::ecs2::initInfo_SerializableDirectMaterialParameters(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v10[0] = 0xDF87169B5D9F64F2;
  v10[1] = "SerializableDirectMaterialParameters";
  re::StringID::destroyString((re::StringID *)v10);
  *((_OWORD *)this + 2) = v11;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF84530, memory_order_acquire) & 1) == 0)
  {
    unint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF84530);
    if (v4)
    {
      unint64_t v5 = (re::ecs2 *)re::introspectionAllocator(v4);
      re::IntrospectionInfo<re::DynamicArray<re::ecs2::DirectParameterHandle>>::get(v5);
      uint64_t v6 = (*(uint64_t (**)(re::ecs2 *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v6 = 1;
      *(void *)(v6 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "vertexBufferData";
      *(void *)(v6 + 16) = &qword_26AF84630;
      *(void *)(v6 + 24) = 0;
      *(void *)(v6 + 32) = 1;
      *(_DWORD *)(v6 + 40) = 0;
      *(void *)(v6 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      *(void *)(v6 + 56) = 0;
      *(_DWORD *)(v6 + 64) = 0;
      qword_26AF84590 = v6;
      uint64_t v7 = (re::ecs2 *)re::introspectionAllocator((re *)v6);
      re::IntrospectionInfo<re::DynamicArray<re::ecs2::DirectParameterHandle>>::get(v7);
      uint64_t v8 = (*(uint64_t (**)(re::ecs2 *, uint64_t, uint64_t))(*(void *)v7 + 32))(v7, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "fragmentBufferData";
      *(void *)(v8 + 16) = &qword_26AF84630;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 32) = 0x2800000002;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF84598 = v8;
      __cxa_guard_release(&qword_26AF84530);
    }
  }
  *((void *)this + 2) = 0x5000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((void *)this + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = &qword_26AF84590;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::SerializableDirectMaterialParameters>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::SerializableDirectMaterialParameters>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::SerializableDirectMaterialParameters>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::SerializableDirectMaterialParameters>;
  re::IntrospectionRegistry::add(this, v3);
  long long v9 = v11;
}

void re::IntrospectionInfo<re::DynamicArray<re::ecs2::DirectParameterHandle>>::get(re::ecs2 *a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF84560, memory_order_acquire) & 1) == 0)
  {
    a1 = (re::ecs2 *)__cxa_guard_acquire(&qword_26AF84560);
    if (a1)
    {
      re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_26AF84630);
      qword_26AF84630 = (uint64_t)&unk_26E6F9278;
      __cxa_guard_release(&qword_26AF84560);
    }
  }
  if ((byte_26AF844D2 & 1) == 0)
  {
    int v1 = (void *)qword_26AF84520;
    if (qword_26AF84520
      || (int v1 = re::ecs2::allocInfo_DirectParameterHandle(a1),
          qword_26AF84520 = (uint64_t)v1,
          re::ecs2::initInfo_DirectParameterHandle((re::ecs2 *)v1, v2),
          (byte_26AF844D2 & 1) == 0))
    {
      byte_26AF844D2 = 1;
      int v3 = *((_DWORD *)v1 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF84630, 0);
      qword_26AF84640 = 0x2800000003;
      dword_26AF84648 = v3;
      word_26AF8464C = 0;
      *(void *)&xmmword_26AF84650 = 0;
      *((void *)&xmmword_26AF84650 + 1) = 0xFFFFFFFFLL;
      qword_26AF84660 = (uint64_t)v1;
      unk_26AF84668 = 0;
      qword_26AF84630 = (uint64_t)&unk_26E6F9278;
      re::IntrospectionRegistry::add(v4, v5);
      re::getPrettyTypeName((re *)&qword_26AF84630, (const re::IntrospectionBase *)&v14);
      if (v15) {
        uint64_t v6 = *(const char **)&v16[7];
      }
      else {
        uint64_t v6 = v16;
      }
      if (v14 && (v15 & 1) != 0) {
        (*(void (**)(void))(*(void *)v14 + 40))();
      }
      long long v11 = *((_OWORD *)v1 + 2);
      uint64_t v7 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v12);
      if (v7)
      {
        uint64_t v8 = *v7;
        *((void *)&v10 + 1) = v8;
      }
      else
      {
        long long v13 = v11;
        re::TypeBuilder::beginListType((uint64_t)&v14, v12, 1, 0x28uLL, 8uLL, &v13);
        re::TypeBuilder::setConstructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::DirectParameterHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::DirectParameterHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v14, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::DirectParameterHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::DirectParameterHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v14, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::DirectParameterHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v14, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::DirectParameterHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::DirectParameterHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::DirectParameterHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v14, v9);
      }
      xmmword_26AF84650 = v10;
      re::StringID::destroyString((re::StringID *)v12);
    }
  }
}

double re::internal::defaultConstruct<re::ecs2::SerializableDirectMaterialParameters>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a3 = 0;
  *(void *)(a3 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
  *(_DWORD *)(a3 + 24) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 72) = 0;
  double result = 0.0;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0u;
  *(_DWORD *)(a3 + 64) = 0;
  return result;
}

uint64_t re::internal::defaultDestruct<re::ecs2::SerializableDirectMaterialParameters>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit(a3 + 40);
  return re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit(a3);
}

double re::internal::defaultConstructV2<re::ecs2::SerializableDirectMaterialParameters>(uint64_t a1)
{
  *(void *)a1 = 0;
  *(void *)(a1 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 72) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0u;
  *(_DWORD *)(a1 + 64) = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::SerializableDirectMaterialParameters>(uint64_t a1)
{
  re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit(a1 + 40);
  return re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit(a1);
}

void *re::ecs2::allocInfo_DirectMaterialParametersArrayComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF84540, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF84540))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF84890, "DirectMaterialParametersArrayComponent");
    __cxa_guard_release(&qword_26AF84540);
  }
  return &unk_26AF84890;
}

void re::ecs2::initInfo_DirectMaterialParametersArrayComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v11[0] = 0x5523AF574B6F6F3CLL;
  v11[1] = "DirectMaterialParametersArrayComponent";
  re::StringID::destroyString((re::StringID *)v11);
  *((_OWORD *)this + 2) = v12;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF84548, memory_order_acquire) & 1) == 0)
  {
    unint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF84548);
    if (v4)
    {
      unint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF845A0 = v7;
      uint64_t v8 = (re::ecs2 *)re::introspectionAllocator((re *)v7);
      re::IntrospectionInfo<re::DynamicArray<re::ecs2::SerializableDirectMaterialParameters>>::get(v8);
      uint64_t v9 = (*(uint64_t (**)(re::ecs2 *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v9 = 1;
      *(void *)(v9 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "serializedMaterialParameters";
      *(void *)(v9 + 16) = &qword_26AF84670;
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 32) = 0x2000000001;
      *(_DWORD *)(v9 + 40) = 0;
      *(void *)(v9 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      *(void *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_26AF845A8 = v9;
      __cxa_guard_release(&qword_26AF84548);
    }
  }
  *((void *)this + 2) = 0x4800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((void *)this + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = &qword_26AF845A0;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::DirectMaterialParametersArrayComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::DirectMaterialParametersArrayComponent>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::DirectMaterialParametersArrayComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::DirectMaterialParametersArrayComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v10 = v12;
}

void re::IntrospectionInfo<re::DynamicArray<re::ecs2::SerializableDirectMaterialParameters>>::get(re::ecs2 *a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF84568, memory_order_acquire) & 1) == 0)
  {
    a1 = (re::ecs2 *)__cxa_guard_acquire(&qword_26AF84568);
    if (a1)
    {
      re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_26AF84670);
      qword_26AF84670 = (uint64_t)&unk_26E6F9310;
      __cxa_guard_release(&qword_26AF84568);
    }
  }
  if ((byte_26AF844D3 & 1) == 0)
  {
    int v1 = (void *)qword_26AF84538;
    if (qword_26AF84538
      || (int v1 = re::ecs2::allocInfo_SerializableDirectMaterialParameters(a1),
          qword_26AF84538 = (uint64_t)v1,
          re::ecs2::initInfo_SerializableDirectMaterialParameters((re::ecs2 *)v1, v2),
          (byte_26AF844D3 & 1) == 0))
    {
      byte_26AF844D3 = 1;
      int v3 = *((_DWORD *)v1 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF84670, 0);
      qword_26AF84680 = 0x2800000003;
      dword_26AF84688 = v3;
      word_26AF8468C = 0;
      *(void *)&xmmword_26AF84690 = 0;
      *((void *)&xmmword_26AF84690 + 1) = 0xFFFFFFFFLL;
      qword_26AF846A0 = (uint64_t)v1;
      unk_26AF846A8 = 0;
      qword_26AF84670 = (uint64_t)&unk_26E6F9310;
      re::IntrospectionRegistry::add(v4, v5);
      re::getPrettyTypeName((re *)&qword_26AF84670, (const re::IntrospectionBase *)&v14);
      if (v15) {
        uint64_t v6 = *(const char **)&v16[7];
      }
      else {
        uint64_t v6 = v16;
      }
      if (v14 && (v15 & 1) != 0) {
        (*(void (**)(void))(*(void *)v14 + 40))();
      }
      long long v11 = *((_OWORD *)v1 + 2);
      uint64_t v7 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v12);
      if (v7)
      {
        uint64_t v8 = *v7;
        *((void *)&v10 + 1) = v8;
      }
      else
      {
        long long v13 = v11;
        re::TypeBuilder::beginListType((uint64_t)&v14, v12, 1, 0x28uLL, 8uLL, &v13);
        re::TypeBuilder::setConstructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SerializableDirectMaterialParameters>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SerializableDirectMaterialParameters>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v14, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SerializableDirectMaterialParameters>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SerializableDirectMaterialParameters>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v14, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SerializableDirectMaterialParameters>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v14, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SerializableDirectMaterialParameters>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SerializableDirectMaterialParameters>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SerializableDirectMaterialParameters>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v14, v9);
      }
      xmmword_26AF84690 = v10;
      re::StringID::destroyString((re::StringID *)v12);
    }
  }
}

void re::internal::defaultConstruct<re::ecs2::DirectMaterialParametersArrayComponent>(int a1, int a2, ArcSharedObject *this)
{
  *((void *)this + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)(v3 + 16) = 0;
  *(unsigned char *)(v3 + 24) = 0;
  *(void *)uint64_t v3 = &unk_26E6EC4B0;
  *(void *)(v3 + 64) = 0;
  *(void *)(v3 + 40) = 0;
  *(void *)(v3 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
  *(void *)(v3 + 32) = 0;
  *(_DWORD *)(v3 + 56) = 0;
}

uint64_t re::internal::defaultDestruct<re::ecs2::DirectMaterialParametersArrayComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

void re::internal::defaultConstructV2<re::ecs2::DirectMaterialParametersArrayComponent>(uint64_t a1)
{
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(void *)(v1 + 16) = 0;
  *(unsigned char *)(v1 + 24) = 0;
  *(void *)uint64_t v1 = &unk_26E6EC4B0;
  *(void *)(v1 + 64) = 0;
  *(void *)(v1 + 40) = 0;
  *(void *)(v1 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
  *(void *)(v1 + 32) = 0;
  *(_DWORD *)(v1 + 56) = 0;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::DirectMaterialParametersArrayComponent>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_DirectMaterialParametersArrayComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"DirectMaterialParametersArrayComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_DirectMaterialParametersArrayComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_DirectMaterialParametersArrayComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::DirectMaterialParametersArrayComponent>, this);
}

uint64_t re::DynamicArray<objc_object  {objcproto8DRBuffer}* {__strong}>::operator=(uint64_t a1, uint64_t *a2)
{
  if ((uint64_t *)a1 != a2)
  {
    uint64_t v4 = *a2;
    if (*(void *)a1)
    {
      if (v4)
      {
        re::DynamicArray<objc_object  {objcproto8DRBuffer}* {__strong}>::copy(a1, (uint64_t)a2);
      }
      else
      {
        uint64_t v6 = *(void *)(a1 + 16);
        *(void *)(a1 + 16) = 0;
        if (v6)
        {
          uint64_t v7 = *(void ***)(a1 + 32);
          uint64_t v8 = 8 * v6;
          do
          {
            uint64_t v9 = *v7++;

            v8 -= 8;
          }
          while (v8);
        }
      }
      ++*(_DWORD *)(a1 + 24);
    }
    else if (v4)
    {
      unint64_t v5 = a2[2];
      *(void *)a1 = v4;
      re::DynamicArray<REResourceSharingClientObject * {__strong}>::setCapacity((void *)a1, v5);
      ++*(_DWORD *)(a1 + 24);
      re::DynamicArray<objc_object  {objcproto8DRBuffer}* {__strong}>::copy(a1, (uint64_t)a2);
    }
  }
  return a1;
}

re::ecs2::DirectParameterBuffer *re::ecs2::DirectParameterBuffer::DirectParameterBuffer(re::ecs2::DirectParameterBuffer *this)
{
  *(void *)this = &unk_26E6F9198;
  uuid_copy((unsigned __int8 *)this + 24, UUID_NULL);
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  *((_DWORD *)this + 16) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 9) = 0;
  *((void *)this + 1ArcSharedObject::ArcSharedObject(this, 0) = 0;
  return this;
}

re::ecs2::DirectParameterBuffer *re::ecs2::DirectParameterBuffer::DirectParameterBuffer(re::ecs2::DirectParameterBuffer *this, id *a2, const re::DirectResourceAssetTracker *a3)
{
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)this = &unk_26E6F9198;
  uuid_copy((unsigned __int8 *)this + 24, UUID_NULL);
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  *((_DWORD *)this + 16) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 9) = 0;
  *((void *)this + 1ArcSharedObject::ArcSharedObject(this, 0) = 0;
  uint64_t v6 = re::ecs2::createBuffer(a2, a3);
  uint64_t v7 = (void *)*((void *)this + 10);
  *((void *)this + 1ArcSharedObject::ArcSharedObject(this, 0) = v6;

  uint64_t v8 = DRBufferAsResource();
  DRResourceGetIdentifier();

  return this;
}

id re::ecs2::createBuffer(id *this, const re::DirectResourceAssetTracker *a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v3 = (void *)DRBufferDescriptorCreate();
  DRBufferDescriptorSetCapacity();
  DRBufferDescriptorSetSizeMultiple();
  id v4 = this[4];
  Buffer = (void *)DRContextCreateBuffer();
  uint64_t v6 = Buffer;
  if (Buffer)
  {
    id v7 = Buffer;
  }
  else
  {
    uint64_t v8 = (re *)CFErrorCopyDescription(0);
    uint64_t v9 = *re::graphicsLogObjects(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      long long v11 = v9;
      *(_DWORD *)__n128 buf = 136315138;
      CStringPtr = CFStringGetCStringPtr((CFStringRef)v8, 0x8000100u);
      _os_log_error_impl(&dword_233120000, v11, OS_LOG_TYPE_ERROR, "Unable to create direct buffer: %s", buf, 0xCu);
    }
    CFRelease(v8);
  }

  return v6;
}

void re::ecs2::DirectParameterBuffer::~DirectParameterBuffer(id *this)
{
  *this = &unk_26E6F9198;

  re::DynamicArray<re::ecs2::ProbeResource>::deinit((uint64_t)(this + 5));
  *this = &unk_26E6DECE0;
  objc_destructInstance(this + 1);
}

{
  uint64_t vars8;

  re::ecs2::DirectParameterBuffer::~DirectParameterBuffer(this);
  JUMPOUT(0x237DBCBD0);
}

re::ecs2::DirectParameterBuffer *re::ecs2::DirectParameterBuffer::DirectParameterBuffer(re::ecs2::DirectParameterBuffer *this, const re::ecs2::DirectParameterBuffer *a2, id *a3)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)this = &unk_26E6F9198;
  uuid_copy((unsigned __int8 *)this + 24, UUID_NULL);
  *((void *)this + 5) = 0;
  *((_DWORD *)this + 16) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 9) = 0;
  *((void *)this + 1ArcSharedObject::ArcSharedObject(this, 0) = 0;
  uuid_copy(dst, (const unsigned __int8 *)a2 + 24);
  uint64_t v6 = (void **)re::HashTable<re::DirectResourceId,DRResource_s *,re::Hash<re::DirectResourceId>,re::EqualTo<re::DirectResourceId>,true,false>::tryGet((uint64_t)(a3 + 5), dst);
  if (v6) {
    id v7 = *v6;
  }
  else {
    id v7 = 0;
  }
  id v8 = v7;
  uint64_t v9 = DRResourceAsBuffer();
  BytesUsed = (const re::DirectResourceAssetTracker *)DRBufferGetBytesUsed();
  uint64_t v11 = re::ecs2::createBuffer(a3, BytesUsed);
  long long v12 = (void *)*((void *)this + 10);
  *((void *)this + 1ArcSharedObject::ArcSharedObject(this, 0) = v11;

  long long v13 = DRBufferAsResource();
  DRResourceGetIdentifier();

  id v14 = v9;
  DRBufferReplace();

  re::DynamicArray<re::ecs2::DirectParameterTextureEntry>::operator=((uint64_t)this + 40, (uint64_t *)a2 + 5);
  return this;
}

uint64_t re::DynamicArray<re::ecs2::DirectParameterTextureEntry>::operator=(uint64_t a1, uint64_t *a2)
{
  if ((uint64_t *)a1 != a2)
  {
    uint64_t v4 = *a2;
    if (*(void *)a1)
    {
      if (v4)
      {
        re::DynamicArray<re::ecs2::DirectParameterTextureEntry>::copy((void *)a1, (uint64_t)a2);
        ++*(_DWORD *)(a1 + 24);
      }
      else
      {
        re::DynamicArray<re::ecs2::ProbeResource>::clear((re::AssetHandle *)a1);
      }
    }
    else if (v4)
    {
      unint64_t v5 = a2[2];
      *(void *)a1 = v4;
      re::DynamicArray<re::ecs2::DirectParameterTextureEntry>::setCapacity((void *)a1, v5);
      ++*(_DWORD *)(a1 + 24);
      re::DynamicArray<re::ecs2::DirectParameterTextureEntry>::copy((void *)a1, (uint64_t)a2);
    }
  }
  return a1;
}

void re::ecs2::DirectParameterBuffer::resize(re::ecs2::DirectParameterBuffer *this, id *a2, re::DirectResourceAssetTracker *a3)
{
  uint64_t v4 = re::ecs2::createBuffer(a2, a3);
  unint64_t v5 = (void *)*((void *)this + 10);
  *((void *)this + 1ArcSharedObject::ArcSharedObject(this, 0) = v4;

  DRBufferAsResource();
  id v6 = (id)objc_claimAutoreleasedReturnValue();
  DRResourceGetIdentifier();
}

uint64_t re::ecs2::DirectParameterBuffer::getSize(re::ecs2::DirectParameterBuffer *this, const re::DirectResourceAssetTracker *a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uuid_copy(dst, (const unsigned __int8 *)this + 24);
  uint64_t v3 = (id *)re::HashTable<re::DirectResourceId,DRResource_s *,re::Hash<re::DirectResourceId>,re::EqualTo<re::DirectResourceId>,true,false>::tryGet((uint64_t)a2 + 40, dst);
  if (!v3)
  {
    id v4 = 0;
    goto LABEL_6;
  }
  id v4 = *v3;
  if (!v4)
  {
LABEL_6:
    uint64_t BytesUsed = 0;
    goto LABEL_9;
  }
  unint64_t v5 = DRResourceAsBuffer();
  if (v5) {
    uint64_t BytesUsed = DRBufferGetBytesUsed();
  }
  else {
    uint64_t BytesUsed = 0;
  }

LABEL_9:
  return BytesUsed;
}

__n128 re::ecs2::DirectMaterialParametersArrayComponent::resolveSerializedParameters@<Q0>(re::ecs2::DirectMaterialParametersArrayComponent *this@<X0>, const re::DirectResourceAssetTracker *a2@<X1>, uint64_t a3@<X8>, __n128 result@<Q0>)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  *(_DWORD *)(a3 + 24) = 0;
  uint64_t v5 = *((void *)this + 6);
  if (v5)
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    id v8 = (void *)*((void *)this + 8);
    long long v28 = &v8[10 * v5];
    uint64_t v9 = (char *)a2 + 40;
    double result = 0uLL;
    do
    {
      int v33 = 0;
      memset(v32, 0, sizeof(v32));
      uint64_t v36 = 0;
      v34[0] = result;
      v34[1] = result;
      int v35 = 0;
      if (v8[2])
      {
        unint64_t v10 = 0;
        do
        {
          uuid_copy(dst, (const unsigned __int8 *)(*(void *)(v8[4] + 8 * v10) + 24));
          uuid_copy(uu2, dst);
          uint64_t v11 = (void **)re::HashTable<re::DirectResourceId,DRResource_s *,re::Hash<re::DirectResourceId>,re::EqualTo<re::DirectResourceId>,true,false>::tryGet((uint64_t)v9, uu2);
          if (v11) {
            long long v12 = *v11;
          }
          else {
            long long v12 = 0;
          }
          id v13 = v12;
          id v14 = DRResourceAsBuffer();
          id v31 = v14;
          if (v14)
          {
            re::DynamicArray<NSObject  {objcproto18OS_dispatch_source}* {__strong}>::add((_anonymous_namespace_ *)v32, &v31);
          }
          else
          {
            id v30 = 0;
            re::DynamicArray<NSObject  {objcproto18OS_dispatch_source}* {__strong}>::add((_anonymous_namespace_ *)v32, &v30);
          }

          ++v10;
        }
        while (v10 < v8[2]);
      }
      if (v8[7])
      {
        unint64_t v15 = 0;
        do
        {
          uuid_copy(dst, (const unsigned __int8 *)(*(void *)(v8[9] + 8 * v15) + 24));
          uuid_copy(v37, dst);
          long long v16 = (void **)re::HashTable<re::DirectResourceId,DRResource_s *,re::Hash<re::DirectResourceId>,re::EqualTo<re::DirectResourceId>,true,false>::tryGet((uint64_t)v9, v37);
          if (v16) {
            uint64_t v17 = *v16;
          }
          else {
            uint64_t v17 = 0;
          }
          id v18 = v17;
          unint64_t v19 = DRResourceAsBuffer();
          id v31 = v19;
          if (v19)
          {
            re::DynamicArray<NSObject  {objcproto18OS_dispatch_source}* {__strong}>::add((_anonymous_namespace_ *)((char *)v34 + 8), &v31);
          }
          else
          {
            id v29 = 0;
            re::DynamicArray<NSObject  {objcproto18OS_dispatch_source}* {__strong}>::add((_anonymous_namespace_ *)((char *)v34 + 8), &v29);
          }

          ++v15;
        }
        while (v15 < v8[7]);
      }
      unint64_t v20 = *(void *)(a3 + 8);
      if (v7 >= v20)
      {
        long long v21 = 0uLL;
        if (v20 < v7 + 1)
        {
          if (*(void *)a3)
          {
            uint64_t v22 = 2 * v20;
            BOOL v23 = v20 == 0;
            unint64_t v24 = 8;
            if (!v23) {
              unint64_t v24 = v22;
            }
            if (v24 <= v7 + 1) {
              unint64_t v25 = v7 + 1;
            }
            else {
              unint64_t v25 = v24;
            }
            re::DynamicArray<re::ecs2::ResolvedDirectParameters>::setCapacity((void *)a3, v25);
          }
          else
          {
            re::DynamicArray<re::ecs2::ResolvedDirectParameters>::setCapacity((void *)a3, v7 + 1);
            ++*(_DWORD *)(a3 + 24);
          }
          long long v21 = 0uLL;
        }
        unint64_t v7 = *(void *)(a3 + 16);
        uint64_t v6 = *(void *)(a3 + 32);
      }
      else
      {
        long long v21 = 0uLL;
      }
      uint64_t v26 = v6 + 80 * v7;
      *(void *)uint64_t v26 = 0;
      *(void *)(v26 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      *(_DWORD *)(v26 + 24) = 0;
      *(void *)(v26 + 16) = 0;
      uint64_t v27 = v26 + 40;
      *(void *)(v26 + 72) = 0;
      *(_OWORD *)(v26 + 32) = v21;
      *(_OWORD *)(v26 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v21;
      *(_DWORD *)(v26 + 64) = 0;
      re::DynamicArray<objc_object  {objcproto8DRBuffer}* {__strong}>::operator=(v26, v32);
      re::DynamicArray<objc_object  {objcproto8DRBuffer}* {__strong}>::operator=(v27, (uint64_t *)v34 + 1);
      unint64_t v7 = *(void *)(a3 + 16) + 1;
      *(void *)(a3 + 16) = v7;
      ++*(_DWORD *)(a3 + 24);
      re::DynamicArray<re::ObjCObject>::deinit((uint64_t)v34 + 8);
      this = (re::ecs2::DirectMaterialParametersArrayComponent *)re::DynamicArray<re::ObjCObject>::deinit((uint64_t)v32);
      double result = 0uLL;
      v8 += 10;
    }
    while (v8 != v28);
  }
  return result;
}

void *re::ecs2::DirectMaterialParametersArrayComponent::getParameterData@<X0>(void *this@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, void *a5@<X8>)
{
  if (this[6] <= a3) {
    goto LABEL_10;
  }
  uint64_t v5 = this[8];
  if (a2 != 2)
  {
    if (a2 == 1)
    {
      uint64_t v6 = v5 + 80 * a3;
      if (*(void *)(v6 + 16) > a4)
      {
        uint64_t v7 = *(void *)(v6 + 32);
        goto LABEL_8;
      }
    }
LABEL_10:
    *a5 = 0;
    return this;
  }
  if (*(void *)(v5 + 80 * a3 + 56) <= a4) {
    goto LABEL_10;
  }
  uint64_t v7 = *(void *)(v5 + 80 * a3 + 72);
LABEL_8:
  uint64_t v8 = *(void *)(v7 + 8 * a4);
  *a5 = v8;
  if (v8) {
    return (id)(v8 + 8);
  }
  return this;
}

void re::ecs2::DirectMaterialParametersArrayComponent::setParameterData(void *a1, char a2, unint64_t a3, unint64_t a4, uint64_t *a5)
{
  if ((a2 & 3) == 0) {
    return;
  }
  unint64_t v10 = a1[6];
  if (v10 <= a3)
  {
    re::DynamicArray<re::ecs2::SerializableDirectMaterialParameters>::resize(a1 + 4, a3 + 1);
    unint64_t v10 = a1[6];
  }
  if (v10 <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v11 = a1[8];
  if ((a2 & 1) == 0) {
    goto LABEL_10;
  }
  uint64_t v12 = v11 + 80 * a3;
  unint64_t v13 = *(void *)(v12 + 16);
  if (v13 <= a4)
  {
    re::DynamicArray<re::ecs2::DirectParameterHandle>::resize(v11 + 80 * a3, a4 + 1);
    unint64_t v13 = *(void *)(v12 + 16);
  }
  if (v13 <= a4)
  {
LABEL_19:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_20;
  }
  re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)(*(void *)(v12 + 32) + 8 * a4), *a5);
LABEL_10:
  if ((a2 & 2) == 0) {
    return;
  }
  uint64_t v14 = v11 + 80 * a3;
  unint64_t v17 = *(void *)(v14 + 56);
  long long v16 = (unint64_t *)(v14 + 56);
  unint64_t v15 = v17;
  if (v17 <= a4)
  {
    re::DynamicArray<re::ecs2::DirectParameterHandle>::resize(v11 + 80 * a3 + 40, a4 + 1);
    unint64_t v15 = *v16;
  }
  if (v15 <= a4)
  {
LABEL_20:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v18 = *a5;
  unint64_t v19 = (uint64_t *)(*(void *)(v11 + 80 * a3 + 72) + 8 * a4);
  re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(v19, v18);
}

void *re::DynamicArray<re::ecs2::SerializableDirectMaterialParameters>::resize(void *result, unint64_t a2)
{
  uint64_t v3 = result;
  unint64_t v4 = result[2];
  if (v4 >= a2)
  {
    if (v4 <= a2) {
      return result;
    }
    uint64_t v8 = 80 * a2;
    unint64_t v9 = a2;
    do
    {
      uint64_t v10 = v3[4] + v8;
      re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit(v10 + 40);
      double result = (void *)re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit(v10);
      ++v9;
      v8 += 80;
    }
    while (v9 < v3[2]);
  }
  else
  {
    if (result[1] < a2)
    {
      double result = re::DynamicArray<re::ecs2::SerializableDirectMaterialParameters>::setCapacity(result, a2);
      unint64_t v4 = v3[2];
    }
    unint64_t v5 = a2 - v4;
    if (a2 > v4)
    {
      uint64_t v6 = 80 * v4;
      do
      {
        uint64_t v7 = v3[4] + v6;
        *(void *)uint64_t v7 = 0;
        *(void *)(v7 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
        *(_DWORD *)(v7 + 24) = 0;
        *(void *)(v7 + 16) = 0;
        *(void *)(v7 + 72) = 0;
        *(_OWORD *)(v7 + 32) = 0uLL;
        *(_OWORD *)(v7 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0uLL;
        *(_DWORD *)(v7 + 64) = 0;
        v6 += 80;
        --v5;
      }
      while (v5);
    }
  }
  v3[2] = a2;
  ++*((_DWORD *)v3 + 6);
  return result;
}

void re::DynamicArray<re::ecs2::DirectParameterHandle>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 16);
  if (v4 >= a2)
  {
    if (v4 <= a2) {
      return;
    }
    unint64_t v5 = a2;
    do
    {
      uint64_t v6 = *(void *)(a1 + 32);
      uint64_t v7 = *(void *)(v6 + 8 * v5);
      if (v7)
      {

        *(void *)(v6 + 8 * v5) = 0;
        unint64_t v4 = *(void *)(a1 + 16);
      }
      ++v5;
    }
    while (v5 < v4);
  }
  else
  {
    if (*(void *)(a1 + 8) < a2)
    {
      re::DynamicArray<re::ecs2::DirectParameterHandle>::setCapacity((void *)a1, a2);
      unint64_t v4 = *(void *)(a1 + 16);
    }
    if (a2 > v4) {
      bzero((void *)(*(void *)(a1 + 32) + 8 * v4), 8 * (a2 - v4));
    }
  }
  *(void *)(a1 + 16) = a2;
  ++*(_DWORD *)(a1 + 24);
}

BOOL re::ecs2::DirectMaterialParametersArrayComponent::isBufferShared(re::ecs2::DirectMaterialParametersArrayComponent *this, unint64_t a2, unint64_t a3)
{
  if (*((void *)this + 6) <= a2) {
    return 0;
  }
  uint64_t v3 = *((void *)this + 8);
  uint64_t v4 = v3 + 80 * a2;
  return *(void *)(v4 + 16) > a3
      && *(void *)(v3 + 80 * a2 + 56) > a3
      && uuid_compare((const unsigned __int8 *)(*(void *)(*(void *)(v4 + 32) + 8 * a3) + 24), (const unsigned __int8 *)(*(void *)(*(void *)(v3 + 80 * a2 + 72) + 8 * a3) + 24)) == 0;
}

void re::ecs2::DirectMaterialParametersArrayComponent::clearBufferData(re::ecs2::DirectMaterialParametersArrayComponent *this, char a2, unint64_t a3)
{
  if (*((void *)this + 6) > a3)
  {
    if (a2) {
      re::DynamicArray<re::SharedPtr<re::ResourceSharingManager::Completion>>::clear(*((void *)this + 8) + 80 * a3);
    }
    if ((a2 & 2) != 0)
    {
      if (*((void *)this + 6) <= a3)
      {
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      uint64_t v6 = *((void *)this + 8) + 80 * a3 + 40;
      re::DynamicArray<re::SharedPtr<re::ResourceSharingManager::Completion>>::clear(v6);
    }
  }
}

uint64_t ___ZN2re4ecs2L10copyBufferEPU18objcproto8DRBuffer11objc_objectS2__block_invoke()
{
  return DRBufferRead();
}

void *___ZN2re4ecs2L10copyBufferEPU18objcproto8DRBuffer11objc_objectS2__block_invoke_2(uint64_t a1, const void *a2, size_t a3)
{
  size_t v4 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(a1 + 40);
  if (v4 < a3) {
    a3 = v4;
  }
  return memcpy(v3, a2, a3);
}

void *re::IntrospectionDynamicArray<re::ecs2::DirectParameterTextureEntry>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::ecs2::DirectParameterTextureEntry>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionDynamicArray<re::ecs2::DirectParameterTextureEntry>::construct(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::DirectParameterTextureEntry>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::ecs2::ProbeResource>::deinit(a2);
}

void *re::IntrospectionDynamicArray<re::ecs2::DirectParameterTextureEntry>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<re::ecs2::ProbeResource>::deinit(a2);
  *(void *)a2 = a3;
  double result = re::DynamicArray<re::ecs2::DirectParameterTextureEntry>::setCapacity((void *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::ecs2::DirectParameterTextureEntry>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (!*(void *)a4)
  {
    *(void *)a4 = a2;
    re::DynamicArray<re::ecs2::DirectParameterTextureEntry>::setCapacity((void *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  unint64_t v10 = *(void *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
    {
      re::DynamicArray<re::ecs2::DirectParameterTextureEntry>::resize(a4, a5);
    }
  }
  else
  {
    re::DynamicArray<re::ecs2::DirectParameterTextureEntry>::setCapacity((void *)a4, a5);
    for (unint64_t i = a5 - *(void *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::ecs2::DirectParameterTextureEntry>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *this)
{
  memset(v10, 0, sizeof(v10));
  re::DynamicArray<re::ecs2::DirectParameterTextureEntry>::add(this, (uint64_t *)v10);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v10);
  uint64_t v8 = (re::IntrospectionBase *)(*((void *)this + 4) + 32 * *((void *)this + 2) - 32);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v8);
  return v8;
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::DirectParameterTextureEntry>::size(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::DirectParameterTextureEntry>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 32 * a3;
}

{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 32 * a3;
}

void *re::DynamicArray<re::ecs2::DirectParameterTextureEntry>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    unint64_t v5 = result;
    if (result[2] <= a2)
    {
      double result = (void *)*result;
      if (!*v5)
      {
        double result = (void *)re::DynamicArray<re::ecs2::DirectParameterTextureEntry>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (a2 >> 59)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 32, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          uint64_t v2 = 32 * a2;
          double result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 32 * a2, 8);
          if (result)
          {
            uint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        double result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      uint64_t v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = (re::AssetHandle *)v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = 32 * v9;
        uint64_t v11 = v7;
        do
        {
          *uint64_t v11 = 0;
          v11[1] = 0;
          void v11[2] = 0;
          v11[1] = *((void *)v8 + 1);
          *((void *)v8 + 1) = 0;
          uint64_t v12 = *v11;
          *uint64_t v11 = 0;
          *uint64_t v11 = *(void *)v8;
          *(void *)uint64_t v8 = v12;
          uint64_t v13 = v11[2];
          uint64_t v14 = *((void *)v8 + 3);
          void v11[2] = *((void *)v8 + 2);
          *((void *)v8 + 2) = v13;
          v11[3] = v14;
          re::AssetHandle::~AssetHandle(v8);
          uint64_t v8 = (re::AssetHandle *)((char *)v8 + 32);
          v11 += 4;
          v10 -= 32;
        }
        while (v10);
        uint64_t v8 = (re::AssetHandle *)v5[4];
      }
      double result = (void *)(*(uint64_t (**)(void, re::AssetHandle *))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

void re::DynamicArray<re::ecs2::DirectParameterTextureEntry>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 16);
  if (v4 >= a2)
  {
    if (v4 <= a2) {
      return;
    }
    uint64_t v8 = 32 * a2;
    unint64_t v9 = a2;
    do
    {
      re::AssetHandle::~AssetHandle((re::AssetHandle *)(*(void *)(a1 + 32) + v8));
      ++v9;
      v8 += 32;
    }
    while (v9 < *(void *)(a1 + 16));
  }
  else
  {
    if (*(void *)(a1 + 8) < a2)
    {
      re::DynamicArray<re::ecs2::DirectParameterTextureEntry>::setCapacity((void *)a1, a2);
      unint64_t v4 = *(void *)(a1 + 16);
    }
    unint64_t v5 = a2 - v4;
    if (a2 > v4)
    {
      uint64_t v6 = 32 * v4;
      do
      {
        uint64_t v7 = (_OWORD *)(*(void *)(a1 + 32) + v6);
        *uint64_t v7 = 0uLL;
        v7[1] = 0uLL;
        v6 += 32;
        --v5;
      }
      while (v5);
    }
  }
  *(void *)(a1 + 16) = a2;
  ++*(_DWORD *)(a1 + 24);
}

void *re::DynamicArray<re::ecs2::DirectParameterTextureEntry>::add(void *this, uint64_t *a2)
{
  uint64_t v3 = this;
  unint64_t v4 = this[2];
  if (v4 >= this[1])
  {
    this = re::DynamicArray<re::ecs2::DirectParameterTextureEntry>::growCapacity(this, v4 + 1);
    unint64_t v4 = v3[2];
  }
  unint64_t v5 = (uint64_t *)(v3[4] + 32 * v4);
  *unint64_t v5 = 0;
  v5[1] = 0;
  void v5[2] = 0;
  v5[1] = a2[1];
  a2[1] = 0;
  uint64_t v6 = *v5;
  *unint64_t v5 = 0;
  *unint64_t v5 = *a2;
  *a2 = v6;
  uint64_t v7 = v5[2];
  uint64_t v8 = a2[3];
  void v5[2] = a2[2];
  a2[2] = v7;
  void v5[3] = v8;
  ++v3[2];
  ++*((_DWORD *)v3 + 6);
  return this;
}

void *re::DynamicArray<re::ecs2::DirectParameterTextureEntry>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    unint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::ecs2::DirectParameterTextureEntry>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::ecs2::DirectParameterTextureEntry>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void *re::TypeBuilderHelper::registerDynamicArray<re::ecs2::DirectParameterTextureEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)a1 = a3;
  double result = re::DynamicArray<re::ecs2::DirectParameterTextureEntry>::setCapacity((void *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::DirectParameterTextureEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::ecs2::DirectParameterTextureEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  if (*(re::Allocator **)a1 == a3)
  {
    re::DynamicArray<re::ecs2::ProbeResource>::clear((re::AssetHandle *)a1);
  }
  else
  {
    re::DynamicArray<re::ecs2::ProbeResource>::deinit(a1);
    *(void *)a1 = a3;
    re::DynamicArray<re::ecs2::DirectParameterTextureEntry>::setCapacity((void *)a1, a4);
    ++*(_DWORD *)(a1 + 24);
  }
  re::DynamicArray<re::ecs2::DirectParameterTextureEntry>::resize(a1, a4);
  {
    re::TypeRegistry::typeInfo(*(void **)a2, *(void *)(*(void *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    uint64_t v9 = *(void *)(a1 + 16);
    if (v9)
    {
      uint64_t v10 = *(char **)(a1 + 32);
      uint64_t v11 = 32 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 32;
        v11 -= 32;
      }
      while (v11);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::DirectParameterTextureEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 32) + 32 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::DirectParameterTextureEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::DirectParameterTextureEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 24))
  {
    int v3 = a1[3];
    unint64_t v4 = *(void *)(v2 + 16);
    if (v3 < (int)v4) {
      a1[3] = ++v3;
    }
    if (v4 <= v3) {
      return 0;
    }
    else {
      return *(void *)(v2 + 32) + 32 * v3;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::DirectParameterTextureEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, result);
  }
  return result;
}

id re::internal::defaultRetain<re::ecs2::DirectParameterBuffer>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::DirectParameterBuffer>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
}

void *re::IntrospectionDynamicArray<re::ecs2::DirectParameterHandle>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::ecs2::DirectParameterHandle>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionDynamicArray<re::ecs2::DirectParameterHandle>::construct(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::DirectParameterHandle>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit(a2);
}

void *re::IntrospectionDynamicArray<re::ecs2::DirectParameterHandle>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit(a2);
  *(void *)a2 = a3;
  uint64_t result = re::DynamicArray<re::ecs2::DirectParameterHandle>::setCapacity((void *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::ecs2::DirectParameterHandle>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (!*(void *)a4)
  {
    *(void *)a4 = a2;
    re::DynamicArray<re::ecs2::DirectParameterHandle>::setCapacity((void *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  unint64_t v10 = *(void *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
    {
      re::DynamicArray<re::ecs2::DirectParameterHandle>::resize(a4, a5);
    }
  }
  else
  {
    re::DynamicArray<re::ecs2::DirectParameterHandle>::setCapacity((void *)a4, a5);
    for (unint64_t i = a5 - *(void *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::ecs2::DirectParameterHandle>::addElement(re::Allocator **a1, re *a2, int a3, uint64_t a4)
{
  unint64_t v9 = *(void *)(a4 + 8);
  unint64_t v8 = *(void *)(a4 + 16);
  if (v8 >= v9)
  {
    unint64_t v10 = v8 + 1;
    if (v9 < v8 + 1)
    {
      if (*(void *)a4)
      {
        unint64_t v11 = 2 * v9;
        if (!v9) {
          unint64_t v11 = 8;
        }
        if (v11 <= v10) {
          unint64_t v12 = v10;
        }
        else {
          unint64_t v12 = v11;
        }
        re::DynamicArray<re::ecs2::DirectParameterHandle>::setCapacity((void *)a4, v12);
      }
      else
      {
        re::DynamicArray<re::ecs2::DirectParameterHandle>::setCapacity((void *)a4, v10);
        ++*(_DWORD *)(a4 + 24);
      }
    }
    unint64_t v8 = *(void *)(a4 + 16);
  }
  uint64_t v13 = (re::IntrospectionBase *)(*(void *)(a4 + 32) + 8 * v8);
  *(void *)uint64_t v13 = 0;
  *(void *)(a4 + 16) = v8 + 1;
  ++*(_DWORD *)(a4 + 24);
  re::introspectionInitElement(a2, a3, a1[6], v13);
  return v13;
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::DirectParameterHandle>::size(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::DirectParameterHandle>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 8 * a3;
}

{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 8 * a3;
}

void *re::DynamicArray<re::ecs2::DirectParameterHandle>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      uint64_t result = (void *)*result;
      if (!*v5)
      {
        uint64_t result = (void *)re::DynamicArray<re::ecs2::DirectParameterHandle>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (a2 >> 61)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 8, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          uint64_t v2 = 8 * a2;
          uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 8 * a2, 8);
          if (result)
          {
            unint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_20;
            }
            goto LABEL_11;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        uint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      unint64_t v7 = 0;
      if (!v3)
      {
LABEL_20:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      unint64_t v8 = (uint64_t *)v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = 8 * v9;
        unint64_t v11 = v7;
        do
        {
          uint64_t v12 = *v8;
          *unint64_t v11 = *v8;
          if (v12) {
            id v13 = (id)(v12 + 8);
          }
          if (*v8)
          {

            *unint64_t v8 = 0;
          }
          ++v8;
          ++v11;
          v10 -= 8;
        }
        while (v10);
        unint64_t v8 = (uint64_t *)v5[4];
      }
      uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t *))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_20;
    }
  }
  return result;
}

void *re::TypeBuilderHelper::registerDynamicArray<re::ecs2::DirectParameterHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)a1 = a3;
  uint64_t result = re::DynamicArray<re::ecs2::DirectParameterHandle>::setCapacity((void *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::DirectParameterHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::ecs2::DirectParameterHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  if (*(re::Allocator **)a1 == a3)
  {
    re::DynamicArray<re::SharedPtr<re::ResourceSharingManager::Completion>>::clear(a1);
  }
  else
  {
    re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit(a1);
    *(void *)a1 = a3;
    re::DynamicArray<re::ecs2::DirectParameterHandle>::setCapacity((void *)a1, a4);
    ++*(_DWORD *)(a1 + 24);
  }
  re::DynamicArray<re::ecs2::DirectParameterHandle>::resize(a1, a4);
  {
    re::TypeRegistry::typeInfo(*(void **)a2, *(void *)(*(void *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    uint64_t v9 = *(void *)(a1 + 16);
    if (v9)
    {
      uint64_t v10 = *(char **)(a1 + 32);
      uint64_t v11 = 8 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 8;
        v11 -= 8;
      }
      while (v11);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::DirectParameterHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 32) + 8 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::DirectParameterHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::DirectParameterHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 24))
  {
    int v3 = a1[3];
    unint64_t v4 = *(void *)(v2 + 16);
    if (v3 < (int)v4) {
      a1[3] = ++v3;
    }
    if (v4 <= v3) {
      return 0;
    }
    else {
      return *(void *)(v2 + 32) + 8 * v3;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::DirectParameterHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, result);
  }
  return result;
}

void *re::IntrospectionDynamicArray<re::ecs2::SerializableDirectMaterialParameters>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::ecs2::SerializableDirectMaterialParameters>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionDynamicArray<re::ecs2::SerializableDirectMaterialParameters>::construct(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::SerializableDirectMaterialParameters>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::ecs2::SerializableDirectMaterialParameters>::deinit(a2);
}

void *re::IntrospectionDynamicArray<re::ecs2::SerializableDirectMaterialParameters>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<re::ecs2::SerializableDirectMaterialParameters>::deinit(a2);
  *(void *)a2 = a3;
  uint64_t result = re::DynamicArray<re::ecs2::SerializableDirectMaterialParameters>::setCapacity((void *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void *re::IntrospectionDynamicArray<re::ecs2::SerializableDirectMaterialParameters>::resize(void *result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v9 = result;
  if (!*(void *)a4)
  {
    *(void *)a4 = a2;
    uint64_t result = re::DynamicArray<re::ecs2::SerializableDirectMaterialParameters>::setCapacity((void *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  unint64_t v10 = *(void *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
    {
      return re::DynamicArray<re::ecs2::SerializableDirectMaterialParameters>::resize((void *)a4, a5);
    }
  }
  else
  {
    uint64_t result = re::DynamicArray<re::ecs2::SerializableDirectMaterialParameters>::setCapacity((void *)a4, a5);
    for (unint64_t i = a5 - *(void *)(a4 + 16); i; --i)
      uint64_t result = (void *)(*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*v9 + 80))(v9, a2, a3, a4);
  }
  return result;
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::ecs2::SerializableDirectMaterialParameters>::addElement(re::Allocator **a1, re *a2, int a3, uint64_t a4)
{
  long long v8 = 0uLL;
  long long v24 = 0u;
  long long v23 = 0u;
  long long v22 = 0u;
  unint64_t v9 = *(void *)(a4 + 8);
  unint64_t v10 = *(void *)(a4 + 16);
  if (v10 >= v9)
  {
    unint64_t v11 = v10 + 1;
    if (v9 < v10 + 1)
    {
      if (*(void *)a4)
      {
        uint64_t v12 = 2 * v9;
        BOOL v13 = v9 == 0;
        unint64_t v14 = 8;
        if (!v13) {
          unint64_t v14 = v12;
        }
        if (v14 <= v11) {
          unint64_t v15 = v11;
        }
        else {
          unint64_t v15 = v14;
        }
        re::DynamicArray<re::ecs2::SerializableDirectMaterialParameters>::setCapacity((void *)a4, v15);
      }
      else
      {
        re::DynamicArray<re::ecs2::SerializableDirectMaterialParameters>::setCapacity((void *)a4, v11);
        ++*(_DWORD *)(a4 + 24);
      }
      long long v8 = 0uLL;
    }
    unint64_t v10 = *(void *)(a4 + 16);
  }
  uint64_t v16 = *(void *)(a4 + 32) + 80 * v10;
  *(_OWORD *)uint64_t v16 = v8;
  long long v20 = v8;
  *(void *)(v16 + 16) = 0;
  uint64_t v21 = 0;
  *(void *)(v16 + 32) = 0;
  *((void *)&v22 + 1) = 0;
  LODWORD(v22) = 1;
  *(_DWORD *)(v16 + 24) = 1;
  *(void *)(v16 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *(_OWORD *)(v16 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v8;
  *(_DWORD *)(v16 + 64) = 0;
  long long v23 = v8;
  uint64_t v17 = *(void *)(v16 + 56);
  *(void *)(v16 + 56) = 0;
  *(void *)&long long v24 = v17;
  *(void *)(v16 + 72) = 0;
  uint64_t v25 = 0;
  DWORD2(v24) = 1;
  ++*(_DWORD *)(v16 + 64);
  ++*(void *)(a4 + 16);
  ++*(_DWORD *)(a4 + 24);
  re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit((uint64_t)&v23);
  re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit((uint64_t)&v20);
  uint64_t v18 = (re::IntrospectionBase *)(*(void *)(a4 + 32) + 80 * *(void *)(a4 + 16) - 80);
  re::introspectionInitElement(a2, a3, a1[6], v18);
  return v18;
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::SerializableDirectMaterialParameters>::size(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::SerializableDirectMaterialParameters>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 80 * a3;
}

{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 80 * a3;
}

void *re::DynamicArray<re::ecs2::SerializableDirectMaterialParameters>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      uint64_t result = (void *)*result;
      if (!*v5)
      {
        uint64_t result = (void *)re::DynamicArray<re::ecs2::SerializableDirectMaterialParameters>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x50uLL))
        {
          uint64_t v2 = 80 * a2;
          uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 80 * a2, 8);
          if (result)
          {
            unint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 80, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        uint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      unint64_t v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        unint64_t v10 = 0;
        uint64_t v11 = v8 + 80 * v9;
        do
        {
          uint64_t v12 = v8 + v10;
          BOOL v13 = &v7[v10 / 8];
          v13[4] = 0;
          v13[1] = 0;
          void v13[2] = 0;
          *BOOL v13 = 0;
          *((_DWORD *)v13 + 6) = 0;
          uint64_t v14 = *(void *)(v8 + v10 + 8);
          *BOOL v13 = *(void *)(v8 + v10);
          v13[1] = v14;
          *(void *)uint64_t v12 = 0;
          *(void *)(v12 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
          uint64_t v15 = v7[v10 / 8 + 2];
          void v13[2] = *(void *)(v8 + v10 + 16);
          *(void *)(v12 + 16) = v15;
          uint64_t v16 = v7[v10 / 8 + 4];
          v13[4] = *(void *)(v8 + v10 + 32);
          *(void *)(v12 + 32) = v16;
          *(_DWORD *)(v12 + 24) = *(_DWORD *)(v8 + v10 + 24) + 1;
          *((_DWORD *)v13 + 6) = LODWORD(v7[v10 / 8 + 3]) + 1;
          v13[9] = 0;
          v13[6] = 0;
          v13[7] = 0;
          v13[5] = 0;
          *((_DWORD *)v13 + 16) = 0;
          uint64_t v17 = (void *)(v8 + v10 + 40);
          uint64_t v18 = *(void *)(v8 + v10 + 48);
          v13[5] = *v17;
          *uint64_t v17 = 0;
          v13[6] = v18;
          *(void *)(v12 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
          uint64_t v19 = v7[v10 / 8 + 7];
          v13[7] = *(void *)(v8 + v10 + 56);
          *(void *)(v12 + 56) = v19;
          uint64_t v20 = v7[v10 / 8 + 9];
          v13[9] = *(void *)(v8 + v10 + 72);
          *(void *)(v12 + 72) = v20;
          *(_DWORD *)(v12 + 64) = *(_DWORD *)(v8 + v10 + 64) + 1;
          *((_DWORD *)v13 + 16) = LODWORD(v7[v10 / 8 + 8]) + 1;
          re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit((uint64_t)v17);
          re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit(v8 + v10);
          v10 += 80;
        }
        while (v12 + 80 != v11);
        uint64_t v8 = v5[4];
      }
      uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

void *re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SerializableDirectMaterialParameters>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)a1 = a3;
  uint64_t result = re::DynamicArray<re::ecs2::SerializableDirectMaterialParameters>::setCapacity((void *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SerializableDirectMaterialParameters>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SerializableDirectMaterialParameters>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  if (*(re::Allocator **)a1 == a3)
  {
    uint64_t v8 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = 0;
    if (v8)
    {
      uint64_t v9 = *(void *)(a1 + 32);
      uint64_t v10 = 80 * v8;
      do
      {
        re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit(v9 + 40);
        re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit(v9);
        v9 += 80;
        v10 -= 80;
      }
      while (v10);
    }
  }
  else
  {
    re::DynamicArray<re::ecs2::SerializableDirectMaterialParameters>::deinit(a1);
    *(void *)a1 = a3;
    re::DynamicArray<re::ecs2::SerializableDirectMaterialParameters>::setCapacity((void *)a1, a4);
  }
  ++*(_DWORD *)(a1 + 24);
  uint64_t v11 = (_anonymous_namespace_ *)re::DynamicArray<re::ecs2::SerializableDirectMaterialParameters>::resize((void *)a1, a4);
  {
    re::TypeRegistry::typeInfo(*(void **)a2, *(void *)(*(void *)(a2 + 16) + 72), v16);
    re::TypeInfo::TypeInfo((uint64_t)v15, (uint64_t)&v17);
    uint64_t v12 = *(void *)(a1 + 16);
    if (v12)
    {
      BOOL v13 = *(char **)(a1 + 32);
      uint64_t v14 = 80 * v12;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v15, v13, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v15, (void **)v13, a3, 0);
        v13 += 80;
        v14 -= 80;
      }
      while (v14);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SerializableDirectMaterialParameters>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 32) + 80 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SerializableDirectMaterialParameters>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SerializableDirectMaterialParameters>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 24))
  {
    int v3 = a1[3];
    unint64_t v4 = *(void *)(v2 + 16);
    if (v3 < (int)v4) {
      a1[3] = ++v3;
    }
    if (v4 <= v3) {
      return 0;
    }
    else {
      return *(void *)(v2 + 32) + 80 * v3;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SerializableDirectMaterialParameters>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, result);
  }
  return result;
}

void re::DynamicArray<objc_object  {objcproto8DRBuffer}* {__strong}>::copy(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 16);
  if (v4 >= *(void *)(a1 + 16))
  {
    re::DynamicArray<REResourceSharingClientObject * {__strong}>::setCapacity((void *)a1, *(void *)(a2 + 16));
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<objc_object  {objcproto8DRBuffer}* {__strong}*,objc_object  {objcproto8DRBuffer}* {__strong},objc_object  {objcproto8DRBuffer}* {__strong}>(*(void ***)(a2 + 32), (void **)(*(void *)(a2 + 32) + 8 * *(void *)(a1 + 16)), *(id **)(a1 + 32));
    uint64_t v9 = *(void *)(a1 + 16);
    if (v9 != v4)
    {
      uint64_t v10 = (void **)(*(void *)(a2 + 32) + 8 * v9);
      uint64_t v11 = (void *)(*(void *)(a1 + 32) + 8 * v9);
      uint64_t v12 = 8 * v4 - 8 * v9;
      do
      {
        BOOL v13 = *v10++;
        *v11++ = v13;
        v12 -= 8;
      }
      while (v12);
    }
  }
  else
  {
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<objc_object  {objcproto8DRBuffer}* {__strong}*,objc_object  {objcproto8DRBuffer}* {__strong},objc_object  {objcproto8DRBuffer}* {__strong}>(*(void ***)(a2 + 32), (void **)(*(void *)(a2 + 32) + 8 * v4), *(id **)(a1 + 32));
    uint64_t v5 = *(void *)(a1 + 16);
    if (v4 != v5)
    {
      uint64_t v6 = (void **)(*(void *)(a1 + 32) + 8 * v4);
      uint64_t v7 = 8 * v5 - 8 * v4;
      do
      {
        uint64_t v8 = *v6++;

        v7 -= 8;
      }
      while (v7);
    }
  }
  *(void *)(a1 + 16) = v4;
}

void std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<objc_object  {objcproto8DRBuffer}* {__strong}*,objc_object  {objcproto8DRBuffer}* {__strong},objc_object  {objcproto8DRBuffer}* {__strong}>(void **a1, void **a2, id *location)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      uint64_t v6 = *v5++;
      objc_storeStrong(location++, v6);
    }
    while (v5 != a2);
  }
}

re::AssetHandle *re::DynamicArray<re::ecs2::DirectParameterTextureEntry>::copy(void *a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 16);
  if (v4 >= a1[2])
  {
    re::DynamicArray<re::ecs2::DirectParameterTextureEntry>::setCapacity(a1, *(void *)(a2 + 16));
    uint64_t result = (re::AssetHandle *)std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::ecs2::DirectParameterTextureEntry *,re::ecs2::DirectParameterTextureEntry *,re::ecs2::DirectParameterTextureEntry *,0>(*(void *)(a2 + 32), (uint64_t *)(*(void *)(a2 + 32) + 32 * a1[2]), a1[4]);
    uint64_t v9 = a1[2];
    if (v9 != v4)
    {
      uint64_t v10 = (const re::AssetHandle *)(*(void *)(a2 + 32) + 32 * v9);
      uint64_t result = (re::AssetHandle *)(a1[4] + 32 * v9);
      uint64_t v11 = 32 * v4 - 32 * v9;
      do
      {
        uint64_t v12 = re::AssetHandle::AssetHandle(result, v10);
        *((void *)v12 + 3) = *((void *)v10 + 3);
        uint64_t v10 = (const re::AssetHandle *)((char *)v10 + 32);
        uint64_t result = (re::AssetHandle *)((char *)v12 + 32);
        v11 -= 32;
      }
      while (v11);
    }
  }
  else
  {
    uint64_t result = (re::AssetHandle *)std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::ecs2::DirectParameterTextureEntry *,re::ecs2::DirectParameterTextureEntry *,re::ecs2::DirectParameterTextureEntry *,0>(*(void *)(a2 + 32), (uint64_t *)(*(void *)(a2 + 32) + 32 * v4), a1[4]);
    uint64_t v6 = a1[2];
    if (v4 != v6)
    {
      uint64_t result = (re::AssetHandle *)(a1[4] + 32 * v4);
      uint64_t v7 = 32 * v6 - 32 * v4;
      do
      {
        re::AssetHandle::~AssetHandle(result);
        uint64_t result = (re::AssetHandle *)(v8 + 32);
        v7 -= 32;
      }
      while (v7);
    }
  }
  a1[2] = v4;
  return result;
}

uint64_t std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::ecs2::DirectParameterTextureEntry *,re::ecs2::DirectParameterTextureEntry *,re::ecs2::DirectParameterTextureEntry *,0>(uint64_t result, uint64_t *a2, uint64_t a3)
{
  if ((uint64_t *)result != a2)
  {
    uint64_t v5 = (uint64_t *)result;
    do
    {
      uint64_t result = re::AssetHandle::operator=(a3, v5);
      *(void *)(a3 + 24) = v5[3];
      v5 += 4;
      a3 += 32;
    }
    while (v5 != a2);
  }
  return result;
}

void *re::DynamicArray<re::ecs2::ResolvedDirectParameters>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      uint64_t result = (void *)*result;
      if (!*v5)
      {
        uint64_t result = (void *)re::DynamicArray<re::ecs2::ResolvedDirectParameters>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x50uLL))
        {
          uint64_t v2 = 80 * a2;
          uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 80 * a2, 8);
          if (result)
          {
            uint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 80, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        uint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      uint64_t v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = 80 * v9;
        uint64_t v11 = (uint64_t)v7;
        do
        {
          *(void *)uint64_t v11 = 0;
          *(void *)(v11 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
          *(_DWORD *)(v11 + 24) = 0;
          *(void *)(v11 + 16) = 0;
          *(void *)(v11 + 72) = 0;
          *(_OWORD *)(v11 + 32) = 0u;
          *(_OWORD *)(v11 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0u;
          *(_DWORD *)(v11 + 64) = 0;
          re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v11, v8);
          re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v11 + 40, v8 + 40);
          re::DynamicArray<re::ObjCObject>::deinit(v8 + 40);
          re::DynamicArray<re::ObjCObject>::deinit(v8);
          v8 += 80;
          v11 += 80;
          v10 -= 80;
        }
        while (v10);
        uint64_t v8 = v5[4];
      }
      uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

re::AudioMultiSceneManager *re::AudioMultiSceneManager::AudioMultiSceneManager(re::AudioMultiSceneManager *this)
{
  *(void *)this = &unk_26E6F93A8;
  *(_OWORD *)((char *)this + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((void *)this + 5) = 0;
  *((_DWORD *)this + 12) = 1065353216;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 22) = 1065353216;
  *((void *)this + 14) = 0;
  *((void *)this + re::HashTable<re::ecs2::Scene *,re::DynamicArray<RESubscriptionHandle>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 15) = 0;
  *((void *)this + 13) = 0;
  *((void *)this + 12) = (char *)this + 104;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_DWORD *)((char *)this + 127) = 0;
  *((_DWORD *)this + 42) = 1065353216;
  *((void *)this + 22) = 0;
  uint64_t v2 = [[REAudioManagerNotificationListener alloc] initWithOwner:this];
  uint64_t v3 = (void *)*((void *)this + 1);
  *((void *)this + 1) = v2;

  return this;
}

void re::AudioMultiSceneManager::~AudioMultiSceneManager(re::AudioMultiSceneManager *this)
{
  *(void *)this = &unk_26E6F93A8;
  uint64_t v2 = (os_unfair_lock_s *)((char *)this + 180);
  os_unfair_lock_lock((os_unfair_lock_t)this + 45);
  [*((id *)this + 1) stop];
  uint64_t v3 = (void *)*((void *)this + 1);
  *((void *)this + 1) = 0;

  for (unint64_t i = (void *)*((void *)this + 9); i; unint64_t i = (void *)*i)
  {
    uint64_t v5 = i[3];
    [**(id **)(v5 + 312) cancel];
    std::__hash_table<std::__hash_value_type<REAudioServicesNotificationCallbackConfiguration,void({block_pointer} {__strong})(void)>,std::__unordered_map_hasher<REAudioServicesNotificationCallbackConfiguration,std::__hash_value_type<REAudioServicesNotificationCallbackConfiguration,void({block_pointer} {__strong})(void)>,REAudioServicesNotificationCallbackRegistry::ConfigHasher,std::equal_to<REAudioServicesNotificationCallbackConfiguration>,true>,std::__unordered_map_equal<REAudioServicesNotificationCallbackConfiguration,std::__hash_value_type<REAudioServicesNotificationCallbackConfiguration,void({block_pointer} {__strong})(void)>,std::equal_to<REAudioServicesNotificationCallbackConfiguration>,REAudioServicesNotificationCallbackRegistry::ConfigHasher,true>,std::allocator<std::__hash_value_type<REAudioServicesNotificationCallbackConfiguration,void({block_pointer} {__strong})(void)>>>::clear(v5 + 320);
  }
  if (*((void *)this + 10))
  {
    std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<re::audio::REPHASEAudioScene>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<re::audio::REPHASEAudioScene>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<re::audio::REPHASEAudioScene>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<re::audio::REPHASEAudioScene>>>>::__deallocate_node(*((void **)this + 9));
    *((void *)this + 9) = 0;
    uint64_t v6 = *((void *)this + 8);
    if (v6)
    {
      for (uint64_t j = 0; j != v6; ++j)
        *(void *)(*((void *)this + 7) + 8 * j) = 0;
    }
    *((void *)this + 1ArcSharedObject::ArcSharedObject(this, 0) = 0;
  }
  os_unfair_lock_unlock(v2);
  std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<re::audio::REPHASEAudioScene>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<re::audio::REPHASEAudioScene>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<re::audio::REPHASEAudioScene>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<re::audio::REPHASEAudioScene>>>>::__deallocate_node(*((void **)this + 19));
  uint64_t v8 = (void *)*((void *)this + 17);
  *((void *)this + 17) = 0;
  if (v8) {
    operator delete(v8);
  }

  std::__tree<unsigned long long>::destroy((uint64_t)this + 96, *((void **)this + 13));
  std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<re::audio::REPHASEAudioScene>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<re::audio::REPHASEAudioScene>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<re::audio::REPHASEAudioScene>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<re::audio::REPHASEAudioScene>>>>::__deallocate_node(*((void **)this + 9));
  uint64_t v9 = (void *)*((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v9) {
    operator delete(v9);
  }
  std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<re::PersistedAssetData>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<re::PersistedAssetData>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<re::PersistedAssetData>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<re::PersistedAssetData>>>>::~__hash_table((uint64_t)this + 16);
}

{
  uint64_t vars8;

  re::AudioMultiSceneManager::~AudioMultiSceneManager(this);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::AudioMultiSceneManager::audioService(uint64_t *a1, uint64_t a2)
{
  if (!a2)
  {
    uint64_t v11 = *re::audioLogObjects((re *)a1);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__n128 buf = 0;
      _os_log_error_impl(&dword_233120000, v11, OS_LOG_TYPE_ERROR, "AudioMultiSceneManager::audioService() called with a null scene.", buf, 2u);
    }
    return 0;
  }
  unint64_t v2 = *(void *)(*(void *)(a2 + 104) + 272) >> 1;
  unint64_t v12 = v2;
  uint64_t v3 = (void *)a1[13];
  if (v3)
  {
    unint64_t v4 = a1 + 13;
    do
    {
      unint64_t v5 = v3[4];
      BOOL v6 = v5 >= v2;
      if (v5 >= v2) {
        uint64_t v7 = v3;
      }
      else {
        uint64_t v7 = v3 + 1;
      }
      if (v6) {
        unint64_t v4 = v3;
      }
      uint64_t v3 = (void *)*v7;
    }
    while (*v7);
    if (v4 != a1 + 13 && v2 >= v4[4]) {
      return 0;
    }
  }
  uint64_t v8 = a1 + 7;
  if (std::__hash_table<std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>>>::find<unsigned long long>(a1 + 7, v2))
  {
    return std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<re::AudioManager_PHASE>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<re::AudioManager_PHASE>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<re::AudioManager_PHASE>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<re::AudioManager_PHASE>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v8, v2, (uint64_t *)&v12)[3];
  }
  re::internal::assertLog((re::internal *)4, v9, "assertion failure: '%s' (%s:line %i) AudioMultiSceneManager::audioService() called on scene that isn't registered.", "m_audioServices.find(sceneID) != m_audioServices.end()", "audioService", 40);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::AudioMultiSceneManager::audioService(re::AudioMultiSceneManager *this)
{
  uint64_t v1 = *((void *)this + 9);
  if (v1) {
    return *(void *)(v1 + 24);
  }
  else {
    return 0;
  }
}

void re::AudioMultiSceneManager::registerScene(re::AudioMultiSceneManager *this, const re::ecs2::Scene *a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (!a2)
  {
    re::internal::assertLog((re::internal *)4, 0, "assertion failure: '%s' (%s:line %i) AudioMultiSceneManager::registerScene() called with nullptr scene.", "scene != nullptr", "registerScene", 54);
    _os_crash();
    __break(1u);
  }
  unint64_t v6 = *(void *)(*((void *)a2 + 13) + 272) >> 1;
  unint64_t v2 = (re *)std::__hash_table<std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>>>::find<unsigned long long>((void *)this + 7, v6);
  if (!v2)
  {
    unint64_t v4 = operator new(0x3A0uLL);
    v4[1] = 0;
    void v4[2] = 0;
    *unint64_t v4 = &unk_26E6DA890;
    re::AudioManager_PHASE::AudioManager_PHASE((re::AudioManager_PHASE *)(v4 + 4));
  }
  uint64_t v3 = *re::audioLogObjects(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__n128 buf = 0;
    _os_log_impl(&dword_233120000, v3, OS_LOG_TYPE_DEFAULT, "[RE/ECS] AudioMultiSceneManager::registerScene called on scene that is already reigstered", buf, 2u);
  }
}

void re::AudioMultiSceneManager::configureNewAudioService(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  char v5 = *(unsigned char *)(a1 + 128);
  *(unsigned char *)(v4 + re::DynamicArray<re::TraceEntry>::deinit((uint64_t)this + 272) = v5;
  unint64_t v6 = *(NSObject **)(v4 + 536);
  v11[0] = MEMORY[0x263EF8330];
  v11[1] = 3221225472;
  void v11[2] = ___ZN2re18AudioManager_PHASE24setExternalSourceControlEb_block_invoke;
  v11[3] = &__block_descriptor_41_e5_v8__0l;
  v11[4] = v4;
  char v12 = v5;
  dispatch_async(v6, v11);
  uint64_t v7 = *a2;
  int v8 = *(unsigned __int8 *)(a1 + 129);
  *(unsigned char *)(v7 + 56) = v8;
  uint64_t v9 = *(void *)(v7 + 64);
  if (v8)
  {
    if (v9) {
      goto LABEL_6;
    }
  }
  else if (!v9)
  {
    goto LABEL_6;
  }
  re::AudioManager::configureSTS((re::AudioManager *)v7);
  uint64_t v7 = *a2;
LABEL_6:
  *(unsigned char *)(v7 + 552) = *(unsigned char *)(a1 + 130);
  uint64_t v10 = *(void **)(a1 + 120);
  re::AudioManager_PHASE::setEngineQueue(v7, v10);
}

void re::AudioMultiSceneManager::loadAudioToSingleService(uint64_t a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4)
{
  v6[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = a3;
  char v5 = a4;
  if (a4) {
    atomic_fetch_add_explicit(&a4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v6[0] = &unk_26E6F96F8;
  v6[1] = a2;
  void v6[2] = a1;
  v6[3] = v6;
  (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)a2 + 576))(a2, &v4, v6);
  std::__function::__value_func<void ()(std::shared_ptr<re::PersistedAssetData>)>::~__value_func[abi:nn180100](v6);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v5);
  }
}

uint64_t *re::AudioMultiSceneManager::unregisterScene(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a1 + 56);
  unint64_t v4 = *(void *)(*(void *)(a2 + 104) + 272) >> 1;
  char v5 = std::__hash_table<std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>>>::find<unsigned long long>((void *)(a1 + 56), v4);
  if (!v5)
  {
    re::internal::assertLog((re::internal *)4, v6, "assertion failure: '%s' (%s:line %i) AudioMultiSceneManager::unregisterScene() called on scene that isn't registered.", "audioService != m_audioServices.end()", "unregisterScene", 89);
    uint64_t result = (uint64_t *)_os_crash();
    __break(1u);
    return result;
  }
  uint64_t v7 = v5;
  unint64_t v19 = v4;
  int8x8_t v8 = *(int8x8_t *)(a1 + 64);
  uint64_t v9 = *v5;
  unint64_t v10 = v5[1];
  uint8x8_t v11 = (uint8x8_t)vcnt_s8(v8);
  v11.i16[0] = vaddlv_u8(v11);
  if (v11.u32[0] > 1uLL)
  {
    if (v10 >= *(void *)&v8) {
      v10 %= *(void *)&v8;
    }
  }
  else
  {
    v10 &= *(void *)&v8 - 1;
  }
  char v12 = *(uint64_t **)(*v3 + 8 * v10);
  do
  {
    BOOL v13 = v12;
    char v12 = (uint64_t *)*v12;
  }
  while (v12 != v5);
  if (v13 == (uint64_t *)(a1 + 72)) {
    goto LABEL_19;
  }
  unint64_t v14 = v13[1];
  if (v11.u32[0] > 1uLL)
  {
    if (v14 >= *(void *)&v8) {
      v14 %= *(void *)&v8;
    }
  }
  else
  {
    v14 &= *(void *)&v8 - 1;
  }
  if (v14 != v10)
  {
LABEL_19:
    if (v9)
    {
      unint64_t v15 = *(void *)(v9 + 8);
      if (v11.u32[0] > 1uLL)
      {
        unint64_t v16 = *(void *)(v9 + 8);
        if (v15 >= *(void *)&v8) {
          unint64_t v16 = v15 % *(void *)&v8;
        }
      }
      else
      {
        unint64_t v16 = v15 & (*(void *)&v8 - 1);
      }
      if (v16 == v10) {
        goto LABEL_23;
      }
    }
    *(void *)(*v3 + 8 * v1ArcSharedObject::ArcSharedObject(this, 0) = 0;
    uint64_t v9 = *v5;
  }
  if (v9)
  {
    unint64_t v15 = *(void *)(v9 + 8);
LABEL_23:
    if (v11.u32[0] > 1uLL)
    {
      if (v15 >= *(void *)&v8) {
        v15 %= *(void *)&v8;
      }
    }
    else
    {
      v15 &= *(void *)&v8 - 1;
    }
    if (v15 != v10)
    {
      *(void *)(*v3 + 8 * vre::HashTable<re::ecs2::Scene *,re::DynamicArray<RESubscriptionHandle>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 15) = v13;
      uint64_t v9 = *v5;
    }
  }
  *BOOL v13 = v9;
  *char v5 = 0;
  --*(void *)(a1 + 80);
  uint64_t v17 = (std::__shared_weak_count *)v5[4];
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v17);
  }
  operator delete(v7);
  return std::__tree<unsigned long long>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>((uint64_t **)(a1 + 96), &v19, (uint64_t *)&v19);
}

void re::AudioMultiSceneManager::clearRecentlyDeletedScenes(re::AudioMultiSceneManager *this)
{
  uint64_t v1 = (void *)((char *)this + 104);
  std::__tree<unsigned long long>::destroy((uint64_t)this + 96, *((void **)this + 13));
  *(v1 - 1) = v1;
  *uint64_t v1 = 0;
  v1[1] = 0;
}

void re::AudioMultiSceneManager::setEngineQueue(uint64_t a1, void *a2)
{
  id v5 = a2;
  objc_storeStrong((id *)(a1 + 120), a2);
  for (unint64_t i = *(void **)(a1 + 72); i; unint64_t i = (void *)*i)
    re::AudioManager_PHASE::setEngineQueue(i[3], v5);
}

id re::AudioMultiSceneManager::getEngineQueue(id *this)
{
  return this[15];
}

void re::AudioMultiSceneManager::configureEnterFramePhase(re *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  *(void *)&v13.var0 = 0x4BF9C6AA1E4AE526;
  v13.var1 = "Audio Before Frame Update";
  *(_WORD *)unint64_t v14 = 1;
  id v5 = (char *)a1 + 56;
  *(_DWORD *)&v14[4] = 0;
  v14[8] = 0;
  *(_WORD *)&v14[12] = 260;
  *(_DWORD *)&v14[16] = 1023969417;
  v14[20] = 0;
  uint64_t v16 = re::globalAllocators(a1)[2];
  uint64_t v17 = v15;
  v15[0] = &unk_26E6F94A8;
  v15[1] = v5;
  uint64_t v18 = *a2;
  uint64_t v19 = 0;
  uint64_t v23 = 0;
  int v22 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  re::StringID::StringID((re::StringID *)v7, &v13);
  *(_OWORD *)int8x8_t v8 = *(_OWORD *)v14;
  *(void *)&v8[13] = *(void *)&v14[13];
  v9[3] = v16;
  v9[4] = 0;
  re::FunctionBase<24ul,void ()(float)>::operator=<24ul>((uint64_t)v9, (uint64_t)v15);
  v9[5] = v18;
  re::DynamicArray<unsigned long>::DynamicArray((uint64_t)v10, &v19);
  uint64_t v6 = *(void *)(a3 + 24);
  if (!v6) {
    std::__throw_bad_function_call[abi:nn180100]();
  }
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v6 + 48))(v6, v7);
  if (v10[0])
  {
    if (v12) {
      (*(void (**)(void))(*(void *)v10[0] + 40))();
    }
    uint64_t v12 = 0;
    memset(v10, 0, sizeof(v10));
    ++v11;
  }
  re::FunctionBase<24ul,void ()(float)>::destroyCallable((uint64_t)v9);
  re::StringID::destroyString((re::StringID *)v7);
  if (v19)
  {
    if (v23) {
      (*(void (**)(void))(*(void *)v19 + 40))();
    }
    uint64_t v23 = 0;
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    uint64_t v19 = 0;
    ++v22;
  }
  re::FunctionBase<24ul,void ()(float)>::destroyCallable((uint64_t)v15);
  re::StringID::destroyString((re::StringID *)&v13);
}

void re::AudioMultiSceneManager::configureCommitPhase(re *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  *(void *)&v13.var0 = 0xEA0359364ADC6754;
  v13.var1 = "Audio After Frame Update";
  *(_WORD *)unint64_t v14 = 1;
  id v5 = (char *)a1 + 56;
  *(_DWORD *)&v14[4] = 0;
  v14[8] = 0;
  *(_WORD *)&v14[12] = 260;
  *(_DWORD *)&v14[16] = 1023969417;
  v14[20] = 0;
  uint64_t v16 = re::globalAllocators(a1)[2];
  uint64_t v17 = v15;
  v15[0] = &unk_26E6F9500;
  v15[1] = v5;
  uint64_t v18 = *a2;
  uint64_t v19 = 0;
  uint64_t v23 = 0;
  int v22 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  re::StringID::StringID((re::StringID *)v7, &v13);
  *(_OWORD *)int8x8_t v8 = *(_OWORD *)v14;
  *(void *)&v8[13] = *(void *)&v14[13];
  v9[3] = v16;
  v9[4] = 0;
  re::FunctionBase<24ul,void ()(float)>::operator=<24ul>((uint64_t)v9, (uint64_t)v15);
  v9[5] = v18;
  re::DynamicArray<unsigned long>::DynamicArray((uint64_t)v10, &v19);
  uint64_t v6 = *(void *)(a3 + 24);
  if (!v6) {
    std::__throw_bad_function_call[abi:nn180100]();
  }
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v6 + 48))(v6, v7);
  if (v10[0])
  {
    if (v12) {
      (*(void (**)(void))(*(void *)v10[0] + 40))();
    }
    uint64_t v12 = 0;
    memset(v10, 0, sizeof(v10));
    ++v11;
  }
  re::FunctionBase<24ul,void ()(float)>::destroyCallable((uint64_t)v9);
  re::StringID::destroyString((re::StringID *)v7);
  if (v19)
  {
    if (v23) {
      (*(void (**)(void))(*(void *)v19 + 40))();
    }
    uint64_t v23 = 0;
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    uint64_t v19 = 0;
    ++v22;
  }
  re::FunctionBase<24ul,void ()(float)>::destroyCallable((uint64_t)v15);
  re::StringID::destroyString((re::StringID *)&v13);
}

void re::AudioMultiSceneManager::setIsExternalSourceControl(re::AudioMultiSceneManager *this, char a2)
{
  *((unsigned char *)this + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 28) = a2;
  unint64_t v2 = (void *)*((void *)this + 9);
  if (v2)
  {
    uint64_t v4 = MEMORY[0x263EF8330];
    do
    {
      uint64_t v5 = v2[3];
      char v6 = *((unsigned char *)this + 128);
      *(unsigned char *)(v5 + re::DynamicArray<re::TraceEntry>::deinit((uint64_t)this + 272) = v6;
      uint64_t v7 = *(NSObject **)(v5 + 536);
      v8[0] = v4;
      v8[1] = 3221225472;
      v8[2] = ___ZN2re18AudioManager_PHASE24setExternalSourceControlEb_block_invoke;
      v8[3] = &__block_descriptor_41_e5_v8__0l;
      v8[4] = v5;
      char v9 = v6;
      dispatch_async(v7, v8);
      unint64_t v2 = (void *)*v2;
    }
    while (v2);
  }
}

uint64_t re::AudioMultiSceneManager::getIsExternalSourceControl(re::AudioMultiSceneManager *this)
{
  return *((unsigned __int8 *)this + 128);
}

void re::AudioMultiSceneManager::setIsSTSControl(re::AudioMultiSceneManager *this, char a2)
{
  *((unsigned char *)this + 129) = a2;
  unint64_t v2 = (void *)*((void *)this + 9);
  if (v2)
  {
    while (1)
    {
      uint64_t v4 = v2[3];
      *(unsigned char *)(v4 + 56) = a2 != 0;
      uint64_t v5 = *(void *)(v4 + 64);
      if (a2)
      {
        if (v5) {
          goto LABEL_7;
        }
      }
      else if (!v5)
      {
        goto LABEL_7;
      }
      re::AudioManager::configureSTS((re::AudioManager *)v4);
LABEL_7:
      unint64_t v2 = (void *)*v2;
      if (!v2) {
        return;
      }
      a2 = *((unsigned char *)this + 129);
    }
  }
}

uint64_t re::AudioMultiSceneManager::getIsSTSControl(re::AudioMultiSceneManager *this)
{
  return *((unsigned __int8 *)this + 129);
}

uint64_t re::AudioMultiSceneManager::setIsHostingSharedAudioSimulation(uint64_t this, char a2)
{
  *(unsigned char *)(this + 13ArcSharedObject::ArcSharedObject(this, 0) = a2;
  for (unint64_t i = *(void **)(this + 72); i; unint64_t i = (void *)*i)
    *(unsigned char *)(i[3] + 552) = a2;
  return this;
}

uint64_t re::AudioMultiSceneManager::getIsHostingSharedAudioSimulation(re::AudioMultiSceneManager *this)
{
  return *((unsigned __int8 *)this + 130);
}

void re::AudioMultiSceneManager::triggerNotification(uint64_t a1, int a2)
{
  v6[4] = *MEMORY[0x263EF8340];
  for (unint64_t i = *(uint64_t ***)(a1 + 72); i; unint64_t i = (uint64_t **)*i)
  {
    re::AudioManager_PHASE::triggerNotification((re::AudioManager *)i[3], a2);
    if (a2 == 3)
    {
      uint64_t v5 = (uint64_t)i[3];
      v6[0] = &unk_26E6F95E8;
      v6[1] = a1;
      v6[3] = v6;
      re::AudioManager_PHASE::loadAssetsOnReset(v5, (uint64_t)v6);
      std::__function::__value_func<std::unordered_map<unsigned long long,std::shared_ptr<re::PersistedAssetData>> ()(void)>::~__value_func[abi:ne180100](v6);
    }
  }
}

void re::AudioMultiSceneManager::forceShutdown(re::AudioMultiSceneManager *this)
{
  for (unint64_t i = (void *)*((void *)this + 9); i; unint64_t i = (void *)*i)
  {
    uint64_t v2 = i[3];
    [**(id **)(v2 + 312) cancel];
    std::__hash_table<std::__hash_value_type<REAudioServicesNotificationCallbackConfiguration,void({block_pointer} {__strong})(void)>,std::__unordered_map_hasher<REAudioServicesNotificationCallbackConfiguration,std::__hash_value_type<REAudioServicesNotificationCallbackConfiguration,void({block_pointer} {__strong})(void)>,REAudioServicesNotificationCallbackRegistry::ConfigHasher,std::equal_to<REAudioServicesNotificationCallbackConfiguration>,true>,std::__unordered_map_equal<REAudioServicesNotificationCallbackConfiguration,std::__hash_value_type<REAudioServicesNotificationCallbackConfiguration,void({block_pointer} {__strong})(void)>,std::equal_to<REAudioServicesNotificationCallbackConfiguration>,REAudioServicesNotificationCallbackRegistry::ConfigHasher,true>,std::allocator<std::__hash_value_type<REAudioServicesNotificationCallbackConfiguration,void({block_pointer} {__strong})(void)>>>::clear(v2 + 320);
  }
}

uint64_t re::AudioMultiSceneManager::updateEngine(uint64_t this)
{
  for (unint64_t i = *(uint64_t ***)(this + 72); i; unint64_t i = (uint64_t **)*i)
    this = re::AudioManager_PHASE::updateEngine((re::AudioManager_PHASE *)i[3]);
  return this;
}

void re::AudioMultiSceneManager::loadAudio(uint64_t a1, unint64_t *a2)
{
  v48[4] = *MEMORY[0x263EF8340];
  if (*(void *)(a1 + 80))
  {
    uint64_t v5 = *(void **)(a1 + 72);
    uint64_t v6 = v5[2];
    uint64_t v8 = a2[1];
    uint64_t v7 = (std::__shared_weak_count *)a2[2];
    if (v7)
    {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v5 = *(void **)(a1 + 72);
      if (!v5) {
        goto LABEL_24;
      }
    }
    do
    {
      while (1)
      {
        uint64_t v9 = v5[3];
        if (v5[2] != v6) {
          break;
        }
        if (v7)
        {
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
          re::AudioMultiSceneManager::loadAudioToSingleService(a1, v9, v8, v7);
          std::__shared_weak_count::__release_shared[abi:nn180100](v7);
          uint64_t v5 = (void *)*v5;
          if (!v5) {
            goto LABEL_24;
          }
        }
        else
        {
          re::AudioMultiSceneManager::loadAudioToSingleService(a1, v5[3], v8, 0);
          uint64_t v5 = (void *)*v5;
          if (!v5) {
            return;
          }
        }
      }
      uint64_t v45 = v8;
      float32x4_t v46 = v7;
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      v48[0] = &unk_26E6F9668;
      v48[3] = v48;
      re::AudioManager_PHASE::loadAudio(v9, &v45, (uint64_t)v48);
      std::__function::__value_func<void ()(std::shared_ptr<re::PersistedAssetData>)>::~__value_func[abi:nn180100](v48);
      if (v46) {
        std::__shared_weak_count::__release_shared[abi:nn180100](v46);
      }
      uint64_t v5 = (void *)*v5;
    }
    while (v5);
    if (v7) {
LABEL_24:
    }
      std::__shared_weak_count::__release_shared[abi:nn180100](v7);
    return;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 180));
  int v11 = *re::audioLogObjects(v10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__n128 buf = 0;
    _os_log_impl(&dword_233120000, v11, OS_LOG_TYPE_DEFAULT, "[RE] [AudioMultiSceneManager] loadAudio called with no audio service. Caching the payload.", buf, 2u);
  }
  unint64_t v13 = a2[1];
  uint64_t v12 = (std::__shared_weak_count *)a2[2];
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v14 = *a2;
  unint64_t v15 = *(void *)(a1 + 144);
  if (v15)
  {
    uint8x8_t v16 = (uint8x8_t)vcnt_s8((int8x8_t)v15);
    v16.i16[0] = vaddlv_u8(v16);
    if (v16.u32[0] > 1uLL)
    {
      unint64_t v2 = *a2;
      if (v15 <= v14) {
        unint64_t v2 = v14 % v15;
      }
    }
    else
    {
      unint64_t v2 = (v15 - 1) & v14;
    }
    uint64_t v17 = *(void **)(*(void *)(a1 + 136) + 8 * v2);
    if (v17)
    {
      uint64_t v18 = (void *)*v17;
      if (*v17)
      {
        do
        {
          unint64_t v19 = v18[1];
          if (v19 == v14)
          {
            if (v18[2] == v14) {
              goto LABEL_95;
            }
          }
          else
          {
            if (v16.u32[0] > 1uLL)
            {
              if (v19 >= v15) {
                v19 %= v15;
              }
            }
            else
            {
              v19 &= v15 - 1;
            }
            if (v19 != v2) {
              break;
            }
          }
          uint64_t v18 = (void *)*v18;
        }
        while (v18);
      }
    }
  }
  uint64_t v20 = (void *)(a1 + 152);
  uint64_t v18 = operator new(0x28uLL);
  *uint64_t v18 = 0;
  v18[1] = v14;
  v18[3] = 0;
  v18[4] = 0;
  void v18[2] = v14;
  float v21 = (float)(unint64_t)(*(void *)(a1 + 160) + 1);
  float v22 = *(float *)(a1 + 168);
  if (!v15 || (float)(v22 * (float)v15) < v21)
  {
    BOOL v23 = 1;
    if (v15 >= 3) {
      BOOL v23 = (v15 & (v15 - 1)) != 0;
    }
    unint64_t v24 = v23 | (2 * v15);
    unint64_t v25 = vcvtps_u32_f32(v21 / v22);
    if (v24 <= v25) {
      int8x8_t prime = (int8x8_t)v25;
    }
    else {
      int8x8_t prime = (int8x8_t)v24;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v15 = *(void *)(a1 + 144);
    }
    if (*(void *)&prime > v15) {
      goto LABEL_51;
    }
    if (*(void *)&prime < v15)
    {
      unint64_t v33 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 160) / *(float *)(a1 + 168));
      if (v15 < 3 || (uint8x8_t v34 = (uint8x8_t)vcnt_s8((int8x8_t)v15), v34.i16[0] = vaddlv_u8(v34), v34.u32[0] > 1uLL))
      {
        unint64_t v33 = std::__next_prime(v33);
      }
      else
      {
        uint64_t v35 = 1 << -(char)__clz(v33 - 1);
        if (v33 >= 2) {
          unint64_t v33 = v35;
        }
      }
      if (*(void *)&prime <= v33) {
        int8x8_t prime = (int8x8_t)v33;
      }
      if (*(void *)&prime >= v15)
      {
        unint64_t v15 = *(void *)(a1 + 144);
      }
      else
      {
        if (prime)
        {
LABEL_51:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          uint64_t v27 = operator new(8 * *(void *)&prime);
          long long v28 = *(void **)(a1 + 136);
          *(void *)(a1 + 136) = v27;
          if (v28) {
            operator delete(v28);
          }
          uint64_t v29 = 0;
          *(int8x8_t *)(a1 + 144) = prime;
          do
            *(void *)(*(void *)(a1 + 136) + 8 * v29++) = 0;
          while (*(void *)&prime != v29);
          id v30 = (void *)*v20;
          if (*v20)
          {
            unint64_t v31 = v30[1];
            uint8x8_t v32 = (uint8x8_t)vcnt_s8(prime);
            v32.i16[0] = vaddlv_u8(v32);
            if (v32.u32[0] > 1uLL)
            {
              if (v31 >= *(void *)&prime) {
                v31 %= *(void *)&prime;
              }
            }
            else
            {
              v31 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)(a1 + 136) + 8 * v31) = v20;
            uint64_t v36 = (void *)*v30;
            if (*v30)
            {
              do
              {
                unint64_t v37 = v36[1];
                if (v32.u32[0] > 1uLL)
                {
                  if (v37 >= *(void *)&prime) {
                    v37 %= *(void *)&prime;
                  }
                }
                else
                {
                  v37 &= *(void *)&prime - 1;
                }
                if (v37 != v31)
                {
                  uint64_t v38 = *(void *)(a1 + 136);
                  if (!*(void *)(v38 + 8 * v37))
                  {
                    *(void *)(v38 + 8 * v37) = v30;
                    goto LABEL_76;
                  }
                  *id v30 = *v36;
                  void *v36 = **(void **)(*(void *)(a1 + 136) + 8 * v37);
                  **(void **)(*(void *)(a1 + 136) + 8 * v37) = v36;
                  uint64_t v36 = v30;
                }
                unint64_t v37 = v31;
LABEL_76:
                id v30 = v36;
                uint64_t v36 = (void *)*v36;
                unint64_t v31 = v37;
              }
              while (v36);
            }
          }
          unint64_t v15 = (unint64_t)prime;
          goto LABEL_80;
        }
        float32x4_t v44 = *(void **)(a1 + 136);
        *(void *)(a1 + 136) = 0;
        if (v44) {
          operator delete(v44);
        }
        unint64_t v15 = 0;
        *(void *)(a1 + 144) = 0;
      }
    }
LABEL_80:
    if ((v15 & (v15 - 1)) != 0)
    {
      if (v15 <= v14) {
        unint64_t v2 = v14 % v15;
      }
      else {
        unint64_t v2 = v14;
      }
    }
    else
    {
      unint64_t v2 = (v15 - 1) & v14;
    }
  }
  uint64_t v39 = *(void *)(a1 + 136);
  uint64_t v40 = *(void **)(v39 + 8 * v2);
  if (v40)
  {
    *uint64_t v18 = *v40;
  }
  else
  {
    uint64_t v41 = (void *)*v20;
    *uint64_t v18 = *v20;
    *uint64_t v20 = v18;
    *(void *)(v39 + 8 * v2) = v20;
    if (!v41) {
      goto LABEL_94;
    }
    unint64_t v42 = v41[1];
    if ((v15 & (v15 - 1)) != 0)
    {
      if (v42 >= v15) {
        v42 %= v15;
      }
    }
    else
    {
      v42 &= v15 - 1;
    }
    uint64_t v40 = (void *)(*(void *)(a1 + 136) + 8 * v42);
  }
  *uint64_t v40 = v18;
LABEL_94:
  ++*(void *)(a1 + 160);
LABEL_95:
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  float32x4_t v43 = (std::__shared_weak_count *)v18[4];
  v18[3] = v13;
  v18[4] = v12;
  if (v43) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v43);
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v12);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 180));
}

void re::AudioMultiSceneManager::unloadAudio(int8x8_t *this, unint64_t a2)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  unint64_t v28 = a2;
  if (this[10])
  {
    uint64_t v4 = (void *)this[9];
    if (!v4) {
      goto LABEL_12;
    }
    char v5 = 0;
    do
    {
      while (1)
      {
        id v6 = **(id **)(v4[3] + 312);
        uint64_t v7 = (re *)[v6 isCancelled];
        if (!v7) {
          break;
        }
        unint64_t v10 = *re::audioLogObjects(v7);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          uint64_t v11 = v4[3];
          *(_DWORD *)block = 134218240;
          *(void *)&block[4] = a2;
          *(_WORD *)&block[12] = 2048;
          *(void *)&block[14] = v11;
          _os_log_error_impl(&dword_233120000, v10, OS_LOG_TYPE_ERROR, "[RE] [AudioMultiSceneManager] REEngine was deallocated. Cannot unload audio asset: %llu from audioService %p", block, 0x16u);
        }

        uint64_t v4 = (void *)*v4;
        char v5 = 1;
        if (!v4) {
          return;
        }
      }
      uint64_t v8 = v4[3];
      uint64_t v9 = *(NSObject **)(v8 + 536);
      *(void *)block = MEMORY[0x263EF8330];
      *(void *)&block[8] = 3221225472;
      *(void *)&block[16] = ___ZN2re18AudioManager_PHASE11unloadAssetEy_block_invoke;
      id v30 = &__block_descriptor_48_e5_v8__0l;
      uint64_t v31 = v8;
      unint64_t v32 = a2;
      dispatch_async(v9, block);

      uint64_t v4 = (void *)*v4;
    }
    while (v4);
    if ((v5 & 1) == 0)
    {
LABEL_12:
      uint64_t v12 = (os_unfair_lock_s *)&this[22];
      os_unfair_lock_lock((os_unfair_lock_t)&this[22]);
      std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<re::audio::REPHASEEntity>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<re::audio::REPHASEEntity>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<re::audio::REPHASEEntity>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<re::audio::REPHASEEntity>>>>::__erase_unique<unsigned long long>(&this[2], &v28);
      goto LABEL_61;
    }
    return;
  }
  uint64_t v12 = (os_unfair_lock_s *)&this[22] + 1;
  os_unfair_lock_lock((os_unfair_lock_t)&this[22] + 1);
  int8x8_t v13 = this[18];
  if (!*(void *)&v13) {
    goto LABEL_61;
  }
  uint8x8_t v14 = (uint8x8_t)vcnt_s8(v13);
  v14.i16[0] = vaddlv_u8(v14);
  if (v14.u32[0] > 1uLL)
  {
    unint64_t v15 = a2;
    if (*(void *)&v13 <= a2) {
      unint64_t v15 = a2 % *(void *)&v13;
    }
  }
  else
  {
    unint64_t v15 = (*(void *)&v13 - 1) & a2;
  }
  uint8x8_t v16 = *(int8x8_t ***)(*(void *)&this[17] + 8 * v15);
  if (!v16) {
    goto LABEL_61;
  }
  uint64_t v17 = *v16;
  if (!*v16) {
    goto LABEL_61;
  }
  uint64_t v18 = *(void *)&v13 - 1;
  while (1)
  {
    unint64_t v19 = (unint64_t)v17[1];
    if (v19 == a2) {
      break;
    }
    if (v14.u32[0] > 1uLL)
    {
      if (v19 >= *(void *)&v13) {
        v19 %= *(void *)&v13;
      }
    }
    else
    {
      v19 &= v18;
    }
    if (v19 != v15) {
      goto LABEL_61;
    }
LABEL_29:
    uint64_t v17 = (int8x8_t *)*v17;
    if (!v17) {
      goto LABEL_61;
    }
  }
  if (*(void *)&v17[2] != a2) {
    goto LABEL_29;
  }
  uint64_t v20 = (int8x8_t *)*v17;
  if (v14.u32[0] > 1uLL)
  {
    if (v19 >= *(void *)&v13) {
      v19 %= *(void *)&v13;
    }
  }
  else
  {
    v19 &= v18;
  }
  int8x8_t v21 = this[17];
  float v22 = *(int8x8_t **)(*(void *)&v21 + 8 * v19);
  do
  {
    BOOL v23 = v22;
    float v22 = (int8x8_t *)*v22;
  }
  while (v22 != v17);
  if (v23 == &this[19]) {
    goto LABEL_48;
  }
  unint64_t v24 = (unint64_t)v23[1];
  if (v14.u32[0] > 1uLL)
  {
    if (v24 >= *(void *)&v13) {
      v24 %= *(void *)&v13;
    }
  }
  else
  {
    v24 &= v18;
  }
  if (v24 == v19)
  {
LABEL_50:
    if (v20)
    {
      unint64_t v25 = (unint64_t)v20[1];
      goto LABEL_52;
    }
  }
  else
  {
LABEL_48:
    if (!v20) {
      goto LABEL_49;
    }
    unint64_t v25 = (unint64_t)v20[1];
    if (v14.u32[0] > 1uLL)
    {
      unint64_t v26 = (unint64_t)v20[1];
      if (v25 >= *(void *)&v13) {
        unint64_t v26 = v25 % *(void *)&v13;
      }
    }
    else
    {
      unint64_t v26 = v25 & v18;
    }
    if (v26 != v19)
    {
LABEL_49:
      *(void *)(*(void *)&v21 + 8 * v19) = 0;
      uint64_t v20 = (int8x8_t *)*v17;
      goto LABEL_50;
    }
LABEL_52:
    if (v14.u32[0] > 1uLL)
    {
      if (v25 >= *(void *)&v13) {
        v25 %= *(void *)&v13;
      }
    }
    else
    {
      v25 &= v18;
    }
    if (v25 != v19)
    {
      *(void *)(*(void *)&this[17] + 8 * v25) = v23;
      uint64_t v20 = (int8x8_t *)*v17;
    }
  }
  *BOOL v23 = (int8x8_t)v20;
  *uint64_t v17 = 0;
  --*(void *)&this[20];
  uint64_t v27 = (std::__shared_weak_count *)v17[4];
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v27);
  }
  operator delete(v17);
LABEL_61:
  os_unfair_lock_unlock(v12);
}

void re::AudioMultiSceneManager::simulateMediaServicesLostNotification(re::AudioMultiSceneManager *this)
{
  unint64_t v2 = (void *)*((void *)this + 1);
  id v3 = objc_alloc(MEMORY[0x263F089F8]);
  id v5 = [*((id *)this + 1) audioSessionToFollow];
  uint64_t v4 = (void *)[v3 initWithName:@"AVAudioSessionMediaServicesWereLostNotification" object:v5 userInfo:MEMORY[0x263EFFA78]];
  [v2 servicesLost:v4];
}

void re::AudioMultiSceneManager::simulateMediaServicesResetNotification(re::AudioMultiSceneManager *this)
{
  unint64_t v2 = (void *)*((void *)this + 1);
  id v3 = objc_alloc(MEMORY[0x263F089F8]);
  id v5 = [*((id *)this + 1) audioSessionToFollow];
  uint64_t v4 = (void *)[v3 initWithName:@"AVAudioSessionMediaServicesWereResetNotification" object:v5 userInfo:MEMORY[0x263EFFA78]];
  [v2 servicesReset:v4];
}

BOOL re::AudioMultiSceneManager::assetIsLoaded(os_unfair_lock_s *this, unint64_t a2)
{
  unint64_t v6 = a2;
  id v3 = this + 44;
  os_unfair_lock_lock(this + 44);
  BOOL v4 = std::__hash_table<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>>>::find<unsigned long long>(&this[4]._os_unfair_lock_opaque, &v6) != 0;
  os_unfair_lock_unlock(v3);
  return v4;
}

void re::internal::Callable<re::AudioMultiSceneManager::configureEnterFramePhase(unsigned long const&,std::function<void ()(re::Scheduler::TaskDescriptor)>)::$_0,void ()(float)>::~Callable()
{
}

uint64_t re::internal::Callable<re::AudioMultiSceneManager::configureEnterFramePhase(unsigned long const&,std::function<void ()(re::Scheduler::TaskDescriptor)>)::$_0,void ()(float)>::operator()(uint64_t a1)
{
  re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v4);
  for (unint64_t i = *(uint64_t ***)(*(void *)(a1 + 8) + 16); i; unint64_t i = (uint64_t **)*i)
    re::AudioManager_PHASE::beforeFrameUpdate((re::AudioManager_PHASE *)i[3]);
  return re::ProfilerTimeGuard<(re::ProfilerStatistic)22>::end((uint64_t)v4);
}

void *re::internal::Callable<re::AudioMultiSceneManager::configureEnterFramePhase(unsigned long const&,std::function<void ()(re::Scheduler::TaskDescriptor)>)::$_0,void ()(float)>::cloneInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &unk_26E6F94A8;
  a2[1] = v2;
  return a2;
}

void *re::internal::Callable<re::AudioMultiSceneManager::configureEnterFramePhase(unsigned long const&,std::function<void ()(re::Scheduler::TaskDescriptor)>)::$_0,void ()(float)>::moveInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &unk_26E6F94A8;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<re::AudioMultiSceneManager::configureEnterFramePhase(unsigned long const&,std::function<void ()(re::Scheduler::TaskDescriptor)>)::$_0,void ()(float)>::size()
{
  return 16;
}

uint64_t re::ProfilerTimeGuard<(re::ProfilerStatistic)22>::end(uint64_t result)
{
  if (*(void *)result && *(void *)(*(void *)result + 152))
  {
    uint64_t v1 = (void *)result;
    uint64_t result = mach_absolute_time();
    uint64_t v2 = *v1;
    id v3 = *(int64x2_t **)(*v1 + 152);
    if (v3)
    {
      uint64_t v4 = result - v1[1];
      uint64_t v5 = v3[92].u64[0];
      if (v5 >= v4) {
        uint64_t v5 = result - v1[1];
      }
      v3[92].i64[0] = v5;
      unint64_t v6 = v3[92].u64[1];
      if (v6 <= v4) {
        unint64_t v6 = v4;
      }
      v3[92].i64[1] = v6;
      int64x2_t v7 = vdupq_n_s64(1uLL);
      v7.i64[0] = v4;
      v3[93] = vaddq_s64(v3[93], v7);
      *(unsigned char *)(v2 + 184) = 0;
    }
    *uint64_t v1 = 0;
  }
  return result;
}

void re::internal::Callable<re::AudioMultiSceneManager::configureCommitPhase(unsigned long const&,std::function<void ()(re::Scheduler::TaskDescriptor)>)::$_0,void ()(float)>::~Callable()
{
}

uint64_t re::internal::Callable<re::AudioMultiSceneManager::configureCommitPhase(unsigned long const&,std::function<void ()(re::Scheduler::TaskDescriptor)>)::$_0,void ()(float)>::operator()(uint64_t a1, float *a2)
{
  float v3 = *a2;
  re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v6);
  uint64_t v4 = *(void *)(*(void *)(a1 + 8) + 16);
  if (v4) {
    re::AudioManager_PHASE::afterFrameUpdate(*(re::AudioManager_PHASE **)(v4 + 24), v3);
  }
  return re::ProfilerTimeGuard<(re::ProfilerStatistic)22>::end((uint64_t)v6);
}

void *re::internal::Callable<re::AudioMultiSceneManager::configureCommitPhase(unsigned long const&,std::function<void ()(re::Scheduler::TaskDescriptor)>)::$_0,void ()(float)>::cloneInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &unk_26E6F9500;
  a2[1] = v2;
  return a2;
}

void *re::internal::Callable<re::AudioMultiSceneManager::configureCommitPhase(unsigned long const&,std::function<void ()(re::Scheduler::TaskDescriptor)>)::$_0,void ()(float)>::moveInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &unk_26E6F9500;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<re::AudioMultiSceneManager::configureCommitPhase(unsigned long const&,std::function<void ()(re::Scheduler::TaskDescriptor)>)::$_0,void ()(float)>::size()
{
  return 16;
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<re::AudioManager_PHASE>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<re::AudioManager_PHASE>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<re::AudioManager_PHASE>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<re::AudioManager_PHASE>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t *a1, unint64_t a2, uint64_t *a3)
{
  unint64_t v7 = a1[1];
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    uint64_t v9 = *(void ***)(*a1 + 8 * v3);
    if (v9)
    {
      for (unint64_t i = *v9; i; unint64_t i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == a2)
        {
          if (i[2] == a2) {
            return i;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t v12 = a1 + 2;
  unint64_t i = operator new(0x28uLL);
  *unint64_t i = 0;
  i[1] = a2;
  uint64_t v13 = *a3;
  i[3] = 0;
  i[4] = 0;
  i[2] = v13;
  float v14 = (float)(unint64_t)(a1[3] + 1);
  float v15 = *((float *)a1 + 8);
  if (!v7 || (float)(v15 * (float)v7) < v14)
  {
    BOOL v16 = 1;
    if (v7 >= 3) {
      BOOL v16 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v7);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      int8x8_t prime = (int8x8_t)v18;
    }
    else {
      int8x8_t prime = (int8x8_t)v17;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v7 = a1[1];
    }
    if (*(void *)&prime > v7) {
      goto LABEL_30;
    }
    if (*(void *)&prime < v7)
    {
      unint64_t v26 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v7 < 3 || (uint8x8_t v27 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        unint64_t v26 = std::__next_prime(v26);
      }
      else
      {
        uint64_t v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2) {
          unint64_t v26 = v28;
        }
      }
      if (*(void *)&prime <= v26) {
        int8x8_t prime = (int8x8_t)v26;
      }
      if (*(void *)&prime >= v7)
      {
        unint64_t v7 = a1[1];
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          uint64_t v20 = operator new(8 * *(void *)&prime);
          int8x8_t v21 = (void *)*a1;
          *a1 = (uint64_t)v20;
          if (v21) {
            operator delete(v21);
          }
          uint64_t v22 = 0;
          a1[1] = (uint64_t)prime;
          do
            *(void *)(*a1 + 8 * v22++) = 0;
          while (*(void *)&prime != v22);
          BOOL v23 = (void *)*v12;
          if (*v12)
          {
            unint64_t v24 = v23[1];
            uint8x8_t v25 = (uint8x8_t)vcnt_s8(prime);
            v25.i16[0] = vaddlv_u8(v25);
            if (v25.u32[0] > 1uLL)
            {
              if (v24 >= *(void *)&prime) {
                v24 %= *(void *)&prime;
              }
            }
            else
            {
              v24 &= *(void *)&prime - 1;
            }
            *(void *)(*a1 + 8 * v24) = v12;
            uint64_t v29 = (void *)*v23;
            if (*v23)
            {
              do
              {
                unint64_t v30 = v29[1];
                if (v25.u32[0] > 1uLL)
                {
                  if (v30 >= *(void *)&prime) {
                    v30 %= *(void *)&prime;
                  }
                }
                else
                {
                  v30 &= *(void *)&prime - 1;
                }
                if (v30 != v24)
                {
                  if (!*(void *)(*a1 + 8 * v30))
                  {
                    *(void *)(*a1 + 8 * v3ArcSharedObject::ArcSharedObject(this, 0) = v23;
                    goto LABEL_55;
                  }
                  *BOOL v23 = *v29;
                  *uint64_t v29 = **(void **)(*a1 + 8 * v30);
                  **(void **)(*a1 + 8 * v3ArcSharedObject::ArcSharedObject(this, 0) = v29;
                  uint64_t v29 = v23;
                }
                unint64_t v30 = v24;
LABEL_55:
                BOOL v23 = v29;
                uint64_t v29 = (void *)*v29;
                unint64_t v24 = v30;
              }
              while (v29);
            }
          }
          unint64_t v7 = (unint64_t)prime;
          goto LABEL_59;
        }
        uint64_t v35 = (void *)*a1;
        *a1 = 0;
        if (v35) {
          operator delete(v35);
        }
        unint64_t v7 = 0;
        a1[1] = 0;
      }
    }
LABEL_59:
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
      else {
        unint64_t v3 = a2;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
  }
  uint64_t v31 = *a1;
  unint64_t v32 = *(void **)(*a1 + 8 * v3);
  if (v32)
  {
    *unint64_t i = *v32;
LABEL_72:
    void *v32 = i;
    goto LABEL_73;
  }
  *unint64_t i = *v12;
  *uint64_t v12 = i;
  *(void *)(v31 + 8 * v3) = v12;
  if (*i)
  {
    unint64_t v33 = *(void *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v33 >= v7) {
        v33 %= v7;
      }
    }
    else
    {
      v33 &= v7 - 1;
    }
    unint64_t v32 = (void *)(*a1 + 8 * v33);
    goto LABEL_72;
  }
LABEL_73:
  ++a1[3];
  return i;
}

void std::__function::__func<re::AudioMultiSceneManager::registerScene(re::ecs2::Scene const*)::$_0,std::allocator<re::AudioMultiSceneManager::registerScene(re::ecs2::Scene const*)::$_0>,std::unordered_map<unsigned long long,std::shared_ptr<re::PersistedAssetData>> ()(void)>::~__func()
{
}

void *std::__function::__func<re::AudioMultiSceneManager::registerScene(re::ecs2::Scene const*)::$_0,std::allocator<re::AudioMultiSceneManager::registerScene(re::ecs2::Scene const*)::$_0>,std::unordered_map<unsigned long long,std::shared_ptr<re::PersistedAssetData>> ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26E6F9558;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<re::AudioMultiSceneManager::registerScene(re::ecs2::Scene const*)::$_0,std::allocator<re::AudioMultiSceneManager::registerScene(re::ecs2::Scene const*)::$_0>,std::unordered_map<unsigned long long,std::shared_ptr<re::PersistedAssetData>> ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26E6F9558;
  a2[1] = v2;
  return result;
}

void std::__function::__func<re::AudioMultiSceneManager::registerScene(re::ecs2::Scene const*)::$_0,std::allocator<re::AudioMultiSceneManager::registerScene(re::ecs2::Scene const*)::$_0>,std::unordered_map<unsigned long long,std::shared_ptr<re::PersistedAssetData>> ()(void)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(os_unfair_lock_s **)(a1 + 8);
  os_unfair_lock_lock(v3 + 44);
  std::unordered_map<unsigned long long,std::shared_ptr<re::PersistedAssetData>>::unordered_map(a2, (uint64_t)&v3[4]);
  os_unfair_lock_unlock(v3 + 44);
}

uint64_t std::__function::__func<re::AudioMultiSceneManager::registerScene(re::ecs2::Scene const*)::$_0,std::allocator<re::AudioMultiSceneManager::registerScene(re::ecs2::Scene const*)::$_0>,std::unordered_map<unsigned long long,std::shared_ptr<re::PersistedAssetData>> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::AudioMultiSceneManager::registerScene(re::ecs2::Scene const*)::$_0,std::allocator<re::AudioMultiSceneManager::registerScene(re::ecs2::Scene const*)::$_0>,std::unordered_map<unsigned long long,std::shared_ptr<re::PersistedAssetData>> ()(void)>::target_type()
{
}

uint64_t std::unordered_map<unsigned long long,std::shared_ptr<re::PersistedAssetData>>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>>>::__rehash<true>(a1, *(void *)(a2 + 8));
  for (unint64_t i = *(void **)(a2 + 16); i; unint64_t i = (void *)*i)
    std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<re::PersistedAssetData>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<re::PersistedAssetData>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<re::PersistedAssetData>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<re::PersistedAssetData>>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long const,std::shared_ptr<re::PersistedAssetData>> const&>(a1, i + 2, i + 2);
  return a1;
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<re::PersistedAssetData>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<re::PersistedAssetData>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<re::PersistedAssetData>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<re::PersistedAssetData>>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long const,std::shared_ptr<re::PersistedAssetData>> const&>(uint64_t a1, unint64_t *a2, void *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    uint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (unint64_t i = *v9; i; unint64_t i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == v6) {
            return i;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  unint64_t i = operator new(0x28uLL);
  *unint64_t i = 0;
  i[1] = v6;
  uint64_t v12 = a3[1];
  i[2] = *a3;
  i[3] = v12;
  uint64_t v13 = a3[2];
  i[4] = v13;
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v7 || (float)(v15 * (float)v7) < v14)
  {
    BOOL v16 = 1;
    if (v7 >= 3) {
      BOOL v16 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v7);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>>>::__rehash<true>(a1, v19);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v20 = *(void *)a1;
  int8x8_t v21 = *(void **)(*(void *)a1 + 8 * v3);
  if (v21)
  {
    *unint64_t i = *v21;
LABEL_40:
    *int8x8_t v21 = i;
    goto LABEL_41;
  }
  *unint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v20 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v22 = *(void *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v22 >= v7) {
        v22 %= v7;
      }
    }
    else
    {
      v22 &= v7 - 1;
    }
    int8x8_t v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_40;
  }
LABEL_41:
  ++*(void *)(a1 + 24);
  return i;
}

void std::__function::__func<re::AudioMultiSceneManager::triggerNotification(REAudioNotificationType)::$_0,std::allocator<re::AudioMultiSceneManager::triggerNotification(REAudioNotificationType)::$_0>,std::unordered_map<unsigned long long,std::shared_ptr<re::PersistedAssetData>> ()(void)>::~__func()
{
}

void *std::__function::__func<re::AudioMultiSceneManager::triggerNotification(REAudioNotificationType)::$_0,std::allocator<re::AudioMultiSceneManager::triggerNotification(REAudioNotificationType)::$_0>,std::unordered_map<unsigned long long,std::shared_ptr<re::PersistedAssetData>> ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26E6F95E8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<re::AudioMultiSceneManager::triggerNotification(REAudioNotificationType)::$_0,std::allocator<re::AudioMultiSceneManager::triggerNotification(REAudioNotificationType)::$_0>,std::unordered_map<unsigned long long,std::shared_ptr<re::PersistedAssetData>> ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26E6F95E8;
  a2[1] = v2;
  return result;
}

void std::__function::__func<re::AudioMultiSceneManager::triggerNotification(REAudioNotificationType)::$_0,std::allocator<re::AudioMultiSceneManager::triggerNotification(REAudioNotificationType)::$_0>,std::unordered_map<unsigned long long,std::shared_ptr<re::PersistedAssetData>> ()(void)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(os_unfair_lock_s **)(a1 + 8);
  os_unfair_lock_lock(v3 + 44);
  std::unordered_map<unsigned long long,std::shared_ptr<re::PersistedAssetData>>::unordered_map(a2, (uint64_t)&v3[4]);
  os_unfair_lock_unlock(v3 + 44);
}

uint64_t std::__function::__func<re::AudioMultiSceneManager::triggerNotification(REAudioNotificationType)::$_0,std::allocator<re::AudioMultiSceneManager::triggerNotification(REAudioNotificationType)::$_0>,std::unordered_map<unsigned long long,std::shared_ptr<re::PersistedAssetData>> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::AudioMultiSceneManager::triggerNotification(REAudioNotificationType)::$_0,std::allocator<re::AudioMultiSceneManager::triggerNotification(REAudioNotificationType)::$_0>,std::unordered_map<unsigned long long,std::shared_ptr<re::PersistedAssetData>> ()(void)>::target_type()
{
}

void std::__function::__func<re::AudioMultiSceneManager::loadAudio(re::audio::AudioAssetPayloadWrapper &)::$_0,std::allocator<re::AudioMultiSceneManager::loadAudio(re::audio::AudioAssetPayloadWrapper &)::$_0>,void ()(std::shared_ptr<re::PersistedAssetData>)>::~__func()
{
}

void *std::__function::__func<re::AudioMultiSceneManager::loadAudio(re::audio::AudioAssetPayloadWrapper &)::$_0,std::allocator<re::AudioMultiSceneManager::loadAudio(re::audio::AudioAssetPayloadWrapper &)::$_0>,void ()(std::shared_ptr<re::PersistedAssetData>)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26E6F9668;
  return result;
}

void std::__function::__func<re::AudioMultiSceneManager::loadAudio(re::audio::AudioAssetPayloadWrapper &)::$_0,std::allocator<re::AudioMultiSceneManager::loadAudio(re::audio::AudioAssetPayloadWrapper &)::$_0>,void ()(std::shared_ptr<re::PersistedAssetData>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E6F9668;
}

void std::__function::__func<re::AudioMultiSceneManager::loadAudio(re::audio::AudioAssetPayloadWrapper &)::$_0,std::allocator<re::AudioMultiSceneManager::loadAudio(re::audio::AudioAssetPayloadWrapper &)::$_0>,void ()(std::shared_ptr<re::PersistedAssetData>)>::operator()(uint64_t a1, void *a2)
{
  uint64_t v2 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v2);
  }
}

uint64_t std::__function::__func<re::AudioMultiSceneManager::loadAudio(re::audio::AudioAssetPayloadWrapper &)::$_0,std::allocator<re::AudioMultiSceneManager::loadAudio(re::audio::AudioAssetPayloadWrapper &)::$_0>,void ()(std::shared_ptr<re::PersistedAssetData>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::AudioMultiSceneManager::loadAudio(re::audio::AudioAssetPayloadWrapper &)::$_0,std::allocator<re::AudioMultiSceneManager::loadAudio(re::audio::AudioAssetPayloadWrapper &)::$_0>,void ()(std::shared_ptr<re::PersistedAssetData>)>::target_type()
{
}

void *std::__function::__value_func<void ()(std::shared_ptr<re::PersistedAssetData>)>::~__value_func[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<re::AudioMultiSceneManager::loadAudioToSingleService(re::AudioService *,std::shared_ptr<re::AudioAssetPayload>)::$_0,std::allocator<re::AudioMultiSceneManager::loadAudioToSingleService(re::AudioService *,std::shared_ptr<re::AudioAssetPayload>)::$_0>,void ()(std::shared_ptr<re::PersistedAssetData>)>::~__func()
{
}

__n128 std::__function::__func<re::AudioMultiSceneManager::loadAudioToSingleService(re::AudioService *,std::shared_ptr<re::AudioAssetPayload>)::$_0,std::allocator<re::AudioMultiSceneManager::loadAudioToSingleService(re::AudioService *,std::shared_ptr<re::AudioAssetPayload>)::$_0>,void ()(std::shared_ptr<re::PersistedAssetData>)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26E6F96F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = result;
  return result;
}

__n128 std::__function::__func<re::AudioMultiSceneManager::loadAudioToSingleService(re::AudioService *,std::shared_ptr<re::AudioAssetPayload>)::$_0,std::allocator<re::AudioMultiSceneManager::loadAudioToSingleService(re::AudioService *,std::shared_ptr<re::AudioAssetPayload>)::$_0>,void ()(std::shared_ptr<re::PersistedAssetData>)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6F96F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = result;
  return result;
}

void std::__function::__func<re::AudioMultiSceneManager::loadAudioToSingleService(re::AudioService *,std::shared_ptr<re::AudioAssetPayload>)::$_0,std::allocator<re::AudioMultiSceneManager::loadAudioToSingleService(re::AudioService *,std::shared_ptr<re::AudioAssetPayload>)::$_0>,void ()(std::shared_ptr<re::PersistedAssetData>)>::operator()(re *a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void **)a2;
  uint64_t v2 = *(std::__shared_weak_count **)(a2 + 8);
  *(void *)a2 = 0;
  *(void *)(a2 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
  if (!v3 || !*v3)
  {
    unint64_t v7 = *re::audioLogObjects(a1);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = v3[13];
      *(_DWORD *)__n128 buf = 134217984;
      *(void *)&uint8_t buf[4] = v8;
      _os_log_error_impl(&dword_233120000, v7, OS_LOG_TYPE_ERROR, "[RE] [AudioMultiSceneManager] Cannot add asset: %llu to assetGenerators with a null generator block.", buf, 0xCu);
      if (!v2) {
        return;
      }
    }
    else if (!v2)
    {
      return;
    }
    goto LABEL_11;
  }
  uint64_t v4 = (os_unfair_lock_s *)*((void *)a1 + 2);
  os_unfair_lock_lock(v4 + 44);
  unint64_t v9 = v3[13];
  *(void *)__n128 buf = &v9;
  uint64_t v5 = std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<re::PersistedAssetData>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<re::PersistedAssetData>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<re::PersistedAssetData>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<re::PersistedAssetData>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>((uint64_t)&v4[4], &v9, (uint64_t)&std::piecewise_construct, (void **)buf);
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v6 = (std::__shared_weak_count *)v5[4];
  void v5[3] = v3;
  v5[4] = v2;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v6);
  }
  os_unfair_lock_unlock(v4 + 44);
  if (v2) {
LABEL_11:
  }
    std::__shared_weak_count::__release_shared[abi:nn180100](v2);
}

uint64_t std::__function::__func<re::AudioMultiSceneManager::loadAudioToSingleService(re::AudioService *,std::shared_ptr<re::AudioAssetPayload>)::$_0,std::allocator<re::AudioMultiSceneManager::loadAudioToSingleService(re::AudioService *,std::shared_ptr<re::AudioAssetPayload>)::$_0>,void ()(std::shared_ptr<re::PersistedAssetData>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::AudioMultiSceneManager::loadAudioToSingleService(re::AudioService *,std::shared_ptr<re::AudioAssetPayload>)::$_0,std::allocator<re::AudioMultiSceneManager::loadAudioToSingleService(re::AudioService *,std::shared_ptr<re::AudioAssetPayload>)::$_0>,void ()(std::shared_ptr<re::PersistedAssetData>)>::target_type()
{
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<re::PersistedAssetData>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<re::PersistedAssetData>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<re::PersistedAssetData>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<re::PersistedAssetData>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    unint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (unint64_t i = *v10; i; unint64_t i = (void *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }
  unint64_t i = operator new(0x28uLL);
  *unint64_t i = 0;
  i[1] = v7;
  i[2] = **a4;
  i[3] = 0;
  i[4] = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>>>::__rehash<true>(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v19 = *(void *)a1;
  uint64_t v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    *unint64_t i = *v20;
LABEL_38:
    *uint64_t v20 = i;
    goto LABEL_39;
  }
  *unint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v19 + 8 * v4) = a1 + 16;
  if (*i)
  {
    unint64_t v21 = *(void *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8) {
        v21 %= v8;
      }
    }
    else
    {
      v21 &= v8 - 1;
    }
    uint64_t v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

_DWORD *re::ecs2::SkeletalPoseBufferComponent::initializeBufferRanges(_DWORD *this, const re::MeshAsset *a2, const re::MeshNameMap *a3, const re::SkeletalPoseRigMappingData *a4)
{
  uint64_t v53 = *MEMORY[0x263EF8340];
  if (*((void *)this + 11) == *((void *)a4 + 1)) {
    return this;
  }
  unint64_t v4 = a4;
  uint64_t v6 = (uint64_t)this;
  unint64_t v7 = *((void *)a4 + 32);
  unint64_t v8 = *((void *)this + 14);
  if (v8 < v7)
  {
    if (*((void *)this + 13) < v7)
    {
      re::DynamicArray<re::Matrix4x4<float>>::setCapacity((void *)this + 12, *((void *)a4 + 32));
      unint64_t v8 = *(void *)(v6 + 112);
    }
    unint64_t v9 = v7 - v8;
    if (v7 > v8)
    {
      uint64_t v10 = v8 << 6;
      do
      {
        uint64_t v11 = (_OWORD *)(*(void *)(v6 + 128) + v10);
        *uint64_t v11 = xmmword_23435FD50;
        v11[1] = xmmword_23435FD60;
        void v11[2] = xmmword_23435FD80;
        v11[3] = xmmword_23435FBB0;
        v10 += 64;
        --v9;
      }
      while (v9);
    }
    goto LABEL_10;
  }
  if (v8 > v7)
  {
LABEL_10:
    *(void *)(v6 + 112) = v7;
    ++*(_DWORD *)(v6 + 120);
  }
  unint64_t v37 = (_anonymous_namespace_ *)(v6 + 136);
  this = (_DWORD *)re::DynamicArray<re::ecs2::SkinnedMeshJointRange>::clear(v6 + 136);
  uint64_t v12 = *((void *)a3 + 30);
  uint64_t v38 = (void *)v6;
  if (*(void *)(v6 + 144) < (unint64_t)v12)
  {
    this = re::DynamicArray<re::ecs2::SkinnedMeshJointRange>::setCapacity(v37, *((void *)a3 + 30));
    uint64_t v12 = *((void *)a3 + 30);
  }
  if (v12)
  {
    float v13 = (unsigned int *)*((void *)a3 + 31);
    uint64_t v35 = &v13[v12];
    uint64_t v36 = a2;
    do
    {
      unsigned int v14 = *v13;
      uint64_t v15 = *((void *)a2 + 55);
      unint64_t v16 = re::MeshNameMap::modelIndex(a3, *v13);
      unint64_t v17 = *((void *)a2 + 52);
      if (v17 <= v16)
      {
        long long v51 = 0u;
        long long v52 = 0u;
        long long v49 = 0u;
        long long v50 = 0u;
        long long v48 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v40 = 136315906;
        uint64_t v41 = "operator[]";
        __int16 v42 = 1024;
        int v43 = 797;
        __int16 v44 = 2048;
        unint64_t v45 = v16;
        __int16 v46 = 2048;
        unint64_t v47 = v17;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      this = (_DWORD *)re::DataArray<re::MeshModel>::tryGet(v15 + 8, *(void *)(*((void *)a2 + 54) + 8 * v16));
      if (this)
      {
        uint64_t v18 = (uint64_t)this;
        this = (_DWORD *)re::MeshNameMap::meshPartStartIndexForInstance(a3, v14);
        uint64_t v19 = *(void *)(v18 + 176);
        if (v19)
        {
          unint64_t v20 = *(unsigned __int16 *)(v19 + 8);
          unint64_t v21 = *((void *)v36 + 117);
          LOWORD(v4ArcSharedObject::ArcSharedObject(this, 0) = 0;
          if (v20)
          {
            int v22 = (int)this;
            unsigned __int16 v23 = 0;
            int v24 = 0;
            int v25 = 0;
            do
            {
              uint64_t v26 = *(void *)(v18 + 176);
              if (v26 && *(void *)(v26 + 8) > (unint64_t)v23) {
                unint64_t v27 = *(unsigned int *)(*(void *)(v26 + 16) + 72 * v23 + 4);
              }
              else {
                unint64_t v27 = 0xFFFFFFFFLL;
              }
              if (v21 > v27)
              {
                unsigned int v28 = re::MeshNameMap::skinnedPartIndexForPartInstance(a3, v22 + v23);
                uint64_t v29 = v4;
                this = (_DWORD *)re::SkeletalPoseRigMappingData::jointTransformStartAndEndIndex(v4, v28);
                int v30 = this[1];
                if (v30)
                {
                  uint64_t v31 = this;
                  if (v24 != *this || v25 != v30)
                  {
                    *(void *)&long long v48 = __PAIR64__(*this, v14);
                    DWORD2(v4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v30;
                    *(void *)&long long v51 = 0;
                    *(void *)&long long v50 = 0;
                    long long v49 = 0uLL;
                    DWORD2(v5ArcSharedObject::ArcSharedObject(this, 0) = 0;
                    re::DynamicArray<re::ecs2::SkinnedMeshJointRange>::add(v37, (uint64_t *)&v48);
                    if ((void)v49 && (void)v51) {
                      (*(void (**)(void))(*(void *)v49 + 40))();
                    }
                    uint64_t v33 = v38[21];
                    uint64_t v34 = v38[19] - 1;
                    if (*(void *)(v33 + 56 * v34 + 24) < v20) {
                      re::DynamicArray<unsigned short>::setCapacity((void *)(v33 + 56 * v34 + 16), v20);
                    }
                    int v24 = *v31;
                    int v25 = v31[1];
                  }
                  this = re::DynamicArray<unsigned short>::add((void *)(v38[21] + 56 * v38[19] - 40), &v40);
                }
                unint64_t v4 = v29;
              }
              unsigned __int16 v23 = v40 + 1;
              LOWORD(v4ArcSharedObject::ArcSharedObject(this, 0) = v23;
            }
            while (v20 > v23);
          }
        }
        a2 = v36;
      }
      ++v13;
    }
    while (v13 != v35);
  }
  v38[11] = *((void *)v4 + 1);
  return this;
}

uint64_t re::DynamicArray<re::ecs2::SkinnedMeshJointRange>::clear(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void *)(result + 16);
  *(void *)(result + 16) = 0;
  if (v2)
  {
    uint64_t v3 = 56 * v2;
    uint64_t v4 = *(void *)(result + 32) + 16;
    do
    {
      __n128 result = re::DynamicArray<unsigned long>::deinit(v4);
      v4 += 56;
      v3 -= 56;
    }
    while (v3);
  }
  ++*(_DWORD *)(v1 + 24);
  return result;
}

_anonymous_namespace_ *re::DynamicArray<re::ecs2::SkinnedMeshJointRange>::add(_anonymous_namespace_ *result, uint64_t *a2)
{
  uint64_t v3 = result;
  unint64_t v4 = *((void *)result + 1);
  unint64_t v5 = *((void *)result + 2);
  if (v5 >= v4)
  {
    unint64_t v6 = v5 + 1;
    if (v4 < v5 + 1)
    {
      if (*(void *)result)
      {
        uint64_t v7 = 2 * v4;
        BOOL v8 = v4 == 0;
        unint64_t v9 = 8;
        if (!v8) {
          unint64_t v9 = v7;
        }
        if (v9 <= v6) {
          unint64_t v10 = v6;
        }
        else {
          unint64_t v10 = v9;
        }
        __n128 result = (_anonymous_namespace_ *)re::DynamicArray<re::ecs2::SkinnedMeshJointRange>::setCapacity(result, v10);
      }
      else
      {
        __n128 result = (_anonymous_namespace_ *)re::DynamicArray<re::ecs2::SkinnedMeshJointRange>::setCapacity(v3, v6);
        ++*((_DWORD *)v3 + 6);
      }
    }
    unint64_t v5 = *((void *)v3 + 2);
  }
  uint64_t v11 = *((void *)v3 + 4) + 56 * v5;
  uint64_t v12 = *a2;
  *(_DWORD *)(v11 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = *((_DWORD *)a2 + 2);
  *(void *)uint64_t v11 = v12;
  *(void *)(v11 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
  *(void *)(v11 + 24) = 0;
  *(void *)(v11 + 32) = 0;
  *(void *)(v11 + 16) = 0;
  *(_DWORD *)(v11 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
  uint64_t v13 = a2[3];
  *(void *)(v11 + 16) = a2[2];
  *(void *)(v11 + 24) = v13;
  a2[2] = 0;
  a2[3] = 0;
  uint64_t v14 = *(void *)(v11 + 32);
  *(void *)(v11 + 32) = a2[4];
  a2[4] = v14;
  uint64_t v15 = *(void *)(v11 + 48);
  *(void *)(v11 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = a2[6];
  a2[6] = v15;
  ++*((_DWORD *)a2 + 10);
  ++*(_DWORD *)(v11 + 40);
  ++*((void *)v3 + 2);
  ++*((_DWORD *)v3 + 6);
  return result;
}

id *re::ecs2::SkeletalPoseBufferComponent::resetDeformerInputs(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  v14[5] = *MEMORY[0x263EF8340];
  BOOL v8 = (id *)(a1 + 32);
  if (a2) {
    unint64_t v9 = (void *)(a2 + 8);
  }
  else {
    unint64_t v9 = 0;
  }
  inited = (re *)objc_initWeak(&location, v9);
  memset(v14, 0, 24);
  v14[3] = re::globalAllocators(inited)[2];
  v14[4] = 0;
  re::FramePersistentPtr<re::ecs2::SkeletalPoseBufferComponent::SkeletalPoseBufferInputs,re::FrameManager>::reset(v8, &location, a3, (uint64_t)v14);
  re::FunctionBase<24ul,void ()(void *)>::destroyCallable((uint64_t)v14);
  objc_destroyWeak(&location);
  if (a5)
  {
    uint64_t v11 = 168 * a5;
    do
    {
      ++*(unsigned char *)(a4 + 2);
      *(void *)(a4 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      ++*(unsigned char *)(a4 + 15);
      *(void *)(a4 + 144) = 0;
      a4 += 168;
      v11 -= 168;
    }
    while (v11);
  }
  return v8;
}

re::ecs2::SkeletalPoseBufferComponentStateImpl *re::ecs2::SkeletalPoseBufferComponentStateImpl::SkeletalPoseBufferComponentStateImpl(re::ecs2::SkeletalPoseBufferComponentStateImpl *this)
{
  v6[3] = *MEMORY[0x263EF8340];
  *(void *)this = &unk_26E6F9778;
  *(_OWORD *)((char *)this + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0u;
  *((void *)this + 5) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  uint64_t v2 = (uint64_t *)((char *)this + 24);
  v6[0] = re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v6[1] = re::ecs2::ComponentImpl<re::ecs2::MeshDeformationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  uint64_t v6[2] = re::ecs2::ComponentImpl<re::ecs2::MeshSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  v5[0] = v6;
  v5[1] = 3;
  re::FixedArray<re::ecs2::ComponentTypeBase const*>::FixedArray((_anonymous_namespace_ *)v4, (uint64_t)v5);
  re::FixedArray<re::ecs2::ComponentTypeBase const*>::operator=(v2, v4);
  if (v4[0] && v4[1]) {
    (*(void (**)(void))(*(void *)v4[0] + 40))();
  }
  return this;
}

BOOL re::ecs2::SkeletalPoseBufferComponentStateImpl::processDirtyComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v8 = a1;
  uint64_t v9 = *(void *)(a1 + 16);
  if (v9) {
    uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 104))(v9);
  }
  else {
    uint64_t v10 = 0;
  }
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v50, a5, 0);
  unint64_t v11 = v50;
  unint64_t v12 = v51;
  unint64_t v50 = a4;
  unint64_t v51 = v11;
  unint64_t v52 = v12;
  uint64_t v13 = (unsigned __int16)v12;
  uint64_t v14 = v12 & 0xFFFF0000;
  if (v11 != a5 || v13 != 0xFFFF || v14 != 4294901760)
  {
    uint64_t v49 = v10;
    __asm { FMOV            V8.2S, #1.0 }
    uint64_t v48 = v8;
    while (1)
    {
      unint64_t v21 = (uint64_t *)re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v51);
      uint64_t v22 = *v21;
      uint64_t v23 = *(void *)(*v21 + 16);
      uint64_t v24 = *(void *)(v23 + 184);
      int v25 = *(void **)(*v21 + 40);
      if (v25)
      {
        if (v24)
        {
          BOOL v26 = *(void *)(v24 + 248) != *v25 || v10 == 0;
          if (!v26 && v25[1] == v10) {
            goto LABEL_49;
          }
          uint64_t v27 = *(void *)(v8 + 8);
          uint64_t v28 = *(void *)(v24 + 392);
          if (v28)
          {
            uint64_t v30 = *(void *)(v28 + 88);
            uint64_t v29 = *(void *)(v28 + 96);
          }
          else
          {
            uint64_t v30 = 0;
            uint64_t v29 = 0;
          }
        }
        else
        {
          uint64_t v30 = 0;
          uint64_t v29 = 0;
          uint64_t v27 = *(void *)(v8 + 8);
        }
        re::ecs2::SkeletalPoseBufferComponent::resetDeformerInputs(*v21, *(void *)(v27 + 136), 0, v29, v30);
      }
      uint64_t v31 = *(void *)(v23 + 176);
      BOOL v32 = !v31 || v24 == 0;
      uint64_t v33 = (unint64_t *)(a3 + 32);
      if (!v32)
      {
        uint64_t v33 = (unint64_t *)(a3 + 32);
        if (*(void *)(v31 + 40))
        {
          uint64_t v33 = (unint64_t *)(a3 + 32);
          if (*(void *)(v22 + 112))
          {
            uint64_t v33 = (unint64_t *)(a3 + 40);
            if (*(void *)(v22 + 184) != *(void *)(v22 + 88)) {
              break;
            }
          }
        }
      }
LABEL_48:
      unint64_t v45 = v50;
      unint64_t v46 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v51);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v45, v46, *v33);
LABEL_49:
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v51);
      if (v51 == a5 && (unsigned __int16)v52 == 0xFFFF && WORD1(v52) == 0xFFFF) {
        return *(_DWORD *)(a5 + 40) != 0;
      }
    }
    *(void *)(v22 + 192) = 0;
    memset_pattern16((void *)(v22 + 200), &unk_234386D00, 0x40uLL);
    uint64_t v34 = *(void *)(v22 + 600);
    *(void *)(v22 + 60ArcSharedObject::ArcSharedObject(this, 0) = 0;
    if (v34)
    {
      uint64_t v35 = v34 << 7;
      uint64_t v36 = (uint64_t *)(*(void *)(v22 + 616) + 104);
      do
      {
        re::FixedArray<CoreIKTransform>::deinit(v36);
        re::FixedArray<CoreIKTransform>::deinit(v36 - 4);
        re::FixedArray<CoreIKTransform>::deinit(v36 - 7);
        re::DynamicArray<unsigned long>::deinit((uint64_t)(v36 - 12));
        v36 += 16;
        v35 -= 128;
      }
      while (v35);
      unint64_t v37 = *(void *)(v22 + 600);
    }
    else
    {
      unint64_t v37 = 0;
    }
    ++*(_DWORD *)(v22 + 608);
    unint64_t v38 = *(void *)(v22 + 152);
    if (v37 >= v38)
    {
      if (v37 <= v38)
      {
LABEL_47:
        *(void *)(v22 + 184) = *(void *)(v22 + 88);
        uint64_t v10 = v49;
        uint64_t v33 = (unint64_t *)(a3 + 40);
        goto LABEL_48;
      }
      uint64_t v42 = (v38 << 7) | 0x68;
      unint64_t v43 = *(void *)(v22 + 152);
      do
      {
        __int16 v44 = (uint64_t *)(*(void *)(v22 + 616) + v42);
        re::FixedArray<CoreIKTransform>::deinit(v44);
        re::FixedArray<CoreIKTransform>::deinit(v44 - 4);
        re::FixedArray<CoreIKTransform>::deinit(v44 - 7);
        re::DynamicArray<unsigned long>::deinit((uint64_t)(v44 - 12));
        ++v43;
        v42 += 128;
      }
      while (v43 < *(void *)(v22 + 600));
    }
    else
    {
      if (*(void *)(v22 + 592) < v38)
      {
        re::DynamicArray<re::ecs2::SkeletalPoseBufferComponent::MeshBoundsEstimatorForJointRange>::setCapacity((void *)(v22 + 584), *(void *)(v22 + 152));
        unint64_t v37 = *(void *)(v22 + 600);
      }
      unint64_t v39 = v38 - v37;
      if (v38 > v37)
      {
        uint64_t v40 = v37 << 7;
        do
        {
          uint64_t v41 = *(void *)(v22 + 616) + v40;
          *(_DWORD *)uint64_t v41 = -1;
          *(void *)(v41 + 16) = 0;
          *(void *)(v41 + 24) = 0;
          *(void *)(v41 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
          *(_DWORD *)(v41 + 32) = 0;
          *(_OWORD *)(v41 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0u;
          *(_OWORD *)(v41 + 56) = 0u;
          *(_OWORD *)(v41 + 72) = 0u;
          *(void *)(v41 + 8re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
          *(void *)(v41 + 96) = _D8;
          *(void *)(v41 + 112) = 0;
          *(void *)(v41 + 12ArcSharedObject::ArcSharedObject(this, 0) = 0;
          v40 += 128;
          *(void *)(v41 + 104) = 0;
          --v39;
        }
        while (v39);
      }
    }
    *(void *)(v22 + 60ArcSharedObject::ArcSharedObject(this, 0) = v38;
    ++*(_DWORD *)(v22 + 608);
    uint64_t v8 = v48;
    goto LABEL_47;
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

unint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>::setComponentState(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t result = re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), a2, a3, *(void *)(a1 + 24));
  if (result != a2 || v7 != a3 || ((v7 ^ a3) & 0xFFFFFF00000000) != 0)
  {
    uint64_t v10 = *(uint64_t (**)(void))(**(void **)(*(void *)a1 + 224) + 16);
    return v10();
  }
  return result;
}

BOOL re::ecs2::SkeletalPoseBufferComponentStateImpl::processPreparingComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v7 = a1;
  uint64_t v190 = *MEMORY[0x263EF8340];
  uint64_t v147 = re::RenderManager::perFrameAllocator(*(re::RenderManager **)(a1 + 8));
  uint64_t v8 = *(re::DeformerFeatureFlags **)(v7 + 16);
  uint64_t v140 = *(void *)(v7 + 8);
  uint64_t v9 = *(void *)(v140 + 136);
  uint64_t v10 = *(void *)(v9 + 16);
  uint64_t v11 = *(void *)(v9 + 32);
  if (v8)
  {
    uint64_t v8 = (re::DeformerFeatureFlags *)(*(uint64_t (**)(re::DeformerFeatureFlags *))(*(void *)v8 + 104))(v8);
    float32x2_t v139 = v8;
  }
  else
  {
    float32x2_t v139 = 0;
  }
  int isSkinningAssignLoggingEnabled = re::DeformerFeatureFlags::isSkinningAssignLoggingEnabled(v8);
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)buf, a5, 0);
  unint64_t v177 = a4;
  uint64_t v178 = *(void *)buf;
  uint64_t v179 = *(void *)&buf[8];
  if (*(void *)buf != a5
    || *(unsigned __int16 *)&buf[8] != 0xFFFFLL
    || (*(_DWORD *)&buf[8] & 0xFFFF0000) != 0xFFFF0000)
  {
    unint64_t v143 = v11 & 0xFFFFFFFFFFFFFFFLL;
    unint64_t v144 = v11 & 0xFFFFFFFFFFFFFFFLL | ((unint64_t)v10 << 60);
    uint64_t v154 = v7;
    uint64_t v137 = a5;
    do
    {
      uint64_t v12 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v178);
      uint64_t v13 = *(void **)v12;
      uint64_t v14 = *(void **)(*(void *)v12 + 16);
      uint64_t v15 = (re *)v14[23];
      if (*((void *)v15 + 30))
      {
        float32x4_t v142 = (re::ecs2::MeshComponent *)v14[22];
        unint64_t v16 = (void *)v13[5];
        if (!v16 || *((void *)v15 + 31) != *v16)
        {
          float32x4_t v151 = v14;
          uint64_t v17 = v13[16];
          uint64_t v18 = v13[14];
          uint64_t v19 = *((void *)v15 + 49);
          uint64_t v21 = *(void *)(v19 + 88);
          uint64_t v20 = *(void *)(v19 + 96);
          uint64_t v22 = *(void *)(v7 + 8);
          uint64_t v23 = v15;
          uint64_t v24 = re::globalAllocators(v15);
          int v25 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v24[2] + 32))(v24[2], 48, 8);
          float32x4_t v141 = v23;
          uint64_t v26 = *((void *)v23 + 31);
          id v27 = objc_msgSend(*(id *)(v140 + 184), sel_newBufferWithBytes_length_options_, v17, v18 << 6, 0);
          *int v25 = v26;
          v25[1] = v139;
          _OWORD v25[2] = v27;
          v25[3] = 0;
          v25[4] = 0;
          void v25[5] = 0;
          float v152 = v13;
          uint64_t v156 = v20;
          unint64_t v159 = v21;
          float32x4_t v160 = re::ecs2::SkeletalPoseBufferComponent::resetDeformerInputs((uint64_t)v13, *(void *)(v22 + 136), v25, v20, v21);
          if (v27) {

          }
          uint64_t v28 = (void *)re::AssetHandle::asset<re::MeshAsset>((re::ecs2::MeshComponent *)((char *)v142 + 32));
          uint64_t v29 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v151 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
          if (v29) {
            uint64_t v30 = (re::MeshNameMap *)(v29 + 216);
          }
          else {
            uint64_t v30 = (re::MeshNameMap *)(v28 + 56);
          }
          uint64_t v31 = (_anonymous_namespace_ *)re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::EntityComponentCollection *)(v151 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::DynamicBoundingBoxComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType);
          BOOL v32 = v152;
          v152[22] = *(void *)(*(void *)(*(void *)(v7 + 8) + 136) + 24) & 0xFFFFFFFFFFFFFFFLL | ((unint64_t)*(void *)(*(void *)(*(void *)(v7 + 8) + 136) + 16) << 60);
          uint64_t v33 = v160[1];
          unint64_t v36 = v159;
          v33[4] = v159;
          if (v159)
          {
            if (v159 >> 60) {
              goto LABEL_157;
            }
            unint64_t v37 = v30;
            v33[5] = v35;
            if (!v35)
            {
LABEL_158:
              re::internal::assertLog((re::internal *)4, v38, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
              _os_crash();
              __break(1u);
LABEL_159:
              v172[0] = 0;
              long long v188 = 0u;
              long long v189 = 0u;
              memset(v187, 0, sizeof(v187));
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              *(_DWORD *)float32x4_t v180 = 136315906;
              *(void *)&v180[4] = "operator[]";
              *(_WORD *)&v180[12] = 1024;
              *(_DWORD *)&v180[14] = 797;
              *(_WORD *)&v180[18] = 2048;
              *(void *)&v180[20] = 0;
              __int16 v181 = 2048;
              unint64_t v182 = 0;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
            }
            unint64_t v39 = (void *)v35;
            if (v159 != 1)
            {
              size_t v40 = 16 * v159 - 16;
              bzero((void *)v35, v40);
              unint64_t v39 = (void *)((char *)v39 + v40);
            }
            uint64_t v30 = v37;
            *unint64_t v39 = 0;
            v39[1] = 0;
          }
          float32x4_t v146 = v31;
          uint64_t v153 = v152[19];
          if (v153)
          {
            unint64_t v41 = 0;
            uint64_t v155 = v152[21];
            float32x4_t v162 = v28;
            float32x4_t v145 = v30;
            do
            {
              uint64_t v42 = (unsigned int *)(v155 + 56 * v41);
              if (*v42 >= *((_DWORD *)v30 + 54))
              {
                if (isSkinningAssignLoggingEnabled)
                {
                  uint64_t v49 = *re::ecsComponentsLogObjects((re *)v35);
                  uint64_t v35 = os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT);
                  if (v35)
                  {
                    uint64_t v50 = *(void *)(*(void *)(*(void *)(v7 + 8) + 136) + 24) & 0xFFFFFFFFFFFFFFFLL;
                    uint64_t v51 = v151[35];
                    *(_DWORD *)__n128 buf = 134218242;
                    *(void *)&uint8_t buf[4] = v50;
                    *(_WORD *)&unsigned char buf[12] = 2080;
                    *(void *)&buf[14] = v51;
                    _os_log_impl(&dword_233120000, v49, OS_LOG_TYPE_DEFAULT, "[DeformerLogging] Frame[%llu]: Entity[%s] has mismatched mesh joints from mesh scene data.", buf, 0x16u);
                  }
                }
              }
              else
              {
                unint64_t v158 = v41;
                uint64_t v43 = v28[55];
                unint64_t v44 = re::MeshNameMap::modelIndex(v30, *v42);
                unint64_t v45 = v28[52];
                if (v45 <= v44) {
                  goto LABEL_152;
                }
                uint64_t v35 = re::DataArray<re::MeshModel>::tryGet(v43 + 8, *(void *)(v28[54] + 8 * v44));
                unint64_t v41 = v158;
                if (v35)
                {
                  unint64_t v46 = (void *)v35;
                  uint64_t v47 = *(void *)(v35 + 176);
                  if (v47) {
                    unint64_t v48 = *(void *)(v47 + 8);
                  }
                  else {
                    unint64_t v48 = 0;
                  }
                  int started = re::MeshNameMap::meshPartStartIndexForInstance(v30, *v42);
                  uint64_t v53 = v155 + 56 * v158;
                  int v54 = *(_DWORD *)(v53 + 4);
                  float v148 = (_DWORD *)(v53 + 4);
                  uint64_t v55 = *(unsigned int *)(v53 + 8);
                  float v150 = (_DWORD *)(v53 + 8);
                  uint64_t v56 = (uint64_t)*((id *)v160[1] + 2);
                  id v157 = (id)v56;
                  uint64_t v59 = *(void *)(v53 + 32);
                  uint64_t v58 = (unint64_t *)(v53 + 32);
                  uint64_t v57 = v59;
                  unint64_t v60 = (unsigned __int16 *)v58[2];
                  float v163 = (const void **)(v58 + 2);
                  if (v59)
                  {
                    unint64_t v61 = (v54 << 6) | (unint64_t)(v55 << 38);
                    for (uint64_t i = 2 * v57; i; i -= 2)
                    {
                      unsigned int v63 = *v60;
                      if (v63 >= v48)
                      {
                        if (isSkinningAssignLoggingEnabled)
                        {
                          size_t v72 = *re::ecsComponentsLogObjects((re *)v56);
                          uint64_t v56 = os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT);
                          if (v56)
                          {
                            uint64_t v73 = *(void *)(*(void *)(*(void *)(v154 + 8) + 136) + 24) & 0xFFFFFFFFFFFFFFFLL;
                            uint64_t v74 = v151[35];
                            *(_DWORD *)__n128 buf = 134218242;
                            *(void *)&uint8_t buf[4] = v73;
                            *(_WORD *)&unsigned char buf[12] = 2080;
                            *(void *)&buf[14] = v74;
                            _os_log_impl(&dword_233120000, v72, OS_LOG_TYPE_DEFAULT, "[DeformerLogging] Frame[%llu]: Entity[%s] has mismatched mesh part indices from skinning data.", buf, 0x16u);
                          }
                        }
                      }
                      else
                      {
                        uint64_t v56 = re::MeshDeformationRuntimeData::absoluteDeformedMeshPartIndex((re::ecs2::MeshDeformationComponent *)((char *)v141 + 232), started + v63);
                        if (v159 > v56)
                        {
                          unint64_t v64 = v56;
                          *(void *)float32x4_t v180 = v157;
                          *(void *)&v180[8] = v61;
                          uint64_t v65 = v160[1];
                          unint64_t v44 = v65[4];
                          if (v44 <= v64) {
                            goto LABEL_149;
                          }
                          uint64_t v66 = v65[5] + 16 * v64;
                          NS::SharedPtr<MTL::Texture>::operator=((void **)v66, (void **)v180);
                          *(void *)(v66 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = *(void *)&v180[8];
                          uint64_t v56 = *(void *)v180;
                          if (*(void *)v180) {

                          }
                          BOOL v67 = v160[1];
                          unint64_t v44 = v67[4];
                          if (v44 <= v64) {
                            goto LABEL_150;
                          }
                          uint64_t v68 = v156 + 168 * v64;
                          uint64_t v69 = v67[5] + 16 * v64;
                          ++*(unsigned char *)(v68 + 2);
                          *(void *)(v68 + 4ArcSharedObject::ArcSharedObject(this, 0) = v69;
                          BOOL v70 = v160[1];
                          unint64_t v44 = v70[4];
                          if (v44 <= v64) {
                            goto LABEL_151;
                          }
                          uint64_t v71 = v70[5] + 16 * v64;
                          ++*(unsigned char *)(v68 + 15);
                          *(void *)(v156 + 168 * v64 + 144) = v71;
                        }
                      }
                      ++v60;
                    }
                  }
                  unint64_t v44 = v152[75];
                  unint64_t v45 = v158;
                  if (v44 <= v158) {
                    goto LABEL_153;
                  }
                  uint64_t v75 = v152[77];
                  uint64_t v76 = v75 + (v158 << 7);
                  uint64_t v77 = (re::SkinnedMeshBoundsEstimator *)(v76 + 48);
                  unsigned int v78 = *v42;
                  float32x4_t v149 = (re::SkinnedMeshBoundsEstimator *)(v76 + 48);
                  if (*(_DWORD *)v76 == *v42)
                  {
                    uint64_t v79 = *(void *)(v76 + 24);
                    if (v79 == *v58 && !memcmp(*(const void **)(v75 + (v158 << 7) + 40), *v163, 2 * v79)) {
                      goto LABEL_99;
                    }
                  }
                  *(_DWORD *)uint64_t v76 = v78;
                  uint64_t v80 = (void **)(v76 + 8);
                  if ((unint64_t *)(v76 + 8) != v58 - 2)
                  {
                    uint64_t v81 = (void *)*(v58 - 2);
                    if (*v80)
                    {
                      if (v81)
                      {
                        re::DynamicArray<unsigned short>::copy(v80, (uint64_t)(v58 - 2));
                        uint64_t v82 = v75 + (v158 << 7);
                      }
                      else
                      {
                        uint64_t v82 = v75 + (v158 << 7);
                        *(void *)(v82 + 24) = 0;
                      }
                      ++*(_DWORD *)(v82 + 32);
                    }
                    else if (v81)
                    {
                      unint64_t v83 = *v58;
                      *uint64_t v80 = v81;
                      re::DynamicArray<unsigned short>::setCapacity(v80, v83);
                      ++*(_DWORD *)(v75 + (v158 << 7) + 32);
                      re::DynamicArray<unsigned short>::copy(v80, (uint64_t)(v58 - 2));
                    }
                  }
                  unint64_t v84 = *v58;
                  *(_DWORD *)&uint8_t buf[16] = 1;
                  long long v184 = 0uLL;
                  *(void *)&uint8_t buf[8] = 0;
                  *(void *)__n128 buf = v147;
                  re::DynamicOverflowArray<re::AABB,8ul>::setCapacity(buf, v84);
                  *(_DWORD *)&buf[16] += 2;
                  if (!*v58) {
                    goto LABEL_159;
                  }
                  unint64_t v44 = (unint64_t)(v46 + 12);
                  id v85 = (unsigned __int16 *)*v163;
                  unint64_t v86 = 2 * *v58;
                  do
                  {
                    unint64_t v87 = *v85;
                    unint64_t v88 = v46[7];
                    if (v88 <= v87)
                    {
                      v172[0] = 0;
                      long long v188 = 0u;
                      long long v189 = 0u;
                      memset(v187, 0, sizeof(v187));
                      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                      *(_DWORD *)float32x4_t v180 = 136315906;
                      *(void *)&v180[4] = "operator[]";
                      *(_WORD *)&v180[12] = 1024;
                      *(_DWORD *)&v180[14] = 476;
                      *(_WORD *)&v180[18] = 2048;
                      *(void *)&v180[20] = v87;
                      __int16 v181 = 2048;
                      unint64_t v182 = v88;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
                      goto LABEL_148;
                    }
                    uint64_t v89 = v46[8];
                    uint64_t v90 = (float32x4_t *)(v89 + 560 * *v85 + 432);
                    if (v87 >= v48
                      || ((uint64_t v91 = v46[22]) == 0 || *(void *)(v91 + 8) <= v87
                        ? (unint64_t v92 = 0xFFFFFFFFLL)
                        : (unint64_t v92 = *(unsigned int *)(*(void *)(v91 + 16) + 72 * *v85 + 4)),
                          v162[117] <= v92))
                    {
                      re::DynamicOverflowArray<re::AABB,8ul>::add((uint64_t)buf, (uint64_t)v90);
                    }
                    else
                    {
                      re::AABB::transform(v90, (float32x4_t *)(v89 + 560 * *v85 + 368), (uint64_t)v187);
                      re::DynamicOverflowArray<re::AABB,8ul>::ensureCapacity((_anonymous_namespace_ *)buf);
                      uint64_t v93 = &v184;
                      if ((buf[16] & 1) == 0) {
                        uint64_t v93 = (long long *)*((void *)&v184 + 1);
                      }
                      uint64_t v94 = &v93[2 * *(void *)&buf[8]];
                      *uint64_t v94 = v187[0];
                      v94[1] = v187[1];
                      ++*(void *)&buf[8];
                      *(_DWORD *)&buf[16] += 2;
                    }
                    ++v85;
                    v86 -= 2;
                  }
                  while (v86);
                  if (!*v58) {
                    goto LABEL_159;
                  }
                  unint64_t v95 = *(unsigned __int16 *)*v163;
                  char v176 = 0;
                  re::SkinningModelUtil::inverseBindPoseBufferForPart(v46 + 12, v95, v175);
                  v174[0] = 0;
                  v174[1] = 0;
                  re::SkinningModelUtil::skinnedInfluenceDataBuffer((uint64_t)(v46 + 12), v95, &v176, (uint64_t)v174);
                  re::ReadOnlyCPUAccessibleBufferSliceContent::make(v174, (uint64_t)v187);
                  re::ReadOnlyCPUAccessibleBufferSliceContent::make(v175, (uint64_t)v180);
                  uint64_t v96 = v46[22];
                  if (v96 && *(void *)(v96 + 8) > v95) {
                    unsigned int v97 = *(unsigned __int8 *)(*(void *)(v96 + 16) + 72 * v95 + 2);
                  }
                  else {
                    unsigned int v97 = 0;
                  }
                  re::SkinningModelUtil::skinnedEndIndicesBuffer((void *)v44, v95, v173);
                  re::ReadOnlyCPUAccessibleBufferSliceContent::make(v173, (uint64_t)v172);
                  if (v97)
                  {
                    uint64_t v77 = v149;
                    goto LABEL_80;
                  }
                  uint64_t v77 = v149;
                  if (LOBYTE(v172[0]))
                  {
                    float v170 = (int *)v172[1];
                    uint64_t v171 = v172[2] >> 2;
                  }
                  else
                  {
LABEL_80:
                    float v170 = 0;
                    uint64_t v171 = 0;
                  }
                  re::SkinnedMeshBoundsEstimator::deinit(v77);
                  if (v176)
                  {
                    float32x4_t v101 = &v184;
                    if ((buf[16] & 1) == 0) {
                      float32x4_t v101 = (long long *)*((void *)&v184 + 1);
                    }
                    float v168 = v101;
                    uint64_t v169 = *(void *)&buf[8];
                    uint64_t v166 = *(void *)&v180[8];
                    uint64_t v167 = *(void *)&v180[16] >> 6;
                    uint64_t v164 = *((void *)&v187[0] + 1);
                    uint64_t v165 = *(void *)&v187[1] >> 2;
                    re::SkinnedMeshBoundsEstimator::init<re::PackedSkinningInfluence>((uint64_t)v77, (uint64_t)&v168, (uint64_t)&v166, &v164, &v170, v97, v98, v99, v100);
                  }
                  else
                  {
                    float32x4_t v102 = &v184;
                    if ((buf[16] & 1) == 0) {
                      float32x4_t v102 = (long long *)*((void *)&v184 + 1);
                    }
                    float v168 = v102;
                    uint64_t v169 = *(void *)&buf[8];
                    uint64_t v166 = *(void *)&v180[8];
                    uint64_t v167 = *(void *)&v180[16] >> 6;
                    uint64_t v164 = *((void *)&v187[0] + 1);
                    uint64_t v165 = *(void *)&v187[1] >> 3;
                    re::SkinnedMeshBoundsEstimator::init<re::SkinningInfluence>((uint64_t)v77, (uint64_t)&v168, (uint64_t)&v166, &v164, &v170, v97, v98, v99);
                  }
                  re::Result<re::ReadOnlyCPUAccessibleBufferSliceContent,re::DetailedError>::~Result(v172);
                  if (v173[0]) {

                  }
                  re::Result<re::ReadOnlyCPUAccessibleBufferSliceContent,re::DetailedError>::~Result(v180);
                  re::Result<re::ReadOnlyCPUAccessibleBufferSliceContent,re::DetailedError>::~Result(v187);
                  if (v174[0]) {

                  }
                  if (v175[0]) {
                  if (*(void *)buf && (buf[16] & 1) == 0)
                  }
                    (*(void (**)(void))(**(void **)buf + 40))();
LABEL_99:
                  uint64_t v103 = v152[24];
                  uint64_t v104 = 8;
                  if (v103 > 8) {
                    uint64_t v104 = v152[24];
                  }
                  uint64_t v105 = v104 - 8;
                  uint64_t v7 = v154;
                  unint64_t v45 = v158;
                  do
                  {
                    if (v103 <= v105) {
                      goto LABEL_119;
                    }
                    unsigned int v106 = --v103 & 7;
                  }
                  while ((v152[(v103 & 7) + 25] & 0xFFFFFFFFFFFFFFFuLL) > v143);
                  unint64_t v107 = *v58;
                  *(_DWORD *)&uint8_t buf[16] = 1;
                  long long v184 = 0uLL;
                  *(void *)&uint8_t buf[8] = 0;
                  *(void *)__n128 buf = v147;
                  re::DynamicOverflowArray<re::AABB,8ul>::setCapacity(buf, v107);
                  *(_DWORD *)&buf[16] += 2;
                  unint64_t v109 = *v58;
                  if (*v58)
                  {
                    uint64_t v110 = (unsigned __int16 *)*v163;
                    uint64_t v111 = 2 * v109;
                    do
                    {
                      id v112 = re::ecs2::DynamicBoundingBoxComponent::boundingBoxForMeshPartForFrame((uint64_t)v146, v144, started + *v110);
                      if (v112) {
                        re::DynamicOverflowArray<re::AABB,8ul>::add((uint64_t)buf, (uint64_t)v112);
                      }
                      ++v110;
                      v111 -= 2;
                    }
                    while (v111);
                    unint64_t v109 = *v58;
                    unint64_t v45 = v158;
                    uint64_t v77 = v149;
                  }
                  if (*(void *)&buf[8] == v109)
                  {
                    uint64_t v113 = v77;
                    unint64_t v44 = *v148;
                    unint64_t v114 = v152[5 * v106 + 35];
                    unint64_t v45 = v114 + 1;
                    if (v114 + 1 > v44)
                    {
                      uint64_t v115 = *v150;
                      if (v115 + v44 <= v114)
                      {
                        *(void *)&v187[0] = v152[5 * v106 + 37] + (v44 << 6);
                        *((void *)&v187[0] + 1) = v115;
                        float32x4_t v116 = &v184;
                        if ((buf[16] & 1) == 0) {
                          float32x4_t v116 = (long long *)*((void *)&v184 + 1);
                        }
                        *(void *)float32x4_t v180 = v116;
                        *(void *)&v180[8] = v109;
                        uint64_t v77 = v113;
                        re::SkinnedMeshBoundsEstimator::updateKnownBoundingBoxes(v113, (uint64_t)v180, v187);
                        unint64_t v45 = v158;
                        goto LABEL_116;
                      }
LABEL_156:
                      re::internal::assertLog((re::internal *)7, v108, "assertion failure: '%s' (%s:line %i) Invalid count. index = %zu, count = %zu, array size = %zu", "endIndexExclusive <= m_size", "slice", 1129, v44, v115, v114);
                      _os_crash();
                      __break(1u);
LABEL_157:
                      re::internal::assertLog((re::internal *)6, v34, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 16, v36);
                      _os_crash();
                      __break(1u);
                      goto LABEL_158;
                    }
LABEL_155:
                    v172[0] = 0;
                    long long v188 = 0u;
                    long long v189 = 0u;
                    memset(v187, 0, sizeof(v187));
                    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                    *(_DWORD *)float32x4_t v180 = 136315906;
                    *(void *)&v180[4] = "slice";
                    *(_WORD *)&v180[12] = 1024;
                    *(_DWORD *)&v180[14] = 1119;
                    *(_WORD *)&v180[18] = 2048;
                    *(void *)&v180[20] = v44;
                    __int16 v181 = 2048;
                    unint64_t v182 = v45;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
                    goto LABEL_156;
                  }
LABEL_116:
                  if (*(void *)buf && (buf[16] & 1) == 0) {
                    (*(void (**)(void))(**(void **)buf + 40))();
                  }
LABEL_119:
                  unint64_t v117 = (*v150 + *v148);
                  uint64_t v118 = v152[14];
                  *(void *)&v187[0] = v152[16];
                  *((void *)&v187[0] + 1) = v118;
                  *(void *)__n128 buf = re::MutableSlice<re::Matrix4x4<float>>::range(v187, *v148, v117);
                  *(void *)&uint8_t buf[8] = v119;
                  re::SkinnedMeshBoundsEstimator::updateEstimatedBoundingBoxes((uint64_t)v77, (uint64_t)buf, v120);
                  unint64_t v44 = v152[75];
                  if (v44 <= v45) {
                    goto LABEL_154;
                  }
                  unint64_t v121 = v152[77] + (v45 << 7);
                  uint64_t v122 = *(void *)(v121 + 80);
                  if (v122)
                  {
                    unint64_t v86 = 0;
                    unint64_t v44 = *(void *)(v121 + 88);
                    while (1)
                    {
                      unint64_t v48 = *v58;
                      if (*v58 <= v86) {
                        break;
                      }
                      re::ecs2::DynamicBoundingBoxComponent::setMeshPartEstimatedBoundingBox(v146, *(void *)(*(void *)(*(void *)(v154 + 8) + 136) + 24) & 0xFFFFFFFFFFFFFFFLL | ((unint64_t)*(void *)(*(void *)(*(void *)(v154 + 8) + 136) + 16) << 60), started + *((unsigned __int16 *)*v163 + v86++), (_OWORD *)v44);
                      v44 += 32;
                      if (v122 == v86) {
                        goto LABEL_124;
                      }
                    }
LABEL_148:
                    *(void *)float32x4_t v180 = 0;
                    long long v185 = 0u;
                    long long v186 = 0u;
                    long long v184 = 0u;
                    memset(buf, 0, sizeof(buf));
                    unint64_t v64 = &_os_log_internal;
                    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                    LODWORD(v187[0]) = 136315906;
                    *(void *)((char *)v187 + 4) = "operator[]";
                    WORD6(v187[0]) = 1024;
                    *(_DWORD *)((char *)v187 + 14) = 797;
                    WORD1(v187[1]) = 2048;
                    *(void *)((char *)&v187[1] + 4) = v86;
                    WORD6(v187[1]) = 2048;
                    *(void *)((char *)&v187[1] + 14) = v48;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
LABEL_149:
                    v172[0] = 0;
                    long long v185 = 0u;
                    long long v186 = 0u;
                    long long v184 = 0u;
                    memset(buf, 0, sizeof(buf));
                    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                    LODWORD(v187[0]) = 136315906;
                    *(void *)((char *)v187 + 4) = "operator[]";
                    WORD6(v187[0]) = 1024;
                    *(_DWORD *)((char *)v187 + 14) = 468;
                    WORD1(v187[1]) = 2048;
                    *(void *)((char *)&v187[1] + 4) = v64;
                    WORD6(v187[1]) = 2048;
                    *(void *)((char *)&v187[1] + 14) = v44;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
LABEL_150:
                    *(void *)float32x4_t v180 = 0;
                    long long v185 = 0u;
                    long long v186 = 0u;
                    long long v184 = 0u;
                    memset(buf, 0, sizeof(buf));
                    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                    LODWORD(v187[0]) = 136315906;
                    *(void *)((char *)v187 + 4) = "operator[]";
                    WORD6(v187[0]) = 1024;
                    *(_DWORD *)((char *)v187 + 14) = 468;
                    WORD1(v187[1]) = 2048;
                    *(void *)((char *)&v187[1] + 4) = v64;
                    WORD6(v187[1]) = 2048;
                    *(void *)((char *)&v187[1] + 14) = v44;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
LABEL_151:
                    *(void *)float32x4_t v180 = 0;
                    long long v185 = 0u;
                    long long v186 = 0u;
                    long long v184 = 0u;
                    memset(buf, 0, sizeof(buf));
                    unint64_t v45 = &_os_log_internal;
                    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                    LODWORD(v187[0]) = 136315906;
                    *(void *)((char *)v187 + 4) = "operator[]";
                    WORD6(v187[0]) = 1024;
                    *(_DWORD *)((char *)v187 + 14) = 468;
                    WORD1(v187[1]) = 2048;
                    *(void *)((char *)&v187[1] + 4) = v64;
                    WORD6(v187[1]) = 2048;
                    *(void *)((char *)&v187[1] + 14) = v44;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
LABEL_152:
                    *(void *)float32x4_t v180 = 0;
                    long long v185 = 0u;
                    long long v186 = 0u;
                    long long v184 = 0u;
                    memset(buf, 0, sizeof(buf));
                    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                    LODWORD(v187[0]) = 136315906;
                    *(void *)((char *)v187 + 4) = "operator[]";
                    WORD6(v187[0]) = 1024;
                    *(_DWORD *)((char *)v187 + 14) = 797;
                    WORD1(v187[1]) = 2048;
                    *(void *)((char *)&v187[1] + 4) = v44;
                    WORD6(v187[1]) = 2048;
                    *(void *)((char *)&v187[1] + 14) = v45;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
LABEL_153:
                    *(void *)float32x4_t v180 = 0;
                    long long v185 = 0u;
                    long long v186 = 0u;
                    long long v184 = 0u;
                    memset(buf, 0, sizeof(buf));
                    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                    LODWORD(v187[0]) = 136315906;
                    *(void *)((char *)v187 + 4) = "operator[]";
                    WORD6(v187[0]) = 1024;
                    *(_DWORD *)((char *)v187 + 14) = 789;
                    WORD1(v187[1]) = 2048;
                    *(void *)((char *)&v187[1] + 4) = v45;
                    WORD6(v187[1]) = 2048;
                    *(void *)((char *)&v187[1] + 14) = v44;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
LABEL_154:
                    *(void *)float32x4_t v180 = 0;
                    long long v185 = 0u;
                    long long v186 = 0u;
                    long long v184 = 0u;
                    memset(buf, 0, sizeof(buf));
                    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                    LODWORD(v187[0]) = 136315906;
                    *(void *)((char *)v187 + 4) = "operator[]";
                    WORD6(v187[0]) = 1024;
                    *(_DWORD *)((char *)v187 + 14) = 797;
                    WORD1(v187[1]) = 2048;
                    *(void *)((char *)&v187[1] + 4) = v45;
                    WORD6(v187[1]) = 2048;
                    *(void *)((char *)&v187[1] + 14) = v44;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
                    goto LABEL_155;
                  }
LABEL_124:
                  BOOL v32 = v152;
                  uint64_t v28 = v162;
                  uint64_t v30 = v145;
                  uint64_t v35 = (uint64_t)v157;
                  unint64_t v41 = v158;
                  if (v157) {
                }
                  }
              }
              ++v41;
            }
            while (v41 != v153);
          }
          re::ecs2::Component::markDirty(v146);
          unint64_t v123 = *(void *)(*(void *)(*(void *)(v7 + 8) + 136) + 24) & 0xFFFFFFFFFFFFFFFLL | ((unint64_t)*(void *)(*(void *)(*(void *)(v7 + 8) + 136) + 16) << 60);
          uint64_t v124 = v32[14];
          *(void *)&v187[0] = v32[16];
          *((void *)&v187[0] + 1) = v124;
          re::DynamicArray<re::Matrix4x4<float>>::DynamicArray((uint64_t)buf, (uint64_t)v187);
          uint64_t v126 = v32[24];
          float32x4_t v125 = v32 + 24;
          *float32x4_t v125 = v126 + 1;
          uint64_t v127 = -v126 & 7;
          uint64_t v128 = v126 & 7;
          if (v126 <= 0) {
            uint64_t v128 = -v127;
          }
          v125[v128 + 1] = v123;
          re::DynamicArray<re::RigComponentConstraint>::operator=((uint64_t)&v125[5 * v128 + 9], (uint64_t)buf);
          if (*(void *)buf && (void)v184) {
            (*(void (**)(void))(**(void **)buf + 40))();
          }
          a5 = v137;
          uint64_t v15 = v141;
        }
        if (re::ecs2::MeshDeformationComponent::areRequiredAssetsLoaded(v15, v142))
        {
          unint64_t v129 = v177;
          unint64_t v130 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v178);
          re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v129, v130, *(void *)(a3 + 48));
        }
      }
      else if (isSkinningAssignLoggingEnabled)
      {
        float32x4_t v131 = *re::ecsComponentsLogObjects(v15);
        if (os_log_type_enabled(v131, OS_LOG_TYPE_INFO))
        {
          uint64_t v132 = *(void *)(*(void *)(*(void *)(v7 + 8) + 136) + 24) & 0xFFFFFFFFFFFFFFFLL;
          uint64_t v133 = v14[35];
          *(_DWORD *)__n128 buf = 134218242;
          *(void *)&uint8_t buf[4] = v132;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = v133;
          _os_log_impl(&dword_233120000, v131, OS_LOG_TYPE_INFO, "[DeformerLogging] Frame[%llu]: Mesh Deformation Assets still loading for Entity - %s", buf, 0x16u);
        }
      }
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v178);
    }
    while (v178 != a5 || (unsigned __int16)v179 != 0xFFFF || WORD1(v179) != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

__n128 re::DynamicOverflowArray<re::AABB,8ul>::add(uint64_t a1, uint64_t a2)
{
  re::DynamicOverflowArray<re::AABB,8ul>::ensureCapacity((_anonymous_namespace_ *)a1);
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v4 = a1 + 32;
  }
  else {
    uint64_t v4 = *(void *)(a1 + 40);
  }
  unint64_t v5 = (_OWORD *)(v4 + 32 * *(void *)(a1 + 8));
  __n128 result = *(__n128 *)a2;
  long long v7 = *(_OWORD *)(a2 + 16);
  *unint64_t v5 = *(_OWORD *)a2;
  v5[1] = v7;
  ++*(void *)(a1 + 8);
  *(_DWORD *)(a1 + 16) += 2;
  return result;
}

id re::ecs2::DynamicBoundingBoxComponent::boundingBoxForMeshPartForFrame(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3 && *(void *)(v3 + 40) > a3)
  {
    uint64_t v4 = *(void *)(v3 + 48);
    uint64_t v5 = *(void *)(v4 + 136 * a3);
    uint64_t v6 = 8;
    if (v5 > 8) {
      uint64_t v6 = *(void *)(v4 + 136 * a3);
    }
    uint64_t v7 = v6 - 8;
    while (v5 > v7)
    {
      if ((*(void *)(v4 + 136 * a3 + 8 * (--v5 & 7) + 8) & 0xFFFFFFFFFFFFFFFuLL) <= (a2 & 0xFFFFFFFFFFFFFFFuLL)) {
        return objc_msgSend(*(id *)(v4 + 136 * a3 + 8 * (v5 & 7) + 72), sel_contents);
      }
    }
  }
  return 0;
}

uint64_t re::MutableSlice<re::Matrix4x4<float>>::range(void *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a1[1];
  if (v3 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. fromInclusive = %zu, size = %zu", "fromInclusive < size()", "range", 648, a2, v3);
    _os_crash();
    __break(1u);
  }
  else if (v3 >= a3)
  {
    return *a1 + (a2 << 6);
  }
  re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. toExclusive = %zu, size = %zu", "toExclusive <= size()", "range", 649, a2, v3);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::ecs2::SkeletalPoseBufferSystem::updateScenes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v32[0] = a3;
  v32[1] = a4;
  re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v31);
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v30, 3144, a1);
  uint64_t v6 = *(void *)(a1 + 104);
  if (v6)
  {
    if ((*(unsigned char *)(v6 + 424) & 0x10) != 0)
    {
      uint64_t v7 = *(void *)(a2 + 8);
      if (v7)
      {
        uint64_t v8 = *(uint64_t **)a2;
        uint64_t v29 = *(void *)a2 + 8 * v7;
        while (1)
        {
          uint64_t v33 = *v8;
          unint64_t v9 = *(void *)(*(void *)(a1 + 224)
                         + 16
                         * re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(a1 + 216), &v33)+ 8);
          re::DynamicBitset<unsigned long long,64ul>::clearBit(a1 + 328, v9);
          uint64_t v10 = (void *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1 + 160, v9);
          uint64_t v11 = *(void *)(*v10 + 224);
          unint64_t v12 = v10[3];
          unint64_t v13 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v10[2] + 8, v12);
          if (*(_DWORD *)(v13 + 40)) {
            int v14 = (*(uint64_t (**)(uint64_t, void *, void *, unint64_t, unint64_t, void))(*(void *)v11 + 24))(v11, v32, v10, v12, v13, 0);
          }
          else {
            int v14 = 0;
          }
          unint64_t v15 = v10[5];
          unint64_t v16 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v10[2] + 8, v15);
          if (*(_DWORD *)(v16 + 40)) {
            v14 |= (*(uint64_t (**)(uint64_t, void *, void *, unint64_t, unint64_t, void))(*(void *)v11 + 32))(v11, v32, v10, v15, v16, 0);
          }
          unint64_t v17 = v10[6];
          unint64_t v18 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v10[2] + 8, v17);
          if (*(_DWORD *)(v18 + 40)) {
            break;
          }
          if (v14) {
            goto LABEL_12;
          }
LABEL_13:
          if (*(unsigned char *)(a1 + 392))
          {
            unint64_t v19 = *(void *)(a1 + 336);
            int v20 = *(_DWORD *)(a1 + 344);
            if (v19 < 0xB)
            {
              uint64_t v23 = (uint64_t *)(a1 + 352);
              if ((v20 & 1) == 0) {
                uint64_t v23 = *(uint64_t **)(a1 + 360);
              }
              if (!v19) {
                goto LABEL_31;
              }
              uint64_t v24 = 0;
              uint64_t v25 = 8 * v19;
              do
              {
                uint64_t v26 = *v23++;
                v24 |= v26;
                v25 -= 8;
              }
              while (v25);
              if (!v24) {
                goto LABEL_31;
              }
            }
            else
            {
              uint64_t v21 = (void *)(a1 + 352);
              if ((v20 & 1) == 0) {
                uint64_t v21 = *(void **)(a1 + 360);
              }
              uint64_t v22 = 8 * v19;
              while (!*v21)
              {
                ++v21;
                v22 -= 8;
                if (!v22) {
                  goto LABEL_31;
                }
              }
            }
            id v27 = *(re::ecs2::System **)(a1 + 376);
            if (!*((unsigned char *)v27 + 86)) {
              re::ecs2::System::queueToRun(v27, 0.0);
            }
          }
LABEL_31:
          if (++v8 == (uint64_t *)v29) {
            goto LABEL_32;
          }
        }
        if (((v14 | (*(unsigned int (**)(uint64_t, void *, void *, unint64_t, unint64_t, void))(*(void *)v11 + 40))(v11, v32, v10, v17, v18, 0)) & 1) == 0)goto LABEL_13; {
LABEL_12:
        }
        re::DynamicBitset<unsigned long long,256ul>::setBit(a1 + 328, v9);
        goto LABEL_13;
      }
    }
  }
LABEL_32:
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v30);
  return re::ProfilerTimeGuard<(re::ProfilerStatistic)122>::end((uint64_t)v31);
}

uint64_t re::ecs2::SkeletalPoseBufferSystem::willAddSystemToECSService(re::ecs2::SkeletalPoseBufferSystem *this)
{
  re::ecs2::RenderingSubsystem::willAddSystemToECSService(this);
  uint64_t v2 = *((void *)this + 14);
  uint64_t v3 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
  uint64_t result = re::ServiceLocator::serviceOrNull<re::ecs2::ThrottleService>(v3);
  *((void *)this + 51) = v2;
  *((void *)this + 52) = result;
  return result;
}

double re::ecs2::SkeletalPoseBufferSystem::willRemoveSystemFromECSService(re::ecs2::SkeletalPoseBufferSystem *this)
{
  *((void *)this + 51) = 0;
  *((void *)this + 52) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 12ArcSharedObject::ArcSharedObject(this, 0) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *((void *)this + 19) = 0;
  return result;
}

void re::ecs2::SkeletalPoseBufferSystem::willAddSceneToECSService(re::ecs2::SkeletalPoseBufferSystem *this, re::ecs2::Scene *a2)
{
  uint64_t v67 = *MEMORY[0x263EF8340];
  uint64_t v4 = (char *)this + 160;
  v57[0] = (uint64_t)a2;
  uint64_t v5 = (re::ecs2::SkeletalPoseBufferSystem *)((char *)this + 280);
  unint64_t v6 = *((void *)this + 36);
  int v7 = *((_DWORD *)this + 74);
  if (v6 >= 0xB)
  {
    if (v7) {
      uint64_t v8 = (void *)((char *)this + 304);
    }
    else {
      uint64_t v8 = (void *)*((void *)this + 39);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_17;
      }
    }
    goto LABEL_16;
  }
  if (v7)
  {
    unint64_t v9 = (uint64_t *)((char *)this + 304);
    if (!v6) {
      goto LABEL_17;
    }
  }
  else
  {
    unint64_t v9 = (uint64_t *)*((void *)this + 39);
    if (!v6) {
      goto LABEL_17;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
  {
LABEL_16:
    *(void *)&long long v49 = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet((uint64_t)this + 280, 0);
    uint64_t v14 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)v4, v49);
    re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>::init(v14, (uint64_t)v4, (uint64_t)a2);
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((re::ecs2::SkeletalPoseBufferSystem *)((char *)this + 216), v57, (uint64_t *)&v49);
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)v5, v49);
    unint64_t v15 = (char *)this + 328;
    unint64_t v16 = v49;
    goto LABEL_49;
  }
LABEL_17:
  long long v56 = 0u;
  long long v49 = 0u;
  *(void *)&long long v50 = 0;
  *((void *)&v50 + 1) = -1;
  long long v51 = 0u;
  long long v52 = 0u;
  uint64_t v53 = 0;
  uint64_t v54 = 1;
  long long v55 = 0uLL;
  unint64_t v17 = *((void *)this + 25);
  *(void *)&long long v56 = 0;
  unint64_t v18 = *((void *)this + 21);
  DWORD2(v56) = 0;
  if (v17 + 1 > 4 * v18)
  {
    re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>,4ul>::setBucketsCapacity((uint64_t *)this + 20, (v17 + 4) >> 2);
    unint64_t v18 = *((void *)this + 21);
  }
  if (v18 <= v17 >> 2)
  {
    v57[1] = 0;
    memset(v66, 0, sizeof(v66));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v58 = 136315906;
    uint64_t v59 = "operator[]";
    __int16 v60 = 1024;
    int v61 = 858;
    __int16 v62 = 2048;
    unint64_t v63 = v17 >> 2;
    __int16 v64 = 2048;
    unint64_t v65 = v18;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_69;
  }
  if (*((unsigned char *)this + 176)) {
    unint64_t v19 = (char *)this + 184;
  }
  else {
    unint64_t v19 = (char *)*((void *)this + 24);
  }
  uint64_t v20 = *(void *)&v19[8 * (v17 >> 2)];
  ++*((void *)this + 25);
  ++*((_DWORD *)this + 52);
  uint64_t v21 = v20 + 112 * (v17 & 3);
  long long v22 = v49;
  long long v23 = v50;
  long long v24 = v51;
  *(void *)(v21 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v52;
  *(_OWORD *)(v21 + 16) = v23;
  *(_OWORD *)(v21 + 32) = v24;
  *(_OWORD *)uint64_t v21 = v22;
  re::BucketArray<RESubscriptionHandle,8ul>::BucketArray(v21 + 56, (uint64_t)&v52 + 8);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStateSceneData(&v49);
  uint64_t v26 = *((void *)this + 25);
  if (!v26)
  {
LABEL_69:
    re::internal::assertLog((re::internal *)4, v25, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
  }
  uint64_t v27 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)v4, v26 - 1);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>::init(v27, (uint64_t)v4, v57[0]);
  *(void *)&v66[0] = *((void *)this + 25) - 1;
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((re::ecs2::SkeletalPoseBufferSystem *)((char *)this + 216), v57, (uint64_t *)v66);
  unint64_t v28 = *((void *)this + 25);
  unint64_t v29 = *((void *)this + 40);
  if ((v28 & 0x3F) != 0) {
    unint64_t v30 = (v28 >> 6) + 1;
  }
  else {
    unint64_t v30 = v28 >> 6;
  }
  *((void *)this + 4ArcSharedObject::ArcSharedObject(this, 0) = v28;
  *(void *)&long long v49 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize(v5, v30, &v49);
  if (v28 && v29 > v28)
  {
    uint64_t v31 = 63;
    uint64_t v32 = *((void *)this + 40) & 0x3FLL;
    if (v32 && v32 != 63) {
      uint64_t v31 = ~(-1 << v32);
    }
    if (*((unsigned char *)this + 296)) {
      uint64_t v33 = (char *)this + 304;
    }
    else {
      uint64_t v33 = (char *)*((void *)this + 39);
    }
    *(void *)&v33[8 * *((void *)this + 36) - 8] &= v31;
  }
  unint64_t v34 = *((void *)this + 25);
  unint64_t v35 = *((void *)this + 46);
  if ((v34 & 0x3F) != 0) {
    unint64_t v36 = (v34 >> 6) + 1;
  }
  else {
    unint64_t v36 = v34 >> 6;
  }
  *((void *)this + 46) = v34;
  *(void *)&long long v49 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((re::ecs2::SkeletalPoseBufferSystem *)((char *)this + 328), v36, &v49);
  if (v34 && v35 > v34)
  {
    uint64_t v37 = 63;
    uint64_t v38 = *((void *)this + 46) & 0x3FLL;
    if (v38 && v38 != 63) {
      uint64_t v37 = ~(-1 << v38);
    }
    if (*((unsigned char *)this + 344)) {
      unint64_t v39 = (char *)this + 352;
    }
    else {
      unint64_t v39 = (char *)*((void *)this + 45);
    }
    *(void *)&v39[8 * *((void *)this + 42) - 8] &= v37;
  }
  unint64_t v16 = *(void *)&v66[0];
  unint64_t v15 = (char *)this + 328;
LABEL_49:
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v15, v16);
  if (!*((unsigned char *)this + 392)) {
    return;
  }
  unint64_t v40 = *((void *)this + 42);
  int v41 = *((_DWORD *)this + 86);
  if (v40 >= 0xB)
  {
    if (v41) {
      uint64_t v42 = (void *)((char *)this + 352);
    }
    else {
      uint64_t v42 = (void *)*((void *)this + 45);
    }
    uint64_t v44 = 8 * v40;
    while (!*v42)
    {
      ++v42;
      v44 -= 8;
      if (!v44) {
        return;
      }
    }
LABEL_65:
    unint64_t v48 = (re::ecs2::System *)*((void *)this + 47);
    if (!*((unsigned char *)v48 + 86)) {
      re::ecs2::System::queueToRun(v48, 0.0);
    }
    return;
  }
  if (v41)
  {
    uint64_t v43 = (uint64_t *)((char *)this + 352);
    if (!v40) {
      return;
    }
  }
  else
  {
    uint64_t v43 = (uint64_t *)*((void *)this + 45);
    if (!v40) {
      return;
    }
  }
  uint64_t v45 = 0;
  uint64_t v46 = 8 * v40;
  do
  {
    uint64_t v47 = *v43++;
    v45 |= v47;
    v46 -= 8;
  }
  while (v46);
  if (v45) {
    goto LABEL_65;
  }
}

uint64_t re::ecs2::SkeletalPoseBufferSystem::willRemoveSceneFromECSService(re::ecs2::SkeletalPoseBufferSystem *this, re::ecs2::Scene *a2)
{
  unint64_t v16 = a2;
  uint64_t v3 = (uint64_t *)((char *)this + 216);
  uint64_t result = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)this + 27, &v16);
  if (result != -1)
  {
    uint64_t v5 = *((void *)this + 28) + 16 * result;
    re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)this + 280, *(void *)(v5 + 8));
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)this + 328, *(void *)(v5 + 8));
    unint64_t v6 = (void *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)this + 160, *(void *)(v5 + 8));
    if (*v6)
    {
      int v7 = v6;
      *unint64_t v6 = 0;
      uint64_t v8 = v6 + 1;
      uint64_t v9 = *(void *)(v6[1] + 288);
      if (v9)
      {
        uint64_t v10 = v6[12];
        if (v10)
        {
          for (unint64_t i = 0; i != v10; ++i)
          {
            uint64_t v12 = re::BucketArray<RESubscriptionHandle,8ul>::operator[]((uint64_t)(v7 + 7), i);
            re::EventBus::unsubscribe(v9, *(void *)v12, *(void *)(v12 + 8));
          }
        }
      }
      re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)(v7 + 7));
      uint64_t v13 = 0;
      uint64_t v14 = v7 + 3;
      do
      {
        unint64_t v15 = (re::ecs2::ComponentBucketsBase *)v7[2];
        if (*(void *)v15) {
          re::ecs2::ComponentBucketsBase::removeBucket(v15, v14[v13]);
        }
        v14[v13++] = -1;
      }
      while (v13 != 4);
      *uint64_t v8 = 0;
      v8[1] = 0;
    }
    return re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::remove(v3, &v16);
  }
  return result;
}

void *re::ecs2::allocInfo_SkinnedMeshJointRange(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF84910, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF84910))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF84A10, "SkinnedMeshJointRange");
    __cxa_guard_release(&qword_26AF84910);
  }
  return &unk_26AF84A10;
}

void re::ecs2::initInfo_SkinnedMeshJointRange(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v21[0] = 0x49833F28F7FA4720;
  v21[1] = "SkinnedMeshJointRange";
  re::StringID::destroyString((re::StringID *)v21);
  *((_OWORD *)this + 2) = v22;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF84918, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF84918);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      int v7 = re::introspect_uint32_t((re *)1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "instanceIndex";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 32) = 1;
      *(_DWORD *)(v8 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v8 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF84950 = v8;
      uint64_t v9 = re::introspectionAllocator((re *)v8);
      uint64_t v11 = re::introspect_uint32_t((re *)1, v10);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "jointRangeStartIndex";
      *(void *)(v12 + 16) = v11;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 32) = 0x400000002;
      *(_DWORD *)(v12 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v12 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      *(void *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF84958 = v12;
      uint64_t v13 = re::introspectionAllocator((re *)v12);
      unint64_t v15 = re::introspect_uint32_t((re *)1, v14);
      uint64_t v16 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v13 + 32))(v13, 72, 8);
      *(_DWORD *)uint64_t v16 = 1;
      *(void *)(v16 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "jointRangeSize";
      *(void *)(v16 + 16) = v15;
      *(void *)(v16 + 24) = 0;
      *(void *)(v16 + 32) = 0x800000003;
      *(_DWORD *)(v16 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v16 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      *(void *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_26AF84960 = v16;
      unint64_t v17 = re::introspectionAllocator((re *)v16);
      re::IntrospectionInfo<re::DynamicArray<unsigned short>>::get((uint64_t)v17, v18);
      uint64_t v19 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v17 + 32))(v17, 72, 8);
      *(_DWORD *)uint64_t v19 = 1;
      *(void *)(v19 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "partIndices";
      *(void *)(v19 + 16) = &qword_26AF84990;
      *(void *)(v19 + 24) = 0;
      *(void *)(v19 + 32) = 0x1000000004;
      *(_DWORD *)(v19 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v19 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      *(void *)(v19 + 56) = 0;
      *(_DWORD *)(v19 + 64) = 0;
      qword_26AF84968 = v19;
      __cxa_guard_release(&qword_26AF84918);
    }
  }
  *((void *)this + 2) = 0x3800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 4;
  *((void *)this + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = &qword_26AF84950;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::SkinnedMeshJointRange>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 1ArcSharedObject::ArcSharedObject(this, 0) = re::internal::defaultDestruct<re::ecs2::SkinnedMeshJointRange>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::SkinnedMeshJointRange>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::SkinnedMeshJointRange>;
  re::IntrospectionRegistry::add(this, v3);
  long long v20 = v22;
}

void re::IntrospectionInfo<re::DynamicArray<unsigned short>>::get(uint64_t a1, const re::IntrospectionBase *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF84940, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF84940))
  {
    re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_26AF84990);
    qword_26AF84990 = (uint64_t)&unk_26E6F99D0;
    __cxa_guard_release(&qword_26AF84940);
  }
  if ((_MergedGlobals_186 & 1) == 0)
  {
    uint64_t v2 = re::introspect_uint16_t((re *)1, a2);
    if ((_MergedGlobals_186 & 1) == 0)
    {
      uint64_t v3 = (uint64_t)v2;
      _MergedGlobals_186 = 1;
      int v4 = v2[6];
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF84990, 0);
      qword_26AF849A0 = 0x2800000003;
      dword_26AF849A8 = v4;
      word_26AF849AC = 0;
      *(void *)&xmmword_26AF849B0 = 0;
      *((void *)&xmmword_26AF849B0 + 1) = 0xFFFFFFFFLL;
      qword_26AF849C0 = v3;
      unk_26AF849C8 = 0;
      qword_26AF84990 = (uint64_t)&unk_26E6F99D0;
      re::IntrospectionRegistry::add(v5, v6);
      re::getPrettyTypeName((re *)&qword_26AF84990, (const re::IntrospectionBase *)&v15);
      if (v16) {
        int v7 = *(const char **)&v17[7];
      }
      else {
        int v7 = v17;
      }
      if (v15 && (v16 & 1) != 0) {
        (*(void (**)(void))(*(void *)v15 + 40))();
      }
      long long v12 = *(_OWORD *)(v3 + 32);
      uint64_t v8 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v13);
      if (v8)
      {
        uint64_t v9 = *v8;
        *((void *)&v11 + 1) = v9;
      }
      else
      {
        long long v14 = v12;
        re::TypeBuilder::beginListType((uint64_t)&v15, v13, 1, 0x28uLL, 8uLL, &v14);
        re::TypeBuilder::setConstructor((uint64_t)&v15, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<unsigned short>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v15, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<unsigned short>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v15, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v15, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<unsigned short>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<unsigned short>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v15, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<unsigned short>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v15, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<unsigned short>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<unsigned short>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<unsigned short>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v15, v10);
      }
      xmmword_26AF849B0 = v11;
      re::StringID::destroyString((re::StringID *)v13);
    }
  }
}

double re::internal::defaultConstruct<re::ecs2::SkinnedMeshJointRange>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)&double result = 0xFFFFFFFFLL;
  *(void *)a3 = 0xFFFFFFFFLL;
  *(_DWORD *)(a3 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
  *(void *)(a3 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 16) = 0;
  *(_DWORD *)(a3 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
  return result;
}

uint64_t re::internal::defaultDestruct<re::ecs2::SkinnedMeshJointRange>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::DynamicArray<unsigned long>::deinit(a3 + 16);
}

double re::internal::defaultConstructV2<re::ecs2::SkinnedMeshJointRange>(uint64_t a1)
{
  *(void *)&double result = 0xFFFFFFFFLL;
  *(void *)a1 = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
  *(void *)(a1 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::SkinnedMeshJointRange>(uint64_t a1)
{
  return re::DynamicArray<unsigned long>::deinit(a1 + 16);
}

void *re::ecs2::allocInfo_SkeletalPoseBufferComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF84930, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF84930))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF84A88, "SkeletalPoseBufferComponent");
    __cxa_guard_release(&qword_26AF84930);
  }
  return &unk_26AF84A88;
}

void re::ecs2::initInfo_SkeletalPoseBufferComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  unint64_t v33 = 0xCDC652ECDEE0A8A6;
  v34[0] = "SkeletalPoseBufferComponent";
  re::StringID::destroyString((re::StringID *)&v33);
  *((_OWORD *)this + 2) = v28;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF84928, memory_order_acquire) & 1) == 0)
  {
    int v4 = (re *)__cxa_guard_acquire(&qword_26AF84928);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 4ArcSharedObject::ArcSharedObject(this, 0) = 3;
      *(void *)(v7 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF84970 = v7;
      uint64_t v8 = re::introspectionAllocator((re *)v7);
      uint64_t v9 = re::IntrospectionInfo<re::DynamicArray<re::Matrix4x4<float>>>::get(1);
      uint64_t v10 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v10 = 1;
      *(void *)(v10 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "m_totalAbsoluteJointTransforms";
      *(void *)(v10 + 16) = v9;
      *(void *)(v10 + 24) = 0;
      *(void *)(v10 + 32) = 0x6000000001;
      *(_DWORD *)(v10 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v10 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      *(void *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_26AF84978 = v10;
      long long v11 = (re::ecs2 *)re::introspectionAllocator((re *)v10);
      long long v12 = v11;
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF84948, memory_order_acquire) & 1) == 0)
      {
        long long v11 = (re::ecs2 *)__cxa_guard_acquire(&qword_26AF84948);
        if (v11)
        {
          re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)qword_26AF849D0);
          qword_26AF849D0[0] = (uint64_t)&unk_26E6F9A68;
          __cxa_guard_release(&qword_26AF84948);
        }
      }
      if ((byte_26AF84909 & 1) == 0)
      {
        uint64_t v13 = (void *)qword_26AF84920;
        if (qword_26AF84920
          || (uint64_t v13 = re::ecs2::allocInfo_SkinnedMeshJointRange(v11),
              qword_26AF84920 = (uint64_t)v13,
              re::ecs2::initInfo_SkinnedMeshJointRange((re::ecs2 *)v13, v14),
              (byte_26AF84909 & 1) == 0))
        {
          byte_26AF84909 = 1;
          int v15 = *((_DWORD *)v13 + 6);
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)qword_26AF849D0, 0);
          unk_26AF849E0 = 0x2800000003;
          unk_26AF849E8 = v15;
          unk_26AF849EC = 0;
          *(void *)&xmmword_26AF849F0 = 0;
          *((void *)&xmmword_26AF849F0 + 1) = 0xFFFFFFFFLL;
          unk_26AF84A00 = v13;
          unk_26AF84A08 = 0;
          qword_26AF849D0[0] = (uint64_t)&unk_26E6F9A68;
          re::IntrospectionRegistry::add(v16, v17);
          re::getPrettyTypeName((re *)qword_26AF849D0, (const re::IntrospectionBase *)&v33);
          if (v34[0]) {
            unint64_t v18 = (const char *)v34[1];
          }
          else {
            unint64_t v18 = (char *)v34 + 1;
          }
          if (v33 && (v34[0] & 1) != 0) {
            (*(void (**)(void))(*(void *)v33 + 40))();
          }
          long long v30 = *((_OWORD *)v13 + 2);
          uint64_t v19 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v31);
          if (v19)
          {
            uint64_t v20 = *v19;
            *((void *)&v29 + 1) = v20;
          }
          else
          {
            long long v32 = v30;
            re::TypeBuilder::beginListType((uint64_t)&v33, v31, 1, 0x28uLL, 8uLL, &v32);
            re::TypeBuilder::setConstructor((uint64_t)&v33, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SkinnedMeshJointRange>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
            re::TypeBuilder::setDestructor((uint64_t)&v33, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SkinnedMeshJointRange>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
            re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v33, 1);
            re::TypeBuilder::setListAccessors((uint64_t)&v33, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SkinnedMeshJointRange>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SkinnedMeshJointRange>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
            re::TypeBuilder::setListIndexer((uint64_t)&v33, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SkinnedMeshJointRange>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
            re::TypeBuilder::setListIterator((uint64_t)&v33, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SkinnedMeshJointRange>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SkinnedMeshJointRange>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SkinnedMeshJointRange>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
            re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v33, v21);
          }
          xmmword_26AF849F0 = v29;
          re::StringID::destroyString((re::StringID *)v31);
        }
      }
      uint64_t v22 = (*(uint64_t (**)(re::ecs2 *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 72, 8);
      *(_DWORD *)uint64_t v22 = 1;
      *(void *)(v22 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "m_jointTransformRanges";
      *(void *)(v22 + 16) = qword_26AF849D0;
      *(void *)(v22 + 24) = 0;
      *(void *)(v22 + 32) = 0x8800000002;
      *(_DWORD *)(v22 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v22 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      *(void *)(v22 + 56) = 0;
      *(_DWORD *)(v22 + 64) = 0;
      qword_26AF84980 = v22;
      long long v23 = re::introspectionAllocator((re *)v22);
      uint64_t v25 = re::introspect_size_t((re *)1, v24);
      uint64_t v26 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v23 + 32))(v23, 72, 8);
      *(_DWORD *)uint64_t v26 = 1;
      *(void *)(v26 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "m_processedJointTransformRangeHash";
      *(void *)(v26 + 16) = v25;
      *(void *)(v26 + 24) = 0;
      *(void *)(v26 + 32) = 0x5800000003;
      *(_DWORD *)(v26 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v26 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      *(void *)(v26 + 56) = 0;
      *(_DWORD *)(v26 + 64) = 0;
      qword_26AF84988 = v26;
      __cxa_guard_release(&qword_26AF84928);
    }
  }
  *((void *)this + 2) = 0x27000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 4;
  *((void *)this + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = &qword_26AF84970;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::SkeletalPoseBufferComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 1ArcSharedObject::ArcSharedObject(this, 0) = re::internal::defaultDestruct<re::ecs2::SkeletalPoseBufferComponent>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::SkeletalPoseBufferComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::SkeletalPoseBufferComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v27 = v28;
}

void *re::internal::defaultConstruct<re::ecs2::SkeletalPoseBufferComponent>(uint64_t a1, uint64_t a2, void *a3)
{
  return re::make::shared::unsafelyInplace<re::ecs2::SkeletalPoseBufferComponent>(a3);
}

uint64_t re::internal::defaultDestruct<re::ecs2::SkeletalPoseBufferComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

uint64_t re::internal::defaultDestructV2<re::ecs2::SkeletalPoseBufferComponent>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_SkeletalPoseBufferComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"SkeletalPoseBufferComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_SkeletalPoseBufferComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_SkeletalPoseBufferComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::SkeletalPoseBufferComponent>, this);
}

void *re::ecs2::allocInfo_SkeletalPoseBufferSystem(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF84938, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF84938))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF84B00, "SkeletalPoseBufferSystem");
    __cxa_guard_release(&qword_26AF84938);
  }
  return &unk_26AF84B00;
}

void re::ecs2::initInfo_SkeletalPoseBufferSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v5[0] = 0xCEA160DB8A90D532;
  v5[1] = "SkeletalPoseBufferSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0x1C000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = &re::ecs2::initInfo_SkeletalPoseBufferSystem(re::IntrospectionBase *)::structureAttributes;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::SkeletalPoseBufferSystem>;
  *((void *)this + 1ArcSharedObject::ArcSharedObject(this, 0) = re::internal::defaultDestruct<re::ecs2::SkeletalPoseBufferSystem>;
  *((void *)this + 11) = re::internal::defaultRetain<re::ecs2::SkeletalPoseBufferSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 12) = re::internal::defaultRelease<re::ecs2::SkeletalPoseBufferSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::SkeletalPoseBufferSystem>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::SkeletalPoseBufferSystem>;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

re::ecs2::SkeletalPoseBufferSystem *re::internal::defaultConstruct<re::ecs2::SkeletalPoseBufferSystem>(int a1, int a2, re::ecs2::SkeletalPoseBufferSystem *this)
{
  return re::ecs2::SkeletalPoseBufferSystem::SkeletalPoseBufferSystem(this);
}

void *re::internal::defaultDestruct<re::ecs2::SkeletalPoseBufferSystem>(uint64_t a1, uint64_t a2, void *a3)
{
  a3[50] = &unk_26E6F9778;
  re::FixedArray<CoreIKTransform>::deinit(a3 + 53);
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a3 + 20);
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultDestructV2<re::ecs2::SkeletalPoseBufferSystem>(void *a1)
{
  a1[50] = &unk_26E6F9778;
  re::FixedArray<CoreIKTransform>::deinit(a1 + 53);
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 20);
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_SkeletalPoseBufferSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"SkeletalPoseBufferSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_SkeletalPoseBufferSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_SkeletalPoseBufferSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::SkeletalPoseBufferSystem>, this);
}

uint64_t re::ecs2::SkeletalPoseBufferComponentStateImpl::dependsOnComponents(re::ecs2::SkeletalPoseBufferComponentStateImpl *this)
{
  return *((void *)this + 5);
}

unint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::SkeletalPoseBufferComponent>::didDependentComponentChange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a3 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SkeletalPoseBufferComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (result)
  {
    uint64_t v5 = (re::ecs2::Component *)result;
    uint64_t v6 = 24;
    unint64_t v7 = 0xFFFFFFFFLL;
    do
    {
      unint64_t v8 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a2 + 16), *(void *)(a2 + v6), v5);
      if (v8 != -1 && (v9 & 0xFFFFFF00000000) != 0)
      {
        unint64_t v11 = v8;
        unint64_t v7 = v9;
        goto LABEL_11;
      }
      v6 += 8;
    }
    while (v6 != 56);
    unint64_t v11 = -1;
LABEL_11:
    return re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>::setComponentState(a2, v11, v7);
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::SkeletalPoseBufferComponent>::processUpdatingComponents()
{
  return 0;
}

void re::ecs2::SkeletalPoseBufferSystem::~SkeletalPoseBufferSystem(re::ecs2::SkeletalPoseBufferSystem *this)
{
  *((void *)this + 5ArcSharedObject::ArcSharedObject(this, 0) = &unk_26E6F9778;
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 53);
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 20);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  *((void *)this + 5ArcSharedObject::ArcSharedObject(this, 0) = &unk_26E6F9778;
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 53);
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 20);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::SkeletalPoseBufferSystem::typeInfo(re::ecs2::SkeletalPoseBufferSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"SkeletalPoseBufferSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_SkeletalPoseBufferSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_SkeletalPoseBufferSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::SkeletalPoseBufferSystem>, 0);
}

void *re::DynamicArray<re::ecs2::SkinnedMeshJointRange>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      unint64_t result = (void *)*result;
      if (!*v5)
      {
        unint64_t result = (void *)re::DynamicArray<re::ecs2::SkinnedMeshJointRange>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x38uLL))
        {
          uint64_t v2 = 56 * a2;
          unint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 56 * a2, 8);
          if (result)
          {
            unint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 56, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        unint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      unint64_t v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = v8 + 56 * v9;
        unint64_t v11 = v7;
        do
        {
          uint64_t v12 = *(void *)v8;
          *((_DWORD *)v11 + 2) = *(_DWORD *)(v8 + 8);
          *unint64_t v11 = v12;
          v11[6] = 0;
          v11[3] = 0;
          v11[4] = 0;
          void v11[2] = 0;
          *((_DWORD *)v11 + 1ArcSharedObject::ArcSharedObject(this, 0) = 0;
          uint64_t v13 = *(void *)(v8 + 16);
          uint64_t v14 = *(void *)(v8 + 24);
          uint64_t v15 = v8 + 16;
          void v11[2] = v13;
          v11[3] = v14;
          *(void *)uint64_t v15 = 0;
          *(void *)(v15 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
          uint64_t v16 = v11[4];
          v11[4] = *(void *)(v15 + 16);
          *(void *)(v15 + 16) = v16;
          uint64_t v17 = v11[6];
          v11[6] = *(void *)(v15 + 32);
          *(void *)(v15 + 32) = v17;
          ++*(_DWORD *)(v15 + 24);
          ++*((_DWORD *)v11 + 10);
          re::DynamicArray<unsigned long>::deinit(v15);
          uint64_t v8 = v15 + 40;
          v11 += 7;
        }
        while (v8 != v10);
        uint64_t v8 = v5[4];
      }
      unint64_t result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

void *re::DynamicArray<re::ecs2::SkeletalPoseBufferComponent::MeshBoundsEstimatorForJointRange>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      unint64_t result = (void *)*result;
      if (!*v5)
      {
        unint64_t result = (void *)re::DynamicArray<re::ecs2::SkeletalPoseBufferComponent::MeshBoundsEstimatorForJointRange>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (a2 >> 57)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 128, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          unint64_t v2 = a2 << 7;
          unint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, a2 << 7, 8);
          if (result)
          {
            unint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        unint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      unint64_t v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = (uint64_t *)v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = &v8[16 * v9];
        unint64_t v11 = v7;
        do
        {
          int v12 = *(_DWORD *)v8;
          void v11[5] = 0;
          void v11[2] = 0;
          v11[3] = 0;
          v11[1] = 0;
          *((_DWORD *)v11 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
          uint64_t v14 = (uint64_t)(v8 + 1);
          uint64_t v13 = v8[1];
          *(_DWORD *)unint64_t v11 = v12;
          uint64_t v15 = v8[2];
          v11[1] = v13;
          v8[1] = 0;
          void v11[2] = v15;
          v8[2] = 0;
          uint64_t v16 = v11[3];
          v11[3] = v8[3];
          v8[3] = v16;
          uint64_t v17 = v11[5];
          void v11[5] = v8[5];
          void v8[5] = v17;
          ++*((_DWORD *)v8 + 8);
          ++*((_DWORD *)v11 + 8);
          v11[7] = 0;
          v11[8] = 0;
          v11[6] = 0;
          unint64_t v18 = v8 + 6;
          v11[6] = v8[6];
          void v8[6] = 0;
          uint64_t v19 = v11[8];
          uint64_t v20 = v8[8];
          v11[7] = v8[7];
          v11[8] = v20;
          v8[7] = 0;
          v8[8] = v19;
          v11[10] = 0;
          v11[11] = 0;
          v11[9] = 0;
          uint64_t v21 = v8 + 9;
          v11[9] = v8[9];
          v8[9] = 0;
          uint64_t v22 = v11[11];
          uint64_t v23 = v8[11];
          v11[10] = v8[10];
          v11[11] = v23;
          v8[10] = 0;
          v8[11] = v22;
          v11[12] = v8[12];
          v11[13] = 0;
          v11[14] = 0;
          v11[15] = 0;
          uint64_t v25 = v8[13];
          long long v24 = v8 + 13;
          v11[13] = v25;
          *long long v24 = 0;
          uint64_t v26 = v11[15];
          uint64_t v27 = v24[2];
          v11[14] = v24[1];
          v11[15] = v27;
          v24[1] = 0;
          v24[2] = v26;
          re::FixedArray<CoreIKTransform>::deinit(v24);
          re::FixedArray<CoreIKTransform>::deinit(v21);
          re::FixedArray<CoreIKTransform>::deinit(v18);
          re::DynamicArray<unsigned long>::deinit(v14);
          uint64_t v8 = v24 + 3;
          v11 += 16;
        }
        while (v8 != v10);
        uint64_t v8 = (uint64_t *)v5[4];
      }
      unint64_t result = (void *)(*(uint64_t (**)(void, uint64_t *))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

void **re::DynamicArray<unsigned short>::copy(void **result, uint64_t a2)
{
  uint64_t v3 = result;
  unint64_t v4 = *(void *)(a2 + 16);
  if (v4 >= (unint64_t)result[2])
  {
    re::DynamicArray<unsigned short>::setCapacity(result, *(void *)(a2 + 16));
    uint64_t v5 = v3[2];
    if (v5)
    {
      memmove(v3[4], *(const void **)(a2 + 32), 2 * (void)v5);
      uint64_t v5 = v3[2];
    }
    unint64_t result = (void **)memcpy((char *)v3[4] + 2 * (void)v5, (const void *)(*(void *)(a2 + 32) + 2 * (void)v5), 2 * v4 - 2 * (void)v5);
  }
  else if (v4)
  {
    unint64_t result = (void **)memmove(result[4], *(const void **)(a2 + 32), 2 * v4);
  }
  v3[2] = (void *)v4;
  return result;
}

void *re::DynamicOverflowArray<re::AABB,8ul>::setCapacity(void *result, unint64_t a2)
{
  unint64_t v4 = result;
  uint64_t v5 = *result;
  if (a2 && !v5)
  {
    unint64_t result = (void *)re::DynamicOverflowArray<re::AABB,8ul>::setCapacity(v4, a2);
    int v6 = *((_DWORD *)v4 + 4) + 2;
LABEL_4:
    *((_DWORD *)v4 + 4) = v6;
    return result;
  }
  int v7 = *((_DWORD *)result + 4);
  if (v7) {
    uint64_t v8 = 8;
  }
  else {
    uint64_t v8 = result[4];
  }
  if (v8 != a2)
  {
    unint64_t v9 = result[1];
    if (v9 <= a2 && (a2 > 8 || (v7 & 1) == 0))
    {
      if (a2 < 9)
      {
        uint64_t v14 = result + 4;
        uint64_t v15 = v4[5];
        if (v7) {
          uint64_t v16 = v4 + 4;
        }
        else {
          uint64_t v16 = (const void *)v4[5];
        }
        memcpy(v14, v16, 32 * v9);
        unint64_t result = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 40))(v5, v15);
        int v6 = *((_DWORD *)v4 + 4) | 1;
        goto LABEL_4;
      }
      if (a2 >> 59)
      {
        re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicOverflowArray<T, N>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 646, 32, a2);
        _os_crash();
        __break(1u);
      }
      else
      {
        uint64_t v2 = 32 * a2;
        uint64_t v10 = (void *)(*(uint64_t (**)(void, unint64_t, uint64_t))(*(void *)v5 + 32))(*result, 32 * a2, 16);
        if (v10)
        {
          int v12 = v10;
          if (v4[2]) {
            uint64_t v13 = v4 + 4;
          }
          else {
            uint64_t v13 = (const void *)v4[5];
          }
          unint64_t result = memcpy(v10, v13, 32 * v4[1]);
          int v17 = *((_DWORD *)v4 + 4);
          if ((v17 & 1) == 0)
          {
            unint64_t result = (void *)(*(uint64_t (**)(void, void))(*(void *)*v4 + 40))(*v4, v4[5]);
            int v17 = *((_DWORD *)v4 + 4);
          }
          *((_DWORD *)v4 + 4) = v17 & 0xFFFFFFFE;
          v4[4] = a2;
          v4[5] = v12;
          return result;
        }
      }
      re::internal::assertLog((re::internal *)6, v11, "assertion failure: '%s' (%s:line %i) DynamicOverflowArray<T, N> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 650, v2, *(void *)(*v4 + 8));
      unint64_t result = (void *)_os_crash();
      __break(1u);
    }
  }
  return result;
}

_anonymous_namespace_ *re::DynamicOverflowArray<re::AABB,8ul>::ensureCapacity(_anonymous_namespace_ *result)
{
  uint64_t v1 = result;
  if (*(void *)result)
  {
    unint64_t v2 = *((void *)result + 1);
    if (*((unsigned char *)result + 16)) {
      unint64_t v3 = 8;
    }
    else {
      unint64_t v3 = *((void *)result + 4);
    }
    if (v2 >= v3)
    {
      return re::DynamicOverflowArray<re::AABB,8ul>::growCapacity(result, v2 + 1);
    }
  }
  else
  {
    unint64_t v4 = *((void *)v1 + 1) + 1;
    unint64_t result = (_anonymous_namespace_ *)re::DynamicOverflowArray<re::AABB,8ul>::setCapacity(v1, v4);
    *((_DWORD *)v1 + 4) += 2;
  }
  return result;
}

_anonymous_namespace_ *re::DynamicOverflowArray<re::AABB,8ul>::growCapacity(_anonymous_namespace_ *result, unint64_t a2)
{
  unint64_t v2 = a2;
  unint64_t v3 = result;
  if (!*(void *)result)
  {
    unint64_t result = (_anonymous_namespace_ *)re::DynamicOverflowArray<re::AABB,8ul>::setCapacity(v3, v2);
    *((_DWORD *)v3 + 4) += 2;
    return result;
  }
  if (*((unsigned char *)result + 16))
  {
    if (a2 <= 8) {
      return result;
    }
    unint64_t v5 = 16;
  }
  else
  {
    unint64_t v4 = *((void *)result + 4);
    if (v4 >= a2) {
      return result;
    }
    unint64_t v5 = 2 * v4;
  }
  if (v5 > a2) {
    a2 = v5;
  }
  return (_anonymous_namespace_ *)re::DynamicOverflowArray<re::AABB,8ul>::setCapacity(result, a2);
}

uint64_t re::DynamicArray<re::Matrix4x4<float>>::DynamicArray(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  unint64_t v3 = *(void *)(a2 + 8);
  if (v3)
  {
    re::DynamicArray<re::Matrix4x4<float>>::setCapacity((void *)a1, v3);
    ++*(_DWORD *)(a1 + 24);
    re::DynamicArray<re::Matrix4x4<float>>::copy((void *)a1, 0, *(char **)a2, *(void *)(a2 + 8));
  }
  return a1;
}

uint64_t *re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v84 = *MEMORY[0x263EF8340];
  *(void *)a1 = a2;
  *(void *)(a1 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = a3;
  *(void *)(a1 + 16) = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a3 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SkeletalPoseBufferComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)+ 480;
  for (uint64_t i = 24; i != 56; i += 8)
  {
    int v7 = (_anonymous_namespace_ *)re::ecs2::ComponentBucketsBase::addBucket(*(re::ecs2::ComponentBucketsBase **)(a1 + 16));
    *(void *)(a1 + i) = v7;
  }
  unint64_t v9 = *(re::EventBus **)(a3 + 288);
  if (v9)
  {
    uint64_t v82 = re::globalAllocators((re *)result)[2];
    uint64_t v10 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v82 + 32))(v82, 32, 0);
    *uint64_t v10 = &unk_26E6F9870;
    v10[1] = a1;
    _OWORD v10[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>::componentChangedHandler<REComponentDidChangeEvent>;
    void v10[3] = 0;
    unint64_t v83 = v10;
    uint64_t v11 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v81, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::SkeletalPoseBufferComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v13 = v12;
    uint64_t v14 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *uint64_t v14 = v11;
    v14[1] = v13;
    uint64_t v15 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v81);
    uint64_t v79 = re::globalAllocators(v15)[2];
    uint64_t v16 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v79 + 32))(v79, 32, 0);
    *uint64_t v16 = &unk_26E6F98C8;
    v16[1] = a1;
    v16[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>::componentChangedHandler<REComponentDidActivateEvent>;
    v16[3] = 0;
    uint64_t v80 = v16;
    uint64_t v17 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v78, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::SkeletalPoseBufferComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v19 = v18;
    uint64_t v20 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *uint64_t v20 = v17;
    v20[1] = v19;
    uint64_t v21 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v78);
    uint64_t v76 = re::globalAllocators(v21)[2];
    uint64_t v22 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v76 + 32))(v76, 32, 0);
    *uint64_t v22 = &unk_26E6F9920;
    v22[1] = a1;
    v22[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>::componentChangedHandler<REComponentWillDeactivateEvent>;
    v22[3] = 0;
    uint64_t v77 = v22;
    uint64_t v23 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v75, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::SkeletalPoseBufferComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v25 = v24;
    uint64_t v26 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *uint64_t v26 = v23;
    v26[1] = v25;
    uint64_t v27 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v75);
    uint64_t v73 = re::globalAllocators(v27)[2];
    long long v28 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v73 + 32))(v73, 32, 0);
    *long long v28 = &unk_26E6F9978;
    v28[1] = a1;
    uint64_t v28[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>::componentChangedHandler<REComponentDidAddEvent>;
    v28[3] = 0;
    uint64_t v74 = v28;
    uint64_t v29 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v72, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::SkeletalPoseBufferComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v31 = v30;
    long long v32 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    void *v32 = v29;
    v32[1] = v31;
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v72);
    unint64_t result = (uint64_t *)(***(uint64_t (****)(void))(a2 + 224))();
    if (v33)
    {
      unint64_t v34 = result;
      uint64_t v35 = 8 * v33;
      do
      {
        uint64_t v36 = *v34++;
        uint64_t v70 = re::globalAllocators((re *)result)[2];
        uint64_t v71 = 0;
        uint64_t v37 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v70 + 32))(v70, 32, 0);
        *uint64_t v37 = &unk_26E6F9870;
        v37[1] = a1;
        v37[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>;
        v37[3] = 0;
        uint64_t v71 = v37;
        uint64_t v38 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v69, v36, 0);
        uint64_t v40 = v39;
        int v41 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *int v41 = v38;
        v41[1] = v40;
        uint64_t v42 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v69);
        uint64_t v67 = re::globalAllocators(v42)[2];
        uint64_t v68 = 0;
        uint64_t v43 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v67 + 32))(v67, 32, 0);
        void *v43 = &unk_26E6F98C8;
        v43[1] = a1;
        uint64_t v43[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>;
        v43[3] = 0;
        uint64_t v68 = v43;
        uint64_t v44 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v66, v36, 0);
        uint64_t v46 = v45;
        uint64_t v47 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *uint64_t v47 = v44;
        v47[1] = v46;
        unint64_t v48 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v66);
        uint64_t v64 = re::globalAllocators(v48)[2];
        unint64_t v65 = 0;
        long long v49 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v64 + 32))(v64, 32, 0);
        *long long v49 = &unk_26E6F9920;
        v49[1] = a1;
        v49[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>;
        v49[3] = 0;
        unint64_t v65 = v49;
        uint64_t v50 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v63, v36, 0);
        uint64_t v52 = v51;
        uint64_t v53 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *uint64_t v53 = v50;
        v53[1] = v52;
        uint64_t v54 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v63);
        uint64_t v61 = re::globalAllocators(v54)[2];
        __int16 v62 = 0;
        long long v55 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v61 + 32))(v61, 32, 0);
        *long long v55 = &unk_26E6F9978;
        v55[1] = a1;
        v55[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>;
        v55[3] = 0;
        __int16 v62 = v55;
        uint64_t v56 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v60, v36, 0);
        uint64_t v58 = v57;
        uint64_t v59 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *uint64_t v59 = v56;
        v59[1] = v58;
        unint64_t result = (uint64_t *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v60);
        v35 -= 8;
      }
      while (v35);
    }
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>::componentChangedHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v4 + 56), &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(void *)(*(void *)(v4 + 64) + 16 * v5 + 8));
  if (!*(unsigned char *)(v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *(void *)(v4 + 176);
  int v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if (v7) {
      uint64_t v8 = (void *)(v4 + 192);
    }
    else {
      uint64_t v8 = *(void **)(v4 + 200);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    unint64_t v9 = (uint64_t *)(v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    unint64_t v9 = *(uint64_t **)(v4 + 200);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SkeletalPoseBufferComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    uint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>::componentChangedHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v4 + 56), &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(void *)(*(void *)(v4 + 64) + 16 * v5 + 8));
  if (!*(unsigned char *)(v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *(void *)(v4 + 176);
  int v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if (v7) {
      uint64_t v8 = (void *)(v4 + 192);
    }
    else {
      uint64_t v8 = *(void **)(v4 + 200);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    unint64_t v9 = (uint64_t *)(v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    unint64_t v9 = *(uint64_t **)(v4 + 200);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SkeletalPoseBufferComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    uint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>::componentChangedHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v4 + 56), &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(void *)(*(void *)(v4 + 64) + 16 * v5 + 8));
  if (!*(unsigned char *)(v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *(void *)(v4 + 176);
  int v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if (v7) {
      uint64_t v8 = (void *)(v4 + 192);
    }
    else {
      uint64_t v8 = *(void **)(v4 + 200);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    unint64_t v9 = (uint64_t *)(v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    unint64_t v9 = *(uint64_t **)(v4 + 200);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SkeletalPoseBufferComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    uint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>::componentChangedHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v4 + 56), &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(void *)(*(void *)(v4 + 64) + 16 * v5 + 8));
  if (!*(unsigned char *)(v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *(void *)(v4 + 176);
  int v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if (v7) {
      uint64_t v8 = (void *)(v4 + 192);
    }
    else {
      uint64_t v8 = *(void **)(v4 + 200);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    unint64_t v9 = (uint64_t *)(v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    unint64_t v9 = *(uint64_t **)(v4 + 200);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SkeletalPoseBufferComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    uint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(void *a1, void *a2)
{
  unint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    unint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6F9870;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6F9870;
  *(void *)(a2 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6F98C8;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6F98C8;
  *(void *)(a2 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6F9920;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6F9920;
  *(void *)(a2 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6F9978;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6F9978;
  *(void *)(a2 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

void *re::IntrospectionDynamicArray<unsigned short>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<unsigned short>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionDynamicArray<unsigned short>::construct(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<unsigned short>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<unsigned long>::deinit(a2);
}

void *re::IntrospectionDynamicArray<unsigned short>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<unsigned long>::deinit(a2);
  *(void *)a2 = a3;
  unint64_t result = re::DynamicArray<unsigned short>::setCapacity((void *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<unsigned short>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (!*(void *)a4)
  {
    *(void *)a4 = a2;
    re::DynamicArray<unsigned short>::setCapacity((void *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  unint64_t v10 = *(void *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
    {
      re::DynamicArray<unsigned short>::resize(a4, a5);
    }
  }
  else
  {
    re::DynamicArray<unsigned short>::setCapacity((void *)a4, a5);
    for (unint64_t i = a5 - *(void *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<unsigned short>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *this)
{
  __int16 v10 = 0;
  re::DynamicArray<unsigned short>::add(this, &v10);
  unint64_t v8 = (re::IntrospectionBase *)(*((void *)this + 4) + 2 * *((void *)this + 2) - 2);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v8);
  return v8;
}

uint64_t re::IntrospectionDynamicArray<unsigned short>::size(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<unsigned short>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 2 * a3;
}

{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 2 * a3;
}

void *re::TypeBuilderHelper::registerDynamicArray<unsigned short>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)a1 = a3;
  unint64_t result = re::DynamicArray<unsigned short>::setCapacity((void *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<unsigned short>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<unsigned short>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  if (*(re::Allocator **)a1 == a3)
  {
    *(void *)(a1 + 16) = 0;
  }
  else
  {
    re::DynamicArray<unsigned long>::deinit(a1);
    *(void *)a1 = a3;
    re::DynamicArray<unsigned short>::setCapacity((void *)a1, a4);
  }
  ++*(_DWORD *)(a1 + 24);
  re::DynamicArray<unsigned short>::resize(a1, a4);
  {
    re::TypeRegistry::typeInfo(*(void **)a2, *(void *)(*(void *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    uint64_t v9 = *(void *)(a1 + 16);
    if (v9)
    {
      __int16 v10 = *(char **)(a1 + 32);
      uint64_t v11 = 2 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 2;
        v11 -= 2;
      }
      while (v11);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<unsigned short>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 32) + 2 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<unsigned short>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<unsigned short>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 24))
  {
    int v3 = a1[3];
    unint64_t v4 = *(void *)(v2 + 16);
    if (v3 < (int)v4) {
      a1[3] = ++v3;
    }
    if (v4 <= v3) {
      return 0;
    }
    else {
      return *(void *)(v2 + 32) + 2 * v3;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<unsigned short>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, result);
  }
  return result;
}

void *re::IntrospectionDynamicArray<re::ecs2::SkinnedMeshJointRange>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::ecs2::SkinnedMeshJointRange>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionDynamicArray<re::ecs2::SkinnedMeshJointRange>::construct(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::SkinnedMeshJointRange>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::ecs2::SkinnedMeshJointRange>::deinit(a2);
}

void *re::IntrospectionDynamicArray<re::ecs2::SkinnedMeshJointRange>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<re::ecs2::SkinnedMeshJointRange>::deinit(a2);
  *(void *)a2 = a3;
  uint64_t result = re::DynamicArray<re::ecs2::SkinnedMeshJointRange>::setCapacity((void *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void *re::IntrospectionDynamicArray<re::ecs2::SkinnedMeshJointRange>::resize(void *result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v9 = result;
  if (!*(void *)a4)
  {
    *(void *)a4 = a2;
    uint64_t result = re::DynamicArray<re::ecs2::SkinnedMeshJointRange>::setCapacity((void *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  unint64_t v10 = *(void *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
    {
      return re::DynamicArray<re::ecs2::SkinnedMeshJointRange>::resize((void *)a4, a5);
    }
  }
  else
  {
    uint64_t result = re::DynamicArray<re::ecs2::SkinnedMeshJointRange>::setCapacity((void *)a4, a5);
    for (unint64_t i = a5 - *(void *)(a4 + 16); i; --i)
      uint64_t result = (void *)(*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*v9 + 80))(v9, a2, a3, a4);
  }
  return result;
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::ecs2::SkinnedMeshJointRange>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *a4)
{
  long long v11 = 0uLL;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v10 = 0xFFFFFFFFLL;
  long long v12 = 0uLL;
  re::DynamicArray<re::ecs2::SkinnedMeshJointRange>::add(a4, &v10);
  if (*((void *)&v11 + 1) && v14) {
    (*(void (**)(void))(**((void **)&v11 + 1) + 40))();
  }
  unint64_t v8 = (re::IntrospectionBase *)(*((void *)a4 + 4) + 56 * *((void *)a4 + 2) - 56);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v8);
  return v8;
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::SkinnedMeshJointRange>::size(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::SkinnedMeshJointRange>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 56 * a3;
}

{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 56 * a3;
}

void *re::DynamicArray<re::ecs2::SkinnedMeshJointRange>::resize(void *result, unint64_t a2)
{
  int v3 = result;
  unint64_t v4 = result[2];
  if (v4 >= a2)
  {
    if (v4 <= a2) {
      return result;
    }
    uint64_t v8 = 56 * a2 + 16;
    unint64_t v9 = a2;
    do
    {
      uint64_t result = (void *)re::DynamicArray<unsigned long>::deinit(v3[4] + v8);
      ++v9;
      v8 += 56;
    }
    while (v9 < v3[2]);
  }
  else
  {
    if (result[1] < a2)
    {
      uint64_t result = re::DynamicArray<re::ecs2::SkinnedMeshJointRange>::setCapacity(result, a2);
      unint64_t v4 = v3[2];
    }
    unint64_t v5 = a2 - v4;
    if (a2 > v4)
    {
      uint64_t v6 = 56 * v4;
      do
      {
        uint64_t v7 = v3[4] + v6;
        *(void *)uint64_t v7 = 0xFFFFFFFFLL;
        *(_DWORD *)(v7 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
        *(void *)(v7 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
        *(void *)(v7 + 24) = 0;
        *(void *)(v7 + 32) = 0;
        *(void *)(v7 + 16) = 0;
        *(_DWORD *)(v7 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
        v6 += 56;
        --v5;
      }
      while (v5);
    }
  }
  v3[2] = a2;
  ++*((_DWORD *)v3 + 6);
  return result;
}

void *re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SkinnedMeshJointRange>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)a1 = a3;
  uint64_t result = re::DynamicArray<re::ecs2::SkinnedMeshJointRange>::setCapacity((void *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SkinnedMeshJointRange>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SkinnedMeshJointRange>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  if (*(re::Allocator **)a1 == a3)
  {
    re::DynamicArray<re::ecs2::SkinnedMeshJointRange>::clear(a1);
  }
  else
  {
    re::DynamicArray<re::ecs2::SkinnedMeshJointRange>::deinit(a1);
    *(void *)a1 = a3;
    re::DynamicArray<re::ecs2::SkinnedMeshJointRange>::setCapacity((void *)a1, a4);
    ++*(_DWORD *)(a1 + 24);
  }
  uint64_t v8 = (_anonymous_namespace_ *)re::DynamicArray<re::ecs2::SkinnedMeshJointRange>::resize((void *)a1, a4);
  {
    re::TypeRegistry::typeInfo(*(void **)a2, *(void *)(*(void *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    uint64_t v9 = *(void *)(a1 + 16);
    if (v9)
    {
      uint64_t v10 = *(char **)(a1 + 32);
      uint64_t v11 = 56 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 56;
        v11 -= 56;
      }
      while (v11);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SkinnedMeshJointRange>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 32) + 56 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SkinnedMeshJointRange>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SkinnedMeshJointRange>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 24))
  {
    int v3 = a1[3];
    unint64_t v4 = *(void *)(v2 + 16);
    if (v3 < (int)v4) {
      a1[3] = ++v3;
    }
    if (v4 <= v3) {
      return 0;
    }
    else {
      return *(void *)(v2 + 32) + 56 * v3;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SkinnedMeshJointRange>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, result);
  }
  return result;
}

void *re::make::shared::unsafelyInplace<re::ecs2::SkeletalPoseBufferComponent>(void *a1)
{
  bzero(a1, 0x270uLL);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  a1[2] = 0;
  *((unsigned char *)a1 + 24) = 0;
  *a1 = &unk_26E6F09B8;
  inited = (re *)objc_initWeak((id *)a1 + 4, 0);
  a1[5] = 0;
  a1[9] = re::globalAllocators(inited)[2];
  *(_OWORD *)((char *)a1 + 10re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0u;
  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 6) = 0u;
  *((_DWORD *)a1 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *((_OWORD *)a1 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0u;
  *((_OWORD *)a1 + 9) = 0u;
  a1[21] = 0;
  a1[22] = 0xFFFFFFFFFFFFFFFLL;
  a1[23] = 0;
  a1[24] = 0;
  memset_pattern16(a1 + 25, &unk_234386D00, 0x40uLL);
  for (uint64_t i = 0; i != 40; i += 5)
  {
    unint64_t v4 = &a1[i];
    v4[37] = 0;
    v4[34] = 0;
    v4[35] = 0;
    v4[33] = 0;
    *((_DWORD *)v4 + 72) = 0;
  }
  a1[77] = 0;
  a1[74] = 0;
  a1[75] = 0;
  a1[73] = 0;
  *((_DWORD *)a1 + 152) = 0;
  return a1;
}

id re::internal::defaultRetain<re::ecs2::SkeletalPoseBufferSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::SkeletalPoseBufferSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
}

void *re::ecs2::allocInfo_ScopeLanePair(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF84B80, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF84B80))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF84CC0, "ScopeLanePair");
    __cxa_guard_release(&qword_26AF84B80);
  }
  return &unk_26AF84CC0;
}

void re::ecs2::initInfo_ScopeLanePair(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v14[0] = 0x5EF9E11BBFF1A274;
  v14[1] = "ScopeLanePair";
  re::StringID::destroyString((re::StringID *)v14);
  *((_OWORD *)this + 2) = v15;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF84B88, memory_order_acquire) & 1) == 0)
  {
    unint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF84B88);
    if (v4)
    {
      unint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v7 = re::IntrospectionInfo<re::DynamicString>::get(1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "scope";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 32) = 1;
      *(_DWORD *)(v8 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v8 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF84BE8 = v8;
      uint64_t v9 = re::introspectionAllocator((re *)v8);
      uint64_t v11 = re::IntrospectionInfo<re::DynamicString>::get(1, v10);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "lane";
      *(void *)(v12 + 16) = v11;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 32) = 0x2000000002;
      *(_DWORD *)(v12 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v12 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      *(void *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF84BF0 = v12;
      __cxa_guard_release(&qword_26AF84B88);
    }
  }
  *((void *)this + 2) = 0x4000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((void *)this + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = &qword_26AF84BE8;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::ScopeLanePair>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 1ArcSharedObject::ArcSharedObject(this, 0) = re::internal::defaultDestruct<re::ecs2::ScopeLanePair>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::ScopeLanePair>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::ScopeLanePair>;
  re::IntrospectionRegistry::add(this, v3);
  long long v13 = v15;
}

void *re::internal::defaultConstruct<re::ecs2::ScopeLanePair>(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  unint64_t v4 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((void *)a3, 0);
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0u;
  unint64_t v5 = (void *)(a3 + 32);
  return re::DynamicString::setCapacity(v5, 0);
}

double re::internal::defaultDestruct<re::ecs2::ScopeLanePair>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicString::deinit((re::DynamicString *)(a3 + 32));
  return re::DynamicString::deinit((re::DynamicString *)a3);
}

void *re::internal::defaultConstructV2<re::ecs2::ScopeLanePair>(_OWORD *a1)
{
  *a1 = 0u;
  a1[1] = 0u;
  uint64_t v2 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(a1, 0);
  a1[2] = 0u;
  a1[3] = 0u;
  int v3 = a1 + 2;
  return re::DynamicString::setCapacity(v3, 0);
}

double re::internal::defaultDestructV2<re::ecs2::ScopeLanePair>(uint64_t a1)
{
  re::DynamicString::deinit((re::DynamicString *)(a1 + 32));
  return re::DynamicString::deinit((re::DynamicString *)a1);
}

uint64_t re::ecs2::introspect_ScopeLanePair(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ScopeLanePair", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_ScopeLanePair, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_ScopeLanePair, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::ScopeLanePair>, this);
}

void *re::ecs2::allocInfo_CameraViewport(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF84B90, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF84B90))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF84D38, "CameraViewport");
    __cxa_guard_release(&qword_26AF84B90);
  }
  return &unk_26AF84D38;
}

void re::ecs2::initInfo_CameraViewport(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v22[0] = 0xF750B41F86BFEE16;
  v22[1] = "CameraViewport";
  re::StringID::destroyString((re::StringID *)v22);
  *((_OWORD *)this + 2) = v23;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF84B98, memory_order_acquire) & 1) == 0)
  {
    unint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF84B98);
    if (v4)
    {
      unint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v7 = re::introspect_float((re *)1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "originX";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 32) = 1;
      *(_DWORD *)(v8 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v8 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF84C08 = v8;
      uint64_t v9 = re::introspectionAllocator((re *)v8);
      uint64_t v11 = re::introspect_float((re *)1, v10);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "originY";
      *(void *)(v12 + 16) = v11;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 32) = 0x400000002;
      *(_DWORD *)(v12 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v12 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      *(void *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF84C10 = v12;
      long long v13 = re::introspectionAllocator((re *)v12);
      long long v15 = re::introspect_float((re *)1, v14);
      uint64_t v16 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v13 + 32))(v13, 72, 8);
      *(_DWORD *)uint64_t v16 = 1;
      *(void *)(v16 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "width";
      *(void *)(v16 + 16) = v15;
      *(void *)(v16 + 24) = 0;
      *(void *)(v16 + 32) = 0x800000003;
      *(_DWORD *)(v16 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v16 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      *(void *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_26AF84C18 = v16;
      uint64_t v17 = re::introspectionAllocator((re *)v16);
      unint64_t v19 = re::introspect_float((re *)1, v18);
      uint64_t v20 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v17 + 32))(v17, 72, 8);
      *(_DWORD *)uint64_t v20 = 1;
      *(void *)(v20 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "height";
      *(void *)(v20 + 16) = v19;
      *(void *)(v20 + 24) = 0;
      *(void *)(v20 + 32) = 0xC00000004;
      *(_DWORD *)(v20 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v20 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      *(void *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_26AF84C20 = v20;
      __cxa_guard_release(&qword_26AF84B98);
    }
  }
  *((void *)this + 2) = 0x1000000008;
  *((_DWORD *)this + 6) = 4;
  *((_WORD *)this + 14) = 1;
  *((_DWORD *)this + 14) = 4;
  *((void *)this + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = &qword_26AF84C08;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::CameraViewport>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 1ArcSharedObject::ArcSharedObject(this, 0) = re::internal::defaultDestruct<re::ecs2::CameraViewport>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::CameraViewport>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::CameraViewport>;
  re::IntrospectionRegistry::add(this, v3);
  long long v21 = v23;
}

double re::internal::defaultConstruct<re::ecs2::CameraViewport>(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  double result = 0.0;
  *a3 = xmmword_2343854A0;
  return result;
}

double re::internal::defaultConstructV2<re::ecs2::CameraViewport>(_OWORD *a1)
{
  double result = 0.0;
  *a1 = xmmword_2343854A0;
  return result;
}

uint64_t re::ecs2::introspect_CameraViewport(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"CameraViewport", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_CameraViewport, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_CameraViewport, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::CameraViewport>, this);
}

void re::ecs2::introspect_CameraOrientation(re::ecs2 *this, const re::IntrospectionBase *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF84BA0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v24 = (re *)__cxa_guard_acquire(&qword_26AF84BA0);
    if (v24)
    {
      uint64_t v25 = re::introspectionAllocator(v24);
      uint64_t v26 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v25 + 32))(v25, 24, 8);
      *(_DWORD *)uint64_t v26 = 1;
      *((void *)v26 + 1) = 0;
      *((void *)v26 + 2) = "Portrait";
      qword_26AF84BF8 = (uint64_t)v26;
      uint64_t v27 = re::introspectionAllocator(v26);
      uint64_t v28 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v27 + 32))(v27, 24, 8);
      *(_DWORD *)uint64_t v28 = 1;
      *(void *)(v28 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 1;
      *(void *)(v28 + 16) = "Landscape";
      qword_26AF84C00 = v28;
      __cxa_guard_release(&qword_26AF84BA0);
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF84BA8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF84BA8))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_26AF84C78, "CameraOrientation", 4, 4, 1, 1);
    qword_26AF84C78 = (uint64_t)&unk_26E715E00;
    qword_26AF84CB8 = (uint64_t)&re::ecs2::introspect_CameraOrientation(BOOL)::enumTable;
    dword_26AF84C88 = 9;
    __cxa_guard_release(&qword_26AF84BA8);
  }
  if ((_MergedGlobals_187 & 1) == 0)
  {
    _MergedGlobals_187 = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_26AF84C78, a2);
    uint64_t v30 = 0x586A12A243D84296;
    uint64_t v31 = "CameraOrientation";
    v34[0] = 208862;
    v34[1] = "int";
    uint64_t v2 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v34);
    if (v2)
    {
      uint64_t v3 = *v2;
      re::StringID::destroyString((re::StringID *)v34);
      unint64_t v4 = (unsigned int *)qword_26AF84CB8;
      v33[1] = v3;
      re::TypeBuilder::beginEnumType((uint64_t)v34, &v30, 1, 1, (uint64_t)v33);
      unint64_t v6 = *v4;
      if (v6)
      {
        for (unint64_t i = 0; i < v6; ++i)
        {
          uint64_t v8 = *(void *)(*((void *)v4 + 1) + 8 * i);
          if (*(_DWORD *)v8 == 1)
          {
            uint64_t v9 = *(char **)(v8 + 16);
            if (v9)
            {
              uint64_t v10 = *v9;
              if (*v9)
              {
                char v11 = v9[1];
                if (v11)
                {
                  uint64_t v12 = (unsigned __int8 *)(v9 + 2);
                  do
                  {
                    uint64_t v10 = 31 * v10 + v11;
                    int v13 = *v12++;
                    char v11 = v13;
                  }
                  while (v13);
                }
              }
            }
            else
            {
              uint64_t v10 = 0;
            }
            uint64_t v14 = *(void *)(v8 + 8);
            *(void *)&v32.var0 = 2 * v10;
            v32.var1 = v9;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v34, v14, &v32);
            re::StringID::destroyString((re::StringID *)&v32);
            unint64_t v6 = *v4;
          }
        }
        if (v6)
        {
          for (unint64_t j = 0; j < v6; ++j)
          {
            uint64_t v16 = *(void *)(*((void *)v4 + 1) + 8 * j);
            if (*(_DWORD *)v16 == 2)
            {
              uint64_t v17 = *(char **)(v16 + 16);
              if (v17)
              {
                uint64_t v18 = *v17;
                if (*v17)
                {
                  char v19 = v17[1];
                  if (v19)
                  {
                    uint64_t v20 = (unsigned __int8 *)(v17 + 2);
                    do
                    {
                      uint64_t v18 = 31 * v18 + v19;
                      int v21 = *v20++;
                      char v19 = v21;
                    }
                    while (v21);
                  }
                }
              }
              else
              {
                uint64_t v18 = 0;
              }
              uint64_t v22 = *(void *)(v16 + 8);
              *(void *)&v32.var0 = 2 * v18;
              v32.var1 = v17;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v34, v22, &v32);
              re::StringID::destroyString((re::StringID *)&v32);
              unint64_t v6 = *v4;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v34, v23);
      xmmword_26AF84C98 = (__int128)v32;
      re::StringID::destroyString((re::StringID *)&v30);
    }
    else
    {
      re::StringID::destroyString((re::StringID *)v34);
      re::internal::assertLog((re::internal *)5, v29, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "CameraOrientation", v30, v31);
      _os_crash();
      __break(1u);
    }
  }
}

void *re::ecs2::allocInfo_PerspectiveCameraComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF84BB0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF84BB0))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF84DB0, "PerspectiveCameraComponent");
    __cxa_guard_release(&qword_26AF84BB0);
  }
  return &unk_26AF84DB0;
}

void re::ecs2::initInfo_PerspectiveCameraComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v24[0] = 0x7E1E37D6BC901B38;
  v24[1] = "PerspectiveCameraComponent";
  re::StringID::destroyString((re::StringID *)v24);
  *((_OWORD *)this + 2) = v25;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF84BB8, memory_order_acquire) & 1) == 0)
  {
    unint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF84BB8);
    if (v4)
    {
      unint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 4ArcSharedObject::ArcSharedObject(this, 0) = 3;
      *(void *)(v7 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF84C28 = v7;
      uint64_t v8 = re::introspectionAllocator((re *)v7);
      uint64_t v10 = re::introspect_float((re *)1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "near";
      *(void *)(v11 + 16) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x1C00000001;
      *(_DWORD *)(v11 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v11 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      *(void *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF84C30 = v11;
      uint64_t v12 = re::introspectionAllocator((re *)v11);
      uint64_t v14 = re::introspect_float((re *)1, v13);
      uint64_t v15 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 72, 8);
      *(_DWORD *)uint64_t v15 = 1;
      *(void *)(v15 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "far";
      *(void *)(v15 + 16) = v14;
      *(void *)(v15 + 24) = 0;
      *(void *)(v15 + 32) = 0x2000000002;
      *(_DWORD *)(v15 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v15 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      *(void *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_26AF84C38 = v15;
      uint64_t v16 = re::introspectionAllocator((re *)v15);
      uint64_t v18 = re::introspect_float((re *)1, v17);
      uint64_t v19 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v16 + 32))(v16, 72, 8);
      *(_DWORD *)uint64_t v19 = 1;
      *(void *)(v19 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "fieldOfView";
      *(void *)(v19 + 16) = v18;
      *(void *)(v19 + 24) = 0;
      *(void *)(v19 + 32) = 0x2400000003;
      *(_DWORD *)(v19 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v19 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      *(void *)(v19 + 56) = 0;
      *(_DWORD *)(v19 + 64) = 0;
      qword_26AF84C40 = v19;
      uint64_t v20 = (re::ecs2 *)re::introspectionAllocator((re *)v19);
      re::ecs2::introspect_CameraOrientation(v20, v21);
      uint64_t v22 = (*(uint64_t (**)(re::ecs2 *, uint64_t, uint64_t))(*(void *)v20 + 32))(v20, 72, 8);
      *(_DWORD *)uint64_t v22 = 1;
      *(void *)(v22 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "cameraOrientation";
      *(void *)(v22 + 16) = &qword_26AF84C78;
      *(void *)(v22 + 24) = 0;
      *(void *)(v22 + 32) = 0x2800000004;
      *(_DWORD *)(v22 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v22 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      *(void *)(v22 + 56) = 0;
      *(_DWORD *)(v22 + 64) = 0;
      qword_26AF84C48 = v22;
      __cxa_guard_release(&qword_26AF84BB8);
    }
  }
  *((void *)this + 2) = 0x11000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 5;
  *((void *)this + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = &qword_26AF84C28;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::PerspectiveCameraComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 1ArcSharedObject::ArcSharedObject(this, 0) = re::internal::defaultDestruct<re::ecs2::PerspectiveCameraComponent>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::PerspectiveCameraComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::PerspectiveCameraComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v23 = v25;
}

void re::internal::defaultConstruct<re::ecs2::PerspectiveCameraComponent>(int a1, int a2, re::ecs2::PerspectiveCameraComponent *this)
{
}

uint64_t re::internal::defaultDestruct<re::ecs2::PerspectiveCameraComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

uint64_t re::internal::defaultDestructV2<re::ecs2::PerspectiveCameraComponent>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_PerspectiveCameraComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"PerspectiveCameraComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_PerspectiveCameraComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_PerspectiveCameraComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::PerspectiveCameraComponent>, this);
}

void *re::ecs2::allocInfo_OrthographicCameraComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF84BC0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF84BC0))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF84E28, "OrthographicCameraComponent");
    __cxa_guard_release(&qword_26AF84BC0);
  }
  return &unk_26AF84E28;
}

void re::ecs2::initInfo_OrthographicCameraComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v24[0] = 0x869DF0D89BEB39D0;
  v24[1] = "OrthographicCameraComponent";
  re::StringID::destroyString((re::StringID *)v24);
  *((_OWORD *)this + 2) = v25;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF84BC8, memory_order_acquire) & 1) == 0)
  {
    unint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF84BC8);
    if (v4)
    {
      unint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 4ArcSharedObject::ArcSharedObject(this, 0) = 3;
      *(void *)(v7 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF84C50 = v7;
      uint64_t v8 = re::introspectionAllocator((re *)v7);
      uint64_t v10 = re::introspect_float((re *)1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "near";
      *(void *)(v11 + 16) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x1C00000001;
      *(_DWORD *)(v11 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v11 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      *(void *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF84C58 = v11;
      uint64_t v12 = re::introspectionAllocator((re *)v11);
      uint64_t v14 = re::introspect_float((re *)1, v13);
      uint64_t v15 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 72, 8);
      *(_DWORD *)uint64_t v15 = 1;
      *(void *)(v15 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "far";
      *(void *)(v15 + 16) = v14;
      *(void *)(v15 + 24) = 0;
      *(void *)(v15 + 32) = 0x2000000002;
      *(_DWORD *)(v15 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v15 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      *(void *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_26AF84C60 = v15;
      uint64_t v16 = re::introspectionAllocator((re *)v15);
      uint64_t v18 = re::introspect_float((re *)1, v17);
      uint64_t v19 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v16 + 32))(v16, 72, 8);
      *(_DWORD *)uint64_t v19 = 1;
      *(void *)(v19 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "scale";
      *(void *)(v19 + 16) = v18;
      *(void *)(v19 + 24) = 0;
      *(void *)(v19 + 32) = 0x2400000003;
      *(_DWORD *)(v19 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v19 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      *(void *)(v19 + 56) = 0;
      *(_DWORD *)(v19 + 64) = 0;
      qword_26AF84C68 = v19;
      uint64_t v20 = (re::ecs2 *)re::introspectionAllocator((re *)v19);
      re::ecs2::introspect_CameraOrientation(v20, v21);
      uint64_t v22 = (*(uint64_t (**)(re::ecs2 *, uint64_t, uint64_t))(*(void *)v20 + 32))(v20, 72, 8);
      *(_DWORD *)uint64_t v22 = 1;
      *(void *)(v22 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "cameraOrientation";
      *(void *)(v22 + 16) = &qword_26AF84C78;
      *(void *)(v22 + 24) = 0;
      *(void *)(v22 + 32) = 0x2800000004;
      *(_DWORD *)(v22 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v22 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      *(void *)(v22 + 56) = 0;
      *(_DWORD *)(v22 + 64) = 0;
      qword_26AF84C70 = v22;
      __cxa_guard_release(&qword_26AF84BC8);
    }
  }
  *((void *)this + 2) = 0xF000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 5;
  *((void *)this + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = &qword_26AF84C50;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::OrthographicCameraComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 1ArcSharedObject::ArcSharedObject(this, 0) = re::internal::defaultDestruct<re::ecs2::OrthographicCameraComponent>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::OrthographicCameraComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::OrthographicCameraComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v23 = v25;
}

double re::internal::defaultConstruct<re::ecs2::OrthographicCameraComponent>(int a1, int a2, re::ecs2::OrthographicCameraComponent *this)
{
  return re::ecs2::OrthographicCameraComponent::OrthographicCameraComponent(this);
}

uint64_t re::internal::defaultDestruct<re::ecs2::OrthographicCameraComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

uint64_t re::internal::defaultDestructV2<re::ecs2::OrthographicCameraComponent>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_OrthographicCameraComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"OrthographicCameraComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_OrthographicCameraComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_OrthographicCameraComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::OrthographicCameraComponent>, this);
}

void *re::ecs2::allocInfo_CustomMatrixCameraComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF84BD0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF84BD0))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF84EA0, "CustomMatrixCameraComponent");
    __cxa_guard_release(&qword_26AF84BD0);
  }
  return &unk_26AF84EA0;
}

void re::ecs2::initInfo_CustomMatrixCameraComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v9[0] = 0x9A2110E153E34C8CLL;
  v9[1] = "CustomMatrixCameraComponent";
  re::StringID::destroyString((re::StringID *)v9);
  *((_OWORD *)this + 2) = v10;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF84BE0, memory_order_acquire) & 1) == 0)
  {
    unint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF84BE0);
    if (v4)
    {
      unint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 4ArcSharedObject::ArcSharedObject(this, 0) = 3;
      *(void *)(v7 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF84BD8 = v7;
      __cxa_guard_release(&qword_26AF84BE0);
    }
  }
  *((void *)this + 2) = 0x18000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((void *)this + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = &qword_26AF84BD8;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::CustomMatrixCameraComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 1ArcSharedObject::ArcSharedObject(this, 0) = re::internal::defaultDestruct<re::ecs2::CustomMatrixCameraComponent>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::CustomMatrixCameraComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::CustomMatrixCameraComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v8 = v10;
}

re::ecs2::CustomMatrixCameraComponent *re::internal::defaultConstruct<re::ecs2::CustomMatrixCameraComponent>(int a1, int a2, re::ecs2::CustomMatrixCameraComponent *this)
{
  return re::ecs2::CustomMatrixCameraComponent::CustomMatrixCameraComponent(this);
}

uint64_t re::internal::defaultDestruct<re::ecs2::CustomMatrixCameraComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

uint64_t re::internal::defaultDestructV2<re::ecs2::CustomMatrixCameraComponent>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_CustomMatrixCameraComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"CustomMatrixCameraComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_CustomMatrixCameraComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_CustomMatrixCameraComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::CustomMatrixCameraComponent>, this);
}

void re::ecs2::PerspectiveCameraComponent::PerspectiveCameraComponent(re::ecs2::PerspectiveCameraComponent *this)
{
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)(v1 + 16) = 0;
  *(unsigned char *)(v1 + 24) = 0;
  *(void *)uint64_t v1 = &unk_26E6F9B00;
  *(void *)(v1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 28) = 0x7F8000003C23D70ALL;
  *(void *)(v1 + 36) = 1115815936;
  *(unsigned char *)(v1 + 44) = 1;
  *(unsigned char *)(v1 + 176) = 0;
  *(_OWORD *)(v1 + 192) = xmmword_23435FD80;
  uint64_t v2 = 208;
  do
  {
    uint64_t v3 = (void *)(v1 + v2);
    *uint64_t v3 = 0;
    v3[1] = 0;
    v3[2] = 0;
    v3[3] = 0x3F80000000000000;
    v2 += 32;
  }
  while (v3 + 4 != (void *)(v1 + 272));
  *(_OWORD *)(v1 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = xmmword_23435FD50;
  *(_OWORD *)(v1 + 64) = xmmword_23435FD60;
  *(_OWORD *)(v1 + 8ArcSharedObject::ArcSharedObject(this, 0) = xmmword_23435FD80;
  *(_OWORD *)(v1 + 96) = xmmword_23435FBB0;
  *(_OWORD *)(v1 + 112) = xmmword_23435FD50;
  *(_OWORD *)(v1 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 28) = xmmword_23435FD60;
  *(_OWORD *)(v1 + 144) = xmmword_23435FD80;
  *(_OWORD *)(v1 + 1re::HashTable<re::ecs2::Entity const*,re::ecs2::BillboardData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::deinit((uint64_t *)this + 60) = xmmword_23435FBB0;
}

uint64_t re::ecs2::PerspectiveCameraComponent::firstPerspectiveCameraInScene(uint64_t a1)
{
  unint64_t v1 = *((unsigned __int16 *)re::ecs2::ComponentImpl<re::ecs2::PerspectiveCameraComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
       + 8);
  if (*(void *)(a1 + 224) <= v1) {
    return 0;
  }
  uint64_t v2 = *(void *)(*(void *)(a1 + 240) + 8 * v1);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = *(void *)(v2 + 24);
  if (!v3) {
    return 0;
  }
  unint64_t v4 = *(uint64_t **)(v2 + 40);
  uint64_t v5 = 8 * v3;
  while (1)
  {
    uint64_t result = *v4;
    if (*(unsigned char *)(*(void *)(*v4 + 16) + 288)) {
      break;
    }
    ++v4;
    v5 -= 8;
    if (!v5) {
      return 0;
    }
  }
  return result;
}

__n128 re::ecs2::PerspectiveCameraComponent::calculateWorldPose@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  re::ecs2::TransformComponent::worldSRT(*(re::ecs2::TransformComponent ***)(a1 + 16), (const re::ecs2::Entity *)1, (uint64_t)v25);
  float32x4_t v21 = v26;
  float32x4_t v22 = v27;
  re::ecs2::PerspectiveCameraComponent::localEyePose((_OWORD *)a1, a2, (uint64_t)&v23);
  _Q6 = (int32x4_t)v21;
  float32x4_t v7 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(_Q6, _Q6), (int8x16_t)v21, 0xCuLL);
  float32x4_t v8 = vnegq_f32(v21);
  float32x4_t v9 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v23, v23), (int8x16_t)v23, 0xCuLL), v8), (float32x4_t)v23, v7);
  int8x16_t v10 = (int8x16_t)vaddq_f32(v9, v9);
  float32x4_t v11 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v10, (int32x4_t)v10), v10, 0xCuLL);
  int8x16_t v12 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v11, (int32x4_t)v11), (int8x16_t)v11, 0xCuLL), v8), v11, v7);
  float32x4_t v13 = vaddq_f32(vaddq_f32((float32x4_t)v23, vmulq_laneq_f32(v11, v21, 3)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v12, (int32x4_t)v12), v12, 0xCuLL));
  _Q3 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v24, v24), (int8x16_t)v24, 0xCuLL), v8), (float32x4_t)v24, v7);
  __n128 result = (__n128)vmlaq_laneq_f32(vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q3, (int32x4_t)_Q3), _Q3, 0xCuLL), (float32x4_t)v24, v21, 3), v21, (float32x4_t)v24, 3);
  _S2 = v24.i32[3];
  __asm { FMLA            S3, S2, V6.S[3] }
  result.n128_u32[3] = _Q3.i32[0];
  *(float32x4_t *)a3 = vaddq_f32(v22, v13);
  *(__n128 *)(a3 + 16) = result;
  return result;
}

_OWORD *re::ecs2::PerspectiveCameraComponent::localEyePose@<X0>(_OWORD *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (a2 == 2)
  {
    long long v3 = result[15];
    long long v4 = result[16];
LABEL_7:
    *(_OWORD *)a3 = v3;
    *(_OWORD *)(a3 + 16) = v4;
    return result;
  }
  if (a2 == 1)
  {
    long long v3 = result[13];
    long long v4 = result[14];
    goto LABEL_7;
  }
  if (a2)
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Invalid Camera Eye.", "!\"Unreachable code\"", "localEyePose", 143);
    __n128 result = (_OWORD *)_os_crash();
    __break(1u);
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(void *)(a3 + 24) = 0x3F80000000000000;
  }
  return result;
}

float re::ecs2::PerspectiveCameraComponent::calculateProjection@<S0>(float *a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  *(_DWORD *)a2 = 0;
  *(_OWORD *)(a2 + 4) = xmmword_234390F00;
  *(void *)(a2 + 2ArcSharedObject::ArcSharedObject(this, 0) = 0xBDCCCCCD3DCCCCCDLL;
  *(unsigned char *)(a2 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 28) = 0;
  *(_OWORD *)(a2 + 32) = xmmword_23435FD80;
  *(_DWORD *)(a2 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 1;
  *(void *)(a2 + 56) = 0;
  re::Projection::makePerspectiveFieldOfViewReverseDepth((float)(a1[9] * 3.1416) / 180.0, a3, a1[7], a1[8], v5);
  return re::Projection::setFromMatrix4x4F(a2, (uint64_t)v5);
}

float re::ecs2::PerspectiveCameraComponent::adjustProjectionAspect(uint64_t a1, float *a2, float a3)
{
  if (*(_DWORD *)(a1 + 40))
  {
    float v3 = (float)(a2[5] + a2[6]) * 0.5;
    float v4 = (float)((float)(a2[4] - a2[3]) * 0.5) / a3;
    float v5 = v3 + v4;
    float result = v3 - v4;
    a2[5] = v5;
    a2[6] = result;
  }
  else
  {
    float v7 = (float)(a2[3] + a2[4]) * 0.5;
    float v8 = (float)((float)(a2[5] - a2[6]) * 0.5) * a3;
    float v9 = v7 + v8;
    float result = v7 - v8;
    a2[3] = result;
    a2[4] = v9;
  }
  return result;
}

__n128 re::ecs2::PerspectiveCameraComponent::localEyePoseMatrix@<Q0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  re::ecs2::PerspectiveCameraComponent::localEyePose(a1, a2, (uint64_t)&v24);
  float v4 = v25;
  float v5 = v26;
  float v6 = v4 + v4;
  float v7 = v5 + v5;
  float v8 = v27;
  float v9 = v8 + v8;
  float v10 = v4 * (float)(v4 + v4);
  float v11 = v5 * (float)(v5 + v5);
  float v12 = v8 * (float)(v8 + v8);
  float v13 = v6 * v26;
  float v14 = v6 * v27;
  float v15 = v7 * v27;
  float v16 = v7 * v28;
  float v17 = v9 * v28;
  HIDWORD(v1re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
  *(float *)&long long v18 = 1.0 - (float)(v11 + v12);
  *((float *)&v18 + 1) = (float)(v6 * v26) + v17;
  *((float *)&v18 + 2) = (float)(v6 * v27) - v16;
  float v19 = v6 * v28;
  float v20 = 1.0 - (float)(v10 + v12);
  HIDWORD(v21) = 0;
  *(float *)&long long v21 = v13 - v17;
  *((float *)&v21 + 1) = v20;
  *((float *)&v21 + 2) = v15 + v19;
  HIDWORD(v22) = 0;
  *(float *)&long long v22 = v14 + v16;
  *((float *)&v22 + 1) = v15 - v19;
  *((float *)&v22 + 2) = 1.0 - (float)(v10 + v11);
  *(_OWORD *)a3 = v18;
  *(_OWORD *)(a3 + 16) = v21;
  __n128 result = v24;
  result.n128_u32[3] = 1.0;
  *(_OWORD *)(a3 + 32) = v22;
  *(__n128 *)(a3 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = result;
  return result;
}

uint64_t re::ecs2::PerspectiveCameraComponent::setLocalEyePose(uint64_t result, _OWORD *a2, int a3)
{
  if (a3)
  {
    if (a3 == 2)
    {
      float v3 = (_OWORD *)(result + 240);
    }
    else
    {
      if (a3 != 1)
      {
        re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Invalid Camera Eye.", "!\"Unreachable code\"", "setLocalEyePose", 162);
        __n128 result = _os_crash();
        __break(1u);
        return result;
      }
      float v3 = (_OWORD *)(result + 208);
    }
    long long v4 = a2[1];
    *float v3 = *a2;
    v3[1] = v4;
  }
  return result;
}

uint64_t re::ecs2::PerspectiveCameraComponent::setLocalEyePoseFromMatrix(uint64_t a1, uint64_t a2, int a3)
{
  float v4 = *(float *)a2;
  float v3 = *(float *)(a2 + 4);
  float v5 = *(float *)(a2 + 8);
  float v6 = *(float *)(a2 + 16);
  float v7 = *(float *)(a2 + 20);
  float v8 = *(float *)(a2 + 24);
  float v9 = *(float *)(a2 + 32);
  float v10 = *(float *)(a2 + 36);
  float v11 = *(float *)(a2 + 40);
  float v12 = (float)(*(float *)a2 + v7) + v11;
  if (v12 >= 0.0)
  {
    float v33 = sqrtf(v12 + 1.0);
    float v34 = v33 + v33;
    float32x2_t v35 = vrecpe_f32((float32x2_t)COERCE_UNSIGNED_INT(v33 + v33));
    float32x2_t v36 = vmul_f32(v35, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v33 + v33), v35));
    float v37 = vmul_f32(v36, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v33 + v33), v36)).f32[0];
    *(float *)&long long v42 = (float)(v8 - v10) * v37;
    float v43 = (float)(v9 - v5) * v37;
    float v44 = (float)(v3 - v6) * v37;
    float v45 = v34 * 0.25;
  }
  else if (v4 < v7 || v4 < v11)
  {
    float v14 = 1.0 - v4;
    BOOL v15 = v7 < v11;
    float v16 = sqrtf((float)(v14 - v7) + v11);
    *(float *)&unsigned int v17 = v16 + v16;
    float32x2_t v18 = vrecpe_f32((float32x2_t)v17);
    float32x2_t v19 = vmul_f32(v18, vrecps_f32((float32x2_t)v17, v18));
    float v20 = vmul_f32(v19, vrecps_f32((float32x2_t)v17, v19)).f32[0];
    float v21 = (float)(v5 + v9) * v20;
    float v22 = v8 + v10;
    float v23 = v22 * v20;
    float v24 = *(float *)&v17 * 0.25;
    float v25 = (float)(v3 - v6) * v20;
    float v26 = sqrtf(v7 + (float)(v14 - v11));
    *(float *)&unsigned int v27 = v26 + v26;
    float32x2_t v28 = vrecpe_f32((float32x2_t)v27);
    float32x2_t v29 = vmul_f32(v28, vrecps_f32((float32x2_t)v27, v28));
    v29.f32[0] = vmul_f32(v29, vrecps_f32((float32x2_t)v27, v29)).f32[0];
    float v30 = (float)(v3 + v6) * v29.f32[0];
    float v31 = *(float *)&v27 * 0.25;
    float v32 = v22 * v29.f32[0];
    float v45 = (float)(v9 - v5) * v29.f32[0];
    if (v15) {
      *(float *)&long long v42 = v21;
    }
    else {
      *(float *)&long long v42 = v30;
    }
    if (v15) {
      float v43 = v23;
    }
    else {
      float v43 = v31;
    }
    if (v15) {
      float v44 = v24;
    }
    else {
      float v44 = v32;
    }
    if (v15) {
      float v45 = v25;
    }
  }
  else
  {
    float v38 = sqrtf(v4 + (float)((float)(1.0 - v7) - v11));
    *(float *)&unsigned int v39 = v38 + v38;
    float32x2_t v40 = vrecpe_f32((float32x2_t)v39);
    float32x2_t v41 = vmul_f32(v40, vrecps_f32((float32x2_t)v39, v40));
    v41.f32[0] = vmul_f32(v41, vrecps_f32((float32x2_t)v39, v41)).f32[0];
    *(float *)&long long v42 = *(float *)&v39 * 0.25;
    float v43 = (float)(v3 + v6) * v41.f32[0];
    float v44 = (float)(v5 + v9) * v41.f32[0];
    float v45 = (float)(v8 - v10) * v41.f32[0];
  }
  *((float *)&v42 + 1) = v43;
  *((void *)&v42 + 1) = __PAIR64__(LODWORD(v45), LODWORD(v44));
  v47[0] = *(_OWORD *)(a2 + 48);
  v47[1] = v42;
  return re::ecs2::PerspectiveCameraComponent::setLocalEyePose(a1, v47, a3);
}

double re::ecs2::OrthographicCameraComponent::OrthographicCameraComponent(re::ecs2::OrthographicCameraComponent *this)
{
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)(v1 + 16) = 0;
  *(unsigned char *)(v1 + 24) = 0;
  *(void *)uint64_t v1 = &unk_26E6F9B58;
  *(void *)(v1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 28) = 0x447A00003C23D70ALL;
  *(void *)(v1 + 36) = 1065353216;
  *(unsigned char *)(v1 + 44) = 1;
  uint64_t v2 = 176;
  do
  {
    float v3 = (void *)(v1 + v2);
    *float v3 = 0;
    v3[1] = 0;
    v3[2] = 0;
    v3[3] = 0x3F80000000000000;
    v2 += 32;
  }
  while (v3 + 4 != (void *)(v1 + 240));
  *(void *)&double result = 1065353216;
  *(_OWORD *)(v1 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = xmmword_23435FD50;
  *(_OWORD *)(v1 + 64) = xmmword_23435FD60;
  *(_OWORD *)(v1 + 8ArcSharedObject::ArcSharedObject(this, 0) = xmmword_23435FD80;
  *(_OWORD *)(v1 + 96) = xmmword_23435FBB0;
  *(_OWORD *)(v1 + 112) = xmmword_23435FD50;
  *(_OWORD *)(v1 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 28) = xmmword_23435FD60;
  *(_OWORD *)(v1 + 144) = xmmword_23435FD80;
  *(_OWORD *)(v1 + 1re::HashTable<re::ecs2::Entity const*,re::ecs2::BillboardData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::deinit((uint64_t *)this + 60) = xmmword_23435FBB0;
  return result;
}

uint64_t re::ecs2::OrthographicCameraComponent::firstOrthographicCameraInScene(uint64_t a1)
{
  unint64_t v1 = *((unsigned __int16 *)re::ecs2::ComponentImpl<re::ecs2::OrthographicCameraComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
       + 8);
  if (*(void *)(a1 + 224) <= v1) {
    return 0;
  }
  uint64_t v2 = *(void *)(*(void *)(a1 + 240) + 8 * v1);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = *(void *)(v2 + 24);
  if (!v3) {
    return 0;
  }
  float v4 = *(uint64_t **)(v2 + 40);
  uint64_t v5 = 8 * v3;
  while (1)
  {
    uint64_t result = *v4;
    if (*(unsigned char *)(*(void *)(*v4 + 16) + 288)) {
      break;
    }
    ++v4;
    v5 -= 8;
    if (!v5) {
      return 0;
    }
  }
  return result;
}

__n128 re::ecs2::OrthographicCameraComponent::calculateWorldPose@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  re::ecs2::TransformComponent::worldSRT(*(re::ecs2::TransformComponent ***)(a1 + 16), (const re::ecs2::Entity *)1, (uint64_t)v25);
  float32x4_t v21 = v26;
  float32x4_t v22 = v27;
  re::ecs2::OrthographicCameraComponent::localEyePose((_OWORD *)a1, a2, (uint64_t)&v23);
  _Q6 = (int32x4_t)v21;
  float32x4_t v7 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(_Q6, _Q6), (int8x16_t)v21, 0xCuLL);
  float32x4_t v8 = vnegq_f32(v21);
  float32x4_t v9 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v23, v23), (int8x16_t)v23, 0xCuLL), v8), (float32x4_t)v23, v7);
  int8x16_t v10 = (int8x16_t)vaddq_f32(v9, v9);
  float32x4_t v11 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v10, (int32x4_t)v10), v10, 0xCuLL);
  int8x16_t v12 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v11, (int32x4_t)v11), (int8x16_t)v11, 0xCuLL), v8), v11, v7);
  float32x4_t v13 = vaddq_f32(vaddq_f32((float32x4_t)v23, vmulq_laneq_f32(v11, v21, 3)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v12, (int32x4_t)v12), v12, 0xCuLL));
  _Q3 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v24, v24), (int8x16_t)v24, 0xCuLL), v8), (float32x4_t)v24, v7);
  __n128 result = (__n128)vmlaq_laneq_f32(vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q3, (int32x4_t)_Q3), _Q3, 0xCuLL), (float32x4_t)v24, v21, 3), v21, (float32x4_t)v24, 3);
  _S2 = v24.i32[3];
  __asm { FMLA            S3, S2, V6.S[3] }
  result.n128_u32[3] = _Q3.i32[0];
  *(float32x4_t *)a3 = vaddq_f32(v22, v13);
  *(__n128 *)(a3 + 16) = result;
  return result;
}

_OWORD *re::ecs2::OrthographicCameraComponent::localEyePose@<X0>(_OWORD *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (a2 == 2)
  {
    long long v3 = result[13];
    long long v4 = result[14];
LABEL_7:
    *(_OWORD *)a3 = v3;
    *(_OWORD *)(a3 + 16) = v4;
    return result;
  }
  if (a2 == 1)
  {
    long long v3 = result[11];
    long long v4 = result[12];
    goto LABEL_7;
  }
  if (a2)
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Invalid Camera Eye.", "!\"Unreachable code\"", "localEyePose", 241);
    __n128 result = (_OWORD *)_os_crash();
    __break(1u);
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(void *)(a3 + 24) = 0x3F80000000000000;
  }
  return result;
}

float re::ecs2::OrthographicCameraComponent::calculateProjection@<S0>(float *a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  *(_DWORD *)a2 = 0;
  *(_OWORD *)(a2 + 4) = xmmword_234390F00;
  *(void *)(a2 + 2ArcSharedObject::ArcSharedObject(this, 0) = 0xBDCCCCCD3DCCCCCDLL;
  *(unsigned char *)(a2 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 28) = 0;
  *(_OWORD *)(a2 + 32) = xmmword_23435FD80;
  *(_DWORD *)(a2 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 1;
  *(void *)(a2 + 56) = 0;
  float v4 = a1[8];
  float v3 = a1[9];
  v5.f32[0] = v3 * a3;
  float v6 = 2.0 / (float)(v5.f32[0] + v5.f32[0]);
  float v7 = 2.0 / (float)(v3 + v3);
  v5.f32[1] = v3;
  *(float32x2_t *)&long long v8 = vdiv_f32(vsub_f32(v5, v5), vsub_f32(vneg_f32(v5), v5));
  float v9 = v4 - a1[7];
  *(float *)&unsigned int v10 = 1.0 / v9;
  *(float *)&unsigned int v11 = v4 / v9;
  *(void *)&long long v12 = 0;
  float v13 = v6;
  LODWORD(v14) = 0;
  *((float *)&v14 + 1) = v7;
  *((void *)&v12 + 1) = v10;
  *((void *)&v8 + 1) = __PAIR64__(1.0, v11);
  v16[0] = LODWORD(v13);
  v16[1] = v14;
  v16[2] = v12;
  v16[3] = v8;
  return re::Projection::setFromMatrix4x4F(a2, (uint64_t)v16);
}

__n128 re::ecs2::OrthographicCameraComponent::localEyePoseMatrix@<Q0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  re::ecs2::OrthographicCameraComponent::localEyePose(a1, a2, (uint64_t)&v24);
  float v4 = v25;
  float v5 = v26;
  float v6 = v4 + v4;
  float v7 = v5 + v5;
  float v8 = v27;
  float v9 = v8 + v8;
  float v10 = v4 * (float)(v4 + v4);
  float v11 = v5 * (float)(v5 + v5);
  float v12 = v8 * (float)(v8 + v8);
  float v13 = v6 * v26;
  float v14 = v6 * v27;
  float v15 = v7 * v27;
  float v16 = v7 * v28;
  float v17 = v9 * v28;
  HIDWORD(v1re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
  *(float *)&long long v18 = 1.0 - (float)(v11 + v12);
  *((float *)&v18 + 1) = (float)(v6 * v26) + v17;
  *((float *)&v18 + 2) = (float)(v6 * v27) - v16;
  float v19 = v6 * v28;
  float v20 = 1.0 - (float)(v10 + v12);
  HIDWORD(v21) = 0;
  *(float *)&long long v21 = v13 - v17;
  *((float *)&v21 + 1) = v20;
  *((float *)&v21 + 2) = v15 + v19;
  HIDWORD(v22) = 0;
  *(float *)&long long v22 = v14 + v16;
  *((float *)&v22 + 1) = v15 - v19;
  *((float *)&v22 + 2) = 1.0 - (float)(v10 + v11);
  *(_OWORD *)a3 = v18;
  *(_OWORD *)(a3 + 16) = v21;
  __n128 result = v24;
  result.n128_u32[3] = 1.0;
  *(_OWORD *)(a3 + 32) = v22;
  *(__n128 *)(a3 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = result;
  return result;
}

uint64_t re::ecs2::OrthographicCameraComponent::setLocalEyePose(uint64_t result, _OWORD *a2, int a3)
{
  if (a3)
  {
    if (a3 == 2)
    {
      float v3 = (_OWORD *)(result + 208);
    }
    else
    {
      if (a3 != 1)
      {
        re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Invalid Camera Eye.", "!\"Unreachable code\"", "setLocalEyePose", 260);
        __n128 result = _os_crash();
        __break(1u);
        return result;
      }
      float v3 = (_OWORD *)(result + 176);
    }
    long long v4 = a2[1];
    *float v3 = *a2;
    v3[1] = v4;
  }
  return result;
}

uint64_t re::ecs2::OrthographicCameraComponent::setLocalEyePoseFromMatrix(uint64_t a1, uint64_t a2, int a3)
{
  float v4 = *(float *)a2;
  float v3 = *(float *)(a2 + 4);
  float v5 = *(float *)(a2 + 8);
  float v6 = *(float *)(a2 + 16);
  float v7 = *(float *)(a2 + 20);
  float v8 = *(float *)(a2 + 24);
  float v9 = *(float *)(a2 + 32);
  float v10 = *(float *)(a2 + 36);
  float v11 = *(float *)(a2 + 40);
  float v12 = (float)(*(float *)a2 + v7) + v11;
  if (v12 >= 0.0)
  {
    float v33 = sqrtf(v12 + 1.0);
    float v34 = v33 + v33;
    float32x2_t v35 = vrecpe_f32((float32x2_t)COERCE_UNSIGNED_INT(v33 + v33));
    float32x2_t v36 = vmul_f32(v35, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v33 + v33), v35));
    float v37 = vmul_f32(v36, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v33 + v33), v36)).f32[0];
    *(float *)&long long v42 = (float)(v8 - v10) * v37;
    float v43 = (float)(v9 - v5) * v37;
    float v44 = (float)(v3 - v6) * v37;
    float v45 = v34 * 0.25;
  }
  else if (v4 < v7 || v4 < v11)
  {
    float v14 = 1.0 - v4;
    BOOL v15 = v7 < v11;
    float v16 = sqrtf((float)(v14 - v7) + v11);
    *(float *)&unsigned int v17 = v16 + v16;
    float32x2_t v18 = vrecpe_f32((float32x2_t)v17);
    float32x2_t v19 = vmul_f32(v18, vrecps_f32((float32x2_t)v17, v18));
    float v20 = vmul_f32(v19, vrecps_f32((float32x2_t)v17, v19)).f32[0];
    float v21 = (float)(v5 + v9) * v20;
    float v22 = v8 + v10;
    float v23 = v22 * v20;
    float v24 = *(float *)&v17 * 0.25;
    float v25 = (float)(v3 - v6) * v20;
    float v26 = sqrtf(v7 + (float)(v14 - v11));
    *(float *)&unsigned int v27 = v26 + v26;
    float32x2_t v28 = vrecpe_f32((float32x2_t)v27);
    float32x2_t v29 = vmul_f32(v28, vrecps_f32((float32x2_t)v27, v28));
    v29.f32[0] = vmul_f32(v29, vrecps_f32((float32x2_t)v27, v29)).f32[0];
    float v30 = (float)(v3 + v6) * v29.f32[0];
    float v31 = *(float *)&v27 * 0.25;
    float v32 = v22 * v29.f32[0];
    float v45 = (float)(v9 - v5) * v29.f32[0];
    if (v15) {
      *(float *)&long long v42 = v21;
    }
    else {
      *(float *)&long long v42 = v30;
    }
    if (v15) {
      float v43 = v23;
    }
    else {
      float v43 = v31;
    }
    if (v15) {
      float v44 = v24;
    }
    else {
      float v44 = v32;
    }
    if (v15) {
      float v45 = v25;
    }
  }
  else
  {
    float v38 = sqrtf(v4 + (float)((float)(1.0 - v7) - v11));
    *(float *)&unsigned int v39 = v38 + v38;
    float32x2_t v40 = vrecpe_f32((float32x2_t)v39);
    float32x2_t v41 = vmul_f32(v40, vrecps_f32((float32x2_t)v39, v40));
    v41.f32[0] = vmul_f32(v41, vrecps_f32((float32x2_t)v39, v41)).f32[0];
    *(float *)&long long v42 = *(float *)&v39 * 0.25;
    float v43 = (float)(v3 + v6) * v41.f32[0];
    float v44 = (float)(v5 + v9) * v41.f32[0];
    float v45 = (float)(v8 - v10) * v41.f32[0];
  }
  *((float *)&v42 + 1) = v43;
  *((void *)&v42 + 1) = __PAIR64__(LODWORD(v45), LODWORD(v44));
  v47[0] = *(_OWORD *)(a2 + 48);
  v47[1] = v42;
  return re::ecs2::OrthographicCameraComponent::setLocalEyePose(a1, v47, a3);
}

uint64_t re::ecs2::CustomMatrixCameraComponent::firstCustomMatrixCameraInScene(uint64_t a1)
{
  unint64_t v1 = *((unsigned __int16 *)re::ecs2::ComponentImpl<re::ecs2::CustomMatrixCameraComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
       + 8);
  if (*(void *)(a1 + 224) <= v1) {
    return 0;
  }
  uint64_t v2 = *(void *)(*(void *)(a1 + 240) + 8 * v1);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = *(void *)(v2 + 24);
  if (!v3) {
    return 0;
  }
  float v4 = *(uint64_t **)(v2 + 40);
  uint64_t v5 = 8 * v3;
  while (1)
  {
    uint64_t result = *v4;
    if (*(unsigned char *)(*(void *)(*v4 + 16) + 288)) {
      break;
    }
    ++v4;
    v5 -= 8;
    if (!v5) {
      return 0;
    }
  }
  return result;
}

re::ecs2::CustomMatrixCameraComponent *re::ecs2::CustomMatrixCameraComponent::CustomMatrixCameraComponent(re::ecs2::CustomMatrixCameraComponent *this)
{
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)(v2 + 16) = 0;
  *(unsigned char *)(v2 + 24) = 0;
  *(void *)uint64_t v2 = &unk_26E6F9BB0;
  *(_DWORD *)(v2 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 28) = 0;
  *(unsigned char *)(v2 + 32) = 0;
  *(_OWORD *)(v2 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 8ArcSharedObject::ArcSharedObject(this, 0) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_OWORD *)(v2 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 28) = 0u;
  uint64_t v3 = 176;
  *(_OWORD *)(v2 + 144) = 0u;
  *(_OWORD *)(v2 + 1re::HashTable<re::ecs2::Entity const*,re::ecs2::BillboardData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::deinit((uint64_t *)this + 60) = 0u;
  do
  {
    float v4 = (void *)((char *)this + v3);
    *float v4 = 0;
    v4[1] = 0;
    uint64_t v4[2] = 0;
    v4[3] = 0x3F80000000000000;
    v3 += 32;
  }
  while (v4 + 4 != (void *)(v2 + 240));
  *((_WORD *)this + 12ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 1re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 2ArcSharedObject::ArcSharedObject(this, 0) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 23) = 0u;
  v11[0] = xmmword_234394F80;
  v11[1] = xmmword_234394F90;
  void v11[2] = xmmword_234394FA0;
  v11[3] = xmmword_234394FB0;
  re::Projection::makeReverseDepth(v11, v10);
  long long v5 = v10[1];
  *((_OWORD *)this + 16) = v10[0];
  *((_OWORD *)this + 17) = v5;
  long long v6 = v10[3];
  *((_OWORD *)this + 1re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v10[2];
  *((_OWORD *)this + 19) = v6;
  long long v7 = *((_OWORD *)this + 17);
  *((_OWORD *)this + 2ArcSharedObject::ArcSharedObject(this, 0) = *((_OWORD *)this + 16);
  *((_OWORD *)this + 21) = v7;
  long long v8 = *((_OWORD *)this + 19);
  *((_OWORD *)this + 22) = *((_OWORD *)this + 18);
  *((_OWORD *)this + 23) = v8;
  *((unsigned char *)this + 32) = 1;
  *((_OWORD *)this + 3) = xmmword_23435FD50;
  *((_OWORD *)this + 4) = xmmword_23435FD60;
  *((_OWORD *)this + 5) = xmmword_23435FD80;
  *((_OWORD *)this + 6) = xmmword_23435FBB0;
  *((_OWORD *)this + 7) = xmmword_23435FD50;
  *((_OWORD *)this + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = xmmword_23435FD60;
  *((_OWORD *)this + 9) = xmmword_23435FD80;
  *((_OWORD *)this + 1ArcSharedObject::ArcSharedObject(this, 0) = xmmword_23435FBB0;
  return this;
}

void re::ecs2::CustomMatrixCameraComponent::calculateWorldPose(uint64_t a1@<X0>, uint64_t a2@<X1>, float32x4_t *a3@<X8>)
{
  if (a2 == 2)
  {
    long long v6 = (unsigned __int8 *)(a1 + 241);
  }
  else
  {
    if (a2 != 1)
    {
LABEL_7:
      re::ecs2::TransformComponent::worldSRT(*(re::ecs2::TransformComponent ***)(a1 + 16), (const re::ecs2::Entity *)1, (uint64_t)v30);
      float32x4_t v26 = v31;
      float32x4_t v27 = v32;
      re::ecs2::CustomMatrixCameraComponent::localEyePose(a1, a2, (float32x4_t *)&v28);
      _Q6 = (int32x4_t)v26;
      float32x4_t v9 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(_Q6, _Q6), (int8x16_t)v26, 0xCuLL);
      float32x4_t v10 = vnegq_f32(v26);
      float32x4_t v11 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v28, v28), (int8x16_t)v28, 0xCuLL), v10), (float32x4_t)v28, v9);
      int8x16_t v12 = (int8x16_t)vaddq_f32(v11, v11);
      float32x4_t v13 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v12, (int32x4_t)v12), v12, 0xCuLL);
      int8x16_t v14 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v13, (int32x4_t)v13), (int8x16_t)v13, 0xCuLL), v10), v13, v9);
      float32x4_t v15 = vaddq_f32(vaddq_f32((float32x4_t)v28, vmulq_laneq_f32(v13, v26, 3)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v14, (int32x4_t)v14), v14, 0xCuLL));
      _Q3 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v29, v29), (int8x16_t)v29, 0xCuLL), v10), (float32x4_t)v29, v9);
      float32x4_t v17 = vmlaq_laneq_f32(vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q3, (int32x4_t)_Q3), _Q3, 0xCuLL), (float32x4_t)v29, v26, 3), v26, (float32x4_t)v29, 3);
      _S2 = v29.i32[3];
      __asm { FMLA            S3, S2, V6.S[3] }
      v17.i32[3] = _Q3.i32[0];
      *a3 = vaddq_f32(v27, v15);
      a3[1] = v17;
      return;
    }
    long long v6 = (unsigned __int8 *)(a1 + 240);
  }
  int v7 = *v6;
  if (v7 == 1)
  {
    if (a2 == 2)
    {
      float32x4_t v23 = *(float32x4_t *)(a1 + 208);
      float32x4_t v24 = *(float32x4_t *)(a1 + 224);
    }
    else
    {
      float32x4_t v23 = *(float32x4_t *)(a1 + 176);
      float32x4_t v24 = *(float32x4_t *)(a1 + 192);
    }
    *a3 = v23;
    a3[1] = v24;
  }
  else
  {
    if (!v7) {
      goto LABEL_7;
    }
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Invalid Camera Eye.", "!\"Unreachable code\"", "calculateWorldPose", 323);
    _os_crash();
    __break(1u);
    re::internal::assertLog((re::internal *)4, v25, "assertion failure: '%s' (%s:line %i) Invalid Camera Eye.", "!\"Unreachable code\"", "calculateWorldPose", 318);
    _os_crash();
    __break(1u);
  }
}

void re::ecs2::CustomMatrixCameraComponent::localEyePose(uint64_t a1@<X0>, uint64_t a2@<X1>, float32x4_t *a3@<X8>)
{
  if (a2 == 2)
  {
    long long v3 = *(_OWORD *)(a1 + 224);
    v7[0] = *(_OWORD *)(a1 + 208);
    v7[1] = v3;
    int v4 = *(unsigned __int8 *)(a1 + 241);
    long long v5 = v7;
LABEL_7:
    re::ecs2::CustomMatrixCameraComponent::localEyePose(a1, (uint64_t)v5, v4, a3);
    return;
  }
  if (a2 == 1)
  {
    long long v6 = *(_OWORD *)(a1 + 192);
    v8[0] = *(_OWORD *)(a1 + 176);
    v8[1] = v6;
    int v4 = *(unsigned __int8 *)(a1 + 240);
    long long v5 = v8;
    goto LABEL_7;
  }
  if (a2)
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Invalid Camera Eye.", "!\"Unreachable code\"", "localEyePose", 389);
    _os_crash();
    __break(1u);
  }
  else
  {
    a3->i64[0] = 0;
    a3->i64[1] = 0;
    a3[1].i64[0] = 0;
    a3[1].i64[1] = 0x3F80000000000000;
  }
}

uint64_t re::ecs2::CustomMatrixCameraComponent::projectionMatrix(uint64_t a1, uint64_t a2)
{
  if (a2 == 2) {
    return a1 + 320;
  }
  if (a2 <= 1) {
    return a1 + 256;
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Invalid Camera Eye.", "!\"Unreachable code\"", "projectionMatrix", 335, v2, v3);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

void re::ecs2::CustomMatrixCameraComponent::calculateProjection(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_DWORD *)a3 = 0;
  *(_OWORD *)(a3 + 4) = xmmword_234390F00;
  *(void *)(a3 + 2ArcSharedObject::ArcSharedObject(this, 0) = 0xBDCCCCCD3DCCCCCDLL;
  *(unsigned char *)(a3 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 28) = 0;
  *(_OWORD *)(a3 + 32) = xmmword_23435FD80;
  *(_DWORD *)(a3 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 1;
  *(void *)(a3 + 56) = 0;
  if (a2 == 2)
  {
    uint64_t v3 = a1 + 320;
  }
  else
  {
    if (a2 > 1)
    {
      re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Invalid Camera Eye.", "!\"Unreachable code\"", "calculateProjection", 347);
      _os_crash();
      __break(1u);
      return;
    }
    uint64_t v3 = a1 + 256;
  }
  re::Projection::setFromMatrix4x4F(a3, v3);
}

uint64_t re::ecs2::CustomMatrixCameraComponent::setProjectionFromMatrix(uint64_t result, long long *a2, unsigned int a3)
{
  if (a3 == 2)
  {
    uint64_t v3 = (_OWORD *)(result + 320);
    goto LABEL_5;
  }
  if (a3 <= 1)
  {
    uint64_t v3 = (_OWORD *)(result + 256);
LABEL_5:
    long long v4 = *a2;
    long long v5 = a2[1];
    long long v6 = a2[3];
    v3[2] = a2[2];
    v3[3] = v6;
    *uint64_t v3 = v4;
    v3[1] = v5;
    return result;
  }
  re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Invalid Camera Eye.", "!\"Unreachable code\"", "setProjectionFromMatrix", 365);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

float re::ecs2::CustomMatrixCameraComponent::adjustProjectionAspect(uint64_t a1, float *a2, float a3)
{
  if (*(_DWORD *)(a1 + 28))
  {
    float v3 = (float)(a2[5] + a2[6]) * 0.5;
    float v4 = (float)((float)(a2[4] - a2[3]) * 0.5) / a3;
    float v5 = v3 + v4;
    float result = v3 - v4;
    a2[5] = v5;
    a2[6] = result;
  }
  else
  {
    float v7 = (float)(a2[3] + a2[4]) * 0.5;
    float v8 = (float)((float)(a2[5] - a2[6]) * 0.5) * a3;
    float v9 = v7 + v8;
    float result = v7 - v8;
    a2[3] = result;
    a2[4] = v9;
  }
  return result;
}

void re::ecs2::CustomMatrixCameraComponent::localEyePose(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, float32x4_t *a4@<X8>)
{
  if (a3 == 1)
  {
    re::ecs2::TransformComponent::worldSRT(*(re::ecs2::TransformComponent ***)(a1 + 16), (const re::ecs2::Entity *)1, (uint64_t)v28);
    _V1.S[3] = v29.i32[3];
    _Q2 = (int8x16_t)vnegq_f32(v29);
    int8x16_t v9 = (int8x16_t)vnegq_f32(v30);
    float32x4_t v10 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q2, (int32x4_t)_Q2), _Q2, 0xCuLL);
    float32x4_t v11 = vmlsq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v9, (int32x4_t)v9), v9, 0xCuLL), v29), v10, v30);
    int8x16_t v12 = (int8x16_t)vaddq_f32(v11, v11);
    float32x4_t v13 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v12, (int32x4_t)v12), v12, 0xCuLL);
    int8x16_t v14 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v13, (int32x4_t)v13), (int8x16_t)v13, 0xCuLL), v29), v13, v10);
    float32x4_t v15 = vaddq_f32(vsubq_f32(vmulq_laneq_f32(v13, v29, 3), v30), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v14, (int32x4_t)v14), v14, 0xCuLL));
    _Q5 = *(float32x4_t *)(a2 + 16);
    float32x4_t v17 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*(int32x4_t *)a2, *(int32x4_t *)a2), *(int8x16_t *)a2, 0xCuLL), v29), *(float32x4_t *)a2, v10);
    int8x16_t v18 = (int8x16_t)vaddq_f32(v17, v17);
    float32x4_t v19 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v18, (int32x4_t)v18), v18, 0xCuLL);
    int8x16_t v20 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v19, (int32x4_t)v19), (int8x16_t)v19, 0xCuLL), v29), v19, v10);
    float32x4_t v21 = vaddq_f32(vaddq_f32(*(float32x4_t *)a2, vmulq_laneq_f32(v19, v29, 3)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v20, (int32x4_t)v20), v20, 0xCuLL));
    int8x16_t v22 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q5, (int32x4_t)_Q5), (int8x16_t)_Q5, 0xCuLL), v29), _Q5, v10);
    float32x4_t v23 = vmlsq_laneq_f32(vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v22, (int32x4_t)v22), v22, 0xCuLL), _Q5, v29, 3), v29, _Q5, 3);
    _Q5.i32[0] = _Q5.i32[3];
    __asm { FMLA            S2, S5, V1.S[3] }
    v23.i32[3] = _Q2.i32[0];
    *a4 = vaddq_f32(v15, v21);
    a4[1] = v23;
  }
  else if (a3)
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Invalid pose reference", "!\"Unreachable code\"", "localEyePose", 404);
    _os_crash();
    __break(1u);
  }
  else
  {
    float32x4_t v6 = *(float32x4_t *)(a2 + 16);
    *a4 = *(float32x4_t *)a2;
    a4[1] = v6;
  }
}

__n128 re::ecs2::CustomMatrixCameraComponent::localEyePoseMatrix@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  re::ecs2::CustomMatrixCameraComponent::localEyePose(a1, a2, (float32x4_t *)&v24);
  float v4 = v25;
  float v5 = v26;
  float v6 = v4 + v4;
  float v7 = v5 + v5;
  float v8 = v27;
  float v9 = v8 + v8;
  float v10 = v4 * (float)(v4 + v4);
  float v11 = v5 * (float)(v5 + v5);
  float v12 = v8 * (float)(v8 + v8);
  float v13 = v6 * v26;
  float v14 = v6 * v27;
  float v15 = v7 * v27;
  float v16 = v7 * v28;
  float v17 = v9 * v28;
  HIDWORD(v1re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
  *(float *)&long long v18 = 1.0 - (float)(v11 + v12);
  *((float *)&v18 + 1) = (float)(v6 * v26) + v17;
  *((float *)&v18 + 2) = (float)(v6 * v27) - v16;
  float v19 = v6 * v28;
  float v20 = 1.0 - (float)(v10 + v12);
  HIDWORD(v21) = 0;
  *(float *)&long long v21 = v13 - v17;
  *((float *)&v21 + 1) = v20;
  *((float *)&v21 + 2) = v15 + v19;
  HIDWORD(v22) = 0;
  *(float *)&long long v22 = v14 + v16;
  *((float *)&v22 + 1) = v15 - v19;
  *((float *)&v22 + 2) = 1.0 - (float)(v10 + v11);
  *(_OWORD *)a3 = v18;
  *(_OWORD *)(a3 + 16) = v21;
  __n128 result = v24;
  result.n128_u32[3] = 1.0;
  *(_OWORD *)(a3 + 32) = v22;
  *(__n128 *)(a3 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = result;
  return result;
}

uint64_t re::ecs2::CustomMatrixCameraComponent::setEyePose(uint64_t result, _OWORD *a2, char a3, int a4)
{
  if (a4)
  {
    if (a4 == 2)
    {
      long long v5 = a2[1];
      *(_OWORD *)(result + 20re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = *a2;
      *(_OWORD *)(result + 224) = v5;
      *(unsigned char *)(result + 241) = a3;
    }
    else if (a4 == 1)
    {
      long long v4 = a2[1];
      *(_OWORD *)(result + 176) = *a2;
      *(_OWORD *)(result + 192) = v4;
      *(unsigned char *)(result + 24ArcSharedObject::ArcSharedObject(this, 0) = a3;
    }
    else
    {
      re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Invalid Camera Eye.", "!\"Unreachable code\"", "setEyePose", 441);
      __n128 result = _os_crash();
      __break(1u);
    }
  }
  return result;
}

uint64_t re::ecs2::CustomMatrixCameraComponent::setLocalEyePoseFromMatrix(uint64_t a1, uint64_t a2, int a3)
{
  float v4 = *(float *)a2;
  float v3 = *(float *)(a2 + 4);
  float v5 = *(float *)(a2 + 8);
  float v6 = *(float *)(a2 + 16);
  float v7 = *(float *)(a2 + 20);
  float v8 = *(float *)(a2 + 24);
  float v9 = *(float *)(a2 + 32);
  float v10 = *(float *)(a2 + 36);
  float v11 = *(float *)(a2 + 40);
  float v12 = (float)(*(float *)a2 + v7) + v11;
  if (v12 >= 0.0)
  {
    float v33 = sqrtf(v12 + 1.0);
    float v34 = v33 + v33;
    float32x2_t v35 = vrecpe_f32((float32x2_t)COERCE_UNSIGNED_INT(v33 + v33));
    float32x2_t v36 = vmul_f32(v35, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v33 + v33), v35));
    float v37 = vmul_f32(v36, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v33 + v33), v36)).f32[0];
    *(float *)&long long v42 = (float)(v8 - v10) * v37;
    float v43 = (float)(v9 - v5) * v37;
    float v44 = (float)(v3 - v6) * v37;
    float v45 = v34 * 0.25;
  }
  else if (v4 < v7 || v4 < v11)
  {
    float v14 = 1.0 - v4;
    BOOL v15 = v7 < v11;
    float v16 = sqrtf((float)(v14 - v7) + v11);
    *(float *)&unsigned int v17 = v16 + v16;
    float32x2_t v18 = vrecpe_f32((float32x2_t)v17);
    float32x2_t v19 = vmul_f32(v18, vrecps_f32((float32x2_t)v17, v18));
    float v20 = vmul_f32(v19, vrecps_f32((float32x2_t)v17, v19)).f32[0];
    float v21 = (float)(v5 + v9) * v20;
    float v22 = v8 + v10;
    float v23 = v22 * v20;
    float v24 = *(float *)&v17 * 0.25;
    float v25 = (float)(v3 - v6) * v20;
    float v26 = sqrtf(v7 + (float)(v14 - v11));
    *(float *)&unsigned int v27 = v26 + v26;
    float32x2_t v28 = vrecpe_f32((float32x2_t)v27);
    float32x2_t v29 = vmul_f32(v28, vrecps_f32((float32x2_t)v27, v28));
    v29.f32[0] = vmul_f32(v29, vrecps_f32((float32x2_t)v27, v29)).f32[0];
    float v30 = (float)(v3 + v6) * v29.f32[0];
    float v31 = *(float *)&v27 * 0.25;
    float v32 = v22 * v29.f32[0];
    float v45 = (float)(v9 - v5) * v29.f32[0];
    if (v15) {
      *(float *)&long long v42 = v21;
    }
    else {
      *(float *)&long long v42 = v30;
    }
    if (v15) {
      float v43 = v23;
    }
    else {
      float v43 = v31;
    }
    if (v15) {
      float v44 = v24;
    }
    else {
      float v44 = v32;
    }
    if (v15) {
      float v45 = v25;
    }
  }
  else
  {
    float v38 = sqrtf(v4 + (float)((float)(1.0 - v7) - v11));
    *(float *)&unsigned int v39 = v38 + v38;
    float32x2_t v40 = vrecpe_f32((float32x2_t)v39);
    float32x2_t v41 = vmul_f32(v40, vrecps_f32((float32x2_t)v39, v40));
    v41.f32[0] = vmul_f32(v41, vrecps_f32((float32x2_t)v39, v41)).f32[0];
    *(float *)&long long v42 = *(float *)&v39 * 0.25;
    float v43 = (float)(v3 + v6) * v41.f32[0];
    float v44 = (float)(v5 + v9) * v41.f32[0];
    float v45 = (float)(v8 - v10) * v41.f32[0];
  }
  *((float *)&v42 + 1) = v43;
  *((void *)&v42 + 1) = __PAIR64__(LODWORD(v45), LODWORD(v44));
  v47[0] = *(_OWORD *)(a2 + 48);
  v47[1] = v42;
  return re::ecs2::CustomMatrixCameraComponent::setEyePose(a1, v47, 0, a3);
}

uint64_t re::ecs2::CustomMatrixCameraComponent::setWorldEyePoseFromMatrix(uint64_t a1, uint64_t a2, int a3)
{
  float v4 = *(float *)a2;
  float v3 = *(float *)(a2 + 4);
  float v5 = *(float *)(a2 + 8);
  float v6 = *(float *)(a2 + 16);
  float v7 = *(float *)(a2 + 20);
  float v8 = *(float *)(a2 + 24);
  float v9 = *(float *)(a2 + 32);
  float v10 = *(float *)(a2 + 36);
  float v11 = *(float *)(a2 + 40);
  float v12 = (float)(*(float *)a2 + v7) + v11;
  if (v12 >= 0.0)
  {
    float v33 = sqrtf(v12 + 1.0);
    float v34 = v33 + v33;
    float32x2_t v35 = vrecpe_f32((float32x2_t)COERCE_UNSIGNED_INT(v33 + v33));
    float32x2_t v36 = vmul_f32(v35, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v33 + v33), v35));
    float v37 = vmul_f32(v36, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v33 + v33), v36)).f32[0];
    *(float *)&long long v42 = (float)(v8 - v10) * v37;
    float v43 = (float)(v9 - v5) * v37;
    float v44 = (float)(v3 - v6) * v37;
    float v45 = v34 * 0.25;
  }
  else if (v4 < v7 || v4 < v11)
  {
    float v14 = 1.0 - v4;
    BOOL v15 = v7 < v11;
    float v16 = sqrtf((float)(v14 - v7) + v11);
    *(float *)&unsigned int v17 = v16 + v16;
    float32x2_t v18 = vrecpe_f32((float32x2_t)v17);
    float32x2_t v19 = vmul_f32(v18, vrecps_f32((float32x2_t)v17, v18));
    float v20 = vmul_f32(v19, vrecps_f32((float32x2_t)v17, v19)).f32[0];
    float v21 = (float)(v5 + v9) * v20;
    float v22 = v8 + v10;
    float v23 = v22 * v20;
    float v24 = *(float *)&v17 * 0.25;
    float v25 = (float)(v3 - v6) * v20;
    float v26 = sqrtf(v7 + (float)(v14 - v11));
    *(float *)&unsigned int v27 = v26 + v26;
    float32x2_t v28 = vrecpe_f32((float32x2_t)v27);
    float32x2_t v29 = vmul_f32(v28, vrecps_f32((float32x2_t)v27, v28));
    v29.f32[0] = vmul_f32(v29, vrecps_f32((float32x2_t)v27, v29)).f32[0];
    float v30 = (float)(v3 + v6) * v29.f32[0];
    float v31 = *(float *)&v27 * 0.25;
    float v32 = v22 * v29.f32[0];
    float v45 = (float)(v9 - v5) * v29.f32[0];
    if (v15) {
      *(float *)&long long v42 = v21;
    }
    else {
      *(float *)&long long v42 = v30;
    }
    if (v15) {
      float v43 = v23;
    }
    else {
      float v43 = v31;
    }
    if (v15) {
      float v44 = v24;
    }
    else {
      float v44 = v32;
    }
    if (v15) {
      float v45 = v25;
    }
  }
  else
  {
    float v38 = sqrtf(v4 + (float)((float)(1.0 - v7) - v11));
    *(float *)&unsigned int v39 = v38 + v38;
    float32x2_t v40 = vrecpe_f32((float32x2_t)v39);
    float32x2_t v41 = vmul_f32(v40, vrecps_f32((float32x2_t)v39, v40));
    v41.f32[0] = vmul_f32(v41, vrecps_f32((float32x2_t)v39, v41)).f32[0];
    *(float *)&long long v42 = *(float *)&v39 * 0.25;
    float v43 = (float)(v3 + v6) * v41.f32[0];
    float v44 = (float)(v5 + v9) * v41.f32[0];
    float v45 = (float)(v8 - v10) * v41.f32[0];
  }
  *((float *)&v42 + 1) = v43;
  *((void *)&v42 + 1) = __PAIR64__(LODWORD(v45), LODWORD(v44));
  v47[0] = *(_OWORD *)(a2 + 48);
  v47[1] = v42;
  return re::ecs2::CustomMatrixCameraComponent::setEyePose(a1, v47, 1, a3);
}

void re::ecs2::PerspectiveCameraComponent::~PerspectiveCameraComponent(re::ecs2::PerspectiveCameraComponent *this)
{
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::PerspectiveCameraComponent,(re::ecs2::ComponentTypeBase::Flags)4>::allocator()
{
  return *((void *)re::ecs2::ComponentImpl<re::ecs2::PerspectiveCameraComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::PerspectiveCameraComponent,(re::ecs2::ComponentTypeBase::Flags)4>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::PerspectiveCameraComponent,(re::ecs2::ComponentTypeBase::Flags)4>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::PerspectiveCameraComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

void re::ecs2::OrthographicCameraComponent::~OrthographicCameraComponent(re::ecs2::OrthographicCameraComponent *this)
{
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::OrthographicCameraComponent,(re::ecs2::ComponentTypeBase::Flags)4>::allocator()
{
  return *((void *)re::ecs2::ComponentImpl<re::ecs2::OrthographicCameraComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::OrthographicCameraComponent,(re::ecs2::ComponentTypeBase::Flags)4>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::OrthographicCameraComponent,(re::ecs2::ComponentTypeBase::Flags)4>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::OrthographicCameraComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

void re::ecs2::CustomMatrixCameraComponent::~CustomMatrixCameraComponent(re::ecs2::CustomMatrixCameraComponent *this)
{
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::CustomMatrixCameraComponent,(re::ecs2::ComponentTypeBase::Flags)4>::allocator()
{
  return *((void *)re::ecs2::ComponentImpl<re::ecs2::CustomMatrixCameraComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::CustomMatrixCameraComponent,(re::ecs2::ComponentTypeBase::Flags)4>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::CustomMatrixCameraComponent,(re::ecs2::ComponentTypeBase::Flags)4>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::CustomMatrixCameraComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

void re::registerSerializationFunctions(re *this)
{
  unsigned int v17 = re::introspectionSharedMutex(this);
  std::__shared_mutex_base::lock(v17);
  uint64_t v21 = 0x6DAE480279BALL;
  float v22 = "Component";
  unint64_t v1 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, &v21);
  if (v1)
  {
    uint64_t v20 = *v1;
  }
  else
  {
    uint64_t v2 = 0;
    uint64_t v20 = 0xFFFFFFFFLL;
  }
  float32x2_t v19 = v2;
  re::StringID::destroyString((re::StringID *)&v21);
  *(void *)&v18.var0 = 0x7F36B44A9D0F5EC6;
  v18.var1 = "AssetBinarySerializer";
  re::introspect_Vector2F((re::IntrospectionBase **)1);
  re::introspect_Vector3F((re::IntrospectionBase **)1);
  re::introspect_Vector4F((re::IntrospectionBase **)1);
  re::introspect_Vector2D((re::IntrospectionBase **)1);
  re::introspect_Vector3D((re::IntrospectionBase **)1);
  re::introspect_Vector4D((re::IntrospectionBase **)1);
  re::introspect_Matrix2x2F((re::IntrospectionBase **)1);
  re::introspect_Matrix3x3F((re::IntrospectionBase **)1);
  re::introspect_Matrix4x4F((re::IntrospectionBase **)1);
  re::introspect_PoseF((re::IntrospectionBase **)1);
  re::introspect_QuaternionF((re::IntrospectionBase **)1);
  re::introspect_SRT((re::IntrospectionBase **)1);
  introspect_REAudioPlaybackState(1, v3);
  uint64_t v21 = 0x478E8020DEELL;
  float v22 = "Vector2F";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0x478E8020E2CLL;
  float v22 = "Vector3F";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0x478E8020E6ALL;
  float v22 = "Vector4F";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0x478E8020DEALL;
  float v22 = "Vector2D";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0x478E8020E28;
  float v22 = "Vector3D";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0x478E8020E66;
  float v22 = "Vector4D";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0xF13AC04E85D76;
  float v22 = "Matrix2x2F";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0xF13AC04E94672;
  float v22 = "Matrix3x3F";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0xF13AC04EA2F6ELL;
  float v22 = "Matrix4x4F";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 154604394;
  float v22 = "PoseF";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0x1EE51E553020190;
  float v22 = "QuaternionF";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 164778;
  float v22 = "SRT";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0x6E6EE0AE8D82AD26;
  float v22 = "REAudioPlaybackState";
  re::StringID::destroyString((re::StringID *)&v21);
  re::StringID::destroyString((re::StringID *)&v18);
  *(void *)&v18.var0 = 0x81C6E49267FF3CC8;
  v18.var1 = "AssetBinaryDeserializer";
  re::introspect_Vector2F((re::IntrospectionBase **)1);
  re::introspect_Vector3F((re::IntrospectionBase **)1);
  re::introspect_Vector4F((re::IntrospectionBase **)1);
  re::introspect_Vector2D((re::IntrospectionBase **)1);
  re::introspect_Vector3D((re::IntrospectionBase **)1);
  re::introspect_Vector4D((re::IntrospectionBase **)1);
  re::introspect_Matrix2x2F((re::IntrospectionBase **)1);
  re::introspect_Matrix3x3F((re::IntrospectionBase **)1);
  re::introspect_Matrix4x4F((re::IntrospectionBase **)1);
  re::introspect_PoseF((re::IntrospectionBase **)1);
  re::introspect_QuaternionF((re::IntrospectionBase **)1);
  re::introspect_SRT((re::IntrospectionBase **)1);
  introspect_REAudioPlaybackState(1, v4);
  uint64_t v21 = 0x478E8020DEELL;
  float v22 = "Vector2F";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0x478E8020E2CLL;
  float v22 = "Vector3F";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0x478E8020E6ALL;
  float v22 = "Vector4F";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0x478E8020DEALL;
  float v22 = "Vector2D";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0x478E8020E28;
  float v22 = "Vector3D";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0x478E8020E66;
  float v22 = "Vector4D";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0xF13AC04E85D76;
  float v22 = "Matrix2x2F";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0xF13AC04E94672;
  float v22 = "Matrix3x3F";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0xF13AC04EA2F6ELL;
  float v22 = "Matrix4x4F";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 154604394;
  float v22 = "PoseF";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0x1EE51E553020190;
  float v22 = "QuaternionF";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 164778;
  float v22 = "SRT";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0x6E6EE0AE8D82AD26;
  float v22 = "REAudioPlaybackState";
  re::StringID::destroyString((re::StringID *)&v21);
  re::StringID::destroyString((re::StringID *)&v18);
  *(void *)&v18.var0 = 0x3D2ADDFABE78EB94;
  v18.var1 = "AssetOPACKSerializer";
  re::introspect_Vector2F((re::IntrospectionBase **)1);
  re::introspect_Vector3F((re::IntrospectionBase **)1);
  re::introspect_Vector4F((re::IntrospectionBase **)1);
  re::introspect_Vector2D((re::IntrospectionBase **)1);
  re::introspect_Vector3D((re::IntrospectionBase **)1);
  re::introspect_Vector4D((re::IntrospectionBase **)1);
  re::introspect_Matrix2x2F((re::IntrospectionBase **)1);
  re::introspect_Matrix3x3F((re::IntrospectionBase **)1);
  re::introspect_Matrix4x4F((re::IntrospectionBase **)1);
  re::introspect_PoseF((re::IntrospectionBase **)1);
  re::introspect_QuaternionF((re::IntrospectionBase **)1);
  re::introspect_SRT((re::IntrospectionBase **)1);
  introspect_REAudioPlaybackState(1, v5);
  uint64_t v21 = 0x478E8020DEELL;
  float v22 = "Vector2F";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0x478E8020E2CLL;
  float v22 = "Vector3F";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0x478E8020E6ALL;
  float v22 = "Vector4F";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0x478E8020DEALL;
  float v22 = "Vector2D";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0x478E8020E28;
  float v22 = "Vector3D";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0x478E8020E66;
  float v22 = "Vector4D";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0xF13AC04E85D76;
  float v22 = "Matrix2x2F";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0xF13AC04E94672;
  float v22 = "Matrix3x3F";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0xF13AC04EA2F6ELL;
  float v22 = "Matrix4x4F";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 154604394;
  float v22 = "PoseF";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0x1EE51E553020190;
  float v22 = "QuaternionF";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 164778;
  float v22 = "SRT";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0x6E6EE0AE8D82AD26;
  float v22 = "REAudioPlaybackState";
  re::StringID::destroyString((re::StringID *)&v21);
  re::StringID::destroyString((re::StringID *)&v18);
  *(void *)&v18.var0 = 0x935762BFD538CE16;
  v18.var1 = "AssetOPACKDeserializer";
  re::introspect_Vector2F((re::IntrospectionBase **)1);
  re::introspect_Vector3F((re::IntrospectionBase **)1);
  re::introspect_Vector4F((re::IntrospectionBase **)1);
  re::introspect_Vector2D((re::IntrospectionBase **)1);
  re::introspect_Vector3D((re::IntrospectionBase **)1);
  re::introspect_Vector4D((re::IntrospectionBase **)1);
  re::introspect_Matrix2x2F((re::IntrospectionBase **)1);
  re::introspect_Matrix3x3F((re::IntrospectionBase **)1);
  re::introspect_Matrix4x4F((re::IntrospectionBase **)1);
  re::introspect_PoseF((re::IntrospectionBase **)1);
  re::introspect_QuaternionF((re::IntrospectionBase **)1);
  re::introspect_SRT((re::IntrospectionBase **)1);
  introspect_REAudioPlaybackState(1, v6);
  uint64_t v21 = 0x478E8020DEELL;
  float v22 = "Vector2F";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0x478E8020E2CLL;
  float v22 = "Vector3F";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0x478E8020E6ALL;
  float v22 = "Vector4F";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0x478E8020DEALL;
  float v22 = "Vector2D";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0x478E8020E28;
  float v22 = "Vector3D";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0x478E8020E66;
  float v22 = "Vector4D";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0xF13AC04E85D76;
  float v22 = "Matrix2x2F";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0xF13AC04E94672;
  float v22 = "Matrix3x3F";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0xF13AC04EA2F6ELL;
  float v22 = "Matrix4x4F";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 154604394;
  float v22 = "PoseF";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0x1EE51E553020190;
  float v22 = "QuaternionF";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 164778;
  float v22 = "SRT";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0x6E6EE0AE8D82AD26;
  float v22 = "REAudioPlaybackState";
  re::StringID::destroyString((re::StringID *)&v21);
  re::StringID::destroyString((re::StringID *)&v18);
  *(void *)&v18.var0 = 0x8EBD744EB006D4;
  v18.var1 = "AssetJSONSerializer";
  re::introspect_Vector2F((re::IntrospectionBase **)1);
  re::introspect_Vector3F((re::IntrospectionBase **)1);
  re::introspect_Vector4F((re::IntrospectionBase **)1);
  re::introspect_Vector2D((re::IntrospectionBase **)1);
  re::introspect_Vector3D((re::IntrospectionBase **)1);
  re::introspect_Vector4D((re::IntrospectionBase **)1);
  re::introspect_Matrix2x2F((re::IntrospectionBase **)1);
  re::introspect_Matrix3x3F((re::IntrospectionBase **)1);
  re::introspect_Matrix4x4F((re::IntrospectionBase **)1);
  re::introspect_PoseF((re::IntrospectionBase **)1);
  re::introspect_QuaternionF((re::IntrospectionBase **)1);
  re::introspect_SRT((re::IntrospectionBase **)1);
  introspect_REAudioPlaybackState(1, v7);
  uint64_t v21 = 0x478E8020DEELL;
  float v22 = "Vector2F";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0x478E8020E2CLL;
  float v22 = "Vector3F";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0x478E8020E6ALL;
  float v22 = "Vector4F";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0x478E8020DEALL;
  float v22 = "Vector2D";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0x478E8020E28;
  float v22 = "Vector3D";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0x478E8020E66;
  float v22 = "Vector4D";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0xF13AC04E85D76;
  float v22 = "Matrix2x2F";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0xF13AC04E94672;
  float v22 = "Matrix3x3F";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0xF13AC04EA2F6ELL;
  float v22 = "Matrix4x4F";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 154604394;
  float v22 = "PoseF";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0x1EE51E553020190;
  float v22 = "QuaternionF";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 164778;
  float v22 = "SRT";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0x6E6EE0AE8D82AD26;
  float v22 = "REAudioPlaybackState";
  re::StringID::destroyString((re::StringID *)&v21);
  re::StringID::destroyString((re::StringID *)&v18);
  *(void *)&v18.var0 = 0xD414A1634161956;
  v18.var1 = "AssetJSONDeserializer";
  re::introspect_Vector2F((re::IntrospectionBase **)1);
  re::introspect_Vector3F((re::IntrospectionBase **)1);
  re::introspect_Vector4F((re::IntrospectionBase **)1);
  re::introspect_Vector2D((re::IntrospectionBase **)1);
  re::introspect_Vector3D((re::IntrospectionBase **)1);
  re::introspect_Vector4D((re::IntrospectionBase **)1);
  re::introspect_Matrix2x2F((re::IntrospectionBase **)1);
  re::introspect_Matrix3x3F((re::IntrospectionBase **)1);
  re::introspect_Matrix4x4F((re::IntrospectionBase **)1);
  re::introspect_PoseF((re::IntrospectionBase **)1);
  re::introspect_QuaternionF((re::IntrospectionBase **)1);
  re::introspect_SRT((re::IntrospectionBase **)1);
  introspect_REAudioPlaybackState(1, v8);
  uint64_t v21 = 0x478E8020DEELL;
  float v22 = "Vector2F";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0x478E8020E2CLL;
  float v22 = "Vector3F";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0x478E8020E6ALL;
  float v22 = "Vector4F";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0x478E8020DEALL;
  float v22 = "Vector2D";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0x478E8020E28;
  float v22 = "Vector3D";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0x478E8020E66;
  float v22 = "Vector4D";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0xF13AC04E85D76;
  float v22 = "Matrix2x2F";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0xF13AC04E94672;
  float v22 = "Matrix3x3F";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0xF13AC04EA2F6ELL;
  float v22 = "Matrix4x4F";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 154604394;
  float v22 = "PoseF";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0x1EE51E553020190;
  float v22 = "QuaternionF";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 164778;
  float v22 = "SRT";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0x6E6EE0AE8D82AD26;
  float v22 = "REAudioPlaybackState";
  re::StringID::destroyString((re::StringID *)&v21);
  re::StringID::destroyString((re::StringID *)&v18);
  *(void *)&v18.var0 = 0xE1F66B0F30BD1E9ELL;
  v18.var1 = "ECSJSONSerializer";
  re::introspect_Vector2F((re::IntrospectionBase **)1);
  re::introspect_Vector3F((re::IntrospectionBase **)1);
  re::introspect_Vector4F((re::IntrospectionBase **)1);
  re::introspect_Vector2D((re::IntrospectionBase **)1);
  re::introspect_Vector3D((re::IntrospectionBase **)1);
  re::introspect_Vector4D((re::IntrospectionBase **)1);
  re::introspect_Matrix2x2F((re::IntrospectionBase **)1);
  re::introspect_Matrix3x3F((re::IntrospectionBase **)1);
  re::introspect_Matrix4x4F((re::IntrospectionBase **)1);
  re::introspect_PoseF((re::IntrospectionBase **)1);
  re::introspect_QuaternionF((re::IntrospectionBase **)1);
  re::introspect_SRT((re::IntrospectionBase **)1);
  introspect_REAudioPlaybackState(1, v9);
  uint64_t v21 = 0x478E8020DEELL;
  float v22 = "Vector2F";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0x478E8020E2CLL;
  float v22 = "Vector3F";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0x478E8020E6ALL;
  float v22 = "Vector4F";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0x478E8020DEALL;
  float v22 = "Vector2D";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0x478E8020E28;
  float v22 = "Vector3D";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0x478E8020E66;
  float v22 = "Vector4D";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0xF13AC04E85D76;
  float v22 = "Matrix2x2F";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0xF13AC04E94672;
  float v22 = "Matrix3x3F";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0xF13AC04EA2F6ELL;
  float v22 = "Matrix4x4F";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 154604394;
  float v22 = "PoseF";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0x1EE51E553020190;
  float v22 = "QuaternionF";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 164778;
  float v22 = "SRT";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0x6E6EE0AE8D82AD26;
  float v22 = "REAudioPlaybackState";
  re::StringID::destroyString((re::StringID *)&v21);
  re::StringID::destroyString((re::StringID *)&v18);
  *(void *)&v18.var0 = 0x3373FC80C73C66A0;
  v18.var1 = "ECSJSONDeserializer";
  re::introspect_Vector2F((re::IntrospectionBase **)1);
  re::introspect_Vector3F((re::IntrospectionBase **)1);
  re::introspect_Vector4F((re::IntrospectionBase **)1);
  re::introspect_Vector2D((re::IntrospectionBase **)1);
  re::introspect_Vector3D((re::IntrospectionBase **)1);
  re::introspect_Vector4D((re::IntrospectionBase **)1);
  re::introspect_Matrix2x2F((re::IntrospectionBase **)1);
  re::introspect_Matrix3x3F((re::IntrospectionBase **)1);
  re::introspect_Matrix4x4F((re::IntrospectionBase **)1);
  re::introspect_PoseF((re::IntrospectionBase **)1);
  re::introspect_QuaternionF((re::IntrospectionBase **)1);
  re::introspect_SRT((re::IntrospectionBase **)1);
  introspect_REAudioPlaybackState(1, v10);
  uint64_t v21 = 0x478E8020DEELL;
  float v22 = "Vector2F";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0x478E8020E2CLL;
  float v22 = "Vector3F";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0x478E8020E6ALL;
  float v22 = "Vector4F";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0x478E8020DEALL;
  float v22 = "Vector2D";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0x478E8020E28;
  float v22 = "Vector3D";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0x478E8020E66;
  float v22 = "Vector4D";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0xF13AC04E85D76;
  float v22 = "Matrix2x2F";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0xF13AC04E94672;
  float v22 = "Matrix3x3F";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0xF13AC04EA2F6ELL;
  float v22 = "Matrix4x4F";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 154604394;
  float v22 = "PoseF";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0x1EE51E553020190;
  float v22 = "QuaternionF";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 164778;
  float v22 = "SRT";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0x6E6EE0AE8D82AD26;
  float v22 = "REAudioPlaybackState";
  re::StringID::destroyString((re::StringID *)&v21);
  re::StringID::destroyString((re::StringID *)&v18);
  *(void *)&v18.var0 = 0x88B8E3BC1E0ECD0ALL;
  v18.var1 = "ECSOPACKSerializer";
  re::introspect_Vector2F((re::IntrospectionBase **)1);
  re::introspect_Vector3F((re::IntrospectionBase **)1);
  re::introspect_Vector4F((re::IntrospectionBase **)1);
  re::introspect_Vector2D((re::IntrospectionBase **)1);
  re::introspect_Vector3D((re::IntrospectionBase **)1);
  re::introspect_Vector4D((re::IntrospectionBase **)1);
  re::introspect_Matrix2x2F((re::IntrospectionBase **)1);
  re::introspect_Matrix3x3F((re::IntrospectionBase **)1);
  re::introspect_Matrix4x4F((re::IntrospectionBase **)1);
  re::introspect_PoseF((re::IntrospectionBase **)1);
  re::introspect_QuaternionF((re::IntrospectionBase **)1);
  re::introspect_SRT((re::IntrospectionBase **)1);
  introspect_REAudioPlaybackState(1, v11);
  uint64_t v21 = 0x478E8020DEELL;
  float v22 = "Vector2F";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0x478E8020E2CLL;
  float v22 = "Vector3F";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0x478E8020E6ALL;
  float v22 = "Vector4F";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0x478E8020DEALL;
  float v22 = "Vector2D";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0x478E8020E28;
  float v22 = "Vector3D";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0x478E8020E66;
  float v22 = "Vector4D";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0xF13AC04E85D76;
  float v22 = "Matrix2x2F";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0xF13AC04E94672;
  float v22 = "Matrix3x3F";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0xF13AC04EA2F6ELL;
  float v22 = "Matrix4x4F";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 154604394;
  float v22 = "PoseF";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0x1EE51E553020190;
  float v22 = "QuaternionF";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 164778;
  float v22 = "SRT";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0x6E6EE0AE8D82AD26;
  float v22 = "REAudioPlaybackState";
  re::StringID::destroyString((re::StringID *)&v21);
  re::StringID::destroyString((re::StringID *)&v18);
  *(void *)&v18.var0 = 0x337AFDA7A6DC2A0CLL;
  v18.var1 = "ECSOPACKDeserializer";
  re::introspect_Vector2F((re::IntrospectionBase **)1);
  re::introspect_Vector3F((re::IntrospectionBase **)1);
  re::introspect_Vector4F((re::IntrospectionBase **)1);
  re::introspect_Vector2D((re::IntrospectionBase **)1);
  re::introspect_Vector3D((re::IntrospectionBase **)1);
  re::introspect_Vector4D((re::IntrospectionBase **)1);
  re::introspect_Matrix2x2F((re::IntrospectionBase **)1);
  re::introspect_Matrix3x3F((re::IntrospectionBase **)1);
  re::introspect_Matrix4x4F((re::IntrospectionBase **)1);
  re::introspect_PoseF((re::IntrospectionBase **)1);
  re::introspect_QuaternionF((re::IntrospectionBase **)1);
  re::introspect_SRT((re::IntrospectionBase **)1);
  introspect_REAudioPlaybackState(1, v12);
  uint64_t v21 = 0x478E8020DEELL;
  float v22 = "Vector2F";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0x478E8020E2CLL;
  float v22 = "Vector3F";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0x478E8020E6ALL;
  float v22 = "Vector4F";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0x478E8020DEALL;
  float v22 = "Vector2D";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0x478E8020E28;
  float v22 = "Vector3D";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0x478E8020E66;
  float v22 = "Vector4D";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0xF13AC04E85D76;
  float v22 = "Matrix2x2F";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0xF13AC04E94672;
  float v22 = "Matrix3x3F";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0xF13AC04EA2F6ELL;
  float v22 = "Matrix4x4F";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 154604394;
  float v22 = "PoseF";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0x1EE51E553020190;
  float v22 = "QuaternionF";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 164778;
  float v22 = "SRT";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0x6E6EE0AE8D82AD26;
  float v22 = "REAudioPlaybackState";
  re::StringID::destroyString((re::StringID *)&v21);
  re::StringID::destroyString((re::StringID *)&v18);
  *(void *)&v18.var0 = 0xD66B7D4190E6B598;
  v18.var1 = "NetworkOPACKSerializer";
  re::introspect_Vector2F((re::IntrospectionBase **)1);
  re::introspect_Vector3F((re::IntrospectionBase **)1);
  re::introspect_Vector4F((re::IntrospectionBase **)1);
  re::introspect_Vector2D((re::IntrospectionBase **)1);
  re::introspect_Vector3D((re::IntrospectionBase **)1);
  re::introspect_Vector4D((re::IntrospectionBase **)1);
  re::introspect_Matrix2x2F((re::IntrospectionBase **)1);
  re::introspect_Matrix3x3F((re::IntrospectionBase **)1);
  re::introspect_Matrix4x4F((re::IntrospectionBase **)1);
  re::introspect_PoseF((re::IntrospectionBase **)1);
  re::introspect_QuaternionF((re::IntrospectionBase **)1);
  re::introspect_SRT((re::IntrospectionBase **)1);
  introspect_REAudioPlaybackState(1, v13);
  uint64_t v21 = 0x478E8020DEELL;
  float v22 = "Vector2F";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0x478E8020E2CLL;
  float v22 = "Vector3F";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0x478E8020E6ALL;
  float v22 = "Vector4F";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0x478E8020DEALL;
  float v22 = "Vector2D";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0x478E8020E28;
  float v22 = "Vector3D";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0x478E8020E66;
  float v22 = "Vector4D";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0xF13AC04E85D76;
  float v22 = "Matrix2x2F";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0xF13AC04E94672;
  float v22 = "Matrix3x3F";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0xF13AC04EA2F6ELL;
  float v22 = "Matrix4x4F";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 154604394;
  float v22 = "PoseF";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0x1EE51E553020190;
  float v22 = "QuaternionF";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 164778;
  float v22 = "SRT";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0x6E6EE0AE8D82AD26;
  float v22 = "REAudioPlaybackState";
  re::StringID::destroyString((re::StringID *)&v21);
  re::StringID::destroyString((re::StringID *)&v18);
  *(void *)&v18.var0 = 0xDEED4B9BC35C271ALL;
  v18.var1 = "NetworkOPACKDeserializer";
  re::introspect_Vector2F((re::IntrospectionBase **)1);
  re::introspect_Vector3F((re::IntrospectionBase **)1);
  re::introspect_Vector4F((re::IntrospectionBase **)1);
  re::introspect_Vector2D((re::IntrospectionBase **)1);
  re::introspect_Vector3D((re::IntrospectionBase **)1);
  re::introspect_Vector4D((re::IntrospectionBase **)1);
  re::introspect_Matrix2x2F((re::IntrospectionBase **)1);
  re::introspect_Matrix3x3F((re::IntrospectionBase **)1);
  re::introspect_Matrix4x4F((re::IntrospectionBase **)1);
  re::introspect_PoseF((re::IntrospectionBase **)1);
  re::introspect_QuaternionF((re::IntrospectionBase **)1);
  re::introspect_SRT((re::IntrospectionBase **)1);
  introspect_REAudioPlaybackState(1, v14);
  uint64_t v21 = 0x478E8020DEELL;
  float v22 = "Vector2F";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0x478E8020E2CLL;
  float v22 = "Vector3F";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0x478E8020E6ALL;
  float v22 = "Vector4F";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0x478E8020DEALL;
  float v22 = "Vector2D";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0x478E8020E28;
  float v22 = "Vector3D";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0x478E8020E66;
  float v22 = "Vector4D";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0xF13AC04E85D76;
  float v22 = "Matrix2x2F";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0xF13AC04E94672;
  float v22 = "Matrix3x3F";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0xF13AC04EA2F6ELL;
  float v22 = "Matrix4x4F";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 154604394;
  float v22 = "PoseF";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0x1EE51E553020190;
  float v22 = "QuaternionF";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 164778;
  float v22 = "SRT";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0x6E6EE0AE8D82AD26;
  float v22 = "REAudioPlaybackState";
  re::StringID::destroyString((re::StringID *)&v21);
  re::StringID::destroyString((re::StringID *)&v18);
  *(void *)&v18.var0 = 0x287C37956ADFC9C4;
  v18.var1 = "NetworkCompatSerializer";
  re::introspect_Vector2F((re::IntrospectionBase **)1);
  re::introspect_Vector3F((re::IntrospectionBase **)1);
  re::introspect_Vector4F((re::IntrospectionBase **)1);
  re::introspect_Vector2D((re::IntrospectionBase **)1);
  re::introspect_Vector3D((re::IntrospectionBase **)1);
  re::introspect_Vector4D((re::IntrospectionBase **)1);
  re::introspect_Matrix2x2F((re::IntrospectionBase **)1);
  re::introspect_Matrix3x3F((re::IntrospectionBase **)1);
  re::introspect_Matrix4x4F((re::IntrospectionBase **)1);
  re::introspect_PoseF((re::IntrospectionBase **)1);
  re::introspect_QuaternionF((re::IntrospectionBase **)1);
  re::introspect_SRT((re::IntrospectionBase **)1);
  introspect_REAudioPlaybackState(1, v15);
  uint64_t v21 = 0x478E8020DEELL;
  float v22 = "Vector2F";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0x478E8020E2CLL;
  float v22 = "Vector3F";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0x478E8020E6ALL;
  float v22 = "Vector4F";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0x478E8020DEALL;
  float v22 = "Vector2D";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0x478E8020E28;
  float v22 = "Vector3D";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0x478E8020E66;
  float v22 = "Vector4D";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0xF13AC04E85D76;
  float v22 = "Matrix2x2F";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0xF13AC04E94672;
  float v22 = "Matrix3x3F";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0xF13AC04EA2F6ELL;
  float v22 = "Matrix4x4F";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 154604394;
  float v22 = "PoseF";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0x1EE51E553020190;
  float v22 = "QuaternionF";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 164778;
  float v22 = "SRT";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0x6E6EE0AE8D82AD26;
  float v22 = "REAudioPlaybackState";
  re::StringID::destroyString((re::StringID *)&v21);
  re::StringID::destroyString((re::StringID *)&v18);
  *(void *)&v18.var0 = 0xEFB8C0610360E046;
  v18.var1 = "NetworkCompatDeserializer";
  re::introspect_Vector2F((re::IntrospectionBase **)1);
  re::introspect_Vector3F((re::IntrospectionBase **)1);
  re::introspect_Vector4F((re::IntrospectionBase **)1);
  re::introspect_Vector2D((re::IntrospectionBase **)1);
  re::introspect_Vector3D((re::IntrospectionBase **)1);
  re::introspect_Vector4D((re::IntrospectionBase **)1);
  re::introspect_Matrix2x2F((re::IntrospectionBase **)1);
  re::introspect_Matrix3x3F((re::IntrospectionBase **)1);
  re::introspect_Matrix4x4F((re::IntrospectionBase **)1);
  re::introspect_PoseF((re::IntrospectionBase **)1);
  re::introspect_QuaternionF((re::IntrospectionBase **)1);
  re::introspect_SRT((re::IntrospectionBase **)1);
  introspect_REAudioPlaybackState(1, v16);
  uint64_t v21 = 0x478E8020DEELL;
  float v22 = "Vector2F";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0x478E8020E2CLL;
  float v22 = "Vector3F";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0x478E8020E6ALL;
  float v22 = "Vector4F";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0x478E8020DEALL;
  float v22 = "Vector2D";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0x478E8020E28;
  float v22 = "Vector3D";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0x478E8020E66;
  float v22 = "Vector4D";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0xF13AC04E85D76;
  float v22 = "Matrix2x2F";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0xF13AC04E94672;
  float v22 = "Matrix3x3F";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0xF13AC04EA2F6ELL;
  float v22 = "Matrix4x4F";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 154604394;
  float v22 = "PoseF";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0x1EE51E553020190;
  float v22 = "QuaternionF";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 164778;
  float v22 = "SRT";
  re::StringID::destroyString((re::StringID *)&v21);
  uint64_t v21 = 0x6E6EE0AE8D82AD26;
  float v22 = "REAudioPlaybackState";
  re::StringID::destroyString((re::StringID *)&v21);
  re::StringID::destroyString((re::StringID *)&v18);
  std::__shared_mutex_base::unlock(v17);
}

void re::registerSerializeSwiftCodableComponent(re *this, const char *a2)
{
  float v3 = re::introspectionSharedMutex(this);
  std::__shared_mutex_base::lock(v3);
  *(void *)&v19.var0 = 0x7F36B44A9D0F5EC6;
  v19.var1 = "AssetBinarySerializer";
  uint64_t v17 = 0;
  StringID v18 = "";
  re::StringID::destroyString((re::StringID *)&v17);
  re::StringID::destroyString((re::StringID *)&v19);
  *(void *)&v19.var0 = 0x81C6E49267FF3CC8;
  v19.var1 = "AssetBinaryDeserializer";
  uint64_t v17 = 0;
  StringID v18 = "";
  re::StringID::destroyString((re::StringID *)&v17);
  re::StringID::destroyString((re::StringID *)&v19);
  *(void *)&v19.var0 = 0x3D2ADDFABE78EB94;
  v19.var1 = "AssetOPACKSerializer";
  uint64_t v17 = 0;
  StringID v18 = "";
  re::StringID::destroyString((re::StringID *)&v17);
  re::StringID::destroyString((re::StringID *)&v19);
  *(void *)&v19.var0 = 0x935762BFD538CE16;
  v19.var1 = "AssetOPACKDeserializer";
  uint64_t v17 = 0;
  StringID v18 = "";
  re::StringID::destroyString((re::StringID *)&v17);
  re::StringID::destroyString((re::StringID *)&v19);
  *(void *)&v19.var0 = 0x8EBD744EB006D4;
  v19.var1 = "AssetJSONSerializer";
  uint64_t v17 = 0;
  StringID v18 = "";
  re::StringID::destroyString((re::StringID *)&v17);
  re::StringID::destroyString((re::StringID *)&v19);
  *(void *)&v19.var0 = 0xD414A1634161956;
  v19.var1 = "AssetJSONDeserializer";
  uint64_t v17 = 0;
  StringID v18 = "";
  re::StringID::destroyString((re::StringID *)&v17);
  re::StringID::destroyString((re::StringID *)&v19);
  *(void *)&v19.var0 = 0xE1F66B0F30BD1E9ELL;
  v19.var1 = "ECSJSONSerializer";
  uint64_t v17 = 0;
  StringID v18 = "";
  re::StringID::destroyString((re::StringID *)&v17);
  re::StringID::destroyString((re::StringID *)&v19);
  *(void *)&v19.var0 = 0x3373FC80C73C66A0;
  v19.var1 = "ECSJSONDeserializer";
  uint64_t v17 = 0;
  StringID v18 = "";
  re::StringID::destroyString((re::StringID *)&v17);
  re::StringID::destroyString((re::StringID *)&v19);
  *(void *)&v19.var0 = 0x88B8E3BC1E0ECD0ALL;
  v19.var1 = "ECSOPACKSerializer";
  uint64_t v17 = 0;
  StringID v18 = "";
  re::StringID::destroyString((re::StringID *)&v17);
  re::StringID::destroyString((re::StringID *)&v19);
  *(void *)&v19.var0 = 0x337AFDA7A6DC2A0CLL;
  v19.var1 = "ECSOPACKDeserializer";
  uint64_t v17 = 0;
  StringID v18 = "";
  re::StringID::destroyString((re::StringID *)&v17);
  re::StringID::destroyString((re::StringID *)&v19);
  *(void *)&v19.var0 = 0xD66B7D4190E6B598;
  v19.var1 = "NetworkOPACKSerializer";
  uint64_t v17 = 0;
  StringID v18 = "";
  re::StringID::destroyString((re::StringID *)&v17);
  re::StringID::destroyString((re::StringID *)&v19);
  *(void *)&v19.var0 = 0xDEED4B9BC35C271ALL;
  v19.var1 = "NetworkOPACKDeserializer";
  uint64_t v17 = 0;
  StringID v18 = "";
  re::StringID::destroyString((re::StringID *)&v17);
  re::StringID::destroyString((re::StringID *)&v19);
  re::ecs2::IntrospectedNetworkTypeHelper::registerSwiftComponent(this, v16);
  std::__shared_mutex_base::unlock(v3);
}

void re::registerSerializeFunc<re::AssetBinarySerializer>(StringID *a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v8 = a2 + 200;
  float v9 = (re *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(a2 + 200, a3);
  if (v9 && a2)
  {
    uint64_t v10 = *(void *)v9;
    float v11 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(v8, a1);
    if (v11)
    {
      uint64_t v12 = *v11;
      uint64_t v13 = a2;
    }
    else
    {
      re::TypeRegistry::declareType(a2, 8, a1, 1u, 0, &buf);
      uint64_t v12 = *((void *)&buf + 1);
      uint64_t v13 = buf;
    }
    v17[0] = a2;
    v17[1] = v10;
    v16[0] = v13;
    v16[1] = v12;
    re::TypeRegistry::addAttribute(a2, v17, -1, (uint64_t)v16, a4, 0);
  }
  else
  {
    float v14 = *re::foundationSerializationLogObjects(v9);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v15 = a3[1];
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = v15;
      _os_log_impl(&dword_233120000, v14, OS_LOG_TYPE_DEFAULT, "Failed to register serialization function. Type \"%s\" not found in type registry.", (uint8_t *)&buf, 0xCu);
    }
  }
}

uint64_t re::ecs2::serializeSwiftCodableComponent<re::Serializer<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>>(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)a4 + 40))(a4);
  if ((*(unsigned int (**)(uint64_t))(*(void *)v14 + 8))(v14))
  {
    re::TypeMemberCollection::TypeMemberCollection((uint64_t)v36, *a5, a5[2]);
    re::TypeMemberCollection::operator[](v36, 0, (uint64_t)v38);
    re::TypeRegistry::typeInfo(v38[0], *v38[2], &Length);
    re::TypeInfo::TypeInfo((uint64_t)v39, (uint64_t)v42);
    re::TypeRegistry::typeInfo(v39[0], v39[2][9], &Length);
    re::TypeInfo::TypeInfo((uint64_t)v40, (uint64_t)v42);
    uint64_t v15 = (uint64_t *)re::TypeMemberCollection::TypeMemberCollection((uint64_t)&Length, v40[0], v40[2]);
    if (v42[3])
    {
      re::TypeMemberCollection::operator[](v15, 0, (uint64_t)v36);
      if (*(void *)(v37 + 8) >> 1 != 0x274B0FCFAA8) {
        return re::serializeObject<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>(a1, a2, a3, a4, (re::TypeInfo *)a5, a6, a7);
      }
      float v16 = *(const char **)(v37 + 16);
      if (v16 != "__JSON__")
      {
        if (strcmp(v16, "__JSON__")) {
          return re::serializeObject<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>(a1, a2, a3, a4, (re::TypeInfo *)a5, a6, a7);
        }
      }
    }
  }
  StringID v18 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a4 + 40))(a4);
  if ((*(unsigned int (**)(void *))(*v18 + 8))(v18)
    && (uint64_t v20 = (uint64_t (*)(uint64_t, void *, const char *))v18[12]) != 0
    && (uint64_t v21 = v20(a4, v18, "json")) != 0)
  {
    CFDataRef v22 = (const __CFData *)v21;
  }
  else
  {
    if (!re::ecs2::g_encodeComponent)
    {
      re::internal::assertLog((re::internal *)4, v19, "assertion failure: '%s' (%s:line %i) Swift Codable Encode Callback not registered", "g_encodeComponent", "serializeComponentAsEmbeddedJSON", 42);
      uint64_t result = _os_crash();
      __break(1u);
      return result;
    }
    CFDataRef v22 = (const __CFData *)re::ecs2::g_encodeComponent(a4, v18, "json");
    if (!v22)
    {
      re::Encoder<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setError((_anonymous_namespace_ *)(a1 + 24), a2, v23, v24, v25, v26, v27, v28, v18[4]);
      return 0;
    }
  }
  CFIndex Length = CFDataGetLength(v22);
  if (!Length)
  {
    re::Encoder<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setError((_anonymous_namespace_ *)(a1 + 24), a2, v29, v30, v31, v32, v33, v34, v18[4]);
    CFRelease(v22);
    return 0;
  }
  LODWORD(v36[0]) = 2;
  if (re::EncoderBinary<re::DynamicArrayBufferedOutputStream>::beginPointer(a1 + 24, a2, a3, (int *)v36, 0))
  {
    LODWORD(v40[0]) = 2;
    if (re::EncoderBinary<re::DynamicArrayBufferedOutputStream>::beginPointer(a1 + 24, a2, a3, (int *)v40, 0))
    {
      if (re::EncoderBinary<re::DynamicArrayBufferedOutputStream>::beginString((_anonymous_namespace_ *)(a1 + 24), a2, a3, (unint64_t *)&Length, 0))
      {
        BytePtr = (char *)CFDataGetBytePtr(v22);
        re::EncoderBinary<re::DynamicArrayBufferedOutputStream>::serializeString(a1 + 24, BytePtr, 0);
        re::EncoderBinary<re::DynamicArrayBufferedOutputStream>::endString((_anonymous_namespace_ *)(a1 + 24));
      }
      re::EncoderBinary<re::DynamicArrayBufferedOutputStream>::endPointer((_anonymous_namespace_ *)(a1 + 24));
    }
    re::EncoderBinary<re::DynamicArrayBufferedOutputStream>::endPointer((_anonymous_namespace_ *)(a1 + 24));
  }
  CFRelease(v22);
  return *(unsigned char *)(a1 + 64) == 0;
}

uint64_t re::ecs2::serializeSwiftCodableComponent<re::Serializer<re::EncoderBinary<re::SeekableInputStream>>>(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)a4 + 40))(a4);
  if ((*(unsigned int (**)(uint64_t))(*(void *)v14 + 8))(v14))
  {
    re::TypeMemberCollection::TypeMemberCollection((uint64_t)v44, *a5, a5[2]);
    re::TypeMemberCollection::operator[](v44, 0, (uint64_t)v46);
    re::TypeRegistry::typeInfo(v46[0], *v46[2], &v49);
    re::TypeInfo::TypeInfo((uint64_t)v47, (uint64_t)v50);
    re::TypeRegistry::typeInfo(v47[0], v47[2][9], &v49);
    re::TypeInfo::TypeInfo((uint64_t)v48, (uint64_t)v50);
    uint64_t v15 = (uint64_t *)re::TypeMemberCollection::TypeMemberCollection((uint64_t)&v49, v48[0], v48[2]);
    if (v50[3])
    {
      re::TypeMemberCollection::operator[](v15, 0, (uint64_t)v44);
      if (*(void *)(v45 + 8) >> 1 != 0x274B0FCFAA8) {
        return re::serializeObject<re::EncoderBinary<re::SeekableInputStream>>(a1, a2, a3, a4, (re::TypeInfo *)a5, a6, a7);
      }
      float v16 = *(const char **)(v45 + 16);
      if (v16 != "__JSON__")
      {
        if (strcmp(v16, "__JSON__")) {
          return re::serializeObject<re::EncoderBinary<re::SeekableInputStream>>(a1, a2, a3, a4, (re::TypeInfo *)a5, a6, a7);
        }
      }
    }
  }
  StringID v18 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a4 + 40))(a4);
  LODWORD(v44[0]) = 0;
  BOOL v24 = re::EncoderBinary<re::SeekableInputStream>::beginPointer((_anonymous_namespace_ *)(a1 + 24), a2, a3, (int *)v44, 0);
  uint64_t result = 0;
  if (v24)
  {
    if (LODWORD(v44[0]) == 2)
    {
      BOOL v25 = re::EncoderBinary<re::SeekableInputStream>::beginPointer((_anonymous_namespace_ *)(a1 + 24), a2, a3, (int *)v44, 0);
      uint64_t result = 0;
      if (!v25) {
        return result;
      }
      if (LODWORD(v44[0]) == 2)
      {
        CFIndex v49 = 0;
        BOOL v26 = re::EncoderBinary<re::SeekableInputStream>::beginString(a1 + 24, (uint64_t)a2, a3, (char *)&v49, 0);
        uint64_t result = 0;
        if (!v26) {
          return result;
        }
        if (v49)
        {
          Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], v49);
          if (Mutable)
          {
            uint64_t v33 = Mutable;
            CFDataIncreaseLength(Mutable, v49);
            MutableBytePtr = (char *)CFDataGetMutableBytePtr(v33);
            re::EncoderBinary<re::SeekableInputStream>::serializeString(a1 + 24, MutableBytePtr, 0);
            re::EncoderBinary<re::SeekableInputStream>::endString((_anonymous_namespace_ *)(a1 + 24));
            re::EncoderBinary<re::SeekableInputStream>::endPointer((_anonymous_namespace_ *)(a1 + 24));
            re::EncoderBinary<re::SeekableInputStream>::endPointer((_anonymous_namespace_ *)(a1 + 24));
            if ((*(unsigned int (**)(void *))(*v18 + 8))(v18))
            {
              float32x2_t v35 = (unsigned int (*)(uint64_t, void *, __CFData *, const char *))v18[13];
              if (v35)
              {
                if (v35(a4, v18, v33, "json"))
                {
                  CFRelease(v33);
                  return *(unsigned char *)(a1 + 64) == 0;
                }
              }
            }
            char v37 = re::ecs2::g_decodeComponent(a4, v18, v33, "json");
            CFRelease(v33);
            if (v37) {
              return *(unsigned char *)(a1 + 64) == 0;
            }
            re::Encoder<re::EncoderOPACK<re::SeekableInputStream>,re::SeekableInputStream>::setError((_anonymous_namespace_ *)(a1 + 24), a2, "Failed to deserialize Swift Codable component of type %s.", v38, v39, v40, v41, v42, v18[4]);
          }
          else
          {
            re::Encoder<re::EncoderOPACK<re::SeekableInputStream>,re::SeekableInputStream>::setError((_anonymous_namespace_ *)(a1 + 24), a2, "Failed to allocate buffer for JSON data (size = %zu bytes).", v28, v29, v30, v31, v32, v49);
          }
          return 0;
        }
        float32x2_t v36 = "JSON data is empty.";
      }
      else
      {
        float32x2_t v36 = "JSON data not found.";
      }
    }
    else
    {
      float32x2_t v36 = "Object not found.";
    }
    re::Encoder<re::EncoderOPACK<re::SeekableInputStream>,re::SeekableInputStream>::setError((_anonymous_namespace_ *)(a1 + 24), a2, v36, v19, v20, v21, v22, v23, v43);
    return 0;
  }
  return result;
}

uint64_t re::ecs2::serializeSwiftCodableComponent<re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>>(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)a4 + 40))(a4);
  if ((*(unsigned int (**)(uint64_t))(*(void *)v14 + 8))(v14))
  {
    re::TypeMemberCollection::TypeMemberCollection((uint64_t)v36, *a5, a5[2]);
    re::TypeMemberCollection::operator[](v36, 0, (uint64_t)v38);
    re::TypeRegistry::typeInfo(v38[0], *v38[2], &Length);
    re::TypeInfo::TypeInfo((uint64_t)v39, (uint64_t)v42);
    re::TypeRegistry::typeInfo(v39[0], v39[2][9], &Length);
    re::TypeInfo::TypeInfo((uint64_t)v40, (uint64_t)v42);
    uint64_t v15 = (uint64_t *)re::TypeMemberCollection::TypeMemberCollection((uint64_t)&Length, v40[0], v40[2]);
    if (v42[3])
    {
      re::TypeMemberCollection::operator[](v15, 0, (uint64_t)v36);
      if (*(void *)(v37 + 8) >> 1 != 0x274B0FCFAA8) {
        return re::serializeObject<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(a1, a2, a3, a4, (re::TypeInfo *)a5, a6, a7);
      }
      float v16 = *(const char **)(v37 + 16);
      if (v16 != "__JSON__")
      {
        if (strcmp(v16, "__JSON__")) {
          return re::serializeObject<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(a1, a2, a3, a4, (re::TypeInfo *)a5, a6, a7);
        }
      }
    }
  }
  StringID v18 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a4 + 40))(a4);
  if ((*(unsigned int (**)(void *))(*v18 + 8))(v18)
    && (uint64_t v20 = (uint64_t (*)(uint64_t, void *, const char *))v18[12]) != 0
    && (uint64_t v21 = v20(a4, v18, "json")) != 0)
  {
    CFDataRef v22 = (const __CFData *)v21;
  }
  else
  {
    if (!re::ecs2::g_encodeComponent)
    {
      re::internal::assertLog((re::internal *)4, v19, "assertion failure: '%s' (%s:line %i) Swift Codable Encode Callback not registered", "g_encodeComponent", "serializeComponentAsEmbeddedJSON", 42);
      uint64_t result = _os_crash();
      __break(1u);
      return result;
    }
    CFDataRef v22 = (const __CFData *)re::ecs2::g_encodeComponent(a4, v18, "json");
    if (!v22)
    {
      re::Encoder<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setError((_anonymous_namespace_ *)(a1 + 24), a2, v23, v24, v25, v26, v27, v28, v18[4]);
      return 0;
    }
  }
  CFIndex Length = CFDataGetLength(v22);
  if (!Length)
  {
    re::Encoder<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setError((_anonymous_namespace_ *)(a1 + 24), a2, v29, v30, v31, v32, v33, v34, v18[4]);
    CFRelease(v22);
    return 0;
  }
  LODWORD(v36[0]) = 2;
  if (re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::beginPointer(a1 + 24, a2, a3, (int *)v36, 0))
  {
    LODWORD(v40[0]) = 2;
    if (re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::beginPointer(a1 + 24, a2, a3, (int *)v40, 0))
    {
      if (re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::beginString(a1 + 24, a2, a3, (unint64_t *)&Length, 0))
      {
        BytePtr = (char *)CFDataGetBytePtr(v22);
        re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::serializeString(a1 + 24, BytePtr, 0);
        re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::endString((_anonymous_namespace_ *)(a1 + 24));
      }
      re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::endPointer((_anonymous_namespace_ *)(a1 + 24));
    }
    re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::endPointer((_anonymous_namespace_ *)(a1 + 24));
  }
  CFRelease(v22);
  return *(unsigned char *)(a1 + 64) == 0;
}

uint64_t re::ecs2::serializeSwiftCodableComponent<re::Serializer<re::EncoderOPACK<re::SeekableInputStream>>>(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)a4 + 40))(a4);
  if ((*(unsigned int (**)(uint64_t))(*(void *)v14 + 8))(v14))
  {
    re::TypeMemberCollection::TypeMemberCollection((uint64_t)v44, *a5, a5[2]);
    re::TypeMemberCollection::operator[](v44, 0, (uint64_t)v46);
    re::TypeRegistry::typeInfo(v46[0], *v46[2], &v49);
    re::TypeInfo::TypeInfo((uint64_t)v47, (uint64_t)v50);
    re::TypeRegistry::typeInfo(v47[0], v47[2][9], &v49);
    re::TypeInfo::TypeInfo((uint64_t)v48, (uint64_t)v50);
    uint64_t v15 = (uint64_t *)re::TypeMemberCollection::TypeMemberCollection((uint64_t)&v49, v48[0], v48[2]);
    if (v50[3])
    {
      re::TypeMemberCollection::operator[](v15, 0, (uint64_t)v44);
      if (*(void *)(v45 + 8) >> 1 != 0x274B0FCFAA8) {
        return re::serializeObject<re::EncoderOPACK<re::SeekableInputStream>>(a1, a2, a3, a4, (re::TypeInfo *)a5, a6, a7);
      }
      float v16 = *(const char **)(v45 + 16);
      if (v16 != "__JSON__")
      {
        if (strcmp(v16, "__JSON__")) {
          return re::serializeObject<re::EncoderOPACK<re::SeekableInputStream>>(a1, a2, a3, a4, (re::TypeInfo *)a5, a6, a7);
        }
      }
    }
  }
  StringID v18 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a4 + 40))(a4);
  LODWORD(v44[0]) = 0;
  int v24 = re::EncoderOPACK<re::SeekableInputStream>::beginPointer(a1 + 24, a2, a3, (int *)v44, 0);
  uint64_t result = 0;
  if (v24)
  {
    if (LODWORD(v44[0]) == 2)
    {
      int v25 = re::EncoderOPACK<re::SeekableInputStream>::beginPointer(a1 + 24, a2, a3, (int *)v44, 0);
      uint64_t result = 0;
      if (!v25) {
        return result;
      }
      if (LODWORD(v44[0]) == 2)
      {
        CFIndex v49 = 0;
        int v26 = re::EncoderOPACK<re::SeekableInputStream>::beginString(a1 + 24, a2, a3, &v49, 0);
        uint64_t result = 0;
        if (!v26) {
          return result;
        }
        if (v49)
        {
          Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], v49);
          if (Mutable)
          {
            uint64_t v33 = Mutable;
            CFDataIncreaseLength(Mutable, v49);
            MutableBytePtr = (char *)CFDataGetMutableBytePtr(v33);
            re::EncoderOPACK<re::SeekableInputStream>::serializeString(a1 + 24, MutableBytePtr, 0);
            re::EncoderOPACK<re::SeekableInputStream>::endString((_anonymous_namespace_ *)(a1 + 24));
            re::EncoderOPACK<re::SeekableInputStream>::endPointer((_anonymous_namespace_ *)(a1 + 24));
            re::EncoderOPACK<re::SeekableInputStream>::endPointer((_anonymous_namespace_ *)(a1 + 24));
            if ((*(unsigned int (**)(void *))(*v18 + 8))(v18))
            {
              float32x2_t v35 = (unsigned int (*)(uint64_t, void *, __CFData *, const char *))v18[13];
              if (v35)
              {
                if (v35(a4, v18, v33, "json"))
                {
                  CFRelease(v33);
                  return *(unsigned char *)(a1 + 64) == 0;
                }
              }
            }
            char v37 = re::ecs2::g_decodeComponent(a4, v18, v33, "json");
            CFRelease(v33);
            if (v37) {
              return *(unsigned char *)(a1 + 64) == 0;
            }
            re::Encoder<re::EncoderOPACK<re::SeekableInputStream>,re::SeekableInputStream>::setError((_anonymous_namespace_ *)(a1 + 24), a2, "Failed to deserialize Swift Codable component of type %s.", v38, v39, v40, v41, v42, v18[4]);
          }
          else
          {
            re::Encoder<re::EncoderOPACK<re::SeekableInputStream>,re::SeekableInputStream>::setError((_anonymous_namespace_ *)(a1 + 24), a2, "Failed to allocate buffer for JSON data (size = %zu bytes).", v28, v29, v30, v31, v32, v49);
          }
          return 0;
        }
        float32x2_t v36 = "JSON data is empty.";
      }
      else
      {
        float32x2_t v36 = "JSON data not found.";
      }
    }
    else
    {
      float32x2_t v36 = "Object not found.";
    }
    re::Encoder<re::EncoderOPACK<re::SeekableInputStream>,re::SeekableInputStream>::setError((_anonymous_namespace_ *)(a1 + 24), a2, v36, v19, v20, v21, v22, v23, v43);
    return 0;
  }
  return result;
}

uint64_t re::ecs2::serializeSwiftCodableComponent<re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>>(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  float v7 = (_anonymous_namespace_ *)(a1 + 24);
  uint64_t v8 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a4 + 40))(a4);
  if ((*(unsigned int (**)(void *))(*v8 + 8))(v8))
  {
    uint64_t v10 = (uint64_t (*)(uint64_t, void *, const char *))v8[12];
    if (v10)
    {
      CFDataRef v11 = (const __CFData *)v10(a4, v8, "json");
      if (v11) {
        goto LABEL_6;
      }
    }
  }
  if (re::ecs2::g_encodeComponent)
  {
    CFDataRef v11 = (const __CFData *)re::ecs2::g_encodeComponent(a4, v8, "json");
    if (!v11)
    {
      re::Encoder<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setError(v7, a2, v12, v13, v14, v15, v16, v17, v8[4]);
      return 0;
    }
LABEL_6:
    if (CFDataGetLength(v11))
    {
      BytePtr = CFDataGetBytePtr(v11);
      CFIndex Length = CFDataGetLength(v11);
      uint64_t v31 = a2;
      BOOL v26 = *(unsigned char *)(a1 + 64) == 0;
      if (!*(unsigned char *)(a1 + 64))
      {
        uint64_t v27 = Length;
        if ((*(unsigned char *)(*(void *)(a1 + 152) + 48 * *(void *)(a1 + 136) - 44) & 0x20) != 0) {
          rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Key(*(char **)(a1 + 192), &v31);
        }
        uint64_t v28 = *(char **)(a1 + 192);
        rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Prefix(v28);
        rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::WriteRawValue((char **)v28, (uint64_t)BytePtr, v27);
        uint64_t v29 = *(void *)(a1 + 152) + 48 * *(void *)(a1 + 136);
        ++*(void *)(v29 - 16);
      }
    }
    else
    {
      re::Encoder<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setError(v7, a2, v18, v19, v20, v21, v22, v23, v8[4]);
      BOOL v26 = 0;
    }
    CFRelease(v11);
    return v26;
  }
  re::internal::assertLog((re::internal *)4, v9, "assertion failure: '%s' (%s:line %i) Swift Codable Encode Callback not registered", "g_encodeComponent", "serializeComponentAsJSON", 163);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::ecs2::serializeSwiftCodableComponent<re::Serializer<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>>(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a4 + 40))(a4);
  long long v24 = 0u;
  long long v25 = 0u;
  uint64_t v26 = 0;
  uint64_t v27 = 256;
  if (*(unsigned char *)(a1 + 64)) {
    goto LABEL_5;
  }
  uint64_t v8 = (void *)v7;
  JSONValue = re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::readJSONValue((_anonymous_namespace_ *)(a1 + 24), a2, 0);
  if (JSONValue)
  {
    uint64_t v28 = &v24;
    memset(v29, 0, sizeof(v29));
    uint64_t v30 = 0;
    uint64_t v31 = 512;
    int v32 = 324;
    char v33 = 0;
    rapidjson::GenericValue<rapidjson::UTF8<char>,re::internal::RapidJSONPoolAllocator<re::internal::RapidJSONAllocator>>::Accept<rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>(JSONValue, (uint64_t)&v28);
    uint64_t v10 = *(void *)(a1 + 152) + 48 * *(void *)(a1 + 136);
    ++*(void *)(v10 - 16);
    rapidjson::internal::Stack<re::internal::RapidJSONAllocator>::Destroy((uint64_t)v29);
  }
  if (*(unsigned char *)(a1 + 64) || *((void *)&v25 + 1) == (void)v25) {
    goto LABEL_5;
  }
  CFAllocatorRef v13 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  String = (const UInt8 *)rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>::GetString(&v24);
  CFDataRef v15 = CFDataCreateWithBytesNoCopy(v13, String, *((void *)&v25 + 1) - v25, (CFAllocatorRef)*MEMORY[0x263EFFB28]);
  if ((*(unsigned int (**)(void *))(*v8 + 8))(v8))
  {
    uint64_t v17 = (unsigned int (*)(uint64_t, void *, CFDataRef, const char *))v8[13];
    if (v17)
    {
      if (v17(a4, v8, v15, "json"))
      {
        CFRelease(v15);
LABEL_14:
        BOOL v11 = *(unsigned char *)(a1 + 64) == 0;
        goto LABEL_6;
      }
    }
  }
  if (re::ecs2::g_decodeComponent)
  {
    char v18 = re::ecs2::g_decodeComponent(a4, v8, v15, "json");
    CFRelease(v15);
    if (v18) {
      goto LABEL_14;
    }
    re::Encoder<re::EncoderOPACK<re::SeekableInputStream>,re::SeekableInputStream>::setError((_anonymous_namespace_ *)(a1 + 24), a2, "Failed to deserialize Swift Codable component of type %s.", v19, v20, v21, v22, v23, v8[4]);
LABEL_5:
    BOOL v11 = 0;
LABEL_6:
    rapidjson::internal::Stack<re::internal::RapidJSONAllocator>::Destroy((uint64_t)&v24);
    return v11;
  }
  re::internal::assertLog((re::internal *)4, v16, "assertion failure: '%s' (%s:line %i) Swift Codable Decode Callback not registered", "g_decodeComponent", "serializeComponentAsJSON", 204, v24);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::ecs2::serializeSwiftCodableComponent<re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>>(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = (_anonymous_namespace_ *)(a1 + 24);
  uint64_t v8 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a4 + 40))(a4);
  if ((*(unsigned int (**)(void *))(*v8 + 8))(v8))
  {
    uint64_t v10 = (uint64_t (*)(uint64_t, void *, const char *))v8[12];
    if (v10)
    {
      CFDataRef v11 = (const __CFData *)v10(a4, v8, "json");
      if (v11) {
        goto LABEL_6;
      }
    }
  }
  if (re::ecs2::g_encodeComponent)
  {
    CFDataRef v11 = (const __CFData *)re::ecs2::g_encodeComponent(a4, v8, "json");
    if (!v11)
    {
      re::Encoder<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setError(v7, a2, v12, v13, v14, v15, v16, v17, v8[4]);
      return 0;
    }
LABEL_6:
    if (CFDataGetLength(v11))
    {
      BytePtr = CFDataGetBytePtr(v11);
      CFIndex Length = CFDataGetLength(v11);
      uint64_t v31 = a2;
      BOOL v26 = *(unsigned char *)(a1 + 64) == 0;
      if (!*(unsigned char *)(a1 + 64))
      {
        uint64_t v27 = Length;
        if ((*(unsigned char *)(*(void *)(a1 + 152) + 48 * *(void *)(a1 + 136) - 44) & 0x20) != 0) {
          rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Key(*(char **)(a1 + 192), &v31);
        }
        uint64_t v28 = *(char **)(a1 + 192);
        rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Prefix(v28);
        rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::WriteRawValue((char **)v28, (uint64_t)BytePtr, v27);
        uint64_t v29 = *(void *)(a1 + 152) + 48 * *(void *)(a1 + 136);
        ++*(void *)(v29 - 16);
      }
    }
    else
    {
      re::Encoder<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setError(v7, a2, v18, v19, v20, v21, v22, v23, v8[4]);
      BOOL v26 = 0;
    }
    CFRelease(v11);
    return v26;
  }
  re::internal::assertLog((re::internal *)4, v9, "assertion failure: '%s' (%s:line %i) Swift Codable Encode Callback not registered", "g_encodeComponent", "serializeComponentAsJSON", 163);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::ecs2::serializeSwiftCodableComponent<re::Serializer<re::EncoderOPACK<re::FixedArrayInputStream>>>(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)a4 + 40))(a4);
  if ((*(unsigned int (**)(uint64_t))(*(void *)v14 + 8))(v14))
  {
    re::TypeMemberCollection::TypeMemberCollection((uint64_t)v44, *a5, a5[2]);
    re::TypeMemberCollection::operator[](v44, 0, (uint64_t)v46);
    re::TypeRegistry::typeInfo(v46[0], *v46[2], &v49);
    re::TypeInfo::TypeInfo((uint64_t)v47, (uint64_t)v50);
    re::TypeRegistry::typeInfo(v47[0], v47[2][9], &v49);
    re::TypeInfo::TypeInfo((uint64_t)v48, (uint64_t)v50);
    uint64_t v15 = (uint64_t *)re::TypeMemberCollection::TypeMemberCollection((uint64_t)&v49, v48[0], v48[2]);
    if (v50[3])
    {
      re::TypeMemberCollection::operator[](v15, 0, (uint64_t)v44);
      if (*(void *)(v45 + 8) >> 1 != 0x274B0FCFAA8) {
        return re::serializeObject<re::EncoderOPACK<re::FixedArrayInputStream>>(a1, a2, a3, a4, (re::TypeInfo *)a5, a6, a7);
      }
      uint64_t v16 = *(const char **)(v45 + 16);
      if (v16 != "__JSON__")
      {
        if (strcmp(v16, "__JSON__")) {
          return re::serializeObject<re::EncoderOPACK<re::FixedArrayInputStream>>(a1, a2, a3, a4, (re::TypeInfo *)a5, a6, a7);
        }
      }
    }
  }
  uint64_t v18 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a4 + 40))(a4);
  LODWORD(v44[0]) = 0;
  int v24 = re::EncoderOPACK<re::FixedArrayInputStream>::beginPointer(a1 + 24, a2, a3, (int *)v44, 0);
  uint64_t result = 0;
  if (v24)
  {
    if (LODWORD(v44[0]) == 2)
    {
      int v25 = re::EncoderOPACK<re::FixedArrayInputStream>::beginPointer(a1 + 24, a2, a3, (int *)v44, 0);
      uint64_t result = 0;
      if (!v25) {
        return result;
      }
      if (LODWORD(v44[0]) == 2)
      {
        CFIndex v49 = 0;
        int v26 = re::EncoderOPACK<re::FixedArrayInputStream>::beginString(a1 + 24, a2, a3, &v49, 0);
        uint64_t result = 0;
        if (!v26) {
          return result;
        }
        if (v49)
        {
          Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], v49);
          if (Mutable)
          {
            char v33 = Mutable;
            CFDataIncreaseLength(Mutable, v49);
            MutableBytePtr = (char *)CFDataGetMutableBytePtr(v33);
            re::EncoderOPACK<re::FixedArrayInputStream>::serializeString(a1 + 24, MutableBytePtr, 0);
            re::EncoderOPACK<re::FixedArrayInputStream>::endString((_anonymous_namespace_ *)(a1 + 24));
            re::EncoderOPACK<re::FixedArrayInputStream>::endPointer((_anonymous_namespace_ *)(a1 + 24));
            re::EncoderOPACK<re::FixedArrayInputStream>::endPointer((_anonymous_namespace_ *)(a1 + 24));
            if ((*(unsigned int (**)(void *))(*v18 + 8))(v18))
            {
              float32x2_t v35 = (unsigned int (*)(uint64_t, void *, __CFData *, const char *))v18[13];
              if (v35)
              {
                if (v35(a4, v18, v33, "json"))
                {
                  CFRelease(v33);
                  return *(unsigned char *)(a1 + 64) == 0;
                }
              }
            }
            char v37 = re::ecs2::g_decodeComponent(a4, v18, v33, "json");
            CFRelease(v33);
            if (v37) {
              return *(unsigned char *)(a1 + 64) == 0;
            }
            re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::setError((_anonymous_namespace_ *)(a1 + 24), a2, "Failed to deserialize Swift Codable component of type %s.", v38, v39, v40, v41, v42, v18[4]);
          }
          else
          {
            re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::setError((_anonymous_namespace_ *)(a1 + 24), a2, "Failed to allocate buffer for JSON data (size = %zu bytes).", v28, v29, v30, v31, v32, v49);
          }
          return 0;
        }
        float32x2_t v36 = "JSON data is empty.";
      }
      else
      {
        float32x2_t v36 = "JSON data not found.";
      }
    }
    else
    {
      float32x2_t v36 = "Object not found.";
    }
    re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::setError((_anonymous_namespace_ *)(a1 + 24), a2, v36, v19, v20, v21, v22, v23, v43);
    return 0;
  }
  return result;
}

double re::registerSerializationFunctions(void)::$_0::__invoke@<D0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (a1)
  {
    uint64_t v2 = *(void (**)(void))(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) + 56);
    v2();
  }
  else
  {
    *a2 = 0;
    *(void *)&double result = 0xFFFFFFFFLL;
    a2[1] = 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t re::serializeVector2F<re::Serializer<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  if (a5 == a6)
  {
LABEL_4:
    return re::serialize<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, a4, a7);
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v15 = **((void **)a5 + 2);
    uint64_t v16 = **((void **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      BOOL v18 = WORD1(v15) == WORD1(v16);
      uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      BOOL v18 = v18 && v17 == 0;
      if (v18) {
        goto LABEL_4;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    goto LABEL_4;
  }
  return re::serializeObject<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
}

uint64_t re::serializeVector3F<re::Serializer<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  if (a5 == a6)
  {
LABEL_4:
    return re::serialize<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, a4, a7);
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v15 = **((void **)a5 + 2);
    uint64_t v16 = **((void **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      BOOL v18 = WORD1(v15) == WORD1(v16);
      uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      BOOL v18 = v18 && v17 == 0;
      if (v18) {
        goto LABEL_4;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    goto LABEL_4;
  }
  return re::serializeObject<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
}

uint64_t re::serializeVector4F<re::Serializer<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  if (a5 == a6)
  {
LABEL_4:
    return re::serialize<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, a4, a7);
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v15 = **((void **)a5 + 2);
    uint64_t v16 = **((void **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      BOOL v18 = WORD1(v15) == WORD1(v16);
      uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      BOOL v18 = v18 && v17 == 0;
      if (v18) {
        goto LABEL_4;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    goto LABEL_4;
  }
  return re::serializeObject<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
}

uint64_t re::serializeVector2D<re::Serializer<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  if (a5 == a6) {
    goto LABEL_4;
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v15 = **((void **)a5 + 2);
    uint64_t v16 = **((void **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      BOOL v18 = WORD1(v15) == WORD1(v16);
      uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      BOOL v18 = v18 && v17 == 0;
      if (v18) {
        goto LABEL_4;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
LABEL_4:
    unint64_t v19 = 2;
    uint64_t result = re::EncoderBinary<re::DynamicArrayBufferedOutputStream>::beginArray((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, &v19, 4);
    if (result)
    {
      re::EncoderBinary<re::DynamicArrayBufferedOutputStream>::serializeValue<long long>(a1 + 24, "x", 0, a4, (uint64_t)"double", a7);
      re::EncoderBinary<re::DynamicArrayBufferedOutputStream>::serializeValue<long long>(a1 + 24, "y", 1, a4 + 8, (uint64_t)"double", a7);
      re::EncoderBinary<re::DynamicArrayBufferedOutputStream>::endArray((_anonymous_namespace_ *)(a1 + 24));
      return *(unsigned char *)(a1 + 64) == 0;
    }
    return result;
  }
  return re::serializeObject<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
}

uint64_t re::serializeVector3D<re::Serializer<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  if (a5 == a6) {
    goto LABEL_4;
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v15 = **((void **)a5 + 2);
    uint64_t v16 = **((void **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      BOOL v18 = WORD1(v15) == WORD1(v16);
      uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      BOOL v18 = v18 && v17 == 0;
      if (v18) {
        goto LABEL_4;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
LABEL_4:
    unint64_t v19 = 3;
    uint64_t result = re::EncoderBinary<re::DynamicArrayBufferedOutputStream>::beginArray((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, &v19, 4);
    if (result)
    {
      re::EncoderBinary<re::DynamicArrayBufferedOutputStream>::serializeValue<long long>(a1 + 24, "x", 0, a4, (uint64_t)"double", a7);
      re::EncoderBinary<re::DynamicArrayBufferedOutputStream>::serializeValue<long long>(a1 + 24, "y", 1, a4 + 8, (uint64_t)"double", a7);
      re::EncoderBinary<re::DynamicArrayBufferedOutputStream>::serializeValue<long long>(a1 + 24, "z", 2, a4 + 16, (uint64_t)"double", a7);
      re::EncoderBinary<re::DynamicArrayBufferedOutputStream>::endArray((_anonymous_namespace_ *)(a1 + 24));
      return *(unsigned char *)(a1 + 64) == 0;
    }
    return result;
  }
  return re::serializeObject<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
}

uint64_t re::serializeVector4D<re::Serializer<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  if (a5 == a6) {
    goto LABEL_4;
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v15 = **((void **)a5 + 2);
    uint64_t v16 = **((void **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      BOOL v18 = WORD1(v15) == WORD1(v16);
      uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      BOOL v18 = v18 && v17 == 0;
      if (v18) {
        goto LABEL_4;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
LABEL_4:
    unint64_t v19 = 4;
    uint64_t result = re::EncoderBinary<re::DynamicArrayBufferedOutputStream>::beginArray((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, &v19, 4);
    if (result)
    {
      re::EncoderBinary<re::DynamicArrayBufferedOutputStream>::serializeValue<long long>(a1 + 24, "x", 0, a4, (uint64_t)"double", a7);
      re::EncoderBinary<re::DynamicArrayBufferedOutputStream>::serializeValue<long long>(a1 + 24, "y", 1, a4 + 8, (uint64_t)"double", a7);
      re::EncoderBinary<re::DynamicArrayBufferedOutputStream>::serializeValue<long long>(a1 + 24, "z", 2, a4 + 16, (uint64_t)"double", a7);
      re::EncoderBinary<re::DynamicArrayBufferedOutputStream>::serializeValue<long long>(a1 + 24, "w", 3, a4 + 24, (uint64_t)"double", a7);
      re::EncoderBinary<re::DynamicArrayBufferedOutputStream>::endArray((_anonymous_namespace_ *)(a1 + 24));
      return *(unsigned char *)(a1 + 64) == 0;
    }
    return result;
  }
  return re::serializeObject<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
}

uint64_t re::serializeMatrix2x2F<re::Serializer<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  if (a5 == a6) {
    goto LABEL_4;
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v15 = **((void **)a5 + 2);
    uint64_t v16 = **((void **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      BOOL v18 = WORD1(v15) == WORD1(v16);
      uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      BOOL v18 = v18 && v17 == 0;
      if (v18) {
        goto LABEL_4;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
LABEL_4:
    unint64_t v19 = 2;
    uint64_t result = re::EncoderBinary<re::DynamicArrayBufferedOutputStream>::beginArray((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, &v19, 4);
    if (result)
    {
      re::serialize<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>((_anonymous_namespace_ *)(a1 + 24), "column0", 0, a4, a7);
      re::serialize<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>((_anonymous_namespace_ *)(a1 + 24), "column1", 1, a4 + 8, a7);
      re::EncoderBinary<re::DynamicArrayBufferedOutputStream>::endArray((_anonymous_namespace_ *)(a1 + 24));
      return *(unsigned char *)(a1 + 64) == 0;
    }
    return result;
  }
  return re::serializeObject<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
}

uint64_t re::serializeMatrix3x3F<re::Serializer<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  if (a5 == a6) {
    goto LABEL_4;
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v15 = **((void **)a5 + 2);
    uint64_t v16 = **((void **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      BOOL v18 = WORD1(v15) == WORD1(v16);
      uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      BOOL v18 = v18 && v17 == 0;
      if (v18) {
        goto LABEL_4;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
LABEL_4:
    unint64_t v19 = 3;
    uint64_t result = re::EncoderBinary<re::DynamicArrayBufferedOutputStream>::beginArray((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, &v19, 4);
    if (result)
    {
      re::serialize<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>((_anonymous_namespace_ *)(a1 + 24), "column0", 0, a4, a7);
      re::serialize<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>((_anonymous_namespace_ *)(a1 + 24), "column1", 1, a4 + 16, a7);
      re::serialize<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>((_anonymous_namespace_ *)(a1 + 24), "column2", 2, a4 + 32, a7);
      re::EncoderBinary<re::DynamicArrayBufferedOutputStream>::endArray((_anonymous_namespace_ *)(a1 + 24));
      return *(unsigned char *)(a1 + 64) == 0;
    }
    return result;
  }
  return re::serializeObject<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
}

uint64_t re::serializeMatrix4x4F<re::Serializer<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  if (a5 == a6) {
    goto LABEL_4;
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v15 = **((void **)a5 + 2);
    uint64_t v16 = **((void **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      BOOL v18 = WORD1(v15) == WORD1(v16);
      uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      BOOL v18 = v18 && v17 == 0;
      if (v18) {
        goto LABEL_4;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
LABEL_4:
    unint64_t v19 = 4;
    uint64_t result = re::EncoderBinary<re::DynamicArrayBufferedOutputStream>::beginArray((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, &v19, 4);
    if (result)
    {
      re::serialize<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>((_anonymous_namespace_ *)(a1 + 24), "column0", 0, a4, a7);
      re::serialize<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>((_anonymous_namespace_ *)(a1 + 24), "column1", 1, a4 + 16, a7);
      re::serialize<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>((_anonymous_namespace_ *)(a1 + 24), "column2", 2, a4 + 32, a7);
      re::serialize<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>((_anonymous_namespace_ *)(a1 + 24), "column3", 3, a4 + 48, a7);
      re::EncoderBinary<re::DynamicArrayBufferedOutputStream>::endArray((_anonymous_namespace_ *)(a1 + 24));
      return *(unsigned char *)(a1 + 64) == 0;
    }
    return result;
  }
  return re::serializeObject<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
}

uint64_t re::serializePoseF<re::Serializer<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  if (a5 == a6) {
    goto LABEL_4;
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v15 = **((void **)a5 + 2);
    uint64_t v16 = **((void **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      BOOL v18 = WORD1(v15) == WORD1(v16);
      uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      BOOL v18 = v18 && v17 == 0;
      if (v18) {
        goto LABEL_4;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
LABEL_4:
    if (*(unsigned char *)(a1 + 64)) {
      return 0;
    }
    LOBYTE(v19[0]) = 1;
    DWORD1(v19[0]) = 0;
    *((void *)&v19[0] + 1) = a2;
    memset(&v19[1], 0, 32);
    re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::pushState((void *)(a1 + 24), v19);
    re::serialize<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>((_anonymous_namespace_ *)(a1 + 24), "position", 1, a4, a7);
    re::serialize<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>((_anonymous_namespace_ *)(a1 + 24), "orientation", 2, a4 + 16, a7);
    re::EncoderBinary<re::DynamicArrayBufferedOutputStream>::endObject((_anonymous_namespace_ *)(a1 + 24));
    return *(unsigned char *)(a1 + 64) == 0;
  }
  return re::serializeObject<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
}

uint64_t re::serializeQuaternionF<re::Serializer<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  if (a5 == a6)
  {
LABEL_4:
    return re::serialize<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, a4, a7);
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v15 = **((void **)a5 + 2);
    uint64_t v16 = **((void **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      BOOL v18 = WORD1(v15) == WORD1(v16);
      uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      BOOL v18 = v18 && v17 == 0;
      if (v18) {
        goto LABEL_4;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    goto LABEL_4;
  }
  return re::serializeObject<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
}

uint64_t re::serializeSRT<re::Serializer<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  if (a5 == a6) {
    goto LABEL_4;
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v15 = **((void **)a5 + 2);
    uint64_t v16 = **((void **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      BOOL v18 = WORD1(v15) == WORD1(v16);
      uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      BOOL v18 = v18 && v17 == 0;
      if (v18) {
        goto LABEL_4;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
LABEL_4:
    if (*(unsigned char *)(a1 + 64)) {
      return 0;
    }
    LOBYTE(v19[0]) = 1;
    DWORD1(v19[0]) = 0;
    *((void *)&v19[0] + 1) = a2;
    memset(&v19[1], 0, 32);
    re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::pushState((void *)(a1 + 24), v19);
    re::serialize<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>((_anonymous_namespace_ *)(a1 + 24), "scale", 1, a4, a7);
    re::serialize<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>((_anonymous_namespace_ *)(a1 + 24), "rotation", 2, a4 + 16, a7);
    re::serialize<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>((_anonymous_namespace_ *)(a1 + 24), "translation", 3, a4 + 32, a7);
    re::EncoderBinary<re::DynamicArrayBufferedOutputStream>::endObject((_anonymous_namespace_ *)(a1 + 24));
    return *(unsigned char *)(a1 + 64) == 0;
  }
  return re::serializeObject<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
}

uint64_t re::serializeAudioPlaybackState<re::Serializer<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>>(unsigned char *a1, const char *a2, const re::TypeInfo *a3, re::TypeInfo *a4, re::internal *a5, re::TypeInfo *this, uint64_t a7)
{
  if (a5 == this)
  {
    return re::internal::serializeEnumAsBinary<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>(a1, a2, a3, a4, a5, a5, a7);
  }
  else
  {
    uint64_t v14 = (void *)re::TypeInfo::enumConstants(this);
    if (v15)
    {
      uint64_t v16 = 24 * v15;
      while (*v14 != 9)
      {
        v14 += 3;
        v16 -= 24;
        if (!v16) {
          goto LABEL_6;
        }
      }
      return re::serializeEnum<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>(a1, a2, a3, a4, (uint64_t)a5, (uint64_t)this, a7);
    }
    else
    {
LABEL_6:
      re::TypeRegistry::typeInfo(*(void **)a5, *(void *)(*((void *)a5 + 2) + 72), v20);
      re::TypeInfo::TypeInfo((uint64_t)v19, (uint64_t)v21);
      re::TypeRegistry::typeInfo(*(void **)this, *(void *)(*((void *)this + 2) + 72), v20);
      re::TypeInfo::TypeInfo((uint64_t)v18, (uint64_t)v21);
      if (a1[64]) {
        return 0;
      }
      else {
        return (*(uint64_t (**)(unsigned char *, const char *, const re::TypeInfo *, re::TypeInfo *, unsigned char *, unsigned char *, uint64_t))(*(void *)a1 + 72))(a1, a2, a3, a4, v19, v18, a7);
      }
    }
  }
}

BOOL re::serialize<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>(_anonymous_namespace_ *a1, const char *a2, uint64_t a3, char *a4, char a5)
{
  unint64_t v9 = 2;
  BOOL result = re::EncoderBinary<re::DynamicArrayBufferedOutputStream>::beginArray(a1, a2, a3, &v9, 4);
  if (result)
  {
    re::EncoderBinary<re::DynamicArrayBufferedOutputStream>::serializeValue<int>((uint64_t)a1, "x", 0, a4, (uint64_t)"float", a5);
    re::EncoderBinary<re::DynamicArrayBufferedOutputStream>::serializeValue<int>((uint64_t)a1, "y", 1, a4 + 4, (uint64_t)"float", a5);
    re::EncoderBinary<re::DynamicArrayBufferedOutputStream>::endArray(a1);
    return *((unsigned char *)a1 + 40) == 0;
  }
  return result;
}

{
  BOOL result;
  unint64_t v9;

  unint64_t v9 = 3;
  BOOL result = re::EncoderBinary<re::DynamicArrayBufferedOutputStream>::beginArray(a1, a2, a3, &v9, 4);
  if (result)
  {
    re::EncoderBinary<re::DynamicArrayBufferedOutputStream>::serializeValue<int>((uint64_t)a1, "x", 0, a4, (uint64_t)"float", a5);
    re::EncoderBinary<re::DynamicArrayBufferedOutputStream>::serializeValue<int>((uint64_t)a1, "y", 1, a4 + 4, (uint64_t)"float", a5);
    re::EncoderBinary<re::DynamicArrayBufferedOutputStream>::serializeValue<int>((uint64_t)a1, "z", 2, a4 + 8, (uint64_t)"float", a5);
    re::EncoderBinary<re::DynamicArrayBufferedOutputStream>::endArray(a1);
    return *((unsigned char *)a1 + 40) == 0;
  }
  return result;
}

{
  BOOL result;
  unint64_t v9;

  unint64_t v9 = 4;
  BOOL result = re::EncoderBinary<re::DynamicArrayBufferedOutputStream>::beginArray(a1, a2, a3, &v9, 4);
  if (result)
  {
    re::EncoderBinary<re::DynamicArrayBufferedOutputStream>::serializeValue<int>((uint64_t)a1, "x", 0, a4, (uint64_t)"float", a5);
    re::EncoderBinary<re::DynamicArrayBufferedOutputStream>::serializeValue<int>((uint64_t)a1, "y", 1, a4 + 4, (uint64_t)"float", a5);
    re::EncoderBinary<re::DynamicArrayBufferedOutputStream>::serializeValue<int>((uint64_t)a1, "z", 2, a4 + 8, (uint64_t)"float", a5);
    re::EncoderBinary<re::DynamicArrayBufferedOutputStream>::serializeValue<int>((uint64_t)a1, "w", 3, a4 + 12, (uint64_t)"float", a5);
    re::EncoderBinary<re::DynamicArrayBufferedOutputStream>::endArray(a1);
    return *((unsigned char *)a1 + 40) == 0;
  }
  return result;
}

uint64_t re::serializeVector2F<re::Serializer<re::EncoderBinary<re::SeekableInputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  if (a5 == a6)
  {
LABEL_4:
    return re::serialize<re::EncoderBinary<re::SeekableInputStream>>((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, a4, a7);
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v15 = **((void **)a5 + 2);
    uint64_t v16 = **((void **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      BOOL v18 = WORD1(v15) == WORD1(v16);
      uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      BOOL v18 = v18 && v17 == 0;
      if (v18) {
        goto LABEL_4;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    goto LABEL_4;
  }
  return re::serializeObject<re::EncoderBinary<re::SeekableInputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
}

uint64_t re::serializeVector3F<re::Serializer<re::EncoderBinary<re::SeekableInputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  if (a5 == a6)
  {
LABEL_4:
    return re::serialize<re::EncoderBinary<re::SeekableInputStream>>((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, a4, a7);
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v15 = **((void **)a5 + 2);
    uint64_t v16 = **((void **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      BOOL v18 = WORD1(v15) == WORD1(v16);
      uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      BOOL v18 = v18 && v17 == 0;
      if (v18) {
        goto LABEL_4;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    goto LABEL_4;
  }
  return re::serializeObject<re::EncoderBinary<re::SeekableInputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
}

uint64_t re::serializeVector4F<re::Serializer<re::EncoderBinary<re::SeekableInputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  if (a5 == a6)
  {
LABEL_4:
    return re::serialize<re::EncoderBinary<re::SeekableInputStream>>((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, a4, a7);
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v15 = **((void **)a5 + 2);
    uint64_t v16 = **((void **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      BOOL v18 = WORD1(v15) == WORD1(v16);
      uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      BOOL v18 = v18 && v17 == 0;
      if (v18) {
        goto LABEL_4;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    goto LABEL_4;
  }
  return re::serializeObject<re::EncoderBinary<re::SeekableInputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
}

uint64_t re::serializeVector2D<re::Serializer<re::EncoderBinary<re::SeekableInputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  if (a5 == a6)
  {
LABEL_4:
    uint64_t v24 = 2;
    uint64_t result = re::EncoderBinary<re::SeekableInputStream>::beginArray(a1 + 24, a2, (uint64_t)a3, (char *)&v24, 4);
    if (result)
    {
      if (v24 == 2)
      {
        re::EncoderBinary<re::SeekableInputStream>::serializeValue<double>(a1 + 24, "x", 0, a4, (uint64_t)"double", a7);
        re::EncoderBinary<re::SeekableInputStream>::serializeValue<double>(a1 + 24, "y", 1, a4 + 8, (uint64_t)"double", a7);
        re::EncoderBinary<re::SeekableInputStream>::endArray((_anonymous_namespace_ *)(a1 + 24));
        return *(unsigned char *)(a1 + 64) == 0;
      }
      else
      {
        re::Encoder<re::EncoderOPACK<re::SeekableInputStream>,re::SeekableInputStream>::setError((_anonymous_namespace_ *)(a1 + 24), 0, "Failed to deserialize vector. Expected array length = 2, actual array length = %zu", v15, v16, v17, v18, v19, v24);
        return 0;
      }
    }
    return result;
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v20 = **((void **)a5 + 2);
    uint64_t v21 = **((void **)a6 + 2);
    if ((unsigned __int16)v20 == (unsigned __int16)v21)
    {
      BOOL v23 = WORD1(v20) == WORD1(v21);
      uint64_t v22 = (v21 ^ v20) & 0xFFFFFF00000000;
      BOOL v23 = v23 && v22 == 0;
      if (v23) {
        goto LABEL_4;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    goto LABEL_4;
  }
  return re::serializeObject<re::EncoderBinary<re::SeekableInputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
}

uint64_t re::serializeVector3D<re::Serializer<re::EncoderBinary<re::SeekableInputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  if (a5 == a6)
  {
LABEL_4:
    uint64_t v24 = 3;
    uint64_t result = re::EncoderBinary<re::SeekableInputStream>::beginArray(a1 + 24, a2, (uint64_t)a3, (char *)&v24, 4);
    if (result)
    {
      if (v24 == 3)
      {
        re::EncoderBinary<re::SeekableInputStream>::serializeValue<double>(a1 + 24, "x", 0, a4, (uint64_t)"double", a7);
        re::EncoderBinary<re::SeekableInputStream>::serializeValue<double>(a1 + 24, "y", 1, a4 + 8, (uint64_t)"double", a7);
        re::EncoderBinary<re::SeekableInputStream>::serializeValue<double>(a1 + 24, "z", 2, a4 + 16, (uint64_t)"double", a7);
        re::EncoderBinary<re::SeekableInputStream>::endArray((_anonymous_namespace_ *)(a1 + 24));
        return *(unsigned char *)(a1 + 64) == 0;
      }
      else
      {
        re::Encoder<re::EncoderOPACK<re::SeekableInputStream>,re::SeekableInputStream>::setError((_anonymous_namespace_ *)(a1 + 24), 0, "Failed to deserialize vector. Expected array length = 3, actual array length = %zu", v15, v16, v17, v18, v19, v24);
        return 0;
      }
    }
    return result;
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v20 = **((void **)a5 + 2);
    uint64_t v21 = **((void **)a6 + 2);
    if ((unsigned __int16)v20 == (unsigned __int16)v21)
    {
      BOOL v23 = WORD1(v20) == WORD1(v21);
      uint64_t v22 = (v21 ^ v20) & 0xFFFFFF00000000;
      BOOL v23 = v23 && v22 == 0;
      if (v23) {
        goto LABEL_4;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    goto LABEL_4;
  }
  return re::serializeObject<re::EncoderBinary<re::SeekableInputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
}

uint64_t re::serializeVector4D<re::Serializer<re::EncoderBinary<re::SeekableInputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  if (a5 == a6)
  {
LABEL_4:
    uint64_t v24 = 4;
    uint64_t result = re::EncoderBinary<re::SeekableInputStream>::beginArray(a1 + 24, a2, (uint64_t)a3, (char *)&v24, 4);
    if (result)
    {
      if (v24 == 4)
      {
        re::EncoderBinary<re::SeekableInputStream>::serializeValue<double>(a1 + 24, "x", 0, a4, (uint64_t)"double", a7);
        re::EncoderBinary<re::SeekableInputStream>::serializeValue<double>(a1 + 24, "y", 1, a4 + 8, (uint64_t)"double", a7);
        re::EncoderBinary<re::SeekableInputStream>::serializeValue<double>(a1 + 24, "z", 2, a4 + 16, (uint64_t)"double", a7);
        re::EncoderBinary<re::SeekableInputStream>::serializeValue<double>(a1 + 24, "w", 3, a4 + 24, (uint64_t)"double", a7);
        re::EncoderBinary<re::SeekableInputStream>::endArray((_anonymous_namespace_ *)(a1 + 24));
        return *(unsigned char *)(a1 + 64) == 0;
      }
      else
      {
        re::Encoder<re::EncoderOPACK<re::SeekableInputStream>,re::SeekableInputStream>::setError((_anonymous_namespace_ *)(a1 + 24), 0, "Failed to deserialize vector. Expected array length = 4, actual array length = %zu", v15, v16, v17, v18, v19, v24);
        return 0;
      }
    }
    return result;
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v20 = **((void **)a5 + 2);
    uint64_t v21 = **((void **)a6 + 2);
    if ((unsigned __int16)v20 == (unsigned __int16)v21)
    {
      BOOL v23 = WORD1(v20) == WORD1(v21);
      uint64_t v22 = (v21 ^ v20) & 0xFFFFFF00000000;
      BOOL v23 = v23 && v22 == 0;
      if (v23) {
        goto LABEL_4;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    goto LABEL_4;
  }
  return re::serializeObject<re::EncoderBinary<re::SeekableInputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
}

uint64_t re::serializeMatrix2x2F<re::Serializer<re::EncoderBinary<re::SeekableInputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  if (a5 == a6)
  {
LABEL_4:
    uint64_t v24 = 2;
    uint64_t result = re::EncoderBinary<re::SeekableInputStream>::beginArray(a1 + 24, a2, (uint64_t)a3, (char *)&v24, 4);
    if (result)
    {
      if (v24 == 2)
      {
        re::serialize<re::EncoderBinary<re::SeekableInputStream>>((_anonymous_namespace_ *)(a1 + 24), "column0", 0, a4, a7);
        re::serialize<re::EncoderBinary<re::SeekableInputStream>>((_anonymous_namespace_ *)(a1 + 24), "column1", 1, a4 + 8, a7);
        re::EncoderBinary<re::SeekableInputStream>::endArray((_anonymous_namespace_ *)(a1 + 24));
        return *(unsigned char *)(a1 + 64) == 0;
      }
      else
      {
        re::Encoder<re::EncoderOPACK<re::SeekableInputStream>,re::SeekableInputStream>::setError((_anonymous_namespace_ *)(a1 + 24), 0, "Failed to deserialize matrix. Expected array length = 2, actual array length = %zu", v15, v16, v17, v18, v19, v24);
        return 0;
      }
    }
    return result;
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v20 = **((void **)a5 + 2);
    uint64_t v21 = **((void **)a6 + 2);
    if ((unsigned __int16)v20 == (unsigned __int16)v21)
    {
      BOOL v23 = WORD1(v20) == WORD1(v21);
      uint64_t v22 = (v21 ^ v20) & 0xFFFFFF00000000;
      BOOL v23 = v23 && v22 == 0;
      if (v23) {
        goto LABEL_4;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    goto LABEL_4;
  }
  return re::serializeObject<re::EncoderBinary<re::SeekableInputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
}

uint64_t re::serializeMatrix3x3F<re::Serializer<re::EncoderBinary<re::SeekableInputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  if (a5 == a6)
  {
LABEL_4:
    uint64_t v24 = 3;
    uint64_t result = re::EncoderBinary<re::SeekableInputStream>::beginArray(a1 + 24, a2, (uint64_t)a3, (char *)&v24, 4);
    if (result)
    {
      if (v24 == 3)
      {
        re::serialize<re::EncoderBinary<re::SeekableInputStream>>((_anonymous_namespace_ *)(a1 + 24), "column0", 0, a4, a7);
        re::serialize<re::EncoderBinary<re::SeekableInputStream>>((_anonymous_namespace_ *)(a1 + 24), "column1", 1, a4 + 16, a7);
        re::serialize<re::EncoderBinary<re::SeekableInputStream>>((_anonymous_namespace_ *)(a1 + 24), "column2", 2, a4 + 32, a7);
        re::EncoderBinary<re::SeekableInputStream>::endArray((_anonymous_namespace_ *)(a1 + 24));
        return *(unsigned char *)(a1 + 64) == 0;
      }
      else
      {
        re::Encoder<re::EncoderOPACK<re::SeekableInputStream>,re::SeekableInputStream>::setError((_anonymous_namespace_ *)(a1 + 24), 0, "Failed to deserialize matrix. Expected array length = 3, actual array length = %zu", v15, v16, v17, v18, v19, v24);
        return 0;
      }
    }
    return result;
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v20 = **((void **)a5 + 2);
    uint64_t v21 = **((void **)a6 + 2);
    if ((unsigned __int16)v20 == (unsigned __int16)v21)
    {
      BOOL v23 = WORD1(v20) == WORD1(v21);
      uint64_t v22 = (v21 ^ v20) & 0xFFFFFF00000000;
      BOOL v23 = v23 && v22 == 0;
      if (v23) {
        goto LABEL_4;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    goto LABEL_4;
  }
  return re::serializeObject<re::EncoderBinary<re::SeekableInputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
}

uint64_t re::serializeMatrix4x4F<re::Serializer<re::EncoderBinary<re::SeekableInputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  if (a5 == a6)
  {
LABEL_4:
    uint64_t v24 = 4;
    uint64_t result = re::EncoderBinary<re::SeekableInputStream>::beginArray(a1 + 24, a2, (uint64_t)a3, (char *)&v24, 4);
    if (result)
    {
      if (v24 == 4)
      {
        re::serialize<re::EncoderBinary<re::SeekableInputStream>>((_anonymous_namespace_ *)(a1 + 24), "column0", 0, a4, a7);
        re::serialize<re::EncoderBinary<re::SeekableInputStream>>((_anonymous_namespace_ *)(a1 + 24), "column1", 1, a4 + 16, a7);
        re::serialize<re::EncoderBinary<re::SeekableInputStream>>((_anonymous_namespace_ *)(a1 + 24), "column2", 2, a4 + 32, a7);
        re::serialize<re::EncoderBinary<re::SeekableInputStream>>((_anonymous_namespace_ *)(a1 + 24), "column3", 3, a4 + 48, a7);
        re::EncoderBinary<re::SeekableInputStream>::endArray((_anonymous_namespace_ *)(a1 + 24));
        return *(unsigned char *)(a1 + 64) == 0;
      }
      else
      {
        re::Encoder<re::EncoderOPACK<re::SeekableInputStream>,re::SeekableInputStream>::setError((_anonymous_namespace_ *)(a1 + 24), 0, "Failed to deserialize matrix. Expected array length = 4, actual array length = %zu", v15, v16, v17, v18, v19, v24);
        return 0;
      }
    }
    return result;
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v20 = **((void **)a5 + 2);
    uint64_t v21 = **((void **)a6 + 2);
    if ((unsigned __int16)v20 == (unsigned __int16)v21)
    {
      BOOL v23 = WORD1(v20) == WORD1(v21);
      uint64_t v22 = (v21 ^ v20) & 0xFFFFFF00000000;
      BOOL v23 = v23 && v22 == 0;
      if (v23) {
        goto LABEL_4;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    goto LABEL_4;
  }
  return re::serializeObject<re::EncoderBinary<re::SeekableInputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
}

uint64_t re::serializePoseF<re::Serializer<re::EncoderBinary<re::SeekableInputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  if (a5 == a6) {
    goto LABEL_4;
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v15 = **((void **)a5 + 2);
    uint64_t v16 = **((void **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      BOOL v18 = WORD1(v15) == WORD1(v16);
      uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      BOOL v18 = v18 && v17 == 0;
      if (v18) {
        goto LABEL_4;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
LABEL_4:
    if (*(unsigned char *)(a1 + 64)) {
      return 0;
    }
    LOBYTE(v19[0]) = 1;
    DWORD1(v19[0]) = 0;
    *((void *)&v19[0] + 1) = a2;
    memset(&v19[1], 0, 32);
    re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::pushState((void *)(a1 + 24), v19);
    re::serialize<re::EncoderBinary<re::SeekableInputStream>>((_anonymous_namespace_ *)(a1 + 24), "position", 1, a4, a7);
    re::serialize<re::EncoderBinary<re::SeekableInputStream>>((_anonymous_namespace_ *)(a1 + 24), "orientation", 2, a4 + 16, a7);
    re::EncoderBinary<re::SeekableInputStream>::endObject((_anonymous_namespace_ *)(a1 + 24));
    return *(unsigned char *)(a1 + 64) == 0;
  }
  return re::serializeObject<re::EncoderBinary<re::SeekableInputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
}

uint64_t re::serializeQuaternionF<re::Serializer<re::EncoderBinary<re::SeekableInputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  if (a5 == a6)
  {
LABEL_4:
    return re::serialize<re::EncoderBinary<re::SeekableInputStream>>((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, a4, a7);
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v15 = **((void **)a5 + 2);
    uint64_t v16 = **((void **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      BOOL v18 = WORD1(v15) == WORD1(v16);
      uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      BOOL v18 = v18 && v17 == 0;
      if (v18) {
        goto LABEL_4;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    goto LABEL_4;
  }
  return re::serializeObject<re::EncoderBinary<re::SeekableInputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
}

uint64_t re::serializeSRT<re::Serializer<re::EncoderBinary<re::SeekableInputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  if (a5 == a6) {
    goto LABEL_4;
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v15 = **((void **)a5 + 2);
    uint64_t v16 = **((void **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      BOOL v18 = WORD1(v15) == WORD1(v16);
      uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      BOOL v18 = v18 && v17 == 0;
      if (v18) {
        goto LABEL_4;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
LABEL_4:
    if (*(unsigned char *)(a1 + 64)) {
      return 0;
    }
    LOBYTE(v19[0]) = 1;
    DWORD1(v19[0]) = 0;
    *((void *)&v19[0] + 1) = a2;
    memset(&v19[1], 0, 32);
    re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::pushState((void *)(a1 + 24), v19);
    re::serialize<re::EncoderBinary<re::SeekableInputStream>>((_anonymous_namespace_ *)(a1 + 24), "scale", 1, a4, a7);
    re::serialize<re::EncoderBinary<re::SeekableInputStream>>((_anonymous_namespace_ *)(a1 + 24), "rotation", 2, a4 + 16, a7);
    re::serialize<re::EncoderBinary<re::SeekableInputStream>>((_anonymous_namespace_ *)(a1 + 24), "translation", 3, a4 + 32, a7);
    re::EncoderBinary<re::SeekableInputStream>::endObject((_anonymous_namespace_ *)(a1 + 24));
    return *(unsigned char *)(a1 + 64) == 0;
  }
  return re::serializeObject<re::EncoderBinary<re::SeekableInputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
}

uint64_t re::serializeAudioPlaybackState<re::Serializer<re::EncoderBinary<re::SeekableInputStream>>>(unsigned char *a1, const char *a2, const re::TypeInfo *a3, uint64_t *a4, re::internal *a5, re::TypeInfo *this, uint64_t a7)
{
  if (a5 == this)
  {
    return re::internal::serializeEnumAsBinary<re::EncoderBinary<re::SeekableInputStream>>((uint64_t)a1, a2, a3, a4, a5, a5, a7);
  }
  else
  {
    uint64_t v14 = (void *)re::TypeInfo::enumConstants(this);
    if (!v15)
    {
LABEL_6:
      uint64_t v17 = *a4;
      re::TypeRegistry::typeInfo(*(void **)a5, *(void *)(*((void *)a5 + 2) + 72), v26);
      re::TypeInfo::TypeInfo((uint64_t)v25, (uint64_t)v27);
      re::TypeRegistry::typeInfo(*(void **)this, *(void *)(*((void *)this + 2) + 72), v26);
      re::TypeInfo::TypeInfo((uint64_t)v24, (uint64_t)v27);
      if (!a1[64])
      {
        uint64_t result = (*(uint64_t (**)(unsigned char *, const char *, const re::TypeInfo *, uint64_t *, unsigned char *, unsigned char *, uint64_t))(*(void *)a1 + 72))(a1, a2, a3, a4, v25, v24, a7);
        if (!result) {
          return result;
        }
        if (unint64_t)*a4 < 0xA && ((0x21Fu >> *a4)) {
          return 1;
        }
        *a4 = v17;
        re::Serializer<re::EncoderBinary<re::SeekableInputStream>>::setError((uint64_t)a1, 0, "Failed to read REAudioPlaybackState. Invalid value %zu.", v19, v20, v21, v22, v23, v17);
      }
      return 0;
    }
    uint64_t v16 = 24 * v15;
    while (*v14 != 9)
    {
      v14 += 3;
      v16 -= 24;
      if (!v16) {
        goto LABEL_6;
      }
    }
    return re::serializeEnum<re::EncoderBinary<re::SeekableInputStream>>((uint64_t)a1, a2, a3, a4, (uint64_t)a5, (uint64_t)this, a7);
  }
}

BOOL re::serialize<re::EncoderBinary<re::SeekableInputStream>>(_anonymous_namespace_ *a1, const char *a2, uint64_t a3, char *a4, char a5)
{
  uint64_t v14 = 2;
  BOOL result = re::EncoderBinary<re::SeekableInputStream>::beginArray((uint64_t)a1, a2, a3, (char *)&v14, 4);
  if (result)
  {
    if (v14 == 2)
    {
      re::EncoderBinary<re::SeekableInputStream>::serializeValue<unsigned int>((uint64_t)a1, "x", 0, a4, (uint64_t)"float", a5);
      re::EncoderBinary<re::SeekableInputStream>::serializeValue<unsigned int>((uint64_t)a1, "y", 1, a4 + 4, (uint64_t)"float", a5);
      re::EncoderBinary<re::SeekableInputStream>::endArray(a1);
      return *((unsigned char *)a1 + 40) == 0;
    }
    else
    {
      re::Encoder<re::EncoderOPACK<re::SeekableInputStream>,re::SeekableInputStream>::setError(a1, 0, "Failed to deserialize vector. Expected array length = 2, actual array length = %zu", v9, v10, v11, v12, v13, v14);
      return 0;
    }
  }
  return result;
}

{
  BOOL result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  uint64_t v14 = 3;
  BOOL result = re::EncoderBinary<re::SeekableInputStream>::beginArray((uint64_t)a1, a2, a3, (char *)&v14, 4);
  if (result)
  {
    if (v14 == 3)
    {
      re::EncoderBinary<re::SeekableInputStream>::serializeValue<unsigned int>((uint64_t)a1, "x", 0, a4, (uint64_t)"float", a5);
      re::EncoderBinary<re::SeekableInputStream>::serializeValue<unsigned int>((uint64_t)a1, "y", 1, a4 + 4, (uint64_t)"float", a5);
      re::EncoderBinary<re::SeekableInputStream>::serializeValue<unsigned int>((uint64_t)a1, "z", 2, a4 + 8, (uint64_t)"float", a5);
      re::EncoderBinary<re::SeekableInputStream>::endArray(a1);
      return *((unsigned char *)a1 + 40) == 0;
    }
    else
    {
      re::Encoder<re::EncoderOPACK<re::SeekableInputStream>,re::SeekableInputStream>::setError(a1, 0, "Failed to deserialize vector. Expected array length = 3, actual array length = %zu", v9, v10, v11, v12, v13, v14);
      return 0;
    }
  }
  return result;
}

{
  BOOL result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  uint64_t v14 = 4;
  BOOL result = re::EncoderBinary<re::SeekableInputStream>::beginArray((uint64_t)a1, a2, a3, (char *)&v14, 4);
  if (result)
  {
    if (v14 == 4)
    {
      re::EncoderBinary<re::SeekableInputStream>::serializeValue<unsigned int>((uint64_t)a1, "x", 0, a4, (uint64_t)"float", a5);
      re::EncoderBinary<re::SeekableInputStream>::serializeValue<unsigned int>((uint64_t)a1, "y", 1, a4 + 4, (uint64_t)"float", a5);
      re::EncoderBinary<re::SeekableInputStream>::serializeValue<unsigned int>((uint64_t)a1, "z", 2, a4 + 8, (uint64_t)"float", a5);
      re::EncoderBinary<re::SeekableInputStream>::serializeValue<unsigned int>((uint64_t)a1, "w", 3, a4 + 12, (uint64_t)"float", a5);
      re::EncoderBinary<re::SeekableInputStream>::endArray(a1);
      return *((unsigned char *)a1 + 40) == 0;
    }
    else
    {
      re::Encoder<re::EncoderOPACK<re::SeekableInputStream>,re::SeekableInputStream>::setError(a1, 0, "Failed to deserialize vector. Expected array length = 4, actual array length = %zu", v9, v10, v11, v12, v13, v14);
      return 0;
    }
  }
  return result;
}

{
  BOOL result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  uint64_t v14 = 4;
  BOOL result = re::EncoderBinary<re::SeekableInputStream>::beginArray((uint64_t)a1, a2, a3, (char *)&v14, 4);
  if (result)
  {
    if (v14 == 4)
    {
      re::EncoderBinary<re::SeekableInputStream>::serializeValue<unsigned int>((uint64_t)a1, "x", 0, a4, (uint64_t)"float", a5);
      re::EncoderBinary<re::SeekableInputStream>::serializeValue<unsigned int>((uint64_t)a1, "y", 1, a4 + 4, (uint64_t)"float", a5);
      re::EncoderBinary<re::SeekableInputStream>::serializeValue<unsigned int>((uint64_t)a1, "z", 2, a4 + 8, (uint64_t)"float", a5);
      re::EncoderBinary<re::SeekableInputStream>::serializeValue<unsigned int>((uint64_t)a1, "w", 3, a4 + 12, (uint64_t)"float", a5);
      re::EncoderBinary<re::SeekableInputStream>::endArray(a1);
      return *((unsigned char *)a1 + 40) == 0;
    }
    else
    {
      re::Encoder<re::EncoderOPACK<re::SeekableInputStream>,re::SeekableInputStream>::setError(a1, 0, "Failed to deserialize quaternion. Expected array length = 4, actual array length = %zu", v9, v10, v11, v12, v13, v14);
      return 0;
    }
  }
  return result;
}

uint64_t re::serializeVector2F<re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  if (a5 == a6)
  {
LABEL_4:
    return re::serialize<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>((_anonymous_namespace_ *)(a1 + 24), a2, (int)a3, a4, a7);
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v15 = **((void **)a5 + 2);
    uint64_t v16 = **((void **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      BOOL v18 = WORD1(v15) == WORD1(v16);
      uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      BOOL v18 = v18 && v17 == 0;
      if (v18) {
        goto LABEL_4;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    goto LABEL_4;
  }
  return re::serializeObject<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
}

uint64_t re::serializeVector3F<re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  if (a5 == a6)
  {
LABEL_4:
    return re::serialize<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>((_anonymous_namespace_ *)(a1 + 24), a2, (int)a3, a4, a7);
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v15 = **((void **)a5 + 2);
    uint64_t v16 = **((void **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      BOOL v18 = WORD1(v15) == WORD1(v16);
      uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      BOOL v18 = v18 && v17 == 0;
      if (v18) {
        goto LABEL_4;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    goto LABEL_4;
  }
  return re::serializeObject<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
}

uint64_t re::serializeVector4F<re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  if (a5 == a6)
  {
LABEL_4:
    return re::serialize<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>((_anonymous_namespace_ *)(a1 + 24), a2, (int)a3, a4, a7);
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v15 = **((void **)a5 + 2);
    uint64_t v16 = **((void **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      BOOL v18 = WORD1(v15) == WORD1(v16);
      uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      BOOL v18 = v18 && v17 == 0;
      if (v18) {
        goto LABEL_4;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    goto LABEL_4;
  }
  return re::serializeObject<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
}

uint64_t re::serializeVector2D<re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  if (a5 == a6) {
    goto LABEL_4;
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v15 = **((void **)a5 + 2);
    uint64_t v16 = **((void **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      BOOL v18 = WORD1(v15) == WORD1(v16);
      uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      BOOL v18 = v18 && v17 == 0;
      if (v18) {
        goto LABEL_4;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
LABEL_4:
    unint64_t v19 = 2;
    uint64_t result = re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::beginArray(a1 + 24, a2, (int)a3, &v19, 4);
    if (result)
    {
      re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::serializeDouble(a1 + 24, "x", 0, a4, a7);
      re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::serializeDouble(a1 + 24, "y", 1, a4 + 8, a7);
      re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::endArray((_anonymous_namespace_ *)(a1 + 24));
      return *(unsigned char *)(a1 + 64) == 0;
    }
    return result;
  }
  return re::serializeObject<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
}

uint64_t re::serializeVector3D<re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  if (a5 == a6) {
    goto LABEL_4;
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v15 = **((void **)a5 + 2);
    uint64_t v16 = **((void **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      BOOL v18 = WORD1(v15) == WORD1(v16);
      uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      BOOL v18 = v18 && v17 == 0;
      if (v18) {
        goto LABEL_4;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
LABEL_4:
    unint64_t v19 = 3;
    uint64_t result = re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::beginArray(a1 + 24, a2, (int)a3, &v19, 4);
    if (result)
    {
      re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::serializeDouble(a1 + 24, "x", 0, a4, a7);
      re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::serializeDouble(a1 + 24, "y", 1, a4 + 8, a7);
      re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::serializeDouble(a1 + 24, "z", 2, a4 + 16, a7);
      re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::endArray((_anonymous_namespace_ *)(a1 + 24));
      return *(unsigned char *)(a1 + 64) == 0;
    }
    return result;
  }
  return re::serializeObject<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
}

uint64_t re::serializeVector4D<re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  if (a5 == a6) {
    goto LABEL_4;
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v15 = **((void **)a5 + 2);
    uint64_t v16 = **((void **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      BOOL v18 = WORD1(v15) == WORD1(v16);
      uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      BOOL v18 = v18 && v17 == 0;
      if (v18) {
        goto LABEL_4;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
LABEL_4:
    unint64_t v19 = 4;
    uint64_t result = re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::beginArray(a1 + 24, a2, (int)a3, &v19, 4);
    if (result)
    {
      re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::serializeDouble(a1 + 24, "x", 0, a4, a7);
      re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::serializeDouble(a1 + 24, "y", 1, a4 + 8, a7);
      re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::serializeDouble(a1 + 24, "z", 2, a4 + 16, a7);
      re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::serializeDouble(a1 + 24, "w", 3, a4 + 24, a7);
      re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::endArray((_anonymous_namespace_ *)(a1 + 24));
      return *(unsigned char *)(a1 + 64) == 0;
    }
    return result;
  }
  return re::serializeObject<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
}

uint64_t re::serializeMatrix2x2F<re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  if (a5 == a6) {
    goto LABEL_4;
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v15 = **((void **)a5 + 2);
    uint64_t v16 = **((void **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      BOOL v18 = WORD1(v15) == WORD1(v16);
      uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      BOOL v18 = v18 && v17 == 0;
      if (v18) {
        goto LABEL_4;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
LABEL_4:
    unint64_t v19 = 2;
    uint64_t result = re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::beginArray(a1 + 24, a2, (int)a3, &v19, 4);
    if (result)
    {
      re::serialize<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>((_anonymous_namespace_ *)(a1 + 24), "column0", 0, a4, a7);
      re::serialize<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>((_anonymous_namespace_ *)(a1 + 24), "column1", 1, a4 + 8, a7);
      re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::endArray((_anonymous_namespace_ *)(a1 + 24));
      return *(unsigned char *)(a1 + 64) == 0;
    }
    return result;
  }
  return re::serializeObject<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
}

uint64_t re::serializeMatrix3x3F<re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  if (a5 == a6) {
    goto LABEL_4;
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v15 = **((void **)a5 + 2);
    uint64_t v16 = **((void **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      BOOL v18 = WORD1(v15) == WORD1(v16);
      uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      BOOL v18 = v18 && v17 == 0;
      if (v18) {
        goto LABEL_4;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
LABEL_4:
    unint64_t v19 = 3;
    uint64_t result = re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::beginArray(a1 + 24, a2, (int)a3, &v19, 4);
    if (result)
    {
      re::serialize<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>((_anonymous_namespace_ *)(a1 + 24), "column0", 0, a4, a7);
      re::serialize<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>((_anonymous_namespace_ *)(a1 + 24), "column1", 1, a4 + 16, a7);
      re::serialize<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>((_anonymous_namespace_ *)(a1 + 24), "column2", 2, a4 + 32, a7);
      re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::endArray((_anonymous_namespace_ *)(a1 + 24));
      return *(unsigned char *)(a1 + 64) == 0;
    }
    return result;
  }
  return re::serializeObject<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
}

uint64_t re::serializeMatrix4x4F<re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  if (a5 == a6) {
    goto LABEL_4;
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v15 = **((void **)a5 + 2);
    uint64_t v16 = **((void **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      BOOL v18 = WORD1(v15) == WORD1(v16);
      uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      BOOL v18 = v18 && v17 == 0;
      if (v18) {
        goto LABEL_4;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
LABEL_4:
    unint64_t v19 = 4;
    uint64_t result = re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::beginArray(a1 + 24, a2, (int)a3, &v19, 4);
    if (result)
    {
      re::serialize<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>((_anonymous_namespace_ *)(a1 + 24), "column0", 0, a4, a7);
      re::serialize<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>((_anonymous_namespace_ *)(a1 + 24), "column1", 1, a4 + 16, a7);
      re::serialize<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>((_anonymous_namespace_ *)(a1 + 24), "column2", 2, a4 + 32, a7);
      re::serialize<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>((_anonymous_namespace_ *)(a1 + 24), "column3", 3, a4 + 48, a7);
      re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::endArray((_anonymous_namespace_ *)(a1 + 24));
      return *(unsigned char *)(a1 + 64) == 0;
    }
    return result;
  }
  return re::serializeObject<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
}

uint64_t re::serializePoseF<re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  if (a5 == a6) {
    goto LABEL_4;
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v16 = **((void **)a5 + 2);
    uint64_t v17 = **((void **)a6 + 2);
    if ((unsigned __int16)v16 == (unsigned __int16)v17)
    {
      BOOL v19 = WORD1(v16) == WORD1(v17);
      uint64_t v18 = (v17 ^ v16) & 0xFFFFFF00000000;
      BOOL v19 = v19 && v18 == 0;
      if (v19) {
        goto LABEL_4;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
LABEL_4:
    int v14 = re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::beginObject(a1 + 24, a2, (int)a3, 0);
    uint64_t result = 0;
    if (v14)
    {
      re::serialize<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>((_anonymous_namespace_ *)(a1 + 24), "position", 1, a4, a7);
      re::serialize<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>((_anonymous_namespace_ *)(a1 + 24), "orientation", 2, a4 + 16, a7);
      re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::endObject((_anonymous_namespace_ *)(a1 + 24));
      return *(unsigned char *)(a1 + 64) == 0;
    }
    return result;
  }
  return re::serializeObject<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
}

uint64_t re::serializeQuaternionF<re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  if (a5 == a6)
  {
LABEL_4:
    return re::serialize<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>((_anonymous_namespace_ *)(a1 + 24), a2, (int)a3, a4, a7);
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v15 = **((void **)a5 + 2);
    uint64_t v16 = **((void **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      BOOL v18 = WORD1(v15) == WORD1(v16);
      uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      BOOL v18 = v18 && v17 == 0;
      if (v18) {
        goto LABEL_4;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    goto LABEL_4;
  }
  return re::serializeObject<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
}

uint64_t re::serializeSRT<re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  if (a5 == a6) {
    goto LABEL_4;
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v16 = **((void **)a5 + 2);
    uint64_t v17 = **((void **)a6 + 2);
    if ((unsigned __int16)v16 == (unsigned __int16)v17)
    {
      BOOL v19 = WORD1(v16) == WORD1(v17);
      uint64_t v18 = (v17 ^ v16) & 0xFFFFFF00000000;
      BOOL v19 = v19 && v18 == 0;
      if (v19) {
        goto LABEL_4;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
LABEL_4:
    int v14 = re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::beginObject(a1 + 24, a2, (int)a3, 0);
    uint64_t result = 0;
    if (v14)
    {
      re::serialize<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>((_anonymous_namespace_ *)(a1 + 24), "scale", 1, a4, a7);
      re::serialize<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>((_anonymous_namespace_ *)(a1 + 24), "rotation", 2, a4 + 16, a7);
      re::serialize<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>((_anonymous_namespace_ *)(a1 + 24), "translation", 3, a4 + 32, a7);
      re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::endObject((_anonymous_namespace_ *)(a1 + 24));
      return *(unsigned char *)(a1 + 64) == 0;
    }
    return result;
  }
  return re::serializeObject<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
}

uint64_t re::serializeAudioPlaybackState<re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>>(unsigned char *a1, const char *a2, const re::TypeInfo *a3, re::TypeInfo *a4, re::internal *a5, re::TypeInfo *this, uint64_t a7)
{
  if (a5 == this)
  {
    return re::internal::serializeEnumAsBinary<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(a1, a2, a3, a4, a5, a5, a7);
  }
  else
  {
    int v14 = (void *)re::TypeInfo::enumConstants(this);
    if (v15)
    {
      uint64_t v16 = 24 * v15;
      while (*v14 != 9)
      {
        v14 += 3;
        v16 -= 24;
        if (!v16) {
          goto LABEL_6;
        }
      }
      return re::serializeEnum<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(a1, a2, a3, a4, (uint64_t)a5, (uint64_t)this, a7);
    }
    else
    {
LABEL_6:
      re::TypeRegistry::typeInfo(*(void **)a5, *(void *)(*((void *)a5 + 2) + 72), v20);
      re::TypeInfo::TypeInfo((uint64_t)v19, (uint64_t)v21);
      re::TypeRegistry::typeInfo(*(void **)this, *(void *)(*((void *)this + 2) + 72), v20);
      re::TypeInfo::TypeInfo((uint64_t)v18, (uint64_t)v21);
      if (a1[64]) {
        return 0;
      }
      else {
        return (*(uint64_t (**)(unsigned char *, const char *, const re::TypeInfo *, re::TypeInfo *, unsigned char *, unsigned char *, uint64_t))(*(void *)a1 + 72))(a1, a2, a3, a4, v19, v18, a7);
      }
    }
  }
}

uint64_t re::serialize<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(_anonymous_namespace_ *a1, const char *a2, int a3, char *a4, char a5)
{
  unint64_t v9 = 2;
  uint64_t result = re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::beginArray((uint64_t)a1, a2, a3, &v9, 4);
  if (result)
  {
    re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::serializeFloat((uint64_t)a1, "x", 0, a4, a5);
    re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::serializeFloat((uint64_t)a1, "y", 1, a4 + 4, a5);
    re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::endArray(a1);
    return *((unsigned char *)a1 + 40) == 0;
  }
  return result;
}

{
  uint64_t result;
  unint64_t v9;

  unint64_t v9 = 3;
  uint64_t result = re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::beginArray((uint64_t)a1, a2, a3, &v9, 4);
  if (result)
  {
    re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::serializeFloat((uint64_t)a1, "x", 0, a4, a5);
    re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::serializeFloat((uint64_t)a1, "y", 1, a4 + 4, a5);
    re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::serializeFloat((uint64_t)a1, "z", 2, a4 + 8, a5);
    re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::endArray(a1);
    return *((unsigned char *)a1 + 40) == 0;
  }
  return result;
}

{
  uint64_t result;
  unint64_t v9;

  unint64_t v9 = 4;
  uint64_t result = re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::beginArray((uint64_t)a1, a2, a3, &v9, 4);
  if (result)
  {
    re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::serializeFloat((uint64_t)a1, "x", 0, a4, a5);
    re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::serializeFloat((uint64_t)a1, "y", 1, a4 + 4, a5);
    re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::serializeFloat((uint64_t)a1, "z", 2, a4 + 8, a5);
    re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::serializeFloat((uint64_t)a1, "w", 3, a4 + 12, a5);
    re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::endArray(a1);
    return *((unsigned char *)a1 + 40) == 0;
  }
  return result;
}

uint64_t re::serializeVector2F<re::Serializer<re::EncoderOPACK<re::SeekableInputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  if (a5 == a6)
  {
LABEL_4:
    return re::serialize<re::EncoderOPACK<re::SeekableInputStream>>((_anonymous_namespace_ *)(a1 + 24), a2, (int)a3, a4, a7);
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v15 = **((void **)a5 + 2);
    uint64_t v16 = **((void **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      BOOL v18 = WORD1(v15) == WORD1(v16);
      uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      BOOL v18 = v18 && v17 == 0;
      if (v18) {
        goto LABEL_4;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    goto LABEL_4;
  }
  return re::serializeObject<re::EncoderOPACK<re::SeekableInputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
}

uint64_t re::serializeVector3F<re::Serializer<re::EncoderOPACK<re::SeekableInputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  if (a5 == a6)
  {
LABEL_4:
    return re::serialize<re::EncoderOPACK<re::SeekableInputStream>>((_anonymous_namespace_ *)(a1 + 24), a2, (int)a3, a4, a7);
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v15 = **((void **)a5 + 2);
    uint64_t v16 = **((void **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      BOOL v18 = WORD1(v15) == WORD1(v16);
      uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      BOOL v18 = v18 && v17 == 0;
      if (v18) {
        goto LABEL_4;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    goto LABEL_4;
  }
  return re::serializeObject<re::EncoderOPACK<re::SeekableInputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
}

uint64_t re::serializeVector4F<re::Serializer<re::EncoderOPACK<re::SeekableInputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  if (a5 == a6)
  {
LABEL_4:
    return re::serialize<re::EncoderOPACK<re::SeekableInputStream>>((_anonymous_namespace_ *)(a1 + 24), a2, (int)a3, a4, a7);
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v15 = **((void **)a5 + 2);
    uint64_t v16 = **((void **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      BOOL v18 = WORD1(v15) == WORD1(v16);
      uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      BOOL v18 = v18 && v17 == 0;
      if (v18) {
        goto LABEL_4;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    goto LABEL_4;
  }
  return re::serializeObject<re::EncoderOPACK<re::SeekableInputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
}

uint64_t re::serializeVector2D<re::Serializer<re::EncoderOPACK<re::SeekableInputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  if (a5 == a6)
  {
LABEL_4:
    uint64_t v24 = 2;
    uint64_t result = re::EncoderOPACK<re::SeekableInputStream>::beginArray(a1 + 24, a2, (int)a3, (char *)&v24, 4);
    if (result)
    {
      if (v24 == 2)
      {
        re::EncoderOPACK<re::SeekableInputStream>::serializeDouble(a1 + 24, "x", 0, a4, a7);
        re::EncoderOPACK<re::SeekableInputStream>::serializeDouble(a1 + 24, "y", 1, a4 + 8, a7);
        re::EncoderOPACK<re::SeekableInputStream>::endArray((_anonymous_namespace_ *)(a1 + 24));
        return *(unsigned char *)(a1 + 64) == 0;
      }
      else
      {
        re::Encoder<re::EncoderOPACK<re::SeekableInputStream>,re::SeekableInputStream>::setError((_anonymous_namespace_ *)(a1 + 24), 0, "Failed to deserialize vector. Expected array length = 2, actual array length = %zu", v15, v16, v17, v18, v19, v24);
        return 0;
      }
    }
    return result;
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v20 = **((void **)a5 + 2);
    uint64_t v21 = **((void **)a6 + 2);
    if ((unsigned __int16)v20 == (unsigned __int16)v21)
    {
      BOOL v23 = WORD1(v20) == WORD1(v21);
      uint64_t v22 = (v21 ^ v20) & 0xFFFFFF00000000;
      BOOL v23 = v23 && v22 == 0;
      if (v23) {
        goto LABEL_4;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    goto LABEL_4;
  }
  return re::serializeObject<re::EncoderOPACK<re::SeekableInputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
}

uint64_t re::serializeVector3D<re::Serializer<re::EncoderOPACK<re::SeekableInputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  if (a5 == a6)
  {
LABEL_4:
    uint64_t v24 = 3;
    uint64_t result = re::EncoderOPACK<re::SeekableInputStream>::beginArray(a1 + 24, a2, (int)a3, (char *)&v24, 4);
    if (result)
    {
      if (v24 == 3)
      {
        re::EncoderOPACK<re::SeekableInputStream>::serializeDouble(a1 + 24, "x", 0, a4, a7);
        re::EncoderOPACK<re::SeekableInputStream>::serializeDouble(a1 + 24, "y", 1, a4 + 8, a7);
        re::EncoderOPACK<re::SeekableInputStream>::serializeDouble(a1 + 24, "z", 2, a4 + 16, a7);
        re::EncoderOPACK<re::SeekableInputStream>::endArray((_anonymous_namespace_ *)(a1 + 24));
        return *(unsigned char *)(a1 + 64) == 0;
      }
      else
      {
        re::Encoder<re::EncoderOPACK<re::SeekableInputStream>,re::SeekableInputStream>::setError((_anonymous_namespace_ *)(a1 + 24), 0, "Failed to deserialize vector. Expected array length = 3, actual array length = %zu", v15, v16, v17, v18, v19, v24);
        return 0;
      }
    }
    return result;
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v20 = **((void **)a5 + 2);
    uint64_t v21 = **((void **)a6 + 2);
    if ((unsigned __int16)v20 == (unsigned __int16)v21)
    {
      BOOL v23 = WORD1(v20) == WORD1(v21);
      uint64_t v22 = (v21 ^ v20) & 0xFFFFFF00000000;
      BOOL v23 = v23 && v22 == 0;
      if (v23) {
        goto LABEL_4;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    goto LABEL_4;
  }
  return re::serializeObject<re::EncoderOPACK<re::SeekableInputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
}

uint64_t re::serializeVector4D<re::Serializer<re::EncoderOPACK<re::SeekableInputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  if (a5 == a6)
  {
LABEL_4:
    uint64_t v24 = 4;
    uint64_t result = re::EncoderOPACK<re::SeekableInputStream>::beginArray(a1 + 24, a2, (int)a3, (char *)&v24, 4);
    if (result)
    {
      if (v24 == 4)
      {
        re::EncoderOPACK<re::SeekableInputStream>::serializeDouble(a1 + 24, "x", 0, a4, a7);
        re::EncoderOPACK<re::SeekableInputStream>::serializeDouble(a1 + 24, "y", 1, a4 + 8, a7);
        re::EncoderOPACK<re::SeekableInputStream>::serializeDouble(a1 + 24, "z", 2, a4 + 16, a7);
        re::EncoderOPACK<re::SeekableInputStream>::serializeDouble(a1 + 24, "w", 3, a4 + 24, a7);
        re::EncoderOPACK<re::SeekableInputStream>::endArray((_anonymous_namespace_ *)(a1 + 24));
        return *(unsigned char *)(a1 + 64) == 0;
      }
      else
      {
        re::Encoder<re::EncoderOPACK<re::SeekableInputStream>,re::SeekableInputStream>::setError((_anonymous_namespace_ *)(a1 + 24), 0, "Failed to deserialize vector. Expected array length = 4, actual array length = %zu", v15, v16, v17, v18, v19, v24);
        return 0;
      }
    }
    return result;
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v20 = **((void **)a5 + 2);
    uint64_t v21 = **((void **)a6 + 2);
    if ((unsigned __int16)v20 == (unsigned __int16)v21)
    {
      BOOL v23 = WORD1(v20) == WORD1(v21);
      uint64_t v22 = (v21 ^ v20) & 0xFFFFFF00000000;
      BOOL v23 = v23 && v22 == 0;
      if (v23) {
        goto LABEL_4;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    goto LABEL_4;
  }
  return re::serializeObject<re::EncoderOPACK<re::SeekableInputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
}

uint64_t re::serializeMatrix2x2F<re::Serializer<re::EncoderOPACK<re::SeekableInputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  if (a5 == a6)
  {
LABEL_4:
    uint64_t v24 = 2;
    uint64_t result = re::EncoderOPACK<re::SeekableInputStream>::beginArray(a1 + 24, a2, (int)a3, (char *)&v24, 4);
    if (result)
    {
      if (v24 == 2)
      {
        re::serialize<re::EncoderOPACK<re::SeekableInputStream>>((_anonymous_namespace_ *)(a1 + 24), "column0", 0, a4, a7);
        re::serialize<re::EncoderOPACK<re::SeekableInputStream>>((_anonymous_namespace_ *)(a1 + 24), "column1", 1, a4 + 8, a7);
        re::EncoderOPACK<re::SeekableInputStream>::endArray((_anonymous_namespace_ *)(a1 + 24));
        return *(unsigned char *)(a1 + 64) == 0;
      }
      else
      {
        re::Encoder<re::EncoderOPACK<re::SeekableInputStream>,re::SeekableInputStream>::setError((_anonymous_namespace_ *)(a1 + 24), 0, "Failed to deserialize matrix. Expected array length = 2, actual array length = %zu", v15, v16, v17, v18, v19, v24);
        return 0;
      }
    }
    return result;
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v20 = **((void **)a5 + 2);
    uint64_t v21 = **((void **)a6 + 2);
    if ((unsigned __int16)v20 == (unsigned __int16)v21)
    {
      BOOL v23 = WORD1(v20) == WORD1(v21);
      uint64_t v22 = (v21 ^ v20) & 0xFFFFFF00000000;
      BOOL v23 = v23 && v22 == 0;
      if (v23) {
        goto LABEL_4;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    goto LABEL_4;
  }
  return re::serializeObject<re::EncoderOPACK<re::SeekableInputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
}

uint64_t re::serializeMatrix3x3F<re::Serializer<re::EncoderOPACK<re::SeekableInputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  if (a5 == a6)
  {
LABEL_4:
    uint64_t v24 = 3;
    uint64_t result = re::EncoderOPACK<re::SeekableInputStream>::beginArray(a1 + 24, a2, (int)a3, (char *)&v24, 4);
    if (result)
    {
      if (v24 == 3)
      {
        re::serialize<re::EncoderOPACK<re::SeekableInputStream>>((_anonymous_namespace_ *)(a1 + 24), "column0", 0, a4, a7);
        re::serialize<re::EncoderOPACK<re::SeekableInputStream>>((_anonymous_namespace_ *)(a1 + 24), "column1", 1, a4 + 16, a7);
        re::serialize<re::EncoderOPACK<re::SeekableInputStream>>((_anonymous_namespace_ *)(a1 + 24), "column2", 2, a4 + 32, a7);
        re::EncoderOPACK<re::SeekableInputStream>::endArray((_anonymous_namespace_ *)(a1 + 24));
        return *(unsigned char *)(a1 + 64) == 0;
      }
      else
      {
        re::Encoder<re::EncoderOPACK<re::SeekableInputStream>,re::SeekableInputStream>::setError((_anonymous_namespace_ *)(a1 + 24), 0, "Failed to deserialize matrix. Expected array length = 3, actual array length = %zu", v15, v16, v17, v18, v19, v24);
        return 0;
      }
    }
    return result;
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v20 = **((void **)a5 + 2);
    uint64_t v21 = **((void **)a6 + 2);
    if ((unsigned __int16)v20 == (unsigned __int16)v21)
    {
      BOOL v23 = WORD1(v20) == WORD1(v21);
      uint64_t v22 = (v21 ^ v20) & 0xFFFFFF00000000;
      BOOL v23 = v23 && v22 == 0;
      if (v23) {
        goto LABEL_4;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    goto LABEL_4;
  }
  return re::serializeObject<re::EncoderOPACK<re::SeekableInputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
}

uint64_t re::serializeMatrix4x4F<re::Serializer<re::EncoderOPACK<re::SeekableInputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  if (a5 == a6)
  {
LABEL_4:
    uint64_t v24 = 4;
    uint64_t result = re::EncoderOPACK<re::SeekableInputStream>::beginArray(a1 + 24, a2, (int)a3, (char *)&v24, 4);
    if (result)
    {
      if (v24 == 4)
      {
        re::serialize<re::EncoderOPACK<re::SeekableInputStream>>((_anonymous_namespace_ *)(a1 + 24), "column0", 0, a4, a7);
        re::serialize<re::EncoderOPACK<re::SeekableInputStream>>((_anonymous_namespace_ *)(a1 + 24), "column1", 1, a4 + 16, a7);
        re::serialize<re::EncoderOPACK<re::SeekableInputStream>>((_anonymous_namespace_ *)(a1 + 24), "column2", 2, a4 + 32, a7);
        re::serialize<re::EncoderOPACK<re::SeekableInputStream>>((_anonymous_namespace_ *)(a1 + 24), "column3", 3, a4 + 48, a7);
        re::EncoderOPACK<re::SeekableInputStream>::endArray((_anonymous_namespace_ *)(a1 + 24));
        return *(unsigned char *)(a1 + 64) == 0;
      }
      else
      {
        re::Encoder<re::EncoderOPACK<re::SeekableInputStream>,re::SeekableInputStream>::setError((_anonymous_namespace_ *)(a1 + 24), 0, "Failed to deserialize matrix. Expected array length = 4, actual array length = %zu", v15, v16, v17, v18, v19, v24);
        return 0;
      }
    }
    return result;
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v20 = **((void **)a5 + 2);
    uint64_t v21 = **((void **)a6 + 2);
    if ((unsigned __int16)v20 == (unsigned __int16)v21)
    {
      BOOL v23 = WORD1(v20) == WORD1(v21);
      uint64_t v22 = (v21 ^ v20) & 0xFFFFFF00000000;
      BOOL v23 = v23 && v22 == 0;
      if (v23) {
        goto LABEL_4;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    goto LABEL_4;
  }
  return re::serializeObject<re::EncoderOPACK<re::SeekableInputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
}

uint64_t re::serializePoseF<re::Serializer<re::EncoderOPACK<re::SeekableInputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  if (a5 == a6) {
    goto LABEL_4;
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v16 = **((void **)a5 + 2);
    uint64_t v17 = **((void **)a6 + 2);
    if ((unsigned __int16)v16 == (unsigned __int16)v17)
    {
      BOOL v19 = WORD1(v16) == WORD1(v17);
      uint64_t v18 = (v17 ^ v16) & 0xFFFFFF00000000;
      BOOL v19 = v19 && v18 == 0;
      if (v19) {
        goto LABEL_4;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
LABEL_4:
    int v14 = re::EncoderOPACK<re::SeekableInputStream>::beginObject(a1 + 24, a2, (int)a3, 0);
    uint64_t result = 0;
    if (v14)
    {
      re::serialize<re::EncoderOPACK<re::SeekableInputStream>>((_anonymous_namespace_ *)(a1 + 24), "position", 1, a4, a7);
      re::serialize<re::EncoderOPACK<re::SeekableInputStream>>((_anonymous_namespace_ *)(a1 + 24), "orientation", 2, a4 + 16, a7);
      re::EncoderOPACK<re::SeekableInputStream>::endObject(a1 + 24);
      return *(unsigned char *)(a1 + 64) == 0;
    }
    return result;
  }
  return re::serializeObject<re::EncoderOPACK<re::SeekableInputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
}

uint64_t re::serializeQuaternionF<re::Serializer<re::EncoderOPACK<re::SeekableInputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  if (a5 == a6)
  {
LABEL_4:
    return re::serialize<re::EncoderOPACK<re::SeekableInputStream>>((_anonymous_namespace_ *)(a1 + 24), a2, (int)a3, a4, a7);
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v15 = **((void **)a5 + 2);
    uint64_t v16 = **((void **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      BOOL v18 = WORD1(v15) == WORD1(v16);
      uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      BOOL v18 = v18 && v17 == 0;
      if (v18) {
        goto LABEL_4;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    goto LABEL_4;
  }
  return re::serializeObject<re::EncoderOPACK<re::SeekableInputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
}

uint64_t re::serializeSRT<re::Serializer<re::EncoderOPACK<re::SeekableInputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  if (a5 == a6) {
    goto LABEL_4;
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v16 = **((void **)a5 + 2);
    uint64_t v17 = **((void **)a6 + 2);
    if ((unsigned __int16)v16 == (unsigned __int16)v17)
    {
      BOOL v19 = WORD1(v16) == WORD1(v17);
      uint64_t v18 = (v17 ^ v16) & 0xFFFFFF00000000;
      BOOL v19 = v19 && v18 == 0;
      if (v19) {
        goto LABEL_4;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
LABEL_4:
    int v14 = re::EncoderOPACK<re::SeekableInputStream>::beginObject(a1 + 24, a2, (int)a3, 0);
    uint64_t result = 0;
    if (v14)
    {
      re::serialize<re::EncoderOPACK<re::SeekableInputStream>>((_anonymous_namespace_ *)(a1 + 24), "scale", 1, a4, a7);
      re::serialize<re::EncoderOPACK<re::SeekableInputStream>>((_anonymous_namespace_ *)(a1 + 24), "rotation", 2, a4 + 16, a7);
      re::serialize<re::EncoderOPACK<re::SeekableInputStream>>((_anonymous_namespace_ *)(a1 + 24), "translation", 3, a4 + 32, a7);
      re::EncoderOPACK<re::SeekableInputStream>::endObject(a1 + 24);
      return *(unsigned char *)(a1 + 64) == 0;
    }
    return result;
  }
  return re::serializeObject<re::EncoderOPACK<re::SeekableInputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
}

uint64_t re::serializeAudioPlaybackState<re::Serializer<re::EncoderOPACK<re::SeekableInputStream>>>(unsigned char *a1, const char *a2, const re::TypeInfo *a3, uint64_t *a4, re::internal *a5, re::TypeInfo *this, uint64_t a7)
{
  if (a5 == this)
  {
    return re::internal::serializeEnumAsBinary<re::EncoderOPACK<re::SeekableInputStream>>((uint64_t)a1, a2, a3, a4, a5, a5, a7);
  }
  else
  {
    int v14 = (void *)re::TypeInfo::enumConstants(this);
    if (!v15)
    {
LABEL_6:
      uint64_t v17 = *a4;
      re::TypeRegistry::typeInfo(*(void **)a5, *(void *)(*((void *)a5 + 2) + 72), v26);
      re::TypeInfo::TypeInfo((uint64_t)v25, (uint64_t)v27);
      re::TypeRegistry::typeInfo(*(void **)this, *(void *)(*((void *)this + 2) + 72), v26);
      re::TypeInfo::TypeInfo((uint64_t)v24, (uint64_t)v27);
      if (!a1[64])
      {
        uint64_t result = (*(uint64_t (**)(unsigned char *, const char *, const re::TypeInfo *, uint64_t *, unsigned char *, unsigned char *, uint64_t))(*(void *)a1 + 72))(a1, a2, a3, a4, v25, v24, a7);
        if (!result) {
          return result;
        }
        if (unint64_t)*a4 < 0xA && ((0x21Fu >> *a4)) {
          return 1;
        }
        *a4 = v17;
        re::Serializer<re::EncoderBinary<re::SeekableInputStream>>::setError((uint64_t)a1, 0, "Failed to read REAudioPlaybackState. Invalid value %zu.", v19, v20, v21, v22, v23, v17);
      }
      return 0;
    }
    uint64_t v16 = 24 * v15;
    while (*v14 != 9)
    {
      v14 += 3;
      v16 -= 24;
      if (!v16) {
        goto LABEL_6;
      }
    }
    return re::serializeEnum<re::EncoderOPACK<re::SeekableInputStream>>((uint64_t)a1, a2, a3, a4, (uint64_t)a5, (uint64_t)this, a7);
  }
}

uint64_t re::serialize<re::EncoderOPACK<re::SeekableInputStream>>(_anonymous_namespace_ *a1, const char *a2, int a3, char *a4, char a5)
{
  uint64_t v14 = 2;
  uint64_t result = re::EncoderOPACK<re::SeekableInputStream>::beginArray((uint64_t)a1, a2, a3, (char *)&v14, 4);
  if (result)
  {
    if (v14 == 2)
    {
      re::EncoderOPACK<re::SeekableInputStream>::serializeFloat((uint64_t)a1, "x", 0, a4, a5);
      re::EncoderOPACK<re::SeekableInputStream>::serializeFloat((uint64_t)a1, "y", 1, a4 + 4, a5);
      re::EncoderOPACK<re::SeekableInputStream>::endArray(a1);
      return *((unsigned char *)a1 + 40) == 0;
    }
    else
    {
      re::Encoder<re::EncoderOPACK<re::SeekableInputStream>,re::SeekableInputStream>::setError(a1, 0, "Failed to deserialize vector. Expected array length = 2, actual array length = %zu", v9, v10, v11, v12, v13, v14);
      return 0;
    }
  }
  return result;
}

{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  uint64_t v14 = 3;
  uint64_t result = re::EncoderOPACK<re::SeekableInputStream>::beginArray((uint64_t)a1, a2, a3, (char *)&v14, 4);
  if (result)
  {
    if (v14 == 3)
    {
      re::EncoderOPACK<re::SeekableInputStream>::serializeFloat((uint64_t)a1, "x", 0, a4, a5);
      re::EncoderOPACK<re::SeekableInputStream>::serializeFloat((uint64_t)a1, "y", 1, a4 + 4, a5);
      re::EncoderOPACK<re::SeekableInputStream>::serializeFloat((uint64_t)a1, "z", 2, a4 + 8, a5);
      re::EncoderOPACK<re::SeekableInputStream>::endArray(a1);
      return *((unsigned char *)a1 + 40) == 0;
    }
    else
    {
      re::Encoder<re::EncoderOPACK<re::SeekableInputStream>,re::SeekableInputStream>::setError(a1, 0, "Failed to deserialize vector. Expected array length = 3, actual array length = %zu", v9, v10, v11, v12, v13, v14);
      return 0;
    }
  }
  return result;
}

{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  uint64_t v14 = 4;
  uint64_t result = re::EncoderOPACK<re::SeekableInputStream>::beginArray((uint64_t)a1, a2, a3, (char *)&v14, 4);
  if (result)
  {
    if (v14 == 4)
    {
      re::EncoderOPACK<re::SeekableInputStream>::serializeFloat((uint64_t)a1, "x", 0, a4, a5);
      re::EncoderOPACK<re::SeekableInputStream>::serializeFloat((uint64_t)a1, "y", 1, a4 + 4, a5);
      re::EncoderOPACK<re::SeekableInputStream>::serializeFloat((uint64_t)a1, "z", 2, a4 + 8, a5);
      re::EncoderOPACK<re::SeekableInputStream>::serializeFloat((uint64_t)a1, "w", 3, a4 + 12, a5);
      re::EncoderOPACK<re::SeekableInputStream>::endArray(a1);
      return *((unsigned char *)a1 + 40) == 0;
    }
    else
    {
      re::Encoder<re::EncoderOPACK<re::SeekableInputStream>,re::SeekableInputStream>::setError(a1, 0, "Failed to deserialize vector. Expected array length = 4, actual array length = %zu", v9, v10, v11, v12, v13, v14);
      return 0;
    }
  }
  return result;
}

{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  uint64_t v14 = 4;
  uint64_t result = re::EncoderOPACK<re::SeekableInputStream>::beginArray((uint64_t)a1, a2, a3, (char *)&v14, 4);
  if (result)
  {
    if (v14 == 4)
    {
      re::EncoderOPACK<re::SeekableInputStream>::serializeFloat((uint64_t)a1, "x", 0, a4, a5);
      re::EncoderOPACK<re::SeekableInputStream>::serializeFloat((uint64_t)a1, "y", 1, a4 + 4, a5);
      re::EncoderOPACK<re::SeekableInputStream>::serializeFloat((uint64_t)a1, "z", 2, a4 + 8, a5);
      re::EncoderOPACK<re::SeekableInputStream>::serializeFloat((uint64_t)a1, "w", 3, a4 + 12, a5);
      re::EncoderOPACK<re::SeekableInputStream>::endArray(a1);
      return *((unsigned char *)a1 + 40) == 0;
    }
    else
    {
      re::Encoder<re::EncoderOPACK<re::SeekableInputStream>,re::SeekableInputStream>::setError(a1, 0, "Failed to deserialize quaternion. Expected array length = 4, actual array length = %zu", v9, v10, v11, v12, v13, v14);
      return 0;
    }
  }
  return result;
}

uint64_t re::serializeVector2F<re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, float *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  if (a5 == a6)
  {
LABEL_4:
    return re::serialize<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, a4, a7);
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v15 = **((void **)a5 + 2);
    uint64_t v16 = **((void **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      BOOL v18 = WORD1(v15) == WORD1(v16);
      uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      BOOL v18 = v18 && v17 == 0;
      if (v18) {
        goto LABEL_4;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    goto LABEL_4;
  }
  return re::serializeObject<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, (uint64_t)a3, (uint64_t)a4, (uint64_t **)a5, (uint64_t)a6, a7);
}

uint64_t re::serializeVector3F<re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, float *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  if (a5 == a6)
  {
LABEL_4:
    return re::serialize<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, a4, a7);
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v15 = **((void **)a5 + 2);
    uint64_t v16 = **((void **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      BOOL v18 = WORD1(v15) == WORD1(v16);
      uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      BOOL v18 = v18 && v17 == 0;
      if (v18) {
        goto LABEL_4;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    goto LABEL_4;
  }
  return re::serializeObject<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, (uint64_t)a3, (uint64_t)a4, (uint64_t **)a5, (uint64_t)a6, a7);
}

uint64_t re::serializeVector4F<re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, float *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  if (a5 == a6)
  {
LABEL_4:
    return re::serialize<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, a4, a7);
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v15 = **((void **)a5 + 2);
    uint64_t v16 = **((void **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      BOOL v18 = WORD1(v15) == WORD1(v16);
      uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      BOOL v18 = v18 && v17 == 0;
      if (v18) {
        goto LABEL_4;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    goto LABEL_4;
  }
  return re::serializeObject<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, (uint64_t)a3, (uint64_t)a4, (uint64_t **)a5, (uint64_t)a6, a7);
}

uint64_t re::serializeVector2D<re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, double *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  if (a5 == a6) {
    goto LABEL_4;
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v15 = **((void **)a5 + 2);
    uint64_t v16 = **((void **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      BOOL v18 = WORD1(v15) == WORD1(v16);
      uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      BOOL v18 = v18 && v17 == 0;
      if (v18) {
        goto LABEL_4;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
LABEL_4:
    uint64_t v19 = 2;
    uint64_t result = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginArray(a1 + 24, a2, (uint64_t)a3, &v19, 4);
    if (result)
    {
      re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<double>(a1 + 24, "x", 0, a4, a7);
      re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<double>(a1 + 24, "y", 1, a4 + 1, a7);
      re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endArray((_anonymous_namespace_ *)(a1 + 24));
      return *(unsigned char *)(a1 + 64) == 0;
    }
    return result;
  }
  return re::serializeObject<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, (uint64_t)a3, (uint64_t)a4, (uint64_t **)a5, (uint64_t)a6, a7);
}

uint64_t re::serializeVector3D<re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, double *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  if (a5 == a6) {
    goto LABEL_4;
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v15 = **((void **)a5 + 2);
    uint64_t v16 = **((void **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      BOOL v18 = WORD1(v15) == WORD1(v16);
      uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      BOOL v18 = v18 && v17 == 0;
      if (v18) {
        goto LABEL_4;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
LABEL_4:
    uint64_t v19 = 3;
    uint64_t result = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginArray(a1 + 24, a2, (uint64_t)a3, &v19, 4);
    if (result)
    {
      re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<double>(a1 + 24, "x", 0, a4, a7);
      re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<double>(a1 + 24, "y", 1, a4 + 1, a7);
      re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<double>(a1 + 24, "z", 2, a4 + 2, a7);
      re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endArray((_anonymous_namespace_ *)(a1 + 24));
      return *(unsigned char *)(a1 + 64) == 0;
    }
    return result;
  }
  return re::serializeObject<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, (uint64_t)a3, (uint64_t)a4, (uint64_t **)a5, (uint64_t)a6, a7);
}

uint64_t re::serializeVector4D<re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, double *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  if (a5 == a6) {
    goto LABEL_4;
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v15 = **((void **)a5 + 2);
    uint64_t v16 = **((void **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      BOOL v18 = WORD1(v15) == WORD1(v16);
      uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      BOOL v18 = v18 && v17 == 0;
      if (v18) {
        goto LABEL_4;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
LABEL_4:
    uint64_t v19 = 4;
    uint64_t result = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginArray(a1 + 24, a2, (uint64_t)a3, &v19, 4);
    if (result)
    {
      re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<double>(a1 + 24, "x", 0, a4, a7);
      re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<double>(a1 + 24, "y", 1, a4 + 1, a7);
      re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<double>(a1 + 24, "z", 2, a4 + 2, a7);
      re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<double>(a1 + 24, "w", 3, a4 + 3, a7);
      re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endArray((_anonymous_namespace_ *)(a1 + 24));
      return *(unsigned char *)(a1 + 64) == 0;
    }
    return result;
  }
  return re::serializeObject<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, (uint64_t)a3, (uint64_t)a4, (uint64_t **)a5, (uint64_t)a6, a7);
}

uint64_t re::serializeMatrix2x2F<re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, float *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  if (a5 == a6) {
    goto LABEL_4;
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v15 = **((void **)a5 + 2);
    uint64_t v16 = **((void **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      BOOL v18 = WORD1(v15) == WORD1(v16);
      uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      BOOL v18 = v18 && v17 == 0;
      if (v18) {
        goto LABEL_4;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
LABEL_4:
    uint64_t v19 = 2;
    uint64_t result = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginArray(a1 + 24, a2, (uint64_t)a3, &v19, 4);
    if (result)
    {
      re::serialize<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), "column0", 0, a4, a7);
      re::serialize<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), "column1", 1, a4 + 2, a7);
      re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endArray((_anonymous_namespace_ *)(a1 + 24));
      return *(unsigned char *)(a1 + 64) == 0;
    }
    return result;
  }
  return re::serializeObject<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, (uint64_t)a3, (uint64_t)a4, (uint64_t **)a5, (uint64_t)a6, a7);
}

uint64_t re::serializeMatrix3x3F<re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, float *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  if (a5 == a6) {
    goto LABEL_4;
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v15 = **((void **)a5 + 2);
    uint64_t v16 = **((void **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      BOOL v18 = WORD1(v15) == WORD1(v16);
      uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      BOOL v18 = v18 && v17 == 0;
      if (v18) {
        goto LABEL_4;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
LABEL_4:
    uint64_t v19 = 3;
    uint64_t result = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginArray(a1 + 24, a2, (uint64_t)a3, &v19, 4);
    if (result)
    {
      re::serialize<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), "column0", 0, a4, a7);
      re::serialize<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), "column1", 1, a4 + 4, a7);
      re::serialize<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), "column2", 2, a4 + 8, a7);
      re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endArray((_anonymous_namespace_ *)(a1 + 24));
      return *(unsigned char *)(a1 + 64) == 0;
    }
    return result;
  }
  return re::serializeObject<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, (uint64_t)a3, (uint64_t)a4, (uint64_t **)a5, (uint64_t)a6, a7);
}

uint64_t re::serializeMatrix4x4F<re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, float *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  if (a5 == a6) {
    goto LABEL_4;
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v15 = **((void **)a5 + 2);
    uint64_t v16 = **((void **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      BOOL v18 = WORD1(v15) == WORD1(v16);
      uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      BOOL v18 = v18 && v17 == 0;
      if (v18) {
        goto LABEL_4;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
LABEL_4:
    uint64_t v19 = 4;
    uint64_t result = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginArray(a1 + 24, a2, (uint64_t)a3, &v19, 4);
    if (result)
    {
      re::serialize<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), "column0", 0, a4, a7);
      re::serialize<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), "column1", 1, a4 + 4, a7);
      re::serialize<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), "column2", 2, a4 + 8, a7);
      re::serialize<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), "column3", 3, a4 + 12, a7);
      re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endArray((_anonymous_namespace_ *)(a1 + 24));
      return *(unsigned char *)(a1 + 64) == 0;
    }
    return result;
  }
  return re::serializeObject<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, (uint64_t)a3, (uint64_t)a4, (uint64_t **)a5, (uint64_t)a6, a7);
}

uint64_t re::serializePoseF<re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, float *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  if (a5 == a6) {
    goto LABEL_4;
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v16 = **((void **)a5 + 2);
    uint64_t v17 = **((void **)a6 + 2);
    if ((unsigned __int16)v16 == (unsigned __int16)v17)
    {
      BOOL v19 = WORD1(v16) == WORD1(v17);
      uint64_t v18 = (v17 ^ v16) & 0xFFFFFF00000000;
      BOOL v19 = v19 && v18 == 0;
      if (v19) {
        goto LABEL_4;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
LABEL_4:
    BOOL v14 = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginObject(a1 + 24, a2, (uint64_t)a3, 0);
    uint64_t result = 0;
    if (v14)
    {
      re::serialize<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), "position", 1, a4, a7);
      re::serialize<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), "orientation", 2, a4 + 4, a7);
      re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endObject((_anonymous_namespace_ *)(a1 + 24));
      return *(unsigned char *)(a1 + 64) == 0;
    }
    return result;
  }
  return re::serializeObject<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, (uint64_t)a3, (uint64_t)a4, (uint64_t **)a5, (uint64_t)a6, a7);
}

uint64_t re::serializeQuaternionF<re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, float *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  if (a5 == a6)
  {
LABEL_4:
    return re::serialize<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, a4, a7);
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v15 = **((void **)a5 + 2);
    uint64_t v16 = **((void **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      BOOL v18 = WORD1(v15) == WORD1(v16);
      uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      BOOL v18 = v18 && v17 == 0;
      if (v18) {
        goto LABEL_4;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    goto LABEL_4;
  }
  return re::serializeObject<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, (uint64_t)a3, (uint64_t)a4, (uint64_t **)a5, (uint64_t)a6, a7);
}

uint64_t re::serializeSRT<re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, float *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  if (a5 == a6) {
    goto LABEL_4;
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v16 = **((void **)a5 + 2);
    uint64_t v17 = **((void **)a6 + 2);
    if ((unsigned __int16)v16 == (unsigned __int16)v17)
    {
      BOOL v19 = WORD1(v16) == WORD1(v17);
      uint64_t v18 = (v17 ^ v16) & 0xFFFFFF00000000;
      BOOL v19 = v19 && v18 == 0;
      if (v19) {
        goto LABEL_4;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
LABEL_4:
    BOOL v14 = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginObject(a1 + 24, a2, (uint64_t)a3, 0);
    uint64_t result = 0;
    if (v14)
    {
      re::serialize<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), "scale", 1, a4, a7);
      re::serialize<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), "rotation", 2, a4 + 4, a7);
      re::serialize<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), "translation", 3, a4 + 8, a7);
      re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endObject((_anonymous_namespace_ *)(a1 + 24));
      return *(unsigned char *)(a1 + 64) == 0;
    }
    return result;
  }
  return re::serializeObject<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, (uint64_t)a3, (uint64_t)a4, (uint64_t **)a5, (uint64_t)a6, a7);
}

BOOL re::serialize<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(_anonymous_namespace_ *a1, const char *a2, uint64_t a3, float *a4, char a5)
{
  uint64_t v9 = 2;
  BOOL result = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginArray((uint64_t)a1, a2, a3, &v9, 4);
  if (result)
  {
    re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<float>((uint64_t)a1, "x", 0, a4, a5);
    re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<float>((uint64_t)a1, "y", 1, a4 + 1, a5);
    re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endArray(a1);
    return *((unsigned char *)a1 + 40) == 0;
  }
  return result;
}

{
  BOOL result;
  uint64_t v9;

  uint64_t v9 = 3;
  BOOL result = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginArray((uint64_t)a1, a2, a3, &v9, 4);
  if (result)
  {
    re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<float>((uint64_t)a1, "x", 0, a4, a5);
    re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<float>((uint64_t)a1, "y", 1, a4 + 1, a5);
    re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<float>((uint64_t)a1, "z", 2, a4 + 2, a5);
    re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endArray(a1);
    return *((unsigned char *)a1 + 40) == 0;
  }
  return result;
}

{
  BOOL result;
  uint64_t v9;

  uint64_t v9 = 4;
  BOOL result = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginArray((uint64_t)a1, a2, a3, &v9, 4);
  if (result)
  {
    re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<float>((uint64_t)a1, "x", 0, a4, a5);
    re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<float>((uint64_t)a1, "y", 1, a4 + 1, a5);
    re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<float>((uint64_t)a1, "z", 2, a4 + 2, a5);
    re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<float>((uint64_t)a1, "w", 3, a4 + 3, a5);
    re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endArray(a1);
    return *((unsigned char *)a1 + 40) == 0;
  }
  return result;
}

unsigned int *re::serializeVector2F<re::Serializer<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, float *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  if (a5 == a6)
  {
LABEL_4:
    return re::serialize<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, a4, a7);
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v15 = **((void **)a5 + 2);
    uint64_t v16 = **((void **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      BOOL v18 = WORD1(v15) == WORD1(v16);
      uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      BOOL v18 = v18 && v17 == 0;
      if (v18) {
        goto LABEL_4;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    goto LABEL_4;
  }
  return (unsigned int *)re::serializeObject<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, (uint64_t)a3, a4, a5, (uint64_t)a6, a7);
}

unsigned int *re::serializeVector3F<re::Serializer<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, float *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  if (a5 == a6)
  {
LABEL_4:
    return re::serialize<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, a4, a7);
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v15 = **((void **)a5 + 2);
    uint64_t v16 = **((void **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      BOOL v18 = WORD1(v15) == WORD1(v16);
      uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      BOOL v18 = v18 && v17 == 0;
      if (v18) {
        goto LABEL_4;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    goto LABEL_4;
  }
  return (unsigned int *)re::serializeObject<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, (uint64_t)a3, a4, a5, (uint64_t)a6, a7);
}

unsigned int *re::serializeVector4F<re::Serializer<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, float *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  if (a5 == a6)
  {
LABEL_4:
    return re::serialize<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, a4, a7);
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v15 = **((void **)a5 + 2);
    uint64_t v16 = **((void **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      BOOL v18 = WORD1(v15) == WORD1(v16);
      uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      BOOL v18 = v18 && v17 == 0;
      if (v18) {
        goto LABEL_4;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    goto LABEL_4;
  }
  return (unsigned int *)re::serializeObject<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, (uint64_t)a3, a4, a5, (uint64_t)a6, a7);
}

unsigned int *re::serializeVector2D<re::Serializer<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, double *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  if (a5 == a6)
  {
LABEL_4:
    uint64_t v24 = 2;
    BOOL result = re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginArray((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, &v24, 4);
    if (result)
    {
      if (v24 == 2)
      {
        re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<double>(a1 + 24, "x", 0, a4, a7, (uint64_t)"double");
        re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<double>(a1 + 24, "y", 1, a4 + 1, a7, (uint64_t)"double");
        re::EncoderBinary<re::SeekableInputStream>::endArray((_anonymous_namespace_ *)(a1 + 24));
        return (unsigned int *)(*(unsigned char *)(a1 + 64) == 0);
      }
      else
      {
        re::Encoder<re::EncoderOPACK<re::SeekableInputStream>,re::SeekableInputStream>::setError((_anonymous_namespace_ *)(a1 + 24), 0, "Failed to deserialize vector. Expected array length = 2, actual array length = %zu", v15, v16, v17, v18, v19, v24);
        return 0;
      }
    }
    return result;
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v20 = **((void **)a5 + 2);
    uint64_t v21 = **((void **)a6 + 2);
    if ((unsigned __int16)v20 == (unsigned __int16)v21)
    {
      BOOL v23 = WORD1(v20) == WORD1(v21);
      uint64_t v22 = (v21 ^ v20) & 0xFFFFFF00000000;
      BOOL v23 = v23 && v22 == 0;
      if (v23) {
        goto LABEL_4;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    goto LABEL_4;
  }
  return (unsigned int *)re::serializeObject<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, (uint64_t)a3, a4, a5, (uint64_t)a6, a7);
}

unsigned int *re::serializeVector3D<re::Serializer<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, double *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  if (a5 == a6)
  {
LABEL_4:
    uint64_t v24 = 3;
    BOOL result = re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginArray((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, &v24, 4);
    if (result)
    {
      if (v24 == 3)
      {
        re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<double>(a1 + 24, "x", 0, a4, a7, (uint64_t)"double");
        re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<double>(a1 + 24, "y", 1, a4 + 1, a7, (uint64_t)"double");
        re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<double>(a1 + 24, "z", 2, a4 + 2, a7, (uint64_t)"double");
        re::EncoderBinary<re::SeekableInputStream>::endArray((_anonymous_namespace_ *)(a1 + 24));
        return (unsigned int *)(*(unsigned char *)(a1 + 64) == 0);
      }
      else
      {
        re::Encoder<re::EncoderOPACK<re::SeekableInputStream>,re::SeekableInputStream>::setError((_anonymous_namespace_ *)(a1 + 24), 0, "Failed to deserialize vector. Expected array length = 3, actual array length = %zu", v15, v16, v17, v18, v19, v24);
        return 0;
      }
    }
    return result;
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v20 = **((void **)a5 + 2);
    uint64_t v21 = **((void **)a6 + 2);
    if ((unsigned __int16)v20 == (unsigned __int16)v21)
    {
      BOOL v23 = WORD1(v20) == WORD1(v21);
      uint64_t v22 = (v21 ^ v20) & 0xFFFFFF00000000;
      BOOL v23 = v23 && v22 == 0;
      if (v23) {
        goto LABEL_4;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    goto LABEL_4;
  }
  return (unsigned int *)re::serializeObject<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, (uint64_t)a3, a4, a5, (uint64_t)a6, a7);
}

unsigned int *re::serializeVector4D<re::Serializer<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, double *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  if (a5 == a6)
  {
LABEL_4:
    uint64_t v24 = 4;
    BOOL result = re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginArray((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, &v24, 4);
    if (result)
    {
      if (v24 == 4)
      {
        re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<double>(a1 + 24, "x", 0, a4, a7, (uint64_t)"double");
        re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<double>(a1 + 24, "y", 1, a4 + 1, a7, (uint64_t)"double");
        re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<double>(a1 + 24, "z", 2, a4 + 2, a7, (uint64_t)"double");
        re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<double>(a1 + 24, "w", 3, a4 + 3, a7, (uint64_t)"double");
        re::EncoderBinary<re::SeekableInputStream>::endArray((_anonymous_namespace_ *)(a1 + 24));
        return (unsigned int *)(*(unsigned char *)(a1 + 64) == 0);
      }
      else
      {
        re::Encoder<re::EncoderOPACK<re::SeekableInputStream>,re::SeekableInputStream>::setError((_anonymous_namespace_ *)(a1 + 24), 0, "Failed to deserialize vector. Expected array length = 4, actual array length = %zu", v15, v16, v17, v18, v19, v24);
        return 0;
      }
    }
    return result;
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v20 = **((void **)a5 + 2);
    uint64_t v21 = **((void **)a6 + 2);
    if ((unsigned __int16)v20 == (unsigned __int16)v21)
    {
      BOOL v23 = WORD1(v20) == WORD1(v21);
      uint64_t v22 = (v21 ^ v20) & 0xFFFFFF00000000;
      BOOL v23 = v23 && v22 == 0;
      if (v23) {
        goto LABEL_4;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    goto LABEL_4;
  }
  return (unsigned int *)re::serializeObject<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, (uint64_t)a3, a4, a5, (uint64_t)a6, a7);
}

unsigned int *re::serializeMatrix2x2F<re::Serializer<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, float *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  if (a5 == a6)
  {
LABEL_4:
    uint64_t v24 = 2;
    BOOL result = re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginArray((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, &v24, 4);
    if (result)
    {
      if (v24 == 2)
      {
        re::serialize<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), "column0", 0, a4, a7);
        re::serialize<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), "column1", 1, a4 + 2, a7);
        re::EncoderBinary<re::SeekableInputStream>::endArray((_anonymous_namespace_ *)(a1 + 24));
        return (unsigned int *)(*(unsigned char *)(a1 + 64) == 0);
      }
      else
      {
        re::Encoder<re::EncoderOPACK<re::SeekableInputStream>,re::SeekableInputStream>::setError((_anonymous_namespace_ *)(a1 + 24), 0, "Failed to deserialize matrix. Expected array length = 2, actual array length = %zu", v15, v16, v17, v18, v19, v24);
        return 0;
      }
    }
    return result;
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v20 = **((void **)a5 + 2);
    uint64_t v21 = **((void **)a6 + 2);
    if ((unsigned __int16)v20 == (unsigned __int16)v21)
    {
      BOOL v23 = WORD1(v20) == WORD1(v21);
      uint64_t v22 = (v21 ^ v20) & 0xFFFFFF00000000;
      BOOL v23 = v23 && v22 == 0;
      if (v23) {
        goto LABEL_4;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    goto LABEL_4;
  }
  return (unsigned int *)re::serializeObject<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, (uint64_t)a3, a4, a5, (uint64_t)a6, a7);
}

unsigned int *re::serializeMatrix3x3F<re::Serializer<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, float *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  if (a5 == a6)
  {
LABEL_4:
    uint64_t v24 = 3;
    BOOL result = re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginArray((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, &v24, 4);
    if (result)
    {
      if (v24 == 3)
      {
        re::serialize<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), "column0", 0, a4, a7);
        re::serialize<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), "column1", 1, a4 + 4, a7);
        re::serialize<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), "column2", 2, a4 + 8, a7);
        re::EncoderBinary<re::SeekableInputStream>::endArray((_anonymous_namespace_ *)(a1 + 24));
        return (unsigned int *)(*(unsigned char *)(a1 + 64) == 0);
      }
      else
      {
        re::Encoder<re::EncoderOPACK<re::SeekableInputStream>,re::SeekableInputStream>::setError((_anonymous_namespace_ *)(a1 + 24), 0, "Failed to deserialize matrix. Expected array length = 3, actual array length = %zu", v15, v16, v17, v18, v19, v24);
        return 0;
      }
    }
    return result;
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v20 = **((void **)a5 + 2);
    uint64_t v21 = **((void **)a6 + 2);
    if ((unsigned __int16)v20 == (unsigned __int16)v21)
    {
      BOOL v23 = WORD1(v20) == WORD1(v21);
      uint64_t v22 = (v21 ^ v20) & 0xFFFFFF00000000;
      BOOL v23 = v23 && v22 == 0;
      if (v23) {
        goto LABEL_4;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    goto LABEL_4;
  }
  return (unsigned int *)re::serializeObject<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, (uint64_t)a3, a4, a5, (uint64_t)a6, a7);
}

unsigned int *re::serializeMatrix4x4F<re::Serializer<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, float *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  if (a5 == a6)
  {
LABEL_4:
    uint64_t v24 = 4;
    BOOL result = re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginArray((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, &v24, 4);
    if (result)
    {
      if (v24 == 4)
      {
        re::serialize<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), "column0", 0, a4, a7);
        re::serialize<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), "column1", 1, a4 + 4, a7);
        re::serialize<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), "column2", 2, a4 + 8, a7);
        re::serialize<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), "column3", 3, a4 + 12, a7);
        re::EncoderBinary<re::SeekableInputStream>::endArray((_anonymous_namespace_ *)(a1 + 24));
        return (unsigned int *)(*(unsigned char *)(a1 + 64) == 0);
      }
      else
      {
        re::Encoder<re::EncoderOPACK<re::SeekableInputStream>,re::SeekableInputStream>::setError((_anonymous_namespace_ *)(a1 + 24), 0, "Failed to deserialize matrix. Expected array length = 4, actual array length = %zu", v15, v16, v17, v18, v19, v24);
        return 0;
      }
    }
    return result;
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v20 = **((void **)a5 + 2);
    uint64_t v21 = **((void **)a6 + 2);
    if ((unsigned __int16)v20 == (unsigned __int16)v21)
    {
      BOOL v23 = WORD1(v20) == WORD1(v21);
      uint64_t v22 = (v21 ^ v20) & 0xFFFFFF00000000;
      BOOL v23 = v23 && v22 == 0;
      if (v23) {
        goto LABEL_4;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    goto LABEL_4;
  }
  return (unsigned int *)re::serializeObject<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, (uint64_t)a3, a4, a5, (uint64_t)a6, a7);
}

uint64_t re::serializePoseF<re::Serializer<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, float *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  if (a5 == a6) {
    goto LABEL_4;
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v16 = **((void **)a5 + 2);
    uint64_t v17 = **((void **)a6 + 2);
    if ((unsigned __int16)v16 == (unsigned __int16)v17)
    {
      BOOL v19 = WORD1(v16) == WORD1(v17);
      uint64_t v18 = (v17 ^ v16) & 0xFFFFFF00000000;
      BOOL v19 = v19 && v18 == 0;
      if (v19) {
        goto LABEL_4;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
LABEL_4:
    unsigned int v14 = re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginObject((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, 0);
    uint64_t result = 0;
    if (v14)
    {
      re::serialize<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), "position", 1, a4, a7);
      re::serialize<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), "orientation", 2, a4 + 4, a7);
      re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endObject((_anonymous_namespace_ *)(a1 + 24));
      return *(unsigned char *)(a1 + 64) == 0;
    }
    return result;
  }
  return re::serializeObject<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, (uint64_t)a3, a4, a5, (uint64_t)a6, a7);
}

unsigned int *re::serializeQuaternionF<re::Serializer<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, float *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  if (a5 == a6)
  {
LABEL_4:
    return re::serialize<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, a4, a7);
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v15 = **((void **)a5 + 2);
    uint64_t v16 = **((void **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      BOOL v18 = WORD1(v15) == WORD1(v16);
      uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      BOOL v18 = v18 && v17 == 0;
      if (v18) {
        goto LABEL_4;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    goto LABEL_4;
  }
  return (unsigned int *)re::serializeObject<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, (uint64_t)a3, a4, a5, (uint64_t)a6, a7);
}

uint64_t re::serializeSRT<re::Serializer<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, float *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  if (a5 == a6) {
    goto LABEL_4;
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v16 = **((void **)a5 + 2);
    uint64_t v17 = **((void **)a6 + 2);
    if ((unsigned __int16)v16 == (unsigned __int16)v17)
    {
      BOOL v19 = WORD1(v16) == WORD1(v17);
      uint64_t v18 = (v17 ^ v16) & 0xFFFFFF00000000;
      BOOL v19 = v19 && v18 == 0;
      if (v19) {
        goto LABEL_4;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
LABEL_4:
    unsigned int v14 = re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginObject((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, 0);
    uint64_t result = 0;
    if (v14)
    {
      re::serialize<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), "scale", 1, a4, a7);
      re::serialize<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), "rotation", 2, a4 + 4, a7);
      re::serialize<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), "translation", 3, a4 + 8, a7);
      re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endObject((_anonymous_namespace_ *)(a1 + 24));
      return *(unsigned char *)(a1 + 64) == 0;
    }
    return result;
  }
  return re::serializeObject<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, (uint64_t)a3, a4, a5, (uint64_t)a6, a7);
}

unsigned int *re::serialize<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(_anonymous_namespace_ *a1, char *a2, uint64_t a3, float *a4, char a5)
{
  uint64_t v14 = 2;
  uint64_t result = re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginArray(a1, a2, a3, &v14, 4);
  if (result)
  {
    if (v14 == 2)
    {
      re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<float>((uint64_t)a1, "x", 0, a4, a5, (uint64_t)"float");
      re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<float>((uint64_t)a1, "y", 1, a4 + 1, a5, (uint64_t)"float");
      re::EncoderBinary<re::SeekableInputStream>::endArray(a1);
      return (unsigned int *)(*((unsigned char *)a1 + 40) == 0);
    }
    else
    {
      re::Encoder<re::EncoderOPACK<re::SeekableInputStream>,re::SeekableInputStream>::setError(a1, 0, "Failed to deserialize vector. Expected array length = 2, actual array length = %zu", v9, v10, v11, v12, v13, v14);
      return 0;
    }
  }
  return result;
}

{
  unsigned int *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  uint64_t v14 = 3;
  uint64_t result = re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginArray(a1, a2, a3, &v14, 4);
  if (result)
  {
    if (v14 == 3)
    {
      re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<float>((uint64_t)a1, "x", 0, a4, a5, (uint64_t)"float");
      re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<float>((uint64_t)a1, "y", 1, a4 + 1, a5, (uint64_t)"float");
      re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<float>((uint64_t)a1, "z", 2, a4 + 2, a5, (uint64_t)"float");
      re::EncoderBinary<re::SeekableInputStream>::endArray(a1);
      return (unsigned int *)(*((unsigned char *)a1 + 40) == 0);
    }
    else
    {
      re::Encoder<re::EncoderOPACK<re::SeekableInputStream>,re::SeekableInputStream>::setError(a1, 0, "Failed to deserialize vector. Expected array length = 3, actual array length = %zu", v9, v10, v11, v12, v13, v14);
      return 0;
    }
  }
  return result;
}

{
  unsigned int *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  uint64_t v14 = 4;
  uint64_t result = re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginArray(a1, a2, a3, &v14, 4);
  if (result)
  {
    if (v14 == 4)
    {
      re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<float>((uint64_t)a1, "x", 0, a4, a5, (uint64_t)"float");
      re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<float>((uint64_t)a1, "y", 1, a4 + 1, a5, (uint64_t)"float");
      re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<float>((uint64_t)a1, "z", 2, a4 + 2, a5, (uint64_t)"float");
      re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<float>((uint64_t)a1, "w", 3, a4 + 3, a5, (uint64_t)"float");
      re::EncoderBinary<re::SeekableInputStream>::endArray(a1);
      return (unsigned int *)(*((unsigned char *)a1 + 40) == 0);
    }
    else
    {
      re::Encoder<re::EncoderOPACK<re::SeekableInputStream>,re::SeekableInputStream>::setError(a1, 0, "Failed to deserialize vector. Expected array length = 4, actual array length = %zu", v9, v10, v11, v12, v13, v14);
      return 0;
    }
  }
  return result;
}

{
  unsigned int *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  uint64_t v14 = 4;
  uint64_t result = re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginArray(a1, a2, a3, &v14, 4);
  if (result)
  {
    if (v14 == 4)
    {
      re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<float>((uint64_t)a1, "x", 0, a4, a5, (uint64_t)"float");
      re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<float>((uint64_t)a1, "y", 1, a4 + 1, a5, (uint64_t)"float");
      re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<float>((uint64_t)a1, "z", 2, a4 + 2, a5, (uint64_t)"float");
      re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<float>((uint64_t)a1, "w", 3, a4 + 3, a5, (uint64_t)"float");
      re::EncoderBinary<re::SeekableInputStream>::endArray(a1);
      return (unsigned int *)(*((unsigned char *)a1 + 40) == 0);
    }
    else
    {
      re::Encoder<re::EncoderOPACK<re::SeekableInputStream>,re::SeekableInputStream>::setError(a1, 0, "Failed to deserialize quaternion. Expected array length = 4, actual array length = %zu", v9, v10, v11, v12, v13, v14);
      return 0;
    }
  }
  return result;
}

uint64_t re::serializeVector2F<re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, float *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  if (a5 == a6)
  {
LABEL_4:
    return re::serialize<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, a4, a7);
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v15 = **((void **)a5 + 2);
    uint64_t v16 = **((void **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      BOOL v18 = WORD1(v15) == WORD1(v16);
      uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      BOOL v18 = v18 && v17 == 0;
      if (v18) {
        goto LABEL_4;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    goto LABEL_4;
  }
  return re::serializeObject<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, (uint64_t)a3, (uint64_t)a4, (uint64_t **)a5, (uint64_t)a6, a7);
}

uint64_t re::serializeVector3F<re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, float *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  if (a5 == a6)
  {
LABEL_4:
    return re::serialize<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, a4, a7);
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v15 = **((void **)a5 + 2);
    uint64_t v16 = **((void **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      BOOL v18 = WORD1(v15) == WORD1(v16);
      uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      BOOL v18 = v18 && v17 == 0;
      if (v18) {
        goto LABEL_4;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    goto LABEL_4;
  }
  return re::serializeObject<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, (uint64_t)a3, (uint64_t)a4, (uint64_t **)a5, (uint64_t)a6, a7);
}

uint64_t re::serializeVector4F<re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, float *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  if (a5 == a6)
  {
LABEL_4:
    return re::serialize<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, a4, a7);
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v15 = **((void **)a5 + 2);
    uint64_t v16 = **((void **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      BOOL v18 = WORD1(v15) == WORD1(v16);
      uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      BOOL v18 = v18 && v17 == 0;
      if (v18) {
        goto LABEL_4;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    goto LABEL_4;
  }
  return re::serializeObject<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, (uint64_t)a3, (uint64_t)a4, (uint64_t **)a5, (uint64_t)a6, a7);
}

uint64_t re::serializeVector2D<re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, double *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  if (a5 == a6) {
    goto LABEL_4;
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v15 = **((void **)a5 + 2);
    uint64_t v16 = **((void **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      BOOL v18 = WORD1(v15) == WORD1(v16);
      uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      BOOL v18 = v18 && v17 == 0;
      if (v18) {
        goto LABEL_4;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
LABEL_4:
    uint64_t v19 = 2;
    uint64_t result = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginArray(a1 + 24, a2, (uint64_t)a3, &v19, 4);
    if (result)
    {
      re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<double>(a1 + 24, "x", 0, a4, a7);
      re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<double>(a1 + 24, "y", 1, a4 + 1, a7);
      re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endArray((_anonymous_namespace_ *)(a1 + 24));
      return *(unsigned char *)(a1 + 64) == 0;
    }
    return result;
  }
  return re::serializeObject<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, (uint64_t)a3, (uint64_t)a4, (uint64_t **)a5, (uint64_t)a6, a7);
}

uint64_t re::serializeVector3D<re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, double *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  if (a5 == a6) {
    goto LABEL_4;
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v15 = **((void **)a5 + 2);
    uint64_t v16 = **((void **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      BOOL v18 = WORD1(v15) == WORD1(v16);
      uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      BOOL v18 = v18 && v17 == 0;
      if (v18) {
        goto LABEL_4;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
LABEL_4:
    uint64_t v19 = 3;
    uint64_t result = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginArray(a1 + 24, a2, (uint64_t)a3, &v19, 4);
    if (result)
    {
      re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<double>(a1 + 24, "x", 0, a4, a7);
      re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<double>(a1 + 24, "y", 1, a4 + 1, a7);
      re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<double>(a1 + 24, "z", 2, a4 + 2, a7);
      re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endArray((_anonymous_namespace_ *)(a1 + 24));
      return *(unsigned char *)(a1 + 64) == 0;
    }
    return result;
  }
  return re::serializeObject<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, (uint64_t)a3, (uint64_t)a4, (uint64_t **)a5, (uint64_t)a6, a7);
}

uint64_t re::serializeVector4D<re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, double *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  if (a5 == a6) {
    goto LABEL_4;
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v15 = **((void **)a5 + 2);
    uint64_t v16 = **((void **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      BOOL v18 = WORD1(v15) == WORD1(v16);
      uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      BOOL v18 = v18 && v17 == 0;
      if (v18) {
        goto LABEL_4;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
LABEL_4:
    uint64_t v19 = 4;
    uint64_t result = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginArray(a1 + 24, a2, (uint64_t)a3, &v19, 4);
    if (result)
    {
      re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<double>(a1 + 24, "x", 0, a4, a7);
      re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<double>(a1 + 24, "y", 1, a4 + 1, a7);
      re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<double>(a1 + 24, "z", 2, a4 + 2, a7);
      re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<double>(a1 + 24, "w", 3, a4 + 3, a7);
      re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endArray((_anonymous_namespace_ *)(a1 + 24));
      return *(unsigned char *)(a1 + 64) == 0;
    }
    return result;
  }
  return re::serializeObject<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, (uint64_t)a3, (uint64_t)a4, (uint64_t **)a5, (uint64_t)a6, a7);
}

uint64_t re::serializeMatrix2x2F<re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, float *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  if (a5 == a6) {
    goto LABEL_4;
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v15 = **((void **)a5 + 2);
    uint64_t v16 = **((void **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      BOOL v18 = WORD1(v15) == WORD1(v16);
      uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      BOOL v18 = v18 && v17 == 0;
      if (v18) {
        goto LABEL_4;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
LABEL_4:
    uint64_t v19 = 2;
    uint64_t result = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginArray(a1 + 24, a2, (uint64_t)a3, &v19, 4);
    if (result)
    {
      re::serialize<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), "column0", 0, a4, a7);
      re::serialize<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), "column1", 1, a4 + 2, a7);
      re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endArray((_anonymous_namespace_ *)(a1 + 24));
      return *(unsigned char *)(a1 + 64) == 0;
    }
    return result;
  }
  return re::serializeObject<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, (uint64_t)a3, (uint64_t)a4, (uint64_t **)a5, (uint64_t)a6, a7);
}

uint64_t re::serializeMatrix3x3F<re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, float *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  if (a5 == a6) {
    goto LABEL_4;
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v15 = **((void **)a5 + 2);
    uint64_t v16 = **((void **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      BOOL v18 = WORD1(v15) == WORD1(v16);
      uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      BOOL v18 = v18 && v17 == 0;
      if (v18) {
        goto LABEL_4;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
LABEL_4:
    uint64_t v19 = 3;
    uint64_t result = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginArray(a1 + 24, a2, (uint64_t)a3, &v19, 4);
    if (result)
    {
      re::serialize<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), "column0", 0, a4, a7);
      re::serialize<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), "column1", 1, a4 + 4, a7);
      re::serialize<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), "column2", 2, a4 + 8, a7);
      re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endArray((_anonymous_namespace_ *)(a1 + 24));
      return *(unsigned char *)(a1 + 64) == 0;
    }
    return result;
  }
  return re::serializeObject<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, (uint64_t)a3, (uint64_t)a4, (uint64_t **)a5, (uint64_t)a6, a7);
}

uint64_t re::serializeMatrix4x4F<re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, float *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  if (a5 == a6) {
    goto LABEL_4;
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v15 = **((void **)a5 + 2);
    uint64_t v16 = **((void **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      BOOL v18 = WORD1(v15) == WORD1(v16);
      uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      BOOL v18 = v18 && v17 == 0;
      if (v18) {
        goto LABEL_4;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
LABEL_4:
    uint64_t v19 = 4;
    uint64_t result = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginArray(a1 + 24, a2, (uint64_t)a3, &v19, 4);
    if (result)
    {
      re::serialize<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), "column0", 0, a4, a7);
      re::serialize<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), "column1", 1, a4 + 4, a7);
      re::serialize<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), "column2", 2, a4 + 8, a7);
      re::serialize<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), "column3", 3, a4 + 12, a7);
      re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endArray((_anonymous_namespace_ *)(a1 + 24));
      return *(unsigned char *)(a1 + 64) == 0;
    }
    return result;
  }
  return re::serializeObject<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, (uint64_t)a3, (uint64_t)a4, (uint64_t **)a5, (uint64_t)a6, a7);
}

uint64_t re::serializePoseF<re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, float *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  if (a5 == a6) {
    goto LABEL_4;
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v16 = **((void **)a5 + 2);
    uint64_t v17 = **((void **)a6 + 2);
    if ((unsigned __int16)v16 == (unsigned __int16)v17)
    {
      BOOL v19 = WORD1(v16) == WORD1(v17);
      uint64_t v18 = (v17 ^ v16) & 0xFFFFFF00000000;
      BOOL v19 = v19 && v18 == 0;
      if (v19) {
        goto LABEL_4;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
LABEL_4:
    BOOL v14 = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginObject(a1 + 24, a2, (uint64_t)a3, 0);
    uint64_t result = 0;
    if (v14)
    {
      re::serialize<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), "position", 1, a4, a7);
      re::serialize<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), "orientation", 2, a4 + 4, a7);
      re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endObject((_anonymous_namespace_ *)(a1 + 24));
      return *(unsigned char *)(a1 + 64) == 0;
    }
    return result;
  }
  return re::serializeObject<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, (uint64_t)a3, (uint64_t)a4, (uint64_t **)a5, (uint64_t)a6, a7);
}

uint64_t re::serializeQuaternionF<re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, float *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  if (a5 == a6)
  {
LABEL_4:
    return re::serialize<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, a4, a7);
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v15 = **((void **)a5 + 2);
    uint64_t v16 = **((void **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      BOOL v18 = WORD1(v15) == WORD1(v16);
      uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      BOOL v18 = v18 && v17 == 0;
      if (v18) {
        goto LABEL_4;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    goto LABEL_4;
  }
  return re::serializeObject<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, (uint64_t)a3, (uint64_t)a4, (uint64_t **)a5, (uint64_t)a6, a7);
}

uint64_t re::serializeSRT<re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, float *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  if (a5 == a6) {
    goto LABEL_4;
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v16 = **((void **)a5 + 2);
    uint64_t v17 = **((void **)a6 + 2);
    if ((unsigned __int16)v16 == (unsigned __int16)v17)
    {
      BOOL v19 = WORD1(v16) == WORD1(v17);
      uint64_t v18 = (v17 ^ v16) & 0xFFFFFF00000000;
      BOOL v19 = v19 && v18 == 0;
      if (v19) {
        goto LABEL_4;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
LABEL_4:
    BOOL v14 = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginObject(a1 + 24, a2, (uint64_t)a3, 0);
    uint64_t result = 0;
    if (v14)
    {
      re::serialize<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), "scale", 1, a4, a7);
      re::serialize<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), "rotation", 2, a4 + 4, a7);
      re::serialize<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), "translation", 3, a4 + 8, a7);
      re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endObject((_anonymous_namespace_ *)(a1 + 24));
      return *(unsigned char *)(a1 + 64) == 0;
    }
    return result;
  }
  return re::serializeObject<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, (uint64_t)a3, (uint64_t)a4, (uint64_t **)a5, (uint64_t)a6, a7);
}

BOOL re::serialize<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(_anonymous_namespace_ *a1, const char *a2, uint64_t a3, float *a4, char a5)
{
  uint64_t v9 = 2;
  BOOL result = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginArray((uint64_t)a1, a2, a3, &v9, 4);
  if (result)
  {
    re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<float>((uint64_t)a1, "x", 0, a4, a5);
    re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<float>((uint64_t)a1, "y", 1, a4 + 1, a5);
    re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endArray(a1);
    return *((unsigned char *)a1 + 40) == 0;
  }
  return result;
}

{
  BOOL result;
  uint64_t v9;

  uint64_t v9 = 3;
  BOOL result = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginArray((uint64_t)a1, a2, a3, &v9, 4);
  if (result)
  {
    re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<float>((uint64_t)a1, "x", 0, a4, a5);
    re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<float>((uint64_t)a1, "y", 1, a4 + 1, a5);
    re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<float>((uint64_t)a1, "z", 2, a4 + 2, a5);
    re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endArray(a1);
    return *((unsigned char *)a1 + 40) == 0;
  }
  return result;
}

{
  BOOL result;
  uint64_t v9;

  uint64_t v9 = 4;
  BOOL result = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginArray((uint64_t)a1, a2, a3, &v9, 4);
  if (result)
  {
    re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<float>((uint64_t)a1, "x", 0, a4, a5);
    re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<float>((uint64_t)a1, "y", 1, a4 + 1, a5);
    re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<float>((uint64_t)a1, "z", 2, a4 + 2, a5);
    re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<float>((uint64_t)a1, "w", 3, a4 + 3, a5);
    re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endArray(a1);
    return *((unsigned char *)a1 + 40) == 0;
  }
  return result;
}

uint64_t re::serializeVector2F<re::Serializer<re::EncoderOPACK<re::FixedArrayInputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  if (a5 == a6)
  {
LABEL_4:
    return re::serialize<re::EncoderOPACK<re::FixedArrayInputStream>>((_anonymous_namespace_ *)(a1 + 24), a2, (int)a3, a4, a7);
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v15 = **((void **)a5 + 2);
    uint64_t v16 = **((void **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      BOOL v18 = WORD1(v15) == WORD1(v16);
      uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      BOOL v18 = v18 && v17 == 0;
      if (v18) {
        goto LABEL_4;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    goto LABEL_4;
  }
  return re::serializeObject<re::EncoderOPACK<re::FixedArrayInputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
}

uint64_t re::serializeVector3F<re::Serializer<re::EncoderOPACK<re::FixedArrayInputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  if (a5 == a6)
  {
LABEL_4:
    return re::serialize<re::EncoderOPACK<re::FixedArrayInputStream>>((_anonymous_namespace_ *)(a1 + 24), a2, (int)a3, a4, a7);
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v15 = **((void **)a5 + 2);
    uint64_t v16 = **((void **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      BOOL v18 = WORD1(v15) == WORD1(v16);
      uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      BOOL v18 = v18 && v17 == 0;
      if (v18) {
        goto LABEL_4;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    goto LABEL_4;
  }
  return re::serializeObject<re::EncoderOPACK<re::FixedArrayInputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
}

uint64_t re::serializeVector4F<re::Serializer<re::EncoderOPACK<re::FixedArrayInputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  if (a5 == a6)
  {
LABEL_4:
    return re::serialize<re::EncoderOPACK<re::FixedArrayInputStream>>((_anonymous_namespace_ *)(a1 + 24), a2, (int)a3, a4, a7);
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v15 = **((void **)a5 + 2);
    uint64_t v16 = **((void **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      BOOL v18 = WORD1(v15) == WORD1(v16);
      uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      BOOL v18 = v18 && v17 == 0;
      if (v18) {
        goto LABEL_4;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    goto LABEL_4;
  }
  return re::serializeObject<re::EncoderOPACK<re::FixedArrayInputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
}

uint64_t re::serializeVector2D<re::Serializer<re::EncoderOPACK<re::FixedArrayInputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  if (a5 == a6)
  {
LABEL_4:
    uint64_t v24 = 2;
    uint64_t result = re::EncoderOPACK<re::FixedArrayInputStream>::beginArray(a1 + 24, a2, (int)a3, (char *)&v24, 4);
    if (result)
    {
      if (v24 == 2)
      {
        re::EncoderOPACK<re::FixedArrayInputStream>::serializeDouble(a1 + 24, "x", 0, a4, a7);
        re::EncoderOPACK<re::FixedArrayInputStream>::serializeDouble(a1 + 24, "y", 1, a4 + 8, a7);
        re::EncoderOPACK<re::FixedArrayInputStream>::endArray((_anonymous_namespace_ *)(a1 + 24));
        return *(unsigned char *)(a1 + 64) == 0;
      }
      else
      {
        re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::setError((_anonymous_namespace_ *)(a1 + 24), 0, "Failed to deserialize vector. Expected array length = 2, actual array length = %zu", v15, v16, v17, v18, v19, v24);
        return 0;
      }
    }
    return result;
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v20 = **((void **)a5 + 2);
    uint64_t v21 = **((void **)a6 + 2);
    if ((unsigned __int16)v20 == (unsigned __int16)v21)
    {
      BOOL v23 = WORD1(v20) == WORD1(v21);
      uint64_t v22 = (v21 ^ v20) & 0xFFFFFF00000000;
      BOOL v23 = v23 && v22 == 0;
      if (v23) {
        goto LABEL_4;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    goto LABEL_4;
  }
  return re::serializeObject<re::EncoderOPACK<re::FixedArrayInputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
}

uint64_t re::serializeVector3D<re::Serializer<re::EncoderOPACK<re::FixedArrayInputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  if (a5 == a6)
  {
LABEL_4:
    uint64_t v24 = 3;
    uint64_t result = re::EncoderOPACK<re::FixedArrayInputStream>::beginArray(a1 + 24, a2, (int)a3, (char *)&v24, 4);
    if (result)
    {
      if (v24 == 3)
      {
        re::EncoderOPACK<re::FixedArrayInputStream>::serializeDouble(a1 + 24, "x", 0, a4, a7);
        re::EncoderOPACK<re::FixedArrayInputStream>::serializeDouble(a1 + 24, "y", 1, a4 + 8, a7);
        re::EncoderOPACK<re::FixedArrayInputStream>::serializeDouble(a1 + 24, "z", 2, a4 + 16, a7);
        re::EncoderOPACK<re::FixedArrayInputStream>::endArray((_anonymous_namespace_ *)(a1 + 24));
        return *(unsigned char *)(a1 + 64) == 0;
      }
      else
      {
        re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::setError((_anonymous_namespace_ *)(a1 + 24), 0, "Failed to deserialize vector. Expected array length = 3, actual array length = %zu", v15, v16, v17, v18, v19, v24);
        return 0;
      }
    }
    return result;
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v20 = **((void **)a5 + 2);
    uint64_t v21 = **((void **)a6 + 2);
    if ((unsigned __int16)v20 == (unsigned __int16)v21)
    {
      BOOL v23 = WORD1(v20) == WORD1(v21);
      uint64_t v22 = (v21 ^ v20) & 0xFFFFFF00000000;
      BOOL v23 = v23 && v22 == 0;
      if (v23) {
        goto LABEL_4;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    goto LABEL_4;
  }
  return re::serializeObject<re::EncoderOPACK<re::FixedArrayInputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
}

uint64_t re::serializeVector4D<re::Serializer<re::EncoderOPACK<re::FixedArrayInputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  if (a5 == a6)
  {
LABEL_4:
    uint64_t v24 = 4;
    uint64_t result = re::EncoderOPACK<re::FixedArrayInputStream>::beginArray(a1 + 24, a2, (int)a3, (char *)&v24, 4);
    if (result)
    {
      if (v24 == 4)
      {
        re::EncoderOPACK<re::FixedArrayInputStream>::serializeDouble(a1 + 24, "x", 0, a4, a7);
        re::EncoderOPACK<re::FixedArrayInputStream>::serializeDouble(a1 + 24, "y", 1, a4 + 8, a7);
        re::EncoderOPACK<re::FixedArrayInputStream>::serializeDouble(a1 + 24, "z", 2, a4 + 16, a7);
        re::EncoderOPACK<re::FixedArrayInputStream>::serializeDouble(a1 + 24, "w", 3, a4 + 24, a7);
        re::EncoderOPACK<re::FixedArrayInputStream>::endArray((_anonymous_namespace_ *)(a1 + 24));
        return *(unsigned char *)(a1 + 64) == 0;
      }
      else
      {
        re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::setError((_anonymous_namespace_ *)(a1 + 24), 0, "Failed to deserialize vector. Expected array length = 4, actual array length = %zu", v15, v16, v17, v18, v19, v24);
        return 0;
      }
    }
    return result;
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v20 = **((void **)a5 + 2);
    uint64_t v21 = **((void **)a6 + 2);
    if ((unsigned __int16)v20 == (unsigned __int16)v21)
    {
      BOOL v23 = WORD1(v20) == WORD1(v21);
      uint64_t v22 = (v21 ^ v20) & 0xFFFFFF00000000;
      BOOL v23 = v23 && v22 == 0;
      if (v23) {
        goto LABEL_4;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    goto LABEL_4;
  }
  return re::serializeObject<re::EncoderOPACK<re::FixedArrayInputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
}

uint64_t re::serializeMatrix2x2F<re::Serializer<re::EncoderOPACK<re::FixedArrayInputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  if (a5 == a6)
  {
LABEL_4:
    uint64_t v24 = 2;
    uint64_t result = re::EncoderOPACK<re::FixedArrayInputStream>::beginArray(a1 + 24, a2, (int)a3, (char *)&v24, 4);
    if (result)
    {
      if (v24 == 2)
      {
        re::serialize<re::EncoderOPACK<re::FixedArrayInputStream>>((_anonymous_namespace_ *)(a1 + 24), "column0", 0, a4, a7);
        re::serialize<re::EncoderOPACK<re::FixedArrayInputStream>>((_anonymous_namespace_ *)(a1 + 24), "column1", 1, a4 + 8, a7);
        re::EncoderOPACK<re::FixedArrayInputStream>::endArray((_anonymous_namespace_ *)(a1 + 24));
        return *(unsigned char *)(a1 + 64) == 0;
      }
      else
      {
        re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::setError((_anonymous_namespace_ *)(a1 + 24), 0, "Failed to deserialize matrix. Expected array length = 2, actual array length = %zu", v15, v16, v17, v18, v19, v24);
        return 0;
      }
    }
    return result;
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v20 = **((void **)a5 + 2);
    uint64_t v21 = **((void **)a6 + 2);
    if ((unsigned __int16)v20 == (unsigned __int16)v21)
    {
      BOOL v23 = WORD1(v20) == WORD1(v21);
      uint64_t v22 = (v21 ^ v20) & 0xFFFFFF00000000;
      BOOL v23 = v23 && v22 == 0;
      if (v23) {
        goto LABEL_4;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    goto LABEL_4;
  }
  return re::serializeObject<re::EncoderOPACK<re::FixedArrayInputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
}

uint64_t re::serializeMatrix3x3F<re::Serializer<re::EncoderOPACK<re::FixedArrayInputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  if (a5 == a6)
  {
LABEL_4:
    uint64_t v24 = 3;
    uint64_t result = re::EncoderOPACK<re::FixedArrayInputStream>::beginArray(a1 + 24, a2, (int)a3, (char *)&v24, 4);
    if (result)
    {
      if (v24 == 3)
      {
        re::serialize<re::EncoderOPACK<re::FixedArrayInputStream>>((_anonymous_namespace_ *)(a1 + 24), "column0", 0, a4, a7);
        re::serialize<re::EncoderOPACK<re::FixedArrayInputStream>>((_anonymous_namespace_ *)(a1 + 24), "column1", 1, a4 + 16, a7);
        re::serialize<re::EncoderOPACK<re::FixedArrayInputStream>>((_anonymous_namespace_ *)(a1 + 24), "column2", 2, a4 + 32, a7);
        re::EncoderOPACK<re::FixedArrayInputStream>::endArray((_anonymous_namespace_ *)(a1 + 24));
        return *(unsigned char *)(a1 + 64) == 0;
      }
      else
      {
        re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::setError((_anonymous_namespace_ *)(a1 + 24), 0, "Failed to deserialize matrix. Expected array length = 3, actual array length = %zu", v15, v16, v17, v18, v19, v24);
        return 0;
      }
    }
    return result;
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v20 = **((void **)a5 + 2);
    uint64_t v21 = **((void **)a6 + 2);
    if ((unsigned __int16)v20 == (unsigned __int16)v21)
    {
      BOOL v23 = WORD1(v20) == WORD1(v21);
      uint64_t v22 = (v21 ^ v20) & 0xFFFFFF00000000;
      BOOL v23 = v23 && v22 == 0;
      if (v23) {
        goto LABEL_4;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    goto LABEL_4;
  }
  return re::serializeObject<re::EncoderOPACK<re::FixedArrayInputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
}

uint64_t re::serializeMatrix4x4F<re::Serializer<re::EncoderOPACK<re::FixedArrayInputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  if (a5 == a6)
  {
LABEL_4:
    uint64_t v24 = 4;
    uint64_t result = re::EncoderOPACK<re::FixedArrayInputStream>::beginArray(a1 + 24, a2, (int)a3, (char *)&v24, 4);
    if (result)
    {
      if (v24 == 4)
      {
        re::serialize<re::EncoderOPACK<re::FixedArrayInputStream>>((_anonymous_namespace_ *)(a1 + 24), "column0", 0, a4, a7);
        re::serialize<re::EncoderOPACK<re::FixedArrayInputStream>>((_anonymous_namespace_ *)(a1 + 24), "column1", 1, a4 + 16, a7);
        re::serialize<re::EncoderOPACK<re::FixedArrayInputStream>>((_anonymous_namespace_ *)(a1 + 24), "column2", 2, a4 + 32, a7);
        re::serialize<re::EncoderOPACK<re::FixedArrayInputStream>>((_anonymous_namespace_ *)(a1 + 24), "column3", 3, a4 + 48, a7);
        re::EncoderOPACK<re::FixedArrayInputStream>::endArray((_anonymous_namespace_ *)(a1 + 24));
        return *(unsigned char *)(a1 + 64) == 0;
      }
      else
      {
        re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::setError((_anonymous_namespace_ *)(a1 + 24), 0, "Failed to deserialize matrix. Expected array length = 4, actual array length = %zu", v15, v16, v17, v18, v19, v24);
        return 0;
      }
    }
    return result;
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v20 = **((void **)a5 + 2);
    uint64_t v21 = **((void **)a6 + 2);
    if ((unsigned __int16)v20 == (unsigned __int16)v21)
    {
      BOOL v23 = WORD1(v20) == WORD1(v21);
      uint64_t v22 = (v21 ^ v20) & 0xFFFFFF00000000;
      BOOL v23 = v23 && v22 == 0;
      if (v23) {
        goto LABEL_4;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    goto LABEL_4;
  }
  return re::serializeObject<re::EncoderOPACK<re::FixedArrayInputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
}

uint64_t re::serializePoseF<re::Serializer<re::EncoderOPACK<re::FixedArrayInputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  if (a5 == a6) {
    goto LABEL_4;
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v16 = **((void **)a5 + 2);
    uint64_t v17 = **((void **)a6 + 2);
    if ((unsigned __int16)v16 == (unsigned __int16)v17)
    {
      BOOL v19 = WORD1(v16) == WORD1(v17);
      uint64_t v18 = (v17 ^ v16) & 0xFFFFFF00000000;
      BOOL v19 = v19 && v18 == 0;
      if (v19) {
        goto LABEL_4;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
LABEL_4:
    int v14 = re::EncoderOPACK<re::FixedArrayInputStream>::beginObject(a1 + 24, a2, (int)a3, 0);
    uint64_t result = 0;
    if (v14)
    {
      re::serialize<re::EncoderOPACK<re::FixedArrayInputStream>>((_anonymous_namespace_ *)(a1 + 24), "position", 1, a4, a7);
      re::serialize<re::EncoderOPACK<re::FixedArrayInputStream>>((_anonymous_namespace_ *)(a1 + 24), "orientation", 2, a4 + 16, a7);
      re::EncoderOPACK<re::FixedArrayInputStream>::endObject(a1 + 24);
      return *(unsigned char *)(a1 + 64) == 0;
    }
    return result;
  }
  return re::serializeObject<re::EncoderOPACK<re::FixedArrayInputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
}

uint64_t re::serializeQuaternionF<re::Serializer<re::EncoderOPACK<re::FixedArrayInputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  if (a5 == a6)
  {
LABEL_4:
    return re::serialize<re::EncoderOPACK<re::FixedArrayInputStream>>((_anonymous_namespace_ *)(a1 + 24), a2, (int)a3, a4, a7);
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v15 = **((void **)a5 + 2);
    uint64_t v16 = **((void **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      BOOL v18 = WORD1(v15) == WORD1(v16);
      uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      BOOL v18 = v18 && v17 == 0;
      if (v18) {
        goto LABEL_4;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    goto LABEL_4;
  }
  return re::serializeObject<re::EncoderOPACK<re::FixedArrayInputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
}

uint64_t re::serializeSRT<re::Serializer<re::EncoderOPACK<re::FixedArrayInputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  if (a5 == a6) {
    goto LABEL_4;
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v16 = **((void **)a5 + 2);
    uint64_t v17 = **((void **)a6 + 2);
    if ((unsigned __int16)v16 == (unsigned __int16)v17)
    {
      BOOL v19 = WORD1(v16) == WORD1(v17);
      uint64_t v18 = (v17 ^ v16) & 0xFFFFFF00000000;
      BOOL v19 = v19 && v18 == 0;
      if (v19) {
        goto LABEL_4;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
LABEL_4:
    int v14 = re::EncoderOPACK<re::FixedArrayInputStream>::beginObject(a1 + 24, a2, (int)a3, 0);
    uint64_t result = 0;
    if (v14)
    {
      re::serialize<re::EncoderOPACK<re::FixedArrayInputStream>>((_anonymous_namespace_ *)(a1 + 24), "scale", 1, a4, a7);
      re::serialize<re::EncoderOPACK<re::FixedArrayInputStream>>((_anonymous_namespace_ *)(a1 + 24), "rotation", 2, a4 + 16, a7);
      re::serialize<re::EncoderOPACK<re::FixedArrayInputStream>>((_anonymous_namespace_ *)(a1 + 24), "translation", 3, a4 + 32, a7);
      re::EncoderOPACK<re::FixedArrayInputStream>::endObject(a1 + 24);
      return *(unsigned char *)(a1 + 64) == 0;
    }
    return result;
  }
  return re::serializeObject<re::EncoderOPACK<re::FixedArrayInputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
}

uint64_t re::serializeAudioPlaybackState<re::Serializer<re::EncoderOPACK<re::FixedArrayInputStream>>>(unsigned char *a1, const char *a2, const re::TypeInfo *a3, uint64_t *a4, re::internal *a5, re::TypeInfo *this, uint64_t a7)
{
  if (a5 == this)
  {
    return re::internal::serializeEnumAsBinary<re::EncoderOPACK<re::FixedArrayInputStream>>((uint64_t)a1, a2, a3, a4, a5, a5, a7);
  }
  else
  {
    int v14 = (void *)re::TypeInfo::enumConstants(this);
    if (!v15)
    {
LABEL_6:
      uint64_t v17 = *a4;
      re::TypeRegistry::typeInfo(*(void **)a5, *(void *)(*((void *)a5 + 2) + 72), v26);
      re::TypeInfo::TypeInfo((uint64_t)v25, (uint64_t)v27);
      re::TypeRegistry::typeInfo(*(void **)this, *(void *)(*((void *)this + 2) + 72), v26);
      re::TypeInfo::TypeInfo((uint64_t)v24, (uint64_t)v27);
      if (!a1[64])
      {
        uint64_t result = (*(uint64_t (**)(unsigned char *, const char *, const re::TypeInfo *, uint64_t *, unsigned char *, unsigned char *, uint64_t))(*(void *)a1 + 72))(a1, a2, a3, a4, v25, v24, a7);
        if (!result) {
          return result;
        }
        if (unint64_t)*a4 < 0xA && ((0x21Fu >> *a4)) {
          return 1;
        }
        *a4 = v17;
        re::Serializer<re::EncoderOPACK<re::FixedArrayInputStream>>::setError((uint64_t)a1, 0, "Failed to read REAudioPlaybackState. Invalid value %zu.", v19, v20, v21, v22, v23, v17);
      }
      return 0;
    }
    uint64_t v16 = 24 * v15;
    while (*v14 != 9)
    {
      v14 += 3;
      v16 -= 24;
      if (!v16) {
        goto LABEL_6;
      }
    }
    return re::serializeEnum<re::EncoderOPACK<re::FixedArrayInputStream>>((uint64_t)a1, a2, a3, a4, (uint64_t)a5, (uint64_t)this, a7);
  }
}

uint64_t re::serialize<re::EncoderOPACK<re::FixedArrayInputStream>>(_anonymous_namespace_ *a1, const char *a2, int a3, char *a4, char a5)
{
  uint64_t v14 = 2;
  uint64_t result = re::EncoderOPACK<re::FixedArrayInputStream>::beginArray((uint64_t)a1, a2, a3, (char *)&v14, 4);
  if (result)
  {
    if (v14 == 2)
    {
      re::EncoderOPACK<re::FixedArrayInputStream>::serializeFloat((uint64_t)a1, "x", 0, a4, a5);
      re::EncoderOPACK<re::FixedArrayInputStream>::serializeFloat((uint64_t)a1, "y", 1, a4 + 4, a5);
      re::EncoderOPACK<re::FixedArrayInputStream>::endArray(a1);
      return *((unsigned char *)a1 + 40) == 0;
    }
    else
    {
      re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::setError(a1, 0, "Failed to deserialize vector. Expected array length = 2, actual array length = %zu", v9, v10, v11, v12, v13, v14);
      return 0;
    }
  }
  return result;
}

{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  uint64_t v14 = 3;
  uint64_t result = re::EncoderOPACK<re::FixedArrayInputStream>::beginArray((uint64_t)a1, a2, a3, (char *)&v14, 4);
  if (result)
  {
    if (v14 == 3)
    {
      re::EncoderOPACK<re::FixedArrayInputStream>::serializeFloat((uint64_t)a1, "x", 0, a4, a5);
      re::EncoderOPACK<re::FixedArrayInputStream>::serializeFloat((uint64_t)a1, "y", 1, a4 + 4, a5);
      re::EncoderOPACK<re::FixedArrayInputStream>::serializeFloat((uint64_t)a1, "z", 2, a4 + 8, a5);
      re::EncoderOPACK<re::FixedArrayInputStream>::endArray(a1);
      return *((unsigned char *)a1 + 40) == 0;
    }
    else
    {
      re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::setError(a1, 0, "Failed to deserialize vector. Expected array length = 3, actual array length = %zu", v9, v10, v11, v12, v13, v14);
      return 0;
    }
  }
  return result;
}

{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  uint64_t v14 = 4;
  uint64_t result = re::EncoderOPACK<re::FixedArrayInputStream>::beginArray((uint64_t)a1, a2, a3, (char *)&v14, 4);
  if (result)
  {
    if (v14 == 4)
    {
      re::EncoderOPACK<re::FixedArrayInputStream>::serializeFloat((uint64_t)a1, "x", 0, a4, a5);
      re::EncoderOPACK<re::FixedArrayInputStream>::serializeFloat((uint64_t)a1, "y", 1, a4 + 4, a5);
      re::EncoderOPACK<re::FixedArrayInputStream>::serializeFloat((uint64_t)a1, "z", 2, a4 + 8, a5);
      re::EncoderOPACK<re::FixedArrayInputStream>::serializeFloat((uint64_t)a1, "w", 3, a4 + 12, a5);
      re::EncoderOPACK<re::FixedArrayInputStream>::endArray(a1);
      return *((unsigned char *)a1 + 40) == 0;
    }
    else
    {
      re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::setError(a1, 0, "Failed to deserialize vector. Expected array length = 4, actual array length = %zu", v9, v10, v11, v12, v13, v14);
      return 0;
    }
  }
  return result;
}

{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  uint64_t v14 = 4;
  uint64_t result = re::EncoderOPACK<re::FixedArrayInputStream>::beginArray((uint64_t)a1, a2, a3, (char *)&v14, 4);
  if (result)
  {
    if (v14 == 4)
    {
      re::EncoderOPACK<re::FixedArrayInputStream>::serializeFloat((uint64_t)a1, "x", 0, a4, a5);
      re::EncoderOPACK<re::FixedArrayInputStream>::serializeFloat((uint64_t)a1, "y", 1, a4 + 4, a5);
      re::EncoderOPACK<re::FixedArrayInputStream>::serializeFloat((uint64_t)a1, "z", 2, a4 + 8, a5);
      re::EncoderOPACK<re::FixedArrayInputStream>::serializeFloat((uint64_t)a1, "w", 3, a4 + 12, a5);
      re::EncoderOPACK<re::FixedArrayInputStream>::endArray(a1);
      return *((unsigned char *)a1 + 40) == 0;
    }
    else
    {
      re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::setError(a1, 0, "Failed to deserialize quaternion. Expected array length = 4, actual array length = %zu", v9, v10, v11, v12, v13, v14);
      return 0;
    }
  }
  return result;
}

uint64_t re::serializeVector2F<re::Serializer<re::EncoderBinary<re::FixedArrayInputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  if (a5 == a6)
  {
LABEL_4:
    return re::serialize<re::EncoderBinary<re::FixedArrayInputStream>>((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, a4, a7);
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v15 = **((void **)a5 + 2);
    uint64_t v16 = **((void **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      BOOL v18 = WORD1(v15) == WORD1(v16);
      uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      BOOL v18 = v18 && v17 == 0;
      if (v18) {
        goto LABEL_4;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    goto LABEL_4;
  }
  return re::serializeObject<re::EncoderBinary<re::FixedArrayInputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
}

uint64_t re::serializeVector3F<re::Serializer<re::EncoderBinary<re::FixedArrayInputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  if (a5 == a6)
  {
LABEL_4:
    return re::serialize<re::EncoderBinary<re::FixedArrayInputStream>>((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, a4, a7);
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v15 = **((void **)a5 + 2);
    uint64_t v16 = **((void **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      BOOL v18 = WORD1(v15) == WORD1(v16);
      uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      BOOL v18 = v18 && v17 == 0;
      if (v18) {
        goto LABEL_4;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    goto LABEL_4;
  }
  return re::serializeObject<re::EncoderBinary<re::FixedArrayInputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
}

uint64_t re::serializeVector4F<re::Serializer<re::EncoderBinary<re::FixedArrayInputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  if (a5 == a6)
  {
LABEL_4:
    return re::serialize<re::EncoderBinary<re::FixedArrayInputStream>>((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, a4, a7);
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v15 = **((void **)a5 + 2);
    uint64_t v16 = **((void **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      BOOL v18 = WORD1(v15) == WORD1(v16);
      uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      BOOL v18 = v18 && v17 == 0;
      if (v18) {
        goto LABEL_4;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    goto LABEL_4;
  }
  return re::serializeObject<re::EncoderBinary<re::FixedArrayInputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
}

uint64_t re::serializeVector2D<re::Serializer<re::EncoderBinary<re::FixedArrayInputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  if (a5 == a6)
  {
LABEL_4:
    uint64_t v25 = 2;
    uint64_t result = re::EncoderBinary<re::FixedArrayInputStream>::beginArray(a1 + 24, a2, (uint64_t)a3, (char *)&v25, 4);
    if (result)
    {
      if (v25 == 2)
      {
        re::EncoderBinary<re::FixedArrayInputStream>::serializeValue<long long>(a1 + 24, "x", 0, a4, (uint64_t)"double", a7);
        re::EncoderBinary<re::FixedArrayInputStream>::serializeValue<long long>(a1 + 24, "y", 1, a4 + 8, (uint64_t)"double", a7);
        re::EncoderBinary<re::DynamicArrayBufferedOutputStream>::endArray((_anonymous_namespace_ *)(a1 + 24));
        return *(unsigned char *)(a1 + 64) == 0;
      }
      else
      {
        re::Encoder<re::EncoderBinary<re::FixedArrayInputStream>,re::FixedArrayInputStream>::setError((_anonymous_namespace_ *)(a1 + 24), v15, "Failed to deserialize vector. Expected array length = 2, actual array length = %zu", v16, v17, v18, v19, v20, v25);
        return 0;
      }
    }
    return result;
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v21 = **((void **)a5 + 2);
    uint64_t v22 = **((void **)a6 + 2);
    if ((unsigned __int16)v21 == (unsigned __int16)v22)
    {
      BOOL v24 = WORD1(v21) == WORD1(v22);
      uint64_t v23 = (v22 ^ v21) & 0xFFFFFF00000000;
      BOOL v24 = v24 && v23 == 0;
      if (v24) {
        goto LABEL_4;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    goto LABEL_4;
  }
  return re::serializeObject<re::EncoderBinary<re::FixedArrayInputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
}

uint64_t re::serializeVector3D<re::Serializer<re::EncoderBinary<re::FixedArrayInputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  if (a5 == a6)
  {
LABEL_4:
    uint64_t v25 = 3;
    uint64_t result = re::EncoderBinary<re::FixedArrayInputStream>::beginArray(a1 + 24, a2, (uint64_t)a3, (char *)&v25, 4);
    if (result)
    {
      if (v25 == 3)
      {
        re::EncoderBinary<re::FixedArrayInputStream>::serializeValue<long long>(a1 + 24, "x", 0, a4, (uint64_t)"double", a7);
        re::EncoderBinary<re::FixedArrayInputStream>::serializeValue<long long>(a1 + 24, "y", 1, a4 + 8, (uint64_t)"double", a7);
        re::EncoderBinary<re::FixedArrayInputStream>::serializeValue<long long>(a1 + 24, "z", 2, a4 + 16, (uint64_t)"double", a7);
        re::EncoderBinary<re::DynamicArrayBufferedOutputStream>::endArray((_anonymous_namespace_ *)(a1 + 24));
        return *(unsigned char *)(a1 + 64) == 0;
      }
      else
      {
        re::Encoder<re::EncoderBinary<re::FixedArrayInputStream>,re::FixedArrayInputStream>::setError((_anonymous_namespace_ *)(a1 + 24), v15, "Failed to deserialize vector. Expected array length = 3, actual array length = %zu", v16, v17, v18, v19, v20, v25);
        return 0;
      }
    }
    return result;
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v21 = **((void **)a5 + 2);
    uint64_t v22 = **((void **)a6 + 2);
    if ((unsigned __int16)v21 == (unsigned __int16)v22)
    {
      BOOL v24 = WORD1(v21) == WORD1(v22);
      uint64_t v23 = (v22 ^ v21) & 0xFFFFFF00000000;
      BOOL v24 = v24 && v23 == 0;
      if (v24) {
        goto LABEL_4;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    goto LABEL_4;
  }
  return re::serializeObject<re::EncoderBinary<re::FixedArrayInputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
}

uint64_t re::serializeVector4D<re::Serializer<re::EncoderBinary<re::FixedArrayInputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  if (a5 == a6)
  {
LABEL_4:
    uint64_t v25 = 4;
    uint64_t result = re::EncoderBinary<re::FixedArrayInputStream>::beginArray(a1 + 24, a2, (uint64_t)a3, (char *)&v25, 4);
    if (result)
    {
      if (v25 == 4)
      {
        re::EncoderBinary<re::FixedArrayInputStream>::serializeValue<long long>(a1 + 24, "x", 0, a4, (uint64_t)"double", a7);
        re::EncoderBinary<re::FixedArrayInputStream>::serializeValue<long long>(a1 + 24, "y", 1, a4 + 8, (uint64_t)"double", a7);
        re::EncoderBinary<re::FixedArrayInputStream>::serializeValue<long long>(a1 + 24, "z", 2, a4 + 16, (uint64_t)"double", a7);
        re::EncoderBinary<re::FixedArrayInputStream>::serializeValue<long long>(a1 + 24, "w", 3, a4 + 24, (uint64_t)"double", a7);
        re::EncoderBinary<re::DynamicArrayBufferedOutputStream>::endArray((_anonymous_namespace_ *)(a1 + 24));
        return *(unsigned char *)(a1 + 64) == 0;
      }
      else
      {
        re::Encoder<re::EncoderBinary<re::FixedArrayInputStream>,re::FixedArrayInputStream>::setError((_anonymous_namespace_ *)(a1 + 24), v15, "Failed to deserialize vector. Expected array length = 4, actual array length = %zu", v16, v17, v18, v19, v20, v25);
        return 0;
      }
    }
    return result;
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v21 = **((void **)a5 + 2);
    uint64_t v22 = **((void **)a6 + 2);
    if ((unsigned __int16)v21 == (unsigned __int16)v22)
    {
      BOOL v24 = WORD1(v21) == WORD1(v22);
      uint64_t v23 = (v22 ^ v21) & 0xFFFFFF00000000;
      BOOL v24 = v24 && v23 == 0;
      if (v24) {
        goto LABEL_4;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    goto LABEL_4;
  }
  return re::serializeObject<re::EncoderBinary<re::FixedArrayInputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
}

uint64_t re::serializeMatrix2x2F<re::Serializer<re::EncoderBinary<re::FixedArrayInputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  if (a5 == a6)
  {
LABEL_4:
    uint64_t v25 = 2;
    uint64_t result = re::EncoderBinary<re::FixedArrayInputStream>::beginArray(a1 + 24, a2, (uint64_t)a3, (char *)&v25, 4);
    if (result)
    {
      if (v25 == 2)
      {
        re::serialize<re::EncoderBinary<re::FixedArrayInputStream>>((_anonymous_namespace_ *)(a1 + 24), "column0", 0, a4, a7);
        re::serialize<re::EncoderBinary<re::FixedArrayInputStream>>((_anonymous_namespace_ *)(a1 + 24), "column1", 1, a4 + 8, a7);
        re::EncoderBinary<re::DynamicArrayBufferedOutputStream>::endArray((_anonymous_namespace_ *)(a1 + 24));
        return *(unsigned char *)(a1 + 64) == 0;
      }
      else
      {
        re::Encoder<re::EncoderBinary<re::FixedArrayInputStream>,re::FixedArrayInputStream>::setError((_anonymous_namespace_ *)(a1 + 24), v15, "Failed to deserialize matrix. Expected array length = 2, actual array length = %zu", v16, v17, v18, v19, v20, v25);
        return 0;
      }
    }
    return result;
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v21 = **((void **)a5 + 2);
    uint64_t v22 = **((void **)a6 + 2);
    if ((unsigned __int16)v21 == (unsigned __int16)v22)
    {
      BOOL v24 = WORD1(v21) == WORD1(v22);
      uint64_t v23 = (v22 ^ v21) & 0xFFFFFF00000000;
      BOOL v24 = v24 && v23 == 0;
      if (v24) {
        goto LABEL_4;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    goto LABEL_4;
  }
  return re::serializeObject<re::EncoderBinary<re::FixedArrayInputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
}

uint64_t re::serializeMatrix3x3F<re::Serializer<re::EncoderBinary<re::FixedArrayInputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  if (a5 == a6)
  {
LABEL_4:
    uint64_t v25 = 3;
    uint64_t result = re::EncoderBinary<re::FixedArrayInputStream>::beginArray(a1 + 24, a2, (uint64_t)a3, (char *)&v25, 4);
    if (result)
    {
      if (v25 == 3)
      {
        re::serialize<re::EncoderBinary<re::FixedArrayInputStream>>((_anonymous_namespace_ *)(a1 + 24), "column0", 0, a4, a7);
        re::serialize<re::EncoderBinary<re::FixedArrayInputStream>>((_anonymous_namespace_ *)(a1 + 24), "column1", 1, a4 + 16, a7);
        re::serialize<re::EncoderBinary<re::FixedArrayInputStream>>((_anonymous_namespace_ *)(a1 + 24), "column2", 2, a4 + 32, a7);
        re::EncoderBinary<re::DynamicArrayBufferedOutputStream>::endArray((_anonymous_namespace_ *)(a1 + 24));
        return *(unsigned char *)(a1 + 64) == 0;
      }
      else
      {
        re::Encoder<re::EncoderBinary<re::FixedArrayInputStream>,re::FixedArrayInputStream>::setError((_anonymous_namespace_ *)(a1 + 24), v15, "Failed to deserialize matrix. Expected array length = 3, actual array length = %zu", v16, v17, v18, v19, v20, v25);
        return 0;
      }
    }
    return result;
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v21 = **((void **)a5 + 2);
    uint64_t v22 = **((void **)a6 + 2);
    if ((unsigned __int16)v21 == (unsigned __int16)v22)
    {
      BOOL v24 = WORD1(v21) == WORD1(v22);
      uint64_t v23 = (v22 ^ v21) & 0xFFFFFF00000000;
      BOOL v24 = v24 && v23 == 0;
      if (v24) {
        goto LABEL_4;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    goto LABEL_4;
  }
  return re::serializeObject<re::EncoderBinary<re::FixedArrayInputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
}

uint64_t re::serializeMatrix4x4F<re::Serializer<re::EncoderBinary<re::FixedArrayInputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  if (a5 == a6)
  {
LABEL_4:
    uint64_t v25 = 4;
    uint64_t result = re::EncoderBinary<re::FixedArrayInputStream>::beginArray(a1 + 24, a2, (uint64_t)a3, (char *)&v25, 4);
    if (result)
    {
      if (v25 == 4)
      {
        re::serialize<re::EncoderBinary<re::FixedArrayInputStream>>((_anonymous_namespace_ *)(a1 + 24), "column0", 0, a4, a7);
        re::serialize<re::EncoderBinary<re::FixedArrayInputStream>>((_anonymous_namespace_ *)(a1 + 24), "column1", 1, a4 + 16, a7);
        re::serialize<re::EncoderBinary<re::FixedArrayInputStream>>((_anonymous_namespace_ *)(a1 + 24), "column2", 2, a4 + 32, a7);
        re::serialize<re::EncoderBinary<re::FixedArrayInputStream>>((_anonymous_namespace_ *)(a1 + 24), "column3", 3, a4 + 48, a7);
        re::EncoderBinary<re::DynamicArrayBufferedOutputStream>::endArray((_anonymous_namespace_ *)(a1 + 24));
        return *(unsigned char *)(a1 + 64) == 0;
      }
      else
      {
        re::Encoder<re::EncoderBinary<re::FixedArrayInputStream>,re::FixedArrayInputStream>::setError((_anonymous_namespace_ *)(a1 + 24), v15, "Failed to deserialize matrix. Expected array length = 4, actual array length = %zu", v16, v17, v18, v19, v20, v25);
        return 0;
      }
    }
    return result;
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v21 = **((void **)a5 + 2);
    uint64_t v22 = **((void **)a6 + 2);
    if ((unsigned __int16)v21 == (unsigned __int16)v22)
    {
      BOOL v24 = WORD1(v21) == WORD1(v22);
      uint64_t v23 = (v22 ^ v21) & 0xFFFFFF00000000;
      BOOL v24 = v24 && v23 == 0;
      if (v24) {
        goto LABEL_4;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    goto LABEL_4;
  }
  return re::serializeObject<re::EncoderBinary<re::FixedArrayInputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
}

uint64_t re::serializePoseF<re::Serializer<re::EncoderBinary<re::FixedArrayInputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  if (a5 == a6) {
    goto LABEL_4;
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v15 = **((void **)a5 + 2);
    uint64_t v16 = **((void **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      BOOL v18 = WORD1(v15) == WORD1(v16);
      uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      BOOL v18 = v18 && v17 == 0;
      if (v18) {
        goto LABEL_4;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
LABEL_4:
    if (*(unsigned char *)(a1 + 64)) {
      return 0;
    }
    LOBYTE(v19[0]) = 1;
    DWORD1(v19[0]) = 0;
    *((void *)&v19[0] + 1) = a2;
    memset(&v19[1], 0, 32);
    re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::pushState((void *)(a1 + 24), v19);
    re::serialize<re::EncoderBinary<re::FixedArrayInputStream>>((_anonymous_namespace_ *)(a1 + 24), "position", 1, a4, a7);
    re::serialize<re::EncoderBinary<re::FixedArrayInputStream>>((_anonymous_namespace_ *)(a1 + 24), "orientation", 2, a4 + 16, a7);
    re::EncoderBinary<re::DynamicArrayBufferedOutputStream>::endObject((_anonymous_namespace_ *)(a1 + 24));
    return *(unsigned char *)(a1 + 64) == 0;
  }
  return re::serializeObject<re::EncoderBinary<re::FixedArrayInputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
}

uint64_t re::serializeQuaternionF<re::Serializer<re::EncoderBinary<re::FixedArrayInputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  if (a5 == a6)
  {
LABEL_4:
    return re::serialize<re::EncoderBinary<re::FixedArrayInputStream>>((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, a4, a7);
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v15 = **((void **)a5 + 2);
    uint64_t v16 = **((void **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      BOOL v18 = WORD1(v15) == WORD1(v16);
      uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      BOOL v18 = v18 && v17 == 0;
      if (v18) {
        goto LABEL_4;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    goto LABEL_4;
  }
  return re::serializeObject<re::EncoderBinary<re::FixedArrayInputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
}

uint64_t re::serializeSRT<re::Serializer<re::EncoderBinary<re::FixedArrayInputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  if (a5 == a6) {
    goto LABEL_4;
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v15 = **((void **)a5 + 2);
    uint64_t v16 = **((void **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      BOOL v18 = WORD1(v15) == WORD1(v16);
      uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      BOOL v18 = v18 && v17 == 0;
      if (v18) {
        goto LABEL_4;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
LABEL_4:
    if (*(unsigned char *)(a1 + 64)) {
      return 0;
    }
    LOBYTE(v19[0]) = 1;
    DWORD1(v19[0]) = 0;
    *((void *)&v19[0] + 1) = a2;
    memset(&v19[1], 0, 32);
    re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::pushState((void *)(a1 + 24), v19);
    re::serialize<re::EncoderBinary<re::FixedArrayInputStream>>((_anonymous_namespace_ *)(a1 + 24), "scale", 1, a4, a7);
    re::serialize<re::EncoderBinary<re::FixedArrayInputStream>>((_anonymous_namespace_ *)(a1 + 24), "rotation", 2, a4 + 16, a7);
    re::serialize<re::EncoderBinary<re::FixedArrayInputStream>>((_anonymous_namespace_ *)(a1 + 24), "translation", 3, a4 + 32, a7);
    re::EncoderBinary<re::DynamicArrayBufferedOutputStream>::endObject((_anonymous_namespace_ *)(a1 + 24));
    return *(unsigned char *)(a1 + 64) == 0;
  }
  return re::serializeObject<re::EncoderBinary<re::FixedArrayInputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
}

uint64_t re::serializeAudioPlaybackState<re::Serializer<re::EncoderBinary<re::FixedArrayInputStream>>>(unsigned char *a1, const char *a2, const re::TypeInfo *a3, uint64_t *a4, re::internal *a5, re::TypeInfo *this, uint64_t a7)
{
  if (a5 == this)
  {
    return re::internal::serializeEnumAsBinary<re::EncoderBinary<re::FixedArrayInputStream>>((uint64_t)a1, a2, a3, a4, a5, a5, a7);
  }
  else
  {
    uint64_t v14 = (void *)re::TypeInfo::enumConstants(this);
    if (!v15)
    {
LABEL_6:
      uint64_t v17 = *a4;
      re::TypeRegistry::typeInfo(*(void **)a5, *(void *)(*((void *)a5 + 2) + 72), v26);
      re::TypeInfo::TypeInfo((uint64_t)v25, (uint64_t)v27);
      re::TypeRegistry::typeInfo(*(void **)this, *(void *)(*((void *)this + 2) + 72), v26);
      re::TypeInfo::TypeInfo((uint64_t)v24, (uint64_t)v27);
      if (!a1[64])
      {
        uint64_t result = (*(uint64_t (**)(unsigned char *, const char *, const re::TypeInfo *, uint64_t *, unsigned char *, unsigned char *, uint64_t))(*(void *)a1 + 72))(a1, a2, a3, a4, v25, v24, a7);
        if (!result) {
          return result;
        }
        if (unint64_t)*a4 < 0xA && ((0x21Fu >> *a4)) {
          return 1;
        }
        *a4 = v17;
        re::Serializer<re::EncoderOPACK<re::FixedArrayInputStream>>::setError((uint64_t)a1, 0, "Failed to read REAudioPlaybackState. Invalid value %zu.", v19, v20, v21, v22, v23, v17);
      }
      return 0;
    }
    uint64_t v16 = 24 * v15;
    while (*v14 != 9)
    {
      v14 += 3;
      v16 -= 24;
      if (!v16) {
        goto LABEL_6;
      }
    }
    return re::serializeEnum<re::EncoderBinary<re::FixedArrayInputStream>>((uint64_t)a1, a2, a3, a4, (uint64_t)a5, (uint64_t)this, a7);
  }
}

BOOL re::serialize<re::EncoderBinary<re::FixedArrayInputStream>>(_anonymous_namespace_ *a1, const char *a2, uint64_t a3, char *a4, char a5)
{
  uint64_t v15 = 2;
  BOOL result = re::EncoderBinary<re::FixedArrayInputStream>::beginArray((uint64_t)a1, a2, a3, (char *)&v15, 4);
  if (result)
  {
    if (v15 == 2)
    {
      re::EncoderBinary<re::FixedArrayInputStream>::serializeValue<int>((uint64_t)a1, "x", 0, a4, (uint64_t)"float", a5);
      re::EncoderBinary<re::FixedArrayInputStream>::serializeValue<int>((uint64_t)a1, "y", 1, a4 + 4, (uint64_t)"float", a5);
      re::EncoderBinary<re::DynamicArrayBufferedOutputStream>::endArray(a1);
      return *((unsigned char *)a1 + 40) == 0;
    }
    else
    {
      re::Encoder<re::EncoderBinary<re::FixedArrayInputStream>,re::FixedArrayInputStream>::setError(a1, v9, "Failed to deserialize vector. Expected array length = 2, actual array length = %zu", v10, v11, v12, v13, v14, v15);
      return 0;
    }
  }
  return result;
}

{
  BOOL result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  uint64_t v15 = 3;
  BOOL result = re::EncoderBinary<re::FixedArrayInputStream>::beginArray((uint64_t)a1, a2, a3, (char *)&v15, 4);
  if (result)
  {
    if (v15 == 3)
    {
      re::EncoderBinary<re::FixedArrayInputStream>::serializeValue<int>((uint64_t)a1, "x", 0, a4, (uint64_t)"float", a5);
      re::EncoderBinary<re::FixedArrayInputStream>::serializeValue<int>((uint64_t)a1, "y", 1, a4 + 4, (uint64_t)"float", a5);
      re::EncoderBinary<re::FixedArrayInputStream>::serializeValue<int>((uint64_t)a1, "z", 2, a4 + 8, (uint64_t)"float", a5);
      re::EncoderBinary<re::DynamicArrayBufferedOutputStream>::endArray(a1);
      return *((unsigned char *)a1 + 40) == 0;
    }
    else
    {
      re::Encoder<re::EncoderBinary<re::FixedArrayInputStream>,re::FixedArrayInputStream>::setError(a1, v9, "Failed to deserialize vector. Expected array length = 3, actual array length = %zu", v10, v11, v12, v13, v14, v15);
      return 0;
    }
  }
  return result;
}

{
  BOOL result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  uint64_t v15 = 4;
  BOOL result = re::EncoderBinary<re::FixedArrayInputStream>::beginArray((uint64_t)a1, a2, a3, (char *)&v15, 4);
  if (result)
  {
    if (v15 == 4)
    {
      re::EncoderBinary<re::FixedArrayInputStream>::serializeValue<int>((uint64_t)a1, "x", 0, a4, (uint64_t)"float", a5);
      re::EncoderBinary<re::FixedArrayInputStream>::serializeValue<int>((uint64_t)a1, "y", 1, a4 + 4, (uint64_t)"float", a5);
      re::EncoderBinary<re::FixedArrayInputStream>::serializeValue<int>((uint64_t)a1, "z", 2, a4 + 8, (uint64_t)"float", a5);
      re::EncoderBinary<re::FixedArrayInputStream>::serializeValue<int>((uint64_t)a1, "w", 3, a4 + 12, (uint64_t)"float", a5);
      re::EncoderBinary<re::DynamicArrayBufferedOutputStream>::endArray(a1);
      return *((unsigned char *)a1 + 40) == 0;
    }
    else
    {
      re::Encoder<re::EncoderBinary<re::FixedArrayInputStream>,re::FixedArrayInputStream>::setError(a1, v9, "Failed to deserialize vector. Expected array length = 4, actual array length = %zu", v10, v11, v12, v13, v14, v15);
      return 0;
    }
  }
  return result;
}

{
  BOOL result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  uint64_t v15 = 4;
  BOOL result = re::EncoderBinary<re::FixedArrayInputStream>::beginArray((uint64_t)a1, a2, a3, (char *)&v15, 4);
  if (result)
  {
    if (v15 == 4)
    {
      re::EncoderBinary<re::FixedArrayInputStream>::serializeValue<int>((uint64_t)a1, "x", 0, a4, (uint64_t)"float", a5);
      re::EncoderBinary<re::FixedArrayInputStream>::serializeValue<int>((uint64_t)a1, "y", 1, a4 + 4, (uint64_t)"float", a5);
      re::EncoderBinary<re::FixedArrayInputStream>::serializeValue<int>((uint64_t)a1, "z", 2, a4 + 8, (uint64_t)"float", a5);
      re::EncoderBinary<re::FixedArrayInputStream>::serializeValue<int>((uint64_t)a1, "w", 3, a4 + 12, (uint64_t)"float", a5);
      re::EncoderBinary<re::DynamicArrayBufferedOutputStream>::endArray(a1);
      return *((unsigned char *)a1 + 40) == 0;
    }
    else
    {
      re::Encoder<re::EncoderBinary<re::FixedArrayInputStream>,re::FixedArrayInputStream>::setError(a1, v9, "Failed to deserialize quaternion. Expected array length = 4, actual array length = %zu", v10, v11, v12, v13, v14, v15);
      return 0;
    }
  }
  return result;
}

uint64_t re::Encoder<re::EncoderBinary<re::FixedArrayInputStream>,re::FixedArrayInputStream>::setError(_anonymous_namespace_ *a1, uint64_t a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v23 = 0;
  BOOL v24 = 0;
  uint64_t v25 = 0;
  re::DynamicString::setCapacity(&v22, 0);
  uint64_t v21 = &a9;
  re::DynamicString::vassignf((re::DynamicString *)&v22, a3, &a9);
  re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::combineLabels(a1, 0, (re::DynamicString *)&v14);
  if (v15) {
    uint64_t v11 = *(unsigned char **)&v16[7];
  }
  else {
    uint64_t v11 = v16;
  }
  if (v23) {
    uint64_t v12 = v24;
  }
  else {
    uint64_t v12 = (char *)&v23 + 1;
  }
  re::DynamicString::format((re::DynamicString *)"Failed to %s \"%s\". Reason: %s", (re::DynamicString *)&v17, "deserialize", v11, v12);
  *(void *)&v20[0] = 400;
  *((void *)&v20[0] + 1) = re::FoundationErrorCategory(void)::instance;
  *(void *)&v20[1] = v17;
  *((void *)&v20[2] + 1) = v19;
  *(long long *)((char *)&v20[1] + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v18;
  re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setError((uint64_t)a1, v20);
  if (*(void *)&v20[1])
  {
    if (BYTE8(v20[1])) {
      (*(void (**)(void))(**(void **)&v20[1] + 40))();
    }
    memset(&v20[1], 0, 32);
  }
  if (v14 && (v15 & 1) != 0) {
    (*(void (**)(void))(*(void *)v14 + 40))();
  }
  uint64_t result = (uint64_t)v22;
  if (v22)
  {
    if (v23) {
      return (*(uint64_t (**)(void))(*v22 + 40))();
    }
  }
  return result;
}

uint64_t re::Encoder<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setError(_anonymous_namespace_ *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v23 = 0;
  BOOL v24 = 0;
  uint64_t v25 = 0;
  re::DynamicString::setCapacity(&v22, 0);
  uint64_t v21 = &a9;
  re::DynamicString::vassignf((re::DynamicString *)&v22, "Failed to serialize Swift Codable component of type %s.", &a9);
  re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::combineLabels(a1, a2, (re::DynamicString *)&v14);
  if (v15) {
    uint64_t v11 = *(unsigned char **)&v16[7];
  }
  else {
    uint64_t v11 = v16;
  }
  if (v23) {
    uint64_t v12 = v24;
  }
  else {
    uint64_t v12 = (char *)&v23 + 1;
  }
  re::DynamicString::format((re::DynamicString *)"Failed to %s \"%s\". Reason: %s", (re::DynamicString *)&v17, "serialize", v11, v12);
  *(void *)&v20[0] = 400;
  *((void *)&v20[0] + 1) = re::FoundationErrorCategory(void)::instance;
  *(void *)&v20[1] = v17;
  *((void *)&v20[2] + 1) = v19;
  *(long long *)((char *)&v20[1] + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v18;
  re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setError((uint64_t)a1, v20);
  if (*(void *)&v20[1])
  {
    if (BYTE8(v20[1])) {
      (*(void (**)(void))(**(void **)&v20[1] + 40))();
    }
    memset(&v20[1], 0, 32);
  }
  if (v14 && (v15 & 1) != 0) {
    (*(void (**)(void))(*(void *)v14 + 40))();
  }
  uint64_t result = (uint64_t)v22;
  if (v22)
  {
    if (v23) {
      return (*(uint64_t (**)(void))(*v22 + 40))();
    }
  }
  return result;
}

char *rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::WriteRawValue(char **a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (*((void *)result + 4) - *((void *)result + 3) < a3)
  {
    uint64_t result = rapidjson::internal::Stack<re::internal::RapidJSONAllocator>::Expand<char>((uint64_t)result, a3);
    if (!a3) {
      return result;
    }
  }
  else if (!a3)
  {
    return result;
  }
  unint64_t v7 = 0;
  do
  {
    char v8 = *(unsigned char *)(a2 + v7);
    uint64_t v9 = (unsigned char *)*((void *)*a1 + 3);
    *((void *)*a1 + 3) = v9 + 1;
    *uint64_t v9 = v8;
    ++v7;
  }
  while (v7 < a3);
  return result;
}

uint64_t rapidjson::GenericValue<rapidjson::UTF8<char>,re::internal::RapidJSONPoolAllocator<re::internal::RapidJSONAllocator>>::Accept<rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>(unsigned int *a1, uint64_t a2)
{
  __int16 v4 = *((_WORD *)a1 + 11);
  switch(v4 & 7)
  {
    case 0:
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Prefix((char *)a2);
      return rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::WriteNull((uint64_t *)a2);
    case 1:
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Prefix((char *)a2);
      char v8 = (uint64_t *)a2;
      int v9 = 0;
      goto LABEL_14;
    case 2:
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Prefix((char *)a2);
      char v8 = (uint64_t *)a2;
      int v9 = 1;
LABEL_14:
      return rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::WriteBool(v8, v9);
    case 3:
      if (!rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::StartObject(a2)) {
        return 0;
      }
      if (!*a1) {
        goto LABEL_29;
      }
      uint64_t v10 = *((void *)a1 + 1) + 24;
      while (1)
      {
        uint64_t v11 = (*(_WORD *)(v10 - 2) & 0x1000) != 0 ? v10 - 24 : *(void *)(v10 - 16);
        unsigned int v12 = (*(_WORD *)(v10 - 2) & 0x1000) != 0 ? 21 - *(char *)(v10 - 3) : *(_DWORD *)(v10 - 24);
        rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Prefix((char *)a2);
        if (!rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::WriteString((uint64_t *)a2, v11, v12)|| (rapidjson::GenericValue<rapidjson::UTF8<char>,re::internal::RapidJSONPoolAllocator<re::internal::RapidJSONAllocator>>::Accept<rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>(v10, a2) & 1) == 0)
        {
          break;
        }
        uint64_t v13 = v10 + 24;
        v10 += 48;
        if (v13 == *((void *)a1 + 1) + 48 * *a1)
        {
LABEL_29:
          *(void *)(a2 + 32) -= 16;
          return rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::WriteEndObject((uint64_t *)a2);
        }
      }
      return 0;
    case 4:
      if (!rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::StartArray(a2)) {
        return 0;
      }
      if (!*a1) {
        goto LABEL_37;
      }
      uint64_t v14 = *((void *)a1 + 1);
      break;
    case 5:
      if ((*((_WORD *)a1 + 11) & 0x1000) != 0) {
        uint64_t v15 = (uint64_t)a1;
      }
      else {
        uint64_t v15 = *((void *)a1 + 1);
      }
      if ((*((_WORD *)a1 + 11) & 0x1000) != 0) {
        unsigned int v16 = 21 - *((char *)a1 + 21);
      }
      else {
        unsigned int v16 = *a1;
      }
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Prefix((char *)a2);
      return rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::WriteString((uint64_t *)a2, v15, v16);
    default:
      if ((*((_WORD *)a1 + 11) & 0x200) != 0)
      {
        double v17 = *(double *)a1;
        rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Prefix((char *)a2);
        return rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::WriteDouble(a2, v17);
      }
      else if ((v4 & 0x20) != 0)
      {
        long long v18 = (rapidjson::internal *)*a1;
        rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Prefix((char *)a2);
        return rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::WriteInt((uint64_t *)a2, v18, v19);
      }
      else if ((v4 & 0x40) != 0)
      {
        uint64_t v20 = (rapidjson::internal *)*a1;
        rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Prefix((char *)a2);
        return rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::WriteUint((uint64_t *)a2, v20, v21);
      }
      else
      {
        float v6 = *(rapidjson::internal **)a1;
        rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Prefix((char *)a2);
        if ((v4 & 0x80) != 0)
        {
          return rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::WriteInt64((uint64_t *)a2, (unint64_t)v6, v7);
        }
        else
        {
          return rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::WriteUint64((uint64_t *)a2, v6, v7);
        }
      }
  }
  do
  {
    if ((rapidjson::GenericValue<rapidjson::UTF8<char>,re::internal::RapidJSONPoolAllocator<re::internal::RapidJSONAllocator>>::Accept<rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>(v14, a2) & 1) == 0)return 0; {
    v14 += 24;
    }
  }
  while (v14 != *((void *)a1 + 1) + 24 * *a1);
LABEL_37:
  *(void *)(a2 + 32) -= 16;
  return rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::WriteEndArray((uint64_t *)a2);
}

uint64_t re::ecs2::AnimationSceneManager::animationService(uint64_t a1, unint64_t a2)
{
  uint64_t result = re::HashTable<unsigned long long,re::Function<void ()(void)>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(a1 + 160, a2);
  if (result) {
    return *(void *)result;
  }
  return result;
}

void re::ecs2::AnimationSceneManager::updateAnimationsForScene(re::ecs2::AnimationSceneManager *this, const re::ecs2::Scene *a2, float a3)
{
  __int16 v4 = (re::AnimationManager **)re::HashTable<unsigned long long,re::Function<void ()(void)>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)this + 160, (unint64_t)a2);
  if (v4)
  {
    float v5 = v4;
    float v6 = *v4;
    uint64_t v7 = 112;
    do
    {
      int v8 = *(_DWORD *)((char *)v6 + v7);
      if (v8) {
        break;
      }
      BOOL v9 = v7 == 176;
      v7 += 64;
    }
    while (!v9);
    if (v8)
    {
      re::AnimationManager::update(v6, a3);
      uint64_t v10 = *v5;
      re::AnimationManager::applyAnimations(v10);
    }
  }
}

void *re::ecs2::AnimationSceneManager::setTaskOptions(void *result, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  *((unsigned char *)result + re::DynamicArray<re::TraceEntry>::deinit((uint64_t)this + 272) = *(unsigned char *)(a2 + 8);
  result[33] = v2;
  uint64_t v3 = result[31];
  if (v3)
  {
    unint64_t v5 = 0;
    uint64_t v6 = (uint64_t)(result + 26);
    do
    {
      uint64_t v7 = (void **)re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::operator[](v6, v5);
      uint64_t result = re::ecs2::System::setTaskOptions(*v7, (uint64_t *)a2);
      ++v5;
    }
    while (v3 != v5);
  }
  return result;
}

void re::ecs2::AnimationSceneManager::registerSystem(re::ecs2::AnimationSceneManager *this, re::ecs2::System *a2)
{
  unint64_t v4 = *((void *)this + 31);
  unint64_t v5 = *((void *)this + 27);
  if (v4 + 1 > 8 * v5)
  {
    re::BucketArray<re::TimelineGroupBuilder *,8ul>::setBucketsCapacity((void *)this + 26, (v4 + 8) >> 3);
    unint64_t v5 = *((void *)this + 27);
  }
  if (v5 <= v4 >> 3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*((unsigned char *)this + 224)) {
    uint64_t v6 = (char *)this + 232;
  }
  else {
    uint64_t v6 = (char *)*((void *)this + 30);
  }
  uint64_t v7 = *(void *)&v6[8 * (v4 >> 3)];
  ++*((void *)this + 31);
  ++*((_DWORD *)this + 64);
  *(void *)(v7 + 8 * (v4 & 7)) = a2;
  re::ecs2::System::setTaskOptions(a2, (uint64_t *)this + 33);
  re::ecs2::AnimationSceneManager::updateScheduling(this);
}

void re::ecs2::AnimationSceneManager::updateScheduling(re::ecs2::AnimationSceneManager *this)
{
  unint64_t v1 = *((void *)this + 4);
  int v2 = *((_DWORD *)this + 10);
  if (v1 < 0xB)
  {
    if (v2)
    {
      unint64_t v4 = (uint64_t *)((char *)this + 48);
      if (v1)
      {
LABEL_6:
        uint64_t v5 = 0;
        uint64_t v6 = 8 * v1;
        do
        {
          uint64_t v7 = *v4++;
          v5 |= v7;
          v6 -= 8;
        }
        while (v6);
        BOOL v8 = v5 != 0;
        goto LABEL_19;
      }
    }
    else
    {
      unint64_t v4 = (uint64_t *)*((void *)this + 7);
      if (v1) {
        goto LABEL_6;
      }
    }
    BOOL v8 = 0;
    goto LABEL_19;
  }
  if (v2) {
    uint64_t v3 = (uint64_t *)((char *)this + 48);
  }
  else {
    uint64_t v3 = (uint64_t *)*((void *)this + 7);
  }
  uint64_t v9 = 8 * v1 - 8;
  do
  {
    uint64_t v10 = *v3++;
    BOOL v8 = v10 != 0;
    if (v10) {
      BOOL v11 = 1;
    }
    else {
      BOOL v11 = v9 == 0;
    }
    v9 -= 8;
  }
  while (!v11);
LABEL_19:
  uint64_t v12 = *((void *)this + 31);
  if (v12)
  {
    unint64_t v13 = 0;
    uint64_t v14 = (char *)this + 208;
    do
    {
      uint64_t v15 = (re::ecs2::System **)re::BucketArray<re::ecs2::System *,8ul>::operator[]((uint64_t)v14, v13);
      unsigned int v16 = *v15;
      if (v8 != (*((unsigned char *)*v15 + 64) != 0))
      {
        re::ecs2::System::setTaskEnabled(*v15, v8);
        if (v8)
        {
          uint64_t v17 = *((void *)v16 + 5);
          if (v17)
          {
            long long v18 = (re::Scheduler *)(*(uint64_t (**)(uint64_t))(*(void *)v17 + 80))(v17);
            if (v18)
            {
              unint64_t v19 = *((void *)v16 + 12);
              if (*((void *)v18 + 5) <= v19) {
                return;
              }
              re::Scheduler::resetTaskCurrentTime(v18, v19);
            }
          }
        }
      }
      ++v13;
    }
    while (v12 != v13);
  }
}

void re::ecs2::AnimationSceneManager::registerScene(re::ecs2::AnimationSceneManager *this, unint64_t a2)
{
  v30[4] = *MEMORY[0x263EF8340];
  unint64_t v26 = a2;
  unint64_t v4 = re::globalAllocators(this);
  uint64_t v5 = (re::AnimationManager *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4[2] + 32))(v4[2], 512, 8);
  re::AnimationManager::AnimationManager(v5);
  void v30[3] = (uint64_t)v30;
  v29[3] = v29;
  v30[0] = (uint64_t)&unk_26E6F9D70;
  uint64_t v28 = v6;
  v29[0] = &unk_26E6F9D70;
  std::__function::__value_func<void ()(re::AnimationManager *)>::~__value_func[abi:nn180100](v30);
  unint64_t v7 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
  unint64_t v8 = v7 ^ (v7 >> 31);
  if (*((void *)this + 20))
  {
    unint64_t v9 = v8 % *((unsigned int *)this + 46);
    uint64_t v10 = *(unsigned int *)(*((void *)this + 21) + 4 * v9);
    if (v10 != 0x7FFFFFFF)
    {
      uint64_t v11 = *((void *)this + 22);
      if (*(void *)(v11 + (v10 << 6) + 16) == a2)
      {
LABEL_6:
        unint64_t v12 = v11 + (v10 << 6);
        goto LABEL_9;
      }
      while (1)
      {
        uint64_t v10 = *(_DWORD *)(v11 + (v10 << 6) + 8) & 0x7FFFFFFF;
        if (v10 == 0x7FFFFFFF) {
          break;
        }
        if (*(void *)(v11 + (v10 << 6) + 16) == a2) {
          goto LABEL_6;
        }
      }
    }
  }
  else
  {
    LODWORD(v9) = 0;
  }
  unsigned int v13 = re::HashTable<re::ecs2::Scene const*,std::unique_ptr<re::AnimationManager,std::function<void ()(re::AnimationManager*)>>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::addAsMove((uint64_t)this + 160, v9, v8, &v26, &v28);
  ++*((_DWORD *)this + 50);
  unint64_t v12 = *((void *)this + 22) + ((unint64_t)v13 << 6);
LABEL_9:
  uint64_t v14 = (re::AnimationManager **)(v12 + 24);
  std::unique_ptr<re::AnimationManager,std::function<void ()(re::AnimationManager*)>>::~unique_ptr[abi:nn180100](&v28);
  re::AnimationManager::init(*v14, 0, 0);
  uint64_t v15 = *((void *)this + 36);
  *((void *)this + 36) = 0;
  int v16 = *((_DWORD *)this + 74);
  if (v16)
  {
    uint64_t v17 = (uint64_t *)((char *)this + 304);
    if (!v15) {
      goto LABEL_16;
    }
  }
  else
  {
    uint64_t v17 = (uint64_t *)*((void *)this + 39);
    if (!v15) {
      goto LABEL_16;
    }
  }
  uint64_t v18 = 40 * v15;
  do
  {
    uint64_t v17 = (uint64_t *)(std::unique_ptr<re::AnimationManager,std::function<void ()(re::AnimationManager*)>>::~unique_ptr[abi:nn180100](v17)
                    + 40);
    v18 -= 40;
  }
  while (v18);
  int v16 = *((_DWORD *)this + 74);
LABEL_16:
  *((_DWORD *)this + 74) = v16 + 2;
  unint64_t v19 = *v14;
  v30[0] = (uint64_t)*v14;
  uint64_t v20 = *((void *)this + 17);
  if (v20)
  {
    uint64_t v21 = v20 - 1;
    uint64_t v22 = *(void *)(*((void *)this + 19) + 8 * v21);
    uint64_t v28 = v22;
    *((void *)this + 17) = v21;
    ++*((_DWORD *)this + 36);
    uint64_t v23 = (char *)this + 72;
    BOOL v24 = &v28;
  }
  else
  {
    uint64_t v22 = *((void *)this + 8);
    uint64_t v27 = v22;
    uint64_t v28 = 0;
    if (((v22 + 1) & 0x3F) != 0) {
      unint64_t v25 = ((unint64_t)(v22 + 1) >> 6) + 1;
    }
    else {
      unint64_t v25 = (unint64_t)(v22 + 1) >> 6;
    }
    *((void *)this + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v22 + 1;
    re::DynamicOverflowArray<unsigned long long,2ul>::resize((re::ecs2::AnimationSceneManager *)((char *)this + 24), v25, &v28);
    uint64_t v23 = (char *)this + 72;
    BOOL v24 = &v27;
  }
  re::HashTable<re::AnimationManager *,unsigned long,re::Hash<re::AnimationManager *>,re::EqualTo<re::AnimationManager *>,true,false>::addNew((uint64_t)v23, v30, v24);
  *((void *)v19 + 5) = (char *)this + 8;
  *((void *)v19 + 6) = v22;
  (*(void (**)(char *, void, uint64_t))(*((void *)this + 1) + 16))((char *)this + 8, *((unsigned __int8 *)v19 + 56), v22);
  re::ecs2::AnimationSceneManager::updateScheduling(this);
}

void re::ecs2::AnimationSceneManager::unregisterScene(re::ecs2::AnimationSceneManager *this, const re::ecs2::Scene *a2)
{
  unint64_t v4 = (uint64_t *)re::HashTable<unsigned long long,re::Function<void ()(void)>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)this + 160, (unint64_t)a2);
  if (!v4) {
    return;
  }
  uint64_t v5 = v4;
  unint64_t v6 = *v4;
  *(void *)(v6 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *(void *)(v6 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
  if (!*((void *)this + 9))
  {
    unint64_t v12 = *(void *)(*((void *)this + 11) + 0xFFFFFFFF8);
    goto LABEL_6;
  }
  unint64_t v7 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (v6 ^ (v6 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v6 ^ (v6 >> 30))) >> 27));
  unint64_t v8 = (v7 ^ (v7 >> 31)) % *((unsigned int *)this + 24);
  uint64_t v10 = *((void *)this + 10);
  uint64_t v9 = *((void *)this + 11);
  uint64_t v11 = *(unsigned int *)(v10 + 4 * v8);
  if (v11 == 0x7FFFFFFF)
  {
    unint64_t v12 = *(void *)(v9 + 0xFFFFFFFF8);
LABEL_6:
    unint64_t v51 = v12;
    goto LABEL_22;
  }
  uint64_t v13 = v9 + 32 * v11;
  uint64_t v14 = *(void *)(v13 + 16);
  if (v14 == v6)
  {
    unint64_t v12 = *(void *)(v13 + 24);
    unint64_t v51 = v12;
  }
  else
  {
    uint64_t v15 = *(unsigned int *)(v10 + 4 * v8);
    while (1)
    {
      uint64_t v15 = *(_DWORD *)(v9 + 32 * v15 + 8) & 0x7FFFFFFF;
      if (v15 == 0x7FFFFFFF) {
        break;
      }
      if (*(void *)(v9 + 32 * v15 + 16) == v6) {
        goto LABEL_14;
      }
    }
    uint64_t v15 = 0x7FFFFFFFLL;
LABEL_14:
    unint64_t v12 = *(void *)(v9 + 32 * v15 + 24);
    unint64_t v51 = v12;
    if (v14 != v6)
    {
      while (1)
      {
        unsigned int v16 = v11;
        uint64_t v11 = *(_DWORD *)(v9 + 32 * v11 + 8) & 0x7FFFFFFF;
        if (v11 == 0x7FFFFFFF) {
          goto LABEL_22;
        }
        uint64_t v17 = v9 + 32 * v11;
        if (*(void *)(v17 + 16) == v6)
        {
          *(_DWORD *)(v9 + 32 * v16 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = *(_DWORD *)(v9 + 32 * v16 + 8) & 0x80000000 | *(_DWORD *)(v17 + 8) & 0x7FFFFFFF;
          goto LABEL_19;
        }
      }
    }
  }
  *(_DWORD *)(v10 + 4 * vre::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = *(_DWORD *)(v9 + 32 * v11 + 8) & 0x7FFFFFFF;
LABEL_19:
  uint64_t v18 = *((void *)this + 11);
  uint64_t v19 = v18 + 32 * v11;
  int v22 = *(_DWORD *)(v19 + 8);
  uint64_t v21 = (int *)(v19 + 8);
  int v20 = v22;
  if (v22 < 0)
  {
    *uint64_t v21 = v20 & 0x7FFFFFFF;
    uint64_t v18 = *((void *)this + 11);
    int v20 = *(_DWORD *)(v18 + 32 * v11 + 8);
  }
  int v23 = *((_DWORD *)this + 28);
  *(_DWORD *)(v18 + 32 * v11 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = *((_DWORD *)this + 27) | v20 & 0x80000000;
  --*((_DWORD *)this + 25);
  *((_DWORD *)this + 27) = v11;
  *((_DWORD *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 28) = v23 + 1;
LABEL_22:
  re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)this + 24, v12);
  BOOL v24 = (_anonymous_namespace_ *)re::DynamicArray<unsigned long>::add((void *)this + 15, &v51);
  if (!*((void *)this + 35))
  {
    unint64_t v30 = *((void *)this + 36) + 1;
    re::DynamicOverflowArray<std::unique_ptr<re::AnimationManager,std::function<void ()(re::AnimationManager*)>>,4ul>::setCapacity((uint64_t *)this + 35, v30);
    int v31 = *((_DWORD *)this + 74) + 2;
    *((_DWORD *)this + 74) = v31;
    if ((v31 & 1) == 0) {
      goto LABEL_31;
    }
LABEL_28:
    uint64_t v32 = (char *)this + 304;
    goto LABEL_32;
  }
  unint64_t v25 = *((void *)this + 36);
  int v26 = *((_DWORD *)this + 74);
  if ((v26 & 1) == 0)
  {
    unint64_t v27 = *((void *)this + 38);
    if (v25 >= v27)
    {
      unint64_t v28 = v25 + 1;
      if (v27 < v28)
      {
        unint64_t v29 = 2 * v27;
        goto LABEL_45;
      }
    }
    goto LABEL_30;
  }
  unint64_t v28 = v25 + 1;
  if (v28 < 5)
  {
LABEL_30:
    if ((v26 & 1) == 0) {
      goto LABEL_31;
    }
    goto LABEL_28;
  }
  unint64_t v29 = 8;
LABEL_45:
  if (v29 <= v28) {
    unint64_t v50 = v28;
  }
  else {
    unint64_t v50 = v29;
  }
  re::DynamicOverflowArray<std::unique_ptr<re::AnimationManager,std::function<void ()(re::AnimationManager*)>>,4ul>::setCapacity((uint64_t *)this + 35, v50);
  if (*((_DWORD *)this + 74)) {
    goto LABEL_28;
  }
LABEL_31:
  uint64_t v32 = (char *)*((void *)this + 39);
LABEL_32:
  char v33 = &v32[40 * *((void *)this + 36)];
  uint64_t v34 = *v5;
  *uint64_t v5 = 0;
  *(void *)char v33 = v34;
  std::__function::__value_func<void ()(re::AnimationManager *)>::__value_func[abi:nn180100]((uint64_t)(v33 + 8), (uint64_t)(v5 + 1));
  ++*((void *)this + 36);
  *((_DWORD *)this + 74) += 2;
  if (*((void *)this + 20))
  {
    unint64_t v35 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * ((unint64_t)a2 ^ ((unint64_t)a2 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                            * ((unint64_t)a2 ^ ((unint64_t)a2 >> 30))) >> 27));
    unint64_t v36 = (v35 ^ (v35 >> 31)) % *((unsigned int *)this + 46);
    uint64_t v37 = *((void *)this + 21);
    uint64_t v38 = *(unsigned int *)(v37 + 4 * v36);
    if (v38 != 0x7FFFFFFF)
    {
      uint64_t v39 = *((void *)this + 22);
      uint64_t v40 = v39 + (v38 << 6);
      if (*(const re::ecs2::Scene **)(v40 + 16) == a2)
      {
        *(_DWORD *)(v37 + 4 * v36) = *(_DWORD *)(v40 + 8) & 0x7FFFFFFF;
LABEL_39:
        uint64_t v44 = *((void *)this + 22);
        uint64_t v45 = v44 + (v38 << 6);
        int v48 = *(_DWORD *)(v45 + 8);
        uint64_t v47 = (int *)(v45 + 8);
        int v46 = v48;
        if (v48 < 0)
        {
          *uint64_t v47 = v46 & 0x7FFFFFFF;
          std::unique_ptr<re::AnimationManager,std::function<void ()(re::AnimationManager*)>>::~unique_ptr[abi:nn180100]((uint64_t *)(v44 + (v38 << 6) + 24));
          uint64_t v44 = *((void *)this + 22);
          int v46 = *(_DWORD *)(v44 + (v38 << 6) + 8);
        }
        int v49 = *((_DWORD *)this + 50);
        *(_DWORD *)(v44 + (v38 << 6) + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = *((_DWORD *)this + 49) | v46 & 0x80000000;
        --*((_DWORD *)this + 47);
        *((_DWORD *)this + 49) = v38;
        *((_DWORD *)this + 5ArcSharedObject::ArcSharedObject(this, 0) = v49 + 1;
      }
      else
      {
        while (1)
        {
          unsigned int v41 = v38;
          int v42 = *(_DWORD *)(v39 + (v38 << 6) + 8);
          uint64_t v38 = v42 & 0x7FFFFFFF;
          if ((v42 & 0x7FFFFFFF) == 0x7FFFFFFF) {
            break;
          }
          uint64_t v43 = v39 + (v38 << 6);
          if (*(const re::ecs2::Scene **)(v43 + 16) == a2)
          {
            *(_DWORD *)(v39 + ((unint64_t)v41 << 6) + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = *(_DWORD *)(v39 + ((unint64_t)v41 << 6) + 8) & 0x80000000 | *(_DWORD *)(v43 + 8) & 0x7FFFFFFF;
            goto LABEL_39;
          }
        }
      }
    }
  }
  re::ecs2::AnimationSceneManager::updateScheduling(this);
}

void re::HashTable<re::AnimationManager *,unsigned long,re::Hash<re::AnimationManager *>,re::EqualTo<re::AnimationManager *>,true,false>::addNew(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  unint64_t v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  unint64_t v9 = *(void *)a1;
  if (*(void *)a1)
  {
    unint64_t v9 = v8 % *(unsigned int *)(a1 + 24);
    uint64_t v10 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v9);
    if (v10 != 0x7FFFFFFF)
    {
      uint64_t v16 = *(void *)(a1 + 16);
      if (*(void *)(v16 + 32 * v10 + 16) == v6) {
        return;
      }
      while (1)
      {
        uint64_t v10 = *(_DWORD *)(v16 + 32 * v10 + 8) & 0x7FFFFFFF;
        if (v10 == 0x7FFFFFFF) {
          break;
        }
        if (*(void *)(v16 + 32 * v10 + 16) == v6) {
          return;
        }
      }
    }
  }
  uint64_t v11 = *(unsigned int *)(a1 + 36);
  if (v11 == 0x7FFFFFFF)
  {
    uint64_t v11 = *(unsigned int *)(a1 + 32);
    int v12 = v11;
    if (v11 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned long long,re::ecs2::Scene const*,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      LODWORD(v9) = v8 % *(unsigned int *)(a1 + 24);
      int v12 = *(_DWORD *)(a1 + 32);
      uint64_t v6 = *a2;
    }
    *(_DWORD *)(a1 + 32) = v12 + 1;
    uint64_t v13 = *(void *)(a1 + 16);
    int v14 = *(_DWORD *)(v13 + 32 * v11 + 8);
  }
  else
  {
    uint64_t v13 = *(void *)(a1 + 16);
    int v14 = *(_DWORD *)(v13 + 32 * v11 + 8);
    *(_DWORD *)(a1 + 36) = v14 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v13 + 32 * v11 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v14 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + 32 * v11 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 32 * v11 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * v9);
  *(void *)(*(void *)(a1 + 16) + 32 * v11) = v8;
  *(void *)(*(void *)(a1 + 16) + 32 * v11 + 16) = v6;
  uint64_t v15 = *(void *)(a1 + 8);
  *(void *)(*(void *)(a1 + 16) + 32 * v11 + 24) = *a3;
  *(_DWORD *)(v15 + 4 * v9) = v11;
  ++*(_DWORD *)(a1 + 28);
  ++*(_DWORD *)(a1 + 40);
}

void re::ecs2::AnimationSceneManager::AnimationScenesSchedulingDelegate::setSchedulingEnabled(re::ecs2::AnimationSceneManager::AnimationScenesSchedulingDelegate *this, int a2, unint64_t a3)
{
  unint64_t v4 = (char *)this + 16;
  if (a2) {
    re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4, a3);
  }
  else {
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)v4, a3);
  }
  uint64_t v5 = (re::ecs2::AnimationSceneManager *)*((void *)this + 1);
  re::ecs2::AnimationSceneManager::updateScheduling(v5);
}

void re::ecs2::AnimationSceneManager::AnimationScenesSchedulingDelegate::~AnimationScenesSchedulingDelegate(re::ecs2::AnimationSceneManager::AnimationScenesSchedulingDelegate *this)
{
  re::ecs2::AnimationSceneManager::AnimationScenesSchedulingDelegate::~AnimationScenesSchedulingDelegate(this);
  JUMPOUT(0x237DBCBD0);
}

{
  char *v2;

  *(void *)this = &unk_26E6F9C98;
  int v2 = (char *)this + 16;
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 112);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 8);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)v2);
}

void re::ecs2::AnimationSceneManager::~AnimationSceneManager(re::ecs2::AnimationSceneManager *this)
{
  re::ecs2::AnimationSceneManager::~AnimationSceneManager(this);
  JUMPOUT(0x237DBCBD0);
}

{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t i;

  *(void *)this = &unk_26E6F9CE8;
  if (*((void *)this + 35))
  {
    int v2 = *((void *)this + 36);
    if (v2)
    {
      if (*((unsigned char *)this + 296)) {
        uint64_t v3 = (uint64_t *)((char *)this + 304);
      }
      else {
        uint64_t v3 = (uint64_t *)*((void *)this + 39);
      }
      unint64_t v4 = 40 * v2;
      do
      {
        uint64_t v3 = (uint64_t *)(std::unique_ptr<re::AnimationManager,std::function<void ()(re::AnimationManager*)>>::~unique_ptr[abi:nn180100](v3)
                       + 40);
        v4 -= 40;
      }
      while (v4);
    }
    uint64_t v5 = *((_DWORD *)this + 74);
    if ((v5 & 1) == 0)
    {
      (*(void (**)(void, void))(**((void **)this + 35) + 40))(*((void *)this + 35), *((void *)this + 39));
      uint64_t v5 = *((_DWORD *)this + 74);
    }
    *((void *)this + 35) = 0;
    *((void *)this + 36) = 0;
    *((_DWORD *)this + 74) = (v5 | 1) + 2;
  }
  uint64_t v6 = *((void *)this + 31);
  if (v6)
  {
    for (unint64_t i = 0; i != v6; ++i)
      re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::operator[]((uint64_t)this + 208, i);
  }
  while (*((void *)this + 27))
    re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)this + 26);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 208);
  *((void *)this + 31) = 0;
  ++*((_DWORD *)this + 64);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 208);
  re::HashTable<re::ecs2::Scene const*,std::unique_ptr<re::AnimationManager,std::function<void ()(re::AnimationManager*)>>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 20);
  re::ecs2::AnimationSceneManager::AnimationScenesSchedulingDelegate::~AnimationScenesSchedulingDelegate((re::ecs2::AnimationSceneManager *)((char *)this + 8));
}

uint64_t re::ecs2::AnimationSceneManager::taskOptions(re::ecs2::AnimationSceneManager *this)
{
  return (uint64_t)this + 264;
}

uint64_t re::ecs2::AnimationSceneManager::unregisterSystem(uint64_t this, re::ecs2::System *a2)
{
  unint64_t v2 = *(void *)(this + 248);
  if (v2)
  {
    uint64_t v4 = this;
    unint64_t v5 = 0;
    uint64_t v6 = this + 208;
    while (1)
    {
      this = re::BucketArray<re::ecs2::System *,8ul>::operator[](v6, v5);
      if (*(re::ecs2::System **)this == a2) {
        break;
      }
      if (v2 == ++v5)
      {
        unint64_t v5 = v2;
        break;
      }
    }
    unint64_t v8 = *(void *)(v4 + 248);
    if (v5 != v8)
    {
      if (v8 <= v5)
      {
        re::internal::assertLog((re::internal *)6, v7, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "removeAt", 848, v5, v8);
        this = _os_crash();
        __break(1u);
      }
      else
      {
        unint64_t v9 = v8 - 1;
        if (v8 - 1 > v5)
        {
          uint64_t v10 = *(void *)re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::operator[](v6, v9);
          *(void *)re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::operator[](v6, v5) = v10;
          unint64_t v9 = *(void *)(v4 + 248) - 1;
        }
        this = re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::operator[](v6, v9);
        --*(void *)(v4 + 248);
        ++*(_DWORD *)(v4 + 256);
      }
    }
  }
  return this;
}

double re::HashTable<re::ecs2::Scene const*,std::unique_ptr<re::AnimationManager,std::function<void ()(re::AnimationManager*)>>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    unint64_t v3 = *((unsigned int *)a1 + 8);
    if (v3)
    {
      uint64_t v4 = 0;
      for (unint64_t i = 0; i < v3; ++i)
      {
        uint64_t v6 = a1[2] + v4;
        int v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v7 & 0x7FFFFFFF;
          std::unique_ptr<re::AnimationManager,std::function<void ()(re::AnimationManager*)>>::~unique_ptr[abi:nn180100]((uint64_t *)(v6 + 24));
          unint64_t v3 = *((unsigned int *)a1 + 8);
        }
        v4 += 64;
      }
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

void _ZNSt3__110__function6__funcIZN2re20makeDefaultUniquePtrINS2_16AnimationManagerEJEEENS_10unique_ptrIT_NS_8functionIFvPS6_EEEEEDpOT0_EUlPS4_E_NS_9allocatorISG_EEFvSF_EED0Ev()
{
}

void *_ZNKSt3__110__function6__funcIZN2re20makeDefaultUniquePtrINS2_16AnimationManagerEJEEENS_10unique_ptrIT_NS_8functionIFvPS6_EEEEEDpOT0_EUlPS4_E_NS_9allocatorISG_EEFvSF_EE7__cloneEv()
{
  double result = operator new(0x10uLL);
  *double result = &unk_26E6F9D70;
  return result;
}

void _ZNKSt3__110__function6__funcIZN2re20makeDefaultUniquePtrINS2_16AnimationManagerEJEEENS_10unique_ptrIT_NS_8functionIFvPS6_EEEEEDpOT0_EUlPS4_E_NS_9allocatorISG_EEFvSF_EE7__cloneEPNS0_6__baseISJ_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_26E6F9D70;
}

re *_ZNSt3__110__function6__funcIZN2re20makeDefaultUniquePtrINS2_16AnimationManagerEJEEENS_10unique_ptrIT_NS_8functionIFvPS6_EEEEEDpOT0_EUlPS4_E_NS_9allocatorISG_EEFvSF_EEclEOSF_(uint64_t a1, re::AnimationManager **a2)
{
  return re::internal::destroyPersistent<re::AnimationManager>((re *)"operator()", 36, *a2);
}

uint64_t _ZNKSt3__110__function6__funcIZN2re20makeDefaultUniquePtrINS2_16AnimationManagerEJEEENS_10unique_ptrIT_NS_8functionIFvPS6_EEEEEDpOT0_EUlPS4_E_NS_9allocatorISG_EEFvSF_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN2re20makeDefaultUniquePtrINS2_16AnimationManagerEJEEENS_10unique_ptrIT_NS_8functionIFvPS6_EEEEEDpOT0_EUlPS4_E_NS_9allocatorISG_EEFvSF_EE11target_typeEv()
{
}

uint64_t std::__function::__value_func<void ()(re::AnimationManager *)>::__value_func[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = v3;
      *(void *)(a2 + 24) = 0;
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__value_func<void ()(re::AnimationManager *)>::~__value_func[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::unique_ptr<re::AnimationManager,std::function<void ()(re::AnimationManager*)>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (!v2) {
    goto LABEL_4;
  }
  uint64_t v3 = a1[4];
  uint64_t v6 = v2;
  if (v3)
  {
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v3 + 48))(v3, &v6);
LABEL_4:
    std::__function::__value_func<void ()(re::AnimationManager *)>::~__value_func[abi:nn180100](a1 + 1);
    return (uint64_t)a1;
  }
  unint64_t v5 = std::__throw_bad_function_call[abi:nn180100]();
  return re::HashTable<re::ecs2::Scene const*,std::unique_ptr<re::AnimationManager,std::function<void ()(re::AnimationManager*)>>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::addAsMove(v5);
}

uint64_t re::HashTable<re::ecs2::Scene const*,std::unique_ptr<re::AnimationManager,std::function<void ()(re::AnimationManager*)>>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, uint64_t *a5)
{
  uint64_t v10 = *(unsigned int *)(a1 + 36);
  if (v10 == 0x7FFFFFFF)
  {
    uint64_t v10 = *(unsigned int *)(a1 + 32);
    int v11 = v10;
    if (v10 == *(_DWORD *)(a1 + 24))
    {
      int v12 = *(_DWORD *)(a1 + 28);
      signed int v13 = 2 * v12;
      uint64_t v14 = *(void *)a1;
      if (*(void *)a1)
      {
        if (v13) {
          BOOL v15 = v10 == v13;
        }
        else {
          BOOL v15 = 1;
        }
        if (!v15 && (v12 & 0x80000000) == 0)
        {
          memset(v29, 0, 36);
          *(void *)&v29[36] = 0x7FFFFFFFLL;
          re::HashTable<unsigned long long,re::Function<void ()(void)>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v29, v14, v13);
          long long v16 = *(_OWORD *)v29;
          *(_OWORD *)unint64_t v29 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v16;
          uint64_t v17 = *(void *)&v29[16];
          uint64_t v18 = *(void *)(a1 + 16);
          *(void *)&v29[16] = v18;
          *(void *)(a1 + 16) = v17;
          long long v20 = *(_OWORD *)&v29[24];
          *(_OWORD *)&v29[24] = *(_OWORD *)(a1 + 24);
          unsigned int v19 = *(_DWORD *)&v29[32];
          *(_OWORD *)(a1 + 24) = v20;
          uint64_t v21 = v19;
          if (v19)
          {
            uint64_t v22 = v18 + 16;
            do
            {
              if ((*(_DWORD *)(v22 - 8) & 0x80000000) != 0) {
                re::HashTable<re::ecs2::Scene const*,std::unique_ptr<re::AnimationManager,std::function<void ()(re::AnimationManager*)>>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::addAsMove(a1);
              }
              v22 += 64;
              --v21;
            }
            while (v21);
          }
          re::HashTable<re::ecs2::Scene const*,std::unique_ptr<re::AnimationManager,std::function<void ()(re::AnimationManager*)>>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)v29);
        }
      }
      else
      {
        if (v13) {
          signed int v25 = 2 * v12;
        }
        else {
          signed int v25 = 3;
        }
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v11 + 1;
    uint64_t v23 = *(void *)(a1 + 16);
    int v24 = *(_DWORD *)(v23 + (v10 << 6) + 8);
  }
  else
  {
    uint64_t v23 = *(void *)(a1 + 16);
    int v24 = *(_DWORD *)(v23 + (v10 << 6) + 8);
    *(_DWORD *)(a1 + 36) = v24 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v23 + (v10 << 6) + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v24 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + (v10 << 6) + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = *(_DWORD *)(*(void *)(a1 + 16) + (v10 << 6) + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + (v10 << 6)) = a3;
  *(void *)(*(void *)(a1 + 16) + (v10 << 6) + 16) = *a4;
  uint64_t v26 = *(void *)(a1 + 16) + (v10 << 6);
  uint64_t v27 = *a5;
  *a5 = 0;
  *(void *)(v26 + 24) = v27;
  std::__function::__value_func<void ()(re::AnimationManager *)>::__value_func[abi:nn180100](v26 + 32, (uint64_t)(a5 + 1));
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return v10;
}

uint64_t re::DynamicOverflowArray<std::unique_ptr<re::AnimationManager,std::function<void ()(re::AnimationManager*)>>,4ul>::setCapacity(uint64_t *a1, unint64_t a2)
{
  uint64_t result = *a1;
  if (a2 && !result)
  {
    uint64_t result = re::DynamicOverflowArray<std::unique_ptr<re::AnimationManager,std::function<void ()(re::AnimationManager*)>>,4ul>::setCapacity(a1, a2);
    int v6 = *((_DWORD *)a1 + 4) + 2;
LABEL_4:
    *((_DWORD *)a1 + 4) = v6;
    return result;
  }
  int v7 = *((_DWORD *)a1 + 4);
  if (v7) {
    uint64_t v8 = 4;
  }
  else {
    uint64_t v8 = a1[3];
  }
  if (v8 != a2)
  {
    unint64_t v9 = a1[1];
    if (v9 <= a2 && (a2 > 4 || (v7 & 1) == 0))
    {
      if (a2 < 5)
      {
        uint64_t v14 = a1[4];
        if (v7) {
          BOOL v15 = a1 + 3;
        }
        else {
          BOOL v15 = (void *)a1[4];
        }
        if (v9)
        {
          unint64_t v16 = 0;
          uint64_t v17 = 40 * v9;
          do
          {
            uint64_t v18 = v15[v16 / 8];
            v15[v16 / 8] = 0;
            a1[v16 / 8 + 3] = v18;
            std::__function::__value_func<void ()(re::AnimationManager *)>::__value_func[abi:nn180100]((uint64_t)&a1[v16 / 8 + 4], (uint64_t)&v15[v16 / 8 + 1]);
            std::unique_ptr<re::AnimationManager,std::function<void ()(re::AnimationManager*)>>::~unique_ptr[abi:nn180100](&v15[v16 / 8]);
            v16 += 40;
          }
          while (v17 != v16);
          uint64_t result = *a1;
        }
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 40))(result, v14);
        int v6 = *((_DWORD *)a1 + 4) | 1;
        goto LABEL_4;
      }
      if (is_mul_ok(a2, 0x28uLL))
      {
        uint64_t v2 = 40 * a2;
        uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)result + 32))(result, 40 * a2, 8);
        if (result)
        {
          uint64_t v11 = result;
          int v12 = *((_DWORD *)a1 + 4);
          if (v12) {
            signed int v13 = a1 + 3;
          }
          else {
            signed int v13 = (uint64_t *)a1[4];
          }
          uint64_t v19 = a1[1];
          if (v19)
          {
            uint64_t v20 = result + 8;
            uint64_t v21 = 40 * v19;
            uint64_t v22 = v13;
            do
            {
              uint64_t v23 = *v13;
              *uint64_t v22 = 0;
              v22 += 5;
              *(void *)(v20 - re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v23;
              std::__function::__value_func<void ()(re::AnimationManager *)>::__value_func[abi:nn180100](v20, (uint64_t)(v13 + 1));
              uint64_t result = std::unique_ptr<re::AnimationManager,std::function<void ()(re::AnimationManager*)>>::~unique_ptr[abi:nn180100](v13);
              v20 += 40;
              signed int v13 = v22;
              v21 -= 40;
            }
            while (v21);
            int v12 = *((_DWORD *)a1 + 4);
          }
          if ((v12 & 1) == 0)
          {
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)*a1 + 40))(*a1, a1[4]);
            int v12 = *((_DWORD *)a1 + 4);
          }
          *((_DWORD *)a1 + 4) = v12 & 0xFFFFFFFE;
          a1[3] = a2;
          a1[4] = v11;
          return result;
        }
      }
      else
      {
        re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicOverflowArray<T, N>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 646, 40, a2);
        _os_crash();
        __break(1u);
      }
      re::internal::assertLog((re::internal *)6, v10, "assertion failure: '%s' (%s:line %i) DynamicOverflowArray<T, N> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 650, v2, *(void *)(*a1 + 8));
      uint64_t result = _os_crash();
      __break(1u);
    }
  }
  return result;
}

uint64_t re::BucketArray<re::ecs2::System *,8ul>::operator[](uint64_t a1, unint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1018, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(void *)(a1 + 8) <= a2 >> 3) {
    goto LABEL_8;
  }
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v3 = a1 + 24;
  }
  else {
    uint64_t v3 = *(void *)(a1 + 32);
  }
  return *(void *)(v3 + 8 * (a2 >> 3)) + 8 * (a2 & 7);
}

re::ecs2::TransformComponent *re::ecs2::TransformComponent::TransformComponent(re::ecs2::TransformComponent *this)
{
  v8[4] = *(re::BindNode **)MEMORY[0x263EF8340];
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)(v2 + 16) = 0;
  *(unsigned char *)(v2 + 24) = 0;
  *(void *)uint64_t v2 = &unk_26E6F9E00;
  *(void *)(v2 + 32) = 0x3F8000003F800000;
  *(void *)(v2 + 4ArcSharedObject::ArcSharedObject(this, 0) = 1065353216;
  *(void *)(v2 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
  *(void *)(v2 + 56) = 0x3F80000000000000;
  uint64_t v3 = v2 + 88;
  *(void *)(v2 + 12ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *(unsigned char *)(v2 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 28) = 0;
  *(_OWORD *)(v2 + 136) = 0u;
  *(_OWORD *)(v2 + 152) = 0u;
  *(_OWORD *)(v2 + 16re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0u;
  *(_OWORD *)(v2 + 184) = 0u;
  *(void *)(v2 + 20ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 8ArcSharedObject::ArcSharedObject(this, 0) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_DWORD *)(v2 + 112) = 0;
  re::makeEntityBindNodeForComponent((re *)v2, (uint64_t)v8);
  v5[0] = (uint64_t)"Transform.transform";
  v5[1] = 19;
  re::BindNode::bindPointWithOverride<re::GenericSRT<float>>(v8, v5, (uint64_t)&v6);
  *((void *)this + 1ArcSharedObject::ArcSharedObject(this, 0) = v6;
  re::DynamicArray<re::RigDataValue>::operator=(v3, (uint64_t)v7);
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v7);
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v7);
  re::BindNode::deinit((re::BindNode *)v8);
  return this;
}

void re::ecs2::TransformComponent::worldMatrix4x4F(re::ecs2::TransformComponent *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  if (*((void *)this + 2))
  {
    if (a2)
    {
      if (*((unsigned char *)this + 128)) {
        re::ecs2::TransformComponent::anchoredAnimatedWorldTransform((float32x4_t *)this, (float32x4_t *)a3);
      }
      else {
        re::ecs2::TransformComponent::deactivatedAnchoredAnimatedWorldTransform(*((void **)this + 2), (long long *)a3);
      }
    }
    else
    {
      re::ecs2::TransformComponent::anchoredUnanimatedWorldTransform(*((uint64x2_t **)this + 2), (long long *)a3);
    }
  }
  else
  {
    float v3 = *((float *)this + 12);
    float v4 = *((float *)this + 13);
    float v5 = v3 + v3;
    float v6 = v4 + v4;
    float v7 = *((float *)this + 14);
    float v8 = *((float *)this + 15);
    float v9 = v7 + v7;
    float v10 = v3 * (float)(v3 + v3);
    float v11 = v4 * (float)(v4 + v4);
    float v12 = v7 * (float)(v7 + v7);
    float v13 = v5 * v4;
    float v14 = v5 * v7;
    float v15 = v6 * v7;
    float v16 = v5 * v8;
    float v17 = v6 * v8;
    float v18 = v9 * v8;
    v19.i32[3] = 0;
    v19.f32[0] = 1.0 - (float)(v11 + v12);
    v19.f32[1] = v13 + v18;
    v20.i32[3] = 0;
    v19.f32[2] = v14 - v17;
    v21.i32[3] = 0;
    v21.f32[0] = v13 - v18;
    v21.f32[1] = 1.0 - (float)(v10 + v12);
    v21.f32[2] = v15 + v16;
    v20.f32[0] = v14 + v17;
    v20.f32[1] = v15 - v16;
    v20.f32[2] = 1.0 - (float)(v10 + v11);
    float32x4_t v22 = *((float32x4_t *)this + 2);
    *(float32x4_t *)a3 = vmulq_n_f32(v19, v22.f32[0]);
    *(float32x4_t *)(a3 + 16) = vmulq_n_f32(v21, *(float *)vshrq_n_u64((uint64x2_t)v22, 0x20uLL).i32);
    long long v23 = *((_OWORD *)this + 4);
    HIDWORD(v23) = 1.0;
    *(float32x4_t *)(a3 + 32) = vmulq_laneq_f32(v20, v22, 2);
    *(_OWORD *)(a3 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v23;
  }
}

void *re::ecs2::TransformComponent::deactivatedAnchoredAnimatedWorldTransform@<X0>(void *result@<X0>, long long *a2@<X8>)
{
  long long v2 = xmmword_23435FBB0;
  long long v3 = xmmword_23435FD80;
  long long v4 = xmmword_23435FD60;
  long long v5 = xmmword_23435FD50;
  while (result)
  {
    float v6 = (float32x4_t *)result[30];
    if (v6)
    {
      uint64_t v7 = 0;
      float v8 = v6[3].f32[0];
      float v9 = v6[3].f32[1];
      float v10 = v6[3].f32[2];
      float v11 = v6[3].f32[3];
      float32x4_t v12 = v6[2];
      float32x4_t v28 = v6[4];
      float v13 = v8 + v8;
      float v14 = v9 + v9;
      float v15 = v8 * (float)(v8 + v8);
      float v16 = v9 * (float)(v9 + v9);
      float v17 = v10 * (float)(v10 + v10);
      float v18 = v13 * v9;
      float v19 = (float)(v10 + v10) * v11;
      v20.i32[3] = 0;
      v20.f32[0] = 1.0 - (float)(v16 + v17);
      v20.f32[1] = v18 + v19;
      float v21 = v13 * v10;
      float v22 = v14 * v10;
      float v23 = v13 * v11;
      float v24 = v14 * v11;
      v20.f32[2] = v21 - v24;
      v25.i32[3] = 0;
      v25.f32[0] = v18 - v19;
      v25.f32[1] = 1.0 - (float)(v15 + v17);
      v25.f32[2] = v22 + v23;
      v26.i32[3] = 0;
      v26.f32[0] = v21 + v24;
      v26.f32[1] = v22 - v23;
      v26.f32[2] = 1.0 - (float)(v15 + v16);
      float32x4_t v27 = vmulq_n_f32(v20, v12.f32[0]);
      v28.i32[3] = 1.0;
      float32x4_t v29 = vmulq_n_f32(v25, *(float *)vshrq_n_u64((uint64x2_t)v12, 0x20uLL).i32);
      long long v41 = v5;
      long long v42 = v4;
      float32x4_t v30 = vmulq_laneq_f32(v26, v12, 2);
      long long v43 = v3;
      long long v44 = v2;
      do
      {
        *(long long *)((char *)&v45 + v7) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v27, COERCE_FLOAT(*(long long *)((char *)&v41 + v7))), v29, *(float32x2_t *)((char *)&v41 + v7), 1), v30, *(float32x4_t *)((char *)&v41 + v7), 2), v28, *(float32x4_t *)((char *)&v41 + v7), 3);
        v7 += 16;
      }
      while (v7 != 64);
      long long v5 = v45;
      long long v4 = v46;
      long long v3 = v47;
      long long v2 = v48;
    }
    int v31 = (float32x4_t *)result[16];
    if (v31)
    {
      uint64_t v32 = 0;
      float32x4_t v33 = v31[3];
      float32x4_t v34 = v31[4];
      float32x4_t v35 = v31[5];
      float32x4_t v36 = v31[6];
      long long v41 = v5;
      long long v42 = v4;
      long long v43 = v3;
      long long v44 = v2;
      do
      {
        *(long long *)((char *)&v45 + v32) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v33, COERCE_FLOAT(*(long long *)((char *)&v41 + v32))), v34, *(float32x2_t *)((char *)&v41 + v32), 1), v35, *(float32x4_t *)((char *)&v41 + v32), 2), v36, *(float32x4_t *)((char *)&v41 + v32), 3);
        v32 += 16;
      }
      while (v32 != 64);
      long long v37 = v46;
      long long v38 = v47;
      long long v39 = v48;
      *a2 = v45;
      a2[1] = v37;
      a2[2] = v38;
      a2[3] = v39;
    }
    else
    {
      uint64_t v40 = result[3];
      if (v40)
      {
        if ((*(unsigned char *)(v40 + 288) & 0x80) != 0) {
          uint64_t result = 0;
        }
        else {
          uint64_t result = (void *)result[3];
        }
      }
      else
      {
        uint64_t result = 0;
      }
    }
    if (v31) {
      return result;
    }
  }
  *a2 = v5;
  a2[1] = v4;
  a2[2] = v3;
  a2[3] = v2;
  return result;
}

float32x4_t re::ecs2::TransformComponent::anchoredAnimatedWorldTransform@<Q0>(float32x4_t *this@<X0>, float32x4_t *a2@<X8>)
{
  long long v4 = re::ecs2::TransformComponent::unanchoredAnimatedWorldTransform(this);
  long long v5 = (float32x4_t *)this[8].i64[1];
  if (v5)
  {
    uint64_t v6 = 0;
    float32x4_t result = v5[3];
    float32x4_t v8 = v5[4];
    float32x4_t v9 = v5[5];
    float32x4_t v10 = v5[6];
    float32x4_t v11 = v4[1];
    float32x4_t v12 = v4[2];
    float32x4_t v13 = v4[3];
    v19[0] = *v4;
    v19[1] = v11;
    v19[2] = v12;
    _OWORD v19[3] = v13;
    do
    {
      v20[v6] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(result, COERCE_FLOAT(v19[v6])), v8, *(float32x2_t *)&v19[v6], 1), v9, (float32x4_t)v19[v6], 2), v10, (float32x4_t)v19[v6], 3);
      ++v6;
    }
    while (v6 != 4);
    result.i64[0] = *(void *)&v20[0];
    float32x4_t v14 = (float32x4_t)v20[1];
    float32x4_t v15 = (float32x4_t)v20[2];
    float32x4_t v16 = (float32x4_t)v20[3];
    *a2 = (float32x4_t)v20[0];
    a2[1] = v14;
    a2[2] = v15;
    a2[3] = v16;
  }
  else
  {
    float32x4_t v17 = v4[1];
    *a2 = *v4;
    a2[1] = v17;
    float32x4_t result = v4[2];
    float32x4_t v18 = v4[3];
    a2[2] = result;
    a2[3] = v18;
  }
  return result;
}

uint64x2_t *re::ecs2::TransformComponent::anchoredUnanimatedWorldTransform@<X0>(uint64x2_t *this@<X0>, long long *a2@<X8>)
{
  long long v3 = this;
  long long v5 = xmmword_23435FBB0;
  long long v6 = xmmword_23435FD80;
  long long v7 = xmmword_23435FD60;
  long long v8 = xmmword_23435FD50;
  while (v3)
  {
    uint64_t v9 = v3[15].i64[0];
    if (v9)
    {
      long long v46 = v6;
      long long v47 = v5;
      long long v44 = v8;
      long long v45 = v7;
      this = (uint64x2_t *)re::BindPoint::baseValueUntyped((re::BindPoint *)(v9 + 80));
      uint64_t v10 = 0;
      float v11 = *(float *)this[1].i32;
      float v12 = *(float *)&this[1].i32[1];
      float v13 = *(float *)&this[1].i32[2];
      float v14 = *(float *)&this[1].i32[3];
      float32x4_t v15 = *(float32x4_t *)this;
      float32x4_t v31 = (float32x4_t)this[2];
      float v16 = v11 + v11;
      float v17 = v12 + v12;
      float v18 = v11 * (float)(v11 + v11);
      float v19 = v12 * (float)(v12 + v12);
      float v20 = v13 * (float)(v13 + v13);
      float v21 = v16 * v12;
      float v22 = (float)(v13 + v13) * v14;
      v23.i32[3] = 0;
      v23.f32[0] = 1.0 - (float)(v19 + v20);
      v23.f32[1] = v21 + v22;
      float v24 = v16 * v13;
      float v25 = v17 * v13;
      float v26 = v16 * v14;
      float v27 = v17 * v14;
      v23.f32[2] = v24 - v27;
      v28.i32[3] = 0;
      v28.f32[0] = v21 - v22;
      v28.f32[1] = 1.0 - (float)(v18 + v20);
      v28.f32[2] = v25 + v26;
      v29.i32[3] = 0;
      v29.f32[0] = v24 + v27;
      v29.f32[1] = v25 - v26;
      v29.f32[2] = 1.0 - (float)(v18 + v19);
      float32x4_t v30 = vmulq_n_f32(v23, COERCE_FLOAT(*this));
      v31.i32[3] = 1.0;
      float32x4_t v32 = vmulq_n_f32(v28, *(float *)vshrq_n_u64(*this, 0x20uLL).i32);
      long long v48 = v44;
      long long v49 = v45;
      float32x4_t v33 = vmulq_laneq_f32(v29, v15, 2);
      long long v50 = v46;
      long long v51 = v47;
      do
      {
        *(long long *)((char *)&v52 + v1ArcSharedObject::ArcSharedObject(this, 0) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v30, COERCE_FLOAT(*(long long *)((char *)&v48 + v10))), v32, *(float32x2_t *)((char *)&v48 + v10), 1), v33, *(float32x4_t *)((char *)&v48 + v10), 2), v31, *(float32x4_t *)((char *)&v48 + v10), 3);
        v10 += 16;
      }
      while (v10 != 64);
      long long v8 = v52;
      long long v7 = v53;
      long long v6 = v54;
      long long v5 = v55;
    }
    float32x4_t v34 = (float32x4_t *)v3[8].i64[0];
    if (v34)
    {
      uint64_t v35 = 0;
      float32x4_t v36 = v34[3];
      float32x4_t v37 = v34[4];
      float32x4_t v38 = v34[5];
      float32x4_t v39 = v34[6];
      long long v48 = v8;
      long long v49 = v7;
      long long v50 = v6;
      long long v51 = v5;
      do
      {
        *(long long *)((char *)&v52 + v35) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v36, COERCE_FLOAT(*(long long *)((char *)&v48 + v35))), v37, *(float32x2_t *)((char *)&v48 + v35), 1), v38, *(float32x4_t *)((char *)&v48 + v35), 2), v39, *(float32x4_t *)((char *)&v48 + v35), 3);
        v35 += 16;
      }
      while (v35 != 64);
      long long v40 = v53;
      long long v41 = v54;
      long long v42 = v55;
      *a2 = v52;
      a2[1] = v40;
      a2[2] = v41;
      a2[3] = v42;
    }
    else
    {
      uint64_t v43 = v3[1].i64[1];
      if (v43)
      {
        if ((*(unsigned char *)(v43 + 288) & 0x80) != 0) {
          long long v3 = 0;
        }
        else {
          long long v3 = (uint64x2_t *)v3[1].i64[1];
        }
      }
      else
      {
        long long v3 = 0;
      }
    }
    if (v34) {
      return this;
    }
  }
  *a2 = v8;
  a2[1] = v7;
  a2[2] = v6;
  a2[3] = v5;
  return this;
}

void re::ecs2::TransformComponent::parentWorldMatrix4x4F(re::ecs2::TransformComponent *this@<X0>, const re::ecs2::Entity *a2@<X1>, _OWORD *a3@<X8>)
{
  if (!this)
  {
    *a3 = xmmword_23435FD50;
    a3[1] = xmmword_23435FD60;
    long long v5 = xmmword_23435FD80;
    long long v6 = xmmword_23435FBB0;
    goto LABEL_5;
  }
  long long v3 = (_OWORD *)*((void *)this + 16);
  if (v3)
  {
    long long v4 = v3[4];
    *a3 = v3[3];
    a3[1] = v4;
    long long v5 = v3[5];
    long long v6 = v3[6];
LABEL_5:
    a3[2] = v5;
    a3[3] = v6;
    return;
  }
  uint64_t v7 = *((void *)this + 3);
  if (v7)
  {
    if ((*(unsigned char *)(v7 + 288) & 0x80) != 0) {
      long long v8 = 0;
    }
    else {
      long long v8 = (re::ecs2::TransformComponent **)*((void *)this + 3);
    }
  }
  else
  {
    long long v8 = 0;
  }
  re::ecs2::TransformComponent::worldMatrix4x4F(v8, a2, a3);
}

__n128 re::ecs2::TransformComponent::worldSRT@<Q0>(re::ecs2::TransformComponent **this@<X0>, const re::ecs2::Entity *a2@<X1>, uint64_t a3@<X8>)
{
  re::ecs2::TransformComponent::worldMatrix4x4F(this, a2, &v36);
  __n128 v35 = v39;
  float32x4_t v4 = vmulq_f32(v36, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8(v38, v38, 0xCuLL), v38, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v37, v37), (int8x16_t)v37, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v38, (int32x4_t)v38), v38, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v37, (int8x16_t)v37, 0xCuLL), (int8x16_t)v37, 8uLL)));
  BOOL v5 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v4, 2), vaddq_f32(v4, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v4.f32, 1))).f32[0] <= 0.0;
  float v6 = -1.0;
  if (!v5) {
    float v6 = 1.0;
  }
  float32x4_t v7 = vmulq_f32(v36, v36);
  float32x4_t v8 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v7, 2), vaddq_f32(v7, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v7.f32, 1)));
  v8.f32[0] = sqrtf(v8.f32[0]);
  float32x4_t v9 = vmulq_f32((float32x4_t)v37, (float32x4_t)v37);
  float32x4_t v10 = vmulq_f32((float32x4_t)v38, (float32x4_t)v38);
  v8.i32[1] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v9, 2), vaddq_f32(v9, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.f32, 1))).f32[0]);
  v8.i32[2] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v10, 2), vaddq_f32(v10, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 1))).f32[0]);
  long long v34 = (__int128)vmulq_n_f32(v8, v6);
  float32x4_t v11 = vdivq_f32(v36, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v34, 0));
  float32x4_t v12 = vdivq_f32((float32x4_t)v37, (float32x4_t)vdupq_lane_s32((int32x2_t)(v34 >> 32), 0));
  float32x4_t v13 = vdivq_f32((float32x4_t)v38, (float32x4_t)vdupq_laneq_s32((int32x4_t)v34, 2));
  int32x4_t v14 = (int32x4_t)vmulq_f32(v11, v11);
  v14.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v14, 2), vadd_f32(*(float32x2_t *)v14.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v14.i8, 1))).u32[0];
  *(float32x2_t *)v8.f32 = vrsqrte_f32((float32x2_t)v14.u32[0]);
  *(float32x2_t *)v8.f32 = vmul_f32(*(float32x2_t *)v8.f32, vrsqrts_f32((float32x2_t)v14.u32[0], vmul_f32(*(float32x2_t *)v8.f32, *(float32x2_t *)v8.f32)));
  v40.columns[0] = (simd_float3)vmulq_n_f32(v11, vmul_f32(*(float32x2_t *)v8.f32, vrsqrts_f32((float32x2_t)v14.u32[0], vmul_f32(*(float32x2_t *)v8.f32, *(float32x2_t *)v8.f32))).f32[0]);
  float32x4_t v15 = vmulq_f32((float32x4_t)v40.columns[0], v12);
  float32x4_t v16 = vmulq_f32((float32x4_t)v40.columns[0], (float32x4_t)v40.columns[0]);
  float32x4_t v17 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v16, 2), vaddq_f32(v16, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v16.f32, 1)));
  float32x4_t v18 = vsubq_f32(v12, vmulq_n_f32((float32x4_t)v40.columns[0], vdivq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v15, 2), vaddq_f32(v15, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v15.f32, 1))), v17).f32[0]));
  int32x4_t v19 = (int32x4_t)vmulq_f32(v18, v18);
  v19.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v19, 2), vadd_f32(*(float32x2_t *)v19.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v19.i8, 1))).u32[0];
  *(float32x2_t *)v9.f32 = vrsqrte_f32((float32x2_t)v19.u32[0]);
  *(float32x2_t *)v9.f32 = vmul_f32(*(float32x2_t *)v9.f32, vrsqrts_f32((float32x2_t)v19.u32[0], vmul_f32(*(float32x2_t *)v9.f32, *(float32x2_t *)v9.f32)));
  v19.i32[0] = vmul_f32(*(float32x2_t *)v9.f32, vrsqrts_f32((float32x2_t)v19.u32[0], vmul_f32(*(float32x2_t *)v9.f32, *(float32x2_t *)v9.f32))).u32[0];
  float32x4_t v20 = vmulq_f32((float32x4_t)v40.columns[0], v13);
  v40.columns[1] = (simd_float3)vmulq_n_f32(v18, *(float *)v19.i32);
  float32x4_t v21 = vsubq_f32(v13, vmulq_n_f32((float32x4_t)v40.columns[0], vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v20, 2), vaddq_f32(v20, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v20.f32, 1))).f32[0]/ v17.f32[0]));
  float32x4_t v22 = vmulq_f32(v13, (float32x4_t)v40.columns[1]);
  float32x4_t v23 = vmulq_f32((float32x4_t)v40.columns[1], (float32x4_t)v40.columns[1]);
  float32x4_t v24 = vsubq_f32(v21, vmulq_n_f32((float32x4_t)v40.columns[1], vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v22, 2), vaddq_f32(v22, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v22.f32, 1))).f32[0]/ vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v23, 2), vaddq_f32(v23, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v23.f32, 1))).f32[0]));
  int32x4_t v25 = (int32x4_t)vmulq_f32(v24, v24);
  v25.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v25, 2), vadd_f32(*(float32x2_t *)v25.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v25.i8, 1))).u32[0];
  *(float32x2_t *)v23.f32 = vrsqrte_f32((float32x2_t)v25.u32[0]);
  *(float32x2_t *)v23.f32 = vmul_f32(*(float32x2_t *)v23.f32, vrsqrts_f32((float32x2_t)v25.u32[0], vmul_f32(*(float32x2_t *)v23.f32, *(float32x2_t *)v23.f32)));
  v40.columns[2] = (simd_float3)vmulq_n_f32(v24, vmul_f32(*(float32x2_t *)v23.f32, vrsqrts_f32((float32x2_t)v25.u32[0], vmul_f32(*(float32x2_t *)v23.f32, *(float32x2_t *)v23.f32))).f32[0]);
  *(double *)v26.i64 = simd_quaternion(v40);
  uint64_t v27 = v26.i64[1];
  float32x4_t v28 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v26.f32, 1);
  unsigned __int8 v29 = vmovn_s32((int32x4_t)vmvnq_s8(vorrq_s8((int8x16_t)vcgtq_f32(v26, v28), (int8x16_t)vcgeq_f32(v28, v26)))).u8[0];
  *(int32x2_t *)v28.f32 = vrev64_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v26, (int8x16_t)v26, 8uLL));
  *(int8x8_t *)v28.f32 = vmvn_s8(vorr_s8((int8x8_t)vcltz_f32(*(float32x2_t *)v28.f32), (int8x8_t)vcgez_f32(*(float32x2_t *)v28.f32)));
  char v30 = v29 | v28.i8[4] | v28.i8[0];
  BOOL v31 = (v30 & 1) == 0;
  if (v30) {
    uint64_t v32 = 0;
  }
  else {
    uint64_t v32 = v26.i64[0];
  }
  *(_OWORD *)a3 = v34;
  if (!v31) {
    uint64_t v27 = 0x3F80000000000000;
  }
  *(void *)(a3 + 16) = v32;
  *(void *)(a3 + 24) = v27;
  __n128 result = v35;
  *(__n128 *)(a3 + 32) = v35;
  return result;
}

double re::ecs2::TransformComponent::worldOrientation(re::ecs2::TransformComponent **this, const re::ecs2::Entity *a2)
{
  re::ecs2::TransformComponent::worldMatrix4x4F(this, a2, &v18);
  int32x4_t v2 = (int32x4_t)vmulq_f32(v18, v18);
  v2.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v2, 2), vadd_f32(*(float32x2_t *)v2.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v2.i8, 1))).u32[0];
  float32x2_t v3 = vrsqrte_f32((float32x2_t)v2.u32[0]);
  float32x2_t v4 = vmul_f32(v3, vrsqrts_f32((float32x2_t)v2.u32[0], vmul_f32(v3, v3)));
  v21.columns[0] = (simd_float3)vmulq_n_f32(v18, vmul_f32(v4, vrsqrts_f32((float32x2_t)v2.u32[0], vmul_f32(v4, v4))).f32[0]);
  float32x4_t v5 = vmulq_f32(v19, (float32x4_t)v21.columns[0]);
  float32x4_t v6 = vmulq_f32((float32x4_t)v21.columns[0], (float32x4_t)v21.columns[0]);
  v6.f32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v6, 2), vaddq_f32(v6, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v6.f32, 1))).f32[0];
  float32x4_t v7 = vsubq_f32(v19, vmulq_n_f32((float32x4_t)v21.columns[0], vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v5, 2), vaddq_f32(v5, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v5.f32, 1))).f32[0]/ v6.f32[0]));
  int32x4_t v8 = (int32x4_t)vmulq_f32(v7, v7);
  v8.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v8, 2), vadd_f32(*(float32x2_t *)v8.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v8.i8, 1))).u32[0];
  float32x2_t v9 = vrsqrte_f32((float32x2_t)v8.u32[0]);
  float32x2_t v10 = vmul_f32(v9, vrsqrts_f32((float32x2_t)v8.u32[0], vmul_f32(v9, v9)));
  v8.i32[0] = vmul_f32(v10, vrsqrts_f32((float32x2_t)v8.u32[0], vmul_f32(v10, v10))).u32[0];
  float32x4_t v11 = vmulq_f32(v20, (float32x4_t)v21.columns[0]);
  v21.columns[1] = (simd_float3)vmulq_n_f32(v7, *(float *)v8.i32);
  float32x4_t v12 = vsubq_f32(v20, vmulq_n_f32((float32x4_t)v21.columns[0], vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v11, 2), vaddq_f32(v11, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 1))).f32[0]/ v6.f32[0]));
  float32x4_t v13 = vmulq_f32(v20, (float32x4_t)v21.columns[1]);
  float32x4_t v14 = vmulq_f32((float32x4_t)v21.columns[1], (float32x4_t)v21.columns[1]);
  float32x4_t v15 = vsubq_f32(v12, vmulq_n_f32((float32x4_t)v21.columns[1], vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 2), vaddq_f32(v13, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 1))).f32[0]/ vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v14, 2), vaddq_f32(v14, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v14.f32, 1))).f32[0]));
  int32x4_t v16 = (int32x4_t)vmulq_f32(v15, v15);
  v16.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v16, 2), vadd_f32(*(float32x2_t *)v16.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v16.i8, 1))).u32[0];
  *(float32x2_t *)v14.f32 = vrsqrte_f32((float32x2_t)v16.u32[0]);
  *(float32x2_t *)v14.f32 = vmul_f32(*(float32x2_t *)v14.f32, vrsqrts_f32((float32x2_t)v16.u32[0], vmul_f32(*(float32x2_t *)v14.f32, *(float32x2_t *)v14.f32)));
  v21.columns[2] = (simd_float3)vmulq_n_f32(v15, vmul_f32(*(float32x2_t *)v14.f32, vrsqrts_f32((float32x2_t)v16.u32[0], vmul_f32(*(float32x2_t *)v14.f32, *(float32x2_t *)v14.f32))).f32[0]);
  return simd_quaternion(v21);
}

double re::ecs2::TransformComponent::worldScale(re::ecs2::TransformComponent **this, const re::ecs2::Entity *a2)
{
  re::ecs2::TransformComponent::worldMatrix4x4F(this, a2, &v10);
  float32x4_t v2 = vmulq_f32(v10, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8(v12, v12, 0xCuLL), v12, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v11, v11), (int8x16_t)v11, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v12, (int32x4_t)v12), v12, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v11, (int8x16_t)v11, 0xCuLL), (int8x16_t)v11, 8uLL)));
  BOOL v3 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v2, 2), vaddq_f32(v2, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v2.f32, 1))).f32[0] <= 0.0;
  float v4 = -1.0;
  if (!v3) {
    float v4 = 1.0;
  }
  float32x4_t v5 = vmulq_f32(v10, v10);
  float32x4_t v6 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v5, 2), vaddq_f32(v5, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v5.f32, 1)));
  float32x4_t v7 = vmulq_f32((float32x4_t)v11, (float32x4_t)v11);
  v6.f32[0] = sqrtf(v6.f32[0]);
  float32x4_t v8 = vmulq_f32((float32x4_t)v12, (float32x4_t)v12);
  v6.i32[1] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v7, 2), vaddq_f32(v7, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v7.f32, 1))).f32[0]);
  v6.i32[2] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v8, 2), vaddq_f32(v8, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v8.f32, 1))).f32[0]);
  *(void *)&double result = vmulq_n_f32(v6, v4).u64[0];
  return result;
}

void re::ecs2::TransformComponent::setWorldSRT(uint64_t a1, uint64_t a2, re::ecs2::Entity *a3)
{
  float32x4_t v5 = *(re::ecs2::TransformComponent **)(a1 + 16);
  if (v5)
  {
    char v6 = (char)a3;
    re::ecs2::TransformComponent::parentWorldMatrix4x4F(v5, a3, &v54);
    simd_float4x4 v56 = __invert_f4(v54);
    float32x4_t v8 = (float32x4_t)v56.columns[0];
    float32x4_t v9 = (float32x4_t)v56.columns[1];
    float32x4_t v10 = (float32x4_t)v56.columns[2];
    float32x4_t v47 = (float32x4_t)v56.columns[3];
    v56.columns[0] = (simd_float4)vmulq_f32((float32x4_t)v56.columns[0], vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v10, (int8x16_t)v10, 0xCuLL), (int8x16_t)v10, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v9, (int32x4_t)v9), (int8x16_t)v9, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v56.columns[2], (int32x4_t)v56.columns[2]), (int8x16_t)v56.columns[2], 0xCuLL), (float32x4_t)vextq_s8(vextq_s8(
                                                       (int8x16_t)v56.columns[1],
                                                       (int8x16_t)v56.columns[1],
                                                       0xCuLL),
                                                     (int8x16_t)v56.columns[1],
                                                     8uLL)));
    BOOL v11 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v56.columns[0], 2), vaddq_f32((float32x4_t)v56.columns[0], (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v56.columns[0].f32, 1))).f32[0] <= 0.0;
    float v12 = -1.0;
    if (!v11) {
      float v12 = 1.0;
    }
    float32x4_t v13 = vmulq_f32(v8, v8);
    v13.i32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 2), vaddq_f32(v13, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 1))).u32[0];
    float32x4_t v14 = vmulq_f32(v9, v9);
    v7.f32[0] = sqrtf(v13.f32[0]);
    float32x4_t v15 = vmulq_f32(v10, v10);
    v7.i32[1] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v14, 2), vaddq_f32(v14, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v14.f32, 1))).f32[0]);
    v7.i32[2] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v15, 2), vaddq_f32(v15, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v15.f32, 1))).f32[0]);
    float32x4_t v45 = *(float32x4_t *)a2;
    float32x4_t v46 = vmulq_n_f32(v7, v12);
    float32x2_t v16 = vrsqrte_f32((float32x2_t)v13.u32[0]);
    float32x2_t v17 = vmul_f32(v16, vrsqrts_f32((float32x2_t)v13.u32[0], vmul_f32(v16, v16)));
    float32x4_t v50 = v9;
    float32x4_t v52 = v8;
    v55.columns[0] = (simd_float3)vmulq_n_f32(v8, vmul_f32(v17, vrsqrts_f32((float32x2_t)v13.u32[0], vmul_f32(v17, v17))).f32[0]);
    float32x4_t v18 = vmulq_f32(v9, (float32x4_t)v55.columns[0]);
    float32x4_t v19 = vmulq_f32((float32x4_t)v55.columns[0], (float32x4_t)v55.columns[0]);
    v19.f32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v19, 2), vaddq_f32(v19, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v19.f32, 1))).f32[0];
    float32x4_t v20 = vsubq_f32(v9, vmulq_n_f32((float32x4_t)v55.columns[0], vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v18, 2), vaddq_f32(v18, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v18.f32, 1))).f32[0]/ v19.f32[0]));
    int32x4_t v21 = (int32x4_t)vmulq_f32(v20, v20);
    v21.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v21, 2), vadd_f32(*(float32x2_t *)v21.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v21.i8, 1))).u32[0];
    float32x2_t v22 = vrsqrte_f32((float32x2_t)v21.u32[0]);
    float32x2_t v23 = vmul_f32(v22, vrsqrts_f32((float32x2_t)v21.u32[0], vmul_f32(v22, v22)));
    v21.i32[0] = vmul_f32(v23, vrsqrts_f32((float32x2_t)v21.u32[0], vmul_f32(v23, v23))).u32[0];
    float32x4_t v24 = vmulq_f32(v10, (float32x4_t)v55.columns[0]);
    v55.columns[1] = (simd_float3)vmulq_n_f32(v20, *(float *)v21.i32);
    float32x4_t v25 = vsubq_f32(v10, vmulq_n_f32((float32x4_t)v55.columns[0], vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v24, 2), vaddq_f32(v24, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v24.f32, 1))).f32[0]/ v19.f32[0]));
    float32x4_t v48 = v10;
    float32x4_t v26 = vmulq_f32(v10, (float32x4_t)v55.columns[1]);
    float32x4_t v27 = vmulq_f32((float32x4_t)v55.columns[1], (float32x4_t)v55.columns[1]);
    float32x4_t v28 = vsubq_f32(v25, vmulq_n_f32((float32x4_t)v55.columns[1], vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v26, 2), vaddq_f32(v26, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v26.f32, 1))).f32[0]/ vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v27, 2), vaddq_f32(v27, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v27.f32, 1))).f32[0]));
    int32x4_t v29 = (int32x4_t)vmulq_f32(v28, v28);
    v29.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v29, 2), vadd_f32(*(float32x2_t *)v29.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v29.i8, 1))).u32[0];
    *(float32x2_t *)v27.f32 = vrsqrte_f32((float32x2_t)v29.u32[0]);
    *(float32x2_t *)v27.f32 = vmul_f32(*(float32x2_t *)v27.f32, vrsqrts_f32((float32x2_t)v29.u32[0], vmul_f32(*(float32x2_t *)v27.f32, *(float32x2_t *)v27.f32)));
    v55.columns[2] = (simd_float3)vmulq_n_f32(v28, vmul_f32(*(float32x2_t *)v27.f32, vrsqrts_f32((float32x2_t)v29.u32[0], vmul_f32(*(float32x2_t *)v27.f32, *(float32x2_t *)v27.f32))).f32[0]);
    *(double *)_Q0.i64 = simd_quaternion(v55);
    float32x4_t v33 = vmulq_f32(v45, v46);
    _Q2 = *(float32x4_t *)(a2 + 16);
    int8x16_t v35 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q2, (int32x4_t)_Q2), (int8x16_t)_Q2, 0xCuLL), vnegq_f32(_Q0)), _Q2, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q0, (int32x4_t)_Q0), (int8x16_t)_Q0, 0xCuLL));
    float32x4_t v41 = vmlaq_laneq_f32(vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v35, (int32x4_t)v35), v35, 0xCuLL), _Q2, _Q0, 3), _Q0, _Q2, 3);
    _Q2.i32[0] = _Q2.i32[3];
    __asm { FMLA            S1, S2, V0.S[3] }
    v41.i32[3] = _S1;
    float32x4_t v42 = vaddq_f32(v47, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v52, COERCE_FLOAT(*(_OWORD *)(a2 + 32))), v50, *(float32x2_t *)(a2 + 32), 1), v48, *(float32x4_t *)(a2 + 32), 2));
    float32x4_t v43 = vdivq_f32(v42, (float32x4_t)vdupq_laneq_s32((int32x4_t)v42, 3));
    if ((v6 & 1) != 0 || !*(void *)(a1 + 16))
    {
      *(float32x4_t *)(a1 + 32) = v33;
      *(float32x4_t *)(a1 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v41;
      *(float32x4_t *)(a1 + 64) = v43;
    }
    else
    {
      float32x4_t v49 = v43;
      float32x4_t v51 = v41;
      float32x4_t v53 = v33;
      long long v44 = (float32x4_t *)re::BindPoint::baseValueUntyped((re::BindPoint *)(a1 + 80));
      if (v44)
      {
        float32x4_t *v44 = v53;
        v44[1] = v51;
        uint64_t v44[2] = v49;
      }
    }
  }
  else
  {
    float32x4_t v31 = *(float32x4_t *)a2;
    long long v32 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 64) = v32;
    *(float32x4_t *)(a1 + 32) = v31;
  }
}

void re::ecs2::TransformComponent::setWorldPosition(void *a1, uint64_t a2, uint64_t a3)
{
  BOOL v3 = (re::ecs2::TransformComponent *)a1[2];
  if (v3)
  {
    v4.i64[0] = a2;
    v4.i64[1] = a3;
    float32x4_t v6 = v4;
    float32x4_t v5 = (float32x4_t *)re::BindPoint::baseValueUntyped((re::BindPoint *)(a1 + 10));
    re::ecs2::TransformComponent::parentWorldMatrix4x4F(v3, 0, &v7);
    simd_float4x4 v8 = __invert_f4(v7);
    v8.columns[0] = (simd_float4)vaddq_f32((float32x4_t)v8.columns[3], vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v8.columns[0], v6.f32[0]), (float32x4_t)v8.columns[1], *(float32x2_t *)v6.f32, 1), (float32x4_t)v8.columns[2], v6, 2));
    uint64_t v5[2] = vdivq_f32((float32x4_t)v8.columns[0], (float32x4_t)vdupq_laneq_s32((int32x4_t)v8.columns[0], 3));
  }
  else
  {
    a1[8] = a2;
    a1[9] = a3;
  }
}

void re::ecs2::TransformComponent::setWorldOrientation(void *a1, uint64_t a2, uint64_t a3)
{
  BOOL v3 = (re::ecs2::TransformComponent *)a1[2];
  if (v3)
  {
    v4.i64[0] = a2;
    v4.i64[1] = a3;
    float32x4_t v22 = v4;
    uint64_t v5 = re::BindPoint::baseValueUntyped((re::BindPoint *)(a1 + 10));
    re::ecs2::TransformComponent::parentWorldMatrix4x4F(v3, 0, &v23);
    simd_float4x4 v24 = __invert_f4(v23);
    v24.columns[3] = (simd_float4)vmulq_f32((float32x4_t)v24.columns[0], (float32x4_t)v24.columns[0]);
    v24.columns[3].i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32((int32x4_t)v24.columns[3], 2), vadd_f32(*(float32x2_t *)v24.columns[3].f32, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v24.columns[3].f32, 1))).u32[0];
    float32x2_t v6 = vrsqrte_f32((float32x2_t)v24.columns[3].u32[0]);
    float32x2_t v7 = vmul_f32(v6, vrsqrts_f32((float32x2_t)v24.columns[3].u32[0], vmul_f32(v6, v6)));
    v24.columns[0] = (simd_float4)vmulq_n_f32((float32x4_t)v24.columns[0], vmul_f32(v7, vrsqrts_f32((float32x2_t)v24.columns[3].u32[0], vmul_f32(v7, v7))).f32[0]);
    v24.columns[3] = (simd_float4)vmulq_f32((float32x4_t)v24.columns[1], (float32x4_t)v24.columns[0]);
    float32x4_t v8 = vmulq_f32((float32x4_t)v24.columns[0], (float32x4_t)v24.columns[0]);
    v8.f32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v8, 2), vaddq_f32(v8, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v8.f32, 1))).f32[0];
    v24.columns[1] = (simd_float4)vsubq_f32((float32x4_t)v24.columns[1], vmulq_n_f32((float32x4_t)v24.columns[0], vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v24.columns[3], 2), vaddq_f32((float32x4_t)v24.columns[3], (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v24.columns[3].f32, 1))).f32[0]/ v8.f32[0]));
    v24.columns[3] = (simd_float4)vmulq_f32((float32x4_t)v24.columns[1], (float32x4_t)v24.columns[1]);
    v24.columns[3].i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32((int32x4_t)v24.columns[3], 2), vadd_f32(*(float32x2_t *)v24.columns[3].f32, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v24.columns[3].f32, 1))).u32[0];
    float32x2_t v9 = vrsqrte_f32((float32x2_t)v24.columns[3].u32[0]);
    float32x2_t v10 = vmul_f32(v9, vrsqrts_f32((float32x2_t)v24.columns[3].u32[0], vmul_f32(v9, v9)));
    v24.columns[3].i32[0] = vmul_f32(v10, vrsqrts_f32((float32x2_t)v24.columns[3].u32[0], vmul_f32(v10, v10))).u32[0];
    float32x4_t v11 = vmulq_f32((float32x4_t)v24.columns[2], (float32x4_t)v24.columns[0]);
    v24.columns[1] = (simd_float4)vmulq_n_f32((float32x4_t)v24.columns[1], v24.columns[3].f32[0]);
    v24.columns[3] = (simd_float4)vsubq_f32((float32x4_t)v24.columns[2], vmulq_n_f32((float32x4_t)v24.columns[0], vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v11, 2), vaddq_f32(v11, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 1))).f32[0]/ v8.f32[0]));
    v24.columns[2] = (simd_float4)vmulq_f32((float32x4_t)v24.columns[2], (float32x4_t)v24.columns[1]);
    float32x4_t v12 = vmulq_f32((float32x4_t)v24.columns[1], (float32x4_t)v24.columns[1]);
    v24.columns[2] = (simd_float4)vsubq_f32((float32x4_t)v24.columns[3], vmulq_n_f32((float32x4_t)v24.columns[1], vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v24.columns[2], 2), vaddq_f32((float32x4_t)v24.columns[2], (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v24.columns[2].f32, 1))).f32[0]/ vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 2), vaddq_f32(v12, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v12.f32, 1))).f32[0]));
    v24.columns[3] = (simd_float4)vmulq_f32((float32x4_t)v24.columns[2], (float32x4_t)v24.columns[2]);
    v24.columns[3].i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32((int32x4_t)v24.columns[3], 2), vadd_f32(*(float32x2_t *)v24.columns[3].f32, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v24.columns[3].f32, 1))).u32[0];
    *(float32x2_t *)v12.f32 = vrsqrte_f32((float32x2_t)v24.columns[3].u32[0]);
    *(float32x2_t *)v12.f32 = vmul_f32(*(float32x2_t *)v12.f32, vrsqrts_f32((float32x2_t)v24.columns[3].u32[0], vmul_f32(*(float32x2_t *)v12.f32, *(float32x2_t *)v12.f32)));
    v24.columns[2] = (simd_float4)vmulq_n_f32((float32x4_t)v24.columns[2], vmul_f32(*(float32x2_t *)v12.f32, vrsqrts_f32((float32x2_t)v24.columns[3].u32[0], vmul_f32(*(float32x2_t *)v12.f32, *(float32x2_t *)v12.f32))).f32[0]);
    *(double *)_Q0.i64 = simd_quaternion(*(simd_float3x3 *)v24.columns[0].f32);
    _Q2 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v22, (int32x4_t)v22), (int8x16_t)v22, 0xCuLL), vnegq_f32(_Q0)), v22, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q0, (int32x4_t)_Q0), (int8x16_t)_Q0, 0xCuLL));
    float32x4_t v15 = vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q2, (int32x4_t)_Q2), _Q2, 0xCuLL), v22, _Q0, 3);
    _Q2.i32[0] = v22.i32[3];
    float32x4_t v16 = vmlaq_laneq_f32(v15, _Q0, v22, 3);
    __asm { FMLA            S3, S2, V0.S[3] }
    v16.i32[3] = _S3;
    *(float32x4_t *)(v5 + 16) = v16;
  }
  else
  {
    a1[6] = a2;
    a1[7] = a3;
  }
}

void re::ecs2::TransformComponent::setWorldScale(void *a1, uint64_t a2, uint64_t a3)
{
  BOOL v3 = (re::ecs2::TransformComponent *)a1[2];
  if (v3)
  {
    v4.i64[0] = a2;
    v4.i64[1] = a3;
    float32x4_t v8 = v4;
    uint64_t v5 = (float32x4_t *)re::BindPoint::baseValueUntyped((re::BindPoint *)(a1 + 10));
    re::ecs2::TransformComponent::parentWorldMatrix4x4F(v3, 0, &v9);
    simd_float4x4 v7 = __invert_f4(v9);
    v7.columns[3] = (simd_float4)vmulq_f32((float32x4_t)v7.columns[0], vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v7.columns[2], (int8x16_t)v7.columns[2], 0xCuLL), (int8x16_t)v7.columns[2], 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v7.columns[1], (int32x4_t)v7.columns[1]), (int8x16_t)v7.columns[1], 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v7.columns[2],
                                                                 (int32x4_t)v7.columns[2]),
                                                    (int8x16_t)v7.columns[2],
                                                    0xCuLL),
                                     (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v7.columns[1], (int8x16_t)v7.columns[1], 0xCuLL), (int8x16_t)v7.columns[1], 8uLL)));
    BOOL v6 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v7.columns[3], 2), vaddq_f32((float32x4_t)v7.columns[3], (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v7.columns[3].f32, 1))).f32[0] <= 0.0;
    v7.columns[3].i32[0] = -1.0;
    if (!v6) {
      v7.columns[3].f32[0] = 1.0;
    }
    v7.columns[0] = (simd_float4)vmulq_f32((float32x4_t)v7.columns[0], (float32x4_t)v7.columns[0]);
    v7.columns[0] = (simd_float4)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v7.columns[0], 2), vaddq_f32((float32x4_t)v7.columns[0], (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v7.columns[0].f32, 1)));
    v7.columns[0].f32[0] = sqrtf(v7.columns[0].f32[0]);
    v7.columns[1] = (simd_float4)vmulq_f32((float32x4_t)v7.columns[1], (float32x4_t)v7.columns[1]);
    v7.columns[2] = (simd_float4)vmulq_f32((float32x4_t)v7.columns[2], (float32x4_t)v7.columns[2]);
    v7.columns[0].i32[1] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v7.columns[1], 2), vaddq_f32((float32x4_t)v7.columns[1], (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v7.columns[1].f32, 1))).f32[0]);
    v7.columns[0].i32[2] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v7.columns[2], 2), vaddq_f32((float32x4_t)v7.columns[2], (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v7.columns[2].f32, 1))).f32[0]);
    *uint64_t v5 = vmulq_f32(vmulq_n_f32((float32x4_t)v7.columns[0], v7.columns[3].f32[0]), v8);
  }
  else
  {
    a1[4] = a2;
    a1[5] = a3;
  }
}

void re::ecs2::TransformComponent::worldMatrix4x4F(re::ecs2::TransformComponent **this@<X0>, const re::ecs2::Entity *a2@<X1>, _OWORD *a3@<X8>)
{
  if (this)
  {
    while (1)
    {
      if (this[30])
      {
        re::ecs2::TransformComponent::worldMatrix4x4F(this[30], (int)a2, (uint64_t)a3);
        return;
      }
      BOOL v3 = this[16];
      if (v3) {
        break;
      }
      this = (re::ecs2::TransformComponent **)this[3];
      if (!this || ((_BYTE)this[36] & 0x80) != 0) {
        goto LABEL_6;
      }
    }
    long long v6 = *((_OWORD *)v3 + 4);
    *a3 = *((_OWORD *)v3 + 3);
    a3[1] = v6;
    long long v4 = *((_OWORD *)v3 + 5);
    long long v5 = *((_OWORD *)v3 + 6);
  }
  else
  {
LABEL_6:
    *a3 = xmmword_23435FD50;
    a3[1] = xmmword_23435FD60;
    long long v4 = xmmword_23435FD80;
    long long v5 = xmmword_23435FBB0;
  }
  a3[2] = v4;
  a3[3] = v5;
}

uint64_t re::ecs2::TransformComponent::makeSyncInfo(re::ecs2::TransformComponent *this)
{
  uint64_t v1 = RESyncSyncableTypeInfoCreate();
  RESyncSyncableTypeInfoSetDebugName();
  RESyncSyncableTypeInfoSetReadSnapshotCb();
  RESyncSyncableTypeInfoSetWriteSnapshotCb();
  RESyncSyncableTypeInfoSetReadPayloadCb();
  RESyncSyncableTypeInfoSetReadPayloadDeltaCb();
  RESyncSyncableTypeInfoSetWritePayloadCb();
  RESyncSyncableTypeInfoSetWritePayloadDeltaCb();
  return v1;
}

BOOL ___ZN2re4ecs218TransformComponent12makeSyncInfoEv_block_invoke()
{
  return re::SRTNetworkSyncHelper::readSnapshot();
}

void ___ZN2re4ecs218TransformComponent12makeSyncInfoEv_block_invoke_2()
{
}

uint64_t ___ZN2re4ecs218TransformComponent12makeSyncInfoEv_block_invoke_3(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (RESyncObjectReadContextIsLocalSession())
  {
    uint64_t v5 = RESyncBitReaderDataPtr();
    uint64_t v6 = RESyncBitReaderBytesLeft();
    RESyncBitReaderSkipData();
    MEMORY[0x237DBB060](a3, v5, v6);
    return 1;
  }
  else
  {
    return re::SRTNetworkSyncHelper::read(a2, a3);
  }
}

uint64_t ___ZN2re4ecs218TransformComponent12makeSyncInfoEv_block_invoke_4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (RESyncObjectReadContextIsLocalSession())
  {
    uint64_t v7 = RESyncBitReaderDataPtr();
    uint64_t v8 = RESyncBitReaderBytesLeft();
    RESyncBitReaderSkipData();
    MEMORY[0x237DBB060](a4, v7, v8);
    return 1;
  }
  else
  {
    return re::SRTNetworkSyncHelper::readDelta(a2, a3, a4);
  }
}

BOOL ___ZN2re4ecs218TransformComponent12makeSyncInfoEv_block_invoke_5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (RESyncObjectWriteContextIsLocalSession())
  {
    RESyncBitReaderDataPtr();
    RESyncBitReaderBytesLeft();
    RESyncBitReaderSkipData();
    JUMPOUT(0x237DBB060);
  }
  return re::SRTNetworkSyncHelper::write(a2, a3);
}

BOOL ___ZN2re4ecs218TransformComponent12makeSyncInfoEv_block_invoke_6(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (RESyncObjectWriteContextIsLocalSession())
  {
    RESyncBitReaderDataPtr();
    RESyncBitReaderBytesLeft();
    RESyncBitReaderSkipData();
    JUMPOUT(0x237DBB060);
  }
  return re::SRTNetworkSyncHelper::writeDelta(a2, a3, a4);
}

float32x4_t *re::ecs2::TransformComponent::unanchoredAnimatedWorldTransform(float32x4_t *this)
{
  if (this[8].i8[0] == 1)
  {
    float v2 = this[3].f32[0];
    float v3 = this[3].f32[1];
    float v4 = v2 + v2;
    float v5 = v3 + v3;
    float v6 = this[3].f32[2];
    float v7 = this[3].f32[3];
    float v8 = v6 + v6;
    float v9 = v2 * (float)(v2 + v2);
    float v10 = v3 * (float)(v3 + v3);
    float v11 = v6 * (float)(v6 + v6);
    float v12 = v4 * v3;
    float v13 = v4 * v6;
    float v14 = v5 * v6;
    float v15 = v4 * v7;
    float v16 = v5 * v7;
    float v17 = v8 * v7;
    v18.i32[3] = 0;
    v18.f32[0] = 1.0 - (float)(v10 + v11);
    v18.f32[1] = v12 + v17;
    v18.f32[2] = v13 - v16;
    v19.i32[3] = 0;
    v20.i32[3] = 0;
    v20.f32[0] = v12 - v17;
    v20.f32[1] = 1.0 - (float)(v9 + v11);
    v20.f32[2] = v14 + v15;
    v19.f32[0] = v13 + v16;
    v19.f32[1] = v14 - v15;
    v19.f32[2] = 1.0 - (float)(v9 + v10);
    float32x4_t v21 = this[2];
    float32x4_t v22 = this[4];
    v22.i32[3] = 1.0;
    this[9] = vmulq_n_f32(v18, v21.f32[0]);
    this[10] = vmulq_n_f32(v20, *(float *)vshrq_n_u64((uint64x2_t)v21, 0x20uLL).i32);
    this[11] = vmulq_laneq_f32(v19, v21, 2);
    this[12] = v22;
    uint64_t v23 = this[1].i64[0];
    while (!*(void *)(v23 + 128))
    {
      uint64_t v23 = *(void *)(v23 + 24);
      if (!v23 || (*(unsigned char *)(v23 + 288) & 0x80) != 0) {
        break;
      }
      simd_float4x4 v24 = *(re::ecs2::TransformComponent **)(v23 + 240);
      if (v24)
      {
        float32x4_t v25 = (float32x4_t *)re::ecs2::TransformComponent::unanchoredAnimatedWorldTransform(v24);
        uint64_t v26 = 0;
        float32x4_t v27 = *v25;
        float32x4_t v28 = v25[1];
        float32x4_t v29 = v25[2];
        float32x4_t v30 = v25[3];
        float32x4_t v31 = this[10];
        float32x4_t v32 = this[11];
        float32x4_t v33 = this[12];
        v38[0] = this[9];
        v38[1] = v31;
        v38[2] = v32;
        v38[3] = v33;
        do
        {
          v39[v26] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v27, COERCE_FLOAT(v38[v26])), v28, *(float32x2_t *)&v38[v26], 1), v29, (float32x4_t)v38[v26], 2), v30, (float32x4_t)v38[v26], 3);
          ++v26;
        }
        while (v26 != 4);
        float32x4_t v34 = (float32x4_t)v39[1];
        float32x4_t v35 = (float32x4_t)v39[2];
        float32x4_t v36 = (float32x4_t)v39[3];
        this[9] = (float32x4_t)v39[0];
        this[10] = v34;
        this[11] = v35;
        this[12] = v36;
        break;
      }
    }
    this[8].i8[0] = 2;
  }
  return this + 9;
}

_anonymous_namespace_ *re::ecs2::TransformSystem::willAddSceneToECSService(_anonymous_namespace_ *this, re::EventBus **a2, const re::ecs2::AnchorComponent *a3)
{
  v62[8] = *MEMORY[0x263EF8340];
  uint64_t v57 = (re::ecs2::Scene *)a2;
  float v3 = a2[36];
  if (v3)
  {
    float v4 = this;
    float v5 = a2[13];
    uint64_t v6 = *((void *)v5 + 41);
    if (v6)
    {
      float v7 = (void **)*((void *)v5 + 43);
      uint64_t v8 = 8 * v6;
      do
      {
        float v9 = *v7++;
        this = (_anonymous_namespace_ *)re::ecs2::TransformSystem::activateEntityHierarchyTransformState(v9, 0, a3);
        v8 -= 8;
      }
      while (v8);
    }
    v51[0] = 0;
    v51[1] = 0;
    int v52 = 1;
    uint64_t v54 = 0;
    uint64_t v55 = 0;
    uint64_t v53 = 0;
    int v56 = 0;
    uint64_t v10 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v3, 0, (uint64_t)re::ecs2::TransformSystem::newAnchorComponentHandler, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::AnchorComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v12 = v11;
    float v13 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)v51);
    *float v13 = v10;
    v13[1] = v12;
    uint64_t v14 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillRemoveEvent>(v3, 0, (uint64_t)re::ecs2::TransformSystem::removedAnchorComponentHandler, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::AnchorComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v16 = v15;
    float v17 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)v51);
    *float v17 = v14;
    v17[1] = v16;
    uint64_t v18 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v3, 0, (uint64_t)re::ecs2::TransformSystem::newTransformComponentHandler, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::TransformComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    uint64_t v20 = v19;
    float32x4_t v21 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)v51);
    *float32x4_t v21 = v18;
    v21[1] = v20;
    Type = re::EventBus::getTypeId<RESceneEntityDidAddEvent>();
    unint64_t EventInfo = (re *)re::EventBus::addOrGetEventInfo(v3, (uint64_t)Type);
    uint64_t v24 = re::globalAllocators(EventInfo)[2];
    uint64_t v58 = &unk_26E6FA080;
    uint64_t v59 = re::ecs2::TransformSystem::entityHierarchyChangedHandler<RESceneEntityDidAddEvent>;
    uint64_t v60 = v24;
    uint64_t v61 = &v58;
    re::EventBus::createHandler<re::ecs2::Entity,RESceneEntityDidAddEvent>((uint64_t)&v58, 0, v62);
    uint64_t v25 = re::EventBus::EventInfo::addSubscription((unint64_t)EventInfo, (uint64_t)v62, 0, 0);
    uint64_t v27 = v26;
    re::FunctionBase<48ul,REEventHandlerResult ()(void *,void const*)>::destroyCallable((uint64_t)v62);
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidAddEvent const&)>::destroyCallable((uint64_t)&v58);
    float32x4_t v28 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)v51);
    *float32x4_t v28 = v25;
    v28[1] = v27;
    uint64_t v29 = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityDidReparentEvent>(v3, 0, (uint64_t)re::ecs2::TransformSystem::entityHierarchyChangedHandler<RESceneEntityDidReparentEvent>, 0, 0);
    uint64_t v31 = v30;
    float32x4_t v32 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)v51);
    void *v32 = v29;
    v32[1] = v31;
    uint64_t v33 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v3, 0, (uint64_t)re::ecs2::TransformSystem::invalidateEntityUnanchoredTransformHierarchy<REComponentDidChangeEvent>, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::TransformComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    uint64_t v35 = v34;
    float32x4_t v36 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)v51);
    void *v36 = v33;
    v36[1] = v35;
    uint64_t v37 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v3, 0, (uint64_t)re::ecs2::TransformSystem::invalidateEntityUnanchoredTransformHierarchy<REComponentDidChangeEvent>, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::KeyValueComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    uint64_t v39 = v38;
    simd_float3x3 v40 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)v51);
    *simd_float3x3 v40 = v37;
    v40[1] = v39;
    uint64_t v41 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillRemoveEvent>(v3, 0, (uint64_t)re::ecs2::TransformSystem::invalidateEntityUnanchoredTransformHierarchy<REComponentWillRemoveEvent>, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::TransformComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    uint64_t v43 = v42;
    long long v44 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)v51);
    void *v44 = v41;
    v44[1] = v43;
    float32x4_t v45 = re::EventBus::getTypeId<RESceneEntityWillRemoveEvent>();
    float32x4_t v46 = (re *)re::EventBus::addOrGetEventInfo(v3, (uint64_t)v45);
    uint64_t v60 = re::globalAllocators(v46)[2];
    uint64_t v61 = &v58;
    uint64_t v58 = &unk_26E6FA130;
    uint64_t v59 = re::ecs2::TransformSystem::removeSceneEntityHandler;
    re::EventBus::createHandler<re::ecs2::Entity,RESceneEntityWillRemoveEvent>((uint64_t)&v58, 0, v62);
    uint64_t v47 = re::EventBus::EventInfo::addSubscription((unint64_t)v46, (uint64_t)v62, 0, 0);
    uint64_t v49 = v48;
    re::FunctionBase<48ul,REEventHandlerResult ()(void *,void const*)>::destroyCallable((uint64_t)v62);
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::destroyCallable((uint64_t)&v58);
    float32x4_t v50 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)v51);
    *float32x4_t v50 = v47;
    v50[1] = v49;
    re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::addNew((uint64_t)v4 + 104, (uint64_t *)&v57, (uint64_t)v51);
    re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)v51);
    this = (_anonymous_namespace_ *)v51[0];
    if (v51[0])
    {
      if ((v52 & 1) == 0) {
        return (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v51[0] + 40))();
      }
    }
  }
  return this;
}

void *re::ecs2::TransformSystem::activateEntityHierarchyTransformState(void *result, re::ecs2::Entity *a2, const re::ecs2::AnchorComponent *a3)
{
  if (result[16]) {
    a2 = (re::ecs2::Entity *)result[16];
  }
  uint64_t v4 = result[30];
  if (v4)
  {
    *(void *)(v4 + 136) = a2;
    *(unsigned char *)(v4 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 28) = 1;
  }
  uint64_t v5 = result[41];
  if (v5)
  {
    uint64_t v6 = (re::ecs2::TransformSystem **)result[43];
    uint64_t v7 = 8 * v5;
    do
    {
      uint64_t v8 = *v6++;
      double result = (void *)re::ecs2::TransformSystem::activateEntityHierarchyTransformState(v8, a2, a3);
      v7 -= 8;
    }
    while (v7);
  }
  return result;
}

uint64_t re::ecs2::TransformSystem::newAnchorComponentHandler(uint64_t a1, uint64_t a2, const re::ecs2::AnchorComponent *a3)
{
  return 0;
}

uint64_t re::ecs2::TransformSystem::removedAnchorComponentHandler(void *a1, uint64_t a2, const re::ecs2::AnchorComponent *a3)
{
  for (uint64_t i = a1[3]; i; uint64_t i = *(void *)(i + 24))
  {
    if ((*(unsigned char *)(i + 288) & 0x80) != 0) {
      break;
    }
    uint64_t v4 = *(re::ecs2::Entity **)(i + 128);
    if (v4) {
      goto LABEL_6;
    }
  }
  uint64_t v4 = 0;
LABEL_6:
  re::ecs2::TransformSystem::updateEntityHierarchyRootAnchorComponent(a1, v4, a3);
  return 0;
}

uint64_t re::ecs2::TransformSystem::newTransformComponentHandler(void *a1)
{
  if (a1)
  {
    uint64_t v1 = a1;
    while (1)
    {
      uint64_t v2 = v1[16];
      if (v2) {
        break;
      }
      uint64_t v1 = (void *)v1[3];
      if (!v1 || (v1[36] & 0x80) != 0) {
        goto LABEL_6;
      }
    }
  }
  else
  {
LABEL_6:
    uint64_t v2 = 0;
  }
  uint64_t v3 = a1[30];
  *(void *)(v3 + 136) = v2;
  *(unsigned char *)(v3 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 28) = 1;
  uint64_t v4 = a1[41];
  if (v4)
  {
    uint64_t v5 = (_anonymous_namespace_ **)a1[43];
    uint64_t v6 = 8 * v4;
    do
    {
      uint64_t v7 = *v5++;
      re::ecs2::TransformSystem::updateEntityHierarchyTransformDirtyState(v7);
      v6 -= 8;
    }
    while (v6);
  }
  return 0;
}

uint64_t re::ecs2::TransformSystem::entityHierarchyChangedHandler<RESceneEntityDidAddEvent>(void *a1, uint64_t a2, const re::ecs2::AnchorComponent *a3)
{
  if (a1)
  {
    uint64_t v3 = a1;
    while (1)
    {
      uint64_t v4 = (re::ecs2::Entity *)v3[16];
      if (v4) {
        break;
      }
      uint64_t v3 = (void *)v3[3];
      if (!v3 || (v3[36] & 0x80) != 0) {
        goto LABEL_6;
      }
    }
  }
  else
  {
LABEL_6:
    uint64_t v4 = 0;
  }
  re::ecs2::TransformSystem::updateEntityHierarchyRootAnchorComponent(a1, v4, a3);
  return 0;
}

uint64_t re::ecs2::TransformSystem::entityHierarchyChangedHandler<RESceneEntityDidReparentEvent>(void *a1, uint64_t a2, const re::ecs2::AnchorComponent *a3)
{
  if (a1)
  {
    uint64_t v3 = a1;
    while (1)
    {
      uint64_t v4 = (re::ecs2::Entity *)v3[16];
      if (v4) {
        break;
      }
      uint64_t v3 = (void *)v3[3];
      if (!v3 || (v3[36] & 0x80) != 0) {
        goto LABEL_6;
      }
    }
  }
  else
  {
LABEL_6:
    uint64_t v4 = 0;
  }
  re::ecs2::TransformSystem::updateEntityHierarchyRootAnchorComponent(a1, v4, a3);
  return 0;
}

uint64_t re::ecs2::TransformSystem::invalidateEntityUnanchoredTransformHierarchy<REComponentDidChangeEvent>(_anonymous_namespace_ *a1)
{
  return 0;
}

uint64_t re::ecs2::TransformSystem::invalidateEntityUnanchoredTransformHierarchy<REComponentWillRemoveEvent>(_anonymous_namespace_ *a1)
{
  return 0;
}

uint64_t re::ecs2::TransformSystem::removeSceneEntityHandler(void *a1, re::ecs2::Entity *a2)
{
  return 0;
}

uint64_t re::ecs2::TransformSystem::willRemoveSceneFromECSService(re::ecs2::TransformSystem *this, re::ecs2::Scene *a2)
{
  uint64_t v16 = a2;
  uint64_t v2 = (char *)this + 104;
  uint64_t result = re::HashTable<re::ecs2::Scene const*,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::tryGet((uint64_t)this + 104, (uint64_t *)&v16);
  if (result)
  {
    uint64_t v5 = (uint64_t)v16;
    uint64_t v6 = *((void *)v16 + 36);
    if (v6)
    {
      uint64_t v7 = result;
      uint64_t v8 = *(void *)(result + 40);
      if (v8)
      {
        for (unint64_t i = 0; i != v8; ++i)
        {
          uint64_t v10 = re::BucketArray<RESubscriptionHandle,8ul>::operator[](v7, i);
          re::EventBus::unsubscribe(v6, *(void *)v10, *(void *)(v10 + 8));
        }
        uint64_t v5 = (uint64_t)v16;
      }
    }
    uint64_t v11 = *(void *)(v5 + 104);
    uint64_t v12 = *(void *)(v11 + 328);
    if (v12)
    {
      float v13 = *(void ***)(v11 + 344);
      uint64_t v14 = 8 * v12;
      do
      {
        uint64_t v15 = *v13++;
        re::ecs2::TransformSystem::deactivateEntityHierarchyTransformState(v15, v4);
        v14 -= 8;
      }
      while (v14);
    }
    return re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::remove((uint64_t)v2, (uint64_t *)&v16);
  }
  return result;
}

void *re::ecs2::TransformSystem::deactivateEntityHierarchyTransformState(void *result, re::ecs2::Entity *a2)
{
  uint64_t v2 = result[30];
  if (v2)
  {
    *(unsigned char *)(v2 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 28) = 0;
    *(void *)(v2 + 136) = 0;
  }
  uint64_t v3 = result[41];
  if (v3)
  {
    uint64_t v4 = (re::ecs2::TransformSystem **)result[43];
    uint64_t v5 = 8 * v3;
    do
    {
      uint64_t v6 = *v4++;
      uint64_t result = (void *)re::ecs2::TransformSystem::deactivateEntityHierarchyTransformState(v6, a2);
      v5 -= 8;
    }
    while (v5);
  }
  return result;
}

void *re::ecs2::TransformSystem::updateEntityHierarchyRootAnchorComponent(void *this, re::ecs2::Entity *a2, const re::ecs2::AnchorComponent *a3)
{
  uint64_t v4 = this;
  uint64_t v5 = this[30];
  if (v5)
  {
    if (!*(unsigned char *)(v5 + 128)) {
      return this;
    }
    *(void *)(v5 + 136) = a2;
    *(unsigned char *)(v5 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 28) = 1;
  }
  v17[0] = 0;
  v17[1] = 0;
  int v18 = 1;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v19 = 0;
  int v22 = 0;
  uint64_t v6 = v4[41];
  if (v6)
  {
    uint64_t v7 = (uint64_t *)v4[43];
    uint64_t v8 = 8 * v6;
    do
    {
      uint64_t v9 = *v7++;
      *(void *)re::BucketArray<re::ecs2::Entity *,32ul>::addUninitialized((uint64_t)v17) = v9;
      v8 -= 8;
    }
    while (v8);
  }
  uint64_t v10 = v21;
  while (v10)
  {
    uint64_t v11 = *(void **)re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v17, v10 - 1);
    re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v17, v21 - 1);
    uint64_t v10 = --v21;
    ++v22;
    if (!v11[16])
    {
      uint64_t v12 = v11[30];
      if (v12)
      {
        *(void *)(v12 + 136) = a2;
        *(unsigned char *)(v12 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 28) = 1;
      }
      uint64_t v13 = v11[41];
      if (v13)
      {
        uint64_t v14 = (uint64_t *)v11[43];
        uint64_t v15 = 8 * v13;
        do
        {
          uint64_t v16 = *v14++;
          *(void *)re::BucketArray<re::ecs2::Entity *,32ul>::addUninitialized((uint64_t)v17) = v16;
          v15 -= 8;
        }
        while (v15);
        uint64_t v10 = v21;
      }
    }
  }
  re::BucketArray<re::ecs2::Entity const*,32ul>::deinit((uint64_t)v17);
  this = (void *)v17[0];
  if (v17[0])
  {
    if ((v18 & 1) == 0) {
      return (void *)(*(uint64_t (**)(void))(*(void *)v17[0] + 40))();
    }
  }
  return this;
}

_anonymous_namespace_ *re::ecs2::TransformSystem::updateEntityHierarchyTransformDirtyState(_anonymous_namespace_ *result)
{
  uint64_t v1 = result;
  uint64_t v2 = *((void *)result + 30);
  if (v2)
  {
    if (*(unsigned __int8 *)(v2 + 128) < 2u) {
      return result;
    }
    *(unsigned char *)(v2 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 28) = 1;
  }
  v14[0] = 0;
  v14[1] = 0;
  int v15 = 1;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v16 = 0;
  int v19 = 0;
  uint64_t v3 = *((void *)v1 + 41);
  if (v3)
  {
    uint64_t v4 = (uint64_t *)*((void *)v1 + 43);
    uint64_t v5 = 8 * v3;
    do
    {
      uint64_t v6 = *v4++;
      *(void *)re::BucketArray<re::ecs2::Entity *,32ul>::addUninitialized((uint64_t)v14) = v6;
      v5 -= 8;
    }
    while (v5);
  }
  uint64_t v7 = v18;
  if (v18)
  {
    while (1)
    {
      uint64_t v8 = *(void **)re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v14, v7 - 1);
      re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v14, v18 - 1);
      uint64_t v7 = --v18;
      ++v19;
      if (!v8[16])
      {
        uint64_t v9 = v8[30];
        if (!v9) {
          goto LABEL_12;
        }
        if (*(unsigned __int8 *)(v9 + 128) >= 2u) {
          break;
        }
      }
LABEL_16:
      if (!v7) {
        goto LABEL_17;
      }
    }
    *(unsigned char *)(v9 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 28) = 1;
LABEL_12:
    uint64_t v10 = v8[41];
    if (v10)
    {
      uint64_t v11 = (uint64_t *)v8[43];
      uint64_t v12 = 8 * v10;
      do
      {
        uint64_t v13 = *v11++;
        *(void *)re::BucketArray<re::ecs2::Entity *,32ul>::addUninitialized((uint64_t)v14) = v13;
        v12 -= 8;
      }
      while (v12);
      uint64_t v7 = v18;
    }
    goto LABEL_16;
  }
LABEL_17:
  re::BucketArray<re::ecs2::Entity const*,32ul>::deinit((uint64_t)v14);
  uint64_t result = (_anonymous_namespace_ *)v14[0];
  if (v14[0])
  {
    if ((v15 & 1) == 0) {
      return (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v14[0] + 40))();
    }
  }
  return result;
}

void *re::ecs2::allocInfo_TransformComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_188, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_188))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF84F48, "TransformComponent");
    __cxa_guard_release(&_MergedGlobals_188);
  }
  return &unk_26AF84F48;
}

void re::ecs2::initInfo_TransformComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v14[0] = 0x74A840394154E22;
  v14[1] = "TransformComponent";
  re::StringID::destroyString((re::StringID *)v14);
  *((_OWORD *)this + 2) = v15;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF84F20, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF84F20);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 4ArcSharedObject::ArcSharedObject(this, 0) = 3;
      *(void *)(v7 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF84F30 = v7;
      uint64_t v8 = re::introspectionAllocator((re *)v7);
      uint64_t v9 = re::introspect_SRT((re::IntrospectionBase **)1);
      uint64_t v10 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v10 = 1;
      *(void *)(v10 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "transform";
      *(void *)(v10 + 16) = v9;
      *(void *)(v10 + 24) = 0;
      *(void *)(v10 + 32) = 0x2000000001;
      *(_DWORD *)(v10 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v10 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      *(void *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_26AF84F38 = v10;
      uint64_t v11 = re::introspectionAllocator((re *)v10);
      uint64_t v12 = (void *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v11 + 32))(v11, 8, 4);
      *uint64_t v12 = 0x100000004;
      qword_26AF84F40 = (uint64_t)v12;
      __cxa_guard_release(&qword_26AF84F20);
    }
  }
  *((void *)this + 2) = 0xD000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((void *)this + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = &qword_26AF84F30;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::TransformComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 1ArcSharedObject::ArcSharedObject(this, 0) = re::internal::defaultDestruct<re::ecs2::TransformComponent>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::TransformComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::TransformComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v13 = v15;
}

re::ecs2::TransformComponent *re::internal::defaultConstruct<re::ecs2::TransformComponent>(int a1, int a2, re::ecs2::TransformComponent *this)
{
  return re::ecs2::TransformComponent::TransformComponent(this);
}

uint64_t re::internal::defaultDestruct<re::ecs2::TransformComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

uint64_t re::internal::defaultDestructV2<re::ecs2::TransformComponent>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_TransformComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"TransformComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_TransformComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_TransformComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::TransformComponent>, this);
}

void *re::ecs2::allocInfo_TransformSystem(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF84F28, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF84F28))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF84FC0, "TransformSystem");
    __cxa_guard_release(&qword_26AF84F28);
  }
  return &unk_26AF84FC0;
}

void re::ecs2::initInfo_TransformSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v5[0] = 0x1C2499D73A6E8136;
  v5[1] = "TransformSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0x9800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = &re::ecs2::initInfo_TransformSystem(re::IntrospectionBase *)::structureAttributes;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::TransformSystem>;
  *((void *)this + 1ArcSharedObject::ArcSharedObject(this, 0) = re::internal::defaultDestruct<re::ecs2::TransformSystem>;
  *((void *)this + 11) = re::internal::defaultRetain<re::ecs2::TransformSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 12) = re::internal::defaultRelease<re::ecs2::TransformSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::TransformSystem>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::TransformSystem>;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

re::ecs2::TransformSystem *re::internal::defaultConstruct<re::ecs2::TransformSystem>(int a1, int a2, re::ecs2::TransformSystem *this)
{
  return re::ecs2::TransformSystem::TransformSystem(this);
}

void *re::internal::defaultDestruct<re::ecs2::TransformSystem>(uint64_t a1, uint64_t a2, void *a3)
{
  re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit(a3 + 13);
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultDestructV2<re::ecs2::TransformSystem>(void *a1)
{
  re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit(a1 + 13);
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_TransformSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"TransformSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_TransformSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_TransformSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::TransformSystem>, this);
}

void re::ecs2::TransformSystem::~TransformSystem(re::ecs2::TransformSystem *this)
{
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 13);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::TransformSystem::typeInfo(re::ecs2::TransformSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"TransformSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_TransformSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_TransformSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::TransformSystem>, 0);
}

void re::ecs2::TransformComponent::~TransformComponent(re::ecs2::TransformComponent *this)
{
  *(void *)this = &unk_26E6F9E00;
  uint64_t v2 = (char *)this + 88;
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 88);
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v2);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  char *v2;
  uint64_t vars8;

  *(void *)this = &unk_26E6F9E00;
  uint64_t v2 = (char *)this + 88;
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 88);
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v2);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::TransformComponent,(re::ecs2::ComponentTypeBase::Flags)4>::allocator()
{
  return *((void *)re::ecs2::ComponentImpl<re::ecs2::TransformComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::TransformComponent,(re::ecs2::ComponentTypeBase::Flags)4>::commonComponentIndex()
{
  return 14;
}

void *re::ecs2::ComponentImpl<re::ecs2::TransformComponent,(re::ecs2::ComponentTypeBase::Flags)4>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::TransformComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

void re::internal::Callable<REEventHandlerResult (*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~Callable()
{
}

uint64_t re::internal::Callable<REEventHandlerResult (*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(uint64_t a1, void *a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, uint64_t))(a1 + 8))(*a2, a3);
}

void *re::internal::Callable<REEventHandlerResult (*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &unk_26E6F9FD0;
  a2[1] = v2;
  return a2;
}

void *re::internal::Callable<REEventHandlerResult (*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &unk_26E6F9FD0;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<REEventHandlerResult (*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 16;
}

void re::internal::Callable<REEventHandlerResult (*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::~Callable()
{
}

uint64_t re::internal::Callable<REEventHandlerResult (*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::operator()(uint64_t a1, void *a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, uint64_t))(a1 + 8))(*a2, a3);
}

void *re::internal::Callable<REEventHandlerResult (*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::cloneInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &unk_26E6FA028;
  a2[1] = v2;
  return a2;
}

void *re::internal::Callable<REEventHandlerResult (*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::moveInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &unk_26E6FA028;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<REEventHandlerResult (*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::size()
{
  return 16;
}

void re::internal::Callable<REEventHandlerResult (*)(re::ecs2::Entity *,RESceneEntityDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidAddEvent const&)>::~Callable()
{
}

uint64_t re::internal::Callable<REEventHandlerResult (*)(re::ecs2::Entity *,RESceneEntityDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidAddEvent const&)>::operator()(uint64_t a1, void *a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, uint64_t))(a1 + 8))(*a2, a3);
}

void *re::internal::Callable<REEventHandlerResult (*)(re::ecs2::Entity *,RESceneEntityDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidAddEvent const&)>::cloneInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &unk_26E6FA080;
  a2[1] = v2;
  return a2;
}

void *re::internal::Callable<REEventHandlerResult (*)(re::ecs2::Entity *,RESceneEntityDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidAddEvent const&)>::moveInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &unk_26E6FA080;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<REEventHandlerResult (*)(re::ecs2::Entity *,RESceneEntityDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidAddEvent const&)>::size()
{
  return 16;
}

void re::internal::Callable<REEventHandlerResult (*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::~Callable()
{
}

uint64_t re::internal::Callable<REEventHandlerResult (*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::operator()(uint64_t a1, void *a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, uint64_t))(a1 + 8))(*a2, a3);
}

void *re::internal::Callable<REEventHandlerResult (*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::cloneInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &unk_26E6FA0D8;
  a2[1] = v2;
  return a2;
}

void *re::internal::Callable<REEventHandlerResult (*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::moveInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &unk_26E6FA0D8;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<REEventHandlerResult (*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::size()
{
  return 16;
}

void re::internal::Callable<REEventHandlerResult (*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~Callable()
{
}

uint64_t re::internal::Callable<REEventHandlerResult (*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(uint64_t a1, void *a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, uint64_t))(a1 + 8))(*a2, a3);
}

void *re::internal::Callable<REEventHandlerResult (*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &unk_26E6FA188;
  a2[1] = v2;
  return a2;
}

void *re::internal::Callable<REEventHandlerResult (*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &unk_26E6FA188;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<REEventHandlerResult (*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 16;
}

void re::internal::Callable<REEventHandlerResult (*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::~Callable()
{
}

uint64_t re::internal::Callable<REEventHandlerResult (*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::operator()(uint64_t a1, void *a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, uint64_t))(a1 + 8))(*a2, a3);
}

void *re::internal::Callable<REEventHandlerResult (*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::cloneInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &unk_26E6FA130;
  a2[1] = v2;
  return a2;
}

void *re::internal::Callable<REEventHandlerResult (*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::moveInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &unk_26E6FA130;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<REEventHandlerResult (*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::size()
{
  return 16;
}

uint64_t *re::BucketArray<re::ecs2::Entity *,32ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  *(void *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(void *)(a1 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
  uint64_t result = re::BucketArray<re::ecs2::Entity *,32ul>::setBucketsCapacity((uint64_t *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t *re::BucketArray<re::ecs2::Entity *,32ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  uint64_t v3 = result;
  if (*result)
  {
    if (result[5] < 32 * a2)
    {
      while (1)
      {
        unint64_t v4 = v3[1];
        if (v4 <= a2) {
          break;
        }
        uint64_t result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)*v3 + 32))(*v3, 256, 0);
        uint64_t result = (uint64_t *)re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::add((uint64_t)v3, &v5);
        unint64_t v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

uint64_t re::BucketArray<re::ecs2::Entity *,32ul>::addUninitialized(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 40);
  unint64_t v3 = *(void *)(a1 + 8);
  if (v2 + 1 > 32 * v3)
  {
    re::BucketArray<re::ecs2::Entity *,32ul>::setBucketsCapacity((uint64_t *)a1, (v2 + 32) >> 5);
    unint64_t v3 = *(void *)(a1 + 8);
  }
  if (v3 <= v2 >> 5)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v4 = a1 + 24;
  }
  else {
    uint64_t v4 = *(void *)(a1 + 32);
  }
  uint64_t v5 = *(void *)(v4 + 8 * (v2 >> 5));
  ++*(void *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  return v5 + 8 * (v2 & 0x1F);
}

re::ecs2::TransformSystem *re::ecs2::TransformSystem::TransformSystem(re::ecs2::TransformSystem *this)
{
  re::ecs2::System::System((uint64_t)this, 1);
  *(void *)uint64_t v2 = &unk_26E6F9F18;
  *(_OWORD *)(v2 + 12ArcSharedObject::ArcSharedObject(this, 0) = 0u;
  *(_DWORD *)(v2 + 136) = 0;
  *(_OWORD *)(v2 + 104) = 0u;
  uint64_t v3 = v2 + 104;
  *(void *)(v2 + 14ArcSharedObject::ArcSharedObject(this, 0) = 0x7FFFFFFFLL;
  return this;
}

id re::internal::defaultRetain<re::ecs2::TransformSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::TransformSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
}

void *re::ecs2::allocInfo_PortalCrossingFlagsComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_189, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_189))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF85060, "PortalCrossingFlagsComponent");
    __cxa_guard_release(&_MergedGlobals_189);
  }
  return &unk_26AF85060;
}

void re::ecs2::initInfo_PortalCrossingFlagsComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v17[0] = 0x37D4EAFB9BC30C48;
  v17[1] = "PortalCrossingFlagsComponent";
  re::StringID::destroyString((re::StringID *)v17);
  *((_OWORD *)this + 2) = v18;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF85040, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF85040);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 4ArcSharedObject::ArcSharedObject(this, 0) = 3;
      *(void *)(v7 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF85048 = v7;
      uint64_t v8 = re::introspectionAllocator((re *)v7);
      uint64_t v10 = re::introspect_BOOL((re *)1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "enablePortalCrossing";
      *(void *)(v11 + 16) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x1900000001;
      *(_DWORD *)(v11 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v11 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      *(void *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF85050 = v11;
      uint64_t v12 = re::introspectionAllocator((re *)v11);
      uint64_t v14 = re::introspect_BOOL((re *)1, v13);
      uint64_t v15 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 72, 8);
      *(_DWORD *)uint64_t v15 = 1;
      *(void *)(v15 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "enablePortalCrossingIsInherited";
      *(void *)(v15 + 16) = v14;
      *(void *)(v15 + 24) = 0;
      *(void *)(v15 + 32) = 0x1A00000002;
      *(_DWORD *)(v15 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v15 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      *(void *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_26AF85058 = v15;
      __cxa_guard_release(&qword_26AF85040);
    }
  }
  *((void *)this + 2) = 0x2000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((void *)this + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = &qword_26AF85048;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::PortalCrossingFlagsComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 1ArcSharedObject::ArcSharedObject(this, 0) = re::internal::defaultDestruct<re::ecs2::PortalCrossingFlagsComponent>;
  *((void *)this + re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 13) = re::internal::defaultConstructV2<re::ecs2::PortalCrossingFlagsComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::PortalCrossingFlagsComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v16 = v18;
}

void re::internal::defaultConstruct<re::ecs2::PortalCrossingFlagsComponent>(int a1, int a2, ArcSharedObject *this)
{
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)(v3 + 16) = 0;
  *(unsigned char *)(v3 + 24) = 0;
  *(void *)uint64_t v3 = &unk_26E6F2990;
  *(_WORD *)(v3 + 25) = 0;
}

void *re::internal::defaultDestruct<re::ecs2::PortalCrossingFlagsComponent>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

void re::internal::defaultConstructV2<re::ecs2::PortalCrossingFlagsComponent>(ArcSharedObject *a1)
{
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(void *)(v1 + 16) = 0;
  *(unsigned char *)(v1 + 24) = 0;
  *(void *)uint64_t v1 = &unk_26E6F2990;
  *(_WORD *)(v1 + 25) = 0;
}

void *re::internal::defaultDestructV2<re::ecs2::PortalCrossingFlagsComponent>(void *a1)
{
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_PortalCrossingFlagsComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"PortalCrossingFlagsComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_PortalCrossingFlagsComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_PortalCrossingFlagsComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::PortalCrossingFlagsComponent>, this);
}

uint64_t re::ecs2::PortalCrossingFlagsComponent::overridePortalCrossingFlags(re::ecs2::PortalCrossingFlagsComponent *this, const re::ecs2::Entity *a2, re::HierarchicalMeshOverrideFlags *a3, re::HierarchicalMeshOverrideFlags *a4)
{
  uint64_t result = re::ecs2::EntityComponentCollection::get((re::ecs2::PortalCrossingFlagsComponent *)((char *)this + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PortalCrossingFlagsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (result)
  {
    char v7 = *(unsigned char *)(result + 25);
    if (!*((unsigned char *)a2 + 16)) {
      *((unsigned char *)a2 + 16) = 1;
    }
    *((unsigned char *)a2 + 17) = v7;
    int v8 = *(unsigned __int8 *)(result + 26);
    *((unsigned char *)a2 + 25) = v8;
    if (v8)
    {
      if (!*((unsigned char *)a3 + 16))
      {
        *((unsigned char *)a3 + 16) = 1;
        char v7 = *((unsigned char *)a2 + 17);
      }
      *((unsigned char *)a3 + 17) = v7;
      *((unsigned char *)a3 + 25) = 1;
    }
  }
  return result;
}

re::ecs2::IKParametersComponent *re::ecs2::IKParametersComponent::createSolversForAsset(re::ecs2::IKParametersComponent *this)
{
  uint64_t v1 = (uint64_t)this;
  unint64_t v2 = *((void *)this + 5);
  if (v2) {
    uint64_t v3 = *(void *)(v2 + 664);
  }
  else {
    uint64_t v3 = 0;
  }
  unint64_t v4 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (v2 ^ (v2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v2 ^ (v2 >> 30))) >> 27));
  if (*((void *)this + 10) != (v3 ^ (v4 >> 31) ^ v4))
  {
    re::ecs2::IKParametersComponent::createRuntimeData(this);
    return (re::ecs2::IKParametersComponent *)re::ecs2::Component::enqueueMarkDirty(v1);
  }
  return this;
}

void re::ecs2::IKParametersComponent::createRuntimeData(re::ecs2::IKParametersComponent *this)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  uint64_t v1 = *((void *)this + 5);
  if (v1)
  {
    unsigned int v2 = atomic_load((unsigned int *)(v1 + 704));
    if (v2 == 2)
    {
      uint64_t v4 = *((void *)this + 5);
      if (v4)
      {
        uint64_t v5 = *(uint64_t **)(v4 + 264);
        if (v5 == re::IKRigAsset::assetType(this))
        {
          if (*((void *)this + 7))
          {
            *((void *)this + 1ArcSharedObject::ArcSharedObject(this, 0) = 0;
            re::FixedArray<re::FullBodyIKSolver>::deinit((void *)this + 7);
          }
          unint64_t v6 = *((void *)this + 5);
          if (v6) {
            uint64_t v7 = *(void *)(v6 + 664);
          }
          else {
            uint64_t v7 = 0;
          }
          unint64_t v8 = 0x94D049BB133111EBLL
             * ((0xBF58476D1CE4E5B9 * (v6 ^ (v6 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v6 ^ (v6 >> 30))) >> 27));
          *((void *)this + 1ArcSharedObject::ArcSharedObject(this, 0) = v7 ^ (v8 >> 31) ^ v8;
          uint64_t v9 = (_anonymous_namespace_ *)re::AssetHandle::asset<re::IKRigAsset>((re::ecs2::IKParametersComponent *)((char *)this + 32));
          unint64_t v10 = *((void *)v9 + 16);
          if (v10)
          {
            uint64_t v11 = 0;
            uint64_t v12 = 0;
            unint64_t v13 = 0;
            uint64_t v14 = 120;
            while (1)
            {
              unint64_t v15 = *((void *)v9 + 16);
              if (v15 <= v13) {
                break;
              }
              uint64_t v16 = *(void *)(*((void *)v9 + 17) + v11);
              if (v16)
              {
                unint64_t v15 = *((void *)v9 + 4);
                if (v15 <= v13) {
                  goto LABEL_50;
                }
                re::FullBodyIKSolver::FullBodyIKSolver((uint64_t)&v35, v16, (uint64_t *)(*((void *)v9 + 5) + v12));
                unint64_t v15 = *((void *)this + 8);
                if (v15 <= v13) {
                  goto LABEL_51;
                }
                uint64_t v17 = *((void *)this + 9);
                uint64_t v18 = v17 + v14;
                long long v19 = v35;
                *(void *)&long long v35 = 0;
                *((void *)&v35 + 1) = "";
                uint64_t v20 = *(void *)(v17 + v14 - 112);
                unint64_t v21 = v19 & 0xFFFFFFFFFFFFFFFELL | *(void *)(v17 + v14 - 120) & 1;
                *(void *)(v18 - 112) = *((void *)&v19 + 1);
                v52[0] = v21;
                v52[1] = v20;
                *(void *)(v18 - 12ArcSharedObject::ArcSharedObject(this, 0) = v19;
                re::StringID::destroyString((re::StringID *)v52);
                std::unique_ptr<CoreIKGenericSolver,std::function<void ()(CoreIKGenericSolver*)>>::operator=[abi:nn180100]((uint64_t *)(v17 + v14 - 104), (uint64_t *)v36);
                re::FixedArray<float>::operator=((uint64_t *)(v17 + v14 - 64), (uint64_t *)&v37 + 1);
                uint64_t v23 = (uint64_t *)(v17 + v14 - 40);
                if (v23 != &v39)
                {
                  uint64_t v24 = *v23;
                  if (*v23) {
                    BOOL v25 = v24 == v39;
                  }
                  else {
                    BOOL v25 = 1;
                  }
                  if (!v25) {
                    goto LABEL_52;
                  }
                  *uint64_t v23 = v39;
                  uint64_t v39 = v24;
                  uint64_t v26 = v17 + v14;
                  uint64_t v27 = *(void *)(v17 + v14 - 32);
                  *(void *)(v26 - 32) = v40;
                  uint64_t v40 = v27;
                  uint64_t v28 = *(void *)(v17 + v14 - 24);
                  *(void *)(v26 - 24) = v41;
                  uint64_t v41 = v28;
                }
                uint64_t v29 = (uint64_t *)(v18 - 16);
                if ((uint64_t *)(v18 - 16) != &v42)
                {
                  uint64_t v30 = *v29;
                  if (*v29) {
                    BOOL v31 = v30 == v42;
                  }
                  else {
                    BOOL v31 = 1;
                  }
                  if (!v31) {
                    goto LABEL_53;
                  }
                  *uint64_t v29 = v42;
                  uint64_t v42 = v30;
                  float32x4_t v32 = (void *)(v17 + v14);
                  uint64_t v33 = *(void *)(v17 + v14 - 8);
                  *(v32 - 1) = v43;
                  uint64_t v43 = v33;
                  uint64_t v34 = *(void *)(v17 + v14);
                  void *v32 = v44;
                  uint64_t v44 = v34;
                }
                if (v42)
                {
                  if (v43)
                  {
                    (*(void (**)(void))(*(void *)v42 + 40))();
                    uint64_t v43 = 0;
                    uint64_t v44 = 0;
                  }
                  uint64_t v42 = 0;
                }
                if (v39)
                {
                  if (v40)
                  {
                    (*(void (**)(void))(*(void *)v39 + 40))();
                    uint64_t v40 = 0;
                    uint64_t v41 = 0;
                  }
                  uint64_t v39 = 0;
                }
                if (*((void *)&v37 + 1))
                {
                  if ((void)v38)
                  {
                    (*(void (**)(void))(**((void **)&v37 + 1) + 40))();
                    long long v38 = 0uLL;
                  }
                  *((void *)&v37 + 1) = 0;
                }
                std::unique_ptr<CoreIKGenericSolver,std::function<void ()(CoreIKGenericSolver*)>>::~unique_ptr[abi:nn180100]((uint64_t *)v36);
                re::StringID::destroyString((re::StringID *)&v35);
              }
              ++v13;
              v14 += 128;
              v12 += 16;
              v11 += 40;
              if (v10 == v13) {
                goto LABEL_47;
              }
            }
            *(void *)float32x4_t v45 = 0;
            long long v37 = 0u;
            long long v38 = 0u;
            memset(v36, 0, sizeof(v36));
            long long v35 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            LODWORD(v52[0]) = 136315906;
            *(void *)((char *)v52 + 4) = "operator[]";
            WORD2(v52[1]) = 1024;
            *(_DWORD *)((char *)&v52[1] + 6) = 476;
            WORD1(v52[2]) = 2048;
            *(void *)((char *)&v52[2] + 4) = v13;
            WORD2(v52[3]) = 2048;
            *(void *)((char *)&v52[3] + 6) = v15;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_50:
            long long v53 = 0u;
            long long v54 = 0u;
            memset(v52, 0, sizeof(v52));
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)float32x4_t v45 = 136315906;
            *(void *)&v45[4] = "operator[]";
            __int16 v46 = 1024;
            int v47 = 476;
            __int16 v48 = 2048;
            unint64_t v49 = v13;
            __int16 v50 = 2048;
            unint64_t v51 = v15;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_51:
            long long v53 = 0u;
            long long v54 = 0u;
            memset(v52, 0, sizeof(v52));
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)float32x4_t v45 = 136315906;
            *(void *)&v45[4] = "operator[]";
            __int16 v46 = 1024;
            int v47 = 468;
            __int16 v48 = 2048;
            unint64_t v49 = v13;
            __int16 v50 = 2048;
            unint64_t v51 = v15;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_52:
            re::internal::assertLog((re::internal *)4, v22, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || m_allocator == other.m_allocator", "operator=", 296);
            _os_crash();
            __break(1u);
LABEL_53:
            re::internal::assertLog((re::internal *)4, v22, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || m_allocator == other.m_allocator", "operator=", 296);
            _os_crash();
            __break(1u);
          }
LABEL_47:
          *((unsigned char *)this + 96) = 1;
        }
      }
      else
      {
        re::IKRigAsset::assetType(this);
      }
    }
  }
}

uint64_t re::AssetHandle::asset<re::IKRigAsset>(re::IKRigAsset *a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  unsigned int v2 = re::IKRigAsset::assetType(a1);
  uint64_t v3 = re::AssetHandle::assetWithType(a1, (const re::AssetType *)v2, 0);
  if (!v3)
  {
    uint64_t v4 = *re::assetsLogObjects(0);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      unint64_t v6 = re::AssetHandle::assetInfo(a1);
      if (v6[17]) {
        uint64_t v7 = (char *)v6[18];
      }
      else {
        uint64_t v7 = (char *)v6 + 137;
      }
      int v8 = 136315138;
      uint64_t v9 = v7;
      _os_log_error_impl(&dword_233120000, v4, OS_LOG_TYPE_ERROR, "Invalid asset: '%s'", (uint8_t *)&v8, 0xCu);
    }
  }
  return v3;
}

uint64_t re::ecs2::IKParametersComponentStateImpl::dependsOnComponents(re::ecs2::IKParametersComponentStateImpl *this)
{
  return (uint64_t)this + 16;
}

void re::ecs2::IKParametersComponentStateImpl::didSetDirty(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  unint64_t v2 = *(void *)(v1 + 96);
  uint64_t v3 = (re::Scheduler *)(*(uint64_t (**)(void))(**(void **)(v1 + 40) + 80))(*(void *)(v1 + 40));
  if (v3) {
    BOOL v4 = v2 == -1;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    re::Scheduler::enqueueTaskWithDeadline(v3, v2, 0.0);
  }
}

BOOL re::ecs2::IKParametersComponentStateImpl::processDirtyComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  v49[5] = *MEMORY[0x263EF8340];
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v48, a5, 0);
  unint64_t v45 = a4;
  uint64_t v46 = v48;
  uint64_t v47 = v49[0];
  if (v48 != a5 || LOWORD(v49[0]) != 0xFFFFLL || (v49[0] & 0xFFFF0000) != 4294901760)
  {
    while (1)
    {
      uint64_t v10 = (re::ecs2::IKParametersComponent **)re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v46);
      uint64_t v11 = *v10;
      uint64_t v12 = *((void *)*v10 + 2);
      re::ecs2::IKParametersComponent::createSolversForAsset(*v10);
      uint64_t v13 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v12 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RigComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
      if (v13)
      {
        if (*((unsigned char *)v11 + 96))
        {
          uint64_t v14 = v13;
          unint64_t v15 = *(void *)(v13 + 40);
          if (v15) {
            uint64_t v16 = *(void *)(v15 + 664);
          }
          else {
            uint64_t v16 = 0;
          }
          uint64_t v17 = v13 + 32;
          unint64_t v18 = 0x94D049BB133111EBLL
              * ((0xBF58476D1CE4E5B9 * (v15 ^ (v15 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v15 ^ (v15 >> 30))) >> 27));
          unint64_t v19 = v16 ^ (v18 >> 31) ^ v18;
          uint64_t v20 = *((void *)v11 + 11);
          uint64_t v21 = *((void *)v11 + 5);
          if (v21 || v19 != v20) {
            goto LABEL_19;
          }
          if (v15) {
            break;
          }
        }
      }
LABEL_45:
      unint64_t v40 = v45;
      unint64_t v41 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v46);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v40, v41, *(void *)(a3 + 48));
LABEL_46:
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v46);
      if (v46 == a5 && (unsigned __int16)v47 == 0xFFFF && WORD1(v47) == 0xFFFF) {
        return *(_DWORD *)(a5 + 40) != 0;
      }
    }
    if (*(void *)v17)
    {

      *(void *)uint64_t v17 = 0;
    }
    unint64_t v15 = 0;
    *(void *)(v14 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
    *((void *)v11 + 11) = 0;
    *((unsigned char *)v11 + 96) = 0;
    uint64_t v21 = *((void *)v11 + 5);
LABEL_19:
    BOOL v23 = v19 == v20 || v15 == 0;
    if (v21 && v23)
    {
      uint64_t v24 = *(void *)(v12 + 176);
      unsigned int v25 = atomic_load((unsigned int *)(v21 + 704));
      if (v25 != 2 || v24 == 0) {
        goto LABEL_46;
      }
      uint64_t v27 = *(void *)(v24 + 40);
      if (!v27) {
        goto LABEL_46;
      }
      unsigned int v28 = atomic_load((unsigned int *)(v27 + 704));
      if (v28 != 2) {
        goto LABEL_46;
      }
      uint64_t v29 = (re::RigGraphAsset *)re::AssetHandle::asset<re::MeshAsset>((re::MeshAsset *)(v24 + 32));
      uint64_t v30 = (const re::MeshAsset *)re::AssetHandle::asset<re::IKRigAsset>((re::ecs2::IKParametersComponent *)((char *)v11 + 32));
      IKSolverRigGraphAsset = re::RigGraphAsset::createIKSolverRigGraphAsset(v29, v30, (uint64_t)&v48);
      if (!(_BYTE)v48) {
        goto LABEL_46;
      }
      uint64_t v32 = *((void *)v11 + 5);
      if (v32) {
        uint64_t v33 = *(void *)(v32 + 24);
      }
      else {
        uint64_t v33 = 0;
      }
      uint64_t v34 = v49[0];
      long long v35 = re::RigGraphAsset::assetType((re::RigGraphAsset *)IKSolverRigGraphAsset);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t *, void, void, void))(*(void *)v33 + 416))(&v43, v33, v34, v35, 0, 0, 0);
      uint64_t v36 = v44;
      if (v44)
      {
        v49[0] = 0;
        re::AssetHandle::operator=(v14 + 32, &v43);
        re::ecs2::Component::enqueueMarkDirty(v14);
        unint64_t v37 = *(void *)(v14 + 40);
        if (v37) {
          uint64_t v38 = *(void *)(v37 + 664);
        }
        else {
          uint64_t v38 = 0;
        }
        unint64_t v39 = 0x94D049BB133111EBLL
            * ((0xBF58476D1CE4E5B9 * (v37 ^ (v37 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v37 ^ (v37 >> 30))) >> 27));
        *((void *)v11 + 11) = v38 ^ (v39 >> 31) ^ v39;
        *((unsigned char *)v11 + 96) = 0;
      }
      re::AssetHandle::~AssetHandle((re::AssetHandle *)&v43);
      if ((_BYTE)v48) {
        std::unique_ptr<re::RigGraphAsset,std::function<void ()(re::RigGraphAsset*)>>::~unique_ptr[abi:nn180100](v49);
      }
      if (!v36) {
        goto LABEL_46;
      }
    }
    goto LABEL_45;
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

unint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>::setComponentState(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t result = re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), a2, a3, *(void *)(a1 + 24));
  if (result != a2 || v7 != a3 || ((v7 ^ a3) & 0xFFFFFF00000000) != 0)
  {
    uint64_t v10 = *(uint64_t (**)(void))(**(void **)(*(void *)a1 + 224) + 16);
    return v10();
  }
  return result;
}

uint64_t re::ecs2::IKParametersComponentStateImpl::processPreparingComponents()
{
  return 0;
}

uint64_t re::ecs2::IKParametersComponentStateImpl::processUpdatingComponents()
{
  return 0;
}

uint64_t re::ecs2::IKParametersSystem::update(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v44[0] = a2;
  v44[1] = a3;
  re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v43);
  id WeakRetained = (id *)(*(uint64_t (**)(void))(**(void **)(a1 + 40) + 120))(*(void *)(a1 + 40));
  if (v5)
  {
    unint64_t v6 = WeakRetained;
    unint64_t v7 = 0;
    uint64_t v8 = 8 * v5;
    do
    {
      id WeakRetained = (id *)objc_loadWeakRetained(v6);
      if (WeakRetained)
      {
        uint64_t v9 = WeakRetained;
        uint64_t v10 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(WeakRetained + 24), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::IKParametersComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
        if (v10) {
          uint64_t v11 = *(void *)(v10 + 24);
        }
        else {
          uint64_t v11 = 0;
        }
        v7 += v11;
      }
      ++v6;
      v8 -= 8;
    }
    while (v8);
  }
  else
  {
    unint64_t v7 = 0;
  }
  isStatisticCollectionEnabled = (re *)re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)WeakRetained);
  if (isStatisticCollectionEnabled)
  {
    uint64_t v13 = re::profilerThreadContext(isStatisticCollectionEnabled);
    uint64_t v14 = *(int64x2_t **)(v13 + 152);
    if (v14)
    {
      unint64_t v15 = v14[460].u64[0];
      if (v15 >= v7) {
        unint64_t v15 = v7;
      }
      v14[460].i64[0] = v15;
      unint64_t v16 = v14[460].u64[1];
      if (v16 <= v7) {
        unint64_t v16 = v7;
      }
      v14[460].i64[1] = v16;
      int64x2_t v17 = vdupq_n_s64(1uLL);
      v17.i64[0] = v7;
      v14[461] = vaddq_s64(v14[461], v17);
      *(unsigned char *)(v13 + 184) = 0;
    }
  }
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v42, 3131, a1);
  unint64_t v18 = (_anonymous_namespace_ *)re::DynamicOverflowArray<unsigned long long,2ul>::DynamicOverflowArray((uint64_t)&v50, (uint64_t *)(a1 + 272));
  v53[2] = *(void *)(a1 + 312);
  int v46 = 1;
  uint64_t v47 = 0;
  uint64_t v48 = 0;
  v45[1] = 0;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v45, 0);
  v46 += 2;
  unint64_t v19 = *(void *)(a1 + 312);
  if ((v19 & 0x3F) != 0) {
    unint64_t v20 = (v19 >> 6) + 1;
  }
  else {
    unint64_t v20 = v19 >> 6;
  }
  uint64_t v49 = *(void *)(a1 + 312);
  uint64_t v54 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((_anonymous_namespace_ *)v45, v20, &v54);
  int v21 = *(_DWORD *)(a1 + 288);
  if (v21) {
    uint64_t v22 = (void *)(a1 + 296);
  }
  else {
    uint64_t v22 = *(void **)(a1 + 304);
  }
  uint64_t v23 = *(void *)(a1 + 280);
  uint64_t v24 = (uint64_t *)(a1 + 296);
  while (1)
  {
    uint64_t v25 = a1 + 296;
    if ((v21 & 1) == 0) {
      uint64_t v25 = *(void *)(a1 + 304);
    }
    if (v22 == (void *)(v25 + 8 * v23)) {
      break;
    }
    *v22++ = 0;
    int v21 = *(_DWORD *)(a1 + 288);
  }
  uint64_t v26 = v53;
  if ((v52 & 1) == 0) {
    uint64_t v26 = (unint64_t *)v53[1];
  }
  uint64_t v27 = v51;
  if ((v51 & 0x3FFFFFFFFFFFFFFLL) != 0)
  {
    uint64_t v28 = 0;
    while (1)
    {
      unint64_t v30 = *v26++;
      unint64_t v29 = v30;
      if (v30) {
        break;
      }
      v28 -= 64;
      if (!--v27) {
        goto LABEL_42;
      }
    }
    unint64_t v31 = __clz(__rbit64(v29));
    if (v31 + 1 != v28)
    {
      unint64_t FirstBitSet = v31 - v28;
      do
      {
        uint64_t v33 = (void *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1 + 104, FirstBitSet);
        if (re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>::update(v33, (uint64_t)v44))re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v45, FirstBitSet); {
        else
        }
          re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)v45, FirstBitSet);
        unint64_t FirstBitSet = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet((uint64_t)&v50, FirstBitSet + 1);
      }
      while (FirstBitSet != -1);
    }
  }
LABEL_42:
  re::DynamicBitset<unsigned long long,64ul>::orWithBitSet(a1 + 272, (uint64_t)v45);
  if (*(unsigned char *)(a1 + 336))
  {
    unint64_t v34 = *(void *)(a1 + 280);
    int v35 = *(_DWORD *)(a1 + 288);
    if (v34 >= 0xB)
    {
      if ((v35 & 1) == 0) {
        uint64_t v24 = *(uint64_t **)(a1 + 304);
      }
      uint64_t v36 = 8 * v34;
      while (!*v24)
      {
        ++v24;
        v36 -= 8;
        if (!v36) {
          goto LABEL_58;
        }
      }
      goto LABEL_56;
    }
    if ((v35 & 1) == 0) {
      uint64_t v24 = *(uint64_t **)(a1 + 304);
    }
    if (v34)
    {
      uint64_t v37 = 0;
      uint64_t v38 = 8 * v34;
      do
      {
        uint64_t v39 = *v24++;
        v37 |= v39;
        v38 -= 8;
      }
      while (v38);
      if (v37)
      {
LABEL_56:
        unint64_t v40 = *(re::ecs2::System **)(a1 + 320);
        if (!*((unsigned char *)v40 + 86)) {
          re::ecs2::System::queueToRun(v40, 0.0);
        }
      }
    }
  }
LABEL_58:
  if (v45[0] && (v46 & 1) == 0) {
    (*(void (**)(void))(*(void *)v45[0] + 40))();
  }
  if (v50 && (v52 & 1) == 0) {
    (*(void (**)(void))(*(void *)v50 + 40))();
  }
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v42);
  return re::ProfilerTimeGuard<(re::ProfilerStatistic)125>::end((uint64_t)v43);
}

uint64_t re::ecs2::IKParametersSystem::update(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v20[0] = a3;
  v20[1] = a4;
  unint64_t v6 = re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v19);
  isStatisticCollectionEnabled = (re *)re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v6);
  if (isStatisticCollectionEnabled)
  {
    uint64_t v8 = re::profilerThreadContext(isStatisticCollectionEnabled);
    uint64_t v9 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::IKParametersComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    unint64_t v10 = v9 ? *(void *)(v9 + 24) : 0;
    uint64_t v11 = *(int64x2_t **)(v8 + 152);
    if (v11)
    {
      unint64_t v12 = v11[460].u64[0];
      if (v12 >= v10) {
        unint64_t v12 = v10;
      }
      v11[460].i64[0] = v12;
      unint64_t v13 = v11[460].u64[1];
      if (v13 <= v10) {
        unint64_t v13 = v10;
      }
      v11[460].i64[1] = v13;
      int64x2_t v14 = vdupq_n_s64(1uLL);
      v14.i64[0] = v10;
      v11[461] = vaddq_s64(v11[461], v14);
      *(unsigned char *)(v8 + 184) = 0;
    }
  }
  re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::IKParametersComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v18, 3131, a1);
  uint64_t v21 = a2;
  uint64_t v15 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(a1 + 160), &v21);
  if (v15 == -1) {
    unint64_t v16 = 0;
  }
  else {
    unint64_t v16 = (void *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1 + 104, *(void *)(*(void *)(a1 + 168) + 16 * v15 + 8));
  }
  re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>::update(v16, (uint64_t)v20);
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v18);
  return re::ProfilerTimeGuard<(re::ProfilerStatistic)125>::end((uint64_t)v19);
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>::update(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*a1 + 224);
  unint64_t v5 = a1[3];
  unint64_t v6 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](a1[2] + 8, v5);
  if (*(_DWORD *)(v6 + 40)) {
    uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, void *, unint64_t, unint64_t, void))(*(void *)v4 + 24))(v4, a2, a1, v5, v6, 0);
  }
  else {
    uint64_t v7 = 0;
  }
  unint64_t v8 = a1[5];
  unint64_t v9 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](a1[2] + 8, v8);
  if (*(_DWORD *)(v9 + 40)) {
    uint64_t v7 = v7 | (*(unsigned int (**)(uint64_t, uint64_t, void *, unint64_t, unint64_t, void))(*(void *)v4 + 32))(v4, a2, a1, v8, v9, 0);
  }
  unint64_t v10 = a1[6];
  unint64_t v11 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](a1[2] + 8, v10);
  if (*(_DWORD *)(v11 + 40)) {
    return v7 | (*(unsigned int (**)(uint64_t, uint64_t, void *, unint64_t, unint64_t, void))(*(void *)v4 + 40))(v4, a2, a1, v10, v11, 0);
  }
  return v7;
}

void re::ecs2::IKParametersSystem::willAddSceneToECSService(re::ecs2::IKParametersSystem *this, re::ecs2::Scene *a2)
{
  uint64_t v67 = *MEMORY[0x263EF8340];
  uint64_t v4 = (char *)this + 104;
  v57[0] = (uint64_t)a2;
  unint64_t v5 = (re::ecs2::IKParametersSystem *)((char *)this + 224);
  unint64_t v6 = *((void *)this + 29);
  int v7 = *((_DWORD *)this + 60);
  if (v6 >= 0xB)
  {
    if (v7) {
      unint64_t v8 = (void *)((char *)this + 248);
    }
    else {
      unint64_t v8 = (void *)*((void *)this + 32);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_17;
      }
    }
    goto LABEL_16;
  }
  if (v7)
  {
    unint64_t v9 = (uint64_t *)((char *)this + 248);
    if (!v6) {
      goto LABEL_17;
    }
  }
  else
  {
    unint64_t v9 = (uint64_t *)*((void *)this + 32);
    if (!v6) {
      goto LABEL_17;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
  {
LABEL_16:
    *(void *)&long long v49 = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet((uint64_t)this + 224, 0);
    uint64_t v14 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)v4, v49);
    re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>::init(v14, (uint64_t)v4, (uint64_t)a2);
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((re::ecs2::IKParametersSystem *)((char *)this + 160), v57, (uint64_t *)&v49);
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)v5, v49);
    uint64_t v15 = (char *)this + 272;
    unint64_t v16 = v49;
    goto LABEL_49;
  }
LABEL_17:
  long long v56 = 0u;
  long long v49 = 0u;
  *(void *)&long long v50 = 0;
  *((void *)&v50 + 1) = -1;
  long long v51 = 0u;
  long long v52 = 0u;
  uint64_t v53 = 0;
  uint64_t v54 = 1;
  long long v55 = 0uLL;
  unint64_t v17 = *((void *)this + 18);
  *(void *)&long long v56 = 0;
  unint64_t v18 = *((void *)this + 14);
  DWORD2(v56) = 0;
  if (v17 + 1 > 4 * v18)
  {
    re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>,4ul>::setBucketsCapacity((uint64_t *)this + 13, (v17 + 4) >> 2);
    unint64_t v18 = *((void *)this + 14);
  }
  if (v18 <= v17 >> 2)
  {
    v57[1] = 0;
    memset(v66, 0, sizeof(v66));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v58 = 136315906;
    uint64_t v59 = "operator[]";
    __int16 v60 = 1024;
    int v61 = 858;
    __int16 v62 = 2048;
    unint64_t v63 = v17 >> 2;
    __int16 v64 = 2048;
    unint64_t v65 = v18;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_69;
  }
  if (*((unsigned char *)this + 120)) {
    unint64_t v19 = (char *)this + 128;
  }
  else {
    unint64_t v19 = (char *)*((void *)this + 17);
  }
  uint64_t v20 = *(void *)&v19[8 * (v17 >> 2)];
  ++*((void *)this + 18);
  ++*((_DWORD *)this + 38);
  uint64_t v21 = v20 + 112 * (v17 & 3);
  long long v22 = v49;
  long long v23 = v50;
  long long v24 = v51;
  *(void *)(v21 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v52;
  *(_OWORD *)(v21 + 16) = v23;
  *(_OWORD *)(v21 + 32) = v24;
  *(_OWORD *)uint64_t v21 = v22;
  re::BucketArray<RESubscriptionHandle,8ul>::BucketArray(v21 + 56, (uint64_t)&v52 + 8);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStateSceneData(&v49);
  uint64_t v26 = *((void *)this + 18);
  if (!v26)
  {
LABEL_69:
    re::internal::assertLog((re::internal *)4, v25, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
  }
  uint64_t v27 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)v4, v26 - 1);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>::init(v27, (uint64_t)v4, v57[0]);
  *(void *)&v66[0] = *((void *)this + 18) - 1;
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((re::ecs2::IKParametersSystem *)((char *)this + 160), v57, (uint64_t *)v66);
  unint64_t v28 = *((void *)this + 18);
  unint64_t v29 = *((void *)this + 33);
  if ((v28 & 0x3F) != 0) {
    unint64_t v30 = (v28 >> 6) + 1;
  }
  else {
    unint64_t v30 = v28 >> 6;
  }
  *((void *)this + 33) = v28;
  *(void *)&long long v49 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize(v5, v30, &v49);
  if (v28 && v29 > v28)
  {
    uint64_t v31 = 63;
    uint64_t v32 = *((void *)this + 33) & 0x3FLL;
    if (v32 && v32 != 63) {
      uint64_t v31 = ~(-1 << v32);
    }
    if (*((unsigned char *)this + 240)) {
      uint64_t v33 = (char *)this + 248;
    }
    else {
      uint64_t v33 = (char *)*((void *)this + 32);
    }
    *(void *)&v33[8 * *((void *)this + 29) - 8] &= v31;
  }
  unint64_t v34 = *((void *)this + 18);
  unint64_t v35 = *((void *)this + 39);
  if ((v34 & 0x3F) != 0) {
    unint64_t v36 = (v34 >> 6) + 1;
  }
  else {
    unint64_t v36 = v34 >> 6;
  }
  *((void *)this + 39) = v34;
  *(void *)&long long v49 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((re::ecs2::IKParametersSystem *)((char *)this + 272), v36, &v49);
  if (v34 && v35 > v34)
  {
    uint64_t v37 = 63;
    uint64_t v38 = *((void *)this + 39) & 0x3FLL;
    if (v38 && v38 != 63) {
      uint64_t v37 = ~(-1 << v38);
    }
    if (*((unsigned char *)this + 288)) {
      uint64_t v39 = (char *)this + 296;
    }
    else {
      uint64_t v39 = (char *)*((void *)this + 38);
    }
    *(void *)&v39[8 * *((void *)this + 35) - 8] &= v37;
  }
  unint64_t v16 = *(void *)&v66[0];
  uint64_t v15 = (char *)this + 272;
LABEL_49:
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v15, v16);
  if (!*((unsigned char *)this + 336)) {
    return;
  }
  unint64_t v40 = *((void *)this + 35);
  int v41 = *((_DWORD *)this + 72);
  if (v40 >= 0xB)
  {
    if (v41) {
      uint64_t v42 = (void *)((char *)this + 296);
    }
    else {
      uint64_t v42 = (void *)*((void *)this + 38);
    }
    uint64_t v44 = 8 * v40;
    while (!*v42)
    {
      ++v42;
      v44 -= 8;
      if (!v44) {
        return;
      }
    }
LABEL_65:
    uint64_t v48 = (re::ecs2::System *)*((void *)this + 40);
    if (!*((unsigned char *)v48 + 86)) {
      re::ecs2::System::queueToRun(v48, 0.0);
    }
    return;
  }
  if (v41)
  {
    uint64_t v43 = (uint64_t *)((char *)this + 296);
    if (!v40) {
      return;
    }
  }
  else
  {
    uint64_t v43 = (uint64_t *)*((void *)this + 38);
    if (!v40) {
      return;
    }
  }
  uint64_t v45 = 0;
  uint64_t v46 = 8 * v40;
  do
  {
    uint64_t v47 = *v43++;
    v45 |= v47;
    v46 -= 8;
  }
  while (v46);
  if (v45) {
    goto LABEL_65;
  }
}

uint64_t re::ecs2::IKParametersSystem::willRemoveSceneFromECSService(re::ecs2::IKParametersSystem *this, re::ecs2::Scene *a2)
{
  unint64_t v16 = a2;
  uint64_t v3 = (uint64_t *)((char *)this + 160);
  uint64_t result = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)this + 20, &v16);
  if (result != -1)
  {
    uint64_t v5 = *((void *)this + 21) + 16 * result;
    re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)this + 224, *(void *)(v5 + 8));
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)this + 272, *(void *)(v5 + 8));
    unint64_t v6 = (void *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)this + 104, *(void *)(v5 + 8));
    if (*v6)
    {
      int v7 = v6;
      *unint64_t v6 = 0;
      unint64_t v8 = v6 + 1;
      uint64_t v9 = *(void *)(v6[1] + 288);
      if (v9)
      {
        uint64_t v10 = v6[12];
        if (v10)
        {
          for (unint64_t i = 0; i != v10; ++i)
          {
            uint64_t v12 = re::BucketArray<RESubscriptionHandle,8ul>::operator[]((uint64_t)(v7 + 7), i);
            re::EventBus::unsubscribe(v9, *(void *)v12, *(void *)(v12 + 8));
          }
        }
      }
      re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)(v7 + 7));
      uint64_t v13 = 0;
      uint64_t v14 = v7 + 3;
      do
      {
        uint64_t v15 = (re::ecs2::ComponentBucketsBase *)v7[2];
        if (*(void *)v15) {
          re::ecs2::ComponentBucketsBase::removeBucket(v15, v14[v13]);
        }
        v14[v13++] = -1;
      }
      while (v13 != 4);
      *unint64_t v8 = 0;
      v8[1] = 0;
    }
    return re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::remove(v3, &v16);
  }
  return result;
}

void *re::ecs2::allocInfo_IKParametersComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_190, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_190))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF85108, "IKParametersComponent");
    __cxa_guard_release(&_MergedGlobals_190);
  }
  return &unk_26AF85108;
}

void re::ecs2::initInfo_IKParametersComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v16[0] = 0x4101A12855F3362;
  v16[1] = "IKParametersComponent";
  re::StringID::destroyString((re::StringID *)v16);
  *((_OWORD *)this + 2) = v17;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF850E0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF850E0);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 4ArcSharedObject::ArcSharedObject(this, 0) = 3;
      *(void *)(v7 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF850F0 = v7;
      unint64_t v8 = re::introspectionAllocator((re *)v7);
      uint64_t v9 = re::IntrospectionInfo<re::FixedArray<re::FullBodyIKSolver>>::get(1);
      uint64_t v10 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v10 = 1;
      *(void *)(v10 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "solvers";
      *(void *)(v10 + 16) = v9;
      *(void *)(v10 + 24) = 0;
      *(void *)(v10 + 32) = 0x3800000001;
      *(_DWORD *)(v10 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v10 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      *(void *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_26AF850F8 = v10;
      uint64_t v11 = re::introspectionAllocator((re *)v10);
      uint64_t v13 = re::introspect_AssetHandle((re *)1, v12);
      uint64_t v14 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v11 + 32))(v11, 72, 8);
      *(_DWORD *)uint64_t v14 = 1;
      *(void *)(v14 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "ikRigAssetHandle";
      *(void *)(v14 + 16) = v13;
      *(void *)(v14 + 24) = 0;
      *(void *)(v14 + 32) = 0x2000000002;
      *(_DWORD *)(v14 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v14 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      *(void *)(v14 + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_26AF85100 = v14;
      __cxa_guard_release(&qword_26AF850E0);
    }
  }
  *((void *)this + 2) = 0x6800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((void *)this + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = &qword_26AF850F0;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::IKParametersComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 1ArcSharedObject::ArcSharedObject(this, 0) = re::internal::defaultDestruct<re::ecs2::IKParametersComponent>;
  *((void *)this + re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 13) = re::internal::defaultConstructV2<re::ecs2::IKParametersComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::IKParametersComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v15 = v17;
}

double re::internal::defaultConstruct<re::ecs2::IKParametersComponent>(int a1, int a2, ArcSharedObject *this)
{
  *((void *)this + 12) = 0;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)(v3 + 16) = 0;
  *(unsigned char *)(v3 + 24) = 0;
  *(void *)uint64_t v3 = &unk_26E6F0560;
  double result = 0.0;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 8ArcSharedObject::ArcSharedObject(this, 0) = 0u;
  *(unsigned char *)(v3 + 96) = 0;
  return result;
}

void *re::internal::defaultDestruct<re::ecs2::IKParametersComponent>(uint64_t a1, uint64_t a2, void *a3)
{
  re::FixedArray<re::FullBodyIKSolver>::deinit(a3 + 7);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 4));
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

double re::internal::defaultConstructV2<re::ecs2::IKParametersComponent>(uint64_t a1)
{
  *(void *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 8ArcSharedObject::ArcSharedObject(this, 0) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(void *)(v1 + 16) = 0;
  *(unsigned char *)(v1 + 24) = 0;
  *(void *)uint64_t v1 = &unk_26E6F0560;
  double result = 0.0;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)(v1 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0u;
  *(_OWORD *)(v1 + 64) = 0u;
  *(_OWORD *)(v1 + 8ArcSharedObject::ArcSharedObject(this, 0) = 0u;
  *(unsigned char *)(v1 + 96) = 0;
  return result;
}

void *re::internal::defaultDestructV2<re::ecs2::IKParametersComponent>(void *a1)
{
  re::FixedArray<re::FullBodyIKSolver>::deinit(a1 + 7);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 4));
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_IKParametersComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"IKParametersComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_IKParametersComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_IKParametersComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::IKParametersComponent>, this);
}

void *re::ecs2::allocInfo_IKParametersSystem(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF850E8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF850E8))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF85180, "IKParametersSystem");
    __cxa_guard_release(&qword_26AF850E8);
  }
  return &unk_26AF85180;
}

void re::ecs2::initInfo_IKParametersSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v5[0] = 0x83C6DF79F9B0A3F6;
  v5[1] = "IKParametersSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0x17000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = &re::ecs2::initInfo_IKParametersSystem(re::IntrospectionBase *)::structureAttributes;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::IKParametersSystem>;
  *((void *)this + 1ArcSharedObject::ArcSharedObject(this, 0) = re::internal::defaultDestruct<re::ecs2::IKParametersSystem>;
  *((void *)this + 11) = re::internal::defaultRetain<re::ecs2::IKParametersSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 12) = re::internal::defaultRelease<re::ecs2::IKParametersSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 13) = re::internal::defaultConstructV2<re::ecs2::IKParametersSystem>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::IKParametersSystem>;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

re::ecs2::IKParametersSystem *re::internal::defaultConstruct<re::ecs2::IKParametersSystem>(uint64_t a1, uint64_t a2, re::ecs2::IKParametersSystem *a3)
{
  return re::ecs2::IKParametersSystem::IKParametersSystem(a3);
}

void *re::internal::defaultDestruct<re::ecs2::IKParametersSystem>(uint64_t a1, uint64_t a2, void *a3)
{
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a3 + 13);
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultDestructV2<re::ecs2::IKParametersSystem>(void *a1)
{
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 13);
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_IKParametersSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"IKParametersSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_IKParametersSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_IKParametersSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::IKParametersSystem>, this);
}

void re::ecs2::IKParametersSystem::~IKParametersSystem(re::ecs2::IKParametersSystem *this)
{
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 13);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::IKParametersSystem::typeInfo(re::ecs2::IKParametersSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"IKParametersSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_IKParametersSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_IKParametersSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::IKParametersSystem>, 0);
}

unint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::IKParametersComponent>::didDependentComponentChange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a3 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::IKParametersComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (result)
  {
    uint64_t v5 = (re::ecs2::Component *)result;
    uint64_t v6 = 24;
    unint64_t v7 = 0xFFFFFFFFLL;
    do
    {
      unint64_t v8 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a2 + 16), *(void *)(a2 + v6), v5);
      if (v8 != -1 && (v9 & 0xFFFFFF00000000) != 0)
      {
        unint64_t v11 = v8;
        unint64_t v7 = v9;
        goto LABEL_11;
      }
      v6 += 8;
    }
    while (v6 != 56);
    unint64_t v11 = -1;
LABEL_11:
    return re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>::setComponentState(a2, v11, v7);
  }
  return result;
}

uint64_t *re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v84 = *MEMORY[0x263EF8340];
  *(void *)a1 = a2;
  *(void *)(a1 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = a3;
  *(void *)(a1 + 16) = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a3 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::IKParametersComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)+ 480;
  for (uint64_t i = 24; i != 56; i += 8)
  {
    unint64_t v7 = (_anonymous_namespace_ *)re::ecs2::ComponentBucketsBase::addBucket(*(re::ecs2::ComponentBucketsBase **)(a1 + 16));
    *(void *)(a1 + i) = v7;
  }
  unint64_t v9 = *(re::EventBus **)(a3 + 288);
  if (v9)
  {
    uint64_t v82 = re::globalAllocators((re *)result)[2];
    uint64_t v10 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v82 + 32))(v82, 32, 0);
    *uint64_t v10 = &unk_26E6FA2D0;
    v10[1] = a1;
    _OWORD v10[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>::componentChangedHandler<REComponentDidChangeEvent>;
    void v10[3] = 0;
    unint64_t v83 = v10;
    uint64_t v11 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v81, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::IKParametersComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    uint64_t v13 = v12;
    uint64_t v14 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *uint64_t v14 = v11;
    v14[1] = v13;
    long long v15 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v81);
    uint64_t v79 = re::globalAllocators(v15)[2];
    unint64_t v16 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v79 + 32))(v79, 32, 0);
    *unint64_t v16 = &unk_26E6FA328;
    v16[1] = a1;
    void v16[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>::componentChangedHandler<REComponentDidActivateEvent>;
    v16[3] = 0;
    uint64_t v80 = v16;
    uint64_t v17 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v78, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::IKParametersComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    uint64_t v19 = v18;
    uint64_t v20 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *uint64_t v20 = v17;
    v20[1] = v19;
    uint64_t v21 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v78);
    uint64_t v76 = re::globalAllocators(v21)[2];
    long long v22 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v76 + 32))(v76, 32, 0);
    *long long v22 = &unk_26E6FA380;
    v22[1] = a1;
    void v22[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>::componentChangedHandler<REComponentWillDeactivateEvent>;
    v22[3] = 0;
    uint64_t v77 = v22;
    uint64_t v23 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v75, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::IKParametersComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    uint64_t v25 = v24;
    uint64_t v26 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *uint64_t v26 = v23;
    v26[1] = v25;
    uint64_t v27 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v75);
    uint64_t v73 = re::globalAllocators(v27)[2];
    unint64_t v28 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v73 + 32))(v73, 32, 0);
    *unint64_t v28 = &unk_26E6FA3D8;
    v28[1] = a1;
    uint64_t v28[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>::componentChangedHandler<REComponentDidAddEvent>;
    v28[3] = 0;
    uint64_t v74 = v28;
    uint64_t v29 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v72, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::IKParametersComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    uint64_t v31 = v30;
    uint64_t v32 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    void *v32 = v29;
    v32[1] = v31;
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v72);
    unint64_t result = (uint64_t *)(***(uint64_t (****)(void))(a2 + 224))();
    if (v33)
    {
      unint64_t v34 = result;
      uint64_t v35 = 8 * v33;
      do
      {
        uint64_t v36 = *v34++;
        uint64_t v70 = re::globalAllocators((re *)result)[2];
        uint64_t v71 = 0;
        uint64_t v37 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v70 + 32))(v70, 32, 0);
        *uint64_t v37 = &unk_26E6FA2D0;
        v37[1] = a1;
        v37[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>;
        v37[3] = 0;
        uint64_t v71 = v37;
        uint64_t v38 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v69, v36, 0);
        uint64_t v40 = v39;
        int v41 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *int v41 = v38;
        v41[1] = v40;
        uint64_t v42 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v69);
        uint64_t v67 = re::globalAllocators(v42)[2];
        uint64_t v68 = 0;
        uint64_t v43 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v67 + 32))(v67, 32, 0);
        void *v43 = &unk_26E6FA328;
        v43[1] = a1;
        uint64_t v43[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>;
        v43[3] = 0;
        uint64_t v68 = v43;
        uint64_t v44 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v66, v36, 0);
        uint64_t v46 = v45;
        uint64_t v47 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *uint64_t v47 = v44;
        v47[1] = v46;
        uint64_t v48 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v66);
        uint64_t v64 = re::globalAllocators(v48)[2];
        unint64_t v65 = 0;
        long long v49 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v64 + 32))(v64, 32, 0);
        *long long v49 = &unk_26E6FA380;
        v49[1] = a1;
        v49[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>;
        v49[3] = 0;
        unint64_t v65 = v49;
        uint64_t v50 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v63, v36, 0);
        uint64_t v52 = v51;
        uint64_t v53 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *uint64_t v53 = v50;
        v53[1] = v52;
        uint64_t v54 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v63);
        uint64_t v61 = re::globalAllocators(v54)[2];
        __int16 v62 = 0;
        long long v55 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v61 + 32))(v61, 32, 0);
        *long long v55 = &unk_26E6FA3D8;
        v55[1] = a1;
        v55[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>;
        v55[3] = 0;
        __int16 v62 = v55;
        uint64_t v56 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v60, v36, 0);
        uint64_t v58 = v57;
        uint64_t v59 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *uint64_t v59 = v56;
        v59[1] = v58;
        unint64_t result = (uint64_t *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v60);
        v35 -= 8;
      }
      while (v35);
    }
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>::componentChangedHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v4 + 56), &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(void *)(*(void *)(v4 + 64) + 16 * v5 + 8));
  if (!*(unsigned char *)(v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *(void *)(v4 + 176);
  int v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if (v7) {
      unint64_t v8 = (void *)(v4 + 192);
    }
    else {
      unint64_t v8 = *(void **)(v4 + 200);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    unint64_t v9 = (uint64_t *)(v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    unint64_t v9 = *(uint64_t **)(v4 + 200);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::IKParametersComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    unint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>::componentChangedHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v4 + 56), &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(void *)(*(void *)(v4 + 64) + 16 * v5 + 8));
  if (!*(unsigned char *)(v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *(void *)(v4 + 176);
  int v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if (v7) {
      unint64_t v8 = (void *)(v4 + 192);
    }
    else {
      unint64_t v8 = *(void **)(v4 + 200);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    unint64_t v9 = (uint64_t *)(v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    unint64_t v9 = *(uint64_t **)(v4 + 200);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::IKParametersComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    unint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>::componentChangedHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v4 + 56), &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(void *)(*(void *)(v4 + 64) + 16 * v5 + 8));
  if (!*(unsigned char *)(v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *(void *)(v4 + 176);
  int v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if (v7) {
      unint64_t v8 = (void *)(v4 + 192);
    }
    else {
      unint64_t v8 = *(void **)(v4 + 200);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    unint64_t v9 = (uint64_t *)(v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    unint64_t v9 = *(uint64_t **)(v4 + 200);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::IKParametersComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    unint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>::componentChangedHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v4 + 56), &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(void *)(*(void *)(v4 + 64) + 16 * v5 + 8));
  if (!*(unsigned char *)(v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *(void *)(v4 + 176);
  int v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if (v7) {
      unint64_t v8 = (void *)(v4 + 192);
    }
    else {
      unint64_t v8 = *(void **)(v4 + 200);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    unint64_t v9 = (uint64_t *)(v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    unint64_t v9 = *(uint64_t **)(v4 + 200);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::IKParametersComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    unint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(void *a1, void *a2)
{
  unint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    unint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6FA2D0;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6FA2D0;
  *(void *)(a2 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6FA328;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6FA328;
  *(void *)(a2 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6FA380;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6FA380;
  *(void *)(a2 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6FA3D8;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6FA3D8;
  *(void *)(a2 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

uint64_t *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>,4ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  uint64_t v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        unint64_t v4 = v3[1];
        if (v4 <= a2) {
          break;
        }
        unint64_t result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)*v3 + 32))(*v3, 448, 0);
        unint64_t result = (uint64_t *)re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::add((uint64_t)v3, &v5);
        unint64_t v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

uint64_t re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  *(void *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(void *)(a1 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
  uint64_t result = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>,4ul>::setBucketsCapacity(a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

re::ecs2::IKParametersSystem *re::ecs2::IKParametersSystem::IKParametersSystem(re::ecs2::IKParametersSystem *this)
{
  re::ecs2::System::System((uint64_t)this, 1, 1);
  *(void *)uint64_t v2 = &unk_26E6FA220;
  uint64_t v3 = v2 + 344;
  *(void *)(v2 + 112) = 0;
  *(void *)(v2 + 104) = 0;
  uint64_t v4 = v2 + 104;
  *(_DWORD *)(v2 + 12ArcSharedObject::ArcSharedObject(this, 0) = 1;
  *(void *)(v2 + 136) = 0;
  *(void *)(v2 + 144) = 0;
  *(void *)(v2 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 28) = 0;
  *(_DWORD *)(v2 + 152) = 0;
  *(_OWORD *)(v2 + 176) = 0u;
  *(_OWORD *)(v2 + 192) = 0u;
  *(_OWORD *)(v2 + 20re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0u;
  *(_OWORD *)(v2 + 224) = 0u;
  uint64_t v5 = (void *)(v2 + 224);
  *(_OWORD *)(v2 + 1re::HashTable<re::ecs2::Entity const*,re::ecs2::BillboardData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::deinit((uint64_t *)this + 60) = 0u;
  uint64_t v6 = (void *)(v2 + 160);
  *(_DWORD *)(v2 + 24ArcSharedObject::ArcSharedObject(this, 0) = 1;
  uint64_t v7 = (void *)(v2 + 272);
  *(_OWORD *)(v2 + 24re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0u;
  *(void *)(v2 + 28ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *(_OWORD *)(v2 + 264) = 0u;
  *(_DWORD *)(v2 + 28re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 1;
  *(_OWORD *)(v2 + 321) = 0u;
  *(_OWORD *)(v2 + 296) = 0u;
  *(_OWORD *)(v2 + 312) = 0u;
  uint64_t v10 = (_anonymous_namespace_ *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v5, 0);
  *((_DWORD *)this + 60) += 2;
  *((void *)this + 33) = 0;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v7, 0);
  *((_DWORD *)this + 72) += 2;
  *((void *)this + 39) = 0;
  *((void *)this + 4ArcSharedObject::ArcSharedObject(this, 0) = this;
  *((void *)this + 41) = v3;
  *((unsigned char *)this + 336) = 1;
  LOWORD(v12) = 257;
  HIDWORD(v12) = 1023969417;
  char v13 = 0;
  re::ecs2::System::setTaskOptions(this, &v12);
  *((void *)this + 43) = &unk_26E6FA1E0;
  *((void *)this + 44) = this;
  *((void *)this + 45) = re::ecs2::ComponentImpl<re::ecs2::RigComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  return this;
}

id re::internal::defaultRetain<re::ecs2::IKParametersSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::IKParametersSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
}

void *re::ecs2::allocInfo_SceneUnderstandingComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_191, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_191))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF85290, "SceneUnderstandingComponent");
    __cxa_guard_release(&_MergedGlobals_191);
  }
  return &unk_26AF85290;
}

void re::ecs2::initInfo_SceneUnderstandingComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v13[0] = 0xB7A4C0F509B6B38ALL;
  v13[1] = "SceneUnderstandingComponent";
  re::StringID::destroyString((re::StringID *)v13);
  *((_OWORD *)this + 2) = v14;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF85200, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF85200);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 4ArcSharedObject::ArcSharedObject(this, 0) = 3;
      *(void *)(v7 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF85240 = v7;
      unint64_t v8 = re::introspectionAllocator((re *)v7);
      uint64_t v10 = re::IntrospectionInfo<unsigned char [16]>::get(1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "identifier";
      *(void *)(v11 + 16) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x1900000001;
      *(_DWORD *)(v11 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v11 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      *(void *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF85248 = v11;
      __cxa_guard_release(&qword_26AF85200);
    }
  }
  *((void *)this + 2) = 0x3000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((void *)this + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = &qword_26AF85240;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::SceneUnderstandingComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 1ArcSharedObject::ArcSharedObject(this, 0) = re::internal::defaultDestruct<re::ecs2::SceneUnderstandingComponent>;
  *((void *)this + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::SceneUnderstandingComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::SceneUnderstandingComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v12 = v14;
}

void re::internal::defaultConstruct<re::ecs2::SceneUnderstandingComponent>(int a1, int a2, ArcSharedObject *this)
{
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)(v3 + 16) = 0;
  *(unsigned char *)(v3 + 24) = 0;
  *(void *)uint64_t v3 = &unk_26E6FA430;
  *(_WORD *)(v3 + 41) = 513;
}

uint64_t re::internal::defaultDestruct<re::ecs2::SceneUnderstandingComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

void re::internal::defaultConstructV2<re::ecs2::SceneUnderstandingComponent>(ArcSharedObject *a1)
{
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *(_OWORD *)a1 = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(void *)(v1 + 16) = 0;
  *(unsigned char *)(v1 + 24) = 0;
  *(void *)uint64_t v1 = &unk_26E6FA430;
  *(_WORD *)(v1 + 41) = 513;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::SceneUnderstandingComponent>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

void *re::ecs2::allocInfo_SceneUnderstandingRootComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF85210, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF85210))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF85308, "SceneUnderstandingRootComponent");
    __cxa_guard_release(&qword_26AF85210);
  }
  return &unk_26AF85308;
}

void re::ecs2::initInfo_SceneUnderstandingRootComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v13[0] = 0x2CBC1F2A37446606;
  v13[1] = "SceneUnderstandingRootComponent";
  re::StringID::destroyString((re::StringID *)v13);
  *((_OWORD *)this + 2) = v14;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF85218, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF85218);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 4ArcSharedObject::ArcSharedObject(this, 0) = 3;
      *(void *)(v7 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF85250 = v7;
      unint64_t v8 = re::introspectionAllocator((re *)v7);
      uint64_t v10 = re::introspect_size_t((re *)1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "updateId";
      *(void *)(v11 + 16) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x2000000001;
      *(_DWORD *)(v11 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v11 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      *(void *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF85258 = v11;
      __cxa_guard_release(&qword_26AF85218);
    }
  }
  *((void *)this + 2) = 0x2800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((void *)this + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = &qword_26AF85250;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::SceneUnderstandingRootComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 1ArcSharedObject::ArcSharedObject(this, 0) = re::internal::defaultDestruct<re::ecs2::SceneUnderstandingRootComponent>;
  *((void *)this + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::SceneUnderstandingRootComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::SceneUnderstandingRootComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v12 = v14;
}

void re::internal::defaultConstruct<re::ecs2::SceneUnderstandingRootComponent>(int a1, int a2, ArcSharedObject *this)
{
  *((void *)this + 4) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)(v3 + 16) = 0;
  *(unsigned char *)(v3 + 24) = 0;
  *(void *)uint64_t v3 = &unk_26E6F1BF8;
  *(void *)(v3 + 32) = 0;
}

uint64_t re::internal::defaultDestruct<re::ecs2::SceneUnderstandingRootComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

void re::internal::defaultConstructV2<re::ecs2::SceneUnderstandingRootComponent>(uint64_t a1)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(void *)(v1 + 16) = 0;
  *(unsigned char *)(v1 + 24) = 0;
  *(void *)uint64_t v1 = &unk_26E6F1BF8;
  *(void *)(v1 + 32) = 0;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::SceneUnderstandingRootComponent>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_SceneUnderstandingRootComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"SceneUnderstandingRootComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_SceneUnderstandingRootComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_SceneUnderstandingRootComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::SceneUnderstandingRootComponent>, this);
}

void *re::ecs2::allocInfo_SceneUnderstandingRenderOptionsComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF85220, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF85220))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF85380, "SceneUnderstandingRenderOptionsComponent");
    __cxa_guard_release(&qword_26AF85220);
  }
  return &unk_26AF85380;
}

void re::ecs2::initInfo_SceneUnderstandingRenderOptionsComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v29[0] = 0xDCE03EE9E8EB53DALL;
  v29[1] = "SceneUnderstandingRenderOptionsComponent";
  re::StringID::destroyString((re::StringID *)v29);
  *((_OWORD *)this + 2) = v30;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF85228, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF85228);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 4ArcSharedObject::ArcSharedObject(this, 0) = 3;
      *(void *)(v7 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF85260 = v7;
      unint64_t v8 = re::introspectionAllocator((re *)v7);
      uint64_t v10 = re::introspect_BOOL((re *)1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "enableOcclusion";
      *(void *)(v11 + 16) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x1900000001;
      *(_DWORD *)(v11 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v11 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      *(void *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF85268 = v11;
      long long v12 = re::introspectionAllocator((re *)v11);
      long long v14 = re::introspect_BOOL((re *)1, v13);
      uint64_t v15 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 72, 8);
      *(_DWORD *)uint64_t v15 = 1;
      *(void *)(v15 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "enableWireframe";
      *(void *)(v15 + 16) = v14;
      *(void *)(v15 + 24) = 0;
      *(void *)(v15 + 32) = 0x1A00000002;
      *(_DWORD *)(v15 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v15 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      *(void *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_26AF85270 = v15;
      unint64_t v16 = re::introspectionAllocator((re *)v15);
      uint64_t v18 = re::introspect_BOOL((re *)1, v17);
      uint64_t v19 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v16 + 32))(v16, 72, 8);
      *(_DWORD *)uint64_t v19 = 1;
      *(void *)(v19 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "enableDepthFeathering";
      *(void *)(v19 + 16) = v18;
      *(void *)(v19 + 24) = 0;
      *(void *)(v19 + 32) = 0x1B00000003;
      *(_DWORD *)(v19 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v19 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      *(void *)(v19 + 56) = 0;
      *(_DWORD *)(v19 + 64) = 0;
      qword_26AF85278 = v19;
      uint64_t v20 = re::introspectionAllocator((re *)v19);
      uint64_t v22 = re::introspect_BOOL((re *)1, v21);
      uint64_t v23 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v20 + 32))(v20, 72, 8);
      *(_DWORD *)uint64_t v23 = 1;
      *(void *)(v23 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "enableGuidedFilterOcclusionSupport";
      *(void *)(v23 + 16) = v22;
      *(void *)(v23 + 24) = 0;
      *(void *)(v23 + 32) = 0x1C00000004;
      *(_DWORD *)(v23 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v23 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      *(void *)(v23 + 56) = 0;
      *(_DWORD *)(v23 + 64) = 0;
      qword_26AF85280 = v23;
      uint64_t v24 = re::introspectionAllocator((re *)v23);
      uint64_t v26 = re::introspect_BOOL((re *)1, v25);
      uint64_t v27 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v24 + 32))(v24, 72, 8);
      *(_DWORD *)uint64_t v27 = 1;
      *(void *)(v27 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "enableGuidedFilterOcclusion";
      *(void *)(v27 + 16) = v26;
      *(void *)(v27 + 24) = 0;
      *(void *)(v27 + 32) = 0x1D00000005;
      *(_DWORD *)(v27 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v27 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      *(void *)(v27 + 56) = 0;
      *(_DWORD *)(v27 + 64) = 0;
      qword_26AF85288 = v27;
      __cxa_guard_release(&qword_26AF85228);
    }
  }
  *((void *)this + 2) = 0x2000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 6;
  *((void *)this + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = &qword_26AF85260;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::SceneUnderstandingRenderOptionsComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 1ArcSharedObject::ArcSharedObject(this, 0) = re::internal::defaultDestruct<re::ecs2::SceneUnderstandingRenderOptionsComponent>;
  *((void *)this + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::SceneUnderstandingRenderOptionsComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::SceneUnderstandingRenderOptionsComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v28 = v30;
}

void re::internal::defaultConstruct<re::ecs2::SceneUnderstandingRenderOptionsComponent>(int a1, int a2, ArcSharedObject *this)
{
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)(v3 + 16) = 0;
  *(unsigned char *)(v3 + 24) = 0;
  *(void *)uint64_t v3 = &unk_26E6F1D98;
  *(_DWORD *)(v3 + 25) = 0;
  *(_DWORD *)(v3 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 28) = 0;
}

uint64_t re::internal::defaultDestruct<re::ecs2::SceneUnderstandingRenderOptionsComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

void re::internal::defaultConstructV2<re::ecs2::SceneUnderstandingRenderOptionsComponent>(ArcSharedObject *a1)
{
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(void *)(v1 + 16) = 0;
  *(unsigned char *)(v1 + 24) = 0;
  *(void *)uint64_t v1 = &unk_26E6F1D98;
  *(_DWORD *)(v1 + 25) = 0;
  *(_DWORD *)(v1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 28) = 0;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::SceneUnderstandingRenderOptionsComponent>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_SceneUnderstandingRenderOptionsComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"SceneUnderstandingRenderOptionsComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_SceneUnderstandingRenderOptionsComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_SceneUnderstandingRenderOptionsComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::SceneUnderstandingRenderOptionsComponent>, this);
}

uint64_t re::ecs2::SceneUnderstandingComponent::initComponentType(uint64_t a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF85238, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF85238))
  {
    qword_26AF85230 = re::internal::getOrCreateInfo((re::internal *)"SceneUnderstandingComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_SceneUnderstandingComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_SceneUnderstandingComponent, (void (*)(re::IntrospectionBase *))&unk_26AF85208, 0);
    __cxa_guard_release(&qword_26AF85238);
  }
  re::getPrettyTypeName((re *)qword_26AF85230, (const re::IntrospectionBase *)&v25);
  uint64_t v2 = (re *)re::DynamicString::rfind((uint64_t)&v25, "Component", v23);
  if (v23[0])
  {
    uint64_t v3 = (v26[0] & 1) != 0 ? v26[0] >> 1 : LOBYTE(v26[0]) >> 1;
    if (v24 == v3 - 9)
    {
      re::DynamicString::substr((re::DynamicString *)&v25, 0, v24, (re::DynamicString *)&v21);
      re::DynamicString::operator=((re::DynamicString *)&v25, (re::DynamicString *)&v21);
      uint64_t v2 = (re *)v21;
      if (v21)
      {
        if (v22) {
          uint64_t v2 = (re *)(*(uint64_t (**)(void))(*(void *)v21 + 40))();
        }
      }
    }
  }
  uint64_t v4 = re::globalAllocators(v2);
  uint64_t v5 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4[2] + 32))(v4[2], 80, 8);
  uint64_t v6 = v5;
  if (v26[0]) {
    uint64_t v7 = (const char *)v26[1];
  }
  else {
    uint64_t v7 = (char *)v26 + 1;
  }
  *(void *)&v20.var0 = 0;
  v20.var1 = "";
  *(void *)uint64_t v6 = &unk_26E6E1EB8;
  *((void *)v6 + 1) = 0;
  *((_WORD *)v6 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = -1;
  re::StringID::StringID((_anonymous_namespace_ *)((char *)v6 + 24), &v20);
  *((_DWORD *)v6 + 1ArcSharedObject::ArcSharedObject(this, 0) = 4;
  *(void *)uint64_t v6 = &unk_26E6FA4B8;
  *((void *)v6 + 7) = 0;
  *((void *)v6 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
  *((void *)v6 + 6) = a1;
  *((void *)v6 + 9) = 0xFFFFFFFFLL;
  *((void *)v6 + 7) = re::ecs2::ComponentTypeBase::makeAllocator(*((re::ecs2::ComponentTypeBase **)v6 + 4), (const char *)0x30);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF85238, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF85238))
  {
    qword_26AF85230 = re::internal::getOrCreateInfo((re::internal *)"SceneUnderstandingComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_SceneUnderstandingComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_SceneUnderstandingComponent, (void (*)(re::IntrospectionBase *))&unk_26AF85208, 0);
    __cxa_guard_release(&qword_26AF85238);
  }
  uint64_t v8 = qword_26AF85230;
  re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v27);
  int v9 = *(char **)(v8 + 48);
  if (v9)
  {
    uint64_t v10 = *v9;
    if (*v9)
    {
      char v11 = v9[1];
      if (v11)
      {
        long long v12 = (unsigned __int8 *)(v9 + 2);
        do
        {
          uint64_t v10 = 31 * v10 + v11;
          int v13 = *v12++;
          char v11 = v13;
        }
        while (v13);
      }
    }
  }
  else
  {
    uint64_t v10 = 0;
  }
  uint64_t v21 = 2 * v10;
  uint64_t v22 = v9;
  long long v14 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, &v21);
  if (v14)
  {
    uint64_t v15 = *v14;
  }
  else
  {
    unint64_t v16 = 0;
    uint64_t v15 = 0xFFFFFFFFLL;
  }
  *((void *)v6 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v16;
  *((void *)v6 + 9) = v15;
  re::StringID::destroyString((re::StringID *)&v21);
  re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v27);
  re::ecs2::ComponentImpl<re::ecs2::SceneUnderstandingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType = v6;
  re::StringID::destroyString((re::StringID *)&v20);
  uint64_t v18 = re::ecs2::ComponentTypeRegistry::instance(v17);
  re::ecs2::ComponentTypeRegistry::add((re::ecs2::ComponentTypeRegistry *)v18, (re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SceneUnderstandingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  uint64_t result = v25;
  if (v25 && (v26[0] & 1) != 0) {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)v25 + 40))();
  }
  *((void *)re::ecs2::ComponentImpl<re::ecs2::SceneUnderstandingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
  + 1) = re::ecs2::SceneUnderstandingComponent::clone;
  return result;
}

uint64_t re::ecs2::SceneUnderstandingComponent::clone(re::ecs2::SceneUnderstandingComponent *this, const Component *a2)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)re::ecs2::ComponentImpl<re::ecs2::SceneUnderstandingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                                                + 32))(&v5);
  uint64_t v3 = v5;
  uuid_copy((unsigned __int8 *)(v5 + 25), (const unsigned __int8 *)this + 25);
  *(_WORD *)(v3 + 41) = *(_WORD *)((char *)this + 41);
  return v3;
}

void re::ecs2::SceneUnderstandingComponent::~SceneUnderstandingComponent(re::ecs2::SceneUnderstandingComponent *this)
{
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::SceneUnderstandingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::allocator()
{
  return *((void *)re::ecs2::ComponentImpl<re::ecs2::SceneUnderstandingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::SceneUnderstandingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::SceneUnderstandingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::SceneUnderstandingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

BOOL re::ecs2::SceneUnderstandingComponent::isExcludedFromRealityFile(re::ecs2::SceneUnderstandingComponent *this)
{
  return *((unsigned char *)this + 42) == 1;
}

double re::ecs2::ComponentType<re::ecs2::SceneUnderstandingComponent>::makeBindNode@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1);
  return re::makeRelativeBindNode(v5, a2, a3);
}

uint64_t re::ecs2::ComponentType<re::ecs2::SceneUnderstandingComponent>::isCustomComponent()
{
  return 0;
}

void re::ecs2::ComponentType<re::ecs2::SceneUnderstandingComponent>::~ComponentType(uint64_t a1)
{
  re::ecs2::ComponentType<re::ecs2::SceneUnderstandingComponent>::~ComponentType(a1);
  JUMPOUT(0x237DBCBD0);
}

void re::ecs2::ComponentType<re::ecs2::SceneUnderstandingComponent>::doMakeComponent(void *a1@<X8>)
{
  uint64_t v2 = (ArcSharedObject *)(*(uint64_t (**)(void, uint64_t, void))(**((void **)re::ecs2::ComponentImpl<re::ecs2::SceneUnderstandingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                                                                                + 7)
                                                                             + 32))(*((void *)re::ecs2::ComponentImpl<re::ecs2::SceneUnderstandingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType+ 7), 48, 0);
  *(_OWORD *)uint64_t v2 = 0u;
  *((_OWORD *)v2 + 1) = 0u;
  *((_OWORD *)v2 + 2) = 0u;
  ArcSharedObject::ArcSharedObject(v2, 0);
  *(void *)(v3 + 16) = 0;
  *(unsigned char *)(v3 + 24) = 0;
  *(void *)uint64_t v3 = &unk_26E6FA430;
  *(_WORD *)(v3 + 41) = 513;
  *a1 = v3;
}

uint64_t re::ecs2::ComponentType<re::ecs2::SceneUnderstandingComponent>::doMakeSceneComponentCollection(re *a1)
{
  uint64_t v2 = re::globalAllocators(a1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 656, 8);
  *(void *)(v3 + 16) = 0;
  *(void *)(v3 + 24) = 0;
  *(_DWORD *)(v3 + 32) = 0;
  *(void *)(v3 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *(void *)(v3 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = a1;
  *(_OWORD *)(v3 + 56) = 0u;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 8re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(void *)(v3 + 12ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *(void *)(v3 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 28) = 0;
  *(void *)uint64_t v3 = &unk_26E6FA528;
  *(void *)(v3 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
  *(void *)(v3 + 136) = 0;
  *(void *)(v3 + 144) = 0;
  *(_DWORD *)(v3 + 152) = 0;
  *(void *)(v3 + 20ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *(_DWORD *)(v3 + 20re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
  *(_DWORD *)(v3 + 192) = 0;
  *(_OWORD *)(v3 + 1re::HashTable<re::ecs2::Entity const*,re::ecs2::BillboardData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::deinit((uint64_t *)this + 60) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_DWORD *)(v3 + 24ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *(void *)(v3 + 224) = 0;
  *(void *)(v3 + 232) = 0;
  *(void *)(v3 + 216) = 0;
  *(void *)(v3 + 28re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
  *(_DWORD *)(v3 + 296) = 0;
  *(_OWORD *)(v3 + 24re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0u;
  *(_DWORD *)(v3 + 28ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *(_OWORD *)(v3 + 264) = 0u;
  *(void *)(v3 + 304) = 0;
  *(void *)(v3 + 312) = 0;
  *(_DWORD *)(v3 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 28) = 0;
  *(void *)(v3 + 32ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *(void *)(v3 + 376) = 0;
  *(_DWORD *)(v3 + 384) = 0;
  *(_DWORD *)(v3 + 36re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
  *(_OWORD *)(v3 + 336) = 0u;
  *(_OWORD *)(v3 + 352) = 0u;
  *(void *)(v3 + 392) = 0;
  *(void *)(v3 + 40ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *(_DWORD *)(v3 + 416) = 0;
  *(void *)(v3 + 40re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
  *(void *)(v3 + 464) = 0;
  *(_DWORD *)(v3 + 472) = 0;
  *(_DWORD *)(v3 + 456) = 0;
  *(_OWORD *)(v3 + 424) = 0u;
  *(_OWORD *)(v3 + 44ArcSharedObject::ArcSharedObject(this, 0) = 0u;
  *(void *)(v3 + 48ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *(void *)(v3 + 48re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
  *(void *)(v3 + 496) = 0;
  *(_DWORD *)(v3 + 504) = 1;
  *(void *)(v3 + 52ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *(void *)(v3 + 512) = 0;
  *(_DWORD *)(v3 + 536) = 0;
  *(void *)(v3 + 5re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 28) = 0;
  *(void *)(v3 + 552) = 0;
  *(void *)(v3 + 544) = 0;
  *(_DWORD *)(v3 + 5re::HashTable<re::ecs2::Entity const*,re::ecs2::BillboardData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::deinit((uint64_t *)this + 60) = 1;
  *(void *)(v3 + 576) = 0;
  *(void *)(v3 + 56re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
  *(_DWORD *)(v3 + 592) = 0;
  *(void *)(v3 + 584) = 0;
  *(void *)(v3 + 60re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
  *(void *)(v3 + 60ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *(_DWORD *)(v3 + 616) = 1;
  *(void *)(v3 + 632) = 0;
  *(void *)(v3 + 624) = 0;
  *(_DWORD *)(v3 + 64re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
  *(void *)(v3 + 64ArcSharedObject::ArcSharedObject(this, 0) = 0;
  uint64_t v4 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((void *)(v3 + 128), 0);
  ++*(_DWORD *)(v3 + 152);
  uint64_t v5 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((void *)(v3 + 216), 0);
  ++*(_DWORD *)(v3 + 240);
  uint64_t v6 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((void *)(v3 + 304), 0);
  ++*(_DWORD *)(v3 + 328);
  uint64_t v7 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((void *)(v3 + 392), 0);
  ++*(_DWORD *)(v3 + 416);
  return v3;
}

uint64_t re::ecs2::ComponentType<re::ecs2::SceneUnderstandingComponent>::doGetComponentIntrospectionInfo()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF85238, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF85238))
  {
    qword_26AF85230 = re::internal::getOrCreateInfo((re::internal *)"SceneUnderstandingComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_SceneUnderstandingComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_SceneUnderstandingComponent, (void (*)(re::IntrospectionBase *))&unk_26AF85208, 0);
    __cxa_guard_release(&qword_26AF85238);
  }
  return qword_26AF85230;
}

__n128 re::ecs2::ComponentType<re::ecs2::SceneUnderstandingComponent>::doGetComponentTypeID@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result = a1[4];
  *a2 = result;
  return result;
}

uint64_t re::ecs2::ComponentType<re::ecs2::SceneUnderstandingComponent>::doGetNetworkSyncInfo(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

uint64_t re::ecs2::ComponentType<re::ecs2::SceneUnderstandingComponent>::~ComponentType(uint64_t a1)
{
  *(void *)a1 = &unk_26E6FA4B8;
  if (*(void *)(a1 + 48)) {
    RESyncRelease();
  }
  re::internal::destroyPersistent<re::Allocator>((re *)"~ComponentType", 46, *(void (****)(void))(a1 + 56));
  *(void *)a1 = &unk_26E6E1EB8;
  re::StringID::destroyString((re::StringID *)(a1 + 24));
  return a1;
}

void re::ecs2::SceneComponentCollection<re::ecs2::SceneUnderstandingComponent>::~SceneComponentCollection(void *a1)
{
  re::ecs2::SceneComponentCollection<re::ecs2::SceneUnderstandingComponent>::~SceneComponentCollection(a1);
  JUMPOUT(0x237DBCBD0);
}

{
  uint64_t v2;
  uint64_t vars8;

  *a1 = &unk_26E6FA528;
  uint64_t v2 = (uint64_t)(a1 + 16);
  if (a1[16]) {
    re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 16));
  }
  if (a1[27]) {
    re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 27));
  }
  if (a1[38]) {
    re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 38));
  }
  if (a1[49]) {
    re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 49));
  }
  re::ecs2::ComponentBucketsBase::deinit((re::ecs2::ComponentBucketsBase *)(a1 + 60));
  re::BucketArray<unsigned long,8ul>::deinit((uint64_t)(a1 + 75));
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)(a1 + 75));
  re::BucketArray<re::HashTable<re::ecs2::Component *,re::DataArrayHandle<re::ecs2::Component *>,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,true,false>,8ul>::deinit((uint64_t)(a1 + 68));
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)(a1 + 68));
  re::BucketArray<re::DataArray<re::ecs2::Component *>,8ul>::deinit((uint64_t)(a1 + 61));
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)(a1 + 61));
  re::Event<re::Engine>::~Event((uint64_t)(a1 + 49));
  re::Event<re::Engine>::~Event((uint64_t)(a1 + 38));
  re::Event<re::Engine>::~Event((uint64_t)(a1 + 27));
  re::Event<re::Engine>::~Event(v2);
  re::ecs2::SceneComponentCollectionBase::~SceneComponentCollectionBase((re::ecs2::SceneComponentCollectionBase *)a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::SceneUnderstandingComponent>::didAdd(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 16)) {
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 128, a1);
  }
}

void re::ecs2::SceneComponentCollection<re::ecs2::SceneUnderstandingComponent>::doActivate(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 16)) {
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 216, a1);
  }
}

void re::ecs2::SceneComponentCollection<re::ecs2::SceneUnderstandingComponent>::doDeactivate(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 16)) {
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 304, a1);
  }
}

void re::ecs2::SceneComponentCollection<re::ecs2::SceneUnderstandingComponent>::willRemove(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 16))
  {
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 392, a1);
    uint64_t v4 = *(void *)(a2 + 16);
    if (v4)
    {
      uint64_t v5 = *(re::ecs2::Component ***)(a2 + 32);
      uint64_t v6 = (re::ecs2::ComponentBucketsBase *)(a1 + 480);
      uint64_t v7 = 8 * v4;
      do
      {
        uint64_t v8 = *v5++;
        re::ecs2::ComponentBucketsBase::removeComponentFromAllBuckets(v6, v8);
        v7 -= 8;
      }
      while (v7);
    }
  }
}

double re::ecs2::SceneComponentCollection<re::ecs2::SceneUnderstandingComponent>::registerCallbacks(uint64_t a1, void *a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (a2[3])
  {
    uint64_t v5 = a2;
    uint64_t v6 = re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::SceneUnderstandingComponent>;
    uint64_t v7 = 0;
    uint64_t v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SceneUnderstandingComponent>,re::Slice<re::ecs2::SceneUnderstandingComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::SceneUnderstandingComponent>*,re::Slice<re::ecs2::SceneUnderstandingComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::SceneUnderstandingComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SceneUnderstandingComponent>,re::Slice<re::ecs2::SceneUnderstandingComponent*>>::Subscription const&,re::Slice<re::ecs2::SceneUnderstandingComponent*>&&)#1}::__invoke;
    double result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 128, (uint64_t)&v5);
  }
  if (a2[4])
  {
    uint64_t v5 = a2;
    uint64_t v6 = re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::SceneUnderstandingComponent>;
    uint64_t v7 = 0;
    uint64_t v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SceneUnderstandingComponent>,re::Slice<re::ecs2::SceneUnderstandingComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::SceneUnderstandingComponent>*,re::Slice<re::ecs2::SceneUnderstandingComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::SceneUnderstandingComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SceneUnderstandingComponent>,re::Slice<re::ecs2::SceneUnderstandingComponent*>>::Subscription const&,re::Slice<re::ecs2::SceneUnderstandingComponent*>&&)#1}::__invoke;
    double result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 392, (uint64_t)&v5);
  }
  if (a2[5])
  {
    uint64_t v5 = a2;
    uint64_t v6 = re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::SceneUnderstandingComponent>;
    uint64_t v7 = 0;
    uint64_t v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SceneUnderstandingComponent>,re::Slice<re::ecs2::SceneUnderstandingComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::SceneUnderstandingComponent>*,re::Slice<re::ecs2::SceneUnderstandingComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::SceneUnderstandingComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SceneUnderstandingComponent>,re::Slice<re::ecs2::SceneUnderstandingComponent*>>::Subscription const&,re::Slice<re::ecs2::SceneUnderstandingComponent*>&&)#1}::__invoke;
    double result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 216, (uint64_t)&v5);
  }
  if (a2[6])
  {
    uint64_t v5 = a2;
    uint64_t v6 = re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::SceneUnderstandingComponent>;
    uint64_t v7 = 0;
    uint64_t v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SceneUnderstandingComponent>,re::Slice<re::ecs2::SceneUnderstandingComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::SceneUnderstandingComponent>*,re::Slice<re::ecs2::SceneUnderstandingComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::SceneUnderstandingComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SceneUnderstandingComponent>,re::Slice<re::ecs2::SceneUnderstandingComponent*>>::Subscription const&,re::Slice<re::ecs2::SceneUnderstandingComponent*>&&)#1}::__invoke;
    return re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 304, (uint64_t)&v5);
  }
  return result;
}

void re::ecs2::SceneComponentCollection<re::ecs2::SceneUnderstandingComponent>::unregisterCallbacks(uint64_t a1, void *a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (a2[3])
  {
    *(void *)&long long v4 = a2;
    *((void *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::SceneUnderstandingComponent>;
    uint64_t v5 = 0;
    uint64_t v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SceneUnderstandingComponent>,re::Slice<re::ecs2::SceneUnderstandingComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::SceneUnderstandingComponent>*,re::Slice<re::ecs2::SceneUnderstandingComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::SceneUnderstandingComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SceneUnderstandingComponent>,re::Slice<re::ecs2::SceneUnderstandingComponent*>>::Subscription const&,re::Slice<re::ecs2::SceneUnderstandingComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 128, &v4);
  }
  if (a2[4])
  {
    *(void *)&long long v4 = a2;
    *((void *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::SceneUnderstandingComponent>;
    uint64_t v5 = 0;
    uint64_t v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SceneUnderstandingComponent>,re::Slice<re::ecs2::SceneUnderstandingComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::SceneUnderstandingComponent>*,re::Slice<re::ecs2::SceneUnderstandingComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::SceneUnderstandingComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SceneUnderstandingComponent>,re::Slice<re::ecs2::SceneUnderstandingComponent*>>::Subscription const&,re::Slice<re::ecs2::SceneUnderstandingComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 392, &v4);
  }
  if (a2[5])
  {
    *(void *)&long long v4 = a2;
    *((void *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::SceneUnderstandingComponent>;
    uint64_t v5 = 0;
    uint64_t v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SceneUnderstandingComponent>,re::Slice<re::ecs2::SceneUnderstandingComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::SceneUnderstandingComponent>*,re::Slice<re::ecs2::SceneUnderstandingComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::SceneUnderstandingComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SceneUnderstandingComponent>,re::Slice<re::ecs2::SceneUnderstandingComponent*>>::Subscription const&,re::Slice<re::ecs2::SceneUnderstandingComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 216, &v4);
  }
  if (a2[6])
  {
    *(void *)&long long v4 = a2;
    *((void *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::SceneUnderstandingComponent>;
    uint64_t v5 = 0;
    uint64_t v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SceneUnderstandingComponent>,re::Slice<re::ecs2::SceneUnderstandingComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::SceneUnderstandingComponent>*,re::Slice<re::ecs2::SceneUnderstandingComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::SceneUnderstandingComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SceneUnderstandingComponent>,re::Slice<re::ecs2::SceneUnderstandingComponent*>>::Subscription const&,re::Slice<re::ecs2::SceneUnderstandingComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 304, &v4);
  }
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::SceneUnderstandingComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5 = *(void (**)(void))(a1 + 24);
  if (*(unsigned char *)(a1 + 16))
  {
    if (a4)
    {
      uint64_t v7 = 8 * a4;
      do
      {
        uint64_t v8 = *a3++;
        ((void (*)(uint64_t, void))v5)(v8, *(void *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    uint64_t v9 = 8 * a4;
    do
    {
      uint64_t v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::SceneUnderstandingComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5 = *(void (**)(void))(a1 + 32);
  if (*(unsigned char *)(a1 + 16))
  {
    if (a4)
    {
      uint64_t v7 = 8 * a4;
      do
      {
        uint64_t v8 = *a3++;
        ((void (*)(uint64_t, void))v5)(v8, *(void *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    uint64_t v9 = 8 * a4;
    do
    {
      uint64_t v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::SceneUnderstandingComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5 = *(void (**)(void))(a1 + 40);
  if (*(unsigned char *)(a1 + 16))
  {
    if (a4)
    {
      uint64_t v7 = 8 * a4;
      do
      {
        uint64_t v8 = *a3++;
        ((void (*)(uint64_t, void))v5)(v8, *(void *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    uint64_t v9 = 8 * a4;
    do
    {
      uint64_t v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::SceneUnderstandingComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5 = *(void (**)(void))(a1 + 48);
  if (*(unsigned char *)(a1 + 16))
  {
    if (a4)
    {
      uint64_t v7 = 8 * a4;
      do
      {
        uint64_t v8 = *a3++;
        ((void (*)(uint64_t, void))v5)(v8, *(void *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    uint64_t v9 = 8 * a4;
    do
    {
      uint64_t v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SceneUnderstandingComponent>,re::Slice<re::ecs2::SceneUnderstandingComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::SceneUnderstandingComponent>*,re::Slice<re::ecs2::SceneUnderstandingComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::SceneUnderstandingComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SceneUnderstandingComponent>,re::Slice<re::ecs2::SceneUnderstandingComponent*>>::Subscription const&,re::Slice<re::ecs2::SceneUnderstandingComponent*>&&)#1}::__invoke(uint64_t a1, void *a2, void *a3)
{
  long long v4 = (uint64_t (*)(void *, uint64_t, void, void))a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = (void *)(*a2 + (v5 >> 1));
  if (v5) {
    long long v4 = *(uint64_t (**)(void *, uint64_t, void, void))(*v6 + v4);
  }
  return v4(v6, a1, *a3, a3[1]);
}

re::ecs2::RenderPassGroupManagerStateTracking *re::ecs2::RenderPassGroupManagerStateTracking::RenderPassGroupManagerStateTracking(re::ecs2::RenderPassGroupManagerStateTracking *this, re::EntitlementManager *a2)
{
  v7[3] = *MEMORY[0x263EF8340];
  long long v4 = (_OWORD *)re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>::HierarchyStateTracking((uint64_t)this);
  *(void *)long long v4 = &unk_26E6FA5D0;
  *(_OWORD *)((char *)v4 + 24re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0u;
  long long v4 = (_OWORD *)((char *)v4 + 248);
  *((_WORD *)this + 14re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
  v4[1] = 0u;
  uint64_t v4[2] = 0u;
  *((void *)this + 3re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
  *((void *)this + 39) = a2;
  v7[0] = re::ecs2::ComponentImpl<re::ecs2::RenderPassGroupComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  v7[1] = re::ecs2::ComponentImpl<re::ecs2::RenderPassGroupReferenceComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  _OWORD v7[2] = re::ecs2::ComponentImpl<re::ecs2::WorldRootComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v6[0] = v7;
  v6[1] = 3;
  re::FixedArray<re::ecs2::ComponentTypeBase const*>::operator=((_anonymous_namespace_ *)v4, (uint64_t)v6);
  return this;
}

uint64_t re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>::HierarchyStateTracking(uint64_t a1)
{
  *(void *)a1 = &unk_26E6FA6C8;
  *(_OWORD *)(a1 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *(void *)(a1 + 44) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_DWORD *)(a1 + 8re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  uint64_t v2 = a1 + 56;
  *(void *)(a1 + 92) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 12ArcSharedObject::ArcSharedObject(this, 0) = 0u;
  *(_DWORD *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 104) = 0u;
  uint64_t v3 = a1 + 104;
  *(void *)(a1 + 14ArcSharedObject::ArcSharedObject(this, 0) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 16re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0u;
  *(_DWORD *)(a1 + 184) = 0;
  *(_OWORD *)(a1 + 152) = 0u;
  uint64_t v4 = a1 + 152;
  *(void *)(a1 + 18re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_DWORD *)(a1 + 232) = 0;
  *(_OWORD *)(a1 + 20ArcSharedObject::ArcSharedObject(this, 0) = 0u;
  uint64_t v5 = a1 + 200;
  *(void *)(a1 + 236) = 0x7FFFFFFFLL;
  return a1;
}

void re::ecs2::RenderPassGroupManagerStateTracking::buildPerEntityStateForDirtyEntityHierarchies(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1;
  if (!*(unsigned char *)(a1 + 296)) {
    goto LABEL_35;
  }
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 0;
    uint64_t v5 = (int *)(*(void *)(a1 + 24) + 8);
    while (1)
    {
      int v6 = *v5;
      v5 += 6;
      if (v6 < 0) {
        break;
      }
      if (v3 == ++v4)
      {
        LODWORD(v4) = *(_DWORD *)(a1 + 40);
        break;
      }
    }
  }
  else
  {
    LODWORD(v4) = 0;
  }
  if (v3 == v4) {
    goto LABEL_35;
  }
  uint64_t v7 = v4;
  uint64_t v8 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
  unsigned int v9 = *(_DWORD *)(a1 + 40);
  unsigned int v80 = v9;
  do
  {
    uint64_t v10 = *(void *)(*(void *)(v2 + 24) + 24 * v7 + 16);
    unint64_t v11 = *((unsigned __int16 *)v8[292] + 8);
    if (*(void *)(v10 + 224) <= v11) {
      goto LABEL_27;
    }
    uint64_t v12 = *(void *)(*(void *)(v10 + 240) + 8 * v11);
    if (!v12) {
      goto LABEL_27;
    }
    uint64_t v13 = *(void *)(v12 + 24);
    if (!v13) {
      goto LABEL_27;
    }
    uint64_t v14 = *(void *)(v12 + 40);
    uint64_t v15 = 8 * v13;
    do
    {
      unint64_t v16 = *(void **)v14;
      uint64_t v17 = (re::ecs2::EntityHandle *)(*(void *)v14 + 32);
      if (!*(void *)v17) {
        goto LABEL_22;
      }
      id WeakRetained = objc_loadWeakRetained((id *)(*(void *)v14 + 32));
      uint64_t v19 = WeakRetained;
      if (WeakRetained) {
        uint64_t v20 = (uint64_t)WeakRetained - 8;
      }
      else {
        uint64_t v20 = 0;
      }
      if (re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v20 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RenderPassGroupComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType))
      {
        uint64_t v92 = v20;
        a1 = re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a2, &v92);
        if (!a1)
        {
          if (!v19) {
            goto LABEL_22;
          }
LABEL_21:

          goto LABEL_22;
        }
      }
      else
      {
        re::ecs2::EntityHandle::reset(v17);
        objc_destroyWeak((id *)v17);
        *(void *)uint64_t v17 = 0;
      }
      a1 = (uint64_t)re::ecs2::Component::markDirty(v16);
      if (v19) {
        goto LABEL_21;
      }
LABEL_22:
      v14 += 8;
      v15 -= 8;
    }
    while (v15);
    unsigned int v9 = *(_DWORD *)(v2 + 40);
    LODWORD(v3) = v80;
    uint64_t v8 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
LABEL_27:
    if (v9 <= (int)v4 + 1) {
      unsigned int v21 = v4 + 1;
    }
    else {
      unsigned int v21 = v9;
    }
    while (1)
    {
      uint64_t v7 = (v4 + 1);
      if (v21 - 1 == v4) {
        break;
      }
      LODWORD(v4) = v4 + 1;
      unsigned int v22 = v7;
      if ((*(_DWORD *)(*(void *)(v2 + 24) + 24 * v7 + 8) & 0x80000000) != 0) {
        goto LABEL_34;
      }
    }
    unsigned int v22 = v21;
LABEL_34:
    LODWORD(v4) = v22;
  }
  while (v3 != v22);
LABEL_35:
  uint64_t v81 = *(unsigned int *)(a2 + 32);
  uint64_t v23 = 0;
  if (v81)
  {
    unint64_t v24 = (int *)(*(void *)(a2 + 16) + 8);
    while (1)
    {
      int v25 = *v24;
      v24 += 6;
      if (v25 < 0) {
        break;
      }
      if (v81 == ++v23)
      {
        LODWORD(v23) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  if (v81 != v23)
  {
    uint64_t v26 = v23;
    uint64_t v27 = *(void *)(a2 + 16);
    long long v28 = (void *)(v2 + 56);
    do
    {
      unint64_t v29 = *(void *)(v27 + 24 * v26 + 16);
      uint64_t v30 = *(void *)(v2 + 304);
      a1 = re::ecs2::RenderPassGroupService::enableRenderPassGroups((re::ecs2::RenderPassGroupService *)a1);
      if (a1)
      {
        if (!*v28
          || (unint64_t v31 = 0x94D049BB133111EBLL
                  * ((0xBF58476D1CE4E5B9 * (v29 ^ (v29 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v29 ^ (v29 >> 30))) >> 27)),
              uint64_t v32 = *(unsigned int *)(*(void *)(v2 + 64) + 4 * ((v31 ^ (v31 >> 31)) % *(unsigned int *)(v2 + 80))),
              v32 == 0x7FFFFFFF))
        {
LABEL_48:
          (*(void (**)(uint64_t *__return_ptr))(**(void **)v30 + 8))(&v92);
          if ((_BYTE)v92) {
            uint64_t v34 = v93;
          }
          else {
            uint64_t v34 = 0;
          }
          unint64_t v35 = *(void *)(v29 + 24);
          if (!v35 || (*(unsigned char *)(v35 + 288) & 0x80) != 0)
          {
            LOBYTE(v79) = 0;
            uint64_t v36 = 0;
          }
          else
          {
            uint64_t v36 = 0;
            int v79 = 0;
            while (1)
            {
              (*(void (**)(uint64_t *__return_ptr))(**(void **)v30 + 8))(&v92);
              if ((_BYTE)v92) {
                uint64_t v37 = v93;
              }
              else {
                uint64_t v37 = 0;
              }
              if (v34 != v37) {
                goto LABEL_74;
              }
              if (*v28)
              {
                unint64_t v38 = 0x94D049BB133111EBLL
                    * ((0xBF58476D1CE4E5B9 * (v35 ^ (v35 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v35 ^ (v35 >> 30))) >> 27));
                uint64_t v39 = *(unsigned int *)(*(void *)(v2 + 64) + 4 * ((v38 ^ (v38 >> 31)) % *(unsigned int *)(v2 + 80)));
                if (v39 != 0x7FFFFFFF) {
                  break;
                }
              }
LABEL_63:
              uint64_t v41 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v35 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RenderPassGroupComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
              if (v41)
              {
                uint64_t v36 = *(void *)(v35 + 296);
                int v79 = *(unsigned __int8 *)(v41 + 26);
                unint64_t v29 = v35;
              }
              else
              {
                uint64_t v42 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v35 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RenderPassGroupReferenceComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
                int v43 = v79;
                if (v42) {
                  int v43 = 0;
                }
                int v79 = v43;
                if (v42)
                {
                  uint64_t v36 = 0;
                  unint64_t v29 = v35;
                }
              }
              unint64_t v35 = *(void *)(v35 + 24);
              if (!v35 || (*(unsigned char *)(v35 + 288) & 0x80) != 0) {
                goto LABEL_74;
              }
            }
            uint64_t v40 = *(void *)(v2 + 72);
            while (*(void *)(v40 + 40 * v39 + 16) != v35)
            {
              LODWORD(v39) = *(_DWORD *)(v40 + 40 * v39 + 8) & 0x7FFFFFFF;
              if (v39 == 0x7FFFFFFF) {
                goto LABEL_63;
              }
            }
            uint64_t v44 = v40 + 40 * v39;
            uint64_t v36 = *(void *)(v44 + 24);
            LOBYTE(v79) = *(unsigned char *)(v44 + 32);
          }
LABEL_74:
          re::StackScratchAllocator::StackScratchAllocator((re::StackScratchAllocator *)&v92);
          uint64_t v85 = 0;
          uint64_t v86 = 0;
          int v87 = 1;
          uint64_t v89 = 0;
          unint64_t v90 = 0;
          uint64_t v88 = 0;
          int v91 = 0;
          re::BucketArray<re::ecs2::RenderPassGroupManagerStateTracking::buildRenderPassGroupsForEntityHierarchy(re::ecs2::Entity const*,re::ecs2::WorldRootProvider const&)::EntityRenderPassGroup,32ul>::init((uint64_t)&v85, (uint64_t)&v92, 1uLL);
          uint64_t v45 = re::BucketArray<re::ecs2::RenderPassGroupManagerStateTracking::buildRenderPassGroupsForEntityHierarchy(re::ecs2::Entity const*,re::ecs2::WorldRootProvider const&)::EntityRenderPassGroup,32ul>::addUninitialized((uint64_t)&v85);
          *(void *)uint64_t v45 = v29;
          *(void *)(v45 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v36;
          *(unsigned char *)(v45 + 16) = v79;
          *(void *)(v45 + 24) = v34;
          unint64_t v46 = v90;
          do
          {
LABEL_75:
            if (!v46)
            {
              while (v86)
                re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(&v85);
              if (v85 && (v87 & 1) == 0) {
                (*(void (**)(void))(*(void *)v85 + 40))();
              }
              re::StackScratchAllocator::~StackScratchAllocator((re::StackScratchAllocator *)&v92);
              goto LABEL_129;
            }
            uint64_t v47 = (long long *)re::BucketArray<re::ecs2::RenderPassGroupManagerStateTracking::buildRenderPassGroupsForEntityHierarchy(re::ecs2::Entity const*,re::ecs2::WorldRootProvider const&)::EntityRenderPassGroup,32ul>::operator[]((uint64_t)&v85, --v46);
            long long v48 = v47[1];
            long long v83 = *v47;
            long long v84 = v48;
            re::BucketArray<re::ecs2::RenderPassGroupManagerStateTracking::buildRenderPassGroupsForEntityHierarchy(re::ecs2::Entity const*,re::ecs2::WorldRootProvider const&)::EntityRenderPassGroup,32ul>::operator[]((uint64_t)&v85, v46);
            unint64_t v90 = v46;
            ++v91;
          }
          while ((*(unsigned char *)(v83 + 288) & 1) == 0);
          uint64_t v49 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v83 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RenderPassGroupComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
          if (v49
            || (v52 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v83 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RenderPassGroupReferenceComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)) != 0&& (v54 = *(void *)(v52 + 32), v53 = (id *)(v52 + 32), v54)&& (v55 = (char *)objc_loadWeakRetained(v53)) != 0&& (v56 = v55, uint64_t v49 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v55 + 24), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RenderPassGroupComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType), v56, v49))
          {
            if (*(unsigned char *)(v49 + 25) == 1)
            {
              uint64_t v50 = 0;
              int v51 = 0;
            }
            else
            {
              uint64_t v50 = *(void *)(*(void *)(v49 + 16) + 296);
              int v51 = *(unsigned __int8 *)(v49 + 26);
            }
            *((void *)&v83 + 1) = v50;
            LOBYTE(v84) = v51;
            if (v51) {
              goto LABEL_88;
            }
          }
          else
          {
            if (!(_BYTE)v84) {
              goto LABEL_96;
            }
LABEL_88:
            if (re::internal::render_on_top::never_use_this::g_enableRenderOnTopEntitlement)
            {
              uint64_t v57 = v83;
              if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF85400, memory_order_acquire) & 1) == 0
                && __cxa_guard_acquire(&qword_26AF85400))
              {
                re::Defaults::BOOLValue((re::Defaults *)"enableRenderOnTopSPIEntitlement", v75, (char *)&v94);
                if ((_BYTE)v94) {
                  char v76 = BYTE1(v94);
                }
                else {
                  char v76 = 1;
                }
                _MergedGlobals_192 = v76;
                __cxa_guard_release(&qword_26AF85400);
              }
              if (_MergedGlobals_192)
              {
                uint64_t v58 = *(void *)(v57 + 200);
                if (v58)
                {
                  if (*(void *)(v58 + 32)) {
                    RESyncableGetOwnerPeerID();
                  }
                  if (!*(void *)(v2 + 312)) {
                    LOBYTE(v84) = 0;
                  }
                }
              }
            }
          }
LABEL_96:
          uint64_t v59 = v83;
          if (*((void *)&v83 + 1))
          {
            *(void *)&long long v94 = *((void *)&v83 + 1);
            BYTE8(v94) = v84;
            unint64_t v60 = 0x94D049BB133111EBLL
                * ((0xBF58476D1CE4E5B9 * (v83 ^ ((unint64_t)v83 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                    * ((unint64_t)v83 ^ ((unint64_t)v83 >> 30))) >> 27));
            unint64_t v61 = v60 ^ (v60 >> 31);
            if (*v28)
            {
              unint64_t v62 = v61 % *(unsigned int *)(v2 + 80);
              uint64_t v63 = *(unsigned int *)(*(void *)(v2 + 64) + 4 * v62);
              if (v63 != 0x7FFFFFFF)
              {
                uint64_t v64 = *(void *)(v2 + 72);
                while (*(void *)(v64 + 40 * v63 + 16) != (void)v83)
                {
                  LODWORD(v63) = *(_DWORD *)(v64 + 40 * v63 + 8) & 0x7FFFFFFF;
                  if (v63 == 0x7FFFFFFF) {
                    goto LABEL_104;
                  }
                }
                goto LABEL_105;
              }
            }
            else
            {
              LODWORD(v62) = 0;
            }
LABEL_104:
            re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::addAsMove((uint64_t)v28, v62, v61, &v83, &v94);
            ++*(_DWORD *)(v2 + 96);
            uint64_t v59 = v83;
          }
LABEL_105:
          uint64_t v65 = *(void *)(v59 + 328);
          if (v65)
          {
            uint64_t v66 = v28;
            uint64_t v67 = *(uint64_t **)(v59 + 344);
            uint64_t v68 = 8 * v65;
            do
            {
              uint64_t v70 = *v67++;
              uint64_t v69 = v70;
              (*(void (**)(long long *__return_ptr))(**(void **)v30 + 8))(&v94);
              if ((_BYTE)v94) {
                uint64_t v71 = *((void *)&v94 + 1);
              }
              else {
                uint64_t v71 = 0;
              }
              if (*((void *)&v84 + 1) == v71) {
                uint64_t v72 = *((void *)&v83 + 1);
              }
              else {
                uint64_t v72 = 0;
              }
              if (*((void *)&v84 + 1) == v71) {
                char v73 = v84;
              }
              else {
                char v73 = 0;
              }
              uint64_t v74 = re::BucketArray<re::ecs2::RenderPassGroupManagerStateTracking::buildRenderPassGroupsForEntityHierarchy(re::ecs2::Entity const*,re::ecs2::WorldRootProvider const&)::EntityRenderPassGroup,32ul>::addUninitialized((uint64_t)&v85);
              *(void *)uint64_t v74 = v69;
              *(void *)(v74 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v72;
              *(unsigned char *)(v74 + 16) = v73;
              *(void *)(v74 + 24) = v71;
              v68 -= 8;
            }
            while (v68);
            unint64_t v46 = v90;
            long long v28 = v66;
          }
          goto LABEL_75;
        }
        uint64_t v33 = *(void *)(v2 + 72);
        while (*(void *)(v33 + 40 * v32 + 16) != v29)
        {
          LODWORD(v32) = *(_DWORD *)(v33 + 40 * v32 + 8) & 0x7FFFFFFF;
          if (v32 == 0x7FFFFFFF) {
            goto LABEL_48;
          }
        }
      }
LABEL_129:
      uint64_t v27 = *(void *)(a2 + 16);
      if (*(_DWORD *)(a2 + 32) <= (v23 + 1)) {
        int v77 = v23 + 1;
      }
      else {
        int v77 = *(_DWORD *)(a2 + 32);
      }
      while (1)
      {
        uint64_t v26 = (v23 + 1);
        if (v77 - 1 == v23) {
          break;
        }
        LODWORD(v23) = v23 + 1;
        int v78 = v26;
        if ((*(_DWORD *)(v27 + 24 * v26 + 8) & 0x80000000) != 0) {
          goto LABEL_136;
        }
      }
      int v78 = v77;
LABEL_136:
      LODWORD(v23) = v78;
    }
    while (v81 != v78);
  }
  *(unsigned char *)(v2 + 296) = 0;
}

void re::ecs2::RenderPassGroupManagerStateTracking::clearEntityHierarchyStateData(uint64_t this, uint64_t a2)
{
  *(unsigned char *)(this + 296) = 1;
  re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>::clearEntityHierarchyStateData(this, a2);
}

void re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>::clearEntityHierarchyStateData(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 84))
  {
    re::StackScratchAllocator::StackScratchAllocator((re::StackScratchAllocator *)v28);
    v22[0] = 0;
    v22[1] = 0;
    int v23 = 1;
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    uint64_t v24 = 0;
    int v27 = 0;
    re::BucketArray<re::ecs2::Entity const*,32ul>::init((uint64_t)v22, (uint64_t)v28, 1uLL);
    *(void *)re::BucketArray<re::ecs2::Entity const*,32ul>::addUninitialized((uint64_t)v22) = a2;
    uint64_t v4 = v26;
    while (v4)
    {
      unint64_t v5 = *(void *)re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v22, v4 - 1);
      re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v22, v26 - 1);
      uint64_t v4 = --v26;
      ++v27;
      if (*(void *)(a1 + 56))
      {
        unint64_t v6 = 0x94D049BB133111EBLL
           * ((0xBF58476D1CE4E5B9 * (v5 ^ (v5 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v5 ^ (v5 >> 30))) >> 27));
        unint64_t v7 = (v6 ^ (v6 >> 31)) % *(unsigned int *)(a1 + 80);
        uint64_t v8 = *(void *)(a1 + 64);
        uint64_t v9 = *(unsigned int *)(v8 + 4 * v7);
        if (v9 != 0x7FFFFFFF)
        {
          uint64_t v10 = *(void *)(a1 + 72);
          if (*(void *)(v10 + 40 * v9 + 16) == v5)
          {
            *(_DWORD *)(v8 + 4 * v7) = *(_DWORD *)(v10 + 40 * v9 + 8) & 0x7FFFFFFF;
LABEL_10:
            uint64_t v12 = *(void *)(a1 + 72);
            uint64_t v13 = v12 + 40 * v9;
            int v16 = *(_DWORD *)(v13 + 8);
            uint64_t v15 = (int *)(v13 + 8);
            int v14 = v16;
            if (v16 < 0)
            {
              *uint64_t v15 = v14 & 0x7FFFFFFF;
              uint64_t v12 = *(void *)(a1 + 72);
              int v14 = *(_DWORD *)(v12 + 40 * v9 + 8);
            }
            *(_DWORD *)(v12 + 40 * v9 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = *(_DWORD *)(a1 + 92) | v14 & 0x80000000;
            --*(_DWORD *)(a1 + 84);
            int v17 = *(_DWORD *)(a1 + 96) + 1;
            *(_DWORD *)(a1 + 92) = v9;
            *(_DWORD *)(a1 + 96) = v17;
          }
          else
          {
            while (1)
            {
              uint64_t v11 = v9;
              uint64_t v9 = *(_DWORD *)(v10 + 40 * v9 + 8) & 0x7FFFFFFF;
              if (v9 == 0x7FFFFFFF) {
                break;
              }
              if (*(void *)(v10 + 40 * v9 + 16) == v5)
              {
                *(_DWORD *)(v10 + 40 * v11 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = *(_DWORD *)(v10 + 40 * v11 + 8) & 0x80000000 | *(_DWORD *)(v10 + 40 * v9 + 8) & 0x7FFFFFFF;
                goto LABEL_10;
              }
            }
          }
        }
      }
      uint64_t v18 = *(void *)(v5 + 328);
      if (v18)
      {
        uint64_t v19 = *(uint64_t **)(v5 + 344);
        uint64_t v20 = 8 * v18;
        do
        {
          uint64_t v21 = *v19++;
          *(void *)re::BucketArray<re::ecs2::Entity const*,32ul>::addUninitialized((uint64_t)v22) = v21;
          v20 -= 8;
        }
        while (v20);
        uint64_t v4 = v26;
      }
    }
    re::BucketArray<re::ecs2::Entity const*,32ul>::deinit((uint64_t)v22);
    if (v22[0])
    {
      if ((v23 & 1) == 0) {
        (*(void (**)(void))(*(void *)v22[0] + 40))();
      }
    }
    re::StackScratchAllocator::~StackScratchAllocator((re::StackScratchAllocator *)v28);
  }
}

void re::ecs2::RenderPassGroupManager::updateGroupData(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 8;
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)(a1 + 312) = a2;
  uint64_t v4 = a1 + 112;
  (*(void (**)(uint64_t, uint64_t))(v2 + 32))(a1 + 8, a1 + 112);
  re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::clear(v4);
  re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::clear(v3 + 200);
  *(void *)(v3 + 304) = 0;
}

double re::ecs2::RenderPassGroupManager::addBoundsTable(uint64_t a1, StringID *a2, uint64_t a3, long long *a4)
{
  uint64_t v8 = (void *)(a1 + 328);
  uint64_t v9 = a3 & 0xFFFFFFFFFFFFFFFLL;
  if (*(void *)(a1 + 376) < (a3 & 0xFFFFFFFFFFFFFFFuLL))
  {
    re::HashTable<re::StringID,re::Pair<re::FrameCount,re::HashTable<unsigned long long,re::ecs2::RenderPassGroupBoundsInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,true>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(a1 + 328);
    *(void *)(a1 + 376) = v9;
  }
  uint64_t v16 = a3;
  int v20 = 0;
  long long v17 = *a4;
  *(void *)a4 = 0;
  *((void *)a4 + 1) = 0;
  uint64_t v18 = *((void *)a4 + 2);
  *((void *)a4 + 2) = 0;
  long long v19 = *(long long *)((char *)a4 + 24);
  *(long long *)((char *)a4 + 24) = xmmword_23436F740;
  unint64_t v10 = 0xBF58476D1CE4E5B9 * ((*(void *)&a2->var0 >> 31) ^ (*(void *)&a2->var0 >> 1));
  unint64_t v11 = (0x94D049BB133111EBLL * (v10 ^ (v10 >> 27))) ^ ((0x94D049BB133111EBLL * (v10 ^ (v10 >> 27))) >> 31);
  if (!*v8)
  {
    LODWORD(v12) = 0;
    goto LABEL_10;
  }
  unint64_t v12 = v11 % *(unsigned int *)(a1 + 352);
  uint64_t v13 = *(unsigned int *)(*(void *)(a1 + 336) + 4 * v12);
  if (v13 == 0x7FFFFFFF)
  {
LABEL_10:
    re::HashTable<re::StringID,re::Pair<re::FrameCount,re::HashTable<unsigned long long,re::ecs2::RenderPassGroupBoundsInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,true>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove((uint64_t)v8, v12, v11, a2, &v16);
    ++*(_DWORD *)(a1 + 368);
    return re::HashTable<unsigned long long,re::ecs2::RenderPassGroupBoundsInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)&v17);
  }
  uint64_t v14 = *(void *)(a1 + 344);
  while (!re::StringID::operator==((void *)(v14 + 80 * v13 + 8), a2))
  {
    uint64_t v13 = *(_DWORD *)(v14 + 80 * v13) & 0x7FFFFFFF;
    if (v13 == 0x7FFFFFFF) {
      goto LABEL_10;
    }
  }
  return re::HashTable<unsigned long long,re::ecs2::RenderPassGroupBoundsInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)&v17);
}

void re::ecs2::RenderPassGroupManager::mergeBoundsTable(uint64_t a1, StringID *a2, uint64_t a3, uint64_t a4)
{
  if (*(void *)(a1 + 376) == (a3 & 0xFFFFFFFFFFFFFFFLL)
    && (uint64_t v8 = re::HashTable<re::StringID,re::Pair<re::FrameCount,re::HashTable<unsigned long long,re::ecs2::RenderPassGroupBoundsInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,true>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(a1 + 328, a2)) != 0)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(unsigned int *)(a4 + 32);
    if (v10)
    {
      uint64_t v11 = 0;
      unint64_t v12 = (int *)(*(void *)(a4 + 16) + 8);
      while (1)
      {
        int v13 = *v12;
        v12 += 20;
        if (v13 < 0) {
          break;
        }
        if (v10 == ++v11)
        {
          LODWORD(v11) = *(_DWORD *)(a4 + 32);
          break;
        }
      }
    }
    else
    {
      LODWORD(v11) = 0;
    }
    if (v10 != v11)
    {
      uint64_t v14 = v11;
      uint64_t v15 = (void *)(v8 + 8);
      uint64_t v16 = *(void *)(a4 + 16);
      do
      {
        long long v17 = (float32x4_t *)(v16 + 80 * v14);
        unint64_t v20 = v17[1].u64[0];
        long long v19 = v17 + 1;
        unint64_t v18 = v20;
        uint64_t v21 = v19 + 1;
        unint64_t v22 = 0x94D049BB133111EBLL
            * ((0xBF58476D1CE4E5B9 * (v20 ^ (v20 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v20 ^ (v20 >> 30))) >> 27));
        unint64_t v23 = v22 ^ (v22 >> 31);
        if (*v15)
        {
          uint64_t v24 = *(unsigned int *)(*(void *)(v9 + 16) + 4 * (v23 % *(unsigned int *)(v9 + 32)));
          if (v24 != 0x7FFFFFFF)
          {
            uint64_t v25 = *(void *)(v9 + 24);
            while (*(void *)(v25 + 80 * v24 + 16) != v18)
            {
              LODWORD(v24) = *(_DWORD *)(v25 + 80 * v24 + 8) & 0x7FFFFFFF;
              if (v24 == 0x7FFFFFFF) {
                goto LABEL_19;
              }
            }
            uint64_t v37 = (float32x4_t *)(v25 + 80 * v24);
            float32x4_t v38 = *v21;
            float32x4_t v39 = v37[2];
            float32x4_t v40 = v37[3];
            v39.i32[3] = 0;
            v38.i32[3] = 0;
            v37[2] = vminnmq_f32(v39, v38);
            float32x4_t v41 = v19[2];
            v40.i32[3] = 0;
            v41.i32[3] = 0;
            v37[3] = vmaxnmq_f32(v40, v41);
            v37[4].i8[0] |= *(unsigned char *)(v16 + 80 * v14 + 64);
            goto LABEL_32;
          }
LABEL_19:
          unint64_t v26 = v23 % *(unsigned int *)(v9 + 32);
          uint64_t v27 = *(unsigned int *)(*(void *)(v9 + 16) + 4 * v26);
          if (v27 != 0x7FFFFFFF)
          {
            uint64_t v28 = *(void *)(v9 + 24);
            while (*(void *)(v28 + 80 * v27 + 16) != v18)
            {
              LODWORD(v27) = *(_DWORD *)(v28 + 80 * v27 + 8) & 0x7FFFFFFF;
              if (v27 == 0x7FFFFFFF) {
                goto LABEL_25;
              }
            }
            goto LABEL_32;
          }
        }
        else
        {
          unint64_t v26 = 0;
        }
LABEL_25:
        uint64_t v29 = *(unsigned int *)(v9 + 44);
        if (v29 == 0x7FFFFFFF)
        {
          uint64_t v29 = *(unsigned int *)(v9 + 40);
          int v30 = v29;
          if (v29 == *(_DWORD *)(v9 + 32))
          {
            uint64_t v31 = v10;
            re::HashTable<unsigned long long,re::ecs2::RenderPassGroupBoundsInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(v9 + 8, 2 * *(_DWORD *)(v9 + 36));
            uint64_t v10 = v31;
            unint64_t v26 = v23 % *(unsigned int *)(v9 + 32);
            int v30 = *(_DWORD *)(v9 + 40);
            unint64_t v18 = v19->i64[0];
          }
          *(_DWORD *)(v9 + 4ArcSharedObject::ArcSharedObject(this, 0) = v30 + 1;
          uint64_t v32 = *(void *)(v9 + 24);
          int v33 = *(_DWORD *)(v32 + 80 * v29 + 8);
        }
        else
        {
          uint64_t v32 = *(void *)(v9 + 24);
          int v33 = *(_DWORD *)(v32 + 80 * v29 + 8);
          *(_DWORD *)(v9 + 44) = v33 & 0x7FFFFFFF;
        }
        *(_DWORD *)(v32 + 80 * v29 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v33 | 0x80000000;
        *(_DWORD *)(*(void *)(v9 + 24) + 80 * v29 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = *(_DWORD *)(*(void *)(v9 + 24) + 80 * v29 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(v9 + 16) + 4 * v26);
        *(void *)(*(void *)(v9 + 24) + 80 * v29) = v23;
        *(void *)(*(void *)(v9 + 24) + 80 * v29 + 16) = v18;
        uint64_t v34 = (_OWORD *)(*(void *)(v9 + 24) + 80 * v29);
        float32x4_t v35 = *v21;
        float32x4_t v36 = v19[3];
        v34[3] = v19[2];
        v34[4] = v36;
        _OWORD v34[2] = v35;
        *(_DWORD *)(*(void *)(v9 + 16) + 4 * v26) = v29;
        ++*(_DWORD *)(v9 + 36);
        ++*(_DWORD *)(v9 + 48);
LABEL_32:
        unsigned int v42 = *(_DWORD *)(a4 + 32);
        uint64_t v16 = *(void *)(a4 + 16);
        if (v42 <= (int)v11 + 1) {
          unsigned int v42 = v11 + 1;
        }
        while (1)
        {
          uint64_t v14 = (v11 + 1);
          if (v42 - 1 == v11) {
            break;
          }
          LODWORD(v11) = v11 + 1;
          unsigned int v43 = v14;
          if ((*(_DWORD *)(v16 + 80 * v14 + 8) & 0x80000000) != 0) {
            goto LABEL_38;
          }
        }
        unsigned int v43 = v42;
LABEL_38:
        LODWORD(v11) = v43;
      }
      while (v10 != v43);
    }
  }
  else
  {
    re::ecs2::RenderPassGroupManager::addBoundsTable(a1, a2, a3, (long long *)a4);
  }
}

uint64_t re::HashTable<re::StringID,re::Pair<re::FrameCount,re::HashTable<unsigned long long,re::ecs2::RenderPassGroupBoundsInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,true>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(uint64_t a1, void *a2)
{
  if (!*(void *)a1) {
    return 0;
  }
  unint64_t v3 = 0xBF58476D1CE4E5B9 * ((*a2 >> 31) ^ (*a2 >> 1));
  uint64_t v4 = *(unsigned int *)(*(void *)(a1 + 8)
                       + 4
                       * (((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) ^ ((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) >> 31))
                        % *(unsigned int *)(a1 + 24)));
  if (v4 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 16);
  while (!re::StringID::operator==((void *)(v5 + 80 * v4 + 8), a2))
  {
    uint64_t v4 = *(_DWORD *)(v5 + 80 * v4) & 0x7FFFFFFF;
    if (v4 == 0x7FFFFFFF) {
      return 0;
    }
  }
  return v5 + 80 * v4 + 24;
}

void *re::ecs2::RenderPassGroupManager::boundsTable(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a1 + 328;
  uint64_t v5 = a3 & 0xFFFFFFFFFFFFFFFLL;
  if (*(void *)(a1 + 376) < (a3 & 0xFFFFFFFFFFFFFFFuLL))
  {
    re::HashTable<re::StringID,re::Pair<re::FrameCount,re::HashTable<unsigned long long,re::ecs2::RenderPassGroupBoundsInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,true>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(a1 + 328);
    *(void *)(a1 + 376) = v5;
  }
  double result = (void *)re::HashTable<re::StringID,re::Pair<re::FrameCount,re::HashTable<unsigned long long,re::ecs2::RenderPassGroupBoundsInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,true>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(v4, a2);
  if (result)
  {
    uint64_t v8 = *result & 0xFFFFFFFFFFFFFFFLL;
    BOOL v10 = v5 != 0xFFFFFFFFFFFFFFFLL && v8 == v5;
    if (v8 == 0xFFFFFFFFFFFFFFFLL) {
      BOOL v11 = v5 == 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      BOOL v11 = v10;
    }
    if (v11) {
      ++result;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t re::ecs2::RenderPassGroupManager::computeCanUseRenderPassGroupsForSorting(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  v29[1] = *MEMORY[0x263EF8340];
  uint64_t v23 = a2;
  uint64_t v11 = re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(a1 + 64, &v23);
  if (v11) {
    BOOL v12 = *(unsigned char *)(v11 + 8) == 0;
  }
  else {
    BOOL v12 = 1;
  }
  int v13 = (_anonymous_namespace_ *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v23 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshSortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v13) {
    int v14 = 0;
  }
  else {
    int v14 = a6 & ~a5 & v12;
  }
  if (v14 == 1 && (*(void *)a3 < 0xFFFFFFFFFFFFFFFELL || (*(void *)a3 & 1) != 0 || **(unsigned char **)(a3 + 8)))
  {
    unint64_t v15 = *(void *)(a1 + 432);
    unint64_t v16 = a4 & 0xFFFFFFFFFFFFFFFLL;
    if (v15 == (a4 & 0xFFFFFFFFFFFFFFFLL))
    {
      int v13 = (_anonymous_namespace_ *)re::HashTable<re::StringID,re::Pair<re::FrameCount,re::HashTable<unsigned long long,re::ecs2::RenderPassGroupBoundsInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,true>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(a1 + 384, (void *)a3);
      if (v13)
      {
        re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add((uint64_t)v13 + 8, &v23);
        return v14 ^ 1u;
      }
    }
    if (v15 < v16)
    {
      re::HashTable<re::StringID,re::Pair<re::FrameCount,re::HashSet<re::ecs2::Entity const*,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>,true>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(a1 + 384);
      *(void *)(a1 + 432) = v16;
    }
    v29[0] = v23;
    memset(v24, 0, sizeof(v24));
    int v25 = 0;
    uint64_t v26 = 0x7FFFFFFFLL;
    re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add((uint64_t)v24, v29);
    uint64_t v27 = a4;
    re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::HashSetBase((uint64_t)v28, (uint64_t)v24);
    unint64_t v17 = 0xBF58476D1CE4E5B9 * ((*(void *)a3 >> 31) ^ (*(void *)a3 >> 1));
    unint64_t v18 = (0x94D049BB133111EBLL * (v17 ^ (v17 >> 27))) ^ ((0x94D049BB133111EBLL * (v17 ^ (v17 >> 27))) >> 31);
    if (*(void *)(a1 + 384))
    {
      unint64_t v19 = v18 % *(unsigned int *)(a1 + 408);
      uint64_t v20 = *(unsigned int *)(*(void *)(a1 + 392) + 4 * v19);
      if (v20 != 0x7FFFFFFF)
      {
        uint64_t v21 = *(void *)(a1 + 400);
        while (!re::StringID::operator==((void *)(v21 + 80 * v20 + 8), (void *)a3))
        {
          uint64_t v20 = *(_DWORD *)(v21 + 80 * v20) & 0x7FFFFFFF;
          if (v20 == 0x7FFFFFFF) {
            goto LABEL_23;
          }
        }
        goto LABEL_24;
      }
    }
    else
    {
      LODWORD(v19) = 0;
    }
LABEL_23:
    re::HashTable<re::StringID,re::Pair<re::FrameCount,re::HashSet<re::ecs2::Entity const*,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>,true>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(a1 + 384, v19, v18, (const StringID *)a3, &v27);
    ++*(_DWORD *)(a1 + 424);
LABEL_24:
    re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit(v28);
    re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)v24);
  }
  return v14 ^ 1u;
}

uint64_t re::ecs2::RenderPassGroupManager::renderPassGroupPerEntity(re::ecs2::RenderPassGroupManager *this)
{
  return (uint64_t)this + 64;
}

double re::ecs2::RenderPassGroupManager::getPerFrameDisqualifiedEntities@<D0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = a1 + 384;
  uint64_t v7 = a3 & 0xFFFFFFFFFFFFFFFLL;
  if (*(void *)(a1 + 432) < (a3 & 0xFFFFFFFFFFFFFFFuLL))
  {
    re::HashTable<re::StringID,re::Pair<re::FrameCount,re::HashSet<re::ecs2::Entity const*,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>,true>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(a1 + 384);
    *(void *)(a1 + 432) = v7;
  }
  uint64_t v9 = (void *)re::HashTable<re::StringID,re::Pair<re::FrameCount,re::HashTable<unsigned long long,re::ecs2::RenderPassGroupBoundsInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,true>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(v6, a2);
  if (!v9) {
    goto LABEL_12;
  }
  uint64_t v10 = *v9 & 0xFFFFFFFFFFFFFFFLL;
  if (v10 == 0xFFFFFFFFFFFFFFFLL)
  {
    if (v7 != 0xFFFFFFFFFFFFFFFLL)
    {
LABEL_12:
      double result = 0.0;
      *(_OWORD *)(a4 + 16) = 0u;
      *(_OWORD *)(a4 + 32) = 0u;
      *(_OWORD *)a4 = 0u;
      *(_DWORD *)(a4 + 36) = 0x7FFFFFFF;
      return result;
    }
  }
  else if (v7 == 0xFFFFFFFFFFFFFFFLL || v10 != v7)
  {
    goto LABEL_12;
  }
  re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::HashSetBase(a4, (uint64_t)(v9 + 1));
  return result;
}

void re::ecs2::RenderPassGroupManagerStateTracking::~RenderPassGroupManagerStateTracking(re::ecs2::RenderPassGroupManagerStateTracking *this)
{
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 34);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 31);
  re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>::~HierarchyStateTracking((uint64_t *)this);
}

{
  uint64_t vars8;

  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 34);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 31);
  re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>::~HierarchyStateTracking((uint64_t *)this);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::RenderPassGroupManagerStateTracking::trackedComponents(re::ecs2::RenderPassGroupManagerStateTracking *this)
{
  return *((void *)this + 33);
}

uint64_t re::ecs2::RenderPassGroupManagerStateTracking::trackedActivationComponents(re::ecs2::RenderPassGroupManagerStateTracking *this)
{
  return *((void *)this + 36);
}

void re::ecs2::RenderPassGroupManager::~RenderPassGroupManager(re::ecs2::RenderPassGroupManager *this)
{
  re::ecs2::RenderPassGroupManager::~RenderPassGroupManager(this);
  JUMPOUT(0x237DBCBD0);
}

{
  re::HashTable<re::StringID,re::Pair<re::FrameCount,re::HashSet<re::ecs2::Entity const*,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>,true>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 48);
  re::HashTable<re::StringID,re::Pair<re::FrameCount,re::HashTable<unsigned long long,re::ecs2::RenderPassGroupBoundsInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,true>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 41);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 35);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 32);
  re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>::~HierarchyStateTracking((uint64_t *)this + 1);
}

uint64_t re::ecs2::RenderPassGroupManager::registerScene(re::ecs2::RenderPassGroupManager *this, re::EventBus **a2)
{
  uint64_t v48 = *MEMORY[0x263EF8340];
  uint64_t v44 = (re::ecs2::Scene *)a2;
  uint64_t v2 = a2[36];
  if (!v2)
  {
    re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) An event bus is expected for this system to track entity state changes.", "eventBus", "registerScene", 100);
    _os_crash();
    __break(1u);
  }
  uint64_t v4 = (re::ecs2::RenderPassGroupManager *)((char *)this + 8);
  v38[0] = 0;
  v38[1] = 0;
  int v39 = 1;
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  uint64_t v40 = 0;
  int v43 = 0;
  uint64_t v5 = (re *)(*(uint64_t (**)(re *))(*(void *)v4 + 16))(v4);
  if (v6)
  {
    uint64_t v7 = (uint64_t *)v5;
    uint64_t v8 = 8 * v6;
    do
    {
      uint64_t v9 = *v7++;
      uint64_t v46 = re::globalAllocators(v5)[2];
      uint64_t v10 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v46 + 32))(v46, 32, 0);
      *uint64_t v10 = &unk_26E6FA708;
      v10[1] = v4;
      _OWORD v10[2] = re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>::invalidateEntityHierarchyEventHandler<REComponentDidChangeEvent>;
      void v10[3] = 0;
      uint64_t v47 = v10;
      uint64_t v11 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v2, (uint64_t)v45, v9, 0);
      uint64_t v13 = v12;
      int v14 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)v38);
      *int v14 = v11;
      v14[1] = v13;
      re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v45);
      re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>::subscribeToEventToInvalidateEntityHierarchy<REComponentDidActivateEvent>(v4, v2, (uint64_t)v38, v9);
      uint64_t v5 = (re *)re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>::subscribeToEventToInvalidateEntityHierarchy<REComponentWillDeactivateEvent>(v4, v2, (uint64_t)v38, v9);
      v8 -= 8;
    }
    while (v8);
  }
  unint64_t v15 = (re *)(*(uint64_t (**)(re *))(*(void *)v4 + 24))(v4);
  if (v16)
  {
    unint64_t v17 = (uint64_t *)v15;
    uint64_t v18 = 8 * v16;
    do
    {
      uint64_t v19 = *v17++;
      re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>::subscribeToEventToInvalidateEntityHierarchy<REComponentDidActivateEvent>(v4, v2, (uint64_t)v38, v19);
      unint64_t v15 = (re *)re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>::subscribeToEventToInvalidateEntityHierarchy<REComponentWillDeactivateEvent>(v4, v2, (uint64_t)v38, v19);
      v18 -= 8;
    }
    while (v18);
  }
  uint64_t v46 = re::globalAllocators(v15)[2];
  uint64_t v20 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v46 + 32))(v46, 32, 0);
  *uint64_t v20 = &unk_26E6FA810;
  v20[1] = v4;
  void v20[2] = re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>::invalidateEntityHierarchyEventHandler<RESceneEntityDidReparentEvent>;
  long long v20[3] = 0;
  uint64_t v47 = v20;
  uint64_t v21 = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityDidReparentEvent>(v2, (uint64_t)v45, 0, 0);
  uint64_t v23 = v22;
  uint64_t v24 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)v38);
  *uint64_t v24 = v21;
  v24[1] = v23;
  int v25 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::destroyCallable((uint64_t)v45);
  uint64_t v46 = re::globalAllocators(v25)[2];
  uint64_t v26 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v46 + 32))(v46, 32, 0);
  *uint64_t v26 = &unk_26E6FA868;
  v26[1] = v4;
  v26[2] = re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>::invalidateEntityHierarchyEventHandler<RESceneEntityDidActivateEvent>;
  void v26[3] = 0;
  uint64_t v47 = v26;
  uint64_t v27 = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityDidActivateEvent>(v2, (uint64_t)v45, 0, 0);
  uint64_t v29 = v28;
  int v30 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)v38);
  *int v30 = v27;
  v30[1] = v29;
  uint64_t v31 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)>::destroyCallable((uint64_t)v45);
  uint64_t v46 = re::globalAllocators(v31)[2];
  uint64_t v32 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v46 + 32))(v46, 32, 0);
  void *v32 = &unk_26E6FA8C0;
  v32[1] = v4;
  void v32[2] = re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>::invalidateEntityHierarchyEventHandler<RESceneEntityWillDeactivateEvent>;
  uint64_t v32[3] = 0;
  uint64_t v47 = v32;
  uint64_t v33 = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityWillDeactivateEvent>(v2, (uint64_t)v45, 0, 0);
  uint64_t v35 = v34;
  float32x4_t v36 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)v38);
  void *v36 = v33;
  v36[1] = v35;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::destroyCallable((uint64_t)v45);
  re::HashTable<re::ecs2::Scene const*,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::add((uint64_t)this + 160, (uint64_t *)&v44, (uint64_t)v38);
  re::HashSetBase<re::ecs2::Scene const*,re::ecs2::Scene const*,re::internal::ValueAsKey<re::ecs2::Scene const*>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::add((uint64_t)this + 16, (uint64_t *)&v44);
  re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)v38);
  uint64_t result = v38[0];
  if (v38[0])
  {
    if ((v39 & 1) == 0) {
      return (*(uint64_t (**)(void))(*(void *)v38[0] + 40))();
    }
  }
  return result;
}

uint64_t re::ecs2::RenderPassGroupManager::unregisterScene(re::ecs2::RenderPassGroupManager *this, re::ecs2::Scene *a2)
{
  int v14 = a2;
  re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove((uint64_t)this + 16, (uint64_t *)&v14);
  uint64_t v3 = *((void *)v14 + 13);
  uint64_t v4 = *(void *)(v3 + 328);
  if (v4)
  {
    uint64_t v5 = *(void *)(v3 + 344);
    uint64_t v6 = 8 * v4;
    do
    {
      if (*(unsigned char *)(*(void *)v5 + 288)) {
        (*(void (**)(char *))(*((void *)this + 1) + 40))((char *)this + 8);
      }
      v5 += 8;
      v6 -= 8;
    }
    while (v6);
  }
  uint64_t v7 = (char *)this + 160;
  uint64_t result = re::HashTable<re::ecs2::Scene const*,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::tryGet((uint64_t)v7, (uint64_t *)&v14);
  if (result)
  {
    uint64_t v9 = *((void *)v14 + 36);
    if (v9)
    {
      uint64_t v10 = result;
      uint64_t v11 = *(void *)(result + 40);
      if (v11)
      {
        for (unint64_t i = 0; i != v11; ++i)
        {
          uint64_t v13 = re::BucketArray<RESubscriptionHandle,8ul>::operator[](v10, i);
          re::EventBus::unsubscribe(v9, *(void *)v13, *(void *)(v13 + 8));
        }
      }
    }
    return re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::remove((uint64_t)v7, (uint64_t *)&v14);
  }
  return result;
}

uint64_t *re::HashTable<re::StringID,re::Pair<re::FrameCount,re::HashSet<re::ecs2::Entity const*,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>,true>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, const StringID *a4, uint64_t *a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      int v12 = *(_DWORD *)(a1 + 28);
      signed int v13 = 2 * v12;
      uint64_t v14 = *(void *)a1;
      if (*(void *)a1)
      {
        if (v13) {
          BOOL v15 = v9 == v13;
        }
        else {
          BOOL v15 = 1;
        }
        if (!v15 && (v12 & 0x80000000) == 0)
        {
          memset(v32, 0, 36);
          *(void *)&v32[36] = 0x7FFFFFFFLL;
          re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::init((uint64_t)v32, v14, v13);
          long long v16 = *(_OWORD *)v32;
          *(_OWORD *)uint64_t v32 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v16;
          uint64_t v17 = *(void *)&v32[16];
          uint64_t v18 = *(void *)(a1 + 16);
          *(void *)&v32[16] = v18;
          *(void *)(a1 + 16) = v17;
          long long v20 = *(_OWORD *)&v32[24];
          *(_OWORD *)&v32[24] = *(_OWORD *)(a1 + 24);
          unsigned int v19 = *(_DWORD *)&v32[32];
          *(_OWORD *)(a1 + 24) = v20;
          uint64_t v21 = v19;
          if (v19)
          {
            uint64_t v22 = v18 + 24;
            do
            {
              if ((*(_DWORD *)(v22 - 24) & 0x80000000) != 0)
              {
                unint64_t v23 = 0xBF58476D1CE4E5B9 * ((*(void *)(v22 - 16) >> 31) ^ (*(void *)(v22 - 16) >> 1));
                unint64_t v24 = (0x94D049BB133111EBLL * (v23 ^ (v23 >> 27))) ^ ((0x94D049BB133111EBLL * (v23 ^ (v23 >> 27))) >> 31);
                re::HashTable<re::StringID,re::Pair<re::FrameCount,re::HashSet<re::ecs2::Entity const*,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>,true>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(a1, v24 % *(unsigned int *)(a1 + 24), v24, v22 - 16, v22);
              }
              v22 += 80;
              --v21;
            }
            while (v21);
          }
          re::HashTable<re::StringID,re::Pair<re::FrameCount,re::HashSet<re::ecs2::Entity const*,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>,true>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v32);
        }
      }
      else
      {
        if (v13) {
          signed int v27 = 2 * v12;
        }
        else {
          signed int v27 = 3;
        }
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v25 = *(void *)(a1 + 16);
    int v26 = *(_DWORD *)(v25 + 80 * v9);
  }
  else
  {
    uint64_t v25 = *(void *)(a1 + 16);
    int v26 = *(_DWORD *)(v25 + 80 * v9);
    *(_DWORD *)(a1 + 36) = v26 & 0x7FFFFFFF;
  }
  uint64_t v28 = 80 * v9;
  *(_DWORD *)(v25 + vre::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 28) = v26 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + vre::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 28) = *(_DWORD *)(*(void *)(a1 + 16) + 80 * v9) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  re::StringID::StringID((re::StringID *)(*(void *)(a1 + 16) + 80 * v9 + 8), a4);
  uint64_t v29 = *(void *)(a1 + 16) + 80 * v9;
  uint64_t v30 = *a5;
  *(_OWORD *)(v29 + 32) = 0u;
  v29 += 32;
  *(void *)(v29 - re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v30;
  *(_OWORD *)(v29 + 16) = 0u;
  *(_DWORD *)(v29 + 32) = 0;
  *(void *)(v29 + 36) = 0x7FFFFFFFLL;
  uint64_t result = re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)v29, a5 + 1);
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return result;
}

double re::HashTable<re::StringID,re::Pair<re::FrameCount,re::HashSet<re::ecs2::Entity const*,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>,true>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    if (*((_DWORD *)a1 + 8))
    {
      uint64_t v3 = 0;
      unint64_t v4 = 0;
      do
      {
        re::HashTable<re::StringID,re::Pair<re::FrameCount,re::HashSet<re::ecs2::Entity const*,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>,true>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::EntryWithoutHash::free(a1[2] + v3);
        ++v4;
        v3 += 80;
      }
      while (v4 < *((unsigned int *)a1 + 8));
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

double re::HashTable<re::StringID,re::Pair<re::FrameCount,re::HashSet<re::ecs2::Entity const*,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>,true>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::EntryWithoutHash::free(uint64_t a1)
{
  if ((*(_DWORD *)a1 & 0x80000000) != 0)
  {
    *(_DWORD *)a1 &= ~0x80000000;
    re::StringID::destroyString((re::StringID *)(a1 + 8));
    return re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)(a1 + 32));
  }
  return result;
}

uint64_t *re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>::~HierarchyStateTracking(uint64_t *a1)
{
  *a1 = (uint64_t)&unk_26E6FA6C8;
  uint64_t v2 = a1 + 1;
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit(a1 + 25);
  re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit(a1 + 19);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit(a1 + 13);
  re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit(a1 + 7);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit(v2);
  return a1;
}

uint64_t re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>::trackedComponents()
{
  return 0;
}

uint64_t re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>::trackedActivationComponents()
{
  return 0;
}

double re::HashTable<re::StringID,re::Pair<re::FrameCount,re::HashTable<unsigned long long,re::ecs2::RenderPassGroupBoundsInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,true>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    if (*((_DWORD *)a1 + 8))
    {
      uint64_t v3 = 0;
      unint64_t v4 = 0;
      do
      {
        re::HashTable<re::StringID,re::Pair<re::FrameCount,re::HashTable<unsigned long long,re::ecs2::RenderPassGroupBoundsInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,true>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::EntryWithoutHash::free(a1[2] + v3);
        ++v4;
        v3 += 80;
      }
      while (v4 < *((unsigned int *)a1 + 8));
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

double re::HashTable<re::StringID,re::Pair<re::FrameCount,re::HashTable<unsigned long long,re::ecs2::RenderPassGroupBoundsInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,true>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::EntryWithoutHash::free(uint64_t a1)
{
  if ((*(_DWORD *)a1 & 0x80000000) != 0)
  {
    *(_DWORD *)a1 &= ~0x80000000;
    re::StringID::destroyString((re::StringID *)(a1 + 8));
    return re::HashTable<unsigned long long,re::ecs2::RenderPassGroupBoundsInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)(a1 + 32));
  }
  return result;
}

uint64_t (***re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>::subscribeToEventToInvalidateEntityHierarchy<REComponentDidActivateEvent>(re *a1, re::EventBus *a2, uint64_t a3, uint64_t a4))(void)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v15 = re::globalAllocators(a1)[2];
  uint64_t v8 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v15 + 32))(v15, 32, 0);
  *uint64_t v8 = &unk_26E6FA760;
  v8[1] = a1;
  _OWORD v8[2] = re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>::invalidateEntityHierarchyEventHandler<REComponentDidActivateEvent>;
  v8[3] = 0;
  long long v16 = v8;
  uint64_t v9 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(a2, (uint64_t)v14, a4, 0);
  uint64_t v11 = v10;
  int v12 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a3);
  *int v12 = v9;
  v12[1] = v11;
  return re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v14);
}

uint64_t (***re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>::subscribeToEventToInvalidateEntityHierarchy<REComponentWillDeactivateEvent>(re *a1, re::EventBus *a2, uint64_t a3, uint64_t a4))(void)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v15 = re::globalAllocators(a1)[2];
  uint64_t v8 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v15 + 32))(v15, 32, 0);
  *uint64_t v8 = &unk_26E6FA7B8;
  v8[1] = a1;
  _OWORD v8[2] = re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>::invalidateEntityHierarchyEventHandler<REComponentWillDeactivateEvent>;
  v8[3] = 0;
  long long v16 = v8;
  uint64_t v9 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(a2, (uint64_t)v14, a4, 0);
  uint64_t v11 = v10;
  int v12 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a3);
  *int v12 = v9;
  v12[1] = v11;
  return re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v14);
}

uint64_t re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>::invalidateEntityHierarchyEventHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  if (!*(unsigned char *)(a2 + 371)
    && (*(unsigned char *)(a2 + 288) & 1) != 0
    && !re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a1 + 200, &v4))
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 40))(a1, v4);
    re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add(a1 + 104, &v4);
  }
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6FA708;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6FA708;
  *(void *)(a2 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

uint64_t re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>::invalidateEntityHierarchyEventHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  if (!*(unsigned char *)(a2 + 371)
    && (*(unsigned char *)(a2 + 288) & 1) != 0
    && !re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a1 + 200, &v4))
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 40))(a1, v4);
    re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add(a1 + 104, &v4);
  }
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6FA760;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6FA760;
  *(void *)(a2 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

uint64_t re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>::invalidateEntityHierarchyEventHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  if (!*(unsigned char *)(a2 + 371)
    && (*(unsigned char *)(a2 + 288) & 1) != 0
    && !re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a1 + 200, &v4))
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 40))(a1, v4);
    re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add(a1 + 104, &v4);
  }
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6FA7B8;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6FA7B8;
  *(void *)(a2 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

uint64_t re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>::invalidateEntityHierarchyEventHandler<RESceneEntityDidReparentEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  if (!*(unsigned char *)(a2 + 371)
    && (*(unsigned char *)(a2 + 288) & 1) != 0
    && !re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a1 + 200, &v4))
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 40))(a1, v4);
    re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add(a1 + 104, &v4);
  }
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6FA810;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6FA810;
  *(void *)(a2 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::size()
{
  return 32;
}

uint64_t re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>::invalidateEntityHierarchyEventHandler<RESceneEntityDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = a2;
  if (!*(unsigned char *)(a2 + 371))
  {
    uint64_t v3 = a1 + 200;
    (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
    re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add(a1 + 104, &v5);
    re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove(v3, &v5);
  }
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>::*)(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>::*)(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>::*)(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6FA868;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>::*)(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6FA868;
  *(void *)(a2 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>::*)(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)>::size()
{
  return 32;
}

uint64_t re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>::invalidateEntityHierarchyEventHandler<RESceneEntityWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = a2;
  uint64_t v3 = a1 + 200;
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove(a1 + 104, &v5);
  re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add(v3, &v5);
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>::*)(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>::*)(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>::*)(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6FA8C0;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>::*)(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6FA8C0;
  *(void *)(a2 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>::*)(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::size()
{
  return 32;
}

void *re::BucketArray<re::ecs2::RenderPassGroupManagerStateTracking::buildRenderPassGroupsForEntityHierarchy(re::ecs2::Entity const*,re::ecs2::WorldRootProvider const&)::EntityRenderPassGroup,32ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  *(void *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(void *)(a1 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
  double result = re::BucketArray<re::ecs2::RenderPassGroupManagerStateTracking::buildRenderPassGroupsForEntityHierarchy(re::ecs2::Entity const*,re::ecs2::WorldRootProvider const&)::EntityRenderPassGroup,32ul>::setBucketsCapacity((void *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

void *re::BucketArray<re::ecs2::RenderPassGroupManagerStateTracking::buildRenderPassGroupsForEntityHierarchy(re::ecs2::Entity const*,re::ecs2::WorldRootProvider const&)::EntityRenderPassGroup,32ul>::setBucketsCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result;
  if (*result)
  {
    if (result[5] < 32 * a2)
    {
      while (1)
      {
        unint64_t v4 = v3[1];
        if (v4 <= a2) {
          break;
        }
        double result = (void *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      if (v4 < a2)
      {
        uint64_t v5 = v3 + 3;
        do
        {
          double result = (void *)(*(uint64_t (**)(void, uint64_t, void))(*(void *)*v3 + 32))(*v3, 1024, 0);
          uint64_t v6 = result;
          if (*v3)
          {
            unint64_t v7 = v3[1];
            int v8 = *((_DWORD *)v3 + 4);
            if ((v8 & 1) == 0)
            {
              unint64_t v9 = *v5;
              BOOL v11 = v7 >= *v5;
              unint64_t v10 = v7 + 1;
              BOOL v11 = !v11 || v9 >= v10;
              if (v11) {
                goto LABEL_24;
              }
              unint64_t v12 = 2 * v9;
              goto LABEL_20;
            }
            unint64_t v10 = v7 + 1;
            if (v10 >= 3)
            {
              unint64_t v12 = 4;
LABEL_20:
              if (v12 <= v10) {
                unint64_t v14 = v10;
              }
              else {
                unint64_t v14 = v12;
              }
              double result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v14);
              int v8 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            unint64_t v13 = v3[1] + 1;
            double result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v13);
            int v8 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + 4) = v8;
          }
LABEL_24:
          uint64_t v15 = v3 + 3;
          if ((v8 & 1) == 0) {
            uint64_t v15 = (void *)v3[4];
          }
          unint64_t v16 = v3[1];
          v15[v16++] = v6;
          v3[1] = v16;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v16 < a2);
      }
    }
  }
  else
  {
  }
  return result;
}

uint64_t re::BucketArray<re::ecs2::RenderPassGroupManagerStateTracking::buildRenderPassGroupsForEntityHierarchy(re::ecs2::Entity const*,re::ecs2::WorldRootProvider const&)::EntityRenderPassGroup,32ul>::operator[](uint64_t a1, unint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1011, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(void *)(a1 + 8) <= a2 >> 5) {
    goto LABEL_8;
  }
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v3 = a1 + 24;
  }
  else {
    uint64_t v3 = *(void *)(a1 + 32);
  }
  return *(void *)(v3 + 8 * (a2 >> 5)) + 32 * (a2 & 0x1F);
}

uint64_t re::BucketArray<re::ecs2::RenderPassGroupManagerStateTracking::buildRenderPassGroupsForEntityHierarchy(re::ecs2::Entity const*,re::ecs2::WorldRootProvider const&)::EntityRenderPassGroup,32ul>::addUninitialized(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 40);
  unint64_t v3 = *(void *)(a1 + 8);
  if (v2 + 1 > 32 * v3)
  {
    re::BucketArray<re::ecs2::RenderPassGroupManagerStateTracking::buildRenderPassGroupsForEntityHierarchy(re::ecs2::Entity const*,re::ecs2::WorldRootProvider const&)::EntityRenderPassGroup,32ul>::setBucketsCapacity((void *)a1, (v2 + 32) >> 5);
    unint64_t v3 = *(void *)(a1 + 8);
  }
  if (v3 <= v2 >> 5)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v4 = a1 + 24;
  }
  else {
    uint64_t v4 = *(void *)(a1 + 32);
  }
  uint64_t v5 = *(void *)(v4 + 8 * (v2 >> 5));
  ++*(void *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  return v5 + 32 * (v2 & 0x1F);
}

uint64_t re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, _OWORD *a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 40 * v9 + 8);
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 40 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v11 + 40 * v9 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v12 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + 40 * v9 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 40 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 40 * v9) = a3;
  *(void *)(*(void *)(a1 + 16) + 40 * v9 + 16) = *a4;
  *(_OWORD *)(*(void *)(a1 + 16) + 40 * v9 + 24) = *a5;
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(void *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v13, v4, a2);
      long long v5 = *(_OWORD *)v13;
      *(_OWORD *)unint64_t v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      uint64_t v6 = *(void *)&v13[16];
      *(void *)&v13[16] = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = v6;
      long long v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      unsigned int v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      unsigned int v9 = v7;
      if (v7)
      {
        uint64_t v10 = 0;
        unint64_t v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(void *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::addAsMove(a1, *(void *)(*(void *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(*(void *)&v13[16] + v10), *(void *)&v13[16] + v10 + 16, *(void *)&v13[16] + v10 + 24);
            unsigned int v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 40;
        }
        while (v11 < v9);
      }
      re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2) {
      signed int v12 = a2;
    }
    else {
      signed int v12 = 3;
    }
  }
}

void re::HashTable<re::StringID,re::Pair<re::FrameCount,re::HashTable<unsigned long long,re::ecs2::RenderPassGroupBoundsInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,true>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 28))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 24);
    if (v2) {
      memset_pattern16(*(void **)(a1 + 8), &unk_2343655D0, 4 * v2);
    }
    if (*(_DWORD *)(a1 + 32))
    {
      uint64_t v3 = 0;
      unint64_t v4 = 0;
      do
      {
        re::HashTable<re::StringID,re::Pair<re::FrameCount,re::HashTable<unsigned long long,re::ecs2::RenderPassGroupBoundsInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,true>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::EntryWithoutHash::free(*(void *)(a1 + 16) + v3);
        ++v4;
        v3 += 80;
      }
      while (v4 < *(unsigned int *)(a1 + 32));
    }
    *(_DWORD *)(a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 28) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    int v5 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 4ArcSharedObject::ArcSharedObject(this, 0) = v5;
  }
}

uint64_t *re::HashTable<re::StringID,re::Pair<re::FrameCount,re::HashTable<unsigned long long,re::ecs2::RenderPassGroupBoundsInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,true>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, const StringID *a4, uint64_t *a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      int v12 = *(_DWORD *)(a1 + 28);
      signed int v13 = 2 * v12;
      uint64_t v14 = *(void *)a1;
      if (*(void *)a1)
      {
        if (v13) {
          BOOL v15 = v9 == v13;
        }
        else {
          BOOL v15 = 1;
        }
        if (!v15 && (v12 & 0x80000000) == 0)
        {
          memset(v32, 0, 36);
          *(void *)&v32[36] = 0x7FFFFFFFLL;
          re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::init((uint64_t)v32, v14, v13);
          long long v16 = *(_OWORD *)v32;
          *(_OWORD *)uint64_t v32 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v16;
          uint64_t v17 = *(void *)&v32[16];
          uint64_t v18 = *(void *)(a1 + 16);
          *(void *)&v32[16] = v18;
          *(void *)(a1 + 16) = v17;
          long long v20 = *(_OWORD *)&v32[24];
          *(_OWORD *)&v32[24] = *(_OWORD *)(a1 + 24);
          unsigned int v19 = *(_DWORD *)&v32[32];
          *(_OWORD *)(a1 + 24) = v20;
          uint64_t v21 = v19;
          if (v19)
          {
            uint64_t v22 = v18 + 24;
            do
            {
              if ((*(_DWORD *)(v22 - 24) & 0x80000000) != 0)
              {
                unint64_t v23 = 0xBF58476D1CE4E5B9 * ((*(void *)(v22 - 16) >> 31) ^ (*(void *)(v22 - 16) >> 1));
                unint64_t v24 = (0x94D049BB133111EBLL * (v23 ^ (v23 >> 27))) ^ ((0x94D049BB133111EBLL * (v23 ^ (v23 >> 27))) >> 31);
                re::HashTable<re::StringID,re::Pair<re::FrameCount,re::HashTable<unsigned long long,re::ecs2::RenderPassGroupBoundsInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,true>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(a1, v24 % *(unsigned int *)(a1 + 24), v24, v22 - 16, v22);
              }
              v22 += 80;
              --v21;
            }
            while (v21);
          }
          re::HashTable<re::StringID,re::Pair<re::FrameCount,re::HashTable<unsigned long long,re::ecs2::RenderPassGroupBoundsInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,true>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v32);
        }
      }
      else
      {
        if (v13) {
          signed int v27 = 2 * v12;
        }
        else {
          signed int v27 = 3;
        }
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v25 = *(void *)(a1 + 16);
    int v26 = *(_DWORD *)(v25 + 80 * v9);
  }
  else
  {
    uint64_t v25 = *(void *)(a1 + 16);
    int v26 = *(_DWORD *)(v25 + 80 * v9);
    *(_DWORD *)(a1 + 36) = v26 & 0x7FFFFFFF;
  }
  uint64_t v28 = 80 * v9;
  *(_DWORD *)(v25 + vre::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 28) = v26 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + vre::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 28) = *(_DWORD *)(*(void *)(a1 + 16) + 80 * v9) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  re::StringID::StringID((re::StringID *)(*(void *)(a1 + 16) + 80 * v9 + 8), a4);
  uint64_t v29 = *(void *)(a1 + 16) + 80 * v9;
  uint64_t v30 = *a5;
  *(_OWORD *)(v29 + 32) = 0u;
  v29 += 32;
  *(void *)(v29 - re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v30;
  *(_OWORD *)(v29 + 16) = 0u;
  *(_DWORD *)(v29 + 32) = 0;
  *(void *)(v29 + 36) = 0x7FFFFFFFLL;
  double result = re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)v29, a5 + 1);
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return result;
}

void re::HashTable<unsigned long long,re::ecs2::RenderPassGroupBoundsInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(void *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::init((uint64_t)v13, v4, a2);
      long long v5 = *(_OWORD *)v13;
      *(_OWORD *)signed int v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      uint64_t v6 = *(void *)&v13[16];
      *(void *)&v13[16] = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = v6;
      long long v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      unsigned int v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      unsigned int v9 = v7;
      if (v7)
      {
        uint64_t v10 = 0;
        unint64_t v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(void *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashTable<unsigned long long,re::ecs2::RenderPassGroupBoundsInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, *(void *)(*(void *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(*(void *)&v13[16] + v10), (void *)(*(void *)&v13[16] + v10 + 16), (long long *)(*(void *)&v13[16] + v10 + 32));
            unsigned int v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 80;
        }
        while (v11 < v9);
      }
      re::HashTable<unsigned long long,re::ecs2::RenderPassGroupBoundsInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2) {
      signed int v12 = a2;
    }
    else {
      signed int v12 = 3;
    }
  }
}

uint64_t re::HashTable<unsigned long long,re::ecs2::RenderPassGroupBoundsInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, long long *a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned long long,re::ecs2::RenderPassGroupBoundsInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(a1, (2 * *(_DWORD *)(a1 + 28)));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 80 * v9 + 8);
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 80 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v11 + 80 * v9 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v12 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + 80 * v9 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 80 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 80 * v9) = a3;
  *(void *)(*(void *)(a1 + 16) + 80 * v9 + 16) = *a4;
  signed int v13 = (_OWORD *)(*(void *)(a1 + 16) + 80 * v9);
  long long v14 = *a5;
  long long v15 = a5[2];
  v13[3] = a5[1];
  v13[4] = v15;
  void v13[2] = v14;
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<re::StringID,re::Pair<re::FrameCount,re::HashSet<re::ecs2::Entity const*,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>,true>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 28))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 24);
    if (v2) {
      memset_pattern16(*(void **)(a1 + 8), &unk_2343655D0, 4 * v2);
    }
    if (*(_DWORD *)(a1 + 32))
    {
      uint64_t v3 = 0;
      unint64_t v4 = 0;
      do
      {
        re::HashTable<re::StringID,re::Pair<re::FrameCount,re::HashSet<re::ecs2::Entity const*,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>,true>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::EntryWithoutHash::free(*(void *)(a1 + 16) + v3);
        ++v4;
        v3 += 80;
      }
      while (v4 < *(unsigned int *)(a1 + 32));
    }
    *(_DWORD *)(a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 28) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    int v5 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 4ArcSharedObject::ArcSharedObject(this, 0) = v5;
  }
}

void *re::ecs2::allocInfo_ClusterShadowSeparatorComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_193, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_193))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF85470, "ClusterShadowSeparatorComponent");
    __cxa_guard_release(&_MergedGlobals_193);
  }
  return &unk_26AF85470;
}

void re::ecs2::initInfo_ClusterShadowSeparatorComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v9[0] = 0x4E424AB8BF52B1A4;
  v9[1] = "ClusterShadowSeparatorComponent";
  re::StringID::destroyString((re::StringID *)v9);
  *((_OWORD *)this + 2) = v10;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF85418, memory_order_acquire) & 1) == 0)
  {
    unint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF85418);
    if (v4)
    {
      int v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 4ArcSharedObject::ArcSharedObject(this, 0) = 3;
      *(void *)(v7 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF85410 = v7;
      __cxa_guard_release(&qword_26AF85418);
    }
  }
  *((void *)this + 2) = 0x2000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((void *)this + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = &qword_26AF85410;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::ClusterShadowSeparatorComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 1ArcSharedObject::ArcSharedObject(this, 0) = re::internal::defaultDestruct<re::ecs2::ClusterShadowSeparatorComponent>;
  *((void *)this + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::ClusterShadowSeparatorComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::ClusterShadowSeparatorComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v8 = v10;
}

void re::internal::defaultConstruct<re::ecs2::ClusterShadowSeparatorComponent>(int a1, int a2, ArcSharedObject *this)
{
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)(v3 + 16) = 0;
  *(unsigned char *)(v3 + 24) = 0;
  *(void *)uint64_t v3 = &unk_26E6EDB80;
}

void *re::internal::defaultDestruct<re::ecs2::ClusterShadowSeparatorComponent>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

void re::internal::defaultConstructV2<re::ecs2::ClusterShadowSeparatorComponent>(ArcSharedObject *a1)
{
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(void *)(v1 + 16) = 0;
  *(unsigned char *)(v1 + 24) = 0;
  *(void *)uint64_t v1 = &unk_26E6EDB80;
}

void *re::internal::defaultDestructV2<re::ecs2::ClusterShadowSeparatorComponent>(void *a1)
{
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_ClusterShadowSeparatorComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ClusterShadowSeparatorComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_ClusterShadowSeparatorComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_ClusterShadowSeparatorComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::ClusterShadowSeparatorComponent>, this);
}

void *re::ecs2::allocInfo_ClusterShadowMarkerComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF85420, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF85420))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF854E8, "ClusterShadowMarkerComponent");
    __cxa_guard_release(&qword_26AF85420);
  }
  return &unk_26AF854E8;
}

void re::ecs2::initInfo_ClusterShadowMarkerComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v9[0] = 0xD5DA40D47753ADD2;
  v9[1] = "ClusterShadowMarkerComponent";
  re::StringID::destroyString((re::StringID *)v9);
  *((_OWORD *)this + 2) = v10;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF85430, memory_order_acquire) & 1) == 0)
  {
    unint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF85430);
    if (v4)
    {
      int v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 4ArcSharedObject::ArcSharedObject(this, 0) = 3;
      *(void *)(v7 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF85428 = v7;
      __cxa_guard_release(&qword_26AF85430);
    }
  }
  *((void *)this + 2) = 0x2000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((void *)this + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = &qword_26AF85428;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::ClusterShadowMarkerComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 1ArcSharedObject::ArcSharedObject(this, 0) = re::internal::defaultDestruct<re::ecs2::ClusterShadowMarkerComponent>;
  *((void *)this + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::ClusterShadowMarkerComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::ClusterShadowMarkerComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v8 = v10;
}

void re::internal::defaultConstruct<re::ecs2::ClusterShadowMarkerComponent>(int a1, int a2, ArcSharedObject *this)
{
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)(v3 + 16) = 0;
  *(unsigned char *)(v3 + 24) = 0;
  *(void *)uint64_t v3 = &unk_26E6ED9E0;
}

void *re::internal::defaultDestruct<re::ecs2::ClusterShadowMarkerComponent>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

void re::internal::defaultConstructV2<re::ecs2::ClusterShadowMarkerComponent>(ArcSharedObject *a1)
{
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(void *)(v1 + 16) = 0;
  *(unsigned char *)(v1 + 24) = 0;
  *(void *)uint64_t v1 = &unk_26E6ED9E0;
}

void *re::internal::defaultDestructV2<re::ecs2::ClusterShadowMarkerComponent>(void *a1)
{
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_ClusterShadowMarkerComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ClusterShadowMarkerComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_ClusterShadowMarkerComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_ClusterShadowMarkerComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::ClusterShadowMarkerComponent>, this);
}

void *re::ecs2::allocInfo_ShadowClusterComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF85438, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF85438))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF85560, "ShadowClusterComponent");
    __cxa_guard_release(&qword_26AF85438);
  }
  return &unk_26AF85560;
}

void re::ecs2::initInfo_ShadowClusterComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v9[0] = 0xDFE7254011F9DB06;
  v9[1] = "ShadowClusterComponent";
  re::StringID::destroyString((re::StringID *)v9);
  *((_OWORD *)this + 2) = v10;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF85448, memory_order_acquire) & 1) == 0)
  {
    unint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF85448);
    if (v4)
    {
      int v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 4ArcSharedObject::ArcSharedObject(this, 0) = 3;
      *(void *)(v7 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF85440 = v7;
      __cxa_guard_release(&qword_26AF85448);
    }
  }
  *((void *)this + 2) = 0x5000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((void *)this + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = &qword_26AF85440;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::ShadowClusterComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 1ArcSharedObject::ArcSharedObject(this, 0) = re::internal::defaultDestruct<re::ecs2::ShadowClusterComponent>;
  *((void *)this + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::ShadowClusterComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::ShadowClusterComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v8 = v10;
}

void re::internal::defaultConstruct<re::ecs2::ShadowClusterComponent>(int a1, int a2, ArcSharedObject *this)
{
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)(v3 + 16) = 0;
  *(unsigned char *)(v3 + 24) = 0;
  *(void *)uint64_t v3 = &unk_26E6ED840;
  *(void *)(v3 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *(void *)(v3 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
  *(void *)(v3 + 32) = 0;
  *(void *)(v3 + 64) = 0;
  *(_DWORD *)(v3 + 72) = 0;
  *(unsigned char *)(v3 + 76) = 1;
}

void *re::internal::defaultDestruct<re::ecs2::ShadowClusterComponent>(uint64_t a1, uint64_t a2, void *a3)
{
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 4));
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

void re::internal::defaultConstructV2<re::ecs2::ShadowClusterComponent>(ArcSharedObject *a1)
{
  *((_OWORD *)a1 + 3) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *(_OWORD *)a1 = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(void *)(v1 + 16) = 0;
  *(unsigned char *)(v1 + 24) = 0;
  *(void *)uint64_t v1 = &unk_26E6ED840;
  *(void *)(v1 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *(void *)(v1 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
  *(void *)(v1 + 32) = 0;
  *(void *)(v1 + 64) = 0;
  *(_DWORD *)(v1 + 72) = 0;
  *(unsigned char *)(v1 + 76) = 1;
}

void *re::internal::defaultDestructV2<re::ecs2::ShadowClusterComponent>(void *a1)
{
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 4));
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_ShadowClusterComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ShadowClusterComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_ShadowClusterComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_ShadowClusterComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::ShadowClusterComponent>, this);
}

void *re::ecs2::allocInfo_ShadowClusterRootComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF85450, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF85450))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF855D8, "ShadowClusterRootComponent");
    __cxa_guard_release(&qword_26AF85450);
  }
  return &unk_26AF855D8;
}

void re::ecs2::initInfo_ShadowClusterRootComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v9[0] = 0xE94DDA63926F6F82;
  v9[1] = "ShadowClusterRootComponent";
  re::StringID::destroyString((re::StringID *)v9);
  *((_OWORD *)this + 2) = v10;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF85460, memory_order_acquire) & 1) == 0)
  {
    unint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF85460);
    if (v4)
    {
      int v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 4ArcSharedObject::ArcSharedObject(this, 0) = 3;
      *(void *)(v7 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF85458 = v7;
      __cxa_guard_release(&qword_26AF85460);
    }
  }
  *((void *)this + 2) = 0x4000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((void *)this + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = &qword_26AF85458;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::ShadowClusterRootComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 1ArcSharedObject::ArcSharedObject(this, 0) = re::internal::defaultDestruct<re::ecs2::ShadowClusterRootComponent>;
  *((void *)this + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::ShadowClusterRootComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::ShadowClusterRootComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v8 = v10;
}

int32x4_t re::internal::defaultConstruct<re::ecs2::ShadowClusterRootComponent>(int a1, int a2, ArcSharedObject *this)
{
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)(v3 + 16) = 0;
  *(unsigned char *)(v3 + 24) = 0;
  *(void *)uint64_t v3 = &unk_26E6F5108;
  int32x4_t result = vdupq_n_s32(0x7F800000u);
  *(void *)&long long v5 = 0x7F0000007FLL;
  *((void *)&v5 + 1) = 0x7F0000007FLL;
  *(int32x4_t *)(v3 + 32) = result;
  *(_OWORD *)(v3 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v5;
  return result;
}

void *re::internal::defaultDestruct<re::ecs2::ShadowClusterRootComponent>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

int32x4_t re::internal::defaultConstructV2<re::ecs2::ShadowClusterRootComponent>(ArcSharedObject *a1)
{
  *((_OWORD *)a1 + 2) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(void *)(v1 + 16) = 0;
  *(unsigned char *)(v1 + 24) = 0;
  *(void *)uint64_t v1 = &unk_26E6F5108;
  int32x4_t result = vdupq_n_s32(0x7F800000u);
  *(void *)&long long v3 = 0x7F0000007FLL;
  *((void *)&v3 + 1) = 0x7F0000007FLL;
  *(int32x4_t *)(v1 + 32) = result;
  *(_OWORD *)(v1 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v3;
  return result;
}

void *re::internal::defaultDestructV2<re::ecs2::ShadowClusterRootComponent>(void *a1)
{
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_ShadowClusterRootComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ShadowClusterRootComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_ShadowClusterRootComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_ShadowClusterRootComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::ShadowClusterRootComponent>, this);
}

void *re::ecs2::allocInfo_ShadowClusterSystem(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF85468, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF85468))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF85650, "ShadowClusterSystem");
    __cxa_guard_release(&qword_26AF85468);
  }
  return &unk_26AF85650;
}

void re::ecs2::initInfo_ShadowClusterSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v5[0] = 0xCF3FEC89DB6BBED2;
  v5[1] = "ShadowClusterSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0x10800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = &re::ecs2::initInfo_ShadowClusterSystem(re::IntrospectionBase *)::structureAttributes;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::ShadowClusterSystem>;
  *((void *)this + 1ArcSharedObject::ArcSharedObject(this, 0) = re::internal::defaultDestruct<re::ecs2::ShadowClusterSystem>;
  *((void *)this + 11) = re::internal::defaultRetain<re::ecs2::ShadowClusterSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 12) = re::internal::defaultRelease<re::ecs2::ShadowClusterSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::ShadowClusterSystem>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::ShadowClusterSystem>;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

double re::internal::defaultConstruct<re::ecs2::ShadowClusterSystem>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a3 + 256) = 0;
  *(_OWORD *)(a3 + 224) = 0u;
  *(_OWORD *)(a3 + 24ArcSharedObject::ArcSharedObject(this, 0) = 0u;
  *(_OWORD *)(a3 + 192) = 0u;
  *(_OWORD *)(a3 + 20re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a3 + 1re::HashTable<re::ecs2::Entity const*,re::ecs2::BillboardData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::deinit((uint64_t *)this + 60) = 0u;
  *(_OWORD *)(a3 + 176) = 0u;
  *(_OWORD *)(a3 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 28) = 0u;
  *(_OWORD *)(a3 + 144) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 8ArcSharedObject::ArcSharedObject(this, 0) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  re::ecs2::System::System(a3, 1, 1);
  *(void *)(v3 + 152) = 0;
  *(_OWORD *)(v3 + 136) = 0u;
  *(_OWORD *)(v3 + 12ArcSharedObject::ArcSharedObject(this, 0) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(void *)uint64_t v3 = &unk_26E6FA918;
  *(_OWORD *)(v3 + 1re::HashTable<re::ecs2::Entity const*,re::ecs2::BillboardData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::deinit((uint64_t *)this + 60) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_DWORD *)(v3 + 192) = 0;
  *(void *)&double result = 0x7FFFFFFFLL;
  *(void *)(v3 + 196) = 0x7FFFFFFFLL;
  *(_OWORD *)(v3 + 20re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0u;
  *(_OWORD *)(v3 + 224) = 0u;
  *(_DWORD *)(v3 + 24ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *(void *)(v3 + 244) = 0x7FFFFFFFLL;
  *(unsigned char *)(v3 + 256) = 1;
  return result;
}

void *re::internal::defaultDestruct<re::ecs2::ShadowClusterSystem>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit(a3 + 26);
  re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit(a3 + 20);
  *a3 = (uint64_t)&unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

double re::internal::defaultConstructV2<re::ecs2::ShadowClusterSystem>(uint64_t a1)
{
  *(void *)(a1 + 256) = 0;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 24ArcSharedObject::ArcSharedObject(this, 0) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 20re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a1 + 1re::HashTable<re::ecs2::Entity const*,re::ecs2::BillboardData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::deinit((uint64_t *)this + 60) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 28) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 8ArcSharedObject::ArcSharedObject(this, 0) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  re::ecs2::System::System(a1, 1, 1);
  *(void *)(v1 + 152) = 0;
  *(_OWORD *)(v1 + 136) = 0u;
  *(_OWORD *)(v1 + 12ArcSharedObject::ArcSharedObject(this, 0) = 0u;
  *(_OWORD *)(v1 + 104) = 0u;
  *(void *)uint64_t v1 = &unk_26E6FA918;
  *(_OWORD *)(v1 + 1re::HashTable<re::ecs2::Entity const*,re::ecs2::BillboardData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::deinit((uint64_t *)this + 60) = 0u;
  *(_OWORD *)(v1 + 176) = 0u;
  *(_DWORD *)(v1 + 192) = 0;
  *(void *)&double result = 0x7FFFFFFFLL;
  *(void *)(v1 + 196) = 0x7FFFFFFFLL;
  *(_OWORD *)(v1 + 20re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0u;
  *(_OWORD *)(v1 + 224) = 0u;
  *(_DWORD *)(v1 + 24ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *(void *)(v1 + 244) = 0x7FFFFFFFLL;
  *(unsigned char *)(v1 + 256) = 1;
  return result;
}

void *re::internal::defaultDestructV2<re::ecs2::ShadowClusterSystem>(uint64_t *a1)
{
  re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit(a1 + 26);
  re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit(a1 + 20);
  *a1 = (uint64_t)&unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_ShadowClusterSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ShadowClusterSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_ShadowClusterSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_ShadowClusterSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::ShadowClusterSystem>, this);
}

re *re::ecs2::ShadowClusterSystem::willAddSceneToECSService(re *this, re::EventBus **a2)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  uint64_t v17 = (re::ecs2::Scene *)a2;
  uint64_t v2 = a2[36];
  if (v2)
  {
    long long v4 = this;
    uint64_t v5 = (uint64_t)this + 160;
    uint64_t v6 = re::globalAllocators(this)[2];
    uint64_t v22 = v6;
    uint64_t v7 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v6 + 32))(v6, 32, 0);
    *uint64_t v7 = &unk_26E6FA9A8;
    v7[1] = v4;
    _OWORD v7[2] = re::ecs2::ShadowClusterSystem::onEntityReparented;
    v7[3] = 0;
    unint64_t v23 = v7;
    uint64_t Type = re::EventBus::getTypeId<RESceneEntityDidReparentEvent>();
    unint64_t EventInfo = re::EventBus::addOrGetEventInfo(v2, Type);
    uint64_t v30 = v6;
    uint64_t v31 = 0;
    long long v10 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneEntityDidReparentEvent const&)>::operator=<24ul>((uint64_t)v29, (uint64_t)v21);
    uint64_t v27 = re::globalAllocators(v10)[2];
    uint64_t v28 = 0;
    *(void *)&v24[0] = &unk_26E6FAA68;
    uint64_t v25 = v30;
    uint64_t v26 = 0;
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneEntityDidReparentEvent const&)>::operator=<24ul>((uint64_t)v24 + 8, (uint64_t)v29);
    uint64_t v28 = v24;
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneEntityDidReparentEvent const&)>::destroyCallable((uint64_t)v29);
    uint64_t v11 = re::EventBus::EventInfo::addSubscription(EventInfo, (uint64_t)v24, (uint64_t)a2, 0);
    uint64_t v13 = v12;
    re::FunctionBase<48ul,REEventHandlerResult ()(void *,void const*)>::destroyCallable((uint64_t)v24);
    *(void *)&v24[0] = v11;
    *((void *)&v24[0] + 1) = v13;
    re::HashTable<re::ecs2::Scene *,RESubscriptionHandle,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::addNew(v5, (uint64_t *)&v17, v24);
    long long v14 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneEntityDidReparentEvent const&)>::destroyCallable((uint64_t)v21);
    uint64_t v19 = re::globalAllocators(v14)[2];
    long long v15 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v19 + 32))(v19, 32, 0);
    *long long v15 = &unk_26E6FAA10;
    v15[1] = v4;
    void v15[2] = re::ecs2::ShadowClusterSystem::onComponentWillRemove;
    void v15[3] = 0;
    long long v20 = v15;
    *(void *)&v24[0] = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillRemoveEvent>(v2, (uint64_t)v18, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::ShadowClusterComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    *((void *)&v24[0] + 1) = v16;
    re::HashTable<re::ecs2::Scene *,RESubscriptionHandle,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::addNew((uint64_t)v4 + 208, (uint64_t *)&v17, v24);
    return (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::destroyCallable((uint64_t)v18);
  }
  return this;
}

uint64_t re::ecs2::ShadowClusterSystem::onEntityReparented(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3[1];
  uint64_t v25 = *(void *)(v3 + 224);
  if (v25)
  {
    if (!re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v3 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType))
    {
      if (*a3)
      {
        if (*(void *)(*a3 + 224))
        {
          uint64_t v7 = *(void *)(a1 + 128);
          if (v7)
          {
            uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 40))(v7);
            uint64_t v24 = 0;
            v21[1] = 0;
            uint64_t v22 = 0;
            v21[0] = 0;
            int v23 = 0;
            re::DynamicArray<re::RigDataValue *>::add((_anonymous_namespace_ *)v21, &v25);
            uint64_t v9 = v22;
            if (v22)
            {
              uint64_t v10 = v8 + 8;
              do
              {
                uint64_t v11 = v9 - 1;
                uint64_t v12 = *(void *)(v24 + 8 * v11);
                uint64_t v22 = v11;
                ++v23;
                uint64_t v13 = *(void *)(v12 + 16);
                uint64_t v14 = *(void *)(v13 + 328);
                if (v14)
                {
                  long long v15 = *(uint64_t **)(v13 + 344);
                  uint64_t v16 = 8 * v14;
                  do
                  {
                    uint64_t v17 = *v15;
                    if (*v15) {
                      id v18 = (id)(v17 + 8);
                    }
                    uint64_t v20 = *(void *)(v17 + 224);
                    if (v20) {
                      re::DynamicArray<re::RigDataValue *>::add((_anonymous_namespace_ *)v21, &v20);
                    }

                    ++v15;
                    v16 -= 8;
                  }
                  while (v16);
                }
                uint64_t v19 = *(void *)(v3 + 224);
                if (v19) {
                  re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew(v10, (uint64_t *)(v19 + 64));
                }
                uint64_t v9 = v22;
              }
              while (v22);
            }
            if (v21[0] && v24) {
              (*(void (**)(void))(*(void *)v21[0] + 40))();
            }
          }
        }
      }
    }
  }
  return 0;
}

uint64_t re::ecs2::ShadowClusterSystem::onComponentWillRemove(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 224);
  if (v2)
  {
    uint64_t v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 128) + 40))(*(void *)(a1 + 128));
    re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew(v3 + 8, (uint64_t *)(v2 + 64));
  }
  return 0;
}

uint64_t re::ecs2::ShadowClusterSystem::willRemoveSceneFromECSService(uint64_t this, re::ecs2::Scene *a2)
{
  uint64_t v17 = a2;
  uint64_t v2 = *((void *)a2 + 36);
  if (v2)
  {
    uint64_t v4 = this;
    uint64_t v5 = this + 160;
    LODWORD(v6) = 0x7FFFFFFF;
    unint64_t v7 = (unint64_t)a2 ^ ((unint64_t)a2 >> 30);
    if (*(void *)(this + 160))
    {
      unint64_t v8 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v7) ^ ((0xBF58476D1CE4E5B9 * v7) >> 27));
      uint64_t v9 = *(unsigned int *)(*(void *)(this + 168) + 4 * ((v8 ^ (v8 >> 31)) % *(unsigned int *)(this + 184)));
      if (v9 != 0x7FFFFFFF)
      {
        uint64_t v10 = *(void *)(this + 176);
        if (*(re::ecs2::Scene **)(v10 + 40 * v9 + 16) == a2)
        {
          LODWORD(v6) = v9;
        }
        else
        {
          uint64_t v6 = v9;
          while (1)
          {
            LODWORD(v6) = *(_DWORD *)(v10 + 40 * v6 + 8) & 0x7FFFFFFF;
            if (v6 == 0x7FFFFFFF) {
              break;
            }
            if (*(re::ecs2::Scene **)(v10 + 40 * v6 + 16) == a2) {
              goto LABEL_11;
            }
          }
          LODWORD(v6) = 0x7FFFFFFF;
        }
      }
    }
LABEL_11:
    uint64_t v11 = *(void *)(this + 176) + 40 * v6;
    re::EventBus::unsubscribe(v2, *(void *)(v11 + 24), *(void *)(v11 + 32));
    LODWORD(v12) = 0x7FFFFFFF;
    if (*(void *)(v4 + 208))
    {
      unint64_t v13 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v7) ^ ((0xBF58476D1CE4E5B9 * v7) >> 27));
      uint64_t v14 = *(unsigned int *)(*(void *)(v4 + 216) + 4 * ((v13 ^ (v13 >> 31)) % *(unsigned int *)(v4 + 232)));
      if (v14 != 0x7FFFFFFF)
      {
        uint64_t v15 = *(void *)(v4 + 224);
        if (*(re::ecs2::Scene **)(v15 + 40 * v14 + 16) == a2)
        {
          LODWORD(v12) = v14;
        }
        else
        {
          uint64_t v12 = v14;
          while (1)
          {
            LODWORD(v12) = *(_DWORD *)(v15 + 40 * v12 + 8) & 0x7FFFFFFF;
            if (v12 == 0x7FFFFFFF) {
              break;
            }
            if (*(re::ecs2::Scene **)(v15 + 40 * v12 + 16) == a2) {
              goto LABEL_20;
            }
          }
          LODWORD(v12) = 0x7FFFFFFF;
        }
      }
    }
LABEL_20:
    uint64_t v16 = *(void *)(v4 + 224) + 40 * v12;
    re::EventBus::unsubscribe(v2, *(void *)(v16 + 24), *(void *)(v16 + 32));
    re::HashTable<re::ecs2::Scene *,RESubscriptionHandle,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::remove(v5, (uint64_t *)&v17);
    return re::HashTable<re::ecs2::Scene *,RESubscriptionHandle,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::remove(v4 + 208, (uint64_t *)&v17);
  }
  return this;
}

void re::ecs2::ShadowClusterSystem::updateScenes(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a1 + 256)) {
    return;
  }
  uint64_t v3 = *(void *)(a1 + 104);
  if (v3)
  {
    if ((*(unsigned char *)(v3 + 424) & 0x10) == 0) {
      return;
    }
  }
  uint64_t v4 = *(void *)(a1 + 128);
  if (!v4) {
    return;
  }
  uint64_t v5 = *(void *)(a2 + 8);
  if (!v5) {
    goto LABEL_74;
  }
  uint64_t v6 = *(void **)a2;
  uint64_t v65 = *(void *)a2 + 8 * v5;
  int32x4_t v68 = vdupq_n_s32(0x7F800000u);
  do
  {
    uint64_t v7 = *v6;
    uint64_t v8 = (*(uint64_t (**)(void))(**(void **)(a1 + 128) + 40))(*(void *)(a1 + 128));
    uint64_t v9 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(v7 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ShadowClusterComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    if (v9)
    {
      uint64_t v10 = *(void ***)(v9 + 40);
      uint64_t v11 = *(void *)(v9 + 24);
    }
    else
    {
      uint64_t v10 = 0;
      uint64_t v11 = 0;
    }
    v72[0] = v10;
    v72[1] = v11;
    re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v71);
    re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v70, 3101, a1);
    uint64_t v12 = (*(uint64_t (**)(void))(**(void **)(a1 + 136) + 24))(*(void *)(a1 + 136));
    uint64_t v69 = v12;
    uint64_t v13 = 8 * v11;
    if (!v11) {
      goto LABEL_26;
    }
    uint64_t v14 = v12;
    uint64_t v66 = v11;
    uint64_t v67 = v6;
    uint64_t v15 = v8 + 8;
    uint64_t v16 = 8 * v11;
    uint64_t v17 = v10;
    do
    {
      id v18 = *v17;
      uint64_t v19 = *v17 + 8;
      if (!*v19) {
        goto LABEL_19;
      }
      uint64_t v20 = *(void *)(v18[2] + 176);
      (*(void (**)(float32x4_t *__return_ptr, uint64_t))(*(void *)v14 + 8))(&v76, v14);
      uint64_t v21 = v76.i64[1];
      if (!v76.i8[0]) {
        uint64_t v21 = 0;
      }
      uint64_t v22 = v18[5];
      if (!v20 || v22 != *(void *)(v20 + 40))
      {
        uint64_t v23 = v18[6];
        v18[5] = 0;
        v18[6] = 0;
        uint64_t v24 = v18[4];
        v18[4] = 0;
        v76.i64[0] = v24;
        v76.i64[1] = v22;
        *(void *)&long long v77 = v23;
        re::AssetHandle::~AssetHandle((re::AssetHandle *)&v76);
LABEL_18:
        re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew(v15, v19);
        re::ecs2::Component::markDirty(v18);
        goto LABEL_19;
      }
      if (v18[7] != v21)
      {
        unsigned char v18[7] = v21;
        goto LABEL_18;
      }
LABEL_19:
      ++v17;
      v16 -= 8;
    }
    while (v16);
    uint64_t v25 = v13;
    uint64_t v26 = v10;
    uint64_t v11 = v66;
    uint64_t v6 = v67;
    do
    {
      uint64_t v27 = *v26;
      if (re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::contains(v15, *v26 + 8))
      {
        v27[8] = 0;
        re::ecs2::Component::markDirty(v27);
      }
      ++v26;
      v25 -= 8;
    }
    while (v25);
LABEL_26:
    v76.i64[0] = (*(uint64_t (**)(void))(**(void **)(a1 + 144) + 16))(*(void *)(a1 + 144));
    if (v11)
    {
      uint64_t v28 = &v10[v11];
      uint64_t v29 = (unsigned __int8 **)v10;
      do
      {
        uint64_t v30 = (const re::ecs2::MeshComponent *)*((void *)*v29 + 2);
        if (v30)
        {
          uint64_t v31 = re::ecs2::RenderOptions::forEntity((re::ecs2::RenderOptions *)&v76, (unint64_t)v30);
          unsigned __int8 v32 = v31[16] ? v31[17] : 1;
          uint64_t v33 = *v29;
          if ((*v29)[76] != v32)
          {
            v33[76] = v32;
            re::ecs2::Component::markDirty(v33);
          }
        }
        ++v29;
        v13 -= 8;
      }
      while (v13);
      do
      {
        if (*(void *)(a1 + 128))
        {
          uint64_t v63 = *v10;
          if (*((unsigned char *)*v10 + 76))
          {
            if (!v63[8])
            {
              uint64_t v34 = (void *)v63[2];
              uint64_t v35 = (re::ecs2::MeshComponentHelper *)v34[22];
              if (v35)
              {
                uint64_t v36 = *((void *)v35 + 5);
                if (v36)
                {
                  unsigned int v37 = atomic_load((unsigned int *)(v36 + 704));
                  if (v37 == 2 && (re::ecs2::MeshComponentHelper::isMappedToOcclusionPass(v35, v30) & 1) == 0)
                  {
                    uint64_t v38 = (*(uint64_t (**)(void))(**(void **)(a1 + 128) + 40))(*(void *)(a1 + 128));
                    (*(void (**)(float32x4_t *__return_ptr))(*(void *)v69 + 8))(&v76);
                    if (v76.i8[0]) {
                      uint64_t v39 = v76.i64[1];
                    }
                    else {
                      uint64_t v39 = 0;
                    }
                    uint64_t v40 = v34[3];
                    if (v40 && (*(unsigned char *)(v40 + 288) & 0x80) == 0)
                    {
                      while (1)
                      {
                        uint64_t v41 = (void *)v40;
                        if (!*(void *)(v40 + 224)) {
                          break;
                        }
                        (*(void (**)(float32x4_t *__return_ptr))(*(void *)v69 + 8))(&v76);
                        uint64_t v42 = v76.i8[0] ? v76.i64[1] : 0;
                        if (v39 != v42) {
                          break;
                        }
                        if (re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v34 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType))
                        {
                          *(void *)&long long v61 = 0x7F0000007FLL;
                          *((void *)&v61 + 1) = 0x7F0000007FLL;
                          float32x4_t v76 = (float32x4_t)v68;
                          long long v77 = v61;
                          uint64_t v62 = *(void *)(v38 + 104);
                          *(void *)(v38 + 104) = v62 + 1;
                          re::ecs2::ShadowClusterSystem::trySetPhysicsCluster(v34, v62, (uint64_t)&v69, &v76);
                          goto LABEL_71;
                        }
                        uint64_t v40 = v41[3];
                        if (v40)
                        {
                          uint64_t v34 = v41;
                          if ((*(unsigned char *)(v40 + 288) & 0x80) == 0) {
                            continue;
                          }
                        }
                        goto LABEL_55;
                      }
                    }
                    uint64_t v41 = v34;
LABEL_55:
                    int v78 = 0;
                    float32x4_t v76 = 0u;
                    long long v77 = 0u;
                    uint64_t v79 = 0x7FFFFFFFLL;
                    re::ecs2::ShadowClusterSystem::recursivelyCluster((uint64_t)v73, a1, v41, (uint64_t)v72, (uint64_t)&v69, (uint64_t)&v76);
                    if (v74)
                    {
                      int v43 = v75;
                      uint64_t v44 = &v75[10 * v74];
                      do
                      {
                        uint64_t v45 = v43[2];
                        if (v45)
                        {
                          uint64_t v46 = (float32x4_t *)v43[4];
                          uint64_t v47 = &v46[2 * v45];
                          v48.i64[0] = 0x7F0000007FLL;
                          v48.i32[2] = 127;
                          float32x4_t v49 = (float32x4_t)v68;
                          do
                          {
                            float32x4_t v50 = *v46;
                            float32x4_t v51 = v46[1];
                            v46 += 2;
                            v49.i32[3] = 0;
                            v50.i32[3] = 0;
                            v48.i32[3] = 0;
                            float32x4_t v49 = vminnmq_f32(v49, v50);
                            v51.i32[3] = 0;
                            float32x4_t v48 = vmaxnmq_f32(v48, v51);
                          }
                          while (v46 != v47);
                          float32x4_t v52 = vsubq_f32(v48, v49);
                        }
                        else
                        {
                          v52.i64[0] = 0x7F0000007FLL;
                          v52.i32[2] = 127;
                        }
                        uint64_t v53 = *(void *)(v38 + 104);
                        *(void *)(v38 + 104) = v53 + 1;
                        uint64_t v54 = v43[7];
                        if (v54)
                        {
                          v52.i32[3] = 0;
                          float32x4_t v55 = vmaxnmq_f32(v52, (float32x4_t)0);
                          float32x4_t v56 = vmulq_f32(v55, v55);
                          v56.f32[0] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v56, 2), vaddq_f32(v56, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v56.f32, 1))).f32[0]);
                          float v57 = fminf(fminf(v55.f32[0], v55.f32[2]), v55.f32[1])
                              / fmaxf((float)(v56.f32[0] * 0.5) + (float)(v56.f32[0] * 0.5), 0.0001);
                          uint64_t v58 = (uint64_t *)v43[9];
                          uint64_t v59 = 8 * v54;
                          do
                          {
                            uint64_t v60 = *v58++;
                            *(float *)(v60 + 72) = v57;
                            *(void *)(v60 + 64) = v53;
                            re::ecs2::Component::markDirty((void *)v60);
                            v59 -= 8;
                          }
                          while (v59);
                        }
                        v43 += 10;
                      }
                      while (v43 != v44);
                    }
                    re::DynamicArray<re::RigBasicConstraint>::deinit((uint64_t)v73);
                    re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)&v76);
                  }
                }
              }
            }
          }
        }
LABEL_71:
        ++v10;
      }
      while (v10 != v28);
    }
    re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v70);
    re::ProfilerTimeGuard<(re::ProfilerStatistic)122>::end((uint64_t)v71);
    ++v6;
  }
  while (v6 != (void *)v65);
  uint64_t v4 = *(void *)(a1 + 128);
LABEL_74:
  uint64_t v64 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4) + 8;
  re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear(v64);
}

uint64_t re::ecs2::ShadowClusterSystem::trySetPhysicsCluster(void *a1, uint64_t a2, uint64_t a3, float32x4_t *a4)
{
  uint64_t v8 = a1[28];
  uint64_t v9 = a1[22];
  if (v9)
  {
    uint64_t v10 = *(void *)(v9 + 40);
    if (v10)
    {
      unsigned int v11 = atomic_load((unsigned int *)(v10 + 704));
      if (v11 != 2) {
        return 0;
      }
      uint64_t v12 = (float32x4_t *)re::AssetHandle::loadedAsset<re::MeshAsset>((re::MeshAsset *)(v9 + 32));
      long long v36 = xmmword_23435FD50;
      long long v37 = xmmword_23435FD60;
      long long v38 = xmmword_23435FD80;
      long long v39 = xmmword_23435FBB0;
      re::MeshAsset::aabbFromMesh(v12, (float32x4_t *)&v36, (uint64_t)&v40);
      re::ecs2::TransformComponent::worldMatrix4x4F(*(re::ecs2::TransformComponent ***)(v9 + 16), (const re::ecs2::Entity *)1, &v36);
      float32x4_t v13 = v40;
      uint32x4_t v14 = (uint32x4_t)vcgtq_f32(v40, v41);
      v14.i32[3] = v14.i32[2];
      if ((vmaxvq_u32(v14) & 0x80000000) != 0)
      {
        float32x4_t v17 = 0uLL;
        float32x4_t v16 = 0uLL;
      }
      else
      {
        v15.i64[0] = 0x3F0000003F000000;
        v15.i64[1] = 0x3F0000003F000000;
        float32x4_t v16 = vmulq_f32(vaddq_f32(v40, v41), v15);
        float32x4_t v17 = vsubq_f32(v40, v16);
        float32x4_t v13 = v16;
      }
      v35[0] = vaddq_f32(v17, v13);
      v35[1] = vaddq_f32(v16, vsubq_f32(v41, v16));
      re::AABB::transform(v35, (float32x4_t *)&v36, (uint64_t)v34);
      float32x4_t v18 = *a4;
      float32x4_t v19 = a4[1];
      v18.i32[3] = 0;
      float32x4_t v20 = (float32x4_t)v34[0];
      float32x4_t v21 = (float32x4_t)v34[1];
      v20.i32[3] = 0;
      v19.i32[3] = 0;
      v21.i32[3] = 0;
      *a4 = vminnmq_f32(v18, v20);
      a4[1] = vmaxnmq_f32(v19, v21);
    }
  }
  if (a1[41])
  {
    unint64_t v22 = 0;
    unsigned int v23 = 1;
    do
    {
      uint64_t v24 = (void *)re::ecs2::EntityComponentCollection::operator[]((uint64_t)(a1 + 38), v22);
      char v25 = re::ecs2::ShadowClusterSystem::trySetPhysicsCluster(*v24, a2, a3, a4);
      if (a1[41] <= (unint64_t)v23) {
        break;
      }
      unint64_t v22 = v23++;
    }
    while ((v25 & 1) != 0);
    if ((v25 & 1) == 0) {
      return 0;
    }
  }
  (*(void (**)(long long *__return_ptr))(**(void **)a3 + 8))(&v36);
  if ((_BYTE)v36) {
    uint64_t v26 = *((void *)&v36 + 1);
  }
  else {
    uint64_t v26 = 0;
  }
  if (v8) {
    BOOL v27 = v9 == 0;
  }
  else {
    BOOL v27 = 1;
  }
  if (v27)
  {
    if (!v8) {
      return 1;
    }
    goto LABEL_26;
  }
  if (!*(void *)(v9 + 40))
  {
LABEL_26:
    *(unsigned char *)(v8 + 76) = 0;
    *(void *)(v8 + 64) = 0;
    long long v32 = *(_OWORD *)(v8 + 32);
    uint64_t v33 = *(void *)(v8 + 48);
    *(void *)(v8 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
    *(void *)(v8 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
    *(void *)(v8 + 32) = 0;
    long long v36 = v32;
    *(void *)&long long v37 = v33;
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v36);
    goto LABEL_27;
  }
  float32x4_t v29 = vsubq_f32(a4[1], *a4);
  v29.i32[3] = 0;
  float32x4_t v30 = vmaxnmq_f32(v29, (float32x4_t)0);
  float32x4_t v31 = vmulq_f32(v30, v30);
  v31.f32[0] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v31, 2), vaddq_f32(v31, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v31.f32, 1))).f32[0]);
  *(float *)(v8 + 72) = fminf(fminf(v30.f32[0], v30.f32[2]), v30.f32[1])
                      / fmaxf((float)(v31.f32[0] * 0.5) + (float)(v31.f32[0] * 0.5), 0.0001);
  *(void *)(v8 + 64) = a2;
  re::AssetHandle::operator=(v8 + 32, (uint64_t *)(v9 + 32));
LABEL_27:
  *(void *)(v8 + 56) = v26;
  re::ecs2::Component::markDirty((void *)v8);
  return 1;
}

float32x4_t *anonymous namespace'::getScaledWorldAABB(_anonymous_namespace_ *this, re::ecs2::TransformComponent ***a2, double a3)
{
  uint64_t v5 = (float32x4_t *)re::AssetHandle::loadedAsset<re::MeshAsset>((re::MeshAsset *)(a2 + 4));
  v14[0] = (float32x4_t)xmmword_23435FD50;
  v14[1] = (float32x4_t)xmmword_23435FD60;
  void v14[2] = (float32x4_t)xmmword_23435FD80;
  v14[3] = (float32x4_t)xmmword_23435FBB0;
  re::MeshAsset::aabbFromMesh(v5, v14, (uint64_t)&v15);
  re::ecs2::TransformComponent::worldMatrix4x4F(a2[2], (const re::ecs2::Entity *)1, v14);
  uint32x4_t v6 = (uint32x4_t)vcgtq_f32(v15, v16);
  v6.i32[3] = v6.i32[2];
  if ((vmaxvq_u32(v6) & 0x80000000) != 0)
  {
    float32x4_t v9 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a3, 0);
    float32x4_t v8 = 0uLL;
    float32x4_t v10 = vaddq_f32(vmulq_n_f32(v15, *(float *)&a3), (float32x4_t)0);
  }
  else
  {
    v7.i64[0] = 0x3F0000003F000000;
    v7.i64[1] = 0x3F0000003F000000;
    float32x4_t v8 = vmulq_f32(vaddq_f32(v15, v16), v7);
    float32x4_t v9 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a3, 0);
    float32x4_t v10 = vaddq_f32(v8, vmulq_n_f32(vsubq_f32(v15, v8), *(float *)&a3));
  }
  v13[0] = v10;
  v13[1] = vaddq_f32(v8, vmulq_f32(v9, vsubq_f32(v16, v8)));
  return re::AABB::transform(v13, v14, (uint64_t)this);
}

void re::ecs2::ShadowClusterSystem::recursivelyCluster(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = a3[28];
  uint64_t v56 = v7;
  if (v7)
  {
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
    re::DynamicArray<re::RigBasicConstraint>::setCapacity((void *)a1, 0);
    ++*(_DWORD *)(a1 + 24);
    (*(void (**)(long long *__return_ptr))(**(void **)a5 + 8))(&v59);
    if ((_BYTE)v59) {
      uint64_t v10 = *((void *)&v59 + 1);
    }
    else {
      uint64_t v10 = 0;
    }
    if (a3[41])
    {
      unint64_t v11 = 0;
      unsigned int v12 = 0;
      do
      {
        uint64_t v13 = re::ecs2::EntityComponentCollection::operator[]((uint64_t)(a3 + 38), v11);
        uint64_t v14 = *(void *)v13;
        if (!re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(*(void *)v13 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType))
        {
          (*(void (**)(long long *__return_ptr))(**(void **)a5 + 8))(&v59);
          uint64_t v15 = (_BYTE)v59 ? *((void *)&v59 + 1) : 0;
          if (v10 == v15)
          {
            re::ecs2::ShadowClusterSystem::recursivelyCluster(&v59, a2, v14, a4, a5, a6);
            if ((void)v60)
            {
              uint64_t v16 = 0;
              unsigned int v17 = 1;
              do
              {
                re::DynamicArray<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true>>::add((_anonymous_namespace_ *)a1, v61 + 80 * v16);
                uint64_t v16 = v17;
              }
              while ((unint64_t)v60 > v17++);
            }
            re::DynamicArray<re::RigBasicConstraint>::deinit((uint64_t)&v59);
          }
        }
        unint64_t v11 = ++v12;
      }
      while (a3[41] > (unint64_t)v12);
    }
    (*(void (**)(uint64_t *__return_ptr))(**(void **)(a2 + 128) + 32))(&v53);
    int v19 = HIDWORD(v53);
    re::ecs2::ShadowClusterSystem::mergeClusters((uint64_t)&v59, (uint64_t *)a1, (uint64_t *)a1, *(float *)&v53);
    re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(a1, (uint64_t)&v59);
    re::DynamicArray<re::RigBasicConstraint>::deinit((uint64_t)&v59);
    if (*(unsigned char *)(v7 + 76))
    {
      float32x4_t v20 = (uint64_t *)(v7 + 64);
      if (*(void *)(v7 + 64))
      {
        BOOL v21 = re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::contains(a6, (uint64_t *)(v7 + 64));
        if (!v21)
        {
          uint64_t v22 = *v20;
          uint64_t v70 = 0;
          v68[1] = 0;
          v68[2] = 0;
          int v69 = 0;
          unsigned int v23 = (_anonymous_namespace_ *)re::DynamicArray<re::AABB>::setCapacity(v68, 0);
          ++v69;
          uint64_t v67 = 0;
          v65[1] = 0;
          v65[2] = 0;
          int v66 = 0;
          re::DynamicArray<float *>::setCapacity(v65, 0);
          ++v66;
          uint64_t v24 = *(void *)(a2 + 128);
          if (v24)
          {
            (*(void (**)(long long *__return_ptr))(*(void *)v24 + 32))(&v59);
            float v52 = *((float *)&v59 + 1);
            re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)&v62 + 1);
            re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)&v59 + 1);
            uint64_t v25 = *(void *)(a4 + 8);
            if (v25)
            {
              uint64_t v26 = *(uint64_t **)a4;
              uint64_t v27 = 8 * v25;
              do
              {
                uint64_t v28 = *v26;
                uint64_t v58 = v28;
                if (*(void *)(v28 + 64) == v22)
                {
                  uint64_t v29 = *(void *)(*(void *)(v28 + 16) + 176);
                  if (v29)
                  {
                    uint64_t v30 = *(void *)(v29 + 40);
                    if (v30)
                    {
                      unsigned int v31 = atomic_load((unsigned int *)(v30 + 704));
                      if (v31 == 2)
                      {
                        long long v32 = (float32x4_t *)re::AssetHandle::loadedAsset<re::MeshAsset>((re::MeshAsset *)(v29 + 32));
                        long long v59 = xmmword_23435FD50;
                        long long v60 = xmmword_23435FD60;
                        long long v61 = xmmword_23435FD80;
                        long long v62 = xmmword_23435FBB0;
                        re::MeshAsset::aabbFromMesh(v32, (float32x4_t *)&v59, (uint64_t)&v72);
                        re::ecs2::TransformComponent::worldMatrix4x4F(*(re::ecs2::TransformComponent ***)(v29 + 16), (const re::ecs2::Entity *)1, &v59);
                        uint32x4_t v33 = (uint32x4_t)vcgtq_f32(v72, v73);
                        v33.i32[3] = v33.i32[2];
                        if ((vmaxvq_u32(v33) & 0x80000000) != 0)
                        {
                          float v36 = v52;
                          float32x4_t v35 = vmulq_n_f32(v72, v52);
                          float32x4_t v37 = 0uLL;
                          float32x4_t v38 = 0uLL;
                        }
                        else
                        {
                          v34.i64[0] = 0x3F0000003F000000;
                          v34.i64[1] = 0x3F0000003F000000;
                          float32x4_t v35 = vmulq_f32(vaddq_f32(v72, v73), v34);
                          float v36 = v52;
                          float32x4_t v37 = vmulq_n_f32(vsubq_f32(v72, v35), v52);
                          float32x4_t v38 = v35;
                        }
                        v71[0] = vaddq_f32(v37, v35);
                        v71[1] = vaddq_f32(v38, vmulq_n_f32(vsubq_f32(v73, v38), v36));
                        re::AABB::transform(v71, (float32x4_t *)&v59, (uint64_t)v57);
                        re::DynamicArray<re::AABB>::add((_anonymous_namespace_ *)v68, (uint64_t)v57);
                        re::DynamicArray<re::RigDataValue *>::add((_anonymous_namespace_ *)v65, &v58);
                      }
                    }
                  }
                }
                ++v26;
                v27 -= 8;
              }
              while (v27);
            }
          }
          re::DynamicArray<re::AABB>::DynamicArray((uint64_t)&v59, v68);
          re::DynamicArray<char const*>::DynamicArray((uint64_t)&v61 + 8, v65);
          if (v65[0] && v67) {
            (*(void (**)(void))(*(void *)v65[0] + 40))();
          }
          if (v68[0] && v70) {
            (*(void (**)(void))(*(void *)v68[0] + 40))();
          }
          re::DynamicArray<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true>>::add((_anonymous_namespace_ *)a1, (uint64_t)&v59);
          if (*((void *)&v61 + 1))
          {
            if (v64) {
              (*(void (**)(void))(**((void **)&v61 + 1) + 40))();
            }
            uint64_t v64 = 0;
            long long v62 = 0uLL;
            *((void *)&v61 + 1) = 0;
            ++v63;
          }
          if ((void)v59)
          {
            if ((void)v61) {
              (*(void (**)(void))(*(void *)v59 + 40))();
            }
          }
          re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew(a6, v20);
        }
      }
      else
      {
        uint64_t v39 = a3[22];
        if (v39 && (uint64_t v40 = *(void *)(v39 + 40)) != 0 && (v41 = atomic_load((unsigned int *)(v40 + 704)), v41 != 3))
        {
          re::AssetHandle::operator=(v7 + 32, (uint64_t *)(v39 + 32));
          *(void *)(v7 + 56) = v10;
          re::ecs2::Component::markDirty((void *)v7);
          uint64_t v44 = *(void *)(v39 + 40);
          if (v44)
          {
            unsigned int v45 = atomic_load((unsigned int *)(v44 + 704));
            if (v45 == 2)
            {
              *(void *)&long long v61 = 0;
              *(void *)&long long v60 = 0;
              long long v59 = 0uLL;
              DWORD2(vre::HashTable<re::ecs2::Entity const*,re::ecs2::BillboardData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::deinit((uint64_t *)this + 60) = 0;
              re::DynamicArray<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true>>::resize(&v59);
              uint64_t v46 = v60;
              uint64_t v47 = v61;
              re::DynamicArray<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true>>::operator[](v60);
              LODWORD(v4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v19;
              re::DynamicArray<re::AABB>::add((_anonymous_namespace_ *)v47, (uint64_t)v68);
              re::DynamicArray<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true>>::operator[](v46);
              re::DynamicArray<re::RigDataValue *>::add((_anonymous_namespace_ *)(v47 + 40), &v56);
              re::ecs2::ShadowClusterSystem::mergeClusters((uint64_t)v68, (uint64_t *)&v59, (uint64_t *)a1, 0.0);
              re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(a1, (uint64_t)v68);
              re::DynamicArray<re::RigBasicConstraint>::deinit((uint64_t)v68);
              re::DynamicArray<re::RigBasicConstraint>::deinit((uint64_t)&v59);
            }
          }
        }
        else
        {
          *(void *)(v7 + 64) = 0;
          long long v42 = *(_OWORD *)(v7 + 32);
          uint64_t v43 = *(void *)(v7 + 48);
          *(void *)(v7 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
          *(void *)(v7 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
          *(void *)(v7 + 32) = 0;
          long long v59 = v42;
          *(void *)&long long v60 = v43;
          re::AssetHandle::~AssetHandle((re::AssetHandle *)&v59);
          *(void *)(v7 + 56) = v10;
          re::ecs2::Component::markDirty((void *)v7);
        }
      }
    }
    re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit(v55);
    re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit(v54);
  }
  else
  {
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 24) = 0;
  }
}

__n128 re::DynamicArray<re::AABB>::add(_anonymous_namespace_ *this, uint64_t a2)
{
  unint64_t v4 = *((void *)this + 2);
  if (v4 >= *((void *)this + 1))
  {
    re::DynamicArray<re::AABB>::growCapacity(this, v4 + 1);
    unint64_t v4 = *((void *)this + 2);
  }
  uint64_t v5 = (_OWORD *)(*((void *)this + 4) + 32 * v4);
  __n128 result = *(__n128 *)a2;
  long long v7 = *(_OWORD *)(a2 + 16);
  *uint64_t v5 = *(_OWORD *)a2;
  v5[1] = v7;
  ++*((void *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

void re::ecs2::ShadowClusterSystem::mergeClusters(uint64_t a1, uint64_t *a2, uint64_t *a3, float a4)
{
  uint64_t v135 = *MEMORY[0x263EF8340];
  if (!a2[2])
  {
    a2 = a3;
    goto LABEL_8;
  }
  uint32x4_t v6 = a2;
  if (!a3[2])
  {
LABEL_8:
    re::DynamicArray<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true>>::DynamicArray(a1, a2);
    return;
  }
  re::StackScratchAllocator::StackScratchAllocator((re::StackScratchAllocator *)v118);
  unsigned int v116 = 0;
  long long v114 = 0u;
  long long v115 = 0u;
  uint64_t v117 = 0x7FFFFFFFLL;
  re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)&v114, (uint64_t)v118, 3);
  uint64_t v113 = 0;
  unint64_t v110 = 0;
  uint64_t v111 = 0;
  int v112 = 0;
  unint64_t v109 = v118;
  re::DynamicArray<re::Pair<re::AABB,unsigned int,true>>::setCapacity(&v109, 0);
  ++v112;
  uint64_t v108 = 0;
  unint64_t v105 = 0;
  uint64_t v106 = 0;
  int v107 = 0;
  uint64_t v104 = v118;
  re::DynamicArray<re::Pair<re::AABB,unsigned int,true>>::setCapacity(&v104, 0);
  ++v107;
  uint64_t v8 = v6[2];
  if (v8)
  {
    unint64_t v9 = 0;
    uint64_t v10 = 80 * v8;
    unint64_t v11 = (uint64_t *)(v6[4] + 16);
    do
    {
      uint64_t v12 = *v11;
      v11 += 10;
      v9 += v12;
      v10 -= 80;
    }
    while (v10);
  }
  else
  {
    unint64_t v9 = 0;
  }
  uint64_t v13 = a3[2];
  if (v13)
  {
    unint64_t v14 = 0;
    uint64_t v15 = 80 * v13;
    uint64_t v16 = (uint64_t *)(a3[4] + 16);
    do
    {
      uint64_t v17 = *v16;
      v16 += 10;
      v14 += v17;
      v15 -= 80;
    }
    while (v15);
  }
  else
  {
    unint64_t v14 = 0;
  }
  if (v110 < v9) {
    re::DynamicArray<re::Pair<re::AABB,unsigned int,true>>::setCapacity(&v109, v9);
  }
  if (v105 < v14) {
    re::DynamicArray<re::Pair<re::AABB,unsigned int,true>>::setCapacity(&v104, v14);
  }
  uint64_t v18 = v6[2];
  if (v18)
  {
    unint64_t v19 = v6[4];
    unint64_t v20 = v19 + 80 * v18;
    int32x4_t v90 = vdupq_n_s32(0x3727C5ACu);
    int32x4_t v93 = vdupq_n_s32(0xB727C5AC);
    do
    {
      BOOL v21 = (int *)re::HashTable<re::ecs2::Entity const*,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet((uint64_t)&v114, v19);
      if (!v21)
      {
        v130.i64[0] = v19;
        LODWORD(v97) = HIDWORD(v115);
        BOOL v21 = (int *)re::HashTable<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true> const*,unsigned int,re::Hash<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true> const*>,re::EqualTo<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true> const*>,true,false>::add((uint64_t)&v114, (uint64_t *)&v130, &v97);
      }
      uint64_t v22 = *(void *)(v19 + 16);
      float32x4_t v24 = (float32x4_t)v90;
      float32x4_t v23 = (float32x4_t)v93;
      if (v22)
      {
        int v25 = *v21;
        uint64_t v26 = *(float32x4_t **)(v19 + 32);
        uint64_t v27 = &v26[2 * v22];
        do
        {
          float32x4_t v28 = *v26;
          float32x4_t v29 = v26[1];
          v26 += 2;
          float32x4_t v130 = vaddq_f32(v28, v23);
          float32x4_t v131 = vaddq_f32(v29, v24);
          LODWORD(v132) = v25;
          re::DynamicArray<re::Pair<re::AABB,unsigned int,true>>::add((uint64_t)&v109, (uint64_t)&v130);
          float32x4_t v24 = (float32x4_t)v90;
          float32x4_t v23 = (float32x4_t)v93;
        }
        while (v26 != v27);
      }
      v19 += 80;
    }
    while (v19 != v20);
  }
  uint64_t v30 = a3[2];
  if (v30)
  {
    unint64_t v31 = a3[4];
    unint64_t v32 = v31 + 80 * v30;
    int32x4_t v91 = vdupq_n_s32(0x3727C5ACu);
    int32x4_t v94 = vdupq_n_s32(0xB727C5AC);
    do
    {
      uint32x4_t v33 = (int *)re::HashTable<re::ecs2::Entity const*,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet((uint64_t)&v114, v31);
      if (!v33)
      {
        v130.i64[0] = v31;
        LODWORD(v97) = HIDWORD(v115);
        uint32x4_t v33 = (int *)re::HashTable<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true> const*,unsigned int,re::Hash<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true> const*>,re::EqualTo<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true> const*>,true,false>::add((uint64_t)&v114, (uint64_t *)&v130, &v97);
      }
      uint64_t v34 = *(void *)(v31 + 16);
      float32x4_t v36 = (float32x4_t)v91;
      float32x4_t v35 = (float32x4_t)v94;
      if (v34)
      {
        int v37 = *v33;
        float32x4_t v38 = *(float32x4_t **)(v31 + 32);
        uint64_t v39 = &v38[2 * v34];
        do
        {
          float32x4_t v40 = *v38;
          float32x4_t v41 = v38[1];
          v38 += 2;
          float32x4_t v130 = vaddq_f32(v40, v35);
          float32x4_t v131 = vaddq_f32(v41, v36);
          LODWORD(v132) = v37;
          re::DynamicArray<re::Pair<re::AABB,unsigned int,true>>::add((uint64_t)&v104, (uint64_t)&v130);
          float32x4_t v36 = (float32x4_t)v91;
          float32x4_t v35 = (float32x4_t)v94;
        }
        while (v38 != v39);
      }
      v31 += 80;
    }
    while (v31 != v32);
  }
  uint64_t v42 = HIDWORD(v115);
  unint64_t v102 = HIDWORD(v115);
  uint64_t v103 = 0;
  float32x4_t v101 = v118;
  if (HIDWORD(v115))
  {
    uint64_t v43 = (_DWORD *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(v118[0] + 32))(v118, 8 * HIDWORD(v115), 4);
    uint64_t v103 = v43;
    if (!v43) {
      goto LABEL_113;
    }
    unsigned int v45 = v43;
    uint64_t v46 = v42 - 1;
    if (v42 != 1)
    {
      unsigned int v45 = v43;
      do
      {
        *v45++ = 0x100000000;
        --v46;
      }
      while (v46);
    }
    *unsigned int v45 = 0x100000000;
    unint64_t v47 = v102;
    if (v102)
    {
      unsigned int v48 = 1;
      do
      {
        _DWORD *v43 = v48 - 1;
        v43 += 2;
      }
      while (v47 > v48++);
    }
  }
  uint64_t v50 = v113;
  uint64_t v51 = v108;
  v120[0] = &unk_26E6FAAC0;
  v120[1] = &v101;
  v120[2] = LODWORD(a4);
  unint64_t v121 = v120;
  re::intersectAABBs(v113);
  uint64_t v95 = v50;
  uint64_t v92 = v51;
  if (v121 == v120)
  {
    (*(void (**)(void *))(v120[0] + 32))(v120);
  }
  else if (v121)
  {
    (*(void (**)(void))(*v121 + 40))();
  }
  uint64_t v52 = *v6;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)a1 = v52;
  re::DynamicArray<re::RigBasicConstraint>::setCapacity((void *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  unsigned int v99 = 0;
  long long v97 = 0u;
  long long v98 = 0u;
  uint64_t v100 = 0x7FFFFFFFLL;
  re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::init((uint64_t)&v97, (uint64_t)v118, 3);
  if (v42)
  {
    for (unint64_t i = 0; i != v42; ++i)
    {
      if (i == re::UnionFind::findSet((re::UnionFind *)&v101, i))
      {
        int v54 = *(_DWORD *)(a1 + 16);
        float32x4_t v130 = 0uLL;
        v131.i32[2] = 0;
        v131.i64[0] = 0;
        *((void *)&v134 + 1) = 0;
        long long v132 = 0u;
        long long v133 = 0u;
        LODWORD(v134) = 0;
        re::DynamicArray<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true>>::add((_anonymous_namespace_ *)a1, (uint64_t)&v130);
        if (*((void *)&v132 + 1) && *((void *)&v134 + 1)) {
          (*(void (**)(void))(**((void **)&v132 + 1) + 40))(*((void *)&v132 + 1));
        }
        if (v130.i64[0] && (void)v132) {
          (*(void (**)(uint64_t))(*(void *)v130.i64[0] + 40))(v130.i64[0]);
        }
        unint64_t v55 = 0x94D049BB133111EBLL
            * ((0xBF58476D1CE4E5B9 * (i ^ (i >> 30))) ^ ((0xBF58476D1CE4E5B9 * (i ^ (i >> 30))) >> 27));
        unint64_t v56 = v55 ^ (v55 >> 31);
        unint64_t v57 = v97;
        if (!(void)v97
          || (unint64_t v57 = v56 % DWORD2(v98),
              uint64_t v58 = *(unsigned int *)(*((void *)&v97 + 1) + 4 * v57),
              v58 == 0x7FFFFFFF))
        {
LABEL_62:
          uint64_t v59 = v100;
          if (v100 == 0x7FFFFFFF)
          {
            uint64_t v59 = v99;
            unsigned int v60 = v99;
            if (v99 == DWORD2(v98))
            {
              re::HashTable<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::setCapacity((uint64_t)&v97, 2 * HIDWORD(v98));
              unsigned int v60 = v99;
              unint64_t v57 = v56 % DWORD2(v98);
            }
            unsigned int v99 = v60 + 1;
            uint64_t v61 = v98;
            int v62 = *(_DWORD *)(v98 + 24 * v59 + 8);
          }
          else
          {
            uint64_t v61 = v98;
            int v62 = *(_DWORD *)(v98 + 24 * v100 + 8);
            LODWORD(v10ArcSharedObject::ArcSharedObject(this, 0) = v62 & 0x7FFFFFFF;
          }
          *(_DWORD *)(v61 + 24 * v59 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v62 | 0x80000000;
          uint64_t v63 = *((void *)&v97 + 1);
          *(_DWORD *)(v98 + 24 * v59 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = *(_DWORD *)(v98 + 24 * v59 + 8) & 0x80000000 | *(_DWORD *)(*((void *)&v97 + 1) + 4 * v57);
          *(void *)(v98 + 24 * v59) = v56;
          *(_DWORD *)(v98 + 24 * v59 + 12) = i;
          *(_DWORD *)(v98 + 24 * v59 + 16) = v54;
          *(_DWORD *)(v63 + 4 * v57) = v59;
          ++HIDWORD(v98);
          ++HIDWORD(v100);
        }
        else
        {
          while (i != *(_DWORD *)(v98 + 24 * v58 + 12))
          {
            LODWORD(v5re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = *(_DWORD *)(v98 + 24 * v58 + 8) & 0x7FFFFFFF;
            if (v58 == 0x7FFFFFFF) {
              goto LABEL_62;
            }
          }
        }
      }
    }
  }
  unsigned int v64 = v116;
  if (v116)
  {
    uint64_t v65 = 0;
    int v66 = (int *)(v115 + 8);
    while (1)
    {
      int v67 = *v66;
      v66 += 8;
      if (v67 < 0) {
        break;
      }
      if (v116 == ++v65)
      {
        LODWORD(v65) = v116;
        break;
      }
    }
  }
  else
  {
    LODWORD(v65) = 0;
  }
  if (v116 != v65)
  {
    uint64_t v68 = v65;
    uint64_t v69 = v115;
    while (1)
    {
      uint64_t v70 = v69 + 32 * v68;
      unsigned int Set = re::UnionFind::findSet((re::UnionFind *)&v101, *(unsigned int *)(v70 + 24));
      if (!(void)v97) {
        break;
      }
      unint64_t v72 = 0xBF58476D1CE4E5B9 * (Set ^ ((unint64_t)Set >> 30));
      unint64_t v73 = ((0x94D049BB133111EBLL * (v72 ^ (v72 >> 27))) ^ ((0x94D049BB133111EBLL * (v72 ^ (v72 >> 27))) >> 31))
          % DWORD2(v98);
      uint64_t v74 = v98;
      uint64_t v75 = *(unsigned int *)(*((void *)&v97 + 1) + 4 * v73);
      if (v75 == 0x7FFFFFFF) {
        goto LABEL_83;
      }
      while (*(_DWORD *)(v98 + 24 * v75 + 12) != Set)
      {
        uint64_t v75 = *(_DWORD *)(v98 + 24 * v75 + 8) & 0x7FFFFFFF;
        if (v75 == 0x7FFFFFFF) {
          goto LABEL_83;
        }
      }
LABEL_84:
      unint64_t v76 = v70 + 16;
      unint64_t v77 = *(unsigned int *)(v74 + 24 * v75 + 16);
      int v78 = *(void **)v76;
      uint64_t v79 = *(void *)(*(void *)v76 + 16);
      if (!v79) {
        goto LABEL_89;
      }
      unsigned int v80 = (_OWORD *)v78[4];
      uint64_t v81 = 32 * v79;
      do
      {
        long long v82 = v80[1];
        v96[0] = *v80;
        v96[1] = v82;
        unint64_t v83 = *(void *)(a1 + 16);
        if (v83 <= v77)
        {
          uint64_t v119 = 0;
          long long v133 = 0u;
          long long v134 = 0u;
          float32x4_t v131 = 0u;
          long long v132 = 0u;
          float32x4_t v130 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          int v122 = 136315906;
          unint64_t v123 = "operator[]";
          __int16 v124 = 1024;
          int v125 = 789;
          __int16 v126 = 2048;
          unint64_t v127 = v77;
          __int16 v128 = 2048;
          unint64_t v129 = v83;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_112;
        }
        re::DynamicArray<re::AABB>::add((_anonymous_namespace_ *)(*(void *)(a1 + 32) + 80 * v77), (uint64_t)v96);
        v80 += 2;
        v81 -= 32;
      }
      while (v81);
      int v78 = *(void **)v76;
LABEL_89:
      uint64_t v84 = v78[7];
      if (v84)
      {
        uint64_t v85 = (uint64_t *)v78[9];
        uint64_t v86 = 8 * v84;
        while (1)
        {
          uint64_t v119 = *v85;
          unint64_t v76 = *(void *)(a1 + 16);
          if (v76 <= v77) {
            break;
          }
          re::DynamicArray<re::RigDataValue *>::add((_anonymous_namespace_ *)(*(void *)(a1 + 32) + 80 * v77 + 40), &v119);
          ++v85;
          v86 -= 8;
          if (!v86) {
            goto LABEL_93;
          }
        }
LABEL_112:
        *(void *)&v96[0] = 0;
        long long v133 = 0u;
        long long v134 = 0u;
        float32x4_t v131 = 0u;
        long long v132 = 0u;
        float32x4_t v130 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v122 = 136315906;
        unint64_t v123 = "operator[]";
        __int16 v124 = 1024;
        int v125 = 789;
        __int16 v126 = 2048;
        unint64_t v127 = v77;
        __int16 v128 = 2048;
        unint64_t v129 = v76;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_113:
        re::internal::assertLog((re::internal *)4, v44, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
        _os_crash();
        __break(1u);
      }
LABEL_93:
      if (v64 <= (int)v65 + 1) {
        unsigned int v87 = v65 + 1;
      }
      else {
        unsigned int v87 = v64;
      }
      while (1)
      {
        uint64_t v68 = (v65 + 1);
        if (v87 - 1 == v65) {
          break;
        }
        LODWORD(v65) = v65 + 1;
        unsigned int v88 = v68;
        if ((*(_DWORD *)(v69 + 32 * v68 + 8) & 0x80000000) != 0) {
          goto LABEL_100;
        }
      }
      unsigned int v88 = v87;
LABEL_100:
      LODWORD(v65) = v88;
      if (v64 == v88) {
        goto LABEL_101;
      }
    }
    uint64_t v74 = v98;
LABEL_83:
    LODWORD(v75) = 0x7FFFFFFF;
    goto LABEL_84;
  }
LABEL_101:
  v89.n128_f64[0] = re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)&v97);
  if (v101 && v102) {
    (*(void (**)(double))(*v101 + 40))(v89.n128_f64[0]);
  }
  if (v104 && v92) {
    (*(void (**)(__n128))(*v104 + 40))(v89);
  }
  if (v109)
  {
    if (v95) {
      (*(void (**)(__n128))(*v109 + 40))(v89);
    }
  }
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)&v114);
  re::StackScratchAllocator::~StackScratchAllocator((re::StackScratchAllocator *)v118);
}

uint64_t re::HashTable<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true> const*,unsigned int,re::Hash<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true> const*>,re::EqualTo<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true> const*>,true,false>::add(uint64_t a1, uint64_t *a2, _DWORD *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  unint64_t v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (!*(void *)a1)
  {
    LODWORD(v9) = 0;
    goto LABEL_8;
  }
  unint64_t v9 = v8 % *(unsigned int *)(a1 + 24);
  uint64_t v10 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v9);
  if (v10 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v13 = re::HashTable<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true> const*,unsigned int,re::Hash<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true> const*>,re::EqualTo<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true> const*>,true,false>::addAsMove(a1, v9, v8, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v12 = *(void *)(a1 + 16) + 32 * v13;
    return v12 + 24;
  }
  uint64_t v11 = *(void *)(a1 + 16);
  while (*(void *)(v11 + 32 * v10 + 16) != v6)
  {
    uint64_t v10 = *(_DWORD *)(v11 + 32 * v10 + 8) & 0x7FFFFFFF;
    if (v10 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  uint64_t v12 = v11 + 32 * v10;
  return v12 + 24;
}

__n128 re::DynamicArray<re::Pair<re::AABB,unsigned int,true>>::add(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = *(void *)(a1 + 16);
  if (v5 >= v4)
  {
    unint64_t v6 = v5 + 1;
    if (v4 < v5 + 1)
    {
      if (*(void *)a1)
      {
        uint64_t v7 = 2 * v4;
        BOOL v8 = v4 == 0;
        unint64_t v9 = 8;
        if (!v8) {
          unint64_t v9 = v7;
        }
        if (v9 <= v6) {
          unint64_t v10 = v6;
        }
        else {
          unint64_t v10 = v9;
        }
        re::DynamicArray<re::Pair<re::AABB,unsigned int,true>>::setCapacity((void *)a1, v10);
      }
      else
      {
        re::DynamicArray<re::Pair<re::AABB,unsigned int,true>>::setCapacity((void *)a1, v6);
        ++*(_DWORD *)(a1 + 24);
      }
    }
    unint64_t v5 = *(void *)(a1 + 16);
  }
  uint64_t v11 = *(void *)(a1 + 32) + 48 * v5;
  __n128 result = *(__n128 *)a2;
  long long v13 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v11 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v11 + 32) = v13;
  *(__n128 *)uint64_t v11 = result;
  ++*(void *)(a1 + 16);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

_anonymous_namespace_ *re::DynamicArray<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true>>::add(_anonymous_namespace_ *result, uint64_t a2)
{
  uint64_t v3 = result;
  unint64_t v4 = *((void *)result + 1);
  unint64_t v5 = *((void *)result + 2);
  if (v5 >= v4)
  {
    unint64_t v6 = v5 + 1;
    if (v4 < v5 + 1)
    {
      if (*(void *)result)
      {
        uint64_t v7 = 2 * v4;
        BOOL v8 = v4 == 0;
        unint64_t v9 = 8;
        if (!v8) {
          unint64_t v9 = v7;
        }
        if (v9 <= v6) {
          unint64_t v10 = v6;
        }
        else {
          unint64_t v10 = v9;
        }
        __n128 result = (_anonymous_namespace_ *)re::DynamicArray<re::RigBasicConstraint>::setCapacity(result, v10);
      }
      else
      {
        __n128 result = (_anonymous_namespace_ *)re::DynamicArray<re::RigBasicConstraint>::setCapacity(v3, v6);
        ++*((_DWORD *)v3 + 6);
      }
    }
    unint64_t v5 = *((void *)v3 + 2);
  }
  uint64_t v11 = *((void *)v3 + 4) + 80 * v5;
  *(void *)(v11 + 32) = 0;
  *(void *)(v11 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
  *(void *)(v11 + 16) = 0;
  *(void *)uint64_t v11 = 0;
  *(_DWORD *)(v11 + 24) = 0;
  uint64_t v12 = *(void *)(a2 + 8);
  *(void *)uint64_t v11 = *(void *)a2;
  *(void *)(v11 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v12;
  *(void *)a2 = 0;
  *(void *)(a2 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
  uint64_t v13 = *(void *)(v11 + 16);
  *(void *)(v11 + 16) = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = v13;
  uint64_t v14 = *(void *)(v11 + 32);
  *(void *)(v11 + 32) = *(void *)(a2 + 32);
  *(void *)(a2 + 32) = v14;
  ++*(_DWORD *)(a2 + 24);
  ++*(_DWORD *)(v11 + 24);
  *(void *)(v11 + 72) = 0;
  *(void *)(v11 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
  *(void *)(v11 + 56) = 0;
  *(void *)(v11 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *(_DWORD *)(v11 + 64) = 0;
  uint64_t v15 = *(void *)(a2 + 48);
  *(void *)(v11 + 4ArcSharedObject::ArcSharedObject(this, 0) = *(void *)(a2 + 40);
  *(void *)(v11 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v15;
  *(void *)(a2 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *(void *)(a2 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
  uint64_t v16 = *(void *)(v11 + 56);
  *(void *)(v11 + 56) = *(void *)(a2 + 56);
  *(void *)(a2 + 56) = v16;
  uint64_t v17 = *(void *)(v11 + 72);
  *(void *)(v11 + 72) = *(void *)(a2 + 72);
  *(void *)(a2 + 72) = v17;
  ++*(_DWORD *)(a2 + 64);
  ++*(_DWORD *)(v11 + 64);
  ++*((void *)v3 + 2);
  ++*((_DWORD *)v3 + 6);
  return result;
}

uint64_t re::UnionFind::findSet(re::UnionFind *this, uint64_t a2)
{
  unint64_t v2 = a2;
  if (*((void *)this + 1) <= (unint64_t)a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v3 = a2;
  unsigned int v5 = *(_DWORD *)(*((void *)this + 2) + 8 * a2);
  if (v5 != v3)
  {
    uint64_t Set = re::UnionFind::findSet(this, v5);
    if (*((void *)this + 1) > v2)
    {
      uint64_t v3 = Set;
      *(_DWORD *)(*((void *)this + 2) + 8 * v2) = Set;
      return v3;
    }
LABEL_7:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return v3;
}

uint64_t re::DynamicArray<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true>>::operator[](uint64_t result)
{
  if (!result)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return result;
}

void *re::DynamicArray<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true>>::resize(void *result)
{
  uint64_t v1 = result[2];
  if (v1 != 1)
  {
    unint64_t v2 = result;
    if (v1)
    {
      unint64_t v4 = 1;
      uint64_t v5 = 120;
      do
      {
        uint64_t v6 = v2[4] + v5;
        uint64_t v7 = v6 - 40;
        re::DynamicArray<unsigned long>::deinit(v6);
        __n128 result = (void *)re::DynamicArray<unsigned long>::deinit(v7);
        ++v4;
        v5 += 80;
      }
      while (v4 < v2[2]);
    }
    else if (result[1] || (__n128 result = re::DynamicArray<re::RigBasicConstraint>::setCapacity(result, 1uLL), !v2[2]))
    {
      uint64_t v3 = v2[4];
      *(void *)uint64_t v3 = 0;
      *(void *)(v3 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      *(_DWORD *)(v3 + 24) = 0;
      *(void *)(v3 + 16) = 0;
      *(void *)(v3 + 72) = 0;
      *(_OWORD *)(v3 + 32) = 0u;
      *(_OWORD *)(v3 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0u;
      *(_DWORD *)(v3 + 64) = 0;
    }
    char v2[2] = 1;
    ++*((_DWORD *)v2 + 6);
  }
  return result;
}

void re::ecs2::ShadowClusterSystem::~ShadowClusterSystem(re::ecs2::ShadowClusterSystem *this)
{
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 26);
  re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 20);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::ShadowClusterSystem::typeInfo(re::ecs2::ShadowClusterSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ShadowClusterSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_ShadowClusterSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_ShadowClusterSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::ShadowClusterSystem>, 0);
}

void re::internal::CallableMemFn<re::ecs2::ShadowClusterSystem,REEventHandlerResult (re::ecs2::ShadowClusterSystem::*)(re::ecs2::Scene *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Scene *,RESceneEntityDidReparentEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::ShadowClusterSystem,REEventHandlerResult (re::ecs2::ShadowClusterSystem::*)(re::ecs2::Scene *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Scene *,RESceneEntityDidReparentEvent const&)>::operator()(void *a1, void *a2)
{
  unint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    unint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::ShadowClusterSystem,REEventHandlerResult (re::ecs2::ShadowClusterSystem::*)(re::ecs2::Scene *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Scene *,RESceneEntityDidReparentEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6FA9A8;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::ShadowClusterSystem,REEventHandlerResult (re::ecs2::ShadowClusterSystem::*)(re::ecs2::Scene *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Scene *,RESceneEntityDidReparentEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6FA9A8;
  *(void *)(a2 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::ShadowClusterSystem,REEventHandlerResult (re::ecs2::ShadowClusterSystem::*)(re::ecs2::Scene *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Scene *,RESceneEntityDidReparentEvent const&)>::size()
{
  return 32;
}

uint64_t (***re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneEntityDidReparentEvent const&)>::destroyCallable(uint64_t a1))(void)
{
  __n128 result = *(uint64_t (****)(void))(a1 + 32);
  if (result)
  {
    __n128 result = (uint64_t (***)(void))(**result)(result);
    if (*(void *)(a1 + 32) != a1) {
      __n128 result = (uint64_t (***)(void))(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24));
    }
    *(void *)(a1 + 32) = 0;
  }
  return result;
}

void re::internal::CallableMemFn<re::ecs2::ShadowClusterSystem,REEventHandlerResult (re::ecs2::ShadowClusterSystem::*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::ShadowClusterSystem,REEventHandlerResult (re::ecs2::ShadowClusterSystem::*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::ShadowClusterSystem,REEventHandlerResult (re::ecs2::ShadowClusterSystem::*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6FAA10;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::ShadowClusterSystem,REEventHandlerResult (re::ecs2::ShadowClusterSystem::*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6FAA10;
  *(void *)(a2 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::ShadowClusterSystem,REEventHandlerResult (re::ecs2::ShadowClusterSystem::*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::size()
{
  return 32;
}

id re::internal::defaultRetain<re::ecs2::ShadowClusterSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::ShadowClusterSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
}

uint64_t re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneEntityDidReparentEvent const&)>::operator=<24ul>(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneEntityDidReparentEvent const&)>::destroyCallable(a1);
    uint64_t v4 = *(void *)(a2 + 32);
    if (v4)
    {
      unint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4);
      uint64_t v6 = a1;
      if (v5 >= 0x19)
      {
        unint64_t v7 = v5;
        uint64_t v8 = *(void *)(a1 + 24);
        if (v8) {
          uint64_t v6 = (*(uint64_t (**)(uint64_t, unint64_t, void))(*(void *)v8 + 32))(v8, v7, 0);
        }
        else {
          uint64_t v6 = 0;
        }
      }
      *(void *)(a1 + 32) = v6;
      (*(void (**)(void))(**(void **)(a2 + 32) + 24))(*(void *)(a2 + 32));
    }
  }
  return a1;
}

void *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Scene,RESceneEntityDidReparentEvent>(re::ecs2::Scene *,re::Function<REEventHandlerResult ()(re::ecs2::Scene *,RESceneEntityDidReparentEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::~Callable(void *a1)
{
  *a1 = &unk_26E6FAA68;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneEntityDidReparentEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  return a1;
}

void re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Scene,RESceneEntityDidReparentEvent>(re::ecs2::Scene *,re::Function<REEventHandlerResult ()(re::ecs2::Scene *,RESceneEntityDidReparentEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::~Callable(void *a1)
{
  *a1 = &unk_26E6FAA68;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneEntityDidReparentEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Scene,RESceneEntityDidReparentEvent>(re::ecs2::Scene *,re::Function<REEventHandlerResult ()(re::ecs2::Scene *,RESceneEntityDidReparentEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  uint64_t v5 = *a2;
  return (*(uint64_t (**)(void, uint64_t *, uint64_t))(**(void **)(a1 + 40) + 16))(*(void *)(a1 + 40), &v5, v3);
}

void *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Scene,RESceneEntityDidReparentEvent>(re::ecs2::Scene *,re::Function<REEventHandlerResult ()(re::ecs2::Scene *,RESceneEntityDidReparentEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::cloneInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E6FAA68;
  a2[4] = *(void *)(a1 + 32);
  a2[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneEntityDidReparentEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

void *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Scene,RESceneEntityDidReparentEvent>(re::ecs2::Scene *,re::Function<REEventHandlerResult ()(re::ecs2::Scene *,RESceneEntityDidReparentEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::moveInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E6FAA68;
  a2[4] = *(void *)(a1 + 32);
  a2[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneEntityDidReparentEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Scene,RESceneEntityDidReparentEvent>(re::ecs2::Scene *,re::Function<REEventHandlerResult ()(re::ecs2::Scene *,RESceneEntityDidReparentEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::size()
{
  return 48;
}

void *re::DynamicArray<re::AABB>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      __n128 result = (void *)*result;
      if (*v5)
      {
        if (!a2)
        {
          unint64_t v7 = 0;
          if (!v3) {
            goto LABEL_9;
          }
          goto LABEL_8;
        }
        if (a2 >> 59)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 32, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          uint64_t v2 = 32 * a2;
          __n128 result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 32 * a2, 16);
          if (result)
          {
            unint64_t v7 = result;
            if (!v5[1])
            {
LABEL_9:
              _OWORD v5[4] = v7;
              v5[1] = a2;
              return result;
            }
LABEL_8:
            memcpy(v7, (const void *)v5[4], 32 * v5[2]);
            __n128 result = (void *)(*(uint64_t (**)(void, void))(*(void *)*v5 + 40))(*v5, v5[4]);
            goto LABEL_9;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        __n128 result = (void *)_os_crash();
        __break(1u);
      }
      else
      {
        __n128 result = (void *)re::DynamicArray<re::AABB>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
      }
    }
  }
  return result;
}

uint64_t re::DynamicArray<re::AABB>::DynamicArray(uint64_t a1, uint64_t *a2)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  uint64_t v3 = *a2;
  if (*a2)
  {
    unint64_t v5 = a2[2];
    *(void *)a1 = v3;
    re::DynamicArray<re::AABB>::setCapacity((void *)a1, v5);
    ++*(_DWORD *)(a1 + 24);
    re::DynamicArray<re::AABB>::copy((void **)a1, (uint64_t)a2);
  }
  return a1;
}

void **re::DynamicArray<re::AABB>::copy(void **result, uint64_t a2)
{
  uint64_t v3 = result;
  unint64_t v4 = *(void *)(a2 + 16);
  if (v4 >= (unint64_t)result[2])
  {
    re::DynamicArray<re::AABB>::setCapacity(result, *(void *)(a2 + 16));
    unint64_t v5 = v3[2];
    if (v5)
    {
      memmove(v3[4], *(const void **)(a2 + 32), 32 * (void)v5);
      unint64_t v5 = v3[2];
    }
    __n128 result = (void **)memcpy((char *)v3[4] + 32 * (void)v5, (const void *)(*(void *)(a2 + 32) + 32 * (void)v5), 32 * v4 - 32 * (void)v5);
  }
  else if (v4)
  {
    __n128 result = (void **)memmove(result[4], *(const void **)(a2 + 32), 32 * v4);
  }
  v3[2] = (void *)v4;
  return result;
}

void *re::DynamicArray<re::AABB>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    unint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::AABB>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::AABB>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

uint64_t re::DynamicArray<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true>>::DynamicArray(uint64_t a1, uint64_t *a2)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  uint64_t v3 = *a2;
  if (*a2)
  {
    unint64_t v5 = a2[2];
    *(void *)a1 = v3;
    re::DynamicArray<re::RigBasicConstraint>::setCapacity((void *)a1, v5);
    ++*(_DWORD *)(a1 + 24);
    unint64_t v6 = a2[2];
    if (v6 >= *(void *)(a1 + 16))
    {
      re::DynamicArray<re::RigBasicConstraint>::setCapacity((void *)a1, a2[2]);
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true> *,re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true> *,re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true> *>((void **)a2[4], (void **)(a2[4] + 80 * *(void *)(a1 + 16)), *(void ***)(a1 + 32));
      uint64_t v10 = *(void *)(a1 + 16);
      if (v10 != v6)
      {
        uint64_t v11 = 5 * v10;
        uint64_t v12 = (uint64_t *)(a2[4] + 16 * v11);
        uint64_t v13 = *(void *)(a1 + 32) + 16 * v11;
        uint64_t v14 = 80 * v6 - 16 * v11;
        do
        {
          re::DynamicArray<re::AABB>::DynamicArray(v13, v12);
          re::DynamicArray<char const*>::DynamicArray(v13 + 40, v12 + 5);
          v12 += 10;
          v13 += 80;
          v14 -= 80;
        }
        while (v14);
      }
    }
    else
    {
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true> *,re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true> *,re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true> *>((void **)a2[4], (void **)(a2[4] + 80 * v6), *(void ***)(a1 + 32));
      uint64_t v7 = *(void *)(a1 + 16);
      if (v6 != v7)
      {
        uint64_t v8 = *(void *)(a1 + 32) + 80 * v6;
        uint64_t v9 = 80 * v7 - 80 * v6;
        do
        {
          re::DynamicArray<unsigned long>::deinit(v8 + 40);
          re::DynamicArray<unsigned long>::deinit(v8);
          v8 += 80;
          v9 -= 80;
        }
        while (v9);
      }
    }
    *(void *)(a1 + 16) = v6;
  }
  return a1;
}

void **std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true> *,re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true> *,re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true> *>(void **result, void **a2, void **a3)
{
  if (result != a2)
  {
    unint64_t v5 = result;
    uint64_t v6 = 0;
    do
    {
      if (v5 != a3)
      {
        uint64_t v7 = v5[v6];
        if (a3[v6])
        {
          if (v7)
          {
            __n128 result = re::DynamicArray<re::AABB>::copy(&a3[v6], (uint64_t)&v5[v6]);
            uint64_t v8 = &a3[v6];
          }
          else
          {
            uint64_t v8 = &a3[v6];
            a3[v6 + 2] = 0;
          }
          ++*((_DWORD *)v8 + 6);
        }
        else if (v7)
        {
          unint64_t v9 = (unint64_t)v5[v6 + 2];
          a3[v6] = v7;
          re::DynamicArray<re::AABB>::setCapacity(&a3[v6], v9);
          ++LODWORD(a3[v6 + 3]);
          __n128 result = re::DynamicArray<re::AABB>::copy(&a3[v6], (uint64_t)&v5[v6]);
        }
        uint64_t v10 = v5[v6 + 5];
        if (a3[v6 + 5])
        {
          if (v10)
          {
            __n128 result = re::DynamicArray<char const*>::copy(&a3[v6 + 5], (uint64_t)&v5[v6 + 5]);
            uint64_t v11 = &a3[v6];
          }
          else
          {
            uint64_t v11 = &a3[v6];
            a3[v6 + 7] = 0;
          }
          ++*((_DWORD *)v11 + 16);
        }
        else if (v10)
        {
          unint64_t v12 = (unint64_t)v5[v6 + 7];
          a3[v6 + 5] = v10;
          re::DynamicArray<float *>::setCapacity(&a3[v6 + 5], v12);
          ++LODWORD(a3[v6 + 8]);
          __n128 result = re::DynamicArray<char const*>::copy(&a3[v6 + 5], (uint64_t)&v5[v6 + 5]);
        }
      }
      v6 += 10;
    }
    while (&v5[v6] != a2);
  }
  return result;
}

void *re::DynamicArray<re::Pair<re::AABB,unsigned int,true>>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    unint64_t v5 = result;
    if (result[2] <= a2)
    {
      __n128 result = (void *)*result;
      if (*v5)
      {
        if (!a2)
        {
          uint64_t v7 = 0;
          if (!v3) {
            goto LABEL_9;
          }
          goto LABEL_8;
        }
        if (is_mul_ok(a2, 0x30uLL))
        {
          uint64_t v2 = 48 * a2;
          __n128 result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 48 * a2, 16);
          if (result)
          {
            uint64_t v7 = result;
            if (!v5[1])
            {
LABEL_9:
              _OWORD v5[4] = v7;
              v5[1] = a2;
              return result;
            }
LABEL_8:
            memcpy(v7, (const void *)v5[4], 48 * v5[2]);
            __n128 result = (void *)(*(uint64_t (**)(void, void))(*(void *)*v5 + 40))(*v5, v5[4]);
            goto LABEL_9;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 48, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        __n128 result = (void *)_os_crash();
        __break(1u);
      }
      else
      {
        __n128 result = (void *)re::DynamicArray<re::Pair<re::AABB,unsigned int,true>>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
      }
    }
  }
  return result;
}

uint64_t re::HashTable<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true> const*,unsigned int,re::Hash<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true> const*>,re::EqualTo<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true> const*>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, _DWORD *a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      int v11 = *(_DWORD *)(a1 + 28);
      signed int v12 = 2 * v11;
      uint64_t v13 = *(void *)a1;
      if (*(void *)a1)
      {
        if (v12) {
          BOOL v14 = v9 == v12;
        }
        else {
          BOOL v14 = 1;
        }
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v26, 0, 36);
          *(void *)&v26[36] = 0x7FFFFFFFLL;
          re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v26, v13, v12);
          long long v15 = *(_OWORD *)v26;
          *(_OWORD *)uint64_t v26 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          uint64_t v16 = *(void *)&v26[16];
          uint64_t v17 = *(void *)(a1 + 16);
          *(void *)&v26[16] = v17;
          *(void *)(a1 + 16) = v16;
          long long v19 = *(_OWORD *)&v26[24];
          *(_OWORD *)&v26[24] = *(_OWORD *)(a1 + 24);
          unsigned int v18 = *(_DWORD *)&v26[32];
          *(_OWORD *)(a1 + 24) = v19;
          uint64_t v20 = v18;
          if (v18)
          {
            uint64_t v21 = v17 + 16;
            do
            {
              if ((*(_DWORD *)(v21 - 8) & 0x80000000) != 0) {
                re::HashTable<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true> const*,unsigned int,re::Hash<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true> const*>,re::EqualTo<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true> const*>,true,false>::addAsMove(a1, *(void *)(v21 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(v21 - 16), v21, v21 + 8);
              }
              v21 += 32;
              --v20;
            }
            while (v20);
          }
          re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)v26);
        }
      }
      else
      {
        if (v12) {
          signed int v24 = 2 * v11;
        }
        else {
          signed int v24 = 3;
        }
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v22 = *(void *)(a1 + 16);
    int v23 = *(_DWORD *)(v22 + 32 * v9 + 8);
  }
  else
  {
    uint64_t v22 = *(void *)(a1 + 16);
    int v23 = *(_DWORD *)(v22 + 32 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v23 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v22 + 32 * v9 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v23 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + 32 * v9 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 32 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 32 * v9) = a3;
  *(void *)(*(void *)(a1 + 16) + 32 * v9 + 16) = *a4;
  *(_DWORD *)(*(void *)(a1 + 16) + 32 * v9 + 24) = *a5;
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void std::__function::__func<re::ecs2::ShadowClusterSystem::mergeClusters(re::DynamicArray<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true>> const&,re::DynamicArray<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true>> const&,float)::$_0,std::allocator<re::ecs2::ShadowClusterSystem::mergeClusters(re::DynamicArray<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true>> const&,re::DynamicArray<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true>> const&,float)::$_0>,void ()(re::Pair<re::AABB,unsigned int,true> const&,re::Pair<re::AABB,unsigned int,true> const&)>::~__func()
{
}

__n128 std::__function::__func<re::ecs2::ShadowClusterSystem::mergeClusters(re::DynamicArray<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true>> const&,re::DynamicArray<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true>> const&,float)::$_0,std::allocator<re::ecs2::ShadowClusterSystem::mergeClusters(re::DynamicArray<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true>> const&,re::DynamicArray<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true>> const&,float)::$_0>,void ()(re::Pair<re::AABB,unsigned int,true> const&,re::Pair<re::AABB,unsigned int,true> const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26E6FAAC0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = result;
  return result;
}

__n128 std::__function::__func<re::ecs2::ShadowClusterSystem::mergeClusters(re::DynamicArray<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true>> const&,re::DynamicArray<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true>> const&,float)::$_0,std::allocator<re::ecs2::ShadowClusterSystem::mergeClusters(re::DynamicArray<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true>> const&,re::DynamicArray<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true>> const&,float)::$_0>,void ()(re::Pair<re::AABB,unsigned int,true> const&,re::Pair<re::AABB,unsigned int,true> const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6FAAC0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = result;
  return result;
}

uint64_t std::__function::__func<re::ecs2::ShadowClusterSystem::mergeClusters(re::DynamicArray<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true>> const&,re::DynamicArray<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true>> const&,float)::$_0,std::allocator<re::ecs2::ShadowClusterSystem::mergeClusters(re::DynamicArray<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true>> const&,re::DynamicArray<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true>> const&,float)::$_0>,void ()(re::Pair<re::AABB,unsigned int,true> const&,re::Pair<re::AABB,unsigned int,true> const&)>::operator()(uint64_t result, float32x4_t *a2, float32x4_t *a3)
{
  float32x4_t v3 = vsubq_f32(a2[1], *a2);
  v3.i32[3] = 0;
  float32x4_t v4 = vmaxnmq_f32(v3, (float32x4_t)0);
  float32x4_t v5 = vsubq_f32(a3[1], *a3);
  v5.i32[3] = 0;
  float32x4_t v6 = vmaxnmq_f32(v5, (float32x4_t)0);
  float v7 = vdivq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v4, 2), vaddq_f32(v4, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v4.f32, 1))), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v6, 2), vaddq_f32(v6, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v6.f32, 1)))).f32[0];
  if (v7 > 1.0) {
    float v7 = 1.0 / v7;
  }
  if (v7 >= *(float *)(result + 16))
  {
    uint64_t v8 = *(re::UnionFind **)(result + 8);
    uint64_t v9 = a3[2].u32[0];
    unsigned int Set = re::UnionFind::findSet(v8, a2[2].u32[0]);
    __n128 result = re::UnionFind::findSet(v8, v9);
    if (Set != result)
    {
      unint64_t v11 = *((void *)v8 + 1);
      if (v11 <= Set)
      {
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      else if (v11 > result)
      {
        uint64_t v12 = *((void *)v8 + 2);
        unsigned int v13 = *(_DWORD *)(v12 + 8 * Set + 4);
        unsigned int v14 = *(_DWORD *)(v12 + 8 * result + 4);
        if (v13 >= v14) {
          unint64_t v15 = result;
        }
        else {
          unint64_t v15 = Set;
        }
        if (v11 > v15)
        {
          if (v13 >= v14) {
            unint64_t v16 = Set;
          }
          else {
            unint64_t v16 = result;
          }
          *(_DWORD *)(v12 + 8 * vre::HashTable<re::ecs2::Scene *,re::DynamicArray<RESubscriptionHandle>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 15) = v16;
          if (v11 > v16)
          {
            *(_DWORD *)(v12 + 8 * v16 + 4) += *(_DWORD *)(v12 + 8 * v15 + 4);
            return result;
          }
LABEL_20:
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
LABEL_19:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_20;
      }
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_19;
    }
  }
  return result;
}

uint64_t std::__function::__func<re::ecs2::ShadowClusterSystem::mergeClusters(re::DynamicArray<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true>> const&,re::DynamicArray<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true>> const&,float)::$_0,std::allocator<re::ecs2::ShadowClusterSystem::mergeClusters(re::DynamicArray<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true>> const&,re::DynamicArray<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true>> const&,float)::$_0>,void ()(re::Pair<re::AABB,unsigned int,true> const&,re::Pair<re::AABB,unsigned int,true> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::ecs2::ShadowClusterSystem::mergeClusters(re::DynamicArray<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true>> const&,re::DynamicArray<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true>> const&,float)::$_0,std::allocator<re::ecs2::ShadowClusterSystem::mergeClusters(re::DynamicArray<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true>> const&,re::DynamicArray<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true>> const&,float)::$_0>,void ()(re::Pair<re::AABB,unsigned int,true> const&,re::Pair<re::AABB,unsigned int,true> const&)>::target_type()
{
}

void *re::ecs2::allocInfo_ClippingBoxComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF856D0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF856D0))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF85700, "ClippingBoxComponent");
    __cxa_guard_release(&qword_26AF856D0);
  }
  return &unk_26AF85700;
}

void re::ecs2::initInfo_ClippingBoxComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v23[0] = 0xEBF69FF01B370AE8;
  v23[1] = "ClippingBoxComponent";
  re::StringID::destroyString((re::StringID *)v23);
  *((_OWORD *)this + 2) = v24;
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_194, memory_order_acquire) & 1) == 0)
  {
    float32x4_t v4 = (re *)__cxa_guard_acquire(&_MergedGlobals_194);
    if (v4)
    {
      float32x4_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 4ArcSharedObject::ArcSharedObject(this, 0) = 3;
      *(void *)(v7 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF856D8 = v7;
      uint64_t v8 = re::introspectionAllocator((re *)v7);
      uint64_t v9 = re::introspect_Vector3F((re::IntrospectionBase **)1);
      uint64_t v10 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v10 = 1;
      *(void *)(v10 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "m_localBoundsMin";
      *(void *)(v10 + 16) = v9;
      *(void *)(v10 + 24) = 0;
      *(void *)(v10 + 32) = 0x2000000001;
      *(_DWORD *)(v10 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v10 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      *(void *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_26AF856E0 = v10;
      unint64_t v11 = re::introspectionAllocator((re *)v10);
      uint64_t v12 = re::introspect_Vector3F((re::IntrospectionBase **)1);
      uint64_t v13 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v11 + 32))(v11, 72, 8);
      *(_DWORD *)uint64_t v13 = 1;
      *(void *)(v13 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "m_localBoundsMax";
      *(void *)(v13 + 16) = v12;
      *(void *)(v13 + 24) = 0;
      *(void *)(v13 + 32) = 0x3000000002;
      *(_DWORD *)(v13 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v13 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      *(void *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_26AF856E8 = v13;
      unsigned int v14 = re::introspectionAllocator((re *)v13);
      unint64_t v16 = re::introspect_BOOL((re *)1, v15);
      uint64_t v17 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v14 + 32))(v14, 72, 8);
      *(_DWORD *)uint64_t v17 = 1;
      *(void *)(v17 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "m_clipChildren";
      *(void *)(v17 + 16) = v16;
      *(void *)(v17 + 24) = 0;
      *(void *)(v17 + 32) = 0x4400000004;
      *(_DWORD *)(v17 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v17 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      *(void *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_26AF856F0 = v17;
      unsigned int v18 = re::introspectionAllocator((re *)v17);
      uint64_t v20 = re::introspect_float((re *)1, v19);
      uint64_t v21 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v18 + 32))(v18, 72, 8);
      *(_DWORD *)uint64_t v21 = 1;
      *(void *)(v21 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "m_featherIntervalFraction";
      *(void *)(v21 + 16) = v20;
      *(void *)(v21 + 24) = 0;
      *(void *)(v21 + 32) = 0x4000000005;
      *(_DWORD *)(v21 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v21 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      *(void *)(v21 + 56) = 0;
      *(_DWORD *)(v21 + 64) = 0;
      qword_26AF856F8 = v21;
      __cxa_guard_release(&_MergedGlobals_194);
    }
  }
  *((void *)this + 2) = 0x5000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 5;
  *((void *)this + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = &qword_26AF856D8;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::ClippingBoxComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 1ArcSharedObject::ArcSharedObject(this, 0) = re::internal::defaultDestruct<re::ecs2::ClippingBoxComponent>;
  *((void *)this + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::ClippingBoxComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::ClippingBoxComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v22 = v24;
}

void re::internal::defaultConstruct<re::ecs2::ClippingBoxComponent>(int a1, int a2, ArcSharedObject *this)
{
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)(v3 + 16) = 0;
  *(unsigned char *)(v3 + 24) = 0;
  *(void *)uint64_t v3 = &unk_26E6E9098;
  *(void *)(v3 + 32) = 0xBF000000BF000000;
  *(void *)(v3 + 4ArcSharedObject::ArcSharedObject(this, 0) = 3204448256;
  *(void *)(v3 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0x3F0000003F000000;
  *(void *)(v3 + 56) = 1056964608;
  *(_DWORD *)(v3 + 64) = 0;
  *(unsigned char *)(v3 + 6re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
}

void *re::internal::defaultDestruct<re::ecs2::ClippingBoxComponent>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

void re::internal::defaultConstructV2<re::ecs2::ClippingBoxComponent>(ArcSharedObject *a1)
{
  *((_OWORD *)a1 + 3) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *(_OWORD *)a1 = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(void *)(v1 + 16) = 0;
  *(unsigned char *)(v1 + 24) = 0;
  *(void *)uint64_t v1 = &unk_26E6E9098;
  *(void *)(v1 + 32) = 0xBF000000BF000000;
  *(void *)(v1 + 4ArcSharedObject::ArcSharedObject(this, 0) = 3204448256;
  *(void *)(v1 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0x3F0000003F000000;
  *(void *)(v1 + 56) = 1056964608;
  *(_DWORD *)(v1 + 64) = 0;
  *(unsigned char *)(v1 + 6re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
}

void *re::internal::defaultDestructV2<re::ecs2::ClippingBoxComponent>(void *a1)
{
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_ClippingBoxComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ClippingBoxComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_ClippingBoxComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_ClippingBoxComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::ClippingBoxComponent>, this);
}

void *re::ecs2::allocInfo_TintService(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_195, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_195))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF85780, "TintService");
    __cxa_guard_release(&_MergedGlobals_195);
  }
  return &unk_26AF85780;
}

void re::ecs2::initInfo_TintService(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v5[0] = 0x1FD9D995C2CE634;
  v5[1] = "TintService";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0x800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = &re::ecs2::initInfo_TintService(re::IntrospectionBase *)::structureAttributes;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

uint64_t re::ecs2::introspect_TintService(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"TintService", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_TintService, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_TintService, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::TintService>, this);
}

void *re::ecs2::allocInfo_PinAlignment(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF85818, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF85818))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF858C8, "PinAlignment");
    __cxa_guard_release(&qword_26AF85818);
  }
  return &unk_26AF858C8;
}

void re::ecs2::initInfo_PinAlignment(re::ecs2 *this, re::IntrospectionBase *a2)
{
  uint64_t v65 = 0x3AE3A0B4A362B7DCLL;
  int v66 = "PinAlignment";
  re::StringID::destroyString((re::StringID *)&v65);
  *((_OWORD *)this + 2) = v61;
  if (atomic_load_explicit((atomic_uchar *volatile)&qword_26AF85810, memory_order_acquire)) {
    goto LABEL_2;
  }
  long long v4 = (re *)__cxa_guard_acquire(&qword_26AF85810);
  if (!v4) {
    goto LABEL_2;
  }
  long long v6 = re::introspectionAllocator(v4);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF85800, memory_order_acquire) & 1) == 0)
  {
    uint64_t v44 = (re *)__cxa_guard_acquire(&qword_26AF85800);
    if (v44)
    {
      unsigned int v45 = re::introspectionAllocator(v44);
      uint64_t v46 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v45 + 32))(v45, 24, 8);
      *(_DWORD *)uint64_t v46 = 1;
      *((void *)v46 + 1) = 0;
      *((void *)v46 + 2) = "Rigid";
      qword_26AF85848 = (uint64_t)v46;
      unint64_t v47 = re::introspectionAllocator(v46);
      unsigned int v48 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v47 + 32))(v47, 24, 8);
      *(_DWORD *)unsigned int v48 = 1;
      *((void *)v48 + 1) = 1;
      *((void *)v48 + 2) = "PointToPoint";
      qword_26AF85850 = (uint64_t)v48;
      float32x4_t v49 = re::introspectionAllocator(v48);
      uint64_t v50 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v49 + 32))(v49, 24, 8);
      *(_DWORD *)uint64_t v50 = 1;
      *((void *)v50 + 1) = 2;
      *((void *)v50 + 2) = "DirectionToDirection";
      qword_26AF85858 = (uint64_t)v50;
      uint64_t v51 = re::introspectionAllocator(v50);
      uint64_t v52 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v51 + 32))(v51, 24, 8);
      *(_DWORD *)uint64_t v52 = 1;
      *((void *)v52 + 1) = 3;
      *((void *)v52 + 2) = "PointToLine";
      qword_26AF85860 = (uint64_t)v52;
      uint64_t v53 = re::introspectionAllocator(v52);
      int v54 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v53 + 32))(v53, 24, 8);
      *(_DWORD *)int v54 = 1;
      *((void *)v54 + 1) = 4;
      *((void *)v54 + 2) = "PointToPlane";
      qword_26AF85868 = (uint64_t)v54;
      unint64_t v55 = re::introspectionAllocator(v54);
      unint64_t v56 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v55 + 32))(v55, 24, 8);
      *(_DWORD *)unint64_t v56 = 1;
      *((void *)v56 + 1) = 5;
      *((void *)v56 + 2) = "LineToLine";
      qword_26AF85870 = (uint64_t)v56;
      unint64_t v57 = re::introspectionAllocator(v56);
      uint64_t v58 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v57 + 32))(v57, 24, 8);
      *(_DWORD *)uint64_t v58 = 1;
      *(void *)(v58 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 6;
      *(void *)(v58 + 16) = "PlaneToPlane";
      qword_26AF85878 = v58;
      __cxa_guard_release(&qword_26AF85800);
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF85808, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF85808))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_26AF85880, "PinAlignmentType", 1, 1, 1, 1);
    qword_26AF85880 = (uint64_t)&unk_26E715E00;
    qword_26AF858C0 = (uint64_t)&re::ecs2::introspect_PinAlignmentType(BOOL)::enumTable;
    dword_26AF85890 = 9;
    __cxa_guard_release(&qword_26AF85808);
  }
  if (_MergedGlobals_196)
  {
LABEL_33:
    uint64_t v29 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v6 + 32))(v6, 72, 8);
    *(_DWORD *)uint64_t v29 = 1;
    *(void *)(v29 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "m_type";
    *(void *)(v29 + 16) = &qword_26AF85880;
    *(void *)(v29 + 24) = 0;
    *(void *)(v29 + 32) = 1;
    *(_DWORD *)(v29 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
    *(void *)(v29 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
    *(void *)(v29 + 56) = 0;
    *(_DWORD *)(v29 + 64) = 0;
    qword_26AF85820 = v29;
    uint64_t v30 = re::introspectionAllocator((re *)v29);
    uint64_t v31 = re::introspect_PoseF((re::IntrospectionBase **)1);
    uint64_t v32 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v30 + 32))(v30, 72, 8);
    *(_DWORD *)uint64_t v32 = 1;
    *(void *)(v32 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "m_sourcePose";
    *(void *)(v32 + 16) = v31;
    *(void *)(v32 + 24) = 0;
    *(void *)(v32 + 32) = 0x1000000002;
    *(_DWORD *)(v32 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
    *(void *)(v32 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
    *(void *)(v32 + 56) = 0;
    *(_DWORD *)(v32 + 64) = 0;
    qword_26AF85828 = v32;
    uint32x4_t v33 = re::introspectionAllocator((re *)v32);
    uint64_t v34 = re::introspect_PoseF((re::IntrospectionBase **)1);
    uint64_t v35 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v33 + 32))(v33, 72, 8);
    *(_DWORD *)uint64_t v35 = 1;
    *(void *)(v35 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "m_targetPose";
    *(void *)(v35 + 16) = v34;
    *(void *)(v35 + 24) = 0;
    *(void *)(v35 + 32) = 0x3000000003;
    *(_DWORD *)(v35 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
    *(void *)(v35 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
    *(void *)(v35 + 56) = 0;
    *(_DWORD *)(v35 + 64) = 0;
    qword_26AF85830 = v35;
    float32x4_t v36 = re::introspectionAllocator((re *)v35);
    float32x4_t v38 = re::introspect_BOOL((re *)1, v37);
    uint64_t v39 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v36 + 32))(v36, 72, 8);
    *(_DWORD *)uint64_t v39 = 1;
    *(void *)(v39 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "m_isSameOrientation";
    *(void *)(v39 + 16) = v38;
    *(void *)(v39 + 24) = 0;
    *(void *)(v39 + 32) = 0x5000000004;
    *(_DWORD *)(v39 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
    *(void *)(v39 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
    *(void *)(v39 + 56) = 0;
    *(_DWORD *)(v39 + 64) = 0;
    qword_26AF85838 = v39;
    float32x4_t v40 = re::introspectionAllocator((re *)v39);
    uint64_t v42 = re::IntrospectionInfo<re::DynamicArray<float>>::get(1, v41);
    uint64_t v43 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v40 + 32))(v40, 72, 8);
    *(_DWORD *)uint64_t v43 = 1;
    *(void *)(v43 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "m_values";
    *(void *)(v43 + 16) = v42;
    *(void *)(v43 + 24) = 0;
    *(void *)(v43 + 32) = 0x5800000005;
    *(_DWORD *)(v43 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
    *(void *)(v43 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
    *(void *)(v43 + 56) = 0;
    *(_DWORD *)(v43 + 64) = 0;
    qword_26AF85840 = v43;
    __cxa_guard_release(&qword_26AF85810);
LABEL_2:
    *((void *)this + 2) = 0x8000000008;
    *((_DWORD *)this + 6) = 16;
    *((_WORD *)this + 14) = 0;
    *((_DWORD *)this + 14) = 5;
    *((void *)this + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = &qword_26AF85820;
    *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::PinAlignment>;
    *((void *)this + 11) = 0;
    *((void *)this + 12) = 0;
    *((void *)this + 1ArcSharedObject::ArcSharedObject(this, 0) = re::internal::defaultDestruct<re::ecs2::PinAlignment>;
    *((void *)this + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::PinAlignment>;
    *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::PinAlignment>;
    re::IntrospectionRegistry::add(this, v3);
    long long v60 = v61;
    return;
  }
  _MergedGlobals_196 = 1;
  re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_26AF85880, v5);
  v62[0] = 0xEA05251A419B7090;
  v62[1] = (uint64_t)"PinAlignmentType";
  uint64_t v65 = 0x31CD534126;
  int v66 = "uint8_t";
  uint64_t v7 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, &v65);
  if (v7)
  {
    uint64_t v8 = *v7;
    re::StringID::destroyString((re::StringID *)&v65);
    uint64_t v9 = (unsigned int *)qword_26AF858C0;
    v64[1] = v8;
    re::TypeBuilder::beginEnumType((uint64_t)&v65, v62, 1, 1, (uint64_t)v64);
    unint64_t v11 = *v9;
    if (v11)
    {
      for (unint64_t i = 0; i < v11; ++i)
      {
        uint64_t v13 = *(void *)(*((void *)v9 + 1) + 8 * i);
        if (*(_DWORD *)v13 == 1)
        {
          unsigned int v14 = *(char **)(v13 + 16);
          if (v14)
          {
            uint64_t v15 = *v14;
            if (*v14)
            {
              char v16 = v14[1];
              if (v16)
              {
                uint64_t v17 = (unsigned __int8 *)(v14 + 2);
                do
                {
                  uint64_t v15 = 31 * v15 + v16;
                  int v18 = *v17++;
                  char v16 = v18;
                }
                while (v18);
              }
            }
          }
          else
          {
            uint64_t v15 = 0;
          }
          uint64_t v19 = *(void *)(v13 + 8);
          *(void *)&v63.var0 = 2 * v15;
          v63.var1 = v14;
          re::TypeBuilder::addEnumConstant((re::TypeBuilder *)&v65, v19, &v63);
          re::StringID::destroyString((re::StringID *)&v63);
          unint64_t v11 = *v9;
        }
      }
      if (v11)
      {
        for (unint64_t j = 0; j < v11; ++j)
        {
          uint64_t v21 = *(void *)(*((void *)v9 + 1) + 8 * j);
          if (*(_DWORD *)v21 == 2)
          {
            long long v22 = *(char **)(v21 + 16);
            if (v22)
            {
              uint64_t v23 = *v22;
              if (*v22)
              {
                char v24 = v22[1];
                if (v24)
                {
                  int v25 = (unsigned __int8 *)(v22 + 2);
                  do
                  {
                    uint64_t v23 = 31 * v23 + v24;
                    int v26 = *v25++;
                    char v24 = v26;
                  }
                  while (v26);
                }
              }
            }
            else
            {
              uint64_t v23 = 0;
            }
            uint64_t v27 = *(void *)(v21 + 8);
            *(void *)&v63.var0 = 2 * v23;
            v63.var1 = v22;
            re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)&v65, v27, &v63);
            re::StringID::destroyString((re::StringID *)&v63);
            unint64_t v11 = *v9;
          }
        }
      }
    }
    re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v65, v28);
    xmmword_26AF858A0 = (__int128)v63;
    re::StringID::destroyString((re::StringID *)v62);
    goto LABEL_33;
  }
  re::StringID::destroyString((re::StringID *)&v65);
  re::internal::assertLog((re::internal *)5, v59, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "PinAlignmentType");
  _os_crash();
  __break(1u);
}

double re::internal::defaultConstruct<re::ecs2::PinAlignment>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a3 = 0;
  double result = 0.0;
  *(_OWORD *)(a3 + 16) = 0u;
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0x3F80000000000000;
  *(_OWORD *)(a3 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0u;
  *(void *)(a3 + 64) = 0;
  *(void *)(a3 + 72) = 0x3F80000000000000;
  *(unsigned char *)(a3 + 8ArcSharedObject::ArcSharedObject(this, 0) = 1;
  *(void *)(a3 + 12ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *(void *)(a3 + 96) = 0;
  *(void *)(a3 + 104) = 0;
  *(void *)(a3 + 8re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
  *(_DWORD *)(a3 + 112) = 0;
  return result;
}

uint64_t re::internal::defaultDestruct<re::ecs2::PinAlignment>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::DynamicArray<unsigned long>::deinit(a3 + 88);
}

double re::internal::defaultConstructV2<re::ecs2::PinAlignment>(uint64_t a1)
{
  *(unsigned char *)a1 = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0x3F80000000000000;
  *(_OWORD *)(a1 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0u;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0x3F80000000000000;
  *(unsigned char *)(a1 + 8ArcSharedObject::ArcSharedObject(this, 0) = 1;
  *(void *)(a1 + 12ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 8re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
  *(_DWORD *)(a1 + 112) = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::PinAlignment>(uint64_t a1)
{
  return re::DynamicArray<unsigned long>::deinit(a1 + 88);
}

uint64_t re::ecs2::introspect_PinAlignment(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"PinAlignment", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_PinAlignment, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_PinAlignment, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::PinAlignment>, this);
}

uint64_t re::ecs2::FrameProfilingSystem::willAddSystemToECSService(re::ecs2::FrameProfilingSystem *this)
{
  uint64_t v2 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
  uint64_t result = re::ServiceLocator::serviceOrNull<re::AssetService>(v2);
  if (result)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)result + 8))(&v9);
    long long v4 = *(_OWORD *)((char *)this + 104);
    *(_OWORD *)((char *)this + 104) = v9;
    long long v9 = v4;
    uint64_t v5 = *((void *)this + 15);
    *((void *)this + re::HashTable<re::ecs2::Scene *,re::DynamicArray<RESubscriptionHandle>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 15) = v10;
    uint64_t v10 = v5;
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v9);
    uint64_t v6 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
    *((void *)this + 21) = re::ServiceLocator::serviceOrNull<re::RenderManager>(v6);
    uint64_t v7 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
    uint64_t result = re::ServiceLocator::serviceOrNull<re::Engine>(v7);
    *((void *)this + 2ArcSharedObject::ArcSharedObject(this, 0) = result;
    uint64_t v8 = *((void *)this + 21);
    if (v8) {
      *((void *)this + 22) = *(void *)(v8 + 72);
    }
  }
  return result;
}

__n128 re::ecs2::FrameProfilingSystem::willRemoveSystemFromECSService(re::ecs2::FrameProfilingSystem *this)
{
  if (*((unsigned char *)this + 152))
  {
    uint64_t v2 = *((void *)this + 21);
    if (v2)
    {
      uint64_t v3 = *(void *)(v2 + 104);
      if (v3) {
        uint64_t v4 = *(void *)(v3 + 296);
      }
      else {
        uint64_t v4 = 0;
      }
      re::StringID::StringID((re::StringID *)v10, (const StringID *)this + 8);
      uint64_t v11 = *((void *)this + 18);
      re::RenderGraphManager::removeProvider(v4, (uint64_t)v10);
      re::StringID::destroyString((re::StringID *)v10);
      *((unsigned char *)this + 152) = 0;
    }
  }
  *((void *)this + 2ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *((void *)this + 21) = 0;
  *((void *)this + 22) = 0;
  long long v5 = *(_OWORD *)((char *)this + 104);
  uint64_t v6 = *((void *)this + 15);
  *((void *)this + 14) = 0;
  *((void *)this + re::HashTable<re::ecs2::Scene *,re::DynamicArray<RESubscriptionHandle>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 15) = 0;
  *((void *)this + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 13) = 0;
  long long v8 = v5;
  uint64_t v9 = v6;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v8);
  return result;
}

void re::ecs2::FrameProfilingSystem::update(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v84 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 168);
  if (!v3) {
    return;
  }
  uint64_t v5 = *(void *)(a1 + 160);
  if (!v5 || !*(void *)(a1 + 176) || (*(unsigned char *)(v5 + 424) & 0x10) == 0 || a3 != 1) {
    return;
  }
  uint64_t v6 = *(re::DrawingManager **)(v3 + 104);
  if (!v6)
  {
    if (!*(unsigned char *)(a1 + 152)) {
      return;
    }
    goto LABEL_16;
  }
  BOOL shouldRenderProfilerNode = re::DrawingManager::shouldRenderProfilerNode(v6);
  if (!shouldRenderProfilerNode)
  {
    if (!*(unsigned char *)(a1 + 152)) {
      return;
    }
    uint64_t v10 = *(void *)(*(void *)(a1 + 168) + 104);
    if (v10)
    {
      uint64_t v11 = *(void *)(v10 + 296);
LABEL_17:
      re::StringID::StringID((re::StringID *)v54, (const StringID *)(a1 + 128));
      uint64_t v55 = *(void *)(a1 + 144);
      re::RenderGraphManager::removeProvider(v11, (uint64_t)v54);
      re::StringID::destroyString((re::StringID *)v54);
      *(unsigned char *)(a1 + 152) = 0;
      return;
    }
LABEL_16:
    uint64_t v11 = 0;
    goto LABEL_17;
  }
  if (!*(unsigned char *)(a1 + 152))
  {
    uint64_t v8 = *(void *)(*(void *)(a1 + 168) + 104);
    if (v8) {
      uint64_t v9 = *(re::RenderGraphManager **)(v8 + 296);
    }
    else {
      uint64_t v9 = 0;
    }
    uint64_t v12 = re::globalAllocators((re *)shouldRenderProfilerNode);
    uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v12[2] + 32))(v12[2], 40, 8);
    re::DynamicString::DynamicString((re::DynamicString *)&v73, (const re::DynamicString *)v56);
    *(void *)uint64_t v13 = &unk_26E6D52C8;
    re::DynamicString::DynamicString((re::DynamicString *)(v13 + 8), (const re::DynamicString *)&v73);
    if (v73 && (v74 & 1) != 0) {
      (*(void (**)(unint64_t, void))(*(void *)v73 + 40))(v73, v75);
    }
    *(void *)uint64_t v13 = &unk_26E71B5D0;
    re::RenderGraphManager::addProviderInternal(v9, "ProfilerOverlay", (const re::RenderGraphProviderBase *)v13, 0, 1, (uint64_t)&v73);
    unint64_t v14 = v73;
    uint64_t v15 = v74;
    unint64_t v73 = 0;
    uint64_t v74 = "";
    uint64_t v16 = *(void *)(a1 + 128);
    uint64_t v17 = *(char **)(a1 + 136);
    *(void *)(a1 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 28) = v14;
    *(void *)(a1 + 136) = v15;
    *(void *)&v57.var0 = v14 & 0xFFFFFFFFFFFFFFFELL | v16 & 1;
    v57.var1 = v17;
    re::StringID::destroyString((re::StringID *)&v57);
    *(void *)(a1 + 144) = v75;
    re::StringID::destroyString((re::StringID *)&v73);
    if (*(void *)&v56[0].var0)
    {
      if ((uint64_t)v56[0].var1) {
        (*(void (**)(void))(**(void **)&v56[0].var0 + 40))();
      }
      memset(v56, 0, sizeof(v56));
    }
    *(unsigned char *)(a1 + 152) = 1;
  }
  int v18 = *(re::RenderManager **)(a1 + 168);
  uint64_t v19 = *((void *)v18 + 13);
  if (v19)
  {
    uint64_t v20 = *(void *)(v19 + 1648);
    if (v20)
    {
      uint64_t v53 = (re *)(a1 + 104);
      uint64_t v21 = *(void *)(a1 + 112);
      if (v21 && (unsigned int v22 = atomic_load((unsigned int *)(v21 + 704)), v22 == 2))
      {
        uint64_t v23 = re::RenderManager::perFrameAllocator(v18);
        uint64_t v72 = 0;
        unint64_t v69 = 0;
        unint64_t v70 = 0;
        int v71 = 0;
        uint64_t v68 = (uint64_t *)v23;
        re::DynamicArray<re::RenderProfilerText>::setCapacity(&v68, 0);
        ++v71;
        re::DynamicArray<re::RenderProfilerText>::setCapacity(&v68, 1uLL);
        uint64_t v24 = *(void *)(v20 + 320);
        if (v24)
        {
          int v25 = *(void **)(v20 + 336);
          uint64_t v52 = &v25[6 * v24];
          unint64_t v26 = v70;
          do
          {
            re::StringID::invalid((re::StringID *)&v73);
            long long v78 = 0u;
            long long v79 = 0u;
            long long v76 = 0u;
            long long v77 = 0u;
            uint64_t v80 = -1;
            uint64_t v81 = 0;
            uint64_t v82 = 0;
            long long v83 = re::kInvalidStringRenderHandle;
            long long v75 = xmmword_234396400;
            re::makeFontID(v53, (re::StringID *)&v66);
            unint64_t v27 = v66;
            uint64_t v28 = v67;
            unint64_t v66 = 0;
            int v67 = "";
            char v29 = v73;
            uint64_t v30 = v74;
            unint64_t v73 = v27;
            uint64_t v74 = (char *)v28;
            *(void *)&v57.var0 = v27 & 0xFFFFFFFFFFFFFFFELL | v29 & 1;
            v57.var1 = v30;
            re::StringID::destroyString((re::StringID *)&v57);
            re::StringID::destroyString((re::StringID *)&v66);
            re::StringID::invalid((re::StringID *)&v57);
            *(void *)&long long v58 = 0x3F8000003F800000;
            *((void *)&v58 + 1) = 0x3F8000003F800000;
            long long v59 = 0u;
            long long v60 = 0u;
            long long v61 = 0u;
            long long v62 = 0u;
            long long v63 = 0u;
            uint64_t v64 = -1;
            uint64_t v65 = 0x2800000006;
            uint64_t v31 = (_anonymous_namespace_ *)re::TextManager::drawDynamicText(*(void *)(a1 + 176), (uint64_t)&v57, v25, (uint64_t)&v73);
            uint64_t v65 = v25[4];
            if (v26 >= v69)
            {
              unint64_t v32 = v26 + 1;
              if (v69 < v32)
              {
                if (v68)
                {
                  unint64_t v33 = 8;
                  if (v69) {
                    unint64_t v33 = 2 * v69;
                  }
                  if (v33 <= v32) {
                    unint64_t v34 = v32;
                  }
                  else {
                    unint64_t v34 = v33;
                  }
                  re::DynamicArray<re::RenderProfilerText>::setCapacity(&v68, v34);
                }
                else
                {
                  re::DynamicArray<re::RenderProfilerText>::setCapacity(&v68, v32);
                  ++v71;
                }
              }
              unint64_t v26 = v70;
            }
            uint64_t v35 = re::StringID::StringID((re::StringID *)(v72 + (v26 << 7)), &v57);
            long long v36 = v58;
            long long v37 = v60;
            *((_OWORD *)v35 + 2) = v59;
            *((_OWORD *)v35 + 3) = v37;
            *((_OWORD *)v35 + 1) = v36;
            long long v38 = v61;
            long long v39 = v62;
            long long v40 = v63;
            *((void *)v35 + 14) = v64;
            *((_OWORD *)v35 + 5) = v39;
            *((_OWORD *)v35 + 6) = v40;
            *((_OWORD *)v35 + 4) = v38;
            *((void *)v35 + re::HashTable<re::ecs2::Scene *,re::DynamicArray<RESubscriptionHandle>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 15) = v65;
            unint64_t v70 = ++v26;
            ++v71;
            re::StringID::destroyString((re::StringID *)&v57);
            re::StringID::destroyString((re::StringID *)&v73);
            v25 += 6;
          }
          while (v25 != v52);
        }
        uint64_t v41 = *(void *)(*(void *)(a1 + 168) + 104);
        if (v41) {
          uint64_t v42 = re::RenderFrameBox::get(v41 + 344, 0xFFFFFFFFFFFFFFFuLL);
        }
        else {
          uint64_t v42 = 0;
        }
        if (v70) {
          (*(void (**)(void, uint64_t **))(**(void **)(v42 + 320) + 48))(*(void *)(v42 + 320), &v68);
        }
        re::DynamicArray<re::RenderText>::deinit((uint64_t)&v68);
      }
      else
      {
        re::AssetHandle::loadAsync(v53);
      }
    }
  }
  uint64_t v43 = *(void **)(a1 + 168);
  uint64_t v44 = v43[13];
  if (v44)
  {
    uint64_t v45 = *(void *)(v44 + 1664);
    if (v45)
    {
      if (re::ProfilerManager::isProcessorEnabled<re::ProfilerFlameChartProcessor,void>(*(void *)(v44 + 1664))
        || re::ProfilerManager::isProcessorEnabled<re::ProfilerMiniHUDProcessor,void>(v45)
        || re::ProfilerManager::isProcessorEnabled<re::ProfilerDetailedHUDProcessor,void>(v45))
      {
        uint64_t v46 = (re *)(a1 + 104);
        uint64_t v47 = *(void *)(a1 + 112);
        if (v47 && (unsigned int v48 = atomic_load((unsigned int *)(v47 + 704)), v48 == 2))
        {
          if (v43[1] <= 1uLL)
          {
            re::makeFontID(v46, (re::StringID *)&v57);
            uint64_t v49 = *(void *)&v57.var0;
            var1 = v57.var1;
            *(void *)&v57.var0 = 0;
            v57.var1 = "";
            uint64_t v51 = v43[1];
            uint64_t v74 = (char *)v43[2];
            v43[1] = v49;
            uint64_t v43[2] = var1;
            unint64_t v73 = v49 & 0xFFFFFFFFFFFFFFFELL | v51 & 1;
            re::StringID::destroyString((re::StringID *)&v73);
            re::StringID::destroyString((re::StringID *)&v57);
          }
        }
        else
        {
          re::AssetHandle::loadAsync(v46);
        }
      }
    }
  }
}

void *re::DynamicArray<re::RenderProfilerText>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      __n128 result = (void *)*result;
      if (!*v5)
      {
        __n128 result = (void *)re::DynamicArray<re::RenderProfilerText>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (a2 >> 57)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 128, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          unint64_t v2 = a2 << 7;
          __n128 result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, a2 << 7, 16);
          if (result)
          {
            uint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        __n128 result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      uint64_t v7 = 0;
      if (!v3)
      {
LABEL_16:
        _OWORD v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = (uint64_t *)v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = &v8[16 * v9];
        uint64_t v11 = v7;
        do
        {
          uint64_t v12 = *v8;
          *uint64_t v11 = *v11 & 0xFFFFFFFFFFFFFFFELL | *v8 & 1;
          *uint64_t v11 = *v8 & 0xFFFFFFFFFFFFFFFELL | v12 & 1;
          v11[1] = v8[1];
          *uint64_t v8 = 0;
          v8[1] = (uint64_t)"";
          uint64_t v13 = v8[14];
          long long v14 = *((_OWORD *)v8 + 4);
          long long v15 = *((_OWORD *)v8 + 6);
          *((_OWORD *)v11 + 5) = *((_OWORD *)v8 + 5);
          *((_OWORD *)v11 + 6) = v15;
          *((_OWORD *)v11 + 4) = v14;
          long long v17 = *((_OWORD *)v8 + 2);
          long long v16 = *((_OWORD *)v8 + 3);
          *((_OWORD *)v11 + 1) = *((_OWORD *)v8 + 1);
          *((_OWORD *)v11 + 2) = v17;
          *((_OWORD *)v11 + 3) = v16;
          v11[14] = v13;
          v11[15] = v8[15];
          re::StringID::destroyString((re::StringID *)v8);
          v8 += 16;
          v11 += 16;
        }
        while (v8 != v10);
        uint64_t v8 = (uint64_t *)v5[4];
      }
      __n128 result = (void *)(*(uint64_t (**)(void, uint64_t *))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

BOOL re::ProfilerManager::isProcessorEnabled<re::ProfilerFlameChartProcessor,void>(uint64_t a1)
{
  uint64_t v6 = re::ProfilerManager::getProcessorId<re::ProfilerFlameChartProcessor>();
  unint64_t v2 = (os_unfair_lock_s *)(a1 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
  uint64_t v3 = std::__hash_table<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>>>::find<unsigned long long>((void *)(a1 + 480), (unint64_t *)&v6);
  if (v3) {
    BOOL v4 = *(unsigned char *)(v3[3] + 8) != 0;
  }
  else {
    BOOL v4 = 0;
  }
  os_unfair_lock_unlock(v2);
  return v4;
}

BOOL re::ProfilerManager::isProcessorEnabled<re::ProfilerMiniHUDProcessor,void>(uint64_t a1)
{
  uint64_t v6 = re::ProfilerManager::getProcessorId<re::ProfilerMiniHUDProcessor>();
  unint64_t v2 = (os_unfair_lock_s *)(a1 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
  uint64_t v3 = std::__hash_table<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>>>::find<unsigned long long>((void *)(a1 + 480), (unint64_t *)&v6);
  if (v3) {
    BOOL v4 = *(unsigned char *)(v3[3] + 8) != 0;
  }
  else {
    BOOL v4 = 0;
  }
  os_unfair_lock_unlock(v2);
  return v4;
}

BOOL re::ProfilerManager::isProcessorEnabled<re::ProfilerDetailedHUDProcessor,void>(uint64_t a1)
{
  uint64_t v6 = re::ProfilerManager::getProcessorId<re::ProfilerDetailedHUDProcessor>();
  unint64_t v2 = (os_unfair_lock_s *)(a1 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
  uint64_t v3 = std::__hash_table<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>>>::find<unsigned long long>((void *)(a1 + 480), (unint64_t *)&v6);
  if (v3) {
    BOOL v4 = *(unsigned char *)(v3[3] + 8) != 0;
  }
  else {
    BOOL v4 = 0;
  }
  os_unfair_lock_unlock(v2);
  return v4;
}

void *re::ecs2::allocInfo_FrameProfilingSystem(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_197, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_197))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF85948, "FrameProfilingSystem");
    __cxa_guard_release(&_MergedGlobals_197);
  }
  return &unk_26AF85948;
}

void re::ecs2::initInfo_FrameProfilingSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v5[0] = 0x51BA0A3EA7E549D0;
  v5[1] = "FrameProfilingSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0xB800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = &re::ecs2::initInfo_FrameProfilingSystem(re::IntrospectionBase *)::structureAttributes;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::FrameProfilingSystem>;
  *((void *)this + 1ArcSharedObject::ArcSharedObject(this, 0) = re::internal::defaultDestruct<re::ecs2::FrameProfilingSystem>;
  *((void *)this + 11) = re::internal::defaultRetain<re::ecs2::FrameProfilingSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 12) = re::internal::defaultRelease<re::ecs2::FrameProfilingSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::FrameProfilingSystem>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::FrameProfilingSystem>;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

uint64_t re::internal::defaultConstruct<re::ecs2::FrameProfilingSystem>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::make::shared::unsafelyInplace<re::ecs2::FrameProfilingSystem>(a3);
}

void *re::internal::defaultDestruct<re::ecs2::FrameProfilingSystem>(uint64_t a1, uint64_t a2, void *a3)
{
  re::StringID::destroyString((re::StringID *)(a3 + 16));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 13));
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultDestructV2<re::ecs2::FrameProfilingSystem>(void *a1)
{
  re::StringID::destroyString((re::StringID *)(a1 + 16));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 13));
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_FrameProfilingSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"FrameProfilingSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_FrameProfilingSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_FrameProfilingSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::FrameProfilingSystem>, this);
}

void re::ecs2::FrameProfilingSystem::~FrameProfilingSystem(re::ecs2::FrameProfilingSystem *this)
{
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  re::StringID::destroyString((re::ecs2::FrameProfilingSystem *)((char *)this + 128));
  re::AssetHandle::~AssetHandle((re::ecs2::FrameProfilingSystem *)((char *)this + 104));
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::FrameProfilingSystem::typeInfo(re::ecs2::FrameProfilingSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"FrameProfilingSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_FrameProfilingSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_FrameProfilingSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::FrameProfilingSystem>, 0);
}

uint64_t re::make::shared::unsafelyInplace<re::ecs2::FrameProfilingSystem>(uint64_t a1)
{
  *(void *)(a1 + 176) = 0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 1re::HashTable<re::ecs2::Entity const*,re::ecs2::BillboardData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::deinit((uint64_t *)this + 60) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 8ArcSharedObject::ArcSharedObject(this, 0) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 28) = 0u;
  unint64_t v2 = (re::StringID *)(a1 + 128);
  re::ecs2::System::System(a1, 1);
  *uint64_t v3 = &unk_26E6FAB50;
  v3[14] = 0;
  v3[15] = 0;
  v3[13] = 0;
  re::StringID::invalid(v2);
  *(unsigned char *)(a1 + 152) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 16re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 1re::HashTable<re::ecs2::Entity const*,re::ecs2::BillboardData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::deinit((uint64_t *)this + 60) = 0;
  return a1;
}

id re::internal::defaultRetain<re::ecs2::FrameProfilingSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::FrameProfilingSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
}

void _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE7reserveEm(void **a1, unint64_t a2)
{
  long long v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 4)
  {
    if (a2 >> 60) {
      abort();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    long long v6 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v3, a2);
    uint64_t v7 = &v6[v5];
    uint64_t v9 = &v6[16 * v8];
    uint64_t v11 = (char *)*a1;
    uint64_t v10 = (char *)a1[1];
    uint64_t v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        long long v13 = *((_OWORD *)v10 - 1);
        v10 -= 16;
        *((_OWORD *)v12 - 1) = v13;
        v12 -= 16;
      }
      while (v10 != v11);
      uint64_t v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void re::ecs2::dockingBundleDataFromTuningFile(uint64_t a1, char **a2, uint64_t *a3)
{
  uint64_t v136 = *MEMORY[0x263EF8340];
  long long v6 = (void *)[[NSString alloc] initWithCString:a1 encoding:1];
  a2[1] = *a2;
  _ZNSt3__16vectorINS0_IDv3_fNS_9allocatorIS1_EEEENS2_IS4_EEE7__clearB8nn180100Ev(a3);
  uint64_t v7 = [MEMORY[0x263F08850] defaultManager];
  int v8 = [v7 fileExistsAtPath:v6];

  if (v8)
  {
    uint64_t v9 = [NSURL fileURLWithPath:v6];
    uint64_t v10 = v9;
  }
  else
  {
    re::Bundle::reResourcesFramework((uint64_t)v134);
    if (v134[0]) {
      uint64_t v11 = *(void **)&v135[4];
    }
    else {
      uint64_t v11 = 0;
    }
    id v12 = v11;
    if (v134[0]) {

    }
    uint64_t v10 = [v12 URLForResource:v6 withExtension:0];
  }
  long long v13 = (re *)re::VideoDefaults::logEnabled(v9);
  if (v10)
  {
    if (v13)
    {
      uint64_t v96 = *re::videoLogObjects(v13);
      if (os_log_type_enabled(v96, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long v134 = 136315138;
        *(void *)uint64_t v135 = a1;
        _os_log_impl(&dword_233120000, v96, OS_LOG_TYPE_DEFAULT, "[dockingBundleDataFromTuningFile]: Loading Docking bundle data file tuning file %s", v134, 0xCu);
      }
    }
    long long v14 = (void *)[[NSString alloc] initWithCString:"purpose" encoding:1];
    long long v15 = (void *)[[NSString alloc] initWithCString:"bundle" encoding:1];
    long long v16 = (void *)[[NSString alloc] initWithCString:"curve" encoding:1];
    id v17 = v10;
    id v128 = 0;
    int v18 = [MEMORY[0x263EFF8F8] dataWithContentsOfURL:v17 options:0 error:&v128];
    id v19 = v128;
    if (!v19)
    {
      uint64_t v100 = v15;
      id v127 = 0;
      uint64_t v20 = [MEMORY[0x263F08AC0] propertyListWithData:v18 options:0 format:0 error:&v127];
      id v19 = v127;
      if (!v19)
      {
        id v98 = v17;
        unsigned int v99 = v10;
        uint64_t v104 = v14;
        id v21 = objc_alloc(MEMORY[0x263EFF8C0]);
        unsigned int v22 = v20;
        uint64_t v23 = [v20 valueForKey:v100];
        uint64_t v24 = (void *)[v21 initWithArray:v23];

        long long v125 = 0u;
        long long v126 = 0u;
        long long v123 = 0u;
        long long v124 = 0u;
        id v25 = v24;
        long long v14 = v104;
        obunint64_t j = v25;
        uint64_t v110 = [v25 countByEnumeratingWithState:&v123 objects:v134 count:16];
        if (v110)
        {
          uint64_t v109 = *(void *)v124;
          uint64_t v101 = (uint64_t)(a2 + 2);
          uint64_t v106 = a3;
          unint64_t v102 = v22;
          uint64_t v103 = a2;
          do
          {
            uint64_t v26 = 0;
            do
            {
              if (*(void *)v124 != v109) {
                objc_enumerationMutation(obj);
              }
              unint64_t v27 = *(void **)(*((void *)&v123 + 1) + 8 * v26);
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                uint64_t v107 = v26;
                uint64_t v28 = [v27 valueForKey:v14];
                int v108 = [v28 unsignedIntValue];

                id v29 = objc_alloc(MEMORY[0x263EFF8C0]);
                uint64_t v30 = [v27 valueForKey:v16];
                uint64_t v31 = (void *)[v29 initWithArray:v30];

                __p = 0;
                unint64_t v121 = 0;
                int v122 = 0;
                _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE7reserveEm(&__p, [v31 count]);
                long long v118 = 0u;
                long long v119 = 0u;
                long long v116 = 0u;
                long long v117 = 0u;
                id v32 = v31;
                uint64_t v33 = [v32 countByEnumeratingWithState:&v116 objects:v133 count:16];
                if (v33)
                {
                  uint64_t v34 = v33;
                  uint64_t v35 = *(void *)v117;
                  do
                  {
                    for (uint64_t i = 0; i != v34; ++i)
                    {
                      if (*(void *)v117 != v35) {
                        objc_enumerationMutation(v32);
                      }
                      long long v37 = *(void **)(*((void *)&v116 + 1) + 8 * i);
                      objc_opt_class();
                      if (objc_opt_isKindOfClass())
                      {
                        id v38 = v37;
                        if ([v38 count] == 3)
                        {
                          long long v39 = [v38 objectAtIndex:0];
                          [v39 floatValue];
                          *(void *)&long long v114 = v40;

                          uint64_t v41 = [v38 objectAtIndex:1];
                          [v41 floatValue];
                          int v112 = v42;

                          uint64_t v43 = [v38 objectAtIndex:2];
                          [v43 floatValue];
                          int v111 = v44;

                          long long v45 = v114;
                          DWORD1(v45) = v112;
                          DWORD2(v45) = v111;
                          uint64_t v46 = v121;
                          if (v121 >= v122)
                          {
                            uint64_t v48 = (v121 - (unsigned char *)__p) >> 4;
                            if ((unint64_t)(v48 + 1) >> 60) {
                              goto LABEL_104;
                            }
                            unint64_t v49 = (v122 - (unsigned char *)__p) >> 3;
                            if (v49 <= v48 + 1) {
                              unint64_t v49 = v48 + 1;
                            }
                            if ((unint64_t)(v122 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF0) {
                              unint64_t v50 = 0xFFFFFFFFFFFFFFFLL;
                            }
                            else {
                              unint64_t v50 = v49;
                            }
                            if (v50)
                            {
                              long long v114 = v45;
                              uint64_t v51 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)&v122, v50);
                              long long v45 = v114;
                            }
                            else
                            {
                              uint64_t v51 = 0;
                            }
                            uint64_t v52 = &v51[16 * v48];
                            *(_OWORD *)uint64_t v52 = v45;
                            uint64_t v47 = v52 + 16;
                            int v54 = (char *)__p;
                            uint64_t v53 = v121;
                            if (v121 != __p)
                            {
                              do
                              {
                                long long v55 = *((_OWORD *)v53 - 1);
                                v53 -= 16;
                                *((_OWORD *)v52 - 1) = v55;
                                v52 -= 16;
                              }
                              while (v53 != v54);
                              uint64_t v53 = (char *)__p;
                            }
                            __p = v52;
                            unint64_t v121 = v47;
                            int v122 = &v51[16 * v50];
                            if (v53) {
                              operator delete(v53);
                            }
                          }
                          else
                          {
                            *(_OWORD *)unint64_t v121 = v45;
                            uint64_t v47 = v46 + 16;
                          }
                          unint64_t v121 = v47;
                        }
                      }
                    }
                    uint64_t v34 = [v32 countByEnumeratingWithState:&v116 objects:v133 count:16];
                  }
                  while (v34);
                }

                StringID v57 = (re *)re::VideoDefaults::logEnabled(v56);
                if (v57)
                {
                  int32x4_t v94 = *re::videoLogObjects(v57);
                  if (os_log_type_enabled(v94, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)long long buf = 67109376;
                    int v130 = v108;
                    __int16 v131 = 1024;
                    int v132 = (unint64_t)(v121 - (unsigned char *)__p) >> 4;
                    _os_log_impl(&dword_233120000, v94, OS_LOG_TYPE_DEFAULT, "[dockingBundleDataFromFileURL]: Loaded docking curve with purpose %x and %d points", buf, 0xEu);
                  }
                }
                long long v59 = v103[1];
                unint64_t v58 = (unint64_t)v103[2];
                long long v60 = v106;
                if ((unint64_t)v59 >= v58)
                {
                  long long v62 = *v103;
                  uint64_t v63 = (v59 - *v103) >> 2;
                  unint64_t v64 = v63 + 1;
                  if ((unint64_t)(v63 + 1) >> 62) {
                    goto LABEL_104;
                  }
                  uint64_t v65 = v58 - (void)v62;
                  if (v65 >> 1 > v64) {
                    unint64_t v64 = v65 >> 1;
                  }
                  if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v66 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v66 = v64;
                  }
                  if (v66)
                  {
                    int v67 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(v101, v66);
                    long long v62 = *v103;
                    long long v59 = v103[1];
                  }
                  else
                  {
                    int v67 = 0;
                  }
                  uint64_t v68 = &v67[4 * v63];
                  *(_DWORD *)uint64_t v68 = v108;
                  long long v61 = v68 + 4;
                  while (v59 != v62)
                  {
                    int v69 = *((_DWORD *)v59 - 1);
                    v59 -= 4;
                    *((_DWORD *)v68 - 1) = v69;
                    v68 -= 4;
                  }
                  *uint64_t v103 = v68;
                  v103[1] = v61;
                  v103[2] = &v67[4 * v66];
                  if (v62) {
                    operator delete(v62);
                  }
                }
                else
                {
                  *(_DWORD *)long long v59 = v108;
                  long long v61 = v59 + 4;
                }
                v103[1] = v61;
                int v71 = (void *)v106[1];
                unint64_t v70 = v106[2];
                if ((unint64_t)v71 >= v70)
                {
                  long long v77 = (void *)*v106;
                  unint64_t v78 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v71 - *v106) >> 3);
                  unint64_t v79 = v78 + 1;
                  if (v78 + 1 > 0xAAAAAAAAAAAAAAALL) {
LABEL_104:
                  }
                    abort();
                  unint64_t v80 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v70 - (void)v77) >> 3);
                  if (2 * v80 > v79) {
                    unint64_t v79 = 2 * v80;
                  }
                  if (v80 >= 0x555555555555555) {
                    unint64_t v81 = 0xAAAAAAAAAAAAAAALL;
                  }
                  else {
                    unint64_t v81 = v79;
                  }
                  unint64_t v115 = v81;
                  if (v81)
                  {
                    if (v81 > 0xAAAAAAAAAAAAAAALL) {
                      std::__throw_bad_array_new_length[abi:nn180100]();
                    }
                    uint64_t v82 = (char *)operator new(24 * v81);
                  }
                  else
                  {
                    uint64_t v82 = 0;
                  }
                  long long v83 = &v82[24 * v78];
                  *(void *)long long v83 = 0;
                  *((void *)v83 + 1) = 0;
                  *((void *)v83 + 2) = 0;
                  int64_t v84 = v121 - (unsigned char *)__p;
                  if (v121 == __p)
                  {
                    long long v60 = v106;
                  }
                  else
                  {
                    uint64_t v85 = &v82[24 * v78];
                    uint64_t v86 = __p;
                    uint64_t v113 = v82;
                    _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE11__vallocateB8nn180100Em(v83, v84 >> 4);
                    unsigned int v87 = (char *)*((void *)v85 + 1);
                    memmove(v87, v86, v84);
                    uint64_t v82 = v113;
                    *((void *)v85 + 1) = &v87[v84];
                    long long v60 = v106;
                    long long v77 = (void *)*v106;
                    int v71 = (void *)v106[1];
                  }
                  unsigned int v88 = &v82[24 * v115];
                  long long v76 = v83 + 24;
                  if (v71 == v77)
                  {
                    *long long v60 = (uint64_t)v83;
                    v60[1] = (uint64_t)v76;
                    v60[2] = (uint64_t)v88;
                  }
                  else
                  {
                    do
                    {
                      *((void *)v83 - 3) = 0;
                      *((void *)v83 - 2) = 0;
                      v83 -= 24;
                      *((void *)v83 + 2) = 0;
                      long long v89 = *(_OWORD *)(v71 - 3);
                      v71 -= 3;
                      *(_OWORD *)long long v83 = v89;
                      *((void *)v83 + 2) = v71[2];
                      *int v71 = 0;
                      v71[1] = 0;
                      float32x4_t v71[2] = 0;
                    }
                    while (v71 != v77);
                    long long v77 = (void *)*v60;
                    int32x4_t v90 = (void *)v60[1];
                    *long long v60 = (uint64_t)v83;
                    v60[1] = (uint64_t)v76;
                    v60[2] = (uint64_t)v88;
                    if (v90 != v77)
                    {
                      int32x4_t v91 = v90;
                      do
                      {
                        int32x4_t v93 = (void *)*(v91 - 3);
                        v91 -= 3;
                        uint64_t v92 = v93;
                        if (v93)
                        {
                          *(v90 - 2) = v92;
                          operator delete(v92);
                        }
                        int32x4_t v90 = v91;
                      }
                      while (v91 != v77);
                    }
                  }
                  unsigned int v22 = v102;
                  if (v77) {
                    operator delete(v77);
                  }
                }
                else
                {
                  *int v71 = 0;
                  v71[1] = 0;
                  float32x4_t v71[2] = 0;
                  uint64_t v72 = __p;
                  int64_t v73 = v121 - (unsigned char *)__p;
                  if (v121 != __p)
                  {
                    _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE11__vallocateB8nn180100Em(v71, v73 >> 4);
                    uint64_t v74 = (char *)v71[1];
                    memmove(v74, v72, v73);
                    long long v75 = &v74[v73];
                    long long v60 = v106;
                    v71[1] = v75;
                  }
                  long long v76 = v71 + 3;
                  unsigned int v22 = v102;
                }
                v60[1] = (uint64_t)v76;
                long long v14 = v104;
                if (__p)
                {
                  unint64_t v121 = (char *)__p;
                  operator delete(__p);
                }

                uint64_t v26 = v107;
              }
              ++v26;
            }
            while (v26 != v110);
            uint64_t v95 = [obj countByEnumeratingWithState:&v123 objects:v134 count:16];
            uint64_t v110 = v95;
          }
          while (v95);
        }

        uint64_t v20 = v22;
        uint64_t v10 = v99;
        id v17 = v98;
        id v19 = 0;
      }

      long long v15 = v100;
    }
  }
  else if (v13)
  {
    long long v97 = *re::videoLogObjects(v13);
    if (os_log_type_enabled(v97, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long v134 = 136315138;
      *(void *)uint64_t v135 = a1;
      _os_log_error_impl(&dword_233120000, v97, OS_LOG_TYPE_ERROR, "[dockingBundleDataFromTuningFile]: unable to resolve tuning file %s", v134, 0xCu);
    }
  }
}

re *re::ecs2::_curve_deinit(re *this, void *a2, void *a3, void *a4)
{
  if (a3[1])
  {
    int64_t v5 = re::globalAllocators(this);
    this = (re *)(*(uint64_t (**)(uint64_t, void))(*(void *)v5[2] + 40))(v5[2], a3[1]);
    a3[1] = 0;
    *((_DWORD *)a3 + 1) = 0;
  }
  return this;
}

void _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE6insertENS_11__wrap_iterIPKS1_EERS6_(uint64_t a1, char *__src, char *a3)
{
  uint64_t v3 = a3;
  long long v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    long long v13 = *(char **)a1;
    unint64_t v14 = ((uint64_t)&v6[-*(void *)a1] >> 4) + 1;
    if (v14 >> 60) {
      abort();
    }
    uint64_t v15 = __src - v13;
    uint64_t v16 = (__src - v13) >> 4;
    uint64_t v17 = v7 - (void)v13;
    if (v17 >> 3 > v14) {
      unint64_t v14 = v17 >> 3;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v18 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v14;
    }
    if (v18) {
      id v19 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(a1 + 16, v18);
    }
    else {
      id v19 = 0;
    }
    uint64_t v20 = &v19[16 * v16];
    id v21 = &v19[16 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == __src) {
          unint64_t v23 = 1;
        }
        else {
          unint64_t v23 = v15 >> 3;
        }
        uint64_t v24 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v8, v23);
        uint64_t v20 = &v24[16 * (v23 >> 2)];
        id v21 = &v24[16 * v25];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        unint64_t v22 = v16 + 2;
        if (v16 >= -1) {
          unint64_t v22 = v16 + 1;
        }
        v20 -= 16 * (v22 >> 1);
      }
    }
    *(_OWORD *)uint64_t v20 = *(_OWORD *)v3;
    uint64_t v26 = v20 + 16;
    unint64_t v27 = *(char **)a1;
    if (*(char **)a1 != __src)
    {
      uint64_t v28 = __src;
      do
      {
        long long v29 = *((_OWORD *)v28 - 1);
        v28 -= 16;
        *((_OWORD *)v20 - 1) = v29;
        v20 -= 16;
      }
      while (v28 != v27);
    }
    uint64_t v30 = *(unsigned char **)(a1 + 8);
    uint64_t v31 = v30 - __src;
    if (v30 != __src) {
      memmove(v26, __src, v30 - __src);
    }
    id v32 = *(char **)a1;
    *(void *)a1 = v20;
    *(void *)(a1 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = &v26[v31];
    *(void *)(a1 + 16) = v21;
    if (v32)
    {
      operator delete(v32);
    }
  }
  else if (__src == v6)
  {
    *(_OWORD *)__src = *(_OWORD *)a3;
    *(void *)(a1 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = __src + 16;
  }
  else
  {
    uint64_t v9 = __src + 16;
    uint64_t v10 = v6 - 16;
    uint64_t v11 = *(_OWORD **)(a1 + 8);
    while (v10 < v6)
    {
      long long v12 = *(_OWORD *)v10;
      v10 += 16;
      *v11++ = v12;
    }
    *(void *)(a1 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v11;
    if (v6 != v9) {
      memmove(&v6[-16 * ((v6 - v9) >> 4)], __src, v6 - v9);
    }
    if (__src <= v3) {
      v3 += 16 * (*(void *)(a1 + 8) > (unint64_t)v3);
    }
    *(_OWORD *)__src = *(_OWORD *)v3;
  }
}

void std::vector<float>::reserve(void **a1, unint64_t a2)
{
  long long v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 2)
  {
    if (a2 >> 62) {
      abort();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    long long v6 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(v3, a2);
    unint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    uint64_t v9 = &v6[4 * v8];
    uint64_t v10 = (char *)*a1;
    uint64_t v11 = (char *)a1[1];
    long long v12 = v7;
    if (v11 != *a1)
    {
      long long v12 = v7;
      do
      {
        int v13 = *((_DWORD *)v11 - 1);
        v11 -= 4;
        *((_DWORD *)v12 - 1) = v13;
        v12 -= 4;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void re::ecs2::PlacementAnimationSerialization::~PlacementAnimationSerialization(re::ecs2::PlacementAnimationSerialization *this, void *a2, uint64_t a3, void *a4)
{
  long long v4 = this;
  if (*((void *)this + 1))
  {
    if (*(_DWORD *)this)
    {
      uint64_t v5 = 0;
      unint64_t v6 = 0;
      do
      {
        this = re::ecs2::_curve_deinit(this, a2, (void *)(*((void *)v4 + 1) + v5), a4);
        ++v6;
        v5 += 16;
      }
      while (v6 < *(unsigned int *)v4);
    }
    unint64_t v7 = re::globalAllocators(this);
    (*(void (**)(uint64_t, void))(*(void *)v7[2] + 40))(v7[2], *((void *)v4 + 1));
    *((void *)v4 + 1) = 0;
  }
}

void re::ecs2::PlacementAnimationSerialization::makeBundle(re::ecs2::PlacementAnimationSerialization *this@<X0>, uint64_t **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  if (*(_DWORD *)this)
  {
    long long v4 = (uint64_t *)operator new(0x30uLL);
    v4[3] = 0;
    uint64_t v5 = v4 + 3;
    v4[1] = 0;
    uint64_t v4[2] = 0;
    *long long v4 = (uint64_t)&unk_26E6FABF8;
    v4[4] = 0;
    v4[5] = 0;
    std::vector<re::ecs2::DockingSpline>::reserve(v4 + 3);
    *a2 = v4 + 3;
    a2[1] = v4;
    int v6 = *(_DWORD *)this;
    __p = 0;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    if (v6)
    {
      unint64_t v7 = 0;
      do
      {
        unint64_t v8 = (unint64_t)(v25 - (unsigned char *)__p) >> 4;
        unsigned int v9 = *(_DWORD *)(*((void *)this + 1) + 16 * v7 + 4);
        if (v9 <= v8) {
          unint64_t v10 = v8;
        }
        else {
          unint64_t v10 = v9;
        }
        _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE7reserveEm(&__p, v10);
        uint64_t v11 = (char *)__p;
        uint64_t v24 = (char *)__p;
        uint64_t v12 = *((void *)this + 1);
        if (*(_DWORD *)(v12 + 16 * v7 + 4))
        {
          unint64_t v13 = 0;
          do
          {
            uint64_t v14 = *(void *)(v12 + 16 * v7 + 8);
            if (v11 >= v25)
            {
              uint64_t v15 = (v11 - (unsigned char *)__p) >> 4;
              if ((unint64_t)(v15 + 1) >> 60) {
                abort();
              }
              unint64_t v16 = (v25 - (unsigned char *)__p) >> 3;
              if (v16 <= v15 + 1) {
                unint64_t v16 = v15 + 1;
              }
              if ((unint64_t)(v25 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v17 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v17 = v16;
              }
              if (v17) {
                unint64_t v18 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)&v25, v17);
              }
              else {
                unint64_t v18 = 0;
              }
              id v19 = &v18[16 * v15];
              *(_OWORD *)id v19 = *(_OWORD *)(v14 + 16 * v13);
              uint64_t v11 = v19 + 16;
              id v21 = (char *)__p;
              uint64_t v20 = v24;
              if (v24 != __p)
              {
                do
                {
                  long long v22 = *((_OWORD *)v20 - 1);
                  v20 -= 16;
                  *((_OWORD *)v19 - 1) = v22;
                  v19 -= 16;
                }
                while (v20 != v21);
                uint64_t v20 = (char *)__p;
              }
              __p = v19;
              uint64_t v24 = v11;
              uint64_t v25 = &v18[16 * v17];
              if (v20) {
                operator delete(v20);
              }
            }
            else
            {
              *(_OWORD *)uint64_t v11 = *(_OWORD *)(v14 + 16 * v13);
              v11 += 16;
            }
            uint64_t v24 = v11;
            ++v13;
            uint64_t v12 = *((void *)this + 1);
          }
          while (v13 < *(unsigned int *)(v12 + 16 * v7 + 4));
          uint64_t v5 = *a2;
        }
        re::ecs2::PlacementAnimationCurveBundle::addCurve(v5, *(_DWORD *)(v12 + 16 * v7++), &__p);
      }
      while (v7 < *(unsigned int *)this);
      if (__p)
      {
        uint64_t v24 = (char *)__p;
        operator delete(__p);
      }
    }
  }
}

void re::ecs2::PlacementAnimationCurveBundle::addCurve(uint64_t *a1, int a2, void *a3)
{
  memset(v61, 0, sizeof(v61));
  *(_OWORD *)long long v60 = 0u;
  _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEEC2ERKS4_(&__p, (uint64_t)a3);
  if (a3[1] == *a3)
  {
    long long v63 = xmmword_23435FD80;
    _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE6insertENS_11__wrap_iterIPKS1_EERS6_((uint64_t)&__p, (char *)__p, (char *)&v63);
  }
  else
  {
    unint64_t v6 = 126 - 2 * __clz(((char *)v65 - (unsigned char *)__p) >> 4);
    if (v65 == __p) {
      uint64_t v7 = 0;
    }
    else {
      uint64_t v7 = v6;
    }
    _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZN2re4ecs216SplineParametricC1ERKNS_6vectorIDv3_fNS_9allocatorIS6_EEEEE3__0PS6_Lb0EEEvT1_SF_T0_NS_15iterator_traitsISF_E15difference_typeEb((float32x4_t *)__p, v65, v7, 1);
    unint64_t v8 = v65;
    float v9 = v65[-1].f32[0];
    if (*(float *)__p <= 0.0)
    {
      if (v9 >= 1.0) {
        goto LABEL_27;
      }
    }
    else
    {
      long long v63 = xmmword_23435FD80;
      _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE6insertENS_11__wrap_iterIPKS1_EERS6_((uint64_t)&__p, (char *)__p, (char *)&v63);
      if (v9 >= 1.0)
      {
        unint64_t v8 = v65;
        goto LABEL_27;
      }
    }
  }
  unint64_t v10 = v65;
  if ((unint64_t)v65 >= v66[0])
  {
    int64_t v16 = ((char *)v65 - (unsigned char *)__p) >> 4;
    if ((unint64_t)(v16 + 1) >> 60) {
      goto LABEL_78;
    }
    unint64_t v17 = (uint64_t)(v66[0] - (void)__p) >> 3;
    if (v17 <= v16 + 1) {
      unint64_t v17 = v16 + 1;
    }
    if (v66[0] - (void)__p >= 0x7FFFFFFFFFFFFFF0uLL) {
      unint64_t v18 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v17;
    }
    if (v18) {
      id v19 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)v66, v18);
    }
    else {
      id v19 = 0;
    }
    uint64_t v20 = (float32x4_t *)&v19[16 * v16];
    id v21 = &v19[16 * v18];
    __asm { FMOV            V0.4S, #1.0 }
    *uint64_t v20 = _Q0;
    unint64_t v8 = v20 + 1;
    uint64_t v24 = (float32x4_t *)__p;
    unint64_t v23 = v65;
    if (v65 != __p)
    {
      do
      {
        float32x4_t v25 = v23[-1];
        --v23;
        v20[-1] = v25;
        --v20;
      }
      while (v23 != v24);
      unint64_t v23 = (float32x4_t *)__p;
    }
    __p = v20;
    uint64_t v65 = v8;
    v66[0] = v21;
    if (v23) {
      operator delete(v23);
    }
  }
  else
  {
    __asm { FMOV            V0.4S, #1.0 }
    *uint64_t v65 = _Q0;
    unint64_t v8 = v10 + 1;
  }
  uint64_t v65 = v8;
LABEL_27:
  unint64_t v26 = ((char *)v8 - (unsigned char *)__p) >> 4;
  if (v26 > (uint64_t)v61[0] >> 3)
  {
    if ((char *)v8 - (unsigned char *)__p < 0) {
      goto LABEL_78;
    }
    v60[0] = std::__allocate_at_least[abi:nn180100]<std::allocator<zip_entry_t *>>(v26);
    v60[1] = v60[0];
    v61[0] = (char *)v60[0] + 8 * v27;
  }
  std::vector<float>::reserve(&v61[1], ((char *)v65 - (unsigned char *)__p) >> 4);
  uint64_t v28 = v65;
  if (v65 != __p)
  {
    unint64_t v29 = 0;
    uint64_t v28 = (float32x4_t *)__p;
    do
    {
      uint64_t v30 = v28[v29].i64[0];
      if (v60[1] >= v61[0])
      {
        uint64_t v32 = ((char *)v60[1] - (char *)v60[0]) >> 3;
        if ((unint64_t)(v32 + 1) >> 61) {
          goto LABEL_78;
        }
        unint64_t v33 = ((char *)v61[0] - (char *)v60[0]) >> 2;
        if (v33 <= v32 + 1) {
          unint64_t v33 = v32 + 1;
        }
        if ((void *)((char *)v61[0] - (char *)v60[0]) >= (void *)0x7FFFFFFFFFFFFFF8) {
          unint64_t v34 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v34 = v33;
        }
        if (v34) {
          unint64_t v34 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<zip_entry_t *>>(v34);
        }
        else {
          uint64_t v35 = 0;
        }
        long long v36 = (uint64_t *)(v34 + 8 * v32);
        uint64_t *v36 = v30;
        uint64_t v31 = (uint64_t)(v36 + 1);
        long long v37 = (char *)v60[1];
        if (v60[1] != v60[0])
        {
          do
          {
            uint64_t v38 = *((void *)v37 - 1);
            v37 -= 8;
            *--long long v36 = v38;
          }
          while (v37 != v60[0]);
          long long v37 = (char *)v60[0];
        }
        v60[0] = v36;
        v61[0] = (void *)(v34 + 8 * v35);
        if (v37) {
          operator delete(v37);
        }
      }
      else
      {
        *(void *)v60[1] = v30;
        uint64_t v31 = (uint64_t)v60[1] + 8;
      }
      v60[1] = (void *)v31;
      int v39 = *((_DWORD *)__p + 4 * v29 + 2);
      uint64_t v40 = (char *)v61[2];
      if (v61[2] >= v61[3])
      {
        int v42 = (char *)v61[1];
        int64_t v43 = ((char *)v61[2] - (char *)v61[1]) >> 2;
        unint64_t v44 = v43 + 1;
        if ((unint64_t)(v43 + 1) >> 62) {
          goto LABEL_78;
        }
        int64_t v45 = (char *)v61[3] - (char *)v61[1];
        if (((char *)v61[3] - (char *)v61[1]) >> 1 > v44) {
          unint64_t v44 = v45 >> 1;
        }
        if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v46 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v46 = v44;
        }
        if (v46)
        {
          uint64_t v47 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&v61[3], v46);
          int v42 = (char *)v61[1];
          uint64_t v40 = (char *)v61[2];
        }
        else
        {
          uint64_t v47 = 0;
        }
        uint64_t v48 = &v47[4 * v43];
        *(_DWORD *)uint64_t v48 = v39;
        uint64_t v41 = v48 + 4;
        while (v40 != v42)
        {
          int v49 = *((_DWORD *)v40 - 1);
          v40 -= 4;
          *((_DWORD *)v48 - 1) = v49;
          v48 -= 4;
        }
        v61[1] = v48;
        v61[2] = v41;
        v61[3] = &v47[4 * v46];
        if (v42) {
          operator delete(v42);
        }
      }
      else
      {
        *(_DWORD *)v61[2] = v39;
        uint64_t v41 = v40 + 4;
      }
      v61[2] = v41;
      ++v29;
      uint64_t v28 = (float32x4_t *)__p;
    }
    while (v29 < ((char *)v65 - (unsigned char *)__p) >> 4);
  }
  if (v28)
  {
    uint64_t v65 = v28;
    operator delete(v28);
  }
  int v62 = a2;
  unint64_t v50 = a1[2];
  unint64_t v51 = a1[1];
  if (v51 < v50)
  {
    *(void *)(v51 + 16) = 0;
    *(void *)(v51 + 24) = 0;
    *(void *)unint64_t v51 = 0;
    *(void *)(v51 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
    *(_OWORD *)unint64_t v51 = *(_OWORD *)v60;
    *(void **)(v51 + 16) = v61[0];
    *(void *)(v51 + 32) = 0;
    *(void *)(v51 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
    *(_OWORD *)(v51 + 24) = *(_OWORD *)&v61[1];
    *(void **)(v51 + 4ArcSharedObject::ArcSharedObject(this, 0) = v61[3];
    memset(&v61[1], 0, 24);
    *(_DWORD *)(v51 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v62;
    a1[1] = v51 + 56;
    return;
  }
  uint64_t v52 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v51 - *a1) >> 3);
  unint64_t v53 = v52 + 1;
  if ((unint64_t)(v52 + 1) > 0x492492492492492) {
LABEL_78:
  }
    abort();
  unint64_t v54 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v50 - *a1) >> 3);
  if (2 * v54 > v53) {
    unint64_t v53 = 2 * v54;
  }
  if (v54 >= 0x249249249249249) {
    unint64_t v53 = 0x492492492492492;
  }
  v66[2] = a1 + 2;
  if (v53 > 0x492492492492492) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  uint64_t v55 = 56 * v53;
  unint64_t v56 = (char *)operator new(56 * v53);
  StringID v57 = &v56[56 * v52];
  __p = v56;
  uint64_t v65 = (float32x4_t *)v57;
  *(_OWORD *)StringID v57 = *(_OWORD *)v60;
  *((void **)v57 + 2) = v61[0];
  *(_OWORD *)(v57 + 24) = *(_OWORD *)&v61[1];
  *((void **)v57 + 5) = v61[3];
  memset(&v61[1], 0, 24);
  *((_DWORD *)v57 + 12) = a2;
  v66[0] = v57 + 56;
  v66[1] = &v56[v55];
  std::vector<re::ecs2::DockingSpline>::__swap_out_circular_buffer(a1, &__p);
  uint64_t v58 = a1[1];
  std::__split_buffer<re::ecs2::DockingSpline>::~__split_buffer((uint64_t)&__p);
  long long v59 = v61[1];
  a1[1] = v58;
  if (v59)
  {
    v61[2] = v59;
    operator delete(v59);
  }
}

uint64_t *std::vector<re::ecs2::DockingSpline>::reserve(uint64_t *result)
{
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((result[2] - *result) >> 3)) <= 2)
  {
    uint64_t v1 = result;
    uint64_t v2 = result[1] - *result;
    v3[4] = result + 2;
    v3[0] = operator new(0xA8uLL);
    v3[1] = v3[0] + v2;
    v3[2] = v3[0] + v2;
    v3[3] = v3[0] + 168;
    std::vector<re::ecs2::DockingSpline>::__swap_out_circular_buffer(v1, v3);
    return (uint64_t *)std::__split_buffer<re::ecs2::DockingSpline>::~__split_buffer((uint64_t)v3);
  }
  return result;
}

void *re::ecs2::PlacementAnimationCurveBundle::buildSerialization(void *this, re::ecs2::PlacementAnimationSerialization *a2)
{
  unint64_t v3 = this[1] - *this;
  if (v3)
  {
    long long v4 = this;
    *(_DWORD *)a2 = -1227133513 * (v3 >> 3);
    uint64_t v5 = re::globalAllocators((re *)this);
    this = (void *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v5[2] + 32))(v5[2], 16 * *(_DWORD *)a2, 0);
    *((void *)a2 + 1) = this;
    if (*(_DWORD *)a2)
    {
      unint64_t v6 = 0;
      do
      {
        uint64_t v7 = *v4 + 56 * v6;
        uint64_t v8 = *((void *)a2 + 1) + 16 * v6;
        uint64_t v9 = (*(void *)(v7 + 32) - *(void *)(v7 + 24)) >> 2;
        *(_DWORD *)uint64_t v8 = *(_DWORD *)(v7 + 48);
        *(_DWORD *)(v8 + 4) = v9;
        unint64_t v10 = re::globalAllocators((re *)this);
        this = (void *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v10[2] + 32))(v10[2], (int)((4 * (*(_DWORD *)(v7 + 32) - *(_DWORD *)(v7 + 24))) & 0xFFFFFFF0), 0);
        *(void *)(v8 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = this;
        uint64_t v11 = (void *)(v8 + 8);
        if (*(void *)(v7 + 32) != *(void *)(v7 + 24))
        {
          unint64_t v12 = 0;
          unsigned int v13 = 1;
          do
          {
            uint64_t v14 = *(void *)(*(void *)v7 + 8 * v12);
            uint64_t v15 = *v11 + 16 * v12;
            HIDWORD(v14) = HIDWORD(*(void *)v15);
            *(_DWORD *)(v15 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = *(void *)(v15 + 8);
            *(void *)uint64_t v15 = v14;
            uint64_t v16 = *(void *)(*(void *)v7 + 8 * v12);
            uint64_t v17 = *v11 + 16 * v12;
            long long v18 = *(_OWORD *)v17;
            *(_DWORD *)(v17 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = *(void *)(v17 + 8);
            DWORD1(v1re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = HIDWORD(v16);
            *(void *)uint64_t v17 = v18;
            *(_DWORD *)(*v11 + 16 * v12 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = *(_DWORD *)(*(void *)(v7 + 24) + 4 * v12);
            unint64_t v12 = v13++;
          }
          while (v12 < (uint64_t)(*(void *)(v7 + 32) - *(void *)(v7 + 24)) >> 2);
        }
        ++v6;
      }
      while (v6 < *(unsigned int *)a2);
    }
  }
  else
  {
    *(_DWORD *)a2 = 0;
    *((void *)a2 + 1) = 0;
  }
  return this;
}

void ___ZN2re4ecs230PlacementAnimatorCurveProvider8instanceEv_block_invoke()
{
}

void re::ecs2::PlacementAnimatorCurveProvider::setDockingAnimationOverrides(re::VideoDefaults *a1, uint64_t *a2)
{
  if (qword_26AF859D0 != -1) {
    dispatch_once(&qword_26AF859D0, &__block_literal_global_17);
  }
  long long v4 = (void *)qword_26AF859C8;
  uint64_t v5 = *(void *)a1;
  unint64_t v6 = (re *)re::VideoDefaults::logEnabled(a1);
  if (v5)
  {
    if (v6)
    {
      uint64_t v7 = *re::videoLogObjects(v6);
      unint64_t v6 = (re *)os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
      if (v6)
      {
        __int16 v24 = 0;
        uint64_t v8 = "[PlacementAnimatorCurveProvider::setDockingAnimationOverrides]: Set custom override for docking";
        uint64_t v9 = (uint8_t *)&v24;
LABEL_24:
        _os_log_impl(&dword_233120000, v7, OS_LOG_TYPE_DEFAULT, v8, v9, 2u);
      }
    }
  }
  else if (v6)
  {
    uint64_t v7 = *re::videoLogObjects(v6);
    unint64_t v6 = (re *)os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
    if (v6)
    {
      *(_WORD *)long long buf = 0;
      uint64_t v8 = "[PlacementAnimatorCurveProvider::setDockingAnimationOverrides]: Cleared custom override for docking";
      uint64_t v9 = buf;
      goto LABEL_24;
    }
  }
  uint64_t v10 = *a2;
  uint64_t v11 = (re *)re::VideoDefaults::logEnabled(v6);
  if (v10)
  {
    if (v11)
    {
      unint64_t v12 = *re::videoLogObjects(v11);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        __int16 v22 = 0;
        unsigned int v13 = "[PlacementAnimatorCurveProvider::setDockingAnimationOverrides]: Set custom override for undocking";
        uint64_t v14 = (uint8_t *)&v22;
LABEL_27:
        _os_log_impl(&dword_233120000, v12, OS_LOG_TYPE_DEFAULT, v13, v14, 2u);
      }
    }
  }
  else if (v11)
  {
    unint64_t v12 = *re::videoLogObjects(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v21 = 0;
      unsigned int v13 = "[PlacementAnimatorCurveProvider::setDockingAnimationOverrides]: Cleared custom override for undocking";
      uint64_t v14 = (uint8_t *)&v21;
      goto LABEL_27;
    }
  }
  uint64_t v16 = *(void *)a1;
  uint64_t v15 = *((void *)a1 + 1);
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v17 = (std::__shared_weak_count *)v4[8];
  v4[7] = v16;
  v4[8] = v15;
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v17);
  }
  uint64_t v19 = *a2;
  uint64_t v18 = a2[1];
  if (v18) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v20 = (std::__shared_weak_count *)v4[10];
  v4[9] = v19;
  v4[10] = v18;
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v20);
  }
}

void re::ecs2::CustomDockingRegionComponent::buildDockAnimation(re::ecs2::CustomDockingRegionComponent *this, const char *a2, const char *a3)
{
  __int16 v22 = 0;
  unint64_t v23 = 0;
  uint64_t v24 = 0;
  __p = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  memset(v18, 0, sizeof(v18));
  std::vector<re::ecs2::DockingSpline>::reserve(v18);
  memset(v17, 0, sizeof(v17));
  std::vector<re::ecs2::DockingSpline>::reserve((uint64_t *)v17);
  if (!a2)
  {
    unint64_t v6 = 0;
    if (!a3) {
      goto LABEL_25;
    }
    goto LABEL_17;
  }
  re::ecs2::dockingBundleDataFromTuningFile((uint64_t)a2, (char **)&v22, (uint64_t *)&__p);
  unint64_t v6 = (char *)__p;
  uint64_t v7 = v20;
  if (v20 == __p)
  {
    unint64_t v23 = v22;
  }
  else
  {
    uint64_t v8 = 0;
    if ((unint64_t)((v20 - (unsigned char *)__p) / 24) <= 1) {
      uint64_t v9 = 1;
    }
    else {
      uint64_t v9 = (v20 - (unsigned char *)__p) / 24;
    }
    uint64_t v10 = __p;
    do
    {
      re::ecs2::PlacementAnimationCurveBundle::addCurve(v18, *((_DWORD *)v22 + v8++), v10);
      v10 += 3;
    }
    while (v9 != v8);
    unint64_t v23 = v22;
    uint64_t v11 = v7;
    do
    {
      unsigned int v13 = (void *)*((void *)v11 - 3);
      v11 -= 24;
      unint64_t v12 = v13;
      if (v13)
      {
        *((void *)v7 - 2) = v12;
        operator delete(v12);
      }
      uint64_t v7 = v11;
    }
    while (v11 != v6);
    uint64_t v7 = v6;
  }
  uint64_t v20 = v7;
  if (a3)
  {
LABEL_17:
    re::ecs2::dockingBundleDataFromTuningFile((uint64_t)a3, (char **)&v22, (uint64_t *)&__p);
    unint64_t v6 = (char *)__p;
    if (v20 == __p)
    {
      unint64_t v6 = v20;
    }
    else
    {
      uint64_t v14 = 0;
      if ((unint64_t)((v20 - (unsigned char *)__p) / 24) <= 1) {
        uint64_t v15 = 1;
      }
      else {
        uint64_t v15 = (v20 - (unsigned char *)__p) / 24;
      }
      uint64_t v16 = __p;
      do
      {
        re::ecs2::PlacementAnimationCurveBundle::addCurve((uint64_t *)v17, *((_DWORD *)v22 + v14++), v16);
        v16 += 3;
      }
      while (v15 != v14);
    }
  }
LABEL_25:
  re::ecs2::PlacementAnimationCurveBundle::buildSerialization(v18, (re::ecs2::CustomDockingRegionComponent *)((char *)this + 96));
  re::ecs2::PlacementAnimationCurveBundle::buildSerialization(v17, (re::ecs2::CustomDockingRegionComponent *)((char *)this + 112));
  float32x4_t v25 = v17;
  std::vector<re::ecs2::DockingSpline>::__destroy_vector::operator()[abi:nn180100]((void ***)&v25);
  v17[0] = (void **)v18;
  std::vector<re::ecs2::DockingSpline>::__destroy_vector::operator()[abi:nn180100](v17);
  if (v6)
  {
    _ZNSt3__16vectorINS0_IDv3_fNS_9allocatorIS1_EEEENS2_IS4_EEE7__clearB8nn180100Ev((uint64_t *)&__p);
    operator delete(__p);
  }
  if (v22)
  {
    unint64_t v23 = v22;
    operator delete(v22);
  }
}

void re::ecs2::CustomDockingRegionComponent::activateDockAnimationOverrides(re::ecs2::CustomDockingRegionComponent *this)
{
  re::ecs2::PlacementAnimationSerialization::makeBundle((re::ecs2::CustomDockingRegionComponent *)((char *)this + 96), &v6);
  uint64_t v2 = v7;
  v8[0] = v6;
  v8[1] = v7;
  re::ecs2::PlacementAnimationSerialization::makeBundle((re::ecs2::CustomDockingRegionComponent *)((char *)this + 112), &v4);
  unint64_t v3 = v5;
  unint64_t v6 = v4;
  uint64_t v7 = v5;
  re::ecs2::PlacementAnimatorCurveProvider::setDockingAnimationOverrides((re::VideoDefaults *)v8, (uint64_t *)&v6);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v3);
  }
  if (v2)
  {
    std::__shared_weak_count::__release_shared[abi:nn180100](v2);
  }
}

uint64_t re::ecs2::CustomDockingRegionComponent::getCustomDockingRegionComponentFromScene(uint64_t a1)
{
  unint64_t v1 = *((unsigned __int16 *)re::ecs2::ComponentImpl<re::ecs2::CustomDockingRegionComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
       + 8);
  if (*(void *)(a1 + 224) <= v1) {
    return 0;
  }
  uint64_t v2 = *(void *)(*(void *)(a1 + 240) + 8 * v1);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = *(void *)(v2 + 24);
  if (!v3) {
    return 0;
  }
  long long v4 = *(uint64_t **)(v2 + 40);
  uint64_t v5 = 8 * v3;
  while (1)
  {
    uint64_t result = *v4;
    uint64_t v7 = *(void *)(*v4 + 16);
    if (v7)
    {
      if (*(unsigned char *)(v7 + 288)) {
        break;
      }
    }
    ++v4;
    v5 -= 8;
    if (!v5) {
      return 0;
    }
  }
  return result;
}

void *re::ecs2::allocInfo_CustomDockingRegionComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF859F0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF859F0))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF85A98, "CustomDockingRegionComponent");
    __cxa_guard_release(&qword_26AF859F0);
  }
  return &unk_26AF85A98;
}

void re::ecs2::initInfo_CustomDockingRegionComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  uint64_t v60 = 0x7AC04804869D2916;
  long long v61 = "CustomDockingRegionComponent";
  re::StringID::destroyString((re::StringID *)&v60);
  *((_OWORD *)this + 2) = v56;
  if (atomic_load_explicit((atomic_uchar *volatile)&qword_26AF859E8, memory_order_acquire)) {
    goto LABEL_2;
  }
  long long v4 = (re *)__cxa_guard_acquire(&qword_26AF859E8);
  if (!v4) {
    goto LABEL_2;
  }
  uint64_t v5 = re::introspectionAllocator(v4);
  uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
  uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
  *(_DWORD *)uint64_t v7 = 1;
  *(void *)(v7 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "Component";
  *(void *)(v7 + 16) = v6;
  *(void *)(v7 + 24) = 0;
  *(void *)(v7 + 32) = 0;
  *(_DWORD *)(v7 + 4ArcSharedObject::ArcSharedObject(this, 0) = 3;
  *(void *)(v7 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
  *(void *)(v7 + 56) = 0;
  *(_DWORD *)(v7 + 64) = 0;
  qword_26AF859F8 = v7;
  uint64_t v8 = re::introspectionAllocator((re *)v7);
  uint64_t v9 = re::introspect_AABB((re::IntrospectionBase **)1);
  uint64_t v10 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
  *(_DWORD *)uint64_t v10 = 1;
  *(void *)(v10 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "m_bounds";
  *(void *)(v10 + 16) = v9;
  *(void *)(v10 + 24) = 0;
  *(void *)(v10 + 32) = 0x2000000001;
  *(_DWORD *)(v10 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *(void *)(v10 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
  *(void *)(v10 + 56) = 0;
  *(_DWORD *)(v10 + 64) = 0;
  qword_26AF85A00 = v10;
  unint64_t v12 = re::introspectionAllocator((re *)v10);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF859D8, memory_order_acquire) & 1) == 0)
  {
    int v39 = (re *)__cxa_guard_acquire(&qword_26AF859D8);
    if (v39)
    {
      uint64_t v40 = re::introspectionAllocator(v39);
      uint64_t v41 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v40 + 32))(v40, 24, 8);
      *(_DWORD *)uint64_t v41 = 1;
      *((void *)v41 + 1) = 0;
      *((void *)v41 + 2) = "DockTransitionStyleDefault";
      qword_26AF85A18 = (uint64_t)v41;
      int v42 = re::introspectionAllocator(v41);
      int64_t v43 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v42 + 32))(v42, 24, 8);
      *(_DWORD *)int64_t v43 = 1;
      *((void *)v43 + 1) = 1;
      *((void *)v43 + 2) = "DockTransitionStyleGroundSkim";
      qword_26AF85A20 = (uint64_t)v43;
      unint64_t v44 = re::introspectionAllocator(v43);
      int64_t v45 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v44 + 32))(v44, 24, 8);
      *(_DWORD *)int64_t v45 = 1;
      *((void *)v45 + 1) = 2;
      *((void *)v45 + 2) = "DockTransitionStyleSwoop";
      qword_26AF85A28 = (uint64_t)v45;
      unint64_t v46 = re::introspectionAllocator(v45);
      uint64_t v47 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v46 + 32))(v46, 24, 8);
      *(_DWORD *)uint64_t v47 = 1;
      *((void *)v47 + 1) = 3;
      *((void *)v47 + 2) = "DockTransitionStyleCustom0";
      qword_26AF85A30 = (uint64_t)v47;
      uint64_t v48 = re::introspectionAllocator(v47);
      int v49 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v48 + 32))(v48, 24, 8);
      *(_DWORD *)int v49 = 1;
      *((void *)v49 + 1) = 4;
      *((void *)v49 + 2) = "DockTransitionStyleCustom1";
      qword_26AF85A38 = (uint64_t)v49;
      unint64_t v50 = re::introspectionAllocator(v49);
      unint64_t v51 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v50 + 32))(v50, 24, 8);
      *(_DWORD *)unint64_t v51 = 1;
      *((void *)v51 + 1) = 5;
      *((void *)v51 + 2) = "DockTransitionStyleCustom2";
      qword_26AF85A40 = (uint64_t)v51;
      uint64_t v52 = re::introspectionAllocator(v51);
      uint64_t v53 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v52 + 32))(v52, 24, 8);
      *(_DWORD *)uint64_t v53 = 1;
      *(void *)(v53 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 6;
      *(void *)(v53 + 16) = "DockTransitionStyleCustom3";
      qword_26AF85A48 = v53;
      __cxa_guard_release(&qword_26AF859D8);
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF859E0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF859E0))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_26AF85A50, "DockTransitionStyle", 1, 1, 1, 1);
    qword_26AF85A50 = (uint64_t)&unk_26E715E00;
    qword_26AF85A90 = (uint64_t)&re::ecs2::introspect_DockTransitionStyle(BOOL)::enumTable;
    dword_26AF85A60 = 9;
    __cxa_guard_release(&qword_26AF859E0);
  }
  if (_MergedGlobals_198)
  {
LABEL_33:
    uint64_t v35 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 72, 8);
    *(_DWORD *)uint64_t v35 = 1;
    *(void *)(v35 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "m_transitionStyle";
    *(void *)(v35 + 16) = &qword_26AF85A50;
    *(void *)(v35 + 24) = 0;
    *(void *)(v35 + 32) = 0x4000000002;
    *(_DWORD *)(v35 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
    *(void *)(v35 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
    *(void *)(v35 + 56) = 0;
    *(_DWORD *)(v35 + 64) = 0;
    qword_26AF85A08 = v35;
    long long v36 = re::introspectionAllocator((re *)v35);
    uint64_t v37 = re::introspect_Vector3F((re::IntrospectionBase **)1);
    uint64_t v38 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v36 + 32))(v36, 72, 8);
    *(_DWORD *)uint64_t v38 = 1;
    *(void *)(v38 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "m_dockPosition";
    *(void *)(v38 + 16) = v37;
    *(void *)(v38 + 24) = 0;
    *(void *)(v38 + 32) = 0x5000000003;
    *(_DWORD *)(v38 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
    *(void *)(v38 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
    *(void *)(v38 + 56) = 0;
    *(_DWORD *)(v38 + 64) = 0;
    qword_26AF85A10 = v38;
    __cxa_guard_release(&qword_26AF859E8);
LABEL_2:
    *((void *)this + 2) = 0x8000000008;
    *((_DWORD *)this + 6) = 16;
    *((_WORD *)this + 14) = 0;
    *((_DWORD *)this + 14) = 4;
    *((void *)this + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = &qword_26AF859F8;
    *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::CustomDockingRegionComponent>;
    *((void *)this + 11) = 0;
    *((void *)this + 12) = 0;
    *((void *)this + 1ArcSharedObject::ArcSharedObject(this, 0) = re::internal::defaultDestruct<re::ecs2::CustomDockingRegionComponent>;
    *((void *)this + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::CustomDockingRegionComponent>;
    *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::CustomDockingRegionComponent>;
    re::IntrospectionRegistry::add(this, v3);
    long long v55 = v56;
    return;
  }
  _MergedGlobals_198 = 1;
  re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_26AF85A50, v11);
  v57[0] = 0x7F7AD97148E63D12;
  v57[1] = (uint64_t)"DockTransitionStyle";
  uint64_t v60 = 0x31CD534126;
  long long v61 = "uint8_t";
  unsigned int v13 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, &v60);
  if (v13)
  {
    uint64_t v14 = *v13;
    re::StringID::destroyString((re::StringID *)&v60);
    uint64_t v15 = (unsigned int *)qword_26AF85A90;
    v59[1] = v14;
    re::TypeBuilder::beginEnumType((uint64_t)&v60, v57, 1, 1, (uint64_t)v59);
    unint64_t v17 = *v15;
    if (v17)
    {
      for (unint64_t i = 0; i < v17; ++i)
      {
        uint64_t v19 = *(void *)(*((void *)v15 + 1) + 8 * i);
        if (*(_DWORD *)v19 == 1)
        {
          uint64_t v20 = *(char **)(v19 + 16);
          if (v20)
          {
            uint64_t v21 = *v20;
            if (*v20)
            {
              char v22 = v20[1];
              if (v22)
              {
                unint64_t v23 = (unsigned __int8 *)(v20 + 2);
                do
                {
                  uint64_t v21 = 31 * v21 + v22;
                  int v24 = *v23++;
                  char v22 = v24;
                }
                while (v24);
              }
            }
          }
          else
          {
            uint64_t v21 = 0;
          }
          uint64_t v25 = *(void *)(v19 + 8);
          *(void *)&v58.var0 = 2 * v21;
          v58.var1 = v20;
          re::TypeBuilder::addEnumConstant((re::TypeBuilder *)&v60, v25, &v58);
          re::StringID::destroyString((re::StringID *)&v58);
          unint64_t v17 = *v15;
        }
      }
      if (v17)
      {
        for (unint64_t j = 0; j < v17; ++j)
        {
          uint64_t v27 = *(void *)(*((void *)v15 + 1) + 8 * j);
          if (*(_DWORD *)v27 == 2)
          {
            uint64_t v28 = *(char **)(v27 + 16);
            if (v28)
            {
              uint64_t v29 = *v28;
              if (*v28)
              {
                char v30 = v28[1];
                if (v30)
                {
                  uint64_t v31 = (unsigned __int8 *)(v28 + 2);
                  do
                  {
                    uint64_t v29 = 31 * v29 + v30;
                    int v32 = *v31++;
                    char v30 = v32;
                  }
                  while (v32);
                }
              }
            }
            else
            {
              uint64_t v29 = 0;
            }
            uint64_t v33 = *(void *)(v27 + 8);
            *(void *)&v58.var0 = 2 * v29;
            v58.var1 = v28;
            re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)&v60, v33, &v58);
            re::StringID::destroyString((re::StringID *)&v58);
            unint64_t v17 = *v15;
          }
        }
      }
    }
    re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v60, v34);
    xmmword_26AF85A70 = (__int128)v58;
    re::StringID::destroyString((re::StringID *)v57);
    goto LABEL_33;
  }
  re::StringID::destroyString((re::StringID *)&v60);
  re::internal::assertLog((re::internal *)5, v54, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "DockTransitionStyle");
  _os_crash();
  __break(1u);
}

int32x4_t re::internal::defaultConstruct<re::ecs2::CustomDockingRegionComponent>(int a1, int a2, ArcSharedObject *this)
{
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)(v3 + 16) = 0;
  *(unsigned char *)(v3 + 24) = 0;
  *(void *)uint64_t v3 = &unk_26E6F6B30;
  int32x4_t result = vdupq_n_s32(0x7F800000u);
  *(void *)&long long v5 = 0x7F0000007FLL;
  *((void *)&v5 + 1) = 0x7F0000007FLL;
  *(int32x4_t *)(v3 + 32) = result;
  *(_OWORD *)(v3 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v5;
  *(void *)(v3 + 104) = 0;
  *(_DWORD *)(v3 + 112) = 0;
  *(void *)(v3 + 12ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *(void *)(v3 + 8ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *(void *)(v3 + 8re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
  *(_DWORD *)(v3 + 96) = 0;
  return result;
}

uint64_t re::internal::defaultDestruct<re::ecs2::CustomDockingRegionComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

int32x4_t re::internal::defaultConstructV2<re::ecs2::CustomDockingRegionComponent>(ArcSharedObject *a1)
{
  *((_OWORD *)a1 + 6) = 0u;
  *((_OWORD *)a1 + 7) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(void *)(v1 + 16) = 0;
  *(unsigned char *)(v1 + 24) = 0;
  *(void *)uint64_t v1 = &unk_26E6F6B30;
  int32x4_t result = vdupq_n_s32(0x7F800000u);
  *(void *)&long long v3 = 0x7F0000007FLL;
  *((void *)&v3 + 1) = 0x7F0000007FLL;
  *(int32x4_t *)(v1 + 32) = result;
  *(_OWORD *)(v1 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v3;
  *(void *)(v1 + 104) = 0;
  *(_DWORD *)(v1 + 112) = 0;
  *(void *)(v1 + 12ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *(void *)(v1 + 8ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *(void *)(v1 + 8re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
  *(_DWORD *)(v1 + 96) = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::CustomDockingRegionComponent>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_CustomDockingRegionComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"CustomDockingRegionComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_CustomDockingRegionComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_CustomDockingRegionComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::CustomDockingRegionComponent>, this);
}

void std::vector<re::ecs2::DockingSpline>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    long long v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 56;
        std::allocator<re::ecs2::DockingSpline>::destroy[abi:nn180100](v4);
      }
      while ((void *)v4 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<re::ecs2::DockingSpline>::destroy[abi:nn180100](uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  long long v3 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v3;
    operator delete(v3);
  }
}

std::vector<int> *__cdecl std::vector<float>::vector(std::vector<int> *this, const std::vector<int> *__x)
{
  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  std::vector<int>::pointer begin = __x->__begin_;
  end = __x->__end_;
  int64_t v5 = (char *)end - (char *)__x->__begin_;
  if (end != __x->__begin_)
  {
    std::vector<float>::__vallocate[abi:nn180100](this, v5 >> 2);
    std::vector<int>::pointer v6 = this->__end_;
    memmove(v6, begin, v5);
    this->__end_ = (std::vector<int>::pointer)((char *)v6 + v5);
  }
  return this;
}

char *std::vector<float>::__vallocate[abi:nn180100](void *a1, unint64_t a2)
{
  if (a2 >> 62) {
    abort();
  }
  int32x4_t result = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(4 * a2);
}

void _ZNSt3__16vectorINS0_IDv3_fNS_9allocatorIS1_EEEENS2_IS4_EEE7__clearB8nn180100Ev(uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 != *a1)
  {
    uint64_t v4 = a1[1];
    do
    {
      std::vector<int>::pointer v6 = *(void **)(v4 - 24);
      v4 -= 24;
      int64_t v5 = v6;
      if (v6)
      {
        *(void *)(v2 - 16) = v5;
        operator delete(v5);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

void *_ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEEC2ERKS4_(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v4 = *(const void **)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  int64_t v5 = v3 - *(void *)a2;
  if (v3 != *(void *)a2)
  {
    _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE11__vallocateB8nn180100Em(a1, v5 >> 4);
    std::vector<int>::pointer v6 = (char *)a1[1];
    memmove(v6, v4, v5);
    a1[1] = &v6[v5];
  }
  return a1;
}

float32x4_t *_ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZN2re4ecs216SplineParametricC1ERKNS_6vectorIDv3_fNS_9allocatorIS6_EEEEE3__0PS6_Lb0EEEvT1_SF_T0_NS_15iterator_traitsISF_E15difference_typeEb(float32x4_t *result, float32x4_t *a2, uint64_t a3, char a4)
{
  uint64_t v9 = result;
LABEL_2:
  uint64_t v10 = v9;
  while (1)
  {
    uint64_t v9 = v10;
    uint64_t v11 = (char *)a2 - (char *)v10;
    uint64_t v12 = a2 - v10;
    if (v5 || !v4)
    {
      switch(v12)
      {
        case 0:
        case 1:
          return result;
        case 2:
          float32x4_t v70 = a2[-1];
          float32x4_t v71 = *v10;
          if (vmovn_s32(vcgtq_f32(*v10, v70)).u8[0])
          {
            *uint64_t v10 = v70;
            a2[-1] = v71;
          }
          return result;
        case 3:
          float32x4_t v72 = *v10;
          float32x4_t v73 = v10[1];
          float32x4_t v74 = a2[-1];
          unsigned __int8 v75 = vmovn_s32(vcgtq_f32(v73, v74)).u8[0];
          if (vmovn_s32(vcgtq_f32(*v10, v73)).u8[0])
          {
            if (v75)
            {
              *uint64_t v10 = v74;
            }
            else
            {
              *uint64_t v10 = v73;
              v10[1] = v72;
              float32x4_t v120 = a2[-1];
              if ((vmovn_s32(vcgtq_f32(v72, v120)).u8[0] & 1) == 0) {
                return result;
              }
              v10[1] = v120;
            }
            a2[-1] = v72;
          }
          else if (v75)
          {
            v10[1] = v74;
            a2[-1] = v73;
            float32x4_t v81 = v10[1];
LABEL_161:
            float32x4_t v116 = *v9;
            if (vmovn_s32(vcgtq_f32(*v9, v81)).u8[0])
            {
              *uint64_t v9 = v81;
              v9[1] = v116;
            }
          }
          break;
        case 4:
          return _ZNSt3__17__sort4B8nn180100INS_17_ClassicAlgPolicyERZN2re4ecs216SplineParametricC1ERKNS_6vectorIDv3_fNS_9allocatorIS6_EEEEE3__0PS6_EEvT1_SF_SF_SF_T0_(v10, v10 + 1, v10 + 2, a2 - 1);
        case 5:
          long long v76 = v10 + 1;
          long long v77 = v10 + 2;
          unint64_t v78 = v10 + 3;
          int32x4_t result = _ZNSt3__17__sort4B8nn180100INS_17_ClassicAlgPolicyERZN2re4ecs216SplineParametricC1ERKNS_6vectorIDv3_fNS_9allocatorIS6_EEEEE3__0PS6_EEvT1_SF_SF_SF_T0_(v9, v9 + 1, v9 + 2, v9 + 3);
          float32x4_t v79 = a2[-1];
          float32x4_t v80 = v9[3];
          if ((vmovn_s32(vcgtq_f32(v80, v79)).u8[0] & 1) == 0) {
            return result;
          }
          *unint64_t v78 = v79;
          a2[-1] = v80;
          float32x4_t v81 = *v78;
          float32x4_t v82 = *v77;
          if ((vmovn_s32(vcgtq_f32(*v77, *v78)).u8[0] & 1) == 0) {
            return result;
          }
          *long long v77 = v81;
          *unint64_t v78 = v82;
          float32x4_t v83 = *v76;
          if ((vmovn_s32(vcgtq_f32(*v76, v81)).u8[0] & 1) == 0) {
            return result;
          }
          v9[1] = v81;
          void v9[2] = v83;
          goto LABEL_161;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v11 <= 383) {
      break;
    }
    if (!a3)
    {
      if (v10 == a2) {
        return result;
      }
      int64_t v94 = (unint64_t)(v12 - 2) >> 1;
      int64_t v95 = v94;
      do
      {
        int64_t v96 = v95;
        if (v94 >= v95)
        {
          uint64_t v97 = (2 * v95) | 1;
          id v98 = &v10[v97];
          if (2 * v96 + 2 < v12 && v98->f32[0] < COERCE_FLOAT(*(_OWORD *)&v98[1]))
          {
            ++v98;
            uint64_t v97 = 2 * v96 + 2;
          }
          unsigned int v99 = &v10[v96];
          float32x4_t v100 = *v98;
          float32x4_t v101 = *v99;
          if ((vmovn_s32(vcgtq_f32(*v99, *v98)).u8[0] & 1) == 0)
          {
            do
            {
              *unsigned int v99 = v100;
              unsigned int v99 = v98;
              if (v94 < v97) {
                break;
              }
              uint64_t v102 = 2 * v97;
              uint64_t v97 = (2 * v97) | 1;
              id v98 = &v10[v97];
              uint64_t v103 = v102 + 2;
              if (v103 < v12 && v98->f32[0] < COERCE_FLOAT(*(_OWORD *)&v98[1]))
              {
                ++v98;
                uint64_t v97 = v103;
              }
              float32x4_t v100 = *v98;
            }
            while ((vmovn_s32(vcgtq_f32(v101, *v98)).u8[0] & 1) == 0);
            *unsigned int v99 = v101;
          }
        }
        int64_t v95 = v96 - 1;
      }
      while (v96);
      uint64_t v104 = (unint64_t)v11 >> 4;
      while (2)
      {
        uint64_t v105 = 0;
        float32x4_t v106 = *v10;
        uint64_t v107 = v10;
        do
        {
          int v108 = v107;
          v107 += v105 + 1;
          uint64_t v109 = 2 * v105;
          uint64_t v105 = (2 * v105) | 1;
          uint64_t v110 = v109 + 2;
          if (v110 < v104 && v107->f32[0] < COERCE_FLOAT(*(_OWORD *)&v107[1]))
          {
            ++v107;
            uint64_t v105 = v110;
          }
          *int v108 = *v107;
        }
        while (v105 <= (uint64_t)((unint64_t)(v104 - 2) >> 1));
        if (v107 == --a2)
        {
LABEL_155:
          *uint64_t v107 = v106;
        }
        else
        {
          *uint64_t v107 = *a2;
          *a2 = v106;
          uint64_t v111 = (char *)v107 - (char *)v10 + 16;
          if (v111 >= 17)
          {
            unint64_t v112 = (((unint64_t)v111 >> 4) - 2) >> 1;
            uint64_t v113 = &v10[v112];
            float32x4_t v114 = *v113;
            float32x4_t v106 = *v107;
            if (vmovn_s32(vcgtq_f32(*v107, *v113)).u8[0])
            {
              do
              {
                *uint64_t v107 = v114;
                uint64_t v107 = v113;
                if (!v112) {
                  break;
                }
                unint64_t v112 = (v112 - 1) >> 1;
                uint64_t v113 = &v10[v112];
                float32x4_t v114 = *v113;
              }
              while ((vmovn_s32(vcgtq_f32(v106, *v113)).u8[0] & 1) != 0);
              goto LABEL_155;
            }
          }
        }
        if (v104-- <= 2) {
          return result;
        }
        continue;
      }
    }
    unint64_t v13 = (unint64_t)v12 >> 1;
    float32x4_t v14 = a2[-1];
    if ((unint64_t)v11 >= 0x801)
    {
      float32x4_t v15 = v10[v13];
      float32x4_t v16 = *v10;
      unsigned __int8 v17 = vmovn_s32(vcgtq_f32(v15, v14)).u8[0];
      if (vmovn_s32(vcgtq_f32(*v10, v15)).u8[0])
      {
        if (v17)
        {
          *uint64_t v10 = v14;
          goto LABEL_22;
        }
        *uint64_t v10 = v15;
        v10[v13] = v16;
        float32x4_t v24 = a2[-1];
        if (vmovn_s32(vcgtq_f32(v16, v24)).u8[0])
        {
          v10[v13] = v24;
LABEL_22:
          a2[-1] = v16;
        }
      }
      else if (v17)
      {
        v10[v13] = v14;
        a2[-1] = v15;
        float32x4_t v21 = v10[v13];
        float32x4_t v22 = *v10;
        if (vmovn_s32(vcgtq_f32(*v10, v21)).u8[0])
        {
          *uint64_t v10 = v21;
          v10[v13] = v22;
        }
      }
      unint64_t v25 = v13 - 1;
      float32x4_t v26 = v10[v13 - 1];
      float32x4_t v27 = v10[1];
      float32x4_t v28 = a2[-2];
      unsigned __int8 v29 = vmovn_s32(vcgtq_f32(v26, v28)).u8[0];
      if (vmovn_s32(vcgtq_f32(v27, v26)).u8[0])
      {
        if (v29)
        {
          v10[1] = v28;
          goto LABEL_34;
        }
        v10[1] = v26;
        v10[v25] = v27;
        float32x4_t v33 = a2[-2];
        if (vmovn_s32(vcgtq_f32(v27, v33)).u8[0])
        {
          v10[v25] = v33;
LABEL_34:
          a2[-2] = v27;
        }
      }
      else if (v29)
      {
        v10[v25] = v28;
        a2[-2] = v26;
        float32x4_t v30 = v10[v25];
        float32x4_t v31 = v10[1];
        if (vmovn_s32(vcgtq_f32(v31, v30)).u8[0])
        {
          v10[1] = v30;
          v10[v25] = v31;
        }
      }
      unint64_t v34 = v13 + 1;
      float32x4_t v35 = v10[v13 + 1];
      float32x4_t v36 = v10[2];
      float32x4_t v37 = a2[-3];
      unsigned __int8 v38 = vmovn_s32(vcgtq_f32(v35, v37)).u8[0];
      if (vmovn_s32(vcgtq_f32(v36, v35)).u8[0])
      {
        if (v38)
        {
          _OWORD v10[2] = v37;
          goto LABEL_43;
        }
        _OWORD v10[2] = v35;
        v10[v34] = v36;
        float32x4_t v41 = a2[-3];
        if (vmovn_s32(vcgtq_f32(v36, v41)).u8[0])
        {
          v10[v34] = v41;
LABEL_43:
          a2[-3] = v36;
        }
      }
      else if (v38)
      {
        v10[v34] = v37;
        a2[-3] = v35;
        float32x4_t v39 = v10[v34];
        float32x4_t v40 = v10[2];
        if (vmovn_s32(vcgtq_f32(v40, v39)).u8[0])
        {
          _OWORD v10[2] = v39;
          v10[v34] = v40;
        }
      }
      float32x4_t v42 = v10[v13];
      float32x4_t v43 = v10[v25];
      float32x4_t v44 = v10[v34];
      unsigned __int8 v45 = vmovn_s32(vcgtq_f32(v42, v44)).u8[0];
      if (vmovn_s32(vcgtq_f32(v43, v42)).u8[0])
      {
        if (v45)
        {
          v10[v25] = v44;
          v10[v34] = v43;
LABEL_54:
          float32x4_t v46 = *v10;
          *uint64_t v10 = v42;
          v10[v13] = v46;
          goto LABEL_55;
        }
        v10[v25] = v42;
        v10[v13] = v43;
        if (vmovn_s32(vcgtq_f32(v43, v44)).u8[0])
        {
          v10[v13] = v44;
          v10[v34] = v43;
          goto LABEL_52;
        }
      }
      else
      {
        if ((v45 & 1) == 0) {
          goto LABEL_54;
        }
        v10[v13] = v44;
        v10[v34] = v42;
        if ((vmovn_s32(vcgtq_f32(v43, v44)).u8[0] & 1) == 0)
        {
LABEL_52:
          float32x4_t v42 = v44;
          goto LABEL_54;
        }
        v10[v25] = v44;
        v10[v13] = v43;
      }
      float32x4_t v42 = v43;
      goto LABEL_54;
    }
    float32x4_t v18 = *v10;
    float32x4_t v19 = v10[v13];
    unsigned __int8 v20 = vmovn_s32(vcgtq_f32(*v10, v14)).u8[0];
    if ((vmovn_s32(vcgtq_f32(v19, *v10)).u8[0] & 1) == 0)
    {
      if (v20)
      {
        *uint64_t v10 = v14;
        a2[-1] = v18;
        float32x4_t v23 = v10[v13];
        if (vmovn_s32(vcgtq_f32(v23, *v10)).u8[0])
        {
          v10[v13] = *v10;
          *uint64_t v10 = v23;
        }
      }
      goto LABEL_55;
    }
    if (v20)
    {
      v10[v13] = v14;
    }
    else
    {
      v10[v13] = v18;
      *uint64_t v10 = v19;
      float32x4_t v32 = a2[-1];
      if ((vmovn_s32(vcgtq_f32(v19, v32)).u8[0] & 1) == 0) {
        goto LABEL_55;
      }
      *uint64_t v10 = v32;
    }
    a2[-1] = v19;
LABEL_55:
    --a3;
    float32x4_t v47 = *v10;
    if ((a4 & 1) != 0 || v10[-1].f32[0] < v47.f32[0])
    {
      uint64_t v48 = 0;
      do
        float32x4_t v49 = v10[++v48];
      while (v49.f32[0] < v47.f32[0]);
      unint64_t v50 = &v10[v48];
      unint64_t v51 = a2;
      if (v48 == 1)
      {
        unint64_t v51 = a2;
        do
        {
          if (v50 >= v51) {
            break;
          }
          float32x4_t v53 = v51[-1];
          --v51;
        }
        while (v53.f32[0] >= v47.f32[0]);
      }
      else
      {
        do
        {
          float32x4_t v52 = v51[-1];
          --v51;
        }
        while (v52.f32[0] >= v47.f32[0]);
      }
      if (v50 < v51)
      {
        float32x4_t v54 = *v51;
        long long v55 = &v10[v48];
        long long v56 = v51;
        do
        {
          *long long v55 = v54;
          *long long v56 = v49;
          do
          {
            float32x4_t v57 = v55[1];
            ++v55;
            float32x4_t v49 = v57;
          }
          while (v57.f32[0] < v47.f32[0]);
          do
          {
            float32x4_t v58 = v56[-1];
            --v56;
            float32x4_t v54 = v58;
          }
          while (v58.f32[0] >= v47.f32[0]);
        }
        while (v55 < v56);
        long long v59 = v55 - 1;
      }
      else
      {
        long long v59 = v50 - 1;
      }
      if (v59 != v10) {
        *uint64_t v10 = *v59;
      }
      *long long v59 = v47;
      if (v50 < v51) {
        goto LABEL_78;
      }
      BOOL v60 = _ZNSt3__127__insertion_sort_incompleteB8nn180100INS_17_ClassicAlgPolicyERZN2re4ecs216SplineParametricC1ERKNS_6vectorIDv3_fNS_9allocatorIS6_EEEEE3__0PS6_EEbT1_SF_T0_(v10, v59);
      uint64_t v10 = v59 + 1;
      int32x4_t result = (float32x4_t *)_ZNSt3__127__insertion_sort_incompleteB8nn180100INS_17_ClassicAlgPolicyERZN2re4ecs216SplineParametricC1ERKNS_6vectorIDv3_fNS_9allocatorIS6_EEEEE3__0PS6_EEbT1_SF_T0_(v59 + 1, a2);
      if (result)
      {
        a2 = v59;
        if (v60) {
          return result;
        }
        goto LABEL_2;
      }
      if (!v60)
      {
LABEL_78:
        int32x4_t result = (float32x4_t *)_ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZN2re4ecs216SplineParametricC1ERKNS_6vectorIDv3_fNS_9allocatorIS6_EEEEE3__0PS6_Lb0EEEvT1_SF_T0_NS_15iterator_traitsISF_E15difference_typeEb(v9, v59, a3, a4 & 1);
        a4 = 0;
        uint64_t v10 = v59 + 1;
      }
    }
    else
    {
      if (v47.f32[0] < a2[-1].f32[0])
      {
        do
        {
          float32x4_t v61 = v10[1];
          ++v10;
        }
        while (v47.f32[0] >= v61.f32[0]);
      }
      else
      {
        int v62 = v10 + 1;
        do
        {
          uint64_t v10 = v62;
          if (v62 >= a2) {
            break;
          }
          ++v62;
        }
        while (v47.f32[0] >= COERCE_FLOAT(*v10));
      }
      long long v63 = a2;
      if (v10 < a2)
      {
        long long v63 = a2;
        do
        {
          float32x4_t v64 = v63[-1];
          --v63;
        }
        while (v47.f32[0] < v64.f32[0]);
      }
      if (v10 < v63)
      {
        float32x4_t v65 = *v10;
        float32x4_t v66 = *v63;
        do
        {
          *uint64_t v10 = v66;
          *long long v63 = v65;
          do
          {
            float32x4_t v67 = v10[1];
            ++v10;
            float32x4_t v65 = v67;
          }
          while ((vmovn_s32(vcgtq_f32(v67, v47)).u8[0] & 1) == 0);
          do
          {
            float32x4_t v68 = v63[-1];
            --v63;
            float32x4_t v66 = v68;
          }
          while ((vmovn_s32(vcgtq_f32(v68, v47)).u8[0] & 1) != 0);
        }
        while (v10 < v63);
      }
      int v69 = v10 - 1;
      BOOL v4 = &v10[-1] >= v9;
      BOOL v5 = &v10[-1] == v9;
      if (&v10[-1] != v9) {
        *uint64_t v9 = *v69;
      }
      a4 = 0;
      *int v69 = v47;
    }
  }
  int64_t v84 = v10 + 1;
  BOOL v86 = v10 == a2 || v84 == a2;
  if (a4)
  {
    if (!v86)
    {
      uint64_t v87 = 16;
      unsigned int v88 = v10;
      do
      {
        float32x4_t v90 = *v88;
        float32x4_t v89 = v88[1];
        unsigned int v88 = v84;
        if (vmovn_s32(vcgtq_f32(v90, v89)).u8[0])
        {
          uint64_t v91 = v87;
          do
          {
            *(float32x4_t *)((char *)v10 + v91) = v90;
            uint64_t v92 = v91 - 16;
            if (v91 == 16)
            {
              int32x4_t v93 = v10;
              goto LABEL_127;
            }
            float32x4_t v90 = *(float32x4_t *)((char *)v10 + v91 - 32);
            v91 -= 16;
          }
          while ((vmovn_s32(vcgtq_f32(v90, v89)).u8[0] & 1) != 0);
          int32x4_t v93 = (float32x4_t *)((char *)v10 + v92);
LABEL_127:
          *int32x4_t v93 = v89;
        }
        int64_t v84 = v88 + 1;
        v87 += 16;
      }
      while (&v88[1] != a2);
    }
  }
  else if (!v86)
  {
    do
    {
      float32x4_t v118 = *v9;
      float32x4_t v117 = v9[1];
      uint64_t v9 = v84;
      if (vmovn_s32(vcgtq_f32(v118, v117)).u8[0])
      {
        long long v119 = v84;
        do
        {
          *long long v119 = v118;
          float32x4_t v118 = v119[-2];
          --v119;
        }
        while ((vmovn_s32(vcgtq_f32(v118, v117)).u8[0] & 1) != 0);
        *long long v119 = v117;
      }
      ++v84;
    }
    while (&v9[1] != a2);
  }
  return result;
}

BOOL _ZNSt3__127__insertion_sort_incompleteB8nn180100INS_17_ClassicAlgPolicyERZN2re4ecs216SplineParametricC1ERKNS_6vectorIDv3_fNS_9allocatorIS6_EEEEE3__0PS6_EEbT1_SF_T0_(float32x4_t *a1, float32x4_t *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      float32x4_t v6 = a2[-1];
      float32x4_t v7 = *a1;
      if (vmovn_s32(vcgtq_f32(*a1, v6)).u8[0])
      {
        *a1 = v6;
        a2[-1] = v7;
      }
      return result;
    case 3:
      float32x4_t v8 = *a1;
      float32x4_t v9 = a1[1];
      float32x4_t v10 = a2[-1];
      unsigned __int8 v11 = vmovn_s32(vcgtq_f32(v9, v10)).u8[0];
      if (vmovn_s32(vcgtq_f32(*a1, v9)).u8[0])
      {
        if (v11)
        {
          *a1 = v10;
        }
        else
        {
          *a1 = v9;
          a1[1] = v8;
          float32x4_t v28 = a2[-1];
          if ((vmovn_s32(vcgtq_f32(v8, v28)).u8[0] & 1) == 0) {
            return result;
          }
          a1[1] = v28;
        }
        a2[-1] = v8;
      }
      else if (v11)
      {
        a1[1] = v10;
        a2[-1] = v9;
        float32x4_t v27 = *a1;
        float32x4_t v26 = a1[1];
        if (vmovn_s32(vcgtq_f32(*a1, v26)).u8[0])
        {
          *a1 = v26;
          a1[1] = v27;
        }
      }
      return result;
    case 4:
      _ZNSt3__17__sort4B8nn180100INS_17_ClassicAlgPolicyERZN2re4ecs216SplineParametricC1ERKNS_6vectorIDv3_fNS_9allocatorIS6_EEEEE3__0PS6_EEvT1_SF_SF_SF_T0_(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      unsigned __int8 v17 = a1 + 1;
      float32x4_t v18 = a1 + 2;
      float32x4_t v19 = a1 + 3;
      _ZNSt3__17__sort4B8nn180100INS_17_ClassicAlgPolicyERZN2re4ecs216SplineParametricC1ERKNS_6vectorIDv3_fNS_9allocatorIS6_EEEEE3__0PS6_EEvT1_SF_SF_SF_T0_(a1, a1 + 1, a1 + 2, a1 + 3);
      float32x4_t v20 = a2[-1];
      float32x4_t v21 = a1[3];
      if (vmovn_s32(vcgtq_f32(v21, v20)).u8[0])
      {
        *float32x4_t v19 = v20;
        a2[-1] = v21;
        float32x4_t v22 = *v19;
        float32x4_t v23 = *v18;
        if (vmovn_s32(vcgtq_f32(*v18, *v19)).u8[0])
        {
          *float32x4_t v18 = v22;
          *float32x4_t v19 = v23;
          float32x4_t v24 = *v17;
          if (vmovn_s32(vcgtq_f32(*v17, v22)).u8[0])
          {
            a1[1] = v22;
            a1[2] = v24;
            float32x4_t v25 = *a1;
            if (vmovn_s32(vcgtq_f32(*a1, v22)).u8[0])
            {
              *a1 = v22;
              a1[1] = v25;
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v12 = a1 + 2;
      float32x4_t v13 = a1[2];
      float32x4_t v14 = *a1;
      float32x4_t v15 = a1[1];
      unsigned __int8 v16 = vmovn_s32(vcgtq_f32(v15, v13)).u8[0];
      if (vmovn_s32(vcgtq_f32(*a1, v15)).u8[0])
      {
        if (v16)
        {
          *a1 = v13;
        }
        else
        {
          *a1 = v15;
          a1[1] = v14;
          if ((vmovn_s32(vcgtq_f32(v14, v13)).u8[0] & 1) == 0) {
            goto LABEL_28;
          }
          a1[1] = v13;
        }
        a1[2] = v14;
      }
      else if (v16)
      {
        a1[1] = v13;
        a1[2] = v15;
        if (vmovn_s32(vcgtq_f32(v14, v13)).u8[0])
        {
          *a1 = v13;
          a1[1] = v14;
        }
      }
LABEL_28:
      unsigned __int8 v29 = a1 + 3;
      if (&a1[3] == a2) {
        return 1;
      }
      int v30 = 0;
      uint64_t v31 = 48;
      break;
  }
  while (1)
  {
    float32x4_t v32 = *v29;
    float32x4_t v33 = *v12;
    if (vmovn_s32(vcgtq_f32(*v12, *v29)).u8[0])
    {
      uint64_t v34 = v31;
      while (1)
      {
        *(float32x4_t *)((char *)a1 + v34) = v33;
        uint64_t v35 = v34 - 16;
        if (v34 == 16) {
          break;
        }
        float32x4_t v33 = *(float32x4_t *)((char *)a1 + v34 - 32);
        v34 -= 16;
        if ((vmovn_s32(vcgtq_f32(v33, v32)).u8[0] & 1) == 0)
        {
          float32x4_t v36 = (float32x4_t *)((char *)a1 + v35);
          goto LABEL_36;
        }
      }
      float32x4_t v36 = a1;
LABEL_36:
      float32x4_t *v36 = v32;
      if (++v30 == 8) {
        return &v29[1] == a2;
      }
    }
    uint64_t v12 = v29;
    v31 += 16;
    if (++v29 == a2) {
      return 1;
    }
  }
}

float32x4_t *_ZNSt3__17__sort4B8nn180100INS_17_ClassicAlgPolicyERZN2re4ecs216SplineParametricC1ERKNS_6vectorIDv3_fNS_9allocatorIS6_EEEEE3__0PS6_EEvT1_SF_SF_SF_T0_(float32x4_t *result, float32x4_t *a2, float32x4_t *a3, float32x4_t *a4)
{
  float32x4_t v4 = *a2;
  float32x4_t v5 = *result;
  float32x4_t v6 = *a3;
  unsigned __int8 v7 = vmovn_s32(vcgtq_f32(*a2, *a3)).u8[0];
  if (vmovn_s32(vcgtq_f32(*result, *a2)).u8[0])
  {
    if (v7)
    {
      *BOOL result = v6;
    }
    else
    {
      *BOOL result = v4;
      *a2 = v5;
      if ((vmovn_s32(vcgtq_f32(v5, *a3)).u8[0] & 1) == 0)
      {
        float32x4_t v5 = *a3;
        goto LABEL_12;
      }
      *a2 = *a3;
    }
    *a3 = v5;
  }
  else if (v7)
  {
    *a2 = v6;
    *a3 = v4;
    float32x4_t v8 = *result;
    float32x4_t v5 = v4;
    if (vmovn_s32(vcgtq_f32(*result, *a2)).u8[0])
    {
      *BOOL result = *a2;
      *a2 = v8;
      float32x4_t v5 = *a3;
    }
  }
  else
  {
    float32x4_t v5 = *a3;
  }
LABEL_12:
  if (vmovn_s32(vcgtq_f32(v5, *a4)).u8[0])
  {
    *a3 = *a4;
    *a4 = v5;
    float32x4_t v9 = *a2;
    if (vmovn_s32(vcgtq_f32(*a2, *a3)).u8[0])
    {
      *a2 = *a3;
      *a3 = v9;
      float32x4_t v10 = *result;
      if (vmovn_s32(vcgtq_f32(*result, *a2)).u8[0])
      {
        *BOOL result = *a2;
        *a2 = v10;
      }
    }
  }
  return result;
}

void std::__shared_ptr_emplace<re::ecs2::PlacementAnimationCurveBundle>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E6FABF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<re::ecs2::PlacementAnimationCurveBundle>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E6FABF8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x237DBCBD0);
}

void std::__shared_ptr_emplace<re::ecs2::PlacementAnimationCurveBundle>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 24);
  std::vector<re::ecs2::DockingSpline>::__destroy_vector::operator()[abi:nn180100](&v1);
}

uint64_t *std::vector<re::ecs2::DockingSpline>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  if (v2 != *result)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = v4 + v5;
      uint64_t v7 = v2 + v5;
      *(void *)(v6 - 56) = 0;
      *(void *)(v6 - 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      *(void *)(v6 - 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(_OWORD *)(v6 - 56) = *(_OWORD *)(v2 + v5 - 56);
      *(void *)(v6 - 4ArcSharedObject::ArcSharedObject(this, 0) = *(void *)(v2 + v5 - 40);
      *(void *)(v7 - 56) = 0;
      *(void *)(v7 - 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      *(void *)(v7 - 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v6 - 32) = 0;
      *(void *)(v6 - 24) = 0;
      *(void *)(v6 - 16) = 0;
      *(_OWORD *)(v6 - 32) = *(_OWORD *)(v2 + v5 - 32);
      *(void *)(v6 - 16) = *(void *)(v2 + v5 - 16);
      *(void *)(v7 - 32) = 0;
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(_DWORD *)(v6 - re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = *(_DWORD *)(v2 + v5 - 8);
      v5 -= 56;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  uint64_t v8 = *result;
  *BOOL result = v4;
  a2[1] = v8;
  uint64_t v9 = result[1];
  result[1] = a2[2];
  a2[2] = v9;
  uint64_t v10 = result[2];
  result[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<re::ecs2::DockingSpline>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 56;
    std::allocator<re::ecs2::DockingSpline>::destroy[abi:nn180100](i - 56);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t *re::IntrospectionInfo<re::DynamicArray<re::ecs2::VideoMaterialAttachment>>::get(int a1)
{
  {
    re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&re::IntrospectionInfo<re::DynamicArray<re::ecs2::VideoMaterialAttachment>>::get(BOOL)::info);
    re::IntrospectionInfo<re::DynamicArray<re::ecs2::VideoMaterialAttachment>>::get(BOOL)::info = (uint64_t)&unk_26E6FAC48;
  }
  if (a1)
  {
    if (re::IntrospectionInfo<re::DynamicArray<re::ecs2::VideoMaterialAttachment>>::get(BOOL)::isInitialized) {
      return &re::IntrospectionInfo<re::DynamicArray<re::ecs2::VideoMaterialAttachment>>::get(BOOL)::info;
    }
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v14);
    int v2 = re::IntrospectionInfo<re::DynamicArray<re::ecs2::VideoMaterialAttachment>>::get(BOOL)::isInitialized;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v14);
    if (v2) {
      return &re::IntrospectionInfo<re::DynamicArray<re::ecs2::VideoMaterialAttachment>>::get(BOOL)::info;
    }
    uint64_t v4 = re::introspectionSharedMutex(v3);
    std::__shared_mutex_base::lock(v4);
  }
  uint64_t v5 = (re *)re::ecs2::introspect_VideoMaterialAttachment((re::IntrospectionBase **)1);
  if (re::IntrospectionInfo<re::DynamicArray<re::ecs2::VideoMaterialAttachment>>::get(BOOL)::isInitialized)
  {
    if ((a1 & 1) == 0)
    {
LABEL_9:
      uint64_t v6 = re::introspectionSharedMutex(v5);
      std::__shared_mutex_base::unlock(v6);
    }
  }
  else
  {
    uint64_t v8 = (uint64_t)v5;
    re::IntrospectionInfo<re::DynamicArray<re::ecs2::VideoMaterialAttachment>>::get(BOOL)::isInitialized = 1;
    int v9 = *((_DWORD *)v5 + 6);
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&re::IntrospectionInfo<re::DynamicArray<re::ecs2::VideoMaterialAttachment>>::get(BOOL)::info, 0);
    qword_268774A48 = 0x2800000003;
    dword_268774A50 = v9;
    word_268774A54 = 0;
    *(void *)&xmmword_268774A58 = 0;
    *((void *)&xmmword_268774A58 + 1) = 0xFFFFFFFFLL;
    qword_268774A68 = v8;
    unk_268774A70 = 0;
    re::IntrospectionInfo<re::DynamicArray<re::ecs2::VideoMaterialAttachment>>::get(BOOL)::info = (uint64_t)&unk_26E6FAC48;
    re::IntrospectionRegistry::add(v10, v11);
    re::getPrettyTypeName((re *)&re::IntrospectionInfo<re::DynamicArray<re::ecs2::VideoMaterialAttachment>>::get(BOOL)::info, (const re::IntrospectionBase *)&v14);
    if (BYTE8(v14)) {
      uint64_t v12 = v15;
    }
    else {
      uint64_t v12 = (char *)&v14 + 9;
    }
    if (void)v14 && (BYTE8(v14)) {
      (*(void (**)(void))(*(void *)v14 + 40))();
    }
    long long v14 = *(_OWORD *)(v8 + 32);
    xmmword_268774A58 = v13;
    re::StringID::destroyString((re::StringID *)v16);
    if ((a1 & 1) == 0) {
      goto LABEL_9;
    }
  }
  return &re::IntrospectionInfo<re::DynamicArray<re::ecs2::VideoMaterialAttachment>>::get(BOOL)::info;
}

void *re::ecs2::allocInfo_ImageBasedReflectionReceiverComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF85B18, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF85B18))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF85B30, "ImageBasedReflectionReceiverComponent");
    __cxa_guard_release(&qword_26AF85B18);
  }
  return &unk_26AF85B30;
}

void re::ecs2::initInfo_ImageBasedReflectionReceiverComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v12[0] = 0x25EE020AF0649916;
  v12[1] = "ImageBasedReflectionReceiverComponent";
  re::StringID::destroyString((re::StringID *)v12);
  *((_OWORD *)this + 2) = v13;
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_199, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&_MergedGlobals_199);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 4ArcSharedObject::ArcSharedObject(this, 0) = 3;
      *(void *)(v7 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF85B20 = v7;
      uint64_t v8 = re::introspectionAllocator((re *)v7);
      int v9 = re::IntrospectionInfo<re::DynamicArray<re::ecs2::VideoMaterialAttachment>>::get(1);
      uint64_t v10 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v10 = 1;
      *(void *)(v10 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "m_attachments";
      *(void *)(v10 + 16) = v9;
      *(void *)(v10 + 24) = 0;
      *(void *)(v10 + 32) = 0x2000000001;
      *(_DWORD *)(v10 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v10 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      *(void *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_26AF85B28 = v10;
      __cxa_guard_release(&_MergedGlobals_199);
    }
  }
  *((void *)this + 2) = 0x7000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((void *)this + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = &qword_26AF85B20;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::ImageBasedReflectionReceiverComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 1ArcSharedObject::ArcSharedObject(this, 0) = re::internal::defaultDestruct<re::ecs2::ImageBasedReflectionReceiverComponent>;
  *((void *)this + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::ImageBasedReflectionReceiverComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::ImageBasedReflectionReceiverComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v11 = v13;
}

double re::internal::defaultConstruct<re::ecs2::ImageBasedReflectionReceiverComponent>(int a1, int a2, ArcSharedObject *this)
{
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)(v3 + 16) = 0;
  *(unsigned char *)(v3 + 24) = 0;
  *(void *)uint64_t v3 = &unk_26E6F49A0;
  *(void *)(v3 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *(void *)(v3 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
  *(void *)(v3 + 32) = 0;
  *(_DWORD *)(v3 + 56) = 0;
  *(void *)(v3 + 104) = 0;
  double result = 0.0;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 8ArcSharedObject::ArcSharedObject(this, 0) = 0u;
  *(_DWORD *)(v3 + 96) = 0;
  return result;
}

uint64_t re::internal::defaultDestruct<re::ecs2::ImageBasedReflectionReceiverComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

double re::internal::defaultConstructV2<re::ecs2::ImageBasedReflectionReceiverComponent>(ArcSharedObject *a1)
{
  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 6) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *(_OWORD *)a1 = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(void *)(v1 + 16) = 0;
  *(unsigned char *)(v1 + 24) = 0;
  *(void *)uint64_t v1 = &unk_26E6F49A0;
  *(void *)(v1 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *(void *)(v1 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
  *(void *)(v1 + 32) = 0;
  *(_DWORD *)(v1 + 56) = 0;
  *(void *)(v1 + 104) = 0;
  double result = 0.0;
  *(_OWORD *)(v1 + 64) = 0u;
  *(_OWORD *)(v1 + 8ArcSharedObject::ArcSharedObject(this, 0) = 0u;
  *(_DWORD *)(v1 + 96) = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::ImageBasedReflectionReceiverComponent>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_ImageBasedReflectionReceiverComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ImageBasedReflectionReceiverComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_ImageBasedReflectionReceiverComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_ImageBasedReflectionReceiverComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::ImageBasedReflectionReceiverComponent>, this);
}

re::StringID *re::DynamicArray<re::ecs2::VideoMaterialAttachment>::add(_anonymous_namespace_ *this, StringID *a2)
{
  unint64_t v4 = *((void *)this + 2);
  if (v4 >= *((void *)this + 1))
  {
    re::DynamicArray<re::RigGraphNodeDescription>::growCapacity(this, v4 + 1);
    unint64_t v4 = *((void *)this + 2);
  }
  uint64_t v5 = re::StringID::StringID((re::StringID *)(*((void *)this + 4) + 32 * v4), a2);
  double result = re::StringID::StringID((re::StringID *)((char *)v5 + 16), a2 + 1);
  ++*((void *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

BOOL re::DynamicArray<re::ecs2::VideoMaterialAttachment>::remove(uint64_t a1, void *a2)
{
  re::DynamicArray<re::ecs2::VideoMaterialAttachment>::indexOf(a1, a2, (uint64_t)v5);
  int v3 = v5[0];
  if (v5[0]) {
    re::DynamicArray<re::ecs2::VideoMaterialAttachment>::removeAt(a1, v6);
  }
  return v3 != 0;
}

BOOL re::ecs2::ImageBasedReflectionReceiverComponent::receivesSpecularLightSpill(re::ecs2::ImageBasedReflectionReceiverComponent *this)
{
  uint64_t v1 = *((void *)this + 6);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = 32 * v1 - 32;
  int v3 = (const char **)(*((void *)this + 8) + 8);
  do
  {
    unint64_t v4 = *v3;
    v3 += 4;
    int v5 = strcmp(v4, "REVideoAttachmentSpillSpecular");
    BOOL result = v5 == 0;
    if (v5) {
      BOOL v7 = v2 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    v2 -= 32;
  }
  while (!v7);
  return result;
}

uint64_t re::ecs2::ImageBasedReflectionReceiverComponent::receivesDiffuseLightSpill(re::ecs2::ImageBasedReflectionReceiverComponent *this)
{
  uint64_t v1 = *((void *)this + 6);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = (const char **)(*((void *)this + 8) + 8);
  uint64_t v3 = 32 * v1;
  while (1)
  {
    unint64_t v4 = *v2;
    if (!strcmp(*v2, "REVideoAttachmentSpill") || !strcmp(v4, "REVideoAttachmentChannelID1TextureSpill")) {
      break;
    }
    v2 += 4;
    v3 -= 32;
    if (!v3) {
      return 0;
    }
  }
  return 1;
}

void re::ecs2::ImageBasedReflectionReceiverComponent::removeParamsFromSystemParameterBlock(re::ecs2::ImageBasedReflectionReceiverComponent *this, re::MaterialManager *a2, char a3)
{
  uint64_t v6 = *(void *)(*((void *)this + 2) + 296);
  SystemMaterialParameterBlock = re::MaterialManager::getSystemMaterialParameterBlock(a2, v6);
  if (SystemMaterialParameterBlock)
  {
    uint64_t v8 = (re::MaterialParameterBlock *)SystemMaterialParameterBlock;
    uint64_t v9 = *((void *)this + 6);
    if (v9)
    {
      uint64_t v10 = *((void *)this + 8);
      uint64_t v11 = 32 * v9;
      do
      {
        re::MaterialParameterBlock::removeParameter(v8, *(const char **)(v10 + 24));
        re::ecs2::VideoComponent::removeVideoAttachmentFromParameterBlock((char **)v10, v8, v12);
        v10 += 32;
        v11 -= 32;
      }
      while (v11);
    }
    long long v13 = (char *)this + 72;
    uint64_t v14 = *((void *)this + 11);
    if (v14)
    {
      uint64_t v15 = *((void *)this + 13);
      uint64_t v16 = 32 * v14;
      do
      {
        re::MaterialParameterBlock::removeParameter(v8, *(const char **)(v15 + 24));
        re::ecs2::VideoComponent::removeVideoAttachmentFromParameterBlock((char **)v15, v8, v17);
        v15 += 32;
        v16 -= 32;
      }
      while (v16);
    }
    re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::clear((uint64_t)v13);
    if ((a3 & 1) != 0 && re::MaterialParameterBlock::isEmpty(v8))
    {
      re::MaterialManager::removeSystemMaterialParameterBlock(a2, v6);
    }
  }
}

void re::ecs2::ImageBasedReflectionReceiverComponent::applyAttachments(uint64_t *a1, re::RenderManager **this, re::TextureHandle *a3, int a4, int a5, int a6, _OWORD *a7, int a8, float a9, float a10, float a11, float a12, int32x2_t a13, int32x2_t a14, long long a15)
{
  uint64_t v24 = re::MaterialManager::getOrAddSystemMaterialParameterBlock(this, *(void *)(a1[2] + 296));
  uint64_t v25 = a1[6];
  if (v25)
  {
    float32x4_t v26 = (re::MaterialParameterBlock *)v24;
    uint64_t v27 = 32 * v25;
    uint64_t v28 = a1[8];
    int32x4_t v49 = vdupq_lane_s32(a13, 0);
    int32x4_t v51 = vdupq_lane_s32(a14, 0);
    do
    {
      unint64_t v29 = *(void *)v28 >> 1;
      if (v29 > 0x6ACE73CDBA36B78DLL)
      {
        if (*(void *)v28 >> 1 > 0x757106E73545B3A8uLL)
        {
          if (v29 == 0x757106E73545B3A9)
          {
            float32x4_t v46 = *(char **)(v28 + 8);
            if (v46 == "REVideoAttachmentContentPlaneHeightWorldspace"
              || !strcmp(v46, "REVideoAttachmentContentPlaneHeightWorldspace"))
            {
              uint64_t v47 = *(void *)(v28 + 16) >> 1;
              *(float *)&uint64_t v61 = a10;
              *(void *)&v62[0] = v47;
              re::MaterialParameterBlock::setConstant(v26, (uint64_t *)v62, 4uLL, &v61, 1, (uint64_t)v57);
              v57[0] = 0;
              goto LABEL_38;
            }
LABEL_37:
            re::ecs2::VideoComponent::applyVideoAttachmentToParameterBlock(a1[2], (char **)v28, a3, v26, a4, a5);
            goto LABEL_38;
          }
          if (v29 != 0x79D6ECFADD603431) {
            goto LABEL_37;
          }
          float32x4_t v36 = *(const char **)(v28 + 8);
          if (v36 != "REVideoAttachmentAverageColor")
          {
            if (strcmp(v36, "REVideoAttachmentAverageColor")) {
              goto LABEL_37;
            }
          }
          uint64_t v37 = *(void *)(v28 + 16) >> 1;
          v62[0] = a15;
          uint64_t v61 = v37;
          re::MaterialParameterBlock::setConstant(v26, &v61, 0x10uLL, v62, 33, (uint64_t)v54);
          v54[0] = 0;
        }
        else if (v29 == 0x6ACE73CDBA36B78ELL)
        {
          float32x4_t v42 = *(char **)(v28 + 8);
          if (v42 != "REVideoAttachmentDockingRegionWidth" && strcmp(v42, "REVideoAttachmentDockingRegionWidth")) {
            goto LABEL_37;
          }
          uint64_t v43 = *(void *)(v28 + 16) >> 1;
          v62[0] = v51;
          uint64_t v61 = v43;
          re::MaterialParameterBlock::setConstant(v26, &v61, 0x10uLL, v62, 33, (uint64_t)v52);
          v52[0] = 0;
        }
        else
        {
          if (v29 != 0x6F0005E972D1405FLL) {
            goto LABEL_37;
          }
          float32x4_t v32 = *(const char **)(v28 + 8);
          if (v32 != "REVideoAttachmentDockingRegionHeight")
          {
            if (strcmp(v32, "REVideoAttachmentDockingRegionHeight")) {
              goto LABEL_37;
            }
          }
          uint64_t v33 = *(void *)(v28 + 16) >> 1;
          v62[0] = v49;
          uint64_t v61 = v33;
          re::MaterialParameterBlock::setConstant(v26, &v61, 0x10uLL, v62, 33, (uint64_t)v53);
          v53[0] = 0;
        }
      }
      else if (*(void *)v28 >> 1 > 0x47340200864FAC3DuLL)
      {
        if (v29 == 0x47340200864FAC3ELL)
        {
          float32x4_t v44 = *(char **)(v28 + 8);
          if (v44 != "REVideoAttachmentTransitionAlpha" && strcmp(v44, "REVideoAttachmentTransitionAlpha")) {
            goto LABEL_37;
          }
          uint64_t v45 = *(void *)(v28 + 16) >> 1;
          *(float *)&uint64_t v61 = a12;
          *(void *)&v62[0] = v45;
          re::MaterialParameterBlock::setConstant(v26, (uint64_t *)v62, 4uLL, &v61, 1, (uint64_t)v55);
          v55[0] = 0;
        }
        else
        {
          if (v29 != 0x514FAA62239F3AECLL) {
            goto LABEL_37;
          }
          uint64_t v34 = *(const char **)(v28 + 8);
          if (v34 != "REVideoAttachmentContentPlaneWidthWorldspace")
          {
            if (strcmp(v34, "REVideoAttachmentContentPlaneWidthWorldspace")) {
              goto LABEL_37;
            }
          }
          uint64_t v35 = *(void *)(v28 + 16) >> 1;
          *(float *)&uint64_t v61 = a9;
          *(void *)&v62[0] = v35;
          re::MaterialParameterBlock::setConstant(v26, (uint64_t *)v62, 4uLL, &v61, 1, (uint64_t)v58);
          v58[0] = 0;
        }
      }
      else if (v29 == 0x30E43710AE043515)
      {
        unsigned __int8 v38 = *(char **)(v28 + 8);
        if (v38 != "REVideoAttachmentWorldToPlaneUVsTransformMatrix"
          && strcmp(v38, "REVideoAttachmentWorldToPlaneUVsTransformMatrix"))
        {
          goto LABEL_37;
        }
        uint64_t v39 = *(void *)(v28 + 16) >> 1;
        long long v40 = a7[1];
        v59[0] = *a7;
        v59[1] = v40;
        long long v41 = a7[3];
        void v59[2] = a7[2];
        v59[3] = v41;
        *(void *)&v62[0] = v39;
        re::MaterialParameterBlock::setConstant(v26, (uint64_t *)v62, 0x40uLL, v59, 50, (uint64_t)v60);
        v60[0] = 0;
      }
      else
      {
        if (v29 != 0x42D70E5EED7878EBLL) {
          goto LABEL_37;
        }
        int v30 = *(const char **)(v28 + 8);
        if (v30 != "REVideoAttachmentContentBrightnessScale")
        {
          if (strcmp(v30, "REVideoAttachmentContentBrightnessScale")) {
            goto LABEL_37;
          }
        }
        uint64_t v31 = *(void *)(v28 + 16) >> 1;
        *(float *)&uint64_t v61 = a11;
        *(void *)&v62[0] = v31;
        re::MaterialParameterBlock::setConstant(v26, (uint64_t *)v62, 4uLL, &v61, 1, (uint64_t)v56);
        v56[0] = 0;
      }
LABEL_38:
      v28 += 32;
      v27 -= 32;
    }
    while (v27);
  }
}

void re::TypeBuilderHelper::registerDynamicArray<re::ecs2::VideoMaterialAttachment>(re::TypeRegistry *a1@<X0>, uint64_t *a2@<X1>, long long *a3@<X2>, re::TypeRegistry **a4@<X8>)
{
  uint64_t v8 = (_anonymous_namespace_ *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)a1 + 200, a2);
  if (a1 && v8)
  {
    uint64_t v9 = *(re::TypeRegistry **)v8;
    *a4 = a1;
    a4[1] = v9;
  }
  else
  {
    long long v11 = *a3;
    re::TypeBuilder::beginListType((uint64_t)v12, a2, 1, 0x28uLL, 8uLL, &v11);
    re::TypeBuilder::setConstructor((uint64_t)v12, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::VideoMaterialAttachment>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
    re::TypeBuilder::setDestructor((uint64_t)v12, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::VideoMaterialAttachment>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
    re::TypeBuilder::setListUsesContiguousStorage((uint64_t)v12, 1);
    re::TypeBuilder::setListAccessors((uint64_t)v12, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::VideoMaterialAttachment>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::VideoMaterialAttachment>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
    re::TypeBuilder::setListIndexer((uint64_t)v12, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::VideoMaterialAttachment>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
    re::TypeBuilder::setListIterator((uint64_t)v12, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::VideoMaterialAttachment>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::VideoMaterialAttachment>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::VideoMaterialAttachment>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
    re::TypeBuilder::commitTo((re::TypeBuilder *)v12, a1, a4);
    re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v12, v10);
  }
}

void *re::IntrospectionDynamicArray<re::ecs2::VideoMaterialAttachment>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::ecs2::VideoMaterialAttachment>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionDynamicArray<re::ecs2::VideoMaterialAttachment>::construct(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::VideoMaterialAttachment>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::deinit(a2);
}

void *re::IntrospectionDynamicArray<re::ecs2::VideoMaterialAttachment>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::deinit(a2);
  *(void *)a2 = a3;
  BOOL result = re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::setCapacity((void *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::ecs2::VideoMaterialAttachment>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (!*(void *)a4)
  {
    *(void *)a4 = a2;
    re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::setCapacity((void *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  unint64_t v10 = *(void *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
    {
      re::DynamicArray<re::ecs2::VideoMaterialAttachment>::resize(a4, a5);
    }
  }
  else
  {
    re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::setCapacity((void *)a4, a5);
    for (unint64_t i = a5 - *(void *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::ecs2::VideoMaterialAttachment>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *this)
{
  v10[0] = 0;
  v10[1] = (uint64_t)"";
  v11[0] = 0;
  v11[1] = "";
  re::DynamicArray<re::RigGraphNodeDescription>::add(this, v10);
  re::StringID::destroyString((re::StringID *)v11);
  re::StringID::destroyString((re::StringID *)v10);
  uint64_t v8 = (re::IntrospectionBase *)(*((void *)this + 4) + 32 * *((void *)this + 2) - 32);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v8);
  return v8;
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::VideoMaterialAttachment>::size(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::VideoMaterialAttachment>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 32 * a3;
}

{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 32 * a3;
}

void re::DynamicArray<re::ecs2::VideoMaterialAttachment>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 16);
  if (v4 >= a2)
  {
    if (v4 <= a2) {
      return;
    }
    uint64_t v8 = 32 * a2;
    unint64_t v9 = a2;
    do
    {
      uint64_t v10 = *(void *)(a1 + 32) + v8;
      re::StringID::destroyString((re::StringID *)(v10 + 16));
      re::StringID::destroyString((re::StringID *)v10);
      ++v9;
      v8 += 32;
    }
    while (v9 < *(void *)(a1 + 16));
  }
  else
  {
    if (*(void *)(a1 + 8) < a2)
    {
      re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::setCapacity((void *)a1, a2);
      unint64_t v4 = *(void *)(a1 + 16);
    }
    unint64_t v5 = a2 - v4;
    if (a2 > v4)
    {
      uint64_t v6 = 32 * v4;
      do
      {
        BOOL v7 = (void *)(*(void *)(a1 + 32) + v6);
        *BOOL v7 = 0;
        v7[1] = "";
        _OWORD v7[2] = 0;
        v7[3] = "";
        v6 += 32;
        --v5;
      }
      while (v5);
    }
  }
  *(void *)(a1 + 16) = a2;
  ++*(_DWORD *)(a1 + 24);
}

void *re::TypeBuilderHelper::registerDynamicArray<re::ecs2::VideoMaterialAttachment>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)a1 = a3;
  BOOL result = re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::setCapacity((void *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::VideoMaterialAttachment>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::ecs2::VideoMaterialAttachment>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  re::TypeBuilderHelper::registerDynamicArray<re::ecs2::VideoMaterialAttachment>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::operator()((uint64_t)&v4, a1, a2, a3, a4);
}

void re::TypeBuilderHelper::registerDynamicArray<re::ecs2::VideoMaterialAttachment>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::operator()(uint64_t a1, uint64_t a2, uint64_t a3, re::Allocator *a4, unint64_t a5)
{
  if (*(re::Allocator **)a2 == a4)
  {
    re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::clear(a2);
  }
  else
  {
    re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::deinit(a2);
    *(void *)a2 = a4;
    re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::setCapacity((void *)a2, a5);
    ++*(_DWORD *)(a2 + 24);
  }
  re::DynamicArray<re::ecs2::VideoMaterialAttachment>::resize(a2, a5);
  {
    re::TypeRegistry::typeInfo(*(void **)a3, *(void *)(*(void *)(a3 + 16) + 72), v14);
    re::TypeInfo::TypeInfo((uint64_t)v13, (uint64_t)&v15);
    uint64_t v10 = *(void *)(a2 + 16);
    if (v10)
    {
      long long v11 = *(char **)(a2 + 32);
      uint64_t v12 = 32 * v10;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v13, v11, a4, 0);
        re::TypeInfo::construct((re::TypeInfo *)v13, (void **)v11, a4, 0);
        v11 += 32;
        v12 -= 32;
      }
      while (v12);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::VideoMaterialAttachment>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 32) + 32 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::VideoMaterialAttachment>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::VideoMaterialAttachment>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 24))
  {
    int v3 = a1[3];
    unint64_t v4 = *(void *)(v2 + 16);
    if (v3 < (int)v4) {
      a1[3] = ++v3;
    }
    if (v4 <= v3) {
      return 0;
    }
    else {
      return *(void *)(v2 + 32) + 32 * v3;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::VideoMaterialAttachment>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, result);
  }
  return result;
}

uint64_t re::DynamicArray<re::ecs2::VideoMaterialAttachment>::indexOf@<X0>(uint64_t result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *(void *)(result + 32);
  uint64_t v5 = *(void *)(result + 16);
  if (v5)
  {
    BOOL v7 = a2 + 2;
    uint64_t v8 = 32 * v5;
    unint64_t v9 = *(void **)(result + 32);
    while (1)
    {
      uint64_t result = re::StringID::operator==(v9, a2);
      if (result)
      {
        uint64_t result = re::StringID::operator==(v9 + 2, v7);
        if (result) {
          break;
        }
      }
      v9 += 4;
      v8 -= 32;
      if (!v8)
      {
        unint64_t v9 = (void *)(v4 + 32 * v5);
        break;
      }
    }
  }
  else
  {
    unint64_t v9 = *(void **)(result + 32);
  }
  uint64_t v10 = ((uint64_t)v9 - v4) >> 5;
  if (v10 == v5)
  {
    char v11 = 0;
  }
  else
  {
    *(void *)(a3 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v10;
    char v11 = 1;
  }
  *(unsigned char *)a3 = v11;
  return result;
}

void re::DynamicArray<re::ecs2::VideoMaterialAttachment>::removeAt(uint64_t a1, unint64_t a2)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 <= a2)
  {
    memset(v17, 0, sizeof(v17));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (v2 - 1 > a2)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = v4 + 32 * v2;
    uint64_t v6 = (void *)(v4 + 32 * a2);
    uint64_t v7 = *(void *)(v5 - 32);
    uint64_t v8 = *(void *)(v5 - 24);
    *(void *)(v5 - 32) = 0;
    *(void *)(v5 - 24) = "";
    uint64_t v9 = v6[1];
    unint64_t v10 = v7 & 0xFFFFFFFFFFFFFFFELL | *v6 & 1;
    v6[1] = v8;
    *(void *)&v17[0] = v10;
    *((void *)&v17[0] + 1) = v9;
    *uint64_t v6 = v7;
    re::StringID::destroyString((re::StringID *)v17);
    uint64_t v11 = *(void *)(v5 - 16);
    uint64_t v12 = *(void *)(v5 - 8);
    *(void *)(v5 - 16) = 0;
    *(void *)(v5 - re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "";
    uint64_t v13 = v6[3];
    unint64_t v14 = v11 & 0xFFFFFFFFFFFFFFFELL | v6[2] & 1;
    v6[3] = v12;
    *(void *)&v17[0] = v14;
    *((void *)&v17[0] + 1) = v13;
    void v6[2] = v11;
    re::StringID::destroyString((re::StringID *)v17);
    unint64_t v2 = *(void *)(a1 + 16);
  }
  uint64_t v15 = *(void *)(a1 + 32) + 32 * v2;
  uint64_t v16 = (re::StringID *)(v15 - 32);
  re::StringID::destroyString((re::StringID *)(v15 - 16));
  re::StringID::destroyString(v16);
  --*(void *)(a1 + 16);
  ++*(_DWORD *)(a1 + 24);
}

float re::UnlitMaterial::commitConstantChanges(re::UnlitMaterial *this, re::RenderManager *a2)
{
  uint64_t v4 = re::UnlitMaterial::addRenderFrameParameterDelta(this, a2);
  if (v4)
  {
    uint64_t v6 = v4;
    if (a2 && (uint64_t v7 = (unsigned __int8 *)*((void *)a2 + 19)) != 0) {
      unsigned int v8 = *v7;
    }
    else {
      unsigned int v8 = 0;
    }
    *(unsigned char *)(v4 + 16) = 1;
    re::ColorGamut4F::as((uint64_t)this + 24, v8, 1, (uint64_t)&v9);
    *(_OWORD *)(v6 + 32) = v9;
    float result = *((float *)this + 11);
    *(float *)(v6 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = result;
  }
  return result;
}

uint64_t re::UnlitMaterial::addRenderFrameParameterDelta(re::UnlitMaterial *this, re::RenderManager *a2)
{
  int v3 = (re::DrawingManager *)*((void *)a2 + 13);
  if (v3
    && (re::DrawingManager::checkDeltasCanBeEnqueuedOrDropDelta_115383182<re::PbrParameterDelta>(v3, *((void *)this + 16)) & 1) != 0)
  {
    uint64_t v5 = *((void *)a2 + 17);
    uint64_t v6 = *(void *)(v5 + 40);
    uint64_t v7 = *(void *)(v5 + 48);
    uint64_t v8 = v7 & 0xFFFFFFFFFFFFFFFLL;
    uint64_t v9 = *((void *)this + 15) & 0xFFFFFFFFFFFFFFFLL;
    if (v9 == 0xFFFFFFFFFFFFFFFLL)
    {
      if (v8 == 0xFFFFFFFFFFFFFFFLL) {
        return *((void *)this + 16);
      }
    }
    else if (v8 != 0xFFFFFFFFFFFFFFFLL && v9 == v8)
    {
      return *((void *)this + 16);
    }
    *((void *)this + re::HashTable<re::ecs2::Scene *,re::DynamicArray<RESubscriptionHandle>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 15) = v7 & 0xFFFFFFFFFFFFFFFLL | ((unint64_t)v6 << 60);
    re::UnlitMaterial::parameterTable(this, a2, &v13);
    *((void *)this + 16) = re::DrawingManager::addRenderFrameDeltaForNextFrame<re::UnlitParameterDelta,re::UnlitParameterTable>((uint64_t)v3, &v13);
    if (v13) {

    }
    return *((void *)this + 16);
  }
  *((void *)this + 16) = 0;
  uint64_t v10 = *((void *)this + 13);
  if (!v10) {
    return 0;
  }

  uint64_t result = 0;
  *((void *)this + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 13) = 0;
  return result;
}

void re::UnlitMaterial::parameterTable(re::UnlitMaterial *this@<X0>, const re::RenderManager *a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = *((void *)this + 13);
  if (v4)
  {
    *a3 = v4;
LABEL_10:
    id v9 = (id)(v4 + 8);
    return;
  }
  if (a2 && (uint64_t v6 = (unsigned __int8 *)*((void *)a2 + 19)) != 0) {
    unsigned int v7 = *v6;
  }
  else {
    unsigned int v7 = 0;
  }
  re::make::shared::object<re::UnlitParameterTable>(this, v11);
  uint64_t v8 = *((void *)this + 13);
  *((void *)this + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 13) = v11[0];
  v11[0] = v8;
  if (v8) {

  }
  re::ColorGamut4F::as((uint64_t)this + 24, v7, 1, (uint64_t)v11);
  *(_OWORD *)(*((void *)this + 13) + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = *(_OWORD *)v11;
  *(_DWORD *)(*((void *)this + 13) + 64) = *((_DWORD *)this + 11);
  re::PbrMaterial::makeTextureHandle((re::UnlitMaterial *)((char *)this + 48), (re::TextureHandle *)v10);
  v11[0] = (uint64_t)&unk_26E6FAD20;
  re::TextureHandle::TextureHandle((re::TextureHandle *)&v11[1], (const re::TextureHandle *)v10);
  re::TextureHandle::operator=((re::TextureHandle *)(*((void *)this + 13) + 104), (re::TextureHandle *)&v11[1]);
  v11[0] = (uint64_t)&unk_26E6FAD20;
  re::TextureHandle::invalidate((re::TextureHandle *)&v11[1]);
  re::TextureHandle::invalidate((re::TextureHandle *)v10);
  *((void *)this + 14) = 0xFFFFFFFFFFFFFFFLL;
  uint64_t v4 = *((void *)this + 13);
  *a3 = v4;
  if (v4) {
    goto LABEL_10;
  }
}

uint64_t re::DrawingManager::addRenderFrameDeltaForNextFrame<re::UnlitParameterDelta,re::UnlitParameterTable>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = re::globalAllocators((re *)a1);
  uint64_t v5 = re::PerFrameAllocatorManager::perFrameAllocator(v4[6], *(void *)(*(void *)(*(void *)(a1 + 256) + 136) + 48) & 0xFFFFFFFFFFFFFFFLL | ((unint64_t)*(void *)(*(void *)(*(void *)(a1 + 256) + 136) + 40) << 60));
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 80, 16);
  *(_OWORD *)uint64_t v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)(v6 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(void *)uint64_t v6 = &unk_26E6E2CE0;
  objc_initWeak((id *)(v6 + 8), 0);
  *(void *)uint64_t v6 = &unk_26E6FACE0;
  __asm { FMOV            V0.4S, #1.0 }
  *(_OWORD *)(v6 + 32) = _Q0;
  *(_DWORD *)(v6 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 1065353216;
  *(void *)(v6 + 64) = 0;
  *(void *)(v6 + 72) = 0;
  uint64_t v12 = *a2;
  *(_WORD *)(v6 + 16) = 0;
  if (v12) {
    uint64_t v13 = (void *)(v12 + 8);
  }
  else {
    uint64_t v13 = 0;
  }
  objc_storeWeak((id *)(v6 + 8), v13);
  if (!*(void *)(a1 + 624))
  {
    *(void *)(a1 + 624) = v5;
    re::DynamicOverflowArray<re::RenderFrameDelta *,8ul>::setCapacity((void *)(a1 + 624), 0);
    *(_DWORD *)(a1 + 640) += 2;
  }
  uint64_t v15 = v6;
  re::DynamicOverflowArray<re::RenderFrameDelta *,8ul>::add(a1 + 624, &v15);
  return v6;
}

uint64_t re::UnlitParameterDelta::init(uint64_t result)
{
  *(_WORD *)(result + 16) = 0;
  return result;
}

void re::UnlitParameterDelta::applyDeltaChange(id *this)
{
  id WeakRetained = (char *)objc_loadWeakRetained(this + 1);
  if (WeakRetained)
  {
    int v3 = WeakRetained;
    if (*((unsigned char *)this + 16))
    {
      *((_DWORD *)WeakRetained + 1re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 3;
      long long v4 = *((_OWORD *)this + 2);
      *((_DWORD *)WeakRetained + 14) = *((_DWORD *)this + 12);
      *(_OWORD *)(WeakRetained + 4ArcSharedObject::ArcSharedObject(this, 0) = v4;
    }
    if (*((unsigned char *)this + 17))
    {
      re::TextureHandle::TextureHandle((re::TextureHandle *)v5, (const re::TextureHandle *)(this + 8));
      re::TextureHandle::operator=((re::TextureHandle *)(v3 + 96), (re::TextureHandle *)v5);
      re::TextureHandle::invalidate((re::TextureHandle *)v5);
    }
  }
}

uint64_t re::UnlitTextureSource::lookup@<X0>(uint64_t this@<X0>, const re::WeakStringID *a2@<X1>, uint64_t a3@<X8>)
{
  if (*(void *)a2 == 0x34EAA28FD9A1AC37 && *(void *)(this + 16) && *(void *)(this + 8))
  {
    *(unsigned char *)a3 = 1;
    *(_WORD *)(a3 + 1) = 0;
  }
  else
  {
    *(unsigned char *)a3 = 0;
  }
  return this;
}

uint64_t re::UnlitTextureSource::layoutHash(re::UnlitTextureSource *this)
{
  uint64_t v1 = *((void *)this + 2);
  if (v1)
  {
    if (*((void *)this + 1)) {
      LODWORD(v1) = 73244475;
    }
    else {
      LODWORD(v1) = 0;
    }
  }
  return (73244475 * (v1 ^ WORD1(v1))) ^ ((73244475 * (v1 ^ WORD1(v1))) >> 16);
}

uint64_t re::UnlitTextureSource::size(re::UnlitTextureSource *this)
{
  return 1;
}

void re::UnlitTextureSource::textureAt(re::UnlitTextureSource *this@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (!a2 && *((void *)this + 2) && (uint64_t v4 = *((void *)this + 1), v3 = (os_unfair_lock_s **)((char *)this + 8), v4)) {
    re::TextureHandle::metalTexture(v3, a3);
  }
  else {
    *a3 = 0;
  }
}

__n128 re::make::shared::object<re::UnlitParameterTable>@<Q0>(re *a1@<X0>, uint64_t *a2@<X8>)
{
  int v3 = re::globalAllocators(a1);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3[2] + 32))(v3[2], 128, 16);
  *(_OWORD *)uint64_t v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 8ArcSharedObject::ArcSharedObject(this, 0) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v4, 0);
  *(void *)uint64_t v4 = &unk_26E6FAD78;
  *(void *)(v4 + 32) = &unk_26E6FADC0;
  __asm { FMOV            V0.4S, #1.0 }
  *(__n128 *)(v4 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = result;
  *(_DWORD *)(v4 + 64) = 1065353216;
  *(_DWORD *)(v4 + 8ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *(void *)(v4 + 96) = &unk_26E6FAD20;
  *(void *)(v4 + 104) = 0;
  *(void *)(v4 + 112) = 0;
  *a2 = v4;
  return result;
}

void re::UnlitParameterTable::~UnlitParameterTable(re::UnlitParameterTable *this)
{
  *(void *)this = &unk_26E6FAD78;
  *((void *)this + 12) = &unk_26E6FAD20;
  re::TextureHandle::invalidate((re::UnlitParameterTable *)((char *)this + 104));
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E6FAD78;
  *((void *)this + 12) = &unk_26E6FAD20;
  re::TextureHandle::invalidate((re::UnlitParameterTable *)((char *)this + 104));
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

void *re::UnlitConstantSource::lookup(re::UnlitConstantSource *this, const re::WeakStringID *a2)
{
  if (*(void *)a2 != 0x1F383C7C217AE8A0)
  {
    if (*(void *)a2 == 0x4FA976128CFELL && (*((unsigned char *)this + 48) & 1) != 0) {
      return &re::UnlitConstantSource::s_locations;
    }
    return 0;
  }
  if ((*((unsigned char *)this + 48) & 2) == 0) {
    return 0;
  }
  return &unk_26877590C;
}

uint64_t re::UnlitConstantSource::layoutHash(re::UnlitConstantSource *this)
{
  unsigned int v1 = 73244475 * (*((_DWORD *)this + 12) ^ HIWORD(*((_DWORD *)this + 12)));
  return (73244475 * (v1 ^ HIWORD(v1))) ^ ((73244475 * (v1 ^ HIWORD(v1))) >> 16);
}

uint64_t re::UnlitConstantSource::data(re::UnlitConstantSource *this)
{
  return (uint64_t)this + 16;
}

void *re::ecs2::allocInfo_GroundPlaneComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_200, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_200))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF85BC8, "GroundPlaneComponent");
    __cxa_guard_release(&_MergedGlobals_200);
  }
  return &unk_26AF85BC8;
}

void re::ecs2::initInfo_GroundPlaneComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v13[0] = 0x1AAD283225AD710;
  v13[1] = "GroundPlaneComponent";
  re::StringID::destroyString((re::StringID *)v13);
  *((_OWORD *)this + 2) = v14;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF85BB0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF85BB0);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 4ArcSharedObject::ArcSharedObject(this, 0) = 3;
      *(void *)(v7 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF85BB8 = v7;
      uint64_t v8 = re::introspectionAllocator((re *)v7);
      uint64_t v10 = re::introspect_BOOL((re *)1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "isSceneUnderstandingMeshPhysicsFallback";
      *(void *)(v11 + 16) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x1900000001;
      *(_DWORD *)(v11 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v11 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      *(void *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF85BC0 = v11;
      __cxa_guard_release(&qword_26AF85BB0);
    }
  }
  *((void *)this + 2) = 0x2000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((void *)this + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = &qword_26AF85BB8;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::GroundPlaneComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 1ArcSharedObject::ArcSharedObject(this, 0) = re::internal::defaultDestruct<re::ecs2::GroundPlaneComponent>;
  *((void *)this + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::GroundPlaneComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::GroundPlaneComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v12 = v14;
}

void re::internal::defaultConstruct<re::ecs2::GroundPlaneComponent>(int a1, int a2, ArcSharedObject *this)
{
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)(v3 + 16) = 0;
  *(_WORD *)(v3 + 24) = 0;
  *(void *)uint64_t v3 = &unk_26E6E0828;
}

uint64_t re::internal::defaultDestruct<re::ecs2::GroundPlaneComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

void re::internal::defaultConstructV2<re::ecs2::GroundPlaneComponent>(ArcSharedObject *a1)
{
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(void *)(v1 + 16) = 0;
  *(_WORD *)(v1 + 24) = 0;
  *(void *)uint64_t v1 = &unk_26E6E0828;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::GroundPlaneComponent>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_GroundPlaneComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"GroundPlaneComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_GroundPlaneComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_GroundPlaneComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::GroundPlaneComponent>, this);
}

void re::introspect_LoadTraceType(re *this, const re::IntrospectionBase *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF85C48, memory_order_acquire) & 1) == 0)
  {
    uint64_t v24 = (re *)__cxa_guard_acquire(&qword_26AF85C48);
    if (v24)
    {
      uint64_t v25 = re::introspectionAllocator(v24);
      float32x4_t v26 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v25 + 32))(v25, 24, 8);
      *(_DWORD *)float32x4_t v26 = 1;
      *((void *)v26 + 1) = 0;
      *((void *)v26 + 2) = "Unknown";
      qword_26AF85C68 = (uint64_t)v26;
      uint64_t v27 = re::introspectionAllocator(v26);
      uint64_t v28 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v27 + 32))(v27, 24, 8);
      *(_DWORD *)uint64_t v28 = 1;
      *((void *)v28 + 1) = 1;
      *((void *)v28 + 2) = "Synchronous";
      qword_26AF85C70 = (uint64_t)v28;
      unint64_t v29 = re::introspectionAllocator(v28);
      uint64_t v30 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v29 + 32))(v29, 24, 8);
      *(_DWORD *)uint64_t v30 = 1;
      *(void *)(v30 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 2;
      *(void *)(v30 + 16) = "Asynchronous";
      qword_26AF85C78 = v30;
      __cxa_guard_release(&qword_26AF85C48);
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF85C50, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF85C50))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_26AF85CA0, "LoadTraceType", 1, 1, 1, 1);
    qword_26AF85CA0 = (uint64_t)&unk_26E715E00;
    qword_26AF85CE0 = (uint64_t)&re::introspect_LoadTraceType(BOOL)::enumTable;
    dword_26AF85CB0 = 9;
    __cxa_guard_release(&qword_26AF85C50);
  }
  if ((_MergedGlobals_201 & 1) == 0)
  {
    _MergedGlobals_201 = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_26AF85CA0, a2);
    uint64_t v32 = 0xCE13B02F3DC4EF72;
    uint64_t v33 = "LoadTraceType";
    v36[0] = 0x31CD534126;
    v36[1] = "uint8_t";
    unint64_t v2 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v36);
    if (v2)
    {
      uint64_t v3 = *v2;
      re::StringID::destroyString((re::StringID *)v36);
      uint64_t v4 = (unsigned int *)qword_26AF85CE0;
      v35[1] = v3;
      re::TypeBuilder::beginEnumType((uint64_t)v36, &v32, 1, 1, (uint64_t)v35);
      unint64_t v6 = *v4;
      if (v6)
      {
        for (unint64_t i = 0; i < v6; ++i)
        {
          uint64_t v8 = *(void *)(*((void *)v4 + 1) + 8 * i);
          if (*(_DWORD *)v8 == 1)
          {
            id v9 = *(char **)(v8 + 16);
            if (v9)
            {
              uint64_t v10 = *v9;
              if (*v9)
              {
                char v11 = v9[1];
                if (v11)
                {
                  long long v12 = (unsigned __int8 *)(v9 + 2);
                  do
                  {
                    uint64_t v10 = 31 * v10 + v11;
                    int v13 = *v12++;
                    char v11 = v13;
                  }
                  while (v13);
                }
              }
            }
            else
            {
              uint64_t v10 = 0;
            }
            uint64_t v14 = *(void *)(v8 + 8);
            *(void *)&v34.var0 = 2 * v10;
            v34.var1 = v9;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v36, v14, &v34);
            re::StringID::destroyString((re::StringID *)&v34);
            unint64_t v6 = *v4;
          }
        }
        if (v6)
        {
          for (unint64_t j = 0; j < v6; ++j)
          {
            uint64_t v16 = *(void *)(*((void *)v4 + 1) + 8 * j);
            if (*(_DWORD *)v16 == 2)
            {
              unsigned __int8 v17 = *(char **)(v16 + 16);
              if (v17)
              {
                uint64_t v18 = *v17;
                if (*v17)
                {
                  char v19 = v17[1];
                  if (v19)
                  {
                    float32x4_t v20 = (unsigned __int8 *)(v17 + 2);
                    do
                    {
                      uint64_t v18 = 31 * v18 + v19;
                      int v21 = *v20++;
                      char v19 = v21;
                    }
                    while (v21);
                  }
                }
              }
              else
              {
                uint64_t v18 = 0;
              }
              uint64_t v22 = *(void *)(v16 + 8);
              *(void *)&v34.var0 = 2 * v18;
              v34.var1 = v17;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v36, v22, &v34);
              re::StringID::destroyString((re::StringID *)&v34);
              unint64_t v6 = *v4;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v36, v23);
      xmmword_26AF85CC0 = (__int128)v34;
      re::StringID::destroyString((re::StringID *)&v32);
    }
    else
    {
      re::StringID::destroyString((re::StringID *)v36);
      re::internal::assertLog((re::internal *)5, v31, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "LoadTraceType", v32, v33);
      _os_crash();
      __break(1u);
    }
  }
}

void *re::ecs2::allocInfo_LoadTraceComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF85C58, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF85C58))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF85CE8, "LoadTraceComponent");
    __cxa_guard_release(&qword_26AF85C58);
  }
  return &unk_26AF85CE8;
}

void re::ecs2::initInfo_LoadTraceComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v20[0] = 0xAB5761FC7B9757BCLL;
  v20[1] = "LoadTraceComponent";
  re::StringID::destroyString((re::StringID *)v20);
  *((_OWORD *)this + 2) = v21;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF85C60, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF85C60);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 4ArcSharedObject::ArcSharedObject(this, 0) = 3;
      *(void *)(v7 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF85C80 = v7;
      uint64_t v8 = re::introspectionAllocator((re *)v7);
      uint64_t v10 = re::introspect_uint32_t((re *)1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "loadTraceId";
      *(void *)(v11 + 16) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x1C00000001;
      *(_DWORD *)(v11 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v11 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      *(void *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF85C88 = v11;
      long long v12 = (re *)re::introspectionAllocator((re *)v11);
      re::introspect_LoadTraceType(v12, v13);
      uint64_t v14 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 72, 8);
      *(_DWORD *)uint64_t v14 = 1;
      *(void *)(v14 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "loadTraceType";
      *(void *)(v14 + 16) = &qword_26AF85CA0;
      *(void *)(v14 + 24) = 0;
      *(void *)(v14 + 32) = 0x2000000002;
      *(_DWORD *)(v14 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v14 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      *(void *)(v14 + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_26AF85C90 = v14;
      uint64_t v15 = re::introspectionAllocator((re *)v14);
      unsigned __int8 v17 = re::introspect_BOOL((re *)1, v16);
      uint64_t v18 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v15 + 32))(v15, 72, 8);
      *(_DWORD *)uint64_t v18 = 1;
      *(void *)(v18 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "loadCacheUsed";
      *(void *)(v18 + 16) = v17;
      *(void *)(v18 + 24) = 0;
      *(void *)(v18 + 32) = 0x2100000003;
      *(_DWORD *)(v18 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v18 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      *(void *)(v18 + 56) = 0;
      *(_DWORD *)(v18 + 64) = 0;
      qword_26AF85C98 = v18;
      __cxa_guard_release(&qword_26AF85C60);
    }
  }
  *((void *)this + 2) = 0xE800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 4;
  *((void *)this + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = &qword_26AF85C80;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::LoadTraceComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 1ArcSharedObject::ArcSharedObject(this, 0) = re::internal::defaultDestruct<re::ecs2::LoadTraceComponent>;
  *((void *)this + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::LoadTraceComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::LoadTraceComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v19 = v21;
}

double re::internal::defaultConstruct<re::ecs2::LoadTraceComponent>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::make::shared::unsafelyInplace<re::ecs2::LoadTraceComponent>(a3);
}

void *re::internal::defaultDestruct<re::ecs2::LoadTraceComponent>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  re::HashSetBase<re::AssetHandle,re::AssetHandle,re::internal::ValueAsKey<re::AssetHandle>,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::deinit(a3 + 23);
  re::HashSetBase<re::AssetHandle,re::AssetHandle,re::internal::ValueAsKey<re::AssetHandle>,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::deinit(a3 + 17);
  re::HashTable<re::AssetHandle,re::ecs2::LoadTraceAssetLoadState,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::deinit(a3 + 11);
  re::HashTable<re::AssetHandle,re::ecs2::LoadTraceAssetLoadState,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::deinit(a3 + 5);
  *a3 = (uint64_t)&unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultDestructV2<re::ecs2::LoadTraceComponent>(uint64_t *a1)
{
  re::HashSetBase<re::AssetHandle,re::AssetHandle,re::internal::ValueAsKey<re::AssetHandle>,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::deinit(a1 + 23);
  re::HashSetBase<re::AssetHandle,re::AssetHandle,re::internal::ValueAsKey<re::AssetHandle>,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::deinit(a1 + 17);
  re::HashTable<re::AssetHandle,re::ecs2::LoadTraceAssetLoadState,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::deinit(a1 + 11);
  re::HashTable<re::AssetHandle,re::ecs2::LoadTraceAssetLoadState,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::deinit(a1 + 5);
  *a1 = (uint64_t)&unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_LoadTraceComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"LoadTraceComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_LoadTraceComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_LoadTraceComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::LoadTraceComponent>, this);
}

os_log_t ___ZN2re4ecs218LoadTraceComponent3logEv_block_invoke()
{
  os_log_t result = os_log_create("com.apple.re", "LoadTraceComponent");
  re::ecs2::LoadTraceComponent::log(void)::log = (uint64_t)result;
  return result;
}

uint64_t re::ecs2::LoadTraceComponent::emitLoadTraceSignpost(re::ecs2::LoadTraceComponent *this)
{
  uint64_t result = re::internal::enableSignposts(0, 0);
  if (result)
  {
    return kdebug_trace();
  }
  return result;
}

void re::HashSetBase<re::AssetHandle,re::AssetHandle,re::internal::ValueAsKey<re::AssetHandle>,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::clear(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 28))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 24);
    if (v2) {
      memset_pattern16(*(void **)(a1 + 8), &memset_pattern_32, 4 * v2);
    }
    unint64_t v3 = *(unsigned int *)(a1 + 32);
    if (v3)
    {
      unint64_t v4 = 0;
      uint64_t v5 = 8;
      do
      {
        uint64_t v6 = *(void *)(a1 + 16);
        int v7 = *(_DWORD *)(v6 + v5);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + v5) = v7 & 0x7FFFFFFF;
          re::AssetHandle::~AssetHandle((re::AssetHandle *)(v6 + v5 + 8));
          unint64_t v3 = *(unsigned int *)(a1 + 32);
        }
        ++v4;
        v5 += 40;
      }
      while (v4 < v3);
    }
    *(_DWORD *)(a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 28) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    int v8 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 4ArcSharedObject::ArcSharedObject(this, 0) = v8;
  }
}

void re::ecs2::LoadTraceComponent::updateTrackedAssets(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = a1 + 184;
  re::HashSetBase<re::AssetHandle,re::AssetHandle,re::internal::ValueAsKey<re::AssetHandle>,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::clear(a1 + 184);
  uint64_t v8 = *(unsigned int *)(a1 + 168);
  uint64_t v59 = v7;
  uint64_t v9 = 0;
  if (v8)
  {
    uint64_t v10 = (int *)(*(void *)(a1 + 152) + 8);
    while (1)
    {
      int v11 = *v10;
      v10 += 10;
      if (v11 < 0) {
        break;
      }
      if (v8 == ++v9)
      {
        LODWORD(v9) = *(_DWORD *)(a1 + 168);
        break;
      }
    }
  }
  if (v8 != v9)
  {
    uint64_t v12 = v9;
    while (1)
    {
      re::AssetHandle::AssetHandle((re::AssetHandle *)v64, (const re::AssetHandle *)(*(void *)(a1 + 152) + 40 * v12 + 16));
      uint64_t v13 = *(void *)(a1 + 40);
      if (v13)
      {
        uint64_t v14 = v65 ? *(void *)(v65 + 664) : 0;
        unint64_t v15 = 0x94D049BB133111EBLL
            * ((0xBF58476D1CE4E5B9 * (v65 ^ (v65 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v65 ^ (v65 >> 30))) >> 27));
        uint64_t v16 = *(unsigned int *)(*(void *)(a1 + 48) + 4 * ((v14 ^ (v15 >> 31) ^ v15) % *(unsigned int *)(a1 + 64)));
        if (v16 != 0x7FFFFFFF)
        {
          uint64_t v17 = *(void *)(a1 + 56);
          while (*(void *)(v17 + 48 * v16 + 24) != v65)
          {
            uint64_t v16 = *(_DWORD *)(v17 + 48 * v16 + 8) & 0x7FFFFFFF;
            if (v16 == 0x7FFFFFFF) {
              goto LABEL_16;
            }
          }
          goto LABEL_37;
        }
      }
LABEL_16:
      unint64_t v18 = v65 ? *(void *)(v65 + 264) : 0;
      if (*(void *)a4)
      {
        unint64_t v19 = 0x94D049BB133111EBLL
            * ((0xBF58476D1CE4E5B9 * (v18 ^ (v18 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v18 ^ (v18 >> 30))) >> 27));
        uint64_t v20 = *(unsigned int *)(*(void *)(a4 + 8) + 4 * ((v19 ^ (v19 >> 31)) % *(unsigned int *)(a4 + 24)));
        if (v20 != 0x7FFFFFFF) {
          break;
        }
      }
LABEL_37:
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v64);
      if (*(_DWORD *)(a1 + 168) <= (v9 + 1)) {
        int v28 = v9 + 1;
      }
      else {
        int v28 = *(_DWORD *)(a1 + 168);
      }
      while (1)
      {
        uint64_t v12 = (v9 + 1);
        if (v28 - 1 == v9) {
          break;
        }
        LODWORD(v9) = v9 + 1;
        int v29 = v12;
        if ((*(_DWORD *)(*(void *)(a1 + 152) + 40 * v12 + 8) & 0x80000000) != 0) {
          goto LABEL_44;
        }
      }
      int v29 = v28;
LABEL_44:
      LODWORD(v9) = v29;
      if (v8 == v29) {
        goto LABEL_45;
      }
    }
    uint64_t v21 = *(void *)(a4 + 16);
    while (*(void *)(v21 + 32 * v20 + 16) != v18)
    {
      uint64_t v20 = *(_DWORD *)(v21 + 32 * v20 + 8) & 0x7FFFFFFF;
      if (v20 == 0x7FFFFFFF) {
        goto LABEL_37;
      }
    }
    char v63 = 0;
    if (v65) {
      uint64_t v22 = *(void *)(v65 + 664);
    }
    else {
      uint64_t v22 = 0;
    }
    unint64_t v23 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * (v65 ^ (v65 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v65 ^ (v65 >> 30))) >> 27));
    unint64_t v24 = v22 ^ (v23 >> 31) ^ v23;
    if (v13)
    {
      unint64_t v25 = v24 % *(unsigned int *)(a1 + 64);
      uint64_t v26 = *(unsigned int *)(*(void *)(a1 + 48) + 4 * v25);
      if (v26 != 0x7FFFFFFF)
      {
        uint64_t v27 = *(void *)(a1 + 56);
        while (*(void *)(v27 + 48 * v26 + 24) != v65)
        {
          uint64_t v26 = *(_DWORD *)(v27 + 48 * v26 + 8) & 0x7FFFFFFF;
          if (v26 == 0x7FFFFFFF) {
            goto LABEL_35;
          }
        }
        goto LABEL_36;
      }
    }
    else
    {
      LODWORD(v25) = 0;
    }
LABEL_35:
    re::HashTable<re::AssetHandle,re::ecs2::LoadTraceAssetLoadState,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::addAsMove(a1 + 40, v25, v24, (const re::AssetHandle *)v64, &v63);
    ++*(_DWORD *)(a1 + 80);
LABEL_36:
    re::AssetHandle::AssetHandle((re::AssetHandle *)v62, (const re::AssetHandle *)v64);
    re::ecs2::LoadTraceComponent::emitLoadTraceSignpost(a1, a2, (re::AssetHandle *)v62, a4);
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v62);
    goto LABEL_37;
  }
LABEL_45:
  uint64_t v30 = *(unsigned int *)(a1 + 72);
  if (v30)
  {
    uint64_t v31 = 0;
    uint64_t v32 = (int *)(*(void *)(a1 + 56) + 8);
    uint64_t v33 = v59;
    while (1)
    {
      int v34 = *v32;
      v32 += 12;
      if (v34 < 0) {
        break;
      }
      if (v30 == ++v31)
      {
        LODWORD(v31) = *(_DWORD *)(a1 + 72);
        break;
      }
    }
  }
  else
  {
    LODWORD(v31) = 0;
    uint64_t v33 = v59;
  }
  if (v30 != v31)
  {
    uint64_t v35 = v31;
    do
    {
      if (!re::HashSetBase<re::AssetHandle,re::AssetHandle,re::internal::ValueAsKey<re::AssetHandle>,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::containsKey(a1 + 136, *(void *)(a1 + 56) + 48 * v35 + 16))re::HashSetBase<re::AssetHandle,re::AssetHandle,re::internal::ValueAsKey<re::AssetHandle>,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::add(v33, (re::AssetHandle *)(*(void *)(a1 + 56) + 48 * v35 + 16)); {
      unsigned int v36 = *(_DWORD *)(a1 + 72);
      }
      if (v36 <= (int)v31 + 1) {
        int v37 = v31 + 1;
      }
      else {
        int v37 = *(_DWORD *)(a1 + 72);
      }
      while (1)
      {
        uint64_t v35 = (v31 + 1);
        if (v37 - 1 == v31) {
          break;
        }
        LODWORD(v31) = v31 + 1;
        int v38 = v35;
        if ((*(_DWORD *)(*(void *)(a1 + 56) + 48 * v35 + 8) & 0x80000000) != 0) {
          goto LABEL_62;
        }
      }
      int v38 = v37;
LABEL_62:
      LODWORD(v31) = v38;
    }
    while (v36 != v38);
  }
  uint64_t v39 = *(unsigned int *)(a1 + 216);
  if (v39)
  {
    uint64_t v40 = 0;
    long long v41 = (int *)(*(void *)(a1 + 200) + 8);
    while (1)
    {
      int v42 = *v41;
      v41 += 10;
      if (v42 < 0) {
        break;
      }
      if (v39 == ++v40)
      {
        LODWORD(v4ArcSharedObject::ArcSharedObject(this, 0) = *(_DWORD *)(a1 + 216);
        break;
      }
    }
  }
  else
  {
    LODWORD(v4ArcSharedObject::ArcSharedObject(this, 0) = 0;
  }
  if (v39 != v40)
  {
    uint64_t v43 = v40;
    do
    {
      re::AssetHandle::AssetHandle((re::AssetHandle *)v64, (const re::AssetHandle *)(*(void *)(a1 + 200) + 40 * v43 + 16));
      if (*(void *)(a1 + 40))
      {
        uint64_t v44 = v65 ? *(void *)(v65 + 664) : 0;
        unint64_t v45 = 0x94D049BB133111EBLL
            * ((0xBF58476D1CE4E5B9 * (v65 ^ (v65 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v65 ^ (v65 >> 30))) >> 27));
        unint64_t v46 = (v44 ^ (v45 >> 31) ^ v45) % *(unsigned int *)(a1 + 64);
        uint64_t v47 = *(void *)(a1 + 48);
        uint64_t v48 = *(unsigned int *)(v47 + 4 * v46);
        if (v48 != 0x7FFFFFFF)
        {
          uint64_t v49 = *(void *)(a1 + 56);
          if (*(void *)(v49 + 48 * v48 + 24) == v65)
          {
            *(_DWORD *)(v47 + 4 * v46) = *(_DWORD *)(v49 + 48 * v48 + 8) & 0x7FFFFFFF;
LABEL_81:
            uint64_t v51 = *(void *)(a1 + 56);
            uint64_t v52 = v51 + 48 * v48;
            int v55 = *(_DWORD *)(v52 + 8);
            float32x4_t v54 = (int *)(v52 + 8);
            int v53 = v55;
            if (v55 < 0)
            {
              *float32x4_t v54 = v53 & 0x7FFFFFFF;
              re::AssetHandle::~AssetHandle((re::AssetHandle *)(v51 + 48 * v48 + 16));
              uint64_t v51 = *(void *)(a1 + 56);
              int v53 = *(_DWORD *)(v51 + 48 * v48 + 8);
            }
            *(_DWORD *)(v51 + 48 * v48 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = *(_DWORD *)(a1 + 76) | v53 & 0x80000000;
            --*(_DWORD *)(a1 + 68);
            int v56 = *(_DWORD *)(a1 + 80) + 1;
            *(_DWORD *)(a1 + 76) = v48;
            *(_DWORD *)(a1 + 8ArcSharedObject::ArcSharedObject(this, 0) = v56;
          }
          else
          {
            while (1)
            {
              uint64_t v50 = v48;
              uint64_t v48 = *(_DWORD *)(v49 + 48 * v48 + 8) & 0x7FFFFFFF;
              if (v48 == 0x7FFFFFFF) {
                break;
              }
              if (*(void *)(v49 + 48 * v48 + 24) == v65)
              {
                *(_DWORD *)(v49 + 48 * v50 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = *(_DWORD *)(v49 + 48 * v50 + 8) & 0x80000000 | *(_DWORD *)(v49 + 48 * v48 + 8) & 0x7FFFFFFF;
                goto LABEL_81;
              }
            }
          }
        }
      }
      re::AssetHandle::AssetHandle((re::AssetHandle *)v61, (const re::AssetHandle *)v64);
      re::ecs2::LoadTraceComponent::emitLoadTraceSignpost(a1, a3, (re::AssetHandle *)v61, a4);
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v61);
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v64);
      if (*(_DWORD *)(a1 + 216) <= (v40 + 1)) {
        int v57 = v40 + 1;
      }
      else {
        int v57 = *(_DWORD *)(a1 + 216);
      }
      while (1)
      {
        uint64_t v43 = (v40 + 1);
        if (v57 - 1 == v40) {
          break;
        }
        LODWORD(v4ArcSharedObject::ArcSharedObject(this, 0) = v40 + 1;
        int v58 = v43;
        if ((*(_DWORD *)(*(void *)(a1 + 200) + 40 * v43 + 8) & 0x80000000) != 0) {
          goto LABEL_91;
        }
      }
      int v58 = v57;
LABEL_91:
      LODWORD(v4ArcSharedObject::ArcSharedObject(this, 0) = v58;
    }
    while (v39 != v58);
  }
}

uint64_t re::ecs2::LoadTraceComponent::emitLoadTraceSignpost(uint64_t a1, uint64_t a2, re::AssetHandle *a3, uint64_t a4)
{
  unint64_t v5 = *((void *)a3 + 1);
  if (v5) {
    unint64_t v5 = *(void *)(v5 + 264);
  }
  if (*(void *)a4)
  {
    unint64_t v6 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * (v5 ^ (v5 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v5 ^ (v5 >> 30))) >> 27));
    uint64_t v7 = *(unsigned int *)(*(void *)(a4 + 8) + 4 * ((v6 ^ (v6 >> 31)) % *(unsigned int *)(a4 + 24)));
    if (v7 != 0x7FFFFFFF)
    {
      uint64_t v8 = *(void *)(a4 + 16);
      if (*(void *)(v8 + 32 * v7 + 16) != v5)
      {
        do
          uint64_t v7 = *(_DWORD *)(v8 + 32 * v7 + 8) & 0x7FFFFFFF;
        while (v7 != 0x7FFFFFFF && *(void *)(v8 + 32 * v7 + 16) != v5);
      }
    }
  }
  uint64_t result = re::internal::enableSignposts(0, 0);
  if (result)
  {
    re::AssetHandle::assetInfo(a3);
    return kdebug_trace();
  }
  return result;
}

BOOL re::HashSetBase<re::AssetHandle,re::AssetHandle,re::internal::ValueAsKey<re::AssetHandle>,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::containsKey(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(unsigned int *)(a1 + 24);
  if (v2)
  {
    unint64_t v3 = *(void *)(a2 + 8);
    if (v3) {
      uint64_t v4 = *(void *)(v3 + 664);
    }
    else {
      uint64_t v4 = 0;
    }
    unint64_t v6 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * (v3 ^ (v3 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v3 ^ (v3 >> 30))) >> 27));
    uint64_t v7 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * ((v4 ^ (v6 >> 31) ^ v6) % v2));
    uint64_t v5 = 0x7FFFFFFFLL;
    if (v7 != 0x7FFFFFFF)
    {
      uint64_t v8 = *(void *)(a1 + 16);
      uint64_t v5 = 0x7FFFFFFFLL;
      while (*(void *)(v8 + 40 * v7 + 24) != v3)
      {
        uint64_t v7 = *(_DWORD *)(v8 + 40 * v7 + 8) & 0x7FFFFFFF;
        if (v7 == 0x7FFFFFFF) {
          return v5 != 0x7FFFFFFF;
        }
      }
      uint64_t v5 = v7;
    }
  }
  else
  {
    uint64_t v5 = 0x7FFFFFFFLL;
  }
  return v5 != 0x7FFFFFFF;
}

void re::ecs2::LoadTraceComponent::checkAssetLoadStates(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (*(_DWORD *)(a1 + 116))
  {
    uint64_t v10 = *(unsigned int *)(a1 + 112);
    if (v10) {
      memset_pattern16(*(void **)(a1 + 96), &memset_pattern_32, 4 * v10);
    }
    unint64_t v11 = *(unsigned int *)(a1 + 120);
    if (v11)
    {
      unint64_t v12 = 0;
      uint64_t v13 = 8;
      do
      {
        uint64_t v14 = *(void *)(a1 + 104);
        int v15 = *(_DWORD *)(v14 + v13);
        if (v15 < 0)
        {
          *(_DWORD *)(v14 + vre::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 13) = v15 & 0x7FFFFFFF;
          re::AssetHandle::~AssetHandle((re::AssetHandle *)(v14 + v13 + 8));
          unint64_t v11 = *(unsigned int *)(a1 + 120);
        }
        ++v12;
        v13 += 48;
      }
      while (v12 < v11);
    }
    *(_DWORD *)(a1 + 116) = 0;
    *(_DWORD *)(a1 + 12ArcSharedObject::ArcSharedObject(this, 0) = 0;
    int v16 = *(_DWORD *)(a1 + 128) + 1;
    *(_DWORD *)(a1 + 124) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 28) = v16;
  }
  uint64_t v17 = *(unsigned int *)(a1 + 72);
  if (v17)
  {
    uint64_t v18 = 0;
    unint64_t v19 = (int *)(*(void *)(a1 + 56) + 8);
    while (1)
    {
      int v20 = *v19;
      v19 += 12;
      if (v20 < 0) {
        break;
      }
      if (v17 == ++v18)
      {
        LODWORD(v1re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = *(_DWORD *)(a1 + 72);
        break;
      }
    }
  }
  else
  {
    LODWORD(v1re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
  }
  if (v17 != v18)
  {
    uint64_t v21 = v18;
    do
    {
      uint64_t v22 = 3 * v21;
      re::AssetHandle::AssetHandle((re::AssetHandle *)v51, (const re::AssetHandle *)(*(void *)(a1 + 56) + 48 * v21 + 16));
      if (v52)
      {
        int v23 = *(unsigned __int8 *)(*(void *)(a1 + 56) + 16 * v22 + 40);
        unsigned int v24 = atomic_load((unsigned int *)(v52 + 704));
        if (v24 == 2)
        {
          if (v23 != 1)
          {
            re::AssetHandle::AssetHandle((re::AssetHandle *)v50, (const re::AssetHandle *)v51);
            re::ecs2::LoadTraceComponent::emitLoadTraceSignpost(a1, a2, (re::AssetHandle *)v50, a5);
            re::AssetHandle::~AssetHandle((re::AssetHandle *)v50);
            char v49 = 1;
            goto LABEL_31;
          }
        }
        else if (atomic_load((unsigned int *)(v52 + 704)))
        {
          unsigned int v26 = atomic_load((unsigned int *)(v52 + 704));
          if (v26 == 3 && v23 != 3)
          {
            re::AssetHandle::AssetHandle((re::AssetHandle *)v47, (const re::AssetHandle *)v51);
            re::ecs2::LoadTraceComponent::emitLoadTraceSignpost(a1, a4, (re::AssetHandle *)v47, a5);
            re::AssetHandle::~AssetHandle((re::AssetHandle *)v47);
            char v28 = 3;
            goto LABEL_30;
          }
        }
        else if (v23 != 2)
        {
          re::AssetHandle::AssetHandle((re::AssetHandle *)v48, (const re::AssetHandle *)v51);
          re::ecs2::LoadTraceComponent::emitLoadTraceSignpost(a1, a3, (re::AssetHandle *)v48, a5);
          re::AssetHandle::~AssetHandle((re::AssetHandle *)v48);
          char v28 = 2;
LABEL_30:
          char v49 = v28;
LABEL_31:
          re::HashTable<re::AssetHandle,re::ecs2::LoadTraceAssetLoadState,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::addOrReplace(a1 + 88, (const re::AssetHandle *)v51, &v49);
        }
      }
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v51);
      unsigned int v29 = *(_DWORD *)(a1 + 72);
      if (v29 <= (int)v18 + 1) {
        int v30 = v18 + 1;
      }
      else {
        int v30 = *(_DWORD *)(a1 + 72);
      }
      while (1)
      {
        uint64_t v21 = (v18 + 1);
        if (v30 - 1 == v18) {
          break;
        }
        LODWORD(v1re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v18 + 1;
        int v31 = v21;
        if ((*(_DWORD *)(*(void *)(a1 + 56) + 48 * v21 + 8) & 0x80000000) != 0) {
          goto LABEL_39;
        }
      }
      int v31 = v30;
LABEL_39:
      LODWORD(v1re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v31;
    }
    while (v29 != v31);
  }
  uint64_t v32 = *(unsigned int *)(a1 + 120);
  if (v32)
  {
    uint64_t v33 = 0;
    int v34 = (int *)(*(void *)(a1 + 104) + 8);
    while (1)
    {
      int v35 = *v34;
      v34 += 12;
      if (v35 < 0) {
        break;
      }
      if (v32 == ++v33)
      {
        LODWORD(v33) = *(_DWORD *)(a1 + 120);
        break;
      }
    }
  }
  else
  {
    LODWORD(v33) = 0;
  }
  if (v32 != v33)
  {
    uint64_t v36 = v33;
    uint64_t v37 = *(void *)(a1 + 40);
    do
    {
      uint64_t v38 = *(void *)(a1 + 104);
      if (v37)
      {
        unint64_t v39 = *(void *)(v38 + 48 * v36 + 24);
        if (v39) {
          uint64_t v40 = *(void *)(v39 + 664);
        }
        else {
          uint64_t v40 = 0;
        }
        unint64_t v42 = 0x94D049BB133111EBLL
            * ((0xBF58476D1CE4E5B9 * (v39 ^ (v39 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v39 ^ (v39 >> 30))) >> 27));
        unint64_t v43 = (v40 ^ (v42 >> 31) ^ v42) % *(unsigned int *)(a1 + 64);
        uint64_t v41 = *(void *)(a1 + 56);
        uint64_t v44 = *(unsigned int *)(*(void *)(a1 + 48) + 4 * v43);
        if (v44 != 0x7FFFFFFF)
        {
          while (*(void *)(v41 + 48 * v44 + 24) != v39)
          {
            uint64_t v44 = *(_DWORD *)(v41 + 48 * v44 + 8) & 0x7FFFFFFF;
            if (v44 == 0x7FFFFFFF) {
              goto LABEL_56;
            }
          }
          goto LABEL_57;
        }
      }
      else
      {
        uint64_t v41 = *(void *)(a1 + 56);
      }
LABEL_56:
      uint64_t v44 = 0x7FFFFFFFLL;
LABEL_57:
      *(unsigned char *)(v41 + 48 * v44 + 4ArcSharedObject::ArcSharedObject(this, 0) = *(unsigned char *)(v38 + 48 * v36 + 40);
      if (v32 <= (int)v33 + 1) {
        int v45 = v33 + 1;
      }
      else {
        int v45 = v32;
      }
      while (1)
      {
        uint64_t v36 = (v33 + 1);
        if (v45 - 1 == v33) {
          break;
        }
        LODWORD(v33) = v33 + 1;
        int v46 = v36;
        if ((*(_DWORD *)(*(void *)(a1 + 104) + 48 * v36 + 8) & 0x80000000) != 0) {
          goto LABEL_64;
        }
      }
      int v46 = v45;
LABEL_64:
      LODWORD(v33) = v46;
    }
    while (v32 != v46);
  }
}

uint64_t re::HashTable<re::AssetHandle,re::ecs2::LoadTraceAssetLoadState,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::addOrReplace(uint64_t result, const re::AssetHandle *a2, unsigned char *a3)
{
  uint64_t v5 = result;
  unint64_t v6 = *((void *)a2 + 1);
  if (v6) {
    uint64_t v7 = *(void *)(v6 + 664);
  }
  else {
    uint64_t v7 = 0;
  }
  unint64_t v8 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (v6 ^ (v6 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v6 ^ (v6 >> 30))) >> 27));
  unint64_t v9 = v7 ^ (v8 >> 31) ^ v8;
  if (!*(void *)result)
  {
    LODWORD(v1ArcSharedObject::ArcSharedObject(this, 0) = 0;
    goto LABEL_11;
  }
  unint64_t v10 = v9 % *(unsigned int *)(result + 24);
  uint64_t v11 = *(unsigned int *)(*(void *)(result + 8) + 4 * v10);
  if (v11 == 0x7FFFFFFF)
  {
LABEL_11:
    uint64_t result = re::HashTable<re::AssetHandle,re::ecs2::LoadTraceAssetLoadState,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::addAsMove(result, v10, v9, a2, a3);
    goto LABEL_12;
  }
  uint64_t v12 = *(void *)(result + 16);
  while (*(void *)(v12 + 48 * v11 + 24) != v6)
  {
    uint64_t v11 = *(_DWORD *)(v12 + 48 * v11 + 8) & 0x7FFFFFFF;
    if (v11 == 0x7FFFFFFF) {
      goto LABEL_11;
    }
  }
  *(unsigned char *)(v12 + 48 * v11 + 4ArcSharedObject::ArcSharedObject(this, 0) = *a3;
LABEL_12:
  ++*(_DWORD *)(v5 + 40);
  return result;
}

double re::make::shared::unsafelyInplace<re::ecs2::LoadTraceComponent>(uint64_t a1)
{
  *(void *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 20re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a1 + 1re::HashTable<re::ecs2::Entity const*,re::ecs2::BillboardData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::deinit((uint64_t *)this + 60) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 28) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 8ArcSharedObject::ArcSharedObject(this, 0) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(void *)(v1 + 16) = 0;
  *(unsigned char *)(v1 + 24) = 0;
  *(void *)uint64_t v1 = &unk_26E6F3C90;
  *(_DWORD *)(v1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 28) = 0;
  *(_WORD *)(v1 + 32) = 0;
  *(_OWORD *)(v1 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0u;
  *(_OWORD *)(v1 + 56) = 0u;
  *(_DWORD *)(v1 + 72) = 0;
  *(void *)&double result = 0x7FFFFFFFLL;
  *(void *)(v1 + 76) = 0x7FFFFFFFLL;
  *(_OWORD *)(v1 + 8re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0u;
  *(_OWORD *)(v1 + 104) = 0u;
  *(_DWORD *)(v1 + 12ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *(void *)(v1 + 124) = 0x7FFFFFFFLL;
  *(_OWORD *)(v1 + 136) = 0u;
  *(_OWORD *)(v1 + 152) = 0u;
  *(_DWORD *)(v1 + 16re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
  *(void *)(v1 + 172) = 0x7FFFFFFFLL;
  *(_OWORD *)(v1 + 184) = 0u;
  *(_OWORD *)(v1 + 20ArcSharedObject::ArcSharedObject(this, 0) = 0u;
  *(_DWORD *)(v1 + 216) = 0;
  *(void *)(v1 + 22ArcSharedObject::ArcSharedObject(this, 0) = 0x7FFFFFFFLL;
  return result;
}

uint64_t re::HashTable<re::AssetHandle,re::ecs2::LoadTraceAssetLoadState,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, const re::AssetHandle *a4, unsigned char *a5)
{
  uint64_t v10 = *(unsigned int *)(a1 + 36);
  if (v10 == 0x7FFFFFFF)
  {
    uint64_t v10 = *(unsigned int *)(a1 + 32);
    int v11 = v10;
    if (v10 == *(_DWORD *)(a1 + 24))
    {
      int v12 = *(_DWORD *)(a1 + 28);
      signed int v13 = 2 * v12;
      uint64_t v14 = *(void *)a1;
      if (*(void *)a1)
      {
        if (v13) {
          BOOL v15 = v10 == v13;
        }
        else {
          BOOL v15 = 1;
        }
        if (!v15 && (v12 & 0x80000000) == 0)
        {
          memset(v28, 0, 36);
          *(void *)&v28[36] = 0x7FFFFFFFLL;
          re::HashTable<re::AssetHandle,re::ecs2::LoadTraceAssetLoadState,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::init((uint64_t)v28, v14, v13);
          long long v16 = *(_OWORD *)v28;
          *(_OWORD *)char v28 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v16;
          uint64_t v17 = *(void *)&v28[16];
          uint64_t v18 = *(void *)(a1 + 16);
          *(void *)&char v28[16] = v18;
          *(void *)(a1 + 16) = v17;
          long long v20 = *(_OWORD *)&v28[24];
          *(_OWORD *)&v28[24] = *(_OWORD *)(a1 + 24);
          unsigned int v19 = *(_DWORD *)&v28[32];
          *(_OWORD *)(a1 + 24) = v20;
          unint64_t v21 = v19;
          if (v19)
          {
            unint64_t v22 = 0;
            uint64_t v23 = v18 + 40;
            do
            {
              if ((*(_DWORD *)(v23 - 32) & 0x80000000) != 0) {
                re::HashTable<re::AssetHandle,re::ecs2::LoadTraceAssetLoadState,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::addAsMove(a1, *(void *)(v23 - 40) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(v23 - 40), v23 - 24, v23);
              }
              ++v22;
              v23 += 48;
            }
            while (v22 < v21);
          }
          re::HashTable<re::AssetHandle,re::ecs2::LoadTraceAssetLoadState,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::deinit((uint64_t *)v28);
        }
      }
      else
      {
        if (v13) {
          signed int v26 = 2 * v12;
        }
        else {
          signed int v26 = 3;
        }
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v11 + 1;
    uint64_t v24 = *(void *)(a1 + 16);
    int v25 = *(_DWORD *)(v24 + 48 * v10 + 8);
  }
  else
  {
    uint64_t v24 = *(void *)(a1 + 16);
    int v25 = *(_DWORD *)(v24 + 48 * v10 + 8);
    *(_DWORD *)(a1 + 36) = v25 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v24 + 48 * v10 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v25 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + 48 * v10 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 48 * v10 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 48 * v1ArcSharedObject::ArcSharedObject(this, 0) = a3;
  re::AssetHandle::AssetHandle((re::AssetHandle *)(*(void *)(a1 + 16) + 48 * v10 + 16), a4);
  *(unsigned char *)(*(void *)(a1 + 16) + 48 * v10 + 4ArcSharedObject::ArcSharedObject(this, 0) = *a5;
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return v10;
}

void re::HashTable<re::AssetHandle,re::ecs2::LoadTraceAssetLoadState,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  uint64_t v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    uint64_t v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    unint64_t v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      uint64_t v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  int v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + 48 * v10, 16);
  if (v12)
  {
    uint64_t v14 = v12;
    *(void *)(a1 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &memset_pattern_32, 4 * v10);
    }
    *(void *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

void *re::ecs2::allocInfo_ClientWorldOriginRefComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_202, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_202))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF85D78, "ClientWorldOriginRefComponent");
    __cxa_guard_release(&_MergedGlobals_202);
  }
  return &unk_26AF85D78;
}

void re::ecs2::initInfo_ClientWorldOriginRefComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v9[0] = 0xE6691EEFCF88156ELL;
  v9[1] = "ClientWorldOriginRefComponent";
  re::StringID::destroyString((re::StringID *)v9);
  *((_OWORD *)this + 2) = v10;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF85D70, memory_order_acquire) & 1) == 0)
  {
    unint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF85D70);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 4ArcSharedObject::ArcSharedObject(this, 0) = 3;
      *(void *)(v7 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF85D68 = v7;
      __cxa_guard_release(&qword_26AF85D70);
    }
  }
  *((void *)this + 2) = 0x2800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((void *)this + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = &qword_26AF85D68;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::ClientWorldOriginRefComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 1ArcSharedObject::ArcSharedObject(this, 0) = re::internal::defaultDestruct<re::ecs2::ClientWorldOriginRefComponent>;
  *((void *)this + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::ClientWorldOriginRefComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::ClientWorldOriginRefComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v8 = v10;
}

void re::internal::defaultConstruct<re::ecs2::ClientWorldOriginRefComponent>(int a1, int a2, ArcSharedObject *this)
{
  *((void *)this + 4) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)(v3 + 16) = 0;
  *(unsigned char *)(v3 + 24) = 0;
  *(void *)uint64_t v3 = &unk_26E6F5BE8;
  *(void *)(v3 + 32) = 0;
}

void *re::internal::defaultDestruct<re::ecs2::ClientWorldOriginRefComponent>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

void re::internal::defaultConstructV2<re::ecs2::ClientWorldOriginRefComponent>(uint64_t a1)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(void *)(v1 + 16) = 0;
  *(unsigned char *)(v1 + 24) = 0;
  *(void *)uint64_t v1 = &unk_26E6F5BE8;
  *(void *)(v1 + 32) = 0;
}

void *re::internal::defaultDestructV2<re::ecs2::ClientWorldOriginRefComponent>(void *a1)
{
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_ClientWorldOriginRefComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ClientWorldOriginRefComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_ClientWorldOriginRefComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_ClientWorldOriginRefComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::ClientWorldOriginRefComponent>, this);
}

void *re::ecs2::allocInfo_WorldRootToken(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF85E00, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF85E00))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF85E38, "WorldRootToken");
    __cxa_guard_release(&qword_26AF85E00);
  }
  return &unk_26AF85E38;
}

void re::ecs2::initInfo_WorldRootToken(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v10[0] = 0x1F8500F0353C75CALL;
  v10[1] = "WorldRootToken";
  re::StringID::destroyString((re::StringID *)v10);
  *((_OWORD *)this + 2) = v11;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF85DF8, memory_order_acquire) & 1) == 0)
  {
    unint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF85DF8);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v7 = re::introspect_uint64_t((re *)1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "m_worldRootId";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 32) = 1;
      *(_DWORD *)(v8 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v8 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      _MergedGlobals_203 = v8;
      __cxa_guard_release(&qword_26AF85DF8);
    }
  }
  *((void *)this + 2) = 0x800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((void *)this + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = &_MergedGlobals_203;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::WorldRootToken>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 1ArcSharedObject::ArcSharedObject(this, 0) = re::internal::defaultDestruct<re::ecs2::WorldRootToken>;
  *((void *)this + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::WorldRootToken>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::WorldRootToken>;
  re::IntrospectionRegistry::add(this, v3);
  long long v9 = v11;
}

void re::internal::defaultConstruct<re::ecs2::WorldRootToken>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = 0;
}

void *re::internal::defaultConstructV2<re::ecs2::WorldRootToken>(void *result)
{
  *double result = 0;
  return result;
}

uint64_t re::ecs2::introspect_WorldRootToken(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"WorldRootToken", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_WorldRootToken, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_WorldRootToken, (void (*)(re::IntrospectionBase *))&qword_26AF85E08, this);
}

void *re::ecs2::allocInfo_WorldRootComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF85E10, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF85E10))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF85EB0, "WorldRootComponent");
    __cxa_guard_release(&qword_26AF85E10);
  }
  return &unk_26AF85EB0;
}

void re::ecs2::initInfo_WorldRootComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v18[0] = 0xE23DDCC2FBA88FD2;
  v18[1] = "WorldRootComponent";
  re::StringID::destroyString((re::StringID *)v18);
  *((_OWORD *)this + 2) = v19;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF85E18, memory_order_acquire) & 1) == 0)
  {
    unint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF85E18);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 4ArcSharedObject::ArcSharedObject(this, 0) = 3;
      *(void *)(v7 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF85E20 = v7;
      uint64_t v8 = (re::ecs2 *)re::introspectionAllocator((re *)v7);
      long long v9 = v8;
      long long v10 = (re::ecs2 *)qword_26AF85E08;
      if (!qword_26AF85E08)
      {
        long long v10 = (re::ecs2 *)re::ecs2::allocInfo_WorldRootToken(v8);
        qword_26AF85E08 = (uint64_t)v10;
        re::ecs2::initInfo_WorldRootToken(v10, v11);
      }
      uint64_t v12 = (*(uint64_t (**)(re::ecs2 *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "worldRootToken";
      *(void *)(v12 + 16) = v10;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 32) = 0x2000000002;
      *(_DWORD *)(v12 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v12 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      *(void *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF85E28 = v12;
      uint64_t v13 = re::introspectionAllocator((re *)v12);
      BOOL v15 = re::introspect_BOOL((re *)1, v14);
      uint64_t v16 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v13 + 32))(v13, 72, 8);
      *(_DWORD *)uint64_t v16 = 1;
      *(void *)(v16 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "applyToSelf";
      *(void *)(v16 + 16) = v15;
      *(void *)(v16 + 24) = 0;
      *(void *)(v16 + 32) = 0x2800000003;
      *(_DWORD *)(v16 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v16 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      *(void *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_26AF85E30 = v16;
      __cxa_guard_release(&qword_26AF85E18);
    }
  }
  *((void *)this + 2) = 0x3800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((void *)this + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = &qword_26AF85E20;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::WorldRootComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 1ArcSharedObject::ArcSharedObject(this, 0) = re::internal::defaultDestruct<re::ecs2::WorldRootComponent>;
  *((void *)this + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::WorldRootComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::WorldRootComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v17 = v19;
}

void re::internal::defaultConstruct<re::ecs2::WorldRootComponent>(int a1, int a2, ArcSharedObject *this)
{
  *((void *)this + 6) = 0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)(v3 + 16) = 0;
  *(unsigned char *)(v3 + 24) = 0;
  *(void *)uint64_t v3 = &unk_26E6F27F0;
  *(void *)(v3 + 32) = 0;
  *(unsigned char *)(v3 + 4ArcSharedObject::ArcSharedObject(this, 0) = 1;
  *(void *)(v3 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
}

void *re::internal::defaultDestruct<re::ecs2::WorldRootComponent>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

void re::internal::defaultConstructV2<re::ecs2::WorldRootComponent>(uint64_t a1)
{
  *(void *)(a1 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(void *)(v1 + 16) = 0;
  *(unsigned char *)(v1 + 24) = 0;
  *(void *)uint64_t v1 = &unk_26E6F27F0;
  *(void *)(v1 + 32) = 0;
  *(unsigned char *)(v1 + 4ArcSharedObject::ArcSharedObject(this, 0) = 1;
  *(void *)(v1 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
}

void *re::internal::defaultDestructV2<re::ecs2::WorldRootComponent>(void *a1)
{
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_WorldRootComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"WorldRootComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_WorldRootComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_WorldRootComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::WorldRootComponent>, this);
}

void *re::allocInfo_ProjectiveShadowParams(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_204, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_204))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF85F90, "ProjectiveShadowParams");
    __cxa_guard_release(&_MergedGlobals_204);
  }
  return &unk_26AF85F90;
}

void re::initInfo_ProjectiveShadowParams(re *this, re::IntrospectionBase *a2)
{
  v18[0] = 0xCCA3463BD356374ALL;
  v18[1] = "ProjectiveShadowParams";
  re::StringID::destroyString((re::StringID *)v18);
  *((_OWORD *)this + 2) = v19;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF85F30, memory_order_acquire) & 1) == 0)
  {
    unint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF85F30);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v7 = re::introspect_float((re *)1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "intensity";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 32) = 1;
      *(_DWORD *)(v8 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v8 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF85F58 = v8;
      long long v9 = re::introspectionAllocator((re *)v8);
      long long v11 = re::introspect_float((re *)1, v10);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "objectSpaceDecayRate";
      *(void *)(v12 + 16) = v11;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 32) = 0x400000002;
      *(_DWORD *)(v12 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v12 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      *(void *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF85F60 = v12;
      uint64_t v13 = re::introspectionAllocator((re *)v12);
      BOOL v15 = re::introspect_float((re *)1, v14);
      uint64_t v16 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v13 + 32))(v13, 72, 8);
      *(_DWORD *)uint64_t v16 = 1;
      *(void *)(v16 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "groundDecayRate";
      *(void *)(v16 + 16) = v15;
      *(void *)(v16 + 24) = 0;
      *(void *)(v16 + 32) = 0x800000003;
      *(_DWORD *)(v16 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v16 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      *(void *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_26AF85F68 = v16;
      __cxa_guard_release(&qword_26AF85F30);
    }
  }
  *((void *)this + 2) = 0xC00000008;
  *((_DWORD *)this + 6) = 4;
  *((_WORD *)this + 14) = 1;
  *((_DWORD *)this + 14) = 3;
  *((void *)this + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = &qword_26AF85F58;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ProjectiveShadowParams>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 1ArcSharedObject::ArcSharedObject(this, 0) = re::internal::defaultDestruct<re::ProjectiveShadowParams>;
  *((void *)this + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 13) = re::internal::defaultConstructV2<re::ProjectiveShadowParams>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ProjectiveShadowParams>;
  re::IntrospectionRegistry::add(this, v3);
  long long v17 = v19;
}

double re::internal::defaultConstruct<re::ProjectiveShadowParams>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result = 2.00000047;
  *(void *)a3 = 0x400000003FA00000;
  *(_DWORD *)(a3 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 1094713344;
  return result;
}

double re::internal::defaultConstructV2<re::ProjectiveShadowParams>(uint64_t a1)
{
  double result = 2.00000047;
  *(void *)a1 = 0x400000003FA00000;
  *(_DWORD *)(a1 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 1094713344;
  return result;
}

void *re::ecs2::allocInfo_ProjectiveShadowReceiverComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF85F40, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF85F40))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF86008, "ProjectiveShadowReceiverComponent");
    __cxa_guard_release(&qword_26AF85F40);
  }
  return &unk_26AF86008;
}

void re::ecs2::initInfo_ProjectiveShadowReceiverComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v22[0] = 0xE32F79A252B689ELL;
  v22[1] = "ProjectiveShadowReceiverComponent";
  re::StringID::destroyString((re::StringID *)v22);
  *((_OWORD *)this + 2) = v23;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF85F48, memory_order_acquire) & 1) == 0)
  {
    unint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF85F48);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 4ArcSharedObject::ArcSharedObject(this, 0) = 3;
      *(void *)(v7 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF85F70 = v7;
      uint64_t v8 = (re *)re::introspectionAllocator((re *)v7);
      long long v9 = v8;
      long long v10 = (re *)qword_26AF85F38;
      if (!qword_26AF85F38)
      {
        long long v10 = (re *)re::allocInfo_ProjectiveShadowParams(v8);
        qword_26AF85F38 = (uint64_t)v10;
        re::initInfo_ProjectiveShadowParams(v10, v11);
      }
      uint64_t v12 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "params";
      *(void *)(v12 + 16) = v10;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 32) = 0x1C00000001;
      *(_DWORD *)(v12 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v12 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      *(void *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF85F78 = v12;
      uint64_t v13 = re::introspectionAllocator((re *)v12);
      BOOL v15 = re::introspect_BOOL((re *)1, v14);
      uint64_t v16 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v13 + 32))(v13, 72, 8);
      *(_DWORD *)uint64_t v16 = 1;
      *(void *)(v16 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "isVisible";
      *(void *)(v16 + 16) = v15;
      *(void *)(v16 + 24) = 0;
      *(void *)(v16 + 32) = 0x2800000002;
      *(_DWORD *)(v16 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v16 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      *(void *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_26AF85F80 = v16;
      long long v17 = re::introspectionAllocator((re *)v16);
      long long v19 = re::introspect_BOOL((re *)1, v18);
      uint64_t v20 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v17 + 32))(v17, 72, 8);
      *(_DWORD *)uint64_t v20 = 1;
      *(void *)(v20 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "isAutomaticallyAdded";
      *(void *)(v20 + 16) = v19;
      *(void *)(v20 + 24) = 0;
      *(void *)(v20 + 32) = 0x2900000003;
      *(_DWORD *)(v20 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v20 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      *(void *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_26AF85F88 = v20;
      __cxa_guard_release(&qword_26AF85F48);
    }
  }
  *((void *)this + 2) = 0x7000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 4;
  *((void *)this + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = &qword_26AF85F70;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::ProjectiveShadowReceiverComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 1ArcSharedObject::ArcSharedObject(this, 0) = re::internal::defaultDestruct<re::ecs2::ProjectiveShadowReceiverComponent>;
  *((void *)this + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::ProjectiveShadowReceiverComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::ProjectiveShadowReceiverComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v21 = v23;
}

double re::internal::defaultConstruct<re::ecs2::ProjectiveShadowReceiverComponent>(uint64_t a1, uint64_t a2, ArcSharedObject *a3)
{
  *(void *)&double result = re::make::shared::unsafelyInplace<re::ecs2::ProjectiveShadowReceiverComponent>(a3).u64[0];
  return result;
}

void *re::internal::defaultDestruct<re::ecs2::ProjectiveShadowReceiverComponent>(uint64_t a1, uint64_t a2, void *a3)
{
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 10));
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultDestructV2<re::ecs2::ProjectiveShadowReceiverComponent>(void *a1)
{
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 10));
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_ProjectiveShadowReceiverComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ProjectiveShadowReceiverComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_ProjectiveShadowReceiverComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_ProjectiveShadowReceiverComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::ProjectiveShadowReceiverComponent>, this);
}

void *re::ecs2::allocInfo_ProjectiveShadowReceiverSystem(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF85F50, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF85F50))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF86080, "ProjectiveShadowReceiverSystem");
    __cxa_guard_release(&qword_26AF85F50);
  }
  return &unk_26AF86080;
}

void re::ecs2::initInfo_ProjectiveShadowReceiverSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v5[0] = 0xE33F64CC7DE6D83ALL;
  v5[1] = "ProjectiveShadowReceiverSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0x30000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = &re::ecs2::initInfo_ProjectiveShadowReceiverSystem(re::IntrospectionBase *)::structureAttributes;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::ProjectiveShadowReceiverSystem>;
  *((void *)this + 1ArcSharedObject::ArcSharedObject(this, 0) = re::internal::defaultDestruct<re::ecs2::ProjectiveShadowReceiverSystem>;
  *((void *)this + 11) = re::internal::defaultRetain<re::ecs2::ProjectiveShadowReceiverSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 12) = re::internal::defaultRelease<re::ecs2::ProjectiveShadowReceiverSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::ProjectiveShadowReceiverSystem>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::ProjectiveShadowReceiverSystem>;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

re::ecs2::ProjectiveShadowReceiverSystem *re::internal::defaultConstruct<re::ecs2::ProjectiveShadowReceiverSystem>(int a1, int a2, re::ecs2::ProjectiveShadowReceiverSystem *this)
{
  return re::ecs2::ProjectiveShadowReceiverSystem::ProjectiveShadowReceiverSystem(this);
}

void *re::internal::defaultDestruct<re::ecs2::ProjectiveShadowReceiverSystem>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  re::FixedArray<CoreIKTransform>::deinit(a3 + 89);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 54));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 51));
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a3 + 20);
  *a3 = (uint64_t)&unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultDestructV2<re::ecs2::ProjectiveShadowReceiverSystem>(uint64_t *a1)
{
  re::FixedArray<CoreIKTransform>::deinit(a1 + 89);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 54));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 51));
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 20);
  *a1 = (uint64_t)&unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_ProjectiveShadowReceiverSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ProjectiveShadowReceiverSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_ProjectiveShadowReceiverSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_ProjectiveShadowReceiverSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::ProjectiveShadowReceiverSystem>, this);
}

uint64_t sendAllReceiversToInactive(uint64_t a1)
{
  for (uint64_t i = 0; i != 3; ++i)
  {
    unint64_t v3 = *(void *)(a1 + 8 * byte_234396588[i] + 24);
    unint64_t v4 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](*(void *)(a1 + 16) + 8, v3);
    uint64_t result = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v13, v4, 0);
    uint64_t v11 = v13;
    uint64_t v12 = v14;
    if (v4 != v13 || (unsigned __int16)v14 != 0xFFFFLL || (v14 & 0xFFFF0000) != 4294901760)
    {
      do
      {
        unint64_t v8 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v11);
        re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), v3, v8, *(void *)(a1 + 32));
        uint64_t result = (uint64_t)re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v11);
      }
      while (v11 != v4 || (unsigned __int16)v12 != 0xFFFF || WORD1(v12) != 0xFFFF);
    }
  }
  return result;
}

unint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>::setComponentState(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t result = re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), a2, a3, *(void *)(a1 + 24));
  if (result != a2 || v7 != a3 || ((v7 ^ a3) & 0xFFFFFF00000000) != 0)
  {
    long long v10 = *(uint64_t (**)(void))(**(void **)(*(void *)a1 + 224) + 16);
    return v10();
  }
  return result;
}

uint64_t re::ecs2::ProjectiveShadowReceiverStateImpl::ProjectiveShadowReceiverStateImpl(uint64_t a1, uint64_t a2)
{
  v5[6] = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_26E6FAE20;
  *(_OWORD *)(a1 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0u;
  *(_DWORD *)(a1 + 64) = 1065353216;
  *(_OWORD *)(a1 + 6re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = xmmword_2343864E0;
  *(_DWORD *)(a1 + 84) = 12;
  *(void *)(a1 + 8re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0x3CF5C28F3F800000;
  *(_WORD *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 112) = xmmword_2343864F0;
  *(void *)(a1 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 28) = 0x3EB333333F800000;
  *(unsigned char *)(a1 + 136) = 1;
  *(_OWORD *)(a1 + 14ArcSharedObject::ArcSharedObject(this, 0) = xmmword_234386500;
  *(_OWORD *)(a1 + 156) = xmmword_234386510;
  *(void *)(a1 + 172) = 0x3DCCCCCD41F00000;
  *(_DWORD *)(a1 + 18ArcSharedObject::ArcSharedObject(this, 0) = 1097877340;
  *(unsigned char *)(a1 + 184) = 1;
  *(_OWORD *)(a1 + 192) = xmmword_23435FD90;
  *(unsigned char *)(a1 + 20re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 1;
  *(void *)(a1 + 224) = 0x3F8000003F2D42C4;
  *(void *)(a1 + 232) = 0xA3F800000;
  *(_OWORD *)(a1 + 24ArcSharedObject::ArcSharedObject(this, 0) = xmmword_234386520;
  *(void *)(a1 + 256) = 1056964608;
  *(_DWORD *)(a1 + 264) = 0x40000000;
  *(_WORD *)(a1 + 26re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 256;
  *(_WORD *)(a1 + re::DynamicArray<re::TraceEntry>::deinit((uint64_t)this + 272) = 1;
  *(unsigned char *)(a1 + 274) = 0;
  *(_DWORD *)(a1 + 276) = 897988541;
  *(void *)(a1 + 28ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *(void *)(a1 + 28re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0x3DCCCCCD3E800000;
  *(_DWORD *)(a1 + 296) = 16;
  *(_DWORD *)(a1 + 304) = -1;
  *(void *)(a1 + 316) = 0;
  *(void *)(a1 + 30re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
  *(_DWORD *)(a1 + 332) = 0;
  *(void *)(a1 + 324) = 0;
  *(void *)(a1 + 336) = a2;
  v5[0] = re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v5[1] = re::ecs2::ComponentImpl<re::ecs2::SceneUnderstandingRenderOptionsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  void v5[2] = re::ecs2::ComponentImpl<re::ecs2::ShadowClusterComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  void v5[3] = re::ecs2::ComponentImpl<re::ecs2::AnchorShadowMarker,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  _OWORD v5[4] = re::ecs2::ComponentImpl<re::ecs2::AnchorComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  v5[5] = re::ecs2::ComponentImpl<re::ecs2::AnchoringComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v4[0] = v5;
  v4[1] = 6;
  re::FixedArray<re::ecs2::ComponentTypeBase const*>::operator=((_anonymous_namespace_ *)(a1 + 312), (uint64_t)v4);
  return a1;
}

void re::ecs2::ProjectiveShadowReceiverStateImpl::didDependentComponentChange(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (re::ecs2::ComponentImpl<re::ecs2::SceneUnderstandingRenderOptionsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType == a4)
  {
    uint64_t v12 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(*(void *)(a2 + 8) + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ProjectiveShadowReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    if (v12)
    {
      uint64_t v13 = *(void *)(v12 + 24);
      if (v13)
      {
        uint64_t v14 = *(re::ecs2::Component ***)(v12 + 40);
        BOOL v15 = &v14[v13];
        do
        {
          uint64_t v16 = *v14;
          for (uint64_t i = 24; i != 56; i += 8)
          {
            unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a2 + 16), *(void *)(a2 + i), v16);
            if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
            {
              unint64_t v21 = v18;
              unint64_t v22 = v19;
              goto LABEL_26;
            }
          }
          unint64_t v21 = -1;
          unint64_t v22 = 0xFFFFFFFFLL;
LABEL_26:
          re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>::setComponentState(a2, v21, v22);
          ++v14;
        }
        while (v14 != v15);
      }
    }
  }
  else if (re::ecs2::ComponentImpl<re::ecs2::AnchorShadowMarker,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType == a4 {
         || re::ecs2::ComponentImpl<re::ecs2::AnchorComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType == a4
  }
         || re::ecs2::ComponentImpl<re::ecs2::AnchoringComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType == a4)
  {
    uint64_t v7 = *(void *)a2;
    uint64_t v37 = *(void *)(a2 + 8);
    uint64_t v8 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v7 + 56), &v37);
    if (v8 == -1) {
      return;
    }
    re::DynamicBitset<unsigned long long,256ul>::setBit(v7 + 168, *(void *)(*(void *)(v7 + 64) + 16 * v8 + 8));
    if (!*(unsigned char *)(v7 + 232)) {
      return;
    }
    unint64_t v9 = *(void *)(v7 + 176);
    int v10 = *(_DWORD *)(v7 + 184);
    if (v9 < 0xB)
    {
      if (v10) {
        int v31 = (uint64_t *)(v7 + 192);
      }
      else {
        int v31 = *(uint64_t **)(v7 + 200);
      }
      if (!v9) {
        return;
      }
      uint64_t v33 = 0;
      uint64_t v34 = 8 * v9;
      do
      {
        uint64_t v35 = *v31++;
        v33 |= v35;
        v34 -= 8;
      }
      while (v34);
      if (!v33) {
        return;
      }
    }
    else
    {
      if (v10) {
        uint64_t v11 = (void *)(v7 + 192);
      }
      else {
        uint64_t v11 = *(void **)(v7 + 200);
      }
      uint64_t v32 = 8 * v9;
      while (!*v11)
      {
        ++v11;
        v32 -= 8;
        if (!v32) {
          return;
        }
      }
    }
    uint64_t v36 = *(re::ecs2::System **)(v7 + 216);
    if (!*((unsigned char *)v36 + 86)) {
      re::ecs2::System::queueToRun(v36, 0.0);
    }
  }
  else
  {
    uint64_t v23 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a3 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ProjectiveShadowReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    if (v23)
    {
      uint64_t v24 = (re::ecs2::Component *)v23;
      uint64_t v25 = 24;
      unint64_t v26 = 0xFFFFFFFFLL;
      do
      {
        unint64_t v27 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a2 + 16), *(void *)(a2 + v25), v24);
        if (v27 != -1 && (v28 & 0xFFFFFF00000000) != 0)
        {
          unint64_t v30 = v27;
          unint64_t v26 = v28;
          goto LABEL_37;
        }
        v25 += 8;
      }
      while (v25 != 56);
      unint64_t v30 = -1;
LABEL_37:
      re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>::setComponentState(a2, v30, v26);
    }
  }
}

BOOL re::ecs2::ProjectiveShadowReceiverStateImpl::processDirtyComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v26, a5, 0);
  unint64_t v8 = v26;
  unint64_t v9 = v27;
  unint64_t v26 = a4;
  unint64_t v27 = v8;
  unint64_t v28 = v9;
  uint64_t v10 = (unsigned __int16)v9;
  uint64_t v11 = v9 & 0xFFFF0000;
  if (v8 != a5 || v10 != 0xFFFF || v11 != 4294901760)
  {
    int32x4_t v24 = vdupq_n_s32(0x7F800000u);
    while (1)
    {
      uint64_t v14 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v27);
      uint64_t v15 = *(void *)v14;
      uint64_t v16 = *(void *)(*(void *)(*(void *)v14 + 16) + 176);
      if (!v16) {
        break;
      }
      uint64_t v17 = *(void *)(v16 + 40);
      if (v17 != *(void *)(v15 + 88))
      {
        *(void *)&long long v18 = 0x7F0000007FLL;
        *((void *)&v18 + 1) = 0x7F0000007FLL;
        *(int32x4_t *)(v15 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v24;
        *(_OWORD *)(v15 + 64) = v18;
        re::AssetHandle::AssetHandle((re::AssetHandle *)v25, (const re::AssetHandle *)(v16 + 32));
LABEL_13:
        re::AssetHandle::operator=(v15 + 80, v25);
        re::AssetHandle::~AssetHandle((re::AssetHandle *)v25);
        uint64_t v17 = *(void *)(v15 + 88);
      }
      unint64_t v20 = v26;
      unint64_t v21 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v27);
      if (v17) {
        uint64_t v22 = 40;
      }
      else {
        uint64_t v22 = 32;
      }
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v20, v21, *(void *)(a3 + v22));
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v27);
      if (v27 == a5 && (unsigned __int16)v28 == 0xFFFF && WORD1(v28) == 0xFFFF) {
        return *(_DWORD *)(a5 + 40) != 0;
      }
    }
    *(void *)&long long v19 = 0x7F0000007FLL;
    *((void *)&v19 + 1) = 0x7F0000007FLL;
    *(int32x4_t *)(v15 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v24;
    *(_OWORD *)(v15 + 64) = v19;
    memset(v25, 0, sizeof(v25));
    goto LABEL_13;
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

BOOL re::ecs2::ProjectiveShadowReceiverStateImpl::processPreparingComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)v24, a5, 0);
  unint64_t v25 = a4;
  float32x4_t v26 = v24[0];
  if (v24[0].i64[0] != a5 || v24[0].u16[4] != 0xFFFFLL || (v24[0].i32[2] & 0xFFFF0000) != 4294901760)
  {
    do
    {
      uint64_t v10 = (float32x4_t **)re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v26);
      uint64_t v11 = *v10;
      uint64_t v12 = (uint64_t)&(*v10)[3];
      float32x4_t v13 = *(float32x4_t *)v12;
      float32x4_t v14 = (*v10)[4];
      uint32x4_t v15 = (uint32x4_t)vcgtq_f32(*(float32x4_t *)v12, v14);
      v15.i32[3] = v15.i32[2];
      if ((vmaxvq_u32(v15) & 0x80000000) != 0)
      {
        re::ecs2::ShadowHelper::expandSkinnedMeshBoundingBox(*v10 + 3, *(void *)(v11[1].i64[0] + 176), v24);
        float32x4_t v16 = v24[1];
        *(float32x4_t *)uint64_t v12 = v24[0];
        *(float32x4_t *)(v12 + 16) = v16;
        float32x4_t v13 = v11[3];
        float32x4_t v14 = v11[4];
      }
      uint32x4_t v17 = (uint32x4_t)vcgtq_f32(v13, v14);
      v17.i32[3] = v17.i32[2];
      long long v18 = (unint64_t *)(a3 + 48);
      if ((vmaxvq_u32(v17) & 0x80000000) == 0
        || (uint64_t v21 = v11[5].i64[1]) != 0
        && (v22 = atomic_load((unsigned int *)(v21 + 704)), long long v18 = (unint64_t *)(a3 + 32), v22 == 3))
      {
        unint64_t v19 = v25;
        unint64_t v20 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v26);
        re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v19, v20, *v18);
      }
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v26);
    }
    while (v26.i64[0] != a5 || v26.u16[4] != 0xFFFF || v26.u16[5] != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

BOOL re::ecs2::ProjectiveShadowReceiverStateImpl::processUpdatingComponents(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v307 = *MEMORY[0x263EF8340];
  uint64_t v228 = *(void *)(a3 + 8);
  uint64_t v261 = *(void *)(a3 + 48);
  uint64_t v9 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 336) + 136) + 24))(*(void *)(*(void *)(a1 + 336) + 136));
  uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
  if (*(_DWORD *)(v10 + 124)) {
    int v11 = *(_DWORD *)(v10 + 124);
  }
  else {
    int v11 = *(_DWORD *)(v10 + 16);
  }
  uint64_t v251 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 336) + 752) + 32))(*(void *)(*(void *)(a1 + 336) + 752));
  uint64_t v234 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 336) + 752) + 24))(*(void *)(*(void *)(a1 + 336) + 752));
  uint64_t v242 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 336) + 752) + 48))(*(void *)(*(void *)(a1 + 336) + 752));
  uint64_t v236 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 336) + 752) + 40))(*(void *)(*(void *)(a1 + 336) + 752));
  uint64_t v230 = a1;
  uint64_t v12 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 336) + 752) + 56))(*(void *)(*(void *)(a1 + 336) + 752));
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)v297, a5, 0);
  float32x4_t v13 = v297[0];
  v297[0].i64[0] = a4;
  *(float32x4_t *)((char *)v297 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v13;
  if (v13.i64[0] != a5 || v13.u16[4] != 0xFFFFLL || (v13.i32[2] & 0xFFFF0000) != 0xFFFF0000)
  {
    do
    {
      uint64_t v14 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*(&v297[0].u16[4]);
      if (!*(void *)v12) {
        goto LABEL_14;
      }
      unint64_t v15 = *(void *)(*(void *)v14 + 16);
      unint64_t v16 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * (v15 ^ (v15 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v15 ^ (v15 >> 30))) >> 27));
      uint64_t v17 = *(unsigned int *)(*(void *)(v12 + 8) + 4 * ((v16 ^ (v16 >> 31)) % *(unsigned int *)(v12 + 24)));
      if (v17 == 0x7FFFFFFF) {
        goto LABEL_14;
      }
      uint64_t v18 = *(void *)(v12 + 16);
      while (*(void *)(v18 + 32 * v17 + 16) != v15)
      {
        uint64_t v17 = *(_DWORD *)(v18 + 32 * v17 + 8) & 0x7FFFFFFF;
        if (v17 == 0x7FFFFFFF) {
          goto LABEL_14;
        }
      }
      if ((*(_DWORD *)(v18 + 32 * v17 + 28) & 0xFFFFFF) == 0)
      {
LABEL_14:
        unint64_t v19 = v297[0].i64[0];
        unint64_t v20 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle(&v297[0].u16[4]);
        re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v19, v20, *(void *)(a3 + 32));
      }
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v297[0].i16[4]);
    }
    while (v297[0].i64[1] != a5 || v297[1].u16[0] != 0xFFFF || v297[1].u16[1] != 0xFFFF);
  }
  uint64_t v23 = *(void *)(v230 + 336);
  uint64_t v24 = *(void *)(*(void *)(v23 + 112) + 104);
  if (v24)
  {
    uint64_t v232 = re::RenderFrameBox::get(v24 + 344, 0xFFFFFFFFFFFFFFFuLL);
    uint64_t v23 = *(void *)(v230 + 336);
  }
  else
  {
    uint64_t v232 = 0;
  }
  v292 = (re *)(*(uint64_t (**)(void))(**(void **)(v23 + 144) + 16))(*(void *)(v23 + 144));
  unint64_t v25 = re::globalAllocators(v292);
  uint64_t v26 = *(void *)(*(void *)(*(void *)(v230 + 336) + 112) + 136);
  uint64_t v246 = re::PerFrameAllocatorManager::perFrameAllocator(v25[6], *(void *)(v26 + 24) & 0xFFFFFFFFFFFFFFFLL | ((unint64_t)*(void *)(v26 + 16) << 60));
  unint64_t v27 = 245;
  unint64_t v28 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v29 = v27 >> 1;
    unint64_t v30 = &v28[v27 >> 1];
    signed int v32 = *v30;
    int v31 = v30 + 1;
    v27 += ~(v27 >> 1);
    if (v32 < v11 + 1) {
      unint64_t v28 = v31;
    }
    else {
      unint64_t v27 = v29;
    }
  }
  while (v27);
  uint64_t v33 = *v28;
  uint64_t v34 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v246 + 32))(v246, ((4 * v33 + 15) & 0x7FFFFFFF0) + 144 * v33, 16);
  if (!v34)
  {
LABEL_310:
    re::internal::assertLog((re::internal *)4, v35, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
    goto LABEL_311;
  }
  uint64_t v36 = v34;
  if (v33) {
    memset_pattern16(v34, &unk_2343655D0, 4 * v33);
  }
  uint64_t v37 = *(unsigned int *)(v234 + 32);
  float32x4_t v229 = v36;
  uint64_t v38 = 0;
  if (v37)
  {
    unint64_t v39 = (int *)(*(void *)(v234 + 16) + 8);
    while (1)
    {
      int v40 = *v39;
      v39 += 18;
      if (v40 < 0) {
        break;
      }
      if (v37 == ++v38)
      {
        LODWORD(v3re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = *(_DWORD *)(v234 + 32);
        break;
      }
    }
  }
  if (v37 == v38) {
    goto LABEL_306;
  }
  uint64_t v41 = v38;
  uint64_t v42 = *(void *)(v234 + 16);
  unsigned int v43 = *(_DWORD *)(v234 + 32);
  unsigned int v233 = v43;
  do
  {
    uint64_t v44 = v42 + 72 * v41;
    unint64_t v45 = *(unsigned int *)(v44 + 52);
    if (!v45) {
      goto LABEL_298;
    }
    int v235 = v38;
    long long v289 = 0uLL;
    int v290 = 0;
    uint64_t v291 = 0;
    v288 = (uint64_t *)v246;
    re::DynamicArray<re::Pair<re::AABB,unsigned int,true>>::setCapacity(&v288, v45);
    int v253 = ++v290;
    signed int v46 = *(_DWORD *)(v44 + 52);
    int v286 = 0;
    long long v284 = 0u;
    long long v285 = 0u;
    uint64_t v287 = 0x7FFFFFFFLL;
    re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)&v284, v246, v46);
    uint64_t v47 = *(unsigned int *)(v44 + 56);
    if (v47)
    {
      uint64_t v48 = 0;
      char v49 = (int *)(*(void *)(v44 + 40) + 8);
      while (1)
      {
        int v50 = *v49;
        v49 += 6;
        if (v50 < 0) {
          break;
        }
        if (v47 == ++v48)
        {
          LODWORD(v4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = *(_DWORD *)(v44 + 56);
          break;
        }
      }
    }
    else
    {
      LODWORD(v4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
    }
    if (v47 != v48)
    {
      uint64_t v51 = v48;
      unint64_t v52 = *((void *)&v289 + 1);
      do
      {
        uint64_t v53 = *(void *)(*(void *)(v44 + 40) + 24 * v51 + 16);
        v297[0].i64[0] = v53;
        *(_DWORD *)v262 = v52;
        unint64_t v54 = 0x94D049BB133111EBLL
            * ((0xBF58476D1CE4E5B9 * (v53 & 0xFFFFFF)) ^ ((0xBF58476D1CE4E5B9 * (v53 & 0xFFFFFF)) >> 27));
        unint64_t v55 = v54 ^ (v54 >> 31);
        if ((void)v284)
        {
          unint64_t v56 = v55 % DWORD2(v285);
          uint64_t v57 = *(unsigned int *)(*((void *)&v284 + 1) + 4 * v56);
          if (v57 != 0x7FFFFFFF)
          {
            do
            {
              uint64_t v58 = v285 + 32 * v57;
              int v60 = *(unsigned __int16 *)(v58 + 16);
              uint64_t v59 = v58 + 16;
              if (v60 == (unsigned __int16)v53
                && *(unsigned __int16 *)(v59 + 2) == WORD1(v53)
                && ((*(_DWORD *)(v285 + 32 * v57 + 20) ^ HIDWORD(v53)) & 0xFFFFFF) == 0)
              {
                goto LABEL_59;
              }
              uint64_t v57 = *(_DWORD *)(v285 + 32 * v57 + 8) & 0x7FFFFFFF;
            }
            while (v57 != 0x7FFFFFFF);
          }
        }
        else
        {
          LODWORD(v56) = 0;
        }
        re::HashTable<re::DataArrayHandle<re::ecs2::ShadowPlaneInfo>,unsigned int,re::Hash<re::DataArrayHandle<re::ecs2::ShadowPlaneInfo>>,re::EqualTo<re::DataArrayHandle<re::ecs2::ShadowPlaneInfo>>,true,false>::addAsMove((uint64_t)&v284, v56, v55, v297, v262);
        ++HIDWORD(v287);
LABEL_59:
        uint64_t v61 = (_anonymous_namespace_ *)re::DataArray<re::ecs2::ShadowPlaneInfo>::get(v251, v53);
        int v62 = v61;
        if (v52 >= (unint64_t)v289)
        {
          int v63 = v253;
          if ((unint64_t)v289 < v52 + 1)
          {
            if (v288)
            {
              unint64_t v64 = 8;
              if ((void)v289) {
                unint64_t v64 = 2 * v289;
              }
              if (v64 <= v52 + 1) {
                unint64_t v65 = v52 + 1;
              }
              else {
                unint64_t v65 = v64;
              }
              re::DynamicArray<re::Pair<re::AABB,unsigned int,true>>::setCapacity(&v288, v65);
              int v63 = v290;
            }
            else
            {
              re::DynamicArray<re::Pair<re::AABB,unsigned int,true>>::setCapacity(&v288, v52 + 1);
              int v63 = v290 + 1;
            }
          }
          unint64_t v52 = *((void *)&v289 + 1);
        }
        else
        {
          int v63 = v253;
        }
        float32x4_t v66 = (_OWORD *)(v291 + 48 * v52);
        long long v68 = *((_OWORD *)v62 + 2);
        long long v67 = *((_OWORD *)v62 + 3);
        *float32x4_t v66 = *((_OWORD *)v62 + 1);
        v66[1] = v68;
        v66[2] = v67;
        *((void *)&v289 + 1) = ++v52;
        int v253 = v63 + 1;
        int v290 = v63 + 1;
        if (*(_DWORD *)(v44 + 56) <= (v48 + 1)) {
          int v69 = v48 + 1;
        }
        else {
          int v69 = *(_DWORD *)(v44 + 56);
        }
        while (1)
        {
          uint64_t v51 = (v48 + 1);
          if (v69 - 1 == v48) {
            break;
          }
          LODWORD(v4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v48 + 1;
          int v70 = v51;
          if ((*(_DWORD *)(*(void *)(v44 + 40) + 24 * v51 + 8) & 0x80000000) != 0) {
            goto LABEL_78;
          }
        }
        int v70 = v69;
LABEL_78:
        LODWORD(v4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v70;
      }
      while (v47 != v70);
    }
    long long v281 = 0uLL;
    int v282 = 0;
    uint64_t v283 = 0;
    v280 = (uint64_t *)v246;
    re::DynamicArray<re::RigNodeConstraint>::setCapacity(&v280, 0);
    int v252 = ++v282;
    if (!*(void *)v236) {
      goto LABEL_291;
    }
    unint64_t v71 = *(void *)(v44 + 16);
    unint64_t v72 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * (v71 ^ (v71 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v71 ^ (v71 >> 30))) >> 27));
    uint64_t v73 = *(unsigned int *)(*(void *)(v236 + 8) + 4 * ((v72 ^ (v72 >> 31)) % *(unsigned int *)(v236 + 24)));
    if (v73 == 0x7FFFFFFF) {
      goto LABEL_291;
    }
    uint64_t v74 = *(void *)(v236 + 16);
    while (*(void *)(v74 + 72 * v73 + 16) != v71)
    {
      LODWORD(v73) = *(_DWORD *)(v74 + 72 * v73 + 8) & 0x7FFFFFFF;
      if (v73 == 0x7FFFFFFF) {
        goto LABEL_291;
      }
    }
    float32x4_t v231 = (uint64_t *)(v44 + 16);
    uint64_t v75 = v74 + 72 * v73;
    unint64_t v76 = *(unsigned int *)(v75 + 52);
    uint64_t v77 = v75 + 24;
    float32x4_t v277 = 0uLL;
    int v278 = 0;
    uint64_t v279 = 0;
    unint64_t v78 = v246;
    uint64_t v276 = v246;
    re::DynamicArray<re::ShadowClusterInfo>::setCapacity(&v276, v76);
    ++v278;
    unint64_t v79 = *(unsigned int *)(v75 + 52);
    unint64_t v272 = 0;
    unint64_t v273 = 0;
    int v274 = 0;
    uint64_t v275 = 0;
    v271 = (uint64_t *)v246;
    re::DynamicArray<re::DynamicArray<unsigned char>>::setCapacity(&v271, v79);
    int v244 = ++v274;
    uint64_t v249 = *(unsigned int *)(v75 + 56);
    uint64_t v80 = 0;
    if (v249)
    {
      float32x4_t v81 = (int *)(*(void *)(v75 + 40) + 8);
      __n128 v82 = 0uLL;
      while (1)
      {
        int v83 = *v81;
        v81 += 6;
        if (v83 < 0) {
          break;
        }
        if (v249 == ++v80)
        {
          LODWORD(v8ArcSharedObject::ArcSharedObject(this, 0) = *(_DWORD *)(v75 + 56);
          break;
        }
      }
    }
    else
    {
      __n128 v82 = 0uLL;
    }
    if (v249 != v80)
    {
      uint64_t v84 = v80;
      unint64_t v238 = DWORD2(v285);
      long long v85 = v284;
      uint64_t v247 = v75 + 24;
      unint64_t v240 = v285;
      do
      {
        uint64_t v86 = re::DataArray<re::ecs2::ProjectiveShadowClusterInfo>::get(v242, *(void *)(*(void *)(v77 + 16) + 24 * v84 + 16));
        unint64_t v87 = *(unsigned int *)(v86 + 60);
        *(void *)&v262[16] = 0;
        *(_DWORD *)&v262[24] = 0;
        v263.i64[0] = 0;
        *(_OWORD *)v262 = (unint64_t)v246;
        re::DynamicArray<re::internal::AnimationCompositionChainEntry>::setCapacity(v262, v87);
        int v258 = ++*(_DWORD *)&v262[24];
        unint64_t v88 = *(unsigned int *)(v86 + 60);
        *(void *)&v306[16] = 0;
        *(_DWORD *)&v306[24] = 0;
        *(void *)&v306[32] = 0;
        *(_OWORD *)v306 = (unint64_t)v246;
        re::DynamicArray<float *>::setCapacity(v306, v88);
        int v89 = ++*(_DWORD *)&v306[24];
        uint64_t v90 = *(unsigned int *)(v86 + 64);
        if (v90)
        {
          unint64_t v78 = 0;
          uint64_t v91 = (int *)(*(void *)(v86 + 48) + 8);
          __n128 v82 = 0uLL;
          while (1)
          {
            int v92 = *v91;
            v91 += 12;
            if (v92 < 0) {
              break;
            }
            if (v90 == ++v78)
            {
              unint64_t v78 = *(unsigned int *)(v86 + 64);
              break;
            }
          }
        }
        else
        {
          unint64_t v78 = 0;
          __n128 v82 = 0uLL;
        }
        if (v90 == v78) {
          goto LABEL_152;
        }
        int v254 = v89;
        BOOL v256 = 0;
        unint64_t v93 = v78;
        uint64_t v94 = *(void *)(v86 + 48);
        do
        {
          uint64_t v95 = 0;
          uint64_t v96 = v94 + 48 * v93;
          uint64_t v97 = v96 + 24;
          id v98 = *(unint64_t **)(v96 + 16);
          while (1)
          {
            unint64_t v99 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), *(void *)(a3 + 24 + v95), (re::ecs2::Component *)v98);
            if (v99 != -1 && (v100 & 0xFFFFFF00000000) != 0) {
              break;
            }
            v95 += 8;
            if (v95 == 32)
            {
              unint64_t v99 = -1;
              break;
            }
          }
          if (v261 == v99)
          {
            uint64_t v102 = (_anonymous_namespace_ *)re::ecs2::RenderOptions::forEntity((re::ecs2::RenderOptions *)&v292, v98[2]);
            if (*(unsigned char *)v102)
            {
              uint64_t v103 = *(void *)&v306[16];
              int v104 = v254;
              if (*(void *)&v306[16] >= *(void *)&v306[8])
              {
                unint64_t v105 = *(void *)&v306[16] + 1;
                if (*(void *)&v306[8] < (unint64_t)(*(void *)&v306[16] + 1))
                {
                  if (*(void *)v306)
                  {
                    unint64_t v106 = 2 * *(void *)&v306[8];
                    if (!*(void *)&v306[8]) {
                      unint64_t v106 = 8;
                    }
                    if (v106 <= v105) {
                      unint64_t v107 = *(void *)&v306[16] + 1;
                    }
                    else {
                      unint64_t v107 = v106;
                    }
                    uint64_t v102 = (_anonymous_namespace_ *)re::DynamicArray<float *>::setCapacity(v306, v107);
                    int v104 = *(_DWORD *)&v306[24];
                  }
                  else
                  {
                    uint64_t v102 = (_anonymous_namespace_ *)re::DynamicArray<float *>::setCapacity(v306, v105);
                    int v104 = *(_DWORD *)&v306[24] + 1;
                  }
                }
                uint64_t v103 = *(void *)&v306[16];
              }
              *(void *)(*(void *)&v306[32] + 8 * v103) = v98;
              *(void *)&v306[16] = v103 + 1;
              int v254 = v104 + 1;
              *(_DWORD *)&v306[24] = v104 + 1;
              unint64_t v108 = v98[2];
              uint64_t v109 = *(void *)(v108 + 224);
              if (v109)
              {
                char v110 = v256 || *(unsigned char *)(v109 + 76) != 0;
              }
              else
              {
                uint64_t v102 = (_anonymous_namespace_ *)re::ecs2::RenderOptions::forEntity((re::ecs2::RenderOptions *)&v292, v108);
                if (*((unsigned char *)v102 + 16)) {
                  char v111 = *((unsigned char *)v102 + 17);
                }
                else {
                  char v111 = 1;
                }
                char v110 = v111 | v256;
              }
              uint64_t v112 = *(void *)&v262[16];
              int v113 = v258;
              if (*(void *)&v262[16] >= *(void *)&v262[8])
              {
                unint64_t v114 = *(void *)&v262[16] + 1;
                if (*(void *)&v262[8] < (unint64_t)(*(void *)&v262[16] + 1))
                {
                  if (*(void *)v262)
                  {
                    unint64_t v115 = 2 * *(void *)&v262[8];
                    if (!*(void *)&v262[8]) {
                      unint64_t v115 = 8;
                    }
                    if (v115 <= v114) {
                      unint64_t v116 = *(void *)&v262[16] + 1;
                    }
                    else {
                      unint64_t v116 = v115;
                    }
                    re::DynamicArray<re::internal::AnimationCompositionChainEntry>::setCapacity(v262, v116);
                    int v113 = *(_DWORD *)&v262[24];
                  }
                  else
                  {
                    re::DynamicArray<re::internal::AnimationCompositionChainEntry>::setCapacity(v262, v114);
                    int v113 = *(_DWORD *)&v262[24] + 1;
                  }
                }
                uint64_t v112 = *(void *)&v262[16];
              }
              uint64_t v117 = v263.i64[0] + 24 * v112;
              uint64_t v118 = *(void *)(v97 + 16);
              *(_OWORD *)uint64_t v117 = *(_OWORD *)v97;
              *(void *)(v117 + 16) = v118;
              *(void *)&v262[16] = v112 + 1;
              int v258 = v113 + 1;
              *(_DWORD *)&v262[24] = v113 + 1;
              BOOL v256 = v110 != 0;
            }
          }
          __n128 v82 = 0uLL;
          unsigned int v119 = *(_DWORD *)(v86 + 64);
          uint64_t v94 = *(void *)(v86 + 48);
          if (v119 <= (int)v78 + 1) {
            unint64_t v120 = (v78 + 1);
          }
          else {
            unint64_t v120 = v119;
          }
          while (1)
          {
            unint64_t v93 = (v78 + 1);
            if (v120 - 1 == v78) {
              break;
            }
            LODWORD(v7re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v78 + 1;
            unint64_t v121 = v93;
            if ((*(_DWORD *)(v94 + 48 * v93 + 8) & 0x80000000) != 0) {
              goto LABEL_147;
            }
          }
          unint64_t v121 = v120;
LABEL_147:
          unint64_t v78 = v121;
        }
        while (v90 != v121);
        if (!v256)
        {
LABEL_152:
          uint64_t v77 = v247;
        }
        else
        {
          memset(v297, 0, 32);
          unint64_t v78 = v240;
          if ((void)v85
            && (uint64_t v122 = *(void *)(v86 + 16),
                unint64_t v123 = 0x94D049BB133111EBLL
                     * ((0xBF58476D1CE4E5B9 * (v122 & 0xFFFFFF)) ^ ((0xBF58476D1CE4E5B9 * (v122 & 0xFFFFFF)) >> 27)),
                uint64_t v124 = *(unsigned int *)(*((void *)&v85 + 1) + 4 * ((v123 ^ (v123 >> 31)) % v238)),
                v124 != 0x7FFFFFFF))
          {
            do
            {
              unint64_t v126 = v240 + 32 * v124;
              int v128 = *(unsigned __int16 *)(v126 + 16);
              unint64_t v127 = v126 + 16;
              if (v128 == (unsigned __int16)v122 && *(unsigned __int16 *)(v127 + 2) == WORD1(v122))
              {
                uint64_t v125 = v124;
                if (((*(_DWORD *)(v240 + 32 * v124 + 20) ^ HIDWORD(v122)) & 0xFFFFFF) == 0) {
                  break;
                }
              }
              uint64_t v124 = *(_DWORD *)(v240 + 32 * v124 + 8) & 0x7FFFFFFF;
              uint64_t v125 = 0x7FFFFFFFLL;
            }
            while (v124 != 0x7FFFFFFF);
          }
          else
          {
            uint64_t v125 = 0x7FFFFFFFLL;
          }
          v297[2].i64[0] = *(unsigned int *)(v240 + 32 * v125 + 24);
          v297[2].i8[8] = 0;
          v297[2].i32[3] = *(_DWORD *)(v86 + 24);
          *(void *)v298 = *(void *)v262;
          *(_OWORD *)&v298[8] = *(_OWORD *)&v262[8];
          memset(v262, 0, 24);
          *(void *)&v298[32] = v263.i64[0];
          v263.i64[0] = 0;
          *(_DWORD *)&v262[24] = v258 + 1;
          *(_DWORD *)&v298[24] = 1;
          __n128 v129 = re::DynamicArray<re::ShadowClusterInfo>::add((_anonymous_namespace_ *)&v276, (uint64_t)v297);
          int v130 = *(_anonymous_namespace_ **)v298;
          if (*(void *)v298 && *(void *)&v298[32]) {
            int v130 = (_anonymous_namespace_ *)(*(uint64_t (**)(__n128))(**(void **)v298 + 40))(v129);
          }
          unint64_t v131 = v273;
          uint64_t v77 = v247;
          if (v273 >= v272)
          {
            unint64_t v132 = v273 + 1;
            if (v272 < v273 + 1)
            {
              if (v271)
              {
                unint64_t v133 = 2 * v272;
                if (!v272) {
                  unint64_t v133 = 8;
                }
                if (v133 <= v132) {
                  unint64_t v134 = v273 + 1;
                }
                else {
                  unint64_t v134 = v133;
                }
                re::DynamicArray<re::DynamicArray<unsigned char>>::setCapacity(&v271, v134);
                int v244 = v274;
              }
              else
              {
                re::DynamicArray<re::DynamicArray<unsigned char>>::setCapacity(&v271, v132);
                int v244 = ++v274;
              }
            }
            unint64_t v131 = v273;
          }
          uint64_t v135 = v275 + 40 * v131;
          *(void *)(v135 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
          *(void *)(v135 + 16) = 0;
          *(void *)uint64_t v135 = *(void *)v306;
          long long v136 = *(_OWORD *)&v306[8];
          memset(v306, 0, 24);
          *(_OWORD *)(v135 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v136;
          *(void *)(v135 + 32) = *(void *)&v306[32];
          *(void *)&v306[32] = 0;
          *(_DWORD *)(v135 + 24) = 1;
          unint64_t v273 = v131 + 1;
          int v274 = ++v244;
          __n128 v82 = 0uLL;
        }
        if (*(void *)v306 && *(void *)&v306[32])
        {
          (*(void (**)(__n128))(**(void **)v306 + 40))((__n128)0);
          __n128 v82 = 0uLL;
        }
        if (*(void *)v262 && v263.i64[0])
        {
          (*(void (**)(__n128))(**(void **)v262 + 40))((__n128)0);
          __n128 v82 = 0uLL;
        }
        if (*(_DWORD *)(v77 + 32) <= (v80 + 1)) {
          int v137 = v80 + 1;
        }
        else {
          int v137 = *(_DWORD *)(v77 + 32);
        }
        while (1)
        {
          uint64_t v84 = (v80 + 1);
          if (v137 - 1 == v80) {
            break;
          }
          LODWORD(v8ArcSharedObject::ArcSharedObject(this, 0) = v80 + 1;
          int v138 = v84;
          if ((*(_DWORD *)(*(void *)(v77 + 16) + 24 * v84 + 8) & 0x80000000) != 0) {
            goto LABEL_185;
          }
        }
        int v138 = v137;
LABEL_185:
        LODWORD(v8ArcSharedObject::ArcSharedObject(this, 0) = v138;
      }
      while (v249 != v138);
    }
    if (!v277.i64[1]) {
      goto LABEL_283;
    }
    v263.i32[0] = 0;
    *(__n128 *)v262 = v82;
    *(__n128 *)&v262[16] = v82;
    *(uint64_t *)((char *)v263.i64 + 4) = 0x7FFFFFFFLL;
    re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v262, v246, 3);
    if (!v277.i64[1]) {
      goto LABEL_238;
    }
    unint64_t v139 = 0;
    uint64_t v243 = v275;
    unint64_t v245 = v273;
    uint64_t v239 = v291;
    unint64_t v241 = *((void *)&v289 + 1);
    do
    {
      if (v139 == v245)
      {
        v294.i64[0] = 0;
        memset(v298, 0, 32);
        memset(v297, 0, sizeof(v297));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v306 = 136315906;
        *(void *)&v306[4] = "operator[]";
        *(_WORD *)&v306[12] = 1024;
        *(_DWORD *)&v306[14] = 797;
        *(_WORD *)&v306[18] = 2048;
        *(void *)&v306[20] = v245;
        *(_WORD *)&v306[28] = 2048;
        *(void *)&v306[30] = v245;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_308:
        v294.i64[0] = 0;
        memset(v298, 0, 32);
        memset(v297, 0, sizeof(v297));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v306 = 136315906;
        *(void *)&v306[4] = "operator[]";
        *(_WORD *)&v306[12] = 1024;
        *(_DWORD *)&v306[14] = 797;
        *(_WORD *)&v306[18] = 2048;
        *(void *)&v306[20] = v78;
        *(_WORD *)&v306[28] = 2048;
        *(void *)&v306[30] = v241;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_309:
        v294.i64[0] = 0;
        memset(v298, 0, 32);
        memset(v297, 0, sizeof(v297));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v306 = 136315906;
        *(void *)&v306[4] = "operator[]";
        *(_WORD *)&v306[12] = 1024;
        *(_DWORD *)&v306[14] = 789;
        *(_WORD *)&v306[18] = 2048;
        *(void *)&v306[20] = v78;
        *(_WORD *)&v306[28] = 2048;
        *(void *)&v306[30] = v245;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_310;
      }
      uint64_t v140 = v279;
      unint64_t v78 = *(unsigned int *)(v279 + 96 * v139 + 32);
      if (v241 <= v78) {
        goto LABEL_308;
      }
      float32x4_t v141 = (float32x4_t *)(v239 + 48 * v78);
      float32x4_t v248 = v141[1];
      float32x4_t v250 = *v141;
      float32x4_t v296 = 0uLL;
      unint64_t v142 = v243 + 40 * v139;
      uint64_t v143 = *(void *)(v142 + 16);
      if (v143)
      {
        char v144 = 0;
        long long v237 = (float32x4_t *)(v279 + 96 * v139);
        unint64_t v78 = *(void *)(v142 + 32);
        uint64_t v145 = 8 * v143;
        float v146 = INFINITY;
        do
        {
          uint64_t v147 = *(void *)v78;
          uint64_t v148 = *(void *)(*(void *)v78 + 16);
          re::ecs2::TransformComponent::worldMatrix4x4F((re::ecs2::TransformComponent **)v148, (const re::ecs2::Entity *)1, v297);
          float32x4_t v149 = *(float32x4_t *)(v147 + 64);
          *(_OWORD *)v306 = *(_OWORD *)(v147 + 48);
          *(float32x4_t *)&v306[16] = v149;
          uint32x4_t v150 = (uint32x4_t)vcgtq_f32(*(float32x4_t *)v306, v149);
          v150.i32[3] = v150.i32[2];
          if ((vmaxvq_u32(v150) & 0x80000000) == 0)
          {
            if ((re::AABB::transform((float32x4_t *)v306, v297, (uint64_t)&v294),
                  float32x4_t v151 = vsubq_f32(v295, v294),
                  v151.i32[3] = 0,
                  float32x4_t v152 = vmaxnmq_f32(v151, (float32x4_t)0),
                  v152.f32[0] != 0.0)
              && (float v153 = fabsf(v152.f32[0]), v153 >= (float)((float)(v153 + 1.0) * 0.00001))
              || v152.f32[1] != 0.0 && (float v154 = fabsf(v152.f32[1]), v154 >= (float)((float)(v154 + 1.0) * 0.00001))
              || v152.f32[2] != 0.0 && (float v155 = fabsf(v152.f32[2]), v155 >= (float)((float)(v155 + 1.0) * 0.00001)))
            {
              float32x4_t v257 = v294;
              float32x4_t v259 = v295;
              float32x4_t v255 = v152;
              if (v296.f32[3] <= 0.00001)
              {
                re::BoundingSphere::BoundingSphere(&v296, (uint64_t)v306, v297);
              }
              else
              {
                re::BoundingSphere::BoundingSphere(&v293, (uint64_t)v306, v297);
                re::BoundingSphere::expandToIncludeSphere(&v296, &v293, v156, v157, v158, v159, v160, v161);
              }
              if (*(unsigned char *)(v147 + 40))
              {
                uint32x4_t v162 = (uint32x4_t)vcgtq_f32(v257, v259);
                v162.i32[3] = v162.i32[2];
                if ((vmaxvq_u32(v162) & 0x80000000) != 0)
                {
                  float32x4_t v164 = 0uLL;
                  v163.i64[0] = 0x3F0000003F000000;
                  v163.i64[1] = 0x3F0000003F000000;
                }
                else
                {
                  v163.i64[0] = 0x3F0000003F000000;
                  v163.i64[1] = 0x3F0000003F000000;
                  float32x4_t v164 = vmulq_f32(vaddq_f32(v259, v257), v163);
                }
                float32x4_t v165 = vmulq_f32(v250, vsubq_f32(v164, v248));
                float v166 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v165, 2), vaddq_f32(v165, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v165.f32, 1))).f32[0];
                float32x4_t v167 = vmulq_f32(v250, vmulq_f32(v255, v163));
                float v168 = fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v167, 2), vaddq_f32(v167, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v167.f32, 1))).f32[0]);
                float v169 = v168 + v166;
                if ((float)(v168 + v166) >= 0.0)
                {
                  v293.i64[0] = *(void *)(v148 + 296);
                  float v260 = v166;
                  re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew((uint64_t)v262, (uint64_t *)&v293);
                  float v166 = v260;
                }
                v144 |= v169 >= 0.0;
                if (v146 > (float)(v166 - v168)) {
                  float v146 = v166 - v168;
                }
              }
            }
          }
          v78 += 8;
          v145 -= 8;
        }
        while (v145);
        if (v144)
        {
          *long long v237 = v296;
          uint64_t v170 = v140 + 96 * v139;
          *(float *)(v170 + 36) = v146;
          *(unsigned char *)(v170 + 4ArcSharedObject::ArcSharedObject(this, 0) = 1;
        }
      }
      ++v139;
      unint64_t v171 = v277.u64[1];
    }
    while (v139 < v277.i64[1]);
    if (v277.i64[1])
    {
      unint64_t v78 = 0;
      do
      {
        if (*(unsigned char *)(v279 + 96 * v78 + 40))
        {
          if (v245 <= v78) {
            goto LABEL_309;
          }
          unint64_t v172 = v243 + 40 * v78;
          uint64_t v173 = *(void *)(v172 + 16);
          if (v173)
          {
            uint64_t v174 = *(void *)(v172 + 32);
            float v175 = (int *)(v279 + 96 * v78 + 32);
            uint64_t v176 = 8 * v173;
            do
            {
              uint64_t v177 = *(void *)(*(void *)v174 + 16);
              v297[0].i64[0] = *(void *)(v177 + 296);
              BOOL v178 = re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::contains((uint64_t)v262, (uint64_t *)v297);
              if (v178)
              {
                uint64_t v179 = *(void *)(v177 + 296);
                int v180 = *v175;
                uint64_t v181 = *((void *)&v281 + 1);
                if (*((void *)&v281 + 1) >= (unint64_t)v281)
                {
                  unint64_t v182 = *((void *)&v281 + 1) + 1;
                  if ((unint64_t)v281 < *((void *)&v281 + 1) + 1)
                  {
                    if (v280)
                    {
                      unint64_t v183 = 2 * v281;
                      if (!(void)v281) {
                        unint64_t v183 = 8;
                      }
                      if (v183 <= v182) {
                        unint64_t v184 = *((void *)&v281 + 1) + 1;
                      }
                      else {
                        unint64_t v184 = v183;
                      }
                      re::DynamicArray<re::RigNodeConstraint>::setCapacity(&v280, v184);
                      int v185 = v282;
                    }
                    else
                    {
                      re::DynamicArray<re::RigNodeConstraint>::setCapacity(&v280, v182);
                      int v185 = v282 + 1;
                    }
                    int v252 = v185;
                  }
                  uint64_t v181 = *((void *)&v281 + 1);
                }
                uint64_t v186 = v283 + 16 * v181;
                *(void *)uint64_t v186 = v179;
                *(_DWORD *)(v186 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v180;
                *((void *)&v281 + 1) = v181 + 1;
                int v282 = ++v252;
              }
              v174 += 8;
              v176 -= 8;
            }
            while (v176);
            unint64_t v171 = v277.u64[1];
          }
        }
        ++v78;
      }
      while (v78 < v171);
    }
LABEL_238:
    re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)v262);
    v297[1].i64[0] = 0;
    v297[1].i32[2] = 0;
    v297[2].i64[0] = 0;
    v297[0] = (float32x4_t)(unint64_t)v276;
    re::DynamicArray<re::ShadowClusterInfo>::setCapacity(v297, 0);
    ++v297[1].i32[2];
    if (v277.i64[1])
    {
      uint64_t v188 = v279;
      uint64_t v189 = 96 * v277.i64[1];
      do
      {
        if (*(unsigned char *)(v188 + 40)) {
          re::DynamicArray<re::ShadowClusterInfo>::add((_anonymous_namespace_ *)v297, v188);
        }
        v188 += 96;
        v189 -= 96;
      }
      while (v189);
    }
    uint64_t v190 = v276;
    if (v276) {
      BOOL v191 = v297[0].i64[0] == 0;
    }
    else {
      BOOL v191 = 1;
    }
    if (!v191 && v276 != v297[0].i64[0])
    {
LABEL_312:
      re::internal::assertLog((re::internal *)4, v187, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || !other.isInitialized() || m_allocator == other.m_allocator", "operator=", 503);
      _os_crash();
      __break(1u);
    }
    uint64_t v276 = v297[0].i64[0];
    v297[0].i64[0] = v190;
    float32x4_t v193 = v277;
    float32x4_t v277 = *(float32x4_t *)((char *)v297 + 8);
    *(float32x4_t *)((char *)v297 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v193;
    uint64_t v194 = v279;
    uint64_t v279 = v297[2].i64[0];
    v297[2].i64[0] = v194;
    ++v297[1].i32[2];
    ++v278;
    re::DynamicArray<re::ShadowClusterInfo>::deinit((uint64_t)v297);
    if (v277.i64[1])
    {
      uint64_t StreamNameForWorldRoot = re::RenderFrame::getStreamNameForWorldRoot((re::DynamicString **)v232, (const re::StringID *)(*(void *)(v228 + 104) + 272), *v231);
      uint64_t v196 = *(char **)(StreamNameForWorldRoot + 16);
      if ((*(unsigned char *)(StreamNameForWorldRoot + 8) & 1) == 0) {
        uint64_t v196 = (char *)(StreamNameForWorldRoot + 9);
      }
      if (v196)
      {
        uint64_t v197 = *v196;
        if (*v196)
        {
          char v198 = v196[1];
          if (v198)
          {
            v199 = (unsigned __int8 *)(v196 + 2);
            do
            {
              uint64_t v197 = 31 * v197 + v198;
              int v200 = *v199++;
              char v198 = v200;
            }
            while (v200);
          }
        }
      }
      else
      {
        uint64_t v197 = 0;
      }
      v294.i64[1] = (uint64_t)v196;
      v294.i64[0] = 2 * v197;
      uint64_t v270 = v197 & 0x7FFFFFFFFFFFFFFFLL;
      uint64_t v201 = v283;
      *(void *)v262 = v280;
      v280 = 0;
      *(_OWORD *)&v262[8] = v281;
      long long v281 = 0u;
      uint64_t v283 = 0;
      int v282 = v252 + 1;
      *(_DWORD *)&v262[24] = 1;
      v263.i64[0] = v201;
      v263.i64[1] = v276;
      uint64_t v276 = 0;
      float32x4_t v264 = v277;
      float32x4_t v277 = 0u;
      uint64_t v202 = v279;
      uint64_t v279 = 0;
      ++v278;
      int v265 = 1;
      *(void *)&long long v266 = v202;
      *((void *)&v266 + 1) = v288;
      v288 = 0;
      long long v267 = v289;
      long long v289 = 0u;
      uint64_t v269 = v291;
      uint64_t v291 = 0;
      int v290 = v253 + 1;
      int v268 = 1;
      uint64_t v203 = re::RenderFrameData::stream((re::RenderFrameData *)(v232 + 264), (const re::WeakStringID *)&v270);
      uint64_t v204 = (uint64_t (**)(uint64_t, void, void, void *, void *))re::HashTable<std::type_index,re::RenderFrameDataArrayWrapper,re::Hash<std::type_index>,re::EqualTo<std::type_index>,true,false>::tryGet(v203, (uint64_t *)&v293);
      if (!v204)
      {
        uint64_t v205 = *(void *)(*(void *)(v203 + 48) + 8);
        uint64_t v206 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v205 + 32))(v205, 56, 8);
        *(void *)uint64_t v206 = 0;
        *(void *)(v206 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
        *(_DWORD *)(v206 + 16) = 1;
        *(void *)(v206 + 32) = 0;
        *(void *)(v206 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
        *(void *)(v206 + 24) = 0;
        *(_DWORD *)(v206 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
        v207 = (re *)re::BucketArray<re::ProjectiveShadowBuilder::Input::PerSceneData,4ul>::init(v206, v205, 1uLL);
        uint64_t v208 = re::globalAllocators(v207)[2];
        *(void *)v306 = &unk_26E6FAF58;
        *(void *)&v306[8] = v205;
        *(void *)&v306[24] = v208;
        *(void *)&v306[32] = v306;
        v297[0].i64[1] = v206;
        v297[0].i64[0] = (uint64_t)std::__any_imp::_SmallHandler<re::BucketArray<re::ProjectiveShadowBuilder::Input::PerSceneData,4ul> *>::__handle[abi:nn180100];
        *(void *)&v298[8] = v208;
        *(void *)&v298[16] = 0;
        re::FunctionBase<24ul,void ()(re::RenderFrameDataArrayWrapper *)>::operator=<24ul>((uint64_t)&v297[2], (uint64_t)v306);
        uint64_t v204 = (uint64_t (**)(uint64_t, void, void, void *, void *))re::HashTable<std::type_index,re::RenderFrameDataArrayWrapper,re::Hash<std::type_index>,re::EqualTo<std::type_index>,true,false>::addNew(v203, (uint64_t *)&v293, (re *)v297);
        if (*(void *)&v298[16])
        {
          v296.i64[0] = (uint64_t)v297;
          (*(void (**)(void, float32x4_t *))(**(void **)&v298[16] + 16))(*(void *)&v298[16], &v296);
        }
        re::FunctionBase<24ul,void ()(re::RenderFrameDataArrayWrapper *)>::destroyCallable((uint64_t)&v297[2]);
        if (v297[0].i64[0]) {
          ((void (*)(void, float32x4_t *, void, void, void))v297[0].i64[0])(0, v297, 0, 0, 0);
        }
        re::FunctionBase<24ul,void ()(re::RenderFrameDataArrayWrapper *)>::destroyCallable((uint64_t)v306);
      }
      v297[0].i64[0] = *(void *)v262;
      memset(v262, 0, 24);
      *(float32x4_t *)((char *)v297 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = *(float32x4_t *)&v262[8];
      ++*(_DWORD *)&v262[24];
      v297[1].i32[2] = 1;
      v297[2] = v263;
      *(float32x4_t *)v298 = v264;
      float32x4_t v263 = 0u;
      float32x4_t v264 = 0u;
      ++v265;
      *(_OWORD *)&v298[24] = v266;
      long long v266 = 0u;
      *(_OWORD *)&v298[40] = v267;
      long long v267 = 0u;
      *(void *)&v298[64] = v269;
      uint64_t v269 = 0;
      ++v268;
      *(_DWORD *)&v298[16] = 1;
      *(_DWORD *)&v298[56] = 1;
      re::BucketArray<re::ProjectiveShadowBuilder::Input::PerSceneData,4ul>::add(v209, (uint64_t)v297);
      if (*(void *)&v298[32])
      {
        if (*(void *)&v298[64]) {
          (*(void (**)(void))(**(void **)&v298[32] + 40))();
        }
        *(void *)&v298[64] = 0;
        memset(&v298[32], 0, 24);
        ++*(_DWORD *)&v298[56];
      }
      re::DynamicArray<re::ShadowClusterInfo>::deinit((uint64_t)&v297[2].i64[1]);
      if (v297[0].i64[0])
      {
        uint64_t v210 = v297[2].i64[0];
        if (v297[2].i64[0]) {
          (*(void (**)(void))(*(void *)v297[0].i64[0] + 40))();
        }
      }
      uint64_t v211 = *(void *)(v209 + 40);
      if (v211)
      {
        re::BucketArray<re::ProjectiveShadowBuilder::Input::PerSceneData,4ul>::operator[](v209, v211 - 1);
        if (*((void *)&v266 + 1))
        {
          if (v269) {
            (*(void (**)(void))(**((void **)&v266 + 1) + 40))();
          }
          uint64_t v269 = 0;
          long long v267 = 0uLL;
          *((void *)&v266 + 1) = 0;
          ++v268;
        }
        re::DynamicArray<re::ShadowClusterInfo>::deinit((uint64_t)&v263.i64[1]);
        if (*(void *)v262 && v263.i64[0]) {
          (*(void (**)(void))(**(void **)v262 + 40))();
        }
        re::StringID::destroyString((re::StringID *)&v294);
        goto LABEL_283;
      }
LABEL_311:
      re::internal::assertLog((re::internal *)4, v210, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
      _os_crash();
      __break(1u);
      goto LABEL_312;
    }
LABEL_283:
    long long v212 = v271;
    if (v271)
    {
      uint64_t v213 = v275;
      if (v275)
      {
        if (v273)
        {
          uint64_t v214 = 40 * v273;
          uint64_t v215 = v275;
          do
          {
            re::DynamicArray<unsigned long>::deinit(v215);
            v215 += 40;
            v214 -= 40;
          }
          while (v214);
        }
        (*(void (**)(uint64_t *, uint64_t, __n128))(*v212 + 40))(v212, v213, v82);
      }
      uint64_t v275 = 0;
      unint64_t v273 = 0;
      v271 = 0;
      unint64_t v272 = 0;
    }
    re::DynamicArray<re::ShadowClusterInfo>::deinit((uint64_t)&v276);
LABEL_291:
    if (v280 && v283) {
      (*(void (**)(void))(*v280 + 40))();
    }
    double v216 = re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)&v284);
    if (v288 && v291) {
      (*(void (**)(double))(*v288 + 40))(v216);
    }
    unsigned int v43 = *(_DWORD *)(v234 + 32);
    uint64_t v42 = *(void *)(v234 + 16);
    LODWORD(v37) = v233;
    LODWORD(v3re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v235;
LABEL_298:
    if (v43 <= (int)v38 + 1) {
      unsigned int v217 = v38 + 1;
    }
    else {
      unsigned int v217 = v43;
    }
    while (1)
    {
      uint64_t v41 = (v38 + 1);
      if (v217 - 1 == v38) {
        break;
      }
      LODWORD(v3re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v38 + 1;
      unsigned int v218 = v41;
      if ((*(_DWORD *)(v42 + 72 * v41 + 8) & 0x80000000) != 0) {
        goto LABEL_305;
      }
    }
    unsigned int v218 = v217;
LABEL_305:
    LODWORD(v3re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v218;
  }
  while (v37 != v218);
LABEL_306:
  *(float32x4_t *)((char *)&v297[1] + 4) = (float32x4_t)xmmword_2343864E0;
  v297[1].i32[0] = 1065353216;
  v297[2].i32[1] = 12;
  v297[2].i64[1] = 0x3CF5C28F3F800000;
  *(_WORD *)v298 = 0;
  *(_OWORD *)&v298[16] = xmmword_2343864F0;
  *(void *)&v298[32] = 0x3EB333333F800000;
  v298[40] = 1;
  *(_OWORD *)&v298[44] = xmmword_234386500;
  *(_OWORD *)&v298[60] = xmmword_234386510;
  *(void *)&v298[76] = 0x3DCCCCCD41F00000;
  *(_DWORD *)&v298[84] = 1097877340;
  v298[88] = 1;
  long long v299 = xmmword_23435FD90;
  LOBYTE(v30ArcSharedObject::ArcSharedObject(this, 0) = 1;
  *(void *)&long long v301 = 0x3F8000003F2D42C4;
  *((void *)&v301 + 1) = 0xA3F800000;
  long long v302 = xmmword_234386520;
  *(void *)&long long v303 = 1056964608;
  DWORD2(v303) = 0x40000000;
  WORD6(v303) = 256;
  *(_WORD *)v304 = 1;
  v304[2] = 0;
  *(void *)&v304[8] = 0;
  *(_DWORD *)&v304[4] = 897988541;
  *(void *)&v304[16] = 0x3DCCCCCD3E800000;
  *(_DWORD *)&v304[24] = 16;
  uint64_t v305 = 0xFFFFFFFFLL;
  v297[0].i64[0] = *(void *)(re::AssetHandle::asset<re::MaterialAsset>((re::MaterialAsset *)(v230 + 8)) + 1664);
  v297[0].i64[1] = *(void *)(re::AssetHandle::asset<re::MaterialAsset>((re::MaterialAsset *)(v230 + 32)) + 1664);
  long long v219 = *(_OWORD *)(v230 + 272);
  long long v303 = *(_OWORD *)(v230 + 256);
  *(_OWORD *)v304 = v219;
  *(_OWORD *)&v304[12] = *(_OWORD *)(v230 + 284);
  long long v220 = *(_OWORD *)(v230 + 208);
  long long v299 = *(_OWORD *)(v230 + 192);
  long long v300 = v220;
  long long v221 = *(_OWORD *)(v230 + 240);
  long long v301 = *(_OWORD *)(v230 + 224);
  long long v302 = v221;
  long long v222 = *(_OWORD *)(v230 + 144);
  *(_OWORD *)&v298[32] = *(_OWORD *)(v230 + 128);
  *(_OWORD *)&v298[48] = v222;
  long long v223 = *(_OWORD *)(v230 + 176);
  *(_OWORD *)&v298[64] = *(_OWORD *)(v230 + 160);
  *(_OWORD *)&v298[80] = v223;
  float32x4_t v224 = *(float32x4_t *)(v230 + 80);
  v297[1] = *(float32x4_t *)(v230 + 64);
  v297[2] = v224;
  long long v225 = *(_OWORD *)(v230 + 112);
  *(_OWORD *)v298 = *(_OWORD *)(v230 + 96);
  *(_OWORD *)&v298[16] = v225;
  uint64_t v305 = *(void *)(v230 + 304);
  (*(void (**)(void))(**(void **)(v232 + 320) + 304))();
  BOOL v226 = *(_DWORD *)(a5 + 40) != 0;
  (*(void (**)(uint64_t, void *))(*(void *)v246 + 40))(v246, v229);
  return v226;
}

unint64_t re::DataArray<re::ecs2::ShadowPlaneInfo>::get(uint64_t a1, int a2)
{
  if (*(void *)(a1 + 16) <= (unint64_t)HIWORD(a2))
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(*(void *)(a1 + 32) + 16 * HIWORD(a2)) + ((unint64_t)(unsigned __int16)a2 << 7);
}

uint64_t re::DataArray<re::ecs2::ProjectiveShadowClusterInfo>::get(uint64_t a1, int a2)
{
  if (*(void *)(a1 + 16) <= (unint64_t)HIWORD(a2))
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(*(void *)(a1 + 32) + 16 * HIWORD(a2)) + 80 * (unsigned __int16)a2;
}

__n128 re::DynamicArray<re::ShadowClusterInfo>::add(_anonymous_namespace_ *this, uint64_t a2)
{
  unint64_t v4 = *((void *)this + 2);
  if (v4 >= *((void *)this + 1))
  {
    re::DynamicArray<re::ShadowClusterInfo>::growCapacity(this, v4 + 1);
    unint64_t v4 = *((void *)this + 2);
  }
  uint64_t v5 = *((void *)this + 4) + 96 * v4;
  __n128 result = *(__n128 *)a2;
  long long v7 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v5 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v5 + 32) = v7;
  *(__n128 *)uint64_t v5 = result;
  *(void *)(v5 + 8ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *(void *)(v5 + 56) = 0;
  *(void *)(v5 + 64) = 0;
  *(void *)(v5 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
  *(_DWORD *)(v5 + 72) = 0;
  uint64_t v8 = *(void *)(a2 + 56);
  *(void *)(v5 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = *(void *)(a2 + 48);
  *(void *)(v5 + 56) = v8;
  *(void *)(a2 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
  *(void *)(a2 + 56) = 0;
  uint64_t v9 = *(void *)(v5 + 64);
  *(void *)(v5 + 64) = *(void *)(a2 + 64);
  *(void *)(a2 + 64) = v9;
  uint64_t v10 = *(void *)(v5 + 80);
  *(void *)(v5 + 8ArcSharedObject::ArcSharedObject(this, 0) = *(void *)(a2 + 80);
  *(void *)(a2 + 8ArcSharedObject::ArcSharedObject(this, 0) = v10;
  ++*(_DWORD *)(a2 + 72);
  ++*(_DWORD *)(v5 + 72);
  ++*((void *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

void re::ecs2::ProjectiveShadowReceiverSystem::willAddSystemToECSService(re::ecs2::ProjectiveShadowReceiverSystem *this)
{
  uint64_t v1 = this;
  uint64_t v36 = *MEMORY[0x263EF8340];
  re::ecs2::RenderingSubsystem::willAddSystemToECSService(this);
  unint64_t v2 = (_OWORD *)(*(uint64_t (**)(void))(**((void **)v1 + 5) + 32))(*((void *)v1 + 5));
  unint64_t v3 = &qword_268772000;
  while (1)
  {
    unint64_t v3 = (uint64_t *)v3[325];
    re::StringID::invalid((re::StringID *)&v20);
    uint64_t v4 = (*(uint64_t (**)(_OWORD *, uint64_t *, long long *))(*(void *)v2 + 16))(v2, v3, &v20);
    re::StringID::destroyString((re::StringID *)&v20);
    *((void *)v1 + 94) = v4;
    uint64_t v5 = *(void *)(*((void *)v1 + 92) + 120);
    if (!v5) {
      break;
    }
    (*(void (**)(long long *__return_ptr))(*(void *)v5 + 8))(&v20);
    long long v6 = *(_OWORD *)((char *)v1 + 408);
    *(_OWORD *)((char *)v1 + 40re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v20;
    long long v20 = v6;
    uint64_t v7 = *((void *)v1 + 53);
    *((void *)v1 + 53) = v21;
    *(void *)&long long v21 = v7;
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v20);
    re::AssetHandle::loadAsync((re::ecs2::ProjectiveShadowReceiverSystem *)((char *)v1 + 408));
    (*(void (**)(long long *__return_ptr))(**(void **)(*((void *)v1 + 92) + 120) + 8))(&v20);
    unint64_t v2 = (_OWORD *)((char *)v1 + 432);
    long long v8 = *((_OWORD *)v1 + 27);
    *((_OWORD *)v1 + 27) = v20;
    long long v20 = v8;
    uint64_t v9 = *((void *)v1 + 56);
    *((void *)v1 + 56) = v21;
    *(void *)&long long v21 = v9;
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v20);
    re::AssetHandle::loadAsync((re::ecs2::ProjectiveShadowReceiverSystem *)((char *)v1 + 432));
    uint64_t v12 = (void *)*((void *)v1 + 92);
    uint64_t v13 = v12[13];
    if (v13)
    {
      if ((*(unsigned char *)(v13 + 424) & 0x10) == 0) {
        break;
      }
    }
    uint64_t v14 = v12[14];
    if (!v14)
    {
      re::internal::assertLog((re::internal *)4, v11, "assertion failure: '%s' (%s:line %i) ", "m_system->m_renderManager", "init", 125);
      _os_crash();
      __break(1u);
LABEL_15:
      uint64_t v27 = 0;
      long long v23 = 0u;
      long long v24 = 0u;
      long long v21 = 0u;
      long long v22 = 0u;
      long long v20 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      LODWORD(v31) = 136315906;
      *(uint64_t *)((char *)v3 + 52) = (uint64_t)"operator[]";
      WORD6(v31) = 1024;
      *(_DWORD *)((char *)v3 + 62) = 797;
      WORD1(v32) = 2048;
      *(uint64_t *)((char *)v3 + 6re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      WORD6(v32) = 2048;
      *(uint64_t *)((char *)v3 + 7re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_16;
    }
    unint64_t v3 = &v27;
    uint64_t v15 = *(void *)(v14 + 32);
    unint64_t v2 = (_OWORD *)v12[15];
    unint64_t v16 = re::MeshAsset::assetType(v10);
    (*(void (**)(void *__return_ptr, _OWORD *, const char *, uint64_t *))(*(void *)v2 + 32))(v19, v2, "sharedPlaneMesh.compiledmesh", v16);
    uint64_t v17 = re::AssetHandle::asset<re::MeshAsset>((re::MeshAsset *)v19);
    if (!*(void *)(v17 + 416)) {
      goto LABEL_15;
    }
    uint64_t v18 = **(void **)(v17 + 432);
    *(void *)&long long v20 = 0;
    *((void *)&v20 + 1) = "";
    BYTE8(v21) = 0;
    HIDWORD(v21) = 1065353216;
    unint64_t v2 = v26;
    memset(v26, 0, sizeof(v26));
    *(void *)&long long v21 = v18;
    long long v22 = xmmword_23435FD50;
    long long v23 = xmmword_23435FD60;
    long long v24 = xmmword_23435FD80;
    long long v25 = xmmword_23435FBB0;
    if (*((void *)&v26[0] + 1))
    {
      **(_DWORD **)&v26[1] = 0;
      *((void *)&v21 + 1) = 0x3F80000000000000;
      *((void *)v1 + 8re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = re::DataArray<re::MeshInstance>::create<re::MeshInstance>(v15 + 72, (uint64_t)&v20);
      re::FixedArray<re::SharedPtr<re::MaterialParameterBlock>>::deinit((void *)&v26[1] + 1);
      if (*(void *)&v26[0])
      {
        if (*((void *)&v26[0] + 1))
        {
          (*(void (**)(void, void))(**(void **)&v26[0] + 40))(*(void *)&v26[0], *(void *)&v26[1]);
          *((void *)&v26[0] + 1) = 0;
          *(void *)&v26[1] = 0;
        }
        *(void *)&v26[0] = 0;
      }
      re::StringID::destroyString((re::StringID *)&v20);
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v19);
      return;
    }
LABEL_16:
    _OWORD v19[3] = 0;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v31 = 0u;
    uint64_t v1 = (re::ecs2::ProjectiveShadowReceiverSystem *)&_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(v27) = 136315906;
    *(uint64_t *)((char *)v3 + 4) = (uint64_t)"operator[]";
    __int16 v28 = 1024;
    *(_DWORD *)((char *)v3 + 14) = 468;
    __int16 v29 = 2048;
    *(uint64_t *)((char *)v3 + 2ArcSharedObject::ArcSharedObject(this, 0) = 0;
    __int16 v30 = 2048;
    *(uint64_t *)((char *)v3 + 3ArcSharedObject::ArcSharedObject(this, 0) = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_17:
    {
      v3[325] = re::ecs2::introspect_ProjectiveShadowReceiverService(0);
    }
  }
}

double re::ecs2::ProjectiveShadowReceiverSystem::willRemoveSystemFromECSService(re::ecs2::ProjectiveShadowReceiverSystem *this)
{
  long long v2 = *(_OWORD *)((char *)this + 408);
  uint64_t v3 = *((void *)this + 53);
  *((void *)this + 52) = 0;
  *((void *)this + 53) = 0;
  *((void *)this + 51) = 0;
  long long v10 = v2;
  uint64_t v11 = v3;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v10);
  long long v4 = *((_OWORD *)this + 27);
  uint64_t v5 = *((void *)this + 56);
  *((void *)this + 55) = 0;
  *((void *)this + 56) = 0;
  *((void *)this + re::HashTable<unsigned long long,re::ecs2::RenderPassGroupBoundsInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)this + 54) = 0;
  long long v10 = v4;
  uint64_t v11 = v5;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v10);
  uint64_t v6 = *((void *)this + 92);
  uint64_t v7 = *(void *)(v6 + 104);
  if (!v7 || (*(unsigned char *)(v7 + 424) & 0x10) != 0)
  {
    uint64_t v8 = *(void *)(v6 + 112);
    if (v8)
    {
      if ((*((_DWORD *)this + 177) & 0xFFFFFF) != 0) {
        re::MeshManager::destroyInstance(*(void *)(v8 + 32), *((void *)this + 88));
      }
      *((void *)this + 8re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0xFFFFFFFFLL;
    }
  }
  *((void *)this + 94) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 12ArcSharedObject::ArcSharedObject(this, 0) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *((void *)this + 19) = 0;
  return result;
}

void re::ecs2::ProjectiveShadowReceiverSystem::willAddSceneToECSService(re::ecs2::ProjectiveShadowReceiverSystem *this, re::ecs2::Scene *a2)
{
  uint64_t v67 = *MEMORY[0x263EF8340];
  long long v4 = (char *)this + 160;
  v57[0] = (uint64_t)a2;
  uint64_t v5 = (re::ecs2::ProjectiveShadowReceiverSystem *)((char *)this + 280);
  unint64_t v6 = *((void *)this + 36);
  int v7 = *((_DWORD *)this + 74);
  if (v6 >= 0xB)
  {
    if (v7) {
      uint64_t v8 = (void *)((char *)this + 304);
    }
    else {
      uint64_t v8 = (void *)*((void *)this + 39);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_17;
      }
    }
    goto LABEL_16;
  }
  if (v7)
  {
    uint64_t v9 = (uint64_t *)((char *)this + 304);
    if (!v6) {
      goto LABEL_17;
    }
  }
  else
  {
    uint64_t v9 = (uint64_t *)*((void *)this + 39);
    if (!v6) {
      goto LABEL_17;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
  {
LABEL_16:
    *(void *)&long long v49 = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet((uint64_t)this + 280, 0);
    uint64_t v14 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)v4, v49);
    re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>::init(v14, (uint64_t)v4, (uint64_t)a2);
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((re::ecs2::ProjectiveShadowReceiverSystem *)((char *)this + 216), v57, (uint64_t *)&v49);
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)v5, v49);
    uint64_t v15 = (char *)this + 328;
    unint64_t v16 = v49;
    goto LABEL_49;
  }
LABEL_17:
  long long v56 = 0u;
  long long v49 = 0u;
  *(void *)&long long v50 = 0;
  *((void *)&v50 + 1) = -1;
  long long v51 = 0u;
  long long v52 = 0u;
  uint64_t v53 = 0;
  uint64_t v54 = 1;
  long long v55 = 0uLL;
  unint64_t v17 = *((void *)this + 25);
  *(void *)&long long v56 = 0;
  unint64_t v18 = *((void *)this + 21);
  DWORD2(v56) = 0;
  if (v17 + 1 > 4 * v18)
  {
    re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>,4ul>::setBucketsCapacity((uint64_t *)this + 20, (v17 + 4) >> 2);
    unint64_t v18 = *((void *)this + 21);
  }
  if (v18 <= v17 >> 2)
  {
    v57[1] = 0;
    memset(v66, 0, sizeof(v66));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v58 = 136315906;
    uint64_t v59 = "operator[]";
    __int16 v60 = 1024;
    int v61 = 858;
    __int16 v62 = 2048;
    unint64_t v63 = v17 >> 2;
    __int16 v64 = 2048;
    unint64_t v65 = v18;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_69;
  }
  if (*((unsigned char *)this + 176)) {
    unint64_t v19 = (char *)this + 184;
  }
  else {
    unint64_t v19 = (char *)*((void *)this + 24);
  }
  uint64_t v20 = *(void *)&v19[8 * (v17 >> 2)];
  ++*((void *)this + 25);
  ++*((_DWORD *)this + 52);
  uint64_t v21 = v20 + 112 * (v17 & 3);
  long long v22 = v49;
  long long v23 = v50;
  long long v24 = v51;
  *(void *)(v21 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v52;
  *(_OWORD *)(v21 + 16) = v23;
  *(_OWORD *)(v21 + 32) = v24;
  *(_OWORD *)uint64_t v21 = v22;
  re::BucketArray<RESubscriptionHandle,8ul>::BucketArray(v21 + 56, (uint64_t)&v52 + 8);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStateSceneData(&v49);
  uint64_t v26 = *((void *)this + 25);
  if (!v26)
  {
LABEL_69:
    re::internal::assertLog((re::internal *)4, v25, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
  }
  uint64_t v27 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)v4, v26 - 1);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>::init(v27, (uint64_t)v4, v57[0]);
  *(void *)&v66[0] = *((void *)this + 25) - 1;
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((re::ecs2::ProjectiveShadowReceiverSystem *)((char *)this + 216), v57, (uint64_t *)v66);
  unint64_t v28 = *((void *)this + 25);
  unint64_t v29 = *((void *)this + 40);
  if ((v28 & 0x3F) != 0) {
    unint64_t v30 = (v28 >> 6) + 1;
  }
  else {
    unint64_t v30 = v28 >> 6;
  }
  *((void *)this + 4ArcSharedObject::ArcSharedObject(this, 0) = v28;
  *(void *)&long long v49 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize(v5, v30, &v49);
  if (v28 && v29 > v28)
  {
    uint64_t v31 = 63;
    uint64_t v32 = *((void *)this + 40) & 0x3FLL;
    if (v32 && v32 != 63) {
      uint64_t v31 = ~(-1 << v32);
    }
    if (*((unsigned char *)this + 296)) {
      long long v33 = (char *)this + 304;
    }
    else {
      long long v33 = (char *)*((void *)this + 39);
    }
    *(void *)&v33[8 * *((void *)this + 36) - 8] &= v31;
  }
  unint64_t v34 = *((void *)this + 25);
  unint64_t v35 = *((void *)this + 46);
  if ((v34 & 0x3F) != 0) {
    unint64_t v36 = (v34 >> 6) + 1;
  }
  else {
    unint64_t v36 = v34 >> 6;
  }
  *((void *)this + 46) = v34;
  *(void *)&long long v49 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((re::ecs2::ProjectiveShadowReceiverSystem *)((char *)this + 328), v36, &v49);
  if (v34 && v35 > v34)
  {
    uint64_t v37 = 63;
    uint64_t v38 = *((void *)this + 46) & 0x3FLL;
    if (v38 && v38 != 63) {
      uint64_t v37 = ~(-1 << v38);
    }
    if (*((unsigned char *)this + 344)) {
      unint64_t v39 = (char *)this + 352;
    }
    else {
      unint64_t v39 = (char *)*((void *)this + 45);
    }
    *(void *)&v39[8 * *((void *)this + 42) - 8] &= v37;
  }
  unint64_t v16 = *(void *)&v66[0];
  uint64_t v15 = (char *)this + 328;
LABEL_49:
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v15, v16);
  if (!*((unsigned char *)this + 392)) {
    return;
  }
  unint64_t v40 = *((void *)this + 42);
  int v41 = *((_DWORD *)this + 86);
  if (v40 >= 0xB)
  {
    if (v41) {
      uint64_t v42 = (void *)((char *)this + 352);
    }
    else {
      uint64_t v42 = (void *)*((void *)this + 45);
    }
    uint64_t v44 = 8 * v40;
    while (!*v42)
    {
      ++v42;
      v44 -= 8;
      if (!v44) {
        return;
      }
    }
LABEL_65:
    uint64_t v48 = (re::ecs2::System *)*((void *)this + 47);
    if (!*((unsigned char *)v48 + 86)) {
      re::ecs2::System::queueToRun(v48, 0.0);
    }
    return;
  }
  if (v41)
  {
    unsigned int v43 = (uint64_t *)((char *)this + 352);
    if (!v40) {
      return;
    }
  }
  else
  {
    unsigned int v43 = (uint64_t *)*((void *)this + 45);
    if (!v40) {
      return;
    }
  }
  uint64_t v45 = 0;
  uint64_t v46 = 8 * v40;
  do
  {
    uint64_t v47 = *v43++;
    v45 |= v47;
    v46 -= 8;
  }
  while (v46);
  if (v45) {
    goto LABEL_65;
  }
}

uint64_t re::ecs2::ProjectiveShadowReceiverSystem::willRemoveSceneFromECSService(re::ecs2::ProjectiveShadowReceiverSystem *this, re::ecs2::Scene *a2)
{
  unint64_t v18 = a2;
  uint64_t v3 = (uint64_t *)((char *)this + 216);
  uint64_t v4 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)this + 27, &v18);
  if (v4 != -1)
  {
    uint64_t v5 = *((void *)this + 28) + 16 * v4;
    re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)this + 280, *(void *)(v5 + 8));
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)this + 328, *(void *)(v5 + 8));
    unint64_t v6 = (void *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)this + 160, *(void *)(v5 + 8));
    if (*v6)
    {
      int v7 = v6;
      *unint64_t v6 = 0;
      uint64_t v8 = v6 + 1;
      uint64_t v9 = *(void *)(v6[1] + 288);
      if (v9)
      {
        uint64_t v10 = v6[12];
        if (v10)
        {
          for (unint64_t i = 0; i != v10; ++i)
          {
            uint64_t v12 = re::BucketArray<RESubscriptionHandle,8ul>::operator[]((uint64_t)(v7 + 7), i);
            re::EventBus::unsubscribe(v9, *(void *)v12, *(void *)(v12 + 8));
          }
        }
      }
      re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)(v7 + 7));
      uint64_t v13 = 0;
      uint64_t v14 = v7 + 3;
      do
      {
        uint64_t v15 = (re::ecs2::ComponentBucketsBase *)v7[2];
        if (*(void *)v15) {
          re::ecs2::ComponentBucketsBase::removeBucket(v15, v14[v13]);
        }
        v14[v13++] = -1;
      }
      while (v13 != 4);
      *uint64_t v8 = 0;
      v8[1] = 0;
    }
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::remove(v3, &v18);
  }
  uint64_t result = *((void *)this + 94);
  if (result)
  {
    unint64_t v17 = *(uint64_t (**)(void))(*(void *)result + 88);
    return v17();
  }
  return result;
}

void re::ecs2::ProjectiveShadowReceiverSystem::updateScenes(uint64_t a1, uint64_t **a2, uint64_t a3, uint64_t a4)
{
  uint64_t v77 = *MEMORY[0x263EF8340];
  v72[0] = a3;
  v72[1] = a4;
  if (*(void *)(a1 + 128))
  {
    uint64_t v6 = *(void *)(a1 + 104);
    if (!v6 || (*(unsigned char *)(v6 + 424) & 0x10) != 0)
    {
      if (re::ecs2::ShadowHelper::forceEnableMeshProjectiveShadows(void)::onceToken != -1) {
        dispatch_once(&re::ecs2::ShadowHelper::forceEnableMeshProjectiveShadows(void)::onceToken, &__block_literal_global_15);
      }
      if (!re::ecs2::ShadowHelper::forceEnableMeshProjectiveShadows(void)::g_forceEnableMeshProjectiveShadows)
      {
        (*(void (**)(_OWORD *__return_ptr))(**(void **)(a1 + 128) + 16))(v74);
        if ((_BYTE)v75)
        {
          int v7 = a2[1];
          if (v7)
          {
            uint64_t v8 = *a2;
            uint64_t v9 = (uint64_t)&(*a2)[(void)v7];
            char v10 = 1;
            do
            {
              while (1)
              {
                uint64_t v11 = *v8;
                uint64_t v12 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(*v8 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SceneUnderstandingRenderOptionsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
                if (v12)
                {
                  if (*(void *)(v12 + 24) && *(unsigned char *)(**(void **)(v12 + 40) + 30)) {
                    break;
                  }
                }
                (*(void (**)(void, uint64_t))(**(void **)(a1 + 752) + 80))(*(void *)(a1 + 752), v11);
                char v10 = 0;
                if (++v8 == (uint64_t *)v9) {
                  goto LABEL_22;
                }
              }
              *(void *)&v74[0] = v11;
              uint64_t v13 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(a1 + 216), v74);
              if (v13 == -1) {
                uint64_t v14 = 0;
              }
              else {
                uint64_t v14 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1 + 160, *(void *)(*(void *)(a1 + 224) + 16 * v13 + 8));
              }
              sendAllReceiversToInactive(v14);
              (*(void (**)(void, uint64_t))(**(void **)(a1 + 752) + 88))(*(void *)(a1 + 752), v11);
              ++v8;
            }
            while (v8 != (uint64_t *)v9);
            if ((v10 & 1) == 0)
            {
LABEL_22:
              uint64_t v73 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 736) + 136) + 24))(*(void *)(*(void *)(a1 + 736) + 136));
              uint64_t v15 = *(void *)(a1 + 736);
              uint64_t v16 = *(void *)(*(void *)(v15 + 112) + 88);
              if (v16)
              {
                LOBYTE(v71[0]) = 0;
                *(void *)&v74[0] = 0x587ABAC10091B1A0;
                *((void *)&v74[0] + 1) = "overrides:enablemeshshadows";
                BOOL v17 = re::DebugSettingsManager::getWithErrorCode<BOOL>(v16, v74, v71) != 0;
                re::StringID::destroyString((re::StringID *)v74);
                LOBYTE(vre::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v71[0];
                uint64_t v15 = *(void *)(a1 + 736);
              }
              else
              {
                BOOL v17 = 1;
              }
              (*(void (**)(_OWORD *__return_ptr))(**(void **)(v15 + 128) + 16))(v74);
              long long v18 = v75;
              *(_OWORD *)(a1 + 656) = v74[12];
              *(_OWORD *)(a1 + 672) = v18;
              *(_OWORD *)(a1 + 68re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v76;
              long long v19 = v74[9];
              *(_OWORD *)(a1 + 592) = v74[8];
              *(_OWORD *)(a1 + 60re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v19;
              long long v20 = v74[11];
              *(_OWORD *)(a1 + 624) = v74[10];
              *(_OWORD *)(a1 + 64ArcSharedObject::ArcSharedObject(this, 0) = v20;
              long long v21 = v74[5];
              *(_OWORD *)(a1 + 5re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 28) = v74[4];
              *(_OWORD *)(a1 + 544) = v21;
              long long v22 = v74[7];
              *(_OWORD *)(a1 + 5re::HashTable<re::ecs2::Entity const*,re::ecs2::BillboardData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::deinit((uint64_t *)this + 60) = v74[6];
              *(_OWORD *)(a1 + 576) = v22;
              long long v23 = v74[1];
              *(_OWORD *)(a1 + 464) = v74[0];
              *(_OWORD *)(a1 + 48ArcSharedObject::ArcSharedObject(this, 0) = v23;
              long long v24 = v74[3];
              *(_OWORD *)(a1 + 496) = v74[2];
              *(_OWORD *)(a1 + 512) = v24;
              if (v17) {
                LOBYTE(vre::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = *(unsigned char *)(a1 + 672);
              }
              if (!(_BYTE)v8) {
                goto LABEL_36;
              }
              uint64_t v25 = re::AssetHandle::loadedAsset<re::MaterialAsset>((re::MaterialAsset *)(a1 + 408));
              if (!v25 || *(unsigned char *)(v25 + 1656))
              {
                re::AssetHandle::loadAsync((re::AssetHandle *)(a1 + 408));
                uint64_t v26 = (re::AssetHandle *)(a1 + 432);
                uint64_t v27 = re::AssetHandle::loadedAsset<re::MaterialAsset>((re::MaterialAsset *)(a1 + 432));
                if (v27 && !*(unsigned char *)(v27 + 1656))
                {
LABEL_36:
                  re::ecs2::System::queueToRun((re::ecs2::System *)a1, 0.0);
                  unint64_t v29 = (re::Scheduler *)(*(uint64_t (**)(void))(**(void **)(a1 + 40) + 80))(*(void *)(a1 + 40));
                  if (v29)
                  {
                    unint64_t v30 = *(void *)(a1 + 96);
                    if (*((void *)v29 + 5) > v30) {
                      re::Scheduler::enqueueTaskWithDeadline(v29, v30, 0.0);
                    }
                  }
                  return;
                }
LABEL_35:
                re::AssetHandle::loadAsync(v26);
                goto LABEL_36;
              }
              uint64_t v26 = (re::AssetHandle *)(a1 + 432);
              uint64_t v28 = re::AssetHandle::loadedAsset<re::MaterialAsset>((re::MaterialAsset *)(a1 + 432));
              if (!v28 || *(unsigned char *)(v28 + 1656)) {
                goto LABEL_35;
              }
              (*(void (**)(void))(**(void **)(*(void *)(a1 + 736) + 752) + 64))();
              (*(void (**)(void, uint64_t *))(**(void **)(*(void *)(a1 + 736) + 752) + 72))(*(void *)(*(void *)(a1 + 736) + 752), &v73);
              uint64_t v31 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 736) + 752) + 32))(*(void *)(*(void *)(a1 + 736) + 752));
              uint64_t v32 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 736) + 752) + 48))(*(void *)(*(void *)(a1 + 736) + 752));
              if (!*(_DWORD *)(v31 + 40) || !*(_DWORD *)(v32 + 40))
              {
                long long v33 = a2[1];
                if (!v33) {
                  return;
                }
                unint64_t v34 = *a2;
                uint64_t v35 = 8 * (void)v33;
                do
                {
                  v71[0] = *v34;
                  uint64_t v36 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(a1 + 216), v71);
                  if (v36 == -1) {
                    uint64_t v37 = 0;
                  }
                  else {
                    uint64_t v37 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1 + 160, *(void *)(*(void *)(a1 + 224) + 16 * v36 + 8));
                  }
                  sendAllReceiversToInactive(v37);
                  ++v34;
                  v35 -= 8;
                }
                while (v35);
              }
              uint64_t v38 = a2[1];
              if (v38)
              {
                unint64_t v39 = *a2;
                uint64_t v70 = (uint64_t)&(*a2)[(void)v38];
                int64x2_t v69 = vdupq_n_s64(1uLL);
                while (1)
                {
                  uint64_t v40 = *v39;
                  uint64_t v41 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(*v39 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ProjectiveShadowReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
                  if (v41) {
                    unint64_t v42 = *(void *)(v41 + 24);
                  }
                  else {
                    unint64_t v42 = 0;
                  }
                  unsigned int v43 = re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard((uint64_t *)v74);
                  isStatisticCollectionEnabled = (re *)re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v43);
                  if (isStatisticCollectionEnabled)
                  {
                    uint64_t v45 = re::profilerThreadContext(isStatisticCollectionEnabled);
                    uint64_t v46 = *(int64x2_t **)(v45 + 152);
                    if (v46)
                    {
                      unint64_t v47 = v46[428].u64[0];
                      if (v47 >= v42) {
                        unint64_t v47 = v42;
                      }
                      v46[428].i64[0] = v47;
                      unint64_t v48 = v46[428].u64[1];
                      if (v48 <= v42) {
                        unint64_t v48 = v42;
                      }
                      v46[428].i64[1] = v48;
                      v49.i64[1] = v69.i64[1];
                      v49.i64[0] = v42;
                      v46[429] = vaddq_s64(v46[429], v49);
                      *(unsigned char *)(v45 + 184) = 0;
                    }
                  }
                  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v71, 3081, a1);
                  uint64_t v73 = v40;
                  unint64_t v50 = *(void *)(*(void *)(a1 + 224)
                                  + 16
                                  * re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(a1 + 216), &v73)+ 8);
                  re::DynamicBitset<unsigned long long,64ul>::clearBit(a1 + 328, v50);
                  long long v51 = (void *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1 + 160, v50);
                  uint64_t v52 = *(void *)(*v51 + 224);
                  unint64_t v53 = v51[3];
                  unint64_t v54 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v51[2] + 8, v53);
                  if (*(_DWORD *)(v54 + 40)) {
                    int v55 = (*(uint64_t (**)(uint64_t, void *, void *, unint64_t, unint64_t, void))(*(void *)v52 + 24))(v52, v72, v51, v53, v54, 0);
                  }
                  else {
                    int v55 = 0;
                  }
                  unint64_t v56 = v51[5];
                  unint64_t v57 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v51[2] + 8, v56);
                  if (*(_DWORD *)(v57 + 40)) {
                    v55 |= (*(uint64_t (**)(uint64_t, void *, void *, unint64_t, unint64_t, void))(*(void *)v52 + 32))(v52, v72, v51, v56, v57, 0);
                  }
                  unint64_t v58 = v51[6];
                  unint64_t v59 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v51[2] + 8, v58);
                  if (*(_DWORD *)(v59 + 40)) {
                    break;
                  }
                  if (v55) {
                    goto LABEL_66;
                  }
LABEL_67:
                  if (*(unsigned char *)(a1 + 392))
                  {
                    unint64_t v60 = *(void *)(a1 + 336);
                    int v61 = *(_DWORD *)(a1 + 344);
                    if (v60 < 0xB)
                    {
                      __int16 v64 = (uint64_t *)(a1 + 352);
                      if ((v61 & 1) == 0) {
                        __int16 v64 = *(uint64_t **)(a1 + 360);
                      }
                      if (!v60) {
                        goto LABEL_85;
                      }
                      uint64_t v65 = 0;
                      uint64_t v66 = 8 * v60;
                      do
                      {
                        uint64_t v67 = *v64++;
                        v65 |= v67;
                        v66 -= 8;
                      }
                      while (v66);
                      if (!v65) {
                        goto LABEL_85;
                      }
                    }
                    else
                    {
                      __int16 v62 = (void *)(a1 + 352);
                      if ((v61 & 1) == 0) {
                        __int16 v62 = *(void **)(a1 + 360);
                      }
                      uint64_t v63 = 8 * v60;
                      while (!*v62)
                      {
                        ++v62;
                        v63 -= 8;
                        if (!v63) {
                          goto LABEL_85;
                        }
                      }
                    }
                    long long v68 = *(re::ecs2::System **)(a1 + 376);
                    if (!*((unsigned char *)v68 + 86)) {
                      re::ecs2::System::queueToRun(v68, 0.0);
                    }
                  }
LABEL_85:
                  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v71);
                  re::ProfilerTimeGuard<(re::ProfilerStatistic)122>::end((uint64_t)v74);
                  if (++v39 == (uint64_t *)v70) {
                    return;
                  }
                }
                if (((v55 | (*(unsigned int (**)(uint64_t, void *, void *, unint64_t, unint64_t, void))(*(void *)v52 + 40))(v52, v72, v51, v58, v59, 0)) & 1) == 0)goto LABEL_67; {
LABEL_66:
                }
                re::DynamicBitset<unsigned long long,256ul>::setBit(a1 + 328, v50);
                goto LABEL_67;
              }
            }
          }
        }
      }
    }
  }
}

uint64_t re::ecs2::ProjectiveShadowReceiverStateImpl::dependsOnComponents(re::ecs2::ProjectiveShadowReceiverStateImpl *this)
{
  return *((void *)this + 41);
}

void re::ecs2::ProjectiveShadowReceiverSystem::~ProjectiveShadowReceiverSystem(re::ecs2::ProjectiveShadowReceiverSystem *this)
{
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 89);
  re::AssetHandle::~AssetHandle((re::ecs2::ProjectiveShadowReceiverSystem *)((char *)this + 432));
  re::AssetHandle::~AssetHandle((re::ecs2::ProjectiveShadowReceiverSystem *)((char *)this + 408));
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 20);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::ProjectiveShadowReceiverSystem::typeInfo(re::ecs2::ProjectiveShadowReceiverSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ProjectiveShadowReceiverSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_ProjectiveShadowReceiverSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_ProjectiveShadowReceiverSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::ProjectiveShadowReceiverSystem>, 0);
}

int32x4_t re::make::shared::unsafelyInplace<re::ecs2::ProjectiveShadowReceiverComponent>(ArcSharedObject *a1)
{
  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 6) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *(_OWORD *)a1 = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(void *)(v1 + 16) = 0;
  *(unsigned char *)(v1 + 24) = 0;
  *(void *)uint64_t v1 = &unk_26E6ED6A0;
  *(void *)(v1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 28) = 0x400000003FA00000;
  *(_DWORD *)(v1 + 36) = 1094713344;
  *(_WORD *)(v1 + 4ArcSharedObject::ArcSharedObject(this, 0) = 1;
  int32x4_t result = vdupq_n_s32(0x7F800000u);
  *(void *)&long long v3 = 0x7F0000007FLL;
  *((void *)&v3 + 1) = 0x7F0000007FLL;
  *(int32x4_t *)(v1 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = result;
  *(_OWORD *)(v1 + 64) = v3;
  *(void *)(v1 + 8re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
  *(void *)(v1 + 96) = 0;
  *(void *)(v1 + 8ArcSharedObject::ArcSharedObject(this, 0) = 0;
  return result;
}

id re::internal::defaultRetain<re::ecs2::ProjectiveShadowReceiverSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::ProjectiveShadowReceiverSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
}

uint64_t re::DebugSettingsManager::getWithErrorCode<BOOL>(uint64_t a1, void *a2, unsigned char *a3)
{
  if (!*(unsigned char *)(a1 + 112)) {
    return 3;
  }
  if (!a3) {
    return 4;
  }
  uint64_t v6 = (std::mutex *)(a1 + 48);
  std::mutex::lock((std::mutex *)(a1 + 48));
  uint64_t v7 = re::DebugSettingsManager::contains<BOOL>(a1, a2);
  if (!v7)
  {
    uint64_t v8 = 0x7FFFFFFFLL;
    if (*(void *)a1)
    {
      unint64_t v9 = 0xBF58476D1CE4E5B9 * ((*a2 >> 31) ^ (*a2 >> 1));
      uint64_t v10 = *(unsigned int *)(*(void *)(a1 + 8)
                            + 4
                            * (((0x94D049BB133111EBLL * (v9 ^ (v9 >> 27))) ^ ((0x94D049BB133111EBLL * (v9 ^ (v9 >> 27))) >> 31))
                             % *(unsigned int *)(a1 + 24)));
      if (v10 != 0x7FFFFFFF)
      {
        uint64_t v11 = *(void *)(a1 + 16);
        uint64_t v8 = 0x7FFFFFFFLL;
        while (!re::StringID::operator==((void *)(v11 + 40 * v10 + 8), a2))
        {
          uint64_t v10 = *(_DWORD *)(v11 + 40 * v10) & 0x7FFFFFFF;
          if (v10 == 0x7FFFFFFF) {
            goto LABEL_13;
          }
        }
        uint64_t v8 = v10;
      }
    }
LABEL_13:
    uint64_t v12 = *(void *)(a1 + 16);
    if (*(unsigned char *)(v12 + 40 * v8 + 24))
    {
      uint64_t v13 = *(void *)(v12 + 40 * v8 + 28);
      if ((v13 & 0xFFFFFFFF00000000) == 0x200000000) {
        *a3 = v13;
      }
      uint64_t v7 = (v13 & 0xFFFFFFFF00000000) != 0x200000000;
    }
    else
    {
      uint64_t v7 = 5;
    }
  }
  std::mutex::unlock(v6);
  return v7;
}

uint64_t re::DebugSettingsManager::contains<BOOL>(uint64_t a1, void *a2)
{
  if (!*(unsigned char *)(a1 + 112)) {
    return 3;
  }
  uint64_t v2 = re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(a1, a2);
  if (!v2) {
    return 1;
  }
  if (*(unsigned char *)v2 && *(_DWORD *)(v2 + 8) != 2) {
    return 2;
  }
  return 0;
}

void re::HashTable<re::DataArrayHandle<re::ecs2::ShadowPlaneInfo>,unsigned int,re::Hash<re::DataArrayHandle<re::ecs2::ShadowPlaneInfo>>,re::EqualTo<re::DataArrayHandle<re::ecs2::ShadowPlaneInfo>>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, _DWORD *a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      int v11 = *(_DWORD *)(a1 + 28);
      signed int v12 = 2 * v11;
      uint64_t v13 = *(void *)a1;
      if (*(void *)a1)
      {
        if (v12) {
          BOOL v14 = v9 == v12;
        }
        else {
          BOOL v14 = 1;
        }
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v25, 0, 36);
          *(void *)&v25[36] = 0x7FFFFFFFLL;
          re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v25, v13, v12);
          long long v15 = *(_OWORD *)v25;
          *(_OWORD *)uint64_t v25 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          uint64_t v16 = *(void *)&v25[16];
          uint64_t v17 = *(void *)(a1 + 16);
          *(void *)&unsigned char v25[16] = v17;
          *(void *)(a1 + 16) = v16;
          long long v19 = *(_OWORD *)&v25[24];
          *(_OWORD *)&v25[24] = *(_OWORD *)(a1 + 24);
          unsigned int v18 = *(_DWORD *)&v25[32];
          *(_OWORD *)(a1 + 24) = v19;
          uint64_t v20 = v18;
          if (v18)
          {
            uint64_t v21 = v17 + 16;
            do
            {
              if ((*(_DWORD *)(v21 - 8) & 0x80000000) != 0) {
                re::HashTable<re::DataArrayHandle<re::ecs2::ShadowPlaneInfo>,unsigned int,re::Hash<re::DataArrayHandle<re::ecs2::ShadowPlaneInfo>>,re::EqualTo<re::DataArrayHandle<re::ecs2::ShadowPlaneInfo>>,true,false>::addAsMove(a1, *(void *)(v21 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(v21 - 16), v21, v21 + 8);
              }
              v21 += 32;
              --v20;
            }
            while (v20);
          }
          re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)v25);
        }
      }
      else
      {
        if (v12) {
          signed int v24 = 2 * v11;
        }
        else {
          signed int v24 = 3;
        }
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v22 = *(void *)(a1 + 16);
    int v23 = *(_DWORD *)(v22 + 32 * v9 + 8);
  }
  else
  {
    uint64_t v22 = *(void *)(a1 + 16);
    int v23 = *(_DWORD *)(v22 + 32 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v23 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v22 + 32 * v9 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v23 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + 32 * v9 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 32 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 32 * v9) = a3;
  *(void *)(*(void *)(a1 + 16) + 32 * v9 + 16) = *a4;
  *(_DWORD *)(*(void *)(a1 + 16) + 32 * v9 + 24) = *a5;
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
}

void *re::DynamicArray<re::ShadowClusterInfo>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      int32x4_t result = (void *)*result;
      if (!*v5)
      {
        int32x4_t result = (void *)re::DynamicArray<re::ShadowClusterInfo>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x60uLL))
        {
          uint64_t v2 = 96 * a2;
          int32x4_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 96 * a2, 16);
          if (result)
          {
            uint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 96, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        int32x4_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      uint64_t v7 = 0;
      if (!v3)
      {
LABEL_16:
        _OWORD v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = v8 + 96 * v9;
        int v11 = v7;
        do
        {
          long long v12 = *(_OWORD *)v8;
          long long v13 = *(_OWORD *)(v8 + 32);
          *((_OWORD *)v11 + 1) = *(_OWORD *)(v8 + 16);
          *((_OWORD *)v11 + 2) = v13;
          *(_OWORD *)int v11 = v12;
          v11[10] = 0;
          v11[7] = 0;
          v11[8] = 0;
          v11[6] = 0;
          *((_DWORD *)v11 + 1re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
          uint64_t v14 = *(void *)(v8 + 48);
          uint64_t v15 = *(void *)(v8 + 56);
          uint64_t v16 = v8 + 48;
          v11[6] = v14;
          v11[7] = v15;
          *(void *)uint64_t v16 = 0;
          *(void *)(v16 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
          uint64_t v17 = v11[8];
          v11[8] = *(void *)(v16 + 16);
          *(void *)(v16 + 16) = v17;
          uint64_t v18 = v11[10];
          v11[10] = *(void *)(v16 + 32);
          *(void *)(v16 + 32) = v18;
          ++*(_DWORD *)(v16 + 24);
          ++*((_DWORD *)v11 + 18);
          re::DynamicArray<unsigned long>::deinit(v16);
          uint64_t v8 = v16 + 48;
          v11 += 12;
        }
        while (v8 != v10);
        uint64_t v8 = v5[4];
      }
      int32x4_t result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

uint64_t re::DynamicArray<re::ShadowClusterInfo>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = 96 * v4;
        uint64_t v6 = v3 + 48;
        do
        {
          re::DynamicArray<unsigned long>::deinit(v6);
          v6 += 96;
          v5 -= 96;
        }
        while (v5);
        uint64_t result = *(void *)a1;
        uint64_t v3 = *(void *)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

void *re::DynamicArray<re::ShadowClusterInfo>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    uint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::ShadowClusterInfo>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::ShadowClusterInfo>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

uint64_t re::BucketArray<re::ProjectiveShadowBuilder::Input::PerSceneData,4ul>::add(uint64_t a1, uint64_t a2)
{
  uint64_t result = re::BucketArray<re::ProjectiveShadowBuilder::Input::PerSceneData,4ul>::addUninitialized(a1);
  *(void *)(result + 32) = 0;
  *(_DWORD *)(result + 24) = 0;
  *(void *)(result + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)uint64_t result = 0;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)uint64_t result = *(void *)a2;
  *(void *)(result + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v4;
  *(void *)a2 = 0;
  *(void *)(a2 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
  uint64_t v5 = *(void *)(result + 16);
  *(void *)(result + 16) = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = v5;
  uint64_t v6 = *(void *)(result + 32);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(a2 + 32) = v6;
  ++*(_DWORD *)(a2 + 24);
  ++*(_DWORD *)(result + 24);
  *(void *)(result + 72) = 0;
  *(void *)(result + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
  *(void *)(result + 56) = 0;
  *(void *)(result + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *(_DWORD *)(result + 64) = 0;
  uint64_t v7 = *(void *)(a2 + 48);
  *(void *)(result + 4ArcSharedObject::ArcSharedObject(this, 0) = *(void *)(a2 + 40);
  *(void *)(result + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v7;
  *(void *)(a2 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *(void *)(a2 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
  uint64_t v8 = *(void *)(result + 56);
  *(void *)(result + 56) = *(void *)(a2 + 56);
  *(void *)(a2 + 56) = v8;
  uint64_t v9 = *(void *)(result + 72);
  *(void *)(result + 72) = *(void *)(a2 + 72);
  *(void *)(a2 + 72) = v9;
  ++*(_DWORD *)(a2 + 64);
  ++*(_DWORD *)(result + 64);
  *(void *)(result + 112) = 0;
  *(void *)(result + 8re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
  *(void *)(result + 96) = 0;
  *(void *)(result + 8ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *(_DWORD *)(result + 104) = 0;
  uint64_t v10 = *(void *)(a2 + 88);
  *(void *)(result + 8ArcSharedObject::ArcSharedObject(this, 0) = *(void *)(a2 + 80);
  *(void *)(result + 8re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v10;
  *(void *)(a2 + 8ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *(void *)(a2 + 8re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
  uint64_t v11 = *(void *)(result + 96);
  *(void *)(result + 96) = *(void *)(a2 + 96);
  *(void *)(a2 + 96) = v11;
  uint64_t v12 = *(void *)(result + 112);
  *(void *)(result + 112) = *(void *)(a2 + 112);
  *(void *)(a2 + 112) = v12;
  ++*(_DWORD *)(a2 + 104);
  ++*(_DWORD *)(result + 104);
  return result;
}

uint64_t re::BucketArray<re::ProjectiveShadowBuilder::Input::PerSceneData,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  *(void *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(void *)(a1 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
  uint64_t result = re::BucketArray<re::ProjectiveShadowBuilder::Input::PerSceneData,4ul>::setBucketsCapacity(a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t *re::BucketArray<re::ProjectiveShadowBuilder::Input::PerSceneData,4ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  unint64_t v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        unint64_t v4 = v3[1];
        if (v4 <= a2) {
          break;
        }
        uint64_t result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)*v3 + 32))(*v3, 480, 0);
        uint64_t result = (uint64_t *)re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::add((uint64_t)v3, &v5);
        unint64_t v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

void *std::__any_imp::_SmallHandler<re::BucketArray<re::ProjectiveShadowBuilder::Input::PerSceneData,4ul> *>::__handle[abi:nn180100](unsigned int a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1;
  switch(v5)
  {
    case 1:
      uint64_t result = 0;
      uint64_t v8 = a2[1];
      *a3 = std::__any_imp::_SmallHandler<re::BucketArray<re::ProjectiveShadowBuilder::Input::PerSceneData,4ul> *>::__handle[abi:nn180100];
      a3[1] = v8;
      break;
    case 2:
      uint64_t result = 0;
      uint64_t v9 = a2[1];
      *a3 = std::__any_imp::_SmallHandler<re::BucketArray<re::ProjectiveShadowBuilder::Input::PerSceneData,4ul> *>::__handle[abi:nn180100];
      a3[1] = v9;
      goto LABEL_5;
    case 3:
      if (a4) {
      else
      }
        BOOL v10 = a5 == &std::__any_imp::__unique_typeinfo<re::BucketArray<re::ProjectiveShadowBuilder::Input::PerSceneData,4ul> *>::__id;
      if (v10) {
        uint64_t result = a2 + 1;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 4:
      return result;
    default:
      uint64_t result = 0;
LABEL_5:
      *a2 = 0;
      break;
  }
  return result;
}

void re::internal::Callable<re::RenderFrameDataArrayWrapper & re::RenderFrameDataStream::getOrAddDataArrayWrapper<re::ProjectiveShadowBuilder::Input::PerSceneData>(void)::{lambda(re::RenderFrameDataArrayWrapper*)#1},void ()(re::RenderFrameDataArrayWrapper*)>::~Callable()
{
}

uint64_t *re::internal::Callable<re::RenderFrameDataArrayWrapper & re::RenderFrameDataStream::getOrAddDataArrayWrapper<re::ProjectiveShadowBuilder::Input::PerSceneData>(void)::{lambda(re::RenderFrameDataArrayWrapper*)#1},void ()(re::RenderFrameDataArrayWrapper*)>::operator()(uint64_t a1, uint64_t (***a2)(uint64_t))
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t result = (uint64_t *)(**a2)(3);
  uint64_t v4 = *result;
  if (*result)
  {
    re::BucketArray<re::ProjectiveShadowBuilder::Input::PerSceneData,4ul>::deinit(*result);
    re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v4);
    uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)v2 + 40);
    return (uint64_t *)v5(v2, v4);
  }
  return result;
}

void *re::internal::Callable<re::RenderFrameDataArrayWrapper & re::RenderFrameDataStream::getOrAddDataArrayWrapper<re::ProjectiveShadowBuilder::Input::PerSceneData>(void)::{lambda(re::RenderFrameDataArrayWrapper*)#1},void ()(re::RenderFrameDataArrayWrapper*)>::cloneInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &unk_26E6FAF58;
  a2[1] = v2;
  return a2;
}

void *re::internal::Callable<re::RenderFrameDataArrayWrapper & re::RenderFrameDataStream::getOrAddDataArrayWrapper<re::ProjectiveShadowBuilder::Input::PerSceneData>(void)::{lambda(re::RenderFrameDataArrayWrapper*)#1},void ()(re::RenderFrameDataArrayWrapper*)>::moveInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &unk_26E6FAF58;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<re::RenderFrameDataArrayWrapper & re::RenderFrameDataStream::getOrAddDataArrayWrapper<re::ProjectiveShadowBuilder::Input::PerSceneData>(void)::{lambda(re::RenderFrameDataArrayWrapper*)#1},void ()(re::RenderFrameDataArrayWrapper*)>::size()
{
  return 16;
}

uint64_t re::BucketArray<re::ProjectiveShadowBuilder::Input::PerSceneData,4ul>::deinit(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2)
  {
    for (unint64_t i = 0; i != v2; ++i)
    {
      uint64_t v4 = re::BucketArray<re::ProjectiveShadowBuilder::Input::PerSceneData,4ul>::operator[](a1, i);
      re::DynamicArray<unsigned long>::deinit(v4 + 80);
      re::DynamicArray<re::ShadowClusterInfo>::deinit(v4 + 40);
      re::DynamicArray<unsigned long>::deinit(v4);
    }
  }
  while (*(void *)(a1 + 8))
    re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)a1);
  uint64_t result = re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1);
  *(void *)(a1 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t re::BucketArray<re::ProjectiveShadowBuilder::Input::PerSceneData,4ul>::operator[](uint64_t a1, unint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1011, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(void *)(a1 + 8) <= a2 >> 2) {
    goto LABEL_8;
  }
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v3 = a1 + 24;
  }
  else {
    uint64_t v3 = *(void *)(a1 + 32);
  }
  return *(void *)(v3 + 8 * (a2 >> 2)) + 120 * (a2 & 3);
}

uint64_t re::BucketArray<re::ProjectiveShadowBuilder::Input::PerSceneData,4ul>::addUninitialized(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 40);
  unint64_t v3 = *(void *)(a1 + 8);
  if (v2 + 1 > 4 * v3)
  {
    re::BucketArray<re::ProjectiveShadowBuilder::Input::PerSceneData,4ul>::setBucketsCapacity((uint64_t *)a1, (v2 + 4) >> 2);
    unint64_t v3 = *(void *)(a1 + 8);
  }
  if (v3 <= v2 >> 2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v4 = a1 + 24;
  }
  else {
    uint64_t v4 = *(void *)(a1 + 32);
  }
  uint64_t v5 = *(void *)(v4 + 8 * (v2 >> 2));
  ++*(void *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  return v5 + 120 * (v2 & 3);
}

uint64_t *re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v84 = *MEMORY[0x263EF8340];
  *(void *)a1 = a2;
  *(void *)(a1 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = a3;
  *(void *)(a1 + 16) = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a3 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ProjectiveShadowReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)+ 480;
  for (uint64_t i = 24; i != 56; i += 8)
  {
    uint64_t v7 = (_anonymous_namespace_ *)re::ecs2::ComponentBucketsBase::addBucket(*(re::ecs2::ComponentBucketsBase **)(a1 + 16));
    *(void *)(a1 + i) = v7;
  }
  uint64_t v9 = *(re::EventBus **)(a3 + 288);
  if (v9)
  {
    uint64_t v82 = re::globalAllocators((re *)result)[2];
    BOOL v10 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v82 + 32))(v82, 32, 0);
    *BOOL v10 = &unk_26E6FAFB0;
    v10[1] = a1;
    void v10[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>::componentChangedHandler<REComponentDidChangeEvent>;
    void v10[3] = 0;
    int v83 = v10;
    uint64_t v11 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v81, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::ProjectiveShadowReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v13 = v12;
    uint64_t v14 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *uint64_t v14 = v11;
    v14[1] = v13;
    uint64_t v15 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v81);
    uint64_t v79 = re::globalAllocators(v15)[2];
    uint64_t v16 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v79 + 32))(v79, 32, 0);
    *uint64_t v16 = &unk_26E6FB008;
    v16[1] = a1;
    uint64_t v16[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>::componentChangedHandler<REComponentDidActivateEvent>;
    v16[3] = 0;
    uint64_t v80 = v16;
    uint64_t v17 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v78, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::ProjectiveShadowReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v19 = v18;
    uint64_t v20 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *uint64_t v20 = v17;
    v20[1] = v19;
    uint64_t v21 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v78);
    uint64_t v76 = re::globalAllocators(v21)[2];
    uint64_t v22 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v76 + 32))(v76, 32, 0);
    *uint64_t v22 = &unk_26E6FB060;
    v22[1] = a1;
    void v22[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>::componentChangedHandler<REComponentWillDeactivateEvent>;
    v22[3] = 0;
    uint64_t v77 = v22;
    uint64_t v23 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v75, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::ProjectiveShadowReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v25 = v24;
    uint64_t v26 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *uint64_t v26 = v23;
    v26[1] = v25;
    uint64_t v27 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v75);
    uint64_t v73 = re::globalAllocators(v27)[2];
    uint64_t v28 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v73 + 32))(v73, 32, 0);
    *uint64_t v28 = &unk_26E6FB0B8;
    v28[1] = a1;
    uint64_t v28[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>::componentChangedHandler<REComponentDidAddEvent>;
    v28[3] = 0;
    uint64_t v74 = v28;
    uint64_t v29 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v72, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::ProjectiveShadowReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v31 = v30;
    uint64_t v32 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    void *v32 = v29;
    v32[1] = v31;
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v72);
    uint64_t result = (uint64_t *)(***(uint64_t (****)(void))(a2 + 224))();
    if (v33)
    {
      unint64_t v34 = result;
      uint64_t v35 = 8 * v33;
      do
      {
        uint64_t v36 = *v34++;
        uint64_t v70 = re::globalAllocators((re *)result)[2];
        unint64_t v71 = 0;
        uint64_t v37 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v70 + 32))(v70, 32, 0);
        *uint64_t v37 = &unk_26E6FAFB0;
        v37[1] = a1;
        v37[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>;
        v37[3] = 0;
        unint64_t v71 = v37;
        uint64_t v38 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v69, v36, 0);
        uint64_t v40 = v39;
        uint64_t v41 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *uint64_t v41 = v38;
        v41[1] = v40;
        unint64_t v42 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v69);
        uint64_t v67 = re::globalAllocators(v42)[2];
        long long v68 = 0;
        unsigned int v43 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v67 + 32))(v67, 32, 0);
        void *v43 = &unk_26E6FB008;
        v43[1] = a1;
        uint64_t v43[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>;
        v43[3] = 0;
        long long v68 = v43;
        uint64_t v44 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v66, v36, 0);
        uint64_t v46 = v45;
        unint64_t v47 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *unint64_t v47 = v44;
        v47[1] = v46;
        unint64_t v48 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v66);
        uint64_t v64 = re::globalAllocators(v48)[2];
        uint64_t v65 = 0;
        int64x2_t v49 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v64 + 32))(v64, 32, 0);
        *int64x2_t v49 = &unk_26E6FB060;
        v49[1] = a1;
        v49[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>;
        v49[3] = 0;
        uint64_t v65 = v49;
        uint64_t v50 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v63, v36, 0);
        uint64_t v52 = v51;
        unint64_t v53 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *unint64_t v53 = v50;
        v53[1] = v52;
        unint64_t v54 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v63);
        uint64_t v61 = re::globalAllocators(v54)[2];
        __int16 v62 = 0;
        int v55 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v61 + 32))(v61, 32, 0);
        *int v55 = &unk_26E6FB0B8;
        v55[1] = a1;
        v55[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>;
        v55[3] = 0;
        __int16 v62 = v55;
        uint64_t v56 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v60, v36, 0);
        uint64_t v58 = v57;
        unint64_t v59 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *unint64_t v59 = v56;
        v59[1] = v58;
        uint64_t result = (uint64_t *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v60);
        v35 -= 8;
      }
      while (v35);
    }
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>::componentChangedHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v4 + 56), &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(void *)(*(void *)(v4 + 64) + 16 * v5 + 8));
  if (!*(unsigned char *)(v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *(void *)(v4 + 176);
  int v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if (v7) {
      uint64_t v8 = (void *)(v4 + 192);
    }
    else {
      uint64_t v8 = *(void **)(v4 + 200);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    uint64_t v9 = (uint64_t *)(v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v9 = *(uint64_t **)(v4 + 200);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ProjectiveShadowReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    uint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>::componentChangedHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v4 + 56), &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(void *)(*(void *)(v4 + 64) + 16 * v5 + 8));
  if (!*(unsigned char *)(v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *(void *)(v4 + 176);
  int v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if (v7) {
      uint64_t v8 = (void *)(v4 + 192);
    }
    else {
      uint64_t v8 = *(void **)(v4 + 200);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    uint64_t v9 = (uint64_t *)(v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v9 = *(uint64_t **)(v4 + 200);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ProjectiveShadowReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    uint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>::componentChangedHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v4 + 56), &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(void *)(*(void *)(v4 + 64) + 16 * v5 + 8));
  if (!*(unsigned char *)(v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *(void *)(v4 + 176);
  int v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if (v7) {
      uint64_t v8 = (void *)(v4 + 192);
    }
    else {
      uint64_t v8 = *(void **)(v4 + 200);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    uint64_t v9 = (uint64_t *)(v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v9 = *(uint64_t **)(v4 + 200);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ProjectiveShadowReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    uint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>::componentChangedHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v4 + 56), &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(void *)(*(void *)(v4 + 64) + 16 * v5 + 8));
  if (!*(unsigned char *)(v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *(void *)(v4 + 176);
  int v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if (v7) {
      uint64_t v8 = (void *)(v4 + 192);
    }
    else {
      uint64_t v8 = *(void **)(v4 + 200);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    uint64_t v9 = (uint64_t *)(v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v9 = *(uint64_t **)(v4 + 200);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ProjectiveShadowReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    uint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(void *a1, void *a2)
{
  unint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    unint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6FAFB0;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6FAFB0;
  *(void *)(a2 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6FB008;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6FB008;
  *(void *)(a2 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6FB060;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6FB060;
  *(void *)(a2 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6FB0B8;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6FB0B8;
  *(void *)(a2 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

void *re::ecs2::allocInfo_WorldScopeComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_205, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_205))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF86110, "WorldScopeComponent");
    __cxa_guard_release(&_MergedGlobals_205);
  }
  return &unk_26AF86110;
}

void re::ecs2::initInfo_WorldScopeComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v9[0] = 0x4CD7DED8B5FCA36;
  v9[1] = "WorldScopeComponent";
  re::StringID::destroyString((re::StringID *)v9);
  *((_OWORD *)this + 2) = v10;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF86108, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF86108);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 4ArcSharedObject::ArcSharedObject(this, 0) = 3;
      *(void *)(v7 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF86100 = v7;
      __cxa_guard_release(&qword_26AF86108);
    }
  }
  *((void *)this + 2) = 0x2000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((void *)this + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = &qword_26AF86100;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::WorldScopeComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 1ArcSharedObject::ArcSharedObject(this, 0) = re::internal::defaultDestruct<re::ecs2::WorldScopeComponent>;
  *((void *)this + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::WorldScopeComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::WorldScopeComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v8 = v10;
}

void re::internal::defaultConstruct<re::ecs2::WorldScopeComponent>(int a1, int a2, ArcSharedObject *this)
{
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)(v3 + 16) = 0;
  *(unsigned char *)(v3 + 24) = 0;
  *(void *)uint64_t v3 = &unk_26E6F2650;
}

void *re::internal::defaultDestruct<re::ecs2::WorldScopeComponent>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

void re::internal::defaultConstructV2<re::ecs2::WorldScopeComponent>(ArcSharedObject *a1)
{
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(void *)(v1 + 16) = 0;
  *(unsigned char *)(v1 + 24) = 0;
  *(void *)uint64_t v1 = &unk_26E6F2650;
}

void *re::internal::defaultDestructV2<re::ecs2::WorldScopeComponent>(void *a1)
{
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_WorldScopeComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"WorldScopeComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_WorldScopeComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_WorldScopeComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::WorldScopeComponent>, this);
}

uint64_t re::ecs2::MeshComponentHelper::dynamicFunctionConstantsForMeshScene(uint64_t a1, uint64_t a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF86198, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF86198))
  {
    qword_26AF86190 = re::hashString((re *)"EnableTriPlanarVideoSupport", v19);
    __cxa_guard_release(&qword_26AF86198);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF861A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF861A8))
  {
    qword_26AF861A0 = re::hashString((re *)"EnableInverseToneMapping", v20);
    __cxa_guard_release(&qword_26AF861A8);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF861B8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF861B8))
  {
    qword_26AF861B0 = re::hashString((re *)"EnableScreenVideoLetterBoxPadding", v21);
    __cxa_guard_release(&qword_26AF861B8);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF861C8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF861C8))
  {
    qword_26AF861C0 = re::hashString((re *)"EnableVideoColorSpaceTransformation", v22);
    __cxa_guard_release(&qword_26AF861C8);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF861D8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF861D8))
  {
    qword_26AF861D0 = re::hashString((re *)"EnableVideoColorTransformation", v23);
    __cxa_guard_release(&qword_26AF861D8);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF861E8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF861E8))
  {
    qword_26AF861E0 = re::hashString((re *)"VideoSamplingMode", v24);
    __cxa_guard_release(&qword_26AF861E8);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF861F8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF861F8))
  {
    qword_26AF861F0 = re::hashString((re *)"EnableVideoColorInvert", v25);
    __cxa_guard_release(&qword_26AF861F8);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF86208, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF86208))
  {
    qword_26AF86200 = re::hashString((re *)"PerceptualBlendingMode", v26);
    __cxa_guard_release(&qword_26AF86208);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF86218, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF86218))
  {
    qword_26AF86210 = re::hashString((re *)"PortalClippingMode", v27);
    __cxa_guard_release(&qword_26AF86218);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF86228, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF86228))
  {
    qword_26AF86220 = re::hashString((re *)"EnableAREnvProbe", v28);
    __cxa_guard_release(&qword_26AF86228);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF86238, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF86238))
  {
    qword_26AF86230 = re::hashString((re *)"EnableVirtualEnvironmentProbes", v29);
    __cxa_guard_release(&qword_26AF86238);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF86248, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF86248))
  {
    qword_26AF86240 = re::hashString((re *)"EnableIBLRotation", v30);
    __cxa_guard_release(&qword_26AF86248);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF86258, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF86258))
  {
    qword_26AF86250 = re::hashString((re *)"EnableIBLBlending", v31);
    __cxa_guard_release(&qword_26AF86258);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF86268, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF86268))
  {
    qword_26AF86260 = re::hashString((re *)"EnableShaderGraphLightSpill", v32);
    __cxa_guard_release(&qword_26AF86268);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF86278, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF86278))
  {
    qword_26AF86270 = re::hashString((re *)"EnableVideoLegacyMode", v33);
    __cxa_guard_release(&qword_26AF86278);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF86288, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF86288))
  {
    qword_26AF86280 = re::hashString((re *)"VideoTriangleFillMode", v34);
    __cxa_guard_release(&qword_26AF86288);
  }
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  re::HashBrown<unsigned long long,re::ecs2::PortalServiceQuery::WorldType,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::init((void *)a1, *(void *)(a2 + 56), 27);
  uint64_t v36 = qword_26AF86200;
  int v35 = *(_DWORD *)(a2 + 24);
  re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::addNew((_anonymous_namespace_ *)a1, &v36, &v35);
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4)
  {
    uint64_t v36 = qword_26AF86190;
    int v35 = *(unsigned __int8 *)(v4 + 204);
    re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::addNew((_anonymous_namespace_ *)a1, &v36, &v35);
    uint64_t v36 = qword_26AF861A0;
    int v35 = *(unsigned __int8 *)(*(void *)(a2 + 8) + 207);
    re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::addNew((_anonymous_namespace_ *)a1, &v36, &v35);
    uint64_t v36 = qword_26AF861B0;
    int v35 = *(unsigned __int8 *)(*(void *)(a2 + 8) + 217);
    re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::addNew((_anonymous_namespace_ *)a1, &v36, &v35);
    uint64_t v36 = qword_26AF861C0;
    int v35 = *(unsigned __int8 *)(*(void *)(a2 + 8) + 205);
    re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::addNew((_anonymous_namespace_ *)a1, &v36, &v35);
    uint64_t v36 = qword_26AF861D0;
    int v35 = *(unsigned __int8 *)(*(void *)(a2 + 8) + 208);
    re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::addNew((_anonymous_namespace_ *)a1, &v36, &v35);
    uint64_t v36 = qword_26AF861E0;
    int v35 = *(_DWORD *)(*(void *)(a2 + 8) + 212);
    re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::addNew((_anonymous_namespace_ *)a1, &v36, &v35);
    uint64_t v36 = qword_26AF861F0;
    int v35 = *(unsigned __int8 *)(*(void *)(a2 + 8) + 309);
    re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::addNew((_anonymous_namespace_ *)a1, &v36, &v35);
    uint64_t v36 = qword_26AF86270;
    int v35 = *(unsigned __int8 *)(*(void *)(a2 + 8) + 216);
    re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::addNew((_anonymous_namespace_ *)a1, &v36, &v35);
    uint64_t v36 = qword_26AF86280;
    int v35 = *(_DWORD *)(*(void *)(a2 + 8) + 312);
    re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::addNew((_anonymous_namespace_ *)a1, &v36, &v35);
  }
  if (*(float *)(a2 + 44) <= 0.0)
  {
    uint64_t v36 = qword_26AF86220;
    int v35 = 0;
    re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::addNew((_anonymous_namespace_ *)a1, &v36, &v35);
    uint64_t v36 = qword_26AF86230;
    int v35 = 0;
    re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::addNew((_anonymous_namespace_ *)a1, &v36, &v35);
  }
  if (*(unsigned char *)(a2 + 48))
  {
    uint64_t v36 = qword_26AF86210;
    int v35 = 2;
    re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::addNew((_anonymous_namespace_ *)a1, &v36, &v35);
  }
  uint64_t v5 = *(unsigned char **)(a2 + 16);
  if (v5)
  {
    uint64_t v36 = qword_26AF86240;
    if (v5[1208])
    {
      int v6 = 1;
    }
    else if (v5[136])
    {
      int v6 = v5[1209];
    }
    else
    {
      int v6 = 0;
    }
    int v35 = v6;
    re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::addNew((_anonymous_namespace_ *)a1, &v36, &v35);
    uint64_t v36 = qword_26AF86250;
    int v35 = *(unsigned __int8 *)(*(void *)(a2 + 16) + 136);
    re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::addNew((_anonymous_namespace_ *)a1, &v36, &v35);
  }
  if (*(unsigned char *)(a2 + 40))
  {
    uint64_t v7 = *(void *)(a2 + 32);
    if (v7)
    {
      uint64_t v8 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(*(void *)(v7 + 16) + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
      LODWORD(v7) = v8 && *(float *)(v8 + 300) > 0.0;
    }
    uint64_t v36 = qword_26AF86260;
    int v35 = v7;
    re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::addNew((_anonymous_namespace_ *)a1, &v36, &v35);
  }
  uint64_t result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(*(void *)a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::EntityFunctionConstantComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (result)
  {
    uint64_t v10 = result;
    uint64_t v11 = *(unsigned int *)(result + 64);
    if (v11)
    {
      uint64_t v12 = 0;
      uint64_t v13 = (int *)(*(void *)(result + 48) + 8);
      while (1)
      {
        int v14 = *v13;
        v13 += 8;
        if (v14 < 0) {
          break;
        }
        if (v11 == ++v12)
        {
          LODWORD(v12) = *(_DWORD *)(result + 64);
          break;
        }
      }
    }
    else
    {
      LODWORD(v12) = 0;
    }
    if (v11 != v12)
    {
      uint64_t v15 = v12;
      do
      {
        uint64_t v16 = *(void *)(v10 + 48) + 32 * v15;
        uint64_t v36 = *(void *)(v16 + 16);
        int v35 = *(_DWORD *)(v16 + 24);
        uint64_t result = re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::addNew((_anonymous_namespace_ *)a1, &v36, &v35);
        if (*(_DWORD *)(v10 + 64) <= (v12 + 1)) {
          int v17 = v12 + 1;
        }
        else {
          int v17 = *(_DWORD *)(v10 + 64);
        }
        int v18 = v12;
        while (1)
        {
          uint64_t v15 = (v18 + 1);
          if (v17 - 1 == v18) {
            break;
          }
          ++v18;
          LODWORD(v12) = v15;
          if ((*(_DWORD *)(*(void *)(v10 + 48) + 32 * v15 + 8) & 0x80000000) != 0) {
            goto LABEL_54;
          }
        }
        LODWORD(v12) = v17;
LABEL_54:
        ;
      }
      while (v11 != v12);
    }
  }
  return result;
}

uint64_t re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::addNew(_anonymous_namespace_ *a1, void *a2, int *a3)
{
  uint64_t v6 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(a1, a2);
  if (v6 != -1) {
    return *((void *)a1 + 1) + 16 * v6 + 8;
  }
  return re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::internalAdd(a1, a2, a3);
}

uint64_t re::ecs2::MeshComponentHelper::techniqueMappingOverlayNameHashForMeshScene(re::ecs2::MeshComponentHelper *this, float a2)
{
  int v2 = (int)this;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF862B8, memory_order_acquire) & 1) == 0)
  {
    this = (re::ecs2::MeshComponentHelper *)__cxa_guard_acquire(&qword_26AF862B8);
    if (this)
    {
      re::Defaults::BOOLValue((re::Defaults *)"disableFadeTechniqueMappingOverride", v6, v8);
      if (v8[0]) {
        char v7 = v8[1] ^ 1;
      }
      else {
        char v7 = 1;
      }
      _MergedGlobals_206 = v7;
      __cxa_guard_release(&qword_26AF862B8);
    }
  }
  if (_MergedGlobals_206 && (re::useDitherFade(this) & 1) == 0)
  {
    if (a2 < 1.0 || (v2 & 1) != 0) {
      goto LABEL_5;
    }
  }
  else if (v2)
  {
LABEL_5:
    if (re::MaterialParameterTable::kFadeNameHash(void)::once != -1) {
      dispatch_once(&re::MaterialParameterTable::kFadeNameHash(void)::once, &__block_literal_global_4_1);
    }
    uint64_t v4 = &re::MaterialParameterTable::kFadeNameHash(void)::_kFadeNameHash;
    return *v4;
  }
  if (re::MaterialParameterTable::kDefaultNameHash(void)::once != -1) {
    dispatch_once(&re::MaterialParameterTable::kDefaultNameHash(void)::once, &__block_literal_global_29);
  }
  uint64_t v4 = &re::MaterialParameterTable::kDefaultNameHash(void)::_kDefaultNameHash;
  return *v4;
}

uint64_t re::ecs2::containsShaderGraphMaterialWithLightSpillNode(uint64_t this, const re::ecs2::MeshComponent *a2)
{
  if (!this) {
    return this;
  }
  int v2 = a2;
  uint64_t v3 = (const re::ecs2::MeshComponent *)((char *)a2 + 24 * this);
  while (1)
  {
    uint64_t v4 = re::AssetHandle::loadedAsset<re::MaterialAsset>(v2);
    if (!v4) {
      goto LABEL_16;
    }
    uint64_t v5 = *(void **)(v4 + 1664);
    if (!v5 || *(unsigned char *)(v4 + 1730) != 7) {
      goto LABEL_16;
    }
    uint64_t v6 = v5[22];
    if (v6) {
      break;
    }
LABEL_11:
    uint64_t v10 = v5[25];
    if (v10)
    {
      uint64_t v11 = v5[26];
      uint64_t v12 = 144 * v10;
      uint64_t v13 = (re::sg::CachedCompilationMaterial **)(v11 + 48);
      do
      {
        if (*v13)
        {
          re::sg::CachedCompilationMaterial::getMaterial(*v13, &v15);
          char v14 = [v15 hasConnectedLightSpillNodes];

          if (v14) {
            return 1;
          }
        }
        v13 += 18;
        v12 -= 144;
      }
      while (v12);
    }
LABEL_16:
    int v2 = (re::MaterialAsset *)((char *)v2 + 24);
    if (v2 == v3) {
      return 0;
    }
  }
  uint64_t v7 = 144 * v6;
  uint64_t v8 = (re::sg::CachedCompilationMaterial **)(v5[23] + 48);
  while (1)
  {
    if (*v8)
    {
      re::sg::CachedCompilationMaterial::getMaterial(*v8, &v15);
      char v9 = [v15 hasConnectedLightSpillNodes];

      if (v9) {
        return 1;
      }
    }
    v8 += 18;
    v7 -= 144;
    if (!v7) {
      goto LABEL_11;
    }
  }
}

uint64_t re::ecs2::containsShaderGraphMaterialWithModelPositionOffset(re::ecs2 *this, const re::ecs2::MeshComponent *a2)
{
  uint64_t v2 = *((void *)this + 9);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = (re::MaterialAsset *)*((void *)this + 11);
  uint64_t v4 = (re::MaterialAsset *)((char *)v3 + 24 * v2);
  while (1)
  {
    uint64_t v5 = re::AssetHandle::loadedAsset<re::MaterialAsset>(v3);
    if (v5)
    {
      uint64_t v6 = *(void *)(v5 + 1664);
      if (v6)
      {
        if (*(unsigned char *)(v5 + 1730) == 7)
        {
          uint64_t v7 = *(void *)(v6 + 176);
          if (v7) {
            break;
          }
        }
      }
    }
LABEL_11:
    uint64_t v3 = (re::MaterialAsset *)((char *)v3 + 24);
    if (v3 == v4) {
      return 0;
    }
  }
  uint64_t v8 = 144 * v7;
  char v9 = (re::sg::CachedCompilationMaterial **)(*(void *)(v6 + 184) + 48);
  while (1)
  {
    if (*v9)
    {
      re::sg::CachedCompilationMaterial::getMaterial(*v9, &v12);
      char hasGeometryModifierWithModelPositionOffset = re::sg::Material::hasGeometryModifierWithModelPositionOffset(&v12);

      if (hasGeometryModifierWithModelPositionOffset) {
        return 1;
      }
    }
    v9 += 18;
    v8 -= 144;
    if (!v8) {
      goto LABEL_11;
    }
  }
}

void re::ecs2::fetchBuffers(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _anonymous_namespace_ *a7, unsigned char *a8)
{
  uint64_t v81 = *MEMORY[0x263EF8340];
  if (*(void *)(a2 + 16))
  {
    uint64_t v8 = a6;
    uint64_t v9 = a4;
    uint64_t v10 = a3;
    unint64_t v11 = 0;
    uint64_t v51 = a2;
    while (1)
    {
      unint64_t v12 = *(void *)(v10 + 16);
      if (v12 <= v11) {
        goto LABEL_47;
      }
      uint64_t v13 = *(void *)(*(void *)(a2 + 32) + 8 * v11);
      char v14 = *(void **)(*(void *)(v10 + 32) + 8 * v11);
      if (v14) {
        id v15 = v14 + 1;
      }
      if (!v13 || *(void *)(v9 + 8) == 0) {
        break;
      }
      uint64_t v17 = *(void *)(v9 + 16);
      uint64_t v18 = *(void *)(v17 + 128);
      uint64_t v63 = 0;
      uint64_t v64 = &v63;
      uint64_t v65 = 0x2000000000;
      uint64_t v66 = 0;
      uint64_t v59 = 0;
      unint64_t v60 = &v59;
      uint64_t v61 = 0x2000000000;
      uint64_t v62 = 0;
      v57[1] = (id)MEMORY[0x263EF8330];
      uint64_t v57[2] = (id)0x40000000;
      v57[3] = ___ZN2re4ecs212fetchBuffersERKNS_13RenderManagerERKNS_12DynamicArrayIP10DRBuffer_sEERKNS4_INS0_21DirectParameterHandleEEERKNS_10FixedArrayINS_14LinkedFunctionEEERNS_11BucketArrayIN2NS9SharedPtrIN3MTL6BufferEEELm8EEERNSE_IPSN_EERNS4_INS_13TextureHandleEEERb_block_invoke;
      void v57[4] = &unk_264BE3A18;
      BOOL v50 = v18 != 0;
      BOOL v58 = v18 != 0;
      v57[5] = &v63;
      v57[6] = &v59;
      unint64_t v19 = (_anonymous_namespace_ *)DRBufferRead();
      if (v18)
      {
        unint64_t v12 = v14[7];
        memset(&v68[2], 0, 24);
        uint64_t v20 = v60[3];
        v68[0] = v64[3];
        v68[1] = v20;
        uint64_t v68[3] = v12;
        if (v12)
        {
          if (v12 >> 59) {
            goto LABEL_50;
          }
          v68[4] = v22;
          if (v22)
          {
            unint64_t v24 = v12 - 1;
            if (v12 != 1)
            {
              do
              {
                *uint64_t v22 = 0;
                v22[1] = 0;
                v22 += 4;
                --v24;
              }
              while (v24);
            }
            unint64_t v25 = 0;
            *uint64_t v22 = 0;
            v22[1] = 0;
            while (1)
            {
              unint64_t v26 = v14[7];
              if (v26 <= v25) {
                break;
              }
              unint64_t v26 = v68[3];
              if (v68[3] <= v25) {
                goto LABEL_46;
              }
              uint64_t v27 = *(void *)(v17 + 128);
              if (v27)
              {
                uint64_t v28 = (re::TextureAsset *)(v14[9] + 32 * v25);
                uint64_t v29 = v68[4];
                uint64_t v30 = (re::TextureHandle *)(v68[4] + 32 * v25);
                uint64_t v31 = *((void *)v28 + 3);
                uint64_t v32 = *(void *)(v17 + 136);
                while (*(void *)(v32 + 8) != v31)
                {
                  v32 += 16;
                  if (!--v27) {
                    goto LABEL_37;
                  }
                }
                uint64_t v33 = re::AssetHandle::loadedAsset<re::TextureAsset>(v28);
                int v34 = *(_DWORD *)v32;
                if (v33 && *(_DWORD *)(v33 + 380) == v34)
                {
                  int v35 = (re::TextureHandle *)(v33 + 48);
                  re::TextureHandle::TextureHandle((re::TextureHandle *)v56, (const re::TextureHandle *)(v33 + 48));
                  int v36 = *(_DWORD *)v32;
                  re::TextureHandle::operator=(v30, (re::TextureHandle *)v56);
                  uint64_t v37 = v29 + 32 * v25;
                  *(unsigned char *)(v37 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 28) = 0;
                  *(_DWORD *)(v37 + 24) = v36;
                  *(void *)(v37 + 16) = v31;
                  re::TextureHandle::invalidate((re::TextureHandle *)v56);
                  re::DynamicArray<re::TextureHandle>::add(a7, v35);
                }
                else
                {
                  re::TextureManager::stockTextureForType(*(re **)(a1 + 64), v34, &v76);
                  v57[0] = (id)v76;
                  int v38 = *(_DWORD *)v32;
                  NS::SharedPtr<MTL::Texture>::operator=((void **)v30, v57);
                  uint64_t v39 = v29 + 32 * v25;
                  *(unsigned char *)(v39 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 28) = 1;
                  *(_DWORD *)(v39 + 24) = v38;
                  *(void *)(v39 + 16) = v31;
                  if (v57[0])
                  {

                    v57[0] = 0;
                  }
                  *a8 = 1;
                  if ((void)v76) {
                }
                  }
              }
LABEL_37:
              if (++v25 == v12) {
                goto LABEL_38;
              }
            }
            uint64_t v67 = 0;
            long long v79 = 0u;
            long long v80 = 0u;
            long long v77 = 0u;
            long long v78 = 0u;
            long long v76 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)int64x2_t v69 = 136315906;
            *(void *)&v69[4] = "operator[]";
            __int16 v70 = 1024;
            int v71 = 789;
            __int16 v72 = 2048;
            unint64_t v73 = v25;
            __int16 v74 = 2048;
            unint64_t v75 = v26;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_46:
            uint64_t v67 = 0;
            long long v79 = 0u;
            long long v80 = 0u;
            long long v77 = 0u;
            long long v78 = 0u;
            long long v76 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)int64x2_t v69 = 136315906;
            *(void *)&v69[4] = "operator[]";
            __int16 v70 = 1024;
            int v71 = 468;
            __int16 v72 = 2048;
            unint64_t v73 = v25;
            __int16 v74 = 2048;
            unint64_t v75 = v26;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_47:
            *(void *)int64x2_t v69 = 0;
            long long v79 = 0u;
            long long v80 = 0u;
            long long v77 = 0u;
            long long v78 = 0u;
            long long v76 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            LODWORD(v68[0]) = 136315906;
            *(void *)((char *)v68 + 4) = "operator[]";
            WORD2(v68[1]) = 1024;
            *(_DWORD *)((char *)&v68[1] + 6) = 797;
            WORD1(v68[2]) = 2048;
            *(void *)((char *)&v68[2] + 4) = v11;
            WORD2(v68[3]) = 2048;
            *(void *)((char *)&v68[3] + 6) = v12;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_48:
            *(void *)int64x2_t v69 = 0;
            long long v79 = 0u;
            long long v80 = 0u;
            long long v77 = 0u;
            long long v78 = 0u;
            long long v76 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            LODWORD(v68[0]) = 136315906;
            *(void *)((char *)v68 + 4) = "operator[]";
            WORD2(v68[1]) = 1024;
            *(_DWORD *)((char *)&v68[1] + 6) = 468;
            WORD1(v68[2]) = 2048;
            *(void *)((char *)&v68[2] + 4) = v11;
            WORD2(v68[3]) = 2048;
            *(void *)((char *)&v68[3] + 6) = v12;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_49:
            *(void *)int64x2_t v69 = 0;
            long long v79 = 0u;
            long long v80 = 0u;
            long long v77 = 0u;
            long long v78 = 0u;
            long long v76 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            LODWORD(v68[0]) = 136315906;
            *(void *)((char *)v68 + 4) = "operator[]";
            WORD2(v68[1]) = 1024;
            *(_DWORD *)((char *)&v68[1] + 6) = 468;
            WORD1(v68[2]) = 2048;
            *(void *)((char *)&v68[2] + 4) = v11;
            WORD2(v68[3]) = 2048;
            *(void *)((char *)&v68[3] + 6) = v12;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_50:
            re::internal::assertLog((re::internal *)6, v21, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 32, v12);
            _os_crash();
            __break(1u);
          }
          re::internal::assertLog((re::internal *)4, v23, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
          _os_crash();
          __break(1u);
        }
LABEL_38:
        re::HashSetBase<re::UnresolvedArgumentBufferEntry,re::UnresolvedArgumentBufferEntry,re::internal::ValueAsKey<re::UnresolvedArgumentBufferEntry>,re::Hash<re::UnresolvedArgumentBufferEntry>,re::EqualTo<re::UnresolvedArgumentBufferEntry>,true,false>::add(*(void *)(a1 + 24) + 1192, v68);
        re::FixedArray<re::ArgumentBufferTextureRecord>::deinit(&v68[2]);
        uint64_t v8 = a6;
      }
      uint64_t v40 = *(void **)(a1 + 184);
      uint64_t v41 = v64[3];
      uint64_t v42 = v60[3];
      v54[0] = MEMORY[0x263EF8330];
      v54[1] = 0x40000000;
      v54[2] = ___ZN2re4ecs212fetchBuffersERKNS_13RenderManagerERKNS_12DynamicArrayIP10DRBuffer_sEERKNS4_INS0_21DirectParameterHandleEEERKNS_10FixedArrayINS_14LinkedFunctionEEERNS_11BucketArrayIN2NS9SharedPtrIN3MTL6BufferEEELm8EEERNSE_IPSN_EERNS4_INS_13TextureHandleEEERb_block_invoke_2;
      v54[3] = &__block_descriptor_tmp_19;
      BOOL v55 = v50;
      id v43 = objc_msgSend(v40, sel_newBufferWithBytesNoCopy_length_options_deallocator_, v41, v42, 0, v54);
      uint64_t v44 = (void *)re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::addUninitialized(a5);
      void *v44 = v43;
      unint64_t v12 = *(void *)(v8 + 8);
      if (v12 <= v11) {
        goto LABEL_49;
      }
      *(void *)(*(void *)(v8 + 16) + 8 * v11) = v43;
      if (v43) {

      }
      _Block_object_dispose(&v59, 8);
      _Block_object_dispose(&v63, 8);
      uint64_t v10 = a3;
      uint64_t v9 = a4;
      if (v14) {
        goto LABEL_13;
      }
LABEL_14:
      ++v11;
      a2 = v51;
      if (v11 >= *(void *)(v51 + 16)) {
        return;
      }
    }
    unint64_t v12 = *(void *)(v8 + 8);
    if (v12 <= v11) {
      goto LABEL_48;
    }
    *(void *)(*(void *)(v8 + 16) + 8 * v11) = 0;
    if (!v14) {
      goto LABEL_14;
    }
LABEL_13:

    goto LABEL_14;
  }
}

uint64_t ___ZN2re4ecs212fetchBuffersERKNS_13RenderManagerERKNS_12DynamicArrayIP10DRBuffer_sEERKNS4_INS0_21DirectParameterHandleEEERKNS_10FixedArrayINS_14LinkedFunctionEEERNS_11BucketArrayIN2NS9SharedPtrIN3MTL6BufferEEELm8EEERNSE_IPSN_EERNS4_INS_13TextureHandleEEERb_block_invoke(uint64_t result, const void *a2, size_t a3)
{
  uint64_t v5 = result;
  if (!*(unsigned char *)(result + 48))
  {
    *(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2;
LABEL_8:
    *(void *)(*(void *)(*(void *)(v5 + 40) + 8) + 24) = a3;
    return result;
  }
  uint64_t v6 = re::globalAllocators((re *)result);
  if (!a3)
  {
    uint64_t v9 = 0;
    goto LABEL_7;
  }
  uint64_t v7 = a3 + 16;
  if (a3 < 0xFFFFFFFFFFFFFFF0)
  {
    uint64_t v8 = (size_t *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v6[2] + 32))(v6[2], v7, 0);
    uint64_t v9 = v8 + 2;
    *uint64_t v8 = a3;
    v8[1] = (size_t)v8;
    bzero(v8 + 2, a3);
LABEL_7:
    *(void *)(*(void *)(*(void *)(v5 + 32) + 8) + 24) = v9;
    uint64_t result = (uint64_t)memcpy(*(void **)(*(void *)(*(void *)(v5 + 32) + 8) + 24), a2, a3);
    goto LABEL_8;
  }
  re::internal::assertLog((re::internal *)6, v7, "assertion failure: '%s' (%s:line %i) Size overflow in allocateArray. Element size = %zu, count = %zu", "!overflow", "allocateArray", 61, 1, a3);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

re::TextureHandle *re::DynamicArray<re::TextureHandle>::add(_anonymous_namespace_ *this, re::TextureHandle *a2)
{
  unint64_t v4 = *((void *)this + 2);
  if (v4 >= *((void *)this + 1))
  {
    re::DynamicArray<re::TextureHandle>::growCapacity(this, v4 + 1);
    unint64_t v4 = *((void *)this + 2);
  }
  uint64_t result = re::TextureHandle::TextureHandle((re::TextureHandle *)(*((void *)this + 4) + 16 * v4), a2);
  ++*((void *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

uint64_t *___ZN2re4ecs212fetchBuffersERKNS_13RenderManagerERKNS_12DynamicArrayIP10DRBuffer_sEERKNS4_INS0_21DirectParameterHandleEEERKNS_10FixedArrayINS_14LinkedFunctionEEERNS_11BucketArrayIN2NS9SharedPtrIN3MTL6BufferEEELm8EEERNSE_IPSN_EERNS4_INS_13TextureHandleEEERb_block_invoke_2(uint64_t *result, uint64_t a2)
{
  if (*((unsigned char *)result + 32))
  {
    uint64_t result = re::globalAllocators((re *)result);
    if (a2)
    {
      uint64_t v3 = *(uint64_t (**)(void))(*(void *)result[2] + 40);
      return (uint64_t *)v3();
    }
  }
  return result;
}

uint64_t re::ecs2::MeshComponent::updateMaterialData(re::ecs2::MeshComponent *this, const re::ecs2::MeshSystem *a2, const re::MeshAsset *a3, unint64_t a4, const re::DirectResourceAssetTracker *a5)
{
  uint64_t v223 = *MEMORY[0x263EF8340];
  uint64_t v177 = (re::RenderManager *)*((void *)a2 + 14);
  uint64_t v11 = *((void *)v177 + 4);
  size_t v12 = (size_t)this + 224;
  uint64_t v13 = *((void *)this + 29);
  if (v13) {
    int v175 = *(unsigned __int8 *)(v13 + 260) != 0;
  }
  else {
    int v175 = 0;
  }
  uint64_t v14 = *((void *)v177 + 17);
  if (v14) {
    id v15 = (void *)(v14 + 8);
  }
  else {
    id v15 = 0;
  }
  inited = (re *)objc_initWeak(&location, v15);
  uint64_t v17 = re::globalAllocators(inited);
  size_t v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v17[2] + 32))(v17[2], 512, 8);
  *(_OWORD *)size_t v18 = 0u;
  *(_OWORD *)(v18 + 16) = 0u;
  *(_OWORD *)(v18 + 32) = 0u;
  *(_OWORD *)(v18 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0u;
  *(_OWORD *)(v18 + 64) = 0u;
  *(_OWORD *)(v18 + 8ArcSharedObject::ArcSharedObject(this, 0) = 0u;
  *(_OWORD *)(v18 + 96) = 0u;
  *(_OWORD *)(v18 + 112) = 0u;
  *(_OWORD *)(v18 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 28) = 0u;
  *(_OWORD *)(v18 + 144) = 0u;
  *(_OWORD *)(v18 + 1re::HashTable<re::ecs2::Entity const*,re::ecs2::BillboardData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::deinit((uint64_t *)this + 60) = 0u;
  *(_OWORD *)(v18 + 176) = 0u;
  *(_OWORD *)(v18 + 192) = 0u;
  *(_OWORD *)(v18 + 20re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0u;
  *(_OWORD *)(v18 + 224) = 0u;
  *(_OWORD *)(v18 + 24ArcSharedObject::ArcSharedObject(this, 0) = 0u;
  *(_OWORD *)(v18 + 256) = 0u;
  *(_OWORD *)(v18 + re::DynamicArray<re::TraceEntry>::deinit((uint64_t)this + 272) = 0u;
  *(_OWORD *)(v18 + 28re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0u;
  *(_OWORD *)(v18 + 304) = 0u;
  *(_OWORD *)(v18 + 32ArcSharedObject::ArcSharedObject(this, 0) = 0u;
  *(_OWORD *)(v18 + 336) = 0u;
  *(_OWORD *)(v18 + 352) = 0u;
  *(_OWORD *)(v18 + 36re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0u;
  *(_OWORD *)(v18 + 384) = 0u;
  *(_OWORD *)(v18 + 40ArcSharedObject::ArcSharedObject(this, 0) = 0u;
  *(_OWORD *)(v18 + 416) = 0u;
  *(_OWORD *)(v18 + 432) = 0u;
  *(_OWORD *)(v18 + 44re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0u;
  *(_OWORD *)(v18 + 464) = 0u;
  *(_OWORD *)(v18 + 48ArcSharedObject::ArcSharedObject(this, 0) = 0u;
  *(_OWORD *)(v18 + 496) = 0u;
  *(_DWORD *)(v18 + 28ArcSharedObject::ArcSharedObject(this, 0) = 1;
  *(void *)(v18 + 296) = 0;
  *(void *)(v18 + 304) = 0;
  *(void *)(v18 + 28re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
  *(_DWORD *)(v18 + 312) = 0;
  *(_OWORD *)(v18 + 32ArcSharedObject::ArcSharedObject(this, 0) = 0u;
  *(_OWORD *)(v18 + 336) = 0u;
  *(void *)(v18 + 352) = 0;
  *(_DWORD *)(v18 + 3re::HashTable<re::ecs2::Entity const*,re::ecs2::BillboardData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::deinit((uint64_t *)this + 60) = 1;
  *(void *)(v18 + 376) = 0;
  *(void *)(v18 + 384) = 0;
  *(void *)(v18 + 36re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
  *(_DWORD *)(v18 + 392) = 0;
  *(void *)(v18 + 40ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *(void *)(v18 + 40re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
  *(_DWORD *)(v18 + 416) = 1;
  *(void *)(v18 + 424) = 0;
  *(void *)(v18 + 432) = 0;
  *(_DWORD *)(v18 + 44re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
  *(void *)(v18 + 44ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *(void *)(v18 + 456) = 0;
  *(void *)(v18 + 464) = 0;
  *(_DWORD *)(v18 + 472) = 1;
  *(void *)(v18 + 48ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *(void *)(v18 + 48re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
  *(_DWORD *)(v18 + 504) = 0;
  *(void *)(v18 + 496) = 0;
  *(void *)&long long v220 = 0;
  long long v218 = 0u;
  long long v219 = 0u;
  *((void *)&v219 + 1) = re::globalAllocators((re *)v18)[2];
  *(void *)&long long v220 = 0;
  re::FramePersistentPtr<re::ecs2::MeshComponent::MaterialData,re::FrameManager>::reset((id *)v12, &location, (void *)v18, (uint64_t)&v218);
  re::FunctionBase<24ul,void ()(void *)>::destroyCallable((uint64_t)&v218);
  objc_destroyWeak(&location);
  id location = 0;
  uint64_t v19 = *((void *)a2 + 80);
  uint64_t v176 = (re::ecs2::VisualProxyCaptureHelper *)a4;
  if (v19 && (*(unsigned char *)(a4 + 288) & 0x40) != 0)
  {
    uint64_t v29 = (re::MaterialAsset *)(*(uint64_t (**)(uint64_t))(*(void *)v19 + 80))(v19);
    re::ecs2::MeshComponentHelper::overrideMaterials((uint64_t)a3, v11, v29, (uint64_t *)(*((void *)this + 29) + 96), (uint64_t *)(*((void *)this + 29) + 144), (void *)(*((void *)this + 29) + 344));
    goto LABEL_127;
  }
  uint64_t v20 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a4 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SceneUnderstandingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (!v20) {
    goto LABEL_23;
  }
  if (*(unsigned char *)(v20 + 42) == 2)
  {
    uint64_t v21 = *((void *)this + 9);
    if (v21)
    {
      uint64_t v22 = *((void *)a2 + 21);
      uint64_t v23 = (uint64_t *)(*((void *)this + 11) + 8);
      uint64_t v24 = 24 * v21 - 24;
      do
      {
        uint64_t v26 = *v23;
        v23 += 3;
        uint64_t v25 = v26;
        BOOL v27 = v26 != v22 || v24 == 0;
        v24 -= 24;
      }
      while (!v27);
      if (v25 != v22) {
        goto LABEL_23;
      }
    }
    re::DynamicArray<re::AssetHandle>::clear((re::ecs2::MeshComponent *)((char *)this + 56));
  }
  if (!*((void *)this + 9))
  {
    uint64_t v28 = (const re::ecs2::MeshSystem *)((char *)a2 + 184);
    goto LABEL_24;
  }
LABEL_23:
  uint64_t v28 = (const re::ecs2::MeshSystem *)((char *)a2 + 160);
LABEL_24:
  re::AssetHandle::AssetHandle((re::AssetHandle *)v201, v28);
  uint64_t v30 = (_anonymous_namespace_ *)re::ecs2::MeshComponentHelper::repairedMaterialHandles((uint64_t)a3, v11, (re::AssetHandle *)v201, *((re::AssetHandle **)this + 11), *((void *)this + 9), (uint64_t)&v207);
  uint64_t v173 = a5;
  if (!*((void *)this + 15))
  {
    uint64_t v33 = *((void *)this + 29);
    if (*(void *)(v33 + 176)) {
      re::FixedArray<CoreIKTransform>::deinit((uint64_t *)(v33 + 168));
    }
    goto LABEL_68;
  }
  a4 = *(void *)&v210[2];
  uint64_t v32 = (void *)*((void *)this + 29);
  if (v32[22] == *(void *)&v210[2])
  {
    if (!*(void *)&v210[2]) {
      goto LABEL_68;
    }
    goto LABEL_36;
  }
  v32[22] = a4;
  if (a4)
  {
    if (a4 >> 60)
    {
LABEL_243:
      re::internal::assertLog((re::internal *)6, (uint64_t)v31, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 16, a4);
      _os_crash();
      __break(1u);
LABEL_244:
      re::internal::assertLog((re::internal *)4, (uint64_t)v31, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
      _os_crash();
      __break(1u);
    }
    size_t v12 = 16 * a4;
    v32[23] = v34;
    if (!v34) {
      goto LABEL_244;
    }
    int v35 = v34;
    if (a4 != 1)
    {
      v12 -= 16;
      bzero(v34, v12);
      int v35 = (void *)((char *)v35 + v12);
    }
    void *v35 = 0;
    v35[1] = 0;
LABEL_36:
    size_t v18 = 0;
    unint64_t v36 = 1;
    uint64_t v172 = v11;
    while (*((void *)this + 15) > v18 && !re::ecs2::EntityHandle::isNull((id *)(*((void *)this + 17) + 24 * v18)))
    {
      unint64_t v5 = *((void *)this + 15);
      if (v5 <= v18) {
        goto LABEL_223;
      }
      uint64_t v37 = (unsigned __int8 *)(*(uint64_t (**)(void, void))(**((void **)a2 + 88) + 56))(*((void *)a2 + 88), *(void *)(*((void *)this + 17) + 24 * v18 + 8));
      if (!v37) {
        break;
      }
      int v38 = *v37;
      if (v38 == 1)
      {
        size_t v12 = *((void *)v37 + 1);
        if (!v12) {
          break;
        }
        uint64_t v39 = (void *)(v12 + 8);
        id v48 = (id)(v12 + 8);
        unint64_t v5 = *(void *)&v210[2];
        if (*(void *)&v210[2] <= v18) {
          goto LABEL_236;
        }
        re::AssetHandle::operator=(*(void *)&v212[2] + 24 * v18, (uint64_t *)(v12 + 80));
        re::UnlitMaterial::parameterTable((re::UnlitMaterial *)v12, v177, &v198);
        uint64_t v49 = *((void *)this + 29);
        unint64_t v5 = *(void *)(v49 + 176);
        if (v5 <= v18) {
          goto LABEL_238;
        }
        uint64_t v42 = (uint64_t)v198;
        BOOL v50 = (char *)v198 + 96;
        uint64_t v51 = (void *)(*(void *)(v49 + 184) + 16 * v18);
        *uint64_t v51 = (char *)v198 + 32;
        v51[1] = v50;
        uint64_t v52 = *((void *)this + 29);
        unint64_t v53 = *(void *)(v52 + 496);
        unint64_t v5 = *(void *)(v52 + 464);
        if (v53 + 1 > 8 * v5)
        {
          re::BucketArray<re::TimelineGroupBuilder *,8ul>::setBucketsCapacity((void *)(v52 + 456), (v53 + 8) >> 3);
          unint64_t v5 = *(void *)(v52 + 464);
        }
        size_t v12 = v53 >> 3;
        if (v5 <= v53 >> 3) {
          goto LABEL_240;
        }
        if (*(unsigned char *)(v52 + 472)) {
          uint64_t v54 = v52 + 480;
        }
        else {
          uint64_t v54 = *(void *)(v52 + 488);
        }
        uint64_t v58 = *(void *)(v54 + 8 * v12);
        uint64_t v59 = v53 & 7;
        ++*(void *)(v52 + 496);
        ++*(_DWORD *)(v52 + 504);
      }
      else
      {
        if (v38 != 2) {
          break;
        }
        size_t v12 = *((void *)v37 + 1);
        if (!v12) {
          break;
        }
        uint64_t v39 = (void *)(v12 + 8);
        id v40 = (id)(v12 + 8);
        unint64_t v5 = *(void *)&v210[2];
        if (*(void *)&v210[2] <= v18) {
          goto LABEL_235;
        }
        re::AssetHandle::operator=(*(void *)&v212[2] + 24 * v18, (uint64_t *)(v12 + 528));
        re::PbrMaterial::parameterTable((re::PbrMaterial *)v12, v177, &v198);
        uint64_t v41 = *((void *)this + 29);
        unint64_t v5 = *(void *)(v41 + 176);
        if (v5 <= v18) {
          goto LABEL_237;
        }
        uint64_t v42 = (uint64_t)v198;
        id v43 = (char *)v198 + 208;
        uint64_t v44 = (void *)(*(void *)(v41 + 184) + 16 * v18);
        void *v44 = (char *)v198 + 32;
        v44[1] = v43;
        uint64_t v45 = *((void *)this + 29);
        unint64_t v46 = *(void *)(v45 + 440);
        unint64_t v5 = *(void *)(v45 + 408);
        if (v46 + 1 > 8 * v5)
        {
          re::BucketArray<re::TimelineGroupBuilder *,8ul>::setBucketsCapacity((void *)(v45 + 400), (v46 + 8) >> 3);
          unint64_t v5 = *(void *)(v45 + 408);
        }
        size_t v12 = v46 >> 3;
        if (v5 <= v46 >> 3) {
          goto LABEL_239;
        }
        if (*(unsigned char *)(v45 + 416)) {
          uint64_t v47 = v45 + 424;
        }
        else {
          uint64_t v47 = *(void *)(v45 + 432);
        }
        uint64_t v58 = *(void *)(v47 + 8 * v12);
        uint64_t v59 = v46 & 7;
        ++*(void *)(v45 + 440);
        ++*(_DWORD *)(v45 + 448);
      }
      *(void *)(v58 + 8 * v59) = v42;

      uint64_t v11 = v172;
LABEL_61:
      size_t v18 = v36;
      BOOL v57 = a4 > v36;
      unint64_t v36 = (v36 + 1);
      if (!v57) {
        goto LABEL_68;
      }
    }
    uint64_t v55 = *((void *)this + 29);
    unint64_t v5 = *(void *)(v55 + 176);
    if (v5 <= v18) {
      goto LABEL_222;
    }
    uint64_t v56 = (void *)(*(void *)(v55 + 184) + 16 * v18);
    *uint64_t v56 = 0;
    v56[1] = 0;
    goto LABEL_61;
  }
LABEL_68:
  uint64_t v60 = *((void *)v176 + 24);
  if (v60)
  {
    re::ecs2::MeshComponentHelper::fixLegacyParametersColorGamut(v177, (uint64_t)&v207, *((unint64_t **)v176 + 24));
    *(void *)&long long v218 = *(void *)&v212[2];
    *((void *)&v218 + 1) = *(void *)&v210[2];
    uint64_t v61 = *(void *)(v60 + 88);
    *(void *)uint64_t v204 = *(void *)(v60 + 104);
    *(void *)&v204[8] = v61;
    re::MaterialAssetHelper::extractMaterialDataFromMaterialParameterBlocks((_anonymous_namespace_ *)&v218, v204, (uint64_t *)(*((void *)this + 29) + 96), (uint64_t *)(*((void *)this + 29) + 120), *((void *)this + 29) + 344);
  }
  *(void *)&long long v218 = *(void *)&v212[2];
  *((void *)&v218 + 1) = *(void *)&v210[2];
  char isUnderHighFidelityVisualProxyTree = re::ecs2::VisualProxyCaptureHelper::isUnderHighFidelityVisualProxyTree((BOOL)v176, v31);
  re::MaterialAssetHelper::extractMaterialDataFromMaterialAssetHandles((_anonymous_namespace_ *)&v218, isUnderHighFidelityVisualProxyTree, (uint64_t *)(*((void *)this + 29) + 96), (uint64_t *)(*((void *)this + 29) + 144), *((void *)this + 29) + 344);
  unint64_t v36 = *((void *)this + 20);
  uint64_t v63 = (void *)*((void *)this + 29);
  v63[41] = v36;
  if (v36)
  {
    if (v36 >= 0xAAAAAAAAAAAAAABLL)
    {
LABEL_232:
      re::internal::assertLog((re::internal *)6, v66, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 24, v36);
      _os_crash();
      __break(1u);
      goto LABEL_233;
    }
    size_t v18 = 24 * v36;
    v63[42] = v65;
    if (!v65)
    {
LABEL_233:
      re::internal::assertLog((re::internal *)4, v67, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
      _os_crash();
      __break(1u);
      goto LABEL_234;
    }
    size_t v12 = (size_t)v65;
    if (v36 != 1)
    {
      v18 -= 24;
      bzero(v65, v18);
      v12 += v18;
    }
    *(void *)size_t v12 = 0;
    *(void *)(v12 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
    *(void *)(v12 + 16) = 0;
  }
  long long v68 = (void *)*((void *)this + 29);
  v68[25] = v36;
  if (v36)
  {
    size_t v18 = 16 * v36;
    v68[26] = v71;
    if (!v71)
    {
LABEL_234:
      re::internal::assertLog((re::internal *)4, v72, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
      _os_crash();
      __break(1u);
LABEL_235:
      *(void *)uint64_t v213 = 0;
      long long v221 = 0u;
      long long v222 = 0u;
      long long v219 = 0u;
      long long v220 = 0u;
      long long v218 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)uint64_t v204 = 136315906;
      *(void *)&v204[4] = "operator[]";
      *(_WORD *)&v204[12] = 1024;
      *(_DWORD *)&v204[14] = 789;
      *(_WORD *)&v204[18] = 2048;
      *(void *)&v204[20] = v18;
      __int16 v205 = 2048;
      *(void *)uint64_t v206 = v5;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_236:
      *(void *)uint64_t v213 = 0;
      long long v221 = 0u;
      long long v222 = 0u;
      long long v219 = 0u;
      long long v220 = 0u;
      long long v218 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)uint64_t v204 = 136315906;
      *(void *)&v204[4] = "operator[]";
      *(_WORD *)&v204[12] = 1024;
      *(_DWORD *)&v204[14] = 789;
      *(_WORD *)&v204[18] = 2048;
      *(void *)&v204[20] = v18;
      __int16 v205 = 2048;
      *(void *)uint64_t v206 = v5;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_237:
      *(void *)uint64_t v213 = 0;
      long long v221 = 0u;
      long long v222 = 0u;
      long long v219 = 0u;
      long long v220 = 0u;
      long long v218 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)uint64_t v204 = 136315906;
      *(void *)&v204[4] = "operator[]";
      *(_WORD *)&v204[12] = 1024;
      *(_DWORD *)&v204[14] = 468;
      *(_WORD *)&v204[18] = 2048;
      *(void *)&v204[20] = v18;
      __int16 v205 = 2048;
      *(void *)uint64_t v206 = v5;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_238:
      *(void *)uint64_t v213 = 0;
      long long v221 = 0u;
      long long v222 = 0u;
      long long v219 = 0u;
      long long v220 = 0u;
      long long v218 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)uint64_t v204 = 136315906;
      *(void *)&v204[4] = "operator[]";
      *(_WORD *)&v204[12] = 1024;
      *(_DWORD *)&v204[14] = 468;
      *(_WORD *)&v204[18] = 2048;
      *(void *)&v204[20] = v18;
      __int16 v205 = 2048;
      *(void *)uint64_t v206 = v5;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_239:
      *(void *)uint64_t v213 = 0;
      long long v221 = 0u;
      long long v222 = 0u;
      long long v219 = 0u;
      long long v220 = 0u;
      long long v218 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)uint64_t v204 = 136315906;
      *(void *)&v204[4] = "operator[]";
      *(_WORD *)&v204[12] = 1024;
      *(_DWORD *)&v204[14] = 858;
      *(_WORD *)&v204[18] = 2048;
      *(void *)&v204[20] = v12;
      __int16 v205 = 2048;
      *(void *)uint64_t v206 = v5;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_240:
      *(void *)uint64_t v213 = 0;
      long long v221 = 0u;
      long long v222 = 0u;
      long long v219 = 0u;
      long long v220 = 0u;
      long long v218 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)uint64_t v204 = 136315906;
      *(void *)&v204[4] = "operator[]";
      *(_WORD *)&v204[12] = 1024;
      *(_DWORD *)&v204[14] = 858;
      *(_WORD *)&v204[18] = 2048;
      *(void *)&v204[20] = v12;
      __int16 v205 = 2048;
      *(void *)uint64_t v206 = v5;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_241;
    }
    size_t v12 = (size_t)v71;
    if (v36 != 1)
    {
      size_t v73 = v18 - 16;
      bzero(v71, v73);
      v12 += v73;
    }
    uint64_t v74 = 0;
    a4 = 0;
    size_t v18 = 0;
    *(void *)size_t v12 = 0;
    *(void *)(v12 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
    uint64_t v75 = v11 + 72;
    do
    {
      size_t v76 = *((void *)this + 20);
      if (v76 <= v18) {
        goto LABEL_216;
      }
      uint64_t v77 = re::DataArray<re::MeshInstance>::get(v75, *(void *)(*((void *)this + 19) + 8 * v18));
      *(void *)uint64_t v213 = *(void *)&v212[2];
      *(void *)&v213[8] = *(void *)&v210[2];
      uint64_t v78 = *(void *)(v77 + 128);
      char v198 = *(_anonymous_namespace_ **)(v77 + 136);
      uint64_t v199 = v78;
      uint64_t v79 = *((void *)this + 29);
      unint64_t v5 = *(void *)(v79 + 328);
      if (v5 <= v18) {
        goto LABEL_217;
      }
      re::MaterialAssetHelper::extractMaterialDataFromMeshInstanceParameterBlocks((_anonymous_namespace_ *)v213, &v198, (uint64_t *)(*(void *)(v79 + 336) + a4), v79 + 344);
      long long v80 = (void *)*((void *)this + 29);
      unint64_t v5 = v80[41];
      if (v5 <= v18) {
        goto LABEL_218;
      }
      unint64_t v5 = v80[25];
      if (v5 <= v18) {
        goto LABEL_219;
      }
      uint64_t v81 = *(void *)(v80[42] + a4 + 8);
      uint64_t v82 = *(void *)(v80[42] + a4 + 16);
      int v83 = (void *)(v80[26] + v74);
      *int v83 = v82;
      v83[1] = v81;
      ++v18;
      a4 += 24;
      v74 += 16;
    }
    while (v36 != v18);
  }
  a4 = (unint64_t)v176;
  uint64_t v84 = *((void *)v176 + 31);
  if (v84)
  {
    long long v85 = (void *)*((void *)this + 29);
    unint64_t v5 = *(void *)(v84 + 48);
    v85[28] = v5;
    if (v5)
    {
      if (v5 >= 0xE38E38E38E38E39)
      {
LABEL_241:
        re::internal::assertLog((re::internal *)6, v86, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 18, v5);
        _os_crash();
        __break(1u);
        goto LABEL_242;
      }
      v85[29] = v87;
      if (!v87)
      {
LABEL_242:
        re::internal::assertLog((re::internal *)4, v88, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
        _os_crash();
        __break(1u);
        goto LABEL_243;
      }
      unint64_t v89 = v5 - 1;
      if (v5 != 1)
      {
        do
        {
          *unint64_t v87 = 0;
          v87[2] = 0;
          v87[4] = 0;
          v87[6] = 0;
          v87[8] = 0;
          v87[10] = 0;
          v87[12] = 0;
          v87[14] = 0;
          v87[16] = 0;
          v87 += 18;
          --v89;
        }
        while (v89);
      }
      *unint64_t v87 = 0;
      v87[2] = 0;
      v87[4] = 0;
      v87[6] = 0;
      v87[8] = 0;
      v87[10] = 0;
      v87[12] = 0;
      v87[14] = 0;
      v87[16] = 0;
    }
    memcpy(*(void **)(*((void *)this + 29) + 232), *(const void **)(v84 + 64), 18 * *(void *)(v84 + 48));
  }
  uint64_t v90 = *((void *)v176 + 32);
  if (v90)
  {
    re::ecs2::DirectMaterialParametersArrayComponent::resolveSerializedParameters(*((re::ecs2::DirectMaterialParametersArrayComponent **)v176 + 32), v173, (uint64_t)v204, v70);
    uint64_t v91 = (uint64_t *)*((void *)this + 29);
    unint64_t v92 = *(void *)&v204[16];
    unint64_t v36 = *((void *)this + 29) + 24;
    unint64_t v94 = *(void *)&v204[16];
    uint64_t v96 = *(void *)&v204[16];
    if (*(void *)&v204[16])
    {
      size_t v18 = 0;
      a4 = 0;
      size_t v12 = 0;
      do
      {
        uint64_t v97 = *((void *)this + 29);
        unint64_t v5 = *(void *)(v97 + 104);
        if (v5 <= v12) {
          goto LABEL_220;
        }
        unint64_t v5 = *((void *)this + 9);
        if (v5 <= v12) {
          goto LABEL_221;
        }
        uint64_t v98 = *(void *)&v206[2];
        unint64_t v36 = *(void *)(*(void *)(v97 + 112) + 8 * v12);
        unint64_t v99 = (_anonymous_namespace_ *)re::AssetHandle::loadedAsset<re::MaterialAsset>((re::MaterialAsset *)(*((void *)this + 11) + a4));
        if (v99 && *((unsigned char *)v99 + 1730) == 6)
        {
          if (*(void *)(v36 + 176) && *(void *)(v98 + v18 + 16) == 1)
          {
            char v198 = 0;
            uint64_t v199 = 0;
            uint64_t v200 = 0;
            unint64_t v100 = *(void *)(v98 + v18 + 16);
            unint64_t v5 = *(void *)(v90 + 48);
            if (v5 <= v12) {
              goto LABEL_226;
            }
            uint64_t v101 = *((void *)this + 29);
            unint64_t v5 = *(void *)(v101 + 104);
            if (v5 <= v12) {
              goto LABEL_227;
            }
            re::ecs2::fetchBuffers((uint64_t)v177, v98 + v18, *(void *)(v90 + 64) + v18, *(void *)(*(void *)(v101 + 112) + 8 * v12) + 168, v101 + 264, (uint64_t)&v198, (_anonymous_namespace_ *)(v101 + 48), (unsigned char *)(v101 + 88));
            uint64_t v102 = *((void *)this + 29);
            unint64_t v5 = *(void *)(v102 + 8);
            if (v5 <= v12) {
              goto LABEL_229;
            }
            re::FixedArray<float>::operator=((uint64_t *)(*(void *)(v102 + 16) + a4), (uint64_t *)&v198);
            unint64_t v99 = v198;
            if (v198 && v199) {
              unint64_t v99 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v198 + 40))();
            }
          }
          if (*(void *)(v36 + 200))
          {
            size_t v103 = v98 + v18;
            if (*(void *)(v103 + 56) == 1)
            {
              char v198 = 0;
              uint64_t v199 = 0;
              uint64_t v200 = 0;
              unint64_t v104 = *(void *)(v103 + 56);
              unint64_t v5 = *(void *)(v90 + 48);
              if (v5 <= v12) {
                goto LABEL_228;
              }
              uint64_t v105 = *((void *)this + 29);
              unint64_t v5 = *(void *)(v105 + 104);
              if (v5 <= v12) {
                goto LABEL_230;
              }
              re::ecs2::fetchBuffers((uint64_t)v177, v103 + 40, *(void *)(v90 + 64) + v18 + 40, *(void *)(*(void *)(v105 + 112) + 8 * v12) + 192, v105 + 264, (uint64_t)&v198, (_anonymous_namespace_ *)(v105 + 48), (unsigned char *)(v105 + 88));
              uint64_t v106 = *((void *)this + 29);
              unint64_t v5 = *(void *)(v106 + 32);
              if (v5 <= v12) {
                goto LABEL_231;
              }
              re::FixedArray<float>::operator=((uint64_t *)(*(void *)(v106 + 40) + a4), (uint64_t *)&v198);
              if (v198 && v199) {
                (*(void (**)(void))(*(void *)v198 + 40))();
              }
            }
          }
        }
        ++v12;
        uint64_t v96 = *(void *)&v204[16];
        a4 += 24;
        v18 += 80;
      }
      while (v12 < *(void *)&v204[16]);
      a4 = (unint64_t)v176;
    }
    uint64_t v107 = *(void *)v204;
    if (*(void *)v204)
    {
      uint64_t v108 = *(void *)&v206[2];
      if (*(void *)&v206[2])
      {
        if (v96)
        {
          uint64_t v109 = 80 * v96;
          do
          {
            re::DynamicArray<re::ObjCObject>::deinit(v108 + 40);
            re::DynamicArray<re::ObjCObject>::deinit(v108);
            v108 += 80;
            v109 -= 80;
          }
          while (v109);
          uint64_t v107 = *(void *)v204;
          uint64_t v108 = *(void *)&v206[2];
        }
        (*(void (**)(uint64_t, uint64_t))(*(void *)v107 + 40))(v107, v108);
      }
    }
  }
  re::DynamicArray<re::AssetHandle>::deinit((uint64_t)&v207);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v201);
LABEL_127:
  if (!*((unsigned char *)a2 + 256))
  {
    uint64_t v124 = *((void *)a2 + 21);
    if (!v124) {
      return 0;
    }
    unsigned int v125 = atomic_load((unsigned int *)(v124 + 704));
    if (v125 != 2) {
      return 0;
    }
    uint64_t v126 = re::AssetHandle::loadedAsset<re::MaterialAsset>((const re::ecs2::MeshSystem *)((char *)a2 + 160));
    uint64_t v127 = *((void *)this + 29);
    uint64_t v128 = *(void *)(v127 + 104);
    if (!v128) {
      return 0;
    }
    __n128 v129 = *(void **)(v127 + 112);
    uint64_t v130 = 8 * v128;
    while (*v129 == *(void *)(v126 + 1664))
    {
      ++v129;
      v130 -= 8;
      if (!v130) {
        return 0;
      }
    }
  }
  uint64_t v174 = (re::DirectResourceAssetTracker *)(a4 + 32);
  uint64_t v110 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a4 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::DebugMeshComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v110) {
    goto LABEL_132;
  }
  unint64_t v132 = v176;
  do
  {
    unint64_t v133 = v132;
    unint64_t v132 = (re::ecs2::VisualProxyCaptureHelper *)*((void *)v132 + 3);
  }
  while (v132);
  unint64_t v134 = re::ecs2::ComponentHelper::privateSceneDataEntity(*((re::ecs2::ComponentHelper **)v133 + 2), 0);
  if (v134)
  {
    uint64_t v110 = re::ecs2::EntityComponentCollection::get((re::ecs2::Entity *)((char *)v134 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::DebugMeshComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    if (v110)
    {
LABEL_132:
      unint64_t v111 = *(void *)(v110 + 40);
      if ((v111 & 1) != 0 ? v111 >> 1 : v111 >> 1)
      {
        uint64_t DebugTechnique = re::Hash<re::DynamicString>::operator()((uint64_t)&v218, v110 + 32);
        uint64_t v114 = *((void *)this + 29);
        if (!*(unsigned char *)(v114 + 240)) {
          *(unsigned char *)(v114 + 24ArcSharedObject::ArcSharedObject(this, 0) = 1;
        }
        *(void *)(v114 + 24re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = DebugTechnique;
        uint64_t v115 = *((void *)this + 29);
        uint64_t v116 = *(void *)(v115 + 104);
        if (v116)
        {
          uint64_t v117 = *(const re::MaterialInstance ***)(v115 + 112);
          unint64_t v36 = (unint64_t)&v117[v116];
          a4 = 72;
          while (1)
          {
            uint64_t v118 = *v117;
            if (!*((void *)*v117 + 12))
            {
              unint64_t v5 = *((void *)v118 + 10);
              *((void *)v118 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 13) = v5;
              if (v5)
              {
                if (v5 >= 0x666666666666667) {
                  goto LABEL_224;
                }
                *((void *)v118 + 14) = DebugTechnique;
                if (!DebugTechnique) {
                  goto LABEL_225;
                }
                unint64_t v121 = v5 - 1;
                if (v5 != 1)
                {
                  do
                  {
                    *(void *)uint64_t DebugTechnique = 0;
                    *(void *)(DebugTechnique + 32) = 0;
                    DebugTechnique += 40;
                    --v121;
                  }
                  while (v121);
                }
                *(void *)uint64_t DebugTechnique = 0;
                *(void *)(DebugTechnique + 32) = 0;
              }
            }
            if (*((void *)v118 + 10)) {
              break;
            }
LABEL_154:
            if (++v117 == (const re::MaterialInstance **)v36) {
              goto LABEL_167;
            }
          }
          size_t v18 = 0;
          size_t v12 = 0;
          while (1)
          {
            unint64_t v5 = *((void *)v118 + 13);
            if (v5 <= v12) {
              break;
            }
            if (!*(void *)(*((void *)v118 + 14) + v18))
            {
              uint64_t v122 = **(void **)(*((void *)v118 + 11) + v18);
              if (*(unsigned char *)(v122 + 2632))
              {
                uint64_t v123 = *((void *)v118 + 2);
                *(void *)&long long v218 = *(void *)(v122 + 2640);
                uint64_t DebugTechnique = re::HashBrown<unsigned long,re::HashBrown<unsigned long,unsigned short,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::find((void *)(v123 + 184), (uint64_t *)&v218);
                if (DebugTechnique != -1)
                {
                  uint64_t DebugTechnique = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(*(void *)(v123 + 192) + 72 * DebugTechnique + 8), (void *)(*((void *)this + 29) + 248));
                  if (DebugTechnique != -1) {
                    uint64_t DebugTechnique = (uint64_t)re::MaterialManager::generateDebugTechnique(*((re::MaterialManager **)v177 + 3), v118, v12);
                  }
                }
              }
            }
            ++v12;
            v18 += 40;
            if (*((void *)v118 + 10) <= v12) {
              goto LABEL_154;
            }
          }
          *(void *)uint64_t v204 = 0;
          long long v221 = 0u;
          long long v222 = 0u;
          long long v219 = 0u;
          long long v220 = 0u;
          long long v218 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          int v207 = 136315906;
          uint64_t v208 = "operator[]";
          __int16 v209 = 1024;
          *(_DWORD *)uint64_t v210 = 468;
          *(_WORD *)&v210[4] = 2048;
          *(void *)&v210[6] = v12;
          __int16 v211 = 2048;
          *(void *)long long v212 = v5;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_216:
          re::internal::assertLog((re::internal *)6, v72, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v18, v76);
          _os_crash();
          __break(1u);
LABEL_217:
          uint64_t v203 = 0;
          long long v221 = 0u;
          long long v222 = 0u;
          long long v219 = 0u;
          long long v220 = 0u;
          long long v218 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)uint64_t v204 = 136315906;
          *(void *)&v204[4] = "operator[]";
          *(_WORD *)&v204[12] = 1024;
          *(_DWORD *)&v204[14] = 468;
          *(_WORD *)&v204[18] = 2048;
          *(void *)&v204[20] = v18;
          __int16 v205 = 2048;
          *(void *)uint64_t v206 = v5;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_218:
          *(void *)uint64_t v213 = 0;
          long long v221 = 0u;
          long long v222 = 0u;
          long long v219 = 0u;
          long long v220 = 0u;
          long long v218 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)uint64_t v204 = 136315906;
          *(void *)&v204[4] = "operator[]";
          *(_WORD *)&v204[12] = 1024;
          *(_DWORD *)&v204[14] = 468;
          *(_WORD *)&v204[18] = 2048;
          *(void *)&v204[20] = v18;
          __int16 v205 = 2048;
          *(void *)uint64_t v206 = v5;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_219:
          *(void *)uint64_t v213 = 0;
          long long v221 = 0u;
          long long v222 = 0u;
          long long v219 = 0u;
          long long v220 = 0u;
          long long v218 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)uint64_t v204 = 136315906;
          *(void *)&v204[4] = "operator[]";
          *(_WORD *)&v204[12] = 1024;
          *(_DWORD *)&v204[14] = 468;
          *(_WORD *)&v204[18] = 2048;
          *(void *)&v204[20] = v18;
          __int16 v205 = 2048;
          *(void *)uint64_t v206 = v5;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_220:
          char v198 = 0;
          long long v221 = 0u;
          long long v222 = 0u;
          long long v219 = 0u;
          long long v220 = 0u;
          long long v218 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)uint64_t v213 = 136315906;
          *(void *)&v213[4] = "operator[]";
          *(_WORD *)&v213[12] = 1024;
          *(_DWORD *)&v213[14] = 468;
          __int16 v214 = 2048;
          size_t v215 = v12;
          __int16 v216 = 2048;
          unint64_t v217 = v5;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_221:
          char v198 = 0;
          long long v221 = 0u;
          long long v222 = 0u;
          long long v219 = 0u;
          long long v220 = 0u;
          long long v218 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)uint64_t v213 = 136315906;
          *(void *)&v213[4] = "operator[]";
          *(_WORD *)&v213[12] = 1024;
          *(_DWORD *)&v213[14] = 789;
          __int16 v214 = 2048;
          size_t v215 = v12;
          __int16 v216 = 2048;
          unint64_t v217 = v5;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_222:
          *(void *)uint64_t v213 = 0;
          long long v221 = 0u;
          long long v222 = 0u;
          long long v219 = 0u;
          long long v220 = 0u;
          long long v218 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)uint64_t v204 = 136315906;
          *(void *)&v204[4] = "operator[]";
          *(_WORD *)&v204[12] = 1024;
          *(_DWORD *)&v204[14] = 468;
          *(_WORD *)&v204[18] = 2048;
          *(void *)&v204[20] = v18;
          __int16 v205 = 2048;
          *(void *)uint64_t v206 = v5;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_223:
          *(void *)uint64_t v213 = 0;
          long long v221 = 0u;
          long long v222 = 0u;
          long long v219 = 0u;
          long long v220 = 0u;
          long long v218 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)uint64_t v204 = 136315906;
          *(void *)&v204[4] = "operator[]";
          *(_WORD *)&v204[12] = 1024;
          *(_DWORD *)&v204[14] = 789;
          *(_WORD *)&v204[18] = 2048;
          *(void *)&v204[20] = v18;
          __int16 v205 = 2048;
          *(void *)uint64_t v206 = v5;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_224:
          re::internal::assertLog((re::internal *)6, v119, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 40, v5);
          _os_crash();
          __break(1u);
LABEL_225:
          re::internal::assertLog((re::internal *)4, v120, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
          _os_crash();
          __break(1u);
LABEL_226:
          uint64_t v203 = 0;
          long long v221 = 0u;
          long long v222 = 0u;
          long long v219 = 0u;
          long long v220 = 0u;
          long long v218 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)uint64_t v213 = 136315906;
          *(void *)&v213[4] = "operator[]";
          *(_WORD *)&v213[12] = 1024;
          *(_DWORD *)&v213[14] = 797;
          __int16 v214 = 2048;
          size_t v215 = v12;
          __int16 v216 = 2048;
          unint64_t v217 = v5;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_227:
          uint64_t v203 = 0;
          long long v221 = 0u;
          long long v222 = 0u;
          long long v219 = 0u;
          long long v220 = 0u;
          long long v218 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)uint64_t v213 = 136315906;
          *(void *)&v213[4] = "operator[]";
          *(_WORD *)&v213[12] = 1024;
          *(_DWORD *)&v213[14] = 468;
          __int16 v214 = 2048;
          size_t v215 = v12;
          __int16 v216 = 2048;
          unint64_t v217 = v5;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_228:
          uint64_t v203 = 0;
          long long v221 = 0u;
          long long v222 = 0u;
          long long v219 = 0u;
          long long v220 = 0u;
          long long v218 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)uint64_t v213 = 136315906;
          *(void *)&v213[4] = "operator[]";
          *(_WORD *)&v213[12] = 1024;
          *(_DWORD *)&v213[14] = 797;
          __int16 v214 = 2048;
          size_t v215 = v12;
          __int16 v216 = 2048;
          unint64_t v217 = v5;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_229:
          uint64_t v203 = 0;
          long long v221 = 0u;
          long long v222 = 0u;
          long long v219 = 0u;
          long long v220 = 0u;
          long long v218 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)uint64_t v213 = 136315906;
          *(void *)&v213[4] = "operator[]";
          *(_WORD *)&v213[12] = 1024;
          *(_DWORD *)&v213[14] = 468;
          __int16 v214 = 2048;
          size_t v215 = v12;
          __int16 v216 = 2048;
          unint64_t v217 = v5;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_230:
          uint64_t v203 = 0;
          long long v221 = 0u;
          long long v222 = 0u;
          long long v219 = 0u;
          long long v220 = 0u;
          long long v218 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)uint64_t v213 = 136315906;
          *(void *)&v213[4] = "operator[]";
          *(_WORD *)&v213[12] = 1024;
          *(_DWORD *)&v213[14] = 468;
          __int16 v214 = 2048;
          size_t v215 = v12;
          __int16 v216 = 2048;
          unint64_t v217 = v5;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_231:
          uint64_t v203 = 0;
          long long v221 = 0u;
          long long v222 = 0u;
          long long v219 = 0u;
          long long v220 = 0u;
          long long v218 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)uint64_t v213 = 136315906;
          *(void *)&v213[4] = "operator[]";
          *(_WORD *)&v213[12] = 1024;
          *(_DWORD *)&v213[14] = 468;
          __int16 v214 = 2048;
          size_t v215 = v12;
          __int16 v216 = 2048;
          unint64_t v217 = v5;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_232;
        }
      }
    }
  }
LABEL_167:
  uint64_t v135 = *((void *)this + 29);
  uint64_t v136 = *(void *)(v135 + 104);
  if (v136)
  {
    uint64_t v137 = 8 * v136;
    int v138 = *(uint64_t **)(v135 + 112);
    do
    {
      uint64_t v139 = *v138;
      uint64_t v140 = *((void *)a2 + 26);
      if (re::MaterialParameterTable::kDefaultNameHash(void)::once != -1) {
        dispatch_once(&re::MaterialParameterTable::kDefaultNameHash(void)::once, &__block_literal_global_29);
      }
      float32x4_t v141 = (re::MaterialParameterTable *)(v139 + 224);
      if (re::MaterialParameterTable::tryGetPassTechniqueMapping(v141, v140, re::MaterialParameterTable::kDefaultNameHash(void)::_kDefaultNameHash))
      {
        *(unsigned char *)(*((void *)this + 29) + 256) = 1;
      }
      uint64_t v142 = *((void *)a2 + 27);
      if (re::MaterialParameterTable::kDefaultNameHash(void)::once != -1) {
        dispatch_once(&re::MaterialParameterTable::kDefaultNameHash(void)::once, &__block_literal_global_29);
      }
      if (re::MaterialParameterTable::tryGetPassTechniqueMapping(v141, v142, re::MaterialParameterTable::kDefaultNameHash(void)::_kDefaultNameHash))
      {
        *(_WORD *)(*((void *)this + 29) + 256) = 257;
      }
      uint64_t v143 = *((void *)a2 + 28);
      if (re::MaterialParameterTable::kDefaultNameHash(void)::once != -1) {
        dispatch_once(&re::MaterialParameterTable::kDefaultNameHash(void)::once, &__block_literal_global_29);
      }
      if (re::MaterialParameterTable::tryGetPassTechniqueMapping(v141, v143, re::MaterialParameterTable::kDefaultNameHash(void)::_kDefaultNameHash))
      {
        goto LABEL_189;
      }
      uint64_t v144 = *((void *)a2 + 29);
      if (re::MaterialParameterTable::kDefaultNameHash(void)::once != -1) {
        dispatch_once(&re::MaterialParameterTable::kDefaultNameHash(void)::once, &__block_literal_global_29);
      }
      if (re::MaterialParameterTable::tryGetPassTechniqueMapping(v141, v144, re::MaterialParameterTable::kDefaultNameHash(void)::_kDefaultNameHash))
      {
        goto LABEL_189;
      }
      uint64_t v145 = *((void *)a2 + 30);
      if (re::MaterialParameterTable::kDefaultNameHash(void)::once != -1) {
        dispatch_once(&re::MaterialParameterTable::kDefaultNameHash(void)::once, &__block_literal_global_29);
      }
      if (re::MaterialParameterTable::tryGetPassTechniqueMapping(v141, v145, re::MaterialParameterTable::kDefaultNameHash(void)::_kDefaultNameHash))
      {
        goto LABEL_189;
      }
      uint64_t v146 = *((void *)a2 + 31);
      if (re::MaterialParameterTable::kDefaultNameHash(void)::once != -1) {
        dispatch_once(&re::MaterialParameterTable::kDefaultNameHash(void)::once, &__block_literal_global_29);
      }
      if (re::MaterialParameterTable::tryGetPassTechniqueMapping(v141, v146, re::MaterialParameterTable::kDefaultNameHash(void)::_kDefaultNameHash))
      {
LABEL_189:
        *(unsigned char *)(*((void *)this + 29) + 25re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 1;
      }
      ++v138;
      v137 -= 8;
    }
    while (v137);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF86298, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF86298))
  {
    qword_26AF86290 = re::hashString((re *)"Occlusion", v171);
    __cxa_guard_release(&qword_26AF86298);
  }
  uint64_t v147 = (re::MaterialAsset *)*((void *)this + 11);
  uint64_t v148 = *((void *)this + 9);
  if (v148)
  {
    uint64_t v149 = 24 * v148;
    while (1)
    {
      uint64_t v150 = re::AssetHandle::loadedAsset<re::MaterialAsset>(v147);
      if (v150)
      {
        uint64_t v151 = *(void *)(v150 + 1664);
        if (v151)
        {
          uint64_t v152 = *(void *)(v151 + 16);
          if (v152)
          {
            if (re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::containsKey(v152 + 16, &qword_26AF86290))
            {
              break;
            }
          }
        }
      }
      uint64_t v147 = (re::MaterialAsset *)((char *)v147 + 24);
      v149 -= 24;
      if (!v149)
      {
        LOBYTE(v14re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
        goto LABEL_200;
      }
    }
    LOBYTE(v14re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 1;
LABEL_200:
    uint64_t v153 = *((void *)this + 9);
    uint64_t v147 = (re::MaterialAsset *)*((void *)this + 11);
  }
  else
  {
    uint64_t v153 = 0;
  }
  *(unsigned char *)(*((void *)this + 29) + 259) = v148;
  int v154 = re::ecs2::containsShaderGraphMaterialWithLightSpillNode(v153, v147);
  *(unsigned char *)(*((void *)this + 29) + 2re::HashTable<re::ecs2::Entity const*,re::ecs2::BillboardData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::deinit((uint64_t *)this + 60) = v154;
  if (v175 != v154)
  {
    uint64_t v155 = *((unsigned __int16 *)v176 + 41);
    if (*((_WORD *)v176 + 41))
    {
      double v156 = (const __int16 *)((char *)re::ecs2::ComponentImpl<re::ecs2::ImageBasedReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
                             + 16);
      double v157 = (int16x8_t *)*((void *)v176 + 11);
      int16x8_t v158 = vld1q_dup_s16(v156);
      int v159 = 1;
      while (1)
      {
        uint16x8_t v160 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v158, *v157), (int8x16_t)xmmword_23436BBD0);
        v160.i16[0] = vmaxvq_u16(v160);
        if (v160.i32[0]) {
          break;
        }
        v159 -= 8;
        ++v157;
        if (!--v155) {
          goto LABEL_207;
        }
      }
      LODWORD(v155) = v160.u16[0] - v159 < *((unsigned __int16 *)v176 + 40);
      if (!v154) {
        goto LABEL_211;
      }
    }
    else
    {
LABEL_207:
      if (!v154)
      {
LABEL_211:
        if (v155) {
          re::ecs2::EntityComponentCollection::remove(v174, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ImageBasedReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
        }
        return 1;
      }
    }
    if ((v155 & 1) == 0)
    {
      double v161 = (_anonymous_namespace_ *)re::ecs2::EntityComponentCollection::add(v174, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ImageBasedReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
      *(void *)&v196.var0 = 0xFFFDBC97C8B59A5ELL;
      v196.var1 = "REVideoAttachmentChannelID1TextureSpill";
      v197[0] = 0;
      v197[1] = "";
      double v161 = (_anonymous_namespace_ *)((char *)v161 + 32);
      re::DynamicArray<re::ecs2::VideoMaterialAttachment>::add(v161, &v196);
      re::StringID::destroyString((re::StringID *)v197);
      re::StringID::destroyString((re::StringID *)&v196);
      *(void *)&v194.var0 = 0x76CA5FD80552008;
      v194.var1 = "REVideoAttachmentSpillSpecular";
      v195[0] = 0;
      v195[1] = "";
      re::DynamicArray<re::ecs2::VideoMaterialAttachment>::add(v161, &v194);
      re::StringID::destroyString((re::StringID *)v195);
      re::StringID::destroyString((re::StringID *)&v194);
      *(void *)&v192.var0 = 0x61C86E215C086A2ALL;
      v192.var1 = "REVideoAttachmentWorldToPlaneUVsTransformMatrix";
      v193[0] = 0;
      v193[1] = "";
      re::DynamicArray<re::ecs2::VideoMaterialAttachment>::add(v161, &v192);
      re::StringID::destroyString((re::StringID *)v193);
      re::StringID::destroyString((re::StringID *)&v192);
      *(void *)&v190.var0 = 0xA29F54C4473E75D8;
      v190.var1 = "REVideoAttachmentContentPlaneWidthWorldspace";
      v191[0] = 0;
      v191[1] = "";
      re::DynamicArray<re::ecs2::VideoMaterialAttachment>::add(v161, &v190);
      re::StringID::destroyString((re::StringID *)v191);
      re::StringID::destroyString((re::StringID *)&v190);
      *(void *)&v188.var0 = 0xEAE20DCE6A8B6752;
      v188.var1 = "REVideoAttachmentContentPlaneHeightWorldspace";
      v189[0] = 0;
      v189[1] = "";
      re::DynamicArray<re::ecs2::VideoMaterialAttachment>::add(v161, &v188);
      re::StringID::destroyString((re::StringID *)v189);
      re::StringID::destroyString((re::StringID *)&v188);
      *(void *)&v186.var0 = 0x85AE1CBDDAF0F1D6;
      v186.var1 = "REVideoAttachmentContentBrightnessScale";
      v187[0] = 0;
      v187[1] = "";
      re::DynamicArray<re::ecs2::VideoMaterialAttachment>::add(v161, &v186);
      re::StringID::destroyString((re::StringID *)v187);
      re::StringID::destroyString((re::StringID *)&v186);
      *(void *)&v184.var0 = 0x8E6804010C9F587CLL;
      v184.var1 = "REVideoAttachmentTransitionAlpha";
      v185[0] = 0;
      v185[1] = "";
      re::DynamicArray<re::ecs2::VideoMaterialAttachment>::add(v161, &v184);
      re::StringID::destroyString((re::StringID *)v185);
      re::StringID::destroyString((re::StringID *)&v184);
      *(void *)&v182.var0 = 0xF3ADD9F5BAC06862;
      v182.var1 = "REVideoAttachmentAverageColor";
      v183[0] = 0;
      v183[1] = "";
      re::DynamicArray<re::ecs2::VideoMaterialAttachment>::add(v161, &v182);
      re::StringID::destroyString((re::StringID *)v183);
      re::StringID::destroyString((re::StringID *)&v182);
      *(void *)&v180.var0 = 0xDE000BD2E5A280BELL;
      v180.var1 = "REVideoAttachmentDockingRegionHeight";
      v181[0] = 0;
      v181[1] = "";
      re::DynamicArray<re::ecs2::VideoMaterialAttachment>::add(v161, &v180);
      re::StringID::destroyString((re::StringID *)v181);
      re::StringID::destroyString((re::StringID *)&v180);
      *(void *)&v178.var0 = 0xD59CE79B746D6F1CLL;
      v178.var1 = "REVideoAttachmentDockingRegionWidth";
      v179[0] = 0;
      v179[1] = "";
      re::DynamicArray<re::ecs2::VideoMaterialAttachment>::add(v161, &v178);
      re::StringID::destroyString((re::StringID *)v179);
      re::StringID::destroyString((re::StringID *)&v178);
    }
  }
  return 1;
}

uint64_t re::MaterialParameterTable::tryGetPassTechniqueMapping(re::MaterialParameterTable *this, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a3;
  uint64_t v5 = a2;
  uint64_t result = re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::tryGet((uint64_t)this + 1032, &v4);
  if (result) {
    return re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(result, &v5);
  }
  return result;
}

void *re::ecs2::MeshComponent::updateStaticBoundingBoxData(void *this, const re::ecs2::Entity *a2, const re::RenderManager *a3)
{
  v34[5] = *MEMORY[0x263EF8340];
  if (!this[36])
  {
    uint64_t v5 = this;
    uint64_t v6 = this + 4;
    this = (void *)re::AssetHandle::loadedAsset<re::MeshAsset>((re::MeshAsset *)(this + 4));
    if (this)
    {
      uint64_t v7 = this;
      if (a3) {
        goto LABEL_7;
      }
      uint64_t v8 = a2;
      do
      {
        uint64_t v9 = v8;
        uint64_t v8 = (const re::ecs2::Entity *)*((void *)v8 + 3);
      }
      while (v8);
      uint64_t v10 = (*(uint64_t (**)(void))(**(void **)(*((void *)v9 + 2) + 56) + 32))(*(void *)(*((void *)v9 + 2) + 56));
      this = (void *)re::ServiceLocator::serviceOrNull<re::RenderManager>(v10);
      a3 = (const re::RenderManager *)this;
      if (this)
      {
LABEL_7:
        uint64_t v11 = *((void *)a3 + 17);
        if (v11) {
          size_t v12 = (void *)(v11 + 8);
        }
        else {
          size_t v12 = 0;
        }
        inited = (re *)objc_initWeak(&location, v12);
        uint64_t v14 = re::globalAllocators(inited);
        uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v14[2] + 32))(v14[2], 224, 8);
        *(_OWORD *)(v15 + 1re::HashTable<re::ecs2::Entity const*,re::ecs2::BillboardData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::deinit((uint64_t *)this + 60) = 0u;
        *(_OWORD *)(v15 + 176) = 0u;
        *(_OWORD *)(v15 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 28) = 0u;
        *(_OWORD *)(v15 + 144) = 0u;
        *(_OWORD *)uint64_t v15 = 0u;
        *(_OWORD *)(v15 + 16) = 0u;
        *(_OWORD *)(v15 + 32) = 0u;
        *(_OWORD *)(v15 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0u;
        *(_OWORD *)(v15 + 64) = 0u;
        *(_OWORD *)(v15 + 8ArcSharedObject::ArcSharedObject(this, 0) = 0u;
        *(_OWORD *)(v15 + 96) = 0u;
        *(_OWORD *)(v15 + 112) = 0u;
        *(_OWORD *)(v15 + 192) = 0u;
        *(_OWORD *)(v15 + 20re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0u;
        *(_DWORD *)(v15 + 112) = 1;
        *(void *)(v15 + 12ArcSharedObject::ArcSharedObject(this, 0) = 0;
        *(void *)(v15 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 28) = 0;
        *(_OWORD *)(v15 + 16re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0u;
        *(_OWORD *)(v15 + 152) = 0u;
        *(_DWORD *)(v15 + 184) = 1;
        *(void *)(v15 + 192) = 0;
        *(void *)(v15 + 20ArcSharedObject::ArcSharedObject(this, 0) = 0;
        memset(v34, 0, 24);
        v34[3] = re::globalAllocators((re *)v15)[2];
        v34[4] = 0;
        re::FramePersistentPtr<re::ecs2::MeshComponent::StaticBoundingBoxData,re::FrameManager>::reset((id *)v5 + 35, &location, (void *)v15, (uint64_t)v34);
        re::FunctionBase<24ul,void ()(void *)>::destroyCallable((uint64_t)v34);
        objc_destroyWeak(&location);
        id location = 0;
        uint64_t v16 = (void *)v5[36];
        uint64_t v17 = (_anonymous_namespace_ *)re::ecs2::EntityComponentCollection::get((const re::ecs2::Entity *)((char *)a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
        if (v17)
        {
          uint64_t v18 = *((void *)v17 + 81);
          if (v18)
          {
            uint64_t v20 = v18 + 8;
            uint64_t v18 = *(void *)(v18 + 8);
            uint64_t v19 = *(void *)(v20 + 8);
          }
          else
          {
            uint64_t v19 = 0;
          }
          v16[6] = v19;
          v16[7] = v18;
          uint64_t v23 = *((void *)v17 + 81);
          if (v23)
          {
            uint64_t v24 = v23 + 32;
            uint64_t v23 = *(void *)(v23 + 32);
            uint64_t v22 = *(void *)(v24 + 8);
          }
          else
          {
            uint64_t v22 = 0;
          }
        }
        else
        {
          uint64_t v17 = (_anonymous_namespace_ *)re::AssetHandle::operator=((uint64_t)v16, v6);
          uint64_t v21 = v7[110];
          v16[6] = v7[111];
          v16[7] = v21;
          uint64_t v22 = v7[114];
          uint64_t v23 = v7[113];
        }
        unsigned char v16[8] = v22;
        v16[9] = v23;
        if (*((float *)v5 + 24) != 0.0)
        {
          uint64_t v17 = re::FixedArray<re::AABB>::operator=((_anonymous_namespace_ *)(v16 + 3), (uint64_t)(v16 + 6));
          uint64_t v26 = v16[4];
          uint64_t v25 = (float32x4_t *)v16[5];
          if (v26)
          {
            BOOL v27 = &v25[2 * v26];
            do
            {
              uint64_t v28 = (const float *)(v5 + 12);
              float32x4_t v29 = vld1q_dup_f32(v28);
              float32x4_t v30 = v25[1];
              *uint64_t v25 = vsubq_f32(*v25, v29);
              float32x4_t v31 = vld1q_dup_f32(v28);
              v25[1] = vaddq_f32(v30, v31);
              v25 += 2;
            }
            while (v25 != v27);
            uint64_t v26 = v16[4];
            uint64_t v25 = (float32x4_t *)v16[5];
          }
          v16[6] = v25;
          v16[7] = v26;
        }
      }
    }
  }
  return this;
}

_anonymous_namespace_ *re::FixedArray<re::AABB>::operator=(_anonymous_namespace_ *a1, uint64_t a2)
{
  if (*(void *)a1) {
    goto LABEL_4;
  }
  unint64_t v4 = *(void *)(a2 + 8);
  if (v4)
  {
LABEL_4:
    re::FixedArray<re::AABB>::copy(a1, (const void **)a2);
  }
  return a1;
}

re::ecs2::MeshComponentStateImpl *re::ecs2::MeshComponentStateImpl::MeshComponentStateImpl(re::ecs2::MeshComponentStateImpl *this, re::ecs2::MeshSystem *a2)
{
  v5[11] = *MEMORY[0x263EF8340];
  *(void *)this = &unk_26E6FB110;
  *((void *)this + 1) = a2;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)((char *)this + re::HashTable<re::ecs2::Entity const*,re::ecs2::BillboardData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::deinit((uint64_t *)this + 60) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *(void *)((char *)this + 76) = 0x7FFFFFFFLL;
  *(_OWORD *)((char *)this + 8re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_DWORD *)this + 3ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *(void *)((char *)this + 124) = 0x7FFFFFFFLL;
  v5[0] = re::ecs2::ComponentImpl<re::ecs2::RenderOptionsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v5[1] = re::ecs2::ComponentImpl<re::ecs2::PortalCrossingFlagsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  void v5[2] = re::ecs2::ComponentImpl<re::ecs2::NetworkComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  void v5[3] = re::ecs2::ComponentImpl<re::ecs2::VisualProxyComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  _OWORD v5[4] = re::ecs2::ComponentImpl<re::ecs2::MeshSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  v5[5] = re::ecs2::ComponentImpl<re::ecs2::ThrottleComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  v5[6] = re::ecs2::ComponentImpl<re::ecs2::MeshSortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  void v5[7] = re::ecs2::ComponentImpl<re::ecs2::MaterialParameterBlockArrayComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  unsigned char v5[8] = re::ecs2::ComponentImpl<re::ecs2::DebugMeshComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  v5[9] = re::ecs2::ComponentImpl<re::ecs2::MaterialRenderStateArrayComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v5[10] = re::ecs2::ComponentImpl<re::ecs2::DirectMaterialParametersArrayComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  v4[0] = v5;
  v4[1] = 11;
  re::FixedArray<re::ecs2::ComponentTypeBase const*>::operator=((re::ecs2::MeshComponentStateImpl *)((char *)this + 16), (uint64_t)v4);
  return this;
}

void re::ecs2::MeshComponentStateImpl::didDependentComponentChange(uint64_t a1, unint64_t a2, re::ecs2::Entity *a3, re::ecs2::ComponentTypeBase *a4)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  uint64_t v42 = a3;
  if (re::ecs2::ComponentImpl<re::ecs2::NetworkComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType == (_UNKNOWN *)a4
    || re::ecs2::ComponentImpl<re::ecs2::VisualProxyComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType == (_UNKNOWN *)a4)
  {
    re::ecs2::MeshComponentStateImpl::markEntityHierarchyDirty(a2, a3);
  }
  else if (re::ecs2::ComponentImpl<re::ecs2::RenderOptionsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType == (_UNKNOWN *)a4 {
         || re::ecs2::ComponentImpl<re::ecs2::PortalCrossingFlagsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType == (_UNKNOWN *)a4)
  }
  {
    uint64_t v41 = *(void *)(a2 + 8);
    long long v44 = 0u;
    long long v45 = 0u;
    long long v43 = 0u;
    DWORD1(v45) = 0x7FFFFFFF;
    uint64_t v8 = re::HashTable<re::ecs2::Scene *,re::HashSet<re::ecs2::Entity *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::add(a1 + 40, &v41, (uint64_t *)&v43);
    re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)&v43);
    re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add(v8, (uint64_t *)&v42);
  }
  else
  {
    uint64_t v9 = *((void *)a3 + 22);
    if (v9)
    {
      if (re::ecs2::ComponentImpl<re::ecs2::MeshSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType == (_UNKNOWN *)a4)
      {
        uint64_t v12 = 24;
        unint64_t v13 = 0xFFFFFFFFLL;
        do
        {
          unint64_t v14 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a2 + 16), *(void *)(a2 + v12), (re::ecs2::Component *)v9);
          if (v14 != -1 && (v15 & 0xFFFFFF00000000) != 0)
          {
            unint64_t v17 = v14;
            unint64_t v13 = v15;
            goto LABEL_31;
          }
          v12 += 8;
        }
        while (v12 != 56);
        unint64_t v17 = -1;
LABEL_31:
        re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>::setComponentState(a2, v17, v13);
      }
      else
      {
        uint64_t v10 = (re::ecs2::Entity *)((char *)a3 + 32);
        if (re::ecs2::ComponentImpl<re::ecs2::ThrottleComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType == (_UNKNOWN *)a4)
        {
          re::ecs2::EntityComponentCollection::get(v10, a4);
        }
        else if (re::ecs2::ComponentImpl<re::ecs2::MeshSortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType == (_UNKNOWN *)a4)
        {
          *(_OWORD *)(v9 + 20re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0u;
          *(unsigned char *)(v9 + 192) = 0;
          uint64_t v38 = re::ecs2::EntityComponentCollection::get(v10, a4);
          if (v38)
          {
            *(unsigned char *)(v9 + 192) = *(unsigned char *)(v38 + 25);
            *(_OWORD *)(v9 + 20re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = *(_OWORD *)(v38 + 304);
          }
        }
        else if (re::ecs2::ComponentImpl<re::ecs2::MaterialParameterBlockArrayComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType == (_UNKNOWN *)a4 {
               || re::ecs2::ComponentImpl<re::ecs2::DebugMeshComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType == (_UNKNOWN *)a4
        }
               || re::ecs2::ComponentImpl<re::ecs2::MaterialRenderStateArrayComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType == (_UNKNOWN *)a4
               || re::ecs2::ComponentImpl<re::ecs2::DirectMaterialParametersArrayComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType == (_UNKNOWN *)a4)
        {
          inited = (re *)objc_initWeak(&location, 0);
          long long v43 = 0uLL;
          *(void *)&long long v44 = 0;
          *((void *)&v44 + 1) = re::globalAllocators(inited)[2];
          *(void *)&long long v45 = 0;
          re::FramePersistentPtr<re::ecs2::MeshComponent::MaterialData,re::FrameManager>::reset((id *)(v9 + 224), &location, 0, (uint64_t)&v43);
          re::FunctionBase<24ul,void ()(void *)>::destroyCallable((uint64_t)&v43);
          objc_destroyWeak(&location);
          id location = 0;
        }
      }
    }
  }
  if (re::ecs2::ComponentImpl<re::ecs2::DebugMeshComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType == (_UNKNOWN *)a4)
  {
    uint64_t v18 = v42;
    uint64_t v19 = (uint64_t)v42;
    do
    {
      uint64_t v20 = v19;
      uint64_t v19 = *(void *)(v19 + 24);
    }
    while (v19);
    if (v18 == re::ecs2::ComponentHelper::privateSceneDataEntity(*(re::ecs2::ComponentHelper **)(v20 + 16), 0))
    {
      uint64_t v21 = (uint64_t)v42;
      do
      {
        uint64_t v22 = v21;
        uint64_t v21 = *(void *)(v21 + 24);
      }
      while (v21);
      uint64_t v23 = *(void *)(v22 + 16);
      uint64_t v24 = *(void *)(v23 + 128);
      if (v24)
      {
        uint64_t v25 = *(uint64_t **)(v23 + 144);
        uint64_t v26 = &v25[v24];
        int8x16_t v27 = (int8x16_t)xmmword_23436BBD0;
        do
        {
          uint64_t v28 = *v25;
          uint64_t v29 = *(void *)(*v25 + 176);
          if (v29)
          {
            uint64_t v30 = *(unsigned __int16 *)(v28 + 82);
            if (!*(_WORD *)(v28 + 82)) {
              goto LABEL_47;
            }
            float32x4_t v31 = (const __int16 *)((char *)re::ecs2::ComponentImpl<re::ecs2::DebugMeshComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
                                  + 16);
            uint64_t v32 = *(int16x8_t **)(v28 + 88);
            int16x8_t v33 = vld1q_dup_s16(v31);
            int v34 = 1;
            while (1)
            {
              uint16x8_t v35 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v33, *v32), v27);
              v35.i16[0] = vmaxvq_u16(v35);
              if (v35.i32[0]) {
                break;
              }
              v34 -= 8;
              ++v32;
              if (!--v30) {
                goto LABEL_47;
              }
            }
            if (v35.u16[0] - v34 >= *(unsigned __int16 *)(v28 + 80))
            {
LABEL_47:
              unint64_t v36 = (id *)(v29 + 224);
              uint64_t v37 = (re *)objc_initWeak(&v39, 0);
              *(void *)&long long v45 = 0;
              long long v43 = 0u;
              long long v44 = 0u;
              *((void *)&v44 + 1) = re::globalAllocators(v37)[2];
              *(void *)&long long v45 = 0;
              re::FramePersistentPtr<re::ecs2::MeshComponent::MaterialData,re::FrameManager>::reset(v36, &v39, 0, (uint64_t)&v43);
              re::FunctionBase<24ul,void ()(void *)>::destroyCallable((uint64_t)&v43);
              objc_destroyWeak(&v39);
              int8x16_t v27 = (int8x16_t)xmmword_23436BBD0;
              id v39 = 0;
            }
          }
          ++v25;
        }
        while (v25 != v26);
      }
    }
  }
}

unint64_t re::ecs2::MeshComponentStateImpl::markEntityHierarchyDirty(unint64_t result, void *a2)
{
  uint64_t v3 = result;
  unint64_t v4 = (re::ecs2::Component *)a2[22];
  if (v4)
  {
    uint64_t v5 = 24;
    unint64_t v6 = 0xFFFFFFFFLL;
    do
    {
      unint64_t v7 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(v3 + 16), *(void *)(v3 + v5), v4);
      if (v7 != -1 && (v8 & 0xFFFFFF00000000) != 0)
      {
        unint64_t v10 = v7;
        unint64_t v6 = v8;
        goto LABEL_10;
      }
      v5 += 8;
    }
    while (v5 != 56);
    unint64_t v10 = -1;
LABEL_10:
    uint64_t result = re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>::setComponentState(v3, v10, v6);
  }
  uint64_t v11 = a2[41];
  if (v11)
  {
    uint64_t v12 = (uint64_t *)a2[43];
    uint64_t v13 = 8 * v11;
    do
    {
      uint64_t v14 = *v12++;
      uint64_t result = re::ecs2::MeshComponentStateImpl::markEntityHierarchyDirty(v3, v14);
      v13 -= 8;
    }
    while (v13);
  }
  return result;
}

uint64_t re::HashTable<re::ecs2::Scene *,re::HashSet<re::ecs2::Entity *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::add(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  unint64_t v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (!*(void *)a1)
  {
    LODWORD(v9) = 0;
    goto LABEL_8;
  }
  unint64_t v9 = v8 % *(unsigned int *)(a1 + 24);
  uint64_t v10 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v9);
  if (v10 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v13 = re::HashTable<re::ecs2::Scene *,re::HashSet<re::ecs2::Entity *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::addAsMove(a1, v9, v8, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v12 = *(void *)(a1 + 16) + 72 * v13;
    return v12 + 24;
  }
  uint64_t v11 = *(void *)(a1 + 16);
  while (*(void *)(v11 + 72 * v10 + 16) != v6)
  {
    LODWORD(v1ArcSharedObject::ArcSharedObject(this, 0) = *(_DWORD *)(v11 + 72 * v10 + 8) & 0x7FFFFFFF;
    if (v10 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  uint64_t v12 = v11 + 72 * v10;
  return v12 + 24;
}

unint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>::setComponentState(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t result = re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), a2, a3, *(void *)(a1 + 24));
  if (result != a2 || v7 != a3 || ((v7 ^ a3) & 0xFFFFFF00000000) != 0)
  {
    uint64_t v10 = *(uint64_t (**)(void))(**(void **)(*(void *)a1 + 224) + 16);
    return v10();
  }
  return result;
}

void re::ecs2::MeshComponentStateImpl::didSetDirty(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  void v8[5] = *MEMORY[0x263EF8340];
  if (a2)
  {
    uint64_t v4 = re::ecs2::ComponentBucketsBase::component(*(void *)(a2 + 16), a3, a4);
    if (v4)
    {
      uint64_t v5 = (id *)(v4 + 280);
      inited = (re *)objc_initWeak(&location, 0);
      memset(v8, 0, 24);
      v8[3] = re::globalAllocators(inited)[2];
      v8[4] = 0;
      re::FramePersistentPtr<re::ecs2::MeshComponent::StaticBoundingBoxData,re::FrameManager>::reset(v5, &location, 0, (uint64_t)v8);
      re::FunctionBase<24ul,void ()(void *)>::destroyCallable((uint64_t)v8);
      objc_destroyWeak(&location);
    }
  }
}

uint64_t re::ecs2::MeshComponentStateImpl::checkRenderOptionChanges(uint64_t a1, void *a2, re::ecs2::RenderOptions *a3, uint64_t a4)
{
  uint64_t v29 = a2[37];
  uint64_t result = re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::contains(a4, &v29);
  if ((result & 1) == 0)
  {
    uint64_t v29 = a2[37];
    uint64_t result = re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew(a4, &v29);
    unint64_t v9 = (re::ecs2::Component *)a2[22];
    if (v9)
    {
      uint64_t v10 = (unsigned __int8 *)re::ecs2::RenderOptions::forEntity(a3, (unint64_t)a2);
      int v11 = *v10;
      LOBYTE(v29) = *v10;
      BYTE2(v29) = v10[2];
      if (BYTE2(v29)) {
        BYTE3(v29) = v10[3];
      }
      BYTE4(v29) = v10[4];
      if (BYTE4(v29)) {
        BYTE5(v29) = v10[5];
      }
      BYTE6(v29) = v10[6];
      if (BYTE6(v29)) {
        HIBYTE(v29) = v10[7];
      }
      unsigned __int8 v30 = v10[8];
      __int16 v12 = *(_WORD *)(v10 + 9);
      unsigned __int8 v32 = v10[11];
      __int16 v31 = v12;
      if (v10[12]) {
        unsigned __int8 v34 = v10[13];
      }
      if (v10[14]) {
        unsigned __int8 v36 = v10[15];
      }
      if (v10[16]) {
        unsigned __int8 v38 = v10[17];
      }
      if (v10[18]) {
        unsigned __int8 v40 = v10[19];
      }
      if (v10[20]) {
        __int16 v42 = *((_WORD *)v10 + 11);
      }
      int v13 = *((_DWORD *)v10 + 6);
      unsigned __int8 v44 = v10[28];
      int v43 = v13;
      uint64_t v14 = 24;
      while (1)
      {
        unint64_t v15 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + v14), v9);
        if (v15 != -1 && (v16 & 0xFFFFFF00000000) != 0) {
          break;
        }
        v14 += 8;
        if (v14 == 56)
        {
          unint64_t v15 = -1;
          break;
        }
      }
      int v18 = *(void *)(a1 + 32) != v15;
      uint64_t result = re::HierarchicalMeshOverrideFlags::flattenToOverrideFlags((re::HierarchicalMeshOverrideFlags *)((char *)&v29 + 2));
      if (v11 != v18 || *((void *)v9 + 22) != result)
      {
        uint64_t v19 = 24;
        unint64_t v20 = 0xFFFFFFFFLL;
        do
        {
          unint64_t v21 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + v19), v9);
          if (v21 != -1 && (v22 & 0xFFFFFF00000000) != 0)
          {
            unint64_t v24 = v21;
            unint64_t v20 = v22;
            goto LABEL_37;
          }
          v19 += 8;
        }
        while (v19 != 56);
        unint64_t v24 = -1;
LABEL_37:
        uint64_t result = re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>::setComponentState(a1, v24, v20);
      }
    }
    uint64_t v25 = a2[41];
    if (v25)
    {
      uint64_t v26 = (uint64_t *)a2[43];
      uint64_t v27 = 8 * v25;
      do
      {
        uint64_t v28 = *v26++;
        uint64_t result = re::ecs2::MeshComponentStateImpl::checkRenderOptionChanges(a1, v28, a3, a4);
        v27 -= 8;
      }
      while (v27);
    }
  }
  return result;
}

uint64_t re::ecs2::MeshComponentStateImpl::processDirtyComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v5 = *(void *)(*(void *)(a1 + 8) + 144);
  if (v5)
  {
    uint64_t v24 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 16))(v5);
    re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v21, a5, 0);
    unint64_t v9 = v21;
    unint64_t v10 = v22;
    unint64_t v21 = a4;
    unint64_t v22 = v9;
    unint64_t v23 = v10;
    uint64_t v11 = (unsigned __int16)v10;
    uint64_t v12 = v10 & 0xFFFF0000;
    if (v9 != a5 || v11 != 0xFFFF || v12 != 4294901760)
    {
      do
      {
        uint64_t v15 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v22);
        int v16 = *(unsigned __int8 *)re::ecs2::RenderOptions::forEntity((re::ecs2::RenderOptions *)&v24, *(void *)(*(void *)v15 + 16));
        unint64_t v17 = v21;
        unint64_t v18 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v22);
        if (v16) {
          uint64_t v19 = 40;
        }
        else {
          uint64_t v19 = 32;
        }
        re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v17, v18, *(void *)(a3 + v19));
        re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v22);
      }
      while (v22 != a5 || (unsigned __int16)v23 != 0xFFFF || WORD1(v23) != 0xFFFF);
    }
    return *(_DWORD *)(a5 + 40) != 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Components should not be processed in headless mode.", "m_meshSystem->m_renderOptionsService", "processDirtyComponents", 1524);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::ecs2::MeshComponentStateImpl::processPreparingComponents(uint64_t a1, uint64_t a2, void *a3, unint64_t a4, uint64_t a5)
{
  uint64_t v9 = *(void *)(a1 + 8);
  __int16 v42 = *(re::MeshManager ***)(v9 + 112);
  uint64_t v10 = re::AssetHandle::loadedAsset<re::MaterialAsset>((re::MaterialAsset *)(v9 + 160));
  if (v10 && !*(unsigned char *)(v10 + 1656))
  {
    int v11 = 1;
  }
  else
  {
    re::AssetHandle::loadAsync((re::AssetHandle *)(*(void *)(a1 + 8) + 160));
    int v11 = 0;
  }
  uint64_t v12 = re::AssetHandle::loadedAsset<re::MaterialAsset>((re::MaterialAsset *)(*(void *)(a1 + 8) + 184));
  if (v12 && !*(unsigned char *)(v12 + 1656))
  {
    int v14 = 1;
  }
  else
  {
    re::AssetHandle::loadAsync((re::AssetHandle *)(*(void *)(a1 + 8) + 184));
    int v14 = 0;
  }
  uint64_t v15 = *(void *)(*(void *)(a1 + 8) + 144);
  if (v15)
  {
    int v16 = v11 & v14;
    uint64_t v48 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 16))(v15);
    re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v45, a5, 0);
    unint64_t v18 = v45;
    unint64_t v17 = v46;
    unint64_t v45 = a4;
    unint64_t v46 = v18;
    unint64_t v47 = v17;
    if (v18 != a5 || (unsigned __int16)v17 != 0xFFFFLL || (v17 & 0xFFFF0000) != 0xFFFF0000)
    {
      do
      {
        uint64_t v19 = *(void *)re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v46);
        if (re::ecs2::MeshComponentHelper::areRequiredAssetsLoaded((re::ecs2::MeshComponentHelper *)v19, v20))
        {
          unint64_t v21 = *(unsigned char **)(v19 + 16);
          uint64_t v22 = *(void *)(*(void *)(a1 + 8) + 640);
          if (v22 && (v21[288] & 0x40) != 0)
          {
            unint64_t v23 = (const re::AssetHandle *)(*(uint64_t (**)(uint64_t))(*(void *)v22 + 80))(v22);
            re::AssetHandle::AssetHandle((re::AssetHandle *)v43, v23);
            if (!v44 || (unsigned int v24 = atomic_load((unsigned int *)(v44 + 704)), v24 != 2))
            {
              re::AssetHandle::loadAsync((re::AssetHandle *)v43);
              re::AssetHandle::~AssetHandle((re::AssetHandle *)v43);
              goto LABEL_33;
            }
            re::AssetHandle::~AssetHandle((re::AssetHandle *)v43);
          }
          if (v16)
          {
            uint64_t v25 = *(void *)(*(void *)(a1 + 8) + 104);
            if (v25 && (*(unsigned char *)(v25 + 424) & 0x10) == 0) {
              goto LABEL_31;
            }
            uint64_t v26 = (const re::MeshAsset *)re::AssetHandle::loadedAsset<re::MeshAsset>((re::MeshAsset *)(v19 + 32));
            uint64_t v27 = (uint64_t *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v21 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
            if (v27)
            {
              uint64_t v28 = v27;
              re::ecs2::MeshSceneComponent::ensureCachedDataUpToDate(v27, v42[4]);
              uint64_t v29 = v28 + 26;
              unsigned __int8 v30 = v28 + 24;
              __int16 v31 = (char *)(v28 + 27);
            }
            else
            {
              uint64_t v29 = (void *)((char *)v26 + 392);
              unsigned __int8 v30 = (uint64_t *)((char *)v26 + 376);
              __int16 v31 = (char *)v26 + 448;
            }
            uint64_t v32 = *v30;
            *(void *)(v19 + 152) = *v29;
            *(void *)(v19 + 1re::HashTable<re::ecs2::Entity const*,re::ecs2::BillboardData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::deinit((uint64_t *)this + 60) = v32;
            *(void *)(v19 + 16re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v31;
            if (!v32) {
              goto LABEL_33;
            }
            int16x8_t v33 = (char *)re::ecs2::RenderOptions::forEntity((re::ecs2::RenderOptions *)&v48, (unint64_t)v21);
            *(void *)(v19 + 176) = re::HierarchicalMeshOverrideFlags::flattenToOverrideFlags((re::HierarchicalMeshOverrideFlags *)(v33 + 2));
            if (re::ecs2::MeshComponent::updateMaterialData((re::ecs2::MeshComponent *)v19, *(const re::ecs2::MeshSystem **)(a1 + 8), v26, (unint64_t)v21, *(const re::DirectResourceAssetTracker **)(*(void *)(a1 + 8) + 720)))
            {
              re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v21 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ThrottleComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
              *(_OWORD *)(v19 + 20re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0u;
              *(unsigned char *)(v19 + 192) = 0;
              uint64_t v34 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v21 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshSortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
              if (v34)
              {
                *(unsigned char *)(v19 + 192) = *(unsigned char *)(v34 + 25);
                *(_OWORD *)(v19 + 20re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = *(_OWORD *)(v34 + 304);
              }
              re::ecs2::MeshComponent::updateStaticBoundingBoxData((void *)v19, (const re::ecs2::Entity *)v21, (const re::RenderManager *)v42);
              unint64_t v35 = v45;
              unint64_t v36 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v46);
              uint64_t v37 = (re::ecs2::ComponentBucketsBase *)a3[2];
              unint64_t v38 = a3[6];
            }
            else
            {
LABEL_31:
              unint64_t v35 = v45;
              unint64_t v36 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v46);
              uint64_t v37 = (re::ecs2::ComponentBucketsBase *)a3[2];
              unint64_t v38 = a3[4];
            }
            re::ecs2::ComponentBucketsBase::moveComponent(v37, v35, v36, v38);
          }
        }
LABEL_33:
        re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v46);
      }
      while (v46 != a5 || (unsigned __int16)v47 != 0xFFFF || WORD1(v47) != 0xFFFF);
    }
    return *(_DWORD *)(a5 + 40) != 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Components should not be processed in headless mode.", "m_meshSystem->m_renderOptionsService", "processPreparingComponents", 1568);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

BOOL re::ecs2::MeshComponentStateImpl::processUpdatingComponents(unint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v589 = *MEMORY[0x263EF8340];
  uint64_t v8 = *(void *)(a3 + 8);
  uint64_t v366 = *(void *)(*(void *)(a1 + 8) + 112);
  uint64_t v9 = re::RenderManager::perFrameAllocator((re::RenderManager *)v366);
  unint64_t v429 = a1;
  uint64_t v10 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 8) + 136) + 24))(*(void *)(*(void *)(a1 + 8) + 136));
  uint64_t v484 = v10;
  unsigned int v482 = 0;
  long long v480 = 0u;
  long long v481 = 0u;
  uint64_t v483 = 0x7FFFFFFFLL;
  uint64_t v428 = v9;
  re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)&v480, v9, 3);
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)v544, a5, 0);
  long long v11 = v544[0];
  unint64_t v424 = a4;
  *(void *)&v544[0] = a4;
  *(long long *)((char *)v544 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v11;
  if ((void)v11 != a5 || WORD4(v11) != 0xFFFFLL || (DWORD2(v11) & 0xFFFF0000) != 0xFFFF0000)
  {
    do
    {
      uint64_t v12 = *(void *)(*(void *)re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)v544 + 4)
                      + 16);
      unint64_t v584 = 0;
      (*(void (**)(unsigned char *__return_ptr, uint64_t, uint64_t))(*(void *)v10 + 8))(v485, v10, v12);
      if (v485[0]) {
        unint64_t v13 = *(void *)&v485[8];
      }
      else {
        unint64_t v13 = 0;
      }
      unint64_t v584 = v13;
      *(_DWORD *)v485 = 0;
      int v14 = (void *)re::HashTable<unsigned long long,unsigned long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add<int>((uint64_t)&v480, (uint64_t *)&v584, (int *)v485);
      ++*v14;
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment((_WORD *)v544 + 4);
    }
    while (*((void *)&v544[0] + 1) != a5 || LOWORD(v544[1]) != 0xFFFF || WORD1(v544[1]) != 0xFFFF);
  }
  int v478 = 0;
  memset(v477, 0, sizeof(v477));
  uint64_t v479 = 0x7FFFFFFFLL;
  re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v477, v9, 3);
  uint64_t v15 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(v8 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshDeformationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    uint64_t v16 = *(void *)(v15 + 24);
    if (v16)
    {
      unint64_t v17 = *(uint64_t **)(v15 + 40);
      uint64_t v18 = 8 * v16;
      do
      {
        uint64_t v19 = *v17++;
        uint64_t v20 = *(void *)(v19 + 16);
        *(void *)v485 = 0;
        (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(*(void *)v10 + 8))(v544, v10, v20);
        if (LOBYTE(v544[0])) {
          uint64_t v21 = *((void *)&v544[0] + 1);
        }
        else {
          uint64_t v21 = 0;
        }
        *(void *)v485 = v21;
        LODWORD(v544[0]) = 0;
        uint64_t v22 = (void *)re::HashTable<unsigned long long,unsigned long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add<int>((uint64_t)v477, (uint64_t *)v485, (int *)v544);
        ++*v22;
        v18 -= 8;
      }
      while (v18);
    }
  }
  int v475 = 0;
  memset(v474, 0, sizeof(v474));
  uint64_t v476 = 0x7FFFFFFFLL;
  re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v474, v9, 3);
  uint64_t v23 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(v8 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PortalComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v23)
  {
    uint64_t v24 = *(void *)(v23 + 24);
    if (v24)
    {
      uint64_t v25 = *(uint64_t **)(v23 + 40);
      uint64_t v26 = 8 * v24;
      do
      {
        uint64_t v27 = *v25++;
        uint64_t v28 = *(void *)(v27 + 16);
        *(void *)v485 = 0;
        (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(*(void *)v10 + 8))(v544, v10, v28);
        if (LOBYTE(v544[0])) {
          uint64_t v29 = *((void *)&v544[0] + 1);
        }
        else {
          uint64_t v29 = 0;
        }
        *(void *)v485 = v29;
        LODWORD(v544[0]) = 0;
        unsigned __int8 v30 = (void *)re::HashTable<unsigned long long,unsigned long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add<int>((uint64_t)v474, (uint64_t *)v485, (int *)v544);
        ++*v30;
        v26 -= 8;
      }
      while (v26);
    }
  }
  v426 = (re::ecs2::RenderingSubsystem *)v8;
  uint64_t v380 = a5;
  long long v470 = 0u;
  long long v471 = 0u;
  unsigned int v472 = 0;
  uint64_t v473 = 0x7FFFFFFFLL;
  re::HashTable<unsigned long long,re::ecs2::MeshComponentStateImpl::processUpdatingComponents(re::ecs2::System::UpdateContext const&,re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent> *,re::ecs2::ComponentBuckets<re::ecs2::MeshComponent>::BucketIteration,void *)::PerWorldData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)&v470, v428, SHIDWORD(v481));
  unsigned int v432 = v482;
  uint64_t v31 = 0;
  if (v482)
  {
    uint64_t v32 = (int *)(v481 + 8);
    while (1)
    {
      int v33 = *v32;
      v32 += 8;
      if (v33 < 0) {
        break;
      }
      if (v482 == ++v31)
      {
        LODWORD(v31) = v482;
        break;
      }
    }
  }
  if (v482 != v31)
  {
    uint64_t v34 = v31;
    unint64_t v35 = (unint64_t)&v549;
    uint64_t v36 = v481;
    unint64_t v37 = (unint64_t)&v552.u64[1];
    do
    {
      uint64_t v38 = v36 + 32 * v34;
      id v39 = (uint64_t *)(v38 + 16);
      unsigned __int8 v40 = (unint64_t *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)v477, (uint64_t *)(v38 + 16));
      if (v40) {
        unint64_t v41 = *v40;
      }
      else {
        unint64_t v41 = 0;
      }
      unint64_t v42 = *(void *)(v38 + 24);
      memset((char *)v544 + 8, 0, 20);
      *(void *)&long long v545 = 0;
      *(void *)&v544[0] = v428;
      re::DynamicArray<re::MeshScene>::setCapacity(v544, v42);
      *((void *)&v545 + 1) = 0;
      *(void *)&long long v546 = 0;
      ++DWORD2(v544[1]);
      DWORD2(v546) = 1;
      *(void *)&long long v548 = 0;
      float32x4_t v547 = 0uLL;
      DWORD2(v54re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      re::BucketArray<re::MeshDeformation,8ul>::init((uint64_t)&v545 + 8, v428, v41);
      *(void *)&long long v551 = 0;
      v550.i64[0] = 0;
      long long v549 = 0uLL;
      v550.i32[2] = 0;
      BYTE8(v551) = 0;
      *(void *)&long long v553 = 0;
      DWORD2(v553) = 0;
      *(void *)&long long v554 = 0;
      simd_float3 v552 = (simd_float3)(unint64_t)v428;
      re::DynamicArray<re::BlurPlaneData>::setCapacity(&v552, 0);
      ++DWORD2(v553);
      long long v555 = 0uLL;
      LODWORD(v556) = 0;
      *((void *)&v556 + 1) = 0;
      *((void *)&v554 + 1) = v428;
      re::DynamicArray<re::BlurPlaneData>::setCapacity((void *)&v554 + 1, 0);
      LODWORD(v556) = v556 + 1;
      LOWORD(v557) = 0;
      unint64_t v43 = 0xBF58476D1CE4E5B9 * (*v39 ^ ((unint64_t)*v39 >> 30));
      unint64_t v44 = (0x94D049BB133111EBLL * (v43 ^ (v43 >> 27))) ^ ((0x94D049BB133111EBLL * (v43 ^ (v43 >> 27))) >> 31);
      if ((void)v470)
      {
        unint64_t v45 = v44 % DWORD2(v471);
        uint64_t v46 = *(unsigned int *)(*((void *)&v470 + 1) + 4 * v45);
        if (v46 != 0x7FFFFFFF)
        {
          while (*(void *)(v471 + (v46 << 8) + 16) != *v39)
          {
            uint64_t v46 = *(_DWORD *)(v471 + (v46 << 8) + 8) & 0x7FFFFFFF;
            if (v46 == 0x7FFFFFFF) {
              goto LABEL_40;
            }
          }
          uint64_t v48 = v471 + (v46 << 8);
          goto LABEL_42;
        }
      }
      else
      {
        LODWORD(v45) = 0;
      }
LABEL_40:
      unsigned int v47 = re::HashTable<unsigned long long,re::ecs2::MeshComponentStateImpl::processUpdatingComponents(re::ecs2::System::UpdateContext const&,re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent> *,re::ecs2::ComponentBuckets<re::ecs2::MeshComponent>::BucketIteration,void *)::PerWorldData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove((uint64_t)&v470, v45, v44, v39, (uint64_t)v544);
      ++HIDWORD(v473);
      uint64_t v48 = v471 + ((unint64_t)v47 << 8);
LABEL_42:
      uint64_t v49 = v48 + 24;
      if (*((void *)&v554 + 1))
      {
        if (*((void *)&v556 + 1)) {
          (*(void (**)(void))(**((void **)&v554 + 1) + 40))();
        }
        *((void *)&v556 + 1) = 0;
        long long v555 = 0uLL;
        *((void *)&v554 + 1) = 0;
        LODWORD(v556) = v556 + 1;
      }
      if (v552.i64[0])
      {
        if ((void)v554) {
          (*(void (**)(void))(*(void *)v552.i64[0] + 40))();
        }
        *(void *)&long long v554 = 0;
        *(void *)&long long v553 = 0;
        simd_float3 v552 = 0uLL;
        ++DWORD2(v553);
      }
      re::DynamicArray<re::StencilPortal>::deinit((uint64_t)&v549);
      re::BucketArray<re::MeshDeformation,8ul>::deinit((uint64_t)&v545 + 8);
      if (*((void *)&v545 + 1))
      {
        int v50 = DWORD2(v546);
        if ((BYTE8(v546) & 1) == 0)
        {
          (*(void (**)(void))(**((void **)&v545 + 1) + 40))();
          int v50 = DWORD2(v546);
        }
        *((void *)&v545 + 1) = 0;
        *(void *)&long long v546 = 0;
        DWORD2(v546) = (v50 | 1) + 2;
      }
      re::DynamicArray<re::MeshScene>::deinit((uint64_t)v544);
      uint64_t v51 = (unint64_t *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)v474, v39);
      if (v51)
      {
        unint64_t v52 = *v51;
        memset((char *)v544 + 8, 0, 20);
        *(void *)&long long v545 = 0;
        *(void *)&v544[0] = v428;
        re::DynamicArray<re::StencilPortal>::setCapacity(v544, v52);
        int v54 = DWORD2(v544[1])++;
        if ((long long *)(v49 + 96) != v544)
        {
          uint64_t v55 = *(void *)(v49 + 96);
          if (v55) {
            BOOL v56 = *(void *)&v544[0] == 0;
          }
          else {
            BOOL v56 = 1;
          }
          if (!v56 && v55 != *(void *)&v544[0])
          {
LABEL_461:
            re::internal::assertLog((re::internal *)4, v53, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || !other.isInitialized() || m_allocator == other.m_allocator", "operator=", 503);
            _os_crash();
            __break(1u);
LABEL_462:
            unint64_t v584 = 0;
            long long v546 = 0u;
            float32x4_t v547 = 0u;
            long long v545 = 0u;
            memset(v544, 0, sizeof(v544));
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)v485 = 136315906;
            *(void *)&v485[4] = "operator[]";
            *(_WORD *)&v485[12] = 1024;
            *(_DWORD *)&v485[14] = 858;
            *(_WORD *)&v485[18] = 2048;
            *(void *)&v485[20] = v35;
            *(_WORD *)&v485[28] = 2048;
            *(void *)&v485[30] = v37;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
          *(void *)(v49 + 96) = *(void *)&v544[0];
          *(void *)&v544[0] = v55;
          long long v58 = *(_OWORD *)(v49 + 104);
          *(_OWORD *)(v49 + 104) = *(long long *)((char *)v544 + 8);
          *(long long *)((char *)v544 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v58;
          uint64_t v59 = *(void *)(v49 + 128);
          *(void *)(v49 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 28) = v545;
          *(void *)&long long v545 = v59;
          DWORD2(v544[1]) = v54 + 2;
          ++*(_DWORD *)(v49 + 120);
        }
        re::DynamicArray<re::StencilPortal>::deinit((uint64_t)v544);
      }
      *(unsigned char *)(v49 + 136) = 0;
      uint64_t v36 = v481;
      if (v482 <= (int)v31 + 1) {
        unsigned int v60 = v31 + 1;
      }
      else {
        unsigned int v60 = v482;
      }
      while (1)
      {
        uint64_t v34 = (v31 + 1);
        if (v60 - 1 == v31) {
          break;
        }
        LODWORD(v31) = v31 + 1;
        unsigned int v61 = v34;
        if ((*(_DWORD *)(v481 + 32 * v34 + 8) & 0x80000000) != 0) {
          goto LABEL_73;
        }
      }
      unsigned int v61 = v60;
LABEL_73:
      LODWORD(v31) = v61;
    }
    while (v432 != v61);
  }
  unint64_t v62 = v429;
  uint64_t v63 = (*(uint64_t (**)(void))(**(void **)(*(void *)(v429 + 8) + 40) + 32))(*(void *)(*(void *)(v429 + 8) + 40));
  v365 = (_anonymous_namespace_ *)re::ServiceLocator::serviceOrNull<re::ecs2::RenderPassGroupService>(v63);
  long long v466 = 0u;
  long long v467 = 0u;
  unsigned int v468 = 0;
  uint64_t v469 = 0x7FFFFFFFLL;
  unsigned int v65 = v482;
  if (v482)
  {
    uint64_t v66 = 0;
    uint64_t v67 = (int *)(v481 + 8);
    uint64_t v68 = a5;
    while (1)
    {
      int v69 = *v67;
      v67 += 8;
      if (v69 < 0) {
        break;
      }
      if (v482 == ++v66)
      {
        LODWORD(v66) = v482;
        break;
      }
    }
  }
  else
  {
    LODWORD(v66) = 0;
    uint64_t v68 = a5;
  }
  if (v482 != v66)
  {
    uint64_t v70 = v66;
    uint64_t v71 = v481;
    do
    {
      uint64_t v72 = (uint64_t *)(v71 + 32 * v70 + 16);
      LODWORD(v545) = 0;
      memset(v544, 0, sizeof(v544));
      *(void *)((char *)&v545 + 4) = 0x7FFFFFFFLL;
      re::HashTable<unsigned long long,re::HashTable<unsigned long long,re::ecs2::RenderPassGroupBoundsInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add((uint64_t)&v466, v72, (uint64_t *)v544);
      re::HashTable<unsigned long long,re::ecs2::RenderPassGroupBoundsInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v544);
      uint64_t v71 = v481;
      if (v482 <= (int)v66 + 1) {
        unsigned int v73 = v66 + 1;
      }
      else {
        unsigned int v73 = v482;
      }
      int v74 = v66;
      while (1)
      {
        uint64_t v70 = (v74 + 1);
        if (v73 - 1 == v74) {
          break;
        }
        ++v74;
        LODWORD(v66) = v70;
        if ((*(_DWORD *)(v481 + 32 * v70 + 8) & 0x80000000) != 0) {
          goto LABEL_90;
        }
      }
      LODWORD(v66) = v73;
LABEL_90:
      ;
    }
    while (v65 != v66);
  }
  uint64_t v75 = *(void *)(v366 + 104);
  if (v75) {
    size_t v76 = (re::DynamicString **)re::RenderFrameBox::get(v75 + 344, 0xFFFFFFFFFFFFFFFuLL);
  }
  else {
    size_t v76 = 0;
  }
  v427 = (re::RenderFrame *)v76;
  re::ecs2::RenderingSubsystem::nonOwningStreamNameForWorldRoot(v426, 0, v76, v465);
  if (re::s_debugSettingsManager)
  {
    *(void *)&v544[0] = 0x24602E277FE387A2;
    *((void *)&v544[0] + 1) = "perceptualBlendingMode";
    *(_DWORD *)v485 = 0;
    if (!re::DebugSettingsManager::getWithErrorCode<int>(re::s_debugSettingsManager, v544, v485))
    {
      int v368 = *(_DWORD *)v485;
      re::StringID::destroyString((re::StringID *)v544);
      goto LABEL_100;
    }
    re::StringID::destroyString((re::StringID *)v544);
  }
  {
    if (v360)
    {
    }
  }
  int v368 = 2 * re::internal::perceptual_alpha::never_use_this::g_enablePerceptualAlpha;
LABEL_100:
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)v544, v68, 0);
  unint64_t v463 = v424;
  long long v464 = v544[0];
  if (*(void *)&v544[0] != v68 || WORD4(v544[0]) != 0xFFFFLL || (DWORD2(v544[0]) & 0xFFFF0000) != 0xFFFF0000)
  {
    do
    {
      uint64_t v77 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v464);
      uint64_t v78 = *(void *)v77;
      v462 = *(re::ecs2::BillboardService **)(*(void *)v77 + 16);
      uint64_t v79 = (const re::MeshAsset *)re::AssetHandle::loadedAsset<re::MeshAsset>((re::MeshAsset *)(v78 + 32));
      if (!*(void *)(v78 + 232)
        && (re::ecs2::MeshComponent::updateMaterialData((re::ecs2::MeshComponent *)v78, *(const re::ecs2::MeshSystem **)(v62 + 8), v79, (unint64_t)v462, *(const re::DirectResourceAssetTracker **)(*(void *)(v62 + 8) + 720)) & 1) == 0)
      {
        unint64_t v102 = v463;
        unint64_t v103 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v464);
        re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v102, v103, *(void *)(a3 + 32));
        goto LABEL_393;
      }
      int v415 = re::ecs2::containsShaderGraphMaterialWithLightSpillNode(*(void *)(v78 + 72), *(const re::ecs2::MeshComponent **)(v78 + 88));
      if (v415)
      {
        uint64_t v80 = *(void *)(v78 + 16);
        do
        {
          uint64_t v81 = v80;
          uint64_t v80 = *(void *)(v80 + 24);
        }
        while (v80);
        uint64_t ReflectionContentComponent = re::ecs2::ImageBasedReflectionSystem::findReflectionContentComponent(*(re::ecs2::ImageBasedReflectionSystem **)(v81 + 16), 0);
      }
      else
      {
        uint64_t ReflectionContentComponent = 0;
      }
      (*(void (**)(long long *__return_ptr))(*(void *)v484 + 8))(v544);
      if (LOBYTE(v544[0])) {
        unint64_t v82 = *((void *)&v544[0] + 1);
      }
      else {
        unint64_t v82 = 0;
      }
      uint64_t v83 = re::HashTable<unsigned long long,re::ecs2::MeshComponentStateImpl::processUpdatingComponents(re::ecs2::System::UpdateContext const&,re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent> *,re::ecs2::ComponentBuckets<re::ecs2::MeshComponent>::BucketIteration,void *)::PerWorldData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)&v470, v82);
      re::ecs2::TransformHelper::computeWorldMatrixForRendering(*(re::ecs2::TransformHelper **)(*(void *)(v62 + 8) + 152), (re::ecs2::TransformComponent **)v462, &v458);
      re::ecs2::DynamicBoundingBoxComponent::lastKnownBoundsHelper(v462, &v456);
      uint64_t v422 = *(void *)(v78 + 176);
      unint64_t v425 = re::ecs2::MeshComponentHelper::clippingDataForMeshScene((uint64_t)v462, (const re::ecs2::MeshComponent *)&v456, (float32x4_t *)&v458, *(void *)(*(void *)(v62 + 8) + 648));
      if (BYTE5(v425)) {
        goto LABEL_393;
      }
      v406 = (re::ecs2::Scene *)v82;
      unint64_t v84 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v428 + 32))(v428, 24, 8);
      *(void *)(v84 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      *(void *)(v84 + 16) = 0;
      *(void *)unint64_t v84 = 0;
      re::FixedArray<re::DataArrayHandle<re::DeformationStack>>::init<>((void *)v84, v428, *(void *)(v78 + 160));
      re::FixedArray<re::SkinningInfluence>::copy((void *)v84, (const void **)(v78 + 152));
      long long v85 = v462;
      uint64_t v86 = *((void *)v462 + 23);
      unint64_t v423 = v83;
      unint64_t v405 = v84;
      if (v86 && (unint64_t v37 = *(void *)(v86 + 392)) != 0)
      {
        unint64_t v88 = v84 + 8;
        unint64_t v84 = *(void *)(v84 + 8);
        uint64_t v87 = *(void *)(v88 + 8);
        uint64_t v90 = *(void *)(v37 + 16);
        uint64_t v89 = *(void *)(v37 + 24);
        uint64_t v433 = *(void *)(v37 + 48);
        uint64_t v430 = *(void *)(v37 + 40);
        unint64_t v35 = *(void *)(v37 + 88);
        uint64_t v91 = *(const void **)(v37 + 96);
        uint64_t v92 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v428 + 32))(v428, 24, 8);
        *(void *)(v92 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
        *(void *)(v92 + 16) = 0;
        *(void *)uint64_t v92 = 0;
        re::FixedArray<re::DeformationInputData>::init<>((uint64_t *)v92, v428, v35);
        if (*(void *)(v92 + 8) != v35) {
          goto LABEL_459;
        }
        if (v35) {
          memmove(*(void **)(v92 + 16), v91, 168 * v35);
        }
        unint64_t v35 = v423;
        if (*(void *)(v423 + 40))
        {
          uint64_t v94 = *(void *)(v37 + 112);
          uint64_t v95 = *(void *)(v37 + 120);
          uint64_t v96 = *(void *)(v37 + 64);
          uint64_t v97 = *(void *)(v37 + 72);
          uint64_t v98 = *(void *)(v92 + 8);
          uint64_t v93 = *(void *)(v92 + 16);
          unint64_t v99 = *(void *)(v423 + 80);
          unint64_t v37 = *(void *)(v423 + 48);
          if (v99 + 1 > 8 * v37)
          {
            *(void *)v412 = v93;
            uint64_t v416 = v96;
            uint64_t v418 = v94;
            uint64_t v420 = v95;
            uint64_t v100 = v97;
            re::BucketArray<re::MeshDeformation,8ul>::setBucketsCapacity((uint64_t *)(v423 + 40), (v99 + 8) >> 3);
            uint64_t v93 = *(void *)v412;
            uint64_t v96 = v416;
            uint64_t v97 = v100;
            uint64_t v95 = v420;
            uint64_t v94 = v418;
            unint64_t v37 = *(void *)(v423 + 48);
          }
          unint64_t v35 = v99 >> 3;
          if (v37 <= v99 >> 3) {
            goto LABEL_462;
          }
          if (*(unsigned char *)(v423 + 56)) {
            unint64_t v101 = v423 + 64;
          }
          else {
            unint64_t v101 = *(void *)(v423 + 72);
          }
          uint64_t v104 = *(void *)(v101 + 8 * v35);
          ++*(void *)(v423 + 80);
          ++*(_DWORD *)(v423 + 88);
          uint64_t v105 = (void *)(v104 + 104 * (v99 & 7));
          *uint64_t v105 = v87;
          v105[1] = v84;
          v105[2] = v89;
          v105[3] = v90;
          v105[4] = v433;
          v105[5] = v430;
          v105[6] = v97;
          v105[7] = v96;
          v105[8] = v93;
          v105[9] = v98;
          v105[10] = v95;
          v105[11] = v94;
          v105[12] = 0;
          unint64_t v35 = v423;
        }
        uint64_t v106 = *(void *)(v35 + 80);
        if (!v106) {
          goto LABEL_460;
        }
        uint64_t v403 = re::BucketArray<re::MeshDeformation,8ul>::operator[](v423 + 40, v106 - 1);
        long long v85 = v462;
        unint64_t v62 = v429;
      }
      else
      {
        uint64_t v403 = 0;
      }
      uint64_t v107 = *(void *)(v78 + 288);
      uint64_t v108 = v107 + 80;
      uint64_t v109 = v107 + 152;
      uint64_t v110 = re::ecs2::EntityComponentCollection::get((re::ecs2::BillboardService *)((char *)v85 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::DynamicBoundingBoxComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType);
      if (v110)
      {
        uint64_t v112 = *(void *)(v110 + 96);
        BOOL v113 = v112 == 0;
        if (v112) {
          uint64_t v108 = v112 + 80;
        }
        uint64_t v114 = v112 + 152;
        if (v113) {
          uint64_t v114 = v109;
        }
        uint64_t v115 = *(void *)(v110 + 152);
        if (v115) {
          uint64_t v116 = v115 + 40;
        }
        else {
          uint64_t v116 = v109;
        }
        uint64_t v404 = v116;
        uint64_t v109 = v114;
      }
      else
      {
        uint64_t v404 = v109;
      }
      unint64_t v35 = *(void *)(v78 + 232);
      v431.i64[0] = *(void *)(v35 + 112);
      v431.i64[1] = *(void *)(v35 + 104);
      uint64_t v400 = *(void *)(v35 + 136);
      uint64_t v399 = *(void *)(v35 + 128);
      uint64_t v398 = *(void *)(v35 + 160);
      uint64_t v397 = *(void *)(v35 + 152);
      uint64_t v396 = *(void *)(v35 + 208);
      uint64_t v395 = *(void *)(v35 + 200);
      unint64_t v37 = *(void *)(v35 + 176);
      uint64_t v402 = v109;
      uint64_t v401 = v108;
      if (v37)
      {
        if (v37 >> 61) {
          goto LABEL_457;
        }
        uint64_t v117 = (void *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)v428 + 32))(v428, 8 * v37, 8);
        if (!v117)
        {
LABEL_458:
          re::internal::assertLog((re::internal *)4, v118, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
          _os_crash();
          __break(1u);
LABEL_459:
          re::internal::assertLog((re::internal *)4, v93, "assertion failure: '%s' (%s:line %i) Cannot copy from a Slice of a different size", "m_size == other.size()", "copy", 378);
          _os_crash();
          __break(1u);
LABEL_460:
          re::internal::assertLog((re::internal *)4, v93, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
          _os_crash();
          __break(1u);
          goto LABEL_461;
        }
        uint64_t v119 = v117;
        uint64_t v120 = v117;
        if (v37 != 1)
        {
          bzero(v117, 8 * v37 - 8);
          uint64_t v120 = &v119[v37 - 1];
        }
        *uint64_t v120 = 0;
        uint64_t v121 = *(void *)(v35 + 176);
        if (v121)
        {
          uint64_t v122 = 0;
          for (unint64_t i = 0; v121 != i; ++i)
          {
            uint64_t v124 = (void *)(*(void *)(v35 + 184) + v122);
            if (*v124 || v124[1])
            {
              if (v37 <= i)
              {
                unint64_t v584 = 0;
                long long v546 = 0u;
                float32x4_t v547 = 0u;
                long long v545 = 0u;
                memset(v544, 0, sizeof(v544));
                os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                *(_DWORD *)v485 = 136315906;
                *(void *)&v485[4] = "operator[]";
                *(_WORD *)&v485[12] = 1024;
                *(_DWORD *)&v485[14] = 468;
                *(_WORD *)&v485[18] = 2048;
                *(void *)&v485[20] = i;
                *(_WORD *)&v485[28] = 2048;
                *(void *)&v485[30] = v37;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
LABEL_451:
                re::internal::assertLog((re::internal *)6, v202, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v84, v431.i64[1]);
                _os_crash();
                __break(1u);
LABEL_452:
                re::internal::assertLog((re::internal *)4, v255, "assertion failure: '%s' (%s:line %i) ", "referencingPortalComponent != nullptr", "processUpdatingComponents", 2232);
                _os_crash();
                __break(1u);
LABEL_453:
                *(void *)&long long v458 = 0;
                long long v546 = 0u;
                float32x4_t v547 = 0u;
                long long v545 = 0u;
                memset(v544, 0, sizeof(v544));
                os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                *(_DWORD *)v485 = 136315906;
                *(void *)&v485[4] = "operator[]";
                *(_WORD *)&v485[12] = 1024;
                *(_DWORD *)&v485[14] = 858;
                *(_WORD *)&v485[18] = 2048;
                *(void *)&v485[20] = v62;
                *(_WORD *)&v485[28] = 2048;
                *(void *)&v485[30] = v35;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
LABEL_454:
                re::internal::assertLog((re::internal *)4, v334, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
                _os_crash();
                __break(1u);
LABEL_455:
                unint64_t i = v339 >> 2;
                *(void *)&long long v458 = 0;
                long long v546 = 0u;
                float32x4_t v547 = 0u;
                long long v545 = 0u;
                memset(v544, 0, sizeof(v544));
                os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                *(_DWORD *)v485 = 136315906;
                *(void *)&v485[4] = "operator[]";
                *(_WORD *)&v485[12] = 1024;
                *(_DWORD *)&v485[14] = 858;
                *(_WORD *)&v485[18] = 2048;
                *(void *)&v485[20] = i;
                *(_WORD *)&v485[28] = 2048;
                *(void *)&v485[30] = v35;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
LABEL_456:
                unint64_t v584 = 0;
                long long v546 = 0u;
                float32x4_t v547 = 0u;
                long long v545 = 0u;
                memset(v544, 0, sizeof(v544));
                os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                *(_DWORD *)v485 = 136315906;
                *(void *)&v485[4] = "operator[]";
                *(_WORD *)&v485[12] = 1024;
                *(_DWORD *)&v485[14] = 468;
                *(_WORD *)&v485[18] = 2048;
                *(void *)&v485[20] = i;
                *(_WORD *)&v485[28] = 2048;
                *(void *)&v485[30] = v37;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
LABEL_457:
                re::internal::assertLog((re::internal *)6, v111, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 8, v37);
                _os_crash();
                __break(1u);
                goto LABEL_458;
              }
            }
            else
            {
              if (v37 <= i) {
                goto LABEL_456;
              }
              uint64_t v124 = 0;
            }
            v119[i] = v124;
            v122 += 16;
          }
        }
        (*(void (**)(uint64_t, void *))(*(void *)v428 + 40))(v428, v119);
      }
      else
      {
        uint64_t v119 = 0;
      }
      uint64_t v125 = *(void *)(v78 + 16);
      *(void *)&v442.char var0 = v125;
      uint64_t v126 = *(re::RenderManager ****)(*(void *)(v62 + 8) + 112);
      *(void *)&v544[0] = 0;
      DWORD2(v544[0]) = 0;
      uint64_t v127 = v126[3];
      *(void *)v485 = *(void *)(v125 + 296);
      BOOL v128 = re::HashTable<unsigned long long,unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::containsKey((uint64_t)(v127 + 129), (uint64_t *)v485);
      BOOL v129 = v128;
      if (v128)
      {
        uint64_t v130 = re::MaterialManager::getOrAddSystemMaterialParameterBlock(v126[3], *(void *)(v125 + 296));
        if (re::DynamicInlineArray<__CVBuffer *,2ul>::ensureCapacity(v544, v131))
        {
          uint64_t v132 = *(void *)&v544[0];
          *((void *)&v544[1] + *(void *)&v544[0]) = v130;
          *(void *)&v544[0] = v132 + 1;
          ++DWORD2(v544[0]);
        }
      }
      uint64_t v133 = (*(uint64_t (**)(void, re::ecs2::RenderingSubsystem *))(**(void **)(*(void *)(v62 + 8)
                                                                                             + 696)
                                                                               + 24))(*(void *)(*(void *)(v62 + 8) + 696), v426);
      uint64_t v134 = re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(v133, (uint64_t *)&v442);
      if (v134)
      {
        uint64_t v135 = re::ecs2::EntityHandle::resolve((id *)(*(void *)v134 + 32), (uint64_t)v426);
        if (v135)
        {
          uint64_t v136 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v135 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ImageBasedLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
          if (v136)
          {
            uint64_t v138 = v136;
            if (*(unsigned char *)(v136 + 152))
            {
              if (re::DynamicInlineArray<__CVBuffer *,2ul>::ensureCapacity(v544, v137))
              {
                uint64_t v139 = *(void *)&v544[0];
                *((void *)&v544[1] + *(void *)&v544[0]) = v138 + 160;
                *(void *)&v544[0] = v139 + 1;
                ++DWORD2(v544[0]);
              }
            }
          }
        }
      }
      uint64_t v140 = *(void *)(v78 + 72);
      if (v140)
      {
        uint64_t v141 = 0;
        uint64_t v142 = *(re::MaterialAsset **)(v78 + 88);
        uint64_t v143 = (re::MaterialAsset *)((char *)v142 + 24 * v140);
        do
        {
          uint64_t v144 = re::AssetHandle::loadedAsset<re::MaterialAsset>(v142);
          if (v144)
          {
            if ((*(unsigned char *)(v144 + 1730) & 0xFE) == 6)
            {
              uint64_t v145 = *(void *)(*(void *)(v429 + 8) + 712);
              if (v145) {
                *(unsigned char *)(v145 + 132) = 1;
              }
            }
            uint64_t v146 = *(void *)(v144 + 392);
            if (v146)
            {
              uint64_t v147 = *(void *)(v144 + 408);
              uint64_t v148 = v147 + 272 * v146;
              do
              {
                uint64_t v149 = 4 * *(void *)(v147 + 112) + 4;
                uint64_t v150 = v141;
                do
                {
                  uint64_t v141 = v150;
                  uint64_t v150 = 1;
                  v149 -= 4;
                }
                while (v149);
                v147 += 272;
              }
              while (v147 != v148);
            }
          }
          uint64_t v142 = (re::MaterialAsset *)((char *)v142 + 24);
        }
        while (v142 != v143);
        unint64_t v62 = v429;
        if (v141)
        {
          uint64_t v151 = *(void *)(*(void *)&v442.var0 + 240);
          if (v151)
          {
            uint64_t v152 = *(void *)(v151 + 136);
            if (v152)
            {
              uint64_t v153 = (re::MaterialParameterBlock *)re::MaterialManager::getOrAddSystemMaterialParameterBlock(v126[3], *(void *)(*(void *)&v442.var0 + 296));
              LODWORD(v441[0]) = *(_DWORD *)(v152 + 44);
              unint64_t v584 = 0x284C61CF2B0;
              re::MaterialParameterBlock::setConstant(v153, (uint64_t *)&v584, 4uLL, v441, 3, (uint64_t)v485);
              *(void *)v485 = 0;
              if (!v129)
              {
                if (re::DynamicInlineArray<__CVBuffer *,2ul>::ensureCapacity(v544, v154))
                {
                  uint64_t v155 = *(void *)&v544[0];
                  *((void *)&v544[1] + *(void *)&v544[0]) = v153;
                  *(void *)&v544[0] = v155 + 1;
                  ++DWORD2(v544[0]);
                }
              }
            }
          }
        }
      }
      double v156 = (re::Allocator *)re::RenderManager::perFrameAllocator((re::RenderManager *)v126);
      if (*(void *)&v544[0])
      {
        if (*(void *)&v544[0] == 1) {
          uint64_t v157 = re::MaterialParameterBlock::deltaSynchronizedMaterialParameterTable(*(re::MaterialParameterBlock **)&v544[1], v156);
        }
        else {
          uint64_t v157 = (uint64_t)re::MaterialParameterBlock::copyParametersFromArray(v156, &v544[1], *(uint64_t *)&v544[0]);
        }
        uint64_t v394 = v157;
      }
      else
      {
        uint64_t v394 = 0;
      }
      uint64_t v158 = *(void *)(v78 + 232);
      uint64_t v379 = *(void *)(v158 + 16);
      uint64_t v378 = *(void *)(v158 + 8);
      uint64_t v376 = *(void *)(v158 + 32);
      uint64_t v377 = *(void *)(v158 + 40);
      uint64_t v374 = *(void *)(v158 + 64);
      uint64_t v375 = *(void *)(v158 + 80);
      char v373 = *(unsigned char *)(v158 + 88);
      int v159 = (re::ecs2::BillboardService *)((char *)v462 + 32);
      uint64_t v160 = re::ecs2::EntityComponentCollection::get((re::ecs2::BillboardService *)((char *)v462 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
      unint64_t v161 = *((unsigned __int16 *)re::ecs2::ComponentImpl<re::ecs2::VideoComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
             + 8);
      if (*((void *)v426 + 28) > v161)
      {
        uint64_t v162 = *(void *)(*((void *)v426 + 30) + 8 * v161);
        if (v162)
        {
          if (!v160)
          {
            if (*(void *)(v162 + 24))
            {
              uint64_t v160 = re::ecs2::ImageBasedReflectionSystem::findReflectionContentComponent(v426, 0);
              if (v160)
              {
                uint64_t v163 = v160;
                uint64_t v160 = re::ecs2::EntityComponentCollection::get(v159, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ImageBasedReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
                if (v160) {
                  uint64_t v160 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(*(void *)(v163 + 16) + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
                }
              }
            }
          }
        }
      }
      uint64_t v164 = *(void *)(v78 + 232);
      int v393 = *(unsigned __int8 *)(v164 + 240);
      if (*(unsigned char *)(v164 + 240)) {
        uint64_t v369 = *(void *)(v164 + 248);
      }
      uint64_t v391 = v160;
      char v417 = *(unsigned char *)(v78 + 192);
      long long v455 = *(_OWORD *)(v78 + 208);
      uint64_t v165 = *(void *)(*(void *)(v62 + 8) + 656);
      if (v165)
      {
        LODWORD(v166) = (*(uint64_t (**)(uint64_t, re::ecs2::BillboardService *))(*(void *)v165 + 24))(v165, v462);
        uint64_t v168 = v167;
        float v169 = v166;
      }
      else
      {
        uint64_t v168 = 0;
        float v169 = 1.0;
      }
      float v392 = v169;
      uint64_t v372 = re::ecs2::MeshComponentHelper::techniqueMappingOverlayNameHashForMeshScene((re::ecs2::MeshComponentHelper *)(HIDWORD(v425) & 1), v169);
      uint64_t v170 = v462;
      uint64_t v171 = (*(uint64_t (**)(void))(**(void **)(*(void *)(v62 + 8) + 664) + 16))(*(void *)(*(void *)(v62 + 8) + 664));
      float v172 = 1.0;
      if (*(void *)v171)
      {
        unint64_t v173 = 0x94D049BB133111EBLL
             * ((0xBF58476D1CE4E5B9 * ((unint64_t)v170 ^ ((unint64_t)v170 >> 30))) ^ ((0xBF58476D1CE4E5B9 * ((unint64_t)v170 ^ ((unint64_t)v170 >> 30))) >> 27));
        uint64_t v174 = *(unsigned int *)(*(void *)(v171 + 8) + 4 * ((v173 ^ (v173 >> 31)) % *(unsigned int *)(v171 + 24)));
        if (v174 != 0x7FFFFFFF)
        {
          uint64_t v175 = *(void *)(v171 + 16);
          while (*(re::ecs2::BillboardService **)(v175 + 32 * v174 + 16) != v170)
          {
            uint64_t v174 = *(_DWORD *)(v175 + 32 * v174 + 8) & 0x7FFFFFFF;
            if (v174 == 0x7FFFFFFF) {
              goto LABEL_209;
            }
          }
          float v172 = *(float *)(v175 + 32 * v174 + 24);
        }
      }
LABEL_209:
      if (*((void *)v462 + 31))
      {
        *(void *)&long long v390 = *(void *)(*(void *)(v78 + 232) + 232);
        *((void *)&v390 + 1) = *(void *)(*(void *)(v78 + 232) + 224);
      }
      else
      {
        long long v390 = 0uLL;
      }
      *(void *)v413 = *((void *)v462 + 37);
      uint64_t v176 = *(void *)(*(void *)(v62 + 8) + 680);
      *(void *)&v544[0] = v462;
      uint64_t v177 = (*(uint64_t (**)(uint64_t))(*(void *)v176 + 16))(v176);
      StringID v178 = (int *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(v177, (uint64_t *)v544);
      if (v178) {
        int v179 = *v178;
      }
      else {
        int v179 = 1;
      }
      int v389 = v179;
      unsigned int v388 = *(_DWORD *)(v78 + 144);
      float v180 = re::ecs2::MeshComponentHelper::environmentLightingWeightForMeshScene((unint64_t)v462, *(void *)(*(void *)(v62 + 8) + 672));
      uint64_t v181 = (*(uint64_t (**)(void, re::ecs2::RenderingSubsystem *))(**(void **)(*(void *)(v62 + 8)
                                                                                             + 696)
                                                                               + 24))(*(void *)(*(void *)(v62 + 8) + 696), v426);
      uint64_t v182 = re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(v181, (uint64_t *)&v462);
      uint64_t v410 = v168;
      if (v182 && (unint64_t v183 = re::ecs2::EntityHandle::resolve((id *)(*(void *)v182 + 32), (uint64_t)v426)) != 0) {
        uint64_t v383 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v183 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ImageBasedLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
      }
      else {
        uint64_t v383 = 0;
      }
      uint64_t v184 = *(void *)(*(void *)(v62 + 8) + 128);
      int v185 = (re::ecs2::BillboardService *)((char *)v462 + 32);
      uint64_t v186 = re::ecs2::EntityComponentCollection::get((re::ecs2::BillboardService *)((char *)v462 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ProjectiveShadowReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
      uint64_t v187 = re::ecs2::EntityComponentCollection::get(v185, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ShadowProxyComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
      if (v186) {
        BOOL v188 = v187 == 0;
      }
      else {
        BOOL v188 = 1;
      }
      char v189 = v188;
      char v387 = v189;
      if (v188)
      {
        char v386 = 0;
      }
      else
      {
        if (v184)
        {
          (*(void (**)(long long *__return_ptr, uint64_t, uint64_t, long long *))(*(void *)v184 + 72))(v544, v184, v187 + 32, &v458);
        }
        else
        {
          v544[0] = xmmword_23435FD50;
          v544[1] = xmmword_23435FD60;
          long long v545 = xmmword_23435FD80;
          long long v546 = xmmword_23435FBB0;
        }
        long long v585 = v544[0];
        long long v586 = v544[1];
        long long v587 = v545;
        long long v588 = v546;
        char v386 = 1;
      }
      StringID v190 = *(unsigned __int8 **)(v78 + 232);
      int v191 = v190[256];
      unint64_t v62 = v190[257];
      int v421 = v190[258];
      StringID v192 = (re::ecs2::BillboardService *)((char *)v462 + 32);
      unint64_t v35 = re::ecs2::EntityComponentCollection::get((re::ecs2::BillboardService *)((char *)v462 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ProjectiveShadowReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType) != 0;
      float32x4_t v193 = (unsigned __int8 *)re::ecs2::EntityComponentCollection::get(v192, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::GroundingShadowComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
      if (v193)
      {
        int v194 = v193[25];
        unint64_t v35 = v193[27];
        int v195 = (v193[26] << 8) | (v193[28] << 24);
      }
      else
      {
        int v194 = 0;
        int v195 = 16777472;
      }
      int v419 = v195;
      uint64_t v196 = re::ecs2::EntityComponentCollection::get((re::ecs2::BillboardService *)((char *)v462 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::DynamicLightShadowComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
      if (v196) {
        BOOL v197 = *(unsigned char *)(v196 + 25) != 0;
      }
      else {
        BOOL v197 = 1;
      }
      BOOL v385 = v197;
      uint64_t v370 = re::ecs2::EntityComponentCollection::get((re::ecs2::BillboardService *)((char *)v462 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SceneUnderstandingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
      BOOL v384 = v370 != 0;
      char v198 = (_anonymous_namespace_ *)re::ecs2::MeshComponentHelper::renderPassGroupDataForMeshScene((uint64_t)v462, 0, *(void *)(*(void *)(v429 + 8) + 728), *(unsigned __int8 *)(*(void *)(v78 + 232) + 259), (uint64_t)v465, *((void *)v427 + 46));
      uint64_t v199 = v198;
      v408.i16[0] = v200;
      if (*(void *)(v78 + 72))
      {
        uint64_t v201 = 0;
        unint64_t v84 = 0;
        do
        {
          char v198 = re::AssetHandle::isAnyDependencyMutated((re::AssetManager *)(*(void *)(v78 + 88) + v201), v544);
          if (LOBYTE(v544[0])) {
            BOOL v203 = BYTE1(v544[0]) == 0;
          }
          else {
            BOOL v203 = 1;
          }
          if (!v203)
          {
            if (v431.i64[1] <= v84) {
              goto LABEL_451;
            }
            atomic_store(1u, (unsigned __int8 *)(*(void *)(v431.i64[0] + 8 * v84) + 1369));
          }
          ++v84;
          v201 += 24;
        }
        while (v84 < *(void *)(v78 + 72));
      }
      int v204 = v194 & 0xFFFEFFFF | ((v35 & 1) << 16) | v419;
      if (v194 & 1 | v419 & 1) {
        *(unsigned char *)(v423 + 136) = 1;
      }
      char v205 = *(unsigned char *)(*(void *)(v78 + 232) + 259);
      uint64_t v68 = v380;
      if (v191)
      {
        v544[0] = v458;
        v544[1] = v459;
        long long v545 = (__int128)v460;
        long long v546 = v461;
        long long v206 = v455;
        float32x4_t v547 = v456;
        long long v548 = v457;
        *(unsigned char *)(v423 + 224) = 1;
        *(_OWORD *)&v485[7] = v206;
        unint64_t v207 = *(void *)(v423 + 152);
        unint64_t v208 = *(void *)(v423 + 160);
        uint64_t v209 = v410;
        uint64_t v210 = v199;
        if (v208 >= v207)
        {
          unint64_t v211 = v208 + 1;
          if (v207 < v208 + 1)
          {
            int v212 = v204;
            if (*(void *)(v423 + 144))
            {
              uint64_t v213 = 2 * v207;
              BOOL v56 = v207 == 0;
              unint64_t v214 = 8;
              if (!v56) {
                unint64_t v214 = v213;
              }
              if (v214 <= v211) {
                unint64_t v215 = v211;
              }
              else {
                unint64_t v215 = v214;
              }
              re::DynamicArray<re::BlurPlaneData>::setCapacity((void *)(v423 + 144), v215);
            }
            else
            {
              re::DynamicArray<re::BlurPlaneData>::setCapacity((void *)(v423 + 144), v211);
              ++*(_DWORD *)(v423 + 168);
            }
            int v204 = v212;
            uint64_t v68 = v380;
            uint64_t v209 = v410;
            uint64_t v210 = v199;
          }
          unint64_t v208 = *(void *)(v423 + 160);
        }
        uint64_t v223 = *(void *)(v423 + 176) + 144 * v208;
        *(_OWORD *)(v223 + 8ArcSharedObject::ArcSharedObject(this, 0) = v548;
        *(float32x4_t *)(v223 + 64) = v547;
        *(_OWORD *)(v223 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v546;
        *(_OWORD *)(v223 + 32) = v545;
        *(_OWORD *)uint64_t v223 = v544[0];
        *(_OWORD *)(v223 + 16) = v544[1];
        *(void *)(v223 + 96) = *(void *)v413;
        *(unsigned char *)(v223 + 104) = v417;
        *(_OWORD *)(v223 + 105) = *(_OWORD *)v485;
        *(void *)(v223 + 12ArcSharedObject::ArcSharedObject(this, 0) = *(void *)&v485[15];
        *(unsigned char *)(v223 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 28) = v62;
        *(unsigned char *)(v223 + 129) = v421;
        ++*(void *)(v423 + 160);
        ++*(_DWORD *)(v423 + 168);
      }
      else
      {
        uint64_t v209 = v410;
        uint64_t v210 = v199;
        if (v421)
        {
          v544[0] = (__int128)v456;
          v544[1] = v457;
          long long v545 = v458;
          long long v546 = v459;
          float32x4_t v547 = (float32x4_t)v460;
          long long v548 = v461;
          *(_OWORD *)&v485[15] = v455;
          unint64_t v216 = *(void *)(v423 + 192);
          unint64_t v217 = *(void *)(v423 + 200);
          if (v217 >= v216)
          {
            unint64_t v218 = v217 + 1;
            if (v216 < v217 + 1)
            {
              int v219 = v204;
              if (*(void *)(v423 + 184))
              {
                uint64_t v220 = 2 * v216;
                BOOL v56 = v216 == 0;
                unint64_t v221 = 8;
                if (!v56) {
                  unint64_t v221 = v220;
                }
                if (v221 <= v218) {
                  unint64_t v222 = v218;
                }
                else {
                  unint64_t v222 = v221;
                }
                re::DynamicArray<re::BlurPlaneData>::setCapacity((void *)(v423 + 184), v222);
              }
              else
              {
                re::DynamicArray<re::BlurPlaneData>::setCapacity((void *)(v423 + 184), v218);
                ++*(_DWORD *)(v423 + 208);
              }
              int v204 = v219;
              uint64_t v68 = v380;
              uint64_t v209 = v410;
              uint64_t v210 = v199;
            }
            unint64_t v217 = *(void *)(v423 + 200);
          }
          uint64_t v269 = *(void *)(v423 + 216) + 144 * v217;
          *(_OWORD *)(v269 + 16) = v544[1];
          *(_OWORD *)uint64_t v269 = v544[0];
          *(_OWORD *)(v269 + 8ArcSharedObject::ArcSharedObject(this, 0) = v548;
          *(float32x4_t *)(v269 + 64) = v547;
          *(_OWORD *)(v269 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v546;
          *(_OWORD *)(v269 + 32) = v545;
          *(unsigned char *)(v269 + 96) = v417;
          *(_OWORD *)(v269 + 97) = *(_OWORD *)v485;
          *(_OWORD *)(v269 + 112) = *(_OWORD *)&v485[15];
          *(void *)(v269 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 28) = *(void *)v413;
          ++*(void *)(v423 + 200);
          ++*(_DWORD *)(v423 + 208);
          if (!v62) {
            goto LABEL_275;
          }
LABEL_274:
          *(unsigned char *)(v423 + 225) = 1;
          goto LABEL_275;
        }
      }
      if (v62) {
        goto LABEL_274;
      }
LABEL_275:
      int v411 = v204;
      char v382 = v204 & 1;
      uint64_t v224 = *((void *)v462 + 26);
      v452[0] = &v466;
      v452[1] = v406;
      v452[2] = &v456;
      v452[3] = &v458;
      v452[4] = v209;
      v452[5] = v210;
      char v453 = v408.i8[0] & 1;
      char v454 = v205;
      float32x4_t v225 = re::ecs2::MeshComponentHelper::addRenderPassGroupBoundsTable((uint64_t)v452);
      unint64_t v62 = v429;
      __int16 v381 = (*(uint64_t (**)(void, re::ecs2::BillboardService *, float32x4_t))(**(void **)(*(void *)(v429 + 8) + 688)
                                                                                          + 24))(*(void *)(*(void *)(v429 + 8) + 688), v462, v225);
      if (!v224)
      {
        char var0 = 0;
        *(unsigned char *)&v442.char var0 = 0;
        uint64_t v249 = *(void *)(v429 + 8);
        if (!*(void *)(v249 + 136)) {
          goto LABEL_364;
        }
        uint64_t v250 = v391;
        if ((((v422 ^ 0x180197E) & ~HIDWORD(v422) | HIDWORD(v422) & v422) & 0x80) != 0)
        {
          uint64_t v251 = *(void *)(v249 + 728);
          *(void *)v485 = *(void *)(v249 + 672);
          *(void *)&v485[8] = v251;
          *(_OWORD *)&v485[16] = *(_OWORD *)(v249 + 648);
          *(void *)&v485[32] = v428;
          v486 = v462;
          uint64_t v487 = v391;
          uint64_t v488 = v383;
          uint64_t v489 = v370;
          uint64_t v490 = 0;
          char v491 = 0;
          uint64_t v492 = 0;
          uint64_t v493 = 0;
          uint64_t v252 = *(void *)(v405 + 8);
          uint64_t v492 = *(void *)(v405 + 16);
          uint64_t v493 = v252;
          uint64_t v512 = v209;
          v517 = v199;
          uint64_t v519 = *((void *)v427 + 46);
          int v520 = (v422 ^ 0x180197E) & ~HIDWORD(v422) | HIDWORD(v422) & v422;
          uint64_t v494 = v403;
          uint64_t v495 = v401;
          uint64_t v496 = v402;
          simd_float3 v497 = v431;
          uint64_t v498 = v400;
          uint64_t v499 = v399;
          uint64_t v500 = v398;
          uint64_t v501 = v397;
          uint64_t v502 = v396;
          uint64_t v503 = v395;
          v504 = v119;
          unint64_t v505 = v37;
          uint64_t v506 = v394;
          long long v507 = v390;
          v508 = &v456;
          uint64_t v509 = v404;
          v510 = &v458;
          float v511 = v392;
          float v513 = v172;
          unsigned int v514 = v388;
          int v515 = v389;
          __int16 v516 = v381;
          v518 = v465;
          uint64_t v521 = v422;
          char v522 = v393;
          if (v393) {
            uint64_t v523 = v369;
          }
          char v524 = v417;
          v525 = &v455;
          int v526 = v368;
          char v527 = v386;
          if ((v387 & 1) == 0)
          {
            long long v528 = v585;
            long long v529 = v586;
            long long v530 = v587;
            long long v531 = v588;
          }
          char v532 = 0;
          char v533 = v408.i8[0] & 1;
          char v534 = v205;
          char v535 = v408.i8[1] & 1;
          char v536 = v382;
          char v537 = BYTE1(v419) & 1;
          char v538 = BYTE2(v411) & 1;
          BOOL v539 = (v411 & 0xFF000000) != 0;
          BOOL v540 = v385;
          char v541 = v421;
          BOOL v542 = v370 != 0;
          v543 = &v466;
          uint64_t v253 = v484;
          uint64_t v254 = (*(uint64_t (**)(uint64_t, re::ecs2::Scene *))(*(void *)v484 + 32))(v484, v406);
          unint64_t v35 = v254;
          unint64_t v62 = *(unsigned int *)(v254 + 32);
          if (v62)
          {
            uint64_t v256 = 0;
            float32x4_t v257 = (int *)(*(void *)(v254 + 16) + 8);
            while (1)
            {
              int v258 = *v257;
              v257 += 6;
              if (v258 < 0) {
                break;
              }
              if (v62 == ++v256)
              {
                LODWORD(v256) = *(_DWORD *)(v254 + 32);
                break;
              }
            }
          }
          else
          {
            LODWORD(v256) = 0;
          }
          if (v62 != v256)
          {
            uint64_t v261 = v256;
            uint64_t v262 = *(void *)(v254 + 16);
            do
            {
              float32x4_t v263 = *(re::ecs2::Scene **)(v262 + 24 * v261 + 16);
              if (!v263) {
                goto LABEL_452;
              }
              (*(void (**)(long long *__return_ptr, uint64_t, void))(*(void *)v253 + 8))(v544, v253, *((void *)v263 + 2));
              if (LOBYTE(v544[0])) {
                float32x4_t v264 = (re::ecs2::Scene *)*((void *)&v544[0] + 1);
              }
              else {
                float32x4_t v264 = 0;
              }
              uint64_t v265 = re::HashTable<unsigned long long,re::ecs2::MeshComponentStateImpl::processUpdatingComponents(re::ecs2::System::UpdateContext const&,re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent> *,re::ecs2::ComponentBuckets<re::ecs2::MeshComponent>::BucketIteration,void *)::PerWorldData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)&v470, (unint64_t)v264);
              if (v265)
              {
                long long v266 = (_anonymous_namespace_ *)v265;
                v441[0] = v263;
                v441[1] = v264;
                v441[2] = (re::ecs2::Scene *)&v442;
                re::ecs2::MeshComponentHelper::generateSceneForPortalCrossing((unint64_t)v485, (float32x4_t **)v441, (uint64_t)v544);
                if (LOBYTE(v544[0]))
                {
                  if (!*(void *)v266 || (re::DynamicArray<re::MeshScene>::add(v266, &v544[1]), LOBYTE(v544[0])))
                  {
                    if (*((void *)&v564 + 1))
                    {
                      if (*((void *)&v560 + 1)) {
                        *((void *)&v560 + 1) = 0;
                      }
                      uint64_t v255 = v560;
                      if ((void)v560) {
                        (*(void (**)(void))(**((void **)&v564 + 1) + 40))();
                      }
                    }
                  }
                }
              }
              uint64_t v262 = *(void *)(v35 + 16);
              if (*(_DWORD *)(v35 + 32) <= (v256 + 1)) {
                int v267 = v256 + 1;
              }
              else {
                int v267 = *(_DWORD *)(v35 + 32);
              }
              while (1)
              {
                uint64_t v261 = (v256 + 1);
                if (v267 - 1 == v256) {
                  break;
                }
                LODWORD(v256) = v256 + 1;
                int v268 = v261;
                if ((*(_DWORD *)(v262 + 24 * v261 + 8) & 0x80000000) != 0) {
                  goto LABEL_334;
                }
              }
              int v268 = v267;
LABEL_334:
              LODWORD(v256) = v268;
            }
            while (v62 != v268);
          }
          char var0 = (char)v442.var0;
          unint64_t v62 = v429;
          goto LABEL_364;
        }
LABEL_365:
        v434[0] = v462;
        v434[1] = v250;
        v434[2] = v383;
        int v435 = v368;
        uint64_t v436 = ReflectionContentComponent;
        char v437 = v415;
        float v438 = v180;
        char v439 = var0;
        uint64_t v440 = v428;
        v312 = (re::LateLatch *)re::ecs2::MeshComponentHelper::dynamicFunctionConstantsForMeshScene((uint64_t)v485, (uint64_t)v434);
        v313 = v462;
        if (v462)
        {
          if (re::LateLatch::shouldApplyAnchorLateLatching(v312))
          {
            uint64_t v314 = *((void *)v313 + 30);
            v315 = (_anonymous_namespace_ *)v423;
            if (v314)
            {
              v313 = *(re::ecs2::BillboardService **)(v314 + 136);
              if (!v313)
              {
LABEL_375:
                *((void *)&v544[0] + 1) = 0;
                uint64_t v316 = *(void *)(v405 + 8);
                *(void *)&v544[0] = *(void *)(v405 + 16);
                *((void *)&v544[0] + 1) = v316;
                *(void *)&v544[1] = v403;
                *((void *)&v544[1] + 1) = v401;
                long long v546 = v458;
                float32x4_t v547 = (float32x4_t)v459;
                long long v548 = (__int128)v460;
                long long v549 = v461;
                *(void *)&long long v545 = v402;
                simd_float3 v550 = v431;
                *(void *)&long long v551 = v379;
                *((void *)&v551 + 1) = v378;
                v552.i64[0] = v377;
                v552.i64[1] = v376;
                *(void *)&long long v553 = v375;
                *((void *)&v553 + 1) = v374;
                LOBYTE(v5re::HashTable<unsigned long long,re::ecs2::RenderPassGroupBoundsInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)this + 54) = v373;
                *((void *)&v554 + 1) = v400;
                *(void *)&long long v555 = v399;
                *((void *)&v555 + 1) = v398;
                *(void *)&long long v556 = v397;
                *((void *)&v556 + 1) = v396;
                *(void *)&long long v557 = v395;
                *((void *)&v557 + 1) = v119;
                *(void *)&long long v558 = v37;
                *((void *)&v558 + 1) = v394;
                re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::HashBrown((uint64_t)&v559, (uint64_t *)v485);
                LODWORD(v564) = v425;
                BYTE8(v564) = v393;
                if (v393) {
                  *(void *)&long long v565 = v369;
                }
                long long v566 = v455;
                BYTE8(v565) = v417;
                uint64_t v567 = v372;
                *(float *)v568 = v392;
                *(float *)&v568[4] = v172;
                *(float *)&v568[8] = v180;
                *(_OWORD *)&v568[16] = v390;
                *(void *)&long long v569 = v422;
                *((void *)&v569 + 1) = *(void *)v413;
                LOWORD(v57ArcSharedObject::ArcSharedObject(this, 0) = v381;
                BYTE2(v57ArcSharedObject::ArcSharedObject(this, 0) = (_BYTE)v313;
                *(void *)((char *)&v570 + 4) = __PAIR64__(v388, v389);
                *(float32x4_t *)&v571[8] = v456;
                *(_OWORD *)&v571[24] = v457;
                *(void *)&v571[40] = v404;
                v571[56] = v442.var0;
                if (v442.var0)
                {
                  *(_OWORD *)&v571[72] = v443;
                  long long v572 = v444;
                }
                *(void *)&long long v573 = 0;
                LOBYTE(v574) = v386;
                if ((v387 & 1) == 0)
                {
                  long long v575 = v585;
                  long long v576 = v586;
                  long long v577 = v587;
                  long long v578 = v588;
                }
                LOBYTE(v579) = v421;
                BYTE1(v579) = v382;
                BYTE2(v579) = BYTE1(v419) & 1;
                BYTE3(v579) = BYTE2(v411) & 1;
                BYTE4(v579) = (v411 & 0xFF000000) != 0;
                *(_WORD *)((char *)&v579 + 5) = v385;
                BYTE7(v579) = v384;
                if (*(void *)v315) {
                  re::DynamicArray<re::MeshScene>::add(v315, v544);
                }
                if (*((void *)&v563 + 1))
                {
                  if (*((void *)&v559 + 1)) {
                    *((void *)&v559 + 1) = 0;
                  }
                  if ((void)v559) {
                    (*(void (**)(void))(**((void **)&v563 + 1) + 40))();
                  }
                }
                if (v488)
                {
                  if (*(void *)&v485[8]) {
                    *(void *)&v485[8] = 0;
                  }
                  if (*(void *)v485) {
                    (*(void (**)(void))(*(void *)v488 + 40))();
                  }
                }
                goto LABEL_393;
              }
              if (re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(*((void *)v313 + 2) + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AnchoringComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)&& *((unsigned char *)v313 + 184))
              {
                LOBYTE(v3re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 13) = re::LateLatchingManager::trackAnchorPose(*(os_unfair_lock_s **)(v366 + 160), *((void *)v313 + 24), *(void *)(*(void *)(v366 + 136) + 24) & 0xFFFFFFFFFFFFFFFLL, (long long *)v313 + 3);
                goto LABEL_375;
              }
            }
            LOBYTE(v3re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 13) = 0;
            goto LABEL_375;
          }
          LOBYTE(v3re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 13) = 0;
        }
        v315 = (_anonymous_namespace_ *)v423;
        goto LABEL_375;
      }
      v441[0] = 0;
      v441[0] = (re::ecs2::Scene *)re::ecs2::PortalComponent::targetWorldRootToken(v224, *(void *)(*(void *)(v429 + 8) + 40));
      if (v441[0] != v406)
      {
        re::ecs2::WorldRootProvider::worldIds((re::ecs2::WorldRootProvider *)&v484, (uint64_t)v544);
        if (v550.i32[3])
        {
          BOOL v226 = re::HashSetBase<re::WeakStringID,re::WeakStringID,re::internal::ValueAsKey<re::WeakStringID>,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::contains((uint64_t)&v549, (uint64_t *)v441);
          re::SmallHashSet<unsigned long long,8ul,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false>::~SmallHashSet((uint64_t)v544);
          if (v226) {
            goto LABEL_279;
          }
        }
        else
        {
          uint64_t v259 = *(void *)&v544[1];
          if (*(void *)&v544[1])
          {
            uint64_t v260 = 0;
            while (*(re::ecs2::Scene **)((char *)&v544[2] + v260) != v441[0])
            {
              v260 += 8;
              if (8 * *(void *)&v544[1] == v260) {
                goto LABEL_309;
              }
            }
            re::SmallHashSet<unsigned long long,8ul,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false>::~SmallHashSet((uint64_t)v544);
            if (v260 == 8 * v259) {
              goto LABEL_393;
            }
LABEL_279:
            re::ecs2::RenderingSubsystem::nonOwningStreamNameForWorldRoot(v426, v441[0], (re::DynamicString **)v427, &v442);
            v590.columns[1] = (simd_float3)v459;
            v590.columns[2] = v460;
            v590.columns[0] = (simd_float3)v458;
            simd_float3x3 v591 = __invert_f3(v590);
            int32x4_t v227 = vdupq_laneq_s32((int32x4_t)v591.columns[1], 2);
            float32x4_t v228 = (float32x4_t)vzip1q_s32(vzip1q_s32((int32x4_t)v591.columns[0], (int32x4_t)v591.columns[2]), (int32x4_t)v591.columns[1]);
            v591.columns[1] = (simd_float3)vtrn2q_s32((int32x4_t)v591.columns[0], (int32x4_t)v591.columns[1]);
            v591.columns[1].i32[2] = v591.columns[2].i32[1];
            float32x4_t v229 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v228, COERCE_FLOAT(*(_OWORD *)(v224 + 80))), (float32x4_t)v591.columns[1], *(float32x2_t *)(v224 + 80), 1), (float32x4_t)vzip1q_s32(vzip2q_s32((int32x4_t)v591.columns[0], (int32x4_t)v591.columns[2]), v227), *(float32x4_t *)(v224 + 80), 2);
            v591.columns[1] = (simd_float3)vmulq_f32(v229, v229);
            LODWORD(v23ArcSharedObject::ArcSharedObject(this, 0) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v591.columns[1], 2), vaddq_f32((float32x4_t)v591.columns[1], (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v591.columns[1].f32, 1))).u32[0];
            float32x4_t v231 = (float32x4_t)xmmword_234382760;
            if (fabsf(v230) >= 1.0e-10)
            {
              float v232 = v230;
              float32x2_t v233 = vrsqrte_f32((float32x2_t)LODWORD(v230));
              float32x2_t v234 = vmul_f32(v233, vrsqrts_f32((float32x2_t)LODWORD(v232), vmul_f32(v233, v233)));
              float32x4_t v231 = vmulq_n_f32(vnegq_f32(v229), vmul_f32(v234, vrsqrts_f32((float32x2_t)LODWORD(v232), vmul_f32(v234, v234))).f32[0]);
            }
            float32x4_t v407 = *(float32x4_t *)(v224 + 64);
            int8x16_t v409 = (int8x16_t)v231;
            float32x4_t v362 = (float32x4_t)v458;
            float32x4_t v363 = (float32x4_t)v459;
            float32x4_t v371 = (float32x4_t)v460;
            float32x4_t v364 = (float32x4_t)v461;
            v445[0] = v462;
            v445[1] = v391;
            v445[2] = v383;
            int v446 = v368;
            uint64_t v447 = ReflectionContentComponent;
            char v448 = v415;
            float v449 = v180;
            char v450 = 0;
            uint64_t v451 = v428;
            re::ecs2::MeshComponentHelper::dynamicFunctionConstantsForMeshScene((uint64_t)v485, (uint64_t)v445);
            re::StringID::StringID((re::StringID *)v544, &v442);
            *(void *)&v544[1] = *(void *)v413;
            long long v545 = 0uLL;
            uint64_t v235 = *(void *)(v405 + 8);
            *(void *)&long long v545 = *(void *)(v405 + 16);
            *((void *)&v545 + 1) = v235;
            *(void *)&long long v546 = v403;
            *((void *)&v546 + 1) = v401;
            long long v548 = v458;
            long long v549 = v459;
            simd_float3 v550 = v460;
            long long v551 = v461;
            v547.i64[0] = v402;
            simd_float3 v552 = v431;
            *(void *)&long long v553 = v379;
            *((void *)&v553 + 1) = v378;
            *(void *)&long long v554 = v377;
            *((void *)&v554 + 1) = v376;
            *(void *)&long long v555 = v375;
            *((void *)&v555 + 1) = v374;
            LOBYTE(v556) = v373;
            *((void *)&v556 + 1) = v400;
            *(void *)&long long v557 = v399;
            *((void *)&v557 + 1) = v398;
            *(void *)&long long v558 = v397;
            *((void *)&v558 + 1) = v396;
            *(void *)&long long v559 = v395;
            *((void *)&v559 + 1) = v119;
            *(void *)&long long v560 = v37;
            *((void *)&v560 + 1) = v394;
            uint64_t v236 = (_anonymous_namespace_ *)re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::HashBrown((uint64_t)&v561, (uint64_t *)v485);
            LODWORD(v566) = v425;
            BYTE8(v566) = v393;
            unint64_t v237 = v423;
            if (v393) {
              uint64_t v567 = v369;
            }
            v568[0] = v417;
            *(_OWORD *)&v568[8] = v455;
            *(void *)&v568[24] = v372;
            *(void *)&long long v569 = __PAIR64__(LODWORD(v172), LODWORD(v392));
            *((float *)&v569 + 2) = v180;
            long long v570 = v390;
            *(void *)v571 = v422;
            *(void *)&v571[8] = *(void *)v413;
            *(_WORD *)&v571[16] = v381;
            v571[18] = 0;
            *(_DWORD *)&v571[20] = v389;
            *(_DWORD *)&v571[24] = v388;
            int8x16_t v238 = (int8x16_t)v457;
            *(float32x4_t *)&v571[40] = v456;
            *(_OWORD *)&v571[56] = v457;
            *(void *)&v571[72] = v404;
            LOBYTE(v572) = 0;
            *(void *)&long long v575 = 0;
            LOBYTE(v576) = v386;
            if ((v387 & 1) == 0)
            {
              long long v577 = v585;
              long long v578 = v586;
              int8x16_t v238 = (int8x16_t)v587;
              long long v579 = v587;
              long long v580 = v588;
            }
            v238.i32[0] = 0;
            float32x4_t v239 = vaddq_f32(v364, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v362, v407.f32[0]), v363, *(float32x2_t *)v407.f32, 1), v371, v407, 2));
            float32x4_t v240 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v239, 3);
            int8x16_t v241 = (int8x16_t)vdivq_f32(v239, v240);
            LOBYTE(v581) = v421;
            BYTE1(v581) = v382;
            BYTE2(v581) = BYTE1(v419) & 1;
            BYTE3(v581) = BYTE2(v411) & 1;
            BYTE4(v581) = (v411 & 0xFF000000) != 0;
            *(_WORD *)((char *)&v581 + 5) = v385;
            HIBYTE(v581) = v384;
            v240.i8[0] = *(unsigned char *)(v224 + 128);
            int8x16_t v242 = vbslq_s8(vdupq_lane_s8((int8x8_t)*(_OWORD *)&vceqq_s8((int8x16_t)v240, v238), 0), (int8x16_t)0, v409);
            int8x16_t v582 = v242;
            v242.i8[0] = *(unsigned char *)(v224 + 128);
            *(int8x16_t *)v583 = vbslq_s8(vdupq_lane_s8((int8x8_t)*(_OWORD *)&vceqq_s8(v242, v238), 0), (int8x16_t)0, v241);
            v583[16] = *(unsigned char *)(v224 + 128);
            *(_WORD *)&v583[17] = *(_WORD *)(v224 + 129);
            unint64_t v244 = *(void *)(v423 + 104);
            unint64_t v243 = *(void *)(v423 + 112);
            if (v243 >= v244)
            {
              unint64_t v245 = v243 + 1;
              if (v244 < v243 + 1)
              {
                if (*(void *)(v423 + 96))
                {
                  unint64_t v246 = 2 * v244;
                  if (!v244) {
                    unint64_t v246 = 8;
                  }
                  if (v246 <= v245) {
                    unint64_t v247 = v245;
                  }
                  else {
                    unint64_t v247 = v246;
                  }
                  re::DynamicArray<re::StencilPortal>::setCapacity((void *)(v423 + 96), v247);
                }
                else
                {
                  re::DynamicArray<re::StencilPortal>::setCapacity((void *)(v423 + 96), v245);
                  ++*(_DWORD *)(v423 + 120);
                }
                unint64_t v237 = v423;
              }
              unint64_t v243 = *(void *)(v237 + 112);
            }
            uint64_t v270 = *(void *)(v237 + 128);
            uint64_t v271 = v270 + 736 * v243;
            char v272 = v544[0];
            *(void *)uint64_t v271 = *(void *)v271 & 0xFFFFFFFFFFFFFFFELL | v544[0] & 1;
            *(void *)uint64_t v271 = *(void *)&v544[0] & 0xFFFFFFFFFFFFFFFELL | v272 & 1;
            *(void *)(v271 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = *((void *)&v544[0] + 1);
            *((void *)&v544[0] + 1) = "";
            *(void *)&v544[0] = 0;
            *(void *)(v271 + 16) = *(void *)&v544[1];
            long long v273 = v553;
            long long v274 = v554;
            long long v275 = v556;
            *(_OWORD *)(v271 + 192) = v555;
            *(_OWORD *)(v271 + 20re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v275;
            *(_OWORD *)(v271 + 1re::HashTable<re::ecs2::Entity const*,re::ecs2::BillboardData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::deinit((uint64_t *)this + 60) = v273;
            *(_OWORD *)(v271 + 176) = v274;
            long long v276 = v549;
            simd_float3 v277 = v550;
            simd_float3 v278 = v552;
            *(_OWORD *)(v271 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 28) = v551;
            *(simd_float3 *)(v271 + 144) = v278;
            *(_OWORD *)(v271 + 96) = v276;
            *(simd_float3 *)(v271 + 112) = v277;
            long long v279 = v545;
            long long v280 = v546;
            long long v281 = v548;
            *(float32x4_t *)(v271 + 64) = v547;
            *(_OWORD *)(v271 + 8ArcSharedObject::ArcSharedObject(this, 0) = v281;
            *(_OWORD *)(v271 + 32) = v279;
            *(_OWORD *)(v271 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v280;
            long long v282 = v557;
            long long v283 = v558;
            long long v284 = v560;
            *(_OWORD *)(v271 + 256) = v559;
            *(_OWORD *)(v271 + re::DynamicArray<re::TraceEntry>::deinit((uint64_t)this + 272) = v284;
            *(_OWORD *)(v271 + 224) = v282;
            *(_OWORD *)(v271 + 24ArcSharedObject::ArcSharedObject(this, 0) = v283;
            *(_OWORD *)(v271 + 32ArcSharedObject::ArcSharedObject(this, 0) = 0u;
            *(_OWORD *)(v271 + 336) = 0u;
            *(_OWORD *)(v271 + 28re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0u;
            *(_OWORD *)(v271 + 304) = 0u;
            uint64_t v285 = *(void *)(v271 + 344);
            *(void *)(v271 + 344) = *((void *)&v565 + 1);
            *((void *)&v565 + 1) = v285;
            uint64_t v286 = *(void *)(v271 + 288);
            *(void *)(v271 + 28re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v561;
            uint64_t v561 = v286;
            uint64_t v287 = *(void *)(v271 + 296);
            *(void *)(v271 + 296) = v562;
            uint64_t v562 = v287;
            uint64_t v288 = *(void *)(v271 + 304);
            *(void *)(v271 + 304) = v563;
            *(void *)&long long v563 = v288;
            uint64_t v289 = *(void *)(v271 + 328);
            *(void *)(v271 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 28) = *((void *)&v564 + 1);
            *((void *)&v564 + 1) = v289;
            uint64_t v290 = *(void *)(v271 + 336);
            *(void *)(v271 + 336) = v565;
            *(void *)&long long v565 = v290;
            uint64_t v291 = *(void *)(v271 + 312);
            *(void *)(v271 + 312) = *((void *)&v563 + 1);
            *((void *)&v563 + 1) = v291;
            uint64_t v292 = *(void *)(v271 + 320);
            *(void *)(v271 + 32ArcSharedObject::ArcSharedObject(this, 0) = v564;
            *(void *)&long long v564 = v292;
            *(_DWORD *)(v271 + 352) = v566;
            LODWORD(v292) = BYTE8(v566);
            *(unsigned char *)(v271 + 3re::HashTable<re::ecs2::Entity const*,re::ecs2::BillboardData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::deinit((uint64_t *)this + 60) = BYTE8(v566);
            if (v292) {
              *(void *)(v270 + 736 * v243 + 36re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v567;
            }
            uint64_t v293 = v270 + 736 * v243;
            *(_OWORD *)(v293 + 376) = *(_OWORD *)v568;
            long long v294 = *(_OWORD *)&v568[16];
            long long v295 = v569;
            long long v296 = *(_OWORD *)v571;
            *(_OWORD *)(v293 + 424) = v570;
            *(_OWORD *)(v293 + 44ArcSharedObject::ArcSharedObject(this, 0) = v296;
            *(_OWORD *)(v293 + 392) = v294;
            *(_OWORD *)(v293 + 40re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v295;
            long long v297 = *(_OWORD *)&v571[16];
            long long v298 = *(_OWORD *)&v571[32];
            long long v299 = *(_OWORD *)&v571[64];
            *(_OWORD *)(v293 + 48re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = *(_OWORD *)&v571[48];
            *(_OWORD *)(v293 + 504) = v299;
            *(_OWORD *)(v293 + 456) = v297;
            *(_OWORD *)(v293 + 472) = v298;
            int v300 = v572;
            *(unsigned char *)(v293 + 5re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 28) = v572;
            if (v300)
            {
              long long v301 = v574;
              uint64_t v302 = v270 + 736 * v243;
              *(_OWORD *)(v302 + 544) = v573;
              *(_OWORD *)(v302 + 5re::HashTable<re::ecs2::Entity const*,re::ecs2::BillboardData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::deinit((uint64_t *)this + 60) = v301;
            }
            uint64_t v303 = v270 + 736 * v243;
            *(void *)(v303 + 576) = v575;
            int v304 = v576;
            *(unsigned char *)(v303 + 592) = v576;
            if (v304)
            {
              uint64_t v305 = (_OWORD *)(v270 + 736 * v243);
              long long v306 = v577;
              long long v307 = v578;
              long long v308 = v580;
              v305[40] = v579;
              v305[41] = v308;
              v305[38] = v306;
              v305[39] = v307;
            }
            uint64_t v309 = v270 + 736 * v243;
            *(void *)(v309 + 672) = v581;
            int8x16_t v310 = v582;
            long long v311 = *(_OWORD *)v583;
            *(_DWORD *)(v309 + 719) = *(_DWORD *)&v583[15];
            *(int8x16_t *)(v309 + 68re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v310;
            *(_OWORD *)(v309 + 704) = v311;
            ++*(void *)(v237 + 112);
            ++*(_DWORD *)(v237 + 120);
            if (*((void *)&v565 + 1))
            {
              if (v562) {
                uint64_t v562 = 0;
              }
              if (v561)
              {
                (*(void (**)(void))(**((void **)&v565 + 1) + 40))();
                uint64_t v561 = 0;
              }
              long long v564 = 0u;
              long long v565 = 0u;
              long long v563 = 0u;
            }
            re::StringID::destroyString((re::StringID *)v544);
            if (v488)
            {
              if (*(void *)&v485[8]) {
                *(void *)&v485[8] = 0;
              }
              if (*(void *)v485) {
                (*(void (**)(void))(*(void *)v488 + 40))();
              }
            }
            re::StringID::destroyString((re::StringID *)&v442);
            char var0 = 0;
            *(unsigned char *)&v442.char var0 = 0;
LABEL_364:
            uint64_t v250 = v391;
            goto LABEL_365;
          }
LABEL_309:
          re::SmallHashSet<unsigned long long,8ul,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false>::~SmallHashSet((uint64_t)v544);
        }
      }
LABEL_393:
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v464);
    }
    while ((void)v464 != v68 || WORD4(v464) != 0xFFFF || WORD5(v464) != 0xFFFF);
  }
  unsigned int v317 = v472;
  if (v472)
  {
    uint64_t v318 = 0;
    v319 = (_DWORD *)(v471 + 8);
    while ((*v319 & 0x80000000) == 0)
    {
      v319 += 64;
      if (v472 == ++v318)
      {
        LODWORD(v31re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v472;
        break;
      }
    }
  }
  else
  {
    LODWORD(v31re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
  }
  if (v472 != v318)
  {
    v320 = (re::RenderFrame *)((char *)v427 + 264);
    uint64_t v321 = v318;
    uint64_t v322 = v471;
    do
    {
      uint64_t v323 = v322 + (v321 << 8);
      re::ecs2::RenderingSubsystem::nonOwningStreamNameForWorldRoot(v426, *(const re::ecs2::Scene **)(v323 + 16), (re::DynamicString **)v427, &v584);
      if (*(void *)(v323 + 40))
      {
        *(void *)&v544[0] = v584 >> 1;
        uint64_t v324 = **(void **)(re::RenderFrameData::stream(v320, (const re::WeakStringID *)v544) + 48);
        (*(void (**)(void))(v324 + 536))();
      }
      if (*(void *)(v323 + 104))
      {
        *(void *)&v544[0] = v584 >> 1;
        uint64_t v325 = **(void **)(re::RenderFrameData::stream(v320, (const re::WeakStringID *)v544) + 48);
        (*(void (**)(void))(v325 + 576))();
      }
      uint64_t v326 = v322 + (v321 << 8);
      if (*(void *)(v326 + 136))
      {
        *(void *)&v544[0] = v584 >> 1;
        uint64_t v327 = **(void **)(re::RenderFrameData::stream(v320, (const re::WeakStringID *)v544) + 48);
        (*(void (**)(void))(v327 + 816))();
      }
      *(void *)&v442.char var0 = v584 >> 1;
      uint64_t v328 = re::RenderFrameData::stream(v320, (const re::WeakStringID *)&v442);
      v329 = (uint64_t (**)(uint64_t, void, void, void *, void *))re::HashTable<std::type_index,re::RenderFrameDataArrayWrapper,re::Hash<std::type_index>,re::EqualTo<std::type_index>,true,false>::tryGet(v328, (uint64_t *)&v458);
      if (!v329)
      {
        uint64_t v330 = *(void *)(*(void *)(v328 + 48) + 8);
        uint64_t v331 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v330 + 32))(v330, 56, 8);
        *(void *)uint64_t v331 = 0;
        *(void *)(v331 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
        *(_DWORD *)(v331 + 16) = 1;
        *(void *)(v331 + 32) = 0;
        *(void *)(v331 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
        *(void *)(v331 + 24) = 0;
        *(_DWORD *)(v331 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
        v332 = (re *)re::BucketArray<re::GlobalDirectionalLightRenderFrameData,4ul>::init(v331, v330, 1uLL);
        *((void *)&v544[0] + 1) = v331;
        *(void *)&v544[0] = std::__any_imp::_SmallHandler<re::BucketArray<re::GlobalDirectionalLightRenderFrameData,4ul> *>::__handle[abi:nn180100];
        *((void *)&v546 + 1) = re::globalAllocators(v332)[2];
        v547.i64[0] = 0;
        v329 = (uint64_t (**)(uint64_t, void, void, void *, void *))re::HashTable<std::type_index,re::RenderFrameDataArrayWrapper,re::Hash<std::type_index>,re::EqualTo<std::type_index>,true,false>::addNew(v328, (uint64_t *)&v458, (re *)v544);
        if (v547.i64[0])
        {
          *(void *)v485 = v544;
          (*(void (**)(uint64_t, unsigned char *))(*(void *)v547.i64[0] + 16))(v547.i64[0], v485);
        }
        re::FunctionBase<24ul,void ()(re::RenderFrameDataArrayWrapper *)>::destroyCallable((uint64_t)&v545);
        if (*(void *)&v544[0]) {
          (*(void (**)(void, long long *, void, void, void))&v544[0])(0, v544, 0, 0, 0);
        }
      }
      uint64_t v335 = (uint64_t)*v333;
      char v336 = *(unsigned char *)(v326 + 160);
      unint64_t v37 = (*v333)[5];
      unint64_t v35 = (*v333)[1];
      if (v37 + 1 > 4 * v35)
      {
        re::BucketArray<re::GlobalDirectionalLightRenderFrameData,4ul>::setBucketsCapacity(*v333, (v37 + 4) >> 2);
        unint64_t v35 = *(void *)(v335 + 8);
      }
      unint64_t v62 = v37 >> 2;
      if (v35 <= v37 >> 2) {
        goto LABEL_453;
      }
      if (*(unsigned char *)(v335 + 16)) {
        uint64_t v337 = v335 + 24;
      }
      else {
        uint64_t v337 = *(void *)(v335 + 32);
      }
      uint64_t v338 = *(void *)(v337 + 8 * v62);
      unint64_t v339 = *(void *)(v335 + 40);
      *(void *)(v335 + 4ArcSharedObject::ArcSharedObject(this, 0) = v339 + 1;
      ++*(_DWORD *)(v335 + 48);
      *(unsigned char *)(v338 + (v37 & 3)) = v336;
      if (v339 == -1) {
        goto LABEL_454;
      }
      if (v35 <= v339 >> 2) {
        goto LABEL_455;
      }
      *(void *)&v544[0] = v584 >> 1;
      uint64_t v340 = **(void **)(re::RenderFrameData::stream(v320, (const re::WeakStringID *)v544) + 48);
      (*(void (**)(void))(v340 + 440))();
      re::StringID::destroyString((re::StringID *)&v584);
      uint64_t v322 = v471;
      if (v472 <= (int)v318 + 1) {
        unsigned int v341 = v318 + 1;
      }
      else {
        unsigned int v341 = v472;
      }
      while (1)
      {
        uint64_t v321 = (v318 + 1);
        if (v341 - 1 == v318) {
          break;
        }
        LODWORD(v31re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v318 + 1;
        unsigned int v342 = v321;
        if ((*(_DWORD *)(v471 + (v321 << 8) + 8) & 0x80000000) != 0) {
          goto LABEL_430;
        }
      }
      unsigned int v342 = v341;
LABEL_430:
      LODWORD(v31re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v342;
    }
    while (v317 != v342);
  }
  unsigned int v343 = v468;
  if (v468)
  {
    uint64_t v344 = 0;
    v345 = (int *)(v467 + 8);
    uint64_t v346 = v380;
    v347 = v426;
    v348 = v365;
    v349 = v427;
    while (1)
    {
      int v350 = *v345;
      v345 += 18;
      if (v350 < 0) {
        break;
      }
      if (v468 == ++v344)
      {
        LODWORD(v344) = v468;
        break;
      }
    }
  }
  else
  {
    LODWORD(v344) = 0;
    uint64_t v346 = v380;
    v347 = v426;
    v348 = v365;
    v349 = v427;
  }
  if (v468 != v344)
  {
    uint64_t v351 = v344;
    uint64_t v352 = v467;
    unsigned int v353 = v468;
    do
    {
      if (*(_DWORD *)(v352 + 72 * v351 + 52))
      {
        uint64_t v354 = v352 + 72 * v351;
        uint64_t v355 = v354 + 24;
        re::ecs2::RenderingSubsystem::nonOwningStreamNameForWorldRoot(v347, *(const re::ecs2::Scene **)(v354 + 16), (re::DynamicString **)v349, v544);
        (*(void (**)(_anonymous_namespace_ *, long long *, void, uint64_t))(*(void *)v348 + 40))(v348, v544, *((void *)v349 + 46), v355);
        re::StringID::destroyString((re::StringID *)v544);
        unsigned int v353 = v468;
        uint64_t v352 = v467;
      }
      if (v353 <= (int)v344 + 1) {
        unsigned int v356 = v344 + 1;
      }
      else {
        unsigned int v356 = v353;
      }
      while (1)
      {
        uint64_t v351 = (v344 + 1);
        if (v356 - 1 == v344) {
          break;
        }
        LODWORD(v344) = v344 + 1;
        unsigned int v357 = v351;
        if ((*(_DWORD *)(v352 + 72 * v351 + 8) & 0x80000000) != 0) {
          goto LABEL_448;
        }
      }
      unsigned int v357 = v356;
LABEL_448:
      LODWORD(v344) = v357;
    }
    while (v343 != v357);
  }
  BOOL v358 = *(_DWORD *)(v346 + 40) != 0;
  re::StringID::destroyString((re::StringID *)v465);
  re::HashTable<unsigned long long,re::HashTable<unsigned long long,re::ecs2::RenderPassGroupBoundsInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)&v466);
  re::HashTable<unsigned long long,re::ecs2::MeshComponentStateImpl::processUpdatingComponents(re::ecs2::System::UpdateContext const&,re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent> *,re::ecs2::ComponentBuckets<re::ecs2::MeshComponent>::BucketIteration,void *)::PerWorldData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::~HashTable((uint64_t *)&v470);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(v474);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(v477);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)&v480);
  return v358;
}

uint64_t re::HashTable<unsigned long long,re::ecs2::MeshComponentStateImpl::processUpdatingComponents(re::ecs2::System::UpdateContext const&,re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent> *,re::ecs2::ComponentBuckets<re::ecs2::MeshComponent>::BucketIteration,void *)::PerWorldData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(uint64_t a1, unint64_t a2)
{
  if (!*(void *)a1) {
    return 0;
  }
  unint64_t v2 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
  uint64_t v3 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * ((v2 ^ (v2 >> 31)) % *(unsigned int *)(a1 + 24)));
  if (v3 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 16);
  if (*(void *)(v5 + (v3 << 8) + 16) != a2)
  {
    while (1)
    {
      uint64_t v3 = *(_DWORD *)(v5 + (v3 << 8) + 8) & 0x7FFFFFFF;
      if (v3 == 0x7FFFFFFF) {
        break;
      }
      if (*(void *)(v5 + (v3 << 8) + 16) == a2) {
        return v5 + (v3 << 8) + 24;
      }
    }
    return 0;
  }
  return v5 + (v3 << 8) + 24;
}

unint64_t re::ecs2::MeshComponentHelper::clippingDataForMeshScene(uint64_t a1, const re::ecs2::MeshComponent *a2, float32x4_t *a3, uint64_t a4)
{
  uint64_t v16 = a1;
  if (a4)
  {
    uint64_t v7 = *(re::ecs2 **)(a1 + 176);
    if (v7) {
      char v8 = re::ecs2::containsShaderGraphMaterialWithModelPositionOffset(v7, a2);
    }
    else {
      char v8 = 0;
    }
    uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)a4 + 16))(a4);
    int v14 = (float32x4_t *)re::HashTable<re::ecs2::Entity const*,re::ecs2::ClippingParameterData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(v13, &v16);
    unint64_t v9 = re::ecs2::MeshComponentHelper::clippingDataForClippingParameterData(v14, (uint64_t)a2, a3, a4, v8);
    unint64_t v10 = v9 >> 16;
    unsigned __int8 v11 = BYTE4(v9);
    uint64_t v12 = BYTE5(v9);
  }
  else
  {
    LOWORD(v9) = 0;
    LOWORD(v1ArcSharedObject::ArcSharedObject(this, 0) = 0;
    unsigned __int8 v11 = 0;
    uint64_t v12 = 0;
  }
  return ((unint64_t)v11 << 32) | (v12 << 40) | ((unint64_t)(unsigned __int16)v10 << 16) | (unsigned __int16)v9;
}

float re::ecs2::MeshComponentHelper::environmentLightingWeightForMeshScene(unint64_t a1, uint64_t a2)
{
  float v2 = 1.0;
  if (a2)
  {
    uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
    if (*(void *)v4)
    {
      unint64_t v5 = 0x94D049BB133111EBLL
         * ((0xBF58476D1CE4E5B9 * (a1 ^ (a1 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a1 ^ (a1 >> 30))) >> 27));
      uint64_t v6 = *(unsigned int *)(*(void *)(v4 + 8) + 4 * ((v5 ^ (v5 >> 31)) % *(unsigned int *)(v4 + 24)));
      if (v6 != 0x7FFFFFFF)
      {
        uint64_t v7 = *(void *)(v4 + 16);
        if (*(void *)(v7 + 32 * v6 + 16) == a1)
        {
          return *(float *)(v7 + 32 * v6 + 24);
        }
        else
        {
          while (1)
          {
            uint64_t v6 = *(_DWORD *)(v7 + 32 * v6 + 8) & 0x7FFFFFFF;
            if (v6 == 0x7FFFFFFF) {
              break;
            }
            if (*(void *)(v7 + 32 * v6 + 16) == a1) {
              return *(float *)(v7 + 32 * v6 + 24);
            }
          }
        }
      }
    }
  }
  return v2;
}

uint64_t re::ecs2::MeshComponentHelper::renderPassGroupDataForMeshScene(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v15 = a1;
  if (!a3) {
    return 0;
  }
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 16))(a3);
  uint64_t v12 = re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(v11, &v15);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t))(*(void *)a3 + 56))(a3, v15, a5, a6, 0, a4)|| v12 == 0)
  {
    return 0;
  }
  if (a2) {
    return 0;
  }
  return *(void *)v12;
}

unint64_t re::ecs2::MeshComponentHelper::generateSceneForPortalCrossing@<X0>(unint64_t result@<X0>, float32x4_t **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v139 = *MEMORY[0x263EF8340];
  if (!(*a2)[8].i8[3]) {
    goto LABEL_17;
  }
  unint64_t v5 = result;
  uint64_t v6 = (*a2)[1].i64[0];
  re::ecs2::TransformComponent::worldMatrix4x4F((re::ecs2::TransformComponent **)v6, (const re::ecs2::Entity *)1, &v100);
  uint64_t v7 = (float32x2_t *)*a2;
  v140.columns[0] = (simd_float3)v100;
  v140.columns[1] = (simd_float3)v101;
  v140.columns[2] = (simd_float3)v102;
  float32x4_t v82 = vaddq_f32(v103, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v100, COERCE_FLOAT(*(_OWORD *)&(*a2)[6])), v101, *(float32x2_t *)(*a2)[6].f32, 1), v102, (*a2)[6], 2));
  float32x4_t v80 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v82, 3);
  simd_float3x3 v141 = __invert_f3(v140);
  int32x4_t v8 = vdupq_laneq_s32((int32x4_t)v141.columns[1], 2);
  float32x4_t v9 = (float32x4_t)vzip1q_s32(vzip1q_s32((int32x4_t)v141.columns[0], (int32x4_t)v141.columns[2]), (int32x4_t)v141.columns[1]);
  v141.columns[1] = (simd_float3)vtrn2q_s32((int32x4_t)v141.columns[0], (int32x4_t)v141.columns[1]);
  v141.columns[1].i32[2] = v141.columns[2].i32[1];
  float32x4_t v10 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v9, COERCE_FLOAT(*(_OWORD *)v7[14].f32)), (float32x4_t)v141.columns[1], v7[14], 1), (float32x4_t)vzip1q_s32(vzip2q_s32((int32x4_t)v141.columns[0], (int32x4_t)v141.columns[2]), v8), *(float32x4_t *)v7[14].f32, 2);
  v141.columns[1] = (simd_float3)vmulq_f32(v10, v10);
  LODWORD(v11) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v141.columns[1], 2), vaddq_f32((float32x4_t)v141.columns[1], (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v141.columns[1].f32, 1))).u32[0];
  if (fabsf(v11) < 1.0e-10)
  {
    float32x4_t v15 = (float32x4_t)xmmword_23435FD80;
  }
  else
  {
    float v12 = v11;
    float32x2_t v13 = vrsqrte_f32((float32x2_t)LODWORD(v11));
    float32x2_t v14 = vmul_f32(v13, vrsqrts_f32((float32x2_t)LODWORD(v12), vmul_f32(v13, v13)));
    float32x4_t v15 = vmulq_n_f32(v10, vmul_f32(v14, vrsqrts_f32((float32x2_t)LODWORD(v12), vmul_f32(v14, v14))).f32[0]);
  }
  float32x4_t v16 = vdivq_f32(v82, v80);
  float32x4_t v17 = vnegq_f32(v15);
  uint64_t v18 = a2[2];
  if (!v18->i8[0]) {
    v18->i8[0] = 1;
  }
  float32x4_t v19 = vmulq_f32(v16, v15);
  float32x4_t v81 = v16;
  float32x4_t v83 = v15;
  v18[1] = v16;
  void v18[2] = v17;
  float32_t v20 = -vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v19, 2), vaddq_f32(v19, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v19.f32, 1))).f32[0];
  float32x4_t v21 = v15;
  v21.f32[3] = v20;
  float32x4_t v99 = v21;
  re::AABB::transform(*(float32x4_t **)(v5 + 232), *(float32x4_t **)(v5 + 248), (uint64_t)v98);
  uint64_t result = re::AABB::intersects(v98, &v99);
  if ((result & 0xFFFFFFFD) == 0) {
    goto LABEL_17;
  }
  uint64_t v23 = *(void *)(v5 + 16);
  if (v23)
  {
    uint64_t v24 = *(void *)(v5 + 40);
    uint64_t v25 = *a2;
    uint64_t v26 = *(void *)(v5 + 232);
    uint64_t v27 = *(float32x4_t **)(v5 + 248);
    uint64_t v28 = *(re::ecs2 **)(v24 + 176);
    if (v28) {
      char v29 = re::ecs2::containsShaderGraphMaterialWithModelPositionOffset(v28, v22);
    }
    else {
      char v29 = 0;
    }
    uint64_t v31 = (float32x4_t *)(*(uint64_t (**)(uint64_t, uint64_t, float32x4_t *))(*(void *)v23 + 24))(v23, v24, v25);
    uint64_t result = re::ecs2::MeshComponentHelper::clippingDataForClippingParameterData(v31, v26, v27, v23, v29);
    if (!BYTE5(result))
    {
      LODWORD(v23) = result;
      unsigned __int8 v30 = (re::ecs2::MeshComponentHelper *)(HIDWORD(result) & 1);
      goto LABEL_15;
    }
LABEL_17:
    *(unsigned char *)a3 = 0;
    return result;
  }
  unsigned __int8 v30 = 0;
LABEL_15:
  uint64_t v32 = *(void *)(v5 + 24);
  if (v32)
  {
    LODWORD(v33) = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v32 + 24))(v32, v6);
    uint64_t v35 = v34;
    float v36 = v33;
  }
  else
  {
    uint64_t v35 = 0;
    float v36 = 1.0;
  }
  float v37 = v36 * *(float *)(v5 + 256);
  uint64_t v38 = *(void *)(v5 + 264);
  uint64_t v39 = re::ecs2::MeshComponentHelper::renderPassGroupDataForMeshScene(v6, *(unsigned char *)(v5 + 448), *(void *)(v5 + 8), *(unsigned __int8 *)(v5 + 450), *(void *)(v5 + 296), *(void *)(v5 + 304));
  if (!*(unsigned char *)(v5 + 448))
  {
    uint64_t v41 = *(void *)(v5 + 288);
    BOOL v42 = *(unsigned char *)(v5 + 449) != 0;
    if (!v41)
    {
      BOOL v42 = v40;
      uint64_t v41 = v39;
    }
    if (v38) {
      uint64_t v43 = v38;
    }
    else {
      uint64_t v43 = v35;
    }
    unint64_t v44 = a2[1];
    v95[0] = *(void *)(v5 + 464);
    v95[1] = v44;
    uint64_t v45 = *(void *)(v5 + 248);
    v95[2] = *(void *)(v5 + 232);
    v95[3] = v45;
    v95[4] = v43;
    v95[5] = v41;
    BOOL v96 = v42;
    char v97 = *(unsigned char *)(v5 + 450);
    re::ecs2::MeshComponentHelper::addRenderPassGroupBoundsTable((uint64_t)v95);
  }
  uint64_t v46 = re::ecs2::MeshComponentHelper::techniqueMappingOverlayNameHashForMeshScene(v30, v37);
  float v47 = re::ecs2::MeshComponentHelper::environmentLightingWeightForMeshScene(*(void *)(v5 + 40), *(void *)v5);
  long long v84 = *(_OWORD *)(v5 + 40);
  uint64_t v85 = *(void *)(v5 + 56);
  int v86 = *(_DWORD *)(v5 + 360);
  uint64_t v87 = *(void *)(v5 + 72);
  char v88 = *(unsigned char *)(v5 + 80);
  float v89 = v47;
  char v90 = 1;
  uint64_t v91 = *(void *)(v5 + 32);
  re::ecs2::MeshComponentHelper::dynamicFunctionConstantsForMeshScene((uint64_t)&v92, (uint64_t)&v84);
  long long v48 = *(_OWORD *)(v5 + 104);
  long long v104 = *(_OWORD *)(v5 + 88);
  long long v105 = v48;
  *(void *)&long long v106 = *(void *)(v5 + 120);
  uint64_t v49 = *(long long **)(v5 + 248);
  long long v51 = v49[2];
  long long v50 = v49[3];
  long long v52 = v49[1];
  long long v107 = *v49;
  long long v108 = v52;
  long long v109 = v51;
  long long v110 = v50;
  long long v113 = 0u;
  long long v114 = 0u;
  long long v53 = *(_OWORD *)(v5 + 144);
  long long v111 = *(_OWORD *)(v5 + 128);
  long long v112 = 0u;
  *(_OWORD *)&v115[8] = v53;
  long long v54 = *(_OWORD *)(v5 + 176);
  *(_OWORD *)&v115[24] = *(_OWORD *)(v5 + 160);
  *(_OWORD *)&v115[40] = v54;
  *(_OWORD *)&v115[56] = *(_OWORD *)(v5 + 192);
  *(void *)&v115[72] = *(void *)(v5 + 208);
  v115[0] = 0;
  re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::HashBrown((uint64_t)&v116, &v92);
  int v120 = v23;
  unsigned __int8 v121 = *(unsigned char *)(v5 + 328);
  int v55 = v121;
  if (v121) {
    uint64_t v122 = *(void *)(v5 + 336);
  }
  v123[0] = *(unsigned char *)(v5 + 344);
  *(_OWORD *)&v123[8] = *(_OWORD *)*(void *)(v5 + 352);
  *(void *)&v123[24] = v46;
  *(float *)&long long v124 = v37;
  DWORD1(v124) = *(_DWORD *)(v5 + 272);
  *((float *)&v124 + 2) = v47;
  long long v125 = *(_OWORD *)(v5 + 216);
  *(void *)&long long v126 = *(void *)(v5 + 316);
  *((void *)&v126 + 1) = *(void *)(*(void *)(v5 + 40) + 296);
  LOWORD(v127) = *(_WORD *)(v5 + 284);
  BYTE2(v127) = 0;
  DWORD1(v127) = *(_DWORD *)(v5 + 280);
  DWORD2(v127) = *(_DWORD *)(v5 + 276);
  BOOL v56 = *(_OWORD **)(v5 + 232);
  uint64_t v57 = *(void *)(v5 + 240);
  long long v58 = v56[1];
  *(_OWORD *)&v128[8] = *v56;
  *(_OWORD *)&v128[24] = v58;
  *(void *)&v128[40] = v57;
  char v129 = 1;
  float32x4_t v130 = v81;
  float32x4_t v131 = v83;
  uint64_t v59 = *(void *)(v6 + 296);
  uint64_t v132 = v59;
  unsigned __int8 v133 = *(unsigned char *)(v5 + 368);
  int v60 = v133;
  if (v133)
  {
    long long v61 = *(_OWORD *)(v5 + 400);
    long long v134 = *(_OWORD *)(v5 + 384);
    long long v135 = v61;
    long long v62 = *(_OWORD *)(v5 + 432);
    long long v136 = *(_OWORD *)(v5 + 416);
    long long v137 = v62;
  }
  LOBYTE(v13re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = *(unsigned char *)(v5 + 457);
  *(_DWORD *)((char *)&v138 + 1) = *(_DWORD *)(v5 + 452);
  BYTE5(v13re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = *(unsigned char *)(v5 + 456);
  BYTE6(v13re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = *(unsigned char *)(v5 + 448);
  HIBYTE(v13re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = *(unsigned char *)(v5 + 458);
  *(unsigned char *)a3 = 1;
  long long v63 = *(_OWORD *)&v115[32];
  *(_OWORD *)(a3 + 20re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = *(_OWORD *)&v115[16];
  *(_OWORD *)(a3 + 224) = v63;
  long long v64 = *(_OWORD *)&v115[64];
  *(_OWORD *)(a3 + 24ArcSharedObject::ArcSharedObject(this, 0) = *(_OWORD *)&v115[48];
  *(_OWORD *)(a3 + 256) = v64;
  long long v65 = v113;
  *(_OWORD *)(a3 + 144) = v112;
  *(_OWORD *)(a3 + 1re::HashTable<re::ecs2::Entity const*,re::ecs2::BillboardData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::deinit((uint64_t *)this + 60) = v65;
  long long v66 = *(_OWORD *)v115;
  *(_OWORD *)(a3 + 176) = v114;
  *(_OWORD *)(a3 + 192) = v66;
  long long v67 = v109;
  *(_OWORD *)(a3 + 8ArcSharedObject::ArcSharedObject(this, 0) = v108;
  *(_OWORD *)(a3 + 96) = v67;
  long long v68 = v111;
  *(_OWORD *)(a3 + 112) = v110;
  *(_OWORD *)(a3 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 28) = v68;
  long long v69 = v105;
  *(_OWORD *)(a3 + 16) = v104;
  *(_OWORD *)(a3 + 32) = v69;
  long long v70 = v107;
  *(_OWORD *)(a3 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v106;
  *(_OWORD *)(a3 + 64) = v70;
  uint64_t v71 = *((void *)&v119 + 1);
  *(void *)(a3 + 32ArcSharedObject::ArcSharedObject(this, 0) = v119;
  *(void *)(a3 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 28) = v71;
  long long v72 = v117;
  *(_OWORD *)(a3 + re::DynamicArray<re::TraceEntry>::deinit((uint64_t)this + 272) = v116;
  *(_OWORD *)(a3 + 28re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v72;
  long long v116 = 0u;
  long long v117 = 0u;
  *(_OWORD *)(a3 + 304) = v118;
  long long v118 = 0u;
  long long v119 = 0u;
  *(_DWORD *)(a3 + 336) = v23;
  *(unsigned char *)(a3 + 344) = v55;
  if (v55) {
    *(void *)(a3 + 352) = v122;
  }
  long long v73 = *(_OWORD *)&v128[16];
  *(_OWORD *)(a3 + 456) = *(_OWORD *)v128;
  *(_OWORD *)(a3 + 472) = v73;
  *(_OWORD *)(a3 + 48re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = *(_OWORD *)&v128[32];
  long long v74 = v125;
  *(_OWORD *)(a3 + 392) = v124;
  *(_OWORD *)(a3 + 40re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v74;
  long long v75 = v127;
  *(_OWORD *)(a3 + 424) = v126;
  *(_OWORD *)(a3 + 44ArcSharedObject::ArcSharedObject(this, 0) = v75;
  long long v76 = *(_OWORD *)&v123[16];
  *(_OWORD *)(a3 + 3re::HashTable<re::ecs2::Entity const*,re::ecs2::BillboardData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::deinit((uint64_t *)this + 60) = *(_OWORD *)v123;
  *(_OWORD *)(a3 + 376) = v76;
  *(unsigned char *)(a3 + 512) = 1;
  float32x4_t v77 = v131;
  *(float32x4_t *)(a3 + 5re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 28) = v130;
  *(float32x4_t *)(a3 + 544) = v77;
  *(void *)(a3 + 5re::HashTable<re::ecs2::Entity const*,re::ecs2::BillboardData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::deinit((uint64_t *)this + 60) = v59;
  *(unsigned char *)(a3 + 576) = v60;
  if (v60)
  {
    long long v78 = v135;
    *(_OWORD *)(a3 + 592) = v134;
    *(_OWORD *)(a3 + 60re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v78;
    long long v79 = v137;
    *(_OWORD *)(a3 + 624) = v136;
    *(_OWORD *)(a3 + 64ArcSharedObject::ArcSharedObject(this, 0) = v79;
  }
  *(void *)(a3 + 656) = v138;
  uint64_t result = v94;
  if (v94)
  {
    if (v93) {
      uint64_t v93 = 0;
    }
    if (v92) {
      return (*(uint64_t (**)(void))(*(void *)v94 + 40))();
    }
  }
  return result;
}

uint64_t *re::HashTable<unsigned long long,re::ecs2::MeshComponentStateImpl::processUpdatingComponents(re::ecs2::System::UpdateContext const&,re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent> *,re::ecs2::ComponentBuckets<re::ecs2::MeshComponent>::BucketIteration,void *)::PerWorldData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::~HashTable(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    unint64_t v3 = *((unsigned int *)a1 + 8);
    if (v3)
    {
      uint64_t v4 = 0;
      for (unint64_t i = 0; i < v3; ++i)
      {
        uint64_t v6 = a1[2] + v4;
        int v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v7 & 0x7FFFFFFF;
          re::DynamicArray<unsigned long>::deinit(v6 + 208);
          re::DynamicArray<unsigned long>::deinit(v6 + 168);
          re::DynamicArray<re::StencilPortal>::deinit(v6 + 120);
          re::BucketArray<re::MeshDeformation,8ul>::deinit(v6 + 64);
          re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v6 + 64);
          re::DynamicArray<re::MeshScene>::deinit(v6 + 24);
          unint64_t v3 = *((unsigned int *)a1 + 8);
        }
        v4 += 256;
      }
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return a1;
}

uint64_t re::ecs2::MeshComponentStateImpl::handleSceneEntityWillRemove(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = a2;
  do
  {
    uint64_t v2 = a2;
    a2 = *(void *)(a2 + 24);
  }
  while (a2);
  uint64_t v5 = *(void *)(v2 + 16);
  uint64_t v3 = re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::tryGet(a1 + 40, &v5);
  if (v3) {
    re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove(v3, &v6);
  }
  return 0;
}

uint64_t re::HashTable<re::ecs2::Scene *,re::HashSet<re::ecs2::Entity *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::remove(uint64_t a1, uint64_t *a2)
{
  if (!*(void *)a1) {
    return 0;
  }
  uint64_t v3 = *a2;
  unint64_t v4 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  unint64_t v5 = ((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) ^ ((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) >> 31))
     % *(unsigned int *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(unsigned int *)(v6 + 4 * v5);
  if (v7 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v9 = *(void *)(a1 + 16);
  if (*(void *)(v9 + 72 * v7 + 16) != v3)
  {
    while (1)
    {
      unsigned int v10 = v7;
      int v11 = *(_DWORD *)(v9 + 72 * v7 + 8);
      uint64_t v7 = v11 & 0x7FFFFFFF;
      if ((v11 & 0x7FFFFFFF) == 0x7FFFFFFF) {
        return 0;
      }
      if (*(void *)(v9 + 72 * v7 + 16) == v3)
      {
        *(_DWORD *)(v9 + 72 * v10 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = *(_DWORD *)(v9 + 72 * v10 + 8) & 0x80000000 | *(_DWORD *)(v9 + 72 * v7 + 8) & 0x7FFFFFFF;
        goto LABEL_9;
      }
    }
  }
  *(_DWORD *)(v6 + 4 * v5) = *(_DWORD *)(v9 + 72 * v7 + 8) & 0x7FFFFFFF;
LABEL_9:
  uint64_t v12 = *(void *)(a1 + 16);
  uint64_t v13 = v12 + 72 * v7;
  int v16 = *(_DWORD *)(v13 + 8);
  float32x4_t v15 = (int *)(v13 + 8);
  int v14 = v16;
  if (v16 < 0)
  {
    *float32x4_t v15 = v14 & 0x7FFFFFFF;
    re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)(v12 + 72 * v7 + 24));
    uint64_t v12 = *(void *)(a1 + 16);
    int v14 = *(_DWORD *)(v12 + 72 * v7 + 8);
  }
  int v17 = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(v12 + 72 * v7 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = *(_DWORD *)(a1 + 36) | v14 & 0x80000000;
  --*(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 36) = v7;
  *(_DWORD *)(a1 + 4ArcSharedObject::ArcSharedObject(this, 0) = v17 + 1;
  return 1;
}

unint64_t re::ecs2::MeshComponentHelper::clippingDataForClippingParameterData(float32x4_t *a1, uint64_t a2, float32x4_t *a3, uint64_t a4, char a5)
{
  if (a1)
  {
    uint64_t v6 = a1[9].i64[1];
    if (!v6) {
      goto LABEL_11;
    }
    if (a5)
    {
      unsigned int v7 = 0;
    }
    else
    {
      uint64_t v23 = (*(uint64_t (**)(uint64_t))(*(void *)a4 + 32))(a4);
      uint64_t v24 = v12;
      unsigned int v7 = re::determineClippingNeeds((uint64_t)&a1[9], &v23, a1[11].u16[6], a1 + 7, a2, a3, v13, v14, v15, v16, v17, v18, v19, v20);
    }
    if (!re::s_debugSettingsManager
      || (unsigned __int8 v22 = 1,
          uint64_t v23 = 0x6EE8238E760161F0,
          uint64_t v24 = "overrides:enableclipping",
          re::DebugSettingsManager::getWithErrorCode<BOOL>(re::s_debugSettingsManager, &v23, &v22),
          re::StringID::destroyString((re::StringID *)&v23),
          (LOWORD(v6) = v22) != 0))
    {
      if (v7 > 1)
      {
        LOWORD(v6) = 0;
        uint64_t v8 = 0;
        unint64_t v9 = (unint64_t)(v7 == 3) << 40;
      }
      else
      {
        LODWORD(v6) = a1[11].i32[2];
        uint64_t v8 = WORD1(v6);
        unint64_t v9 = (unint64_t)(v7 == 0) << 32;
      }
    }
    else
    {
LABEL_11:
      uint64_t v8 = 0;
      unint64_t v9 = 0;
    }
  }
  else
  {
    LOWORD(v6) = 0;
    uint64_t v8 = 0;
    unint64_t v9 = 0;
  }
  return v9 | (v8 << 16) | (unsigned __int16)v6;
}

uint64_t re::HashTable<re::ecs2::Entity const*,re::ecs2::ClippingParameterData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(uint64_t a1, uint64_t *a2)
{
  if (!*(void *)a1) {
    return 0;
  }
  uint64_t v2 = *a2;
  unint64_t v3 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  uint64_t v4 = *(unsigned int *)(*(void *)(a1 + 8)
                       + 4
                       * (((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) ^ ((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) >> 31))
                        % *(unsigned int *)(a1 + 24)));
  if (v4 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 16);
  if (*(void *)(v6 + 224 * v4 + 16) != v2)
  {
    while (1)
    {
      LODWORD(v4) = *(_DWORD *)(v6 + 224 * v4 + 8) & 0x7FFFFFFF;
      if (v4 == 0x7FFFFFFF) {
        break;
      }
      if (*(void *)(v6 + 224 * v4 + 16) == v2) {
        return v6 + 224 * v4 + 32;
      }
    }
    return 0;
  }
  return v6 + 224 * v4 + 32;
}

uint64_t re::ecs2::MeshSystem::willAddSystemToECSService(re::ecs2::MeshSystem *this)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  re::ecs2::RenderingSubsystem::willAddSystemToECSService(this);
  uint64_t v2 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
  *((void *)this + 8ArcSharedObject::ArcSharedObject(this, 0) = re::ServiceLocator::serviceOrNull<re::ecs2::ThrottleService>(v2);
  uint64_t v3 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
  *((void *)this + 81) = re::ServiceLocator::serviceOrNull<re::ecs2::ClippingService>(v3);
  uint64_t v4 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
  *((void *)this + 82) = re::ServiceLocator::serviceOrNull<re::ecs2::OpacityService>(v4);
  uint64_t v5 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
  *((void *)this + 83) = re::ServiceLocator::serviceOrNull<re::ecs2::TintService>(v5);
  uint64_t v6 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
  *((void *)this + 86) = re::ServiceLocator::serviceOrNull<re::ecs2::LightService>(v6);
  uint64_t v7 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
  *((void *)this + 84) = re::ServiceLocator::serviceOrNull<re::ecs2::EnvironmentLightingService>(v7);
  uint64_t v8 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
  *((void *)this + 87) = re::ServiceLocator::serviceOrNull<re::ecs2::ImageBasedLightService>(v8);
  uint64_t v9 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
  *((void *)this + 85) = re::ServiceLocator::serviceOrNull<re::ecs2::VisualProxyScopeService>(v9);
  uint64_t v10 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
  *((void *)this + 8re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = re::ServiceLocator::serviceOrNull<re::MaterialParametersService>(v10);
  uint64_t v11 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
  *((void *)this + 9ArcSharedObject::ArcSharedObject(this, 0) = re::ServiceLocator::serviceOrNull<re::DirectResourceAssetTracker>(v11);
  uint64_t v12 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
  uint64_t result = re::ServiceLocator::serviceOrNull<re::ecs2::RenderPassGroupService>(v12);
  *((void *)this + 91) = result;
  if (*((void *)this + 15))
  {
    re::Defaults::BOOLValue((re::Defaults *)"renderMissingMaterials", v14, v23);
    if (!v23[0] || v23[1])
    {
      (*(void (**)(long long *__return_ptr))(**((void **)this + 15) + 8))(&v24);
      long long v18 = *((_OWORD *)this + 10);
      *((_OWORD *)this + 1ArcSharedObject::ArcSharedObject(this, 0) = v24;
      long long v24 = v18;
      uint64_t v19 = *((void *)this + 22);
      *((void *)this + 22) = v25;
      uint64_t v25 = v19;
      re::AssetHandle::~AssetHandle((re::AssetHandle *)&v24);
      (*(void (**)(long long *__return_ptr))(**((void **)this + 15) + 8))(&v24);
      long long v20 = *(_OWORD *)((char *)this + 184);
      *(_OWORD *)((char *)this + 184) = v24;
      long long v24 = v20;
      uint64_t v21 = *((void *)this + 25);
      *((void *)this + 25) = v25;
      uint64_t v25 = v21;
      re::AssetHandle::~AssetHandle((re::AssetHandle *)&v24);
      char v17 = 1;
    }
    else
    {
      (*(void (**)(long long *__return_ptr))(**((void **)this + 15) + 8))(&v24);
      long long v15 = *((_OWORD *)this + 10);
      *((_OWORD *)this + 1ArcSharedObject::ArcSharedObject(this, 0) = v24;
      long long v24 = v15;
      uint64_t v16 = *((void *)this + 22);
      *((void *)this + 22) = v25;
      uint64_t v25 = v16;
      re::AssetHandle::~AssetHandle((re::AssetHandle *)&v24);
      re::AssetHandle::operator=((uint64_t)this + 184, (uint64_t *)this + 20);
      char v17 = 0;
    }
    *((unsigned char *)this + 256) = v17;
    re::AssetHandle::loadAsync((re::ecs2::MeshSystem *)((char *)this + 160));
    re::AssetHandle::loadAsync((re::ecs2::MeshSystem *)((char *)this + 184));
    MurmurHash3_x64_128((uint64_t)"SFBPassthroughDownsample2D", 26, 0, (unint64_t *)&v24);
    *((void *)this + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 26) = (*((void *)&v24 + 1)
                            + ((void)v24 << 6)
                            + ((unint64_t)v24 >> 2)
                            - 0x61C8864680B583E9) ^ v24;
    MurmurHash3_x64_128((uint64_t)"SFBCopyTextureBilinear", 22, 0, (unint64_t *)&v24);
    *((void *)this + 27) = (*((void *)&v24 + 1)
                            + ((void)v24 << 6)
                            + ((unint64_t)v24 >> 2)
                            - 0x61C8864680B583E9) ^ v24;
    MurmurHash3_x64_128((uint64_t)"Opaque", 6, 0, (unint64_t *)&v24);
    *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 28) = (*((void *)&v24 + 1)
                            + ((void)v24 << 6)
                            + ((unint64_t)v24 >> 2)
                            - 0x61C8864680B583E9) ^ v24;
    MurmurHash3_x64_128((uint64_t)"Transparent", 11, 0, (unint64_t *)&v24);
    *((void *)this + 29) = (*((void *)&v24 + 1)
                            + ((void)v24 << 6)
                            + ((unint64_t)v24 >> 2)
                            - 0x61C8864680B583E9) ^ v24;
    MurmurHash3_x64_128((uint64_t)"StencilIncrement", 16, 0, (unint64_t *)&v24);
    *((void *)this + 3ArcSharedObject::ArcSharedObject(this, 0) = (*((void *)&v24 + 1)
                            + ((void)v24 << 6)
                            + ((unint64_t)v24 >> 2)
                            - 0x61C8864680B583E9) ^ v24;
    MurmurHash3_x64_128((uint64_t)"Occlusion", 9, 0, (unint64_t *)&v24);
    *((void *)this + 31) = (*((void *)&v24 + 1)
                            + ((void)v24 << 6)
                            + ((unint64_t)v24 >> 2)
                            - 0x61C8864680B583E9) ^ v24;
    uint64_t v22 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
    uint64_t result = re::ServiceLocator::serviceOrNull<re::FrameAnalysisService>(v22);
    if (result) {
      *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 89) = result;
    }
  }
  return result;
}

uint64_t re::ServiceLocator::serviceOrNull<re::ecs2::TintService>(uint64_t a1)
{
  {
    re::introspect<re::ecs2::TintService>(void)::info = re::ecs2::introspect_TintService(0);
  }
  uint64_t v2 = re::introspect<re::ecs2::TintService>(void)::info;
  re::StringID::invalid((re::StringID *)v5);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *))(*(void *)a1 + 16))(a1, v2, v5);
  re::StringID::destroyString((re::StringID *)v5);
  return v3;
}

uint64_t re::ServiceLocator::serviceOrNull<re::ecs2::EnvironmentLightingService>(uint64_t a1)
{
  {
    re::introspect<re::ecs2::EnvironmentLightingService>(void)::info = re::ecs2::introspect_EnvironmentLightingService(0);
  }
  uint64_t v2 = re::introspect<re::ecs2::EnvironmentLightingService>(void)::info;
  re::StringID::invalid((re::StringID *)v5);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *))(*(void *)a1 + 16))(a1, v2, v5);
  re::StringID::destroyString((re::StringID *)v5);
  return v3;
}

uint64_t re::ServiceLocator::serviceOrNull<re::MaterialParametersService>(uint64_t a1)
{
  {
    re::introspect<re::MaterialParametersService>(void)::info = re::introspect_MaterialParametersService(0);
  }
  uint64_t v2 = re::introspect<re::MaterialParametersService>(void)::info;
  re::StringID::invalid((re::StringID *)v5);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *))(*(void *)a1 + 16))(a1, v2, v5);
  re::StringID::destroyString((re::StringID *)v5);
  return v3;
}

uint64_t re::ServiceLocator::serviceOrNull<re::FrameAnalysisService>(uint64_t a1)
{
  {
    re::introspect<re::FrameAnalysisService>(void)::info = re::introspect_FrameAnalysisService(0);
  }
  uint64_t v2 = re::introspect<re::FrameAnalysisService>(void)::info;
  re::StringID::invalid((re::StringID *)v5);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *))(*(void *)a1 + 16))(a1, v2, v5);
  re::StringID::destroyString((re::StringID *)v5);
  return v3;
}

double re::ecs2::MeshSystem::willRemoveSystemFromECSService(re::ecs2::MeshSystem *this)
{
  long long v2 = *((_OWORD *)this + 10);
  uint64_t v3 = *((void *)this + 22);
  *((void *)this + 21) = 0;
  *((void *)this + 22) = 0;
  *((void *)this + 2ArcSharedObject::ArcSharedObject(this, 0) = 0;
  long long v7 = v2;
  uint64_t v8 = v3;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v7);
  long long v4 = *(_OWORD *)((char *)this + 184);
  uint64_t v5 = *((void *)this + 25);
  *((void *)this + 24) = 0;
  *((void *)this + 25) = 0;
  *((void *)this + 23) = 0;
  long long v7 = v4;
  uint64_t v8 = v5;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v7);
  double result = 0.0;
  *((_OWORD *)this + 42) = 0u;
  *((_OWORD *)this + 43) = 0u;
  *((_OWORD *)this + 4ArcSharedObject::ArcSharedObject(this, 0) = 0u;
  *((_OWORD *)this + 41) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 12ArcSharedObject::ArcSharedObject(this, 0) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *((void *)this + 19) = 0;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 89) = 0;
  *((void *)this + 91) = 0;
  *((void *)this + 9ArcSharedObject::ArcSharedObject(this, 0) = 0;
  return result;
}

void re::ecs2::MeshSystem::willAddSceneToECSService(re::ecs2::MeshSystem *this, re::EventBus **a2)
{
  uint64_t v73 = *MEMORY[0x263EF8340];
  long long v4 = (char *)this + 264;
  long long v53 = (re::ecs2::Scene *)a2;
  uint64_t v5 = (re::ecs2::MeshSystem *)((char *)this + 384);
  unint64_t v6 = *((void *)this + 49);
  int v7 = *((_DWORD *)this + 100);
  if (v6 >= 0xB)
  {
    if (v7) {
      uint64_t v8 = (void *)((char *)this + 408);
    }
    else {
      uint64_t v8 = (void *)*((void *)this + 52);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_17;
      }
    }
    goto LABEL_16;
  }
  if (v7)
  {
    uint64_t v9 = (uint64_t *)((char *)this + 408);
    if (!v6) {
      goto LABEL_17;
    }
  }
  else
  {
    uint64_t v9 = (uint64_t *)*((void *)this + 52);
    if (!v6) {
      goto LABEL_17;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
  {
LABEL_16:
    *(void *)&long long v55 = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet((uint64_t)this + 384, 0);
    uint64_t v14 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)v4, v55);
    re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>::init(v14, (uint64_t)v4, (uint64_t)a2);
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((re::ecs2::MeshSystem *)((char *)this + 320), &v53, (uint64_t *)&v55);
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)v5, v55);
    long long v15 = (char *)this + 432;
    unint64_t v16 = v55;
    goto LABEL_49;
  }
LABEL_17:
  long long v62 = 0u;
  long long v55 = 0u;
  *(void *)&long long v56 = 0;
  *((void *)&v56 + 1) = -1;
  long long v57 = 0u;
  long long v58 = 0u;
  uint64_t v59 = 0;
  uint64_t v60 = 1;
  long long v61 = 0uLL;
  unint64_t v17 = *((void *)this + 38);
  *(void *)&long long v62 = 0;
  unint64_t v18 = *((void *)this + 34);
  DWORD2(v62) = 0;
  if (v17 + 1 > 4 * v18)
  {
    re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>,4ul>::setBucketsCapacity((uint64_t *)this + 33, (v17 + 4) >> 2);
    unint64_t v18 = *((void *)this + 34);
  }
  if (v18 <= v17 >> 2)
  {
    long long v54 = 0;
    long long v71 = 0u;
    long long v72 = 0u;
    long long v69 = 0u;
    long long v70 = 0u;
    long long v68 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)long long v63 = 136315906;
    *(void *)&v63[4] = "operator[]";
    *(_WORD *)&v63[12] = 1024;
    *(_DWORD *)&v63[14] = 858;
    __int16 v64 = 2048;
    unint64_t v65 = v17 >> 2;
    __int16 v66 = 2048;
    unint64_t v67 = v18;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_71;
  }
  if (*((unsigned char *)this + 280)) {
    uint64_t v19 = (char *)this + 288;
  }
  else {
    uint64_t v19 = (char *)*((void *)this + 37);
  }
  uint64_t v20 = *(void *)&v19[8 * (v17 >> 2)];
  ++*((void *)this + 38);
  ++*((_DWORD *)this + 78);
  uint64_t v21 = v20 + 112 * (v17 & 3);
  long long v22 = v55;
  long long v23 = v56;
  long long v24 = v57;
  *(void *)(v21 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v58;
  *(_OWORD *)(v21 + 16) = v23;
  *(_OWORD *)(v21 + 32) = v24;
  *(_OWORD *)uint64_t v21 = v22;
  re::BucketArray<RESubscriptionHandle,8ul>::BucketArray(v21 + 56, (uint64_t)&v58 + 8);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStateSceneData(&v55);
  uint64_t v26 = *((void *)this + 38);
  if (!v26)
  {
LABEL_71:
    re::internal::assertLog((re::internal *)4, v25, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768, v53, v54);
    _os_crash();
    __break(1u);
  }
  uint64_t v27 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)v4, v26 - 1);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>::init(v27, (uint64_t)v4, (uint64_t)v53);
  *(void *)&long long v68 = *((void *)this + 38) - 1;
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((re::ecs2::MeshSystem *)((char *)this + 320), &v53, (uint64_t *)&v68);
  unint64_t v28 = *((void *)this + 38);
  unint64_t v29 = *((void *)this + 53);
  if ((v28 & 0x3F) != 0) {
    unint64_t v30 = (v28 >> 6) + 1;
  }
  else {
    unint64_t v30 = v28 >> 6;
  }
  *((void *)this + 53) = v28;
  *(void *)&long long v55 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize(v5, v30, &v55);
  if (v28 && v29 > v28)
  {
    uint64_t v31 = 63;
    uint64_t v32 = *((void *)this + 53) & 0x3FLL;
    if (v32 && v32 != 63) {
      uint64_t v31 = ~(-1 << v32);
    }
    if (*((unsigned char *)this + 400)) {
      float v33 = (char *)this + 408;
    }
    else {
      float v33 = (char *)*((void *)this + 52);
    }
    *(void *)&v33[8 * *((void *)this + 49) - 8] &= v31;
  }
  unint64_t v34 = *((void *)this + 38);
  unint64_t v35 = *((void *)this + 59);
  if ((v34 & 0x3F) != 0) {
    unint64_t v36 = (v34 >> 6) + 1;
  }
  else {
    unint64_t v36 = v34 >> 6;
  }
  *((void *)this + 59) = v34;
  *(void *)&long long v55 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((re::ecs2::MeshSystem *)((char *)this + 432), v36, &v55);
  if (v34 && v35 > v34)
  {
    uint64_t v37 = 63;
    uint64_t v38 = *((void *)this + 59) & 0x3FLL;
    if (v38 && v38 != 63) {
      uint64_t v37 = ~(-1 << v38);
    }
    if (*((unsigned char *)this + 448)) {
      uint64_t v39 = (char *)this + 456;
    }
    else {
      uint64_t v39 = (char *)*((void *)this + 58);
    }
    *(void *)&v39[8 * *((void *)this + 55) - 8] &= v37;
  }
  unint64_t v16 = v68;
  long long v15 = (char *)this + 432;
LABEL_49:
  BOOL v40 = (re::ecs2::System *)re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v15, v16);
  if (!*((unsigned char *)this + 496)) {
    goto LABEL_67;
  }
  unint64_t v41 = *((void *)this + 55);
  int v42 = *((_DWORD *)this + 112);
  if (v41 < 0xB)
  {
    if (v42)
    {
      unint64_t v44 = (uint64_t *)((char *)this + 456);
      if (!v41) {
        goto LABEL_67;
      }
    }
    else
    {
      unint64_t v44 = (uint64_t *)*((void *)this + 58);
      if (!v41) {
        goto LABEL_67;
      }
    }
    uint64_t v46 = 0;
    uint64_t v47 = 8 * v41;
    do
    {
      uint64_t v48 = *v44++;
      v46 |= v48;
      v47 -= 8;
    }
    while (v47);
    if (!v46) {
      goto LABEL_67;
    }
  }
  else
  {
    if (v42) {
      uint64_t v43 = (void *)((char *)this + 456);
    }
    else {
      uint64_t v43 = (void *)*((void *)this + 58);
    }
    uint64_t v45 = 8 * v41;
    while (!*v43)
    {
      ++v43;
      v45 -= 8;
      if (!v45) {
        goto LABEL_67;
      }
    }
  }
  BOOL v40 = (re::ecs2::System *)*((void *)this + 60);
  if (!*((unsigned char *)v40 + 86)) {
    re::ecs2::System::queueToRun(v40, 0.0);
  }
LABEL_67:
  long long v54 = (re::ecs2::Scene *)a2;
  uint64_t v49 = a2[36];
  if (v49)
  {
    uint64_t v50 = re::globalAllocators(v40)[2];
    *((void *)&v56 + 1) = v50;
    long long v51 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v50 + 32))(v50, 32, 0);
    *long long v51 = &unk_26E6FB208;
    v51[1] = (char *)this + 504;
    void v51[2] = re::ecs2::MeshComponentStateImpl::handleSceneEntityWillRemove;
    v51[3] = 0;
    *(void *)&long long v57 = v51;
    *((void *)&v69 + 1) = v50;
    *(void *)&long long v70 = 0;
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::operator=<24ul>((uint64_t)&v68, (uint64_t)&v55);
    *(void *)long long v63 = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityWillRemoveEvent>(v49, (uint64_t)&v68, 0, 0);
    *(void *)&v63[8] = v52;
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::destroyCallable((uint64_t)&v68);
    re::HashTable<re::ecs2::Scene *,RESubscriptionHandle,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::addNew((uint64_t)this + 592, (uint64_t *)&v54, v63);
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::destroyCallable((uint64_t)&v55);
  }
}

uint64_t re::ecs2::MeshSystem::willRemoveSceneFromECSService(re::ecs2::MeshSystem *this, re::ecs2::Scene *a2)
{
  uint64_t v20 = a2;
  long long v4 = (uint64_t *)((char *)this + 320);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)this + 40, &v20);
  if (v5 != -1)
  {
    uint64_t v6 = *((void *)this + 41) + 16 * v5;
    re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)this + 384, *(void *)(v6 + 8));
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)this + 432, *(void *)(v6 + 8));
    int v7 = (void *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)this + 264, *(void *)(v6 + 8));
    if (*v7)
    {
      uint64_t v8 = v7;
      *int v7 = 0;
      uint64_t v9 = v7 + 1;
      uint64_t v10 = *(void *)(v7[1] + 288);
      if (v10)
      {
        uint64_t v11 = v7[12];
        if (v11)
        {
          for (unint64_t i = 0; i != v11; ++i)
          {
            uint64_t v13 = re::BucketArray<RESubscriptionHandle,8ul>::operator[]((uint64_t)(v8 + 7), i);
            re::EventBus::unsubscribe(v10, *(void *)v13, *(void *)(v13 + 8));
          }
        }
      }
      re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)(v8 + 7));
      uint64_t v14 = 0;
      long long v15 = v8 + 3;
      do
      {
        unint64_t v16 = (re::ecs2::ComponentBucketsBase *)v8[2];
        if (*(void *)v16) {
          re::ecs2::ComponentBucketsBase::removeBucket(v16, v15[v14]);
        }
        v15[v14++] = -1;
      }
      while (v14 != 4);
      *uint64_t v9 = 0;
      v9[1] = 0;
    }
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::remove(v4, &v20);
  }
  uint64_t v20 = a2;
  uint64_t v17 = *((void *)a2 + 36);
  if (v17)
  {
    uint64_t v18 = re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet((uint64_t)this + 592, (uint64_t *)&v20);
    if (v18) {
      re::EventBus::unsubscribe(v17, *(void *)v18, *(void *)(v18 + 8));
    }
  }
  re::HashTable<re::ecs2::Scene *,RESubscriptionHandle,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::remove((uint64_t)this + 592, (uint64_t *)&v20);
  return re::HashTable<re::ecs2::Scene *,re::HashSet<re::ecs2::Entity *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::remove((uint64_t)this + 544, (uint64_t *)&v20);
}

uint64_t re::ecs2::MeshSystem::updateScenes(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  v63[0] = a3;
  v63[1] = a4;
  uint64_t v4 = *(void *)(result + 104);
  if (v4 && (*(unsigned char *)(v4 + 424) & 0x10) != 0)
  {
    uint64_t v6 = result;
    int v7 = re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v62);
    uint64_t v8 = a2[1];
    uint64_t v59 = a2;
    unint64_t v9 = 0;
    if (v8)
    {
      uint64_t v10 = *a2;
      uint64_t v11 = 8 * v8;
      do
      {
        int v7 = (uint64_t *)re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(*(void *)v10 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
        if (v7) {
          uint64_t v12 = v7[3];
        }
        else {
          uint64_t v12 = 0;
        }
        v9 += v12;
        v10 += 8;
        v11 -= 8;
      }
      while (v11);
    }
    isStatisticCollectionEnabled = (re *)re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v7);
    if (isStatisticCollectionEnabled)
    {
      uint64_t v14 = re::profilerThreadContext(isStatisticCollectionEnabled);
      long long v15 = *(int64x2_t **)(v14 + 152);
      if (v15)
      {
        unint64_t v16 = v15[380].u64[0];
        if (v16 >= v9) {
          unint64_t v16 = v9;
        }
        v15[380].i64[0] = v16;
        unint64_t v17 = v15[380].u64[1];
        if (v17 <= v9) {
          unint64_t v17 = v9;
        }
        v15[380].i64[1] = v17;
        int64x2_t v18 = vdupq_n_s64(1uLL);
        v18.i64[0] = v9;
        v15[381] = vaddq_s64(v15[381], v18);
        *(unsigned char *)(v14 + 184) = 0;
      }
    }
    re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v61, 3011, v6);
    uint64_t v60 = v6 + 264;
    uint64_t v67 = (*(uint64_t (**)(void))(**(void **)(*(void *)(v6 + 512) + 144) + 16))(*(void *)(*(void *)(v6 + 512) + 144));
    int v65 = 0;
    memset(v64, 0, sizeof(v64));
    uint64_t v66 = 0x7FFFFFFFLL;
    uint64_t v19 = *(unsigned int *)(v6 + 576);
    if (v19)
    {
      uint64_t v20 = 0;
      uint64_t v21 = (int *)(*(void *)(v6 + 560) + 8);
      while (1)
      {
        int v22 = *v21;
        v21 += 18;
        if (v22 < 0) {
          break;
        }
        if (v19 == ++v20)
        {
          LODWORD(v2ArcSharedObject::ArcSharedObject(this, 0) = *(_DWORD *)(v6 + 576);
          break;
        }
      }
    }
    else
    {
      LODWORD(v2ArcSharedObject::ArcSharedObject(this, 0) = 0;
    }
    if (v19 != v20)
    {
      uint64_t v23 = v20;
      do
      {
        uint64_t v24 = *(void *)(v6 + 560) + 72 * v23;
        uint64_t v25 = v24 + 24;
        uint64_t v68 = *(void *)(v24 + 16);
        uint64_t v26 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 320), &v68);
        if (v26 != -1)
        {
          uint64_t v27 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v60, *(void *)(*(void *)(v6 + 328) + 16 * v26 + 8));
          uint64_t v28 = *(unsigned int *)(v25 + 32);
          if (v28)
          {
            uint64_t v29 = 0;
            unint64_t v30 = (int *)(*(void *)(v25 + 16) + 8);
            while (1)
            {
              int v31 = *v30;
              v30 += 6;
              if (v31 < 0) {
                break;
              }
              if (v28 == ++v29)
              {
                LODWORD(v29) = *(_DWORD *)(v25 + 32);
                break;
              }
            }
          }
          else
          {
            LODWORD(v29) = 0;
          }
          if (v28 != v29)
          {
            uint64_t v32 = v29;
            do
            {
              re::ecs2::MeshComponentStateImpl::checkRenderOptionChanges(v27, *(void **)(*(void *)(v25 + 16) + 24 * v32 + 16), (re::ecs2::RenderOptions *)&v67, (uint64_t)v64);
              if (*(_DWORD *)(v25 + 32) <= (v29 + 1)) {
                int v33 = v29 + 1;
              }
              else {
                int v33 = *(_DWORD *)(v25 + 32);
              }
              int v34 = v29;
              while (1)
              {
                uint64_t v32 = (v34 + 1);
                if (v33 - 1 == v34) {
                  break;
                }
                ++v34;
                LODWORD(v29) = v32;
                if ((*(_DWORD *)(*(void *)(v25 + 16) + 24 * v32 + 8) & 0x80000000) != 0) {
                  goto LABEL_41;
                }
              }
              LODWORD(v29) = v33;
LABEL_41:
              ;
            }
            while (v28 != v29);
          }
        }
        re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::clear(v25);
        re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear((uint64_t)v64);
        if (*(_DWORD *)(v6 + 576) <= (v20 + 1)) {
          int v35 = v20 + 1;
        }
        else {
          int v35 = *(_DWORD *)(v6 + 576);
        }
        while (1)
        {
          uint64_t v23 = (v20 + 1);
          if (v35 - 1 == v20) {
            break;
          }
          LODWORD(v2ArcSharedObject::ArcSharedObject(this, 0) = v20 + 1;
          int v36 = v23;
          if ((*(_DWORD *)(*(void *)(v6 + 560) + 72 * v23 + 8) & 0x80000000) != 0) {
            goto LABEL_49;
          }
        }
        int v36 = v35;
LABEL_49:
        LODWORD(v2ArcSharedObject::ArcSharedObject(this, 0) = v36;
      }
      while (v19 != v36);
    }
    re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)v64);
    uint64_t v37 = v59[1];
    if (v37)
    {
      uint64_t v38 = (void *)*v59;
      uint64_t v39 = *v59 + 8 * v37;
      while (1)
      {
        *(void *)&v64[0] = *v38;
        unint64_t v40 = *(void *)(*(void *)(v6 + 328)
                        + 16
                        * re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 320), v64)+ 8);
        re::DynamicBitset<unsigned long long,64ul>::clearBit(v6 + 432, v40);
        unint64_t v41 = (void *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v60, v40);
        uint64_t v42 = *(void *)(*v41 + 224);
        unint64_t v43 = v41[3];
        unint64_t v44 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v41[2] + 8, v43);
        if (*(_DWORD *)(v44 + 40)) {
          int v45 = (*(uint64_t (**)(uint64_t, void *, void *, unint64_t, unint64_t, void))(*(void *)v42 + 24))(v42, v63, v41, v43, v44, 0);
        }
        else {
          int v45 = 0;
        }
        unint64_t v46 = v41[5];
        unint64_t v47 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v41[2] + 8, v46);
        if (*(_DWORD *)(v47 + 40)) {
          v45 |= (*(uint64_t (**)(uint64_t, void *, void *, unint64_t, unint64_t, void))(*(void *)v42 + 32))(v42, v63, v41, v46, v47, 0);
        }
        unint64_t v48 = v41[6];
        unint64_t v49 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v41[2] + 8, v48);
        if (*(_DWORD *)(v49 + 40)) {
          break;
        }
        if (v45) {
          goto LABEL_59;
        }
LABEL_60:
        if (*(unsigned char *)(v6 + 496))
        {
          unint64_t v50 = *(void *)(v6 + 440);
          int v51 = *(_DWORD *)(v6 + 448);
          if (v50 < 0xB)
          {
            long long v54 = (uint64_t *)(v6 + 456);
            if ((v51 & 1) == 0) {
              long long v54 = *(uint64_t **)(v6 + 464);
            }
            if (!v50) {
              goto LABEL_78;
            }
            uint64_t v55 = 0;
            uint64_t v56 = 8 * v50;
            do
            {
              uint64_t v57 = *v54++;
              v55 |= v57;
              v56 -= 8;
            }
            while (v56);
            if (!v55) {
              goto LABEL_78;
            }
          }
          else
          {
            uint64_t v52 = (void *)(v6 + 456);
            if ((v51 & 1) == 0) {
              uint64_t v52 = *(void **)(v6 + 464);
            }
            uint64_t v53 = 8 * v50;
            while (!*v52)
            {
              ++v52;
              v53 -= 8;
              if (!v53) {
                goto LABEL_78;
              }
            }
          }
          long long v58 = *(re::ecs2::System **)(v6 + 480);
          if (!*((unsigned char *)v58 + 86)) {
            re::ecs2::System::queueToRun(v58, 0.0);
          }
        }
LABEL_78:
        if (++v38 == (void *)v39) {
          goto LABEL_79;
        }
      }
      if (((v45 | (*(unsigned int (**)(uint64_t, void *, void *, unint64_t, unint64_t, void))(*(void *)v42 + 40))(v42, v63, v41, v48, v49, 0)) & 1) == 0)goto LABEL_60; {
LABEL_59:
      }
      re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 432, v40);
      goto LABEL_60;
    }
LABEL_79:
    re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v61);
    return re::ProfilerTimeGuard<(re::ProfilerStatistic)122>::end((uint64_t)v62);
  }
  return result;
}

void *re::ecs2::allocInfo_MeshComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF862A0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF862A0))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF86330, "MeshComponent");
    __cxa_guard_release(&qword_26AF862A0);
  }
  return &unk_26AF86330;
}

void re::ecs2::initInfo_MeshComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v24[0] = 0xDD4C76EC162562E0;
  v24[1] = "MeshComponent";
  re::StringID::destroyString((re::StringID *)v24);
  *((_OWORD *)this + 2) = v25;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF862A8, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF862A8);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 4ArcSharedObject::ArcSharedObject(this, 0) = 3;
      *(void *)(v7 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF862C8 = v7;
      uint64_t v8 = re::introspectionAllocator((re *)v7);
      uint64_t v10 = re::IntrospectionInfo<re::DynamicArray<re::AssetHandle>>::get(1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "materials";
      *(void *)(v11 + 16) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x3800000001;
      *(_DWORD *)(v11 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v11 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      *(void *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF862D0 = v11;
      uint64_t v12 = re::introspectionAllocator((re *)v11);
      uint64_t v14 = re::introspect_AssetHandle((re *)1, v13);
      uint64_t v15 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 72, 8);
      *(_DWORD *)uint64_t v15 = 1;
      *(void *)(v15 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "mesh";
      *(void *)(v15 + 16) = v14;
      *(void *)(v15 + 24) = 0;
      *(void *)(v15 + 32) = 0x2000000002;
      *(_DWORD *)(v15 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v15 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      *(void *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_26AF862D8 = v15;
      unint64_t v16 = re::introspectionAllocator((re *)v15);
      int64x2_t v18 = re::introspect_float((re *)1, v17);
      uint64_t v19 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v16 + 32))(v16, 72, 8);
      *(_DWORD *)uint64_t v19 = 1;
      *(void *)(v19 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "boundsMargin";
      *(void *)(v19 + 16) = v18;
      *(void *)(v19 + 24) = 0;
      *(void *)(v19 + 32) = 0x6000000003;
      *(_DWORD *)(v19 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v19 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      *(void *)(v19 + 56) = 0;
      *(_DWORD *)(v19 + 64) = 0;
      qword_26AF862E0 = v19;
      uint64_t v20 = re::introspectionAllocator((re *)v19);
      re::IntrospectionInfo<re::DynamicArray<re::ecs2::EntityHandle>>::get((uint64_t)v20, v21);
      uint64_t v22 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v20 + 32))(v20, 72, 8);
      *(_DWORD *)uint64_t v22 = 1;
      *(void *)(v22 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "materialParameters";
      *(void *)(v22 + 16) = &qword_26AF862F0;
      *(void *)(v22 + 24) = 0;
      *(void *)(v22 + 32) = 0x6800000004;
      *(_DWORD *)(v22 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v22 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      *(void *)(v22 + 56) = 0;
      *(_DWORD *)(v22 + 64) = 0;
      qword_26AF862E8 = v22;
      __cxa_guard_release(&qword_26AF862A8);
    }
  }
  *((void *)this + 2) = 0x15000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 5;
  *((void *)this + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = &qword_26AF862C8;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::MeshComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 1ArcSharedObject::ArcSharedObject(this, 0) = re::internal::defaultDestruct<re::ecs2::MeshComponent>;
  *((void *)this + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::MeshComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::MeshComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v23 = v25;
}

void re::IntrospectionInfo<re::DynamicArray<re::ecs2::EntityHandle>>::get(uint64_t a1, const re::IntrospectionBase *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF862C0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF862C0))
  {
    re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_26AF862F0);
    qword_26AF862F0 = (uint64_t)&unk_26E6FB400;
    __cxa_guard_release(&qword_26AF862C0);
  }
  if ((byte_26AF86189 & 1) == 0)
  {
    long long v2 = re::ecs2::introspect_EntityHandle((re::ecs2 *)1, a2);
    if ((byte_26AF86189 & 1) == 0)
    {
      uint64_t v3 = (uint64_t)v2;
      byte_26AF86189 = 1;
      int v4 = *((_DWORD *)v2 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF862F0, 0);
      qword_26AF86300 = 0x2800000003;
      dword_26AF86308 = v4;
      word_26AF8630C = 0;
      *(void *)&xmmword_26AF86310 = 0;
      *((void *)&xmmword_26AF86310 + 1) = 0xFFFFFFFFLL;
      qword_26AF86320 = v3;
      unk_26AF86328 = 0;
      qword_26AF862F0 = (uint64_t)&unk_26E6FB400;
      re::IntrospectionRegistry::add(v5, v6);
      re::getPrettyTypeName((re *)&qword_26AF862F0, (const re::IntrospectionBase *)&v15);
      if (v16) {
        uint64_t v7 = *(const char **)&v17[7];
      }
      else {
        uint64_t v7 = v17;
      }
      if (v15 && (v16 & 1) != 0) {
        (*(void (**)(void))(*(void *)v15 + 40))();
      }
      long long v12 = *(_OWORD *)(v3 + 32);
      uint64_t v8 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v13);
      if (v8)
      {
        uint64_t v9 = *v8;
        *((void *)&v11 + 1) = v9;
      }
      else
      {
        long long v14 = v12;
        re::TypeBuilder::beginListType((uint64_t)&v15, v13, 1, 0x28uLL, 8uLL, &v14);
        re::TypeBuilder::setConstructor((uint64_t)&v15, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::EntityHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v15, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::EntityHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v15, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v15, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::EntityHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::EntityHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v15, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::EntityHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v15, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::EntityHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::EntityHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::EntityHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v15, v10);
      }
      xmmword_26AF86310 = v11;
      re::StringID::destroyString((re::StringID *)v13);
    }
  }
}

id *re::internal::defaultConstruct<re::ecs2::MeshComponent>(int a1, int a2, id *this)
{
  return re::ecs2::MeshComponent::MeshComponent(this);
}

uint64_t re::internal::defaultDestruct<re::ecs2::MeshComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

uint64_t re::internal::defaultDestructV2<re::ecs2::MeshComponent>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_MeshComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"MeshComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_MeshComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_MeshComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::MeshComponent>, this);
}

void *re::ecs2::allocInfo_MeshSystem(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF862B0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF862B0))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF863A8, "MeshSystem");
    __cxa_guard_release(&qword_26AF862B0);
  }
  return &unk_26AF863A8;
}

void re::ecs2::initInfo_MeshSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v5[0] = 0xF19CF6A8ED538;
  v5[1] = "MeshSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0x2E000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = &re::ecs2::initInfo_MeshSystem(re::IntrospectionBase *)::structureAttributes;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::MeshSystem>;
  *((void *)this + 1ArcSharedObject::ArcSharedObject(this, 0) = re::internal::defaultDestruct<re::ecs2::MeshSystem>;
  *((void *)this + 11) = re::internal::defaultRetain<re::ecs2::MeshSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 12) = re::internal::defaultRelease<re::ecs2::MeshSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::MeshSystem>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::MeshSystem>;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

re::ecs2::MeshSystem *re::internal::defaultConstruct<re::ecs2::MeshSystem>(int a1, int a2, re::ecs2::MeshSystem *this)
{
  return re::ecs2::MeshSystem::MeshSystem(this);
}

void *re::internal::defaultDestruct<re::ecs2::MeshSystem>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  a3[63] = (uint64_t)&unk_26E6FB110;
  re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit(a3 + 74);
  re::HashTable<unsigned long long,re::HashSet<re::ecs2::Entity *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit(a3 + 68);
  re::FixedArray<CoreIKTransform>::deinit(a3 + 65);
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a3 + 33);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 23));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 20));
  *a3 = (uint64_t)&unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultDestructV2<re::ecs2::MeshSystem>(uint64_t *a1)
{
  a1[63] = (uint64_t)&unk_26E6FB110;
  re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit(a1 + 74);
  re::HashTable<unsigned long long,re::HashSet<re::ecs2::Entity *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit(a1 + 68);
  re::FixedArray<CoreIKTransform>::deinit(a1 + 65);
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 33);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 23));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 20));
  *a1 = (uint64_t)&unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_MeshSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"MeshSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_MeshSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_MeshSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::MeshSystem>, this);
}

uint64_t re::ecs2::MeshComponentStateImpl::dependsOnComponents(re::ecs2::MeshComponentStateImpl *this)
{
  return *((void *)this + 4);
}

void re::ecs2::MeshSystem::~MeshSystem(re::ecs2::MeshSystem *this)
{
  *((void *)this + 63) = &unk_26E6FB110;
  re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 74);
  re::HashTable<unsigned long long,re::HashSet<re::ecs2::Entity *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)this + 68);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 65);
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 33);
  re::AssetHandle::~AssetHandle((re::ecs2::MeshSystem *)((char *)this + 184));
  re::AssetHandle::~AssetHandle((re::ecs2::MeshSystem *)((char *)this + 160));
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  *((void *)this + 63) = &unk_26E6FB110;
  re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 74);
  re::HashTable<unsigned long long,re::HashSet<re::ecs2::Entity *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)this + 68);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 65);
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 33);
  re::AssetHandle::~AssetHandle((re::ecs2::MeshSystem *)((char *)this + 184));
  re::AssetHandle::~AssetHandle((re::ecs2::MeshSystem *)((char *)this + 160));
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::MeshSystem::typeInfo(re::ecs2::MeshSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"MeshSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_MeshSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_MeshSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::MeshSystem>, 0);
}

void *re::FixedArray<re::ArgumentBufferTextureRecord>::deinit(void *result)
{
  if (*result)
  {
    uint64_t v1 = result;
    uint64_t v3 = result + 1;
    uint64_t v2 = result[1];
    if (v2)
    {
      long long v4 = (id *)result[2];
      uint64_t v5 = 32 * v2;
      do
      {
        re::ArgumentBufferTextureRecord::~ArgumentBufferTextureRecord(v4);
        long long v4 = (id *)(v6 + 32);
        v5 -= 32;
      }
      while (v5);
      double result = (void *)(*(uint64_t (**)(void, void))(*(void *)*v1 + 40))(*v1, v1[2]);
      *uint64_t v3 = 0;
      v3[1] = 0;
    }
    *uint64_t v1 = 0;
  }
  return result;
}

uint64_t re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::tryGet(uint64_t a1, uint64_t *a2)
{
  if (!*(void *)a1) {
    return 0;
  }
  uint64_t v2 = *a2;
  unint64_t v3 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  uint64_t v4 = *(unsigned int *)(*(void *)(a1 + 8)
                       + 4
                       * (((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) ^ ((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) >> 31))
                        % *(unsigned int *)(a1 + 24)));
  if (v4 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 16);
  if (*(void *)(v6 + 72 * v4 + 16) != v2)
  {
    while (1)
    {
      LODWORD(v4) = *(_DWORD *)(v6 + 72 * v4 + 8) & 0x7FFFFFFF;
      if (v4 == 0x7FFFFFFF) {
        break;
      }
      if (*(void *)(v6 + 72 * v4 + 16) == v2) {
        return v6 + 72 * v4 + 24;
      }
    }
    return 0;
  }
  return v6 + 72 * v4 + 24;
}

void *re::DynamicArray<re::BlurPlaneData>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      double result = (void *)*result;
      if (*v5)
      {
        if (!a2)
        {
          uint64_t v7 = 0;
          if (!v3) {
            goto LABEL_9;
          }
          goto LABEL_8;
        }
        if (is_mul_ok(a2, 0x90uLL))
        {
          uint64_t v2 = 144 * a2;
          double result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 144 * a2, 16);
          if (result)
          {
            uint64_t v7 = result;
            if (!v5[1])
            {
LABEL_9:
              _OWORD v5[4] = v7;
              v5[1] = a2;
              return result;
            }
LABEL_8:
            memcpy(v7, (const void *)v5[4], 144 * v5[2]);
            double result = (void *)(*(uint64_t (**)(void, void))(*(void *)*v5 + 40))(*v5, v5[4]);
            goto LABEL_9;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 144, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        double result = (void *)_os_crash();
        __break(1u);
      }
      else
      {
        double result = (void *)re::DynamicArray<re::BlurPlaneData>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
      }
    }
  }
  return result;
}

uint64_t re::BucketArray<re::MeshDeformation,8ul>::deinit(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2)
  {
    for (unint64_t i = 0; i != v2; ++i)
      re::BucketArray<re::MeshDeformation,8ul>::operator[](a1, i);
  }
  while (*(void *)(a1 + 8))
    re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)a1);
  uint64_t result = re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1);
  *(void *)(a1 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t re::BucketArray<re::MeshDeformation,8ul>::operator[](uint64_t a1, unint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1011, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(void *)(a1 + 8) <= a2 >> 3) {
    goto LABEL_8;
  }
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v3 = a1 + 24;
  }
  else {
    uint64_t v3 = *(void *)(a1 + 32);
  }
  return *(void *)(v3 + 8 * (a2 >> 3)) + 104 * (a2 & 7);
}

{
  unint64_t v2;
  uint64_t v3;

  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1018, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(void *)(a1 + 8) <= a2 >> 3) {
    goto LABEL_8;
  }
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v3 = a1 + 24;
  }
  else {
    uint64_t v3 = *(void *)(a1 + 32);
  }
  return *(void *)(v3 + 8 * (a2 >> 3)) + 104 * (a2 & 7);
}

void anonymous namespace'::getPerceptualBlendingMode(void)::$_0::operator()(uint64_t a1, const char *a2)
{
  re::Defaults::intValue((re::Defaults *)"perceptualBlendingMode", a2, (uint64_t)v4);
  if (v4[0]) {
    BOOL v2 = v5 == 0;
  }
  else {
    BOOL v2 = 1;
  }
  char v3 = !v2;
  re::internal::perceptual_alpha::never_use_this::g_enablePerceptualAlpha = v3;
}

uint64_t re::DebugSettingsManager::getWithErrorCode<int>(uint64_t a1, void *a2, _DWORD *a3)
{
  if (!*(unsigned char *)(a1 + 112)) {
    return 3;
  }
  if (!a3) {
    return 4;
  }
  uint64_t v6 = (std::mutex *)(a1 + 48);
  std::mutex::lock((std::mutex *)(a1 + 48));
  uint64_t v7 = re::DebugSettingsManager::contains<int>(a1, a2);
  if (!v7)
  {
    uint64_t v8 = 0x7FFFFFFFLL;
    if (*(void *)a1)
    {
      unint64_t v9 = 0xBF58476D1CE4E5B9 * ((*a2 >> 31) ^ (*a2 >> 1));
      uint64_t v10 = *(unsigned int *)(*(void *)(a1 + 8)
                            + 4
                            * (((0x94D049BB133111EBLL * (v9 ^ (v9 >> 27))) ^ ((0x94D049BB133111EBLL * (v9 ^ (v9 >> 27))) >> 31))
                             % *(unsigned int *)(a1 + 24)));
      if (v10 != 0x7FFFFFFF)
      {
        uint64_t v11 = *(void *)(a1 + 16);
        uint64_t v8 = 0x7FFFFFFFLL;
        while (!re::StringID::operator==((void *)(v11 + 40 * v10 + 8), a2))
        {
          uint64_t v10 = *(_DWORD *)(v11 + 40 * v10) & 0x7FFFFFFF;
          if (v10 == 0x7FFFFFFF) {
            goto LABEL_13;
          }
        }
        uint64_t v8 = v10;
      }
    }
LABEL_13:
    uint64_t v12 = *(void *)(a1 + 16);
    if (*(unsigned char *)(v12 + 40 * v8 + 24))
    {
      unint64_t v13 = *(void *)(v12 + 40 * v8 + 28);
      if (!HIDWORD(v13)) {
        *a3 = v13;
      }
      uint64_t v7 = HIDWORD(v13) != 0;
    }
    else
    {
      uint64_t v7 = 5;
    }
  }
  std::mutex::unlock(v6);
  return v7;
}

uint64_t re::DebugSettingsManager::contains<int>(uint64_t a1, void *a2)
{
  if (!*(unsigned char *)(a1 + 112)) {
    return 3;
  }
  uint64_t v2 = re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(a1, a2);
  if (!v2) {
    return 1;
  }
  if (*(unsigned char *)v2 && *(_DWORD *)(v2 + 8)) {
    return 2;
  }
  return 0;
}

void re::FixedArray<re::DeformationInputData>::init<>(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  *a1 = a2;
  a1[1] = a3;
  if (!a3) {
    return;
  }
  if (a3 >= 0x186186186186187)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 168, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v5 = 168 * a3;
  uint64_t v6 = (char *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a2 + 32))(a2, 168 * a3, 8);
  a1[2] = (uint64_t)v6;
  if (!v6)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v7, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    _os_crash();
    __break(1u);
    return;
  }
  uint64_t v8 = v6;
  if (a3 != 1)
  {
    bzero(v6, v5 - 168);
    v8 += v5 - 168;
  }
  *((void *)v8 + 2ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *((_OWORD *)v8 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0u;
  *((_OWORD *)v8 + 9) = 0u;
  *((_OWORD *)v8 + 6) = 0u;
  *((_OWORD *)v8 + 7) = 0u;
  *((_OWORD *)v8 + 4) = 0u;
  *((_OWORD *)v8 + 5) = 0u;
  *((_OWORD *)v8 + 2) = 0u;
  *((_OWORD *)v8 + 3) = 0u;
  *(_OWORD *)uint64_t v8 = 0u;
  *((_OWORD *)v8 + 1) = 0u;
}

uint64_t *re::BucketArray<re::MeshDeformation,8ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  char v3 = result;
  if (*result)
  {
    if (result[5] < 8 * a2)
    {
      while (1)
      {
        unint64_t v4 = v3[1];
        if (v4 <= a2) {
          break;
        }
        uint64_t result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)*v3 + 32))(*v3, 832, 0);
        uint64_t result = (uint64_t *)re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::add((uint64_t)v3, &v5);
        unint64_t v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

uint64_t re::BucketArray<re::MeshDeformation,8ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  *(void *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(void *)(a1 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
  uint64_t result = re::BucketArray<re::MeshDeformation,8ul>::setBucketsCapacity(a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

void re::internal::CallableMemFn<re::ecs2::MeshComponentStateImpl,REEventHandlerResult (re::ecs2::MeshComponentStateImpl::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::MeshComponentStateImpl,REEventHandlerResult (re::ecs2::MeshComponentStateImpl::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::MeshComponentStateImpl,REEventHandlerResult (re::ecs2::MeshComponentStateImpl::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6FB208;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::MeshComponentStateImpl,REEventHandlerResult (re::ecs2::MeshComponentStateImpl::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6FB208;
  *(void *)(a2 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::MeshComponentStateImpl,REEventHandlerResult (re::ecs2::MeshComponentStateImpl::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::size()
{
  return 32;
}

uint64_t re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::internalAdd(_anonymous_namespace_ *a1, void *a2, int *a3)
{
  if (!*((void *)a1 + 7))
  {
  }
  uint64_t v6 = *((void *)a1 + 4);
  if (!v6 || (unint64_t v7 = *((void *)a1 + 2), v7 > 8 * v6))
  {
    re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::resize((uint64_t *)a1, 1);
    unint64_t v7 = *((void *)a1 + 2);
  }
  unint64_t v8 = 0xBF58476D1CE4E5B9 * (*a2 ^ (*a2 >> 30));
  unint64_t v9 = (0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) ^ ((0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) >> 31);
  unint64_t v10 = v7 >> 4;
  unint64_t v11 = v9 % (v7 >> 4);
  uint64_t v12 = *(void *)a1;
  unint64_t v13 = __clz(__rbit64(*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*(void *)a1 + 16 * v11)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800)));
  if (v13 >= 0x40)
  {
    do
    {
      if (v11 + 1 == v10) {
        unint64_t v11 = 0;
      }
      else {
        ++v11;
      }
      unint64_t v13 = __clz(__rbit64(*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v12 + 16 * v11)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800)));
    }
    while (v13 > 0x3F);
  }
  uint64_t v14 = v12 + 16 * v11;
  BOOL v15 = *(unsigned __int8 *)(v14 + v13) == 255;
  *(unsigned char *)(v14 + vre::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 13) = v9 & 0x7F;
  unint64_t v16 = v13 + 16 * v11;
  int v17 = *a3;
  uint64_t v18 = *((void *)a1 + 1) + 16 * v16;
  *(void *)uint64_t v18 = *a2;
  *(_DWORD *)(v18 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v17;
  uint64_t v19 = *((void *)a1 + 4) - v15;
  ++*((void *)a1 + 3);
  *((void *)a1 + 4) = v19;
  re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::updateHashes((uint64_t)a1, v18);
  return *((void *)a1 + 1) + 16 * v16 + 8;
}

uint64_t re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::resize(uint64_t *a1, int a2)
{
  unint64_t v2 = a1[2];
  unint64_t v3 = a1[3] + a2;
  unint64_t v4 = (((151 * v3) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  if (v4 > v2)
  {
    unint64_t v5 = 3 * v2;
    unint64_t v6 = v5 << 6;
    uint64_t v7 = (v5 >> 1) & 0x1FFFFFFFFFFFFFFLL;
    if (v4 <= v6 >> 7) {
      unint64_t v4 = v7;
    }
    unint64_t v3 = (v4 << 7) / 0x97;
  }
  return re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::doResize(a1, v3);
}

uint64_t re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::updateHashes(uint64_t result, uint64_t a2)
{
  unint64_t v2 = 0xBF58476D1CE4E5B9 * (*(void *)a2 ^ (*(void *)a2 >> 30));
  unint64_t v3 = (0x94D049BB133111EBLL * (v2 ^ (v2 >> 27))) ^ ((0x94D049BB133111EBLL * (v2 ^ (v2 >> 27))) >> 31);
  unint64_t v4 = 0xBF58476D1CE4E5B9 * (*(unsigned int *)(a2 + 8) ^ ((unint64_t)*(unsigned int *)(a2 + 8) >> 30));
  unint64_t v5 = v3 ^ *(void *)(result + 40);
  unint64_t v6 = *(void *)(result + 48) ^ v3 ^ ((v3 << 6)
                                      + (v3 >> 2)
                                      + ((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) ^ ((0x94D049BB133111EBLL
                                                                                      * (v4 ^ (v4 >> 27))) >> 31))
                                      - 0x61C8864680B583E9);
  *(void *)(result + 4ArcSharedObject::ArcSharedObject(this, 0) = v5;
  *(void *)(result + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v6;
  return result;
}

uint64_t re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::doResize(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = a1[7];
  memset(v22, 0, sizeof(v22));
  re::HashBrown<unsigned long long,re::ecs2::PortalServiceQuery::WorldType,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::init(v22, v4, a2);
  v20[0] = a1;
  unint64_t v5 = a1[2];
  if (v5 >= 0x10)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a1;
    unint64_t v8 = v5 >> 4;
    while (1)
    {
      unsigned __int16 v9 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v7 + v6)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800).u16[0];
      v20[1] = (unsigned __int16)~v9;
      if (v9 != 0xFFFF) {
        break;
      }
      v6 += 16;
      if (!--v8) {
        goto LABEL_9;
      }
    }
    uint64_t v10 = __clz(__rbit64((unsigned __int16)~v9)) + v6;
    uint64_t v21 = v10;
    if (v10 != -1)
    {
      do
      {
        re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::internalAdd((_anonymous_namespace_ *)v22, (void *)(*(void *)(v20[0] + 8) + 16 * v10), (_DWORD *)(*(void *)(v20[0] + 8) + 16 * v10 + 8));
        re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v20);
        uint64_t v10 = v21;
      }
      while (v21 != -1);
      unint64_t v5 = a1[2];
    }
  }
LABEL_9:
  uint64_t v12 = *((void *)&v22[3] + 1);
  *((void *)&v22[3] + 1) = a1[7];
  uint64_t result = *((void *)&v22[3] + 1);
  long long v13 = v22[0];
  long long v14 = v22[1];
  *(void *)&v22[1] = v5;
  uint64_t v15 = *a1;
  uint64_t v16 = a1[1];
  *(void *)&v22[0] = *a1;
  *((void *)&v22[0] + 1) = v16;
  long long v17 = v22[2];
  long long v18 = *(_OWORD *)(a1 + 5);
  a1[6] = *(void *)&v22[3];
  a1[7] = v12;
  *(_OWORD *)((char *)&v22[2] + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v18;
  long long v19 = *(_OWORD *)(a1 + 3);
  *(_OWORD *)a1 = v13;
  *((_OWORD *)a1 + 1) = v14;
  *((_OWORD *)a1 + 2) = v17;
  *(_OWORD *)((char *)&v22[1] + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v19;
  if (result)
  {
    if (v16) {
      *((void *)&v22[0] + 1) = 0;
    }
    if (v15) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 40))(result);
    }
  }
  return result;
}

uint64_t re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::internalAdd(_anonymous_namespace_ *a1, void *a2, _DWORD *a3)
{
  if (!*((void *)a1 + 7))
  {
  }
  uint64_t v6 = *((void *)a1 + 4);
  if (!v6 || (unint64_t v7 = *((void *)a1 + 2), v7 > 8 * v6))
  {
    re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::resize(a1, 1);
    unint64_t v7 = *((void *)a1 + 2);
  }
  unint64_t v8 = 0xBF58476D1CE4E5B9 * (*a2 ^ (*a2 >> 30));
  unint64_t v9 = (0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) ^ ((0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) >> 31);
  unint64_t v10 = v7 >> 4;
  uint64_t v11 = *(void *)a1;
  unint64_t v12 = v9 % v10;
  while (1)
  {
    unint64_t v13 = __clz(__rbit64(*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v11 + 16 * v12)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800)));
    if (v13 < 0x40) {
      break;
    }
    if (v12 + 1 == v10) {
      unint64_t v12 = 0;
    }
    else {
      ++v12;
    }
    if (v12 == v9 % v10)
    {
      re::internal::assertLog((re::internal *)4, (uint64_t)a2, -1.79399301e-307, 4.74803907e-38, "assertion failure: '%s' (%s:line %i) Unexpected full hash-table", "blockIndex != h1(key) % blockCount()", "internalAdd", 656);
      _os_crash();
      __break(1u);
      break;
    }
  }
  uint64_t v14 = v11 + 16 * v12;
  BOOL v15 = *(unsigned __int8 *)(v14 + v13) == 255;
  *(unsigned char *)(v14 + vre::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 13) = v9 & 0x7F;
  unint64_t v16 = v13 + 16 * v12;
  LODWORD(v14) = *a3;
  uint64_t v17 = *((void *)a1 + 1) + 16 * v16;
  *(void *)uint64_t v17 = *a2;
  *(_DWORD *)(v17 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v14;
  uint64_t v18 = *((void *)a1 + 4) - v15;
  ++*((void *)a1 + 3);
  *((void *)a1 + 4) = v18;
  re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::updateHashes((uint64_t)a1, v17);
  return *((void *)a1 + 1) + 16 * v16 + 8;
}

void *re::DynamicArray<re::TextureHandle>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    uint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::TextureHandle>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::TextureHandle>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void *re::DynamicArray<re::TextureHandle>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      uint64_t result = (void *)*result;
      if (!*v5)
      {
        uint64_t result = (void *)re::DynamicArray<re::TextureHandle>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (a2 >> 60)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 16, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          uint64_t v2 = 16 * a2;
          uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 16 * a2, 8);
          if (result)
          {
            unint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_21;
            }
            goto LABEL_11;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        uint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      unint64_t v7 = 0;
      if (!v3)
      {
LABEL_21:
        _OWORD v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      unint64_t v8 = (re::TextureHandle *)v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = 16 * v9;
        uint64_t v11 = v7;
        do
        {
          *uint64_t v11 = 0;
          v11[1] = 0;
          uint64_t v12 = *(void *)v8;
          if (*((void *)v8 + 1)) {
            BOOL v13 = v12 == 0;
          }
          else {
            BOOL v13 = 1;
          }
          if (!v13)
          {
            *uint64_t v11 = v12;
            v11[1] = *((void *)v8 + 1);
            *((void *)v8 + 1) = 0;
          }
          re::TextureHandle::invalidate(v8);
          unint64_t v8 = (re::TextureHandle *)((char *)v8 + 16);
          v11 += 2;
          v10 -= 16;
        }
        while (v10);
        unint64_t v8 = (re::TextureHandle *)v5[4];
      }
      uint64_t result = (void *)(*(uint64_t (**)(void, re::TextureHandle *))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_21;
    }
  }
  return result;
}

uint64_t re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::addUninitialized(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 40);
  unint64_t v3 = *(void *)(a1 + 8);
  if (v2 + 1 > 8 * v3)
  {
    re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::setBucketsCapacity((uint64_t *)a1, (v2 + 8) >> 3);
    unint64_t v3 = *(void *)(a1 + 8);
  }
  if (v3 <= v2 >> 3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v4 = a1 + 24;
  }
  else {
    uint64_t v4 = *(void *)(a1 + 32);
  }
  uint64_t v5 = *(void *)(v4 + 8 * (v2 >> 3));
  ++*(void *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  return v5 + 8 * (v2 & 7);
}

uint64_t *re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  unint64_t v3 = result;
  if (*result)
  {
    if (result[5] < 8 * a2)
    {
      while (1)
      {
        unint64_t v4 = v3[1];
        if (v4 <= a2) {
          break;
        }
        uint64_t result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)*v3 + 32))(*v3, 64, 0);
        uint64_t result = (uint64_t *)re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::add((uint64_t)v3, &v5);
        unint64_t v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

uint64_t *re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  *(void *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(void *)(a1 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
  uint64_t result = re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::setBucketsCapacity((uint64_t *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

void *re::FixedArray<re::AABB>::copy(void *result, const void **a2)
{
  unint64_t v2 = (const void *)result[1];
  if (v2 == a2[1])
  {
    if (v2)
    {
      unint64_t v3 = *a2;
      unint64_t v4 = (void *)result[2];
      return memmove(v4, v3, 32 * (void)v2);
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Cannot copy from a Slice of a different size", "m_size == other.size()", "copy", 378);
    uint64_t result = (void *)_os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::HashTable<re::ecs2::Scene *,re::HashSet<re::ecs2::Entity *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, uint64_t *a5)
{
  uint64_t v10 = *(unsigned int *)(a1 + 36);
  if (v10 == 0x7FFFFFFF)
  {
    uint64_t v10 = *(unsigned int *)(a1 + 32);
    int v11 = v10;
    if (v10 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::ecs2::Scene *,re::HashSet<re::ecs2::Entity *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v11 + 1;
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 72 * v10 + 8);
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 72 * v10 + 8);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v12 + 72 * v10 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v13 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + 72 * v10 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 72 * v10 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 72 * v1ArcSharedObject::ArcSharedObject(this, 0) = a3;
  *(void *)(*(void *)(a1 + 16) + 72 * v10 + 16) = *a4;
  uint64_t v14 = *(void *)(a1 + 16) + 72 * v10;
  *(_OWORD *)(v14 + 24) = 0u;
  v14 += 24;
  *(_DWORD *)(v14 + 32) = 0;
  *(_OWORD *)(v14 + 16) = 0u;
  *(void *)(v14 + 36) = 0x7FFFFFFFLL;
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)v14, a5);
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return v10;
}

void re::HashTable<re::ecs2::Scene *,re::HashSet<re::ecs2::Entity *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(void *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<char const*,re::AssetLoadRequest::LoadStatistics::AssetTypeStats,re::Hash<char const*>,re::EqualTo<char const*>,true,false>::init((uint64_t)v13, v4, a2);
      long long v5 = *(_OWORD *)v13;
      *(_OWORD *)int v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      uint64_t v6 = *(void *)&v13[16];
      *(void *)&v13[16] = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = v6;
      long long v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      unsigned int v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      unsigned int v9 = v7;
      if (v7)
      {
        uint64_t v10 = 0;
        unint64_t v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(void *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashTable<re::ecs2::Scene *,re::HashSet<re::ecs2::Entity *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::addAsMove(a1, *(void *)(*(void *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(*(void *)&v13[16] + v10), *(void *)&v13[16] + v10 + 16, *(void *)&v13[16] + v10 + 24);
            unsigned int v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 72;
        }
        while (v11 < v9);
      }
      re::HashTable<unsigned long long,re::HashSet<re::ecs2::Entity *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2) {
      signed int v12 = a2;
    }
    else {
      signed int v12 = 3;
    }
  }
}

uint64_t re::DynamicArray<re::StencilPortal>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    unint64_t v3 = *(re::StringID **)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = 736 * v4;
        do
        {
          re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)v3 + 288);
          re::StringID::destroyString(v3);
          unint64_t v3 = (re::StringID *)((char *)v3 + 736);
          v5 -= 736;
        }
        while (v5);
        uint64_t result = *(void *)a1;
        unint64_t v3 = *(re::StringID **)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, re::StringID *))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

void re::HashTable<unsigned long long,re::ecs2::MeshComponentStateImpl::processUpdatingComponents(re::ecs2::System::UpdateContext const&,re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent> *,re::ecs2::ComponentBuckets<re::ecs2::MeshComponent>::BucketIteration,void *)::PerWorldData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  uint64_t v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    unsigned int v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    long long v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      uint64_t v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  signed int v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + (v10 << 8), 16);
  if (v12)
  {
    uint64_t v14 = v12;
    *(void *)(a1 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &unk_2343655D0, 4 * v10);
    }
    *(void *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

uint64_t re::HashTable<unsigned long long,re::ecs2::MeshComponentStateImpl::processUpdatingComponents(re::ecs2::System::UpdateContext const&,re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent> *,re::ecs2::ComponentBuckets<re::ecs2::MeshComponent>::BucketIteration,void *)::PerWorldData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v10 = *(unsigned int *)(a1 + 36);
  if (v10 == 0x7FFFFFFF)
  {
    uint64_t v10 = *(unsigned int *)(a1 + 32);
    int v11 = v10;
    if (v10 == *(_DWORD *)(a1 + 24))
    {
      int v12 = *(_DWORD *)(a1 + 28);
      signed int v13 = 2 * v12;
      uint64_t v14 = *(void *)a1;
      if (*(void *)a1)
      {
        if (v13) {
          BOOL v15 = v10 == v13;
        }
        else {
          BOOL v15 = 1;
        }
        if (!v15 && (v12 & 0x80000000) == 0)
        {
          memset(v36, 0, 36);
          *(void *)&v36[36] = 0x7FFFFFFFLL;
          re::HashTable<unsigned long long,re::ecs2::MeshComponentStateImpl::processUpdatingComponents(re::ecs2::System::UpdateContext const&,re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent> *,re::ecs2::ComponentBuckets<re::ecs2::MeshComponent>::BucketIteration,void *)::PerWorldData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v36, v14, v13);
          long long v16 = *(_OWORD *)v36;
          *(_OWORD *)int v36 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v16;
          uint64_t v17 = *(void *)&v36[16];
          uint64_t v18 = *(void *)(a1 + 16);
          *(void *)&v36[16] = v18;
          *(void *)(a1 + 16) = v17;
          long long v20 = *(_OWORD *)&v36[24];
          *(_OWORD *)&v36[24] = *(_OWORD *)(a1 + 24);
          unsigned int v19 = *(_DWORD *)&v36[32];
          *(_OWORD *)(a1 + 24) = v20;
          uint64_t v21 = v19;
          if (v19)
          {
            uint64_t v22 = v18 + 16;
            do
            {
              if ((*(_DWORD *)(v22 - 8) & 0x80000000) != 0) {
                re::HashTable<unsigned long long,re::ecs2::MeshComponentStateImpl::processUpdatingComponents(re::ecs2::System::UpdateContext const&,re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent> *,re::ecs2::ComponentBuckets<re::ecs2::MeshComponent>::BucketIteration,void *)::PerWorldData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, *(void *)(v22 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(v22 - 16), v22, v22 + 8);
              }
              v22 += 256;
              --v21;
            }
            while (v21);
          }
          re::HashTable<unsigned long long,re::ecs2::MeshComponentStateImpl::processUpdatingComponents(re::ecs2::System::UpdateContext const&,re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent> *,re::ecs2::ComponentBuckets<re::ecs2::MeshComponent>::BucketIteration,void *)::PerWorldData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::~HashTable((uint64_t *)v36);
        }
      }
      else
      {
        if (v13) {
          signed int v25 = 2 * v12;
        }
        else {
          signed int v25 = 3;
        }
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v11 + 1;
    uint64_t v23 = *(void *)(a1 + 16);
    int v24 = *(_DWORD *)(v23 + (v10 << 8) + 8);
  }
  else
  {
    uint64_t v23 = *(void *)(a1 + 16);
    int v24 = *(_DWORD *)(v23 + (v10 << 8) + 8);
    *(_DWORD *)(a1 + 36) = v24 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v23 + (v10 << 8) + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v24 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + (v10 << 8) + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = *(_DWORD *)(*(void *)(a1 + 16) + (v10 << 8) + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + (v10 << re::ecs2::PortalManagerStateTracking::~PortalManagerStateTracking((re::ecs2::PortalManager *)((char *)this + 8)) = a3;
  *(void *)(*(void *)(a1 + 16) + (v10 << 8) + 16) = *a4;
  uint64_t v26 = *(void *)(a1 + 16) + (v10 << 8);
  *(void *)(v26 + 56) = 0;
  *(_DWORD *)(v26 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
  *(void *)(v26 + 32) = 0;
  *(void *)(v26 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *(void *)(v26 + 24) = 0;
  *(void *)(v26 + 24) = *(void *)a5;
  *(void *)a5 = 0;
  *(void *)(v26 + 32) = *(void *)(a5 + 8);
  *(void *)(a5 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
  uint64_t v27 = *(void *)(v26 + 40);
  *(void *)(v26 + 4ArcSharedObject::ArcSharedObject(this, 0) = *(void *)(a5 + 16);
  *(void *)(a5 + 16) = v27;
  uint64_t v28 = *(void *)(v26 + 56);
  *(void *)(v26 + 56) = *(void *)(a5 + 32);
  *(void *)(a5 + 32) = v28;
  ++*(_DWORD *)(a5 + 24);
  ++*(_DWORD *)(v26 + 48);
  *(void *)(v26 + 64) = 0;
  *(void *)(v26 + 72) = 0;
  v26 += 64;
  *(_DWORD *)(v26 + 16) = 1;
  *(void *)(v26 + 32) = 0;
  *(void *)(v26 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *(void *)(v26 + 24) = 0;
  *(_DWORD *)(v26 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
  re::BucketArray<RESubscriptionHandle,8ul>::swap(v26, a5 + 40);
  *(void *)(v26 + 8re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
  *(_DWORD *)(v26 + 8ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *(void *)(v26 + 64) = 0;
  *(void *)(v26 + 72) = 0;
  *(void *)(v26 + 56) = 0;
  *(void *)(v26 + 56) = *(void *)(a5 + 96);
  *(void *)(a5 + 96) = 0;
  *(void *)(v26 + 64) = *(void *)(a5 + 104);
  *(void *)(a5 + 104) = 0;
  uint64_t v29 = *(void *)(v26 + 72);
  *(void *)(v26 + 72) = *(void *)(a5 + 112);
  *(void *)(a5 + 112) = v29;
  uint64_t v30 = *(void *)(v26 + 88);
  *(void *)(v26 + 8re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = *(void *)(a5 + 128);
  *(void *)(a5 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 28) = v30;
  ++*(_DWORD *)(a5 + 120);
  ++*(_DWORD *)(v26 + 80);
  *(unsigned char *)(v26 + 96) = *(unsigned char *)(a5 + 136);
  *(void *)(v26 + 136) = 0;
  *(void *)(v26 + 112) = 0;
  *(void *)(v26 + 12ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *(void *)(v26 + 104) = 0;
  *(_DWORD *)(v26 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 28) = 0;
  *(void *)(v26 + 104) = *(void *)(a5 + 144);
  *(void *)(a5 + 144) = 0;
  *(void *)(v26 + 112) = *(void *)(a5 + 152);
  *(void *)(a5 + 152) = 0;
  uint64_t v31 = *(void *)(v26 + 120);
  *(void *)(v26 + 12ArcSharedObject::ArcSharedObject(this, 0) = *(void *)(a5 + 160);
  *(void *)(a5 + 1re::HashTable<re::ecs2::Entity const*,re::ecs2::BillboardData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::deinit((uint64_t *)this + 60) = v31;
  uint64_t v32 = *(void *)(v26 + 136);
  *(void *)(v26 + 136) = *(void *)(a5 + 176);
  *(void *)(a5 + 176) = v32;
  ++*(_DWORD *)(a5 + 168);
  ++*(_DWORD *)(v26 + 128);
  *(void *)(v26 + 176) = 0;
  *(void *)(v26 + 152) = 0;
  *(void *)(v26 + 1re::HashTable<re::ecs2::Entity const*,re::ecs2::BillboardData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::deinit((uint64_t *)this + 60) = 0;
  *(void *)(v26 + 144) = 0;
  *(_DWORD *)(v26 + 16re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
  *(void *)(v26 + 144) = *(void *)(a5 + 184);
  *(void *)(a5 + 184) = 0;
  *(void *)(v26 + 152) = *(void *)(a5 + 192);
  *(void *)(a5 + 192) = 0;
  uint64_t v33 = *(void *)(v26 + 160);
  *(void *)(v26 + 1re::HashTable<re::ecs2::Entity const*,re::ecs2::BillboardData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::deinit((uint64_t *)this + 60) = *(void *)(a5 + 200);
  *(void *)(a5 + 20ArcSharedObject::ArcSharedObject(this, 0) = v33;
  uint64_t v34 = *(void *)(v26 + 176);
  *(void *)(v26 + 176) = *(void *)(a5 + 216);
  *(void *)(a5 + 216) = v34;
  ++*(_DWORD *)(a5 + 208);
  ++*(_DWORD *)(v26 + 168);
  *(_WORD *)(v26 + 184) = *(_WORD *)(a5 + 224);
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return v10;
}

void *re::DynamicArray<re::StencilPortal>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      uint64_t result = (void *)*result;
      if (!*v5)
      {
        uint64_t result = (void *)re::DynamicArray<re::StencilPortal>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x2E0uLL))
        {
          uint64_t v2 = 736 * a2;
          uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 736 * a2, 16);
          if (result)
          {
            unsigned int v7 = result;
            if (!v5[1]) {
              goto LABEL_22;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 736, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        uint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      unsigned int v7 = 0;
      if (!v3)
      {
LABEL_22:
        _OWORD v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      long long v8 = (uint64_t *)v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = &v8[92 * v9];
        int v11 = v7;
        do
        {
          uint64_t v12 = *v8;
          *int v11 = *v11 & 0xFFFFFFFFFFFFFFFELL | *v8 & 1;
          *int v11 = *v8 & 0xFFFFFFFFFFFFFFFELL | v12 & 1;
          uint64_t v13 = v8[2];
          v11[1] = v8[1];
          *long long v8 = 0;
          v8[1] = (uint64_t)"";
          void v11[2] = v13;
          long long v14 = *((_OWORD *)v8 + 10);
          long long v15 = *((_OWORD *)v8 + 11);
          long long v16 = *((_OWORD *)v8 + 13);
          *((_OWORD *)v11 + 12) = *((_OWORD *)v8 + 12);
          *((_OWORD *)v11 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 13) = v16;
          *((_OWORD *)v11 + 1ArcSharedObject::ArcSharedObject(this, 0) = v14;
          *((_OWORD *)v11 + 11) = v15;
          long long v17 = *((_OWORD *)v8 + 6);
          long long v18 = *((_OWORD *)v8 + 7);
          long long v19 = *((_OWORD *)v8 + 9);
          *((_OWORD *)v11 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = *((_OWORD *)v8 + 8);
          *((_OWORD *)v11 + 9) = v19;
          *((_OWORD *)v11 + 6) = v17;
          *((_OWORD *)v11 + 7) = v18;
          long long v20 = *((_OWORD *)v8 + 2);
          long long v21 = *((_OWORD *)v8 + 3);
          long long v22 = *((_OWORD *)v8 + 5);
          *((_OWORD *)v11 + 4) = *((_OWORD *)v8 + 4);
          *((_OWORD *)v11 + 5) = v22;
          *((_OWORD *)v11 + 2) = v20;
          *((_OWORD *)v11 + 3) = v21;
          long long v23 = *((_OWORD *)v8 + 14);
          long long v24 = *((_OWORD *)v8 + 15);
          long long v25 = *((_OWORD *)v8 + 17);
          *((_OWORD *)v11 + 16) = *((_OWORD *)v8 + 16);
          *((_OWORD *)v11 + 17) = v25;
          *((_OWORD *)v11 + 14) = v23;
          *((_OWORD *)v11 + re::HashTable<re::ecs2::Scene *,re::DynamicArray<RESubscriptionHandle>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 15) = v24;
          *((_OWORD *)v11 + 2ArcSharedObject::ArcSharedObject(this, 0) = 0u;
          *((_OWORD *)v11 + 21) = 0u;
          *((_OWORD *)v11 + 1re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0u;
          *((_OWORD *)v11 + 19) = 0u;
          uint64_t v26 = v8 + 36;
          re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::swap((uint64_t *)v11 + 36, v8 + 36);
          *((_DWORD *)v11 + 8re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = *((_DWORD *)v8 + 88);
          int v27 = *((unsigned __int8 *)v8 + 360);
          *((unsigned char *)v11 + 3re::HashTable<re::ecs2::Entity const*,re::ecs2::BillboardData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::deinit((uint64_t *)this + 60) = v27;
          if (v27) {
            v11[46] = v8[46];
          }
          *(_OWORD *)(v11 + 47) = *(_OWORD *)(v8 + 47);
          long long v28 = *(_OWORD *)(v8 + 49);
          long long v29 = *(_OWORD *)(v8 + 51);
          long long v30 = *(_OWORD *)(v8 + 53);
          *(_OWORD *)(v11 + 55) = *(_OWORD *)(v8 + 55);
          *(_OWORD *)(v11 + 53) = v30;
          *(_OWORD *)(v11 + 51) = v29;
          *(_OWORD *)(v11 + 49) = v28;
          long long v31 = *(_OWORD *)(v8 + 57);
          long long v32 = *(_OWORD *)(v8 + 59);
          long long v33 = *(_OWORD *)(v8 + 61);
          *(_OWORD *)(v11 + 63) = *(_OWORD *)(v8 + 63);
          *(_OWORD *)(v11 + 61) = v33;
          *(_OWORD *)(v11 + 59) = v32;
          *(_OWORD *)(v11 + 57) = v31;
          int v34 = *((unsigned __int8 *)v8 + 528);
          *((unsigned char *)v11 + 5re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 28) = v34;
          if (v34)
          {
            long long v35 = *((_OWORD *)v8 + 35);
            *((_OWORD *)v11 + 34) = *((_OWORD *)v8 + 34);
            *((_OWORD *)v11 + 35) = v35;
          }
          v11[72] = v8[72];
          int v36 = *((unsigned __int8 *)v8 + 592);
          *((unsigned char *)v11 + 592) = v36;
          if (v36)
          {
            long long v37 = *((_OWORD *)v8 + 38);
            long long v38 = *((_OWORD *)v8 + 39);
            long long v39 = *((_OWORD *)v8 + 41);
            *((_OWORD *)v11 + 4ArcSharedObject::ArcSharedObject(this, 0) = *((_OWORD *)v8 + 40);
            *((_OWORD *)v11 + 41) = v39;
            *((_OWORD *)v11 + 3re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v37;
            *((_OWORD *)v11 + 39) = v38;
          }
          v11[84] = v8[84];
          long long v40 = *((_OWORD *)v8 + 43);
          long long v41 = *((_OWORD *)v8 + 44);
          *(_DWORD *)((char *)v11 + 719) = *(_DWORD *)((char *)v8 + 719);
          *((_OWORD *)v11 + 43) = v40;
          *((_OWORD *)v11 + 44) = v41;
          re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)(v8 + 36));
          re::StringID::destroyString((re::StringID *)v8);
          v8 += 92;
          v11 += 92;
        }
        while (v26 + 56 != v10);
        long long v8 = (uint64_t *)v5[4];
      }
      uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t *))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_22;
    }
  }
  return result;
}

uint64_t re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::HashBrown(uint64_t a1, uint64_t *a2)
{
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  uint64_t v4 = a2[7];
  if (v4)
  {
    re::HashBrown<unsigned long long,re::ecs2::PortalServiceQuery::WorldType,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::init((void *)a1, v4, a2[3]);
    re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::copy((_anonymous_namespace_ *)a1, a2);
  }
  return a1;
}

_anonymous_namespace_ *re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::copy(_anonymous_namespace_ *result, uint64_t *a2)
{
  uint64_t v2 = result;
  *((void *)result + 5) = 0;
  *((void *)result + 6) = 0;
  unint64_t v3 = *((void *)result + 2);
  *((void *)result + 3) = 0;
  *((void *)result + 4) = v3;
  if (v3 >= 0x10)
  {
    unint64_t v4 = 0;
    *(void *)&long long v5 = -1;
    *((void *)&v5 + 1) = -1;
    do
      *(_OWORD *)(*(void *)result + 16 * v4++) = v5;
    while (v4 < *((void *)result + 2) >> 4);
  }
  v13[0] = a2;
  unint64_t v6 = a2[2];
  if (v6 >= 0x10)
  {
    uint64_t v7 = 0;
    uint64_t v8 = *a2;
    unint64_t v9 = v6 >> 4;
    while (1)
    {
      unsigned __int16 v10 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v8 + v7)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800).u16[0];
      v13[1] = (unsigned __int16)~v10;
      if (v10 != 0xFFFF) {
        break;
      }
      v7 += 16;
      if (!--v9) {
        return result;
      }
    }
    uint64_t v11 = __clz(__rbit64((unsigned __int16)~v10)) + v7;
    for (i = v11; i != -1; uint64_t v11 = i)
    {
      long long v12 = *(_OWORD *)(*(void *)(v13[0] + 8) + 16 * v11);
      re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::internalAdd(v2, &v12, (_DWORD *)&v12 + 2);
      uint64_t result = (_anonymous_namespace_ *)re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v13);
    }
  }
  return result;
}

void *re::BucketArray<re::GlobalDirectionalLightRenderFrameData,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  *(void *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(void *)(a1 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
  uint64_t result = re::BucketArray<re::GlobalDirectionalLightRenderFrameData,4ul>::setBucketsCapacity((void *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

void *re::BucketArray<re::GlobalDirectionalLightRenderFrameData,4ul>::setBucketsCapacity(void *result, unint64_t a2)
{
  unint64_t v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      unint64_t v4 = result[1];
      if (v4 > a2)
      {
        int v5 = *((_DWORD *)result + 4);
        do
        {
          unint64_t v6 = v3 + 3;
          if ((v5 & 1) == 0) {
            unint64_t v6 = (void *)v3[4];
          }
          uint64_t result = (void *)(*(uint64_t (**)(void, void))(*(void *)*v3 + 40))(*v3, v6[v4 - 1]);
          int v7 = *((_DWORD *)v3 + 4);
          unint64_t v4 = v3[1] - 1;
          v3[1] = v4;
          int v5 = v7 + 2;
          *((_DWORD *)v3 + 4) = v5;
        }
        while (v4 > a2);
      }
      if (v4 < a2)
      {
        uint64_t v8 = v3 + 3;
        do
        {
          uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t, void))(*(void *)*v3 + 32))(*v3, 4, 0);
          unint64_t v9 = result;
          if (*v3)
          {
            unint64_t v10 = v3[1];
            int v11 = *((_DWORD *)v3 + 4);
            if ((v11 & 1) == 0)
            {
              unint64_t v12 = *v8;
              BOOL v14 = v10 >= *v8;
              unint64_t v13 = v10 + 1;
              BOOL v14 = !v14 || v12 >= v13;
              if (v14) {
                goto LABEL_24;
              }
              unint64_t v15 = 2 * v12;
              goto LABEL_20;
            }
            unint64_t v13 = v10 + 1;
            if (v13 >= 3)
            {
              unint64_t v15 = 4;
LABEL_20:
              if (v15 <= v13) {
                unint64_t v17 = v13;
              }
              else {
                unint64_t v17 = v15;
              }
              uint64_t result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v17);
              int v11 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            unint64_t v16 = v3[1] + 1;
            uint64_t result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v16);
            int v11 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + 4) = v11;
          }
LABEL_24:
          long long v18 = v3 + 3;
          if ((v11 & 1) == 0) {
            long long v18 = (void *)v3[4];
          }
          unint64_t v19 = v3[1];
          v18[v19++] = v9;
          v3[1] = v19;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v19 < a2);
      }
    }
  }
  else
  {
  }
  return result;
}

void *std::__any_imp::_SmallHandler<re::BucketArray<re::GlobalDirectionalLightRenderFrameData,4ul> *>::__handle[abi:nn180100](unsigned int a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1;
  switch(v5)
  {
    case 1:
      uint64_t result = 0;
      uint64_t v8 = a2[1];
      *a3 = std::__any_imp::_SmallHandler<re::BucketArray<re::GlobalDirectionalLightRenderFrameData,4ul> *>::__handle[abi:nn180100];
      a3[1] = v8;
      break;
    case 2:
      uint64_t result = 0;
      uint64_t v9 = a2[1];
      *a3 = std::__any_imp::_SmallHandler<re::BucketArray<re::GlobalDirectionalLightRenderFrameData,4ul> *>::__handle[abi:nn180100];
      a3[1] = v9;
      goto LABEL_5;
    case 3:
      if (a4) {
      else
      }
        BOOL v10 = a5 == &std::__any_imp::__unique_typeinfo<re::BucketArray<re::GlobalDirectionalLightRenderFrameData,4ul> *>::__id;
      if (v10) {
        uint64_t result = a2 + 1;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 4:
      return result;
    default:
      uint64_t result = 0;
LABEL_5:
      *a2 = 0;
      break;
  }
  return result;
}

uint64_t *re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v84 = *MEMORY[0x263EF8340];
  *(void *)a1 = a2;
  *(void *)(a1 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = a3;
  *(void *)(a1 + 16) = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a3 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)+ 480;
  for (uint64_t i = 24; i != 56; i += 8)
  {
    int v7 = (_anonymous_namespace_ *)re::ecs2::ComponentBucketsBase::addBucket(*(re::ecs2::ComponentBucketsBase **)(a1 + 16));
    *(void *)(a1 + i) = v7;
  }
  uint64_t v9 = *(re::EventBus **)(a3 + 288);
  if (v9)
  {
    uint64_t v82 = re::globalAllocators((re *)result)[2];
    BOOL v10 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v82 + 32))(v82, 32, 0);
    *BOOL v10 = &unk_26E6FB2A0;
    v10[1] = a1;
    void v10[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>::componentChangedHandler<REComponentDidChangeEvent>;
    void v10[3] = 0;
    float32x4_t v83 = v10;
    uint64_t v11 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v81, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    uint64_t v13 = v12;
    BOOL v14 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *BOOL v14 = v11;
    v14[1] = v13;
    unint64_t v15 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v81);
    uint64_t v79 = re::globalAllocators(v15)[2];
    unint64_t v16 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v79 + 32))(v79, 32, 0);
    *unint64_t v16 = &unk_26E6FB2F8;
    v16[1] = a1;
    uint64_t v16[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>::componentChangedHandler<REComponentDidActivateEvent>;
    v16[3] = 0;
    float32x4_t v80 = v16;
    uint64_t v17 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v78, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    uint64_t v19 = v18;
    long long v20 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *long long v20 = v17;
    v20[1] = v19;
    long long v21 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v78);
    uint64_t v76 = re::globalAllocators(v21)[2];
    long long v22 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v76 + 32))(v76, 32, 0);
    *long long v22 = &unk_26E6FB350;
    v22[1] = a1;
    void v22[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>::componentChangedHandler<REComponentWillDeactivateEvent>;
    v22[3] = 0;
    float32x4_t v77 = v22;
    uint64_t v23 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v75, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    uint64_t v25 = v24;
    uint64_t v26 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *uint64_t v26 = v23;
    v26[1] = v25;
    int v27 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v75);
    uint64_t v73 = re::globalAllocators(v27)[2];
    long long v28 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v73 + 32))(v73, 32, 0);
    *long long v28 = &unk_26E6FB3A8;
    v28[1] = a1;
    uint64_t v28[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>::componentChangedHandler<REComponentDidAddEvent>;
    v28[3] = 0;
    long long v74 = v28;
    uint64_t v29 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v72, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    uint64_t v31 = v30;
    long long v32 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    void *v32 = v29;
    v32[1] = v31;
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v72);
    uint64_t result = (uint64_t *)(***(uint64_t (****)(void))(a2 + 224))();
    if (v33)
    {
      int v34 = result;
      uint64_t v35 = 8 * v33;
      do
      {
        uint64_t v36 = *v34++;
        uint64_t v70 = re::globalAllocators((re *)result)[2];
        long long v71 = 0;
        long long v37 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v70 + 32))(v70, 32, 0);
        *long long v37 = &unk_26E6FB2A0;
        v37[1] = a1;
        v37[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>;
        v37[3] = 0;
        long long v71 = v37;
        uint64_t v38 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v69, v36, 0);
        uint64_t v40 = v39;
        long long v41 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *long long v41 = v38;
        v41[1] = v40;
        uint64_t v42 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v69);
        uint64_t v67 = re::globalAllocators(v42)[2];
        uint64_t v68 = 0;
        unint64_t v43 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v67 + 32))(v67, 32, 0);
        void *v43 = &unk_26E6FB2F8;
        v43[1] = a1;
        uint64_t v43[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>;
        v43[3] = 0;
        uint64_t v68 = v43;
        uint64_t v44 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v66, v36, 0);
        uint64_t v46 = v45;
        unint64_t v47 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *unint64_t v47 = v44;
        v47[1] = v46;
        unint64_t v48 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v66);
        uint64_t v64 = re::globalAllocators(v48)[2];
        int v65 = 0;
        unint64_t v49 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v64 + 32))(v64, 32, 0);
        *unint64_t v49 = &unk_26E6FB350;
        v49[1] = a1;
        v49[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>;
        v49[3] = 0;
        int v65 = v49;
        uint64_t v50 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v63, v36, 0);
        uint64_t v52 = v51;
        uint64_t v53 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *uint64_t v53 = v50;
        v53[1] = v52;
        long long v54 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v63);
        uint64_t v61 = re::globalAllocators(v54)[2];
        long long v62 = 0;
        uint64_t v55 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v61 + 32))(v61, 32, 0);
        *uint64_t v55 = &unk_26E6FB3A8;
        v55[1] = a1;
        v55[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>;
        v55[3] = 0;
        long long v62 = v55;
        uint64_t v56 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v60, v36, 0);
        uint64_t v58 = v57;
        uint64_t v59 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *uint64_t v59 = v56;
        v59[1] = v58;
        uint64_t result = (uint64_t *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v60);
        v35 -= 8;
      }
      while (v35);
    }
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>::componentChangedHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v23 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v4 + 56), &v23);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(void *)(*(void *)(v4 + 64) + 16 * v5 + 8));
  if (!*(unsigned char *)(v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *(void *)(v4 + 176);
  int v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if (v7) {
      uint64_t v8 = (void *)(v4 + 192);
    }
    else {
      uint64_t v8 = *(void **)(v4 + 200);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    BOOL v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    uint64_t v9 = (uint64_t *)(v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v9 = *(uint64_t **)(v4 + 200);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  unint64_t v15 = *(re::ecs2::Component **)(a2 + 176);
  if (v15)
  {
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v17 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v15);
      if (v17 != -1 && (v18 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>::setComponentState(a1, v17, v18);
        return 0;
      }
    }
    unint64_t v20 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v15);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v20, v21);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>::componentChangedHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v23 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v4 + 56), &v23);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(void *)(*(void *)(v4 + 64) + 16 * v5 + 8));
  if (!*(unsigned char *)(v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *(void *)(v4 + 176);
  int v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if (v7) {
      uint64_t v8 = (void *)(v4 + 192);
    }
    else {
      uint64_t v8 = *(void **)(v4 + 200);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    BOOL v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    uint64_t v9 = (uint64_t *)(v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v9 = *(uint64_t **)(v4 + 200);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  unint64_t v15 = *(re::ecs2::Component **)(a2 + 176);
  if (v15)
  {
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v17 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v15);
      if (v17 != -1 && (v18 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>::setComponentState(a1, v17, v18);
        return 0;
      }
    }
    unint64_t v20 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v15);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v20, v21);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>::componentChangedHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v23 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v4 + 56), &v23);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(void *)(*(void *)(v4 + 64) + 16 * v5 + 8));
  if (!*(unsigned char *)(v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *(void *)(v4 + 176);
  int v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if (v7) {
      uint64_t v8 = (void *)(v4 + 192);
    }
    else {
      uint64_t v8 = *(void **)(v4 + 200);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    BOOL v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    uint64_t v9 = (uint64_t *)(v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v9 = *(uint64_t **)(v4 + 200);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  unint64_t v15 = *(re::ecs2::Component **)(a2 + 176);
  if (v15)
  {
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v17 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v15);
      if (v17 != -1 && (v18 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>::setComponentState(a1, v17, v18);
        return 0;
      }
    }
    unint64_t v20 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v15);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v20, v21);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>::componentChangedHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v23 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v4 + 56), &v23);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(void *)(*(void *)(v4 + 64) + 16 * v5 + 8));
  if (!*(unsigned char *)(v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *(void *)(v4 + 176);
  int v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if (v7) {
      uint64_t v8 = (void *)(v4 + 192);
    }
    else {
      uint64_t v8 = *(void **)(v4 + 200);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    BOOL v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    uint64_t v9 = (uint64_t *)(v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v9 = *(uint64_t **)(v4 + 200);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  unint64_t v15 = *(re::ecs2::Component **)(a2 + 176);
  if (v15)
  {
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v17 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v15);
      if (v17 != -1 && (v18 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>::setComponentState(a1, v17, v18);
        return 0;
      }
    }
    unint64_t v20 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v15);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v20, v21);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6FB2A0;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6FB2A0;
  *(void *)(a2 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6FB2F8;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6FB2F8;
  *(void *)(a2 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6FB350;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6FB350;
  *(void *)(a2 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6FB3A8;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6FB3A8;
  *(void *)(a2 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

void *re::IntrospectionDynamicArray<re::ecs2::EntityHandle>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::ecs2::EntityHandle>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionDynamicArray<re::ecs2::EntityHandle>::construct(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::EntityHandle>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::ecs2::EntityHandle>::deinit(a2);
}

void *re::IntrospectionDynamicArray<re::ecs2::EntityHandle>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<re::ecs2::EntityHandle>::deinit(a2);
  *(void *)a2 = a3;
  uint64_t result = re::DynamicArray<re::ecs2::EntityHandle>::setCapacity((void *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::ecs2::EntityHandle>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (!*(void *)a4)
  {
    *(void *)a4 = a2;
    re::DynamicArray<re::ecs2::EntityHandle>::setCapacity((void *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  unint64_t v10 = *(void *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
    {
      re::DynamicArray<re::ecs2::EntityHandle>::resize(a4, a5);
    }
  }
  else
  {
    re::DynamicArray<re::ecs2::EntityHandle>::setCapacity((void *)a4, a5);
    for (unint64_t i = a5 - *(void *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::ecs2::EntityHandle>::addElement(uint64_t a1, re *a2, int a3, uint64_t a4)
{
  objc_initWeak(location, 0);
  location[1] = 0;
  location[2] = 0;
  re::ecs2::EntityHandle::reset((re::ecs2::EntityHandle *)location);
  unint64_t v8 = *(void *)(a4 + 16);
  if (v8 >= *(void *)(a4 + 8))
  {
    re::DynamicArray<re::ecs2::EntityHandle>::growCapacity((void *)a4, v8 + 1);
    unint64_t v8 = *(void *)(a4 + 16);
  }
  re::ecs2::EntityHandle::EntityHandle(*(void *)(a4 + 32) + 24 * v8, (uint64_t)location);
  ++*(void *)(a4 + 16);
  ++*(_DWORD *)(a4 + 24);
  re::ecs2::EntityHandle::reset((re::ecs2::EntityHandle *)location);
  objc_destroyWeak(location);
  int v9 = (re::IntrospectionBase *)(*(void *)(a4 + 32) + 24 * *(void *)(a4 + 16) - 24);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v9);
  return v9;
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::EntityHandle>::size(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::EntityHandle>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 24 * a3;
}

{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 24 * a3;
}

void *re::DynamicArray<re::ecs2::EntityHandle>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      uint64_t result = (void *)*result;
      if (!*v5)
      {
        uint64_t result = (void *)re::DynamicArray<re::ecs2::EntityHandle>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x18uLL))
        {
          uint64_t v2 = 24 * a2;
          uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 24 * a2, 8);
          if (result)
          {
            uint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 24, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        uint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      uint64_t v7 = 0;
      if (!v3)
      {
LABEL_16:
        _OWORD v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      unint64_t v8 = (re::ecs2::EntityHandle *)v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = 24 * v9;
        uint64_t v11 = (uint64_t)v7;
        do
        {
          re::ecs2::EntityHandle::EntityHandle(v11, (uint64_t)v8);
          re::ecs2::EntityHandle::reset(v8);
          objc_destroyWeak((id *)v8);
          *(void *)unint64_t v8 = 0;
          unint64_t v8 = (re::ecs2::EntityHandle *)((char *)v8 + 24);
          v11 += 24;
          v10 -= 24;
        }
        while (v10);
        unint64_t v8 = (re::ecs2::EntityHandle *)v5[4];
      }
      uint64_t result = (void *)(*(uint64_t (**)(void, re::ecs2::EntityHandle *))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

void re::DynamicArray<re::ecs2::EntityHandle>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 16);
  if (v4 >= a2)
  {
    if (v4 <= a2) {
      return;
    }
    uint64_t v8 = 24 * a2;
    unint64_t v9 = a2;
    do
    {
      uint64_t v10 = (re::ecs2::EntityHandle *)(*(void *)(a1 + 32) + v8);
      re::ecs2::EntityHandle::reset(v10);
      objc_destroyWeak((id *)v10);
      *(void *)uint64_t v10 = 0;
      ++v9;
      v8 += 24;
    }
    while (v9 < *(void *)(a1 + 16));
  }
  else
  {
    if (*(void *)(a1 + 8) < a2)
    {
      re::DynamicArray<re::ecs2::EntityHandle>::setCapacity((void *)a1, a2);
      unint64_t v4 = *(void *)(a1 + 16);
    }
    unint64_t v5 = a2 - v4;
    if (a2 > v4)
    {
      uint64_t v6 = 24 * v4;
      do
      {
        uint64_t v7 = *(void *)(a1 + 32) + v6;
        objc_initWeak((id *)v7, 0);
        *(void *)(v7 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
        *(void *)(v7 + 16) = 0;
        re::ecs2::EntityHandle::reset((re::ecs2::EntityHandle *)v7);
        v6 += 24;
        --v5;
      }
      while (v5);
    }
  }
  *(void *)(a1 + 16) = a2;
  ++*(_DWORD *)(a1 + 24);
}

void *re::DynamicArray<re::ecs2::EntityHandle>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    unint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::ecs2::EntityHandle>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::ecs2::EntityHandle>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void *re::TypeBuilderHelper::registerDynamicArray<re::ecs2::EntityHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)a1 = a3;
  uint64_t result = re::DynamicArray<re::ecs2::EntityHandle>::setCapacity((void *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::EntityHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::ecs2::EntityHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  if (*(re::Allocator **)a1 == a3)
  {
    re::DynamicArray<re::ecs2::EntityHandle>::clear(a1);
  }
  else
  {
    re::DynamicArray<re::ecs2::EntityHandle>::deinit(a1);
    *(void *)a1 = a3;
    re::DynamicArray<re::ecs2::EntityHandle>::setCapacity((void *)a1, a4);
    ++*(_DWORD *)(a1 + 24);
  }
  re::DynamicArray<re::ecs2::EntityHandle>::resize(a1, a4);
  {
    re::TypeRegistry::typeInfo(*(void **)a2, *(void *)(*(void *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    uint64_t v9 = *(void *)(a1 + 16);
    if (v9)
    {
      uint64_t v10 = *(char **)(a1 + 32);
      uint64_t v11 = 24 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 24;
        v11 -= 24;
      }
      while (v11);
    }
  }
}

void re::DynamicArray<re::ecs2::EntityHandle>::clear(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2)
  {
    unint64_t v3 = *(re::ecs2::EntityHandle **)(a1 + 32);
    uint64_t v4 = 24 * v2;
    do
    {
      re::ecs2::EntityHandle::reset(v3);
      objc_destroyWeak((id *)v3);
      *(void *)unint64_t v3 = 0;
      unint64_t v3 = (re::ecs2::EntityHandle *)((char *)v3 + 24);
      v4 -= 24;
    }
    while (v4);
  }
  ++*(_DWORD *)(a1 + 24);
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::EntityHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 32) + 24 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::EntityHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::EntityHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 24))
  {
    int v3 = a1[3];
    unint64_t v4 = *(void *)(v2 + 16);
    if (v3 < (int)v4) {
      a1[3] = ++v3;
    }
    if (v4 <= v3) {
      return 0;
    }
    else {
      return *(void *)(v2 + 32) + 24 * v3;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::EntityHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, result);
  }
  return result;
}

id re::internal::defaultRetain<re::ecs2::MeshSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::MeshSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
}

void *re::ecs2::allocInfo_PortalComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_207, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_207))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF86498, "PortalComponent");
    __cxa_guard_release(&_MergedGlobals_207);
  }
  return &unk_26AF86498;
}

void re::ecs2::initInfo_PortalComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v48[0] = 0x5CCB8BD8A8704BA2;
  v48[1] = "PortalComponent";
  re::StringID::destroyString((re::StringID *)v48);
  *((_OWORD *)this + 2) = v49;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF86428, memory_order_acquire) & 1) == 0)
  {
    unint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF86428);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 4ArcSharedObject::ArcSharedObject(this, 0) = 3;
      *(void *)(v7 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF86430 = v7;
      uint64_t v8 = re::introspectionAllocator((re *)v7);
      uint64_t v9 = re::introspect_Vector3F((re::IntrospectionBase **)1);
      uint64_t v10 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v10 = 1;
      *(void *)(v10 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "clipPlanePosition";
      *(void *)(v10 + 16) = v9;
      *(void *)(v10 + 24) = 0;
      *(void *)(v10 + 32) = 0x4000000002;
      *(_DWORD *)(v10 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v10 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      *(void *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_26AF86438 = v10;
      uint64_t v11 = re::introspectionAllocator((re *)v10);
      uint64_t v12 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v11 + 32))(v11, 24, 8);
      *(_DWORD *)uint64_t v12 = 5;
      *((void *)v12 + 1) = "planePosition";
      *((void *)v12 + 2) = "clipPlanePosition";
      qword_26AF86440 = (uint64_t)v12;
      uint64_t v13 = re::introspectionAllocator(v12);
      uint64_t v14 = re::introspect_Vector3F((re::IntrospectionBase **)1);
      uint64_t v15 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v13 + 32))(v13, 72, 8);
      *(_DWORD *)uint64_t v15 = 1;
      *(void *)(v15 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "clipPlaneNormal";
      *(void *)(v15 + 16) = v14;
      *(void *)(v15 + 24) = 0;
      *(void *)(v15 + 32) = 0x5000000003;
      *(_DWORD *)(v15 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v15 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      *(void *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_26AF86448 = v15;
      unint64_t v16 = re::introspectionAllocator((re *)v15);
      unint64_t v17 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v16 + 32))(v16, 24, 8);
      *(_DWORD *)unint64_t v17 = 5;
      *((void *)v17 + 1) = "planeNormal";
      *((void *)v17 + 2) = "clipPlaneNormal";
      qword_26AF86450 = (uint64_t)v17;
      uint64_t v18 = re::introspectionAllocator(v17);
      uint64_t v19 = re::ecs2::introspect_WorldRootToken((re::IntrospectionBase **)1);
      uint64_t v20 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v18 + 32))(v18, 72, 8);
      *(_DWORD *)uint64_t v20 = 1;
      *(void *)(v20 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "worldRootToken";
      *(void *)(v20 + 16) = v19;
      *(void *)(v20 + 24) = 0;
      *(void *)(v20 + 32) = 0x2000000004;
      *(_DWORD *)(v20 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v20 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      *(void *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_26AF86458 = v20;
      uint64_t v21 = re::introspectionAllocator((re *)v20);
      uint64_t v23 = re::introspect_BOOL((re *)1, v22);
      uint64_t v24 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v21 + 32))(v21, 72, 8);
      *(_DWORD *)uint64_t v24 = 1;
      *(void *)(v24 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "useClipPlane";
      *(void *)(v24 + 16) = v23;
      *(void *)(v24 + 24) = 0;
      *(void *)(v24 + 32) = 0x8000000005;
      *(_DWORD *)(v24 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v24 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      *(void *)(v24 + 56) = 0;
      *(_DWORD *)(v24 + 64) = 0;
      qword_26AF86460 = v24;
      uint64_t v25 = re::introspectionAllocator((re *)v24);
      int v27 = re::introspect_BOOL((re *)1, v26);
      uint64_t v28 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v25 + 32))(v25, 72, 8);
      *(_DWORD *)uint64_t v28 = 1;
      *(void *)(v28 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "inheritsIBL";
      *(void *)(v28 + 16) = v27;
      *(void *)(v28 + 24) = 0;
      *(void *)(v28 + 32) = 0x8100000006;
      *(_DWORD *)(v28 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v28 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      *(void *)(v28 + 56) = 0;
      *(_DWORD *)(v28 + 64) = 0;
      qword_26AF86468 = v28;
      uint64_t v29 = re::introspectionAllocator((re *)v28);
      uint64_t v31 = re::introspect_BOOL((re *)1, v30);
      uint64_t v32 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v29 + 32))(v29, 72, 8);
      *(_DWORD *)uint64_t v32 = 1;
      *(void *)(v32 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "inheritsProbeLighting";
      *(void *)(v32 + 16) = v31;
      *(void *)(v32 + 24) = 0;
      *(void *)(v32 + 32) = 0x8200000007;
      *(_DWORD *)(v32 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v32 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      *(void *)(v32 + 56) = 0;
      *(_DWORD *)(v32 + 64) = 0;
      qword_26AF86470 = v32;
      uint64_t v33 = re::introspectionAllocator((re *)v32);
      uint64_t v35 = re::introspect_BOOL((re *)1, v34);
      uint64_t v36 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v33 + 32))(v33, 72, 8);
      *(_DWORD *)uint64_t v36 = 1;
      *(void *)(v36 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "allowsCrossing";
      *(void *)(v36 + 16) = v35;
      *(void *)(v36 + 24) = 0;
      *(void *)(v36 + 32) = 0x830000000ALL;
      *(_DWORD *)(v36 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v36 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      *(void *)(v36 + 56) = 0;
      *(_DWORD *)(v36 + 64) = 0;
      qword_26AF86478 = v36;
      long long v37 = re::introspectionAllocator((re *)v36);
      uint64_t v39 = re::ecs2::introspect_EntityHandle((re::ecs2 *)1, v38);
      uint64_t v40 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v37 + 32))(v37, 72, 8);
      *(_DWORD *)uint64_t v40 = 1;
      *(void *)(v40 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "targetWorldEntity";
      *(void *)(v40 + 16) = v39;
      *(void *)(v40 + 24) = 0;
      *(void *)(v40 + 32) = 0x280000000BLL;
      *(_DWORD *)(v40 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v40 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      *(void *)(v40 + 56) = 0;
      *(_DWORD *)(v40 + 64) = 0;
      qword_26AF86480 = v40;
      long long v41 = re::introspectionAllocator((re *)v40);
      uint64_t v42 = re::introspect_Vector3F((re::IntrospectionBase **)1);
      uint64_t v43 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v41 + 32))(v41, 72, 8);
      *(_DWORD *)uint64_t v43 = 1;
      *(void *)(v43 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "crossPlanePosition";
      *(void *)(v43 + 16) = v42;
      *(void *)(v43 + 24) = 0;
      *(void *)(v43 + 32) = 0x600000000CLL;
      *(_DWORD *)(v43 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v43 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      *(void *)(v43 + 56) = 0;
      *(_DWORD *)(v43 + 64) = 0;
      qword_26AF86488 = v43;
      uint64_t v44 = re::introspectionAllocator((re *)v43);
      uint64_t v45 = re::introspect_Vector3F((re::IntrospectionBase **)1);
      uint64_t v46 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v44 + 32))(v44, 72, 8);
      *(_DWORD *)uint64_t v46 = 1;
      *(void *)(v46 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "crossPlaneNormal";
      *(void *)(v46 + 16) = v45;
      *(void *)(v46 + 24) = 0;
      *(void *)(v46 + 32) = 0x700000000DLL;
      *(_DWORD *)(v46 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v46 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      *(void *)(v46 + 56) = 0;
      *(_DWORD *)(v46 + 64) = 0;
      qword_26AF86490 = v46;
      __cxa_guard_release(&qword_26AF86428);
    }
  }
  *((void *)this + 2) = 0xB000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 13;
  *((void *)this + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = &qword_26AF86430;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::PortalComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 1ArcSharedObject::ArcSharedObject(this, 0) = re::internal::defaultDestruct<re::ecs2::PortalComponent>;
  *((void *)this + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::PortalComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::PortalComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v47 = v49;
}

uint64_t re::internal::defaultConstruct<re::ecs2::PortalComponent>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::make::shared::unsafelyInplace<re::ecs2::PortalComponent>(a3);
}

void *re::internal::defaultDestruct<re::ecs2::PortalComponent>(uint64_t a1, uint64_t a2, id *a3)
{
  unint64_t v4 = a3 + 18;
  re::ecs2::EntityHandle::reset((re::ecs2::EntityHandle *)(a3 + 18));
  objc_destroyWeak(v4);
  a3[18] = 0;
  re::ecs2::EntityHandle::reset((re::ecs2::EntityHandle *)(a3 + 5));
  objc_destroyWeak(a3 + 5);
  a3[5] = 0;
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultDestructV2<re::ecs2::PortalComponent>(id *a1)
{
  uint64_t v2 = a1 + 18;
  re::ecs2::EntityHandle::reset((re::ecs2::EntityHandle *)(a1 + 18));
  objc_destroyWeak(v2);
  a1[18] = 0;
  re::ecs2::EntityHandle::reset((re::ecs2::EntityHandle *)(a1 + 5));
  objc_destroyWeak(a1 + 5);
  a1[5] = 0;
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_PortalComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"PortalComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_PortalComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_PortalComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::PortalComponent>, this);
}

char *re::ecs2::PortalComponent::targetWorldRootToken(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(char **)(a1 + 32);
  if ((unint64_t)(result - 1) >= 0xFFFFFFFFFFFFFFFELL)
  {
    uint64_t result = re::ecs2::EntityHandle::resolve((id *)(a1 + 40), a2);
    if (result)
    {
      uint64_t result = (char *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(result + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::WorldRootComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
      if (result) {
        return (char *)*((void *)result + 4);
      }
    }
  }
  return result;
}

uint64_t re::make::shared::unsafelyInplace<re::ecs2::PortalComponent>(uint64_t a1)
{
  *(_OWORD *)(a1 + 1re::HashTable<re::ecs2::Entity const*,re::ecs2::BillboardData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::deinit((uint64_t *)this + 60) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 28) = 0u;
  *(_OWORD *)(a1 + 8ArcSharedObject::ArcSharedObject(this, 0) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  uint64_t v2 = (id *)(a1 + 144);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(void *)(v3 + 16) = 0;
  *(unsigned char *)(v3 + 24) = 0;
  *(void *)uint64_t v3 = &unk_26E6F24B0;
  *(void *)(v3 + 32) = 0;
  unint64_t v4 = (re::ecs2::EntityHandle *)(v3 + 40);
  objc_initWeak((id *)(v3 + 40), 0);
  *(void *)(a1 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
  *(void *)(a1 + 56) = 0;
  re::ecs2::EntityHandle::reset(v4);
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 8ArcSharedObject::ArcSharedObject(this, 0) = xmmword_23435FD80;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = xmmword_23435FD80;
  *(_DWORD *)(a1 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 28) = 0x1000000;
  *(void *)(a1 + 136) = 0;
  objc_initWeak(v2, 0);
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 1re::HashTable<re::ecs2::Entity const*,re::ecs2::BillboardData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::deinit((uint64_t *)this + 60) = 0;
  re::ecs2::EntityHandle::reset((re::ecs2::EntityHandle *)v2);
  return a1;
}

void re::ecs2::ARSegmentationSystem::updateScenes(uint64_t a1, uint64_t a2)
{
  uint64_t v48 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(void *)(a1 + 104);
  if (!v5 || (*(unsigned char *)(v5 + 424) & 0x10) != 0)
  {
    uint64_t v6 = *(void *)(a2 + 8);
    if (v6)
    {
      uint64_t v7 = *(uint64_t **)a2;
      uint64_t v8 = 8 * v6;
      while (1)
      {
        uint64_t v9 = *(void *)(a1 + 112);
        if (!v9) {
          break;
        }
        uint64_t v10 = *v7;
        uint64_t v11 = *(void *)(v9 + 104);
        if (v11) {
          uint64_t v12 = (re::DynamicString **)re::RenderFrameBox::get(v11 + 344, 0xFFFFFFFFFFFFFFFuLL);
        }
        else {
          uint64_t v12 = 0;
        }
        unint64_t v2 = v10 + 200;
        uint64_t v13 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(v10 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ARSegmentationComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
        if (v13 && *(void *)(v13 + 24))
        {
          uint64_t v14 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(v10 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ARSegmentationComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
          if (!v14) {
            goto LABEL_42;
          }
          uint64_t v16 = *(void *)(v14 + 24);
          if (!v16) {
            goto LABEL_42;
          }
          unint64_t v2 = *(void *)(*(void *)(v14 + 40) + 8 * v16 - 8);
          a2 = v2 + 32;
          if (*(void *)(v2 + 32))
          {
            if (*(void *)(v2 + 48))
            {
              unint64_t v3 = v2 + 56;
              if (*(void *)(v2 + 56))
              {
                v30[2] = &unk_26E6FB528;
                *(_OWORD *)uint64_t v31 = 0u;
                *(_OWORD *)uint64_t v32 = 0u;
                NS::SharedPtr<MTL::Texture>::operator=(v31, (void **)a2);
                NS::SharedPtr<MTL::Texture>::operator=(&v31[1], (void **)(v2 + 40));
                NS::SharedPtr<MTL::Texture>::operator=(v32, (void **)(v2 + 48));
                NS::SharedPtr<MTL::Texture>::operator=(&v32[1], (void **)(v2 + 56));
                re::ecs2::RenderingSubsystem::nonOwningStreamNameForWorldRoot((re::ecs2::RenderingSubsystem *)v10, 0, v12, v30);
                uint64_t v29 = v30[0] >> 1;
                uint64_t v17 = re::RenderFrameData::stream((re::RenderFrameData *)(v12 + 33), (const re::WeakStringID *)&v29);
                uint64_t v18 = (uint64_t (**)(uint64_t, void, void, void *, void *))re::HashTable<std::type_index,re::RenderFrameDataArrayWrapper,re::Hash<std::type_index>,re::EqualTo<std::type_index>,true,false>::tryGet(v17, (uint64_t *)&v33);
                if (!v18)
                {
                  uint64_t v19 = *(void *)(*(void *)(v17 + 48) + 8);
                  uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v19 + 32))(v19, 56, 8);
                  *(void *)uint64_t v20 = 0;
                  *(void *)(v20 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
                  *(_DWORD *)(v20 + 16) = 1;
                  *(void *)(v20 + 32) = 0;
                  *(void *)(v20 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
                  *(void *)(v20 + 24) = 0;
                  *(_DWORD *)(v20 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
                  uint64_t v21 = (re *)re::BucketArray<re::ARSegmentationInputData,4ul>::init(v20, v19, 1uLL);
                  uint64_t v22 = re::globalAllocators(v21)[2];
                  int v34 = &unk_26E6FB598;
                  *(void *)&long long v35 = v19;
                  *(void *)&long long v36 = v22;
                  *((void *)&v36 + 1) = &v34;
                  *(void *)&v44[0] = std::__any_imp::_SmallHandler<re::BucketArray<re::ARSegmentationInputData,4ul> *>::__handle[abi:nn180100];
                  *((void *)&v44[0] + 1) = v20;
                  *((void *)&v46 + 1) = v22;
                  *(void *)&long long v47 = 0;
                  re::FunctionBase<24ul,void ()(re::RenderFrameDataArrayWrapper *)>::operator=<24ul>((uint64_t)&v45, (uint64_t)&v34);
                  uint64_t v18 = (uint64_t (**)(uint64_t, void, void, void *, void *))re::HashTable<std::type_index,re::RenderFrameDataArrayWrapper,re::Hash<std::type_index>,re::EqualTo<std::type_index>,true,false>::addNew(v17, (uint64_t *)&v33, (re *)v44);
                  if ((void)v47)
                  {
                    *(void *)long long v37 = v44;
                    (*(void (**)(void, unsigned char *))(*(void *)v47 + 16))(v47, v37);
                  }
                  re::FunctionBase<24ul,void ()(re::RenderFrameDataArrayWrapper *)>::destroyCallable((uint64_t)&v45);
                  if (*(void *)&v44[0]) {
                    (*(void (**)(void, _OWORD *, void, void, void))&v44[0])(0, v44, 0, 0, 0);
                  }
                  re::FunctionBase<24ul,void ()(re::RenderFrameDataArrayWrapper *)>::destroyCallable((uint64_t)&v34);
                }
                int v34 = &unk_26E6FB528;
                long long v35 = *(_OWORD *)v31;
                long long v36 = *(_OWORD *)v32;
                *(_OWORD *)uint64_t v31 = 0u;
                *(_OWORD *)uint64_t v32 = 0u;
                unint64_t v24 = *(void *)(v23 + 40);
                unint64_t v3 = *(void *)(v23 + 8);
                if (v24 + 1 > 4 * v3)
                {
                  re::BucketArray<re::ARSegmentationInputData,4ul>::setBucketsCapacity((void *)v23, (v24 + 4) >> 2);
                  unint64_t v3 = *(void *)(v23 + 8);
                }
                unint64_t v2 = v24 >> 2;
                if (v3 <= v24 >> 2) {
                  goto LABEL_40;
                }
                if (*(unsigned char *)(v23 + 16)) {
                  uint64_t v25 = v23 + 24;
                }
                else {
                  uint64_t v25 = *(void *)(v23 + 32);
                }
                uint64_t v26 = *(void *)(v25 + 8 * v2);
                unint64_t v27 = *(void *)(v23 + 40);
                *(void *)(v23 + 4ArcSharedObject::ArcSharedObject(this, 0) = v27 + 1;
                ++*(_DWORD *)(v23 + 48);
                uint64_t v28 = (void *)(v26 + 40 * (v24 & 3));
                *uint64_t v28 = &unk_26E6FB528;
                v28[1] = v35;
                *(void *)&long long v35 = 0;
                uint64_t v28[2] = *((void *)&v35 + 1);
                *((void *)&v35 + 1) = 0;
                v28[3] = v36;
                *(void *)&long long v36 = 0;
                v28[4] = *((void *)&v36 + 1);
                if (v27 == -1) {
                  goto LABEL_41;
                }
                re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[](v23, v27);
                re::StringID::destroyString((re::StringID *)v30);
                if (v32[1])
                {

                  v32[1] = 0;
                }
                if (v32[0])
                {

                  v32[0] = 0;
                }
                if (v31[1])
                {

                  v31[1] = 0;
                }
                if (v31[0]) {
              }
                }
            }
          }
        }
        ++v7;
        v8 -= 8;
        if (!v8) {
          return;
        }
      }
      re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) ", "m_renderManager", "updateSceneInternal", 40);
      _os_crash();
      __break(1u);
LABEL_40:
      uint64_t v33 = 0;
      long long v46 = 0u;
      long long v47 = 0u;
      long long v45 = 0u;
      memset(v44, 0, sizeof(v44));
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)long long v37 = 136315906;
      *(void *)&v37[4] = "operator[]";
      __int16 v38 = 1024;
      int v39 = 858;
      __int16 v40 = 2048;
      unint64_t v41 = v2;
      __int16 v42 = 2048;
      unint64_t v43 = v3;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_41:
      re::internal::assertLog((re::internal *)4, v27, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
      _os_crash();
      __break(1u);
LABEL_42:
      re::internal::assertLog((re::internal *)4, v15, "assertion failure: '%s' (%s:line %i) Array is empty.", "!isEmpty()", "last", 233);
      _os_crash();
      __break(1u);
    }
  }
}

void re::ARSegmentationInputData::~ARSegmentationInputData(re::ARSegmentationInputData *this)
{
  unint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {

    *((void *)this + 4) = 0;
  }
  unint64_t v3 = (void *)*((void *)this + 3);
  if (v3)
  {

    *((void *)this + 3) = 0;
  }
  unint64_t v4 = (void *)*((void *)this + 2);
  if (v4)
  {

    *((void *)this + 2) = 0;
  }
  uint64_t v5 = (void *)*((void *)this + 1);
  if (v5)
  {

    *((void *)this + 1) = 0;
  }
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t vars8;

  unint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {

    *((void *)this + 4) = 0;
  }
  unint64_t v3 = (void *)*((void *)this + 3);
  if (v3)
  {

    *((void *)this + 3) = 0;
  }
  unint64_t v4 = (void *)*((void *)this + 2);
  if (v4)
  {

    *((void *)this + 2) = 0;
  }
  uint64_t v5 = (void *)*((void *)this + 1);
  if (v5)
  {

    *((void *)this + 1) = 0;
  }
  JUMPOUT(0x237DBCBD0);
}

void *re::ecs2::allocInfo_ARSegmentationComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_208, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_208))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF86530, "ARSegmentationComponent");
    __cxa_guard_release(&_MergedGlobals_208);
  }
  return &unk_26AF86530;
}

void re::ecs2::initInfo_ARSegmentationComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v9[0] = 0x6DFB8A95934C1F94;
  v9[1] = "ARSegmentationComponent";
  re::StringID::destroyString((re::StringID *)v9);
  *((_OWORD *)this + 2) = v10;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF86520, memory_order_acquire) & 1) == 0)
  {
    unint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF86520);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 4ArcSharedObject::ArcSharedObject(this, 0) = 3;
      *(void *)(v7 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF86518 = v7;
      __cxa_guard_release(&qword_26AF86520);
    }
  }
  *((void *)this + 2) = 0x4000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((void *)this + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = &qword_26AF86518;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::ARSegmentationComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 1ArcSharedObject::ArcSharedObject(this, 0) = re::internal::defaultDestruct<re::ecs2::ARSegmentationComponent>;
  *((void *)this + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::ARSegmentationComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::ARSegmentationComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v8 = v10;
}

double re::internal::defaultConstruct<re::ecs2::ARSegmentationComponent>(int a1, int a2, ArcSharedObject *this)
{
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)(v3 + 16) = 0;
  *(unsigned char *)(v3 + 24) = 0;
  *(void *)uint64_t v3 = &unk_26E6E84A0;
  double result = 0.0;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0u;
  return result;
}

void *re::internal::defaultDestruct<re::ecs2::ARSegmentationComponent>(uint64_t a1, uint64_t a2, void *a3)
{
  unint64_t v4 = (void *)a3[7];
  if (v4)
  {

    a3[7] = 0;
  }
  uint64_t v5 = (void *)a3[6];
  if (v5)
  {

    a3[6] = 0;
  }
  uint64_t v6 = (void *)a3[5];
  if (v6)
  {

    a3[5] = 0;
  }
  uint64_t v7 = (void *)a3[4];
  if (v7)
  {

    a3[4] = 0;
  }
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

double re::internal::defaultConstructV2<re::ecs2::ARSegmentationComponent>(ArcSharedObject *a1)
{
  *((_OWORD *)a1 + 2) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(void *)(v1 + 16) = 0;
  *(unsigned char *)(v1 + 24) = 0;
  *(void *)uint64_t v1 = &unk_26E6E84A0;
  double result = 0.0;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)(v1 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0u;
  return result;
}

void *re::internal::defaultDestructV2<re::ecs2::ARSegmentationComponent>(void *a1)
{
  unint64_t v2 = (void *)a1[7];
  if (v2)
  {

    a1[7] = 0;
  }
  uint64_t v3 = (void *)a1[6];
  if (v3)
  {

    a1[6] = 0;
  }
  unint64_t v4 = (void *)a1[5];
  if (v4)
  {

    a1[5] = 0;
  }
  uint64_t v5 = (void *)a1[4];
  if (v5)
  {

    a1[4] = 0;
  }
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_ARSegmentationComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ARSegmentationComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_ARSegmentationComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_ARSegmentationComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::ARSegmentationComponent>, this);
}

void *re::ecs2::allocInfo_ARSegmentationSystem(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF86528, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF86528))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF865A8, "ARSegmentationSystem");
    __cxa_guard_release(&qword_26AF86528);
  }
  return &unk_26AF865A8;
}

void re::ecs2::initInfo_ARSegmentationSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v5[0] = 0x65F0A673CEC7504;
  v5[1] = "ARSegmentationSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0xA000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = &re::ecs2::initInfo_ARSegmentationSystem(re::IntrospectionBase *)::structureAttributes;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::ARSegmentationSystem>;
  *((void *)this + 1ArcSharedObject::ArcSharedObject(this, 0) = re::internal::defaultDestruct<re::ecs2::ARSegmentationSystem>;
  *((void *)this + 11) = re::internal::defaultRetain<re::ecs2::ARSegmentationSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 12) = re::internal::defaultRelease<re::ecs2::ARSegmentationSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::ARSegmentationSystem>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::ARSegmentationSystem>;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

double re::internal::defaultConstruct<re::ecs2::ARSegmentationSystem>(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  a3[8] = 0u;
  a3[9] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  re::ecs2::System::System((uint64_t)a3, 1, 1);
  *(void *)(v3 + 152) = 0;
  double result = 0.0;
  *(_OWORD *)(v3 + 136) = 0u;
  *(_OWORD *)(v3 + 12ArcSharedObject::ArcSharedObject(this, 0) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(void *)uint64_t v3 = &unk_26E6FB498;
  return result;
}

void *re::internal::defaultDestruct<re::ecs2::ARSegmentationSystem>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

double re::internal::defaultConstructV2<re::ecs2::ARSegmentationSystem>(_OWORD *a1)
{
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  re::ecs2::System::System((uint64_t)a1, 1, 1);
  *(void *)(v1 + 152) = 0;
  double result = 0.0;
  *(_OWORD *)(v1 + 136) = 0u;
  *(_OWORD *)(v1 + 12ArcSharedObject::ArcSharedObject(this, 0) = 0u;
  *(_OWORD *)(v1 + 104) = 0u;
  *(void *)uint64_t v1 = &unk_26E6FB498;
  return result;
}

void *re::internal::defaultDestructV2<re::ecs2::ARSegmentationSystem>(void *a1)
{
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_ARSegmentationSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ARSegmentationSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_ARSegmentationSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_ARSegmentationSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::ARSegmentationSystem>, this);
}

void re::ecs2::ARSegmentationSystem::~ARSegmentationSystem(re::ecs2::ARSegmentationSystem *this)
{
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::ARSegmentationSystem::typeInfo(re::ecs2::ARSegmentationSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ARSegmentationSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_ARSegmentationSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_ARSegmentationSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::ARSegmentationSystem>, 0);
}

void *re::BucketArray<re::ARSegmentationInputData,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  *(void *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(void *)(a1 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
  double result = re::BucketArray<re::ARSegmentationInputData,4ul>::setBucketsCapacity((void *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

void *re::BucketArray<re::ARSegmentationInputData,4ul>::setBucketsCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        unint64_t v4 = v3[1];
        if (v4 <= a2) {
          break;
        }
        double result = (void *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      if (v4 < a2)
      {
        uint64_t v5 = v3 + 3;
        do
        {
          double result = (void *)(*(uint64_t (**)(void, uint64_t, void))(*(void *)*v3 + 32))(*v3, 160, 0);
          long long v6 = result;
          if (*v3)
          {
            unint64_t v7 = v3[1];
            int v8 = *((_DWORD *)v3 + 4);
            if ((v8 & 1) == 0)
            {
              unint64_t v9 = *v5;
              BOOL v11 = v7 >= *v5;
              unint64_t v10 = v7 + 1;
              BOOL v11 = !v11 || v9 >= v10;
              if (v11) {
                goto LABEL_24;
              }
              unint64_t v12 = 2 * v9;
              goto LABEL_20;
            }
            unint64_t v10 = v7 + 1;
            if (v10 >= 3)
            {
              unint64_t v12 = 4;
LABEL_20:
              if (v12 <= v10) {
                unint64_t v14 = v10;
              }
              else {
                unint64_t v14 = v12;
              }
              double result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v14);
              int v8 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            unint64_t v13 = v3[1] + 1;
            double result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v13);
            int v8 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + 4) = v8;
          }
LABEL_24:
          uint64_t v15 = v3 + 3;
          if ((v8 & 1) == 0) {
            uint64_t v15 = (void *)v3[4];
          }
          unint64_t v16 = v3[1];
          v15[v16++] = v6;
          v3[1] = v16;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v16 < a2);
      }
    }
  }
  else
  {
  }
  return result;
}

void *std::__any_imp::_SmallHandler<re::BucketArray<re::ARSegmentationInputData,4ul> *>::__handle[abi:nn180100](unsigned int a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1;
  switch(v5)
  {
    case 1:
      double result = 0;
      uint64_t v8 = a2[1];
      *a3 = std::__any_imp::_SmallHandler<re::BucketArray<re::ARSegmentationInputData,4ul> *>::__handle[abi:nn180100];
      a3[1] = v8;
      break;
    case 2:
      double result = 0;
      uint64_t v9 = a2[1];
      *a3 = std::__any_imp::_SmallHandler<re::BucketArray<re::ARSegmentationInputData,4ul> *>::__handle[abi:nn180100];
      a3[1] = v9;
      goto LABEL_5;
    case 3:
      if (a4) {
      else
      }
        BOOL v10 = a5 == &std::__any_imp::__unique_typeinfo<re::BucketArray<re::ARSegmentationInputData,4ul> *>::__id;
      if (v10) {
        double result = a2 + 1;
      }
      else {
        double result = 0;
      }
      break;
    case 4:
      return result;
    default:
      double result = 0;
LABEL_5:
      *a2 = 0;
      break;
  }
  return result;
}

void re::internal::Callable<re::RenderFrameDataArrayWrapper & re::RenderFrameDataStream::getOrAddDataArrayWrapper<re::ARSegmentationInputData>(void)::{lambda(re::RenderFrameDataArrayWrapper*)#1},void ()(re::RenderFrameDataArrayWrapper*)>::~Callable()
{
}

uint64_t *re::internal::Callable<re::RenderFrameDataArrayWrapper & re::RenderFrameDataStream::getOrAddDataArrayWrapper<re::ARSegmentationInputData>(void)::{lambda(re::RenderFrameDataArrayWrapper*)#1},void ()(re::RenderFrameDataArrayWrapper*)>::operator()(uint64_t a1, uint64_t (***a2)(uint64_t))
{
  uint64_t v2 = *(void *)(a1 + 8);
  double result = (uint64_t *)(**a2)(3);
  uint64_t v4 = *result;
  if (*result)
  {
    uint64_t v5 = *(void *)(v4 + 40);
    if (v5)
    {
      for (unint64_t i = 0; i != v5; ++i)
      {
        unint64_t v7 = (void *)re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[](v4, i);
        uint64_t v8 = (void *)v7[4];
        if (v8)
        {

          void v7[4] = 0;
        }
        uint64_t v9 = (void *)v7[3];
        if (v9)
        {

          v7[3] = 0;
        }
        BOOL v10 = (void *)v7[2];
        if (v10)
        {

          _OWORD v7[2] = 0;
        }
        BOOL v11 = (void *)v7[1];
        if (v11)
        {

          v7[1] = 0;
        }
      }
    }
    while (*(void *)(v4 + 8))
      re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)v4);
    re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v4);
    *(void *)(v4 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
    ++*(_DWORD *)(v4 + 48);
    re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v4);
    unint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)v2 + 40);
    return (uint64_t *)v12(v2, v4);
  }
  return result;
}

void *re::internal::Callable<re::RenderFrameDataArrayWrapper & re::RenderFrameDataStream::getOrAddDataArrayWrapper<re::ARSegmentationInputData>(void)::{lambda(re::RenderFrameDataArrayWrapper*)#1},void ()(re::RenderFrameDataArrayWrapper*)>::cloneInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &unk_26E6FB598;
  a2[1] = v2;
  return a2;
}

void *re::internal::Callable<re::RenderFrameDataArrayWrapper & re::RenderFrameDataStream::getOrAddDataArrayWrapper<re::ARSegmentationInputData>(void)::{lambda(re::RenderFrameDataArrayWrapper*)#1},void ()(re::RenderFrameDataArrayWrapper*)>::moveInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &unk_26E6FB598;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<re::RenderFrameDataArrayWrapper & re::RenderFrameDataStream::getOrAddDataArrayWrapper<re::ARSegmentationInputData>(void)::{lambda(re::RenderFrameDataArrayWrapper*)#1},void ()(re::RenderFrameDataArrayWrapper*)>::size()
{
  return 16;
}

id re::internal::defaultRetain<re::ecs2::ARSegmentationSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::ARSegmentationSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
}

void *re::ecs2::allocInfo_VoiceComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_209, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_209))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF86648, "VoiceComponent");
    __cxa_guard_release(&_MergedGlobals_209);
  }
  return &unk_26AF86648;
}

void re::ecs2::initInfo_VoiceComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v12[0] = 0x733EBDF91934C016;
  v12[1] = "VoiceComponent";
  re::StringID::destroyString((re::StringID *)v12);
  *((_OWORD *)this + 2) = v13;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF86628, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF86628);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 4ArcSharedObject::ArcSharedObject(this, 0) = 3;
      *(void *)(v7 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF86638 = v7;
      uint64_t v8 = re::introspectionAllocator((re *)v7);
      uint64_t v9 = re::introspect_AudioSourceSyncState((re::IntrospectionBase **)1);
      uint64_t v10 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v10 = 1;
      *(void *)(v10 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "syncState";
      *(void *)(v10 + 16) = v9;
      *(void *)(v10 + 24) = 0;
      *(void *)(v10 + 32) = 0x2000000001;
      *(_DWORD *)(v10 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v10 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      *(void *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_26AF86640 = v10;
      __cxa_guard_release(&qword_26AF86628);
    }
  }
  *((void *)this + 2) = 0x48000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((void *)this + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = &qword_26AF86638;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::VoiceComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 1ArcSharedObject::ArcSharedObject(this, 0) = re::internal::defaultDestruct<re::ecs2::VoiceComponent>;
  *((void *)this + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::VoiceComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::VoiceComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v11 = v13;
}

re::ecs2::VoiceComponent *re::internal::defaultConstruct<re::ecs2::VoiceComponent>(int a1, int a2, re::ecs2::VoiceComponent *this)
{
  return re::ecs2::VoiceComponent::VoiceComponent(this);
}

uint64_t re::internal::defaultDestruct<re::ecs2::VoiceComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

uint64_t re::internal::defaultDestructV2<re::ecs2::VoiceComponent>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_VoiceComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"VoiceComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_VoiceComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_VoiceComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::VoiceComponent>, this);
}

void *re::ecs2::allocInfo_VoiceSystem(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF86630, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF86630))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF866C0, "VoiceSystem");
    __cxa_guard_release(&qword_26AF86630);
  }
  return &unk_26AF866C0;
}

void re::ecs2::initInfo_VoiceSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v5[0] = 0x20A5B5EC05173C2;
  v5[1] = "VoiceSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0x6800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = &re::ecs2::initInfo_VoiceSystem(re::IntrospectionBase *)::structureAttributes;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::VoiceSystem>;
  *((void *)this + 1ArcSharedObject::ArcSharedObject(this, 0) = re::internal::defaultDestruct<re::ecs2::VoiceSystem>;
  *((void *)this + 11) = re::internal::defaultRetain<re::ecs2::VoiceSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 12) = re::internal::defaultRelease<re::ecs2::VoiceSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::VoiceSystem>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::VoiceSystem>;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

void re::internal::defaultConstruct<re::ecs2::VoiceSystem>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::ecs2::System::System(a3, 1, 1);
  *uint64_t v3 = &unk_26E6FB648;
}

void *re::internal::defaultDestruct<re::ecs2::VoiceSystem>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

void re::internal::defaultConstructV2<re::ecs2::VoiceSystem>(uint64_t a1)
{
  re::ecs2::System::System(a1, 1, 1);
  *uint64_t v1 = &unk_26E6FB648;
}

void *re::internal::defaultDestructV2<re::ecs2::VoiceSystem>(void *a1)
{
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_VoiceSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"VoiceSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_VoiceSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_VoiceSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::VoiceSystem>, this);
}

re::ecs2::VoiceComponent *re::ecs2::VoiceComponent::VoiceComponent(re::ecs2::VoiceComponent *this)
{
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)(v2 + 16) = 0;
  *(unsigned char *)(v2 + 24) = 0;
  *(void *)uint64_t v2 = &unk_26E6FB5F0;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0u;
  *(void *)(v2 + 64) = 9;
  *(_DWORD *)(v2 + 72) = 1065353216;
  *(_OWORD *)(v2 + 8ArcSharedObject::ArcSharedObject(this, 0) = 0u;
  *(_DWORD *)(v2 + 96) = 0;
  *(void *)(v2 + 10ArcSharedObject::ArcSharedObject(this, 0) = 1065353216;
  *(unsigned char *)(v2 + 10re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *(void *)(v2 + 112) = _D0;
  *(_DWORD *)(v2 + 12ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *(void *)(v2 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 28) = 0;
  *(_DWORD *)(v2 + 136) = 1065353216;
  *(unsigned char *)(v2 + 144) = 0;
  *(unsigned char *)(v2 + 184) = 0;
  *(_OWORD *)(v2 + 20re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0u;
  *(_OWORD *)(v2 + 192) = 0u;
  uint64_t v8 = (void *)(v2 + 192);
  uint64_t v9 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v8, 0);
  *((_DWORD *)this + 56) = 1;
  *(void *)((char *)this + 2re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 28) = 0x3E051EB800000000;
  *((_DWORD *)this + 59) = 1106247680;
  *((_OWORD *)this + re::HashTable<re::ecs2::Scene *,re::DynamicArray<RESubscriptionHandle>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  re::DynamicString::setCapacity((void *)this + 32, 0);
  *((_WORD *)this + 144) = 0;
  re::AudioSourceState::AudioSourceState((re::ecs2::VoiceComponent *)((char *)this + 304));
  *((_WORD *)this + 5re::HashTable<re::ecs2::Entity const*,re::ecs2::BillboardData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::deinit((uint64_t *)this + 60) = 0;
  *(_OWORD *)((char *)this + 11re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 28) = 0u;
  return this;
}

void re::ecs2::VoiceComponent::~VoiceComponent(re::ecs2::VoiceComponent *this)
{
  *(void *)this = &unk_26E6FB5F0;
  re::AudioSourceState::~AudioSourceState((re::ecs2::VoiceComponent *)((char *)this + 304));
  re::DynamicString::deinit((re::ecs2::VoiceComponent *)((char *)this + 256));
  re::DynamicString::deinit((re::ecs2::VoiceComponent *)((char *)this + 192));
  if (*((unsigned char *)this + 144)) {
    re::DynamicString::deinit((re::ecs2::VoiceComponent *)((char *)this + 152));
  }
  re::AssetHandle::~AssetHandle((re::ecs2::VoiceComponent *)((char *)this + 40));
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  re::ecs2::VoiceComponent::~VoiceComponent(this);
  JUMPOUT(0x237DBCBD0);
}

void re::ecs2::VoiceSystem::~VoiceSystem(re::ecs2::VoiceSystem *this)
{
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::VoiceSystem::typeInfo(re::ecs2::VoiceSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"VoiceSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_VoiceSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_VoiceSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::VoiceSystem>, 0);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::VoiceComponent,(re::ecs2::ComponentTypeBase::Flags)2>::allocator()
{
  return *((void *)re::ecs2::ComponentImpl<re::ecs2::VoiceComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::VoiceComponent,(re::ecs2::ComponentTypeBase::Flags)2>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::VoiceComponent,(re::ecs2::ComponentTypeBase::Flags)2>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::VoiceComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

id re::internal::defaultRetain<re::ecs2::VoiceSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::VoiceSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
}

void *re::ecs2::allocInfo_EnvironmentLightingConfigurationComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_210, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_210))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF86758, "EnvironmentLightingConfigurationComponent");
    __cxa_guard_release(&_MergedGlobals_210);
  }
  return &unk_26AF86758;
}

void re::ecs2::initInfo_EnvironmentLightingConfigurationComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v13[0] = 0x7F1E61447B892B4CLL;
  v13[1] = "EnvironmentLightingConfigurationComponent";
  re::StringID::destroyString((re::StringID *)v13);
  *((_OWORD *)this + 2) = v14;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF86740, memory_order_acquire) & 1) == 0)
  {
    long long v4 = (re *)__cxa_guard_acquire(&qword_26AF86740);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 4ArcSharedObject::ArcSharedObject(this, 0) = 3;
      *(void *)(v7 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF86748 = v7;
      uint64_t v8 = re::introspectionAllocator((re *)v7);
      uint64_t v10 = re::introspect_float((re *)1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "environmentLightingWeight";
      *(void *)(v11 + 16) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x1C00000001;
      *(_DWORD *)(v11 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v11 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      *(void *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF86750 = v11;
      __cxa_guard_release(&qword_26AF86740);
    }
  }
  *((void *)this + 2) = 0x2000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((void *)this + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = &qword_26AF86748;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::EnvironmentLightingConfigurationComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 1ArcSharedObject::ArcSharedObject(this, 0) = re::internal::defaultDestruct<re::ecs2::EnvironmentLightingConfigurationComponent>;
  *((void *)this + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::EnvironmentLightingConfigurationComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::EnvironmentLightingConfigurationComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v12 = v14;
}

void re::internal::defaultConstruct<re::ecs2::EnvironmentLightingConfigurationComponent>(int a1, int a2, ArcSharedObject *this)
{
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)(v3 + 16) = 0;
  *(unsigned char *)(v3 + 24) = 0;
  *(void *)uint64_t v3 = &unk_26E6F4F68;
  *(_DWORD *)(v3 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 28) = 1065353216;
}

uint64_t re::internal::defaultDestruct<re::ecs2::EnvironmentLightingConfigurationComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

void re::internal::defaultConstructV2<re::ecs2::EnvironmentLightingConfigurationComponent>(ArcSharedObject *a1)
{
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(void *)(v1 + 16) = 0;
  *(unsigned char *)(v1 + 24) = 0;
  *(void *)uint64_t v1 = &unk_26E6F4F68;
  *(_DWORD *)(v1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 28) = 1065353216;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::EnvironmentLightingConfigurationComponent>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_EnvironmentLightingConfigurationComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"EnvironmentLightingConfigurationComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_EnvironmentLightingConfigurationComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_EnvironmentLightingConfigurationComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::EnvironmentLightingConfigurationComponent>, this);
}

float *CameraHelper<re::ecs2::PerspectiveCameraComponent>::moveCameraToLookAtAABB(float *result, float32x4_t *a2)
{
  if (result)
  {
    uint64_t v2 = result;
    float32x4_t v3 = a2[1];
    uint32x4_t v4 = (uint32x4_t)vcgtq_f32(*a2, v3);
    v4.i32[3] = v4.i32[2];
    float32x4_t v27 = v3;
    float32x4_t v28 = *a2;
    if ((vmaxvq_u32(v4) & 0x80000000) != 0)
    {
      float32x4_t v6 = 0uLL;
    }
    else
    {
      v5.i64[0] = 0x3F0000003F000000;
      v5.i64[1] = 0x3F0000003F000000;
      float32x4_t v6 = vmulq_f32(vaddq_f32(*a2, v3), v5);
    }
    float32x4_t v26 = v6;
    uint64_t v7 = (re::ecs2::EntityComponentCollection *)(result + 8);
    double result = (float *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(result + 8), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PerspectiveCameraComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    if (result)
    {
      float32x4_t v8 = vsubq_f32(v27, v28);
      float32x4_t v9 = vmulq_f32(v8, v8);
      float v10 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v9, 2), vaddq_f32(v9, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.f32, 1))).f32[0]);
      re::ecs2::PerspectiveCameraComponent::calculateProjection(result, (uint64_t)&v29, 1.0);
      float v11 = atan2f((float)(*(float *)&v30.i32[1] - *(float *)&v30.i32[2]) * 0.5, *((float *)&v29 + 1));
      float v12 = v11 + v11;
      uint64_t v13 = *((void *)v2 + 30);
      if (!v13) {
        uint64_t v13 = re::ecs2::EntityComponentCollection::add(v7, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::TransformComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
      }
      long long v14 = *(re::ecs2::TransformComponent ***)(v13 + 16);
      if (v14)
      {
        re::ecs2::TransformComponent::worldSRT(v14, (const re::ecs2::Entity *)1, (uint64_t)&v29);
      }
      else
      {
        int32x4_t v15 = *(int32x4_t *)(v13 + 48);
        long long v29 = *(_OWORD *)(v13 + 32);
        int32x4_t v30 = v15;
        long long v31 = *(_OWORD *)(v13 + 64);
      }
      float v16 = tanf(v12 * 0.5);
      v17.i64[0] = 0;
      v17.i32[3] = 0;
      *(float *)&v17.i32[2] = (float)((float)(v10 * 0.5) * 0.1) + (float)((float)(v10 * 0.5) / v16);
      float32x4_t v18 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v30, v30), (int8x16_t)v30, 0xCuLL);
      float32x4_t v19 = vnegq_f32((float32x4_t)v30);
      float32x4_t v20 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v17, v17), (int8x16_t)v17, 0xCuLL), v19), (float32x4_t)v17, v18);
      int8x16_t v21 = (int8x16_t)vaddq_f32(v20, v20);
      float32x4_t v22 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v21, (int32x4_t)v21), v21, 0xCuLL);
      float32x4_t v23 = vaddq_f32((float32x4_t)v17, vmulq_laneq_f32(v22, (float32x4_t)v30, 3));
      int8x16_t v24 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v22, (int32x4_t)v22), (int8x16_t)v22, 0xCuLL), v19), v22, v18);
      float32x4_t v25 = vaddq_f32(v26, vaddq_f32(v23, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v24, (int32x4_t)v24), v24, 0xCuLL)));
      re::ecs2::TransformComponent::setWorldPosition((void *)v13, v25.i64[0], v25.i64[1]);
      return (float *)re::ecs2::Component::markDirty((void *)v13);
    }
  }
  return result;
}

void re::ecs2::PerspectiveCameraComponent::getRealTimeProjection(re::ecs2::PerspectiveCameraComponent *this@<X0>, re::ecs2::Entity *a2@<X1>, re::RenderManager *a3@<X2>, float a4@<S0>, uint64_t a5@<X8>)
{
  char v135 = (char)a3;
  uint64_t v189 = *MEMORY[0x263EF8340];
  uint64_t v7 = (re::ecs2::PerspectiveCameraComponent *)((char *)this + 32);
  float32x4_t v8 = (re::ecs2::CameraViewDescriptorsComponent *)re::ecs2::EntityComponentCollection::get((re::ecs2::PerspectiveCameraComponent *)((char *)this + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::CameraViewDescriptorsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  uint64_t v9 = re::ecs2::EntityComponentCollection::get(v7, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PerspectiveCameraComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  uint64_t v11 = 0;
  *(void *)a5 = 0;
  *(_DWORD *)(a5 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
  *(void *)(a5 + 24ArcSharedObject::ArcSharedObject(this, 0) = 0;
  long long v134 = (unint64_t *)(a5 + 240);
  *(_DWORD *)(a5 + 24re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
  float32x4_t v12 = (float32x4_t)xmmword_23435FD80;
  uint64_t v136 = a5;
  *(unsigned char *)(a5 + 544) = 0;
  do
  {
    uint64_t v13 = &v176[v11];
    *(_DWORD *)uint64_t v13 = 0;
    *(_OWORD *)(v13 + 4) = xmmword_234390F00;
    *(void *)(v13 + 2ArcSharedObject::ArcSharedObject(this, 0) = 0xBDCCCCCD3DCCCCCDLL;
    v13[28] = 0;
    *((_OWORD *)v13 + 2) = xmmword_23435FD80;
    *((_DWORD *)v13 + 12) = 1;
    v11 += 64;
    *((void *)v13 + 7) = 0;
  }
  while (v11 != 128);
  for (uint64_t i = 0; i != 8; i += 4)
  {
    int32x4_t v15 = &v175[i];
    *(_DWORD *)int32x4_t v15 = 0;
    *(_OWORD *)((char *)v15 + 4) = xmmword_234390F00;
    *(void *)((char *)v15 + 2ArcSharedObject::ArcSharedObject(this, 0) = 0xBDCCCCCD3DCCCCCDLL;
    *((unsigned char *)v15 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 28) = 0;
    void v15[2] = xmmword_23435FD80;
    *((_DWORD *)v15 + 12) = 1;
    *((void *)v15 + 7) = 0;
  }
  simd_float3x3 v140 = (float *)v9;
  for (uint64_t j = 0; j != 64; j += 32)
  {
    int32x4_t v17 = (void *)((char *)&v171 + j);
    *int32x4_t v17 = 0;
    v17[1] = 0;
    void v17[2] = 0;
    v17[3] = 0x3F80000000000000;
  }
  *(_OWORD *)&v176[12] = xmmword_2343971C0;
  *(_OWORD *)&v179[12] = xmmword_2343971C0;
  id v175[2] = v177;
  v175[3] = v178;
  v175[0] = *(_OWORD *)v176;
  v175[1] = *(_OWORD *)&v176[16];
  v175[6] = v180;
  v175[7] = v181;
  v175[4] = *(_OWORD *)v179;
  v175[5] = *(_OWORD *)&v179[16];
  uint64_t v143 = v8;
  if (*((void *)v8 + 27))
  {
    float32x4_t v18 = 0;
    do
    {
      uint64_t v138 = v18;
      uint64_t ViewDescriptor = re::ecs2::CameraViewDescriptorsComponent::tryGetViewDescriptor(v8, v18);
      re::ecs2::PerspectiveCameraComponent::calculateProjection(v140, (uint64_t)&v182, 1.0);
      *(_OWORD *)uint64_t v176 = v182;
      *(_OWORD *)&v176[16] = v183;
      long long v177 = v184;
      long long v178 = v185;
      re::ecs2::PerspectiveCameraComponent::calculateWorldPose((uint64_t)v140, 1, (uint64_t)v170);
      long long v171 = v170[0];
      long long v172 = v170[1];
      if (*(unsigned char *)(ViewDescriptor + 192))
      {
        re::ecs2::PerspectiveCameraComponent::calculateProjection(v140, (uint64_t)&v182, 1.0);
        *(_OWORD *)int v179 = v182;
        *(_OWORD *)&v179[16] = v183;
        long long v180 = v184;
        long long v181 = v185;
        re::ecs2::PerspectiveCameraComponent::calculateWorldPose((uint64_t)v140, 2, (uint64_t)v169);
        long long v173 = v169[0];
        long long v174 = v169[1];
        uint64_t v20 = 2;
      }
      else
      {
        uint64_t v20 = 1;
      }
      uint64_t v141 = v20;
      uint64_t v21 = 0;
      uint64_t v22 = 0;
      unint64_t v23 = *(void *)(ViewDescriptor + 304);
      uint64_t v24 = 32;
      uint64_t v25 = 80;
      do
      {
        if (!v23) {
          goto LABEL_36;
        }
        unint64_t v26 = 0;
        uint64_t v27 = ViewDescriptor + 16 * v22;
        unint64_t v28 = (unint64_t)&v176[64 * v22];
        unint64_t v161 = (float *)(v27 + 208);
        uint64_t v163 = (float *)(v27 + 204);
        long long v29 = (float *)(v28 | 0xC);
        int32x4_t v30 = (float *)(v28 + 16);
        uint64_t v146 = v24;
        uint64_t v148 = v22;
        unint64_t v31 = (unint64_t)&v175[4 * v22];
        uint64_t v155 = (float *)(v31 | 0xC);
        uint64_t v153 = (float *)(v31 + 24);
        uint64_t v144 = v25;
        uint64_t v150 = v21;
        uint64_t v157 = (float *)(v28 + 24);
        int v159 = (float *)(v28 + 20);
        do
        {
          uint64_t v32 = ViewDescriptor;
          uint64_t v33 = *(void *)(ViewDescriptor + 320);
          re::AssetHandle::AssetHandle((re::AssetHandle *)&v182, (const re::AssetHandle *)(v33 + v24));
          float v35 = *v163;
          float v36 = *v161;
          if (*((void *)&v182 + 1))
          {
            uint64_t v37 = re::AssetHandle::asset<re::TextureAsset>((re::TextureAsset *)&v182);
            if (*(_DWORD *)(v37 + 240)) {
LABEL_113:
            }
              std::__throw_bad_variant_access[abi:nn180100]();
            id v38 = *(id *)(v37 + 160);
            float v39 = (float)(unint64_t)objc_msgSend(v38, sel_width);
            float v40 = v39 / (float)(unint64_t)objc_msgSend(v38, sel_height);
            if (v38) {
          }
            }
          else
          {
            unsigned int v41 = *(_DWORD *)(v33 + v25);
            if (v41 == -1)
            {
              uint64_t v43 = v33 + v21;
              uint64_t v44 = *(void **)(v43 + 88);
              if (v44)
              {
                float v45 = (float)(unint64_t)objc_msgSend(v44, sel_width);
                long long v46 = *(void **)(v43 + 88);
LABEL_26:
                float v40 = v45 / (float)(unint64_t)objc_msgSend(v46, sel_height, v134);
                goto LABEL_28;
              }
              long long v47 = *(void **)(v43 + 104);
              if (v47)
              {
                float v45 = (float)(unint64_t)objc_msgSend(v47, sel_width, v134);
                long long v46 = *(void **)(v43 + 104);
                goto LABEL_26;
              }
            }
            else
            {
              __int16 v42 = (re::DrawingManager *)*((void *)a2 + 13);
              if (v42)
              {
                float v40 = re::DrawingManager::layerAspect(v42, v41, v34);
                goto LABEL_28;
              }
            }
            float v40 = 1.0;
          }
LABEL_28:
          uint64_t ViewDescriptor = v32;
          float v48 = (float)(*v29 + *v30) * 0.5;
          float v49 = *v159;
          float v50 = *v157;
          float v51 = (float)(*v159 - *v157) * 0.5;
          float v52 = (float)((float)(v35 / v36) * v40) * v51;
          v53.f32[0] = v48 + v52;
          float v54 = v48 - v52;
          if (a4 > 0.0)
          {
            float v55 = (float)(v54 + v53.f32[0]) * 0.5;
            float v56 = v51 * a4;
            v53.f32[0] = v56 + v55;
            float v54 = v55 - v56;
          }
          if (v54 > *v155) {
            float v54 = *v155;
          }
          *long long v29 = v54;
          v53.f32[1] = v49;
          *(int8x8_t *)int32x4_t v30 = vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)(v31 + 16), v53), *(int8x8_t *)(v31 + 16), (int8x8_t)v53);
          if (v50 > *v153) {
            float v50 = *v153;
          }
          *uint64_t v157 = v50;
          long long v57 = *(_OWORD *)(v28 + 16);
          *(_OWORD *)unint64_t v31 = *(_OWORD *)v28;
          *(_OWORD *)(v31 + 16) = v57;
          long long v58 = *(_OWORD *)(v28 + 48);
          *(_OWORD *)(v31 + 32) = *(_OWORD *)(v28 + 32);
          *(_OWORD *)(v31 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v58;
          re::AssetHandle::~AssetHandle((re::AssetHandle *)&v182);
          ++v26;
          unint64_t v23 = *(void *)(v32 + 304);
          v21 += 136;
          v25 += 136;
          v24 += 136;
        }
        while (v23 > v26);
        float32x4_t v8 = v143;
        uint64_t v25 = v144;
        uint64_t v22 = v148;
        uint64_t v21 = v150;
        uint64_t v24 = v146;
LABEL_36:
        ++v22;
        v21 += 8;
        v25 += 4;
        v24 += 24;
      }
      while (v22 != v141);
      float32x4_t v18 = (re::ecs2::CameraViewDescriptorsComponent *)((char *)v138 + 1);
    }
    while (*((void *)v8 + 27) > (unint64_t)v138 + 1);
  }
  if (!*((void *)v8 + 32))
  {
    unsigned int v137 = 1;
    goto LABEL_71;
  }
  uint64_t v59 = 0;
  unsigned int v137 = 1;
  do
  {
    uint64_t v139 = v59;
    uint64_t v60 = re::ecs2::CameraViewDescriptorsComponent::tryGetViewDescriptor(v8, (re::ecs2::CameraViewDescriptorsComponent *)(v59 + 0x10000));
    re::ecs2::PerspectiveCameraComponent::calculateProjection(v140, (uint64_t)&v182, 1.0);
    *(_OWORD *)uint64_t v176 = v182;
    *(_OWORD *)&v176[16] = v183;
    long long v177 = v184;
    long long v178 = v185;
    re::ecs2::PerspectiveCameraComponent::calculateWorldPose((uint64_t)v140, 1, (uint64_t)v168);
    long long v171 = v168[0];
    long long v172 = v168[1];
    if (*(unsigned char *)(v60 + 192))
    {
      uint64_t v142 = 2;
      re::ecs2::PerspectiveCameraComponent::calculateProjection(v140, (uint64_t)&v182, 1.0);
      *(_OWORD *)int v179 = v182;
      *(_OWORD *)&v179[16] = v183;
      long long v180 = v184;
      long long v181 = v185;
      re::ecs2::PerspectiveCameraComponent::calculateProjection(v140, (uint64_t)&v182, 1.0);
      *(_OWORD *)int v179 = v182;
      *(_OWORD *)&v179[16] = v183;
      long long v180 = v184;
      long long v181 = v185;
      re::ecs2::PerspectiveCameraComponent::calculateWorldPose((uint64_t)v140, 2, (uint64_t)v167);
      long long v173 = v167[0];
      long long v174 = v167[1];
      unsigned int v137 = 2;
    }
    else
    {
      uint64_t v142 = 1;
    }
    uint64_t v61 = 0;
    uint64_t v62 = 0;
    unint64_t v63 = *(void *)(v60 + 304);
    uint64_t v64 = 32;
    uint64_t v65 = 80;
    do
    {
      if (!v63) {
        goto LABEL_67;
      }
      unint64_t v66 = 0;
      uint64_t v67 = v60 + 16 * v62;
      unint64_t v68 = (unint64_t)&v176[64 * v62];
      uint64_t v162 = (float *)(v67 + 208);
      uint64_t v164 = (float *)(v67 + 204);
      long long v69 = (float *)(v68 | 0xC);
      uint64_t v70 = (float *)(v68 + 16);
      uint64_t v147 = v64;
      uint64_t v149 = v62;
      unint64_t v71 = (unint64_t)&v175[4 * v62];
      double v156 = (float *)(v71 | 0xC);
      uint64_t v154 = (float *)(v71 + 24);
      uint64_t v145 = v65;
      uint64_t v151 = v61;
      uint64_t v158 = (float *)(v68 + 24);
      uint64_t v160 = (float *)(v68 + 20);
      do
      {
        uint64_t v72 = v60;
        uint64_t v73 = *(void *)(v60 + 320);
        re::AssetHandle::AssetHandle((re::AssetHandle *)&v182, (const re::AssetHandle *)(v73 + v64));
        float v75 = *v164;
        float v76 = *v162;
        if (!*((void *)&v182 + 1))
        {
          unsigned int v81 = *(_DWORD *)(v73 + v65);
          if (v81 != -1)
          {
            uint64_t v82 = (re::DrawingManager *)*((void *)a2 + 13);
            if (v82)
            {
              float v80 = re::DrawingManager::layerAspect(v82, v81, v74);
              goto LABEL_59;
            }
            goto LABEL_58;
          }
          uint64_t v83 = v73 + v61;
          uint64_t v84 = *(void **)(v83 + 88);
          if (v84)
          {
            float v85 = (float)(unint64_t)objc_msgSend(v84, sel_width);
            int v86 = *(void **)(v83 + 88);
          }
          else
          {
            uint64_t v87 = *(void **)(v83 + 104);
            if (!v87)
            {
LABEL_58:
              float v80 = 1.0;
              goto LABEL_59;
            }
            float v85 = (float)(unint64_t)objc_msgSend(v87, sel_width);
            int v86 = *(void **)(v83 + 104);
          }
          float v80 = v85 / (float)(unint64_t)objc_msgSend(v86, sel_height, v134);
          goto LABEL_59;
        }
        uint64_t v77 = re::AssetHandle::asset<re::TextureAsset>((re::TextureAsset *)&v182);
        if (*(_DWORD *)(v77 + 240)) {
          goto LABEL_113;
        }
        id v78 = *(id *)(v77 + 160);
        float v79 = (float)(unint64_t)objc_msgSend(v78, sel_width);
        float v80 = v79 / (float)(unint64_t)objc_msgSend(v78, sel_height);
        if (v78) {

        }
LABEL_59:
        uint64_t v60 = v72;
        float v88 = (float)(*v69 + *v70) * 0.5;
        float v89 = *v160;
        float v90 = *v158;
        float v91 = (float)(*v160 - *v158) * 0.5;
        float v92 = (float)((float)(v75 / v76) * v80) * v91;
        v93.f32[0] = v88 + v92;
        float v94 = v88 - v92;
        if (a4 > 0.0)
        {
          float v95 = (float)(v94 + v93.f32[0]) * 0.5;
          float v96 = v91 * a4;
          v93.f32[0] = v96 + v95;
          float v94 = v95 - v96;
        }
        if (v94 > *v156) {
          float v94 = *v156;
        }
        *long long v69 = v94;
        v93.f32[1] = v89;
        *(int8x8_t *)uint64_t v70 = vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)(v71 + 16), v93), *(int8x8_t *)(v71 + 16), (int8x8_t)v93);
        if (v90 > *v154) {
          float v90 = *v154;
        }
        *uint64_t v158 = v90;
        long long v97 = *(_OWORD *)(v68 + 16);
        *(_OWORD *)unint64_t v71 = *(_OWORD *)v68;
        *(_OWORD *)(v71 + 16) = v97;
        long long v98 = *(_OWORD *)(v68 + 48);
        *(_OWORD *)(v71 + 32) = *(_OWORD *)(v68 + 32);
        *(_OWORD *)(v71 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v98;
        re::AssetHandle::~AssetHandle((re::AssetHandle *)&v182);
        ++v66;
        unint64_t v63 = *(void *)(v72 + 304);
        v61 += 136;
        v65 += 136;
        v64 += 136;
      }
      while (v63 > v66);
      float32x4_t v8 = v143;
      uint64_t v65 = v145;
      uint64_t v62 = v149;
      uint64_t v61 = v151;
      uint64_t v64 = v147;
LABEL_67:
      ++v62;
      v61 += 8;
      v65 += 4;
      v64 += 24;
    }
    while (v62 != v142);
    uint64_t v59 = v139 + 1;
  }
  while (*((void *)v8 + 32) > (unint64_t)(v139 + 1));
LABEL_71:
  v166[0] = v135;
  v166[1] = 0;
  re::buildCullingFrustum((uint64_t)&v171, v176, v137, v166, (uint64_t)&v182, v12, v10);
  uint64_t v99 = v136;
  if (&v182 != (long long *)v136)
  {
    re::DynamicInlineArray<re::DynamicInlineArray<re::PlaneF,6ul>,2ul>::move((unint64_t *)v136, (unint64_t *)&v182);
    ++*(_DWORD *)(v136 + 8);
    re::DynamicInlineArray<re::DynamicInlineArray<re::Vector4<float>,8ul>,2ul>::move(v134, v186);
    uint64_t v99 = v136;
    ++*(_DWORD *)(v136 + 248);
  }
  *(unsigned char *)(v99 + 544) = v188;
  if (v186[0])
  {
    float32x4_t v100 = v187;
    float32x4_t v101 = &v187[9 * v186[0]];
    do
    {
      *(void *)float32x4_t v100 = 0;
      ++*((_DWORD *)v100 + 2);
      v100 += 9;
    }
    while (v100 != v101);
  }
  if ((void)v182)
  {
    float32x4_t v102 = &v183;
    float32x4_t v103 = &v183 + 7 * v182;
    do
    {
      *(void *)float32x4_t v102 = 0;
      ++*((_DWORD *)v102 + 2);
      v102 += 7;
    }
    while (v102 != v103);
  }
  re::ecs2::PerspectiveCameraComponent::calculateWorldPose((uint64_t)v140, 0, (uint64_t)v165);
  long long v171 = v165[0];
  long long v172 = v165[1];
  uint64_t v104 = *((void *)v8 + 27);
  if (v104)
  {
LABEL_80:
    if (v104 == 1
      && !*((void *)v8 + 32)
      && !*(void *)(re::ecs2::CameraViewDescriptorsComponent::tryGetViewDescriptor(v8, 0) + 304))
    {
      long long v106 = (re::DrawingManager *)*((void *)a2 + 13);
      if (v106) {
        float v107 = re::DrawingManager::layerAspect(v106, 0, v105);
      }
      else {
        float v107 = 1.0;
      }
      re::ecs2::PerspectiveCameraComponent::calculateProjection(v140, (uint64_t)&v182, 1.0);
      *(_OWORD *)uint64_t v176 = v182;
      *(_OWORD *)&v176[16] = v183;
      long long v177 = v184;
      long long v178 = v185;
      float v122 = (float)(*((float *)&v182 + 3) + *(float *)&v183) * 0.5;
      float v123 = (float)(*((float *)&v183 + 1) - *((float *)&v183 + 2)) * 0.5;
      v124.f32[0] = v107 * v123;
      v125.f32[0] = v122 + (float)(v107 * v123);
      float v126 = v122 - (float)(v107 * v123);
      *(_DWORD *)&v176[16] = v125.i32[0];
      *(float *)&v176[12] = v126;
      if (a4 > 0.0)
      {
        float v127 = (float)(v126 + v125.f32[0]) * 0.5;
        float v128 = v123 * a4;
        v125.f32[0] = v128 + v127;
        *(float *)&v176[16] = v128 + v127;
        *(float *)&v176[12] = v127 - v128;
      }
      re::buildCullingFrustum((uint64_t)&v171, v176, 1u, v166, (uint64_t)&v182, v125, v124);
      uint64_t v129 = v136;
      if (&v182 != (long long *)v136)
      {
        re::DynamicInlineArray<re::DynamicInlineArray<re::PlaneF,6ul>,2ul>::move((unint64_t *)v136, (unint64_t *)&v182);
        ++*(_DWORD *)(v136 + 8);
        re::DynamicInlineArray<re::DynamicInlineArray<re::Vector4<float>,8ul>,2ul>::move(v134, v186);
        uint64_t v129 = v136;
        ++*(_DWORD *)(v136 + 248);
      }
      *(unsigned char *)(v129 + 544) = v188;
      if (v186[0])
      {
        float32x4_t v130 = v187;
        float32x4_t v131 = &v187[9 * v186[0]];
        do
        {
          *(void *)float32x4_t v130 = 0;
          ++*((_DWORD *)v130 + 2);
          v130 += 9;
        }
        while (v130 != v131);
      }
      if ((void)v182)
      {
        uint64_t v132 = &v183;
        unsigned __int8 v133 = &v183 + 7 * v182;
        do
        {
          *(void *)uint64_t v132 = 0;
          ++*((_DWORD *)v132 + 2);
          v132 += 7;
        }
        while (v132 != v133);
      }
    }
  }
  else if (!*((void *)v8 + 32))
  {
    long long v108 = (re::DrawingManager *)*((void *)a2 + 13);
    if (v108) {
      float v109 = re::DrawingManager::layerAspect(v108, 0, *(double *)v165);
    }
    else {
      float v109 = 1.0;
    }
    re::ecs2::PerspectiveCameraComponent::calculateProjection(v140, (uint64_t)&v182, 1.0);
    *(_OWORD *)uint64_t v176 = v182;
    *(_OWORD *)&v176[16] = v183;
    long long v177 = v184;
    long long v178 = v185;
    float v110 = (float)(*((float *)&v182 + 3) + *(float *)&v183) * 0.5;
    float v111 = (float)(*((float *)&v183 + 1) - *((float *)&v183 + 2)) * 0.5;
    v112.f32[0] = v109 * v111;
    v113.f32[0] = v110 + (float)(v109 * v111);
    float v114 = v110 - (float)(v109 * v111);
    *(_DWORD *)&v176[16] = v113.i32[0];
    *(float *)&v176[12] = v114;
    if (a4 > 0.0)
    {
      float v115 = (float)(v114 + v113.f32[0]) * 0.5;
      float v116 = v111 * a4;
      v113.f32[0] = v116 + v115;
      *(float *)&v176[16] = v116 + v115;
      *(float *)&v176[12] = v115 - v116;
    }
    re::buildCullingFrustum((uint64_t)&v171, v176, 1u, v166, (uint64_t)&v182, v113, v112);
    uint64_t v117 = v136;
    if (&v182 != (long long *)v136)
    {
      re::DynamicInlineArray<re::DynamicInlineArray<re::PlaneF,6ul>,2ul>::move((unint64_t *)v136, (unint64_t *)&v182);
      ++*(_DWORD *)(v136 + 8);
      re::DynamicInlineArray<re::DynamicInlineArray<re::Vector4<float>,8ul>,2ul>::move(v134, v186);
      uint64_t v117 = v136;
      ++*(_DWORD *)(v136 + 248);
    }
    *(unsigned char *)(v117 + 544) = v188;
    if (v186[0])
    {
      long long v118 = v187;
      long long v119 = &v187[9 * v186[0]];
      do
      {
        *(void *)long long v118 = 0;
        ++*((_DWORD *)v118 + 2);
        v118 += 9;
      }
      while (v118 != v119);
    }
    if ((void)v182)
    {
      int v120 = &v183;
      unsigned __int8 v121 = &v183 + 7 * v182;
      do
      {
        *(void *)int v120 = 0;
        ++*((_DWORD *)v120 + 2);
        v120 += 7;
      }
      while (v120 != v121);
    }
    uint64_t v104 = *((void *)v8 + 27);
    goto LABEL_80;
  }
}

float *CameraHelper<re::ecs2::OrthographicCameraComponent>::moveCameraToLookAtAABB(float *result, float32x4_t *a2)
{
  if (result)
  {
    uint64_t v2 = result;
    float32x4_t v3 = a2[1];
    uint32x4_t v4 = (uint32x4_t)vcgtq_f32(*a2, v3);
    v4.i32[3] = v4.i32[2];
    float32x4_t v27 = v3;
    float32x4_t v28 = *a2;
    if ((vmaxvq_u32(v4) & 0x80000000) != 0)
    {
      float32x4_t v6 = 0uLL;
    }
    else
    {
      v5.i64[0] = 0x3F0000003F000000;
      v5.i64[1] = 0x3F0000003F000000;
      float32x4_t v6 = vmulq_f32(vaddq_f32(*a2, v3), v5);
    }
    float32x4_t v26 = v6;
    uint64_t v7 = (re::ecs2::EntityComponentCollection *)(result + 8);
    double result = (float *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(result + 8), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::OrthographicCameraComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    if (result)
    {
      float32x4_t v8 = vsubq_f32(v27, v28);
      float32x4_t v9 = vmulq_f32(v8, v8);
      float v10 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v9, 2), vaddq_f32(v9, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.f32, 1))).f32[0]);
      re::ecs2::OrthographicCameraComponent::calculateProjection(result, (uint64_t)&v29, 1.0);
      float v11 = atan2f((float)(*(float *)&v30.i32[1] - *(float *)&v30.i32[2]) * 0.5, *((float *)&v29 + 1));
      float v12 = v11 + v11;
      uint64_t v13 = *((void *)v2 + 30);
      if (!v13) {
        uint64_t v13 = re::ecs2::EntityComponentCollection::add(v7, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::TransformComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
      }
      long long v14 = *(re::ecs2::TransformComponent ***)(v13 + 16);
      if (v14)
      {
        re::ecs2::TransformComponent::worldSRT(v14, (const re::ecs2::Entity *)1, (uint64_t)&v29);
      }
      else
      {
        int32x4_t v15 = *(int32x4_t *)(v13 + 48);
        long long v29 = *(_OWORD *)(v13 + 32);
        int32x4_t v30 = v15;
        long long v31 = *(_OWORD *)(v13 + 64);
      }
      float v16 = tanf(v12 * 0.5);
      v17.i64[0] = 0;
      v17.i32[3] = 0;
      *(float *)&v17.i32[2] = (float)((float)(v10 * 0.5) * 0.1) + (float)((float)(v10 * 0.5) / v16);
      float32x4_t v18 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v30, v30), (int8x16_t)v30, 0xCuLL);
      float32x4_t v19 = vnegq_f32((float32x4_t)v30);
      float32x4_t v20 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v17, v17), (int8x16_t)v17, 0xCuLL), v19), (float32x4_t)v17, v18);
      int8x16_t v21 = (int8x16_t)vaddq_f32(v20, v20);
      float32x4_t v22 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v21, (int32x4_t)v21), v21, 0xCuLL);
      float32x4_t v23 = vaddq_f32((float32x4_t)v17, vmulq_laneq_f32(v22, (float32x4_t)v30, 3));
      int8x16_t v24 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v22, (int32x4_t)v22), (int8x16_t)v22, 0xCuLL), v19), v22, v18);
      float32x4_t v25 = vaddq_f32(v26, vaddq_f32(v23, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v24, (int32x4_t)v24), v24, 0xCuLL)));
      re::ecs2::TransformComponent::setWorldPosition((void *)v13, v25.i64[0], v25.i64[1]);
      return (float *)re::ecs2::Component::markDirty((void *)v13);
    }
  }
  return result;
}

void *CameraHelper<re::ecs2::CustomMatrixCameraComponent>::moveCameraToLookAtAABB(void *result, float32x4_t *a2)
{
  if (result)
  {
    uint64_t v2 = result;
    float32x4_t v3 = a2[1];
    uint32x4_t v4 = (uint32x4_t)vcgtq_f32(*a2, v3);
    v4.i32[3] = v4.i32[2];
    float32x4_t v27 = v3;
    float32x4_t v28 = *a2;
    if ((vmaxvq_u32(v4) & 0x80000000) != 0)
    {
      float32x4_t v6 = 0uLL;
    }
    else
    {
      v5.i64[0] = 0x3F0000003F000000;
      v5.i64[1] = 0x3F0000003F000000;
      float32x4_t v6 = vmulq_f32(vaddq_f32(*a2, v3), v5);
    }
    float32x4_t v26 = v6;
    uint64_t v7 = (re::ecs2::EntityComponentCollection *)(result + 4);
    double result = (void *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(result + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::CustomMatrixCameraComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    if (result)
    {
      float32x4_t v8 = vsubq_f32(v27, v28);
      float32x4_t v9 = vmulq_f32(v8, v8);
      float v10 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v9, 2), vaddq_f32(v9, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.f32, 1))).f32[0]);
      *(_DWORD *)long long v29 = 0;
      *(_OWORD *)&void v29[4] = xmmword_234390F00;
      *(void *)&v29[20] = 0xBDCCCCCD3DCCCCCDLL;
      v29[28] = 0;
      long long v30 = xmmword_23435FD80;
      int v31 = 1;
      uint64_t v32 = 0;
      re::Projection::setFromMatrix4x4F((uint64_t)v29, (uint64_t)(result + 32));
      float v11 = atan2f((float)(*(float *)&v29[20] - *(float *)&v29[24]) * 0.5, *(float *)&v29[4]);
      float v12 = v11 + v11;
      uint64_t v13 = v2[30];
      if (!v13) {
        uint64_t v13 = re::ecs2::EntityComponentCollection::add(v7, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::TransformComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
      }
      long long v14 = *(re::ecs2::TransformComponent ***)(v13 + 16);
      if (v14)
      {
        re::ecs2::TransformComponent::worldSRT(v14, (const re::ecs2::Entity *)1, (uint64_t)v29);
      }
      else
      {
        long long v15 = *(_OWORD *)(v13 + 48);
        *(_OWORD *)long long v29 = *(_OWORD *)(v13 + 32);
        *(_OWORD *)&v29[16] = v15;
        long long v30 = *(_OWORD *)(v13 + 64);
      }
      float v16 = tanf(v12 * 0.5);
      v17.i64[0] = 0;
      v17.i32[3] = 0;
      *(float *)&v17.i32[2] = (float)((float)(v10 * 0.5) * 0.1) + (float)((float)(v10 * 0.5) / v16);
      float32x4_t v18 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*(int32x4_t *)&v29[16], *(int32x4_t *)&v29[16]), *(int8x16_t *)&v29[16], 0xCuLL);
      float32x4_t v19 = vnegq_f32(*(float32x4_t *)&v29[16]);
      float32x4_t v20 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v17, v17), (int8x16_t)v17, 0xCuLL), v19), (float32x4_t)v17, v18);
      int8x16_t v21 = (int8x16_t)vaddq_f32(v20, v20);
      float32x4_t v22 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v21, (int32x4_t)v21), v21, 0xCuLL);
      float32x4_t v23 = vaddq_f32((float32x4_t)v17, vmulq_laneq_f32(v22, *(float32x4_t *)&v29[16], 3));
      int8x16_t v24 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v22, (int32x4_t)v22), (int8x16_t)v22, 0xCuLL), v19), v22, v18);
      float32x4_t v25 = vaddq_f32(v26, vaddq_f32(v23, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v24, (int32x4_t)v24), v24, 0xCuLL)));
      re::ecs2::TransformComponent::setWorldPosition((void *)v13, v25.i64[0], v25.i64[1]);
      return re::ecs2::Component::markDirty((void *)v13);
    }
  }
  return result;
}

unint64_t *re::DynamicInlineArray<re::DynamicInlineArray<re::PlaneF,6ul>,2ul>::move(unint64_t *a1, unint64_t *a2)
{
  uint32x4_t v4 = (uint64_t *)(a2 + 2);
  unint64_t v5 = *a2;
  uint64_t v6 = (uint64_t)(a1 + 2);
  if (*a2 >= *a1)
  {
    double result = std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,re::DynamicInlineArray<re::PlaneF,6ul> *,re::DynamicInlineArray<re::PlaneF,6ul> *,re::DynamicInlineArray<re::PlaneF,6ul> *,0>((unint64_t *)v4, (unint64_t *)&v4[14 * *a1], v6);
    if (*a1 != v5)
    {
      uint64_t v10 = 14 * *a1;
      float v11 = (unint64_t *)&v4[v10];
      uint64_t v12 = v6 + v10 * 8;
      uint64_t v13 = -112 * *a1 + 112 * v5;
      do
      {
        *(void *)uint64_t v12 = 0;
        *(_DWORD *)(v12 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
        double result = re::DynamicInlineArray<re::PlaneF,6ul>::move((unint64_t *)v12, v11);
        v11 += 14;
        v12 += 112;
        v13 -= 112;
      }
      while (v13);
    }
  }
  else
  {
    double result = std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,re::DynamicInlineArray<re::PlaneF,6ul> *,re::DynamicInlineArray<re::PlaneF,6ul> *,re::DynamicInlineArray<re::PlaneF,6ul> *,0>((unint64_t *)v4, (unint64_t *)&v4[14 * v5], v6);
    if (v5 != *a1)
    {
      uint64_t v8 = v6 + 112 * *a1;
      uint64_t v9 = v6 + 112 * v5;
      do
      {
        *(void *)uint64_t v9 = 0;
        ++*(_DWORD *)(v9 + 8);
        v9 += 112;
      }
      while (v9 != v8);
    }
  }
  *a1 = v5;
  if (*a2)
  {
    long long v14 = &v4[14 * *a2];
    do
    {
      *uint32x4_t v4 = 0;
      ++*((_DWORD *)v4 + 2);
      v4 += 14;
    }
    while (v4 != v14);
  }
  *a2 = 0;
  ++*((_DWORD *)a2 + 2);
  return result;
}

unint64_t *std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,re::DynamicInlineArray<re::PlaneF,6ul> *,re::DynamicInlineArray<re::PlaneF,6ul> *,re::DynamicInlineArray<re::PlaneF,6ul> *,0>(unint64_t *a1, unint64_t *a2, uint64_t a3)
{
  uint32x4_t v4 = a1;
  if (a1 != a2)
  {
    do
    {
      if (v4 != (unint64_t *)a3)
      {
        re::DynamicInlineArray<re::PlaneF,6ul>::move((unint64_t *)a3, v4);
        ++*(_DWORD *)(a3 + 8);
      }
      v4 += 14;
      a3 += 112;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

unint64_t *re::DynamicInlineArray<re::PlaneF,6ul>::move(unint64_t *result, unint64_t *a2)
{
  float32x4_t v3 = result;
  unint64_t v4 = *a2;
  unint64_t v5 = *result;
  if (*a2 >= *result)
  {
    uint64_t v6 = (uint64_t *)(a2 + 2);
    uint64_t v7 = (uint64_t)&a2[2 * v5 + 2];
    uint64_t v8 = result + 2;
    if (v5) {
      memmove(result + 2, a2 + 2, 16 * v5);
    }
    double result = (unint64_t *)memcpy(&v8[2 * v5], &a2[2 * v5 + 2], (size_t)&v6[2 * v4] - v7);
  }
  else if (v4)
  {
    double result = (unint64_t *)memmove(result + 2, a2 + 2, 16 * v4);
  }
  *float32x4_t v3 = v4;
  *a2 = 0;
  ++*((_DWORD *)a2 + 2);
  return result;
}

unint64_t *re::DynamicInlineArray<re::DynamicInlineArray<re::Vector4<float>,8ul>,2ul>::move(unint64_t *a1, unint64_t *a2)
{
  unint64_t v4 = (uint64_t *)(a2 + 2);
  unint64_t v5 = *a2;
  uint64_t v6 = (uint64_t)(a1 + 2);
  if (*a2 >= *a1)
  {
    double result = std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,re::DynamicInlineArray<re::Vector4<float>,8ul> *,re::DynamicInlineArray<re::Vector4<float>,8ul> *,re::DynamicInlineArray<re::Vector4<float>,8ul> *,0>((unint64_t *)v4, (unint64_t *)&v4[18 * *a1], v6);
    if (*a1 != v5)
    {
      uint64_t v10 = (unint64_t *)&v4[18 * *a1];
      uint64_t v11 = v6 + 144 * *a1;
      uint64_t v12 = 144 * v5 - 144 * *a1;
      do
      {
        *(void *)uint64_t v11 = 0;
        *(_DWORD *)(v11 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
        double result = re::DynamicInlineArray<re::PlaneF,6ul>::move((unint64_t *)v11, v10);
        v10 += 18;
        v11 += 144;
        v12 -= 144;
      }
      while (v12);
    }
  }
  else
  {
    double result = std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,re::DynamicInlineArray<re::Vector4<float>,8ul> *,re::DynamicInlineArray<re::Vector4<float>,8ul> *,re::DynamicInlineArray<re::Vector4<float>,8ul> *,0>((unint64_t *)v4, (unint64_t *)&v4[18 * v5], v6);
    if (v5 != *a1)
    {
      uint64_t v8 = v6 + 144 * *a1;
      uint64_t v9 = v6 + 144 * v5;
      do
      {
        *(void *)uint64_t v9 = 0;
        ++*(_DWORD *)(v9 + 8);
        v9 += 144;
      }
      while (v9 != v8);
    }
  }
  *a1 = v5;
  if (*a2)
  {
    uint64_t v13 = &v4[18 * *a2];
    do
    {
      *unint64_t v4 = 0;
      ++*((_DWORD *)v4 + 2);
      v4 += 18;
    }
    while (v4 != v13);
  }
  *a2 = 0;
  ++*((_DWORD *)a2 + 2);
  return result;
}

unint64_t *std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,re::DynamicInlineArray<re::Vector4<float>,8ul> *,re::DynamicInlineArray<re::Vector4<float>,8ul> *,re::DynamicInlineArray<re::Vector4<float>,8ul> *,0>(unint64_t *a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v4 = a1;
  if (a1 != a2)
  {
    do
    {
      if (v4 != (unint64_t *)a3)
      {
        re::DynamicInlineArray<re::PlaneF,6ul>::move((unint64_t *)a3, v4);
        ++*(_DWORD *)(a3 + 8);
      }
      v4 += 18;
      a3 += 144;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

BOOL re::ecs2::AnchorComponentStateImpl::processUpdatingComponents(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v18, a5, 0);
  uint64_t v8 = v18;
  uint64_t v9 = v19;
  uint64_t v18 = a4;
  uint64_t v19 = v8;
  uint64_t v20 = v9;
  uint64_t v10 = (unsigned __int16)v9;
  uint64_t v11 = v9 & 0xFFFF0000;
  if (v8 != a5 || v10 != 0xFFFF || v11 != 4294901760)
  {
    do
    {
      uint64_t v14 = *(void *)re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v19);
      *(_DWORD *)(v14 + 44) = *(void *)(a1 + 32);
      re::DynamicArray<re::Matrix4x4<float>>::add((_anonymous_namespace_ *)(a1 + 16), v14 + 48);
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v19);
    }
    while (v19 != a5 || (unsigned __int16)v20 != 0xFFFF || WORD1(v20) != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

uint64_t re::ecs2::AnchorSystem::updateScenes(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  v46[0] = a3;
  v46[1] = a4;
  re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v45);
  uint64_t v6 = *(re::RenderManager **)(a1 + 112);
  if (v6 && *((void *)v6 + 13))
  {
    uint64_t v7 = (_anonymous_namespace_ *)(a1 + 416);
    uint64_t v8 = re::RenderManager::perFrameAllocator(v6);
    uint64_t v9 = a2[1];
    if (v9)
    {
      int v10 = 0;
      uint64_t v11 = (void *)*a2;
      uint64_t v12 = 8 * v9;
      do
      {
        uint64_t v13 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(*v11 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AnchorComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
        if (v13) {
          uint64_t v14 = *(void *)(v13 + 24);
        }
        else {
          LODWORD(v14) = 0;
        }
        v10 += v14;
        ++v11;
        v12 -= 8;
      }
      while (v12);
      unint64_t v15 = (v10 + 1);
      uint64_t v7 = (_anonymous_namespace_ *)(a1 + 416);
    }
    else
    {
      unint64_t v15 = 1;
    }
    *(void *)&long long v43 = 0;
    *(void *)&long long v42 = 0;
    DWORD2(v42) = 0;
    long long v41 = (unint64_t)v8;
    re::DynamicArray<re::Matrix4x4<float>>::setCapacity(&v41, v15);
    ++DWORD2(v42);
    re::DynamicArray<re::RigComponentConstraint>::operator=((uint64_t)v7, (uint64_t)&v41);
    if ((void)v41 && (void)v43) {
      (*(void (**)(void))(*(void *)v41 + 40))();
    }
    long long v41 = xmmword_23435FD50;
    long long v42 = xmmword_23435FD60;
    long long v43 = xmmword_23435FD80;
    long long v44 = xmmword_23435FBB0;
    uint64_t v39 = (uint64_t)v7;
    re::DynamicArray<re::Matrix4x4<float>>::add(v7, (uint64_t)&v41);
    uint64_t v16 = a2[1];
    if (v16)
    {
      int32x4_t v17 = (void *)*a2;
      uint64_t v40 = *a2 + 8 * v16;
      while (1)
      {
        *(void *)&long long v41 = *v17;
        unint64_t v18 = *(void *)(*(void *)(a1 + 224)
                        + 16
                        * re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(a1 + 216), &v41)+ 8);
        re::DynamicBitset<unsigned long long,64ul>::clearBit(a1 + 328, v18);
        uint64_t v19 = (void *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1 + 160, v18);
        uint64_t v20 = *(void *)(*v19 + 224);
        unint64_t v21 = v19[3];
        unint64_t v22 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v19[2] + 8, v21);
        if (*(_DWORD *)(v22 + 40)) {
          int v23 = (*(uint64_t (**)(uint64_t, void *, void *, unint64_t, unint64_t, void))(*(void *)v20 + 24))(v20, v46, v19, v21, v22, 0);
        }
        else {
          int v23 = 0;
        }
        unint64_t v24 = v19[5];
        unint64_t v25 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v19[2] + 8, v24);
        if (*(_DWORD *)(v25 + 40)) {
          v23 |= (*(uint64_t (**)(uint64_t, void *, void *, unint64_t, unint64_t, void))(*(void *)v20 + 32))(v20, v46, v19, v24, v25, 0);
        }
        unint64_t v26 = v19[6];
        unint64_t v27 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v19[2] + 8, v26);
        if (*(_DWORD *)(v27 + 40)) {
          break;
        }
        if (v23) {
          goto LABEL_23;
        }
LABEL_24:
        if (*(unsigned char *)(a1 + 392))
        {
          unint64_t v28 = *(void *)(a1 + 336);
          int v29 = *(_DWORD *)(a1 + 344);
          if (v28 < 0xB)
          {
            uint64_t v32 = (uint64_t *)(a1 + 352);
            if ((v29 & 1) == 0) {
              uint64_t v32 = *(uint64_t **)(a1 + 360);
            }
            if (!v28) {
              goto LABEL_42;
            }
            uint64_t v33 = 0;
            uint64_t v34 = 8 * v28;
            do
            {
              uint64_t v35 = *v32++;
              v33 |= v35;
              v34 -= 8;
            }
            while (v34);
            if (!v33) {
              goto LABEL_42;
            }
          }
          else
          {
            long long v30 = (void *)(a1 + 352);
            if ((v29 & 1) == 0) {
              long long v30 = *(void **)(a1 + 360);
            }
            uint64_t v31 = 8 * v28;
            while (!*v30)
            {
              ++v30;
              v31 -= 8;
              if (!v31) {
                goto LABEL_42;
              }
            }
          }
          float v36 = *(re::ecs2::System **)(a1 + 376);
          if (!*((unsigned char *)v36 + 86)) {
            re::ecs2::System::queueToRun(v36, 0.0);
          }
        }
LABEL_42:
        if (++v17 == (void *)v40) {
          goto LABEL_43;
        }
      }
      if (((v23 | (*(unsigned int (**)(uint64_t, void *, void *, unint64_t, unint64_t, void))(*(void *)v20 + 40))(v20, v46, v19, v26, v27, 0)) & 1) == 0)goto LABEL_24; {
LABEL_23:
      }
      re::DynamicBitset<unsigned long long,256ul>::setBit(a1 + 328, v18);
      goto LABEL_24;
    }
LABEL_43:
    uint64_t v37 = **(void **)(re::RenderFrameBox::get(*(void *)(*(void *)(a1 + 112) + 104) + 344, 0xFFFFFFFFFFFFFFFuLL)+ 320);
    (*(void (**)(void))(v37 + 1072))();
    *(void *)&long long v43 = 0;
    *(void *)&long long v42 = 0;
    long long v41 = 0uLL;
    DWORD2(v42) = 0;
    re::DynamicArray<re::RigComponentConstraint>::operator=(v39, (uint64_t)&v41);
    if ((void)v41 && (void)v43) {
      (*(void (**)(void))(*(void *)v41 + 40))();
    }
  }
  return re::ProfilerTimeGuard<(re::ProfilerStatistic)125>::end((uint64_t)v45);
}

double re::ecs2::AnchorSystem::willRemoveSystemFromECSService(re::ecs2::AnchorSystem *this)
{
  *((void *)this + 19) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 12ArcSharedObject::ArcSharedObject(this, 0) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  return result;
}

void re::ecs2::AnchorSystem::willAddSceneToECSService(re::ecs2::AnchorSystem *this, re::ecs2::Scene *a2)
{
  uint64_t v67 = *MEMORY[0x263EF8340];
  unint64_t v4 = (char *)this + 160;
  v57[0] = (uint64_t)a2;
  unint64_t v5 = (re::ecs2::AnchorSystem *)((char *)this + 280);
  unint64_t v6 = *((void *)this + 36);
  int v7 = *((_DWORD *)this + 74);
  if (v6 >= 0xB)
  {
    if (v7) {
      uint64_t v8 = (void *)((char *)this + 304);
    }
    else {
      uint64_t v8 = (void *)*((void *)this + 39);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_17;
      }
    }
    goto LABEL_16;
  }
  if (v7)
  {
    uint64_t v9 = (uint64_t *)((char *)this + 304);
    if (!v6) {
      goto LABEL_17;
    }
  }
  else
  {
    uint64_t v9 = (uint64_t *)*((void *)this + 39);
    if (!v6) {
      goto LABEL_17;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
  {
LABEL_16:
    *(void *)&long long v49 = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet((uint64_t)this + 280, 0);
    uint64_t v14 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)v4, v49);
    re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>::init(v14, (uint64_t)v4, (uint64_t)a2);
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((re::ecs2::AnchorSystem *)((char *)this + 216), v57, (uint64_t *)&v49);
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)v5, v49);
    unint64_t v15 = (char *)this + 328;
    unint64_t v16 = v49;
    goto LABEL_49;
  }
LABEL_17:
  long long v56 = 0u;
  long long v49 = 0u;
  *(void *)&long long v50 = 0;
  *((void *)&v50 + 1) = -1;
  long long v51 = 0u;
  long long v52 = 0u;
  uint64_t v53 = 0;
  uint64_t v54 = 1;
  long long v55 = 0uLL;
  unint64_t v17 = *((void *)this + 25);
  *(void *)&long long v56 = 0;
  unint64_t v18 = *((void *)this + 21);
  DWORD2(v56) = 0;
  if (v17 + 1 > 4 * v18)
  {
    re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>,4ul>::setBucketsCapacity((uint64_t *)this + 20, (v17 + 4) >> 2);
    unint64_t v18 = *((void *)this + 21);
  }
  if (v18 <= v17 >> 2)
  {
    v57[1] = 0;
    memset(v66, 0, sizeof(v66));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v58 = 136315906;
    uint64_t v59 = "operator[]";
    __int16 v60 = 1024;
    int v61 = 858;
    __int16 v62 = 2048;
    unint64_t v63 = v17 >> 2;
    __int16 v64 = 2048;
    unint64_t v65 = v18;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_69;
  }
  if (*((unsigned char *)this + 176)) {
    uint64_t v19 = (char *)this + 184;
  }
  else {
    uint64_t v19 = (char *)*((void *)this + 24);
  }
  uint64_t v20 = *(void *)&v19[8 * (v17 >> 2)];
  ++*((void *)this + 25);
  ++*((_DWORD *)this + 52);
  uint64_t v21 = v20 + 112 * (v17 & 3);
  long long v22 = v49;
  long long v23 = v50;
  long long v24 = v51;
  *(void *)(v21 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v52;
  *(_OWORD *)(v21 + 16) = v23;
  *(_OWORD *)(v21 + 32) = v24;
  *(_OWORD *)uint64_t v21 = v22;
  re::BucketArray<RESubscriptionHandle,8ul>::BucketArray(v21 + 56, (uint64_t)&v52 + 8);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStateSceneData(&v49);
  uint64_t v26 = *((void *)this + 25);
  if (!v26)
  {
LABEL_69:
    re::internal::assertLog((re::internal *)4, v25, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
  }
  uint64_t v27 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)v4, v26 - 1);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>::init(v27, (uint64_t)v4, v57[0]);
  *(void *)&v66[0] = *((void *)this + 25) - 1;
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((re::ecs2::AnchorSystem *)((char *)this + 216), v57, (uint64_t *)v66);
  unint64_t v28 = *((void *)this + 25);
  unint64_t v29 = *((void *)this + 40);
  if ((v28 & 0x3F) != 0) {
    unint64_t v30 = (v28 >> 6) + 1;
  }
  else {
    unint64_t v30 = v28 >> 6;
  }
  *((void *)this + 4ArcSharedObject::ArcSharedObject(this, 0) = v28;
  *(void *)&long long v49 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize(v5, v30, &v49);
  if (v28 && v29 > v28)
  {
    uint64_t v31 = 63;
    uint64_t v32 = *((void *)this + 40) & 0x3FLL;
    if (v32 && v32 != 63) {
      uint64_t v31 = ~(-1 << v32);
    }
    if (*((unsigned char *)this + 296)) {
      uint64_t v33 = (char *)this + 304;
    }
    else {
      uint64_t v33 = (char *)*((void *)this + 39);
    }
    *(void *)&v33[8 * *((void *)this + 36) - 8] &= v31;
  }
  unint64_t v34 = *((void *)this + 25);
  unint64_t v35 = *((void *)this + 46);
  if ((v34 & 0x3F) != 0) {
    unint64_t v36 = (v34 >> 6) + 1;
  }
  else {
    unint64_t v36 = v34 >> 6;
  }
  *((void *)this + 46) = v34;
  *(void *)&long long v49 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((re::ecs2::AnchorSystem *)((char *)this + 328), v36, &v49);
  if (v34 && v35 > v34)
  {
    uint64_t v37 = 63;
    uint64_t v38 = *((void *)this + 46) & 0x3FLL;
    if (v38 && v38 != 63) {
      uint64_t v37 = ~(-1 << v38);
    }
    if (*((unsigned char *)this + 344)) {
      uint64_t v39 = (char *)this + 352;
    }
    else {
      uint64_t v39 = (char *)*((void *)this + 45);
    }
    *(void *)&v39[8 * *((void *)this + 42) - 8] &= v37;
  }
  unint64_t v16 = *(void *)&v66[0];
  unint64_t v15 = (char *)this + 328;
LABEL_49:
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v15, v16);
  if (!*((unsigned char *)this + 392)) {
    return;
  }
  unint64_t v40 = *((void *)this + 42);
  int v41 = *((_DWORD *)this + 86);
  if (v40 >= 0xB)
  {
    if (v41) {
      long long v42 = (void *)((char *)this + 352);
    }
    else {
      long long v42 = (void *)*((void *)this + 45);
    }
    uint64_t v44 = 8 * v40;
    while (!*v42)
    {
      ++v42;
      v44 -= 8;
      if (!v44) {
        return;
      }
    }
LABEL_65:
    float v48 = (re::ecs2::System *)*((void *)this + 47);
    if (!*((unsigned char *)v48 + 86)) {
      re::ecs2::System::queueToRun(v48, 0.0);
    }
    return;
  }
  if (v41)
  {
    long long v43 = (uint64_t *)((char *)this + 352);
    if (!v40) {
      return;
    }
  }
  else
  {
    long long v43 = (uint64_t *)*((void *)this + 45);
    if (!v40) {
      return;
    }
  }
  uint64_t v45 = 0;
  uint64_t v46 = 8 * v40;
  do
  {
    uint64_t v47 = *v43++;
    v45 |= v47;
    v46 -= 8;
  }
  while (v46);
  if (v45) {
    goto LABEL_65;
  }
}

uint64_t re::ecs2::AnchorSystem::willRemoveSceneFromECSService(re::ecs2::AnchorSystem *this, re::ecs2::Scene *a2)
{
  unint64_t v16 = a2;
  float32x4_t v3 = (uint64_t *)((char *)this + 216);
  uint64_t result = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)this + 27, &v16);
  if (result != -1)
  {
    uint64_t v5 = *((void *)this + 28) + 16 * result;
    re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)this + 280, *(void *)(v5 + 8));
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)this + 328, *(void *)(v5 + 8));
    unint64_t v6 = (void *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)this + 160, *(void *)(v5 + 8));
    if (*v6)
    {
      int v7 = v6;
      *unint64_t v6 = 0;
      uint64_t v8 = v6 + 1;
      uint64_t v9 = *(void *)(v6[1] + 288);
      if (v9)
      {
        uint64_t v10 = v6[12];
        if (v10)
        {
          for (unint64_t i = 0; i != v10; ++i)
          {
            uint64_t v12 = re::BucketArray<RESubscriptionHandle,8ul>::operator[]((uint64_t)(v7 + 7), i);
            re::EventBus::unsubscribe(v9, *(void *)v12, *(void *)(v12 + 8));
          }
        }
      }
      re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)(v7 + 7));
      uint64_t v13 = 0;
      uint64_t v14 = v7 + 3;
      do
      {
        unint64_t v15 = (re::ecs2::ComponentBucketsBase *)v7[2];
        if (*(void *)v15) {
          re::ecs2::ComponentBucketsBase::removeBucket(v15, v14[v13]);
        }
        v14[v13++] = -1;
      }
      while (v13 != 4);
      *uint64_t v8 = 0;
      v8[1] = 0;
    }
    return re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::remove(v3, &v16);
  }
  return result;
}

void *re::ecs2::allocInfo_AnchorSystem(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_211, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_211))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF867D8, "AnchorSystem");
    __cxa_guard_release(&_MergedGlobals_211);
  }
  return &unk_26AF867D8;
}

void re::ecs2::initInfo_AnchorSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v5[0] = 0x306AD891A07BB2C8;
  v5[1] = "AnchorSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0x1E000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = &re::ecs2::initInfo_AnchorSystem(re::IntrospectionBase *)::structureAttributes;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::AnchorSystem>;
  *((void *)this + 1ArcSharedObject::ArcSharedObject(this, 0) = re::internal::defaultDestruct<re::ecs2::AnchorSystem>;
  *((void *)this + 11) = re::internal::defaultRetain<re::ecs2::AnchorSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 12) = re::internal::defaultRelease<re::ecs2::AnchorSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::AnchorSystem>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::AnchorSystem>;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

re::ecs2::AnchorSystem *re::internal::defaultConstruct<re::ecs2::AnchorSystem>(int a1, int a2, re::ecs2::AnchorSystem *this)
{
  return re::ecs2::AnchorSystem::AnchorSystem(this);
}

void *re::internal::defaultDestruct<re::ecs2::AnchorSystem>(uint64_t a1, uint64_t a2, void *a3)
{
  a3[50] = &unk_26E6FB700;
  re::FixedArray<CoreIKTransform>::deinit(a3 + 57);
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a3 + 52));
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a3 + 20);
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultDestructV2<re::ecs2::AnchorSystem>(void *a1)
{
  a1[50] = &unk_26E6FB700;
  re::FixedArray<CoreIKTransform>::deinit(a1 + 57);
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 52));
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 20);
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_AnchorSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AnchorSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_AnchorSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_AnchorSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::AnchorSystem>, this);
}

uint64_t re::ecs2::AnchorComponentStateImpl::dependsOnComponents(re::ecs2::AnchorComponentStateImpl *this)
{
  return *((void *)this + 9);
}

void re::ecs2::BasicComponentStateImpl<re::ecs2::AnchorComponent>::didDependentComponentChange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float32x4_t v3 = *(re::ecs2::Component **)(a3 + 128);
  if (v3)
  {
    uint64_t v5 = 24;
    unint64_t v6 = 0xFFFFFFFFLL;
    do
    {
      unint64_t v7 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a2 + 16), *(void *)(a2 + v5), v3);
      if (v7 != -1 && (v8 & 0xFFFFFF00000000) != 0)
      {
        unint64_t v10 = v7;
        unint64_t v6 = v8;
        goto LABEL_11;
      }
      v5 += 8;
    }
    while (v5 != 56);
    unint64_t v10 = -1;
LABEL_11:
    re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>::setComponentState(a2, v10, v6);
  }
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::AnchorComponent>::processDirtyComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v19, a5, 0);
  unint64_t v8 = v19;
  unint64_t v9 = v20;
  unint64_t v19 = a4;
  unint64_t v20 = v8;
  unint64_t v21 = v9;
  uint64_t v10 = (unsigned __int16)v9;
  uint64_t v11 = v9 & 0xFFFF0000;
  if (v8 != a5 || v10 != 0xFFFF || v11 != 4294901760)
  {
    do
    {
      unint64_t v14 = v19;
      unint64_t v15 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v20);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v14, v15, *(void *)(a3 + 48));
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v20);
    }
    while (v20 != a5 || (unsigned __int16)v21 != 0xFFFF || WORD1(v21) != 0xFFFF);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::AnchorComponent>::processPreparingComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v19, a5, 0);
  unint64_t v8 = v19;
  unint64_t v9 = v20;
  unint64_t v19 = a4;
  unint64_t v20 = v8;
  unint64_t v21 = v9;
  uint64_t v10 = (unsigned __int16)v9;
  uint64_t v11 = v9 & 0xFFFF0000;
  if (v8 != a5 || v10 != 0xFFFF || v11 != 4294901760)
  {
    do
    {
      unint64_t v14 = v19;
      unint64_t v15 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v20);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v14, v15, *(void *)(a3 + 48));
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v20);
    }
    while (v20 != a5 || (unsigned __int16)v21 != 0xFFFF || WORD1(v21) != 0xFFFF);
  }
  return 0;
}

void re::ecs2::AnchorSystem::~AnchorSystem(re::ecs2::AnchorSystem *this)
{
  *((void *)this + 5ArcSharedObject::ArcSharedObject(this, 0) = &unk_26E6FB700;
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 57);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 416);
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 20);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  *((void *)this + 5ArcSharedObject::ArcSharedObject(this, 0) = &unk_26E6FB700;
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 57);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 416);
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 20);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::AnchorSystem::typeInfo(re::ecs2::AnchorSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AnchorSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_AnchorSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_AnchorSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::AnchorSystem>, 0);
}

uint64_t *re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v84 = *MEMORY[0x263EF8340];
  *(void *)a1 = a2;
  *(void *)(a1 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = a3;
  *(void *)(a1 + 16) = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a3 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AnchorComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)+ 480;
  for (uint64_t i = 24; i != 56; i += 8)
  {
    unint64_t v7 = (_anonymous_namespace_ *)re::ecs2::ComponentBucketsBase::addBucket(*(re::ecs2::ComponentBucketsBase **)(a1 + 16));
    *(void *)(a1 + i) = v7;
  }
  unint64_t v9 = *(re::EventBus **)(a3 + 288);
  if (v9)
  {
    uint64_t v82 = re::globalAllocators((re *)result)[2];
    uint64_t v10 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v82 + 32))(v82, 32, 0);
    *uint64_t v10 = &unk_26E6FB7F8;
    v10[1] = a1;
    void v10[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>::componentChangedHandler<REComponentDidChangeEvent>;
    void v10[3] = 0;
    uint64_t v83 = v10;
    uint64_t v11 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v81, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::AnchorComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v13 = v12;
    unint64_t v14 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *unint64_t v14 = v11;
    v14[1] = v13;
    unint64_t v15 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v81);
    uint64_t v79 = re::globalAllocators(v15)[2];
    unint64_t v16 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v79 + 32))(v79, 32, 0);
    *unint64_t v16 = &unk_26E6FB850;
    v16[1] = a1;
    uint64_t v16[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>::componentChangedHandler<REComponentDidActivateEvent>;
    v16[3] = 0;
    float v80 = v16;
    uint64_t v17 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v78, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::AnchorComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v19 = v18;
    unint64_t v20 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *unint64_t v20 = v17;
    v20[1] = v19;
    unint64_t v21 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v78);
    uint64_t v76 = re::globalAllocators(v21)[2];
    long long v22 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v76 + 32))(v76, 32, 0);
    *long long v22 = &unk_26E6FB8A8;
    v22[1] = a1;
    void v22[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>::componentChangedHandler<REComponentWillDeactivateEvent>;
    v22[3] = 0;
    uint64_t v77 = v22;
    uint64_t v23 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v75, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::AnchorComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v25 = v24;
    uint64_t v26 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *uint64_t v26 = v23;
    v26[1] = v25;
    uint64_t v27 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v75);
    uint64_t v73 = re::globalAllocators(v27)[2];
    unint64_t v28 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v73 + 32))(v73, 32, 0);
    *unint64_t v28 = &unk_26E6FB900;
    v28[1] = a1;
    uint64_t v28[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>::componentChangedHandler<REComponentDidAddEvent>;
    v28[3] = 0;
    double v74 = v28;
    uint64_t v29 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v72, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::AnchorComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v31 = v30;
    uint64_t v32 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    void *v32 = v29;
    v32[1] = v31;
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v72);
    uint64_t result = (uint64_t *)(***(uint64_t (****)(void))(a2 + 224))();
    if (v33)
    {
      unint64_t v34 = result;
      uint64_t v35 = 8 * v33;
      do
      {
        uint64_t v36 = *v34++;
        uint64_t v70 = re::globalAllocators((re *)result)[2];
        unint64_t v71 = 0;
        uint64_t v37 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v70 + 32))(v70, 32, 0);
        *uint64_t v37 = &unk_26E6FB7F8;
        v37[1] = a1;
        v37[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>;
        v37[3] = 0;
        unint64_t v71 = v37;
        uint64_t v38 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v69, v36, 0);
        uint64_t v40 = v39;
        int v41 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *int v41 = v38;
        v41[1] = v40;
        long long v42 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v69);
        uint64_t v67 = re::globalAllocators(v42)[2];
        unint64_t v68 = 0;
        long long v43 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v67 + 32))(v67, 32, 0);
        void *v43 = &unk_26E6FB850;
        v43[1] = a1;
        uint64_t v43[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>;
        v43[3] = 0;
        unint64_t v68 = v43;
        uint64_t v44 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v66, v36, 0);
        uint64_t v46 = v45;
        uint64_t v47 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *uint64_t v47 = v44;
        v47[1] = v46;
        float v48 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v66);
        uint64_t v64 = re::globalAllocators(v48)[2];
        unint64_t v65 = 0;
        long long v49 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v64 + 32))(v64, 32, 0);
        *long long v49 = &unk_26E6FB8A8;
        v49[1] = a1;
        v49[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>;
        v49[3] = 0;
        unint64_t v65 = v49;
        uint64_t v50 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v63, v36, 0);
        uint64_t v52 = v51;
        uint64_t v53 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *uint64_t v53 = v50;
        v53[1] = v52;
        uint64_t v54 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v63);
        uint64_t v61 = re::globalAllocators(v54)[2];
        __int16 v62 = 0;
        long long v55 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v61 + 32))(v61, 32, 0);
        *long long v55 = &unk_26E6FB900;
        v55[1] = a1;
        v55[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>;
        v55[3] = 0;
        __int16 v62 = v55;
        uint64_t v56 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v60, v36, 0);
        uint64_t v58 = v57;
        uint64_t v59 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *uint64_t v59 = v56;
        v59[1] = v58;
        uint64_t result = (uint64_t *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v60);
        v35 -= 8;
      }
      while (v35);
    }
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>::componentChangedHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v23 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v4 + 56), &v23);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(void *)(*(void *)(v4 + 64) + 16 * v5 + 8));
  if (!*(unsigned char *)(v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *(void *)(v4 + 176);
  int v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if (v7) {
      unint64_t v8 = (void *)(v4 + 192);
    }
    else {
      unint64_t v8 = *(void **)(v4 + 200);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    unint64_t v9 = (uint64_t *)(v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    unint64_t v9 = *(uint64_t **)(v4 + 200);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  unint64_t v15 = *(re::ecs2::Component **)(a2 + 128);
  if (v15)
  {
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v17 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v15);
      if (v17 != -1 && (v18 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>::setComponentState(a1, v17, v18);
        return 0;
      }
    }
    unint64_t v20 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v15);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v20, v21);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>::componentChangedHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v23 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v4 + 56), &v23);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(void *)(*(void *)(v4 + 64) + 16 * v5 + 8));
  if (!*(unsigned char *)(v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *(void *)(v4 + 176);
  int v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if (v7) {
      unint64_t v8 = (void *)(v4 + 192);
    }
    else {
      unint64_t v8 = *(void **)(v4 + 200);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    unint64_t v9 = (uint64_t *)(v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    unint64_t v9 = *(uint64_t **)(v4 + 200);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  unint64_t v15 = *(re::ecs2::Component **)(a2 + 128);
  if (v15)
  {
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v17 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v15);
      if (v17 != -1 && (v18 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>::setComponentState(a1, v17, v18);
        return 0;
      }
    }
    unint64_t v20 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v15);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v20, v21);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>::componentChangedHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v23 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v4 + 56), &v23);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(void *)(*(void *)(v4 + 64) + 16 * v5 + 8));
  if (!*(unsigned char *)(v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *(void *)(v4 + 176);
  int v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if (v7) {
      unint64_t v8 = (void *)(v4 + 192);
    }
    else {
      unint64_t v8 = *(void **)(v4 + 200);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    unint64_t v9 = (uint64_t *)(v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    unint64_t v9 = *(uint64_t **)(v4 + 200);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  unint64_t v15 = *(re::ecs2::Component **)(a2 + 128);
  if (v15)
  {
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v17 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v15);
      if (v17 != -1 && (v18 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>::setComponentState(a1, v17, v18);
        return 0;
      }
    }
    unint64_t v20 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v15);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v20, v21);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>::componentChangedHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v23 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v4 + 56), &v23);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(void *)(*(void *)(v4 + 64) + 16 * v5 + 8));
  if (!*(unsigned char *)(v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *(void *)(v4 + 176);
  int v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if (v7) {
      unint64_t v8 = (void *)(v4 + 192);
    }
    else {
      unint64_t v8 = *(void **)(v4 + 200);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    unint64_t v9 = (uint64_t *)(v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    unint64_t v9 = *(uint64_t **)(v4 + 200);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  unint64_t v15 = *(re::ecs2::Component **)(a2 + 128);
  if (v15)
  {
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v17 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v15);
      if (v17 != -1 && (v18 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>::setComponentState(a1, v17, v18);
        return 0;
      }
    }
    unint64_t v20 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v15);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v20, v21);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

unint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>::setComponentState(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t result = re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), a2, a3, *(void *)(a1 + 24));
  if (result != a2 || v7 != a3 || ((v7 ^ a3) & 0xFFFFFF00000000) != 0)
  {
    uint64_t v10 = *(uint64_t (**)(void))(**(void **)(*(void *)a1 + 224) + 16);
    return v10();
  }
  return result;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6FB7F8;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6FB7F8;
  *(void *)(a2 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6FB850;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6FB850;
  *(void *)(a2 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6FB8A8;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6FB8A8;
  *(void *)(a2 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6FB900;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6FB900;
  *(void *)(a2 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

id re::internal::defaultRetain<re::ecs2::AnchorSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::AnchorSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
}

void *re::ecs2::allocInfo_ClippingPrimitiveComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF86860, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF86860))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF868F0, "ClippingPrimitiveComponent");
    __cxa_guard_release(&qword_26AF86860);
  }
  return &unk_26AF868F0;
}

void re::ecs2::initInfo_ClippingPrimitiveComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  *(void *)&long long v35 = 0x175D00AB0A0458B0;
  *((void *)&v35 + 1) = "ClippingPrimitiveComponent";
  re::StringID::destroyString((re::StringID *)&v35);
  *((_OWORD *)this + 2) = v33;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF86858, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF86858);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 4ArcSharedObject::ArcSharedObject(this, 0) = 3;
      *(void *)(v7 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF86870 = v7;
      unint64_t v8 = re::introspectionAllocator((re *)v7);
      uint64_t v9 = re::introspect_Vector3F((re::IntrospectionBase **)1);
      uint64_t v10 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v10 = 1;
      *(void *)(v10 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "m_localBoundsMin";
      *(void *)(v10 + 16) = v9;
      *(void *)(v10 + 24) = 0;
      *(void *)(v10 + 32) = 0x2000000001;
      *(_DWORD *)(v10 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v10 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      *(void *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_26AF86878 = v10;
      uint64_t v11 = re::introspectionAllocator((re *)v10);
      uint64_t v12 = re::introspect_Vector3F((re::IntrospectionBase **)1);
      uint64_t v13 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v11 + 32))(v11, 72, 8);
      *(_DWORD *)uint64_t v13 = 1;
      *(void *)(v13 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "m_localBoundsMax";
      *(void *)(v13 + 16) = v12;
      *(void *)(v13 + 24) = 0;
      *(void *)(v13 + 32) = 0x3000000002;
      *(_DWORD *)(v13 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v13 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      *(void *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_26AF86880 = v13;
      uint64_t v14 = re::introspectionAllocator((re *)v13);
      unint64_t v16 = re::introspect_BOOL((re *)1, v15);
      uint64_t v17 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v14 + 32))(v14, 72, 8);
      *(_DWORD *)uint64_t v17 = 1;
      *(void *)(v17 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "m_clipChildren";
      *(void *)(v17 + 16) = v16;
      *(void *)(v17 + 24) = 0;
      *(void *)(v17 + 32) = 0x6400000005;
      *(_DWORD *)(v17 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v17 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      *(void *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_26AF86888 = v17;
      uint64_t v18 = re::introspectionAllocator((re *)v17);
      unint64_t v20 = re::introspect_BOOL((re *)1, v19);
      uint64_t v21 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v18 + 32))(v18, 72, 8);
      *(_DWORD *)uint64_t v21 = 1;
      *(void *)(v21 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "m_clipSelf";
      *(void *)(v21 + 16) = v20;
      *(void *)(v21 + 24) = 0;
      *(void *)(v21 + 32) = 0x6500000008;
      *(_DWORD *)(v21 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v21 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      *(void *)(v21 + 56) = 0;
      *(_DWORD *)(v21 + 64) = 0;
      qword_26AF86890 = v21;
      long long v22 = re::introspectionAllocator((re *)v21);
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF86868, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26AF86868))
      {
        re::IntrospectionCStyleArray::IntrospectionCStyleArray((re::IntrospectionCStyleArray *)&unk_26AF868A8);
        __cxa_guard_release(&qword_26AF86868);
      }
      if ((_MergedGlobals_212 & 1) == 0)
      {
        _MergedGlobals_212 = 1;
        uint64_t v23 = (const re::IntrospectionBase *)re::introspect_Vector3F((re::IntrospectionBase **)1);
        re::IntrospectionCStyleArray::IntrospectionCStyleArray((re::IntrospectionCStyleArray *)&unk_26AF868A8, v23, 2);
        re::IntrospectionRegistry::add(v24, v25);
        re::getPrettyTypeName((re *)&unk_26AF868A8, (const re::IntrospectionBase *)&v35);
        if (BYTE8(v35)) {
          uint64_t v26 = v36;
        }
        else {
          uint64_t v26 = (char *)&v35 + 9;
        }
        if (void)v35 && (BYTE8(v35)) {
          (*(void (**)(void))(*(void *)v35 + 40))();
        }
        long long v35 = *((_OWORD *)v23 + 2);
        xmmword_26AF868C8 = v34;
        re::StringID::destroyString((re::StringID *)v37);
      }
      uint64_t v27 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v22 + 32))(v22, 72, 8);
      *(_DWORD *)uint64_t v27 = 1;
      *(void *)(v27 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "m_featherIntervalFractionPerEdge";
      *(void *)(v27 + 16) = &unk_26AF868A8;
      *(void *)(v27 + 24) = 0;
      *(void *)(v27 + 32) = 0x4000000009;
      *(_DWORD *)(v27 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v27 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      *(void *)(v27 + 56) = 0;
      *(_DWORD *)(v27 + 64) = 0;
      qword_26AF86898 = v27;
      unint64_t v28 = re::introspectionAllocator((re *)v27);
      uint64_t v30 = re::introspect_float((re *)1, v29);
      uint64_t v31 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v28 + 32))(v28, 72, 8);
      *(_DWORD *)uint64_t v31 = 1;
      *(void *)(v31 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = "m_featherFalloffBehavior";
      *(void *)(v31 + 16) = v30;
      *(void *)(v31 + 24) = 0;
      *(void *)(v31 + 32) = 0x600000000ALL;
      *(_DWORD *)(v31 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v31 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
      *(void *)(v31 + 56) = 0;
      *(_DWORD *)(v31 + 64) = 0;
      qword_26AF868A0 = v31;
      __cxa_guard_release(&qword_26AF86858);
    }
  }
  *((void *)this + 2) = 0x7000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 7;
  *((void *)this + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = &qword_26AF86870;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::ClippingPrimitiveComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 1ArcSharedObject::ArcSharedObject(this, 0) = re::internal::defaultDestruct<re::ecs2::ClippingPrimitiveComponent>;
  *((void *)this + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::ClippingPrimitiveComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::ClippingPrimitiveComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v32 = v33;
}

double re::internal::defaultConstruct<re::ecs2::ClippingPrimitiveComponent>(int a1, int a2, ArcSharedObject *this)
{
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)(v3 + 16) = 0;
  *(unsigned char *)(v3 + 24) = 0;
  *(void *)uint64_t v3 = &unk_26E6E9238;
  *(void *)(v3 + 32) = 0xBF000000BF000000;
  *(void *)(v3 + 4ArcSharedObject::ArcSharedObject(this, 0) = 3204448256;
  *(void *)(v3 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0x3F0000003F000000;
  *(void *)(v3 + 56) = 1056964608;
  double result = 0.0;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 8ArcSharedObject::ArcSharedObject(this, 0) = 0u;
  *(void *)(v3 + 93) = 0;
  *(unsigned char *)(v3 + 101) = 1;
  return result;
}

void *re::internal::defaultDestruct<re::ecs2::ClippingPrimitiveComponent>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

double re::internal::defaultConstructV2<re::ecs2::ClippingPrimitiveComponent>(ArcSharedObject *a1)
{
  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 6) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *(_OWORD *)a1 = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(void *)(v1 + 16) = 0;
  *(unsigned char *)(v1 + 24) = 0;
  *(void *)uint64_t v1 = &unk_26E6E9238;
  *(void *)(v1 + 32) = 0xBF000000BF000000;
  *(void *)(v1 + 4ArcSharedObject::ArcSharedObject(this, 0) = 3204448256;
  *(void *)(v1 + 4re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0x3F0000003F000000;
  *(void *)(v1 + 56) = 1056964608;
  double result = 0.0;
  *(_OWORD *)(v1 + 64) = 0u;
  *(_OWORD *)(v1 + 8ArcSharedObject::ArcSharedObject(this, 0) = 0u;
  *(void *)(v1 + 93) = 0;
  *(unsigned char *)(v1 + 101) = 1;
  return result;
}

void *re::internal::defaultDestructV2<re::ecs2::ClippingPrimitiveComponent>(void *a1)
{
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_ClippingPrimitiveComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ClippingPrimitiveComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_ClippingPrimitiveComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_ClippingPrimitiveComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::ClippingPrimitiveComponent>, this);
}

id *re::ecs2::MeshSmoothComponent::resetDeformerInputs(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  v15[5] = *MEMORY[0x263EF8340];
  unint64_t v8 = (id *)(a1 + 136);
  if (a2) {
    uint64_t v9 = (void *)(a2 + 8);
  }
  else {
    uint64_t v9 = 0;
  }
  inited = (re *)objc_initWeak(&location, v9);
  memset(v15, 0, 24);
  void v15[3] = re::globalAllocators(inited)[2];
  v15[4] = 0;
  re::FramePersistentPtr<re::ecs2::MeshSmoothComponent::SmoothDeformerInputs,re::FrameManager>::reset(v8, &location, a3, (uint64_t)v15);
  re::FunctionBase<24ul,void ()(void *)>::destroyCallable((uint64_t)v15);
  objc_destroyWeak(&location);
  if (a5)
  {
    uint64_t v11 = 168 * a5;
    uint64_t v12 = (void *)(a4 + 112);
    do
    {
      ++*((unsigned char *)v12 - 101);
      *uint64_t v12 = 0;
      v12 += 21;
      v11 -= 168;
    }
    while (v11);
  }
  return v8;
}

BOOL re::ecs2::MeshSmoothComponentStateImpl::processDirtyComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8 = *(void **)(a1 + 8);
  uint64_t v9 = v8[16];
  uint64_t v34 = v8[15];
  uint64_t v35 = v8[14];
  if (v9) {
    uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 104))(v9);
  }
  else {
    uint64_t v10 = 0;
  }
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v38, a5, 0);
  unint64_t v11 = v38;
  unint64_t v12 = v39;
  unint64_t v38 = a4;
  unint64_t v39 = v11;
  unint64_t v40 = v12;
  uint64_t v13 = (unsigned __int16)v12;
  uint64_t v14 = v12 & 0xFFFF0000;
  if (v11 != a5 || v13 != 0xFFFF || v14 != 4294901760)
  {
    do
    {
      uint64_t v17 = (uint64_t *)re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v39);
      uint64_t v18 = *v17;
      uint64_t v19 = *(void *)(*v17 + 16);
      uint64_t v20 = *(void *)(v19 + 184);
      uint64_t v21 = (unint64_t *)(a3 + 32);
      if (v20)
      {
        long long v22 = *(void **)(v18 + 144);
        if (v22)
        {
          BOOL v23 = *(void *)(v20 + 248) != *v22 || v10 == 0;
          if (!v23 && v22[1] == v10) {
            goto LABEL_25;
          }
          uint64_t v17 = (uint64_t *)re::ecs2::MeshSmoothComponent::resetDeformerInputs(*v17, *(void *)(v35 + 136), 0, *(void *)(*(void *)(v20 + 392) + 96), *(void *)(*(void *)(v20 + 392) + 88));
        }
        uint64_t v24 = *(void *)(v19 + 176);
        uint64_t v21 = (unint64_t *)(a3 + 32);
        if (v24)
        {
          uint64_t v21 = (unint64_t *)(a3 + 32);
          if (*(void *)(v24 + 40))
          {
            uint64_t v21 = (unint64_t *)(a3 + 40);
            if (!*(void *)(v18 + 120))
            {
              uint64_t v25 = re::globalAllocators((re *)v17);
              uint64_t v26 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v25[2] + 32))(v25[2], 40, 8);
              *(_OWORD *)uint64_t v26 = 0u;
              *(_OWORD *)(v26 + 16) = 0u;
              *(void *)(v26 + 32) = 0;
              re::DynamicArray<re::MeshIdentifierAsset>::setCapacity((void *)v26, 0);
              ++*(_DWORD *)(v26 + 24);
              uint64_t v21 = (unint64_t *)(a3 + 40);
              if (v34)
              {
                re::BasicAsset<re::AssignedMeshDeformation,&re::kAssignedMeshDeformationAssetName,&re::kAssignedMeshDeformationAssetExtension>::assetType();
                (*(void (**)(long long *__return_ptr))(*(void *)v34 + 416))(&v36);
                long long v27 = *(_OWORD *)(v18 + 112);
                *(_OWORD *)(v18 + 112) = v36;
                long long v36 = v27;
                uint64_t v28 = *(void *)(v18 + 128);
                *(void *)(v18 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 28) = v37;
                uint64_t v37 = v28;
                re::AssetHandle::~AssetHandle((re::AssetHandle *)&v36);
                uint64_t v21 = (unint64_t *)(a3 + 40);
              }
            }
          }
        }
      }
      unint64_t v29 = v38;
      unint64_t v30 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v39);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v29, v30, *v21);
LABEL_25:
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v39);
    }
    while (v39 != a5 || (unsigned __int16)v40 != 0xFFFF || WORD1(v40) != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

unint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>::setComponentState(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t result = re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), a2, a3, *(void *)(a1 + 24));
  if (result != a2 || v7 != a3 || ((v7 ^ a3) & 0xFFFFFF00000000) != 0)
  {
    uint64_t v10 = *(uint64_t (**)(void))(**(void **)(*(void *)a1 + 224) + 16);
    return v10();
  }
  return result;
}

BOOL re::ecs2::MeshSmoothComponentStateImpl::processPreparingComponents(uint64_t a1, uint64_t a2, void *a3, unint64_t a4, uint64_t a5)
{
  uint64_t v95 = *MEMORY[0x263EF8340];
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v65 = *(void *)(v7 + 112);
  uint64_t v8 = *(void *)(v7 + 128);
  if (v8) {
    uint64_t v64 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 104))(v8);
  }
  else {
    uint64_t v64 = 0;
  }
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v90, a5, 0);
  unint64_t v74 = a4;
  long long v75 = v90;
  if ((void)v90 == a5 && WORD4(v90) == 0xFFFFLL && (DWORD2(v90) & 0xFFFF0000) == 4294901760) {
    return *(_DWORD *)(a5 + 40) != 0;
  }
  uint64_t v68 = a5;
  do
  {
    uint64_t v11 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v75);
    uint64_t v12 = *(void *)v11;
    uint64_t v13 = *(void *)(*(void *)v11 + 16);
    uint64_t v14 = *(void **)(v13 + 176);
    uint64_t v15 = (re::AssetHandle *)(v14 + 4);
    uint64_t v16 = re::AssetHandle::loadedAsset<re::MeshAsset>((re::MeshAsset *)(v14 + 4));
    if (!v16)
    {
      uint64_t v22 = v14[5];
      if (v22) {
        goto LABEL_19;
      }
      goto LABEL_21;
    }
    uint64_t v17 = v16;
    uint64_t v15 = (re::AssetHandle *)(v12 + 112);
    uint64_t v18 = (re *)re::AssetHandle::loadedAsset<re::BasicAsset<re::AssignedMeshDeformation,&re::kAssignedMeshDeformationAssetName,&re::kAssignedMeshDeformationAssetExtension>>((re::AssetHandle *)(v12 + 112));
    if (!v18)
    {
      uint64_t v22 = *(void *)(v12 + 120);
      if (v22)
      {
LABEL_19:
        unsigned int v23 = atomic_load((unsigned int *)(v22 + 704));
        if (v23 == 3)
        {
          unint64_t v24 = v74;
          unint64_t v25 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v75);
          uint64_t v26 = (re::ecs2::ComponentBucketsBase *)a3[2];
          unint64_t v27 = a3[4];
          goto LABEL_64;
        }
      }
LABEL_21:
      re::AssetHandle::loadAsync(v15);
      goto LABEL_65;
    }
    uint64_t v19 = v18;
    unint64_t v20 = v14[5];
    if (v20) {
      uint64_t v21 = *(void *)(v20 + 664);
    }
    else {
      uint64_t v21 = 0;
    }
    unint64_t v28 = *(void *)(v12 + 120);
    uint64_t v70 = (re::ecs2::MeshComponent *)v14;
    if (v28) {
      uint64_t v29 = *(void *)(v28 + 664);
    }
    else {
      uint64_t v29 = 0;
    }
    uint64_t v72 = (re::DeformedMeshAssetsMap *)(v12 + 272);
    unint64_t v30 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * (v20 ^ (v20 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v20 ^ (v20 >> 30))) >> 27));
    unint64_t v31 = v21 ^ (v30 >> 31) ^ v30;
    unint64_t v32 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * (v28 ^ (v28 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v28 ^ (v28 >> 30))) >> 27));
    uint64_t v33 = ((v31 << 6) + (v31 >> 2) + (v29 ^ (v32 >> 31) ^ v32) - 0x61C8864680B583E9) ^ v31;
    if (*(void *)(v12 + 280) == v33) {
      goto LABEL_45;
    }
    uint64_t v66 = v33;
    uint64_t v67 = v13;
    *(void *)(v12 + 28ArcSharedObject::ArcSharedObject(this, 0) = -1;
    re::FixedArray<CoreIKTransform>::deinit((uint64_t *)(v12 + 288));
    uint64_t v34 = (_anonymous_namespace_ *)re::FixedArray<CoreIKTransform>::deinit((uint64_t *)(v12 + 312));
    *(void *)(v12 + 20re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
    ++*(_DWORD *)(v12 + 216);
    *(void *)(v12 + 24re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = 0;
    ++*(_DWORD *)(v12 + 256);
    uint64_t v35 = *(uint64_t **)(v12 + 272);
    if (!v35)
    {
      *(void *)(v12 + 28ArcSharedObject::ArcSharedObject(this, 0) = -1;
    }
    re::FixedArray<int>::init<>((uint64_t *)(v12 + 312), (uint64_t)v35, *(unsigned int *)(v17 + 664));
    if (*(_DWORD *)(v17 + 664))
    {
      int v36 = 0;
      unint64_t v37 = 0;
      while (1)
      {
        unint64_t v38 = *(void *)(v12 + 320);
        if (v38 <= v37) {
          break;
        }
        *(_DWORD *)(*(void *)(v12 + 328) + 4 * v37) = v36;
        v36 += re::MeshNameMap::meshPartInstanceCount((re::MeshNameMap *)(v17 + 448), v37++);
        if (v37 >= *(unsigned int *)(v17 + 664)) {
          goto LABEL_33;
        }
      }
LABEL_74:
      *(void *)float v85 = 0;
      long long v93 = 0u;
      long long v94 = 0u;
      long long v91 = 0u;
      long long v92 = 0u;
      long long v90 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)uint64_t v77 = 136315906;
      *(void *)&v77[4] = "operator[]";
      __int16 v78 = 1024;
      int v79 = 468;
      __int16 v80 = 2048;
      unint64_t v81 = v37;
      __int16 v82 = 2048;
      unint64_t v83 = v38;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
LABEL_33:
    uint64_t v39 = *(void *)(v17 + 784);
    if (v39) {
      unint64_t v40 = *(unsigned int *)(*(void *)(v17 + 792) + 4 * v39 - 4);
    }
    else {
      unint64_t v40 = 0;
    }
    uint64_t v41 = *(void *)v72;
    LODWORD(v9ArcSharedObject::ArcSharedObject(this, 0) = -1;
    uint64_t v18 = (re *)re::FixedArray<unsigned int>::init<int>((void *)(v12 + 288), v41, v40, &v90);
    if (!*((void *)v19 + 2)) {
      goto LABEL_44;
    }
    unint64_t v37 = 0;
    unint64_t v38 = 0;
    unint64_t v71 = v19;
    do
    {
      re::MeshNameMap::meshInstancePartsForIdentifier(v17 + 448, (unsigned __int8 *)(*((void *)v19 + 4) + 40 * v38), v77);
      if (!*(void *)v77) {
        goto LABEL_43;
      }
      unint64_t v42 = 0;
      do
      {
        *(void *)&long long v90 = v42;
        (*(void (**)(uint64_t, long long *))(*(void *)v84 + 16))(v84, &v90);
        *(void *)&long long v90 = v42;
        (*(void (**)(uint64_t, long long *))(*(void *)v84 + 16))(v84, &v90);
        LODWORD(v9ArcSharedObject::ArcSharedObject(this, 0) = 10;
        re::DynamicArray<int>::add((void *)(v12 + 192), &v90);
        LODWORD(v9ArcSharedObject::ArcSharedObject(this, 0) = 1056964608;
        float v43 = re::DynamicArray<float>::add((_anonymous_namespace_ *)(v12 + 232), (float *)&v90);
        *(void *)&long long v90 = v42;
        unsigned int v44 = (*(uint64_t (**)(uint64_t, long long *, float))(*(void *)v84 + 16))(v84, &v90, v43);
        int started = re::MeshNameMap::meshPartStartIndexForInstance((re::MeshNameMap *)(v17 + 448), v44);
        *(void *)&long long v90 = v42;
        unint64_t v46 = started
            + (unsigned __int16)((unint64_t)(*(uint64_t (**)(uint64_t, long long *))(*(void *)v84 + 16))(v84, &v90) >> 32);
        unint64_t v47 = *(void *)(v12 + 296);
        if (v47 <= v46)
        {
          v73[0] = 0;
          long long v93 = 0u;
          long long v94 = 0u;
          long long v91 = 0u;
          long long v92 = 0u;
          long long v90 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)float v85 = 136315906;
          *(void *)&v85[4] = "operator[]";
          *(_WORD *)&v85[12] = 1024;
          *(_DWORD *)&v85[14] = 468;
          __int16 v86 = 2048;
          unint64_t v87 = v46;
          __int16 v88 = 2048;
          unint64_t v89 = v47;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_70:
          uint64_t v76 = 0;
          long long v93 = 0u;
          long long v94 = 0u;
          long long v91 = 0u;
          long long v92 = 0u;
          long long v90 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)uint64_t v77 = 136315906;
          *(void *)&v77[4] = "operator[]";
          __int16 v78 = 1024;
          int v79 = 789;
          __int16 v80 = 2048;
          unint64_t v81 = v38;
          __int16 v82 = 2048;
          unint64_t v83 = v47;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_71:
          uint64_t v76 = 0;
          long long v93 = 0u;
          long long v94 = 0u;
          long long v91 = 0u;
          long long v92 = 0u;
          long long v90 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)uint64_t v77 = 136315906;
          *(void *)&v77[4] = "operator[]";
          __int16 v78 = 1024;
          int v79 = 789;
          __int16 v80 = 2048;
          unint64_t v81 = v38;
          __int16 v82 = 2048;
          unint64_t v83 = v37;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_72:
          uint64_t v76 = 0;
          long long v93 = 0u;
          long long v94 = 0u;
          long long v91 = 0u;
          long long v92 = 0u;
          long long v90 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)uint64_t v77 = 136315906;
          *(void *)&v77[4] = "operator[]";
          __int16 v78 = 1024;
          int v79 = 468;
          __int16 v80 = 2048;
          unint64_t v81 = v37;
          __int16 v82 = 2048;
          unint64_t v83 = v47;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_73:
          re::internal::assertLog((re::internal *)6, v58, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v37, v42);
          _os_crash();
          __break(1u);
          goto LABEL_74;
        }
        *(_DWORD *)(*(void *)(v12 + 304) + 4 * v46) = v37 + v42++;
      }
      while (v42 != *(void *)v77);
      unint64_t v37 = (v37 + v42);
      uint64_t v19 = v71;
LABEL_43:
      uint64_t v18 = (re *)re::FunctionBase<24ul,re::MeshInstanceAndPartIndex ()(unsigned long)>::destroyCallable((uint64_t)&v77[8]);
      ++v38;
    }
    while (v38 < *((void *)v19 + 2));
LABEL_44:
    uint64_t v13 = v67;
    *(void *)(v12 + 28ArcSharedObject::ArcSharedObject(this, 0) = v66;
    a5 = v68;
LABEL_45:
    float v48 = *(re::ecs2::MeshDeformationComponent **)(v13 + 184);
    if (*((void *)v48 + 30))
    {
      long long v49 = *(void **)(v12 + 144);
      if (!v49 || *((void *)v48 + 31) != *v49)
      {
        uint64_t v50 = *((void *)v48 + 49);
        unint64_t v42 = *(void *)(v50 + 88);
        uint64_t v51 = *(void *)(v50 + 96);
        uint64_t v52 = re::globalAllocators(v18);
        uint64_t v53 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v52[2] + 32))(v52[2], 40, 8);
        *uint64_t v53 = *((void *)v48 + 31);
        v53[1] = v64;
        void v53[3] = 0;
        void v53[4] = 0;
        v53[2] = 0;
        uint64_t v54 = re::ecs2::MeshSmoothComponent::resetDeformerInputs(v12, *(void *)(v65 + 136), v53, v51, v42);
        if (*(void *)(v12 + 48) && *(void *)(v12 + 88))
        {
          re::DynamicArray<float>::operator=(v12 + 192, (uint64_t *)(v12 + 32));
          re::DynamicArray<float>::operator=(v12 + 232, (uint64_t *)(v12 + 72));
        }
        v73[0] = (char *)v48 + 232;
        v73[1] = 11;
        *(void *)float v85 = (char *)v48 + 232;
        *(void *)&v85[8] = 11;
        *(_WORD *)&v85[16] = 0;
        while (1)
        {
          re::MeshDeformationRuntimeData::MeshDeformationIteration::end((unsigned int *)v73, (uint64_t)&v90);
          if (*(_DWORD *)&v85[12] == HIDWORD(v90) && *(unsigned __int16 *)&v85[16] == (unsigned __int16)v91) {
            break;
          }
          unint64_t v55 = re::MeshDeformationRuntimeData::MeshDeformationIterator::originalMeshInstanceAndPartIndex((re::MeshDeformationRuntimeData::MeshDeformationIterator *)v85);
          uint64_t v56 = re::DeformedMeshAssetsMap::deformedIndex(v72, v55, WORD2(v55));
          if (v56 != -1)
          {
            unint64_t v37 = v56;
            unsigned int v57 = re::MeshDeformationRuntimeData::MeshDeformationIterator::absoluteDeformedMeshPartIndex((re::MeshDeformationRuntimeData::MeshDeformationIterator *)v85);
            unint64_t v38 = v37;
            unint64_t v47 = *(void *)(v12 + 208);
            if (v47 <= v37) {
              goto LABEL_70;
            }
            unint64_t v37 = *(void *)(v12 + 248);
            if (v37 <= v38) {
              goto LABEL_71;
            }
            unint64_t v37 = v57;
            uint64_t v59 = v54[1];
            unint64_t v47 = v59[3];
            if (v47 <= v57) {
              goto LABEL_72;
            }
            int v60 = *(_DWORD *)(*(void *)(v12 + 264) + 4 * v38);
            uint64_t v61 = (_DWORD *)(v59[4] + 8 * v57);
            *uint64_t v61 = *(_DWORD *)(*(void *)(v12 + 224) + 4 * v38);
            v61[1] = v60;
            if (v42 <= v57) {
              goto LABEL_73;
            }
            uint64_t v62 = v51 + 168 * v57;
            ++*(unsigned char *)(v62 + 11);
            *(void *)(v62 + 112) = v61;
          }
          re::MeshDeformationRuntimeData::MeshDeformationIterator::operator++((uint64_t)v85);
        }
        a5 = v68;
      }
      if (re::ecs2::MeshDeformationComponent::areRequiredAssetsLoaded(v48, v70))
      {
        unint64_t v24 = v74;
        unint64_t v25 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v75);
        uint64_t v26 = (re::ecs2::ComponentBucketsBase *)a3[2];
        unint64_t v27 = a3[6];
LABEL_64:
        re::ecs2::ComponentBucketsBase::moveComponent(v26, v24, v25, v27);
      }
    }
LABEL_65:
    re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v75);
  }
  while ((void)v75 != a5 || WORD4(v75) != 0xFFFF || WORD5(v75) != 0xFFFF);
  return *(_DWORD *)(a5 + 40) != 0;
}

uint64_t re::AssetHandle::loadedAsset<re::BasicAsset<re::AssignedMeshDeformation,&re::kAssignedMeshDeformationAssetName,&re::kAssignedMeshDeformationAssetExtension>>(re::AssetHandle *a1)
{
  if (!*((void *)a1 + 1)) {
    return 0;
  }
  uint64_t v2 = re::BasicAsset<re::AssignedMeshDeformation,&re::kAssignedMeshDeformationAssetName,&re::kAssignedMeshDeformationAssetExtension>::assetType();
  return re::AssetHandle::assetWithType(a1, (const re::AssetType *)v2, 1);
}

unsigned int *re::MeshDeformationRuntimeData::MeshDeformationIteration::end@<X0>(unsigned int *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)this;
  unint64_t v3 = this[2];
  if (*(void *)(*(void *)this + 136) <= v3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v4 = *(void *)(*(void *)(v2 + 144) + 96 * v3 + 8);
  *(void *)a2 = v2;
  *(_DWORD *)(a2 + re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData((uint64_t)this + 8) = v3;
  *(_DWORD *)(a2 + 12) = v4;
  *(_WORD *)(a2 + 16) = 0;
  return this;
}

unint64_t re::MeshDeformationRuntimeData::MeshDeformationIterator::originalMeshInstanceAndPartIndex(re::MeshDeformationRuntimeData::MeshDeformationIterator *this)
{
  unint64_t v1 = *((unsigned int *)this + 2);
  if (*(void *)(*(void *)this + 136) <= v1)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_8;
  }
  uint64_t v2 = *(void *)(*(void *)this + 144);
  uint64_t v3 = v2 + 96 * v1;
  unint64_t v4 = *((unsigned int *)this + 3);
  if (*(void *)(v3 + 8) <= v4)
  {
LABEL_8:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_9;
  }
  if (*(void *)(v2 + 96 * v1 + 32) <= v4)
  {
LABEL_9:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v5 = v2 + 96 * v1;
  unint64_t v6 = *(_DWORD *)(*(void *)(v5 + 40) + 4 * v4) + *((unsigned __int16 *)this + 8);
  if (*(void *)(v5 + 56) <= v6)
  {
LABEL_10:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_11:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(void *)(v2 + 96 * v1 + 80) <= v6) {
    goto LABEL_11;
  }
  return *(unsigned __int16 *)(*(void *)(v3 + 16) + 2 * v4) | ((unint64_t)*(unsigned __int16 *)(*(void *)(v2 + 96 * v1 + 64) + 2 * v6) << 32) | ((unint64_t)*(unsigned __int8 *)(*(void *)(v2 + 96 * v1 + 88) + v6) << 48);
}

uint64_t re::MeshDeformationRuntimeData::MeshDeformationIterator::absoluteDeformedMeshPartIndex(re::MeshDeformationRuntimeData::MeshDeformationIterator *this)
{
  unint64_t v2 = re::MeshDeformationRuntimeData::MeshDeformationIterator::originalMeshInstanceAndPartIndex(this);
  uint64_t v3 = *(void **)this;
  if (*(void *)(*(void *)this + 64) <= (unint64_t)v2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_5:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  unint64_t v4 = *(_DWORD *)(v3[9] + 4 * v2) + WORD2(v2);
  if (v3[14] <= v4) {
    goto LABEL_5;
  }
  return *(unsigned int *)(v3[15] + 4 * v4);
}

uint64_t re::MeshDeformationRuntimeData::MeshDeformationIterator::operator++(uint64_t result)
{
  unint64_t v1 = *(unsigned int *)(result + 8);
  if (*(void *)(*(void *)result + 136) <= v1)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_8;
  }
  uint64_t v2 = *(void *)(*(void *)result + 144);
  unsigned __int16 v3 = *(_WORD *)(result + 16) + 1;
  *(_WORD *)(result + 16) = v3;
  unint64_t v4 = *(unsigned int *)(result + 12);
  unint64_t v5 = (v4 + 1);
  unint64_t v6 = *(void *)(v2 + 96 * v1 + 32);
  if (v6 <= v5)
  {
LABEL_8:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_9:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (v6 <= v4) {
    goto LABEL_9;
  }
  uint64_t v7 = *(void *)(v2 + 96 * v1 + 40);
  if ((unsigned __int16)(*(_DWORD *)(v7 + 4 * v5) - *(_DWORD *)(v7 + 4 * v4)) <= v3)
  {
    *(_DWORD *)(result + 12) = v5;
    *(_WORD *)(result + 16) = 0;
  }
  return result;
}