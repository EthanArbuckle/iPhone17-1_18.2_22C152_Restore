uint64_t re::DynamicArray<re::DynamicArray<unsigned int>>::add(_anonymous_namespace_ *this, uint64_t *a2)
{
  unint64_t v4;
  uint64_t result;

  v4 = *((void *)this + 2);
  if (v4 >= *((void *)this + 1))
  {
    re::DynamicArray<re::SkeletalAnimationQueryEntry>::growCapacity(this, v4 + 1);
    v4 = *((void *)this + 2);
  }
  result = re::DynamicArray<float>::DynamicArray(*((void *)this + 4) + 40 * v4, a2);
  ++*((void *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

void re::RenderGraphNodeCombineProcessor::~RenderGraphNodeCombineProcessor(re::RenderGraphNodeCombineProcessor *this)
{
}

{
  uint64_t vars8;

  re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::HashTable<unsigned long,re::RenderGraphResourceOperation const*,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::addOrReplace(uint64_t result, uint64_t *a2, void *a3)
{
  uint64_t v5 = result;
  uint64_t v6 = *a2;
  unint64_t v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  unint64_t v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (!*(void *)result)
  {
    LODWORD(v9) = 0;
    goto LABEL_8;
  }
  unint64_t v9 = v8 % *(unsigned int *)(result + 24);
  uint64_t v10 = *(unsigned int *)(*(void *)(result + 8) + 4 * v9);
  if (v10 == 0x7FFFFFFF)
  {
LABEL_8:
    result = re::HashTable<unsigned long,re::RenderGraphResourceOperation const*,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::addAsMove(result, v9, v8, a2, a3);
    goto LABEL_9;
  }
  uint64_t v11 = *(void *)(result + 16);
  while (*(void *)(v11 + 32 * v10 + 16) != v6)
  {
    uint64_t v10 = *(_DWORD *)(v11 + 32 * v10 + 8) & 0x7FFFFFFF;
    if (v10 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  *(void *)(v11 + 32 * v10 + 24) = *a3;
LABEL_9:
  ++*(_DWORD *)(v5 + 40);
  return result;
}

BOOL re::HashTable<unsigned long,re::RenderGraphResourceOperation const*,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::containsKey(uint64_t a1, unint64_t a2)
{
  if (!*(void *)a1) {
    return 0;
  }
  unint64_t v2 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
  uint64_t v3 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * ((v2 ^ (v2 >> 31)) % *(unsigned int *)(a1 + 24)));
  if (v3 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 16);
  if (*(void *)(v5 + 32 * v3 + 16) == a2) {
    return 1;
  }
  do
  {
    uint64_t v3 = *(_DWORD *)(v5 + 32 * v3 + 8) & 0x7FFFFFFF;
    BOOL result = v3 != 0x7FFFFFFF;
  }
  while (v3 != 0x7FFFFFFF && *(void *)(v5 + 32 * v3 + 16) != a2);
  return result;
}

uint64_t re::HashTable<unsigned long,re::RenderGraphResourceOperation const*,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, void *a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      int v11 = *(_DWORD *)(a1 + 28);
      signed int v12 = 2 * v11;
      uint64_t v13 = *(void *)a1;
      if (*(void *)a1)
      {
        if (v12) {
          BOOL v14 = v9 == v12;
        }
        else {
          BOOL v14 = 1;
        }
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v26, 0, 36);
          *(void *)&v26[36] = 0x7FFFFFFFLL;
          re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v26, v13, v12);
          long long v15 = *(_OWORD *)v26;
          *(_OWORD *)v26 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          uint64_t v16 = *(void *)&v26[16];
          uint64_t v17 = *(void *)(a1 + 16);
          *(void *)&v26[16] = v17;
          *(void *)(a1 + 16) = v16;
          long long v19 = *(_OWORD *)&v26[24];
          *(_OWORD *)&v26[24] = *(_OWORD *)(a1 + 24);
          unsigned int v18 = *(_DWORD *)&v26[32];
          *(_OWORD *)(a1 + 24) = v19;
          uint64_t v20 = v18;
          if (v18)
          {
            uint64_t v21 = v17 + 16;
            do
            {
              if ((*(_DWORD *)(v21 - 8) & 0x80000000) != 0) {
                re::HashTable<unsigned long,re::RenderGraphResourceOperation const*,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::addAsMove(a1, *(void *)(v21 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(v21 - 16), v21, v21 + 8);
              }
              v21 += 32;
              --v20;
            }
            while (v20);
          }
          re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)v26);
        }
      }
      else
      {
        if (v12) {
          signed int v24 = 2 * v11;
        }
        else {
          signed int v24 = 3;
        }
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = v10 + 1;
    uint64_t v22 = *(void *)(a1 + 16);
    int v23 = *(_DWORD *)(v22 + 32 * v9 + 8);
  }
  else
  {
    uint64_t v22 = *(void *)(a1 + 16);
    int v23 = *(_DWORD *)(v22 + 32 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v23 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v22 + 32 * v9 + 8) = v23 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + 32 * v9 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 32 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 32 * v9) = a3;
  *(void *)(*(void *)(a1 + 16) + 32 * v9 + 16) = *a4;
  *(void *)(*(void *)(a1 + 16) + 32 * v9 + 24) = *a5;
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void DeviceHeap::~DeviceHeap(id *this)
{
  *this = &unk_26E70F818;
  re::DynamicArray<NS::SharedPtr<MTL::SamplerState>>::deinit((uint64_t)(this + 12));
  re::DynamicArray<NS::SharedPtr<MTL::SamplerState>>::deinit((uint64_t)(this + 7));
  re::DynamicString::deinit((re::DynamicString *)(this + 3));
}

{
  uint64_t vars8;

  DeviceHeap::~DeviceHeap(this);
  JUMPOUT(0x237DBCBD0);
}

uint64_t DeviceHeap::makeTexture(uint64_t a1, id *a2)
{
  re::mtl::Device::makeTexture(*a2, (id *)(a1 + 16), &v5);
  if (!v5) {
    return -1;
  }
  re::DynamicArray<NS::SharedPtr<NS::String>>::add((_anonymous_namespace_ *)(a1 + 56), &v5);
  uint64_t v3 = *(void *)(a1 + 72) - 1;
  if (v5) {

  }
  return v3;
}

void DeviceHeap::releaseTexture(DeviceHeap *this, unint64_t a2)
{
  if (*((void *)this + 9) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v3 = *((void *)this + 11);

  *(void *)(v3 + 8 * a2) = 0;
}

uint64_t DeviceHeap::makeBuffer(uint64_t a1, uint64_t a2, int a3)
{
  if (a3 == 0xFFFF) {
    int v4 = 0;
  }
  else {
    int v4 = a3;
  }
  id v5 = objc_msgSend(*(id *)(a1 + 16), sel_newBufferWithLength_options_, a2, v4);
  id v9 = v5;
  if (!v5) {
    return -1;
  }
  uint64_t v6 = v5;
  re::DynamicArray<NS::SharedPtr<MTL::Buffer>>::add(a1 + 96, &v9);
  uint64_t v7 = *(void *)(a1 + 112) - 1;

  return v7;
}

id re::DynamicArray<NS::SharedPtr<MTL::Buffer>>::add(uint64_t a1, id *a2)
{
  unint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = *(void *)(a1 + 16);
  if (v5 >= v4)
  {
    unint64_t v6 = v5 + 1;
    if (v4 < v6)
    {
      if (*(void *)a1)
      {
        uint64_t v7 = 2 * v4;
        BOOL v8 = v4 == 0;
        unint64_t v9 = 8;
        if (!v8) {
          unint64_t v9 = v7;
        }
        if (v9 <= v6) {
          unint64_t v10 = v6;
        }
        else {
          unint64_t v10 = v9;
        }
        re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::setCapacity((void *)a1, v10);
      }
      else
      {
        re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::setCapacity((void *)a1, v6);
        ++*(_DWORD *)(a1 + 24);
      }
    }
    unint64_t v5 = *(void *)(a1 + 16);
  }
  uint64_t v11 = *(void *)(a1 + 32);
  id result = *a2;
  *(void *)(v11 + 8 * v5) = result;
  ++*(void *)(a1 + 16);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

void DeviceHeap::releaseBuffer(DeviceHeap *this, unint64_t a2)
{
  if (*((void *)this + 14) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v3 = *((void *)this + 16);

  *(void *)(v3 + 8 * a2) = 0;
}

void DeviceHeap::onFrameFinish(DeviceHeap *this)
{
  re::DynamicArray<NS::SharedPtr<MTL::SamplerState>>::clear((uint64_t)this + 56);
  re::DynamicArray<NS::SharedPtr<MTL::SamplerState>>::clear((uint64_t)this + 96);
}

void MetalHeap::init(uint64_t a1, void *a2, id *a3, uint64_t a4)
{
  uint64_t v7 = (re::DynamicString *)(a1 + 32);
  v12[0] = a2;
  v12[1] = (id)strlen((const char *)a2);
  re::DynamicString::operator=(v7, (uint64_t)v12);
  id v8 = objc_msgSend(objc_msgSend(MEMORY[0x263F128F0], sel_alloc), sel_init);
  objc_msgSend(v8, sel_setStorageMode_, 2);
  objc_msgSend(v8, sel_setSize_, a4);
  v12[0] = objc_msgSend(*a3, sel_newHeapWithDescriptor_, v8);
  NS::SharedPtr<MTL::Texture>::operator=((void **)(a1 + 16), v12);
  if (v12[0]) {

  }
  unint64_t v9 = re::ObjCObject::operator=((id *)(a1 + 24), a3);
  *(_DWORD *)(a1 + 8) = 2;
  re::DynamicArray<re::RigNodeConstraint>::setCapacity((void *)(a1 + 64), 0);
  ++*(_DWORD *)(a1 + 88);
  *(_DWORD *)(a1 + 108) = 4096;
  unint64_t v10 = re::DataArray<MetalHeap::TextureEntry>::allocBlock((void *)(a1 + 64));
  uint64_t v11 = a1 + 128;
  re::DynamicArray<re::RigNodeConstraint>::setCapacity((void *)v11, 0);
  ++*(_DWORD *)(v11 + 24);
  *(_DWORD *)(v11 + 44) = 4096;
  re::DataArray<MetalHeap::TextureEntry>::allocBlock((void *)v11);
  if (v8) {
}
  }

void MetalHeap::~MetalHeap(id *this)
{
  *this = &unk_26E70F8A8;

  this[2] = 0;
  if (*((_DWORD *)this + 43))
  {
    double v2 = re::DataArray<MetalHeap::TextureEntry>::clear(this + 16);
    if (!this[18])
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_11;
    }
    uint64_t v3 = this[20];
    (*(void (**)(id, void, double))(*(void *)this[16] + 40))(this[16], *v3, v2);
    (*(void (**)(id, void))(*(void *)this[16] + 40))(this[16], v3[1]);
    re::DynamicArray<unsigned long>::deinit((uint64_t)(this + 16));
    *((_DWORD *)this + 43) = 0;
  }
  re::DynamicArray<unsigned long>::deinit((uint64_t)(this + 16));
  if (!*((_DWORD *)this + 27)) {
    goto LABEL_7;
  }
  double v4 = re::DataArray<MetalHeap::TextureEntry>::clear(this + 8);
  if (!this[10])
  {
LABEL_11:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  unint64_t v5 = this[12];
  (*(void (**)(id, void, double))(*(void *)this[8] + 40))(this[8], *v5, v4);
  (*(void (**)(id, void))(*(void *)this[8] + 40))(this[8], v5[1]);
  re::DynamicArray<unsigned long>::deinit((uint64_t)(this + 8));
  *((_DWORD *)this + 27) = 0;
LABEL_7:
  re::DynamicArray<unsigned long>::deinit((uint64_t)(this + 8));
  re::DynamicString::deinit((re::DynamicString *)(this + 4));

  id v6 = this[2];
  if (v6)
  {

    this[2] = 0;
  }
}

{
  uint64_t vars8;

  MetalHeap::~MetalHeap(this);
  JUMPOUT(0x237DBCBD0);
}

uint64_t MetalHeap::makeTexture(uint64_t a1, void *a2, char a3, uint64_t *a4)
{
  id v7 = objc_msgSend(*(id *)(a1 + 16), sel_newTextureWithDescriptor_, *a2);
  if (!v7) {
    return -1;
  }
  id v8 = v7;
  id v9 = objc_msgSend(*(id *)(a1 + 16), sel_maxAvailableSizeWithAlignment_, 16);
  if ((unint64_t)v9 < *(void *)(a1 + 192))
  {
    *(void *)(a1 + 192) = v9;
    *(void *)(a1 + 200) = objc_msgSend(*(id *)(a1 + 16), sel_usedSize);
  }
  id v10 = v8;
  id v12 = v10;
  if (v10) {

  }
  uint64_t v13 = *a4;
  int v14 = *(_DWORD *)(a1 + 120);
  if ((v14 + 1) >> 24) {
    int v15 = 1;
  }
  else {
    int v15 = v14 + 1;
  }
  *(_DWORD *)(a1 + 120) = v15;
  uint64_t v16 = *(unsigned __int16 *)(a1 + 116);
  unint64_t v17 = *(unsigned __int16 *)(a1 + 118);
  if (v16 != 0xFFFF || v17 != 0xFFFF)
  {
    if (*(void *)(a1 + 80) > v17)
    {
      uint64_t v22 = (void *)(*(void *)(a1 + 96) + 16 * v17);
      *(_DWORD *)(v22[1] + 4 * v16) = v15;
      uint64_t v20 = *v22 + 24 * v16;
      *(_DWORD *)(a1 + 116) = *(_DWORD *)v20;
      goto LABEL_19;
    }
LABEL_25:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(_DWORD *)(a1 + 112) >= *(_DWORD *)(a1 + 108)) {
    re::DataArray<MetalHeap::TextureEntry>::allocBlock((void *)(a1 + 64));
  }
  uint64_t v18 = *(void *)(a1 + 80);
  unint64_t v17 = (unsigned __int16)(v18 - 1);
  if (!v18)
  {
    uint64_t v24 = 0;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(v25) = 136315906;
    *(void *)((char *)&v25 + 4) = "operator[]";
    WORD6(v25) = 1024;
    HIWORD(v25) = 789;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v16 = *(unsigned int *)(a1 + 112);
  if (v16 >= 0x10000)
  {
LABEL_24:
    re::internal::assertLog((re::internal *)5, v11, "assertion failure: '%s' (%s:line %i) m_tailBlockLinearAllocationCount (%u) is too large for a 16-bit unsigned integer", "!overflow", "create", 601, v16, v24, v25);
    _os_crash();
    __break(1u);
    goto LABEL_25;
  }
  long long v19 = (void *)(*(void *)(a1 + 96) + 16 * v17);
  *(_DWORD *)(a1 + 112) = v16 + 1;
  *(_DWORD *)(v19[1] + 4 * v16) = *(_DWORD *)(a1 + 120);
  uint64_t v20 = *v19 + 24 * v16;
LABEL_19:
  ++*(_DWORD *)(a1 + 104);
  *(void *)uint64_t v20 = v12;
  *(unsigned char *)(v20 + 8) = a3;
  *(void *)(v20 + 16) = v13;
  unint64_t v21 = (v17 << 16) | ((unint64_t)(*(_DWORD *)(a1 + 120) & 0xFFFFFF) << 32) | v16;
  if (v12) {

  }
  return v21;
}

double MetalHeap::releaseTexture(MetalHeap *this, unint64_t a2)
{
  double v4 = (void *)((char *)this + 64);
  uint64_t v5 = re::DataArray<re::TextureAtlasTile>::get((uint64_t)this + 64, a2);
  if (!*(unsigned char *)(v5 + 8)) {
    objc_msgSend(*(id *)v5, sel_makeAliasable);
  }
  re::DataArray<MetalHeap::TextureEntry>::destroy((uint64_t)v4, a2);
  if (!*((_DWORD *)this + 26))
  {
    return re::DataArray<MetalHeap::TextureEntry>::clear(v4);
  }
  return result;
}

void re::DataArray<MetalHeap::TextureEntry>::destroy(uint64_t a1, unint64_t a2)
{
  int v2 = a2;
  unint64_t v4 = a2 >> 16;
  uint64_t v5 = re::DataArray<re::TextureAtlasTile>::tryGet(a1, a2 & 0xFFFFFFFF00000000 | ((unint64_t)WORD1(a2) << 16) | (unsigned __int16)a2);
  if (v5)
  {
    id v6 = (void *)v5;
    *(void *)(v5 + 16) = 0;
    id v7 = *(void **)v5;
    if (v7)
    {

      *id v6 = 0;
    }
    if (*(void *)(a1 + 16) <= (unint64_t)HIWORD(v2))
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 16 * HIWORD(v2) + 8) + 4 * (unsigned __int16)v2) = 0;
    *(_DWORD *)id v6 = *(_DWORD *)(a1 + 52);
    *(_WORD *)(a1 + 52) = v2;
    *(_WORD *)(a1 + 54) = v4;
    --*(_DWORD *)(a1 + 40);
  }
}

double re::DataArray<MetalHeap::TextureEntry>::clear(void *a1)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  uint64_t v11 = a1;
  if (*((_DWORD *)a1 + 10))
  {
    LODWORD(v12) = 0;
    if (!a1[2]) {
      goto LABEL_27;
    }
    uint64_t v3 = a1;
    if (!**(_DWORD **)(a1[4] + 8))
    {
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v11);
      uint64_t v3 = v11;
    }
  }
  else
  {
    LODWORD(v12) = -1;
    uint64_t v3 = a1;
  }
  uint64_t v11 = v3;
  uint64_t v4 = (unsigned __int16)v12;
  if (v3 != a1 || ((unsigned __int16)v12 == 0xFFFFLL ? (BOOL v5 = (v12 & 0xFFFF0000) == 4294901760) : (BOOL v5 = 0), !v5))
  {
    unint64_t v6 = WORD1(v12);
    do
    {
      unint64_t v7 = v3[2];
      if (v7 <= v6) {
        goto LABEL_26;
      }
      re::DataArray<MetalHeap::TextureEntry>::destroy((uint64_t)a1, ((unint64_t)(*(_DWORD *)(*(void *)(v3[4] + 16 * v6 + 8) + 4 * v4) & 0xFFFFFF) << 32) | (v6 << 16) | v4);
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v11);
      uint64_t v3 = v11;
      uint64_t v4 = (unsigned __int16)v12;
      unint64_t v6 = WORD1(v12);
    }
    while (v11 != a1 || (unsigned __int16)v12 != 0xFFFFLL || WORD1(v12) != 0xFFFFLL);
  }
  unint64_t v8 = a1[2];
  unint64_t v6 = v8 - 1;
  if (v8 != 1)
  {
    unint64_t v7 = 16 * v8 - 16;
    while (v8 > v6)
    {
      id v9 = (void *)(a1[4] + v7);
      (*(void (**)(void, void))(*(void *)*a1 + 40))(*a1, *v9);
      (*(void (**)(void, void))(*(void *)*a1 + 40))(*a1, v9[1]);
      unint64_t v1 = a1[2];
      if (v1 <= v6) {
        goto LABEL_25;
      }
      unint64_t v8 = v1 - 1;
      if (v1 - 1 > v6)
      {
        *(_OWORD *)(a1[4] + v7) = *(_OWORD *)(a1[4] + 16 * v1 - 16);
        unint64_t v8 = a1[2] - 1;
      }
      a1[2] = v8;
      ++*((_DWORD *)a1 + 6);
      v7 -= 16;
      if (!--v6) {
        goto LABEL_23;
      }
    }
    uint64_t v11 = 0;
    long long v26 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v14 = 136315906;
    int v15 = "operator[]";
    __int16 v16 = 1024;
    int v17 = 789;
    __int16 v18 = 2048;
    unint64_t v19 = v6;
    __int16 v20 = 2048;
    unint64_t v21 = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_25:
    uint64_t v11 = 0;
    long long v26 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v14 = 136315906;
    int v15 = "removeAt";
    __int16 v16 = 1024;
    int v17 = 931;
    __int16 v18 = 2048;
    unint64_t v19 = v6;
    __int16 v20 = 2048;
    unint64_t v21 = v1;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_26:
    uint64_t v13 = 0;
    long long v26 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v14 = 136315906;
    int v15 = "operator[]";
    __int16 v16 = 1024;
    int v17 = 797;
    __int16 v18 = 2048;
    unint64_t v19 = v6;
    __int16 v20 = 2048;
    unint64_t v21 = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_27:
    uint64_t v13 = 0;
    long long v26 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v14 = 136315906;
    int v15 = "operator[]";
    __int16 v16 = 1024;
    int v17 = 797;
    __int16 v18 = 2048;
    unint64_t v19 = 0;
    __int16 v20 = 2048;
    unint64_t v21 = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
LABEL_23:
  double result = NAN;
  a1[6] = 0xFFFFFFFF00000000;
  return result;
}

void **MetalHeap::releaseTextureForCaching(MetalHeap *this, int a2)
{
  double result = (void **)re::DataArray<re::TextureAtlasTile>::get((uint64_t)this + 64, a2);
  if (!*((unsigned char *)result + 8))
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF94E48, memory_order_acquire) & 1) == 0)
    {
      unint64_t v7 = result;
      int v5 = __cxa_guard_acquire(&qword_26AF94E48);
      double result = v7;
      if (v5)
      {
        re::Defaults::BOOLValue((re::Defaults *)"enableRenderGraphResourceAliasingWhenCaching", v4, v8);
        if (v8[0]) {
          char v6 = v8[1];
        }
        else {
          char v6 = 1;
        }
        _MergedGlobals_387 = v6;
        __cxa_guard_release(&qword_26AF94E48);
        double result = v7;
      }
    }
    if (_MergedGlobals_387)
    {
      uint64_t v3 = *result;
      return (void **)objc_msgSend(v3, sel_makeAliasable);
    }
  }
  return result;
}

uint64_t MetalHeap::makeBuffer(uint64_t a1, uint64_t a2, int a3, char a4, uint64_t *a5)
{
  id v8 = objc_msgSend(*(id *)(a1 + 16), sel_newBufferWithLength_options_, a2, a3);
  if (!v8) {
    return -1;
  }
  id v9 = v8;
  id v10 = objc_msgSend(*(id *)(a1 + 16), sel_maxAvailableSizeWithAlignment_, 16);
  if ((unint64_t)v10 < *(void *)(a1 + 192))
  {
    *(void *)(a1 + 192) = v10;
    *(void *)(a1 + 200) = objc_msgSend(*(id *)(a1 + 16), sel_usedSize);
  }
  id v11 = v9;
  id v13 = v11;
  if (v11) {

  }
  uint64_t v14 = *a5;
  int v15 = *(_DWORD *)(a1 + 184);
  if ((v15 + 1) >> 24) {
    int v16 = 1;
  }
  else {
    int v16 = v15 + 1;
  }
  *(_DWORD *)(a1 + 184) = v16;
  uint64_t v17 = *(unsigned __int16 *)(a1 + 180);
  unint64_t v18 = *(unsigned __int16 *)(a1 + 182);
  if (v17 != 0xFFFF || v18 != 0xFFFF)
  {
    if (*(void *)(a1 + 144) > v18)
    {
      long long v23 = (void *)(*(void *)(a1 + 160) + 16 * v18);
      *(_DWORD *)(v23[1] + 4 * v17) = v16;
      uint64_t v21 = *v23 + 24 * v17;
      *(_DWORD *)(a1 + 180) = *(_DWORD *)v21;
      goto LABEL_19;
    }
LABEL_25:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(_DWORD *)(a1 + 176) >= *(_DWORD *)(a1 + 172)) {
    re::DataArray<MetalHeap::TextureEntry>::allocBlock((void *)(a1 + 128));
  }
  uint64_t v19 = *(void *)(a1 + 144);
  unint64_t v18 = (unsigned __int16)(v19 - 1);
  if (!v19)
  {
    uint64_t v25 = 0;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(v26) = 136315906;
    *(void *)((char *)&v26 + 4) = "operator[]";
    WORD6(v26) = 1024;
    HIWORD(v26) = 789;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v17 = *(unsigned int *)(a1 + 176);
  if (v17 >= 0x10000)
  {
LABEL_24:
    re::internal::assertLog((re::internal *)5, v12, "assertion failure: '%s' (%s:line %i) m_tailBlockLinearAllocationCount (%u) is too large for a 16-bit unsigned integer", "!overflow", "create", 601, v17, v25, v26);
    _os_crash();
    __break(1u);
    goto LABEL_25;
  }
  __int16 v20 = (void *)(*(void *)(a1 + 160) + 16 * v18);
  *(_DWORD *)(a1 + 176) = v17 + 1;
  *(_DWORD *)(v20[1] + 4 * v17) = *(_DWORD *)(a1 + 184);
  uint64_t v21 = *v20 + 24 * v17;
LABEL_19:
  ++*(_DWORD *)(a1 + 168);
  *(void *)uint64_t v21 = v13;
  *(unsigned char *)(v21 + 8) = a4;
  *(void *)(v21 + 16) = v14;
  unint64_t v22 = (v18 << 16) | ((unint64_t)(*(_DWORD *)(a1 + 184) & 0xFFFFFF) << 32) | v17;
  if (v13) {

  }
  return v22;
}

double MetalHeap::releaseBuffer(MetalHeap *this, unint64_t a2)
{
  uint64_t v4 = (void *)((char *)this + 128);
  uint64_t v5 = re::DataArray<re::TextureAtlasTile>::get((uint64_t)this + 128, a2);
  if (!*(unsigned char *)(v5 + 8)) {
    objc_msgSend(*(id *)v5, sel_makeAliasable);
  }
  re::DataArray<MetalHeap::TextureEntry>::destroy((uint64_t)v4, a2);
  if (!*((_DWORD *)this + 42))
  {
    return re::DataArray<MetalHeap::TextureEntry>::clear(v4);
  }
  return result;
}

void **MetalHeap::releaseBufferForCaching(MetalHeap *this, int a2)
{
  double result = (void **)re::DataArray<re::TextureAtlasTile>::get((uint64_t)this + 128, a2);
  if (!*((unsigned char *)result + 8))
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF94E50, memory_order_acquire) & 1) == 0)
    {
      unint64_t v7 = result;
      int v5 = __cxa_guard_acquire(&qword_26AF94E50);
      double result = v7;
      if (v5)
      {
        re::Defaults::BOOLValue((re::Defaults *)"enableRenderGraphResourceAliasingWhenCaching", v4, v8);
        if (v8[0]) {
          char v6 = v8[1];
        }
        else {
          char v6 = 1;
        }
        byte_26AF94E41 = v6;
        __cxa_guard_release(&qword_26AF94E50);
        double result = v7;
      }
    }
    if (byte_26AF94E41)
    {
      uint64_t v3 = *result;
      return (void **)objc_msgSend(v3, sel_makeAliasable);
    }
  }
  return result;
}

id MetalHeap::onFrameStart(id *this)
{
  id result = objc_msgSend(this[2], sel_size);
  this[24] = result;
  this[25] = 0;
  return result;
}

void CachingHeap::~CachingHeap(CachingHeap *this)
{
  *(void *)this = &unk_26E70F938;
  int v2 = (char *)this + 56;
  re::DynamicArray<NS::SharedPtr<MTL::SamplerState>>::clear((uint64_t)this + 56);
  re::DynamicArray<NS::SharedPtr<MTL::SamplerState>>::clear((uint64_t)this + 96);
  if (*((_DWORD *)this + 41))
  {
    uint64_t v3 = *((unsigned int *)this + 40);
    if (v3) {
      memset_pattern16(*((void **)this + 18), &unk_2343655D0, 4 * v3);
    }
    if (*((_DWORD *)this + 42))
    {
      uint64_t v4 = 0;
      unint64_t v5 = 0;
      do
      {
        re::HashTable<CachingHeap::TextureCacheKey,re::DynamicArray<CachingHeap::TextureEntry>,CachingHeap::TextureCacheKeyHasher,CachingHeap::TextureCacheKeyEqualTo,true,false>::EntryWithHash::free(*((void *)this + 19) + v4);
        ++v5;
        v4 += 72;
      }
      while (v5 < *((unsigned int *)this + 42));
    }
    *((_DWORD *)this + 41) = 0;
    *((_DWORD *)this + 42) = 0;
    int v6 = *((_DWORD *)this + 44) + 1;
    *((_DWORD *)this + 43) = 0x7FFFFFFF;
    *((_DWORD *)this + 44) = v6;
  }
  re::HashTable<CachingHeap::TextureCacheKey,re::DynamicArray<CachingHeap::TextureEntry>,CachingHeap::TextureCacheKeyHasher,CachingHeap::TextureCacheKeyEqualTo,true,false>::deinit((uint64_t *)this + 17);
  re::DynamicArray<NS::SharedPtr<MTL::SamplerState>>::deinit((uint64_t)this + 96);
  re::DynamicArray<NS::SharedPtr<MTL::SamplerState>>::deinit((uint64_t)v2);
  re::DynamicString::deinit((CachingHeap *)((char *)this + 24));
}

{
  uint64_t vars8;

  CachingHeap::~CachingHeap(this);
  JUMPOUT(0x237DBCBD0);
}

uint64_t CachingHeap::makeTexture(uint64_t a1, id *a2, int a3, uint64_t *a4)
{
  id v8 = *a2;
  id v9 = &selRef_stepFunction_0;
  id v10 = objc_msgSend(v8, sel_hash);
  if (!*(void *)(a1 + 136)) {
    goto LABEL_5;
  }
  unint64_t v11 = 0xBF58476D1CE4E5B9;
  if (!a3) {
    unint64_t v11 = 0;
  }
  unint64_t v12 = (0x94D049BB133111EBLL * (v11 ^ (v11 >> 27))) ^ ((0x94D049BB133111EBLL * (v11 ^ (v11 >> 27))) >> 31);
  uint64_t v13 = *(unsigned int *)(*(void *)(a1 + 144)
                        + 4
                        * ((((unint64_t)v10 + 64 * v12 + (v12 >> 2) - 0x61C8864680B583E9) ^ v12)
                         % *(unsigned int *)(a1 + 160)));
  if (v13 != 0x7FFFFFFF)
  {
    uint64_t v16 = *(void *)(a1 + 152);
    while (1)
    {
      if (*(unsigned __int8 *)(v16 + 72 * v13 + 24) == a3)
      {
        unsigned __int8 v17 = objc_msgSend(*(id *)(v16 + 72 * v13 + 16), sel_isEqual_, v8);
        uint64_t v16 = *(void *)(a1 + 152);
        if (v17) {
          break;
        }
      }
      uint64_t v13 = *(_DWORD *)(v16 + 72 * v13 + 8) & 0x7FFFFFFF;
      if (v13 == 0x7FFFFFFF)
      {
        uint64_t v14 = 0;
        char v15 = 1;
LABEL_11:
        id v9 = &selRef_stepFunction_0;
        goto LABEL_12;
      }
    }
    uint64_t v45 = v16 + 72 * v13;
    uint64_t v14 = v45 + 32;
    uint64_t v46 = *(void *)(v45 + 48);
    if (!v46)
    {
      char v15 = 0;
      goto LABEL_11;
    }
    uint64_t v47 = *(void *)(v45 + 64);
    uint64_t v48 = 40 * v46;
    id v9 = &selRef_stepFunction_0;
    while (*(void *)(v47 + 32) != -1)
    {
      v47 += 40;
      v48 -= 40;
      if (!v48) {
        goto LABEL_62;
      }
    }
    re::DynamicArray<NS::SharedPtr<NS::String>>::add((_anonymous_namespace_ *)(a1 + 56), (id *)v47);
    uint64_t v54 = *(void *)(a1 + 72);
    uint64_t v20 = v54 - 1;
    *(void *)(v47 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = v54 - 1;
    *(_DWORD *)(v47 + 24) = 0;
    if (v54) {
      goto LABEL_57;
    }
LABEL_62:
    char v15 = 0;
  }
  else
  {
LABEL_5:
    uint64_t v14 = 0;
    char v15 = 1;
  }
LABEL_12:
  re::mtl::Device::makeTexture(*a2, (id *)(a1 + 16), &v66);
  if (!v66)
  {
    uint64_t v20 = -1;
    goto LABEL_57;
  }
  id v18 = v66;
  id v19 = v18;
  id v61 = v19;
  char v62 = 0;
  if (v18) {

  }
  uint64_t v63 = *a4;
  re::DynamicArray<NS::SharedPtr<NS::String>>::add((_anonymous_namespace_ *)(a1 + 56), &v66);
  uint64_t v20 = *(void *)(a1 + 72) - 1;
  uint64_t v65 = v20;
  int v64 = 0;
  if (v15)
  {
    id v56 = v19;
    v57[0] = 0;
    uint64_t v60 = 0;
    v57[1] = 0;
    unint64_t v58 = 0;
    int v59 = 0;
    *(void *)&double v21 = re::DynamicArray<CachingHeap::TextureEntry>::add((uint64_t)v57, (uint64_t)&v61).n128_u64[0];
    unint64_t v22 = 0xBF58476D1CE4E5B9;
    if (!a3) {
      unint64_t v22 = 0;
    }
    unint64_t v23 = (0x94D049BB133111EBLL * (v22 ^ (v22 >> 27))) ^ ((0x94D049BB133111EBLL * (v22 ^ (v22 >> 27))) >> 31);
    id v24 = objc_msgSend(v8, v9[33], v21);
    unint64_t v25 = ((unint64_t)v24 + 64 * v23 + (v23 >> 2) - 0x61C8864680B583E9) ^ v23;
    if (*(void *)(a1 + 136))
    {
      unint64_t v26 = v25 % *(unsigned int *)(a1 + 160);
      uint64_t v27 = *(unsigned int *)(*(void *)(a1 + 144) + 4 * v26);
      if (v27 != 0x7FFFFFFF)
      {
        uint64_t v55 = ((unint64_t)v24 + 64 * v23 + (v23 >> 2) - 0x61C8864680B583E9) ^ v23;
        uint64_t v28 = *(void *)(a1 + 152);
        do
        {
          if (*(unsigned __int8 *)(v28 + 72 * v27 + 24) == a3)
          {
            if (objc_msgSend(*(id *)(v28 + 72 * v27 + 16), sel_isEqual_, v8)) {
              goto LABEL_53;
            }
            uint64_t v28 = *(void *)(a1 + 152);
          }
          uint64_t v27 = *(_DWORD *)(v28 + 72 * v27 + 8) & 0x7FFFFFFF;
        }
        while (v27 != 0x7FFFFFFF);
        unint64_t v25 = v55;
      }
    }
    else
    {
      LODWORD(v26) = 0;
    }
    uint64_t v29 = *(unsigned int *)(a1 + 172);
    if (v29 == 0x7FFFFFFF)
    {
      uint64_t v29 = *(unsigned int *)(a1 + 168);
      int v30 = v29;
      if (v29 == *(_DWORD *)(a1 + 160))
      {
        re::HashTable<CachingHeap::TextureCacheKey,re::DynamicArray<CachingHeap::TextureEntry>,CachingHeap::TextureCacheKeyHasher,CachingHeap::TextureCacheKeyEqualTo,true,false>::setCapacity(a1 + 136, 2 * *(_DWORD *)(a1 + 164));
        LODWORD(v26) = v25 % *(unsigned int *)(a1 + 160);
        int v30 = *(_DWORD *)(a1 + 168);
      }
      *(_DWORD *)(a1 + 168) = v30 + 1;
      uint64_t v31 = *(void *)(a1 + 152);
      int v32 = *(_DWORD *)(v31 + 72 * v29 + 8);
    }
    else
    {
      uint64_t v31 = *(void *)(a1 + 152);
      int v32 = *(_DWORD *)(v31 + 72 * v29 + 8);
      *(_DWORD *)(a1 + 172) = v32 & 0x7FFFFFFF;
    }
    *(_DWORD *)(v31 + 72 * v29 + 8) = v32 | 0x80000000;
    uint64_t v33 = v26;
    *(_DWORD *)(*(void *)(a1 + 152) + 72 * v29 + 8) = *(_DWORD *)(*(void *)(a1 + 152) + 72 * v29 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 144) + 4 * v26);
    *(void *)(*(void *)(a1 + 152) + 72 * v29) = v25;
    uint64_t v34 = *(void *)(a1 + 152) + 72 * v29;
    *(void *)(v34 + 16) = v8;
    *(unsigned char *)(v34 + 24) = a3;
    uint64_t v35 = *(void *)(a1 + 152);
    uint64_t v36 = v35 + 72 * v29;
    *(void *)(v36 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0;
    uint64_t v37 = v36 + 32;
    *(void *)(v37 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0;
    v38 = (uint64_t *)(v37 + 32);
    *(_DWORD *)(v37 + 24) = 0;
    *(void *)(v37 + 8) = 0;
    *(void *)(v37 + 16) = 0;
    if (v57[0])
    {
      uint64_t v39 = v35 + 72 * v29;
      unint64_t v40 = v58;
      *(void *)uint64_t v37 = v57[0];
      re::DynamicArray<CachingHeap::TextureEntry>::setCapacity((void *)v37, v40);
      unint64_t v42 = *(void *)(v39 + 48);
      uint64_t v41 = v39 + 48;
      ++*(_DWORD *)(v41 + 8);
      if (v40 >= v42)
      {
        re::DynamicArray<CachingHeap::TextureEntry>::setCapacity((void *)v37, v40);
        uint64_t v49 = v60;
        std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,CachingHeap::TextureEntry *,CachingHeap::TextureEntry *,CachingHeap::TextureEntry *,0>(v60, v60 + 40 * *(void *)v41, *v38);
        if (*(void *)v41 != v40)
        {
          unint64_t v50 = v49 + 40 * v40;
          uint64_t v51 = v49 + 40 * *(void *)v41;
          uint64_t v52 = *v38 + 40 * *(void *)v41;
          do
          {
            *(void *)uint64_t v52 = *(id *)v51;
            *(unsigned char *)(v52 + 8) = *(unsigned char *)(v51 + 8);
            *(void *)(v52 + 16) = *(void *)(v51 + 16);
            *(_OWORD *)(v52 + 24) = *(_OWORD *)(v51 + 24);
            v51 += 40;
            v52 += 40;
          }
          while (v51 != v50);
        }
      }
      else
      {
        std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,CachingHeap::TextureEntry *,CachingHeap::TextureEntry *,CachingHeap::TextureEntry *,0>(v60, v60 + 40 * v40, *v38);
        if (v40 != *(void *)v41)
        {
          uint64_t v43 = *v38 + 40 * v40;
          uint64_t v44 = 40 * *(void *)v41 - 40 * v40;
          do
          {
            *(void *)(v43 + 16) = 0;
            if (*(void *)v43)
            {

              *(void *)uint64_t v43 = 0;
            }
            v43 += 40;
            v44 -= 40;
          }
          while (v44);
        }
      }
      *(void *)uint64_t v41 = v40;
    }
    *(_DWORD *)(*(void *)(a1 + 144) + 4 * v33) = v29;
    ++*(_DWORD *)(a1 + 164);
    ++*(_DWORD *)(a1 + 176);
LABEL_53:
    re::DynamicArray<CachingHeap::TextureEntry>::deinit((uint64_t)v57);
    id v19 = v56;
    if (!v56) {
      goto LABEL_55;
    }
    goto LABEL_54;
  }
  re::DynamicArray<CachingHeap::TextureEntry>::add(v14, (uint64_t)&v61);
  if (v19) {
LABEL_54:
  }

LABEL_55:
  if (v66) {

  }
LABEL_57:
  if (v8) {

  }
  return v20;
}

__n128 re::DynamicArray<CachingHeap::TextureEntry>::add(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = *(void *)(a1 + 16);
  if (v5 >= v4)
  {
    unint64_t v6 = v5 + 1;
    if (v4 < v5 + 1)
    {
      if (*(void *)a1)
      {
        uint64_t v7 = 2 * v4;
        BOOL v8 = v4 == 0;
        unint64_t v9 = 8;
        if (!v8) {
          unint64_t v9 = v7;
        }
        if (v9 <= v6) {
          unint64_t v10 = v6;
        }
        else {
          unint64_t v10 = v9;
        }
        re::DynamicArray<CachingHeap::TextureEntry>::setCapacity((void *)a1, v10);
      }
      else
      {
        re::DynamicArray<CachingHeap::TextureEntry>::setCapacity((void *)a1, v6);
        ++*(_DWORD *)(a1 + 24);
      }
    }
    unint64_t v5 = *(void *)(a1 + 16);
  }
  uint64_t v11 = *(void *)(a1 + 32) + 40 * v5;
  *(void *)uint64_t v11 = *(id *)a2;
  *(unsigned char *)(v11 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(v11 + 16) = *(void *)(a2 + 16);
  __n128 result = *(__n128 *)(a2 + 24);
  *(__n128 *)(v11 + 24) = result;
  ++*(void *)(a1 + 16);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t CachingHeap::makeBuffer(uint64_t a1, uint64_t a2, int a3)
{
  if (a3 == 0xFFFF) {
    int v4 = 0;
  }
  else {
    int v4 = a3;
  }
  id v5 = objc_msgSend(*(id *)(a1 + 16), sel_newBufferWithLength_options_, a2, v4);
  id v9 = v5;
  if (!v5) {
    return -1;
  }
  unint64_t v6 = v5;
  re::DynamicArray<NS::SharedPtr<MTL::Buffer>>::add(a1 + 96, &v9);
  uint64_t v7 = *(void *)(a1 + 112) - 1;

  return v7;
}

void CachingHeap::releaseBuffer(CachingHeap *this, unint64_t a2)
{
  if (*((void *)this + 14) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v3 = *((void *)this + 16);

  *(void *)(v3 + 8 * a2) = 0;
}

void CachingHeap::onFrameFinish(CachingHeap *this)
{
  re::DynamicArray<NS::SharedPtr<MTL::SamplerState>>::clear((uint64_t)this + 56);
  uint64_t v2 = *((void *)this + 14);
  if (v2)
  {
    uint64_t v3 = (id *)*((void *)this + 16);
    uint64_t v4 = 8 * v2;
    do
    {
      id v5 = *v3;
      if (v5) {

      }
      ++v3;
      v4 -= 8;
    }
    while (v4);
  }
  re::DynamicArray<NS::SharedPtr<MTL::SamplerState>>::clear((uint64_t)this + 96);
  uint64_t v45 = *((unsigned int *)this + 42);
  uint64_t v6 = 0;
  if (v45)
  {
    uint64_t v7 = (int *)(*((void *)this + 19) + 8);
    while (1)
    {
      int v8 = *v7;
      v7 += 18;
      if (v8 < 0) {
        break;
      }
      if (v45 == ++v6)
      {
        LODWORD(v6) = *((_DWORD *)this + 42);
        break;
      }
    }
  }
  if (v45 == v6) {
    return;
  }
  uint64_t v9 = v6;
  do
  {
    uint64_t v10 = *((void *)this + 19);
    uint64_t v11 = v10 + 72 * v9;
    unint64_t v14 = *(void *)(v11 + 48);
    uint64_t v13 = (unint64_t *)(v11 + 48);
    unint64_t v12 = v14;
    if (v14)
    {
      unint64_t v15 = 0;
      uint64_t v44 = *((void *)this + 19);
      uint64_t v16 = v10 + 72 * v9;
      unsigned __int8 v17 = (uint64_t *)(v16 + 64);
      id v18 = (_DWORD *)(v16 + 56);
      do
      {
        uint64_t v19 = *v17;
        uint64_t v20 = *v17 + 40 * v15;
        int v23 = *(_DWORD *)(v20 + 24);
        double v21 = (_DWORD *)(v20 + 24);
        int v22 = v23;
        if (v23 < 4)
        {
          *(void *)(v19 + 40 * v15 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = -1;
          *double v21 = v22 + 1;
          ++v15;
        }
        else
        {

          *(void *)(v19 + 40 * v15) = 0;
          unint64_t v24 = *v13;
          if (*v13 <= v15)
          {
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
          if (v24 - 1 > v15)
          {
            uint64_t v25 = *v17 + 40 * v24;
            uint64_t v26 = *v17 + 40 * v15;
            NS::SharedPtr<MTL::Texture>::operator=((void **)v26, (void **)(v25 - 40));
            *(unsigned char *)(v26 + 8) = *(unsigned char *)(v25 - 32);
            *(void *)(v26 + 16) = *(void *)(v25 - 24);
            *(_OWORD *)(v26 + 24) = *(_OWORD *)(v25 - 16);
            unint64_t v24 = *v13;
          }
          uint64_t v27 = *v17 + 40 * v24;
          *(void *)(v27 - 24) = 0;
          uint64_t v28 = *(void **)(v27 - 40);
          if (v28)
          {

            *(void *)(v27 - 40) = 0;
            unint64_t v24 = *v13;
          }
          unint64_t v12 = v24 - 1;
          *uint64_t v13 = v24 - 1;
          ++*v18;
        }
      }
      while (v15 < v12);
      uint64_t v10 = v44;
      if (v12) {
        goto LABEL_37;
      }
    }
    uint64_t v29 = v10 + 72 * v9;
    unsigned int v32 = *(unsigned __int8 *)(v29 + 24);
    uint64_t v31 = (unsigned __int8 *)(v29 + 24);
    uint64_t v30 = v32;
    id v33 = objc_msgSend((id)*(v13 - 4), sel_hash);
    if (!*((void *)this + 17)) {
      goto LABEL_37;
    }
    unint64_t v34 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v30) ^ ((0xBF58476D1CE4E5B9 * v30) >> 27));
    unint64_t v35 = (((unint64_t)v33 + 64 * (v34 ^ (v34 >> 31)) + ((v34 ^ (v34 >> 31)) >> 2) - 0x61C8864680B583E9) ^ v34 ^ (v34 >> 31))
        % *((unsigned int *)this + 40);
    uint64_t v36 = *(unsigned int *)(*((void *)this + 18) + 4 * v35);
    if (v36 == 0x7FFFFFFF) {
      goto LABEL_37;
    }
    uint64_t v37 = *((void *)this + 19);
    uint64_t v38 = 0x7FFFFFFFLL;
    while (*(unsigned __int8 *)(v37 + 72 * v36 + 24) != *v31)
    {
LABEL_31:
      uint64_t v38 = v36;
      uint64_t v36 = *(_DWORD *)(v37 + 72 * v36 + 8) & 0x7FFFFFFF;
      if (v36 == 0x7FFFFFFF) {
        goto LABEL_37;
      }
    }
    if ((objc_msgSend(*(id *)(v37 + 72 * v36 + 16), sel_isEqual_, *(v13 - 4)) & 1) == 0)
    {
      uint64_t v37 = *((void *)this + 19);
      goto LABEL_31;
    }
    uint64_t v39 = *((void *)this + 19);
    int v40 = *(_DWORD *)(v39 + 72 * v36 + 8) & 0x7FFFFFFF;
    if (v38 == 0x7FFFFFFF) {
      *(_DWORD *)(*((void *)this + 18) + 4 * v35) = v40;
    }
    else {
      *(_DWORD *)(v39 + 72 * v38 + 8) = *(_DWORD *)(v39 + 72 * v38 + 8) & 0x80000000 | v40;
    }
    re::HashTable<CachingHeap::TextureCacheKey,re::DynamicArray<CachingHeap::TextureEntry>,CachingHeap::TextureCacheKeyHasher,CachingHeap::TextureCacheKeyEqualTo,true,false>::EntryWithHash::free(*((void *)this + 19) + 72 * v36);
    *(_DWORD *)(*((void *)this + 19) + 72 * v36 + 8) = *(_DWORD *)(*((void *)this + 19) + 72 * v36 + 8) & 0x80000000 | *((_DWORD *)this + 43);
    --*((_DWORD *)this + 41);
    int v41 = *((_DWORD *)this + 44) + 1;
    *((_DWORD *)this + 43) = v36;
    *((_DWORD *)this + 44) = v41;
LABEL_37:
    unsigned int v42 = *((_DWORD *)this + 42);
    if (v42 <= (int)v6 + 1) {
      unsigned int v42 = v6 + 1;
    }
    while (1)
    {
      uint64_t v9 = (v6 + 1);
      if (v42 - 1 == v6) {
        break;
      }
      LODWORD(v6) = v6 + 1;
      unsigned int v43 = v9;
      if ((*(_DWORD *)(*((void *)this + 19) + 72 * v9 + 8) & 0x80000000) != 0) {
        goto LABEL_43;
      }
    }
    unsigned int v43 = v42;
LABEL_43:
    LODWORD(v6) = v43;
  }
  while (v45 != v43);
}

double re::RenderGraphResourceAllocationManager::RenderGraphResourceAllocationManager(re::RenderGraphResourceAllocationManager *this)
{
  *((void *)this + 4) = 0;
  *(void *)this = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *((_DWORD *)this + 6) = 0;
  *((unsigned char *)this + 40) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 13) = 0;
  *((_WORD *)this + 56) = 0;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_DWORD *)this + 24) = 0;
  *((void *)this + 15) = 0;
  *((_OWORD *)this + 8) = 0u;
  *((_DWORD *)this + 36) = 0;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 180) = 0u;
  *(void *)((char *)this + 196) = 0x7FFFFFFFLL;
  *((void *)this + 31) = 0;
  *((_WORD *)this + 128) = 0;
  *((_DWORD *)this + 60) = 0;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 360) = 0u;
  *(_OWORD *)((char *)this + 376) = 0u;
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  *(_OWORD *)((char *)this + 424) = 0u;
  *(_OWORD *)((char *)this + 440) = 0u;
  *(_OWORD *)((char *)this + 456) = 0u;
  *(_OWORD *)((char *)this + 472) = 0u;
  *(_OWORD *)((char *)this + 488) = 0u;
  *(_OWORD *)((char *)this + 504) = 0u;
  *(_OWORD *)((char *)this + 520) = 0u;
  *(_OWORD *)((char *)this + 536) = 0u;
  *(_OWORD *)((char *)this + 552) = 0u;
  *(_OWORD *)((char *)this + 568) = 0u;
  *(_OWORD *)((char *)this + 584) = 0u;
  *(_OWORD *)((char *)this + 600) = 0u;
  *(_OWORD *)((char *)this + 616) = 0u;
  *(_OWORD *)((char *)this + 6re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0u;
  *(_OWORD *)((char *)this + 648) = 0u;
  *(_OWORD *)((char *)this + 664) = 0u;
  *(_OWORD *)((char *)this + 680) = 0u;
  *(_OWORD *)((char *)this + 696) = 0u;
  *(_OWORD *)((char *)this + 712) = 0u;
  *(_OWORD *)((char *)this + 728) = 0u;
  *(_OWORD *)((char *)this + 744) = 0u;
  *(_OWORD *)((char *)this + 760) = 0u;
  *(_OWORD *)((char *)this + 10re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = xmmword_234361D10;
  *((_DWORD *)this + 262) = 2;
  *((void *)this + 1re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0;
  *(_OWORD *)((char *)this + 1064) = 0u;
  *((_DWORD *)this + 270) = 0;
  *((void *)this + 141) = 0;
  *((unsigned char *)this + 1136) = 0;
  *((void *)this + 143) = 0;
  *((_OWORD *)this + 72) = 0u;
  *((_DWORD *)this + 292) = 0;
  *((void *)this + 166) = 0;
  *(_OWORD *)((char *)this + 1336) = 0u;
  *((_DWORD *)this + 338) = 0;
  *((void *)this + 205) = 0;
  *((unsigned char *)this + 1649) = 0;
  *((_OWORD *)this + 85) = 0u;
  *((_OWORD *)this + 86) = 0u;
  *((_DWORD *)this + 348) = 0;
  *(_OWORD *)((char *)this + 1400) = 0u;
  *(_OWORD *)((char *)this + 1416) = 0u;
  *((_DWORD *)this + 358) = 0;
  *((_DWORD *)this + 368) = 0;
  *((_OWORD *)this + 91) = 0u;
  *((_OWORD *)this + 90) = 0u;
  *(_OWORD *)((char *)this + 1480) = 0u;
  *(_OWORD *)((char *)this + 1496) = 0u;
  *((_DWORD *)this + 378) = 0;
  *((_OWORD *)this + 95) = 0u;
  *((_OWORD *)this + 96) = 0u;
  *((_DWORD *)this + 388) = 0;
  *(_OWORD *)((char *)this + 1560) = 0u;
  *(_OWORD *)((char *)this + 1576) = 0u;
  *((_DWORD *)this + 398) = 0;
  *((_OWORD *)this + 100) = 0u;
  *((_OWORD *)this + 101) = 0u;
  *((_DWORD *)this + 408) = 0;
  *((void *)this + 209) = 0;
  *((_DWORD *)this + 420) = 0;
  *(_OWORD *)((char *)this + 1656) = 0u;
  *((_DWORD *)this + 280) = 0;
  *((_OWORD *)this + 69) = 0u;
  *((_OWORD *)this + 68) = 0u;
  *((_DWORD *)this + 302) = 0;
  *(_OWORD *)((char *)this + 1176) = 0u;
  *(_OWORD *)((char *)this + 1192) = 0u;
  *((_DWORD *)this + 312) = 0;
  *((_OWORD *)this + 77) = 0u;
  *((_OWORD *)this + 76) = 0u;
  *((_DWORD *)this + 322) = 0;
  *(_OWORD *)((char *)this + 1256) = 0u;
  *(_OWORD *)((char *)this + 1272) = 0u;
  *((void *)this + 163) = 0;
  *((void *)this + 162) = 0;
  *((void *)this + 164) = 0;
  *(_OWORD *)((char *)this + 1688) = 0u;
  *(_OWORD *)((char *)this + 1704) = 0u;
  *(_OWORD *)((char *)this + 1720) = 0u;
  *(_OWORD *)((char *)this + 1736) = 0u;
  *(_OWORD *)((char *)this + 1752) = 0u;
  *((void *)this + 221) = 0;
  return result;
}

void re::RenderGraphResourceAllocationManager::~RenderGraphResourceAllocationManager(re::RenderGraphResourceAllocationManager *this)
{
  re::RenderGraphResourceAllocationManager::deinit((uint64_t)this);
  re::DynamicArray<re::RenderGraphResourceAllocationManager::EncoderAndFence>::deinit((uint64_t)this + 1656);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 1608);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 1568);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 1528);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 1488);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 1448);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 1408);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 1368);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 1328);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 1264);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 1224);
  re::DynamicArray<re::RenderGraphResourceAllocationManager::TextureEntry>::deinit((uint64_t)this + 1184);
  re::DynamicArray<re::RenderGraphResourceAllocationManager::TextureEntry>::deinit((uint64_t)this + 1144);
  re::DynamicArray<re::RenderGraphResourceAllocationManager::TextureEntry>::deinit((uint64_t)this + 1096);
  re::DynamicArray<re::RenderGraphResourceAllocationManager::TextureEntry>::deinit((uint64_t)this + 1056);
  for (uint64_t i = 768; i != 256; i -= 8)
  {
    uint64_t v3 = *(void **)((char *)this + i);
    if (v3)
    {

      *(void *)((char *)this + i) = 0;
    }
  }
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 216);
  re::HashTable<unsigned long long,re::RenderGraphResourceAllocationManager::HeapGroupHierarchy,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)this + 20);
  re::DynamicArray<re::RenderGraphResourceAllocationManager::HeapGroup>::deinit((uint64_t)this + 120);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 72);

  re::DynamicArray<unsigned long>::deinit((uint64_t)this);
}

uint64_t re::RenderGraphResourceAllocationManager::deinit(uint64_t this)
{
  if (*(unsigned char *)(this + 40))
  {
    uint64_t v1 = this;
    re::internal::destroyPersistent<re::Heap>(*(re **)(this + 208));
    *(void *)(v1 + 208) = 0;
    *(void *)(v1 + 2re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0;
    ++*(_DWORD *)(v1 + 240);
    this = (uint64_t)re::internal::destroyPersistent<re::Heap>(*(re **)(v1 + 64));
    *(void *)(v1 + 64) = 0;
    *(void *)(v1 + 88) = 0;
    ++*(_DWORD *)(v1 + 96);
    if (*(void *)(v1 + 136))
    {
      unint64_t v2 = 0;
      do
      {
        uint64_t v3 = *(void *)(v1 + 152);
        uint64_t v4 = v3 + 48 * v2;
        uint64_t v6 = *(void *)(v4 + 24);
        id v5 = (unint64_t *)(v4 + 24);
        if (v6)
        {
          uint64_t v7 = 0;
          unint64_t v8 = 0;
          do
          {
            re::internal::destroyPersistent<re::Heap>(*(re **)(*(void *)(v3 + 48 * v2 + 40) + v7));
            ++v8;
            v7 += 56;
          }
          while (*v5 > v8);
        }
        this = re::DynamicArray<re::RenderGraphResourceAllocationManager::HeapAndFences>::clear(v3 + 48 * v2++ + 8);
      }
      while (*(void *)(v1 + 136) > v2);
    }
    uint64_t v43 = *(unsigned int *)(v1 + 192);
    uint64_t v9 = 0;
    if (v43)
    {
      uint64_t v10 = (int *)(*(void *)(v1 + 176) + 8);
      while (1)
      {
        int v11 = *v10;
        v10 += 30;
        if (v11 < 0) {
          break;
        }
        if (v43 == ++v9)
        {
          LODWORD(v9) = *(_DWORD *)(v1 + 192);
          break;
        }
      }
    }
    if (v43 != v9)
    {
      uint64_t v12 = v9;
      uint64_t v42 = v1;
      do
      {
        uint64_t v13 = *(void *)(v1 + 176);
        uint64_t v14 = v13 + 120 * v12;
        this = (uint64_t)re::internal::destroyPersistent<re::Heap>(*(re **)(v14 + 24));
        *(void *)(v14 + 24) = 0;
        uint64_t v16 = *(void *)(v14 + 96);
        unint64_t v15 = (unint64_t *)(v14 + 96);
        *(v15 - 6) = 0;
        ++*((_DWORD *)v15 - 10);
        if (v16)
        {
          unint64_t v17 = 0;
          id v18 = (uint64_t *)(v13 + 120 * v12 + 112);
          do
          {
            uint64_t v19 = *v18;
            uint64_t v20 = *v18 + 48 * v17;
            uint64_t v22 = *(void *)(v20 + 24);
            double v21 = (unint64_t *)(v20 + 24);
            if (v22)
            {
              uint64_t v23 = 0;
              unint64_t v24 = 0;
              do
              {
                re::internal::destroyPersistent<re::Heap>(*(re **)(*(void *)(v19 + 48 * v17 + 40) + v23));
                ++v24;
                v23 += 56;
              }
              while (*v21 > v24);
            }
            this = re::DynamicArray<re::RenderGraphResourceAllocationManager::HeapAndFences>::clear(v19 + 48 * v17++ + 8);
          }
          while (*v15 > v17);
        }
        uint64_t v1 = v42;
        unsigned int v25 = *(_DWORD *)(v42 + 192);
        if (v25 <= (int)v9 + 1) {
          unsigned int v25 = v9 + 1;
        }
        while (1)
        {
          uint64_t v12 = (v9 + 1);
          if (v25 - 1 == v9) {
            break;
          }
          LODWORD(v9) = v9 + 1;
          unsigned int v26 = v12;
          if ((*(_DWORD *)(*(void *)(v42 + 176) + 120 * v12 + 8) & 0x80000000) != 0) {
            goto LABEL_27;
          }
        }
        unsigned int v26 = v25;
LABEL_27:
        LODWORD(v9) = v26;
      }
      while (v43 != v26);
    }
    if (*(void *)(v1 + 1160))
    {
      uint64_t v27 = 0;
      uint64_t v28 = 0;
      unint64_t v29 = 0;
      __asm { FMOV            V1.2S, #1.0 }
      while (1)
      {
        uint64_t v35 = *(void *)(v1 + 1176) + v28;
        *(void *)uint64_t v35 = -1;
        *(void *)(v35 + 16) = 0;
        *(_DWORD *)(v35 + 24) += 2;
        *(void *)(v35 + 88) = 0;
        *(_DWORD *)(v35 + 96) += 2;
        *(void *)(v35 + 152) = 0;
        *(unsigned char *)(v35 + 160) = 0;
        *(void *)(v35 + 168) = 0;
        if (*(void *)(v1 + 1240) <= v29) {
          break;
        }
        uint64_t v36 = *(void *)(v1 + 1256) + v27;
        *(void *)uint64_t v36 = 3;
        *(_DWORD *)(v36 + 8) = 2;
        *(void *)(v36 + 28) = -1;
        *(void *)(v36 + 20) = -1;
        *(void *)(v36 + 12) = -1;
        *(unsigned char *)(v36 + 36) = 0;
        *(void *)(v36 + 40) = _D1;
        *(_OWORD *)(v36 + 48) = xmmword_2343AEB90;
        *(_OWORD *)(v36 + 64) = xmmword_2343AEBA0;
        *(_DWORD *)(v36 + 80) = -1;
        *(_OWORD *)(v36 + 88) = xmmword_234378E20;
        *(unsigned char *)(v36 + 104) = 0;
        ++v29;
        v28 += 184;
        v27 += 112;
        if (*(void *)(v1 + 1160) <= v29) {
          goto LABEL_32;
        }
      }
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_39:
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
LABEL_32:
    if (*(void *)(v1 + 1200))
    {
      uint64_t v37 = 0;
      unint64_t v38 = 0;
      uint64_t v39 = 168;
      do
      {
        int v40 = (void *)(*(void *)(v1 + 1216) + v39);
        *(v40 - 21) = -1;
        *(v40 - 19) = 0;
        *((_DWORD *)v40 - 36) += 2;
        *(v40 - 10) = 0;
        *((_DWORD *)v40 - 18) += 2;
        *(v40 - 2) = 0;
        *((unsigned char *)v40 - 8) = 0;
        *int v40 = 0;
        if (*(void *)(v1 + 1280) <= v38) {
          goto LABEL_39;
        }
        uint64_t v41 = *(void *)(v1 + 1296) + v37;
        *(_DWORD *)uint64_t v41 = 0;
        *(void *)(v41 + 8) = -1;
        *(unsigned char *)(v41 + 16) = 0;
        *(_DWORD *)(v41 + 20) = 1065353216;
        *(void *)(v41 + 24) = 0xFFFFFFFF00000020;
        *(_OWORD *)(v41 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = xmmword_234378E20;
        ++v38;
        v39 += 184;
        v37 += 48;
      }
      while (*(void *)(v1 + 1200) > v38);
    }
    *(unsigned char *)(v1 + 40) = 0;
  }
  return this;
}

void re::RenderGraphResourceAllocationManager::init(re::RenderGraphResourceAllocationManager *this, id *a2)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  if (!*((unsigned char *)this + 40))
  {
    uint64_t v4 = (id *)((char *)this + 48);
    re::ObjCObject::operator=((id *)this + 6, a2 + 23);
    *((void *)this + 7) = a2;
    *(_WORD *)((char *)this + 41) = 0;
    id v5 = *((id *)this + 6);
    v40[0] = v5;
    *(void *)id v33 = 4;
    uint64_t v32 = 70;
    uint64_t v31 = 2;
    uint64_t TextureCompressionType = re::mtl::getTextureCompressionType(v40, &v31, &v32, v33);
    id v7 = objc_msgSend(objc_msgSend(MEMORY[0x263F12A50], sel_alloc), sel_init);
    objc_msgSend(v7, sel_setStorageMode_, 2);
    if ((objc_msgSend(v7, sel_respondsToSelector_, sel_setCompressionType_) & 1) != 0
      || objc_msgSend(v7, sel_methodSignatureForSelector_, sel_setCompressionType_))
    {
      objc_msgSend(v7, sel_setCompressionType_, TextureCompressionType);
    }
    objc_msgSend(v7, sel_setTextureType_, 2);
    objc_msgSend(v7, sel_setWidth_, 128);
    objc_msgSend(v7, sel_setHeight_, 129);
    objc_msgSend(v7, sel_setPixelFormat_, 70);
    objc_msgSend(v7, sel_setMipmapLevelCount_, 1);
    objc_msgSend(v7, sel_setUsage_, 4);
    objc_msgSend(v7, sel_setSampleCount_, 1);
    *((unsigned char *)this + 41) = (unint64_t)objc_msgSend(*((id *)this + 6), sel_heapTextureSizeAndAlignWithDescriptor_, v7) > 0x1FBD0;
    if (v7) {

    }
    if (*((unsigned char *)this + 41))
    {
      v40[0] = (id)41943040;
      re::DynamicArray<unsigned long>::add(this, v40);
      v40[0] = (id)((uint64_t)v40[0] * 2);
      re::DynamicArray<unsigned long>::add(this, v40);
      v40[0] = (char *)v40[0] + ((unint64_t)v40[0] >> 1);
      re::DynamicArray<unsigned long>::add(this, v40);
      v40[0] = (char *)v40[0] + ((unint64_t)v40[0] >> 1);
      re::DynamicArray<unsigned long>::add(this, v40);
      v40[0] = (char *)v40[0] + ((unint64_t)v40[0] >> 1);
      re::DynamicArray<unsigned long>::add(this, v40);
      v40[0] = (char *)v40[0] + ((unint64_t)v40[0] >> 1);
      re::DynamicArray<unsigned long>::add(this, v40);
      v40[0] = (char *)v40[0] + ((unint64_t)v40[0] >> 1);
      re::DynamicArray<unsigned long>::add(this, v40);
      v40[0] = (char *)v40[0] + ((unint64_t)v40[0] >> 1);
      unint64_t v8 = v40;
    }
    else
    {
      id v9 = objc_msgSend(objc_msgSend(MEMORY[0x263F12A50], sel_alloc), sel_init);
      if ((objc_msgSend(v9, sel_respondsToSelector_, sel_setCompressionType_) & 1) != 0
        || objc_msgSend(v9, sel_methodSignatureForSelector_, sel_setCompressionType_))
      {
        objc_msgSend(v9, sel_setCompressionType_, 0);
      }
      objc_msgSend(v9, sel_setWidth_, 1024);
      objc_msgSend(v9, sel_setHeight_, 1024);
      objc_msgSend(v9, sel_setPixelFormat_, 13);
      objc_msgSend(v9, sel_setTextureType_, 2);
      objc_msgSend(v9, sel_setStorageMode_, 2);
      objc_msgSend(v9, sel_setUsage_, 5);
      unsigned int v10 = objc_msgSend(*v4, sel_heapTextureSizeAndAlignWithDescriptor_, v9);
      uint64_t v12 = v11;
      uint64_t v13 = (int)(v10 - 0x100000);
      if (v9) {

      }
      uint64_t v14 = v13 + 2 * v12;
      unint64_t v15 = 0x2000000;
      do
      {
        v40[0] = (id)(v15 + (v15 >> 20) * v14);
        re::DynamicArray<unsigned long>::add(this, v40);
        unint64_t v16 = v15 >> 29;
        v15 *= 2;
      }
      while (!v16);
      unint64_t v8 = (id *)&re::RenderGraphResourceAllocationManager::kHeapTopMemorySize;
    }
    re::DynamicArray<unsigned long>::add(this, v8);
    uint64_t v17 = *((void *)this + 2);
    if (v17)
    {
      uint64_t v18 = 0;
      while (!(*(void *)(*((void *)this + 4) + 8 * v18) >> 30))
      {
        if (v17 == ++v18) {
          goto LABEL_21;
        }
      }
    }
    else
    {
LABEL_21:
      uint64_t v18 = v17 - 1;
    }
    re::DynamicArray<re::RenderGraphResourceAllocationManager::HeapGroup>::resize((void *)this + 15, v18 + 1);
    if (*((void *)this + 17))
    {
      uint64_t v19 = 0;
      unint64_t v20 = 0;
      do
      {
        uint64_t v21 = re::RenderGraphResourceAllocationManager::indexToSize(this, v20);
        unint64_t v22 = *((void *)this + 17);
        if (v22 <= v20)
        {
          uint64_t v32 = 0;
          long long v43 = 0u;
          long long v44 = 0u;
          long long v41 = 0u;
          long long v42 = 0u;
          *(_OWORD *)int v40 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)id v33 = 136315906;
          *(void *)&v33[4] = "operator[]";
          __int16 v34 = 1024;
          int v35 = 789;
          __int16 v36 = 2048;
          unint64_t v37 = v20;
          __int16 v38 = 2048;
          unint64_t v39 = v22;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        uint64_t v23 = (uint64_t *)(*((void *)this + 19) + v19);
        *uint64_t v23 = v21;
        if ((unint64_t)v23[2] <= 0x7F)
        {
          re::DynamicArray<re::RenderGraphResourceAllocationManager::HeapAndFences>::setCapacity(v23 + 1, 0x80uLL);
          unint64_t v22 = *((void *)this + 17);
        }
        ++v20;
        v19 += 48;
      }
      while (v22 > v20);
    }
    *(unsigned char *)(re::RenderGraphResourceAllocationManager::allocateNewHeap((uint64_t)this, 32505856, 1024, 0) + 49) = 1;
    re::RenderGraphResourceAllocationManager::allocateSmallBlockHeap((re::RenderGraphResourceAllocationManager *)v40, (uint64_t)this, 0);
    *((id *)this + 8) = v40[0];
    re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)this + 72, (uint64_t)&v40[1]);
    *((_WORD *)this + 56) = v43;
    unint64_t v24 = (re *)v40[1];
    if (v40[1] && *((void *)&v42 + 1)) {
      unint64_t v24 = (re *)(*(uint64_t (**)(void))(*(void *)v40[1] + 40))();
    }
    unsigned int v25 = re::globalAllocators(v24);
    uint64_t v26 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v25[2] + 32))(v25[2], 136, 8);
    *(_OWORD *)(v26 + 40) = 0u;
    *(_OWORD *)(v26 + 8) = 0u;
    *(_OWORD *)(v26 + 56) = 0u;
    *(_OWORD *)(v26 + 72) = 0u;
    *(_OWORD *)(v26 + 88) = 0u;
    *(_OWORD *)(v26 + 104) = 0u;
    *(_OWORD *)(v26 + 120) = 0u;
    *(_OWORD *)(v26 + 24) = 0u;
    *(void *)uint64_t v26 = &unk_26E70F818;
    *(_OWORD *)(v26 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0u;
    *(void *)(v26 + 48) = 0;
    *(_OWORD *)(v26 + 16) = 0u;
    re::DynamicString::setCapacity((void *)(v26 + 24), 0);
    *(void *)(v26 + 56) = 0;
    *(void *)(v26 + 64) = 0;
    *(_DWORD *)(v26 + 80) = 0;
    *(void *)(v26 + 72) = 0;
    *(void *)(v26 + 128) = 0;
    *(_OWORD *)(v26 + 88) = 0u;
    *(_OWORD *)(v26 + 104) = 0u;
    *(_DWORD *)(v26 + 120) = 0;
    id v30 = *((id *)this + 6);
    v40[0] = "HeapForMemoryless";
    v40[1] = (id)17;
    re::DynamicString::operator=((re::DynamicString *)(v26 + 24), (uint64_t)v40);
    re::ObjCObject::operator=((id *)(v26 + 16), &v30);
    *(_DWORD *)(v26 + 8) = 1;

    *((void *)&v42 + 1) = 0;
    v40[0] = (id)v26;
    v40[1] = 0;
    long long v41 = 0uLL;
    LODWORD(v42) = 0;
    LOWORD(v43) = 0;
    *((void *)this + 26) = v26;
    re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)this + 216, (uint64_t)&v40[1]);
    *((_WORD *)this + 128) = v43;
    if (v40[1] && *((void *)&v42 + 1)) {
      (*(void (**)(void))(*(void *)v40[1] + 40))();
    }
    uint64_t v27 = 0;
    uint64_t v28 = (char *)this + 776;
    uint64_t v29 = -512;
    do
    {
      v40[0] = objc_msgSend(*v4, sel_newFence);
      NS::SharedPtr<MTL::Texture>::operator=((void **)&v28[v29], v40);
      if (v40[0]) {

      }
      *(_DWORD *)&v28[v27] = -1;
      v27 += 4;
      v29 += 8;
    }
    while (v29);
    *((unsigned char *)this + 40) = 1;
  }
}

void *re::DynamicArray<re::RenderGraphResourceAllocationManager::HeapGroup>::resize(void *result, unint64_t a2)
{
  uint64_t v3 = result;
  unint64_t v4 = result[2];
  if (v4 >= a2)
  {
    if (v4 <= a2) {
      return result;
    }
    uint64_t v8 = (48 * a2) | 8;
    unint64_t v9 = a2;
    do
    {
      double result = (void *)re::DynamicArray<re::RenderGraphResourceAllocationManager::HeapAndFences>::deinit(v3[4] + v8);
      ++v9;
      v8 += 48;
    }
    while (v9 < v3[2]);
  }
  else
  {
    if (result[1] < a2)
    {
      double result = re::DynamicArray<re::RenderGraphResourceAllocationManager::HeapGroup>::setCapacity(result, a2);
      unint64_t v4 = v3[2];
    }
    unint64_t v5 = a2 - v4;
    if (a2 > v4)
    {
      uint64_t v6 = 48 * v4;
      do
      {
        uint64_t v7 = v3[4] + v6;
        *(void *)(v7 + 40) = 0;
        *(_OWORD *)uint64_t v7 = 0uLL;
        *(_OWORD *)(v7 + 16) = 0uLL;
        *(_DWORD *)(v7 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0;
        v6 += 48;
        --v5;
      }
      while (v5);
    }
  }
  v3[2] = a2;
  ++*((_DWORD *)v3 + 6);
  return result;
}

uint64_t re::RenderGraphResourceAllocationManager::indexToSize(re::RenderGraphResourceAllocationManager *this, unint64_t a2)
{
  unint64_t v2 = *((void *)this + 2);
  if (a2 >= v2 - 1) {
    unint64_t v3 = v2 - 1;
  }
  else {
    unint64_t v3 = a2;
  }
  if (v2 <= v3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(*((void *)this + 4) + 8 * v3);
}

uint64_t re::RenderGraphResourceAllocationManager::allocateNewHeap(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v60 = *MEMORY[0x263EF8340];
  uint64_t v8 = re::RenderGraphResourceAllocationManager::heapGroupHierarchyFor((re::RenderGraphResourceAllocationManager *)a1, a4);
  uint64_t v9 = v8;
  uint64_t v10 = *(void *)(a1 + 16);
  if (v10)
  {
    unint64_t v11 = 0;
    while (*(void *)(*(void *)(a1 + 32) + 8 * v11) < (unint64_t)(a2 + a3))
    {
      if (v10 == ++v11) {
        goto LABEL_5;
      }
    }
  }
  else
  {
LABEL_5:
    unint64_t v11 = v10 - 1;
  }
  if (v11 >= *(void *)(v8 + 72)) {
    return 0;
  }
  unint64_t v12 = re::RenderGraphResourceAllocationManager::indexToSize((re::RenderGraphResourceAllocationManager *)a1, v11);
  uint64_t v13 = *(void *)(a1 + 1696);
  *(void *)(a1 + 1696) = v13 + 1;
  uint64_t v14 = (re *)re::DynamicString::format((re::DynamicString *)"Heap_%zu_(%zuMB)", (re::DynamicString *)&v42, v13, v12 >> 20);
  if (*(unsigned char *)(a1 + 42))
  {
    unint64_t v15 = re::globalAllocators(v14);
    unint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v15[2] + 32))(v15[2], 184, 8);
    *(_OWORD *)(v16 + 40) = 0u;
    *(_OWORD *)(v16 + 8) = 0u;
    *(_OWORD *)(v16 + 56) = 0u;
    *(_OWORD *)(v16 + 72) = 0u;
    *(_OWORD *)(v16 + 88) = 0u;
    *(_OWORD *)(v16 + 104) = 0u;
    *(_OWORD *)(v16 + 120) = 0u;
    *(_OWORD *)(v16 + 136) = 0u;
    *(_OWORD *)(v16 + 152) = 0u;
    *(_OWORD *)(v16 + 168) = 0u;
    *(_OWORD *)(v16 + 24) = 0u;
    *(void *)unint64_t v16 = &unk_26E70F938;
    *(_OWORD *)(v16 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0u;
    *(void *)(v16 + 48) = 0;
    *(_OWORD *)(v16 + 16) = 0u;
    re::DynamicString::setCapacity((void *)(v16 + 24), 0);
    *(void *)(v16 + 56) = 0;
    *(void *)(v16 + 64) = 0;
    *(_DWORD *)(v16 + 80) = 0;
    *(void *)(v16 + 72) = 0;
    *(_OWORD *)(v16 + 88) = 0u;
    *(_OWORD *)(v16 + 104) = 0u;
    *(_DWORD *)(v16 + 120) = 0;
    *(_OWORD *)(v16 + 144) = 0u;
    *(_OWORD *)(v16 + 160) = 0u;
    *(_OWORD *)(v16 + 128) = 0u;
    *(void *)(v16 + 176) = 0;
    *(_DWORD *)(v16 + 172) = 0x7FFFFFFF;
    if (v43) {
      uint64_t v17 = v45;
    }
    else {
      uint64_t v17 = v44;
    }
    id v41 = *(id *)(a1 + 48);
    size_t v18 = strlen(v17);
    *(void *)&long long v55 = v17;
    *((void *)&v55 + 1) = v18;
    re::DynamicString::operator=((re::DynamicString *)(v16 + 24), (uint64_t)&v55);
    uint64_t v19 = &v41;
    re::ObjCObject::operator=((id *)(v16 + 16), &v41);
    int v20 = 3;
LABEL_18:
    *(_DWORD *)(v16 + 8) = v20;
    goto LABEL_19;
  }
  unint64_t v22 = *(uint64_t (**)(void))(*(void *)re::globalAllocators(v14)[2] + 32);
  if (a4)
  {
    unint64_t v16 = v22();
    *(_OWORD *)unint64_t v16 = 0u;
    *(_OWORD *)(v16 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0u;
    *(_OWORD *)(v16 + 48) = 0u;
    *(_OWORD *)(v16 + 64) = 0u;
    *(_OWORD *)(v16 + 80) = 0u;
    *(_OWORD *)(v16 + 96) = 0u;
    *(_OWORD *)(v16 + 112) = 0u;
    *(void *)(v16 + 128) = 0;
    *(_OWORD *)(v16 + 16) = 0u;
    DeviceHeap::DeviceHeap((DeviceHeap *)v16);
    if (v43) {
      uint64_t v23 = v45;
    }
    else {
      uint64_t v23 = v44;
    }
    id v40 = *(id *)(a1 + 48);
    re::DynamicString::operator=((re::DynamicString *)(v16 + 24), v23);
    uint64_t v19 = &v40;
    re::ObjCObject::operator=((id *)(v16 + 16), &v40);
    int v20 = 1;
    goto LABEL_18;
  }
  unint64_t v16 = v22();
  *(_OWORD *)(v16 + 56) = 0u;
  *(_OWORD *)(v16 + 8) = 0u;
  *(_OWORD *)(v16 + 72) = 0u;
  *(_OWORD *)(v16 + 88) = 0u;
  *(_OWORD *)(v16 + 104) = 0u;
  *(_OWORD *)(v16 + 120) = 0u;
  *(_OWORD *)(v16 + 136) = 0u;
  *(_OWORD *)(v16 + 152) = 0u;
  *(_OWORD *)(v16 + 168) = 0u;
  *(_OWORD *)(v16 + 184) = 0u;
  *(void *)(v16 + 200) = 0;
  *(void *)unint64_t v16 = &unk_26E70F8A8;
  *(_OWORD *)(v16 + 24) = 0u;
  *(_OWORD *)(v16 + 40) = 0u;
  *(void *)(v16 + 56) = 0;
  re::DynamicString::setCapacity((void *)(v16 + 32), 0);
  *(void *)(v16 + 64) = 0;
  *(void *)(v16 + 72) = 0;
  *(_DWORD *)(v16 + 88) = 0;
  *(void *)(v16 + 80) = 0;
  *(void *)(v16 + 96) = 0;
  *(void *)(v16 + 104) = 0;
  *(_DWORD *)(v16 + 112) = 0;
  *(void *)(v16 + 116) = 0x1FFFFFFFFLL;
  *(void *)(v16 + 136) = 0;
  *(void *)(v16 + 144) = 0;
  *(void *)(v16 + 128) = 0;
  *(_DWORD *)(v16 + 152) = 0;
  *(void *)(v16 + 160) = 0;
  *(void *)(v16 + 168) = 0;
  *(_DWORD *)(v16 + 176) = 0;
  *(void *)(v16 + 180) = 0x1FFFFFFFFLL;
  if (v43) {
    int v35 = v45;
  }
  else {
    int v35 = v44;
  }
  id v39 = *(id *)(a1 + 48);
  uint64_t v19 = &v39;
  MetalHeap::init(v16, v35, &v39, v12);
LABEL_19:

  unint64_t v25 = *(void *)(v9 + 72);
  if (v25 <= v11)
  {
    uint64_t v46 = 0;
    long long v58 = 0u;
    long long v59 = 0u;
    long long v56 = 0u;
    long long v57 = 0u;
    long long v55 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v47 = 136315906;
    uint64_t v48 = "operator[]";
    __int16 v49 = 1024;
    int v50 = 789;
    __int16 v51 = 2048;
    unint64_t v52 = v11;
    __int16 v53 = 2048;
    unint64_t v54 = v25;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v26 = *(void *)(v9 + 88);
  uint64_t v27 = v26 + 48 * v11;
  unint64_t v30 = *(void *)(v27 + 24);
  uint64_t v29 = (unint64_t *)(v27 + 24);
  unint64_t v28 = v30;
  unint64_t v31 = *(v29 - 1);
  if (v30 >= v31)
  {
    unint64_t v32 = v28 + 1;
    if (v31 < v28 + 1)
    {
      if (*(v29 - 2))
      {
        unint64_t v33 = 2 * v31;
        if (!v31) {
          unint64_t v33 = 8;
        }
        if (v33 <= v32) {
          unint64_t v34 = v32;
        }
        else {
          unint64_t v34 = v33;
        }
        re::DynamicArray<re::RenderGraphResourceAllocationManager::HeapAndFences>::setCapacity(v29 - 2, v34);
      }
      else
      {
        re::DynamicArray<re::RenderGraphResourceAllocationManager::HeapAndFences>::setCapacity(v29 - 2, v32);
        ++*(_DWORD *)(v26 + 48 * v11 + 32);
      }
    }
    unint64_t v28 = *v29;
  }
  uint64_t v36 = v26 + 48 * v11;
  uint64_t v37 = *(void *)(v36 + 40) + 56 * v28;
  *(void *)(v37 + 40) = 0;
  *(_DWORD *)(v37 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0;
  *(void *)(v37 + 16) = 0;
  *(void *)(v37 + 24) = 0;
  *(void *)uint64_t v37 = v16;
  *(void *)(v37 + 8) = 0;
  *(_DWORD *)(v37 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 1;
  *(_WORD *)(v37 + 48) = 0;
  ++*v29;
  ++*(_DWORD *)(v36 + 32);
  unint64_t v16 = *(void *)(v9 + 72);
  if (v16 <= v11)
  {
LABEL_41:
    uint64_t v46 = 0;
    long long v58 = 0u;
    long long v59 = 0u;
    long long v56 = 0u;
    long long v57 = 0u;
    long long v55 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v47 = 136315906;
    uint64_t v48 = "operator[]";
    __int16 v49 = 1024;
    int v50 = 789;
    __int16 v51 = 2048;
    unint64_t v52 = v11;
    __int16 v53 = 2048;
    unint64_t v54 = v16;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v21 = *(void *)(*(void *)(v9 + 88) + 48 * v11 + 40)
      + 56 * *(void *)(*(void *)(v9 + 88) + 48 * v11 + 24)
      - 56;
  if (v42 && (v43 & 1) != 0) {
    (*(void (**)(void))(*(void *)v42 + 40))();
  }
  return v21;
}

void re::RenderGraphResourceAllocationManager::allocateSmallBlockHeap(re::RenderGraphResourceAllocationManager *this, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a2 + 42))
  {
    unint64_t v5 = re::globalAllocators(this);
    uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 184, 8);
    *(_OWORD *)(v6 + 40) = 0u;
    *(_OWORD *)(v6 + 8) = 0u;
    *(_OWORD *)(v6 + 56) = 0u;
    *(_OWORD *)(v6 + 72) = 0u;
    *(_OWORD *)(v6 + 88) = 0u;
    *(_OWORD *)(v6 + 104) = 0u;
    *(_OWORD *)(v6 + 120) = 0u;
    *(_OWORD *)(v6 + 136) = 0u;
    *(_OWORD *)(v6 + 152) = 0u;
    *(_OWORD *)(v6 + 168) = 0u;
    *(_OWORD *)(v6 + 24) = 0u;
    *(void *)uint64_t v6 = &unk_26E70F938;
    *(_OWORD *)(v6 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0u;
    *(void *)(v6 + 48) = 0;
    *(_OWORD *)(v6 + 16) = 0u;
    re::DynamicString::setCapacity((void *)(v6 + 24), 0);
    *(void *)(v6 + 56) = 0;
    *(void *)(v6 + 64) = 0;
    *(_DWORD *)(v6 + 80) = 0;
    *(void *)(v6 + 72) = 0;
    *(_OWORD *)(v6 + 88) = 0u;
    *(_OWORD *)(v6 + 104) = 0u;
    *(_DWORD *)(v6 + 120) = 0;
    *(_OWORD *)(v6 + 144) = 0u;
    *(_OWORD *)(v6 + 160) = 0u;
    *(_OWORD *)(v6 + 128) = 0u;
    *(void *)(v6 + 176) = 0;
    *(_DWORD *)(v6 + 172) = 0x7FFFFFFF;
    id v13 = *(id *)(a2 + 48);
    v14[0] = "SmallBlock";
    v14[1] = 10;
    re::DynamicString::operator=((re::DynamicString *)(v6 + 24), (uint64_t)v14);
    uint64_t v7 = &v13;
    re::ObjCObject::operator=((id *)(v6 + 16), &v13);
    int v8 = 3;
  }
  else
  {
    uint64_t v10 = *(uint64_t (**)(void))(*(void *)re::globalAllocators(this)[2] + 32);
    if (!a3)
    {
      uint64_t v6 = v10();
      *(_OWORD *)(v6 + 56) = 0u;
      *(_OWORD *)(v6 + 8) = 0u;
      *(_OWORD *)(v6 + 72) = 0u;
      *(_OWORD *)(v6 + 88) = 0u;
      *(_OWORD *)(v6 + 104) = 0u;
      *(_OWORD *)(v6 + 120) = 0u;
      *(_OWORD *)(v6 + 136) = 0u;
      *(_OWORD *)(v6 + 152) = 0u;
      *(_OWORD *)(v6 + 168) = 0u;
      *(_OWORD *)(v6 + 184) = 0u;
      *(void *)(v6 + 200) = 0;
      *(void *)uint64_t v6 = &unk_26E70F8A8;
      *(_OWORD *)(v6 + 24) = 0u;
      *(_OWORD *)(v6 + 40) = 0u;
      *(void *)(v6 + 56) = 0;
      re::DynamicString::setCapacity((void *)(v6 + 32), 0);
      *(void *)(v6 + 64) = 0;
      *(void *)(v6 + 72) = 0;
      *(_DWORD *)(v6 + 88) = 0;
      *(void *)(v6 + 80) = 0;
      *(void *)(v6 + 96) = 0;
      *(void *)(v6 + 104) = 0;
      *(_DWORD *)(v6 + 112) = 0;
      *(void *)(v6 + 116) = 0x1FFFFFFFFLL;
      *(void *)(v6 + 136) = 0;
      *(void *)(v6 + 144) = 0;
      *(void *)(v6 + 128) = 0;
      *(_DWORD *)(v6 + 152) = 0;
      *(void *)(v6 + 160) = 0;
      *(void *)(v6 + 168) = 0;
      *(_DWORD *)(v6 + 176) = 0;
      *(void *)(v6 + 180) = 0x1FFFFFFFFLL;
      id v11 = *(id *)(a2 + 48);
      uint64_t v7 = &v11;
      MetalHeap::init(v6, "SmallBlock", &v11, 0x800000);
      goto LABEL_6;
    }
    uint64_t v6 = v10();
    *(_OWORD *)uint64_t v6 = 0u;
    *(_OWORD *)(v6 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0u;
    *(_OWORD *)(v6 + 48) = 0u;
    *(_OWORD *)(v6 + 64) = 0u;
    *(_OWORD *)(v6 + 80) = 0u;
    *(_OWORD *)(v6 + 96) = 0u;
    *(_OWORD *)(v6 + 112) = 0u;
    *(void *)(v6 + 128) = 0;
    *(_OWORD *)(v6 + 16) = 0u;
    DeviceHeap::DeviceHeap((DeviceHeap *)v6);
    id v12 = *(id *)(a2 + 48);
    re::DynamicString::operator=((re::DynamicString *)(v6 + 24), "SmallBlock");
    uint64_t v7 = &v12;
    re::ObjCObject::operator=((id *)(v6 + 16), &v12);
    int v8 = 1;
  }
  *(_DWORD *)(v6 + 8) = v8;
LABEL_6:

  *((void *)this + 5) = 0;
  *(void *)this = v6;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  *((_WORD *)this + 24) = 0;
}

void DeviceHeap::DeviceHeap(DeviceHeap *this)
{
  *((_DWORD *)this + 2) = 0;
  *(void *)this = &unk_26E70F818;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((void *)this + 6) = 0;
  re::DynamicString::setCapacity((void *)this + 3, 0);
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  *((_DWORD *)this + 20) = 0;
  *((void *)this + 9) = 0;
  *((void *)this + 16) = 0;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_DWORD *)this + 30) = 0;
}

re *re::internal::destroyPersistent<re::Heap>(re *result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = re::globalAllocators(result)[2];
    (**(void (***)(re *))v1)(v1);
    unint64_t v3 = *(uint64_t (**)(uint64_t, re *))(*(void *)v2 + 40);
    return (re *)v3(v2, v1);
  }
  return result;
}

uint64_t re::DynamicArray<re::RenderGraphResourceAllocationManager::HeapAndFences>::clear(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void *)(result + 16);
  *(void *)(result + 16) = 0;
  if (v2)
  {
    uint64_t v3 = 56 * v2;
    uint64_t v4 = *(void *)(result + 32) + 8;
    do
    {
      double result = re::DynamicArray<unsigned long>::deinit(v4);
      v4 += 56;
      v3 -= 56;
    }
    while (v3);
  }
  ++*(_DWORD *)(v1 + 24);
  return result;
}

void re::RenderGraphResourceAllocationManager::makeTexture(re::RenderGraphResourceAllocationManager *this@<X0>, const re::RenderGraphTargetDescription *a2@<X2>, const re::StringID *a3@<X3>, unint64_t a4@<X1>, unint64_t a5@<X8>)
{
  uint64_t v6 = a3;
  unint64_t v7 = (unint64_t)a2;
  unint64_t v8 = a4;
  uint64_t v87 = *MEMORY[0x263EF8340];
  if (!*((unsigned char *)this + 1136)) {
    goto LABEL_8;
  }
  unint64_t v11 = a4;
  unint64_t v12 = *((void *)this + 145);
  if (v12 <= a4)
  {
    *(void *)v79 = 0;
    long long v69 = 0u;
    long long v70 = 0u;
    long long v67 = 0u;
    long long v68 = 0u;
    *(_OWORD *)id v66 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(v86[0]) = 136315906;
    *(void *)((char *)v86 + 4) = "operator[]";
    WORD6(v86[0]) = 1024;
    *(_DWORD *)((char *)v86 + 14) = 789;
    WORD1(v86[1]) = 2048;
    *(void *)((char *)&v86[1] + 4) = v8;
    WORD6(v86[1]) = 2048;
    *(void *)((char *)&v86[1] + 14) = v12;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_60:
    *(void *)v79 = 0;
    long long v69 = 0u;
    long long v70 = 0u;
    long long v67 = 0u;
    long long v68 = 0u;
    *(_OWORD *)id v66 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(v86[0]) = 136315906;
    *(void *)((char *)v86 + 4) = "operator[]";
    WORD6(v86[0]) = 1024;
    *(_DWORD *)((char *)v86 + 14) = 789;
    WORD1(v86[1]) = 2048;
    *(void *)((char *)&v86[1] + 4) = v11;
    WORD6(v86[1]) = 2048;
    *(void *)((char *)&v86[1] + 14) = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_61:
    v65[1] = 0;
    memset(v86, 0, sizeof(v86));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v79 = 136315906;
    *(void *)&v79[4] = "operator[]";
    __int16 v80 = 1024;
    int v81 = 789;
    __int16 v82 = 2048;
    unint64_t v83 = v5;
    __int16 v84 = 2048;
    unint64_t v85 = a5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_62:
    *(void *)v79 = 0;
    long long v69 = 0u;
    long long v70 = 0u;
    long long v67 = 0u;
    long long v68 = 0u;
    *(_OWORD *)id v66 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(v86[0]) = 136315906;
    *(void *)((char *)v86 + 4) = "operator[]";
    WORD6(v86[0]) = 1024;
    *(_DWORD *)((char *)v86 + 14) = 789;
    WORD1(v86[1]) = 2048;
    *(void *)((char *)&v86[1] + 4) = v5;
    WORD6(v86[1]) = 2048;
    *(void *)((char *)&v86[1] + 14) = a5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_63;
  }
  uint64_t v13 = *((void *)this + 147);
  if (*(void *)(v13 + 184 * a4 + 168))
  {
    uint64_t v14 = v13 + 184 * a4;
    uint64_t v16 = *(void *)(v14 + 152);
    unint64_t v15 = (void *)(v14 + 152);
    if (v16 == *(void *)a3 >> 1)
    {
      unint64_t v8 = *((void *)this + 134);
      if (v8 <= a4)
      {
LABEL_65:
        *(void *)v79 = 0;
        long long v69 = 0u;
        long long v70 = 0u;
        long long v67 = 0u;
        long long v68 = 0u;
        *(_OWORD *)id v66 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        LODWORD(v86[0]) = 136315906;
        *(void *)((char *)v86 + 4) = "operator[]";
        WORD6(v86[0]) = 1024;
        *(_DWORD *)((char *)v86 + 14) = 789;
        WORD1(v86[1]) = 2048;
        *(void *)((char *)&v86[1] + 4) = v11;
        WORD6(v86[1]) = 2048;
        *(void *)((char *)&v86[1] + 14) = v8;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_66;
      }
      unint64_t v8 = v13 + 184 * a4;
      uint64_t v17 = *((void *)this + 136) + 184 * a4;
      *(void *)uint64_t v17 = *(void *)v8;
      re::DynamicOverflowArray<re::RenderGraphResourceAllocationManager::FenceIndex,4ul>::operator=(v17 + 8, (uint64_t *)(v8 + 8));
      re::DynamicOverflowArray<re::RenderGraphResourceAllocationManager::FenceIndex,4ul>::operator=(v17 + 80, (uint64_t *)(v8 + 80));
      *(void *)(v17 + 152) = *v15;
      long long v18 = *(_OWORD *)(v8 + 160);
      *(void *)(v17 + 176) = *(void *)(v8 + 176);
      *(_OWORD *)(v17 + 160) = v18;
      uint64_t v6 = (const re::StringID *)*((void *)this + 134);
      if ((unint64_t)v6 <= v11)
      {
LABEL_66:
        *(void *)v79 = 0;
        long long v69 = 0u;
        long long v70 = 0u;
        long long v67 = 0u;
        long long v68 = 0u;
        *(_OWORD *)id v66 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        LODWORD(v86[0]) = 136315906;
        *(void *)((char *)v86 + 4) = "operator[]";
        WORD6(v86[0]) = 1024;
        *(_DWORD *)((char *)v86 + 14) = 789;
        WORD1(v86[1]) = 2048;
        *(void *)((char *)&v86[1] + 4) = v11;
        WORD6(v86[1]) = 2048;
        *(void *)((char *)&v86[1] + 14) = v6;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_67;
      }
      *(unsigned char *)(*(void *)(*((void *)this + 136) + 184 * v11 + 168) + 48) = 1;
      goto LABEL_51;
    }
    uint64_t v19 = 1;
  }
  else
  {
LABEL_8:
    uint64_t v19 = 0;
  }
  textureDescFromTargetDesc((uint64_t)a2, v65);
  unint64_t v5 = 0;
  int v20 = *(_DWORD *)(v7 + 68) & 0x70;
  if (*((unsigned char *)this + 42))
  {
    uint64_t v21 = 0;
  }
  else
  {
    uint64_t v21 = 0;
    if (v20 != 48)
    {
      uint64_t v21 = (char *)objc_msgSend(*((id *)this + 6), sel_heapTextureSizeAndAlignWithDescriptor_, v65[0]);
      unint64_t v5 = v22;
    }
  }
  char v62 = (void *)a5;
  if (v20 == 48)
  {
    HeapFor = (unint64_t *)((char *)this + 208);
  }
  else
  {
    HeapFor = re::RenderGraphResourceAllocationManager::findHeapFor(this, (unint64_t)v21, v5, *(void *)(v7 + 88));
    if (!HeapFor)
    {
LABEL_46:
      int v50 = 0;
      a5 = (unint64_t)v62;
      *char v62 = 0;
      goto LABEL_47;
    }
  }
  BOOL v61 = v20 == 48;
  BOOL v24 = v20 == 48;
  unint64_t v11 = *HeapFor;
  id v25 = v65[0];
  uint64_t v63 = *(void *)v6 >> 1;
  id v64 = v25;
  uint64_t v26 = (void *)(*(uint64_t (**)(unint64_t, id *, BOOL, uint64_t *))(*(void *)v11 + 24))(v11, &v64, v24, &v63);
  uint64_t v63 = 0;
  if (v64)
  {

    id v64 = 0;
  }
  if (v26 == (void *)-1) {
    goto LABEL_46;
  }
  *((unsigned char *)HeapFor + 48) = 1;
  unint64_t v27 = (unint64_t)&v21[v5];
  *((void *)this + 215) += v27;
  unint64_t v28 = (char *)(*((void *)this + 213) + v27);
  *((void *)this + 213) = v28;
  if ((unint64_t)v28 > *((void *)this + 214)) {
    *((void *)this + 214) = v28;
  }
  if (v27 > *((void *)this + 216)) {
    *((void *)this + 216) = v27;
  }
  ++*((void *)this + 219);
  uint64_t v29 = *(void *)v6 >> 1;
  v66[1] = 0;
  *(void *)&long long v67 = 0;
  v66[0] = v26;
  DWORD2(v67) = 1;
  long long v68 = 0uLL;
  uint64_t v71 = 0;
  uint64_t v72 = 0;
  int v73 = 1;
  uint64_t v74 = 0;
  uint64_t v75 = 0;
  uint64_t v76 = v29;
  LOBYTE(v77) = 0;
  *((void *)&v77 + 1) = HeapFor;
  uint64_t v78 = 0;
  unint64_t v5 = v8;
  a5 = *((void *)this + 134);
  if (a5 <= v8) {
    goto LABEL_61;
  }
  unsigned int v59 = v8;
  unint64_t v8 = v19;
  uint64_t v60 = v6;
  uint64_t v6 = (const re::StringID *)(*((void *)this + 136) + 184 * v5);
  *(void *)uint64_t v6 = v26;
  re::DynamicOverflowArray<re::RenderGraphResourceAllocationManager::FenceIndex,4ul>::operator=((uint64_t)v6 + 8, (uint64_t)&v66[1]);
  re::DynamicOverflowArray<re::RenderGraphResourceAllocationManager::FenceIndex,4ul>::operator=((uint64_t)v6 + 80, (uint64_t)&v71);
  *((void *)v6 + 19) = v76;
  long long v30 = v77;
  *((void *)v6 + 22) = v78;
  *((_OWORD *)v6 + 10) = v30;
  uint64_t v76 = 0;
  if (v71)
  {
    int v31 = v73;
    if ((v73 & 1) == 0)
    {
      (*(void (**)(void))(*(void *)v71 + 40))();
      int v31 = v73;
    }
    uint64_t v71 = 0;
    uint64_t v72 = 0;
    int v73 = (v31 | 1) + 2;
  }
  if (v66[1] && (BYTE8(v67) & 1) == 0) {
    (*(void (**)(void))(*(void *)v66[1] + 40))();
  }
  a5 = *((void *)this + 134);
  unint64_t v32 = v60;
  if (a5 <= v5) {
    goto LABEL_62;
  }
  uint64_t v33 = *((void *)this + 136) + 184 * v5;
  *(unsigned char *)(v33 + 160) = v61;
  *(void *)(v33 + 176) = v27;
  if (v8)
  {
    a5 = *((void *)this + 145);
    if (a5 <= v5)
    {
LABEL_63:
      *(void *)v79 = 0;
      long long v69 = 0u;
      long long v70 = 0u;
      long long v67 = 0u;
      long long v68 = 0u;
      *(_OWORD *)id v66 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      LODWORD(v86[0]) = 136315906;
      *(void *)((char *)v86 + 4) = "operator[]";
      WORD6(v86[0]) = 1024;
      *(_DWORD *)((char *)v86 + 14) = 789;
      WORD1(v86[1]) = 2048;
      *(void *)((char *)&v86[1] + 4) = v5;
      WORD6(v86[1]) = 2048;
      *(void *)((char *)&v86[1] + 14) = a5;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_64;
    }
    uint64_t v34 = *((void *)this + 147) + 184 * v5;
    (*(void (**)(void, void))(***(void ***)(v34 + 168) + 32))(**(void **)(v34 + 168), *(void *)v34);
    a5 = *((void *)this + 155);
    if (a5 <= v5)
    {
LABEL_64:
      *(void *)v79 = 0;
      long long v69 = 0u;
      long long v70 = 0u;
      long long v67 = 0u;
      long long v68 = 0u;
      *(_OWORD *)id v66 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      LODWORD(v86[0]) = 136315906;
      *(void *)((char *)v86 + 4) = "operator[]";
      WORD6(v86[0]) = 1024;
      *(_DWORD *)((char *)v86 + 14) = 789;
      WORD1(v86[1]) = 2048;
      *(void *)((char *)&v86[1] + 4) = v5;
      WORD6(v86[1]) = 2048;
      *(void *)((char *)&v86[1] + 14) = a5;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_65;
    }
    uint64_t v35 = *((void *)this + 157) + 112 * v5;
    *(void *)uint64_t v35 = 3;
    *(_DWORD *)(v35 + 8) = 2;
    *(void *)(v35 + 12) = -1;
    *(void *)(v35 + 20) = -1;
    *(void *)(v35 + 28) = -1;
    *(unsigned char *)(v35 + 36) = 0;
    __asm { FMOV            V0.2S, #1.0 }
    *(void *)(v35 + 40) = _D0;
    *(_OWORD *)(v35 + 48) = xmmword_2343AEB90;
    *(_OWORD *)(v35 + 64) = xmmword_2343AEBA0;
    *(_DWORD *)(v35 + 80) = -1;
    *(_OWORD *)(v35 + 88) = xmmword_234378E20;
    *(unsigned char *)(v35 + 104) = 0;
  }
  unint64_t v8 = v59;
  if (*((unsigned char *)this + 1136) && *(_DWORD *)(v11 + 8) == 2)
  {
    a5 = *((void *)this + 134);
    if (a5 <= v5)
    {
LABEL_67:
      *(void *)v79 = 0;
      long long v69 = 0u;
      long long v70 = 0u;
      long long v67 = 0u;
      long long v68 = 0u;
      *(_OWORD *)id v66 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      LODWORD(v86[0]) = 136315906;
      *(void *)((char *)v86 + 4) = "operator[]";
      WORD6(v86[0]) = 1024;
      *(_DWORD *)((char *)v86 + 14) = 789;
      WORD1(v86[1]) = 2048;
      *(void *)((char *)&v86[1] + 4) = v5;
      WORD6(v86[1]) = 2048;
      *(void *)((char *)&v86[1] + 14) = a5;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_68;
    }
    a5 = *((void *)this + 145);
    if (a5 <= v5)
    {
LABEL_68:
      *(void *)v79 = 0;
      long long v69 = 0u;
      long long v70 = 0u;
      long long v67 = 0u;
      long long v68 = 0u;
      *(_OWORD *)id v66 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      LODWORD(v86[0]) = 136315906;
      *(void *)((char *)v86 + 4) = "operator[]";
      WORD6(v86[0]) = 1024;
      *(_DWORD *)((char *)v86 + 14) = 789;
      WORD1(v86[1]) = 2048;
      *(void *)((char *)&v86[1] + 4) = v5;
      WORD6(v86[1]) = 2048;
      *(void *)((char *)&v86[1] + 14) = a5;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_69:
      *(void *)v79 = 0;
      long long v69 = 0u;
      long long v70 = 0u;
      long long v67 = 0u;
      long long v68 = 0u;
      *(_OWORD *)id v66 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      LODWORD(v86[0]) = 136315906;
      *(void *)((char *)v86 + 4) = "operator[]";
      WORD6(v86[0]) = 1024;
      *(_DWORD *)((char *)v86 + 14) = 789;
      WORD1(v86[1]) = 2048;
      *(void *)((char *)&v86[1] + 4) = v5;
      WORD6(v86[1]) = 2048;
      *(void *)((char *)&v86[1] + 14) = a5;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v41 = *((void *)this + 136) + 184 * v5;
    uint64_t v42 = *((void *)this + 147) + 184 * v5;
    *(void *)uint64_t v42 = *(void *)v41;
    re::DynamicOverflowArray<re::RenderGraphResourceAllocationManager::FenceIndex,4ul>::operator=(v42 + 8, (uint64_t *)(v41 + 8));
    re::DynamicOverflowArray<re::RenderGraphResourceAllocationManager::FenceIndex,4ul>::operator=(v42 + 80, (uint64_t *)(v41 + 80));
    *(void *)(v42 + 152) = *(void *)(v41 + 152);
    long long v43 = *(_OWORD *)(v41 + 160);
    *(void *)(v42 + 176) = *(void *)(v41 + 176);
    *(_OWORD *)(v42 + 160) = v43;
    a5 = *((void *)this + 155);
    if (a5 <= v5) {
      goto LABEL_69;
    }
    long long v44 = (_OWORD *)(*((void *)this + 157) + 112 * v5);
    long long v45 = *(_OWORD *)v7;
    long long v46 = *(_OWORD *)(v7 + 32);
    v44[1] = *(_OWORD *)(v7 + 16);
    v44[2] = v46;
    *long long v44 = v45;
    long long v47 = *(_OWORD *)(v7 + 48);
    long long v48 = *(_OWORD *)(v7 + 64);
    long long v49 = *(_OWORD *)(v7 + 80);
    *(_OWORD *)((char *)v44 + 89) = *(_OWORD *)(v7 + 89);
    v44[4] = v48;
    v44[5] = v49;
    v44[3] = v47;
    unint64_t v32 = v60;
  }
  (*(void (**)(id *__return_ptr, unint64_t, void *))(*(void *)v11 + 96))(v66, v11, v26);
  unint64_t v7 = (unint64_t)v66[0];
  objc_msgSend(v66[0], sel_setLabel_, objc_msgSend(NSString, sel_stringWithCString_encoding_, *((void *)v32 + 1), 4));
  if (v66[0]) {

  }
  int v50 = 1;
  a5 = (unint64_t)v62;
LABEL_47:
  if (v65[0]) {

  }
  if (v50)
  {
    uint64_t v6 = (const re::StringID *)*((void *)this + 134);
    unint64_t v11 = v8;
LABEL_51:
    if ((unint64_t)v6 > v11)
    {
      uint64_t v51 = *((void *)this + 136) + 184 * v11;
      unint64_t v52 = *(uint64_t **)(v51 + 168);
      uint64_t v53 = *v52;
      uint64_t v54 = *(void *)v51;
      if (*(unsigned char *)(v51 + 160))
      {
        ++*((void *)this + 217);
      }
      else if (v52[3])
      {
        uint64_t v55 = 0;
        unint64_t v56 = 0;
        long long v57 = (re::RenderGraphResourceAllocationManager *)((char *)this + 1328);
        do
        {
          uint64_t v58 = v52[5] + v55;
          unint64_t v7 = v7 & 0xFFFFFFFF00000000 | *(unsigned int *)(v58 + 8);
          re::RenderGraphResourceAllocationManager::SetupData::addUniqueFence(v57, *(void *)v58, v7);
          ++v56;
          v55 += 12;
        }
        while (v52[3] > v56);
      }
      (*(void (**)(uint64_t, uint64_t))(*(void *)v53 + 96))(v53, v54);
      return;
    }
    goto LABEL_60;
  }
}

void *re::RenderGraphResourceAllocationManager::findHeapFor(re::RenderGraphResourceAllocationManager *a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v8 = (void *)re::RenderGraphResourceAllocationManager::heapGroupHierarchyFor(a1, a4);
  uint64_t v9 = v8;
  unint64_t v10 = a2 + a3;
  uint64_t v11 = *((void *)a1 + 2);
  if (v11)
  {
    unint64_t v12 = 0;
    while (*(void *)(*((void *)a1 + 4) + 8 * v12) < v10)
    {
      if (v11 == ++v12) {
        goto LABEL_5;
      }
    }
  }
  else
  {
LABEL_5:
    unint64_t v12 = v11 - 1;
  }
  unint64_t v13 = v8[9];
  if (v12 >= v13) {
    return 0;
  }
  if (a2 >> 21) {
    goto LABEL_10;
  }
  if ((*(uint64_t (**)(void))(*(void *)*v8 + 112))() >= a2) {
    return v9;
  }
  unint64_t v13 = v9[9];
LABEL_10:
  if (v13 <= v12)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_31:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_32;
  }
  unint64_t v34 = a4;
  uint64_t v14 = v9[11];
  uint64_t v15 = v14 + 48 * v12;
  uint64_t v17 = *(void *)(v15 + 24);
  uint64_t v16 = (unint64_t *)(v15 + 24);
  if (v17)
  {
    uint64_t v18 = 0;
    unint64_t v19 = 0;
    int v20 = (void *)(v14 + 48 * v12 + 40);
    while (1)
    {
      unint64_t v21 = (*(uint64_t (**)(void, uint64_t))(**(void **)(*v20 + v18) + 112))(*(void *)(*v20 + v18), a3);
      unint64_t v22 = *v16;
      if (v21 >= a2) {
        break;
      }
      ++v19;
      v18 += 56;
      if (v22 <= v19) {
        goto LABEL_15;
      }
    }
    if (v22 > v19) {
      return (void *)(*v20 + v18);
    }
    goto LABEL_31;
  }
LABEL_15:
  if (re::RenderGraphResourceAllocationManager::indexToSize(a1, v12) < 2 * v10)
  {
    unint64_t v23 = v12 + 1;
    if (v12 + 1 < v9[9])
    {
      uint64_t v24 = v9[11];
      uint64_t v25 = v24 + 48 * v23;
      uint64_t v27 = *(void *)(v25 + 24);
      uint64_t v26 = (unint64_t *)(v25 + 24);
      if (v27)
      {
        uint64_t v28 = 0;
        unint64_t v29 = 0;
        long long v30 = (void *)(v24 + 48 * v23 + 40);
        while (1)
        {
          unint64_t v31 = (*(uint64_t (**)(void, uint64_t))(**(void **)(*v30 + v28) + 112))(*(void *)(*v30 + v28), a3);
          unint64_t v32 = *v26;
          if (v31 >= a2) {
            break;
          }
          ++v29;
          v28 += 56;
          if (v32 <= v29) {
            goto LABEL_21;
          }
        }
        if (v32 > v29) {
          return (void *)(*v30 + v28);
        }
LABEL_32:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
    }
  }
LABEL_21:
  return (void *)re::RenderGraphResourceAllocationManager::allocateNewHeap((uint64_t)a1, a2, a3, v34);
}

_anonymous_namespace_ *re::RenderGraphResourceAllocationManager::SetupData::addUniqueFence(_anonymous_namespace_ *result, uint64_t a2, int a3)
{
  uint64_t v5 = a2;
  int v6 = a3;
  if (a2 != -1)
  {
    uint64_t v3 = *((void *)result + 32);
    if (v3)
    {
      for (uint64_t i = (_DWORD *)(*((void *)result + 34) + 8); *(i - 2) != a2 || *i > a3; i += 3)
      {
        if (!--v3) {
          return re::DynamicArray<re::RenderGraphResourceAllocationManager::FenceIndex>::add((_anonymous_namespace_ *)((char *)result + 240), &v5);
        }
      }
    }
    else
    {
      return re::DynamicArray<re::RenderGraphResourceAllocationManager::FenceIndex>::add((_anonymous_namespace_ *)((char *)result + 240), &v5);
    }
  }
  return result;
}

_anonymous_namespace_ *re::RenderGraphResourceAllocationManager::releaseTexture(_anonymous_namespace_ *this, unsigned int a2, const char *a3)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  unint64_t v3 = a2;
  if (*((void *)this + 134) <= (unint64_t)a2)
  {
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v18 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v4 = this;
  uint64_t v5 = *((void *)this + 136);
  if (*(void *)(v5 + 184 * a2) == -1) {
    return this;
  }
  uint64_t v6 = v5 + 184 * a2;
  unint64_t v7 = *(uint64_t ***)(v6 + 168);
  unint64_t v8 = *v7;
  *((void *)v4 + 213) -= *(void *)(v6 + 176);
  uint64_t v9 = *v8;
  if (*((unsigned char *)v4 + 1136)) {
    this = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(v9 + 40))();
  }
  else {
    this = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(v9 + 32))();
  }
  if (*((void *)v4 + 134) <= v3)
  {
LABEL_16:
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v18 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v10 = *((void *)v4 + 136) + 184 * v3;
  *(void *)uint64_t v10 = -1;
  *(void *)(v10 + 16) = 0;
  *(_DWORD *)(v10 + 24) += 2;
  *(void *)(v10 + 88) = 0;
  *(_DWORD *)(v10 + 96) += 2;
  *(void *)(v10 + 152) = 0;
  *(unsigned char *)(v10 + 160) = 0;
  *(void *)(v10 + 168) = 0;
  uint64_t v11 = *((void *)v4 + 203);
  if (v11)
  {
    uint64_t v12 = *((void *)v4 + 205);
    uint64_t v13 = 12 * v11;
    do
    {
      *(void *)&long long v18 = *(void *)v12;
      DWORD2(v18) = *(_DWORD *)(v12 + 8);
      this = re::DynamicArray<re::RenderGraphResourceAllocationManager::FenceIndex>::add((_anonymous_namespace_ *)(v7 + 1), (uint64_t *)&v18);
      v12 += 12;
      v13 -= 12;
    }
    while (v13);
  }
  if (!*((unsigned char *)v4 + 1649))
  {
    uint64_t v14 = *((void *)v4 + 198);
    if (v14)
    {
      uint64_t v15 = *((void *)v4 + 200);
      uint64_t v16 = (_anonymous_namespace_ *)(v7 + 1);
      uint64_t v17 = 12 * v14;
      do
      {
        *(void *)&long long v18 = *(void *)v15;
        DWORD2(v18) = *(_DWORD *)(v15 + 8);
        this = re::DynamicArray<re::RenderGraphResourceAllocationManager::FenceIndex>::add(v16, (uint64_t *)&v18);
        v15 += 12;
        v17 -= 12;
      }
      while (v17);
    }
  }
  return this;
}

_anonymous_namespace_ *re::DynamicArray<re::RenderGraphResourceAllocationManager::FenceIndex>::add(_anonymous_namespace_ *result, uint64_t *a2)
{
  unint64_t v3 = result;
  unint64_t v4 = *((void *)result + 1);
  unint64_t v5 = *((void *)result + 2);
  if (v5 >= v4)
  {
    unint64_t v6 = v5 + 1;
    if (v4 < v5 + 1)
    {
      if (*(void *)result)
      {
        uint64_t v7 = 2 * v4;
        BOOL v8 = v4 == 0;
        unint64_t v9 = 8;
        if (!v8) {
          unint64_t v9 = v7;
        }
        if (v9 <= v6) {
          unint64_t v10 = v6;
        }
        else {
          unint64_t v10 = v9;
        }
        double result = (_anonymous_namespace_ *)re::DynamicArray<re::MeshLodLevelInfo>::setCapacity(result, v10);
      }
      else
      {
        double result = (_anonymous_namespace_ *)re::DynamicArray<re::MeshLodLevelInfo>::setCapacity(v3, v6);
        ++*((_DWORD *)v3 + 6);
      }
    }
    unint64_t v5 = *((void *)v3 + 2);
  }
  uint64_t v11 = *((void *)v3 + 4) + 12 * v5;
  uint64_t v12 = *a2;
  *(_DWORD *)(v11 + 8) = *((_DWORD *)a2 + 2);
  *(void *)uint64_t v11 = v12;
  ++*((void *)v3 + 2);
  ++*((_DWORD *)v3 + 6);
  return result;
}

char *re::RenderGraphResourceAllocationManager::makeBuffer@<X0>(re::RenderGraphResourceAllocationManager *this@<X0>, const re::RenderGraphBufferDescription *a2@<X2>, const re::StringID *a3@<X3>, unint64_t a4@<X1>, void *a5@<X8>)
{
  unint64_t v6 = a3;
  unint64_t v8 = a4;
  uint64_t v79 = *MEMORY[0x263EF8340];
  if (!*((unsigned char *)this + 1136)) {
    goto LABEL_8;
  }
  unint64_t v11 = a4;
  unint64_t v12 = *((void *)this + 150);
  if (v12 <= a4)
  {
    *(void *)uint64_t v71 = 0;
    long long v61 = 0u;
    long long v62 = 0u;
    long long v59 = 0u;
    long long v60 = 0u;
    *(_OWORD *)uint64_t v58 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(v78[0]) = 136315906;
    *(void *)((char *)v78 + 4) = "operator[]";
    WORD6(v78[0]) = 1024;
    *(_DWORD *)((char *)v78 + 14) = 789;
    WORD1(v78[1]) = 2048;
    *(void *)((char *)&v78[1] + 4) = v8;
    WORD6(v78[1]) = 2048;
    *(void *)((char *)&v78[1] + 14) = v12;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_49;
  }
  uint64_t v13 = *((void *)this + 152);
  if (*(void *)(v13 + 184 * a4 + 168))
  {
    unint64_t v56 = a5;
    uint64_t v14 = v13 + 184 * a4;
    uint64_t v16 = *(void *)(v14 + 152);
    uint64_t v15 = (void *)(v14 + 152);
    if (v16 == *(void *)a3 >> 1)
    {
      unint64_t v6 = (const re::StringID *)*((void *)this + 139);
      if ((unint64_t)v6 <= a4)
      {
LABEL_54:
        *(void *)uint64_t v71 = 0;
        long long v61 = 0u;
        long long v62 = 0u;
        long long v59 = 0u;
        long long v60 = 0u;
        *(_OWORD *)uint64_t v58 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        LODWORD(v78[0]) = 136315906;
        *(void *)((char *)v78 + 4) = "operator[]";
        WORD6(v78[0]) = 1024;
        *(_DWORD *)((char *)v78 + 14) = 789;
        WORD1(v78[1]) = 2048;
        *(void *)((char *)&v78[1] + 4) = v11;
        WORD6(v78[1]) = 2048;
        *(void *)((char *)&v78[1] + 14) = v6;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_55;
      }
      uint64_t v17 = v13 + 184 * a4;
      uint64_t v18 = *((void *)this + 141) + 184 * a4;
      *(void *)uint64_t v18 = *(void *)v17;
      re::DynamicOverflowArray<re::RenderGraphResourceAllocationManager::FenceIndex,4ul>::operator=(v18 + 8, (uint64_t *)(v17 + 8));
      re::DynamicOverflowArray<re::RenderGraphResourceAllocationManager::FenceIndex,4ul>::operator=(v18 + 80, (uint64_t *)(v17 + 80));
      *(void *)(v18 + 152) = *v15;
      long long v19 = *(_OWORD *)(v17 + 160);
      *(void *)(v18 + 176) = *(void *)(v17 + 176);
      *(_OWORD *)(v18 + 160) = v19;
      unint64_t v6 = (const re::StringID *)*((void *)this + 139);
      if ((unint64_t)v6 <= v8)
      {
LABEL_55:
        *(void *)uint64_t v71 = 0;
        long long v61 = 0u;
        long long v62 = 0u;
        long long v59 = 0u;
        long long v60 = 0u;
        *(_OWORD *)uint64_t v58 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        LODWORD(v78[0]) = 136315906;
        *(void *)((char *)v78 + 4) = "operator[]";
        WORD6(v78[0]) = 1024;
        *(_DWORD *)((char *)v78 + 14) = 789;
        WORD1(v78[1]) = 2048;
        *(void *)((char *)&v78[1] + 4) = v11;
        WORD6(v78[1]) = 2048;
        *(void *)((char *)&v78[1] + 14) = v6;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_56;
      }
      *(unsigned char *)(*(void *)(*((void *)this + 141) + 184 * v11 + 168) + 48) = 1;
      goto LABEL_39;
    }
    int v20 = 1;
    a5 = v56;
  }
  else
  {
LABEL_8:
    int v20 = 0;
  }
  int v21 = *((_DWORD *)a2 + 6) & 0x70;
  unint64_t v23 = objc_msgSend(*((id *)this + 6), "heapBufferSizeAndAlignWithLength:options:", *((void *)a2 + 1));
  uint64_t v24 = v22;
  BOOL v55 = v21 == 48;
  if (v21 == 48)
  {
    uint64_t v25 = (char *)this + 208;
  }
  else
  {
    double result = (char *)re::RenderGraphResourceAllocationManager::findHeapFor(this, v23, v22, *((void *)a2 + 4));
    uint64_t v25 = result;
    if (!result) {
      goto LABEL_42;
    }
  }
  int v54 = v20;
  BOOL v27 = v21 == 48;
  unint64_t v12 = *(void *)v25;
  uint64_t v28 = *((void *)a2 + 1);
  uint64_t v29 = *((unsigned int *)a2 + 6);
  v57[0] = *(void *)v6 >> 1;
  double result = (char *)(*(uint64_t (**)(unint64_t, uint64_t, uint64_t, BOOL, void *))(*(void *)v12 + 48))(v12, v28, v29, v27, v57);
  v57[0] = 0;
  if (result == (char *)-1)
  {
LABEL_42:
    *a5 = 0;
    return result;
  }
  long long v30 = result;
  v25[48] = 1;
  unint64_t v31 = v24 + v23;
  *((void *)this + 220) += v31;
  unint64_t v32 = *((void *)this + 213) + v31;
  *((void *)this + 213) = v32;
  if (v32 > *((void *)this + 214)) {
    *((void *)this + 214) = v32;
  }
  ++*((void *)this + 221);
  uint64_t v33 = *(void *)v6 >> 1;
  v58[1] = 0;
  *(void *)&long long v59 = 0;
  v58[0] = result;
  DWORD2(v59) = 1;
  long long v60 = 0uLL;
  uint64_t v63 = 0;
  uint64_t v64 = 0;
  int v65 = 1;
  uint64_t v66 = 0;
  uint64_t v67 = 0;
  uint64_t v68 = v33;
  LOBYTE(v69) = 0;
  *((void *)&v69 + 1) = v25;
  uint64_t v70 = 0;
  unint64_t v11 = v8;
  unint64_t v5 = (long long *)*((void *)this + 139);
  if ((unint64_t)v5 <= v8) {
    goto LABEL_50;
  }
  unint64_t v5 = &v69;
  uint64_t v34 = *((void *)this + 141) + 184 * v8;
  *(void *)uint64_t v34 = result;
  re::DynamicOverflowArray<re::RenderGraphResourceAllocationManager::FenceIndex,4ul>::operator=(v34 + 8, (uint64_t)&v58[1]);
  re::DynamicOverflowArray<re::RenderGraphResourceAllocationManager::FenceIndex,4ul>::operator=(v34 + 80, (uint64_t)&v63);
  *(void *)(v34 + 152) = v68;
  long long v35 = v69;
  *(void *)(v34 + 176) = v70;
  *(_OWORD *)(v34 + 160) = v35;
  uint64_t v68 = 0;
  if (v63)
  {
    int v36 = v65;
    if ((v65 & 1) == 0)
    {
      (*(void (**)(void))(*(void *)v63 + 40))();
      int v36 = v65;
    }
    uint64_t v63 = 0;
    uint64_t v64 = 0;
    int v65 = (v36 | 1) + 2;
  }
  if (v58[1] && (BYTE8(v59) & 1) == 0) {
    (*(void (**)(void))(*(void *)v58[1] + 40))();
  }
  unint64_t v8 = *((void *)this + 139);
  if (v8 <= v11) {
    goto LABEL_51;
  }
  uint64_t v37 = *((void *)this + 141) + 184 * v11;
  *(unsigned char *)(v37 + 160) = v55;
  *(void *)(v37 + 176) = v31;
  if (v54)
  {
    unint64_t v8 = *((void *)this + 150);
    if (v8 <= v11)
    {
LABEL_52:
      *(void *)uint64_t v71 = 0;
      long long v61 = 0u;
      long long v62 = 0u;
      long long v59 = 0u;
      long long v60 = 0u;
      *(_OWORD *)uint64_t v58 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      LODWORD(v78[0]) = 136315906;
      *(void *)((char *)v78 + 4) = "operator[]";
      WORD6(v78[0]) = 1024;
      *(_DWORD *)((char *)v78 + 14) = 789;
      WORD1(v78[1]) = 2048;
      *(void *)((char *)&v78[1] + 4) = v11;
      WORD6(v78[1]) = 2048;
      *(void *)((char *)&v78[1] + 14) = v8;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_53;
    }
    uint64_t v38 = *((void *)this + 152) + 184 * v11;
    (*(void (**)(void, void))(***(void ***)(v38 + 168) + 56))(**(void **)(v38 + 168), *(void *)v38);
    unint64_t v8 = *((void *)this + 160);
    if (v8 <= v11)
    {
LABEL_53:
      *(void *)uint64_t v71 = 0;
      long long v61 = 0u;
      long long v62 = 0u;
      long long v59 = 0u;
      long long v60 = 0u;
      *(_OWORD *)uint64_t v58 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      LODWORD(v78[0]) = 136315906;
      *(void *)((char *)v78 + 4) = "operator[]";
      WORD6(v78[0]) = 1024;
      *(_DWORD *)((char *)v78 + 14) = 789;
      WORD1(v78[1]) = 2048;
      *(void *)((char *)&v78[1] + 4) = v11;
      WORD6(v78[1]) = 2048;
      *(void *)((char *)&v78[1] + 14) = v8;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_54;
    }
    uint64_t v39 = *((void *)this + 162) + 48 * v11;
    *(_DWORD *)uint64_t v39 = 0;
    *(void *)(v39 + 8) = -1;
    *(unsigned char *)(v39 + 16) = 0;
    *(_DWORD *)(v39 + 20) = 1065353216;
    *(void *)(v39 + 24) = 0xFFFFFFFF00000020;
    *(_OWORD *)(v39 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = xmmword_234378E20;
  }
  if (*((unsigned char *)this + 1136) && *(_DWORD *)(v12 + 8) == 2)
  {
    unint64_t v8 = *((void *)this + 139);
    if (v8 <= v11)
    {
LABEL_56:
      *(void *)uint64_t v71 = 0;
      long long v61 = 0u;
      long long v62 = 0u;
      long long v59 = 0u;
      long long v60 = 0u;
      *(_OWORD *)uint64_t v58 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      LODWORD(v78[0]) = 136315906;
      *(void *)((char *)v78 + 4) = "operator[]";
      WORD6(v78[0]) = 1024;
      *(_DWORD *)((char *)v78 + 14) = 789;
      WORD1(v78[1]) = 2048;
      *(void *)((char *)&v78[1] + 4) = v11;
      WORD6(v78[1]) = 2048;
      *(void *)((char *)&v78[1] + 14) = v8;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_57;
    }
    unint64_t v8 = *((void *)this + 150);
    if (v8 <= v11)
    {
LABEL_57:
      *(void *)uint64_t v71 = 0;
      long long v61 = 0u;
      long long v62 = 0u;
      long long v59 = 0u;
      long long v60 = 0u;
      *(_OWORD *)uint64_t v58 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      LODWORD(v78[0]) = 136315906;
      *(void *)((char *)v78 + 4) = "operator[]";
      WORD6(v78[0]) = 1024;
      *(_DWORD *)((char *)v78 + 14) = 789;
      WORD1(v78[1]) = 2048;
      *(void *)((char *)&v78[1] + 4) = v11;
      WORD6(v78[1]) = 2048;
      *(void *)((char *)&v78[1] + 14) = v8;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_58:
      *(void *)uint64_t v71 = 0;
      long long v61 = 0u;
      long long v62 = 0u;
      long long v59 = 0u;
      long long v60 = 0u;
      *(_OWORD *)uint64_t v58 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      LODWORD(v78[0]) = 136315906;
      *(void *)((char *)v78 + 4) = "operator[]";
      WORD6(v78[0]) = 1024;
      *(_DWORD *)((char *)v78 + 14) = 789;
      WORD1(v78[1]) = 2048;
      *(void *)((char *)&v78[1] + 4) = v11;
      WORD6(v78[1]) = 2048;
      *(void *)((char *)&v78[1] + 14) = v8;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v40 = *((void *)this + 141) + 184 * v11;
    uint64_t v41 = *((void *)this + 152) + 184 * v11;
    *(void *)uint64_t v41 = *(void *)v40;
    re::DynamicOverflowArray<re::RenderGraphResourceAllocationManager::FenceIndex,4ul>::operator=(v41 + 8, (uint64_t *)(v40 + 8));
    re::DynamicOverflowArray<re::RenderGraphResourceAllocationManager::FenceIndex,4ul>::operator=(v41 + 80, (uint64_t *)(v40 + 80));
    *(void *)(v41 + 152) = *(void *)(v40 + 152);
    long long v42 = *(_OWORD *)(v40 + 160);
    *(void *)(v41 + 176) = *(void *)(v40 + 176);
    *(_OWORD *)(v41 + 160) = v42;
    unint64_t v8 = *((void *)this + 160);
    if (v8 <= v11) {
      goto LABEL_58;
    }
    long long v43 = (_OWORD *)(*((void *)this + 162) + 48 * v11);
    long long v44 = *(_OWORD *)a2;
    long long v45 = *((_OWORD *)a2 + 2);
    v43[1] = *((_OWORD *)a2 + 1);
    v43[2] = v45;
    *long long v43 = v44;
  }
  (*(void (**)(id *__return_ptr, unint64_t, char *))(*(void *)v12 + 104))(v58, v12, v30);
  objc_msgSend(v58[0], sel_setLabel_, objc_msgSend(NSString, sel_stringWithCString_encoding_, *((void *)v6 + 1), 4));
  if (v58[0]) {

  }
  unint64_t v6 = (const re::StringID *)*((void *)this + 139);
LABEL_39:
  if ((unint64_t)v6 <= v11)
  {
LABEL_49:
    *(void *)uint64_t v71 = 0;
    long long v61 = 0u;
    long long v62 = 0u;
    long long v59 = 0u;
    long long v60 = 0u;
    *(_OWORD *)uint64_t v58 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(v78[0]) = 136315906;
    *(void *)((char *)v78 + 4) = "operator[]";
    WORD6(v78[0]) = 1024;
    *(_DWORD *)((char *)v78 + 14) = 789;
    WORD1(v78[1]) = 2048;
    *(void *)((char *)&v78[1] + 4) = v11;
    WORD6(v78[1]) = 2048;
    *(void *)((char *)&v78[1] + 14) = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_50:
    v57[1] = 0;
    memset(v78, 0, sizeof(v78));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v71 = 136315906;
    *(void *)&v71[4] = "operator[]";
    __int16 v72 = 1024;
    int v73 = 789;
    __int16 v74 = 2048;
    unint64_t v75 = v11;
    __int16 v76 = 2048;
    long long v77 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_51:
    *(void *)uint64_t v71 = 0;
    long long v61 = 0u;
    long long v62 = 0u;
    long long v59 = 0u;
    long long v60 = 0u;
    *(_OWORD *)uint64_t v58 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(v78[0]) = 136315906;
    *(void *)((char *)v78 + 4) = "operator[]";
    WORD6(v78[0]) = 1024;
    *(_DWORD *)((char *)v78 + 14) = 789;
    WORD1(v78[1]) = 2048;
    *(void *)((char *)&v78[1] + 4) = v11;
    WORD6(v78[1]) = 2048;
    *(void *)((char *)&v78[1] + 14) = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_52;
  }
  uint64_t v46 = *((void *)this + 141) + 184 * v11;
  long long v47 = *(uint64_t **)(v46 + 168);
  uint64_t v48 = *v47;
  uint64_t v49 = *(void *)v46;
  if (*(unsigned char *)(v46 + 160))
  {
    ++*((void *)this + 218);
  }
  else if (v47[3])
  {
    uint64_t v50 = 0;
    unint64_t v51 = 0;
    unint64_t v52 = (re::RenderGraphResourceAllocationManager *)((char *)this + 1328);
    do
    {
      uint64_t v53 = v47[5] + v50;
      unint64_t v12 = v12 & 0xFFFFFFFF00000000 | *(unsigned int *)(v53 + 8);
      re::RenderGraphResourceAllocationManager::SetupData::addUniqueFence(v52, *(void *)v53, v12);
      ++v51;
      v50 += 12;
    }
    while (v47[3] > v51);
  }
  return (char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v48 + 104))(v48, v49);
}

_anonymous_namespace_ *re::RenderGraphResourceAllocationManager::releaseBuffer(_anonymous_namespace_ *this, unsigned int a2, const char *a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  unint64_t v3 = a2;
  if (*((void *)this + 139) <= (unint64_t)a2)
  {
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v15 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_12;
  }
  unint64_t v4 = this;
  uint64_t v5 = *((void *)this + 141);
  if (*(void *)(v5 + 184 * a2) == -1) {
    return this;
  }
  uint64_t v6 = v5 + 184 * a2;
  uint64_t v7 = *(uint64_t ***)(v6 + 168);
  unint64_t v8 = *v7;
  *((void *)v4 + 213) -= *(void *)(v6 + 176);
  uint64_t v9 = *v8;
  if (*((unsigned char *)v4 + 1136)) {
    this = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(v9 + 64))();
  }
  else {
    this = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(v9 + 56))();
  }
  if (*((void *)v4 + 139) <= v3)
  {
LABEL_12:
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v15 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v10 = *((void *)v4 + 141) + 184 * v3;
  *(void *)uint64_t v10 = -1;
  *(void *)(v10 + 16) = 0;
  *(_DWORD *)(v10 + 24) += 2;
  *(void *)(v10 + 88) = 0;
  *(_DWORD *)(v10 + 96) += 2;
  *(void *)(v10 + 152) = 0;
  *(unsigned char *)(v10 + 160) = 0;
  *(void *)(v10 + 168) = 0;
  uint64_t v11 = *((void *)v4 + 203);
  if (v11)
  {
    uint64_t v12 = *((void *)v4 + 205);
    uint64_t v13 = (_anonymous_namespace_ *)(v7 + 1);
    uint64_t v14 = 12 * v11;
    do
    {
      *(void *)&long long v15 = *(void *)v12;
      DWORD2(v15) = *(_DWORD *)(v12 + 8);
      this = re::DynamicArray<re::RenderGraphResourceAllocationManager::FenceIndex>::add(v13, (uint64_t *)&v15);
      v12 += 12;
      v14 -= 12;
    }
    while (v14);
  }
  return this;
}

uint64_t re::RenderGraphResourceAllocationManager::onFrameStart(re::RenderGraphResourceAllocationManager *this, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6 = a2;
  uint64_t v7 = this;
  uint64_t v150 = *MEMORY[0x263EF8340];
  re::DynamicArray<re::RenderGraphResourceAllocationManager::TextureEntry>::resize((void *)this + 132, a2);
  if (*((void *)v7 + 134))
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    do
    {
      uint64_t v10 = *((void *)v7 + 136) + v8;
      *(void *)uint64_t v10 = -1;
      *(void *)(v10 + 16) = 0;
      *(_DWORD *)(v10 + 24) += 2;
      *(void *)(v10 + 88) = 0;
      *(_DWORD *)(v10 + 96) += 2;
      *(void *)(v10 + 152) = 0;
      *(unsigned char *)(v10 + 160) = 0;
      *(void *)(v10 + 168) = 0;
      ++v9;
      v8 += 184;
    }
    while (*((void *)v7 + 134) > v9);
  }
  re::DynamicArray<re::RenderGraphResourceAllocationManager::TextureEntry>::resize((void *)v7 + 137, a3);
  if (*((void *)v7 + 139))
  {
    uint64_t v11 = 0;
    unint64_t v12 = 0;
    do
    {
      uint64_t v13 = *((void *)v7 + 141) + v11;
      *(void *)uint64_t v13 = -1;
      *(void *)(v13 + 16) = 0;
      *(_DWORD *)(v13 + 24) += 2;
      *(void *)(v13 + 88) = 0;
      *(_DWORD *)(v13 + 96) += 2;
      *(void *)(v13 + 152) = 0;
      *(unsigned char *)(v13 + 160) = 0;
      *(void *)(v13 + 168) = 0;
      ++v12;
      v11 += 184;
    }
    while (*((void *)v7 + 139) > v12);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF94E58, memory_order_acquire) & 1) == 0) {
    goto LABEL_161;
  }
  while (1)
  {
    uint64_t v14 = (unsigned __int8 *)&unk_26AF94000;
    int v15 = byte_26AF94E42;
    v144 = v7;
    if (*((unsigned char *)v7 + 1136) && !byte_26AF94E42)
    {
      unint64_t v16 = *((void *)v7 + 145);
      if (v16)
      {
        uint64_t v17 = 0;
        uint64_t v18 = 0;
        unint64_t v19 = 0;
        __asm { FMOV            V9.2S, #1.0 }
        do
        {
          uint64_t v25 = *((void *)v7 + 147);
          uint64_t v26 = *(void **)(v25 + v17 + 168);
          if (v26)
          {
            (*(void (**)(void, void))(*(void *)*v26 + 32))(*v26, *(void *)(v25 + v17));
            if (*((void *)v7 + 155) <= v19) {
              goto LABEL_159;
            }
            uint64_t v27 = *((void *)v7 + 157) + v18;
            *(void *)uint64_t v27 = 3;
            *(_DWORD *)(v27 + 8) = 2;
            *(void *)(v27 + 28) = -1;
            *(void *)(v27 + 20) = -1;
            *(void *)(v27 + 12) = -1;
            *(unsigned char *)(v27 + 36) = 0;
            *(void *)(v27 + 40) = _D9;
            *(_OWORD *)(v27 + 48) = xmmword_2343AEB90;
            *(_OWORD *)(v27 + 64) = xmmword_2343AEBA0;
            *(_DWORD *)(v27 + 80) = -1;
            *(_OWORD *)(v27 + 88) = xmmword_234378E20;
            *(unsigned char *)(v27 + 104) = 0;
            unint64_t v16 = *((void *)v7 + 145);
          }
          ++v19;
          v18 += 112;
          v17 += 184;
        }
        while (v16 > v19);
        *((void *)v7 + 145) = 0;
        uint64_t v14 = (unsigned char *)&unk_26AF94000;
        if (v16)
        {
          uint64_t v28 = 184 * v16;
          uint64_t v29 = *((void *)v144 + 147) + 80;
          do
          {
            *(void *)(v29 + 72) = 0;
            re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v29);
            re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v29 - 72);
            v29 += 184;
            v28 -= 184;
          }
          while (v28);
        }
      }
      else
      {
        *((void *)v7 + 145) = 0;
      }
      ++*((_DWORD *)v144 + 292);
      *((void *)v144 + 155) = 0;
      ++*((_DWORD *)v144 + 312);
      unint64_t v30 = *((void *)v144 + 150);
      if (v30)
      {
        uint64_t v31 = 0;
        uint64_t v32 = 0;
        for (unint64_t i = 0; i < v30; ++i)
        {
          uint64_t v34 = *((void *)v144 + 152);
          long long v35 = *(void **)(v34 + v31 + 168);
          if (v35)
          {
            (*(void (**)(void, void))(*(void *)*v35 + 56))(*v35, *(void *)(v34 + v31));
            if (*((void *)v144 + 160) <= i) {
              goto LABEL_160;
            }
            uint64_t v36 = *((void *)v144 + 162) + v32;
            *(_DWORD *)uint64_t v36 = 0;
            *(void *)(v36 + 8) = -1;
            *(unsigned char *)(v36 + 16) = 0;
            *(_DWORD *)(v36 + 20) = 1065353216;
            *(void *)(v36 + 24) = 0xFFFFFFFF00000020;
            *(_OWORD *)(v36 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = xmmword_234378E20;
            unint64_t v30 = *((void *)v144 + 150);
          }
          v32 += 48;
          v31 += 184;
        }
        *((void *)v144 + 150) = 0;
        if (v30)
        {
          uint64_t v37 = 184 * v30;
          uint64_t v38 = *((void *)v144 + 152) + 80;
          do
          {
            *(void *)(v38 + 72) = 0;
            re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v38);
            re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v38 - 72);
            v38 += 184;
            v37 -= 184;
          }
          while (v37);
        }
      }
      else
      {
        *((void *)v144 + 150) = 0;
      }
      uint64_t v7 = v144;
      ++*((_DWORD *)v144 + 302);
      *((void *)v144 + 160) = 0;
      ++*((_DWORD *)v144 + 322);
      int v15 = v14[3650];
    }
    *((unsigned char *)v7 + 1136) = v15;
    if (!v15) {
      break;
    }
    unint64_t v39 = *((void *)v7 + 145);
    if (v39 == *((void *)v7 + 134)
      && *((void *)v7 + 150) == *((void *)v7 + 139)
      && *((void *)v7 + 163) == a4
      && *((void *)v7 + 164) == a5)
    {
      break;
    }
    __asm { FMOV            V8.2S, #1.0 }
    if (v39)
    {
      uint64_t v41 = 0;
      uint64_t v42 = 0;
      for (unint64_t j = 0; j < v39; ++j)
      {
        uint64_t v44 = *((void *)v7 + 147);
        long long v45 = *(void **)(v44 + v41 + 168);
        if (v45)
        {
          (*(void (**)(void, void))(*(void *)*v45 + 32))(*v45, *(void *)(v44 + v41));
          if (*((void *)v7 + 155) <= j) {
            goto LABEL_157;
          }
          uint64_t v46 = *((void *)v7 + 157) + v42;
          *(void *)uint64_t v46 = 3;
          *(_DWORD *)(v46 + 8) = 2;
          *(void *)(v46 + 28) = -1;
          *(void *)(v46 + 20) = -1;
          *(void *)(v46 + 12) = -1;
          *(unsigned char *)(v46 + 36) = 0;
          *(void *)(v46 + 40) = _D8;
          *(_OWORD *)(v46 + 48) = xmmword_2343AEB90;
          *(_OWORD *)(v46 + 64) = xmmword_2343AEBA0;
          *(_DWORD *)(v46 + 80) = -1;
          *(_OWORD *)(v46 + 88) = xmmword_234378E20;
          *(unsigned char *)(v46 + 104) = 0;
          unint64_t v39 = *((void *)v7 + 145);
        }
        v42 += 112;
        v41 += 184;
      }
    }
    re::DynamicArray<re::RenderGraphResourceAllocationManager::TextureEntry>::resize((void *)v7 + 143, v6);
    unint64_t v47 = *((void *)v7 + 155);
    if (v47 >= v6)
    {
      if (v47 <= v6) {
        goto LABEL_54;
      }
    }
    else
    {
      if (*((void *)v7 + 154) < v6)
      {
        re::DynamicArray<re::RenderGraphTargetDescription>::setCapacity((void *)v7 + 153, v6);
        unint64_t v47 = *((void *)v7 + 155);
      }
      if (v47 < v6)
      {
        uint64_t v48 = *((void *)v7 + 157);
        uint64_t v49 = v48 + 112 * v47;
        uint64_t v50 = v48 + 112 * v6 - v49;
        if (v50 >= 1)
        {
          unint64_t v51 = ((((unint64_t)v50 >> 4) * (unsigned __int128)0x2492492492492493uLL) >> 64) + 1;
          do
          {
            *(void *)uint64_t v49 = 3;
            *(_DWORD *)(v49 + 8) = 2;
            *(void *)(v49 + 12) = -1;
            *(void *)(v49 + 20) = -1;
            *(void *)(v49 + 28) = -1;
            *(unsigned char *)(v49 + 36) = 0;
            *(void *)(v49 + 40) = _D8;
            *(_OWORD *)(v49 + 48) = xmmword_2343AEB90;
            *(_OWORD *)(v49 + 64) = xmmword_2343AEBA0;
            *(_DWORD *)(v49 + 80) = -1;
            --v51;
            *(_OWORD *)(v49 + 88) = xmmword_234378E20;
            *(unsigned char *)(v49 + 104) = 0;
            v49 += 112;
          }
          while (v51 > 1);
        }
      }
    }
    *((void *)v7 + 155) = v6;
    ++*((_DWORD *)v7 + 312);
LABEL_54:
    if (*((void *)v7 + 145))
    {
      uint64_t v52 = 0;
      uint64_t v53 = 0;
      unint64_t v6 = 0;
      while (1)
      {
        uint64_t v54 = *((void *)v7 + 147) + v53;
        *(void *)uint64_t v54 = -1;
        *(void *)(v54 + 16) = 0;
        *(_DWORD *)(v54 + 24) += 2;
        *(void *)(v54 + 88) = 0;
        *(_DWORD *)(v54 + 96) += 2;
        *(void *)(v54 + 152) = 0;
        *(unsigned char *)(v54 + 160) = 0;
        *(void *)(v54 + 168) = 0;
        if (*((void *)v7 + 155) <= v6) {
          break;
        }
        uint64_t v55 = *((void *)v7 + 157) + v52;
        *(void *)uint64_t v55 = 3;
        *(_DWORD *)(v55 + 8) = 2;
        *(void *)(v55 + 28) = -1;
        *(void *)(v55 + 20) = -1;
        *(void *)(v55 + 12) = -1;
        *(unsigned char *)(v55 + 36) = 0;
        *(void *)(v55 + 40) = _D8;
        *(_OWORD *)(v55 + 48) = xmmword_2343AEB90;
        *(_OWORD *)(v55 + 64) = xmmword_2343AEBA0;
        *(_DWORD *)(v55 + 80) = -1;
        *(_OWORD *)(v55 + 88) = xmmword_234378E20;
        *(unsigned char *)(v55 + 104) = 0;
        ++v6;
        v53 += 184;
        v52 += 112;
        if (*((void *)v7 + 145) <= v6) {
          goto LABEL_58;
        }
      }
      long long v148 = 0u;
      long long v149 = 0u;
      long long v146 = 0u;
      long long v147 = 0u;
      long long v145 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_156;
    }
LABEL_58:
    unint64_t v56 = *((void *)v7 + 150);
    unint64_t v6 = (unint64_t)"etDataEPNS3_5SceneEPNS2_12AssetServiceERKNS3_14SceneAssetDataEE3$_1NS_9allocatorISC_EEFvPNS2_8internal23MeshSortGroupFixupTableEEEE";
    if (v56)
    {
      uint64_t v57 = 0;
      uint64_t v58 = 0;
      for (unint64_t k = 0; k < v56; ++k)
      {
        uint64_t v60 = *((void *)v7 + 152);
        long long v61 = *(void **)(v60 + v57 + 168);
        if (v61)
        {
          (*(void (**)(void, void))(*(void *)*v61 + 56))(*v61, *(void *)(v60 + v57));
          if (*((void *)v7 + 160) <= k) {
            goto LABEL_158;
          }
          uint64_t v62 = *((void *)v7 + 162) + v58;
          *(_DWORD *)uint64_t v62 = 0;
          *(void *)(v62 + 8) = -1;
          *(unsigned char *)(v62 + 16) = 0;
          *(_DWORD *)(v62 + 20) = 1065353216;
          *(void *)(v62 + 24) = 0xFFFFFFFF00000020;
          *(_OWORD *)(v62 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = xmmword_234378E20;
          unint64_t v56 = *((void *)v7 + 150);
        }
        v58 += 48;
        v57 += 184;
      }
    }
    re::DynamicArray<re::RenderGraphResourceAllocationManager::TextureEntry>::resize((void *)v7 + 148, a3);
    unint64_t v63 = *((void *)v7 + 160);
    if (v63 < a3)
    {
      if (*((void *)v7 + 159) < a3)
      {
        re::DynamicArray<re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::State>::setCapacity((void *)v7 + 158, a3);
        unint64_t v63 = *((void *)v7 + 160);
      }
      if (v63 < a3)
      {
        uint64_t v64 = *((void *)v7 + 162);
        uint64_t v65 = v64 + 48 * v63;
        uint64_t v66 = v64 + 48 * a3 - v65;
        if (v66 >= 1)
        {
          unint64_t v67 = v66 / 0x30uLL + 1;
          do
          {
            *(_DWORD *)uint64_t v65 = 0;
            *(void *)(v65 + 8) = -1;
            *(unsigned char *)(v65 + 16) = 0;
            *(_DWORD *)(v65 + 20) = 1065353216;
            --v67;
            *(void *)(v65 + 24) = 0xFFFFFFFF00000020;
            *(_OWORD *)(v65 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = xmmword_234378E20;
            v65 += 48;
          }
          while (v67 > 1);
        }
      }
LABEL_73:
      *((void *)v7 + 160) = a3;
      ++*((_DWORD *)v7 + 322);
      goto LABEL_74;
    }
    if (v63 > a3) {
      goto LABEL_73;
    }
LABEL_74:
    if (!*((void *)v7 + 150))
    {
LABEL_78:
      *((void *)v7 + 163) = a4;
      *((void *)v7 + 164) = a5;
      break;
    }
    uint64_t v68 = 0;
    a3 = 0;
    uint64_t v69 = 168;
    while (1)
    {
      uint64_t v70 = (void *)(*((void *)v7 + 152) + v69);
      *(v70 - 21) = -1;
      *(v70 - 19) = 0;
      *((_DWORD *)v70 - 36) += 2;
      *(v70 - 10) = 0;
      *((_DWORD *)v70 - 18) += 2;
      *(v70 - 2) = 0;
      *((unsigned char *)v70 - 8) = 0;
      *uint64_t v70 = 0;
      if (*((void *)v7 + 160) <= a3) {
        break;
      }
      uint64_t v71 = *((void *)v7 + 162) + v68;
      *(_DWORD *)uint64_t v71 = 0;
      *(void *)(v71 + 8) = -1;
      *(unsigned char *)(v71 + 16) = 0;
      *(_DWORD *)(v71 + 20) = 1065353216;
      *(void *)(v71 + 24) = 0xFFFFFFFF00000020;
      *(_OWORD *)(v71 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = xmmword_234378E20;
      ++a3;
      v69 += 184;
      v68 += 48;
      if (*((void *)v7 + 150) <= a3) {
        goto LABEL_78;
      }
    }
LABEL_156:
    long long v148 = 0u;
    long long v149 = 0u;
    long long v146 = 0u;
    long long v147 = 0u;
    long long v145 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_157:
    long long v148 = 0u;
    long long v149 = 0u;
    long long v146 = 0u;
    long long v147 = 0u;
    long long v145 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_158:
    long long v148 = 0u;
    long long v149 = 0u;
    long long v146 = 0u;
    long long v147 = 0u;
    long long v145 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_159:
    long long v148 = 0u;
    long long v149 = 0u;
    long long v146 = 0u;
    long long v147 = 0u;
    long long v145 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_160:
    long long v148 = 0u;
    long long v149 = 0u;
    long long v146 = 0u;
    long long v147 = 0u;
    long long v145 = 0u;
    uint64_t v7 = (re::RenderGraphResourceAllocationManager *)&_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_161:
    if (__cxa_guard_acquire(&qword_26AF94E58))
    {
      re::Defaults::BOOLValue((re::Defaults *)"enableRenderGraphResourceCaching", v139, (char *)&v145);
      if ((_BYTE)v145) {
        char v140 = BYTE1(v145);
      }
      else {
        char v140 = 1;
      }
      byte_26AF94E42 = v140;
      __cxa_guard_release(&qword_26AF94E58);
    }
  }
  *(void *)((char *)v7 + 1036) = 0;
  *((_DWORD *)v7 + 261) = *((_DWORD *)v7 + 258);
  *((_DWORD *)v7 + 262) = 2;
  uint64_t v72 = *((void *)v7 + 11);
  if (v72)
  {
    int v73 = (_DWORD *)*((void *)v7 + 13);
    do
    {
      *v73 += 1000;
      v73 += 3;
      --v72;
    }
    while (v72);
  }
  uint64_t v74 = *((void *)v7 + 29);
  if (v74)
  {
    unint64_t v75 = (_DWORD *)*((void *)v7 + 31);
    do
    {
      *v75 += 1000;
      v75 += 3;
      --v74;
    }
    while (v74);
  }
  uint64_t v76 = *((void *)v7 + 17);
  if (v76)
  {
    uint64_t v77 = 0;
    uint64_t v78 = *((void *)v7 + 19);
    do
    {
      uint64_t v79 = *(void *)(v78 + 48 * v77 + 24);
      if (v79)
      {
        uint64_t v80 = 0;
        uint64_t v81 = *(void *)(v78 + 48 * v77 + 40);
        do
        {
          uint64_t v82 = *(void *)(v81 + 56 * v80 + 24);
          if (v82)
          {
            unint64_t v83 = *(_DWORD **)(v81 + 56 * v80 + 40);
            do
            {
              *v83 += 1000;
              v83 += 3;
              --v82;
            }
            while (v82);
          }
          ++v80;
        }
        while (v80 != v79);
      }
      ++v77;
    }
    while (v77 != v76);
  }
  uint64_t v84 = *((unsigned int *)v7 + 48);
  if (v84)
  {
    uint64_t v85 = 0;
    v86 = (int *)(*((void *)v7 + 22) + 8);
    while (1)
    {
      int v87 = *v86;
      v86 += 30;
      if (v87 < 0) {
        break;
      }
      if (v84 == ++v85)
      {
        LODWORD(v85) = *((_DWORD *)v7 + 48);
        break;
      }
    }
  }
  else
  {
    LODWORD(v85) = 0;
  }
  if (v84 != v85)
  {
    uint64_t v88 = v85;
    do
    {
      uint64_t v89 = *((void *)v7 + 22);
      uint64_t v90 = v89 + 120 * v88;
      uint64_t v91 = *(void *)(v90 + 48);
      if (v91)
      {
        v92 = *(_DWORD **)(v90 + 64);
        do
        {
          *v92 += 1000;
          v92 += 3;
          --v91;
        }
        while (v91);
      }
      uint64_t v93 = *(void *)(v89 + 120 * v88 + 96);
      if (v93)
      {
        uint64_t v94 = 0;
        uint64_t v95 = *(void *)(v89 + 120 * v88 + 112);
        do
        {
          uint64_t v96 = *(void *)(v95 + 48 * v94 + 24);
          if (v96)
          {
            uint64_t v97 = 0;
            uint64_t v98 = *(void *)(v95 + 48 * v94 + 40);
            do
            {
              uint64_t v99 = *(void *)(v98 + 56 * v97 + 24);
              if (v99)
              {
                v100 = *(_DWORD **)(v98 + 56 * v97 + 40);
                do
                {
                  *v100 += 1000;
                  v100 += 3;
                  --v99;
                }
                while (v99);
              }
              ++v97;
            }
            while (v97 != v96);
          }
          ++v94;
        }
        while (v94 != v93);
      }
      if (v84 <= (int)v85 + 1) {
        int v101 = v85 + 1;
      }
      else {
        int v101 = v84;
      }
      while (1)
      {
        uint64_t v88 = (v85 + 1);
        if (v101 - 1 == v85) {
          break;
        }
        LODWORD(v85) = v85 + 1;
        int v102 = v88;
        if ((*(_DWORD *)(*((void *)v7 + 22) + 120 * v88 + 8) & 0x80000000) != 0) {
          goto LABEL_121;
        }
      }
      int v102 = v101;
LABEL_121:
      LODWORD(v85) = v102;
    }
    while (v84 != v102);
  }
  uint64_t v103 = 0;
  v104 = (char *)v7 + 776;
  do
  {
    int v105 = *(_DWORD *)&v104[v103];
    if (v105 != -1) {
      *(_DWORD *)&v104[v103] = v105 + 1000;
    }
    v103 += 4;
  }
  while (v103 != 256);
  (*(void (**)(void))(**((void **)v7 + 8) + 72))(*((void *)v7 + 8));
  *((unsigned char *)v7 + 112) = 0;
  uint64_t result = (*(uint64_t (**)(void))(**((void **)v7 + 26) + 72))(*((void *)v7 + 26));
  *((unsigned char *)v7 + 256) = 0;
  unint64_t v108 = *((void *)v7 + 17);
  if (v108)
  {
    for (unint64_t m = 0; m < v108; ++m)
    {
      uint64_t v110 = *((void *)v7 + 19);
      uint64_t v111 = v110 + 48 * m;
      uint64_t v113 = *(void *)(v111 + 24);
      v112 = (unint64_t *)(v111 + 24);
      if (v113)
      {
        uint64_t v114 = 0;
        unint64_t v115 = 0;
        v116 = (void *)(v110 + 48 * m + 40);
        do
        {
          v117 = (unsigned char *)(*v116 + v114);
          uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)v117 + 72))(*(void *)v117, v107);
          v117[48] = 0;
          ++v115;
          v114 += 56;
        }
        while (*v112 > v115);
        uint64_t v7 = v144;
        unint64_t v108 = *((void *)v144 + 17);
      }
    }
  }
  uint64_t v143 = *((unsigned int *)v7 + 48);
  uint64_t v118 = 0;
  if (v143)
  {
    v119 = (int *)(*((void *)v7 + 22) + 8);
    while (1)
    {
      int v120 = *v119;
      v119 += 30;
      if (v120 < 0) {
        break;
      }
      if (v143 == ++v118)
      {
        LODWORD(v118) = *((_DWORD *)v7 + 48);
        break;
      }
    }
  }
  if (v143 != v118)
  {
    uint64_t v121 = v118;
    do
    {
      uint64_t v122 = *((void *)v7 + 22);
      uint64_t v123 = v122 + 120 * v121;
      uint64_t result = (*(uint64_t (**)(void))(**(void **)(v123 + 24) + 72))(*(void *)(v123 + 24));
      unint64_t v127 = *(void *)(v123 + 96);
      v126 = (void *)(v123 + 96);
      unint64_t v125 = v127;
      *((unsigned char *)v126 - 24) = 0;
      if (v127)
      {
        unint64_t v128 = 0;
        v129 = (void *)(v122 + 120 * v121 + 112);
        do
        {
          uint64_t v130 = *v129 + 48 * v128;
          uint64_t v132 = *(void *)(v130 + 24);
          v131 = (unint64_t *)(v130 + 24);
          if (v132)
          {
            uint64_t v133 = 0;
            unint64_t v134 = 0;
            v135 = (void *)(*v129 + 48 * v128 + 40);
            do
            {
              v136 = (unsigned char *)(*v135 + v133);
              uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)v136 + 72))(*(void *)v136, v124);
              v136[48] = 0;
              ++v134;
              v133 += 56;
            }
            while (*v131 > v134);
            unint64_t v125 = *v126;
          }
          ++v128;
        }
        while (v125 > v128);
      }
      uint64_t v7 = v144;
      unsigned int v137 = *((_DWORD *)v144 + 48);
      if (v137 <= (int)v118 + 1) {
        unsigned int v137 = v118 + 1;
      }
      while (1)
      {
        uint64_t v121 = (v118 + 1);
        if (v137 - 1 == v118) {
          break;
        }
        LODWORD(v118) = v118 + 1;
        unsigned int v138 = v121;
        if ((*(_DWORD *)(*((void *)v144 + 22) + 120 * v121 + 8) & 0x80000000) != 0) {
          goto LABEL_153;
        }
      }
      unsigned int v138 = v137;
LABEL_153:
      LODWORD(v118) = v138;
    }
    while (v143 != v138);
  }
  return result;
}

void *re::DynamicArray<re::RenderGraphResourceAllocationManager::TextureEntry>::resize(void *result, unint64_t a2)
{
  unint64_t v3 = result;
  unint64_t v4 = result[2];
  if (v4 >= a2)
  {
    if (v4 <= a2) {
      return result;
    }
    uint64_t v8 = 184 * a2 + 152;
    unint64_t v9 = a2;
    do
    {
      uint64_t v10 = v3[4];
      *(void *)(v10 + v8) = 0;
      uint64_t v11 = v10 + v8 - 144;
      re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v10 + v8 - 72);
      uint64_t result = (void *)re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v11);
      ++v9;
      v8 += 184;
    }
    while (v9 < v3[2]);
  }
  else
  {
    if (result[1] < a2)
    {
      uint64_t result = re::DynamicArray<re::RenderGraphResourceAllocationManager::TextureEntry>::setCapacity(result, a2);
      unint64_t v4 = v3[2];
    }
    unint64_t v5 = a2 - v4;
    if (a2 > v4)
    {
      uint64_t v6 = 184 * v4 + 168;
      do
      {
        uint64_t v7 = (void *)(v3[4] + v6);
        *((_OWORD *)v7 - 9) = 0uLL;
        *((_OWORD *)v7 - 8) = 0uLL;
        *((_OWORD *)v7 - 5) = 0uLL;
        *((_OWORD *)v7 - 4) = 0uLL;
        *((_OWORD *)v7 - 2) = 0uLL;
        *((_OWORD *)v7 - 1) = 0uLL;
        *((_OWORD *)v7 - 3) = 0uLL;
        *((_OWORD *)v7 - 7) = 0uLL;
        *((_OWORD *)v7 - 6) = 0uLL;
        *(v7 - 20) = 0;
        *(v7 - 19) = 0;
        *(v7 - 21) = -1;
        *((_DWORD *)v7 - 36) = 1;
        *(v7 - 17) = 0;
        *(v7 - 16) = 0;
        *(v7 - 11) = 0;
        *(v7 - 10) = 0;
        *((_DWORD *)v7 - 18) = 1;
        *(v7 - 8) = 0;
        *(v7 - 7) = 0;
        *((unsigned char *)v7 - 8) = 0;
        v6 += 184;
        *uint64_t v7 = 0;
        v7[1] = 0;
        --v5;
      }
      while (v5);
    }
  }
  v3[2] = a2;
  ++*((_DWORD *)v3 + 6);
  return result;
}

uint64_t re::RenderGraphResourceAllocationManager::onFrameFinish(re::RenderGraphResourceAllocationManager *this)
{
  isStatisticCollectionEnabled = (re::ProfilerConfig *)re::ProfilerConfig::isStatisticCollectionEnabled(this);
  if (isStatisticCollectionEnabled)
  {
    uint64_t v3 = *(void *)(*((void *)this + 7) + 104);
    if (v3)
    {
      unint64_t v4 = *(unsigned char **)(v3 + 1648);
      if (v4)
      {
        if (v4[204] && !v4[17] && (v4[177] & 1) != 0)
        {
          uint64_t v5 = *((void *)this + 17);
          if (v5)
          {
            uint64_t v6 = 0;
            uint64_t v7 = 0;
            uint64_t v8 = (uint64_t *)*((void *)this + 19);
            uint64_t v9 = 48 * v5;
            do
            {
              uint64_t v10 = v8[3];
              v6 += v10;
              uint64_t v11 = *v8;
              v8 += 6;
              v7 += v11 * v10;
              v9 -= 48;
            }
            while (v9);
          }
          else
          {
            uint64_t v7 = 0;
            uint64_t v6 = 0;
          }
          uint64_t v12 = *((unsigned int *)this + 48);
          if (v12)
          {
            uint64_t v13 = 0;
            uint64_t v14 = (int *)(*((void *)this + 22) + 8);
            while (1)
            {
              int v15 = *v14;
              v14 += 30;
              if (v15 < 0) {
                break;
              }
              if (v12 == ++v13)
              {
                LODWORD(v13) = *((_DWORD *)this + 48);
                break;
              }
            }
          }
          else
          {
            LODWORD(v13) = 0;
          }
          if (v12 == v13)
          {
            unint64_t v16 = 0;
            unint64_t v17 = 0;
          }
          else
          {
            unint64_t v17 = 0;
            unint64_t v16 = 0;
            uint64_t v18 = v13;
            uint64_t v19 = *((void *)this + 22);
            do
            {
              ++v17;
              v16 += 0x800000;
              uint64_t v20 = v19 + 120 * v18;
              uint64_t v21 = *(void *)(v20 + 96);
              if (v21)
              {
                uint64_t v22 = *(uint64_t **)(v20 + 112);
                uint64_t v23 = 48 * v21;
                do
                {
                  uint64_t v24 = v22[3];
                  v17 += v24;
                  uint64_t v25 = *v22;
                  v22 += 6;
                  v16 += v25 * v24;
                  v23 -= 48;
                }
                while (v23);
              }
              if (v12 <= (int)v13 + 1) {
                int v26 = v13 + 1;
              }
              else {
                int v26 = *((_DWORD *)this + 48);
              }
              while (1)
              {
                uint64_t v18 = (v13 + 1);
                if (v26 - 1 == v13) {
                  break;
                }
                LODWORD(v13) = v13 + 1;
                int v27 = v18;
                if ((*(_DWORD *)(v19 + 120 * v18 + 8) & 0x80000000) != 0) {
                  goto LABEL_31;
                }
              }
              int v27 = v26;
LABEL_31:
              LODWORD(v13) = v27;
            }
            while (v12 != v27);
          }
          uint64_t v28 = re::ProfilerConfig::isStatisticCollectionEnabled(isStatisticCollectionEnabled);
          if (v28)
          {
            uint64_t v28 = re::profilerThreadContext((re *)v28);
            uint64_t v29 = *(int64x2_t **)(v28 + 152);
            if (v29)
            {
              uint64_t v30 = v6 + v17;
              unint64_t v31 = v6 + v17 + 1;
              unint64_t v32 = v29[324].u64[0];
              if (v32 >= v31) {
                unint64_t v32 = v30 + 1;
              }
              v29[324].i64[0] = v32;
              if (v29[324].i64[1] <= v31) {
                uint64_t v33 = v30 + 1;
              }
              else {
                uint64_t v33 = v29[324].i64[1];
              }
              v29[324].i64[1] = v33;
              int64x2_t v34 = vdupq_n_s64(1uLL);
              v34.i64[0] = v6 + v17 + 1;
              v29[325] = vaddq_s64(v29[325], v34);
              *(unsigned char *)(v28 + 184) = 0;
            }
          }
          uint64_t v35 = re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v28);
          if (v35)
          {
            uint64_t v35 = re::profilerThreadContext((re *)v35);
            uint64_t v36 = *(int64x2_t **)(v35 + 152);
            if (v36)
            {
              unint64_t v37 = v7 + v16 + 0x800000;
              unint64_t v38 = v36[328].u64[0];
              if (v38 >= v37) {
                unint64_t v38 = v7 + v16 + 0x800000;
              }
              v36[328].i64[0] = v38;
              unint64_t v39 = v36[328].u64[1];
              if (v39 <= v37) {
                unint64_t v39 = v7 + v16 + 0x800000;
              }
              v36[328].i64[1] = v39;
              int64x2_t v40 = vdupq_n_s64(1uLL);
              v40.i64[0] = v7 + v16 + 0x800000;
              v36[329] = vaddq_s64(v36[329], v40);
              *(unsigned char *)(v35 + 184) = 0;
            }
          }
          uint64_t v41 = re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v35);
          if (v41)
          {
            uint64_t v41 = re::profilerThreadContext((re *)v41);
            uint64_t v42 = *(int64x2_t **)(v41 + 152);
            if (v42)
            {
              unint64_t v43 = v42[332].u64[0];
              if (v43 >= v17) {
                unint64_t v43 = v17;
              }
              v42[332].i64[0] = v43;
              unint64_t v44 = v42[332].u64[1];
              if (v44 <= v17) {
                unint64_t v44 = v17;
              }
              v42[332].i64[1] = v44;
              int64x2_t v45 = vdupq_n_s64(1uLL);
              v45.i64[0] = v17;
              v42[333] = vaddq_s64(v42[333], v45);
              *(unsigned char *)(v41 + 184) = 0;
            }
          }
          uint64_t v46 = re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v41);
          if (v46)
          {
            uint64_t v46 = re::profilerThreadContext((re *)v46);
            unint64_t v47 = *(int64x2_t **)(v46 + 152);
            if (v47)
            {
              unint64_t v48 = v47[336].u64[0];
              if (v48 >= v16) {
                unint64_t v48 = v16;
              }
              v47[336].i64[0] = v48;
              unint64_t v49 = v47[336].u64[1];
              if (v49 <= v16) {
                unint64_t v49 = v16;
              }
              v47[336].i64[1] = v49;
              int64x2_t v50 = vdupq_n_s64(1uLL);
              v50.i64[0] = v16;
              v47[337] = vaddq_s64(v47[337], v50);
              *(unsigned char *)(v46 + 184) = 0;
            }
          }
          uint64_t v51 = re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v46);
          if (v51)
          {
            uint64_t v51 = re::profilerThreadContext((re *)v51);
            uint64_t v52 = *(int64x2_t **)(v51 + 152);
            if (v52)
            {
              unint64_t v53 = *((void *)this + 219);
              unint64_t v54 = v52[340].u64[0];
              if (v54 >= v53) {
                unint64_t v54 = *((void *)this + 219);
              }
              v52[340].i64[0] = v54;
              unint64_t v55 = v52[340].u64[1];
              if (v55 <= v53) {
                unint64_t v55 = v53;
              }
              v52[340].i64[1] = v55;
              int64x2_t v56 = vdupq_n_s64(1uLL);
              v56.i64[0] = v53;
              v52[341] = vaddq_s64(v52[341], v56);
              *(unsigned char *)(v51 + 184) = 0;
            }
          }
          uint64_t v57 = re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v51);
          if (v57)
          {
            uint64_t v57 = re::profilerThreadContext((re *)v57);
            uint64_t v58 = *(int64x2_t **)(v57 + 152);
            if (v58)
            {
              unint64_t v59 = *((void *)this + 221);
              unint64_t v60 = v58[348].u64[0];
              if (v60 >= v59) {
                unint64_t v60 = *((void *)this + 221);
              }
              v58[348].i64[0] = v60;
              unint64_t v61 = v58[348].u64[1];
              if (v61 <= v59) {
                unint64_t v61 = v59;
              }
              v58[348].i64[1] = v61;
              int64x2_t v62 = vdupq_n_s64(1uLL);
              v62.i64[0] = v59;
              v58[349] = vaddq_s64(v58[349], v62);
              *(unsigned char *)(v57 + 184) = 0;
            }
          }
          uint64_t v63 = re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v57);
          if (v63)
          {
            uint64_t v63 = re::profilerThreadContext((re *)v63);
            uint64_t v64 = *(int64x2_t **)(v63 + 152);
            if (v64)
            {
              unint64_t v65 = *((void *)this + 215);
              unint64_t v66 = v64[352].u64[0];
              if (v66 >= v65) {
                unint64_t v66 = *((void *)this + 215);
              }
              v64[352].i64[0] = v66;
              unint64_t v67 = v64[352].u64[1];
              if (v67 <= v65) {
                unint64_t v67 = v65;
              }
              v64[352].i64[1] = v67;
              int64x2_t v68 = vdupq_n_s64(1uLL);
              v68.i64[0] = v65;
              v64[353] = vaddq_s64(v64[353], v68);
              *(unsigned char *)(v63 + 184) = 0;
            }
          }
          uint64_t v69 = re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v63);
          if (v69)
          {
            uint64_t v69 = re::profilerThreadContext((re *)v69);
            uint64_t v70 = *(int64x2_t **)(v69 + 152);
            if (v70)
            {
              unint64_t v71 = *((void *)this + 220);
              unint64_t v72 = v70[360].u64[0];
              if (v72 >= v71) {
                unint64_t v72 = *((void *)this + 220);
              }
              v70[360].i64[0] = v72;
              unint64_t v73 = v70[360].u64[1];
              if (v73 <= v71) {
                unint64_t v73 = v71;
              }
              v70[360].i64[1] = v73;
              int64x2_t v74 = vdupq_n_s64(1uLL);
              v74.i64[0] = v71;
              v70[361] = vaddq_s64(v70[361], v74);
              *(unsigned char *)(v69 + 184) = 0;
            }
          }
          uint64_t v75 = re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v69);
          if (v75)
          {
            uint64_t v75 = re::profilerThreadContext((re *)v75);
            uint64_t v76 = *(int64x2_t **)(v75 + 152);
            if (v76)
            {
              unint64_t v77 = *((void *)this + 216);
              unint64_t v78 = v76[356].u64[0];
              if (v78 >= v77) {
                unint64_t v78 = *((void *)this + 216);
              }
              v76[356].i64[0] = v78;
              unint64_t v79 = v76[356].u64[1];
              if (v79 <= v77) {
                unint64_t v79 = v77;
              }
              v76[356].i64[1] = v79;
              int64x2_t v80 = vdupq_n_s64(1uLL);
              v80.i64[0] = v77;
              v76[357] = vaddq_s64(v76[357], v80);
              *(unsigned char *)(v75 + 184) = 0;
            }
          }
          uint64_t v81 = re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v75);
          if (v81)
          {
            uint64_t v81 = re::profilerThreadContext((re *)v81);
            uint64_t v82 = *(int64x2_t **)(v81 + 152);
            if (v82)
            {
              unint64_t v83 = *((void *)this + 217);
              unint64_t v84 = v82[344].u64[0];
              if (v84 >= v83) {
                unint64_t v84 = *((void *)this + 217);
              }
              v82[344].i64[0] = v84;
              unint64_t v85 = v82[344].u64[1];
              if (v85 <= v83) {
                unint64_t v85 = v83;
              }
              v82[344].i64[1] = v85;
              int64x2_t v86 = vdupq_n_s64(1uLL);
              v86.i64[0] = v83;
              v82[345] = vaddq_s64(v82[345], v86);
              *(unsigned char *)(v81 + 184) = 0;
            }
          }
          int v87 = (re *)re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v81);
          if (v87)
          {
            uint64_t v88 = re::profilerThreadContext(v87);
            uint64_t v89 = *(int64x2_t **)(v88 + 152);
            if (v89)
            {
              unint64_t v90 = *((void *)this + 214);
              unint64_t v91 = v89[364].u64[0];
              if (v91 >= v90) {
                unint64_t v91 = *((void *)this + 214);
              }
              v89[364].i64[0] = v91;
              unint64_t v92 = v89[364].u64[1];
              if (v92 <= v90) {
                unint64_t v92 = v90;
              }
              v89[364].i64[1] = v92;
              int64x2_t v93 = vdupq_n_s64(1uLL);
              v93.i64[0] = v90;
              v89[365] = vaddq_s64(v89[365], v93);
              *(unsigned char *)(v88 + 184) = 0;
            }
          }
        }
      }
    }
  }
  *((void *)this + 221) = 0;
  *(_OWORD *)((char *)this + 1736) = 0u;
  *(_OWORD *)((char *)this + 1752) = 0u;
  *(_OWORD *)((char *)this + 1704) = 0u;
  *(_OWORD *)((char *)this + 1720) = 0u;
  re::RenderGraphResourceAllocationManager::startSetup((uint64_t)this);
  unint64_t v94 = *((void *)this + 17);
  if (v94)
  {
    unint64_t v95 = 0;
    uint64_t v96 = 0;
    unint64_t v97 = 0;
    do
    {
      uint64_t v98 = *((void *)this + 19);
      uint64_t v99 = v98 + 48 * v95;
      uint64_t v102 = *(void *)(v99 + 24);
      int v101 = (unint64_t *)(v99 + 24);
      unsigned int v100 = v102;
      if ((int)v102 >= 1)
      {
        uint64_t v103 = (uint64_t *)(v98 + 48 * v95 + 40);
        unint64_t v104 = v100 + 1;
        do
        {
          unint64_t v105 = (v104 - 2);
          if (*v101 <= v105) {
            goto LABEL_179;
          }
          uint64_t v106 = *v103;
          uint64_t v107 = **(void **)(*v103 + 56 * v105);
          if (*((unsigned char *)this + 1136)) {
            (*(void (**)(void))(v107 + 88))();
          }
          else {
            (*(void (**)(void))(v107 + 80))();
          }
          uint64_t v108 = v106 + 56 * v105;
          *(void *)(v108 + 24) = 0;
          ++*(_DWORD *)(v108 + 32);
          int v109 = *(unsigned __int8 *)(v108 + 48);
          int v110 = *(unsigned __int8 *)(v108 + 49);
          if (v109)
          {
            if (v110) {
              ++v97;
            }
            else {
              ++v96;
            }
          }
          else if (!v110)
          {
            if (*v101 <= v105) {
              goto LABEL_184;
            }
            re::internal::destroyPersistent<re::Heap>(*(re **)(*v103 + 56 * v105));
            if (*v101 <= v105) {
              goto LABEL_185;
            }
            *(void *)(*v103 + 56 * v105) = 0;
            re::DynamicArray<re::RenderGraphResourceAllocationManager::HeapAndFences>::removeAt((uint64_t)(v101 - 2), (v104 - 2));
          }
          --v104;
        }
        while (v104 > 1);
        unint64_t v94 = *((void *)this + 17);
      }
      ++v95;
    }
    while (v94 > v95);
    if (v94 && v96 && !v97)
    {
      do
      {
        uint64_t v111 = *((void *)this + 19);
        uint64_t v112 = v111 + 48 * v97;
        uint64_t v115 = *(void *)(v112 + 24);
        uint64_t v114 = (unint64_t *)(v112 + 24);
        unsigned int v113 = v115;
        if ((int)v115 >= 1)
        {
          v116 = (void *)(v111 + 48 * v97 + 40);
          unint64_t v117 = v113 + 1;
          do
          {
            unint64_t v118 = (v117 - 2);
            if (*v114 <= v118) {
              goto LABEL_182;
            }
            if (*(unsigned char *)(*v116 + 56 * v118 + 49))
            {
              re::internal::destroyPersistent<re::Heap>(*(re **)(*v116 + 56 * v118));
              if (*v114 <= v118) {
                goto LABEL_183;
              }
              *(void *)(*v116 + 56 * v118) = 0;
              re::DynamicArray<re::RenderGraphResourceAllocationManager::HeapAndFences>::removeAt((uint64_t)(v114 - 2), (v117 - 2));
            }
            --v117;
          }
          while (v117 > 1);
          unint64_t v94 = *((void *)this + 17);
        }
        ++v97;
      }
      while (v94 > v97);
    }
  }
  uint64_t v119 = **((void **)this + 8);
  if (*((unsigned char *)this + 1136)) {
    (*(void (**)(void))(v119 + 88))();
  }
  else {
    (*(void (**)(void))(v119 + 80))();
  }
  *((void *)this + 11) = 0;
  ++*((_DWORD *)this + 24);
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 26) + 80))(*((void *)this + 26));
  *((void *)this + 29) = 0;
  ++*((_DWORD *)this + 60);
  uint64_t v121 = *((unsigned int *)this + 48);
  if (v121)
  {
    uint64_t v122 = 0;
    uint64_t v123 = (int *)(*((void *)this + 22) + 8);
    while (1)
    {
      int v124 = *v123;
      v123 += 30;
      if (v124 < 0) {
        break;
      }
      if (v121 == ++v122)
      {
        LODWORD(v122) = *((_DWORD *)this + 48);
        break;
      }
    }
  }
  else
  {
    LODWORD(v122) = 0;
  }
  if (v121 == v122) {
    return result;
  }
  uint64_t v125 = v122;
  int v146 = *((_DWORD *)this + 48);
  do
  {
    uint64_t v126 = *((void *)this + 22);
    uint64_t v127 = v126 + 120 * v125;
    v129 = *(uint64_t **)(v127 + 24);
    uint64_t v128 = v127 + 24;
    uint64_t v130 = *v129;
    if (*((unsigned char *)this + 1136)) {
      uint64_t result = (*(uint64_t (**)(void))(v130 + 88))();
    }
    else {
      uint64_t result = (*(uint64_t (**)(void))(v130 + 80))();
    }
    *(void *)(v128 + 24) = 0;
    ++*(_DWORD *)(v128 + 32);
    uint64_t v131 = v126 + 120 * v125;
    unint64_t v132 = *(void *)(v131 + 96);
    long long v147 = (unint64_t *)(v131 + 96);
    if (!v132) {
      goto LABEL_170;
    }
    unint64_t v133 = 0;
    long long v148 = (void *)(v126 + 120 * v125 + 112);
    do
    {
      uint64_t v134 = *v148 + 48 * v133;
      uint64_t v137 = *(void *)(v134 + 24);
      v136 = (unint64_t *)(v134 + 24);
      unsigned int v135 = v137;
      if ((int)v137 < 1) {
        goto LABEL_169;
      }
      unsigned int v138 = (uint64_t *)(*v148 + 48 * v133 + 40);
      unint64_t v139 = v135 + 1;
      do
      {
        unint64_t v140 = (v139 - 2);
        if (*v136 <= v140)
        {
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_179:
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_180:
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_181:
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_182:
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_183:
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_184:
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_185:
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        uint64_t v141 = *v138;
        uint64_t v142 = **(void **)(*v138 + 56 * v140);
        if (*((unsigned char *)this + 1136)) {
          uint64_t result = (*(uint64_t (**)(void))(v142 + 88))();
        }
        else {
          uint64_t result = (*(uint64_t (**)(void))(v142 + 80))();
        }
        uint64_t v143 = v141 + 56 * v140;
        *(void *)(v143 + 24) = 0;
        ++*(_DWORD *)(v143 + 32);
        if (!*(unsigned char *)(v143 + 48))
        {
          if (*v136 <= v140) {
            goto LABEL_180;
          }
          re::internal::destroyPersistent<re::Heap>(*(re **)(*v138 + 56 * v140));
          if (*v136 <= v140) {
            goto LABEL_181;
          }
          *(void *)(*v138 + 56 * v140) = 0;
          uint64_t result = re::DynamicArray<re::RenderGraphResourceAllocationManager::HeapAndFences>::removeAt((uint64_t)(v136 - 2), (v139 - 2));
        }
        --v139;
      }
      while (v139 > 1);
      unint64_t v132 = *v147;
LABEL_169:
      ++v133;
    }
    while (v132 > v133);
LABEL_170:
    unsigned int v144 = *((_DWORD *)this + 48);
    if (v144 <= (int)v122 + 1) {
      unsigned int v144 = v122 + 1;
    }
    while (1)
    {
      uint64_t v125 = (v122 + 1);
      if (v144 - 1 == v122) {
        break;
      }
      LODWORD(v122) = v122 + 1;
      unsigned int v145 = v125;
      if ((*(_DWORD *)(*((void *)this + 22) + 120 * v125 + 8) & 0x80000000) != 0) {
        goto LABEL_176;
      }
    }
    unsigned int v145 = v144;
LABEL_176:
    LODWORD(v122) = v145;
  }
  while (v146 != v145);
  return result;
}

uint64_t re::RenderGraphResourceAllocationManager::startSetup(uint64_t this)
{
  *(void *)(this + 1344) = 0;
  ++*(_DWORD *)(this + 1352);
  *(void *)(this + 1384) = 0;
  ++*(_DWORD *)(this + 1392);
  *(void *)(this + 1424) = 0;
  ++*(_DWORD *)(this + 1432);
  *(void *)(this + 1464) = 0;
  ++*(_DWORD *)(this + 1472);
  *(void *)(this + 1504) = 0;
  ++*(_DWORD *)(this + 1512);
  *(void *)(this + 1544) = 0;
  ++*(_DWORD *)(this + 1552);
  *(void *)(this + 1584) = 0;
  ++*(_DWORD *)(this + 1592);
  *(void *)(this + 1624) = 0;
  ++*(_DWORD *)(this + 1632);
  *(_WORD *)(this + 1648) = 1;
  return this;
}

uint64_t re::DynamicArray<re::RenderGraphResourceAllocationManager::HeapAndFences>::removeAt(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (v2 - 1 > a2)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = v4 + 56 * v2;
    uint64_t v6 = v4 + 56 * a2;
    *(void *)uint64_t v6 = *(void *)(v5 - 56);
    re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v6 + 8, v5 - 48);
    *(_WORD *)(v6 + 48) = *(_WORD *)(v5 - 8);
    unint64_t v2 = *(void *)(a1 + 16);
  }
  uint64_t result = re::DynamicArray<unsigned long>::deinit(*(void *)(a1 + 32) + 56 * v2 - 48);
  --*(void *)(a1 + 16);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

void re::RenderGraphResourceAllocationManager::waitForFence<re::mtl::RenderCommandEncoder>(void *a1, id *a2)
{
  uint64_t v2 = a1[209];
  if (v2)
  {
    uint64_t v5 = (int *)(a1[211] + 40);
    while (*((id *)v5 - 4) != *a2)
    {
      v5 += 12;
      if (!--v2) {
        goto LABEL_5;
      }
    }
    re::RenderGraphResourceAllocationManager::markLastAccess((uint64_t)a1, *((void *)v5 - 1), *v5);
    uint64_t v7 = *(v5 - 1);
    if (*((_DWORD *)a1 + v7 + 194) != -1) {
      objc_msgSend(*a2, sel_waitForFence_beforeStages_, a1[v7 + 33], *v5);
    }
    if (a1[198])
    {
      uint64_t v8 = 0;
      unint64_t v9 = 0;
      do
      {
        objc_msgSend(*a2, sel_waitForFence_beforeStages_, a1[*(int *)(a1[200] + v8 + 4) + 33], *(int *)(a1[200] + v8 + 8));
        ++v9;
        v8 += 12;
      }
      while (a1[198] > v9);
    }
  }
  else
  {
LABEL_5:
    uint64_t v6 = *re::graphicsLogObjects((re *)a1);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl(&dword_233120000, v6, OS_LOG_TYPE_DEFAULT, "ResourceAllocationManager: Failed to find matching encoder", v10, 2u);
    }
  }
}

uint64_t re::RenderGraphResourceAllocationManager::markLastAccess(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v5 = (void *)result;
  uint64_t v36 = *MEMORY[0x263EF8340];
  uint64_t v20 = a2;
  int v21 = a3;
  if (*(unsigned char *)(result + 1648))
  {
    *(unsigned char *)(result + 1648) = 0;
    if (*(void *)(result + 1344))
    {
      uint64_t v6 = 0;
      unint64_t v7 = 0;
      do
      {
        unint64_t v8 = *(unsigned int *)(*(void *)(result + 1360) + v6);
        unint64_t v9 = *(void *)(result + 1072);
        if (v9 <= v8) {
          goto LABEL_61;
        }
        uint64_t v10 = *(void *)(result + 1088) + 184 * v8;
        *(void *)(v10 + 16) = 0;
        *(_DWORD *)(v10 + 24) += 2;
        ++v7;
        v6 += 8;
      }
      while (*(void *)(result + 1344) > v7);
    }
    if (*(void *)(result + 1424))
    {
      uint64_t v11 = 0;
      do
      {
        unint64_t v8 = *(unsigned int *)(*(void *)(result + 1440) + 4 * v11);
        unint64_t v9 = *(void *)(result + 1072);
        if (v9 <= v8) {
          goto LABEL_62;
        }
        uint64_t v12 = *(void *)(result + 1088) + 184 * v8;
        *(void *)(v12 + 88) = 0;
        *(_DWORD *)(v12 + 96) += 2;
      }
      while (*(void *)(result + 1424) > (unint64_t)++v11);
    }
    if (*(void *)(result + 1384))
    {
      uint64_t v13 = 0;
      unint64_t v14 = 0;
      do
      {
        unint64_t v8 = *(unsigned int *)(*(void *)(result + 1400) + v13);
        unint64_t v9 = *(void *)(result + 1112);
        if (v9 <= v8) {
          goto LABEL_63;
        }
        uint64_t v15 = *(void *)(result + 1128) + 184 * v8;
        *(void *)(v15 + 16) = 0;
        *(_DWORD *)(v15 + 24) += 2;
        ++v14;
        v13 += 8;
      }
      while (*(void *)(result + 1384) > v14);
    }
    if (*(void *)(result + 1464))
    {
      uint64_t v16 = 0;
      while (1)
      {
        unint64_t v8 = *(unsigned int *)(*(void *)(result + 1480) + 4 * v16);
        unint64_t v9 = *(void *)(result + 1112);
        if (v9 <= v8) {
          break;
        }
        uint64_t v17 = *(void *)(result + 1128) + 184 * v8;
        *(void *)(v17 + 88) = 0;
        *(_DWORD *)(v17 + 96) += 2;
        if (*(void *)(result + 1464) <= (unint64_t)++v16) {
          goto LABEL_18;
        }
      }
LABEL_64:
      uint64_t v22 = 0;
      long long v35 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v31 = 0u;
      long long v32 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v23 = 136315906;
      uint64_t v24 = "operator[]";
      __int16 v25 = 1024;
      int v26 = 789;
      __int16 v27 = 2048;
      unint64_t v28 = v8;
      __int16 v29 = 2048;
      unint64_t v30 = v9;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_65:
      uint64_t v22 = 0;
      long long v35 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v31 = 0u;
      long long v32 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v23 = 136315906;
      uint64_t v24 = "operator[]";
      __int16 v25 = 1024;
      int v26 = 789;
      __int16 v27 = 2048;
      unint64_t v28 = v8;
      __int16 v29 = 2048;
      unint64_t v30 = v4;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_66:
      uint64_t v22 = 0;
      long long v35 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v31 = 0u;
      long long v32 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v23 = 136315906;
      uint64_t v24 = "operator[]";
      __int16 v25 = 1024;
      int v26 = 789;
      __int16 v27 = 2048;
      unint64_t v28 = v8;
      __int16 v29 = 2048;
      unint64_t v30 = v3;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_67:
      uint64_t v22 = 0;
      long long v35 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v31 = 0u;
      long long v32 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v23 = 136315906;
      uint64_t v24 = "operator[]";
      __int16 v25 = 1024;
      int v26 = 789;
      __int16 v27 = 2048;
      unint64_t v28 = v8;
      __int16 v29 = 2048;
      unint64_t v30 = v3;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_68:
      uint64_t v22 = 0;
      long long v35 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v31 = 0u;
      long long v32 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v23 = 136315906;
      uint64_t v24 = "operator[]";
      __int16 v25 = 1024;
      int v26 = 789;
      __int16 v27 = 2048;
      unint64_t v28 = v8;
      __int16 v29 = 2048;
      unint64_t v30 = v4;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_69:
      uint64_t v22 = 0;
      long long v35 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v31 = 0u;
      long long v32 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v23 = 136315906;
      uint64_t v24 = "operator[]";
      __int16 v25 = 1024;
      int v26 = 789;
      __int16 v27 = 2048;
      unint64_t v28 = v8;
      __int16 v29 = 2048;
      unint64_t v30 = v3;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_70:
      uint64_t v22 = 0;
      long long v35 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v31 = 0u;
      long long v32 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v23 = 136315906;
      uint64_t v24 = "operator[]";
      __int16 v25 = 1024;
      int v26 = 789;
      __int16 v27 = 2048;
      unint64_t v28 = v8;
      __int16 v29 = 2048;
      unint64_t v30 = v3;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
  }
LABEL_18:
  if (*(void *)(result + 1344))
  {
    unint64_t v9 = 0;
    unint64_t v18 = 0;
    unint64_t v3 = 184;
    while (1)
    {
      unint64_t v8 = *(unsigned int *)(v5[170] + v9);
      unint64_t v4 = v5[134];
      if (v4 <= v8) {
        break;
      }
      uint64_t result = re::DynamicOverflowArray<re::RenderGraphResourceAllocationManager::FenceIndex,4ul>::indexOf((uint64_t)&v31, v5[136] + 184 * v8 + 8, &v20);
      if (!(_BYTE)v31)
      {
        unint64_t v4 = v5[134];
        if (v4 <= v8) {
          goto LABEL_65;
        }
        uint64_t result = (uint64_t)re::DynamicOverflowArray<re::RenderGraphResourceAllocationManager::FenceIndex,4ul>::add((_anonymous_namespace_ *)(v5[136] + 184 * v8 + 8), &v20);
      }
      ++v18;
      v9 += 8;
      if (v5[168] <= v18) {
        goto LABEL_25;
      }
    }
    uint64_t v22 = 0;
    long long v35 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v23 = 136315906;
    uint64_t v24 = "operator[]";
    __int16 v25 = 1024;
    int v26 = 789;
    __int16 v27 = 2048;
    unint64_t v28 = v8;
    __int16 v29 = 2048;
    unint64_t v30 = v4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_56;
  }
LABEL_25:
  if (v5[178])
  {
    unint64_t v9 = 0;
    while (1)
    {
      unint64_t v8 = *(unsigned int *)(v5[180] + 4 * v9);
      unint64_t v3 = v5[134];
      if (v3 <= v8) {
        break;
      }
      re::DynamicOverflowArray<re::RenderGraphResourceAllocationManager::FenceIndex,4ul>::indexOf((uint64_t)&v31, v5[136] + 184 * v8 + 80, &v20);
      if (!(_BYTE)v31)
      {
        unint64_t v3 = v5[134];
        if (v3 <= v8) {
          goto LABEL_66;
        }
        re::DynamicOverflowArray<re::RenderGraphResourceAllocationManager::FenceIndex,4ul>::add((_anonymous_namespace_ *)(v5[136] + 184 * v8 + 80), &v20);
      }
      unint64_t v3 = v5[134];
      if (v3 <= v8) {
        goto LABEL_57;
      }
      uint64_t result = re::DynamicOverflowArray<re::RenderGraphResourceAllocationManager::FenceIndex,4ul>::indexOf((uint64_t)&v31, v5[136] + 184 * v8 + 8, &v20);
      if (!(_BYTE)v31)
      {
        unint64_t v3 = v5[134];
        if (v3 <= v8) {
          goto LABEL_67;
        }
        uint64_t result = (uint64_t)re::DynamicOverflowArray<re::RenderGraphResourceAllocationManager::FenceIndex,4ul>::add((_anonymous_namespace_ *)(v5[136] + 184 * v8 + 8), &v20);
      }
      if (v5[178] <= ++v9) {
        goto LABEL_36;
      }
    }
LABEL_56:
    uint64_t v22 = 0;
    long long v35 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v23 = 136315906;
    uint64_t v24 = "operator[]";
    __int16 v25 = 1024;
    int v26 = 789;
    __int16 v27 = 2048;
    unint64_t v28 = v8;
    __int16 v29 = 2048;
    unint64_t v30 = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_57:
    uint64_t v22 = 0;
    long long v35 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v23 = 136315906;
    uint64_t v24 = "operator[]";
    __int16 v25 = 1024;
    int v26 = 789;
    __int16 v27 = 2048;
    unint64_t v28 = v8;
    __int16 v29 = 2048;
    unint64_t v30 = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_58;
  }
LABEL_36:
  if (v5[173])
  {
    unint64_t v9 = 0;
    unint64_t v19 = 0;
    unint64_t v3 = 184;
    while (1)
    {
      unint64_t v8 = *(unsigned int *)(v5[175] + v9);
      unint64_t v4 = v5[139];
      if (v4 <= v8) {
        break;
      }
      uint64_t result = re::DynamicOverflowArray<re::RenderGraphResourceAllocationManager::FenceIndex,4ul>::indexOf((uint64_t)&v31, v5[141] + 184 * v8 + 8, &v20);
      if (!(_BYTE)v31)
      {
        unint64_t v4 = v5[139];
        if (v4 <= v8) {
          goto LABEL_68;
        }
        uint64_t result = (uint64_t)re::DynamicOverflowArray<re::RenderGraphResourceAllocationManager::FenceIndex,4ul>::add((_anonymous_namespace_ *)(v5[141] + 184 * v8 + 8), &v20);
      }
      ++v19;
      v9 += 8;
      if (v5[173] <= v19) {
        goto LABEL_43;
      }
    }
LABEL_58:
    uint64_t v22 = 0;
    long long v35 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v23 = 136315906;
    uint64_t v24 = "operator[]";
    __int16 v25 = 1024;
    int v26 = 789;
    __int16 v27 = 2048;
    unint64_t v28 = v8;
    __int16 v29 = 2048;
    unint64_t v30 = v4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_59:
    uint64_t v22 = 0;
    long long v35 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v23 = 136315906;
    uint64_t v24 = "operator[]";
    __int16 v25 = 1024;
    int v26 = 789;
    __int16 v27 = 2048;
    unint64_t v28 = v8;
    __int16 v29 = 2048;
    unint64_t v30 = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_60:
    uint64_t v22 = 0;
    long long v35 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v23 = 136315906;
    uint64_t v24 = "operator[]";
    __int16 v25 = 1024;
    int v26 = 789;
    __int16 v27 = 2048;
    unint64_t v28 = v8;
    __int16 v29 = 2048;
    unint64_t v30 = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_61:
    uint64_t v22 = 0;
    long long v35 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v23 = 136315906;
    uint64_t v24 = "operator[]";
    __int16 v25 = 1024;
    int v26 = 789;
    __int16 v27 = 2048;
    unint64_t v28 = v8;
    __int16 v29 = 2048;
    unint64_t v30 = v9;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_62:
    uint64_t v22 = 0;
    long long v35 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v23 = 136315906;
    uint64_t v24 = "operator[]";
    __int16 v25 = 1024;
    int v26 = 789;
    __int16 v27 = 2048;
    unint64_t v28 = v8;
    __int16 v29 = 2048;
    unint64_t v30 = v9;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_63:
    uint64_t v22 = 0;
    long long v35 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v23 = 136315906;
    uint64_t v24 = "operator[]";
    __int16 v25 = 1024;
    int v26 = 789;
    __int16 v27 = 2048;
    unint64_t v28 = v8;
    __int16 v29 = 2048;
    unint64_t v30 = v9;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_64;
  }
LABEL_43:
  if (v5[183])
  {
    unint64_t v9 = 0;
    while (1)
    {
      unint64_t v8 = *(unsigned int *)(v5[185] + 4 * v9);
      unint64_t v3 = v5[139];
      if (v3 <= v8) {
        goto LABEL_59;
      }
      re::DynamicOverflowArray<re::RenderGraphResourceAllocationManager::FenceIndex,4ul>::indexOf((uint64_t)&v31, v5[141] + 184 * v8 + 80, &v20);
      if (!(_BYTE)v31)
      {
        unint64_t v3 = v5[139];
        if (v3 <= v8) {
          goto LABEL_69;
        }
        re::DynamicOverflowArray<re::RenderGraphResourceAllocationManager::FenceIndex,4ul>::add((_anonymous_namespace_ *)(v5[141] + 184 * v8 + 80), &v20);
      }
      unint64_t v3 = v5[139];
      if (v3 <= v8) {
        goto LABEL_60;
      }
      uint64_t result = re::DynamicOverflowArray<re::RenderGraphResourceAllocationManager::FenceIndex,4ul>::indexOf((uint64_t)&v31, v5[141] + 184 * v8 + 8, &v20);
      if (!(_BYTE)v31)
      {
        unint64_t v3 = v5[139];
        if (v3 <= v8) {
          goto LABEL_70;
        }
        uint64_t result = (uint64_t)re::DynamicOverflowArray<re::RenderGraphResourceAllocationManager::FenceIndex,4ul>::add((_anonymous_namespace_ *)(v5[141] + 184 * v8 + 8), &v20);
      }
      if (v5[183] <= ++v9) {
        return result;
      }
    }
  }
  return result;
}

void re::RenderGraphResourceAllocationManager::onAcquireEncoder<re::mtl::BlitCommandEncoder>(uint64_t a1, id *a2)
{
  id v11 = 0;
  v12[0] = 0;
  unint64_t v4 = re::globalAllocators((re *)a1);
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4[2] + 32))(v4[2], 264, 8);
  *(_OWORD *)uint64_t v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(void *)(v5 + 256) = 0;
  v12[1] = v5;
  id v13 = 0;
  uint64_t v14 = -1;
  int v15 = 2;
  re::ObjCObject::operator=(&v11, a2);
  uint64_t v14 = *(void *)(a1 + 1040);
  int v15 = *(_DWORD *)(a1 + 1048);
  re::DynamicArray<re::RenderGraphResourceAllocationManager::EncoderAndFence>::add((_anonymous_namespace_ *)(a1 + 1656), (uint64_t)&v11);
  re::RenderGraphResourceAllocationManager::waitForFence<re::mtl::BlitCommandEncoder>((void *)a1, a2);
  *(_DWORD *)(a1 + 4 * *(int *)(a1 + 1044) + 776) = *(_DWORD *)(a1 + 1040);
  int v6 = *(_DWORD *)(a1 + 1036) + 1;
  *(_DWORD *)(a1 + 1036) = v6;
  int v7 = *(_DWORD *)(a1 + 1032) + 1;
  BOOL v8 = -v7 < 0;
  int v9 = -v7 & 0x3F;
  int v10 = v7 & 0x3F;
  if (!v8) {
    int v10 = -v9;
  }
  *(_DWORD *)(a1 + 10re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = v10;
  *(_DWORD *)(a1 + 1040) = v6;
  *(_DWORD *)(a1 + 1044) = v10;
  *(_DWORD *)(a1 + 1048) = 2;
  *(unsigned char *)(a1 + 1649) = 1;

  re::mtl::RenderCommandEncoder::~RenderCommandEncoder((re::mtl::RenderCommandEncoder *)v12);
}

id re::DynamicArray<re::RenderGraphResourceAllocationManager::EncoderAndFence>::add(_anonymous_namespace_ *this, uint64_t a2)
{
  unint64_t v4 = *((void *)this + 2);
  if (v4 >= *((void *)this + 1))
  {
    re::DynamicArray<re::RenderGraphResourceAllocationManager::EncoderAndFence>::growCapacity(this, v4 + 1);
    unint64_t v4 = *((void *)this + 2);
  }
  uint64_t v5 = *((void *)this + 4) + 48 * v4;
  *(void *)uint64_t v5 = *(id *)a2;
  re::mtl::RenderCommandEncoder::RenderCommandEncoder((re::mtl::RenderCommandEncoder *)(v5 + 8), (id *)(a2 + 8));
  id result = *(id *)(a2 + 24);
  *(void *)(v5 + 24) = result;
  int v7 = *(_DWORD *)(a2 + 40);
  *(void *)(v5 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = *(void *)(a2 + 32);
  *(_DWORD *)(v5 + 40) = v7;
  ++*((void *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

void re::RenderGraphResourceAllocationManager::waitForFence<re::mtl::BlitCommandEncoder>(void *a1, id *a2)
{
  uint64_t v2 = a1[209];
  if (v2)
  {
    uint64_t v5 = (int *)(a1[211] + 40);
    while (*((id *)v5 - 5) != *a2)
    {
      v5 += 12;
      if (!--v2) {
        goto LABEL_5;
      }
    }
    re::RenderGraphResourceAllocationManager::markLastAccess((uint64_t)a1, *((void *)v5 - 1), *v5);
    uint64_t v7 = *(v5 - 1);
    if (*((_DWORD *)a1 + v7 + 194) != -1) {
      [*a2 waitForFence:a1[v7 + 33]];
    }
    unint64_t v8 = a1[198];
    if (v8)
    {
      uint64_t v9 = 0;
      for (unint64_t i = 0; i < v8; ++i)
      {
        id v11 = (_DWORD *)(a1[200] + v9);
        if (*v11 != *(v5 - 2) || *(void *)(v11 + 1) != *(void *)(v5 - 1))
        {
          [*a2 waitForFence:a1[v11[1] + 33]];
          unint64_t v8 = a1[198];
        }
        v9 += 12;
      }
    }
  }
  else
  {
LABEL_5:
    int v6 = *re::graphicsLogObjects((re *)a1);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl(&dword_233120000, v6, OS_LOG_TYPE_DEFAULT, "ResourceAllocationManager: Failed to find matching encoder", v12, 2u);
    }
  }
}

void re::RenderGraphResourceAllocationManager::onAcquireEncoder<re::mtl::ComputeCommandEncoder>(uint64_t a1, id *a2)
{
  id v11 = 0;
  v12[0] = 0;
  unint64_t v4 = re::globalAllocators((re *)a1);
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4[2] + 32))(v4[2], 264, 8);
  *(_OWORD *)uint64_t v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(void *)(v5 + 256) = 0;
  v12[1] = v5;
  id v13 = 0;
  uint64_t v14 = -1;
  int v15 = 2;
  re::ObjCObject::operator=(&v13, a2);
  uint64_t v14 = *(void *)(a1 + 1040);
  int v15 = *(_DWORD *)(a1 + 1048);
  re::DynamicArray<re::RenderGraphResourceAllocationManager::EncoderAndFence>::add((_anonymous_namespace_ *)(a1 + 1656), (uint64_t)&v11);
  re::RenderGraphResourceAllocationManager::waitForFence<re::mtl::ComputeCommandEncoder>((void *)a1, a2);
  *(_DWORD *)(a1 + 4 * *(int *)(a1 + 1044) + 776) = *(_DWORD *)(a1 + 1040);
  int v6 = *(_DWORD *)(a1 + 1036) + 1;
  *(_DWORD *)(a1 + 1036) = v6;
  int v7 = *(_DWORD *)(a1 + 1032) + 1;
  BOOL v8 = -v7 < 0;
  int v9 = -v7 & 0x3F;
  int v10 = v7 & 0x3F;
  if (!v8) {
    int v10 = -v9;
  }
  *(_DWORD *)(a1 + 10re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = v10;
  *(_DWORD *)(a1 + 1040) = v6;
  *(_DWORD *)(a1 + 1044) = v10;
  *(_DWORD *)(a1 + 1048) = 2;
  *(unsigned char *)(a1 + 1649) = 1;

  re::mtl::RenderCommandEncoder::~RenderCommandEncoder((re::mtl::RenderCommandEncoder *)v12);
}

void re::RenderGraphResourceAllocationManager::waitForFence<re::mtl::ComputeCommandEncoder>(void *a1, id *a2)
{
  uint64_t v2 = a1[209];
  if (v2)
  {
    uint64_t v5 = (int *)(a1[211] + 40);
    while (*((id *)v5 - 2) != *a2)
    {
      v5 += 12;
      if (!--v2) {
        goto LABEL_5;
      }
    }
    re::RenderGraphResourceAllocationManager::markLastAccess((uint64_t)a1, *((void *)v5 - 1), *v5);
    uint64_t v7 = *(v5 - 1);
    if (*((_DWORD *)a1 + v7 + 194) != -1) {
      [*a2 waitForFence:a1[v7 + 33]];
    }
    unint64_t v8 = a1[198];
    if (v8)
    {
      uint64_t v9 = 0;
      for (unint64_t i = 0; i < v8; ++i)
      {
        id v11 = (_DWORD *)(a1[200] + v9);
        if (*v11 != *(v5 - 2) || *(void *)(v11 + 1) != *(void *)(v5 - 1))
        {
          [*a2 waitForFence:a1[v11[1] + 33]];
          unint64_t v8 = a1[198];
        }
        v9 += 12;
      }
    }
  }
  else
  {
LABEL_5:
    int v6 = *re::graphicsLogObjects((re *)a1);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl(&dword_233120000, v6, OS_LOG_TYPE_DEFAULT, "ResourceAllocationManager: Failed to find matching encoder", v12, 2u);
    }
  }
}

void re::RenderGraphResourceAllocationManager::onAcquireEncoder<re::mtl::RenderCommandEncoder>(uint64_t a1, id *a2)
{
  id v11 = 0;
  id v12 = 0;
  unint64_t v4 = re::globalAllocators((re *)a1);
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4[2] + 32))(v4[2], 264, 8);
  *(_OWORD *)uint64_t v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(void *)(v5 + 256) = 0;
  id v13 = (re::mtl::RenderEncoderImpCache *)v5;
  id v14 = 0;
  uint64_t v15 = -1;
  int v16 = 2;
  re::ObjCObject::operator=(&v12, a2);
  re::mtl::RenderEncoderImpCache::build(v13, v12);
  uint64_t v15 = *(void *)(a1 + 1040);
  int v16 = *(_DWORD *)(a1 + 1048);
  re::DynamicArray<re::RenderGraphResourceAllocationManager::EncoderAndFence>::add((_anonymous_namespace_ *)(a1 + 1656), (uint64_t)&v11);
  re::RenderGraphResourceAllocationManager::waitForFence<re::mtl::RenderCommandEncoder>((void *)a1, a2);
  *(_DWORD *)(a1 + 4 * *(int *)(a1 + 1044) + 776) = *(_DWORD *)(a1 + 1040);
  int v6 = *(_DWORD *)(a1 + 1036) + 1;
  *(_DWORD *)(a1 + 1036) = v6;
  int v7 = *(_DWORD *)(a1 + 1032) + 1;
  BOOL v8 = -v7 < 0;
  int v9 = -v7 & 0x3F;
  int v10 = v7 & 0x3F;
  if (!v8) {
    int v10 = -v9;
  }
  *(_DWORD *)(a1 + 10re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = v10;
  *(_DWORD *)(a1 + 1040) = v6;
  *(_DWORD *)(a1 + 1044) = v10;
  *(_DWORD *)(a1 + 1048) = 2;
  *(unsigned char *)(a1 + 1649) = 1;

  re::mtl::RenderCommandEncoder::~RenderCommandEncoder((re::mtl::RenderCommandEncoder *)&v12);
}

void re::RenderGraphResourceAllocationManager::addCompleteFence(re::RenderGraphResourceAllocationManager *this, re::mtl::ComputeCommandEncoder *a2)
{
  uint64_t v2 = *((void *)this + 209);
  if (v2)
  {
    uint64_t v3 = *(void *)a2;
    unint64_t v4 = (uint64_t *)(*((void *)this + 211) + 32);
    while (*(v4 - 1) != v3)
    {
      v4 += 6;
      if (!--v2) {
        goto LABEL_5;
      }
    }
    int v6 = (re::RenderGraphResourceAllocationManager *)((char *)this + 1608);
    re::DynamicArray<re::RenderGraphResourceAllocationManager::FenceIndex>::add(v6, v4);
  }
  else
  {
LABEL_5:
    uint64_t v5 = *re::graphicsLogObjects(this);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int v7 = 0;
      _os_log_impl(&dword_233120000, v5, OS_LOG_TYPE_DEFAULT, "ResourceAllocationManager: Failed to find matching encoder", v7, 2u);
    }
  }
}

void re::RenderGraphResourceAllocationManager::onReleaseEncoder<re::mtl::RenderCommandEncoder>(void *a1, void **a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[209];
  if (v2)
  {
    uint64_t v3 = a1;
    uint64_t v4 = 0;
    unint64_t v5 = 0;
    uint64_t v6 = a1[211];
    a1 = *a2;
    while (*(void **)(v6 + v4 + 8) != a1)
    {
      ++v5;
      v4 += 48;
      if (v2 == v5) {
        goto LABEL_5;
      }
    }
    objc_msgSend(a1, sel_updateFence_afterStages_, v3[*(int *)(v6 + v4 + 36) + 33], 2);
    if (v3[209] <= v5)
    {
      long long v11 = 0u;
      long long v12 = 0u;
      long long v9 = 0u;
      long long v10 = 0u;
      *(_OWORD *)buf = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    re::DynamicArray<re::RenderGraphResourceAllocationManager::FenceIndex>::add((_anonymous_namespace_ *)(v3 + 201), (uint64_t *)(v3[211] + v4 + 32));
    re::DynamicArray<re::RenderGraphResourceAllocationManager::EncoderAndFence>::removeAt((uint64_t)(v3 + 207), v5);
  }
  else
  {
LABEL_5:
    int v7 = *re::graphicsLogObjects((re *)a1);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233120000, v7, OS_LOG_TYPE_DEFAULT, "ResourceAllocationManager: Failed to find matching encoder", buf, 2u);
    }
  }
}

void re::DynamicArray<re::RenderGraphResourceAllocationManager::EncoderAndFence>::removeAt(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (v3 - 1 > a2)
  {
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = v5 + 48 * v3;
    int v7 = (void **)(v6 - 48);
    BOOL v8 = (void **)(v5 + 48 * a2);
    if (v8 != (void **)(v6 - 48))
    {
      long long v9 = *v7;
      *int v7 = 0;
      long long v10 = *v8;
      *BOOL v8 = v9;
    }
    uint64_t v11 = v5 + 48 * a2;
    re::ObjCObject::operator=((id *)(v11 + 8), (id *)(v6 - 40));
    re::mtl::RenderEncoderImpCache::build(*(re::mtl::RenderEncoderImpCache **)(v11 + 16), *(id *)(v11 + 8));
    if ((void **)v11 != v7)
    {
      uint64_t v12 = *(void *)(v6 - 24);
      *(void *)(v6 - 24) = 0;
      uint64_t v13 = *(void **)(v11 + 24);
      *(void *)(v11 + 24) = v12;
    }
    uint64_t v14 = v5 + 48 * a2;
    uint64_t v15 = *(void *)(v6 - 16);
    *(_DWORD *)(v14 + 40) = *(_DWORD *)(v6 - 8);
    *(void *)(v14 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = v15;
    unint64_t v3 = *(void *)(a1 + 16);
  }
  uint64_t v16 = *(void *)(a1 + 32) + 48 * v3;

  re::mtl::RenderCommandEncoder::~RenderCommandEncoder((re::mtl::RenderCommandEncoder *)(v16 - 40));
  --*(void *)(a1 + 16);
  ++*(_DWORD *)(a1 + 24);
}

void re::RenderGraphResourceAllocationManager::onReleaseEncoder<re::mtl::BlitCommandEncoder>(void *a1, void **a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[209];
  if (v2)
  {
    unint64_t v3 = a1;
    uint64_t v4 = 0;
    unint64_t v5 = 0;
    uint64_t v6 = a1[211];
    a1 = *a2;
    while (*(void **)(v6 + v4) != a1)
    {
      ++v5;
      v4 += 48;
      if (v2 == v5) {
        goto LABEL_5;
      }
    }
    [a1 updateFence:v3[*(int *)(v6 + v4 + 36) + 33]];
    if (v3[209] <= v5)
    {
      long long v11 = 0u;
      long long v12 = 0u;
      long long v9 = 0u;
      long long v10 = 0u;
      *(_OWORD *)buf = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    re::DynamicArray<re::RenderGraphResourceAllocationManager::FenceIndex>::add((_anonymous_namespace_ *)(v3 + 201), (uint64_t *)(v3[211] + v4 + 32));
    re::DynamicArray<re::RenderGraphResourceAllocationManager::EncoderAndFence>::removeAt((uint64_t)(v3 + 207), v5);
  }
  else
  {
LABEL_5:
    int v7 = *re::graphicsLogObjects((re *)a1);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233120000, v7, OS_LOG_TYPE_DEFAULT, "ResourceAllocationManager: Failed to find matching encoder", buf, 2u);
    }
  }
}

void re::RenderGraphResourceAllocationManager::onReleaseEncoder<re::mtl::ComputeCommandEncoder>(void *a1, void **a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[209];
  if (v2)
  {
    unint64_t v3 = a1;
    uint64_t v4 = 0;
    unint64_t v5 = 0;
    uint64_t v6 = a1[211];
    a1 = *a2;
    while (*(void **)(v6 + v4 + 24) != a1)
    {
      ++v5;
      v4 += 48;
      if (v2 == v5) {
        goto LABEL_5;
      }
    }
    [a1 updateFence:v3[*(int *)(v6 + v4 + 36) + 33]];
    if (v3[209] <= v5)
    {
      long long v11 = 0u;
      long long v12 = 0u;
      long long v9 = 0u;
      long long v10 = 0u;
      *(_OWORD *)buf = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    re::DynamicArray<re::RenderGraphResourceAllocationManager::FenceIndex>::add((_anonymous_namespace_ *)(v3 + 201), (uint64_t *)(v3[211] + v4 + 32));
    re::DynamicArray<re::RenderGraphResourceAllocationManager::EncoderAndFence>::removeAt((uint64_t)(v3 + 207), v5);
  }
  else
  {
LABEL_5:
    int v7 = *re::graphicsLogObjects((re *)a1);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233120000, v7, OS_LOG_TYPE_DEFAULT, "ResourceAllocationManager: Failed to find matching encoder", buf, 2u);
    }
  }
}

void *re::DynamicArray<re::RenderGraphResourceAllocationManager::TextureIndexAndStage>::add(void *this, void *a2)
{
  unint64_t v3 = this;
  unint64_t v4 = this[2];
  if (v4 >= this[1])
  {
    this = re::DynamicArray<re::RenderGraphResourceAllocationManager::TextureIndexAndStage>::growCapacity(this, v4 + 1);
    unint64_t v4 = v3[2];
  }
  *(void *)(v3[4] + 8 * v4) = *a2;
  ++v3[2];
  ++*((_DWORD *)v3 + 6);
  return this;
}

_anonymous_namespace_ *re::RenderGraphResourceAllocationManager::processResourceHazards(_anonymous_namespace_ *this)
{
  uint64_t v2 = this;
  uint64_t v47 = *MEMORY[0x263EF8340];
  uint64_t v3 = *((void *)this + 168);
  if (v3)
  {
    unint64_t v1 = *((void *)this + 170);
    unint64_t v4 = v1 + 8 * v3;
    do
    {
      int v5 = *(_DWORD *)v1;
      int v6 = *(_DWORD *)(v1 + 4);
      v1 += 8;
      LODWORD(v42) = v5;
      BYTE4(v42) = 0;
      DWORD2(v42) = v6;
      this = re::DynamicArray<re::RenderGraphResourceAllocationManager::FenceIndex>::add((_anonymous_namespace_ *)((char *)v2 + 1488), (uint64_t *)&v42);
    }
    while (v1 != v4);
  }
  uint64_t v7 = *((void *)v2 + 178);
  if (v7)
  {
    unint64_t v1 = *((void *)v2 + 180);
    uint64_t v8 = 4 * v7;
    do
    {
      int v9 = *(_DWORD *)v1;
      v1 += 4;
      LODWORD(v42) = v9;
      BYTE4(v42) = 1;
      DWORD2(v42) = 2;
      this = re::DynamicArray<re::RenderGraphResourceAllocationManager::FenceIndex>::add((_anonymous_namespace_ *)((char *)v2 + 1488), (uint64_t *)&v42);
      v8 -= 4;
    }
    while (v8);
  }
  uint64_t v10 = *((void *)v2 + 173);
  if (v10)
  {
    unint64_t v1 = *((void *)v2 + 175);
    unint64_t v11 = v1 + 8 * v10;
    do
    {
      int v12 = *(_DWORD *)v1;
      int v13 = *(_DWORD *)(v1 + 4);
      v1 += 8;
      LODWORD(v42) = v12;
      BYTE4(v42) = 0;
      DWORD2(v42) = v13;
      this = re::DynamicArray<re::RenderGraphResourceAllocationManager::FenceIndex>::add((_anonymous_namespace_ *)((char *)v2 + 1528), (uint64_t *)&v42);
    }
    while (v1 != v11);
  }
  uint64_t v14 = *((void *)v2 + 183);
  if (v14)
  {
    uint64_t v15 = (int *)*((void *)v2 + 185);
    unint64_t v1 = (unint64_t)v2 + 1528;
    uint64_t v16 = 4 * v14;
    do
    {
      int v17 = *v15++;
      LODWORD(v42) = v17;
      BYTE4(v42) = 1;
      DWORD2(v42) = 2;
      this = re::DynamicArray<re::RenderGraphResourceAllocationManager::FenceIndex>::add((_anonymous_namespace_ *)((char *)v2 + 1528), (uint64_t *)&v42);
      v16 -= 4;
    }
    while (v16);
  }
  unint64_t v18 = *((void *)v2 + 188);
  if (v18)
  {
    uint64_t v19 = 0;
    while (1)
    {
      uint64_t v20 = *((void *)v2 + 190);
      unint64_t v21 = *(unsigned int *)(v20 + 12 * v19);
      if (*((void *)v2 + 134) <= v21) {
        break;
      }
      uint64_t v22 = *((void *)v2 + 136) + 184 * v21;
      uint64_t v23 = v22 + 8;
      uint64_t v24 = v22 + 80;
      if (*(unsigned char *)(v20 + 12 * v19 + 4)) {
        uint64_t v25 = v23;
      }
      else {
        uint64_t v25 = v24;
      }
      if (*(void *)(v25 + 8))
      {
        uint64_t v26 = 0;
        unint64_t v27 = 0;
        unint64_t v28 = (unsigned int *)(v20 + 12 * v19 + 8);
        do
        {
          uint64_t v29 = v25 + 24;
          if ((*(unsigned char *)(v25 + 16) & 1) == 0) {
            uint64_t v29 = *(void *)(v25 + 32);
          }
          unint64_t v1 = v1 & 0xFFFFFFFF00000000 | *v28;
          this = re::RenderGraphResourceAllocationManager::SetupData::addUniqueFence((_anonymous_namespace_ *)((char *)v2 + 1328), *(void *)(v29 + v26), v1);
          ++v27;
          v26 += 12;
        }
        while (*(void *)(v25 + 8) > v27);
        unint64_t v18 = *((void *)v2 + 188);
      }
      if (v18 <= ++v19) {
        goto LABEL_26;
      }
    }
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    long long v42 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_41:
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    long long v42 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
LABEL_26:
  unint64_t v30 = *((void *)v2 + 193);
  if (v30)
  {
    uint64_t v31 = 0;
    while (1)
    {
      uint64_t v32 = *((void *)v2 + 195);
      unint64_t v33 = *(unsigned int *)(v32 + 12 * v31);
      if (*((void *)v2 + 139) <= v33) {
        break;
      }
      uint64_t v34 = *((void *)v2 + 141) + 184 * v33;
      uint64_t v35 = v34 + 8;
      uint64_t v36 = v34 + 80;
      if (*(unsigned char *)(v32 + 12 * v31 + 4)) {
        uint64_t v37 = v35;
      }
      else {
        uint64_t v37 = v36;
      }
      if (*(void *)(v37 + 8))
      {
        uint64_t v38 = 0;
        unint64_t v39 = 0;
        int64x2_t v40 = (unsigned int *)(v32 + 12 * v31 + 8);
        do
        {
          uint64_t v41 = v37 + 24;
          if ((*(unsigned char *)(v37 + 16) & 1) == 0) {
            uint64_t v41 = *(void *)(v37 + 32);
          }
          unint64_t v1 = v1 & 0xFFFFFFFF00000000 | *v40;
          this = re::RenderGraphResourceAllocationManager::SetupData::addUniqueFence((_anonymous_namespace_ *)((char *)v2 + 1328), *(void *)(v41 + v38), v1);
          ++v39;
          v38 += 12;
        }
        while (*(void *)(v37 + 8) > v39);
        unint64_t v30 = *((void *)v2 + 193);
      }
      if (v30 <= ++v31) {
        return this;
      }
    }
    goto LABEL_41;
  }
  return this;
}

uint64_t re::RenderGraphResourceAllocationManager::heapGroupHierarchyFor(re::RenderGraphResourceAllocationManager *this, unint64_t a2)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  v23[0] = a2;
  if (!a2) {
    return (uint64_t)this + 64;
  }
  unint64_t v4 = (char *)this + 160;
  unint64_t v5 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
  unint64_t v6 = v5 ^ (v5 >> 31);
  if (*((void *)this + 20))
  {
    uint64_t v7 = *(unsigned int *)(*((void *)this + 21) + 4 * (v6 % *((unsigned int *)this + 46)));
    if (v7 != 0x7FFFFFFF)
    {
      uint64_t v21 = *((void *)this + 22);
      if (*(void *)(v21 + 120 * v7 + 16) == a2) {
        return v21 + 120 * v7 + 24;
      }
      while (1)
      {
        LODWORD(v7) = *(_DWORD *)(v21 + 120 * v7 + 8) & 0x7FFFFFFF;
        if (v7 == 0x7FFFFFFF) {
          break;
        }
        if (*(void *)(v21 + 120 * v7 + 16) == a2) {
          return v21 + 120 * v7 + 24;
        }
      }
    }
    uint64_t v30 = 0;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    int v29 = 0;
    unint64_t v8 = v6 % *((unsigned int *)this + 46);
    uint64_t v9 = *(unsigned int *)(*((void *)this + 21) + 4 * v8);
    if (v9 != 0x7FFFFFFF)
    {
      uint64_t v10 = *((void *)this + 22);
      if (*(void *)(v10 + 120 * v9 + 16) == a2)
      {
LABEL_8:
        uint64_t v11 = v10 + 120 * v9;
        goto LABEL_12;
      }
      while (1)
      {
        LODWORD(v9) = *(_DWORD *)(v10 + 120 * v9 + 8) & 0x7FFFFFFF;
        if (v9 == 0x7FFFFFFF) {
          break;
        }
        if (*(void *)(v10 + 120 * v9 + 16) == a2) {
          goto LABEL_8;
        }
      }
    }
  }
  else
  {
    LODWORD(v8) = 0;
    uint64_t v30 = 0;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    int v29 = 0;
  }
  unsigned int v13 = re::HashTable<unsigned long long,re::RenderGraphResourceAllocationManager::HeapGroupHierarchy,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove((uint64_t)v4, v8, v6, v23, (uint64_t *)&v24);
  ++*((_DWORD *)this + 50);
  uint64_t v11 = *((void *)this + 22) + 120 * v13;
LABEL_12:
  uint64_t v12 = v11 + 24;
  re::DynamicArray<re::RenderGraphResourceAllocationManager::HeapGroup>::deinit((uint64_t)&v27 + 8);
  if (*((void *)&v24 + 1) && *((void *)&v26 + 1)) {
    (*(void (**)(void))(**((void **)&v24 + 1) + 40))();
  }
  re::RenderGraphResourceAllocationManager::allocateSmallBlockHeap((re::RenderGraphResourceAllocationManager *)&v24, (uint64_t)this, a2);
  *(void *)uint64_t v12 = v24;
  re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v12 + 8, (uint64_t)&v24 + 8);
  *(_WORD *)(v12 + 48) = v27;
  if (*((void *)&v24 + 1) && *((void *)&v26 + 1)) {
    (*(void (**)(void))(**((void **)&v24 + 1) + 40))();
  }
  uint64_t v14 = *((void *)this + 2);
  if (v14)
  {
    uint64_t v15 = 0;
    while (!(*(void *)(*((void *)this + 4) + 8 * v15) >> 30))
    {
      if (v14 == ++v15) {
        goto LABEL_22;
      }
    }
  }
  else
  {
LABEL_22:
    uint64_t v15 = v14 - 1;
  }
  re::DynamicArray<re::RenderGraphResourceAllocationManager::HeapGroup>::resize((void *)(v12 + 56), v15 + 1);
  if (*(void *)(v12 + 72))
  {
    uint64_t v16 = 0;
    unint64_t v17 = 0;
    do
    {
      uint64_t v18 = re::RenderGraphResourceAllocationManager::indexToSize(this, v17);
      unint64_t v19 = *(void *)(v12 + 72);
      if (v19 <= v17)
      {
        v23[1] = 0;
        long long v27 = 0u;
        long long v28 = 0u;
        long long v25 = 0u;
        long long v26 = 0u;
        long long v24 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v31 = 136315906;
        uint64_t v32 = "operator[]";
        __int16 v33 = 1024;
        int v34 = 789;
        __int16 v35 = 2048;
        unint64_t v36 = v17;
        __int16 v37 = 2048;
        unint64_t v38 = v19;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      uint64_t v20 = (uint64_t *)(*(void *)(v12 + 88) + v16);
      *uint64_t v20 = v18;
      if ((unint64_t)v20[2] <= 0x7F)
      {
        re::DynamicArray<re::RenderGraphResourceAllocationManager::HeapAndFences>::setCapacity(v20 + 1, 0x80uLL);
        unint64_t v19 = *(void *)(v12 + 72);
      }
      ++v17;
      v16 += 48;
    }
    while (v19 > v17);
  }
  return v12;
}

_anonymous_namespace_ *re::DynamicOverflowArray<re::RenderGraphResourceAllocationManager::FenceIndex,4ul>::add(_anonymous_namespace_ *result, uint64_t *a2)
{
  uint64_t v3 = result;
  if (!*(void *)result)
  {
    unint64_t v10 = *((void *)v3 + 1) + 1;
    id result = (_anonymous_namespace_ *)re::DynamicOverflowArray<re::RenderGraphResourceAllocationManager::FenceIndex,4ul>::setCapacity(v3, v10);
    int v11 = *((_DWORD *)v3 + 4) + 2;
    *((_DWORD *)v3 + 4) = v11;
    if ((v11 & 1) == 0) {
      goto LABEL_12;
    }
LABEL_18:
    uint64_t v12 = (void *)((char *)v3 + 24);
    goto LABEL_19;
  }
  unint64_t v4 = *((void *)result + 1);
  int v5 = *((_DWORD *)result + 4);
  if ((v5 & 1) == 0)
  {
    unint64_t v6 = *((void *)result + 3);
    BOOL v8 = v4 >= v6;
    unint64_t v7 = v4 + 1;
    BOOL v8 = !v8 || v6 >= v7;
    if (!v8)
    {
      unint64_t v9 = 2 * v6;
      goto LABEL_14;
    }
    goto LABEL_11;
  }
  unint64_t v7 = v4 + 1;
  if (v7 < 5)
  {
LABEL_11:
    if ((v5 & 1) == 0) {
      goto LABEL_12;
    }
    goto LABEL_18;
  }
  unint64_t v9 = 8;
LABEL_14:
  if (v9 <= v7) {
    unint64_t v13 = v7;
  }
  else {
    unint64_t v13 = v9;
  }
  id result = (_anonymous_namespace_ *)re::DynamicOverflowArray<re::RenderGraphResourceAllocationManager::FenceIndex,4ul>::setCapacity(result, v13);
  if (*((_DWORD *)v3 + 4)) {
    goto LABEL_18;
  }
LABEL_12:
  uint64_t v12 = (void *)*((void *)v3 + 4);
LABEL_19:
  uint64_t v14 = (uint64_t)v12 + 12 * *((void *)v3 + 1);
  uint64_t v15 = *a2;
  *(_DWORD *)(v14 + 8) = *((_DWORD *)a2 + 2);
  *(void *)uint64_t v14 = v15;
  ++*((void *)v3 + 1);
  *((_DWORD *)v3 + 4) += 2;
  return result;
}

uint64_t DeviceHeap::name(DeviceHeap *this)
{
  if (*((unsigned char *)this + 32)) {
    return *((void *)this + 5);
  }
  else {
    return (uint64_t)this + 33;
  }
}

uint64_t re::Heap::releaseTextureForCaching(re::Heap *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 32))();
}

uint64_t re::Heap::releaseBufferForCaching(re::Heap *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 56))();
}

uint64_t re::Heap::onFrameFinishForCaching(re::Heap *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 80))();
}

id DeviceHeap::texture@<X0>(DeviceHeap *this@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  if (*((void *)this + 9) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  id result = *(id *)(*((void *)this + 11) + 8 * a2);
  *a3 = result;
  return result;
}

id DeviceHeap::buffer@<X0>(DeviceHeap *this@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  if (*((void *)this + 14) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  id result = *(id *)(*((void *)this + 16) + 8 * a2);
  *a3 = result;
  return result;
}

uint64_t DeviceHeap::maxAvailableSize(DeviceHeap *this)
{
  return 0x40000000;
}

uint64_t MetalHeap::name(MetalHeap *this)
{
  if (*((unsigned char *)this + 40)) {
    return *((void *)this + 6);
  }
  else {
    return (uint64_t)this + 41;
  }
}

id *MetalHeap::texture@<X0>(MetalHeap *this@<X0>, uint64_t a2@<X1>, id **a3@<X8>)
{
  id result = (id *)re::DataArray<re::TextureAtlasTile>::tryGet((uint64_t)this + 64, a2);
  if (result) {
    id result = (id *)*result;
  }
  *a3 = result;
  return result;
}

id *MetalHeap::buffer@<X0>(MetalHeap *this@<X0>, uint64_t a2@<X1>, id **a3@<X8>)
{
  id result = (id *)re::DataArray<re::TextureAtlasTile>::tryGet((uint64_t)this + 128, a2);
  if (result) {
    id result = (id *)*result;
  }
  *a3 = result;
  return result;
}

id MetalHeap::maxAvailableSize(id *this, uint64_t a2)
{
  return objc_msgSend(this[2], sel_maxAvailableSizeWithAlignment_, a2);
}

uint64_t CachingHeap::name(CachingHeap *this)
{
  if (*((unsigned char *)this + 32)) {
    return *((void *)this + 5);
  }
  else {
    return (uint64_t)this + 33;
  }
}

id CachingHeap::texture@<X0>(CachingHeap *this@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  if (*((void *)this + 9) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  id result = *(id *)(*((void *)this + 11) + 8 * a2);
  *a3 = result;
  return result;
}

id CachingHeap::buffer@<X0>(CachingHeap *this@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  if (*((void *)this + 14) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  id result = *(id *)(*((void *)this + 16) + 8 * a2);
  *a3 = result;
  return result;
}

uint64_t CachingHeap::maxAvailableSize(CachingHeap *this)
{
  return 0x40000000;
}

uint64_t re::DynamicArray<re::RenderGraphResourceAllocationManager::HeapGroup>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = 48 * v4;
        uint64_t v6 = v3 + 8;
        do
        {
          re::DynamicArray<re::RenderGraphResourceAllocationManager::HeapAndFences>::deinit(v6);
          v6 += 48;
          v5 -= 48;
        }
        while (v5);
        uint64_t result = *(void *)a1;
        uint64_t v3 = *(void *)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::DynamicArray<re::RenderGraphResourceAllocationManager::HeapAndFences>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = 56 * v4;
        uint64_t v6 = v3 + 8;
        do
        {
          re::DynamicArray<unsigned long>::deinit(v6);
          v6 += 56;
          v5 -= 56;
        }
        while (v5);
        uint64_t result = *(void *)a1;
        uint64_t v3 = *(void *)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::DynamicOverflowArray<re::RenderGraphResourceAllocationManager::FenceIndex,4ul>::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    if (*(void *)a1)
    {
      if (*(void *)a2 && *(void *)a1 != *(void *)a2)
      {
        re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || !other.isInitialized() || m_allocator == other.m_allocator", "operator=", 527);
        uint64_t result = _os_crash();
        __break(1u);
        return result;
      }
    }
    if (*(unsigned char *)(a2 + 16))
    {
      if (*(void *)(a2 + 8))
      {
        re::DynamicOverflowArray<re::RenderGraphResourceAllocationManager::FenceIndex,4ul>::move(a1, a2);
      }
      else
      {
        re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1);
        *(void *)a1 = *(void *)a2;
        *(_DWORD *)(a2 + 16) += 2;
        *(_DWORD *)(a1 + 16) += 2;
      }
    }
    else
    {
      *(void *)(a1 + 8) = 0;
      *(_DWORD *)(a1 + 16) += 2;
      re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::swap((uint64_t *)a1, (uint64_t *)a2);
    }
  }
  return a1;
}

void *re::DynamicOverflowArray<re::RenderGraphResourceAllocationManager::FenceIndex,4ul>::move(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  if (v4 >= *(void *)(a1 + 8))
  {
    re::DynamicOverflowArray<re::RenderGraphResourceAllocationManager::FenceIndex,4ul>::setCapacity((void *)a1, v4);
    if (*(unsigned char *)(a2 + 16)) {
      unint64_t v7 = (const void *)(a2 + 24);
    }
    else {
      unint64_t v7 = *(const void **)(a2 + 32);
    }
    uint64_t v8 = *(void *)(a1 + 8);
    int v9 = *(_DWORD *)(a1 + 16);
    if (v9)
    {
      unint64_t v10 = (void *)(a1 + 24);
      if (!v8)
      {
LABEL_18:
        if (v9) {
          uint64_t v11 = a1 + 24;
        }
        else {
          uint64_t v11 = *(void *)(a1 + 32);
        }
        uint64_t v12 = (void *)(v11 + 12 * *(void *)(a1 + 8));
        if (*(_DWORD *)(a2 + 16)) {
          uint64_t v13 = a2 + 24;
        }
        else {
          uint64_t v13 = *(void *)(a2 + 32);
        }
        uint64_t result = memcpy(v12, (const void *)(v13 + 12 * *(void *)(a1 + 8)), 12 * v4 - 12 * *(void *)(a1 + 8));
        goto LABEL_25;
      }
    }
    else
    {
      unint64_t v10 = *(void **)(a1 + 32);
      if (!v8) {
        goto LABEL_18;
      }
    }
    memmove(v10, v7, 12 * v8);
    int v9 = *(_DWORD *)(a1 + 16);
    goto LABEL_18;
  }
  if (*(unsigned char *)(a2 + 16)) {
    uint64_t v5 = (const void *)(a2 + 24);
  }
  else {
    uint64_t v5 = *(const void **)(a2 + 32);
  }
  if ((*(unsigned char *)(a1 + 16) & 1) == 0)
  {
    uint64_t result = *(void **)(a1 + 32);
    if (!v4) {
      goto LABEL_25;
    }
    goto LABEL_15;
  }
  uint64_t result = (void *)(a1 + 24);
  if (v4) {
LABEL_15:
  }
    uint64_t result = memmove(result, v5, 12 * v4);
LABEL_25:
  *(void *)(a1 + 8) = v4;
  *(void *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) += 4;
  *(_DWORD *)(a1 + 16) += 2;
  return result;
}

void *re::DynamicOverflowArray<re::RenderGraphResourceAllocationManager::FenceIndex,4ul>::setCapacity(void *result, unint64_t a2)
{
  unint64_t v4 = result;
  uint64_t v5 = *result;
  if (a2 && !v5)
  {
    uint64_t result = (void *)re::DynamicOverflowArray<re::RenderGraphResourceAllocationManager::FenceIndex,4ul>::setCapacity(v4, a2);
    int v6 = *((_DWORD *)v4 + 4) + 2;
LABEL_4:
    *((_DWORD *)v4 + 4) = v6;
    return result;
  }
  int v7 = *((_DWORD *)result + 4);
  if (v7) {
    uint64_t v8 = 4;
  }
  else {
    uint64_t v8 = result[3];
  }
  if (v8 != a2)
  {
    unint64_t v9 = result[1];
    if (v9 <= a2 && (a2 > 4 || (v7 & 1) == 0))
    {
      if (a2 < 5)
      {
        uint64_t v14 = result + 3;
        uint64_t v15 = v4[4];
        if (v7) {
          uint64_t v16 = v4 + 3;
        }
        else {
          uint64_t v16 = (const void *)v4[4];
        }
        memcpy(v14, v16, 12 * v9);
        uint64_t result = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 40))(v5, v15);
        int v6 = *((_DWORD *)v4 + 4) | 1;
        goto LABEL_4;
      }
      if (is_mul_ok(a2, 0xCuLL))
      {
        uint64_t v2 = 12 * a2;
        unint64_t v10 = (void *)(*(uint64_t (**)(void, unint64_t, uint64_t))(*(void *)v5 + 32))(*result, 12 * a2, 4);
        if (v10)
        {
          uint64_t v12 = v10;
          if (v4[2]) {
            uint64_t v13 = v4 + 3;
          }
          else {
            uint64_t v13 = (const void *)v4[4];
          }
          uint64_t result = memcpy(v10, v13, 12 * v4[1]);
          int v17 = *((_DWORD *)v4 + 4);
          if ((v17 & 1) == 0)
          {
            uint64_t result = (void *)(*(uint64_t (**)(void, void))(*(void *)*v4 + 40))(*v4, v4[4]);
            int v17 = *((_DWORD *)v4 + 4);
          }
          *((_DWORD *)v4 + 4) = v17 & 0xFFFFFFFE;
          v4[3] = a2;
          v4[4] = v12;
          return result;
        }
      }
      else
      {
        re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicOverflowArray<T, N>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 646, 12, a2);
        _os_crash();
        __break(1u);
      }
      re::internal::assertLog((re::internal *)6, v11, "assertion failure: '%s' (%s:line %i) DynamicOverflowArray<T, N> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 650, v2, *(void *)(*v4 + 8));
      uint64_t result = (void *)_os_crash();
      __break(1u);
    }
  }
  return result;
}

uint64_t re::DynamicOverflowArray<re::RenderGraphResourceAllocationManager::FenceIndex,4ul>::operator=(uint64_t a1, uint64_t *a2)
{
  if ((uint64_t *)a1 != a2)
  {
    uint64_t v4 = *a2;
    if (*(void *)a1)
    {
      if (v4) {
        re::DynamicOverflowArray<re::RenderGraphResourceAllocationManager::FenceIndex,4ul>::copy(a1, (uint64_t)a2);
      }
      else {
        *(void *)(a1 + 8) = 0;
      }
      *(_DWORD *)(a1 + 16) += 2;
    }
    else if (v4)
    {
      unint64_t v5 = a2[1];
      *(void *)a1 = v4;
      re::DynamicOverflowArray<re::RenderGraphResourceAllocationManager::FenceIndex,4ul>::setCapacity((void *)a1, v5);
      *(_DWORD *)(a1 + 16) += 2;
      re::DynamicOverflowArray<re::RenderGraphResourceAllocationManager::FenceIndex,4ul>::copy(a1, (uint64_t)a2);
    }
  }
  return a1;
}

void *re::DynamicOverflowArray<re::RenderGraphResourceAllocationManager::FenceIndex,4ul>::copy(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 8);
  if (v4 >= *(void *)(a1 + 8))
  {
    re::DynamicOverflowArray<re::RenderGraphResourceAllocationManager::FenceIndex,4ul>::setCapacity((void *)a1, *(void *)(a2 + 8));
    if (*(unsigned char *)(a2 + 16)) {
      int v7 = (const void *)(a2 + 24);
    }
    else {
      int v7 = *(const void **)(a2 + 32);
    }
    uint64_t v8 = *(void *)(a1 + 8);
    int v9 = *(_DWORD *)(a1 + 16);
    if (v9)
    {
      unint64_t v10 = (void *)(a1 + 24);
      if (!v8)
      {
LABEL_18:
        if (v9) {
          uint64_t v11 = a1 + 24;
        }
        else {
          uint64_t v11 = *(void *)(a1 + 32);
        }
        uint64_t v12 = (void *)(v11 + 12 * *(void *)(a1 + 8));
        if (*(_DWORD *)(a2 + 16)) {
          uint64_t v13 = a2 + 24;
        }
        else {
          uint64_t v13 = *(void *)(a2 + 32);
        }
        uint64_t result = memcpy(v12, (const void *)(v13 + 12 * *(void *)(a1 + 8)), 12 * v4 - 12 * *(void *)(a1 + 8));
        goto LABEL_25;
      }
    }
    else
    {
      unint64_t v10 = *(void **)(a1 + 32);
      if (!v8) {
        goto LABEL_18;
      }
    }
    memmove(v10, v7, 12 * v8);
    int v9 = *(_DWORD *)(a1 + 16);
    goto LABEL_18;
  }
  if (*(unsigned char *)(a2 + 16)) {
    unint64_t v5 = (const void *)(a2 + 24);
  }
  else {
    unint64_t v5 = *(const void **)(a2 + 32);
  }
  if ((*(unsigned char *)(a1 + 16) & 1) == 0)
  {
    uint64_t result = *(void **)(a1 + 32);
    if (!v4) {
      goto LABEL_25;
    }
    goto LABEL_15;
  }
  uint64_t result = (void *)(a1 + 24);
  if (v4) {
LABEL_15:
  }
    uint64_t result = memmove(result, v5, 12 * v4);
LABEL_25:
  *(void *)(a1 + 8) = v4;
  return result;
}

_anonymous_namespace_ *re::DataArray<MetalHeap::TextureEntry>::allocBlock(void *a1)
{
  uint64_t v3 = 24 * *((unsigned int *)a1 + 11);
  uint64_t v4 = (*(uint64_t (**)(void, uint64_t, void))(*(void *)*a1 + 32))(*a1, v3, 0);
  if (!v4)
  {
    re::internal::assertLog((re::internal *)6, v5, "assertion failure: '%s' (%s:line %i) DataArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "block.elements", "allocBlock", 520, v3, *(void *)(*a1 + 8));
    _os_crash();
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v6 = v4;
  uint64_t v1 = 4 * *((unsigned int *)a1 + 11);
  uint64_t result = (_anonymous_namespace_ *)(*(uint64_t (**)(void, uint64_t, void))(*(void *)*a1 + 32))(*a1, v1, 0);
  if (!result)
  {
LABEL_16:
    re::internal::assertLog((re::internal *)6, v8, "assertion failure: '%s' (%s:line %i) DataArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "block.allocationCounters", "allocBlock", 528, v1, *(void *)(*a1 + 8));
    uint64_t result = (_anonymous_namespace_ *)_os_crash();
    __break(1u);
    return result;
  }
  int v9 = result;
  unint64_t v11 = a1[1];
  unint64_t v10 = a1[2];
  if (v10 >= v11)
  {
    unint64_t v12 = v10 + 1;
    if (v11 < v10 + 1)
    {
      if (*a1)
      {
        unint64_t v13 = 2 * v11;
        if (!v11) {
          unint64_t v13 = 8;
        }
        if (v13 <= v12) {
          unint64_t v14 = v12;
        }
        else {
          unint64_t v14 = v13;
        }
        uint64_t result = (_anonymous_namespace_ *)re::DynamicArray<re::RigNodeConstraint>::setCapacity(a1, v14);
      }
      else
      {
        uint64_t result = (_anonymous_namespace_ *)re::DynamicArray<re::RigNodeConstraint>::setCapacity(a1, v12);
        ++*((_DWORD *)a1 + 6);
      }
    }
    unint64_t v10 = a1[2];
  }
  uint64_t v15 = (uint64_t *)(a1[4] + 16 * v10);
  *uint64_t v15 = v6;
  v15[1] = (uint64_t)v9;
  a1[2] = v10 + 1;
  ++*((_DWORD *)a1 + 6);
  *((_DWORD *)a1 + 12) = 0;
  return result;
}

uint64_t re::HashTable<CachingHeap::TextureCacheKey,re::DynamicArray<CachingHeap::TextureEntry>,CachingHeap::TextureCacheKeyHasher,CachingHeap::TextureCacheKeyEqualTo,true,false>::EntryWithHash::free(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 8);
  if (v1 < 0)
  {
    uint64_t v2 = result;
    *(_DWORD *)(result + 8) = v1 & 0x7FFFFFFF;
    uint64_t v3 = *(void **)(result + 16);
    if (v3)
    {

      *(void *)(v2 + 16) = 0;
    }
    return re::DynamicArray<CachingHeap::TextureEntry>::deinit(v2 + 32);
  }
  return result;
}

double re::HashTable<CachingHeap::TextureCacheKey,re::DynamicArray<CachingHeap::TextureEntry>,CachingHeap::TextureCacheKeyHasher,CachingHeap::TextureCacheKeyEqualTo,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    if (*((_DWORD *)a1 + 8))
    {
      uint64_t v3 = 0;
      unint64_t v4 = 0;
      do
      {
        re::HashTable<CachingHeap::TextureCacheKey,re::DynamicArray<CachingHeap::TextureEntry>,CachingHeap::TextureCacheKeyHasher,CachingHeap::TextureCacheKeyEqualTo,true,false>::EntryWithHash::free(a1[2] + v3);
        ++v4;
        v3 += 72;
      }
      while (v4 < *((unsigned int *)a1 + 8));
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

void *re::DynamicArray<CachingHeap::TextureEntry>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      double result = (void *)*result;
      if (!*v5)
      {
        double result = (void *)re::DynamicArray<CachingHeap::TextureEntry>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x28uLL))
        {
          uint64_t v2 = 40 * a2;
          double result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 40 * a2, 8);
          if (result)
          {
            int v7 = result;
            if (!v5[1]) {
              goto LABEL_18;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 40, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        double result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      int v7 = 0;
      if (!v3)
      {
LABEL_18:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = 40 * v9;
        unint64_t v11 = v7;
        do
        {
          *unint64_t v11 = *(void *)v8;
          *(void *)uint64_t v8 = 0;
          *((unsigned char *)v11 + 8) = *(unsigned char *)(v8 + 8);
          v11[2] = *(void *)(v8 + 16);
          *(_OWORD *)(v11 + 3) = *(_OWORD *)(v8 + 24);
          *(void *)(v8 + 16) = 0;
          if (*(void *)v8)
          {

            *(void *)uint64_t v8 = 0;
          }
          v8 += 40;
          v11 += 5;
          v10 -= 40;
        }
        while (v10);
        uint64_t v8 = v5[4];
      }
      double result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_18;
    }
  }
  return result;
}

uint64_t re::DynamicArray<CachingHeap::TextureEntry>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = 40 * v4;
        do
        {
          *(void *)(v3 + 16) = 0;
          if (*(void *)v3)
          {

            *(void *)uint64_t v3 = 0;
          }
          v3 += 40;
          v5 -= 40;
        }
        while (v5);
        uint64_t result = *(void *)a1;
        uint64_t v3 = *(void *)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

__n128 std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,CachingHeap::TextureEntry *,CachingHeap::TextureEntry *,CachingHeap::TextureEntry *,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      NS::SharedPtr<MTL::Texture>::operator=((void **)a3, (void **)v5);
      *(unsigned char *)(a3 + 8) = *(unsigned char *)(v5 + 8);
      *(void *)(a3 + 16) = *(void *)(v5 + 16);
      __n128 result = *(__n128 *)(v5 + 24);
      *(__n128 *)(a3 + 24) = result;
      v5 += 40;
      a3 += 40;
    }
    while (v5 != a2);
  }
  return result;
}

void re::HashTable<CachingHeap::TextureCacheKey,re::DynamicArray<CachingHeap::TextureEntry>,CachingHeap::TextureCacheKeyHasher,CachingHeap::TextureCacheKeyEqualTo,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v26, 0, 36);
      *(void *)&v26[36] = 0x7FFFFFFFLL;
      re::HashTable<char const*,re::AssetLoadRequest::LoadStatistics::AssetTypeStats,re::Hash<char const*>,re::EqualTo<char const*>,true,false>::init((uint64_t)v26, v4, a2);
      long long v5 = *(_OWORD *)a1;
      *(void *)a1 = *(void *)v26;
      uint64_t v6 = *(void *)(a1 + 16);
      long long v7 = *(_OWORD *)&v26[8];
      *(_OWORD *)long long v26 = v5;
      *(void *)&v26[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      long long v9 = *(_OWORD *)&v26[24];
      *(_OWORD *)&v26[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v26[32];
      *(_OWORD *)(a1 + 24) = v9;
      uint64_t v10 = v8;
      if (v8)
      {
        int v11 = DWORD1(v9);
        uint64_t v12 = v7;
        uint64_t v13 = v6 + 32;
        do
        {
          if ((*(_DWORD *)(v13 - 24) & 0x80000000) != 0)
          {
            unint64_t v14 = *(void *)(v13 - 32);
            unint64_t v15 = *(unsigned int *)(a1 + 24);
            unint64_t v16 = v14 % v15;
            uint64_t v17 = *(unsigned int *)(a1 + 36);
            if (v17 == 0x7FFFFFFF)
            {
              uint64_t v17 = *(unsigned int *)(a1 + 32);
              int v18 = v17;
              if (v17 == v15)
              {
                re::HashTable<CachingHeap::TextureCacheKey,re::DynamicArray<CachingHeap::TextureEntry>,CachingHeap::TextureCacheKeyHasher,CachingHeap::TextureCacheKeyEqualTo,true,false>::setCapacity(a1, (2 * v11));
                unint64_t v16 = v14 % *(unsigned int *)(a1 + 24);
                int v18 = *(_DWORD *)(a1 + 32);
                uint64_t v12 = *(void *)(a1 + 8);
              }
              *(_DWORD *)(a1 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = v18 + 1;
              uint64_t v19 = *(void *)(a1 + 16);
              int v20 = *(_DWORD *)(v19 + 72 * v17 + 8);
            }
            else
            {
              uint64_t v19 = *(void *)(a1 + 16);
              int v20 = *(_DWORD *)(v19 + 72 * v17 + 8);
              *(_DWORD *)(a1 + 36) = v20 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v19 + 72 * v17 + 8) = v20 | 0x80000000;
            *(_DWORD *)(*(void *)(a1 + 16) + 72 * v17 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 72 * v17 + 8) & 0x80000000 | *(_DWORD *)(v12 + 4 * v16);
            *(void *)(*(void *)(a1 + 16) + 72 * v17) = v14;
            uint64_t v21 = *(void *)(a1 + 16) + 72 * v17;
            *(void *)(v21 + 16) = *(id *)(v13 - 16);
            *(unsigned char *)(v21 + 24) = *(unsigned char *)(v13 - 8);
            uint64_t v22 = *(void *)(a1 + 16) + 72 * v17;
            *(void *)(v22 + 64) = 0;
            *(_DWORD *)(v22 + 56) = 0;
            *(void *)(v22 + 40) = 0;
            *(void *)(v22 + 48) = 0;
            *(void *)(v22 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0;
            *(void *)(v22 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = *(void *)v13;
            *(void *)uint64_t v13 = 0;
            *(void *)(v22 + 40) = *(void *)(v13 + 8);
            *(void *)(v13 + 8) = 0;
            uint64_t v23 = *(void *)(v22 + 48);
            *(void *)(v22 + 48) = *(void *)(v13 + 16);
            *(void *)(v13 + 16) = v23;
            uint64_t v24 = *(void *)(v22 + 64);
            *(void *)(v22 + 64) = *(void *)(v13 + 32);
            *(void *)(v13 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = v24;
            ++*(_DWORD *)(v13 + 24);
            ++*(_DWORD *)(v22 + 56);
            uint64_t v12 = *(void *)(a1 + 8);
            *(_DWORD *)(v12 + 4 * v16) = v17;
            int v11 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v11;
          }
          v13 += 72;
          --v10;
        }
        while (v10);
      }
      re::HashTable<CachingHeap::TextureCacheKey,re::DynamicArray<CachingHeap::TextureEntry>,CachingHeap::TextureCacheKeyHasher,CachingHeap::TextureCacheKeyEqualTo,true,false>::deinit((uint64_t *)v26);
    }
  }
  else
  {
    if (a2) {
      signed int v25 = a2;
    }
    else {
      signed int v25 = 3;
    }
  }
}

double re::HashTable<unsigned long long,re::RenderGraphResourceAllocationManager::HeapGroupHierarchy,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    if (*((_DWORD *)a1 + 8))
    {
      uint64_t v3 = 0;
      unint64_t v4 = 0;
      do
      {
        re::HashTable<unsigned long long,re::RenderGraphResourceAllocationManager::HeapGroupHierarchy,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::EntryWithHash::free(a1[2] + v3);
        ++v4;
        v3 += 120;
      }
      while (v4 < *((unsigned int *)a1 + 8));
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

uint64_t re::HashTable<unsigned long long,re::RenderGraphResourceAllocationManager::HeapGroupHierarchy,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::EntryWithHash::free(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 8);
  if (v1 < 0)
  {
    uint64_t v2 = result;
    *(_DWORD *)(result + 8) = v1 & 0x7FFFFFFF;
    re::DynamicArray<re::RenderGraphResourceAllocationManager::HeapGroup>::deinit(result + 80);
    return re::DynamicArray<unsigned long>::deinit(v2 + 32);
  }
  return result;
}

uint64_t re::DynamicArray<re::RenderGraphResourceAllocationManager::TextureEntry>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = 184 * v4;
        uint64_t v6 = v3 + 80;
        do
        {
          *(void *)(v6 + 72) = 0;
          re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v6);
          re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v6 - 72);
          v6 += 184;
          v5 -= 184;
        }
        while (v5);
        uint64_t result = *(void *)a1;
        uint64_t v3 = *(void *)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::DynamicArray<re::RenderGraphResourceAllocationManager::EncoderAndFence>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    uint64_t v3 = *(void ***)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = 48 * v4;
        do
        {

          re::mtl::RenderCommandEncoder::~RenderCommandEncoder((re::mtl::RenderCommandEncoder *)(v3 + 1));
          uint64_t v6 = *v3;
          v3 += 6;

          v5 -= 48;
        }
        while (v5);
        uint64_t result = *(void *)a1;
        uint64_t v3 = *(void ***)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, void **))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

void *re::DynamicArray<re::RenderGraphResourceAllocationManager::HeapGroup>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      uint64_t result = (void *)*result;
      if (!*v5)
      {
        uint64_t result = (void *)re::DynamicArray<re::RenderGraphResourceAllocationManager::HeapGroup>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x30uLL))
        {
          uint64_t v2 = 48 * a2;
          uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 48 * a2, 8);
          if (result)
          {
            long long v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 48, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        uint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      long long v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      unsigned int v8 = (uint64_t *)v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = &v8[6 * v9];
        int v11 = v7;
        do
        {
          uint64_t v12 = *v8;
          v11[5] = 0;
          *int v11 = v12;
          v11[1] = 0;
          *((_DWORD *)v11 + 8) = 0;
          v11[2] = 0;
          v11[3] = 0;
          uint64_t v13 = v8[1];
          uint64_t v14 = v8[2];
          uint64_t v15 = (uint64_t)(v8 + 1);
          v11[1] = v13;
          v11[2] = v14;
          *(void *)uint64_t v15 = 0;
          *(void *)(v15 + 8) = 0;
          uint64_t v16 = v11[3];
          v11[3] = *(void *)(v15 + 16);
          *(void *)(v15 + 16) = v16;
          uint64_t v17 = v11[5];
          v11[5] = *(void *)(v15 + 32);
          *(void *)(v15 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = v17;
          ++*(_DWORD *)(v15 + 24);
          ++*((_DWORD *)v11 + 8);
          re::DynamicArray<re::RenderGraphResourceAllocationManager::HeapAndFences>::deinit(v15);
          unsigned int v8 = (uint64_t *)(v15 + 40);
          v11 += 6;
        }
        while (v8 != v10);
        unsigned int v8 = (uint64_t *)v5[4];
      }
      uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t *))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

void *re::DynamicArray<re::RenderGraphResourceAllocationManager::HeapAndFences>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      uint64_t result = (void *)*result;
      if (!*v5)
      {
        uint64_t result = (void *)re::DynamicArray<re::RenderGraphResourceAllocationManager::HeapAndFences>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x38uLL))
        {
          uint64_t v2 = 56 * a2;
          uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 56 * a2, 8);
          if (result)
          {
            long long v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 56, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        uint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      long long v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      unsigned int v8 = (uint64_t *)v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = &v8[7 * v9];
        int v11 = v7;
        do
        {
          uint64_t v12 = *v8;
          v11[5] = 0;
          *int v11 = v12;
          v11[1] = 0;
          v11[2] = 0;
          v11[3] = 0;
          *((_DWORD *)v11 + 8) = 0;
          uint64_t v13 = v8[1];
          uint64_t v14 = v8[2];
          uint64_t v15 = (uint64_t)(v8 + 1);
          v11[1] = v13;
          v11[2] = v14;
          *(void *)uint64_t v15 = 0;
          *(void *)(v15 + 8) = 0;
          uint64_t v16 = v11[3];
          v11[3] = *(void *)(v15 + 16);
          *(void *)(v15 + 16) = v16;
          uint64_t v17 = v11[5];
          v11[5] = *(void *)(v15 + 32);
          *(void *)(v15 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = v17;
          ++*(_DWORD *)(v15 + 24);
          ++*((_DWORD *)v11 + 8);
          *((_WORD *)v11 + 24) = *(_WORD *)(v15 + 40);
          re::DynamicArray<unsigned long>::deinit(v15);
          unsigned int v8 = (uint64_t *)(v15 + 48);
          v11 += 7;
        }
        while (v8 != v10);
        unsigned int v8 = (uint64_t *)v5[4];
      }
      uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t *))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

void *re::DynamicArray<re::RenderGraphResourceAllocationManager::TextureEntry>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      uint64_t result = (void *)*result;
      if (!*v5)
      {
        uint64_t result = (void *)re::DynamicArray<re::RenderGraphResourceAllocationManager::TextureEntry>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0xB8uLL))
        {
          uint64_t v2 = 184 * a2;
          uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 184 * a2, 8);
          if (result)
          {
            long long v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 184, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        uint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      long long v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = v8 + 184 * v9;
        uint64_t v11 = (uint64_t)(v7 + 10);
        uint64_t v12 = v8 + 80;
        do
        {
          *(void *)(v11 - 80) = *(void *)(v12 - 80);
          re::DynamicOverflowArray<re::RenderGraphResourceAllocationManager::FenceIndex,4ul>::DynamicOverflowArray(v11 - 72, v12 - 72);
          re::DynamicOverflowArray<re::RenderGraphResourceAllocationManager::FenceIndex,4ul>::DynamicOverflowArray(v11, v12);
          *(void *)(v11 + 72) = *(void *)(v12 + 72);
          long long v13 = *(_OWORD *)(v12 + 80);
          *(void *)(v11 + 96) = *(void *)(v12 + 96);
          *(_OWORD *)(v11 + 80) = v13;
          *(void *)(v12 + 72) = 0;
          re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v12);
          re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v12 - 72);
          v11 += 184;
          uint64_t v14 = v12 + 104;
          v12 += 184;
        }
        while (v14 != v10);
        uint64_t v8 = v5[4];
      }
      uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

uint64_t re::DynamicOverflowArray<re::RenderGraphResourceAllocationManager::FenceIndex,4ul>::DynamicOverflowArray(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 1;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0;
  if (*(unsigned char *)(a2 + 16))
  {
    if (*(void *)(a2 + 8))
    {
      re::DynamicOverflowArray<re::RenderGraphResourceAllocationManager::FenceIndex,4ul>::move(a1, a2);
    }
    else
    {
      re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1);
      *(void *)a1 = *(void *)a2;
      *(_DWORD *)(a2 + 16) += 2;
      *(_DWORD *)(a1 + 16) += 2;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 16) = 3;
    re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::swap((uint64_t *)a1, (uint64_t *)a2);
  }
  return a1;
}

void *re::DynamicArray<re::RenderGraphResourceAllocationManager::EncoderAndFence>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    uint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::RenderGraphResourceAllocationManager::EncoderAndFence>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::RenderGraphResourceAllocationManager::EncoderAndFence>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void *re::DynamicArray<re::RenderGraphResourceAllocationManager::EncoderAndFence>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      uint64_t result = (void *)*result;
      if (!*v5)
      {
        uint64_t result = (void *)re::DynamicArray<re::RenderGraphResourceAllocationManager::EncoderAndFence>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x30uLL))
        {
          uint64_t v2 = 48 * a2;
          uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 48 * a2, 8);
          if (result)
          {
            unint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 48, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        uint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      unint64_t v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = v8 + 48 * v9;
        uint64_t v11 = (long long *)(v8 + 8);
        uint64_t v12 = v7;
        do
        {
          uint64_t v13 = *((void *)v11 - 1);
          *((void *)v11 - 1) = 0;
          *uint64_t v12 = v13;
          long long v14 = *v11;
          *(void *)uint64_t v11 = 0;
          *(_OWORD *)(v12 + 1) = v14;
          uint64_t v15 = *((void *)v11 + 2);
          *((void *)v11 + 1) = 0;
          *((void *)v11 + 2) = 0;
          v12[3] = v15;
          uint64_t v16 = *((void *)v11 + 3);
          *((_DWORD *)v12 + 10) = *((_DWORD *)v11 + 8);
          v12[4] = v16;

          re::mtl::RenderCommandEncoder::~RenderCommandEncoder((re::mtl::RenderCommandEncoder *)v11);
          uint64_t v17 = (uint64_t)v11 + 40;
          v11 += 3;
          v12 += 6;
        }
        while (v17 != v10);
        uint64_t v8 = v5[4];
      }
      uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

void *re::DynamicArray<re::RenderGraphResourceAllocationManager::TextureIndexAndStage>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    uint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::MeshResourceDefinition::Level>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::MeshResourceDefinition::Level>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

uint64_t re::DynamicOverflowArray<re::RenderGraphResourceAllocationManager::FenceIndex,4ul>::indexOf(uint64_t result, uint64_t a2, _DWORD *a3)
{
  int v3 = *(_DWORD *)(a2 + 16);
  if (v3) {
    uint64_t v4 = (_DWORD *)(a2 + 24);
  }
  else {
    uint64_t v4 = *(_DWORD **)(a2 + 32);
  }
  uint64_t v5 = *(void *)(a2 + 8);
  if (v5)
  {
    BOOL v6 = &v4[3 * v5];
    uint64_t v7 = 12 * v5;
    while (*v4 != *a3 || v4[1] != a3[1] || v4[2] != a3[2])
    {
      v4 += 3;
      v7 -= 12;
      if (!v7)
      {
        uint64_t v4 = v6;
        break;
      }
    }
  }
  if (v3) {
    uint64_t v8 = a2 + 24;
  }
  else {
    uint64_t v8 = *(void *)(a2 + 32);
  }
  if (v4 == (_DWORD *)(v8 + 12 * v5))
  {
    *(unsigned char *)uint64_t result = 0;
  }
  else
  {
    *(unsigned char *)uint64_t result = 1;
    *(void *)(result + 8) = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v4 - v8) >> 2);
  }
  return result;
}

uint64_t re::HashTable<unsigned long long,re::RenderGraphResourceAllocationManager::HeapGroupHierarchy,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, uint64_t *a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      int v11 = *(_DWORD *)(a1 + 28);
      signed int v12 = 2 * v11;
      uint64_t v13 = *(void *)a1;
      if (*(void *)a1)
      {
        if (v12) {
          BOOL v14 = v9 == v12;
        }
        else {
          BOOL v14 = 1;
        }
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v33, 0, 36);
          *(void *)&v33[36] = 0x7FFFFFFFLL;
          re::HashTable<re::DynamicString,re::MeshCompileOptions,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init((uint64_t)v33, v13, v12);
          long long v15 = *(_OWORD *)v33;
          *(_OWORD *)__int16 v33 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          uint64_t v16 = *(void *)&v33[16];
          uint64_t v17 = *(void *)(a1 + 16);
          *(void *)&v33[16] = v17;
          *(void *)(a1 + 16) = v16;
          long long v19 = *(_OWORD *)&v33[24];
          *(_OWORD *)&v33[24] = *(_OWORD *)(a1 + 24);
          unsigned int v18 = *(_DWORD *)&v33[32];
          *(_OWORD *)(a1 + 24) = v19;
          unint64_t v20 = v18;
          if (v18)
          {
            unint64_t v21 = 0;
            uint64_t v22 = v17 + 16;
            do
            {
              if ((*(_DWORD *)(v22 - 8) & 0x80000000) != 0) {
                re::HashTable<unsigned long long,re::RenderGraphResourceAllocationManager::HeapGroupHierarchy,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, *(void *)(v22 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(v22 - 16), v22, v22 + 8);
              }
              ++v21;
              v22 += 120;
            }
            while (v21 < v20);
          }
          re::HashTable<unsigned long long,re::RenderGraphResourceAllocationManager::HeapGroupHierarchy,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v33);
        }
      }
      else
      {
        if (v12) {
          signed int v25 = 2 * v11;
        }
        else {
          signed int v25 = 3;
        }
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = v10 + 1;
    uint64_t v23 = *(void *)(a1 + 16);
    int v24 = *(_DWORD *)(v23 + 120 * v9 + 8);
  }
  else
  {
    uint64_t v23 = *(void *)(a1 + 16);
    int v24 = *(_DWORD *)(v23 + 120 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v24 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v23 + 120 * v9 + 8) = v24 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + 120 * v9 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 120 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 120 * v9) = a3;
  *(void *)(*(void *)(a1 + 16) + 120 * v9 + 16) = *a4;
  uint64_t v26 = *(void *)(a1 + 16) + 120 * v9;
  uint64_t v27 = *a5;
  *(void *)(v26 + 64) = 0;
  *(void *)(v26 + 40) = 0;
  *(void *)(v26 + 48) = 0;
  *(void *)(v26 + 24) = v27;
  *(void *)(v26 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0;
  *(_DWORD *)(v26 + 56) = 0;
  *(void *)(v26 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = a5[1];
  a5[1] = 0;
  *(void *)(v26 + 40) = a5[2];
  a5[2] = 0;
  uint64_t v28 = *(void *)(v26 + 48);
  *(void *)(v26 + 48) = a5[3];
  a5[3] = v28;
  uint64_t v29 = *(void *)(v26 + 64);
  *(void *)(v26 + 64) = a5[5];
  a5[5] = v29;
  ++*((_DWORD *)a5 + 8);
  ++*(_DWORD *)(v26 + 56);
  *(_WORD *)(v26 + 72) = *((_WORD *)a5 + 24);
  *(void *)(v26 + 112) = 0;
  *(_DWORD *)(v26 + 104) = 0;
  *(void *)(v26 + 88) = 0;
  *(void *)(v26 + 96) = 0;
  *(void *)(v26 + 80) = 0;
  *(void *)(v26 + 80) = a5[7];
  a5[7] = 0;
  *(void *)(v26 + 88) = a5[8];
  a5[8] = 0;
  uint64_t v30 = *(void *)(v26 + 96);
  *(void *)(v26 + 96) = a5[9];
  a5[9] = v30;
  uint64_t v31 = *(void *)(v26 + 112);
  *(void *)(v26 + 112) = a5[11];
  a5[11] = v31;
  ++*((_DWORD *)a5 + 20);
  ++*(_DWORD *)(v26 + 104);
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

uint64_t re::FixedOccupancyGrid::settingOccupied(uint64_t this, int a2, int a3, unsigned int a4)
{
  unint64_t v4 = (a2 + *(_DWORD *)(this + 64) * a3);
  uint64_t v5 = 1;
  if ((a4 & 0x3F) > 64 - (unint64_t)(((_BYTE)a2 + *(unsigned char *)(this + 64) * (_BYTE)a3) & 0x3F)) {
    uint64_t v5 = 2;
  }
  unint64_t v6 = v5 + ((unint64_t)a4 >> 6);
  do
  {
    unint64_t v7 = 64 - (v4 & 0x3F);
    if (v7 >= a4) {
      unint64_t v7 = a4;
    }
    unint64_t v8 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v7 << v4;
    unint64_t v9 = v4 >> 3;
    v4 += v7;
    a4 -= v7;
    *(void *)(this + (v9 & 0x1FFFFFFFFFFFFFF8)) |= v8;
    --v6;
  }
  while (v6);
  return this;
}

uint64_t re::FixedOccupancyGrid::clearingOccupied(uint64_t this, int a2, int a3, unsigned int a4)
{
  unint64_t v4 = (a2 + *(_DWORD *)(this + 64) * a3);
  uint64_t v5 = 1;
  if ((a4 & 0x3F) > 64 - (unint64_t)(((_BYTE)a2 + *(unsigned char *)(this + 64) * (_BYTE)a3) & 0x3F)) {
    uint64_t v5 = 2;
  }
  unint64_t v6 = v5 + ((unint64_t)a4 >> 6);
  do
  {
    unint64_t v7 = 64 - (v4 & 0x3F);
    if (v7 >= a4) {
      unint64_t v7 = a4;
    }
    unint64_t v8 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v7 << v4;
    unint64_t v9 = v4 >> 3;
    v4 += v7;
    a4 -= v7;
    *(void *)(this + (v9 & 0x1FFFFFFFFFFFFFF8)) &= ~v8;
    --v6;
  }
  while (v6);
  return this;
}

uint64_t re::FixedOccupancyGrid::setOccupied(uint64_t this, uint64_t *a2, int a3)
{
  v3.i64[0] = a2[2];
  v3.i64[1] = *a2;
  v4.i32[0] = vmovn_s32(vcgeq_f32((float32x4_t)xmmword_2343854A0, v3)).u32[0];
  v4.i32[1] = vmovn_s32(vcgeq_f32(v3, (float32x4_t)xmmword_2343854A0)).i32[1];
  if ((vmaxv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(v4, 0xFuLL))) & 1) == 0)
  {
    uint64_t v5 = this;
    float32x4_t v6 = *(float32x4_t *)a2;
    float32x4_t v7 = *((float32x4_t *)a2 + 1);
    v6.i32[3] = 0;
    float32x4_t v8 = vmaxnmq_f32(v6, (float32x4_t)0);
    v8.i32[3] = 0;
    v7.i32[3] = 0;
    v8.i64[0] = vminnmq_f32(v8, (float32x4_t)xmmword_2343679C0).u64[0];
    float32x4_t v9 = vmaxnmq_f32(v7, (float32x4_t)0);
    v9.i32[3] = 0;
    v9.i64[0] = vminnmq_f32(v9, (float32x4_t)xmmword_2343679C0).u64[0];
    float v10 = (float)*(unsigned int *)(this + 64);
    int v11 = (float)(v10 * v8.f32[0]);
    float v12 = (float)*(unsigned int *)(this + 68);
    unsigned int v13 = vmuls_lane_f32(v12, *(float32x2_t *)v8.f32, 1);
    unsigned int v14 = vcvtps_u32_f32(v10 * v9.f32[0]);
    unsigned int v15 = vcvtps_u32_f32(vmuls_lane_f32(v12, *(float32x2_t *)v9.f32, 1));
    BOOL v16 = *(unsigned char *)(this + 72) == 0;
    if (a3) {
      BOOL v16 = a3 == 2;
    }
    if (v16)
    {
      if (v13 < v15)
      {
        unsigned int v17 = v14 - v11;
        do
          this = re::FixedOccupancyGrid::settingOccupied(v5, v11, v13++, v17);
        while (v15 != v13);
      }
    }
    else if (*(unsigned char *)(this + 73) == 1 && v13 < v15)
    {
      unsigned int v18 = v14 - v11;
      do
        this = re::FixedOccupancyGrid::clearingOccupied(v5, v11, v13++, v18);
      while (v15 != v13);
    }
  }
  return this;
}

void re::RenderGraphNoClearProcessor::process(re::RenderGraphNoClearProcessor *this, re::RenderGraphCompiled *a2)
{
  unint64_t v2 = *((void *)a2 + 44);
  if (v2)
  {
    for (unint64_t i = 0; i < v2; ++i)
    {
      uint64_t v5 = *((void *)a2 + 46);
      uint64_t v6 = v5 + 192 * i;
      uint64_t v8 = *(void *)(v6 + 56);
      float32x4_t v7 = (unint64_t *)(v6 + 56);
      if (v8)
      {
        uint64_t v9 = 0;
        int v10 = 0;
        uint64_t v11 = 0;
        unint64_t v12 = 0;
        unint64_t v13 = 0;
        uint64_t v31 = 0;
        unint64_t v28 = 0;
        unint64_t v29 = 0;
        uint64_t v27 = 0;
        int v30 = 0;
        uint64_t v24 = v5;
        unint64_t v25 = i;
        unsigned int v14 = (void *)(v5 + 192 * i + 72);
        do
        {
          uint64_t v15 = *v14 + v9;
          char v26 = 0;
          BOOL v16 = re::RenderGraphNoClearProcessor::process(re::RenderGraphCompiled &)::$_0::operator()((uint64_t)a2, (int *)(v15 + 4), *(_DWORD *)(v15 + 52), &v26);
          if (v16)
          {
            if (v12 >= v28)
            {
              unint64_t v17 = v12 + 1;
              if (v28 < v17)
              {
                if (v27)
                {
                  unint64_t v18 = 8;
                  if (v28) {
                    unint64_t v18 = 2 * v28;
                  }
                  if (v18 <= v17) {
                    unint64_t v19 = v17;
                  }
                  else {
                    unint64_t v19 = v18;
                  }
                  re::DynamicArray<float *>::setCapacity(&v27, v19);
                  int v10 = v30;
                }
                else
                {
                  re::DynamicArray<float *>::setCapacity(&v27, v17);
                  int v10 = v30 + 1;
                }
              }
              unint64_t v12 = v29;
              uint64_t v11 = v31;
            }
            *(void *)(v11 + 8 * v12++) = v15;
            unint64_t v29 = v12;
            int v30 = ++v10;
          }
          ++v13;
          v9 += 64;
        }
        while (*v7 > v13);
        if (*v7)
        {
          uint64_t v20 = 0;
          unint64_t v21 = 0;
          do
          {
            uint64_t v22 = *v14 + v20;
            char v26 = 1;
            if (re::RenderGraphNoClearProcessor::process(re::RenderGraphCompiled &)::$_0::operator()((uint64_t)a2, (int *)(v22 + 4), *(_DWORD *)(v22 + 52), &v26))
            {
              *(unsigned char *)(v22 + 48) = 1;
            }
            ++v21;
            v20 += 64;
          }
          while (*v7 > v21);
        }
        uint64_t v23 = v27;
        unint64_t i = v25;
        *(unsigned char *)(v24 + 192 * v25 + 186) = v12 != 0;
        if (v23)
        {
          if (v31) {
            (*(void (**)(uint64_t *))(*v23 + 40))(v23);
          }
        }
        unint64_t v2 = *((void *)a2 + 44);
      }
    }
  }
}

BOOL re::RenderGraphNoClearProcessor::process(re::RenderGraphCompiled &)::$_0::operator()(uint64_t a1, int *a2, unsigned int a3, unsigned char *a4)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a1 + 296);
  if (*(void *)(v4 + 16) <= (unint64_t)a3)
  {
    memset(v12, 0, sizeof(v12));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v5 = *(void *)(v4 + 32);
  if (*(_DWORD *)(v5 + 48 * a3)) {
    return 0;
  }
  uint64_t v8 = v5 + 48 * a3;
  *(void *)&v12[0] = *(void *)(v8 + 8) >> 1;
  *((void *)&v12[0] + 1) = *(void *)(v8 + 24);
  uint64_t v9 = re::RenderGraphCompiled::targetDescription(a1, (uint64_t)v12);
  BOOL result = 0;
  int v11 = *a2;
  if (*a2 > 8 || ((1 << v11) & 0x1EE) == 0) {
    return result;
  }
  if (*(_DWORD *)(v9 + 56) != 2) {
    return 0;
  }
  if (*a4) {
    *(_DWORD *)(v9 + 56) = 0;
  }
  return v11 != 5;
}

void re::RenderGraphNoClearProcessor::~RenderGraphNoClearProcessor(re::RenderGraphNoClearProcessor *this)
{
}

uint64_t re::DeformationBufferAllocator::init(re::DeformationBufferAllocator *this, unint64_t a2)
{
}

BOOL re::DeformationBufferAllocator::updateAllocationDataFrameForInputHash(uint64_t a1, void *a2, unsigned int a3, uint64_t a4)
{
  if (*(void *)(a1 + 8) <= (unint64_t)a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(v4 + 72 * a3 + 8);
  if (v5 == a4) {
    *(void *)(v4 + 72 * a3) = *a2;
  }
  return v5 == a4;
}

void re::DeformationBufferAllocator::resetAllocationData(void *a1, void *a2, unsigned int a3, uint64_t a4)
{
  uint64_t v48 = *MEMORY[0x263EF8340];
  if (a1[1] <= (unint64_t)a3)
  {
LABEL_33:
    long long v46 = 0u;
    long long v47 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v43 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_34:
    long long v46 = 0u;
    long long v47 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v43 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_35;
  }
  uint64_t v5 = a1[2];
  uint64_t v6 = (void *)(v5 + 72 * a3);
  float32x4_t v7 = v6 + 7;
  if (!v6[7])
  {
    *uint64_t v6 = *a2;
    *(void *)(v5 + 72 * a3 + 8) = a4;
    goto LABEL_31;
  }
  if (a1[4] <= (unint64_t)a3) {
    goto LABEL_34;
  }
  uint64_t v8 = a1[5];
  uint64_t v9 = v8 + 56 * a3;
  unint64_t v10 = *(void *)(v9 + 40);
  unint64_t v11 = *(void *)(v9 + 8);
  if (v10 + 1 > 4 * v11)
  {
    re::BucketArray<re::DeformationBufferAllocator::DeformationStackAllocation,4ul>::setBucketsCapacity((void *)(v8 + 56 * a3), (v10 + 4) >> 2);
    uint64_t v6 = (void *)(v5 + 72 * a3);
    unint64_t v11 = *(void *)(v9 + 8);
  }
  if (v11 <= v10 >> 2)
  {
LABEL_35:
    long long v46 = 0u;
    long long v47 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v43 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  unint64_t v12 = v6 + 2;
  if (*(unsigned char *)(v9 + 16)) {
    uint64_t v13 = v9 + 24;
  }
  else {
    uint64_t v13 = *(void *)(v9 + 32);
  }
  uint64_t v14 = *(void *)(v13 + 8 * (v10 >> 2));
  unsigned int v15 = v10 & 3;
  ++*(void *)(v9 + 40);
  ++*(_DWORD *)(v8 + 56 * a3 + 48);
  uint64_t v16 = v14 + 72 * v15;
  *(_OWORD *)uint64_t v16 = *(_OWORD *)v6;
  *(void *)(v16 + 24) = 0;
  *(_DWORD *)(v16 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 1;
  uint64_t v17 = v16;
  *(_DWORD *)(v16 + 64) = 0;
  *(void *)(v16 + 48) = 0;
  *(void *)(v16 + 56) = 0;
  *(void *)(v16 + 16) = 0;
  uint64_t v18 = v16 + 16;
  *(void *)(v17 + 40) = 0;
  uint64_t v19 = v17 + 40;
  if (*v12)
  {
    unint64_t v38 = v6;
    uint64_t v39 = v5;
    re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::init(v18, *v12, v6[3]);
    unint64_t v20 = *v7;
    uint64_t v21 = v14 + 72 * v15;
    unint64_t v23 = *(void *)(v21 + 56);
    uint64_t v22 = (unint64_t *)(v21 + 56);
    unint64_t v40 = *v7;
    if (*v7 < v23)
    {
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::BucketArrayIterator<re::DeformationBufferAllocator::VertexBufferAllocation,re::DeformationBufferAllocator::VertexBufferAllocation const&,re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul> const&,true>,re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::BucketArrayIterator<re::DeformationBufferAllocator::VertexBufferAllocation,re::DeformationBufferAllocator::VertexBufferAllocation const&,re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul> const&,true>,re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::BucketArrayIterator<re::DeformationBufferAllocator::VertexBufferAllocation,re::DeformationBufferAllocator::VertexBufferAllocation&,re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>&,true>>((void **)&v43, (uint64_t)v12, 0, (uint64_t)v12, v20, v18, 0);
      if (v20 != *v22)
      {
        unint64_t v24 = v40;
        do
        {
          uint64_t v25 = re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[](v18, v24);
          char v26 = *(void **)(v25 + 24);
          if (v26)
          {

            *(void *)(v25 + 24) = 0;
          }
          ++v24;
        }
        while (v24 != *v22);
      }
      goto LABEL_25;
    }
    re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::setBucketsCapacity((void *)v18, (v20 + 3) >> 2);
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::BucketArrayIterator<re::DeformationBufferAllocator::VertexBufferAllocation,re::DeformationBufferAllocator::VertexBufferAllocation const&,re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul> const&,true>,re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::BucketArrayIterator<re::DeformationBufferAllocator::VertexBufferAllocation,re::DeformationBufferAllocator::VertexBufferAllocation const&,re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul> const&,true>,re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::BucketArrayIterator<re::DeformationBufferAllocator::VertexBufferAllocation,re::DeformationBufferAllocator::VertexBufferAllocation&,re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>&,true>>((void **)&v43, (uint64_t)v12, 0, (uint64_t)v12, *v22, v18, 0);
    unint64_t v27 = v20 - *v22;
    if (v20 == *v22)
    {
LABEL_25:
      *uint64_t v22 = v40;
      uint64_t v6 = v38;
      uint64_t v5 = v39;
      goto LABEL_26;
    }
    uint64_t v28 = 0;
    while (1)
    {
      unint64_t v29 = v28 + *v22;
      if (*(void *)(v18 + 8) <= v29 >> 2) {
        break;
      }
      uint64_t v30 = v19;
      if ((*(unsigned char *)(v18 + 16) & 1) == 0) {
        uint64_t v30 = *(void *)(v18 + 32);
      }
      uint64_t v31 = *(void *)(v30 + 8 * (v29 >> 2)) + 40 * (v29 & 3);
      uint64_t v32 = re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[]((uint64_t)v12, v29);
      *(unsigned char *)uint64_t v31 = *(unsigned char *)v32;
      int v33 = *(_DWORD *)(v32 + 4);
      *(_WORD *)(v31 + 8) = *(_WORD *)(v32 + 8);
      *(_DWORD *)(v31 + 4) = v33;
      *(_DWORD *)(v31 + 12) = *(_DWORD *)(v32 + 12);
      *(unsigned char *)(v31 + 16) = *(unsigned char *)(v32 + 16);
      *(void *)(v31 + 24) = *(id *)(v32 + 24);
      *(void *)(v31 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = *(void *)(v32 + 32);
      if (v27 == ++v28) {
        goto LABEL_25;
      }
    }
    long long v46 = 0u;
    long long v47 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v43 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_33;
  }
LABEL_26:
  unint64_t v34 = *v7;
  *uint64_t v6 = *a2;
  *(void *)(v5 + 72 * a3 + 8) = a4;
  if (v34)
  {
    for (unint64_t i = 0; i != v34; ++i)
    {
      uint64_t v36 = re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[]((uint64_t)v12, i);
      __int16 v37 = *(void **)(v36 + 24);
      if (v37)
      {

        *(void *)(v36 + 24) = 0;
      }
    }
  }
LABEL_31:
  *float32x4_t v7 = 0;
  ++*(_DWORD *)(v5 + 72 * a3 + 64);
}

unint64_t re::DeformationBufferAllocator::alloc(void *a1, uint64_t a2, int a3, uint64_t a4, unsigned int a5, uint64_t a6)
{
  uint64_t v53 = *MEMORY[0x263EF8340];
  if (a1[1] <= (unint64_t)a5)
  {
LABEL_40:
    long long v51 = 0u;
    long long v52 = 0u;
    long long v49 = 0u;
    long long v50 = 0u;
    long long v48 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_41;
  }
  if (a1[4] <= (unint64_t)a5)
  {
LABEL_41:
    long long v51 = 0u;
    long long v52 = 0u;
    long long v49 = 0u;
    long long v50 = 0u;
    long long v48 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_42:
    re::internal::assertLog((re::internal *)4, v22, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || !other.isInitialized() || allocator() == other.allocator()", "operator=", 526);
    _os_crash();
    __break(1u);
  }
  uint64_t v7 = a1[2] + 72 * a5;
  uint64_t v44 = v7 + 16;
  unint64_t v8 = *(unsigned int *)(v7 + 56);
  uint64_t v9 = a1[5];
  uint64_t v10 = v9 + 56 * a5;
  unint64_t v11 = (unint64_t *)(v10 + 40);
  if (*(void *)(v10 + 40))
  {
    unint64_t v12 = 0;
    uint64_t v13 = (_DWORD *)(v9 + 56 * a5 + 48);
    do
    {
      uint64_t v14 = (void *)re::BucketArray<re::DeformationBufferAllocator::DeformationStackAllocation,4ul>::operator[](v10, v12);
      if ((*v14 & 0xFFFFFFFFFFFFFFFuLL) <= (*(void *)(a2 + 8) & 0xFFFFFFFFFFFFFFFuLL))
      {
        if (v8 < v14[7])
        {
          uint64_t v17 = (uint64_t)(v14 + 2);
          if (*(unsigned __int8 *)re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[]((uint64_t)(v14 + 2), v8) == a3)
          {
            uint64_t v18 = re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[](v17, v8);
            if (re::VertexBufferFormat::operator==((unsigned __int16 *)(v18 + 4), (unsigned __int16 *)a4)
              && *(_DWORD *)(re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[](v17, v8)+ 36) == a6)
            {
              uint64_t v40 = re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[](v17, v8);
              uint64_t v41 = re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::addUninitialized(v44);
              *(unsigned char *)uint64_t v41 = *(unsigned char *)v40;
              int v42 = *(_DWORD *)(v40 + 4);
              *(_WORD *)(v41 + 8) = *(_WORD *)(v40 + 8);
              *(_DWORD *)(v41 + 4) = v42;
              *(_DWORD *)(v41 + 12) = *(_DWORD *)(v40 + 12);
              *(unsigned char *)(v41 + 16) = *(unsigned char *)(v40 + 16);
              *(void *)(v41 + 24) = *(id *)(v40 + 24);
              *(void *)(v41 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = *(void *)(v40 + 32);
              uint64_t v43 = re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[](v17, v8);
              *(unsigned char *)uint64_t v43 = 0;
              *(_DWORD *)(v43 + 4) = 0x10000;
              *(_WORD *)(v43 + 8) = 256;

              *(void *)(v43 + 24) = 0;
              *(void *)(v43 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0;
              return v8;
            }
          }
        }
        unint64_t v19 = *v11;
        if (*v11 <= v12)
        {
          re::internal::assertLog((re::internal *)6, v15, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "removeAt", 848, v12, v19, v44);
          _os_crash();
          __break(1u);
          goto LABEL_40;
        }
        if (v19 - 1 > v12)
        {
          uint64_t v20 = re::BucketArray<re::DeformationBufferAllocator::DeformationStackAllocation,4ul>::operator[](v10, v19 - 1);
          uint64_t v21 = re::BucketArray<re::DeformationBufferAllocator::DeformationStackAllocation,4ul>::operator[](v10, v12);
          *(_OWORD *)uint64_t v21 = *(_OWORD *)v20;
          if (v21 != v20)
          {
            uint64_t v23 = v21;
            unint64_t v24 = (uint64_t *)(v21 + 16);
            uint64_t v25 = (void *)(v20 + 16);
            uint64_t v26 = *(void *)(v21 + 16);
            if (v26)
            {
              if (*v25 && v26 != *v25) {
                goto LABEL_42;
              }
            }
            long long v48 = 0uLL;
            LODWORD(v49) = 1;
            *((void *)&v49 + 1) = 0;
            *(void *)&long long v50 = 0;
            int v28 = *(_DWORD *)(v21 + 32);
            if (v28)
            {
              if (*(void *)(v21 + 24))
              {
                re::DynamicOverflowArray<re::DeformationBufferAllocator::VertexBufferAllocation *,2ul>::move((uint64_t)&v48, (uint64_t)v24);
              }
              else
              {
                *(void *)&long long v48 = v26;
                *(_DWORD *)(v21 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = v28 + 2;
                LODWORD(v49) = 3;
              }
            }
            else
            {
              LODWORD(v49) = 3;
              re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::swap((uint64_t *)&v48, v24);
            }
            re::DynamicOverflowArray<re::DeformationBufferAllocator::VertexBufferAllocation *,2ul>::operator=((uint64_t)v24, v20 + 16);
            re::DynamicOverflowArray<re::DeformationBufferAllocator::VertexBufferAllocation *,2ul>::operator=(v20 + 16, (uint64_t)&v48);
            if ((void)v48 && (v49 & 1) == 0) {
              (*(void (**)(void))(*(void *)v48 + 40))();
            }
            uint64_t v29 = *(void *)(v23 + 56);
            *(void *)(v23 + 56) = *(void *)(v20 + 56);
            *(void *)(v20 + 56) = v29;
            ++*(_DWORD *)(v23 + 64);
            ++*(_DWORD *)(v20 + 64);
          }
        }
        uint64_t v30 = re::BucketArray<re::DeformationBufferAllocator::DeformationStackAllocation,4ul>::operator[](v10, *v11 - 1)
            + 16;
        re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::deinit(v30);
        re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v30);
        unint64_t v16 = *v11 - 1;
        *unint64_t v11 = v16;
        ++*v13;
      }
      else
      {
        ++v12;
        unint64_t v16 = *v11;
      }
    }
    while (v12 < v16);
  }
  if (a6)
  {
    *(_DWORD *)((char *)&v48 + 3) = *(_DWORD *)a4;
    *(_WORD *)((char *)&v48 + 7) = *(_WORD *)(a4 + 4);
    int v31 = *(_DWORD *)(a4 + 8);
    char v32 = *(unsigned char *)(a4 + 12);
    id v33 = objc_msgSend(**(id **)(a2 + 16), sel_newBufferWithLength_options_, a6, 0);
    id v34 = v33;
    uint64_t v35 = re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::addUninitialized(v44);
    *(unsigned char *)uint64_t v35 = a3;
    *(_DWORD *)(v35 + 4) = *(_DWORD *)((char *)&v48 + 3);
    *(_WORD *)(v35 + 8) = *(_WORD *)((char *)&v48 + 7);
    *(_DWORD *)(v35 + 12) = v31;
    *(unsigned char *)(v35 + 16) = v32;
    *(void *)(v35 + 24) = v34;
    *(void *)(v35 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = a6 << 32;
    if (v34) {

    }
    if (v33) {
  }
    }
  else
  {
    *(_DWORD *)((char *)&v48 + 3) = *(_DWORD *)a4;
    *(_WORD *)((char *)&v48 + 7) = *(_WORD *)(a4 + 4);
    int v36 = *(_DWORD *)(a4 + 8);
    char v37 = *(unsigned char *)(a4 + 12);
    uint64_t v38 = re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::addUninitialized(v44);
    *(unsigned char *)uint64_t v38 = a3;
    *(_DWORD *)(v38 + 4) = *(_DWORD *)((char *)&v48 + 3);
    *(_WORD *)(v38 + 8) = *(_WORD *)((char *)&v48 + 7);
    *(_DWORD *)(v38 + 12) = v36;
    *(unsigned char *)(v38 + 16) = v37;
    *(void *)(v38 + 24) = 0;
    *(void *)(v38 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0;
  }
  return v8;
}

uint64_t re::FixedArray<re::DeformationBufferAllocator::DeformationStackAllocation>::init<>(uint64_t result, uint64_t a2, unint64_t a3)
{
  *(void *)BOOL result = a2;
  *(void *)(result + 8) = a3;
  if (!a3) {
    return result;
  }
  if (a3 >= 0x38E38E38E38E38FLL)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 72, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v4 = result;
  BOOL result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a2 + 32))(a2, 72 * a3, 8);
  *(void *)(v4 + 16) = result;
  if (!result)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    BOOL result = _os_crash();
    __break(1u);
    return result;
  }
  unint64_t v6 = a3 - 1;
  if (a3 != 1)
  {
    do
    {
      *(void *)BOOL result = 0xFFFFFFFFFFFFFFFLL;
      *(_OWORD *)(result + 24) = 0uLL;
      *(_OWORD *)(result + 40) = 0uLL;
      *(_OWORD *)(result + 56) = 0uLL;
      *(_OWORD *)(result + 8) = 0uLL;
      *(_DWORD *)(result + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 1;
      *(void *)(result + 40) = 0;
      *(void *)(result + 48) = 0;
      *(_DWORD *)(result + 64) = 0;
      *(void *)(result + 56) = 0;
      result += 72;
      --v6;
    }
    while (v6);
  }
  *(void *)BOOL result = 0xFFFFFFFFFFFFFFFLL;
  *(_OWORD *)(result + 24) = 0u;
  *(_OWORD *)(result + 40) = 0u;
  *(_OWORD *)(result + 56) = 0u;
  *(_OWORD *)(result + 8) = 0u;
  *(_DWORD *)(result + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 1;
  *(void *)(result + 40) = 0;
  *(void *)(result + 48) = 0;
  *(_DWORD *)(result + 64) = 0;
  *(void *)(result + 56) = 0;
  return result;
}

uint64_t re::FixedArray<re::BucketArray<re::DeformationBufferAllocator::DeformationStackAllocation,4ul>>::init<>(uint64_t result, uint64_t a2, unint64_t a3)
{
  *(void *)BOOL result = a2;
  *(void *)(result + 8) = a3;
  if (!a3) {
    return result;
  }
  if (a3 >= 0x492492492492493)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 56, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v4 = result;
  BOOL result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a2 + 32))(a2, 56 * a3, 8);
  *(void *)(v4 + 16) = result;
  if (!result)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    BOOL result = _os_crash();
    __break(1u);
    return result;
  }
  unint64_t v6 = a3 - 1;
  if (a3 != 1)
  {
    do
    {
      *(_OWORD *)(result + 16) = 0uLL;
      *(_OWORD *)(result + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0uLL;
      *(void *)(result + 40) = 0;
      *(void *)(result + 48) = 0;
      *(_OWORD *)BOOL result = 0uLL;
      *(_DWORD *)(result + 16) = 1;
      *(void *)(result + 24) = 0;
      *(void *)(result + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0;
      *(_DWORD *)(result + 48) = 0;
      result += 56;
      --v6;
    }
    while (v6);
  }
  *(_OWORD *)(result + 16) = 0u;
  *(_OWORD *)(result + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0u;
  *(void *)(result + 40) = 0;
  *(void *)(result + 48) = 0;
  *(_OWORD *)BOOL result = 0u;
  *(_DWORD *)(result + 16) = 1;
  *(void *)(result + 24) = 0;
  *(void *)(result + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0;
  *(_DWORD *)(result + 48) = 0;
  return result;
}

void *re::BucketArray<re::DeformationBufferAllocator::DeformationStackAllocation,4ul>::setBucketsCapacity(void *result, unint64_t a2)
{
  float32x4_t v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        unint64_t v4 = v3[1];
        if (v4 <= a2) {
          break;
        }
        BOOL result = (void *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      if (v4 < a2)
      {
        uint64_t v5 = v3 + 3;
        do
        {
          BOOL result = (void *)(*(uint64_t (**)(void, uint64_t, void))(*(void *)*v3 + 32))(*v3, 288, 0);
          unint64_t v6 = result;
          if (*v3)
          {
            unint64_t v7 = v3[1];
            int v8 = *((_DWORD *)v3 + 4);
            if ((v8 & 1) == 0)
            {
              unint64_t v9 = *v5;
              BOOL v11 = v7 >= *v5;
              unint64_t v10 = v7 + 1;
              BOOL v11 = !v11 || v9 >= v10;
              if (v11) {
                goto LABEL_22;
              }
              unint64_t v12 = 2 * v9;
              goto LABEL_18;
            }
            unint64_t v10 = v7 + 1;
            if (v10 >= 3)
            {
              unint64_t v12 = 4;
LABEL_18:
              if (v12 <= v10) {
                unint64_t v14 = v10;
              }
              else {
                unint64_t v14 = v12;
              }
              BOOL result = re::DynamicOverflowArray<re::DeformationBufferAllocator::DeformationStackAllocation *,2ul>::setCapacity(v3, v14);
              int v8 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            unint64_t v13 = v3[1] + 1;
            BOOL result = re::DynamicOverflowArray<re::DeformationBufferAllocator::DeformationStackAllocation *,2ul>::setCapacity(v3, v13);
            int v8 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + 4) = v8;
          }
LABEL_22:
          uint64_t v15 = v3 + 3;
          if ((v8 & 1) == 0) {
            uint64_t v15 = (void *)v3[4];
          }
          unint64_t v16 = v3[1];
          v15[v16++] = v6;
          v3[1] = v16;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v16 < a2);
      }
    }
  }
  else
  {
    re::DynamicOverflowArray<re::DeformationBufferAllocator::DeformationStackAllocation *,2ul>::setCapacity(v3, a2);
    *((_DWORD *)v3 + 4) += 2;
    v3[5] = 0;
    BOOL result = (void *)re::BucketArray<re::DeformationBufferAllocator::DeformationStackAllocation,4ul>::setBucketsCapacity(v3, a2);
    ++*((_DWORD *)v3 + 12);
  }
  return result;
}

void *re::DynamicOverflowArray<re::DeformationBufferAllocator::DeformationStackAllocation *,2ul>::setCapacity(void *result, unint64_t a2)
{
  unint64_t v4 = result;
  uint64_t v5 = *result;
  if (a2 && !v5)
  {
    BOOL result = (void *)re::DynamicOverflowArray<re::DeformationBufferAllocator::DeformationStackAllocation *,2ul>::setCapacity(v4, a2);
    int v6 = *((_DWORD *)v4 + 4) + 2;
LABEL_4:
    *((_DWORD *)v4 + 4) = v6;
    return result;
  }
  int v7 = *((_DWORD *)result + 4);
  if (v7) {
    uint64_t v8 = 2;
  }
  else {
    uint64_t v8 = result[3];
  }
  if (v8 != a2)
  {
    unint64_t v9 = result[1];
    if (v9 <= a2 && (a2 > 2 || (v7 & 1) == 0))
    {
      if (a2 < 3)
      {
        unint64_t v14 = result + 3;
        uint64_t v15 = v4[4];
        if (v7) {
          unint64_t v16 = v4 + 3;
        }
        else {
          unint64_t v16 = (const void *)v4[4];
        }
        memcpy(v14, v16, 8 * v9);
        BOOL result = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 40))(v5, v15);
        int v6 = *((_DWORD *)v4 + 4) | 1;
        goto LABEL_4;
      }
      if (a2 >> 61)
      {
        re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicOverflowArray<T, N>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 646, 8, a2);
        _os_crash();
        __break(1u);
      }
      else
      {
        uint64_t v2 = 8 * a2;
        unint64_t v10 = (void *)(*(uint64_t (**)(void, unint64_t, uint64_t))(*(void *)v5 + 32))(*result, 8 * a2, 8);
        if (v10)
        {
          unint64_t v12 = v10;
          if (v4[2]) {
            unint64_t v13 = v4 + 3;
          }
          else {
            unint64_t v13 = (const void *)v4[4];
          }
          BOOL result = memcpy(v10, v13, 8 * v4[1]);
          int v17 = *((_DWORD *)v4 + 4);
          if ((v17 & 1) == 0)
          {
            BOOL result = (void *)(*(uint64_t (**)(void, void))(*(void *)*v4 + 40))(*v4, v4[4]);
            int v17 = *((_DWORD *)v4 + 4);
          }
          *((_DWORD *)v4 + 4) = v17 & 0xFFFFFFFE;
          v4[3] = a2;
          v4[4] = v12;
          return result;
        }
      }
      re::internal::assertLog((re::internal *)6, v11, "assertion failure: '%s' (%s:line %i) DynamicOverflowArray<T, N> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 650, v2, *(void *)(*v4 + 8));
      BOOL result = (void *)_os_crash();
      __break(1u);
    }
  }
  return result;
}

uint64_t re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  *(void *)a1 = a2;
  re::DynamicOverflowArray<re::DeformationBufferAllocator::DeformationStackAllocation *,2ul>::setCapacity((void *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(void *)(a1 + 40) = 0;
  uint64_t result = re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::setBucketsCapacity(a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

void *re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::setBucketsCapacity(void *result, unint64_t a2)
{
  float32x4_t v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        unint64_t v4 = v3[1];
        if (v4 <= a2) {
          break;
        }
        uint64_t result = (void *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      if (v4 < a2)
      {
        uint64_t v5 = v3 + 3;
        do
        {
          uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t, void))(*(void *)*v3 + 32))(*v3, 160, 0);
          int v6 = result;
          if (*v3)
          {
            unint64_t v7 = v3[1];
            int v8 = *((_DWORD *)v3 + 4);
            if ((v8 & 1) == 0)
            {
              unint64_t v9 = *v5;
              BOOL v11 = v7 >= *v5;
              unint64_t v10 = v7 + 1;
              BOOL v11 = !v11 || v9 >= v10;
              if (v11) {
                goto LABEL_24;
              }
              unint64_t v12 = 2 * v9;
              goto LABEL_20;
            }
            unint64_t v10 = v7 + 1;
            if (v10 >= 3)
            {
              unint64_t v12 = 4;
LABEL_20:
              if (v12 <= v10) {
                unint64_t v14 = v10;
              }
              else {
                unint64_t v14 = v12;
              }
              uint64_t result = re::DynamicOverflowArray<re::DeformationBufferAllocator::DeformationStackAllocation *,2ul>::setCapacity(v3, v14);
              int v8 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            unint64_t v13 = v3[1] + 1;
            uint64_t result = re::DynamicOverflowArray<re::DeformationBufferAllocator::DeformationStackAllocation *,2ul>::setCapacity(v3, v13);
            int v8 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + 4) = v8;
          }
LABEL_24:
          uint64_t v15 = v3 + 3;
          if ((v8 & 1) == 0) {
            uint64_t v15 = (void *)v3[4];
          }
          unint64_t v16 = v3[1];
          v15[v16++] = v6;
          v3[1] = v16;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v16 < a2);
      }
    }
  }
  else
  {
  }
  return result;
}

void **std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::BucketArrayIterator<re::DeformationBufferAllocator::VertexBufferAllocation,re::DeformationBufferAllocator::VertexBufferAllocation const&,re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul> const&,true>,re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::BucketArrayIterator<re::DeformationBufferAllocator::VertexBufferAllocation,re::DeformationBufferAllocator::VertexBufferAllocation const&,re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul> const&,true>,re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::BucketArrayIterator<re::DeformationBufferAllocator::VertexBufferAllocation,re::DeformationBufferAllocator::VertexBufferAllocation&,re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>&,true>>(void **result, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7)
{
  unint64_t v12 = result;
  if (a2 != a4 || a3 != a5)
  {
    unint64_t v13 = a5 - 1;
    do
    {
      unint64_t v14 = a3;
      uint64_t v15 = re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[](a2, a3);
      uint64_t v16 = re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[](a6, a7);
      uint64_t v17 = v16;
      *(unsigned char *)uint64_t v16 = *(unsigned char *)v15;
      int v18 = *(_DWORD *)(v15 + 4);
      *(_WORD *)(v16 + 8) = *(_WORD *)(v15 + 8);
      *(_DWORD *)(v16 + 4) = v18;
      if (v16 != v15)
      {
        *(_DWORD *)(v16 + 12) = *(_DWORD *)(v15 + 12);
        *(unsigned char *)(v16 + 16) = *(unsigned char *)(v15 + 16);
      }
      uint64_t result = NS::SharedPtr<MTL::Texture>::operator=((void **)(v16 + 24), (void **)(v15 + 24));
      *(void *)(v17 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = *(void *)(v15 + 32);
      a3 = v14 + 1;
      ++a7;
    }
    while (a2 != a4 || v13 != v14);
    a3 = a5;
  }
  *unint64_t v12 = a2;
  v12[1] = a3;
  void v12[2] = a6;
  v12[3] = a7;
  return result;
}

uint64_t re::DynamicOverflowArray<re::DeformationBufferAllocator::VertexBufferAllocation *,2ul>::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    if (*(void *)a1)
    {
      if (*(void *)a2 && *(void *)a1 != *(void *)a2)
      {
        re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || !other.isInitialized() || m_allocator == other.m_allocator", "operator=", 527);
        uint64_t result = _os_crash();
        __break(1u);
        return result;
      }
    }
    if (*(unsigned char *)(a2 + 16))
    {
      if (*(void *)(a2 + 8))
      {
        re::DynamicOverflowArray<re::DeformationBufferAllocator::VertexBufferAllocation *,2ul>::move(a1, a2);
      }
      else
      {
        re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1);
        *(void *)a1 = *(void *)a2;
        *(_DWORD *)(a2 + 16) += 2;
        *(_DWORD *)(a1 + 16) += 2;
      }
    }
    else
    {
      *(void *)(a1 + 8) = 0;
      *(_DWORD *)(a1 + 16) += 2;
      re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::swap((uint64_t *)a1, (uint64_t *)a2);
    }
  }
  return a1;
}

void *re::DynamicOverflowArray<re::DeformationBufferAllocator::VertexBufferAllocation *,2ul>::move(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  if (v4 >= *(void *)(a1 + 8))
  {
    re::DynamicOverflowArray<re::DeformationBufferAllocator::DeformationStackAllocation *,2ul>::setCapacity((void *)a1, v4);
    if (*(unsigned char *)(a2 + 16)) {
      unint64_t v7 = (const void *)(a2 + 24);
    }
    else {
      unint64_t v7 = *(const void **)(a2 + 32);
    }
    uint64_t v8 = *(void *)(a1 + 8);
    int v9 = *(_DWORD *)(a1 + 16);
    if (v9)
    {
      unint64_t v10 = (void *)(a1 + 24);
      if (!v8)
      {
LABEL_18:
        if (v9) {
          uint64_t v11 = a1 + 24;
        }
        else {
          uint64_t v11 = *(void *)(a1 + 32);
        }
        uint64_t v12 = *(void *)(a1 + 8);
        unint64_t v13 = (void *)(v11 + 8 * v12);
        if (*(_DWORD *)(a2 + 16)) {
          uint64_t v14 = a2 + 24;
        }
        else {
          uint64_t v14 = *(void *)(a2 + 32);
        }
        uint64_t result = memcpy(v13, (const void *)(v14 + 8 * v12), 8 * v4 - 8 * v12);
        goto LABEL_25;
      }
    }
    else
    {
      unint64_t v10 = *(void **)(a1 + 32);
      if (!v8) {
        goto LABEL_18;
      }
    }
    memmove(v10, v7, 8 * v8);
    int v9 = *(_DWORD *)(a1 + 16);
    goto LABEL_18;
  }
  if (*(unsigned char *)(a2 + 16)) {
    uint64_t v5 = (const void *)(a2 + 24);
  }
  else {
    uint64_t v5 = *(const void **)(a2 + 32);
  }
  if ((*(unsigned char *)(a1 + 16) & 1) == 0)
  {
    uint64_t result = *(void **)(a1 + 32);
    if (!v4) {
      goto LABEL_25;
    }
    goto LABEL_15;
  }
  uint64_t result = (void *)(a1 + 24);
  if (v4) {
LABEL_15:
  }
    uint64_t result = memmove(result, v5, 8 * v4);
LABEL_25:
  *(void *)(a1 + 8) = v4;
  *(void *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) += 4;
  *(_DWORD *)(a1 + 16) += 2;
  return result;
}

uint64_t re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::addUninitialized(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 40);
  unint64_t v3 = *(void *)(a1 + 8);
  if (v2 + 1 > 4 * v3)
  {
    re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::setBucketsCapacity((void *)a1, (v2 + 4) >> 2);
    unint64_t v3 = *(void *)(a1 + 8);
  }
  if (v3 <= v2 >> 2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v4 = a1 + 24;
  }
  else {
    uint64_t v4 = *(void *)(a1 + 32);
  }
  uint64_t v5 = *(void *)(v4 + 8 * (v2 >> 2));
  ++*(void *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  return v5 + 40 * (v2 & 3);
}

void re::ProbeManager::init(re::ProbeManager *this, const re::RenderManager *a2)
{
  *((void *)this + 1) = a2;
  int v4 = 7;
  uint64_t v5 = (_anonymous_namespace_ *)re::DynamicArray<re::Optional<re::ProbeManager::ProbeSlice>>::setCapacity((void *)this + 17, 7uLL);
  int v6 = *((_DWORD *)this + 40) + 1;
  *((_DWORD *)this + 40) = v6;
  unint64_t v7 = *((void *)this + 19);
  do
  {
    unint64_t v8 = *((void *)this + 18);
    if (v7 >= v8)
    {
      unint64_t v9 = v7 + 1;
      if (v8 < v7 + 1)
      {
        if (*((void *)this + 17))
        {
          unint64_t v10 = 2 * v8;
          if (!v8) {
            unint64_t v10 = 8;
          }
          if (v10 <= v9) {
            unint64_t v11 = v7 + 1;
          }
          else {
            unint64_t v11 = v10;
          }
          uint64_t v5 = (_anonymous_namespace_ *)re::DynamicArray<re::Optional<re::ProbeManager::ProbeSlice>>::setCapacity((void *)this + 17, v11);
          int v6 = *((_DWORD *)this + 40);
        }
        else
        {
          uint64_t v5 = (_anonymous_namespace_ *)re::DynamicArray<re::Optional<re::ProbeManager::ProbeSlice>>::setCapacity((void *)this + 17, v9);
          int v6 = *((_DWORD *)this + 40) + 1;
        }
      }
      unint64_t v7 = *((void *)this + 19);
    }
    *(unsigned char *)(*((void *)this + 21) + 160 * v7++) = 0;
    *((void *)this + 19) = v7;
    *((_DWORD *)this + 40) = ++v6;
    --v4;
  }
  while (v4);
  uint64_t v12 = (_anonymous_namespace_ *)re::DynamicArray<re::ProbeSpecularWorkload>::setCapacity((void *)this + 43, 0x25uLL);
  ++*((_DWORD *)this + 92);
  re::DynamicArray<re::MeshLodLevelInfo>::setCapacity((void *)this + 56, 2uLL);
  ++*((_DWORD *)this + 118);
  *((unsigned char *)this + 808) = *((unsigned char *)a2 + 305);
  uint64_t v14 = (void *)*((void *)a2 + 23);
  unint64_t v13 = (id *)((char *)a2 + 184);
  id v29 = v14;
  id v15 = objc_msgSend(objc_msgSend(MEMORY[0x263F12A50], sel_alloc), sel_init);
  objc_msgSend(v15, sel_setStorageMode_, 2);
  objc_msgSend(v15, sel_setTextureType_, 5);
  objc_msgSend(v15, sel_setWidth_, 256);
  objc_msgSend(v15, sel_setHeight_, 256);
  objc_msgSend(v15, sel_setPixelFormat_, 115);
  objc_msgSend(v15, sel_setMipmapLevelCount_, 9);
  objc_msgSend(v15, sel_setProtectionOptions_, re::protectionOptions((re *)objc_msgSend(v15, sel_setUsage_, 3)));
  re::mtl::Device::makeTexture(v15, &v29, v36);
  NS::SharedPtr<MTL::Texture>::operator=((void **)this + 13, v36);
  if (v36[0]) {

  }
  re::mtl::Device::makeTexture(v15, &v29, v36);
  NS::SharedPtr<MTL::Texture>::operator=((void **)this + 14, v36);
  if (v36[0]) {

  }
  if (v15) {
  int v16 = *((unsigned __int8 *)this + 808);
  }
  id v17 = *v13;
  id v18 = objc_msgSend(objc_msgSend(MEMORY[0x263F12A50], sel_alloc), sel_init);
  objc_msgSend(v18, sel_setStorageMode_, 2);
  if (v16)
  {
    objc_msgSend(v18, sel_setTextureType_, 6);
    objc_msgSend(v18, sel_setWidth_, 256);
    objc_msgSend(v18, sel_setHeight_, 256);
  }
  else
  {
    objc_msgSend(v18, sel_setTextureType_, 3);
    objc_msgSend(v18, sel_setWidth_, 512);
    objc_msgSend(v18, sel_setHeight_, 512);
  }
  objc_msgSend(v18, sel_setArrayLength_, 7);
  objc_msgSend(v18, sel_setPixelFormat_, 115);
  objc_msgSend(v18, sel_setMipmapLevelCount_, 9);
  objc_msgSend(v18, sel_setProtectionOptions_, re::protectionOptions((re *)objc_msgSend(v18, sel_setUsage_, 3)));
  re::mtl::Device::makeTexture(v18, v13, &v29);
  NS::SharedPtr<MTL::Texture>::operator=((void **)this + 10, &v29);
  if (v29) {

  }
  if (v18) {
  if (*((unsigned char *)this + 808))
  }
  {
    id v19 = *v13;
    id v20 = objc_msgSend(objc_msgSend(MEMORY[0x263F12A50], sel_alloc), (SEL)0x264BEE618);
    objc_msgSend(v20, sel_setStorageMode_, 2);
    objc_msgSend(v20, sel_setTextureType_, 6);
    objc_msgSend(v20, (SEL)&selRef_addRenderPipelineFunctionsWithDescriptor_error_, 8);
    objc_msgSend(v20, sel_setHeight_, 8);
    objc_msgSend(v20, sel_setArrayLength_, 7);
    objc_msgSend(v20, sel_setPixelFormat_, 115);
    objc_msgSend(v20, sel_setMipmapLevelCount_, 1);
    objc_msgSend(v20, sel_setUsage_, 3);
    re::mtl::Device::makeTexture(v20, v13, &v29);
    NS::SharedPtr<MTL::Texture>::operator=((void **)this + 11, &v29);
    if (v29) {

    }
    if (v20) {
    if (*((unsigned char *)this + 808))
    }
    {
      id v21 = *v13;
      id v22 = objc_msgSend(objc_msgSend(MEMORY[0x263F12A50], sel_alloc), (SEL)0x264BEE618);
      objc_msgSend(v22, sel_setStorageMode_, 2);
      objc_msgSend(v22, sel_setTextureType_, 5);
      objc_msgSend(v22, (SEL)&selRef_addRenderPipelineFunctionsWithDescriptor_error_, 8);
      objc_msgSend(v22, sel_setHeight_, 8);
      objc_msgSend(v22, sel_setPixelFormat_, 115);
      objc_msgSend(v22, sel_setMipmapLevelCount_, 1);
      objc_msgSend(v22, sel_setUsage_, 3);
      re::mtl::Device::makeTexture(v22, v13, &v29);
      NS::SharedPtr<MTL::Texture>::operator=((void **)this + 15, &v29);
      if (v29) {

      }
      if (v22) {
    }
      }
  }
  for (uint64_t i = 16; i != 464; i += 112)
  {
    unint64_t v24 = (_OWORD *)((char *)&v29 + i);
    v24[1] = 0uLL;
    v24[2] = 0uLL;
    *unint64_t v24 = 0uLL;
  }
  for (uint64_t j = 464; j != 800; j += 112)
  {
    uint64_t v26 = (_OWORD *)((char *)&v29 + j);
    v26[1] = 0uLL;
    v26[2] = 0uLL;
    *uint64_t v26 = 0uLL;
  }
  id v29 = 0;
  char v30 = 1;
  int v31 = 1065353216;
  long long v27 = *(_OWORD *)(MEMORY[0x263EF89A0] + 16);
  long long v32 = *MEMORY[0x263EF89A0];
  long long v33 = v27;
  long long v34 = *(_OWORD *)(MEMORY[0x263EF89A0] + 32);
  char v35 = 0;
  *((unsigned char *)this + 824) = 0;
  id v28 = *v13;
  v36[0] = objc_msgSend(v28, sel_newBufferWithBytes_length_options_, &v29, 864, 0);
  NS::SharedPtr<MTL::Texture>::operator=((void **)this + 16, v36);
  if (v36[0]) {

  }
  *((unsigned char *)this + 184) = 0;
}

void re::ProbeManager::addProbe(uint64_t a1, id a2, id *a3, char a4, long long *a5, float a6)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  id v13 = a2;
  unint64_t v11 = (_anonymous_namespace_ *)(a1 + 16);
  id v14 = objc_msgSend(*a3, sel_hash);
  re::HashBrown<long long,unsigned long,re::Hash<long long>,re::EqualTo<long long>,void,false>::addNew(v11, (unint64_t *)&v13, (uint64_t *)&v14);
  id v14 = v13;
  id v15 = *a3;
  long long v12 = a5[1];
  long long v16 = *a5;
  long long v17 = v12;
  long long v18 = a5[2];
  float v19 = a6;
  char v20 = a4;
  re::DynamicArray<re::ProbeManager::ProbeAdd>::add((_anonymous_namespace_ *)(a1 + 600), (uint64_t)&v14);
  if (v15) {
}
  }

uint64_t re::HashBrown<long long,unsigned long,re::Hash<long long>,re::EqualTo<long long>,void,false>::addNew(_anonymous_namespace_ *a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(a1, a2);
  if (v6 != -1) {
    return *((void *)a1 + 1) + 16 * v6 + 8;
  }
  return re::HashBrown<long long,unsigned long,re::Hash<long long>,re::EqualTo<long long>,void,false>::internalAdd(a1, a2, a3);
}

__n128 re::DynamicArray<re::ProbeManager::ProbeAdd>::add(_anonymous_namespace_ *this, uint64_t a2)
{
  unint64_t v4 = *((void *)this + 2);
  if (v4 >= *((void *)this + 1))
  {
    re::DynamicArray<re::ProbeManager::ProbeAdd>::growCapacity(this, v4 + 1);
    unint64_t v4 = *((void *)this + 2);
  }
  uint64_t v5 = *((void *)this + 4) + 80 * v4;
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)uint64_t v5 = *(void *)a2;
  *(void *)(v5 + 8) = v6;
  *(void *)(a2 + 8) = 0;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v8 = *(_OWORD *)(a2 + 32);
  long long v9 = *(_OWORD *)(a2 + 48);
  *(void *)(v5 + 61) = *(void *)(a2 + 61);
  *(_OWORD *)(v5 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = v8;
  *(_OWORD *)(v5 + 48) = v9;
  *(__n128 *)(v5 + 16) = result;
  ++*((void *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

void re::ProbeManager::updateProbe(uint64_t a1, uint64_t a2, id *a3, float a4)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  v31[0] = a2;
  unint64_t v7 = (void *)(a1 + 16);
  id v8 = objc_msgSend(*a3, sel_hash);
  uint64_t v9 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(v7, v31);
  if (v9 != -1) {
    *(void *)(*(void *)(a1 + 24) + 16 * v9 + 8) = v8;
  }
  uint64_t v10 = *(void *)(a1 + 616);
  if (v10)
  {
    unint64_t v11 = (void **)(*(void *)(a1 + 632) + 8);
    while (*(v11 - 1) != (void *)v31[0])
    {
      v11 += 10;
      if (!--v10) {
        goto LABEL_7;
      }
    }
    NS::SharedPtr<MTL::Texture>::operator=(v11, a3);
  }
  else
  {
LABEL_7:
    unint64_t v12 = *(void *)(a1 + 576);
    if (v12)
    {
      uint64_t v13 = 0;
      for (unint64_t i = 0; i < v12; ++i)
      {
        if (*(void *)(*(void *)(a1 + 592) + v13) == v31[0])
        {
          re::DynamicArray<re::ProbeManager::ProbeUpdate>::removeAt(a1 + 560, i);
          unint64_t v12 = *(void *)(a1 + 576);
        }
        v13 += 24;
      }
    }
    unint64_t v15 = *(void *)(a1 + 152);
    if (v15)
    {
      unint64_t v16 = 0;
      uint64_t v17 = v31[0];
      for (uint64_t j = (unsigned char *)(*(void *)(a1 + 168) + 32); !*(j - 32) || *((void *)j - 1) != v31[0]; j += 160)
      {
        if (v15 == ++v16) {
          return;
        }
      }
      if (v15 <= v16)
      {
        v31[1] = 0;
        long long v43 = 0u;
        long long v44 = 0u;
        long long v41 = 0u;
        long long v42 = 0u;
        long long v40 = 0u;
        unint64_t v30 = v16;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v32 = 136315906;
        long long v33 = "operator[]";
        __int16 v34 = 1024;
        int v35 = 789;
        __int16 v36 = 2048;
        unint64_t v37 = v30;
        __int16 v38 = 2048;
        unint64_t v39 = v15;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      float v19 = (_anonymous_namespace_ *)*a3;
      char v20 = v19;
      char v21 = *j;
      unint64_t v22 = *(void *)(a1 + 576);
      unint64_t v23 = *(void *)(a1 + 568);
      if (v22 >= v23)
      {
        unint64_t v24 = v22 + 1;
        if (v23 < v22 + 1)
        {
          if (*(void *)(a1 + 560))
          {
            uint64_t v25 = 2 * v23;
            BOOL v26 = v23 == 0;
            unint64_t v27 = 8;
            if (!v26) {
              unint64_t v27 = v25;
            }
            if (v27 <= v24) {
              unint64_t v28 = v24;
            }
            else {
              unint64_t v28 = v27;
            }
            re::DynamicArray<re::ProbeManager::ProbeUpdate>::setCapacity((void *)(a1 + 560), v28);
          }
          else
          {
            re::DynamicArray<re::ProbeManager::ProbeUpdate>::setCapacity((void *)(a1 + 560), v24);
            ++*(_DWORD *)(a1 + 584);
          }
        }
        unint64_t v22 = *(void *)(a1 + 576);
      }
      uint64_t v29 = *(void *)(a1 + 592) + 24 * v22;
      *(void *)uint64_t v29 = v17;
      *(void *)(v29 + 8) = v20;
      *(float *)(v29 + 16) = a4;
      *(unsigned char *)(v29 + 20) = v21;
      ++*(void *)(a1 + 576);
      ++*(_DWORD *)(a1 + 584);
    }
  }
}

void re::DynamicArray<re::ProbeManager::ProbeUpdate>::removeAt(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (v2 - 1 > a2)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = v4 + 24 * v2;
    uint64_t v6 = v4 + 24 * a2;
    *(void *)uint64_t v6 = *(void *)(v5 - 24);
    NS::SharedPtr<MTL::Texture>::operator=((void **)(v6 + 8), (void **)(v5 - 16));
    int v7 = *(_DWORD *)(v5 - 8);
    *(unsigned char *)(v6 + 20) = *(unsigned char *)(v5 - 4);
    *(_DWORD *)(v6 + 16) = v7;
    unint64_t v2 = *(void *)(a1 + 16);
  }
  uint64_t v8 = *(void *)(a1 + 32) + 24 * v2;
  uint64_t v9 = *(void **)(v8 - 16);
  if (v9)
  {

    *(void *)(v8 - 16) = 0;
    unint64_t v2 = *(void *)(a1 + 16);
  }
  *(void *)(a1 + 16) = v2 - 1;
  ++*(_DWORD *)(a1 + 24);
}

uint64_t re::ProbeManager::removeProbe(re::ProbeManager *this, unint64_t a2)
{
  unint64_t v11 = a2;
  re::HashBrown<long long,unsigned long,re::Hash<long long>,re::EqualTo<long long>,void,false>::remove((uint64_t *)this + 2, &v11);
  unint64_t v3 = *((void *)this + 77);
  if (v3)
  {
    uint64_t v4 = 0;
    for (unint64_t i = 0; i < v3; ++i)
    {
      if (*(void *)(*((void *)this + 79) + v4) == v11)
      {
        re::DynamicArray<re::ProbeManager::ProbeAdd>::removeAt((uint64_t)this + 600, i);
        unint64_t v3 = *((void *)this + 77);
      }
      v4 += 80;
    }
  }
  unint64_t v6 = *((void *)this + 72);
  if (v6)
  {
    uint64_t v7 = 0;
    for (unint64_t j = 0; j < v6; ++j)
    {
      if (*(void *)(*((void *)this + 74) + v7) == v11)
      {
        re::DynamicArray<re::ProbeManager::ProbeUpdate>::removeAt((uint64_t)this + 560, j);
        unint64_t v6 = *((void *)this + 72);
      }
      v7 += 24;
    }
  }
  if (*((unsigned char *)this + 232))
  {
    if (*((void *)this + 36) == v11)
    {
      re::ProbeManager::cancelSliceOperation(this);
      if (*((unsigned char *)this + 768))
      {
        if (*((void *)this + 98) == v11) {
          *((unsigned char *)this + 768) = 0;
        }
      }
    }
  }
  int v10 = 0;
  return re::HashBrown<long long,float,re::Hash<long long>,re::EqualTo<long long>,void,false>::addNew((re::ProbeManager *)((char *)this + 704), &v11, &v10);
}

BOOL re::HashBrown<long long,unsigned long,re::Hash<long long>,re::EqualTo<long long>,void,false>::remove(uint64_t *a1, void *a2)
{
  uint64_t v3 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(a1, a2);
  uint64_t v4 = v3;
  if (v3 != -1)
  {
    uint64_t v5 = (int8x16_t *)(*a1 + (v3 & 0xFFFFFFFFFFFFFFF0));
    v6.i64[0] = -1;
    v6.i64[1] = -1;
    int8x8_t v7 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(*v5, v6), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800);
    if (v7) {
      char v8 = -1;
    }
    else {
      char v8 = 0x80;
    }
    v5->i8[v3 & 0xF] = v8;
    unint64_t v9 = a1[2];
    unint64_t v10 = *(void *)(a1[1] + 16 * v3);
    unint64_t v11 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * (v10 ^ (v10 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v10 ^ (v10 >> 30))) >> 27));
    a1[5] ^= (v11 >> 31) ^ v11;
    uint64_t v12 = a1[4];
    if (v7) {
      ++v12;
    }
    unint64_t v13 = a1[3] - 1;
    a1[3] = v13;
    a1[4] = v12;
    if (v9 >= 0x11 && v13 < v9 >> 2) {
      re::HashBrown<long long,unsigned long,re::Hash<long long>,re::EqualTo<long long>,void,false>::resize(a1, 0);
    }
  }
  return v4 != -1;
}

void re::DynamicArray<re::ProbeManager::ProbeAdd>::removeAt(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (v2 - 1 > a2)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = v4 + 80 * v2;
    uint64_t v6 = v4 + 80 * a2;
    *(void *)uint64_t v6 = *(void *)(v5 - 80);
    NS::SharedPtr<MTL::Texture>::operator=((void **)(v6 + 8), (void **)(v5 - 72));
    long long v7 = *(_OWORD *)(v5 - 64);
    long long v8 = *(_OWORD *)(v5 - 48);
    long long v9 = *(_OWORD *)(v5 - 32);
    *(void *)(v6 + 61) = *(void *)(v5 - 19);
    *(_OWORD *)(v6 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = v8;
    *(_OWORD *)(v6 + 48) = v9;
    *(_OWORD *)(v6 + 16) = v7;
    unint64_t v2 = *(void *)(a1 + 16);
  }
  uint64_t v10 = *(void *)(a1 + 32) + 80 * v2;
  unint64_t v11 = *(void **)(v10 - 72);
  if (v11)
  {

    *(void *)(v10 - 72) = 0;
    unint64_t v2 = *(void *)(a1 + 16);
  }
  *(void *)(a1 + 16) = v2 - 1;
  ++*(_DWORD *)(a1 + 24);
}

uint64_t re::ProbeManager::cancelSliceOperation(re::ProbeManager *this)
{
  v4[9] = *(void **)MEMORY[0x263EF8340];
  unint64_t v2 = (char *)this + 232;
  re::ProbeManager::freeSlice((uint64_t)this, *((void *)this + 31));
  LOBYTE(v4[0]) = 0;
  re::Optional<re::ProbeManager::SliceOperation>::operator=((uint64_t)v2, v4);
  re::Optional<re::ProbeManager::SliceOperation>::~Optional((uint64_t)v4);
  if (*((unsigned char *)this + 304)) {
    *((unsigned char *)this + 304) = 0;
  }
  if (*((unsigned char *)this + 336)) {
    *((unsigned char *)this + 336) = 0;
  }
  *((void *)this + 45) = 0;
  ++*((_DWORD *)this + 92);
  if (*((unsigned char *)this + 384)) {
    *((unsigned char *)this + 384) = 0;
  }
  *((void *)this + 58) = 0;
  ++*((_DWORD *)this + 118);
  LOBYTE(v4[0]) = 0;
  re::Optional<re::ProbeLatLongComputeWorkload>::operator=((uint64_t)this + 488, (unsigned __int8 *)v4);
  return re::Optional<re::ProbeLatLongComputeWorkload>::~Optional((uint64_t)v4);
}

uint64_t re::HashBrown<long long,float,re::Hash<long long>,re::EqualTo<long long>,void,false>::addNew(_anonymous_namespace_ *a1, unint64_t *a2, int *a3)
{
  uint64_t v6 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(a1, a2);
  if (v6 != -1) {
    return *((void *)a1 + 1) + 16 * v6 + 8;
  }
  return re::HashBrown<long long,float,re::Hash<long long>,re::EqualTo<long long>,void,false>::internalAdd(a1, a2, a3);
}

uint64_t re::ProbeManager::addProbeCallBack(re::ProbeManager *this, unint64_t a2)
{
  unint64_t v4 = a2;
  int v3 = 0;
  return re::HashBrown<long long,float,re::Hash<long long>,re::EqualTo<long long>,void,false>::addNew((re::ProbeManager *)((char *)this + 640), &v4, &v3);
}

uint64_t re::ProbeManager::updateProbeCallBack(uint64_t this)
{
  *(unsigned char *)(this + 776) = 1;
  return this;
}

void re::ProbeManager::update(re::ProbeManager *this, float a2)
{
  re::ProbeManager::freeStaleTextureSlices((uint64_t)this);
  if ((*((_DWORD *)this + 44) + *((_DWORD *)this + 45)) <= 6) {
    re::ProbeManager::assignTextureSlices(this);
  }
  re::ProbeManager::updateWeights(this, a2);
  re::ProbeManager::regenerateBuffer(this);
}

uint64_t re::ProbeManager::freeStaleTextureSlices(uint64_t this)
{
  uint64_t v1 = this;
  if (*(unsigned char *)(this + 768) && *(float *)(this + 800) >= 1.0)
  {
    unint64_t v2 = *(unsigned int *)(this + 796);
    if (*(void *)(this + 152) <= v2)
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v3 = *(void *)(this + 168) + 160 * v2;
    uint64_t v4 = v3 + 16;
    int v5 = *(unsigned __int8 *)(v3 + 32);
    int v6 = *(_DWORD *)(v3 + 144);
    if (v5) {
      *(_DWORD *)(v4 + 1re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = v6;
    }
    else {
      *(_DWORD *)(v4 + 136) = v6;
    }
    this = re::ProbeManager::freeSlice(this, *(unsigned int *)(this + 792));
    if (*(unsigned char *)(v1 + 768)) {
      *(unsigned char *)(v1 + 768) = 0;
    }
  }
  unint64_t v7 = *(void *)(v1 + 152);
  if (v7)
  {
    uint64_t v8 = 0;
    for (unint64_t i = 0; i < v7; ++i)
    {
      uint64_t v10 = *(void *)(v1 + 168);
      if (*(unsigned char *)(v10 + v8))
      {
        uint64_t v11 = v10 + v8;
        int v12 = *(unsigned __int8 *)(v11 + 32);
        unint64_t v13 = (float *)(v11 + 132);
        id v14 = (float *)(v11 + 136);
        if (v12) {
          id v14 = v13;
        }
        if (*v14 <= 0.0)
        {
          this = re::ProbeManager::freeSlice(v1, i);
          unint64_t v7 = *(void *)(v1 + 152);
        }
      }
      v8 += 160;
    }
  }
  return this;
}

void re::ProbeManager::assignTextureSlices(re::ProbeManager *this)
{
  uint64_t v122 = *MEMORY[0x263EF8340];
  if (!*((unsigned char *)this + 768))
  {
    uint64_t v1 = &v103;
    while (1)
    {
      uint64_t v41 = *((void *)this + 72);
      if (!v41) {
        goto LABEL_2;
      }
      unint64_t v42 = 0;
      unint64_t v2 = *((void *)this + 74) + 16;
      while (1)
      {
        BOOL v43 = *((_DWORD *)this + 45) < 4u;
        if (*(unsigned char *)(v2 + 4)) {
          BOOL v43 = *((_DWORD *)this + 44) < 3u;
        }
        if (v43) {
          break;
        }
        ++v42;
        v2 += 24;
        if (v41 == v42) {
          goto LABEL_2;
        }
      }
      uint64_t v44 = *(void *)(v2 - 16);
      id v45 = *(id *)(v2 - 8);
      int v104 = *(_DWORD *)v2;
      char v105 = *(unsigned char *)(v2 + 4);
      re::DynamicArray<re::ProbeManager::ProbeUpdate>::removeAt((uint64_t)this + 560, v42);
      uint64_t v102 = v44;
      id v46 = v45;
      long long v47 = v46;
      id v103 = v46;
      unint64_t v48 = *((void *)this + 19);
      if (v48) {
        break;
      }
LABEL_37:
      if (v46) {
        goto LABEL_38;
      }
LABEL_39:
      if (v45) {

      }
      if (*((unsigned char *)this + 768)) {
        goto LABEL_2;
      }
    }
    unint64_t v2 = 0;
    long long v49 = (unsigned __int8 *)*((void *)this + 21);
    long long v50 = v49 + 136;
    while (!*((unsigned char *)v50 - 136) || *((void *)v50 - 14) != v44)
    {
      ++v2;
      v50 += 40;
      if (v48 == v2) {
        goto LABEL_37;
      }
    }
    unint64_t v51 = 0;
    while (1)
    {
      int v52 = *v49;
      v49 += 160;
      if (!v52) {
        break;
      }
      if (v48 == ++v51)
      {
        unint64_t v53 = *(void *)v69;
        goto LABEL_48;
      }
    }
    unint64_t v53 = v51;
LABEL_48:
    if (!*((unsigned char *)this + 768)) {
      *((unsigned char *)this + 768) = 1;
    }
    *((unsigned char *)this + 776) = 0;
    *((void *)this + 98) = v44;
    *((_DWORD *)this + 198) = v2;
    *((_DWORD *)this + 199) = v53;
    *((_DWORD *)this + 200) = 0;
    if (v48 <= v2)
    {
      uint64_t v106 = 0;
      long long v111 = 0u;
      *(_OWORD *)uint64_t v112 = 0u;
      long long v109 = 0u;
      float32x4_t v110 = 0u;
      long long v108 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v114 = 136315906;
      uint64_t v115 = "operator[]";
      __int16 v116 = 1024;
      int v117 = 789;
      __int16 v118 = 2048;
      unint64_t v119 = v2;
      __int16 v120 = 2048;
      unint64_t v121 = v48;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    int v54 = v104;
    char v55 = *((unsigned char *)v50 - 104);
    if (v55)
    {
      int64x2_t v56 = v50 + 5;
      int v57 = v50[2];
      uint64_t v58 = v50 + 1;
      int v59 = 0;
      int v60 = v104;
      int v54 = v53;
    }
    else
    {
      int v60 = 0;
      int64x2_t v56 = v50 + 2;
      int v59 = *v50;
      uint64_t v58 = v50 + 3;
      int v57 = v53;
    }
    unint64_t v61 = (char *)v50 - 103;
    int v62 = *v58;
    int v63 = *v56;
    char v89 = v55;
    long long v64 = *((_OWORD *)v61 + 5);
    long long v94 = *((_OWORD *)v61 + 4);
    *(_OWORD *)unint64_t v95 = v64;
    *(void *)&v95[15] = *(void *)(v61 + 95);
    long long v65 = *((_OWORD *)v61 + 1);
    long long v90 = *(_OWORD *)v61;
    long long v91 = v65;
    long long v66 = *((_OWORD *)v61 + 3);
    long long v92 = *((_OWORD *)v61 + 2);
    long long v93 = v66;
    int v96 = v59;
    int v97 = v60;
    int v98 = v54;
    int v99 = v57;
    int v100 = v62;
    int v101 = v63;
    v113[0] = &unk_26E70FAA0;
    v113[1] = re::ProbeManager::updateProbeCallBack;
    v113[2] = 0;
    v113[3] = v113;
    *(void *)uint64_t v69 = v53;
    re::ProbeManager::assignSliceToProbe((uint64_t)this, v53, v44, &v103, &v89, (uint64_t)v113);
    std::__function::__value_func<void ()(re::ProbeManager &,long long)>::~__value_func[abi:nn180100](v113);
    if (!v47) {
      goto LABEL_39;
    }
LABEL_38:

    goto LABEL_39;
  }
LABEL_2:
  uint64_t v4 = *((void *)this + 77);
  if (v4)
  {
    int v5 = (const float *)&dword_234366B94;
    float32x2_t v6 = vld1_dup_f32(v5);
    __int32 v67 = v6.i32[1];
    __asm { FMOV            V0.2S, #1.0 }
    unsigned int v68 = HIDWORD(_D0);
    do
    {
      unint64_t v12 = 0;
      for (uint64_t i = *((void *)this + 79); ; i += 80)
      {
        BOOL v14 = *((_DWORD *)this + 45) < 4u;
        if (*(unsigned char *)(i + 68)) {
          BOOL v14 = *((_DWORD *)this + 44) < 3u;
        }
        if (v14) {
          break;
        }
        if (v4 == ++v12) {
          return;
        }
      }
      uint64_t v15 = *(void *)i;
      id v16 = *(id *)(i + 8);
      float32x4_t v110 = *(float32x4_t *)(i + 16);
      long long v111 = *(_OWORD *)(i + 32);
      *(_OWORD *)uint64_t v112 = *(_OWORD *)(i + 48);
      *(void *)&v112[13] = *(void *)(i + 61);
      re::DynamicArray<re::ProbeManager::ProbeAdd>::removeAt((uint64_t)this + 600, v12);
      LOBYTE(v108) = 1;
      *(void *)&long long v109 = v15;
      *((void *)&v109 + 1) = v16;
      uint64_t v17 = *((void *)this + 19);
      if (v17)
      {
        unint64_t v18 = 0;
        float v19 = (unsigned __int8 *)*((void *)this + 21);
        char v20 = v1;
        while (1)
        {
          int v21 = *v19;
          v19 += 160;
          if (!v21) {
            break;
          }
          if (v17 == ++v18) {
            goto LABEL_17;
          }
        }
        unint64_t v2 = v18;
      }
      else
      {
        char v20 = v1;
      }
LABEL_17:
      char v22 = v112[20];
      int v23 = *(_DWORD *)&v112[16];
      if (v112[20])
      {
        v24.i64[0] = 0x3F0000003F000000;
        v24.i64[1] = 0x3F0000003F000000;
        float32x4_t v25 = vmulq_f32(v110, v24);
        float32x4_t v26 = vmulq_f32(v25, v25);
        unint64_t v27 = __PAIR64__(v68, COERCE_UNSIGNED_INT(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v26, 2), vaddq_f32(v26, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v26.f32, 1))).f32[0])));
        char v22 = 1;
        int v28 = v2;
        int v29 = *(_DWORD *)&v112[16];
      }
      else
      {
        unint64_t v27 = __PAIR64__(v67, COERCE_UNSIGNED_INT(fminf(v110.f32[0], fminf(v110.f32[1], v110.f32[2]))));
        char v20 = (id *)*(unsigned int *)&v112[16];
        int v28 = *(_DWORD *)&v112[16];
        int v23 = 1065353216;
        int v29 = v2;
      }
      float v30 = *((float *)&v111 + 1) * (float)(*((float *)&v111 + 1) + *((float *)&v111 + 1));
      float v31 = *((float *)&v111 + 2) * (float)(*((float *)&v111 + 2) + *((float *)&v111 + 2));
      float v32 = (float)(*(float *)&v111 + *(float *)&v111) * *((float *)&v111 + 1);
      float v33 = (float)(*(float *)&v111 + *(float *)&v111) * *((float *)&v111 + 2);
      float v34 = (float)(*((float *)&v111 + 2) + *((float *)&v111 + 2)) * *((float *)&v111 + 3);
      *(float *)&uint64_t v35 = 1.0 - (float)(v30 + v31);
      *((float *)&v35 + 1) = v32 - v34;
      float v72 = v33 + (float)((float)(*((float *)&v111 + 1) + *((float *)&v111 + 1)) * *((float *)&v111 + 3));
      float v36 = *(float *)&v111 * (float)(*(float *)&v111 + *(float *)&v111);
      float v37 = (float)(*((float *)&v111 + 1) + *((float *)&v111 + 1)) * *((float *)&v111 + 2);
      float v38 = (float)(*(float *)&v111 + *(float *)&v111) * *((float *)&v111 + 3);
      *(float *)&uint64_t v39 = v32 + v34;
      *(float *)&uint64_t v40 = v33 - (float)((float)(*((float *)&v111 + 1) + *((float *)&v111 + 1)) * *((float *)&v111 + 3));
      *((float *)&v39 + 1) = 1.0 - (float)(v36 + v31);
      *((float *)&v40 + 1) = v37 + v38;
      LOBYTE(__src) = v22;
      uint64_t v71 = v35;
      int v73 = 0;
      float v75 = v37 - v38;
      uint64_t v74 = v39;
      int v76 = 0;
      float v78 = 1.0 - (float)(v36 + v30);
      uint64_t v77 = v40;
      int v79 = 0;
      long long v80 = *(_OWORD *)v112;
      float32x4_t v81 = v110;
      unint64_t v82 = v27;
      int v83 = 1065353216;
      int v84 = v23;
      int v85 = v28;
      int v86 = v2;
      int v87 = v29;
      int v88 = (int)v20;
      uint64_t v1 = v20;
      v107[0] = &unk_26E70FAA0;
      v107[1] = re::ProbeManager::addProbeCallBack;
      v107[2] = 0;
      v107[3] = v107;
      re::ProbeManager::assignSliceToProbe((uint64_t)this, v2, v15, (id *)&v109 + 1, &__src, (uint64_t)v107);
      std::__function::__value_func<void ()(re::ProbeManager &,long long)>::~__value_func[abi:nn180100](v107);
      if (v16) {

      }
      uint64_t v4 = *((void *)this + 77);
    }
    while (v4);
  }
}

void *re::ProbeManager::updateWeights(void *this, float a2)
{
  uint64_t v4 = this;
  uint64_t v62 = *MEMORY[0x263EF8340];
  if (this[83] || this[91] || *((unsigned char *)this + 768))
  {
    if (*((unsigned char *)this + 768) && *((unsigned char *)this + 776))
    {
      float v5 = *((float *)this + 200) + a2;
      if (v5 > 1.0) {
        float v5 = 1.0;
      }
      if (v5 < 0.0) {
        float v5 = 0.0;
      }
      *((float *)this + 200) = v5;
      unint64_t v6 = *((unsigned int *)this + 198);
      unint64_t v7 = (void *)this[19];
      if ((unint64_t)v7 <= v6) {
        goto LABEL_77;
      }
      uint64_t v8 = this[21];
      if (*(unsigned char *)(v8 + 160 * v6))
      {
        unint64_t v2 = *((unsigned int *)this + 199);
        if ((unint64_t)v7 <= v2) {
          goto LABEL_78;
        }
        if (*(unsigned char *)(v8 + 160 * v2))
        {
          float v9 = 1.0 - v5;
          uint64_t v10 = v8 + 160 * v6;
          if (*(unsigned char *)(v10 + 32)) {
            uint64_t v11 = 120;
          }
          else {
            uint64_t v11 = 124;
          }
          *(float *)(v10 + v11 + 16) = v9;
          uint64_t v12 = v8 + 160 * v2;
          if (*(unsigned char *)(v12 + 32)) {
            uint64_t v13 = 120;
          }
          else {
            uint64_t v13 = 124;
          }
          *(_DWORD *)(v12 + v13 + 16) = *((_DWORD *)this + 200);
        }
      }
    }
    unint64_t v7 = this + 80;
    uint64_t v14 = this[19];
    if (v14)
    {
      uint64_t v15 = this[21] + 136;
      do
      {
        if (*(unsigned char *)(v15 - 136))
        {
          if (*(unsigned char *)(v15 - 104)) {
            id v16 = (_DWORD *)(v15 - 4);
          }
          else {
            id v16 = (_DWORD *)v15;
          }
          *id v16 = 1065353216;
        }
        v15 += 160;
        --v14;
      }
      while (v14);
    }
    id v45 = this + 80;
    unint64_t v17 = this[82];
    if (v17 >= 0x10)
    {
      uint64_t v18 = 0;
      uint64_t v19 = *v7;
      unint64_t v20 = v17 >> 4;
      while (1)
      {
        unsigned __int16 v21 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v19 + v18)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800).u16[0];
        uint64_t v46 = (unsigned __int16)~v21;
        if (v21 != 0xFFFF) {
          break;
        }
        v18 += 16;
        if (!--v20) {
          goto LABEL_51;
        }
      }
      uint64_t v22 = __clz(__rbit64((unsigned __int16)~v21)) + v18;
      for (i = v22; i != -1; uint64_t v22 = i)
      {
        uint64_t v23 = v45[1];
        uint64_t v24 = v23 + 16 * v22;
        uint64_t v44 = 0;
        float v26 = *(float *)(v24 + 8);
        float32x4_t v25 = (float *)(v24 + 8);
        uint64_t v27 = *(void *)(v23 + 16 * v22);
        uint64_t v44 = v27;
        float v28 = v26 + a2;
        *float32x4_t v25 = v26 + a2;
        unint64_t v6 = v4[19];
        if (!v6) {
          goto LABEL_49;
        }
        unint64_t v2 = 0;
        int v29 = (float *)(v4[21] + 136);
        while (!*((unsigned char *)v29 - 136) || *((void *)v29 - 14) != v27)
        {
          ++v2;
          v29 += 40;
          if (v6 == v2) {
            goto LABEL_49;
          }
        }
        if (v6 <= v2)
        {
          uint64_t v48 = 0;
          long long v60 = 0u;
          long long v61 = 0u;
          long long v58 = 0u;
          long long v59 = 0u;
          long long v57 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          int v49 = 136315906;
          long long v50 = "operator[]";
          __int16 v51 = 1024;
          int v52 = 789;
          __int16 v53 = 2048;
          unint64_t v54 = v2;
          __int16 v55 = 2048;
          int64x2_t v56 = (void *)v6;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_76:
          uint64_t v48 = 0;
          long long v60 = 0u;
          long long v61 = 0u;
          long long v58 = 0u;
          long long v59 = 0u;
          long long v57 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          int v49 = 136315906;
          long long v50 = "operator[]";
          __int16 v51 = 1024;
          int v52 = 789;
          __int16 v53 = 2048;
          unint64_t v54 = v2;
          __int16 v55 = 2048;
          int64x2_t v56 = (void *)v6;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_77:
          id v45 = 0;
          long long v60 = 0u;
          long long v61 = 0u;
          long long v58 = 0u;
          long long v59 = 0u;
          long long v57 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          int v49 = 136315906;
          long long v50 = "operator[]";
          __int16 v51 = 1024;
          int v52 = 789;
          __int16 v53 = 2048;
          unint64_t v54 = v6;
          __int16 v55 = 2048;
          int64x2_t v56 = v7;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_78:
          id v45 = 0;
          long long v60 = 0u;
          long long v61 = 0u;
          long long v58 = 0u;
          long long v59 = 0u;
          long long v57 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          int v49 = 136315906;
          long long v50 = "operator[]";
          __int16 v51 = 1024;
          int v52 = 789;
          __int16 v53 = 2048;
          unint64_t v54 = v2;
          __int16 v55 = 2048;
          int64x2_t v56 = v7;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        if (v28 > 1.0) {
          float v28 = 1.0;
        }
        if (v28 < 0.0) {
          float v28 = 0.0;
        }
        if (*((unsigned char *)v29 - 104)) {
          --v29;
        }
        *int v29 = v28 * *v29;
        if (*v25 >= 1.0) {
LABEL_49:
        }
          re::HashBrown<long long,float,re::Hash<long long>,re::EqualTo<long long>,void,false>::remove(v4 + 80, &v44);
        this = re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(&v45);
      }
    }
LABEL_51:
    unint64_t v7 = v4 + 88;
    id v45 = v4 + 88;
    unint64_t v30 = v4[90];
    if (v30 >= 0x10)
    {
      uint64_t v31 = 0;
      uint64_t v32 = *v7;
      unint64_t v33 = v30 >> 4;
      while (1)
      {
        unsigned __int16 v34 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v32 + v31)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800).u16[0];
        uint64_t v46 = (unsigned __int16)~v34;
        if (v34 != 0xFFFF) {
          break;
        }
        v31 += 16;
        if (!--v33) {
          goto LABEL_73;
        }
      }
      uint64_t v35 = __clz(__rbit64((unsigned __int16)~v34)) + v31;
      for (i = v35; i != -1; uint64_t v35 = i)
      {
        uint64_t v36 = v45[1];
        uint64_t v37 = v36 + 16 * v35;
        uint64_t v44 = 0;
        float v39 = *(float *)(v37 + 8);
        float v38 = (float *)(v37 + 8);
        uint64_t v40 = *(void *)(v36 + 16 * v35);
        uint64_t v44 = v40;
        float v41 = v39 + a2;
        float *v38 = v39 + a2;
        unint64_t v6 = v4[19];
        if (!v6) {
          goto LABEL_71;
        }
        unint64_t v2 = 0;
        unint64_t v42 = (float *)(v4[21] + 136);
        while (!*((unsigned char *)v42 - 136) || *((void *)v42 - 14) != v40)
        {
          ++v2;
          v42 += 40;
          if (v6 == v2) {
            goto LABEL_71;
          }
        }
        if (v6 <= v2) {
          goto LABEL_76;
        }
        float v43 = 1.0 - v41;
        if (v43 > 1.0) {
          float v43 = 1.0;
        }
        if (v43 < 0.0) {
          float v43 = 0.0;
        }
        if (*((unsigned char *)v42 - 104)) {
          --v42;
        }
        *unint64_t v42 = v43 * *v42;
        if (*v38 >= 1.0) {
LABEL_71:
        }
          re::HashBrown<long long,float,re::Hash<long long>,re::EqualTo<long long>,void,false>::remove(v4 + 88, &v44);
        this = re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(&v45);
      }
    }
LABEL_73:
    *((unsigned char *)v4 + 184) = 1;
  }
  return this;
}

void re::ProbeManager::regenerateBuffer(re::ProbeManager *this)
{
  if (*((unsigned char *)this + 184))
  {
    *((unsigned char *)this + 184) = 0;
    *((unsigned char *)this + 824) = 0;
    id v2 = *(id *)(*((void *)this + 1) + 184);
    unint64_t v29 = 0;
    for (uint64_t i = 16; i != 464; i += 112)
    {
      uint64_t v4 = (_OWORD *)((char *)&v29 + i);
      v4[1] = 0uLL;
      v4[2] = 0uLL;
      *uint64_t v4 = 0uLL;
    }
    for (uint64_t j = 464; j != 800; j += 112)
    {
      unint64_t v6 = (_OWORD *)((char *)&v29 + j);
      v6[1] = 0uLL;
      v6[2] = 0uLL;
      *unint64_t v6 = 0uLL;
    }
    char v36 = 0;
    uint64_t v7 = *((void *)this + 19);
    if (v7)
    {
      uint64_t v8 = 0;
      unsigned int v9 = 0;
      unsigned int v10 = 0;
      uint64_t v11 = (_OWORD *)(*((void *)this + 21) + 140);
      do
      {
        if (*((unsigned char *)v11 - 140)
          && *((unsigned char *)v11 - 124)
          && (!*((unsigned char *)this + 768) || !*((unsigned char *)this + 776) || v8 != *((_DWORD *)this + 198)))
        {
          uint64_t v12 = (_OWORD *)((char *)v11 - 92);
          if (*((unsigned char *)v11 - 108))
          {
            uint64_t v13 = &v29 + 14 * v9++;
            long long v14 = *v12;
            long long v15 = *(_OWORD *)((char *)v11 - 60);
            *((_OWORD *)v13 + 30) = *(_OWORD *)((char *)v11 - 76);
            *((_OWORD *)v13 + 31) = v15;
            *((_OWORD *)v13 + 29) = v14;
            long long v16 = *v11;
            long long v17 = *(_OWORD *)((char *)v11 - 44);
            long long v18 = *(_OWORD *)((char *)v11 - 12);
            *((_OWORD *)v13 + 33) = *(_OWORD *)((char *)v11 - 28);
            *((_OWORD *)v13 + 34) = v18;
            *((_OWORD *)v13 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = v17;
            *(_OWORD *)((char *)v13 + 556) = v16;
            float v19 = *((float *)v11 - 1);
          }
          else
          {
            unint64_t v20 = &v29 + 14 * v10++;
            long long v21 = *v12;
            long long v22 = *(_OWORD *)((char *)v11 - 60);
            *((_OWORD *)v20 + 2) = *(_OWORD *)((char *)v11 - 76);
            *((_OWORD *)v20 + 3) = v22;
            *((_OWORD *)v20 + 1) = v21;
            long long v23 = *(_OWORD *)((char *)v11 - 44);
            long long v24 = *(_OWORD *)((char *)v11 - 28);
            long long v25 = *(_OWORD *)((char *)v11 + 4);
            *((_OWORD *)v20 + 6) = *(_OWORD *)((char *)v11 - 12);
            *((_OWORD *)v20 + 7) = v25;
            *((_OWORD *)v20 + 4) = v23;
            *((_OWORD *)v20 + 5) = v24;
            float v19 = *(float *)v11;
          }
          if (v19 != 1.0) {
            *((unsigned char *)this + 824) = 1;
          }
        }
        v11 += 10;
        ++v8;
      }
      while (v7 != v8);
    }
    else
    {
      unsigned int v10 = 0;
      unsigned int v9 = 0;
    }
    *((_DWORD *)this + 24) = v10;
    *((_DWORD *)this + 25) = v9;
    unint64_t v29 = __PAIR64__(v9, v10);
    char v30 = *((unsigned char *)this + 809);
    if (*((unsigned char *)this + 810)) {
      float v26 = *((float *)this + 203);
    }
    else {
      float v26 = 1.0;
    }
    float v31 = v26;
    uint64_t v35 = *(void *)((char *)this + 828);
    long long v27 = *((_OWORD *)this + 54);
    long long v32 = *((_OWORD *)this + 53);
    long long v33 = v27;
    long long v34 = *((_OWORD *)this + 55);
    char v36 = *((unsigned char *)this + 896);
    id v28 = objc_msgSend(v2, sel_newBufferWithBytes_length_options_, &v29, 864, 0);
    NS::SharedPtr<MTL::Texture>::operator=((void **)this + 16, &v28);
    if (v28) {
  }
    }
}

uint64_t re::ProbeManager::freeSlice(uint64_t this, unint64_t a2)
{
  if (*(void *)(this + 152) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  id v2 = (unsigned char *)(*(void *)(this + 168) + 160 * a2);
  if (v2[32]) {
    --*(_DWORD *)(this + 176);
  }
  else {
    --*(_DWORD *)(this + 180);
  }
  if (*v2) {
    *id v2 = 0;
  }
  *(unsigned char *)(this + 184) = 1;
  return this;
}

void re::ProbeManager::assignSliceToProbe(uint64_t a1, unint64_t a2, uint64_t a3, id *a4, _OWORD *__src, uint64_t a6)
{
  uint64_t v51 = *MEMORY[0x263EF8340];
  long long v7 = __src[5];
  long long v34 = __src[4];
  long long v35 = v7;
  long long v8 = __src[7];
  long long v36 = __src[6];
  long long v37 = v8;
  *(_OWORD *)unint64_t v29 = *__src;
  long long v31 = __src[1];
  long long v9 = __src[3];
  long long v32 = __src[2];
  long long v33 = v9;
  unint64_t v10 = *(void *)(a1 + 152);
  if (v10 <= a2)
  {
    long long v49 = 0u;
    long long v50 = 0u;
    long long v47 = 0u;
    long long v48 = 0u;
    long long v46 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v38 = 136315906;
    float v39 = "operator[]";
    __int16 v40 = 1024;
    int v41 = 789;
    __int16 v42 = 2048;
    unint64_t v43 = a2;
    __int16 v44 = 2048;
    unint64_t v45 = v10;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  long long v16 = (unsigned __int8 *)(*(void *)(a1 + 168) + 160 * a2);
  int v18 = *v16;
  long long v17 = v16 + 16;
  if (v18)
  {
    memmove(v17 + 16, __src, 0x80uLL);
  }
  else
  {
    *(unsigned char *)(*(void *)(a1 + 168) + 160 * a2) = 1;
    *((_OWORD *)v17 + 5) = v34;
    *((_OWORD *)v17 + 6) = v35;
    *((_OWORD *)v17 + 7) = v36;
    *((_OWORD *)v17 + 8) = v37;
    *((_OWORD *)v17 + 1) = *(_OWORD *)v29;
    *((_OWORD *)v17 + 2) = v31;
    *((_OWORD *)v17 + 3) = v32;
    *((_OWORD *)v17 + 4) = v33;
  }
  *long long v17 = 0;
  *((void *)v17 + 1) = a3;
  if (*(unsigned char *)__src) {
    ++*(_DWORD *)(a1 + 176);
  }
  else {
    ++*(_DWORD *)(a1 + 180);
  }
  id v30 = *a4;
  float v19 = (_anonymous_namespace_ *)std::__function::__value_func<void ()(re::ProbeManager &,long long)>::__value_func[abi:nn180100]((uint64_t)&v31, a6);
  *(void *)&long long v33 = a3;
  BYTE8(v33) = *(unsigned char *)__src;
  unint64_t v20 = *(void *)(a1 + 200);
  unint64_t v21 = *(void *)(a1 + 208);
  if (v21 >= v20)
  {
    unint64_t v22 = v21 + 1;
    if (v20 < v21 + 1)
    {
      if (*(void *)(a1 + 192))
      {
        uint64_t v23 = 2 * v20;
        BOOL v24 = v20 == 0;
        unint64_t v25 = 8;
        if (!v24) {
          unint64_t v25 = v23;
        }
        if (v25 <= v22) {
          unint64_t v26 = v22;
        }
        else {
          unint64_t v26 = v25;
        }
        re::DynamicArray<re::ProbeManager::SliceOperation>::setCapacity((void *)(a1 + 192), v26);
      }
      else
      {
        re::DynamicArray<re::ProbeManager::SliceOperation>::setCapacity((void *)(a1 + 192), v22);
        ++*(_DWORD *)(a1 + 216);
      }
    }
    unint64_t v21 = *(void *)(a1 + 208);
  }
  unint64_t v27 = *(void *)(a1 + 224) + (v21 << 6);
  *(void *)unint64_t v27 = v30;
  *(void *)(v27 + 8) = a2;
  std::__function::__value_func<void ()(re::ProbeManager &,long long)>::__value_func[abi:nn180100](v27 + 16, (uint64_t)&v31);
  uint64_t v28 = v33;
  *(unsigned char *)(v27 + 56) = BYTE8(v33);
  *(void *)(v27 + 48) = v28;
  ++*(void *)(a1 + 208);
  ++*(_DWORD *)(a1 + 216);
  std::__function::__value_func<void ()(re::ProbeManager &,long long)>::~__value_func[abi:nn180100](&v31);
  if (v30) {
}
  }

uint64_t re::HashBrown<long long,float,re::Hash<long long>,re::EqualTo<long long>,void,false>::remove(uint64_t *a1, void *a2)
{
  uint64_t result = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(a1, a2);
  if (result != -1)
  {
    uint64_t v4 = (int8x16_t *)(*a1 + (result & 0xFFFFFFFFFFFFFFF0));
    v5.i64[0] = -1;
    v5.i64[1] = -1;
    int8x8_t v6 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(*v4, v5), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800);
    if (v6) {
      char v7 = -1;
    }
    else {
      char v7 = 0x80;
    }
    v4->i8[result & 0xF] = v7;
    unint64_t v8 = a1[2];
    unint64_t v9 = *(void *)(a1[1] + 16 * result);
    unint64_t v10 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * (v9 ^ (v9 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v9 ^ (v9 >> 30))) >> 27));
    a1[5] ^= (v10 >> 31) ^ v10;
    uint64_t v11 = a1[4];
    if (v6) {
      ++v11;
    }
    unint64_t v12 = a1[3] - 1;
    a1[3] = v12;
    a1[4] = v11;
    if (v8 >= 0x11 && v12 < v8 >> 2)
    {
      return re::HashBrown<long long,float,re::Hash<long long>,re::EqualTo<long long>,void,false>::resize(a1, 0);
    }
  }
  return result;
}

uint64_t re::Optional<re::ProbeManager::SliceOperation>::operator=(uint64_t a1, void **a2)
{
  int v3 = *(unsigned __int8 *)a2;
  if (*(unsigned char *)a1) {
    BOOL v4 = 0;
  }
  else {
    BOOL v4 = v3 == 0;
  }
  if (!v4)
  {
    if (*(unsigned char *)a1) {
      BOOL v5 = v3 == 0;
    }
    else {
      BOOL v5 = 0;
    }
    if (v5)
    {
      std::__function::__value_func<void ()(re::ProbeManager &,long long)>::~__value_func[abi:nn180100]((void *)(a1 + 24));
      unint64_t v8 = *(void **)(a1 + 8);
      if (v8)
      {

        *(void *)(a1 + 8) = 0;
      }
      *(unsigned char *)a1 = 0;
    }
    else
    {
      if (*(unsigned char *)a1) {
        BOOL v7 = 1;
      }
      else {
        BOOL v7 = v3 == 0;
      }
      if (v7)
      {
        NS::SharedPtr<MTL::Texture>::operator=((void **)(a1 + 8), a2 + 1);
        *(void *)(a1 + 16) = a2[2];
        std::__function::__value_func<void ()(re::ProbeManager &,long long)>::operator=[abi:nn180100]((void *)(a1 + 24), (uint64_t)(a2 + 3));
      }
      else
      {
        *(unsigned char *)a1 = 1;
        unint64_t v9 = a2[2];
        *(void *)(a1 + 8) = a2[1];
        a2[1] = 0;
        *(void *)(a1 + 16) = v9;
        std::__function::__value_func<void ()(re::ProbeManager &,long long)>::__value_func[abi:nn180100](a1 + 24, (uint64_t)(a2 + 3));
      }
      unint64_t v10 = a2[7];
      *(unsigned char *)(a1 + 64) = *((unsigned char *)a2 + 64);
      *(void *)(a1 + 56) = v10;
    }
  }
  return a1;
}

uint64_t re::Optional<re::ProbeLatLongComputeWorkload>::operator=(uint64_t a1, unsigned __int8 *a2)
{
  int v3 = *a2;
  if (*(unsigned char *)a1) {
    BOOL v4 = 0;
  }
  else {
    BOOL v4 = v3 == 0;
  }
  if (v4) {
    return a1;
  }
  if (*(unsigned char *)a1) {
    BOOL v5 = v3 == 0;
  }
  else {
    BOOL v5 = 0;
  }
  if (v5)
  {
    re::FixedArray<CoreIKTransform>::deinit((uint64_t *)(a1 + 48));
    re::FixedArray<CoreIKTransform>::deinit((uint64_t *)(a1 + 24));
    *(unsigned char *)a1 = 0;
    return a1;
  }
  int8x8_t v6 = (_OWORD *)(a1 + 8);
  if (*(unsigned char *)a1) {
    BOOL v7 = 1;
  }
  else {
    BOOL v7 = v3 == 0;
  }
  if (!v7)
  {
    *(unsigned char *)a1 = 1;
    *int8x8_t v6 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(void *)(a1 + 24) = 0;
    uint64_t v13 = *((void *)a2 + 4);
    *(void *)(a1 + 24) = *((void *)a2 + 3);
    *(void *)(a1 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = v13;
    *((void *)a2 + 3) = 0;
    *((void *)a2 + 4) = 0;
    uint64_t v14 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = *((void *)a2 + 5);
    *((void *)a2 + 5) = v14;
    *(void *)(a1 + 48) = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
    uint64_t v15 = *((void *)a2 + 7);
    *(void *)(a1 + 48) = *((void *)a2 + 6);
    *(void *)(a1 + 56) = v15;
    *((void *)a2 + 6) = 0;
    *((void *)a2 + 7) = 0;
    uint64_t v16 = *(void *)(a1 + 64);
    *(void *)(a1 + 64) = *((void *)a2 + 8);
    *((void *)a2 + 8) = v16;
    return a1;
  }
  *int8x8_t v6 = *(_OWORD *)(a2 + 8);
  if ((unsigned __int8 *)a1 == a2)
  {
LABEL_18:
    re::FixedArray<float>::operator=((uint64_t *)(a1 + 48), (uint64_t *)a2 + 6);
    return a1;
  }
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *((void *)a2 + 3);
  if (!v8 || v8 == v9)
  {
    *(void *)(a1 + 24) = v9;
    *((void *)a2 + 3) = v8;
    uint64_t v10 = *(void *)(a1 + 32);
    uint64_t v11 = *(void *)(a1 + 40);
    uint64_t v12 = *((void *)a2 + 5);
    *(void *)(a1 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = *((void *)a2 + 4);
    *(void *)(a1 + 40) = v12;
    *((void *)a2 + 4) = v10;
    *((void *)a2 + 5) = v11;
    goto LABEL_18;
  }
  re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || m_allocator == other.m_allocator", "operator=", 296);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

double re::ProbeManager::generateWorkload@<D0>(re::ProbeManager *this@<X0>, unsigned char *a2@<X8>, double result@<D0>)
{
  uint64_t v107 = *MEMORY[0x263EF8340];
  int8x8_t v6 = (int64x2_t *)((char *)this + 420);
  if (!*((void *)this + 26)) {
    goto LABEL_52;
  }
  BOOL v7 = (char *)this + 232;
  if (*((unsigned char *)this + 232)) {
    goto LABEL_52;
  }
  uint64_t v8 = *((void *)this + 28);
  v94[0] = 1;
  *(void *)&v94[8] = *(id *)v8;
  *(void *)&v94[16] = *(void *)(v8 + 8);
  std::__function::__value_func<void ()(re::ProbeManager &,long long)>::__value_func[abi:nn180100]((uint64_t)&v94[24], v8 + 16);
  uint64_t v9 = *(void *)(v8 + 48);
  v94[64] = *(unsigned char *)(v8 + 56);
  *(void *)&v94[56] = v9;
  re::Optional<re::ProbeManager::SliceOperation>::operator=((uint64_t)this + 232, (void **)v94);
  re::Optional<re::ProbeManager::SliceOperation>::~Optional((uint64_t)v94);
  uint64_t v10 = *((void *)this + 26);
  if (v10 != 1)
  {
    if (!v10)
    {
LABEL_146:
      *(void *)long long v90 = 0;
      memset(v94, 0, 80);
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)int v87 = 136315906;
      *(void *)&v87[4] = "removeAt";
      *(_WORD *)&v87[12] = 1024;
      *(_DWORD *)&v87[14] = 931;
      *(_WORD *)&v87[18] = 2048;
      *(void *)&v87[20] = 0;
      *(_WORD *)&v87[28] = 2048;
      *(void *)&v87[30] = 0;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_147:
      memset(v94, 0, 80);
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)long long v90 = 136315906;
      *(void *)&v90[4] = "operator[]";
      *(_WORD *)&v90[12] = 1024;
      *(_DWORD *)&v90[14] = 468;
      *(_WORD *)&v90[18] = 2048;
      *(void *)&v90[20] = 0;
      *(_WORD *)&v90[28] = 2048;
      *(void *)&v90[30] = 0;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_148;
    }
    uint64_t v11 = *((void *)this + 28);
    uint64_t v12 = v11 + (v10 << 6);
    NS::SharedPtr<MTL::Texture>::operator=((void **)v11, (void **)(v12 - 64));
    *(void *)(v11 + 8) = *(void *)(v12 - 56);
    std::__function::__value_func<void ()(re::ProbeManager &,long long)>::operator=[abi:nn180100]((void *)(v11 + 16), v12 - 48);
    uint64_t v13 = *(void *)(v12 - 16);
    *(unsigned char *)(v11 + 56) = *(unsigned char *)(v12 - 8);
    *(void *)(v11 + 48) = v13;
    uint64_t v10 = *((void *)this + 26);
  }
  uint64_t v14 = *((void *)this + 28) + (v10 << 6);
  std::__function::__value_func<void ()(re::ProbeManager &,long long)>::~__value_func[abi:nn180100]((void *)(v14 - 48));
  uint64_t v15 = *(void **)(v14 - 64);
  if (v15)
  {

    *(void *)(v14 - 64) = 0;
  }
  --*((void *)this + 26);
  ++*((_DWORD *)this + 54);
  uint64_t v16 = *((void *)this + 31);
  if (*((unsigned char *)this + 808))
  {
    if (!*((unsigned char *)this + 304)) {
      *((unsigned char *)this + 304) = 1;
    }
    int v82 = v16;
    int v83 = v6;
    int v84 = a2;
    *((void *)this + 39) = 0x6000000000000;
    *((_DWORD *)this + 80) = 256;
    *((void *)this + 41) = 0x4180000000000000;
    if (!*((unsigned char *)this + 336)) {
      *((unsigned char *)this + 336) = 1;
    }
    int v17 = 0;
    *((_DWORD *)this + 85) = 393216;
    int v18 = (char *)this + 344;
    unint64_t v19 = 256;
    long long v20 = xmmword_2343AF020;
    long long v21 = xmmword_2343AF030;
    do
    {
      if (v19 < 0x80)
      {
        *(void *)long long v94 = 0x600000000;
        memset(&v94[8], 0, 24);
        *(void *)&v94[32] = v19;
        *(void *)&v94[40] = v19;
        *(void *)&v94[48] = 1;
        *(_DWORD *)&v94[56] = v17;
        *(_DWORD *)&v94[60] = 9;
        *(_DWORD *)&v94[64] = v19;
        re::DynamicArray<re::ProbeSpecularWorkload>::add((uint64_t)v18, (uint64_t)v94);
        long long v21 = xmmword_2343AF030;
        long long v20 = xmmword_2343AF020;
      }
      else
      {
        int v22 = 0;
        unint64_t v85 = (v19 + 127) >> 7;
        do
        {
          uint64_t v23 = 0;
          do
          {
            uint64_t v24 = 0;
            uint64_t v86 = v23;
            uint64_t v25 = v23 << 7;
            do
            {
              *(_DWORD *)long long v94 = v22;
              *(_DWORD *)&v94[4] = 1;
              *(void *)&v94[8] = v25;
              *(void *)&v94[16] = v24;
              *(_OWORD *)&v94[24] = v20;
              *(_OWORD *)&v94[40] = v21;
              *(_DWORD *)&v94[56] = v17;
              *(_DWORD *)&v94[60] = 9;
              *(_DWORD *)&v94[64] = v19;
              re::DynamicArray<re::ProbeSpecularWorkload>::add((uint64_t)v18, (uint64_t)v94);
              long long v21 = xmmword_2343AF030;
              long long v20 = xmmword_2343AF020;
              v24 += 128;
            }
            while (v85 << 7 != v24);
            uint64_t v23 = v86 + 1;
          }
          while (v86 + 1 != v85);
          ++v22;
        }
        while (v22 != 6);
      }
      v19 >>= 1;
      ++v17;
    }
    while (v17 != 9);
    if (*((unsigned char *)this + 296))
    {
      a2 = v84;
      int v26 = v82;
      int8x8_t v6 = v83;
      if (!*((unsigned char *)this + 384)) {
        *((unsigned char *)this + 384) = 1;
      }
      *(void *)((char *)this + 404) = 0;
      *(void *)((char *)this + 396) = 0;
      *(void *)((char *)this + 412) = 0;
      *(void *)((char *)this + 388) = 0x600000000;
      *int v83 = vdupq_n_s64(8uLL);
      v83[1].i64[0] = 1;
      unint64_t v27 = (re::ProbeManager *)((char *)this + 448);
      *(_DWORD *)long long v94 = v82;
      *(void *)&v94[4] = 0x100000008;
      re::DynamicArray<re::RenderGraphResourceAllocationManager::FenceIndex>::add((re::ProbeManager *)((char *)this + 448), (uint64_t *)v94);
    }
    else
    {
      unint64_t v27 = (re::ProbeManager *)((char *)this + 448);
      a2 = v84;
      int v26 = v82;
      int8x8_t v6 = v83;
    }
    *(_DWORD *)long long v94 = v26;
    *(void *)&v94[4] = 256;
    re::DynamicArray<re::RenderGraphResourceAllocationManager::FenceIndex>::add(v27, (uint64_t *)v94);
    goto LABEL_52;
  }
  BOOL v7 = &v87[16];
  long long v88 = 0u;
  memset(&v87[16], 0, 32);
  *(void *)int v87 = v16;
  *(void *)&v87[8] = 0x5555400000000;
  if (!*(void *)&v87[24]) {
    goto LABEL_147;
  }
  **(void **)&v87[32] = 0x20000000200;
  uint64_t v3 = *(void *)&v87[24];
  if (*(void *)&v87[24] <= 1uLL)
  {
LABEL_148:
    memset(v94, 0, 80);
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)long long v90 = 136315906;
    *(void *)&v90[4] = "operator[]";
    *(_WORD *)&v90[12] = 1024;
    *(_DWORD *)&v90[14] = 468;
    *(_WORD *)&v90[18] = 2048;
    *(void *)&v90[20] = 1;
    *(_WORD *)&v90[28] = 2048;
    *(void *)&v90[30] = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_149;
  }
  *(void *)(*(void *)&v87[32] + 8) = 0x10000000100;
  uint64_t v3 = *(void *)&v87[24];
  if (*(void *)&v87[24] <= 2uLL)
  {
LABEL_149:
    memset(v94, 0, 80);
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)long long v90 = 136315906;
    *(void *)&v90[4] = "operator[]";
    *(_WORD *)&v90[12] = 1024;
    *(_DWORD *)&v90[14] = 468;
    *(_WORD *)&v90[18] = 2048;
    *(void *)&v90[20] = 2;
    *(_WORD *)&v90[28] = 2048;
    *(void *)&v90[30] = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_150;
  }
  *(void *)(*(void *)&v87[32] + 16) = 0x8000000080;
  uint64_t v3 = *(void *)&v87[24];
  if (*(void *)&v87[24] <= 3uLL)
  {
LABEL_150:
    memset(v94, 0, 80);
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)long long v90 = 136315906;
    *(void *)&v90[4] = "operator[]";
    *(_WORD *)&v90[12] = 1024;
    *(_DWORD *)&v90[14] = 468;
    *(_WORD *)&v90[18] = 2048;
    *(void *)&v90[20] = 3;
    *(_WORD *)&v90[28] = 2048;
    *(void *)&v90[30] = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_151;
  }
  *(void *)(*(void *)&v87[32] + 24) = 0x4000000040;
  BOOL v7 = *(char **)&v87[24];
  if (*(void *)&v87[24] <= 4uLL)
  {
LABEL_151:
    memset(v94, 0, 80);
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)long long v90 = 136315906;
    *(void *)&v90[4] = "operator[]";
    *(_WORD *)&v90[12] = 1024;
    *(_DWORD *)&v90[14] = 468;
    *(_WORD *)&v90[18] = 2048;
    *(void *)&v90[20] = 4;
    *(_WORD *)&v90[28] = 2048;
    *(void *)&v90[30] = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_152;
  }
  *(void *)(*(void *)&v87[32] + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0x2000000020;
  if (v7 == (char *)5)
  {
LABEL_152:
    memset(v94, 0, 80);
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)long long v90 = 136315906;
    *(void *)&v90[4] = "operator[]";
    *(_WORD *)&v90[12] = 1024;
    *(_DWORD *)&v90[14] = 468;
    *(_WORD *)&v90[18] = 2048;
    *(void *)&v90[20] = 5;
    *(_WORD *)&v90[28] = 2048;
    *(void *)&v90[30] = 5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_153;
  }
  unint64_t v29 = *(void **)&v87[32];
  *(void *)(*(void *)&v87[32] + 40) = 0x1000000010;
  if ((unint64_t)v7 <= 6)
  {
LABEL_153:
    memset(v94, 0, 80);
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)long long v90 = 136315906;
    *(void *)&v90[4] = "operator[]";
    *(_WORD *)&v90[12] = 1024;
    *(_DWORD *)&v90[14] = 468;
    *(_WORD *)&v90[18] = 2048;
    *(void *)&v90[20] = 6;
    *(_WORD *)&v90[28] = 2048;
    *(void *)&v90[30] = 6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_154;
  }
  v29[6] = 0x800000008;
  if (v7 == (char *)7)
  {
LABEL_154:
    memset(v94, 0, 80);
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)long long v90 = 136315906;
    *(void *)&v90[4] = "operator[]";
    *(_WORD *)&v90[12] = 1024;
    *(_DWORD *)&v90[14] = 468;
    *(_WORD *)&v90[18] = 2048;
    *(void *)&v90[20] = 7;
    *(_WORD *)&v90[28] = 2048;
    *(void *)&v90[30] = 7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_155;
  }
  v29[7] = 0x400000004;
  if ((unint64_t)v7 <= 8)
  {
LABEL_155:
    memset(v94, 0, 80);
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)long long v90 = 136315906;
    *(void *)&v90[4] = "operator[]";
    *(_WORD *)&v90[12] = 1024;
    *(_DWORD *)&v90[14] = 468;
    *(_WORD *)&v90[18] = 2048;
    *(void *)&v90[20] = 8;
    *(_WORD *)&v90[28] = 2048;
    *(void *)&v90[30] = 8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_156;
  }
  v29[8] = 0x200000002;
  if (v7 == (char *)9)
  {
LABEL_156:
    memset(v94, 0, 80);
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)long long v90 = 136315906;
    *(void *)&v90[4] = "operator[]";
    *(_WORD *)&v90[12] = 1024;
    *(_DWORD *)&v90[14] = 468;
    *(_WORD *)&v90[18] = 2048;
    *(void *)&v90[20] = 9;
    *(_WORD *)&v90[28] = 2048;
    *(void *)&v90[30] = 9;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_157:
    memset(v94, 0, 80);
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)long long v90 = 136315906;
    *(void *)&v90[4] = "operator[]";
    *(_WORD *)&v90[12] = 1024;
    *(_DWORD *)&v90[14] = 468;
    *(_WORD *)&v90[18] = 2048;
    *(void *)&v90[20] = 0;
    *(_WORD *)&v90[28] = 2048;
    *(void *)&v90[30] = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v29[9] = 0x100000001;
  BOOL v7 = (char *)v88;
  if (!(void)v88) {
    goto LABEL_157;
  }
  id v30 = 0;
  int v31 = 0;
  uint64_t v32 = *((void *)&v88 + 1);
  uint64_t v33 = *((void *)&v88 + 1);
  **((_DWORD **)&v88 + 1) = 0;
  uint64_t v34 = v33 + 4;
  long long v36 = *(char **)&v87[24];
  uint64_t v35 = *(void *)&v87[32];
  do
  {
    if (v36 == v30)
    {
      memset(v94, 0, 80);
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)long long v90 = 136315906;
      *(void *)&v90[4] = "operator[]";
      *(_WORD *)&v90[12] = 1024;
      *(_DWORD *)&v90[14] = 468;
      *(_WORD *)&v90[18] = 2048;
      *(void *)&v90[20] = v30;
      *(_WORD *)&v90[28] = 2048;
      *(void *)&v90[30] = v36;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_145:
      memset(v94, 0, 80);
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)long long v90 = 136315906;
      *(void *)&v90[4] = "operator[]";
      *(_WORD *)&v90[12] = 1024;
      *(_DWORD *)&v90[14] = 468;
      *(_WORD *)&v90[18] = 2048;
      *(void *)&v90[20] = v7;
      *(_WORD *)&v90[28] = 2048;
      *(void *)&v90[30] = v7;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_146;
    }
    if (v7 - 1 == v30) {
      goto LABEL_145;
    }
    v31 += vmul_lane_s32(*(int32x2_t *)(v35 + 8 * (void)v30), *(int32x2_t *)(v35 + 8 * (void)v30), 1).u32[0];
    *(_DWORD *)(v34 + 4 * (void)v30++) = v31;
  }
  while (v30 != (char *)9);
  v94[0] = 1;
  *(_OWORD *)&v94[8] = *(_OWORD *)v87;
  *(void *)&v94[24] = *(void *)&v87[16];
  *(void *)&v94[32] = v36;
  *(void *)&v94[40] = v35;
  *(void *)&v94[48] = *(void *)&v87[40];
  memset(&v87[16], 0, 32);
  long long v88 = 0u;
  *(void *)&v94[56] = v7;
  *(void *)&v94[64] = v32;
  re::Optional<re::ProbeLatLongComputeWorkload>::operator=((uint64_t)this + 488, v94);
  re::Optional<re::ProbeLatLongComputeWorkload>::~Optional((uint64_t)v94);
  if (*(void *)&v87[40])
  {
    if ((void)v88)
    {
      (*(void (**)(void))(**(void **)&v87[40] + 40))();
      long long v88 = 0uLL;
    }
    *(void *)&v87[40] = 0;
  }
  if (*(void *)&v87[16] && *(void *)&v87[24]) {
    (*(void (**)(void))(**(void **)&v87[16] + 40))();
  }
LABEL_52:
  if (!*((unsigned char *)this + 232)) {
    goto LABEL_143;
  }
  if (!*((unsigned char *)this + 304)
    && !*((unsigned char *)this + 336)
    && !*((unsigned char *)this + 384)
    && !*((void *)this + 45)
    && !*((void *)this + 58)
    && !*((unsigned char *)this + 488))
  {
    unint64_t v77 = *((void *)this + 31);
    unint64_t v78 = *((void *)this + 19);
    if (v78 <= v77)
    {
      *(void *)long long v90 = 0;
      memset(v94, 0, 80);
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)int v87 = 136315906;
      *(void *)&v87[4] = "operator[]";
      *(_WORD *)&v87[12] = 1024;
      *(_DWORD *)&v87[14] = 789;
      *(_WORD *)&v87[18] = 2048;
      *(void *)&v87[20] = v77;
      *(_WORD *)&v87[28] = 2048;
      *(void *)&v87[30] = v78;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    else
    {
      *(unsigned char *)(*((void *)this + 21) + 160 * v77 + 16) = 1;
      uint64_t v79 = *((void *)this + 35);
      *(void *)long long v94 = *((void *)this + 36);
      if (v79)
      {
        (*(void (**)(uint64_t, re::ProbeManager *, unsigned char *))(*(void *)v79 + 48))(v79, this, v94);
        *((unsigned char *)this + 184) = 1;
        v94[0] = 0;
        re::Optional<re::ProbeManager::SliceOperation>::operator=((uint64_t)this + 232, (void **)v94);
        re::Optional<re::ProbeManager::SliceOperation>::~Optional((uint64_t)v94);
LABEL_143:
        *a2 = 0;
        return result;
      }
    }
    long long v80 = std::__throw_bad_function_call[abi:nn180100]();
    *(void *)&uint64_t result = re::DynamicArray<re::ProbeSpecularWorkload>::add((uint64_t)v80, v81).n128_u64[0];
    return result;
  }
  *(void *)long long v94 = &unk_26E70FA60;
  v94[8] = 0;
  v94[40] = 0;
  v94[48] = 0;
  v97[1] = 0;
  uint64_t v98 = 0;
  v97[0] = 0;
  uint64_t v102 = 0;
  v103[0] = 0;
  memset(v100, 0, sizeof(v100));
  int v99 = 0;
  int v101 = 0;
  long long v104 = 0u;
  long long v105 = 0u;
  long long v106 = 0u;
  NS::SharedPtr<MTL::Texture>::operator=((void **)&v104, (void **)this + 10);
  NS::SharedPtr<MTL::Texture>::operator=((void **)&v104 + 1, (void **)this + 11);
  NS::SharedPtr<MTL::Texture>::operator=((void **)&v105, (void **)this + 13);
  NS::SharedPtr<MTL::Texture>::operator=((void **)&v105 + 1, (void **)this + 14);
  NS::SharedPtr<MTL::Texture>::operator=((void **)&v106, (void **)this + 15);
  NS::SharedPtr<MTL::Texture>::operator=((void **)&v106 + 1, (void **)this + 30);
  if (*((unsigned char *)this + 808))
  {
    if (*((unsigned char *)this + 296)) {
      unint64_t v37 = 300714;
    }
    else {
      unint64_t v37 = 299589;
    }
    int v38 = *((unsigned __int8 *)this + 304);
    if (*((unsigned char *)this + 304))
    {
      int v39 = *((_DWORD *)this + 78);
      int v40 = *((_DWORD *)this + 79);
      if ((int)v37 >= v40) {
        int v41 = *((_DWORD *)this + 79);
      }
      else {
        int v41 = v37;
      }
      if (!v94[8]) {
        v94[8] = 1;
      }
      *(_OWORD *)&v94[24] = *((_OWORD *)this + 20);
      *(_DWORD *)&v94[16] = v39;
      *(_DWORD *)&v94[20] = v41;
      *((_DWORD *)this + 79) = v40 - v41;
      if (v40 <= v41)
      {
        int v38 = 0;
        *((unsigned char *)this + 304) = 0;
      }
      else
      {
        *((_DWORD *)this + 78) = v41 + v39;
        int v38 = 1;
      }
      if ((int)v37 > v40) {
        goto LABEL_78;
      }
    }
    else
    {
      int v41 = 0;
LABEL_78:
      int v47 = v94[40];
      long long v48 = (char *)this + 336;
      BOOL v49 = *((unsigned char *)this + 336) != 0;
      while (!v38 && v49)
      {
        int v50 = *((_DWORD *)this + 85);
        *((unsigned char *)this + 336) = 0;
        if (!v47)
        {
          int v47 = 1;
          v94[40] = 1;
        }
        BOOL v49 = 0;
        *(_DWORD *)&v94[44] = v50;
        v41 += 2 * v50;
        if (v41 >= (int)v37) {
          goto LABEL_84;
        }
      }
    }
    long long v48 = (char *)this + 336;
    if (v41 >= (int)v37)
    {
      uint64_t v51 = (void *)((char *)this + 360);
      if (v38) {
        goto LABEL_103;
      }
    }
    else
    {
      if (v38)
      {
        uint64_t v51 = (void *)((char *)this + 360);
        goto LABEL_103;
      }
      int v70 = v94[48];
      int v71 = *((unsigned __int8 *)this + 336);
      BOOL v72 = *((unsigned char *)this + 384) != 0;
      do
      {
        if (!v72 || v71) {
          break;
        }
        int v73 = *((_DWORD *)this + 97);
        int v74 = *((_DWORD *)this + 98);
        uint64_t v75 = v6->i64[0];
        long long v76 = *(long long *)((char *)v6 + 8);
        *((unsigned char *)this + 384) = 0;
        if (!v70)
        {
          int v70 = 1;
          v94[48] = 1;
        }
        BOOL v72 = 0;
        *(_DWORD *)&v94[52] = v73;
        *(_DWORD *)&v94[56] = v74;
        *(_OWORD *)&v94[60] = *(_OWORD *)((char *)this + 396);
        *(void *)&v94[76] = *(void *)((char *)this + 412);
        uint64_t v95 = v75;
        long long v96 = v76;
        v41 += 40 * v74 * v75 * v76;
      }
      while (v41 < (int)v37);
LABEL_84:
      uint64_t v51 = (void *)((char *)this + 360);
    }
    do
    {
      if (*v48) {
        break;
      }
      uint64_t v52 = *((void *)this + 45);
      if (*((unsigned char *)this + 384) || v52 == 0) {
        break;
      }
      uint64_t v54 = *((void *)this + 47);
      uint64_t v55 = v52 - 1;
      if (v41)
      {
        uint64_t v56 = v54 + 68 * v55;
        int v57 = *(_DWORD *)(v56 + 56);
        uint64_t v58 = *(void *)(v56 + 32) * *(unsigned int *)(v56 + 4);
        uint64_t v59 = v57 ? 20 * v58 * *(void *)(v54 + 68 * v55 + 40) : v58 * *(void *)(v54 + 68 * v55 + 40);
        if (v59 + v41 >= v37) {
          break;
        }
      }
      uint64_t v60 = v54 + 68 * v55;
      *(_OWORD *)&v87[16] = *(_OWORD *)(v60 + 16);
      *(_OWORD *)&v87[32] = *(_OWORD *)(v60 + 32);
      long long v88 = *(_OWORD *)(v60 + 48);
      int v89 = *(_DWORD *)(v60 + 64);
      *(_OWORD *)int v87 = *(_OWORD *)v60;
      *((void *)this + 45) = v55;
      ++*((_DWORD *)this + 92);
      re::DynamicArray<re::ProbeSpecularWorkload>::add((uint64_t)v97, (uint64_t)v87);
      int v61 = *(_DWORD *)&v87[32] * *(_DWORD *)&v87[4];
      int v62 = DWORD2(v88) ? 20 * v61 * *(_DWORD *)&v87[40] : v61 * *(_DWORD *)&v87[40];
      v41 += v62;
    }
    while (!*((unsigned char *)this + 304));
LABEL_103:
    if (v94[8]) {
      BOOL v63 = 0;
    }
    else {
      BOOL v63 = v94[40] == 0;
    }
    if (v63 && v94[48] == 0 && v98 == 0 && v41 < (int)v37)
    {
      do
      {
        if (*((unsigned char *)this + 304)) {
          break;
        }
        if (*v48) {
          break;
        }
        if (*((unsigned char *)this + 384)) {
          break;
        }
        if (*v51) {
          break;
        }
        uint64_t v67 = *((void *)this + 58);
        if (!v67) {
          break;
        }
        uint64_t v68 = v67 - 1;
        uint64_t v69 = *((void *)this + 60) + 12 * v68;
        *(void *)int v87 = *(void *)v69;
        *(_DWORD *)&v87[8] = *(_DWORD *)(v69 + 8);
        *((void *)this + 58) = v68;
        ++*((_DWORD *)this + 118);
        re::DynamicArray<re::RenderGraphResourceAllocationManager::FenceIndex>::add((_anonymous_namespace_ *)&v100[8], (uint64_t *)v87);
        v41 += 24 * *(_DWORD *)&v87[4] * *(_DWORD *)&v87[4] / 3u;
      }
      while (v41 < (int)v37);
    }
  }
  else
  {
    *(_OWORD *)long long v90 = *((_OWORD *)this + 31);
    re::FixedArray<unsigned long>::FixedArray((uint64_t *)&v90[16], (uint64_t)this + 512);
    re::FixedArray<unsigned int>::FixedArray(&v91, (uint64_t)this + 536);
    int v42 = *(_DWORD *)&v90[12];
    if (*(int *)&v90[12] >= 29127) {
      int v42 = 29127;
    }
    *(_DWORD *)&v90[12] = v42;
    v87[0] = 1;
    *(_OWORD *)&v87[8] = *(_OWORD *)v90;
    re::FixedArray<unsigned long>::FixedArray((uint64_t *)&v87[24], (uint64_t)&v90[16]);
    re::FixedArray<unsigned int>::FixedArray((uint64_t *)&v88, (uint64_t)&v91);
    re::Optional<re::ProbeLatLongComputeWorkload>::operator=((uint64_t)v103, v87);
    re::Optional<re::ProbeLatLongComputeWorkload>::~Optional((uint64_t)v87);
    int v43 = *(_DWORD *)&v90[12];
    int v44 = *((_DWORD *)this + 127);
    BOOL v45 = __OFSUB__(v44, *(_DWORD *)&v90[12]);
    int v46 = v44 - *(_DWORD *)&v90[12];
    *((_DWORD *)this + 127) = v46;
    if ((v46 < 0) ^ v45 | (v46 == 0))
    {
      v87[0] = 0;
      re::Optional<re::ProbeLatLongComputeWorkload>::operator=((uint64_t)this + 488, v87);
      re::Optional<re::ProbeLatLongComputeWorkload>::~Optional((uint64_t)v87);
    }
    else
    {
      *((_DWORD *)this + 126) += v43;
    }
    if (v91)
    {
      if (v92)
      {
        (*(void (**)(void))(*(void *)v91 + 40))();
        uint64_t v92 = 0;
        uint64_t v93 = 0;
      }
      uint64_t v91 = 0;
    }
    if (*(void *)&v90[16] && *(void *)&v90[24]) {
      (*(void (**)(void))(**(void **)&v90[16] + 40))();
    }
  }
  *a2 = 1;
  re::ProbeWriteContext::ProbeWriteContext((uint64_t)(a2 + 8), (uint64_t)v94);
  re::ProbeWriteContext::~ProbeWriteContext((re::ProbeWriteContext *)v94);
  return result;
}

__n128 re::DynamicArray<re::ProbeSpecularWorkload>::add(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = *(void *)(a1 + 16);
  if (v5 >= v4)
  {
    unint64_t v6 = v5 + 1;
    if (v4 < v5 + 1)
    {
      if (*(void *)a1)
      {
        uint64_t v7 = 2 * v4;
        BOOL v8 = v4 == 0;
        unint64_t v9 = 8;
        if (!v8) {
          unint64_t v9 = v7;
        }
        if (v9 <= v6) {
          unint64_t v10 = v6;
        }
        else {
          unint64_t v10 = v9;
        }
        re::DynamicArray<re::ProbeSpecularWorkload>::setCapacity((void *)a1, v10);
      }
      else
      {
        re::DynamicArray<re::ProbeSpecularWorkload>::setCapacity((void *)a1, v6);
        ++*(_DWORD *)(a1 + 24);
      }
    }
    unint64_t v5 = *(void *)(a1 + 16);
  }
  uint64_t v11 = *(void *)(a1 + 32) + 68 * v5;
  *(_OWORD *)uint64_t v11 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v13 = *(_OWORD *)(a2 + 32);
  long long v14 = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(v11 + 64) = *(_DWORD *)(a2 + 64);
  *(_OWORD *)(v11 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = v13;
  *(_OWORD *)(v11 + 48) = v14;
  *(__n128 *)(v11 + 16) = result;
  ++*(void *)(a1 + 16);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

void re::ProbeWriteContext::~ProbeWriteContext(re::ProbeWriteContext *this)
{
  re::ProbeWriteContext::~ProbeWriteContext(this);
  JUMPOUT(0x237DBCBD0);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  *(void *)this = &unk_26E70FA60;
  id v2 = (void *)*((void *)this + 38);
  if (v2)
  {

    *((void *)this + 38) = 0;
  }
  uint64_t v3 = (void *)*((void *)this + 37);
  if (v3)
  {

    *((void *)this + 37) = 0;
  }
  unint64_t v4 = (void *)*((void *)this + 36);
  if (v4)
  {

    *((void *)this + 36) = 0;
  }
  unint64_t v5 = (void *)*((void *)this + 35);
  if (v5)
  {

    *((void *)this + 35) = 0;
  }
  unint64_t v6 = (void *)*((void *)this + 34);
  if (v6)
  {

    *((void *)this + 34) = 0;
  }
  uint64_t v7 = (void *)*((void *)this + 33);
  if (v7)
  {

    *((void *)this + 33) = 0;
  }
  re::Optional<re::ProbeLatLongComputeWorkload>::~Optional((uint64_t)this + 192);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 152);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 112);
}

uint64_t re::ProbeWriteContext::ProbeWriteContext(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26E70FA60;
  int v4 = *(unsigned __int8 *)(a2 + 8);
  *(unsigned char *)(a1 + 8) = v4;
  if (v4)
  {
    long long v5 = *(_OWORD *)(a2 + 16);
    *(void *)(a1 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = *(void *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = v5;
  }
  int v6 = *(unsigned __int8 *)(a2 + 40);
  *(unsigned char *)(a1 + 40) = v6;
  if (v6) {
    *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  }
  int v7 = *(unsigned __int8 *)(a2 + 48);
  *(unsigned char *)(a1 + 48) = v7;
  if (v7)
  {
    long long v8 = *(_OWORD *)(a2 + 52);
    long long v9 = *(_OWORD *)(a2 + 68);
    long long v10 = *(_OWORD *)(a2 + 84);
    *(void *)(a1 + 100) = *(void *)(a2 + 100);
    *(_OWORD *)(a1 + 84) = v10;
    *(_OWORD *)(a1 + 68) = v9;
    *(_OWORD *)(a1 + 52) = v8;
  }
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 136) = 0;
  uint64_t v11 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v11;
  *(void *)(a2 + 112) = 0;
  *(void *)(a2 + 120) = 0;
  uint64_t v12 = *(void *)(a1 + 128);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a2 + 128) = v12;
  uint64_t v13 = *(void *)(a1 + 144);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a2 + 144) = v13;
  ++*(_DWORD *)(a2 + 136);
  ++*(_DWORD *)(a1 + 136);
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 152) = 0;
  *(_DWORD *)(a1 + 176) = 0;
  uint64_t v14 = *(void *)(a2 + 160);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = v14;
  *(void *)(a2 + 152) = 0;
  *(void *)(a2 + 160) = 0;
  uint64_t v15 = *(void *)(a1 + 168);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a2 + 168) = v15;
  uint64_t v16 = *(void *)(a1 + 184);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a2 + 184) = v16;
  ++*(_DWORD *)(a2 + 176);
  ++*(_DWORD *)(a1 + 176);
  re::Optional<re::ProbeLatLongComputeWorkload>::Optional(a1 + 192, (unsigned __int8 *)(a2 + 192));
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  *(void *)(a2 + 264) = 0;
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  *(void *)(a2 + 272) = 0;
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  *(void *)(a2 + 280) = 0;
  *(void *)(a1 + 288) = *(void *)(a2 + 288);
  *(void *)(a2 + 288) = 0;
  *(void *)(a1 + 296) = *(void *)(a2 + 296);
  *(void *)(a2 + 296) = 0;
  *(void *)(a1 + 304) = *(void *)(a2 + 304);
  *(void *)(a2 + 304) = 0;
  return a1;
}

__n128 re::Optional<re::ProbeLatLongComputeWorkload>::Optional(uint64_t a1, unsigned __int8 *a2)
{
  int v2 = *a2;
  *(unsigned char *)a1 = v2;
  if (v2)
  {
    __n128 result = *(__n128 *)(a2 + 8);
    *(__n128 *)(a1 + 8) = result;
    *(void *)(a1 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(void *)(a1 + 24) = 0;
    uint64_t v4 = *((void *)a2 + 4);
    *(void *)(a1 + 24) = *((void *)a2 + 3);
    *(void *)(a1 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = v4;
    *((void *)a2 + 3) = 0;
    *((void *)a2 + 4) = 0;
    uint64_t v5 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = *((void *)a2 + 5);
    *((void *)a2 + 5) = v5;
    *(void *)(a1 + 48) = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
    uint64_t v6 = *((void *)a2 + 7);
    *(void *)(a1 + 48) = *((void *)a2 + 6);
    *(void *)(a1 + 56) = v6;
    *((void *)a2 + 6) = 0;
    *((void *)a2 + 7) = 0;
    uint64_t v7 = *(void *)(a1 + 64);
    *(void *)(a1 + 64) = *((void *)a2 + 8);
    *((void *)a2 + 8) = v7;
  }
  return result;
}

void *re::DynamicArray<re::ProbeSpecularWorkload>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      __n128 result = (void *)*result;
      if (*v5)
      {
        if (!a2)
        {
          uint64_t v7 = 0;
          if (!v3) {
            goto LABEL_9;
          }
          goto LABEL_8;
        }
        if (is_mul_ok(a2, 0x44uLL))
        {
          uint64_t v2 = 68 * a2;
          __n128 result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 68 * a2, 4);
          if (result)
          {
            uint64_t v7 = result;
            if (!v5[1])
            {
LABEL_9:
              v5[4] = v7;
              v5[1] = a2;
              return result;
            }
LABEL_8:
            memcpy(v7, (const void *)v5[4], 68 * v5[2]);
            __n128 result = (void *)(*(uint64_t (**)(void, void))(*(void *)*v5 + 40))(*v5, v5[4]);
            goto LABEL_9;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 68, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        __n128 result = (void *)_os_crash();
        __break(1u);
      }
      else
      {
        __n128 result = (void *)re::DynamicArray<re::ProbeSpecularWorkload>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
      }
    }
  }
  return result;
}

void *re::DynamicArray<re::Optional<re::ProbeManager::ProbeSlice>>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      __n128 result = (void *)*result;
      if (!*v5)
      {
        __n128 result = (void *)re::DynamicArray<re::Optional<re::ProbeManager::ProbeSlice>>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0xA0uLL))
        {
          uint64_t v2 = 160 * a2;
          __n128 result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 160 * a2, 16);
          if (result)
          {
            uint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_18;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 160, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        __n128 result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      uint64_t v7 = 0;
      if (!v3)
      {
LABEL_18:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        long long v10 = v7 + 2;
        uint64_t v11 = 160 * v9;
        uint64_t v12 = (_OWORD *)(v8 + 16);
        do
        {
          int v13 = *((unsigned __int8 *)v12 - 16);
          *((unsigned char *)v10 - 16) = v13;
          if (v13)
          {
            *long long v10 = *v12;
            long long v14 = v12[1];
            long long v15 = v12[2];
            long long v16 = v12[4];
            v10[3] = v12[3];
            v10[4] = v16;
            v10[1] = v14;
            v10[2] = v15;
            long long v17 = v12[5];
            long long v18 = v12[6];
            long long v19 = v12[8];
            v10[7] = v12[7];
            v10[8] = v19;
            v10[5] = v17;
            v10[6] = v18;
          }
          v10 += 10;
          v12 += 10;
          v11 -= 160;
        }
        while (v11);
        uint64_t v8 = v5[4];
      }
      __n128 result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_18;
    }
  }
  return result;
}

uint64_t re::HashBrown<long long,unsigned long,re::Hash<long long>,re::EqualTo<long long>,void,false>::internalAdd(_anonymous_namespace_ *a1, unint64_t *a2, uint64_t *a3)
{
  if (!*((void *)a1 + 7))
  {
  }
  uint64_t v6 = *((void *)a1 + 4);
  if (!v6 || (unint64_t v7 = *((void *)a1 + 2), v7 > 8 * v6))
  {
    re::HashBrown<long long,unsigned long,re::Hash<long long>,re::EqualTo<long long>,void,false>::resize((uint64_t *)a1, 1);
    unint64_t v7 = *((void *)a1 + 2);
  }
  unint64_t v8 = 0xBF58476D1CE4E5B9 * (*a2 ^ (*a2 >> 30));
  unint64_t v9 = (0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) ^ ((0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) >> 31);
  unint64_t v10 = v7 >> 4;
  unint64_t v11 = v9 % (v7 >> 4);
  uint64_t v12 = *(void *)a1;
  unint64_t v13 = __clz(__rbit64(*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*(void *)a1 + 16 * v11)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800)));
  if (v13 >= 0x40)
  {
    do
    {
      if (v11 + 1 == v10) {
        unint64_t v11 = 0;
      }
      else {
        ++v11;
      }
      unint64_t v13 = __clz(__rbit64(*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v12 + 16 * v11)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800)));
    }
    while (v13 > 0x3F);
  }
  uint64_t v14 = v12 + 16 * v11;
  BOOL v15 = *(unsigned __int8 *)(v14 + v13) == 255;
  *(unsigned char *)(v14 + v13) = v9 & 0x7F;
  unint64_t v16 = v13 + 16 * v11;
  unint64_t v17 = *a2;
  uint64_t v18 = *a3;
  uint64_t v19 = *((void *)a1 + 1);
  *(void *)(v19 + 16 * v16) = *a2;
  uint64_t v20 = v19 + 16 * v16;
  *(void *)(v20 + 8) = v18;
  uint64_t result = v20 + 8;
  uint64_t v22 = *((void *)a1 + 4) - v15;
  ++*((void *)a1 + 3);
  *((void *)a1 + 4) = v22;
  unint64_t v23 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (v17 ^ (v17 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v17 ^ (v17 >> 30))) >> 27));
  *((void *)a1 + 5) ^= (v23 >> 31) ^ v23;
  return result;
}

uint64_t re::HashBrown<long long,unsigned long,re::Hash<long long>,re::EqualTo<long long>,void,false>::resize(uint64_t *a1, int a2)
{
  unint64_t v2 = a1[2];
  unint64_t v3 = a1[3] + a2;
  unint64_t v4 = (((151 * v3) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  if (v4 > v2)
  {
    unint64_t v5 = 3 * v2;
    unint64_t v6 = v5 << 6;
    uint64_t v7 = (v5 >> 1) & 0x1FFFFFFFFFFFFFFLL;
    if (v4 <= v6 >> 7) {
      unint64_t v4 = v7;
    }
    unint64_t v3 = (v4 << 7) / 0x97;
  }
  return re::HashBrown<long long,unsigned long,re::Hash<long long>,re::EqualTo<long long>,void,false>::doResize(a1, v3);
}

uint64_t re::HashBrown<long long,unsigned long,re::Hash<long long>,re::EqualTo<long long>,void,false>::doResize(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = a1[7];
  memset(v25, 0, sizeof(v25));
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::init(v25, v4, a2);
  unint64_t v5 = a1[2];
  if (v5 >= 0x10)
  {
    uint64_t v6 = 0;
    unint64_t v7 = v5 >> 4;
    while (1)
    {
      unsigned __int16 v8 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*a1 + v6)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800).u16[0];
      unint64_t v9 = (unsigned __int16)~v8;
      if (v8 != 0xFFFF) {
        break;
      }
      v6 += 16;
      if (!--v7) {
        goto LABEL_7;
      }
    }
    unint64_t v10 = __clz(__rbit64(v9)) + v6;
    while (v10 != -1)
    {
      re::HashBrown<long long,unsigned long,re::Hash<long long>,re::EqualTo<long long>,void,false>::internalAdd(v25, a1[1] + 16 * v10, a1[1] + 16 * v10 + 8);
      unint64_t v20 = v10 >> 4;
      unint64_t v5 = a1[2];
      if (v10 >> 4 >= v5 >> 4) {
        break;
      }
      unint64_t v21 = __clz(__rbit64((-2 << (v10 & 0xF)) & v9));
      if (v21 >= 0x40)
      {
        uint64_t v22 = 16 * v20;
        unint64_t v23 = ~v20 + (v5 >> 4);
        while (v23)
        {
          unint64_t v9 = (unsigned __int16)~*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*a1 + v22 + 16)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800);
          unint64_t v24 = __clz(__rbit64(v9));
          v22 += 16;
          --v23;
          if (v24 <= 0x3F)
          {
            unint64_t v10 = v24 + v22;
            goto LABEL_20;
          }
        }
        break;
      }
      unint64_t v10 = v21 + (v10 & 0xFFFFFFFFFFFFFFF0);
LABEL_20:
      ;
    }
  }
LABEL_7:
  uint64_t v12 = *((void *)&v25[3] + 1);
  *((void *)&v25[3] + 1) = a1[7];
  uint64_t result = *((void *)&v25[3] + 1);
  long long v13 = v25[0];
  long long v14 = v25[1];
  *(void *)&v25[1] = v5;
  uint64_t v15 = *a1;
  uint64_t v16 = a1[1];
  *(void *)&v25[0] = *a1;
  *((void *)&v25[0] + 1) = v16;
  long long v17 = v25[2];
  long long v18 = *(_OWORD *)(a1 + 5);
  a1[6] = *(void *)&v25[3];
  a1[7] = v12;
  *(_OWORD *)((char *)&v25[2] + 8) = v18;
  long long v19 = *(_OWORD *)(a1 + 3);
  *(_OWORD *)a1 = v13;
  *((_OWORD *)a1 + 1) = v14;
  *((_OWORD *)a1 + 2) = v17;
  *(_OWORD *)((char *)&v25[1] + 8) = v19;
  if (result)
  {
    if (v16) {
      *((void *)&v25[0] + 1) = 0;
    }
    if (v15) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 40))(result);
    }
  }
  return result;
}

void *re::DynamicArray<re::ProbeManager::ProbeAdd>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    uint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::ProbeManager::ProbeAdd>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::ProbeManager::ProbeAdd>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void *re::DynamicArray<re::ProbeManager::ProbeAdd>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      uint64_t result = (void *)*result;
      if (!*v5)
      {
        uint64_t result = (void *)re::DynamicArray<re::ProbeManager::ProbeAdd>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x50uLL))
        {
          uint64_t v2 = 80 * a2;
          uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 80 * a2, 16);
          if (result)
          {
            unint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_18;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 80, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        uint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      unint64_t v7 = 0;
      if (!v3)
      {
LABEL_18:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = 80 * v9;
        uint64_t v11 = v8 + 8;
        uint64_t v12 = v7;
        do
        {
          id v13 = *(id *)v11;
          *uint64_t v12 = *(void *)(v11 - 8);
          v12[1] = v13;
          *(void *)uint64_t v11 = 0;
          long long v14 = *(_OWORD *)(v11 + 8);
          long long v15 = *(_OWORD *)(v11 + 24);
          long long v16 = *(_OWORD *)(v11 + 40);
          *(void *)((char *)v12 + 61) = *(void *)(v11 + 53);
          *((_OWORD *)v12 + 2) = v15;
          *((_OWORD *)v12 + 3) = v16;
          *((_OWORD *)v12 + 1) = v14;
          if (*(void *)v11)
          {

            *(void *)uint64_t v11 = 0;
          }
          v11 += 80;
          v12 += 10;
          v10 -= 80;
        }
        while (v10);
        uint64_t v8 = v5[4];
      }
      uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_18;
    }
  }
  return result;
}

void *re::DynamicArray<re::ProbeManager::ProbeUpdate>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      uint64_t result = (void *)*result;
      if (!*v5)
      {
        uint64_t result = (void *)re::DynamicArray<re::ProbeManager::ProbeUpdate>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x18uLL))
        {
          uint64_t v2 = 24 * a2;
          uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 24 * a2, 8);
          if (result)
          {
            unint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_18;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 24, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        uint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      unint64_t v7 = 0;
      if (!v3)
      {
LABEL_18:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = 24 * v9;
        uint64_t v11 = v8 + 8;
        uint64_t v12 = v7;
        do
        {
          id v13 = *(id *)v11;
          *uint64_t v12 = *(void *)(v11 - 8);
          v12[1] = v13;
          *(void *)uint64_t v11 = 0;
          int v14 = *(_DWORD *)(v11 + 8);
          *((unsigned char *)v12 + 20) = *(unsigned char *)(v11 + 12);
          *((_DWORD *)v12 + 4) = v14;
          if (*(void *)v11)
          {

            *(void *)uint64_t v11 = 0;
          }
          v11 += 24;
          v12 += 3;
          v10 -= 24;
        }
        while (v10);
        uint64_t v8 = v5[4];
      }
      uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_18;
    }
  }
  return result;
}

uint64_t re::HashBrown<long long,float,re::Hash<long long>,re::EqualTo<long long>,void,false>::internalAdd(_anonymous_namespace_ *a1, unint64_t *a2, int *a3)
{
  if (!*((void *)a1 + 7))
  {
  }
  uint64_t v6 = *((void *)a1 + 4);
  if (!v6 || (unint64_t v7 = *((void *)a1 + 2), v7 > 8 * v6))
  {
    re::HashBrown<long long,float,re::Hash<long long>,re::EqualTo<long long>,void,false>::resize((uint64_t *)a1, 1u);
    unint64_t v7 = *((void *)a1 + 2);
  }
  unint64_t v8 = 0xBF58476D1CE4E5B9 * (*a2 ^ (*a2 >> 30));
  unint64_t v9 = (0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) ^ ((0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) >> 31);
  unint64_t v10 = v7 >> 4;
  unint64_t v11 = v9 % (v7 >> 4);
  uint64_t v12 = *(void *)a1;
  unint64_t v13 = __clz(__rbit64(*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*(void *)a1 + 16 * v11)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800)));
  if (v13 >= 0x40)
  {
    do
    {
      if (v11 + 1 == v10) {
        unint64_t v11 = 0;
      }
      else {
        ++v11;
      }
      unint64_t v13 = __clz(__rbit64(*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v12 + 16 * v11)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800)));
    }
    while (v13 > 0x3F);
  }
  uint64_t v14 = v12 + 16 * v11;
  BOOL v15 = *(unsigned __int8 *)(v14 + v13) == 255;
  *(unsigned char *)(v14 + v13) = v9 & 0x7F;
  unint64_t v16 = v13 + 16 * v11;
  unint64_t v17 = *a2;
  int v18 = *a3;
  uint64_t v19 = *((void *)a1 + 1);
  *(void *)(v19 + 16 * v16) = *a2;
  uint64_t v20 = v19 + 16 * v16;
  *(_DWORD *)(v20 + 8) = v18;
  uint64_t result = v20 + 8;
  uint64_t v22 = *((void *)a1 + 4) - v15;
  ++*((void *)a1 + 3);
  *((void *)a1 + 4) = v22;
  unint64_t v23 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (v17 ^ (v17 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v17 ^ (v17 >> 30))) >> 27));
  *((void *)a1 + 5) ^= (v23 >> 31) ^ v23;
  return result;
}

uint64_t re::HashBrown<long long,float,re::Hash<long long>,re::EqualTo<long long>,void,false>::resize(uint64_t *a1, unsigned int a2)
{
  unint64_t v3 = a1[2];
  uint64_t v4 = a1[3] + a2;
  unint64_t v5 = (((unint64_t)(151 * v4) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  unint64_t v6 = ((3 * v3) >> 1) & 0x1FFFFFFFFFFFFFFLL;
  if (v5 > (192 * v3) >> 7) {
    unint64_t v6 = (((unint64_t)(151 * v4) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  }
  unint64_t v7 = (v6 << 7) / 0x97;
  uint64_t v8 = a1[7];
  long long v29 = 0u;
  *(_OWORD *)id v30 = 0u;
  if (v5 > v3) {
    uint64_t v9 = v7;
  }
  else {
    uint64_t v9 = v4;
  }
  memset(&v30[16], 0, 32);
  re::HashBrown<unsigned long long,re::ecs2::PortalServiceQuery::WorldType,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::init(&v29, v8, v9);
  v27[0] = a1;
  unint64_t v11 = a1[2];
  if (v11 >= 0x10)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *a1;
    unint64_t v14 = v11 >> 4;
    __n128 v15 = (__n128)xmmword_2343680E0;
    v10.n128_u64[0] = 0x3830282018100800;
    while (1)
    {
      unsigned __int16 v16 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v13 + v12)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800).u16[0];
      v27[1] = (unsigned __int16)~v16;
      if (v16 != 0xFFFF) {
        break;
      }
      v12 += 16;
      if (!--v14) {
        goto LABEL_14;
      }
    }
    uint64_t v17 = __clz(__rbit64((unsigned __int16)~v16)) + v12;
    uint64_t v28 = v17;
    if (v17 != -1)
    {
      do
      {
        re::HashBrown<long long,float,re::Hash<long long>,re::EqualTo<long long>,void,false>::internalAdd(&v29, *(void *)(v27[0] + 8) + 16 * v17, *(void *)(v27[0] + 8) + 16 * v17 + 8, v15, v10);
        re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v27);
        uint64_t v17 = v28;
      }
      while (v28 != -1);
      unint64_t v11 = a1[2];
    }
  }
LABEL_14:
  uint64_t v19 = *(void *)&v30[40];
  *(void *)&v30[40] = a1[7];
  uint64_t result = *(void *)&v30[40];
  long long v20 = v29;
  long long v21 = *(_OWORD *)v30;
  *(void *)id v30 = v11;
  uint64_t v22 = *a1;
  uint64_t v23 = a1[1];
  *(void *)&long long v29 = *a1;
  *((void *)&v29 + 1) = v23;
  long long v24 = *(_OWORD *)&v30[16];
  long long v25 = *(_OWORD *)(a1 + 5);
  a1[6] = *(void *)&v30[32];
  a1[7] = v19;
  *(_OWORD *)&v30[24] = v25;
  long long v26 = *(_OWORD *)(a1 + 3);
  *(_OWORD *)a1 = v20;
  *((_OWORD *)a1 + 1) = v21;
  *((_OWORD *)a1 + 2) = v24;
  *(_OWORD *)&v30[8] = v26;
  if (result)
  {
    if (v23) {
      *((void *)&v29 + 1) = 0;
    }
    if (v22) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 40))(result);
    }
  }
  return result;
}

void std::__function::__func<void (re::ProbeManager::*)(long long),std::allocator<void (re::ProbeManager::*)(long long)>,void ()(re::ProbeManager&,long long)>::~__func()
{
}

__n128 std::__function::__func<void (re::ProbeManager::*)(long long),std::allocator<void (re::ProbeManager::*)(long long)>,void ()(re::ProbeManager&,long long)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26E70FAA0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<void (re::ProbeManager::*)(long long),std::allocator<void (re::ProbeManager::*)(long long)>,void ()(re::ProbeManager&,long long)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E70FAA0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<void (re::ProbeManager::*)(long long),std::allocator<void (re::ProbeManager::*)(long long)>,void ()(re::ProbeManager&,long long)>::operator()(uint64_t a1, uint64_t a2, void *a3)
{
  unint64_t v3 = *(uint64_t (**)(void *, void))(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  unint64_t v5 = (void *)(a2 + (v4 >> 1));
  if (v4) {
    unint64_t v3 = *(uint64_t (**)(void *, void))(*v5 + v3);
  }
  return v3(v5, *a3);
}

uint64_t std::__function::__func<void (re::ProbeManager::*)(long long),std::allocator<void (re::ProbeManager::*)(long long)>,void ()(re::ProbeManager&,long long)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<void (re::ProbeManager::*)(long long),std::allocator<void (re::ProbeManager::*)(long long)>,void ()(re::ProbeManager&,long long)>::target_type()
{
}

void *std::__function::__value_func<void ()(re::ProbeManager &,long long)>::~__value_func[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t re::Optional<re::ProbeManager::SliceOperation>::~Optional(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    std::__function::__value_func<void ()(re::ProbeManager &,long long)>::~__value_func[abi:nn180100]((void *)(a1 + 24));
    uint64_t v2 = *(void **)(a1 + 8);
    if (v2)
    {

      *(void *)(a1 + 8) = 0;
    }
  }
  return a1;
}

uint64_t std::__function::__value_func<void ()(re::ProbeManager &,long long)>::__value_func[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = v3;
      *(void *)(a2 + 24) = 0;
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

{
  uint64_t v3;

  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__value_func<void ()(re::ProbeManager &,long long)>::operator=[abi:nn180100](void *a1, uint64_t a2)
{
  uint64_t v4 = (void *)a1[3];
  a1[3] = 0;
  if (v4 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v4)
  {
    (*(void (**)(void *))(*v4 + 40))(v4);
  }
  uint64_t v5 = *(void *)(a2 + 24);
  if (v5)
  {
    if (v5 == a2)
    {
      a1[3] = a1;
      (*(void (**)(void, void *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      a1[3] = v5;
      *(void *)(a2 + 24) = 0;
    }
  }
  else
  {
    a1[3] = 0;
  }
  return a1;
}

uint64_t re::Optional<re::ProbeLatLongComputeWorkload>::~Optional(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    re::FixedArray<CoreIKTransform>::deinit((uint64_t *)(a1 + 48));
    re::FixedArray<CoreIKTransform>::deinit((uint64_t *)(a1 + 24));
  }
  return a1;
}

void *re::DynamicArray<re::ProbeManager::SliceOperation>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      __n128 result = (void *)*result;
      if (!*v5)
      {
        __n128 result = (void *)re::DynamicArray<re::ProbeManager::SliceOperation>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (a2 >> 58)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 64, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          unint64_t v2 = a2 << 6;
          __n128 result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, a2 << 6, 8);
          if (result)
          {
            unint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_18;
            }
            goto LABEL_11;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        __n128 result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      unint64_t v7 = 0;
      if (!v3)
      {
LABEL_18:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = (uint64_t)(v7 + 2);
        uint64_t v11 = v9 << 6;
        do
        {
          uint64_t v12 = *(void *)(v8 + 8);
          *(void *)(v10 - 16) = *(void *)v8;
          *(void *)uint64_t v8 = 0;
          *(void *)(v10 - 8) = v12;
          std::__function::__value_func<void ()(re::ProbeManager &,long long)>::__value_func[abi:nn180100](v10, v8 + 16);
          uint64_t v13 = *(void *)(v8 + 48);
          *(unsigned char *)(v10 + 40) = *(unsigned char *)(v8 + 56);
          *(void *)(v10 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = v13;
          std::__function::__value_func<void ()(re::ProbeManager &,long long)>::~__value_func[abi:nn180100]((void *)(v8 + 16));
          if (*(void *)v8)
          {

            *(void *)uint64_t v8 = 0;
          }
          v8 += 64;
          v10 += 64;
          v11 -= 64;
        }
        while (v11);
        uint64_t v8 = v5[4];
      }
      __n128 result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_18;
    }
  }
  return result;
}

void ___ZN2re18PortalUserDefaults18maximumPortalCountEv_block_invoke(uint64_t a1, const char *a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  re::Defaults::intValue((re::Defaults *)"maximumPortalCount", a2, (uint64_t)v4);
  if (v4[0] && (v5 & 0x80000000) == 0) {
    re::PortalUserDefaults::maximumPortalCount(void)::maximumPortalCount = v5;
  }
  uint64_t v3 = *re::graphicsLogObjects(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    int v7 = re::PortalUserDefaults::maximumPortalCount(void)::maximumPortalCount;
    _os_log_impl(&dword_233120000, v3, OS_LOG_TYPE_DEFAULT, "The maximum portal count is now %u.", buf, 8u);
  }
}

uint64_t *re::introspect_MaterialParameterType(re *this, const re::IntrospectionBase *a2)
{
  int v2 = (int)this;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF94E78, memory_order_acquire) & 1) == 0)
  {
    int v31 = (re *)__cxa_guard_acquire(&qword_26AF94E78);
    if (v31)
    {
      uint64_t v32 = re::introspectionAllocator(v31);
      uint64_t v33 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v32 + 32))(v32, 24, 8);
      *(_DWORD *)uint64_t v33 = 1;
      *((void *)v33 + 1) = 1;
      *((void *)v33 + 2) = "Float";
      qword_26879B340 = (uint64_t)v33;
      uint64_t v34 = re::introspectionAllocator(v33);
      uint64_t v35 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v34 + 32))(v34, 24, 8);
      *(_DWORD *)uint64_t v35 = 1;
      *((void *)v35 + 1) = 32;
      *((void *)v35 + 2) = "Vector2";
      qword_26879B348 = (uint64_t)v35;
      long long v36 = re::introspectionAllocator(v35);
      unint64_t v37 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v36 + 32))(v36, 24, 8);
      *(_DWORD *)unint64_t v37 = 1;
      *((void *)v37 + 1) = 33;
      *((void *)v37 + 2) = "Vector3";
      qword_26879B350 = (uint64_t)v37;
      int v38 = re::introspectionAllocator(v37);
      int v39 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v38 + 32))(v38, 24, 8);
      *(_DWORD *)int v39 = 1;
      *((void *)v39 + 1) = 34;
      *((void *)v39 + 2) = "Vector4";
      qword_26879B358 = (uint64_t)v39;
      int v40 = re::introspectionAllocator(v39);
      int v41 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v40 + 32))(v40, 24, 8);
      *(_DWORD *)int v41 = 1;
      *((void *)v41 + 1) = 48;
      *((void *)v41 + 2) = "Matrix2x2";
      qword_26879B360 = (uint64_t)v41;
      int v42 = re::introspectionAllocator(v41);
      int v43 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v42 + 32))(v42, 24, 8);
      *(_DWORD *)int v43 = 1;
      *((void *)v43 + 1) = 49;
      *((void *)v43 + 2) = "Matrix3x3";
      qword_26879B368 = (uint64_t)v43;
      int v44 = re::introspectionAllocator(v43);
      BOOL v45 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v44 + 32))(v44, 24, 8);
      *(_DWORD *)BOOL v45 = 1;
      *((void *)v45 + 1) = 50;
      *((void *)v45 + 2) = "Matrix4x4";
      qword_26879B370 = (uint64_t)v45;
      int v46 = re::introspectionAllocator(v45);
      int v47 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v46 + 32))(v46, 24, 8);
      *(_DWORD *)int v47 = 1;
      *((void *)v47 + 1) = 64;
      *((void *)v47 + 2) = "Texture";
      qword_26879B378 = (uint64_t)v47;
      long long v48 = re::introspectionAllocator(v47);
      BOOL v49 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v48 + 32))(v48, 24, 8);
      *(_DWORD *)BOOL v49 = 1;
      *((void *)v49 + 1) = 128;
      *((void *)v49 + 2) = "Buffer";
      qword_26879B380 = (uint64_t)v49;
      int v50 = re::introspectionAllocator(v49);
      uint64_t v51 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v50 + 32))(v50, 24, 8);
      *(_DWORD *)uint64_t v51 = 1;
      *((void *)v51 + 1) = 192;
      *((void *)v51 + 2) = "Sampler";
      qword_26879B388 = (uint64_t)v51;
      uint64_t v52 = re::introspectionAllocator(v51);
      __int16 v53 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v52 + 32))(v52, 24, 8);
      *(_DWORD *)__int16 v53 = 1;
      *((void *)v53 + 1) = 0;
      *((void *)v53 + 2) = "Invalid";
      qword_26879B390 = (uint64_t)v53;
      uint64_t v54 = re::introspectionAllocator(v53);
      uint64_t v55 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v54 + 32))(v54, 24, 8);
      *(_DWORD *)uint64_t v55 = 1;
      *((void *)v55 + 1) = 2;
      *((void *)v55 + 2) = "Bool";
      qword_26879B398 = (uint64_t)v55;
      uint64_t v56 = re::introspectionAllocator(v55);
      int v57 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v56 + 32))(v56, 24, 8);
      *(_DWORD *)int v57 = 1;
      *((void *)v57 + 1) = 3;
      *((void *)v57 + 2) = "Int";
      qword_26879B3A0 = (uint64_t)v57;
      uint64_t v58 = re::introspectionAllocator(v57);
      uint64_t v59 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v58 + 32))(v58, 24, 8);
      *(_DWORD *)uint64_t v59 = 1;
      *((void *)v59 + 1) = 4;
      *((void *)v59 + 2) = "Int2";
      qword_26879B3A8 = (uint64_t)v59;
      uint64_t v60 = re::introspectionAllocator(v59);
      int v61 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v60 + 32))(v60, 24, 8);
      *(_DWORD *)int v61 = 1;
      *((void *)v61 + 1) = 5;
      *((void *)v61 + 2) = "Int3";
      qword_26879B3B0 = (uint64_t)v61;
      int v62 = re::introspectionAllocator(v61);
      BOOL v63 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v62 + 32))(v62, 24, 8);
      *(_DWORD *)BOOL v63 = 1;
      *((void *)v63 + 1) = 6;
      *((void *)v63 + 2) = "Int4";
      qword_26879B3B8 = (uint64_t)v63;
      long long v64 = re::introspectionAllocator(v63);
      long long v65 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v64 + 32))(v64, 24, 8);
      *(_DWORD *)long long v65 = 1;
      *((void *)v65 + 1) = 7;
      *((void *)v65 + 2) = "UInt";
      qword_26879B3C0 = (uint64_t)v65;
      long long v66 = re::introspectionAllocator(v65);
      uint64_t v67 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v66 + 32))(v66, 24, 8);
      *(_DWORD *)uint64_t v67 = 1;
      *((void *)v67 + 1) = 8;
      *((void *)v67 + 2) = "UInt2";
      qword_26879B3C8 = (uint64_t)v67;
      uint64_t v68 = re::introspectionAllocator(v67);
      uint64_t v69 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v68 + 32))(v68, 24, 8);
      *(_DWORD *)uint64_t v69 = 1;
      *((void *)v69 + 1) = 9;
      *((void *)v69 + 2) = "UInt3";
      qword_26879B3D0 = (uint64_t)v69;
      int v70 = re::introspectionAllocator(v69);
      int v71 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v70 + 32))(v70, 24, 8);
      *(_DWORD *)int v71 = 1;
      *((void *)v71 + 1) = 10;
      *((void *)v71 + 2) = "UInt4";
      qword_26879B3D8 = (uint64_t)v71;
      BOOL v72 = re::introspectionAllocator(v71);
      int v73 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v72 + 32))(v72, 24, 8);
      *(_DWORD *)int v73 = 1;
      *((void *)v73 + 1) = 20;
      *((void *)v73 + 2) = "Color3";
      qword_26879B3E0 = (uint64_t)v73;
      int v74 = re::introspectionAllocator(v73);
      uint64_t v75 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v74 + 32))(v74, 24, 8);
      *(_DWORD *)uint64_t v75 = 1;
      *(void *)(v75 + 8) = 21;
      *(void *)(v75 + 16) = "Color4";
      qword_26879B3E8 = v75;
      __cxa_guard_release(&qword_26AF94E78);
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF94E80, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF94E80))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_26AF954E8, "MaterialParameterType", 1, 1, 1, 1);
    qword_26AF954E8 = (uint64_t)&unk_26E715E00;
    qword_26AF95528 = (uint64_t)&re::introspect_MaterialParameterType(BOOL)::enumTable;
    dword_26AF954F8 = 9;
    __cxa_guard_release(&qword_26AF94E80);
  }
  if (v2)
  {
    if (_MergedGlobals_388) {
      return &qword_26AF954E8;
    }
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)v81);
    char v3 = _MergedGlobals_388;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)v81);
    if (v3) {
      return &qword_26AF954E8;
    }
    int v5 = re::introspectionSharedMutex(v4);
    std::__shared_mutex_base::lock(v5);
    if (_MergedGlobals_388)
    {
LABEL_34:
      long long v29 = re::introspectionSharedMutex(v6);
      std::__shared_mutex_base::unlock(v29);
      return &qword_26AF954E8;
    }
  }
  _MergedGlobals_388 = 1;
  re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_26AF954E8, a2);
  uint64_t v77 = 0x713A1216588B58F8;
  unint64_t v78 = "MaterialParameterType";
  v81[0] = 0x31CD534126;
  v81[1] = "uint8_t";
  int v7 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v81);
  if (v7)
  {
    uint64_t v8 = *v7;
    re::StringID::destroyString((re::StringID *)v81);
    uint64_t v9 = (unsigned int *)qword_26AF95528;
    v80[1] = v8;
    re::TypeBuilder::beginEnumType((uint64_t)v81, &v77, 1, 1, (uint64_t)v80);
    unint64_t v11 = *v9;
    if (v11)
    {
      for (unint64_t i = 0; i < v11; ++i)
      {
        uint64_t v13 = *(void *)(*((void *)v9 + 1) + 8 * i);
        if (*(_DWORD *)v13 == 1)
        {
          unint64_t v14 = *(char **)(v13 + 16);
          if (v14)
          {
            uint64_t v15 = *v14;
            if (*v14)
            {
              char v16 = v14[1];
              if (v16)
              {
                uint64_t v17 = (unsigned __int8 *)(v14 + 2);
                do
                {
                  uint64_t v15 = 31 * v15 + v16;
                  int v18 = *v17++;
                  char v16 = v18;
                }
                while (v18);
              }
            }
          }
          else
          {
            uint64_t v15 = 0;
          }
          uint64_t v19 = *(void *)(v13 + 8);
          *(void *)&v79.var0 = 2 * v15;
          v79.var1 = v14;
          re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v81, v19, &v79);
          re::StringID::destroyString((re::StringID *)&v79);
          unint64_t v11 = *v9;
        }
      }
      if (v11)
      {
        for (unint64_t j = 0; j < v11; ++j)
        {
          uint64_t v21 = *(void *)(*((void *)v9 + 1) + 8 * j);
          if (*(_DWORD *)v21 == 2)
          {
            uint64_t v22 = *(char **)(v21 + 16);
            if (v22)
            {
              uint64_t v23 = *v22;
              if (*v22)
              {
                char v24 = v22[1];
                if (v24)
                {
                  long long v25 = (unsigned __int8 *)(v22 + 2);
                  do
                  {
                    uint64_t v23 = 31 * v23 + v24;
                    int v26 = *v25++;
                    char v24 = v26;
                  }
                  while (v26);
                }
              }
            }
            else
            {
              uint64_t v23 = 0;
            }
            uint64_t v27 = *(void *)(v21 + 8);
            *(void *)&v79.var0 = 2 * v23;
            v79.var1 = v22;
            re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v81, v27, &v79);
            re::StringID::destroyString((re::StringID *)&v79);
            unint64_t v11 = *v9;
          }
        }
      }
    }
    re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v81, v28);
    xmmword_26AF95508 = (__int128)v79;
    re::StringID::destroyString((re::StringID *)&v77);
    if (v2) {
      return &qword_26AF954E8;
    }
    goto LABEL_34;
  }
  re::StringID::destroyString((re::StringID *)v81);
  re::internal::assertLog((re::internal *)5, v76, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "MaterialParameterType", v77, v78);
  __n128 result = (uint64_t *)_os_crash();
  __break(1u);
  return result;
}

void re::introspect_MaterialTextureParam(re *this, const re::IntrospectionBase *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF94E88, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF94E88))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_26AF95898, "MaterialTextureParam", 40, 8, 0, 0);
    qword_26AF95898 = (uint64_t)&unk_26E715E40;
    qword_26AF958D8 = (uint64_t)re::internal::defaultConstruct<re::MaterialTextureParam>;
    dword_26AF958A8 = 11;
    __cxa_guard_release(&qword_26AF94E88);
  }
  if ((byte_26AF94E61 & 1) == 0)
  {
    byte_26AF94E61 = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_26AF95898, a2);
    v2[0] = 0x8270B19F5FE36E32;
    v2[1] = "MaterialTextureParam";
    xmmword_26AF958B8 = v3;
    re::StringID::destroyString((re::StringID *)v2);
  }
}

void *re::internal::defaultConstruct<re::MaterialTextureParam>(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  __n128 result = re::DynamicString::setCapacity((void *)a3, 0);
  *(_DWORD *)(a3 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0;
  return result;
}

uint64_t anonymous namespace'::materialTextureParamSerialize(uint64_t a1, uint64_t a2, re::DynamicString *a3, re::DynamicString *a4)
{
  return re::MaterialTextureParam::introspectionSerialize(a3, a1, a2, a4);
}

uint64_t anonymous namespace'::materialTextureParamDeserialize(re::Allocator *a1, void *a2, int a3, uint64_t a4, re *a5)
{
  return re::MaterialTextureParam::introspectionDeserialize(a4, a1, a2, a3, a5);
}

uint64_t anonymous namespace'::materialTextureParamDeepCopy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return 1;
}

uint64_t anonymous namespace'::introspectionWalkerMemberCount(_anonymous_namespace_ *this, const void *a2)
{
  return 1;
}

uint64_t anonymous namespace'::introspectionWalkerMember(_anonymous_namespace_ *this, uint64_t a2, const void *a3)
{
  if (!a2) {
    goto LABEL_9;
  }
  int v3 = *(_DWORD *)(a2 + 32);
  if (!v3)
  {
    {
      uint64_t v4 = &re::introspect<re::DynamicString>(void)::info;
      return *v4;
    }
    uint64_t v4 = &re::introspect<re::DynamicString>(void)::info;
    unint64_t v11 = &re::introspect<re::DynamicString>(void)::info;
    if (!v9) {
      return *v4;
    }
    re::introspect<re::DynamicString>(void)::info = (uint64_t)re::IntrospectionInfo<re::DynamicString>::get(0, v10);
LABEL_14:
    __cxa_guard_release(v8);
    uint64_t v4 = v11;
    return *v4;
  }
  if (v3 != 1)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, a2, a3, "assertion failure: '%s' (%s:line %i) Unexpected; MaterialTextureParam should be an AssetHandle or a DynamicString",
      "false",
      "introspectionWalkerMember",
      53);
    _os_crash();
    __break(1u);
    goto LABEL_10;
  }
  {
LABEL_10:
    uint64_t v4 = &re::introspect<re::AssetHandle>(void)::info;
    unint64_t v11 = &re::introspect<re::AssetHandle>(void)::info;
    if (!v6) {
      return *v4;
    }
    re::introspect<re::AssetHandle>(void)::info = (uint64_t)re::introspect_AssetHandle(0, v7);
    goto LABEL_14;
  }
  uint64_t v4 = &re::introspect<re::AssetHandle>(void)::info;
  return *v4;
}

void *re::internal::defaultConstructV2<re::MaterialTextureParam>(uint64_t a1)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  __n128 result = re::DynamicString::setCapacity((void *)a1, 0);
  *(_DWORD *)(a1 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0;
  return result;
}

unsigned int *re::internal::defaultDestructV2<re::MaterialTextureParam>(unsigned int *result)
{
  uint64_t v1 = result;
  uint64_t v2 = result[8];
  if (v2 != -1) {
    __n128 result = (unsigned int *)off_26E70FB78[v2]((int)&v3, (re::DynamicString *)result);
  }
  v1[8] = -1;
  return result;
}

void *re::allocInfo_MaterialTextureBlockData(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF94E90, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF94E90))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF959E8, "MaterialTextureBlockData");
    __cxa_guard_release(&qword_26AF94E90);
  }
  return &unk_26AF959E8;
}

void re::initInfo_MaterialTextureBlockData(re *this, re::IntrospectionBase *a2)
{
  v21[0] = 0x9175FC30469124C6;
  v21[1] = "MaterialTextureBlockData";
  re::StringID::destroyString((re::StringID *)v21);
  *((_OWORD *)this + 2) = v22;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF94E98, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF94E98);
    if (v4)
    {
      int v5 = (re *)re::introspectionAllocator(v4);
      re::introspect_MaterialTextureParam(v5, v6);
      uint64_t v7 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "texture";
      *(void *)(v7 + 16) = &qword_26AF95898;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 1;
      *(_DWORD *)(v7 + 40) = 0;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF95108 = v7;
      uint64_t v8 = re::introspectionAllocator((re *)v7);
      uint64_t v10 = re::IntrospectionInfo<re::DynamicString>::get(1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + 8) = "sampler";
      *(void *)(v11 + 16) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0x2800000002;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + 48) = 0;
      *(void *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF95110 = v11;
      uint64_t v12 = re::introspectionAllocator((re *)v11);
      unint64_t v14 = re::IntrospectionInfo<re::DynamicString>::get(1, v13);
      uint64_t v15 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 72, 8);
      *(_DWORD *)uint64_t v15 = 1;
      *(void *)(v15 + 8) = "samplerArray";
      *(void *)(v15 + 16) = v14;
      *(void *)(v15 + 24) = 0;
      *(void *)(v15 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0x4800000003;
      *(_DWORD *)(v15 + 40) = 0;
      *(void *)(v15 + 48) = 0;
      *(void *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_26AF95118 = v15;
      char v16 = re::introspectionAllocator((re *)v15);
      int v18 = re::IntrospectionInfo<re::Optional<unsigned int>>::get(1, v17);
      uint64_t v19 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v16 + 32))(v16, 72, 8);
      *(_DWORD *)uint64_t v19 = 1;
      *(void *)(v19 + 8) = "uvIndex";
      *(void *)(v19 + 16) = v18;
      *(void *)(v19 + 24) = 0;
      *(void *)(v19 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0x6800000004;
      *(_DWORD *)(v19 + 40) = 0;
      *(void *)(v19 + 48) = 0;
      *(void *)(v19 + 56) = 0;
      *(_DWORD *)(v19 + 64) = 0;
      qword_26AF95120 = v19;
      __cxa_guard_release(&qword_26AF94E98);
    }
  }
  *((void *)this + 2) = 0x7000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 4;
  *((void *)this + 8) = &qword_26AF95108;
  *((void *)this + 9) = re::internal::defaultConstruct<re::MaterialTextureBlockData>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::MaterialTextureBlockData>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::MaterialTextureBlockData>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::MaterialTextureBlockData>;
  re::IntrospectionRegistry::add(this, v3);
  long long v20 = v22;
}

void *re::internal::defaultConstruct<re::MaterialTextureBlockData>(_anonymous_namespace_ *a1, uint64_t a2, _OWORD *a3)
{
  char v3 = a3;
  *a3 = 0u;
  a3[1] = 0u;
  uint64_t v4 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v3, 0);
  *((_DWORD *)v3 + 8) = 0;
  *(_OWORD *)((char *)v3 + 56) = 0u;
  *(_OWORD *)((char *)v3 + 40) = 0u;
  int v5 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((void *)v3 + 5, 0);
  *(_OWORD *)((char *)v3 + 72) = 0u;
  char v3 = (_OWORD *)((char *)v3 + 72);
  v3[1] = 0u;
  __n128 result = re::DynamicString::setCapacity(v3, 0);
  *((unsigned char *)v3 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0;
  return result;
}

void re::internal::defaultDestruct<re::MaterialTextureBlockData>(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  re::DynamicString::deinit((re::DynamicString *)(a3 + 18));
  double v4 = re::DynamicString::deinit((re::DynamicString *)(a3 + 10));
  uint64_t v5 = a3[8];
  if (v5 != -1) {
    ((void (*)(char *, unsigned int *, double))off_26E70FB78[v5])(&v6, a3, v4);
  }
  a3[8] = -1;
}

void *re::internal::defaultConstructV2<re::MaterialTextureBlockData>(_anonymous_namespace_ *a1)
{
  uint64_t v1 = a1;
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  uint64_t v2 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v1, 0);
  *((_DWORD *)v1 + 8) = 0;
  *(_OWORD *)((char *)v1 + 56) = 0u;
  *(_OWORD *)((char *)v1 + 40) = 0u;
  char v3 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((void *)v1 + 5, 0);
  *(_OWORD *)((char *)v1 + 72) = 0u;
  uint64_t v1 = (_anonymous_namespace_ *)((char *)v1 + 72);
  *((_OWORD *)v1 + 1) = 0u;
  __n128 result = re::DynamicString::setCapacity(v1, 0);
  *((unsigned char *)v1 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0;
  return result;
}

void re::internal::defaultDestructV2<re::MaterialTextureBlockData>(unsigned int *a1)
{
  re::DynamicString::deinit((re::DynamicString *)(a1 + 18));
  double v2 = re::DynamicString::deinit((re::DynamicString *)(a1 + 10));
  uint64_t v3 = a1[8];
  if (v3 != -1) {
    ((void (*)(char *, unsigned int *, double))off_26E70FB78[v3])(&v4, a1, v2);
  }
  a1[8] = -1;
}

void re::introspect_MaterialSamplerBaseType(re *this, const re::IntrospectionBase *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF94EA8, memory_order_acquire) & 1) == 0)
  {
    char v24 = (re *)__cxa_guard_acquire(&qword_26AF94EA8);
    if (v24)
    {
      long long v25 = re::introspectionAllocator(v24);
      int v26 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v25 + 32))(v25, 24, 8);
      *(_DWORD *)int v26 = 1;
      *((void *)v26 + 1) = 0;
      *((void *)v26 + 2) = "Nearest";
      qword_26AF95840 = (uint64_t)v26;
      uint64_t v27 = re::introspectionAllocator(v26);
      uint64_t v28 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v27 + 32))(v27, 24, 8);
      *(_DWORD *)uint64_t v28 = 1;
      *((void *)v28 + 1) = 1;
      *((void *)v28 + 2) = "Bilinear";
      qword_26AF95848 = (uint64_t)v28;
      long long v29 = re::introspectionAllocator(v28);
      id v30 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v29 + 32))(v29, 24, 8);
      *(_DWORD *)id v30 = 1;
      *((void *)v30 + 1) = 2;
      *((void *)v30 + 2) = "Trilinear";
      qword_26AF95850 = (uint64_t)v30;
      int v31 = re::introspectionAllocator(v30);
      uint64_t v32 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v31 + 32))(v31, 24, 8);
      *(_DWORD *)uint64_t v32 = 1;
      *((void *)v32 + 1) = 3;
      *((void *)v32 + 2) = "Anisotropic4x";
      qword_26AF95858 = (uint64_t)v32;
      uint64_t v33 = re::introspectionAllocator(v32);
      uint64_t v34 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v33 + 32))(v33, 24, 8);
      *(_DWORD *)uint64_t v34 = 1;
      *((void *)v34 + 1) = 4;
      *((void *)v34 + 2) = "NearestClamp";
      qword_26AF95860 = (uint64_t)v34;
      uint64_t v35 = re::introspectionAllocator(v34);
      long long v36 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v35 + 32))(v35, 24, 8);
      *(_DWORD *)long long v36 = 1;
      *((void *)v36 + 1) = 5;
      *((void *)v36 + 2) = "BilinearClamp";
      qword_26AF95868 = (uint64_t)v36;
      unint64_t v37 = re::introspectionAllocator(v36);
      int v38 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v37 + 32))(v37, 24, 8);
      *(_DWORD *)int v38 = 1;
      *((void *)v38 + 1) = 6;
      *((void *)v38 + 2) = "TrilinearClamp";
      qword_26AF95870 = (uint64_t)v38;
      int v39 = re::introspectionAllocator(v38);
      int v40 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v39 + 32))(v39, 24, 8);
      *(_DWORD *)int v40 = 1;
      *((void *)v40 + 1) = 7;
      *((void *)v40 + 2) = "NearestClampToZero";
      qword_26AF95878 = (uint64_t)v40;
      int v41 = re::introspectionAllocator(v40);
      int v42 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v41 + 32))(v41, 24, 8);
      *(_DWORD *)int v42 = 1;
      *((void *)v42 + 1) = 8;
      *((void *)v42 + 2) = "BilinearClampToZero";
      qword_26AF95880 = (uint64_t)v42;
      int v43 = re::introspectionAllocator(v42);
      int v44 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v43 + 32))(v43, 24, 8);
      *(_DWORD *)int v44 = 1;
      *((void *)v44 + 1) = 9;
      *((void *)v44 + 2) = "TrilinearClampToZero";
      qword_26AF95888 = (uint64_t)v44;
      BOOL v45 = re::introspectionAllocator(v44);
      uint64_t v46 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v45 + 32))(v45, 24, 8);
      *(_DWORD *)uint64_t v46 = 1;
      *(void *)(v46 + 8) = 10;
      *(void *)(v46 + 16) = "SamplerBaseTypeCount";
      qword_26AF95890 = v46;
      __cxa_guard_release(&qword_26AF94EA8);
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF94EB0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF94EB0))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_26AF95530, "MaterialSamplerBaseType", 1, 1, 1, 1);
    qword_26AF95530 = (uint64_t)&unk_26E715E00;
    qword_26AF95570 = (uint64_t)&re::introspect_MaterialSamplerBaseType(BOOL)::enumTable;
    dword_26AF95540 = 9;
    __cxa_guard_release(&qword_26AF94EB0);
  }
  if ((byte_26AF94E62 & 1) == 0)
  {
    byte_26AF94E62 = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_26AF95530, a2);
    uint64_t v48 = 0xDC7B28CF926F5B18;
    BOOL v49 = "MaterialSamplerBaseType";
    v52[0] = 0x31CD534126;
    v52[1] = "uint8_t";
    double v2 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v52);
    if (v2)
    {
      uint64_t v3 = *v2;
      re::StringID::destroyString((re::StringID *)v52);
      char v4 = (unsigned int *)qword_26AF95570;
      v51[1] = v3;
      re::TypeBuilder::beginEnumType((uint64_t)v52, &v48, 1, 1, (uint64_t)v51);
      unint64_t v6 = *v4;
      if (v6)
      {
        for (unint64_t i = 0; i < v6; ++i)
        {
          uint64_t v8 = *(void *)(*((void *)v4 + 1) + 8 * i);
          if (*(_DWORD *)v8 == 1)
          {
            int v9 = *(char **)(v8 + 16);
            if (v9)
            {
              uint64_t v10 = *v9;
              if (*v9)
              {
                char v11 = v9[1];
                if (v11)
                {
                  uint64_t v12 = (unsigned __int8 *)(v9 + 2);
                  do
                  {
                    uint64_t v10 = 31 * v10 + v11;
                    int v13 = *v12++;
                    char v11 = v13;
                  }
                  while (v13);
                }
              }
            }
            else
            {
              uint64_t v10 = 0;
            }
            uint64_t v14 = *(void *)(v8 + 8);
            *(void *)&v50.var0 = 2 * v10;
            v50.var1 = v9;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v52, v14, &v50);
            re::StringID::destroyString((re::StringID *)&v50);
            unint64_t v6 = *v4;
          }
        }
        if (v6)
        {
          for (unint64_t j = 0; j < v6; ++j)
          {
            uint64_t v16 = *(void *)(*((void *)v4 + 1) + 8 * j);
            if (*(_DWORD *)v16 == 2)
            {
              uint64_t v17 = *(char **)(v16 + 16);
              if (v17)
              {
                uint64_t v18 = *v17;
                if (*v17)
                {
                  char v19 = v17[1];
                  if (v19)
                  {
                    long long v20 = (unsigned __int8 *)(v17 + 2);
                    do
                    {
                      uint64_t v18 = 31 * v18 + v19;
                      int v21 = *v20++;
                      char v19 = v21;
                    }
                    while (v21);
                  }
                }
              }
              else
              {
                uint64_t v18 = 0;
              }
              uint64_t v22 = *(void *)(v16 + 8);
              *(void *)&v50.var0 = 2 * v18;
              v50.var1 = v17;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v52, v22, &v50);
              re::StringID::destroyString((re::StringID *)&v50);
              unint64_t v6 = *v4;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v52, v23);
      xmmword_26AF95550 = (__int128)v50;
      re::StringID::destroyString((re::StringID *)&v48);
    }
    else
    {
      re::StringID::destroyString((re::StringID *)v52);
      re::internal::assertLog((re::internal *)5, v47, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "MaterialSamplerBaseType", v48, v49);
      _os_crash();
      __break(1u);
    }
  }
}

void *re::allocInfo_OptionalMaterialSamplerData(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF94EB8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF94EB8))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF95A60, "OptionalMaterialSamplerData");
    __cxa_guard_release(&qword_26AF94EB8);
  }
  return &unk_26AF95A60;
}

void re::initInfo_OptionalMaterialSamplerData(re *this, re::IntrospectionBase *a2)
{
  v53[0] = 0x2A51EC199F473916;
  v53[1] = "OptionalMaterialSamplerData";
  re::StringID::destroyString((re::StringID *)v53);
  *((_OWORD *)this + 2) = v54;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF94EC0, memory_order_acquire) & 1) == 0)
  {
    char v4 = (re *)__cxa_guard_acquire(&qword_26AF94EC0);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v7 = re::IntrospectionInfo<re::Optional<BOOL>>::get(1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + 8) = "normalizedCoordinates";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0x100000001;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 48) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF95908 = v8;
      int v9 = re::introspectionAllocator((re *)v8);
      re::IntrospectionInfo<re::Optional<re::mtl::SamplerAddressMode>>::get((uint64_t)v9, v10);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + 8) = "wrapR";
      *(void *)(v11 + 16) = &qword_26AF951E8;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0x800000002;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + 48) = 0;
      *(void *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF95910 = v11;
      uint64_t v12 = re::introspectionAllocator((re *)v11);
      re::IntrospectionInfo<re::Optional<re::mtl::SamplerAddressMode>>::get((uint64_t)v12, v13);
      uint64_t v14 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 72, 8);
      *(_DWORD *)uint64_t v14 = 1;
      *(void *)(v14 + 8) = "wrapS";
      *(void *)(v14 + 16) = &qword_26AF951E8;
      *(void *)(v14 + 24) = 0;
      *(void *)(v14 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0x1000000003;
      *(_DWORD *)(v14 + 40) = 0;
      *(void *)(v14 + 48) = 0;
      *(void *)(v14 + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_26AF95918 = v14;
      uint64_t v15 = re::introspectionAllocator((re *)v14);
      re::IntrospectionInfo<re::Optional<re::mtl::SamplerAddressMode>>::get((uint64_t)v15, v16);
      uint64_t v17 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v15 + 32))(v15, 72, 8);
      *(_DWORD *)uint64_t v17 = 1;
      *(void *)(v17 + 8) = "wrapT";
      *(void *)(v17 + 16) = &qword_26AF951E8;
      *(void *)(v17 + 24) = 0;
      *(void *)(v17 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0x1800000004;
      *(_DWORD *)(v17 + 40) = 0;
      *(void *)(v17 + 48) = 0;
      *(void *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_26AF95920 = v17;
      uint64_t v18 = re::introspectionAllocator((re *)v17);
      re::IntrospectionInfo<re::Optional<re::mtl::SamplerBorderColor>>::get((uint64_t)v18, v19);
      uint64_t v20 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v18 + 32))(v18, 72, 8);
      *(_DWORD *)uint64_t v20 = 1;
      *(void *)(v20 + 8) = "borderColor";
      *(void *)(v20 + 16) = &qword_26AF95228;
      *(void *)(v20 + 24) = 0;
      *(void *)(v20 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0x2000000005;
      *(_DWORD *)(v20 + 40) = 0;
      *(void *)(v20 + 48) = 0;
      *(void *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_26AF95928 = v20;
      int v21 = re::introspectionAllocator((re *)v20);
      re::IntrospectionInfo<re::Optional<re::mtl::SamplerMinMagFilter>>::get((uint64_t)v21, v22);
      uint64_t v23 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v21 + 32))(v21, 72, 8);
      *(_DWORD *)uint64_t v23 = 1;
      *(void *)(v23 + 8) = "minFilter";
      *(void *)(v23 + 16) = &qword_26AF95268;
      *(void *)(v23 + 24) = 0;
      *(void *)(v23 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0x2800000006;
      *(_DWORD *)(v23 + 40) = 0;
      *(void *)(v23 + 48) = 0;
      *(void *)(v23 + 56) = 0;
      *(_DWORD *)(v23 + 64) = 0;
      qword_26AF95930 = v23;
      char v24 = re::introspectionAllocator((re *)v23);
      re::IntrospectionInfo<re::Optional<re::mtl::SamplerMinMagFilter>>::get((uint64_t)v24, v25);
      uint64_t v26 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v24 + 32))(v24, 72, 8);
      *(_DWORD *)uint64_t v26 = 1;
      *(void *)(v26 + 8) = "magFilter";
      *(void *)(v26 + 16) = &qword_26AF95268;
      *(void *)(v26 + 24) = 0;
      *(void *)(v26 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0x3000000007;
      *(_DWORD *)(v26 + 40) = 0;
      *(void *)(v26 + 48) = 0;
      *(void *)(v26 + 56) = 0;
      *(_DWORD *)(v26 + 64) = 0;
      qword_26AF95938 = v26;
      uint64_t v27 = re::introspectionAllocator((re *)v26);
      re::IntrospectionInfo<re::Optional<re::mtl::SamplerMipFilter>>::get((uint64_t)v27, v28);
      uint64_t v29 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v27 + 32))(v27, 72, 8);
      *(_DWORD *)uint64_t v29 = 1;
      *(void *)(v29 + 8) = "mipFilter";
      *(void *)(v29 + 16) = &qword_26AF952A8;
      *(void *)(v29 + 24) = 0;
      *(void *)(v29 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0x3800000008;
      *(_DWORD *)(v29 + 40) = 0;
      *(void *)(v29 + 48) = 0;
      *(void *)(v29 + 56) = 0;
      *(_DWORD *)(v29 + 64) = 0;
      qword_26AF95940 = v29;
      id v30 = re::introspectionAllocator((re *)v29);
      uint64_t v32 = re::IntrospectionInfo<re::Optional<float>>::get(1, v31);
      uint64_t v33 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v30 + 32))(v30, 72, 8);
      *(_DWORD *)uint64_t v33 = 1;
      *(void *)(v33 + 8) = "minLOD";
      *(void *)(v33 + 16) = v32;
      *(void *)(v33 + 24) = 0;
      *(void *)(v33 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0x4800000009;
      *(_DWORD *)(v33 + 40) = 0;
      *(void *)(v33 + 48) = 0;
      *(void *)(v33 + 56) = 0;
      *(_DWORD *)(v33 + 64) = 0;
      qword_26AF95948 = v33;
      uint64_t v34 = re::introspectionAllocator((re *)v33);
      long long v36 = re::IntrospectionInfo<re::Optional<float>>::get(1, v35);
      uint64_t v37 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v34 + 32))(v34, 72, 8);
      *(_DWORD *)uint64_t v37 = 1;
      *(void *)(v37 + 8) = "maxLOD";
      *(void *)(v37 + 16) = v36;
      *(void *)(v37 + 24) = 0;
      *(void *)(v37 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0x500000000ALL;
      *(_DWORD *)(v37 + 40) = 0;
      *(void *)(v37 + 48) = 0;
      *(void *)(v37 + 56) = 0;
      *(_DWORD *)(v37 + 64) = 0;
      qword_26AF95950 = v37;
      int v38 = re::introspectionAllocator((re *)v37);
      int v40 = re::IntrospectionInfo<re::Optional<BOOL>>::get(1, v39);
      uint64_t v41 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v38 + 32))(v38, 72, 8);
      *(_DWORD *)uint64_t v41 = 1;
      *(void *)(v41 + 8) = "useAverageLOD";
      *(void *)(v41 + 16) = v40;
      *(void *)(v41 + 24) = 0;
      *(void *)(v41 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0x30000000BLL;
      *(_DWORD *)(v41 + 40) = 0;
      *(void *)(v41 + 48) = 0;
      *(void *)(v41 + 56) = 0;
      *(_DWORD *)(v41 + 64) = 0;
      qword_26AF95958 = v41;
      int v42 = re::introspectionAllocator((re *)v41);
      int v44 = re::IntrospectionInfo<re::Optional<unsigned long long>>::get(1, v43);
      uint64_t v45 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v42 + 32))(v42, 72, 8);
      *(_DWORD *)uint64_t v45 = 1;
      *(void *)(v45 + 8) = "maxAnisoSamples";
      *(void *)(v45 + 16) = v44;
      *(void *)(v45 + 24) = 0;
      *(void *)(v45 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0x580000000CLL;
      *(_DWORD *)(v45 + 40) = 0;
      *(void *)(v45 + 48) = 0;
      *(void *)(v45 + 56) = 0;
      *(_DWORD *)(v45 + 64) = 0;
      qword_26AF95960 = v45;
      uint64_t v46 = re::introspectionAllocator((re *)v45);
      re::IntrospectionInfo<re::Optional<re::mtl::SamplerCompareFunction>>::get((uint64_t)v46, v47);
      uint64_t v48 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v46 + 32))(v46, 72, 8);
      *(_DWORD *)uint64_t v48 = 1;
      *(void *)(v48 + 8) = "compareFunction";
      *(void *)(v48 + 16) = &qword_26AF952E8;
      *(void *)(v48 + 24) = 0;
      *(void *)(v48 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0x400000000DLL;
      *(_DWORD *)(v48 + 40) = 0;
      *(void *)(v48 + 48) = 0;
      *(void *)(v48 + 56) = 0;
      *(_DWORD *)(v48 + 64) = 0;
      qword_26AF95968 = v48;
      BOOL v49 = (re *)re::introspectionAllocator((re *)v48);
      re::introspect_MaterialSamplerBaseType(v49, v50);
      uint64_t v51 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v49 + 32))(v49, 72, 8);
      *(_DWORD *)uint64_t v51 = 1;
      *(void *)(v51 + 8) = "baseFilter";
      *(void *)(v51 + 16) = &qword_26AF95530;
      *(void *)(v51 + 24) = 0;
      *(void *)(v51 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 14;
      *(_DWORD *)(v51 + 40) = 0;
      *(void *)(v51 + 48) = 0;
      *(void *)(v51 + 56) = 0;
      *(_DWORD *)(v51 + 64) = 0;
      qword_26AF95970 = v51;
      __cxa_guard_release(&qword_26AF94EC0);
    }
  }
  *((void *)this + 2) = 0x6800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 14;
  *((void *)this + 8) = &qword_26AF95908;
  *((void *)this + 9) = re::internal::defaultConstruct<re::OptionalMaterialSamplerData>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::OptionalMaterialSamplerData>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::OptionalMaterialSamplerData>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::OptionalMaterialSamplerData>;
  re::IntrospectionRegistry::add(this, v3);
  long long v52 = v54;
}

void re::IntrospectionInfo<re::Optional<re::mtl::SamplerAddressMode>>::get(uint64_t a1, const re::IntrospectionBase *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF95008, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF95008))
  {
    re::IntrospectionOptionalBase::IntrospectionOptionalBase((re::IntrospectionOptionalBase *)&qword_26AF951E8);
    qword_26AF951E8 = (uint64_t)&unk_26E70FB98;
    __cxa_guard_release(&qword_26AF95008);
  }
  if ((byte_26AF94E64 & 1) == 0)
  {
    double v2 = re::mtl::introspect_SamplerAddressMode((re::mtl *)1, a2);
    if ((byte_26AF94E64 & 1) == 0)
    {
      uint64_t v3 = (uint64_t)v2;
      byte_26AF94E64 = 1;
      int v4 = *((_DWORD *)v2 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF951E8, 0);
      qword_26AF951F8 = 0x80000000DLL;
      dword_26AF95200 = v4;
      word_26AF95204 = 0;
      *(void *)&xmmword_26AF95208 = 0;
      *((void *)&xmmword_26AF95208 + 1) = 0xFFFFFFFFLL;
      qword_26AF95218 = v3;
      qword_26AF95220 = 0;
      qword_26AF951E8 = (uint64_t)&unk_26E70FB98;
      re::IntrospectionRegistry::add(v5, v6);
      re::getPrettyTypeName((re *)&qword_26AF951E8, (const re::IntrospectionBase *)&v15);
      if (v16) {
        uint64_t v7 = *(const char **)&v17[7];
      }
      else {
        uint64_t v7 = v17;
      }
      if (v15 && (v16 & 1) != 0) {
        (*(void (**)(void))(*(void *)v15 + 40))();
      }
      long long v12 = *(_OWORD *)(v3 + 32);
      uint64_t v8 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v13);
      if (v8)
      {
        uint64_t v9 = *v8;
        *((void *)&v11 + 1) = v9;
      }
      else
      {
        long long v14 = v12;
        re::TypeBuilder::beginOptionalType((uint64_t)&v15, v13, 8uLL, 4uLL, &v14);
        re::TypeBuilder::setOptionalAccessors((uint64_t)&v15, (void *(*)(void *))re::TypeBuilderHelper::registerOptional<re::mtl::SamplerAddressMode>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (void (*)(void *, const void *))re::TypeBuilderHelper::registerOptional<re::mtl::SamplerAddressMode>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v15, v10);
      }
      xmmword_26AF95208 = v11;
      re::StringID::destroyString((re::StringID *)v13);
    }
  }
}

void re::IntrospectionInfo<re::Optional<re::mtl::SamplerBorderColor>>::get(uint64_t a1, const re::IntrospectionBase *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF95010, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF95010))
  {
    re::IntrospectionOptionalBase::IntrospectionOptionalBase((re::IntrospectionOptionalBase *)&qword_26AF95228);
    qword_26AF95228 = (uint64_t)&unk_26E70FC18;
    __cxa_guard_release(&qword_26AF95010);
  }
  if ((byte_26AF94E65 & 1) == 0)
  {
    double v2 = re::mtl::introspect_SamplerBorderColor((re::mtl *)1, a2);
    if ((byte_26AF94E65 & 1) == 0)
    {
      uint64_t v3 = (uint64_t)v2;
      byte_26AF94E65 = 1;
      int v4 = v2[6];
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF95228, 0);
      qword_26AF95238 = 0x80000000DLL;
      dword_26AF95240 = v4;
      word_26AF95244 = 0;
      *(void *)&xmmword_26AF95248 = 0;
      *((void *)&xmmword_26AF95248 + 1) = 0xFFFFFFFFLL;
      qword_26AF95258 = v3;
      qword_26AF95260 = 0;
      qword_26AF95228 = (uint64_t)&unk_26E70FC18;
      re::IntrospectionRegistry::add(v5, v6);
      re::getPrettyTypeName((re *)&qword_26AF95228, (const re::IntrospectionBase *)&v15);
      if (v16) {
        uint64_t v7 = *(const char **)&v17[7];
      }
      else {
        uint64_t v7 = v17;
      }
      if (v15 && (v16 & 1) != 0) {
        (*(void (**)(void))(*(void *)v15 + 40))();
      }
      long long v12 = *(_OWORD *)(v3 + 32);
      uint64_t v8 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v13);
      if (v8)
      {
        uint64_t v9 = *v8;
        *((void *)&v11 + 1) = v9;
      }
      else
      {
        long long v14 = v12;
        re::TypeBuilder::beginOptionalType((uint64_t)&v15, v13, 8uLL, 4uLL, &v14);
        re::TypeBuilder::setOptionalAccessors((uint64_t)&v15, (void *(*)(void *))re::TypeBuilderHelper::registerOptional<re::mtl::SamplerBorderColor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (void (*)(void *, const void *))re::TypeBuilderHelper::registerOptional<re::mtl::SamplerBorderColor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v15, v10);
      }
      xmmword_26AF95248 = v11;
      re::StringID::destroyString((re::StringID *)v13);
    }
  }
}

void re::IntrospectionInfo<re::Optional<re::mtl::SamplerMinMagFilter>>::get(uint64_t a1, const re::IntrospectionBase *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF95018, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF95018))
  {
    re::IntrospectionOptionalBase::IntrospectionOptionalBase((re::IntrospectionOptionalBase *)&qword_26AF95268);
    qword_26AF95268 = (uint64_t)&unk_26E70FC98;
    __cxa_guard_release(&qword_26AF95018);
  }
  if ((byte_26AF94E66 & 1) == 0)
  {
    double v2 = re::mtl::introspect_SamplerMinMagFilter((re::mtl *)1, a2);
    if ((byte_26AF94E66 & 1) == 0)
    {
      uint64_t v3 = (uint64_t)v2;
      byte_26AF94E66 = 1;
      int v4 = v2[6];
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF95268, 0);
      qword_26AF95278 = 0x80000000DLL;
      dword_26AF95280 = v4;
      word_26AF95284 = 0;
      *(void *)&xmmword_26AF95288 = 0;
      *((void *)&xmmword_26AF95288 + 1) = 0xFFFFFFFFLL;
      qword_26AF95298 = v3;
      qword_26AF952A0 = 0;
      qword_26AF95268 = (uint64_t)&unk_26E70FC98;
      re::IntrospectionRegistry::add(v5, v6);
      re::getPrettyTypeName((re *)&qword_26AF95268, (const re::IntrospectionBase *)&v15);
      if (v16) {
        uint64_t v7 = *(const char **)&v17[7];
      }
      else {
        uint64_t v7 = v17;
      }
      if (v15 && (v16 & 1) != 0) {
        (*(void (**)(void))(*(void *)v15 + 40))();
      }
      long long v12 = *(_OWORD *)(v3 + 32);
      uint64_t v8 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v13);
      if (v8)
      {
        uint64_t v9 = *v8;
        *((void *)&v11 + 1) = v9;
      }
      else
      {
        long long v14 = v12;
        re::TypeBuilder::beginOptionalType((uint64_t)&v15, v13, 8uLL, 4uLL, &v14);
        re::TypeBuilder::setOptionalAccessors((uint64_t)&v15, (void *(*)(void *))re::TypeBuilderHelper::registerOptional<re::mtl::SamplerMinMagFilter>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (void (*)(void *, const void *))re::TypeBuilderHelper::registerOptional<re::mtl::SamplerMinMagFilter>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v15, v10);
      }
      xmmword_26AF95288 = v11;
      re::StringID::destroyString((re::StringID *)v13);
    }
  }
}

void re::IntrospectionInfo<re::Optional<re::mtl::SamplerMipFilter>>::get(uint64_t a1, const re::IntrospectionBase *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF95020, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF95020))
  {
    re::IntrospectionOptionalBase::IntrospectionOptionalBase((re::IntrospectionOptionalBase *)&qword_26AF952A8);
    qword_26AF952A8 = (uint64_t)&unk_26E70FD18;
    __cxa_guard_release(&qword_26AF95020);
  }
  if ((byte_26AF94E67 & 1) == 0)
  {
    double v2 = re::mtl::introspect_SamplerMipFilter((re::mtl *)1, a2);
    if ((byte_26AF94E67 & 1) == 0)
    {
      uint64_t v3 = (uint64_t)v2;
      byte_26AF94E67 = 1;
      int v4 = v2[6];
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF952A8, 0);
      qword_26AF952B8 = 0x80000000DLL;
      dword_26AF952C0 = v4;
      word_26AF952C4 = 0;
      *(void *)&xmmword_26AF952C8 = 0;
      *((void *)&xmmword_26AF952C8 + 1) = 0xFFFFFFFFLL;
      qword_26AF952D8 = v3;
      qword_26AF952E0 = 0;
      qword_26AF952A8 = (uint64_t)&unk_26E70FD18;
      re::IntrospectionRegistry::add(v5, v6);
      re::getPrettyTypeName((re *)&qword_26AF952A8, (const re::IntrospectionBase *)&v15);
      if (v16) {
        uint64_t v7 = *(const char **)&v17[7];
      }
      else {
        uint64_t v7 = v17;
      }
      if (v15 && (v16 & 1) != 0) {
        (*(void (**)(void))(*(void *)v15 + 40))();
      }
      long long v12 = *(_OWORD *)(v3 + 32);
      uint64_t v8 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v13);
      if (v8)
      {
        uint64_t v9 = *v8;
        *((void *)&v11 + 1) = v9;
      }
      else
      {
        long long v14 = v12;
        re::TypeBuilder::beginOptionalType((uint64_t)&v15, v13, 8uLL, 4uLL, &v14);
        re::TypeBuilder::setOptionalAccessors((uint64_t)&v15, (void *(*)(void *))re::TypeBuilderHelper::registerOptional<re::mtl::SamplerMipFilter>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (void (*)(void *, const void *))re::TypeBuilderHelper::registerOptional<re::mtl::SamplerMipFilter>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v15, v10);
      }
      xmmword_26AF952C8 = v11;
      re::StringID::destroyString((re::StringID *)v13);
    }
  }
}

void re::IntrospectionInfo<re::Optional<re::mtl::SamplerCompareFunction>>::get(uint64_t a1, const re::IntrospectionBase *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF95028, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF95028))
  {
    re::IntrospectionOptionalBase::IntrospectionOptionalBase((re::IntrospectionOptionalBase *)&qword_26AF952E8);
    qword_26AF952E8 = (uint64_t)&unk_26E70FD98;
    __cxa_guard_release(&qword_26AF95028);
  }
  if ((byte_26AF94E68 & 1) == 0)
  {
    double v2 = re::mtl::introspect_SamplerCompareFunction((re::mtl *)1, a2);
    if ((byte_26AF94E68 & 1) == 0)
    {
      uint64_t v3 = (uint64_t)v2;
      byte_26AF94E68 = 1;
      int v4 = *((_DWORD *)v2 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF952E8, 0);
      qword_26AF952F8 = 0x80000000DLL;
      dword_26AF95300 = v4;
      word_26AF95304 = 0;
      *(void *)&xmmword_26AF95308 = 0;
      *((void *)&xmmword_26AF95308 + 1) = 0xFFFFFFFFLL;
      qword_26AF95318 = v3;
      qword_26AF95320 = 0;
      qword_26AF952E8 = (uint64_t)&unk_26E70FD98;
      re::IntrospectionRegistry::add(v5, v6);
      re::getPrettyTypeName((re *)&qword_26AF952E8, (const re::IntrospectionBase *)&v15);
      if (v16) {
        uint64_t v7 = *(const char **)&v17[7];
      }
      else {
        uint64_t v7 = v17;
      }
      if (v15 && (v16 & 1) != 0) {
        (*(void (**)(void))(*(void *)v15 + 40))();
      }
      long long v12 = *(_OWORD *)(v3 + 32);
      uint64_t v8 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v13);
      if (v8)
      {
        uint64_t v9 = *v8;
        *((void *)&v11 + 1) = v9;
      }
      else
      {
        long long v14 = v12;
        re::TypeBuilder::beginOptionalType((uint64_t)&v15, v13, 8uLL, 4uLL, &v14);
        re::TypeBuilder::setOptionalAccessors((uint64_t)&v15, (void *(*)(void *))re::TypeBuilderHelper::registerOptional<re::mtl::SamplerCompareFunction>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (void (*)(void *, const void *))re::TypeBuilderHelper::registerOptional<re::mtl::SamplerCompareFunction>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v15, v10);
      }
      xmmword_26AF95308 = v11;
      re::StringID::destroyString((re::StringID *)v13);
    }
  }
}

void re::internal::defaultConstruct<re::OptionalMaterialSamplerData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_WORD *)a3 = 10;
  *(unsigned char *)(a3 + 3) = 0;
  *(unsigned char *)(a3 + 8) = 0;
  *(unsigned char *)(a3 + 16) = 0;
  *(unsigned char *)(a3 + 24) = 0;
  *(unsigned char *)(a3 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0;
  *(unsigned char *)(a3 + 40) = 0;
  *(unsigned char *)(a3 + 48) = 0;
  *(unsigned char *)(a3 + 56) = 0;
  *(unsigned char *)(a3 + 64) = 0;
  *(unsigned char *)(a3 + 72) = 0;
  *(unsigned char *)(a3 + 80) = 0;
  *(unsigned char *)(a3 + 88) = 0;
}

uint64_t re::internal::defaultConstructV2<re::OptionalMaterialSamplerData>(uint64_t result)
{
  *(_WORD *)__n128 result = 10;
  *(unsigned char *)(result + 3) = 0;
  *(unsigned char *)(result + 8) = 0;
  *(unsigned char *)(result + 16) = 0;
  *(unsigned char *)(result + 24) = 0;
  *(unsigned char *)(result + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0;
  *(unsigned char *)(result + 40) = 0;
  *(unsigned char *)(result + 48) = 0;
  *(unsigned char *)(result + 56) = 0;
  *(unsigned char *)(result + 64) = 0;
  *(unsigned char *)(result + 72) = 0;
  *(unsigned char *)(result + 80) = 0;
  *(unsigned char *)(result + 88) = 0;
  return result;
}

uint64_t re::introspect_OptionalMaterialSamplerData(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"OptionalMaterialSamplerData", (uint64_t (*)(re::internal *))re::allocInfo_OptionalMaterialSamplerData, (re::IntrospectionBase *(*)(void))re::initInfo_OptionalMaterialSamplerData, (void (*)(re::IntrospectionBase *))&qword_26AF94EC8, this);
}

void *re::allocInfo_DebugMapping(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF94ED0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF94ED0))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF95AD8, "DebugMapping");
    __cxa_guard_release(&qword_26AF94ED0);
  }
  return &unk_26AF95AD8;
}

void re::initInfo_DebugMapping(re *this, re::IntrospectionBase *a2)
{
  v13[0] = 0x3253EF60E3187636;
  v13[1] = "DebugMapping";
  re::StringID::destroyString((re::StringID *)v13);
  *((_OWORD *)this + 2) = v14;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF94ED8, memory_order_acquire) & 1) == 0)
  {
    int v4 = (re *)__cxa_guard_acquire(&qword_26AF94ED8);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v7 = re::IntrospectionInfo<re::DynamicString>::get(1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + 8) = "name";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 48) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF950A0 = v8;
      uint64_t v9 = re::introspectionAllocator((re *)v8);
      re::IntrospectionInfo<re::HashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get((uint64_t)v9, v10);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + 8) = "mappings";
      *(void *)(v11 + 16) = &qword_26AF95610;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0x2000000002;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + 48) = 0;
      *(void *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF950A8 = v11;
      __cxa_guard_release(&qword_26AF94ED8);
    }
  }
  *((void *)this + 2) = 0x5000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((void *)this + 8) = &qword_26AF950A0;
  *((void *)this + 9) = re::internal::defaultConstruct<re::DebugMapping>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::DebugMapping>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::DebugMapping>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::DebugMapping>;
  re::IntrospectionRegistry::add(this, v3);
  long long v12 = v14;
}

void re::IntrospectionInfo<re::HashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get(uint64_t a1, const re::IntrospectionBase *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF95030, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF95030))
  {
    re::IntrospectionHashTableBase::IntrospectionHashTableBase((re::IntrospectionHashTableBase *)&qword_26AF95610);
    qword_26AF95610 = (uint64_t)&unk_26E70FE18;
    __cxa_guard_release(&qword_26AF95030);
  }
  if ((byte_26AF94E69 & 1) == 0)
  {
    double v2 = re::IntrospectionInfo<re::DynamicString>::get(1, a2);
    int v4 = re::introspect_int((re *)1, v3);
    if ((byte_26AF94E69 & 1) == 0)
    {
      uint64_t v5 = (uint64_t)v4;
      byte_26AF94E69 = 1;
      int v6 = v4[6];
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF95610, 0);
      qword_26AF95620 = 0x3000000007;
      dword_26AF95628 = v6;
      word_26AF9562C = 0;
      *(void *)&xmmword_26AF95630 = 0;
      *((void *)&xmmword_26AF95630 + 1) = 0xFFFFFFFFLL;
      qword_26AF95640 = (uint64_t)v2;
      qword_26AF95648 = 0;
      qword_26AF95650 = v5;
      qword_26AF95658 = 0;
      qword_26AF95610 = (uint64_t)&unk_26E70FE18;
      re::IntrospectionRegistry::add(v7, v8);
      re::getPrettyTypeName((re *)&qword_26AF95610, (const re::IntrospectionBase *)&v25);
      if (v26) {
        uint64_t v9 = v27;
      }
      else {
        uint64_t v9 = (char *)&v26 + 1;
      }
      if (v25 && (v26 & 1) != 0) {
        (*(void (**)(void))(*(void *)v25 + 40))();
      }
      long long v10 = v2[2];
      long long v20 = *(_OWORD *)(v5 + 32);
      long long v21 = v10;
      uint64_t v11 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v22);
      if (v11)
      {
        uint64_t v12 = *v11;
        *((void *)&v19 + 1) = v12;
      }
      else
      {
        uint64_t v25 = 0x449AD97C4B77BED4;
        uint64_t v26 = "_CompareFunc";
        int v13 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, &v25);
        if (v13)
        {
          uint64_t v14 = *v13;
          re::StringID::destroyString((re::StringID *)&v25);
        }
        else
        {
          re::StringID::destroyString((re::StringID *)&v25);
          *(void *)&v30.var0 = 0x449AD97C4B77BED4;
          v30.var1 = "_CompareFunc";
          uint64_t v15 = (void *)v25;
          uint64_t v14 = (uint64_t)v26;
          re::StringID::destroyString((re::StringID *)&v30);
        }
        re::TypeInfo::TypeInfo((uint64_t)&v30, (uint64_t)&v26);
        if (!v15
          || (char v16 = *v31,
              uint64_t v25 = v14,
              uint64_t v26 = v16,
              LODWORD(v27) = -1,
              (uint64_t v17 = (_anonymous_namespace_ *)re::HashTable<re::internal::TypeAttributeKey,re::internal::TypeAttributeData,re::Hash<re::internal::TypeAttributeKey>,re::EqualTo<re::internal::TypeAttributeKey>,true,false>::tryGet(*(void *)&v30.var0 + 768, &v25)) == 0)|| !*(void *)v17)
        {
          long long v29 = v21;
          v28[0] = v15;
          v28[1] = v14;
        }
        long long v23 = v20;
        long long v24 = v21;
        re::TypeBuilder::beginDictionaryType((uint64_t)&v25, v22, 1, 0x30uLL, 8uLL, &v24, &v23);
        re::TypeBuilder::setConstructor((uint64_t)&v25, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v25, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setDictionaryAccessors((uint64_t)&v25, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
        re::TypeBuilder::setDictionaryIterator((uint64_t)&v25, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (BOOL (*)(void *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (const void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v25, v18);
      }
      xmmword_26AF95630 = v19;
      re::StringID::destroyString((re::StringID *)v22);
    }
  }
}

double re::internal::defaultConstruct<re::DebugMapping>(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  re::DynamicString::setCapacity((void *)a3, 0);
  *(_DWORD *)(a3 + 64) = 0;
  *(_OWORD *)(a3 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(void *)&double result = 0x7FFFFFFFLL;
  *(void *)(a3 + 68) = 0x7FFFFFFFLL;
  return result;
}

double re::internal::defaultDestruct<re::DebugMapping>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a3 + 4);
  return re::DynamicString::deinit((re::DynamicString *)a3);
}

double re::internal::defaultConstructV2<re::DebugMapping>(uint64_t a1)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  re::DynamicString::setCapacity((void *)a1, 0);
  *(_DWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(void *)&double result = 0x7FFFFFFFLL;
  *(void *)(a1 + 68) = 0x7FFFFFFFLL;
  return result;
}

double re::internal::defaultDestructV2<re::DebugMapping>(uint64_t *a1)
{
  re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a1 + 4);
  return re::DynamicString::deinit((re::DynamicString *)a1);
}

void *re::allocInfo_OptionalMaterialParameterProperties(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF94EE8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF94EE8))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF95B50, "OptionalMaterialParameterProperties");
    __cxa_guard_release(&qword_26AF94EE8);
  }
  return &unk_26AF95B50;
}

void re::initInfo_OptionalMaterialParameterProperties(re *this, re::IntrospectionBase *a2)
{
  v14[0] = 0xEC26075C392FA2EALL;
  v14[1] = "OptionalMaterialParameterProperties";
  re::StringID::destroyString((re::StringID *)v14);
  *((_OWORD *)this + 2) = v15;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF94EF0, memory_order_acquire) & 1) == 0)
  {
    int v4 = (re *)__cxa_guard_acquire(&qword_26AF94EF0);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v7 = re::IntrospectionInfo<re::Optional<re::DynamicString>>::get(1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + 8) = "displayName";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 48) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF950B0 = v8;
      uint64_t v9 = re::introspectionAllocator((re *)v8);
      uint64_t v11 = re::IntrospectionInfo<re::Optional<BOOL>>::get(1, v10);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + 8) = "isHidden";
      *(void *)(v12 + 16) = v11;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0x2800000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 48) = 0;
      *(void *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF950B8 = v12;
      __cxa_guard_release(&qword_26AF94EF0);
    }
  }
  *((void *)this + 2) = 0x3000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((void *)this + 8) = &qword_26AF950B0;
  *((void *)this + 9) = re::internal::defaultConstruct<re::OptionalMaterialParameterProperties>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::OptionalMaterialParameterProperties>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::OptionalMaterialParameterProperties>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::OptionalMaterialParameterProperties>;
  re::IntrospectionRegistry::add(this, v3);
  long long v13 = v15;
}

void re::internal::defaultConstruct<re::OptionalMaterialParameterProperties>(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  *a3 = 0;
  a3[40] = 0;
}

double re::internal::defaultDestruct<re::OptionalMaterialParameterProperties>(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  if (*a3) {
    return re::DynamicString::deinit((re::DynamicString *)(a3 + 8));
  }
  return result;
}

unsigned char *re::internal::defaultConstructV2<re::OptionalMaterialParameterProperties>(unsigned char *result)
{
  *double result = 0;
  result[40] = 0;
  return result;
}

double re::internal::defaultDestructV2<re::OptionalMaterialParameterProperties>(unsigned char *a1)
{
  if (*a1) {
    return re::DynamicString::deinit((re::DynamicString *)(a1 + 8));
  }
  return result;
}

void *re::allocInfo_MaterialShaderData(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF94F00, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF94F00))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF95BC8, "MaterialShaderData");
    __cxa_guard_release(&qword_26AF94F00);
  }
  return &unk_26AF95BC8;
}

void re::initInfo_MaterialShaderData(re *this, re::IntrospectionBase *a2)
{
  v14[0] = 0xCBEC3AED4BA4B3ACLL;
  v14[1] = "MaterialShaderData";
  re::StringID::destroyString((re::StringID *)v14);
  *((_OWORD *)this + 2) = v15;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF94F08, memory_order_acquire) & 1) == 0)
  {
    int v4 = (re *)__cxa_guard_acquire(&qword_26AF94F08);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v7 = re::introspect_AssetHandle((re *)1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + 8) = "library";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 48) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF950C0 = v8;
      uint64_t v9 = re::introspectionAllocator((re *)v8);
      uint64_t v11 = re::IntrospectionInfo<re::DynamicString>::get(1, v10);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + 8) = "entry";
      *(void *)(v12 + 16) = v11;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0x1800000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 48) = 0;
      *(void *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF950C8 = v12;
      __cxa_guard_release(&qword_26AF94F08);
    }
  }
  *((void *)this + 2) = 0x3800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((void *)this + 8) = &qword_26AF950C0;
  *((void *)this + 9) = re::internal::defaultConstruct<re::MaterialShaderData>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::MaterialShaderData>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::MaterialShaderData>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::MaterialShaderData>;
  re::IntrospectionRegistry::add(this, v3);
  long long v13 = v15;
}

void *re::internal::defaultConstruct<re::MaterialShaderData>(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a3 + 48) = 0;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0u;
  *(_OWORD *)a3 = 0u;
  return re::DynamicString::setCapacity((void *)(a3 + 24), 0);
}

void re::internal::defaultDestruct<re::MaterialShaderData>(int a1, int a2, re::DynamicString *this)
{
  int v4 = (re::DynamicString *)((char *)this + 24);
  if (*((void *)this + 3)) {
    re::DynamicString::deinit((re::DynamicString *)((char *)this + 24));
  }
  re::DynamicString::deinit(v4);
  re::AssetHandle::~AssetHandle(this);
}

void *re::internal::defaultConstructV2<re::MaterialShaderData>(uint64_t a1)
{
  *(void *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return re::DynamicString::setCapacity((void *)(a1 + 24), 0);
}

void re::internal::defaultDestructV2<re::MaterialShaderData>(re::DynamicString *this)
{
  double v2 = (re::DynamicString *)((char *)this + 24);
  if (*((void *)this + 3)) {
    re::DynamicString::deinit((re::DynamicString *)((char *)this + 24));
  }
  re::DynamicString::deinit(v2);
  re::AssetHandle::~AssetHandle(this);
}

void *re::allocInfo_RenderAttachmentState(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF94F18, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF94F18))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF95C40, "RenderAttachmentState");
    __cxa_guard_release(&qword_26AF94F18);
  }
  return &unk_26AF95C40;
}

void re::initInfo_RenderAttachmentState(re *this, re::IntrospectionBase *a2)
{
  v44[0] = 0xA6BA137CEBA0C130;
  v44[1] = "RenderAttachmentState";
  re::StringID::destroyString((re::StringID *)v44);
  *((_OWORD *)this + 2) = v45;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF94F20, memory_order_acquire) & 1) == 0)
  {
    int v4 = (re *)__cxa_guard_acquire(&qword_26AF94F20);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v7 = re::introspect_BOOL((re *)1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + 8) = "alphaBlend";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 48) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF955C0 = v8;
      uint64_t v9 = re::introspectionAllocator((re *)v8);
      uint64_t v11 = re::introspect_BOOL((re *)1, v10);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + 8) = "preferProgrammableBlending";
      *(void *)(v12 + 16) = v11;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0x100000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 48) = 0;
      *(void *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF955C8 = v12;
      long long v13 = re::introspectionAllocator((re *)v12);
      uint64_t v14 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v13 + 32))(v13, 24, 8);
      *(_DWORD *)uint64_t v14 = 5;
      *((void *)v14 + 1) = "programmableBlending";
      *((void *)v14 + 2) = "preferProgrammableBlending";
      qword_26AF955D0 = (uint64_t)v14;
      long long v15 = re::introspectionAllocator(v14);
      uint64_t v17 = re::mtl::introspect_BlendFactor((re::mtl *)1, v16);
      uint64_t v18 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v15 + 32))(v15, 72, 8);
      *(_DWORD *)uint64_t v18 = 1;
      *(void *)(v18 + 8) = "rgbSourceFactor";
      *(void *)(v18 + 16) = v17;
      *(void *)(v18 + 24) = 0;
      *(void *)(v18 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0x400000003;
      *(_DWORD *)(v18 + 40) = 0;
      *(void *)(v18 + 48) = 0;
      *(void *)(v18 + 56) = 0;
      *(_DWORD *)(v18 + 64) = 0;
      qword_26AF955D8 = v18;
      long long v19 = re::introspectionAllocator((re *)v18);
      long long v21 = re::mtl::introspect_BlendFactor((re::mtl *)1, v20);
      uint64_t v22 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v19 + 32))(v19, 72, 8);
      *(_DWORD *)uint64_t v22 = 1;
      *(void *)(v22 + 8) = "rgbDestinationFactor";
      *(void *)(v22 + 16) = v21;
      *(void *)(v22 + 24) = 0;
      *(void *)(v22 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0x800000004;
      *(_DWORD *)(v22 + 40) = 0;
      *(void *)(v22 + 48) = 0;
      *(void *)(v22 + 56) = 0;
      *(_DWORD *)(v22 + 64) = 0;
      qword_26AF955E0 = v22;
      long long v23 = re::introspectionAllocator((re *)v22);
      uint64_t v25 = re::mtl::introspect_BlendOperation((re::mtl *)1, v24);
      uint64_t v26 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v23 + 32))(v23, 72, 8);
      *(_DWORD *)uint64_t v26 = 1;
      *(void *)(v26 + 8) = "rgbBlendOperation";
      *(void *)(v26 + 16) = v25;
      *(void *)(v26 + 24) = 0;
      *(void *)(v26 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0xC00000005;
      *(_DWORD *)(v26 + 40) = 0;
      *(void *)(v26 + 48) = 0;
      *(void *)(v26 + 56) = 0;
      *(_DWORD *)(v26 + 64) = 0;
      qword_26AF955E8 = v26;
      uint64_t v27 = re::introspectionAllocator((re *)v26);
      long long v29 = re::mtl::introspect_BlendFactor((re::mtl *)1, v28);
      uint64_t v30 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v27 + 32))(v27, 72, 8);
      *(_DWORD *)uint64_t v30 = 1;
      *(void *)(v30 + 8) = "alphaSourceFactor";
      *(void *)(v30 + 16) = v29;
      *(void *)(v30 + 24) = 0;
      *(void *)(v30 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0x1000000006;
      *(_DWORD *)(v30 + 40) = 0;
      *(void *)(v30 + 48) = 0;
      *(void *)(v30 + 56) = 0;
      *(_DWORD *)(v30 + 64) = 0;
      qword_26AF955F0 = v30;
      int v31 = re::introspectionAllocator((re *)v30);
      uint64_t v33 = re::mtl::introspect_BlendFactor((re::mtl *)1, v32);
      uint64_t v34 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v31 + 32))(v31, 72, 8);
      *(_DWORD *)uint64_t v34 = 1;
      *(void *)(v34 + 8) = "alphaDestinationFactor";
      *(void *)(v34 + 16) = v33;
      *(void *)(v34 + 24) = 0;
      *(void *)(v34 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0x1400000007;
      *(_DWORD *)(v34 + 40) = 0;
      *(void *)(v34 + 48) = 0;
      *(void *)(v34 + 56) = 0;
      *(_DWORD *)(v34 + 64) = 0;
      qword_26AF955F8 = v34;
      uint64_t v35 = re::introspectionAllocator((re *)v34);
      uint64_t v37 = re::mtl::introspect_BlendOperation((re::mtl *)1, v36);
      uint64_t v38 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v35 + 32))(v35, 72, 8);
      *(_DWORD *)uint64_t v38 = 1;
      *(void *)(v38 + 8) = "alphaBlendOperation";
      *(void *)(v38 + 16) = v37;
      *(void *)(v38 + 24) = 0;
      *(void *)(v38 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0x1800000008;
      *(_DWORD *)(v38 + 40) = 0;
      *(void *)(v38 + 48) = 0;
      *(void *)(v38 + 56) = 0;
      *(_DWORD *)(v38 + 64) = 0;
      qword_26AF95600 = v38;
      int v39 = re::introspectionAllocator((re *)v38);
      uint64_t v41 = re::mtl::introspect_ColorWriteMask((re::mtl *)1, v40);
      uint64_t v42 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v39 + 32))(v39, 72, 8);
      *(_DWORD *)uint64_t v42 = 1;
      *(void *)(v42 + 8) = "colorWriteMask";
      *(void *)(v42 + 16) = v41;
      *(void *)(v42 + 24) = 0;
      *(void *)(v42 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0x1C00000009;
      *(_DWORD *)(v42 + 40) = 0;
      *(void *)(v42 + 48) = 0;
      *(void *)(v42 + 56) = 0;
      *(_DWORD *)(v42 + 64) = 0;
      qword_26AF95608 = v42;
      __cxa_guard_release(&qword_26AF94F20);
    }
  }
  *((void *)this + 2) = 0x2000000008;
  *((_DWORD *)this + 6) = 4;
  *((_WORD *)this + 14) = 1;
  *((_DWORD *)this + 14) = 10;
  *((void *)this + 8) = &qword_26AF955C0;
  *((void *)this + 9) = re::internal::defaultConstruct<re::RenderAttachmentState>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::RenderAttachmentState>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::RenderAttachmentState>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::RenderAttachmentState>;
  re::IntrospectionRegistry::add(this, v3);
  long long v43 = v45;
}

double re::internal::defaultConstruct<re::RenderAttachmentState>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_WORD *)a3 = 0;
  *(_OWORD *)(a3 + 4) = xmmword_2343AD2D0;
  *(void *)&double result = 5;
  *(void *)(a3 + 20) = 5;
  *(_DWORD *)(a3 + 28) = 15;
  return result;
}

double re::internal::defaultConstructV2<re::RenderAttachmentState>(uint64_t a1)
{
  *(_WORD *)a1 = 0;
  *(_OWORD *)(a1 + 4) = xmmword_2343AD2D0;
  *(void *)&double result = 5;
  *(void *)(a1 + 20) = 5;
  *(_DWORD *)(a1 + 28) = 15;
  return result;
}

void *re::allocInfo_TechniqueState(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF94F30, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF94F30))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF95CB8, "TechniqueState");
    __cxa_guard_release(&qword_26AF94F30);
  }
  return &unk_26AF95CB8;
}

void re::initInfo_TechniqueState(re *this, re::IntrospectionBase *a2)
{
  v80[0] = 0x49118B545AE53882;
  v80[1] = "TechniqueState";
  re::StringID::destroyString((re::StringID *)v80);
  *((_OWORD *)this + 2) = v81;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF94F38, memory_order_acquire) & 1) == 0)
  {
    int v4 = (re *)__cxa_guard_acquire(&qword_26AF94F38);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v7 = re::introspect_BOOL((re *)1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + 8) = "alphaBlend";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 48) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26879B2A8 = v8;
      uint64_t v9 = re::introspectionAllocator((re *)v8);
      uint64_t v11 = re::introspect_BOOL((re *)1, v10);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + 8) = "writeDepth";
      *(void *)(v12 + 16) = v11;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0x200000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 48) = 0;
      *(void *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26879B2B0 = v12;
      long long v13 = re::introspectionAllocator((re *)v12);
      long long v15 = re::introspect_uint8_t((re *)1, v14);
      uint64_t v16 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v13 + 32))(v13, 72, 8);
      *(_DWORD *)uint64_t v16 = 1;
      *(void *)(v16 + 8) = "stencilReferenceValue";
      *(void *)(v16 + 16) = v15;
      *(void *)(v16 + 24) = 0;
      *(void *)(v16 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0x600000003;
      *(_DWORD *)(v16 + 40) = 0;
      *(void *)(v16 + 48) = 0;
      *(void *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_26879B2B8 = v16;
      uint64_t v17 = re::introspectionAllocator((re *)v16);
      long long v19 = re::mtl::introspect_CompareFunction((re::mtl *)1, v18);
      uint64_t v20 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v17 + 32))(v17, 72, 8);
      *(_DWORD *)uint64_t v20 = 1;
      *(void *)(v20 + 8) = "depthCompareFunction";
      *(void *)(v20 + 16) = v19;
      *(void *)(v20 + 24) = 0;
      *(void *)(v20 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0xA00000004;
      *(_DWORD *)(v20 + 40) = 0;
      *(void *)(v20 + 48) = 0;
      *(void *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_26879B2C0 = v20;
      long long v21 = re::introspectionAllocator((re *)v20);
      long long v23 = re::mtl::introspect_BlendFactor((re::mtl *)1, v22);
      uint64_t v24 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v21 + 32))(v21, 72, 8);
      *(_DWORD *)uint64_t v24 = 1;
      *(void *)(v24 + 8) = "rgbSourceFactor";
      *(void *)(v24 + 16) = v23;
      *(void *)(v24 + 24) = 0;
      *(void *)(v24 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0xC00000005;
      *(_DWORD *)(v24 + 40) = 0;
      *(void *)(v24 + 48) = 0;
      *(void *)(v24 + 56) = 0;
      *(_DWORD *)(v24 + 64) = 0;
      qword_26879B2C8 = v24;
      uint64_t v25 = re::introspectionAllocator((re *)v24);
      uint64_t v27 = re::mtl::introspect_BlendFactor((re::mtl *)1, v26);
      uint64_t v28 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v25 + 32))(v25, 72, 8);
      *(_DWORD *)uint64_t v28 = 1;
      *(void *)(v28 + 8) = "rgbDestinationFactor";
      *(void *)(v28 + 16) = v27;
      *(void *)(v28 + 24) = 0;
      *(void *)(v28 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0x1000000006;
      *(_DWORD *)(v28 + 40) = 0;
      *(void *)(v28 + 48) = 0;
      *(void *)(v28 + 56) = 0;
      *(_DWORD *)(v28 + 64) = 0;
      qword_26879B2D0 = v28;
      long long v29 = re::introspectionAllocator((re *)v28);
      int v31 = re::mtl::introspect_BlendOperation((re::mtl *)1, v30);
      uint64_t v32 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v29 + 32))(v29, 72, 8);
      *(_DWORD *)uint64_t v32 = 1;
      *(void *)(v32 + 8) = "rgbBlendOperation";
      *(void *)(v32 + 16) = v31;
      *(void *)(v32 + 24) = 0;
      *(void *)(v32 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0x1400000007;
      *(_DWORD *)(v32 + 40) = 0;
      *(void *)(v32 + 48) = 0;
      *(void *)(v32 + 56) = 0;
      *(_DWORD *)(v32 + 64) = 0;
      qword_26879B2D8 = v32;
      uint64_t v33 = re::introspectionAllocator((re *)v32);
      uint64_t v35 = re::mtl::introspect_BlendFactor((re::mtl *)1, v34);
      uint64_t v36 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v33 + 32))(v33, 72, 8);
      *(_DWORD *)uint64_t v36 = 1;
      *(void *)(v36 + 8) = "alphaSourceFactor";
      *(void *)(v36 + 16) = v35;
      *(void *)(v36 + 24) = 0;
      *(void *)(v36 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0x1800000008;
      *(_DWORD *)(v36 + 40) = 0;
      *(void *)(v36 + 48) = 0;
      *(void *)(v36 + 56) = 0;
      *(_DWORD *)(v36 + 64) = 0;
      qword_26879B2E0 = v36;
      uint64_t v37 = re::introspectionAllocator((re *)v36);
      int v39 = re::mtl::introspect_BlendFactor((re::mtl *)1, v38);
      uint64_t v40 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v37 + 32))(v37, 72, 8);
      *(_DWORD *)uint64_t v40 = 1;
      *(void *)(v40 + 8) = "alphaDestinationFactor";
      *(void *)(v40 + 16) = v39;
      *(void *)(v40 + 24) = 0;
      *(void *)(v40 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0x1C00000009;
      *(_DWORD *)(v40 + 40) = 0;
      *(void *)(v40 + 48) = 0;
      *(void *)(v40 + 56) = 0;
      *(_DWORD *)(v40 + 64) = 0;
      qword_26879B2E8 = v40;
      uint64_t v41 = re::introspectionAllocator((re *)v40);
      long long v43 = re::mtl::introspect_BlendOperation((re::mtl *)1, v42);
      uint64_t v44 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v41 + 32))(v41, 72, 8);
      *(_DWORD *)uint64_t v44 = 1;
      *(void *)(v44 + 8) = "alphaBlendOperation";
      *(void *)(v44 + 16) = v43;
      *(void *)(v44 + 24) = 0;
      *(void *)(v44 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0x200000000ALL;
      *(_DWORD *)(v44 + 40) = 0;
      *(void *)(v44 + 48) = 0;
      *(void *)(v44 + 56) = 0;
      *(_DWORD *)(v44 + 64) = 0;
      qword_26879B2F0 = v44;
      long long v45 = re::introspectionAllocator((re *)v44);
      uint64_t v47 = re::introspect_BOOL((re *)1, v46);
      uint64_t v48 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v45 + 32))(v45, 72, 8);
      *(_DWORD *)uint64_t v48 = 1;
      *(void *)(v48 + 8) = "alphaToCoverage";
      *(void *)(v48 + 16) = v47;
      *(void *)(v48 + 24) = 0;
      *(void *)(v48 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0x30000000BLL;
      *(_DWORD *)(v48 + 40) = 0;
      *(void *)(v48 + 48) = 0;
      *(void *)(v48 + 56) = 0;
      *(_DWORD *)(v48 + 64) = 0;
      qword_26879B2F8 = v48;
      BOOL v49 = re::introspectionAllocator((re *)v48);
      uint64_t v51 = re::introspect_BOOL((re *)1, v50);
      uint64_t v52 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v49 + 32))(v49, 72, 8);
      *(_DWORD *)uint64_t v52 = 1;
      *(void *)(v52 + 8) = "alphaToOne";
      *(void *)(v52 + 16) = v51;
      *(void *)(v52 + 24) = 0;
      *(void *)(v52 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0x40000000CLL;
      *(_DWORD *)(v52 + 40) = 0;
      *(void *)(v52 + 48) = 0;
      *(void *)(v52 + 56) = 0;
      *(_DWORD *)(v52 + 64) = 0;
      qword_26879B300 = v52;
      __int16 v53 = re::introspectionAllocator((re *)v52);
      uint64_t v55 = re::mtl::introspect_ColorWriteMask((re::mtl *)1, v54);
      uint64_t v56 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v53 + 32))(v53, 72, 8);
      *(_DWORD *)uint64_t v56 = 1;
      *(void *)(v56 + 8) = "colorWriteMask";
      *(void *)(v56 + 16) = v55;
      *(void *)(v56 + 24) = 0;
      *(void *)(v56 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0x240000000DLL;
      *(_DWORD *)(v56 + 40) = 0;
      *(void *)(v56 + 48) = 0;
      *(void *)(v56 + 56) = 0;
      *(_DWORD *)(v56 + 64) = 0;
      qword_26879B308 = v56;
      int v57 = (re *)re::introspectionAllocator((re *)v56);
      re::IntrospectionInfo<re::DynamicArray<re::RenderAttachmentState>>::get(v57);
      uint64_t v58 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v57 + 32))(v57, 72, 8);
      *(_DWORD *)uint64_t v58 = 1;
      *(void *)(v58 + 8) = "renderAttachmentState";
      *(void *)(v58 + 16) = &qword_26AF95328;
      *(void *)(v58 + 24) = 0;
      *(void *)(v58 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0x380000000ELL;
      *(_DWORD *)(v58 + 40) = 0;
      *(void *)(v58 + 48) = 0;
      *(void *)(v58 + 56) = 0;
      *(_DWORD *)(v58 + 64) = 0;
      qword_26879B310 = v58;
      uint64_t v59 = re::introspectionAllocator((re *)v58);
      int v61 = re::IntrospectionInfo<re::Optional<re::mtl::CullMode>>::get(1, v60);
      uint64_t v62 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v59 + 32))(v59, 72, 8);
      *(_DWORD *)uint64_t v62 = 1;
      *(void *)(v62 + 8) = "cullMode";
      *(void *)(v62 + 16) = v61;
      *(void *)(v62 + 24) = 0;
      *(void *)(v62 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0x340000000FLL;
      *(_DWORD *)(v62 + 40) = 0;
      *(void *)(v62 + 48) = 0;
      *(void *)(v62 + 56) = 0;
      *(_DWORD *)(v62 + 64) = 0;
      qword_26879B318 = v62;
      BOOL v63 = re::introspectionAllocator((re *)v62);
      long long v65 = re::introspect_float((re *)1, v64);
      uint64_t v66 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v63 + 32))(v63, 72, 8);
      *(_DWORD *)uint64_t v66 = 1;
      *(void *)(v66 + 8) = "depthBias";
      *(void *)(v66 + 16) = v65;
      *(void *)(v66 + 24) = 0;
      *(void *)(v66 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0x2800000010;
      *(_DWORD *)(v66 + 40) = 0;
      *(void *)(v66 + 48) = 0;
      *(void *)(v66 + 56) = 0;
      *(_DWORD *)(v66 + 64) = 0;
      qword_26879B320 = v66;
      uint64_t v67 = re::introspectionAllocator((re *)v66);
      uint64_t v69 = re::introspect_float((re *)1, v68);
      uint64_t v70 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v67 + 32))(v67, 72, 8);
      *(_DWORD *)uint64_t v70 = 1;
      *(void *)(v70 + 8) = "depthSlopeScale";
      *(void *)(v70 + 16) = v69;
      *(void *)(v70 + 24) = 0;
      *(void *)(v70 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0x2C00000011;
      *(_DWORD *)(v70 + 40) = 0;
      *(void *)(v70 + 48) = 0;
      *(void *)(v70 + 56) = 0;
      *(_DWORD *)(v70 + 64) = 0;
      qword_26879B328 = v70;
      int v71 = re::introspectionAllocator((re *)v70);
      int v73 = re::introspect_float((re *)1, v72);
      uint64_t v74 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v71 + 32))(v71, 72, 8);
      *(_DWORD *)uint64_t v74 = 1;
      *(void *)(v74 + 8) = "depthClamp";
      *(void *)(v74 + 16) = v73;
      *(void *)(v74 + 24) = 0;
      *(void *)(v74 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0x3000000012;
      *(_DWORD *)(v74 + 40) = 0;
      *(void *)(v74 + 48) = 0;
      *(void *)(v74 + 56) = 0;
      *(_DWORD *)(v74 + 64) = 0;
      qword_26879B330 = v74;
      uint64_t v75 = re::introspectionAllocator((re *)v74);
      uint64_t v77 = re::introspect_BOOL((re *)1, v76);
      uint64_t v78 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v75 + 32))(v75, 72, 8);
      *(_DWORD *)uint64_t v78 = 1;
      *(void *)(v78 + 8) = "preferProgrammableBlending";
      *(void *)(v78 + 16) = v77;
      *(void *)(v78 + 24) = 0;
      *(void *)(v78 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0x100000013;
      *(_DWORD *)(v78 + 40) = 0;
      *(void *)(v78 + 48) = 0;
      *(void *)(v78 + 56) = 0;
      *(_DWORD *)(v78 + 64) = 0;
      qword_26879B338 = v78;
      __cxa_guard_release(&qword_26AF94F38);
    }
  }
  *((void *)this + 2) = 0x6000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 19;
  *((void *)this + 8) = &qword_26879B2A8;
  *((void *)this + 9) = re::internal::defaultConstruct<re::TechniqueState>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::TechniqueState>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::TechniqueState>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::TechniqueState>;
  re::IntrospectionRegistry::add(this, v3);
  long long v79 = v81;
}

void re::IntrospectionInfo<re::DynamicArray<re::RenderAttachmentState>>::get(re *a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF95038, memory_order_acquire) & 1) == 0)
  {
    a1 = (re *)__cxa_guard_acquire(&qword_26AF95038);
    if (a1)
    {
      re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_26AF95328);
      qword_26AF95328 = (uint64_t)&unk_26E70FEB8;
      __cxa_guard_release(&qword_26AF95038);
    }
  }
  if ((byte_26AF94E6A & 1) == 0)
  {
    uint64_t v1 = (void *)qword_26AF94F28;
    if (qword_26AF94F28
      || (uint64_t v1 = re::allocInfo_RenderAttachmentState(a1),
          qword_26AF94F28 = (uint64_t)v1,
          re::initInfo_RenderAttachmentState((re *)v1, v2),
          (byte_26AF94E6A & 1) == 0))
    {
      byte_26AF94E6A = 1;
      int v3 = *((_DWORD *)v1 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF95328, 0);
      qword_26AF95338 = 0x2800000003;
      dword_26AF95340 = v3;
      word_26AF95344 = 0;
      *(void *)&xmmword_26AF95348 = 0;
      *((void *)&xmmword_26AF95348 + 1) = 0xFFFFFFFFLL;
      qword_26AF95358 = (uint64_t)v1;
      qword_26AF95360 = 0;
      qword_26AF95328 = (uint64_t)&unk_26E70FEB8;
      re::IntrospectionRegistry::add(v4, v5);
      re::getPrettyTypeName((re *)&qword_26AF95328, (const re::IntrospectionBase *)&v14);
      if (v15) {
        int v6 = *(const char **)&v16[7];
      }
      else {
        int v6 = v16;
      }
      if (v14 && (v15 & 1) != 0) {
        (*(void (**)(void))(*(void *)v14 + 40))();
      }
      long long v11 = *((_OWORD *)v1 + 2);
      uint64_t v7 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v12);
      if (v7)
      {
        uint64_t v8 = *v7;
        *((void *)&v10 + 1) = v8;
      }
      else
      {
        long long v13 = v11;
        re::TypeBuilder::beginListType((uint64_t)&v14, v12, 1, 0x28uLL, 8uLL, &v13);
        re::TypeBuilder::setConstructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::RenderAttachmentState>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::RenderAttachmentState>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v14, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::RenderAttachmentState>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::RenderAttachmentState>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v14, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::RenderAttachmentState>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v14, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::RenderAttachmentState>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::RenderAttachmentState>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::RenderAttachmentState>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v14, v9);
      }
      xmmword_26AF95348 = v10;
      re::StringID::destroyString((re::StringID *)v12);
    }
  }
}

double re::internal::defaultConstruct<re::TechniqueState>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a3 = 0xFFFF000100010000;
  *(_WORD *)(a3 + 8) = 1792;
  *(unsigned char *)(a3 + 10) = 4;
  *(_OWORD *)(a3 + 12) = xmmword_2343AD2D0;
  *(void *)&double result = 5;
  *(void *)(a3 + 28) = 5;
  *(_DWORD *)(a3 + 36) = 15;
  *(void *)(a3 + 88) = 0;
  *(void *)(a3 + 64) = 0;
  *(void *)(a3 + 72) = 0;
  *(void *)(a3 + 56) = 0;
  *(_DWORD *)(a3 + 80) = 0;
  *(void *)(a3 + 40) = 0;
  *(void *)(a3 + 45) = 0;
  return result;
}

uint64_t re::internal::defaultDestruct<re::TechniqueState>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::DynamicArray<unsigned long>::deinit(a3 + 56);
}

double re::internal::defaultConstructV2<re::TechniqueState>(uint64_t a1)
{
  *(void *)a1 = 0xFFFF000100010000;
  *(_WORD *)(a1 + 8) = 1792;
  *(unsigned char *)(a1 + 10) = 4;
  *(_OWORD *)(a1 + 12) = xmmword_2343AD2D0;
  *(void *)&double result = 5;
  *(void *)(a1 + 28) = 5;
  *(_DWORD *)(a1 + 36) = 15;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 80) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 45) = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::TechniqueState>(uint64_t a1)
{
  return re::DynamicArray<unsigned long>::deinit(a1 + 56);
}

void *re::allocInfo_MaterialTechniqueData(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF94F48, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF94F48))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF95D30, "MaterialTechniqueData");
    __cxa_guard_release(&qword_26AF94F48);
  }
  return &unk_26AF95D30;
}

void re::initInfo_MaterialTechniqueData(re *this, re::IntrospectionBase *a2)
{
  v81[0] = 0xCB28E91752B24826;
  v81[1] = "MaterialTechniqueData";
  re::StringID::destroyString((re::StringID *)v81);
  *((_OWORD *)this + 2) = v82;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF94F50, memory_order_acquire) & 1) == 0)
  {
    int v4 = (re *)__cxa_guard_acquire(&qword_26AF94F50);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v7 = re::IntrospectionInfo<re::DynamicString>::get(1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + 8) = "name";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 48) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26879B218 = v8;
      uint64_t v9 = re::introspectionAllocator((re *)v8);
      long long v11 = re::introspect_AssetHandle((re *)1, v10);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + 8) = "library";
      *(void *)(v12 + 16) = v11;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0x4000000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 48) = 0;
      *(void *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26879B220 = v12;
      long long v13 = (re *)re::introspectionAllocator((re *)v12);
      uint64_t v14 = v13;
      char v15 = (re *)qword_26AF94F10;
      if (!qword_26AF94F10)
      {
        char v15 = (re *)re::allocInfo_MaterialShaderData(v13);
        qword_26AF94F10 = (uint64_t)v15;
        re::initInfo_MaterialShaderData(v15, v16);
      }
      uint64_t v17 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v14 + 32))(v14, 72, 8);
      *(_DWORD *)uint64_t v17 = 1;
      *(void *)(v17 + 8) = "vertexShader";
      *(void *)(v17 + 16) = v15;
      *(void *)(v17 + 24) = 0;
      *(void *)(v17 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0x5800000003;
      *(_DWORD *)(v17 + 40) = 0;
      *(void *)(v17 + 48) = 0;
      *(void *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_26879B228 = v17;
      uint64_t v18 = (re *)re::introspectionAllocator((re *)v17);
      long long v19 = v18;
      uint64_t v20 = (re *)qword_26AF94F10;
      if (!qword_26AF94F10)
      {
        uint64_t v20 = (re *)re::allocInfo_MaterialShaderData(v18);
        qword_26AF94F10 = (uint64_t)v20;
        re::initInfo_MaterialShaderData(v20, v21);
      }
      uint64_t v22 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v19 + 32))(v19, 72, 8);
      *(_DWORD *)uint64_t v22 = 1;
      *(void *)(v22 + 8) = "pixelShader";
      *(void *)(v22 + 16) = v20;
      *(void *)(v22 + 24) = 0;
      *(void *)(v22 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0x9000000004;
      *(_DWORD *)(v22 + 40) = 0;
      *(void *)(v22 + 48) = 0;
      *(void *)(v22 + 56) = 0;
      *(_DWORD *)(v22 + 64) = 0;
      qword_26879B230 = v22;
      long long v23 = (re *)re::introspectionAllocator((re *)v22);
      uint64_t v24 = v23;
      uint64_t v25 = (re *)qword_26AF94F40;
      if (!qword_26AF94F40)
      {
        uint64_t v25 = (re *)re::allocInfo_TechniqueState(v23);
        qword_26AF94F40 = (uint64_t)v25;
        re::initInfo_TechniqueState(v25, v26);
      }
      uint64_t v27 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v24 + 32))(v24, 72, 8);
      *(_DWORD *)uint64_t v27 = 1;
      *(void *)(v27 + 8) = "state";
      *(void *)(v27 + 16) = v25;
      *(void *)(v27 + 24) = 0;
      *(void *)(v27 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0xC800000005;
      *(_DWORD *)(v27 + 40) = 0;
      *(void *)(v27 + 48) = 0;
      *(void *)(v27 + 56) = 0;
      *(_DWORD *)(v27 + 64) = 0;
      qword_26879B238 = v27;
      uint64_t v28 = re::introspectionAllocator((re *)v27);
      uint64_t v30 = re::IntrospectionInfo<re::DynamicString>::get(1, v29);
      uint64_t v31 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v28 + 32))(v28, 72, 8);
      *(_DWORD *)uint64_t v31 = 1;
      *(void *)(v31 + 8) = "debugMapping";
      *(void *)(v31 + 16) = v30;
      *(void *)(v31 + 24) = 0;
      *(void *)(v31 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0x12800000006;
      *(_DWORD *)(v31 + 40) = 0;
      *(void *)(v31 + 48) = 0;
      *(void *)(v31 + 56) = 0;
      *(_DWORD *)(v31 + 64) = 0;
      qword_26879B240 = v31;
      uint64_t v32 = re::introspectionAllocator((re *)v31);
      uint64_t v34 = re::IntrospectionInfo<re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get(1, v33);
      uint64_t v35 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v32 + 32))(v32, 72, 8);
      *(_DWORD *)uint64_t v35 = 1;
      *(void *)(v35 + 8) = "functionConstants";
      *(void *)(v35 + 16) = v34;
      *(void *)(v35 + 24) = 0;
      *(void *)(v35 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0x14800000007;
      *(_DWORD *)(v35 + 40) = 0;
      *(void *)(v35 + 48) = 0;
      *(void *)(v35 + 56) = 0;
      *(_DWORD *)(v35 + 64) = 0;
      qword_26879B248 = v35;
      uint64_t v36 = re::introspectionAllocator((re *)v35);
      uint64_t v38 = re::IntrospectionInfo<re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get(1, v37);
      uint64_t v39 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v36 + 32))(v36, 72, 8);
      *(_DWORD *)uint64_t v39 = 1;
      *(void *)(v39 + 8) = "variations";
      *(void *)(v39 + 16) = v38;
      *(void *)(v39 + 24) = 0;
      *(void *)(v39 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0x17800000008;
      *(_DWORD *)(v39 + 40) = 0;
      *(void *)(v39 + 48) = 0;
      *(void *)(v39 + 56) = 0;
      *(_DWORD *)(v39 + 64) = 0;
      qword_26879B250 = v39;
      uint64_t v40 = re::introspectionAllocator((re *)v39);
      uint64_t v42 = re::IntrospectionInfo<re::DynamicArray<re::DynamicString>>::get(1, v41);
      uint64_t v43 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v40 + 32))(v40, 72, 8);
      *(_DWORD *)uint64_t v43 = 1;
      *(void *)(v43 + 8) = "defaultVariations";
      *(void *)(v43 + 16) = v42;
      *(void *)(v43 + 24) = 0;
      *(void *)(v43 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0x1A800000009;
      *(_DWORD *)(v43 + 40) = 0;
      *(void *)(v43 + 48) = 0;
      *(void *)(v43 + 56) = 0;
      *(_DWORD *)(v43 + 64) = 0;
      qword_26879B258 = v43;
      uint64_t v44 = re::introspectionAllocator((re *)v43);
      uint64_t v46 = re::IntrospectionInfo<re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get(1, v45);
      uint64_t v47 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v44 + 32))(v44, 72, 8);
      *(_DWORD *)uint64_t v47 = 1;
      *(void *)(v47 + 8) = "tags";
      *(void *)(v47 + 16) = v46;
      *(void *)(v47 + 24) = 0;
      *(void *)(v47 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0x1D00000000ALL;
      *(_DWORD *)(v47 + 40) = 0;
      *(void *)(v47 + 48) = 0;
      *(void *)(v47 + 56) = 0;
      *(_DWORD *)(v47 + 64) = 0;
      qword_26879B260 = v47;
      uint64_t v48 = re::introspectionAllocator((re *)v47);
      StringID v50 = re::introspect_BOOL((re *)1, v49);
      uint64_t v51 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v48 + 32))(v48, 72, 8);
      *(_DWORD *)uint64_t v51 = 1;
      *(void *)(v51 + 8) = "inheritState";
      *(void *)(v51 + 16) = v50;
      *(void *)(v51 + 24) = 0;
      *(void *)(v51 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0x2280000000BLL;
      *(_DWORD *)(v51 + 40) = 0;
      *(void *)(v51 + 48) = 0;
      *(void *)(v51 + 56) = 0;
      *(_DWORD *)(v51 + 64) = 0;
      qword_26879B268 = v51;
      uint64_t v52 = re::introspectionAllocator((re *)v51);
      long long v54 = re::IntrospectionInfo<re::DynamicArray<re::DynamicString>>::get(1, v53);
      uint64_t v55 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v52 + 32))(v52, 72, 8);
      *(_DWORD *)uint64_t v55 = 1;
      *(void *)(v55 + 8) = "instancedArguments";
      *(void *)(v55 + 16) = v54;
      *(void *)(v55 + 24) = 0;
      *(void *)(v55 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0x2000000000CLL;
      *(_DWORD *)(v55 + 40) = 0;
      *(void *)(v55 + 48) = 0;
      *(void *)(v55 + 56) = 0;
      *(_DWORD *)(v55 + 64) = 0;
      qword_26879B270 = v55;
      uint64_t v56 = re::introspectionAllocator((re *)v55);
      uint64_t v58 = re::introspect_BOOL((re *)1, v57);
      uint64_t v59 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v56 + 32))(v56, 72, 8);
      *(_DWORD *)uint64_t v59 = 1;
      *(void *)(v59 + 8) = "supportsRuntimeFunctionConstants";
      *(void *)(v59 + 16) = v58;
      *(void *)(v59 + 24) = 0;
      *(void *)(v59 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0x2290000000DLL;
      *(_DWORD *)(v59 + 40) = 0;
      *(void *)(v59 + 48) = 0;
      *(void *)(v59 + 56) = 0;
      *(_DWORD *)(v59 + 64) = 0;
      qword_26879B278 = v59;
      uint64_t v60 = re::introspectionAllocator((re *)v59);
      uint64_t v62 = re::IntrospectionInfo<re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get(1, v61);
      uint64_t v63 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v60 + 32))(v60, 72, 8);
      *(_DWORD *)uint64_t v63 = 1;
      *(void *)(v63 + 8) = "runtimeFunctionConstantDefaults";
      *(void *)(v63 + 16) = v62;
      *(void *)(v63 + 24) = 0;
      *(void *)(v63 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0x2300000000ELL;
      *(_DWORD *)(v63 + 40) = 0;
      *(void *)(v63 + 48) = 0;
      *(void *)(v63 + 56) = 0;
      *(_DWORD *)(v63 + 64) = 0;
      qword_26879B280 = v63;
      long long v64 = re::introspectionAllocator((re *)v63);
      uint64_t v66 = re::IntrospectionInfo<re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get(1, v65);
      uint64_t v67 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v64 + 32))(v64, 72, 8);
      *(_DWORD *)uint64_t v67 = 1;
      *(void *)(v67 + 8) = "preloadOptions";
      *(void *)(v67 + 16) = v66;
      *(void *)(v67 + 24) = 0;
      *(void *)(v67 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0x2600000000FLL;
      *(_DWORD *)(v67 + 40) = 0;
      *(void *)(v67 + 48) = 0;
      *(void *)(v67 + 56) = 0;
      *(_DWORD *)(v67 + 64) = 0;
      qword_26879B288 = v67;
      uint64_t v68 = re::introspectionAllocator((re *)v67);
      uint64_t v70 = re::IntrospectionInfo<re::DynamicString>::get(1, v69);
      uint64_t v71 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v68 + 32))(v68, 72, 8);
      *(_DWORD *)uint64_t v71 = 1;
      *(void *)(v71 + 8) = "inheritFromTechnique";
      *(void *)(v71 + 16) = v70;
      *(void *)(v71 + 24) = 0;
      *(void *)(v71 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0x2000000010;
      *(_DWORD *)(v71 + 40) = 0;
      *(void *)(v71 + 48) = 0;
      *(void *)(v71 + 56) = 0;
      *(_DWORD *)(v71 + 64) = 0;
      qword_26879B290 = v71;
      BOOL v72 = re::introspectionAllocator((re *)v71);
      uint64_t v74 = re::introspect_BOOL((re *)1, v73);
      uint64_t v75 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v72 + 32))(v72, 72, 8);
      *(_DWORD *)uint64_t v75 = 1;
      *(void *)(v75 + 8) = "useDynamicAttributeStride";
      *(void *)(v75 + 16) = v74;
      *(void *)(v75 + 24) = 0;
      *(void *)(v75 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0x29000000011;
      *(_DWORD *)(v75 + 40) = 0;
      *(void *)(v75 + 48) = 0;
      *(void *)(v75 + 56) = 0;
      *(_DWORD *)(v75 + 64) = 0;
      qword_26879B298 = v75;
      uint64_t v76 = re::introspectionAllocator((re *)v75);
      uint64_t v78 = re::IntrospectionInfo<re::Optional<BOOL>>::get(1, v77);
      uint64_t v79 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v76 + 32))(v76, 72, 8);
      *(_DWORD *)uint64_t v79 = 1;
      *(void *)(v79 + 8) = "allowRuntimeTechniqueStateOverride";
      *(void *)(v79 + 16) = v78;
      *(void *)(v79 + 24) = 0;
      *(void *)(v79 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0x29100000012;
      *(_DWORD *)(v79 + 40) = 0;
      *(void *)(v79 + 48) = 0;
      *(void *)(v79 + 56) = 0;
      *(_DWORD *)(v79 + 64) = 0;
      qword_26879B2A0 = v79;
      __cxa_guard_release(&qword_26AF94F50);
    }
  }
  *((void *)this + 2) = 0x29800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 18;
  *((void *)this + 8) = &qword_26879B218;
  *((void *)this + 9) = re::internal::defaultConstruct<re::MaterialTechniqueData>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::MaterialTechniqueData>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::MaterialTechniqueData>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::MaterialTechniqueData>;
  re::IntrospectionRegistry::add(this, v3);
  long long v80 = v82;
}

re::MaterialTechniqueData *re::internal::defaultConstruct<re::MaterialTechniqueData>(int a1, int a2, re::MaterialTechniqueData *this)
{
  return re::MaterialTechniqueData::MaterialTechniqueData(this);
}

void re::internal::defaultDestruct<re::MaterialTechniqueData>(int a1, int a2, re::MaterialTechniqueData *this)
{
}

void *re::allocInfo_MaterialTechniqueGroupData(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF94F60, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF94F60))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF95DA8, "MaterialTechniqueGroupData");
    __cxa_guard_release(&qword_26AF94F60);
  }
  return &unk_26AF95DA8;
}

void re::initInfo_MaterialTechniqueGroupData(re *this, re::IntrospectionBase *a2)
{
  v14[0] = 0xAECD50652FAE5000;
  v14[1] = "MaterialTechniqueGroupData";
  re::StringID::destroyString((re::StringID *)v14);
  *((_OWORD *)this + 2) = v15;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF94F68, memory_order_acquire) & 1) == 0)
  {
    int v4 = (re *)__cxa_guard_acquire(&qword_26AF94F68);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v7 = re::IntrospectionInfo<re::DynamicString>::get(1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + 8) = "name";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 48) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF950D0 = v8;
      uint64_t v9 = re::introspectionAllocator((re *)v8);
      long long v11 = re::IntrospectionInfo<re::DynamicArray<re::DynamicString>>::get(1, v10);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + 8) = "techniques";
      *(void *)(v12 + 16) = v11;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0x2000000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 48) = 0;
      *(void *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF950D8 = v12;
      __cxa_guard_release(&qword_26AF94F68);
    }
  }
  *((void *)this + 2) = 0x4800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((void *)this + 8) = &qword_26AF950D0;
  *((void *)this + 9) = re::internal::defaultConstruct<re::MaterialTechniqueGroupData>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::MaterialTechniqueGroupData>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::MaterialTechniqueGroupData>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::MaterialTechniqueGroupData>;
  re::IntrospectionRegistry::add(this, v3);
  long long v13 = v15;
}

void *re::internal::defaultConstruct<re::MaterialTechniqueGroupData>(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  double result = re::DynamicString::setCapacity((void *)a3, 0);
  *(void *)(a3 + 64) = 0;
  *(void *)(a3 + 40) = 0;
  *(void *)(a3 + 48) = 0;
  *(void *)(a3 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0;
  *(_DWORD *)(a3 + 56) = 0;
  return result;
}

double re::internal::defaultDestruct<re::MaterialTechniqueGroupData>(int a1, int a2, const re::DynamicString **this)
{
  re::MaterialTechniqueGroupData::deinit(this);
  re::DynamicArray<re::DynamicString>::deinit((uint64_t)(this + 4));
  return re::DynamicString::deinit((re::DynamicString *)this);
}

void *re::internal::defaultConstructV2<re::MaterialTechniqueGroupData>(uint64_t a1)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  double result = re::DynamicString::setCapacity((void *)a1, 0);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  return result;
}

double re::internal::defaultDestructV2<re::MaterialTechniqueGroupData>(const re::DynamicString **a1)
{
  re::MaterialTechniqueGroupData::deinit(a1);
  re::DynamicArray<re::DynamicString>::deinit((uint64_t)(a1 + 4));
  return re::DynamicString::deinit((re::DynamicString *)a1);
}

void *re::allocInfo_MaterialTechniqueQualityLevelSetData(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF94F78, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF94F78))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&_MergedGlobals_252, "MaterialTechniqueQualityLevelSetData");
    __cxa_guard_release(&qword_26AF94F78);
  }
  return &_MergedGlobals_252;
}

void re::initInfo_MaterialTechniqueQualityLevelSetData(re *this, re::IntrospectionBase *a2)
{
  v18[0] = 0xA79299F1B003743CLL;
  v18[1] = "MaterialTechniqueQualityLevelSetData";
  re::StringID::destroyString((re::StringID *)v18);
  *((_OWORD *)this + 2) = v19;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF94F80, memory_order_acquire) & 1) == 0)
  {
    int v4 = (re *)__cxa_guard_acquire(&qword_26AF94F80);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v7 = re::IntrospectionInfo<re::DynamicString>::get(1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + 8) = "name";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 48) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF950F0 = v8;
      uint64_t v9 = re::introspectionAllocator((re *)v8);
      long long v11 = re::IntrospectionInfo<re::DynamicString>::get(1, v10);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + 8) = "techniqueSetBaseline";
      *(void *)(v12 + 16) = v11;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0x2000000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 48) = 0;
      *(void *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF950F8 = v12;
      long long v13 = re::introspectionAllocator((re *)v12);
      long long v15 = re::IntrospectionInfo<re::DynamicArray<re::DynamicString>>::get(1, v14);
      uint64_t v16 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v13 + 32))(v13, 72, 8);
      *(_DWORD *)uint64_t v16 = 1;
      *(void *)(v16 + 8) = "techniques";
      *(void *)(v16 + 16) = v15;
      *(void *)(v16 + 24) = 0;
      *(void *)(v16 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0x4000000003;
      *(_DWORD *)(v16 + 40) = 0;
      *(void *)(v16 + 48) = 0;
      *(void *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_26AF95100 = v16;
      __cxa_guard_release(&qword_26AF94F80);
    }
  }
  *((void *)this + 2) = 0x6800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((void *)this + 8) = &qword_26AF950F0;
  *((void *)this + 9) = re::internal::defaultConstruct<re::MaterialTechniqueQualityLevelSetData>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::MaterialTechniqueQualityLevelSetData>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::MaterialTechniqueQualityLevelSetData>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::MaterialTechniqueQualityLevelSetData>;
  re::IntrospectionRegistry::add(this, v3);
  long long v17 = v19;
}

void *re::internal::defaultConstruct<re::MaterialTechniqueQualityLevelSetData>(_anonymous_namespace_ *a1, uint64_t a2, _OWORD *a3)
{
  int v3 = a3;
  *a3 = 0u;
  a3[1] = 0u;
  int v4 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v3, 0);
  v3[2] = 0u;
  v3[3] = 0u;
  v3 += 2;
  double result = re::DynamicString::setCapacity(v3, 0);
  *((void *)v3 + 8) = 0;
  *((void *)v3 + 5) = 0;
  *((void *)v3 + 6) = 0;
  *((void *)v3 + 4) = 0;
  *((_DWORD *)v3 + 14) = 0;
  return result;
}

void re::internal::defaultDestruct<re::MaterialTechniqueQualityLevelSetData>(int a1, int a2, const re::DynamicString **this)
{
}

void *re::internal::defaultConstructV2<re::MaterialTechniqueQualityLevelSetData>(_anonymous_namespace_ *a1)
{
  uint64_t v1 = a1;
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  double v2 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v1, 0);
  *((_OWORD *)v1 + 2) = 0u;
  *((_OWORD *)v1 + 3) = 0u;
  uint64_t v1 = (_anonymous_namespace_ *)((char *)v1 + 32);
  double result = re::DynamicString::setCapacity(v1, 0);
  *((void *)v1 + 8) = 0;
  *((void *)v1 + 5) = 0;
  *((void *)v1 + 6) = 0;
  *((void *)v1 + 4) = 0;
  *((_DWORD *)v1 + 14) = 0;
  return result;
}

void *re::allocInfo_MaterialParameterData(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF94F90, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF94F90))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26879AFC0, "MaterialParameterData");
    __cxa_guard_release(&qword_26AF94F90);
  }
  return &unk_26879AFC0;
}

void re::initInfo_MaterialParameterData(re *this, re::IntrospectionBase *a2)
{
  v23[0] = 0x713A1216587C19D8;
  v23[1] = "MaterialParameterData";
  re::StringID::destroyString((re::StringID *)v23);
  *((_OWORD *)this + 2) = v24;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF94F98, memory_order_acquire) & 1) == 0)
  {
    int v4 = (re *)__cxa_guard_acquire(&qword_26AF94F98);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v7 = re::IntrospectionInfo<re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get(1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + 8) = "constants";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 48) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF95128 = v8;
      uint64_t v9 = re::introspectionAllocator((re *)v8);
      long long v11 = re::IntrospectionInfo<re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get(1, v10);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + 8) = "buffers";
      *(void *)(v12 + 16) = v11;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0x3000000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 48) = 0;
      *(void *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF95130 = v12;
      long long v13 = re::introspectionAllocator((re *)v12);
      re::IntrospectionInfo<re::HashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get((uint64_t)v13, v14);
      uint64_t v15 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v13 + 32))(v13, 72, 8);
      *(_DWORD *)uint64_t v15 = 1;
      *(void *)(v15 + 8) = "textures";
      *(void *)(v15 + 16) = &qword_26AF95660;
      *(void *)(v15 + 24) = 0;
      *(void *)(v15 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0x6000000003;
      *(_DWORD *)(v15 + 40) = 0;
      *(void *)(v15 + 48) = 0;
      *(void *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_26AF95138 = v15;
      uint64_t v16 = re::introspectionAllocator((re *)v15);
      re::IntrospectionInfo<re::HashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get((uint64_t)v16, v17);
      uint64_t v18 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v16 + 32))(v16, 72, 8);
      *(_DWORD *)uint64_t v18 = 1;
      *(void *)(v18 + 8) = "textureBlocks";
      *(void *)(v18 + 16) = &qword_26AF956B0;
      *(void *)(v18 + 24) = 0;
      *(void *)(v18 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0x9000000004;
      *(_DWORD *)(v18 + 40) = 0;
      *(void *)(v18 + 48) = 0;
      *(void *)(v18 + 56) = 0;
      *(_DWORD *)(v18 + 64) = 0;
      qword_26AF95140 = v18;
      long long v19 = re::introspectionAllocator((re *)v18);
      re::IntrospectionInfo<re::HashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get((uint64_t)v19, v20);
      uint64_t v21 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v19 + 32))(v19, 72, 8);
      *(_DWORD *)uint64_t v21 = 1;
      *(void *)(v21 + 8) = "samplers";
      *(void *)(v21 + 16) = &qword_26AF95700;
      *(void *)(v21 + 24) = 0;
      *(void *)(v21 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0xC000000005;
      *(_DWORD *)(v21 + 40) = 0;
      *(void *)(v21 + 48) = 0;
      *(void *)(v21 + 56) = 0;
      *(_DWORD *)(v21 + 64) = 0;
      qword_26AF95148 = v21;
      __cxa_guard_release(&qword_26AF94F98);
    }
  }
  *((void *)this + 2) = 0xF000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 5;
  *((void *)this + 8) = &qword_26AF95128;
  *((void *)this + 9) = re::internal::defaultConstruct<re::MaterialParameterData>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::MaterialParameterData>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::MaterialParameterData>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::MaterialParameterData>;
  re::IntrospectionRegistry::add(this, v3);
  long long v22 = v24;
}

void re::IntrospectionInfo<re::HashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get(uint64_t a1, const re::IntrospectionBase *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF95040, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF95040))
  {
    re::IntrospectionHashTableBase::IntrospectionHashTableBase((re::IntrospectionHashTableBase *)&qword_26AF95660);
    qword_26AF95660 = (uint64_t)&unk_26E70FF50;
    __cxa_guard_release(&qword_26AF95040);
  }
  if ((byte_26AF94E6B & 1) == 0)
  {
    double v2 = (re *)re::IntrospectionInfo<re::DynamicString>::get(1, a2);
    re::introspect_MaterialTextureParam(v2, v3);
    if ((byte_26AF94E6B & 1) == 0)
    {
      byte_26AF94E6B = 1;
      int v4 = dword_26AF958B0;
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF95660, 0);
      qword_26AF95670 = 0x3000000007;
      dword_26AF95678 = v4;
      word_26AF9567C = 0;
      *(void *)&xmmword_26AF95680 = 0;
      *((void *)&xmmword_26AF95680 + 1) = 0xFFFFFFFFLL;
      qword_26AF95690 = (uint64_t)v2;
      qword_26AF95698 = 0;
      qword_26AF956A0 = (uint64_t)&qword_26AF95898;
      qword_26AF956A8 = 0;
      qword_26AF95660 = (uint64_t)&unk_26E70FF50;
      re::IntrospectionRegistry::add(v5, v6);
      re::getPrettyTypeName((re *)&qword_26AF95660, (const re::IntrospectionBase *)&v23);
      if (v24) {
        uint64_t v7 = v25;
      }
      else {
        uint64_t v7 = (char *)&v24 + 1;
      }
      if (v23 && (v24 & 1) != 0) {
        (*(void (**)(void))(*(void *)v23 + 40))();
      }
      long long v8 = *((_OWORD *)v2 + 2);
      long long v18 = xmmword_26AF958B8;
      long long v19 = v8;
      uint64_t v9 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v20);
      if (v9)
      {
        uint64_t v10 = *v9;
        *((void *)&v17 + 1) = v10;
      }
      else
      {
        uint64_t v23 = 0x449AD97C4B77BED4;
        long long v24 = "_CompareFunc";
        long long v11 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, &v23);
        if (v11)
        {
          uint64_t v12 = *v11;
          re::StringID::destroyString((re::StringID *)&v23);
        }
        else
        {
          re::StringID::destroyString((re::StringID *)&v23);
          *(void *)&v28.var0 = 0x449AD97C4B77BED4;
          v28.var1 = "_CompareFunc";
          long long v13 = (void *)v23;
          uint64_t v12 = (uint64_t)v24;
          re::StringID::destroyString((re::StringID *)&v28);
        }
        re::TypeInfo::TypeInfo((uint64_t)&v28, (uint64_t)&v24);
        if (!v13
          || (uint64_t v14 = *v29,
              uint64_t v23 = v12,
              long long v24 = v14,
              LODWORD(v25) = -1,
              (uint64_t v15 = (_anonymous_namespace_ *)re::HashTable<re::internal::TypeAttributeKey,re::internal::TypeAttributeData,re::Hash<re::internal::TypeAttributeKey>,re::EqualTo<re::internal::TypeAttributeKey>,true,false>::tryGet(*(void *)&v28.var0 + 768, &v23)) == 0)|| !*(void *)v15)
        {
          long long v27 = v19;
          v26[0] = v13;
          v26[1] = v12;
        }
        long long v21 = v18;
        long long v22 = v19;
        re::TypeBuilder::beginDictionaryType((uint64_t)&v23, v20, 1, 0x30uLL, 8uLL, &v22, &v21);
        re::TypeBuilder::setConstructor((uint64_t)&v23, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v23, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setDictionaryAccessors((uint64_t)&v23, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
        re::TypeBuilder::setDictionaryIterator((uint64_t)&v23, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (BOOL (*)(void *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (const void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v23, v16);
      }
      xmmword_26AF95680 = v17;
      re::StringID::destroyString((re::StringID *)v20);
    }
  }
}

void re::IntrospectionInfo<re::HashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get(uint64_t a1, const re::IntrospectionBase *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF95048, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF95048))
  {
    re::IntrospectionHashTableBase::IntrospectionHashTableBase((re::IntrospectionHashTableBase *)&qword_26AF956B0);
    qword_26AF956B0 = (uint64_t)&unk_26E70FFF0;
    __cxa_guard_release(&qword_26AF95048);
  }
  if ((byte_26AF94E6C & 1) == 0)
  {
    double v2 = (re *)re::IntrospectionInfo<re::DynamicString>::get(1, a2);
    uint64_t v3 = (uint64_t)v2;
    int v4 = (void *)qword_26AF94EA0;
    if (!qword_26AF94EA0)
    {
      int v4 = re::allocInfo_MaterialTextureBlockData(v2);
      qword_26AF94EA0 = (uint64_t)v4;
      re::initInfo_MaterialTextureBlockData((re *)v4, v5);
    }
    if ((byte_26AF94E6C & 1) == 0)
    {
      byte_26AF94E6C = 1;
      int v6 = *((_DWORD *)v4 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF956B0, 0);
      qword_26AF956C0 = 0x3000000007;
      dword_26AF956C8 = v6;
      word_26AF956CC = 0;
      *(void *)&xmmword_26AF956D0 = 0;
      *((void *)&xmmword_26AF956D0 + 1) = 0xFFFFFFFFLL;
      qword_26AF956E0 = v3;
      qword_26AF956E8 = 0;
      qword_26AF956F0 = (uint64_t)v4;
      qword_26AF956F8 = 0;
      qword_26AF956B0 = (uint64_t)&unk_26E70FFF0;
      re::IntrospectionRegistry::add(v7, v8);
      re::getPrettyTypeName((re *)&qword_26AF956B0, (const re::IntrospectionBase *)&v25);
      if (v26) {
        uint64_t v9 = v27;
      }
      else {
        uint64_t v9 = (char *)&v26 + 1;
      }
      if (v25 && (v26 & 1) != 0) {
        (*(void (**)(void))(*(void *)v25 + 40))();
      }
      long long v10 = *(_OWORD *)(v3 + 32);
      long long v20 = *((_OWORD *)v4 + 2);
      long long v21 = v10;
      long long v11 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v22);
      if (v11)
      {
        uint64_t v12 = *v11;
        *((void *)&v19 + 1) = v12;
      }
      else
      {
        uint64_t v25 = 0x449AD97C4B77BED4;
        uint64_t v26 = "_CompareFunc";
        long long v13 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, &v25);
        if (v13)
        {
          uint64_t v14 = *v13;
          re::StringID::destroyString((re::StringID *)&v25);
        }
        else
        {
          re::StringID::destroyString((re::StringID *)&v25);
          *(void *)&v30.var0 = 0x449AD97C4B77BED4;
          v30.var1 = "_CompareFunc";
          uint64_t v15 = (void *)v25;
          uint64_t v14 = (uint64_t)v26;
          re::StringID::destroyString((re::StringID *)&v30);
        }
        re::TypeInfo::TypeInfo((uint64_t)&v30, (uint64_t)&v26);
        if (!v15
          || (uint64_t v16 = *v31,
              uint64_t v25 = v14,
              uint64_t v26 = v16,
              LODWORD(v27) = -1,
              (long long v17 = (_anonymous_namespace_ *)re::HashTable<re::internal::TypeAttributeKey,re::internal::TypeAttributeData,re::Hash<re::internal::TypeAttributeKey>,re::EqualTo<re::internal::TypeAttributeKey>,true,false>::tryGet(*(void *)&v30.var0 + 768, &v25)) == 0)|| !*(void *)v17)
        {
          long long v29 = v21;
          v28[0] = v15;
          v28[1] = v14;
        }
        long long v23 = v20;
        long long v24 = v21;
        re::TypeBuilder::beginDictionaryType((uint64_t)&v25, v22, 1, 0x30uLL, 8uLL, &v24, &v23);
        re::TypeBuilder::setConstructor((uint64_t)&v25, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v25, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setDictionaryAccessors((uint64_t)&v25, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
        re::TypeBuilder::setDictionaryIterator((uint64_t)&v25, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (BOOL (*)(void *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (const void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v25, v18);
      }
      xmmword_26AF956D0 = v19;
      re::StringID::destroyString((re::StringID *)v22);
    }
  }
}

void re::IntrospectionInfo<re::HashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get(uint64_t a1, const re::IntrospectionBase *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF95050, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF95050))
  {
    re::IntrospectionHashTableBase::IntrospectionHashTableBase((re::IntrospectionHashTableBase *)&qword_26AF95700);
    qword_26AF95700 = (uint64_t)&unk_26E710090;
    __cxa_guard_release(&qword_26AF95050);
  }
  if ((byte_26AF94E6D & 1) == 0)
  {
    double v2 = (re *)re::IntrospectionInfo<re::DynamicString>::get(1, a2);
    uint64_t v3 = (uint64_t)v2;
    int v4 = (void *)qword_26AF94EC8;
    if (!qword_26AF94EC8)
    {
      int v4 = re::allocInfo_OptionalMaterialSamplerData(v2);
      qword_26AF94EC8 = (uint64_t)v4;
      re::initInfo_OptionalMaterialSamplerData((re *)v4, v5);
    }
    if ((byte_26AF94E6D & 1) == 0)
    {
      byte_26AF94E6D = 1;
      int v6 = *((_DWORD *)v4 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF95700, 0);
      qword_26AF95710 = 0x3000000007;
      dword_26AF95718 = v6;
      word_26AF9571C = 0;
      *(void *)&xmmword_26AF95720 = 0;
      *((void *)&xmmword_26AF95720 + 1) = 0xFFFFFFFFLL;
      qword_26AF95730 = v3;
      qword_26AF95738 = 0;
      qword_26AF95740 = (uint64_t)v4;
      qword_26AF95748 = 0;
      qword_26AF95700 = (uint64_t)&unk_26E710090;
      re::IntrospectionRegistry::add(v7, v8);
      re::getPrettyTypeName((re *)&qword_26AF95700, (const re::IntrospectionBase *)&v25);
      if (v26) {
        uint64_t v9 = v27;
      }
      else {
        uint64_t v9 = (char *)&v26 + 1;
      }
      if (v25 && (v26 & 1) != 0) {
        (*(void (**)(void))(*(void *)v25 + 40))();
      }
      long long v10 = *(_OWORD *)(v3 + 32);
      long long v20 = *((_OWORD *)v4 + 2);
      long long v21 = v10;
      long long v11 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v22);
      if (v11)
      {
        uint64_t v12 = *v11;
        *((void *)&v19 + 1) = v12;
      }
      else
      {
        uint64_t v25 = 0x449AD97C4B77BED4;
        uint64_t v26 = "_CompareFunc";
        long long v13 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, &v25);
        if (v13)
        {
          uint64_t v14 = *v13;
          re::StringID::destroyString((re::StringID *)&v25);
        }
        else
        {
          re::StringID::destroyString((re::StringID *)&v25);
          *(void *)&v30.var0 = 0x449AD97C4B77BED4;
          v30.var1 = "_CompareFunc";
          uint64_t v15 = (void *)v25;
          uint64_t v14 = (uint64_t)v26;
          re::StringID::destroyString((re::StringID *)&v30);
        }
        re::TypeInfo::TypeInfo((uint64_t)&v30, (uint64_t)&v26);
        if (!v15
          || (uint64_t v16 = *v31,
              uint64_t v25 = v14,
              uint64_t v26 = v16,
              LODWORD(v27) = -1,
              (long long v17 = (_anonymous_namespace_ *)re::HashTable<re::internal::TypeAttributeKey,re::internal::TypeAttributeData,re::Hash<re::internal::TypeAttributeKey>,re::EqualTo<re::internal::TypeAttributeKey>,true,false>::tryGet(*(void *)&v30.var0 + 768, &v25)) == 0)|| !*(void *)v17)
        {
          long long v29 = v21;
          v28[0] = v15;
          v28[1] = v14;
        }
        long long v23 = v20;
        long long v24 = v21;
        re::TypeBuilder::beginDictionaryType((uint64_t)&v25, v22, 1, 0x30uLL, 8uLL, &v24, &v23);
        re::TypeBuilder::setConstructor((uint64_t)&v25, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v25, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setDictionaryAccessors((uint64_t)&v25, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
        re::TypeBuilder::setDictionaryIterator((uint64_t)&v25, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (BOOL (*)(void *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (const void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v25, v18);
      }
      xmmword_26AF95720 = v19;
      re::StringID::destroyString((re::StringID *)v22);
    }
  }
}

double re::internal::defaultConstruct<re::MaterialParameterData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)(a3 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0;
  double result = 0.0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(void *)(a3 + 36) = 0x7FFFFFFFLL;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_DWORD *)(a3 + 80) = 0;
  *(void *)(a3 + 84) = 0x7FFFFFFFLL;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_DWORD *)(a3 + 128) = 0;
  *(void *)(a3 + 1re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0x7FFFFFFFLL;
  *(_OWORD *)(a3 + 144) = 0u;
  *(_OWORD *)(a3 + 160) = 0u;
  *(_DWORD *)(a3 + 176) = 0;
  *(void *)(a3 + 180) = 0x7FFFFFFFLL;
  *(_OWORD *)(a3 + 192) = 0u;
  *(_OWORD *)(a3 + 208) = 0u;
  *(_DWORD *)(a3 + 224) = 0;
  *(void *)(a3 + 228) = 0x7FFFFFFFLL;
  return result;
}

double re::internal::defaultDestruct<re::MaterialParameterData>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  re::HashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a3 + 24);
  re::HashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a3 + 18);
  re::HashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a3 + 12);
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a3 + 6);
  return re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a3);
}

double re::internal::defaultConstructV2<re::MaterialParameterData>(uint64_t a1)
{
  *(_DWORD *)(a1 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 36) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_DWORD *)(a1 + 80) = 0;
  *(void *)(a1 + 84) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_DWORD *)(a1 + 128) = 0;
  *(void *)(a1 + 1re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_DWORD *)(a1 + 176) = 0;
  *(void *)(a1 + 180) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_DWORD *)(a1 + 224) = 0;
  *(void *)(a1 + 228) = 0x7FFFFFFFLL;
  return result;
}

double re::internal::defaultDestructV2<re::MaterialParameterData>(uint64_t *a1)
{
  re::HashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a1 + 24);
  re::HashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a1 + 18);
  re::HashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a1 + 12);
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a1 + 6);
  return re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a1);
}

void *re::allocInfo_MaterialDefinitionFile(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF94FA8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF94FA8))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26879B038, "MaterialDefinitionFile");
    __cxa_guard_release(&qword_26AF94FA8);
  }
  return &unk_26879B038;
}

void re::initInfo_MaterialDefinitionFile(re *this, re::IntrospectionBase *a2)
{
  v52[0] = 0x40860A7DC02A152CLL;
  v52[1] = "MaterialDefinitionFile";
  re::StringID::destroyString((re::StringID *)v52);
  *((_OWORD *)this + 2) = v53;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF94FB0, memory_order_acquire) & 1) == 0)
  {
    int v4 = (re *)__cxa_guard_acquire(&qword_26AF94FB0);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v7 = re::IntrospectionInfo<re::DynamicString>::get(1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + 8) = "name";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 48) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF95978 = v8;
      uint64_t v9 = re::introspectionAllocator((re *)v8);
      long long v11 = re::IntrospectionInfo<re::DynamicString>::get(1, v10);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + 8) = "deprecationMessage";
      *(void *)(v12 + 16) = v11;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0x4000000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 48) = 0;
      *(void *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF95980 = v12;
      long long v13 = re::introspectionAllocator((re *)v12);
      uint64_t v15 = re::introspect_AssetHandle((re *)1, v14);
      uint64_t v16 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v13 + 32))(v13, 72, 8);
      *(_DWORD *)uint64_t v16 = 1;
      *(void *)(v16 + 8) = "library";
      *(void *)(v16 + 16) = v15;
      *(void *)(v16 + 24) = 0;
      *(void *)(v16 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0x6000000003;
      *(_DWORD *)(v16 + 40) = 0;
      *(void *)(v16 + 48) = 0;
      *(void *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_26AF95988 = v16;
      long long v17 = re::introspectionAllocator((re *)v16);
      long long v19 = re::introspect_AssetHandle((re *)1, v18);
      uint64_t v20 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v17 + 32))(v17, 72, 8);
      *(_DWORD *)uint64_t v20 = 1;
      *(void *)(v20 + 8) = "overrideMaterial";
      *(void *)(v20 + 16) = v19;
      *(void *)(v20 + 24) = 0;
      *(void *)(v20 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0x7800000004;
      *(_DWORD *)(v20 + 40) = 0;
      *(void *)(v20 + 48) = 0;
      *(void *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_26AF95990 = v20;
      long long v21 = (re *)re::introspectionAllocator((re *)v20);
      long long v22 = v21;
      long long v23 = (re *)qword_26AF94FA0;
      if (!qword_26AF94FA0)
      {
        long long v23 = (re *)re::allocInfo_MaterialParameterData(v21);
        qword_26AF94FA0 = (uint64_t)v23;
        re::initInfo_MaterialParameterData(v23, v24);
      }
      uint64_t v25 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v22 + 32))(v22, 72, 8);
      *(_DWORD *)uint64_t v25 = 1;
      *(void *)(v25 + 8) = "parameters";
      *(void *)(v25 + 16) = v23;
      *(void *)(v25 + 24) = 0;
      *(void *)(v25 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0x9000000005;
      *(_DWORD *)(v25 + 40) = 0;
      *(void *)(v25 + 48) = 0;
      *(void *)(v25 + 56) = 0;
      *(_DWORD *)(v25 + 64) = 0;
      qword_26AF95998 = v25;
      uint64_t v26 = (re *)re::introspectionAllocator((re *)v25);
      re::IntrospectionInfo<re::DynamicArray<re::MaterialTechniqueData>>::get(v26);
      uint64_t v27 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v26 + 32))(v26, 72, 8);
      *(_DWORD *)uint64_t v27 = 1;
      *(void *)(v27 + 8) = "techniques";
      *(void *)(v27 + 16) = &qword_26AF95368;
      *(void *)(v27 + 24) = 0;
      *(void *)(v27 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0x18000000006;
      *(_DWORD *)(v27 + 40) = 0;
      *(void *)(v27 + 48) = 0;
      *(void *)(v27 + 56) = 0;
      *(_DWORD *)(v27 + 64) = 0;
      qword_26AF959A0 = v27;
      StringID v28 = (re *)re::introspectionAllocator((re *)v27);
      re::IntrospectionInfo<re::DynamicArray<re::MaterialTechniqueGroupData>>::get(v28);
      uint64_t v29 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v28 + 32))(v28, 72, 8);
      *(_DWORD *)uint64_t v29 = 1;
      *(void *)(v29 + 8) = "techniqueGroups";
      *(void *)(v29 + 16) = &qword_26AF953A8;
      *(void *)(v29 + 24) = 0;
      *(void *)(v29 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0x1A800000007;
      *(_DWORD *)(v29 + 40) = 0;
      *(void *)(v29 + 48) = 0;
      *(void *)(v29 + 56) = 0;
      *(_DWORD *)(v29 + 64) = 0;
      qword_26AF959A8 = v29;
      StringID v30 = re::introspectionAllocator((re *)v29);
      uint64_t v32 = re::IntrospectionInfo<re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get(1, v31);
      uint64_t v33 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v30 + 32))(v30, 72, 8);
      *(_DWORD *)uint64_t v33 = 1;
      *(void *)(v33 + 8) = "techniqueMapping";
      *(void *)(v33 + 16) = v32;
      *(void *)(v33 + 24) = 0;
      *(void *)(v33 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0x1D000000008;
      *(_DWORD *)(v33 + 40) = 0;
      *(void *)(v33 + 48) = 0;
      *(void *)(v33 + 56) = 0;
      *(_DWORD *)(v33 + 64) = 0;
      qword_26AF959B0 = v33;
      uint64_t v34 = (re *)re::introspectionAllocator((re *)v33);
      re::IntrospectionInfo<re::DynamicArray<re::DebugMapping>>::get(v34);
      uint64_t v35 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v34 + 32))(v34, 72, 8);
      *(_DWORD *)uint64_t v35 = 1;
      *(void *)(v35 + 8) = "debugMappings";
      *(void *)(v35 + 16) = &qword_26AF953E8;
      *(void *)(v35 + 24) = 0;
      *(void *)(v35 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0x23000000009;
      *(_DWORD *)(v35 + 40) = 0;
      *(void *)(v35 + 48) = 0;
      *(void *)(v35 + 56) = 0;
      *(_DWORD *)(v35 + 64) = 0;
      qword_26AF959B8 = v35;
      uint64_t v36 = re::introspectionAllocator((re *)v35);
      re::IntrospectionInfo<re::HashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get((uint64_t)v36, v37);
      uint64_t v38 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v36 + 32))(v36, 72, 8);
      *(_DWORD *)uint64_t v38 = 1;
      *(void *)(v38 + 8) = "parameterProperties";
      *(void *)(v38 + 16) = &qword_26AF95750;
      *(void *)(v38 + 24) = 0;
      *(void *)(v38 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0x2580000000ALL;
      *(_DWORD *)(v38 + 40) = 0;
      *(void *)(v38 + 48) = 0;
      *(void *)(v38 + 56) = 0;
      *(_DWORD *)(v38 + 64) = 0;
      qword_26AF959C0 = v38;
      uint64_t v39 = (re *)re::introspectionAllocator((re *)v38);
      re::IntrospectionInfo<re::DynamicArray<re::MaterialTechniqueQualityLevelSetData>>::get(v39);
      uint64_t v40 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v39 + 32))(v39, 72, 8);
      *(_DWORD *)uint64_t v40 = 1;
      *(void *)(v40 + 8) = "techniqueQualityLevelSet";
      *(void *)(v40 + 16) = &qword_26AF95428;
      *(void *)(v40 + 24) = 0;
      *(void *)(v40 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0x2880000000BLL;
      *(_DWORD *)(v40 + 40) = 0;
      *(void *)(v40 + 48) = 0;
      *(void *)(v40 + 56) = 0;
      *(_DWORD *)(v40 + 64) = 0;
      qword_26AF959C8 = v40;
      uint64_t v41 = re::introspectionAllocator((re *)v40);
      re::IntrospectionInfo<re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get((uint64_t)v41, v42);
      uint64_t v43 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v41 + 32))(v41, 72, 8);
      *(_DWORD *)uint64_t v43 = 1;
      *(void *)(v43 + 8) = "techniqueMappingOverrides";
      *(void *)(v43 + 16) = &qword_26AF957A0;
      *(void *)(v43 + 24) = 0;
      *(void *)(v43 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0x2000000000CLL;
      *(_DWORD *)(v43 + 40) = 0;
      *(void *)(v43 + 48) = 0;
      *(void *)(v43 + 56) = 0;
      *(_DWORD *)(v43 + 64) = 0;
      qword_26AF959D0 = v43;
      uint64_t v44 = re::introspectionAllocator((re *)v43);
      re::IntrospectionInfo<re::HashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get((uint64_t)v44, v45);
      uint64_t v46 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v44 + 32))(v44, 72, 8);
      *(_DWORD *)uint64_t v46 = 1;
      *(void *)(v46 + 8) = "shaderCompilationMode";
      *(void *)(v46 + 16) = &qword_26AF95610;
      *(void *)(v46 + 24) = 0;
      *(void *)(v46 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0x2B00000000DLL;
      *(_DWORD *)(v46 + 40) = 0;
      *(void *)(v46 + 48) = 0;
      *(void *)(v46 + 56) = 0;
      *(_DWORD *)(v46 + 64) = 0;
      qword_26AF959D8 = v46;
      uint64_t v47 = re::introspectionAllocator((re *)v46);
      BOOL v49 = re::IntrospectionInfo<re::DynamicString>::get(1, v48);
      uint64_t v50 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v47 + 32))(v47, 72, 8);
      *(_DWORD *)uint64_t v50 = 1;
      *(void *)(v50 + 8) = "profilingCategory";
      *(void *)(v50 + 16) = v49;
      *(void *)(v50 + 24) = 0;
      *(void *)(v50 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0x200000000ELL;
      *(_DWORD *)(v50 + 40) = 0;
      *(void *)(v50 + 48) = 0;
      *(void *)(v50 + 56) = 0;
      *(_DWORD *)(v50 + 64) = 0;
      qword_26AF959E0 = v50;
      __cxa_guard_release(&qword_26AF94FB0);
    }
  }
  *((void *)this + 2) = 0x2E000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 14;
  *((void *)this + 8) = &qword_26AF95978;
  *((void *)this + 9) = re::internal::defaultConstruct<re::MaterialDefinitionFile>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::MaterialDefinitionFile>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::MaterialDefinitionFile>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::MaterialDefinitionFile>;
  re::IntrospectionRegistry::add(this, v3);
  long long v51 = v53;
}

void re::IntrospectionInfo<re::DynamicArray<re::MaterialTechniqueData>>::get(re *a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF95058, memory_order_acquire) & 1) == 0)
  {
    a1 = (re *)__cxa_guard_acquire(&qword_26AF95058);
    if (a1)
    {
      re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_26AF95368);
      qword_26AF95368 = (uint64_t)&unk_26E710130;
      __cxa_guard_release(&qword_26AF95058);
    }
  }
  if ((byte_26AF94E6E & 1) == 0)
  {
    uint64_t v1 = (void *)qword_26AF94F58;
    if (qword_26AF94F58
      || (uint64_t v1 = re::allocInfo_MaterialTechniqueData(a1),
          qword_26AF94F58 = (uint64_t)v1,
          re::initInfo_MaterialTechniqueData((re *)v1, v2),
          (byte_26AF94E6E & 1) == 0))
    {
      byte_26AF94E6E = 1;
      int v3 = *((_DWORD *)v1 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF95368, 0);
      qword_26AF95378 = 0x2800000003;
      dword_26AF95380 = v3;
      word_26AF95384 = 0;
      *(void *)&xmmword_26AF95388 = 0;
      *((void *)&xmmword_26AF95388 + 1) = 0xFFFFFFFFLL;
      qword_26AF95398 = (uint64_t)v1;
      qword_26AF953A0 = 0;
      qword_26AF95368 = (uint64_t)&unk_26E710130;
      re::IntrospectionRegistry::add(v4, v5);
      re::getPrettyTypeName((re *)&qword_26AF95368, (const re::IntrospectionBase *)&v14);
      if (v15) {
        int v6 = *(const char **)&v16[7];
      }
      else {
        int v6 = v16;
      }
      if (v14 && (v15 & 1) != 0) {
        (*(void (**)(void))(*(void *)v14 + 40))();
      }
      long long v11 = *((_OWORD *)v1 + 2);
      uint64_t v7 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v12);
      if (v7)
      {
        uint64_t v8 = *v7;
        *((void *)&v10 + 1) = v8;
      }
      else
      {
        long long v13 = v11;
        re::TypeBuilder::beginListType((uint64_t)&v14, v12, 1, 0x28uLL, 8uLL, &v13);
        re::TypeBuilder::setConstructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MaterialTechniqueData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MaterialTechniqueData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v14, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MaterialTechniqueData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MaterialTechniqueData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v14, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::MaterialTechniqueData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v14, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::MaterialTechniqueData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::MaterialTechniqueData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::MaterialTechniqueData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v14, v9);
      }
      xmmword_26AF95388 = v10;
      re::StringID::destroyString((re::StringID *)v12);
    }
  }
}

void re::IntrospectionInfo<re::DynamicArray<re::MaterialTechniqueGroupData>>::get(re *a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF95060, memory_order_acquire) & 1) == 0)
  {
    a1 = (re *)__cxa_guard_acquire(&qword_26AF95060);
    if (a1)
    {
      re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_26AF953A8);
      qword_26AF953A8 = (uint64_t)&unk_26E7101C8;
      __cxa_guard_release(&qword_26AF95060);
    }
  }
  if ((byte_26AF94E6F & 1) == 0)
  {
    uint64_t v1 = (void *)qword_26AF94F70;
    if (qword_26AF94F70
      || (uint64_t v1 = re::allocInfo_MaterialTechniqueGroupData(a1),
          qword_26AF94F70 = (uint64_t)v1,
          re::initInfo_MaterialTechniqueGroupData((re *)v1, v2),
          (byte_26AF94E6F & 1) == 0))
    {
      byte_26AF94E6F = 1;
      int v3 = *((_DWORD *)v1 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF953A8, 0);
      qword_26AF953B8 = 0x2800000003;
      dword_26AF953C0 = v3;
      word_26AF953C4 = 0;
      *(void *)&xmmword_26AF953C8 = 0;
      *((void *)&xmmword_26AF953C8 + 1) = 0xFFFFFFFFLL;
      qword_26AF953D8 = (uint64_t)v1;
      qword_26AF953E0 = 0;
      qword_26AF953A8 = (uint64_t)&unk_26E7101C8;
      re::IntrospectionRegistry::add(v4, v5);
      re::getPrettyTypeName((re *)&qword_26AF953A8, (const re::IntrospectionBase *)&v14);
      if (v15) {
        int v6 = *(const char **)&v16[7];
      }
      else {
        int v6 = v16;
      }
      if (v14 && (v15 & 1) != 0) {
        (*(void (**)(void))(*(void *)v14 + 40))();
      }
      long long v11 = *((_OWORD *)v1 + 2);
      uint64_t v7 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v12);
      if (v7)
      {
        uint64_t v8 = *v7;
        *((void *)&v10 + 1) = v8;
      }
      else
      {
        long long v13 = v11;
        re::TypeBuilder::beginListType((uint64_t)&v14, v12, 1, 0x28uLL, 8uLL, &v13);
        re::TypeBuilder::setConstructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MaterialTechniqueGroupData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MaterialTechniqueGroupData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v14, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MaterialTechniqueGroupData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MaterialTechniqueGroupData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v14, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::MaterialTechniqueGroupData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v14, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::MaterialTechniqueGroupData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::MaterialTechniqueGroupData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::MaterialTechniqueGroupData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v14, v9);
      }
      xmmword_26AF953C8 = v10;
      re::StringID::destroyString((re::StringID *)v12);
    }
  }
}

void re::IntrospectionInfo<re::DynamicArray<re::DebugMapping>>::get(re *a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF95068, memory_order_acquire) & 1) == 0)
  {
    a1 = (re *)__cxa_guard_acquire(&qword_26AF95068);
    if (a1)
    {
      re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_26AF953E8);
      qword_26AF953E8 = (uint64_t)&unk_26E710260;
      __cxa_guard_release(&qword_26AF95068);
    }
  }
  if ((byte_26AF94E70 & 1) == 0)
  {
    uint64_t v1 = (void *)qword_26AF94EE0;
    if (qword_26AF94EE0
      || (uint64_t v1 = re::allocInfo_DebugMapping(a1),
          qword_26AF94EE0 = (uint64_t)v1,
          re::initInfo_DebugMapping((re *)v1, v2),
          (byte_26AF94E70 & 1) == 0))
    {
      byte_26AF94E70 = 1;
      int v3 = *((_DWORD *)v1 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF953E8, 0);
      qword_26AF953F8 = 0x2800000003;
      dword_26AF95400 = v3;
      word_26AF95404 = 0;
      *(void *)&xmmword_26AF95408 = 0;
      *((void *)&xmmword_26AF95408 + 1) = 0xFFFFFFFFLL;
      qword_26AF95418 = (uint64_t)v1;
      qword_26AF95420 = 0;
      qword_26AF953E8 = (uint64_t)&unk_26E710260;
      re::IntrospectionRegistry::add(v4, v5);
      re::getPrettyTypeName((re *)&qword_26AF953E8, (const re::IntrospectionBase *)&v14);
      if (v15) {
        int v6 = *(const char **)&v16[7];
      }
      else {
        int v6 = v16;
      }
      if (v14 && (v15 & 1) != 0) {
        (*(void (**)(void))(*(void *)v14 + 40))();
      }
      long long v11 = *((_OWORD *)v1 + 2);
      uint64_t v7 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v12);
      if (v7)
      {
        uint64_t v8 = *v7;
        *((void *)&v10 + 1) = v8;
      }
      else
      {
        long long v13 = v11;
        re::TypeBuilder::beginListType((uint64_t)&v14, v12, 1, 0x28uLL, 8uLL, &v13);
        re::TypeBuilder::setConstructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::DebugMapping>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::DebugMapping>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v14, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::DebugMapping>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::DebugMapping>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v14, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::DebugMapping>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v14, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::DebugMapping>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::DebugMapping>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::DebugMapping>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v14, v9);
      }
      xmmword_26AF95408 = v10;
      re::StringID::destroyString((re::StringID *)v12);
    }
  }
}

void re::IntrospectionInfo<re::HashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get(uint64_t a1, const re::IntrospectionBase *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF95070, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF95070))
  {
    re::IntrospectionHashTableBase::IntrospectionHashTableBase((re::IntrospectionHashTableBase *)&qword_26AF95750);
    qword_26AF95750 = (uint64_t)&unk_26E7102F8;
    __cxa_guard_release(&qword_26AF95070);
  }
  if ((byte_26AF94E71 & 1) == 0)
  {
    double v2 = (re *)re::IntrospectionInfo<re::DynamicString>::get(1, a2);
    uint64_t v3 = (uint64_t)v2;
    int v4 = (void *)qword_26AF94EF8;
    if (!qword_26AF94EF8)
    {
      int v4 = re::allocInfo_OptionalMaterialParameterProperties(v2);
      qword_26AF94EF8 = (uint64_t)v4;
      re::initInfo_OptionalMaterialParameterProperties((re *)v4, v5);
    }
    if ((byte_26AF94E71 & 1) == 0)
    {
      byte_26AF94E71 = 1;
      int v6 = *((_DWORD *)v4 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF95750, 0);
      qword_26AF95760 = 0x3000000007;
      dword_26AF95768 = v6;
      word_26AF9576C = 0;
      *(void *)&xmmword_26AF95770 = 0;
      *((void *)&xmmword_26AF95770 + 1) = 0xFFFFFFFFLL;
      qword_26AF95780 = v3;
      qword_26AF95788 = 0;
      qword_26AF95790 = (uint64_t)v4;
      qword_26AF95798 = 0;
      qword_26AF95750 = (uint64_t)&unk_26E7102F8;
      re::IntrospectionRegistry::add(v7, v8);
      re::getPrettyTypeName((re *)&qword_26AF95750, (const re::IntrospectionBase *)&v25);
      if (v26) {
        uint64_t v9 = v27;
      }
      else {
        uint64_t v9 = (char *)&v26 + 1;
      }
      if (v25 && (v26 & 1) != 0) {
        (*(void (**)(void))(*(void *)v25 + 40))();
      }
      long long v10 = *(_OWORD *)(v3 + 32);
      long long v20 = *((_OWORD *)v4 + 2);
      long long v21 = v10;
      long long v11 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v22);
      if (v11)
      {
        uint64_t v12 = *v11;
        *((void *)&v19 + 1) = v12;
      }
      else
      {
        uint64_t v25 = 0x449AD97C4B77BED4;
        uint64_t v26 = "_CompareFunc";
        long long v13 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, &v25);
        if (v13)
        {
          uint64_t v14 = *v13;
          re::StringID::destroyString((re::StringID *)&v25);
        }
        else
        {
          re::StringID::destroyString((re::StringID *)&v25);
          *(void *)&v30.var0 = 0x449AD97C4B77BED4;
          v30.var1 = "_CompareFunc";
          char v15 = (void *)v25;
          uint64_t v14 = (uint64_t)v26;
          re::StringID::destroyString((re::StringID *)&v30);
        }
        re::TypeInfo::TypeInfo((uint64_t)&v30, (uint64_t)&v26);
        if (!v15
          || (uint64_t v16 = *v31,
              uint64_t v25 = v14,
              uint64_t v26 = v16,
              LODWORD(v27) = -1,
              (long long v17 = (_anonymous_namespace_ *)re::HashTable<re::internal::TypeAttributeKey,re::internal::TypeAttributeData,re::Hash<re::internal::TypeAttributeKey>,re::EqualTo<re::internal::TypeAttributeKey>,true,false>::tryGet(*(void *)&v30.var0 + 768, &v25)) == 0)|| !*(void *)v17)
        {
          long long v29 = v21;
          v28[0] = v15;
          v28[1] = v14;
        }
        long long v23 = v20;
        long long v24 = v21;
        re::TypeBuilder::beginDictionaryType((uint64_t)&v25, v22, 1, 0x30uLL, 8uLL, &v24, &v23);
        re::TypeBuilder::setConstructor((uint64_t)&v25, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v25, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setDictionaryAccessors((uint64_t)&v25, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
        re::TypeBuilder::setDictionaryIterator((uint64_t)&v25, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (BOOL (*)(void *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (const void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v25, v18);
      }
      xmmword_26AF95770 = v19;
      re::StringID::destroyString((re::StringID *)v22);
    }
  }
}

void re::IntrospectionInfo<re::DynamicArray<re::MaterialTechniqueQualityLevelSetData>>::get(re *a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF95078, memory_order_acquire) & 1) == 0)
  {
    a1 = (re *)__cxa_guard_acquire(&qword_26AF95078);
    if (a1)
    {
      re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_26AF95428);
      qword_26AF95428 = (uint64_t)&unk_26E710398;
      __cxa_guard_release(&qword_26AF95078);
    }
  }
  if ((byte_26AF94E72 & 1) == 0)
  {
    uint64_t v1 = (void *)qword_26AF94F88;
    if (qword_26AF94F88
      || (uint64_t v1 = re::allocInfo_MaterialTechniqueQualityLevelSetData(a1),
          qword_26AF94F88 = (uint64_t)v1,
          re::initInfo_MaterialTechniqueQualityLevelSetData((re *)v1, v2),
          (byte_26AF94E72 & 1) == 0))
    {
      byte_26AF94E72 = 1;
      int v3 = *((_DWORD *)v1 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF95428, 0);
      qword_26AF95438 = 0x2800000003;
      dword_26AF95440 = v3;
      word_26AF95444 = 0;
      *(void *)&xmmword_26AF95448 = 0;
      *((void *)&xmmword_26AF95448 + 1) = 0xFFFFFFFFLL;
      qword_26AF95458 = (uint64_t)v1;
      qword_26AF95460 = 0;
      qword_26AF95428 = (uint64_t)&unk_26E710398;
      re::IntrospectionRegistry::add(v4, v5);
      re::getPrettyTypeName((re *)&qword_26AF95428, (const re::IntrospectionBase *)&v14);
      if (v15) {
        int v6 = *(const char **)&v16[7];
      }
      else {
        int v6 = v16;
      }
      if (v14 && (v15 & 1) != 0) {
        (*(void (**)(void))(*(void *)v14 + 40))();
      }
      long long v11 = *((_OWORD *)v1 + 2);
      uint64_t v7 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v12);
      if (v7)
      {
        uint64_t v8 = *v7;
        *((void *)&v10 + 1) = v8;
      }
      else
      {
        long long v13 = v11;
        re::TypeBuilder::beginListType((uint64_t)&v14, v12, 1, 0x28uLL, 8uLL, &v13);
        re::TypeBuilder::setConstructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MaterialTechniqueQualityLevelSetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MaterialTechniqueQualityLevelSetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v14, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MaterialTechniqueQualityLevelSetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MaterialTechniqueQualityLevelSetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v14, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::MaterialTechniqueQualityLevelSetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v14, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::MaterialTechniqueQualityLevelSetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::MaterialTechniqueQualityLevelSetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::MaterialTechniqueQualityLevelSetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v14, v9);
      }
      xmmword_26AF95448 = v10;
      re::StringID::destroyString((re::StringID *)v12);
    }
  }
}

void re::IntrospectionInfo<re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get(uint64_t a1, const re::IntrospectionBase *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF95080, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF95080))
  {
    re::IntrospectionHashTableBase::IntrospectionHashTableBase((re::IntrospectionHashTableBase *)&qword_26AF957A0);
    qword_26AF957A0 = (uint64_t)&unk_26E710430;
    __cxa_guard_release(&qword_26AF95080);
  }
  if ((byte_26AF94E73 & 1) == 0)
  {
    double v2 = re::IntrospectionInfo<re::DynamicString>::get(1, a2);
    int v4 = re::IntrospectionInfo<re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get(1, v3);
    if ((byte_26AF94E73 & 1) == 0)
    {
      uint64_t v5 = (uint64_t)v4;
      byte_26AF94E73 = 1;
      int v6 = *((_DWORD *)v4 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF957A0, 0);
      qword_26AF957B0 = 0x3000000007;
      dword_26AF957B8 = v6;
      word_26AF957BC = 0;
      *(void *)&xmmword_26AF957C0 = 0;
      *((void *)&xmmword_26AF957C0 + 1) = 0xFFFFFFFFLL;
      qword_26AF957D0 = (uint64_t)v2;
      qword_26AF957D8 = 0;
      qword_26AF957E0 = v5;
      qword_26AF957E8 = 0;
      qword_26AF957A0 = (uint64_t)&unk_26E710430;
      re::IntrospectionRegistry::add(v7, v8);
      re::getPrettyTypeName((re *)&qword_26AF957A0, (const re::IntrospectionBase *)&v25);
      if (v26) {
        uint64_t v9 = v27;
      }
      else {
        uint64_t v9 = (char *)&v26 + 1;
      }
      if (v25 && (v26 & 1) != 0) {
        (*(void (**)(void))(*(void *)v25 + 40))();
      }
      long long v10 = v2[2];
      long long v20 = *(_OWORD *)(v5 + 32);
      long long v21 = v10;
      long long v11 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v22);
      if (v11)
      {
        uint64_t v12 = *v11;
        *((void *)&v19 + 1) = v12;
      }
      else
      {
        uint64_t v25 = 0x449AD97C4B77BED4;
        uint64_t v26 = "_CompareFunc";
        long long v13 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, &v25);
        if (v13)
        {
          uint64_t v14 = *v13;
          re::StringID::destroyString((re::StringID *)&v25);
        }
        else
        {
          re::StringID::destroyString((re::StringID *)&v25);
          *(void *)&v30.var0 = 0x449AD97C4B77BED4;
          v30.var1 = "_CompareFunc";
          char v15 = (void *)v25;
          uint64_t v14 = (uint64_t)v26;
          re::StringID::destroyString((re::StringID *)&v30);
        }
        re::TypeInfo::TypeInfo((uint64_t)&v30, (uint64_t)&v26);
        if (!v15
          || (uint64_t v16 = *v31,
              uint64_t v25 = v14,
              uint64_t v26 = v16,
              LODWORD(v27) = -1,
              (long long v17 = (_anonymous_namespace_ *)re::HashTable<re::internal::TypeAttributeKey,re::internal::TypeAttributeData,re::Hash<re::internal::TypeAttributeKey>,re::EqualTo<re::internal::TypeAttributeKey>,true,false>::tryGet(*(void *)&v30.var0 + 768, &v25)) == 0)|| !*(void *)v17)
        {
          long long v29 = v21;
          v28[0] = v15;
          v28[1] = v14;
        }
        long long v23 = v20;
        long long v24 = v21;
        re::TypeBuilder::beginDictionaryType((uint64_t)&v25, v22, 1, 0x30uLL, 8uLL, &v24, &v23);
        re::TypeBuilder::setConstructor((uint64_t)&v25, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v25, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setDictionaryAccessors((uint64_t)&v25, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
        re::TypeBuilder::setDictionaryIterator((uint64_t)&v25, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (BOOL (*)(void *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (const void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v25, v18);
      }
      xmmword_26AF957C0 = v19;
      re::StringID::destroyString((re::StringID *)v22);
    }
  }
}

re::MaterialDefinitionFile *re::internal::defaultConstruct<re::MaterialDefinitionFile>(int a1, int a2, re::MaterialDefinitionFile *this)
{
  return re::MaterialDefinitionFile::MaterialDefinitionFile(this);
}

void re::internal::defaultDestruct<re::MaterialDefinitionFile>(int a1, int a2, re::MaterialDefinitionFile *this)
{
}

uint64_t re::introspect_MaterialDefinitionFile(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"MaterialDefinitionFile", (uint64_t (*)(re::internal *))re::allocInfo_MaterialDefinitionFile, (re::IntrospectionBase *(*)(void))re::initInfo_MaterialDefinitionFile, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::MaterialDefinitionFile>, this);
}

void re::introspect_ShaderStage(re *this, const re::IntrospectionBase *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF94FB8, memory_order_acquire) & 1) == 0)
  {
    long long v24 = (re *)__cxa_guard_acquire(&qword_26AF94FB8);
    if (v24)
    {
      uint64_t v25 = re::introspectionAllocator(v24);
      uint64_t v26 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v25 + 32))(v25, 24, 8);
      *(_DWORD *)uint64_t v26 = 1;
      *((void *)v26 + 1) = 0;
      *((void *)v26 + 2) = "Unknown";
      qword_26AF95150 = (uint64_t)v26;
      uint64_t v27 = re::introspectionAllocator(v26);
      StringID v28 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v27 + 32))(v27, 24, 8);
      *(_DWORD *)StringID v28 = 1;
      *((void *)v28 + 1) = 1;
      *((void *)v28 + 2) = "Vertex";
      qword_26AF95158 = (uint64_t)v28;
      long long v29 = re::introspectionAllocator(v28);
      StringID v30 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v29 + 32))(v29, 24, 8);
      *(_DWORD *)StringID v30 = 1;
      *((void *)v30 + 1) = 2;
      *((void *)v30 + 2) = "Fragment";
      qword_26AF95160 = (uint64_t)v30;
      uint64_t v31 = re::introspectionAllocator(v30);
      uint64_t v32 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v31 + 32))(v31, 24, 8);
      *(_DWORD *)uint64_t v32 = 1;
      *((void *)v32 + 1) = 3;
      *((void *)v32 + 2) = "GeometryModifier";
      qword_26AF95168 = (uint64_t)v32;
      uint64_t v33 = re::introspectionAllocator(v32);
      uint64_t v34 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v33 + 32))(v33, 24, 8);
      *(_DWORD *)uint64_t v34 = 1;
      *(void *)(v34 + 8) = 4;
      *(void *)(v34 + 16) = "SurfaceShader";
      qword_26AF95170 = v34;
      __cxa_guard_release(&qword_26AF94FB8);
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF94FC0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF94FC0))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_26AF95578, "ShaderStage", 1, 1, 1, 1);
    qword_26AF95578 = (uint64_t)&unk_26E715E00;
    qword_26AF955B8 = (uint64_t)&re::introspect_ShaderStage(BOOL)::enumTable;
    dword_26AF95588 = 9;
    __cxa_guard_release(&qword_26AF94FC0);
  }
  if ((byte_26AF94E63 & 1) == 0)
  {
    byte_26AF94E63 = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_26AF95578, a2);
    uint64_t v36 = 0x1F785ABD80A53F2;
    uint64_t v37 = "ShaderStage";
    v40[0] = 0x31CD534126;
    v40[1] = "uint8_t";
    double v2 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v40);
    if (v2)
    {
      uint64_t v3 = *v2;
      re::StringID::destroyString((re::StringID *)v40);
      int v4 = (unsigned int *)qword_26AF955B8;
      v39[1] = v3;
      re::TypeBuilder::beginEnumType((uint64_t)v40, &v36, 1, 1, (uint64_t)v39);
      unint64_t v6 = *v4;
      if (v6)
      {
        for (unint64_t i = 0; i < v6; ++i)
        {
          uint64_t v8 = *(void *)(*((void *)v4 + 1) + 8 * i);
          if (*(_DWORD *)v8 == 1)
          {
            uint64_t v9 = *(char **)(v8 + 16);
            if (v9)
            {
              uint64_t v10 = *v9;
              if (*v9)
              {
                char v11 = v9[1];
                if (v11)
                {
                  uint64_t v12 = (unsigned __int8 *)(v9 + 2);
                  do
                  {
                    uint64_t v10 = 31 * v10 + v11;
                    int v13 = *v12++;
                    char v11 = v13;
                  }
                  while (v13);
                }
              }
            }
            else
            {
              uint64_t v10 = 0;
            }
            uint64_t v14 = *(void *)(v8 + 8);
            *(void *)&v38.var0 = 2 * v10;
            v38.var1 = v9;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v40, v14, &v38);
            re::StringID::destroyString((re::StringID *)&v38);
            unint64_t v6 = *v4;
          }
        }
        if (v6)
        {
          for (unint64_t j = 0; j < v6; ++j)
          {
            uint64_t v16 = *(void *)(*((void *)v4 + 1) + 8 * j);
            if (*(_DWORD *)v16 == 2)
            {
              long long v17 = *(char **)(v16 + 16);
              if (v17)
              {
                uint64_t v18 = *v17;
                if (*v17)
                {
                  char v19 = v17[1];
                  if (v19)
                  {
                    long long v20 = (unsigned __int8 *)(v17 + 2);
                    do
                    {
                      uint64_t v18 = 31 * v18 + v19;
                      int v21 = *v20++;
                      char v19 = v21;
                    }
                    while (v21);
                  }
                }
              }
              else
              {
                uint64_t v18 = 0;
              }
              uint64_t v22 = *(void *)(v16 + 8);
              *(void *)&v38.var0 = 2 * v18;
              v38.var1 = v17;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v40, v22, &v38);
              re::StringID::destroyString((re::StringID *)&v38);
              unint64_t v6 = *v4;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v40, v23);
      xmmword_26AF95598 = (__int128)v38;
      re::StringID::destroyString((re::StringID *)&v36);
    }
    else
    {
      re::StringID::destroyString((re::StringID *)v40);
      re::internal::assertLog((re::internal *)5, v35, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "ShaderStage", v36, v37);
      _os_crash();
      __break(1u);
    }
  }
}

void *re::allocInfo_FunctionLink(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF94FC8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF94FC8))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26879B0B0, "FunctionLink");
    __cxa_guard_release(&qword_26AF94FC8);
  }
  return &unk_26879B0B0;
}

void re::initInfo_FunctionLink(re *this, re::IntrospectionBase *a2)
{
  v35[0] = 0x341C5717FA628024;
  v35[1] = "FunctionLink";
  re::StringID::destroyString((re::StringID *)v35);
  *((_OWORD *)this + 2) = v36;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF94FD0, memory_order_acquire) & 1) == 0)
  {
    int v4 = (re *)__cxa_guard_acquire(&qword_26AF94FD0);
    if (v4)
    {
      uint64_t v5 = (re *)re::introspectionAllocator(v4);
      re::introspect_ShaderStage(v5, v6);
      uint64_t v7 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "stage";
      *(void *)(v7 + 16) = &qword_26AF95578;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 1;
      *(_DWORD *)(v7 + 40) = 0;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF951A8 = v7;
      uint64_t v8 = re::introspectionAllocator((re *)v7);
      uint64_t v10 = re::IntrospectionInfo<re::DynamicString>::get(1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + 8) = "shaderFunctionName";
      *(void *)(v11 + 16) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0x800000002;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + 48) = 0;
      *(void *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF951B0 = v11;
      uint64_t v12 = re::introspectionAllocator((re *)v11);
      uint64_t v14 = re::IntrospectionInfo<re::DynamicString>::get(1, v13);
      uint64_t v15 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 72, 8);
      *(_DWORD *)uint64_t v15 = 1;
      *(void *)(v15 + 8) = "linkedFunctionName";
      *(void *)(v15 + 16) = v14;
      *(void *)(v15 + 24) = 0;
      *(void *)(v15 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0x2800000003;
      *(_DWORD *)(v15 + 40) = 0;
      *(void *)(v15 + 48) = 0;
      *(void *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_26AF951B8 = v15;
      uint64_t v16 = re::introspectionAllocator((re *)v15);
      uint64_t v18 = re::introspect_AssetHandle((re *)1, v17);
      uint64_t v19 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v16 + 32))(v16, 72, 8);
      *(_DWORD *)uint64_t v19 = 1;
      *(void *)(v19 + 8) = "linkedFunctionLibrary";
      *(void *)(v19 + 16) = v18;
      *(void *)(v19 + 24) = 0;
      *(void *)(v19 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0x4800000004;
      *(_DWORD *)(v19 + 40) = 0;
      *(void *)(v19 + 48) = 0;
      *(void *)(v19 + 56) = 0;
      *(_DWORD *)(v19 + 64) = 0;
      qword_26AF951C0 = v19;
      long long v20 = re::introspectionAllocator((re *)v19);
      re::IntrospectionInfo<re::DynamicArray<re::ShaderAPIFlags::Values>>::get((uint64_t)v20, v21);
      uint64_t v22 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v20 + 32))(v20, 72, 8);
      *(_DWORD *)uint64_t v22 = 1;
      *(void *)(v22 + 8) = "linkedShaderAPIs";
      *(void *)(v22 + 16) = &qword_26AF95468;
      *(void *)(v22 + 24) = 0;
      *(void *)(v22 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0x6000000005;
      *(_DWORD *)(v22 + 40) = 0;
      *(void *)(v22 + 48) = 0;
      *(void *)(v22 + 56) = 0;
      *(_DWORD *)(v22 + 64) = 0;
      qword_26AF951C8 = v22;
      uint64_t v23 = re::introspectionAllocator((re *)v22);
      uint64_t v25 = re::IntrospectionInfo<re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get(1, v24);
      uint64_t v26 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v23 + 32))(v23, 72, 8);
      *(_DWORD *)uint64_t v26 = 1;
      *(void *)(v26 + 8) = "functionConstants";
      *(void *)(v26 + 16) = v25;
      *(void *)(v26 + 24) = 0;
      *(void *)(v26 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0x8800000006;
      *(_DWORD *)(v26 + 40) = 0;
      *(void *)(v26 + 48) = 0;
      *(void *)(v26 + 56) = 0;
      *(_DWORD *)(v26 + 64) = 0;
      qword_26AF951D0 = v26;
      uint64_t v27 = re::introspectionAllocator((re *)v26);
      re::IntrospectionInfo<re::HashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get((uint64_t)v27, v28);
      uint64_t v29 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v27 + 32))(v27, 72, 8);
      *(_DWORD *)uint64_t v29 = 1;
      *(void *)(v29 + 8) = "functionConstantDataMap";
      *(void *)(v29 + 16) = &qword_26AF957F0;
      *(void *)(v29 + 24) = 0;
      *(void *)(v29 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0xB800000007;
      *(_DWORD *)(v29 + 40) = 0;
      *(void *)(v29 + 48) = 0;
      *(void *)(v29 + 56) = 0;
      *(_DWORD *)(v29 + 64) = 0;
      qword_26AF951D8 = v29;
      StringID v30 = re::introspectionAllocator((re *)v29);
      uint64_t v32 = re::IntrospectionInfo<re::DynamicArray<unsigned char>>::get(1, v31);
      uint64_t v33 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v30 + 32))(v30, 72, 8);
      *(_DWORD *)uint64_t v33 = 1;
      *(void *)(v33 + 8) = "functionConstantData";
      *(void *)(v33 + 16) = v32;
      *(void *)(v33 + 24) = 0;
      *(void *)(v33 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0xE800000008;
      *(_DWORD *)(v33 + 40) = 0;
      *(void *)(v33 + 48) = 0;
      *(void *)(v33 + 56) = 0;
      *(_DWORD *)(v33 + 64) = 0;
      qword_26AF951E0 = v33;
      __cxa_guard_release(&qword_26AF94FD0);
    }
  }
  *((void *)this + 2) = 0x11000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 8;
  *((void *)this + 8) = &qword_26AF951A8;
  *((void *)this + 9) = re::internal::defaultConstruct<re::FunctionLink>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::FunctionLink>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::FunctionLink>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::FunctionLink>;
  re::IntrospectionRegistry::add(this, v3);
  long long v34 = v36;
}

void re::IntrospectionInfo<re::DynamicArray<re::ShaderAPIFlags::Values>>::get(uint64_t a1, const re::IntrospectionBase *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF95088, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF95088))
  {
    re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_26AF95468);
    qword_26AF95468 = (uint64_t)&unk_26E7104D0;
    __cxa_guard_release(&qword_26AF95088);
  }
  if ((byte_26AF94E74 & 1) == 0)
  {
    double v2 = re::introspect_ShaderAPIFlagsValues((re *)1, a2);
    if ((byte_26AF94E74 & 1) == 0)
    {
      uint64_t v3 = (uint64_t)v2;
      byte_26AF94E74 = 1;
      int v4 = v2[6];
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF95468, 0);
      qword_26AF95478 = 0x2800000003;
      dword_26AF95480 = v4;
      word_26AF95484 = 0;
      *(void *)&xmmword_26AF95488 = 0;
      *((void *)&xmmword_26AF95488 + 1) = 0xFFFFFFFFLL;
      qword_26AF95498 = v3;
      qword_26AF954A0 = 0;
      qword_26AF95468 = (uint64_t)&unk_26E7104D0;
      re::IntrospectionRegistry::add(v5, v6);
      re::getPrettyTypeName((re *)&qword_26AF95468, (const re::IntrospectionBase *)&v15);
      if (v16) {
        uint64_t v7 = *(const char **)&v17[7];
      }
      else {
        uint64_t v7 = v17;
      }
      if (v15 && (v16 & 1) != 0) {
        (*(void (**)(void))(*(void *)v15 + 40))();
      }
      long long v12 = *(_OWORD *)(v3 + 32);
      uint64_t v8 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v13);
      if (v8)
      {
        uint64_t v9 = *v8;
        *((void *)&v11 + 1) = v9;
      }
      else
      {
        long long v14 = v12;
        re::TypeBuilder::beginListType((uint64_t)&v15, v13, 1, 0x28uLL, 8uLL, &v14);
        re::TypeBuilder::setConstructor((uint64_t)&v15, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ShaderAPIFlags::Values>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v15, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ShaderAPIFlags::Values>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v15, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v15, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ShaderAPIFlags::Values>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ShaderAPIFlags::Values>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v15, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::ShaderAPIFlags::Values>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v15, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::ShaderAPIFlags::Values>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::ShaderAPIFlags::Values>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::ShaderAPIFlags::Values>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v15, v10);
      }
      xmmword_26AF95488 = v11;
      re::StringID::destroyString((re::StringID *)v13);
    }
  }
}

void re::IntrospectionInfo<re::HashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get(uint64_t a1, const re::IntrospectionBase *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF95090, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF95090))
  {
    re::IntrospectionHashTableBase::IntrospectionHashTableBase((re::IntrospectionHashTableBase *)&qword_26AF957F0);
    qword_26AF957F0 = (uint64_t)&unk_26E710568;
    __cxa_guard_release(&qword_26AF95090);
  }
  if ((byte_26AF94E75 & 1) == 0)
  {
    double v2 = (re *)re::IntrospectionInfo<re::DynamicString>::get(1, a2);
    uint64_t v3 = (uint64_t)v2;
    int v4 = (void *)qword_26AF94FF0;
    if (!qword_26AF94FF0)
    {
      int v4 = re::allocInfo_ConstantDataEntry(v2);
      qword_26AF94FF0 = (uint64_t)v4;
      re::initInfo_ConstantDataEntry((re *)v4, v5);
    }
    if ((byte_26AF94E75 & 1) == 0)
    {
      byte_26AF94E75 = 1;
      int v6 = *((_DWORD *)v4 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF957F0, 0);
      qword_26AF95800 = 0x3000000007;
      dword_26AF95808 = v6;
      word_26AF9580C = 0;
      *(void *)&xmmword_26AF95810 = 0;
      *((void *)&xmmword_26AF95810 + 1) = 0xFFFFFFFFLL;
      qword_26AF95820 = v3;
      qword_26AF95828 = 0;
      qword_26AF95830 = (uint64_t)v4;
      qword_26AF95838 = 0;
      qword_26AF957F0 = (uint64_t)&unk_26E710568;
      re::IntrospectionRegistry::add(v7, v8);
      re::getPrettyTypeName((re *)&qword_26AF957F0, (const re::IntrospectionBase *)&v25);
      if (v26) {
        uint64_t v9 = v27;
      }
      else {
        uint64_t v9 = (char *)&v26 + 1;
      }
      if (v25 && (v26 & 1) != 0) {
        (*(void (**)(void))(*(void *)v25 + 40))();
      }
      long long v10 = *(_OWORD *)(v3 + 32);
      long long v20 = *((_OWORD *)v4 + 2);
      long long v21 = v10;
      long long v11 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v22);
      if (v11)
      {
        uint64_t v12 = *v11;
        *((void *)&v19 + 1) = v12;
      }
      else
      {
        uint64_t v25 = 0x449AD97C4B77BED4;
        uint64_t v26 = "_CompareFunc";
        int v13 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, &v25);
        if (v13)
        {
          uint64_t v14 = *v13;
          re::StringID::destroyString((re::StringID *)&v25);
        }
        else
        {
          re::StringID::destroyString((re::StringID *)&v25);
          *(void *)&v30.var0 = 0x449AD97C4B77BED4;
          v30.var1 = "_CompareFunc";
          uint64_t v15 = (void *)v25;
          uint64_t v14 = (uint64_t)v26;
          re::StringID::destroyString((re::StringID *)&v30);
        }
        re::TypeInfo::TypeInfo((uint64_t)&v30, (uint64_t)&v26);
        if (!v15
          || (char v16 = *v31,
              uint64_t v25 = v14,
              uint64_t v26 = v16,
              LODWORD(v27) = -1,
              (long long v17 = (_anonymous_namespace_ *)re::HashTable<re::internal::TypeAttributeKey,re::internal::TypeAttributeData,re::Hash<re::internal::TypeAttributeKey>,re::EqualTo<re::internal::TypeAttributeKey>,true,false>::tryGet(*(void *)&v30.var0 + 768, &v25)) == 0)|| !*(void *)v17)
        {
          long long v29 = v21;
          v28[0] = v15;
          v28[1] = v14;
        }
        long long v23 = v20;
        long long v24 = v21;
        re::TypeBuilder::beginDictionaryType((uint64_t)&v25, v22, 1, 0x30uLL, 8uLL, &v24, &v23);
        re::TypeBuilder::setConstructor((uint64_t)&v25, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v25, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setDictionaryAccessors((uint64_t)&v25, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
        re::TypeBuilder::setDictionaryIterator((uint64_t)&v25, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (BOOL (*)(void *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (const void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v25, v18);
      }
      xmmword_26AF95810 = v19;
      re::StringID::destroyString((re::StringID *)v22);
    }
  }
}

double re::internal::defaultConstruct<re::FunctionLink>(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  *(unsigned char *)a3 = 0;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 8) = 0u;
  int v4 = (void *)(a3 + 8);
  uint64_t v5 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v4, 0);
  *(_OWORD *)(v3 + 40) = 0u;
  v3 += 40;
  *(_OWORD *)(v3 + 16) = 0u;
  re::DynamicString::setCapacity((void *)v3, 0);
  *(_OWORD *)(v3 + 116) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_DWORD *)(v3 + 80) = 0;
  *(void *)&double result = 0x7FFFFFFFLL;
  *(void *)(v3 + 1re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0x7FFFFFFFLL;
  *(_OWORD *)(v3 + 144) = 0u;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_DWORD *)(v3 + 176) = 0;
  *(void *)(v3 + 180) = 0x7FFFFFFFLL;
  *(void *)(v3 + 224) = 0;
  *(void *)(v3 + 200) = 0;
  *(void *)(v3 + 208) = 0;
  *(void *)(v3 + 192) = 0;
  *(_DWORD *)(v3 + 216) = 0;
  return result;
}

double re::internal::defaultDestruct<re::FunctionLink>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a3 + 29));
  re::HashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a3 + 23);
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a3 + 17);
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a3 + 12));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 9));
  re::DynamicString::deinit((re::DynamicString *)(a3 + 5));
  return re::DynamicString::deinit((re::DynamicString *)(a3 + 1));
}

double re::internal::defaultConstructV2<re::FunctionLink>(uint64_t a1)
{
  uint64_t v1 = a1;
  *(unsigned char *)a1 = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  double v2 = (void *)(a1 + 8);
  uint64_t v3 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v2, 0);
  *(_OWORD *)(v1 + 40) = 0u;
  v1 += 40;
  *(_OWORD *)(v1 + 16) = 0u;
  re::DynamicString::setCapacity((void *)v1, 0);
  *(_OWORD *)(v1 + 116) = 0u;
  *(_OWORD *)(v1 + 104) = 0u;
  *(_OWORD *)(v1 + 88) = 0u;
  *(_OWORD *)(v1 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_OWORD *)(v1 + 64) = 0u;
  *(_DWORD *)(v1 + 80) = 0;
  *(void *)&double result = 0x7FFFFFFFLL;
  *(void *)(v1 + 1re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0x7FFFFFFFLL;
  *(_OWORD *)(v1 + 144) = 0u;
  *(_OWORD *)(v1 + 160) = 0u;
  *(_DWORD *)(v1 + 176) = 0;
  *(void *)(v1 + 180) = 0x7FFFFFFFLL;
  *(void *)(v1 + 224) = 0;
  *(void *)(v1 + 200) = 0;
  *(void *)(v1 + 208) = 0;
  *(void *)(v1 + 192) = 0;
  *(_DWORD *)(v1 + 216) = 0;
  return result;
}

double re::internal::defaultDestructV2<re::FunctionLink>(uint64_t *a1)
{
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 29));
  re::HashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a1 + 23);
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a1 + 17);
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 12));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 9));
  re::DynamicString::deinit((re::DynamicString *)(a1 + 5));
  return re::DynamicString::deinit((re::DynamicString *)(a1 + 1));
}

void *re::allocInfo_ConstantDataEntry(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF94FE0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF94FE0))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26879B128, "ConstantDataEntry");
    __cxa_guard_release(&qword_26AF94FE0);
  }
  return &unk_26879B128;
}

void re::initInfo_ConstantDataEntry(re *this, re::IntrospectionBase *a2)
{
  v14[0] = 0x2C54D4B20E616F08;
  v14[1] = "ConstantDataEntry";
  re::StringID::destroyString((re::StringID *)v14);
  *((_OWORD *)this + 2) = v15;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF94FE8, memory_order_acquire) & 1) == 0)
  {
    int v4 = (re *)__cxa_guard_acquire(&qword_26AF94FE8);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v7 = re::introspect_size_t((re *)1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + 8) = "dataOffset";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 48) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF950E0 = v8;
      uint64_t v9 = re::introspectionAllocator((re *)v8);
      long long v11 = re::introspect_uint16_t((re *)1, v10);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + 8) = "dataType";
      *(void *)(v12 + 16) = v11;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0x800000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 48) = 0;
      *(void *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF950E8 = v12;
      __cxa_guard_release(&qword_26AF94FE8);
    }
  }
  *((void *)this + 2) = 0x1000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 1;
  *((_DWORD *)this + 14) = 2;
  *((void *)this + 8) = &qword_26AF950E0;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ConstantDataEntry>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ConstantDataEntry>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ConstantDataEntry>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ConstantDataEntry>;
  re::IntrospectionRegistry::add(this, v3);
  long long v13 = v15;
}

void *re::allocInfo_MaterialFile(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF94FF8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF94FF8))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26879B1A0, "MaterialFile");
    __cxa_guard_release(&qword_26AF94FF8);
  }
  return &unk_26879B1A0;
}

void re::initInfo_MaterialFile(re *this, re::IntrospectionBase *a2)
{
  v28[0] = 0x3898C50117566EC6;
  v28[1] = "MaterialFile";
  re::StringID::destroyString((re::StringID *)v28);
  *((_OWORD *)this + 2) = v29;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF95000, memory_order_acquire) & 1) == 0)
  {
    int v4 = (re *)__cxa_guard_acquire(&qword_26AF95000);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v7 = re::IntrospectionInfo<re::DynamicString>::get(1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + 8) = "name";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 48) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF95178 = v8;
      uint64_t v9 = re::introspectionAllocator((re *)v8);
      long long v11 = re::introspect_AssetHandle((re *)1, v10);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + 8) = "materialDefinition";
      *(void *)(v12 + 16) = v11;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0x2000000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 48) = 0;
      *(void *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF95180 = v12;
      long long v13 = (re *)re::introspectionAllocator((re *)v12);
      uint64_t v14 = v13;
      long long v15 = (re *)qword_26AF94FA0;
      if (!qword_26AF94FA0)
      {
        long long v15 = (re *)re::allocInfo_MaterialParameterData(v13);
        qword_26AF94FA0 = (uint64_t)v15;
        re::initInfo_MaterialParameterData(v15, v16);
      }
      uint64_t v17 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v14 + 32))(v14, 72, 8);
      *(_DWORD *)uint64_t v17 = 1;
      *(void *)(v17 + 8) = "parameters";
      *(void *)(v17 + 16) = v15;
      *(void *)(v17 + 24) = 0;
      *(void *)(v17 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0x3800000003;
      *(_DWORD *)(v17 + 40) = 0;
      *(void *)(v17 + 48) = 0;
      *(void *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_26AF95188 = v17;
      uint64_t v18 = re::introspectionAllocator((re *)v17);
      long long v20 = re::IntrospectionInfo<re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get(1, v19);
      uint64_t v21 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v18 + 32))(v18, 72, 8);
      *(_DWORD *)uint64_t v21 = 1;
      *(void *)(v21 + 8) = "functionConstants";
      *(void *)(v21 + 16) = v20;
      *(void *)(v21 + 24) = 0;
      *(void *)(v21 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0x12800000004;
      *(_DWORD *)(v21 + 40) = 0;
      *(void *)(v21 + 48) = 0;
      *(void *)(v21 + 56) = 0;
      *(_DWORD *)(v21 + 64) = 0;
      qword_26AF95190 = v21;
      uint64_t v22 = re::introspectionAllocator((re *)v21);
      uint64_t v23 = re::introspect_MaterialRenderFlags((re::IntrospectionBase **)1);
      uint64_t v24 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v22 + 32))(v22, 72, 8);
      *(_DWORD *)uint64_t v24 = 1;
      *(void *)(v24 + 8) = "renderFlags";
      *(void *)(v24 + 16) = v23;
      *(void *)(v24 + 24) = 0;
      *(void *)(v24 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0x15800000005;
      *(_DWORD *)(v24 + 40) = 0;
      *(void *)(v24 + 48) = 0;
      *(void *)(v24 + 56) = 0;
      *(_DWORD *)(v24 + 64) = 0;
      qword_26AF95198 = v24;
      uint64_t v25 = (re *)re::introspectionAllocator((re *)v24);
      re::IntrospectionInfo<re::DynamicArray<re::FunctionLink>>::get(v25);
      uint64_t v26 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v25 + 32))(v25, 72, 8);
      *(_DWORD *)uint64_t v26 = 1;
      *(void *)(v26 + 8) = "functionLinks";
      *(void *)(v26 + 16) = &qword_26AF954A8;
      *(void *)(v26 + 24) = 0;
      *(void *)(v26 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0x17000000006;
      *(_DWORD *)(v26 + 40) = 0;
      *(void *)(v26 + 48) = 0;
      *(void *)(v26 + 56) = 0;
      *(_DWORD *)(v26 + 64) = 0;
      qword_26AF951A0 = v26;
      __cxa_guard_release(&qword_26AF95000);
    }
  }
  *((void *)this + 2) = 0x19800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 6;
  *((void *)this + 8) = &qword_26AF95178;
  *((void *)this + 9) = re::internal::defaultConstruct<re::MaterialFile>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::MaterialFile>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::MaterialFile>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::MaterialFile>;
  re::IntrospectionRegistry::add(this, v3);
  long long v27 = v29;
}

void re::IntrospectionInfo<re::DynamicArray<re::FunctionLink>>::get(re *a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF95098, memory_order_acquire) & 1) == 0)
  {
    a1 = (re *)__cxa_guard_acquire(&qword_26AF95098);
    if (a1)
    {
      re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_26AF954A8);
      qword_26AF954A8 = (uint64_t)&unk_26E710608;
      __cxa_guard_release(&qword_26AF95098);
    }
  }
  if ((byte_26AF94E76 & 1) == 0)
  {
    uint64_t v1 = (void *)qword_26AF94FD8;
    if (qword_26AF94FD8
      || (uint64_t v1 = re::allocInfo_FunctionLink(a1),
          qword_26AF94FD8 = (uint64_t)v1,
          re::initInfo_FunctionLink((re *)v1, v2),
          (byte_26AF94E76 & 1) == 0))
    {
      byte_26AF94E76 = 1;
      int v3 = *((_DWORD *)v1 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF954A8, 0);
      qword_26AF954B8 = 0x2800000003;
      dword_26AF954C0 = v3;
      word_26AF954C4 = 0;
      *(void *)&xmmword_26AF954C8 = 0;
      *((void *)&xmmword_26AF954C8 + 1) = 0xFFFFFFFFLL;
      qword_26AF954D8 = (uint64_t)v1;
      qword_26AF954E0 = 0;
      qword_26AF954A8 = (uint64_t)&unk_26E710608;
      re::IntrospectionRegistry::add(v4, v5);
      re::getPrettyTypeName((re *)&qword_26AF954A8, (const re::IntrospectionBase *)&v14);
      if (v15) {
        int v6 = *(const char **)&v16[7];
      }
      else {
        int v6 = v16;
      }
      if (v14 && (v15 & 1) != 0) {
        (*(void (**)(void))(*(void *)v14 + 40))();
      }
      long long v11 = *((_OWORD *)v1 + 2);
      uint64_t v7 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v12);
      if (v7)
      {
        uint64_t v8 = *v7;
        *((void *)&v10 + 1) = v8;
      }
      else
      {
        long long v13 = v11;
        re::TypeBuilder::beginListType((uint64_t)&v14, v12, 1, 0x28uLL, 8uLL, &v13);
        re::TypeBuilder::setConstructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::FunctionLink>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::FunctionLink>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v14, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::FunctionLink>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::FunctionLink>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v14, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::FunctionLink>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v14, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::FunctionLink>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::FunctionLink>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::FunctionLink>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v14, v9);
      }
      xmmword_26AF954C8 = v10;
      re::StringID::destroyString((re::StringID *)v12);
    }
  }
}

double re::internal::defaultConstruct<re::MaterialFile>(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  re::DynamicString::setCapacity((void *)a3, 0);
  *(_OWORD *)(a3 + 76) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0u;
  *(void *)(a3 + 92) = 0x7FFFFFFFLL;
  *(_OWORD *)(a3 + 104) = 0u;
  *(_OWORD *)(a3 + 120) = 0u;
  *(_DWORD *)(a3 + 136) = 0;
  *(void *)(a3 + 140) = 0x7FFFFFFFLL;
  *(_OWORD *)(a3 + 152) = 0u;
  *(_OWORD *)(a3 + 168) = 0u;
  *(_DWORD *)(a3 + 184) = 0;
  *(void *)(a3 + 188) = 0x7FFFFFFFLL;
  *(_OWORD *)(a3 + 200) = 0u;
  *(_OWORD *)(a3 + 216) = 0u;
  *(_DWORD *)(a3 + 2re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0;
  *(void *)(a3 + 236) = 0x7FFFFFFFLL;
  *(_OWORD *)(a3 + 248) = 0u;
  *(_OWORD *)(a3 + 264) = 0u;
  double result = 0.0;
  *(_DWORD *)(a3 + 280) = 0;
  *(void *)(a3 + 284) = 0x7FFFFFFFLL;
  *(_OWORD *)(a3 + 296) = 0u;
  *(_OWORD *)(a3 + 312) = 0u;
  *(_DWORD *)(a3 + 328) = 0;
  *(void *)(a3 + 3re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0x7FFFFFFFLL;
  *(unsigned char *)(a3 + 344) = 0;
  *(unsigned char *)(a3 + 346) = 0;
  *(unsigned char *)(a3 + 348) = 0;
  *(unsigned char *)(a3 + 350) = 0;
  *(unsigned char *)(a3 + 352) = 0;
  *(unsigned char *)(a3 + 354) = 0;
  *(unsigned char *)(a3 + 356) = 0;
  *(unsigned char *)(a3 + 358) = 0;
  *(unsigned char *)(a3 + 360) = 0;
  *(void *)(a3 + 400) = 0;
  *(void *)(a3 + 376) = 0;
  *(void *)(a3 + 384) = 0;
  *(_DWORD *)(a3 + 392) = 0;
  *(void *)(a3 + 368) = 0;
  return result;
}

double re::internal::defaultDestruct<re::MaterialFile>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  re::DynamicArray<re::FunctionLink>::deinit((uint64_t)(a3 + 46));
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a3 + 37);
  re::HashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a3 + 31);
  re::HashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a3 + 25);
  re::HashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a3 + 19);
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a3 + 13);
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a3 + 7);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 4));
  return re::DynamicString::deinit((re::DynamicString *)a3);
}

double re::internal::defaultConstructV2<re::MaterialFile>(uint64_t a1)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  re::DynamicString::setCapacity((void *)a1, 0);
  *(_OWORD *)(a1 + 76) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0u;
  *(void *)(a1 + 92) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_DWORD *)(a1 + 136) = 0;
  *(void *)(a1 + 140) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_DWORD *)(a1 + 184) = 0;
  *(void *)(a1 + 188) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_DWORD *)(a1 + 2re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0;
  *(void *)(a1 + 236) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  double result = 0.0;
  *(_DWORD *)(a1 + 280) = 0;
  *(void *)(a1 + 284) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_DWORD *)(a1 + 328) = 0;
  *(void *)(a1 + 3re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0x7FFFFFFFLL;
  *(unsigned char *)(a1 + 344) = 0;
  *(unsigned char *)(a1 + 346) = 0;
  *(unsigned char *)(a1 + 348) = 0;
  *(unsigned char *)(a1 + 350) = 0;
  *(unsigned char *)(a1 + 352) = 0;
  *(unsigned char *)(a1 + 354) = 0;
  *(unsigned char *)(a1 + 356) = 0;
  *(unsigned char *)(a1 + 358) = 0;
  *(unsigned char *)(a1 + 360) = 0;
  *(void *)(a1 + 400) = 0;
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  *(_DWORD *)(a1 + 392) = 0;
  *(void *)(a1 + 368) = 0;
  return result;
}

double re::internal::defaultDestructV2<re::MaterialFile>(uint64_t *a1)
{
  re::DynamicArray<re::FunctionLink>::deinit((uint64_t)(a1 + 46));
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a1 + 37);
  re::HashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a1 + 31);
  re::HashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a1 + 25);
  re::HashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a1 + 19);
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a1 + 13);
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a1 + 7);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 4));
  return re::DynamicString::deinit((re::DynamicString *)a1);
}

uint64_t re::introspect_MaterialFile(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"MaterialFile", (uint64_t (*)(re::internal *))re::allocInfo_MaterialFile, (re::IntrospectionBase *(*)(void))re::initInfo_MaterialFile, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::MaterialFile>, this);
}

void *re::IntrospectionOptional<re::mtl::SamplerAddressMode>::~IntrospectionOptional(void *a1)
{
  *a1 = &unk_26E6CB2D8;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionOptional<re::mtl::SamplerAddressMode>::~IntrospectionOptional(void *a1)
{
  *a1 = &unk_26E6CB2D8;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionOptional<re::mtl::SamplerAddressMode>::construct(uint64_t a1, unsigned char *a2)
{
  *a2 = 0;
}

uint64_t re::IntrospectionOptional<re::mtl::SamplerAddressMode>::hasValue(uint64_t a1, unsigned __int8 *a2)
{
  return *a2;
}

void re::IntrospectionOptional<re::mtl::SamplerAddressMode>::setHasValue(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    if (!*(unsigned char *)a2) {
      *(unsigned char *)a2 = 1;
    }
    *(_DWORD *)(a2 + 4) = 0;
  }
  else if (*(unsigned char *)a2)
  {
    *(unsigned char *)a2 = 0;
  }
}

uint64_t re::IntrospectionOptional<re::mtl::SamplerAddressMode>::value(uint64_t a1, uint64_t a2)
{
  return a2 + 4;
}

{
  return a2 + 4;
}

unsigned __int8 *re::TypeBuilderHelper::registerOptional<re::mtl::SamplerAddressMode>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(unsigned __int8 *a1)
{
  int v2 = *a1;
  double result = a1 + 4;
  if (!v2) {
    return 0;
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerOptional<re::mtl::SamplerAddressMode>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke(uint64_t result, int *a2)
{
  if (a2)
  {
    int v2 = *a2;
    if (!*(unsigned char *)result) {
      *(unsigned char *)double result = 1;
    }
    *(_DWORD *)(result + 4) = v2;
  }
  else if (*(unsigned char *)result)
  {
    *(unsigned char *)double result = 0;
  }
  return result;
}

void *re::IntrospectionOptional<re::mtl::SamplerBorderColor>::~IntrospectionOptional(void *a1)
{
  *a1 = &unk_26E6CB2D8;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionOptional<re::mtl::SamplerBorderColor>::~IntrospectionOptional(void *a1)
{
  *a1 = &unk_26E6CB2D8;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionOptional<re::mtl::SamplerBorderColor>::construct(uint64_t a1, unsigned char *a2)
{
  *a2 = 0;
}

uint64_t re::IntrospectionOptional<re::mtl::SamplerBorderColor>::hasValue(uint64_t a1, unsigned __int8 *a2)
{
  return *a2;
}

void re::IntrospectionOptional<re::mtl::SamplerBorderColor>::setHasValue(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    if (!*(unsigned char *)a2) {
      *(unsigned char *)a2 = 1;
    }
    *(_DWORD *)(a2 + 4) = 0;
  }
  else if (*(unsigned char *)a2)
  {
    *(unsigned char *)a2 = 0;
  }
}

uint64_t re::IntrospectionOptional<re::mtl::SamplerBorderColor>::value(uint64_t a1, uint64_t a2)
{
  return a2 + 4;
}

{
  return a2 + 4;
}

unsigned __int8 *re::TypeBuilderHelper::registerOptional<re::mtl::SamplerBorderColor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(unsigned __int8 *a1)
{
  int v2 = *a1;
  double result = a1 + 4;
  if (!v2) {
    return 0;
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerOptional<re::mtl::SamplerBorderColor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke(uint64_t result, int *a2)
{
  if (a2)
  {
    int v2 = *a2;
    if (!*(unsigned char *)result) {
      *(unsigned char *)double result = 1;
    }
    *(_DWORD *)(result + 4) = v2;
  }
  else if (*(unsigned char *)result)
  {
    *(unsigned char *)double result = 0;
  }
  return result;
}

void *re::IntrospectionOptional<re::mtl::SamplerMinMagFilter>::~IntrospectionOptional(void *a1)
{
  *a1 = &unk_26E6CB2D8;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionOptional<re::mtl::SamplerMinMagFilter>::~IntrospectionOptional(void *a1)
{
  *a1 = &unk_26E6CB2D8;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionOptional<re::mtl::SamplerMinMagFilter>::construct(uint64_t a1, unsigned char *a2)
{
  *a2 = 0;
}

uint64_t re::IntrospectionOptional<re::mtl::SamplerMinMagFilter>::hasValue(uint64_t a1, unsigned __int8 *a2)
{
  return *a2;
}

void re::IntrospectionOptional<re::mtl::SamplerMinMagFilter>::setHasValue(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    if (!*(unsigned char *)a2) {
      *(unsigned char *)a2 = 1;
    }
    *(_DWORD *)(a2 + 4) = 0;
  }
  else if (*(unsigned char *)a2)
  {
    *(unsigned char *)a2 = 0;
  }
}

uint64_t re::IntrospectionOptional<re::mtl::SamplerMinMagFilter>::value(uint64_t a1, uint64_t a2)
{
  return a2 + 4;
}

{
  return a2 + 4;
}

unsigned __int8 *re::TypeBuilderHelper::registerOptional<re::mtl::SamplerMinMagFilter>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(unsigned __int8 *a1)
{
  int v2 = *a1;
  double result = a1 + 4;
  if (!v2) {
    return 0;
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerOptional<re::mtl::SamplerMinMagFilter>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke(uint64_t result, int *a2)
{
  if (a2)
  {
    int v2 = *a2;
    if (!*(unsigned char *)result) {
      *(unsigned char *)double result = 1;
    }
    *(_DWORD *)(result + 4) = v2;
  }
  else if (*(unsigned char *)result)
  {
    *(unsigned char *)double result = 0;
  }
  return result;
}

void *re::IntrospectionOptional<re::mtl::SamplerMipFilter>::~IntrospectionOptional(void *a1)
{
  *a1 = &unk_26E6CB2D8;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionOptional<re::mtl::SamplerMipFilter>::~IntrospectionOptional(void *a1)
{
  *a1 = &unk_26E6CB2D8;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionOptional<re::mtl::SamplerMipFilter>::construct(uint64_t a1, unsigned char *a2)
{
  *a2 = 0;
}

uint64_t re::IntrospectionOptional<re::mtl::SamplerMipFilter>::hasValue(uint64_t a1, unsigned __int8 *a2)
{
  return *a2;
}

void re::IntrospectionOptional<re::mtl::SamplerMipFilter>::setHasValue(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    if (!*(unsigned char *)a2) {
      *(unsigned char *)a2 = 1;
    }
    *(_DWORD *)(a2 + 4) = 0;
  }
  else if (*(unsigned char *)a2)
  {
    *(unsigned char *)a2 = 0;
  }
}

uint64_t re::IntrospectionOptional<re::mtl::SamplerMipFilter>::value(uint64_t a1, uint64_t a2)
{
  return a2 + 4;
}

{
  return a2 + 4;
}

unsigned __int8 *re::TypeBuilderHelper::registerOptional<re::mtl::SamplerMipFilter>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(unsigned __int8 *a1)
{
  int v2 = *a1;
  double result = a1 + 4;
  if (!v2) {
    return 0;
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerOptional<re::mtl::SamplerMipFilter>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke(uint64_t result, int *a2)
{
  if (a2)
  {
    int v2 = *a2;
    if (!*(unsigned char *)result) {
      *(unsigned char *)double result = 1;
    }
    *(_DWORD *)(result + 4) = v2;
  }
  else if (*(unsigned char *)result)
  {
    *(unsigned char *)double result = 0;
  }
  return result;
}

void *re::IntrospectionOptional<re::mtl::SamplerCompareFunction>::~IntrospectionOptional(void *a1)
{
  *a1 = &unk_26E6CB2D8;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionOptional<re::mtl::SamplerCompareFunction>::~IntrospectionOptional(void *a1)
{
  *a1 = &unk_26E6CB2D8;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionOptional<re::mtl::SamplerCompareFunction>::construct(uint64_t a1, unsigned char *a2)
{
  *a2 = 0;
}

uint64_t re::IntrospectionOptional<re::mtl::SamplerCompareFunction>::hasValue(uint64_t a1, unsigned __int8 *a2)
{
  return *a2;
}

void re::IntrospectionOptional<re::mtl::SamplerCompareFunction>::setHasValue(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    if (!*(unsigned char *)a2) {
      *(unsigned char *)a2 = 1;
    }
    *(_DWORD *)(a2 + 4) = 0;
  }
  else if (*(unsigned char *)a2)
  {
    *(unsigned char *)a2 = 0;
  }
}

uint64_t re::IntrospectionOptional<re::mtl::SamplerCompareFunction>::value(uint64_t a1, uint64_t a2)
{
  return a2 + 4;
}

{
  return a2 + 4;
}

unsigned __int8 *re::TypeBuilderHelper::registerOptional<re::mtl::SamplerCompareFunction>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(unsigned __int8 *a1)
{
  int v2 = *a1;
  double result = a1 + 4;
  if (!v2) {
    return 0;
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerOptional<re::mtl::SamplerCompareFunction>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke(uint64_t result, int *a2)
{
  if (a2)
  {
    int v2 = *a2;
    if (!*(unsigned char *)result) {
      *(unsigned char *)double result = 1;
    }
    *(_DWORD *)(result + 4) = v2;
  }
  else if (*(unsigned char *)result)
  {
    *(unsigned char *)double result = 0;
  }
  return result;
}

void *re::IntrospectionHashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::~IntrospectionHashTable(void *a1)
{
  *a1 = &unk_26E6C0400;
  uint64_t v2 = (uint64_t)(a1 + 6);
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 8));
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionHashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::~IntrospectionHashTable(void *a1)
{
  *a1 = &unk_26E6C0400;
  uint64_t v2 = (uint64_t)(a1 + 6);
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 8));
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

double re::IntrospectionHashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::construct(uint64_t a1, uint64_t a2)
{
  double result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 36) = 0x7FFFFFFF;
  return result;
}

double re::IntrospectionHashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::destroy(uint64_t a1, uint64_t *a2)
{
  return re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a2);
}

void re::IntrospectionHashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a2);
  if (a4 <= 3) {
    signed int v7 = 3;
  }
  else {
    signed int v7 = a4;
  }
  re::HashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init((uint64_t)a2, a3, v7);
}

void re::IntrospectionHashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(uint64_t a1, uint64_t a2, unsigned int a3)
{
}

uint64_t re::IntrospectionHashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::size(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 28);
}

void re::IntrospectionHashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(uint64_t a1, uint64_t a2)
{
}

re::IntrospectionBase *re::IntrospectionHashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addElement(uint64_t a1, re *a2, int a3, uint64_t a4, re::DynamicString *a5)
{
  int v10 = 0;
  uint64_t v8 = (re::IntrospectionBase *)re::HashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addOrReplace(a4, a5, &v10);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 64), v8);
  return v8;
}

uint64_t re::IntrospectionHashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::iterate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(unsigned int *)(a2 + 32);
  if (v5)
  {
    uint64_t v6 = 0;
    signed int v7 = (int *)(*(void *)(a2 + 16) + 8);
    while (1)
    {
      int v8 = *v7;
      v7 += 14;
      if (v8 < 0) {
        break;
      }
      if (v5 == ++v6)
      {
        LODWORD(v6) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v6) = 0;
  }
  if (v5 == v6) {
    return 1;
  }
  uint64_t v10 = v6;
  do
  {
    uint64_t result = std::function<BOOL ()(void const*,void *)>::operator()(a3, *(void *)(a2 + 16) + 56 * v10 + 16, *(void *)(a2 + 16) + 56 * v10 + 48);
    if (!result) {
      break;
    }
    int v11 = *(_DWORD *)(a2 + 32) <= (v6 + 1) ? v6 + 1 : *(_DWORD *)(a2 + 32);
    while (1)
    {
      uint64_t v10 = (v6 + 1);
      if (v11 - 1 == v6) {
        break;
      }
      LODWORD(v6) = v6 + 1;
      int v12 = v10;
      if ((*(_DWORD *)(*(void *)(a2 + 16) + 56 * v10 + 8) & 0x80000000) != 0) {
        goto LABEL_18;
      }
    }
    int v12 = v11;
LABEL_18:
    LODWORD(v6) = v12;
  }
  while (v5 != v12);
  return result;
}

double re::IntrospectionHashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::destroyKey(int a1, re::DynamicString *this)
{
  return re::DynamicString::deinit(this);
}

uint64_t re::HashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addOrReplace(uint64_t a1, re::DynamicString *a2, _DWORD *a3)
{
  unint64_t v6 = re::Hash<re::DynamicString>::operator()((uint64_t)&v14, (uint64_t)a2);
  unint64_t v7 = v6;
  if (!*(void *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  unint64_t v8 = v6 % *(unsigned int *)(a1 + 24);
  uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v8);
  if (v9 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v11 = re::HashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v12 = *(void *)(a1 + 16) + 56 * v11;
    return v12 + 48;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  while (!re::DynamicString::operator==(v10 + 56 * v9 + 16, (uint64_t)a2))
  {
    uint64_t v9 = *(_DWORD *)(v10 + 56 * v9 + 8) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  *(_DWORD *)(v10 + 56 * v9 + 48) = *a3;
  ++*(_DWORD *)(a1 + 40);
  uint64_t v12 = *(void *)(a1 + 16) + 56 * v9;
  return v12 + 48;
}

void re::TypeBuilderHelper::registerHashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
  re::HashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init(a1, a3, 3);
}

double re::TypeBuilderHelper::registerHashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t *a1)
{
  re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a1);
  return re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a1);
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

void re::TypeBuilderHelper::registerHashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (*a1 == a3)
  {
    re::HashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear((uint64_t)a1);
  }
  else
  {
    re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a1);
    re::HashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init((uint64_t)a1, a3, 3);
  }
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke(uint64_t a1, void **a2, re::Allocator *a3, re::DynamicString *a4)
{
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  Instance = re::TypeInfo::createInstance((re::TypeInfo *)v11, a3, 0);
  uint64_t v9 = re::HashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addOrReplace(a1, a4, Instance);
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  re::TypeInfo::releaseInstance((re::TypeInfo *)v11, Instance, a3, 0);
  return v9;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = re::Hash<re::DynamicString>::operator()((uint64_t)&v8, a2);
  if (!*(void *)a1) {
    return 0;
  }
  uint64_t v5 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * (v4 % *(unsigned int *)(a1 + 24)));
  if (v5 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 16);
  while (!re::DynamicString::operator==(v6 + 56 * v5 + 16, a2))
  {
    uint64_t v5 = *(_DWORD *)(v6 + 56 * v5 + 8) & 0x7FFFFFFF;
    if (v5 == 0x7FFFFFFF) {
      return 0;
    }
  }
  return v6 + 56 * v5 + 48;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 40, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 40);
  *(unsigned char *)(result + 16) = 0;
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (*((_DWORD *)a1 + 2) == *(_DWORD *)(*a1 + 40))
  {
    uint64_t v3 = *(unsigned int *)(v2 + 32);
    if (*((unsigned char *)a1 + 16))
    {
      int v4 = *((_DWORD *)a1 + 8);
      if (v4 == v3)
      {
        LODWORD(v5) = *(_DWORD *)(v2 + 32);
      }
      else
      {
        uint64_t v8 = a1[3];
        unsigned int v9 = *(_DWORD *)(v8 + 32);
        unsigned int v10 = v4 + 1;
        do
        {
          LODWORD(v5) = v10;
          *((_DWORD *)a1 + 8) = v10;
          if (v10 >= v9) {
            break;
          }
          int v11 = *(_DWORD *)(*(void *)(v8 + 16) + 56 * v10++ + 8);
        }
        while ((v11 & 0x80000000) == 0);
      }
    }
    else
    {
      uint64_t v5 = 0;
      if (v3)
      {
        uint64_t v6 = (int *)(*(void *)(v2 + 16) + 8);
        while (1)
        {
          int v7 = *v6;
          v6 += 14;
          if (v7 < 0) {
            break;
          }
          if (v3 == ++v5)
          {
            LODWORD(v5) = *(_DWORD *)(v2 + 32);
            break;
          }
        }
      }
      *((unsigned char *)a1 + 16) = 1;
      a1[3] = v2;
      a1[4] = v5;
      LODWORD(v3) = *(_DWORD *)(v2 + 32);
    }
    return v5 != v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 583);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(void *)a1 + 40)) {
    return *(void *)(*(void *)(a1 + 24) + 16) + 56 * *(unsigned int *)(a1 + 32) + 16;
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 598);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(void *)a1 + 40)) {
    return *(void *)(*(void *)(a1 + 24) + 16) + 56 * *(unsigned int *)(a1 + 32) + 48;
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 607);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 40))
  {
    uint64_t v2 = *(uint64_t (**)(uint64_t, _DWORD *))(*(void *)a2 + 40);
    return v2(a2, a1);
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 616);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

void *re::IntrospectionDynamicArray<re::RenderAttachmentState>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::RenderAttachmentState>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionDynamicArray<re::RenderAttachmentState>::construct(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::RenderAttachmentState>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<unsigned long>::deinit(a2);
}

void *re::IntrospectionDynamicArray<re::RenderAttachmentState>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<unsigned long>::deinit(a2);
  *(void *)a2 = a3;
  uint64_t result = re::DynamicArray<re::RenderAttachmentState>::setCapacity((void *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void *re::IntrospectionDynamicArray<re::RenderAttachmentState>::resize(void *result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unsigned int v9 = result;
  if (!*(void *)a4)
  {
    *(void *)a4 = a2;
    uint64_t result = re::DynamicArray<re::RenderAttachmentState>::setCapacity((void *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  unint64_t v10 = *(void *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
    {
      return re::DynamicArray<re::RenderAttachmentState>::resize((void *)a4, a5);
    }
  }
  else
  {
    uint64_t result = re::DynamicArray<re::RenderAttachmentState>::setCapacity((void *)a4, a5);
    for (unint64_t i = a5 - *(void *)(a4 + 16); i; --i)
      uint64_t result = (void *)(*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*v9 + 80))(v9, a2, a3, a4);
  }
  return result;
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::RenderAttachmentState>::addElement(re::Allocator **a1, re *a2, int a3, uint64_t a4)
{
  unint64_t v8 = *(void *)(a4 + 8);
  unint64_t v9 = *(void *)(a4 + 16);
  if (v9 >= v8)
  {
    unint64_t v10 = v9 + 1;
    if (v8 < v9 + 1)
    {
      if (*(void *)a4)
      {
        uint64_t v11 = 2 * v8;
        BOOL v12 = v8 == 0;
        unint64_t v13 = 8;
        if (!v12) {
          unint64_t v13 = v11;
        }
        if (v13 <= v10) {
          unint64_t v14 = v10;
        }
        else {
          unint64_t v14 = v13;
        }
        re::DynamicArray<re::RenderAttachmentState>::setCapacity((void *)a4, v14);
      }
      else
      {
        re::DynamicArray<re::RenderAttachmentState>::setCapacity((void *)a4, v10);
        ++*(_DWORD *)(a4 + 24);
      }
    }
    unint64_t v9 = *(void *)(a4 + 16);
  }
  char v15 = (_OWORD *)(*(void *)(a4 + 32) + 32 * v9);
  *char v15 = xmmword_2343BF250;
  v15[1] = xmmword_2343BF260;
  uint64_t v16 = *(void *)(a4 + 16);
  *(void *)(a4 + 16) = v16 + 1;
  ++*(_DWORD *)(a4 + 24);
  uint64_t v17 = (re::IntrospectionBase *)(*(void *)(a4 + 32) + 32 * v16);
  re::introspectionInitElement(a2, a3, a1[6], v17);
  return v17;
}

uint64_t re::IntrospectionDynamicArray<re::RenderAttachmentState>::size(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::RenderAttachmentState>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 32 * a3;
}

{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 32 * a3;
}

void *re::DynamicArray<re::RenderAttachmentState>::resize(void *result, unint64_t a2)
{
  uint64_t v3 = result;
  unint64_t v4 = result[2];
  if (v4 >= a2)
  {
    if (v4 <= a2) {
      return result;
    }
  }
  else
  {
    if (result[1] < a2)
    {
      uint64_t result = re::DynamicArray<re::RenderAttachmentState>::setCapacity(result, a2);
      unint64_t v4 = v3[2];
    }
    if (v4 < a2)
    {
      uint64_t v5 = v3[4];
      uint64_t v6 = v5 + 32 * v4;
      uint64_t v7 = v5 + 32 * a2 - v6;
      if (v7 >= 1)
      {
        unint64_t v8 = ((unint64_t)v7 >> 5) + 1;
        do
        {
          *(_WORD *)uint64_t v6 = 0;
          *(_OWORD *)(v6 + 4) = xmmword_2343AD2D0;
          *(void *)(v6 + 20) = 5;
          *(_DWORD *)(v6 + 28) = 15;
          --v8;
          v6 += 32;
        }
        while (v8 > 1);
      }
    }
  }
  v3[2] = a2;
  ++*((_DWORD *)v3 + 6);
  return result;
}

void *re::TypeBuilderHelper::registerDynamicArray<re::RenderAttachmentState>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)a1 = a3;
  uint64_t result = re::DynamicArray<re::RenderAttachmentState>::setCapacity((void *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RenderAttachmentState>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::RenderAttachmentState>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  if (*(re::Allocator **)a1 == a3)
  {
    *(void *)(a1 + 16) = 0;
  }
  else
  {
    re::DynamicArray<unsigned long>::deinit(a1);
    *(void *)a1 = a3;
    re::DynamicArray<re::RenderAttachmentState>::setCapacity((void *)a1, a4);
  }
  ++*(_DWORD *)(a1 + 24);
  unint64_t v8 = (_anonymous_namespace_ *)re::DynamicArray<re::RenderAttachmentState>::resize((void *)a1, a4);
  {
    re::TypeRegistry::typeInfo(*(void **)a2, *(void *)(*(void *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    uint64_t v9 = *(void *)(a1 + 16);
    if (v9)
    {
      unint64_t v10 = *(char **)(a1 + 32);
      uint64_t v11 = 32 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 32;
        v11 -= 32;
      }
      while (v11);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RenderAttachmentState>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 32) + 32 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RenderAttachmentState>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RenderAttachmentState>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 24))
  {
    int v3 = a1[3];
    unint64_t v4 = *(void *)(v2 + 16);
    if (v3 < (int)v4) {
      a1[3] = ++v3;
    }
    if (v4 <= v3) {
      return 0;
    }
    else {
      return *(void *)(v2 + 32) + 32 * v3;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RenderAttachmentState>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, result);
  }
  return result;
}

re::MaterialTechniqueData *re::MaterialTechniqueData::MaterialTechniqueData(re::MaterialTechniqueData *this)
{
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  uint64_t v2 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(this, 0);
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 2) = 0u;
  int v3 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((void *)this + 4, 0);
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 7) = 0u;
  unint64_t v4 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((void *)this + 14, 0);
  *((void *)this + 24) = 0;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 9) = 0u;
  uint64_t v5 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((void *)this + 21, 0);
  *((void *)this + 25) = 0xFFFF000100010000;
  *((_WORD *)this + 104) = 1792;
  *((unsigned char *)this + 210) = 4;
  *(_OWORD *)((char *)this + 212) = xmmword_2343AD2D0;
  *(void *)((char *)this + 228) = 5;
  *((_DWORD *)this + 59) = 15;
  *((void *)this + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0;
  *((_DWORD *)this + 70) = 0;
  *(_OWORD *)((char *)this + 264) = 0u;
  *((void *)this + 30) = 0;
  *(void *)((char *)this + 245) = 0;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((void *)this + 40) = 0;
  re::DynamicString::setCapacity((void *)this + 37, 0);
  *(_OWORD *)((char *)this + 328) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *((void *)this + 45) = 0x7FFFFFFF00000000;
  *((_DWORD *)this + 92) = 0;
  *(_OWORD *)((char *)this + 376) = 0u;
  *(_OWORD *)((char *)this + 392) = 0u;
  *((_DWORD *)this + 102) = 0;
  *(void *)((char *)this + 412) = 0x7FFFFFFFLL;
  *((void *)this + 53) = 0;
  *((_OWORD *)this + 27) = 0u;
  *((_DWORD *)this + 112) = 0;
  *(_OWORD *)((char *)this + 456) = 0u;
  *(_OWORD *)((char *)this + 472) = 0u;
  *(_OWORD *)((char *)this + 484) = 0u;
  *(void *)((char *)this + 500) = 0x7FFFFFFFLL;
  *((void *)this + 68) = 0;
  *((void *)this + 66) = 0;
  *((_DWORD *)this + 134) = 0;
  *((_OWORD *)this + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0u;
  *((_WORD *)this + 276) = 0;
  *((_OWORD *)this + 35) = 0u;
  *((_OWORD *)this + 36) = 0u;
  *((_DWORD *)this + 148) = 0;
  *(void *)((char *)this + 596) = 0x7FFFFFFFLL;
  *((_OWORD *)this + 38) = 0u;
  *((_OWORD *)this + 39) = 0u;
  *((_DWORD *)this + 160) = 0;
  *(void *)((char *)this + 644) = 0x7FFFFFFFLL;
  *((_WORD *)this + 328) = 256;
  *((unsigned char *)this + 658) = 0;
  return this;
}

void *re::IntrospectionHashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::~IntrospectionHashTable(void *a1)
{
  *a1 = &unk_26E6C0400;
  uint64_t v2 = (uint64_t)(a1 + 6);
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 8));
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionHashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::~IntrospectionHashTable(void *a1)
{
  *a1 = &unk_26E6C0400;
  uint64_t v2 = (uint64_t)(a1 + 6);
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 8));
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

double re::IntrospectionHashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::construct(uint64_t a1, uint64_t a2)
{
  double result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 36) = 0x7FFFFFFF;
  return result;
}

double re::IntrospectionHashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::destroy(uint64_t a1, uint64_t *a2)
{
  return re::HashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a2);
}

void re::IntrospectionHashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  re::HashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a2);
  if (a4 <= 3) {
    signed int v7 = 3;
  }
  else {
    signed int v7 = a4;
  }
  re::HashTable<re::StringID,re::RigDataTypeClass,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)a2, a3, v7);
}

void re::IntrospectionHashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(uint64_t a1, uint64_t a2, unsigned int a3)
{
}

uint64_t re::IntrospectionHashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::size(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 28);
}

void re::IntrospectionHashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(uint64_t a1, uint64_t a2)
{
}

re::IntrospectionBase *re::IntrospectionHashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addElement(re::Allocator **a1, re *a2, int a3, uint64_t a4, re::DynamicString *a5)
{
  long long v14 = 0u;
  long long v13 = 0u;
  re::DynamicString::setCapacity(&v12, 0);
  DWORD2(v14) = 0;
  unint64_t v10 = (re::IntrospectionBase *)re::HashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addOrReplace(a4, a5, (uint64_t)&v12);
  if (DWORD2(v14) != -1) {
    off_26E70FB78[DWORD2(v14)]((int)&v15, (re::DynamicString *)&v12);
  }
  re::introspectionInitElement(a2, a3, a1[8], v10);
  return v10;
}

uint64_t re::IntrospectionHashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::iterate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(unsigned int *)(a2 + 32);
  if (v5)
  {
    uint64_t v6 = 0;
    signed int v7 = (int *)(*(void *)(a2 + 16) + 8);
    while (1)
    {
      int v8 = *v7;
      v7 += 22;
      if (v8 < 0) {
        break;
      }
      if (v5 == ++v6)
      {
        LODWORD(v6) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v6) = 0;
  }
  if (v5 == v6) {
    return 1;
  }
  uint64_t v10 = v6;
  do
  {
    uint64_t result = std::function<BOOL ()(void const*,void *)>::operator()(a3, *(void *)(a2 + 16) + 88 * v10 + 16, *(void *)(a2 + 16) + 88 * v10 + 48);
    if (!result) {
      break;
    }
    int v11 = *(_DWORD *)(a2 + 32) <= (v6 + 1) ? v6 + 1 : *(_DWORD *)(a2 + 32);
    while (1)
    {
      uint64_t v10 = (v6 + 1);
      if (v11 - 1 == v6) {
        break;
      }
      LODWORD(v6) = v6 + 1;
      int v12 = v10;
      if ((*(_DWORD *)(*(void *)(a2 + 16) + 88 * v10 + 8) & 0x80000000) != 0) {
        goto LABEL_18;
      }
    }
    int v12 = v11;
LABEL_18:
    LODWORD(v6) = v12;
  }
  while (v5 != v12);
  return result;
}

double re::IntrospectionHashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::destroyKey(int a1, re::DynamicString *this)
{
  return re::DynamicString::deinit(this);
}

uint64_t re::HashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addOrReplace(uint64_t a1, re::DynamicString *a2, uint64_t a3)
{
  unint64_t v6 = re::Hash<re::DynamicString>::operator()((uint64_t)&v14, (uint64_t)a2);
  unint64_t v7 = v6;
  if (!*(void *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  unint64_t v8 = v6 % *(unsigned int *)(a1 + 24);
  uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v8);
  if (v9 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v11 = re::HashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v12 = *(void *)(a1 + 16) + 88 * v11;
    return v12 + 48;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  while (!re::DynamicString::operator==(v10 + 88 * v9 + 16, (uint64_t)a2))
  {
    uint64_t v9 = *(_DWORD *)(v10 + 88 * v9 + 8) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  std::__variant_detail::__assignment<std::__variant_detail::__traits<re::DynamicString,re::AssetHandle>>::__generic_assign[abi:nn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<re::DynamicString,re::AssetHandle>,(std::__variant_detail::_Trait)1>>(v10 + 88 * v9 + 48, a3);
  ++*(_DWORD *)(a1 + 40);
  uint64_t v12 = *(void *)(a1 + 16) + 88 * v9;
  return v12 + 48;
}

void re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
  re::HashTable<re::StringID,re::RigDataTypeClass,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(a1, a3, 3);
}

double re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t *a1)
{
  re::HashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a1);
  return re::HashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a1);
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

void re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (*a1 == a3)
  {
    re::HashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear((uint64_t)a1);
  }
  else
  {
    re::HashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a1);
    re::HashTable<re::StringID,re::RigDataTypeClass,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)a1, a3, 3);
  }
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke(uint64_t a1, void **a2, re::Allocator *a3, re::DynamicString *a4)
{
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  Instance = re::TypeInfo::createInstance((re::TypeInfo *)v11, a3, 0);
  uint64_t v9 = re::HashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addOrReplace(a1, a4, (uint64_t)Instance);
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  re::TypeInfo::releaseInstance((re::TypeInfo *)v11, Instance, a3, 0);
  return v9;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = re::Hash<re::DynamicString>::operator()((uint64_t)&v8, a2);
  if (!*(void *)a1) {
    return 0;
  }
  uint64_t v5 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * (v4 % *(unsigned int *)(a1 + 24)));
  if (v5 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 16);
  while (!re::DynamicString::operator==(v6 + 88 * v5 + 16, a2))
  {
    uint64_t v5 = *(_DWORD *)(v6 + 88 * v5 + 8) & 0x7FFFFFFF;
    if (v5 == 0x7FFFFFFF) {
      return 0;
    }
  }
  return v6 + 88 * v5 + 48;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 40, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 40);
  *(unsigned char *)(result + 16) = 0;
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (*((_DWORD *)a1 + 2) == *(_DWORD *)(*a1 + 40))
  {
    uint64_t v3 = *(unsigned int *)(v2 + 32);
    if (*((unsigned char *)a1 + 16))
    {
      int v4 = *((_DWORD *)a1 + 8);
      if (v4 == v3)
      {
        LODWORD(v5) = *(_DWORD *)(v2 + 32);
      }
      else
      {
        uint64_t v8 = a1[3];
        unsigned int v9 = *(_DWORD *)(v8 + 32);
        unsigned int v10 = v4 + 1;
        do
        {
          LODWORD(v5) = v10;
          *((_DWORD *)a1 + 8) = v10;
          if (v10 >= v9) {
            break;
          }
          int v11 = *(_DWORD *)(*(void *)(v8 + 16) + 88 * v10++ + 8);
        }
        while ((v11 & 0x80000000) == 0);
      }
    }
    else
    {
      uint64_t v5 = 0;
      if (v3)
      {
        uint64_t v6 = (int *)(*(void *)(v2 + 16) + 8);
        while (1)
        {
          int v7 = *v6;
          v6 += 22;
          if (v7 < 0) {
            break;
          }
          if (v3 == ++v5)
          {
            LODWORD(v5) = *(_DWORD *)(v2 + 32);
            break;
          }
        }
      }
      *((unsigned char *)a1 + 16) = 1;
      a1[3] = v2;
      a1[4] = v5;
      LODWORD(v3) = *(_DWORD *)(v2 + 32);
    }
    return v5 != v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 583);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(void *)a1 + 40)) {
    return *(void *)(*(void *)(a1 + 24) + 16) + 88 * *(unsigned int *)(a1 + 32) + 16;
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 598);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(void *)a1 + 40)) {
    return *(void *)(*(void *)(a1 + 24) + 16) + 88 * *(unsigned int *)(a1 + 32) + 48;
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 607);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 40))
  {
    uint64_t v2 = *(uint64_t (**)(uint64_t, _DWORD *))(*(void *)a2 + 40);
    return v2(a2, a1);
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 616);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

void *re::IntrospectionHashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::~IntrospectionHashTable(void *a1)
{
  *a1 = &unk_26E6C0400;
  uint64_t v2 = (uint64_t)(a1 + 6);
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 8));
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionHashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::~IntrospectionHashTable(void *a1)
{
  *a1 = &unk_26E6C0400;
  uint64_t v2 = (uint64_t)(a1 + 6);
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 8));
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

double re::IntrospectionHashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::construct(uint64_t a1, uint64_t a2)
{
  double result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 36) = 0x7FFFFFFF;
  return result;
}

double re::IntrospectionHashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::destroy(uint64_t a1, uint64_t *a2)
{
  return re::HashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a2);
}

void re::IntrospectionHashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  re::HashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a2);
  if (a4 <= 3) {
    signed int v7 = 3;
  }
  else {
    signed int v7 = a4;
  }
  re::HashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init((uint64_t)a2, a3, v7);
}

void re::IntrospectionHashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(uint64_t a1, uint64_t a2, unsigned int a3)
{
}

uint64_t re::IntrospectionHashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::size(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 28);
}

void re::IntrospectionHashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(uint64_t a1, uint64_t a2)
{
}

re::IntrospectionBase *re::IntrospectionHashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addElement(re::Allocator **a1, re *a2, int a3, uint64_t a4, re::DynamicString *a5)
{
  uint64_t v21 = 0;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  unsigned int v10 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v14, 0);
  DWORD2(v16) = 0;
  long long v18 = 0uLL;
  *((void *)&v17 + 1) = 0;
  int v11 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v17, 0);
  *((void *)&v19 + 1) = 0;
  long long v20 = 0uLL;
  re::DynamicString::setCapacity(&v19, 0);
  LOBYTE(v21) = 0;
  uint64_t v12 = (re::IntrospectionBase *)re::HashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add(a4, a5, (uint64_t)&v14);
  if ((void)v19)
  {
    if (BYTE8(v19)) {
      (*(void (**)(void))(*(void *)v19 + 40))();
    }
    long long v19 = 0u;
    long long v20 = 0u;
  }
  if ((void)v17)
  {
    if (BYTE8(v17)) {
      (*(void (**)(void))(*(void *)v17 + 40))();
    }
    long long v17 = 0u;
    long long v18 = 0u;
  }
  if (DWORD2(v16) != -1) {
    off_26E70FB78[DWORD2(v16)]((int)&v22, (re::DynamicString *)&v14);
  }
  re::introspectionInitElement(a2, a3, a1[8], v12);
  return v12;
}

uint64_t re::IntrospectionHashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::iterate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(unsigned int *)(a2 + 32);
  if (v5)
  {
    uint64_t v6 = 0;
    signed int v7 = (int *)(*(void *)(a2 + 16) + 8);
    while (1)
    {
      int v8 = *v7;
      v7 += 40;
      if (v8 < 0) {
        break;
      }
      if (v5 == ++v6)
      {
        LODWORD(v6) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v6) = 0;
  }
  if (v5 == v6) {
    return 1;
  }
  uint64_t v10 = v6;
  do
  {
    uint64_t result = std::function<BOOL ()(void const*,void *)>::operator()(a3, *(void *)(a2 + 16) + 160 * v10 + 16, *(void *)(a2 + 16) + 160 * v10 + 48);
    if (!result) {
      break;
    }
    int v11 = *(_DWORD *)(a2 + 32) <= (v6 + 1) ? v6 + 1 : *(_DWORD *)(a2 + 32);
    while (1)
    {
      uint64_t v10 = (v6 + 1);
      if (v11 - 1 == v6) {
        break;
      }
      LODWORD(v6) = v6 + 1;
      int v12 = v10;
      if ((*(_DWORD *)(*(void *)(a2 + 16) + 160 * v10 + 8) & 0x80000000) != 0) {
        goto LABEL_18;
      }
    }
    int v12 = v11;
LABEL_18:
    LODWORD(v6) = v12;
  }
  while (v5 != v12);
  return result;
}

double re::IntrospectionHashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::destroyKey(int a1, re::DynamicString *this)
{
  return re::DynamicString::deinit(this);
}

uint64_t re::HashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add(uint64_t a1, re::DynamicString *a2, uint64_t a3)
{
  unint64_t v6 = re::Hash<re::DynamicString>::operator()((uint64_t)&v22, (uint64_t)a2);
  unint64_t v7 = v6;
  if (!*(void *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  unint64_t v8 = v6 % *(unsigned int *)(a1 + 24);
  uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v8);
  if (v9 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v11 = re::HashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v12 = *(void *)(a1 + 16) + 160 * v11;
    return v12 + 48;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  while (!re::DynamicString::operator==(v10 + 160 * v9 + 16, (uint64_t)a2))
  {
    uint64_t v9 = *(_DWORD *)(v10 + 160 * v9 + 8) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  char v14 = (unsigned __int8 *)(v10 + 160 * v9);
  std::__variant_detail::__assignment<std::__variant_detail::__traits<re::DynamicString,re::AssetHandle>>::__generic_assign[abi:nn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<re::DynamicString,re::AssetHandle>,(std::__variant_detail::_Trait)1>>((uint64_t)(v14 + 48), a3);
  re::DynamicString::operator=((re::DynamicString *)(v14 + 88), (re::DynamicString *)(a3 + 40));
  re::DynamicString::operator=((re::DynamicString *)(v14 + 120), (re::DynamicString *)(a3 + 72));
  int v17 = v14[152];
  long long v16 = v14 + 152;
  int v15 = v17;
  int v18 = *(unsigned __int8 *)(a3 + 104);
  if (v17) {
    BOOL v19 = 0;
  }
  else {
    BOOL v19 = v18 == 0;
  }
  if (!v19)
  {
    if (v15) {
      BOOL v20 = v18 == 0;
    }
    else {
      BOOL v20 = 0;
    }
    if (v20)
    {
      *long long v16 = 0;
    }
    else
    {
      if (v15) {
        BOOL v21 = 1;
      }
      else {
        BOOL v21 = v18 == 0;
      }
      if (!v21) {
        *long long v16 = 1;
      }
      *(_DWORD *)(v10 + 160 * v9 + 156) = *(_DWORD *)(a3 + 108);
    }
  }
  ++*(_DWORD *)(a1 + 40);
  uint64_t v12 = *(void *)(a1 + 16) + 160 * v9;
  return v12 + 48;
}

void re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
  re::HashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init(a1, a3, 3);
}

double re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t *a1)
{
  re::HashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a1);
  return re::HashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a1);
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

void re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (*a1 == a3)
  {
    re::HashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear((uint64_t)a1);
  }
  else
  {
    re::HashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a1);
    re::HashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init((uint64_t)a1, a3, 3);
  }
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke(uint64_t a1, void **a2, re::Allocator *a3, re::DynamicString *a4)
{
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  Instance = re::TypeInfo::createInstance((re::TypeInfo *)v11, a3, 0);
  uint64_t v9 = re::HashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add(a1, a4, (uint64_t)Instance);
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  re::TypeInfo::releaseInstance((re::TypeInfo *)v11, Instance, a3, 0);
  return v9;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 40, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 40);
  *(unsigned char *)(result + 16) = 0;
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (*((_DWORD *)a1 + 2) == *(_DWORD *)(*a1 + 40))
  {
    uint64_t v3 = *(unsigned int *)(v2 + 32);
    if (*((unsigned char *)a1 + 16))
    {
      int v4 = *((_DWORD *)a1 + 8);
      if (v4 == v3)
      {
        LODWORD(v5) = *(_DWORD *)(v2 + 32);
      }
      else
      {
        uint64_t v8 = a1[3];
        unsigned int v9 = *(_DWORD *)(v8 + 32);
        unsigned int v10 = v4 + 1;
        do
        {
          LODWORD(v5) = v10;
          *((_DWORD *)a1 + 8) = v10;
          if (v10 >= v9) {
            break;
          }
          int v11 = *(_DWORD *)(*(void *)(v8 + 16) + 160 * v10++ + 8);
        }
        while ((v11 & 0x80000000) == 0);
      }
    }
    else
    {
      uint64_t v5 = 0;
      if (v3)
      {
        unint64_t v6 = (int *)(*(void *)(v2 + 16) + 8);
        while (1)
        {
          int v7 = *v6;
          v6 += 40;
          if (v7 < 0) {
            break;
          }
          if (v3 == ++v5)
          {
            LODWORD(v5) = *(_DWORD *)(v2 + 32);
            break;
          }
        }
      }
      *((unsigned char *)a1 + 16) = 1;
      a1[3] = v2;
      a1[4] = v5;
      LODWORD(v3) = *(_DWORD *)(v2 + 32);
    }
    return v5 != v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 583);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(void *)a1 + 40)) {
    return *(void *)(*(void *)(a1 + 24) + 16) + 160 * *(unsigned int *)(a1 + 32) + 16;
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 598);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(void *)a1 + 40)) {
    return *(void *)(*(void *)(a1 + 24) + 16) + 160 * *(unsigned int *)(a1 + 32) + 48;
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 607);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 40))
  {
    uint64_t v2 = *(uint64_t (**)(uint64_t, _DWORD *))(*(void *)a2 + 40);
    return v2(a2, a1);
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 616);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

void *re::IntrospectionHashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::~IntrospectionHashTable(void *a1)
{
  *a1 = &unk_26E6C0400;
  uint64_t v2 = (uint64_t)(a1 + 6);
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 8));
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionHashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::~IntrospectionHashTable(void *a1)
{
  *a1 = &unk_26E6C0400;
  uint64_t v2 = (uint64_t)(a1 + 6);
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 8));
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

double re::IntrospectionHashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::construct(uint64_t a1, uint64_t a2)
{
  double result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 36) = 0x7FFFFFFF;
  return result;
}

double re::IntrospectionHashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::destroy(uint64_t a1, uint64_t *a2)
{
  return re::HashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a2);
}

void re::IntrospectionHashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  re::HashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a2);
  if (a4 <= 3) {
    signed int v7 = 3;
  }
  else {
    signed int v7 = a4;
  }
  re::HashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init((uint64_t)a2, a3, v7);
}

void re::IntrospectionHashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(uint64_t a1, uint64_t a2, unsigned int a3)
{
}

uint64_t re::IntrospectionHashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::size(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 28);
}

void re::IntrospectionHashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(uint64_t a1, uint64_t a2)
{
}

re::IntrospectionBase *re::IntrospectionHashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addElement(uint64_t a1, re *a2, int a3, uint64_t a4, re::DynamicString *a5)
{
  memset(v10, 0, sizeof(v10));
  uint64_t v11 = 0;
  LOBYTE(v10[0]) = 10;
  uint64_t v8 = (re::IntrospectionBase *)re::HashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addOrReplace(a4, a5, (uint64_t)v10);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 64), v8);
  return v8;
}

uint64_t re::IntrospectionHashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::iterate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(unsigned int *)(a2 + 32);
  if (v5)
  {
    uint64_t v6 = 0;
    signed int v7 = (int *)(*(void *)(a2 + 16) + 8);
    while (1)
    {
      int v8 = *v7;
      v7 += 38;
      if (v8 < 0) {
        break;
      }
      if (v5 == ++v6)
      {
        LODWORD(v6) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v6) = 0;
  }
  if (v5 == v6) {
    return 1;
  }
  uint64_t v10 = v6;
  do
  {
    uint64_t result = std::function<BOOL ()(void const*,void *)>::operator()(a3, *(void *)(a2 + 16) + 152 * v10 + 16, *(void *)(a2 + 16) + 152 * v10 + 48);
    if (!result) {
      break;
    }
    int v11 = *(_DWORD *)(a2 + 32) <= (v6 + 1) ? v6 + 1 : *(_DWORD *)(a2 + 32);
    while (1)
    {
      uint64_t v10 = (v6 + 1);
      if (v11 - 1 == v6) {
        break;
      }
      LODWORD(v6) = v6 + 1;
      int v12 = v10;
      if ((*(_DWORD *)(*(void *)(a2 + 16) + 152 * v10 + 8) & 0x80000000) != 0) {
        goto LABEL_18;
      }
    }
    int v12 = v11;
LABEL_18:
    LODWORD(v6) = v12;
  }
  while (v5 != v12);
  return result;
}

double re::IntrospectionHashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::destroyKey(int a1, re::DynamicString *this)
{
  return re::DynamicString::deinit(this);
}

void re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
  re::HashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init(a1, a3, 3);
}

double re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t *a1)
{
  re::HashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a1);
  return re::HashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a1);
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

void re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (*a1 == a3)
  {
    re::HashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear((uint64_t)a1);
  }
  else
  {
    re::HashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a1);
    re::HashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init((uint64_t)a1, a3, 3);
  }
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke(uint64_t a1, void **a2, re::Allocator *a3, re::DynamicString *a4)
{
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  Instance = re::TypeInfo::createInstance((re::TypeInfo *)v11, a3, 0);
  uint64_t v9 = re::HashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addOrReplace(a1, a4, (uint64_t)Instance);
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  re::TypeInfo::releaseInstance((re::TypeInfo *)v11, Instance, a3, 0);
  return v9;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = re::Hash<re::DynamicString>::operator()((uint64_t)&v8, a2);
  if (!*(void *)a1) {
    return 0;
  }
  uint64_t v5 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * (v4 % *(unsigned int *)(a1 + 24)));
  if (v5 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 16);
  while (!re::DynamicString::operator==(v6 + 152 * v5 + 16, a2))
  {
    uint64_t v5 = *(_DWORD *)(v6 + 152 * v5 + 8) & 0x7FFFFFFF;
    if (v5 == 0x7FFFFFFF) {
      return 0;
    }
  }
  return v6 + 152 * v5 + 48;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 40, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 40);
  *(unsigned char *)(result + 16) = 0;
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (*((_DWORD *)a1 + 2) == *(_DWORD *)(*a1 + 40))
  {
    uint64_t v3 = *(unsigned int *)(v2 + 32);
    if (*((unsigned char *)a1 + 16))
    {
      int v4 = *((_DWORD *)a1 + 8);
      if (v4 == v3)
      {
        LODWORD(v5) = *(_DWORD *)(v2 + 32);
      }
      else
      {
        uint64_t v8 = a1[3];
        unsigned int v9 = *(_DWORD *)(v8 + 32);
        unsigned int v10 = v4 + 1;
        do
        {
          LODWORD(v5) = v10;
          *((_DWORD *)a1 + 8) = v10;
          if (v10 >= v9) {
            break;
          }
          int v11 = *(_DWORD *)(*(void *)(v8 + 16) + 152 * v10++ + 8);
        }
        while ((v11 & 0x80000000) == 0);
      }
    }
    else
    {
      uint64_t v5 = 0;
      if (v3)
      {
        uint64_t v6 = (int *)(*(void *)(v2 + 16) + 8);
        while (1)
        {
          int v7 = *v6;
          v6 += 38;
          if (v7 < 0) {
            break;
          }
          if (v3 == ++v5)
          {
            LODWORD(v5) = *(_DWORD *)(v2 + 32);
            break;
          }
        }
      }
      *((unsigned char *)a1 + 16) = 1;
      a1[3] = v2;
      a1[4] = v5;
      LODWORD(v3) = *(_DWORD *)(v2 + 32);
    }
    return v5 != v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 583);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(void *)a1 + 40)) {
    return *(void *)(*(void *)(a1 + 24) + 16) + 152 * *(unsigned int *)(a1 + 32) + 16;
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 598);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(void *)a1 + 40)) {
    return *(void *)(*(void *)(a1 + 24) + 16) + 152 * *(unsigned int *)(a1 + 32) + 48;
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 607);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 40))
  {
    uint64_t v2 = *(uint64_t (**)(uint64_t, _DWORD *))(*(void *)a2 + 40);
    return v2(a2, a1);
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 616);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

void *re::IntrospectionDynamicArray<re::MaterialTechniqueData>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::MaterialTechniqueData>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionDynamicArray<re::MaterialTechniqueData>::construct(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::MaterialTechniqueData>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::MaterialTechniqueData>::deinit(a2);
}

void *re::IntrospectionDynamicArray<re::MaterialTechniqueData>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<re::MaterialTechniqueData>::deinit(a2);
  *(void *)a2 = a3;
  uint64_t result = re::DynamicArray<re::MaterialTechniqueData>::setCapacity((void *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::MaterialTechniqueData>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (!*(void *)a4)
  {
    *(void *)a4 = a2;
    re::DynamicArray<re::MaterialTechniqueData>::setCapacity((void *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  unint64_t v10 = *(void *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
    {
      re::DynamicArray<re::MaterialTechniqueData>::resize((_anonymous_namespace_ *)a4, a5);
    }
  }
  else
  {
    re::DynamicArray<re::MaterialTechniqueData>::setCapacity((void *)a4, a5);
    for (unint64_t i = a5 - *(void *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::MaterialTechniqueData>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *a4)
{
  bzero(v10, 0x298uLL);
  re::MaterialTechniqueData::MaterialTechniqueData((re::MaterialTechniqueData *)v10);
  re::DynamicArray<re::MaterialTechniqueData>::add(a4, (uint64_t)v10);
  re::MaterialTechniqueData::~MaterialTechniqueData((re::MaterialTechniqueData *)v10);
  uint64_t v8 = (re::IntrospectionBase *)(*((void *)a4 + 4) + 664 * *((void *)a4 + 2) - 664);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v8);
  return v8;
}

uint64_t re::IntrospectionDynamicArray<re::MaterialTechniqueData>::size(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::MaterialTechniqueData>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 664 * a3;
}

{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 664 * a3;
}

void re::DynamicArray<re::MaterialTechniqueData>::resize(_anonymous_namespace_ *a1, unint64_t a2)
{
  unint64_t v2 = a2;
  uint64_t v3 = a1;
  unint64_t v4 = *((void *)a1 + 2);
  if (v4 >= a2)
  {
    if (v4 <= a2) {
      return;
    }
    uint64_t v12 = 664 * a2;
    unint64_t v13 = a2;
    do
    {
      re::MaterialTechniqueData::~MaterialTechniqueData((re::MaterialTechniqueData *)(*((void *)v3 + 4) + v12));
      ++v2;
      v12 += 664;
    }
    while (v2 < *((void *)v3 + 2));
  }
  else
  {
    if (*((void *)a1 + 1) < a2)
    {
      a1 = (_anonymous_namespace_ *)re::DynamicArray<re::MaterialTechniqueData>::setCapacity(a1, a2);
      unint64_t v4 = *((void *)v3 + 2);
    }
    unint64_t v13 = v2;
    unint64_t v5 = v2 - v4;
    if (v2 > v4)
    {
      uint64_t v6 = 664 * v4;
      do
      {
        uint64_t v7 = *((void *)v3 + 4) + v6;
        *(_OWORD *)uint64_t v7 = 0u;
        *(_OWORD *)(v7 + 16) = 0u;
        uint64_t v8 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((void *)v7, 0);
        *(_OWORD *)(v7 + 48) = 0u;
        *(_OWORD *)(v7 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0u;
        unsigned int v9 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((void *)(v7 + 32), 0);
        *(_OWORD *)(v7 + 128) = 0u;
        *(_OWORD *)(v7 + 80) = 0u;
        *(_OWORD *)(v7 + 96) = 0u;
        *(_OWORD *)(v7 + 64) = 0u;
        *(_OWORD *)(v7 + 112) = 0u;
        unint64_t v10 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((void *)(v7 + 112), 0);
        *(void *)(v7 + 192) = 0;
        *(_OWORD *)(v7 + 160) = 0u;
        *(_OWORD *)(v7 + 176) = 0u;
        *(_OWORD *)(v7 + 144) = 0u;
        v7 += 168;
        int v11 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((void *)v7, 0);
        *(void *)(v7 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0xFFFF000100010000;
        *(_WORD *)(v7 + 40) = 1792;
        *(unsigned char *)(v7 + 42) = 4;
        *(_OWORD *)(v7 + 44) = xmmword_2343AD2D0;
        *(void *)(v7 + 60) = 5;
        *(_DWORD *)(v7 + 68) = 15;
        *(void *)(v7 + 88) = 0;
        *(_OWORD *)(v7 + 96) = 0u;
        *(_DWORD *)(v7 + 112) = 0;
        *(void *)(v7 + 72) = 0;
        *(void *)(v7 + 77) = 0;
        *(_OWORD *)(v7 + 120) = 0u;
        *(_OWORD *)(v7 + 136) = 0u;
        *(void *)(v7 + 152) = 0;
        a1 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((void *)(v7 + 128), 0);
        *(_OWORD *)(v7 + 160) = 0u;
        *(_OWORD *)(v7 + 176) = 0u;
        *(_OWORD *)(v7 + 192) = 0u;
        *(_OWORD *)(v7 + 208) = 0u;
        *(_DWORD *)(v7 + 196) = 0x7FFFFFFF;
        *(_OWORD *)(v7 + 224) = 0u;
        *(_OWORD *)(v7 + 240) = 0u;
        *(_DWORD *)(v7 + 244) = 0x7FFFFFFF;
        *(void *)(v7 + 256) = 0;
        *(_OWORD *)(v7 + 264) = 0u;
        *(_DWORD *)(v7 + 280) = 0;
        *(_OWORD *)(v7 + 304) = 0u;
        *(_OWORD *)(v7 + 320) = 0u;
        *(_OWORD *)(v7 + 288) = 0u;
        *(void *)(v7 + 336) = 0;
        *(_DWORD *)(v7 + 3re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0x7FFFFFFF;
        *(void *)(v7 + 376) = 0;
        *(void *)(v7 + 360) = 0;
        *(_DWORD *)(v7 + 368) = 0;
        *(_OWORD *)(v7 + 344) = 0u;
        *(_WORD *)(v7 + 384) = 0;
        *(_OWORD *)(v7 + 424) = 0u;
        *(_OWORD *)(v7 + 408) = 0u;
        *(_OWORD *)(v7 + 392) = 0u;
        *(_DWORD *)(v7 + 428) = 0x7FFFFFFF;
        *(_OWORD *)(v7 + 472) = 0u;
        *(_OWORD *)(v7 + 456) = 0u;
        *(_OWORD *)(v7 + 440) = 0u;
        *(_DWORD *)(v7 + 476) = 0x7FFFFFFF;
        *(_WORD *)(v7 + 488) = 256;
        v6 += 664;
        *(unsigned char *)(v7 + 490) = 0;
        --v5;
      }
      while (v5);
    }
  }
  *((void *)v3 + 2) = v13;
  ++*((_DWORD *)v3 + 6);
}

uint64_t re::DynamicArray<re::MaterialTechniqueData>::add(_anonymous_namespace_ *this, uint64_t a2)
{
  unint64_t v4 = *((void *)this + 2);
  if (v4 >= *((void *)this + 1))
  {
    re::DynamicArray<re::MaterialTechniqueData>::growCapacity(this, v4 + 1);
    unint64_t v4 = *((void *)this + 2);
  }
  uint64_t result = re::MaterialTechniqueData::MaterialTechniqueData(*((void *)this + 4) + 664 * v4, a2);
  ++*((void *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

void *re::TypeBuilderHelper::registerDynamicArray<re::MaterialTechniqueData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)a1 = a3;
  uint64_t result = re::DynamicArray<re::MaterialTechniqueData>::setCapacity((void *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MaterialTechniqueData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::MaterialTechniqueData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  if (*(re::Allocator **)a1 == a3)
  {
    re::DynamicArray<re::MaterialTechniqueData>::clear((re::MaterialTechniqueData *)a1);
  }
  else
  {
    re::DynamicArray<re::MaterialTechniqueData>::deinit(a1);
    *(void *)a1 = a3;
    re::DynamicArray<re::MaterialTechniqueData>::setCapacity((void *)a1, a4);
    ++*(_DWORD *)(a1 + 24);
  }
  re::DynamicArray<re::MaterialTechniqueData>::resize((_anonymous_namespace_ *)a1, a4);
  {
    re::TypeRegistry::typeInfo(*(void **)a2, *(void *)(*(void *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    uint64_t v9 = *(void *)(a1 + 16);
    if (v9)
    {
      unint64_t v10 = *(char **)(a1 + 32);
      uint64_t v11 = 664 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 664;
        v11 -= 664;
      }
      while (v11);
    }
  }
}

re::MaterialTechniqueData *re::DynamicArray<re::MaterialTechniqueData>::clear(re::MaterialTechniqueData *result)
{
  uint64_t v1 = result;
  uint64_t v2 = *((void *)result + 2);
  *((void *)result + 2) = 0;
  if (v2)
  {
    uint64_t result = (re::MaterialTechniqueData *)*((void *)result + 4);
    uint64_t v3 = 664 * v2;
    do
    {
      re::MaterialTechniqueData::~MaterialTechniqueData(result);
      uint64_t result = (re::MaterialTechniqueData *)(v4 + 664);
      v3 -= 664;
    }
    while (v3);
  }
  ++*((_DWORD *)v1 + 6);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MaterialTechniqueData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 32) + 664 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MaterialTechniqueData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MaterialTechniqueData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 24))
  {
    int v3 = a1[3];
    unint64_t v4 = *(void *)(v2 + 16);
    if (v3 < (int)v4) {
      a1[3] = ++v3;
    }
    if (v4 <= v3) {
      return 0;
    }
    else {
      return *(void *)(v2 + 32) + 664 * v3;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MaterialTechniqueData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, result);
  }
  return result;
}

void *re::IntrospectionDynamicArray<re::MaterialTechniqueGroupData>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::MaterialTechniqueGroupData>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionDynamicArray<re::MaterialTechniqueGroupData>::construct(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::MaterialTechniqueGroupData>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::MaterialTechniqueGroupData>::deinit(a2);
}

void *re::IntrospectionDynamicArray<re::MaterialTechniqueGroupData>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<re::MaterialTechniqueGroupData>::deinit(a2);
  *(void *)a2 = a3;
  uint64_t result = re::DynamicArray<re::MaterialTechniqueGroupData>::setCapacity((void *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::MaterialTechniqueGroupData>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (!*(void *)a4)
  {
    *(void *)a4 = a2;
    re::DynamicArray<re::MaterialTechniqueGroupData>::setCapacity((void *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  unint64_t v10 = *(void *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
    {
      re::DynamicArray<re::MaterialTechniqueGroupData>::resize((_anonymous_namespace_ *)a4, a5);
    }
  }
  else
  {
    re::DynamicArray<re::MaterialTechniqueGroupData>::setCapacity((void *)a4, a5);
    for (unint64_t i = a5 - *(void *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::MaterialTechniqueGroupData>::addElement(re::Allocator **a1, re *a2, int a3, uint64_t a4)
{
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  re::DynamicString::setCapacity(&v13, 0);
  unint64_t v8 = *(void *)(a4 + 16);
  if (v8 >= *(void *)(a4 + 8))
  {
    re::DynamicArray<re::MaterialTechniqueGroupData>::growCapacity((void *)a4, v8 + 1);
    unint64_t v8 = *(void *)(a4 + 16);
  }
  uint64_t v9 = *(void *)(a4 + 32) + 72 * v8;
  *(void *)uint64_t v9 = v13;
  unint64_t v13 = 0;
  *(void *)(v9 + 16) = *((void *)&v14 + 1);
  *((void *)&v14 + 1) = 0;
  *(void *)(v9 + 24) = v15;
  *(void *)&long long v15 = 0;
  *(void *)(v9 + 8) = v14;
  *(void *)&long long v14 = 0;
  *(void *)(v9 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0;
  *(void *)(v9 + 40) = 0;
  *(_DWORD *)(v9 + 56) = 0;
  *(void *)(v9 + 48) = 0;
  *((void *)&v15 + 1) = 0;
  *(void *)&long long v16 = 0;
  uint64_t v10 = *(void *)(v9 + 48);
  *(void *)(v9 + 48) = 0;
  *((void *)&v16 + 1) = v10;
  *(void *)(v9 + 64) = 0;
  *((void *)&v17 + 1) = 0;
  LODWORD(v17) = 1;
  ++*(_DWORD *)(v9 + 56);
  ++*(void *)(a4 + 16);
  ++*(_DWORD *)(a4 + 24);
  re::MaterialTechniqueGroupData::deinit(&v13);
  re::DynamicArray<re::DynamicString>::deinit((uint64_t)&v15 + 8);
  if (v13 && (v14 & 1) != 0) {
    (*(void (**)(void))(*(void *)v13 + 40))();
  }
  uint64_t v11 = (re::IntrospectionBase *)(*(void *)(a4 + 32) + 72 * *(void *)(a4 + 16) - 72);
  re::introspectionInitElement(a2, a3, a1[6], v11);
  return v11;
}

uint64_t re::IntrospectionDynamicArray<re::MaterialTechniqueGroupData>::size(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::MaterialTechniqueGroupData>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 72 * a3;
}

{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 72 * a3;
}

void re::DynamicArray<re::MaterialTechniqueGroupData>::resize(_anonymous_namespace_ *a1, unint64_t a2)
{
  int v3 = a1;
  unint64_t v4 = *((void *)a1 + 2);
  if (v4 >= a2)
  {
    if (v4 <= a2) {
      return;
    }
    uint64_t v8 = 72 * a2;
    unint64_t v9 = a2;
    do
    {
      uint64_t v10 = (const re::DynamicString **)(*((void *)v3 + 4) + v8);
      re::MaterialTechniqueGroupData::deinit(v10);
      re::DynamicArray<re::DynamicString>::deinit((uint64_t)(v10 + 4));
      re::DynamicString::deinit((re::DynamicString *)v10);
      ++v9;
      v8 += 72;
    }
    while (v9 < *((void *)v3 + 2));
  }
  else
  {
    if (*((void *)a1 + 1) < a2)
    {
      a1 = (_anonymous_namespace_ *)re::DynamicArray<re::MaterialTechniqueGroupData>::setCapacity(a1, a2);
      unint64_t v4 = *((void *)v3 + 2);
    }
    unint64_t v5 = a2 - v4;
    if (a2 > v4)
    {
      uint64_t v6 = 72 * v4;
      do
      {
        uint64_t v7 = *((void *)v3 + 4) + v6;
        *(_OWORD *)uint64_t v7 = 0u;
        *(_OWORD *)(v7 + 16) = 0u;
        a1 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((void *)v7, 0);
        *(void *)(v7 + 64) = 0;
        *(void *)(v7 + 40) = 0;
        *(void *)(v7 + 48) = 0;
        *(void *)(v7 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0;
        v6 += 72;
        *(_DWORD *)(v7 + 56) = 0;
        --v5;
      }
      while (v5);
    }
  }
  *((void *)v3 + 2) = a2;
  ++*((_DWORD *)v3 + 6);
}

void *re::TypeBuilderHelper::registerDynamicArray<re::MaterialTechniqueGroupData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)a1 = a3;
  uint64_t result = re::DynamicArray<re::MaterialTechniqueGroupData>::setCapacity((void *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MaterialTechniqueGroupData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::MaterialTechniqueGroupData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  if (*(re::Allocator **)a1 == a3)
  {
    re::DynamicArray<re::MaterialTechniqueGroupData>::clear(a1);
  }
  else
  {
    re::DynamicArray<re::MaterialTechniqueGroupData>::deinit(a1);
    *(void *)a1 = a3;
    re::DynamicArray<re::MaterialTechniqueGroupData>::setCapacity((void *)a1, a4);
    ++*(_DWORD *)(a1 + 24);
  }
  re::DynamicArray<re::MaterialTechniqueGroupData>::resize((_anonymous_namespace_ *)a1, a4);
  {
    re::TypeRegistry::typeInfo(*(void **)a2, *(void *)(*(void *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    uint64_t v9 = *(void *)(a1 + 16);
    if (v9)
    {
      uint64_t v10 = *(char **)(a1 + 32);
      uint64_t v11 = 72 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 72;
        v11 -= 72;
      }
      while (v11);
    }
  }
}

void re::DynamicArray<re::MaterialTechniqueGroupData>::clear(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2)
  {
    int v3 = *(const re::DynamicString ***)(a1 + 32);
    unint64_t v4 = &v3[9 * v2];
    do
    {
      re::MaterialTechniqueGroupData::deinit(v3);
      re::DynamicArray<re::DynamicString>::deinit((uint64_t)(v3 + 4));
      re::DynamicString::deinit((re::DynamicString *)v3);
      v3 += 9;
    }
    while (v3 != v4);
  }
  ++*(_DWORD *)(a1 + 24);
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MaterialTechniqueGroupData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 32) + 72 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MaterialTechniqueGroupData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MaterialTechniqueGroupData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 24))
  {
    int v3 = a1[3];
    unint64_t v4 = *(void *)(v2 + 16);
    if (v3 < (int)v4) {
      a1[3] = ++v3;
    }
    if (v4 <= v3) {
      return 0;
    }
    else {
      return *(void *)(v2 + 32) + 72 * v3;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MaterialTechniqueGroupData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, result);
  }
  return result;
}

void *re::IntrospectionDynamicArray<re::DebugMapping>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::DebugMapping>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionDynamicArray<re::DebugMapping>::construct(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::DebugMapping>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::DebugMapping>::deinit(a2);
}

void *re::IntrospectionDynamicArray<re::DebugMapping>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<re::DebugMapping>::deinit(a2);
  *(void *)a2 = a3;
  uint64_t result = re::DynamicArray<re::DebugMapping>::setCapacity((void *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::DebugMapping>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (!*(void *)a4)
  {
    *(void *)a4 = a2;
    re::DynamicArray<re::DebugMapping>::setCapacity((void *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  unint64_t v10 = *(void *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
    {
      re::DynamicArray<re::DebugMapping>::resize((_anonymous_namespace_ *)a4, a5);
    }
  }
  else
  {
    re::DynamicArray<re::DebugMapping>::setCapacity((void *)a4, a5);
    for (unint64_t i = a5 - *(void *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::DebugMapping>::addElement(re::Allocator **a1, re *a2, int a3, _anonymous_namespace_ *a4)
{
  memset(v13, 0, sizeof(v13));
  long long v12 = 0u;
  re::DynamicString::setCapacity(&v11, 0);
  memset(&v13[8], 0, 36);
  *(void *)&v13[44] = 0x7FFFFFFFLL;
  re::DynamicArray<re::DebugMapping>::add(a4, &v11);
  double v8 = re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)&v13[8]);
  if (v11 && (v12 & 1) != 0) {
    (*(void (**)(double))(*v11 + 40))(v8);
  }
  uint64_t v9 = (re::IntrospectionBase *)(*((void *)a4 + 4) + 80 * *((void *)a4 + 2) - 80);
  re::introspectionInitElement(a2, a3, a1[6], v9);
  return v9;
}

uint64_t re::IntrospectionDynamicArray<re::DebugMapping>::size(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::DebugMapping>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 80 * a3;
}

{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 80 * a3;
}

void re::DynamicArray<re::DebugMapping>::resize(_anonymous_namespace_ *a1, unint64_t a2)
{
  int v3 = a1;
  unint64_t v4 = *((void *)a1 + 2);
  if (v4 >= a2)
  {
    if (v4 <= a2) {
      return;
    }
    uint64_t v8 = 80 * a2;
    unint64_t v9 = a2;
    do
    {
      unint64_t v10 = (uint64_t *)(*((void *)v3 + 4) + v8);
      re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v10 + 4);
      re::DynamicString::deinit((re::DynamicString *)v10);
      ++v9;
      v8 += 80;
    }
    while (v9 < *((void *)v3 + 2));
  }
  else
  {
    if (*((void *)a1 + 1) < a2)
    {
      a1 = (_anonymous_namespace_ *)re::DynamicArray<re::DebugMapping>::setCapacity(a1, a2);
      unint64_t v4 = *((void *)v3 + 2);
    }
    unint64_t v5 = a2 - v4;
    if (a2 > v4)
    {
      uint64_t v6 = 80 * v4;
      do
      {
        uint64_t v7 = *((void *)v3 + 4) + v6;
        *(_OWORD *)uint64_t v7 = 0u;
        *(_OWORD *)(v7 + 16) = 0u;
        a1 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((void *)v7, 0);
        *(_OWORD *)(v7 + 48) = 0u;
        *(_OWORD *)(v7 + 64) = 0u;
        *(_OWORD *)(v7 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0u;
        v6 += 80;
        *(_DWORD *)(v7 + 68) = 0x7FFFFFFF;
        --v5;
      }
      while (v5);
    }
  }
  *((void *)v3 + 2) = a2;
  ++*((_DWORD *)v3 + 6);
}

uint64_t *re::DynamicArray<re::DebugMapping>::add(_anonymous_namespace_ *this, void *a2)
{
  unint64_t v4 = *((void *)this + 2);
  if (v4 >= *((void *)this + 1))
  {
    re::DynamicArray<re::DebugMapping>::growCapacity(this, v4 + 1);
    unint64_t v4 = *((void *)this + 2);
  }
  uint64_t v5 = *((void *)this + 4) + 80 * v4;
  *(_OWORD *)uint64_t v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(void *)(v5 + 24) = a2[3];
  uint64_t v6 = a2[1];
  *(void *)uint64_t v5 = *a2;
  *a2 = 0;
  uint64_t v7 = a2[2];
  a2[3] = 0;
  uint64_t v9 = *(void *)(v5 + 8);
  uint64_t v8 = *(void *)(v5 + 16);
  *(void *)(v5 + 8) = v6;
  *(void *)(v5 + 16) = v7;
  a2[1] = v9;
  a2[2] = v8;
  *(_OWORD *)(v5 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0u;
  v5 += 32;
  *(_DWORD *)(v5 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0;
  *(_OWORD *)(v5 + 16) = 0u;
  *(void *)(v5 + 36) = 0x7FFFFFFFLL;
  uint64_t result = re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)v5, a2 + 4);
  ++*((void *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

void *re::TypeBuilderHelper::registerDynamicArray<re::DebugMapping>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)a1 = a3;
  uint64_t result = re::DynamicArray<re::DebugMapping>::setCapacity((void *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::DebugMapping>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::DebugMapping>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  if (*(re::Allocator **)a1 == a3)
  {
    re::DynamicArray<re::DebugMapping>::clear(a1);
  }
  else
  {
    re::DynamicArray<re::DebugMapping>::deinit(a1);
    *(void *)a1 = a3;
    re::DynamicArray<re::DebugMapping>::setCapacity((void *)a1, a4);
    ++*(_DWORD *)(a1 + 24);
  }
  re::DynamicArray<re::DebugMapping>::resize((_anonymous_namespace_ *)a1, a4);
  {
    re::TypeRegistry::typeInfo(*(void **)a2, *(void *)(*(void *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    uint64_t v9 = *(void *)(a1 + 16);
    if (v9)
    {
      unint64_t v10 = *(char **)(a1 + 32);
      uint64_t v11 = 80 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 80;
        v11 -= 80;
      }
      while (v11);
    }
  }
}

void re::DynamicArray<re::DebugMapping>::clear(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2)
  {
    int v3 = *(uint64_t **)(a1 + 32);
    uint64_t v4 = 80 * v2;
    do
    {
      re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v3 + 4);
      re::DynamicString::deinit((re::DynamicString *)v3);
      v3 += 10;
      v4 -= 80;
    }
    while (v4);
  }
  ++*(_DWORD *)(a1 + 24);
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::DebugMapping>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 32) + 80 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::DebugMapping>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::DebugMapping>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 24))
  {
    int v3 = a1[3];
    unint64_t v4 = *(void *)(v2 + 16);
    if (v3 < (int)v4) {
      a1[3] = ++v3;
    }
    if (v4 <= v3) {
      return 0;
    }
    else {
      return *(void *)(v2 + 32) + 80 * v3;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::DebugMapping>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, result);
  }
  return result;
}

void *re::IntrospectionHashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::~IntrospectionHashTable(void *a1)
{
  *a1 = &unk_26E6C0400;
  uint64_t v2 = (uint64_t)(a1 + 6);
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 8));
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionHashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::~IntrospectionHashTable(void *a1)
{
  *a1 = &unk_26E6C0400;
  uint64_t v2 = (uint64_t)(a1 + 6);
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 8));
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

double re::IntrospectionHashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::construct(uint64_t a1, uint64_t a2)
{
  double result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 36) = 0x7FFFFFFF;
  return result;
}

double re::IntrospectionHashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::destroy(uint64_t a1, uint64_t *a2)
{
  return re::HashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a2);
}

void re::IntrospectionHashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  re::HashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a2);
  if (a4 <= 3) {
    signed int v7 = 3;
  }
  else {
    signed int v7 = a4;
  }
  re::HashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init((uint64_t)a2, a3, v7);
}

void re::IntrospectionHashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(uint64_t a1, uint64_t a2, unsigned int a3)
{
}

uint64_t re::IntrospectionHashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::size(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 28);
}

void re::IntrospectionHashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(uint64_t a1, uint64_t a2)
{
}

re::IntrospectionBase *re::IntrospectionHashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addElement(uint64_t a1, re *a2, int a3, uint64_t a4, re::DynamicString *a5)
{
  long long v11 = 0u;
  long long v12 = 0u;
  long long v10 = 0u;
  uint64_t v8 = (re::IntrospectionBase *)re::HashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add(a4, a5, (unsigned __int8 *)&v10);
  if (_BYTE)v10 && *((void *)&v10 + 1) && (v11) {
    (*(void (**)(void))(**((void **)&v10 + 1) + 40))();
  }
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 64), v8);
  return v8;
}

uint64_t re::IntrospectionHashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::iterate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(unsigned int *)(a2 + 32);
  if (v5)
  {
    uint64_t v6 = 0;
    signed int v7 = (int *)(*(void *)(a2 + 16) + 8);
    while (1)
    {
      int v8 = *v7;
      v7 += 24;
      if (v8 < 0) {
        break;
      }
      if (v5 == ++v6)
      {
        LODWORD(v6) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v6) = 0;
  }
  if (v5 == v6) {
    return 1;
  }
  uint64_t v10 = v6;
  do
  {
    uint64_t result = std::function<BOOL ()(void const*,void *)>::operator()(a3, *(void *)(a2 + 16) + 96 * v10 + 16, *(void *)(a2 + 16) + 96 * v10 + 48);
    if (!result) {
      break;
    }
    int v11 = *(_DWORD *)(a2 + 32) <= (v6 + 1) ? v6 + 1 : *(_DWORD *)(a2 + 32);
    while (1)
    {
      uint64_t v10 = (v6 + 1);
      if (v11 - 1 == v6) {
        break;
      }
      LODWORD(v6) = v6 + 1;
      int v12 = v10;
      if ((*(_DWORD *)(*(void *)(a2 + 16) + 96 * v10 + 8) & 0x80000000) != 0) {
        goto LABEL_18;
      }
    }
    int v12 = v11;
LABEL_18:
    LODWORD(v6) = v12;
  }
  while (v5 != v12);
  return result;
}

double re::IntrospectionHashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::destroyKey(int a1, re::DynamicString *this)
{
  return re::DynamicString::deinit(this);
}

void re::HashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 28))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 24);
    if (v2) {
      memset_pattern16(*(void **)(a1 + 8), &unk_2343655D0, 4 * v2);
    }
    if (*(_DWORD *)(a1 + 32))
    {
      uint64_t v3 = 0;
      unint64_t v4 = 0;
      do
      {
        re::HashTable<re::DynamicString,re::Optional<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::EntryWithHash::free(*(void *)(a1 + 16) + v3);
        ++v4;
        v3 += 96;
      }
      while (v4 < *(unsigned int *)(a1 + 32));
    }
    *(_DWORD *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0;
    int v5 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v5;
  }
}

uint64_t re::HashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add(uint64_t a1, re::DynamicString *a2, unsigned __int8 *a3)
{
  unint64_t v6 = re::Hash<re::DynamicString>::operator()((uint64_t)&v22, (uint64_t)a2);
  unint64_t v7 = v6;
  if (!*(void *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  unint64_t v8 = v6 % *(unsigned int *)(a1 + 24);
  uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v8);
  if (v9 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v11 = re::HashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v12 = *(void *)(a1 + 16) + 96 * v11;
    return v12 + 48;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  while (!re::DynamicString::operator==(v10 + 96 * v9 + 16, (uint64_t)a2))
  {
    uint64_t v9 = *(_DWORD *)(v10 + 96 * v9 + 8) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  uint64_t v14 = v10 + 96 * v9;
  re::Optional<re::DynamicString>::operator=((unsigned __int8 *)(v14 + 48), a3);
  int v17 = *(unsigned __int8 *)(v14 + 88);
  long long v16 = (unsigned char *)(v14 + 88);
  int v15 = v17;
  int v18 = a3[40];
  if (v17) {
    BOOL v19 = 0;
  }
  else {
    BOOL v19 = v18 == 0;
  }
  if (!v19)
  {
    if (v15) {
      BOOL v20 = v18 == 0;
    }
    else {
      BOOL v20 = 0;
    }
    if (v20)
    {
      *long long v16 = 0;
    }
    else
    {
      if (v15) {
        BOOL v21 = 1;
      }
      else {
        BOOL v21 = v18 == 0;
      }
      if (!v21) {
        *long long v16 = 1;
      }
      *(unsigned char *)(v10 + 96 * v9 + 89) = a3[41];
    }
  }
  ++*(_DWORD *)(a1 + 40);
  uint64_t v12 = *(void *)(a1 + 16) + 96 * v9;
  return v12 + 48;
}

void re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
  re::HashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init(a1, a3, 3);
}

double re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t *a1)
{
  re::HashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a1);
  return re::HashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a1);
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

void re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (*a1 == a3)
  {
    re::HashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear((uint64_t)a1);
  }
  else
  {
    re::HashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a1);
    re::HashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init((uint64_t)a1, a3, 3);
  }
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke(uint64_t a1, void **a2, re::Allocator *a3, re::DynamicString *a4)
{
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  Instance = (unsigned __int8 *)re::TypeInfo::createInstance((re::TypeInfo *)v11, a3, 0);
  uint64_t v9 = re::HashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add(a1, a4, Instance);
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  re::TypeInfo::releaseInstance((re::TypeInfo *)v11, Instance, a3, 0);
  return v9;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = re::Hash<re::DynamicString>::operator()((uint64_t)&v8, a2);
  if (!*(void *)a1) {
    return 0;
  }
  uint64_t v5 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * (v4 % *(unsigned int *)(a1 + 24)));
  if (v5 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 16);
  while (!re::DynamicString::operator==(v6 + 96 * v5 + 16, a2))
  {
    uint64_t v5 = *(_DWORD *)(v6 + 96 * v5 + 8) & 0x7FFFFFFF;
    if (v5 == 0x7FFFFFFF) {
      return 0;
    }
  }
  return v6 + 96 * v5 + 48;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 40, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 40);
  *(unsigned char *)(result + 16) = 0;
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (*((_DWORD *)a1 + 2) == *(_DWORD *)(*a1 + 40))
  {
    uint64_t v3 = *(unsigned int *)(v2 + 32);
    if (*((unsigned char *)a1 + 16))
    {
      int v4 = *((_DWORD *)a1 + 8);
      if (v4 == v3)
      {
        LODWORD(v5) = *(_DWORD *)(v2 + 32);
      }
      else
      {
        uint64_t v8 = a1[3];
        unsigned int v9 = *(_DWORD *)(v8 + 32);
        unsigned int v10 = v4 + 1;
        do
        {
          LODWORD(v5) = v10;
          *((_DWORD *)a1 + 8) = v10;
          if (v10 >= v9) {
            break;
          }
          int v11 = *(_DWORD *)(*(void *)(v8 + 16) + 96 * v10++ + 8);
        }
        while ((v11 & 0x80000000) == 0);
      }
    }
    else
    {
      uint64_t v5 = 0;
      if (v3)
      {
        uint64_t v6 = (int *)(*(void *)(v2 + 16) + 8);
        while (1)
        {
          int v7 = *v6;
          v6 += 24;
          if (v7 < 0) {
            break;
          }
          if (v3 == ++v5)
          {
            LODWORD(v5) = *(_DWORD *)(v2 + 32);
            break;
          }
        }
      }
      *((unsigned char *)a1 + 16) = 1;
      a1[3] = v2;
      a1[4] = v5;
      LODWORD(v3) = *(_DWORD *)(v2 + 32);
    }
    return v5 != v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 583);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(void *)a1 + 40)) {
    return *(void *)(*(void *)(a1 + 24) + 16) + 96 * *(unsigned int *)(a1 + 32) + 16;
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 598);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(void *)a1 + 40)) {
    return *(void *)(*(void *)(a1 + 24) + 16) + 96 * *(unsigned int *)(a1 + 32) + 48;
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 607);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 40))
  {
    uint64_t v2 = *(uint64_t (**)(uint64_t, _DWORD *))(*(void *)a2 + 40);
    return v2(a2, a1);
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 616);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

void *re::IntrospectionDynamicArray<re::MaterialTechniqueQualityLevelSetData>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::MaterialTechniqueQualityLevelSetData>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionDynamicArray<re::MaterialTechniqueQualityLevelSetData>::construct(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::MaterialTechniqueQualityLevelSetData>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::MaterialTechniqueQualityLevelSetData>::deinit(a2);
}

void *re::IntrospectionDynamicArray<re::MaterialTechniqueQualityLevelSetData>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<re::MaterialTechniqueQualityLevelSetData>::deinit(a2);
  *(void *)a2 = a3;
  uint64_t result = re::DynamicArray<re::MaterialTechniqueQualityLevelSetData>::setCapacity((void *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::MaterialTechniqueQualityLevelSetData>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (!*(void *)a4)
  {
    *(void *)a4 = a2;
    re::DynamicArray<re::MaterialTechniqueQualityLevelSetData>::setCapacity((void *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  unint64_t v10 = *(void *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
    {
      re::DynamicArray<re::MaterialTechniqueQualityLevelSetData>::resize((_anonymous_namespace_ *)a4, a5);
    }
  }
  else
  {
    re::DynamicArray<re::MaterialTechniqueQualityLevelSetData>::setCapacity((void *)a4, a5);
    for (unint64_t i = a5 - *(void *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::MaterialTechniqueQualityLevelSetData>::addElement(re::Allocator **a1, re *a2, int a3, uint64_t a4)
{
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  uint64_t v8 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v12, 0);
  long long v15 = 0uLL;
  *(void *)&long long v16 = 0;
  re::DynamicString::setCapacity((void *)&v14 + 1, 0);
  *((void *)&v18 + 1) = 0;
  long long v17 = 0uLL;
  *((void *)&v16 + 1) = 0;
  LODWORD(v18) = 0;
  unint64_t v9 = *(void *)(a4 + 16);
  if (v9 >= *(void *)(a4 + 8))
  {
    re::DynamicArray<re::MaterialTechniqueQualityLevelSetData>::growCapacity((void *)a4, v9 + 1);
    unint64_t v9 = *(void *)(a4 + 16);
  }
  re::MaterialTechniqueQualityLevelSetData::MaterialTechniqueQualityLevelSetData(*(void *)(a4 + 32) + 104 * v9, (uint64_t)&v12);
  ++*(void *)(a4 + 16);
  ++*(_DWORD *)(a4 + 24);
  re::MaterialTechniqueQualityLevelSetData::~MaterialTechniqueQualityLevelSetData(&v12);
  unint64_t v10 = (re::IntrospectionBase *)(*(void *)(a4 + 32) + 104 * *(void *)(a4 + 16) - 104);
  re::introspectionInitElement(a2, a3, a1[6], v10);
  return v10;
}

uint64_t re::IntrospectionDynamicArray<re::MaterialTechniqueQualityLevelSetData>::size(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::MaterialTechniqueQualityLevelSetData>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 104 * a3;
}

{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 104 * a3;
}

void re::DynamicArray<re::MaterialTechniqueQualityLevelSetData>::resize(_anonymous_namespace_ *a1, unint64_t a2)
{
  uint64_t v3 = a1;
  unint64_t v4 = *((void *)a1 + 2);
  if (v4 >= a2)
  {
    if (v4 <= a2) {
      return;
    }
    uint64_t v9 = 104 * a2;
    unint64_t v10 = a2;
    do
    {
      re::MaterialTechniqueQualityLevelSetData::~MaterialTechniqueQualityLevelSetData((const re::DynamicString **)(*((void *)v3 + 4) + v9));
      ++v10;
      v9 += 104;
    }
    while (v10 < *((void *)v3 + 2));
  }
  else
  {
    if (*((void *)a1 + 1) < a2)
    {
      a1 = (_anonymous_namespace_ *)re::DynamicArray<re::MaterialTechniqueQualityLevelSetData>::setCapacity(a1, a2);
      unint64_t v4 = *((void *)v3 + 2);
    }
    unint64_t v5 = a2 - v4;
    if (a2 > v4)
    {
      uint64_t v6 = 104 * v4;
      do
      {
        uint64_t v7 = *((void *)v3 + 4) + v6;
        *(_OWORD *)uint64_t v7 = 0u;
        *(_OWORD *)(v7 + 16) = 0u;
        uint64_t v8 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((void *)v7, 0);
        *(_OWORD *)(v7 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0u;
        *(_OWORD *)(v7 + 48) = 0u;
        v7 += 32;
        a1 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((void *)v7, 0);
        *(void *)(v7 + 64) = 0;
        *(void *)(v7 + 40) = 0;
        *(void *)(v7 + 48) = 0;
        *(void *)(v7 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0;
        v6 += 104;
        *(_DWORD *)(v7 + 56) = 0;
        --v5;
      }
      while (v5);
    }
  }
  *((void *)v3 + 2) = a2;
  ++*((_DWORD *)v3 + 6);
}

void *re::TypeBuilderHelper::registerDynamicArray<re::MaterialTechniqueQualityLevelSetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)a1 = a3;
  uint64_t result = re::DynamicArray<re::MaterialTechniqueQualityLevelSetData>::setCapacity((void *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MaterialTechniqueQualityLevelSetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::MaterialTechniqueQualityLevelSetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  if (*(re::Allocator **)a1 == a3)
  {
    re::DynamicArray<re::MaterialTechniqueQualityLevelSetData>::clear(a1);
  }
  else
  {
    re::DynamicArray<re::MaterialTechniqueQualityLevelSetData>::deinit(a1);
    *(void *)a1 = a3;
    re::DynamicArray<re::MaterialTechniqueQualityLevelSetData>::setCapacity((void *)a1, a4);
    ++*(_DWORD *)(a1 + 24);
  }
  re::DynamicArray<re::MaterialTechniqueQualityLevelSetData>::resize((_anonymous_namespace_ *)a1, a4);
  {
    re::TypeRegistry::typeInfo(*(void **)a2, *(void *)(*(void *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    uint64_t v9 = *(void *)(a1 + 16);
    if (v9)
    {
      unint64_t v10 = *(char **)(a1 + 32);
      uint64_t v11 = 104 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 104;
        v11 -= 104;
      }
      while (v11);
    }
  }
}

uint64_t re::DynamicArray<re::MaterialTechniqueQualityLevelSetData>::clear(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void *)(result + 16);
  *(void *)(result + 16) = 0;
  if (v2)
  {
    uint64_t result = *(void *)(result + 32);
    uint64_t v3 = 104 * v2;
    do
    {
      re::MaterialTechniqueQualityLevelSetData::~MaterialTechniqueQualityLevelSetData((const re::DynamicString **)result);
      uint64_t result = v4 + 104;
      v3 -= 104;
    }
    while (v3);
  }
  ++*(_DWORD *)(v1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MaterialTechniqueQualityLevelSetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 32) + 104 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MaterialTechniqueQualityLevelSetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MaterialTechniqueQualityLevelSetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 24))
  {
    int v3 = a1[3];
    unint64_t v4 = *(void *)(v2 + 16);
    if (v3 < (int)v4) {
      a1[3] = ++v3;
    }
    if (v4 <= v3) {
      return 0;
    }
    else {
      return *(void *)(v2 + 32) + 104 * v3;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MaterialTechniqueQualityLevelSetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, result);
  }
  return result;
}

void *re::IntrospectionHashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::~IntrospectionHashTable(void *a1)
{
  *a1 = &unk_26E6C0400;
  uint64_t v2 = (uint64_t)(a1 + 6);
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 8));
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionHashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::~IntrospectionHashTable(void *a1)
{
  *a1 = &unk_26E6C0400;
  uint64_t v2 = (uint64_t)(a1 + 6);
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 8));
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

double re::IntrospectionHashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::construct(uint64_t a1, uint64_t a2)
{
  double result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 36) = 0x7FFFFFFF;
  return result;
}

double re::IntrospectionHashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::destroy(uint64_t a1, uint64_t *a2)
{
  return re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a2);
}

void re::IntrospectionHashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a2);
  if (a4 <= 3) {
    signed int v7 = 3;
  }
  else {
    signed int v7 = a4;
  }
  re::HashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init((uint64_t)a2, a3, v7);
}

void re::IntrospectionHashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(uint64_t a1, uint64_t a2, unsigned int a3)
{
}

uint64_t re::IntrospectionHashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::size(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 28);
}

void re::IntrospectionHashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(uint64_t a1, uint64_t a2)
{
}

re::IntrospectionBase *re::IntrospectionHashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addElement(uint64_t a1, re *a2, int a3, uint64_t a4, re::DynamicString *a5)
{
  long long v11 = 0u;
  memset(v10, 0, sizeof(v10));
  DWORD1(v11) = 0x7FFFFFFF;
  uint64_t v8 = (re::IntrospectionBase *)re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addOrReplace(a4, a5, (uint64_t *)v10);
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v10);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 64), v8);
  return v8;
}

uint64_t re::IntrospectionHashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::iterate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(unsigned int *)(a2 + 32);
  if (v5)
  {
    uint64_t v6 = 0;
    signed int v7 = (int *)(*(void *)(a2 + 16) + 8);
    while (1)
    {
      int v8 = *v7;
      v7 += 24;
      if (v8 < 0) {
        break;
      }
      if (v5 == ++v6)
      {
        LODWORD(v6) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v6) = 0;
  }
  if (v5 == v6) {
    return 1;
  }
  uint64_t v10 = v6;
  do
  {
    uint64_t result = std::function<BOOL ()(void const*,void *)>::operator()(a3, *(void *)(a2 + 16) + 96 * v10 + 16, *(void *)(a2 + 16) + 96 * v10 + 48);
    if (!result) {
      break;
    }
    int v11 = *(_DWORD *)(a2 + 32) <= (v6 + 1) ? v6 + 1 : *(_DWORD *)(a2 + 32);
    while (1)
    {
      uint64_t v10 = (v6 + 1);
      if (v11 - 1 == v6) {
        break;
      }
      LODWORD(v6) = v6 + 1;
      int v12 = v10;
      if ((*(_DWORD *)(*(void *)(a2 + 16) + 96 * v10 + 8) & 0x80000000) != 0) {
        goto LABEL_18;
      }
    }
    int v12 = v11;
LABEL_18:
    LODWORD(v6) = v12;
  }
  while (v5 != v12);
  return result;
}

double re::IntrospectionHashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::destroyKey(int a1, re::DynamicString *this)
{
  return re::DynamicString::deinit(this);
}

uint64_t re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addOrReplace(uint64_t a1, re::DynamicString *a2, uint64_t *a3)
{
  unint64_t v6 = re::Hash<re::DynamicString>::operator()((uint64_t)&v14, (uint64_t)a2);
  unint64_t v7 = v6;
  if (!*(void *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  unint64_t v8 = v6 % *(unsigned int *)(a1 + 24);
  uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v8);
  if (v9 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v11 = re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v12 = *(void *)(a1 + 16) + 96 * v11;
    return v12 + 48;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  while (!re::DynamicString::operator==(v10 + 96 * v9 + 16, (uint64_t)a2))
  {
    uint64_t v9 = *(_DWORD *)(v10 + 96 * v9 + 8) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=(v10 + 96 * v9 + 48, a3);
  ++*(_DWORD *)(a1 + 40);
  uint64_t v12 = *(void *)(a1 + 16) + 96 * v9;
  return v12 + 48;
}

void re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
  re::HashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init(a1, a3, 3);
}

double re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t *a1)
{
  re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a1);
  return re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a1);
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

void re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (*a1 == a3)
  {
    re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear((uint64_t)a1);
  }
  else
  {
    re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a1);
    re::HashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init((uint64_t)a1, a3, 3);
  }
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke(uint64_t a1, void **a2, re::Allocator *a3, re::DynamicString *a4)
{
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  Instance = (uint64_t *)re::TypeInfo::createInstance((re::TypeInfo *)v11, a3, 0);
  uint64_t v9 = re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addOrReplace(a1, a4, Instance);
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  re::TypeInfo::releaseInstance((re::TypeInfo *)v11, Instance, a3, 0);
  return v9;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = re::Hash<re::DynamicString>::operator()((uint64_t)&v8, a2);
  if (!*(void *)a1) {
    return 0;
  }
  uint64_t v5 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * (v4 % *(unsigned int *)(a1 + 24)));
  if (v5 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 16);
  while (!re::DynamicString::operator==(v6 + 96 * v5 + 16, a2))
  {
    uint64_t v5 = *(_DWORD *)(v6 + 96 * v5 + 8) & 0x7FFFFFFF;
    if (v5 == 0x7FFFFFFF) {
      return 0;
    }
  }
  return v6 + 96 * v5 + 48;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 40, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 40);
  *(unsigned char *)(result + 16) = 0;
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (*((_DWORD *)a1 + 2) == *(_DWORD *)(*a1 + 40))
  {
    uint64_t v3 = *(unsigned int *)(v2 + 32);
    if (*((unsigned char *)a1 + 16))
    {
      int v4 = *((_DWORD *)a1 + 8);
      if (v4 == v3)
      {
        LODWORD(v5) = *(_DWORD *)(v2 + 32);
      }
      else
      {
        uint64_t v8 = a1[3];
        unsigned int v9 = *(_DWORD *)(v8 + 32);
        unsigned int v10 = v4 + 1;
        do
        {
          LODWORD(v5) = v10;
          *((_DWORD *)a1 + 8) = v10;
          if (v10 >= v9) {
            break;
          }
          int v11 = *(_DWORD *)(*(void *)(v8 + 16) + 96 * v10++ + 8);
        }
        while ((v11 & 0x80000000) == 0);
      }
    }
    else
    {
      uint64_t v5 = 0;
      if (v3)
      {
        uint64_t v6 = (int *)(*(void *)(v2 + 16) + 8);
        while (1)
        {
          int v7 = *v6;
          v6 += 24;
          if (v7 < 0) {
            break;
          }
          if (v3 == ++v5)
          {
            LODWORD(v5) = *(_DWORD *)(v2 + 32);
            break;
          }
        }
      }
      *((unsigned char *)a1 + 16) = 1;
      a1[3] = v2;
      a1[4] = v5;
      LODWORD(v3) = *(_DWORD *)(v2 + 32);
    }
    return v5 != v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 583);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(void *)a1 + 40)) {
    return *(void *)(*(void *)(a1 + 24) + 16) + 96 * *(unsigned int *)(a1 + 32) + 16;
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 598);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(void *)a1 + 40)) {
    return *(void *)(*(void *)(a1 + 24) + 16) + 96 * *(unsigned int *)(a1 + 32) + 48;
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 607);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 40))
  {
    uint64_t v2 = *(uint64_t (**)(uint64_t, _DWORD *))(*(void *)a2 + 40);
    return v2(a2, a1);
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 616);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

void *re::IntrospectionDynamicArray<re::ShaderAPIFlags::Values>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::ShaderAPIFlags::Values>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionDynamicArray<re::ShaderAPIFlags::Values>::construct(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::ShaderAPIFlags::Values>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<unsigned long>::deinit(a2);
}

void *re::IntrospectionDynamicArray<re::ShaderAPIFlags::Values>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<unsigned long>::deinit(a2);
  *(void *)a2 = a3;
  uint64_t result = re::DynamicArray<re::EvaluationCommand>::setCapacity((void *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::ShaderAPIFlags::Values>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (!*(void *)a4)
  {
    *(void *)a4 = a2;
    re::DynamicArray<re::EvaluationCommand>::setCapacity((void *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  unint64_t v10 = *(void *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
    {
      re::DynamicArray<re::ShaderAPIFlags::Values>::resize(a4, a5);
    }
  }
  else
  {
    re::DynamicArray<re::EvaluationCommand>::setCapacity((void *)a4, a5);
    for (unint64_t i = a5 - *(void *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::ShaderAPIFlags::Values>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *this)
{
  int v10 = 0;
  re::DynamicArray<re::ShaderAPIFlags::Values>::add(this, &v10);
  uint64_t v8 = (re::IntrospectionBase *)(*((void *)this + 4) + 4 * *((void *)this + 2) - 4);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v8);
  return v8;
}

uint64_t re::IntrospectionDynamicArray<re::ShaderAPIFlags::Values>::size(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::ShaderAPIFlags::Values>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 4 * a3;
}

{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 4 * a3;
}

void re::DynamicArray<re::ShaderAPIFlags::Values>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 16);
  if (v4 >= a2)
  {
    if (v4 <= a2) {
      return;
    }
  }
  else
  {
    if (*(void *)(a1 + 8) < a2)
    {
      re::DynamicArray<re::EvaluationCommand>::setCapacity((void *)a1, a2);
      unint64_t v4 = *(void *)(a1 + 16);
    }
    if (v4 < a2)
    {
      uint64_t v5 = (void *)(*(void *)(a1 + 32) + 4 * v4);
      uint64_t v6 = 4 * a2 - 4 * v4;
      if (v6 >= 1) {
        bzero(v5, 4 * (((unint64_t)v6 >> 2) - ((unint64_t)v6 > 3)) + 4);
      }
    }
  }
  *(void *)(a1 + 16) = a2;
  ++*(_DWORD *)(a1 + 24);
}

void *re::DynamicArray<re::ShaderAPIFlags::Values>::add(void *this, _DWORD *a2)
{
  uint64_t v3 = this;
  unint64_t v4 = this[2];
  if (v4 >= this[1])
  {
    this = re::DynamicArray<re::ShaderAPIFlags::Values>::growCapacity(this, v4 + 1);
    unint64_t v4 = v3[2];
  }
  *(_DWORD *)(v3[4] + 4 * v4) = *a2;
  v3[2] = v4 + 1;
  ++*((_DWORD *)v3 + 6);
  return this;
}

void *re::DynamicArray<re::ShaderAPIFlags::Values>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    unint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::EvaluationCommand>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::EvaluationCommand>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void *re::TypeBuilderHelper::registerDynamicArray<re::ShaderAPIFlags::Values>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)a1 = a3;
  uint64_t result = re::DynamicArray<re::EvaluationCommand>::setCapacity((void *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ShaderAPIFlags::Values>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::ShaderAPIFlags::Values>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  if (*(re::Allocator **)a1 == a3)
  {
    *(void *)(a1 + 16) = 0;
  }
  else
  {
    re::DynamicArray<unsigned long>::deinit(a1);
    *(void *)a1 = a3;
    re::DynamicArray<re::EvaluationCommand>::setCapacity((void *)a1, a4);
  }
  ++*(_DWORD *)(a1 + 24);
  re::DynamicArray<re::ShaderAPIFlags::Values>::resize(a1, a4);
  {
    re::TypeRegistry::typeInfo(*(void **)a2, *(void *)(*(void *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    uint64_t v9 = *(void *)(a1 + 16);
    if (v9)
    {
      int v10 = *(char **)(a1 + 32);
      uint64_t v11 = 4 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 4;
        v11 -= 4;
      }
      while (v11);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ShaderAPIFlags::Values>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 32) + 4 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ShaderAPIFlags::Values>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ShaderAPIFlags::Values>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 24))
  {
    int v3 = a1[3];
    unint64_t v4 = *(void *)(v2 + 16);
    if (v3 < (int)v4) {
      a1[3] = ++v3;
    }
    if (v4 <= v3) {
      return 0;
    }
    else {
      return *(void *)(v2 + 32) + 4 * v3;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ShaderAPIFlags::Values>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, result);
  }
  return result;
}

void *re::IntrospectionHashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::~IntrospectionHashTable(void *a1)
{
  *a1 = &unk_26E6C0400;
  uint64_t v2 = (uint64_t)(a1 + 6);
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 8));
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionHashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::~IntrospectionHashTable(void *a1)
{
  *a1 = &unk_26E6C0400;
  uint64_t v2 = (uint64_t)(a1 + 6);
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 8));
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

double re::IntrospectionHashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::construct(uint64_t a1, uint64_t a2)
{
  double result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 36) = 0x7FFFFFFF;
  return result;
}

double re::IntrospectionHashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::destroy(uint64_t a1, uint64_t *a2)
{
  return re::HashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a2);
}

void re::IntrospectionHashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  re::HashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a2);
  if (a4 <= 3) {
    signed int v7 = 3;
  }
  else {
    signed int v7 = a4;
  }
  re::HashTable<unsigned long long,re::Function<void ()(void)>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)a2, a3, v7);
}

void re::IntrospectionHashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(uint64_t a1, uint64_t a2, unsigned int a3)
{
}

uint64_t re::IntrospectionHashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::size(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 28);
}

void re::IntrospectionHashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(uint64_t a1, uint64_t a2)
{
}

re::IntrospectionBase *re::IntrospectionHashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addElement(uint64_t a1, re *a2, int a3, uint64_t a4, re::DynamicString *a5)
{
  long long v10 = 0uLL;
  uint64_t v8 = (re::IntrospectionBase *)re::HashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addOrReplace(a4, a5, &v10);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 64), v8);
  return v8;
}

uint64_t re::IntrospectionHashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::iterate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(unsigned int *)(a2 + 32);
  if (v5)
  {
    uint64_t v6 = 0;
    signed int v7 = (int *)(*(void *)(a2 + 16) + 8);
    while (1)
    {
      int v8 = *v7;
      v7 += 16;
      if (v8 < 0) {
        break;
      }
      if (v5 == ++v6)
      {
        LODWORD(v6) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v6) = 0;
  }
  if (v5 == v6) {
    return 1;
  }
  uint64_t v10 = v6;
  do
  {
    uint64_t result = std::function<BOOL ()(void const*,void *)>::operator()(a3, *(void *)(a2 + 16) + (v10 << 6) + 16, *(void *)(a2 + 16) + (v10 << 6) + 48);
    if (!result) {
      break;
    }
    int v11 = *(_DWORD *)(a2 + 32) <= (v6 + 1) ? v6 + 1 : *(_DWORD *)(a2 + 32);
    while (1)
    {
      uint64_t v10 = (v6 + 1);
      if (v11 - 1 == v6) {
        break;
      }
      LODWORD(v6) = v6 + 1;
      int v12 = v10;
      if ((*(_DWORD *)(*(void *)(a2 + 16) + (v10 << 6) + 8) & 0x80000000) != 0) {
        goto LABEL_18;
      }
    }
    int v12 = v11;
LABEL_18:
    LODWORD(v6) = v12;
  }
  while (v5 != v12);
  return result;
}

double re::IntrospectionHashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::destroyKey(int a1, re::DynamicString *this)
{
  return re::DynamicString::deinit(this);
}

unint64_t re::HashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addOrReplace(uint64_t a1, re::DynamicString *a2, _OWORD *a3)
{
  unint64_t v6 = re::Hash<re::DynamicString>::operator()((uint64_t)&v15, (uint64_t)a2);
  unint64_t v7 = v6;
  if (!*(void *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  unint64_t v8 = v6 % *(unsigned int *)(a1 + 24);
  uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v8);
  if (v9 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v12 = re::HashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsCopy(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    unint64_t v13 = *(void *)(a1 + 16) + ((unint64_t)v12 << 6);
    return v13 + 48;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  while (1)
  {
    uint64_t v11 = v10 + (v9 << 6);
    if (re::DynamicString::operator==(v11 + 16, (uint64_t)a2)) {
      break;
    }
    uint64_t v9 = *(_DWORD *)(v11 + 8) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  *(_OWORD *)(v11 + 48) = *a3;
  ++*(_DWORD *)(a1 + 40);
  unint64_t v13 = *(void *)(a1 + 16) + (v9 << 6);
  return v13 + 48;
}

void re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
  re::HashTable<unsigned long long,re::Function<void ()(void)>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init(a1, a3, 3);
}

double re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t *a1)
{
  re::HashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a1);
  return re::HashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a1);
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

void re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (*a1 == a3)
  {
    re::HashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear((uint64_t)a1);
  }
  else
  {
    re::HashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a1);
    re::HashTable<unsigned long long,re::Function<void ()(void)>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)a1, a3, 3);
  }
}

unint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke(uint64_t a1, void **a2, re::Allocator *a3, re::DynamicString *a4)
{
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  Instance = re::TypeInfo::createInstance((re::TypeInfo *)v11, a3, 0);
  unint64_t v9 = re::HashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addOrReplace(a1, a4, Instance);
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  re::TypeInfo::releaseInstance((re::TypeInfo *)v11, Instance, a3, 0);
  return v9;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = re::Hash<re::DynamicString>::operator()((uint64_t)&v9, a2);
  if (!*(void *)a1) {
    return 0;
  }
  uint64_t v5 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * (v4 % *(unsigned int *)(a1 + 24)));
  if (v5 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 16);
  while (1)
  {
    uint64_t v7 = v6 + (v5 << 6);
    if (re::DynamicString::operator==(v7 + 16, a2)) {
      break;
    }
    uint64_t v5 = *(_DWORD *)(v7 + 8) & 0x7FFFFFFF;
    if (v5 == 0x7FFFFFFF) {
      return 0;
    }
  }
  return v7 + 48;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 40, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 40);
  *(unsigned char *)(result + 16) = 0;
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (*((_DWORD *)a1 + 2) == *(_DWORD *)(*a1 + 40))
  {
    uint64_t v3 = *(unsigned int *)(v2 + 32);
    if (*((unsigned char *)a1 + 16))
    {
      int v4 = *((_DWORD *)a1 + 8);
      if (v4 == v3)
      {
        LODWORD(v5) = *(_DWORD *)(v2 + 32);
      }
      else
      {
        uint64_t v8 = a1[3];
        unsigned int v9 = *(_DWORD *)(v8 + 32);
        unsigned int v10 = v4 + 1;
        do
        {
          LODWORD(v5) = v10;
          *((_DWORD *)a1 + 8) = v10;
          if (v10 >= v9) {
            break;
          }
          int v11 = *(_DWORD *)(*(void *)(v8 + 16) + ((unint64_t)v10++ << 6) + 8);
        }
        while ((v11 & 0x80000000) == 0);
      }
    }
    else
    {
      uint64_t v5 = 0;
      if (v3)
      {
        uint64_t v6 = (int *)(*(void *)(v2 + 16) + 8);
        while (1)
        {
          int v7 = *v6;
          v6 += 16;
          if (v7 < 0) {
            break;
          }
          if (v3 == ++v5)
          {
            LODWORD(v5) = *(_DWORD *)(v2 + 32);
            break;
          }
        }
      }
      *((unsigned char *)a1 + 16) = 1;
      a1[3] = v2;
      a1[4] = v5;
      LODWORD(v3) = *(_DWORD *)(v2 + 32);
    }
    return v5 != v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 583);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(void *)a1 + 40)) {
    return *(void *)(*(void *)(a1 + 24) + 16) + ((unint64_t)*(unsigned int *)(a1 + 32) << 6) + 16;
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 598);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(void *)a1 + 40)) {
    return *(void *)(*(void *)(a1 + 24) + 16) + ((unint64_t)*(unsigned int *)(a1 + 32) << 6) + 48;
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 607);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 40))
  {
    uint64_t v2 = *(uint64_t (**)(uint64_t, _DWORD *))(*(void *)a2 + 40);
    return v2(a2, a1);
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 616);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

void *re::IntrospectionDynamicArray<re::FunctionLink>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::FunctionLink>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionDynamicArray<re::FunctionLink>::construct(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::FunctionLink>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::FunctionLink>::deinit(a2);
}

void *re::IntrospectionDynamicArray<re::FunctionLink>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<re::FunctionLink>::deinit(a2);
  *(void *)a2 = a3;
  uint64_t result = re::DynamicArray<re::FunctionLink>::setCapacity((void *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::FunctionLink>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (!*(void *)a4)
  {
    *(void *)a4 = a2;
    re::DynamicArray<re::FunctionLink>::setCapacity((void *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  unint64_t v10 = *(void *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
    {
      re::DynamicArray<re::FunctionLink>::resize((_anonymous_namespace_ *)a4, a5);
    }
  }
  else
  {
    re::DynamicArray<re::FunctionLink>::setCapacity((void *)a4, a5);
    for (unint64_t i = a5 - *(void *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::FunctionLink>::addElement(re::Allocator **a1, re *a2, int a3, _anonymous_namespace_ *a4)
{
  long long v17 = 0u;
  long long v18 = 0u;
  memset(v16, 0, sizeof(v16));
  long long v15 = 0u;
  long long v13 = 0u;
  memset(v14, 0, sizeof(v14));
  long long v12 = 0u;
  uint64_t v8 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((void *)&v12 + 1, 0);
  memset(&v14[1], 0, 24);
  re::DynamicString::setCapacity((void *)v14 + 1, 0);
  long long v15 = 0u;
  memset(v16, 0, 28);
  memset((char *)&v14[2] + 8, 0, 52);
  *(void *)((char *)&v16[1] + 12) = 0x7FFFFFFFLL;
  memset((char *)&v16[2] + 8, 0, 36);
  *(void *)((char *)&v16[4] + 12) = 0x7FFFFFFFLL;
  *((void *)&v18 + 1) = 0;
  long long v17 = 0uLL;
  *((void *)&v16[5] + 1) = 0;
  LODWORD(v18) = 0;
  re::DynamicArray<re::FunctionLink>::add(a4, (uint64_t)&v12);
  if (*((void *)&v16[5] + 1))
  {
    if (*((void *)&v18 + 1)) {
      (*(void (**)(void))(**((void **)&v16[5] + 1) + 40))();
    }
    *((void *)&v18 + 1) = 0;
    long long v17 = 0uLL;
    *((void *)&v16[5] + 1) = 0;
    LODWORD(v18) = v18 + 1;
  }
  re::HashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)&v16[2] + 1);
  double v9 = re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)&v15 + 1);
  if (*(void *)&v14[4])
  {
    if ((void)v15) {
      (*(void (**)(double))(**(void **)&v14[4] + 40))(v9);
    }
    *(void *)&long long v15 = 0;
    memset(&v14[4], 0, 24);
    ++DWORD2(v14[5]);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)((char *)&v14[2] + 8));
  if (*((void *)&v14[0] + 1))
  {
    if (v14[1]) {
      (*(void (**)(void))(**((void **)&v14[0] + 1) + 40))();
    }
    memset((char *)v14 + 8, 0, 32);
  }
  if (*((void *)&v12 + 1) && (v13 & 1) != 0) {
    (*(void (**)(void))(**((void **)&v12 + 1) + 40))();
  }
  unint64_t v10 = (re::IntrospectionBase *)(*((void *)a4 + 4) + 272 * *((void *)a4 + 2) - 272);
  re::introspectionInitElement(a2, a3, a1[6], v10);
  return v10;
}

uint64_t re::IntrospectionDynamicArray<re::FunctionLink>::size(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::FunctionLink>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 272 * a3;
}

{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 272 * a3;
}

void re::DynamicArray<re::FunctionLink>::resize(_anonymous_namespace_ *a1, unint64_t a2)
{
  uint64_t v3 = a1;
  unint64_t v4 = *((void *)a1 + 2);
  if (v4 >= a2)
  {
    if (v4 <= a2) {
      return;
    }
    uint64_t v9 = 272 * a2 + 136;
    unint64_t v10 = a2;
    do
    {
      int v11 = (uint64_t *)(*((void *)v3 + 4) + v9);
      re::DynamicArray<unsigned long>::deinit((uint64_t)(v11 + 12));
      re::HashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v11 + 6);
      re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v11);
      re::DynamicArray<unsigned long>::deinit((uint64_t)(v11 - 5));
      re::AssetHandle::~AssetHandle((re::AssetHandle *)(v11 - 8));
      re::DynamicString::deinit((re::DynamicString *)(v11 - 12));
      re::DynamicString::deinit((re::DynamicString *)(v11 - 16));
      ++v10;
      v9 += 272;
    }
    while (v10 < *((void *)v3 + 2));
  }
  else
  {
    if (*((void *)a1 + 1) < a2)
    {
      a1 = (_anonymous_namespace_ *)re::DynamicArray<re::FunctionLink>::setCapacity(a1, a2);
      unint64_t v4 = *((void *)v3 + 2);
    }
    unint64_t v5 = a2 - v4;
    if (a2 > v4)
    {
      uint64_t v6 = 272 * v4;
      do
      {
        uint64_t v7 = *((void *)v3 + 4) + v6;
        *(unsigned char *)uint64_t v7 = 0;
        *(_OWORD *)(v7 + 24) = 0u;
        *(_OWORD *)(v7 + 8) = 0u;
        uint64_t v8 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((void *)(v7 + 8), 0);
        *(_OWORD *)(v7 + 40) = 0u;
        v7 += 40;
        *(_OWORD *)(v7 + 16) = 0u;
        a1 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((void *)v7, 0);
        *(_OWORD *)(v7 + 120) = 0u;
        *(void *)(v7 + 136) = 0;
        *(_OWORD *)(v7 + 104) = 0u;
        *(_OWORD *)(v7 + 88) = 0u;
        *(_OWORD *)(v7 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0u;
        *(_OWORD *)(v7 + 48) = 0u;
        *(_OWORD *)(v7 + 64) = 0u;
        *(_DWORD *)(v7 + 80) = 0;
        *(_DWORD *)(v7 + 1re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0x7FFFFFFF;
        *(_OWORD *)(v7 + 160) = 0u;
        *(_OWORD *)(v7 + 176) = 0u;
        *(_OWORD *)(v7 + 144) = 0u;
        *(_DWORD *)(v7 + 180) = 0x7FFFFFFF;
        *(void *)(v7 + 224) = 0;
        *(void *)(v7 + 200) = 0;
        *(void *)(v7 + 208) = 0;
        *(void *)(v7 + 192) = 0;
        v6 += 272;
        *(_DWORD *)(v7 + 216) = 0;
        --v5;
      }
      while (v5);
    }
  }
  *((void *)v3 + 2) = a2;
  ++*((_DWORD *)v3 + 6);
}

uint64_t *re::DynamicArray<re::FunctionLink>::add(_anonymous_namespace_ *this, uint64_t a2)
{
  unint64_t v4 = *((void *)this + 2);
  if (v4 >= *((void *)this + 1))
  {
    re::DynamicArray<re::FunctionLink>::growCapacity(this, v4 + 1);
    unint64_t v4 = *((void *)this + 2);
  }
  uint64_t v5 = *((void *)this + 4) + 272 * v4;
  *(unsigned char *)uint64_t v5 = *(unsigned char *)a2;
  *(_OWORD *)(v5 + 8) = 0u;
  *(_OWORD *)(v5 + 24) = 0u;
  *(void *)(v5 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = *(void *)(a2 + 32);
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(v5 + 8) = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a2 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0;
  uint64_t v9 = *(void *)(v5 + 16);
  uint64_t v8 = *(void *)(v5 + 24);
  *(void *)(v5 + 16) = v6;
  *(void *)(v5 + 24) = v7;
  *(void *)(a2 + 16) = v9;
  *(void *)(a2 + 24) = v8;
  *(_OWORD *)(v5 + 56) = 0u;
  *(_OWORD *)(v5 + 40) = 0u;
  *(void *)(v5 + 64) = *(void *)(a2 + 64);
  uint64_t v10 = *(void *)(a2 + 48);
  *(void *)(v5 + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  uint64_t v11 = *(void *)(a2 + 56);
  *(void *)(a2 + 64) = 0;
  uint64_t v13 = *(void *)(v5 + 48);
  uint64_t v12 = *(void *)(v5 + 56);
  *(void *)(v5 + 48) = v10;
  *(void *)(v5 + 56) = v11;
  *(void *)(a2 + 48) = v13;
  *(void *)(a2 + 56) = v12;
  *(void *)(v5 + 72) = 0;
  *(void *)(v5 + 80) = 0;
  *(void *)(v5 + 88) = 0;
  *(void *)(v5 + 80) = *(void *)(a2 + 80);
  *(void *)(a2 + 80) = 0;
  uint64_t v14 = *(void *)(v5 + 72);
  *(void *)(v5 + 72) = 0;
  *(void *)(v5 + 72) = *(void *)(a2 + 72);
  *(void *)(a2 + 72) = v14;
  uint64_t v15 = *(void *)(v5 + 88);
  *(void *)(v5 + 88) = *(void *)(a2 + 88);
  *(void *)(a2 + 88) = v15;
  *(void *)(v5 + 128) = 0;
  *(void *)(v5 + 104) = 0;
  *(void *)(v5 + 112) = 0;
  *(void *)(v5 + 96) = 0;
  *(_DWORD *)(v5 + 120) = 0;
  uint64_t v16 = *(void *)(a2 + 104);
  *(void *)(v5 + 96) = *(void *)(a2 + 96);
  *(void *)(v5 + 104) = v16;
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  uint64_t v17 = *(void *)(v5 + 112);
  *(void *)(v5 + 112) = *(void *)(a2 + 112);
  *(void *)(a2 + 112) = v17;
  uint64_t v18 = *(void *)(v5 + 128);
  *(void *)(v5 + 128) = *(void *)(a2 + 128);
  *(void *)(a2 + 128) = v18;
  ++*(_DWORD *)(a2 + 120);
  ++*(_DWORD *)(v5 + 120);
  *(_OWORD *)(v5 + 152) = 0u;
  *(_DWORD *)(v5 + 168) = 0;
  *(_OWORD *)(v5 + 136) = 0u;
  *(void *)(v5 + 172) = 0x7FFFFFFFLL;
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)(v5 + 136), (uint64_t *)(a2 + 136));
  *(_OWORD *)(v5 + 184) = 0u;
  v5 += 184;
  *(_DWORD *)(v5 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0;
  *(_OWORD *)(v5 + 16) = 0u;
  *(void *)(v5 + 36) = 0x7FFFFFFFLL;
  uint64_t result = re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)v5, (uint64_t *)(a2 + 184));
  *(void *)(v5 + 80) = 0;
  *(_DWORD *)(v5 + 72) = 0;
  *(void *)(v5 + 56) = 0;
  *(void *)(v5 + 64) = 0;
  *(void *)(v5 + 48) = 0;
  uint64_t v20 = *(void *)(a2 + 240);
  *(void *)(v5 + 48) = *(void *)(a2 + 232);
  *(void *)(v5 + 56) = v20;
  *(void *)(a2 + 2re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0;
  *(void *)(a2 + 240) = 0;
  uint64_t v21 = *(void *)(v5 + 64);
  *(void *)(v5 + 64) = *(void *)(a2 + 248);
  *(void *)(a2 + 248) = v21;
  uint64_t v22 = *(void *)(v5 + 80);
  *(void *)(v5 + 80) = *(void *)(a2 + 264);
  *(void *)(a2 + 264) = v22;
  ++*(_DWORD *)(a2 + 256);
  ++*(_DWORD *)(v5 + 72);
  ++*((void *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

void *re::DynamicArray<re::FunctionLink>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    unint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::FunctionLink>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::FunctionLink>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void *re::TypeBuilderHelper::registerDynamicArray<re::FunctionLink>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)a1 = a3;
  uint64_t result = re::DynamicArray<re::FunctionLink>::setCapacity((void *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::FunctionLink>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::FunctionLink>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  if (*(re::Allocator **)a1 == a3)
  {
    re::DynamicArray<re::FunctionLink>::clear(a1);
  }
  else
  {
    re::DynamicArray<re::FunctionLink>::deinit(a1);
    *(void *)a1 = a3;
    re::DynamicArray<re::FunctionLink>::setCapacity((void *)a1, a4);
    ++*(_DWORD *)(a1 + 24);
  }
  re::DynamicArray<re::FunctionLink>::resize((_anonymous_namespace_ *)a1, a4);
  {
    re::TypeRegistry::typeInfo(*(void **)a2, *(void *)(*(void *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    uint64_t v9 = *(void *)(a1 + 16);
    if (v9)
    {
      uint64_t v10 = *(char **)(a1 + 32);
      uint64_t v11 = 272 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 272;
        v11 -= 272;
      }
      while (v11);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::FunctionLink>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 32) + 272 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::FunctionLink>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::FunctionLink>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 24))
  {
    int v3 = a1[3];
    unint64_t v4 = *(void *)(v2 + 16);
    if (v3 < (int)v4) {
      a1[3] = ++v3;
    }
    if (v4 <= v3) {
      return 0;
    }
    else {
      return *(void *)(v2 + 32) + 272 * v3;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::FunctionLink>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, result);
  }
  return result;
}

void re::RenderGraphOptimizerProcessor::init(re::RenderGraphOptimizerProcessor *this, re::RenderGraphCompiled *a2)
{
  uint64_t v5 = a2;
  uint64_t v132 = *MEMORY[0x263EF8340];
  *((void *)a2 + 69) = 0;
  ++*((_DWORD *)a2 + 140);
  re::DynamicArray<re::RenderGraphOptimizerProcessor::Vertex>::resize((void *)this + 17, *(void *)(*((void *)a2 + 37) + 16));
  unsigned int v119 = 0;
  uint64_t v7 = *((void *)v5 + 37);
  unint64_t v8 = *(void *)(v7 + 16);
  if (v8)
  {
    unsigned int v9 = 0;
    uint64_t v10 = (void *)((char *)v5 + 536);
    unint64_t v2 = 48;
    while (1)
    {
      unint64_t v11 = v9;
      unint64_t v3 = *((void *)this + 19);
      if (v3 <= v9)
      {
LABEL_234:
        uint64_t v117 = 0;
        long long v130 = 0u;
        long long v131 = 0u;
        long long v128 = 0u;
        long long v129 = 0u;
        long long v127 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v121 = 136315906;
        *(void *)uint64_t v122 = "operator[]";
        *(_WORD *)&v122[8] = 1024;
        *(_DWORD *)&v122[10] = 789;
        __int16 v123 = 2048;
        unint64_t v124 = v11;
        __int16 v125 = 2048;
        uint64_t v126 = (void *)v3;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_235:
        uint64_t v117 = 0;
        long long v130 = 0u;
        long long v131 = 0u;
        long long v128 = 0u;
        long long v129 = 0u;
        long long v127 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v121 = 136315906;
        *(void *)uint64_t v122 = "operator[]";
        *(_WORD *)&v122[8] = 1024;
        *(_DWORD *)&v122[10] = 789;
        __int16 v123 = 2048;
        unint64_t v124 = v11;
        __int16 v125 = 2048;
        uint64_t v126 = (void *)v3;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_236:
        uint64_t v117 = 0;
        long long v130 = 0u;
        long long v131 = 0u;
        long long v128 = 0u;
        long long v129 = 0u;
        long long v127 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v121 = 136315906;
        *(void *)uint64_t v122 = "operator[]";
        *(_WORD *)&v122[8] = 1024;
        *(_DWORD *)&v122[10] = 789;
        __int16 v123 = 2048;
        unint64_t v124 = v3;
        __int16 v125 = 2048;
        uint64_t v126 = (void *)v8;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_237;
      }
      uint64_t v12 = *((void *)this + 21);
      uint64_t v13 = v12 + 88 * v11;
      *(void *)(v13 + 64) = 0;
      ++*(_DWORD *)(v13 + 72);
      unint64_t v11 = v119;
      if (v3 <= v119) {
        goto LABEL_235;
      }
      uint64_t v14 = v12 + 88 * v119;
      *(void *)(v14 + 24) = 0;
      ++*(_DWORD *)(v14 + 32);
      unint64_t v3 = v119;
      if (v8 <= v119) {
        goto LABEL_236;
      }
      uint64_t v15 = *(void *)(v7 + 32);
      int v16 = *(_DWORD *)(v15 + 48 * v119);
      if (v16 == 1) {
        break;
      }
      if (!v16)
      {
        uint64_t v17 = v15 + 48 * v119;
        uint64_t v117 = *(void *)(v17 + 8) >> 1;
        uint64_t v118 = *(void *)(v17 + 24);
        uint64_t v18 = (_DWORD *)re::RenderGraphCompiled::targetDescription((uint64_t)v5, (uint64_t)&v117);
        unint64_t v8 = v119;
        unint64_t v3 = *((void *)this + 19);
        if (v3 <= v119) {
          goto LABEL_254;
        }
LABEL_11:
        *(unsigned char *)(*((void *)this + 21) + 88 * v8) = *v18 < 2u;
        if (*v18 == 2) {
          re::DynamicArray<int>::add((void *)v5 + 67, &v119);
        }
      }
      unsigned int v9 = v119 + 1;
      unsigned int v119 = v9;
      uint64_t v7 = *((void *)v5 + 37);
      unint64_t v8 = *(void *)(v7 + 16);
      if (v9 >= v8) {
        goto LABEL_14;
      }
    }
    uint64_t v19 = v15 + 48 * v119;
    uint64_t v117 = *(void *)(v19 + 8) >> 1;
    uint64_t v118 = *(void *)(v19 + 24);
    uint64_t v18 = (_DWORD *)re::RenderGraphCompiled::bufferDescription((uint64_t)v5, (uint64_t)&v117);
    unint64_t v8 = v119;
    unint64_t v3 = *((void *)this + 19);
    if (v3 <= v119) {
      goto LABEL_255;
    }
    goto LABEL_11;
  }
LABEL_14:
  re::DynamicArray<re::RenderGraphOptimizerProcessor::Vertex>::resize((void *)this + 12, *((void *)v5 + 44));
  uint64_t v10 = (void *)*((void *)v5 + 44);
  if (!v10) {
    return;
  }
  unint64_t v4 = 0;
  uint64_t v113 = (uint64_t)v5;
  do
  {
    if ((unint64_t)v10 <= v4) {
      goto LABEL_245;
    }
    uint64_t v10 = (void *)*((void *)this + 14);
    if ((unint64_t)v10 <= v4)
    {
LABEL_246:
      uint64_t v117 = 0;
      long long v130 = 0u;
      long long v131 = 0u;
      long long v128 = 0u;
      long long v129 = 0u;
      long long v127 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v121 = 136315906;
      *(void *)uint64_t v122 = "operator[]";
      *(_WORD *)&v122[8] = 1024;
      *(_DWORD *)&v122[10] = 789;
      __int16 v123 = 2048;
      unint64_t v124 = v4;
      __int16 v125 = 2048;
      uint64_t v126 = v10;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_247;
    }
    uint64_t v21 = *((void *)v5 + 46);
    uint64_t v22 = *((void *)this + 16);
    uint64_t v23 = v22 + 88 * v4;
    *(void *)(v23 + 64) = 0;
    int v114 = (void *)(v23 + 64);
    ++*(_DWORD *)(v23 + 72);
    *(void *)(v23 + 24) = 0;
    uint64_t v10 = (void *)(v23 + 24);
    ++*(_DWORD *)(v23 + 32);
    uint64_t v24 = v21 + 192 * v4;
    *(unsigned char *)uint64_t v23 = *(unsigned char *)(v24 + 168);
    uint64_t v25 = *(void *)(v24 + 56);
    if (!v25) {
      goto LABEL_230;
    }
    __int16 v116 = (_anonymous_namespace_ *)(v23 + 8);
    unint64_t v11 = *(void *)(v24 + 72);
    unint64_t v3 = v11 + (v25 << 6);
    uint64_t v26 = v22 + 88 * v4;
    long long v111 = (_DWORD **)(v26 + 80);
    uint64_t v112 = (_anonymous_namespace_ *)(v23 + 48);
    uint64_t v115 = (void *)(v26 + 40);
    do
    {
      uint64_t v27 = *(unsigned int *)(v11 + 4);
      unint64_t v2 = *(unsigned int *)(v11 + 52);
      switch((int)v27)
      {
        case 0:
        case 10:
          if (!*v114) {
            goto LABEL_25;
          }
          StringID v28 = *v111;
          uint64_t v29 = 12 * *v114;
          do
          {
            if (*v28 == v2) {
              goto LABEL_83;
            }
            v28 += 3;
            v29 -= 12;
          }
          while (v29);
LABEL_25:
          DWORD2(v127) = 0;
          *(void *)&long long v127 = v2;
          re::DynamicArray<re::RenderGraphResourceAllocationManager::FenceIndex>::add(v112, (uint64_t *)&v127);
          unint64_t v8 = *((void *)this + 19);
          if (v8 > v2)
          {
            uint64_t v30 = *((void *)this + 21);
            DWORD2(v127) = 0;
            uint64_t v31 = (_anonymous_namespace_ *)(v30 + 88 * v2 + 8);
LABEL_33:
            *(void *)&long long v127 = v4;
            goto LABEL_82;
          }
          uint64_t v117 = 0;
          long long v130 = 0u;
          long long v131 = 0u;
          long long v128 = 0u;
          long long v129 = 0u;
          long long v127 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          int v121 = 136315906;
          *(void *)uint64_t v122 = "operator[]";
          *(_WORD *)&v122[8] = 1024;
          *(_DWORD *)&v122[10] = 789;
          __int16 v123 = 2048;
          unint64_t v124 = v2;
          __int16 v125 = 2048;
          uint64_t v126 = (void *)v8;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_233:
          uint64_t v117 = 0;
          long long v130 = 0u;
          long long v131 = 0u;
          long long v128 = 0u;
          long long v129 = 0u;
          long long v127 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          int v121 = 136315906;
          *(void *)uint64_t v122 = "operator[]";
          *(_WORD *)&v122[8] = 1024;
          *(_DWORD *)&v122[10] = 789;
          __int16 v123 = 2048;
          unint64_t v124 = v2;
          __int16 v125 = 2048;
          uint64_t v126 = (void *)v8;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_234;
        case 1:
          if (!*v10) {
            goto LABEL_62;
          }
          uint64_t v44 = (int *)(*v115 + 8);
          uint64_t v45 = 12 * *v10;
          while (*(v44 - 2) != v2)
          {
            v44 += 3;
            v45 -= 12;
            if (!v45)
            {
LABEL_62:
              LODWORD(v127) = *(_DWORD *)(v11 + 52);
              int v39 = 1;
              DWORD1(v127) = *(_DWORD *)v11;
              DWORD2(v127) = 1;
              re::DynamicArray<re::RenderGraphResourceAllocationManager::FenceIndex>::add(v116, (uint64_t *)&v127);
              unint64_t v8 = *((void *)this + 19);
              if (v8 > v2)
              {
LABEL_63:
                uint64_t v31 = (_anonymous_namespace_ *)(*((void *)this + 21) + 88 * v2 + 48);
                LODWORD(v127) = v4;
                DWORD1(v127) = *(_DWORD *)v11;
                DWORD2(v127) = v39;
                goto LABEL_82;
              }
LABEL_241:
              uint64_t v117 = 0;
              long long v130 = 0u;
              long long v131 = 0u;
              long long v128 = 0u;
              long long v129 = 0u;
              long long v127 = 0u;
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              int v121 = 136315906;
              *(void *)uint64_t v122 = "operator[]";
              *(_WORD *)&v122[8] = 1024;
              *(_DWORD *)&v122[10] = 789;
              __int16 v123 = 2048;
              unint64_t v124 = v2;
              __int16 v125 = 2048;
              uint64_t v126 = (void *)v8;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_242:
              uint64_t v117 = 0;
              long long v130 = 0u;
              long long v131 = 0u;
              long long v128 = 0u;
              long long v129 = 0u;
              long long v127 = 0u;
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              int v121 = 136315906;
              *(void *)uint64_t v122 = "operator[]";
              *(_WORD *)&v122[8] = 1024;
              *(_DWORD *)&v122[10] = 789;
              __int16 v123 = 2048;
              unint64_t v124 = v2;
              __int16 v125 = 2048;
              uint64_t v126 = (void *)v8;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_243:
              uint64_t v117 = 0;
              long long v130 = 0u;
              long long v131 = 0u;
              long long v128 = 0u;
              long long v129 = 0u;
              long long v127 = 0u;
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              int v121 = 136315906;
              *(void *)uint64_t v122 = "operator[]";
              *(_WORD *)&v122[8] = 1024;
              *(_DWORD *)&v122[10] = 789;
              __int16 v123 = 2048;
              unint64_t v124 = v2;
              __int16 v125 = 2048;
              uint64_t v126 = (void *)v8;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_244:
              uint64_t v117 = 0;
              long long v130 = 0u;
              long long v131 = 0u;
              long long v128 = 0u;
              long long v129 = 0u;
              long long v127 = 0u;
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              int v121 = 136315906;
              *(void *)uint64_t v122 = "operator[]";
              *(_WORD *)&v122[8] = 1024;
              *(_DWORD *)&v122[10] = 789;
              __int16 v123 = 2048;
              unint64_t v124 = v2;
              __int16 v125 = 2048;
              uint64_t v126 = (void *)v8;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_245:
              uint64_t v117 = 0;
              long long v130 = 0u;
              long long v131 = 0u;
              long long v128 = 0u;
              long long v129 = 0u;
              long long v127 = 0u;
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              int v121 = 136315906;
              *(void *)uint64_t v122 = "operator[]";
              *(_WORD *)&v122[8] = 1024;
              *(_DWORD *)&v122[10] = 789;
              __int16 v123 = 2048;
              unint64_t v124 = v4;
              __int16 v125 = 2048;
              uint64_t v126 = v10;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
              goto LABEL_246;
            }
          }
          uint64_t v86 = *v44;
          if (!v86) {
            goto LABEL_165;
          }
          uint64_t v87 = *(void *)(v113 + 296);
          unint64_t v8 = *(void *)(v87 + 16);
          if (v8 <= v2) {
            goto LABEL_258;
          }
          uint64_t v88 = *((void *)this + v86 + 1);
          re::StringID::StringID((re::StringID *)&v121, (const StringID *)(*(void *)(v87 + 32) + 48 * v2 + 8));
          re::DynamicString::format((re::DynamicString *)"Action %u attempted to both \"Write\" and \"%s\" to resource %u (%s). Will use \"Write\".", (re::DynamicString *)&v127, v4, v88, v2, *(void *)&v122[4]);
          re::RenderGraphCompiled::addError(v113, (uint64_t)&v127);
          if ((void)v127)
          {
            if (BYTE8(v127)) {
              (*(void (**)(void))(*(void *)v127 + 40))();
            }
            long long v127 = 0u;
            long long v128 = 0u;
          }
          re::StringID::destroyString((re::StringID *)&v121);
LABEL_165:
          *uint64_t v44 = 1;
          int v89 = *(_DWORD *)v11;
          *(v44 - 1) = *(_DWORD *)v11;
          unint64_t v8 = *((void *)this + 19);
          if (v8 <= v2) {
            goto LABEL_253;
          }
          uint64_t v90 = *((void *)this + 21) + 88 * v2;
          uint64_t v91 = *(void *)(v90 + 64);
          if (v91)
          {
            unint64_t v2 = *(void *)(v90 + 80);
            uint64_t v92 = 12 * v91;
            while (v4 != *(_DWORD *)v2)
            {
              v2 += 12;
              v92 -= 12;
              if (!v92) {
                goto LABEL_170;
              }
            }
          }
          else
          {
LABEL_170:
            unint64_t v2 = 0;
          }
          if (*(_DWORD *)(v2 + 8))
          {
            re::DynamicString::format((re::DynamicString *)"Action %u shouldn't have in edge tag.", (re::DynamicString *)&v127, v4);
            re::RenderGraphCompiled::addError(v113, (uint64_t)&v127);
            if ((void)v127)
            {
              if (BYTE8(v127)) {
                (*(void (**)(void))(*(void *)v127 + 40))();
              }
            }
            int v89 = *(_DWORD *)v11;
          }
          *(_DWORD *)(v2 + 4) = v89;
          *(_DWORD *)(v2 + 8) = 1;
          goto LABEL_83;
        case 2:
          if (!*v10) {
            goto LABEL_38;
          }
          uint64_t v35 = (unsigned int *)(*v115 + 8);
          uint64_t v36 = 12 * *v10;
          break;
        case 3:
          if (!*v10) {
            goto LABEL_68;
          }
          uint64_t v46 = (unsigned int *)(*v115 + 8);
          uint64_t v47 = 12 * *v10;
          while (*(v46 - 2) != v2)
          {
            v46 += 3;
            v47 -= 12;
            if (!v47)
            {
LABEL_68:
              LODWORD(v127) = *(_DWORD *)(v11 + 52);
              *(void *)((char *)&v127 + 4) = 0x400000000;
              re::DynamicArray<re::RenderGraphResourceAllocationManager::FenceIndex>::add(v116, (uint64_t *)&v127);
              unint64_t v8 = *((void *)this + 19);
              if (v8 <= v2) {
                goto LABEL_242;
              }
              goto LABEL_69;
            }
          }
          if (*v46 <= 4 && ((1 << *v46) & 0x15) != 0) {
            goto LABEL_188;
          }
          uint64_t v94 = *(void *)(v113 + 296);
          unint64_t v8 = *(void *)(v94 + 16);
          if (v8 <= v2) {
            goto LABEL_261;
          }
          uint64_t v95 = *((void *)this + (int)*v46 + 1);
          re::StringID::StringID((re::StringID *)&v121, (const StringID *)(*(void *)(v94 + 32) + 48 * v2 + 8));
          re::DynamicString::format((re::DynamicString *)"Action %u attempted to both \"WriteStencil\" and \"%s\" to resource %u (%s). Will use \"WriteDepthStencil\".", (re::DynamicString *)&v127, v4, v95, v2, *(void *)&v122[4]);
          re::RenderGraphCompiled::addError(v113, (uint64_t)&v127);
          if ((void)v127)
          {
            if (BYTE8(v127)) {
              (*(void (**)(void))(*(void *)v127 + 40))();
            }
            long long v127 = 0u;
            long long v128 = 0u;
          }
          re::StringID::destroyString((re::StringID *)&v121);
LABEL_188:
          *uint64_t v46 = 4;
          unint64_t v8 = *((void *)this + 19);
          if (v8 <= v2) {
            goto LABEL_249;
          }
          uint64_t v96 = *((void *)this + 21) + 88 * v2;
          uint64_t v97 = *(void *)(v96 + 64);
          if (!v97) {
            goto LABEL_193;
          }
          unint64_t v2 = *(void *)(v96 + 80);
          uint64_t v98 = 12 * v97;
          do
          {
            if (v4 == *(_DWORD *)v2) {
              goto LABEL_194;
            }
            v2 += 12;
            v98 -= 12;
          }
          while (v98);
LABEL_193:
          unint64_t v2 = 0;
LABEL_194:
          unsigned int v99 = *(_DWORD *)(v2 + 8);
          BOOL v59 = v99 > 4;
          int v60 = 1 << v99;
          int v61 = 21;
          goto LABEL_195;
        case 4:
        case 11:
          if (!*v10) {
            goto LABEL_31;
          }
          uint64_t v32 = (_DWORD *)*v115;
          uint64_t v33 = 12 * *v10;
          do
          {
            if (*v32 == v2) {
              goto LABEL_83;
            }
            v32 += 3;
            v33 -= 12;
          }
          while (v33);
LABEL_31:
          DWORD2(v127) = 0;
          *(void *)&long long v127 = v2;
          re::DynamicArray<re::RenderGraphResourceAllocationManager::FenceIndex>::add(v116, (uint64_t *)&v127);
          unint64_t v8 = *((void *)this + 19);
          if (v8 <= v2) {
            goto LABEL_233;
          }
          uint64_t v34 = *((void *)this + 21);
          DWORD2(v127) = 0;
          uint64_t v31 = (_anonymous_namespace_ *)(v34 + 88 * v2 + 48);
          goto LABEL_33;
        case 5:
          if (!*v10) {
            goto LABEL_74;
          }
          uint64_t v48 = (_DWORD *)*v115;
          uint64_t v49 = 12 * *v10;
          while (*v48 != v2)
          {
            v48 += 3;
            v49 -= 12;
            if (!v49)
            {
LABEL_74:
              LODWORD(v127) = *(_DWORD *)(v11 + 52);
              *(void *)((char *)&v127 + 4) = 0x900000000;
              re::DynamicArray<re::RenderGraphResourceAllocationManager::FenceIndex>::add(v116, (uint64_t *)&v127);
              unint64_t v8 = *((void *)this + 19);
              if (v8 <= v2) {
                goto LABEL_243;
              }
              uint64_t v31 = (_anonymous_namespace_ *)(*((void *)this + 21) + 88 * v2 + 48);
              LODWORD(v127) = v4;
              *(void *)((char *)&v127 + 4) = 0x900000000;
              goto LABEL_82;
            }
          }
          goto LABEL_83;
        case 6:
          if (!*v10) {
            goto LABEL_44;
          }
          uint64_t v37 = (int *)(*v115 + 8);
          uint64_t v38 = 12 * *v10;
          while (*(v37 - 2) != v2)
          {
            v37 += 3;
            v38 -= 12;
            if (!v38)
            {
LABEL_44:
              LODWORD(v127) = *(_DWORD *)(v11 + 52);
              int v39 = 5;
              DWORD1(v127) = *(_DWORD *)v11;
              DWORD2(v127) = 5;
              re::DynamicArray<re::RenderGraphResourceAllocationManager::FenceIndex>::add(v116, (uint64_t *)&v127);
              unint64_t v8 = *((void *)this + 19);
              if (v8 > v2) {
                goto LABEL_63;
              }
LABEL_238:
              uint64_t v117 = 0;
              long long v130 = 0u;
              long long v131 = 0u;
              long long v128 = 0u;
              long long v129 = 0u;
              long long v127 = 0u;
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              int v121 = 136315906;
              *(void *)uint64_t v122 = "operator[]";
              *(_WORD *)&v122[8] = 1024;
              *(_DWORD *)&v122[10] = 789;
              __int16 v123 = 2048;
              unint64_t v124 = v2;
              __int16 v125 = 2048;
              uint64_t v126 = (void *)v8;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_239:
              uint64_t v117 = 0;
              long long v130 = 0u;
              long long v131 = 0u;
              long long v128 = 0u;
              long long v129 = 0u;
              long long v127 = 0u;
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              int v121 = 136315906;
              *(void *)uint64_t v122 = "operator[]";
              *(_WORD *)&v122[8] = 1024;
              *(_DWORD *)&v122[10] = 789;
              __int16 v123 = 2048;
              unint64_t v124 = v2;
              __int16 v125 = 2048;
              uint64_t v126 = (void *)v8;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_240:
              uint64_t v117 = 0;
              long long v130 = 0u;
              long long v131 = 0u;
              long long v128 = 0u;
              long long v129 = 0u;
              long long v127 = 0u;
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              int v121 = 136315906;
              *(void *)uint64_t v122 = "operator[]";
              *(_WORD *)&v122[8] = 1024;
              *(_DWORD *)&v122[10] = 789;
              __int16 v123 = 2048;
              unint64_t v124 = v2;
              __int16 v125 = 2048;
              uint64_t v126 = (void *)v8;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
              goto LABEL_241;
            }
          }
          uint64_t v62 = *v37;
          if (!v62) {
            goto LABEL_110;
          }
          uint64_t v63 = *(void *)(v113 + 296);
          unint64_t v8 = *(void *)(v63 + 16);
          if (v8 <= v2) {
            goto LABEL_256;
          }
          uint64_t v64 = *((void *)this + v62 + 1);
          re::StringID::StringID((re::StringID *)&v121, (const StringID *)(*(void *)(v63 + 32) + 48 * v2 + 8));
          re::DynamicString::format((re::DynamicString *)"Action %u attempted to both \"WriteResolve\" and \"%s\" to resource %u (%s). Will use \"WriteResolve\".", (re::DynamicString *)&v127, v4, v64, v2, *(void *)&v122[4]);
          re::RenderGraphCompiled::addError(v113, (uint64_t)&v127);
          if ((void)v127)
          {
            if (BYTE8(v127)) {
              (*(void (**)(void))(*(void *)v127 + 40))();
            }
            long long v127 = 0u;
            long long v128 = 0u;
          }
          re::StringID::destroyString((re::StringID *)&v121);
LABEL_110:
          *uint64_t v37 = 5;
          int v65 = *(_DWORD *)v11;
          *(v37 - 1) = *(_DWORD *)v11;
          unint64_t v8 = *((void *)this + 19);
          if (v8 > v2)
          {
            unint64_t v8 = 5;
            uint64_t v66 = *((void *)this + 21) + 88 * v2;
            uint64_t v67 = *(void *)(v66 + 64);
            if (v67)
            {
              unint64_t v2 = *(void *)(v66 + 80);
              uint64_t v68 = 12 * v67;
              while (v4 != *(_DWORD *)v2)
              {
                v2 += 12;
                v68 -= 12;
                if (!v68) {
                  goto LABEL_115;
                }
              }
            }
            else
            {
LABEL_115:
              unint64_t v2 = 0;
            }
            if (*(_DWORD *)(v2 + 8))
            {
              re::DynamicString::format((re::DynamicString *)"Action %u shouldn't have in edge tag.", (re::DynamicString *)&v127, v4);
              re::RenderGraphCompiled::addError(v113, (uint64_t)&v127);
              if (void)v127 && (BYTE8(v127)) {
                (*(void (**)(void))(*(void *)v127 + 40))();
              }
              int v65 = *(_DWORD *)v11;
            }
            *(_DWORD *)(v2 + 4) = v65;
            *(_DWORD *)(v2 + 8) = 5;
            goto LABEL_83;
          }
          goto LABEL_251;
        case 7:
          if (!*v10) {
            goto LABEL_80;
          }
          uint64_t v50 = (unsigned int *)(*v115 + 8);
          uint64_t v51 = 12 * *v10;
          while (*(v50 - 2) != v2)
          {
            v50 += 3;
            v51 -= 12;
            if (!v51)
            {
LABEL_80:
              LODWORD(v127) = *(_DWORD *)(v11 + 52);
              *(void *)((char *)&v127 + 4) = 0x800000000;
              re::DynamicArray<re::RenderGraphResourceAllocationManager::FenceIndex>::add(v116, (uint64_t *)&v127);
              unint64_t v8 = *((void *)this + 19);
              if (v8 <= v2) {
                goto LABEL_244;
              }
              goto LABEL_81;
            }
          }
          if (*v50 <= 8 && ((1 << *v50) & 0x181) != 0) {
            goto LABEL_211;
          }
          uint64_t v103 = *(void *)(v113 + 296);
          unint64_t v8 = *(void *)(v103 + 16);
          if (v8 <= v2) {
            goto LABEL_262;
          }
          uint64_t v104 = *((void *)this + (int)*v50 + 1);
          re::StringID::StringID((re::StringID *)&v121, (const StringID *)(*(void *)(v103 + 32) + 48 * v2 + 8));
          re::DynamicString::format((re::DynamicString *)"Action %u attempted to both \"WriteResolveDepth\" and \"%s\" to resource %u (%s). Will use \"WriteResolveDepthStencil\".", (re::DynamicString *)&v127, v4, v104, v2, *(void *)&v122[4]);
          re::RenderGraphCompiled::addError(v113, (uint64_t)&v127);
          if ((void)v127)
          {
            if (BYTE8(v127)) {
              (*(void (**)(void))(*(void *)v127 + 40))();
            }
            long long v127 = 0u;
            long long v128 = 0u;
          }
          re::StringID::destroyString((re::StringID *)&v121);
LABEL_211:
          *uint64_t v50 = 8;
          unint64_t v8 = *((void *)this + 19);
          if (v8 <= v2) {
            goto LABEL_250;
          }
          uint64_t v105 = *((void *)this + 21) + 88 * v2;
          uint64_t v106 = *(void *)(v105 + 64);
          if (v106)
          {
            unint64_t v2 = *(void *)(v105 + 80);
            uint64_t v107 = 12 * v106;
            while (v4 != *(_DWORD *)v2)
            {
              v2 += 12;
              v107 -= 12;
              if (!v107) {
                goto LABEL_216;
              }
            }
          }
          else
          {
LABEL_216:
            unint64_t v2 = 0;
          }
          unsigned int v108 = *(_DWORD *)(v2 + 8);
          BOOL v76 = v108 > 8;
          int v77 = 1 << v108;
          int v78 = 385;
          goto LABEL_218;
        case 8:
          if (!*v10) {
            goto LABEL_50;
          }
          uint64_t v40 = (unsigned int *)(*v115 + 8);
          uint64_t v41 = 12 * *v10;
          while (*(v40 - 2) != v2)
          {
            v40 += 3;
            v41 -= 12;
            if (!v41)
            {
LABEL_50:
              LODWORD(v127) = *(_DWORD *)(v11 + 52);
              *(void *)((char *)&v127 + 4) = 0x800000000;
              re::DynamicArray<re::RenderGraphResourceAllocationManager::FenceIndex>::add(v116, (uint64_t *)&v127);
              unint64_t v8 = *((void *)this + 19);
              if (v8 <= v2) {
                goto LABEL_239;
              }
LABEL_81:
              uint64_t v31 = (_anonymous_namespace_ *)(*((void *)this + 21) + 88 * v2 + 48);
              LODWORD(v127) = v4;
              *(void *)((char *)&v127 + 4) = 0x800000000;
              goto LABEL_82;
            }
          }
          if (*v40 <= 8 && ((1 << *v40) & 0x141) != 0) {
            goto LABEL_133;
          }
          uint64_t v70 = *(void *)(v113 + 296);
          unint64_t v8 = *(void *)(v70 + 16);
          if (v8 <= v2) {
            goto LABEL_260;
          }
          uint64_t v71 = *((void *)this + (int)*v40 + 1);
          re::StringID::StringID((re::StringID *)&v121, (const StringID *)(*(void *)(v70 + 32) + 48 * v2 + 8));
          re::DynamicString::format((re::DynamicString *)"Action %u attempted to both \"WriteResolveStencil\" and \"%s\" to resource %u (%s). Will use \"WriteResolveDepthStencil\".", (re::DynamicString *)&v127, v4, v71, v2, *(void *)&v122[4]);
          re::RenderGraphCompiled::addError(v113, (uint64_t)&v127);
          if ((void)v127)
          {
            if (BYTE8(v127)) {
              (*(void (**)(void))(*(void *)v127 + 40))();
            }
            long long v127 = 0u;
            long long v128 = 0u;
          }
          re::StringID::destroyString((re::StringID *)&v121);
LABEL_133:
          *uint64_t v40 = 8;
          unint64_t v8 = *((void *)this + 19);
          if (v8 <= v2) {
            goto LABEL_248;
          }
          uint64_t v72 = *((void *)this + 21) + 88 * v2;
          uint64_t v73 = *(void *)(v72 + 64);
          if (!v73) {
            goto LABEL_138;
          }
          unint64_t v2 = *(void *)(v72 + 80);
          uint64_t v74 = 12 * v73;
          do
          {
            if (v4 == *(_DWORD *)v2) {
              goto LABEL_139;
            }
            v2 += 12;
            v74 -= 12;
          }
          while (v74);
LABEL_138:
          unint64_t v2 = 0;
LABEL_139:
          unsigned int v75 = *(_DWORD *)(v2 + 8);
          BOOL v76 = v75 > 8;
          int v77 = 1 << v75;
          int v78 = 321;
LABEL_218:
          int v109 = v77 & v78;
          if (v76 || v109 == 0)
          {
            re::DynamicString::format((re::DynamicString *)"Action %u has incorrect edges.", (re::DynamicString *)&v127, v4);
            re::RenderGraphCompiled::addError(v113, (uint64_t)&v127);
            if ((void)v127)
            {
              if (BYTE8(v127)) {
                (*(void (**)(void))(*(void *)v127 + 40))();
              }
            }
          }
          int v85 = 8;
          goto LABEL_223;
        case 9:
          if (!*v10) {
            goto LABEL_56;
          }
          uint64_t v42 = (int *)(*v115 + 8);
          uint64_t v43 = 12 * *v10;
          while (*(v42 - 2) != v2)
          {
            v42 += 3;
            v43 -= 12;
            if (!v43)
            {
LABEL_56:
              LODWORD(v127) = *(_DWORD *)(v11 + 52);
              *(void *)((char *)&v127 + 4) = 0xA00000000;
              re::DynamicArray<re::RenderGraphResourceAllocationManager::FenceIndex>::add(v116, (uint64_t *)&v127);
              unint64_t v8 = *((void *)this + 19);
              if (v8 > v2)
              {
                uint64_t v31 = (_anonymous_namespace_ *)(*((void *)this + 21) + 88 * v2 + 48);
                LODWORD(v127) = v4;
                *(void *)((char *)&v127 + 4) = 0xA00000000;
                goto LABEL_82;
              }
              goto LABEL_240;
            }
          }
          uint64_t v79 = *v42;
          if (!v79) {
            goto LABEL_147;
          }
          uint64_t v80 = *(void *)(v113 + 296);
          unint64_t v8 = *(void *)(v80 + 16);
          if (v8 <= v2) {
            goto LABEL_257;
          }
          uint64_t v81 = *((void *)this + v79 + 1);
          re::StringID::StringID((re::StringID *)&v121, (const StringID *)(*(void *)(v80 + 32) + 48 * v2 + 8));
          re::DynamicString::format((re::DynamicString *)"Action %u attempted to both \"QueryVisibility\" and \"%s\" to resource %u (%s). Will use \"QueryVisibility\".", (re::DynamicString *)&v127, v4, v81, v2, *(void *)&v122[4]);
          re::RenderGraphCompiled::addError(v113, (uint64_t)&v127);
          if ((void)v127)
          {
            if (BYTE8(v127)) {
              (*(void (**)(void))(*(void *)v127 + 40))();
            }
            long long v127 = 0u;
            long long v128 = 0u;
          }
          re::StringID::destroyString((re::StringID *)&v121);
LABEL_147:
          *uint64_t v42 = 10;
          unint64_t v8 = *((void *)this + 19);
          if (v8 <= v2) {
            goto LABEL_252;
          }
          uint64_t v82 = *((void *)this + 21) + 88 * v2;
          uint64_t v83 = *(void *)(v82 + 64);
          if (!v83) {
            goto LABEL_152;
          }
          unint64_t v2 = *(void *)(v82 + 80);
          uint64_t v84 = 12 * v83;
          do
          {
            if (v4 == *(_DWORD *)v2) {
              goto LABEL_153;
            }
            v2 += 12;
            v84 -= 12;
          }
          while (v84);
LABEL_152:
          unint64_t v2 = 0;
LABEL_153:
          if (*(_DWORD *)(v2 + 8))
          {
            re::DynamicString::format((re::DynamicString *)"Action %u shouldn't have in edge tag.", (re::DynamicString *)&v127, v4);
            re::RenderGraphCompiled::addError(v113, (uint64_t)&v127);
            if ((void)v127)
            {
              if (BYTE8(v127)) {
                (*(void (**)(void))(*(void *)v127 + 40))();
              }
            }
          }
          int v85 = 10;
          goto LABEL_223;
        case 12:
          goto LABEL_83;
        default:
          goto LABEL_263;
      }
      do
      {
        if (*(v35 - 2) == v2)
        {
          if (*v35 > 4 || ((1 << *v35) & 0x19) == 0)
          {
            uint64_t v53 = *(void *)(v113 + 296);
            unint64_t v8 = *(void *)(v53 + 16);
            if (v8 <= v2) {
              goto LABEL_259;
            }
            uint64_t v54 = *((void *)this + (int)*v35 + 1);
            re::StringID::StringID((re::StringID *)&v121, (const StringID *)(*(void *)(v53 + 32) + 48 * v2 + 8));
            re::DynamicString::format((re::DynamicString *)"Action %u attempted to both \"WriteDepth\" and \"%s\" to resource %u (%s). Will use \"WriteDepthStencil\".", (re::DynamicString *)&v127, v4, v54, v2, *(void *)&v122[4]);
            re::RenderGraphCompiled::addError(v113, (uint64_t)&v127);
            if ((void)v127)
            {
              if (BYTE8(v127)) {
                (*(void (**)(void))(*(void *)v127 + 40))();
              }
              long long v127 = 0u;
              long long v128 = 0u;
            }
            re::StringID::destroyString((re::StringID *)&v121);
          }
          *uint64_t v35 = 4;
          unint64_t v8 = *((void *)this + 19);
          if (v8 > v2)
          {
            uint64_t v55 = *((void *)this + 21) + 88 * v2;
            uint64_t v56 = *(void *)(v55 + 64);
            if (v56)
            {
              unint64_t v2 = *(void *)(v55 + 80);
              uint64_t v57 = 12 * v56;
              while (v4 != *(_DWORD *)v2)
              {
                v2 += 12;
                v57 -= 12;
                if (!v57) {
                  goto LABEL_101;
                }
              }
            }
            else
            {
LABEL_101:
              unint64_t v2 = 0;
            }
            unsigned int v58 = *(_DWORD *)(v2 + 8);
            BOOL v59 = v58 > 4;
            int v60 = 1 << v58;
            int v61 = 25;
LABEL_195:
            int v100 = v60 & v61;
            if (v59 || v100 == 0)
            {
              re::DynamicString::format((re::DynamicString *)"Action %u has incorrect edges.", (re::DynamicString *)&v127, v4);
              re::RenderGraphCompiled::addError(v113, (uint64_t)&v127);
              if ((void)v127)
              {
                if (BYTE8(v127)) {
                  (*(void (**)(void))(*(void *)v127 + 40))();
                }
              }
            }
            int v85 = 4;
LABEL_223:
            *(_DWORD *)(v2 + 8) = v85;
            goto LABEL_83;
          }
LABEL_247:
          uint64_t v117 = 0;
          long long v130 = 0u;
          long long v131 = 0u;
          long long v128 = 0u;
          long long v129 = 0u;
          long long v127 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          int v121 = 136315906;
          *(void *)uint64_t v122 = "operator[]";
          *(_WORD *)&v122[8] = 1024;
          *(_DWORD *)&v122[10] = 789;
          __int16 v123 = 2048;
          unint64_t v124 = v2;
          __int16 v125 = 2048;
          uint64_t v126 = (void *)v8;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_248:
          uint64_t v117 = 0;
          long long v130 = 0u;
          long long v131 = 0u;
          long long v128 = 0u;
          long long v129 = 0u;
          long long v127 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          int v121 = 136315906;
          *(void *)uint64_t v122 = "operator[]";
          *(_WORD *)&v122[8] = 1024;
          *(_DWORD *)&v122[10] = 789;
          __int16 v123 = 2048;
          unint64_t v124 = v2;
          __int16 v125 = 2048;
          uint64_t v126 = (void *)v8;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_249:
          uint64_t v117 = 0;
          long long v130 = 0u;
          long long v131 = 0u;
          long long v128 = 0u;
          long long v129 = 0u;
          long long v127 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          int v121 = 136315906;
          *(void *)uint64_t v122 = "operator[]";
          *(_WORD *)&v122[8] = 1024;
          *(_DWORD *)&v122[10] = 789;
          __int16 v123 = 2048;
          unint64_t v124 = v2;
          __int16 v125 = 2048;
          uint64_t v126 = (void *)v8;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_250:
          uint64_t v117 = 0;
          long long v130 = 0u;
          long long v131 = 0u;
          long long v128 = 0u;
          long long v129 = 0u;
          long long v127 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          int v121 = 136315906;
          *(void *)uint64_t v122 = "operator[]";
          *(_WORD *)&v122[8] = 1024;
          *(_DWORD *)&v122[10] = 789;
          __int16 v123 = 2048;
          unint64_t v124 = v2;
          __int16 v125 = 2048;
          uint64_t v126 = (void *)v8;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_251:
          uint64_t v117 = 0;
          long long v130 = 0u;
          long long v131 = 0u;
          long long v128 = 0u;
          long long v129 = 0u;
          long long v127 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          int v121 = 136315906;
          *(void *)uint64_t v122 = "operator[]";
          *(_WORD *)&v122[8] = 1024;
          *(_DWORD *)&v122[10] = 789;
          __int16 v123 = 2048;
          unint64_t v124 = v2;
          __int16 v125 = 2048;
          uint64_t v126 = (void *)v8;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_252:
          uint64_t v117 = 0;
          long long v130 = 0u;
          long long v131 = 0u;
          long long v128 = 0u;
          long long v129 = 0u;
          long long v127 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          int v121 = 136315906;
          *(void *)uint64_t v122 = "operator[]";
          *(_WORD *)&v122[8] = 1024;
          *(_DWORD *)&v122[10] = 789;
          __int16 v123 = 2048;
          unint64_t v124 = v2;
          __int16 v125 = 2048;
          uint64_t v126 = (void *)v8;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_253:
          uint64_t v117 = 0;
          long long v130 = 0u;
          long long v131 = 0u;
          long long v128 = 0u;
          long long v129 = 0u;
          long long v127 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          int v121 = 136315906;
          *(void *)uint64_t v122 = "operator[]";
          *(_WORD *)&v122[8] = 1024;
          *(_DWORD *)&v122[10] = 789;
          __int16 v123 = 2048;
          unint64_t v124 = v2;
          __int16 v125 = 2048;
          uint64_t v126 = (void *)v8;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_254:
          uint64_t v120 = 0;
          long long v130 = 0u;
          long long v131 = 0u;
          long long v128 = 0u;
          long long v129 = 0u;
          long long v127 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          int v121 = 136315906;
          *(void *)uint64_t v122 = "operator[]";
          *(_WORD *)&v122[8] = 1024;
          *(_DWORD *)&v122[10] = 789;
          __int16 v123 = 2048;
          unint64_t v124 = v8;
          __int16 v125 = 2048;
          uint64_t v126 = (void *)v3;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_255:
          uint64_t v120 = 0;
          long long v130 = 0u;
          long long v131 = 0u;
          long long v128 = 0u;
          long long v129 = 0u;
          long long v127 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          int v121 = 136315906;
          *(void *)uint64_t v122 = "operator[]";
          *(_WORD *)&v122[8] = 1024;
          *(_DWORD *)&v122[10] = 789;
          __int16 v123 = 2048;
          unint64_t v124 = v8;
          __int16 v125 = 2048;
          uint64_t v126 = (void *)v3;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_256:
          uint64_t v117 = 0;
          long long v130 = 0u;
          long long v131 = 0u;
          long long v128 = 0u;
          long long v129 = 0u;
          long long v127 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          int v121 = 136315906;
          *(void *)uint64_t v122 = "operator[]";
          *(_WORD *)&v122[8] = 1024;
          *(_DWORD *)&v122[10] = 789;
          __int16 v123 = 2048;
          unint64_t v124 = v2;
          __int16 v125 = 2048;
          uint64_t v126 = (void *)v8;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_257:
          uint64_t v117 = 0;
          long long v130 = 0u;
          long long v131 = 0u;
          long long v128 = 0u;
          long long v129 = 0u;
          long long v127 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          int v121 = 136315906;
          *(void *)uint64_t v122 = "operator[]";
          *(_WORD *)&v122[8] = 1024;
          *(_DWORD *)&v122[10] = 789;
          __int16 v123 = 2048;
          unint64_t v124 = v2;
          __int16 v125 = 2048;
          uint64_t v126 = (void *)v8;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_258:
          uint64_t v117 = 0;
          long long v130 = 0u;
          long long v131 = 0u;
          long long v128 = 0u;
          long long v129 = 0u;
          long long v127 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          int v121 = 136315906;
          *(void *)uint64_t v122 = "operator[]";
          *(_WORD *)&v122[8] = 1024;
          *(_DWORD *)&v122[10] = 789;
          __int16 v123 = 2048;
          unint64_t v124 = v2;
          __int16 v125 = 2048;
          uint64_t v126 = (void *)v8;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_259:
          uint64_t v117 = 0;
          long long v130 = 0u;
          long long v131 = 0u;
          long long v128 = 0u;
          long long v129 = 0u;
          long long v127 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          int v121 = 136315906;
          *(void *)uint64_t v122 = "operator[]";
          *(_WORD *)&v122[8] = 1024;
          *(_DWORD *)&v122[10] = 789;
          __int16 v123 = 2048;
          unint64_t v124 = v2;
          __int16 v125 = 2048;
          uint64_t v126 = (void *)v8;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_260:
          uint64_t v117 = 0;
          long long v130 = 0u;
          long long v131 = 0u;
          long long v128 = 0u;
          long long v129 = 0u;
          long long v127 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          int v121 = 136315906;
          *(void *)uint64_t v122 = "operator[]";
          *(_WORD *)&v122[8] = 1024;
          *(_DWORD *)&v122[10] = 789;
          __int16 v123 = 2048;
          unint64_t v124 = v2;
          __int16 v125 = 2048;
          uint64_t v126 = (void *)v8;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_261:
          uint64_t v117 = 0;
          long long v130 = 0u;
          long long v131 = 0u;
          long long v128 = 0u;
          long long v129 = 0u;
          long long v127 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          int v121 = 136315906;
          *(void *)uint64_t v122 = "operator[]";
          *(_WORD *)&v122[8] = 1024;
          *(_DWORD *)&v122[10] = 789;
          __int16 v123 = 2048;
          unint64_t v124 = v2;
          __int16 v125 = 2048;
          uint64_t v126 = (void *)v8;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_262:
          uint64_t v117 = 0;
          long long v130 = 0u;
          long long v131 = 0u;
          long long v128 = 0u;
          long long v129 = 0u;
          long long v127 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          int v121 = 136315906;
          *(void *)uint64_t v122 = "operator[]";
          *(_WORD *)&v122[8] = 1024;
          *(_DWORD *)&v122[10] = 789;
          __int16 v123 = 2048;
          unint64_t v124 = v2;
          __int16 v125 = 2048;
          uint64_t v126 = (void *)v8;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_263:
          re::internal::assertLog((re::internal *)5, v20, "assertion failure: '%s' (%s:line %i) Invalid RenderGraphResourceOperationType (%d)", "!\"Unreachable code\"", "init", 279, v27);
          _os_crash();
          __break(1u);
        }
        v35 += 3;
        v36 -= 12;
      }
      while (v36);
LABEL_38:
      LODWORD(v127) = *(_DWORD *)(v11 + 52);
      *(void *)((char *)&v127 + 4) = 0x400000000;
      re::DynamicArray<re::RenderGraphResourceAllocationManager::FenceIndex>::add(v116, (uint64_t *)&v127);
      unint64_t v8 = *((void *)this + 19);
      if (v8 <= v2)
      {
LABEL_237:
        uint64_t v117 = 0;
        long long v130 = 0u;
        long long v131 = 0u;
        long long v128 = 0u;
        long long v129 = 0u;
        long long v127 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v121 = 136315906;
        *(void *)uint64_t v122 = "operator[]";
        *(_WORD *)&v122[8] = 1024;
        *(_DWORD *)&v122[10] = 789;
        __int16 v123 = 2048;
        unint64_t v124 = v2;
        __int16 v125 = 2048;
        uint64_t v126 = (void *)v8;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_238;
      }
LABEL_69:
      uint64_t v31 = (_anonymous_namespace_ *)(*((void *)this + 21) + 88 * v2 + 48);
      LODWORD(v127) = v4;
      *(void *)((char *)&v127 + 4) = 0x400000000;
LABEL_82:
      re::DynamicArray<re::RenderGraphResourceAllocationManager::FenceIndex>::add(v31, (uint64_t *)&v127);
LABEL_83:
      v11 += 64;
    }
    while (v11 != v3);
LABEL_230:
    ++v4;
    uint64_t v5 = (re::RenderGraphCompiled *)v113;
    uint64_t v10 = *(void **)(v113 + 352);
  }
  while (v4 < v10);
}

void *re::DynamicArray<re::RenderGraphOptimizerProcessor::Vertex>::resize(void *result, unint64_t a2)
{
  unint64_t v3 = result;
  unint64_t v4 = result[2];
  if (v4 >= a2)
  {
    if (v4 <= a2) {
      return result;
    }
    uint64_t v8 = 88 * a2 + 48;
    unint64_t v9 = a2;
    do
    {
      uint64_t v10 = v3[4] + v8;
      re::DynamicArray<unsigned long>::deinit(v10);
      uint64_t result = (void *)re::DynamicArray<unsigned long>::deinit(v10 - 40);
      ++v9;
      v8 += 88;
    }
    while (v9 < v3[2]);
  }
  else
  {
    if (result[1] < a2)
    {
      uint64_t result = re::DynamicArray<re::RenderGraphOptimizerProcessor::Vertex>::setCapacity(result, a2);
      unint64_t v4 = v3[2];
    }
    unint64_t v5 = a2 - v4;
    if (a2 > v4)
    {
      uint64_t v6 = 88 * v4;
      do
      {
        uint64_t v7 = v3[4] + v6;
        *(unsigned char *)uint64_t v7 = 0;
        *(void *)(v7 + 16) = 0;
        *(void *)(v7 + 24) = 0;
        *(void *)(v7 + 8) = 0;
        *(_DWORD *)(v7 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0;
        *(void *)(v7 + 80) = 0;
        *(_OWORD *)(v7 + 40) = 0uLL;
        *(_OWORD *)(v7 + 56) = 0uLL;
        *(_DWORD *)(v7 + 72) = 0;
        v6 += 88;
        --v5;
      }
      while (v5);
    }
  }
  v3[2] = a2;
  ++*((_DWORD *)v3 + 6);
  return result;
}

uint64_t re::RenderGraphOptimizerProcessor::process(re::RenderGraphOptimizerProcessor *this, re::RenderGraphCompiled *a2)
{
  uint64_t v8 = this;
  uint64_t v132 = *MEMORY[0x263EF8340];
  re::RenderGraphOptimizerProcessor::init(this, a2);
  uint64_t v10 = *((void *)v8 + 19);
  LOBYTE(v127) = 0;
  unint64_t v116 = 0;
  uint64_t v117 = 0;
  uint64_t v115 = 0;
  uint64_t v13 = *((void *)v8 + 14);
  LOBYTE(v127) = 0;
  unint64_t v113 = 0;
  uint64_t v114 = 0;
  uint64_t v112 = 0;
  uint64_t v111 = 0;
  v108[1] = 0;
  uint64_t v109 = 0;
  v108[0] = 0;
  int v110 = 0;
  unint64_t v15 = *((void *)v8 + 14) + *((void *)v8 + 19);
  if (v15) {
    uint64_t v14 = (_anonymous_namespace_ *)re::DynamicArray<re::MeshResourceDefinition::Level>::setCapacity(v108, v15);
  }
  uint64_t v16 = *((void *)a2 + 69);
  if (v16)
  {
    uint64_t v17 = (unsigned int *)*((void *)a2 + 71);
    unint64_t v2 = 4 * v16;
    unint64_t v3 = 1;
    do
    {
      unint64_t v11 = *v17;
      unint64_t v18 = v116;
      if (v116 <= v11) {
        goto LABEL_199;
      }
      *(unsigned char *)(v117 + v11) = 1;
      LODWORD(v127) = v11;
      BYTE4(v127) = 1;
      uint64_t v14 = re::DynamicArray<re::RenderGraphOptimizerProcessor::process(re::RenderGraphCompiled &)::TraversalNode>::add((_anonymous_namespace_ *)v108, &v127);
      ++v17;
      v2 -= 4;
    }
    while (v2);
  }
  uint64_t v19 = v109;
  if (!v109)
  {
LABEL_46:
    LODWORD(v107[0]) = 0;
    unint64_t v18 = *((void *)v8 + 14);
    if (v18)
    {
      unint64_t v2 = 0;
      unint64_t v11 = (unint64_t)a2 + 376;
      unint64_t v4 = 88;
      unint64_t v5 = 1;
      do
      {
        unint64_t v3 = v2;
        if (v18 <= v2) {
          goto LABEL_204;
        }
        uint64_t v31 = *((void *)v8 + 16);
        unint64_t v6 = v113;
        if (*(unsigned char *)(v31 + 88 * v2))
        {
          if (v113 <= v2) {
            goto LABEL_206;
          }
          *(unsigned char *)(v114 + v2) = 1;
          uint64_t v32 = v31 + 88 * v2;
          uint64_t v33 = *(void *)(v32 + 24);
          if (v33)
          {
            uint64_t v34 = *(unsigned int **)(v32 + 40);
            unint64_t v7 = v116;
            uint64_t v35 = v117;
            uint64_t v36 = 12 * v33;
            while (1)
            {
              unint64_t v37 = *v34;
              if (v7 <= v37) {
                break;
              }
              *(unsigned char *)(v35 + v37) = 1;
              v34 += 3;
              v36 -= 12;
              if (!v36) {
                goto LABEL_55;
              }
            }
            *(void *)buf = 0;
            long long v130 = 0u;
            long long v131 = 0u;
            long long v128 = 0u;
            long long v129 = 0u;
            long long v127 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)unsigned int v119 = 136315906;
            *(void *)&v119[4] = "operator[]";
            *(_WORD *)&v119[12] = 1024;
            *(_DWORD *)&v119[14] = 468;
            *(_WORD *)&v119[18] = 2048;
            *(void *)&v119[20] = v37;
            *(_WORD *)&v119[28] = 2048;
            *(void *)&v119[30] = v7;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_188:
            *(void *)buf = 0;
            long long v130 = 0u;
            long long v131 = 0u;
            long long v128 = 0u;
            long long v129 = 0u;
            long long v127 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)unsigned int v119 = 136315906;
            *(void *)&v119[4] = "operator[]";
            *(_WORD *)&v119[12] = 1024;
            *(_DWORD *)&v119[14] = 468;
            *(_WORD *)&v119[18] = 2048;
            *(void *)&v119[20] = v37;
            *(_WORD *)&v119[28] = 2048;
            *(void *)&v119[30] = v7;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_189:
            v107[0] = 0;
            long long v130 = 0u;
            long long v131 = 0u;
            long long v128 = 0u;
            long long v129 = 0u;
            long long v127 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)buf = 136315906;
            *(void *)&uint8_t buf[4] = "operator[]";
            __int16 v121 = 1024;
            int v122 = 789;
            __int16 v123 = 2048;
            unint64_t v124 = v3;
            __int16 v125 = 2048;
            unint64_t v126 = v37;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_190:
            v107[0] = 0;
            long long v130 = 0u;
            long long v131 = 0u;
            long long v128 = 0u;
            long long v129 = 0u;
            long long v127 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)buf = 136315906;
            *(void *)&uint8_t buf[4] = "operator[]";
            __int16 v121 = 1024;
            int v122 = 468;
            __int16 v123 = 2048;
            unint64_t v124 = v4;
            __int16 v125 = 2048;
            unint64_t v126 = v3;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_191:
            v107[0] = 0;
            long long v130 = 0u;
            long long v131 = 0u;
            long long v128 = 0u;
            long long v129 = 0u;
            long long v127 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)buf = 136315906;
            *(void *)&uint8_t buf[4] = "operator[]";
            __int16 v121 = 1024;
            int v122 = 789;
            __int16 v123 = 2048;
            unint64_t v124 = v3;
            __int16 v125 = 2048;
            unint64_t v126 = v7;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_192:
            *(void *)buf = 0;
            long long v130 = 0u;
            long long v131 = 0u;
            long long v128 = 0u;
            long long v129 = 0u;
            long long v127 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)unsigned int v119 = 136315906;
            *(void *)&v119[4] = "operator[]";
            *(_WORD *)&v119[12] = 1024;
            *(_DWORD *)&v119[14] = 468;
            *(_WORD *)&v119[18] = 2048;
            *(void *)&v119[20] = v3;
            *(_WORD *)&v119[28] = 2048;
            *(void *)&v119[30] = v2;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_193:
            *(void *)buf = 0;
            long long v130 = 0u;
            long long v131 = 0u;
            long long v128 = 0u;
            long long v129 = 0u;
            long long v127 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)unsigned int v119 = 136315906;
            *(void *)&v119[4] = "operator[]";
            *(_WORD *)&v119[12] = 1024;
            *(_DWORD *)&v119[14] = 468;
            *(_WORD *)&v119[18] = 2048;
            *(void *)&v119[20] = v5;
            *(_WORD *)&v119[28] = 2048;
            *(void *)&v119[30] = v6;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
            goto LABEL_194;
          }
LABEL_55:
          uint64_t v38 = v31 + 88 * v2;
          uint64_t v39 = *(void *)(v38 + 64);
          if (v39)
          {
            uint64_t v40 = *(unsigned int **)(v38 + 80);
            unint64_t v7 = v116;
            uint64_t v41 = v117;
            uint64_t v42 = 12 * v39;
            do
            {
              unint64_t v37 = *v40;
              if (v7 <= v37) {
                goto LABEL_188;
              }
              *(unsigned char *)(v41 + v37) = 1;
              v40 += 3;
              v42 -= 12;
            }
            while (v42);
          }
        }
        if (v6 <= v2) {
          goto LABEL_205;
        }
        if (*(unsigned char *)(v114 + v2))
        {
          uint64_t v14 = (_anonymous_namespace_ *)re::DynamicArray<int>::add((void *)v11, v107);
          unint64_t v2 = LODWORD(v107[0]);
          unint64_t v18 = *((void *)v8 + 14);
          if (v18 <= LODWORD(v107[0])) {
            goto LABEL_207;
          }
          uint64_t v43 = *((void *)v8 + 16) + 88 * LODWORD(v107[0]);
          uint64_t v44 = *(void *)(v43 + 24);
          if (v44)
          {
            uint64_t v45 = *(void *)(v43 + 40);
            unint64_t v3 = v116;
            uint64_t v46 = v117;
            uint64_t v47 = 12 * v44;
            uint64_t v48 = (_DWORD *)(v45 + 8);
            do
            {
              if (*v48 == 9)
              {
                unint64_t v6 = *(v48 - 2);
                if (v3 <= v6) {
                  goto LABEL_197;
                }
                *(unsigned char *)(v46 + v6) = 1;
              }
              v48 += 3;
              v47 -= 12;
            }
            while (v47);
          }
        }
        unint64_t v2 = (v2 + 1);
        LODWORD(v107[0]) = v2;
      }
      while (v2 < v18);
    }
    LODWORD(v107[0]) = 0;
    unint64_t v2 = *((void *)v8 + 19);
    if (v2)
    {
      unsigned int v49 = 0;
      unint64_t v11 = (unint64_t)a2 + 416;
      unint64_t v4 = 88;
      unint64_t v5 = 1;
      while (1)
      {
        unint64_t v18 = v49;
        if (v2 <= v49) {
          break;
        }
        unint64_t v3 = v116;
        if (!*(unsigned char *)(*((void *)v8 + 21) + 88 * v49))
        {
          if (v116 <= v49) {
            goto LABEL_215;
          }
          *(unsigned char *)(v117 + v49) = 1;
        }
        if (v3 <= v49) {
          goto LABEL_203;
        }
        if (*(unsigned char *)(v117 + v49))
        {
          uint64_t v14 = (_anonymous_namespace_ *)re::DynamicArray<int>::add((void *)v11, v107);
          unsigned int v49 = v107[0];
          unint64_t v2 = *((void *)v8 + 19);
        }
        LODWORD(v107[0]) = ++v49;
        if (v49 >= v2) {
          goto LABEL_79;
        }
      }
LABEL_202:
      *(void *)buf = 0;
      long long v130 = 0u;
      long long v131 = 0u;
      long long v128 = 0u;
      long long v129 = 0u;
      long long v127 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)unsigned int v119 = 136315906;
      *(void *)&v119[4] = "operator[]";
      *(_WORD *)&v119[12] = 1024;
      *(_DWORD *)&v119[14] = 789;
      *(_WORD *)&v119[18] = 2048;
      *(void *)&v119[20] = v18;
      *(_WORD *)&v119[28] = 2048;
      *(void *)&v119[30] = v2;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_203:
      *(void *)buf = 0;
      long long v130 = 0u;
      long long v131 = 0u;
      long long v128 = 0u;
      long long v129 = 0u;
      long long v127 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)unsigned int v119 = 136315906;
      *(void *)&v119[4] = "operator[]";
      *(_WORD *)&v119[12] = 1024;
      *(_DWORD *)&v119[14] = 468;
      *(_WORD *)&v119[18] = 2048;
      *(void *)&v119[20] = v18;
      *(_WORD *)&v119[28] = 2048;
      *(void *)&v119[30] = v3;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_204:
      *(void *)buf = 0;
      long long v130 = 0u;
      long long v131 = 0u;
      long long v128 = 0u;
      long long v129 = 0u;
      long long v127 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)unsigned int v119 = 136315906;
      *(void *)&v119[4] = "operator[]";
      *(_WORD *)&v119[12] = 1024;
      *(_DWORD *)&v119[14] = 789;
      *(_WORD *)&v119[18] = 2048;
      *(void *)&v119[20] = v3;
      *(_WORD *)&v119[28] = 2048;
      *(void *)&v119[30] = v18;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_205:
      *(void *)buf = 0;
      long long v130 = 0u;
      long long v131 = 0u;
      long long v128 = 0u;
      long long v129 = 0u;
      long long v127 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)unsigned int v119 = 136315906;
      *(void *)&v119[4] = "operator[]";
      *(_WORD *)&v119[12] = 1024;
      *(_DWORD *)&v119[14] = 468;
      *(_WORD *)&v119[18] = 2048;
      *(void *)&v119[20] = v3;
      *(_WORD *)&v119[28] = 2048;
      *(void *)&v119[30] = v6;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_206:
      *(void *)buf = 0;
      long long v130 = 0u;
      long long v131 = 0u;
      long long v128 = 0u;
      long long v129 = 0u;
      long long v127 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)unsigned int v119 = 136315906;
      *(void *)&v119[4] = "operator[]";
      *(_WORD *)&v119[12] = 1024;
      *(_DWORD *)&v119[14] = 468;
      *(_WORD *)&v119[18] = 2048;
      *(void *)&v119[20] = v3;
      *(_WORD *)&v119[28] = 2048;
      *(void *)&v119[30] = v6;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_207:
      *(void *)buf = 0;
      long long v130 = 0u;
      long long v131 = 0u;
      long long v128 = 0u;
      long long v129 = 0u;
      long long v127 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)unsigned int v119 = 136315906;
      *(void *)&v119[4] = "operator[]";
      *(_WORD *)&v119[12] = 1024;
      *(_DWORD *)&v119[14] = 789;
      *(_WORD *)&v119[18] = 2048;
      *(void *)&v119[20] = v2;
      *(_WORD *)&v119[28] = 2048;
      *(void *)&v119[30] = v18;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_208:
      v107[0] = 0;
      long long v130 = 0u;
      long long v131 = 0u;
      long long v128 = 0u;
      long long v129 = 0u;
      long long v127 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = "operator[]";
      __int16 v121 = 1024;
      int v122 = 789;
      __int16 v123 = 2048;
      unint64_t v124 = v6;
      __int16 v125 = 2048;
      unint64_t v126 = (unint64_t)v8;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_209:
      v107[0] = 0;
      long long v130 = 0u;
      long long v131 = 0u;
      long long v128 = 0u;
      long long v129 = 0u;
      long long v127 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = "operator[]";
      __int16 v121 = 1024;
      int v122 = 789;
      __int16 v123 = 2048;
      unint64_t v124 = v4;
      __int16 v125 = 2048;
      unint64_t v126 = v5;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_210:
      v107[0] = 0;
      long long v130 = 0u;
      long long v131 = 0u;
      long long v128 = 0u;
      long long v129 = 0u;
      long long v127 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = "operator[]";
      __int16 v121 = 1024;
      int v122 = 789;
      __int16 v123 = 2048;
      unint64_t v124 = v5;
      __int16 v125 = 2048;
      unint64_t v126 = v3;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_211:
      v107[0] = 0;
      long long v130 = 0u;
      long long v131 = 0u;
      long long v128 = 0u;
      long long v129 = 0u;
      long long v127 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = "operator[]";
      __int16 v121 = 1024;
      int v122 = 789;
      __int16 v123 = 2048;
      unint64_t v124 = v11;
      __int16 v125 = 2048;
      unint64_t v126 = v3;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_212:
      v107[0] = 0;
      long long v130 = 0u;
      long long v131 = 0u;
      long long v128 = 0u;
      long long v129 = 0u;
      long long v127 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = "operator[]";
      __int16 v121 = 1024;
      int v122 = 789;
      __int16 v123 = 2048;
      unint64_t v124 = v11;
      __int16 v125 = 2048;
      unint64_t v126 = v3;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_213:
      *(void *)buf = 0;
      long long v130 = 0u;
      long long v131 = 0u;
      long long v128 = 0u;
      long long v129 = 0u;
      long long v127 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)unsigned int v119 = 136315906;
      *(void *)&v119[4] = "operator[]";
      *(_WORD *)&v119[12] = 1024;
      *(_DWORD *)&v119[14] = 789;
      *(_WORD *)&v119[18] = 2048;
      *(void *)&v119[20] = v3;
      *(_WORD *)&v119[28] = 2048;
      *(void *)&v119[30] = v2;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_214:
      *(void *)buf = 0;
      long long v130 = 0u;
      long long v131 = 0u;
      long long v128 = 0u;
      long long v129 = 0u;
      long long v127 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)unsigned int v119 = 136315906;
      *(void *)&v119[4] = "operator[]";
      *(_WORD *)&v119[12] = 1024;
      *(_DWORD *)&v119[14] = 789;
      *(_WORD *)&v119[18] = 2048;
      *(void *)&v119[20] = v3;
      *(_WORD *)&v119[28] = 2048;
      *(void *)&v119[30] = v4;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_215:
      *(void *)buf = 0;
      long long v130 = 0u;
      long long v131 = 0u;
      long long v128 = 0u;
      long long v129 = 0u;
      long long v127 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)unsigned int v119 = 136315906;
      *(void *)&v119[4] = "operator[]";
      *(_WORD *)&v119[12] = 1024;
      *(_DWORD *)&v119[14] = 468;
      *(_WORD *)&v119[18] = 2048;
      *(void *)&v119[20] = v18;
      *(_WORD *)&v119[28] = 2048;
      *(void *)&v119[30] = v3;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
LABEL_79:
    memset(v119, 0, 36);
    *(void *)&v119[36] = 0x7FFFFFFFLL;
    uint64_t v50 = a2;
    unint64_t v3 = *((void *)a2 + 49);
    if (!v3)
    {
LABEL_135:
      uint64_t v81 = v50;
      re::DynamicArray<re::DynamicArray<re::Matrix4x4<float>>>::resize((void *)v50 + 57, v3);
      re::DynamicArray<re::DynamicArray<re::Matrix4x4<float>>>::resize((void *)v81 + 62, *((void *)v81 + 49));
      unint64_t v11 = *(unsigned int *)&v119[32];
      if (!*(_DWORD *)&v119[32]) {
        goto LABEL_141;
      }
      unint64_t v18 = 0;
      uint64_t v83 = (int *)(*(void *)&v119[16] + 8);
      while (1)
      {
        int v84 = *v83;
        v83 += 6;
        if (v84 < 0) {
          goto LABEL_142;
        }
        if (*(unsigned int *)&v119[32] == ++v18)
        {
          unint64_t v18 = *(unsigned int *)&v119[32];
          goto LABEL_142;
        }
      }
    }
    unint64_t v5 = 0;
    unint64_t v4 = 88;
    unint64_t v2 = 0x7FFFFFFFLL;
    unint64_t v18 = 24;
    uint64_t v50 = a2;
    while (1)
    {
      if (v3 <= v5) {
        goto LABEL_210;
      }
      unint64_t v11 = *(unsigned int *)(*((void *)v50 + 51) + 4 * v5);
      unint64_t v3 = *((void *)v8 + 14);
      if (v3 <= v11) {
        goto LABEL_211;
      }
      uint64_t v51 = *((void *)v8 + 16) + 88 * v11;
      uint64_t v52 = *(void *)(v51 + 24);
      if (!v52) {
        goto LABEL_109;
      }
      unint64_t v6 = *(void *)(v51 + 40);
      unint64_t v7 = v6 + 12 * v52;
      do
      {
        LODWORD(v118) = *(_DWORD *)v6;
        unint64_t v3 = v118;
        unint64_t v37 = *((void *)v8 + 19);
        if (v37 <= v118) {
          goto LABEL_189;
        }
        if (*(unsigned char *)(*((void *)v8 + 21) + 88 * v118))
        {
          unint64_t v53 = v116;
          if (v116 <= v118) {
            goto LABEL_195;
          }
          if (*(unsigned char *)(v117 + v118))
          {
            if (re::HashTable<unsigned int,re::RenderGraphOptimizerProcessor::process(re::RenderGraphCompiled &)::Lifespan,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::containsKey((uint64_t)v119, v118))
            {
              if (*(void *)v119)
              {
                unint64_t v54 = 0x94D049BB133111EBLL
                    * ((0xBF58476D1CE4E5B9 * (v3 ^ (v3 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v3 ^ (v3 >> 30))) >> 27));
                unint64_t v55 = (v54 ^ (v54 >> 31)) % *(unsigned int *)&v119[24];
                uint64_t v56 = *(void *)&v119[16];
                uint64_t v57 = *(unsigned int *)(*(void *)&v119[8] + 4 * v55);
                if (v57 != 0x7FFFFFFF)
                {
                  while (*(_DWORD *)(*(void *)&v119[16] + 24 * v57 + 12) != v3)
                  {
                    uint64_t v57 = *(_DWORD *)(*(void *)&v119[16] + 24 * v57 + 8) & 0x7FFFFFFF;
                    if (v57 == 0x7FFFFFFF) {
                      goto LABEL_101;
                    }
                  }
                  goto LABEL_102;
                }
              }
              else
              {
                uint64_t v56 = *(void *)&v119[16];
              }
LABEL_101:
              LODWORD(v57) = 0x7FFFFFFF;
LABEL_102:
              uint64_t v62 = v56 + 24 * v57;
              unsigned int v63 = *(_DWORD *)(v62 + 20);
              if (v63 <= v5) {
                unsigned int v63 = v5;
              }
              *(_DWORD *)(v62 + 20) = v63;
              goto LABEL_107;
            }
            LODWORD(v127) = v5;
            DWORD1(v127) = v5;
            unint64_t v58 = 0x94D049BB133111EBLL
                * ((0xBF58476D1CE4E5B9 * (v3 ^ (v3 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v3 ^ (v3 >> 30))) >> 27));
            unint64_t v59 = v58 ^ (v58 >> 31);
            if (!*(void *)v119)
            {
              LODWORD(v60) = 0;
LABEL_106:
              re::HashTable<unsigned int,re::RenderGraphOptimizerProcessor::process(re::RenderGraphCompiled &)::Lifespan,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::addAsMove((uint64_t)v119, v60, v59, &v118, &v127);
              ++*(_DWORD *)&v119[40];
              goto LABEL_107;
            }
            unint64_t v60 = v59 % *(unsigned int *)&v119[24];
            uint64_t v61 = *(unsigned int *)(*(void *)&v119[8] + 4 * v60);
            if (v61 == 0x7FFFFFFF) {
              goto LABEL_106;
            }
            while (*(_DWORD *)(*(void *)&v119[16] + 24 * v61 + 12) != v3)
            {
              LODWORD(v61) = *(_DWORD *)(*(void *)&v119[16] + 24 * v61 + 8) & 0x7FFFFFFF;
              if (v61 == 0x7FFFFFFF) {
                goto LABEL_106;
              }
            }
          }
        }
LABEL_107:
        v6 += 12;
      }
      while (v6 != v7);
      unint64_t v3 = *((void *)v8 + 14);
LABEL_109:
      if (v3 <= v11) {
        goto LABEL_212;
      }
      uint64_t v64 = *((void *)v8 + 16) + 88 * v11;
      uint64_t v65 = *(void *)(v64 + 64);
      if (v65)
      {
        unint64_t v11 = *(void *)(v64 + 80);
        unint64_t v6 = v11 + 12 * v65;
        do
        {
          unint64_t v3 = *(unsigned int *)v11;
          unint64_t v7 = *((void *)v8 + 19);
          if (v7 <= v3) {
            goto LABEL_191;
          }
          uint64_t v66 = (unsigned char *)(*((void *)v8 + 21) + 88 * v3);
          if (*v66)
          {
            unint64_t v7 = v116;
            if (v116 <= v3) {
              goto LABEL_196;
            }
            if (*(unsigned char *)(v117 + v3))
            {
              if (re::HashTable<unsigned int,re::RenderGraphOptimizerProcessor::process(re::RenderGraphCompiled &)::Lifespan,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::containsKey((uint64_t)v119, *(_DWORD *)v11))
              {
                if (*(void *)v119)
                {
                  unint64_t v67 = 0x94D049BB133111EBLL
                      * ((0xBF58476D1CE4E5B9 * (v3 ^ (v3 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v3 ^ (v3 >> 30))) >> 27));
                  unint64_t v68 = (v67 ^ (v67 >> 31)) % *(unsigned int *)&v119[24];
                  uint64_t v69 = *(void *)&v119[16];
                  uint64_t v70 = *(unsigned int *)(*(void *)&v119[8] + 4 * v68);
                  if (v70 != 0x7FFFFFFF)
                  {
                    while (*(_DWORD *)(*(void *)&v119[16] + 24 * v70 + 12) != v3)
                    {
                      uint64_t v70 = *(_DWORD *)(*(void *)&v119[16] + 24 * v70 + 8) & 0x7FFFFFFF;
                      if (v70 == 0x7FFFFFFF) {
                        goto LABEL_129;
                      }
                    }
                    goto LABEL_130;
                  }
                }
                else
                {
                  uint64_t v69 = *(void *)&v119[16];
                }
LABEL_129:
                LODWORD(v70) = 0x7FFFFFFF;
LABEL_130:
                uint64_t v79 = v69 + 24 * v70;
                unsigned int v80 = *(_DWORD *)(v79 + 20);
                if (v80 <= v5) {
                  unsigned int v80 = v5;
                }
                *(_DWORD *)(v79 + 20) = v80;
                goto LABEL_133;
              }
              *uint64_t v66 = 0;
              uint64_t v71 = *((void *)a2 + 37);
              unint64_t v7 = *(void *)(v71 + 16);
              if (v7 <= v3) {
                goto LABEL_200;
              }
              unint64_t v2 = 48;
              uint64_t v72 = *(void *)(v71 + 32) + 48 * v3;
              v107[0] = *(void *)(v72 + 8) >> 1;
              v107[1] = *(void *)(v72 + 24);
              uint64_t v73 = re::RenderGraphCompiled::targetDescription((uint64_t)a2, (uint64_t)v107);
              *(_DWORD *)uint64_t v73 = 2;
              *(void *)&long long v127 = 0x1DCE9D8E3A6B2E8;
              *((void *)&v127 + 1) = "NullTexture";
              *(void *)(v73 + 96) = 0x44A03688CB9957C5;
              re::StringID::destroyString((re::StringID *)&v127);
              uint64_t v74 = *((void *)a2 + 37);
              unint64_t v7 = *(void *)(v74 + 16);
              if (v7 <= v3) {
                goto LABEL_201;
              }
              unsigned int v75 = re::StringID::StringID((re::StringID *)&v127, (const StringID *)(*(void *)(v74 + 32) + 48 * v3 + 8));
              *(void *)buf = (unint64_t)v127 >> 1;
              BOOL v76 = re::HashSetBase<re::WeakStringID,re::WeakStringID,re::internal::ValueAsKey<re::WeakStringID>,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::contains((uint64_t)&xmmword_26AF95E48, (uint64_t *)buf);
              if (!v76)
              {
                *(void *)buf = (unint64_t)v127 >> 1;
                int v77 = (re *)re::HashSetBase<re::WeakStringID,re::WeakStringID,re::internal::ValueAsKey<re::WeakStringID>,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::add((uint64_t)&xmmword_26AF95E48, (uint64_t *)buf);
                int v78 = *re::graphicsLogObjects(v77);
                if (os_log_type_enabled(v78, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)buf = 136315138;
                  *(void *)&uint8_t buf[4] = *((void *)&v127 + 1);
                  _os_log_impl(&dword_233120000, v78, OS_LOG_TYPE_DEFAULT, "RenderGraph: Transient resource %s is read from before it is written to. Replacing it with NullTexture.", buf, 0xCu);
                }
              }
              re::StringID::destroyString((re::StringID *)&v127);
              unint64_t v2 = 0x7FFFFFFFLL;
            }
          }
LABEL_133:
          v11 += 12;
        }
        while (v11 != v6);
      }
      ++v5;
      uint64_t v50 = a2;
      unint64_t v3 = *((void *)a2 + 49);
      if (v5 >= v3) {
        goto LABEL_135;
      }
    }
  }
  unint64_t v11 = 88;
  unint64_t v18 = 1;
  while (1)
  {
    uint64_t v20 = v19 - 1;
    uint64_t v21 = (unsigned int *)(v111 + 8 * v20);
    unint64_t v3 = *v21;
    LOBYTE(v21) = *((unsigned char *)v21 + 4);
    uint64_t v109 = v20;
    ++v110;
    if (v21) {
      break;
    }
    unint64_t v2 = *((void *)v8 + 14);
    if (v2 <= v3) {
      goto LABEL_213;
    }
    uint64_t v22 = *((void *)v8 + 16) + 88 * v3;
    uint64_t v23 = *(void *)(v22 + 64);
    if (v23)
    {
      unint64_t v4 = *(void *)(v22 + 80);
      uint64_t v24 = 12 * v23;
      do
      {
        unint64_t v3 = *(unsigned int *)v4;
        unint64_t v2 = v116;
        if (v116 <= v3) {
          goto LABEL_192;
        }
        if (!*(unsigned char *)(v117 + v3))
        {
          *(unsigned char *)(v117 + v3) = 1;
          LODWORD(v127) = v3;
          BYTE4(v127) = 1;
          uint64_t v14 = re::DynamicArray<re::RenderGraphOptimizerProcessor::process(re::RenderGraphCompiled &)::TraversalNode>::add((_anonymous_namespace_ *)v108, &v127);
        }
        v4 += 12;
        v24 -= 12;
      }
      while (v24);
    }
LABEL_45:
    uint64_t v19 = v109;
    if (!v109) {
      goto LABEL_46;
    }
  }
  unint64_t v4 = *((void *)v8 + 19);
  if (v4 <= v3) {
    goto LABEL_214;
  }
  uint64_t v25 = *((void *)v8 + 21) + 88 * v3;
  uint64_t v26 = *(void *)(v25 + 64);
  if (!v26) {
    goto LABEL_45;
  }
  unint64_t v3 = *(void *)(v25 + 80);
  unint64_t v4 = v3 + 12 * v26;
  while (1)
  {
    unint64_t v5 = *(unsigned int *)v3;
    unint64_t v6 = v113;
    if (v113 <= v5) {
      goto LABEL_193;
    }
    if (!*(unsigned char *)(v114 + v5))
    {
      *(unsigned char *)(v114 + v5) = 1;
      LODWORD(v127) = v5;
      BYTE4(v127) = 0;
      uint64_t v14 = re::DynamicArray<re::RenderGraphOptimizerProcessor::process(re::RenderGraphCompiled &)::TraversalNode>::add((_anonymous_namespace_ *)v108, &v127);
    }
    unint64_t v6 = *((void *)v8 + 14);
    if (v6 <= v5)
    {
LABEL_194:
      *(void *)buf = 0;
      long long v130 = 0u;
      long long v131 = 0u;
      long long v128 = 0u;
      long long v129 = 0u;
      long long v127 = 0u;
      unint64_t v53 = &_os_log_internal;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)unsigned int v119 = 136315906;
      *(void *)&v119[4] = "operator[]";
      *(_WORD *)&v119[12] = 1024;
      *(_DWORD *)&v119[14] = 789;
      *(_WORD *)&v119[18] = 2048;
      *(void *)&v119[20] = v5;
      *(_WORD *)&v119[28] = 2048;
      *(void *)&v119[30] = v6;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_195:
      v107[0] = 0;
      long long v130 = 0u;
      long long v131 = 0u;
      long long v128 = 0u;
      long long v129 = 0u;
      long long v127 = 0u;
      uint64_t v8 = (re::RenderGraphOptimizerProcessor *)&_os_log_internal;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = "operator[]";
      __int16 v121 = 1024;
      int v122 = 468;
      __int16 v123 = 2048;
      unint64_t v124 = v3;
      __int16 v125 = 2048;
      unint64_t v126 = v53;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_196:
      v107[0] = 0;
      long long v130 = 0u;
      long long v131 = 0u;
      long long v128 = 0u;
      long long v129 = 0u;
      long long v127 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = "operator[]";
      __int16 v121 = 1024;
      int v122 = 468;
      __int16 v123 = 2048;
      unint64_t v124 = v3;
      __int16 v125 = 2048;
      unint64_t v126 = v7;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_197:
      *(void *)buf = 0;
      long long v130 = 0u;
      long long v131 = 0u;
      long long v128 = 0u;
      long long v129 = 0u;
      long long v127 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)unsigned int v119 = 136315906;
      *(void *)&v119[4] = "operator[]";
      *(_WORD *)&v119[12] = 1024;
      *(_DWORD *)&v119[14] = 468;
      *(_WORD *)&v119[18] = 2048;
      *(void *)&v119[20] = v6;
      *(_WORD *)&v119[28] = 2048;
      *(void *)&v119[30] = v3;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_198:
      v107[0] = 0;
      long long v130 = 0u;
      long long v131 = 0u;
      long long v128 = 0u;
      long long v129 = 0u;
      long long v127 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = "operator[]";
      __int16 v121 = 1024;
      int v122 = 789;
      __int16 v123 = 2048;
      unint64_t v124 = v4;
      __int16 v125 = 2048;
      unint64_t v126 = v2;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_199:
      *(void *)buf = 0;
      long long v130 = 0u;
      long long v131 = 0u;
      long long v128 = 0u;
      long long v129 = 0u;
      long long v127 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)unsigned int v119 = 136315906;
      *(void *)&v119[4] = "operator[]";
      *(_WORD *)&v119[12] = 1024;
      *(_DWORD *)&v119[14] = 468;
      *(_WORD *)&v119[18] = 2048;
      *(void *)&v119[20] = v11;
      *(_WORD *)&v119[28] = 2048;
      *(void *)&v119[30] = v18;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_200:
      v107[0] = 0;
      long long v130 = 0u;
      long long v131 = 0u;
      long long v128 = 0u;
      long long v129 = 0u;
      long long v127 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = "operator[]";
      __int16 v121 = 1024;
      int v122 = 789;
      __int16 v123 = 2048;
      unint64_t v124 = v3;
      __int16 v125 = 2048;
      unint64_t v126 = v7;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_201:
      uint64_t v118 = 0;
      long long v130 = 0u;
      long long v131 = 0u;
      long long v128 = 0u;
      long long v129 = 0u;
      long long v127 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = "operator[]";
      __int16 v121 = 1024;
      int v122 = 789;
      __int16 v123 = 2048;
      unint64_t v124 = v3;
      __int16 v125 = 2048;
      unint64_t v126 = v7;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_202;
    }
    uint64_t v27 = *((void *)v8 + 16) + 88 * v5;
    uint64_t v28 = *(void *)(v27 + 24);
    if (v28) {
      break;
    }
LABEL_44:
    v3 += 12;
    if (v3 == v4) {
      goto LABEL_45;
    }
  }
  unint64_t v5 = *(void *)(v27 + 40) + 8;
  unint64_t v6 = 12 * v28;
  while (2)
  {
    int v29 = *(_DWORD *)v5;
    switch(*(_DWORD *)(v3 + 8))
    {
      case 1:
      case 5:
        if ((v29 - 2) >= 3 && (v29 != 1 || *(_DWORD *)(v3 + 4) != *(_DWORD *)(v5 - 4))) {
          goto LABEL_43;
        }
        goto LABEL_40;
      case 6:
        if (v29 == 2) {
          goto LABEL_40;
        }
        goto LABEL_43;
      case 7:
        if (v29 != 3) {
          goto LABEL_43;
        }
        goto LABEL_40;
      case 8:
      case 0xA:
        if ((v29 - 2) >= 3) {
          goto LABEL_43;
        }
LABEL_40:
        unint64_t v7 = *(unsigned int *)(v5 - 8);
        unint64_t v2 = v116;
        if (v116 > v7)
        {
          if (!*(unsigned char *)(v117 + v7))
          {
            *(unsigned char *)(v117 + v7) = 1;
            LODWORD(v127) = v7;
            BYTE4(v127) = 1;
            uint64_t v14 = re::DynamicArray<re::RenderGraphOptimizerProcessor::process(re::RenderGraphCompiled &)::TraversalNode>::add((_anonymous_namespace_ *)v108, &v127);
          }
LABEL_43:
          v5 += 12;
          v6 -= 12;
          if (!v6) {
            goto LABEL_44;
          }
          continue;
        }
        *(void *)buf = 0;
        long long v130 = 0u;
        long long v131 = 0u;
        long long v128 = 0u;
        long long v129 = 0u;
        long long v127 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)unsigned int v119 = 136315906;
        *(void *)&v119[4] = "operator[]";
        *(_WORD *)&v119[12] = 1024;
        *(_DWORD *)&v119[14] = 468;
        *(_WORD *)&v119[18] = 2048;
        *(void *)&v119[20] = v7;
        *(_WORD *)&v119[28] = 2048;
        *(void *)&v119[30] = v2;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_141:
        unint64_t v18 = 0;
LABEL_142:
        if (v11 != v18)
        {
          unint64_t v5 = v18;
          unint64_t v4 = *(void *)&v119[16];
          unint64_t v2 = 24;
          unint64_t v3 = 40;
          do
          {
            unint64_t v85 = v4 + 24 * v5;
            unint64_t v6 = *(unsigned int *)(v85 + 16);
            uint64_t v8 = (re::RenderGraphOptimizerProcessor *)*((void *)a2 + 59);
            if ((unint64_t)v8 <= v6) {
              goto LABEL_208;
            }
            uint64_t v86 = (_DWORD *)(v85 + 12);
            re::DynamicArray<int>::add((void *)(*((void *)a2 + 61) + 40 * v6), (_DWORD *)(v85 + 12));
            unint64_t v4 = *(unsigned int *)(v4 + 24 * v5 + 20);
            unint64_t v5 = *((void *)a2 + 64);
            if (v5 <= v4) {
              goto LABEL_209;
            }
            re::DynamicArray<int>::add((void *)(*((void *)a2 + 66) + 40 * v4), v86);
            unint64_t v4 = *(void *)&v119[16];
            if (*(_DWORD *)&v119[32] <= (v18 + 1)) {
              unint64_t v87 = (v18 + 1);
            }
            else {
              unint64_t v87 = *(unsigned int *)&v119[32];
            }
            while (1)
            {
              unint64_t v5 = (v18 + 1);
              if (v87 - 1 == v18) {
                break;
              }
              LODWORD(v18) = v18 + 1;
              unint64_t v88 = v5;
              if ((*(_DWORD *)(*(void *)&v119[16] + 24 * v5 + 8) & 0x80000000) != 0) {
                goto LABEL_153;
              }
            }
            unint64_t v88 = v87;
LABEL_153:
            unint64_t v18 = v88;
          }
          while (v11 != v88);
        }
        re::RenderGraphProcessor::updateTextureLifetimes((uint64_t *)a2, v82);
        uint64_t v89 = *((void *)a2 + 44);
        if (v89)
        {
          uint64_t v8 = (re::RenderGraphOptimizerProcessor *)*((void *)a2 + 46);
          unint64_t v11 = (unint64_t)v8 + 192 * v89;
          long long v90 = xmmword_23435FBB0;
          unint64_t v18 = 2;
          while (1)
          {
            unint64_t v2 = *((void *)v8 + 7);
            if (!v2) {
              goto LABEL_176;
            }
            uint64_t v91 = 0;
            unint64_t v92 = 0;
            int v93 = 0;
            unint64_t v3 = v116;
            uint64_t v94 = v117;
            do
            {
              uint64_t v95 = *((void *)v8 + 9);
              uint64_t v96 = (long long *)(v95 + v91);
              unint64_t v4 = *(unsigned int *)(v95 + v91 + 52);
              if (v3 <= v4) {
                goto LABEL_190;
              }
              if (*(unsigned char *)(v94 + v4))
              {
                if ((uint64_t)v92 > v93)
                {
                  unint64_t v4 = v93;
                  if (v2 <= v93) {
                    goto LABEL_198;
                  }
                  uint64_t v97 = v95 + ((uint64_t)v93 << 6);
                  long long v98 = *v96;
                  long long v99 = v96[1];
                  long long v100 = v96[2];
                  *(void *)(v97 + 48) = *((void *)v96 + 6);
                  *(_OWORD *)(v97 + 16) = v99;
                  *(_OWORD *)(v97 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = v100;
                  *(_OWORD *)uint64_t v97 = v98;
                  unint64_t v2 = *((void *)v8 + 7);
                }
                ++v93;
              }
              ++v92;
              v91 += 64;
            }
            while (v2 > v92);
            if (v2 <= v93) {
              goto LABEL_176;
            }
            unint64_t v101 = v93;
            if (v2 < v93) {
              break;
            }
            if (v2 > v93) {
              goto LABEL_175;
            }
LABEL_176:
            uint64_t v8 = (re::RenderGraphOptimizerProcessor *)((char *)v8 + 192);
            if (v8 == (re::RenderGraphOptimizerProcessor *)v11) {
              goto LABEL_177;
            }
          }
          if (*((void *)v8 + 6) < (unint64_t)v93)
          {
            re::DynamicArray<re::RigTransform>::setCapacity((void *)v8 + 5, v93);
            long long v90 = xmmword_23435FBB0;
            unint64_t v2 = *((void *)v8 + 7);
          }
          if (v2 < v101)
          {
            unint64_t v102 = *((void *)v8 + 9) + (v2 << 6);
            uint64_t v103 = (v101 << 6) - (v2 << 6);
            if (v103 >= 1)
            {
              unint64_t v104 = ((unint64_t)v103 >> 6) + 1;
              do
              {
                *(void *)unint64_t v102 = 0;
                *(_OWORD *)(v102 + 16) = v90;
                *(_WORD *)(v102 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0;
                *(void *)(v102 + 36) = 0;
                *(_DWORD *)(v102 + 44) = 2;
                --v104;
                *(unsigned char *)(v102 + 48) = 0;
                *(_DWORD *)(v102 + 52) = 0;
                v102 += 64;
              }
              while (v104 > 1);
            }
          }
LABEL_175:
          *((void *)v8 + 7) = v101;
          ++*((_DWORD *)v8 + 16);
          goto LABEL_176;
        }
LABEL_177:
        re::HashTable<unsigned int,re::RenderGraphOptimizerProcessor::process(re::RenderGraphCompiled &)::Lifespan,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::~HashTable((uint64_t *)v119);
        if (v108[0] && v111) {
          (*(void (**)(void, uint64_t))(*(void *)v108[0] + 40))(v108[0], v111);
        }
        if (v112 && v113) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v112 + 40))(v112, v114);
        }
        uint64_t result = v115;
        if (v115)
        {
          if (v116) {
            return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v115 + 40))(v115, v117);
          }
        }
        return result;
      default:
        goto LABEL_43;
    }
  }
}

_anonymous_namespace_ *re::DynamicArray<re::RenderGraphOptimizerProcessor::process(re::RenderGraphCompiled &)::TraversalNode>::add(_anonymous_namespace_ *result, void *a2)
{
  unint64_t v3 = result;
  unint64_t v4 = *((void *)result + 1);
  unint64_t v5 = *((void *)result + 2);
  unint64_t v6 = v5 + 1;
  if (v5 >= v4 && v4 < v6)
  {
    if (*(void *)result)
    {
      uint64_t v8 = 2 * v4;
      BOOL v9 = v4 == 0;
      unint64_t v10 = 8;
      if (!v9) {
        unint64_t v10 = v8;
      }
      if (v10 <= v6) {
        unint64_t v11 = v6;
      }
      else {
        unint64_t v11 = v10;
      }
      uint64_t result = (_anonymous_namespace_ *)re::DynamicArray<re::MeshResourceDefinition::Level>::setCapacity(result, v11);
    }
    else
    {
      uint64_t result = (_anonymous_namespace_ *)re::DynamicArray<re::MeshResourceDefinition::Level>::setCapacity(v3, v6);
      ++*((_DWORD *)v3 + 6);
    }
  }
  *(void *)(*((void *)v3 + 4) + 8 * (*((void *)v3 + 2))++) = *a2;
  ++*((_DWORD *)v3 + 6);
  return result;
}

BOOL re::HashTable<unsigned int,re::RenderGraphOptimizerProcessor::process(re::RenderGraphCompiled &)::Lifespan,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::containsKey(uint64_t a1, unsigned int a2)
{
  if (!*(void *)a1) {
    return 0;
  }
  unint64_t v2 = 0xBF58476D1CE4E5B9 * (a2 ^ ((unint64_t)a2 >> 30));
  uint64_t v3 = *(unsigned int *)(*(void *)(a1 + 8)
                       + 4
                       * (((0x94D049BB133111EBLL * (v2 ^ (v2 >> 27))) ^ ((0x94D049BB133111EBLL * (v2 ^ (v2 >> 27))) >> 31))
                        % *(unsigned int *)(a1 + 24)));
  if (v3 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 16);
  if (*(_DWORD *)(v5 + 24 * v3 + 12) == a2) {
    return 1;
  }
  do
  {
    LODWORD(v3) = *(_DWORD *)(v5 + 24 * v3 + 8) & 0x7FFFFFFF;
    BOOL result = v3 != 0x7FFFFFFF;
  }
  while (v3 != 0x7FFFFFFF && *(_DWORD *)(v5 + 24 * v3 + 12) != a2);
  return result;
}

void re::anonymous namespace'::transientResourcesWithInvalidLifespan(re::_anonymous_namespace_ *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_389, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_389))
  {
    byte_26AF95E40 = 0;
    qword_26AF95E30 = (uint64_t)&unk_26E6DEC70;
    unk_26AF95E38 = "RenderGraphOptimizerProcessor allocator";
    __cxa_guard_release(&_MergedGlobals_389);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF95E28, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF95E28))
  {
    dword_26AF95E68 = 0;
    xmmword_26AF95E58 = 0u;
    xmmword_26AF95E48 = 0u;
    unk_26AF95E6C = 0x7FFFFFFFLL;
    re::HashSetBase<re::WeakStringID,re::WeakStringID,re::internal::ValueAsKey<re::WeakStringID>,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::init((uint64_t)&xmmword_26AF95E48, (uint64_t)&qword_26AF95E30, 3);
    __cxa_guard_release(&qword_26AF95E28);
  }
}

uint64_t *re::HashTable<unsigned int,re::RenderGraphOptimizerProcessor::process(re::RenderGraphCompiled &)::Lifespan,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::~HashTable(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    uint64_t v3 = *((unsigned int *)a1 + 8);
    if (v3)
    {
      uint64_t v4 = 0;
      uint64_t v5 = 24 * v3;
      do
      {
        uint64_t v6 = a1[2] + v4;
        int v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0) {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
        }
        v4 += 24;
      }
      while (v5 != v4);
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return a1;
}

void re::RenderGraphOptimizerProcessor::~RenderGraphOptimizerProcessor(re::RenderGraphOptimizerProcessor *this)
{
}

{
  uint64_t vars8;

  re::DynamicArray<re::RigComponentConstraint>::deinit((uint64_t)this + 136);
  re::DynamicArray<re::RigComponentConstraint>::deinit((uint64_t)this + 96);
  JUMPOUT(0x237DBCBD0);
}

void *re::DynamicArray<re::RenderGraphOptimizerProcessor::Vertex>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      BOOL result = (void *)*result;
      if (!*v5)
      {
        BOOL result = (void *)re::DynamicArray<re::RenderGraphOptimizerProcessor::Vertex>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x58uLL))
        {
          uint64_t v2 = 88 * a2;
          BOOL result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 88 * a2, 8);
          if (result)
          {
            int v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 88, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        BOOL result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      int v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = v8 + 88 * v9;
        unint64_t v11 = v7;
        do
        {
          *(unsigned char *)unint64_t v11 = *(unsigned char *)v8;
          v11[5] = 0;
          *((_DWORD *)v11 + 8) = 0;
          v11[2] = 0;
          v11[3] = 0;
          v11[1] = 0;
          uint64_t v12 = v8 + 8;
          uint64_t v13 = *(void *)(v8 + 16);
          v11[1] = *(void *)(v8 + 8);
          *(void *)(v8 + 8) = 0;
          v11[2] = v13;
          *(void *)(v8 + 16) = 0;
          uint64_t v14 = v11[3];
          v11[3] = *(void *)(v8 + 24);
          *(void *)(v8 + 24) = v14;
          uint64_t v15 = v11[5];
          v11[5] = *(void *)(v8 + 40);
          *(void *)(v8 + 40) = v15;
          ++*(_DWORD *)(v8 + 32);
          ++*((_DWORD *)v11 + 8);
          v11[10] = 0;
          v11[7] = 0;
          v11[8] = 0;
          v11[6] = 0;
          *((_DWORD *)v11 + 18) = 0;
          uint64_t v16 = *(void *)(v8 + 48);
          uint64_t v17 = *(void *)(v8 + 56);
          uint64_t v18 = v8 + 48;
          v11[6] = v16;
          v11[7] = v17;
          *(void *)uint64_t v18 = 0;
          *(void *)(v18 + 8) = 0;
          uint64_t v19 = v11[8];
          v11[8] = *(void *)(v18 + 16);
          *(void *)(v18 + 16) = v19;
          uint64_t v20 = v11[10];
          v11[10] = *(void *)(v18 + 32);
          *(void *)(v18 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = v20;
          ++*(_DWORD *)(v18 + 24);
          ++*((_DWORD *)v11 + 18);
          re::DynamicArray<unsigned long>::deinit(v18);
          re::DynamicArray<unsigned long>::deinit(v12);
          uint64_t v8 = v18 + 40;
          v11 += 11;
        }
        while (v8 != v10);
        uint64_t v8 = v5[4];
      }
      BOOL result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

void re::HashTable<unsigned int,re::RenderGraphOptimizerProcessor::process(re::RenderGraphCompiled &)::Lifespan,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _DWORD *a4, void *a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      int v11 = *(_DWORD *)(a1 + 28);
      signed int v12 = 2 * v11;
      uint64_t v13 = *(void *)a1;
      if (*(void *)a1)
      {
        if (v12) {
          BOOL v14 = v9 == v12;
        }
        else {
          BOOL v14 = 1;
        }
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v25, 0, 36);
          *(void *)&v25[36] = 0x7FFFFFFFLL;
          re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::init((uint64_t)v25, v13, v12);
          long long v15 = *(_OWORD *)v25;
          *(_OWORD *)uint64_t v25 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          uint64_t v16 = *(void *)&v25[16];
          uint64_t v17 = *(void *)(a1 + 16);
          *(void *)&v25[16] = v17;
          *(void *)(a1 + 16) = v16;
          long long v19 = *(_OWORD *)&v25[24];
          *(_OWORD *)&v25[24] = *(_OWORD *)(a1 + 24);
          unsigned int v18 = *(_DWORD *)&v25[32];
          *(_OWORD *)(a1 + 24) = v19;
          uint64_t v20 = v18;
          if (v18)
          {
            uint64_t v21 = v17 + 16;
            do
            {
              if ((*(_DWORD *)(v21 - 8) & 0x80000000) != 0) {
                re::HashTable<unsigned int,re::RenderGraphOptimizerProcessor::process(re::RenderGraphCompiled &)::Lifespan,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::addAsMove(a1, *(void *)(v21 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(v21 - 16), v21 - 4, v21);
              }
              v21 += 24;
              --v20;
            }
            while (v20);
          }
          re::HashTable<unsigned int,re::RenderGraphOptimizerProcessor::process(re::RenderGraphCompiled &)::Lifespan,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::~HashTable((uint64_t *)v25);
        }
      }
      else
      {
        if (v12) {
          signed int v24 = 2 * v11;
        }
        else {
          signed int v24 = 3;
        }
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = v10 + 1;
    uint64_t v22 = *(void *)(a1 + 16);
    int v23 = *(_DWORD *)(v22 + 24 * v9 + 8);
  }
  else
  {
    uint64_t v22 = *(void *)(a1 + 16);
    int v23 = *(_DWORD *)(v22 + 24 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v23 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v22 + 24 * v9 + 8) = v23 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + 24 * v9 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 24 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 24 * v9) = a3;
  *(_DWORD *)(*(void *)(a1 + 16) + 24 * v9 + 12) = *a4;
  *(void *)(*(void *)(a1 + 16) + 24 * v9 + 16) = *a5;
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
}

re::BlendShapeModelBuilder *re::BlendShapeModelBuilder::BlendShapeModelBuilder(re::BlendShapeModelBuilder *this, re::Allocator *a2, id *a3, unint64_t a4, unint64_t a5, DeformationModelData *a6)
{
  id v11 = *a3;
  *(void *)this = v11;
  *((void *)this + 1) = a6;
  if (v11)
  {
  }
  else
  {
    uint64_t v12 = re::DeformationModelData::create<re::BlendShapeDeformer,re::BlendShapeModelPayload>((uint64_t *)a6, (uint64_t)a2);
    re::FixedArray<re::BlendShapeModelPayload::BlendShapeBufferPayload>::init<>(v12 + 8, (uint64_t)a2, a5);
  }
  re::StringID::invalid((re::StringID *)&v14);
  re::FixedArray<re::StringID>::init<re::StringID>((re::StringID *)(v12 + 56), (uint64_t)a2, a5, &v14);
  re::StringID::destroyString((re::StringID *)&v14);
  return this;
}

uint64_t re::DeformationModelData::create<re::BlendShapeDeformer,re::BlendShapeModelPayload>(uint64_t *a1, uint64_t a2)
{
  v8[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 80, 8);
  *(unsigned char *)uint64_t v4 = 0;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 8) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(void *)(v4 + 72) = 0;
  v6[0] = &unk_26E710750;
  v6[1] = a2;
  v6[3] = v6;
  uint64_t v7 = v4;
  v8[3] = v8;
  v8[0] = &unk_26E710750;
  v8[1] = a2;
  std::unique_ptr<void,std::function<void ()(void *)>>::operator=[abi:nn180100](a1, &v7);
  std::unique_ptr<void,std::function<void ()(void *)>>::~unique_ptr[abi:nn180100](&v7);
  std::__function::__value_func<void ()(void *)>::~__value_func[abi:nn180100](v6);
  return *a1;
}

uint64_t re::FixedArray<re::BlendShapeModelPayload::BlendShapeBufferPayload>::init<>(uint64_t result, uint64_t a2, unint64_t a3)
{
  *(void *)BOOL result = a2;
  *(void *)(result + 8) = a3;
  if (!a3) {
    return result;
  }
  if (a3 >= 0x1642C8590B21643)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 184, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v4 = result;
  BOOL result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a2 + 32))(a2, 184 * a3, 8);
  *(void *)(v4 + 16) = result;
  if (!result)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    BOOL result = _os_crash();
    __break(1u);
    return result;
  }
  unint64_t v6 = a3 - 1;
  if (a3 != 1)
  {
    do
    {
      *(void *)(result + 7) = 0;
      *(void *)BOOL result = 0;
      *(_OWORD *)(result + 16) = 0uLL;
      *(_OWORD *)(result + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0uLL;
      *(_OWORD *)(result + 48) = 0uLL;
      *(_OWORD *)(result + 64) = 0uLL;
      *(_OWORD *)(result + 80) = 0uLL;
      *(_OWORD *)(result + re::DynamicArray<re::RigComponentConstraint>::deinit((uint64_t)this + 96) = 0uLL;
      *(_OWORD *)(result + 112) = 0uLL;
      *(_OWORD *)(result + 128) = 0uLL;
      *(_OWORD *)(result + 144) = 0uLL;
      *(_OWORD *)(result + 160) = 0uLL;
      *(void *)(result + 176) = 0;
      result += 184;
      --v6;
    }
    while (v6);
  }
  *(void *)(result + 7) = 0;
  *(void *)BOOL result = 0;
  *(_OWORD *)(result + 16) = 0u;
  *(_OWORD *)(result + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0u;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  *(_OWORD *)(result + 80) = 0u;
  *(_OWORD *)(result + re::DynamicArray<re::RigComponentConstraint>::deinit((uint64_t)this + 96) = 0u;
  *(_OWORD *)(result + 112) = 0u;
  *(_OWORD *)(result + 128) = 0u;
  *(_OWORD *)(result + 144) = 0u;
  *(_OWORD *)(result + 160) = 0u;
  *(void *)(result + 176) = 0;
  return result;
}

uint64_t re::DeformationModelData::create<re::BlendShapeDeformer,re::anonymous namespace'::BlendShapeModel>(uint64_t *a1, uint64_t a2)
{
  v8[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 80, 8);
  *(_DWORD *)uint64_t v4 = 0;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 8) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(void *)(v4 + 72) = 0;
  v6[0] = &unk_26E7107D0;
  v6[1] = a2;
  v6[3] = v6;
  uint64_t v7 = v4;
  v8[3] = v8;
  v8[0] = &unk_26E7107D0;
  v8[1] = a2;
  std::unique_ptr<void,std::function<void ()(void *)>>::operator=[abi:nn180100](a1, &v7);
  std::unique_ptr<void,std::function<void ()(void *)>>::~unique_ptr[abi:nn180100](&v7);
  std::__function::__value_func<void ()(void *)>::~__value_func[abi:nn180100](v6);
  return *a1;
}

uint64_t re::FixedArray<re::anonymous namespace'::BlendShapeBuffer>::init<>(uint64_t result, uint64_t a2, unint64_t a3)
{
  *(void *)BOOL result = a2;
  *(void *)(result + 8) = a3;
  if (!a3) {
    return result;
  }
  if (a3 >= 0x186186186186187)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 168, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v4 = result;
  BOOL result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a2 + 32))(a2, 168 * a3, 8);
  *(void *)(v4 + 16) = result;
  if (!result)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    BOOL result = _os_crash();
    __break(1u);
    return result;
  }
  unint64_t v6 = a3 - 1;
  if (a3 != 1)
  {
    do
    {
      *(void *)BOOL result = 0;
      *(void *)(result + 8) = 0;
      *(_DWORD *)(result + 16) = 0;
      *(void *)(result + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0;
      *(void *)(result + 40) = 0;
      *(void *)(result + 24) = 0;
      *(_DWORD *)(result + 47) = 0;
      *(_OWORD *)(result + 56) = 0uLL;
      *(_OWORD *)(result + 72) = 0uLL;
      *(_OWORD *)(result + 88) = 0uLL;
      *(_OWORD *)(result + 104) = 0uLL;
      *(_OWORD *)(result + 120) = 0uLL;
      *(_OWORD *)(result + re::DynamicArray<re::RigComponentConstraint>::deinit((uint64_t)this + 136) = 0uLL;
      *(_OWORD *)(result + 152) = 0uLL;
      result += 168;
      --v6;
    }
    while (v6);
  }
  *(void *)BOOL result = 0;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  *(void *)(result + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0;
  *(void *)(result + 40) = 0;
  *(void *)(result + 24) = 0;
  *(_DWORD *)(result + 47) = 0;
  *(_OWORD *)(result + 56) = 0u;
  *(_OWORD *)(result + 72) = 0u;
  *(_OWORD *)(result + 88) = 0u;
  *(_OWORD *)(result + 104) = 0u;
  *(_OWORD *)(result + 120) = 0u;
  *(_OWORD *)(result + re::DynamicArray<re::RigComponentConstraint>::deinit((uint64_t)this + 136) = 0u;
  *(_OWORD *)(result + 152) = 0u;
  return result;
}

void *re::BlendShapeModelBuilder::BlendShapeModelBuilder(void *a1, uint64_t a2, id *a3, unint64_t a4, int a5, uint64_t a6, uint64_t *a7)
{
  *a1 = *a3;
  a1[1] = a7;
  re::FixedArray<unsigned int>::operator=((uint64_t *)(v13 + 32), a6);
  *(_DWORD *)uint64_t v13 = a5 != 0;
  re::StringID::invalid((re::StringID *)&v15);
  re::FixedArray<re::StringID>::init<re::StringID>((re::StringID *)(v13 + 56), a2, a4, &v15);
  re::StringID::destroyString((re::StringID *)&v15);
  return a1;
}

void *re::BlendShapeModelBuilder::addBlendShapeGroup(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, char a5)
{
  unint64_t v6 = a3;
  unint64_t v7 = a2;
  uint64_t v299 = *MEMORY[0x263EF8340];
  uint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = (StringID *)(v8 + 3);
  uint64_t v10 = (3 * *(_DWORD *)(a2 + 44));
  uint64_t v11 = (v10 + 3) & 0x1FFFFFFFCLL;
  unint64_t v12 = (unint64_t)(v8 + 3) >> 2;
  uint64_t v13 = **(void ***)(a1 + 8);
  v244 = *(void **)a1;
  if (!*(void *)a1) {
    goto LABEL_6;
  }
  StringID v14 = (unsigned long long *)v13[5];
  if ((unint64_t)v14 <= a3) {
    goto LABEL_342;
  }
  *(_DWORD *)(v13[6] + 4 * a3) = a4;
  StringID v14 = (unsigned long long *)v13[2];
  if ((unint64_t)v14 <= a4)
  {
LABEL_343:
    uint64_t v275 = 0;
    long long v285 = 0u;
    long long v286 = 0u;
    long long v283 = 0u;
    long long v284 = 0u;
    unsigned long long v282 = 0u;
    unint64_t v6 = a4;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    v296[0] = 136315906;
    *(void *)&v296[1] = "operator[]";
    LOWORD(v296[3]) = 1024;
    *(_DWORD *)((char *)&v296[3] + 2) = 468;
    HIWORD(v296[4]) = 2048;
    *(void *)&v296[5] = v6;
    LOWORD(v296[7]) = 2048;
    *(void *)((char *)&v296[7] + 2) = v14;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_344:
    re::internal::assertLog((re::internal *)4, v19, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "first", 447);
    _os_crash();
    __break(1u);
    goto LABEL_345;
  }
  uint64_t v15 = v13[3] + 168 * a4;
  *(void *)uint64_t v15 = v8;
  *(_DWORD *)(v15 + 8) = v12;
  *(_DWORD *)(v15 + 12) = v10;
  *(_DWORD *)(v15 + 16) = v11;
  uint64_t v16 = **(void **)(a1 + 8);
  StringID v14 = *(unsigned long long **)(v16 + 64);
  if ((unint64_t)v14 <= a4)
  {
    uint64_t v275 = 0;
    uint64_t v9 = (StringID *)&v282;
    long long v285 = 0u;
    long long v286 = 0u;
    long long v283 = 0u;
    long long v284 = 0u;
    unsigned long long v282 = 0u;
    LODWORD(v10) = &_os_log_internal;
    unint64_t v6 = a4;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    v296[0] = 136315906;
    *(void *)&v296[1] = "operator[]";
    LOWORD(v296[3]) = 1024;
    *(_DWORD *)((char *)&v296[3] + 2) = 468;
    HIWORD(v296[4]) = 2048;
    *(void *)&v296[5] = v6;
    LOWORD(v296[7]) = 2048;
    *(void *)((char *)&v296[7] + 2) = v14;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_6:
    StringID v14 = (unsigned long long *)v13[5];
    if ((unint64_t)v14 <= v6)
    {
LABEL_345:
      uint64_t v275 = 0;
      long long v285 = 0u;
      long long v286 = 0u;
      long long v283 = 0u;
      long long v284 = 0u;
      unsigned long long v282 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      v296[0] = 136315906;
      *(void *)&v296[1] = "operator[]";
      LOWORD(v296[3]) = 1024;
      *(_DWORD *)((char *)&v296[3] + 2) = 468;
      HIWORD(v296[4]) = 2048;
      *(void *)&v296[5] = v6;
      LOWORD(v296[7]) = 2048;
      *(void *)((char *)&v296[7] + 2) = v14;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_346;
    }
    *(_DWORD *)(v13[6] + 4 * v6) = a4;
    StringID v14 = (unsigned long long *)v13[2];
    if ((unint64_t)v14 <= a4)
    {
LABEL_346:
      uint64_t v275 = 0;
      long long v285 = 0u;
      long long v286 = 0u;
      long long v283 = 0u;
      long long v284 = 0u;
      unsigned long long v282 = 0u;
      unint64_t v224 = a4;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      v296[0] = 136315906;
      *(void *)&v296[1] = "operator[]";
      LOWORD(v296[3]) = 1024;
      *(_DWORD *)((char *)&v296[3] + 2) = 468;
      HIWORD(v296[4]) = 2048;
      *(void *)&v296[5] = v224;
      LOWORD(v296[7]) = 2048;
      *(void *)((char *)&v296[7] + 2) = v14;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_347;
    }
    uint64_t v17 = (_DWORD *)(v13[3] + 184 * a4);
    *uint64_t v17 = v12;
    v17[1] = v10;
    v17[2] = v11;
    uint64_t v16 = **(void **)(a1 + 8);
    StringID v14 = *(unsigned long long **)(v16 + 64);
    if ((unint64_t)v14 <= a4)
    {
LABEL_347:
      uint64_t v275 = 0;
      long long v285 = 0u;
      long long v286 = 0u;
      long long v283 = 0u;
      long long v284 = 0u;
      unsigned long long v282 = 0u;
      unint64_t v225 = a4;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      v296[0] = 136315906;
      *(void *)&v296[1] = "operator[]";
      LOWORD(v296[3]) = 1024;
      *(_DWORD *)((char *)&v296[3] + 2) = 468;
      HIWORD(v296[4]) = 2048;
      *(void *)&v296[5] = v225;
      LOWORD(v296[7]) = 2048;
      *(void *)((char *)&v296[7] + 2) = v14;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_348;
    }
  }
  unint64_t v253 = a4;
  unsigned int v18 = re::StringID::operator=((unint64_t *)(*(void *)(v16 + 72) + 16 * a4), (uint64_t *)v7);
  uint64_t v20 = *(unsigned __int8 *)(v7 + 40);
  unint64_t v261 = v7;
  if (v20 != 2)
  {
    if (v20 != 1) {
      goto LABEL_365;
    }
    unint64_t v21 = (unint64_t)v9 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(void *)(v7 + 24))
    {
      uint64_t v22 = (void *)(*(void *)(v7 + 32) + 72);
      uint64_t v23 = 1;
      uint64_t v24 = *(void *)(v7 + 24);
      while (!*(v22 - 6))
      {
        v22 += 17;
        if (!--v24) {
          goto LABEL_65;
        }
      }
      uint64_t v23 = 1;
      if (*v22) {
        uint64_t v23 = 2;
      }
      if (v22[3]) {
        ++v23;
      }
      if (v22[6]) {
        ++v23;
      }
    }
    else
    {
      uint64_t v23 = 1;
    }
LABEL_65:
    unint64_t v67 = 4 * v11 * v23;
    if (v67 > v21) {
      unint64_t v21 = v67;
    }
    v243 = *(uint64_t **)(a1 + 8);
    unint64_t v258 = *(void *)(v7 + 24);
    if ((a5 & 1) == 0 && v21 < 0xFFFF)
    {
      re::StringID::invalid((re::StringID *)&v282);
      uint64_t v279 = 0;
      unint64_t v280 = 0;
      uint64_t v281 = 0;
      re::StringID::destroyString((re::StringID *)&v282);
      uint64_t v69 = *(void *)(v7 + 24);
      if (!v69)
      {
        int v248 = 0;
        BOOL v251 = 0;
        int v246 = 0;
        uint64_t v80 = 0;
        LODWORD(v47) = *(_DWORD *)(v7 + 44);
        unint64_t v81 = (3 * v47);
        LODWORD(v259) = 3 * v47;
        unint64_t v76 = v81;
        goto LABEL_107;
      }
      uint64_t v70 = (void *)(*(void *)(v7 + 32) + 72);
      while (!*(v70 - 6))
      {
        v70 += 17;
        if (!--v69)
        {
          BOOL v71 = 0;
          BOOL v251 = 0;
          int v248 = 0;
          goto LABEL_86;
        }
      }
      goto LABEL_85;
    }
    re::StringID::invalid((re::StringID *)&v282);
    uint64_t v279 = 0;
    unint64_t v280 = 0;
    uint64_t v281 = 0;
    re::StringID::destroyString((re::StringID *)&v282);
    uint64_t v73 = *(void *)(v7 + 24);
    if (!v73)
    {
      int v249 = 0;
      BOOL v252 = 0;
      int v247 = 0;
      uint64_t v82 = 0;
      int v83 = *(_DWORD *)(v7 + 44);
      unint64_t v84 = (3 * v83);
      unint64_t v6 = v84;
      unint64_t v76 = v84;
      goto LABEL_208;
    }
    uint64_t v74 = (void *)(*(void *)(v7 + 32) + 72);
    do
    {
      if (*(v74 - 6))
      {
        int v249 = *v74 != 0;
        BOOL v252 = v74[3] != 0;
        BOOL v75 = v74[6] != 0;
        goto LABEL_93;
      }
      v74 += 17;
      --v73;
    }
    while (v73);
    BOOL v75 = 0;
    BOOL v252 = 0;
    int v249 = 0;
LABEL_93:
    uint64_t v87 = 0;
    uint64_t v88 = 0;
    unint64_t v38 = 0;
    do
    {
      unint64_t v6 = v280;
      if (v280 <= v38) {
        goto LABEL_335;
      }
      uint64_t v72 = re::StringID::operator=((unint64_t *)(v281 + v87), (uint64_t *)(*(void *)(v7 + 32) + v88));
      ++v38;
      v88 += 136;
      v87 += 16;
    }
    while (v38 < *(void *)(v7 + 24));
    int v83 = *(_DWORD *)(v7 + 44);
    unint64_t v76 = (3 * v83);
    unint64_t v6 = v76;
    unint64_t v84 = v76 << v249;
    if (v252)
    {
      v84 += v76;
      if (!v75)
      {
        int v247 = 0;
        uint64_t v82 = 0;
        BOOL v252 = 1;
        goto LABEL_208;
      }
    }
    else if (!v75)
    {
      BOOL v252 = 0;
      int v247 = 0;
      uint64_t v82 = 0;
LABEL_208:
      unsigned int v236 = v82;
      unint64_t v238 = v84;
      unint64_t v102 = v82 + v84;
      unint64_t v240 = v76;
      if (v102)
      {
        if (!v161) {
          goto LABEL_352;
        }
        v163 = v161;
        v164 = (char *)(v102 - 1);
        if (v102 != 1)
        {
          v163 = v161;
          do
          {
            *((void *)v163 + 4) = 0;
            *((void *)v163 + 1) = 0;
            *((void *)v163 + 2) = 0;
            *(void *)v163 = 0;
            *((_DWORD *)v163 + 6) = 0;
            v163 = (_anonymous_namespace_ *)((char *)v163 + 40);
            --v164;
          }
          while (v164);
        }
        *((void *)v163 + 4) = 0;
        *((void *)v163 + 1) = 0;
        *((void *)v163 + 2) = 0;
        *(void *)v163 = 0;
        *((_DWORD *)v163 + 6) = 0;
      }
      else
      {
        v161 = 0;
      }
      unint64_t v264 = v102;
      v266 = v161;
      if (v258)
      {
        unint64_t v7 = 0;
        unsigned int v242 = 6 * v83;
        unsigned int v257 = v6;
        do
        {
          uint64_t v94 = *(unsigned long long **)(v261 + 24);
          if ((unint64_t)v94 <= v7) {
            goto LABEL_341;
          }
          uint64_t v165 = *(void *)(v261 + 32);
          uint64_t v166 = v165 + 136 * v7;
          unint64_t v168 = *(void *)(v166 + 24);
          v167 = (unint64_t *)(v166 + 24);
          unint64_t v38 = v168;
          if (v168)
          {
            unint64_t v12 = 0;
            uint64_t v260 = *(void *)(v261 + 32);
            uint64_t v169 = v165 + 136 * v7;
            v170 = (unint64_t *)(v169 + 48);
            unint64_t v103 = v169 + 56;
            unint64_t v6 = v169 + 32;
            unint64_t v99 = (unint64_t)v266;
            do
            {
              unint64_t v34 = *v170;
              if (*v170 <= v12) {
                goto LABEL_309;
              }
              float v171 = *(float *)(*(void *)v103 + 4 * v12);
              if (fabsf(v171) >= 0.00001)
              {
                unint64_t v34 = *v167;
                if (*v167 <= v12) {
                  goto LABEL_311;
                }
                unint64_t v34 = *(unsigned int *)(*(void *)v6 + 4 * v12);
                if (v102 <= v34) {
                  goto LABEL_313;
                }
                *(void *)&unsigned long long v282 = __PAIR64__(LODWORD(v171), v7);
              }
              ++v12;
            }
            while (v38 != v12);
            unint64_t v12 = v257;
            if (v249)
            {
              uint64_t v106 = 0;
              uint64_t v172 = v260 + 136 * v7;
              v173 = (unint64_t **)(v172 + 72);
              unint64_t v34 = v172 + 80;
              unint64_t v12 = v257;
              do
              {
                unint64_t v103 = (unint64_t)*v173;
                if (*v173 <= (unint64_t *)v106) {
                  goto LABEL_315;
                }
                float v174 = *(float *)(*(void *)v34 + 4 * (void)v106);
                if (fabsf(v174) >= 0.00001)
                {
                  unint64_t v103 = *v167;
                  if (*v167 <= (unint64_t)v106) {
                    goto LABEL_321;
                  }
                  unint64_t v103 = *(_DWORD *)(*(void *)v6 + 4 * (void)v106) + v257;
                  if (v102 <= v103)
                  {
LABEL_323:
                    uint64_t v275 = 0;
                    uint64_t v106 = (StringID *)&v282;
                    long long v285 = 0u;
                    long long v286 = 0u;
                    long long v283 = 0u;
                    long long v284 = 0u;
                    unsigned long long v282 = 0u;
                    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                    v296[0] = 136315906;
                    *(void *)&v296[1] = "operator[]";
                    LOWORD(v296[3]) = 1024;
                    *(_DWORD *)((char *)&v296[3] + 2) = 468;
                    HIWORD(v296[4]) = 2048;
                    *(void *)&v296[5] = v103;
                    LOWORD(v296[7]) = 2048;
                    *(void *)((char *)&v296[7] + 2) = v102;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
LABEL_324:
                    uint64_t v275 = 0;
                    long long v285 = 0u;
                    long long v286 = 0u;
                    long long v283 = 0u;
                    long long v284 = 0u;
                    unsigned long long v282 = 0u;
                    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                    v296[0] = 136315906;
                    *(void *)&v296[1] = "operator[]";
                    LOWORD(v296[3]) = 1024;
                    *(_DWORD *)((char *)&v296[3] + 2) = 476;
                    HIWORD(v296[4]) = 2048;
                    *(void *)&v296[5] = v106;
                    LOWORD(v296[7]) = 2048;
                    *(void *)((char *)&v296[7] + 2) = v7;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
LABEL_325:
                    uint64_t v275 = 0;
                    long long v285 = 0u;
                    long long v286 = 0u;
                    long long v283 = 0u;
                    long long v284 = 0u;
                    unsigned long long v282 = 0u;
                    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                    v296[0] = 136315906;
                    *(void *)&v296[1] = "operator[]";
                    LOWORD(v296[3]) = 1024;
                    *(_DWORD *)((char *)&v296[3] + 2) = 476;
                    HIWORD(v296[4]) = 2048;
                    *(void *)&v296[5] = v106;
                    LOWORD(v296[7]) = 2048;
                    *(void *)((char *)&v296[7] + 2) = v102;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
LABEL_326:
                    uint64_t v275 = 0;
                    long long v285 = 0u;
                    long long v286 = 0u;
                    long long v283 = 0u;
                    long long v284 = 0u;
                    unsigned long long v282 = 0u;
                    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                    v296[0] = 136315906;
                    *(void *)&v296[1] = "operator[]";
                    LOWORD(v296[3]) = 1024;
                    *(_DWORD *)((char *)&v296[3] + 2) = 468;
                    HIWORD(v296[4]) = 2048;
                    *(void *)&v296[5] = v7;
                    LOWORD(v296[7]) = 2048;
                    *(void *)((char *)&v296[7] + 2) = v264;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
LABEL_327:
                    uint64_t v275 = 0;
                    uint64_t v106 = (StringID *)&v282;
                    long long v285 = 0u;
                    long long v286 = 0u;
                    long long v283 = 0u;
                    long long v284 = 0u;
                    unsigned long long v282 = 0u;
                    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                    v296[0] = 136315906;
                    *(void *)&v296[1] = "operator[]";
                    LOWORD(v296[3]) = 1024;
                    *(_DWORD *)((char *)&v296[3] + 2) = 468;
                    HIWORD(v296[4]) = 2048;
                    *(void *)&v296[5] = v102;
                    LOWORD(v296[7]) = 2048;
                    *(void *)((char *)&v296[7] + 2) = v264;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
LABEL_328:
                    uint64_t v275 = 0;
                    long long v285 = 0u;
                    long long v286 = 0u;
                    long long v283 = 0u;
                    long long v284 = 0u;
                    unsigned long long v282 = 0u;
                    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                    v296[0] = 136315906;
                    *(void *)&v296[1] = "operator[]";
                    LOWORD(v296[3]) = 1024;
                    *(_DWORD *)((char *)&v296[3] + 2) = 476;
                    HIWORD(v296[4]) = 2048;
                    *(void *)&v296[5] = v106;
                    LOWORD(v296[7]) = 2048;
                    *(void *)((char *)&v296[7] + 2) = v34;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
LABEL_329:
                    uint64_t v275 = 0;
                    unint64_t v38 = (unint64_t)&v282;
                    long long v285 = 0u;
                    long long v286 = 0u;
                    long long v283 = 0u;
                    long long v284 = 0u;
                    unsigned long long v282 = 0u;
                    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                    v296[0] = 136315906;
                    *(void *)&v296[1] = "operator[]";
                    LOWORD(v296[3]) = 1024;
                    *(_DWORD *)((char *)&v296[3] + 2) = 476;
                    HIWORD(v296[4]) = 2048;
                    *(void *)&v296[5] = v106;
                    LOWORD(v296[7]) = 2048;
                    *(void *)((char *)&v296[7] + 2) = v34;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
LABEL_330:
                    uint64_t v275 = 0;
                    long long v285 = 0u;
                    long long v286 = 0u;
                    long long v283 = 0u;
                    long long v284 = 0u;
                    unsigned long long v282 = 0u;
                    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                    v296[0] = 136315906;
                    *(void *)&v296[1] = "operator[]";
                    LOWORD(v296[3]) = 1024;
                    *(_DWORD *)((char *)&v296[3] + 2) = 468;
                    HIWORD(v296[4]) = 2048;
                    *(void *)&v296[5] = v34;
                    LOWORD(v296[7]) = 2048;
                    *(void *)((char *)&v296[7] + 2) = v264;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
LABEL_331:
                    uint64_t v275 = 0;
                    long long v285 = 0u;
                    long long v286 = 0u;
                    long long v283 = 0u;
                    long long v284 = 0u;
                    unsigned long long v282 = 0u;
                    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                    v296[0] = 136315906;
                    *(void *)&v296[1] = "operator[]";
                    LOWORD(v296[3]) = 1024;
                    *(_DWORD *)((char *)&v296[3] + 2) = 468;
                    HIWORD(v296[4]) = 2048;
                    *(void *)&v296[5] = v34;
                    LOWORD(v296[7]) = 2048;
                    *(void *)((char *)&v296[7] + 2) = v102;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
LABEL_332:
                    uint64_t v267 = 0;
                    long long v297 = 0u;
                    long long v298 = 0u;
                    memset(v296, 0, sizeof(v296));
                    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                    int v288 = 136315906;
                    v289 = "operator[]";
                    __int16 v290 = 1024;
                    int v291 = 476;
                    __int16 v292 = 2048;
                    unint64_t v293 = v34;
                    __int16 v294 = 2048;
                    unint64_t v295 = v6;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
                    goto LABEL_333;
                  }
                  *(void *)&unsigned long long v282 = __PAIR64__(LODWORD(v174), v7);
                }
                uint64_t v106 = (StringID *)((char *)v106 + 1);
              }
              while ((StringID *)v38 != v106);
              unint64_t v12 = v242;
            }
            uint64_t v175 = v260;
            if (v252)
            {
              uint64_t v106 = 0;
              uint64_t v176 = v260 + 136 * v7;
              unint64_t v103 = v176 + 96;
              v177 = (void *)(v176 + 104);
              if (v38 <= 1) {
                unint64_t v34 = 1;
              }
              else {
                unint64_t v34 = v38;
              }
              do
              {
                unint64_t v102 = *(void *)v103;
                if (*(void *)v103 <= (unint64_t)v106) {
                  goto LABEL_317;
                }
                float v178 = *(float *)(*v177 + 4 * (void)v106);
                if (fabsf(v178) >= 0.00001)
                {
                  unint64_t v102 = *v167;
                  if (*v167 <= (unint64_t)v106) {
                    goto LABEL_325;
                  }
                  unint64_t v102 = (*(_DWORD *)(*(void *)v6 + 4 * (void)v106) + v12);
                  if (v264 <= v102) {
                    goto LABEL_327;
                  }
                  *(void *)&unsigned long long v282 = __PAIR64__(LODWORD(v178), v7);
                }
                uint64_t v106 = (StringID *)((char *)v106 + 1);
              }
              while ((StringID *)v34 != v106);
              unint64_t v12 = v12 + v257;
              unint64_t v102 = v264;
              uint64_t v175 = v260;
            }
            if (v247)
            {
              uint64_t v106 = 0;
              uint64_t v179 = v175 + 136 * v7;
              unint64_t v103 = v179 + 120;
              v180 = (void *)(v179 + 128);
              if (v38 <= 1) {
                unint64_t v38 = 1;
              }
              do
              {
                unint64_t v34 = *(void *)v103;
                if (*(void *)v103 <= (unint64_t)v106) {
                  goto LABEL_319;
                }
                float v181 = *(float *)(*v180 + 4 * (void)v106);
                if (fabsf(v181) >= 0.00001)
                {
                  unint64_t v34 = *v167;
                  if (*v167 <= (unint64_t)v106) {
                    goto LABEL_329;
                  }
                  unint64_t v34 = (*(_DWORD *)(*(void *)v6 + 4 * (void)v106) + v12);
                  if (v102 <= v34) {
                    goto LABEL_331;
                  }
                  *(void *)&unsigned long long v282 = __PAIR64__(LODWORD(v181), v7);
                }
                uint64_t v106 = (StringID *)((char *)v106 + 1);
              }
              while ((StringID *)v38 != v106);
            }
          }
          ++v7;
          v161 = v266;
        }
        while (v7 != v258);
      }
      if (v102)
      {
        uint64_t v182 = 0;
        uint64_t v183 = 0;
        v184 = (uint64_t *)((char *)v161 + 16);
        unint64_t v185 = v102;
        unint64_t v186 = v240;
        do
        {
          uint64_t v188 = *v184;
          v184 += 5;
          uint64_t v187 = v188;
          if (v188) {
            ++v182;
          }
          v183 += (v187 + 3) & 0xFFFFFFFFFFFFFFFCLL;
          --v185;
        }
        while (v185);
      }
      else
      {
        uint64_t v183 = 0;
        uint64_t v182 = 0;
        unint64_t v186 = v240;
      }
      unint64_t v12 = (v102 - v186) / 3;
      uint64_t v267 = 0;
      v268 = 0;
      uint64_t v269 = 0;
      uint64_t v189 = 0;
      unint64_t v190 = v102 - v186;
      if (v102 > v186)
      {
        unint64_t v191 = 0;
        uint64_t v189 = 0;
        unint64_t v6 = (unint64_t)v268;
        uint64_t v192 = v269;
        do
        {
          unint64_t v34 = v191 / 3;
          if (v6 <= v191 / 3) {
            goto LABEL_337;
          }
          if (!*(unsigned char *)(v192 + v34)) {
            ++v189;
          }
          *(unsigned char *)(v192 + v34) = 1;
          ++v191;
        }
        while (v190 != v191);
      }
      uint64_t v275 = 12;
      uint64_t v276 = 4 * v183;
      *(void *)&long long v277 = 4 * v182;
      *((void *)&v277 + 1) = 4 * v182 + 4;
      *(void *)&long long v278 = 4 * v183;
      *((void *)&v278 + 1) = 4 * v189;
      uint64_t v271 = 16;
      uint64_t v272 = 4 * v183;
      int8x16_t v273 = vandq_s8((int8x16_t)vaddq_s64(vdupq_n_s64(4 * v182), (int64x2_t)xmmword_2343BF8E0), (int8x16_t)vdupq_n_s64(0xFFFFFFFFFFFFFFF0));
      *(void *)&long long v274 = 4 * v183;
      *((void *)&v274 + 1) = (4 * v189 + 15) & 0xFFFFFFFFFFFFFFF0;
      long long v286 = 0u;
      long long v287 = 0u;
      long long v284 = 0u;
      long long v285 = 0u;
      unsigned long long v282 = 0u;
      long long v283 = 0u;
      unint64_t v12 = v283;
      v193 = (_DWORD *)v284;
      unint64_t v6 = v285;
      unint64_t v7 = v286;
      v194 = (_DWORD *)v287;
      bzero((void *)v283, 4 * v183);
      bzero((void *)v7, 4 * v183);
      unint64_t v195 = (3 * *(_DWORD *)(v261 + 44));
      uint64_t v196 = v282;
      int v197 = (v195 + 3) & 0xFFFFFFFC;
      *(_DWORD *)unsigned long long v282 = (v258 + 3) >> 2;
      *(_DWORD *)(v196 + 4) = v195;
      *(_DWORD *)(v196 + 8) = v197;
      if (v264)
      {
        unint64_t v198 = 0;
        uint64_t v199 = v12;
        do
        {
          uint64_t v200 = *((void *)v266 + 5 * v198 + 2);
          if (v200)
          {
            uint64_t v201 = 0;
            _DWORD *v193 = v198 % v195 + v198 / v195 * v197;
            *(_DWORD *)unint64_t v6 = (v199 - v12) >> 2;
            v202 = (_DWORD *)(*((void *)v266 + 5 * v198 + 4) + 4);
            uint64_t v203 = v200;
            do
            {
              *(_DWORD *)(v199 + v201) = *v202;
              *(_DWORD *)(v7 + v201) = *(v202 - 1);
              v202 += 2;
              v201 += 4;
              --v203;
            }
            while (v203);
            ++v193;
            v6 += 4;
            uint64_t v204 = 4 * (v200 & 3);
            uint64_t v199 = v199 - v204 + v201 + 16;
            unint64_t v7 = v7 - v204 + v201 + 16;
          }
          ++v198;
        }
        while (v198 != v264);
      }
      else
      {
        uint64_t v199 = v12;
      }
      *(_DWORD *)unint64_t v6 = (v199 - v12) >> 2;
      unint64_t v205 = v240;
      if (v190 >= 3)
      {
        v206 = 0;
        uint64_t v94 = v268;
        uint64_t v207 = v269;
        unint64_t v208 = (v102 - v186) / 3;
        if (v208 <= 1) {
          unint64_t v208 = 1;
        }
        do
        {
          if (v94 == v206) {
            goto LABEL_339;
          }
          if (*((unsigned char *)v206 + v207)) {
            *v194++ = v205 % v195 + v205 / v195 * v197;
          }
          v206 = (unsigned long long *)((char *)v206 + 1);
          v205 += 3;
        }
        while ((unsigned long long *)v208 != v206);
      }
      uint64_t v209 = *v243;
      if (*(void *)a1)
      {
        unint64_t v210 = *(void *)(v209 + 16);
        unint64_t v211 = v253;
        if (v210 <= v253) {
          goto LABEL_357;
        }
        id v212 = *(id *)(*(void *)(v209 + 24) + 168 * v253 + 56);
        unint64_t v213 = v253;
        unint64_t v150 = *(void *)(v209 + 16);
        if (v150 <= v253) {
          goto LABEL_358;
        }
        v214 = v212;
        re::FixedArray<float>::operator=((uint64_t *)(*(void *)(v209 + 24) + 168 * v253 + 24), &v279);
        unint64_t v215 = v253;
        unint64_t v150 = *(void *)(v209 + 16);
        if (v150 <= v253) {
          goto LABEL_360;
        }
        v216 = (unsigned char *)(*(void *)(v209 + 24) + 168 * v253);
        v216[48] = v249;
        v216[49] = v252;
        v216[50] = v247;
        if (v214) {
      }
        }
      else
      {
        unint64_t v152 = *(void *)(v209 + 16);
        unint64_t v217 = v253;
        if (v152 <= v253) {
          goto LABEL_363;
        }
        re::FixedArray<float>::operator=((uint64_t *)(*(void *)(v209 + 24) + 184 * v253 + 16), &v279);
        unint64_t v218 = v253;
        unint64_t v152 = *(void *)(v209 + 16);
        if (v152 <= v253) {
          goto LABEL_364;
        }
        v219 = (unsigned char *)(*(void *)(v209 + 24) + 184 * v253);
        v219[12] = v249;
        v219[13] = v252;
        v219[14] = v247;
      }
      if (v267 && v268) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v267 + 40))(v267, v269);
      }
      if (v264)
      {
        uint64_t v220 = 0;
        do
        {
          v221 = (void *)((char *)v266 + v220);
          uint64_t v222 = *(void *)((char *)v266 + v220);
          if (v222)
          {
            if (v221[4]) {
              (*(void (**)(uint64_t))(*(void *)v222 + 40))(v222);
            }
            v221[4] = 0;
            v221[1] = 0;
            v221[2] = 0;
            void *v221 = 0;
            ++*(_DWORD *)((char *)v266 + v220 + 24);
          }
          v220 += 40;
        }
        while (40 * v238 + 40 * v236 != v220);
      }
      goto LABEL_305;
    }
    int v247 = 1;
    uint64_t v82 = (3 * v83);
    goto LABEL_208;
  }
  unint64_t v6 = *(void *)(v7 + 24);
  if (!v6) {
    goto LABEL_344;
  }
  uint64_t v25 = *(uint64_t **)(a1 + 8);
  uint64_t v26 = *(void **)(v7 + 32);
  uint64_t v263 = v26[9];
  uint64_t v259 = v26[12];
  BOOL v245 = v259 != 0;
  uint64_t v27 = v26[15];
  uint64_t v28 = (3 * *(_DWORD *)(v7 + 44));
  if (v259) {
    uint64_t v29 = (3 * *(_DWORD *)(v7 + 44));
  }
  else {
    uint64_t v29 = 0;
  }
  uint64_t v255 = v27;
  LODWORD(v243) = v27 != 0;
  int v248 = v263 != 0;
  uint64_t v30 = v28 << (v263 != 0);
  if (!v27) {
    uint64_t v28 = 0;
  }
  uint64_t v31 = v30 + v29 + v28;
  re::StringID::invalid((re::StringID *)&v282);
  uint64_t v279 = 0;
  unint64_t v280 = 0;
  uint64_t v281 = 0;
  re::StringID::destroyString((re::StringID *)&v282);
  unint64_t v32 = (4 * v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  long long v277 = 0u;
  long long v278 = 0u;
  int8x16_t v273 = 0u;
  long long v274 = 0u;
  uint64_t v275 = 16;
  uint64_t v276 = v31 * v32;
  uint64_t v271 = 16;
  uint64_t v272 = v31 * v32;
  long long v286 = 0u;
  long long v287 = 0u;
  long long v284 = 0u;
  long long v285 = 0u;
  unsigned long long v282 = 0u;
  long long v283 = 0u;
  v250 = v25;
  uint64_t v33 = 0;
  unint64_t v34 = 0;
  uint64_t v35 = v282;
  unint64_t v36 = v283;
  *(_DWORD *)unsigned long long v282 = v12;
  *(_DWORD *)(v35 + 4) = v10;
  *(_DWORD *)(v35 + 8) = v11;
  unint64_t v258 = v36;
  unint64_t v37 = (_DWORD *)v36;
  while (1)
  {
    unint64_t v38 = v6;
    unint64_t v6 = *(void *)(v7 + 24);
    if (v6 <= v34) {
      goto LABEL_332;
    }
    unint64_t v6 = v280;
    if (v280 <= v34)
    {
LABEL_333:
      uint64_t v267 = 0;
      long long v297 = 0u;
      long long v298 = 0u;
      memset(v296, 0, sizeof(v296));
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v288 = 136315906;
      v289 = "operator[]";
      __int16 v290 = 1024;
      int v291 = 468;
      __int16 v292 = 2048;
      unint64_t v293 = v34;
      __int16 v294 = 2048;
      unint64_t v295 = v6;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_334:
      uint64_t v275 = 0;
      long long v285 = 0u;
      long long v286 = 0u;
      long long v283 = 0u;
      long long v284 = 0u;
      unsigned long long v282 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      v296[0] = 136315906;
      *(void *)&v296[1] = "operator[]";
      LOWORD(v296[3]) = 1024;
      *(_DWORD *)((char *)&v296[3] + 2) = 468;
      HIWORD(v296[4]) = 2048;
      *(void *)&v296[5] = v38;
      LOWORD(v296[7]) = 2048;
      *(void *)((char *)&v296[7] + 2) = v6;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_335:
      uint64_t v275 = 0;
      long long v285 = 0u;
      long long v286 = 0u;
      long long v283 = 0u;
      long long v284 = 0u;
      unsigned long long v282 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      v296[0] = 136315906;
      *(void *)&v296[1] = "operator[]";
      LOWORD(v296[3]) = 1024;
      *(_DWORD *)((char *)&v296[3] + 2) = 468;
      HIWORD(v296[4]) = 2048;
      *(void *)&v296[5] = v38;
      LOWORD(v296[7]) = 2048;
      *(void *)((char *)&v296[7] + 2) = v6;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_336;
    }
    unint64_t v7 = *(void *)(v7 + 32);
    unint64_t v39 = v7 + 136 * v34;
    unint64_t v41 = *(void *)(v39 + 48);
    uint64_t v40 = (unint64_t *)(v39 + 48);
    unint64_t v12 = v41;
    unint64_t v6 = v41 * (v32 >> 2);
    re::StringID::operator=((unint64_t *)(v281 + 16 * v34), (uint64_t *)(v7 + 136 * v34));
    if (v41) {
      break;
    }
    if (v263)
    {
LABEL_35:
      unint64_t v50 = v258 + 4 * v6;
      goto LABEL_37;
    }
    if (v259)
    {
      unint64_t v51 = v258 + 4 * v6;
      goto LABEL_45;
    }
LABEL_51:
    ++v34;
    ++v37;
    v33 += 4;
    unint64_t v6 = v38;
    unint64_t v7 = v261;
    if (v34 == v38)
    {
      uint64_t v59 = *v250;
      if (*(void *)a1)
      {
        StringID v14 = *(unsigned long long **)(v59 + 16);
        unint64_t v60 = v253;
        if ((unint64_t)v14 > v253)
        {
          id v61 = *(id *)(*(void *)(v59 + 24) + 168 * v253 + 56);
          unint64_t v62 = v253;
          unint64_t v63 = *(void *)(v59 + 16);
          if (v63 > v253)
          {
            uint64_t v64 = v61;
            re::FixedArray<float>::operator=((uint64_t *)(*(void *)(v59 + 24) + 168 * v253 + 24), &v279);
            uint64_t v65 = (StringID *)v253;
            unint64_t v63 = *(void *)(v59 + 16);
            if (v63 > v253)
            {
              uint64_t v66 = (unsigned char *)(*(void *)(v59 + 24) + 168 * v253);
              v66[48] = v248;
              v66[49] = v245;
              v66[50] = (_BYTE)v243;
              if (v64) {

              }
              goto LABEL_305;
            }
LABEL_350:
            uint64_t v267 = 0;
            long long v297 = 0u;
            long long v298 = 0u;
            memset(v296, 0, sizeof(v296));
            unint64_t v76 = (unint64_t)v65;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            int v288 = 136315906;
            v289 = "operator[]";
            __int16 v290 = 1024;
            int v291 = 468;
            __int16 v292 = 2048;
            unint64_t v293 = v76;
            __int16 v294 = 2048;
            unint64_t v295 = v63;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_351:
            re::internal::assertLog((re::internal *)4, v91, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
            _os_crash();
            __break(1u);
LABEL_352:
            re::internal::assertLog((re::internal *)4, v162, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
            _os_crash();
            __break(1u);
LABEL_353:
            uint64_t v267 = 0;
            long long v297 = 0u;
            long long v298 = 0u;
            memset(v296, 0, sizeof(v296));
            unint64_t v227 = v77;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            int v288 = 136315906;
            v289 = "operator[]";
            __int16 v290 = 1024;
            int v291 = 468;
            __int16 v292 = 2048;
            unint64_t v293 = v227;
            __int16 v294 = 2048;
            unint64_t v295 = v76;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
            goto LABEL_354;
          }
LABEL_349:
          uint64_t v267 = 0;
          long long v297 = 0u;
          long long v298 = 0u;
          memset(v296, 0, sizeof(v296));
          unint64_t v226 = v62;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          int v288 = 136315906;
          v289 = "operator[]";
          __int16 v290 = 1024;
          int v291 = 468;
          __int16 v292 = 2048;
          unint64_t v293 = v226;
          __int16 v294 = 2048;
          unint64_t v295 = v63;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_350;
        }
LABEL_348:
        uint64_t v267 = 0;
        long long v297 = 0u;
        long long v298 = 0u;
        memset(v296, 0, sizeof(v296));
        unint64_t v63 = v60;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v288 = 136315906;
        v289 = "operator[]";
        __int16 v290 = 1024;
        int v291 = 468;
        __int16 v292 = 2048;
        unint64_t v293 = v63;
        __int16 v294 = 2048;
        unint64_t v295 = (unint64_t)v14;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_349;
      }
      unint64_t v76 = *(void *)(v59 + 16);
      unint64_t v77 = v253;
      if (v76 <= v253) {
        goto LABEL_353;
      }
      re::FixedArray<float>::operator=((uint64_t *)(*(void *)(v59 + 24) + 184 * v253 + 16), &v279);
      unint64_t v78 = v253;
      unint64_t v76 = *(void *)(v59 + 16);
      if (v76 > v253)
      {
        uint64_t v79 = (unsigned char *)(*(void *)(v59 + 24) + 184 * v253);
        unsigned char v79[12] = v248;
        v79[13] = v245;
        v79[14] = (_BYTE)v243;
LABEL_305:
        BOOL result = re::FixedArray<re::StringID>::deinit(&v279);
        v223 = **(_DWORD ***)(a1 + 8);
        if (v244) {
          _DWORD *v223 = 1;
        }
        else {
          *(unsigned char *)v223 = 1;
        }
        return result;
      }
LABEL_354:
      uint64_t v267 = 0;
      long long v297 = 0u;
      long long v298 = 0u;
      memset(v296, 0, sizeof(v296));
      unint64_t v228 = v78;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v288 = 136315906;
      v289 = "operator[]";
      __int16 v290 = 1024;
      int v291 = 468;
      __int16 v292 = 2048;
      unint64_t v293 = v228;
      __int16 v294 = 2048;
      unint64_t v295 = v76;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_355:
      uint64_t v270 = 0;
      long long v297 = 0u;
      long long v298 = 0u;
      memset(v296, 0, sizeof(v296));
      unint64_t v147 = v144;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v288 = 136315906;
      v289 = "operator[]";
      __int16 v290 = 1024;
      int v291 = 468;
      __int16 v292 = 2048;
      unint64_t v293 = v147;
      __int16 v294 = 2048;
      unint64_t v295 = v76;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_356:
      uint64_t v270 = 0;
      long long v297 = 0u;
      long long v298 = 0u;
      memset(v296, 0, sizeof(v296));
      unint64_t v210 = v146;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v288 = 136315906;
      v289 = "operator[]";
      __int16 v290 = 1024;
      int v291 = 468;
      __int16 v292 = 2048;
      unint64_t v293 = v210;
      __int16 v294 = 2048;
      unint64_t v295 = v147;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_357:
      uint64_t v270 = 0;
      long long v297 = 0u;
      long long v298 = 0u;
      memset(v296, 0, sizeof(v296));
      unint64_t v150 = v211;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v288 = 136315906;
      v289 = "operator[]";
      __int16 v290 = 1024;
      int v291 = 468;
      __int16 v292 = 2048;
      unint64_t v293 = v150;
      __int16 v294 = 2048;
      unint64_t v295 = v210;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_358:
      uint64_t v270 = 0;
      long long v297 = 0u;
      long long v298 = 0u;
      memset(v296, 0, sizeof(v296));
      unint64_t v229 = v213;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v288 = 136315906;
      v289 = "operator[]";
      __int16 v290 = 1024;
      int v291 = 468;
      __int16 v292 = 2048;
      unint64_t v293 = v229;
      __int16 v294 = 2048;
      unint64_t v295 = v150;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_359:
      uint64_t v270 = 0;
      long long v297 = 0u;
      long long v298 = 0u;
      memset(v296, 0, sizeof(v296));
      unint64_t v230 = v149;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v288 = 136315906;
      v289 = "operator[]";
      __int16 v290 = 1024;
      int v291 = 468;
      __int16 v292 = 2048;
      unint64_t v293 = v230;
      __int16 v294 = 2048;
      unint64_t v295 = v150;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_360:
      uint64_t v270 = 0;
      long long v297 = 0u;
      long long v298 = 0u;
      memset(v296, 0, sizeof(v296));
      unint64_t v152 = v215;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v288 = 136315906;
      v289 = "operator[]";
      __int16 v290 = 1024;
      int v291 = 468;
      __int16 v292 = 2048;
      unint64_t v293 = v152;
      __int16 v294 = 2048;
      unint64_t v295 = v150;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_361:
      uint64_t v270 = 0;
      long long v297 = 0u;
      long long v298 = 0u;
      memset(v296, 0, sizeof(v296));
      unint64_t v231 = v153;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v288 = 136315906;
      v289 = "operator[]";
      __int16 v290 = 1024;
      int v291 = 468;
      __int16 v292 = 2048;
      unint64_t v293 = v231;
      __int16 v294 = 2048;
      unint64_t v295 = v152;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_362:
      uint64_t v270 = 0;
      long long v297 = 0u;
      long long v298 = 0u;
      memset(v296, 0, sizeof(v296));
      unint64_t v232 = v154;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v288 = 136315906;
      v289 = "operator[]";
      __int16 v290 = 1024;
      int v291 = 468;
      __int16 v292 = 2048;
      unint64_t v293 = v232;
      __int16 v294 = 2048;
      unint64_t v295 = v152;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_363:
      uint64_t v270 = 0;
      long long v297 = 0u;
      long long v298 = 0u;
      memset(v296, 0, sizeof(v296));
      unint64_t v233 = v217;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v288 = 136315906;
      v289 = "operator[]";
      __int16 v290 = 1024;
      int v291 = 468;
      __int16 v292 = 2048;
      unint64_t v293 = v233;
      __int16 v294 = 2048;
      unint64_t v295 = v152;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_364:
      uint64_t v270 = 0;
      long long v297 = 0u;
      long long v298 = 0u;
      memset(v296, 0, sizeof(v296));
      unint64_t v234 = v218;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v288 = 136315906;
      v289 = "operator[]";
      __int16 v290 = 1024;
      int v291 = 468;
      __int16 v292 = 2048;
      unint64_t v293 = v234;
      __int16 v294 = 2048;
      unint64_t v295 = v152;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_365:
      re::internal::assertLog((re::internal *)5, v19, "assertion failure: '%s' (%s:line %i) Invalid blend shape group storage mode: %u.", "!\"Unreachable code\"", "addBlendShapeGroup", 884, v20);
      _os_crash();
      __break(1u);
    }
  }
  uint64_t v42 = 0;
  unint64_t v43 = *v40;
  uint64_t v44 = v37;
  while (v43 != v42)
  {
    *uint64_t v44 = *(_DWORD *)(*(void *)(v7 + 136 * v34 + 56) + 4 * v42++);
    uint64_t v44 = (_DWORD *)((char *)v44 + v32);
    if (v12 == v42)
    {
      if (v263)
      {
        uint64_t v45 = 0;
        unint64_t v46 = v7 + 136 * v34;
        unint64_t v47 = *(void *)(v46 + 72);
        uint64_t v48 = (void *)(v46 + 80);
        unint64_t v49 = v32 * v12;
        while (v47 != v45)
        {
          *(_DWORD *)((char *)v37 + v49) = *(_DWORD *)(*v48 + 4 * v45++);
          v49 += v32;
          if (v12 == v45) {
            goto LABEL_35;
          }
        }
LABEL_104:
        uint64_t v267 = 0;
        long long v297 = 0u;
        long long v298 = 0u;
        memset(v296, 0, sizeof(v296));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v288 = 136315906;
        v289 = "operator[]";
        __int16 v290 = 1024;
        int v291 = 476;
        __int16 v292 = 2048;
        unint64_t v293 = v47;
        __int16 v294 = 2048;
        unint64_t v295 = v47;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_105:
        uint64_t v267 = 0;
        unint64_t v76 = (unint64_t)&v282;
        long long v297 = 0u;
        long long v298 = 0u;
        memset(v296, 0, sizeof(v296));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v288 = 136315906;
        v289 = "operator[]";
        __int16 v290 = 1024;
        int v291 = 476;
        __int16 v292 = 2048;
        unint64_t v293 = v47;
        __int16 v294 = 2048;
        unint64_t v295 = v47;
        _os_log_send_and_compose_impl();
        unint64_t v68 = (_anonymous_namespace_ *)_os_crash_msg();
        __break(1u);
LABEL_106:
        BOOL v251 = 0;
        int v246 = 0;
        uint64_t v80 = 0;
        goto LABEL_107;
      }
      unint64_t v50 = v258;
LABEL_37:
      unint64_t v51 = v50 + 4 * v6;
      if (v259)
      {
        if (v12)
        {
          uint64_t v52 = 0;
          unint64_t v53 = v7 + 136 * v34;
          unint64_t v47 = *(void *)(v53 + 96);
          unint64_t v54 = (void *)(v53 + 104);
          uint64_t v55 = v33;
          while (v47 != v52)
          {
            *(_DWORD *)(v51 + v55) = *(_DWORD *)(*v54 + 4 * v52++);
            v55 += v32;
            if (v12 == v52) {
              goto LABEL_45;
            }
          }
          goto LABEL_105;
        }
LABEL_45:
        v51 += 4 * v6;
      }
      if (v255 && v12)
      {
        uint64_t v56 = 0;
        unint64_t v57 = v7 + 136 * v34;
        unint64_t v6 = *(void *)(v57 + 120);
        unint64_t v58 = (void *)(v57 + 128);
        while (v6 != v56)
        {
          *(_DWORD *)(v51 + v33) = *(_DWORD *)(*v58 + 4 * v56++);
          v51 += v32;
          if (v12 == v56) {
            goto LABEL_51;
          }
        }
        uint64_t v267 = 0;
        long long v297 = 0u;
        long long v298 = 0u;
        memset(v296, 0, sizeof(v296));
        unint64_t v47 = &_os_log_internal;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v288 = 136315906;
        v289 = "operator[]";
        __int16 v290 = 1024;
        int v291 = 476;
        __int16 v292 = 2048;
        unint64_t v293 = v6;
        __int16 v294 = 2048;
        unint64_t v295 = v6;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_104;
      }
      goto LABEL_51;
    }
  }
  uint64_t v267 = 0;
  long long v297 = 0u;
  long long v298 = 0u;
  memset(v296, 0, sizeof(v296));
  os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
  int v288 = 136315906;
  v289 = "operator[]";
  __int16 v290 = 1024;
  int v291 = 476;
  __int16 v292 = 2048;
  unint64_t v293 = v43;
  __int16 v294 = 2048;
  unint64_t v295 = v43;
  _os_log_send_and_compose_impl();
  _os_crash_msg();
  __break(1u);
LABEL_85:
  int v248 = *v70 != 0;
  BOOL v251 = v70[3] != 0;
  BOOL v71 = v70[6] != 0;
LABEL_86:
  uint64_t v85 = 0;
  uint64_t v86 = 0;
  unint64_t v38 = 0;
  do
  {
    unint64_t v6 = v280;
    if (v280 <= v38) {
      goto LABEL_334;
    }
    unint64_t v68 = (_anonymous_namespace_ *)re::StringID::operator=((unint64_t *)(v281 + v85), (uint64_t *)(*(void *)(v7 + 32) + v86));
    ++v38;
    v86 += 136;
    v85 += 16;
  }
  while (v38 < *(void *)(v7 + 24));
  LODWORD(v47) = *(_DWORD *)(v7 + 44);
  unint64_t v76 = (3 * v47);
  LODWORD(v259) = 3 * v47;
  unint64_t v81 = v76 << v248;
  if (v251)
  {
    v81 += v76;
    if (!v71)
    {
      int v246 = 0;
      uint64_t v80 = 0;
      BOOL v251 = 1;
      goto LABEL_107;
    }
  }
  else if (!v71)
  {
    goto LABEL_106;
  }
  int v246 = 1;
  uint64_t v80 = (3 * v47);
LABEL_107:
  unsigned int v235 = v80;
  unint64_t v237 = v81;
  unint64_t v89 = v80 + v81;
  v239 = (StringID *)v76;
  if (v89)
  {
    long long v90 = (_anonymous_namespace_ *)(*(uint64_t (**)(unint64_t, unint64_t, uint64_t))(*(void *)v34 + 32))(v34, 40 * v89, 8);
    if (!v90) {
      goto LABEL_351;
    }
    unint64_t v92 = v90;
    unint64_t v93 = v89 - 1;
    if (v89 != 1)
    {
      unint64_t v92 = v90;
      do
      {
        *((void *)v92 + 4) = 0;
        *((void *)v92 + 1) = 0;
        *((void *)v92 + 2) = 0;
        *(void *)unint64_t v92 = 0;
        *((_DWORD *)v92 + 6) = 0;
        unint64_t v92 = (_anonymous_namespace_ *)((char *)v92 + 40);
        --v93;
      }
      while (v93);
    }
    *((void *)v92 + 4) = 0;
    *((void *)v92 + 1) = 0;
    *((void *)v92 + 2) = 0;
    *(void *)unint64_t v92 = 0;
    *((_DWORD *)v92 + 6) = 0;
  }
  else
  {
    long long v90 = 0;
  }
  v265 = v90;
  if (!v258) {
    goto LABEL_155;
  }
  unint64_t v12 = 0;
  int v241 = 6 * v47;
  unint64_t v264 = v89;
  do
  {
    uint64_t v94 = *(unsigned long long **)(v7 + 24);
    if ((unint64_t)v94 <= v12) {
      goto LABEL_340;
    }
    uint64_t v95 = *(void *)(v7 + 32);
    uint64_t v96 = v95 + 136 * v12;
    unint64_t v98 = *(void *)(v96 + 24);
    uint64_t v97 = (unint64_t *)(v96 + 24);
    unint64_t v38 = v98;
    if (!v98) {
      goto LABEL_154;
    }
    unint64_t v99 = 0;
    uint64_t v256 = *(void *)(v7 + 32);
    uint64_t v100 = v95 + 136 * v12;
    unint64_t v101 = (unint64_t *)(v100 + 48);
    unint64_t v102 = v100 + 56;
    unint64_t v6 = v100 + 32;
    unint64_t v103 = v264;
    do
    {
      unint64_t v34 = *v101;
      if (*v101 <= v99)
      {
        uint64_t v275 = 0;
        long long v285 = 0u;
        long long v286 = 0u;
        long long v283 = 0u;
        long long v284 = 0u;
        unsigned long long v282 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        v296[0] = 136315906;
        *(void *)&v296[1] = "operator[]";
        LOWORD(v296[3]) = 1024;
        *(_DWORD *)((char *)&v296[3] + 2) = 476;
        HIWORD(v296[4]) = 2048;
        *(void *)&v296[5] = v99;
        LOWORD(v296[7]) = 2048;
        *(void *)((char *)&v296[7] + 2) = v34;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_309:
        uint64_t v275 = 0;
        long long v285 = 0u;
        long long v286 = 0u;
        long long v283 = 0u;
        long long v284 = 0u;
        unsigned long long v282 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        v296[0] = 136315906;
        *(void *)&v296[1] = "operator[]";
        LOWORD(v296[3]) = 1024;
        *(_DWORD *)((char *)&v296[3] + 2) = 476;
        HIWORD(v296[4]) = 2048;
        *(void *)&v296[5] = v12;
        LOWORD(v296[7]) = 2048;
        *(void *)((char *)&v296[7] + 2) = v34;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_310:
        uint64_t v275 = 0;
        long long v285 = 0u;
        long long v286 = 0u;
        long long v283 = 0u;
        long long v284 = 0u;
        unsigned long long v282 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        v296[0] = 136315906;
        *(void *)&v296[1] = "operator[]";
        LOWORD(v296[3]) = 1024;
        *(_DWORD *)((char *)&v296[3] + 2) = 476;
        HIWORD(v296[4]) = 2048;
        *(void *)&v296[5] = v99;
        LOWORD(v296[7]) = 2048;
        *(void *)((char *)&v296[7] + 2) = v34;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_311:
        uint64_t v275 = 0;
        long long v285 = 0u;
        long long v286 = 0u;
        long long v283 = 0u;
        long long v284 = 0u;
        unsigned long long v282 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        v296[0] = 136315906;
        *(void *)&v296[1] = "operator[]";
        LOWORD(v296[3]) = 1024;
        *(_DWORD *)((char *)&v296[3] + 2) = 476;
        HIWORD(v296[4]) = 2048;
        *(void *)&v296[5] = v12;
        LOWORD(v296[7]) = 2048;
        *(void *)((char *)&v296[7] + 2) = v34;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_312:
        uint64_t v275 = 0;
        long long v285 = 0u;
        long long v286 = 0u;
        long long v283 = 0u;
        long long v284 = 0u;
        unsigned long long v282 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        v296[0] = 136315906;
        *(void *)&v296[1] = "operator[]";
        LOWORD(v296[3]) = 1024;
        *(_DWORD *)((char *)&v296[3] + 2) = 468;
        HIWORD(v296[4]) = 2048;
        *(void *)&v296[5] = v34;
        LOWORD(v296[7]) = 2048;
        *(void *)((char *)&v296[7] + 2) = v103;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_313:
        uint64_t v275 = 0;
        uint64_t v106 = (StringID *)&v282;
        long long v285 = 0u;
        long long v286 = 0u;
        long long v283 = 0u;
        long long v284 = 0u;
        unsigned long long v282 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        v296[0] = 136315906;
        *(void *)&v296[1] = "operator[]";
        LOWORD(v296[3]) = 1024;
        *(_DWORD *)((char *)&v296[3] + 2) = 468;
        HIWORD(v296[4]) = 2048;
        *(void *)&v296[5] = v34;
        LOWORD(v296[7]) = 2048;
        *(void *)((char *)&v296[7] + 2) = v102;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_314:
        uint64_t v275 = 0;
        long long v285 = 0u;
        long long v286 = 0u;
        long long v283 = 0u;
        long long v284 = 0u;
        unsigned long long v282 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        v296[0] = 136315906;
        *(void *)&v296[1] = "operator[]";
        LOWORD(v296[3]) = 1024;
        *(_DWORD *)((char *)&v296[3] + 2) = 476;
        HIWORD(v296[4]) = 2048;
        *(void *)&v296[5] = v106;
        LOWORD(v296[7]) = 2048;
        *(void *)((char *)&v296[7] + 2) = v103;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_315:
        uint64_t v275 = 0;
        long long v285 = 0u;
        long long v286 = 0u;
        long long v283 = 0u;
        long long v284 = 0u;
        unsigned long long v282 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        v296[0] = 136315906;
        *(void *)&v296[1] = "operator[]";
        LOWORD(v296[3]) = 1024;
        *(_DWORD *)((char *)&v296[3] + 2) = 476;
        HIWORD(v296[4]) = 2048;
        *(void *)&v296[5] = v106;
        LOWORD(v296[7]) = 2048;
        *(void *)((char *)&v296[7] + 2) = v103;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_316:
        uint64_t v275 = 0;
        long long v285 = 0u;
        long long v286 = 0u;
        long long v283 = 0u;
        long long v284 = 0u;
        unsigned long long v282 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        v296[0] = 136315906;
        *(void *)&v296[1] = "operator[]";
        LOWORD(v296[3]) = 1024;
        *(_DWORD *)((char *)&v296[3] + 2) = 476;
        HIWORD(v296[4]) = 2048;
        *(void *)&v296[5] = v106;
        LOWORD(v296[7]) = 2048;
        *(void *)((char *)&v296[7] + 2) = v7;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_317:
        uint64_t v275 = 0;
        long long v285 = 0u;
        long long v286 = 0u;
        long long v283 = 0u;
        long long v284 = 0u;
        unsigned long long v282 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        v296[0] = 136315906;
        *(void *)&v296[1] = "operator[]";
        LOWORD(v296[3]) = 1024;
        *(_DWORD *)((char *)&v296[3] + 2) = 476;
        HIWORD(v296[4]) = 2048;
        *(void *)&v296[5] = v106;
        LOWORD(v296[7]) = 2048;
        *(void *)((char *)&v296[7] + 2) = v102;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_318;
      }
      float v104 = *(float *)(*(void *)v102 + 4 * v99);
      if (fabsf(v104) >= 0.00001)
      {
        unint64_t v34 = *v97;
        if (*v97 <= v99) {
          goto LABEL_310;
        }
        unint64_t v34 = *(unsigned int *)(*(void *)v6 + 4 * v99);
        if (v264 <= v34) {
          goto LABEL_312;
        }
        *(void *)&unsigned long long v282 = __PAIR64__(LODWORD(v104), v12);
      }
      ++v99;
    }
    while (v38 != v99);
    int v105 = v259;
    if (v248)
    {
      uint64_t v106 = 0;
      uint64_t v107 = v256 + 136 * v12;
      unsigned int v108 = (unint64_t **)(v107 + 72);
      unint64_t v34 = v107 + 80;
      unint64_t v102 = (unint64_t)v265;
      do
      {
        unint64_t v103 = (unint64_t)*v108;
        if (*v108 <= (unint64_t *)v106) {
          goto LABEL_314;
        }
        float v109 = *(float *)(*(void *)v34 + 4 * (void)v106);
        if (fabsf(v109) >= 0.00001)
        {
          unint64_t v103 = *v97;
          if (*v97 <= (unint64_t)v106) {
            goto LABEL_320;
          }
          unint64_t v103 = (*(_DWORD *)(*(void *)v6 + 4 * (void)v106) + v259);
          if (v264 <= v103) {
            goto LABEL_322;
          }
          *(void *)&unsigned long long v282 = __PAIR64__(LODWORD(v109), v12);
        }
        uint64_t v106 = (StringID *)((char *)v106 + 1);
      }
      while ((StringID *)v38 != v106);
      int v105 = v241;
    }
    uint64_t v110 = v256;
    if (v251)
    {
      uint64_t v106 = 0;
      uint64_t v111 = v256 + 136 * v12;
      unint64_t v102 = v111 + 96;
      unint64_t v103 = v111 + 104;
      if (v38 <= 1) {
        unint64_t v34 = 1;
      }
      else {
        unint64_t v34 = v38;
      }
      do
      {
        unint64_t v7 = *(void *)v102;
        if (*(void *)v102 <= (unint64_t)v106) {
          goto LABEL_316;
        }
        float v112 = *(float *)(*(void *)v103 + 4 * (void)v106);
        if (fabsf(v112) >= 0.00001)
        {
          unint64_t v7 = *v97;
          if (*v97 <= (unint64_t)v106) {
            goto LABEL_324;
          }
          unint64_t v7 = (*(_DWORD *)(*(void *)v6 + 4 * (void)v106) + v105);
          if (v264 <= v7) {
            goto LABEL_326;
          }
          *(void *)&unsigned long long v282 = __PAIR64__(LODWORD(v112), v12);
        }
        uint64_t v106 = (StringID *)((char *)v106 + 1);
      }
      while ((StringID *)v34 != v106);
      v105 += v259;
      unint64_t v7 = v261;
      uint64_t v110 = v256;
    }
    if (v246)
    {
      uint64_t v106 = 0;
      uint64_t v113 = v110 + 136 * v12;
      unint64_t v102 = v113 + 120;
      unint64_t v103 = v113 + 128;
      if (v38 <= 1) {
        unint64_t v38 = 1;
      }
      while (1)
      {
        unint64_t v34 = *(void *)v102;
        if (*(void *)v102 <= (unint64_t)v106) {
          break;
        }
        float v114 = *(float *)(*(void *)v103 + 4 * (void)v106);
        if (fabsf(v114) >= 0.00001)
        {
          unint64_t v34 = *v97;
          if (*v97 <= (unint64_t)v106) {
            goto LABEL_328;
          }
          unint64_t v34 = (*(_DWORD *)(*(void *)v6 + 4 * (void)v106) + v105);
          if (v264 <= v34) {
            goto LABEL_330;
          }
          *(void *)&unsigned long long v282 = __PAIR64__(LODWORD(v114), v12);
        }
        uint64_t v106 = (StringID *)((char *)v106 + 1);
        if ((StringID *)v38 == v106) {
          goto LABEL_154;
        }
      }
LABEL_318:
      uint64_t v275 = 0;
      long long v285 = 0u;
      long long v286 = 0u;
      long long v283 = 0u;
      long long v284 = 0u;
      unsigned long long v282 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      v296[0] = 136315906;
      *(void *)&v296[1] = "operator[]";
      LOWORD(v296[3]) = 1024;
      *(_DWORD *)((char *)&v296[3] + 2) = 476;
      HIWORD(v296[4]) = 2048;
      *(void *)&v296[5] = v106;
      LOWORD(v296[7]) = 2048;
      *(void *)((char *)&v296[7] + 2) = v34;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_319:
      uint64_t v275 = 0;
      long long v285 = 0u;
      long long v286 = 0u;
      long long v283 = 0u;
      long long v284 = 0u;
      unsigned long long v282 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      v296[0] = 136315906;
      *(void *)&v296[1] = "operator[]";
      LOWORD(v296[3]) = 1024;
      *(_DWORD *)((char *)&v296[3] + 2) = 476;
      HIWORD(v296[4]) = 2048;
      *(void *)&v296[5] = v106;
      LOWORD(v296[7]) = 2048;
      *(void *)((char *)&v296[7] + 2) = v34;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_320:
      uint64_t v275 = 0;
      long long v285 = 0u;
      long long v286 = 0u;
      long long v283 = 0u;
      long long v284 = 0u;
      unsigned long long v282 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      v296[0] = 136315906;
      *(void *)&v296[1] = "operator[]";
      LOWORD(v296[3]) = 1024;
      *(_DWORD *)((char *)&v296[3] + 2) = 476;
      HIWORD(v296[4]) = 2048;
      *(void *)&v296[5] = v106;
      LOWORD(v296[7]) = 2048;
      *(void *)((char *)&v296[7] + 2) = v103;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_321:
      uint64_t v275 = 0;
      long long v285 = 0u;
      long long v286 = 0u;
      long long v283 = 0u;
      long long v284 = 0u;
      unsigned long long v282 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      v296[0] = 136315906;
      *(void *)&v296[1] = "operator[]";
      LOWORD(v296[3]) = 1024;
      *(_DWORD *)((char *)&v296[3] + 2) = 476;
      HIWORD(v296[4]) = 2048;
      *(void *)&v296[5] = v106;
      LOWORD(v296[7]) = 2048;
      *(void *)((char *)&v296[7] + 2) = v103;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_322:
      uint64_t v275 = 0;
      long long v285 = 0u;
      long long v286 = 0u;
      long long v283 = 0u;
      long long v284 = 0u;
      unsigned long long v282 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      v296[0] = 136315906;
      *(void *)&v296[1] = "operator[]";
      LOWORD(v296[3]) = 1024;
      *(_DWORD *)((char *)&v296[3] + 2) = 468;
      HIWORD(v296[4]) = 2048;
      *(void *)&v296[5] = v103;
      LOWORD(v296[7]) = 2048;
      *(void *)((char *)&v296[7] + 2) = v264;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_323;
    }
LABEL_154:
    ++v12;
    unint64_t v89 = v264;
    long long v90 = v265;
  }
  while (v12 != v258);
LABEL_155:
  if (v89)
  {
    uint64_t v115 = 0;
    uint64_t v116 = 0;
    uint64_t v117 = (uint64_t *)((char *)v90 + 16);
    unint64_t v118 = v89;
    unint64_t v12 = (unint64_t)v239;
    do
    {
      uint64_t v120 = *v117;
      v117 += 5;
      uint64_t v119 = v120;
      if (v120) {
        ++v115;
      }
      v116 += (v119 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      --v118;
    }
    while (v118);
  }
  else
  {
    uint64_t v116 = 0;
    uint64_t v115 = 0;
    unint64_t v12 = (unint64_t)v239;
  }
  uint64_t v267 = 0;
  v268 = 0;
  uint64_t v269 = 0;
  unint64_t v262 = (v89 - v12) / 3;
  uint64_t v121 = 0;
  unint64_t v122 = v89 - v12;
  if (v89 > v12)
  {
    unint64_t v123 = 0;
    uint64_t v121 = 0;
    unint64_t v6 = (unint64_t)v268;
    uint64_t v124 = v269;
    while (1)
    {
      unint64_t v34 = v123 / 3;
      if (v6 <= v123 / 3) {
        break;
      }
      if (!*(unsigned char *)(v124 + v34)) {
        ++v121;
      }
      *(unsigned char *)(v124 + v34) = 1;
      if (v122 == ++v123) {
        goto LABEL_168;
      }
    }
LABEL_336:
    uint64_t v275 = 0;
    long long v285 = 0u;
    long long v286 = 0u;
    long long v283 = 0u;
    long long v284 = 0u;
    unsigned long long v282 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    v296[0] = 136315906;
    *(void *)&v296[1] = "operator[]";
    LOWORD(v296[3]) = 1024;
    *(_DWORD *)((char *)&v296[3] + 2) = 468;
    HIWORD(v296[4]) = 2048;
    *(void *)&v296[5] = v34;
    LOWORD(v296[7]) = 2048;
    *(void *)((char *)&v296[7] + 2) = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_337:
    uint64_t v275 = 0;
    uint64_t v94 = &v282;
    long long v285 = 0u;
    long long v286 = 0u;
    long long v283 = 0u;
    long long v284 = 0u;
    unsigned long long v282 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    v296[0] = 136315906;
    *(void *)&v296[1] = "operator[]";
    LOWORD(v296[3]) = 1024;
    *(_DWORD *)((char *)&v296[3] + 2) = 468;
    HIWORD(v296[4]) = 2048;
    *(void *)&v296[5] = v34;
    LOWORD(v296[7]) = 2048;
    *(void *)((char *)&v296[7] + 2) = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_338:
    uint64_t v270 = 0;
    long long v297 = 0u;
    long long v298 = 0u;
    memset(v296, 0, sizeof(v296));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v288 = 136315906;
    v289 = "operator[]";
    __int16 v290 = 1024;
    int v291 = 468;
    __int16 v292 = 2048;
    unint64_t v293 = (unint64_t)v94;
    __int16 v294 = 2048;
    unint64_t v295 = (unint64_t)v94;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_339:
    uint64_t v270 = 0;
    long long v297 = 0u;
    long long v298 = 0u;
    memset(v296, 0, sizeof(v296));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v288 = 136315906;
    v289 = "operator[]";
    __int16 v290 = 1024;
    int v291 = 468;
    __int16 v292 = 2048;
    unint64_t v293 = (unint64_t)v94;
    __int16 v294 = 2048;
    unint64_t v295 = (unint64_t)v94;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_340:
    uint64_t v275 = 0;
    long long v285 = 0u;
    long long v286 = 0u;
    long long v283 = 0u;
    long long v284 = 0u;
    unsigned long long v282 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    v296[0] = 136315906;
    *(void *)&v296[1] = "operator[]";
    LOWORD(v296[3]) = 1024;
    *(_DWORD *)((char *)&v296[3] + 2) = 476;
    HIWORD(v296[4]) = 2048;
    *(void *)&v296[5] = v12;
    LOWORD(v296[7]) = 2048;
    *(void *)((char *)&v296[7] + 2) = v94;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_341:
    uint64_t v275 = 0;
    StringID v14 = &v282;
    long long v285 = 0u;
    long long v286 = 0u;
    long long v283 = 0u;
    long long v284 = 0u;
    unsigned long long v282 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    v296[0] = 136315906;
    *(void *)&v296[1] = "operator[]";
    LOWORD(v296[3]) = 1024;
    *(_DWORD *)((char *)&v296[3] + 2) = 476;
    HIWORD(v296[4]) = 2048;
    *(void *)&v296[5] = v7;
    LOWORD(v296[7]) = 2048;
    *(void *)((char *)&v296[7] + 2) = v94;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_342:
    uint64_t v275 = 0;
    long long v285 = 0u;
    long long v286 = 0u;
    long long v283 = 0u;
    long long v284 = 0u;
    unsigned long long v282 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    v296[0] = 136315906;
    *(void *)&v296[1] = "operator[]";
    LOWORD(v296[3]) = 1024;
    *(_DWORD *)((char *)&v296[3] + 2) = 468;
    HIWORD(v296[4]) = 2048;
    *(void *)&v296[5] = v6;
    LOWORD(v296[7]) = 2048;
    *(void *)((char *)&v296[7] + 2) = v14;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_343;
  }
LABEL_168:
  size_t v125 = 2 * v116;
  size_t v126 = 4 * v116;
  uint64_t v275 = 12;
  uint64_t v276 = 4 * v116;
  *(void *)&long long v277 = 2 * v115;
  *((void *)&v277 + 1) = 2 * v115 + 2;
  *(void *)&long long v278 = 2 * v116;
  *((void *)&v278 + 1) = 2 * v121;
  uint64_t v271 = 16;
  uint64_t v272 = 4 * v116;
  int8x16_t v273 = vandq_s8((int8x16_t)vaddq_s64(vdupq_n_s64(2 * v115), (int64x2_t)xmmword_2343BF8D0), (int8x16_t)vdupq_n_s64(0xFFFFFFFFFFFFFFF0));
  *(void *)&long long v274 = (2 * v116 + 15) & 0xFFFFFFFFFFFFFFF0;
  *((void *)&v274 + 1) = (2 * v121 + 15) & 0xFFFFFFFFFFFFFFF0;
  long long v286 = 0u;
  long long v287 = 0u;
  long long v284 = 0u;
  long long v285 = 0u;
  unsigned long long v282 = 0u;
  long long v283 = 0u;
  unint64_t v12 = v283;
  long long v127 = (_WORD *)v284;
  unint64_t v6 = v285;
  unint64_t v128 = v7;
  unint64_t v7 = v286;
  long long v129 = (_WORD *)v287;
  bzero((void *)v283, v126);
  bzero((void *)v7, v125);
  unint64_t v130 = (3 * *(_DWORD *)(v128 + 44));
  uint64_t v131 = v282;
  int v132 = (v130 + 3) & 0xFFFFFFFC;
  *(_DWORD *)unsigned long long v282 = (v258 + 3) >> 2;
  *(_DWORD *)(v131 + 4) = v130;
  *(_DWORD *)(v131 + 8) = v132;
  if (v89)
  {
    unint64_t v133 = 0;
    uint64_t v134 = (_DWORD *)v12;
    do
    {
      uint64_t v135 = *((void *)v265 + 5 * v133 + 2);
      if (v135)
      {
        *long long v127 = v133 % v130 + v133 / v130 * v132;
        *(_WORD *)unint64_t v6 = (v134 - v12) >> 2;
        v136 = (_DWORD *)(*((void *)v265 + 5 * v133 + 4) + 4);
        uint64_t v137 = v135;
        do
        {
          *v134++ = *v136;
          *(_WORD *)unint64_t v7 = *(v136 - 1);
          v7 += 2;
          v136 += 2;
          --v137;
        }
        while (v137);
        ++v127;
        v6 += 2;
        uint64_t v138 = v135 & 3;
        uint64_t v134 = &v134[-v138 + 4];
        unint64_t v7 = v7 - 2 * v138 + 8;
      }
      ++v133;
    }
    while (v133 != v89);
  }
  else
  {
    LODWORD(v134) = v12;
  }
  *(_WORD *)unint64_t v6 = (v134 - v12) >> 2;
  unint64_t v139 = v239;
  if (v122 >= 3)
  {
    unint64_t v140 = 0;
    uint64_t v94 = v268;
    uint64_t v141 = v269;
    uint64_t v142 = v262;
    if (v262 <= 1) {
      uint64_t v142 = 1;
    }
    while (v94 != v140)
    {
      if (*((unsigned char *)v140 + v141)) {
        *v129++ = (unint64_t)v139 % v130 + (unint64_t)v139 / v130 * v132;
      }
      unint64_t v140 = (unsigned long long *)((char *)v140 + 1);
      unint64_t v139 = (StringID *)((char *)v139 + 3);
      if ((unsigned long long *)v142 == v140) {
        goto LABEL_184;
      }
    }
    goto LABEL_338;
  }
LABEL_184:
  uint64_t v143 = *v243;
  if (!*(void *)a1)
  {
    unint64_t v152 = *(void *)(v143 + 16);
    unint64_t v153 = v253;
    if (v152 <= v253) {
      goto LABEL_361;
    }
    re::FixedArray<float>::operator=((uint64_t *)(*(void *)(v143 + 24) + 184 * v253 + 16), &v279);
    unint64_t v154 = v253;
    unint64_t v152 = *(void *)(v143 + 16);
    if (v152 > v253)
    {
      v155 = (unsigned char *)(*(void *)(v143 + 24) + 184 * v253);
      v155[12] = v248;
      v155[13] = v251;
      v155[14] = v246;
      goto LABEL_193;
    }
    goto LABEL_362;
  }
  unint64_t v76 = *(void *)(v143 + 16);
  unint64_t v144 = v253;
  if (v76 <= v253) {
    goto LABEL_355;
  }
  id v145 = *(id *)(*(void *)(v143 + 24) + 168 * v253 + 56);
  unint64_t v146 = v253;
  unint64_t v147 = *(void *)(v143 + 16);
  if (v147 <= v253) {
    goto LABEL_356;
  }
  long long v148 = v145;
  re::FixedArray<float>::operator=((uint64_t *)(*(void *)(v143 + 24) + 168 * v253 + 24), &v279);
  unint64_t v149 = v253;
  unint64_t v150 = *(void *)(v143 + 16);
  if (v150 <= v253) {
    goto LABEL_359;
  }
  v151 = (unsigned char *)(*(void *)(v143 + 24) + 168 * v253);
  v151[48] = v248;
  v151[49] = v251;
  v151[50] = v246;
  if (v148) {

  }
LABEL_193:
  if (v267 && v268) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v267 + 40))(v267, v269);
  }
  if (v89)
  {
    uint64_t v156 = 0;
    do
    {
      v157 = (void *)((char *)v265 + v156);
      uint64_t v158 = *(void *)((char *)v265 + v156);
      if (v158)
      {
        if (v157[4]) {
          (*(void (**)(uint64_t))(*(void *)v158 + 40))(v158);
        }
        v157[4] = 0;
        v157[1] = 0;
        v157[2] = 0;
        void *v157 = 0;
        ++*(_DWORD *)((char *)v265 + v156 + 24);
      }
      v156 += 40;
    }
    while (40 * v237 + 40 * v235 != v156);
  }
  BOOL result = re::FixedArray<re::StringID>::deinit(&v279);
  v160 = **(_DWORD ***)(a1 + 8);
  if (v244) {
    _DWORD *v160 = 0;
  }
  else {
    *(unsigned char *)v160 = 0;
  }
  return result;
}

void **re::BlendShapeModelBuilder::addBlendShapeGroup(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, char a6, char a7, char a8)
{
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void **)v9;
  if (*(void *)(*(void *)v9 + 16) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_8;
  }
  uint64_t v13 = *(void *)(a5 + 8);
  uint64_t v14 = v10[3];
  if (*(_DWORD *)(a3 + 12) < 0xCu)
  {
    int v21 = 0;
    uint64_t v20 = 0;
  }
  else
  {
    uint64_t v17 = a4;
    unsigned int v18 = (char *)objc_msgSend(*(id *)a3, sel_contents);
    a4 = v17;
    uint64_t v19 = &v18[*(unsigned int *)(a3 + 8)];
    uint64_t v20 = *(void *)v19;
    int v21 = *((_DWORD *)v19 + 2);
  }
  if (v10[8] <= a2)
  {
LABEL_8:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v22 = v14 + 168 * a2;
  uint64_t v24 = v20;
  re::StringID::operator=((unint64_t *)(v10[9] + 16 * a2), a4);
  *(void *)uint64_t v22 = v13;
  *(void *)(v22 + 8) = v24;
  *(_DWORD *)(v22 + 16) = v21;
  re::FixedArray<re::StringID>::operator=((unint64_t *)(v22 + 24), a5);
  *(unsigned char *)(v22 + 48) = a6;
  *(unsigned char *)(v22 + 49) = a7;
  *(unsigned char *)(v22 + 50) = a8;
  NS::SharedPtr<MTL::Texture>::operator=((void **)(v22 + 72), (void **)(a3 + 16));
  *(void *)(v22 + 80) = *(void *)(a3 + 24);
  NS::SharedPtr<MTL::Texture>::operator=((void **)(v22 + 88), (void **)a3);
  *(void *)(v22 + re::DynamicArray<re::RigComponentConstraint>::deinit((uint64_t)this + 96) = *(void *)(a3 + 8);
  NS::SharedPtr<MTL::Texture>::operator=((void **)(v22 + 104), (void **)(a3 + 32));
  *(void *)(v22 + 112) = *(void *)(a3 + 40);
  NS::SharedPtr<MTL::Texture>::operator=((void **)(v22 + 120), (void **)(a3 + 48));
  *(void *)(v22 + 128) = *(void *)(a3 + 56);
  NS::SharedPtr<MTL::Texture>::operator=((void **)(v22 + 136), (void **)(a3 + 64));
  *(void *)(v22 + 144) = *(void *)(a3 + 72);
  BOOL result = NS::SharedPtr<MTL::Texture>::operator=((void **)(v22 + 152), (void **)(a3 + 80));
  *(void *)(v22 + 160) = *(void *)(a3 + 88);
  return result;
}

void **re::BlendShapeDeformer::init(void **this, id *a2)
{
  if (!*((unsigned char *)this + 56))
  {
    uint64_t v3 = this;
    *((unsigned char *)this + 56) = 1;
    int v4 = *((unsigned __int8 *)a2 + 257);
    this = (void **)[a2[23] supportsFamily:1004];
    if (v4 && this != 0)
    {
      v72[0] = 0;
      uint64_t v78 = 0;
      memset(v76, 0, sizeof(v76));
      int v77 = 0;
      char v79 = 0;
      char v80 = 0;
      uint64_t v81 = 0;
      char v82 = 0;
      v61[0] = 0;
      uint64_t v67 = 0;
      memset(v65, 0, sizeof(v65));
      int v66 = 0;
      char v68 = 0;
      char v69 = 0;
      uint64_t v70 = 0;
      char v71 = 0;
      v50[0] = 0;
      uint64_t v56 = 0;
      memset(v54, 0, sizeof(v54));
      int v55 = 0;
      char v57 = 0;
      char v58 = 0;
      uint64_t v59 = 0;
      char v60 = 0;
      v39[0] = 0;
      uint64_t v45 = 0;
      memset(v43, 0, sizeof(v43));
      int v44 = 0;
      char v46 = 0;
      char v47 = 0;
      uint64_t v48 = 0;
      char v49 = 0;
      v28[0] = 0;
      uint64_t v34 = 0;
      memset(v32, 0, sizeof(v32));
      int v33 = 0;
      char v35 = 0;
      char v36 = 0;
      uint64_t v37 = 0;
      char v38 = 0;
      v17[0] = 0;
      uint64_t v23 = 0;
      memset(v21, 0, sizeof(v21));
      int v22 = 0;
      char v24 = 0;
      char v25 = 0;
      uint64_t v26 = 0;
      char v27 = 0;
      ComputePipelineState = (void **)re::getOrCreateComputePipelineState((uint64_t)a2, (uint64_t)v72);
      NS::SharedPtr<MTL::Texture>::operator=(v3 + 1, ComputePipelineState);
      unint64_t v12 = (void **)re::getOrCreateComputePipelineState((uint64_t)a2, (uint64_t)v61);
      NS::SharedPtr<MTL::Texture>::operator=(v3 + 2, v12);
      uint64_t v13 = (void **)re::getOrCreateComputePipelineState((uint64_t)a2, (uint64_t)v50);
      NS::SharedPtr<MTL::Texture>::operator=(v3 + 3, v13);
      uint64_t v14 = (void **)re::getOrCreateComputePipelineState((uint64_t)a2, (uint64_t)v39);
      NS::SharedPtr<MTL::Texture>::operator=(v3 + 4, v14);
      uint64_t v15 = (void **)re::getOrCreateComputePipelineState((uint64_t)a2, (uint64_t)v28);
      NS::SharedPtr<MTL::Texture>::operator=(v3 + 5, v15);
      uint64_t v16 = (void **)re::getOrCreateComputePipelineState((uint64_t)a2, (uint64_t)v17);
      NS::SharedPtr<MTL::Texture>::operator=(v3 + 6, v16);
      *((unsigned char *)v3 + 57) = 1;
      re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)v21);
      if (v20[0])
      {
        if (v20[1]) {
          (*(void (**)(void))(*(void *)v20[0] + 40))();
        }
        memset(v20, 0, sizeof(v20));
      }
      if (v17[0] && v18 && (v19 & 1) != 0) {
        (*(void (**)(void))(*(void *)v18 + 40))();
      }
      re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)v32);
      if (v31[0])
      {
        if (v31[1]) {
          (*(void (**)(void))(*(void *)v31[0] + 40))();
        }
        memset(v31, 0, sizeof(v31));
      }
      if (v28[0] && v29 && (v30 & 1) != 0) {
        (*(void (**)(void))(*(void *)v29 + 40))();
      }
      re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)v43);
      if (v42[0])
      {
        if (v42[1]) {
          (*(void (**)(void))(*(void *)v42[0] + 40))();
        }
        memset(v42, 0, sizeof(v42));
      }
      if (v39[0] && v40 && (v41 & 1) != 0) {
        (*(void (**)(void))(*(void *)v40 + 40))();
      }
      re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)v54);
      if (v53[0])
      {
        if (v53[1]) {
          (*(void (**)(void))(*(void *)v53[0] + 40))();
        }
        memset(v53, 0, sizeof(v53));
      }
      if (v50[0] && v51 && (v52 & 1) != 0) {
        (*(void (**)(void))(*(void *)v51 + 40))();
      }
      re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)v65);
      if (v64[0])
      {
        if (v64[1]) {
          (*(void (**)(void))(*(void *)v64[0] + 40))();
        }
        memset(v64, 0, sizeof(v64));
      }
      if (v61[0] && v62 && (v63 & 1) != 0) {
        (*(void (**)(void))(*(void *)v62 + 40))();
      }
      re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)v76);
      this = (void **)v75[0];
      if (v75[0])
      {
        if (v75[1]) {
          this = (void **)(*(uint64_t (**)(void))(*(void *)v75[0] + 40))();
        }
        memset(v75, 0, sizeof(v75));
      }
      if (v72[0])
      {
        this = v73;
        if (v73)
        {
          if (v74) {
            return (void **)(*((uint64_t (**)(void))*v73 + 5))();
          }
        }
      }
    }
  }
  return this;
}

uint64_t re::BlendShapeDeformer::addDeformationInstance@<X0>(uint64_t this@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = 6;
  if (!a2[1]) {
    uint64_t v3 = 2;
  }
  char v4 = *a2;
  uint64_t v5 = v3 | (8 * a2[2]) | (16 * a2[3]);
  char v6 = *(unsigned char *)(this + 57) ^ 1;
  *(void *)a3 = 0xFFFFFFFFLL;
  *(void *)(a3 + 8) = v5;
  *(void *)(a3 + 16) = v5;
  *(unsigned char *)(a3 + 24) = (v6 | v4) ^ 1;
  *(void *)(a3 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = -1;
  *(void *)(a3 + 40) = 0;
  *(void *)(a3 + 48) = 0;
  *(void *)(a3 + 56) = 0;
  return this;
}

void *re::BlendShapeDeformer::allocateBuffers(re *a1, uint64_t *a2, unint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v5 = a4;
  uint64_t v93 = *MEMORY[0x263EF8340];
  unint64_t v8 = *a4;
  uint64_t v9 = *(_OWORD **)(*a4 + 48);
  re::globalAllocators(a1);
  uint64_t v10 = a2[3];
  uint64_t v11 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v10 + 32))(v10, 48, 8);
  *(_OWORD *)uint64_t v11 = 0u;
  *((_OWORD *)v11 + 1) = 0u;
  *((_OWORD *)v11 + 2) = 0u;
  uint64_t v12 = re::globalAllocators(v11)[2];
  *(void *)&long long v88 = &unk_26E7106F8;
  *((void *)&v89 + 1) = v12;
  *(void *)&long long v90 = &v88;
  unint64_t v13 = (*(uint64_t (**)(uint64_t, re *, long long *))(*(void *)v10 + 16))(v10, v11, &v88);
  re::FunctionBase<24ul,void ()(void *)>::destroyCallable((uint64_t)&v88);
  uint64_t v72 = (re::FrameContext *)a2;
  uint64_t v14 = a2[3];
  re::FixedArray<re::Slice<unsigned int>>::init<>((uint64_t *)v13, v14, (unint64_t)v9);
  unint64_t v76 = (void *)v13;
  re::FixedArray<re::FrameContextBuffer>::init<>((uint64_t *)(v13 + 24), v14, (unint64_t)v9);
  char v71 = v9;
  if (v9)
  {
    unint64_t v15 = 0;
    char v69 = v5;
    uint64_t v70 = v8 + 8;
    unsigned int v73 = a3;
    do
    {
      uint64_t v16 = re::BucketArray<re::DeformationInstanceIndex,64ul>::operator[](v70, v15);
      unint64_t v18 = *(void *)(v16 + 8);
      unint64_t v19 = v5[6];
      if (v19 <= v18) {
        goto LABEL_51;
      }
      unint64_t v13 = v16;
      uint64_t v20 = v5[5];
      uint64_t v21 = re::BucketArray<re::ActiveDeformation,8ul>::operator[](v5[1], v18);
      a3 = *(unsigned __int8 *)(v13 + 16);
      unint64_t v23 = *(void *)(v21 + 336);
      if (v23 <= a3) {
        goto LABEL_52;
      }
      char v24 = **(void ***)(v21 + 344);
      unint64_t v8 = *(unsigned __int16 *)(v21 + 392);
      unint64_t v13 = v24[5];
      if (v13 <= v8) {
        goto LABEL_53;
      }
      unint64_t v8 = *(unsigned int *)(v24[6] + 4 * v8);
      unint64_t v13 = v24[2];
      if (v13 <= v8) {
        goto LABEL_54;
      }
      uint64_t v25 = v20 + 312 * v18;
      uint64_t v26 = *(void *)(v21 + 328);
      uint64_t v9 = *(_OWORD **)(*(void *)(v21 + 352) + 24);
      uint64_t v74 = v24[3];
      LOBYTE(v88) = 1;
      re::DeformationVertexBufferState::ensureVertexBufferInitialized(v25, 1u);
      char v27 = (void *)(v25 + 56);
      uint64_t v28 = (void *)(v25 + 64);
      uint64_t v77 = *(unsigned int *)(*(void *)(v25 + 64)
                            + 32
                            * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find((void *)(v25 + 56), (unsigned __int8 *)&v88)+ 20);
      uint64_t v30 = v26 + (a3 << 6);
      uint64_t v33 = *(void *)(v30 + 16);
      unint64_t v32 = (uint64_t *)(v30 + 16);
      LOBYTE(v31) = v33;
      if ((v33 & 4) != 0)
      {
        LOBYTE(v88) = 2;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized(v20 + 312 * v18, 2u);
        uint64_t v34 = *(unsigned int *)(*v28
                              + 32
                              * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v27, (unsigned __int8 *)&v88)+ 20);
        uint64_t v31 = *v32;
      }
      else
      {
        uint64_t v34 = 0;
      }
      uint64_t v78 = v34;
      if ((v31 & 8) != 0)
      {
        LOBYTE(v88) = 3;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized(v20 + 312 * v18, 3u);
        uint64_t v35 = *(unsigned int *)(*v28
                              + 32
                              * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v27, (unsigned __int8 *)&v88)+ 20);
        uint64_t v31 = *v32;
      }
      else
      {
        uint64_t v35 = 0;
      }
      a3 = v73;
      uint64_t v79 = v35;
      if ((v31 & 0x10) != 0)
      {
        LOBYTE(v88) = 4;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized(v20 + 312 * v18, 4u);
        uint64_t v36 = *(unsigned int *)(*v28
                              + 32
                              * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v27, (unsigned __int8 *)&v88)+ 20);
      }
      else
      {
        uint64_t v36 = 0;
      }
      uint64_t v37 = v76;
      unint64_t v13 = 20;
      if (v9)
      {
        unint64_t v13 = v76[1];
        if (v13 <= v15) {
          goto LABEL_56;
        }
        *(_OWORD *)(v76[2] + 16 * v15) = *v9;
        unint64_t v13 = 20;
      }
      uint64_t v9 = (_OWORD *)v76[1];
      if ((unint64_t)v9 <= v15) {
        goto LABEL_55;
      }
      unint64_t v38 = (*(void *)(v74 + 168 * v8) + 3) & 0xFFFFFFFFFFFFFFFCLL;
      uint64_t v75 = v36;
      if (*(void *)(v76[2] + 16 * v15 + 8) != v38)
      {
        unint64_t v13 = 4 * v38;
        if (v38)
        {
          if (v38 >> 62 || v13 >= 0xFFFFFFFFFFFFFFF0) {
            goto LABEL_61;
          }
          uint64_t v39 = (*(uint64_t (**)(void, unint64_t, void))(**((void **)v72 + 3) + 32))(*((void *)v72 + 3), (v13 + 16) | 3, 0);
          uint64_t v40 = (void *)((v39 + 19) & 0xFFFFFFFFFFFFFFFCLL);
          *(v40 - 2) = v38;
          *(v40 - 1) = v39;
          bzero(v40, 4 * v38);
          uint64_t v37 = v76;
          uint64_t v9 = (_OWORD *)v76[1];
        }
        else
        {
          uint64_t v40 = 0;
        }
        if ((unint64_t)v9 <= v15) {
          goto LABEL_57;
        }
        uint64_t v41 = v37[2] + 16 * v15;
        uint64_t v42 = *(void *)(v41 + 8);
        if (4 * v42 >= 4 * v38) {
          size_t v43 = 4 * v38;
        }
        else {
          size_t v43 = 4 * v42;
        }
        memcpy(v40, *(const void **)v41, v43);
        bzero((char *)v40 + v43, v13 - v43);
        unint64_t v13 = v76[1];
        if (v13 <= v15) {
          goto LABEL_59;
        }
        int v44 = (void *)(v76[2] + 16 * v15);
        *int v44 = v40;
        v44[1] = v38;
        unint64_t v13 = 20;
        uint64_t v36 = v75;
      }
      uint64_t v9 = (_OWORD *)((v77 + 15) & 0x1FFFFFFF0);
      uint64_t v45 = (uint64_t)v9 + ((v78 + 15) & 0x1FFFFFFF0) + ((v79 + 15) & 0x1FFFFFFF0) + ((v36 + 15) & 0x1FFFFFFF0);
      if (v73 == 1)
      {
        re::FrameContext::perFrameAllocTail(v72, v45, 0x10uLL, (uint64_t)&v88);
        unint64_t v13 = v76[1];
        if (v13 <= v15) {
          goto LABEL_58;
        }
        uint64_t v46 = v88;
        unsigned int v47 = DWORD2(v88);
        unint64_t v8 = v89;
        uint64_t v48 = (unint64_t *)(v76[2] + 16 * v15);
        a3 = *v48;
        unint64_t v13 = v48[1];
        *(int32x2_t *)&double v50 = re::FrameContext::perFrameAlloc(v72, 4 * v13, 4uLL, (uint64_t)&v88);
        uint64_t v51 = v88;
        int v52 = DWORD2(v88);
        unint64_t v53 = HIDWORD(v88);
        uint64_t v54 = v89;
        if (v13)
        {
          int v55 = (__int32 *)(v88 + DWORD2(v88));
          unint64_t v56 = (unint64_t)HIDWORD(v88) >> 2;
          while (v56)
          {
            __int32 v57 = *(_DWORD *)a3;
            a3 += 4;
            LODWORD(v50) = v57;
            *v55++ = v57;
            --v56;
            if (!--v13) {
              goto LABEL_40;
            }
          }
          re::internal::assertLog((re::internal *)6, *(void *)&v49, v50, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v53 >> 2, v53 >> 2);
          _os_crash();
          __break(1u);
LABEL_51:
          re::internal::assertLog((re::internal *)6, v17, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v18, v19);
          _os_crash();
          __break(1u);
LABEL_52:
          re::internal::assertLog((re::internal *)6, v22, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, a3, v23);
          _os_crash();
          __break(1u);
LABEL_53:
          long long v91 = 0u;
          long long v92 = 0u;
          long long v89 = 0u;
          long long v90 = 0u;
          long long v88 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          int v80 = 136315906;
          uint64_t v81 = "operator[]";
          __int16 v82 = 1024;
          int v83 = 476;
          __int16 v84 = 2048;
          unint64_t v85 = v8;
          __int16 v86 = 2048;
          uint64_t v87 = (_OWORD *)v13;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_54:
          long long v91 = 0u;
          long long v92 = 0u;
          long long v89 = 0u;
          long long v90 = 0u;
          long long v88 = 0u;
          unint64_t v15 = &_os_log_internal;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          int v80 = 136315906;
          uint64_t v81 = "operator[]";
          __int16 v82 = 1024;
          int v83 = 476;
          __int16 v84 = 2048;
          unint64_t v85 = v8;
          __int16 v86 = 2048;
          uint64_t v87 = (_OWORD *)v13;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_55:
          long long v91 = 0u;
          long long v92 = 0u;
          long long v89 = 0u;
          long long v90 = 0u;
          long long v88 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          int v80 = 136315906;
          uint64_t v81 = "operator[]";
          __int16 v82 = 1024;
          int v83 = 468;
          __int16 v84 = 2048;
          unint64_t v85 = v15;
          __int16 v86 = 2048;
          uint64_t v87 = v9;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_56:
          long long v91 = 0u;
          long long v92 = 0u;
          long long v89 = 0u;
          long long v90 = 0u;
          long long v88 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          int v80 = 136315906;
          uint64_t v81 = "operator[]";
          __int16 v82 = 1024;
          int v83 = 468;
          __int16 v84 = 2048;
          unint64_t v85 = v15;
          __int16 v86 = 2048;
          uint64_t v87 = (_OWORD *)v13;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_57:
          long long v91 = 0u;
          long long v92 = 0u;
          long long v89 = 0u;
          long long v90 = 0u;
          long long v88 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          int v80 = 136315906;
          uint64_t v81 = "operator[]";
          __int16 v82 = 1024;
          int v83 = 468;
          __int16 v84 = 2048;
          unint64_t v85 = v15;
          __int16 v86 = 2048;
          uint64_t v87 = v9;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_58:
          long long v91 = 0u;
          long long v92 = 0u;
          long long v89 = 0u;
          long long v90 = 0u;
          long long v88 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          int v80 = 136315906;
          uint64_t v81 = "operator[]";
          __int16 v82 = 1024;
          int v83 = 468;
          __int16 v84 = 2048;
          unint64_t v85 = v15;
          __int16 v86 = 2048;
          uint64_t v87 = (_OWORD *)v13;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_59:
          long long v91 = 0u;
          long long v92 = 0u;
          long long v89 = 0u;
          long long v90 = 0u;
          long long v88 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          int v80 = 136315906;
          uint64_t v81 = "operator[]";
          __int16 v82 = 1024;
          int v83 = 468;
          __int16 v84 = 2048;
          unint64_t v85 = v15;
          __int16 v86 = 2048;
          uint64_t v87 = (_OWORD *)v13;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_60:
          long long v91 = 0u;
          long long v92 = 0u;
          long long v89 = 0u;
          long long v90 = 0u;
          long long v88 = 0u;
          unint64_t v38 = &_os_log_internal;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          int v80 = 136315906;
          uint64_t v81 = "operator[]";
          __int16 v82 = 1024;
          int v83 = 468;
          __int16 v84 = 2048;
          unint64_t v85 = v15;
          __int16 v86 = 2048;
          uint64_t v87 = (_OWORD *)v13;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_61:
          re::internal::assertLog((re::internal *)6, v29, "assertion failure: '%s' (%s:line %i) Size overflow in allocateArray. Element size = %zu, count = %zu", "!overflow", "allocateArray", 61, 4, v38);
          _os_crash();
          __break(1u);
LABEL_62:
          re::internal::assertLog((re::internal *)5, v45, "assertion failure: '%s' (%s:line %i) Unknown execution mode: %u.", "!\"Unreachable code\"", "allocateBuffers", 1140, a3);
          _os_crash();
          __break(1u);
        }
LABEL_40:
        unint64_t v13 = v76[4];
        a3 = v73;
        if (v13 <= v15) {
          goto LABEL_60;
        }
        uint64_t v58 = v76[5] + 24 * v15;
        *(void *)uint64_t v58 = v51;
        *(_DWORD *)(v58 + 8) = v52;
        *(_DWORD *)(v58 + 12) = v53;
        *(void *)(v58 + 16) = v54;
        unint64_t v13 = 20;
      }
      else
      {
        if (v73) {
          goto LABEL_62;
        }
        re::FrameContext::perFrameAlloc(v72, v45, 0x10uLL, (uint64_t)&v88);
        uint64_t v46 = v88;
        unsigned int v47 = DWORD2(v88);
        unint64_t v8 = v89;
      }
      *(void *)&long long v88 = v46;
      *((void *)&v88 + 1) = __PAIR64__(v77, v47);
      *(void *)&long long v89 = v8;
      LOBYTE(v80) = 1;
      re::DeformationVertexBufferState::ensureVertexBufferInitialized(v20 + 312 * v18, 1u);
      unint64_t v59 = v20 + 312 * v18;
      char v60 = (void *)(v59 + 120);
      uint64_t v61 = re::HashBrown<re::VertexBufferID,re::VertexBufferFormat,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find((void *)(v59 + 120), (unsigned __int8 *)&v80);
      uint64_t v63 = *(void *)(v59 + 128);
      uint64_t v62 = (void *)(v59 + 128);
      re::DeformationVertexBufferState::setOutputBuffer(v25, 1u, a3, (uint64_t)&v88, v63 + 20 * v61 + 4);
      if (v78)
      {
        *(void *)&long long v88 = v46;
        DWORD2(v88) = v47 + v9;
        HIDWORD(v88) = v78;
        *(void *)&long long v89 = v8;
        LOBYTE(v80) = 2;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized(v25, 2u);
        uint64_t v64 = re::HashBrown<re::VertexBufferID,re::VertexBufferFormat,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v60, (unsigned __int8 *)&v80);
        re::DeformationVertexBufferState::setOutputBuffer(v25, 2u, a3, (uint64_t)&v88, *v62 + 20 * v64 + 4);
        uint64_t v9 = (_OWORD *)((char *)v9 + ((v78 + 15) & 0x1FFFFFFF0));
      }
      if (v79)
      {
        *(void *)&long long v88 = v46;
        DWORD2(v88) = v47 + v9;
        HIDWORD(v88) = v79;
        *(void *)&long long v89 = v8;
        LOBYTE(v80) = 3;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized(v25, 3u);
        uint64_t v65 = re::HashBrown<re::VertexBufferID,re::VertexBufferFormat,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v60, (unsigned __int8 *)&v80);
        re::DeformationVertexBufferState::setOutputBuffer(v25, 3u, a3, (uint64_t)&v88, *v62 + 20 * v65 + 4);
        uint64_t v9 = (_OWORD *)((char *)v9 + ((v79 + 15) & 0x1FFFFFFF0));
      }
      if (v75)
      {
        *(void *)&long long v88 = v46;
        DWORD2(v88) = v47 + v9;
        HIDWORD(v88) = v75;
        *(void *)&long long v89 = v8;
        LOBYTE(v80) = 4;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized(v25, 4u);
        uint64_t v66 = re::HashBrown<re::VertexBufferID,re::VertexBufferFormat,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v60, (unsigned __int8 *)&v80);
        re::DeformationVertexBufferState::setOutputBuffer(v25, 4u, a3, (uint64_t)&v88, *v62 + 20 * v66 + 4);
      }
      ++v15;
      uint64_t v5 = v69;
    }
    while ((_OWORD *)v15 != v71);
  }
  *(void *)a5 |= 0x1EuLL;
  *(_DWORD *)(a5 + 9) = 16843009;
  return v76;
}

uint64_t re::BlendShapeDeformer::deformGPU(uint64_t a1, uint64_t a2, void **this, uint64_t *a4)
{
  char v6 = a4;
  uint64_t v69 = *MEMORY[0x263EF8340];
  unint64_t v10 = *a4;
  re::mtl::ComputeCommandEncoder::pushDebugGroup(this, (re::ns *)"Perform Blend Shapes");
  uint64_t v58 = a1;
  unsigned int v11 = objc_msgSend(*(id *)(a1 + 8), sel_threadExecutionWidth);
  uint64_t v57 = *(void *)(v10 + 48);
  if (v57)
  {
    uint64_t v12 = 0;
    unint64_t v13 = 0;
    int v55 = v6;
    uint64_t v56 = v10 + 8;
    uint64_t v60 = v11;
    uint64_t v54 = a2;
    do
    {
      uint64_t v14 = re::BucketArray<re::DeformationInstanceIndex,64ul>::operator[](v56, v13);
      unint64_t v16 = *(void *)(v14 + 8);
      unint64_t v17 = v6[6];
      if (v17 <= v16)
      {
        re::internal::assertLog((re::internal *)6, v15, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 666, *(void *)(v14 + 8), v17);
        _os_crash();
        __break(1u);
LABEL_16:
        long long v67 = 0u;
        long long v68 = 0u;
        long long v66 = 0u;
        memset(v65, 0, sizeof(v65));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)uint64_t v62 = 136315906;
        *(void *)&v62[4] = "operator[]";
        *(_WORD *)&v62[12] = 1024;
        *(_DWORD *)&v62[14] = 476;
        *(_WORD *)&v62[18] = 2048;
        *(void *)&v62[20] = v10;
        __int16 v63 = 2048;
        uint64_t v64 = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_17:
        long long v67 = 0u;
        long long v68 = 0u;
        long long v66 = 0u;
        memset(v65, 0, sizeof(v65));
        unint64_t v13 = &_os_log_internal;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)uint64_t v62 = 136315906;
        *(void *)&v62[4] = "operator[]";
        *(_WORD *)&v62[12] = 1024;
        *(_DWORD *)&v62[14] = 476;
        *(_WORD *)&v62[18] = 2048;
        *(void *)&v62[20] = v5;
        __int16 v63 = 2048;
        uint64_t v64 = (_DWORD *)v10;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_18:
        long long v67 = 0u;
        long long v68 = 0u;
        long long v66 = 0u;
        memset(v65, 0, sizeof(v65));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)uint64_t v62 = 136315906;
        *(void *)&v62[4] = "operator[]";
        *(_WORD *)&v62[12] = 1024;
        *(_DWORD *)&v62[14] = 468;
        *(_WORD *)&v62[18] = 2048;
        *(void *)&v62[20] = v13;
        __int16 v63 = 2048;
        uint64_t v64 = (_DWORD *)v10;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      uint64_t v18 = v6[5];
      uint64_t v19 = re::BucketArray<re::ActiveDeformation,8ul>::operator[](v6[1], v16);
      uint64_t v20 = **(void ***)(v19 + 344);
      unint64_t v10 = *(unsigned __int16 *)(v19 + 392);
      char v4 = (_DWORD *)v20[5];
      if ((unint64_t)v4 <= v10) {
        goto LABEL_16;
      }
      uint64_t v5 = (void *)*(unsigned int *)(v20[6] + 4 * v10);
      unint64_t v10 = v20[2];
      if (v10 <= (unint64_t)v5) {
        goto LABEL_17;
      }
      unint64_t v10 = *(void *)(a2 + 32);
      if (v10 <= v13) {
        goto LABEL_18;
      }
      uint64_t v61 = v18 + 312 * v16;
      uint64_t v21 = v20[3];
      uint64_t v22 = *(void *)(a2 + 40);
      uint64_t v23 = v21 + 168 * v5;
      int v25 = *(_DWORD *)(v23 + 116);
      char v24 = (unsigned int *)(v23 + 116);
      if (v25)
      {
        uint64_t v26 = *(unsigned int *)v20;
        uint64_t v27 = v21 + 168 * v5;
        unint64_t v59 = re::BlendShapeDeformer::deformGPU(void *,re::mtl::ComputeCommandEncoder const&,re::DeformationParameters const&)::kIndexTypeSizes[v26];
        uint64_t v52 = v21;
        uint64_t v53 = v58 + 8 * v26;
        [*this setComputePipelineState:*(void *)(v53 + 8)];
        [*this setBuffer:*(void *)(v27 + 136) offset:*(unsigned int *)(v27 + 144) atIndex:0];
        [*this setBuffer:*(void *)(v22 + v12 + 16) offset:*(unsigned int *)(v22 + v12 + 8) atIndex:1];
        [*this setBuffer:*(void *)(v27 + 104) offset:*(unsigned int *)(v27 + 112) atIndex:2];
        [*this setBuffer:*(void *)(v27 + 120) offset:*(unsigned int *)(v27 + 128) atIndex:3];
        [*this setBuffer:*(void *)(v27 + 72) offset:*(unsigned int *)(v27 + 80) atIndex:4];
        unint64_t v10 = 1;
        LOBYTE(v65[0]) = 1;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized(v61, 1u);
        unint64_t v28 = v18 + 312 * v16;
        uint64_t v29 = (void *)(v28 + 184);
        uint64_t v30 = re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find((void *)(v28 + 184), (unsigned __int8 *)v65);
        uint64_t v32 = *(void *)(v28 + 192);
        uint64_t v31 = (void *)(v28 + 192);
        uint64_t v33 = *(void *)(v32 + 32 * v30 + 24);
        LOBYTE(v65[0]) = 1;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized(v61, 1u);
        objc_msgSend(*this, "setBuffer:offset:atIndex:", v33, *(unsigned int *)(*v31+ 32* re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v29, (unsigned __int8 *)v65)+ 16), 5);
        unint64_t v34 = *v24;
        char v4 = (_DWORD *)v59;
        uint64_t v35 = *this;
        *(void *)&v65[0] = v34 / v59;
        *(int64x2_t *)((char *)v65 + 8) = vdupq_n_s64(1uLL);
        *(void *)uint64_t v62 = v60;
        *(_OWORD *)&v62[8] = *(_OWORD *)((char *)v65 + 8);
        [v35 dispatchThreads:v65 threadsPerThreadgroup:v62];
        LODWORD(vre::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = *(_DWORD *)(v27 + 164);
        uint64_t v36 = (unsigned int *)(v27 + 164);
        if (v32)
        {
          [*this setComputePipelineState:*(void *)(v53 + 24)];
          [*this setBuffer:*(void *)(v52 + 168 * v5 + 152) offset:*(unsigned int *)(v52 + 168 * v5 + 160) atIndex:0];
          LOBYTE(v65[0]) = 1;
          unint64_t v10 = v61;
          re::DeformationVertexBufferState::ensureVertexBufferInitialized(v61, 1u);
          uint64_t v37 = *(void *)(*v31
                          + 32
                          * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v29, (unsigned __int8 *)v65)+ 24);
          LOBYTE(v65[0]) = 1;
          re::DeformationVertexBufferState::ensureVertexBufferInitialized(v61, 1u);
          objc_msgSend(*this, "setBuffer:offset:atIndex:", v37, *(unsigned int *)(*v31+ 32* re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v29, (unsigned __int8 *)v65)+ 16), 1);
          unint64_t v38 = *v36 / v59;
LABEL_12:
          double v50 = *this;
          *(void *)&v65[0] = v38;
          *(int64x2_t *)((char *)v65 + 8) = vdupq_n_s64(1uLL);
          *(void *)uint64_t v62 = v60;
          *(_OWORD *)&v62[8] = *(_OWORD *)((char *)v65 + 8);
          [v50 dispatchThreads:v65 threadsPerThreadgroup:v62];
        }
      }
      else
      {
        [*this setComputePipelineState:*(void *)(v58 + 40)];
        uint64_t v39 = v21 + 168 * v5;
        unint64_t v10 = v39 + 88;
        uint64_t v40 = (unsigned int *)(v39 + 96);
        [*this setBuffer:*(void *)(v39 + 88) offset:*(unsigned int *)(v39 + 96) atIndex:0];
        [*this setBuffer:*(void *)(v22 + v12 + 16) offset:*(unsigned int *)(v22 + v12 + 8) atIndex:1];
        [*this setBuffer:*(void *)(v39 + 72) offset:*(unsigned int *)(v39 + 80) atIndex:2];
        LOBYTE(v65[0]) = 1;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized(v61, 1u);
        unint64_t v41 = v18 + 312 * v16;
        uint64_t v42 = (void *)(v41 + 184);
        uint64_t v43 = re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find((void *)(v41 + 184), (unsigned __int8 *)v65);
        uint64_t v44 = *(void *)(v41 + 192);
        uint64_t v5 = (void *)(v41 + 192);
        uint64_t v45 = *(void *)(v44 + 32 * v43 + 24);
        LOBYTE(v65[0]) = 1;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized(v61, 1u);
        objc_msgSend(*this, "setBuffer:offset:atIndex:", v45, *(unsigned int *)(*v5+ 32* re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v42, (unsigned __int8 *)v65)+ 16), 3);
        unsigned int v47 = *this;
        *(void *)&v65[0] = *(unsigned int *)(v39 + 84) / (16 * (unint64_t)*(unsigned int *)(v39 + 8));
        unsigned int v46 = v65[0];
        *(int64x2_t *)((char *)v65 + 8) = vdupq_n_s64(1uLL);
        *(void *)uint64_t v62 = v60;
        *(_OWORD *)&v62[8] = *(_OWORD *)((char *)v65 + 8);
        [v47 dispatchThreads:v65 threadsPerThreadgroup:v62];
        LODWORD(v44) = *(_DWORD *)(v39 + 12);
        char v4 = (_DWORD *)(v39 + 12);
        unsigned int v48 = v46 / v44;
        if (v48 >= 2)
        {
          [*this setComputePipelineState:*(void *)(v58 + 48)];
          [*this setBuffer:*(void *)v10 offset:*v40 atIndex:0];
          LOBYTE(v65[0]) = 1;
          unint64_t v10 = v61;
          re::DeformationVertexBufferState::ensureVertexBufferInitialized(v61, 1u);
          uint64_t v49 = *(void *)(*v5
                          + 32
                          * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v42, (unsigned __int8 *)v65)+ 24);
          LOBYTE(v65[0]) = 1;
          re::DeformationVertexBufferState::ensureVertexBufferInitialized(v61, 1u);
          objc_msgSend(*this, "setBuffer:offset:atIndex:", v49, *(unsigned int *)(*v5+ 32* re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v42, (unsigned __int8 *)v65)+ 16), 1);
          LODWORD(v38) = *v4 / 3u * (v48 - 1);
          goto LABEL_12;
        }
      }
      ++v13;
      v12 += 24;
      a2 = v54;
      char v6 = v55;
    }
    while (v57 != v13);
  }
  return [*this popDebugGroup];
}

void re::BlendShapeDeformer::deformCPU(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v140 = *MEMORY[0x263EF8340];
  uint64_t v124 = *(void *)(*a3 + 48);
  if (v124)
  {
    char v6 = a3;
    unint64_t v7 = 0;
    uint64_t v125 = *a3 + 8;
    do
    {
      unint64_t v8 = *(void *)(re::BucketArray<re::DeformationInstanceIndex,64ul>::operator[](v125, v7) + 8);
      unint64_t v9 = v6[6];
      if (v9 <= v8) {
        goto LABEL_70;
      }
      uint64_t v10 = v6[5] + 312 * v8;
      uint64_t v11 = re::BucketArray<re::ActiveDeformation,8ul>::operator[](v6[1], v8);
      LOBYTE(v135) = 1;
      re::DeformationVertexBufferState::ensureVertexBufferInitialized(v10, 1u);
      uint64_t v12 = re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find((void *)(v10 + 184), (unsigned __int8 *)&v135);
      uint64_t v14 = **(void ***)(v11 + 344);
      unint64_t v4 = *(unsigned __int16 *)(v11 + 392);
      unint64_t v3 = v14[5];
      if (v3 <= v4) {
        goto LABEL_71;
      }
      unint64_t v5 = *(unsigned int *)(v14[6] + 4 * v4);
      unint64_t v3 = v14[2];
      if (v3 <= v5) {
        goto LABEL_72;
      }
      uint64_t v15 = *(void *)(*(void *)(v10 + 192) + 32 * v12 + 8)
          + *(unsigned int *)(*(void *)(v10 + 192) + 32 * v12 + 16);
      uint64_t v16 = v14[3];
      uint64_t v17 = v16 + 168 * v5;
      unint64_t v18 = *(unsigned int *)(v17 + 116);
      if (v18)
      {
        uint64_t v19 = (id *)(v17 + 104);
        uint64_t v20 = *(unsigned int *)v14;
        if (v20 == 1)
        {
          unint64_t v4 = *(void *)(a2 + 8);
          if (v4 <= v7) {
            goto LABEL_75;
          }
          uint64_t v122 = *(void *)(a2 + 16);
          unint64_t v85 = (char *)objc_msgSend(*v19, sel_contents);
          unint64_t v3 = v16 + 168 * v5;
          uint64_t v118 = *(unsigned int *)(v3 + 112);
          uint64_t v120 = v85;
          __int16 v86 = (char *)objc_msgSend(*(id *)(v3 + 120), (SEL)&selRef_setThreadgroupMemoryLength_);
          uint64_t v87 = *(unsigned int *)(v3 + 128);
          long long v88 = (char *)objc_msgSend(*(id *)(v3 + 72), (SEL)&selRef_setThreadgroupMemoryLength_);
          unint64_t v4 = *(unsigned int *)(v3 + 80);
          long long v89 = (char *)objc_msgSend(*(id *)(v3 + 136), (SEL)&selRef_setThreadgroupMemoryLength_);
          if (v18 >= 4)
          {
            uint64_t v90 = 0;
            long long v91 = (uint64_t *)(v122 + 16 * v7);
            long long v92 = &v89[*(unsigned int *)(v3 + 144)];
            unint64_t v93 = v91[1];
            unsigned int v94 = *(_DWORD *)&v86[v87];
            while (1)
            {
              uint64_t v95 = *(unsigned int *)&v120[4 * v90++ + v118];
              unsigned int v96 = *(_DWORD *)&v86[4 * v90 + v87];
              float32x4_t v97 = 0uLL;
              uint64_t v98 = v96 - v94;
              if (v96 != v94) {
                break;
              }
LABEL_51:
              *(float *)(v15 + 4 * v95) = *(float *)(v15 + 4 * v95)
                                        + vaddv_f32(vadd_f32(*(float32x2_t *)v97.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v97, (int8x16_t)v97, 8uLL)));
              unsigned int v94 = v96;
              if (v90 == v18 >> 2) {
                goto LABEL_52;
              }
            }
            unsigned int v99 = 0;
            uint64_t v100 = *v91;
            while (1)
            {
              unint64_t v101 = *(unsigned int *)&v92[4 * v94 + 4 * v99];
              if (v93 <= v101) {
                break;
              }
              unint64_t v102 = *(unsigned int *)&v92[4 * v94 + 4 + 4 * v99];
              if (v93 <= v102) {
                goto LABEL_64;
              }
              unint64_t v3 = v94 + v99;
              unint64_t v103 = *(unsigned int *)&v92[4 * (v3 + 2)];
              if (v93 <= v103) {
                goto LABEL_66;
              }
              unint64_t v3 = *(unsigned int *)&v92[4 * (v3 + 3)];
              if (v93 <= v3) {
                goto LABEL_68;
              }
              v104.i32[0] = *(_DWORD *)(v100 + 4 * v101);
              v104.i32[1] = *(_DWORD *)(v100 + 4 * v102);
              v104.i32[2] = *(_DWORD *)(v100 + 4 * v103);
              v104.i32[3] = *(_DWORD *)(v100 + 4 * v3);
              float32x4_t v97 = vmlaq_f32(v97, v104, *(float32x4_t *)&v88[16 * (v94 >> 2) + 16 * (v99 >> 2) + v4]);
              v99 += 4;
              if (v99 >= v98) {
                goto LABEL_51;
              }
            }
LABEL_62:
            re::internal::assertLog((re::internal *)6, v98, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v101, v93);
            _os_crash();
            __break(1u);
LABEL_63:
            re::internal::assertLog((re::internal *)6, v36, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v41, v29);
            _os_crash();
            __break(1u);
LABEL_64:
            re::internal::assertLog((re::internal *)6, v98, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v102, v93);
            _os_crash();
            __break(1u);
LABEL_65:
            re::internal::assertLog((re::internal *)6, v36, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v42, v29);
            _os_crash();
            __break(1u);
LABEL_66:
            re::internal::assertLog((re::internal *)6, v98, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v103, v93);
            _os_crash();
            __break(1u);
LABEL_67:
            re::internal::assertLog((re::internal *)6, v36, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v3, v29);
            _os_crash();
            __break(1u);
LABEL_68:
            re::internal::assertLog((re::internal *)6, v98, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v3, v93);
            _os_crash();
            __break(1u);
LABEL_69:
            re::internal::assertLog((re::internal *)6, v57, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v70, v70);
            _os_crash();
            __break(1u);
LABEL_70:
            re::internal::assertLog((re::internal *)6, v8, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 666, v8, v9);
            _os_crash();
            __break(1u);
LABEL_71:
            long long v138 = 0u;
            long long v139 = 0u;
            long long v136 = 0u;
            long long v137 = 0u;
            long long v135 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)buf = 136315906;
            unint64_t v128 = "operator[]";
            __int16 v129 = 1024;
            int v130 = 476;
            __int16 v131 = 2048;
            unint64_t v132 = v4;
            __int16 v133 = 2048;
            unint64_t v134 = v3;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_72:
            long long v138 = 0u;
            long long v139 = 0u;
            long long v136 = 0u;
            long long v137 = 0u;
            long long v135 = 0u;
            unint64_t v7 = &_os_log_internal;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)buf = 136315906;
            unint64_t v128 = "operator[]";
            __int16 v129 = 1024;
            int v130 = 476;
            __int16 v131 = 2048;
            unint64_t v132 = v5;
            __int16 v133 = 2048;
            unint64_t v134 = v3;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_73:
            long long v138 = 0u;
            long long v139 = 0u;
            long long v136 = 0u;
            long long v137 = 0u;
            long long v135 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)buf = 136315906;
            unint64_t v128 = "operator[]";
            __int16 v129 = 1024;
            int v130 = 468;
            __int16 v131 = 2048;
            unint64_t v132 = v7;
            __int16 v133 = 2048;
            unint64_t v134 = v4;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_74:
            long long v138 = 0u;
            long long v139 = 0u;
            long long v136 = 0u;
            long long v137 = 0u;
            long long v135 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)buf = 136315906;
            unint64_t v128 = "operator[]";
            __int16 v129 = 1024;
            int v130 = 468;
            __int16 v131 = 2048;
            unint64_t v132 = v7;
            __int16 v133 = 2048;
            unint64_t v134 = v4;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_75:
            long long v138 = 0u;
            long long v139 = 0u;
            long long v136 = 0u;
            long long v137 = 0u;
            long long v135 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)buf = 136315906;
            unint64_t v128 = "operator[]";
            __int16 v129 = 1024;
            int v130 = 468;
            __int16 v131 = 2048;
            unint64_t v132 = v7;
            __int16 v133 = 2048;
            unint64_t v134 = v4;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_76:
            re::internal::assertLog((re::internal *)5, v13, "assertion failure: '%s' (%s:line %i) Invalid blend shape index type: %u.", "!\"Unreachable code\"", "deformCPU", 1332, v20);
            _os_crash();
            __break(1u);
          }
LABEL_52:
          unint64_t v3 = v16 + 168 * v5;
          int v105 = (char *)objc_msgSend(*(id *)(v3 + 152), sel_contents);
          unint64_t v107 = *(unsigned int *)(v3 + 164);
          char v6 = a3;
          if (v107 >= 4)
          {
            unsigned int v108 = &v105[*(unsigned int *)(v3 + 160)];
            unint64_t v109 = v107 >> 2;
            do
            {
              unsigned int v110 = *(unsigned __int16 *)v108;
              v108 += 4;
              uint64_t v111 = 4 * v110;
              v106.i64[0] = *(void *)(v15 + v111);
              float v112 = (__int32 *)(v15 + 4 * (v110 + 2));
              v106.i32[2] = *v112;
              int32x4_t v113 = (int32x4_t)vmulq_f32(v106, v106);
              v113.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v113, 2), vadd_f32(*(float32x2_t *)v113.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v113.i8, 1))).u32[0];
              float32x2_t v114 = vrsqrte_f32((float32x2_t)v113.u32[0]);
              float32x2_t v115 = vmul_f32(v114, vrsqrts_f32((float32x2_t)v113.u32[0], vmul_f32(v114, v114)));
              float32x4_t v106 = vmulq_n_f32(v106, vmul_f32(v115, vrsqrts_f32((float32x2_t)v113.u32[0], vmul_f32(v115, v115))).f32[0]);
              *(void *)(v15 + v111) = v106.i64[0];
              __int32 *v112 = v106.i32[2];
              --v109;
            }
            while (v109);
          }
        }
        else
        {
          if (v20) {
            goto LABEL_76;
          }
          unint64_t v4 = *(void *)(a2 + 8);
          if (v4 <= v7) {
            goto LABEL_74;
          }
          uint64_t v121 = *(void *)(a2 + 16);
          uint64_t v21 = (char *)objc_msgSend(*v19, sel_contents);
          unint64_t v3 = v16 + 168 * v5;
          uint64_t v117 = *(unsigned int *)(v3 + 112);
          uint64_t v119 = v21;
          uint64_t v22 = (char *)objc_msgSend(*(id *)(v3 + 120), (SEL)&selRef_setThreadgroupMemoryLength_);
          uint64_t v23 = *(unsigned int *)(v3 + 128);
          char v24 = (char *)objc_msgSend(*(id *)(v3 + 72), (SEL)&selRef_setThreadgroupMemoryLength_);
          unint64_t v4 = *(unsigned int *)(v3 + 80);
          int v25 = (char *)objc_msgSend(*(id *)(v3 + 136), (SEL)&selRef_setThreadgroupMemoryLength_);
          if (v18 >= 2)
          {
            uint64_t v26 = 0;
            uint64_t v27 = (uint64_t *)(v121 + 16 * v7);
            unint64_t v28 = &v25[*(unsigned int *)(v3 + 144)];
            unint64_t v29 = v27[1];
            unsigned __int16 v30 = *(_WORD *)&v22[v23];
            while (1)
            {
              uint64_t v31 = *(unsigned __int16 *)&v119[2 * v26++ + v117];
              int v32 = *(unsigned __int16 *)&v22[2 * v26 + v23];
              float32x4_t v33 = 0uLL;
              if (v32 != v30) {
                break;
              }
LABEL_19:
              *(float *)(v15 + 4 * v31) = *(float *)(v15 + 4 * v31)
                                        + vaddv_f32(vadd_f32(*(float32x2_t *)v33.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v33, (int8x16_t)v33, 8uLL)));
              unsigned __int16 v30 = v32;
              if (v26 == v18 >> 1) {
                goto LABEL_20;
              }
            }
            uint64_t v34 = 0;
            __int16 v35 = 0;
            uint64_t v36 = v30 >> 2;
            uint64_t v37 = (unsigned __int16)(v32 - v30);
            uint64_t v38 = *v27;
            while (1)
            {
              unsigned __int16 v39 = v30 + v35;
              unint64_t v40 = *(unsigned __int16 *)&v28[2 * (unsigned __int16)(v30 + v35)];
              if (v29 <= v40) {
                break;
              }
              unint64_t v3 = v39;
              unint64_t v41 = *(unsigned __int16 *)&v28[2 * v39 + 2];
              if (v29 <= v41) {
                goto LABEL_63;
              }
              unint64_t v42 = *(unsigned __int16 *)&v28[2 * (v3 + 2)];
              if (v29 <= v42) {
                goto LABEL_65;
              }
              unint64_t v3 = *(unsigned __int16 *)&v28[2 * (v3 + 3)];
              if (v29 <= v3) {
                goto LABEL_67;
              }
              v43.i32[0] = *(_DWORD *)(v38 + 4 * v40);
              v43.i32[1] = *(_DWORD *)(v38 + 4 * v41);
              v43.i32[2] = *(_DWORD *)(v38 + 4 * v42);
              v43.i32[3] = *(_DWORD *)(v38 + 4 * v3);
              float32x4_t v33 = vmlaq_f32(v33, v43, *(float32x4_t *)&v24[16 * (unsigned __int16)(v36 + (v34 >> 2)) + v4]);
              __int16 v35 = v34 + 4;
              uint64_t v34 = (unsigned __int16)(v34 + 4);
              if (v34 >= v37) {
                goto LABEL_19;
              }
            }
            re::internal::assertLog((re::internal *)6, v36, v34, v37, v38, *(double *)v33.i64, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v40, v29);
            _os_crash();
            __break(1u);
            goto LABEL_62;
          }
LABEL_20:
          unint64_t v3 = v16 + 168 * v5;
          uint64_t v44 = (char *)objc_msgSend(*(id *)(v3 + 152), sel_contents);
          unint64_t v46 = *(unsigned int *)(v3 + 164);
          char v6 = a3;
          if (v46 >= 2)
          {
            unsigned int v47 = &v44[*(unsigned int *)(v3 + 160)];
            unint64_t v48 = v46 >> 1;
            do
            {
              unsigned int v49 = *(unsigned __int16 *)v47;
              v47 += 2;
              uint64_t v50 = v15 + 4 * v49;
              v45.i64[0] = *(void *)v50;
              v45.i32[2] = *(_DWORD *)(v50 + 8);
              int32x4_t v51 = (int32x4_t)vmulq_f32(v45, v45);
              v51.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v51, 2), vadd_f32(*(float32x2_t *)v51.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v51.i8, 1))).u32[0];
              float32x2_t v52 = vrsqrte_f32((float32x2_t)v51.u32[0]);
              float32x2_t v53 = vmul_f32(v52, vrsqrts_f32((float32x2_t)v51.u32[0], vmul_f32(v52, v52)));
              float32x4_t v45 = vmulq_n_f32(v45, vmul_f32(v53, vrsqrts_f32((float32x2_t)v51.u32[0], vmul_f32(v53, v53))).f32[0]);
              *(void *)uint64_t v50 = v45.i64[0];
              *(_DWORD *)(v50 + 8) = v45.i32[2];
              --v48;
            }
            while (v48);
          }
        }
      }
      else
      {
        LOBYTE(v135) = 1;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized(v10, 1u);
        uint64_t v54 = re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find((void *)(v10 + 184), (unsigned __int8 *)&v135);
        unint64_t v4 = *(void *)(a2 + 8);
        if (v4 <= v7) {
          goto LABEL_73;
        }
        unint64_t v55 = *(unsigned int *)(*(void *)(v10 + 192) + 32 * v54 + 20);
        unint64_t v3 = *(void *)(a2 + 16);
        re::ReadOnlyCPUAccessibleBufferSliceContent::make((void *)(v16 + 168 * v5 + 72), (uint64_t)&v135);
        if ((_BYTE)v135)
        {
          unint64_t v59 = (unsigned int *)(v16 + 168 * v5);
          uint64_t v61 = v59[2];
          unint64_t v60 = v59[3];
          uint64_t v62 = v59[4];
          unint64_t v63 = v59[21];
          unint64_t v64 = 4 * (4 * v61);
          unint64_t v65 = v63 / v64;
          if (v64 <= v63)
          {
            unint64_t v66 = 0;
            long long v67 = (float32x4_t **)(v3 + 16 * v7);
            long long v68 = (float32x4_t *)*((void *)&v135 + 1);
            uint64_t v69 = *v67;
            unint64_t v70 = (uint64_t)v67[1] >> 2;
            if (v65 <= 1) {
              uint64_t v71 = 1;
            }
            else {
              uint64_t v71 = v65;
            }
            do
            {
              if (v61)
              {
                if (v70 <= (v61 - 1)) {
                  goto LABEL_69;
                }
                float32x4_t v58 = 0uLL;
                uint64_t v72 = v68;
                unsigned int v73 = v69;
                uint64_t v74 = v61;
                do
                {
                  float32x4_t v75 = *v72++;
                  float32x4_t v76 = v75;
                  float32x4_t v77 = *v73++;
                  float32x4_t v58 = vmlaq_f32(v58, v77, v76);
                  --v74;
                }
                while (v74);
              }
              else
              {
                float32x4_t v58 = 0uLL;
              }
              uint64_t v57 = v66 % v60 + v66 / v60 * v62;
              *(float *)(v15 + 4 * v57) = *(float *)(v15 + 4 * v57)
                                        + vaddv_f32(vadd_f32(*(float32x2_t *)v58.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v58, (int8x16_t)v58, 8uLL)));
              ++v66;
              v68 += v61;
            }
            while (v66 != v71);
          }
          unint64_t v78 = v55 >> 2;
          unint64_t v79 = v65 - (v55 >> 2);
          if (v79 >= 3)
          {
            unint64_t v80 = v79 / 3;
            do
            {
              uint64_t v81 = v15 + 4 * (v78 % v60 + v78 / v60 * v62);
              v58.i64[0] = *(void *)v81;
              v58.i32[2] = *(_DWORD *)(v81 + 8);
              int32x4_t v82 = (int32x4_t)vmulq_f32(v58, v58);
              v82.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v82, 2), vadd_f32(*(float32x2_t *)v82.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v82.i8, 1))).u32[0];
              float32x2_t v83 = vrsqrte_f32((float32x2_t)v82.u32[0]);
              float32x2_t v84 = vmul_f32(v83, vrsqrts_f32((float32x2_t)v82.u32[0], vmul_f32(v83, v83)));
              float32x4_t v58 = vmulq_n_f32(v58, vmul_f32(v84, vrsqrts_f32((float32x2_t)v82.u32[0], vmul_f32(v84, v84))).f32[0]);
              *(void *)uint64_t v81 = v58.i64[0];
              *(_DWORD *)(v81 + 8) = v58.i32[2];
              v78 += 3;
              --v80;
            }
            while (v80);
          }
        }
        else
        {
          uint64_t v116 = *re::graphicsLogObjects(v56);
          if (os_log_type_enabled(v116, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_233120000, v116, OS_LOG_TYPE_DEFAULT, "Failure: Read metal buffer", buf, 2u);
          }
        }
        re::Result<re::ReadOnlyCPUAccessibleBufferSliceContent,re::DetailedError>::~Result(&v135);
        char v6 = a3;
      }
      ++v7;
    }
    while (v7 != v124);
  }
}

uint64_t re::BlendShapeModelUtil::blendShapeTargetCountForGroup(re::BlendShapeModelUtil *this, const DeformationModelData *a2)
{
  uint64_t v2 = *(void **)this;
  if (!*(void *)this || v2[8] <= (unint64_t)a2) {
    return 0;
  }
  if (v2[2] <= (unint64_t)a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(v2[3] + 168 * a2);
}

re::StringID *re::BlendShapeModelUtil::blendShapeTargetName@<X0>(re::BlendShapeModelUtil *this@<X0>, const DeformationModelData *a2@<X1>, unint64_t a3@<X2>, re::StringID *a4@<X8>)
{
  unint64_t v4 = *(void **)this;
  if (!*(void *)this || v4[8] <= (unint64_t)a2) {
    goto LABEL_8;
  }
  if (v4[2] <= (unint64_t)a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v5 = v4[3];
  if (*(void *)(v5 + 168 * a2 + 32) > a3)
  {
    char v6 = (const StringID *)(*(void *)(v5 + 168 * a2 + 40) + 16 * a3);
    return re::StringID::StringID(a4, v6);
  }
  else
  {
LABEL_8:
    return re::StringID::invalid(a4);
  }
}

uint64_t re::BlendShapeModelUtil::DEPRECATED_blendShapeTargetNameDoNotUse(re::BlendShapeModelUtil *this, const DeformationModelData *a2, unint64_t a3)
{
  unint64_t v3 = *(void **)this;
  if (!*(void *)this || v3[8] <= (unint64_t)a2) {
    return 0;
  }
  if (v3[2] <= (unint64_t)a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v4 = v3[3];
  if (*(void *)(v4 + 168 * a2 + 32) > a3) {
    return *(void *)(*(void *)(v4 + 168 * a2 + 40) + 16 * a3 + 8);
  }
  else {
    return 0;
  }
}

re::DynamicString *re::BlendShapeModelUtil::makeBlendShapeGroupDefinitionFromGroup@<X0>(re::BlendShapeModelUtil *this@<X0>, const DeformationModelData *a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t v351 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(void **)this;
  if (!*(void *)this)
  {
    uint64_t v22 = (_anonymous_namespace_ *)std::system_category();
    uint64_t v23 = "Deformation model does not contain blendshape data";
LABEL_21:
    long long v25 = v346;
    long long v26 = v347;
    *(unsigned char *)a3 = 0;
    a3[1] = 0;
    a3[2] = (unint64_t)v22;
    *(_OWORD *)(a3 + 3) = v25;
    *(_OWORD *)(a3 + 5) = v26;
    return result;
  }
  unint64_t v6 = v5[2];
  if (v6 != v5[8])
  {
    uint64_t v22 = (_anonymous_namespace_ *)std::system_category();
    uint64_t v23 = "Deformation model has mismatched buffer and name counts";
    goto LABEL_21;
  }
  unint64_t v7 = (unint64_t)&v342;
  unint64_t v8 = &v324;
  unint64_t v9 = a2;
  if (v6 <= a2)
  {
LABEL_364:
    unint64_t v324 = 0;
    long long v349 = 0u;
    long long v350 = 0u;
    long long v347 = 0u;
    long long v348 = 0u;
    long long v346 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v342 = 136315906;
    *(unint64_t *)((char *)v8 + 236) = (unint64_t)"operator[]";
    WORD2(v343) = 1024;
    *(_DWORD *)((char *)v8 + 246) = 476;
    WORD1(v344) = 2048;
    *(unint64_t *)((char *)v8 + 252) = v9;
    __int16 v345 = 2048;
    *(void *)(v7 + 30) = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_365:
    *(void *)v335 = 0;
    long long v349 = 0u;
    long long v350 = 0u;
    long long v347 = 0u;
    long long v348 = 0u;
    long long v346 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v330 = 136315906;
    *(void *)&v330[4] = "operator[]";
    *(_WORD *)&v330[12] = 1024;
    *(_DWORD *)&v330[14] = 468;
    *(_WORD *)&v330[18] = 2048;
    *(void *)&v330[20] = v7;
    __int16 v331 = 2048;
    *(void *)v332 = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_366:
    *(void *)v335 = 0;
    long long v349 = 0u;
    long long v350 = 0u;
    long long v347 = 0u;
    long long v348 = 0u;
    long long v346 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v330 = 136315906;
    *(void *)&v330[4] = "operator[]";
    *(_WORD *)&v330[12] = 1024;
    *(_DWORD *)&v330[14] = 476;
    *(_WORD *)&v330[18] = 2048;
    *(void *)&v330[20] = v7;
    __int16 v331 = 2048;
    *(void *)v332 = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_367:
    *(void *)v335 = 0;
    long long v349 = 0u;
    long long v350 = 0u;
    long long v347 = 0u;
    long long v348 = 0u;
    long long v346 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v330 = 136315906;
    *(void *)&v330[4] = "operator[]";
    *(_WORD *)&v330[12] = 1024;
    *(_DWORD *)&v330[14] = 468;
    *(_WORD *)&v330[18] = 2048;
    *(void *)&v330[20] = v7;
    __int16 v331 = 2048;
    *(void *)v332 = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_368:
    *(void *)v335 = 0;
    long long v349 = 0u;
    long long v350 = 0u;
    long long v347 = 0u;
    long long v348 = 0u;
    long long v346 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v330 = 136315906;
    *(void *)&v330[4] = "operator[]";
    *(_WORD *)&v330[12] = 1024;
    *(_DWORD *)&v330[14] = 476;
    *(_WORD *)&v330[18] = 2048;
    *(void *)&v330[20] = v7;
    __int16 v331 = 2048;
    *(void *)v332 = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_369:
    unint64_t v324 = 0;
    long long v349 = 0u;
    long long v350 = 0u;
    long long v347 = 0u;
    long long v348 = 0u;
    long long v346 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v342 = 136315906;
    *(void *)(v7 + 4) = "operator[]";
    WORD2(v343) = 1024;
    *(_DWORD *)(v7 + 14) = 476;
    WORD1(v344) = 2048;
    *(void *)(v7 + 20) = v9;
    __int16 v345 = 2048;
    *(void *)(v7 + 30) = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_370:
    *(void *)&long long v320 = 0;
    long long v349 = 0u;
    long long v350 = 0u;
    long long v347 = 0u;
    long long v348 = 0u;
    long long v346 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(v333[0]) = 136315906;
    *(void *)((char *)v333 + 4) = "operator[]";
    WORD6(v333[0]) = 1024;
    *(_DWORD *)((char *)v333 + 14) = 476;
    WORD1(v333[1]) = 2048;
    *(void *)((char *)&v333[1] + 4) = v9;
    WORD6(v333[1]) = 2048;
    *(void *)((char *)&v333[1] + 14) = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_371:
    unint64_t v324 = 0;
    long long v349 = 0u;
    long long v350 = 0u;
    long long v347 = 0u;
    long long v348 = 0u;
    long long v346 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v342 = 136315906;
    *(void *)(v7 + 4) = "operator[]";
    WORD2(v343) = 1024;
    *(_DWORD *)(v7 + 14) = 476;
    WORD1(v344) = 2048;
    *(void *)(v7 + 20) = v9;
    __int16 v345 = 2048;
    *(void *)(v7 + 30) = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_372;
  }
  re::ReadOnlyCPUAccessibleBufferSliceContent::make((void *)(v5[3] + 168 * a2 + 104), (uint64_t)v314);
  if (v314[0] && v315)
  {
    uint64_t v11 = *(void **)this;
    if (*(_DWORD *)v5 == 1)
    {
      if (v11)
      {
        unint64_t v6 = v11[2];
        if (v6 == v11[8])
        {
          if (v6 > v9)
          {
            uint64_t v12 = (_DWORD *)v11[3];
            uint64_t v13 = (unint64_t *)&v12[42 * v9];
            re::ReadOnlyCPUAccessibleBufferSliceContent::make(v13 + 13, (uint64_t)&v342);
            int v14 = v342;
            unint64_t v15 = v344;
            re::ReadOnlyCPUAccessibleBufferSliceContent::make(v13 + 9, (uint64_t)&v324);
            if ((_BYTE)v324)
            {
              uint64_t v334 = 0;
              memset(v333, 0, sizeof(v333));
              uint64_t v323 = 0;
              long long v321 = 0u;
              long long v322 = 0u;
              char v16 = 2;
              long long v320 = 0u;
              if (!v14 || !v15)
              {
LABEL_16:
                unint64_t v17 = *v13;
                *(void *)v316 = 0;
                *(void *)&v316[8] = "";
                HIDWORD(v319) = 0;
                unint64_t v317 = 0;
                unint64_t v318 = 0;
                *(void *)&v316[16] = 0;
                LOBYTE(v319) = 0;
                unint64_t v6 = v11[8];
                if (v6 > v9)
                {
                  unint64_t v18 = re::StringID::operator=((unint64_t *)v316, (uint64_t *)(v11[9] + 16 * v9));
                  unint64_t v313 = v17;
                  LOBYTE(v319) = v16;
                  LODWORD(v293) = v12[42 * v9 + 3];
                  HIDWORD(v319) = v293 / 3;
                  v304 = (void *)v320;
                  if (*((void *)&v320 + 1) >> 2 == 1)
                  {
                    unint64_t v21 = 0;
                  }
                  else
                  {
                    unint64_t v21 = 0;
                    uint64_t v81 = 4 * (*((void *)&v320 + 1) >> 2) - 4;
                    while (*(_DWORD *)(v320 + 4 * v21) < *(_DWORD *)(v320 + 4 * v21 + 4))
                    {
                      ++v21;
                      v81 -= 4;
                      if (!v81)
                      {
                        unint64_t v21 = ((unint64_t)(*((void *)&v320 + 1) - 8) >> 2) + 1;
                        break;
                      }
                    }
                  }
                  unint64_t v30 = v325;
                  uint64_t v284 = *(void *)&v333[0];
                  v300 = v343;
                  uint64_t v276 = &v316[16];
                  if (v344 >> 2 == 1)
                  {
                    unint64_t v82 = 1;
                    goto LABEL_94;
                  }
                  uint64_t v86 = 0;
                  unint64_t v82 = ((v344 - 8) >> 2) + 2;
                  uint64_t v87 = 4 * (v344 >> 2) - 4;
                  while (v343[v86] < v343[v86 + 1])
                  {
                    ++v86;
                    v87 -= 4;
                    if (!v87) {
                      goto LABEL_96;
                    }
                  }
LABEL_93:
                  unint64_t v82 = v86 + 1;
LABEL_94:
                  if (v82 == 1 && !v21) {
                    goto LABEL_97;
                  }
LABEL_96:
                  if (v21 == v82)
                  {
LABEL_97:
                    unint64_t v296 = v21;
                    uint64_t v90 = &v12[42 * v9];
                    char v93 = *((unsigned char *)v90 + 48);
                    long long v91 = v90 + 12;
                    char v92 = v93;
                    uint64_t v279 = v91;
                    int v94 = *((_DWORD *)v91 - 8);
                    int v291 = v91 - 32;
                    if (v91[1]) {
                      uint64_t v95 = *((unsigned int *)v91 - 8);
                    }
                    else {
                      uint64_t v95 = 0;
                    }
                    long long v286 = v91 + 2;
                    int v288 = v91 + 1;
                    if (v91[2]) {
                      uint64_t v96 = *((unsigned int *)v91 - 8);
                    }
                    else {
                      uint64_t v96 = 0;
                    }
                    unint64_t v98 = v313;
                    long long v283 = a3;
                    int v277 = v9;
                    int8x16_t v273 = v12;
                    if (!v313)
                    {
                      unint64_t v8 = 0;
LABEL_111:
                      if (!v296)
                      {
LABEL_149:
                        __int16 v129 = v279;
                        if (v98)
                        {
                          unint64_t v7 = 0;
                          int v130 = &v273[42 * v277];
                          long long v297 = v130 + 10;
                          v302 = (unint64_t *)(v130 + 8);
                          unint64_t v6 = 40;
                          do
                          {
                            unint64_t v3 = (_DWORD *)v317;
                            if (v317 <= v7) {
                              goto LABEL_365;
                            }
                            unint64_t v3 = (_DWORD *)*v302;
                            if (*v302 <= v7) {
                              goto LABEL_366;
                            }
                            unint64_t v30 = v318;
                            __int16 v131 = &v8[6 * v7];
                            unsigned int v134 = *((_DWORD *)v131 + 7);
                            unint64_t v132 = (unsigned int *)v131 + 7;
                            unint64_t v133 = v134;
                            long long v135 = re::StringID::operator=((unint64_t *)(v318 + 136 * v7), (uint64_t *)(*v297 + 16 * v7));
                            if (v134)
                            {
                              unint64_t v136 = v30 + 136 * v7;
                              if (*v129)
                              {
                              }
                              unint64_t v306 = v30;
                              if (*v288)
                              {
                              }
                              if (*v286)
                              {
                              }
                              *(void *)&v332[2] = 0;
                              memset(v330, 0, sizeof(v330));
                              unint64_t v139 = *v132;
                              if (v139) {
                                long long v138 = (_anonymous_namespace_ *)re::DynamicArray<re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*>::setCapacity(v330, v139);
                              }
                              unint64_t v140 = v7;
                              uint64_t v141 = &v8[6 * v7];
                              unsigned int v144 = *((_DWORD *)v141 + 8);
                              uint64_t v143 = (unsigned int *)(v141 + 4);
                              unint64_t v142 = v144;
                              unint64_t v310 = v140;
                              unint64_t v9 = 0;
                              if (v144)
                              {
                                id v145 = (int *)(v8[6 * v140 + 2] + 8);
                                while (1)
                                {
                                  int v146 = *v145;
                                  v145 += 10;
                                  if (v146 < 0) {
                                    break;
                                  }
                                  if (v142 == ++v9)
                                  {
                                    unint64_t v9 = v142;
                                    break;
                                  }
                                }
                              }
                              if (v142 == v9)
                              {
                                unint64_t v147 = *(unsigned int ***)&v332[2];
                                unint64_t v148 = *(void *)&v330[16];
                              }
                              else
                              {
                                unint64_t v149 = v9;
                                unint64_t v150 = &v8[6 * v310 + 2];
                                unint64_t v148 = *(void *)&v330[16];
                                unsigned int v151 = v142;
                                do
                                {
                                  unint64_t v30 = *v150;
                                  if (v148 >= *(void *)&v330[8])
                                  {
                                    if (*(void *)&v330[8] < v148 + 1)
                                    {
                                      if (*(void *)v330)
                                      {
                                        unint64_t v152 = 2 * *(void *)&v330[8];
                                        if (!*(void *)&v330[8]) {
                                          unint64_t v152 = 8;
                                        }
                                        if (v152 <= v148 + 1) {
                                          unint64_t v153 = v148 + 1;
                                        }
                                        else {
                                          unint64_t v153 = v152;
                                        }
                                        long long v138 = (_anonymous_namespace_ *)re::DynamicArray<re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*>::setCapacity(v330, v153);
                                      }
                                      else
                                      {
                                        long long v138 = (_anonymous_namespace_ *)re::DynamicArray<re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*>::setCapacity(v330, v148 + 1);
                                        ++*(_DWORD *)&v330[24];
                                      }
                                    }
                                    unint64_t v148 = *(void *)&v330[16];
                                    unsigned int v151 = *v143;
                                  }
                                  unint64_t v147 = *(unsigned int ***)&v332[2];
                                  *(void *)(*(void *)&v332[2] + 8 * v148++) = v30 + 40 * v149 + 16;
                                  *(void *)&v330[16] = v148;
                                  ++*(_DWORD *)&v330[24];
                                  if (v151 <= (int)v9 + 1) {
                                    unint64_t v154 = (v9 + 1);
                                  }
                                  else {
                                    unint64_t v154 = v151;
                                  }
                                  while (1)
                                  {
                                    unint64_t v149 = (v9 + 1);
                                    if (v154 - 1 == v9) {
                                      break;
                                    }
                                    LODWORD(v9) = v9 + 1;
                                    unint64_t v155 = v149;
                                    if ((*(_DWORD *)(*v150 + 40 * v149 + 8) & 0x80000000) != 0) {
                                      goto LABEL_188;
                                    }
                                  }
                                  unint64_t v155 = v154;
LABEL_188:
                                  unint64_t v9 = v155;
                                }
                                while (v142 != v155);
                              }
                              unint64_t v156 = 126 - 2 * __clz(v148);
                              if (v148) {
                                uint64_t v157 = v156;
                              }
                              else {
                                uint64_t v157 = 0;
                              }
                              std::__introsort<std::_ClassicAlgPolicy,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::{lambda(re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*)#1} &,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const**,false>(v147, &v147[v148], v157, 1);
                              __int16 v129 = v279;
                              if (v148)
                              {
                                unint64_t v7 = 0;
                                uint64_t v158 = (void *)(v306 + 136 * v310);
                                v159 = v158 + 4;
                                unint64_t v3 = (_DWORD *)v158[3];
                                v160 = v158 + 6;
                                v161 = v158 + 7;
                                uint64_t v162 = v158 + 9;
                                v163 = v158 + 10;
                                v164 = v158 + 12;
                                uint64_t v165 = v158 + 13;
                                uint64_t v166 = v158 + 15;
                                v167 = v158 + 16;
                                while (v3 != (_DWORD *)v7)
                                {
                                  unint64_t v168 = v147[v7];
                                  *(_DWORD *)(*v159 + 4 * v7) = *v168;
                                  unint64_t v9 = *v160;
                                  if (*v160 <= v7) {
                                    goto LABEL_354;
                                  }
                                  *(_DWORD *)(*v161 + 4 * v7) = v168[1];
                                  if (*v279)
                                  {
                                    unint64_t v9 = *v162;
                                    if (*v162 <= v7) {
                                      goto LABEL_356;
                                    }
                                    *(_DWORD *)(*v163 + 4 * v7) = v168[2];
                                  }
                                  if (*v288)
                                  {
                                    unint64_t v9 = *v164;
                                    if (*v164 <= v7) {
                                      goto LABEL_358;
                                    }
                                    *(_DWORD *)(*v165 + 4 * v7) = v168[3];
                                  }
                                  if (*v286)
                                  {
                                    unint64_t v9 = *v166;
                                    if (*v166 <= v7) {
                                      goto LABEL_360;
                                    }
                                    *(_DWORD *)(*v167 + 4 * v7) = v168[4];
                                  }
                                  if (v148 == ++v7) {
                                    goto LABEL_206;
                                  }
                                }
                                uint64_t v329 = 0;
                                long long v349 = 0u;
                                long long v350 = 0u;
                                long long v347 = 0u;
                                long long v348 = 0u;
                                long long v346 = 0u;
                                os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                                *(_DWORD *)v335 = 136315906;
                                *(void *)&v335[4] = "operator[]";
                                __int16 v336 = 1024;
                                int v337 = 468;
                                __int16 v338 = 2048;
                                unint64_t v339 = (unint64_t)v3;
                                __int16 v340 = 2048;
                                unint64_t v341 = (unint64_t)v3;
                                _os_log_send_and_compose_impl();
                                _os_crash_msg();
                                __break(1u);
LABEL_353:
                                uint64_t v329 = 0;
                                long long v349 = 0u;
                                long long v350 = 0u;
                                long long v347 = 0u;
                                long long v348 = 0u;
                                long long v346 = 0u;
                                os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                                *(_DWORD *)v335 = 136315906;
                                *(void *)&v335[4] = "operator[]";
                                __int16 v336 = 1024;
                                int v337 = 468;
                                __int16 v338 = 2048;
                                unint64_t v339 = (unint64_t)v3;
                                __int16 v340 = 2048;
                                unint64_t v341 = (unint64_t)v3;
                                _os_log_send_and_compose_impl();
                                _os_crash_msg();
                                __break(1u);
LABEL_354:
                                uint64_t v329 = 0;
                                long long v349 = 0u;
                                long long v350 = 0u;
                                long long v347 = 0u;
                                long long v348 = 0u;
                                long long v346 = 0u;
                                os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                                *(_DWORD *)v335 = 136315906;
                                *(void *)&v335[4] = "operator[]";
                                __int16 v336 = 1024;
                                int v337 = 468;
                                __int16 v338 = 2048;
                                unint64_t v339 = v7;
                                __int16 v340 = 2048;
                                unint64_t v341 = v9;
                                _os_log_send_and_compose_impl();
                                _os_crash_msg();
                                __break(1u);
                                goto LABEL_355;
                              }
LABEL_206:
                              if (v147 && *(void *)v330) {
                                (*(void (**)(void, unsigned int **, unsigned char *, unsigned char *))(**(void **)v330
                              }
                                                                                                  + 40))(*(void *)v330, v147, v288, v286);
                              unint64_t v7 = v310;
                            }
                            ++v7;
                          }
                          while (v7 != v313);
                        }
                        unint64_t v169 = *(void *)v316;
                        unint64_t v170 = v317;
                        unint64_t v171 = v318;
                        unint64_t v172 = v319;
                        *(unsigned char *)long long v283 = 1;
                        v283[1] = v169;
                        *(void *)&long long v346 = 0;
                        *((void *)&v346 + 1) = "";
                        long long v173 = *(_OWORD *)&v316[8];
                        *(void *)v316 = 0;
                        *(void *)&v316[8] = "";
                        unint64_t v317 = 0;
                        unint64_t v318 = 0;
                        *(void *)&v316[16] = 0;
                        *((_OWORD *)v283 + 1) = v173;
                        long long v347 = 0uLL;
                        v283[4] = v170;
                        v283[5] = v171;
                        *(void *)&long long v348 = 0;
                        *((void *)&v348 + 1) = v172;
                        v283[6] = v172;
                        re::FixedArray<re::BlendShapeDefinition>::deinit(&v347);
                        re::StringID::destroyString((re::StringID *)&v346);
                        goto LABEL_212;
                      }
                      unint64_t v103 = 0;
                      int v104 = 0;
                      uint64_t v282 = (v94 << v92);
                      unint64_t v274 = v95 + v282 + v96;
                      while (1)
                      {
                        unint64_t v105 = v300[v103];
                        unsigned int v106 = v105 % *v291;
                        LODWORD(v329) = v106;
                        uint64_t v107 = *((unsigned int *)v304 + v103);
                        unint64_t v108 = *((unsigned int *)v304 + (v104 + 1));
                        unint64_t v309 = (v104 + 1);
                        if (v105 >= v293)
                        {
                          if (v105 >= v282)
                          {
                            if (v95 + v282 <= v105)
                            {
                              if (v274 <= v105) {
                                goto LABEL_350;
                              }
                              unint64_t v19 = 3;
                            }
                            else
                            {
                              unint64_t v19 = 2;
                            }
                          }
                          else
                          {
                            unint64_t v19 = 1;
                          }
                        }
                        else
                        {
                          unint64_t v19 = 0;
                        }
                        if (v107 < v108) {
                          break;
                        }
LABEL_148:
                        unint64_t v103 = v309;
                        int v104 = v309;
                        if (v296 <= v309) {
                          goto LABEL_149;
                        }
                      }
                      unint64_t v9 = v284 + 4 * v107;
                      unint64_t v109 = *(unsigned int *)v9;
                      while (1)
                      {
                        float v110 = *(float *)(v30 + 4 * v107);
                        if (v110 != 0.0) {
                          break;
                        }
LABEL_137:
                        unsigned int v126 = *(_DWORD *)(v9 + 4);
                        v9 += 4;
                        unint64_t v125 = v126;
                        BOOL v127 = v126 <= v109 || ++v107 >= v108;
                        unint64_t v109 = v125;
                        if (v127) {
                          goto LABEL_148;
                        }
                      }
                      if (v98 <= v109) {
                        goto LABEL_348;
                      }
                      uint64_t v111 = &v8[6 * v109];
                      unint64_t v112 = 0xBF58476D1CE4E5B9 * (v106 ^ ((unint64_t)v106 >> 30));
                      unint64_t v113 = (0x94D049BB133111EBLL * (v112 ^ (v112 >> 27))) ^ ((0x94D049BB133111EBLL
                                                                              * (v112 ^ (v112 >> 27))) >> 31);
                      if (*v111)
                      {
                        float32x2_t v114 = &v8[6 * v109];
                        unint64_t v115 = v113 % *((unsigned int *)v114 + 6);
                        uint64_t v116 = *(unsigned int *)(v114[1] + 4 * v115);
                        if (v116 != 0x7FFFFFFF)
                        {
                          uint64_t v117 = &v8[6 * v109];
                          unint64_t v120 = v117[2];
                          uint64_t v118 = (uint64_t *)(v117 + 2);
                          unint64_t v119 = v120;
                          uint64_t v121 = v116;
                          if (*(_DWORD *)(v120 + 40 * v116 + 12) == v106)
                          {
                            LODWORD(v121) = v116;
LABEL_131:
                            uint64_t v122 = (unsigned int *)(v119 + 40 * v121 + 16);
                            goto LABEL_136;
                          }
                          while (1)
                          {
                            LODWORD(v121) = *(_DWORD *)(v119 + 40 * v121 + 8) & 0x7FFFFFFF;
                            if (v121 == 0x7FFFFFFF) {
                              break;
                            }
                            if (*(_DWORD *)(v119 + 40 * v121 + 12) == v106) {
                              goto LABEL_131;
                            }
                          }
                          long long v346 = 0uLL;
                          LODWORD(v347) = 0;
                          uint64_t v128 = *v118;
                          while (*(_DWORD *)(v128 + 40 * v116 + 12) != v106)
                          {
                            LODWORD(v116) = *(_DWORD *)(v128 + 40 * v116 + 8) & 0x7FFFFFFF;
                            if (v116 == 0x7FFFFFFF) {
                              goto LABEL_134;
                            }
                          }
                          uint64_t v122 = (unsigned int *)(v128 + 40 * v116 + 16);
LABEL_135:
                          *uint64_t v122 = v106;
                          unint64_t v109 = *(unsigned int *)v9;
LABEL_136:
                          *(float *)&v122[v19 + 1] = v110;
                          goto LABEL_137;
                        }
                      }
                      else
                      {
                        LODWORD(v115) = 0;
                      }
                      long long v346 = 0uLL;
                      LODWORD(v347) = 0;
LABEL_134:
                      unsigned int v123 = re::HashTable<unsigned int,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::addAsMove((uint64_t)v111, v115, v113, &v329, &v346);
                      uint64_t v124 = &v8[6 * v109];
                      ++*((_DWORD *)v124 + 10);
                      uint64_t v122 = (unsigned int *)(v124[2] + 40 * v123 + 16);
                      unsigned int v106 = v329;
                      unint64_t v98 = v313;
                      goto LABEL_135;
                    }
                    if (v313 <= 0x555555555555555)
                    {
                      uint64_t v99 = (*(uint64_t (**)(unint64_t, unint64_t, uint64_t))(*(void *)v19 + 32))(v19, 48 * v313, 8);
                      if (v99)
                      {
                        unint64_t v8 = (unint64_t *)v99;
                        uint64_t v101 = v99;
                        unint64_t v102 = v313 - 1;
                        unint64_t v98 = v313;
                        if (v313 != 1)
                        {
                          uint64_t v101 = v99;
                          do
                          {
                            *(_OWORD *)(v101 + 16) = 0uLL;
                            *(_OWORD *)(v101 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0uLL;
                            *(_OWORD *)uint64_t v101 = 0uLL;
                            *(_DWORD *)(v101 + 36) = 0x7FFFFFFF;
                            v101 += 48;
                            --v102;
                          }
                          while (v102);
                        }
                        *(_OWORD *)(v101 + 16) = 0u;
                        *(_OWORD *)(v101 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0u;
                        *(_OWORD *)uint64_t v101 = 0u;
                        *(_DWORD *)(v101 + 36) = 0x7FFFFFFF;
                        goto LABEL_111;
                      }
                      goto LABEL_376;
                    }
LABEL_375:
                    re::internal::assertLog((re::internal *)6, v97, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 48, v98);
                    _os_crash();
                    __break(1u);
LABEL_376:
                    re::internal::assertLog((re::internal *)4, v100, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
                    _os_crash();
                    __break(1u);
                    goto LABEL_377;
                  }
LABEL_233:
                  uint64_t v189 = (_anonymous_namespace_ *)std::system_category();
                  long long v190 = v346;
                  long long v191 = v347;
                  *(unsigned char *)a3 = 0;
                  a3[1] = 0;
                  a3[2] = (unint64_t)v189;
                  *(_OWORD *)(a3 + 3) = v190;
                  *(_OWORD *)(a3 + 5) = v191;
                  float v174 = v276;
                  goto LABEL_340;
                }
                goto LABEL_373;
              }
              re::ReadOnlyCPUAccessibleBufferSliceContent::make(&v12[42 * v9 + 34], (uint64_t)&v346);
              if ((_BYTE)v346)
              {
                re::ReadOnlyCPUAccessibleBufferSliceContent::operator=((uint64_t *)v333, (uint64_t *)&v346 + 1);
                re::Result<re::ReadOnlyCPUAccessibleBufferSliceContent,re::DetailedError>::~Result(&v346);
                re::ReadOnlyCPUAccessibleBufferSliceContent::make(&v12[42 * v9 + 30], (uint64_t)&v346);
                if ((_BYTE)v346)
                {
                  re::ReadOnlyCPUAccessibleBufferSliceContent::operator=((uint64_t *)&v320, (uint64_t *)&v346 + 1);
                  re::Result<re::ReadOnlyCPUAccessibleBufferSliceContent,re::DetailedError>::~Result(&v346);
                  char v16 = 1;
                  goto LABEL_16;
                }
              }
LABEL_71:
              float32x4_t v77 = (_anonymous_namespace_ *)std::system_category();
              long long v78 = *(_OWORD *)v316;
              unint64_t v79 = *(void *)&v316[16];
              unint64_t v80 = v317;
              *(unsigned char *)a3 = 0;
              a3[1] = 0;
              a3[2] = (unint64_t)v77;
              *(_OWORD *)(a3 + 3) = v78;
              a3[5] = v79;
              a3[6] = v80;
              re::Result<re::ReadOnlyCPUAccessibleBufferSliceContent,re::DetailedError>::~Result(&v346);
              goto LABEL_341;
            }
LABEL_70:
            uint64_t v74 = (_anonymous_namespace_ *)std::system_category();
            long long v75 = v346;
            long long v76 = v347;
            *(unsigned char *)a3 = 0;
            a3[1] = 0;
            a3[2] = (unint64_t)v74;
            *(_OWORD *)(a3 + 3) = v75;
            *(_OWORD *)(a3 + 5) = v76;
            goto LABEL_342;
          }
          goto LABEL_371;
        }
        goto LABEL_67;
      }
LABEL_66:
      long long v67 = (_anonymous_namespace_ *)std::system_category();
      long long v68 = "Deformation model does not contain blendshape data";
LABEL_68:
      long long v69 = v346;
      long long v70 = v347;
      *(unsigned char *)a3 = 0;
      a3[1] = 0;
      a3[2] = (unint64_t)v67;
      *(_OWORD *)(a3 + 3) = v69;
      *(_OWORD *)(a3 + 5) = v70;
      return (re::DynamicString *)re::Result<re::ReadOnlyCPUAccessibleBufferSliceContent,re::DetailedError>::~Result(v314);
    }
    if (!v11) {
      goto LABEL_66;
    }
    unint64_t v6 = v11[2];
    if (v6 == v11[8])
    {
      if (v6 <= v9)
      {
LABEL_372:
        unint64_t v324 = 0;
        long long v349 = 0u;
        long long v350 = 0u;
        long long v347 = 0u;
        long long v348 = 0u;
        long long v346 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v342 = 136315906;
        *(void *)(v7 + 4) = "operator[]";
        WORD2(v343) = 1024;
        *(_DWORD *)(v7 + 14) = 476;
        WORD1(v344) = 2048;
        *(void *)(v7 + 20) = v9;
        __int16 v345 = 2048;
        *(void *)(v7 + 30) = v6;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_373:
        *(void *)v335 = 0;
        long long v349 = 0u;
        long long v350 = 0u;
        long long v347 = 0u;
        long long v348 = 0u;
        long long v346 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v330 = 136315906;
        *(void *)&v330[4] = "operator[]";
        *(_WORD *)&v330[12] = 1024;
        *(_DWORD *)&v330[14] = 476;
        *(_WORD *)&v330[18] = 2048;
        *(void *)&v330[20] = v9;
        __int16 v331 = 2048;
        *(void *)v332 = v6;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_374;
      }
      uint64_t v58 = v11[3];
      unint64_t v59 = (unint64_t *)(v58 + 168 * v9);
      re::ReadOnlyCPUAccessibleBufferSliceContent::make(v59 + 13, (uint64_t)&v342);
      int v60 = v342;
      unint64_t v61 = v344;
      re::ReadOnlyCPUAccessibleBufferSliceContent::make(v59 + 9, (uint64_t)&v324);
      if (!(_BYTE)v324) {
        goto LABEL_70;
      }
      uint64_t v334 = 0;
      memset(v333, 0, sizeof(v333));
      uint64_t v323 = 0;
      long long v321 = 0u;
      long long v322 = 0u;
      char v62 = 2;
      long long v320 = 0u;
      if (v60 && v61)
      {
        re::ReadOnlyCPUAccessibleBufferSliceContent::make((void *)(v58 + 168 * v9 + 136), (uint64_t)&v346);
        if (!(_BYTE)v346) {
          goto LABEL_71;
        }
        re::ReadOnlyCPUAccessibleBufferSliceContent::operator=((uint64_t *)v333, (uint64_t *)&v346 + 1);
        re::Result<re::ReadOnlyCPUAccessibleBufferSliceContent,re::DetailedError>::~Result(&v346);
        re::ReadOnlyCPUAccessibleBufferSliceContent::make((void *)(v58 + 168 * v9 + 120), (uint64_t)&v346);
        if (!(_BYTE)v346) {
          goto LABEL_71;
        }
        re::ReadOnlyCPUAccessibleBufferSliceContent::operator=((uint64_t *)&v320, (uint64_t *)&v346 + 1);
        re::Result<re::ReadOnlyCPUAccessibleBufferSliceContent,re::DetailedError>::~Result(&v346);
        char v62 = 1;
      }
      unint64_t v63 = *v59;
      *(void *)v316 = 0;
      *(void *)&v316[8] = "";
      HIDWORD(v319) = 0;
      unint64_t v317 = 0;
      unint64_t v318 = 0;
      *(void *)&v316[16] = 0;
      LOBYTE(v319) = 0;
      unint64_t v6 = v11[8];
      if (v6 <= v9)
      {
LABEL_374:
        *(void *)v335 = 0;
        long long v349 = 0u;
        long long v350 = 0u;
        long long v347 = 0u;
        long long v348 = 0u;
        long long v346 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v330 = 136315906;
        *(void *)&v330[4] = "operator[]";
        *(_WORD *)&v330[12] = 1024;
        *(_DWORD *)&v330[14] = 476;
        *(_WORD *)&v330[18] = 2048;
        *(void *)&v330[20] = v9;
        __int16 v331 = 2048;
        *(void *)v332 = v6;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_375;
      }
      unint64_t v64 = re::StringID::operator=((unint64_t *)v316, (uint64_t *)(v11[9] + 16 * v9));
      uint64_t v276 = &v316[16];
      unint64_t v313 = v63;
      LOBYTE(v319) = v62;
      unint64_t v294 = *(unsigned int *)(v58 + 168 * v9 + 12);
      HIDWORD(v319) = (*(unsigned int *)(v58 + 168 * v9 + 12) * (unsigned __int128)0x5555555555555556uLL) >> 64;
      uint64_t v305 = v320;
      if (*((void *)&v320 + 1) >> 1 == 1)
      {
        unint64_t v66 = 0;
      }
      else
      {
        unint64_t v66 = 0;
        uint64_t v83 = 2 * (*((void *)&v320 + 1) >> 1) - 2;
        while (*(unsigned __int16 *)(v320 + 2 * v66) < *(unsigned __int16 *)(v320 + 2 * v66 + 2))
        {
          ++v66;
          v83 -= 2;
          if (!v83)
          {
            unint64_t v66 = ((unint64_t)(*((void *)&v320 + 1) - 4) >> 1) + 1;
            break;
          }
        }
      }
      uint64_t v84 = v325;
      uint64_t v281 = *(void *)&v333[0];
      v301 = v343;
      if (v344 >> 1 == 1)
      {
        unint64_t v85 = 1;
      }
      else
      {
        uint64_t v88 = 0;
        unint64_t v85 = ((v344 - 4) >> 1) + 2;
        uint64_t v89 = 2 * (v344 >> 1) - 2;
        while (*((unsigned __int16 *)v343 + v88) < *((unsigned __int16 *)v343 + v88 + 1))
        {
          ++v88;
          v89 -= 2;
          if (!v89) {
            goto LABEL_219;
          }
        }
        unint64_t v85 = v88 + 1;
      }
      if (v85 != 1 || v66)
      {
LABEL_219:
        if (v66 != v85) {
          goto LABEL_233;
        }
      }
      unint64_t v298 = v66;
      uint64_t v177 = v58 + 168 * v9;
      char v180 = *(unsigned char *)(v177 + 48);
      float v178 = (unsigned char *)(v177 + 48);
      char v179 = v180;
      int v181 = *((_DWORD *)v178 - 8);
      v289 = v178;
      __int16 v292 = v178 - 32;
      if (v178[1]) {
        uint64_t v182 = *((unsigned int *)v178 - 8);
      }
      else {
        uint64_t v182 = 0;
      }
      long long v285 = v178 + 2;
      long long v287 = v178 + 1;
      if (v178[2]) {
        unint64_t v6 = *((unsigned int *)v178 - 8);
      }
      else {
        unint64_t v6 = 0;
      }
      unint64_t v184 = v63;
      long long v283 = a3;
      unsigned int v278 = v9;
      if (v63)
      {
        if (v63 > 0x555555555555555)
        {
LABEL_377:
          re::internal::assertLog((re::internal *)6, v183, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 48, v184);
          _os_crash();
          __break(1u);
LABEL_378:
          re::internal::assertLog((re::internal *)4, v186, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
          _os_crash();
          __break(1u);
        }
        if (!v185) {
          goto LABEL_378;
        }
        unint64_t v8 = (unint64_t *)v185;
        uint64_t v187 = v185;
        unint64_t v188 = v313 - 1;
        unint64_t v184 = v313;
        if (v313 != 1)
        {
          uint64_t v187 = v185;
          do
          {
            *(_OWORD *)(v187 + 16) = 0uLL;
            *(_OWORD *)(v187 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0uLL;
            *(_OWORD *)uint64_t v187 = 0uLL;
            *(_DWORD *)(v187 + 36) = 0x7FFFFFFF;
            v187 += 48;
            --v188;
          }
          while (v188);
        }
        *(_OWORD *)(v187 + 16) = 0u;
        *(_OWORD *)(v187 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0u;
        *(_OWORD *)uint64_t v187 = 0u;
        *(_DWORD *)(v187 + 36) = 0x7FFFFFFF;
      }
      else
      {
        unint64_t v8 = 0;
      }
      if (v298)
      {
        unint64_t v192 = 0;
        int v193 = 0;
        unint64_t v280 = (v181 << v179);
        unint64_t v275 = v182 + v280 + v6;
        do
        {
          unint64_t v194 = *((unsigned __int16 *)v301 + v192);
          unint64_t v195 = v194 - *((unsigned __int16 *)v301 + v192) / *v292 * (unint64_t)*v292;
          LODWORD(v329) = *((unsigned __int16 *)v301 + v192) % *v292;
          unint64_t v6 = *(unsigned __int16 *)(v305 + 2 * v192);
          unint64_t v196 = *(unsigned __int16 *)(v305 + 2 * (v193 + 1));
          unint64_t v311 = (v193 + 1);
          if (v294 <= v194)
          {
            if (v194 >= v280)
            {
              if (v182 + v280 <= v194)
              {
                if (v275 <= v194)
                {
                  uint64_t v270 = (_anonymous_namespace_ *)std::system_category();
                  long long v271 = v346;
                  long long v272 = v347;
                  *(unsigned char *)long long v283 = 0;
                  v283[1] = 0;
                  v283[2] = (unint64_t)v270;
                  *(_OWORD *)(v283 + 3) = v271;
                  *(_OWORD *)(v283 + 5) = v272;
                  float v174 = &v316[16];
                  goto LABEL_336;
                }
                uint64_t v197 = 3;
              }
              else
              {
                uint64_t v197 = 2;
              }
            }
            else
            {
              uint64_t v197 = 1;
            }
          }
          else
          {
            uint64_t v197 = 0;
          }
          if (v6 < v196)
          {
            unint64_t v198 = (unsigned __int16 *)(v281 + 2 * v6);
            unint64_t v19 = *v198;
            while (1)
            {
              float v199 = *(float *)(v84 + 4 * v6);
              if (v199 != 0.0) {
                break;
              }
LABEL_261:
              unsigned int v215 = v198[1];
              ++v198;
              unint64_t v214 = v215;
              BOOL v216 = v215 <= v19 || ++v6 >= v196;
              unint64_t v19 = v214;
              if (v216) {
                goto LABEL_272;
              }
            }
            if (v184 <= v19) {
              goto LABEL_349;
            }
            uint64_t v200 = &v8[6 * v19];
            unint64_t v201 = 0x94D049BB133111EBLL
                 * ((0xBF58476D1CE4E5B9 * (v195 ^ (v195 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v195 ^ (v195 >> 30))) >> 27));
            unint64_t v202 = v201 ^ (v201 >> 31);
            if (*v200)
            {
              uint64_t v203 = &v8[6 * v19];
              unint64_t v204 = v202 % *((unsigned int *)v203 + 6);
              uint64_t v205 = *(unsigned int *)(v203[1] + 4 * v204);
              if (v205 != 0x7FFFFFFF)
              {
                v206 = &v8[6 * v19];
                unint64_t v209 = v206[2];
                uint64_t v207 = (uint64_t *)(v206 + 2);
                unint64_t v208 = v209;
                uint64_t v210 = v205;
                if (*(_DWORD *)(v209 + 40 * v205 + 12) == v195)
                {
                  LODWORD(v210) = v205;
LABEL_255:
                  unint64_t v211 = (_DWORD *)(v208 + 40 * v210 + 16);
                  goto LABEL_260;
                }
                while (1)
                {
                  LODWORD(v210) = *(_DWORD *)(v208 + 40 * v210 + 8) & 0x7FFFFFFF;
                  if (v210 == 0x7FFFFFFF) {
                    break;
                  }
                  if (*(_DWORD *)(v208 + 40 * v210 + 12) == v195) {
                    goto LABEL_255;
                  }
                }
                long long v346 = 0uLL;
                LODWORD(v347) = 0;
                uint64_t v217 = *v207;
                while (*(_DWORD *)(v217 + 40 * v205 + 12) != v195)
                {
                  LODWORD(v205) = *(_DWORD *)(v217 + 40 * v205 + 8) & 0x7FFFFFFF;
                  if (v205 == 0x7FFFFFFF) {
                    goto LABEL_258;
                  }
                }
                unint64_t v211 = (_DWORD *)(v217 + 40 * v205 + 16);
LABEL_259:
                *unint64_t v211 = v195;
LABEL_260:
                *(float *)&v211[v197 + 1] = v199;
                goto LABEL_261;
              }
            }
            else
            {
              LODWORD(v204) = 0;
            }
            long long v346 = 0uLL;
            LODWORD(v347) = 0;
LABEL_258:
            unsigned int v212 = re::HashTable<unsigned int,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::addAsMove((uint64_t)v200, v204, v202, &v329, &v346);
            unint64_t v213 = &v8[6 * v19];
            ++*((_DWORD *)v213 + 10);
            unint64_t v211 = (_DWORD *)(v213[2] + 40 * v212 + 16);
            unint64_t v19 = *v198;
            unint64_t v195 = v329;
            unint64_t v184 = v313;
            goto LABEL_259;
          }
LABEL_272:
          unint64_t v192 = v311;
          int v193 = v311;
        }
        while (v298 > v311);
      }
      if (v184)
      {
        unint64_t v7 = 0;
        uint64_t v218 = v58 + 168 * v278;
        uint64_t v299 = (void *)(v218 + 40);
        v303 = (unint64_t *)(v218 + 32);
        unint64_t v9 = 136;
        unint64_t v30 = 40;
        do
        {
          unint64_t v3 = (_DWORD *)v317;
          if (v317 <= v7) {
            goto LABEL_367;
          }
          unint64_t v3 = (_DWORD *)*v303;
          if (*v303 <= v7) {
            goto LABEL_368;
          }
          unint64_t v219 = v318;
          uint64_t v220 = &v8[6 * v7];
          unsigned int v223 = *((_DWORD *)v220 + 7);
          v221 = (unsigned int *)v220 + 7;
          unint64_t v222 = v223;
          unint64_t v224 = re::StringID::operator=((unint64_t *)(v318 + 136 * v7), (uint64_t *)(*v299 + 16 * v7));
          if (v223)
          {
            unint64_t v225 = v219 + 136 * v7;
            unint64_t v6 = 136;
            if (*v289)
            {
            }
            unint64_t v307 = v219;
            if (*v287)
            {
            }
            if (*v285)
            {
            }
            *(void *)&v332[2] = 0;
            memset(v330, 0, sizeof(v330));
            unint64_t v228 = *v221;
            if (v228) {
              unint64_t v227 = (_anonymous_namespace_ *)re::DynamicArray<re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*>::setCapacity(v330, v228);
            }
            unint64_t v229 = v7;
            unint64_t v230 = &v8[6 * v7];
            unsigned int v233 = *((_DWORD *)v230 + 8);
            unint64_t v232 = (unsigned int *)(v230 + 4);
            uint64_t v231 = v233;
            unint64_t v312 = v229;
            uint64_t v234 = 0;
            if (v233)
            {
              unsigned int v235 = (int *)(v8[6 * v229 + 2] + 8);
              while (1)
              {
                int v236 = *v235;
                v235 += 10;
                if (v236 < 0) {
                  break;
                }
                if (v231 == ++v234)
                {
                  LODWORD(v234) = v231;
                  break;
                }
              }
            }
            if (v231 == v234)
            {
              unint64_t v237 = *(unsigned int ***)&v332[2];
              unint64_t v238 = *(void *)&v330[16];
            }
            else
            {
              uint64_t v239 = v234;
              unint64_t v240 = &v8[6 * v312 + 2];
              unint64_t v238 = *(void *)&v330[16];
              unsigned int v241 = v231;
              do
              {
                unint64_t v6 = *v240;
                if (v238 >= *(void *)&v330[8])
                {
                  if (*(void *)&v330[8] < v238 + 1)
                  {
                    if (*(void *)v330)
                    {
                      unint64_t v242 = 2 * *(void *)&v330[8];
                      if (!*(void *)&v330[8]) {
                        unint64_t v242 = 8;
                      }
                      if (v242 <= v238 + 1) {
                        unint64_t v243 = v238 + 1;
                      }
                      else {
                        unint64_t v243 = v242;
                      }
                      unint64_t v227 = (_anonymous_namespace_ *)re::DynamicArray<re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*>::setCapacity(v330, v243);
                    }
                    else
                    {
                      unint64_t v227 = (_anonymous_namespace_ *)re::DynamicArray<re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*>::setCapacity(v330, v238 + 1);
                      ++*(_DWORD *)&v330[24];
                    }
                  }
                  unint64_t v238 = *(void *)&v330[16];
                  unsigned int v241 = *v232;
                }
                unint64_t v237 = *(unsigned int ***)&v332[2];
                *(void *)(*(void *)&v332[2] + 8 * v238++) = v6 + 40 * v239 + 16;
                *(void *)&v330[16] = v238;
                ++*(_DWORD *)&v330[24];
                if (v241 <= (int)v234 + 1) {
                  unsigned int v244 = v234 + 1;
                }
                else {
                  unsigned int v244 = v241;
                }
                while (1)
                {
                  uint64_t v239 = (v234 + 1);
                  if (v244 - 1 == v234) {
                    break;
                  }
                  LODWORD(v234) = v234 + 1;
                  unsigned int v245 = v239;
                  if ((*(_DWORD *)(*v240 + 40 * v239 + 8) & 0x80000000) != 0) {
                    goto LABEL_312;
                  }
                }
                unsigned int v245 = v244;
LABEL_312:
                LODWORD(v234) = v245;
              }
              while (v231 != v245);
            }
            unint64_t v246 = 126 - 2 * __clz(v238);
            if (v238) {
              uint64_t v247 = v246;
            }
            else {
              uint64_t v247 = 0;
            }
            std::__introsort<std::_ClassicAlgPolicy,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned short>(re::DeformationModelData const&,unsigned int)::{lambda(re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned short>(re::DeformationModelData const&,unsigned int)::DeltaValues const*,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned short>(re::DeformationModelData const&,unsigned int)::DeltaValues const*)#1} &,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned short>(re::DeformationModelData const&,unsigned int)::DeltaValues const**,false>(v237, &v237[v238], v247, 1);
            unint64_t v9 = 136;
            if (v238)
            {
              unint64_t v7 = 0;
              int v248 = (void *)(v307 + 136 * v312);
              int v249 = v248 + 4;
              unint64_t v3 = (_DWORD *)v248[3];
              v250 = v248 + 6;
              BOOL v251 = v248 + 7;
              BOOL v252 = v248 + 9;
              unint64_t v253 = v248 + 10;
              v254 = v248 + 12;
              uint64_t v255 = v248 + 13;
              uint64_t v256 = v248 + 15;
              unsigned int v257 = v248 + 16;
              while (1)
              {
                if (v3 == (_DWORD *)v7) {
                  goto LABEL_353;
                }
                unint64_t v258 = v237[v7];
                *(_DWORD *)(*v249 + 4 * v7) = *v258;
                unint64_t v6 = *v250;
                if (*v250 <= v7) {
                  break;
                }
                *(_DWORD *)(*v251 + 4 * v7) = v258[1];
                if (*v289)
                {
                  unint64_t v6 = *v252;
                  if (*v252 <= v7) {
                    goto LABEL_357;
                  }
                  *(_DWORD *)(*v253 + 4 * v7) = v258[2];
                }
                if (*v287)
                {
                  unint64_t v6 = *v254;
                  if (*v254 <= v7) {
                    goto LABEL_359;
                  }
                  *(_DWORD *)(*v255 + 4 * v7) = v258[3];
                }
                if (*v285)
                {
                  unint64_t v6 = *v256;
                  if (*v256 <= v7) {
                    goto LABEL_361;
                  }
                  *(_DWORD *)(*v257 + 4 * v7) = v258[4];
                }
                if (v238 == ++v7) {
                  goto LABEL_330;
                }
              }
LABEL_355:
              uint64_t v329 = 0;
              long long v349 = 0u;
              long long v350 = 0u;
              long long v347 = 0u;
              long long v348 = 0u;
              long long v346 = 0u;
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              *(_DWORD *)v335 = 136315906;
              *(void *)&v335[4] = "operator[]";
              __int16 v336 = 1024;
              int v337 = 468;
              __int16 v338 = 2048;
              unint64_t v339 = v7;
              __int16 v340 = 2048;
              unint64_t v341 = v6;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_356:
              uint64_t v329 = 0;
              long long v349 = 0u;
              long long v350 = 0u;
              long long v347 = 0u;
              long long v348 = 0u;
              long long v346 = 0u;
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              *(_DWORD *)v335 = 136315906;
              *(void *)&v335[4] = "operator[]";
              __int16 v336 = 1024;
              int v337 = 468;
              __int16 v338 = 2048;
              unint64_t v339 = v7;
              __int16 v340 = 2048;
              unint64_t v341 = v9;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_357:
              uint64_t v329 = 0;
              long long v349 = 0u;
              long long v350 = 0u;
              long long v347 = 0u;
              long long v348 = 0u;
              long long v346 = 0u;
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              *(_DWORD *)v335 = 136315906;
              *(void *)&v335[4] = "operator[]";
              __int16 v336 = 1024;
              int v337 = 468;
              __int16 v338 = 2048;
              unint64_t v339 = v7;
              __int16 v340 = 2048;
              unint64_t v341 = v6;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_358:
              uint64_t v329 = 0;
              long long v349 = 0u;
              long long v350 = 0u;
              long long v347 = 0u;
              long long v348 = 0u;
              long long v346 = 0u;
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              *(_DWORD *)v335 = 136315906;
              *(void *)&v335[4] = "operator[]";
              __int16 v336 = 1024;
              int v337 = 468;
              __int16 v338 = 2048;
              unint64_t v339 = v7;
              __int16 v340 = 2048;
              unint64_t v341 = v9;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_359:
              uint64_t v329 = 0;
              long long v349 = 0u;
              long long v350 = 0u;
              long long v347 = 0u;
              long long v348 = 0u;
              long long v346 = 0u;
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              *(_DWORD *)v335 = 136315906;
              *(void *)&v335[4] = "operator[]";
              __int16 v336 = 1024;
              int v337 = 468;
              __int16 v338 = 2048;
              unint64_t v339 = v7;
              __int16 v340 = 2048;
              unint64_t v341 = v6;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_360:
              uint64_t v329 = 0;
              long long v349 = 0u;
              long long v350 = 0u;
              long long v347 = 0u;
              long long v348 = 0u;
              long long v346 = 0u;
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              *(_DWORD *)v335 = 136315906;
              *(void *)&v335[4] = "operator[]";
              __int16 v336 = 1024;
              int v337 = 468;
              __int16 v338 = 2048;
              unint64_t v339 = v7;
              __int16 v340 = 2048;
              unint64_t v341 = v9;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_361:
              uint64_t v329 = 0;
              long long v349 = 0u;
              long long v350 = 0u;
              long long v347 = 0u;
              long long v348 = 0u;
              long long v346 = 0u;
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              *(_DWORD *)v335 = 136315906;
              *(void *)&v335[4] = "operator[]";
              __int16 v336 = 1024;
              int v337 = 468;
              __int16 v338 = 2048;
              unint64_t v339 = v7;
              __int16 v340 = 2048;
              unint64_t v341 = v6;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_362:
              *(void *)&long long v320 = 0;
              long long v349 = 0u;
              long long v350 = 0u;
              long long v347 = 0u;
              long long v348 = 0u;
              long long v346 = 0u;
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              LODWORD(v333[0]) = 136315906;
              *(void *)((char *)v333 + 4) = "operator[]";
              WORD6(v333[0]) = 1024;
              *(_DWORD *)((char *)v333 + 14) = 468;
              WORD1(v333[1]) = 2048;
              *(void *)((char *)&v333[1] + 4) = v30;
              WORD6(v333[1]) = 2048;
              *(void *)((char *)&v333[1] + 14) = v8;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
              goto LABEL_363;
            }
LABEL_330:
            if (v237 && *(void *)v330) {
              (*(void (**)(void, unsigned int **, unsigned char *, unsigned char *, unsigned char *))(**(void **)v330 + 40))(*(void *)v330, v237, v289, v287, v285);
            }
            unint64_t v7 = v312;
          }
          ++v7;
        }
        while (v7 != v313);
      }
      unint64_t v259 = *(void *)v316;
      unint64_t v260 = v317;
      unint64_t v261 = v318;
      unint64_t v262 = v319;
      *(unsigned char *)long long v283 = 1;
      v283[1] = v259;
      *(void *)&long long v346 = 0;
      *((void *)&v346 + 1) = "";
      long long v263 = *(_OWORD *)&v316[8];
      *(void *)v316 = 0;
      *(void *)&v316[8] = "";
      unint64_t v317 = 0;
      unint64_t v318 = 0;
      *(void *)&v316[16] = 0;
      *((_OWORD *)v283 + 1) = v263;
      long long v347 = 0uLL;
      v283[4] = v260;
      v283[5] = v261;
      *(void *)&long long v348 = 0;
      *((void *)&v348 + 1) = v262;
      v283[6] = v262;
      re::FixedArray<re::BlendShapeDefinition>::deinit(&v347);
      re::StringID::destroyString((re::StringID *)&v346);
      float v174 = &v316[16];
LABEL_336:
      if (v313)
      {
        uint64_t v264 = 0;
        do
        {
          v176.n128_f64[0] = re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)&v8[v264]);
          v264 += 6;
        }
        while (6 * v313 != v264);
LABEL_339:
      }
      goto LABEL_340;
    }
LABEL_67:
    long long v67 = (_anonymous_namespace_ *)std::system_category();
    long long v68 = "Deformation model has mismatched buffer and name counts";
    goto LABEL_68;
  }
  uint64_t v27 = *(void **)this;
  if (!v27) {
    goto LABEL_66;
  }
  unint64_t v6 = v27[2];
  if (v6 != v27[8]) {
    goto LABEL_67;
  }
  if (v6 <= v9) {
    goto LABEL_369;
  }
  uint64_t v28 = v27[3];
  re::ReadOnlyCPUAccessibleBufferSliceContent::make((void *)(v28 + 168 * v9 + 72), (uint64_t)&v342);
  if (!(_BYTE)v342)
  {
    uint64_t v71 = (_anonymous_namespace_ *)std::system_category();
    long long v72 = v346;
    long long v73 = v347;
    *(unsigned char *)a3 = 0;
    a3[1] = 0;
    a3[2] = (unint64_t)v71;
    *(_OWORD *)(a3 + 3) = v72;
    *(_OWORD *)(a3 + 5) = v73;
    goto LABEL_343;
  }
  long long v283 = a3;
  unint64_t v19 = *(void *)(v28 + 168 * v9);
  unint64_t v324 = 0;
  *(void *)&long long v325 = "";
  HIDWORD(v328) = 0;
  v326 = 0;
  unint64_t v327 = 0;
  *((void *)&v325 + 1) = 0;
  LOBYTE(v328) = 0;
  unint64_t v7 = v27[8];
  if (v7 <= v9) {
    goto LABEL_370;
  }
  unint64_t v29 = re::StringID::operator=(&v324, (uint64_t *)(v27[9] + 16 * v9));
  LOBYTE(v328) = 2;
  unint64_t v6 = *(unsigned int *)(v28 + 168 * v9 + 12);
  HIDWORD(v328) = v6 / 3;
  if (!v19)
  {
LABEL_53:
    unint64_t v53 = v324;
    uint64_t v54 = v326;
    unint64_t v55 = v327;
    unint64_t v56 = v328;
    *(unsigned char *)long long v283 = 1;
    v283[1] = v53;
    *(void *)&long long v346 = 0;
    *((void *)&v346 + 1) = "";
    long long v57 = v325;
    unint64_t v324 = 0;
    *(void *)&long long v325 = "";
    v326 = 0;
    unint64_t v327 = 0;
    *((void *)&v325 + 1) = 0;
    *((_OWORD *)v283 + 1) = v57;
    long long v347 = 0uLL;
    v283[4] = (unint64_t)v54;
    v283[5] = v55;
    *(void *)&long long v348 = 0;
    *((void *)&v348 + 1) = v56;
    v283[6] = v56;
    re::FixedArray<re::BlendShapeDefinition>::deinit(&v347);
    re::StringID::destroyString((re::StringID *)&v346);
    re::FixedArray<re::BlendShapeDefinition>::deinit((void *)&v325 + 1);
    re::StringID::destroyString((re::StringID *)&v324);
    goto LABEL_343;
  }
  unint64_t v30 = 0;
  uint64_t v12 = v343;
  uint64_t v31 = v28 + 168 * v9;
  v308 = (unint64_t *)(v31 + 32);
  unint64_t v313 = ((v19 + 3) & 0x3FFFFFFFFFFFFFFCLL) * v6;
  v300 = v343;
  v304 = (void *)(v31 + 40);
  unint64_t v293 = (unsigned char *)(v31 + 49);
  unint64_t v295 = (unsigned char *)(v31 + 48);
  __int16 v290 = (unsigned char *)(v31 + 50);
  unint64_t v32 = (v19 + 3) >> 2;
  unint64_t v9 = 16 * v32;
  unint64_t v3 = &v343[4 * v6 * v32];
  unint64_t v7 = 136;
  while (1)
  {
    unint64_t v8 = v326;
    if ((unint64_t)v326 <= v30) {
      goto LABEL_362;
    }
    unint64_t v8 = (unint64_t *)*v308;
    if (*v308 <= v30)
    {
LABEL_363:
      *(void *)&long long v320 = 0;
      long long v349 = 0u;
      long long v350 = 0u;
      long long v347 = 0u;
      long long v348 = 0u;
      long long v346 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      LODWORD(v333[0]) = 136315906;
      *(void *)((char *)v333 + 4) = "operator[]";
      WORD6(v333[0]) = 1024;
      *(_DWORD *)((char *)v333 + 14) = 476;
      WORD1(v333[1]) = 2048;
      *(void *)((char *)&v333[1] + 4) = v30;
      WORD6(v333[1]) = 2048;
      *(void *)((char *)&v333[1] + 14) = v8;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_364;
    }
    unint64_t v33 = v327;
    uint64_t v34 = re::StringID::operator=((unint64_t *)(v327 + 136 * v30), (uint64_t *)(*v304 + 16 * v30));
    a3 = v34 + 5;
    if (v6)
    {
      uint64_t v36 = 0;
      unint64_t v37 = v33 + 136 * v30;
      uint64_t v38 = *(void *)(v37 + 48);
      unsigned __int16 v39 = (void *)(v37 + 56);
      unint64_t v40 = v12;
      while (v38 != v36)
      {
        *(_DWORD *)(*v39 + 4 * v36++) = *v40;
        unint64_t v40 = (_DWORD *)((char *)v40 + v9);
        if (v6 == v36) {
          goto LABEL_35;
        }
      }
      *(void *)&long long v320 = 0;
      long long v349 = 0u;
      long long v350 = 0u;
      long long v347 = 0u;
      long long v348 = 0u;
      long long v346 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      LODWORD(v333[0]) = 136315906;
      *(void *)((char *)v333 + 4) = "operator[]";
      WORD6(v333[0]) = 1024;
      *(_DWORD *)((char *)v333 + 14) = 468;
      WORD1(v333[1]) = 2048;
      *(void *)((char *)&v333[1] + 4) = v38;
      WORD6(v333[1]) = 2048;
      *(void *)((char *)&v333[1] + 14) = v38;
      _os_log_send_and_compose_impl();
      uint64_t v20 = (_anonymous_namespace_ *)_os_crash_msg();
      __break(1u);
      goto LABEL_93;
    }
LABEL_35:
    unint64_t v8 = (unint64_t *)&v300[v30 + v313];
    if (*v295)
    {
      if (v6)
      {
        uint64_t v41 = 0;
        unint64_t v42 = v33 + 136 * v30;
        uint64_t v43 = *(void *)(v42 + 72);
        uint64_t v44 = (void *)(v42 + 80);
        float32x4_t v45 = v3;
        while (v43 != v41)
        {
          *(_DWORD *)(*v44 + 4 * v41++) = *v45;
          float32x4_t v45 = (_DWORD *)((char *)v45 + v9);
          if (v6 == v41) {
            goto LABEL_40;
          }
        }
        *(void *)&long long v320 = 0;
        long long v349 = 0u;
        long long v350 = 0u;
        long long v347 = 0u;
        long long v348 = 0u;
        long long v346 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        LODWORD(v333[0]) = 136315906;
        *(void *)((char *)v333 + 4) = "operator[]";
        WORD6(v333[0]) = 1024;
        *(_DWORD *)((char *)v333 + 14) = 468;
        WORD1(v333[1]) = 2048;
        *(void *)((char *)&v333[1] + 4) = v43;
        WORD6(v333[1]) = 2048;
        *(void *)((char *)&v333[1] + 14) = v43;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_346;
      }
LABEL_40:
      unint64_t v8 = (unint64_t *)((char *)v8 + 4 * v313);
    }
    if (*v293)
    {
      if (v6)
      {
        uint64_t v46 = 0;
        unint64_t v47 = v33 + 136 * v30;
        uint64_t v43 = *(void *)(v47 + 96);
        unint64_t v48 = (void *)(v47 + 104);
        unsigned int v49 = v8;
        while (v43 != v46)
        {
          *(_DWORD *)(*v48 + 4 * v46++) = *(_DWORD *)v49;
          unsigned int v49 = (unint64_t *)((char *)v49 + v9);
          if (v6 == v46) {
            goto LABEL_46;
          }
        }
LABEL_346:
        *(void *)&long long v320 = 0;
        long long v349 = 0u;
        long long v350 = 0u;
        long long v347 = 0u;
        long long v348 = 0u;
        long long v346 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        LODWORD(v333[0]) = 136315906;
        *(void *)((char *)v333 + 4) = "operator[]";
        WORD6(v333[0]) = 1024;
        *(_DWORD *)((char *)v333 + 14) = 468;
        WORD1(v333[1]) = 2048;
        *(void *)((char *)&v333[1] + 4) = v43;
        WORD6(v333[1]) = 2048;
        *(void *)((char *)&v333[1] + 14) = v43;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_347;
      }
LABEL_46:
      unint64_t v8 = (unint64_t *)((char *)v8 + 4 * v313);
    }
    if (*v290)
    {
      if (v6) {
        break;
      }
    }
LABEL_52:
    ++v30;
    ++v12;
    ++v3;
    if (v30 == v19) {
      goto LABEL_53;
    }
  }
  uint64_t v50 = 0;
  unint64_t v51 = v33 + 136 * v30;
  uint64_t v43 = *(void *)(v51 + 120);
  float32x2_t v52 = (void *)(v51 + 128);
  while (v43 != v50)
  {
    *(_DWORD *)(*v52 + 4 * v50++) = *(_DWORD *)v8;
    unint64_t v8 = (unint64_t *)((char *)v8 + v9);
    if (v6 == v50) {
      goto LABEL_52;
    }
  }
LABEL_347:
  *(void *)&long long v320 = 0;
  long long v349 = 0u;
  long long v350 = 0u;
  long long v347 = 0u;
  long long v348 = 0u;
  long long v346 = 0u;
  unint64_t v109 = &_os_log_internal;
  os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
  LODWORD(v333[0]) = 136315906;
  *(void *)((char *)v333 + 4) = "operator[]";
  WORD6(v333[0]) = 1024;
  *(_DWORD *)((char *)v333 + 14) = 468;
  WORD1(v333[1]) = 2048;
  *(void *)((char *)&v333[1] + 4) = v43;
  WORD6(v333[1]) = 2048;
  *(void *)((char *)&v333[1] + 14) = v43;
  _os_log_send_and_compose_impl();
  _os_crash_msg();
  __break(1u);
LABEL_348:
  *(void *)v335 = 0;
  long long v349 = 0u;
  long long v350 = 0u;
  long long v347 = 0u;
  long long v348 = 0u;
  long long v346 = 0u;
  unint64_t v265 = v98;
  os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
  *(_DWORD *)v330 = 136315906;
  *(void *)&v330[4] = "operator[]";
  *(_WORD *)&v330[12] = 1024;
  *(_DWORD *)&v330[14] = 468;
  *(_WORD *)&v330[18] = 2048;
  *(void *)&v330[20] = v109;
  __int16 v331 = 2048;
  *(void *)v332 = v265;
  _os_log_send_and_compose_impl();
  _os_crash_msg();
  __break(1u);
LABEL_349:
  *(void *)v335 = 0;
  long long v349 = 0u;
  long long v350 = 0u;
  long long v347 = 0u;
  long long v348 = 0u;
  long long v346 = 0u;
  unint64_t v266 = v184;
  os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
  *(_DWORD *)v330 = 136315906;
  *(void *)&v330[4] = "operator[]";
  *(_WORD *)&v330[12] = 1024;
  *(_DWORD *)&v330[14] = 468;
  *(_WORD *)&v330[18] = 2048;
  *(void *)&v330[20] = v19;
  __int16 v331 = 2048;
  *(void *)v332 = v266;
  _os_log_send_and_compose_impl();
  _os_crash_msg();
  __break(1u);
LABEL_350:
  uint64_t v267 = (_anonymous_namespace_ *)std::system_category();
  long long v268 = v346;
  long long v269 = v347;
  *(unsigned char *)long long v283 = 0;
  v283[1] = 0;
  v283[2] = (unint64_t)v267;
  *(_OWORD *)(v283 + 3) = v268;
  *(_OWORD *)(v283 + 5) = v269;
LABEL_212:
  float v174 = v276;
  if (v313)
  {
    uint64_t v175 = 0;
    do
    {
      v176.n128_f64[0] = re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)&v8[v175]);
      v175 += 6;
    }
    while (6 * v313 != v175);
    goto LABEL_339;
  }
LABEL_340:
  re::FixedArray<re::BlendShapeDefinition>::deinit(v174);
  re::StringID::destroyString((re::StringID *)v316);
LABEL_341:
  re::ReadOnlyCPUAccessibleBufferSliceContent::~ReadOnlyCPUAccessibleBufferSliceContent((re::ReadOnlyCPUAccessibleBufferSliceContent *)&v320);
  re::ReadOnlyCPUAccessibleBufferSliceContent::~ReadOnlyCPUAccessibleBufferSliceContent((re::ReadOnlyCPUAccessibleBufferSliceContent *)v333);
LABEL_342:
  re::Result<re::ReadOnlyCPUAccessibleBufferSliceContent,re::DetailedError>::~Result(&v324);
LABEL_343:
  re::Result<re::ReadOnlyCPUAccessibleBufferSliceContent,re::DetailedError>::~Result(&v342);
  return (re::DynamicString *)re::Result<re::ReadOnlyCPUAccessibleBufferSliceContent,re::DetailedError>::~Result(v314);
}

uint64_t re::BlendShapeModelUtil::computeBlendShapeModelSizeExcludingMetalBuffers(re::BlendShapeModelUtil *this, const DeformationModelData *a2)
{
  uint64_t v2 = *(void **)this;
  if (!*(void *)this) {
    return 0;
  }
  uint64_t v3 = v2[2];
  uint64_t v4 = 168 * v3 + 80;
  if (v3)
  {
    uint64_t v5 = 0;
    uint64_t v6 = v2[3];
    do
    {
      uint64_t v7 = *(void *)(v6 + 168 * v5 + 32);
      v4 += 16 * v7;
      if (v7)
      {
        unint64_t v8 = (const char **)(*(void *)(v6 + 168 * v5 + 40) + 8);
        do
        {
          if (*(unsigned char *)(v8 - 1)) {
            size_t v9 = strlen(*v8) + 1;
          }
          else {
            size_t v9 = 0;
          }
          v4 += v9;
          v8 += 2;
          --v7;
        }
        while (v7);
      }
      ++v5;
    }
    while (v5 != v3);
  }
  uint64_t v10 = v2[8];
  uint64_t v11 = v4 + 4 * v2[5] + 16 * v10;
  if (v10)
  {
    uint64_t v12 = (const char **)(v2[9] + 8);
    do
    {
      if (*(unsigned char *)(v12 - 1)) {
        size_t v13 = strlen(*v12) + 1;
      }
      else {
        size_t v13 = 0;
      }
      v11 += v13;
      v12 += 2;
      --v10;
    }
    while (v10);
  }
  return v11;
}

void re::BlendShapeDeformer::~BlendShapeDeformer(re::BlendShapeDeformer *this)
{
  re::BlendShapeDeformer::~BlendShapeDeformer(this);
  JUMPOUT(0x237DBCBD0);
}

{
  void *v2;
  void *v3;
  uint64_t i;
  void *v5;
  void *v6;

  uint64_t v2 = (void *)*((void *)this + 6);
  if (v2)
  {

    *((void *)this + 6) = 0;
  }
  uint64_t v3 = (void *)*((void *)this + 5);
  if (v3)
  {

    *((void *)this + 5) = 0;
  }
  for (unint64_t i = 32; i != 16; i -= 8)
  {
    uint64_t v5 = *(void **)((char *)this + i);
    if (v5)
    {

      *(void *)((char *)this + i) = 0;
    }
  }
  do
  {
    uint64_t v6 = *(void **)((char *)this + i);
    if (v6)
    {

      *(void *)((char *)this + i) = 0;
    }
    i -= 8;
  }
  while (i);
}

void re::anonymous namespace'::allocateBlendShapeBufferData(void *a1, uint64_t a2, unint64_t a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t v6 = a6;
  uint64_t v65 = *MEMORY[0x263EF8340];
  if (!a1)
  {
    unint64_t v10 = *(void *)(a2 + 16);
    if (v10 > a3)
    {
      uint64_t v30 = 0;
      uint64_t v31 = 0;
      uint64_t v32 = 0;
      uint64_t v33 = *(void *)(a2 + 24);
      do
      {
        if (v30 == 1) {
          v31 += a6[1];
        }
        else {
          v32 += a6[v30];
        }
        ++v30;
      }
      while (v30 != 6);
      uint64_t v34 = (void *)(v33 + 184 * a3);
      __int16 v35 = re::globalAllocators(0);
      re::FixedArray<BOOL>::init<>(v34 + 5, v35[2], v31);
      unint64_t v37 = re::globalAllocators(v36);
      re::FixedArray<BOOL>::init<>(v34 + 8, v37[2], v32);
      uint64_t v38 = 0;
      uint64_t v39 = 0;
      uint64_t v40 = 0;
      uint64_t v41 = v6;
      do
      {
        uint64_t v43 = *a5++;
        uint64_t v42 = v43;
        if (v43)
        {
          if (v38 == 2)
          {
            a4[2] = v34[7] + v40;
            a4[3] = v42;
            v40 += v6[1];
          }
          else
          {
            float32x4_t v45 = &a4[v38];
            *float32x4_t v45 = v34[10] + v39;
            v45[1] = v42;
            v39 += *v41;
          }
        }
        else
        {
          uint64_t v44 = &a4[v38];
          *uint64_t v44 = 0;
          v44[1] = 0;
        }
        v38 += 2;
        ++v41;
      }
      while (v38 != 12);
      uint64_t v46 = a4[1];
      unint64_t v47 = (void *)(v33 + 184 * a3);
      v47[13] = *a4;
      v47[14] = v46;
      uint64_t v48 = a4[3];
      v47[11] = a4[2];
      v47[12] = v48;
      uint64_t v49 = a4[5];
      v47[15] = a4[4];
      v47[16] = v49;
      uint64_t v50 = a4[7];
      v47[17] = a4[6];
      v47[18] = v50;
      uint64_t v51 = a4[9];
      v47[19] = a4[8];
      v47[20] = v51;
      uint64_t v52 = a4[11];
      v47[21] = a4[10];
      v47[22] = v52;
      return;
    }
LABEL_35:
    long long v62 = 0u;
    long long v63 = 0u;
    long long v60 = 0u;
    long long v61 = 0u;
    *(_OWORD *)unint64_t v59 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v54 = 136315906;
    *(void *)&v54[4] = "operator[]";
    *(_WORD *)&v54[12] = 1024;
    *(_DWORD *)&v54[14] = 468;
    __int16 v55 = 2048;
    unint64_t v56 = a3;
    __int16 v57 = 2048;
    unint64_t v58 = v10;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  unint64_t v10 = *(void *)(a2 + 16);
  if (v10 <= a3)
  {
    long long v62 = 0u;
    long long v63 = 0u;
    long long v60 = 0u;
    long long v61 = 0u;
    *(_OWORD *)unint64_t v59 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v54 = 136315906;
    *(void *)&v54[4] = "operator[]";
    *(_WORD *)&v54[12] = 1024;
    *(_DWORD *)&v54[14] = 468;
    __int16 v55 = 2048;
    unint64_t v56 = a3;
    __int16 v57 = 2048;
    unint64_t v58 = v10;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_35;
  }
  uint64_t v11 = 0;
  uint64_t v12 = *(void *)(a2 + 24);
  int64x2_t v13 = 0uLL;
  do
  {
    int64x2_t v13 = vaddq_s64(*(int64x2_t *)&a6[v11], v13);
    v11 += 2;
  }
  while (v11 != 6);
  id v14 = objc_msgSend(a1, sel_newBufferWithLength_options_, vaddvq_s64(v13), 0);
  v59[0] = v14;
  LODWORD(v59[1]) = 0;
  HIDWORD(v59[1]) = objc_msgSend(v14, sel_length);
  uint64_t v53 = v12;
  uint64_t v15 = v12 + 168 * a3;
  char v16 = (id *)(v15 + 56);
  NS::SharedPtr<MTL::Texture>::operator=((void **)(v15 + 56), v59);
  *(id *)(v15 + 64) = v59[1];
  unint64_t v17 = (unsigned int *)(v15 + 64);
  if (v59[0])
  {

    v59[0] = 0;
  }
  if (v14) {

  }
  uint64_t v18 = *v17;
  id v19 = *v16;
  uint64_t v20 = 0;
  unint64_t v21 = (char *)objc_msgSend(*v16, sel_contents) + *v17;
  long long v63 = 0u;
  long long v64 = 0u;
  long long v61 = 0u;
  long long v62 = 0u;
  *(_OWORD *)unint64_t v59 = 0u;
  long long v60 = 0u;
  do
  {
    uint64_t v22 = *a5;
    *(void *)uint64_t v54 = v19;
    *(void *)&v54[8] = __PAIR64__(v22, v18);
    NS::SharedPtr<MTL::Texture>::operator=(&v59[v20], (void **)v54);
    uint64_t v23 = *(void **)v54;
    v59[v20 + 1] = *(id *)&v54[8];
    if (v23) {

    }
    uint64_t v24 = *a5++;
    long long v25 = &a4[v20];
    *long long v25 = &v21[v18];
    v25[1] = v24;
    uint64_t v26 = *v6++;
    v18 += v26;
    v20 += 2;
  }
  while (v20 != 12);
  uint64_t v27 = v53 + 168 * a3;
  NS::SharedPtr<MTL::Texture>::operator=((void **)(v27 + 88), v59);
  *(id *)(v27 + re::DynamicArray<re::RigComponentConstraint>::deinit((uint64_t)this + 96) = v59[1];
  NS::SharedPtr<MTL::Texture>::operator=((void **)(v27 + 72), (void **)&v60);
  *(void *)(v27 + 80) = *((void *)&v60 + 1);
  NS::SharedPtr<MTL::Texture>::operator=((void **)(v27 + 104), (void **)&v61);
  *(void *)(v27 + 112) = *((void *)&v61 + 1);
  NS::SharedPtr<MTL::Texture>::operator=((void **)(v27 + 120), (void **)&v62);
  *(void *)(v27 + 128) = *((void *)&v62 + 1);
  NS::SharedPtr<MTL::Texture>::operator=((void **)(v27 + 136), (void **)&v63);
  *(void *)(v27 + 144) = *((void *)&v63 + 1);
  NS::SharedPtr<MTL::Texture>::operator=((void **)(v27 + 152), (void **)&v64);
  *(void *)(v27 + 160) = *((void *)&v64 + 1);
  for (uint64_t i = 10; i != -2; i -= 2)
  {
    id v29 = v59[i];
    if (v29)
    {

      v59[i] = 0;
    }
  }
  if (v19) {
}
  }

void re::internal::Callable<re::BlendShapeDeformer::allocateBuffers(re::FrameContext &,re::DeformationExecutionMode,re::DeformationParameters &,re::BufferInitializationOptions &,re::DynamicArray<re::PostDeformationBlit> &,re::DynamicArray<re::EventWait> &)::$_0,void ()(void *)>::~Callable()
{
}

uint64_t re::internal::Callable<re::BlendShapeDeformer::allocateBuffers(re::FrameContext &,re::DeformationExecutionMode,re::DeformationParameters &,re::BufferInitializationOptions &,re::DynamicArray<re::PostDeformationBlit> &,re::DynamicArray<re::EventWait> &)::$_0,void ()(void *)>::operator()(uint64_t a1, uint64_t **a2)
{
  uint64_t v2 = *a2;
  re::FixedArray<CoreIKTransform>::deinit(*a2 + 3);
  return re::FixedArray<CoreIKTransform>::deinit(v2);
}

void *re::internal::Callable<re::BlendShapeDeformer::allocateBuffers(re::FrameContext &,re::DeformationExecutionMode,re::DeformationParameters &,re::BufferInitializationOptions &,re::DynamicArray<re::PostDeformationBlit> &,re::DynamicArray<re::EventWait> &)::$_0,void ()(void *)>::cloneInto(uint64_t a1, void *a2)
{
  BOOL result = a2;
  *a2 = &unk_26E7106F8;
  return result;
}

void *re::internal::Callable<re::BlendShapeDeformer::allocateBuffers(re::FrameContext &,re::DeformationExecutionMode,re::DeformationParameters &,re::BufferInitializationOptions &,re::DynamicArray<re::PostDeformationBlit> &,re::DynamicArray<re::EventWait> &)::$_0,void ()(void *)>::moveInto(uint64_t a1, void *a2)
{
  BOOL result = a2;
  *a2 = &unk_26E7106F8;
  return result;
}

uint64_t re::internal::Callable<re::BlendShapeDeformer::allocateBuffers(re::FrameContext &,re::DeformationExecutionMode,re::DeformationParameters &,re::BufferInitializationOptions &,re::DynamicArray<re::PostDeformationBlit> &,re::DynamicArray<re::EventWait> &)::$_0,void ()(void *)>::size()
{
  return 16;
}

void re::FixedArray<re::FrameContextBuffer>::init<>(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  *a1 = a2;
  a1[1] = a3;
  if (!a3) {
    return;
  }
  if (a3 >= 0xAAAAAAAAAAAAAABLL)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 24, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v5 = 24 * a3;
  uint64_t v6 = (void *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a2 + 32))(a2, 24 * a3, 8);
  a1[2] = (uint64_t)v6;
  if (!v6)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v7, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    _os_crash();
    __break(1u);
    return;
  }
  unint64_t v8 = v6;
  if (a3 != 1)
  {
    bzero(v6, v5 - 24);
    unint64_t v8 = (void *)((char *)v8 + v5 - 24);
  }
  *unint64_t v8 = 0;
  v8[1] = 0;
  char v8[2] = 0;
}

void _ZNSt3__110__function6__funcIZN2re20DeformationModelData6createINS2_18BlendShapeDeformerENS2_22BlendShapeModelPayloadEJEEEPT0_PNS2_9AllocatorEDpOT1_EUlPvE_NS_9allocatorISF_EEFvSE_EED0Ev()
{
}

void *_ZNKSt3__110__function6__funcIZN2re20DeformationModelData6createINS2_18BlendShapeDeformerENS2_22BlendShapeModelPayloadEJEEEPT0_PNS2_9AllocatorEDpOT1_EUlPvE_NS_9allocatorISF_EEFvSE_EE7__cloneEv(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = &unk_26E710750;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2re20DeformationModelData6createINS2_18BlendShapeDeformerENS2_22BlendShapeModelPayloadEJEEEPT0_PNS2_9AllocatorEDpOT1_EUlPvE_NS_9allocatorISF_EEFvSE_EE7__cloneEPNS0_6__baseISI_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26E710750;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN2re20DeformationModelData6createINS2_18BlendShapeDeformerENS2_22BlendShapeModelPayloadEJEEEPT0_PNS2_9AllocatorEDpOT1_EUlPvE_NS_9allocatorISF_EEFvSE_EEclEOSE_(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (*a2)
  {
    uint64_t v3 = *(void *)(result + 8);
    re::FixedArray<re::StringID>::deinit((void *)(v2 + 56));
    re::FixedArray<CoreIKTransform>::deinit((uint64_t *)(v2 + 32));
    if (*(void *)(v2 + 8))
    {
      uint64_t v4 = *(void *)(v2 + 16);
      if (v4)
      {
        uint64_t v5 = 184 * v4;
        uint64_t v6 = (uint64_t *)(*(void *)(v2 + 24) + 64);
        do
        {
          re::FixedArray<CoreIKTransform>::deinit(v6);
          re::FixedArray<CoreIKTransform>::deinit(v6 - 3);
          re::FixedArray<re::StringID>::deinit(v6 - 6);
          v6 += 23;
          v5 -= 184;
        }
        while (v5);
        (*(void (**)(void, void))(**(void **)(v2 + 8) + 40))(*(void *)(v2 + 8), *(void *)(v2 + 24));
        *(void *)(v2 + 16) = 0;
        *(void *)(v2 + 24) = 0;
      }
      *(void *)(v2 + 8) = 0;
    }
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)v3 + 40);
    return v7(v3, v2);
  }
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2re20DeformationModelData6createINS2_18BlendShapeDeformerENS2_22BlendShapeModelPayloadEJEEEPT0_PNS2_9AllocatorEDpOT1_EUlPvE_NS_9allocatorISF_EEFvSE_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN2re20DeformationModelData6createINS2_18BlendShapeDeformerENS2_22BlendShapeModelPayloadEJEEEPT0_PNS2_9AllocatorEDpOT1_EUlPvE_NS_9allocatorISF_EEFvSE_EE11target_typeEv()
{
}

void _ZNSt3__110__function6__funcIZN2re20DeformationModelData6createINS2_18BlendShapeDeformerENS2_12_GLOBAL__N_115BlendShapeModelEJEEEPT0_PNS2_9AllocatorEDpOT1_EUlPvE_NS_9allocatorISG_EEFvSF_EED0Ev()
{
}

void *_ZNKSt3__110__function6__funcIZN2re20DeformationModelData6createINS2_18BlendShapeDeformerENS2_12_GLOBAL__N_115BlendShapeModelEJEEEPT0_PNS2_9AllocatorEDpOT1_EUlPvE_NS_9allocatorISG_EEFvSF_EE7__cloneEv(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = &unk_26E7107D0;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2re20DeformationModelData6createINS2_18BlendShapeDeformerENS2_12_GLOBAL__N_115BlendShapeModelEJEEEPT0_PNS2_9AllocatorEDpOT1_EUlPvE_NS_9allocatorISG_EEFvSF_EE7__cloneEPNS0_6__baseISJ_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26E7107D0;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN2re20DeformationModelData6createINS2_18BlendShapeDeformerENS2_12_GLOBAL__N_115BlendShapeModelEJEEEPT0_PNS2_9AllocatorEDpOT1_EUlPvE_NS_9allocatorISG_EEFvSF_EEclEOSF_(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (*a2)
  {
    uint64_t v3 = *(void *)(result + 8);
    re::FixedArray<re::StringID>::deinit((void *)(v2 + 56));
    re::FixedArray<CoreIKTransform>::deinit((uint64_t *)(v2 + 32));
    if (*(void *)(v2 + 8))
    {
      uint64_t v4 = *(void *)(v2 + 16);
      if (v4)
      {
        uint64_t v5 = 168 * v4;
        uint64_t v6 = *(void *)(v2 + 24) + 88;
        do
        {
          uint64_t v7 = *(void **)(v6 + 64);
          if (v7)
          {

            *(void *)(v6 + 64) = 0;
          }
          unint64_t v8 = *(void **)(v6 + 48);
          if (v8)
          {

            *(void *)(v6 + 48) = 0;
          }
          size_t v9 = *(void **)(v6 + 32);
          if (v9)
          {

            *(void *)(v6 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0;
          }
          unint64_t v10 = *(void **)(v6 + 16);
          if (v10)
          {

            *(void *)(v6 + 16) = 0;
          }
          if (*(void *)v6)
          {

            *(void *)uint64_t v6 = 0;
          }
          uint64_t v11 = *(void **)(v6 - 16);
          if (v11)
          {

            *(void *)(v6 - 16) = 0;
          }
          uint64_t v12 = *(void **)(v6 - 32);
          if (v12)
          {

            *(void *)(v6 - re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0;
          }
          re::FixedArray<re::StringID>::deinit((void *)(v6 - 64));
          v6 += 168;
          v5 -= 168;
        }
        while (v5);
        (*(void (**)(void, void))(**(void **)(v2 + 8) + 40))(*(void *)(v2 + 8), *(void *)(v2 + 24));
        *(void *)(v2 + 16) = 0;
        *(void *)(v2 + 24) = 0;
      }
      *(void *)(v2 + 8) = 0;
    }
    int64x2_t v13 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)v3 + 40);
    return v13(v3, v2);
  }
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2re20DeformationModelData6createINS2_18BlendShapeDeformerENS2_12_GLOBAL__N_115BlendShapeModelEJEEEPT0_PNS2_9AllocatorEDpOT1_EUlPvE_NS_9allocatorISG_EEFvSF_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN2re20DeformationModelData6createINS2_18BlendShapeDeformerENS2_12_GLOBAL__N_115BlendShapeModelEJEEEPT0_PNS2_9AllocatorEDpOT1_EUlPvE_NS_9allocatorISG_EEFvSF_EE11target_typeEv()
{
}

_anonymous_namespace_ *re::DynamicArray<void re::anonymous namespace'::buildSparseBlendShape<unsigned int>(re::mtl::Device const&,re::BlendShapeGroupDefinition const&,re::DeformationModelData &,unsigned long)::ComponentInfluence>::add(_anonymous_namespace_ *result, void *a2)
{
  uint64_t v3 = result;
  unint64_t v4 = *((void *)result + 1);
  unint64_t v5 = *((void *)result + 2);
  unint64_t v6 = v5 + 1;
  if (v5 >= v4 && v4 < v6)
  {
    if (*(void *)result)
    {
      uint64_t v8 = 2 * v4;
      BOOL v9 = v4 == 0;
      unint64_t v10 = 8;
      if (!v9) {
        unint64_t v10 = v8;
      }
      if (v10 <= v6) {
        unint64_t v11 = v6;
      }
      else {
        unint64_t v11 = v10;
      }
    }
    else
    {
      ++*((_DWORD *)v3 + 6);
    }
  }
  *(void *)(*((void *)v3 + 4) + 8 * (*((void *)v3 + 2))++) = *a2;
  ++*((_DWORD *)v3 + 6);
  return result;
}

void *re::DynamicArray<void re::anonymous namespace'::buildSparseBlendShape<unsigned int>(re::mtl::Device const&,re::BlendShapeGroupDefinition const&,re::DeformationModelData &,unsigned long)::ComponentInfluence>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    unint64_t v5 = result;
    if (result[2] <= a2)
    {
      BOOL result = (void *)*result;
      if (*v5)
      {
        if (!a2)
        {
          uint64_t v7 = 0;
          if (!v3) {
            goto LABEL_9;
          }
          goto LABEL_8;
        }
        if (a2 >> 61)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 8, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          uint64_t v2 = 8 * a2;
          BOOL result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 8 * a2, 4);
          if (result)
          {
            uint64_t v7 = result;
            if (!v5[1])
            {
LABEL_9:
              v5[4] = v7;
              v5[1] = a2;
              return result;
            }
LABEL_8:
            memcpy(v7, (const void *)v5[4], 8 * v5[2]);
            BOOL result = (void *)(*(uint64_t (**)(void, void))(*(void *)*v5 + 40))(*v5, v5[4]);
            goto LABEL_9;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        BOOL result = (void *)_os_crash();
        __break(1u);
      }
      else
      {
        ++*((_DWORD *)v5 + 6);
      }
    }
  }
  return result;
}

uint64_t re::HashTable<unsigned int,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _DWORD *a4, long long *a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      int v11 = *(_DWORD *)(a1 + 28);
      signed int v12 = 2 * v11;
      uint64_t v13 = *(void *)a1;
      if (*(void *)a1)
      {
        if (v12) {
          BOOL v14 = v9 == v12;
        }
        else {
          BOOL v14 = 1;
        }
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v28, 0, 36);
          *(void *)&v28[36] = 0x7FFFFFFFLL;
          re::HashTable<unsigned int,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::init((uint64_t)v28, v13, v12);
          long long v15 = *(_OWORD *)v28;
          *(_OWORD *)uint64_t v28 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          uint64_t v16 = *(void *)&v28[16];
          uint64_t v17 = *(void *)(a1 + 16);
          *(void *)&v28[16] = v17;
          *(void *)(a1 + 16) = v16;
          long long v19 = *(_OWORD *)&v28[24];
          *(_OWORD *)&v28[24] = *(_OWORD *)(a1 + 24);
          unsigned int v18 = *(_DWORD *)&v28[32];
          *(_OWORD *)(a1 + 24) = v19;
          uint64_t v20 = v18;
          if (v18)
          {
            uint64_t v21 = v17 + 16;
            do
            {
              if ((*(_DWORD *)(v21 - 8) & 0x80000000) != 0) {
                re::HashTable<unsigned int,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::addAsMove(a1, *(void *)(v21 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(v21 - 16), v21 - 4, v21);
              }
              v21 += 40;
              --v20;
            }
            while (v20);
          }
          re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)v28);
        }
      }
      else
      {
        if (v12) {
          signed int v24 = 2 * v11;
        }
        else {
          signed int v24 = 3;
        }
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = v10 + 1;
    uint64_t v22 = *(void *)(a1 + 16);
    int v23 = *(_DWORD *)(v22 + 40 * v9 + 8);
  }
  else
  {
    uint64_t v22 = *(void *)(a1 + 16);
    int v23 = *(_DWORD *)(v22 + 40 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v23 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v22 + 40 * v9 + 8) = v23 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + 40 * v9 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 40 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 40 * v9) = a3;
  *(_DWORD *)(*(void *)(a1 + 16) + 40 * v9 + 12) = *a4;
  uint64_t v25 = *(void *)(a1 + 16) + 40 * v9;
  long long v26 = *a5;
  *(_DWORD *)(v25 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = *((_DWORD *)a5 + 4);
  *(_OWORD *)(v25 + 16) = v26;
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<unsigned int,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  unint64_t v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    uint64_t v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    uint64_t v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      unint64_t v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  signed int v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + 40 * v10, 16);
  if (v12)
  {
    BOOL v14 = v12;
    *(void *)(a1 + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &unk_2343655D0, 4 * v10);
    }
    *(void *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

void *re::DynamicArray<re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    unint64_t v5 = result;
    if (result[2] <= a2)
    {
      BOOL result = (void *)*result;
      if (*v5)
      {
        if (!a2)
        {
          uint64_t v7 = 0;
          if (!v3) {
            goto LABEL_9;
          }
          goto LABEL_8;
        }
        if (a2 >> 61)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 8, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          uint64_t v2 = 8 * a2;
          BOOL result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 8 * a2, 8);
          if (result)
          {
            uint64_t v7 = result;
            if (!v5[1])
            {
LABEL_9:
              v5[4] = v7;
              v5[1] = a2;
              return result;
            }
LABEL_8:
            memcpy(v7, (const void *)v5[4], 8 * v5[2]);
            BOOL result = (void *)(*(uint64_t (**)(void, void))(*(void *)*v5 + 40))(*v5, v5[4]);
            goto LABEL_9;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        BOOL result = (void *)_os_crash();
        __break(1u);
      }
      else
      {
        BOOL result = (void *)re::DynamicArray<re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
      }
    }
  }
  return result;
}

unsigned int **std::__introsort<std::_ClassicAlgPolicy,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::{lambda(re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*)#1} &,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const**,false>(unsigned int **result, unsigned int **a2, uint64_t a3, char a4)
{
  signed int v9 = result;
  while (2)
  {
    uint64_t v10 = v9;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          signed int v9 = v10;
          uint64_t v11 = (char *)a2 - (char *)v10;
          unint64_t v12 = a2 - v10;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                uint64_t v40 = *(a2 - 1);
                uint64_t v41 = *v10;
                if (*v40 < **v10)
                {
                  *uint64_t v10 = v40;
                  *(a2 - 1) = v41;
                }
                break;
              case 3uLL:
                BOOL result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::{lambda(re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*)#1} &,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const**>(v10, v10 + 1, a2 - 1);
                break;
              case 4uLL:
                BOOL result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::{lambda(re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*)#1} &,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const**>(v10, v10 + 1, v10 + 2, a2 - 1);
                break;
              case 5uLL:
                BOOL result = std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::{lambda(re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*)#1} &,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const**>(v10, v10 + 1, v10 + 2, v10 + 3, a2 - 1);
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v11 <= 191)
          {
            uint64_t v42 = v10 + 1;
            BOOL v44 = v10 == a2 || v42 == a2;
            if (a4)
            {
              if (!v44)
              {
                uint64_t v45 = 0;
                uint64_t v46 = v10;
                do
                {
                  uint64_t v48 = *v46;
                  unint64_t v47 = v46[1];
                  uint64_t v46 = v42;
                  unsigned int v49 = *v47;
                  if (*v47 < *v48)
                  {
                    uint64_t v50 = v45;
                    while (1)
                    {
                      *(unsigned int **)((char *)v10 + v50 + 8) = v48;
                      if (!v50) {
                        break;
                      }
                      uint64_t v48 = *(unsigned int **)((char *)v10 + v50 - 8);
                      v50 -= 8;
                      if (v49 >= *v48)
                      {
                        uint64_t v51 = (unsigned int **)((char *)v10 + v50 + 8);
                        goto LABEL_82;
                      }
                    }
                    uint64_t v51 = v10;
LABEL_82:
                    *uint64_t v51 = v47;
                  }
                  uint64_t v42 = v46 + 1;
                  v45 += 8;
                }
                while (v46 + 1 != a2);
              }
            }
            else if (!v44)
            {
              do
              {
                uint64_t v88 = *v9;
                uint64_t v87 = v9[1];
                signed int v9 = v42;
                unsigned int v89 = *v87;
                if (*v87 < *v88)
                {
                  do
                  {
                    *uint64_t v42 = v88;
                    uint64_t v88 = *(v42 - 2);
                    --v42;
                  }
                  while (v89 < *v88);
                  *uint64_t v42 = v87;
                }
                uint64_t v42 = v9 + 1;
              }
              while (v9 + 1 != a2);
            }
            return result;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v52 = (v12 - 2) >> 1;
              int64_t v53 = v52;
              do
              {
                int64_t v54 = v53;
                if (v52 >= v53)
                {
                  uint64_t v55 = (2 * v53) | 1;
                  unint64_t v56 = &v10[v55];
                  __int16 v57 = *v56;
                  if (2 * v54 + 2 < (uint64_t)v12)
                  {
                    unsigned int v59 = *v57;
                    unsigned int v58 = *v56[1];
                    if (*v57 <= v58) {
                      unsigned int v59 = *v56[1];
                    }
                    if (*v57 < v58)
                    {
                      __int16 v57 = v56[1];
                      ++v56;
                      uint64_t v55 = 2 * v54 + 2;
                    }
                  }
                  else
                  {
                    unsigned int v59 = *v57;
                  }
                  BOOL result = &v10[v54];
                  long long v60 = *result;
                  unsigned int v61 = **result;
                  if (v59 >= v61)
                  {
                    do
                    {
                      long long v62 = v56;
                      *BOOL result = v57;
                      if (v52 < v55) {
                        break;
                      }
                      uint64_t v63 = (2 * v55) | 1;
                      unint64_t v56 = &v10[v63];
                      uint64_t v55 = 2 * v55 + 2;
                      __int16 v57 = *v56;
                      if (v55 < (uint64_t)v12)
                      {
                        unsigned int v65 = *v57;
                        unsigned int v64 = *v56[1];
                        if (*v57 <= v64) {
                          unsigned int v65 = *v56[1];
                        }
                        if (*v57 >= v64)
                        {
                          uint64_t v55 = v63;
                        }
                        else
                        {
                          __int16 v57 = v56[1];
                          ++v56;
                        }
                      }
                      else
                      {
                        unsigned int v65 = *v57;
                        uint64_t v55 = v63;
                      }
                      BOOL result = v62;
                    }
                    while (v65 >= v61);
                    *long long v62 = v60;
                  }
                }
                int64_t v53 = v54 - 1;
              }
              while (v54);
              uint64_t v66 = (unint64_t)v11 >> 3;
              do
              {
                uint64_t v67 = 0;
                long long v68 = *v10;
                uint64_t v69 = v66 - 2;
                if (v66 < 2) {
                  uint64_t v69 = v66 - 1;
                }
                uint64_t v70 = v69 >> 1;
                uint64_t v71 = v10;
                do
                {
                  long long v72 = &v71[v67];
                  long long v75 = v72[1];
                  long long v73 = v72 + 1;
                  uint64_t v74 = v75;
                  uint64_t v76 = (2 * v67) | 1;
                  uint64_t v77 = 2 * v67 + 2;
                  if (v77 < v66)
                  {
                    BOOL result = (unsigned int **)v73[1];
                    unsigned int v78 = *v74;
                    if (*v74 < *(_DWORD *)result)
                    {
                      uint64_t v74 = v73[1];
                      ++v73;
                    }
                    if (v78 < *(_DWORD *)result) {
                      uint64_t v76 = v77;
                    }
                  }
                  *uint64_t v71 = v74;
                  uint64_t v71 = v73;
                  uint64_t v67 = v76;
                }
                while (v76 <= v70);
                if (v73 == --a2)
                {
                  *long long v73 = v68;
                }
                else
                {
                  *long long v73 = *a2;
                  *a2 = v68;
                  uint64_t v79 = (char *)v73 - (char *)v10 + 8;
                  if (v79 >= 9)
                  {
                    unint64_t v80 = (((unint64_t)v79 >> 3) - 2) >> 1;
                    uint64_t v81 = &v10[v80];
                    unint64_t v82 = *v81;
                    uint64_t v83 = *v73;
                    unsigned int v84 = **v73;
                    if (**v81 < v84)
                    {
                      do
                      {
                        unint64_t v85 = v81;
                        *long long v73 = v82;
                        if (!v80) {
                          break;
                        }
                        unint64_t v80 = (v80 - 1) >> 1;
                        uint64_t v81 = &v10[v80];
                        unint64_t v82 = *v81;
                        long long v73 = v85;
                      }
                      while (**v81 < v84);
                      *unint64_t v85 = v83;
                    }
                  }
                }
              }
              while (v66-- > 2);
            }
            return result;
          }
          unint64_t v13 = v12 >> 1;
          BOOL v14 = &v10[v12 >> 1];
          if ((unint64_t)v11 >= 0x401)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::{lambda(re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*)#1} &,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const**>(v9, &v9[v12 >> 1], a2 - 1);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::{lambda(re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*)#1} &,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const**>(v9 + 1, v14 - 1, a2 - 2);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::{lambda(re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*)#1} &,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const**>(v9 + 2, &v9[v13 + 1], a2 - 3);
            BOOL result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::{lambda(re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*)#1} &,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const**>(v14 - 1, v14, &v9[v13 + 1]);
            long long v15 = *v9;
            *signed int v9 = *v14;
            *BOOL v14 = v15;
          }
          else
          {
            BOOL result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::{lambda(re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*)#1} &,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const**>(&v9[v12 >> 1], v9, a2 - 1);
          }
          --a3;
          uint64_t v16 = *v9;
          unsigned int v17 = **v9;
          if ((a4 & 1) != 0 || **(v9 - 1) < v17) {
            break;
          }
          if (v17 >= **(a2 - 1))
          {
            uint64_t v32 = v9 + 1;
            do
            {
              uint64_t v10 = v32;
              if (v32 >= a2) {
                break;
              }
              ++v32;
            }
            while (v17 >= **v10);
          }
          else
          {
            uint64_t v10 = v9;
            do
            {
              uint64_t v31 = v10[1];
              ++v10;
            }
            while (v17 >= *v31);
          }
          uint64_t v33 = a2;
          if (v10 < a2)
          {
            uint64_t v33 = a2;
            do
              uint64_t v34 = *--v33;
            while (v17 < *v34);
          }
          if (v10 < v33)
          {
            __int16 v35 = *v10;
            uint64_t v36 = *v33;
            do
            {
              *uint64_t v10 = v36;
              *uint64_t v33 = v35;
              do
              {
                unint64_t v37 = v10[1];
                ++v10;
                __int16 v35 = v37;
              }
              while (v17 >= *v37);
              do
              {
                uint64_t v38 = *--v33;
                uint64_t v36 = v38;
              }
              while (v17 < *v38);
            }
            while (v10 < v33);
          }
          uint64_t v39 = v10 - 1;
          BOOL v4 = v10 - 1 >= v9;
          BOOL v5 = v10 - 1 == v9;
          if (v10 - 1 != v9) {
            *signed int v9 = *v39;
          }
          a4 = 0;
          *uint64_t v39 = v16;
        }
        uint64_t v18 = 0;
        do
          long long v19 = v9[++v18];
        while (*v19 < v17);
        uint64_t v20 = &v9[v18];
        uint64_t v21 = a2;
        if (v18 == 1)
        {
          uint64_t v21 = a2;
          do
          {
            if (v20 >= v21) {
              break;
            }
            int v23 = *--v21;
          }
          while (*v23 >= v17);
        }
        else
        {
          do
            uint64_t v22 = *--v21;
          while (*v22 >= v17);
        }
        if (v20 >= v21)
        {
          id v29 = v20 - 1;
        }
        else
        {
          signed int v24 = *v21;
          uint64_t v25 = &v9[v18];
          long long v26 = v21;
          do
          {
            *uint64_t v25 = v24;
            *long long v26 = v19;
            do
            {
              uint64_t v27 = v25[1];
              ++v25;
              long long v19 = v27;
            }
            while (*v27 < v17);
            do
            {
              uint64_t v28 = *--v26;
              signed int v24 = v28;
            }
            while (*v28 >= v17);
          }
          while (v25 < v26);
          id v29 = v25 - 1;
        }
        if (v29 != v9) {
          *signed int v9 = *v29;
        }
        *id v29 = v16;
        if (v20 >= v21) {
          break;
        }
LABEL_33:
        BOOL result = (unsigned int **)std::__introsort<std::_ClassicAlgPolicy,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::{lambda(re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*)#1} &,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const**,false>(v9, v29, a3, a4 & 1);
        a4 = 0;
        uint64_t v10 = v29 + 1;
      }
      BOOL v30 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::{lambda(re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*)#1} &,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const**>(v9, v29);
      uint64_t v10 = v29 + 1;
      BOOL result = (unsigned int **)std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::{lambda(re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*)#1} &,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const**>(v29 + 1, a2);
      if (result) {
        break;
      }
      if (!v30) {
        goto LABEL_33;
      }
    }
    a2 = v29;
    if (!v30) {
      continue;
    }
    return result;
  }
}

unsigned int **std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::{lambda(re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*)#1} &,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const**>(unsigned int **result, unsigned int **a2, unsigned int **a3)
{
  uint64_t v3 = *a2;
  BOOL v4 = *result;
  unsigned int v5 = **a2;
  unsigned int v6 = **result;
  uint64_t v7 = *a3;
  unsigned int v8 = **a3;
  if (v5 >= v6)
  {
    if (v8 < v5)
    {
      *a2 = v7;
      *a3 = v3;
      signed int v9 = *result;
      if (**a2 < **result)
      {
        *BOOL result = *a2;
        *a2 = v9;
      }
    }
  }
  else
  {
    if (v8 >= v5)
    {
      *BOOL result = v3;
      *a2 = v4;
      if (**a3 >= v6) {
        return result;
      }
      *a2 = *a3;
    }
    else
    {
      *BOOL result = v7;
    }
    *a3 = v4;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::{lambda(re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*)#1} &,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const**>(unsigned int **a1, unsigned int **a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unsigned int v6 = *(a2 - 1);
      uint64_t v7 = *a1;
      if (*v6 < **a1)
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::{lambda(re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*)#1} &,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const**>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::{lambda(re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*)#1} &,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const**>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::{lambda(re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*)#1} &,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const**>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      unsigned int v8 = a1 + 2;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::{lambda(re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*)#1} &,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const**>(a1, a1 + 1, a1 + 2);
      signed int v9 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v10 = 0;
      uint64_t v11 = 24;
      break;
  }
  while (1)
  {
    unint64_t v12 = *v9;
    unint64_t v13 = *v8;
    unsigned int v14 = **v9;
    if (v14 < **v8)
    {
      uint64_t v15 = v11;
      while (1)
      {
        *(unsigned int **)((char *)a1 + v15) = v13;
        uint64_t v16 = v15 - 8;
        if (v15 == 8) {
          break;
        }
        unint64_t v13 = *(unsigned int **)((char *)a1 + v15 - 16);
        v15 -= 8;
        if (v14 >= *v13)
        {
          unsigned int v17 = (unsigned int **)((char *)a1 + v16);
          goto LABEL_12;
        }
      }
      unsigned int v17 = a1;
LABEL_12:
      *unsigned int v17 = v12;
      if (++v10 == 8) {
        return v9 + 1 == a2;
      }
    }
    unsigned int v8 = v9;
    v11 += 8;
    if (++v9 == a2) {
      return 1;
    }
  }
}

unsigned int **std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::{lambda(re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*)#1} &,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const**>(unsigned int **a1, unsigned int **a2, unsigned int **a3, unsigned int **a4)
{
  BOOL result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::{lambda(re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*)#1} &,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const**>(a1, a2, a3);
  signed int v9 = *a3;
  if (**a4 < **a3)
  {
    *a3 = *a4;
    *a4 = v9;
    int v10 = *a2;
    if (**a3 < **a2)
    {
      *a2 = *a3;
      *a3 = v10;
      uint64_t v11 = *a1;
      if (**a2 < **a1)
      {
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }
  return result;
}

unsigned int **std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::{lambda(re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*)#1} &,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const**>(unsigned int **a1, unsigned int **a2, unsigned int **a3, unsigned int **a4, unsigned int **a5)
{
  BOOL result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::{lambda(re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*)#1} &,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const**>(a1, a2, a3, a4);
  uint64_t v11 = *a4;
  if (**a5 < **a4)
  {
    *a4 = *a5;
    *a5 = v11;
    unint64_t v12 = *a3;
    if (**a4 < **a3)
    {
      *a3 = *a4;
      *a4 = v12;
      unint64_t v13 = *a2;
      if (**a3 < **a2)
      {
        *a2 = *a3;
        *a3 = v13;
        unsigned int v14 = *a1;
        if (**a2 < **a1)
        {
          *a1 = *a2;
          *a2 = v14;
        }
      }
    }
  }
  return result;
}

unsigned int **std::__introsort<std::_ClassicAlgPolicy,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned short>(re::DeformationModelData const&,unsigned int)::{lambda(re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned short>(re::DeformationModelData const&,unsigned int)::DeltaValues const*,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned short>(re::DeformationModelData const&,unsigned int)::DeltaValues const*)#1} &,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned short>(re::DeformationModelData const&,unsigned int)::DeltaValues const**,false>(unsigned int **result, unsigned int **a2, uint64_t a3, char a4)
{
  signed int v9 = result;
  while (2)
  {
    int v10 = v9;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          signed int v9 = v10;
          uint64_t v11 = (char *)a2 - (char *)v10;
          unint64_t v12 = a2 - v10;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                uint64_t v40 = *(a2 - 1);
                uint64_t v41 = *v10;
                if (*v40 < **v10)
                {
                  *int v10 = v40;
                  *(a2 - 1) = v41;
                }
                break;
              case 3uLL:
                BOOL result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::{lambda(re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*)#1} &,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const**>(v10, v10 + 1, a2 - 1);
                break;
              case 4uLL:
                BOOL result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::{lambda(re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*)#1} &,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const**>(v10, v10 + 1, v10 + 2, a2 - 1);
                break;
              case 5uLL:
                BOOL result = std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::{lambda(re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*)#1} &,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const**>(v10, v10 + 1, v10 + 2, v10 + 3, a2 - 1);
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v11 <= 191)
          {
            uint64_t v42 = v10 + 1;
            BOOL v44 = v10 == a2 || v42 == a2;
            if (a4)
            {
              if (!v44)
              {
                uint64_t v45 = 0;
                uint64_t v46 = v10;
                do
                {
                  uint64_t v48 = *v46;
                  unint64_t v47 = v46[1];
                  uint64_t v46 = v42;
                  unsigned int v49 = *v47;
                  if (*v47 < *v48)
                  {
                    uint64_t v50 = v45;
                    while (1)
                    {
                      *(unsigned int **)((char *)v10 + v50 + 8) = v48;
                      if (!v50) {
                        break;
                      }
                      uint64_t v48 = *(unsigned int **)((char *)v10 + v50 - 8);
                      v50 -= 8;
                      if (v49 >= *v48)
                      {
                        uint64_t v51 = (unsigned int **)((char *)v10 + v50 + 8);
                        goto LABEL_82;
                      }
                    }
                    uint64_t v51 = v10;
LABEL_82:
                    *uint64_t v51 = v47;
                  }
                  uint64_t v42 = v46 + 1;
                  v45 += 8;
                }
                while (v46 + 1 != a2);
              }
            }
            else if (!v44)
            {
              do
              {
                uint64_t v88 = *v9;
                uint64_t v87 = v9[1];
                signed int v9 = v42;
                unsigned int v89 = *v87;
                if (*v87 < *v88)
                {
                  do
                  {
                    *uint64_t v42 = v88;
                    uint64_t v88 = *(v42 - 2);
                    --v42;
                  }
                  while (v89 < *v88);
                  *uint64_t v42 = v87;
                }
                uint64_t v42 = v9 + 1;
              }
              while (v9 + 1 != a2);
            }
            return result;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v52 = (v12 - 2) >> 1;
              int64_t v53 = v52;
              do
              {
                int64_t v54 = v53;
                if (v52 >= v53)
                {
                  uint64_t v55 = (2 * v53) | 1;
                  unint64_t v56 = &v10[v55];
                  __int16 v57 = *v56;
                  if (2 * v54 + 2 < (uint64_t)v12)
                  {
                    unsigned int v59 = *v57;
                    unsigned int v58 = *v56[1];
                    if (*v57 <= v58) {
                      unsigned int v59 = *v56[1];
                    }
                    if (*v57 < v58)
                    {
                      __int16 v57 = v56[1];
                      ++v56;
                      uint64_t v55 = 2 * v54 + 2;
                    }
                  }
                  else
                  {
                    unsigned int v59 = *v57;
                  }
                  BOOL result = &v10[v54];
                  long long v60 = *result;
                  unsigned int v61 = **result;
                  if (v59 >= v61)
                  {
                    do
                    {
                      long long v62 = v56;
                      *BOOL result = v57;
                      if (v52 < v55) {
                        break;
                      }
                      uint64_t v63 = (2 * v55) | 1;
                      unint64_t v56 = &v10[v63];
                      uint64_t v55 = 2 * v55 + 2;
                      __int16 v57 = *v56;
                      if (v55 < (uint64_t)v12)
                      {
                        unsigned int v65 = *v57;
                        unsigned int v64 = *v56[1];
                        if (*v57 <= v64) {
                          unsigned int v65 = *v56[1];
                        }
                        if (*v57 >= v64)
                        {
                          uint64_t v55 = v63;
                        }
                        else
                        {
                          __int16 v57 = v56[1];
                          ++v56;
                        }
                      }
                      else
                      {
                        unsigned int v65 = *v57;
                        uint64_t v55 = v63;
                      }
                      BOOL result = v62;
                    }
                    while (v65 >= v61);
                    *long long v62 = v60;
                  }
                }
                int64_t v53 = v54 - 1;
              }
              while (v54);
              uint64_t v66 = (unint64_t)v11 >> 3;
              do
              {
                uint64_t v67 = 0;
                long long v68 = *v10;
                uint64_t v69 = v66 - 2;
                if (v66 < 2) {
                  uint64_t v69 = v66 - 1;
                }
                uint64_t v70 = v69 >> 1;
                uint64_t v71 = v10;
                do
                {
                  long long v72 = &v71[v67];
                  long long v75 = v72[1];
                  long long v73 = v72 + 1;
                  uint64_t v74 = v75;
                  uint64_t v76 = (2 * v67) | 1;
                  uint64_t v77 = 2 * v67 + 2;
                  if (v77 < v66)
                  {
                    BOOL result = (unsigned int **)v73[1];
                    unsigned int v78 = *v74;
                    if (*v74 < *(_DWORD *)result)
                    {
                      uint64_t v74 = v73[1];
                      ++v73;
                    }
                    if (v78 < *(_DWORD *)result) {
                      uint64_t v76 = v77;
                    }
                  }
                  *uint64_t v71 = v74;
                  uint64_t v71 = v73;
                  uint64_t v67 = v76;
                }
                while (v76 <= v70);
                if (v73 == --a2)
                {
                  *long long v73 = v68;
                }
                else
                {
                  *long long v73 = *a2;
                  *a2 = v68;
                  uint64_t v79 = (char *)v73 - (char *)v10 + 8;
                  if (v79 >= 9)
                  {
                    unint64_t v80 = (((unint64_t)v79 >> 3) - 2) >> 1;
                    uint64_t v81 = &v10[v80];
                    unint64_t v82 = *v81;
                    uint64_t v83 = *v73;
                    unsigned int v84 = **v73;
                    if (**v81 < v84)
                    {
                      do
                      {
                        unint64_t v85 = v81;
                        *long long v73 = v82;
                        if (!v80) {
                          break;
                        }
                        unint64_t v80 = (v80 - 1) >> 1;
                        uint64_t v81 = &v10[v80];
                        unint64_t v82 = *v81;
                        long long v73 = v85;
                      }
                      while (**v81 < v84);
                      *unint64_t v85 = v83;
                    }
                  }
                }
              }
              while (v66-- > 2);
            }
            return result;
          }
          unint64_t v13 = v12 >> 1;
          unsigned int v14 = &v10[v12 >> 1];
          if ((unint64_t)v11 >= 0x401)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::{lambda(re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*)#1} &,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const**>(v9, &v9[v12 >> 1], a2 - 1);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::{lambda(re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*)#1} &,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const**>(v9 + 1, v14 - 1, a2 - 2);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::{lambda(re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*)#1} &,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const**>(v9 + 2, &v9[v13 + 1], a2 - 3);
            BOOL result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::{lambda(re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*)#1} &,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const**>(v14 - 1, v14, &v9[v13 + 1]);
            uint64_t v15 = *v9;
            *signed int v9 = *v14;
            *unsigned int v14 = v15;
          }
          else
          {
            BOOL result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::{lambda(re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*)#1} &,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const**>(&v9[v12 >> 1], v9, a2 - 1);
          }
          --a3;
          uint64_t v16 = *v9;
          unsigned int v17 = **v9;
          if ((a4 & 1) != 0 || **(v9 - 1) < v17) {
            break;
          }
          if (v17 >= **(a2 - 1))
          {
            uint64_t v32 = v9 + 1;
            do
            {
              int v10 = v32;
              if (v32 >= a2) {
                break;
              }
              ++v32;
            }
            while (v17 >= **v10);
          }
          else
          {
            int v10 = v9;
            do
            {
              uint64_t v31 = v10[1];
              ++v10;
            }
            while (v17 >= *v31);
          }
          uint64_t v33 = a2;
          if (v10 < a2)
          {
            uint64_t v33 = a2;
            do
              uint64_t v34 = *--v33;
            while (v17 < *v34);
          }
          if (v10 < v33)
          {
            __int16 v35 = *v10;
            uint64_t v36 = *v33;
            do
            {
              *int v10 = v36;
              *uint64_t v33 = v35;
              do
              {
                unint64_t v37 = v10[1];
                ++v10;
                __int16 v35 = v37;
              }
              while (v17 >= *v37);
              do
              {
                uint64_t v38 = *--v33;
                uint64_t v36 = v38;
              }
              while (v17 < *v38);
            }
            while (v10 < v33);
          }
          uint64_t v39 = v10 - 1;
          BOOL v4 = v10 - 1 >= v9;
          BOOL v5 = v10 - 1 == v9;
          if (v10 - 1 != v9) {
            *signed int v9 = *v39;
          }
          a4 = 0;
          *uint64_t v39 = v16;
        }
        uint64_t v18 = 0;
        do
          long long v19 = v9[++v18];
        while (*v19 < v17);
        uint64_t v20 = &v9[v18];
        uint64_t v21 = a2;
        if (v18 == 1)
        {
          uint64_t v21 = a2;
          do
          {
            if (v20 >= v21) {
              break;
            }
            int v23 = *--v21;
          }
          while (*v23 >= v17);
        }
        else
        {
          do
            uint64_t v22 = *--v21;
          while (*v22 >= v17);
        }
        if (v20 >= v21)
        {
          id v29 = v20 - 1;
        }
        else
        {
          signed int v24 = *v21;
          uint64_t v25 = &v9[v18];
          long long v26 = v21;
          do
          {
            *uint64_t v25 = v24;
            *long long v26 = v19;
            do
            {
              uint64_t v27 = v25[1];
              ++v25;
              long long v19 = v27;
            }
            while (*v27 < v17);
            do
            {
              uint64_t v28 = *--v26;
              signed int v24 = v28;
            }
            while (*v28 >= v17);
          }
          while (v25 < v26);
          id v29 = v25 - 1;
        }
        if (v29 != v9) {
          *signed int v9 = *v29;
        }
        *id v29 = v16;
        if (v20 >= v21) {
          break;
        }
LABEL_33:
        BOOL result = (unsigned int **)std::__introsort<std::_ClassicAlgPolicy,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned short>(re::DeformationModelData const&,unsigned int)::{lambda(re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned short>(re::DeformationModelData const&,unsigned int)::DeltaValues const*,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned short>(re::DeformationModelData const&,unsigned int)::DeltaValues const*)#1} &,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned short>(re::DeformationModelData const&,unsigned int)::DeltaValues const**,false>(v9, v29, a3, a4 & 1);
        a4 = 0;
        int v10 = v29 + 1;
      }
      BOOL v30 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned short>(re::DeformationModelData const&,unsigned int)::{lambda(re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned short>(re::DeformationModelData const&,unsigned int)::DeltaValues const*,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned short>(re::DeformationModelData const&,unsigned int)::DeltaValues const*)#1} &,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned short>(re::DeformationModelData const&,unsigned int)::DeltaValues const**>(v9, v29);
      int v10 = v29 + 1;
      BOOL result = (unsigned int **)std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned short>(re::DeformationModelData const&,unsigned int)::{lambda(re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned short>(re::DeformationModelData const&,unsigned int)::DeltaValues const*,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned short>(re::DeformationModelData const&,unsigned int)::DeltaValues const*)#1} &,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned short>(re::DeformationModelData const&,unsigned int)::DeltaValues const**>(v29 + 1, a2);
      if (result) {
        break;
      }
      if (!v30) {
        goto LABEL_33;
      }
    }
    a2 = v29;
    if (!v30) {
      continue;
    }
    return result;
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned short>(re::DeformationModelData const&,unsigned int)::{lambda(re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned short>(re::DeformationModelData const&,unsigned int)::DeltaValues const*,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned short>(re::DeformationModelData const&,unsigned int)::DeltaValues const*)#1} &,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned short>(re::DeformationModelData const&,unsigned int)::DeltaValues const**>(unsigned int **a1, unsigned int **a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unsigned int v6 = *(a2 - 1);
      uint64_t v7 = *a1;
      if (*v6 < **a1)
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::{lambda(re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*)#1} &,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const**>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::{lambda(re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*)#1} &,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const**>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::{lambda(re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*)#1} &,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const**>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      unsigned int v8 = a1 + 2;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::{lambda(re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*)#1} &,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const**>(a1, a1 + 1, a1 + 2);
      signed int v9 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v10 = 0;
      uint64_t v11 = 24;
      break;
  }
  while (1)
  {
    unint64_t v12 = *v9;
    unint64_t v13 = *v8;
    unsigned int v14 = **v9;
    if (v14 < **v8)
    {
      uint64_t v15 = v11;
      while (1)
      {
        *(unsigned int **)((char *)a1 + v15) = v13;
        uint64_t v16 = v15 - 8;
        if (v15 == 8) {
          break;
        }
        unint64_t v13 = *(unsigned int **)((char *)a1 + v15 - 16);
        v15 -= 8;
        if (v14 >= *v13)
        {
          unsigned int v17 = (unsigned int **)((char *)a1 + v16);
          goto LABEL_12;
        }
      }
      unsigned int v17 = a1;
LABEL_12:
      *unsigned int v17 = v12;
      if (++v10 == 8) {
        return v9 + 1 == a2;
      }
    }
    unsigned int v8 = v9;
    v11 += 8;
    if (++v9 == a2) {
      return 1;
    }
  }
}

_anonymous_namespace_ *re::MaterialManager::init(re::MaterialManager *this, re::RenderManager *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,long long a31,long long a32,long long a33,long long a34,long long a35,long long a36,long long a37,long long a38,long long a39,long long a40,long long a41,long long a42,long long a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,long long a48,long long a49,long long a50,long long a51,long long a52,long long a53)
{
  MEMORY[0x270FA5388](this);
  int64_t v54 = v53;
  unint64_t v56 = v55;
  __int16 v57 = &STACK[0xBF0];
  uint64_t v58 = (uint64_t)&a38;
  STACK[0x10F8] = *MEMORY[0x263EF8340];
  *((void *)v55 + 112) = v53;
  *((void *)v55 + 83) = re::MaterialManager::createTextureTableForName(v55, "fallback");
  *((void *)v56 + 81) = re::MaterialManager::createTextureTableForName(v56, "light");
  *((void *)v56 + 82) = re::MaterialManager::createTextureTableForName(v56, "global");
  *((void *)v56 + 80) = re::MaterialManager::createTextureTableForName(v56, "brdf");
  BufferTableForName = (_anonymous_namespace_ *)re::MaterialManager::createBufferTableForName(v56, "fallback");
  *((void *)v56 + 91) = BufferTableForName;
  unint64_t v60 = (unint64_t)v56 + 736;
  if (!*((void *)v56 + 93))
  {
LABEL_320:
    *(void *)&a48 = 0;
    *(_OWORD *)(v58 + 672) = 0u;
    *(_OWORD *)(v58 + 688) = 0u;
    *(_OWORD *)(v58 + 640) = 0u;
    *(_OWORD *)(v58 + 656) = 0u;
    *(_OWORD *)(v58 + 624) = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(STACK[0xBF0]) = 136315906;
    *(unint64_t *)((char *)v57 + 4) = (unint64_t)"operator[]";
    LOWORD(STACK[0xBFC]) = 1024;
    *(_DWORD *)((char *)v57 + 14) = 468;
    LOWORD(STACK[0xC02]) = 2048;
    *(unint64_t *)((char *)v57 + 20) = 0;
    LOWORD(STACK[0xC0C]) = 2048;
    *(unint64_t *)((char *)v57 + 30) = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_321;
  }
  unsigned int v61 = (re::DynamicString *)*((void *)v56 + 94);
  STACK[0x3F0] = (unint64_t)"zeros";
  STACK[0x3F8] = 5;
  re::DynamicString::operator=(v61, (uint64_t)&STACK[0x3F0]);
  unint64_t v60 = *((void *)v56 + 93);
  if (v60 <= 1)
  {
LABEL_321:
    *(void *)&a48 = 0;
    *(_OWORD *)(v58 + 672) = 0u;
    *(_OWORD *)(v58 + 688) = 0u;
    *(_OWORD *)(v58 + 640) = 0u;
    *(_OWORD *)(v58 + 656) = 0u;
    *(_OWORD *)(v58 + 624) = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(STACK[0xBF0]) = 136315906;
    *(unint64_t *)((char *)v57 + 4) = (unint64_t)"operator[]";
    LOWORD(STACK[0xBFC]) = 1024;
    *(_DWORD *)((char *)v57 + 14) = 468;
    LOWORD(STACK[0xC02]) = 2048;
    *(unint64_t *)((char *)v57 + 20) = 1;
    LOWORD(STACK[0xC0C]) = 2048;
    *(unint64_t *)((char *)v57 + 30) = v60;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_322;
  }
  long long v62 = (re::DynamicString *)(*((void *)v56 + 94) + 32);
  STACK[0x3F0] = (unint64_t)"ones";
  STACK[0x3F8] = 4;
  re::DynamicString::operator=(v62, (uint64_t)&STACK[0x3F0]);
  unint64_t v60 = *((void *)v56 + 93);
  if (v60 <= 2)
  {
LABEL_322:
    *(void *)&a48 = 0;
    *(_OWORD *)(v58 + 672) = 0u;
    *(_OWORD *)(v58 + 688) = 0u;
    *(_OWORD *)(v58 + 640) = 0u;
    *(_OWORD *)(v58 + 656) = 0u;
    *(_OWORD *)(v58 + 624) = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(STACK[0xBF0]) = 136315906;
    *(unint64_t *)((char *)v57 + 4) = (unint64_t)"operator[]";
    LOWORD(STACK[0xBFC]) = 1024;
    *(_DWORD *)((char *)v57 + 14) = 468;
    LOWORD(STACK[0xC02]) = 2048;
    *(unint64_t *)((char *)v57 + 20) = 2;
    LOWORD(STACK[0xC0C]) = 2048;
    *(unint64_t *)((char *)v57 + 30) = v60;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_323;
  }
  uint64_t v63 = (re::DynamicString *)(*((void *)v56 + 94) + 64);
  STACK[0x3F0] = (unint64_t)"xDir";
  STACK[0x3F8] = 4;
  re::DynamicString::operator=(v63, (uint64_t)&STACK[0x3F0]);
  unint64_t v60 = *((void *)v56 + 93);
  if (v60 <= 3)
  {
LABEL_323:
    *(void *)&a48 = 0;
    *(_OWORD *)(v58 + 672) = 0u;
    *(_OWORD *)(v58 + 688) = 0u;
    *(_OWORD *)(v58 + 640) = 0u;
    *(_OWORD *)(v58 + 656) = 0u;
    *(_OWORD *)(v58 + 624) = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(STACK[0xBF0]) = 136315906;
    *(unint64_t *)((char *)v57 + 4) = (unint64_t)"operator[]";
    LOWORD(STACK[0xBFC]) = 1024;
    *(_DWORD *)((char *)v57 + 14) = 468;
    LOWORD(STACK[0xC02]) = 2048;
    *(unint64_t *)((char *)v57 + 20) = 3;
    LOWORD(STACK[0xC0C]) = 2048;
    *(unint64_t *)((char *)v57 + 30) = v60;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_324;
  }
  unsigned int v64 = (re::DynamicString *)(*((void *)v56 + 94) + 96);
  STACK[0x3F0] = (unint64_t)"yDir";
  STACK[0x3F8] = 4;
  re::DynamicString::operator=(v64, (uint64_t)&STACK[0x3F0]);
  unint64_t v60 = *((void *)v56 + 93);
  if (v60 <= 4)
  {
LABEL_324:
    *(void *)&a48 = 0;
    *(_OWORD *)(v58 + 672) = 0u;
    *(_OWORD *)(v58 + 688) = 0u;
    *(_OWORD *)(v58 + 640) = 0u;
    *(_OWORD *)(v58 + 656) = 0u;
    *(_OWORD *)(v58 + 624) = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(STACK[0xBF0]) = 136315906;
    *(unint64_t *)((char *)v57 + 4) = (unint64_t)"operator[]";
    LOWORD(STACK[0xBFC]) = 1024;
    *(_DWORD *)((char *)v57 + 14) = 468;
    LOWORD(STACK[0xC02]) = 2048;
    *(unint64_t *)((char *)v57 + 20) = 4;
    LOWORD(STACK[0xC0C]) = 2048;
    *(unint64_t *)((char *)v57 + 30) = v60;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_325;
  }
  unsigned int v65 = (re::DynamicString *)(*((void *)v56 + 94) + 128);
  STACK[0x3F0] = (unint64_t)"zDir";
  STACK[0x3F8] = 4;
  re::DynamicString::operator=(v65, (uint64_t)&STACK[0x3F0]);
  unint64_t v60 = *((void *)v56 + 93);
  if (v60 <= 5)
  {
LABEL_325:
    *(void *)&a48 = 0;
    *(_OWORD *)(v58 + 672) = 0u;
    *(_OWORD *)(v58 + 688) = 0u;
    *(_OWORD *)(v58 + 640) = 0u;
    *(_OWORD *)(v58 + 656) = 0u;
    *(_OWORD *)(v58 + 624) = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(STACK[0xBF0]) = 136315906;
    *(unint64_t *)((char *)v57 + 4) = (unint64_t)"operator[]";
    LOWORD(STACK[0xBFC]) = 1024;
    *(_DWORD *)((char *)v57 + 14) = 468;
    LOWORD(STACK[0xC02]) = 2048;
    *(unint64_t *)((char *)v57 + 20) = 5;
    LOWORD(STACK[0xC0C]) = 2048;
    *(unint64_t *)((char *)v57 + 30) = v60;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_326;
  }
  uint64_t v66 = (re::DynamicString *)(*((void *)v56 + 94) + 160);
  STACK[0x3F0] = (unint64_t)"origin";
  STACK[0x3F8] = 6;
  re::DynamicString::operator=(v66, (uint64_t)&STACK[0x3F0]);
  unint64_t v60 = *((void *)v56 + 93);
  if (v60 <= 6)
  {
LABEL_326:
    *(void *)&a48 = 0;
    *(_OWORD *)(v58 + 672) = 0u;
    *(_OWORD *)(v58 + 688) = 0u;
    *(_OWORD *)(v58 + 640) = 0u;
    *(_OWORD *)(v58 + 656) = 0u;
    *(_OWORD *)(v58 + 624) = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(STACK[0xBF0]) = 136315906;
    *(unint64_t *)((char *)v57 + 4) = (unint64_t)"operator[]";
    LOWORD(STACK[0xBFC]) = 1024;
    *(_DWORD *)((char *)v57 + 14) = 468;
    LOWORD(STACK[0xC02]) = 2048;
    *(unint64_t *)((char *)v57 + 20) = 6;
    LOWORD(STACK[0xC0C]) = 2048;
    *(unint64_t *)((char *)v57 + 30) = v60;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_327;
  }
  uint64_t v67 = (re::DynamicString *)(*((void *)v56 + 94) + 192);
  STACK[0x3F0] = (unint64_t)"xUnit";
  STACK[0x3F8] = 5;
  re::DynamicString::operator=(v67, (uint64_t)&STACK[0x3F0]);
  unint64_t v60 = *((void *)v56 + 93);
  if (v60 <= 7)
  {
LABEL_327:
    *(void *)&a48 = 0;
    *(_OWORD *)(v58 + 672) = 0u;
    *(_OWORD *)(v58 + 688) = 0u;
    *(_OWORD *)(v58 + 640) = 0u;
    *(_OWORD *)(v58 + 656) = 0u;
    *(_OWORD *)(v58 + 624) = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(STACK[0xBF0]) = 136315906;
    *(unint64_t *)((char *)v57 + 4) = (unint64_t)"operator[]";
    LOWORD(STACK[0xBFC]) = 1024;
    *(_DWORD *)((char *)v57 + 14) = 468;
    LOWORD(STACK[0xC02]) = 2048;
    *(unint64_t *)((char *)v57 + 20) = 7;
    LOWORD(STACK[0xC0C]) = 2048;
    *(unint64_t *)((char *)v57 + 30) = v60;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_328;
  }
  long long v68 = (re::DynamicString *)(*((void *)v56 + 94) + 224);
  STACK[0x3F0] = (unint64_t)"yUnit";
  STACK[0x3F8] = 5;
  re::DynamicString::operator=(v68, (uint64_t)&STACK[0x3F0]);
  unint64_t v60 = *((void *)v56 + 93);
  if (v60 <= 8)
  {
LABEL_328:
    *(void *)&a48 = 0;
    *(_OWORD *)(v58 + 672) = 0u;
    *(_OWORD *)(v58 + 688) = 0u;
    *(_OWORD *)(v58 + 640) = 0u;
    *(_OWORD *)(v58 + 656) = 0u;
    *(_OWORD *)(v58 + 624) = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(STACK[0xBF0]) = 136315906;
    *(unint64_t *)((char *)v57 + 4) = (unint64_t)"operator[]";
    LOWORD(STACK[0xBFC]) = 1024;
    *(_DWORD *)((char *)v57 + 14) = 468;
    LOWORD(STACK[0xC02]) = 2048;
    *(unint64_t *)((char *)v57 + 20) = 8;
    LOWORD(STACK[0xC0C]) = 2048;
    *(unint64_t *)((char *)v57 + 30) = v60;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_329;
  }
  uint64_t v69 = (re::DynamicString *)(*((void *)v56 + 94) + 256);
  STACK[0x3F0] = (unint64_t)"zUnit";
  STACK[0x3F8] = 5;
  re::DynamicString::operator=(v69, (uint64_t)&STACK[0x3F0]);
  unint64_t v60 = *((void *)v56 + 93);
  if (v60 <= 9)
  {
LABEL_329:
    *(void *)&a48 = 0;
    *(_OWORD *)(v58 + 672) = 0u;
    *(_OWORD *)(v58 + 688) = 0u;
    *(_OWORD *)(v58 + 640) = 0u;
    *(_OWORD *)(v58 + 656) = 0u;
    *(_OWORD *)(v58 + 624) = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(STACK[0xBF0]) = 136315906;
    *(unint64_t *)((char *)v57 + 4) = (unint64_t)"operator[]";
    LOWORD(STACK[0xBFC]) = 1024;
    *(_DWORD *)((char *)v57 + 14) = 468;
    LOWORD(STACK[0xC02]) = 2048;
    *(unint64_t *)((char *)v57 + 20) = 9;
    LOWORD(STACK[0xC0C]) = 2048;
    *(unint64_t *)((char *)v57 + 30) = v60;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_330;
  }
  uint64_t v70 = (re::DynamicString *)(*((void *)v56 + 94) + 288);
  STACK[0x3F0] = (unint64_t)"gray";
  STACK[0x3F8] = 4;
  re::DynamicString::operator=(v70, (uint64_t)&STACK[0x3F0]);
  unint64_t v60 = *((void *)v56 + 93);
  if (v60 <= 0xA)
  {
LABEL_330:
    *(void *)&a48 = 0;
    *(_OWORD *)(v58 + 672) = 0u;
    *(_OWORD *)(v58 + 688) = 0u;
    *(_OWORD *)(v58 + 640) = 0u;
    *(_OWORD *)(v58 + 656) = 0u;
    *(_OWORD *)(v58 + 624) = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(STACK[0xBF0]) = 136315906;
    *(unint64_t *)((char *)v57 + 4) = (unint64_t)"operator[]";
    LOWORD(STACK[0xBFC]) = 1024;
    *(_DWORD *)((char *)v57 + 14) = 468;
    LOWORD(STACK[0xC02]) = 2048;
    *(unint64_t *)((char *)v57 + 20) = 10;
    LOWORD(STACK[0xC0C]) = 2048;
    *(unint64_t *)((char *)v57 + 30) = v60;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_331;
  }
  uint64_t v71 = (re::DynamicString *)(*((void *)v56 + 94) + 320);
  STACK[0x3F0] = (unint64_t)"identityMatrix";
  STACK[0x3F8] = 14;
  re::DynamicString::operator=(v71, (uint64_t)&STACK[0x3F0]);
  unint64_t v60 = *((void *)v56 + 93);
  if (v60 <= 0xB)
  {
LABEL_331:
    *(void *)&a48 = 0;
    *(_OWORD *)(v58 + 672) = 0u;
    *(_OWORD *)(v58 + 688) = 0u;
    *(_OWORD *)(v58 + 640) = 0u;
    *(_OWORD *)(v58 + 656) = 0u;
    *(_OWORD *)(v58 + 624) = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(STACK[0xBF0]) = 136315906;
    *(unint64_t *)((char *)v57 + 4) = (unint64_t)"operator[]";
    LOWORD(STACK[0xBFC]) = 1024;
    *(_DWORD *)((char *)v57 + 14) = 468;
    LOWORD(STACK[0xC02]) = 2048;
    *(unint64_t *)((char *)v57 + 20) = 11;
    LOWORD(STACK[0xC0C]) = 2048;
    *(unint64_t *)((char *)v57 + 30) = v60;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_332;
  }
  long long v72 = (re::DynamicString *)(*((void *)v56 + 94) + 352);
  STACK[0x3F0] = (unint64_t)"zeros128bytes";
  STACK[0x3F8] = 13;
  re::DynamicString::operator=(v72, (uint64_t)&STACK[0x3F0]);
  unint64_t v60 = *((void *)v56 + 93);
  if (v60 <= 0xC)
  {
LABEL_332:
    *(void *)&a48 = 0;
    *(_OWORD *)(v58 + 672) = 0u;
    *(_OWORD *)(v58 + 688) = 0u;
    *(_OWORD *)(v58 + 640) = 0u;
    *(_OWORD *)(v58 + 656) = 0u;
    *(_OWORD *)(v58 + 624) = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(STACK[0xBF0]) = 136315906;
    *(unint64_t *)((char *)v57 + 4) = (unint64_t)"operator[]";
    LOWORD(STACK[0xBFC]) = 1024;
    *(_DWORD *)((char *)v57 + 14) = 468;
    LOWORD(STACK[0xC02]) = 2048;
    *(unint64_t *)((char *)v57 + 20) = 12;
    LOWORD(STACK[0xC0C]) = 2048;
    *(unint64_t *)((char *)v57 + 30) = v60;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_333;
  }
  long long v73 = (re::DynamicString *)(*((void *)v56 + 94) + 384);
  STACK[0x3F0] = (unint64_t)"zeros1024bytes";
  STACK[0x3F8] = 14;
  re::DynamicString::operator=(v73, (uint64_t)&STACK[0x3F0]);
  unint64_t v60 = *((void *)v56 + 93);
  if (v60 <= 0xD)
  {
LABEL_333:
    *(void *)&a48 = 0;
    *(_OWORD *)(v58 + 672) = 0u;
    *(_OWORD *)(v58 + 688) = 0u;
    *(_OWORD *)(v58 + 640) = 0u;
    *(_OWORD *)(v58 + 656) = 0u;
    *(_OWORD *)(v58 + 624) = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(STACK[0xBF0]) = 136315906;
    *(unint64_t *)((char *)v57 + 4) = (unint64_t)"operator[]";
    LOWORD(STACK[0xBFC]) = 1024;
    *(_DWORD *)((char *)v57 + 14) = 468;
    LOWORD(STACK[0xC02]) = 2048;
    *(unint64_t *)((char *)v57 + 20) = 13;
    LOWORD(STACK[0xC0C]) = 2048;
    *(unint64_t *)((char *)v57 + 30) = v60;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_334:
    a47 = 0;
    *(_OWORD *)&STACK[0x10D0] = 0u;
    *(_OWORD *)&STACK[0x10E0] = 0u;
    *(_OWORD *)&STACK[0x10B0] = 0u;
    *(_OWORD *)&STACK[0x10C0] = 0u;
    *(_OWORD *)&STACK[0x10A0] = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(STACK[0x1070]) = 136315906;
    STACK[0x1074] = (unint64_t)"operator[]";
    LOWORD(STACK[0x107C]) = 1024;
    LODWORD(STACK[0x107E]) = 468;
    LOWORD(STACK[0x1082]) = 2048;
    STACK[0x1084] = 0;
    LOWORD(STACK[0x108C]) = 2048;
    STACK[0x108E] = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_335:
    a47 = 0;
    *(_OWORD *)&STACK[0x10D0] = 0u;
    *(_OWORD *)&STACK[0x10E0] = 0u;
    *(_OWORD *)&STACK[0x10B0] = 0u;
    *(_OWORD *)&STACK[0x10C0] = 0u;
    *(_OWORD *)&STACK[0x10A0] = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(STACK[0x1070]) = 136315906;
    STACK[0x1074] = (unint64_t)"operator[]";
    LOWORD(STACK[0x107C]) = 1024;
    LODWORD(STACK[0x107E]) = 468;
    LOWORD(STACK[0x1082]) = 2048;
    STACK[0x1084] = 1;
    LOWORD(STACK[0x108C]) = 2048;
    STACK[0x108E] = (unint64_t)v54;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_336:
    a47 = 0;
    *(_OWORD *)&STACK[0x10D0] = 0u;
    *(_OWORD *)&STACK[0x10E0] = 0u;
    *(_OWORD *)&STACK[0x10B0] = 0u;
    *(_OWORD *)&STACK[0x10C0] = 0u;
    *(_OWORD *)&STACK[0x10A0] = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(STACK[0x1070]) = 136315906;
    STACK[0x1074] = (unint64_t)"operator[]";
    LOWORD(STACK[0x107C]) = 1024;
    LODWORD(STACK[0x107E]) = 468;
    LOWORD(STACK[0x1082]) = 2048;
    STACK[0x1084] = 2;
    LOWORD(STACK[0x108C]) = 2048;
    STACK[0x108E] = (unint64_t)v54;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_337:
    a47 = 0;
    *(_OWORD *)&STACK[0x10D0] = 0u;
    *(_OWORD *)&STACK[0x10E0] = 0u;
    *(_OWORD *)&STACK[0x10B0] = 0u;
    *(_OWORD *)&STACK[0x10C0] = 0u;
    *(_OWORD *)&STACK[0x10A0] = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(STACK[0x1070]) = 136315906;
    STACK[0x1074] = (unint64_t)"operator[]";
    LOWORD(STACK[0x107C]) = 1024;
    LODWORD(STACK[0x107E]) = 468;
    LOWORD(STACK[0x1082]) = 2048;
    STACK[0x1084] = 3;
    LOWORD(STACK[0x108C]) = 2048;
    STACK[0x108E] = (unint64_t)v54;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_338:
    a47 = 0;
    int v130 = &STACK[0x1070];
    *(_OWORD *)&STACK[0x10D0] = 0u;
    *(_OWORD *)&STACK[0x10E0] = 0u;
    *(_OWORD *)&STACK[0x10B0] = 0u;
    *(_OWORD *)&STACK[0x10C0] = 0u;
    *(_OWORD *)&STACK[0x10A0] = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(STACK[0x1070]) = 136315906;
    STACK[0x1074] = (unint64_t)"operator[]";
    LOWORD(STACK[0x107C]) = 1024;
    LODWORD(STACK[0x107E]) = 468;
    LOWORD(STACK[0x1082]) = 2048;
    STACK[0x1084] = 4;
    LOWORD(STACK[0x108C]) = 2048;
    STACK[0x108E] = (unint64_t)v57;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_339:
    a47 = 0;
    *(_OWORD *)&STACK[0x10D0] = 0u;
    *(_OWORD *)&STACK[0x10E0] = 0u;
    *(_OWORD *)&STACK[0x10B0] = 0u;
    *(_OWORD *)&STACK[0x10C0] = 0u;
    *(_OWORD *)&STACK[0x10A0] = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(STACK[0x1070]) = 136315906;
    STACK[0x1074] = (unint64_t)"operator[]";
    LOWORD(STACK[0x107C]) = 1024;
    LODWORD(STACK[0x107E]) = 468;
    LOWORD(STACK[0x1082]) = 2048;
    STACK[0x1084] = 5;
    LOWORD(STACK[0x108C]) = 2048;
    STACK[0x108E] = (unint64_t)v130;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_340:
    a47 = 0;
    *(_OWORD *)&STACK[0x10D0] = 0u;
    *(_OWORD *)&STACK[0x10E0] = 0u;
    *(_OWORD *)&STACK[0x10B0] = 0u;
    *(_OWORD *)&STACK[0x10C0] = 0u;
    *(_OWORD *)&STACK[0x10A0] = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(STACK[0x1070]) = 136315906;
    STACK[0x1074] = (unint64_t)"operator[]";
    LOWORD(STACK[0x107C]) = 1024;
    LODWORD(STACK[0x107E]) = 468;
    LOWORD(STACK[0x1082]) = 2048;
    STACK[0x1084] = 6;
    LOWORD(STACK[0x108C]) = 2048;
    STACK[0x108E] = (unint64_t)v130;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_341:
    a47 = 0;
    *(_OWORD *)&STACK[0x10D0] = 0u;
    *(_OWORD *)&STACK[0x10E0] = 0u;
    *(_OWORD *)&STACK[0x10B0] = 0u;
    *(_OWORD *)&STACK[0x10C0] = 0u;
    *(_OWORD *)&STACK[0x10A0] = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(STACK[0x1070]) = 136315906;
    STACK[0x1074] = (unint64_t)"operator[]";
    LOWORD(STACK[0x107C]) = 1024;
    LODWORD(STACK[0x107E]) = 468;
    LOWORD(STACK[0x1082]) = 2048;
    STACK[0x1084] = 7;
    LOWORD(STACK[0x108C]) = 2048;
    STACK[0x108E] = (unint64_t)v130;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_342:
    a47 = 0;
    *(_OWORD *)&STACK[0x10D0] = 0u;
    *(_OWORD *)&STACK[0x10E0] = 0u;
    *(_OWORD *)&STACK[0x10B0] = 0u;
    *(_OWORD *)&STACK[0x10C0] = 0u;
    *(_OWORD *)&STACK[0x10A0] = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(STACK[0x1070]) = 136315906;
    STACK[0x1074] = (unint64_t)"operator[]";
    LOWORD(STACK[0x107C]) = 1024;
    LODWORD(STACK[0x107E]) = 468;
    LOWORD(STACK[0x1082]) = 2048;
    STACK[0x1084] = 8;
    LOWORD(STACK[0x108C]) = 2048;
    STACK[0x108E] = (unint64_t)v130;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_343:
    a47 = 0;
    *(_OWORD *)&STACK[0x10D0] = 0u;
    *(_OWORD *)&STACK[0x10E0] = 0u;
    *(_OWORD *)&STACK[0x10B0] = 0u;
    *(_OWORD *)&STACK[0x10C0] = 0u;
    *(_OWORD *)&STACK[0x10A0] = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(STACK[0x1070]) = 136315906;
    STACK[0x1074] = (unint64_t)"operator[]";
    LOWORD(STACK[0x107C]) = 1024;
    LODWORD(STACK[0x107E]) = 468;
    LOWORD(STACK[0x1082]) = 2048;
    STACK[0x1084] = 9;
    LOWORD(STACK[0x108C]) = 2048;
    STACK[0x108E] = (unint64_t)v130;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_344:
    a47 = 0;
    *(_OWORD *)&STACK[0x10D0] = 0u;
    *(_OWORD *)&STACK[0x10E0] = 0u;
    *(_OWORD *)&STACK[0x10B0] = 0u;
    *(_OWORD *)&STACK[0x10C0] = 0u;
    *(_OWORD *)&STACK[0x10A0] = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(STACK[0x1070]) = 136315906;
    STACK[0x1074] = (unint64_t)"operator[]";
    LOWORD(STACK[0x107C]) = 1024;
    LODWORD(STACK[0x107E]) = 468;
    LOWORD(STACK[0x1082]) = 2048;
    STACK[0x1084] = 10;
    LOWORD(STACK[0x108C]) = 2048;
    STACK[0x108E] = (unint64_t)v130;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_345:
    a47 = 0;
    *(_OWORD *)&STACK[0x10D0] = 0u;
    *(_OWORD *)&STACK[0x10E0] = 0u;
    *(_OWORD *)&STACK[0x10B0] = 0u;
    *(_OWORD *)&STACK[0x10C0] = 0u;
    *(_OWORD *)&STACK[0x10A0] = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(STACK[0x1070]) = 136315906;
    STACK[0x1074] = (unint64_t)"operator[]";
    LOWORD(STACK[0x107C]) = 1024;
    LODWORD(STACK[0x107E]) = 468;
    LOWORD(STACK[0x1082]) = 2048;
    STACK[0x1084] = 11;
    LOWORD(STACK[0x108C]) = 2048;
    STACK[0x108E] = (unint64_t)v130;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_346:
    a47 = 0;
    *(_OWORD *)&STACK[0x10D0] = 0u;
    *(_OWORD *)&STACK[0x10E0] = 0u;
    *(_OWORD *)&STACK[0x10B0] = 0u;
    *(_OWORD *)&STACK[0x10C0] = 0u;
    *(_OWORD *)&STACK[0x10A0] = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(STACK[0x1070]) = 136315906;
    STACK[0x1074] = (unint64_t)"operator[]";
    LOWORD(STACK[0x107C]) = 1024;
    LODWORD(STACK[0x107E]) = 468;
    LOWORD(STACK[0x1082]) = 2048;
    STACK[0x1084] = 12;
    LOWORD(STACK[0x108C]) = 2048;
    STACK[0x108E] = (unint64_t)v130;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_347;
  }
  uint64_t v74 = (re::DynamicString *)(*((void *)v56 + 94) + 416);
  STACK[0x3F0] = (unint64_t)"zeros2048bytes";
  STACK[0x3F8] = 14;
  re::DynamicString::operator=(v74, (uint64_t)&STACK[0x3F0]);
  a44 = 0;
  a45 = 0;
  STACK[0x3F0] = (unint64_t)objc_msgSend(v54[23], sel_newBufferWithBytes_length_options_, &a44, 16, 0);
  long long v75 = (id *)((char *)v56 + 760);
  NS::SharedPtr<MTL::Texture>::operator=((void **)v56 + 95, (void **)&STACK[0x3F0]);
  if (STACK[0x3F0]) {

  }
  objc_msgSend(*((id *)v56 + 95), sel_setLabel_, @"fallback.zeros");
  __asm { FMOV            V0.4S, #1.0 }
  a43 = _Q0;
  STACK[0x3F0] = (unint64_t)objc_msgSend(v54[23], sel_newBufferWithBytes_length_options_, &a43, 16, 0);
  uint64_t v81 = (id *)((char *)v56 + 768);
  NS::SharedPtr<MTL::Texture>::operator=((void **)v56 + 96, (void **)&STACK[0x3F0]);
  if (STACK[0x3F0]) {

  }
  objc_msgSend(*((id *)v56 + 96), sel_setLabel_, @"fallback.ones");
  a42 = xmmword_23435FD50;
  STACK[0x3F0] = (unint64_t)objc_msgSend(v54[23], sel_newBufferWithBytes_length_options_, &a42, 16, 0);
  unint64_t v82 = (id *)((char *)v56 + 776);
  NS::SharedPtr<MTL::Texture>::operator=((void **)v56 + 97, (void **)&STACK[0x3F0]);
  if (STACK[0x3F0]) {

  }
  objc_msgSend(*((id *)v56 + 97), sel_setLabel_, @"fallback.xDir");
  a41 = xmmword_23435FD60;
  STACK[0x3F0] = (unint64_t)objc_msgSend(v54[23], sel_newBufferWithBytes_length_options_, &a41, 16, 0);
  __int16 v57 = (unint64_t *)((char *)v56 + 784);
  NS::SharedPtr<MTL::Texture>::operator=((void **)v56 + 98, (void **)&STACK[0x3F0]);
  if (STACK[0x3F0]) {

  }
  objc_msgSend(*((id *)v56 + 98), sel_setLabel_, @"fallback.yDir");
  a40 = xmmword_23435FD80;
  STACK[0x3F0] = (unint64_t)objc_msgSend(v54[23], sel_newBufferWithBytes_length_options_, &a40, 16, 0);
  uint64_t v83 = (id *)((char *)v56 + 792);
  NS::SharedPtr<MTL::Texture>::operator=((void **)v56 + 99, (void **)&STACK[0x3F0]);
  if (STACK[0x3F0]) {

  }
  objc_msgSend(*((id *)v56 + 99), sel_setLabel_, @"fallback.zDir");
  a39 = xmmword_23435FBB0;
  STACK[0x3F0] = (unint64_t)objc_msgSend(v54[23], sel_newBufferWithBytes_length_options_, &a39, 16, 0);
  __int16 v292 = (id *)((char *)v56 + 800);
  NS::SharedPtr<MTL::Texture>::operator=((void **)v56 + 100, (void **)&STACK[0x3F0]);
  if (STACK[0x3F0]) {

  }
  objc_msgSend(*((id *)v56 + 100), sel_setLabel_, @"fallback.origin");
  a38 = xmmword_234376D50;
  STACK[0x3F0] = (unint64_t)objc_msgSend(v54[23], sel_newBufferWithBytes_length_options_, &a38, 16, 0);
  int v291 = (id *)((char *)v56 + 808);
  NS::SharedPtr<MTL::Texture>::operator=((void **)v56 + 101, (void **)&STACK[0x3F0]);
  if (STACK[0x3F0]) {

  }
  objc_msgSend(*((id *)v56 + 101), sel_setLabel_, @"fallback.xUnit");
  a37 = xmmword_234385470;
  STACK[0x3F0] = (unint64_t)objc_msgSend(v54[23], sel_newBufferWithBytes_length_options_, &a37, 16, 0);
  __int16 v290 = (id *)((char *)v56 + 816);
  NS::SharedPtr<MTL::Texture>::operator=((void **)v56 + 102, (void **)&STACK[0x3F0]);
  if (STACK[0x3F0]) {

  }
  objc_msgSend(*((id *)v56 + 102), sel_setLabel_, @"fallback.yUnit");
  a36 = xmmword_2343854A0;
  STACK[0x3F0] = (unint64_t)objc_msgSend(v54[23], sel_newBufferWithBytes_length_options_, &a36, 16, 0);
  v289 = (id *)((char *)v56 + 824);
  NS::SharedPtr<MTL::Texture>::operator=((void **)v56 + 103, (void **)&STACK[0x3F0]);
  if (STACK[0x3F0]) {

  }
  objc_msgSend(*((id *)v56 + 103), sel_setLabel_, @"fallback.zUnit");
  a35 = xmmword_2343BFCA0;
  STACK[0x3F0] = (unint64_t)objc_msgSend(v54[23], sel_newBufferWithBytes_length_options_, &a35, 16, 0);
  int v288 = (id *)((char *)v56 + 832);
  NS::SharedPtr<MTL::Texture>::operator=((void **)v56 + 104, (void **)&STACK[0x3F0]);
  if (STACK[0x3F0]) {

  }
  objc_msgSend(*((id *)v56 + 104), sel_setLabel_, @"fallback.gray");
  a31 = 0u;
  a32 = 0u;
  a33 = 0u;
  a34 = 0u;
  LODWORD(a31) = 1065353216;
  DWORD1(are::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 1065353216;
  DWORD2(a33) = 1065353216;
  HIDWORD(a34) = 1065353216;
  STACK[0x3F0] = (unint64_t)objc_msgSend(v54[23], sel_newBufferWithBytes_length_options_, &a31, 64, 0);
  long long v287 = (id *)((char *)v56 + 840);
  NS::SharedPtr<MTL::Texture>::operator=((void **)v56 + 105, (void **)&STACK[0x3F0]);
  if (STACK[0x3F0]) {

  }
  objc_msgSend(*((id *)v56 + 105), sel_setLabel_, @"fallback.identityMatrix");
  *(_OWORD *)&STACK[0x1060] = 0u;
  *(_OWORD *)&STACK[0x1050] = 0u;
  *(_OWORD *)&STACK[0x1040] = 0u;
  *(_OWORD *)&STACK[0x1030] = 0u;
  *(_OWORD *)&STACK[0x1020] = 0u;
  *(_OWORD *)&STACK[0x1010] = 0u;
  *(_OWORD *)&STACK[0x1000] = 0u;
  *(_OWORD *)&STACK[0xFF0] = 0u;
  STACK[0x3F0] = (unint64_t)objc_msgSend(v54[23], sel_newBufferWithBytes_length_options_, &STACK[0xFF0], 128, 0);
  long long v286 = (id *)((char *)v56 + 848);
  NS::SharedPtr<MTL::Texture>::operator=((void **)v56 + 106, (void **)&STACK[0x3F0]);
  if (STACK[0x3F0]) {

  }
  objc_msgSend(*((id *)v56 + 106), sel_setLabel_, @"fallback.zeros128bytes");
  bzero(&STACK[0xBF0], 0x400uLL);
  STACK[0x3F0] = (unint64_t)objc_msgSend(v54[23], sel_newBufferWithBytes_length_options_, &STACK[0xBF0], 1024, 0);
  long long v285 = (id *)((char *)v56 + 856);
  NS::SharedPtr<MTL::Texture>::operator=((void **)v56 + 107, (void **)&STACK[0x3F0]);
  if (STACK[0x3F0]) {

  }
  objc_msgSend(*((id *)v56 + 107), sel_setLabel_, @"fallback.zeros1024bytes");
  bzero(&STACK[0x3F0], 0x800uLL);
  *(void *)&a48 = objc_msgSend(v54[23], sel_newBufferWithBytes_length_options_, &STACK[0x3F0], 2048, 0);
  uint64_t v284 = (id *)((char *)v56 + 864);
  NS::SharedPtr<MTL::Texture>::operator=((void **)v56 + 108, (void **)&a48);
  if ((void)a48) {

  }
  objc_msgSend(*((id *)v56 + 108), sel_setLabel_, @"fallback.zeros2048bytes");
  *(void *)&a48 = objc_msgSend(v54[23], sel_newBufferWithBytes_length_options_, &re::GammaLUTHelper::gammaLUTData(void)::s_luts, 0x20000, 0);
  NS::SharedPtr<MTL::Texture>::operator=((void **)v56 + 109, (void **)&a48);
  if ((void)a48) {

  }
  objc_msgSend(*((id *)v56 + 109), sel_setLabel_, @"gammaLUTs");
  a48 = xmmword_23435FD50;
  a49 = xmmword_23435FD60;
  a50 = xmmword_23435FD80;
  a51 = xmmword_23435FBB0;
  a52 = xmmword_23435FD50;
  a53 = xmmword_23435FD60;
  *(_OWORD *)&STACK[0x260] = xmmword_23435FD80;
  *(_OWORD *)&STACK[0x270] = xmmword_23435FBB0;
  *(_OWORD *)&STACK[0x280] = xmmword_23435FD50;
  *(_OWORD *)&STACK[0x290] = xmmword_23435FD60;
  *(_OWORD *)&STACK[0x2A0] = xmmword_23435FD80;
  *(_OWORD *)&STACK[0x2B0] = xmmword_23435FD50;
  *(_OWORD *)&STACK[0x2C0] = xmmword_23435FD60;
  *(_OWORD *)&STACK[0x2D0] = xmmword_23435FD80;
  STACK[0x10A0] = (unint64_t)objc_msgSend(v54[23], sel_newBufferWithBytes_length_options_, &a48, 256, 0);
  NS::SharedPtr<MTL::Texture>::operator=((void **)v56 + 110, (void **)&STACK[0x10A0]);
  unsigned int v84 = (void *)STACK[0x10A0];
  if (STACK[0x10A0]) {

  }
  int64_t v54 = (id *)*((void *)v56 + 91);
  if (!*((void *)v56 + 93)) {
    goto LABEL_334;
  }
  unint64_t v85 = (re::BufferTable *)*((void *)v56 + 91);
  uint64_t v86 = *((void *)v56 + 94);
  unint64_t v87 = *(void *)(v86 + 8);
  if (v87)
  {
    unsigned int v89 = *(unsigned char **)(v86 + 16);
    if (!v89)
    {
      uint64_t v93 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_59;
    }
    LOBYTE(v86) = *v89;
  }
  else
  {
    unint64_t v88 = v87 >> 8;
    unsigned int v89 = (unsigned char *)(v86 + 9);
    LOBYTE(v86) = v88;
  }
  if ((_BYTE)v86)
  {
    uint64_t v86 = (char)v86;
    char v90 = v89[1];
    if (v90)
    {
      long long v91 = v89 + 2;
      do
      {
        uint64_t v86 = 31 * v86 + v90;
        int v92 = *v91++;
        char v90 = v92;
      }
      while (v92);
    }
    uint64_t v93 = v86 & 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v93 = 0;
  }
LABEL_59:
  STACK[0x1070] = v93;
  STACK[0x10A0] = (unint64_t)*v75;
  LODWORD(STACK[0x10A8]) = 0;
  LODWORD(STACK[0x10AC]) = objc_msgSend(*v75, sel_length);
  re::BufferTable::setBuffer(v85, (const re::WeakStringID *)&STACK[0x1070], (uint64_t)&STACK[0x10A0]);
  if (STACK[0x10A0]) {

  }
  int64_t v54 = (id *)*((void *)v56 + 93);
  if ((unint64_t)v54 <= 1) {
    goto LABEL_335;
  }
  int v94 = (re::BufferTable *)*((void *)v56 + 91);
  uint64_t v95 = *((void *)v56 + 94);
  unint64_t v96 = *(void *)(v95 + 40);
  if (v96)
  {
    unint64_t v98 = *(unsigned char **)(v95 + 48);
    if (!v98)
    {
      uint64_t v102 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_73;
    }
    LOBYTE(v95) = *v98;
  }
  else
  {
    unint64_t v97 = v96 >> 8;
    unint64_t v98 = (unsigned char *)(v95 + 41);
    LOBYTE(v95) = v97;
  }
  if ((_BYTE)v95)
  {
    uint64_t v95 = (char)v95;
    char v99 = v98[1];
    if (v99)
    {
      uint64_t v100 = v98 + 2;
      do
      {
        uint64_t v95 = 31 * v95 + v99;
        int v101 = *v100++;
        char v99 = v101;
      }
      while (v101);
    }
    uint64_t v102 = v95 & 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v102 = 0;
  }
LABEL_73:
  STACK[0x1070] = v102;
  STACK[0x10A0] = (unint64_t)*v81;
  LODWORD(STACK[0x10A8]) = 0;
  LODWORD(STACK[0x10AC]) = objc_msgSend(*v81, sel_length);
  re::BufferTable::setBuffer(v94, (const re::WeakStringID *)&STACK[0x1070], (uint64_t)&STACK[0x10A0]);
  if (STACK[0x10A0]) {

  }
  int64_t v54 = (id *)*((void *)v56 + 93);
  if ((unint64_t)v54 <= 2) {
    goto LABEL_336;
  }
  unint64_t v103 = (re::BufferTable *)*((void *)v56 + 91);
  uint64_t v104 = *((void *)v56 + 94);
  unint64_t v105 = *(void *)(v104 + 72);
  if (v105)
  {
    uint64_t v107 = *(unsigned char **)(v104 + 80);
    if (!v107)
    {
      uint64_t v111 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_87;
    }
    LOBYTE(v104) = *v107;
  }
  else
  {
    unint64_t v106 = v105 >> 8;
    uint64_t v107 = (unsigned char *)(v104 + 73);
    LOBYTE(v104) = v106;
  }
  if ((_BYTE)v104)
  {
    uint64_t v104 = (char)v104;
    char v108 = v107[1];
    if (v108)
    {
      unint64_t v109 = v107 + 2;
      do
      {
        uint64_t v104 = 31 * v104 + v108;
        int v110 = *v109++;
        char v108 = v110;
      }
      while (v110);
    }
    uint64_t v111 = v104 & 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v111 = 0;
  }
LABEL_87:
  STACK[0x1070] = v111;
  STACK[0x10A0] = (unint64_t)*v82;
  LODWORD(STACK[0x10A8]) = 0;
  LODWORD(STACK[0x10AC]) = objc_msgSend(*v82, sel_length);
  re::BufferTable::setBuffer(v103, (const re::WeakStringID *)&STACK[0x1070], (uint64_t)&STACK[0x10A0]);
  if (STACK[0x10A0]) {

  }
  int64_t v54 = (id *)*((void *)v56 + 93);
  if ((unint64_t)v54 <= 3) {
    goto LABEL_337;
  }
  unint64_t v112 = (re::BufferTable *)*((void *)v56 + 91);
  uint64_t v113 = *((void *)v56 + 94);
  unint64_t v114 = *(void *)(v113 + 104);
  if (v114)
  {
    uint64_t v116 = *(unsigned char **)(v113 + 112);
    if (!v116)
    {
      uint64_t v120 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_101;
    }
    LOBYTE(v113) = *v116;
  }
  else
  {
    unint64_t v115 = v114 >> 8;
    uint64_t v116 = (unsigned char *)(v113 + 105);
    LOBYTE(v113) = v115;
  }
  if ((_BYTE)v113)
  {
    uint64_t v113 = (char)v113;
    char v117 = v116[1];
    if (v117)
    {
      uint64_t v118 = v116 + 2;
      do
      {
        uint64_t v113 = 31 * v113 + v117;
        int v119 = *v118++;
        char v117 = v119;
      }
      while (v119);
    }
    uint64_t v120 = v113 & 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v120 = 0;
  }
LABEL_101:
  STACK[0x1070] = v120;
  STACK[0x10A0] = (unint64_t)(id)*v57;
  LODWORD(STACK[0x10A8]) = 0;
  LODWORD(STACK[0x10AC]) = objc_msgSend((id)*v57, sel_length);
  re::BufferTable::setBuffer(v112, (const re::WeakStringID *)&STACK[0x1070], (uint64_t)&STACK[0x10A0]);
  if (STACK[0x10A0]) {

  }
  __int16 v57 = (unint64_t *)*((void *)v56 + 93);
  if ((unint64_t)v57 <= 4) {
    goto LABEL_338;
  }
  uint64_t v121 = (re::BufferTable *)*((void *)v56 + 91);
  uint64_t v122 = *((void *)v56 + 94);
  unint64_t v123 = *(void *)(v122 + 136);
  if (v123)
  {
    unint64_t v125 = *(unsigned char **)(v122 + 144);
    if (!v125)
    {
      uint64_t v129 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_115;
    }
    LOBYTE(v122) = *v125;
  }
  else
  {
    unint64_t v124 = v123 >> 8;
    unint64_t v125 = (unsigned char *)(v122 + 137);
    LOBYTE(v122) = v124;
  }
  if ((_BYTE)v122)
  {
    uint64_t v122 = (char)v122;
    char v126 = v125[1];
    if (v126)
    {
      BOOL v127 = v125 + 2;
      do
      {
        uint64_t v122 = 31 * v122 + v126;
        int v128 = *v127++;
        char v126 = v128;
      }
      while (v128);
    }
    uint64_t v129 = v122 & 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v129 = 0;
  }
LABEL_115:
  STACK[0x1070] = v129;
  STACK[0x10A0] = (unint64_t)*v83;
  LODWORD(STACK[0x10A8]) = 0;
  LODWORD(STACK[0x10AC]) = objc_msgSend(*v83, sel_length);
  re::BufferTable::setBuffer(v121, (const re::WeakStringID *)&STACK[0x1070], (uint64_t)&STACK[0x10A0]);
  if (STACK[0x10A0]) {

  }
  int v130 = (unint64_t *)*((void *)v56 + 93);
  if ((unint64_t)v130 <= 5) {
    goto LABEL_339;
  }
  __int16 v131 = (re::BufferTable *)*((void *)v56 + 91);
  uint64_t v132 = *((void *)v56 + 94);
  unint64_t v133 = *(void *)(v132 + 168);
  if (v133)
  {
    long long v135 = *(unsigned char **)(v132 + 176);
    if (!v135)
    {
      uint64_t v139 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_129;
    }
    LOBYTE(v1re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = *v135;
  }
  else
  {
    unint64_t v134 = v133 >> 8;
    long long v135 = (unsigned char *)(v132 + 169);
    LOBYTE(v1re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = v134;
  }
  if ((_BYTE)v132)
  {
    uint64_t v132 = (char)v132;
    char v136 = v135[1];
    if (v136)
    {
      long long v137 = v135 + 2;
      do
      {
        uint64_t v132 = 31 * v132 + v136;
        int v138 = *v137++;
        char v136 = v138;
      }
      while (v138);
    }
    uint64_t v139 = v132 & 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v139 = 0;
  }
LABEL_129:
  STACK[0x1070] = v139;
  STACK[0x10A0] = (unint64_t)*v292;
  LODWORD(STACK[0x10A8]) = 0;
  LODWORD(STACK[0x10AC]) = objc_msgSend(*v292, sel_length);
  re::BufferTable::setBuffer(v131, (const re::WeakStringID *)&STACK[0x1070], (uint64_t)&STACK[0x10A0]);
  if (STACK[0x10A0]) {

  }
  int v130 = (unint64_t *)*((void *)v56 + 93);
  if ((unint64_t)v130 <= 6) {
    goto LABEL_340;
  }
  unint64_t v140 = (re::BufferTable *)*((void *)v56 + 91);
  uint64_t v141 = *((void *)v56 + 94);
  unint64_t v142 = *(void *)(v141 + 200);
  if (v142)
  {
    unsigned int v144 = *(unsigned char **)(v141 + 208);
    if (!v144)
    {
      uint64_t v148 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_143;
    }
    LOBYTE(v141) = *v144;
  }
  else
  {
    unint64_t v143 = v142 >> 8;
    unsigned int v144 = (unsigned char *)(v141 + 201);
    LOBYTE(v141) = v143;
  }
  if ((_BYTE)v141)
  {
    uint64_t v141 = (char)v141;
    char v145 = v144[1];
    if (v145)
    {
      int v146 = v144 + 2;
      do
      {
        uint64_t v141 = 31 * v141 + v145;
        int v147 = *v146++;
        char v145 = v147;
      }
      while (v147);
    }
    uint64_t v148 = v141 & 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v148 = 0;
  }
LABEL_143:
  STACK[0x1070] = v148;
  STACK[0x10A0] = (unint64_t)*v291;
  LODWORD(STACK[0x10A8]) = 0;
  LODWORD(STACK[0x10AC]) = objc_msgSend(*v291, sel_length);
  re::BufferTable::setBuffer(v140, (const re::WeakStringID *)&STACK[0x1070], (uint64_t)&STACK[0x10A0]);
  if (STACK[0x10A0]) {

  }
  int v130 = (unint64_t *)*((void *)v56 + 93);
  if ((unint64_t)v130 <= 7) {
    goto LABEL_341;
  }
  unint64_t v149 = (re::BufferTable *)*((void *)v56 + 91);
  uint64_t v150 = *((void *)v56 + 94);
  unint64_t v151 = *(void *)(v150 + 232);
  if (v151)
  {
    unint64_t v153 = *(unsigned char **)(v150 + 240);
    if (!v153)
    {
      uint64_t v157 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_157;
    }
    LOBYTE(v150) = *v153;
  }
  else
  {
    unint64_t v152 = v151 >> 8;
    unint64_t v153 = (unsigned char *)(v150 + 233);
    LOBYTE(v150) = v152;
  }
  if ((_BYTE)v150)
  {
    uint64_t v150 = (char)v150;
    char v154 = v153[1];
    if (v154)
    {
      unint64_t v155 = v153 + 2;
      do
      {
        uint64_t v150 = 31 * v150 + v154;
        int v156 = *v155++;
        char v154 = v156;
      }
      while (v156);
    }
    uint64_t v157 = v150 & 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v157 = 0;
  }
LABEL_157:
  STACK[0x1070] = v157;
  STACK[0x10A0] = (unint64_t)*v290;
  LODWORD(STACK[0x10A8]) = 0;
  LODWORD(STACK[0x10AC]) = objc_msgSend(*v290, sel_length);
  re::BufferTable::setBuffer(v149, (const re::WeakStringID *)&STACK[0x1070], (uint64_t)&STACK[0x10A0]);
  if (STACK[0x10A0]) {

  }
  int v130 = (unint64_t *)*((void *)v56 + 93);
  if ((unint64_t)v130 <= 8) {
    goto LABEL_342;
  }
  uint64_t v158 = (re::BufferTable *)*((void *)v56 + 91);
  uint64_t v159 = *((void *)v56 + 94);
  unint64_t v160 = *(void *)(v159 + 264);
  if (v160)
  {
    uint64_t v162 = *(unsigned char **)(v159 + 272);
    if (!v162)
    {
      uint64_t v166 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_171;
    }
    LOBYTE(v159) = *v162;
  }
  else
  {
    unint64_t v161 = v160 >> 8;
    uint64_t v162 = (unsigned char *)(v159 + 265);
    LOBYTE(v159) = v161;
  }
  if ((_BYTE)v159)
  {
    uint64_t v159 = (char)v159;
    char v163 = v162[1];
    if (v163)
    {
      v164 = v162 + 2;
      do
      {
        uint64_t v159 = 31 * v159 + v163;
        int v165 = *v164++;
        char v163 = v165;
      }
      while (v165);
    }
    uint64_t v166 = v159 & 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v166 = 0;
  }
LABEL_171:
  STACK[0x1070] = v166;
  STACK[0x10A0] = (unint64_t)*v289;
  LODWORD(STACK[0x10A8]) = 0;
  LODWORD(STACK[0x10AC]) = objc_msgSend(*v289, sel_length);
  re::BufferTable::setBuffer(v158, (const re::WeakStringID *)&STACK[0x1070], (uint64_t)&STACK[0x10A0]);
  if (STACK[0x10A0]) {

  }
  int v130 = (unint64_t *)*((void *)v56 + 93);
  if ((unint64_t)v130 <= 9) {
    goto LABEL_343;
  }
  v167 = (re::BufferTable *)*((void *)v56 + 91);
  uint64_t v168 = *((void *)v56 + 94);
  unint64_t v169 = *(void *)(v168 + 296);
  if (v169)
  {
    unint64_t v171 = *(unsigned char **)(v168 + 304);
    if (!v171)
    {
      uint64_t v175 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_185;
    }
    LOBYTE(v168) = *v171;
  }
  else
  {
    unint64_t v170 = v169 >> 8;
    unint64_t v171 = (unsigned char *)(v168 + 297);
    LOBYTE(v168) = v170;
  }
  if ((_BYTE)v168)
  {
    uint64_t v168 = (char)v168;
    char v172 = v171[1];
    if (v172)
    {
      long long v173 = v171 + 2;
      do
      {
        uint64_t v168 = 31 * v168 + v172;
        int v174 = *v173++;
        char v172 = v174;
      }
      while (v174);
    }
    uint64_t v175 = v168 & 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v175 = 0;
  }
LABEL_185:
  STACK[0x1070] = v175;
  STACK[0x10A0] = (unint64_t)*v288;
  LODWORD(STACK[0x10A8]) = 0;
  LODWORD(STACK[0x10AC]) = objc_msgSend(*v288, sel_length);
  re::BufferTable::setBuffer(v167, (const re::WeakStringID *)&STACK[0x1070], (uint64_t)&STACK[0x10A0]);
  if (STACK[0x10A0]) {

  }
  int v130 = (unint64_t *)*((void *)v56 + 93);
  if ((unint64_t)v130 <= 0xA) {
    goto LABEL_344;
  }
  __n128 v176 = (re::BufferTable *)*((void *)v56 + 91);
  uint64_t v177 = *((void *)v56 + 94);
  unint64_t v178 = *(void *)(v177 + 328);
  if (v178)
  {
    char v180 = *(unsigned char **)(v177 + 336);
    if (!v180)
    {
      uint64_t v184 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_199;
    }
    LOBYTE(v177) = *v180;
  }
  else
  {
    unint64_t v179 = v178 >> 8;
    char v180 = (unsigned char *)(v177 + 329);
    LOBYTE(v177) = v179;
  }
  if ((_BYTE)v177)
  {
    uint64_t v177 = (char)v177;
    char v181 = v180[1];
    if (v181)
    {
      uint64_t v182 = v180 + 2;
      do
      {
        uint64_t v177 = 31 * v177 + v181;
        int v183 = *v182++;
        char v181 = v183;
      }
      while (v183);
    }
    uint64_t v184 = v177 & 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v184 = 0;
  }
LABEL_199:
  STACK[0x1070] = v184;
  STACK[0x10A0] = (unint64_t)*v287;
  LODWORD(STACK[0x10A8]) = 0;
  LODWORD(STACK[0x10AC]) = objc_msgSend(*v287, sel_length);
  re::BufferTable::setBuffer(v176, (const re::WeakStringID *)&STACK[0x1070], (uint64_t)&STACK[0x10A0]);
  if (STACK[0x10A0]) {

  }
  int v130 = (unint64_t *)*((void *)v56 + 93);
  if ((unint64_t)v130 <= 0xB) {
    goto LABEL_345;
  }
  uint64_t v185 = (re::BufferTable *)*((void *)v56 + 91);
  uint64_t v186 = *((void *)v56 + 94);
  unint64_t v187 = *(void *)(v186 + 360);
  if (v187)
  {
    uint64_t v189 = *(unsigned char **)(v186 + 368);
    if (!v189)
    {
      uint64_t v193 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_213;
    }
    LOBYTE(v186) = *v189;
  }
  else
  {
    unint64_t v188 = v187 >> 8;
    uint64_t v189 = (unsigned char *)(v186 + 361);
    LOBYTE(v186) = v188;
  }
  if ((_BYTE)v186)
  {
    uint64_t v186 = (char)v186;
    char v190 = v189[1];
    if (v190)
    {
      long long v191 = v189 + 2;
      do
      {
        uint64_t v186 = 31 * v186 + v190;
        int v192 = *v191++;
        char v190 = v192;
      }
      while (v192);
    }
    uint64_t v193 = v186 & 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v193 = 0;
  }
LABEL_213:
  STACK[0x1070] = v193;
  STACK[0x10A0] = (unint64_t)*v286;
  LODWORD(STACK[0x10A8]) = 0;
  LODWORD(STACK[0x10AC]) = objc_msgSend(*v286, sel_length);
  re::BufferTable::setBuffer(v185, (const re::WeakStringID *)&STACK[0x1070], (uint64_t)&STACK[0x10A0]);
  if (STACK[0x10A0]) {

  }
  int v130 = (unint64_t *)*((void *)v56 + 93);
  if ((unint64_t)v130 <= 0xC) {
    goto LABEL_346;
  }
  unint64_t v194 = (re::BufferTable *)*((void *)v56 + 91);
  uint64_t v195 = *((void *)v56 + 94);
  unint64_t v196 = *(void *)(v195 + 392);
  if (v196)
  {
    unint64_t v198 = *(unsigned char **)(v195 + 400);
    if (!v198)
    {
      uint64_t v202 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_227;
    }
    LOBYTE(v195) = *v198;
  }
  else
  {
    unint64_t v197 = v196 >> 8;
    unint64_t v198 = (unsigned char *)(v195 + 393);
    LOBYTE(v195) = v197;
  }
  if ((_BYTE)v195)
  {
    uint64_t v195 = (char)v195;
    char v199 = v198[1];
    if (v199)
    {
      uint64_t v200 = v198 + 2;
      do
      {
        uint64_t v195 = 31 * v195 + v199;
        int v201 = *v200++;
        char v199 = v201;
      }
      while (v201);
    }
    uint64_t v202 = v195 & 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v202 = 0;
  }
LABEL_227:
  STACK[0x1070] = v202;
  STACK[0x10A0] = (unint64_t)*v285;
  LODWORD(STACK[0x10A8]) = 0;
  LODWORD(STACK[0x10AC]) = objc_msgSend(*v285, sel_length);
  re::BufferTable::setBuffer(v194, (const re::WeakStringID *)&STACK[0x1070], (uint64_t)&STACK[0x10A0]);
  if (STACK[0x10A0]) {

  }
  int v130 = (unint64_t *)*((void *)v56 + 93);
  if ((unint64_t)v130 <= 0xD)
  {
LABEL_347:
    a47 = 0;
    *(_OWORD *)&STACK[0x10D0] = 0u;
    *(_OWORD *)&STACK[0x10E0] = 0u;
    *(_OWORD *)&STACK[0x10B0] = 0u;
    *(_OWORD *)&STACK[0x10C0] = 0u;
    *(_OWORD *)&STACK[0x10A0] = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(STACK[0x1070]) = 136315906;
    STACK[0x1074] = (unint64_t)"operator[]";
    LOWORD(STACK[0x107C]) = 1024;
    LODWORD(STACK[0x107E]) = 468;
    LOWORD(STACK[0x1082]) = 2048;
    STACK[0x1084] = 13;
    LOWORD(STACK[0x108C]) = 2048;
    STACK[0x108E] = (unint64_t)v130;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v203 = (re::BufferTable *)*((void *)v56 + 91);
  uint64_t v204 = *((void *)v56 + 94);
  unint64_t v205 = *(void *)(v204 + 424);
  if (v205)
  {
    uint64_t v207 = *(unsigned char **)(v204 + 432);
    if (!v207)
    {
      uint64_t v211 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_241;
    }
    LOBYTE(v204) = *v207;
  }
  else
  {
    unint64_t v206 = v205 >> 8;
    uint64_t v207 = (unsigned char *)(v204 + 425);
    LOBYTE(v204) = v206;
  }
  if ((_BYTE)v204)
  {
    uint64_t v204 = (char)v204;
    char v208 = v207[1];
    if (v208)
    {
      unint64_t v209 = v207 + 2;
      do
      {
        uint64_t v204 = 31 * v204 + v208;
        int v210 = *v209++;
        char v208 = v210;
      }
      while (v210);
    }
    uint64_t v211 = v204 & 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v211 = 0;
  }
LABEL_241:
  STACK[0x1070] = v211;
  STACK[0x10A0] = (unint64_t)*v284;
  LODWORD(STACK[0x10A8]) = 0;
  LODWORD(STACK[0x10AC]) = objc_msgSend(*v284, sel_length);
  re::BufferTable::setBuffer(v203, (const re::WeakStringID *)&STACK[0x1070], (uint64_t)&STACK[0x10A0]);
  if (STACK[0x10A0]) {

  }
  unsigned int v212 = (_anonymous_namespace_ *)re::MaterialManager::createBufferTableForName(v56, "brdf");
  *((void *)v56 + 89) = v212;
  unint64_t v213 = (_anonymous_namespace_ *)*((void *)v56 + 89);
  STACK[0x10A0] = 0x2803BD43311CF958;
  LOBYTE(STACK[0x1070]) = 0;
  re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::addNew(v213, &STACK[0x10A0], (char *)&STACK[0x1070]);
  if (!*((_DWORD *)v213 + 70)) {
    *((_DWORD *)v213 + 70) = 1;
  }
  unint64_t v214 = (_anonymous_namespace_ *)re::MaterialManager::createBufferTableForName(v56, "global");
  *((void *)v56 + 90) = v214;
  unsigned int v215 = (_anonymous_namespace_ *)*((void *)v56 + 90);
  STACK[0x10A0] = 0x1C6D7B14F4E32CD0;
  LOBYTE(STACK[0x1070]) = 0;
  re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::addNew(v215, &STACK[0x10A0], (char *)&STACK[0x1070]);
  if (!*((_DWORD *)v215 + 70)) {
    *((_DWORD *)v215 + 70) = 1;
  }
  BOOL v216 = (_anonymous_namespace_ *)*((void *)v56 + 90);
  STACK[0x10A0] = 0x526A495CDE0FLL;
  LOBYTE(STACK[0x1070]) = 1;
  re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::addNew(v216, &STACK[0x10A0], (char *)&STACK[0x1070]);
  if (*((_DWORD *)v216 + 70) <= 1u) {
    *((_DWORD *)v216 + 70) = 2;
  }
  uint64_t v217 = (_anonymous_namespace_ *)*((void *)v56 + 90);
  STACK[0x10A0] = 0x478674A22C6B2A1ALL;
  LOBYTE(STACK[0x1070]) = 2;
  re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::addNew(v217, &STACK[0x10A0], (char *)&STACK[0x1070]);
  if (*((_DWORD *)v217 + 70) <= 2u) {
    *((_DWORD *)v217 + 70) = 3;
  }
  uint64_t v218 = (re::BufferTable *)*((void *)v56 + 90);
  STACK[0x1070] = 0x1C6D62426C554CB0;
  STACK[0x10A0] = (unint64_t)*((id *)v56 + 107);
  LODWORD(STACK[0x10A8]) = 0;
  LODWORD(STACK[0x10AC]) = objc_msgSend(*((id *)v56 + 107), sel_length);
  re::BufferTable::setBuffer(v218, (const re::WeakStringID *)&STACK[0x1070], (uint64_t)&STACK[0x10A0]);
  if (STACK[0x10A0]) {

  }
  unint64_t v219 = (re::BufferTable *)*((void *)v56 + 90);
  STACK[0x1070] = 0x526A495CDE0FLL;
  STACK[0x10A0] = (unint64_t)*((id *)v56 + 109);
  LODWORD(STACK[0x10A8]) = 0;
  LODWORD(STACK[0x10AC]) = objc_msgSend(*((id *)v56 + 109), sel_length);
  re::BufferTable::setBuffer(v219, (const re::WeakStringID *)&STACK[0x1070], (uint64_t)&STACK[0x10A0]);
  if (STACK[0x10A0]) {

  }
  uint64_t v220 = (re::BufferTable *)*((void *)v56 + 90);
  STACK[0x1070] = 0x478674A22C6B2A1ALL;
  STACK[0x10A0] = (unint64_t)*((id *)v56 + 110);
  LODWORD(STACK[0x10A8]) = 0;
  LODWORD(STACK[0x10AC]) = objc_msgSend(*((id *)v56 + 110), sel_length);
  re::BufferTable::setBuffer(v220, (const re::WeakStringID *)&STACK[0x1070], (uint64_t)&STACK[0x10A0]);
  v221 = (void *)STACK[0x10A0];
  if (STACK[0x10A0]) {

  }
  uint64_t v222 = *((void *)v56 + 82);
  v222 += 72;
  re::DynamicArray<re::TextureViews<NS::SharedPtr<MTL::Texture>>>::setCapacity((void *)v222, 5uLL);
  ++*(_DWORD *)(v222 + 24);
  unsigned int v223 = (void *)*((void *)v56 + 82);
  a30 = 0xB3E5B3C154101;
  STACK[0x10A0] = 0;
  re::TextureTable::setTexture(v223, &a30, (id *)&STACK[0x10A0]);
  if (STACK[0x10A0]) {

  }
  unint64_t v224 = (void *)*((void *)v56 + 82);
  a29 = 0x645EADD8982CBD05;
  a30 = 0;
  STACK[0x10A0] = 0;
  re::TextureTable::setTexture(v224, &a29, (id *)&STACK[0x10A0]);
  if (STACK[0x10A0]) {

  }
  unint64_t v225 = (void *)*((void *)v56 + 82);
  a28 = 0x259D0C231F804627;
  a29 = 0;
  STACK[0x10A0] = 0;
  re::TextureTable::setTexture(v225, &a28, (id *)&STACK[0x10A0]);
  if (STACK[0x10A0]) {

  }
  a28 = 0;
  unint64_t v226 = (re *)MurmurHash3_x64_128((uint64_t)"fallback", 8, 0, &STACK[0x10A0]);
  unint64_t v227 = (STACK[0x10A8] + (STACK[0x10A0] << 6) + (STACK[0x10A0] >> 2) - 0x61C8864680B583E9) ^ STACK[0x10A0];
  if (*((void *)v56 + 74))
  {
    uint64_t v228 = *(unsigned int *)(*((void *)v56 + 75) + 4 * (v227 % *((unsigned int *)v56 + 154)));
    if (v228 != 0x7FFFFFFF)
    {
      uint64_t v237 = *((void *)v56 + 76);
      if (*(void *)(v237 + 24 * v228 + 8) == v227)
      {
LABEL_272:
        unint64_t v230 = *(re **)(v237 + 24 * v228 + 16);
        goto LABEL_275;
      }
      while (1)
      {
        unsigned int v283 = *(_DWORD *)(v237
                         + 24 * *(unsigned int *)(*((void *)v56 + 75) + 4 * (v227 % *((unsigned int *)v56 + 154)))) & 0x7FFFFFFF;
        if (v283 == 0x7FFFFFFF) {
          break;
        }
        if (*(void *)(v237 + 24 * v283 + 8) == v227)
        {
          while (1)
          {
            LODWORD(v228) = *(_DWORD *)(v237 + 24 * v228) & 0x7FFFFFFF;
            if (v228 == 0x7FFFFFFF) {
              break;
            }
            if (*(void *)(v237 + 24 * v228 + 8) == v227) {
              goto LABEL_272;
            }
          }
          LODWORD(v228) = 0x7FFFFFFF;
          goto LABEL_272;
        }
      }
    }
  }
  unint64_t v229 = re::globalAllocators(v226);
  unint64_t v226 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v229[2] + 32))(v229[2], 112, 8);
  unint64_t v230 = v226;
  *(_OWORD *)unint64_t v226 = 0u;
  *((_OWORD *)v226 + 1) = 0u;
  *((_OWORD *)v226 + 2) = 0u;
  *((_OWORD *)v226 + 3) = 0u;
  *((_OWORD *)v226 + 4) = 0u;
  *((_OWORD *)v226 + 5) = 0u;
  *((_OWORD *)v226 + 6) = 0u;
  unint64_t v231 = *((void *)v56 + 74);
  if (v231)
  {
    unint64_t v231 = v227 % *((unsigned int *)v56 + 154);
    uint64_t v232 = *(unsigned int *)(*((void *)v56 + 75) + 4 * v231);
    if (v232 != 0x7FFFFFFF)
    {
      uint64_t v282 = *((void *)v56 + 76);
      if (*(void *)(v282 + 24 * v232 + 8) == v227) {
        goto LABEL_275;
      }
      while (1)
      {
        LODWORD(v2re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = *(_DWORD *)(v282 + 24 * v232) & 0x7FFFFFFF;
        if (v232 == 0x7FFFFFFF) {
          break;
        }
        if (*(void *)(v282 + 24 * v232 + 8) == v227) {
          goto LABEL_275;
        }
      }
    }
  }
  uint64_t v233 = *((unsigned int *)v56 + 157);
  if (v233 == 0x7FFFFFFF)
  {
    uint64_t v233 = *((unsigned int *)v56 + 156);
    int v234 = v233;
    if (v233 == *((_DWORD *)v56 + 154))
    {
      re::HashTable<unsigned long,re::TextureTable *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity((uint64_t)v56 + 592, 2 * *((_DWORD *)v56 + 155));
      LODWORD(v231) = v227 % *((unsigned int *)v56 + 154);
      int v234 = *((_DWORD *)v56 + 156);
    }
    *((_DWORD *)v56 + 156) = v234 + 1;
    uint64_t v235 = *((void *)v56 + 76);
    int v236 = *(_DWORD *)(v235 + 24 * v233);
  }
  else
  {
    uint64_t v235 = *((void *)v56 + 76);
    int v236 = *(_DWORD *)(v235 + 24 * v233);
    *((_DWORD *)v56 + 157) = v236 & 0x7FFFFFFF;
  }
  uint64_t v238 = 24 * v233;
  *(_DWORD *)(v235 + v238) = v236 | 0x80000000;
  *(_DWORD *)(*((void *)v56 + 76) + v238) = *(_DWORD *)(*((void *)v56 + 76) + 24 * v233) & 0x80000000 | *(_DWORD *)(*((void *)v56 + 75) + 4 * v231);
  *(void *)(*((void *)v56 + 76) + 24 * v233 + 8) = v227;
  *(void *)(*((void *)v56 + 76) + 24 * v233 + 16) = v230;
  *(_DWORD *)(*((void *)v56 + 75) + 4 * v231) = v233;
  ++*((_DWORD *)v56 + 155);
  ++*((_DWORD *)v56 + 158);
LABEL_275:
  *((void *)v56 + 111) = v230;
  *((void *)v56 + 118) = 0x1515151515151515;
  *((void *)v56 + 119) = 0x1515151515151515;
  *(void *)((char *)v56 + 957) = 0x1515151515151515;
  __int16 v57 = (unint64_t *)((char *)v56 + 904);
  unint64_t v239 = re::s_constantValueTableLayoutCount;
  unint64_t v240 = (_anonymous_namespace_ *)re::DynamicArray<re::HashBrown<re::WeakStringID,re::ConstantLocation,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::ConstantLocation>,false>>::setCapacity((void *)v56 + 113, v239);
  ++*((_DWORD *)v56 + 232);
  if (re::s_constantValueTableLayoutCount)
  {
    unsigned int v241 = re::s_constantValueTableLayouts;
    unint64_t v242 = &re::s_constantValueTableLayouts[re::s_constantValueTableLayoutCount];
    uint64_t v58 = 24;
    do
    {
      unint64_t v243 = *v241;
      if (*v241)
      {
        uint64_t v244 = *((unsigned int *)v243 + 4);
        *(_OWORD *)&STACK[0x10C0] = 0u;
        *(_OWORD *)&STACK[0x10D0] = 0u;
        *(_OWORD *)&STACK[0x10A0] = 0u;
        *(_OWORD *)&STACK[0x10B0] = 0u;
        int v245 = *((_DWORD *)v243 + 4);
        if (v245)
        {
          unint64_t v246 = v243[3];
          uint64_t v247 = &v246[24 * v245];
          do
          {
            int v248 = (char *)*((void *)v246 + 2);
            if (v248)
            {
              uint64_t v249 = *v248;
              if (*v248)
              {
                char v250 = v248[1];
                if (v250)
                {
                  BOOL v251 = (unsigned __int8 *)(v248 + 2);
                  do
                  {
                    uint64_t v249 = 31 * v249 + v250;
                    int v252 = *v251++;
                    char v250 = v252;
                  }
                  while (v252);
                }
                v249 &= ~0x8000000000000000;
              }
            }
            else
            {
              uint64_t v249 = 0x7FFFFFFFFFFFFFFFLL;
            }
            STACK[0x1070] = v249;
            int v253 = *(_DWORD *)v246;
            int v254 = *((_DWORD *)v246 + 1);
            v246 += 24;
            LOWORD(a47) = v253;
            WORD1(a47) = v254;
            re::HashBrown<re::WeakStringID,re::ConstantLocation,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::ConstantLocation>,false>::addNew((_anonymous_namespace_ *)&STACK[0x10A0], &STACK[0x1070], (int *)&a47);
          }
          while (v246 != v247);
        }
        unint64_t v60 = 0;
        int64_t v54 = (id *)*v243;
        while (1)
        {
          uint64_t v255 = (_anonymous_namespace_ *)strcmp(re::s_materialTableIDMappings[v60], (const char *)v54);
          if (!v255) {
            break;
          }
          if (++v60 == 168)
          {
            unint64_t v60 = 0;
            goto LABEL_293;
          }
        }
        if (v60 >= 0x15u)
        {
          re::internal::assertLog((re::internal *)6, v256, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < N", "operator[]", 234, v60, 21);
          _os_crash();
          __break(1u);
          goto LABEL_320;
        }
LABEL_293:
        unint64_t v257 = *((void *)v56 + 115);
        *((unsigned char *)v56 + v60 + 944) = v257;
        unint64_t v258 = *((void *)v56 + 114);
        if (v257 >= v258)
        {
          unint64_t v259 = v257 + 1;
          if (v258 < v257 + 1)
          {
            if (*v57)
            {
              uint64_t v260 = 2 * v258;
              _ZF = v258 == 0;
              unint64_t v261 = 8;
              if (!_ZF) {
                unint64_t v261 = v260;
              }
              if (v261 <= v259) {
                unint64_t v262 = v259;
              }
              else {
                unint64_t v262 = v261;
              }
              re::DynamicArray<re::HashBrown<re::WeakStringID,re::ConstantLocation,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::ConstantLocation>,false>>::setCapacity((void *)v56 + 113, v262);
            }
            else
            {
              re::DynamicArray<re::HashBrown<re::WeakStringID,re::ConstantLocation,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::ConstantLocation>,false>>::setCapacity((void *)v56 + 113, v259);
              ++*((_DWORD *)v56 + 232);
            }
          }
          unint64_t v257 = *((void *)v56 + 115);
        }
        long long v263 = (unint64_t *)(*((void *)v56 + 117) + (v257 << 6));
        *((_OWORD *)v263 + 2) = 0u;
        *((_OWORD *)v263 + 3) = 0u;
        *(_OWORD *)long long v263 = 0u;
        *((_OWORD *)v263 + 1) = 0u;
        unint64_t v264 = v263[7];
        v263[7] = STACK[0x10D8];
        STACK[0x10D8] = v264;
        unint64_t v265 = *v263;
        *long long v263 = STACK[0x10A0];
        STACK[0x10A0] = v265;
        unint64_t v266 = v263[1];
        v263[1] = STACK[0x10A8];
        STACK[0x10A8] = v266;
        unint64_t v267 = v263[2];
        v263[2] = STACK[0x10B0];
        STACK[0x10B0] = v267;
        unint64_t v268 = v263[5];
        v263[5] = STACK[0x10C8];
        STACK[0x10C8] = v268;
        unint64_t v269 = v263[6];
        v263[6] = STACK[0x10D0];
        STACK[0x10D0] = v269;
        unint64_t v270 = v263[3];
        v263[3] = STACK[0x10B8];
        STACK[0x10B8] = v270;
        unint64_t v271 = v263[4];
        v263[4] = STACK[0x10C0];
        STACK[0x10C0] = v271;
        ++*((void *)v56 + 115);
        ++*((_DWORD *)v56 + 232);
        re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::deinit((uint64_t)&STACK[0x10A0]);
      }
      ++v241;
    }
    while (v241 != v242);
  }
  long long v272 = (long long *)((char *)v56 + 968);
  re::MaterialManager::getDefaultVariations((re::MaterialManager *)*(unsigned __int8 *)(*((void *)v56 + 112) + 305), 0, 0, *(unsigned __int8 *)(*((void *)v56 + 112) + 309), (long long *)&STACK[0x10A0]);
  if ((unint64_t *)((char *)v56 + 968) != &STACK[0x10A0])
  {
    long long v273 = *(_OWORD *)&STACK[0x10B0];
    long long v274 = *v272;
    long long v275 = *(_OWORD *)((char *)v56 + 984);
    *long long v272 = *(_OWORD *)&STACK[0x10A0];
    *(_OWORD *)((char *)v56 + 984) = v273;
    unint64_t v276 = *((void *)v56 + 128);
    unint64_t v277 = STACK[0x10D0];
    *((void *)v56 + 128) = STACK[0x10D8];
    unint64_t v278 = *((void *)v56 + 127);
    *((void *)v56 + 127) = v277;
    STACK[0x10D8] = v276;
    STACK[0x10D0] = v278;
    *(_OWORD *)&STACK[0x10A0] = v274;
    *(_OWORD *)&STACK[0x10B0] = v275;
    long long v279 = *(_OWORD *)((char *)v56 + 1000);
    *(_OWORD *)((char *)v56 + 1000) = *(_OWORD *)&STACK[0x10C0];
    *(_OWORD *)&STACK[0x10C0] = v279;
  }
  re::HashBrown<unsigned long,re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::deinit((uint64_t)&STACK[0x10A0]);
  re::DynamicArray<re::RigNodeConstraint>::setCapacity((void *)v56 + 135, 0);
  ++*((_DWORD *)v56 + 276);
  *((_DWORD *)v56 + 281) = 8;
  return re::DataArray<re::MaterialParameterBlock>::allocBlock((void *)v56 + 135);
}

uint64_t re::MaterialManager::createTextureTableForName(re::MaterialManager *this, const char *__s)
{
  void v14[2] = *MEMORY[0x263EF8340];
  size_t v4 = strlen(__s);
  if (v4)
  {
    MurmurHash3_x64_128((uint64_t)__s, v4, 0, (unint64_t *)v14);
    unint64_t v5 = (v14[1] + (v14[0] << 6) + ((unint64_t)v14[0] >> 2) - 0x61C8864680B583E9) ^ v14[0];
  }
  else
  {
    unint64_t v5 = 0;
  }
  v14[0] = v5;
  BOOL v6 = re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::containsKey((uint64_t)this + 496, v14);
  if (v6)
  {
    unsigned int v7 = 0x7FFFFFFF;
    if (*((void *)this + 62))
    {
      unsigned int v8 = *(_DWORD *)(*((void *)this + 63) + 4 * (v14[0] % (unint64_t)*((unsigned int *)this + 130)));
      if (v8 != 0x7FFFFFFF)
      {
        uint64_t v9 = *((void *)this + 64);
        unsigned int v7 = *(_DWORD *)(*((void *)this + 63) + 4 * (v14[0] % (unint64_t)*((unsigned int *)this + 130)));
        if (*(void *)(v9 + 24 * v8 + 8) != v14[0])
        {
          while (1)
          {
            unsigned int v7 = *(_DWORD *)(v9
                           + 24
                           * *(unsigned int *)(*((void *)this + 63)
                                             + 4 * (v14[0] % (unint64_t)*((unsigned int *)this + 130)))) & 0x7FFFFFFF;
            if (v7 == 0x7FFFFFFF) {
              break;
            }
            if (*(void *)(v9 + 24 * v7 + 8) == v14[0]) {
              return *(void *)(*((void *)this + 64) + 24 * v7 + 16);
            }
          }
          unsigned int v7 = 0x7FFFFFFF;
        }
      }
    }
    return *(void *)(*((void *)this + 64) + 24 * v7 + 16);
  }
  else
  {
    int v10 = re::globalAllocators((re *)v6);
    uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v10[2] + 32))(v10[2], 112, 8);
    *(_OWORD *)(v11 + 8) = 0u;
    *(_OWORD *)(v11 + 24) = 0u;
    *(_OWORD *)(v11 + 40) = 0u;
    *(_OWORD *)(v11 + 56) = 0u;
    *(_OWORD *)(v11 + 72) = 0u;
    *(_OWORD *)(v11 + 88) = 0u;
    *(void *)(v11 + 104) = 0;
    *(void *)uint64_t v11 = &unk_26E710940;
    uint64_t v13 = v11;
    re::HashTable<unsigned long,re::TextureTable *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addNew<re::TextureTable *&>((uint64_t)this + 496, (unint64_t *)v14, &v13);
    return v13;
  }
}

uint64_t re::MaterialManager::createBufferTableForName(re::MaterialManager *this, const char *__s)
{
  v15[2] = *MEMORY[0x263EF8340];
  size_t v4 = strlen(__s);
  if (v4)
  {
    MurmurHash3_x64_128((uint64_t)__s, v4, 0, v15);
    unint64_t v5 = (v15[1] + (v15[0] << 6) + (v15[0] >> 2) - 0x61C8864680B583E9) ^ v15[0];
  }
  else
  {
    unint64_t v5 = 0;
  }
  v15[0] = v5;
  BOOL v6 = (void *)((char *)this + 544);
  BOOL v7 = re::HashTable<unsigned long,re::BufferTable *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::containsKey((uint64_t)this + 544, v5);
  if (v7)
  {
    unsigned int v8 = 0x7FFFFFFF;
    if (*v6)
    {
      unsigned int v9 = *(_DWORD *)(*((void *)this + 69) + 4 * (v5 % *((unsigned int *)this + 142)));
      if (v9 != 0x7FFFFFFF)
      {
        uint64_t v10 = *((void *)this + 70);
        unsigned int v8 = *(_DWORD *)(*((void *)this + 69) + 4 * (v5 % *((unsigned int *)this + 142)));
        if (*(void *)(v10 + 24 * v9 + 8) != v5)
        {
          while (1)
          {
            unsigned int v8 = *(_DWORD *)(v10
                           + 24 * *(unsigned int *)(*((void *)this + 69) + 4 * (v5 % *((unsigned int *)this + 142)))) & 0x7FFFFFFF;
            if (v8 == 0x7FFFFFFF) {
              break;
            }
            if (*(void *)(v10 + 24 * v8 + 8) == v5) {
              return *(void *)(*((void *)this + 70) + 24 * v8 + 16);
            }
          }
          unsigned int v8 = 0x7FFFFFFF;
        }
      }
    }
    return *(void *)(*((void *)this + 70) + 24 * v8 + 16);
  }
  else
  {
    uint64_t v11 = re::globalAllocators((re *)v7);
    uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v11[2] + 32))(v11[2], 288, 8);
    *(_OWORD *)uint64_t v12 = 0u;
    *(_OWORD *)(v12 + 16) = 0u;
    *(_OWORD *)(v12 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0u;
    *(_OWORD *)(v12 + 48) = 0u;
    *(_OWORD *)(v12 + 64) = 0u;
    *(_OWORD *)(v12 + 80) = 0u;
    *(_OWORD *)(v12 + re::DynamicArray<re::RigComponentConstraint>::deinit((uint64_t)this + 96) = 0u;
    *(_OWORD *)(v12 + 112) = 0u;
    *(_OWORD *)(v12 + 128) = 0u;
    *(_OWORD *)(v12 + 144) = 0u;
    *(_OWORD *)(v12 + 160) = 0u;
    *(_OWORD *)(v12 + 176) = 0u;
    *(_OWORD *)(v12 + 192) = 0u;
    *(_OWORD *)(v12 + 208) = 0u;
    *(_OWORD *)(v12 + 224) = 0u;
    *(_OWORD *)(v12 + 240) = 0u;
    *(_OWORD *)(v12 + 256) = 0u;
    *(_OWORD *)(v12 + 272) = 0u;
    *(_DWORD *)(v12 + 160) = 1;
    *(void *)(v12 + 176) = 0;
    *(void *)(v12 + 184) = 0;
    *(void *)(v12 + 168) = 0;
    *(_DWORD *)(v12 + 192) = 0;
    *(void *)(v12 + 208) = 0;
    *(void *)(v12 + 216) = 0;
    *(void *)(v12 + 200) = 0;
    *(_DWORD *)(v12 + 224) = 0;
    *(_OWORD *)(v12 + 2re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0u;
    *(_OWORD *)(v12 + 248) = 0u;
    *(_DWORD *)(v12 + 264) = 0;
    uint64_t v14 = v12;
    re::HashTable<unsigned long,re::BufferTable *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addNew<re::BufferTable *&>((uint64_t)v6, v15, &v14);
  }
  return v12;
}

double re::MaterialManager::getDefaultVariations@<D0>(re::MaterialManager *this@<X0>, int a2@<W1>, int a3@<W2>, unsigned int a4@<W3>, long long *a5@<X8>)
{
  unsigned int v8 = this;
  uint64_t v219 = *MEMORY[0x263EF8340];
  a5[2] = 0u;
  a5[3] = 0u;
  *a5 = 0u;
  a5[1] = 0u;
  memset(v187, 0, sizeof(v187));
  long long v216 = 0uLL;
  LODWORD(v217) = 0;
  WORD4(v218) = 1;
  *((void *)&v217 + 1) = 0;
  *(void *)&long long v218 = 0;
  LODWORD(v215) = 1179701;
  re::DynamicArray<float *>::setCapacity((void *)&v215 + 1, 2uLL);
  LODWORD(v217) = v217 + 1;
  *(void *)&long long v207 = 0;
  re::DynamicArray<re::TransitionCondition *>::add((void *)&v215 + 1, &v207);
  *(void *)&long long v207 = 1;
  re::DynamicArray<re::TransitionCondition *>::add((void *)&v215 + 1, &v207);
  BYTE9(v218) = 1;
  *(void *)&long long v218 = 1;
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)v187, (const re::DynamicString *)&v211, (uint64_t)&v215);
  if (*((void *)&v215 + 1) && *((void *)&v217 + 1)) {
    (*(void (**)(void))(**((void **)&v215 + 1) + 40))(*((void *)&v215 + 1));
  }
  uint64_t v12 = (_anonymous_namespace_ *)v211;
  if (void)v211 && (BYTE8(v211)) {
    uint64_t v12 = (_anonymous_namespace_ *)(*(uint64_t (**)(void, void))(*(void *)v211 + 40))(v211, v212);
  }
  long long v216 = 0uLL;
  LODWORD(v217) = 0;
  WORD4(v218) = 1;
  *((void *)&v217 + 1) = 0;
  *(void *)&long long v218 = 0;
  LODWORD(v215) = 6750237;
  re::DynamicArray<float *>::setCapacity((void *)&v215 + 1, 5uLL);
  uint64_t v14 = 0;
  LODWORD(v217) = v217 + 1;
  do
  {
    *(void *)&long long v207 = v14;
    re::DynamicArray<re::TransitionCondition *>::add((void *)&v215 + 1, &v207);
    ++v14;
  }
  while (v14 != 5);
  BYTE9(v218) = 1;
  *(void *)&long long v218 = 4;
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)v187, (const re::DynamicString *)&v211, (uint64_t)&v215);
  if (*((void *)&v215 + 1) && *((void *)&v217 + 1)) {
    (*(void (**)(void))(**((void **)&v215 + 1) + 40))(*((void *)&v215 + 1));
  }
  uint64_t v15 = (_anonymous_namespace_ *)v211;
  if (void)v211 && (BYTE8(v211)) {
    uint64_t v15 = (_anonymous_namespace_ *)(*(uint64_t (**)(void, void))(*(void *)v211 + 40))(v211, v212);
  }
  long long v216 = 0uLL;
  LODWORD(v217) = 0;
  WORD4(v218) = 1;
  *((void *)&v217 + 1) = 0;
  *(void *)&long long v218 = 0;
  LODWORD(v215) = 6684701;
  re::DynamicArray<float *>::setCapacity((void *)&v215 + 1, 4uLL);
  uint64_t v17 = 0;
  LODWORD(v217) = v217 + 1;
  do
  {
    *(void *)&long long v207 = v17;
    re::DynamicArray<re::TransitionCondition *>::add((void *)&v215 + 1, &v207);
    ++v17;
  }
  while (v17 != 4);
  BYTE9(v218) = 1;
  *(void *)&long long v218 = 3;
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)v187, (const re::DynamicString *)&v211, (uint64_t)&v215);
  if (*((void *)&v215 + 1) && *((void *)&v217 + 1)) {
    (*(void (**)(void))(**((void **)&v215 + 1) + 40))(*((void *)&v215 + 1));
  }
  uint64_t v18 = (_anonymous_namespace_ *)v211;
  if (void)v211 && (BYTE8(v211)) {
    uint64_t v18 = (_anonymous_namespace_ *)(*(uint64_t (**)(void, void))(*(void *)v211 + 40))(v211, v212);
  }
  long long v216 = 0uLL;
  LODWORD(v217) = 0;
  WORD4(v218) = 1;
  *((void *)&v217 + 1) = 0;
  *(void *)&long long v218 = 0;
  LODWORD(v215) = 786485;
  re::DynamicArray<float *>::setCapacity((void *)&v215 + 1, 2uLL);
  LODWORD(v217) = v217 + 1;
  *(void *)&long long v207 = 0;
  re::DynamicArray<re::TransitionCondition *>::add((void *)&v215 + 1, &v207);
  *(void *)&long long v207 = 1;
  re::DynamicArray<re::TransitionCondition *>::add((void *)&v215 + 1, &v207);
  BYTE9(v218) = 1;
  *(void *)&long long v218 = 1;
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)v187, (const re::DynamicString *)&v211, (uint64_t)&v215);
  if (*((void *)&v215 + 1) && *((void *)&v217 + 1)) {
    (*(void (**)(void))(**((void **)&v215 + 1) + 40))(*((void *)&v215 + 1));
  }
  uint64_t v20 = (_anonymous_namespace_ *)v211;
  if (void)v211 && (BYTE8(v211)) {
    uint64_t v20 = (_anonymous_namespace_ *)(*(uint64_t (**)(void, void))(*(void *)v211 + 40))(v211, v212);
  }
  long long v216 = 0uLL;
  LODWORD(v217) = 0;
  WORD4(v218) = 1;
  *((void *)&v217 + 1) = 0;
  *(void *)&long long v218 = 0;
  LODWORD(v215) = 6815797;
  re::DynamicArray<float *>::setCapacity((void *)&v215 + 1, 2uLL);
  LODWORD(v217) = v217 + 1;
  *(void *)&long long v207 = 0;
  re::DynamicArray<re::TransitionCondition *>::add((void *)&v215 + 1, &v207);
  *(void *)&long long v207 = 1;
  re::DynamicArray<re::TransitionCondition *>::add((void *)&v215 + 1, &v207);
  BYTE9(v218) = 1;
  *(void *)&long long v218 = 1;
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)v187, (const re::DynamicString *)&v211, (uint64_t)&v215);
  if (*((void *)&v215 + 1) && *((void *)&v217 + 1)) {
    (*(void (**)(void))(**((void **)&v215 + 1) + 40))(*((void *)&v215 + 1));
  }
  uint64_t v22 = (_anonymous_namespace_ *)v211;
  if (void)v211 && (BYTE8(v211)) {
    uint64_t v22 = (_anonymous_namespace_ *)(*(uint64_t (**)(void, void))(*(void *)v211 + 40))(v211, v212);
  }
  long long v216 = 0uLL;
  LODWORD(v217) = 0;
  WORD4(v218) = 1;
  *((void *)&v217 + 1) = 0;
  *(void *)&long long v218 = 0;
  LODWORD(v215) = 65589;
  re::DynamicArray<float *>::setCapacity((void *)&v215 + 1, 2uLL);
  LODWORD(v217) = v217 + 1;
  *(void *)&long long v207 = 0;
  re::DynamicArray<re::TransitionCondition *>::add((void *)&v215 + 1, &v207);
  *(void *)&long long v207 = 1;
  re::DynamicArray<re::TransitionCondition *>::add((void *)&v215 + 1, &v207);
  BYTE9(v218) = 1;
  *(void *)&long long v218 = 1;
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)v187, (const re::DynamicString *)&v211, (uint64_t)&v215);
  if (*((void *)&v215 + 1) && *((void *)&v217 + 1)) {
    (*(void (**)(void))(**((void **)&v215 + 1) + 40))(*((void *)&v215 + 1));
  }
  signed int v24 = (_anonymous_namespace_ *)v211;
  if (void)v211 && (BYTE8(v211)) {
    signed int v24 = (_anonymous_namespace_ *)(*(uint64_t (**)(void, void))(*(void *)v211 + 40))(v211, v212);
  }
  long long v216 = 0uLL;
  LODWORD(v217) = 0;
  WORD4(v218) = 1;
  *((void *)&v217 + 1) = 0;
  *(void *)&long long v218 = 0;
  LODWORD(v215) = 2293813;
  re::DynamicArray<float *>::setCapacity((void *)&v215 + 1, 2uLL);
  LODWORD(v217) = v217 + 1;
  *(void *)&long long v207 = 0;
  re::DynamicArray<re::TransitionCondition *>::add((void *)&v215 + 1, &v207);
  *(void *)&long long v207 = 1;
  re::DynamicArray<re::TransitionCondition *>::add((void *)&v215 + 1, &v207);
  BYTE9(v218) = 1;
  *(void *)&long long v218 = 1;
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)v187, (const re::DynamicString *)&v211, (uint64_t)&v215);
  if (*((void *)&v215 + 1) && *((void *)&v217 + 1)) {
    (*(void (**)(void))(**((void **)&v215 + 1) + 40))(*((void *)&v215 + 1));
  }
  long long v26 = (_anonymous_namespace_ *)v211;
  if (void)v211 && (BYTE8(v211)) {
    long long v26 = (_anonymous_namespace_ *)(*(uint64_t (**)(void, void))(*(void *)v211 + 40))(v211, v212);
  }
  long long v216 = 0uLL;
  LODWORD(v217) = 0;
  WORD4(v218) = 1;
  *((void *)&v217 + 1) = 0;
  *(void *)&long long v218 = 0;
  LODWORD(v215) = 3735605;
  re::DynamicArray<float *>::setCapacity((void *)&v215 + 1, 1uLL);
  LODWORD(v217) = v217 + 1;
  unint64_t v28 = v8;
  *(void *)&long long v207 = v8;
  re::DynamicArray<re::TransitionCondition *>::add((void *)&v215 + 1, &v207);
  BYTE9(v218) = 1;
  *(void *)&long long v218 = v8;
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)v187, (const re::DynamicString *)&v211, (uint64_t)&v215);
  if (*((void *)&v215 + 1) && *((void *)&v217 + 1)) {
    (*(void (**)(void))(**((void **)&v215 + 1) + 40))(*((void *)&v215 + 1));
  }
  id v29 = (_anonymous_namespace_ *)v211;
  if (void)v211 && (BYTE8(v211)) {
    id v29 = (_anonymous_namespace_ *)(*(uint64_t (**)(void, void))(*(void *)v211 + 40))(v211, v212);
  }
  long long v216 = 0uLL;
  LODWORD(v217) = 0;
  WORD4(v218) = 1;
  *((void *)&v217 + 1) = 0;
  *(void *)&long long v218 = 0;
  LODWORD(v215) = 6488117;
  re::DynamicArray<float *>::setCapacity((void *)&v215 + 1, 2uLL);
  LODWORD(v217) = v217 + 1;
  *(void *)&long long v207 = 0;
  re::DynamicArray<re::TransitionCondition *>::add((void *)&v215 + 1, &v207);
  *(void *)&long long v207 = 1;
  re::DynamicArray<re::TransitionCondition *>::add((void *)&v215 + 1, &v207);
  BYTE9(v218) = 1;
  *(void *)&long long v218 = 0;
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)v187, (const re::DynamicString *)&v211, (uint64_t)&v215);
  if (*((void *)&v215 + 1) && *((void *)&v217 + 1)) {
    (*(void (**)(void))(**((void **)&v215 + 1) + 40))(*((void *)&v215 + 1));
  }
  uint64_t v31 = (_anonymous_namespace_ *)v211;
  if (void)v211 && (BYTE8(v211)) {
    uint64_t v31 = (_anonymous_namespace_ *)(*(uint64_t (**)(void, void))(*(void *)v211 + 40))(v211, v212);
  }
  if (a2)
  {
    long long v216 = 0uLL;
    LODWORD(v217) = 0;
    WORD4(v218) = 1;
    *((void *)&v217 + 1) = 0;
    *(void *)&long long v218 = 0;
    LODWORD(v215) = 5636149;
    re::DynamicArray<float *>::setCapacity((void *)&v215 + 1, 2uLL);
    LODWORD(v217) = v217 + 1;
    *(void *)&long long v207 = 0;
    re::DynamicArray<re::TransitionCondition *>::add((void *)&v215 + 1, &v207);
    *(void *)&long long v207 = 1;
    re::DynamicArray<re::TransitionCondition *>::add((void *)&v215 + 1, &v207);
    BYTE9(v218) = 1;
    *(void *)&long long v218 = 1;
    re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)v187, (const re::DynamicString *)&v211, (uint64_t)&v215);
    if (*((void *)&v215 + 1) && *((void *)&v217 + 1)) {
      (*(void (**)(void))(**((void **)&v215 + 1) + 40))(*((void *)&v215 + 1));
    }
    uint64_t v31 = (_anonymous_namespace_ *)v211;
    if (void)v211 && (BYTE8(v211)) {
      uint64_t v31 = (_anonymous_namespace_ *)(*(uint64_t (**)(void, void))(*(void *)v211 + 40))(v211, v212);
    }
  }
  if (a3)
  {
    long long v216 = 0uLL;
    LODWORD(v217) = 0;
    WORD4(v218) = 1;
    *((void *)&v217 + 1) = 0;
    *(void *)&long long v218 = 0;
    LODWORD(v215) = 7209013;
    re::DynamicArray<float *>::setCapacity((void *)&v215 + 1, 2uLL);
    LODWORD(v217) = v217 + 1;
    *(void *)&long long v207 = 0;
    re::DynamicArray<re::TransitionCondition *>::add((void *)&v215 + 1, &v207);
    *(void *)&long long v207 = 1;
    re::DynamicArray<re::TransitionCondition *>::add((void *)&v215 + 1, &v207);
    BYTE9(v218) = 1;
    *(void *)&long long v218 = 0;
    re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)v187, (const re::DynamicString *)&v211, (uint64_t)&v215);
    if (*((void *)&v215 + 1) && *((void *)&v217 + 1)) {
      (*(void (**)(void))(**((void **)&v215 + 1) + 40))(*((void *)&v215 + 1));
    }
    uint64_t v31 = (_anonymous_namespace_ *)v211;
    if (void)v211 && (BYTE8(v211)) {
      uint64_t v31 = (_anonymous_namespace_ *)(*(uint64_t (**)(void, void))(*(void *)v211 + 40))(v211, v212);
    }
  }
  long long v216 = 0uLL;
  LODWORD(v217) = 0;
  WORD4(v218) = 1;
  *((void *)&v217 + 1) = 0;
  *(void *)&long long v218 = 0;
  LODWORD(v215) = 8323101;
  re::DynamicArray<float *>::setCapacity((void *)&v215 + 1, 3uLL);
  uint64_t v35 = 0;
  LODWORD(v217) = v217 + 1;
  do
  {
    *(void *)&long long v207 = v35;
    re::DynamicArray<re::TransitionCondition *>::add((void *)&v215 + 1, &v207);
    ++v35;
  }
  while (v35 != 3);
  BYTE9(v218) = 1;
  *(void *)&long long v218 = 0;
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)v187, (const re::DynamicString *)&v211, (uint64_t)&v215);
  if (*((void *)&v215 + 1) && *((void *)&v217 + 1)) {
    (*(void (**)(void))(**((void **)&v215 + 1) + 40))(*((void *)&v215 + 1));
  }
  uint64_t v36 = (_anonymous_namespace_ *)v211;
  if (void)v211 && (BYTE8(v211)) {
    uint64_t v36 = (_anonymous_namespace_ *)(*(uint64_t (**)(void, void))(*(void *)v211 + 40))(v211, v212);
  }
  long long v216 = 0uLL;
  LODWORD(v217) = 0;
  WORD4(v218) = 1;
  *((void *)&v217 + 1) = 0;
  *(void *)&long long v218 = 0;
  LODWORD(v215) = 4522037;
  re::DynamicArray<float *>::setCapacity((void *)&v215 + 1, 2uLL);
  LODWORD(v217) = v217 + 1;
  *(void *)&long long v207 = 0;
  re::DynamicArray<re::TransitionCondition *>::add((void *)&v215 + 1, &v207);
  *(void *)&long long v207 = 1;
  re::DynamicArray<re::TransitionCondition *>::add((void *)&v215 + 1, &v207);
  BYTE9(v218) = 1;
  *(void *)&long long v218 = 1;
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)v187, (const re::DynamicString *)&v211, (uint64_t)&v215);
  if (*((void *)&v215 + 1) && *((void *)&v217 + 1)) {
    (*(void (**)(void))(**((void **)&v215 + 1) + 40))(*((void *)&v215 + 1));
  }
  uint64_t v38 = (_anonymous_namespace_ *)v211;
  if (void)v211 && (BYTE8(v211)) {
    uint64_t v38 = (_anonymous_namespace_ *)(*(uint64_t (**)(void, void))(*(void *)v211 + 40))(v211, v212);
  }
  long long v216 = 0uLL;
  LODWORD(v217) = 0;
  WORD4(v218) = 1;
  *((void *)&v217 + 1) = 0;
  *(void *)&long long v218 = 0;
  LODWORD(v215) = 7012381;
  re::DynamicArray<float *>::setCapacity((void *)&v215 + 1, 4uLL);
  uint64_t v40 = 0;
  LODWORD(v217) = v217 + 1;
  do
  {
    *(void *)&long long v207 = v40;
    re::DynamicArray<re::TransitionCondition *>::add((void *)&v215 + 1, &v207);
    ++v40;
  }
  while (v40 != 4);
  BYTE9(v218) = 1;
  *(void *)&long long v218 = 0;
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)v187, (const re::DynamicString *)&v211, (uint64_t)&v215);
  if (*((void *)&v215 + 1) && *((void *)&v217 + 1)) {
    (*(void (**)(void))(**((void **)&v215 + 1) + 40))(*((void *)&v215 + 1));
  }
  uint64_t v41 = (_anonymous_namespace_ *)v211;
  if (void)v211 && (BYTE8(v211)) {
    uint64_t v41 = (_anonymous_namespace_ *)(*(uint64_t (**)(void, void))(*(void *)v211 + 40))(v211, v212);
  }
  long long v216 = 0uLL;
  LODWORD(v217) = 0;
  WORD4(v218) = 1;
  *((void *)&v217 + 1) = 0;
  *(void *)&long long v218 = 0;
  LODWORD(v215) = 9044021;
  re::DynamicArray<float *>::setCapacity((void *)&v215 + 1, 2uLL);
  LODWORD(v217) = v217 + 1;
  *(void *)&long long v207 = 0;
  re::DynamicArray<re::TransitionCondition *>::add((void *)&v215 + 1, &v207);
  *(void *)&long long v207 = 1;
  re::DynamicArray<re::TransitionCondition *>::add((void *)&v215 + 1, &v207);
  BYTE9(v218) = 1;
  *(void *)&long long v218 = a4;
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)v187, (const re::DynamicString *)&v211, (uint64_t)&v215);
  if (*((void *)&v215 + 1) && *((void *)&v217 + 1)) {
    (*(void (**)(void))(**((void **)&v215 + 1) + 40))(*((void *)&v215 + 1));
  }
  uint64_t v43 = (_anonymous_namespace_ *)v211;
  if (void)v211 && (BYTE8(v211)) {
    uint64_t v43 = (_anonymous_namespace_ *)(*(uint64_t (**)(void, void))(*(void *)v211 + 40))(v211, v212);
  }
  long long v216 = 0uLL;
  LODWORD(v217) = 0;
  WORD4(v218) = 1;
  *((void *)&v217 + 1) = 0;
  *(void *)&long long v218 = 0;
  LODWORD(v215) = 9699381;
  re::DynamicArray<float *>::setCapacity((void *)&v215 + 1, 2uLL);
  LODWORD(v217) = v217 + 1;
  *(void *)&long long v207 = 0;
  re::DynamicArray<re::TransitionCondition *>::add((void *)&v215 + 1, &v207);
  *(void *)&long long v207 = 1;
  re::DynamicArray<re::TransitionCondition *>::add((void *)&v215 + 1, &v207);
  BYTE9(v218) = 1;
  *(void *)&long long v218 = 1;
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)v187, (const re::DynamicString *)&v211, (uint64_t)&v215);
  if (*((void *)&v215 + 1) && *((void *)&v217 + 1)) {
    (*(void (**)(void))(**((void **)&v215 + 1) + 40))(*((void *)&v215 + 1));
  }
  uint64_t v45 = (_anonymous_namespace_ *)v211;
  if (void)v211 && (BYTE8(v211)) {
    uint64_t v45 = (_anonymous_namespace_ *)(*(uint64_t (**)(void, void))(*(void *)v211 + 40))(v211, v212);
  }
  long long v216 = 0uLL;
  LODWORD(v217) = 0;
  WORD4(v218) = 1;
  *((void *)&v217 + 1) = 0;
  *(void *)&long long v218 = 0;
  LODWORD(v215) = 4128821;
  re::DynamicArray<float *>::setCapacity((void *)&v215 + 1, 2uLL);
  LODWORD(v217) = v217 + 1;
  *(void *)&long long v207 = 0;
  re::DynamicArray<re::TransitionCondition *>::add((void *)&v215 + 1, &v207);
  *(void *)&long long v207 = 1;
  re::DynamicArray<re::TransitionCondition *>::add((void *)&v215 + 1, &v207);
  BYTE9(v218) = 1;
  *(void *)&long long v218 = 1;
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)v187, (const re::DynamicString *)&v211, (uint64_t)&v215);
  if (*((void *)&v215 + 1) && *((void *)&v217 + 1)) {
    (*(void (**)(void))(**((void **)&v215 + 1) + 40))(*((void *)&v215 + 1));
  }
  unint64_t v47 = (_anonymous_namespace_ *)v211;
  if (void)v211 && (BYTE8(v211)) {
    unint64_t v47 = (_anonymous_namespace_ *)(*(uint64_t (**)(void, void))(*(void *)v211 + 40))(v211, v212);
  }
  long long v216 = 0uLL;
  LODWORD(v217) = 0;
  WORD4(v218) = 1;
  *((void *)&v217 + 1) = 0;
  *(void *)&long long v218 = 0;
  LODWORD(v215) = 9240629;
  re::DynamicArray<float *>::setCapacity((void *)&v215 + 1, 2uLL);
  LODWORD(v217) = v217 + 1;
  *(void *)&long long v207 = 0;
  re::DynamicArray<re::TransitionCondition *>::add((void *)&v215 + 1, &v207);
  *(void *)&long long v207 = 1;
  re::DynamicArray<re::TransitionCondition *>::add((void *)&v215 + 1, &v207);
  BYTE9(v218) = 1;
  *(void *)&long long v218 = 1;
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)v187, (const re::DynamicString *)&v211, (uint64_t)&v215);
  if (*((void *)&v215 + 1) && *((void *)&v217 + 1)) {
    (*(void (**)(void))(**((void **)&v215 + 1) + 40))(*((void *)&v215 + 1));
  }
  if (void)v211 && (BYTE8(v211)) {
    (*(void (**)(void, void))(*(void *)v211 + 40))(v211, v212);
  }
  MurmurHash3_x64_128((uint64_t)"OpaqueCommon", 12, 0, (unint64_t *)&v215);
  *(void *)&long long v215 = (*((void *)&v215 + 1) + ((void)v215 << 6) + ((unint64_t)v215 >> 2) - 0x61C8864680B583E9) ^ v215;
  re::HashBrown<unsigned long,re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::addNew(a5, (uint64_t *)&v215, (uint64_t *)v187);
  long long v217 = 0u;
  long long v218 = 0u;
  if (a4) {
    uint64_t v50 = 16;
  }
  else {
    uint64_t v50 = 0;
  }
  long long v215 = 0uLL;
  long long v216 = 0uLL;
  if (a4)
  {
    long long v212 = 0uLL;
    LODWORD(v213) = 0;
    WORD4(v214) = 1;
    *((void *)&v213 + 1) = 0;
    *(void *)&long long v214 = 0;
    LODWORD(v211) = 1310773;
    re::DynamicArray<float *>::setCapacity((void *)&v211 + 1, 2uLL);
    LODWORD(v213) = v213 + 1;
    *(void *)&long long v203 = 0;
    re::DynamicArray<re::TransitionCondition *>::add((void *)&v211 + 1, &v203);
    *(void *)&long long v203 = 1;
    re::DynamicArray<re::TransitionCondition *>::add((void *)&v211 + 1, &v203);
    BYTE9(v214) = 1;
    *(void *)&long long v214 = 1;
    re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)&v215, (const re::DynamicString *)&v207, (uint64_t)&v211);
    if (*((void *)&v211 + 1) && *((void *)&v213 + 1)) {
      (*(void (**)(void))(**((void **)&v211 + 1) + 40))(*((void *)&v211 + 1));
    }
    int64_t v53 = (_anonymous_namespace_ *)v207;
    if (void)v207 && (BYTE8(v207)) {
      int64_t v53 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v207 + 40))();
    }
    long long v212 = 0uLL;
    LODWORD(v213) = 0;
    WORD4(v214) = 1;
    *((void *)&v213 + 1) = 0;
    *(void *)&long long v214 = 0;
    LODWORD(v211) = 131125;
    re::DynamicArray<float *>::setCapacity((void *)&v211 + 1, 2uLL);
    LODWORD(v213) = v213 + 1;
    *(void *)&long long v203 = 0;
    re::DynamicArray<re::TransitionCondition *>::add((void *)&v211 + 1, &v203);
    *(void *)&long long v203 = 1;
    re::DynamicArray<re::TransitionCondition *>::add((void *)&v211 + 1, &v203);
    BYTE9(v214) = 1;
    *(void *)&long long v214 = 1;
    re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)&v215, (const re::DynamicString *)&v207, (uint64_t)&v211);
    if (*((void *)&v211 + 1) && *((void *)&v213 + 1)) {
      (*(void (**)(void))(**((void **)&v211 + 1) + 40))(*((void *)&v211 + 1));
    }
    uint64_t v55 = (_anonymous_namespace_ *)v207;
    if (void)v207 && (BYTE8(v207)) {
      uint64_t v55 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v207 + 40))();
    }
    long long v212 = 0uLL;
    LODWORD(v213) = 0;
    WORD4(v214) = 1;
    *((void *)&v213 + 1) = 0;
    *(void *)&long long v214 = 0;
    LODWORD(v211) = 1376309;
    re::DynamicArray<float *>::setCapacity((void *)&v211 + 1, 2uLL);
    LODWORD(v213) = v213 + 1;
    *(void *)&long long v203 = 0;
    re::DynamicArray<re::TransitionCondition *>::add((void *)&v211 + 1, &v203);
    *(void *)&long long v203 = 1;
    re::DynamicArray<re::TransitionCondition *>::add((void *)&v211 + 1, &v203);
    BYTE9(v214) = 1;
    *(void *)&long long v214 = 1;
    re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)&v215, (const re::DynamicString *)&v207, (uint64_t)&v211);
    if (*((void *)&v211 + 1) && *((void *)&v213 + 1)) {
      (*(void (**)(void))(**((void **)&v211 + 1) + 40))(*((void *)&v211 + 1));
    }
    __int16 v57 = (_anonymous_namespace_ *)v207;
    if (void)v207 && (BYTE8(v207)) {
      __int16 v57 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v207 + 40))();
    }
    long long v212 = 0uLL;
    LODWORD(v213) = 0;
    WORD4(v214) = 1;
    *((void *)&v213 + 1) = 0;
    *(void *)&long long v214 = 0;
    LODWORD(v211) = 1441845;
    re::DynamicArray<float *>::setCapacity((void *)&v211 + 1, 2uLL);
    LODWORD(v213) = v213 + 1;
    *(void *)&long long v203 = 0;
    re::DynamicArray<re::TransitionCondition *>::add((void *)&v211 + 1, &v203);
    *(void *)&long long v203 = 1;
    re::DynamicArray<re::TransitionCondition *>::add((void *)&v211 + 1, &v203);
    BYTE9(v214) = 1;
    *(void *)&long long v214 = 1;
    re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)&v215, (const re::DynamicString *)&v207, (uint64_t)&v211);
    if (*((void *)&v211 + 1) && *((void *)&v213 + 1)) {
      (*(void (**)(void))(**((void **)&v211 + 1) + 40))(*((void *)&v211 + 1));
    }
    unsigned int v59 = (_anonymous_namespace_ *)v207;
    if (void)v207 && (BYTE8(v207)) {
      unsigned int v59 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v207 + 40))();
    }
    long long v212 = 0uLL;
    LODWORD(v213) = 0;
    WORD4(v214) = 1;
    *((void *)&v213 + 1) = 0;
    *(void *)&long long v214 = 0;
    LODWORD(v211) = 1507381;
    re::DynamicArray<float *>::setCapacity((void *)&v211 + 1, 2uLL);
    LODWORD(v213) = v213 + 1;
    *(void *)&long long v203 = 0;
    re::DynamicArray<re::TransitionCondition *>::add((void *)&v211 + 1, &v203);
    *(void *)&long long v203 = 1;
    re::DynamicArray<re::TransitionCondition *>::add((void *)&v211 + 1, &v203);
    BYTE9(v214) = 1;
    *(void *)&long long v214 = 1;
    re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)&v215, (const re::DynamicString *)&v207, (uint64_t)&v211);
    if (*((void *)&v211 + 1) && *((void *)&v213 + 1)) {
      (*(void (**)(void))(**((void **)&v211 + 1) + 40))(*((void *)&v211 + 1));
    }
    unsigned int v61 = (_anonymous_namespace_ *)v207;
    if (void)v207 && (BYTE8(v207)) {
      unsigned int v61 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v207 + 40))();
    }
    long long v212 = 0uLL;
    LODWORD(v213) = 0;
    WORD4(v214) = 1;
    *((void *)&v213 + 1) = 0;
    *(void *)&long long v214 = 0;
    LODWORD(v211) = 1572917;
    re::DynamicArray<float *>::setCapacity((void *)&v211 + 1, 2uLL);
    LODWORD(v213) = v213 + 1;
    *(void *)&long long v203 = 0;
    re::DynamicArray<re::TransitionCondition *>::add((void *)&v211 + 1, &v203);
    *(void *)&long long v203 = 1;
    re::DynamicArray<re::TransitionCondition *>::add((void *)&v211 + 1, &v203);
    BYTE9(v214) = 1;
    *(void *)&long long v214 = 1;
    re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)&v215, (const re::DynamicString *)&v207, (uint64_t)&v211);
    if (*((void *)&v211 + 1) && *((void *)&v213 + 1)) {
      (*(void (**)(void))(**((void **)&v211 + 1) + 40))(*((void *)&v211 + 1));
    }
    uint64_t v63 = (_anonymous_namespace_ *)v207;
    if (void)v207 && (BYTE8(v207)) {
      uint64_t v63 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v207 + 40))();
    }
    long long v212 = 0uLL;
    LODWORD(v213) = 0;
    WORD4(v214) = 1;
    *((void *)&v213 + 1) = 0;
    *(void *)&long long v214 = 0;
    LODWORD(v211) = 1638453;
    re::DynamicArray<float *>::setCapacity((void *)&v211 + 1, 2uLL);
    LODWORD(v213) = v213 + 1;
    *(void *)&long long v203 = 0;
    re::DynamicArray<re::TransitionCondition *>::add((void *)&v211 + 1, &v203);
    *(void *)&long long v203 = 1;
    re::DynamicArray<re::TransitionCondition *>::add((void *)&v211 + 1, &v203);
    BYTE9(v214) = 1;
    *(void *)&long long v214 = 1;
    re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)&v215, (const re::DynamicString *)&v207, (uint64_t)&v211);
    if (*((void *)&v211 + 1) && *((void *)&v213 + 1)) {
      (*(void (**)(void))(**((void **)&v211 + 1) + 40))(*((void *)&v211 + 1));
    }
    unsigned int v65 = (_anonymous_namespace_ *)v207;
    if (void)v207 && (BYTE8(v207)) {
      unsigned int v65 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v207 + 40))();
    }
    long long v212 = 0uLL;
    LODWORD(v213) = 0;
    WORD4(v214) = 1;
    *((void *)&v213 + 1) = 0;
    *(void *)&long long v214 = 0;
    LODWORD(v211) = 1966133;
    re::DynamicArray<float *>::setCapacity((void *)&v211 + 1, 2uLL);
    LODWORD(v213) = v213 + 1;
    *(void *)&long long v203 = 0;
    re::DynamicArray<re::TransitionCondition *>::add((void *)&v211 + 1, &v203);
    *(void *)&long long v203 = 1;
    re::DynamicArray<re::TransitionCondition *>::add((void *)&v211 + 1, &v203);
    BYTE9(v214) = 1;
    *(void *)&long long v214 = 1;
    re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)&v215, (const re::DynamicString *)&v207, (uint64_t)&v211);
    if (*((void *)&v211 + 1) && *((void *)&v213 + 1)) {
      (*(void (**)(void))(**((void **)&v211 + 1) + 40))(*((void *)&v211 + 1));
    }
    uint64_t v67 = (_anonymous_namespace_ *)v207;
    if (void)v207 && (BYTE8(v207)) {
      uint64_t v67 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v207 + 40))();
    }
    long long v212 = 0uLL;
    LODWORD(v213) = 0;
    WORD4(v214) = 1;
    *((void *)&v213 + 1) = 0;
    *(void *)&long long v214 = 0;
    LODWORD(v211) = 1703989;
    re::DynamicArray<float *>::setCapacity((void *)&v211 + 1, 2uLL);
    LODWORD(v213) = v213 + 1;
    *(void *)&long long v203 = 0;
    re::DynamicArray<re::TransitionCondition *>::add((void *)&v211 + 1, &v203);
    *(void *)&long long v203 = 1;
    re::DynamicArray<re::TransitionCondition *>::add((void *)&v211 + 1, &v203);
    BYTE9(v214) = 1;
    *(void *)&long long v214 = 1;
    re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)&v215, (const re::DynamicString *)&v207, (uint64_t)&v211);
    if (*((void *)&v211 + 1) && *((void *)&v213 + 1)) {
      (*(void (**)(void))(**((void **)&v211 + 1) + 40))(*((void *)&v211 + 1));
    }
    uint64_t v69 = (_anonymous_namespace_ *)v207;
    if (void)v207 && (BYTE8(v207)) {
      uint64_t v69 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v207 + 40))();
    }
    long long v212 = 0uLL;
    LODWORD(v213) = 0;
    WORD4(v214) = 1;
    *((void *)&v213 + 1) = 0;
    *(void *)&long long v214 = 0;
    LODWORD(v211) = 9175093;
    re::DynamicArray<float *>::setCapacity((void *)&v211 + 1, 2uLL);
    LODWORD(v213) = v213 + 1;
    *(void *)&long long v203 = 0;
    re::DynamicArray<re::TransitionCondition *>::add((void *)&v211 + 1, &v203);
    *(void *)&long long v203 = 1;
    re::DynamicArray<re::TransitionCondition *>::add((void *)&v211 + 1, &v203);
    BYTE9(v214) = 1;
    *(void *)&long long v214 = 1;
    re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)&v215, (const re::DynamicString *)&v207, (uint64_t)&v211);
    if (*((void *)&v211 + 1) && *((void *)&v213 + 1)) {
      (*(void (**)(void))(**((void **)&v211 + 1) + 40))(*((void *)&v211 + 1));
    }
    uint64_t v71 = (_anonymous_namespace_ *)v207;
    if (void)v207 && (BYTE8(v207)) {
      uint64_t v71 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v207 + 40))();
    }
    long long v212 = 0uLL;
    LODWORD(v213) = 0;
    WORD4(v214) = 1;
    *((void *)&v213 + 1) = 0;
    *(void *)&long long v214 = 0;
    LODWORD(v211) = 589877;
    re::DynamicArray<float *>::setCapacity((void *)&v211 + 1, 2uLL);
    LODWORD(v213) = v213 + 1;
    *(void *)&long long v203 = 0;
    re::DynamicArray<re::TransitionCondition *>::add((void *)&v211 + 1, &v203);
    *(void *)&long long v203 = 1;
    re::DynamicArray<re::TransitionCondition *>::add((void *)&v211 + 1, &v203);
    BYTE9(v214) = 1;
    *(void *)&long long v214 = 1;
    re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)&v215, (const re::DynamicString *)&v207, (uint64_t)&v211);
    if (*((void *)&v211 + 1) && *((void *)&v213 + 1)) {
      (*(void (**)(void))(**((void **)&v211 + 1) + 40))(*((void *)&v211 + 1));
    }
    long long v73 = (_anonymous_namespace_ *)v207;
    if (void)v207 && (BYTE8(v207)) {
      long long v73 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v207 + 40))();
    }
    long long v212 = 0uLL;
    LODWORD(v213) = 0;
    WORD4(v214) = 1;
    *((void *)&v213 + 1) = 0;
    *(void *)&long long v214 = 0;
    LODWORD(v211) = 2031669;
    re::DynamicArray<float *>::setCapacity((void *)&v211 + 1, 2uLL);
    LODWORD(v213) = v213 + 1;
    *(void *)&long long v203 = 0;
    re::DynamicArray<re::TransitionCondition *>::add((void *)&v211 + 1, &v203);
    *(void *)&long long v203 = 1;
    re::DynamicArray<re::TransitionCondition *>::add((void *)&v211 + 1, &v203);
    BYTE9(v214) = 1;
    *(void *)&long long v214 = 1;
    re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)&v215, (const re::DynamicString *)&v207, (uint64_t)&v211);
    if (*((void *)&v211 + 1) && *((void *)&v213 + 1)) {
      (*(void (**)(void))(**((void **)&v211 + 1) + 40))(*((void *)&v211 + 1));
    }
    long long v75 = (_anonymous_namespace_ *)v207;
    if (void)v207 && (BYTE8(v207)) {
      long long v75 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v207 + 40))();
    }
    long long v212 = 0uLL;
    LODWORD(v213) = 0;
    WORD4(v214) = 1;
    *((void *)&v213 + 1) = 0;
    *(void *)&long long v214 = 0;
    LODWORD(v211) = 2162741;
    re::DynamicArray<float *>::setCapacity((void *)&v211 + 1, 2uLL);
    LODWORD(v213) = v213 + 1;
    *(void *)&long long v203 = 0;
    re::DynamicArray<re::TransitionCondition *>::add((void *)&v211 + 1, &v203);
    *(void *)&long long v203 = 1;
    re::DynamicArray<re::TransitionCondition *>::add((void *)&v211 + 1, &v203);
    BYTE9(v214) = 1;
    *(void *)&long long v214 = 1;
    re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)&v215, (const re::DynamicString *)&v207, (uint64_t)&v211);
    if (*((void *)&v211 + 1) && *((void *)&v213 + 1)) {
      (*(void (**)(void))(**((void **)&v211 + 1) + 40))(*((void *)&v211 + 1));
    }
    uint64_t v77 = (_anonymous_namespace_ *)v207;
    if (void)v207 && (BYTE8(v207)) {
      uint64_t v77 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v207 + 40))();
    }
    long long v212 = 0uLL;
    LODWORD(v213) = 0;
    WORD4(v214) = 1;
    *((void *)&v213 + 1) = 0;
    *(void *)&long long v214 = 0;
    LODWORD(v211) = 3276853;
    re::DynamicArray<float *>::setCapacity((void *)&v211 + 1, 2uLL);
    LODWORD(v213) = v213 + 1;
    *(void *)&long long v203 = 0;
    re::DynamicArray<re::TransitionCondition *>::add((void *)&v211 + 1, &v203);
    *(void *)&long long v203 = 1;
    re::DynamicArray<re::TransitionCondition *>::add((void *)&v211 + 1, &v203);
    BYTE9(v214) = 1;
    *(void *)&long long v214 = 1;
    re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)&v215, (const re::DynamicString *)&v207, (uint64_t)&v211);
    if (*((void *)&v211 + 1) && *((void *)&v213 + 1)) {
      (*(void (**)(void))(**((void **)&v211 + 1) + 40))(*((void *)&v211 + 1));
    }
    uint64_t v79 = (_anonymous_namespace_ *)v207;
    if (void)v207 && (BYTE8(v207)) {
      uint64_t v79 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v207 + 40))();
    }
    long long v212 = 0uLL;
    LODWORD(v213) = 0;
    WORD4(v214) = 1;
    *((void *)&v213 + 1) = 0;
    *(void *)&long long v214 = 0;
    LODWORD(v211) = 1769525;
    re::DynamicArray<float *>::setCapacity((void *)&v211 + 1, 2uLL);
    LODWORD(v213) = v213 + 1;
    *(void *)&long long v203 = 0;
    re::DynamicArray<re::TransitionCondition *>::add((void *)&v211 + 1, &v203);
    *(void *)&long long v203 = 1;
    re::DynamicArray<re::TransitionCondition *>::add((void *)&v211 + 1, &v203);
    BYTE9(v214) = 1;
    *(void *)&long long v214 = 1;
    re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)&v215, (const re::DynamicString *)&v207, (uint64_t)&v211);
    if (*((void *)&v211 + 1) && *((void *)&v213 + 1)) {
      (*(void (**)(void))(**((void **)&v211 + 1) + 40))(*((void *)&v211 + 1));
    }
    uint64_t v81 = (_anonymous_namespace_ *)v207;
    if (void)v207 && (BYTE8(v207)) {
      uint64_t v81 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v207 + 40))();
    }
    long long v212 = 0uLL;
    LODWORD(v213) = 0;
    WORD4(v214) = 1;
    *((void *)&v213 + 1) = 0;
    *(void *)&long long v214 = 0;
    LODWORD(v211) = 1835037;
    re::DynamicArray<float *>::setCapacity((void *)&v211 + 1, 3uLL);
    uint64_t v83 = 0;
    LODWORD(v213) = v213 + 1;
    do
    {
      *(void *)&long long v203 = v83;
      re::DynamicArray<re::TransitionCondition *>::add((void *)&v211 + 1, &v203);
      ++v83;
    }
    while (v83 != 3);
    BYTE9(v214) = 1;
    *(void *)&long long v214 = 2;
    re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)&v215, (const re::DynamicString *)&v207, (uint64_t)&v211);
    if (*((void *)&v211 + 1) && *((void *)&v213 + 1)) {
      (*(void (**)(void))(**((void **)&v211 + 1) + 40))(*((void *)&v211 + 1));
    }
    if (void)v207 && (BYTE8(v207)) {
      (*(void (**)(void))(*(void *)v207 + 40))();
    }
  }
  MurmurHash3_x64_128((uint64_t)"TextureCommon", 13, 0, (unint64_t *)&v211);
  *(void *)&long long v211 = (*((void *)&v211 + 1) - 0x61C8864680B583E9 + ((void)v211 << 6) + ((unint64_t)v211 >> 2)) ^ v211;
  re::HashBrown<unsigned long,re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::addNew(a5, (uint64_t *)&v211, (uint64_t *)&v215);
  long long v213 = 0u;
  long long v214 = 0u;
  long long v211 = 0u;
  long long v212 = 0u;
  long long v208 = 0uLL;
  LODWORD(v209) = 0;
  *((void *)&v209 + 1) = 0;
  *(void *)&long long v210 = 0;
  LODWORD(v207) = 2293813;
  WORD4(v210) = 1;
  re::DynamicArray<float *>::setCapacity((void *)&v207 + 1, 2uLL);
  LODWORD(v209) = v209 + 1;
  *(void *)&long long v199 = 0;
  re::DynamicArray<re::TransitionCondition *>::add((void *)&v207 + 1, &v199);
  *(void *)&long long v199 = 1;
  re::DynamicArray<re::TransitionCondition *>::add((void *)&v207 + 1, &v199);
  BYTE9(v210) = 1;
  *(void *)&long long v210 = 1;
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)&v211, (const re::DynamicString *)&v203, (uint64_t)&v207);
  if (*((void *)&v207 + 1) && *((void *)&v209 + 1)) {
    (*(void (**)(void))(**((void **)&v207 + 1) + 40))();
  }
  unint64_t v87 = (_anonymous_namespace_ *)v203;
  if (void)v203 && (BYTE8(v203)) {
    unint64_t v87 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v203 + 40))();
  }
  long long v208 = 0uLL;
  LODWORD(v209) = 0;
  *((void *)&v209 + 1) = 0;
  *(void *)&long long v210 = 0;
  LODWORD(v207) = 8323101;
  WORD4(v210) = 1;
  re::DynamicArray<float *>::setCapacity((void *)&v207 + 1, 3uLL);
  uint64_t v89 = 0;
  LODWORD(v209) = v209 + 1;
  do
  {
    *(void *)&long long v199 = v89;
    re::DynamicArray<re::TransitionCondition *>::add((void *)&v207 + 1, &v199);
    ++v89;
  }
  while (v89 != 3);
  BYTE9(v210) = 1;
  *(void *)&long long v210 = 0;
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)&v211, (const re::DynamicString *)&v203, (uint64_t)&v207);
  if (*((void *)&v207 + 1) && *((void *)&v209 + 1)) {
    (*(void (**)(void))(**((void **)&v207 + 1) + 40))();
  }
  if (void)v203 && (BYTE8(v203)) {
    (*(void (**)(void))(*(void *)v203 + 40))();
  }
  MurmurHash3_x64_128((uint64_t)"ShadowCommon", 12, 0, (unint64_t *)&v207);
  *(void *)&long long v207 = (*((void *)&v207 + 1) - 0x61C8864680B583E9 + ((void)v207 << 6) + ((unint64_t)v207 >> 2)) ^ v207;
  re::HashBrown<unsigned long,re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::addNew(a5, (uint64_t *)&v207, (uint64_t *)&v211);
  long long v209 = 0u;
  long long v210 = 0u;
  long long v207 = 0u;
  long long v208 = 0u;
  long long v204 = 0uLL;
  LODWORD(v205) = 0;
  *((void *)&v205 + 1) = 0;
  *(void *)&long long v206 = 0;
  LODWORD(v203) = 1179701;
  WORD4(v206) = 1;
  re::DynamicArray<float *>::setCapacity((void *)&v203 + 1, 2uLL);
  LODWORD(v205) = v205 + 1;
  *(void *)&long long v195 = 0;
  re::DynamicArray<re::TransitionCondition *>::add((void *)&v203 + 1, &v195);
  *(void *)&long long v195 = 1;
  re::DynamicArray<re::TransitionCondition *>::add((void *)&v203 + 1, &v195);
  BYTE9(v206) = 1;
  *(void *)&long long v206 = 1;
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)&v207, (const re::DynamicString *)&v199, (uint64_t)&v203);
  if (*((void *)&v203 + 1) && *((void *)&v205 + 1)) {
    (*(void (**)(void))(**((void **)&v203 + 1) + 40))();
  }
  uint64_t v93 = (_anonymous_namespace_ *)v199;
  if (void)v199 && (BYTE8(v199)) {
    uint64_t v93 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v199 + 40))();
  }
  long long v204 = 0uLL;
  LODWORD(v205) = 0;
  *((void *)&v205 + 1) = 0;
  *(void *)&long long v206 = 0;
  LODWORD(v203) = 6750237;
  WORD4(v206) = 1;
  re::DynamicArray<float *>::setCapacity((void *)&v203 + 1, 5uLL);
  uint64_t v95 = 0;
  LODWORD(v205) = v205 + 1;
  do
  {
    *(void *)&long long v195 = v95;
    re::DynamicArray<re::TransitionCondition *>::add((void *)&v203 + 1, &v195);
    ++v95;
  }
  while (v95 != 5);
  BYTE9(v206) = 1;
  *(void *)&long long v206 = 4;
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)&v207, (const re::DynamicString *)&v199, (uint64_t)&v203);
  if (*((void *)&v203 + 1) && *((void *)&v205 + 1)) {
    (*(void (**)(void))(**((void **)&v203 + 1) + 40))();
  }
  unint64_t v96 = (_anonymous_namespace_ *)v199;
  if (void)v199 && (BYTE8(v199)) {
    unint64_t v96 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v199 + 40))();
  }
  long long v204 = 0uLL;
  LODWORD(v205) = 0;
  *((void *)&v205 + 1) = 0;
  *(void *)&long long v206 = 0;
  LODWORD(v203) = 6684701;
  WORD4(v206) = 1;
  re::DynamicArray<float *>::setCapacity((void *)&v203 + 1, 4uLL);
  uint64_t v98 = 0;
  LODWORD(v205) = v205 + 1;
  do
  {
    *(void *)&long long v195 = v98;
    re::DynamicArray<re::TransitionCondition *>::add((void *)&v203 + 1, &v195);
    ++v98;
  }
  while (v98 != 4);
  BYTE9(v206) = 1;
  *(void *)&long long v206 = 3;
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)&v207, (const re::DynamicString *)&v199, (uint64_t)&v203);
  if (*((void *)&v203 + 1) && *((void *)&v205 + 1)) {
    (*(void (**)(void))(**((void **)&v203 + 1) + 40))();
  }
  char v99 = (_anonymous_namespace_ *)v199;
  if (void)v199 && (BYTE8(v199)) {
    char v99 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v199 + 40))();
  }
  long long v204 = 0uLL;
  LODWORD(v205) = 0;
  *((void *)&v205 + 1) = 0;
  *(void *)&long long v206 = 0;
  LODWORD(v203) = 786485;
  WORD4(v206) = 1;
  re::DynamicArray<float *>::setCapacity((void *)&v203 + 1, 2uLL);
  LODWORD(v205) = v205 + 1;
  *(void *)&long long v195 = 0;
  re::DynamicArray<re::TransitionCondition *>::add((void *)&v203 + 1, &v195);
  *(void *)&long long v195 = 1;
  re::DynamicArray<re::TransitionCondition *>::add((void *)&v203 + 1, &v195);
  BYTE9(v206) = 1;
  *(void *)&long long v206 = 1;
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)&v207, (const re::DynamicString *)&v199, (uint64_t)&v203);
  if (*((void *)&v203 + 1) && *((void *)&v205 + 1)) {
    (*(void (**)(void))(**((void **)&v203 + 1) + 40))();
  }
  int v101 = (_anonymous_namespace_ *)v199;
  if (void)v199 && (BYTE8(v199)) {
    int v101 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v199 + 40))();
  }
  long long v204 = 0uLL;
  LODWORD(v205) = 0;
  *((void *)&v205 + 1) = 0;
  *(void *)&long long v206 = 0;
  LODWORD(v203) = 4522037;
  WORD4(v206) = 1;
  re::DynamicArray<float *>::setCapacity((void *)&v203 + 1, 2uLL);
  LODWORD(v205) = v205 + 1;
  *(void *)&long long v195 = 0;
  re::DynamicArray<re::TransitionCondition *>::add((void *)&v203 + 1, &v195);
  *(void *)&long long v195 = 1;
  re::DynamicArray<re::TransitionCondition *>::add((void *)&v203 + 1, &v195);
  BYTE9(v206) = 1;
  *(void *)&long long v206 = 1;
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)&v207, (const re::DynamicString *)&v199, (uint64_t)&v203);
  if (*((void *)&v203 + 1) && *((void *)&v205 + 1)) {
    (*(void (**)(void))(**((void **)&v203 + 1) + 40))();
  }
  unint64_t v103 = (_anonymous_namespace_ *)v199;
  if (void)v199 && (BYTE8(v199)) {
    unint64_t v103 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v199 + 40))();
  }
  long long v204 = 0uLL;
  LODWORD(v205) = 0;
  *((void *)&v205 + 1) = 0;
  *(void *)&long long v206 = 0;
  LODWORD(v203) = 6815797;
  WORD4(v206) = 1;
  re::DynamicArray<float *>::setCapacity((void *)&v203 + 1, 2uLL);
  LODWORD(v205) = v205 + 1;
  *(void *)&long long v195 = 0;
  re::DynamicArray<re::TransitionCondition *>::add((void *)&v203 + 1, &v195);
  *(void *)&long long v195 = 1;
  re::DynamicArray<re::TransitionCondition *>::add((void *)&v203 + 1, &v195);
  BYTE9(v206) = 1;
  *(void *)&long long v206 = 1;
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)&v207, (const re::DynamicString *)&v199, (uint64_t)&v203);
  if (*((void *)&v203 + 1) && *((void *)&v205 + 1)) {
    (*(void (**)(void))(**((void **)&v203 + 1) + 40))();
  }
  unint64_t v105 = (_anonymous_namespace_ *)v199;
  if (void)v199 && (BYTE8(v199)) {
    unint64_t v105 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v199 + 40))();
  }
  long long v204 = 0uLL;
  LODWORD(v205) = 0;
  *((void *)&v205 + 1) = 0;
  *(void *)&long long v206 = 0;
  LODWORD(v203) = 65589;
  WORD4(v206) = 1;
  re::DynamicArray<float *>::setCapacity((void *)&v203 + 1, 2uLL);
  LODWORD(v205) = v205 + 1;
  *(void *)&long long v195 = 0;
  re::DynamicArray<re::TransitionCondition *>::add((void *)&v203 + 1, &v195);
  *(void *)&long long v195 = 1;
  re::DynamicArray<re::TransitionCondition *>::add((void *)&v203 + 1, &v195);
  BYTE9(v206) = 1;
  *(void *)&long long v206 = 1;
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)&v207, (const re::DynamicString *)&v199, (uint64_t)&v203);
  if (*((void *)&v203 + 1) && *((void *)&v205 + 1)) {
    (*(void (**)(void))(**((void **)&v203 + 1) + 40))();
  }
  uint64_t v107 = (_anonymous_namespace_ *)v199;
  if (void)v199 && (BYTE8(v199)) {
    uint64_t v107 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v199 + 40))();
  }
  long long v204 = 0uLL;
  LODWORD(v205) = 0;
  *((void *)&v205 + 1) = 0;
  *(void *)&long long v206 = 0;
  LODWORD(v203) = 2293813;
  WORD4(v206) = 1;
  re::DynamicArray<float *>::setCapacity((void *)&v203 + 1, 2uLL);
  LODWORD(v205) = v205 + 1;
  *(void *)&long long v195 = 0;
  re::DynamicArray<re::TransitionCondition *>::add((void *)&v203 + 1, &v195);
  *(void *)&long long v195 = 1;
  re::DynamicArray<re::TransitionCondition *>::add((void *)&v203 + 1, &v195);
  BYTE9(v206) = 1;
  *(void *)&long long v206 = 1;
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)&v207, (const re::DynamicString *)&v199, (uint64_t)&v203);
  if (*((void *)&v203 + 1) && *((void *)&v205 + 1)) {
    (*(void (**)(void))(**((void **)&v203 + 1) + 40))();
  }
  unint64_t v109 = (_anonymous_namespace_ *)v199;
  if (void)v199 && (BYTE8(v199)) {
    unint64_t v109 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v199 + 40))();
  }
  long long v204 = 0uLL;
  LODWORD(v205) = 0;
  *((void *)&v205 + 1) = 0;
  *(void *)&long long v206 = 0;
  LODWORD(v203) = 3604533;
  WORD4(v206) = 1;
  re::DynamicArray<float *>::setCapacity((void *)&v203 + 1, 1uLL);
  LODWORD(v205) = v205 + 1;
  *(void *)&long long v195 = v28;
  re::DynamicArray<re::TransitionCondition *>::add((void *)&v203 + 1, &v195);
  BYTE9(v206) = 1;
  *(void *)&long long v206 = v28;
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)&v207, (const re::DynamicString *)&v199, (uint64_t)&v203);
  if (*((void *)&v203 + 1) && *((void *)&v205 + 1)) {
    (*(void (**)(void))(**((void **)&v203 + 1) + 40))();
  }
  uint64_t v111 = (_anonymous_namespace_ *)v199;
  if (void)v199 && (BYTE8(v199)) {
    uint64_t v111 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v199 + 40))();
  }
  long long v204 = 0uLL;
  LODWORD(v205) = 0;
  *((void *)&v205 + 1) = 0;
  *(void *)&long long v206 = 0;
  LODWORD(v203) = 3735605;
  WORD4(v206) = 1;
  re::DynamicArray<float *>::setCapacity((void *)&v203 + 1, 1uLL);
  LODWORD(v205) = v205 + 1;
  *(void *)&long long v195 = v28;
  re::DynamicArray<re::TransitionCondition *>::add((void *)&v203 + 1, &v195);
  BYTE9(v206) = 1;
  *(void *)&long long v206 = v28;
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)&v207, (const re::DynamicString *)&v199, (uint64_t)&v203);
  if (*((void *)&v203 + 1) && *((void *)&v205 + 1)) {
    (*(void (**)(void))(**((void **)&v203 + 1) + 40))();
  }
  uint64_t v113 = (_anonymous_namespace_ *)v199;
  if (void)v199 && (BYTE8(v199)) {
    uint64_t v113 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v199 + 40))();
  }
  long long v204 = 0uLL;
  LODWORD(v205) = 0;
  *((void *)&v205 + 1) = 0;
  *(void *)&long long v206 = 0;
  LODWORD(v203) = 6488117;
  WORD4(v206) = 1;
  re::DynamicArray<float *>::setCapacity((void *)&v203 + 1, 2uLL);
  LODWORD(v205) = v205 + 1;
  *(void *)&long long v195 = 0;
  re::DynamicArray<re::TransitionCondition *>::add((void *)&v203 + 1, &v195);
  *(void *)&long long v195 = 1;
  re::DynamicArray<re::TransitionCondition *>::add((void *)&v203 + 1, &v195);
  BYTE9(v206) = 1;
  *(void *)&long long v206 = 0;
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)&v207, (const re::DynamicString *)&v199, (uint64_t)&v203);
  if (*((void *)&v203 + 1) && *((void *)&v205 + 1)) {
    (*(void (**)(void))(**((void **)&v203 + 1) + 40))();
  }
  unint64_t v115 = (_anonymous_namespace_ *)v199;
  if (void)v199 && (BYTE8(v199)) {
    unint64_t v115 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v199 + 40))();
  }
  if (a2)
  {
    long long v204 = 0uLL;
    LODWORD(v205) = 0;
    *((void *)&v205 + 1) = 0;
    *(void *)&long long v206 = 0;
    LODWORD(v203) = 5636149;
    WORD4(v206) = 1;
    re::DynamicArray<float *>::setCapacity((void *)&v203 + 1, 2uLL);
    LODWORD(v205) = v205 + 1;
    *(void *)&long long v195 = 0;
    re::DynamicArray<re::TransitionCondition *>::add((void *)&v203 + 1, &v195);
    *(void *)&long long v195 = 1;
    re::DynamicArray<re::TransitionCondition *>::add((void *)&v203 + 1, &v195);
    BYTE9(v206) = 1;
    *(void *)&long long v206 = 1;
    re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)&v207, (const re::DynamicString *)&v199, (uint64_t)&v203);
    if (*((void *)&v203 + 1) && *((void *)&v205 + 1)) {
      (*(void (**)(void))(**((void **)&v203 + 1) + 40))();
    }
    unint64_t v115 = (_anonymous_namespace_ *)v199;
    if (void)v199 && (BYTE8(v199)) {
      unint64_t v115 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v199 + 40))();
    }
  }
  long long v204 = 0uLL;
  LODWORD(v205) = 0;
  *((void *)&v205 + 1) = 0;
  *(void *)&long long v206 = 0;
  LODWORD(v203) = 8323101;
  WORD4(v206) = 1;
  re::DynamicArray<float *>::setCapacity((void *)&v203 + 1, 3uLL);
  uint64_t v118 = 0;
  LODWORD(v205) = v205 + 1;
  do
  {
    *(void *)&long long v195 = v118;
    re::DynamicArray<re::TransitionCondition *>::add((void *)&v203 + 1, &v195);
    ++v118;
  }
  while (v118 != 3);
  BYTE9(v206) = 1;
  *(void *)&long long v206 = 0;
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)&v207, (const re::DynamicString *)&v199, (uint64_t)&v203);
  if (*((void *)&v203 + 1) && *((void *)&v205 + 1)) {
    (*(void (**)(void))(**((void **)&v203 + 1) + 40))();
  }
  int v119 = (_anonymous_namespace_ *)v199;
  if (void)v199 && (BYTE8(v199)) {
    int v119 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v199 + 40))();
  }
  if (a3)
  {
    long long v204 = 0uLL;
    LODWORD(v205) = 0;
    *((void *)&v205 + 1) = 0;
    *(void *)&long long v206 = 0;
    LODWORD(v203) = 5701685;
    WORD4(v206) = 1;
    re::DynamicArray<float *>::setCapacity((void *)&v203 + 1, 2uLL);
    LODWORD(v205) = v205 + 1;
    *(void *)&long long v195 = 0;
    re::DynamicArray<re::TransitionCondition *>::add((void *)&v203 + 1, &v195);
    *(void *)&long long v195 = 1;
    re::DynamicArray<re::TransitionCondition *>::add((void *)&v203 + 1, &v195);
    BYTE9(v206) = 1;
    *(void *)&long long v206 = 0;
    re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)&v207, (const re::DynamicString *)&v199, (uint64_t)&v203);
    if (*((void *)&v203 + 1) && *((void *)&v205 + 1)) {
      (*(void (**)(void))(**((void **)&v203 + 1) + 40))();
    }
    uint64_t v121 = (_anonymous_namespace_ *)v199;
    if (void)v199 && (BYTE8(v199)) {
      uint64_t v121 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v199 + 40))();
    }
    long long v204 = 0uLL;
    LODWORD(v205) = 0;
    *((void *)&v205 + 1) = 0;
    *(void *)&long long v206 = 0;
    LODWORD(v203) = 6553653;
    WORD4(v206) = 1;
    re::DynamicArray<float *>::setCapacity((void *)&v203 + 1, 2uLL);
    LODWORD(v205) = v205 + 1;
    *(void *)&long long v195 = 0;
    re::DynamicArray<re::TransitionCondition *>::add((void *)&v203 + 1, &v195);
    *(void *)&long long v195 = 1;
    re::DynamicArray<re::TransitionCondition *>::add((void *)&v203 + 1, &v195);
    BYTE9(v206) = 1;
    *(void *)&long long v206 = 0;
    re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)&v207, (const re::DynamicString *)&v199, (uint64_t)&v203);
    if (*((void *)&v203 + 1) && *((void *)&v205 + 1)) {
      (*(void (**)(void))(**((void **)&v203 + 1) + 40))();
    }
    unint64_t v123 = (_anonymous_namespace_ *)v199;
    if (void)v199 && (BYTE8(v199)) {
      unint64_t v123 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v199 + 40))();
    }
    long long v204 = 0uLL;
    LODWORD(v205) = 0;
    *((void *)&v205 + 1) = 0;
    *(void *)&long long v206 = 0;
    LODWORD(v203) = 7209013;
    WORD4(v206) = 1;
    re::DynamicArray<float *>::setCapacity((void *)&v203 + 1, 2uLL);
    LODWORD(v205) = v205 + 1;
    *(void *)&long long v195 = 0;
    re::DynamicArray<re::TransitionCondition *>::add((void *)&v203 + 1, &v195);
    *(void *)&long long v195 = 1;
    re::DynamicArray<re::TransitionCondition *>::add((void *)&v203 + 1, &v195);
    BYTE9(v206) = 1;
    *(void *)&long long v206 = 0;
    re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)&v207, (const re::DynamicString *)&v199, (uint64_t)&v203);
    if (*((void *)&v203 + 1) && *((void *)&v205 + 1)) {
      (*(void (**)(void))(**((void **)&v203 + 1) + 40))();
    }
    int v119 = (_anonymous_namespace_ *)v199;
    if (void)v199 && (BYTE8(v199)) {
      int v119 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v199 + 40))();
    }
  }
  long long v204 = 0uLL;
  LODWORD(v205) = 0;
  *((void *)&v205 + 1) = 0;
  *(void *)&long long v206 = 0;
  LODWORD(v203) = 7012381;
  WORD4(v206) = 1;
  re::DynamicArray<float *>::setCapacity((void *)&v203 + 1, 4uLL);
  uint64_t v126 = 0;
  LODWORD(v205) = v205 + 1;
  do
  {
    *(void *)&long long v195 = v126;
    re::DynamicArray<re::TransitionCondition *>::add((void *)&v203 + 1, &v195);
    ++v126;
  }
  while (v126 != 4);
  BYTE9(v206) = 1;
  *(void *)&long long v206 = 0;
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)&v207, (const re::DynamicString *)&v199, (uint64_t)&v203);
  if (*((void *)&v203 + 1) && *((void *)&v205 + 1)) {
    (*(void (**)(void))(**((void **)&v203 + 1) + 40))();
  }
  BOOL v127 = (_anonymous_namespace_ *)v199;
  if (void)v199 && (BYTE8(v199)) {
    BOOL v127 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v199 + 40))();
  }
  long long v204 = 0uLL;
  LODWORD(v205) = 0;
  *((void *)&v205 + 1) = 0;
  *(void *)&long long v206 = 0;
  LODWORD(v203) = 9044021;
  WORD4(v206) = 1;
  re::DynamicArray<float *>::setCapacity((void *)&v203 + 1, 2uLL);
  LODWORD(v205) = v205 + 1;
  *(void *)&long long v195 = 0;
  re::DynamicArray<re::TransitionCondition *>::add((void *)&v203 + 1, &v195);
  *(void *)&long long v195 = 1;
  re::DynamicArray<re::TransitionCondition *>::add((void *)&v203 + 1, &v195);
  BYTE9(v206) = 1;
  *(void *)&long long v206 = a4;
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)&v207, (const re::DynamicString *)&v199, (uint64_t)&v203);
  if (*((void *)&v203 + 1) && *((void *)&v205 + 1)) {
    (*(void (**)(void))(**((void **)&v203 + 1) + 40))();
  }
  uint64_t v129 = (_anonymous_namespace_ *)v199;
  if (void)v199 && (BYTE8(v199)) {
    uint64_t v129 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v199 + 40))();
  }
  long long v204 = 0uLL;
  LODWORD(v205) = 0;
  *((void *)&v205 + 1) = 0;
  *(void *)&long long v206 = 0;
  LODWORD(v203) = 9699381;
  WORD4(v206) = 1;
  re::DynamicArray<float *>::setCapacity((void *)&v203 + 1, 2uLL);
  LODWORD(v205) = v205 + 1;
  *(void *)&long long v195 = 0;
  re::DynamicArray<re::TransitionCondition *>::add((void *)&v203 + 1, &v195);
  *(void *)&long long v195 = 1;
  re::DynamicArray<re::TransitionCondition *>::add((void *)&v203 + 1, &v195);
  BYTE9(v206) = 1;
  *(void *)&long long v206 = 1;
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)&v207, (const re::DynamicString *)&v199, (uint64_t)&v203);
  if (*((void *)&v203 + 1) && *((void *)&v205 + 1)) {
    (*(void (**)(void))(**((void **)&v203 + 1) + 40))();
  }
  __int16 v131 = (_anonymous_namespace_ *)v199;
  if (void)v199 && (BYTE8(v199)) {
    __int16 v131 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v199 + 40))();
  }
  long long v204 = 0uLL;
  LODWORD(v205) = 0;
  *((void *)&v205 + 1) = 0;
  *(void *)&long long v206 = 0;
  LODWORD(v203) = 4128821;
  WORD4(v206) = 1;
  re::DynamicArray<float *>::setCapacity((void *)&v203 + 1, 2uLL);
  LODWORD(v205) = v205 + 1;
  *(void *)&long long v195 = 0;
  re::DynamicArray<re::TransitionCondition *>::add((void *)&v203 + 1, &v195);
  *(void *)&long long v195 = 1;
  re::DynamicArray<re::TransitionCondition *>::add((void *)&v203 + 1, &v195);
  BYTE9(v206) = 1;
  *(void *)&long long v206 = 1;
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)&v207, (const re::DynamicString *)&v199, (uint64_t)&v203);
  if (*((void *)&v203 + 1) && *((void *)&v205 + 1)) {
    (*(void (**)(void))(**((void **)&v203 + 1) + 40))();
  }
  unint64_t v133 = (_anonymous_namespace_ *)v199;
  if (void)v199 && (BYTE8(v199)) {
    unint64_t v133 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v199 + 40))();
  }
  long long v204 = 0uLL;
  LODWORD(v205) = 0;
  *((void *)&v205 + 1) = 0;
  *(void *)&long long v206 = 0;
  LODWORD(v203) = 9240629;
  WORD4(v206) = 1;
  re::DynamicArray<float *>::setCapacity((void *)&v203 + 1, 2uLL);
  LODWORD(v205) = v205 + 1;
  *(void *)&long long v195 = 0;
  re::DynamicArray<re::TransitionCondition *>::add((void *)&v203 + 1, &v195);
  *(void *)&long long v195 = 1;
  re::DynamicArray<re::TransitionCondition *>::add((void *)&v203 + 1, &v195);
  BYTE9(v206) = 1;
  *(void *)&long long v206 = 1;
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)&v207, (const re::DynamicString *)&v199, (uint64_t)&v203);
  if (*((void *)&v203 + 1) && *((void *)&v205 + 1)) {
    (*(void (**)(void))(**((void **)&v203 + 1) + 40))();
  }
  if (void)v199 && (BYTE8(v199)) {
    (*(void (**)(void))(*(void *)v199 + 40))();
  }
  MurmurHash3_x64_128((uint64_t)"TransparentCommon", 17, 0, (unint64_t *)&v203);
  *(void *)&long long v203 = (*((void *)&v203 + 1) - 0x61C8864680B583E9 + ((void)v203 << 6) + ((unint64_t)v203 >> 2)) ^ v203;
  re::HashBrown<unsigned long,re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::addNew(a5, (uint64_t *)&v203, (uint64_t *)&v207);
  long long v205 = 0u;
  long long v206 = 0u;
  long long v203 = 0u;
  long long v204 = 0u;
  long long v200 = 0uLL;
  LODWORD(v201) = 0;
  *((void *)&v201 + 1) = 0;
  *(void *)&long long v202 = 0;
  LODWORD(v199) = 2293813;
  WORD4(v202) = 1;
  re::DynamicArray<float *>::setCapacity((void *)&v199 + 1, 2uLL);
  LODWORD(v201) = v201 + 1;
  unint64_t v189 = 0;
  re::DynamicArray<re::TransitionCondition *>::add((void *)&v199 + 1, &v189);
  unint64_t v189 = 1;
  re::DynamicArray<re::TransitionCondition *>::add((void *)&v199 + 1, &v189);
  BYTE9(v202) = 1;
  *(void *)&long long v202 = 1;
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)&v203, (const re::DynamicString *)&v195, (uint64_t)&v199);
  if (*((void *)&v199 + 1) && *((void *)&v201 + 1)) {
    (*(void (**)(void))(**((void **)&v199 + 1) + 40))();
  }
  int v138 = (_anonymous_namespace_ *)v195;
  if (void)v195 && (BYTE8(v195)) {
    int v138 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v195 + 40))();
  }
  long long v200 = 0uLL;
  LODWORD(v201) = 0;
  *((void *)&v201 + 1) = 0;
  *(void *)&long long v202 = 0;
  LODWORD(v199) = 6488117;
  WORD4(v202) = 1;
  re::DynamicArray<float *>::setCapacity((void *)&v199 + 1, 2uLL);
  LODWORD(v201) = v201 + 1;
  unint64_t v189 = 0;
  re::DynamicArray<re::TransitionCondition *>::add((void *)&v199 + 1, &v189);
  unint64_t v189 = 1;
  re::DynamicArray<re::TransitionCondition *>::add((void *)&v199 + 1, &v189);
  BYTE9(v202) = 1;
  *(void *)&long long v202 = 0;
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)&v203, (const re::DynamicString *)&v195, (uint64_t)&v199);
  if (*((void *)&v199 + 1) && *((void *)&v201 + 1)) {
    (*(void (**)(void))(**((void **)&v199 + 1) + 40))();
  }
  unint64_t v140 = (_anonymous_namespace_ *)v195;
  if (void)v195 && (BYTE8(v195)) {
    unint64_t v140 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v195 + 40))();
  }
  long long v200 = 0uLL;
  LODWORD(v201) = 0;
  *((void *)&v201 + 1) = 0;
  *(void *)&long long v202 = 0;
  LODWORD(v199) = 8323101;
  WORD4(v202) = 1;
  re::DynamicArray<float *>::setCapacity((void *)&v199 + 1, 3uLL);
  unint64_t v142 = 0;
  LODWORD(v201) = v201 + 1;
  do
  {
    unint64_t v189 = v142;
    re::DynamicArray<re::TransitionCondition *>::add((void *)&v199 + 1, &v189);
    ++v142;
  }
  while (v142 != 3);
  BYTE9(v202) = 1;
  *(void *)&long long v202 = 0;
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)&v203, (const re::DynamicString *)&v195, (uint64_t)&v199);
  if (*((void *)&v199 + 1) && *((void *)&v201 + 1)) {
    (*(void (**)(void))(**((void **)&v199 + 1) + 40))();
  }
  unint64_t v143 = (_anonymous_namespace_ *)v195;
  if (void)v195 && (BYTE8(v195)) {
    unint64_t v143 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v195 + 40))();
  }
  if (a2)
  {
    long long v200 = 0uLL;
    LODWORD(v201) = 0;
    *((void *)&v201 + 1) = 0;
    *(void *)&long long v202 = 0;
    LODWORD(v199) = 5636149;
    WORD4(v202) = 1;
    re::DynamicArray<float *>::setCapacity((void *)&v199 + 1, 2uLL);
    LODWORD(v201) = v201 + 1;
    unint64_t v189 = 0;
    re::DynamicArray<re::TransitionCondition *>::add((void *)&v199 + 1, &v189);
    unint64_t v189 = 1;
    re::DynamicArray<re::TransitionCondition *>::add((void *)&v199 + 1, &v189);
    BYTE9(v202) = 1;
    *(void *)&long long v202 = 1;
    re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)&v203, (const re::DynamicString *)&v195, (uint64_t)&v199);
    if (*((void *)&v199 + 1) && *((void *)&v201 + 1)) {
      (*(void (**)(void))(**((void **)&v199 + 1) + 40))();
    }
    unint64_t v143 = (_anonymous_namespace_ *)v195;
    if (void)v195 && (BYTE8(v195)) {
      unint64_t v143 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v195 + 40))();
    }
  }
  if (a3)
  {
    long long v200 = 0uLL;
    LODWORD(v201) = 0;
    *((void *)&v201 + 1) = 0;
    *(void *)&long long v202 = 0;
    LODWORD(v199) = 5701685;
    WORD4(v202) = 1;
    re::DynamicArray<float *>::setCapacity((void *)&v199 + 1, 2uLL);
    LODWORD(v201) = v201 + 1;
    unint64_t v189 = 0;
    re::DynamicArray<re::TransitionCondition *>::add((void *)&v199 + 1, &v189);
    unint64_t v189 = 1;
    re::DynamicArray<re::TransitionCondition *>::add((void *)&v199 + 1, &v189);
    BYTE9(v202) = 1;
    *(void *)&long long v202 = 0;
    re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)&v203, (const re::DynamicString *)&v195, (uint64_t)&v199);
    if (*((void *)&v199 + 1) && *((void *)&v201 + 1)) {
      (*(void (**)(void))(**((void **)&v199 + 1) + 40))();
    }
    int v146 = (_anonymous_namespace_ *)v195;
    if (void)v195 && (BYTE8(v195)) {
      int v146 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v195 + 40))();
    }
    long long v200 = 0uLL;
    LODWORD(v201) = 0;
    *((void *)&v201 + 1) = 0;
    *(void *)&long long v202 = 0;
    LODWORD(v199) = 6553653;
    WORD4(v202) = 1;
    re::DynamicArray<float *>::setCapacity((void *)&v199 + 1, 2uLL);
    LODWORD(v201) = v201 + 1;
    unint64_t v189 = 0;
    re::DynamicArray<re::TransitionCondition *>::add((void *)&v199 + 1, &v189);
    unint64_t v189 = 1;
    re::DynamicArray<re::TransitionCondition *>::add((void *)&v199 + 1, &v189);
    BYTE9(v202) = 1;
    *(void *)&long long v202 = 0;
    re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)&v203, (const re::DynamicString *)&v195, (uint64_t)&v199);
    if (*((void *)&v199 + 1) && *((void *)&v201 + 1)) {
      (*(void (**)(void))(**((void **)&v199 + 1) + 40))();
    }
    uint64_t v148 = (_anonymous_namespace_ *)v195;
    if (void)v195 && (BYTE8(v195)) {
      uint64_t v148 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v195 + 40))();
    }
    long long v200 = 0uLL;
    LODWORD(v201) = 0;
    *((void *)&v201 + 1) = 0;
    *(void *)&long long v202 = 0;
    LODWORD(v199) = 7209013;
    WORD4(v202) = 1;
    re::DynamicArray<float *>::setCapacity((void *)&v199 + 1, 2uLL);
    LODWORD(v201) = v201 + 1;
    unint64_t v189 = 0;
    re::DynamicArray<re::TransitionCondition *>::add((void *)&v199 + 1, &v189);
    unint64_t v189 = 1;
    re::DynamicArray<re::TransitionCondition *>::add((void *)&v199 + 1, &v189);
    BYTE9(v202) = 1;
    *(void *)&long long v202 = 0;
    re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)&v203, (const re::DynamicString *)&v195, (uint64_t)&v199);
    if (*((void *)&v199 + 1) && *((void *)&v201 + 1)) {
      (*(void (**)(void))(**((void **)&v199 + 1) + 40))();
    }
    unint64_t v143 = (_anonymous_namespace_ *)v195;
    if (void)v195 && (BYTE8(v195)) {
      unint64_t v143 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v195 + 40))();
    }
  }
  long long v200 = 0uLL;
  LODWORD(v201) = 0;
  *((void *)&v201 + 1) = 0;
  *(void *)&long long v202 = 0;
  LODWORD(v199) = 7012381;
  WORD4(v202) = 1;
  re::DynamicArray<float *>::setCapacity((void *)&v199 + 1, 4uLL);
  unint64_t v151 = 0;
  LODWORD(v201) = v201 + 1;
  do
  {
    unint64_t v189 = v151;
    re::DynamicArray<re::TransitionCondition *>::add((void *)&v199 + 1, &v189);
    ++v151;
  }
  while (v151 != 4);
  BYTE9(v202) = 1;
  *(void *)&long long v202 = 0;
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)&v203, (const re::DynamicString *)&v195, (uint64_t)&v199);
  if (*((void *)&v199 + 1) && *((void *)&v201 + 1)) {
    (*(void (**)(void))(**((void **)&v199 + 1) + 40))();
  }
  unint64_t v152 = (_anonymous_namespace_ *)v195;
  if (void)v195 && (BYTE8(v195)) {
    unint64_t v152 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v195 + 40))();
  }
  long long v200 = 0uLL;
  LODWORD(v201) = 0;
  *((void *)&v201 + 1) = 0;
  *(void *)&long long v202 = 0;
  LODWORD(v199) = 65589;
  WORD4(v202) = 1;
  re::DynamicArray<float *>::setCapacity((void *)&v199 + 1, 2uLL);
  LODWORD(v201) = v201 + 1;
  unint64_t v189 = 0;
  re::DynamicArray<re::TransitionCondition *>::add((void *)&v199 + 1, &v189);
  unint64_t v189 = 1;
  re::DynamicArray<re::TransitionCondition *>::add((void *)&v199 + 1, &v189);
  BYTE9(v202) = 1;
  *(void *)&long long v202 = 1;
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)&v203, (const re::DynamicString *)&v195, (uint64_t)&v199);
  if (*((void *)&v199 + 1) && *((void *)&v201 + 1)) {
    (*(void (**)(void))(**((void **)&v199 + 1) + 40))();
  }
  char v154 = (_anonymous_namespace_ *)v195;
  if (void)v195 && (BYTE8(v195)) {
    char v154 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v195 + 40))();
  }
  long long v200 = 0uLL;
  LODWORD(v201) = 0;
  *((void *)&v201 + 1) = 0;
  *(void *)&long long v202 = 0;
  LODWORD(v199) = 6750237;
  WORD4(v202) = 1;
  re::DynamicArray<float *>::setCapacity((void *)&v199 + 1, 5uLL);
  unint64_t v156 = 0;
  LODWORD(v201) = v201 + 1;
  do
  {
    unint64_t v189 = v156;
    re::DynamicArray<re::TransitionCondition *>::add((void *)&v199 + 1, &v189);
    ++v156;
  }
  while (v156 != 5);
  BYTE9(v202) = 1;
  *(void *)&long long v202 = 4;
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)&v203, (const re::DynamicString *)&v195, (uint64_t)&v199);
  if (*((void *)&v199 + 1) && *((void *)&v201 + 1)) {
    (*(void (**)(void))(**((void **)&v199 + 1) + 40))();
  }
  uint64_t v157 = (_anonymous_namespace_ *)v195;
  if (void)v195 && (BYTE8(v195)) {
    uint64_t v157 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v195 + 40))();
  }
  long long v200 = 0uLL;
  LODWORD(v201) = 0;
  *((void *)&v201 + 1) = 0;
  *(void *)&long long v202 = 0;
  LODWORD(v199) = 6684701;
  WORD4(v202) = 1;
  re::DynamicArray<float *>::setCapacity((void *)&v199 + 1, 4uLL);
  unint64_t v159 = 0;
  LODWORD(v201) = v201 + 1;
  do
  {
    unint64_t v189 = v159;
    re::DynamicArray<re::TransitionCondition *>::add((void *)&v199 + 1, &v189);
    ++v159;
  }
  while (v159 != 4);
  BYTE9(v202) = 1;
  *(void *)&long long v202 = 3;
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)&v203, (const re::DynamicString *)&v195, (uint64_t)&v199);
  if (*((void *)&v199 + 1) && *((void *)&v201 + 1)) {
    (*(void (**)(void))(**((void **)&v199 + 1) + 40))();
  }
  unint64_t v160 = (_anonymous_namespace_ *)v195;
  if (void)v195 && (BYTE8(v195)) {
    unint64_t v160 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v195 + 40))();
  }
  long long v200 = 0uLL;
  LODWORD(v201) = 0;
  *((void *)&v201 + 1) = 0;
  *(void *)&long long v202 = 0;
  LODWORD(v199) = 4128821;
  WORD4(v202) = 1;
  re::DynamicArray<float *>::setCapacity((void *)&v199 + 1, 2uLL);
  LODWORD(v201) = v201 + 1;
  unint64_t v189 = 0;
  re::DynamicArray<re::TransitionCondition *>::add((void *)&v199 + 1, &v189);
  unint64_t v189 = 1;
  re::DynamicArray<re::TransitionCondition *>::add((void *)&v199 + 1, &v189);
  BYTE9(v202) = 1;
  *(void *)&long long v202 = 1;
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)&v203, (const re::DynamicString *)&v195, (uint64_t)&v199);
  if (*((void *)&v199 + 1) && *((void *)&v201 + 1)) {
    (*(void (**)(void))(**((void **)&v199 + 1) + 40))();
  }
  uint64_t v162 = (_anonymous_namespace_ *)v195;
  if (void)v195 && (BYTE8(v195)) {
    uint64_t v162 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v195 + 40))();
  }
  long long v200 = 0uLL;
  LODWORD(v201) = 0;
  *((void *)&v201 + 1) = 0;
  *(void *)&long long v202 = 0;
  LODWORD(v199) = 9240629;
  WORD4(v202) = 1;
  re::DynamicArray<float *>::setCapacity((void *)&v199 + 1, 2uLL);
  LODWORD(v201) = v201 + 1;
  unint64_t v189 = 0;
  re::DynamicArray<re::TransitionCondition *>::add((void *)&v199 + 1, &v189);
  unint64_t v189 = 1;
  re::DynamicArray<re::TransitionCondition *>::add((void *)&v199 + 1, &v189);
  BYTE9(v202) = 1;
  *(void *)&long long v202 = 1;
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)&v203, (const re::DynamicString *)&v195, (uint64_t)&v199);
  if (*((void *)&v199 + 1) && *((void *)&v201 + 1)) {
    (*(void (**)(void))(**((void **)&v199 + 1) + 40))();
  }
  v164 = (_anonymous_namespace_ *)v195;
  if (void)v195 && (BYTE8(v195)) {
    v164 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v195 + 40))();
  }
  long long v200 = 0uLL;
  LODWORD(v201) = 0;
  *((void *)&v201 + 1) = 0;
  *(void *)&long long v202 = 0;
  LODWORD(v199) = 3735605;
  WORD4(v202) = 1;
  re::DynamicArray<float *>::setCapacity((void *)&v199 + 1, 1uLL);
  LODWORD(v201) = v201 + 1;
  unint64_t v189 = v28;
  re::DynamicArray<re::TransitionCondition *>::add((void *)&v199 + 1, &v189);
  BYTE9(v202) = 1;
  *(void *)&long long v202 = v28;
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)&v203, (const re::DynamicString *)&v195, (uint64_t)&v199);
  if (*((void *)&v199 + 1) && *((void *)&v201 + 1)) {
    (*(void (**)(void))(**((void **)&v199 + 1) + 40))();
  }
  uint64_t v166 = (_anonymous_namespace_ *)v195;
  if (void)v195 && (BYTE8(v195)) {
    uint64_t v166 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v195 + 40))();
  }
  long long v200 = 0uLL;
  LODWORD(v201) = 0;
  *((void *)&v201 + 1) = 0;
  *(void *)&long long v202 = 0;
  LODWORD(v199) = 9699381;
  WORD4(v202) = 1;
  re::DynamicArray<float *>::setCapacity((void *)&v199 + 1, 2uLL);
  LODWORD(v201) = v201 + 1;
  unint64_t v189 = 0;
  re::DynamicArray<re::TransitionCondition *>::add((void *)&v199 + 1, &v189);
  unint64_t v189 = 1;
  re::DynamicArray<re::TransitionCondition *>::add((void *)&v199 + 1, &v189);
  BYTE9(v202) = 1;
  *(void *)&long long v202 = 1;
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)&v203, (const re::DynamicString *)&v195, (uint64_t)&v199);
  if (*((void *)&v199 + 1) && *((void *)&v201 + 1)) {
    (*(void (**)(void))(**((void **)&v199 + 1) + 40))();
  }
  if (void)v195 && (BYTE8(v195)) {
    (*(void (**)(void))(*(void *)v195 + 40))();
  }
  MurmurHash3_x64_128((uint64_t)"UnlitCommon", 11, 0, (unint64_t *)&v199);
  *(void *)&long long v199 = (*((void *)&v199 + 1) - 0x61C8864680B583E9 + ((void)v199 << 6) + ((unint64_t)v199 >> 2)) ^ v199;
  re::HashBrown<unsigned long,re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::addNew(a5, (uint64_t *)&v199, (uint64_t *)&v203);
  long long v201 = 0u;
  long long v202 = 0u;
  long long v199 = 0u;
  long long v200 = 0u;
  long long v196 = 0uLL;
  LODWORD(v197) = 0;
  *((void *)&v197 + 1) = 0;
  *(void *)&long long v198 = 0;
  LODWORD(v195) = 1179701;
  WORD4(v198) = 1;
  re::DynamicArray<float *>::setCapacity((void *)&v195 + 1, 2uLL);
  LODWORD(v197) = v197 + 1;
  uint64_t v185 = 0;
  re::DynamicArray<re::TransitionCondition *>::add((void *)&v195 + 1, &v185);
  uint64_t v185 = 1;
  re::DynamicArray<re::TransitionCondition *>::add((void *)&v195 + 1, &v185);
  BYTE9(v198) = 1;
  *(void *)&long long v198 = 1;
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)&v199, (const re::DynamicString *)&v189, (uint64_t)&v195);
  if (*((void *)&v195 + 1) && *((void *)&v197 + 1)) {
    (*(void (**)(void))(**((void **)&v195 + 1) + 40))();
  }
  unint64_t v171 = (_anonymous_namespace_ *)v189;
  if (v189 && (v190[0] & 1) != 0) {
    unint64_t v171 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v189 + 40))();
  }
  long long v196 = 0uLL;
  LODWORD(v197) = 0;
  *((void *)&v197 + 1) = 0;
  *(void *)&long long v198 = 0;
  LODWORD(v195) = 6750237;
  WORD4(v198) = 1;
  re::DynamicArray<float *>::setCapacity((void *)&v195 + 1, 5uLL);
  uint64_t v173 = 0;
  LODWORD(v197) = v197 + 1;
  do
  {
    uint64_t v185 = v173;
    re::DynamicArray<re::TransitionCondition *>::add((void *)&v195 + 1, &v185);
    ++v173;
  }
  while (v173 != 5);
  BYTE9(v198) = 1;
  *(void *)&long long v198 = 4;
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)&v199, (const re::DynamicString *)&v189, (uint64_t)&v195);
  if (*((void *)&v195 + 1) && *((void *)&v197 + 1)) {
    (*(void (**)(void))(**((void **)&v195 + 1) + 40))();
  }
  int v174 = (_anonymous_namespace_ *)v189;
  if (v189 && (v190[0] & 1) != 0) {
    int v174 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v189 + 40))();
  }
  long long v196 = 0uLL;
  LODWORD(v197) = 0;
  *((void *)&v197 + 1) = 0;
  *(void *)&long long v198 = 0;
  LODWORD(v195) = 6684701;
  WORD4(v198) = 1;
  re::DynamicArray<float *>::setCapacity((void *)&v195 + 1, 4uLL);
  uint64_t v176 = 0;
  LODWORD(v197) = v197 + 1;
  do
  {
    uint64_t v185 = v176;
    re::DynamicArray<re::TransitionCondition *>::add((void *)&v195 + 1, &v185);
    ++v176;
  }
  while (v176 != 4);
  BYTE9(v198) = 1;
  *(void *)&long long v198 = 3;
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)&v199, (const re::DynamicString *)&v189, (uint64_t)&v195);
  if (*((void *)&v195 + 1) && *((void *)&v197 + 1)) {
    (*(void (**)(void))(**((void **)&v195 + 1) + 40))();
  }
  uint64_t v177 = (_anonymous_namespace_ *)v189;
  if (v189 && (v190[0] & 1) != 0) {
    uint64_t v177 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v189 + 40))();
  }
  long long v196 = 0uLL;
  LODWORD(v197) = 0;
  *((void *)&v197 + 1) = 0;
  *(void *)&long long v198 = 0;
  LODWORD(v195) = 6815797;
  WORD4(v198) = 1;
  re::DynamicArray<float *>::setCapacity((void *)&v195 + 1, 2uLL);
  LODWORD(v197) = v197 + 1;
  uint64_t v185 = 0;
  re::DynamicArray<re::TransitionCondition *>::add((void *)&v195 + 1, &v185);
  uint64_t v185 = 1;
  re::DynamicArray<re::TransitionCondition *>::add((void *)&v195 + 1, &v185);
  BYTE9(v198) = 1;
  *(void *)&long long v198 = 1;
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)&v199, (const re::DynamicString *)&v189, (uint64_t)&v195);
  if (*((void *)&v195 + 1) && *((void *)&v197 + 1)) {
    (*(void (**)(void))(**((void **)&v195 + 1) + 40))();
  }
  unint64_t v179 = (_anonymous_namespace_ *)v189;
  if (v189 && (v190[0] & 1) != 0) {
    unint64_t v179 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v189 + 40))();
  }
  long long v196 = 0uLL;
  LODWORD(v197) = 0;
  *((void *)&v197 + 1) = 0;
  *(void *)&long long v198 = 0;
  LODWORD(v195) = 3604533;
  WORD4(v198) = 1;
  re::DynamicArray<float *>::setCapacity((void *)&v195 + 1, 1uLL);
  LODWORD(v197) = v197 + 1;
  uint64_t v185 = v28;
  re::DynamicArray<re::TransitionCondition *>::add((void *)&v195 + 1, &v185);
  BYTE9(v198) = 1;
  *(void *)&long long v198 = v28;
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)&v199, (const re::DynamicString *)&v189, (uint64_t)&v195);
  if (*((void *)&v195 + 1) && *((void *)&v197 + 1)) {
    (*(void (**)(void))(**((void **)&v195 + 1) + 40))();
  }
  if (v189 && (v190[0] & 1) != 0) {
    (*(void (**)(void))(*(void *)v189 + 40))();
  }
  MurmurHash3_x64_128((uint64_t)"ARBackwardsCompatibility", 24, 0, (unint64_t *)&v195);
  *(void *)&long long v195 = (*((void *)&v195 + 1) - 0x61C8864680B583E9 + ((void)v195 << 6) + ((unint64_t)v195 >> 2)) ^ v195;
  re::HashBrown<unsigned long,re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::addNew(a5, (uint64_t *)&v195, (uint64_t *)&v199);
  long long v197 = 0u;
  long long v198 = 0u;
  long long v195 = 0u;
  long long v196 = 0u;
  v190[1] = 0;
  v190[2] = 0;
  int v191 = 0;
  uint64_t v192 = 0;
  uint64_t v193 = 0;
  LODWORD(v189) = 786485;
  __int16 v194 = 1;
  re::DynamicArray<float *>::setCapacity(v190, 2uLL);
  ++v191;
  uint64_t v188 = 0;
  re::DynamicArray<re::TransitionCondition *>::add(v190, &v188);
  uint64_t v188 = 1;
  re::DynamicArray<re::TransitionCondition *>::add(v190, &v188);
  HIBYTE(v194) = 1;
  uint64_t v193 = 1;
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)&v195, (const re::DynamicString *)&v185, (uint64_t)&v189);
  if (v190[0] && v192) {
    (*(void (**)(void))(*(void *)v190[0] + 40))();
  }
  if (v185 && (v186 & 1) != 0) {
    (*(void (**)(void))(*(void *)v185 + 40))();
  }
  MurmurHash3_x64_128((uint64_t)"DynamicLightingBackwardsCompatibility", 37, 0, &v189);
  v189 ^= v190[0] - 0x61C8864680B583E9 + (v189 << 6) + (v189 >> 2);
  re::HashBrown<unsigned long,re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::addNew(a5, (uint64_t *)&v189, (uint64_t *)&v195);
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::deinit((uint64_t)&v195);
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::deinit((uint64_t)&v199);
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::deinit((uint64_t)&v203);
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::deinit((uint64_t)&v207);
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::deinit((uint64_t)&v211);
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::deinit((uint64_t)&v215);
  return re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::deinit((uint64_t)v187);
}

void re::MaterialManager::addDefaultVariationFallbackValues(re::MaterialManager *this, re::TechniqueDefinitionBuilder *a2)
{
  uint64_t v2 = *((void *)a2 + 57);
  if (v2)
  {
    size_t v4 = (uint64_t *)*((void *)a2 + 59);
    uint64_t v17 = (void *)((char *)this + 968);
    uint64_t v18 = &v4[v2];
    unint64_t v5 = (char *)a2 + 584;
    do
    {
      uint64_t v29 = *v4;
      uint64_t v6 = re::HashBrown<unsigned long,re::HashBrown<unsigned long,unsigned short,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::find(v17, &v29);
      BOOL v7 = (_anonymous_namespace_ *)re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::HashBrown((uint64_t)v27, (uint64_t *)(*((void *)this + 122) + 72 * v6 + 8));
      signed int v24 = v27;
      uint64_t v25 = 0;
      if (v28 >= 0x10)
      {
        uint64_t v8 = 0;
        unint64_t v9 = v28 >> 4;
        while (1)
        {
          unsigned __int16 v10 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v27[0] + v8)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800).u16[0];
          uint64_t v25 = (unsigned __int16)~v10;
          if (v10 != 0xFFFF) {
            break;
          }
          v8 += 16;
          if (!--v9) {
            goto LABEL_17;
          }
        }
        uint64_t v11 = __clz(__rbit64((unsigned __int16)~v10)) + v8;
        for (i = v11; i != -1; uint64_t v11 = i)
        {
          uint64_t v12 = (_DWORD *)(v24[1] + 96 * v11);
          memset(v19, 0, sizeof(v19));
          re::DynamicString::setCapacity(v19, 0);
          uint64_t v21 = 0;
          uint64_t v22 = 0;
          int v23 = 0;
          re::DynamicString::operator=((re::DynamicString *)v19, (re::DynamicString *)v12);
          int v20 = v12[8];
          TypeSize = (_anonymous_namespace_ *)re::mtl::getTypeSize((unsigned __int16)v20);
          uint64_t v14 = (int)TypeSize;
          uint64_t v15 = v23;
          int v16 = re::mtl::getTypeSize((unsigned __int16)v20);
          memcpy(v15, v12 + 20, v16);
          re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addInternal<re::TechniqueFunctionConstant&>((uint64_t)v5, (re::DynamicString *)v12, 2, (uint64_t)v19);
          if (v21)
          {
            if (v22)
            {
              (*(void (**)(void))(*(void *)v21 + 40))();
              uint64_t v22 = 0;
              int v23 = 0;
            }
            uint64_t v21 = 0;
          }
          if (*(void *)&v19[0])
          {
            if (BYTE8(v19[0])) {
              (*(void (**)(void))(**(void **)&v19[0] + 40))();
            }
          }
          BOOL v7 = (_anonymous_namespace_ *)re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(&v24);
        }
      }
LABEL_17:
      re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::deinit((uint64_t)v27);
      ++v4;
    }
    while (v4 != v18);
  }
}

void re::HashBrown<unsigned long,re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::addNew(long long *a1, uint64_t *a2, uint64_t *a3)
{
  if (re::HashBrown<unsigned long,re::HashBrown<unsigned long,unsigned short,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::find(a1, a2) == -1)
  {
    if (!*((void *)a1 + 7))
    {
    }
    uint64_t v7 = *((void *)a1 + 4);
    if (!v7 || (unint64_t v8 = *((void *)a1 + 2), v8 > 8 * v7))
    {
      re::HashBrown<unsigned long,re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::resize(a1);
      unint64_t v8 = *((void *)a1 + 2);
    }
    unint64_t v9 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
    unint64_t v10 = (0x94D049BB133111EBLL * (v9 ^ (v9 >> 27))) ^ ((0x94D049BB133111EBLL * (v9 ^ (v9 >> 27))) >> 31);
    unint64_t v11 = v8 >> 4;
    uint64_t v12 = *(void *)a1;
    unint64_t v13 = v10 % v11;
    while (1)
    {
      unint64_t v14 = __clz(__rbit64(*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v12 + 16 * v13)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800)));
      if (v14 <= 0x3F) {
        break;
      }
      if (v13 + 1 == v11) {
        unint64_t v13 = 0;
      }
      else {
        ++v13;
      }
      if (v13 == v10 % v11)
      {
        re::internal::assertLog((re::internal *)4, v6, -1.79399301e-307, 4.74803907e-38, "assertion failure: '%s' (%s:line %i) Unexpected full hash-table", "blockIndex != h1(key) % blockCount()", "internalAdd", 656);
        _os_crash();
        __break(1u);
        break;
      }
    }
    uint64_t v15 = v12 + 16 * v13;
    int v16 = *(unsigned __int8 *)(v15 + v14);
    *(unsigned char *)(v15 + v14) = v10 & 0x7F;
    unint64_t v17 = v14 + 16 * v13;
    uint64_t v33 = *a2;
    uint64_t v18 = re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::HashBrown((uint64_t)&v34, a3);
    uint64_t v19 = *((void *)a1 + 1);
    int v20 = (uint64_t *)(v19 + 72 * v17);
    *int v20 = v33;
    if (v20 != &v33)
    {
      uint64_t v21 = (void *)(v19 + 72 * v17);
      uint64_t v22 = v21[8];
      v21[8] = v41;
      uint64_t v41 = v22;
      uint64_t v23 = v21[1];
      v21[1] = v34;
      uint64_t v34 = v23;
      uint64_t v24 = v21[2];
      void v21[2] = v35;
      uint64_t v35 = v24;
      uint64_t v25 = v21[3];
      void v21[3] = v36;
      uint64_t v36 = v25;
      uint64_t v26 = v21[6];
      v21[6] = v39;
      uint64_t v39 = v26;
      uint64_t v27 = v21[7];
      v21[7] = v40;
      uint64_t v40 = v27;
      uint64_t v28 = v21[4];
      v21[4] = v37;
      uint64_t v37 = v28;
      uint64_t v29 = v21[5];
      v21[5] = v38;
      uint64_t v38 = v29;
    }
    re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::deinit(v18);
    uint64_t v30 = *((void *)a1 + 4) - (v16 == 255);
    ++*((void *)a1 + 3);
    *((void *)a1 + 4) = v30;
    unint64_t v31 = *(void *)(*((void *)a1 + 1) + 72 * v17);
    unint64_t v32 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * (v31 ^ (v31 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v31 ^ (v31 >> 30))) >> 27));
    *((void *)a1 + 5) ^= (v32 >> 31) ^ v32;
  }
}

uint64_t re::MaterialManager::createPerSceneBufferTableForName(re::MaterialManager *this, const char *__s, uint64_t a3)
{
  void v18[2] = *MEMORY[0x263EF8340];
  size_t v6 = strlen(__s);
  if (v6)
  {
    MurmurHash3_x64_128((uint64_t)__s, v6, 0, v18);
    unint64_t v7 = (v18[1] - 0x61C8864680B583E9 + (v18[0] << 6) + (v18[0] >> 2)) ^ v18[0];
  }
  else
  {
    unint64_t v7 = 0;
  }
  unint64_t v8 = (a3 - 0x61C8864680B583E9 + (v7 << 6) + (v7 >> 2)) ^ v7;
  v18[0] = v8;
  unint64_t v9 = (void *)((char *)this + 544);
  BOOL v10 = re::HashTable<unsigned long,re::BufferTable *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::containsKey((uint64_t)this + 544, v8);
  if (v10)
  {
    unsigned int v11 = 0x7FFFFFFF;
    if (*v9)
    {
      unsigned int v12 = *(_DWORD *)(*((void *)this + 69) + 4 * (v8 % *((unsigned int *)this + 142)));
      if (v12 != 0x7FFFFFFF)
      {
        uint64_t v13 = *((void *)this + 70);
        unsigned int v11 = *(_DWORD *)(*((void *)this + 69) + 4 * (v8 % *((unsigned int *)this + 142)));
        if (*(void *)(v13 + 24 * v12 + 8) != v8)
        {
          while (1)
          {
            unsigned int v11 = *(_DWORD *)(v13
                            + 24
                            * *(unsigned int *)(*((void *)this + 69) + 4 * (v8 % *((unsigned int *)this + 142)))) & 0x7FFFFFFF;
            if (v11 == 0x7FFFFFFF) {
              break;
            }
            if (*(void *)(v13 + 24 * v11 + 8) == v8) {
              return *(void *)(*((void *)this + 70) + 24 * v11 + 16);
            }
          }
          unsigned int v11 = 0x7FFFFFFF;
        }
      }
    }
    return *(void *)(*((void *)this + 70) + 24 * v11 + 16);
  }
  else
  {
    unint64_t v14 = re::globalAllocators((re *)v10);
    uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v14[2] + 32))(v14[2], 288, 8);
    *(_OWORD *)uint64_t v15 = 0u;
    *(_OWORD *)(v15 + 16) = 0u;
    *(_OWORD *)(v15 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0u;
    *(_OWORD *)(v15 + 48) = 0u;
    *(_OWORD *)(v15 + 64) = 0u;
    *(_OWORD *)(v15 + 80) = 0u;
    *(_OWORD *)(v15 + re::DynamicArray<re::RigComponentConstraint>::deinit((uint64_t)this + 96) = 0u;
    *(_OWORD *)(v15 + 112) = 0u;
    *(_OWORD *)(v15 + 128) = 0u;
    *(_OWORD *)(v15 + 144) = 0u;
    *(_OWORD *)(v15 + 160) = 0u;
    *(_OWORD *)(v15 + 176) = 0u;
    *(_OWORD *)(v15 + 192) = 0u;
    *(_OWORD *)(v15 + 208) = 0u;
    *(_OWORD *)(v15 + 224) = 0u;
    *(_OWORD *)(v15 + 240) = 0u;
    *(_OWORD *)(v15 + 256) = 0u;
    *(_OWORD *)(v15 + 272) = 0u;
    *(_DWORD *)(v15 + 160) = 1;
    *(void *)(v15 + 176) = 0;
    *(void *)(v15 + 184) = 0;
    *(void *)(v15 + 168) = 0;
    *(_DWORD *)(v15 + 192) = 0;
    *(void *)(v15 + 208) = 0;
    *(void *)(v15 + 216) = 0;
    *(void *)(v15 + 200) = 0;
    *(_DWORD *)(v15 + 224) = 0;
    *(_OWORD *)(v15 + 2re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0u;
    *(_OWORD *)(v15 + 248) = 0u;
    *(_DWORD *)(v15 + 264) = 0;
    uint64_t v17 = v15;
    re::HashTable<unsigned long,re::BufferTable *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addNew<re::BufferTable *&>((uint64_t)v9, v18, &v17);
  }
  return v15;
}

uint64_t re::MaterialManager::deinit(re::MaterialManager *this)
{
  uint64_t v2 = (uint64_t *)((char *)this + 544);
  uint64_t v3 = *((unsigned int *)this + 144);
  if (v3)
  {
    uint64_t v4 = 0;
    unint64_t v5 = (int *)*((void *)this + 70);
    while (1)
    {
      int v6 = *v5;
      v5 += 6;
      if (v6 < 0) {
        break;
      }
      if (v3 == ++v4)
      {
        LODWORD(v4) = *((_DWORD *)this + 144);
        break;
      }
    }
  }
  else
  {
    LODWORD(v4) = 0;
  }
  if (v3 != v4)
  {
    uint64_t v7 = v4;
    do
    {
      re::internal::destroyPersistent<re::BufferTable>(*(re **)(*((void *)this + 70) + 24 * v7 + 16));
      if (*((_DWORD *)this + 144) <= (v4 + 1)) {
        int v8 = v4 + 1;
      }
      else {
        int v8 = *((_DWORD *)this + 144);
      }
      int v9 = v4;
      while (1)
      {
        uint64_t v7 = (v9 + 1);
        if (v8 - 1 == v9) {
          break;
        }
        ++v9;
        LODWORD(v4) = v7;
        if ((*(_DWORD *)(*((void *)this + 70) + 24 * v7) & 0x80000000) != 0) {
          goto LABEL_17;
        }
      }
      LODWORD(v4) = v8;
LABEL_17:
      ;
    }
    while (v3 != v4);
  }
  re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit(v2);
  uint64_t v10 = *((void *)this + 52);
  *((void *)this + 52) = 0;
  if (v10)
  {
    unsigned int v11 = (id *)*((void *)this + 54);
    uint64_t v12 = 8 * v10;
    do
    {
      objc_destroyWeak(v11);
      *v11++ = 0;
      v12 -= 8;
    }
    while (v12);
  }
  ++*((_DWORD *)this + 106);
  re::DynamicArray<re::ArcWeakPtr<re::internal::AssetEntry>>::deinit((uint64_t)this + 400);
  os_unfair_lock_lock((os_unfair_lock_t)this + 122);
  re::HashTable<unsigned long,re::SharedPtr<re::MaterialParameterTable>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::deinit((uint64_t *)this + 55);
  os_unfair_lock_unlock((os_unfair_lock_t)this + 122);
  uint64_t v13 = *((unsigned int *)this + 132);
  if (v13)
  {
    uint64_t v14 = 0;
    uint64_t v15 = (int *)*((void *)this + 64);
    while (1)
    {
      int v16 = *v15;
      v15 += 6;
      if (v16 < 0) {
        break;
      }
      if (v13 == ++v14)
      {
        LODWORD(v14) = *((_DWORD *)this + 132);
        break;
      }
    }
  }
  else
  {
    LODWORD(v14) = 0;
  }
  if (v13 != v14)
  {
    uint64_t v17 = v14;
    do
    {
      re::internal::destroyPersistent<re::TextureTable>(*(re **)(*((void *)this + 64) + 24 * v17 + 16));
      if (*((_DWORD *)this + 132) <= (v14 + 1)) {
        int v18 = v14 + 1;
      }
      else {
        int v18 = *((_DWORD *)this + 132);
      }
      int v19 = v14;
      while (1)
      {
        uint64_t v17 = (v19 + 1);
        if (v18 - 1 == v19) {
          break;
        }
        ++v19;
        LODWORD(v14) = v17;
        if ((*(_DWORD *)(*((void *)this + 64) + 24 * v17) & 0x80000000) != 0) {
          goto LABEL_37;
        }
      }
      LODWORD(v14) = v18;
LABEL_37:
      ;
    }
    while (v13 != v14);
  }
  re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit((uint64_t *)this + 62);
  uint64_t v21 = *((unsigned int *)this + 156);
  if (v21)
  {
    uint64_t v22 = 0;
    uint64_t v23 = (int *)*((void *)this + 76);
    while (1)
    {
      int v24 = *v23;
      v23 += 6;
      if (v24 < 0) {
        break;
      }
      if (v21 == ++v22)
      {
        LODWORD(v22) = *((_DWORD *)this + 156);
        break;
      }
    }
  }
  else
  {
    LODWORD(v22) = 0;
  }
  if (v21 != v22)
  {
    uint64_t v25 = v22;
    unsigned int v26 = *((_DWORD *)this + 156);
    do
    {
      uint64_t v27 = *(re::SamplerTable **)(*((void *)this + 76) + 24 * v25 + 16);
      if (v27)
      {
        uint64_t v28 = re::globalAllocators(v20)[2];
        re::SamplerTable::~SamplerTable(v27);
        int v20 = (re *)(*(uint64_t (**)(uint64_t, re::SamplerTable *))(*(void *)v28 + 40))(v28, v27);
        unsigned int v26 = *((_DWORD *)this + 156);
      }
      if (v26 <= (int)v22 + 1) {
        unsigned int v29 = v22 + 1;
      }
      else {
        unsigned int v29 = v26;
      }
      while (1)
      {
        uint64_t v25 = (v22 + 1);
        if (v29 - 1 == v22) {
          break;
        }
        LODWORD(v22) = v22 + 1;
        unsigned int v30 = v25;
        if ((*(_DWORD *)(*((void *)this + 76) + 24 * v25) & 0x80000000) != 0) {
          goto LABEL_55;
        }
      }
      unsigned int v30 = v29;
LABEL_55:
      LODWORD(v22) = v30;
    }
    while (v21 != v30);
  }
  re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit((uint64_t *)this + 74);
  uint64_t v31 = *((unsigned int *)this + 44);
  if (v31)
  {
    uint64_t v32 = 0;
    uint64_t v33 = (int *)*((void *)this + 20);
    while (1)
    {
      int v34 = *v33;
      v33 += 6;
      if (v34 < 0) {
        break;
      }
      if (v31 == ++v32)
      {
        LODWORD(vre::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = *((_DWORD *)this + 44);
        break;
      }
    }
  }
  else
  {
    LODWORD(vre::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0;
  }
  if (v31 != v32)
  {
    uint64_t v35 = v32;
    do
    {
      re::internal::destroyPersistent<re::TechniqueResolutions<re::AttributeResolution>>(*(re **)(*((void *)this + 20)
                                                                                                + 24 * v35
                                                                                                + 16));
      if (*((_DWORD *)this + 44) <= (v32 + 1)) {
        int v36 = v32 + 1;
      }
      else {
        int v36 = *((_DWORD *)this + 44);
      }
      int v37 = v32;
      while (1)
      {
        uint64_t v35 = (v37 + 1);
        if (v36 - 1 == v37) {
          break;
        }
        ++v37;
        LODWORD(vre::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = v35;
        if ((*(_DWORD *)(*((void *)this + 20) + 24 * v35) & 0x80000000) != 0) {
          goto LABEL_72;
        }
      }
      LODWORD(vre::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = v36;
LABEL_72:
      ;
    }
    while (v31 != v32);
  }
  uint64_t v38 = *((unsigned int *)this + 32);
  if (v38)
  {
    uint64_t v39 = 0;
    uint64_t v40 = (int *)*((void *)this + 14);
    while (1)
    {
      int v41 = *v40;
      v40 += 6;
      if (v41 < 0) {
        break;
      }
      if (v38 == ++v39)
      {
        LODWORD(v39) = *((_DWORD *)this + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v39) = 0;
  }
  if (v38 != v39)
  {
    uint64_t v42 = v39;
    do
    {
      re::internal::destroyPersistent<re::TechniqueResolutions<re::BufferResolution>>(*(re **)(*((void *)this + 14)
                                                                                             + 24 * v42
                                                                                             + 16));
      if (*((_DWORD *)this + 32) <= (v39 + 1)) {
        int v43 = v39 + 1;
      }
      else {
        int v43 = *((_DWORD *)this + 32);
      }
      int v44 = v39;
      while (1)
      {
        uint64_t v42 = (v44 + 1);
        if (v43 - 1 == v44) {
          break;
        }
        ++v44;
        LODWORD(v39) = v42;
        if ((*(_DWORD *)(*((void *)this + 14) + 24 * v42) & 0x80000000) != 0) {
          goto LABEL_89;
        }
      }
      LODWORD(v39) = v43;
LABEL_89:
      ;
    }
    while (v38 != v39);
  }
  uint64_t v45 = *((unsigned int *)this + 20);
  if (v45)
  {
    uint64_t v46 = 0;
    unint64_t v47 = (int *)*((void *)this + 8);
    while (1)
    {
      int v48 = *v47;
      v47 += 6;
      if (v48 < 0) {
        break;
      }
      if (v45 == ++v46)
      {
        LODWORD(v46) = *((_DWORD *)this + 20);
        break;
      }
    }
  }
  else
  {
    LODWORD(v46) = 0;
  }
  if (v45 != v46)
  {
    uint64_t v49 = v46;
    do
    {
      re::internal::destroyPersistent<re::TechniqueResolutions<re::BufferResolution>>(*(re **)(*((void *)this + 8)
                                                                                             + 24 * v49
                                                                                             + 16));
      if (*((_DWORD *)this + 20) <= (v46 + 1)) {
        int v50 = v46 + 1;
      }
      else {
        int v50 = *((_DWORD *)this + 20);
      }
      int v51 = v46;
      while (1)
      {
        uint64_t v49 = (v51 + 1);
        if (v50 - 1 == v51) {
          break;
        }
        ++v51;
        LODWORD(v46) = v49;
        if ((*(_DWORD *)(*((void *)this + 8) + 24 * v49) & 0x80000000) != 0) {
          goto LABEL_106;
        }
      }
      LODWORD(v46) = v50;
LABEL_106:
      ;
    }
    while (v45 != v46);
  }
  uint64_t v52 = *((unsigned int *)this + 8);
  if (v52)
  {
    uint64_t v53 = 0;
    int64_t v54 = (int *)*((void *)this + 2);
    while (1)
    {
      int v55 = *v54;
      v54 += 6;
      if (v55 < 0) {
        break;
      }
      if (v52 == ++v53)
      {
        LODWORD(v53) = *((_DWORD *)this + 8);
        break;
      }
    }
  }
  else
  {
    LODWORD(v53) = 0;
  }
  if (v52 != v53)
  {
    uint64_t v56 = v53;
    do
    {
      re::internal::destroyPersistent<re::TechniqueResolutions<re::ConstantResolution>>(*(re **)(*((void *)this + 2)
                                                                                               + 24 * v56
                                                                                               + 16));
      if (*((_DWORD *)this + 8) <= (v53 + 1)) {
        int v57 = v53 + 1;
      }
      else {
        int v57 = *((_DWORD *)this + 8);
      }
      int v58 = v53;
      while (1)
      {
        uint64_t v56 = (v58 + 1);
        if (v57 - 1 == v58) {
          break;
        }
        ++v58;
        LODWORD(v53) = v56;
        if ((*(_DWORD *)(*((void *)this + 2) + 24 * v56) & 0x80000000) != 0) {
          goto LABEL_123;
        }
      }
      LODWORD(v53) = v57;
LABEL_123:
      ;
    }
    while (v52 != v53);
  }
  uint64_t v59 = *((unsigned int *)this + 56);
  if (v59)
  {
    uint64_t v60 = 0;
    unsigned int v61 = (int *)*((void *)this + 26);
    while (1)
    {
      int v62 = *v61;
      v61 += 6;
      if (v62 < 0) {
        break;
      }
      if (v59 == ++v60)
      {
        LODWORD(v60) = *((_DWORD *)this + 56);
        break;
      }
    }
  }
  else
  {
    LODWORD(v60) = 0;
  }
  if (v59 != v60)
  {
    uint64_t v63 = v60;
    do
    {
      re::internal::destroyPersistent<re::TechniqueResolutions<re::BufferResolution>>(*(re **)(*((void *)this + 26)
                                                                                             + 24 * v63
                                                                                             + 16));
      if (*((_DWORD *)this + 56) <= (v60 + 1)) {
        int v64 = v60 + 1;
      }
      else {
        int v64 = *((_DWORD *)this + 56);
      }
      int v65 = v60;
      while (1)
      {
        uint64_t v63 = (v65 + 1);
        if (v64 - 1 == v65) {
          break;
        }
        ++v65;
        LODWORD(v60) = v63;
        if ((*(_DWORD *)(*((void *)this + 26) + 24 * v63) & 0x80000000) != 0) {
          goto LABEL_140;
        }
      }
      LODWORD(v60) = v64;
LABEL_140:
      ;
    }
    while (v59 != v60);
  }
  uint64_t v66 = *((unsigned int *)this + 68);
  if (v66)
  {
    uint64_t v67 = 0;
    long long v68 = (int *)*((void *)this + 32);
    while (1)
    {
      int v69 = *v68;
      v68 += 6;
      if (v69 < 0) {
        break;
      }
      if (v66 == ++v67)
      {
        LODWORD(v67) = *((_DWORD *)this + 68);
        break;
      }
    }
  }
  else
  {
    LODWORD(v67) = 0;
  }
  if (v66 != v67)
  {
    uint64_t v70 = v67;
    do
    {
      re::internal::destroyPersistent<re::TechniqueResolutions<re::BufferResolution>>(*(re **)(*((void *)this + 32)
                                                                                             + 24 * v70
                                                                                             + 16));
      if (*((_DWORD *)this + 68) <= (v67 + 1)) {
        int v71 = v67 + 1;
      }
      else {
        int v71 = *((_DWORD *)this + 68);
      }
      int v72 = v67;
      while (1)
      {
        uint64_t v70 = (v72 + 1);
        if (v71 - 1 == v72) {
          break;
        }
        ++v72;
        LODWORD(v67) = v70;
        if ((*(_DWORD *)(*((void *)this + 32) + 24 * v70) & 0x80000000) != 0) {
          goto LABEL_157;
        }
      }
      LODWORD(v67) = v71;
LABEL_157:
      ;
    }
    while (v66 != v67);
  }
  if (*((_DWORD *)this + 265))
  {
    uint64_t v73 = *((unsigned int *)this + 264);
    if (v73) {
      memset_pattern16(*((void **)this + 130), &memset_pattern_266, 4 * v73);
    }
    uint64_t v74 = *((unsigned int *)this + 266);
    if (v74)
    {
      uint64_t v75 = 0;
      uint64_t v76 = 32 * v74;
      do
      {
        uint64_t v77 = *((void *)this + 131) + v75;
        int v78 = *(_DWORD *)(v77 + 8);
        if (v78 < 0) {
          *(_DWORD *)(v77 + 8) = v78 & 0x7FFFFFFF;
        }
        v75 += 32;
      }
      while (v76 != v75);
    }
    *((_DWORD *)this + 267) = 0x7FFFFFFF;
    *(void *)((char *)this + 1060) = 0;
    ++*((_DWORD *)this + 268);
  }
  return re::DataArray<re::MaterialParameterBlock>::deinit((uint64_t)this + 1080);
}

re *re::internal::destroyPersistent<re::BufferTable>(re *result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = re::globalAllocators(result)[2];
    re::BufferTable::~BufferTable(v1);
    uint64_t v3 = *(uint64_t (**)(uint64_t, re::BufferTable *))(*(void *)v2 + 40);
    return (re *)v3(v2, v1);
  }
  return result;
}

re *re::internal::destroyPersistent<re::TextureTable>(re *result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = re::globalAllocators(result)[2];
    re::TextureTableImpl<NS::SharedPtr<MTL::Texture>>::~TextureTableImpl(v1);
    uint64_t v3 = *(uint64_t (**)(uint64_t, re *))(*(void *)v2 + 40);
    return (re *)v3(v2, v1);
  }
  return result;
}

re *re::internal::destroyPersistent<re::TechniqueResolutions<re::AttributeResolution>>(re *result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = re::globalAllocators(result)[2];
    uint64_t v3 = *((void *)v1 + 1);
    if (v3)
    {
      if (*((void *)v1 + 5)) {
        (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
      }
      *((void *)v1 + 5) = 0;
      *((void *)v1 + 2) = 0;
      *((void *)v1 + 3) = 0;
      *((void *)v1 + 1) = 0;
      ++*((_DWORD *)v1 + 8);
    }
    uint64_t v4 = *(uint64_t (**)(uint64_t, re *))(*(void *)v2 + 40);
    return (re *)v4(v2, v1);
  }
  return result;
}

re *re::internal::destroyPersistent<re::TechniqueResolutions<re::BufferResolution>>(re *result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = re::globalAllocators(result)[2];
    re::DynamicArray<unsigned long>::deinit((uint64_t)v1 + 48);
    re::DynamicArray<unsigned long>::deinit((uint64_t)v1 + 8);
    uint64_t v3 = *(uint64_t (**)(uint64_t, re *))(*(void *)v2 + 40);
    return (re *)v3(v2, v1);
  }
  return result;
}

re *re::internal::destroyPersistent<re::TechniqueResolutions<re::ConstantResolution>>(re *result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = re::globalAllocators(result)[2];
    re::DynamicArray<re::ConstantResolution>::deinit((uint64_t)v1 + 48);
    re::DynamicArray<re::ConstantResolution>::deinit((uint64_t)v1 + 8);
    uint64_t v3 = *(uint64_t (**)(uint64_t, re *))(*(void *)v2 + 40);
    return (re *)v3(v2, v1);
  }
  return result;
}

uint64_t re::DataArray<re::MaterialParameterBlock>::deinit(uint64_t result)
{
  if (*(_DWORD *)(result + 44))
  {
    uint64_t v1 = (void *)result;
    double v2 = re::DataArray<re::MaterialParameterBlock>::clear((void *)result);
    if (!v1[2])
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v3 = (void *)v1[4];
    (*(void (**)(void, void, double))(*(void *)*v1 + 40))(*v1, *v3, v2);
    (*(void (**)(void, void))(*(void *)*v1 + 40))(*v1, v3[1]);
    BOOL result = re::DynamicArray<unsigned long>::deinit((uint64_t)v1);
    *((_DWORD *)v1 + 11) = 0;
  }
  return result;
}

uint64_t re::HashTable<unsigned long,re::TextureTable *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addNew<re::TextureTable *&>(uint64_t a1, unint64_t *a2, void *a3)
{
  unint64_t v6 = *a2;
  if (!*(void *)a1)
  {
    LODWORD(v7) = 0;
    goto LABEL_8;
  }
  unint64_t v7 = v6 % *(unsigned int *)(a1 + 24);
  uint64_t v8 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v7);
  if (v8 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v11 = re::HashTable<unsigned long,re::TextureTable *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addEmplace<re::TextureTable *&>(a1, v7, v6, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v10 = *(void *)(a1 + 16) + 24 * v11;
    return v10 + 16;
  }
  uint64_t v9 = *(void *)(a1 + 16);
  while (*(void *)(v9 + 24 * v8 + 8) != v6)
  {
    LODWORD(v8) = *(_DWORD *)(v9 + 24 * v8) & 0x7FFFFFFF;
    if (v8 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  uint64_t v10 = v9 + 24 * v8;
  return v10 + 16;
}

BOOL re::HashTable<unsigned long,re::BufferTable *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::containsKey(uint64_t a1, unint64_t a2)
{
  if (!*(void *)a1) {
    return 0;
  }
  uint64_t v2 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * (a2 % *(unsigned int *)(a1 + 24)));
  if (v2 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 16);
  if (*(void *)(v4 + 24 * v2 + 8) == a2) {
    return 1;
  }
  do
  {
    LODWORD(v2) = *(_DWORD *)(v4 + 24 * v2) & 0x7FFFFFFF;
    BOOL result = v2 != 0x7FFFFFFF;
  }
  while (v2 != 0x7FFFFFFF && *(void *)(v4 + 24 * v2 + 8) != a2);
  return result;
}

void re::HashTable<unsigned long,re::BufferTable *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addNew<re::BufferTable *&>(uint64_t a1, unint64_t *a2, void *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)a1;
  if (*(void *)a1)
  {
    unint64_t v7 = v6 % *(unsigned int *)(a1 + 24);
    uint64_t v8 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v7);
    if (v8 != 0x7FFFFFFF)
    {
      uint64_t v13 = *(void *)(a1 + 16);
      if (*(void *)(v13 + 24 * v8 + 8) == v6) {
        return;
      }
      while (1)
      {
        LODWORD(v8) = *(_DWORD *)(v13 + 24 * v8) & 0x7FFFFFFF;
        if (v8 == 0x7FFFFFFF) {
          break;
        }
        if (*(void *)(v13 + 24 * v8 + 8) == v6) {
          return;
        }
      }
    }
  }
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned long,re::TextureTable *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      LODWORD(v7) = v6 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
      unint64_t v6 = *a2;
    }
    else
    {
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = v10 + 1;
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 24 * v9);
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 24 * v9);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  uint64_t v14 = 24 * v9;
  *(_DWORD *)(v11 + v14) = v12 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + v14) = *(_DWORD *)(*(void *)(a1 + 16) + 24 * v9) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * v7);
  *(void *)(*(void *)(a1 + 16) + 24 * v9 + 8) = v6;
  *(void *)(*(void *)(a1 + 16) + 24 * v9 + 16) = *a3;
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * v7) = v9;
  ++*(_DWORD *)(a1 + 28);
  ++*(_DWORD *)(a1 + 40);
}

uint64_t re::MaterialManager::findTextureTableByName(re::MaterialManager *this, const char *__s)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t v3 = (char *)this + 496;
  size_t v4 = strlen(__s);
  if (v4)
  {
    MurmurHash3_x64_128((uint64_t)__s, v4, 0, (unint64_t *)&v9);
    unint64_t v5 = (*((void *)&v9 + 1) + ((void)v9 << 6) + ((unint64_t)v9 >> 2) - 0x61C8864680B583E9) ^ v9;
  }
  else
  {
    unint64_t v5 = 0;
  }
  *(void *)&long long v9 = v5;
  uint64_t v6 = re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet((uint64_t)v3, (uint64_t *)&v9);
  if (v6) {
    return *(void *)v6;
  }
  uint64_t v8 = *re::graphicsLogObjects(0);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(v9) = 136315138;
    *(void *)((char *)&v9 + 4) = __s;
    _os_log_impl(&dword_233120000, v8, OS_LOG_TYPE_DEFAULT, "Texture table %s not found. Returning null.", (uint8_t *)&v9, 0xCu);
  }
  return 0;
}

uint64_t re::MaterialManager::findSamplerTableByName(re::MaterialManager *this, const char *__s)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  size_t v4 = (re *)strlen(__s);
  if (v4)
  {
    size_t v4 = (re *)MurmurHash3_x64_128((uint64_t)__s, (int)v4, 0, (unint64_t *)&v10);
    unint64_t v5 = (*((void *)&v10 + 1) + ((void)v10 << 6) + ((unint64_t)v10 >> 2) - 0x61C8864680B583E9) ^ v10;
  }
  else
  {
    unint64_t v5 = 0;
  }
  if (*((void *)this + 74))
  {
    uint64_t v6 = *(unsigned int *)(*((void *)this + 75) + 4 * (v5 % *((unsigned int *)this + 154)));
    if (v6 != 0x7FFFFFFF)
    {
      uint64_t v9 = *((void *)this + 76);
      if (*(void *)(v9 + 24 * v6 + 8) == v5) {
        return *(void *)(v9 + 24 * v6 + 16);
      }
      while (1)
      {
        LODWORD(v6) = *(_DWORD *)(v9 + 24 * v6) & 0x7FFFFFFF;
        if (v6 == 0x7FFFFFFF) {
          break;
        }
        if (*(void *)(v9 + 24 * v6 + 8) == v5) {
          return *(void *)(v9 + 24 * v6 + 16);
        }
      }
    }
  }
  unint64_t v7 = *re::graphicsLogObjects(v4);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(v10) = 136315138;
    *(void *)((char *)&v10 + 4) = __s;
    _os_log_impl(&dword_233120000, v7, OS_LOG_TYPE_DEFAULT, "Sampler table %s not found. Returning null.", (uint8_t *)&v10, 0xCu);
  }
  return 0;
}

uint64_t re::MaterialManager::findPerSceneTextureTableByName(re::MaterialManager *this, const char *__s, uint64_t a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  unint64_t v5 = (char *)this + 496;
  size_t v6 = strlen(__s);
  if (v6)
  {
    MurmurHash3_x64_128((uint64_t)__s, v6, 0, (unint64_t *)v11);
    unint64_t v7 = (*(void *)&v11[8] - 0x61C8864680B583E9 + (*(void *)v11 << 6) + (*(void *)v11 >> 2)) ^ *(void *)v11;
  }
  else
  {
    unint64_t v7 = 0;
  }
  *(void *)uint64_t v11 = (a3 - 0x61C8864680B583E9 + (v7 << 6) + (v7 >> 2)) ^ v7;
  uint64_t v8 = re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet((uint64_t)v5, (uint64_t *)v11);
  if (v8) {
    return *(void *)v8;
  }
  long long v10 = *re::graphicsLogObjects(0);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t v11 = 136315394;
    *(void *)&v11[4] = __s;
    *(_WORD *)&v11[12] = 2048;
    *(void *)&v11[14] = a3;
    _os_log_impl(&dword_233120000, v10, OS_LOG_TYPE_DEFAULT, "Texture table %s for scene index %zu not found. Returning null.", v11, 0x16u);
  }
  return 0;
}

uint64_t re::MaterialManager::findOrCreateTextureTableForName(re::MaterialManager *this, const char *__s)
{
  uint64_t v12[2] = *MEMORY[0x263EF8340];
  size_t v4 = strlen(__s);
  if (v4)
  {
    MurmurHash3_x64_128((uint64_t)__s, v4, 0, (unint64_t *)v12);
    unint64_t v5 = (v12[1] + (v12[0] << 6) + ((unint64_t)v12[0] >> 2) - 0x61C8864680B583E9) ^ v12[0];
  }
  else
  {
    unint64_t v5 = 0;
  }
  v12[0] = v5;
  size_t v6 = (char *)this + 496;
  uint64_t v7 = re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet((uint64_t)v6, v12);
  if (v7) {
    return *(void *)v7;
  }
  uint64_t v9 = re::globalAllocators(0);
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v9[2] + 32))(v9[2], 112, 8);
  *(_OWORD *)(v10 + 8) = 0u;
  *(_OWORD *)(v10 + 24) = 0u;
  *(_OWORD *)(v10 + 40) = 0u;
  *(_OWORD *)(v10 + 56) = 0u;
  *(_OWORD *)(v10 + 72) = 0u;
  *(_OWORD *)(v10 + 88) = 0u;
  *(void *)(v10 + 104) = 0;
  *(void *)uint64_t v10 = &unk_26E710940;
  uint64_t v11 = v10;
  re::HashTable<unsigned long,re::TextureTable *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addNew<re::TextureTable *&>((uint64_t)v6, (unint64_t *)v12, &v11);
  return v11;
}

void re::MaterialManager::resizeScenes(re::MaterialManager *this, unint64_t a2)
{
  uint64_t v111 = *MEMORY[0x263EF8340];
  if (a2 <= 4) {
    unint64_t v3 = 4;
  }
  else {
    unint64_t v3 = a2;
  }
  unint64_t v4 = *((void *)this + 86);
  unint64_t v5 = v4;
  if (v3 < v4)
  {
    unint64_t v6 = v3;
    do
    {
      unint64_t v7 = *((void *)this + 86);
      if (v7 <= v6)
      {
        uint64_t v98 = 0;
        long long v109 = 0u;
        long long v110 = 0u;
        long long v107 = 0u;
        long long v108 = 0u;
        *(_OWORD *)unint64_t v106 = 0u;
        unint64_t v4 = &_os_log_internal;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)char v99 = 136315906;
        *(void *)&v99[4] = "operator[]";
        __int16 v100 = 1024;
        int v101 = 789;
        __int16 v102 = 2048;
        unint64_t v103 = v6;
        __int16 v104 = 2048;
        unint64_t v105 = v7;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_119:
        uint64_t v98 = 0;
        long long v109 = 0u;
        long long v110 = 0u;
        long long v107 = 0u;
        long long v108 = 0u;
        *(_OWORD *)unint64_t v106 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)char v99 = 136315906;
        *(void *)&v99[4] = "operator[]";
        __int16 v100 = 1024;
        int v101 = 789;
        __int16 v102 = 2048;
        unint64_t v103 = v4;
        __int16 v104 = 2048;
        unint64_t v105 = v6;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      unint64_t v8 = *((void *)this + 88) + (v6 << 6);
      re::internal::destroyPersistent<re::TextureTable>(*(re **)(v8 + 24));
      re::internal::destroyPersistent<re::BufferTable>(*(re **)(v8 + 32));
      re::internal::destroyPersistent<re::BufferTable>(*(re **)(v8 + 40));
      if (*((void *)this + 62))
      {
        uint64_t v9 = *(void *)v8;
        unint64_t v10 = *(void *)v8 % (unint64_t)*((unsigned int *)this + 130);
        uint64_t v11 = *((void *)this + 63);
        uint64_t v12 = *(unsigned int *)(v11 + 4 * v10);
        if (v12 != 0x7FFFFFFF)
        {
          uint64_t v13 = *((void *)this + 64);
          if (*(void *)(v13 + 24 * v12 + 8) == v9)
          {
            *(_DWORD *)(v11 + 4 * v10) = *(_DWORD *)(v13 + 24 * v12) & 0x7FFFFFFF;
LABEL_14:
            uint64_t v15 = *((void *)this + 64);
            int v16 = (int *)(v15 + 24 * v12);
            int v17 = *v16;
            if (*v16 < 0)
            {
              *int v16 = v17 & 0x7FFFFFFF;
              uint64_t v15 = *((void *)this + 64);
              int v17 = *(_DWORD *)(v15 + 24 * v12);
            }
            *(_DWORD *)(v15 + 24 * v12) = *((_DWORD *)this + 133) | v17 & 0x80000000;
            *((_DWORD *)this + 133) = v12;
            --*((_DWORD *)this + 131);
            ++*((_DWORD *)this + 134);
          }
          else
          {
            while (1)
            {
              uint64_t v14 = v12;
              uint64_t v12 = *(_DWORD *)(v13 + 24 * v12) & 0x7FFFFFFF;
              if (v12 == 0x7FFFFFFF) {
                break;
              }
              if (*(void *)(v13 + 24 * v12 + 8) == v9)
              {
                *(_DWORD *)(v13 + 24 * v14) = *(_DWORD *)(v13 + 24 * v14) & 0x80000000 | *(_DWORD *)(v13 + 24 * v12) & 0x7FFFFFFF;
                goto LABEL_14;
              }
            }
          }
        }
      }
      re::HashTable<unsigned long,re::BufferTable *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::remove((uint64_t)this + 544, *(void *)(v8 + 8));
      re::HashTable<unsigned long,re::BufferTable *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::remove((uint64_t)this + 544, *(void *)(v8 + 16));
      ++v6;
    }
    while (v6 != v4);
    unint64_t v5 = *((void *)this + 86);
  }
  if (v5 >= v3)
  {
    if (v5 <= v3) {
      goto LABEL_27;
    }
  }
  else
  {
    if (*((void *)this + 85) < v3)
    {
      re::DynamicArray<re::MaterialManager::PerSceneTables>::setCapacity((void *)this + 84, v3);
      unint64_t v5 = *((void *)this + 86);
    }
    if (v5 < v3)
    {
      int v18 = (void *)(*((void *)this + 88) + (v5 << 6));
      uint64_t v19 = (v3 << 6) - (v5 << 6);
      if (v19 >= 1) {
        bzero(v18, ((((unint64_t)v19 >> 6) - ((unint64_t)v19 > 0x3F)) << 6) + 64);
      }
    }
  }
  *((void *)this + 86) = v3;
  ++*((_DWORD *)this + 174);
LABEL_27:
  if (v4 < v3)
  {
    unint64_t v86 = v3;
    do
    {
      unint64_t v6 = *((void *)this + 86);
      if (v6 <= v4) {
        goto LABEL_119;
      }
      uint64_t v20 = *((void *)this + 88);
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF95E80, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26AF95E80))
      {
        _MergedGlobals_390 = re::hashString((re *)"scene", v84);
        __cxa_guard_release(&qword_26AF95E80);
      }
      unint64_t v21 = v4 - 0x61C8864680B583E9;
      *(void *)(v20 + (v4 << 6)) = (v4
                                    - 0x61C8864680B583E9
                                    + (_MergedGlobals_390 << 6)
                                    + ((unint64_t)_MergedGlobals_390 >> 2)) ^ _MergedGlobals_390;
      MurmurHash3_x64_128((uint64_t)"scene", 5, 0, (unint64_t *)v106);
      unint64_t v22 = ((uint64_t)v106[1] + 64 * (uint64_t)v106[0] + ((unint64_t)v106[0] >> 2) - 0x61C8864680B583E9) ^ (uint64_t)v106[0];
      v106[0] = (id)((v4 - 0x61C8864680B583E9 + (v22 << 6) + (v22 >> 2)) ^ v22);
      uint64_t v23 = re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::containsKey((uint64_t)this + 496, (uint64_t *)v106);
      if (!v23)
      {
        unsigned int v26 = re::globalAllocators((re *)v23);
        uint64_t v27 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v26[2] + 32))(v26[2], 112, 8);
        *(_OWORD *)(v27 + 8) = 0u;
        *(_OWORD *)(v27 + 24) = 0u;
        *(_OWORD *)(v27 + 40) = 0u;
        *(_OWORD *)(v27 + 56) = 0u;
        *(_OWORD *)(v27 + 72) = 0u;
        *(_OWORD *)(v27 + 88) = 0u;
        *(void *)(v27 + 104) = 0;
        *(void *)uint64_t v27 = &unk_26E710940;
        *(void *)char v99 = v27;
        uint64_t v23 = re::HashTable<unsigned long,re::TextureTable *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addNew<re::TextureTable *&>((uint64_t)this + 496, (unint64_t *)v106, v99);
        uint64_t v28 = *(void *)v99;
        goto LABEL_41;
      }
      if (*((void *)this + 62))
      {
        uint64_t v24 = *((void *)this + 64);
        uint64_t v25 = *(unsigned int *)(*((void *)this + 63) + 4 * ((unint64_t)v106[0] % *((unsigned int *)this + 130)));
        if (v25 != 0x7FFFFFFF)
        {
          while (*(id *)(v24 + 24 * v25 + 8) != v106[0])
          {
            uint64_t v25 = *(_DWORD *)(v24 + 24 * v25) & 0x7FFFFFFF;
            if (v25 == 0x7FFFFFFF) {
              goto LABEL_39;
            }
          }
          goto LABEL_40;
        }
      }
      else
      {
        uint64_t v24 = *((void *)this + 64);
      }
LABEL_39:
      LODWORD(v25) = 0x7FFFFFFF;
LABEL_40:
      uint64_t v28 = *(void *)(v24 + 24 * v25 + 16);
LABEL_41:
      uint64_t v29 = v20 + (v4 << 6);
      *(void *)(v29 + 24) = v28;
      unsigned int v30 = (void **)(v29 + 24);
      uint64_t v31 = v28 + 72;
      re::DynamicArray<re::TextureViews<NS::SharedPtr<MTL::Texture>>>::setCapacity((void *)v31, 0xAuLL);
      ++*(_DWORD *)(v31 + 24);
      uint64_t v32 = *v30;
      *(void *)char v99 = 0x51D6CB770EC4;
      re::TextureTable::setTexture(v32, (uint64_t *)v99, (id *)(*(void *)(*((void *)this + 112) + 64) + 48));
      *(void *)char v99 = 0;
      uint64_t v33 = *v30;
      uint64_t v98 = 0x5BE38A6CA01CLL;
      re::TextureTable::setTexture(v33, &v98, (id *)(*(void *)(*((void *)this + 112) + 64) + 24));
      uint64_t v98 = 0;
      int v34 = *v30;
      uint64_t v97 = 0xE459D7324435E49;
      re::TextureTable::setTexture(v34, &v97, (id *)(*(void *)(*((void *)this + 112) + 64) + 88));
      uint64_t v97 = 0;
      uint64_t v35 = *v30;
      uint64_t v96 = 0xC0489AC946E8FF4;
      re::TextureTable::setTexture(v35, &v96, (id *)(*(void *)(*((void *)this + 112) + 64) + 88));
      uint64_t v96 = 0;
      int v36 = *v30;
      uint64_t v95 = 0x74B9011688CA44FFLL;
      re::TextureTable::setTexture(v36, &v95, (id *)(*(void *)(*((void *)this + 112) + 64) + 88));
      uint64_t v95 = 0;
      int v37 = *v30;
      uint64_t v94 = 0x23C1563FB78C78B1;
      re::TextureTable::setTexture(v37, &v94, (id *)(*(void *)(*((void *)this + 112) + 64) + 88));
      uint64_t v94 = 0;
      uint64_t v38 = *v30;
      uint64_t v93 = 0x5495C6E7C96973E2;
      re::TextureTable::setTexture(v38, &v93, (id *)(*(void *)(*((void *)this + 112) + 64) + 88));
      uint64_t v93 = 0;
      uint64_t v39 = *v30;
      uint64_t v92 = 0x4DB123A4BB1CD2C0;
      re::TextureTable::setTexture(v39, &v92, (id *)(*(void *)(*((void *)this + 112) + 104) + 776));
      uint64_t v92 = 0;
      uint64_t v40 = *v30;
      uint64_t v91 = 0x564C767D75CDLL;
      v106[0] = 0;
      re::TextureTable::setTexture(v40, &v91, v106);
      if (v106[0]) {

      }
      uint64_t v91 = 0;
      int v41 = *v30;
      uint64_t v90 = 0x143F50BFF6F9E46;
      v106[0] = 0;
      re::TextureTable::setTexture(v41, &v90, v106);
      if (v106[0]) {

      }
      uint64_t v90 = 0;
      id v42 = objc_msgSend(*(id *)(*(void *)(*(void *)(*((void *)this + 112) + 104) + 320) + 80), sel_textureType);
      if (v42 == (id)5)
      {
        unint64_t v47 = *v30;
        uint64_t v89 = 0x24E8D221D19BF998;
        uint64_t v48 = *(void *)(*((void *)this + 112) + 104);
        if (v48) {
          uint64_t v48 = *(void *)(v48 + 320);
        }
        re::TextureTable::setTexture(v47, &v89, (id *)(v48 + 80));
        uint64_t v89 = 0;
        uint64_t v45 = *v30;
        uint64_t v46 = 0x319D4D8796A12B1FLL;
      }
      else
      {
        if (v42 != (id)6)
        {
          int v50 = *v30;
          uint64_t v89 = 0x1AA47CB53A9AC861;
          uint64_t v51 = *(void *)(*((void *)this + 112) + 104);
          if (v51) {
            uint64_t v51 = *(void *)(v51 + 320);
          }
          re::TextureTable::setTexture(v50, &v89, (id *)(v51 + 80));
          uint64_t v89 = 0;
          goto LABEL_59;
        }
        int v43 = *v30;
        uint64_t v89 = 0x3F800981E521C7A1;
        uint64_t v44 = *(void *)(*((void *)this + 112) + 104);
        if (v44) {
          uint64_t v44 = *(void *)(v44 + 320);
        }
        re::TextureTable::setTexture(v43, &v89, (id *)(v44 + 80));
        uint64_t v89 = 0;
        uint64_t v45 = *v30;
        uint64_t v46 = 0x150A18CBFF11727ALL;
      }
      uint64_t v88 = v46;
      uint64_t v49 = *(void *)(*((void *)this + 112) + 104);
      if (v49) {
        uint64_t v49 = *(void *)(v49 + 320);
      }
      re::TextureTable::setTexture(v45, &v88, (id *)(v49 + 88));
      uint64_t v88 = 0;
LABEL_59:
      uint64_t v52 = v20 + (v4 << 6);
      *(void *)(v52 + 8) = (v21 + (_MergedGlobals_390 << 6) + ((unint64_t)_MergedGlobals_390 >> 2)) ^ _MergedGlobals_390;
      PerSceneBufferTableForName = (_anonymous_namespace_ *)re::MaterialManager::createPerSceneBufferTableForName(this, "scene", v4);
      *(void *)(v52 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = PerSceneBufferTableForName;
      int64_t v54 = (re::BufferTable **)(v52 + 32);
      int v55 = *v54;
      v106[0] = (id)0x29136C0FCC2;
      LOBYTE(v87) = 0;
      re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::addNew(v55, v106, (char *)&v87);
      if (!*((_DWORD *)v55 + 70)) {
        *((_DWORD *)v55 + 70) = 1;
      }
      uint64_t v56 = *v54;
      v106[0] = (id)0x7831721862C9B2CBLL;
      LOBYTE(v87) = 1;
      re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::addNew(v56, v106, (char *)&v87);
      if (*((_DWORD *)v56 + 70) <= 1u) {
        *((_DWORD *)v56 + 70) = 2;
      }
      int v57 = *v54;
      v106[0] = (id)0xDFC20BDF4EDA5B3;
      LOBYTE(v87) = 2;
      re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::addNew(v57, v106, (char *)&v87);
      if (*((_DWORD *)v57 + 70) <= 2u) {
        *((_DWORD *)v57 + 70) = 3;
      }
      int v58 = *v54;
      v106[0] = (id)0x441AC0ECAF42AD04;
      LOBYTE(v87) = 3;
      re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::addNew(v58, v106, (char *)&v87);
      if (*((_DWORD *)v58 + 70) <= 3u) {
        *((_DWORD *)v58 + 70) = 4;
      }
      uint64_t v59 = *v54;
      uint64_t v87 = 0x7831721862C9B2CBLL;
      uint64_t v60 = *(void *)(*((void *)this + 112) + 104);
      if (v60) {
        uint64_t v61 = *(void *)(v60 + 320);
      }
      else {
        uint64_t v61 = 0;
      }
      v106[0] = *(id *)(v61 + 128);
      LODWORD(v106[1]) = 0;
      HIDWORD(v106[1]) = objc_msgSend(*(id *)(v61 + 128), sel_length);
      re::BufferTable::setBuffer(v59, (const re::WeakStringID *)&v87, (uint64_t)v106);
      if (v106[0]) {

      }
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF95E90, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26AF95E90))
      {
        qword_26AF95E88 = re::hashString((re *)"light", v85);
        __cxa_guard_release(&qword_26AF95E90);
      }
      uint64_t v62 = v20 + (v4 << 6);
      *(void *)(v62 + 16) = (v21 + (qword_26AF95E88 << 6) + ((unint64_t)qword_26AF95E88 >> 2)) ^ qword_26AF95E88;
      uint64_t v63 = (_anonymous_namespace_ *)re::MaterialManager::createPerSceneBufferTableForName(this, "light", v4);
      *(void *)(v62 + 40) = v63;
      int v64 = (re::BufferTable **)(v62 + 40);
      int v65 = *v64;
      v106[0] = (id)0x144ABD64D310CF6;
      LOBYTE(v87) = 0;
      re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::addNew(v65, v106, (char *)&v87);
      if (!*((_DWORD *)v65 + 70)) {
        *((_DWORD *)v65 + 70) = 1;
      }
      uint64_t v66 = *v64;
      v106[0] = (id)0x5437C2365207957;
      LOBYTE(v87) = 1;
      re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::addNew(v66, v106, (char *)&v87);
      if (*((_DWORD *)v66 + 70) <= 1u) {
        *((_DWORD *)v66 + 70) = 2;
      }
      uint64_t v67 = *v64;
      v106[0] = (id)0x3D6DAF04080D176CLL;
      LOBYTE(v87) = 2;
      re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::addNew(v67, v106, (char *)&v87);
      if (*((_DWORD *)v67 + 70) <= 2u) {
        *((_DWORD *)v67 + 70) = 3;
      }
      long long v68 = *v64;
      v106[0] = (id)0x63A3BE6348A3B8F4;
      LOBYTE(v87) = 3;
      re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::addNew(v68, v106, (char *)&v87);
      if (*((_DWORD *)v68 + 70) <= 3u) {
        *((_DWORD *)v68 + 70) = 4;
      }
      int v69 = *v64;
      v106[0] = (id)0x4FADF8C267199512;
      LOBYTE(v87) = 4;
      re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::addNew(v69, v106, (char *)&v87);
      if (*((_DWORD *)v69 + 70) <= 4u) {
        *((_DWORD *)v69 + 70) = 5;
      }
      uint64_t v70 = *v64;
      v106[0] = (id)0xA7927F2BBEE1ALL;
      LOBYTE(v87) = 5;
      re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::addNew(v70, v106, (char *)&v87);
      if (*((_DWORD *)v70 + 70) <= 5u) {
        *((_DWORD *)v70 + 70) = 6;
      }
      int v71 = *v64;
      v106[0] = (id)0x5294D280395580B0;
      LOBYTE(v87) = 6;
      re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::addNew(v71, v106, (char *)&v87);
      if (*((_DWORD *)v71 + 70) <= 6u) {
        *((_DWORD *)v71 + 70) = 7;
      }
      int v72 = *v64;
      v106[0] = (id)0x567D28DE2738;
      LOBYTE(v87) = 7;
      re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::addNew(v72, v106, (char *)&v87);
      if (*((_DWORD *)v72 + 70) <= 7u) {
        *((_DWORD *)v72 + 70) = 8;
      }
      uint64_t v73 = *v64;
      v106[0] = (id)0x2750CEF3162C90A2;
      LOBYTE(v87) = 8;
      re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::addNew(v73, v106, (char *)&v87);
      if (*((_DWORD *)v73 + 70) <= 8u) {
        *((_DWORD *)v73 + 70) = 9;
      }
      uint64_t v74 = *v64;
      v106[0] = (id)0x1658EB831E3FF0F9;
      LOBYTE(v87) = 9;
      re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::addNew(v74, v106, (char *)&v87);
      if (*((_DWORD *)v74 + 70) <= 9u) {
        *((_DWORD *)v74 + 70) = 10;
      }
      uint64_t v75 = *v64;
      v106[0] = (id)0x273A81CF18ED4F0;
      LOBYTE(v87) = 10;
      re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::addNew(v75, v106, (char *)&v87);
      if (*((_DWORD *)v75 + 70) <= 0xAu) {
        *((_DWORD *)v75 + 70) = 11;
      }
      uint64_t v76 = *v64;
      v106[0] = (id)0x3C5E7C1C007EE27;
      LOBYTE(v87) = 11;
      re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::addNew(v76, v106, (char *)&v87);
      if (*((_DWORD *)v76 + 70) <= 0xBu) {
        *((_DWORD *)v76 + 70) = 12;
      }
      uint64_t v77 = *v64;
      v106[0] = (id)0x16323C0B1F9DAD6FLL;
      LOBYTE(v87) = 12;
      re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::addNew(v77, v106, (char *)&v87);
      if (*((_DWORD *)v77 + 70) <= 0xCu) {
        *((_DWORD *)v77 + 70) = 13;
      }
      int v78 = *v64;
      v106[0] = (id)0x3A27078604AA8089;
      LOBYTE(v87) = 13;
      re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::addNew(v78, v106, (char *)&v87);
      if (*((_DWORD *)v78 + 70) <= 0xDu) {
        *((_DWORD *)v78 + 70) = 14;
      }
      uint64_t v79 = *v64;
      v106[0] = (id)0xEDE14EC8EBF7251;
      LOBYTE(v87) = 14;
      re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::addNew(v79, v106, (char *)&v87);
      if (*((_DWORD *)v79 + 70) <= 0xEu) {
        *((_DWORD *)v79 + 70) = 15;
      }
      unint64_t v80 = *v64;
      v106[0] = (id)0x262DF9A294ABAC1CLL;
      LOBYTE(v87) = 15;
      re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::addNew(v80, v106, (char *)&v87);
      if (*((_DWORD *)v80 + 70) <= 0xFu) {
        *((_DWORD *)v80 + 70) = 16;
      }
      uint64_t v81 = *v64;
      v106[0] = (id)0x6C67F4CE96CFCB6ALL;
      LOBYTE(v87) = 16;
      re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::addNew(v81, v106, (char *)&v87);
      if (*((_DWORD *)v81 + 70) <= 0x10u) {
        *((_DWORD *)v81 + 70) = 17;
      }
      unint64_t v82 = *v64;
      v106[0] = (id)0x458FBDFDF334653DLL;
      LOBYTE(v87) = 17;
      re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::addNew(v82, v106, (char *)&v87);
      if (*((_DWORD *)v82 + 70) <= 0x11u) {
        *((_DWORD *)v82 + 70) = 18;
      }
      uint64_t v83 = *v64;
      uint64_t v87 = 0x458FBDFDF334653DLL;
      v106[0] = *((id *)this + 106);
      LODWORD(v106[1]) = 0;
      HIDWORD(v106[1]) = objc_msgSend(*((id *)this + 106), sel_length);
      re::BufferTable::setBuffer(v83, (const re::WeakStringID *)&v87, (uint64_t)v106);
      if (v106[0]) {

      }
      ++v4;
    }
    while (v4 != v86);
  }
}

uint64_t re::HashTable<unsigned long,re::BufferTable *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::remove(uint64_t result, unint64_t a2)
{
  if (*(void *)result)
  {
    unint64_t v2 = a2 % *(unsigned int *)(result + 24);
    uint64_t v3 = *(void *)(result + 8);
    uint64_t v4 = *(unsigned int *)(v3 + 4 * v2);
    if (v4 != 0x7FFFFFFF)
    {
      uint64_t v5 = *(void *)(result + 16);
      if (*(void *)(v5 + 24 * v4 + 8) == a2)
      {
        *(_DWORD *)(v3 + 4 * v2) = *(_DWORD *)(v5 + 24 * v4) & 0x7FFFFFFF;
LABEL_8:
        uint64_t v7 = *(void *)(result + 16);
        unint64_t v8 = (int *)(v7 + 24 * v4);
        int v9 = *v8;
        if (*v8 < 0)
        {
          *unint64_t v8 = v9 & 0x7FFFFFFF;
          uint64_t v7 = *(void *)(result + 16);
          int v9 = *(_DWORD *)(v7 + 24 * v4);
        }
        int v10 = *(_DWORD *)(result + 40);
        *(_DWORD *)(v7 + 24 * v4) = *(_DWORD *)(result + 36) | v9 & 0x80000000;
        --*(_DWORD *)(result + 28);
        *(_DWORD *)(result + 36) = v4;
        *(_DWORD *)(result + 40) = v10 + 1;
      }
      else
      {
        while (1)
        {
          unsigned int v6 = v4;
          LODWORD(v4) = *(_DWORD *)(v5 + 24 * v4) & 0x7FFFFFFF;
          if (v4 == 0x7FFFFFFF) {
            break;
          }
          if (*(void *)(v5 + 24 * v4 + 8) == a2)
          {
            *(_DWORD *)(v5 + 24 * v6) = *(_DWORD *)(v5 + 24 * v6) & 0x80000000 | *(_DWORD *)(v5
                                                                                               + 24 * v4) & 0x7FFFFFFF;
            goto LABEL_8;
          }
        }
      }
    }
  }
  return result;
}

uint64_t re::MaterialManager::sceneTextures(re::MaterialManager *this, unint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (*((void *)this + 86) > a2) {
    return *(void *)(*((void *)this + 88) + (a2 << 6) + 24);
  }
  uint64_t v4 = *re::graphicsLogObjects(this);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 134217984;
    unint64_t v6 = a2;
    _os_log_impl(&dword_233120000, v4, OS_LOG_TYPE_DEFAULT, "Scene index %zu for scene texture table is out of range. Returning null.", (uint8_t *)&v5, 0xCu);
  }
  return 0;
}

uint64_t re::MaterialManager::lightBuffers(re::MaterialManager *this, unint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (*((void *)this + 86) > a2) {
    return *(void *)(*((void *)this + 88) + (a2 << 6) + 40);
  }
  uint64_t v4 = *re::graphicsLogObjects(this);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 134217984;
    unint64_t v6 = a2;
    _os_log_impl(&dword_233120000, v4, OS_LOG_TYPE_DEFAULT, "Scene index %zu for light buffer table is out of range. Returning null.", (uint8_t *)&v5, 0xCu);
  }
  return 0;
}

uint64_t re::MaterialManager::sceneBuffers(re::MaterialManager *this, unint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (*((void *)this + 86) > a2) {
    return *(void *)(*((void *)this + 88) + (a2 << 6) + 32);
  }
  uint64_t v4 = *re::graphicsLogObjects(this);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 134217984;
    unint64_t v6 = a2;
    _os_log_impl(&dword_233120000, v4, OS_LOG_TYPE_DEFAULT, "Scene index %zu for scene buffer table is out of range. Returning null.", (uint8_t *)&v5, 0xCu);
  }
  return 0;
}

unint64_t re::MaterialManager::sceneConstants(re::MaterialManager *this, unint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (*((void *)this + 86) > a2) {
    return *((void *)this + 88) + (a2 << 6) + 48;
  }
  uint64_t v4 = *re::graphicsLogObjects(this);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 134217984;
    unint64_t v6 = a2;
    _os_log_impl(&dword_233120000, v4, OS_LOG_TYPE_DEFAULT, "Scene index %zu for scene buffer table is out of range. Returning null.", (uint8_t *)&v5, 0xCu);
  }
  return 0;
}

uint64_t *re::MaterialManager::generateDebugTechnique(re::MaterialManager *this, const re::MaterialInstance *a2, unint64_t a3)
{
  int v5 = this;
  uint64_t v62 = *MEMORY[0x263EF8340];
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  unint64_t v6 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v30, 0);
  uint64_t v7 = &v35;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  int v37 = 0;
  re::DynamicString::operator=((re::DynamicString *)&v30, (re::DynamicString *)&v41);
  unint64_t v8 = (_anonymous_namespace_ *)v41;
  if (void)v41 && (BYTE8(v41)) {
    unint64_t v8 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v41 + 40))();
  }
  unint64_t v9 = 1;
  if (!v36)
  {
    uint64_t v39 = 0;
    long long v42 = 0u;
    memset(v43, 0, sizeof(v43));
    long long v41 = 0u;
    a3 = &_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(v61[0]) = 136315906;
    *(void *)((char *)v61 + 4) = "operator[]";
    WORD6(v61[0]) = 1024;
    *(_DWORD *)((char *)v61 + 14) = 468;
    WORD1(v61[1]) = 2048;
    *(void *)((char *)&v61[1] + 4) = 0;
    WORD6(v61[1]) = 2048;
    *(void *)((char *)&v61[1] + 14) = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_41;
  }
  *int v37 = 1;
  int v34 = 2687029;
  uint64_t v7 = (uint64_t *)*((void *)a2 + 13);
  if ((unint64_t)v7 <= a3)
  {
LABEL_41:
    uint64_t v39 = 0;
    long long v42 = 0u;
    memset(v43, 0, sizeof(v43));
    long long v41 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(v61[0]) = 136315906;
    *(void *)((char *)v61 + 4) = "operator[]";
    WORD6(v61[0]) = 1024;
    *(_DWORD *)((char *)v61 + 14) = 468;
    WORD1(v61[1]) = 2048;
    *(void *)((char *)&v61[1] + 4) = a3;
    WORD6(v61[1]) = 2048;
    *(void *)((char *)&v61[1] + 14) = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_42:
    uint64_t v39 = 0;
    long long v42 = 0u;
    memset(v43, 0, sizeof(v43));
    long long v41 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(v61[0]) = 136315906;
    *(void *)((char *)v61 + 4) = "operator[]";
    WORD6(v61[0]) = 1024;
    *(_DWORD *)((char *)v61 + 14) = 468;
    WORD1(v61[1]) = 2048;
    *(void *)((char *)&v61[1] + 4) = a3;
    WORD6(v61[1]) = 2048;
    *(void *)((char *)&v61[1] + 14) = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_43:
    uint64_t v39 = 0;
    long long v42 = 0u;
    memset(v43, 0, sizeof(v43));
    long long v41 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(v61[0]) = 136315906;
    *(void *)((char *)v61 + 4) = "operator[]";
    WORD6(v61[0]) = 1024;
    *(_DWORD *)((char *)v61 + 14) = 476;
    WORD1(v61[1]) = 2048;
    *(void *)((char *)&v61[1] + 4) = a3;
    WORD6(v61[1]) = 2048;
    *(void *)((char *)&v61[1] + 14) = v9;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_44:
    uint64_t v39 = 0;
    long long v42 = 0u;
    memset(v43, 0, sizeof(v43));
    long long v41 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(v61[0]) = 136315906;
    *(void *)((char *)v61 + 4) = "operator[]";
    WORD6(v61[0]) = 1024;
    *(_DWORD *)((char *)v61 + 14) = 476;
    WORD1(v61[1]) = 2048;
    *(void *)((char *)&v61[1] + 4) = a3;
    WORD6(v61[1]) = 2048;
    *(void *)((char *)&v61[1] + 14) = v9;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_45;
  }
  int v10 = (void *)(*((void *)a2 + 14) + 40 * a3);
  if (*v10) {
    goto LABEL_32;
  }
  uint64_t v11 = *((void *)a2 + 2);
  uint64_t v7 = *(uint64_t **)(v11 + 120);
  if ((unint64_t)v7 <= a3) {
    goto LABEL_42;
  }
  uint64_t v12 = *(void *)(*(void *)(v11 + 128) + 8 * a3);
  if (!v12)
  {
    *int v10 = 0;
    goto LABEL_32;
  }
  unint64_t v29 = 0;
  v26[1] = 0;
  uint64_t v27 = 0;
  v26[0] = 0;
  int v28 = 0;
  unint64_t v9 = *((void *)a2 + 10);
  if (v9 <= a3) {
    goto LABEL_43;
  }
  uint64_t v13 = *(void *)(*((void *)a2 + 11) + 40 * a3);
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  uint64_t v15 = v13 + 16;
  uint64_t v14 = *(void *)(v13 + 16);
  uint64_t v23 = 0;
  if (v14)
  {
    re::FixedArray<re::TechniqueFunctionConstant>::init<>(&v23, v14, *(void *)(v13 + 24));
    re::FixedArray<re::TechniqueFunctionConstant>::copy((uint64_t)&v23, v15);
    if (v24)
    {
      int v16 = v25;
      int v17 = (re::DynamicString *)((char *)v25 + 64 * v24);
      do
      {
        re::DynamicString::DynamicString((re::DynamicString *)&v41, v16);
        LODWORD(v43[0]) = *((_DWORD *)v16 + 8);
        re::FixedArray<unsigned char>::FixedArray((void *)v43 + 1, (uint64_t *)v16 + 5);
        re::DynamicArray<re::TechniqueFunctionConstant>::add((_anonymous_namespace_ *)v26, (re::DynamicString *)&v41);
        if (*((void *)&v43[0] + 1))
        {
          if (*(void *)&v43[1])
          {
            (*(void (**)(void))(**((void **)&v43[0] + 1) + 40))();
            v43[1] = 0uLL;
          }
          *((void *)&v43[0] + 1) = 0;
        }
        if (void)v41 && (BYTE8(v41)) {
          (*(void (**)(void))(*(void *)v41 + 40))();
        }
        int v16 = (re::DynamicString *)((char *)v16 + 64);
      }
      while (v16 != v17);
    }
  }
  re::DynamicArray<re::TechniqueFunctionConstant>::add((_anonymous_namespace_ *)v26, (re::DynamicString *)&v30);
  unint64_t v9 = *((void *)a2 + 10);
  if (v9 <= a3) {
    goto LABEL_44;
  }
  uint64_t v18 = *(void *)(*((void *)a2 + 11) + 40 * a3);
  if (*(unsigned char *)(v18 + 40)) {
    uint64_t v19 = v18 + 48;
  }
  else {
    uint64_t v19 = *(void *)v18 + 8;
  }
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)&v41, 0);
  *(void *)&long long v41 = &unk_26E70DF18;
  long long v42 = 0u;
  memset(v43, 0, 28);
  *(void *)((char *)&v43[1] + 12) = 0x7FFFFFFFLL;
  uint64_t v47 = 0;
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  *((void *)&v43[2] + 1) = 0;
  int v46 = 0;
  int v48 = 0;
  long long v49 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  uint64_t v20 = (re *)*((void *)v5 + 112);
  uint64_t v22 = 0;
  re::MaterialBuilder::generateTechnique(v20, v12, (uint64_t)a2, v29, v27, v19, (uint64_t)&v39, &v22, 0, 0);
  if (v22)
  {

    uint64_t v22 = 0;
  }
  if (!(_BYTE)v39) {
    goto LABEL_31;
  }
  int v5 = (re::MaterialManager *)*((void *)a2 + 13);
  if ((unint64_t)v5 <= a3)
  {
LABEL_45:
    uint64_t v38 = 0;
    memset(v61, 0, sizeof(v61));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v53 = 136315906;
    int64_t v54 = "operator[]";
    __int16 v55 = 1024;
    int v56 = 468;
    __int16 v57 = 2048;
    unint64_t v58 = a3;
    __int16 v59 = 2048;
    uint64_t v60 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  std::unique_ptr<re::MaterialTechnique,std::function<void ()(re::MaterialTechnique*)>>::operator=[abi:nn180100]((uint64_t *)(*((void *)a2 + 14) + 40 * a3), v40);
LABEL_31:
  re::Result<std::unique_ptr<re::MaterialTechnique,std::function<void ()(re::MaterialTechnique*)>>,re::DynamicString>::~Result((unsigned __int8 *)&v39);
  re::FunctionReflectionCache::~FunctionReflectionCache((re::FunctionReflectionCache *)&v41);
  re::FixedArray<re::TechniqueFunctionConstant>::deinit(&v23);
  re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)v26);
LABEL_32:
  if (v35)
  {
    if (v36)
    {
      (*(void (**)(void))(*(void *)v35 + 40))();
      uint64_t v36 = 0;
      int v37 = 0;
    }
    uint64_t v35 = 0;
  }
  BOOL result = v30;
  if (v30)
  {
    if (v31) {
      return (uint64_t *)(*(uint64_t (**)(void))(*v30 + 40))();
    }
  }
  return result;
}

void re::MaterialManager::createMaterial(uint64_t a1@<X0>, re::MaterialBuilder *a2@<X1>, void *a3@<X8>)
{
  location[3] = *(id *)MEMORY[0x263EF8340];
  if ((*((_DWORD *)a2 + 286) & 0xFFFFFFFE) == 6)
  {
    re::MaterialBuilder::result(a2, *(re::RenderManager **)(a1 + 896), (uint64_t)v21);
    if (v21[0])
    {
      uint64_t v6 = v22;
      *a3 = v22;
      if (v6)
      {
        id v7 = (id)(v6 + 8);
        unint64_t v8 = (void *)(v6 + 8);
      }
      else
      {
        unint64_t v8 = 0;
      }
      inited = (_anonymous_namespace_ *)objc_initWeak(location, v8);
      unint64_t v10 = *(void *)(a1 + 408);
      unint64_t v11 = *(void *)(a1 + 416);
      if (v11 >= v10)
      {
        unint64_t v12 = v11 + 1;
        if (v10 < v11 + 1)
        {
          if (*(void *)(a1 + 400))
          {
            uint64_t v13 = 2 * v10;
            BOOL v14 = v10 == 0;
            unint64_t v15 = 8;
            if (!v14) {
              unint64_t v15 = v13;
            }
            if (v15 <= v12) {
              unint64_t v16 = v12;
            }
            else {
              unint64_t v16 = v15;
            }
            re::DynamicArray<re::ArcWeakPtr<re::internal::AssetEntry>>::setCapacity((void *)(a1 + 400), v16);
          }
          else
          {
            re::DynamicArray<re::ArcWeakPtr<re::internal::AssetEntry>>::setCapacity((void *)(a1 + 400), v12);
            ++*(_DWORD *)(a1 + 424);
          }
        }
        unint64_t v11 = *(void *)(a1 + 416);
      }
      uint64_t v19 = (id *)(*(void *)(a1 + 432) + 8 * v11);
      *uint64_t v19 = 0;
      objc_moveWeak(v19, location);
      ++*(void *)(a1 + 416);
      ++*(_DWORD *)(a1 + 424);
      objc_destroyWeak(location);
    }
    else
    {
      uint64_t v18 = *re::graphicsLogObjects(v5);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        if (v23) {
          uint64_t v20 = *(unsigned char **)&v24[7];
        }
        else {
          uint64_t v20 = v24;
        }
        LODWORD(location[0]) = 136315138;
        *(id *)((char *)location + 4) = v20;
        _os_log_error_impl(&dword_233120000, v18, OS_LOG_TYPE_ERROR, "Failed to build material: %s.", (uint8_t *)location, 0xCu);
      }
      *a3 = 0;
    }
    if (v21[0])
    {
      if (v22) {
    }
      }
    else if (v22 && (v23 & 1) != 0)
    {
      (*(void (**)(void))(*(void *)v22 + 40))();
    }
  }
  else
  {
    int v17 = *re::graphicsLogObjects((re *)a1);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)unint64_t v21 = 0;
      _os_log_error_impl(&dword_233120000, v17, OS_LOG_TYPE_ERROR, "Failed to build material. Builder not finished.", v21, 2u);
    }
    *a3 = 0;
  }
}

void *re::MaterialManager::destroyMaterial(_anonymous_namespace_ *a1, uint64_t a2, long long *a3)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v6 = (_anonymous_namespace_ *)*((void *)a1 + 112);
  long long v10 = *a3;
  uint64_t v7 = *((void *)a3 + 2);
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = 0;
  *(void *)a3 = 0;
  *(void *)&long long v12 = a2;
  *(void *)uint64_t v8 = &unk_26E7108A0;
  *(void *)(v8 + 8) = a1;
  *(_OWORD *)(v8 + 16) = v10;
  v11[0] = 0;
  v11[1] = 0;
  *(void *)(v8 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = v7;
  v11[2] = 0;
  *(_OWORD *)(v8 + 40) = v12;
  uint64_t v15 = v8;
  re::RenderManager::addDelayedDestructorToRenderThread(v6, (uint64_t)v13);
  re::MoveOnlyFunctionBase<24ul,void ()(void)>::destroyCallable((uint64_t)v13);
  return re::FixedArray<std::unique_ptr<re::MaterialTechnique,std::function<void ()(re::MaterialTechnique*)>>>::deinit(v11);
}

void re::MaterialManager::createMaterialDefinition(uint64_t a1@<X0>, re::MaterialDefinitionBuilder *a2@<X1>, void *a3@<X8>)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  re::MaterialDefinitionBuilder::result(a2, *(id **)(a1 + 896), (uint64_t)v9);
  if (v9[0])
  {
    uint64_t v5 = v10;
    *a3 = v10;
    if (v5) {
      id v6 = (id)(v5 + 8);
    }
  }
  else
  {
    uint64_t v7 = *re::graphicsLogObjects(v4);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      if (v11) {
        uint64_t v8 = *(unsigned char **)&v12[7];
      }
      else {
        uint64_t v8 = v12;
      }
      *(_DWORD *)buf = 136315138;
      BOOL v14 = v8;
      _os_log_error_impl(&dword_233120000, v7, OS_LOG_TYPE_ERROR, "Failed to build material definition : %s.", buf, 0xCu);
    }
    *a3 = 0;
  }
  if (v9[0])
  {
    if (v10) {
  }
    }
  else if (v10 && (v11 & 1) != 0)
  {
    (*(void (**)(void))(*(void *)v10 + 40))();
  }
}

void re::MaterialManager::tryGetMaterialPipelineData(os_unfair_lock_s *this@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v9 = a2;
  uint64_t v5 = this + 122;
  os_unfair_lock_lock(this + 122);
  id v6 = (uint64_t *)re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet((uint64_t)&this[110], &v9);
  if (v6)
  {
    uint64_t v7 = *v6;
    *a3 = *v6;
    if (v7) {
      id v8 = (id)(v7 + 8);
    }
  }
  else
  {
    *a3 = 0;
  }
  os_unfair_lock_unlock(v5);
}

void re::MaterialManager::installMaterialPipelineData(os_unfair_lock_s *a1, uint64_t *a2)
{
  uint64_t v4 = a1 + 122;
  os_unfair_lock_lock(a1 + 122);
  re::HashTable<unsigned long,re::SharedPtr<re::MaterialPipelineData>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::add((uint64_t)&a1[110], (unint64_t *)(*a2 + 152), a2);
  os_unfair_lock_unlock(v4);
}

uint64_t re::HashTable<unsigned long,re::SharedPtr<re::MaterialPipelineData>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::add(uint64_t a1, unint64_t *a2, uint64_t *a3)
{
  unint64_t v6 = *a2;
  if (!*(void *)a1)
  {
    LODWORD(v7) = 0;
    goto LABEL_8;
  }
  unint64_t v7 = v6 % *(unsigned int *)(a1 + 24);
  uint64_t v8 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v7);
  if (v8 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v11 = re::HashTable<unsigned long,re::SharedPtr<re::MaterialPipelineData>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addAsCopy(a1, v7, v6, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v10 = *(void *)(a1 + 16) + 24 * v11;
    return v10 + 16;
  }
  uint64_t v9 = *(void *)(a1 + 16);
  while (*(void *)(v9 + 24 * v8 + 8) != v6)
  {
    LODWORD(v8) = *(_DWORD *)(v9 + 24 * v8) & 0x7FFFFFFF;
    if (v8 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  uint64_t v10 = v9 + 24 * v8;
  return v10 + 16;
}

uint64_t re::MaterialManager::addSupportConstantsToArray(_anonymous_namespace_ *a1, int a2, int a3, int a4, int a5, uint64_t a6)
{
  if (a1)
  {
    re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addInternal<char const(&)[5]>(a6, (re::DynamicString *)&v14, 2, "true");
    a1 = v14;
    if (v14)
    {
      if (v15) {
        a1 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v14 + 40))();
      }
    }
  }
  if (a4)
  {
    re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addInternal<char const(&)[5]>(a6, (re::DynamicString *)&v14, 2, "true");
    a1 = v14;
    if (v14)
    {
      if (v15) {
        a1 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v14 + 40))();
      }
    }
  }
  if (a3)
  {
    re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addInternal<char const(&)[5]>(a6, (re::DynamicString *)&v14, 2, "true");
    a1 = v14;
    if (v14)
    {
      if (v15) {
        a1 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v14 + 40))();
      }
    }
  }
  if (a5)
  {
    re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addInternal<char const(&)[5]>(a6, (re::DynamicString *)&v14, 2, "true");
    a1 = v14;
    if (v14)
    {
      if (v15) {
        a1 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v14 + 40))();
      }
    }
  }
  unsigned int v11 = "false";
  if (a2) {
    unsigned int v11 = "true";
  }
  uint64_t v13 = v11;
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addInternal<char const*>(a6, (re::DynamicString *)&v14, 2, &v13);
  uint64_t result = (uint64_t)v14;
  if (v14)
  {
    if (v15) {
      return (*(uint64_t (**)(void))(*(void *)v14 + 40))();
    }
  }
  return result;
}

uint64_t re::MaterialManager::removeSystemMaterialParameterBlock(re::MaterialManager *this, uint64_t a2)
{
  uint64_t v6 = a2;
  uint64_t v3 = (char *)this + 1032;
  uint64_t v4 = (unint64_t *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)this + 1032, &v6);
  if (v4) {
    re::DataArray<re::MaterialParameterBlock>::destroy((uint64_t)this + 1080, *v4);
  }
  return re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::remove((uint64_t)v3, &v6);
}

uint64_t (***re::DataArray<re::MaterialParameterBlock>::destroy(uint64_t a1, unint64_t a2))(void)
{
  int v2 = a2;
  unint64_t v4 = a2 >> 16;
  uint64_t result = (uint64_t (***)(void))re::DataArray<re::MaterialParameterBlock>::tryGet(a1, a2 & 0xFFFFFFFF00000000 | ((unint64_t)WORD1(a2) << 16) | (unsigned __int16)a2);
  if (result)
  {
    uint64_t v6 = result;
    uint64_t result = (uint64_t (***)(void))(**result)(result);
    if (*(void *)(a1 + 16) <= (unint64_t)HIWORD(v2))
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 16 * HIWORD(v2) + 8) + 4 * (unsigned __int16)v2) = 0;
    *uint64_t v6 = *(_DWORD *)(a1 + 52);
    *(_WORD *)(a1 + 52) = v2;
    *(_WORD *)(a1 + 54) = v4;
    --*(_DWORD *)(a1 + 40);
  }
  return result;
}

uint64_t *re::MaterialManager::getSystemMaterialParameterBlock(re::MaterialManager *this, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t result = (uint64_t *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)this + 1032, &v4);
  if (result) {
    return (uint64_t *)re::DataArray<re::MaterialParameterBlock>::tryGet((uint64_t)this + 1080, *result);
  }
  return result;
}

uint64_t re::DataArray<re::MaterialParameterBlock>::tryGet(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 16);
  if (WORD1(a2) < v2
    && ((unsigned __int16)(v2 - 1) != WORD1(a2) ? (unsigned int v3 = *(_DWORD *)(a1 + 44)) : (unsigned int v3 = *(_DWORD *)(a1 + 48)),
        (unsigned __int16)a2 < v3
     && ((uint64_t v4 = *(void *)(a1 + 32),
          (int v5 = *(_DWORD *)(*(void *)(v4 + 16 * WORD1(a2) + 8) + 4 * (unsigned __int16)a2)) != 0)
       ? (BOOL v6 = v5 == (HIDWORD(a2) & 0xFFFFFF))
       : (BOOL v6 = 0),
         v6)))
  {
    return *(void *)(v4 + 16 * WORD1(a2)) + 1008 * (unsigned __int16)a2;
  }
  else
  {
    return 0;
  }
}

uint64_t re::MaterialManager::getOrAddSystemMaterialParameterBlock(re::RenderManager **this, uint64_t a2)
{
  uint64_t v7 = a2;
  unsigned int v3 = (char *)(this + 129);
  uint64_t v4 = (uint64_t *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)(this + 129), &v7);
  if (!v4)
  {
    unint64_t v6 = re::DataArray<re::MaterialParameterBlock>::create<re::RenderManager *&>((uint64_t)(this + 135), this + 112);
    re::HashTable<unsigned long long,re::DataArrayHandle<re::MaterialParameterBlock>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew<re::DataArrayHandle<re::MaterialParameterBlock>&>((uint64_t)v3, &v7, &v6);
    uint64_t v4 = (uint64_t *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)v3, &v7);
  }
  return re::DataArray<re::MaterialParameterBlock>::tryGet((uint64_t)(this + 135), *v4);
}

unint64_t re::DataArray<re::MaterialParameterBlock>::create<re::RenderManager *&>(uint64_t a1, re::RenderManager **a2)
{
  int v4 = *(_DWORD *)(a1 + 56);
  if ((v4 + 1) >> 24) {
    int v5 = 1;
  }
  else {
    int v5 = v4 + 1;
  }
  *(_DWORD *)(a1 + 56) = v5;
  uint64_t v6 = *(unsigned __int16 *)(a1 + 52);
  unint64_t v7 = *(unsigned __int16 *)(a1 + 54);
  if (v6 == 0xFFFF && v7 == 0xFFFF)
  {
    if (*(_DWORD *)(a1 + 48) >= *(_DWORD *)(a1 + 44)) {
      re::DataArray<re::MaterialParameterBlock>::allocBlock((void *)a1);
    }
    uint64_t v11 = *(void *)(a1 + 16);
    unint64_t v7 = (unsigned __int16)(v11 - 1);
    if (v11)
    {
      uint64_t v6 = *(unsigned int *)(a1 + 48);
      if (v6 < 0x10000)
      {
        long long v12 = (void *)(*(void *)(a1 + 32) + 16 * v7);
        *(_DWORD *)(a1 + 48) = v6 + 1;
        *(_DWORD *)(v12[1] + 4 * v6) = *(_DWORD *)(a1 + 56);
        uint64_t v10 = (re::MaterialParameterBlock *)(*v12 + 1008 * v6);
        goto LABEL_15;
      }
LABEL_18:
      re::internal::assertLog((re::internal *)5, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) m_tailBlockLinearAllocationCount (%u) is too large for a 16-bit unsigned integer", "!overflow", "create", 601, v6, v14, v15);
      _os_crash();
      __break(1u);
    }
LABEL_17:
    uint64_t v14 = 0;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(v15) = 136315906;
    *(void *)((char *)&v15 + 4) = "operator[]";
    WORD6(v15) = 1024;
    HIWORD(v15) = 789;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_18;
  }
  if (*(void *)(a1 + 16) <= v7)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v9 = (void *)(*(void *)(a1 + 32) + 16 * v7);
  *(_DWORD *)(v9[1] + 4 * v6) = v5;
  uint64_t v10 = (re::MaterialParameterBlock *)(*v9 + 1008 * v6);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)v10;
LABEL_15:
  ++*(_DWORD *)(a1 + 40);
  re::MaterialParameterBlock::MaterialParameterBlock(v10, *a2);
  return (v7 << 16) | ((unint64_t)(*(_DWORD *)(a1 + 56) & 0xFFFFFF) << 32) | v6;
}

uint64_t re::HashTable<unsigned long long,re::DataArrayHandle<re::MaterialParameterBlock>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew<re::DataArrayHandle<re::MaterialParameterBlock>&>(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  unint64_t v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (!*(void *)a1)
  {
    LODWORD(v9) = 0;
    goto LABEL_8;
  }
  unint64_t v9 = v8 % *(unsigned int *)(a1 + 24);
  uint64_t v10 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v9);
  if (v10 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v13 = re::HashTable<unsigned long long,re::DataArrayHandle<re::MaterialParameterBlock>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addEmplace<re::DataArrayHandle<re::MaterialParameterBlock>&>(a1, v9, v8, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v12 = *(void *)(a1 + 16) + 32 * v13;
    return v12 + 24;
  }
  uint64_t v11 = *(void *)(a1 + 16);
  while (*(void *)(v11 + 32 * v10 + 16) != v6)
  {
    uint64_t v10 = *(_DWORD *)(v11 + 32 * v10 + 8) & 0x7FFFFFFF;
    if (v10 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  uint64_t v12 = v11 + 32 * v10;
  return v12 + 24;
}

void re::MaterialManager::startFrame(re::MaterialManager *this)
{
  if (re::GraphicsFeatureFlags::systemMaterialParametersDirtyTracking(void)::onceToken != -1) {
    dispatch_once(&re::GraphicsFeatureFlags::systemMaterialParametersDirtyTracking(void)::onceToken, &__block_literal_global_35);
  }
  if (!re::GraphicsFeatureFlags::systemMaterialParametersDirtyTracking(void)::gSystemMaterialParametersDirtyTracking)
  {
    unint64_t v2 = (char *)this + 1080;
    re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v6, (uint64_t)v2, 0);
    if (v2 != v6 || (unsigned __int16)v7 != 0xFFFFLL || (v7 & 0xFFFF0000) != 0xFFFF0000)
    {
      do
      {
        unsigned int v3 = (re::MaterialParameterBlock *)re::DataArray<re::MaterialParameterBlock>::DataArrayIterator<re::MaterialParameterBlock,re::MaterialParameterBlock&>::operator*((unsigned __int16 *)&v6);
        re::MaterialParameterBlock::clear(v3);
        re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v6);
      }
      while (v6 != v2 || (unsigned __int16)v7 != 0xFFFF || WORD1(v7) != 0xFFFF);
    }
  }
}

uint64_t re::DataArray<re::MaterialParameterBlock>::DataArrayIterator<re::MaterialParameterBlock,re::MaterialParameterBlock&>::operator*(unsigned __int16 *a1)
{
  unint64_t v1 = a1[5];
  if (*(void *)(*(void *)a1 + 16) <= v1)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(*(void *)(*(void *)a1 + 32) + 16 * v1) + 1008 * a1[4];
}

char *re::MaterialManager::getEngineShaderMetadata@<X0>(uint64_t a1@<X0>, void *a2@<X1>, char *a3@<X8>)
{
  uint64_t v5 = a1 + 1144;
  if (!*(_DWORD *)(a1 + 1172))
  {
    id v6 = *(id *)(*(void *)(a1 + 896) + 184);
    [v6 supportsFamily:5001];
    [v6 supportsFamily:1006];
    re::createMaterialSystemShaderMetadata((uint64_t)v9);
    re::HashTable<re::StringID,re::ShaderFunctionMetadata,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::operator=(v5, v9);
    re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(v9);
  }
  uint64_t result = (char *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(v5, a2);
  if (result)
  {
    a3[1] = *result;
    char v8 = 1;
  }
  else
  {
    char v8 = 0;
  }
  *a3 = v8;
  return result;
}

uint64_t re::HashTable<re::StringID,re::ShaderFunctionMetadata,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::operator=(uint64_t a1, uint64_t *a2)
{
  if ((uint64_t *)a1 != a2)
  {
    if (!*(void *)a1 || *(void *)a1 == *a2)
    {
      re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)a1, a2);
    }
    else if (*a2)
    {
      re::HashTable<re::StringID,re::ShaderFunctionMetadata,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::copy(a1, (uint64_t)a2);
      ++*(_DWORD *)(a1 + 40);
    }
    else
    {
      re::HashTable<re::StringID,re::ShaderFunctionMetadata,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(a1);
    }
  }
  return a1;
}

BOOL re::MaterialManager::isEngineDefinedTextureTable(re::MaterialManager *this, const char *a2)
{
  if (!strcmp((const char *)this, "fallback")) {
    return 1;
  }
  unint64_t v3 = 0;
  int v4 = (const char **)&off_264BE6900;
  do
  {
    unint64_t v5 = v3;
    if (v3 == 11) {
      break;
    }
    id v6 = *v4;
    v4 += 2;
    int v7 = strcmp((const char *)this, v6);
    unint64_t v3 = v5 + 1;
  }
  while (v7);
  return v5 < 0xB;
}

BOOL re::MaterialManager::isEngineDefinedConstantBufferTable(re::MaterialManager *this, const char *a2)
{
  if (!strcmp((const char *)this, "global")) {
    return 1;
  }
  unint64_t v3 = 0;
  int v4 = (const char **)&off_264BE6820;
  do
  {
    unint64_t v5 = v3;
    if (v3 == 13) {
      break;
    }
    id v6 = *v4;
    v4 += 2;
    int v7 = strcmp((const char *)this, v6);
    unint64_t v3 = v5 + 1;
  }
  while (v7);
  return v5 < 0xD;
}

BOOL re::MaterialManager::isEngineDefinedBufferTable(re::MaterialManager *this, const char *a2)
{
  if (!strcmp((const char *)this, "geometry")) {
    return 1;
  }
  unint64_t v3 = 0;
  int v4 = (const char **)&off_264BE69C0;
  do
  {
    unint64_t v5 = v3;
    if (v3 == 12) {
      break;
    }
    id v6 = *v4;
    v4 += 2;
    int v7 = strcmp((const char *)this, v6);
    unint64_t v3 = v5 + 1;
  }
  while (v7);
  return v5 < 0xC;
}

uint64_t re::HashSetBase<re::UnresolvedArgumentBufferEntry,re::UnresolvedArgumentBufferEntry,re::internal::ValueAsKey<re::UnresolvedArgumentBufferEntry>,re::Hash<re::UnresolvedArgumentBufferEntry>,re::EqualTo<re::UnresolvedArgumentBufferEntry>,true,false>::add(uint64_t a1, unint64_t *a2)
{
  unint64_t v4 = *a2;
  unint64_t v5 = *(unsigned int *)(a1 + 24);
  if (!v5)
  {
    LODWORD(v6) = 0;
    goto LABEL_8;
  }
  unint64_t v6 = v4 % v5;
  uint64_t v7 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * (v4 % v5));
  if (v7 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v10 = re::HashSetBase<re::UnresolvedArgumentBufferEntry,re::UnresolvedArgumentBufferEntry,re::internal::ValueAsKey<re::UnresolvedArgumentBufferEntry>,re::Hash<re::UnresolvedArgumentBufferEntry>,re::EqualTo<re::UnresolvedArgumentBufferEntry>,true,false>::addAsMove(a1, v6, v4, (uint64_t)a2, (uint64_t)a2);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v9 = *(void *)(a1 + 16) + 56 * v10;
    return v9 + 16;
  }
  uint64_t v8 = *(void *)(a1 + 16);
  while (*(void *)(v8 + 56 * v7 + 16) != v4)
  {
    LODWORD(v7) = *(_DWORD *)(v8 + 56 * v7 + 8) & 0x7FFFFFFF;
    if (v7 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  uint64_t v9 = v8 + 56 * v7;
  return v9 + 16;
}

void re::MaterialManager::resolveArgumentBuffers(re::MaterialManager *this)
{
  unint64_t v1 = this;
  uint64_t v2 = *((unsigned int *)this + 306);
  if (v2)
  {
    uint64_t v3 = 0;
    unint64_t v4 = (int *)(*((void *)this + 151) + 8);
    while (1)
    {
      int v5 = *v4;
      v4 += 14;
      if (v5 < 0) {
        break;
      }
      if (v2 == ++v3)
      {
        LODWORD(v3) = *((_DWORD *)this + 306);
        break;
      }
    }
  }
  else
  {
    LODWORD(v3) = 0;
  }
  if (v2 == v3)
  {
    unsigned int v6 = *((_DWORD *)this + 306);
    goto LABEL_33;
  }
  uint64_t v7 = v3;
  unsigned int v6 = *((_DWORD *)this + 306);
  uint64_t v27 = v6;
  do
  {
    uint64_t v8 = *((void *)v1 + 151);
    uint64_t v9 = (void *)(v8 + 56 * v7);
    uint64_t v10 = v9[5];
    if (!v10) {
      goto LABEL_25;
    }
    uint64_t v11 = v9 + 2;
    uint64_t v12 = v9[6];
    unsigned int v13 = (void *)(v8 + 56 * v7 + 24);
    uint64_t v14 = 32 * v10;
    do
    {
      uint64_t v15 = *(void *)(v12 + 16);
      if ((unint64_t)(v15 + 8) > *v13)
      {
        uint64_t v16 = *re::graphicsLogObjects(this);
        this = (re::MaterialManager *)os_log_type_enabled(v16, OS_LOG_TYPE_ERROR);
        if (this)
        {
          *(_WORD *)buf = 0;
          _os_log_error_impl(&dword_233120000, v16, OS_LOG_TYPE_ERROR, "Unable to reencode texture resourceID reference, the argument buffer is not large enough!", buf, 2u);
        }
        goto LABEL_23;
      }
      uint64_t v17 = *v11;
      re::ArgumentBufferTextureRecord::getRenderThreadTexture((id *)v12, buf);
      if (!*(void *)buf)
      {
        LODWORD(v19) = *(_DWORD *)(v12 + 24);
LABEL_19:
        re::TextureManager::stockTextureForType(*(re **)(*((void *)v1 + 112) + 64), (int)v19, &v28);
        NS::SharedPtr<MTL::Texture>::operator=((void **)buf, &v28);
        if (v28) {

        }
        goto LABEL_21;
      }
      id v18 = objc_msgSend(*(id *)buf, sel_textureType);
      id v19 = (id)*(int *)(v12 + 24);
      if (v18 != v19) {
        goto LABEL_19;
      }
LABEL_21:
      *(void *)(v17 + v15) = objc_msgSend(*(id *)buf, sel_gpuResourceID, v27);
      this = *(re::MaterialManager **)buf;
      if (*(void *)buf) {

      }
LABEL_23:
      v12 += 32;
      v14 -= 32;
    }
    while (v14);
    unsigned int v6 = *((_DWORD *)v1 + 306);
    LODWORD(v2) = v27;
LABEL_25:
    if (v6 <= (int)v3 + 1) {
      unsigned int v20 = v3 + 1;
    }
    else {
      unsigned int v20 = v6;
    }
    while (1)
    {
      uint64_t v7 = (v3 + 1);
      if (v20 - 1 == v3) {
        break;
      }
      LODWORD(v3) = v3 + 1;
      unsigned int v21 = v7;
      if ((*(_DWORD *)(*((void *)v1 + 151) + 56 * v7 + 8) & 0x80000000) != 0) {
        goto LABEL_32;
      }
    }
    unsigned int v21 = v20;
LABEL_32:
    LODWORD(v3) = v21;
  }
  while (v2 != v21);
LABEL_33:
  if (*((_DWORD *)v1 + 305))
  {
    uint64_t v22 = *((unsigned int *)v1 + 304);
    if (v22)
    {
      memset_pattern16(*((void **)v1 + 150), &memset_pattern_266, 4 * v22);
      unsigned int v6 = *((_DWORD *)v1 + 306);
    }
    if (v6)
    {
      uint64_t v23 = 0;
      for (unint64_t i = 0; i < v6; ++i)
      {
        uint64_t v25 = *((void *)v1 + 151) + v23;
        int v26 = *(_DWORD *)(v25 + 8);
        if (v26 < 0)
        {
          *(_DWORD *)(v25 + 8) = v26 & 0x7FFFFFFF;
          re::FixedArray<re::ArgumentBufferTextureRecord>::deinit((void *)(v25 + 32));
          unsigned int v6 = *((_DWORD *)v1 + 306);
        }
        v23 += 56;
      }
    }
    *((_DWORD *)v1 + 307) = 0x7FFFFFFF;
    *(void *)((char *)v1 + 1220) = 0;
    ++*((_DWORD *)v1 + 308);
  }
}

uint64_t re::TextureTableImpl<NS::SharedPtr<MTL::Texture>>::lookup@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(a1 + 8), a2);
  if (result == -1)
  {
    char v6 = 0;
  }
  else
  {
    *(_WORD *)(a3 + 1) = *(_WORD *)(*(void *)(a1 + 16) + 16 * result + 8);
    char v6 = 1;
  }
  *(unsigned char *)a3 = v6;
  return result;
}

uint64_t re::TextureTableImpl<NS::SharedPtr<MTL::Texture>>::layoutHash(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t re::TextureTableImpl<NS::SharedPtr<MTL::Texture>>::size(uint64_t a1)
{
  return *(void *)(a1 + 88);
}

id re::TextureTable::textureAt@<X0>(re::TextureTable *this@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  if (*((void *)this + 11) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  id result = *(id *)(*((void *)this + 13) + 32 * a2);
  *a3 = result;
  return result;
}

void *re::internal::MoveOnlyCallable<re::MaterialManager::destroyMaterial(unsigned long,re::FixedArray<std::unique_ptr<re::MaterialTechnique,std::function<void ()(re::MaterialTechnique*)>>> &&)::$_0,void ()(void)>::~MoveOnlyCallable(void *a1)
{
  *a1 = &unk_26E7108A0;
  re::FixedArray<std::unique_ptr<re::MaterialTechnique,std::function<void ()(re::MaterialTechnique*)>>>::deinit(a1 + 2);
  return a1;
}

void re::internal::MoveOnlyCallable<re::MaterialManager::destroyMaterial(unsigned long,re::FixedArray<std::unique_ptr<re::MaterialTechnique,std::function<void ()(re::MaterialTechnique*)>>> &&)::$_0,void ()(void)>::~MoveOnlyCallable(void *a1)
{
  *a1 = &unk_26E7108A0;
  re::FixedArray<std::unique_ptr<re::MaterialTechnique,std::function<void ()(re::MaterialTechnique*)>>>::deinit(a1 + 2);
  JUMPOUT(0x237DBCBD0);
}

void *re::internal::MoveOnlyCallable<re::MaterialManager::destroyMaterial(unsigned long,re::FixedArray<std::unique_ptr<re::MaterialTechnique,std::function<void ()(re::MaterialTechnique*)>>> &&)::$_0,void ()(void)>::operator()(re *a1)
{
  unint64_t v1 = a1;
  uint64_t v34 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)a1 + 1);
  uint64_t v3 = *(void **)(v2 + 896);
  uint64_t v4 = v3[13];
  if (v4)
  {
    uint64_t v5 = *((void *)a1 + 6);
    uint64_t v33 = 0;
    v30[1] = 0;
    uint64_t v31 = 0;
    LODWORD(vre::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0;
    v30[0] = v5;
    re::DynamicArray<re::Pair<BOOL,re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::Subscription,true>>::setCapacity(v30, 0);
    LODWORD(vre::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = v32 + 1;
    uint64_t v27 = v4 + 104;
    uint64_t v28 = 0;
    unint64_t v6 = *(void *)(v4 + 120);
    if (v6 < 0x10)
    {
LABEL_6:
      uint64_t i = -1;
    }
    else
    {
      uint64_t v7 = 0;
      uint64_t v8 = *(void *)(v4 + 104);
      unint64_t v9 = v6 >> 4;
      while (1)
      {
        unsigned __int16 v10 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v8 + v7)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800).u16[0];
        uint64_t v28 = (unsigned __int16)~v10;
        if (v10 != 0xFFFF) {
          break;
        }
        v7 += 16;
        if (!--v9) {
          goto LABEL_6;
        }
      }
      uint64_t v18 = __clz(__rbit64((unsigned __int16)~v10)) + v7;
      for (i = v18; i != -1; uint64_t v18 = i)
      {
        uint64_t v19 = v27;
        re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(&v27);
        uint64_t v20 = *(void *)(v19 + 8);
        uint64_t v21 = v20 + 48 * v18;
        if (*(void *)(v21 + 16) == *((void *)v1 + 5))
        {
          uint64_t v22 = *(id **)(v20 + 48 * v18 + 40);

          *uint64_t v22 = 0;
          v22[1] = 0;
          re::internal::destroyPersistent<re::CachedArgumentBuffer>((re *)"destroyCachedArgumentBuffer", 185, (uint64_t)v22);
          re::DynamicArray<re::Pair<BOOL,re::Event<re::NetworkSystem,re::ecs2::Component *>::Subscription,true>>::add((_anonymous_namespace_ *)v30, v21);
        }
      }
    }
    if (v31)
    {
      uint64_t v11 = v33;
      uint64_t v12 = 40 * v31;
      do
      {
        long long v13 = *(_OWORD *)v11;
        long long v14 = *(_OWORD *)(v11 + 16);
        uint64_t v26 = *(void *)(v11 + 32);
        long long v24 = v13;
        long long v25 = v14;
        re::HashBrown<re::ArgumentBufferCacheKey,re::CachedArgumentBuffer *,re::Hash<re::ArgumentBufferCacheKey>,re::EqualTo<re::ArgumentBufferCacheKey>,void,false>::remove((uint64_t *)(v4 + 104), &v24);
        v11 += 40;
        v12 -= 40;
      }
      while (v12);
    }
    a1 = (re *)v30[0];
    if (v30[0] && v33) {
      a1 = (re *)(*(uint64_t (**)(void))(*(void *)v30[0] + 40))();
    }
    uint64_t v3 = *(void **)(v2 + 896);
  }
  long long v23 = *((_OWORD *)v1 + 1);
  uint64_t v15 = *((void *)v1 + 4);
  *((void *)v1 + 3) = 0;
  *((void *)v1 + 4) = 0;
  *((void *)v1 + 2) = 0;
  *(void *)&long long v24 = v2;
  uint64_t v26 = v4;
  uint64_t v32 = re::globalAllocators(a1)[2];
  uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v32 + 32))(v32, 48, 0);
  *(void *)uint64_t v16 = &unk_26E7108F0;
  *(void *)(v16 + 8) = v2;
  *(_OWORD *)(v16 + 16) = v23;
  *((void *)&v24 + 1) = 0;
  long long v25 = 0uLL;
  *(void *)(v16 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = v15;
  *(void *)(v16 + 40) = v4;
  uint64_t v33 = v16;
  re::RenderManager::addDelayedDestructor(v3, (uint64_t)v30);
  re::MoveOnlyFunctionBase<24ul,void ()(void)>::destroyCallable((uint64_t)v30);
  return re::FixedArray<std::unique_ptr<re::MaterialTechnique,std::function<void ()(re::MaterialTechnique*)>>>::deinit((void *)&v24 + 1);
}

uint64_t re::internal::MoveOnlyCallable<re::MaterialManager::destroyMaterial(unsigned long,re::FixedArray<std::unique_ptr<re::MaterialTechnique,std::function<void ()(re::MaterialTechnique*)>>> &&)::$_0,void ()(void)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E7108A0;
  *(void *)(a2 + 8) = v2;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 16) = *(void *)(a1 + 16);
  *(void *)(a2 + 24) = v3;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a2 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = *(void *)(a1 + 32);
  *(void *)(a1 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = v4;
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  return a2;
}

uint64_t re::internal::MoveOnlyCallable<re::MaterialManager::destroyMaterial(unsigned long,re::FixedArray<std::unique_ptr<re::MaterialTechnique,std::function<void ()(re::MaterialTechnique*)>>> &&)::$_0,void ()(void)>::size()
{
  return 56;
}

BOOL re::HashBrown<re::ArgumentBufferCacheKey,re::CachedArgumentBuffer *,re::Hash<re::ArgumentBufferCacheKey>,re::EqualTo<re::ArgumentBufferCacheKey>,void,false>::remove(uint64_t *a1, void *a2)
{
  uint64_t v3 = re::HashBrown<re::ArgumentBufferCacheKey,re::CachedArgumentBuffer *,re::Hash<re::ArgumentBufferCacheKey>,re::EqualTo<re::ArgumentBufferCacheKey>,void,false>::find(a1, a2);
  uint64_t v4 = v3;
  if (v3 != -1)
  {
    uint64_t v5 = (int8x16_t *)(*a1 + (v3 & 0xFFFFFFFFFFFFFFF0));
    v6.i64[0] = -1;
    v6.i64[1] = -1;
    int8x8_t v7 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(*v5, v6), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800);
    if (v7) {
      char v8 = -1;
    }
    else {
      char v8 = 0x80;
    }
    v5->i8[v3 & 0xF] = v8;
    re::HashBrown<re::ArgumentBufferCacheKey,re::CachedArgumentBuffer *,re::Hash<re::ArgumentBufferCacheKey>,re::EqualTo<re::ArgumentBufferCacheKey>,void,false>::updateHashes((uint64_t)a1, (void *)(a1[1] + 48 * v3));
    if (v7) {
      uint64_t v9 = a1[4] + 1;
    }
    else {
      uint64_t v9 = a1[4];
    }
    unint64_t v10 = a1[2];
    unint64_t v11 = a1[3] - 1;
    a1[3] = v11;
    a1[4] = v9;
    if (v10 >= 0x11 && v11 < v10 >> 2) {
      re::HashBrown<re::ArgumentBufferCacheKey,re::CachedArgumentBuffer *,re::Hash<re::ArgumentBufferCacheKey>,re::EqualTo<re::ArgumentBufferCacheKey>,void,false>::resize(a1, 0);
    }
  }
  return v4 != -1;
}

re *re::internal::destroyPersistent<re::CachedArgumentBuffer>(re *result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v4 = re::globalAllocators(result)[2];
    objc_destroyWeak((id *)(a3 + 64));
    *(void *)(a3 + 64) = 0;
    re::DynamicArray<NS::SharedPtr<MTL::SamplerState>>::deinit(a3 + 16);
    for (uint64_t i = 8; i != -8; i -= 8)
    {
      int8x16_t v6 = *(void **)(a3 + i);
      if (v6)
      {

        *(void *)(a3 + i) = 0;
      }
    }
    int8x8_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 40);
    return (re *)v7(v4, a3);
  }
  return result;
}

uint64_t re::HashBrown<re::ArgumentBufferCacheKey,re::CachedArgumentBuffer *,re::Hash<re::ArgumentBufferCacheKey>,re::EqualTo<re::ArgumentBufferCacheKey>,void,false>::find(uint64_t *a1, void *a2)
{
  if (!a1[7]) {
    return -1;
  }
  unint64_t v3 = a1[2];
  if (v3 < 0x10 || !a1[3]) {
    return -1;
  }
  unint64_t v5 = (a2[2] + (*a2 << 6) + (*a2 >> 2) - 0x61C8864680B583E9) ^ *a2;
  unint64_t v6 = (((v5 << 6)
       + (v5 >> 2)
       + ((a2[4] + (a2[3] << 6) + (a2[3] >> 2) - 0x61C8864680B583E9) ^ a2[3])
       - 0x61C8864680B583E9) ^ v5)
     % (v3 >> 4);
  while (1)
  {
    uint64_t v7 = *a1;
    unsigned int v8 = re::HashBrown<re::ArgumentBufferCacheKey,re::CachedArgumentBuffer *,re::Hash<re::ArgumentBufferCacheKey>,re::EqualTo<re::ArgumentBufferCacheKey>,void,false>::h2((uint64_t)a1, (uint64_t)a2);
    int8x16_t v9 = *(int8x16_t *)(v7 + 16 * v6);
    unint64_t v10 = (unint64_t)vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(vdupq_n_s8(v8), v9), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800);
    unint64_t v11 = __clz(__rbit64(v10));
    v12.i64[0] = -1;
    v12.i64[1] = -1;
    if (v11 <= 0x3F) {
      break;
    }
LABEL_13:
    if (vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(v9, v12), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800))
    {
      return -1;
    }
    if (++v6 == (unint64_t)a1[2] >> 4) {
      unint64_t v6 = 0;
    }
    unint64_t v16 = re::HashBrown<re::ArgumentBufferCacheKey,re::CachedArgumentBuffer *,re::Hash<re::ArgumentBufferCacheKey>,re::EqualTo<re::ArgumentBufferCacheKey>,void,false>::h1((uint64_t)a1, a2)% ((unint64_t)a1[2] >> 4);
    uint64_t result = -1;
    if (v6 == v16) {
      return result;
    }
  }
  uint64_t v13 = 16 * v6;
  while (1)
  {
    uint64_t result = v11 + v13;
    uint64_t v15 = (void *)(a1[1] + 48 * (v11 + v13));
    if (a2[2] == v15[2] && a2[3] == v15[3] && a2[4] == v15[4] && a2[1] == v15[1]) {
      return result;
    }
    if (v11 <= 0x3E)
    {
      unint64_t v11 = __clz(__rbit64((-2 << v11) & v10));
      if (v11 < 0x40) {
        continue;
      }
    }
    goto LABEL_13;
  }
}

uint64_t re::HashBrown<re::ArgumentBufferCacheKey,re::CachedArgumentBuffer *,re::Hash<re::ArgumentBufferCacheKey>,re::EqualTo<re::ArgumentBufferCacheKey>,void,false>::updateHashes(uint64_t result, void *a2)
{
  unint64_t v2 = (a2[2] + (*a2 << 6) + (*a2 >> 2) - 0x61C8864680B583E9) ^ *a2;
  *(void *)(result + 40) ^= v2 ^ ((v2 << 6)
                                  + (v2 >> 2)
                                  + ((a2[4] + (a2[3] << 6) + (a2[3] >> 2) - 0x61C8864680B583E9) ^ a2[3])
                                  - 0x61C8864680B583E9);
  return result;
}

uint64_t re::HashBrown<re::ArgumentBufferCacheKey,re::CachedArgumentBuffer *,re::Hash<re::ArgumentBufferCacheKey>,re::EqualTo<re::ArgumentBufferCacheKey>,void,false>::resize(uint64_t *a1, int a2)
{
  unint64_t v2 = a1[2];
  unint64_t v3 = a1[3] + a2;
  unint64_t v4 = (((151 * v3) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  if (v4 > v2)
  {
    unint64_t v5 = 3 * v2;
    unint64_t v6 = v5 << 6;
    uint64_t v7 = (v5 >> 1) & 0x1FFFFFFFFFFFFFFLL;
    if (v4 <= v6 >> 7) {
      unint64_t v4 = v7;
    }
    unint64_t v3 = (v4 << 7) / 0x97;
  }
  return re::HashBrown<re::ArgumentBufferCacheKey,re::CachedArgumentBuffer *,re::Hash<re::ArgumentBufferCacheKey>,re::EqualTo<re::ArgumentBufferCacheKey>,void,false>::doResize(a1, v3);
}

uint64_t re::HashBrown<re::ArgumentBufferCacheKey,re::CachedArgumentBuffer *,re::Hash<re::ArgumentBufferCacheKey>,re::EqualTo<re::ArgumentBufferCacheKey>,void,false>::h1(uint64_t a1, void *a2)
{
  unint64_t v2 = (a2[2] + (*a2 << 6) + (*a2 >> 2) - 0x61C8864680B583E9) ^ *a2;
  return ((v2 << 6)
        + (v2 >> 2)
        + ((a2[4] + (a2[3] << 6) + (a2[3] >> 2) - 0x61C8864680B583E9) ^ a2[3])
        - 0x61C8864680B583E9) ^ v2;
}

uint64_t re::HashBrown<re::ArgumentBufferCacheKey,re::CachedArgumentBuffer *,re::Hash<re::ArgumentBufferCacheKey>,re::EqualTo<re::ArgumentBufferCacheKey>,void,false>::h2(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = (*(_DWORD *)(a2 + 16) + 2135587863 + (*(void *)a2 << 6) + (*(void *)a2 >> 2)) ^ *(void *)a2;
  return (((v2 >> 2)
         + (v2 << 6)
         + ((*(_DWORD *)(a2 + 32)
           + 2135587863
           + (*(void *)(a2 + 24) << 6)
           + (*(void *)(a2 + 24) >> 2)) ^ *(void *)(a2 + 24))
         + 23) ^ v2) & 0x7F;
}

uint64_t re::HashBrown<re::ArgumentBufferCacheKey,re::CachedArgumentBuffer *,re::Hash<re::ArgumentBufferCacheKey>,re::EqualTo<re::ArgumentBufferCacheKey>,void,false>::doResize(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = a1[7];
  memset(v22, 0, sizeof(v22));
  re::HashBrown<re::ArgumentBufferCacheKey,re::CachedArgumentBuffer *,re::Hash<re::ArgumentBufferCacheKey>,re::EqualTo<re::ArgumentBufferCacheKey>,void,false>::init(v22, v4, a2);
  v20[0] = a1;
  unint64_t v5 = a1[2];
  if (v5 >= 0x10)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a1;
    unint64_t v8 = v5 >> 4;
    while (1)
    {
      unsigned __int16 v9 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v7 + v6)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800).u16[0];
      v20[1] = (unsigned __int16)~v9;
      if (v9 != 0xFFFF) {
        break;
      }
      v6 += 16;
      if (!--v8) {
        goto LABEL_9;
      }
    }
    uint64_t v10 = __clz(__rbit64((unsigned __int16)~v9)) + v6;
    uint64_t v21 = v10;
    if (v10 != -1)
    {
      do
      {
        re::HashBrown<re::ArgumentBufferCacheKey,re::CachedArgumentBuffer *,re::Hash<re::ArgumentBufferCacheKey>,re::EqualTo<re::ArgumentBufferCacheKey>,void,false>::internalAdd((_anonymous_namespace_ *)v22, (void *)(*(void *)(v20[0] + 8) + 48 * v10), (uint64_t *)(*(void *)(v20[0] + 8) + 48 * v10 + 40));
        re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v20);
        uint64_t v10 = v21;
      }
      while (v21 != -1);
      unint64_t v5 = a1[2];
    }
  }
LABEL_9:
  uint64_t v12 = *((void *)&v22[3] + 1);
  *((void *)&v22[3] + 1) = a1[7];
  uint64_t result = *((void *)&v22[3] + 1);
  long long v13 = v22[0];
  long long v14 = v22[1];
  *(void *)&v22[1] = v5;
  uint64_t v15 = *a1;
  uint64_t v16 = a1[1];
  *(void *)&v22[0] = *a1;
  *((void *)&v22[0] + 1) = v16;
  long long v17 = v22[2];
  long long v18 = *(_OWORD *)(a1 + 5);
  a1[6] = *(void *)&v22[3];
  a1[7] = v12;
  *(_OWORD *)((char *)&v22[2] + 8) = v18;
  long long v19 = *(_OWORD *)(a1 + 3);
  *(_OWORD *)a1 = v13;
  *((_OWORD *)a1 + 1) = v14;
  *((_OWORD *)a1 + 2) = v17;
  *(_OWORD *)((char *)&v22[1] + 8) = v19;
  if (result)
  {
    if (v16) {
      *((void *)&v22[0] + 1) = 0;
    }
    if (v15) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 40))(result);
    }
  }
  return result;
}

uint64_t re::HashBrown<re::ArgumentBufferCacheKey,re::CachedArgumentBuffer *,re::Hash<re::ArgumentBufferCacheKey>,re::EqualTo<re::ArgumentBufferCacheKey>,void,false>::internalAdd(_anonymous_namespace_ *a1, void *a2, uint64_t *a3)
{
  if (!*((void *)a1 + 7))
  {
  }
  uint64_t v6 = *((void *)a1 + 4);
  if (!v6 || (unint64_t v7 = *((void *)a1 + 2), v7 > 8 * v6))
  {
    re::HashBrown<re::ArgumentBufferCacheKey,re::CachedArgumentBuffer *,re::Hash<re::ArgumentBufferCacheKey>,re::EqualTo<re::ArgumentBufferCacheKey>,void,false>::resize(a1, 1);
    unint64_t v7 = *((void *)a1 + 2);
  }
  unint64_t v8 = (a2[2] + (*a2 << 6) + (*a2 >> 2) - 0x61C8864680B583E9) ^ *a2;
  unint64_t v9 = (((v8 << 6)
       + (v8 >> 2)
       + ((a2[4] + (a2[3] << 6) + (a2[3] >> 2) - 0x61C8864680B583E9) ^ a2[3])
       - 0x61C8864680B583E9) ^ v8)
     % (v7 >> 4);
  while (1)
  {
    uint64_t v10 = *(void *)a1;
    char v11 = re::HashBrown<re::ArgumentBufferCacheKey,re::CachedArgumentBuffer *,re::Hash<re::ArgumentBufferCacheKey>,re::EqualTo<re::ArgumentBufferCacheKey>,void,false>::h2((uint64_t)a1, (uint64_t)a2);
    unint64_t v12 = __clz(__rbit64(*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v10 + 16 * v9)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800)));
    if (v12 < 0x40) {
      break;
    }
    if (v9 + 1 == *((void *)a1 + 2) >> 4) {
      unint64_t v9 = 0;
    }
    else {
      ++v9;
    }
  }
  uint64_t v13 = v10 + 16 * v9;
  BOOL v14 = *(unsigned __int8 *)(v13 + v12) == 255;
  *(unsigned char *)(v13 + v12) = v11;
  uint64_t v15 = *a3;
  uint64_t v16 = 3 * (v12 + 16 * v9);
  uint64_t v17 = *((void *)a1 + 1) + 48 * (v12 + 16 * v9);
  long long v18 = *((_OWORD *)a2 + 1);
  uint64_t v19 = a2[4];
  *(_OWORD *)uint64_t v17 = *(_OWORD *)a2;
  *(_OWORD *)(v17 + 16) = v18;
  *(void *)(v17 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = v19;
  *(void *)(v17 + 40) = v15;
  uint64_t v20 = *((void *)a1 + 4) - v14;
  ++*((void *)a1 + 3);
  *((void *)a1 + 4) = v20;
  re::HashBrown<re::ArgumentBufferCacheKey,re::CachedArgumentBuffer *,re::Hash<re::ArgumentBufferCacheKey>,re::EqualTo<re::ArgumentBufferCacheKey>,void,false>::updateHashes((uint64_t)a1, (void *)(*((void *)a1 + 1) + 16 * v16));
  return *((void *)a1 + 1) + 16 * v16 + 40;
}

void *re::HashBrown<re::ArgumentBufferCacheKey,re::CachedArgumentBuffer *,re::Hash<re::ArgumentBufferCacheKey>,re::EqualTo<re::ArgumentBufferCacheKey>,void,false>::init(void *result, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = result;
  result[7] = a2;
  unint64_t v4 = 151 * a3;
  unint64_t v5 = ((unint64_t)(151 * a3) >> 7) + 15;
  unint64_t v6 = v5 & 0x3FFFFFFFFFFFFF0;
  result[2] = v5 & 0x3FFFFFFFFFFFFF0;
  if ((v5 & 0x3FFFFFFFFFFFFF0) != 0)
  {
    unint64_t v7 = v5 >> 4;
    uint64_t result = (void *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a2 + 32))(a2, 49 * v6, 16);
    *unint64_t v3 = result;
    if (v4 >= 0x80)
    {
      uint64_t v8 = 0;
      *(void *)&long long v9 = -1;
      *((void *)&v9 + 1) = -1;
      do
        *(_OWORD *)(*v3 + 16 * v8++) = v9;
      while (v7 != v8);
      uint64_t result = (void *)*v3;
    }
    v3[1] = &result[2 * v7];
    unint64_t v6 = v3[2];
    if (v6)
    {
      uint64_t v10 = 0;
      for (unint64_t i = 0; i < v6; ++i)
      {
        unint64_t v12 = (_OWORD *)(v3[1] + v10);
        v12[1] = 0uLL;
        uint64_t v12[2] = 0uLL;
        *unint64_t v12 = 0uLL;
        unint64_t v6 = v3[2];
        v10 += 48;
      }
    }
  }
  else
  {
    *uint64_t result = 0;
    result[1] = 0;
  }
  v3[5] = 0;
  v3[6] = 0;
  v3[3] = 0;
  v3[4] = v6;
  return result;
}

void *re::internal::MoveOnlyCallable<re::MaterialManager::destroyMaterial(unsigned long,re::FixedArray<std::unique_ptr<re::MaterialTechnique,std::function<void ()(re::MaterialTechnique*)>>> &&)::$_0::operator()(void)::{lambda(void)#1},void ()(void)>::~MoveOnlyCallable(void *a1)
{
  *a1 = &unk_26E7108F0;
  re::FixedArray<std::unique_ptr<re::MaterialTechnique,std::function<void ()(re::MaterialTechnique*)>>>::deinit(a1 + 2);
  return a1;
}

void re::internal::MoveOnlyCallable<re::MaterialManager::destroyMaterial(unsigned long,re::FixedArray<std::unique_ptr<re::MaterialTechnique,std::function<void ()(re::MaterialTechnique*)>>> &&)::$_0::operator()(void)::{lambda(void)#1},void ()(void)>::~MoveOnlyCallable(void *a1)
{
  *a1 = &unk_26E7108F0;
  re::FixedArray<std::unique_ptr<re::MaterialTechnique,std::function<void ()(re::MaterialTechnique*)>>>::deinit(a1 + 2);
  JUMPOUT(0x237DBCBD0);
}

void re::internal::MoveOnlyCallable<re::MaterialManager::destroyMaterial(unsigned long,re::FixedArray<std::unique_ptr<re::MaterialTechnique,std::function<void ()(re::MaterialTechnique*)>>> &&)::$_0::operator()(void)::{lambda(void)#1},void ()(void)>::operator()(void *a1)
{
  uint64_t v1 = a1[1];
  uint64_t v2 = a1[3];
  if (v2)
  {
    uint64_t v189 = a1[4] + 40 * v2;
    unint64_t v3 = (void *)a1[4];
    while (1)
    {
      char v190 = v3;
      uint64_t v4 = *v3;
      if (*v3)
      {
        uint64_t v193 = *(unsigned int *)(v4 + 120);
        uint64_t v5 = 0;
        if (v193)
        {
          unint64_t v6 = (int *)(*(void *)(v4 + 104) + 8);
          while (1)
          {
            int v7 = *v6;
            v6 += 8;
            if (v7 < 0) {
              break;
            }
            if (v193 == ++v5)
            {
              LODWORD(v5) = *(_DWORD *)(v4 + 120);
              break;
            }
          }
        }
        if (v193 != v5) {
          break;
        }
      }
LABEL_265:
      unint64_t v3 = v190 + 5;
      if (v190 + 5 == (void *)v189) {
        goto LABEL_266;
      }
    }
    uint64_t v8 = v5;
    uint64_t v192 = v4;
    while (1)
    {
      uint64_t v9 = *(void *)(*(void *)(v4 + 104) + 32 * v8 + 24);
      uint64_t v10 = (re::DrawingManager *)a1[5];
      if (v10) {
        re::MaterialTechniqueVariant::releasePipelineStates((re::MaterialTechniqueVariant *)v9, *(re::RenderManager **)(v1 + 896), v10);
      }
      uint64_t v11 = *(unsigned int *)(v9 + 248);
      uint64_t v12 = 0;
      if (v11)
      {
        uint64_t v13 = *(int **)(v9 + 232);
        while (1)
        {
          int v14 = *v13;
          v13 += 4;
          if (v14 < 0) {
            break;
          }
          if (v11 == ++v12)
          {
            LODWORD(v12) = *(_DWORD *)(v9 + 248);
            break;
          }
        }
      }
      if (v11 != v12)
      {
        uint64_t v15 = v12;
        do
        {
          unint64_t v16 = *(void *)(*(void *)(v9 + 232) + 16 * v15 + 8);
          re::HashSetBase<unsigned long,unsigned long,re::internal::ValueAsKey<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::remove(v9 + 216, v16);
          if (*(void *)(v1 + 144))
          {
            uint64_t v17 = *(void *)(v1 + 160);
            uint64_t v18 = *(unsigned int *)(*(void *)(v1 + 152) + 4 * (v16 % *(unsigned int *)(v1 + 168)));
            if (v18 != 0x7FFFFFFF)
            {
              while (*(void *)(v17 + 24 * v18 + 8) != v16)
              {
                uint64_t v18 = *(_DWORD *)(v17 + 24 * v18) & 0x7FFFFFFF;
                if (v18 == 0x7FFFFFFF) {
                  goto LABEL_26;
                }
              }
              goto LABEL_27;
            }
          }
          else
          {
            uint64_t v17 = *(void *)(v1 + 160);
          }
LABEL_26:
          LODWORD(v18) = 0x7FFFFFFF;
LABEL_27:
          uint64_t v19 = *(re **)(v17 + 24 * v18 + 16);
          if (!*(_DWORD *)v19 || (v20 = *(_DWORD *)v19 - 1, (*(_DWORD *)uint64_t v19 = v20) == 0))
          {
            re::internal::destroyPersistent<re::TechniqueResolutions<re::AttributeResolution>>(v19);
            if (*(void *)(v1 + 144))
            {
              unint64_t v21 = v16 % *(unsigned int *)(v1 + 168);
              uint64_t v22 = *(void *)(v1 + 152);
              uint64_t v23 = *(unsigned int *)(v22 + 4 * v21);
              if (v23 != 0x7FFFFFFF)
              {
                uint64_t v24 = *(void *)(v1 + 160);
                if (*(void *)(v24 + 24 * v23 + 8) == v16)
                {
                  *(_DWORD *)(v22 + 4 * v21) = *(_DWORD *)(v24 + 24 * v23) & 0x7FFFFFFF;
LABEL_36:
                  uint64_t v26 = *(void *)(v1 + 160);
                  uint64_t v27 = (int *)(v26 + 24 * v23);
                  int v28 = *v27;
                  if (*v27 < 0)
                  {
                    *uint64_t v27 = v28 & 0x7FFFFFFF;
                    uint64_t v26 = *(void *)(v1 + 160);
                    int v28 = *(_DWORD *)(v26 + 24 * v23);
                  }
                  *(_DWORD *)(v26 + 24 * v23) = *(_DWORD *)(v1 + 180) | v28 & 0x80000000;
                  --*(_DWORD *)(v1 + 172);
                  int v29 = *(_DWORD *)(v1 + 184) + 1;
                  *(_DWORD *)(v1 + 180) = v23;
                  *(_DWORD *)(v1 + 184) = v29;
                }
                else
                {
                  while (1)
                  {
                    uint64_t v25 = v23;
                    uint64_t v23 = *(_DWORD *)(v24 + 24 * v23) & 0x7FFFFFFF;
                    if (v23 == 0x7FFFFFFF) {
                      break;
                    }
                    if (*(void *)(v24 + 24 * v23 + 8) == v16)
                    {
                      *(_DWORD *)(v24 + 24 * v25) = *(_DWORD *)(v24 + 24 * v25) & 0x80000000 | *(_DWORD *)(v24 + 24 * v23) & 0x7FFFFFFF;
                      goto LABEL_36;
                    }
                  }
                }
              }
            }
          }
          if (*(_DWORD *)(v9 + 248) <= (v12 + 1)) {
            int v30 = v12 + 1;
          }
          else {
            int v30 = *(_DWORD *)(v9 + 248);
          }
          while (1)
          {
            uint64_t v15 = (v12 + 1);
            if (v30 - 1 == v12) {
              break;
            }
            LODWORD(v12) = v12 + 1;
            int v31 = v15;
            if ((*(_DWORD *)(*(void *)(v9 + 232) + 16 * v15) & 0x80000000) != 0) {
              goto LABEL_46;
            }
          }
          int v31 = v30;
LABEL_46:
          LODWORD(v12) = v31;
        }
        while (v11 != v31);
      }
      uint64_t v32 = *(unsigned int *)(v9 + 200);
      if (v32)
      {
        uint64_t v33 = 0;
        uint64_t v34 = *(int **)(v9 + 184);
        while (1)
        {
          int v35 = *v34;
          v34 += 4;
          if (v35 < 0) {
            break;
          }
          if (v32 == ++v33)
          {
            LODWORD(v33) = *(_DWORD *)(v9 + 200);
            break;
          }
        }
      }
      else
      {
        LODWORD(v33) = 0;
      }
      if (v32 != v33)
      {
        uint64_t v36 = v33;
        do
        {
          unint64_t v37 = *(void *)(*(void *)(v9 + 184) + 16 * v36 + 8);
          re::HashSetBase<unsigned long,unsigned long,re::internal::ValueAsKey<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::remove(v9 + 168, v37);
          if (*(void *)(v1 + 96))
          {
            uint64_t v38 = *(void *)(v1 + 112);
            uint64_t v39 = *(unsigned int *)(*(void *)(v1 + 104) + 4 * (v37 % *(unsigned int *)(v1 + 120)));
            if (v39 != 0x7FFFFFFF)
            {
              while (*(void *)(v38 + 24 * v39 + 8) != v37)
              {
                uint64_t v39 = *(_DWORD *)(v38 + 24 * v39) & 0x7FFFFFFF;
                if (v39 == 0x7FFFFFFF) {
                  goto LABEL_61;
                }
              }
              goto LABEL_62;
            }
          }
          else
          {
            uint64_t v38 = *(void *)(v1 + 112);
          }
LABEL_61:
          LODWORD(v39) = 0x7FFFFFFF;
LABEL_62:
          uint64_t v40 = *(re **)(v38 + 24 * v39 + 16);
          if (!*(_DWORD *)v40 || (v41 = *(_DWORD *)v40 - 1, (*(_DWORD *)uint64_t v40 = v41) == 0))
          {
            re::internal::destroyPersistent<re::TechniqueResolutions<re::BufferResolution>>(v40);
            if (*(void *)(v1 + 96))
            {
              unint64_t v42 = v37 % *(unsigned int *)(v1 + 120);
              uint64_t v43 = *(void *)(v1 + 104);
              uint64_t v44 = *(unsigned int *)(v43 + 4 * v42);
              if (v44 != 0x7FFFFFFF)
              {
                uint64_t v45 = *(void *)(v1 + 112);
                if (*(void *)(v45 + 24 * v44 + 8) == v37)
                {
                  *(_DWORD *)(v43 + 4 * v42) = *(_DWORD *)(v45 + 24 * v44) & 0x7FFFFFFF;
LABEL_71:
                  uint64_t v47 = *(void *)(v1 + 112);
                  int v48 = (int *)(v47 + 24 * v44);
                  int v49 = *v48;
                  if (*v48 < 0)
                  {
                    *int v48 = v49 & 0x7FFFFFFF;
                    uint64_t v47 = *(void *)(v1 + 112);
                    int v49 = *(_DWORD *)(v47 + 24 * v44);
                  }
                  *(_DWORD *)(v47 + 24 * v44) = *(_DWORD *)(v1 + 132) | v49 & 0x80000000;
                  --*(_DWORD *)(v1 + 124);
                  int v50 = *(_DWORD *)(v1 + 136) + 1;
                  *(_DWORD *)(v1 + 1re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = v44;
                  *(_DWORD *)(v1 + re::DynamicArray<re::RigComponentConstraint>::deinit((uint64_t)this + 136) = v50;
                }
                else
                {
                  while (1)
                  {
                    uint64_t v46 = v44;
                    uint64_t v44 = *(_DWORD *)(v45 + 24 * v44) & 0x7FFFFFFF;
                    if (v44 == 0x7FFFFFFF) {
                      break;
                    }
                    if (*(void *)(v45 + 24 * v44 + 8) == v37)
                    {
                      *(_DWORD *)(v45 + 24 * v46) = *(_DWORD *)(v45 + 24 * v46) & 0x80000000 | *(_DWORD *)(v45 + 24 * v44) & 0x7FFFFFFF;
                      goto LABEL_71;
                    }
                  }
                }
              }
            }
          }
          if (*(_DWORD *)(v9 + 200) <= (v33 + 1)) {
            int v51 = v33 + 1;
          }
          else {
            int v51 = *(_DWORD *)(v9 + 200);
          }
          while (1)
          {
            uint64_t v36 = (v33 + 1);
            if (v51 - 1 == v33) {
              break;
            }
            LODWORD(v33) = v33 + 1;
            int v52 = v36;
            if ((*(_DWORD *)(*(void *)(v9 + 184) + 16 * v36) & 0x80000000) != 0) {
              goto LABEL_81;
            }
          }
          int v52 = v51;
LABEL_81:
          LODWORD(v33) = v52;
        }
        while (v32 != v52);
      }
      uint64_t v53 = *(unsigned int *)(v9 + 104);
      if (v53)
      {
        uint64_t v54 = 0;
        __int16 v55 = *(int **)(v9 + 88);
        while (1)
        {
          int v56 = *v55;
          v55 += 4;
          if (v56 < 0) {
            break;
          }
          if (v53 == ++v54)
          {
            LODWORD(v54) = *(_DWORD *)(v9 + 104);
            break;
          }
        }
      }
      else
      {
        LODWORD(v54) = 0;
      }
      if (v53 != v54)
      {
        uint64_t v57 = v54;
        do
        {
          unint64_t v58 = *(void *)(*(void *)(v9 + 88) + 16 * v57 + 8);
          re::HashSetBase<unsigned long,unsigned long,re::internal::ValueAsKey<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::remove(v9 + 72, v58);
          if (*(void *)v1)
          {
            uint64_t v59 = *(void *)(v1 + 16);
            uint64_t v60 = *(unsigned int *)(*(void *)(v1 + 8) + 4 * (v58 % *(unsigned int *)(v1 + 24)));
            if (v60 != 0x7FFFFFFF)
            {
              while (*(void *)(v59 + 24 * v60 + 8) != v58)
              {
                uint64_t v60 = *(_DWORD *)(v59 + 24 * v60) & 0x7FFFFFFF;
                if (v60 == 0x7FFFFFFF) {
                  goto LABEL_96;
                }
              }
              goto LABEL_97;
            }
          }
          else
          {
            uint64_t v59 = *(void *)(v1 + 16);
          }
LABEL_96:
          LODWORD(v60) = 0x7FFFFFFF;
LABEL_97:
          uint64_t v61 = *(re **)(v59 + 24 * v60 + 16);
          if (!*(_DWORD *)v61 || (v62 = *(_DWORD *)v61 - 1, (*(_DWORD *)uint64_t v61 = v62) == 0))
          {
            re::internal::destroyPersistent<re::TechniqueResolutions<re::ConstantResolution>>(v61);
            if (*(void *)v1)
            {
              unint64_t v63 = v58 % *(unsigned int *)(v1 + 24);
              uint64_t v64 = *(void *)(v1 + 8);
              uint64_t v65 = *(unsigned int *)(v64 + 4 * v63);
              if (v65 != 0x7FFFFFFF)
              {
                uint64_t v66 = *(void *)(v1 + 16);
                if (*(void *)(v66 + 24 * v65 + 8) == v58)
                {
                  *(_DWORD *)(v64 + 4 * v63) = *(_DWORD *)(v66 + 24 * v65) & 0x7FFFFFFF;
LABEL_106:
                  uint64_t v68 = *(void *)(v1 + 16);
                  int v69 = (int *)(v68 + 24 * v65);
                  int v70 = *v69;
                  if (*v69 < 0)
                  {
                    *int v69 = v70 & 0x7FFFFFFF;
                    uint64_t v68 = *(void *)(v1 + 16);
                    int v70 = *(_DWORD *)(v68 + 24 * v65);
                  }
                  *(_DWORD *)(v68 + 24 * v65) = *(_DWORD *)(v1 + 36) | v70 & 0x80000000;
                  --*(_DWORD *)(v1 + 28);
                  int v71 = *(_DWORD *)(v1 + 40) + 1;
                  *(_DWORD *)(v1 + 36) = v65;
                  *(_DWORD *)(v1 + 40) = v71;
                }
                else
                {
                  while (1)
                  {
                    uint64_t v67 = v65;
                    uint64_t v65 = *(_DWORD *)(v66 + 24 * v65) & 0x7FFFFFFF;
                    if (v65 == 0x7FFFFFFF) {
                      break;
                    }
                    if (*(void *)(v66 + 24 * v65 + 8) == v58)
                    {
                      *(_DWORD *)(v66 + 24 * v67) = *(_DWORD *)(v66 + 24 * v67) & 0x80000000 | *(_DWORD *)(v66 + 24 * v65) & 0x7FFFFFFF;
                      goto LABEL_106;
                    }
                  }
                }
              }
            }
          }
          if (*(_DWORD *)(v9 + 104) <= (v54 + 1)) {
            int v72 = v54 + 1;
          }
          else {
            int v72 = *(_DWORD *)(v9 + 104);
          }
          while (1)
          {
            uint64_t v57 = (v54 + 1);
            if (v72 - 1 == v54) {
              break;
            }
            LODWORD(v54) = v54 + 1;
            int v73 = v57;
            if ((*(_DWORD *)(*(void *)(v9 + 88) + 16 * v57) & 0x80000000) != 0) {
              goto LABEL_116;
            }
          }
          int v73 = v72;
LABEL_116:
          LODWORD(v54) = v73;
        }
        while (v53 != v73);
      }
      uint64_t v74 = *(unsigned int *)(v9 + 152);
      if (v74)
      {
        uint64_t v75 = 0;
        uint64_t v76 = *(int **)(v9 + 136);
        while (1)
        {
          int v77 = *v76;
          v76 += 4;
          if (v77 < 0) {
            break;
          }
          if (v74 == ++v75)
          {
            LODWORD(v75) = *(_DWORD *)(v9 + 152);
            break;
          }
        }
      }
      else
      {
        LODWORD(v75) = 0;
      }
      if (v74 != v75)
      {
        uint64_t v78 = v75;
        do
        {
          unint64_t v79 = *(void *)(*(void *)(v9 + 136) + 16 * v78 + 8);
          re::HashSetBase<unsigned long,unsigned long,re::internal::ValueAsKey<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::remove(v9 + 120, v79);
          if (*(void *)(v1 + 48))
          {
            uint64_t v80 = *(void *)(v1 + 64);
            uint64_t v81 = *(unsigned int *)(*(void *)(v1 + 56) + 4 * (v79 % *(unsigned int *)(v1 + 72)));
            if (v81 != 0x7FFFFFFF)
            {
              while (*(void *)(v80 + 24 * v81 + 8) != v79)
              {
                uint64_t v81 = *(_DWORD *)(v80 + 24 * v81) & 0x7FFFFFFF;
                if (v81 == 0x7FFFFFFF) {
                  goto LABEL_131;
                }
              }
              goto LABEL_132;
            }
          }
          else
          {
            uint64_t v80 = *(void *)(v1 + 64);
          }
LABEL_131:
          LODWORD(v81) = 0x7FFFFFFF;
LABEL_132:
          unint64_t v82 = *(re **)(v80 + 24 * v81 + 16);
          if (!*(_DWORD *)v82 || (v83 = *(_DWORD *)v82 - 1, (*(_DWORD *)unint64_t v82 = v83) == 0))
          {
            re::internal::destroyPersistent<re::TechniqueResolutions<re::BufferResolution>>(v82);
            if (*(void *)(v1 + 48))
            {
              unint64_t v84 = v79 % *(unsigned int *)(v1 + 72);
              uint64_t v85 = *(void *)(v1 + 56);
              uint64_t v86 = *(unsigned int *)(v85 + 4 * v84);
              if (v86 != 0x7FFFFFFF)
              {
                uint64_t v87 = *(void *)(v1 + 64);
                if (*(void *)(v87 + 24 * v86 + 8) == v79)
                {
                  *(_DWORD *)(v85 + 4 * v84) = *(_DWORD *)(v87 + 24 * v86) & 0x7FFFFFFF;
LABEL_141:
                  uint64_t v89 = *(void *)(v1 + 64);
                  uint64_t v90 = (int *)(v89 + 24 * v86);
                  int v91 = *v90;
                  if (*v90 < 0)
                  {
                    *uint64_t v90 = v91 & 0x7FFFFFFF;
                    uint64_t v89 = *(void *)(v1 + 64);
                    int v91 = *(_DWORD *)(v89 + 24 * v86);
                  }
                  *(_DWORD *)(v89 + 24 * v86) = *(_DWORD *)(v1 + 84) | v91 & 0x80000000;
                  --*(_DWORD *)(v1 + 76);
                  int v92 = *(_DWORD *)(v1 + 88) + 1;
                  *(_DWORD *)(v1 + 84) = v86;
                  *(_DWORD *)(v1 + 88) = v92;
                }
                else
                {
                  while (1)
                  {
                    uint64_t v88 = v86;
                    uint64_t v86 = *(_DWORD *)(v87 + 24 * v86) & 0x7FFFFFFF;
                    if (v86 == 0x7FFFFFFF) {
                      break;
                    }
                    if (*(void *)(v87 + 24 * v86 + 8) == v79)
                    {
                      *(_DWORD *)(v87 + 24 * v88) = *(_DWORD *)(v87 + 24 * v88) & 0x80000000 | *(_DWORD *)(v87 + 24 * v86) & 0x7FFFFFFF;
                      goto LABEL_141;
                    }
                  }
                }
              }
            }
          }
          if (*(_DWORD *)(v9 + 152) <= (v75 + 1)) {
            int v93 = v75 + 1;
          }
          else {
            int v93 = *(_DWORD *)(v9 + 152);
          }
          while (1)
          {
            uint64_t v78 = (v75 + 1);
            if (v93 - 1 == v75) {
              break;
            }
            LODWORD(v75) = v75 + 1;
            int v94 = v78;
            if ((*(_DWORD *)(*(void *)(v9 + 136) + 16 * v78) & 0x80000000) != 0) {
              goto LABEL_151;
            }
          }
          int v94 = v93;
LABEL_151:
          LODWORD(v75) = v94;
        }
        while (v74 != v94);
      }
      uint64_t v95 = *(unsigned int *)(v9 + 296);
      if (v95)
      {
        uint64_t v96 = 0;
        uint64_t v97 = *(int **)(v9 + 280);
        while (1)
        {
          int v98 = *v97;
          v97 += 4;
          if (v98 < 0) {
            break;
          }
          if (v95 == ++v96)
          {
            LODWORD(vre::DynamicArray<re::RigComponentConstraint>::deinit((uint64_t)this + 96) = *(_DWORD *)(v9 + 296);
            break;
          }
        }
      }
      else
      {
        LODWORD(vre::DynamicArray<re::RigComponentConstraint>::deinit((uint64_t)this + 96) = 0;
      }
      if (v95 != v96)
      {
        uint64_t v99 = v96;
        do
        {
          unint64_t v100 = *(void *)(*(void *)(v9 + 280) + 16 * v99 + 8);
          re::HashSetBase<unsigned long,unsigned long,re::internal::ValueAsKey<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::remove(v9 + 264, v100);
          if (*(void *)(v1 + 192))
          {
            uint64_t v101 = *(void *)(v1 + 208);
            uint64_t v102 = *(unsigned int *)(*(void *)(v1 + 200) + 4 * (v100 % *(unsigned int *)(v1 + 216)));
            if (v102 != 0x7FFFFFFF)
            {
              while (*(void *)(v101 + 24 * v102 + 8) != v100)
              {
                uint64_t v102 = *(_DWORD *)(v101 + 24 * v102) & 0x7FFFFFFF;
                if (v102 == 0x7FFFFFFF) {
                  goto LABEL_166;
                }
              }
              goto LABEL_167;
            }
          }
          else
          {
            uint64_t v101 = *(void *)(v1 + 208);
          }
LABEL_166:
          LODWORD(v102) = 0x7FFFFFFF;
LABEL_167:
          unint64_t v103 = *(re **)(v101 + 24 * v102 + 16);
          if (!*(_DWORD *)v103 || (v104 = *(_DWORD *)v103 - 1, (*(_DWORD *)unint64_t v103 = v104) == 0))
          {
            re::internal::destroyPersistent<re::TechniqueResolutions<re::BufferResolution>>(v103);
            if (*(void *)(v1 + 192))
            {
              unint64_t v105 = v100 % *(unsigned int *)(v1 + 216);
              uint64_t v106 = *(void *)(v1 + 200);
              uint64_t v107 = *(unsigned int *)(v106 + 4 * v105);
              if (v107 != 0x7FFFFFFF)
              {
                uint64_t v108 = *(void *)(v1 + 208);
                if (*(void *)(v108 + 24 * v107 + 8) == v100)
                {
                  *(_DWORD *)(v106 + 4 * v105) = *(_DWORD *)(v108 + 24 * v107) & 0x7FFFFFFF;
LABEL_176:
                  uint64_t v110 = *(void *)(v1 + 208);
                  uint64_t v111 = (int *)(v110 + 24 * v107);
                  int v112 = *v111;
                  if (*v111 < 0)
                  {
                    *uint64_t v111 = v112 & 0x7FFFFFFF;
                    uint64_t v110 = *(void *)(v1 + 208);
                    int v112 = *(_DWORD *)(v110 + 24 * v107);
                  }
                  *(_DWORD *)(v110 + 24 * v107) = *(_DWORD *)(v1 + 228) | v112 & 0x80000000;
                  --*(_DWORD *)(v1 + 220);
                  int v113 = *(_DWORD *)(v1 + 232) + 1;
                  *(_DWORD *)(v1 + 228) = v107;
                  *(_DWORD *)(v1 + 2re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = v113;
                }
                else
                {
                  while (1)
                  {
                    uint64_t v109 = v107;
                    uint64_t v107 = *(_DWORD *)(v108 + 24 * v107) & 0x7FFFFFFF;
                    if (v107 == 0x7FFFFFFF) {
                      break;
                    }
                    if (*(void *)(v108 + 24 * v107 + 8) == v100)
                    {
                      *(_DWORD *)(v108 + 24 * v109) = *(_DWORD *)(v108 + 24 * v109) & 0x80000000 | *(_DWORD *)(v108 + 24 * v107) & 0x7FFFFFFF;
                      goto LABEL_176;
                    }
                  }
                }
              }
            }
          }
          if (*(_DWORD *)(v9 + 296) <= (v96 + 1)) {
            int v114 = v96 + 1;
          }
          else {
            int v114 = *(_DWORD *)(v9 + 296);
          }
          while (1)
          {
            uint64_t v99 = (v96 + 1);
            if (v114 - 1 == v96) {
              break;
            }
            LODWORD(vre::DynamicArray<re::RigComponentConstraint>::deinit((uint64_t)this + 96) = v96 + 1;
            int v115 = v99;
            if ((*(_DWORD *)(*(void *)(v9 + 280) + 16 * v99) & 0x80000000) != 0) {
              goto LABEL_186;
            }
          }
          int v115 = v114;
LABEL_186:
          LODWORD(vre::DynamicArray<re::RigComponentConstraint>::deinit((uint64_t)this + 96) = v115;
        }
        while (v95 != v115);
      }
      uint64_t v116 = *(unsigned int *)(v9 + 344);
      if (v116)
      {
        uint64_t v117 = 0;
        uint64_t v118 = *(int **)(v9 + 328);
        while (1)
        {
          int v119 = *v118;
          v118 += 4;
          if (v119 < 0) {
            break;
          }
          if (v116 == ++v117)
          {
            LODWORD(v117) = *(_DWORD *)(v9 + 344);
            break;
          }
        }
      }
      else
      {
        LODWORD(v117) = 0;
      }
      if (v116 != v117)
      {
        uint64_t v120 = v117;
        do
        {
          unint64_t v121 = *(void *)(*(void *)(v9 + 328) + 16 * v120 + 8);
          re::HashSetBase<unsigned long,unsigned long,re::internal::ValueAsKey<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::remove(v9 + 312, v121);
          if (*(void *)(v1 + 240))
          {
            uint64_t v122 = *(void *)(v1 + 256);
            uint64_t v123 = *(unsigned int *)(*(void *)(v1 + 248) + 4 * (v121 % *(unsigned int *)(v1 + 264)));
            if (v123 != 0x7FFFFFFF)
            {
              while (*(void *)(v122 + 24 * v123 + 8) != v121)
              {
                uint64_t v123 = *(_DWORD *)(v122 + 24 * v123) & 0x7FFFFFFF;
                if (v123 == 0x7FFFFFFF) {
                  goto LABEL_201;
                }
              }
              goto LABEL_202;
            }
          }
          else
          {
            uint64_t v122 = *(void *)(v1 + 256);
          }
LABEL_201:
          LODWORD(v123) = 0x7FFFFFFF;
LABEL_202:
          unint64_t v124 = *(re **)(v122 + 24 * v123 + 16);
          if (!*(_DWORD *)v124 || (v125 = *(_DWORD *)v124 - 1, (*(_DWORD *)unint64_t v124 = v125) == 0))
          {
            re::internal::destroyPersistent<re::TechniqueResolutions<re::BufferResolution>>(v124);
            if (*(void *)(v1 + 240))
            {
              unint64_t v126 = v121 % *(unsigned int *)(v1 + 264);
              uint64_t v127 = *(void *)(v1 + 248);
              uint64_t v128 = *(unsigned int *)(v127 + 4 * v126);
              if (v128 != 0x7FFFFFFF)
              {
                uint64_t v129 = *(void *)(v1 + 256);
                if (*(void *)(v129 + 24 * v128 + 8) == v121)
                {
                  *(_DWORD *)(v127 + 4 * v126) = *(_DWORD *)(v129 + 24 * v128) & 0x7FFFFFFF;
LABEL_211:
                  uint64_t v131 = *(void *)(v1 + 256);
                  uint64_t v132 = (int *)(v131 + 24 * v128);
                  int v133 = *v132;
                  if (*v132 < 0)
                  {
                    *uint64_t v132 = v133 & 0x7FFFFFFF;
                    uint64_t v131 = *(void *)(v1 + 256);
                    int v133 = *(_DWORD *)(v131 + 24 * v128);
                  }
                  *(_DWORD *)(v131 + 24 * v128) = *(_DWORD *)(v1 + 276) | v133 & 0x80000000;
                  *(_DWORD *)(v1 + 276) = v128;
                  --*(_DWORD *)(v1 + 268);
                  ++*(_DWORD *)(v1 + 280);
                }
                else
                {
                  while (1)
                  {
                    uint64_t v130 = v128;
                    uint64_t v128 = *(_DWORD *)(v129 + 24 * v128) & 0x7FFFFFFF;
                    if (v128 == 0x7FFFFFFF) {
                      break;
                    }
                    if (*(void *)(v129 + 24 * v128 + 8) == v121)
                    {
                      *(_DWORD *)(v129 + 24 * v130) = *(_DWORD *)(v129 + 24 * v130) & 0x80000000 | *(_DWORD *)(v129 + 24 * v128) & 0x7FFFFFFF;
                      goto LABEL_211;
                    }
                  }
                }
              }
            }
          }
          if (*(_DWORD *)(v9 + 344) <= (v117 + 1)) {
            int v134 = v117 + 1;
          }
          else {
            int v134 = *(_DWORD *)(v9 + 344);
          }
          while (1)
          {
            uint64_t v120 = (v117 + 1);
            if (v134 - 1 == v117) {
              break;
            }
            LODWORD(v117) = v117 + 1;
            int v135 = v120;
            if ((*(_DWORD *)(*(void *)(v9 + 328) + 16 * v120) & 0x80000000) != 0) {
              goto LABEL_221;
            }
          }
          int v135 = v134;
LABEL_221:
          LODWORD(v117) = v135;
        }
        while (v116 != v135);
      }
      uint64_t v136 = *(unsigned int *)(v9 + 392);
      if (v136)
      {
        uint64_t v137 = 0;
        int v138 = *(int **)(v9 + 376);
        while (1)
        {
          int v139 = *v138;
          v138 += 4;
          if (v139 < 0) {
            break;
          }
          if (v136 == ++v137)
          {
            LODWORD(v137) = *(_DWORD *)(v9 + 392);
            break;
          }
        }
      }
      else
      {
        LODWORD(v137) = 0;
      }
      if (v136 != v137) {
        break;
      }
LABEL_257:
      uint64_t v4 = v192;
      int v158 = v5;
      if (*(_DWORD *)(v192 + 120) <= (v5 + 1)) {
        int v159 = v5 + 1;
      }
      else {
        int v159 = *(_DWORD *)(v192 + 120);
      }
      while (1)
      {
        uint64_t v8 = (v158 + 1);
        if (v159 - 1 == v158) {
          break;
        }
        ++v158;
        int v160 = v8;
        if ((*(_DWORD *)(*(void *)(v192 + 104) + 32 * v8 + 8) & 0x80000000) != 0) {
          goto LABEL_264;
        }
      }
      int v160 = v159;
LABEL_264:
      LODWORD(v5) = v160;
      if (v193 == v160) {
        goto LABEL_265;
      }
    }
    uint64_t v140 = v137;
    while (1)
    {
      unint64_t v141 = *(void *)(*(void *)(v9 + 376) + 16 * v140 + 8);
      unint64_t v142 = (re *)re::HashSetBase<unsigned long,unsigned long,re::internal::ValueAsKey<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::remove(v9 + 360, v141);
      if (*(void *)(v1 + 288))
      {
        uint64_t v143 = *(void *)(v1 + 304);
        uint64_t v144 = *(unsigned int *)(*(void *)(v1 + 296) + 4 * (v141 % *(unsigned int *)(v1 + 312)));
        if (v144 != 0x7FFFFFFF)
        {
          while (*(void *)(v143 + 24 * v144 + 8) != v141)
          {
            uint64_t v144 = *(_DWORD *)(v143 + 24 * v144) & 0x7FFFFFFF;
            if (v144 == 0x7FFFFFFF) {
              goto LABEL_236;
            }
          }
          goto LABEL_237;
        }
      }
      else
      {
        uint64_t v143 = *(void *)(v1 + 304);
      }
LABEL_236:
      LODWORD(v144) = 0x7FFFFFFF;
LABEL_237:
      char v145 = *(int **)(v143 + 24 * v144 + 16);
      if (!*v145 || (v146 = *v145 - 1, (*char v145 = v146) == 0))
      {
        uint64_t v147 = re::globalAllocators(v142)[2];
        re::DynamicArray<re::ArgumentBufferResolution>::deinit((uint64_t)(v145 + 12));
        re::DynamicArray<re::ArgumentBufferResolution>::deinit((uint64_t)(v145 + 2));
        (*(void (**)(uint64_t, int *))(*(void *)v147 + 40))(v147, v145);
        if (*(void *)(v1 + 288))
        {
          unint64_t v148 = v141 % *(unsigned int *)(v1 + 312);
          uint64_t v149 = *(void *)(v1 + 296);
          uint64_t v150 = *(unsigned int *)(v149 + 4 * v148);
          if (v150 != 0x7FFFFFFF)
          {
            uint64_t v151 = *(void *)(v1 + 304);
            if (*(void *)(v151 + 24 * v150 + 8) == v141)
            {
              *(_DWORD *)(v149 + 4 * v148) = *(_DWORD *)(v151 + 24 * v150) & 0x7FFFFFFF;
LABEL_246:
              uint64_t v153 = *(void *)(v1 + 304);
              char v154 = (int *)(v153 + 24 * v150);
              int v155 = *v154;
              if (*v154 < 0)
              {
                *char v154 = v155 & 0x7FFFFFFF;
                uint64_t v153 = *(void *)(v1 + 304);
                int v155 = *(_DWORD *)(v153 + 24 * v150);
              }
              *(_DWORD *)(v153 + 24 * v150) = *(_DWORD *)(v1 + 324) | v155 & 0x80000000;
              *(_DWORD *)(v1 + 324) = v150;
              --*(_DWORD *)(v1 + 316);
              ++*(_DWORD *)(v1 + 328);
            }
            else
            {
              while (1)
              {
                uint64_t v152 = v150;
                uint64_t v150 = *(_DWORD *)(v151 + 24 * v150) & 0x7FFFFFFF;
                if (v150 == 0x7FFFFFFF) {
                  break;
                }
                if (*(void *)(v151 + 24 * v150 + 8) == v141)
                {
                  *(_DWORD *)(v151 + 24 * v152) = *(_DWORD *)(v151 + 24 * v152) & 0x80000000 | *(_DWORD *)(v151 + 24 * v150) & 0x7FFFFFFF;
                  goto LABEL_246;
                }
              }
            }
          }
        }
      }
      if (*(_DWORD *)(v9 + 392) <= (v137 + 1)) {
        int v156 = v137 + 1;
      }
      else {
        int v156 = *(_DWORD *)(v9 + 392);
      }
      while (1)
      {
        uint64_t v140 = (v137 + 1);
        if (v156 - 1 == v137) {
          break;
        }
        LODWORD(v137) = v137 + 1;
        int v157 = v140;
        if ((*(_DWORD *)(*(void *)(v9 + 376) + 16 * v140) & 0x80000000) != 0) {
          goto LABEL_256;
        }
      }
      int v157 = v156;
LABEL_256:
      LODWORD(v137) = v157;
      if (v136 == v157) {
        goto LABEL_257;
      }
    }
  }
LABEL_266:
  if (*(void *)(v1 + 416))
  {
    unint64_t v161 = 0;
    do
    {
      id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(v1 + 432) + 8 * v161));
      if (WeakRetained)
      {

        ++v161;
        unint64_t v163 = *(void *)(v1 + 416);
      }
      else
      {
        unint64_t v164 = *(void *)(v1 + 416);
        if (v164 <= v161)
        {
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        uint64_t v165 = *(void *)(v1 + 432);
        if (v164 - 1 > v161)
        {
          uint64_t v166 = (id *)(v165 + 8 * v164 - 8);
          v167 = (id *)(v165 + 8 * v161);
          if (v166 != v167)
          {
            objc_destroyWeak((id *)(v165 + 8 * v161));
            id *v167 = 0;
            objc_moveWeak(v167, v166);
            unint64_t v164 = *(void *)(v1 + 416);
            uint64_t v165 = *(void *)(v1 + 432);
          }
        }
        uint64_t v168 = v165 + 8 * v164;
        objc_destroyWeak((id *)(v168 - 8));
        *(void *)(v168 - 8) = 0;
        unint64_t v163 = *(void *)(v1 + 416) - 1;
        *(void *)(v1 + 416) = v163;
        ++*(_DWORD *)(v1 + 424);
      }
    }
    while (v161 < v163);
  }
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 488));
  uint64_t v169 = *(unsigned int *)(v1 + 472);
  if (v169)
  {
    uint64_t v170 = 0;
    unint64_t v171 = *(int **)(v1 + 456);
    while (1)
    {
      int v172 = *v171;
      v171 += 6;
      if (v172 < 0) {
        break;
      }
      if (v169 == ++v170)
      {
        LODWORD(v170) = *(_DWORD *)(v1 + 472);
        break;
      }
    }
  }
  else
  {
    LODWORD(v170) = 0;
  }
  if (v169 != v170)
  {
    uint64_t v173 = v170;
    do
    {
      uint64_t v174 = *(void *)(v1 + 456) + 24 * v173 + 16;
      if (objc_isUniquelyReferenced())
      {
        if (*(void *)v174)
        {

          *(void *)uint64_t v174 = 0;
        }
        if (*(void *)(v1 + 440))
        {
          unint64_t v175 = *(void *)(v174 - 8);
          unint64_t v176 = v175 % *(unsigned int *)(v1 + 464);
          uint64_t v177 = *(void *)(v1 + 448);
          uint64_t v178 = *(unsigned int *)(v177 + 4 * v176);
          if (v178 != 0x7FFFFFFF)
          {
            uint64_t v179 = *(void *)(v1 + 456);
            if (*(void *)(v179 + 24 * v178 + 8) == v175)
            {
              *(_DWORD *)(v177 + 4 * v176) = *(_DWORD *)(v179 + 24 * v178) & 0x7FFFFFFF;
LABEL_294:
              uint64_t v181 = *(void *)(v1 + 456);
              uint64_t v182 = (_DWORD *)(v181 + 24 * v178);
              if ((*v182 & 0x80000000) != 0)
              {
                *v182 &= ~0x80000000;
                uint64_t v183 = v181 + 24 * v178;
                uint64_t v186 = *(void *)(v183 + 16);
                uint64_t v185 = (void *)(v183 + 16);
                uint64_t v184 = v186;
                if (v186)
                {

                  *uint64_t v185 = 0;
                }
              }
              *(_DWORD *)(*(void *)(v1 + 456) + 24 * v178) = *(_DWORD *)(*(void *)(v1 + 456)
                                                                                         + 24 * v178) & 0x80000000 | *(_DWORD *)(v1 + 476);
              *(_DWORD *)(v1 + 476) = v178;
              --*(_DWORD *)(v1 + 468);
              ++*(_DWORD *)(v1 + 480);
            }
            else
            {
              while (1)
              {
                uint64_t v180 = v178;
                uint64_t v178 = *(_DWORD *)(v179 + 24 * v178) & 0x7FFFFFFF;
                if (v178 == 0x7FFFFFFF) {
                  break;
                }
                if (*(void *)(v179 + 24 * v178 + 8) == v175)
                {
                  *(_DWORD *)(v179 + 24 * v180) = *(_DWORD *)(v179 + 24 * v180) & 0x80000000 | *(_DWORD *)(v179 + 24 * v178) & 0x7FFFFFFF;
                  goto LABEL_294;
                }
              }
            }
          }
        }
      }
      if (*(_DWORD *)(v1 + 472) <= (v170 + 1)) {
        int v187 = v170 + 1;
      }
      else {
        int v187 = *(_DWORD *)(v1 + 472);
      }
      while (1)
      {
        uint64_t v173 = (v170 + 1);
        if (v187 - 1 == v170) {
          break;
        }
        LODWORD(v170) = v170 + 1;
        int v188 = v173;
        if ((*(_DWORD *)(*(void *)(v1 + 456) + 24 * v173) & 0x80000000) != 0) {
          goto LABEL_305;
        }
      }
      int v188 = v187;
LABEL_305:
      LODWORD(v170) = v188;
    }
    while (v169 != v188);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 488));
}

void *re::internal::MoveOnlyCallable<re::MaterialManager::destroyMaterial(unsigned long,re::FixedArray<std::unique_ptr<re::MaterialTechnique,std::function<void ()(re::MaterialTechnique*)>>> &&)::$_0::operator()(void)::{lambda(void)#1},void ()(void)>::moveInto(void *a1, void *a2)
{
  uint64_t v2 = a1[1];
  *a2 = &unk_26E7108F0;
  a2[1] = v2;
  a2[3] = 0;
  a2[4] = 0;
  a2[2] = 0;
  uint64_t v3 = a1[3];
  a2[2] = a1[2];
  a2[3] = v3;
  a1[2] = 0;
  a1[3] = 0;
  uint64_t v4 = a2[4];
  a2[4] = a1[4];
  a1[4] = v4;
  a2[5] = a1[5];
  return a2;
}

uint64_t re::internal::MoveOnlyCallable<re::MaterialManager::destroyMaterial(unsigned long,re::FixedArray<std::unique_ptr<re::MaterialTechnique,std::function<void ()(re::MaterialTechnique*)>>> &&)::$_0::operator()(void)::{lambda(void)#1},void ()(void)>::size()
{
  return 48;
}

uint64_t re::HashSetBase<unsigned long,unsigned long,re::internal::ValueAsKey<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::remove(uint64_t result, unint64_t a2)
{
  unint64_t v2 = *(unsigned int *)(result + 24);
  if (v2)
  {
    unint64_t v3 = a2 % v2;
    uint64_t v4 = *(void *)(result + 8);
    uint64_t v5 = *(unsigned int *)(v4 + 4 * (a2 % v2));
    if (v5 != 0x7FFFFFFF)
    {
      uint64_t v6 = *(void *)(result + 16);
      if (*(void *)(v6 + 16 * v5 + 8) == a2)
      {
        *(_DWORD *)(v4 + 4 * v3) = *(_DWORD *)(v6 + 16 * v5) & 0x7FFFFFFF;
LABEL_8:
        uint64_t v8 = *(void *)(result + 16);
        uint64_t v9 = (int *)(v8 + 16 * v5);
        int v10 = *v9;
        if (*v9 < 0)
        {
          *uint64_t v9 = v10 & 0x7FFFFFFF;
          uint64_t v8 = *(void *)(result + 16);
          int v10 = *(_DWORD *)(v8 + 16 * v5);
        }
        int v11 = *(_DWORD *)(result + 40);
        *(_DWORD *)(v8 + 16 * v5) = *(_DWORD *)(result + 36) | v10 & 0x80000000;
        --*(_DWORD *)(result + 28);
        *(_DWORD *)(result + 36) = v5;
        *(_DWORD *)(result + 40) = v11 + 1;
      }
      else
      {
        while (1)
        {
          unsigned int v7 = v5;
          uint64_t v5 = *(_DWORD *)(v6 + 16 * v5) & 0x7FFFFFFF;
          if (v5 == 0x7FFFFFFF) {
            break;
          }
          if (*(void *)(v6 + 16 * v5 + 8) == a2)
          {
            *(_DWORD *)(v6 + 16 * v7) = *(_DWORD *)(v6 + 16 * v7) & 0x80000000 | *(_DWORD *)(v6 + 16 * v5) & 0x7FFFFFFF;
            goto LABEL_8;
          }
        }
      }
    }
  }
  return result;
}

uint64_t re::DynamicArray<re::ArgumentBufferResolution>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = 144 * v4;
        uint64_t v6 = v3 + 80;
        do
        {
          unsigned int v7 = *(void **)(v6 + 40);
          if (v7)
          {

            *(void *)(v6 + 40) = 0;
          }
          re::DynamicArray<re::ConstantResolution>::deinit(v6);
          re::DynamicArray<unsigned long>::deinit(v6 - 40);
          re::DynamicArray<unsigned long>::deinit(v6 - 80);
          v6 += 144;
          v5 -= 144;
        }
        while (v5);
        uint64_t result = *(void *)a1;
        uint64_t v3 = *(void *)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::DynamicArray<re::ConstantResolution>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = 112 * v4;
        uint64_t v6 = v3 + 56;
        do
        {
          re::DynamicArray<unsigned long>::deinit(v6);
          re::DynamicArray<unsigned long>::deinit(v6 - 48);
          v6 += 112;
          v5 -= 112;
        }
        while (v5);
        uint64_t result = *(void *)a1;
        uint64_t v3 = *(void *)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

void *re::DynamicArray<re::HashBrown<re::WeakStringID,re::ConstantLocation,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::ConstantLocation>,false>>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      uint64_t result = (void *)*result;
      if (!*v5)
      {
        uint64_t result = (void *)re::DynamicArray<re::HashBrown<re::WeakStringID,re::ConstantLocation,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::ConstantLocation>,false>>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (a2 >> 58)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 64, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          unint64_t v2 = a2 << 6;
          uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, a2 << 6, 8);
          if (result)
          {
            unsigned int v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        uint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      unsigned int v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = (uint64_t *)v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = v9 << 6;
        int v11 = v7;
        do
        {
          *((_OWORD *)v11 + 2) = 0u;
          *((_OWORD *)v11 + 3) = 0u;
          *(_OWORD *)int v11 = 0u;
          *((_OWORD *)v11 + 1) = 0u;
          re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::swap(v11, v8);
          re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::deinit((uint64_t)v8);
          v8 += 8;
          v11 += 8;
          v10 -= 64;
        }
        while (v10);
        uint64_t v8 = (uint64_t *)v5[4];
      }
      uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t *))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

_anonymous_namespace_ *re::DataArray<re::MaterialParameterBlock>::allocBlock(void *a1)
{
  uint64_t v3 = 1008 * *((unsigned int *)a1 + 11);
  uint64_t v4 = (*(uint64_t (**)(void, uint64_t, void))(*(void *)*a1 + 32))(*a1, v3, 0);
  if (!v4)
  {
    re::internal::assertLog((re::internal *)6, v5, "assertion failure: '%s' (%s:line %i) DataArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "block.elements", "allocBlock", 520, v3, *(void *)(*a1 + 8));
    _os_crash();
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v6 = v4;
  uint64_t v1 = 4 * *((unsigned int *)a1 + 11);
  uint64_t result = (_anonymous_namespace_ *)(*(uint64_t (**)(void, uint64_t, void))(*(void *)*a1 + 32))(*a1, v1, 0);
  if (!result)
  {
LABEL_16:
    re::internal::assertLog((re::internal *)6, v8, "assertion failure: '%s' (%s:line %i) DataArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "block.allocationCounters", "allocBlock", 528, v1, *(void *)(*a1 + 8));
    uint64_t result = (_anonymous_namespace_ *)_os_crash();
    __break(1u);
    return result;
  }
  uint64_t v9 = result;
  unint64_t v11 = a1[1];
  unint64_t v10 = a1[2];
  if (v10 >= v11)
  {
    unint64_t v12 = v10 + 1;
    if (v11 < v10 + 1)
    {
      if (*a1)
      {
        unint64_t v13 = 2 * v11;
        if (!v11) {
          unint64_t v13 = 8;
        }
        if (v13 <= v12) {
          unint64_t v14 = v12;
        }
        else {
          unint64_t v14 = v13;
        }
        uint64_t result = (_anonymous_namespace_ *)re::DynamicArray<re::RigNodeConstraint>::setCapacity(a1, v14);
      }
      else
      {
        uint64_t result = (_anonymous_namespace_ *)re::DynamicArray<re::RigNodeConstraint>::setCapacity(a1, v12);
        ++*((_DWORD *)a1 + 6);
      }
    }
    unint64_t v10 = a1[2];
  }
  uint64_t v15 = (uint64_t *)(a1[4] + 16 * v10);
  *uint64_t v15 = v6;
  v15[1] = (uint64_t)v9;
  a1[2] = v10 + 1;
  ++*((_DWORD *)a1 + 6);
  *((_DWORD *)a1 + 12) = 0;
  return result;
}

void re::HashBrown<unsigned long,re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::resize(long long *a1)
{
  unint64_t v3 = *((void *)a1 + 2);
  uint64_t v2 = *((void *)a1 + 3);
  unint64_t v4 = (((unint64_t)(151 * (v2 + 1)) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  unint64_t v5 = ((3 * v3) >> 1) & 0x1FFFFFFFFFFFFFFLL;
  if (v4 > (192 * v3) >> 7) {
    unint64_t v5 = (((unint64_t)(151 * (v2 + 1)) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  }
  unint64_t v6 = (v5 << 7) / 0x97;
  uint64_t v7 = *((void *)a1 + 7);
  long long v64 = 0u;
  *(_OWORD *)uint64_t v65 = 0u;
  if (v4 <= v3) {
    uint64_t v8 = v2 + 1;
  }
  else {
    uint64_t v8 = v6;
  }
  memset(&v65[16], 0, 32);
  uint64_t v9 = (_anonymous_namespace_ *)re::HashBrown<unsigned long,re::HashBrown<unsigned long,unsigned short,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::init(&v64, v7, v8);
  unint64_t v10 = *((void *)a1 + 2);
  if (v10 >= 0x10)
  {
    uint64_t v11 = 0;
    unint64_t v12 = v10 >> 4;
    int8x16_t v13 = (int8x16_t)xmmword_2343680E0;
    while (1)
    {
      unsigned __int16 v14 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*(void *)a1 + v11)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800).u16[0];
      unint64_t v15 = (unsigned __int16)~v14;
      if (v14 != 0xFFFF) {
        break;
      }
      v11 += 16;
      if (!--v12) {
        goto LABEL_12;
      }
    }
    unint64_t v16 = __clz(__rbit64(v15)) + v11;
    while (v16 != -1)
    {
      uint64_t v23 = *((void *)a1 + 1);
      if (!*(void *)&v65[40])
      {
        int8x16_t v13 = (int8x16_t)xmmword_2343680E0;
      }
      if (!*(void *)&v65[16]
        || (unint64_t v24 = *(void *)v65, *(void *)v65 > (unint64_t)(8 * *(void *)&v65[16])))
      {
        re::HashBrown<unsigned long,re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::resize(&v64);
        int8x16_t v13 = (int8x16_t)xmmword_2343680E0;
        unint64_t v24 = *(void *)v65;
      }
      uint64_t v25 = (uint64_t *)(v23 + 72 * v16);
      unint64_t v26 = 0xBF58476D1CE4E5B9 * (*v25 ^ ((unint64_t)*v25 >> 30));
      unint64_t v27 = (0x94D049BB133111EBLL * (v26 ^ (v26 >> 27))) ^ ((0x94D049BB133111EBLL * (v26 ^ (v26 >> 27))) >> 31);
      unint64_t v28 = v24 >> 4;
      unint64_t v29 = v27 % (v24 >> 4);
      unint64_t v30 = __clz(__rbit64(*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v64 + 16 * v29)), v13)))), (int8x8_t)0x3830282018100800)));
      if (v30 >= 0x40)
      {
        do
        {
          if (v29 + 1 == v28) {
            unint64_t v29 = 0;
          }
          else {
            ++v29;
          }
          unint64_t v30 = __clz(__rbit64(*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v64 + 16 * v29)), v13)))), (int8x8_t)0x3830282018100800)));
        }
        while (v30 > 0x3F);
      }
      int v31 = v25 + 1;
      uint64_t v32 = v64 + 16 * v29;
      char v33 = v27 & 0x7F;
      int v34 = *(unsigned __int8 *)(v32 + v30);
      *(unsigned char *)(v32 + v30) = v33;
      unint64_t v35 = v30 + 16 * v29;
      uint64_t v66 = *v25;
      uint64_t v36 = v66;
      unint64_t v37 = (void *)(v23 + 72 * v16);
      uint64_t v38 = v37[8];
      uint64_t v74 = v38;
      v37[8] = 0;
      uint64_t v39 = *v31;
      uint64_t v67 = *v31;
      *int v31 = 0;
      uint64_t v40 = v37[2];
      uint64_t v68 = v40;
      v37[2] = 0;
      uint64_t v41 = v37[3];
      uint64_t v69 = v41;
      v37[3] = 0;
      uint64_t v42 = v37[6];
      uint64_t v72 = v42;
      v37[6] = 0;
      uint64_t v43 = v37[7];
      uint64_t v73 = v43;
      v37[7] = 0;
      uint64_t v44 = v37[4];
      uint64_t v70 = v44;
      v37[4] = 0;
      uint64_t v45 = v37[5];
      uint64_t v71 = v45;
      v37[5] = 0;
      uint64_t v46 = *((void *)&v64 + 1);
      uint64_t v47 = (uint64_t *)(*((void *)&v64 + 1) + 72 * v35);
      *uint64_t v47 = v36;
      if (v47 != &v66)
      {
        int v48 = (void *)(v46 + 72 * v35);
        uint64_t v49 = v48[8];
        v48[8] = v38;
        uint64_t v74 = v49;
        uint64_t v50 = v48[1];
        v48[1] = v39;
        uint64_t v67 = v50;
        uint64_t v51 = v48[2];
        v48[2] = v40;
        uint64_t v68 = v51;
        uint64_t v52 = v48[3];
        v48[3] = v41;
        uint64_t v69 = v52;
        uint64_t v53 = v48[6];
        v48[6] = v42;
        uint64_t v72 = v53;
        uint64_t v54 = v48[7];
        v48[7] = v43;
        uint64_t v73 = v54;
        uint64_t v55 = v48[4];
        v48[4] = v44;
        uint64_t v70 = v55;
        uint64_t v56 = v48[5];
        v48[5] = v45;
        uint64_t v71 = v56;
      }
      uint64_t v57 = v34 == 255;
      re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::deinit((uint64_t)&v67);
      ++*(void *)&v65[8];
      *(void *)&v65[16] -= v57;
      unint64_t v58 = 0xBF58476D1CE4E5B9
          * (*(void *)(*((void *)&v64 + 1) + 72 * v35) ^ (*(void *)(*((void *)&v64 + 1) + 72 * v35) >> 30));
      *(void *)&v65[24] ^= ((0x94D049BB133111EBLL * (v58 ^ (v58 >> 27))) >> 31) ^ (0x94D049BB133111EBLL
                                                                                   * (v58 ^ (v58 >> 27)));
      unint64_t v59 = v16 >> 4;
      unint64_t v10 = *((void *)a1 + 2);
      if (v16 >> 4 >= v10 >> 4) {
        break;
      }
      unint64_t v60 = __clz(__rbit64((-2 << (v16 & 0xF)) & v15));
      int8x16_t v13 = (int8x16_t)xmmword_2343680E0;
      if (v60 >= 0x40)
      {
        uint64_t v61 = 16 * v59;
        unint64_t v62 = ~v59 + (v10 >> 4);
        while (v62)
        {
          unint64_t v15 = (unsigned __int16)~*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*(void *)a1 + v61 + 16)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800);
          unint64_t v63 = __clz(__rbit64(v15));
          v61 += 16;
          --v62;
          if (v63 <= 0x3F)
          {
            unint64_t v16 = v63 + v61;
            goto LABEL_27;
          }
        }
        break;
      }
      unint64_t v16 = v60 + (v16 & 0xFFFFFFFFFFFFFFF0);
LABEL_27:
      ;
    }
  }
LABEL_12:
  uint64_t v17 = *(void *)&v65[40];
  *(void *)&v65[40] = *((void *)a1 + 7);
  long long v18 = v64;
  long long v19 = *(_OWORD *)v65;
  long long v64 = *a1;
  *(void *)uint64_t v65 = v10;
  long long v20 = *(_OWORD *)&v65[16];
  long long v21 = *(long long *)((char *)a1 + 40);
  *((void *)a1 + 6) = *(void *)&v65[32];
  *((void *)a1 + 7) = v17;
  *(_OWORD *)&v65[24] = v21;
  long long v22 = *(long long *)((char *)a1 + 24);
  *a1 = v18;
  a1[1] = v19;
  a1[2] = v20;
  *(_OWORD *)&v65[8] = v22;
  re::HashBrown<unsigned long,re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::deinit((uint64_t)&v64);
}

void *re::TextureTableImpl<NS::SharedPtr<MTL::Texture>>::~TextureTableImpl(void *a1)
{
  *a1 = &unk_26E7109B0;
  uint64_t v2 = (uint64_t)(a1 + 1);
  uint64_t v3 = (uint64_t)(a1 + 9);
  re::DynamicArray<re::TextureViews<NS::SharedPtr<MTL::Texture>>>::deinit((uint64_t)(a1 + 9));
  re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::deinit(v2);
  re::DynamicArray<re::TextureViews<NS::SharedPtr<MTL::Texture>>>::deinit(v3);
  re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::deinit(v2);
  return a1;
}

uint64_t re::DynamicArray<re::TextureViews<NS::SharedPtr<MTL::Texture>>>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = 32 * v4;
        unint64_t v6 = (id *)(v3 + 16);
        do
        {
          if (*((unsigned char *)v6 - 8) && *v6)
          {

            *unint64_t v6 = 0;
          }
          uint64_t v7 = *(v6 - 2);
          if (v7)
          {

            *(v6 - 2) = 0;
          }
          v6 += 4;
          v5 -= 32;
        }
        while (v5);
        uint64_t result = *(void *)a1;
        uint64_t v3 = *(void *)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

double re::DataArray<re::MaterialParameterBlock>::clear(void *a1)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)v12, (uint64_t)a1, 0);
  if (*(void **)&v12[0] != a1 || WORD4(v12[0]) != 0xFFFFLL || (DWORD2(v12[0]) & 0xFFFF0000) != 4294901760)
  {
    do
    {
      unint64_t v4 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)v12);
      re::DataArray<re::MaterialParameterBlock>::destroy((uint64_t)a1, v4);
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(v12);
    }
    while (*(void **)&v12[0] != a1 || WORD4(v12[0]) != 0xFFFF || WORD5(v12[0]) != 0xFFFF);
  }
  uint64_t v7 = a1[2];
  unint64_t v8 = v7 - 1;
  if (v7 != 1)
  {
    uint64_t v9 = 16 * v7;
    do
    {
      if (a1[2] <= v8)
      {
        memset(v12, 0, sizeof(v12));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      uint64_t v10 = a1[4] + v9;
      (*(void (**)(void, void))(*(void *)*a1 + 40))(*a1, *(void *)(v10 - 16));
      (*(void (**)(void, void))(*(void *)*a1 + 40))(*a1, *(void *)(v10 - 8));
      re::DynamicArray<re::DataArray<re::RigGraphOperatorDefinition>::ElementBlock>::removeAt((uint64_t)a1, v8);
      v9 -= 16;
      --v8;
    }
    while (v8);
  }
  double result = NAN;
  a1[6] = 0xFFFFFFFF00000000;
  return result;
}

uint64_t re::HashTable<unsigned long,re::TextureTable *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addEmplace<re::TextureTable *&>(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, void *a5)
{
  uint64_t v8 = *(unsigned int *)(a1 + 36);
  if (v8 == 0x7FFFFFFF)
  {
    uint64_t v8 = *(unsigned int *)(a1 + 32);
    int v9 = v8;
    if (v8 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned long,re::TextureTable *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v9 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = v9 + 1;
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 24 * v8);
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 24 * v8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  uint64_t v13 = 24 * v8;
  *(_DWORD *)(v11 + v13) = v12 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + v13) = *(_DWORD *)(*(void *)(a1 + 16) + 24 * v8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 24 * v8 + 8) = *a4;
  *(void *)(*(void *)(a1 + 16) + 24 * v8 + 16) = *a5;
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v8;
  ++*(_DWORD *)(a1 + 28);
  return v8;
}

void re::HashTable<unsigned long,re::TextureTable *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v24, 0, 36);
      *(void *)&v24[36] = 0x7FFFFFFFLL;
      re::HashTable<unsigned long,re::TextureTable *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::init((uint64_t)v24, v4, a2);
      long long v5 = *(_OWORD *)a1;
      *(void *)a1 = *(void *)v24;
      uint64_t v6 = *(void *)(a1 + 16);
      long long v7 = *(_OWORD *)&v24[8];
      *(_OWORD *)unint64_t v24 = v5;
      *(void *)&v24[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      long long v9 = *(_OWORD *)&v24[24];
      *(_OWORD *)&v24[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v24[32];
      *(_OWORD *)(a1 + 24) = v9;
      unint64_t v10 = v8;
      if (v8)
      {
        unint64_t v11 = 0;
        int v12 = DWORD1(v9);
        uint64_t v13 = v7;
        unsigned __int16 v14 = (unint64_t *)(v6 + 8);
        do
        {
          if ((*(_DWORD *)(v14 - 1) & 0x80000000) != 0)
          {
            unint64_t v15 = *v14;
            unint64_t v16 = *(unsigned int *)(a1 + 24);
            unint64_t v17 = *v14 % v16;
            uint64_t v18 = *(unsigned int *)(a1 + 36);
            if (v18 == 0x7FFFFFFF)
            {
              uint64_t v18 = *(unsigned int *)(a1 + 32);
              int v19 = v18;
              if (v18 == v16)
              {
                re::HashTable<unsigned long,re::TextureTable *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(a1, (2 * v12));
                unint64_t v17 = v15 % *(unsigned int *)(a1 + 24);
                int v19 = *(_DWORD *)(a1 + 32);
                uint64_t v13 = *(void *)(a1 + 8);
                unint64_t v15 = *v14;
              }
              *(_DWORD *)(a1 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = v19 + 1;
              uint64_t v20 = *(void *)(a1 + 16);
              int v21 = *(_DWORD *)(v20 + 24 * v18);
            }
            else
            {
              uint64_t v20 = *(void *)(a1 + 16);
              int v21 = *(_DWORD *)(v20 + 24 * v18);
              *(_DWORD *)(a1 + 36) = v21 & 0x7FFFFFFF;
            }
            uint64_t v22 = 24 * v18;
            *(_DWORD *)(v20 + v22) = v21 | 0x80000000;
            *(_DWORD *)(*(void *)(a1 + 16) + v22) = *(_DWORD *)(*(void *)(a1 + 16) + 24 * v18) & 0x80000000 | *(_DWORD *)(v13 + 4 * v17);
            *(void *)(*(void *)(a1 + 16) + 24 * v18 + 8) = v15;
            *(void *)(*(void *)(a1 + 16) + 24 * v18 + 16) = v14[1];
            uint64_t v13 = *(void *)(a1 + 8);
            *(_DWORD *)(v13 + 4 * v17) = v18;
            int v12 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v12;
          }
          ++v11;
          v14 += 3;
        }
        while (v11 < v10);
      }
      re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit((uint64_t *)v24);
    }
  }
  else
  {
    if (a2) {
      signed int v23 = a2;
    }
    else {
      signed int v23 = 3;
    }
  }
}

void re::HashTable<unsigned long,re::TextureTable *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  long long v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    long long v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    unsigned int v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      long long v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  int v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + 24 * v10, 16);
  if (v12)
  {
    unsigned __int16 v14 = v12;
    *(void *)(a1 + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &memset_pattern_266, 4 * v10);
    }
    *(void *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

void *re::DynamicArray<re::MaterialManager::PerSceneTables>::setCapacity(void *result, unint64_t a2)
{
  if (result[1] == a2) {
    return result;
  }
  unint64_t v4 = result;
  if (result[2] > a2) {
    return result;
  }
  uint64_t v5 = *result;
  if (!*v4)
  {
    double result = (void *)re::DynamicArray<re::MaterialManager::PerSceneTables>::setCapacity(v4, a2);
    ++*((_DWORD *)v4 + 6);
    return result;
  }
  if (a2 >> 58)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 64, a2);
    _os_crash();
    __break(1u);
    goto LABEL_12;
  }
  unint64_t v2 = a2 << 6;
  double result = (void *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)v5 + 32))(v5, a2 << 6, 16);
  if (!result)
  {
LABEL_12:
    re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v4 + 8));
    double result = (void *)_os_crash();
    __break(1u);
    return result;
  }
  long long v7 = result;
  if (v4[1])
  {
    memcpy(result, (const void *)v4[4], v4[2] << 6);
    double result = (void *)(*(uint64_t (**)(void, void))(*(void *)*v4 + 40))(*v4, v4[4]);
  }
  unsigned char v4[4] = v7;
  v4[1] = a2;
  return result;
}

uint64_t re::HashTable<unsigned long,re::SharedPtr<re::MaterialPipelineData>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addAsCopy(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, uint64_t *a5)
{
  uint64_t v8 = *(unsigned int *)(a1 + 36);
  if (v8 == 0x7FFFFFFF)
  {
    uint64_t v8 = *(unsigned int *)(a1 + 32);
    int v9 = v8;
    if (v8 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned long,re::SharedPtr<re::MaterialPipelineData>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v9 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = v9 + 1;
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 24 * v8);
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 24 * v8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  uint64_t v13 = 24 * v8;
  *(_DWORD *)(v11 + v13) = v12 | 0x80000000;
  uint64_t v14 = a2;
  uint64_t v15 = *(void *)(a1 + 8);
  *(_DWORD *)(*(void *)(a1 + 16) + v13) = *(_DWORD *)(*(void *)(a1 + 16) + 24 * v8) & 0x80000000 | *(_DWORD *)(v15 + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 24 * v8 + 8) = *a4;
  uint64_t v16 = *a5;
  *(void *)(*(void *)(a1 + 16) + 24 * v8 + 16) = *a5;
  if (v16)
  {
    id v17 = (id)(v16 + 8);
    uint64_t v15 = *(void *)(a1 + 8);
  }
  *(_DWORD *)(v15 + 4 * v14) = v8;
  ++*(_DWORD *)(a1 + 28);
  return v8;
}

void re::HashTable<unsigned long,re::SharedPtr<re::MaterialPipelineData>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v24, 0, 36);
      *(void *)&v24[36] = 0x7FFFFFFFLL;
      re::HashTable<unsigned long,re::TextureTable *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::init((uint64_t)v24, v4, a2);
      long long v5 = *(_OWORD *)a1;
      *(void *)a1 = *(void *)v24;
      uint64_t v6 = *(void *)(a1 + 16);
      long long v7 = *(_OWORD *)&v24[8];
      *(_OWORD *)unint64_t v24 = v5;
      *(void *)&v24[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      long long v9 = *(_OWORD *)&v24[24];
      *(_OWORD *)&v24[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v24[32];
      *(_OWORD *)(a1 + 24) = v9;
      unsigned int v10 = v8;
      if (v8)
      {
        unint64_t v11 = 0;
        uint64_t v12 = v7;
        int v13 = DWORD1(v9);
        uint64_t v14 = (void *)(v6 + 16);
        do
        {
          if ((*(_DWORD *)(v14 - 2) & 0x80000000) != 0)
          {
            unint64_t v15 = *(v14 - 1);
            unint64_t v16 = *(unsigned int *)(a1 + 24);
            unint64_t v17 = v15 % v16;
            uint64_t v18 = *(unsigned int *)(a1 + 36);
            if (v18 == 0x7FFFFFFF)
            {
              uint64_t v18 = *(unsigned int *)(a1 + 32);
              int v19 = v18;
              if (v18 == v16)
              {
                re::HashTable<unsigned long,re::SharedPtr<re::MaterialPipelineData>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(a1, (2 * v13));
                unint64_t v17 = v15 % *(unsigned int *)(a1 + 24);
                int v19 = *(_DWORD *)(a1 + 32);
                uint64_t v12 = *(void *)(a1 + 8);
                unint64_t v15 = *(v14 - 1);
              }
              *(_DWORD *)(a1 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = v19 + 1;
              uint64_t v20 = *(void *)(a1 + 16);
              int v21 = *(_DWORD *)(v20 + 24 * v18);
            }
            else
            {
              uint64_t v20 = *(void *)(a1 + 16);
              int v21 = *(_DWORD *)(v20 + 24 * v18);
              *(_DWORD *)(a1 + 36) = v21 & 0x7FFFFFFF;
            }
            uint64_t v22 = 24 * v18;
            *(_DWORD *)(v20 + v22) = v21 | 0x80000000;
            *(_DWORD *)(*(void *)(a1 + 16) + v22) = *(_DWORD *)(*(void *)(a1 + 16) + 24 * v18) & 0x80000000 | *(_DWORD *)(v12 + 4 * v17);
            *(void *)(*(void *)(a1 + 16) + 24 * v18 + 8) = v15;
            *(void *)(*(void *)(a1 + 16) + 24 * v18 + 16) = *v14;
            *uint64_t v14 = 0;
            *(_DWORD *)(v12 + 4 * v17) = v18;
            int v13 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v13;
            unsigned int v10 = *(_DWORD *)&v24[32];
          }
          ++v11;
          v14 += 3;
        }
        while (v11 < v10);
      }
      re::HashTable<unsigned long,re::SharedPtr<re::MaterialParameterTable>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::deinit((uint64_t *)v24);
    }
  }
  else
  {
    if (a2) {
      signed int v23 = a2;
    }
    else {
      signed int v23 = 3;
    }
  }
}

uint64_t re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addInternal<char const*>(uint64_t a1, re::DynamicString *a2, int a3, const char **a4)
{
  unint64_t v8 = re::Hash<re::DynamicString>::operator()((uint64_t)&v19, (uint64_t)a2);
  unint64_t v9 = v8;
  if (!*(void *)a1)
  {
    LODWORD(v10) = 0;
    goto LABEL_8;
  }
  unint64_t v10 = v8 % *(unsigned int *)(a1 + 24);
  uint64_t v11 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v10);
  if (v11 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v13 = re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addEmplace<char const*&>(a1, v10, v9, a2, a4);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v14 = *(void *)(a1 + 16) + 80 * v13;
    return v14 + 48;
  }
  uint64_t v12 = *(void *)(a1 + 16);
  while (!re::DynamicString::operator==(v12 + 80 * v11 + 16, (uint64_t)a2))
  {
    uint64_t v11 = *(_DWORD *)(v12 + 80 * v11 + 8) & 0x7FFFFFFF;
    if (v11 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  switch(a3)
  {
    case 0:
    case 1:
      uint64_t v14 = v12 + 80 * v11;
      break;
    case 2:
    case 3:
      re::DynamicString::deinit((re::DynamicString *)(v12 + 80 * v11 + 48));
      unint64_t v16 = (re::DynamicString *)(*(void *)(a1 + 16) + 80 * v11 + 48);
      unint64_t v17 = *a4;
      ++*(_DWORD *)(a1 + 40);
      uint64_t v14 = *(void *)(a1 + 16) + 80 * v11;
      break;
    default:
      goto LABEL_8;
  }
  return v14 + 48;
}

uint64_t re::HashTable<unsigned long long,re::DataArrayHandle<re::MaterialParameterBlock>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addEmplace<re::DataArrayHandle<re::MaterialParameterBlock>&>(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, void *a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned long long,re::DataArrayHandle<re::MaterialParameterBlock>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = v10 + 1;
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 32 * v9 + 8);
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 32 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v11 + 32 * v9 + 8) = v12 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + 32 * v9 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 32 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 32 * v9) = a3;
  *(void *)(*(void *)(a1 + 16) + 32 * v9 + 16) = *a4;
  *(void *)(*(void *)(a1 + 16) + 32 * v9 + 24) = *a5;
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<unsigned long long,re::DataArrayHandle<re::MaterialParameterBlock>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v23, 0, 36);
      *(void *)&v23[36] = 0x7FFFFFFFLL;
      re::HashTable<unsigned long long,re::DataArrayHandle<re::MaterialParameterBlock>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v23, v4, a2);
      long long v5 = *(_OWORD *)a1;
      *(void *)a1 = *(void *)v23;
      uint64_t v6 = *(void *)(a1 + 16);
      long long v7 = *(_OWORD *)&v23[8];
      *(_OWORD *)signed int v23 = v5;
      *(void *)&v23[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      long long v9 = *(_OWORD *)&v23[24];
      *(_OWORD *)&v23[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v23[32];
      *(_OWORD *)(a1 + 24) = v9;
      unint64_t v10 = v8;
      if (v8)
      {
        unint64_t v11 = 0;
        int v12 = DWORD1(v9);
        uint64_t v13 = v7;
        uint64_t v14 = (void *)(v6 + 16);
        do
        {
          if ((*(_DWORD *)(v14 - 1) & 0x80000000) != 0)
          {
            unint64_t v15 = *(v14 - 2);
            unint64_t v16 = *(unsigned int *)(a1 + 24);
            unint64_t v17 = v15 % v16;
            uint64_t v18 = *(unsigned int *)(a1 + 36);
            if (v18 == 0x7FFFFFFF)
            {
              uint64_t v18 = *(unsigned int *)(a1 + 32);
              int v19 = v18;
              if (v18 == v16)
              {
                re::HashTable<unsigned long long,re::DataArrayHandle<re::MaterialParameterBlock>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(a1, (2 * v12));
                unint64_t v17 = v15 % *(unsigned int *)(a1 + 24);
                int v19 = *(_DWORD *)(a1 + 32);
                uint64_t v13 = *(void *)(a1 + 8);
              }
              *(_DWORD *)(a1 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = v19 + 1;
              uint64_t v20 = *(void *)(a1 + 16);
              int v21 = *(_DWORD *)(v20 + 32 * v18 + 8);
            }
            else
            {
              uint64_t v20 = *(void *)(a1 + 16);
              int v21 = *(_DWORD *)(v20 + 32 * v18 + 8);
              *(_DWORD *)(a1 + 36) = v21 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v20 + 32 * v18 + 8) = v21 | 0x80000000;
            *(_DWORD *)(*(void *)(a1 + 16) + 32 * v18 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 32 * v18 + 8) & 0x80000000 | *(_DWORD *)(v13 + 4 * v17);
            *(void *)(*(void *)(a1 + 16) + 32 * v18) = v15;
            *(void *)(*(void *)(a1 + 16) + 32 * v18 + 16) = *v14;
            *(void *)(*(void *)(a1 + 16) + 32 * v18 + 24) = v14[1];
            uint64_t v13 = *(void *)(a1 + 8);
            *(_DWORD *)(v13 + 4 * v17) = v18;
            int v12 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v12;
          }
          ++v11;
          v14 += 4;
        }
        while (v11 < v10);
      }
      re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)v23);
    }
  }
  else
  {
    if (a2) {
      signed int v22 = a2;
    }
    else {
      signed int v22 = 3;
    }
  }
}

void re::HashTable<unsigned long long,re::DataArrayHandle<re::MaterialParameterBlock>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  long long v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    long long v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    unsigned int v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      long long v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  int v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + 32 * v10, 16);
  if (v12)
  {
    uint64_t v14 = v12;
    *(void *)(a1 + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &memset_pattern_266, 4 * v10);
    }
    *(void *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

void re::HashTable<re::StringID,re::ShaderFunctionMetadata,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 28))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 24);
    if (v2) {
      memset_pattern16(*(void **)(a1 + 8), &memset_pattern_266, 4 * v2);
    }
    unint64_t v3 = *(unsigned int *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = 0;
      for (unint64_t i = 0; i < v3; ++i)
      {
        uint64_t v6 = *(void *)(a1 + 16);
        int v7 = *(_DWORD *)(v6 + v4);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + v4) = v7 & 0x7FFFFFFF;
          re::StringID::destroyString((re::StringID *)(v6 + v4 + 8));
          unint64_t v3 = *(unsigned int *)(a1 + 32);
        }
        v4 += 32;
      }
    }
    *(_DWORD *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0;
    int v8 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v8;
  }
}

void re::HashTable<re::StringID,re::ShaderFunctionMetadata,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::copy(uint64_t a1, uint64_t a2)
{
  re::HashTable<re::StringID,re::ShaderFunctionMetadata,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(a1);
  unsigned int v4 = *(_DWORD *)(a2 + 28);
  if (*(_DWORD *)(a1 + 24) < v4) {
    re::HashTable<re::StringID,re::ShaderFunctionMetadata,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1, v4);
  }
  unint64_t v5 = *(unsigned int *)(a2 + 32);
  if (v5)
  {
    uint64_t v6 = 0;
    for (unint64_t i = 0; i < v5; ++i)
    {
      uint64_t v8 = *(void *)(a2 + 16);
      if ((*(_DWORD *)(v8 + v6) & 0x80000000) != 0)
      {
        unint64_t v9 = 0xBF58476D1CE4E5B9 * ((*(void *)(v8 + v6 + 8) >> 31) ^ (*(void *)(v8 + v6 + 8) >> 1));
        unint64_t v10 = (0x94D049BB133111EBLL * (v9 ^ (v9 >> 27))) ^ ((0x94D049BB133111EBLL * (v9 ^ (v9 >> 27))) >> 31);
        re::HashTable<re::StringID,re::ShaderFunctionMetadata,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(a1, v10 % *(unsigned int *)(a1 + 24), v10, (StringID *)(v8 + v6 + 8), (unsigned char *)(v8 + v6 + 24));
        unint64_t v5 = *(unsigned int *)(a2 + 32);
      }
      v6 += 32;
    }
  }
}

uint64_t re::HashSetBase<re::UnresolvedArgumentBufferEntry,re::UnresolvedArgumentBufferEntry,re::internal::ValueAsKey<re::UnresolvedArgumentBufferEntry>,re::Hash<re::UnresolvedArgumentBufferEntry>,re::EqualTo<re::UnresolvedArgumentBufferEntry>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = *(unsigned int *)(a1 + 36);
  if (v8 == 0x7FFFFFFF)
  {
    uint64_t v8 = *(unsigned int *)(a1 + 32);
    int v9 = v8;
    if (v8 == *(_DWORD *)(a1 + 24))
    {
      int v10 = *(_DWORD *)(a1 + 28);
      signed int v11 = 2 * v10;
      uint64_t v12 = *(void *)a1;
      if (*(void *)a1)
      {
        if (v11) {
          BOOL v13 = v8 == v11;
        }
        else {
          BOOL v13 = 1;
        }
        if (!v13 && (v10 & 0x80000000) == 0)
        {
          memset(v28, 0, 36);
          *(void *)&v28[36] = 0x7FFFFFFFLL;
          re::HashSetBase<re::UnresolvedArgumentBufferEntry,re::UnresolvedArgumentBufferEntry,re::internal::ValueAsKey<re::UnresolvedArgumentBufferEntry>,re::Hash<re::UnresolvedArgumentBufferEntry>,re::EqualTo<re::UnresolvedArgumentBufferEntry>,true,false>::init((uint64_t)v28, v12, v11);
          long long v14 = *(_OWORD *)v28;
          *(_OWORD *)unint64_t v28 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v14;
          uint64_t v15 = *(void *)&v28[16];
          uint64_t v16 = *(void *)(a1 + 16);
          *(void *)&v28[16] = v16;
          *(void *)(a1 + 16) = v15;
          long long v18 = *(_OWORD *)&v28[24];
          *(_OWORD *)&v28[24] = *(_OWORD *)(a1 + 24);
          unsigned int v17 = *(_DWORD *)&v28[32];
          *(_OWORD *)(a1 + 24) = v18;
          unint64_t v19 = v17;
          if (v17)
          {
            unint64_t v20 = 0;
            uint64_t v21 = v16 + 16;
            do
            {
              if ((*(_DWORD *)(v21 - 8) & 0x80000000) != 0) {
                re::HashSetBase<re::UnresolvedArgumentBufferEntry,re::UnresolvedArgumentBufferEntry,re::internal::ValueAsKey<re::UnresolvedArgumentBufferEntry>,re::Hash<re::UnresolvedArgumentBufferEntry>,re::EqualTo<re::UnresolvedArgumentBufferEntry>,true,false>::addAsMove(a1, *(void *)(v21 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(v21 - 16), v21, v21);
              }
              ++v20;
              v21 += 56;
            }
            while (v20 < v19);
          }
          re::HashSetBase<re::UnresolvedArgumentBufferEntry,re::UnresolvedArgumentBufferEntry,re::internal::ValueAsKey<re::UnresolvedArgumentBufferEntry>,re::Hash<re::UnresolvedArgumentBufferEntry>,re::EqualTo<re::UnresolvedArgumentBufferEntry>,true,false>::deinit((uint64_t *)v28);
        }
      }
      else
      {
        if (v11) {
          signed int v24 = v11;
        }
        else {
          signed int v24 = 3;
        }
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v9 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = v9 + 1;
    uint64_t v22 = *(void *)(a1 + 16);
    int v23 = *(_DWORD *)(v22 + 56 * v8 + 8);
  }
  else
  {
    uint64_t v22 = *(void *)(a1 + 16);
    int v23 = *(_DWORD *)(v22 + 56 * v8 + 8);
    *(_DWORD *)(a1 + 36) = v23 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v22 + 56 * v8 + 8) = v23 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + 56 * v8 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 56 * v8 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 56 * v8) = a3;
  uint64_t v25 = *(void *)(a1 + 16) + 56 * v8;
  *(_OWORD *)(v25 + 16) = *(_OWORD *)a5;
  *(void *)(v25 + 40) = 0;
  *(void *)(v25 + 48) = 0;
  *(void *)(v25 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0;
  *(void *)(v25 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = *(void *)(a5 + 16);
  *(void *)(a5 + 16) = 0;
  *(void *)(v25 + 40) = *(void *)(a5 + 24);
  *(void *)(a5 + 24) = 0;
  uint64_t v26 = *(void *)(v25 + 48);
  *(void *)(v25 + 48) = *(void *)(a5 + 32);
  *(void *)(a5 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = v26;
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v8;
  ++*(_DWORD *)(a1 + 28);
  return v8;
}

void re::HashSetBase<re::UnresolvedArgumentBufferEntry,re::UnresolvedArgumentBufferEntry,re::internal::ValueAsKey<re::UnresolvedArgumentBufferEntry>,re::Hash<re::UnresolvedArgumentBufferEntry>,re::EqualTo<re::UnresolvedArgumentBufferEntry>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  unint64_t v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    int v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    uint64_t v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      unint64_t v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  uint64_t v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + 56 * v10, 16);
  if (v12)
  {
    long long v14 = v12;
    *(void *)(a1 + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &memset_pattern_266, 4 * v10);
    }
    *(void *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 601);
    _os_crash();
    __break(1u);
  }
}

double re::HashSetBase<re::UnresolvedArgumentBufferEntry,re::UnresolvedArgumentBufferEntry,re::internal::ValueAsKey<re::UnresolvedArgumentBufferEntry>,re::Hash<re::UnresolvedArgumentBufferEntry>,re::EqualTo<re::UnresolvedArgumentBufferEntry>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    unint64_t v3 = *((unsigned int *)a1 + 8);
    if (v3)
    {
      uint64_t v4 = 0;
      for (unint64_t i = 0; i < v3; ++i)
      {
        uint64_t v6 = a1[2] + v4;
        int v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
          re::FixedArray<re::ArgumentBufferTextureRecord>::deinit((void *)(v6 + 32));
          unint64_t v3 = *((unsigned int *)a1 + 8);
        }
        v4 += 56;
      }
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

void ___ZN2re20GraphicsFeatureFlags37systemMaterialParametersDirtyTrackingEv_block_invoke(uint64_t a1, const char *a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  re::Defaults::BOOLValue((re::Defaults *)"GraphicsSystemMaterialParametersDirtyTracking", a2, v5);
  if (v5[0]) {
    re::GraphicsFeatureFlags::systemMaterialParametersDirtyTracking(void)::gSystemMaterialParametersDirtyTracking = v5[1];
  }
  unint64_t v3 = *re::graphicsLogObjects(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    if (re::GraphicsFeatureFlags::systemMaterialParametersDirtyTracking(void)::gSystemMaterialParametersDirtyTracking) {
      uint64_t v4 = "enabled";
    }
    else {
      uint64_t v4 = "disabled";
    }
    *(_DWORD *)buf = 136315138;
    int v7 = v4;
    _os_log_impl(&dword_233120000, v3, OS_LOG_TYPE_DEFAULT, "Dirty tracking of SystemMaterialPrameterBlock parameters is %s.", buf, 0xCu);
  }
}

void ___ZN2re20GraphicsFeatureFlags20mergeComputeEncodersEv_block_invoke(uint64_t a1, const char *a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  re::Defaults::BOOLValue((re::Defaults *)"GraphicsMergeComputeEncoders", a2, v5);
  if (v5[0]) {
    re::GraphicsFeatureFlags::mergeComputeEncoders(void)::gMergeComputeEncoders = v5[1];
  }
  unint64_t v3 = *re::graphicsLogObjects(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    if (re::GraphicsFeatureFlags::mergeComputeEncoders(void)::gMergeComputeEncoders) {
      uint64_t v4 = "enabled";
    }
    else {
      uint64_t v4 = "disabled";
    }
    *(_DWORD *)buf = 136315138;
    int v7 = v4;
    _os_log_impl(&dword_233120000, v3, OS_LOG_TYPE_DEFAULT, "Merging Compute Encoders is %s.", buf, 0xCu);
  }
}

void ___ZN2re20GraphicsFeatureFlags16enableDepthPatchEv_block_invoke(uint64_t a1, const char *a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  re::Defaults::BOOLValue((re::Defaults *)"enableDepthPatch", a2, v5);
  if (v5[0]) {
    re::GraphicsFeatureFlags::enableDepthPatch(void)::gEnableDepthPatch = v5[1];
  }
  unint64_t v3 = *re::graphicsLogObjects(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    if (re::GraphicsFeatureFlags::enableDepthPatch(void)::gEnableDepthPatch) {
      uint64_t v4 = "enabled";
    }
    else {
      uint64_t v4 = "disabled";
    }
    *(_DWORD *)buf = 136315138;
    int v7 = v4;
    _os_log_impl(&dword_233120000, v3, OS_LOG_TYPE_DEFAULT, "Depth Patch is %s.", buf, 0xCu);
  }
}

uint64_t re::REAnalyticsEventShaderCompilationRequest(re *this, const char *a2, const char *a3, const char *a4, const char *a5, const char *a6, uint64_t a7, unsigned int *a8, unsigned int a9, unsigned int a10, uint64_t a11, const char *a12, uint64_t a13, char a14)
{
  int v14 = (int)a8;
  int v16 = (int)a6;
  if (!a4)
  {
    char v22 = a14;
    goto LABEL_19;
  }
  int v30 = (int)a8;
  unint64_t v19 = [NSString stringWithCString:a4 encoding:4];
  unint64_t v20 = (_anonymous_namespace_ *)[v19 hasPrefix:@"snapshotCamera"];
  if (!v20)
  {
    if ([v19 hasPrefix:@"Reality Simulation Default Camera"])
    {
      unint64_t v23 = [v19 rangeOfString:@"_" options:4];
      if (!v23 || (unint64_t v24 = v23, v23 >= [v19 length]))
      {
        re::DynamicString::format((re::DynamicString *)"RSCamera_%s", (re::DynamicString *)&v38, "");
        goto LABEL_18;
      }
      id v25 = [v19 substringFromIndex:v24 + 1];
      re::DynamicString::format((re::DynamicString *)"RSCamera_%s", (re::DynamicString *)&v38, [v25 cStringUsingEncoding:4]);
    }
    else
    {
      uint64_t v26 = (_anonymous_namespace_ *)[v19 hasPrefix:@"rOS Shared Scene"];
      if (!v26)
      {
        uint64_t v21 = a4;
        goto LABEL_4;
      }
      unint64_t v27 = [v19 rangeOfString:@"_" options:4];
      if (!v27 || (unint64_t v28 = v27, v27 >= [v19 length]))
      {
        re::DynamicString::format((re::DynamicString *)"SharedScene_%s", (re::DynamicString *)&v38, "");
        goto LABEL_18;
      }
      id v25 = [v19 substringFromIndex:v28 + 1];
      re::DynamicString::format((re::DynamicString *)"SharedScene_%s", (re::DynamicString *)&v38, [v25 cStringUsingEncoding:4]);
    }

    goto LABEL_18;
  }
  uint64_t v21 = "snapshotCamera";
LABEL_4:
LABEL_18:
  char v22 = a14;

  int v14 = v30;
LABEL_19:
  re::DynamicString::DynamicString((re::DynamicString *)v31, (const re::DynamicString *)&v38);
  void v31[4] = a5;
  v31[5] = a7;
  int v32 = v16;
  int v33 = v14;
  unsigned int v34 = a9;
  unsigned int v35 = a10;
  char v36 = (char)a12;
  v31[6] = a11;
  v31[7] = a13;
  char v37 = v22;
  AnalyticsSendEventLazy();
  if (v31[0])
  {
    if (v31[1]) {
      (*(void (**)(void))(*(void *)v31[0] + 40))();
    }
    memset(v31, 0, 32);
  }
  uint64_t result = v38;
  if (v38)
  {
    if (v39) {
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v38 + 40))(v38, v40);
    }
  }
  return result;
}

id ___ZN2re40REAnalyticsEventShaderCompilationRequestEPKcS1_S1_S1_S1_jPjjjjS1_bmb_block_invoke(uint64_t a1)
{
  v21[14] = *MEMORY[0x263EF8340];
  v20[0] = @"MaterialName";
  unint64_t v19 = [NSString stringWithUTF8String:*(void *)(a1 + 32)];
  v21[0] = v19;
  v20[1] = @"TechniqueName";
  long long v18 = [NSString stringWithUTF8String:*(void *)(a1 + 40)];
  v21[1] = v18;
  void v20[2] = @"NodeName";
  unsigned int v17 = [NSString stringWithUTF8String:*(void *)(a1 + 48)];
  void v21[2] = v17;
  v20[3] = @"GraphScope";
  if (*(unsigned char *)(a1 + 64)) {
    uint64_t v2 = *(void *)(a1 + 72);
  }
  else {
    uint64_t v2 = a1 + 65;
  }
  int v16 = [NSString stringWithUTF8String:v2];
  void v21[3] = v16;
  void v20[4] = @"TypeScope";
  uint64_t v15 = [NSString stringWithUTF8String:*(void *)(a1 + 88)];
  v21[4] = v15;
  v20[5] = @"SampleCount";
  unint64_t v3 = [NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 120)];
  v21[5] = v3;
  v20[6] = @"PixelFormats";
  uint64_t v4 = *(unsigned int **)(a1 + 96);
  unint64_t v5 = objc_msgSend(NSString, "stringWithFormat:", @"%u %u %u %u %u %u %u %u", *v4, v4[1], v4[2], v4[3], v4[4], v4[5], v4[6], v4[7]);
  v21[6] = v5;
  v20[7] = @"DepthFormat";
  uint64_t v6 = [NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 124)];
  v21[7] = v6;
  v20[8] = @"StencilFormat";
  int v7 = [NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 128)];
  uint8_t v21[8] = v7;
  v20[9] = @"TechniqueStateOverrideFlags";
  uint64_t v8 = [NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 132)];
  v21[9] = v8;
  v20[10] = @"VertexDescriptor";
  signed int v9 = [NSString stringWithUTF8String:*(void *)(a1 + 104)];
  v21[10] = v9;
  v20[11] = @"CompiledInAssetRegistration";
  uint64_t v10 = [NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 136)];
  v21[11] = v10;
  v20[12] = @"CompilationHash";
  uint64_t v11 = objc_msgSend(NSString, "stringWithFormat:", @"%zu", *(void *)(a1 + 112));
  v21[12] = v11;
  v20[13] = @"IsFallback";
  uint64_t v12 = [NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 137)];
  v21[13] = v12;
  uint64_t v13 = [NSDictionary dictionaryWithObjects:v21 forKeys:v20 count:14];

  return v13;
}

re::DynamicString *__copy_helper_block_a8_56c24_ZTSN2re13DynamicStringE(uint64_t a1, uint64_t a2)
{
  return re::DynamicString::DynamicString((re::DynamicString *)(a1 + 56), (const re::DynamicString *)(a2 + 56));
}

double __destroy_helper_block_a8_56c24_ZTSN2re13DynamicStringE(uint64_t a1)
{
  return re::DynamicString::deinit((re::DynamicString *)(a1 + 56));
}

uint64_t re::REAnalyticsEventShaderCompilationDuration(re *this, const char *a2, const char *a3)
{
  return AnalyticsSendEventLazy();
}

id ___ZN2re41REAnalyticsEventShaderCompilationDurationEPKcS1_ib_block_invoke(uint64_t a1)
{
  v9[4] = *MEMORY[0x263EF8340];
  v8[0] = @"MaterialName";
  uint64_t v2 = [NSString stringWithUTF8String:*(void *)(a1 + 32)];
  v9[0] = v2;
  v8[1] = @"TechniqueName";
  unint64_t v3 = [NSString stringWithUTF8String:*(void *)(a1 + 40)];
  v9[1] = v3;
  char v8[2] = @"Duration";
  uint64_t v4 = [NSNumber numberWithInt:*(unsigned int *)(a1 + 48)];
  v9[2] = v4;
  v8[3] = @"IsFallback";
  unint64_t v5 = [NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 52)];
  v9[3] = v5;
  uint64_t v6 = [NSDictionary dictionaryWithObjects:v9 forKeys:v8 count:4];

  return v6;
}

uint64_t re::REAnalyticsEventRenderGraphCacheState(re *this)
{
  return AnalyticsSendEventLazy();
}

id ___ZN2re37REAnalyticsEventRenderGraphCacheStateEjjjj_block_invoke(unsigned int *a1)
{
  v9[4] = *MEMORY[0x263EF8340];
  v8[0] = @"GraphEmitCount";
  uint64_t v2 = [NSNumber numberWithUnsignedInt:a1[8]];
  v9[0] = v2;
  v8[1] = @"CacheHitCount";
  unint64_t v3 = [NSNumber numberWithUnsignedInt:a1[9]];
  v9[1] = v3;
  char v8[2] = @"CacheMissCount";
  uint64_t v4 = [NSNumber numberWithUnsignedInt:a1[10]];
  v9[2] = v4;
  v8[3] = @"BuildErrorCount";
  unint64_t v5 = [NSNumber numberWithUnsignedInt:a1[11]];
  v9[3] = v5;
  uint64_t v6 = [NSDictionary dictionaryWithObjects:v9 forKeys:v8 count:4];

  return v6;
}

uint64_t re::REAnalyticsEventShaderPermutationsForCustomClear(re *this, const char *a2)
{
  return AnalyticsSendEventLazy();
}

id ___ZN2re48REAnalyticsEventShaderPermutationsForCustomClearEPKc_block_invoke(uint64_t a1)
{
  v5[1] = *MEMORY[0x263EF8340];
  uint64_t v4 = @"ShaderPermutation";
  uint64_t v1 = [NSString stringWithUTF8String:*(void *)(a1 + 32)];
  v5[0] = v1;
  uint64_t v2 = [NSDictionary dictionaryWithObjects:v5 forKeys:&v4 count:1];

  return v2;
}

uint64_t re::REAnalyticsEventShaderPermutationsForPerformSkinning(re *this, const char *a2)
{
  return AnalyticsSendEventLazy();
}

id ___ZN2re52REAnalyticsEventShaderPermutationsForPerformSkinningEPKc_block_invoke(uint64_t a1)
{
  v5[1] = *MEMORY[0x263EF8340];
  uint64_t v4 = @"ShaderPermutation";
  uint64_t v1 = [NSString stringWithUTF8String:*(void *)(a1 + 32)];
  v5[0] = v1;
  uint64_t v2 = [NSDictionary dictionaryWithObjects:v5 forKeys:&v4 count:1];

  return v2;
}

uint64_t re::RenderGraphContext::RenderGraphContext(uint64_t a1, uint64_t a2, re::RenderManager *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = a5;
  *(void *)(a1 + 24) = a4;
  *(void *)(a1 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = a7;
  *(unsigned char *)(a1 + 52) = a11;
  *(void *)&long long v15 = 0x7F0000007FLL;
  *((void *)&v15 + 1) = 0x7F0000007FLL;
  *(int32x4_t *)(a1 + 64) = vdupq_n_s32(0x7F800000u);
  *(_OWORD *)(a1 + 80) = v15;
  *(void *)(a1 + re::DynamicArray<re::RigComponentConstraint>::deinit((uint64_t)this + 96) = 0;
  *(_DWORD *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  uint64_t v65 = (uint64_t *)(a1 + 112);
  *(_DWORD *)(a1 + 120) = 0;
  int v16 = (void *)(a1 + 1024);
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_OWORD *)(a1 + 1040) = 0u;
  *(_DWORD *)(a1 + 1056) = 0;
  *(void *)(a1 + 1060) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(_OWORD *)(a1 + 1088) = 0u;
  *(_DWORD *)(a1 + 1104) = 0;
  *(void *)(a1 + 1108) = 0x7FFFFFFFLL;
  *(unsigned char *)(a1 + 1120) = 0;
  *(void *)(a1 + 1160) = 0;
  *(void *)(a1 + 1144) = 0;
  *(_DWORD *)(a1 + 1152) = 0;
  *(_OWORD *)(a1 + 1128) = 0u;
  *(void *)(a1 + 1168) = a6;
  *(void *)(a1 + 1176) = a8;
  *(_DWORD *)(a1 + 1184) = 4;
  *(void *)(a1 + 1192) = 0;
  unsigned int v17 = re::globalAllocators((re *)a1);
  long long v18 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v17[2] + 32))(v17[2], 16, 8);
  *(void *)long long v18 = 0;
  unint64_t v19 = re::globalAllocators(v18);
  uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v19[2] + 32))(v19[2], 264, 8);
  *(_OWORD *)uint64_t v20 = 0u;
  *(_OWORD *)(v20 + 16) = 0u;
  *(_OWORD *)(v20 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0u;
  *(_OWORD *)(v20 + 48) = 0u;
  *(_OWORD *)(v20 + 64) = 0u;
  *(_OWORD *)(v20 + 80) = 0u;
  *(_OWORD *)(v20 + re::DynamicArray<re::RigComponentConstraint>::deinit((uint64_t)this + 96) = 0u;
  *(_OWORD *)(v20 + 112) = 0u;
  *(_OWORD *)(v20 + 128) = 0u;
  *(_OWORD *)(v20 + 144) = 0u;
  *(_OWORD *)(v20 + 160) = 0u;
  *(_OWORD *)(v20 + 176) = 0u;
  *(_OWORD *)(v20 + 192) = 0u;
  *(_OWORD *)(v20 + 208) = 0u;
  *(_OWORD *)(v20 + 224) = 0u;
  *(_OWORD *)(v20 + 240) = 0u;
  *(void *)(v20 + 256) = 0;
  *((void *)v18 + 1) = v20;
  *(void *)(a1 + 1200) = v18;
  *(_DWORD *)(a1 + 12re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0;
  *(void *)(a1 + 1224) = 0;
  *(void *)(a1 + 1216) = 0;
  *(void *)(a1 + 1208) = 0;
  *(_DWORD *)(a1 + 1312) = 0;
  *(_OWORD *)(a1 + 1240) = 0u;
  *(_OWORD *)(a1 + 1256) = 0u;
  *(_OWORD *)(a1 + 1272) = 0u;
  *(_OWORD *)(a1 + 1288) = 0u;
  *(void *)(a1 + 1301) = 0;
  *(void *)(a1 + 1316) = 134217472;
  *(void *)(a1 + 1324) = 134217472;
  *(unsigned char *)(a1 + 13re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0;
  uint64_t v62 = a2;
  unint64_t v63 = a3;
  if (*((unsigned char *)a3 + 307)) {
    BOOL v21 = *(unsigned char *)a3 == 0;
  }
  else {
    BOOL v21 = 1;
  }
  char v22 = !v21;
  re::DrawCallRecorder::DrawCallRecorder(a1 + 1336, (void *)(a2 + 32), v22, *(void *)(a2 + 24));
  *(void *)(a1 + 14re::DynamicArray<re::RigComponentConstraint>::deinit((uint64_t)this + 96) = a9;
  *(void *)(a1 + 1504) = a10;
  *(void *)(a1 + 1552) = 0;
  *(_DWORD *)(a1 + 1544) = 0;
  *(void *)(a1 + 1536) = 0;
  *(void *)(a1 + 1528) = 0;
  *(void *)(a1 + 1520) = 0;
  *(unsigned char *)(a1 + 1560) = 0;
  *(_OWORD *)(a1 + 1568) = 0u;
  *(_OWORD *)(a1 + 1584) = 0u;
  *(_DWORD *)(a1 + 1600) = 0;
  *(void *)(a1 + 1604) = 0x7FFFFFFFLL;
  if (*(void *)a12)
  {
    if (*(_DWORD *)(a12 + 28) <= 3u) {
      signed int v23 = 3;
    }
    else {
      signed int v23 = *(_DWORD *)(a12 + 28);
    }
    re::HashTable<unsigned long,re::SharedPtr<re::MaterialParameterTable>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::init(a1 + 1568, *(void *)a12, v23);
    re::HashTable<unsigned long,re::SharedPtr<re::MaterialParameterTable>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::clear(a1 + 1568);
    unsigned int v24 = *(_DWORD *)(a12 + 28);
    if (*(_DWORD *)(a1 + 1592) < v24) {
      re::HashTable<unsigned long,re::SharedPtr<re::MaterialParameterTable>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(a1 + 1568, v24);
    }
    unint64_t v25 = *(unsigned int *)(a12 + 32);
    if (v25)
    {
      uint64_t v26 = 0;
      for (unint64_t i = 0; i < v25; ++i)
      {
        uint64_t v28 = *(void *)(a12 + 16);
        if ((*(_DWORD *)(v28 + v26) & 0x80000000) != 0)
        {
          uint64_t v29 = v28 + v26;
          unint64_t v30 = *(void *)(v28 + v26 + 8);
          unint64_t v31 = *(unsigned int *)(a1 + 1592);
          unint64_t v32 = v30 % v31;
          uint64_t v33 = *(unsigned int *)(a1 + 1604);
          if (v33 == 0x7FFFFFFF)
          {
            uint64_t v33 = *(unsigned int *)(a1 + 1600);
            int v34 = v33;
            if (v33 == v31)
            {
              re::HashTable<unsigned long,re::SharedPtr<re::MaterialParameterTable>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(a1 + 1568, 2 * *(_DWORD *)(a1 + 1596));
              unint64_t v32 = v30 % *(unsigned int *)(a1 + 1592);
              int v34 = *(_DWORD *)(a1 + 1600);
              unint64_t v30 = *(void *)(v29 + 8);
            }
            *(_DWORD *)(a1 + 1600) = v34 + 1;
            uint64_t v35 = *(void *)(a1 + 1584);
            int v36 = *(_DWORD *)(v35 + 24 * v33);
          }
          else
          {
            uint64_t v35 = *(void *)(a1 + 1584);
            int v36 = *(_DWORD *)(v35 + 24 * v33);
            *(_DWORD *)(a1 + 1604) = v36 & 0x7FFFFFFF;
          }
          uint64_t v37 = 24 * v33;
          *(_DWORD *)(v35 + v37) = v36 | 0x80000000;
          uint64_t v38 = *(void *)(a1 + 1576);
          *(_DWORD *)(*(void *)(a1 + 1584) + v37) = *(_DWORD *)(*(void *)(a1 + 1584) + 24 * v33) & 0x80000000 | *(_DWORD *)(v38 + 4 * v32);
          *(void *)(*(void *)(a1 + 1584) + 24 * v33 + 8) = v30;
          uint64_t v39 = *(void *)(v29 + 16);
          *(void *)(*(void *)(a1 + 1584) + 24 * v33 + 16) = v39;
          if (v39)
          {
            id v40 = (id)(v39 + 8);
            uint64_t v38 = *(void *)(a1 + 1576);
          }
          *(_DWORD *)(v38 + 4 * vre::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = v33;
          ++*(_DWORD *)(a1 + 1596);
          unint64_t v25 = *(unsigned int *)(a12 + 32);
        }
        v26 += 24;
      }
    }
  }
  uint64_t v41 = *(void *)(v62 + 440);
  *(_DWORD *)(a1 + 1648) = 0;
  *(_OWORD *)(a1 + 16re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0u;
  *(_OWORD *)(a1 + 1616) = 0u;
  *(void *)(a1 + 1652) = 0x7FFFFFFFLL;
  re::HashTable<unsigned long,re::CameraLateLatch,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::init(a1 + 1616, v41, 3);
  uint64_t v42 = *(void *)(v62 + 440);
  *(void *)(a1 + 1672) = 0;
  *(_DWORD *)(a1 + 1680) = 1;
  *(void *)(a1 + 16re::DynamicArray<re::RigComponentConstraint>::deinit((uint64_t)this + 96) = 0;
  *(void *)(a1 + 1688) = 0;
  *(void *)(a1 + 1664) = v42;
  re::DynamicOverflowArray<re::InlineFunction<464ul,void ()(re::Matrix4x4<float> const&,re::Matrix4x4<float> const&)>,5ul>::setCapacity((uint64_t *)(a1 + 1664), 0);
  *(_DWORD *)(a1 + 1680) += 2;
  uint64_t v43 = (_anonymous_namespace_ *)re::DrawCallRecorder::drawCallRecordingEnabled((re::DrawCallRecorder *)(a1 + 1336), v63);
  *(unsigned char *)(a1 + 13re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = (_BYTE)v43;
  uint64_t v44 = v65;
  uint64_t v45 = *(void *)(a8 + 136);
  uint64_t v46 = *(void *)(v45 + 352);
  if (!v46) {
    return a1;
  }
  uint64_t v47 = *(re::RenderManager **)(v45 + 368);
  long long v64 = (re::RenderManager *)((char *)v47 + 192 * v46);
  uint64_t v67 = a1 + 128;
  while (1)
  {
    uint64_t v48 = *((void *)v47 + 7);
    if (v48) {
      break;
    }
LABEL_53:
    uint64_t v47 = (re::RenderManager *)((char *)v47 + 192);
    if (v47 == v64) {
      return a1;
    }
  }
  uint64_t v49 = *((void *)v47 + 9);
  uint64_t v50 = v49 + (v48 << 6);
  while (*(_DWORD *)(v49 + 4) != 12)
  {
LABEL_52:
    v49 += 64;
    if (v49 == v50) {
      goto LABEL_53;
    }
  }
  v68[0] = 0;
  v68[1] = 0;
  int v69 = 1;
  uint64_t v70 = 0;
  uint64_t v71 = 0;
  if (*(_DWORD *)(a1 + 1052))
  {
LABEL_31:
    re::HashTable<unsigned int,re::DynamicOverflowArray<re::AABB,2ul>,re::Hash<unsigned int>,re::EqualTo<unsigned int>,false,false>::add((uint64_t)v16, (_DWORD *)(v49 + 52), (uint64_t)v68);
LABEL_49:
    uint64_t v43 = (_anonymous_namespace_ *)v68[0];
    if (v68[0])
    {
      if ((v69 & 1) == 0) {
        uint64_t v43 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v68[0] + 40))();
      }
    }
    goto LABEL_52;
  }
  uint64_t v51 = *v44;
  if (*v44)
  {
    uint64_t v52 = 112 * v51;
    uint64_t v53 = (_DWORD *)(a1 + 128);
    while (*v53 != *(_DWORD *)(v49 + 52))
    {
      v53 += 28;
      v52 -= 112;
      if (!v52)
      {
        if ((v51 & 0xFFFFFFF8) == 0) {
          goto LABEL_44;
        }
        if (*v16) {
          goto LABEL_41;
        }
        uint64_t v54 = *(uint64_t **)(a1 + 96);
        if (!v54)
        {
        }
        re::HashTable<unsigned int,re::DynamicOverflowArray<re::AABB,2ul>,re::Hash<unsigned int>,re::EqualTo<unsigned int>,false,false>::init((uint64_t)v16, (uint64_t)v54, 16);
        uint64_t v51 = *v65;
        if (*v65)
        {
LABEL_41:
          uint64_t v55 = (_DWORD *)(a1 + 128);
          uint64_t v56 = (_DWORD *)(v67 + 112 * v51);
          do
          {
            re::HashTable<unsigned int,re::DynamicOverflowArray<re::AABB,2ul>,re::Hash<unsigned int>,re::EqualTo<unsigned int>,false,false>::add((uint64_t)v16, v55, (uint64_t)(v55 + 4));
            v55 += 28;
          }
          while (v55 != v56);
        }
        uint64_t v44 = v65;
        re::DynamicInlineArray<re::KeyValuePair<unsigned int,re::DynamicOverflowArray<re::AABB,2ul>>,8ul>::clear(v65);
        goto LABEL_31;
      }
    }
    goto LABEL_49;
  }
LABEL_44:
  int v72 = *(_DWORD *)(v49 + 52);
  re::DynamicOverflowArray<re::AABB,2ul>::DynamicOverflowArray((uint64_t)v73, (uint64_t)v68);
  if ((unint64_t)*v44 >= 8) {
    goto LABEL_56;
  }
  unint64_t v58 = (_DWORD *)(v67 + 112 * *v44);
  *unint64_t v58 = v72;
  re::DynamicOverflowArray<re::AABB,2ul>::DynamicOverflowArray((uint64_t)(v58 + 4), (uint64_t)v73);
  uint64_t v60 = *(void *)(a1 + 112) + 1;
  *(void *)(a1 + 112) = v60;
  ++*(_DWORD *)(a1 + 120);
  if (v73[0] && (v74 & 1) == 0)
  {
    (*(void (**)(void))(*(void *)v73[0] + 40))();
    uint64_t v60 = *v44;
  }
  if (v60) {
    goto LABEL_49;
  }
  re::internal::assertLog((re::internal *)6, v59, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, -1, 0);
  _os_crash();
  __break(1u);
LABEL_56:
  re::internal::assertLog((re::internal *)4, v57, "assertion failure: '%s' (%s:line %i) Capacity limit reached. DynamicInlineArray<T,N> cannot be resized.", "false", "ensureCapacity", 277);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

void re::RenderGraphContext::~RenderGraphContext(re::RenderGraphContext *this)
{
  re::DynamicOverflowArray<re::InlineFunction<464ul,void ()(re::Matrix4x4<float> const&,re::Matrix4x4<float> const&)>,5ul>::deinit((uint64_t)this + 1664);
  re::HashTable<unsigned long,re::CameraLateLatch,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::deinit((uint64_t *)this + 202);
  re::HashTable<unsigned long,re::SharedPtr<re::MaterialParameterTable>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::deinit((uint64_t *)this + 196);
  re::DynamicArray<NS::SharedPtr<MTL::SamplerState>>::deinit((uint64_t)this + 1520);
  re::HashTable<unsigned int,re::SerializerV2<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::SharedObject,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)this + 179);
  re::HashTable<unsigned long long,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)this + 173);
  re::DynamicArray<re::DrawCallRecorderGroup>::deinit((uint64_t)this + 1344);
  uint64_t v2 = (void *)*((void *)this + 157);
  if (v2)
  {

    *((void *)this + 157) = 0;
  }
  unint64_t v3 = (void *)*((void *)this + 156);
  if (v3)
  {

    *((void *)this + 156) = 0;
  }
  re::DynamicArray<re::mtl::RenderCommandEncoder>::deinit((uint64_t)this + 1208);
  re::internal::destroyPersistent<re::mtl::RenderCommandEncoder>((re *)"~CommandEncoder", 544, *((re::mtl::RenderCommandEncoder **)this + 150));
  *((void *)this + 150) = 0;
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 1128);
  re::HashTable<re::DynamicString,re::DynamicInlineArray<re::FixedOccupancyGrid,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 134);
  re::SmallHashTable<unsigned int,re::DynamicOverflowArray<re::AABB,2ul>,8ul,re::Hash<unsigned int>,re::EqualTo<unsigned int>,false>::~SmallHashTable((uint64_t)this + 96);
}

void re::RenderGraphContext::selectViewport(unint64_t a1, uint64_t a2, uint64_t a3, _anonymous_namespace_ *a4, unint64_t a5)
{
  uint64_t v72 = *MEMORY[0x263EF8340];
  if (a2)
  {
    if (*(void *)(a3 + 8))
    {
      uint64_t v11 = *(void *)(a3 + 16);
      long long v12 = *(_OWORD *)(a2 + 8);
      *(void *)(v11 + 16) = *(void *)(a2 + 24);
      *(_OWORD *)uint64_t v11 = v12;
      if (*((void *)a4 + 1))
      {
        *(_OWORD *)*((void *)a4 + 2) = xmmword_2343854A0;
        return;
      }
LABEL_58:
      v57[0] = 0;
      long long v71 = 0u;
      long long v69 = 0u;
      long long v70 = 0u;
      uint64x2_t v67 = 0u;
      long long v68 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v59 = 136315906;
      uint64_t v60 = "operator[]";
      __int16 v61 = 1024;
      int v62 = 468;
      __int16 v63 = 2048;
      uint64_t v64 = 0;
      __int16 v65 = 2048;
      uint64_t v66 = 0;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_59;
    }
LABEL_57:
    v57[0] = 0;
    long long v71 = 0u;
    long long v69 = 0u;
    long long v70 = 0u;
    uint64x2_t v67 = 0u;
    long long v68 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v59 = 136315906;
    uint64_t v60 = "operator[]";
    __int16 v61 = 1024;
    int v62 = 468;
    __int16 v63 = 2048;
    uint64_t v64 = 0;
    __int16 v65 = 2048;
    uint64_t v66 = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_58;
  }
  unint64_t v5 = a1;
  uint64_t v13 = *(void **)(*(void *)(a1 + 1176) + 136);
  unint64_t v8 = *(unsigned int *)(v5 + 48);
  int v7 = (float32x4_t *)v13[44];
  if ((unint64_t)v7 <= v8) {
    goto LABEL_61;
  }
  uint64_t v14 = v13[46];
  uint64_t v15 = v14 + 192 * v8;
  uint64_t v16 = *(void *)(v15 + 56);
  if (!v16) {
    return;
  }
  unint64_t v6 = a5;
  uint64_t v17 = *(void *)(v15 + 72);
  uint64_t v18 = v13[37];
  uint64_t v19 = v16 << 6;
  int v7 = *(float32x4_t **)(v18 + 16);
  for (unint64_t i = (unsigned int *)(v17 + 52); ; i += 16)
  {
    unint64_t v21 = *i;
    if ((unint64_t)v7 <= v21)
    {
      v57[0] = 0;
      long long v71 = 0u;
      long long v69 = 0u;
      long long v70 = 0u;
      uint64x2_t v67 = 0u;
      long long v68 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v59 = 136315906;
      uint64_t v60 = "operator[]";
      __int16 v61 = 1024;
      int v62 = 789;
      __int16 v63 = 2048;
      uint64_t v64 = v21;
      __int16 v65 = 2048;
      uint64_t v66 = (uint64_t)v7;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_57;
    }
    uint64_t v22 = *(void *)(v18 + 32);
    if (*(_DWORD *)(v22 + 48 * v21) != 1)
    {
      unsigned int v23 = *(i - 12);
      BOOL v24 = v23 > 8;
      int v25 = (1 << v23) & 0x1CE;
      if (!v24 && v25 != 0) {
        break;
      }
    }
    v19 -= 64;
    if (!v19) {
      return;
    }
  }
  uint64_t v27 = v22 + 48 * v21;
  v67.i64[0] = *(void *)(v27 + 8) >> 1;
  v67.i64[1] = *(void *)(v27 + 24);
  re::RenderGraphResourceDescriptions::targetDescriptionSource((uint64_t)v13, (uint64_t)&v67, (uint64_t)v57);
  uint64_t v28 = re::RenderGraphExecutable::targetDescription(*(void *)(v5 + 1176), (uint64_t)v57);
  int v7 = (float32x4_t *)re::RenderGraphDataStore::tryGet<re::ViewportPercentData>(*(void *)(v5 + 1168), *(void *)(*(void *)(v5 + 40) + 48));
  uint64_t v29 = re::RenderGraphDataStore::tryGet<re::VRRData>(*(void *)(v5 + 1168), *(void *)(*(void *)(v5 + 40) + 48));
  uint64_t v31 = *(void *)(v28 + 12);
  v32.i64[0] = v31;
  v32.i64[1] = HIDWORD(v31);
  uint64x2_t v33 = v32;
  if (v29)
  {
    if (*(unsigned char *)(v29 + 12) && *(unsigned char *)(v14 + 192 * v8 + 171) != 0)
    {
      uint64x2_t v53 = v33;
      uint64_t v35 = *(void *)(v5 + 1176);
      unint64_t v36 = *(unsigned int *)(v29 + 8);
      unint64_t v37 = *(void *)(v35 + 104);
      if (v37 > v36)
      {
        id v38 = *(id *)(*(void *)(v35 + 96) + 8 * v36);
        uint64x2_t v33 = v53;
        if (v38)
        {
          uint64_t v39 = v38;
          uint64x2_t v67 = 0uLL;
          *(void *)&long long v68 = 0;
          objc_msgSend(v38, sel_screenSize);
          uint64x2_t v54 = v67;

          uint64x2_t v33 = v54;
        }
        goto LABEL_26;
      }
LABEL_66:
      re::internal::assertLog((re::internal *)6, v30, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v36, v37);
      _os_crash();
      __break(1u);
LABEL_67:
      re::internal::assertLog((re::internal *)6, v30, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, 0, 0);
      _os_crash();
      __break(1u);
      goto LABEL_68;
    }
  }
LABEL_26:
  if (*(void *)(a3 + 8) >= 2uLL && (v6 & 1) == 0)
  {
    if (v7)
    {
      uint64_t v40 = v7[1].i64[0];
      v67.i64[0] = (uint64_t)&v7[2];
      v67.i64[1] = v40;
      uint64x2_t v55 = v33;
      re::FixedArray<re::Vector4<float>>::operator=(a4, (uint64_t)&v67);
      uint64x2_t v33 = v55;
      goto LABEL_47;
    }
    if (*((void *)a4 + 1))
    {
      *(_OWORD *)*((void *)a4 + 2) = xmmword_2343854A0;
      unint64_t v5 = *((void *)a4 + 1);
      if (v5 > 1)
      {
        *(_OWORD *)(*((void *)a4 + 2) + 16) = xmmword_2343854A0;
LABEL_47:
        unint64_t v46 = *((void *)a4 + 1);
        if (v46)
        {
          unint64_t v47 = *(void *)(a3 + 8);
          if (v47)
          {
            float64x2_t v48 = vcvtq_f64_u64(v33);
            float32x4_t v49 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v48), v48);
            uint64_t v50 = (float32x4_t *)*((void *)a4 + 2);
            uint64_t v51 = *(void *)(a3 + 16);
            *(float32x4_t *)uint64_t v51 = vrndaq_f32(vmulq_f32(*v50, v49));
            *(void *)(v51 + 16) = 0x3F80000000000000;
            if (v46 > 1)
            {
              if (v47 > 1)
              {
                *(float32x4_t *)(v51 + 24) = vrndaq_f32(vmulq_f32(v50[1], v49));
                *(_DWORD *)(v51 + 40) = 0;
                uint64_t v43 = (__int32 *)(v51 + 44);
                goto LABEL_55;
              }
LABEL_65:
              uint64_t v58 = 0;
              long long v71 = 0u;
              long long v69 = 0u;
              long long v70 = 0u;
              uint64x2_t v67 = 0u;
              long long v68 = 0u;
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              int v59 = 136315906;
              uint64_t v60 = "operator[]";
              __int16 v61 = 1024;
              int v62 = 468;
              __int16 v63 = 2048;
              uint64_t v64 = 1;
              __int16 v65 = 2048;
              uint64_t v66 = 1;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
              goto LABEL_66;
            }
LABEL_64:
            uint64_t v58 = 0;
            long long v71 = 0u;
            long long v69 = 0u;
            long long v70 = 0u;
            uint64x2_t v67 = 0u;
            long long v68 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            int v59 = 136315906;
            uint64_t v60 = "operator[]";
            __int16 v61 = 1024;
            int v62 = 468;
            __int16 v63 = 2048;
            uint64_t v64 = 1;
            __int16 v65 = 2048;
            uint64_t v66 = 1;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
            goto LABEL_65;
          }
LABEL_63:
          uint64_t v58 = 0;
          long long v71 = 0u;
          long long v69 = 0u;
          long long v70 = 0u;
          uint64x2_t v67 = 0u;
          long long v68 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          int v59 = 136315906;
          uint64_t v60 = "operator[]";
          __int16 v61 = 1024;
          int v62 = 468;
          __int16 v63 = 2048;
          uint64_t v64 = 0;
          __int16 v65 = 2048;
          uint64_t v66 = 0;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_64;
        }
LABEL_62:
        uint64_t v58 = 0;
        long long v71 = 0u;
        long long v69 = 0u;
        long long v70 = 0u;
        uint64x2_t v67 = 0u;
        long long v68 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v59 = 136315906;
        uint64_t v60 = "operator[]";
        __int16 v61 = 1024;
        int v62 = 468;
        __int16 v63 = 2048;
        uint64_t v64 = 0;
        __int16 v65 = 2048;
        uint64_t v66 = 0;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_63;
      }
LABEL_72:
      uint64_t v58 = 0;
      long long v71 = 0u;
      long long v69 = 0u;
      long long v70 = 0u;
      uint64x2_t v67 = 0u;
      long long v68 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v59 = 136315906;
      uint64_t v60 = "operator[]";
      __int16 v61 = 1024;
      int v62 = 468;
      __int16 v63 = 2048;
      uint64_t v64 = 1;
      __int16 v65 = 2048;
      uint64_t v66 = v5;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_73:
      uint64_t v58 = 0;
      long long v71 = 0u;
      long long v69 = 0u;
      long long v70 = 0u;
      uint64x2_t v67 = 0u;
      long long v68 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v59 = 136315906;
      uint64_t v60 = "operator[]";
      __int16 v61 = 1024;
      int v62 = 468;
      __int16 v63 = 2048;
      uint64_t v64 = 0;
      __int16 v65 = 2048;
      uint64_t v66 = 0;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_74;
    }
LABEL_71:
    uint64_t v58 = 0;
    long long v71 = 0u;
    long long v69 = 0u;
    long long v70 = 0u;
    uint64x2_t v67 = 0u;
    long long v68 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v59 = 136315906;
    uint64_t v60 = "operator[]";
    __int16 v61 = 1024;
    int v62 = 468;
    __int16 v63 = 2048;
    uint64_t v64 = 0;
    __int16 v65 = 2048;
    uint64_t v66 = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_72;
  }
  if (v7 && (v6 & 1) == 0)
  {
    if (!v7[1].i64[0]) {
      goto LABEL_67;
    }
    if (*((void *)a4 + 1))
    {
      *(float32x4_t *)*((void *)a4 + 2) = v7[2];
      if (v7[1].i64[0])
      {
        if (*(void *)(a3 + 8))
        {
          float64x2_t v41 = vcvtq_f64_u64(v33);
          uint64_t v42 = *(float32x4_t **)(a3 + 16);
          *uint64_t v42 = vrndaq_f32(vmulq_f32(v7[2], vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v41), v41)));
          v42[1].i32[0] = 0;
          uint64_t v43 = &v42[1].i32[1];
          goto LABEL_55;
        }
        goto LABEL_70;
      }
    }
    else
    {
LABEL_68:
      uint64_t v58 = 0;
      long long v71 = 0u;
      long long v69 = 0u;
      long long v70 = 0u;
      uint64x2_t v67 = 0u;
      long long v68 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v59 = 136315906;
      uint64_t v60 = "operator[]";
      __int16 v61 = 1024;
      int v62 = 468;
      __int16 v63 = 2048;
      uint64_t v64 = 0;
      __int16 v65 = 2048;
      uint64_t v66 = 0;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    re::internal::assertLog((re::internal *)6, v30, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, 0, 0);
    _os_crash();
    __break(1u);
LABEL_70:
    uint64_t v58 = 0;
    long long v71 = 0u;
    long long v69 = 0u;
    long long v70 = 0u;
    uint64x2_t v67 = 0u;
    long long v68 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v59 = 136315906;
    uint64_t v60 = "operator[]";
    __int16 v61 = 1024;
    int v62 = 468;
    __int16 v63 = 2048;
    uint64_t v64 = 0;
    __int16 v65 = 2048;
    uint64_t v66 = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_71;
  }
  uint64x2_t v56 = v33;
  if (re::RenderManager::isProtoStereoRenderingEnabled(*(re::RenderManager **)(v5 + 8)))
  {
    if (*(void *)(a3 + 8))
    {
      uint64_t v44 = 0;
      unint64_t v5 = 0;
      while (1)
      {
        unint64_t v6 = *((void *)a4 + 1);
        if (v6 <= v5) {
          break;
        }
        *(_OWORD *)(*((void *)a4 + 2) + 16 * v5) = xmmword_2343854A0;
        unint64_t v6 = *(void *)(a3 + 8);
        if (v6 <= v5) {
          goto LABEL_60;
        }
        uint64_t v45 = *(void *)(a3 + 16) + v44;
        *(void *)uint64_t v45 = 0;
        *(float *)(v45 + 8) = (float)v56.u64[0];
        *(float *)(v45 + 12) = (float)v56.u64[1];
        *(void *)(v45 + 16) = 0x3F80000000000000;
        ++v5;
        v44 += 24;
        if (v6 <= v5) {
          return;
        }
      }
LABEL_59:
      uint64_t v58 = 0;
      long long v71 = 0u;
      long long v69 = 0u;
      long long v70 = 0u;
      uint64x2_t v67 = 0u;
      long long v68 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v59 = 136315906;
      uint64_t v60 = "operator[]";
      __int16 v61 = 1024;
      int v62 = 468;
      __int16 v63 = 2048;
      uint64_t v64 = v5;
      __int16 v65 = 2048;
      uint64_t v66 = v6;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_60:
      uint64_t v58 = 0;
      long long v71 = 0u;
      long long v69 = 0u;
      long long v70 = 0u;
      uint64x2_t v67 = 0u;
      long long v68 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v59 = 136315906;
      uint64_t v60 = "operator[]";
      __int16 v61 = 1024;
      int v62 = 468;
      __int16 v63 = 2048;
      uint64_t v64 = v5;
      __int16 v65 = 2048;
      uint64_t v66 = v6;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_61:
      v57[0] = 0;
      long long v71 = 0u;
      long long v69 = 0u;
      long long v70 = 0u;
      uint64x2_t v67 = 0u;
      long long v68 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v59 = 136315906;
      uint64_t v60 = "operator[]";
      __int16 v61 = 1024;
      int v62 = 789;
      __int16 v63 = 2048;
      uint64_t v64 = v8;
      __int16 v65 = 2048;
      uint64_t v66 = (uint64_t)v7;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_62;
    }
  }
  else
  {
    if (!*((void *)a4 + 1)) {
      goto LABEL_73;
    }
    *(_OWORD *)*((void *)a4 + 2) = xmmword_2343854A0;
    if (!*(void *)(a3 + 8))
    {
LABEL_74:
      uint64_t v58 = 0;
      long long v71 = 0u;
      long long v69 = 0u;
      long long v70 = 0u;
      uint64x2_t v67 = 0u;
      long long v68 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v59 = 136315906;
      uint64_t v60 = "operator[]";
      __int16 v61 = 1024;
      int v62 = 468;
      __int16 v63 = 2048;
      uint64_t v64 = 0;
      __int16 v65 = 2048;
      uint64_t v66 = 0;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v52 = *(void *)(a3 + 16);
    *(void *)uint64_t v52 = 0;
    *(float *)(v52 + 8) = (float)v56.u64[0];
    *(float *)(v52 + 12) = (float)v56.u64[1];
    *(_DWORD *)(v52 + 16) = 0;
    uint64_t v43 = (__int32 *)(v52 + 20);
LABEL_55:
    *uint64_t v43 = 1065353216;
  }
}

uint64_t re::RenderGraphContext::getRateMap(re::RenderGraphContext *this, unint64_t a2)
{
  uint64_t v2 = *((void *)this + 147);
  unint64_t v3 = *(void *)(v2 + 104);
  if (v3 > a2) {
    return *(void *)(v2 + 96) + 8 * a2;
  }
  re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, a2, v3);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::RenderGraphContext::getDefaultEncodeDrawCallDataStoreArgs@<X0>(re::RenderGraphContext *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t PipelineCompilationData = re::RenderGraphContext::tryGetPipelineCompilationData(this, *(void *)(*((void *)this + 5) + 48));
  uint64_t v5 = re::RenderGraphDataStore::tryGet<re::SceneScope>(*((void *)this + 146), *(void *)(*((void *)this + 5) + 48));
  uint64_t v6 = re::RenderGraphDataStore::tryGet<re::SceneIndexData>(*((void *)this + 146), *(void *)(*((void *)this + 5) + 48));
  uint64_t v7 = re::RenderGraphDataStore::tryGet<re::StencilInfoData>(*((void *)this + 146), *(void *)(*((void *)this + 5) + 48));
  uint64_t v8 = re::RenderGraphDataStore::tryGet<re::ViewportData>(*((void *)this + 146), *(void *)(*((void *)this + 5) + 48));
  uint64_t v9 = re::RenderGraphDataStore::tryGet<re::ViewportPercentData>(*((void *)this + 146), *(void *)(*((void *)this + 5) + 48));
  uint64_t v10 = re::RenderGraphDataStore::tryGet<re::TintContextData>(*((void *)this + 146), *(void *)(*((void *)this + 5) + 48));
  uint64_t v11 = re::RenderGraphDataStore::tryGet<re::VRRData>(*((void *)this + 146), *(void *)(*((void *)this + 5) + 48));
  uint64_t result = re::RenderGraphDataStore::tryGet<re::TriangleFillModeData>(*((void *)this + 146), *(void *)(*((void *)this + 5) + 48));
  *a2 = PipelineCompilationData;
  a2[1] = v5;
  a2[2] = v6;
  a2[3] = v7;
  a2[4] = v8;
  a2[5] = v9;
  a2[6] = v10;
  a2[7] = v11;
  a2[8] = result;
  return result;
}

uint64_t re::RenderGraphContext::tryGetPipelineCompilationData(re::RenderGraphContext *this, uint64_t a2)
{
  uint64_t result = re::RenderGraphDataStore::tryGet<re::PipelineCompilationData>(*((void *)this + 146), a2);
  if (!result)
  {
    uint64_t v4 = &unk_2687A0000;
    {
      uint64_t v4 = (void *)&unk_2687A0000;
      if (v7)
      {
        re::RenderGraphContext::tryGetPipelineCompilationData(unsigned long long)const::kPipelineCompilationDataScopeHash = re::hashString((re *)"PipelineCompilationData", v8);
        uint64_t v4 = (void *)&unk_2687A0000;
      }
    }
    uint64_t v5 = v4[82];
    uint64_t v6 = *((void *)this + 146);
    return re::RenderGraphDataStore::tryGet<re::PipelineCompilationData>(v6, v5);
  }
  return result;
}

#error "233BFEF04: call analysis failed (funcsize=962)"

uint64_t re::RenderGraphContext::rtResolution(re::RenderGraphContext *this)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(*((void *)this + 147) + 136);
  LODWORD(v3) = 0x7FFFFFFF;
  if (*(void *)(v2 + 656))
  {
    unint64_t v4 = *((void *)this + 5);
    unint64_t v5 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * (v4 ^ (v4 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v4 ^ (v4 >> 30))) >> 27));
    uint64_t v6 = *(unsigned int *)(*(void *)(v2 + 664) + 4 * ((v5 ^ (v5 >> 31)) % *(unsigned int *)(v2 + 680)));
    if (v6 != 0x7FFFFFFF)
    {
      uint64_t v7 = *(void *)(v2 + 672);
      if (*(void *)(v7 + 32 * v6 + 16) == v4)
      {
        LODWORD(v3) = v6;
      }
      else
      {
        uint64_t v3 = v6;
        while (1)
        {
          uint64_t v3 = *(_DWORD *)(v7 + 32 * v3 + 8) & 0x7FFFFFFF;
          if (v3 == 0x7FFFFFFF) {
            break;
          }
          if (*(void *)(v7 + 32 * v3 + 16) == v4) {
            goto LABEL_10;
          }
        }
        LODWORD(v3) = 0x7FFFFFFF;
      }
    }
  }
LABEL_10:
  unint64_t v8 = *(unsigned int *)(*(void *)(v2 + 672) + 32 * v3 + 24);
  unint64_t i = *(unsigned int **)(v2 + 352);
  if ((unint64_t)i <= v8)
  {
LABEL_20:
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v24 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v19 = 136315906;
    *(void *)&v19[4] = "operator[]";
    *(_WORD *)&v19[12] = 1024;
    *(_DWORD *)&v19[14] = 789;
    __int16 v20 = 2048;
    unint64_t v21 = v8;
    __int16 v22 = 2048;
    unsigned int v23 = i;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v10 = *(void *)(v2 + 368) + 192 * v8;
  uint64_t v11 = *(void *)(v10 + 56);
  if (!v11) {
    return 0x100000001;
  }
  unint64_t v8 = v11 << 6;
  for (unint64_t i = (unsigned int *)(*(void *)(v10 + 72) + 52); ; i += 16)
  {
    uint64_t v12 = *(void *)(*((void *)this + 147) + 136);
    uint64_t v13 = *(void *)(v12 + 296);
    unint64_t v14 = *i;
    uint64_t v15 = *(unsigned int **)(v13 + 16);
    if ((unint64_t)v15 <= v14)
    {
      long long v27 = 0u;
      long long v28 = 0u;
      long long v25 = 0u;
      long long v26 = 0u;
      long long v24 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)uint64_t v19 = 136315906;
      *(void *)&v19[4] = "operator[]";
      *(_WORD *)&v19[12] = 1024;
      *(_DWORD *)&v19[14] = 789;
      __int16 v20 = 2048;
      unint64_t v21 = v14;
      __int16 v22 = 2048;
      unsigned int v23 = v15;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_20;
    }
    uint64_t v16 = *(void *)(v13 + 32);
    if (!*(_DWORD *)(v16 + 48 * v14))
    {
      uint64_t v17 = v16 + 48 * v14;
      *(void *)uint64_t v19 = *(void *)(v17 + 8) >> 1;
      *(void *)&v19[8] = *(void *)(v17 + 24);
      re::RenderGraphResourceDescriptions::targetDescriptionSource(v12, (uint64_t)v19, (uint64_t)&v24);
      if (*(i - 12) - 1 <= 2) {
        break;
      }
    }
    v8 -= 64;
    if (!v8) {
      return 0x100000001;
    }
  }
  return *(void *)(re::RenderGraphExecutable::targetDescription(*((void *)this + 147), (uint64_t)&v24) + 12);
}

uint64_t re::MeshStats::setCurrentCategory(uint64_t result, int a2)
{
  if (*(unsigned __int8 *)(result + 120) != a2)
  {
    *(unsigned char *)(result + 120) = a2;
    switch(a2)
    {
      case 1:
        *(void *)(result + re::DynamicArray<re::RigComponentConstraint>::deinit((uint64_t)this + 96) = result + 32;
        *(void *)(result + 104) = result + 36;
        uint64_t v2 = result + 40;
        goto LABEL_9;
      case 2:
        *(void *)(result + re::DynamicArray<re::RigComponentConstraint>::deinit((uint64_t)this + 96) = result + 44;
        *(void *)(result + 104) = result + 48;
        uint64_t v2 = result + 52;
        goto LABEL_9;
      case 3:
        *(void *)(result + re::DynamicArray<re::RigComponentConstraint>::deinit((uint64_t)this + 96) = result + 56;
        *(void *)(result + 104) = result + 60;
        uint64_t v2 = result + 64;
        goto LABEL_9;
      case 4:
        *(void *)(result + re::DynamicArray<re::RigComponentConstraint>::deinit((uint64_t)this + 96) = result + 68;
        *(void *)(result + 104) = result + 72;
        uint64_t v2 = result + 76;
        goto LABEL_9;
      case 5:
        *(void *)(result + re::DynamicArray<re::RigComponentConstraint>::deinit((uint64_t)this + 96) = result + 80;
        *(void *)(result + 104) = result + 84;
        uint64_t v2 = result + 88;
LABEL_9:
        *(void *)(result + 112) = v2;
        break;
      default:
        *(void *)(result + re::DynamicArray<re::RigComponentConstraint>::deinit((uint64_t)this + 96) = 0;
        *(void *)(result + 104) = 0;
        *(unsigned char *)(result + 120) = 0;
        *(void *)(result + 112) = 0;
        break;
    }
  }
  return result;
}

#error "233BFFD48: call analysis failed (funcsize=591)"

void re::RenderGraphContext::acquireManagedBlitEncoder(uint64_t a1@<X0>, uint64_t a2@<X1>, re::RenderGraphNodeBase *a3@<X2>, void *a4@<X3>, void *a5@<X8>)
{
  uint64_t v53 = *MEMORY[0x263EF8340];
  id v9 = *(id *)(a2 + 16);
  id v41 = v9;
  int v10 = *(_DWORD *)(a1 + 1184);
  if (v10 == 1)
  {
    int v12 = 0;
LABEL_11:
    re::RenderGraphContext::releaseManagedEncoder((re::RenderGraphContext *)a1, v12);
    goto LABEL_12;
  }
  if (v10 != 2 && v10 != 4)
  {
    re::RenderGraphExecutable::addError(*(void *)(a1 + 1176), (uint64_t)&v48);
    if (void)v48 && (BYTE8(v48)) {
      (*(void (**)(void))(*(void *)v48 + 40))();
    }
    int v12 = 1;
    goto LABEL_11;
  }
LABEL_12:
  uint64_t v13 = (_anonymous_namespace_ *)re::RenderGraphContext::setupUsesCustomEncoders((re::RenderGraphContext *)a1);
  if (v13)
  {
    re::RenderGraphExecutable::addError(*(void *)(a1 + 1176), (uint64_t)&v48);
    if ((void)v48)
    {
      if (BYTE8(v48)) {
        (*(void (**)(void))(*(void *)v48 + 40))();
      }
    }
  }
  if (*(_DWORD *)(a1 + 1184) == 4)
  {
    if (re::RenderManager::splitCommandBuffersForDebugging(*(re::RenderManager **)(a1 + 8)))
    {
      uint64_t QueuedCommandBuffer = re::DrawingManager::createQueuedCommandBuffer(*(re::DrawingManager **)(*(void *)(a1 + 8)
                                                                                                 + 104));
      re::ObjCObject::operator=(&v41, (id *)(QueuedCommandBuffer + 16));
      id v15 = v41;
      [v15 setLabel:*re::RenderGraphNodeBase::getEncoderLabel(a3)];

      id v16 = v41;
      [v16 addCompletedHandler:&__block_literal_global_30];
    }
    *(_DWORD *)(a1 + 1184) = 2;
    uint64_t v17 = *(void *)(*(void *)(a1 + 1176) + 136);
    LODWORD(v18) = 0x7FFFFFFF;
    if (*(void *)(v17 + 656))
    {
      unint64_t v19 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * ((unint64_t)a3 ^ ((unint64_t)a3 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                              * ((unint64_t)a3 ^ ((unint64_t)a3 >> 30))) >> 27));
      uint64_t v20 = *(unsigned int *)(*(void *)(v17 + 664) + 4 * ((v19 ^ (v19 >> 31)) % *(unsigned int *)(v17 + 680)));
      if (v20 != 0x7FFFFFFF)
      {
        uint64_t v21 = *(void *)(v17 + 672);
        if (*(re::RenderGraphNodeBase **)(v21 + 32 * v20 + 16) == a3)
        {
          LODWORD(v18) = v20;
        }
        else
        {
          uint64_t v18 = v20;
          while (1)
          {
            uint64_t v18 = *(_DWORD *)(v21 + 32 * v18 + 8) & 0x7FFFFFFF;
            if (v18 == 0x7FFFFFFF) {
              break;
            }
            if (*(re::RenderGraphNodeBase **)(v21 + 32 * v18 + 16) == a3) {
              goto LABEL_28;
            }
          }
          LODWORD(v18) = 0x7FFFFFFF;
        }
      }
    }
LABEL_28:
    __int16 v22 = (char **)*(unsigned int *)(*(void *)(v17 + 672) + 32 * v18 + 24);
    unint64_t v23 = *(void *)(v17 + 352);
    if (v23 <= (unint64_t)v22) {
      goto LABEL_51;
    }
    uint64_t v40 = a4;
    uint64_t v24 = *(void *)(v17 + 368) + 192 * v22;
    uint64_t v25 = *(void *)(v24 + 56);
    if (v25)
    {
      unint64_t v23 = 0;
      uint64_t v26 = v25 << 6;
      long long v27 = (unsigned int *)(*(void *)(v24 + 72) + 52);
      __int16 v22 = &selRef_taskToken;
      while (1)
      {
        if (*(v27 - 12) == 4)
        {
          uint64_t v28 = *(void *)(*(void *)(a1 + 1176) + 136);
          uint64_t v29 = *(void *)(v28 + 296);
          uint64_t v30 = (char **)*v27;
          unint64_t v31 = *(void *)(v29 + 16);
          if (v31 <= (unint64_t)v30)
          {
            uint64_t v42 = 0;
            long long v51 = 0u;
            long long v52 = 0u;
            long long v49 = 0u;
            long long v50 = 0u;
            long long v48 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)uint64_t v43 = 136315906;
            *(void *)&v43[4] = "operator[]";
            *(_WORD *)&v43[12] = 1024;
            *(_DWORD *)&v43[14] = 789;
            __int16 v44 = 2048;
            uint64_t v45 = v30;
            __int16 v46 = 2048;
            unint64_t v47 = v31;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_51:
            uint64_t v42 = 0;
            long long v51 = 0u;
            long long v52 = 0u;
            long long v49 = 0u;
            long long v50 = 0u;
            long long v48 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)uint64_t v43 = 136315906;
            *(void *)&v43[4] = "operator[]";
            *(_WORD *)&v43[12] = 1024;
            *(_DWORD *)&v43[14] = 789;
            __int16 v44 = 2048;
            uint64_t v45 = v22;
            __int16 v46 = 2048;
            unint64_t v47 = v23;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
          uint64_t v32 = *(void *)(v29 + 32);
          int v33 = *(_DWORD *)(v32 + 48 * v30);
          if (v33 == 1)
          {
            uint64_t v36 = v32 + 48 * v30;
            *(void *)uint64_t v43 = *(void *)(v36 + 8) >> 1;
            *(void *)&v43[8] = *(void *)(v36 + 24);
            re::RenderGraphResourceDescriptions::bufferDescriptionSource(v28, (uint64_t)v43, (uint64_t)&v48);
            v23 |= (unint64_t)objc_msgSend(*(id *)re::RenderGraphContext::metalBuffer(a1, (uint64_t)&v48), sel_protectionOptions);
          }
          else if (!v33)
          {
            uint64_t v34 = v32 + 48 * v30;
            *(void *)uint64_t v43 = *(void *)(v34 + 8) >> 1;
            *(void *)&v43[8] = *(void *)(v34 + 24);
            re::RenderGraphResourceDescriptions::targetDescriptionSource(v28, (uint64_t)v43, (uint64_t)&v48);
            *(_DWORD *)(re::RenderGraphExecutable::targetDescription(*(void *)(a1 + 1176), (uint64_t)&v48) + 60) = 1;
            re::RenderGraphContext::metalTexture(a1, (uint64_t)&v48, 0, 0, (id *)v43);
            unint64_t v35 = (unint64_t)objc_msgSend(*(id *)v43, sel_protectionOptions);
            if (*(void *)v43) {

            }
            v23 |= v35;
          }
        }
        v27 += 16;
        v26 -= 64;
        if (!v26) {
          goto LABEL_42;
        }
      }
    }
    unint64_t v23 = 0;
LABEL_42:
    if ([v41 protectionOptions] != v23) {
      [v41 setProtectionOptions:v23];
    }
    re::mtl::CommandBuffer::makeBlitCommandEncoder(&v41, &v48);
    unint64_t v37 = *(long long **)(a1 + 1200);
    a4 = v40;
    if (v37 != &v48)
    {
      uint64_t v38 = v48;
      *(void *)&long long v48 = 0;
      uint64_t v39 = *(void **)v37;
      *(void *)unint64_t v37 = v38;
    }
    [**(id **)(a1 + 1200) setLabel:*re::RenderGraphNodeBase::getEncoderLabel(a3)];
    *(void *)(a1 + 1192) = v23;
    re::RenderGraphResourceAllocationManager::onAcquireEncoder<re::mtl::BlitCommandEncoder>(*(void *)(a1 + 32), *(id **)(a1 + 1200));
  }
  if (a4) {
    *a4 = *(void *)(a1 + 1192);
  }
  *a5 = **(id **)(a1 + 1200);
}

void re::RenderGraphContext::acquireManagedComputeEncoder(uint64_t a1@<X0>, id *a2@<X1>, re::RenderGraphNodeBase *a3@<X2>, void *a4@<X3>, void *a5@<X8>)
{
  uint64_t v61 = *MEMORY[0x263EF8340];
  long long v48 = *(_OWORD *)a2;
  id v9 = a2[2];
  id v10 = v9;
  id v49 = v9;
  int v11 = *(_DWORD *)(a1 + 1184);
  if (v11 != 1 && v11 != 4)
  {
    re::RenderGraphExecutable::addError(*(void *)(a1 + 1176), (uint64_t)&v56);
    if (void)v56 && (BYTE8(v56)) {
      (*(void (**)(void))(*(void *)v56 + 40))();
    }
    re::RenderGraphContext::releaseManagedEncoder((re::RenderGraphContext *)a1, 1);
  }
  uint64_t v13 = (_anonymous_namespace_ *)re::RenderGraphContext::setupUsesCustomEncoders((re::RenderGraphContext *)a1);
  if (v13)
  {
    re::RenderGraphExecutable::addError(*(void *)(a1 + 1176), (uint64_t)&v56);
    if ((void)v56)
    {
      if (BYTE8(v56)) {
        (*(void (**)(void))(*(void *)v56 + 40))();
      }
    }
  }
  uint64_t v14 = *(void *)(*(void *)(a1 + 1176) + 136);
  LODWORD(v15) = 0x7FFFFFFF;
  if (*(void *)(v14 + 656))
  {
    unint64_t v16 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * ((unint64_t)a3 ^ ((unint64_t)a3 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                            * ((unint64_t)a3 ^ ((unint64_t)a3 >> 30))) >> 27));
    uint64_t v17 = *(unsigned int *)(*(void *)(v14 + 664) + 4 * ((v16 ^ (v16 >> 31)) % *(unsigned int *)(v14 + 680)));
    if (v17 != 0x7FFFFFFF)
    {
      uint64_t v18 = *(void *)(v14 + 672);
      if (*(re::RenderGraphNodeBase **)(v18 + 32 * v17 + 16) == a3)
      {
        LODWORD(v15) = v17;
      }
      else
      {
        uint64_t v15 = v17;
        while (1)
        {
          uint64_t v15 = *(_DWORD *)(v18 + 32 * v15 + 8) & 0x7FFFFFFF;
          if (v15 == 0x7FFFFFFF) {
            break;
          }
          if (*(re::RenderGraphNodeBase **)(v18 + 32 * v15 + 16) == a3) {
            goto LABEL_22;
          }
        }
        LODWORD(v15) = 0x7FFFFFFF;
      }
    }
  }
LABEL_22:
  unint64_t v19 = &v56;
  unint64_t v20 = *(unsigned int *)(*(void *)(v14 + 672) + 32 * v15 + 24);
  unint64_t v21 = *(void *)(v14 + 352);
  if (v21 <= v20) {
    goto LABEL_51;
  }
  __int16 v44 = v10;
  uint64_t v45 = a4;
  __int16 v46 = a5;
  uint64_t v22 = *(void *)(v14 + 368) + 192 * v20;
  uint64_t v23 = *(void *)(v22 + 56);
  if (v23)
  {
    unint64_t v21 = 0;
    uint64_t v24 = v23 << 6;
    uint64_t v25 = (unsigned int *)(*(void *)(v22 + 72) + 52);
    unint64_t v20 = 1;
    while (1)
    {
      if (*(v25 - 12) == 5)
      {
        uint64_t v26 = *(void *)(*(void *)(a1 + 1176) + 136);
        uint64_t v27 = *(void *)(v26 + 296);
        unint64_t v28 = *v25;
        unint64_t v29 = *(void *)(v27 + 16);
        if (v29 <= v28)
        {
          uint64_t v50 = 0;
          long long v59 = 0u;
          long long v60 = 0u;
          long long v57 = 0u;
          long long v58 = 0u;
          long long v56 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)long long v51 = 136315906;
          *(void *)&v51[4] = "operator[]";
          *(_WORD *)&v51[12] = 1024;
          *(_DWORD *)&v51[14] = 789;
          __int16 v52 = 2048;
          unint64_t v53 = v28;
          __int16 v54 = 2048;
          unint64_t v55 = v29;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_51:
          uint64_t v50 = 0;
          v19[3] = 0u;
          v19[4] = 0u;
          long long v57 = 0u;
          long long v58 = 0u;
          long long v56 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)long long v51 = 136315906;
          *(void *)&v51[4] = "operator[]";
          *(_WORD *)&v51[12] = 1024;
          *(_DWORD *)&v51[14] = 789;
          __int16 v52 = 2048;
          unint64_t v53 = v20;
          __int16 v54 = 2048;
          unint64_t v55 = v21;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        uint64_t v30 = *(void *)(v27 + 32);
        int v31 = *(_DWORD *)(v30 + 48 * v28);
        if (v31 == 1)
        {
          uint64_t v34 = v30 + 48 * v28;
          *(void *)long long v51 = *(void *)(v34 + 8) >> 1;
          *(void *)&v51[8] = *(void *)(v34 + 24);
          re::RenderGraphResourceDescriptions::bufferDescriptionSource(v26, (uint64_t)v51, (uint64_t)&v56);
          v21 |= (unint64_t)objc_msgSend(*(id *)re::RenderGraphContext::metalBuffer(a1, (uint64_t)&v56), sel_protectionOptions);
        }
        else if (!v31)
        {
          uint64_t v32 = v30 + 48 * v28;
          *(void *)long long v51 = *(void *)(v32 + 8) >> 1;
          *(void *)&v51[8] = *(void *)(v32 + 24);
          re::RenderGraphResourceDescriptions::targetDescriptionSource(v26, (uint64_t)v51, (uint64_t)&v56);
          *(_DWORD *)(re::RenderGraphExecutable::targetDescription(*(void *)(a1 + 1176), (uint64_t)&v56) + 60) = 1;
          re::RenderGraphContext::metalTexture(a1, (uint64_t)&v56, 0, 0, (id *)v51);
          unint64_t v33 = (unint64_t)objc_msgSend(*(id *)v51, sel_protectionOptions);
          if (*(void *)v51) {

          }
          v21 |= v33;
        }
      }
      v25 += 16;
      v24 -= 64;
      if (!v24) {
        goto LABEL_36;
      }
    }
  }
  unint64_t v21 = 0;
LABEL_36:
  id v35 = v44;
  if ([v44 protectionOptions] != v21)
  {
    if (*(_DWORD *)(a1 + 1184) != 4) {
      re::RenderGraphContext::releaseManagedEncoder((re::RenderGraphContext *)a1, 0);
    }
    [v44 setProtectionOptions:v21];
  }
  if (*(_DWORD *)(a1 + 1184) != 4)
  {
    re::RenderGraphResourceAllocationManager::waitForFence<re::mtl::ComputeCommandEncoder>(*(void **)(a1 + 32), *(id **)(a1 + 1200));
    if (!v45) {
      goto LABEL_49;
    }
LABEL_48:
    *uint64_t v45 = *(void *)(a1 + 1192);
    goto LABEL_49;
  }
  if (re::RenderManager::splitCommandBuffersForDebugging(*(re::RenderManager **)(a1 + 8)))
  {
    uint64_t v36 = [v44 protectionOptions];
    uint64_t QueuedCommandBuffer = re::DrawingManager::createQueuedCommandBuffer(*(re::DrawingManager **)(*(void *)(a1 + 8)
                                                                                               + 104));
    long long v48 = *(_OWORD *)QueuedCommandBuffer;
    re::ObjCObject::operator=(&v49, (id *)(QueuedCommandBuffer + 16));
    id v38 = v49;
    [v38 setLabel:*re::RenderGraphNodeBase::getEncoderLabel(a3)];

    id v39 = v49;
    [v39 addCompletedHandler:&__block_literal_global_30];

    [v49 setProtectionOptions:v36];
    id v35 = v49;
  }
  *(_DWORD *)(a1 + 1184) = 1;
  uint64_t v40 = *(void *)(a1 + 8);
  id v47 = v35;
  re::RenderManager::makeComputeCommandEncoderWithMTLCounterSampling(v40, &v47, 1u, &v56);
  id v41 = *(long long **)(a1 + 1200);
  if (v41 != &v56)
  {
    uint64_t v42 = v56;
    *(void *)&long long v56 = 0;
    uint64_t v43 = *(void **)v41;
    *(void *)id v41 = v42;
  }
  [**(id **)(a1 + 1200) setLabel:*re::RenderGraphNodeBase::getEncoderLabel(a3)];
  *(void *)(a1 + 1192) = v21;
  re::RenderGraphResourceAllocationManager::onAcquireEncoder<re::mtl::ComputeCommandEncoder>(*(void *)(a1 + 32), *(id **)(a1 + 1200));
  if (v45) {
    goto LABEL_48;
  }
LABEL_49:
  *__int16 v46 = **(id **)(a1 + 1200);
}

void re::RenderGraphContext::metalTexture(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, id *a5@<X8>)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)(a1 + 1176);
  unint64_t v7 = *(unsigned int *)(a2 + 12);
  if (*(void *)(v6 + 56) <= v7)
  {
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    *(_OWORD *)int v12 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  id v10 = *(id *)(*(void *)(v6 + 64) + 8 * v7);
  *a5 = v10;
  if (a3)
  {
    if (objc_msgSend(v10, sel_pixelFormat) == (id)260)
    {
      id v11 = objc_msgSend(*a5, sel_newTextureViewWithPixelFormat_, 261);
    }
    else
    {
      if (objc_msgSend(*a5, sel_pixelFormat) != (id)255) {
        goto LABEL_9;
      }
      id v11 = objc_msgSend(*a5, sel_newTextureViewWithPixelFormat_, 262);
    }
    v12[0] = v11;
    NS::SharedPtr<MTL::Texture>::operator=(a5, v12);
    if (v12[0]) {
  }
    }
LABEL_9:
  if (!a4) {
    return;
  }
  if (objc_msgSend(*a5, sel_textureType))
  {
    if (objc_msgSend(*a5, sel_textureType) == (id)2)
    {
      re::makeView2DTo2DArray(a5, v12);
    }
    else
    {
      if (objc_msgSend(*a5, sel_textureType) != (id)4) {
        return;
      }
      re::makeView2DMultisampleTo2DMultisampleArray(a5, v12);
    }
  }
  else
  {
    re::makeView1DTo1DArray(a5, v12);
  }
  NS::SharedPtr<MTL::Texture>::operator=(a5, v12);
  if (v12[0]) {
}
  }

uint64_t re::RenderGraphContext::metalBuffer(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 1176);
  unint64_t v3 = *(unsigned int *)(a2 + 12);
  if (*(void *)(v2 + 80) <= v3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(v2 + 88) + 16 * v3;
}

uint64_t re::RenderGraphContext::isSetupParallel(re::RenderGraphContext *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 147) + 136);
  unint64_t v2 = *((unsigned int *)this + 12);
  if (*(void *)(v1 + 352) <= v2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(unsigned __int8 *)(*(void *)(v1 + 368) + 192 * v2 + 170);
}

void re::RenderGraphContext::rtAttachmentHandles(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) += 2;
  uint64_t v5 = *(void *)(*(void *)(a1 + 1176) + 136);
  LODWORD(v6) = 0x7FFFFFFF;
  if (*(void *)(v5 + 656))
  {
    unint64_t v7 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
    uint64_t v8 = *(unsigned int *)(*(void *)(v5 + 664) + 4 * ((v7 ^ (v7 >> 31)) % *(unsigned int *)(v5 + 680)));
    if (v8 != 0x7FFFFFFF)
    {
      uint64_t v9 = *(void *)(v5 + 672);
      if (*(void *)(v9 + 32 * v8 + 16) == a2)
      {
        LODWORD(v6) = v8;
      }
      else
      {
        uint64_t v6 = v8;
        while (1)
        {
          uint64_t v6 = *(_DWORD *)(v9 + 32 * v6 + 8) & 0x7FFFFFFF;
          if (v6 == 0x7FFFFFFF) {
            break;
          }
          if (*(void *)(v9 + 32 * v6 + 16) == a2) {
            goto LABEL_10;
          }
        }
        LODWORD(v6) = 0x7FFFFFFF;
      }
    }
  }
LABEL_10:
  id v10 = (unint64_t *)*(unsigned int *)(*(void *)(v5 + 672) + 32 * v6 + 24);
  unint64_t v11 = *(void *)(v5 + 352);
  if (v11 <= (unint64_t)v10) {
    goto LABEL_37;
  }
  uint64_t v12 = *(void *)(v5 + 368) + 192 * v10;
  uint64_t v13 = *(void *)(v12 + 56);
  if (v13)
  {
    id v10 = (unint64_t *)(a3 + 24);
    unint64_t v11 = v13 << 6;
    for (unint64_t i = (unsigned int *)(*(void *)(v12 + 72) + 52); ; i += 16)
    {
      uint64_t v15 = *(void *)(*(void *)(a1 + 1176) + 136);
      uint64_t v16 = *(void *)(v15 + 296);
      uint64_t v17 = (unint64_t *)*i;
      unint64_t v18 = *(void *)(v16 + 16);
      if (v18 <= (unint64_t)v17)
      {
        long long v44 = 0u;
        long long v45 = 0u;
        long long v42 = 0u;
        long long v43 = 0u;
        long long v41 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)uint64_t v36 = 136315906;
        *(void *)&v36[4] = "operator[]";
        *(_WORD *)&v36[12] = 1024;
        *(_DWORD *)&v36[14] = 789;
        __int16 v37 = 2048;
        id v38 = v17;
        __int16 v39 = 2048;
        unint64_t v40 = v18;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_37:
        long long v44 = 0u;
        long long v45 = 0u;
        long long v42 = 0u;
        long long v43 = 0u;
        long long v41 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)uint64_t v36 = 136315906;
        *(void *)&v36[4] = "operator[]";
        *(_WORD *)&v36[12] = 1024;
        *(_DWORD *)&v36[14] = 789;
        __int16 v37 = 2048;
        id v38 = v10;
        __int16 v39 = 2048;
        unint64_t v40 = v11;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      uint64_t v19 = *(void *)(v16 + 32);
      if (!*(_DWORD *)(v19 + 48 * v17))
      {
        unsigned int v20 = *(i - 12);
        BOOL v21 = v20 > 6;
        int v22 = (1 << v20) & 0x4E;
        if (!v21 && v22 != 0) {
          break;
        }
      }
LABEL_34:
      v11 -= 64;
      if (!v11) {
        return;
      }
    }
    uint64_t v24 = v19 + 48 * v17;
    *(void *)uint64_t v36 = *(void *)(v24 + 8) >> 1;
    *(void *)&v36[8] = *(void *)(v24 + 24);
    re::RenderGraphResourceDescriptions::targetDescriptionSource(v15, (uint64_t)v36, (uint64_t)&v41);
    if (*(void *)a3)
    {
      unint64_t v26 = *(void *)(a3 + 8);
      int v27 = *(_DWORD *)(a3 + 16);
      if (v27)
      {
        if (v26 - 8 < 0xFFFFFFFFFFFFFFF7)
        {
          unint64_t v29 = v26 + 1;
          unint64_t v30 = 16;
          goto LABEL_27;
        }
      }
      else
      {
        unint64_t v28 = *v10;
        if (v26 >= *v10)
        {
          unint64_t v29 = v26 + 1;
          if (v28 < v29)
          {
            unint64_t v30 = 2 * v28;
LABEL_27:
            if (v30 <= v29) {
              unint64_t v32 = v29;
            }
            else {
              unint64_t v32 = v30;
            }
            re::DynamicOverflowArray<re::RenderGraphTargetHandle,8ul>::setCapacity((uint64_t *)a3, v32);
            int v27 = *(_DWORD *)(a3 + 16);
          }
        }
      }
    }
    else
    {
      unint64_t v31 = *(void *)(a3 + 8) + 1;
      re::DynamicOverflowArray<re::RenderGraphTargetHandle,8ul>::setCapacity((uint64_t *)a3, v31);
      int v27 = *(_DWORD *)(a3 + 16) + 2;
      *(_DWORD *)(a3 + 16) = v27;
    }
    uint64_t v33 = a3 + 24;
    if ((v27 & 1) == 0) {
      uint64_t v33 = *(void *)(a3 + 32);
    }
    uint64_t v34 = *(void *)(a3 + 8);
    id v35 = (void *)(v33 + 16 * v34);
    *id v35 = 0;
    v35[1] = -1;
    *(_OWORD *)id v35 = v41;
    *(void *)(a3 + 8) = v34 + 1;
    *(_DWORD *)(a3 + 16) += 2;
    goto LABEL_34;
  }
}

void re::RenderGraphContext::rtInfo(re::RenderGraphContext *this@<X0>, re::RenderGraphNodeBase *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)(*((void *)this + 147) + 136);
  LODWORD(v7) = 0x7FFFFFFF;
  if (*(void *)(v6 + 656))
  {
    unint64_t v8 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * ((unint64_t)a2 ^ ((unint64_t)a2 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                           * ((unint64_t)a2 ^ ((unint64_t)a2 >> 30))) >> 27));
    uint64_t v9 = *(unsigned int *)(*(void *)(v6 + 664) + 4 * ((v8 ^ (v8 >> 31)) % *(unsigned int *)(v6 + 680)));
    if (v9 != 0x7FFFFFFF)
    {
      uint64_t v10 = *(void *)(v6 + 672);
      if (*(re::RenderGraphNodeBase **)(v10 + 32 * v9 + 16) == a2)
      {
        LODWORD(v7) = v9;
      }
      else
      {
        uint64_t v7 = v9;
        while (1)
        {
          uint64_t v7 = *(_DWORD *)(v10 + 32 * v7 + 8) & 0x7FFFFFFF;
          if (v7 == 0x7FFFFFFF) {
            break;
          }
          if (*(re::RenderGraphNodeBase **)(v10 + 32 * v7 + 16) == a2) {
            goto LABEL_10;
          }
        }
        LODWORD(v7) = 0x7FFFFFFF;
      }
    }
  }
LABEL_10:
  unint64_t v11 = *(unsigned int *)(*(void *)(v6 + 672) + 32 * v7 + 24);
  unint64_t v12 = *(void *)(v6 + 352);
  if (v12 <= v11)
  {
LABEL_44:
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v35 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)unint64_t v30 = 136315906;
    *(void *)&v30[4] = "operator[]";
    *(_WORD *)&v30[12] = 1024;
    *(_DWORD *)&v30[14] = 789;
    __int16 v31 = 2048;
    unint64_t v32 = v11;
    __int16 v33 = 2048;
    unint64_t v34 = v12;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v13 = *(void *)(v6 + 368);
  *(_DWORD *)(a3 + 48) = 0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 29) = 0u;
  uint64_t v14 = v13 + 192 * v11;
  uint64_t v15 = *(void *)(v14 + 56);
  if (v15)
  {
    uint64_t v16 = *(unsigned int **)(v14 + 72);
    uint64_t v17 = v15 << 6;
    while (1)
    {
      uint64_t v18 = *(void *)(*((void *)this + 147) + 136);
      uint64_t v19 = *(void *)(v18 + 296);
      unint64_t v12 = v16[13];
      unint64_t v20 = *(void *)(v19 + 16);
      if (v20 <= v12) {
        break;
      }
      uint64_t v21 = *(void *)(v19 + 32);
      if (!*(_DWORD *)(v21 + 48 * v12))
      {
        uint64_t v22 = v21 + 48 * v12;
        *(void *)unint64_t v30 = *(void *)(v22 + 8) >> 1;
        *(void *)&v30[8] = *(void *)(v22 + 24);
        re::RenderGraphResourceDescriptions::targetDescriptionSource(v18, (uint64_t)v30, (uint64_t)&v35);
        unsigned int v23 = v16[1];
        switch(v23)
        {
          case 3u:
            unsigned int v27 = *(_DWORD *)(re::RenderGraphExecutable::targetDescription(*((void *)this + 147), (uint64_t)&v35) + 20);
            if (v27 == -1)
            {
              re::RenderGraphContext::metalTexture((uint64_t)this, (uint64_t)&v35, 0, 0, (id *)v30);
              unsigned int v27 = objc_msgSend(*(id *)v30, sel_sampleCount);
              if (*(void *)v30) {
            }
              }
            *(_DWORD *)a3 = v27;
            *(_DWORD *)(a3 + 40) = *(_DWORD *)(re::RenderGraphExecutable::targetDescription(*((void *)this + 147), (uint64_t)&v35)+ 4);
            break;
          case 2u:
            unsigned int v28 = *(_DWORD *)(re::RenderGraphExecutable::targetDescription(*((void *)this + 147), (uint64_t)&v35) + 20);
            if (v28 == -1)
            {
              re::RenderGraphContext::metalTexture((uint64_t)this, (uint64_t)&v35, 0, 0, (id *)v30);
              unsigned int v28 = objc_msgSend(*(id *)v30, sel_sampleCount);
              if (*(void *)v30) {
            }
              }
            *(_DWORD *)a3 = v28;
            *(_DWORD *)(a3 + 36) = *(_DWORD *)(re::RenderGraphExecutable::targetDescription(*((void *)this + 147), (uint64_t)&v35)+ 4);
            break;
          case 1u:
            uint64_t v24 = re::RenderGraphExecutable::targetDescription(*((void *)this + 147), (uint64_t)&v35);
            unsigned int v25 = *(_DWORD *)(v24 + 20);
            if (v25 == -1)
            {
              re::RenderGraphContext::metalTexture((uint64_t)this, (uint64_t)&v35, 0, 0, (id *)v30);
              unsigned int v25 = objc_msgSend(*(id *)v30, sel_sampleCount);
              if (*(void *)v30) {
            }
              }
            *(_DWORD *)a3 = v25;
            re::RenderGraphContext::metalTexture((uint64_t)this, (uint64_t)&v35, 0, 0, (id *)v30);
            *(_DWORD *)(a3 + 4 * *v16 + 4) = objc_msgSend(*(id *)v30, sel_pixelFormat);
            if (*(void *)v30) {

            }
            BOOL v26 = *(_DWORD *)(v24 + 32) && !*(unsigned char *)(*(void *)(*((void *)this + 1) + 152) + 64)
               || *(unsigned char *)(*((void *)this + 2) + 66) != 0;
            *(_DWORD *)(a3 + 48) = v26;
            break;
        }
      }
      v16 += 16;
      v17 -= 64;
      if (!v17) {
        goto LABEL_38;
      }
    }
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v35 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)unint64_t v30 = 136315906;
    *(void *)&v30[4] = "operator[]";
    *(_WORD *)&v30[12] = 1024;
    *(_DWORD *)&v30[14] = 789;
    __int16 v31 = 2048;
    unint64_t v32 = v12;
    __int16 v33 = 2048;
    unint64_t v34 = v20;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_44;
  }
LABEL_38:
  if (*(unsigned char *)(v13 + 192 * v11 + 171))
  {
    uint64_t v29 = re::RenderGraphDataStore::tryGet<re::VRRData>(*((void *)this + 146), *((void *)a2 + 6));
    if (v29)
    {
      if (*(unsigned char *)(v29 + 12)) {
        *(unsigned char *)(a3 + 44) = 1;
      }
    }
  }
}

void re::RenderGraphContext::allocateRenderTargetsBeforeSetup(re::RenderGraphContext *this)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(*((void *)this + 147) + 136);
  unint64_t v4 = *((unsigned int *)this + 12);
  uint64_t v5 = *(const re::RenderGraphBufferDescription **)(v3 + 352);
  if ((unint64_t)v5 <= v4)
  {
LABEL_42:
    unint64_t v36 = 0;
    long long v50 = 0u;
    long long v51 = 0u;
    long long v48 = 0u;
    long long v49 = 0u;
    *(_OWORD *)id v47 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v39 = 136315906;
    uint64_t v40 = "operator[]";
    __int16 v41 = 1024;
    int v42 = 789;
    __int16 v43 = 2048;
    uint64_t v44 = v4;
    __int16 v45 = 2048;
    uint64_t v46 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_43:
    v32[0] = 0;
    long long v50 = 0u;
    long long v51 = 0u;
    long long v48 = 0u;
    long long v49 = 0u;
    *(_OWORD *)id v47 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v39 = 136315906;
    uint64_t v40 = "operator[]";
    __int16 v41 = 1024;
    int v42 = 468;
    __int16 v43 = 2048;
    uint64_t v44 = v4;
    __int16 v45 = 2048;
    uint64_t v46 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_44:
    v32[0] = 0;
    long long v50 = 0u;
    long long v51 = 0u;
    long long v48 = 0u;
    long long v49 = 0u;
    *(_OWORD *)id v47 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v39 = 136315906;
    uint64_t v40 = "operator[]";
    __int16 v41 = 1024;
    int v42 = 468;
    __int16 v43 = 2048;
    uint64_t v44 = v4;
    __int16 v45 = 2048;
    uint64_t v46 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v6 = *(void *)(v3 + 368);
  uint64_t v7 = v6 + 192 * v4;
  uint64_t v9 = *(void *)(v7 + 56);
  unint64_t v8 = (unint64_t *)(v7 + 56);
  if (v9)
  {
    unint64_t v11 = 0;
    unint64_t v12 = (void *)(v6 + 192 * v4 + 72);
    uint64_t v13 = 52;
    do
    {
      uint64_t v14 = *((void *)this + 147);
      uint64_t v15 = *(void *)(v14 + 136);
      uint64_t v16 = *(void *)(v15 + 296);
      unint64_t v4 = *(unsigned int *)(*v12 + v13);
      uint64_t v5 = *(const re::RenderGraphBufferDescription **)(v16 + 16);
      if ((unint64_t)v5 <= v4)
      {
        unint64_t v36 = 0;
        long long v50 = 0u;
        long long v51 = 0u;
        long long v48 = 0u;
        long long v49 = 0u;
        *(_OWORD *)id v47 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v39 = 136315906;
        uint64_t v40 = "operator[]";
        __int16 v41 = 1024;
        int v42 = 789;
        __int16 v43 = 2048;
        uint64_t v44 = v4;
        __int16 v45 = 2048;
        uint64_t v46 = v5;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_38:
        v32[0] = 0;
        long long v50 = 0u;
        long long v51 = 0u;
        long long v48 = 0u;
        long long v49 = 0u;
        *(_OWORD *)id v47 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v39 = 136315906;
        uint64_t v40 = "operator[]";
        __int16 v41 = 1024;
        int v42 = 468;
        __int16 v43 = 2048;
        uint64_t v44 = v1;
        __int16 v45 = 2048;
        uint64_t v46 = (const re::RenderGraphBufferDescription *)v2;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_39:
        id v38 = 0;
        long long v50 = 0u;
        long long v51 = 0u;
        long long v48 = 0u;
        long long v49 = 0u;
        *(_OWORD *)id v47 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v39 = 136315906;
        uint64_t v40 = "operator[]";
        __int16 v41 = 1024;
        int v42 = 468;
        __int16 v43 = 2048;
        uint64_t v44 = v1;
        __int16 v45 = 2048;
        uint64_t v46 = (const re::RenderGraphBufferDescription *)v2;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_40:
        v32[0] = 0;
        long long v50 = 0u;
        long long v51 = 0u;
        long long v48 = 0u;
        long long v49 = 0u;
        *(_OWORD *)id v47 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v39 = 136315906;
        uint64_t v40 = "operator[]";
        __int16 v41 = 1024;
        int v42 = 468;
        __int16 v43 = 2048;
        uint64_t v44 = v4;
        __int16 v45 = 2048;
        uint64_t v46 = v5;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_41:
        v32[0] = 0;
        long long v50 = 0u;
        long long v51 = 0u;
        long long v48 = 0u;
        long long v49 = 0u;
        *(_OWORD *)id v47 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v39 = 136315906;
        uint64_t v40 = "operator[]";
        __int16 v41 = 1024;
        int v42 = 468;
        __int16 v43 = 2048;
        uint64_t v44 = v4;
        __int16 v45 = 2048;
        uint64_t v46 = v5;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_42;
      }
      uint64_t v17 = *(void *)(v16 + 32);
      if (*(_DWORD *)(v17 + 48 * v4 + 32) == *((_DWORD *)this + 12))
      {
        int v18 = *(_DWORD *)(v17 + 48 * v4);
        if (v18 == 1)
        {
          uint64_t v22 = v17 + 48 * v4;
          unint64_t v23 = *(void *)(v22 + 8);
          unint64_t v4 = v22 + 8;
          unint64_t v36 = v23 >> 1;
          uint64_t v37 = *(void *)(v4 + 16);
          uint64_t v5 = (const re::RenderGraphBufferDescription *)re::RenderGraphExecutable::bufferDescription(v14, (uint64_t)&v36);
          if (*(void *)re::RenderGraphContext::metalBuffer((uint64_t)this, (uint64_t)&v36))
          {
            if (*(_DWORD *)v5 != 2 || *((unsigned char *)v5 + 16) == 0) {
              goto LABEL_35;
            }
            uint64_t v1 = *(void *)this;
            re::StringID::StringID((re::StringID *)&v34, (const StringID *)v4);
            id v38 = (id)((unint64_t)v34 >> 1);
            uint64_t v25 = *((void *)this + 147);
            unint64_t v4 = HIDWORD(v37);
            uint64_t v5 = *(const re::RenderGraphBufferDescription **)(v25 + 80);
            if ((unint64_t)v5 <= HIDWORD(v37)) {
              goto LABEL_41;
            }
          }
          else
          {
            uint64_t v29 = (re::RenderGraphResourceAllocationManager *)*((void *)this + 4);
            unint64_t v30 = HIDWORD(v37);
            re::StringID::StringID((re::StringID *)v32, (const StringID *)v4);
            re::RenderGraphResourceAllocationManager::makeBuffer(v29, v5, (const re::StringID *)v32, v30, &v33);
            id v34 = v33;
            LODWORD(v35) = 0;
            HIDWORD(v35) = objc_msgSend(v33, sel_length);
            uint64_t v31 = *((void *)this + 147);
            uint64_t v1 = HIDWORD(v37);
            unint64_t v2 = *(void *)(v31 + 80);
            if (v2 <= HIDWORD(v37)) {
              goto LABEL_39;
            }
            uint64_t v1 = *(void *)(v31 + 88) + 16 * HIDWORD(v37);
            NS::SharedPtr<MTL::Texture>::operator=((void **)v1, &v34);
            *(void *)(v1 + 8) = v35;
            if (v34)
            {

              id v34 = 0;
            }
            if (v33)
            {

              id v33 = 0;
            }
            re::StringID::destroyString((re::StringID *)v32);
            if (!*((unsigned char *)v5 + 16)) {
              goto LABEL_35;
            }
            uint64_t v1 = *(void *)this;
            re::StringID::StringID((re::StringID *)&v34, (const StringID *)v4);
            id v38 = (id)((unint64_t)v34 >> 1);
            uint64_t v25 = *((void *)this + 147);
            unint64_t v4 = HIDWORD(v37);
            uint64_t v5 = *(const re::RenderGraphBufferDescription **)(v25 + 80);
            if ((unint64_t)v5 <= HIDWORD(v37)) {
              goto LABEL_44;
            }
          }
          re::BufferTable::setBuffer((re::BufferTable *)(v1 + 480), (const re::WeakStringID *)&v38, *(void *)(v25 + 88) + 16 * v4);
LABEL_34:
          id v38 = 0;
          re::StringID::destroyString((re::StringID *)&v34);
          goto LABEL_35;
        }
        if (!v18)
        {
          uint64_t v19 = v17 + 48 * v4;
          unint64_t v20 = *(void *)(v19 + 8);
          unint64_t v4 = v19 + 8;
          v47[0] = (id)(v20 >> 1);
          v47[1] = *(id *)(v4 + 16);
          re::RenderGraphResourceDescriptions::targetDescriptionSource(v15, (uint64_t)v47, (uint64_t)&v36);
          uint64_t v5 = (const re::RenderGraphBufferDescription *)re::RenderGraphExecutable::targetDescription(*((void *)this + 147), (uint64_t)&v36);
          re::RenderGraphContext::metalTexture((uint64_t)this, (uint64_t)&v36, 0, 0, v47);
          if (v47[0])
          {

            if (*(_DWORD *)v5 != 2 || !*((unsigned char *)v5 + 36)) {
              goto LABEL_35;
            }
            uint64_t v1 = *(void *)this;
            re::StringID::StringID((re::StringID *)&v34, (const StringID *)v4);
            id v38 = (id)((unint64_t)v34 >> 1);
            uint64_t v21 = *((void *)this + 147);
            unint64_t v4 = HIDWORD(v37);
            uint64_t v5 = *(const re::RenderGraphBufferDescription **)(v21 + 56);
            if ((unint64_t)v5 <= HIDWORD(v37)) {
              goto LABEL_40;
            }
          }
          else
          {
            BOOL v26 = (re::RenderGraphResourceAllocationManager *)*((void *)this + 4);
            unint64_t v27 = HIDWORD(v37);
            re::StringID::StringID((re::StringID *)&v34, (const StringID *)v4);
            re::RenderGraphResourceAllocationManager::makeTexture(v26, v5, (const re::StringID *)&v34, v27, (unint64_t)&v38);
            uint64_t v28 = *((void *)this + 147);
            uint64_t v1 = HIDWORD(v37);
            unint64_t v2 = *(void *)(v28 + 56);
            if (v2 <= HIDWORD(v37)) {
              goto LABEL_38;
            }
            NS::SharedPtr<MTL::Texture>::operator=((void **)(*(void *)(v28 + 64) + 8 * HIDWORD(v37)), &v38);
            if (v38)
            {

              id v38 = 0;
            }
            re::StringID::destroyString((re::StringID *)&v34);
            if (!*((unsigned char *)v5 + 36)) {
              goto LABEL_35;
            }
            uint64_t v1 = *(void *)this;
            re::StringID::StringID((re::StringID *)&v34, (const StringID *)v4);
            id v38 = (id)((unint64_t)v34 >> 1);
            uint64_t v21 = *((void *)this + 147);
            unint64_t v4 = HIDWORD(v37);
            uint64_t v5 = *(const re::RenderGraphBufferDescription **)(v21 + 56);
            if ((unint64_t)v5 <= HIDWORD(v37)) {
              goto LABEL_43;
            }
          }
          re::DynamicTextureTableAdd((void *)(v1 + 368), &v38, (id *)(*(void *)(v21 + 64) + 8 * v4));
          goto LABEL_34;
        }
      }
LABEL_35:
      ++v11;
      v13 += 64;
    }
    while (*v8 > v11);
  }
}

_anonymous_namespace_ *re::RenderGraphContext::checkForReadAfterWriteDependenciesWait(re::RenderGraphContext *this)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(*((void *)this + 147) + 136);
  unint64_t v2 = *((unsigned int *)this + 12);
  if (*(void *)(v1 + 352) <= v2)
  {
LABEL_24:
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v28 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v4 = *(void *)(v1 + 368);
  uint64_t v5 = v4 + 192 * v2;
  uint64_t v7 = *(void *)(v5 + 56);
  uint64_t v6 = (unint64_t *)(v5 + 56);
  if (v7)
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    uint64_t v10 = (uint64_t *)(v4 + 192 * v2 + 72);
    while (1)
    {
      uint64_t v11 = *v10;
      uint64_t v12 = *(void *)(*(void *)(*((void *)this + 147) + 136) + 296);
      uint64_t v13 = *v10 + v8;
      unint64_t v14 = *(unsigned int *)(v13 + 52);
      if (*(void *)(v12 + 16) <= v14)
      {
        long long v31 = 0u;
        long long v32 = 0u;
        long long v29 = 0u;
        long long v30 = 0u;
        long long v28 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_24;
      }
      uint64_t v15 = *(void *)(v12 + 32);
      uint64_t v16 = (int *)(v15 + 48 * v14);
      int v17 = *(_DWORD *)(v13 + 4);
      if ((v17 - 1) >= 8 && v17 != 11)
      {
        if (!v17)
        {
          int v22 = *v16;
          if (v22 == 1)
          {
            int v25 = *(_DWORD *)(v11 + v8 + 44);
            BOOL v26 = (void *)(*((void *)this + 4) + 1368);
            LODWORD(v28) = *(_DWORD *)(v15 + 48 * v14 + 28);
            DWORD1(v28) = v25;
            re::DynamicArray<re::RenderGraphResourceAllocationManager::TextureIndexAndStage>::add(v26, &v28);
          }
          else if (!v22)
          {
            int v23 = *(_DWORD *)(v11 + v8 + 44);
            uint64_t v24 = (void *)(*((void *)this + 4) + 1328);
            LODWORD(v28) = *(_DWORD *)(v15 + 48 * v14 + 28);
            DWORD1(v28) = v23;
            re::DynamicArray<re::RenderGraphResourceAllocationManager::TextureIndexAndStage>::add(v24, &v28);
          }
        }
        goto LABEL_15;
      }
      if (*v16 == 1) {
        break;
      }
      if (!*v16)
      {
        uint64_t v19 = *((void *)this + 4);
        LODWORD(v28) = *(_DWORD *)(v15 + 48 * v14 + 28);
        unint64_t v20 = (void *)(v19 + 1408);
LABEL_14:
        re::DynamicArray<int>::add(v20, &v28);
      }
LABEL_15:
      ++v9;
      v8 += 64;
      if (*v6 <= v9) {
        return re::RenderGraphResourceAllocationManager::processResourceHazards(*((_anonymous_namespace_ **)this + 4));
      }
    }
    uint64_t v21 = *((void *)this + 4);
    LODWORD(v28) = *(_DWORD *)(v15 + 48 * v14 + 28);
    unint64_t v20 = (void *)(v21 + 1448);
    goto LABEL_14;
  }
  return re::RenderGraphResourceAllocationManager::processResourceHazards(*((_anonymous_namespace_ **)this + 4));
}

void re::RenderGraphContext::handleManagedForceClear(re::RenderGraphContext *this)
{
  uint64_t v1 = &v30;
  uint64_t v35 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(*((void *)this + 147) + 136);
  unint64_t v3 = *((unsigned int *)this + 12);
  unint64_t v4 = *(void *)(v2 + 352);
  if (v4 <= v3)
  {
LABEL_22:
    uint64_t v24 = 0;
    v1[4] = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)int v25 = 136315906;
    *(void *)&_OWORD v25[4] = "operator[]";
    *(_WORD *)&v25[12] = 1024;
    *(_DWORD *)&v25[14] = 789;
    __int16 v26 = 2048;
    unint64_t v27 = v3;
    __int16 v28 = 2048;
    unint64_t v29 = v4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v6 = *(void *)(v2 + 368);
  if ((re::RenderGraphContext::setupUsesCustomEncoders(this) & 1) == 0)
  {
    uint64_t v7 = v6 + 192 * v3;
    unint64_t v10 = *(void *)(v7 + 56);
    unint64_t v9 = (unint64_t *)(v7 + 56);
    unint64_t v8 = v10;
    if (v10)
    {
      uint64_t v11 = 0;
      unint64_t v12 = 0;
      unint64_t v3 = v6 + 192 * v3 + 72;
      while (1)
      {
        uint64_t v13 = *(void *)v3;
        uint64_t v14 = *(void *)(*((void *)this + 147) + 136);
        uint64_t v15 = *(void *)(v14 + 296);
        unint64_t v4 = *(unsigned int *)(*(void *)v3 + v11 + 52);
        unint64_t v16 = *(void *)(v15 + 16);
        if (v16 <= v4)
        {
          uint64_t v24 = 0;
          long long v34 = 0u;
          long long v32 = 0u;
          long long v33 = 0u;
          long long v30 = 0u;
          long long v31 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)int v25 = 136315906;
          *(void *)&_OWORD v25[4] = "operator[]";
          *(_WORD *)&v25[12] = 1024;
          *(_DWORD *)&v25[14] = 789;
          __int16 v26 = 2048;
          unint64_t v27 = v4;
          __int16 v28 = 2048;
          unint64_t v29 = v16;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_22;
        }
        uint64_t v17 = *(void *)(v15 + 32);
        if (!*(_DWORD *)(v17 + 48 * v4)) {
          break;
        }
LABEL_17:
        ++v12;
        v11 += 64;
        if (v8 <= v12) {
          return;
        }
      }
      uint64_t v18 = v17 + 48 * v4;
      *(void *)int v25 = *(void *)(v18 + 8) >> 1;
      *(void *)&v25[8] = *(void *)(v18 + 24);
      re::RenderGraphResourceDescriptions::targetDescriptionSource(v14, (uint64_t)v25, (uint64_t)&v30);
      uint64_t v19 = re::RenderGraphExecutable::targetDescription(*((void *)this + 147), (uint64_t)&v30);
      int v20 = *(_DWORD *)(v13 + v11 + 4);
      if (v20 == 3)
      {
        if ((*(_DWORD *)(v19 + 4) - 253) <= 9 && ((1 << (*(unsigned char *)(v19 + 4) + 3)) & 0x385) != 0)
        {
LABEL_15:
          if (*(unsigned char *)(v13 + v11 + 32))
          {
            uint64_t v22 = re::DrawingManager::currentCommandBuffer(*(re::DrawingManager **)(*((void *)this + 1) + 104));
            re::RenderGraphContext::acquireManagedRenderEncoder(v23, this, v22, 0);
            re::mtl::RenderCommandEncoder::~RenderCommandEncoder((re::mtl::RenderCommandEncoder *)v23);
            return;
          }
        }
      }
      else if ((v20 - 1) < 2)
      {
        goto LABEL_15;
      }
      unint64_t v8 = *v9;
      goto LABEL_17;
    }
  }
}

uint64_t re::RenderGraphContext::setupUsesCustomEncoders(re::RenderGraphContext *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 147) + 136);
  unint64_t v2 = *((unsigned int *)this + 12);
  if (*(void *)(v1 + 352) <= v2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(unsigned __int8 *)(*(void *)(v1 + 368) + 192 * v2 + 169);
}

uint64_t re::RenderGraphContext::encodeDrawBasedClear(re::FrameContext **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,re::DynamicString *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,int a38,uint64_t a39,uint64_t a40,int a41,uint64_t a42,uint64_t a43,int a44,uint64_t a45,id a46,int a47,uint64_t a48,long long a49,long long a50,long long a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,unint64_t a58,uint64_t a59,long long a60,long long a61,long long a62,long long a63)
{
  STACK[0xA48] = *MEMORY[0x263EF8340];
  *(_OWORD *)&STACK[0x9B0] = 0u;
  *(_OWORD *)&STACK[0x9A0] = 0u;
  *(_OWORD *)&STACK[0x990] = 0u;
  *(_OWORD *)&STACK[0x980] = 0u;
  *(_OWORD *)&STACK[0x970] = 0u;
  *(_OWORD *)&STACK[0x960] = 0u;
  *(_OWORD *)&STACK[0x950] = 0u;
  *(_OWORD *)&STACK[0x940] = 0u;
  uint64_t v66 = *((void *)*a1 + 3);
  a58 = 0;
  a57 = 0;
  a59 = 0;
  a54 = 0;
  a55 = 0;
  a56 = 0;
  uint64_t v67 = re::RenderGraphDataStore::tryGet<re::ViewportPercentData>((uint64_t)a1[146], *((void *)a1[5] + 6));
  uint64_t v161 = a3;
  if (v67)
  {
    BOOL v160 = *(unsigned char *)(v67 + 65) != 0;
    unsigned int v68 = *(unsigned __int8 *)(v67 + 64);
  }
  else
  {
    BOOL v160 = 0;
    unsigned int v68 = 1;
  }
  unsigned int v166 = v68;
  unint64_t v69 = v68;
  re::FixedArray<re::mtl::Viewport>::init<>(&a57, v66, v68);
  re::FixedArray<re::Vector4<float>>::init<>(&a54, v66, v69);
  uint64_t v70 = re::RenderGraphDataStore::tryGet<re::ViewportData>((uint64_t)a1[146], *((void *)a1[5] + 6));
  re::RenderGraphContext::selectViewport((unint64_t)a1, v70, (uint64_t)&a57, (_anonymous_namespace_ *)&a54, 0);
  STACK[0x938] = 0;
  *(_OWORD *)&STACK[0x910] = 0u;
  *(_OWORD *)&STACK[0x920] = 0u;
  *(_OWORD *)&STACK[0x8F0] = 0u;
  *(_OWORD *)&STACK[0x900] = 0u;
  *(_OWORD *)&STACK[0x8D0] = 0u;
  *(_OWORD *)&STACK[0x8E0] = 0u;
  LOBYTE(STACK[0x7A0]) = 0;
  LOBYTE(STACK[0x7C8]) = 0;
  *(_OWORD *)&STACK[0x7F0] = 0u;
  *(_OWORD *)&STACK[0x800] = 0u;
  uint64_t v72 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&STACK[0x7F0], 0);
  *(_OWORD *)&STACK[0x810] = 0u;
  *(_OWORD *)&STACK[0x820] = 0u;
  re::DynamicString::setCapacity(&STACK[0x810], 0);
  STACK[0x850] = 0;
  STACK[0x840] = 0;
  STACK[0x830] = 0;
  STACK[0x838] = 0;
  LODWORD(STACK[0x848]) = 0;
  uint64_t v73 = 208;
  LOBYTE(STACK[0x860]) = 0;
  do
  {
    *((unsigned char *)&STACK[0x7A0] + v73) = 0;
    v73 += 8;
  }
  while (v73 != 272);
  LOBYTE(STACK[0x8B0]) = 0;
  LOBYTE(STACK[0x8B8]) = 0;
  LOBYTE(STACK[0x8C0]) = 0;
  LOBYTE(a49) = 0;
  *((void *)&a51 + 1) = 0x700000007;
  *(_DWORD *)((char *)&a52 + 1) = -1;
  HIWORD(a52) = 0;
  uint64_t v74 = *(void *)(a2 + 56);
  if (v74)
  {
    unsigned int v162 = 0;
    BOOL v168 = 0;
    unint64_t v176 = 0;
    int v172 = 0;
    int v174 = 0;
    uint64_t v75 = *(unsigned int **)(a2 + 72);
    uint64_t v76 = v74 << 6;
    unsigned int v170 = 0;
    while (1)
    {
      unsigned int v77 = v75[1];
      BOOL v78 = v77 > 0xB;
      int v79 = (1 << v77) & 0xE31;
      if (v78 || v79 == 0) {
        break;
      }
LABEL_12:
      v75 += 16;
      v76 -= 64;
      if (!v76) {
        goto LABEL_80;
      }
    }
    a46 = 0;
    uint64_t v81 = *(void *)(*((void *)a1[147] + 17) + 296);
    unint64_t v82 = (char *)v75[13];
    unint64_t v83 = *(void *)(v81 + 16);
    if (v83 <= (unint64_t)v82) {
      goto LABEL_136;
    }
    uint64_t v84 = *(void *)(v81 + 32) + 48 * v82;
    STACK[0x9F0] = *(void *)(v84 + 8) >> 1;
    STACK[0x9F8] = *(void *)(v84 + 24);
    re::RenderGraphContext::metalTexture((uint64_t)a1, (uint64_t)&STACK[0x9F0], 0, 0, (id *)&a60);
    NS::SharedPtr<MTL::Texture>::operator=(&a46, (void **)&a60);
    if ((void)a60) {

    }
    uint64_t v85 = (unsigned int *)re::RenderGraphCompiled::targetDescription(*((void *)a1[147] + 17), (uint64_t)&STACK[0x9F0]);
    unint64_t v87 = v85[5];
    unint64_t v86 = v85[6];
    unint64_t v88 = v85[20];
    *(void *)&a60 = 0;
    unsigned int v89 = v75[1];
    if (v89 - 6 <= 2)
    {
      uint64_t v90 = *(void *)(*((void *)a1[147] + 17) + 296);
      if (*(void *)(v90 + 16) > v88)
      {
        uint64_t v91 = *(void *)(v90 + 32) + 48 * v88;
        STACK[0x9F0] = *(void *)(v91 + 8) >> 1;
        STACK[0x9F8] = *(void *)(v91 + 24);
        re::RenderGraphContext::metalTexture((uint64_t)a1, (uint64_t)&STACK[0x9F0], 0, 0, (id *)&STACK[0x9C0]);
        NS::SharedPtr<MTL::Texture>::operator=((void **)&a60, (void **)&STACK[0x9C0]);
        if (STACK[0x9C0]) {

        }
        re::RenderGraphCompiled::targetDescription(*((void *)a1[147] + 17), (uint64_t)&STACK[0x9F0]);
        unsigned int v89 = v75[1];
      }
    }
    if (v89 - 6 < 3)
    {
      id v92 = (id)a60;
      if (!(void)a60)
      {
        unint64_t v87 = 4;
        goto LABEL_29;
      }
    }
    else
    {
      if (v89 - 1 > 2)
      {
LABEL_30:
        if (v89 - 1 <= 2)
        {
          if (a46)
          {
            unint64_t v176 = (unint64_t)objc_msgSend(a46, sel_arrayLength);
            unsigned int v89 = v75[1];
          }
          else
          {
            unint64_t v176 = v86;
          }
        }
        switch(v89)
        {
          case 1u:
            *((_OWORD *)&STACK[0x940] + *v75) = *((_OWORD *)v75 + 1);
            id v93 = a46;
            if (!a46) {
              goto LABEL_44;
            }
            goto LABEL_43;
          case 2u:
            unsigned int v170 = v75[4];
            id v94 = a46;
            if (a46) {
              goto LABEL_51;
            }
            goto LABEL_52;
          case 3u:
            unsigned int v162 = v75[4];
            id v95 = a46;
            if (a46) {
              goto LABEL_57;
            }
            goto LABEL_58;
          case 6u:
            id v93 = (id)a60;
            if (!(void)a60) {
              id v93 = a46;
            }
LABEL_43:
            LODWORD(v93) = objc_msgSend(v93, sel_pixelFormat);
LABEL_44:
            uint64_t v96 = &STACK[0x7A0] + *v75;
            if (!*((unsigned char *)v96 + 208)) {
              *((unsigned char *)v96 + 208) = 1;
            }
            *((_DWORD *)v96 + 53) = v93;
            char v97 = *((unsigned char *)v75 + 48);
            uint64_t v98 = *v75;
            *((unsigned char *)&STACK[0x938] + v98) = v97;
            uint64_t v99 = 88;
            if ((int)v93 <= 52)
            {
              switch((int)v93)
              {
                case 1:
                case 10:
                case 11:
                case 12:
                case 20:
                case 22:
                case 25:
LABEL_62:
                  uint64_t v99 = 64;
                  break;
                case 13:
                case 23:
LABEL_67:
                  uint64_t v99 = 32;
                  break;
                case 14:
                case 24:
LABEL_68:
                  uint64_t v99 = 0;
                  break;
                case 30:
                case 31:
                case 32:
LABEL_65:
                  uint64_t v99 = 72;
                  break;
                case 33:
LABEL_64:
                  uint64_t v99 = 40;
                  break;
                case 34:
LABEL_66:
                  uint64_t v99 = 8;
                  break;
                default:
                  break;
              }
            }
            else if ((int)v93 > 102)
            {
              switch((int)v93)
              {
                case 'g':
                  goto LABEL_64;
                case 'h':
                  goto LABEL_66;
                case 'i':
                  goto LABEL_65;
                case 'j':
                case 'k':
                case 'l':
                case 'm':
                case 'n':
                case 'o':
                case 'p':
                  break;
                case 'q':
                  goto LABEL_73;
                case 'r':
                  goto LABEL_71;
                default:
                  if (v93 == 123)
                  {
LABEL_73:
                    uint64_t v99 = 56;
                  }
                  else if (v93 == 124)
                  {
LABEL_71:
                    uint64_t v99 = 24;
                  }
                  break;
              }
            }
            else
            {
              switch((int)v93)
              {
                case '5':
                  goto LABEL_67;
                case '6':
                  goto LABEL_68;
                case '7':
                  goto LABEL_62;
                case '8':
                case '9':
                case ':':
                case ';':
                case '=':
                case 'B':
                case 'C':
                case 'D':
                case 'E':
                case 'F':
                case 'G':
                case 'H':
                  break;
                case '<':
                case '>':
                case 'A':
                  goto LABEL_65;
                case '?':
                  goto LABEL_64;
                case '@':
                  goto LABEL_66;
                case 'I':
                  goto LABEL_73;
                case 'J':
                  goto LABEL_71;
                default:
                  if (v93 == 91) {
                    goto LABEL_73;
                  }
                  break;
              }
            }
            *((unsigned char *)&STACK[0x8D0] + v99 + v98) = v97;
            break;
          case 7u:
            id v94 = (id)a60;
            if (!(void)a60) {
              id v94 = a46;
            }
LABEL_51:
            LODWORD(v94) = objc_msgSend(v94, sel_pixelFormat);
LABEL_52:
            if (!LOBYTE(STACK[0x8B0])) {
              LOBYTE(STACK[0x8B0]) = 1;
            }
            LODWORD(STACK[0x8B4]) = v94;
            BYTE5(a52) = ((v94 - 250) < 0xB) & (0x425u >> ((_BYTE)v94 + 6));
            LOBYTE(a52) = 7;
            int v172 = 1;
            break;
          case 8u:
            id v95 = (id)a60;
            if (!(void)a60) {
              id v95 = a46;
            }
LABEL_57:
            LODWORD(v95) = objc_msgSend(v95, sel_pixelFormat);
LABEL_58:
            if (!LOBYTE(STACK[0x8B8])) {
              LOBYTE(STACK[0x8B8]) = 1;
            }
            LODWORD(STACK[0x8BC]) = v95;
            *((void *)&a51 + 1) = 0x200000702000007;
            BOOL v168 = *((unsigned char *)v75 + 48) != 0;
            int v174 = 1;
            break;
          default:
            break;
        }
        if ((void)a60) {

        }
        if (a46) {
        goto LABEL_12;
        }
      }
      id v92 = a46;
      if (!a46)
      {
LABEL_29:
        STACK[0x858] = v87;
        unsigned int v89 = v75[1];
        goto LABEL_30;
      }
    }
    unint64_t v87 = (unint64_t)objc_msgSend(v92, sel_sampleCount);
    goto LABEL_29;
  }
  int v174 = 0;
  int v172 = 0;
  unint64_t v176 = 0;
  BOOL v168 = 0;
  unsigned int v162 = 0;
  unsigned int v170 = 0;
LABEL_80:
  STACK[0x830] = v66;
  unint64_t v100 = (_anonymous_namespace_ *)re::DynamicArray<re::TechniqueFunctionConstant>::setCapacity(&STACK[0x830], 0x60uLL);
  uint64_t v101 = 0;
  ++LODWORD(STACK[0x848]);
  unint64_t v82 = (char *)&a62 + 8;
  do
  {
    a60 = 0u;
    a61 = 0u;
    re::DynamicString::setCapacity(&a60, 0);
    *((void *)&a62 + 1) = 0;
    a63 = 0uLL;
    re::FixedArray<BOOL>::init<>((void *)&a62 + 1, v66, 1);
    if (!(void)a63)
    {
      a46 = 0;
      *(_OWORD *)&STACK[0xA30] = 0u;
      *(_OWORD *)&STACK[0xA20] = 0u;
      *(_OWORD *)&STACK[0xA10] = 0u;
      *(_OWORD *)&STACK[0xA00] = 0u;
      *(_OWORD *)&STACK[0x9F0] = 0u;
      unint64_t v83 = &_os_log_internal;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      LODWORD(STACK[0x9C0]) = 136315906;
      STACK[0x9C4] = (unint64_t)"operator[]";
      LOWORD(STACK[0x9CC]) = 1024;
      LODWORD(STACK[0x9CE]) = 468;
      LOWORD(STACK[0x9D2]) = 2048;
      STACK[0x9D4] = 0;
      LOWORD(STACK[0x9DC]) = 2048;
      STACK[0x9DE] = 0;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_136:
      STACK[0x9C0] = 0;
      *(_OWORD *)&STACK[0xA30] = 0u;
      *(_OWORD *)&STACK[0xA20] = 0u;
      *(_OWORD *)&STACK[0xA10] = 0u;
      *(_OWORD *)&STACK[0xA00] = 0u;
      *(_OWORD *)&STACK[0x9F0] = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      LODWORD(a60) = 136315906;
      *(void *)((char *)&a60 + 4) = "operator[]";
      WORD6(a60) = 1024;
      *(_DWORD *)((char *)&a60 + 14) = 789;
      WORD1(a61) = 2048;
      *(void *)((char *)&a61 + 4) = v82;
      WORD6(a61) = 2048;
      *(void *)((char *)&a61 + 14) = v83;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    **((unsigned char **)&a63 + 1) = *((unsigned char *)&STACK[0x8D0] + v101);
    LOWORD(a62) = 53;
    WORD1(a62) = v101;
    unint64_t v102 = STACK[0x840];
    if (STACK[0x840] >= STACK[0x838])
    {
      re::DynamicArray<re::TechniqueFunctionConstant>::growCapacity(&STACK[0x830], v102 + 1);
      unint64_t v102 = STACK[0x840];
    }
    unint64_t v103 = STACK[0x850] + (v102 << 6);
    *(_OWORD *)unint64_t v103 = 0u;
    *(_OWORD *)(v103 + 16) = 0u;
    *(void *)unint64_t v103 = a60;
    *(void *)&a60 = 0;
    uint64_t v104 = *(void *)(v103 + 16);
    *(void *)(v103 + 16) = a61;
    *(void *)&a61 = v104;
    *(void *)(v103 + 24) = *((void *)&a61 + 1);
    *((void *)&a61 + 1) = 0;
    uint64_t v105 = *(void *)(v103 + 8);
    *(void *)(v103 + 8) = *((void *)&a60 + 1);
    *((void *)&a60 + 1) = v105;
    *(_DWORD *)(v103 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = a62;
    *(void *)(v103 + 48) = 0;
    *(void *)(v103 + 56) = 0;
    *(void *)(v103 + 40) = 0;
    *(void *)(v103 + 40) = *((void *)&a62 + 1);
    *((void *)&a62 + 1) = 0;
    *(void *)(v103 + 48) = a63;
    *(void *)&a63 = 0;
    uint64_t v106 = *(void *)(v103 + 56);
    *(void *)(v103 + 56) = *((void *)&a63 + 1);
    *((void *)&a63 + 1) = v106;
    ++STACK[0x840];
    ++LODWORD(STACK[0x848]);
    if (*((void *)&a62 + 1)) {
      *((void *)&a62 + 1) = 0;
    }
    unint64_t v100 = (_anonymous_namespace_ *)a60;
    if (void)a60 && (BYTE8(a60)) {
      unint64_t v100 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)a60 + 40))();
    }
    ++v101;
  }
  while (v101 != 96);
  if (*((unsigned char *)a1[1] + 302))
  {
    if (!LOBYTE(STACK[0x860])) {
      LOBYTE(STACK[0x860]) = 1;
    }
    STACK[0x868] = 2;
  }
  STACK[0x7F0] = v66;
  re::DynamicString::setCapacity(&STACK[0x7F0], 0);
  STACK[0x9F0] = (unint64_t)"vertexShaderClearAll";
  STACK[0x9F8] = 20;
  re::DynamicString::operator=((re::DynamicString *)&STACK[0x7F0], (uint64_t)&STACK[0x9F0]);
  uint64_t v107 = 0;
  while (!*((unsigned char *)&STACK[0x938] + v107))
  {
    if (++v107 == 8) {
      goto LABEL_99;
    }
  }
  STACK[0x810] = v66;
  re::DynamicString::setCapacity(&STACK[0x810], 0);
  STACK[0x9F0] = (unint64_t)"fragmentShaderClearAll";
  STACK[0x9F8] = 22;
  re::DynamicString::operator=((re::DynamicString *)&STACK[0x810], (uint64_t)&STACK[0x9F0]);
LABEL_99:
  LOBYTE(STACK[0x8C0]) = 1;
  RenderPipelineState = (void *)re::getOrCreateRenderPipelineState((uint64_t *)a1[1], (uint64_t)&STACK[0x7A0]);
  (*(void (**)(void, char *, void))(*(void *)(v161 + 8) + 56))(**(void **)(v161 + 8), sel_setRenderPipelineState_, *RenderPipelineState);
  if ((v172 | v174))
  {
    DepthStencilState = (void *)re::getOrCreateDepthStencilState((uint64_t)a1[1], (uint64_t)a1[3], (uint64_t)&a49, v109);
    (*(void (**)(void, char *, void))(*(void *)(v161 + 8) + 112))(**(void **)(v161 + 8), sel_setDepthStencilState_, *DepthStencilState);
    if (v168) {
      (*(void (**)(void, char *, void))(*(void *)(v161 + 8) + 120))(**(void **)(v161 + 8), sel_setStencilReferenceValue_, v162);
    }
  }
  if (_BYTE)a49 && *((void *)&a49 + 1) && (a50) {
    (*(void (**)(void))(**((void **)&a49 + 1) + 40))();
  }
  re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)&STACK[0x830]);
  if (STACK[0x810])
  {
    if (STACK[0x818]) {
      (*(void (**)(unint64_t, unint64_t))(*(void *)STACK[0x810] + 40))(STACK[0x810], STACK[0x820]);
    }
    *(_OWORD *)&STACK[0x810] = 0u;
    *(_OWORD *)&STACK[0x820] = 0u;
  }
  if (STACK[0x7F0])
  {
    if (STACK[0x7F8]) {
      (*(void (**)(unint64_t, unint64_t))(*(void *)STACK[0x7F0] + 40))(STACK[0x7F0], STACK[0x800]);
    }
    *(_OWORD *)&STACK[0x7F0] = 0u;
    *(_OWORD *)&STACK[0x800] = 0u;
  }
  if (LOBYTE(STACK[0x7C8]) && STACK[0x7D0])
  {
    if (STACK[0x7D8]) {
      (*(void (**)(unint64_t, unint64_t))(*(void *)STACK[0x7D0] + 40))(STACK[0x7D0], STACK[0x7E0]);
    }
    *(_OWORD *)&STACK[0x7D0] = 0u;
    *(_OWORD *)&STACK[0x7E0] = 0u;
  }
  if (LOBYTE(STACK[0x7A0]) && STACK[0x7A8] && (STACK[0x7B0] & 1) != 0) {
    (*(void (**)(unint64_t, unint64_t))(*(void *)STACK[0x7A8] + 40))(STACK[0x7A8], STACK[0x7B8]);
  }
  (*(void (**)(void, char *, uint64_t))(*(void *)(v161 + 8) + 64))(**(void **)(v161 + 8), sel_setCullMode_, 2);
  (*(void (**)(void, char *, uint64_t))(*(void *)(v161 + 8) + 136))(**(void **)(v161 + 8), sel_setFrontFacingWinding_, 1);
  re::mtl::RenderCommandEncoder::setViewports(v161);
  re::setVertexAmplificationCount((_anonymous_namespace_ *)*((unsigned __int8 *)a1[1] + 302), v160, a58, 0xFFFF, v161, v111);
  *(void *)&long long v112 = __PAIR64__(1.0, -1.0);
  LODWORD(v113) = -1.0;
  *((void *)&v112 + 1) = __PAIR64__(1.0, v170);
  *(void *)&long long v114 = __PAIR64__(-1.0, 1.0);
  DWORD1(v113) = -1.0;
  *((void *)&v113 + 1) = __PAIR64__(1.0, v170);
  *(_OWORD *)&STACK[0x9F0] = v112;
  *(_OWORD *)&STACK[0xA00] = v113;
  *((void *)&v114 + 1) = __PAIR64__(1.0, v170);
  __asm { FMOV            V0.4S, #1.0 }
  DWORD2(_Q0) = v170;
  *(_OWORD *)&STACK[0xA10] = v114;
  *(_OWORD *)&STACK[0xA20] = _Q0;
  (*(void (**)(void, char *, unint64_t *, uint64_t, void))(*(void *)(v161 + 8) + 8))(**(void **)(v161 + 8), sel_setVertexBytes_length_atIndex_, &STACK[0x9F0], 64, 0);
  a62 = 0u;
  a63 = 0u;
  a61 = 0u;
  re::FrameContext::perFrameAlloc(*a1, 0x80uLL, 0x80uLL, (uint64_t)&STACK[0x7A0]);
  unint64_t v119 = STACK[0x7B0];
  unint64_t v120 = STACK[0x7A0] + LODWORD(STACK[0x7A8]);
  *(_DWORD *)(v120 + 16) = 0;
  *(_DWORD *)(v120 + 28) = 1;
  *(_OWORD *)(v120 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = a60;
  *(_OWORD *)(v120 + 48) = a61;
  *(_OWORD *)(v120 + 64) = a62;
  *(_OWORD *)(v120 + 80) = a63;
  (*(void (**)(void, char *, unint64_t))(*(void *)(v161 + 8) + 16))(**(void **)(v161 + 8), sel_setVertexBuffer_offset_atIndex_, v119);
  a50 = 0u;
  a51 = 0u;
  re::FrameContext::perFrameAlloc(*a1, 0x400uLL, 0x100uLL, (uint64_t)&STACK[0x7A0]);
  unint64_t v121 = STACK[0x7B0];
  unint64_t v122 = STACK[0x7A0] + LODWORD(STACK[0x7A8]);
  *(_OWORD *)unint64_t v122 = xmmword_23435FD50;
  *(_OWORD *)(v122 + 16) = xmmword_23435FD60;
  *(_OWORD *)(v122 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = xmmword_23435FD80;
  *(_OWORD *)(v122 + 48) = xmmword_23435FBB0;
  *(_OWORD *)(v122 + 64) = xmmword_23435FD50;
  *(_OWORD *)(v122 + 80) = xmmword_23435FD60;
  *(_OWORD *)(v122 + re::DynamicArray<re::RigComponentConstraint>::deinit((uint64_t)this + 96) = xmmword_23435FD80;
  *(_OWORD *)(v122 + 112) = xmmword_23435FBB0;
  *(_OWORD *)(v122 + 128) = xmmword_23435FD50;
  *(_OWORD *)(v122 + 144) = xmmword_23435FD60;
  *(_OWORD *)(v122 + 160) = xmmword_23435FD80;
  *(_OWORD *)(v122 + 176) = xmmword_23435FBB0;
  *(_OWORD *)(v122 + 192) = xmmword_23435FD50;
  *(_OWORD *)(v122 + 208) = xmmword_23435FD60;
  *(_OWORD *)(v122 + 224) = xmmword_23435FD80;
  *(_OWORD *)(v122 + 240) = xmmword_23435FBB0;
  *(_OWORD *)(v122 + 256) = xmmword_23435FD50;
  *(_OWORD *)(v122 + 272) = xmmword_23435FD60;
  *(_OWORD *)(v122 + 288) = xmmword_23435FD80;
  *(_OWORD *)(v122 + 304) = xmmword_23435FBB0;
  *(_OWORD *)(v122 + 320) = xmmword_23435FD50;
  *(_OWORD *)(v122 + 336) = xmmword_23435FD60;
  *(_OWORD *)(v122 + 352) = xmmword_23435FD80;
  *(_OWORD *)(v122 + 368) = xmmword_23435FBB0;
  *(_OWORD *)(v122 + 384) = xmmword_23435FD50;
  *(_OWORD *)(v122 + 400) = xmmword_23435FD60;
  *(_OWORD *)(v122 + 416) = xmmword_23435FD80;
  *(_OWORD *)(v122 + 4re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = xmmword_23435FBB0;
  *(_OWORD *)(v122 + 448) = xmmword_23435FD50;
  *(_OWORD *)(v122 + 464) = xmmword_23435FD60;
  *(_OWORD *)(v122 + 480) = xmmword_23435FD80;
  *(_OWORD *)(v122 + 4re::DynamicArray<re::RigComponentConstraint>::deinit((uint64_t)this + 96) = xmmword_23435FBB0;
  *(_OWORD *)(v122 + 512) = xmmword_23435FD50;
  *(_OWORD *)(v122 + 528) = xmmword_23435FD60;
  *(_OWORD *)(v122 + 544) = xmmword_23435FD80;
  *(_OWORD *)(v122 + 560) = xmmword_23435FBB0;
  *(_OWORD *)(v122 + 576) = xmmword_23435FD50;
  *(_OWORD *)(v122 + 592) = xmmword_23435FD60;
  *(_OWORD *)(v122 + 608) = xmmword_23435FD80;
  *(_OWORD *)(v122 + 624) = xmmword_23435FBB0;
  *(_OWORD *)(v122 + 640) = xmmword_23435FD50;
  *(_OWORD *)(v122 + 656) = xmmword_23435FD60;
  *(_OWORD *)(v122 + 672) = xmmword_23435FD80;
  *(_OWORD *)(v122 + 688) = xmmword_23435FBB0;
  *(_OWORD *)(v122 + 704) = xmmword_23435FD50;
  *(_OWORD *)(v122 + 720) = xmmword_23435FD60;
  *(_OWORD *)(v122 + 736) = xmmword_23435FD80;
  *(_OWORD *)(v122 + 752) = xmmword_23435FBB0;
  *(_OWORD *)(v122 + 880) = 0u;
  *(_OWORD *)(v122 + 8re::DynamicArray<re::RigComponentConstraint>::deinit((uint64_t)this + 96) = 0u;
  *(_OWORD *)(v122 + 848) = 0u;
  *(_OWORD *)(v122 + 864) = 0u;
  *(_OWORD *)(v122 + 816) = 0u;
  *(_OWORD *)(v122 + 8re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0u;
  *(_OWORD *)(v122 + 784) = 0u;
  *(_OWORD *)(v122 + 800) = 0u;
  *(_OWORD *)(v122 + 768) = 0u;
  *(_DWORD *)(v122 + 940) = v166;
  *(_DWORD *)(v122 + 944) = v160;
  *(_OWORD *)(v122 + 960) = 0u;
  *(_OWORD *)(v122 + 1008) = a51;
  *(_OWORD *)(v122 + 976) = a49;
  *(_OWORD *)(v122 + 992) = a50;
  (*(void (**)(void, char *, unint64_t))(*(void *)(v161 + 8) + 16))(**(void **)(v161 + 8), sel_setVertexBuffer_offset_atIndex_, v121);
  re::FrameContext::perFrameAlloc(*a1, 0xCuLL, 0x10uLL, (uint64_t)&STACK[0x9C0]);
  uint64_t v123 = LODWORD(STACK[0x9C8]);
  uint64_t v124 = STACK[0x9C0] + v123;
  *(void *)uint64_t v124 = 0x200010000;
  *(void *)&long long v125 = STACK[0x940];
  *(void *)&long long v126 = STACK[0x950];
  uint64_t v173 = STACK[0x950];
  uint64_t v175 = STACK[0x940];
  *(void *)&long long v127 = STACK[0x960];
  *(void *)&long long v128 = STACK[0x970];
  uint64_t v169 = STACK[0x970];
  uint64_t v171 = STACK[0x960];
  *(void *)&long long v129 = STACK[0x980];
  *(void *)&long long v130 = STACK[0x990];
  uint64_t v165 = (re::DynamicString *)STACK[0x990];
  uint64_t v167 = STACK[0x980];
  *(void *)&long long v131 = STACK[0x9A0];
  uint64_t v164 = STACK[0x9A0];
  DWORD2(v125) = STACK[0x948];
  long long v159 = v125;
  long long v132 = v126;
  DWORD2(v1re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = STACK[0x958];
  long long v158 = v132;
  long long v133 = v127;
  DWORD2(v133) = STACK[0x968];
  long long v157 = v133;
  long long v134 = v128;
  DWORD2(v134) = STACK[0x978];
  long long v156 = v134;
  long long v135 = v129;
  DWORD2(v135) = STACK[0x988];
  long long vars0 = v135;
  long long v136 = v130;
  DWORD2(vre::DynamicArray<re::RigComponentConstraint>::deinit((uint64_t)this + 136) = STACK[0x998];
  long long v154 = v136;
  long long v137 = v131;
  DWORD2(v137) = STACK[0x9A8];
  long long v153 = v137;
  *(void *)&long long v137 = STACK[0x9B0];
  uint64_t v163 = STACK[0x9B0];
  DWORD2(v137) = STACK[0x9B8];
  long long v152 = v137;
  *(_DWORD *)(v124 + 8) = 196610;
  long long v138 = *(_OWORD *)&STACK[0x950];
  *(_OWORD *)&STACK[0x7A0] = *(_OWORD *)&STACK[0x940];
  *(_OWORD *)&STACK[0x7B0] = v138;
  long long v139 = *(_OWORD *)&STACK[0x970];
  *(_OWORD *)&STACK[0x7C0] = *(_OWORD *)&STACK[0x960];
  *(_OWORD *)&STACK[0x7D0] = v139;
  long long v140 = *(_OWORD *)&STACK[0x990];
  *(_OWORD *)&STACK[0x7E0] = *(_OWORD *)&STACK[0x980];
  *(_OWORD *)&STACK[0x7F0] = v140;
  long long v141 = *(_OWORD *)&STACK[0x9B0];
  *(_OWORD *)&STACK[0x800] = *(_OWORD *)&STACK[0x9A0];
  *(_OWORD *)&STACK[0x810] = v141;
  re::FrameContext::perFrameAlloc(*a1, 0x20uLL, 0x10uLL, (uint64_t)&a46);
  v142.i64[0] = v171;
  v142.i64[1] = v169;
  v143.i64[0] = v175;
  v143.i64[1] = v173;
  int32x4_t v144 = vuzp1q_s32(v143, v142);
  v143.i64[0] = v164;
  v143.i64[1] = v163;
  v145.i64[0] = v167;
  v145.i64[1] = (uint64_t)v165;
  int v146 = (int32x4_t *)((char *)a46 + a47);
  *int v146 = v144;
  v146[1] = vuzp1q_s32(v145, v143);
  (*(void (**)(void, char *, uint64_t))(*(void *)(v161 + 8) + 88))(**(void **)(v161 + 8), sel_setFragmentBuffer_offset_atIndex_, a48);
  re::FrameContext::perFrameAlloc(*a1, 0x40uLL, 0x10uLL, (uint64_t)&a43);
  uint64_t v147 = (uint64_t *)(a43 + a44);
  *uint64_t v147 = v175;
  v147[1] = v173;
  v147[2] = v171;
  v147[3] = v169;
  v147[4] = v167;
  v147[5] = (uint64_t)v165;
  v147[6] = v164;
  v147[7] = v163;
  (*(void (**)(void, char *, uint64_t))(*(void *)(v161 + 8) + 88))(**(void **)(v161 + 8), sel_setFragmentBuffer_offset_atIndex_, a45);
  re::FrameContext::perFrameAlloc(*a1, 0x80uLL, 0x10uLL, (uint64_t)&a40);
  unint64_t v148 = (long long *)(a40 + a41);
  *unint64_t v148 = v159;
  v148[1] = v158;
  v148[2] = v157;
  v148[3] = v156;
  v148[4] = vars0;
  v148[5] = v154;
  v148[6] = v153;
  v148[7] = v152;
  (*(void (**)(void, char *, uint64_t))(*(void *)(v161 + 8) + 88))(**(void **)(v161 + 8), sel_setFragmentBuffer_offset_atIndex_, a42);
  re::FrameContext::perFrameAlloc(*a1, 0x80uLL, 0x10uLL, (uint64_t)&a37);
  uint64_t v149 = (_OWORD *)(a37 + a38);
  v149[3] = *(_OWORD *)&STACK[0x7D0];
  v149[2] = *(_OWORD *)&STACK[0x7C0];
  v149[1] = *(_OWORD *)&STACK[0x7B0];
  *uint64_t v149 = *(_OWORD *)&STACK[0x7A0];
  v149[7] = *(_OWORD *)&STACK[0x810];
  v149[6] = *(_OWORD *)&STACK[0x800];
  v149[5] = *(_OWORD *)&STACK[0x7F0];
  v149[4] = *(_OWORD *)&STACK[0x7E0];
  (*(void (**)(void, char *, uint64_t))(*(void *)(v161 + 8) + 88))(**(void **)(v161 + 8), sel_setFragmentBuffer_offset_atIndex_, a39);
  if (v160)
  {
    if (v176 / a58 <= 1) {
      uint64_t v150 = 1;
    }
    else {
      uint64_t v150 = v176 / a58;
    }
  }
  else
  {
    uint64_t v150 = v176;
  }
  (*(void (**)(void, char *, uint64_t, uint64_t, void, unint64_t, uint64_t, uint64_t))(*(void *)(v161 + 8) + 232))(**(void **)(v161 + 8), sel_drawIndexedPrimitives_indexCount_indexType_indexBuffer_indexBufferOffset_instanceCount_baseVertex_baseInstance_, 3, 6, 0, STACK[0x9D0], v123, v150);
  if (a54 && a55) {
    (*(void (**)(void))(*(void *)a54 + 40))();
  }
  uint64_t result = a57;
  if (a57)
  {
    if (a58) {
      return (*(uint64_t (**)(void))(*(void *)a57 + 40))();
    }
  }
  return result;
}

void *re::FixedArray<re::mtl::Viewport>::init<>(void *result, uint64_t a2, unint64_t a3)
{
  *uint64_t result = a2;
  result[1] = a3;
  if (!a3) {
    return result;
  }
  if (a3 >= 0xAAAAAAAAAAAAAABLL)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 24, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  unint64_t v4 = result;
  uint64_t result = (void *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a2 + 32))(a2, 24 * a3, 4);
  v4[2] = result;
  if (!result)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    uint64_t result = (void *)_os_crash();
    __break(1u);
    return result;
  }
  unint64_t v6 = a3 - 1;
  if (a3 != 1)
  {
    do
    {
      *uint64_t result = 0;
      result[1] = 0;
      result[2] = 0x3F80000000000000;
      result += 3;
      --v6;
    }
    while (v6);
  }
  *uint64_t result = 0;
  result[1] = 0;
  result[2] = 0x3F80000000000000;
  return result;
}

void re::RenderGraphContext::releaseRenderTargetsAfterSetup(re::RenderGraphContext *this)
{
  unint64_t v3 = v39;
  uint64_t v44 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(*((void *)this + 147) + 136);
  unint64_t v5 = *((unsigned int *)this + 12);
  unint64_t v6 = *(re::BufferTable **)(v4 + 352);
  if ((unint64_t)v6 <= v5) {
    goto LABEL_23;
  }
  uint64_t v7 = *(void *)(v4 + 368);
  uint64_t v8 = v7 + 192 * v5;
  uint64_t v10 = *(void *)(v8 + 56);
  unint64_t v9 = (unint64_t *)(v8 + 56);
  if (v10)
  {
    unint64_t v12 = 0;
    uint64_t v13 = (void *)(v7 + 192 * v5 + 72);
    uint64_t v14 = 52;
    __int16 v28 = v13;
    do
    {
      uint64_t v15 = *((void *)this + 147);
      uint64_t v16 = *(void *)(v15 + 136);
      uint64_t v17 = *(void *)(v16 + 296);
      unint64_t v18 = *(unsigned int *)(*v13 + v14);
      unint64_t v5 = *(void *)(v17 + 16);
      if (v5 <= v18)
      {
        unint64_t v29 = 0;
        long long v43 = 0u;
        long long v41 = 0u;
        long long v42 = 0u;
        *(_OWORD *)int v39 = 0u;
        long long v40 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)long long v32 = 136315906;
        *(void *)&v32[4] = "operator[]";
        __int16 v33 = 1024;
        int v34 = 789;
        __int16 v35 = 2048;
        unint64_t v36 = v18;
        __int16 v37 = 2048;
        id v38 = (re::BufferTable *)v5;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_21:
        uint64_t v31 = 0;
        long long v43 = 0u;
        long long v41 = 0u;
        long long v42 = 0u;
        *(_OWORD *)int v39 = 0u;
        long long v40 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)long long v32 = 136315906;
        *(void *)&v32[4] = "operator[]";
        __int16 v33 = 1024;
        int v34 = 468;
        __int16 v35 = 2048;
        unint64_t v36 = v1;
        __int16 v37 = 2048;
        id v38 = (re::BufferTable *)v2;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_22:
        uint64_t v31 = 0;
        long long v43 = 0u;
        long long v41 = 0u;
        long long v42 = 0u;
        *(_OWORD *)int v39 = 0u;
        long long v40 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)long long v32 = 136315906;
        *(void *)&v32[4] = "operator[]";
        __int16 v33 = 1024;
        int v34 = 468;
        __int16 v35 = 2048;
        unint64_t v36 = v1;
        __int16 v37 = 2048;
        id v38 = (re::BufferTable *)v2;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_23:
        unint64_t v29 = 0;
        *((_OWORD *)v3 + 4) = 0u;
        long long v41 = 0u;
        long long v42 = 0u;
        *(_OWORD *)int v39 = 0u;
        long long v40 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)long long v32 = 136315906;
        *(void *)&v32[4] = "operator[]";
        __int16 v33 = 1024;
        int v34 = 789;
        __int16 v35 = 2048;
        unint64_t v36 = v5;
        __int16 v37 = 2048;
        id v38 = v6;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      uint64_t v19 = *(void *)(v17 + 32);
      if (*(_DWORD *)(v19 + 48 * v18 + 36) == *((_DWORD *)this + 12))
      {
        int v20 = *(_DWORD *)(v19 + 48 * v18);
        if (v20 == 1)
        {
          uint64_t v25 = v19 + 48 * v18;
          unint64_t v26 = *(void *)(v25 + 8);
          unint64_t v5 = v25 + 8;
          unint64_t v29 = v26 >> 1;
          uint64_t v30 = *(void *)(v5 + 16);
          unint64_t v6 = (re::BufferTable *)re::RenderGraphExecutable::bufferDescription(v15, (uint64_t)&v29);
          unint64_t v1 = *((void *)this + 4);
          unint64_t v2 = HIDWORD(v30);
          re::StringID::StringID((re::StringID *)v39, (const StringID *)v5);
          re::RenderGraphResourceAllocationManager::releaseBuffer((_anonymous_namespace_ *)v1, v2, v39[1]);
          re::StringID::destroyString((re::StringID *)v39);
          if (*(_DWORD *)v6 != 2)
          {
            uint64_t v27 = *((void *)this + 147);
            unint64_t v1 = *(unsigned int *)(v19 + 48 * v18 + 28);
            unint64_t v2 = *(void *)(v27 + 80);
            if (v2 <= v1) {
              goto LABEL_22;
            }
            unint64_t v1 = *(void *)(v27 + 88) + 16 * v1;

            *(void *)unint64_t v1 = 0;
            *(void *)(v1 + 8) = 0;
            if (*((unsigned char *)v6 + 16))
            {
              unint64_t v6 = (re::BufferTable *)(*(void *)this + 480);
              re::StringID::StringID((re::StringID *)v39, (const StringID *)v5);
              *(void *)long long v32 = (unint64_t)v39[0] >> 1;
              re::BufferTable::removeBuffer(v6, (const re::WeakStringID *)v32);
LABEL_16:
              *(void *)long long v32 = 0;
              re::StringID::destroyString((re::StringID *)v39);
            }
          }
LABEL_17:
          uint64_t v13 = v28;
          goto LABEL_18;
        }
        if (!v20)
        {
          uint64_t v21 = v19 + 48 * v18;
          unint64_t v22 = *(void *)(v21 + 8);
          unint64_t v5 = v21 + 8;
          v39[0] = (char *)(v22 >> 1);
          v39[1] = *(char **)(v5 + 16);
          re::RenderGraphResourceDescriptions::targetDescriptionSource(v16, (uint64_t)v39, (uint64_t)&v29);
          unint64_t v6 = (re::BufferTable *)re::RenderGraphExecutable::targetDescription(*((void *)this + 147), (uint64_t)&v29);
          unint64_t v1 = *((void *)this + 4);
          unint64_t v2 = HIDWORD(v30);
          re::StringID::StringID((re::StringID *)v39, (const StringID *)v5);
          re::RenderGraphResourceAllocationManager::releaseTexture((_anonymous_namespace_ *)v1, v2, v39[1]);
          re::StringID::destroyString((re::StringID *)v39);
          if (*(_DWORD *)v6 != 2)
          {
            uint64_t v23 = *((void *)this + 147);
            unint64_t v1 = *(unsigned int *)(v19 + 48 * v18 + 28);
            unint64_t v2 = *(void *)(v23 + 56);
            if (v2 <= v1) {
              goto LABEL_21;
            }
            unint64_t v2 = *(void *)(v23 + 64);

            *(void *)(v2 + 8 * v1) = 0;
            if (*((unsigned char *)v6 + 36))
            {
              unint64_t v6 = (re::BufferTable *)(*(void *)this + 368);
              re::StringID::StringID((re::StringID *)v39, (const StringID *)v5);
              *(void *)long long v32 = (unint64_t)v39[0] >> 1;
              re::DynamicTextureTableRemove(v6, (re::TextureTable *)v32, v24);
              goto LABEL_16;
            }
          }
          goto LABEL_17;
        }
      }
LABEL_18:
      ++v12;
      v14 += 64;
    }
    while (*v9 > v12);
  }
}

void re::RenderGraphContext::renderPassDescriptor(id *this, unint64_t *a2, void *a3)
{
  uint64_t v152 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(void *)(a2[147] + 136);
  unint64_t v6 = (unsigned int *)*((unsigned int *)a2 + 12);
  unint64_t v7 = *(void *)(v5 + 352);
  if (v7 <= (unint64_t)v6)
  {
LABEL_238:
    *(void *)int32x4_t v142 = 0;
    long long v150 = 0u;
    long long v151 = 0u;
    long long v148 = 0u;
    long long v149 = 0u;
    long long v147 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136315906;
    *(void *)&uint8_t buf[4] = "operator[]";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 789;
    *(_WORD *)&buf[18] = 2048;
    *(void *)&buf[20] = v6;
    *(_WORD *)&buf[28] = 2048;
    *(void *)&buf[30] = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_239:
    *(void *)int32x4_t v142 = 0;
    long long v150 = 0u;
    long long v151 = 0u;
    long long v148 = 0u;
    long long v149 = 0u;
    long long v147 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136315906;
    *(void *)&uint8_t buf[4] = "operator[]";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 789;
    *(_WORD *)&buf[18] = 2048;
    *(void *)&buf[20] = v6;
    *(_WORD *)&buf[28] = 2048;
    *(void *)&buf[30] = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_240;
  }
  uint64_t v10 = *(void *)(v5 + 368);
  id v11 = objc_msgSend(objc_msgSend(MEMORY[0x263F129A0], sel_alloc), sel_init);
  *this = v11;
  if (*(unsigned char *)(v10 + 192 * v6 + 186)) {
    objc_msgSend(v11, sel_setSkipEmptyTilesOnClearEnabled_, 1);
  }
  uint64_t v129 = v10;
  unsigned int v130 = v6;
  uint64_t v12 = v10 + 192 * v6;
  uint64_t v15 = *(void *)(v12 + 56);
  uint64_t v14 = v12 + 56;
  uint64_t v13 = v15;
  long long v133 = (re::RenderGraphContext *)this;
  if (!v15)
  {
    uint64_t v134 = 0;
    goto LABEL_222;
  }
  uint64_t v134 = 0;
  long long v127 = (void *)v14;
  unint64_t v3 = *(unsigned int **)(v14 + 16);
  long long v126 = (unsigned int **)(v14 + 16);
  unint64_t v6 = (unsigned int *)(v13 << 6);
  int v131 = *(unsigned __int8 *)(a2[1] + 304);
  int v132 = *((_DWORD *)a2 + 12);
  uint64_t v16 = &selRef_taskToken;
  unint64_t v17 = 0x1F6BC6000uLL;
  do
  {
    uint64_t v18 = *(void *)(a2[147] + 136);
    uint64_t v19 = *(void *)(v18 + 296);
    int v20 = (char **)v3[13];
    unint64_t v7 = *(void *)(v19 + 16);
    if (v7 <= (unint64_t)v20)
    {
      *(void *)int32x4_t v142 = 0;
      long long v150 = 0u;
      long long v151 = 0u;
      long long v148 = 0u;
      long long v149 = 0u;
      long long v147 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = "operator[]";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 789;
      *(_WORD *)&buf[18] = 2048;
      *(void *)&buf[20] = v20;
      *(_WORD *)&buf[28] = 2048;
      *(void *)&buf[30] = v7;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_234:
      *(void *)int32x4_t v142 = 0;
      long long v150 = 0u;
      long long v151 = 0u;
      long long v148 = 0u;
      long long v149 = 0u;
      long long v147 = 0u;
      unint64_t v103 = &_os_log_internal;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = "operator[]";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 789;
      *(_WORD *)&buf[18] = 2048;
      *(void *)&buf[20] = v7;
      *(_WORD *)&buf[28] = 2048;
      *(void *)&buf[30] = v4;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_235:
      uint64_t v139 = 0;
      long long v150 = 0u;
      long long v151 = 0u;
      long long v148 = 0u;
      long long v149 = 0u;
      long long v147 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)int32x4_t v142 = 136315906;
      *(void *)&v142[4] = "operator[]";
      *(_WORD *)&v142[12] = 1024;
      *(_DWORD *)&v142[14] = 789;
      __int16 v143 = 2048;
      int32x4_t v144 = v20;
      __int16 v145 = 2048;
      unint64_t v146 = v103;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_236:
      uint64_t v139 = 0;
      long long v150 = 0u;
      long long v151 = 0u;
      long long v148 = 0u;
      long long v149 = 0u;
      long long v147 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)int32x4_t v142 = 136315906;
      *(void *)&v142[4] = "operator[]";
      *(_WORD *)&v142[12] = 1024;
      *(_DWORD *)&v142[14] = 789;
      __int16 v143 = 2048;
      int32x4_t v144 = v20;
      __int16 v145 = 2048;
      unint64_t v146 = v103;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_237:
      uint64_t v139 = 0;
      long long v150 = 0u;
      long long v151 = 0u;
      long long v148 = 0u;
      long long v149 = 0u;
      long long v147 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)int32x4_t v142 = 136315906;
      *(void *)&v142[4] = "operator[]";
      *(_WORD *)&v142[12] = 1024;
      *(_DWORD *)&v142[14] = 789;
      __int16 v143 = 2048;
      int32x4_t v144 = v20;
      __int16 v145 = 2048;
      unint64_t v146 = v103;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_238;
    }
    uint64_t v21 = *(void *)(v19 + 32);
    if (*(_DWORD *)(v21 + 48 * v20) == 1)
    {
      if (v3[1] == 9)
      {
        uint64_t v22 = v21 + 48 * v20;
        *(void *)&long long v147 = *(void *)(v22 + 8) >> 1;
        *((void *)&v147 + 1) = *(void *)(v22 + 24);
        uint64_t v4 = (int *)*(id *)re::RenderGraphContext::metalBuffer((uint64_t)a2, (uint64_t)&v147);
        objc_msgSend(*this, sel_setVisibilityResultBuffer_, v4);
        if (v4) {
      }
        }
    }
    else
    {
      uint64_t v23 = v21 + 48 * v20;
      *(void *)&long long v147 = *(void *)(v23 + 8) >> 1;
      *((void *)&v147 + 1) = *(void *)(v23 + 24);
      re::RenderGraphResourceDescriptions::targetDescriptionSource(v18, (uint64_t)&v147, (uint64_t)v142);
      uint64_t v24 = re::RenderGraphExecutable::targetDescription(a2[147], (uint64_t)v142);
      uint64_t v4 = (int *)v24;
      unsigned int v25 = v3[1];
      switch(v25)
      {
        case 3u:
          BOOL v32 = (*(_DWORD *)(v24 + 4) - 253) > 9 || ((1 << (*(unsigned char *)(v24 + 4) + 3)) & 0x385) == 0;
          if (!v32 || !*((unsigned char *)v3 + 33))
          {
            id v26 = *this;
            id v33 = [*this v16[511]];
            re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)v142, 0, 0, (id *)&v147);
            objc_msgSend(v33, sel_setTexture_, (void)v147);
            if ((void)v147) {

            }
            re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)v142, 0, 0, (id *)&v147);
            unint64_t v34 = (unint64_t)objc_msgSend((id)v147, sel_protectionOptions);
            if ((void)v147) {

            }
            v134 |= v34;
            if (*v4 != 4 && *v4 != 3)
            {
              int v35 = *(_DWORD *)(v21 + 48 * v20 + 36);
              if (*((unsigned char *)v3 + 32)) {
                uint64_t v36 = 2;
              }
              else {
                uint64_t v36 = v4[15];
              }
              int v20 = &selRef_taskToken;
              objc_msgSend(objc_msgSend(v26, sel_stencilAttachment), sel_setLoadAction_, v36);
              if ((v4[17] & 0x70) == 0x30)
              {
                objc_msgSend(objc_msgSend(v26, sel_stencilAttachment), sel_setStoreAction_, 0);
                uint64_t v16 = &selRef_taskToken;
                id v37 = objc_msgSend(v26, (SEL)&selRef_colorAttachments_0);
              }
              else
              {
                int v45 = *v4;
                id v46 = objc_msgSend(v26, sel_stencilAttachment);
                BOOL v47 = v132 != v35 || v45 == 2;
                uint64_t v16 = &selRef_taskToken;
                uint64_t v64 = v47;
                objc_msgSend(v46, sel_setStoreAction_, v64);
                id v37 = objc_msgSend(v26, (SEL)&selRef_colorAttachments_0);
              }
              objc_msgSend(v37, sel_setClearStencil_, v3[4]);
              uint64_t v51 = v4[6];
              if (!v131)
              {
                if (v51 == 1) {
                  goto LABEL_103;
                }
                if (v51)
                {
                  __int16 v65 = (re *)objc_msgSend(v26, sel_setRenderTargetArrayLength_);
                  if ((atomic_exchange((atomic_uchar *volatile)&unk_26AF95E9B, 1u) & 1) == 0)
                  {
                    uint64_t v66 = *re::graphicsLogObjects(v65);
                    if (os_log_type_enabled(v66, OS_LOG_TYPE_DEFAULT))
                    {
                      re::RenderGraphContext::resourceFromIndex((re::RenderGraphContext *)a2, *(unsigned int *)&v142[8], (uint64_t)&v147);
                      re::StringID::StringID((re::StringID *)v137, (const StringID *)((char *)&v147 + 8));
                      int v67 = v4[6];
                      *(_DWORD *)buf = 136315394;
                      *(void *)&uint8_t buf[4] = v138;
                      *(_WORD *)&unsigned char buf[12] = 1024;
                      *(_DWORD *)&buf[14] = v67;
                      unint64_t v55 = v66;
                      long long v56 = "Stencil target (%s) has arrayLength of %d, but device does not support Layered Rendering.";
LABEL_112:
                      _os_log_impl(&dword_233120000, v55, OS_LOG_TYPE_DEFAULT, v56, buf, 0x12u);
                      re::StringID::destroyString((re::StringID *)v137);
                      re::StringID::destroyString((re::StringID *)((char *)&v147 + 8));
                    }
                  }
LABEL_103:
                  this = (id *)v133;
                  unint64_t v17 = 0x1F6BC6000;
                  break;
                }
LABEL_108:
                objc_msgSend(v26, sel_setRenderTargetArrayLength_, 0);
                goto LABEL_103;
              }
LABEL_102:
              objc_msgSend(v26, sel_setRenderTargetArrayLength_, v51);
              goto LABEL_103;
            }
LABEL_51:
            uint64_t v4 = (int *)a2[147];
            re::DynamicString::format((re::DynamicString *)"TargetHandle in use reached the end of the frame without being specified.", (re::DynamicString *)&v147);
            re::RenderGraphExecutable::addError((uint64_t)v4, (uint64_t)&v147);
            uint64_t v16 = &selRef_taskToken;
            if (void)v147 && (BYTE8(v147)) {
              (*(void (**)(void, void))(*(void *)v147 + 40))(v147, v148);
            }
            goto LABEL_103;
          }
          break;
        case 2u:
          BOOL v38 = (*(_DWORD *)(v24 + 4) - 250) > 0xA || ((1 << (*(unsigned char *)(v24 + 4) + 6)) & 0x425) == 0;
          if (!v38 || !*((unsigned char *)v3 + 33))
          {
            unint64_t v39 = v17;
            id v26 = *this;
            id v40 = [*this (SEL)(v39 + 3386)];
            re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)v142, 0, 0, (id *)&v147);
            objc_msgSend(v40, sel_setTexture_, (void)v147);
            if ((void)v147) {

            }
            re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)v142, 0, 0, (id *)&v147);
            unint64_t v41 = (unint64_t)objc_msgSend((id)v147, sel_protectionOptions);
            if ((void)v147) {

            }
            v134 |= v41;
            if (*v4 == 4 || *v4 == 3) {
              goto LABEL_51;
            }
            int v42 = *(_DWORD *)(v21 + 48 * v20 + 36);
            if (*((unsigned char *)v3 + 32)) {
              uint64_t v43 = 2;
            }
            else {
              uint64_t v43 = v4[15];
            }
            int v20 = &selRef_taskToken;
            objc_msgSend(objc_msgSend(v26, sel_depthAttachment), sel_setLoadAction_, v43);
            if ((v4[17] & 0x70) == 0x30)
            {
              id v44 = objc_msgSend(v26, sel_depthAttachment);
              goto LABEL_80;
            }
            int v48 = *v4;
            id v44 = objc_msgSend(v26, sel_depthAttachment);
            if (v132 != v42 || v48 == 2) {
              uint64_t v50 = 1;
            }
            else {
LABEL_80:
            }
              uint64_t v50 = 0;
            objc_msgSend(v44, sel_setStoreAction_, v50);
            uint64_t v16 = &selRef_taskToken;
            objc_msgSend(objc_msgSend(v26, sel_depthAttachment), sel_setClearDepth_, *((float *)v3 + 4));
            uint64_t v51 = v4[6];
            if (!v131)
            {
              if (v51 == 1) {
                goto LABEL_103;
              }
              if (v51)
              {
                uint64_t v52 = (re *)objc_msgSend(v26, sel_setRenderTargetArrayLength_);
                if ((atomic_exchange((atomic_uchar *volatile)&unk_26AF95E9A, 1u) & 1) == 0)
                {
                  unint64_t v53 = *re::graphicsLogObjects(v52);
                  if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
                  {
                    re::RenderGraphContext::resourceFromIndex((re::RenderGraphContext *)a2, *(unsigned int *)&v142[8], (uint64_t)&v147);
                    re::StringID::StringID((re::StringID *)v137, (const StringID *)((char *)&v147 + 8));
                    int v54 = v4[6];
                    *(_DWORD *)buf = 136315394;
                    *(void *)&uint8_t buf[4] = v138;
                    *(_WORD *)&unsigned char buf[12] = 1024;
                    *(_DWORD *)&buf[14] = v54;
                    unint64_t v55 = v53;
                    long long v56 = "Depth target (%s) has arrayLength of %d, but device does not support Layered Rendering.";
                    goto LABEL_112;
                  }
                }
                goto LABEL_103;
              }
              goto LABEL_108;
            }
            goto LABEL_102;
          }
          break;
        case 1u:
          re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)v142, 0, 0, (id *)&v147);
          if ((void)v147)
          {

            id v26 = *this;
            id v27 = objc_msgSend(objc_msgSend(*this, sel_colorAttachments), sel_objectAtIndexedSubscript_, *v3);
            re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)v142, 0, 0, (id *)&v147);
            objc_msgSend(v27, sel_setTexture_, (void)v147);
            if ((void)v147) {

            }
            re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)v142, 0, 0, (id *)&v147);
            unint64_t v28 = (unint64_t)objc_msgSend((id)v147, sel_protectionOptions);
            if ((void)v147) {

            }
            v134 |= v28;
            if (*v4 != 4 && *v4 != 3)
            {
              int v29 = *(_DWORD *)(v21 + 48 * v20 + 36);
              if (*((unsigned char *)v3 + 32)) {
                uint64_t v30 = 2;
              }
              else {
                uint64_t v30 = v4[15];
              }
              int v20 = &selRef_taskToken;
              objc_msgSend(objc_msgSend(objc_msgSend(v26, sel_colorAttachments), sel_objectAtIndexedSubscript_, *v3), sel_setLoadAction_, v30);
              if ((v4[17] & 0x70) == 0x30)
              {
                id v31 = objc_msgSend(objc_msgSend(v26, sel_colorAttachments), sel_objectAtIndexedSubscript_, *v3);
                goto LABEL_93;
              }
              int v57 = v29;
              int v58 = *v4;
              id v31 = objc_msgSend(objc_msgSend(v26, sel_colorAttachments), sel_objectAtIndexedSubscript_, *v3);
              if (v132 != v57 || v58 == 2) {
                uint64_t v60 = 1;
              }
              else {
LABEL_93:
              }
                uint64_t v60 = 0;
              objc_msgSend(v31, sel_setStoreAction_, v60);
              uint64_t v16 = &selRef_taskToken;
              objc_msgSend(objc_msgSend(objc_msgSend(v26, sel_colorAttachments), sel_objectAtIndexedSubscript_, *v3), sel_setClearColor_, *((float *)v3 + 4), *((float *)v3 + 5), *((float *)v3 + 6), *((float *)v3 + 7));
              uint64_t v51 = v4[6];
              if (!v131)
              {
                if (v51 == 1) {
                  goto LABEL_103;
                }
                if (v51)
                {
                  uint64_t v61 = (re *)objc_msgSend(v26, sel_setRenderTargetArrayLength_);
                  if ((atomic_exchange((atomic_uchar *volatile)&unk_26AF95E99, 1u) & 1) == 0)
                  {
                    int v62 = *re::graphicsLogObjects(v61);
                    if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
                    {
                      re::RenderGraphContext::resourceFromIndex((re::RenderGraphContext *)a2, *(unsigned int *)&v142[8], (uint64_t)&v147);
                      re::StringID::StringID((re::StringID *)v137, (const StringID *)((char *)&v147 + 8));
                      int v63 = v4[6];
                      *(_DWORD *)buf = 136315394;
                      *(void *)&uint8_t buf[4] = v138;
                      *(_WORD *)&unsigned char buf[12] = 1024;
                      *(_DWORD *)&buf[14] = v63;
                      unint64_t v55 = v62;
                      long long v56 = "Color target (%s) has arrayLength of %d, but device does not support Layered Rendering.";
                      goto LABEL_112;
                    }
                  }
                  goto LABEL_103;
                }
                goto LABEL_108;
              }
              goto LABEL_102;
            }
            goto LABEL_51;
          }
          uint64_t v4 = (int *)a2[147];
          re::RenderGraphContext::resourceFromIndex((re::RenderGraphContext *)a2, *(unsigned int *)&v142[8], (uint64_t)&v147);
          re::StringID::StringID((re::StringID *)v137, (const StringID *)((char *)&v147 + 8));
          re::DynamicString::format((re::DynamicString *)"Target (%s) used to create renderPassDescriptor is not valid.", (re::DynamicString *)buf, v138);
          re::RenderGraphExecutable::addError((uint64_t)v4, (uint64_t)buf);
          if (*(void *)buf)
          {
            if (buf[8]) {
              (*(void (**)(void))(**(void **)buf + 40))();
            }
            memset(buf, 0, 32);
          }
          re::StringID::destroyString((re::StringID *)v137);
          re::StringID::destroyString((re::StringID *)((char *)&v147 + 8));
          break;
        default:
          break;
      }
    }
    v3 += 16;
    v6 -= 16;
  }
  while (v6);
  if (*v127)
  {
    unsigned int v68 = *v126;
    unint64_t v69 = &(*v126)[16 * *v127];
    unint64_t v6 = (unsigned int *)&buf[8];
    unint64_t v3 = (unsigned int *)&buf[24];
    while (1)
    {
      uint64_t v70 = *(void *)(*(void *)(a2[147] + 136) + 296);
      unint64_t v7 = v68[13];
      uint64_t v4 = *(int **)(v70 + 16);
      if ((unint64_t)v4 <= v7) {
        goto LABEL_234;
      }
      uint64_t v71 = *(void *)(v70 + 32);
      if (!*(_DWORD *)(v71 + 48 * v7)) {
        break;
      }
LABEL_208:
      v68 += 16;
      if (v68 == v69) {
        goto LABEL_222;
      }
    }
    *(_DWORD *)buf = 0;
    uint64_t v72 = v71 + 48 * v7;
    re::StringID::StringID((re::StringID *)&buf[8], (const StringID *)(v72 + 8));
    long long v73 = *(_OWORD *)(v72 + 24);
    uint64_t v141 = *(void *)(v72 + 40);
    *(_OWORD *)&buf[24] = v73;
    *(void *)&long long v147 = *(void *)&buf[8] >> 1;
    *((void *)&v147 + 1) = v73;
    re::RenderGraphResourceDescriptions::targetDescriptionSource(*(void *)(a2[147] + 136), (uint64_t)&v147, (uint64_t)v137);
    uint64_t v74 = re::RenderGraphExecutable::targetDescription(a2[147], (uint64_t)v137);
    uint64_t v75 = (_DWORD *)v74;
    unsigned int v76 = v68[1];
    switch(v76)
    {
      case 8u:
        BOOL v84 = (*(_DWORD *)(v74 + 4) - 253) > 9 || ((1 << (*(unsigned char *)(v74 + 4) + 3)) & 0x385) == 0;
        if (v84 && *((unsigned char *)v68 + 33)) {
          goto LABEL_207;
        }
        re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)v137, 0, 0, &v136);
        if (!v136)
        {
          uint64_t v104 = a2[147];
          uint64_t v105 = *(void **)(v104 + 136);
          if (v105[54])
          {
            unint64_t v7 = 0;
            do
            {
              int v20 = (char **)v68[13];
              if (v20 == *(_DWORD *)(v105[56] + 4 * v7))
              {
                uint64_t v106 = v105[37];
                unint64_t v103 = *(void *)(v106 + 16);
                if (v103 <= (unint64_t)v20) {
                  goto LABEL_236;
                }
                re::StringID::StringID((re::StringID *)v142, (const StringID *)(*(void *)(v106 + 32) + 48 * v20 + 8));
                re::DynamicString::format((re::DynamicString *)"Invalid texture (%s) set to resolve stencil", (re::DynamicString *)&v147, *(void *)&v142[8]);
                re::RenderGraphExecutable::addError(v104, (uint64_t)&v147);
                if ((void)v147)
                {
                  if (BYTE8(v147)) {
                    (*(void (**)(void))(*(void *)v147 + 40))();
                  }
                  long long v147 = 0u;
                  long long v148 = 0u;
                }
                re::StringID::destroyString((re::StringID *)v142);
                uint64_t v104 = a2[147];
              }
              ++v7;
              uint64_t v105 = *(void **)(v104 + 136);
            }
            while (v105[54] > v7);
          }
          break;
        }
        BOOL v86 = v132 != *(_DWORD *)&buf[36] || *v75 == 2;
        if ((v75[17] & 0x70) == 0x30 || !v86) {
          break;
        }
        if (([*(id *)(a2[1] + 184) supportsFamily:1005] & 1) != 0
          || (unint64_t v87 = (re *)[*(id *)(a2[1] + 184) supportsFamily:2002], (v87 & 1) != 0))
        {
          id v88 = *(id *)v133;
          id v89 = objc_msgSend(*(id *)v133, sel_stencilAttachment);
          objc_msgSend(v89, sel_setResolveTexture_, v136);
          v134 |= (unint64_t)objc_msgSend(v136, sel_protectionOptions);
          int v20 = (char **)objc_msgSend(objc_msgSend(v88, sel_stencilAttachment), sel_storeAction);
          id v90 = objc_msgSend(v88, sel_stencilAttachment);
          if (v20) {
            uint64_t v91 = 3;
          }
          else {
            uint64_t v91 = 2;
          }
          objc_msgSend(v90, sel_setStoreAction_, v91);
          objc_msgSend(objc_msgSend(v88, sel_stencilAttachment), sel_setStencilResolveFilter_, (int)v68[10]);
          break;
        }
        if ((atomic_exchange(byte_26AF95E9D, 1u) & 1) == 0)
        {
          uint64_t v110 = *re::graphicsLogObjects(v87);
          if (os_log_type_enabled(v110, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(v147) = 0;
            uint64_t v111 = v110;
            long long v112 = "Tried to resolve multisampled stencil, but device does not support Stencil Resolve.";
LABEL_220:
            _os_log_impl(&dword_233120000, v111, OS_LOG_TYPE_DEFAULT, v112, (uint8_t *)&v147, 2u);
          }
        }
        break;
      case 7u:
        BOOL v92 = (*(_DWORD *)(v74 + 4) - 250) > 0xA || ((1 << (*(unsigned char *)(v74 + 4) + 6)) & 0x425) == 0;
        if (v92 && *((unsigned char *)v68 + 33)) {
          goto LABEL_207;
        }
        re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)v137, 0, 0, &v136);
        if (!v136)
        {
          uint64_t v107 = a2[147];
          uint64_t v108 = *(void **)(v107 + 136);
          if (v108[54])
          {
            unint64_t v7 = 0;
            do
            {
              int v20 = (char **)v68[13];
              if (v20 == *(_DWORD *)(v108[56] + 4 * v7))
              {
                uint64_t v109 = v108[37];
                unint64_t v103 = *(void *)(v109 + 16);
                if (v103 <= (unint64_t)v20) {
                  goto LABEL_237;
                }
                re::StringID::StringID((re::StringID *)v142, (const StringID *)(*(void *)(v109 + 32) + 48 * v20 + 8));
                re::DynamicString::format((re::DynamicString *)"Invalid texture (%s) set to resolve depth", (re::DynamicString *)&v147, *(void *)&v142[8]);
                re::RenderGraphExecutable::addError(v107, (uint64_t)&v147);
                if ((void)v147)
                {
                  if (BYTE8(v147)) {
                    (*(void (**)(void))(*(void *)v147 + 40))();
                  }
                  long long v147 = 0u;
                  long long v148 = 0u;
                }
                re::StringID::destroyString((re::StringID *)v142);
                uint64_t v107 = a2[147];
              }
              ++v7;
              uint64_t v108 = *(void **)(v107 + 136);
            }
            while (v108[54] > v7);
          }
          break;
        }
        BOOL v94 = v132 != *(_DWORD *)&buf[36] || *v75 == 2;
        if ((v75[17] & 0x70) != 0x30 && v94)
        {
          if (([*(id *)(a2[1] + 184) supportsFamily:1003] & 1) != 0
            || (id v95 = (re *)[*(id *)(a2[1] + 184) supportsFamily:2002],
                (v95 & 1) != 0))
          {
            id v96 = *(id *)v133;
            id v97 = objc_msgSend(*(id *)v133, sel_depthAttachment);
            objc_msgSend(v97, sel_setResolveTexture_, v136);
            v134 |= (unint64_t)objc_msgSend(v136, sel_protectionOptions);
            int v20 = (char **)objc_msgSend(objc_msgSend(v96, sel_depthAttachment), sel_storeAction);
            id v98 = objc_msgSend(v96, sel_depthAttachment);
            if (v20) {
              uint64_t v99 = 3;
            }
            else {
              uint64_t v99 = 2;
            }
            objc_msgSend(v98, sel_setStoreAction_, v99);
            id v81 = objc_msgSend(v96, sel_depthAttachment);
            uint64_t v83 = (int)v68[9];
            unint64_t v82 = sel_setDepthResolveFilter_;
            goto LABEL_172;
          }
          if ((atomic_exchange((atomic_uchar *volatile)&unk_26AF95E9C, 1u) & 1) == 0)
          {
            long long v113 = *re::graphicsLogObjects(v95);
            if (os_log_type_enabled(v113, OS_LOG_TYPE_DEFAULT))
            {
              LOWORD(v147) = 0;
              uint64_t v111 = v113;
              long long v112 = "Tried to resolve multisampled depth, but device does not support Depth Resolve.";
              goto LABEL_220;
            }
          }
        }
        break;
      case 6u:
        re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)v137, 0, 0, &v136);
        if (v136)
        {
          BOOL v78 = v132 != *(_DWORD *)&buf[36] || *v75 == 2;
          if ((v75[17] & 0x70) != 0x30 && v78)
          {
            id v79 = *(id *)v133;
            id v80 = objc_msgSend(objc_msgSend(*(id *)v133, sel_colorAttachments), sel_objectAtIndexedSubscript_, *v68);
            re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)v137, 0, 0, (id *)&v147);
            objc_msgSend(v80, sel_setResolveTexture_, (void)v147);
            if ((void)v147) {

            }
            v134 |= (unint64_t)objc_msgSend(v136, sel_protectionOptions);
            int v20 = (char **)objc_msgSend(objc_msgSend(objc_msgSend(v79, sel_colorAttachments), sel_objectAtIndexedSubscript_, *v68), sel_storeAction);
            id v81 = objc_msgSend(objc_msgSend(v79, sel_colorAttachments), sel_objectAtIndexedSubscript_, *v68);
            unint64_t v82 = sel_setStoreAction_;
            if (v20) {
              uint64_t v83 = 3;
            }
            else {
              uint64_t v83 = 2;
            }
LABEL_172:
            objc_msgSend(v81, v82, v83);
          }
        }
        else
        {
          uint64_t v100 = a2[147];
          uint64_t v101 = *(void **)(v100 + 136);
          if (v101[54])
          {
            unint64_t v7 = 0;
            do
            {
              int v20 = (char **)v68[13];
              if (v20 == *(_DWORD *)(v101[56] + 4 * v7))
              {
                uint64_t v102 = v101[37];
                unint64_t v103 = *(void *)(v102 + 16);
                if (v103 <= (unint64_t)v20) {
                  goto LABEL_235;
                }
                re::StringID::StringID((re::StringID *)v142, (const StringID *)(*(void *)(v102 + 32) + 48 * v20 + 8));
                re::DynamicString::format((re::DynamicString *)"Invalid texture (%s) set to resolve color attachment %d", (re::DynamicString *)&v147, *(void *)&v142[8], *v68);
                re::RenderGraphExecutable::addError(v100, (uint64_t)&v147);
                if ((void)v147)
                {
                  if (BYTE8(v147)) {
                    (*(void (**)(void))(*(void *)v147 + 40))();
                  }
                  long long v147 = 0u;
                  long long v148 = 0u;
                }
                re::StringID::destroyString((re::StringID *)v142);
                uint64_t v100 = a2[147];
              }
              ++v7;
              uint64_t v101 = *(void **)(v100 + 136);
            }
            while (v101[54] > v7);
          }
        }
        break;
      default:
LABEL_207:
        re::StringID::destroyString((re::StringID *)&buf[8]);
        goto LABEL_208;
    }
    if (v136) {

    }
    goto LABEL_207;
  }
LABEL_222:
  id v114 = *(id *)v133;
  uint64_t v115 = v129 + 192 * v130;
  objc_msgSend(*(id *)v133, sel_setThreadgroupMemoryLength_, *(void *)(v115 + 176));
  unsigned int v116 = *(unsigned __int8 *)(v115 + 184) - 1;
  if (v116 < 3)
  {
    uint64_t v117 = qword_2343C0700[(char)v116];
    objc_msgSend(v114, sel_setTileWidth_, *(void *)&asc_2343C06E8[8 * (char)v116]);
    objc_msgSend(v114, sel_setTileHeight_, v117);
  }
  uint64_t v118 = *(void *)(a2[147] + 136);
  unint64_t v6 = (unsigned int *)*((unsigned int *)a2 + 12);
  unint64_t v3 = *(unsigned int **)(v118 + 352);
  if (v3 <= v6) {
    goto LABEL_239;
  }
  if (*(unsigned char *)(*(void *)(v118 + 368) + 192 * v6 + 171))
  {
    uint64_t v119 = re::RenderGraphDataStore::tryGet<re::VRRData>(a2[146], *(void *)(a2[5] + 48));
    if (v119)
    {
      if (*(unsigned char *)(v119 + 12))
      {
        unint64_t v121 = a2[147];
        unint64_t v122 = *(unsigned int *)(v119 + 8);
        unint64_t v123 = *(void *)(v121 + 104);
        if (v123 > v122)
        {
          objc_msgSend(v114, sel_setRasterizationRateMap_, *(void *)(*(void *)(v121 + 96) + 8 * v122));
          goto LABEL_230;
        }
LABEL_240:
        re::internal::assertLog((re::internal *)6, v120, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v122, v123);
        _os_crash();
        __break(1u);
      }
    }
  }
LABEL_230:
  uint64_t v124 = a2[1];
  id v125 = v114;
  id v135 = v125;
  re::RenderManager::enableMTLCounterSamplingOnRenderPassDescriptor(v124, &v135, 1u);
  if (v125) {

  }
  *a3 = v134;
}

uint64_t re::RenderGraphExecutable::addError(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(_anonymous_namespace_ **)(a1 + 128);
  v5.n128_u64[0] = 2000;
  v5.n128_u64[1] = (unint64_t)&re::GraphicsErrorCategory(void)::instance;
  uint64_t v6 = *(void *)a2;
  uint64_t v8 = *(void *)(a2 + 24);
  long long v7 = *(_OWORD *)(a2 + 8);
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  __n128 v3 = re::DynamicArray<re::DetailedError>::add(v2, &v5);
  uint64_t result = v6;
  if (v6)
  {
    if (v7) {
      return (*(uint64_t (**)(__n128))(*(void *)v6 + 40))(v3);
    }
  }
  return result;
}

__n128 re::RenderGraphContext::resourceFromIndex@<Q0>(re::RenderGraphContext *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *(void *)(*(void *)(*((void *)this + 147) + 136) + 296);
  if (*(void *)(v4 + 16) <= (unint64_t)a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v5 = *(void *)(v4 + 32) + 48 * a2;
  *(_DWORD *)a3 = *(_DWORD *)v5;
  re::StringID::StringID((re::StringID *)(a3 + 8), (const StringID *)(v5 + 8));
  __n128 result = *(__n128 *)(v5 + 24);
  *(void *)(a3 + 40) = *(void *)(v5 + 40);
  *(__n128 *)(a3 + 24) = result;
  return result;
}

unsigned char *re::DynamicOverflowArray<re::InlineFunction<464ul,void ()(re::Matrix4x4<float> const&,re::Matrix4x4<float> const&)>,5ul>::add(uint64_t a1, unsigned char *a2)
{
  re::DynamicOverflowArray<re::InlineFunction<464ul,void ()(re::Matrix4x4<float> const&,re::Matrix4x4<float> const&)>,5ul>::ensureCapacity(a1);
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v4 = a1 + 24;
  }
  else {
    uint64_t v4 = *(void *)(a1 + 32);
  }
  uint64_t v5 = (unsigned char *)(v4 + 472 * *(void *)(a1 + 8));
  v5[464] = 1;
  __n128 result = re::InlineFunction<464ul,void ()(re::Matrix4x4<float> const&,re::Matrix4x4<float> const&)>::operator=(v5, a2);
  ++*(void *)(a1 + 8);
  *(_DWORD *)(a1 + 16) += 2;
  return result;
}

void re::RenderGraphContext::encodeWaitsForFencesIfNeeded(re::RenderGraphContext *this, const RenderCommandEncoder *a2)
{
  if (!*((unsigned char *)this + 1560))
  {
    uint64_t v3 = *((void *)this + 192);
    if (v3)
    {
      uint64_t v5 = (id *)*((void *)this + 194);
      uint64_t v6 = 8 * v3;
      do
      {
        id v7 = *v5;
        [(m_impCache *)a2->m_object waitForFence:v7 beforeStages:1];
        if (v7) {

        }
        ++v5;
        v6 -= 8;
      }
      while (v6);
    }
    *((unsigned char *)this + 1560) = 1;
  }
}

void re::RenderGraphContext::releaseManagedEncoder(re::RenderGraphContext *this, int a2)
{
  if (a2 && !re::RenderGraphContext::isLastNodeAccessingEncoder(this, *((re::RenderGraphNodeBase **)this + 5)))
  {
    uint64_t v3 = *(void *)(*((void *)this + 1) + 104);
    uint64_t v4 = v3 ? re::RenderFrameBox::get(v3 + 344, *(void *)(*(void *)this + 32)) : 0;
    re::DynamicString::format((re::DynamicString *)"Node %s attempting to release encoder before all nodes have finished encoding", (re::DynamicString *)&v7, *(void *)(*((void *)this + 5) + 16));
    re::RenderFrame::addError(v4, (uint64_t)&v7);
    if (v7)
    {
      if (v8) {
        (*(void (**)(void))(*(void *)v7 + 40))();
      }
    }
  }
  switch(*((_DWORD *)this + 296))
  {
    case 0:
      re::RenderGraphContext::finishEncoding<re::mtl::RenderCommandEncoder &>((uint64_t)this, *((void *)this + 150));
      break;
    case 1:
      re::RenderGraphContext::finishEncoding<re::mtl::ComputeCommandEncoder &>((uint64_t)this, *((id **)this + 150));
      break;
    case 2:
      re::RenderGraphContext::finishEncoding<re::mtl::BlitCommandEncoder &>((uint64_t)this, *((id **)this + 150));
      break;
    case 3:
      uint64_t v5 = (id *)*((void *)this + 150);
      if (*v5)
      {
        [*v5 endEncoding];
        id v6 = *v5;
        *uint64_t v5 = 0;
      }
      break;
    default:
      break;
  }
  *((_DWORD *)this + 2re::DynamicArray<re::RigComponentConstraint>::deinit((uint64_t)this + 96) = 4;
}

void re::RenderGraphContext::makeComputeCommandEncoder(re::RenderGraphContext *this@<X0>, uint64_t a2@<X1>, id *a3@<X8>)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  [*(id *)(re::DrawingManager::currentCommandBuffer(*(re::DrawingManager **)(*((void *)this + 1) + 104)) + 16) setProtectionOptions:a2];
  uint64_t v5 = re::DrawingManager::currentCommandBuffer(*(re::DrawingManager **)(*((void *)this + 1) + 104));
  ++*(void *)(v5 + 8);
  re::mtl::CommandBuffer::makeComputeCommandEncoder((id *)(v5 + 16), a3);
  [*a3 setLabel:*re::RenderGraphNodeBase::getEncoderLabel(*((re::RenderGraphNodeBase **)this + 5))];
  uint64_t v6 = *(void *)(*((void *)this + 147) + 136);
  unint64_t v7 = *((unsigned int *)this + 12);
  char v8 = *(unsigned int **)(v6 + 352);
  if ((unint64_t)v8 <= v7)
  {
LABEL_11:
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v22 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)unint64_t v17 = 136315906;
    *(void *)&v17[4] = "operator[]";
    *(_WORD *)&v17[12] = 1024;
    *(_DWORD *)&v17[14] = 789;
    __int16 v18 = 2048;
    unint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v9 = *(void *)(v6 + 368) + 192 * v7;
  uint64_t v10 = *(void *)(v9 + 56);
  if (v10)
  {
    unint64_t v7 = v10 << 6;
    char v8 = (unsigned int *)(*(void *)(v9 + 72) + 52);
    do
    {
      if (*(v8 - 12) == 5)
      {
        uint64_t v11 = *(void *)(*((void *)this + 147) + 136);
        uint64_t v12 = *(void *)(v11 + 296);
        unint64_t v13 = *v8;
        uint64_t v14 = *(unsigned int **)(v12 + 16);
        if ((unint64_t)v14 <= v13)
        {
          long long v25 = 0u;
          long long v26 = 0u;
          long long v23 = 0u;
          long long v24 = 0u;
          long long v22 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)unint64_t v17 = 136315906;
          *(void *)&v17[4] = "operator[]";
          *(_WORD *)&v17[12] = 1024;
          *(_DWORD *)&v17[14] = 789;
          __int16 v18 = 2048;
          unint64_t v19 = v13;
          __int16 v20 = 2048;
          uint64_t v21 = v14;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_11;
        }
        uint64_t v15 = *(void *)(v12 + 32);
        if (!*(_DWORD *)(v15 + 48 * v13))
        {
          uint64_t v16 = v15 + 48 * v13;
          *(void *)unint64_t v17 = *(void *)(v16 + 8) >> 1;
          *(void *)&char v17[8] = *(void *)(v16 + 24);
          re::RenderGraphResourceDescriptions::targetDescriptionSource(v11, (uint64_t)v17, (uint64_t)&v22);
          *(_DWORD *)(re::RenderGraphExecutable::targetDescription(*((void *)this + 147), (uint64_t)&v22) + 60) = 1;
        }
      }
      v8 += 16;
      v7 -= 64;
    }
    while (v7);
  }
  re::RenderGraphResourceAllocationManager::onAcquireEncoder<re::mtl::ComputeCommandEncoder>(*((void *)this + 4), a3);
}

void re::RenderGraphContext::makeBlitCommandEncoder(re::RenderGraphContext *this@<X0>, uint64_t a2@<X1>, id *a3@<X8>)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  [*(id *)(re::DrawingManager::currentCommandBuffer(*(re::DrawingManager **)(*((void *)this + 1) + 104)) + 16) setProtectionOptions:a2];
  uint64_t v5 = re::DrawingManager::currentCommandBuffer(*(re::DrawingManager **)(*((void *)this + 1) + 104));
  ++*(void *)(v5 + 8);
  re::mtl::CommandBuffer::makeBlitCommandEncoder((id *)(v5 + 16), a3);
  [*a3 setLabel:*re::RenderGraphNodeBase::getEncoderLabel(*((re::RenderGraphNodeBase **)this + 5))];
  uint64_t v6 = *(void *)(*((void *)this + 147) + 136);
  unint64_t v7 = *((unsigned int *)this + 12);
  char v8 = *(unsigned int **)(v6 + 352);
  if ((unint64_t)v8 <= v7)
  {
LABEL_11:
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v22 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)unint64_t v17 = 136315906;
    *(void *)&v17[4] = "operator[]";
    *(_WORD *)&v17[12] = 1024;
    *(_DWORD *)&v17[14] = 789;
    __int16 v18 = 2048;
    unint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v9 = *(void *)(v6 + 368) + 192 * v7;
  uint64_t v10 = *(void *)(v9 + 56);
  if (v10)
  {
    unint64_t v7 = v10 << 6;
    char v8 = (unsigned int *)(*(void *)(v9 + 72) + 52);
    do
    {
      if (*(v8 - 12) == 4)
      {
        uint64_t v11 = *(void *)(*((void *)this + 147) + 136);
        uint64_t v12 = *(void *)(v11 + 296);
        unint64_t v13 = *v8;
        uint64_t v14 = *(unsigned int **)(v12 + 16);
        if ((unint64_t)v14 <= v13)
        {
          long long v25 = 0u;
          long long v26 = 0u;
          long long v23 = 0u;
          long long v24 = 0u;
          long long v22 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)unint64_t v17 = 136315906;
          *(void *)&v17[4] = "operator[]";
          *(_WORD *)&v17[12] = 1024;
          *(_DWORD *)&v17[14] = 789;
          __int16 v18 = 2048;
          unint64_t v19 = v13;
          __int16 v20 = 2048;
          uint64_t v21 = v14;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_11;
        }
        uint64_t v15 = *(void *)(v12 + 32);
        if (!*(_DWORD *)(v15 + 48 * v13))
        {
          uint64_t v16 = v15 + 48 * v13;
          *(void *)unint64_t v17 = *(void *)(v16 + 8) >> 1;
          *(void *)&char v17[8] = *(void *)(v16 + 24);
          re::RenderGraphResourceDescriptions::targetDescriptionSource(v11, (uint64_t)v17, (uint64_t)&v22);
          *(_DWORD *)(re::RenderGraphExecutable::targetDescription(*((void *)this + 147), (uint64_t)&v22) + 60) = 1;
        }
      }
      v8 += 16;
      v7 -= 64;
    }
    while (v7);
  }
  re::RenderGraphResourceAllocationManager::onAcquireEncoder<re::mtl::BlitCommandEncoder>(*((void *)this + 4), a3);
}

BOOL re::RenderGraphContext::isLastNodeAccessingEncoder(re::RenderGraphContext *this, re::RenderGraphNodeBase *a2)
{
  uint64_t v2 = *(void *)(*((void *)this + 147) + 136);
  LODWORD(v3) = 0x7FFFFFFF;
  if (*(void *)(v2 + 656))
  {
    unint64_t v4 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * ((unint64_t)a2 ^ ((unint64_t)a2 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                           * ((unint64_t)a2 ^ ((unint64_t)a2 >> 30))) >> 27));
    uint64_t v5 = *(unsigned int *)(*(void *)(v2 + 664) + 4 * ((v4 ^ (v4 >> 31)) % *(unsigned int *)(v2 + 680)));
    if (v5 != 0x7FFFFFFF)
    {
      uint64_t v6 = *(void *)(v2 + 672);
      if (*(re::RenderGraphNodeBase **)(v6 + 32 * v5 + 16) == a2)
      {
        LODWORD(v3) = v5;
      }
      else
      {
        uint64_t v3 = v5;
        while (1)
        {
          uint64_t v3 = *(_DWORD *)(v6 + 32 * v3 + 8) & 0x7FFFFFFF;
          if (v3 == 0x7FFFFFFF) {
            break;
          }
          if (*(re::RenderGraphNodeBase **)(v6 + 32 * v3 + 16) == a2) {
            goto LABEL_10;
          }
        }
        LODWORD(v3) = 0x7FFFFFFF;
      }
    }
  }
LABEL_10:
  uint64_t v7 = *(void *)(v2 + 672) + 32 * v3;
  unsigned int v10 = *(_DWORD *)(v7 + 24);
  uint64_t v8 = v7 + 24;
  unsigned int v9 = v10;
  if (*(void *)(v2 + 352) <= (unint64_t)v10)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(*(void *)(v2 + 368) + 192 * v9 + 16) - 1 == *(unsigned int *)(v8 + 4);
}

uint64_t re::RenderGraphContext::releaseManagedRenderEncodersFromParallelEncoder(re::RenderGraphContext *this)
{
  uint64_t result = re::RenderGraphContext::isSetupParallel(this);
  if (result)
  {
    if (*((_DWORD *)this + 296) == 3)
    {
      uint64_t v3 = *((void *)this + 153);
      if (v3)
      {
        uint64_t v4 = *((void *)this + 155);
        uint64_t v5 = 16 * v3;
        do
        {
          re::RenderGraphContext::finishEncoding<re::mtl::RenderCommandEncoder &>((uint64_t)this, v4);
          v4 += 16;
          v5 -= 16;
        }
        while (v5);
      }
      return (uint64_t)re::DynamicArray<re::mtl::RenderCommandEncoder>::clear((re::RenderGraphContext *)((char *)this + 1208));
    }
  }
  else
  {
    uint64_t v6 = *(void *)(*((void *)this + 1) + 104);
    if (v6) {
      uint64_t v7 = re::RenderFrameBox::get(v6 + 344, *(void *)(*(void *)this + 32));
    }
    else {
      uint64_t v7 = 0;
    }
    re::DynamicString::format((re::DynamicString *)"Node %s called releaseManagedRenderEncodersFromParallelEncoder(). This function is only meant to be called on nodes marked as parallel (e.g. RenderGraphBuilder::setNodeIsParallel(true)) after their execute() function. ", (re::DynamicString *)&v8, *(void *)(*((void *)this + 5) + 16));
    re::RenderFrame::addError(v7, (uint64_t)&v8);
    uint64_t result = v8;
    if (v8 && (v9 & 1) != 0) {
      return (*(uint64_t (**)(void))(*(void *)v8 + 40))();
    }
  }
  return result;
}

void re::RenderGraphContext::finishEncoding<re::mtl::RenderCommandEncoder &>(uint64_t a1, uint64_t a2)
{
  if (*(void *)a2)
  {
    re::RenderGraphResourceAllocationManager::onReleaseEncoder<re::mtl::RenderCommandEncoder>(*(void **)(a1 + 32), (void **)a2);
    (*(void (**)(void, char *))(*(void *)(a2 + 8) + 256))(**(void **)(a2 + 8), sel_endEncoding);
    uint64_t v3 = *(void **)a2;
    *(void *)a2 = 0;
  }
}

re::mtl::RenderCommandEncoder *re::DynamicArray<re::mtl::RenderCommandEncoder>::clear(re::mtl::RenderCommandEncoder *result)
{
  unint64_t v1 = result;
  uint64_t v2 = *((void *)result + 2);
  *((void *)result + 2) = 0;
  if (v2)
  {
    uint64_t result = (re::mtl::RenderCommandEncoder *)*((void *)result + 4);
    uint64_t v3 = 16 * v2;
    do
    {
      re::mtl::RenderCommandEncoder::~RenderCommandEncoder(result);
      uint64_t result = (re::mtl::RenderCommandEncoder *)(v4 + 16);
      v3 -= 16;
    }
    while (v3);
  }
  ++*((_DWORD *)v1 + 6);
  return result;
}

void re::RenderGraphContext::finishEncoding<re::mtl::ComputeCommandEncoder &>(uint64_t a1, id *a2)
{
  if (*a2)
  {
    re::RenderGraphResourceAllocationManager::onReleaseEncoder<re::mtl::ComputeCommandEncoder>(*(void **)(a1 + 32), (void **)a2);
    [*a2 endEncoding];
    uint64_t v3 = *a2;
    *a2 = 0;
  }
}

void re::RenderGraphContext::finishEncoding<re::mtl::BlitCommandEncoder &>(uint64_t a1, id *a2)
{
  if (*a2)
  {
    re::RenderGraphResourceAllocationManager::onReleaseEncoder<re::mtl::BlitCommandEncoder>(*(void **)(a1 + 32), (void **)a2);
    [*a2 endEncoding];
    uint64_t v3 = *a2;
    *a2 = 0;
  }
}

int32x2_t re::RenderGraphContext::makeFullscreenDrawCall@<D0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, int32x2_t *a7@<X8>)
{
  uint64_t v14 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(*a1 + 24) + 32))(*(void *)(*a1 + 24), 224, 16);
  *(_OWORD *)uint64_t v14 = 0u;
  *(_OWORD *)(v14 + 16) = 0u;
  *(_OWORD *)(v14 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0u;
  *(_OWORD *)(v14 + 48) = 0u;
  *(_OWORD *)(v14 + 64) = 0u;
  *(_OWORD *)(v14 + 80) = 0u;
  *(_OWORD *)(v14 + re::DynamicArray<re::RigComponentConstraint>::deinit((uint64_t)this + 96) = 0u;
  *(_OWORD *)(v14 + 112) = 0u;
  *(_OWORD *)(v14 + 128) = 0u;
  *(_OWORD *)(v14 + 144) = 0u;
  *(_OWORD *)(v14 + 160) = 0u;
  *(_OWORD *)(v14 + 176) = 0u;
  *(_OWORD *)(v14 + 192) = 0u;
  *(_OWORD *)(v14 + 208) = 0u;
  __asm { FMOV            V0.2S, #1.0 }
  *(void *)(v14 + 152) = _D0;
  *(_DWORD *)(v14 + 160) = 1065353216;
  re::DrawCall::DrawCall((re::DrawCall *)a7);
  a7[8] = (int32x2_t)v14;
  __int16 v20 = (int32x2_t *)a1[187];
  __int16 v21 = a7->i16[0] & 0xFFF0 | 7;
  a7->i16[0] = v21;
  int32x2_t result = vrev64_s32(v20[58]);
  a7[2] = result;
  a7->i8[2] = v20[59].i8[4];
  a7[7] = (int32x2_t)v20;
  a7->i16[0] = v21 & 0xEF77;
  *(void *)(v14 + 40) = a2;
  *(void *)(v14 + 48) = a3;
  *(void *)(v14 + 56) = a4;
  *(void *)(v14 + 72) = a5;
  *(void *)(v14 + 88) = 0;
  *(void *)(v14 + re::DynamicArray<re::RigComponentConstraint>::deinit((uint64_t)this + 96) = a6;
  *(void *)(v14 + 104) = 0;
  *(unsigned char *)(v14 + 112) = 0;
  a7[9].i32[1] = 0;
  return result;
}

re *re::internal::destroyPersistent<re::mtl::RenderCommandEncoder>(re *result, uint64_t a2, re::mtl::RenderCommandEncoder *a3)
{
  if (a3)
  {
    uint64_t v4 = re::globalAllocators(result)[2];
    re::mtl::RenderCommandEncoder::~RenderCommandEncoder(a3);
    uint64_t v5 = *(uint64_t (**)(uint64_t, re::mtl::RenderCommandEncoder *))(*(void *)v4 + 40);
    return (re *)v5(v4, a3);
  }
  return result;
}

double re::DrawCall::DrawCall(re::DrawCall *this)
{
  *(_WORD *)this = *(_WORD *)this & 0xFCB0 | 0x107;
  *(_DWORD *)((char *)this + 2) = 0x1000000;
  *(void *)((char *)this + 6) = 0xFFFF0000FFFFLL;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0xFFFFFFFF00000000;
  *((unsigned char *)this + 48) = 0;
  *((void *)this + 8) = 0;
  *((unsigned char *)this + 72) = 0;
  *((void *)this + 13) = 0;
  *((_DWORD *)this + 24) = 0;
  *(_DWORD *)((char *)this + 91) = 0;
  *(void *)((char *)this + 76) = 0;
  *(void *)((char *)this + 84) = 0;
  double result = -5.48612423e303;
  *((void *)this + 14) = 0xFF00000007FFFFFFLL;
  *((void *)this + 15) = 0;
  return result;
}

void re::HashTable<unsigned long,re::SharedPtr<re::MaterialParameterTable>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  uint64_t v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    uint64_t v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    uint64_t v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      uint64_t v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  uint64_t v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + 24 * v10, 16);
  if (v12)
  {
    uint64_t v14 = v12;
    *(void *)(a1 + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &unk_2343655D0, 4 * v10);
    }
    *(void *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

void re::HashTable<unsigned long,re::SharedPtr<re::MaterialParameterTable>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(void *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<unsigned long,re::SharedPtr<re::MaterialParameterTable>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::init((uint64_t)v13, v4, a2);
      long long v5 = *(_OWORD *)v13;
      *(_OWORD *)uint64_t v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      uint64_t v6 = *(void *)&v13[16];
      *(void *)&v13[16] = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = v6;
      long long v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&unsigned char v13[24] = *(_OWORD *)(a1 + 24);
      unsigned int v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      unsigned int v9 = v7;
      if (v7)
      {
        uint64_t v10 = 0;
        unint64_t v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(void *)&v13[16] + v10) & 0x80000000) != 0)
          {
            re::HashTable<unsigned long,re::SharedPtr<re::MaterialParameterTable>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addAsMove(a1, *(void *)(*(void *)&v13[16] + v10 + 8) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(*(void *)&v13[16] + v10 + 8), (void *)(*(void *)&v13[16] + v10 + 8), (void *)(*(void *)&v13[16] + v10 + 16));
            unsigned int v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 24;
        }
        while (v11 < v9);
      }
      re::HashTable<unsigned long,re::SharedPtr<re::MaterialParameterTable>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2) {
      signed int v12 = a2;
    }
    else {
      signed int v12 = 3;
    }
  }
}

uint64_t re::HashTable<unsigned long,re::SharedPtr<re::MaterialParameterTable>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, void *a5)
{
  uint64_t v8 = *(unsigned int *)(a1 + 36);
  if (v8 == 0x7FFFFFFF)
  {
    uint64_t v8 = *(unsigned int *)(a1 + 32);
    int v9 = v8;
    if (v8 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned long,re::SharedPtr<re::MaterialParameterTable>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(a1, (2 * *(_DWORD *)(a1 + 28)));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v9 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = v9 + 1;
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 24 * v8);
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 24 * v8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  uint64_t v13 = 24 * v8;
  *(_DWORD *)(v11 + v13) = v12 | 0x80000000;
  uint64_t v14 = *(void *)(a1 + 8);
  *(_DWORD *)(*(void *)(a1 + 16) + v13) = *(_DWORD *)(*(void *)(a1 + 16) + 24 * v8) & 0x80000000 | *(_DWORD *)(v14 + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 24 * v8 + 8) = *a4;
  *(void *)(*(void *)(a1 + 16) + 24 * v8 + 16) = *a5;
  *a5 = 0;
  *(_DWORD *)(v14 + 4 * a2) = v8;
  ++*(_DWORD *)(a1 + 28);
  return v8;
}

uint64_t re::SmallHashTable<unsigned int,re::DynamicOverflowArray<re::AABB,2ul>,8ul,re::Hash<unsigned int>,re::EqualTo<unsigned int>,false>::~SmallHashTable(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 + 16);
  re::DynamicInlineArray<re::KeyValuePair<unsigned int,re::DynamicOverflowArray<re::AABB,2ul>>,8ul>::clear((void *)(a1 + 16));
  re::HashTable<unsigned int,re::DynamicOverflowArray<re::AABB,2ul>,re::Hash<unsigned int>,re::EqualTo<unsigned int>,false,false>::deinit((uint64_t *)(a1 + 928));
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  re::HashTable<unsigned int,re::DynamicOverflowArray<re::AABB,2ul>,re::Hash<unsigned int>,re::EqualTo<unsigned int>,false,false>::deinit((uint64_t *)(a1 + 928));
  re::DynamicInlineArray<re::KeyValuePair<unsigned int,re::DynamicOverflowArray<re::AABB,2ul>>,8ul>::clear(v2);
  return a1;
}

void *re::DynamicInlineArray<re::KeyValuePair<unsigned int,re::DynamicOverflowArray<re::AABB,2ul>>,8ul>::clear(void *result)
{
  unint64_t v1 = result;
  if (*result)
  {
    uint64_t v2 = 112 * *result;
    uint64_t v3 = (uint64_t)(result + 4);
    do
    {
      v3 += 112;
      v2 -= 112;
    }
    while (v2);
  }
  *unint64_t v1 = 0;
  ++*((_DWORD *)v1 + 2);
  return result;
}

double re::HashTable<unsigned int,re::DynamicOverflowArray<re::AABB,2ul>,re::Hash<unsigned int>,re::EqualTo<unsigned int>,false,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    unint64_t v3 = *((unsigned int *)a1 + 8);
    if (v3)
    {
      uint64_t v4 = 0;
      for (unint64_t i = 0; i < v3; ++i)
      {
        uint64_t v6 = a1[2];
        int v7 = *(_DWORD *)(v6 + v4);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + v4) = v7 & 0x7FFFFFFF;
          unint64_t v3 = *((unsigned int *)a1 + 8);
        }
        v4 += 112;
      }
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

uint64_t re::DynamicArray<re::mtl::RenderCommandEncoder>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    unint64_t v3 = *(re::mtl::RenderCommandEncoder **)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = 16 * v4;
        do
        {
          re::mtl::RenderCommandEncoder::~RenderCommandEncoder(v3);
          unint64_t v3 = (re::mtl::RenderCommandEncoder *)((char *)v3 + 16);
          v5 -= 16;
        }
        while (v5);
        uint64_t result = *(void *)a1;
        unint64_t v3 = *(re::mtl::RenderCommandEncoder **)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, re::mtl::RenderCommandEncoder *))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::HashTable<unsigned int,re::DynamicOverflowArray<re::AABB,2ul>,re::Hash<unsigned int>,re::EqualTo<unsigned int>,false,false>::add(uint64_t result, _DWORD *a2, uint64_t a3)
{
  uint64_t v5 = result;
  unint64_t v6 = *a2;
  unint64_t v7 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (v6 ^ (v6 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v6 ^ (v6 >> 30))) >> 27));
  unint64_t v8 = v7 ^ (v7 >> 31);
  if (*(void *)result)
  {
    unint64_t v9 = v8 % *(unsigned int *)(result + 24);
    uint64_t v10 = *(unsigned int *)(*(void *)(result + 8) + 4 * v9);
    if (v10 != 0x7FFFFFFF)
    {
      uint64_t v11 = *(void *)(result + 16);
      if (*(_DWORD *)(v11 + 112 * v10 + 4) == v6) {
        return result;
      }
      while (1)
      {
        LODWORD(v10) = *(_DWORD *)(v11 + 112 * v10) & 0x7FFFFFFF;
        if (v10 == 0x7FFFFFFF) {
          break;
        }
        if (*(_DWORD *)(v11 + 112 * v10 + 4) == v6) {
          return result;
        }
      }
    }
  }
  else
  {
    LODWORD(v9) = 0;
  }
  uint64_t result = re::HashTable<unsigned int,re::DynamicOverflowArray<re::AABB,2ul>,re::Hash<unsigned int>,re::EqualTo<unsigned int>,false,false>::addAsMove(result, v9, v8, a2, a3);
  ++*(_DWORD *)(v5 + 40);
  return result;
}

void re::HashTable<unsigned int,re::DynamicOverflowArray<re::AABB,2ul>,re::Hash<unsigned int>,re::EqualTo<unsigned int>,false,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  uint64_t v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    unint64_t v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    unint64_t v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      uint64_t v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  int v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + 112 * v10, 16);
  if (v12)
  {
    uint64_t v14 = v12;
    *(void *)(a1 + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &unk_2343655D0, 4 * v10);
    }
    *(void *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

uint64_t re::HashTable<unsigned int,re::DynamicOverflowArray<re::AABB,2ul>,re::Hash<unsigned int>,re::EqualTo<unsigned int>,false,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _DWORD *a4, uint64_t a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      int v12 = *(_DWORD *)(a1 + 28);
      signed int v13 = 2 * v12;
      uint64_t v14 = *(void *)a1;
      if (*(void *)a1)
      {
        if (v13) {
          BOOL v15 = v9 == v13;
        }
        else {
          BOOL v15 = 1;
        }
        if (!v15 && (v12 & 0x80000000) == 0)
        {
          memset(v31, 0, 36);
          *(void *)&v31[36] = 0x7FFFFFFFLL;
          re::HashTable<unsigned int,re::DynamicOverflowArray<re::AABB,2ul>,re::Hash<unsigned int>,re::EqualTo<unsigned int>,false,false>::init((uint64_t)v31, v14, v13);
          long long v16 = *(_OWORD *)v31;
          *(_OWORD *)id v31 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v16;
          uint64_t v17 = *(void *)&v31[16];
          uint64_t v18 = *(void *)(a1 + 16);
          *(void *)&v31[16] = v18;
          *(void *)(a1 + 16) = v17;
          long long v20 = *(_OWORD *)&v31[24];
          *(_OWORD *)&v31[24] = *(_OWORD *)(a1 + 24);
          unsigned int v19 = *(_DWORD *)&v31[32];
          *(_OWORD *)(a1 + 24) = v20;
          unint64_t v21 = v19;
          if (v19)
          {
            unint64_t v22 = 0;
            uint64_t v23 = v18 + 16;
            do
            {
              if ((*(_DWORD *)(v23 - 16) & 0x80000000) != 0)
              {
                unint64_t v24 = 0xBF58476D1CE4E5B9
                    * (*(unsigned int *)(v23 - 12) ^ ((unint64_t)*(unsigned int *)(v23 - 12) >> 30));
                unint64_t v25 = (0x94D049BB133111EBLL * (v24 ^ (v24 >> 27))) ^ ((0x94D049BB133111EBLL * (v24 ^ (v24 >> 27))) >> 31);
                re::HashTable<unsigned int,re::DynamicOverflowArray<re::AABB,2ul>,re::Hash<unsigned int>,re::EqualTo<unsigned int>,false,false>::addAsMove(a1, v25 % *(unsigned int *)(a1 + 24), v25, v23 - 12, v23);
              }
              ++v22;
              v23 += 112;
            }
            while (v22 < v21);
          }
          re::HashTable<unsigned int,re::DynamicOverflowArray<re::AABB,2ul>,re::Hash<unsigned int>,re::EqualTo<unsigned int>,false,false>::deinit((uint64_t *)v31);
        }
      }
      else
      {
        if (v13) {
          signed int v28 = 2 * v12;
        }
        else {
          signed int v28 = 3;
        }
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = v10 + 1;
    uint64_t v26 = *(void *)(a1 + 16);
    int v27 = *(_DWORD *)(v26 + 112 * v9);
  }
  else
  {
    uint64_t v26 = *(void *)(a1 + 16);
    int v27 = *(_DWORD *)(v26 + 112 * v9);
    *(_DWORD *)(a1 + 36) = v27 & 0x7FFFFFFF;
  }
  uint64_t v29 = 112 * v9;
  *(_DWORD *)(v26 + v29) = v27 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + v29) = *(_DWORD *)(*(void *)(a1 + 16) + 112 * v9) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(_DWORD *)(*(void *)(a1 + 16) + 112 * v9 + 4) = *a4;
  re::DynamicOverflowArray<re::AABB,2ul>::DynamicOverflowArray(*(void *)(a1 + 16) + 112 * v9 + 16, a5);
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

uint64_t re::DynamicOverflowArray<re::AABB,2ul>::DynamicOverflowArray(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 1;
  *(void *)(a1 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0;
  unint64_t v4 = (char *)(a1 + 32);
  *(void *)(a1 + 40) = 0;
  if ((*(unsigned char *)(a2 + 16) & 1) == 0)
  {
    *(_DWORD *)(a1 + 16) = 3;
    uint64_t v5 = *(void *)(a2 + 8);
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v5;
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    uint64_t v6 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(void *)(a2 + 40) = v6;
    *(_DWORD *)(a2 + 16) = *(_DWORD *)(a2 + 16) & 0xFFFFFFFE | *(_DWORD *)(a1 + 16) & 1;
    *(_DWORD *)(a1 + 16) &= ~1u;
    uint64_t v7 = *(void *)(a1 + 32);
    *(void *)(a1 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = *(void *)(a2 + 32);
    *(void *)(a2 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = v7;
LABEL_18:
    int v14 = 2;
    goto LABEL_19;
  }
  unint64_t v8 = *(void *)(a2 + 8);
  if (!v8)
  {
    *(void *)a1 = *(void *)a2;
    goto LABEL_18;
  }
  *(void *)a1 = *(void *)a2;
  re::DynamicOverflowArray<re::AABB,2ul>::setCapacity((void *)a1, v8);
  if (*(unsigned char *)(a2 + 16)) {
    uint64_t v9 = (const void *)(a2 + 32);
  }
  else {
    uint64_t v9 = *(const void **)(a2 + 40);
  }
  uint64_t v10 = *(void *)(a1 + 8);
  int v11 = *(_DWORD *)(a1 + 16);
  int v12 = v4;
  if ((v11 & 1) == 0) {
    int v12 = *(void **)(a1 + 40);
  }
  if (v10)
  {
    memmove(v12, v9, 32 * v10);
    int v11 = *(_DWORD *)(a1 + 16);
  }
  if ((v11 & 1) == 0) {
    unint64_t v4 = *(char **)(a1 + 40);
  }
  if (*(_DWORD *)(a2 + 16)) {
    uint64_t v13 = a2 + 32;
  }
  else {
    uint64_t v13 = *(void *)(a2 + 40);
  }
  memcpy(&v4[32 * *(void *)(a1 + 8)], (const void *)(v13 + 32 * *(void *)(a1 + 8)), 32 * v8 - 32 * *(void *)(a1 + 8));
  *(void *)(a1 + 8) = v8;
  *(void *)(a2 + 8) = 0;
  int v14 = 4;
LABEL_19:
  *(_DWORD *)(a2 + 16) = ((*(_DWORD *)(a2 + 16) & 0xFFFFFFFE) + v14) | *(_DWORD *)(a2 + 16) & 1;
  *(_DWORD *)(a1 + 16) += 2;
  return a1;
}

void *re::DynamicOverflowArray<re::AABB,2ul>::setCapacity(void *result, unint64_t a2)
{
  unint64_t v4 = result;
  uint64_t v5 = *result;
  if (a2 && !v5)
  {
    uint64_t result = (void *)re::DynamicOverflowArray<re::AABB,2ul>::setCapacity(v4, a2);
    int v6 = *((_DWORD *)v4 + 4) + 2;
LABEL_4:
    *((_DWORD *)v4 + 4) = v6;
    return result;
  }
  int v7 = *((_DWORD *)result + 4);
  if (v7) {
    uint64_t v8 = 2;
  }
  else {
    uint64_t v8 = result[4];
  }
  if (v8 != a2)
  {
    unint64_t v9 = result[1];
    if (v9 <= a2 && (a2 > 2 || (v7 & 1) == 0))
    {
      if (a2 < 3)
      {
        int v14 = result + 4;
        uint64_t v15 = v4[5];
        if (v7) {
          long long v16 = v4 + 4;
        }
        else {
          long long v16 = (const void *)v4[5];
        }
        memcpy(v14, v16, 32 * v9);
        uint64_t result = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 40))(v5, v15);
        int v6 = *((_DWORD *)v4 + 4) | 1;
        goto LABEL_4;
      }
      if (a2 >> 59)
      {
        re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicOverflowArray<T, N>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 646, 32, a2);
        _os_crash();
        __break(1u);
      }
      else
      {
        uint64_t v2 = 32 * a2;
        uint64_t v10 = (void *)(*(uint64_t (**)(void, unint64_t, uint64_t))(*(void *)v5 + 32))(*result, 32 * a2, 16);
        if (v10)
        {
          int v12 = v10;
          if (v4[2]) {
            uint64_t v13 = v4 + 4;
          }
          else {
            uint64_t v13 = (const void *)v4[5];
          }
          uint64_t result = memcpy(v10, v13, 32 * v4[1]);
          int v17 = *((_DWORD *)v4 + 4);
          if ((v17 & 1) == 0)
          {
            uint64_t result = (void *)(*(uint64_t (**)(void, void))(*(void *)*v4 + 40))(*v4, v4[5]);
            int v17 = *((_DWORD *)v4 + 4);
          }
          *((_DWORD *)v4 + 4) = v17 & 0xFFFFFFFE;
          unsigned char v4[4] = a2;
          v4[5] = v12;
          return result;
        }
      }
      re::internal::assertLog((re::internal *)6, v11, "assertion failure: '%s' (%s:line %i) DynamicOverflowArray<T, N> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 650, v2, *(void *)(*v4 + 8));
      uint64_t result = (void *)_os_crash();
      __break(1u);
    }
  }
  return result;
}

uint64_t re::RenderGraphDataStore::tryGet<re::CameraMatrices>(uint64_t a1, uint64_t a2)
{
  v7[2] = *MEMORY[0x263EF8340];
  {
    re::introspect<re::CameraMatrices>(void)::info = (_UNKNOWN *)re::introspect_CameraMatrices(0);
  }
  size_t v4 = strlen(*((const char **)re::introspect<re::CameraMatrices>(void)::info + 6));
  if (v4)
  {
    MurmurHash3_x64_128(*((void *)re::introspect<re::CameraMatrices>(void)::info + 6), v4, 0, (unint64_t *)v7);
    unint64_t v5 = (v7[1] - 0x61C8864680B583E9 + (v7[0] << 6) + ((unint64_t)v7[0] >> 2)) ^ v7[0];
  }
  else
  {
    unint64_t v5 = 0;
  }
  v7[0] = (a2 - 0x61C8864680B583E9 + (v5 << 6) + (v5 >> 2)) ^ v5;
  uint64_t result = re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(a1 + 64, v7);
  if (result) {
    return *(void *)result;
  }
  return result;
}

uint64_t re::RenderGraphDataStore::tryGet<re::ViewportPercentData>(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = (unint64_t)"N2re19ViewportPercentDataE";
  if (((unint64_t)"N2re19ViewportPercentDataE" & 0x8000000000000000) != 0)
  {
    unint64_t v3 = (unsigned __int8 *)((unint64_t)"N2re19ViewportPercentDataE" & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v4 = 5381;
    do
    {
      unint64_t v2 = v4;
      unsigned int v5 = *v3++;
      uint64_t v4 = (33 * v4) ^ v5;
    }
    while (v5);
  }
  unint64_t v7 = (a2 + (v2 << 6) + (v2 >> 2) - 0x61C8864680B583E9) ^ v2;
  uint64_t result = re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(a1 + 64, (uint64_t *)&v7);
  if (result) {
    return *(void *)result;
  }
  return result;
}

uint64_t re::RenderGraphDataStore::tryGet<re::VRRData>(uint64_t a1, uint64_t a2)
{
  v7[2] = *MEMORY[0x263EF8340];
  {
    re::introspect<re::VRRData>(void)::info = (_UNKNOWN *)re::introspect_VRRData(0);
  }
  size_t v4 = strlen(*((const char **)re::introspect<re::VRRData>(void)::info + 6));
  if (v4)
  {
    MurmurHash3_x64_128(*((void *)re::introspect<re::VRRData>(void)::info + 6), v4, 0, (unint64_t *)v7);
    unint64_t v5 = (v7[1] - 0x61C8864680B583E9 + (v7[0] << 6) + ((unint64_t)v7[0] >> 2)) ^ v7[0];
  }
  else
  {
    unint64_t v5 = 0;
  }
  v7[0] = (a2 - 0x61C8864680B583E9 + (v5 << 6) + (v5 >> 2)) ^ v5;
  uint64_t result = re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(a1 + 64, v7);
  if (result) {
    return *(void *)result;
  }
  return result;
}

uint64_t re::RenderGraphDataStore::tryGet<re::SceneScope>(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = (unint64_t)"N2re10SceneScopeE";
  if (((unint64_t)"N2re10SceneScopeE" & 0x8000000000000000) != 0)
  {
    unint64_t v3 = (unsigned __int8 *)((unint64_t)"N2re10SceneScopeE" & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v4 = 5381;
    do
    {
      unint64_t v2 = v4;
      unsigned int v5 = *v3++;
      uint64_t v4 = (33 * v4) ^ v5;
    }
    while (v5);
  }
  unint64_t v7 = (a2 + (v2 << 6) + (v2 >> 2) - 0x61C8864680B583E9) ^ v2;
  uint64_t result = re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(a1 + 64, (uint64_t *)&v7);
  if (result) {
    return *(void *)result;
  }
  return result;
}

uint64_t re::RenderGraphDataStore::tryGet<re::SceneIndexData>(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = (unint64_t)"N2re14SceneIndexDataE";
  if (((unint64_t)"N2re14SceneIndexDataE" & 0x8000000000000000) != 0)
  {
    unint64_t v3 = (unsigned __int8 *)((unint64_t)"N2re14SceneIndexDataE" & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v4 = 5381;
    do
    {
      unint64_t v2 = v4;
      unsigned int v5 = *v3++;
      uint64_t v4 = (33 * v4) ^ v5;
    }
    while (v5);
  }
  unint64_t v7 = (a2 + (v2 << 6) + (v2 >> 2) - 0x61C8864680B583E9) ^ v2;
  uint64_t result = re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(a1 + 64, (uint64_t *)&v7);
  if (result) {
    return *(void *)result;
  }
  return result;
}

uint64_t re::RenderGraphDataStore::tryGet<re::StencilInfoData>(uint64_t a1, uint64_t a2)
{
  v7[2] = *MEMORY[0x263EF8340];
  {
    re::introspect<re::StencilInfoData>(void)::info = (_UNKNOWN *)re::introspect_StencilInfoData(0);
  }
  size_t v4 = strlen(*((const char **)re::introspect<re::StencilInfoData>(void)::info + 6));
  if (v4)
  {
    MurmurHash3_x64_128(*((void *)re::introspect<re::StencilInfoData>(void)::info + 6), v4, 0, (unint64_t *)v7);
    unint64_t v5 = (v7[1] - 0x61C8864680B583E9 + (v7[0] << 6) + ((unint64_t)v7[0] >> 2)) ^ v7[0];
  }
  else
  {
    unint64_t v5 = 0;
  }
  v7[0] = (a2 - 0x61C8864680B583E9 + (v5 << 6) + (v5 >> 2)) ^ v5;
  uint64_t result = re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(a1 + 64, v7);
  if (result) {
    return *(void *)result;
  }
  return result;
}

uint64_t re::RenderGraphDataStore::tryGet<re::ViewportData>(uint64_t a1, uint64_t a2)
{
  v7[2] = *MEMORY[0x263EF8340];
  {
    re::introspect<re::ViewportData>(void)::info = (_UNKNOWN *)re::introspect_ViewportData(0);
  }
  size_t v4 = strlen(*((const char **)re::introspect<re::ViewportData>(void)::info + 6));
  if (v4)
  {
    MurmurHash3_x64_128(*((void *)re::introspect<re::ViewportData>(void)::info + 6), v4, 0, (unint64_t *)v7);
    unint64_t v5 = (v7[1] - 0x61C8864680B583E9 + (v7[0] << 6) + ((unint64_t)v7[0] >> 2)) ^ v7[0];
  }
  else
  {
    unint64_t v5 = 0;
  }
  v7[0] = (a2 - 0x61C8864680B583E9 + (v5 << 6) + (v5 >> 2)) ^ v5;
  uint64_t result = re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(a1 + 64, v7);
  if (result) {
    return *(void *)result;
  }
  return result;
}

uint64_t re::RenderGraphDataStore::tryGet<re::TintContextData>(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = (unint64_t)"N2re15TintContextDataE";
  if (((unint64_t)"N2re15TintContextDataE" & 0x8000000000000000) != 0)
  {
    unint64_t v3 = (unsigned __int8 *)((unint64_t)"N2re15TintContextDataE" & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v4 = 5381;
    do
    {
      unint64_t v2 = v4;
      unsigned int v5 = *v3++;
      uint64_t v4 = (33 * v4) ^ v5;
    }
    while (v5);
  }
  unint64_t v7 = (a2 + (v2 << 6) + (v2 >> 2) - 0x61C8864680B583E9) ^ v2;
  uint64_t result = re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(a1 + 64, (uint64_t *)&v7);
  if (result) {
    return *(void *)result;
  }
  return result;
}

uint64_t re::RenderGraphDataStore::tryGet<re::TriangleFillModeData>(uint64_t a1, uint64_t a2)
{
  v7[2] = *MEMORY[0x263EF8340];
  {
    re::introspect<re::TriangleFillModeData>(void)::info = (_UNKNOWN *)re::introspect_TriangleFillModeData(0);
  }
  size_t v4 = strlen(*((const char **)re::introspect<re::TriangleFillModeData>(void)::info + 6));
  if (v4)
  {
    MurmurHash3_x64_128(*((void *)re::introspect<re::TriangleFillModeData>(void)::info + 6), v4, 0, (unint64_t *)v7);
    unint64_t v5 = (v7[1] - 0x61C8864680B583E9 + (v7[0] << 6) + ((unint64_t)v7[0] >> 2)) ^ v7[0];
  }
  else
  {
    unint64_t v5 = 0;
  }
  v7[0] = (a2 - 0x61C8864680B583E9 + (v5 << 6) + (v5 >> 2)) ^ v5;
  uint64_t result = re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(a1 + 64, v7);
  if (result) {
    return *(void *)result;
  }
  return result;
}

uint64_t re::RenderGraphDataStore::tryGet<re::PipelineCompilationData>(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = (unint64_t)"N2re23PipelineCompilationDataE";
  if (((unint64_t)"N2re23PipelineCompilationDataE" & 0x8000000000000000) != 0)
  {
    unint64_t v3 = (unsigned __int8 *)((unint64_t)"N2re23PipelineCompilationDataE" & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v4 = 5381;
    do
    {
      unint64_t v2 = v4;
      unsigned int v5 = *v3++;
      uint64_t v4 = (33 * v4) ^ v5;
    }
    while (v5);
  }
  unint64_t v7 = (a2 + (v2 << 6) + (v2 >> 2) - 0x61C8864680B583E9) ^ v2;
  uint64_t result = re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(a1 + 64, (uint64_t *)&v7);
  if (result) {
    return *(void *)result;
  }
  return result;
}

uint64_t re::ProfilerTimeGuard<(re::ProfilerStatistic)79>::end(uint64_t result)
{
  if (*(void *)result && *(void *)(*(void *)result + 152))
  {
    unint64_t v1 = (void *)result;
    uint64_t result = mach_absolute_time();
    uint64_t v2 = *v1;
    unint64_t v3 = *(int64x2_t **)(*v1 + 152);
    if (v3)
    {
      uint64_t v4 = result - v1[1];
      uint64_t v5 = v3[320].u64[0];
      if (v5 >= v4) {
        uint64_t v5 = result - v1[1];
      }
      v3[320].i64[0] = v5;
      unint64_t v6 = v3[320].u64[1];
      if (v6 <= v4) {
        unint64_t v6 = v4;
      }
      v3[320].i64[1] = v6;
      int64x2_t v7 = vdupq_n_s64(1uLL);
      v7.i64[0] = v4;
      v3[321] = vaddq_s64(v3[321], v7);
      *(unsigned char *)(v2 + 184) = 0;
    }
    *unint64_t v1 = 0;
  }
  return result;
}

uint64_t re::RenderGraphDataStore::tryGet<re::CameraData>(uint64_t a1, uint64_t a2)
{
  v7[2] = *MEMORY[0x263EF8340];
  {
    re::introspect<re::CameraData>(void)::info = (_UNKNOWN *)re::introspect_CameraData(0);
  }
  size_t v4 = strlen(*((const char **)re::introspect<re::CameraData>(void)::info + 6));
  if (v4)
  {
    MurmurHash3_x64_128(*((void *)re::introspect<re::CameraData>(void)::info + 6), v4, 0, (unint64_t *)v7);
    unint64_t v5 = (v7[1] - 0x61C8864680B583E9 + (v7[0] << 6) + ((unint64_t)v7[0] >> 2)) ^ v7[0];
  }
  else
  {
    unint64_t v5 = 0;
  }
  v7[0] = (a2 - 0x61C8864680B583E9 + (v5 << 6) + (v5 >> 2)) ^ v5;
  uint64_t result = re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(a1 + 64, v7);
  if (result) {
    return *(void *)result;
  }
  return result;
}

uint64_t re::DynamicOverflowArray<re::RenderGraphTargetHandle,8ul>::setCapacity(uint64_t *a1, unint64_t a2)
{
  uint64_t result = *a1;
  if (a2 && !result)
  {
    uint64_t result = re::DynamicOverflowArray<re::RenderGraphTargetHandle,8ul>::setCapacity(a1, a2);
    int v6 = *((_DWORD *)a1 + 4) + 2;
LABEL_4:
    *((_DWORD *)a1 + 4) = v6;
    return result;
  }
  int v7 = *((_DWORD *)a1 + 4);
  if (v7) {
    uint64_t v8 = 8;
  }
  else {
    uint64_t v8 = a1[3];
  }
  if (v8 != a2)
  {
    unint64_t v9 = a1[1];
    if (v9 <= a2 && (a2 > 8 || (v7 & 1) == 0))
    {
      if (a2 < 9)
      {
        int v14 = a1 + 3;
        if (v7) {
          uint64_t v15 = a1 + 3;
        }
        else {
          uint64_t v15 = (void *)a1[4];
        }
        if (v9)
        {
          long long v16 = &v15[2 * v9];
          do
          {
            *int v14 = 0;
            v14[1] = -1;
            *int v14 = *v15;
            v14[1] = v15[1];
            v15 += 2;
            v14 += 2;
          }
          while (v15 != v16);
        }
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 40))(result);
        int v6 = *((_DWORD *)a1 + 4) | 1;
        goto LABEL_4;
      }
      if (a2 >> 60)
      {
        re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicOverflowArray<T, N>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 646, 16, a2);
        _os_crash();
        __break(1u);
      }
      else
      {
        uint64_t v2 = 16 * a2;
        uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)result + 32))(result, 16 * a2, 8);
        if (result)
        {
          uint64_t v11 = result;
          int v12 = *((_DWORD *)a1 + 4);
          if (v12) {
            uint64_t v13 = a1 + 3;
          }
          else {
            uint64_t v13 = (void *)a1[4];
          }
          uint64_t v17 = a1[1];
          if (v17)
          {
            uint64_t v18 = &v13[2 * v17];
            unsigned int v19 = (void *)result;
            do
            {
              *unsigned int v19 = 0;
              v19[1] = -1;
              *unsigned int v19 = *v13;
              v19[1] = v13[1];
              v13 += 2;
              v19 += 2;
            }
            while (v13 != v18);
            int v12 = *((_DWORD *)a1 + 4);
          }
          if ((v12 & 1) == 0)
          {
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)*a1 + 40))(*a1, a1[4]);
            int v12 = *((_DWORD *)a1 + 4);
          }
          *((_DWORD *)a1 + 4) = v12 & 0xFFFFFFFE;
          a1[3] = a2;
          a1[4] = v11;
          return result;
        }
      }
      re::internal::assertLog((re::internal *)6, v10, "assertion failure: '%s' (%s:line %i) DynamicOverflowArray<T, N> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 650, v2, *(void *)(*a1 + 8));
      uint64_t result = _os_crash();
      __break(1u);
    }
  }
  return result;
}

uint64_t re::DynamicOverflowArray<re::InlineFunction<464ul,void ()(re::Matrix4x4<float> const&,re::Matrix4x4<float> const&)>,5ul>::ensureCapacity(uint64_t result)
{
  uint64_t v1 = result;
  if (*(void *)result)
  {
    unint64_t v2 = *(void *)(result + 8);
    if (*(unsigned char *)(result + 16)) {
      unint64_t v3 = 5;
    }
    else {
      unint64_t v3 = *(void *)(result + 24);
    }
    if (v2 >= v3)
    {
      return re::DynamicOverflowArray<re::InlineFunction<464ul,void ()(re::Matrix4x4<float> const&,re::Matrix4x4<float> const&)>,5ul>::growCapacity(result, v2 + 1);
    }
  }
  else
  {
    unint64_t v4 = *(void *)(v1 + 8) + 1;
    uint64_t result = re::DynamicOverflowArray<re::InlineFunction<464ul,void ()(re::Matrix4x4<float> const&,re::Matrix4x4<float> const&)>,5ul>::setCapacity((uint64_t *)v1, v4);
    *(_DWORD *)(v1 + 16) += 2;
  }
  return result;
}

uint64_t re::DynamicOverflowArray<re::InlineFunction<464ul,void ()(re::Matrix4x4<float> const&,re::Matrix4x4<float> const&)>,5ul>::growCapacity(uint64_t result, unint64_t a2)
{
  unint64_t v2 = a2;
  uint64_t v3 = result;
  if (!*(void *)result)
  {
    uint64_t result = re::DynamicOverflowArray<re::InlineFunction<464ul,void ()(re::Matrix4x4<float> const&,re::Matrix4x4<float> const&)>,5ul>::setCapacity((uint64_t *)v3, v2);
    *(_DWORD *)(v3 + 16) += 2;
    return result;
  }
  if (*(unsigned char *)(result + 16))
  {
    if (a2 <= 5) {
      return result;
    }
    unint64_t v5 = 10;
  }
  else
  {
    unint64_t v4 = *(void *)(result + 24);
    if (v4 >= a2) {
      return result;
    }
    unint64_t v5 = 2 * v4;
  }
  if (v5 > a2) {
    a2 = v5;
  }
  return re::DynamicOverflowArray<re::InlineFunction<464ul,void ()(re::Matrix4x4<float> const&,re::Matrix4x4<float> const&)>,5ul>::setCapacity((uint64_t *)result, a2);
}

void *re::DynamicArray<re::mtl::RenderCommandEncoder>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    unint64_t v5 = result;
    if (result[2] <= a2)
    {
      uint64_t result = (void *)*result;
      if (!*v5)
      {
        uint64_t result = (void *)re::DynamicArray<re::mtl::RenderCommandEncoder>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (a2 >> 60)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 16, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          uint64_t v2 = 16 * a2;
          uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 16 * a2, 8);
          if (result)
          {
            int v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        uint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      int v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = (re::mtl::RenderCommandEncoder *)v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = (re::mtl::RenderCommandEncoder *)((char *)v8 + 16 * v9);
        uint64_t v11 = v7;
        do
        {
          long long v12 = *(_OWORD *)v8;
          *(void *)uint64_t v8 = 0;
          *v11++ = v12;
          *((void *)v8 + 1) = 0;
          re::mtl::RenderCommandEncoder::~RenderCommandEncoder(v8);
          uint64_t v8 = (re::mtl::RenderCommandEncoder *)((char *)v8 + 16);
        }
        while (v8 != v10);
        uint64_t v8 = (re::mtl::RenderCommandEncoder *)v5[4];
      }
      uint64_t result = (void *)(*(uint64_t (**)(void, re::mtl::RenderCommandEncoder *))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

double re::unpackHalf3Data(re *this, const void *a2, float16x4_t a3)
{
  uint64_t v3 = (char *)this + 8 * (void)a2;
  a3.i32[0] = *(_DWORD *)v3;
  *(void *)&double result = vcvtq_f32_f16(a3).u64[0];
  _H1 = *((_WORD *)v3 + 2);
  __asm { FCVT            S1, H1 }
  return result;
}

{
  char *v3;
  double result;

  uint64_t v3 = (char *)this + 8 * (void)a2;
  a3.i32[0] = *(_DWORD *)v3;
  *(void *)&double result = vcvtq_f32_f16(a3).u64[0];
  _H1 = *((_WORD *)v3 + 2);
  __asm { FCVT            S1, H1 }
  return result;
}

int8x8_t re::unpackChar3NormalizedData(re *this, const void *a2)
{
  uint64_t v2 = (char *)this + 4 * (void)a2;
  v3.i32[0] = *v2;
  v3.i32[1] = v2[1];
  float32x2_t v4 = vdiv_f32(vcvt_f32_s32(v3), (float32x2_t)vdup_n_s32(0x42FE0000u));
  __asm { FMOV            V1.2S, #1.0 }
  return vbsl_s8((int8x8_t)vcgt_f32(v4, _D1), (int8x8_t)_D1, (int8x8_t)v4);
}

{
  char *v2;
  int32x2_t v3;
  float32x2_t v4;

  uint64_t v2 = (char *)this + 4 * (void)a2;
  v3.i32[0] = *v2;
  v3.i32[1] = v2[1];
  float32x2_t v4 = vdiv_f32(vcvt_f32_s32(v3), (float32x2_t)vdup_n_s32(0x42FE0000u));
  __asm { FMOV            V1.2S, #1.0 }
  return vbsl_s8((int8x8_t)vcgt_f32(v4, _D1), (int8x8_t)_D1, (int8x8_t)v4);
}

float32x2_t re::unpackUChar3NormalizedData(re *this, const void *a2)
{
  uint64_t v2 = (unsigned __int8 *)this + 4 * (void)a2;
  v3.i32[0] = *v2;
  v3.i32[1] = v2[1];
  return vdiv_f32(vcvt_f32_u32(v3), (float32x2_t)vdup_n_s32(0x437F0000u));
}

{
  unsigned __int8 *v2;
  uint32x2_t v3;

  uint64_t v2 = (unsigned __int8 *)this + 4 * (void)a2;
  v3.i32[0] = *v2;
  v3.i32[1] = v2[1];
  return vdiv_f32(vcvt_f32_u32(v3), (float32x2_t)vdup_n_s32(0x437F0000u));
}

uint64_t re::unpackFloat3Data(re *this, const void *a2)
{
  return *(void *)((char *)this + 12 * (void)a2);
}

{
  return *(void *)((char *)this + 12 * (void)a2);
}

uint64_t re::RenormalizationDeformer::init(uint64_t this, re::RenderManager *a2)
{
  if (!*(unsigned char *)(this + 8))
  {
    uint64_t v3 = this;
    *(unsigned char *)(this + 8) = 1;
    *(void *)(this + 16) = *((void *)a2 + 4);
    if (*((unsigned char *)a2 + 258))
    {
      for (uint64_t i = 0; i != 16; ++i)
      {
        v15[0] = 0;
        int v6 = 0;
        uint64_t v21 = 0;
        memset(v19, 0, sizeof(v19));
        int v20 = 0;
        char v22 = 0;
        char v23 = 0;
        uint64_t v24 = 0;
        char v25 = 0;
        do
        {
          memset(v9, 0, sizeof(v9));
          int v7 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v9, 0);
          uint64_t v12 = 0;
          uint64_t v13 = 0;
          uint64_t v14 = 0;
          re::TechniqueFunctionConstant::setAs64Bits((re::TechniqueFunctionConstant *)v9, (i >> v6) & 1);
          __int16 v10 = 53;
          __int16 v11 = v6;
          re::DynamicArray<re::TechniqueFunctionConstant>::add((_anonymous_namespace_ *)v19, (re::DynamicString *)v9);
          if (v12)
          {
            if (v13)
            {
              (*(void (**)(void))(*(void *)v12 + 40))();
              uint64_t v13 = 0;
              uint64_t v14 = 0;
            }
            uint64_t v12 = 0;
          }
          unint64_t v5 = *(_anonymous_namespace_ **)&v9[0];
          if (*(void *)&v9[0] && (BYTE8(v9[0]) & 1) != 0) {
            unint64_t v5 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(**(void **)&v9[0] + 40))();
          }
          ++v6;
        }
        while (v6 != 4);
        ComputePipelineState = (void **)re::getOrCreateComputePipelineState((uint64_t)a2, (uint64_t)v15);
        NS::SharedPtr<MTL::Texture>::operator=((void **)(v3 + 8 * i + 24), ComputePipelineState);
        re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)v19);
        this = v18[0];
        if (v18[0])
        {
          if (v18[1]) {
            this = (*(uint64_t (**)(void))(*(void *)v18[0] + 40))();
          }
          memset(v18, 0, sizeof(v18));
        }
        if (v15[0])
        {
          this = v16;
          if (v16)
          {
            if (v17) {
              this = (*(uint64_t (**)(void))(*(void *)v16 + 40))();
            }
          }
        }
      }
      *(unsigned char *)(v3 + 9) = 1;
    }
  }
  return this;
}

double re::RenormalizationDeformer::addDeformationInstance@<D0>(re::RenormalizationDeformer *this@<X0>, unsigned char *a2@<X1>, uint64_t a3@<X8>)
{
  if (*a2)
  {
    char v3 = 0;
  }
  else if (!*((unsigned char *)this + 8) || (char v3 = *((unsigned char *)this + 9)) != 0)
  {
    char v3 = 1;
    uint64_t v4 = 28;
    goto LABEL_7;
  }
  uint64_t v4 = 4;
LABEL_7:
  *(void *)&double result = 0xFFFFFFFFLL;
  *(void *)a3 = 0xFFFFFFFFLL;
  *(void *)(a3 + 8) = 3;
  *(void *)(a3 + 16) = v4;
  *(unsigned char *)(a3 + 24) = v3;
  *(void *)(a3 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = -1;
  *(void *)(a3 + 40) = 0;
  *(void *)(a3 + 48) = 0;
  *(void *)(a3 + 56) = 0;
  return result;
}

uint64_t re::RenormalizationDeformer::allocateBuffers(re *a1, re::FrameContext *a2, unsigned int a3, uint64_t *a4)
{
  uint64_t v4 = a4;
  uint64_t v110 = *MEMORY[0x263EF8340];
  unint64_t v7 = *a4;
  unint64_t v8 = *(void *)(*a4 + 48);
  re::globalAllocators(a1);
  uint64_t v9 = *((void *)a2 + 3);
  __int16 v11 = (char **)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 24, 8);
  uint64_t v74 = a2;
  uint64_t v12 = (char *)*((void *)a2 + 3);
  v11[1] = (char *)v8;
  v11[2] = 0;
  *__int16 v11 = v12;
  if (v8)
  {
    if (v8 >= 0x492492492492493)
    {
LABEL_46:
      re::internal::assertLog((re::internal *)6, v10, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 56, v8);
      _os_crash();
      __break(1u);
      goto LABEL_47;
    }
    uint64_t v12 = (char *)(*(uint64_t (**)(char *, unint64_t, uint64_t))(*(void *)v12 + 32))(v12, 56 * v8, 8);
    v11[2] = v12;
    if (!v12)
    {
LABEL_47:
      re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
      _os_crash();
      __break(1u);
LABEL_48:
      re::internal::assertLog((re::internal *)5, v42, "assertion failure: '%s' (%s:line %i) Invalid deformation execution mode: %u.", "!\"Unreachable code\"", "allocateBuffers", 224, v44);
      _os_crash();
      __break(1u);
    }
    uint64_t v14 = v12;
    if (v8 != 1)
    {
      bzero(v12, 56 * v8 - 56);
      v14 += 56 * v8 - 56;
    }
    *((void *)v14 + 6) = 0;
    *((_OWORD *)v14 + 1) = 0u;
    *((_OWORD *)v14 + 2) = 0u;
    *(_OWORD *)uint64_t v14 = 0u;
  }
  unsigned int v73 = a3;
  unint64_t v15 = (unint64_t)&v105;
  *((void *)&v106 + 1) = re::globalAllocators((re *)v12)[2];
  *(void *)&long long v107 = &v105;
  *(void *)&long long v105 = &unk_26E710A98;
  uint64_t v77 = (*(uint64_t (**)(uint64_t, char **, long long *))(*(void *)v9 + 16))(v9, v11, &v105);
  re::FunctionBase<24ul,void ()(void *)>::destroyCallable((uint64_t)&v105);
  if (v8)
  {
    unint64_t v16 = 0;
    uint64_t v81 = v7 + 8;
    unint64_t v82 = v4;
    unint64_t v80 = v8;
    while (1)
    {
      uint64_t v17 = re::BucketArray<re::DeformationInstanceIndex,64ul>::operator[](v81, v16);
      unint64_t v19 = *(void *)(v17 + 8);
      unint64_t v20 = v4[6];
      if (v20 <= v19) {
        break;
      }
      uint64_t v21 = v17;
      unint64_t v8 = v4[5];
      uint64_t v22 = re::BucketArray<re::ActiveDeformation,8ul>::operator[](v4[1], v19);
      uint64_t v83 = (unsigned char *)(v8 + 312 * v19);
      if ((*v83 & 4) != 0)
      {
        uint64_t v23 = v22;
        uint64_t v24 = re::DataArray<re::MeshModel>::get(*((void *)a1 + 2) + 8, *(void *)(*(void *)(v22 + 368) + 16));
        uint64_t v78 = v23;
        unint64_t v7 = *(unsigned __int16 *)(v23 + 392);
        unint64_t v15 = *(void *)(v24 + 56);
        if (v15 <= v7) {
          goto LABEL_41;
        }
        unint64_t v15 = *(void *)(v77 + 8);
        if (v15 <= v16) {
          goto LABEL_42;
        }
        uint64_t v25 = *(void *)(v24 + 64);
        uint64_t v26 = (re::AttributeTable *)(v25 + 560 * *(unsigned __int16 *)(v23 + 392));
        unsigned int v76 = (void *)(*(void *)(v77 + 16) + 56 * v16);
        int v27 = v26;
        do
        {
          unint64_t v15 = (unint64_t)v27;
          int v27 = (re::AttributeTable *)*((void *)v27 + 1);
        }
        while (v27 && !*(void *)(v15 + 72));
        uint64_t v79 = *(void *)(v77 + 16);
        *(void *)&long long v105 = 0x66739F42610D3BC2;
        uint64_t v28 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v15 + 48), &v105);
        uint64_t v29 = v28 == -1 ? 0 : (unsigned __int8 *)(*(void *)(v15 + 56) + 16 * v28 + 8);
        uint64_t v30 = (void *)(v25 + 560 * v7);
        do
        {
          id v31 = v30;
          uint64_t v30 = (void *)v30[1];
        }
        while (v30 && !v31[9]);
        *(void *)&long long v105 = 0x535FC835C0260B06;
        uint64_t v32 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(v31 + 6, &v105);
        if (v32 != -1)
        {
          if (v29)
          {
            uint64_t v33 = v32;
            uint64_t v34 = v31[7];
            *(void *)(v79 + 56 * v16 + 24) = *(unsigned int *)(v25 + 560 * v7 + 464);
            uint64_t v35 = re::AttributeTable::buffers(v26);
            unint64_t v37 = *v29;
            if (v36 <= v37) {
              goto LABEL_43;
            }
            *(void *)(v79 + 56 * v16 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = v35 + 16 * v37;
            uint64_t v38 = re::AttributeTable::buffers(v26);
            unint64_t v40 = *(unsigned __int8 *)(v34 + 16 * v33 + 8);
            if (v39 <= v40) {
              goto LABEL_44;
            }
            *(void *)(v79 + 56 * v16 + 40) = v38 + 16 * v40;
            LOBYTE(v105) = 1;
            re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v83, 1u);
            unint64_t v7 = v8 + 312 * v19;
            unsigned int v41 = *(_DWORD *)(*(void *)(v7 + 64)
                            + 32
                            * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find((void *)(v7 + 56), (unsigned __int8 *)&v105)+ 20);
            LOBYTE(v105) = 1;
            re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v83, 1u);
            unint64_t v15 = v41
                / *(unsigned __int16 *)(*(void *)(v7 + 128)
                                      + 20
                                      * re::HashBrown<re::VertexBufferID,re::VertexBufferFormat,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find((void *)(v7 + 120), (unsigned __int8 *)&v105)+ 4);
            uint64_t v43 = 12 * v15;
            unsigned int v44 = v73;
            if (v73)
            {
              int v45 = v26;
              if (v73 != 1) {
                goto LABEL_48;
              }
              do
              {
                id v46 = v45;
                int v45 = (re::AttributeTable *)*((void *)v45 + 1);
              }
              while (v45 && !*((void *)v46 + 9));
              *(void *)&long long v105 = 0x30989BAE345;
              uint64_t v47 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v46 + 6, &v105);
              int v72 = v15;
              if (v47 == -1) {
                unint64_t v7 = 0;
              }
              else {
                unint64_t v7 = *((void *)v46 + 7) + 16 * v47 + 8;
              }
              int v48 = *(void **)(v78 + 360);
              uint64_t v49 = v82[2];
              unint64_t v8 = 257;
              __int16 v93 = 257;
              int v92 = 65548;
              char v95 = 30;
              int v94 = 0;
              unsigned int v50 = re::DeformationBufferAllocator::alloc(v48, v49, 2, (uint64_t)&v92, *(unsigned __int8 *)(v21 + 16), v43);
              unint64_t v15 = re::DeformationBufferAllocator::allocationData(*(re::DeformationBufferAllocator **)(v78 + 360), *(unsigned __int8 *)(v21 + 16), v50);
              LOWORD(v98) = 257;
              int v97 = 65548;
              LOBYTE(v99) = 30;
              HIDWORD(v98) = 0;
              id v51 = objc_msgSend(*(id *)(v15 + 24), sel_contents);
              uint64_t v52 = *(void *)(v15 + 24);
              *(void *)&long long v105 = v51;
              *((void *)&v105 + 1) = *(void *)(v15 + 32);
              *(void *)&long long v106 = v52;
              re::DeformationVertexBufferState::setOutputBuffer((uint64_t)v83, 2u, 1, (uint64_t)&v105, (uint64_t)&v97);
              if (v7)
              {
                uint64_t v53 = re::AttributeTable::buffers(v26);
                unint64_t v55 = *(unsigned __int8 *)v7;
                if (v54 <= v55) {
                  goto LABEL_45;
                }
                *(void *)(v79 + 56 * v16 + 48) = v53 + 16 * v55;
                long long v56 = *(void **)(v78 + 360);
                uint64_t v57 = v82[2];
                unint64_t v7 = 257;
                __int16 v89 = 257;
                unint64_t v15 = 65548;
                int v88 = 65548;
                char v91 = 30;
                int v90 = 0;
                unsigned int v58 = re::DeformationBufferAllocator::alloc(v56, v57, 3, (uint64_t)&v88, *(unsigned __int8 *)(v21 + 16), v43);
                long long v59 = *(void **)(v78 + 360);
                uint64_t v60 = v82[2];
                __int16 v85 = 257;
                int v84 = 65548;
                char v87 = 30;
                int v86 = 0;
                unsigned int v61 = re::DeformationBufferAllocator::alloc(v59, v60, 4, (uint64_t)&v84, *(unsigned __int8 *)(v21 + 16), v43);
                uint64_t v62 = re::DeformationBufferAllocator::allocationData(*(re::DeformationBufferAllocator **)(v78 + 360), *(unsigned __int8 *)(v21 + 16), v58);
                uint64_t v63 = re::DeformationBufferAllocator::allocationData(*(re::DeformationBufferAllocator **)(v78 + 360), *(unsigned __int8 *)(v21 + 16), v61);
                LOWORD(v98) = 257;
                int v97 = 65548;
                LOBYTE(v99) = 30;
                HIDWORD(v98) = 0;
                id v64 = objc_msgSend(*(id *)(v62 + 24), sel_contents);
                uint64_t v65 = *(void *)(v62 + 24);
                *(void *)&long long v105 = v64;
                *((void *)&v105 + 1) = *(void *)(v62 + 32);
                *(void *)&long long v106 = v65;
                re::DeformationVertexBufferState::setOutputBuffer((uint64_t)v83, 3u, 1, (uint64_t)&v105, (uint64_t)&v97);
                LOWORD(v98) = 257;
                int v97 = 65548;
                LOBYTE(v99) = 30;
                HIDWORD(v98) = 0;
                id v66 = objc_msgSend(*(id *)(v63 + 24), sel_contents);
                uint64_t v67 = *(void *)(v63 + 24);
                *(void *)&long long v105 = v66;
                *((void *)&v105 + 1) = *(void *)(v63 + 32);
                *(void *)&long long v106 = v67;
                re::DeformationVertexBufferState::setOutputBuffer((uint64_t)v83, 4u, 1, (uint64_t)&v105, (uint64_t)&v97);
              }
              re::FrameContext::perFrameAlloc(v74, 4uLL, 4uLL, (uint64_t)&v105);
              uint64_t v68 = v105;
              uint64_t v69 = v106;
              uint64_t v70 = *((void *)&v105 + 1);
              *(_DWORD *)(v105 + DWORD2(v105)) = v72;
              *unsigned int v76 = v68;
              v76[1] = v70;
              v76[2] = v69;
            }
            else
            {
              re::FrameContext::perFrameAlloc(v74, 12 * v15, 0x10uLL, (uint64_t)&v105);
              LOWORD(v98) = 257;
              int v97 = 65548;
              LOBYTE(v99) = 30;
              HIDWORD(v98) = 0;
              re::DeformationVertexBufferState::setOutputBuffer((uint64_t)v83, 2u, 0, (uint64_t)&v105, (uint64_t)&v97);
            }
          }
        }
      }
      ++v16;
      unint64_t v8 = v80;
      uint64_t v4 = v82;
      if (v16 == v80) {
        return v77;
      }
    }
    re::internal::assertLog((re::internal *)6, v18, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, *(void *)(v17 + 8), v20);
    _os_crash();
    __break(1u);
LABEL_41:
    uint64_t v96 = 0;
    long long v108 = 0u;
    long long v109 = 0u;
    long long v107 = 0u;
    long long v105 = 0u;
    long long v106 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v97 = 136315906;
    id v98 = "operator[]";
    __int16 v99 = 1024;
    int v100 = 476;
    __int16 v101 = 2048;
    unint64_t v102 = v7;
    __int16 v103 = 2048;
    unint64_t v104 = v15;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_42:
    uint64_t v96 = 0;
    long long v108 = 0u;
    long long v109 = 0u;
    long long v107 = 0u;
    long long v105 = 0u;
    long long v106 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v97 = 136315906;
    id v98 = "operator[]";
    __int16 v99 = 1024;
    int v100 = 468;
    __int16 v101 = 2048;
    unint64_t v102 = v16;
    __int16 v103 = 2048;
    unint64_t v104 = v15;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_43:
    re::internal::assertLog((re::internal *)6, v36, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v37, v36);
    _os_crash();
    __break(1u);
LABEL_44:
    re::internal::assertLog((re::internal *)6, v39, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v40, v39);
    _os_crash();
    __break(1u);
LABEL_45:
    re::internal::assertLog((re::internal *)6, v54, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v55, v54);
    _os_crash();
    __break(1u);
    goto LABEL_46;
  }
  return v77;
}

uint64_t re::RenormalizationDeformer::deformGPU(uint64_t a1, uint64_t a2, void **this, void *a4)
{
  unint64_t v5 = a4;
  uint64_t v57 = *MEMORY[0x263EF8340];
  uint64_t v7 = *a4;
  re::mtl::ComputeCommandEncoder::pushDebugGroup(this, (re::ns *)"Perform Renormalization");
  uint64_t v8 = *(void *)(v7 + 48);
  if (v8)
  {
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    uint64_t v11 = v7 + 8;
    uint64_t v43 = a2;
    unsigned int v44 = v5;
    uint64_t v41 = v7 + 8;
    uint64_t v42 = *(void *)(v7 + 48);
    do
    {
      uint64_t v12 = re::BucketArray<re::DeformationInstanceIndex,64ul>::operator[](v11, v10);
      unint64_t v14 = *(void *)(a2 + 8);
      if (v14 <= v10)
      {
        memset(v56, 0, sizeof(v56));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)uint64_t v53 = 136315906;
        *(void *)&void v53[4] = "operator[]";
        *(_WORD *)&v53[12] = 1024;
        *(_DWORD *)&v53[14] = 468;
        *(_WORD *)&v53[18] = 2048;
        *(void *)&v53[20] = v10;
        __int16 v54 = 2048;
        unint64_t v55 = v14;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_20:
        re::internal::assertLog((re::internal *)6, v13, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 666, v4, v16);
        _os_crash();
        __break(1u);
      }
      uint64_t v15 = *(void *)(a2 + 16);
      if (*(void *)(v15 + v9 + 32) && *(void *)(v15 + v9 + 40))
      {
        unint64_t v4 = *(void *)(v12 + 8);
        unint64_t v16 = v5[6];
        if (v16 <= v4) {
          goto LABEL_20;
        }
        uint64_t v52 = v15 + v9;
        uint64_t v48 = v5[5];
        uint64_t v17 = (void *)(v48 + 312 * v4);
        LOBYTE(v56[0]) = 1;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v17, 1u);
        unsigned int v50 = v17 + 7;
        uint64_t v49 = v17 + 8;
        unsigned int v18 = *(_DWORD *)(v17[8]
                        + 32
                        * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v17 + 7, (unsigned __int8 *)v56)+ 20);
        LOBYTE(v56[0]) = 1;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v17, 1u);
        uint64_t v19 = re::HashBrown<re::VertexBufferID,re::VertexBufferFormat,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v17 + 15, (unsigned __int8 *)v56);
        unint64_t v20 = v17 + 16;
        unint64_t v51 = v15 + v9;
        uint64_t v21 = *(void *)(v15 + v9 + 48);
        unsigned int v22 = v18 / *(unsigned __int16 *)(v17[16] + 20 * v19 + 4) - 1;
        if (v21)
        {
          LOBYTE(v56[0]) = 0;
          re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v17, 0);
          if (*(unsigned char *)(*v20
                        + 20
                        * re::HashBrown<re::VertexBufferID,re::VertexBufferFormat,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v17 + 15, (unsigned __int8 *)v56)+ 16) == 36)uint64_t v23 = 144;
          else {
            uint64_t v23 = 80;
          }
          unsigned int v24 = objc_msgSend(*(id *)(a1 + v23), sel_maxTotalThreadsPerThreadgroup);
          [*this setComputePipelineState:*(void *)(a1 + v23)];
          LOBYTE(v56[0]) = 2;
          re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v17, 2u);
          uint64_t v25 = v48 + 312 * v4;
          uint64_t v26 = *(void *)(*(void *)(v25 + 192)
                          + 32
                          * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v17 + 23, (unsigned __int8 *)v56)+ 24);
          LOBYTE(v56[0]) = 2;
          re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v17, 2u);
          objc_msgSend(*this, "setBuffer:offset:atIndex:", v26, *(unsigned int *)(*(void *)(v25 + 192)+ 32* re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v17 + 23, (unsigned __int8 *)v56)+ 16), 0);
          LOBYTE(v56[0]) = 3;
          re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v17, 3u);
          uint64_t v27 = *(void *)(*(void *)(v25 + 192)
                          + 32
                          * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v17 + 23, (unsigned __int8 *)v56)+ 24);
          LOBYTE(v56[0]) = 3;
          re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v17, 3u);
          objc_msgSend(*this, "setBuffer:offset:atIndex:", v27, *(unsigned int *)(*(void *)(v25 + 192)+ 32* re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v17 + 23, (unsigned __int8 *)v56)+ 16), 1);
          LOBYTE(v56[0]) = 4;
          re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v17, 4u);
          uint64_t v28 = *(void *)(*(void *)(v25 + 192)
                          + 32
                          * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v17 + 23, (unsigned __int8 *)v56)+ 24);
          LOBYTE(v56[0]) = 4;
          re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v17, 4u);
          objc_msgSend(*this, "setBuffer:offset:atIndex:", v28, *(unsigned int *)(*(void *)(v25 + 192)+ 32* re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v17 + 23, (unsigned __int8 *)v56)+ 16), 2);
          LOBYTE(v56[0]) = 0;
          re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v17, 0);
          uint64_t v29 = *(void *)(*v49
                          + 32
                          * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v50, (unsigned __int8 *)v56)+ 24);
          LOBYTE(v56[0]) = 0;
          re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v17, 0);
          objc_msgSend(*this, "setBuffer:offset:atIndex:", v29, *(unsigned int *)(*v49+ 32* re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v50, (unsigned __int8 *)v56)+ 16), 3);
          LOBYTE(v56[0]) = 1;
          re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v17, 1u);
          uint64_t v30 = *(void *)(*v49
                          + 32
                          * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v50, (unsigned __int8 *)v56)+ 24);
          LOBYTE(v56[0]) = 1;
          re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v17, 1u);
          objc_msgSend(*this, "setBuffer:offset:atIndex:", v30, *(unsigned int *)(*v49+ 32* re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v50, (unsigned __int8 *)v56)+ 16), 4);
          unint64_t v4 = v51;
          [*this setBuffer:**(void **)(v51 + 48) offset:*(unsigned int *)(*(void *)(v51 + 48) + 8) atIndex:5];
          [*this setBuffer:**(void **)(v52 + 32) offset:*(unsigned int *)(*(void *)(v52 + 32) + 8) atIndex:6];
          [*this setBuffer:**(void **)(v52 + 40) offset:*(unsigned int *)(*(void *)(v52 + 40) + 8) atIndex:7];
          [*this setBuffer:*(void *)(v4 + 16) offset:*(unsigned int *)(v4 + 8) atIndex:8];
          uint64_t v31 = v24;
          uint64_t v32 = *this;
          *(void *)&v56[0] = (v22 + v24) / v24;
          int64x2_t v33 = vdupq_n_s64(1uLL);
        }
        else
        {
          LOBYTE(v56[0]) = 0;
          re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v17, 0);
          if (*(unsigned char *)(*v20
                        + 20
                        * re::HashBrown<re::VertexBufferID,re::VertexBufferFormat,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v17 + 15, (unsigned __int8 *)v56)+ 16) == 36)uint64_t v34 = 96;
          else {
            uint64_t v34 = 32;
          }
          unsigned int v35 = objc_msgSend(*(id *)(a1 + v34), sel_maxTotalThreadsPerThreadgroup);
          uint64_t v46 = (v22 + v35) / v35;
          unsigned int v36 = v35;
          [*this setComputePipelineState:*(void *)(a1 + v34)];
          LOBYTE(v56[0]) = 2;
          re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v17, 2u);
          uint64_t v37 = v48 + 312 * v4;
          uint64_t v38 = *(void *)(*(void *)(v37 + 192)
                          + 32
                          * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v17 + 23, (unsigned __int8 *)v56)+ 24);
          LOBYTE(v56[0]) = 2;
          re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v17, 2u);
          objc_msgSend(*this, "setBuffer:offset:atIndex:", v38, *(unsigned int *)(*(void *)(v37 + 192)+ 32* re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v17 + 23, (unsigned __int8 *)v56)+ 16), 0);
          LOBYTE(v56[0]) = 0;
          re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v17, 0);
          uint64_t v39 = *(void *)(*v49
                          + 32
                          * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v50, (unsigned __int8 *)v56)+ 24);
          LOBYTE(v56[0]) = 0;
          re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v17, 0);
          objc_msgSend(*this, "setBuffer:offset:atIndex:", v39, *(unsigned int *)(*v49+ 32* re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v50, (unsigned __int8 *)v56)+ 16), 3);
          LOBYTE(v56[0]) = 1;
          re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v17, 1u);
          unint64_t v4 = *(void *)(*v49
                         + 32
                         * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v50, (unsigned __int8 *)v56)+ 24);
          LOBYTE(v56[0]) = 1;
          re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v17, 1u);
          objc_msgSend(*this, "setBuffer:offset:atIndex:", v4, *(unsigned int *)(*v49+ 32* re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v50, (unsigned __int8 *)v56)+ 16), 4);
          [*this setBuffer:**(void **)(v52 + 32) offset:*(unsigned int *)(*(void *)(v52 + 32) + 8) atIndex:6];
          [*this setBuffer:**(void **)(v52 + 40) offset:*(unsigned int *)(*(void *)(v52 + 40) + 8) atIndex:7];
          [*this setBuffer:*(void *)(v51 + 16) offset:*(unsigned int *)(v51 + 8) atIndex:8];
          uint64_t v31 = v36;
          uint64_t v32 = *this;
          *(void *)&v56[0] = v46;
          int64x2_t v33 = vdupq_n_s64(1uLL);
        }
        *(int64x2_t *)((char *)v56 + 8) = v33;
        *(void *)uint64_t v53 = v31;
        *(int64x2_t *)&v53[8] = v33;
        [v32 dispatchThreadgroups:v56 threadsPerThreadgroup:v53];
        a2 = v43;
        unint64_t v5 = v44;
        uint64_t v11 = v41;
        uint64_t v8 = v42;
      }
      ++v10;
      v9 += 56;
    }
    while (v8 != v10);
  }
  return [*this popDebugGroup];
}

void re::RenormalizationDeformer::deformCPU(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v134 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a3;
  uint64_t v119 = 0;
  unint64_t v116 = 0;
  unint64_t v117 = 0;
  uint64_t v115 = 0;
  int v118 = 0;
  uint64_t v4 = *(void *)(v3 + 48);
  if (!v4) {
    return;
  }
  unint64_t v5 = a3;
  uint64_t v6 = a2;
  unint64_t v7 = 0;
  uint64_t v109 = v3 + 8;
  uint64_t v100 = *(void *)(v3 + 48);
  do
  {
    uint64_t v8 = re::BucketArray<re::DeformationInstanceIndex,64ul>::operator[](v109, v7);
    unint64_t v10 = *(void *)(v6 + 8);
    if (v10 <= v7) {
      goto LABEL_59;
    }
    uint64_t v11 = *(void *)(v6 + 16);
    uint64_t v12 = v11 + 56 * v7;
    uint64_t v14 = *(void *)(v12 + 32);
    uint64_t v13 = (id **)(v12 + 32);
    if (!v14) {
      goto LABEL_46;
    }
    uint64_t v15 = v11 + 56 * v7;
    uint64_t v17 = *(void *)(v15 + 40);
    unint64_t v16 = (id **)(v15 + 40);
    if (!v17) {
      goto LABEL_46;
    }
    unint64_t v18 = *(void *)(v8 + 8);
    unint64_t v19 = v5[6];
    if (v19 <= v18) {
      goto LABEL_60;
    }
    long long v105 = v13;
    long long v106 = v16;
    uint64_t v107 = v5[5];
    uint64_t v108 = *(void *)(v8 + 8);
    unint64_t v20 = (void *)(v107 + 312 * v18);
    unint64_t v21 = *(void *)(v11 + 56 * v7 + 24);
    LOBYTE(v129) = 1;
    re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v20, 1u);
    unsigned int v22 = v20 + 8;
    unsigned int v104 = *(_DWORD *)(v20[8]
                     + 32
                     * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v20 + 7, (unsigned __int8 *)&v129)+ 20);
    LOBYTE(v129) = 1;
    re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v20, 1u);
    uint64_t v23 = v20 + 15;
    unsigned int v24 = v20 + 16;
    unsigned int v103 = *(unsigned __int16 *)(v20[16]
                               + 20
                               * re::HashBrown<re::VertexBufferID,re::VertexBufferFormat,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v20 + 15, (unsigned __int8 *)&v129)+ 4);
    LOBYTE(v129) = 1;
    uint64_t v110 = (uint64_t)v20;
    re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v20, 1u);
    uint64_t v26 = *(unsigned __int8 *)(v20[16]
                             + 20
                             * re::HashBrown<re::VertexBufferID,re::VertexBufferFormat,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v20 + 15, (unsigned __int8 *)&v129)+ 16);
    if (v26 <= 0x19)
    {
      if (v26 == 8)
      {
        uint64_t v29 = (uint64_t (*)(uint64_t, void))re::unpackUChar3NormalizedData;
        uint64_t v27 = v20 + 7;
        goto LABEL_16;
      }
      if (v26 != 11) {
        goto LABEL_61;
      }
      uint64_t v27 = v20 + 7;
      uint64_t v28 = (uint64_t (*)(uint64_t, void))re::unpackChar3NormalizedData;
      goto LABEL_14;
    }
    uint64_t v29 = (uint64_t (*)(uint64_t, void))re::unpackHalf3Data;
    uint64_t v27 = v20 + 7;
    if (v26 != 26)
    {
      if (v26 != 30) {
        goto LABEL_61;
      }
      uint64_t v28 = (uint64_t (*)(uint64_t, void))re::unpackFloat3Data;
LABEL_14:
      uint64_t v29 = v28;
    }
LABEL_16:
    unint64_t v117 = 0;
    ++v118;
    if (v116 < v21 / 3) {
      re::DynamicArray<re::MeshLodLevelInfo>::setCapacity(&v115, v21 / 3);
    }
    LOBYTE(v129) = 1;
    re::DeformationVertexBufferState::ensureVertexBufferInitialized(v110, 1u);
    uint64_t v30 = re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v27, (unsigned __int8 *)&v129);
    uint64_t v31 = *(void *)(*v22 + 32 * v30 + 8) + *(unsigned int *)(*v22 + 32 * v30 + 16);
    LOBYTE(v129) = 0;
    re::DeformationVertexBufferState::ensureVertexBufferInitialized(v110, 0);
    if (*(unsigned char *)(*v24
                  + 20
                  * re::HashBrown<re::VertexBufferID,re::VertexBufferFormat,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v23, (unsigned __int8 *)&v129)+ 16) == 36)
    {
      LOBYTE(v129) = 0;
      re::DeformationVertexBufferState::ensureVertexBufferInitialized(v110, 0);
      uint64_t v32 = re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v27, (unsigned __int8 *)&v129);
      if (v21)
      {
        unint64_t v5 = 0;
        uint64_t v34 = *v22 + 32 * v32;
        unint64_t v10 = (unint64_t)*(unsigned int *)(v34 + 20) >> 2;
        unsigned int v35 = (unsigned int *)(*(void *)(v34 + 8) + *(unsigned int *)(v34 + 16) + 4);
        while ((unint64_t)v5 < v10)
        {
          uint64_t v36 = v29(v31, *(v35 - 1));
          uint64_t v38 = (char *)v5 + 1;
          if ((unint64_t)v5 + 1 >= v10) {
            goto LABEL_55;
          }
          uint64_t v39 = v36;
          uint64_t v40 = v37;
          uint64_t v41 = v29(v31, *v35);
          uint64_t v43 = (char *)v5 + 2;
          if ((unint64_t)v5 + 2 >= v10) {
            goto LABEL_57;
          }
          v44.i64[0] = v39;
          v44.i64[1] = v40;
          float32x4_t v113 = v44;
          v44.i64[0] = v41;
          v44.i64[1] = v42;
          float32x4_t v111 = v44;
          v45.i64[0] = v29(v31, v35[1]);
          v45.i64[1] = v46;
          float32x4_t v47 = vsubq_f32(v111, v113);
          float32x4_t v48 = vsubq_f32(v45, v113);
          int8x16_t v49 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v48, (int32x4_t)v48), (int8x16_t)v48, 0xCuLL), vnegq_f32(v47)), v48, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v47, (int32x4_t)v47), (int8x16_t)v47, 0xCuLL));
          int8x16_t v50 = vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v49, (int32x4_t)v49), v49, 0xCuLL);
          *(void *)&long long v129 = v50.i64[0];
          DWORD2(v129) = v50.i32[2];
          re::DynamicArray<re::RenderGraphResourceAllocationManager::FenceIndex>::add((_anonymous_namespace_ *)&v115, (uint64_t *)&v129);
          unint64_t v5 = (void *)((char *)v5 + 3);
          v35 += 3;
          if ((unint64_t)v5 >= v21) {
            goto LABEL_32;
          }
        }
        goto LABEL_53;
      }
    }
    else
    {
      LOBYTE(v129) = 0;
      re::DeformationVertexBufferState::ensureVertexBufferInitialized(v110, 0);
      uint64_t v51 = re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v27, (unsigned __int8 *)&v129);
      if (v21)
      {
        unint64_t v5 = 0;
        uint64_t v53 = *v22 + 32 * v51;
        unint64_t v10 = (unint64_t)*(unsigned int *)(v53 + 20) >> 1;
        __int16 v54 = (unsigned __int16 *)(*(void *)(v53 + 8) + *(unsigned int *)(v53 + 16) + 4);
        while ((unint64_t)v5 < v10)
        {
          uint64_t v55 = v29(v31, *(v54 - 2));
          uint64_t v57 = (char *)v5 + 1;
          if ((unint64_t)v5 + 1 >= v10) {
            goto LABEL_56;
          }
          uint64_t v58 = v55;
          uint64_t v59 = v56;
          uint64_t v60 = v29(v31, *(v54 - 1));
          uint64_t v62 = (char *)v5 + 2;
          if ((unint64_t)v5 + 2 >= v10) {
            goto LABEL_58;
          }
          v63.i64[0] = v58;
          v63.i64[1] = v59;
          float32x4_t v114 = v63;
          v63.i64[0] = v60;
          v63.i64[1] = v61;
          float32x4_t v112 = v63;
          unsigned int v64 = *v54;
          v54 += 3;
          v65.i64[0] = v29(v31, v64);
          v65.i64[1] = v66;
          float32x4_t v67 = vsubq_f32(v112, v114);
          float32x4_t v68 = vsubq_f32(v65, v114);
          int8x16_t v69 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v68, (int32x4_t)v68), (int8x16_t)v68, 0xCuLL), vnegq_f32(v67)), v68, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v67, (int32x4_t)v67), (int8x16_t)v67, 0xCuLL));
          int8x16_t v70 = vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v69, (int32x4_t)v69), v69, 0xCuLL);
          *(void *)&long long v129 = v70.i64[0];
          DWORD2(v129) = v70.i32[2];
          re::DynamicArray<re::RenderGraphResourceAllocationManager::FenceIndex>::add((_anonymous_namespace_ *)&v115, (uint64_t *)&v129);
          unint64_t v5 = (void *)((char *)v5 + 3);
          if ((unint64_t)v5 >= v21) {
            goto LABEL_32;
          }
        }
        goto LABEL_54;
      }
    }
LABEL_32:
    uint64_t v71 = *v105;
    int v72 = (char *)objc_msgSend(**v105, sel_contents);
    uint64_t v73 = *((unsigned int *)v71 + 2);
    uint64_t v74 = *v106;
    uint64_t v75 = (char *)objc_msgSend(**v106, sel_contents);
    unint64_t v10 = *((unsigned int *)v74 + 2);
    LOBYTE(v129) = 2;
    re::DeformationVertexBufferState::ensureVertexBufferInitialized(v110, 2u);
    uint64_t v76 = v107 + 312 * v108;
    uint64_t v77 = re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find((void *)(v76 + 184), (unsigned __int8 *)&v129);
    uint64_t v6 = a2;
    unint64_t v5 = a3;
    uint64_t v4 = v100;
    if (v104 >= v103)
    {
      uint64_t v80 = 0;
      LODWORD(v81) = v104 / v103;
      unint64_t v82 = &v72[v73];
      uint64_t v83 = &v75[v10];
      uint64_t v84 = *(void *)(v76 + 192) + 32 * v77;
      uint64_t v85 = *(void *)(v84 + 8) + *(unsigned int *)(v84 + 16);
      unint64_t v86 = *(unsigned int *)(v84 + 20) / 0xCuLL;
      if (v104 / v103 <= 1) {
        uint64_t v81 = 1;
      }
      else {
        uint64_t v81 = v81;
      }
      unint64_t v87 = v117;
      uint64_t v88 = v119;
      while (1)
      {
        int v89 = v80 ? *(_DWORD *)&v83[4 * v80 - 4] : 0;
        uint64_t v90 = *(int *)&v83[4 * v80];
        float32x4_t v91 = 0uLL;
        if (v89 < (int)v90) {
          break;
        }
LABEL_44:
        if (v80 == v86) {
          goto LABEL_52;
        }
        float32x4_t v79 = vmulq_f32(v91, v91);
        v79.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32((int32x4_t)v79, 2), vadd_f32(*(float32x2_t *)v79.f32, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v79.f32, 1))).u32[0];
        float32x2_t v96 = vrsqrte_f32((float32x2_t)v79.u32[0]);
        float32x2_t v97 = vmul_f32(v96, vrsqrts_f32((float32x2_t)v79.u32[0], vmul_f32(v96, v96)));
        float32x4_t v98 = vmulq_n_f32(v91, vmul_f32(v97, vrsqrts_f32((float32x2_t)v79.u32[0], vmul_f32(v97, v97))).f32[0]);
        uint64_t v99 = v85 + 12 * v80;
        *(void *)uint64_t v99 = v98.i64[0];
        *(_DWORD *)(v99 + 8) = v98.i32[2];
        if (++v80 == v81) {
          goto LABEL_46;
        }
      }
      uint64_t v92 = v90 - v89;
      __int16 v93 = &v82[4 * v89];
      while (1)
      {
        unint64_t v94 = *(int *)v93;
        v93 += 4;
        unint64_t v10 = v94;
        if (v87 <= v94) {
          break;
        }
        uint64_t v95 = v88 + 12 * (int)v10;
        v79.i64[0] = *(void *)v95;
        v79.i32[2] = *(_DWORD *)(v95 + 8);
        float32x4_t v91 = vaddq_f32(v91, v79);
        if (!--v92) {
          goto LABEL_44;
        }
      }
      uint64_t v120 = 0;
      long long v132 = 0u;
      long long v133 = 0u;
      long long v130 = 0u;
      long long v131 = 0u;
      long long v129 = 0u;
      unint64_t v7 = &_os_log_internal;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v121 = 136315906;
      unint64_t v122 = "operator[]";
      __int16 v123 = 1024;
      int v124 = 789;
      __int16 v125 = 2048;
      unint64_t v126 = v10;
      __int16 v127 = 2048;
      unint64_t v128 = v87;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_52:
      re::internal::assertLog((re::internal *)6, v78, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v86, v86);
      _os_crash();
      __break(1u);
LABEL_53:
      re::internal::assertLog((re::internal *)6, v33, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v5, v10);
      _os_crash();
      __break(1u);
LABEL_54:
      re::internal::assertLog((re::internal *)6, v52, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v5, v10);
      _os_crash();
      __break(1u);
LABEL_55:
      re::internal::assertLog((re::internal *)6, v37, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v38, v10);
      _os_crash();
      __break(1u);
LABEL_56:
      re::internal::assertLog((re::internal *)6, v56, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v57, v10);
      _os_crash();
      __break(1u);
LABEL_57:
      re::internal::assertLog((re::internal *)6, v42, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v43, v10);
      _os_crash();
      __break(1u);
LABEL_58:
      re::internal::assertLog((re::internal *)6, v61, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v62, v10);
      _os_crash();
      __break(1u);
LABEL_59:
      uint64_t v120 = 0;
      long long v132 = 0u;
      long long v133 = 0u;
      long long v130 = 0u;
      long long v131 = 0u;
      long long v129 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v121 = 136315906;
      unint64_t v122 = "operator[]";
      __int16 v123 = 1024;
      int v124 = 468;
      __int16 v125 = 2048;
      unint64_t v126 = v7;
      __int16 v127 = 2048;
      unint64_t v128 = v10;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_60:
      re::internal::assertLog((re::internal *)6, v9, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 666, v18, v19);
      _os_crash();
      __break(1u);
LABEL_61:
      re::internal::assertLog((re::internal *)5, v25, "assertion failure: '%s' (%s:line %i) Unsupported packed vertex format: %u.", "!\"Unreachable code\"", "vertexUnpackFunctionForFormat", 45, v26);
      _os_crash();
      __break(1u);
    }
LABEL_46:
    ++v7;
  }
  while (v7 != v4);
  if (v115)
  {
    if (v119) {
      (*(void (**)(void))(*(void *)v115 + 40))();
    }
  }
}

void re::RenormalizationDeformer::~RenormalizationDeformer(re::RenormalizationDeformer *this)
{
  for (uint64_t i = 144; i != 16; i -= 8)
  {
    uint64_t v3 = *(void **)((char *)this + i);
    if (v3)
    {

      *(void *)((char *)this + i) = 0;
    }
  }
}

{
  uint64_t v2;
  void *v3;
  uint64_t vars8;

  uint64_t v2 = 144;
  while (1)
  {
    uint64_t v3 = *(void **)((char *)this + v2);
    if (v3)
    {

      *(void *)((char *)this + v2) = 0;
    }
    v2 -= 8;
    if (v2 == 16)
    {
      JUMPOUT(0x237DBCBD0);
    }
  }
}

void re::internal::Callable<re::RenormalizationDeformer::allocateBuffers(re::FrameContext &,re::DeformationExecutionMode,re::DeformationParameters &,re::BufferInitializationOptions &,re::DynamicArray<re::PostDeformationBlit> &,re::DynamicArray<re::EventWait> &)::$_0,void ()(void *)>::~Callable()
{
}

uint64_t re::internal::Callable<re::RenormalizationDeformer::allocateBuffers(re::FrameContext &,re::DeformationExecutionMode,re::DeformationParameters &,re::BufferInitializationOptions &,re::DynamicArray<re::PostDeformationBlit> &,re::DynamicArray<re::EventWait> &)::$_0,void ()(void *)>::operator()(uint64_t a1, uint64_t **a2)
{
  uint64_t v2 = *a2;
  uint64_t result = **a2;
  if (result)
  {
    if (v2[1])
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 40))(result, v2[2]);
      v2[1] = 0;
      void v2[2] = 0;
    }
    *uint64_t v2 = 0;
  }
  return result;
}

void *re::internal::Callable<re::RenormalizationDeformer::allocateBuffers(re::FrameContext &,re::DeformationExecutionMode,re::DeformationParameters &,re::BufferInitializationOptions &,re::DynamicArray<re::PostDeformationBlit> &,re::DynamicArray<re::EventWait> &)::$_0,void ()(void *)>::cloneInto(uint64_t a1, void *a2)
{
  uint64_t result = a2;
  *a2 = &unk_26E710A98;
  return result;
}

void *re::internal::Callable<re::RenormalizationDeformer::allocateBuffers(re::FrameContext &,re::DeformationExecutionMode,re::DeformationParameters &,re::BufferInitializationOptions &,re::DynamicArray<re::PostDeformationBlit> &,re::DynamicArray<re::EventWait> &)::$_0,void ()(void *)>::moveInto(uint64_t a1, void *a2)
{
  uint64_t result = a2;
  *a2 = &unk_26E710A98;
  return result;
}

uint64_t re::internal::Callable<re::RenormalizationDeformer::allocateBuffers(re::FrameContext &,re::DeformationExecutionMode,re::DeformationParameters &,re::BufferInitializationOptions &,re::DynamicArray<re::PostDeformationBlit> &,re::DynamicArray<re::EventWait> &)::$_0,void ()(void *)>::size()
{
  return 16;
}

void re::TextManager::~TextManager(re::TextManager *this)
{
  uint64_t v2 = (re::TextManager *)((char *)this + 120);
  re::GrowableLinearAllocator::deinit((re::TextManager *)((char *)this + 120));
  re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit((uint64_t *)this + 26);
  re::Allocator::~Allocator(v2);
  re::HashTable<re::FontID,re::FontAssetInternal *,re::Hash<re::FontID>,re::EqualTo<re::FontID>,true,false>::deinit((uint64_t *)this + 7);
  re::HashTable<unsigned int,re::StringID,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)this + 1);
}

double re::TextManager::deinit(re::TextManager *this)
{
  *((unsigned char *)this + 112) = 0;
  uint64_t v2 = *((void *)this + 13);
  if (v2)
  {
    re::internal::destroyPersistent<re::TextRenderData>((re *)"deinit", 165, v2);
    *((void *)this + 13) = 0;
  }
  uint64_t v3 = *((unsigned int *)this + 22);
  if (v3)
  {
    uint64_t v4 = 0;
    unint64_t v5 = (int *)(*((void *)this + 9) + 8);
    while (1)
    {
      int v6 = *v5;
      v5 += 10;
      if (v6 < 0) {
        break;
      }
      if (v3 == ++v4)
      {
        LODWORD(v4) = *((_DWORD *)this + 22);
        break;
      }
    }
  }
  else
  {
    LODWORD(v4) = 0;
  }
  if (v3 != v4)
  {
    uint64_t v7 = v4;
    do
    {
      re::internal::destroyPersistent<re::FontAssetInternal>((re *)"deinit", 170, *(id **)(*((void *)this + 9) + 40 * v7 + 32));
      unsigned int v8 = *((_DWORD *)this + 22);
      if (v8 <= (int)v4 + 1) {
        int v9 = v4 + 1;
      }
      else {
        int v9 = *((_DWORD *)this + 22);
      }
      int v10 = v4;
      while (1)
      {
        uint64_t v7 = (v10 + 1);
        if (v9 - 1 == v10) {
          break;
        }
        ++v10;
        LODWORD(v4) = v7;
        if ((*(_DWORD *)(*((void *)this + 9) + 40 * v7 + 8) & 0x80000000) != 0) {
          goto LABEL_19;
        }
      }
      LODWORD(v4) = v9;
LABEL_19:
      ;
    }
    while (v8 != v4);
  }
  re::HashTable<re::FontID,re::FontAssetInternal *,re::Hash<re::FontID>,re::EqualTo<re::FontID>,true,false>::deinit((uint64_t *)this + 7);
  re::HashTable<unsigned int,re::StringID,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)this + 1);
  *(void *)this = 0;
  return re::GrowableLinearAllocator::deinit((re::TextManager *)((char *)this + 120));
}

re *re::internal::destroyPersistent<re::TextRenderData>(re *result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v4 = re::globalAllocators(result)[2];
    re::HashTable<re::RenderTargetInfo,NS::SharedPtr<MTL::RenderPipelineState>,re::Hash<re::RenderTargetInfo>,re::EqualTo<re::RenderTargetInfo>,true,false>::deinit((uint64_t *)(a3 + 320));
    unint64_t v5 = *(void **)(a3 + 312);
    if (v5)
    {

      *(void *)(a3 + 312) = 0;
    }
    if (*(unsigned char *)(a3 + 256)) {
      re::DynamicString::deinit((re::DynamicString *)(a3 + 264));
    }
    if (*(unsigned char *)(a3 + 200)) {
      re::DynamicString::deinit((re::DynamicString *)(a3 + 208));
    }
    re::HashTable<unsigned long long,re::TextRenderGroupData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)(a3 + 152));
    re::TextRenderGroupData::~TextRenderGroupData((re::TextRenderGroupData *)(a3 + 8));
    if (*(void *)a3)
    {

      *(void *)a3 = 0;
    }
    int v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 40);
    return (re *)v6(v4, a3);
  }
  return result;
}

re *re::internal::destroyPersistent<re::FontAssetInternal>(re *result, uint64_t a2, id *a3)
{
  if (a3)
  {
    uint64_t v4 = re::globalAllocators(result)[2];
    if (*a3)
    {

      *a3 = 0;
    }
    unint64_t v5 = *(uint64_t (**)(uint64_t, id *))(*(void *)v4 + 40);
    return (re *)v5(v4, a3);
  }
  return result;
}

double re::HashTable<re::FontID,re::FontAssetInternal *,re::Hash<re::FontID>,re::EqualTo<re::FontID>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    unint64_t v3 = *((unsigned int *)a1 + 8);
    if (v3)
    {
      unint64_t v4 = 0;
      uint64_t v5 = 8;
      do
      {
        uint64_t v6 = a1[2];
        int v7 = *(_DWORD *)(v6 + v5);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + v5) = v7 & 0x7FFFFFFF;
          re::StringID::destroyString((re::StringID *)(v6 + v5 + 8));
          unint64_t v3 = *((unsigned int *)a1 + 8);
        }
        ++v4;
        v5 += 40;
      }
      while (v4 < v3);
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

BOOL re::HashSetBase<re::FontID,re::FontID,re::internal::ValueAsKey<re::FontID>,re::Hash<re::FontID>,re::EqualTo<re::FontID>,true,false>::contains(uint64_t a1, void *a2)
{
  unint64_t v2 = *(unsigned int *)(a1 + 24);
  if (!v2) {
    return 0;
  }
  uint64_t v4 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * ((*a2 >> 1) % v2));
  if (v4 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 16);
  do
  {
    uint64_t v7 = v6 + 32 * v4;
    BOOL result = re::StringID::operator==((void *)(v7 + 16), a2);
    if (result) {
      break;
    }
    uint64_t v4 = *(_DWORD *)(v7 + 8) & 0x7FFFFFFF;
  }
  while (v4 != 0x7FFFFFFF);
  return result;
}

BOOL re::HashTable<re::FontID,re::FontAssetInternal *,re::Hash<re::FontID>,re::EqualTo<re::FontID>,true,false>::containsKey(uint64_t a1, void *a2)
{
  uint64_t v2 = 0x7FFFFFFFLL;
  if (*(void *)a1)
  {
    uint64_t v4 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * ((*a2 >> 1) % (unint64_t)*(unsigned int *)(a1 + 24)));
    if (v4 != 0x7FFFFFFF)
    {
      uint64_t v5 = *(void *)(a1 + 16);
      uint64_t v2 = 0x7FFFFFFFLL;
      while (!re::StringID::operator==((void *)(v5 + 40 * v4 + 16), a2))
      {
        uint64_t v4 = *(_DWORD *)(v5 + 40 * v4 + 8) & 0x7FFFFFFF;
        if (v4 == 0x7FFFFFFF) {
          return v2 != 0x7FFFFFFF;
        }
      }
      uint64_t v2 = v4;
    }
  }
  return v2 != 0x7FFFFFFF;
}

void re::TextManager::addFont(uint64_t a1, StringID *a2, void **a3, uint64_t a4)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  unsigned int v8 = re::globalAllocators((re *)a1);
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v8[2] + 32))(v8[2], 16, 8);
  *(void *)uint64_t v9 = 0;
  *(void *)(v9 + 8) = 0;
  NS::SharedPtr<MTL::Texture>::operator=((void **)v9, a3);
  *(void *)(v9 + 8) = a4;
  unint64_t v10 = *(void *)&a2->var0 >> 1;
  unint64_t v11 = *(unsigned int *)(a1 + 32);
  if (!v11)
  {
    LODWORD(v12) = 0;
    goto LABEL_8;
  }
  unint64_t v12 = v10 % v11;
  uint64_t v13 = *(unsigned int *)(*(void *)(a1 + 16) + 4 * (v10 % v11));
  if (v13 == 0x7FFFFFFF)
  {
LABEL_8:
    uint64_t v16 = *(unsigned int *)(a1 + 44);
    if (v16 == 0x7FFFFFFF)
    {
      uint64_t v16 = *(unsigned int *)(a1 + 40);
      int v17 = v16;
      if (v16 == v11)
      {
        re::HashSetBase<re::FontID,re::FontID,re::internal::ValueAsKey<re::FontID>,re::Hash<re::FontID>,re::EqualTo<re::FontID>,true,false>::setCapacity(a1 + 8, 2 * *(_DWORD *)(a1 + 36));
        LODWORD(v12) = v10 % *(unsigned int *)(a1 + 32);
        int v17 = *(_DWORD *)(a1 + 40);
      }
      *(_DWORD *)(a1 + 40) = v17 + 1;
      uint64_t v18 = *(void *)(a1 + 24);
      int v19 = *(_DWORD *)(v18 + 32 * v16 + 8);
    }
    else
    {
      uint64_t v18 = *(void *)(a1 + 24);
      int v19 = *(_DWORD *)(v18 + 32 * v16 + 8);
      *(_DWORD *)(a1 + 44) = v19 & 0x7FFFFFFF;
    }
    *(_DWORD *)(v18 + 32 * v16 + 8) = v19 | 0x80000000;
    *(_DWORD *)(*(void *)(a1 + 24) + 32 * v16 + 8) = *(_DWORD *)(*(void *)(a1 + 24) + 32 * v16 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 16) + 4 * v12);
    *(void *)(*(void *)(a1 + 24) + 32 * v16) = v10;
    re::StringID::StringID((re::StringID *)(*(void *)(a1 + 24) + 32 * v16 + 16), a2);
    *(_DWORD *)(*(void *)(a1 + 16) + 4 * v12) = v16;
    ++*(_DWORD *)(a1 + 36);
    ++*(_DWORD *)(a1 + 48);
    goto LABEL_14;
  }
  uint64_t v14 = *(void *)(a1 + 24);
  while (1)
  {
    uint64_t v15 = v14 + 32 * v13;
    if (re::StringID::operator==((void *)(v15 + 16), a2)) {
      break;
    }
    uint64_t v13 = *(_DWORD *)(v15 + 8) & 0x7FFFFFFF;
    if (v13 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
LABEL_14:
  BOOL v20 = re::HashTable<re::FontID,re::FontAssetInternal *,re::Hash<re::FontID>,re::EqualTo<re::FontID>,true,false>::containsKey(a1 + 56, a2);
  if (v20)
  {
    unint64_t v21 = *re::graphicsLogObjects((re *)v20);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      var1 = a2->var1;
      int v31 = 136315138;
      uint64_t v32 = var1;
      _os_log_error_impl(&dword_233120000, v21, OS_LOG_TYPE_ERROR, "%s font already added to TextManager. Why is this being added again?", (uint8_t *)&v31, 0xCu);
    }
    return;
  }
  unint64_t v23 = *(void *)&a2->var0 >> 1;
  if (!*(void *)(a1 + 56))
  {
    LODWORD(v24) = 0;
    goto LABEL_24;
  }
  unint64_t v24 = v23 % *(unsigned int *)(a1 + 80);
  uint64_t v25 = *(unsigned int *)(*(void *)(a1 + 64) + 4 * v24);
  if (v25 == 0x7FFFFFFF)
  {
LABEL_24:
    uint64_t v27 = *(unsigned int *)(a1 + 92);
    if (v27 == 0x7FFFFFFF)
    {
      uint64_t v27 = *(unsigned int *)(a1 + 88);
      int v28 = v27;
      if (v27 == *(_DWORD *)(a1 + 80))
      {
        re::HashTable<re::FontID,re::FontAssetInternal *,re::Hash<re::FontID>,re::EqualTo<re::FontID>,true,false>::setCapacity(a1 + 56, 2 * *(_DWORD *)(a1 + 84));
        LODWORD(v24) = v23 % *(unsigned int *)(a1 + 80);
        int v28 = *(_DWORD *)(a1 + 88);
      }
      *(_DWORD *)(a1 + 88) = v28 + 1;
      uint64_t v29 = *(void *)(a1 + 72);
      int v30 = *(_DWORD *)(v29 + 40 * v27 + 8);
    }
    else
    {
      uint64_t v29 = *(void *)(a1 + 72);
      int v30 = *(_DWORD *)(v29 + 40 * v27 + 8);
      *(_DWORD *)(a1 + 92) = v30 & 0x7FFFFFFF;
    }
    *(_DWORD *)(v29 + 40 * v27 + 8) = v30 | 0x80000000;
    *(_DWORD *)(*(void *)(a1 + 72) + 40 * v27 + 8) = *(_DWORD *)(*(void *)(a1 + 72) + 40 * v27 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 64) + 4 * v24);
    *(void *)(*(void *)(a1 + 72) + 40 * v27) = v23;
    re::StringID::StringID((re::StringID *)(*(void *)(a1 + 72) + 40 * v27 + 16), a2);
    *(void *)(*(void *)(a1 + 72) + 40 * v27 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = v9;
    *(_DWORD *)(*(void *)(a1 + 64) + 4 * v24) = v27;
    ++*(_DWORD *)(a1 + 84);
    ++*(_DWORD *)(a1 + 96);
    return;
  }
  uint64_t v26 = *(void *)(a1 + 72);
  while (!re::StringID::operator==((void *)(v26 + 40 * v25 + 16), a2))
  {
    uint64_t v25 = *(_DWORD *)(v26 + 40 * v25 + 8) & 0x7FFFFFFF;
    if (v25 == 0x7FFFFFFF) {
      goto LABEL_24;
    }
  }
}

uint64_t re::TextManager::removeFont(re::TextManager *this, const re::FontID *a2)
{
  uint64_t result = re::HashSetBase<re::FontID,re::FontID,re::internal::ValueAsKey<re::FontID>,re::Hash<re::FontID>,re::EqualTo<re::FontID>,true,false>::contains((uint64_t)this + 8, a2);
  if (result)
  {
    uint64_t result = re::HashTable<re::FontID,re::FontAssetInternal *,re::Hash<re::FontID>,re::EqualTo<re::FontID>,true,false>::containsKey((uint64_t)this + 56, a2);
    if (result)
    {
      uint64_t v5 = 0x7FFFFFFFLL;
      if (*((void *)this + 7))
      {
        uint64_t v6 = *(unsigned int *)(*((void *)this + 8)
                             + 4 * ((*(void *)a2 >> 1) % (unint64_t)*((unsigned int *)this + 20)));
        if (v6 != 0x7FFFFFFF)
        {
          uint64_t v7 = *((void *)this + 9);
          uint64_t v5 = 0x7FFFFFFFLL;
          while (!re::StringID::operator==((void *)(v7 + 40 * v6 + 16), a2))
          {
            uint64_t v6 = *(_DWORD *)(v7 + 40 * v6 + 8) & 0x7FFFFFFF;
            if (v6 == 0x7FFFFFFF) {
              goto LABEL_11;
            }
          }
          uint64_t v5 = v6;
        }
      }
LABEL_11:
      re::internal::destroyPersistent<re::FontAssetInternal>((re *)"removeFont", 210, *(id **)(*((void *)this + 9) + 40 * v5 + 32));
      return re::HashTable<re::FontID,re::FontAssetInternal *,re::Hash<re::FontID>,re::EqualTo<re::FontID>,true,false>::remove((uint64_t)this + 56, a2);
    }
  }
  return result;
}

uint64_t re::HashTable<re::FontID,re::FontAssetInternal *,re::Hash<re::FontID>,re::EqualTo<re::FontID>,true,false>::remove(uint64_t a1, void *a2)
{
  if (!*(void *)a1) {
    return 0;
  }
  unint64_t v4 = (*a2 >> 1) % (unint64_t)*(unsigned int *)(a1 + 24);
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = *(unsigned int *)(v5 + 4 * v4);
  if (v6 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v8 = *(void *)(a1 + 16);
  if (!re::StringID::operator==((void *)(v8 + 40 * v6 + 16), a2))
  {
    while (1)
    {
      unsigned int v9 = v6;
      int v10 = *(_DWORD *)(v8 + 40 * v6 + 8);
      uint64_t v6 = v10 & 0x7FFFFFFF;
      if ((v10 & 0x7FFFFFFF) == 0x7FFFFFFF) {
        return 0;
      }
      if (re::StringID::operator==((void *)(v8 + 40 * v6 + 16), a2))
      {
        *(_DWORD *)(v8 + 40 * v9 + 8) = *(_DWORD *)(v8 + 40 * v9 + 8) & 0x80000000 | *(_DWORD *)(v8 + 40 * v6 + 8) & 0x7FFFFFFF;
        goto LABEL_9;
      }
    }
  }
  *(_DWORD *)(v5 + 4 * v4) = *(_DWORD *)(v8 + 40 * v6 + 8) & 0x7FFFFFFF;
LABEL_9:
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v12 = v11 + 40 * v6;
  int v15 = *(_DWORD *)(v12 + 8);
  uint64_t v14 = (int *)(v12 + 8);
  int v13 = v15;
  if (v15 < 0)
  {
    *uint64_t v14 = v13 & 0x7FFFFFFF;
    re::StringID::destroyString((re::StringID *)(v11 + 40 * v6 + 16));
    uint64_t v11 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v11 + 40 * v6 + 8);
  }
  int v16 = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(v11 + 40 * v6 + 8) = *(_DWORD *)(a1 + 36) | v13 & 0x80000000;
  --*(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 36) = v6;
  *(_DWORD *)(a1 + 40) = v16 + 1;
  return 1;
}

uint64_t re::TextManager::addStringToGroup(re *a1, uint64_t a2, char *__src, size_t __len, uint64_t a5)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  if (*(void *)(a2 + 80) >= 0x400uLL)
  {
    uint64_t v6 = *re::graphicsLogObjects(a1);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(a2 + 8);
      *(_DWORD *)buf = 134218240;
      *(void *)&uint8_t buf[4] = a2;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = v7;
      uint64_t v8 = "String count of text group %p exceeds maximum (%lu).";
LABEL_9:
      _os_log_impl(&dword_233120000, v6, OS_LOG_TYPE_DEFAULT, v8, buf, 0x16u);
      return 0;
    }
    return 0;
  }
  if (*(void *)(a2 + 88) >= 0x4000uLL)
  {
    uint64_t v6 = *re::graphicsLogObjects(a1);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = 23;
      if (*(void *)(a2 + 56)) {
        uint64_t v9 = *(void *)(a2 + 72);
      }
      *(_DWORD *)buf = 134218240;
      *(void *)&uint8_t buf[4] = a2;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = v9;
      uint64_t v8 = "Glyph count of text group %p exceeds maximum (%lu).";
      goto LABEL_9;
    }
    return 0;
  }
  re::DynamicString::append((re::DynamicString *)(a2 + 48), __src, __len);
  unint64_t v13 = *(void *)(a2 + 80);
  if (*(void *)(a2 + 8) <= v13)
  {
    long long v27 = 0u;
    long long v28 = 0u;
    long long v26 = 0u;
    memset(buf, 0, sizeof(buf));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_16:
    long long v27 = 0u;
    long long v28 = 0u;
    long long v26 = 0u;
    memset(buf, 0, sizeof(buf));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v14 = re::StringID::operator=((unint64_t *)(*(void *)(a2 + 16) + 144 * v13), (uint64_t *)a5);
  long long v15 = *(_OWORD *)(a5 + 16);
  long long v16 = *(_OWORD *)(a5 + 32);
  long long v17 = *(_OWORD *)(a5 + 64);
  *((_OWORD *)v14 + 3) = *(_OWORD *)(a5 + 48);
  *((_OWORD *)v14 + 4) = v17;
  *((_OWORD *)v14 + 1) = v15;
  *((_OWORD *)v14 + 2) = v16;
  long long v18 = *(_OWORD *)(a5 + 80);
  long long v19 = *(_OWORD *)(a5 + 96);
  long long v20 = *(_OWORD *)(a5 + 112);
  v14[16] = *(void *)(a5 + 128);
  *((_OWORD *)v14 + 6) = v19;
  *((_OWORD *)v14 + 7) = v20;
  *((_OWORD *)v14 + 5) = v18;
  unint64_t v21 = *(void *)(a2 + 80);
  if (*(void *)(a2 + 8) <= v21) {
    goto LABEL_16;
  }
  unsigned int v22 = (void *)(*(void *)(a2 + 16) + 144 * v21);
  v22[13] = *(void *)(a2 + 88);
  v22[14] = __len;
  uint64_t result = *(int *)(a2 + 96);
  *(_DWORD *)(a2 + re::DynamicArray<re::RigComponentConstraint>::deinit((uint64_t)this + 96) = result + 1;
  uint64_t v23 = *(void *)(a2 + 136);
  v22[15] = result;
  v22[16] = v23;
  size_t v24 = *(void *)(a2 + 88) + __len;
  ++*(void *)(a2 + 80);
  *(void *)(a2 + 88) = v24;
  *(unsigned char *)(a2 + 128) = 1;
  return result;
}

void *re::TextManager::drawDynamicText(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  re::StringID::operator=((unint64_t *)a2, (uint64_t *)a4);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a4 + 16);
  long long v8 = *(_OWORD *)(a4 + 80);
  long long v10 = *(_OWORD *)(a4 + 32);
  long long v9 = *(_OWORD *)(a4 + 48);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a4 + 64);
  *(_OWORD *)(a2 + 80) = v8;
  *(_OWORD *)(a2 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = v10;
  *(_OWORD *)(a2 + 48) = v9;
  unint64_t v11 = a3[1];
  if (v11) {
    unint64_t v12 = v11 >> 1;
  }
  else {
    unint64_t v12 = v11 >> 1;
  }
  *(void *)(a2 + 104) = v12;
  unint64_t v13 = (void *)re::GrowableLinearAllocator::alloc((re::GrowableLinearAllocator *)(a1 + 120), v12 + 1, 0);
  *(void *)(a2 + re::DynamicArray<re::RigComponentConstraint>::deinit((uint64_t)this + 96) = v13;
  if (a3[1]) {
    uint64_t v14 = (const void *)a3[2];
  }
  else {
    uint64_t v14 = (char *)a3 + 9;
  }
  uint64_t result = memcpy(v13, v14, *(void *)(a2 + 104) + 1);
  *(void *)(a2 + 112) = -1;
  return result;
}

uint64_t re::TextManager::addStaticText(re::TextManager *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = re::TextManager::renderData(a1);
  uint64_t v7 = (re *)re::HashTable<unsigned long long,re::TextRenderGroupData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(v6 + 152, (uint64_t *)(a3 + 96));
  long long v8 = v7;
  if (!v7)
  {
    memset(v18, 0, sizeof(v18));
    memset(v17, 0, sizeof(v17));
    re::DynamicString::setCapacity(v18, 0);
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    int v21 = 1;
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    uint64_t v22 = 0;
    char v25 = 0;
    uint64_t v26 = -1;
    uint64_t v9 = re::TextManager::renderData(a1);
    re::HashTable<unsigned long long,re::TextRenderGroupData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add<re::TextRenderGroupData&>(v9 + 152, (uint64_t *)(a3 + 96), (uint64_t)v17);
    uint64_t v10 = re::TextManager::renderData(a1);
    long long v8 = (_anonymous_namespace_ *)re::HashTable<unsigned long long,re::TextRenderGroupData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(v10 + 152, (uint64_t *)(a3 + 96));
    *((void *)v8 + 17) = *(void *)(a3 + 96);
    re::TextRenderGroupData::~TextRenderGroupData((re::TextRenderGroupData *)v17);
  }
  unint64_t v11 = *(void *)(a2 + 8);
  if (v11) {
    unint64_t v12 = *(char **)(a2 + 16);
  }
  else {
    unint64_t v12 = (char *)(a2 + 9);
  }
  size_t v13 = v11 >> 1;
  size_t v14 = v11 >> 1;
  if (*(void *)(a2 + 8)) {
    size_t v15 = v13;
  }
  else {
    size_t v15 = v14;
  }
  return re::TextManager::addStringToGroup(v7, (uint64_t)v8, v12, v15, a3);
}

uint64_t re::TextManager::renderData(re::TextManager *this)
{
  uint64_t result = *((void *)this + 13);
  if (!result)
  {
    unint64_t v3 = re::globalAllocators(0);
    uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3[2] + 32))(v3[2], 368, 8);
    *(_OWORD *)uint64_t v4 = 0u;
    *(_OWORD *)(v4 + 16) = 0u;
    *(_OWORD *)(v4 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0u;
    *(_OWORD *)(v4 + 48) = 0u;
    *(_OWORD *)(v4 + 64) = 0u;
    *(void *)(v4 + 80) = 0;
    re::DynamicString::setCapacity((void *)(v4 + 56), 0);
    *(void *)(v4 + 88) = 0;
    *(void *)(v4 + re::DynamicArray<re::RigComponentConstraint>::deinit((uint64_t)this + 96) = 0;
    *(_DWORD *)(v4 + 104) = 1;
    *(void *)(v4 + 120) = 0;
    *(void *)(v4 + 128) = 0;
    *(void *)(v4 + 112) = 0;
    *(unsigned char *)(v4 + re::DynamicArray<re::RigComponentConstraint>::deinit((uint64_t)this + 136) = 0;
    *(void *)(v4 + 144) = -1;
    *(_OWORD *)(v4 + 152) = 0u;
    *(_OWORD *)(v4 + 168) = 0u;
    *(_DWORD *)(v4 + 184) = 0;
    *(void *)(v4 + 188) = 0x7FFFFFFFLL;
    *(unsigned char *)(v4 + 200) = 0;
    *(void *)(v4 + 240) = 0x700000007;
    *(_DWORD *)(v4 + 249) = -1;
    *(_WORD *)(v4 + 254) = 0;
    *(unsigned char *)(v4 + 256) = 0;
    *(void *)(v4 + 2re::DynamicArray<re::RigComponentConstraint>::deinit((uint64_t)this + 96) = 0x700000007;
    *(_DWORD *)(v4 + 305) = -1;
    *(_OWORD *)(v4 + 340) = 0u;
    *(_OWORD *)(v4 + 326) = 0u;
    *(_OWORD *)(v4 + 310) = 0u;
    *(void *)(v4 + 356) = 0x7FFFFFFFLL;
    *((void *)this + 13) = v4;
    id v5 = *(id *)(*(void *)this + 184);
    uint64_t v6 = *(uint64_t **)(*(void *)this + 56);
    id v14 = objc_msgSend(v5, sel_newBufferWithLength_options_, 192, 0);
    NS::SharedPtr<MTL::Texture>::operator=(*((void ***)this + 13), &v14);
    if (v14) {

    }
    re::ShaderManager::makeFunction(v6, v6[32], (re::ns *)"fsSdfFont", 0, &v14);
    re::ShaderManager::makeFunction(v6, v6[32], (re::ns *)"vsSdfFont", 0, &v13);
    id v7 = objc_msgSend(objc_msgSend(MEMORY[0x263F12A80], sel_alloc), sel_init);
    objc_msgSend(objc_msgSend(objc_msgSend(v7, sel_attributes), sel_objectAtIndexedSubscript_, 0), sel_setFormat_, 31);
    objc_msgSend(objc_msgSend(objc_msgSend(v7, sel_attributes), sel_objectAtIndexedSubscript_, 0), sel_setBufferIndex_, 0);
    objc_msgSend(objc_msgSend(objc_msgSend(v7, sel_attributes), sel_objectAtIndexedSubscript_, 0), sel_setOffset_, 0);
    objc_msgSend(objc_msgSend(objc_msgSend(v7, sel_attributes), sel_objectAtIndexedSubscript_, 1), sel_setFormat_, 29);
    objc_msgSend(objc_msgSend(objc_msgSend(v7, sel_attributes), sel_objectAtIndexedSubscript_, 1), sel_setBufferIndex_, 0);
    objc_msgSend(objc_msgSend(objc_msgSend(v7, sel_attributes), sel_objectAtIndexedSubscript_, 1), sel_setOffset_, 16);
    objc_msgSend(objc_msgSend(objc_msgSend(v7, sel_layouts), sel_objectAtIndexedSubscript_, 0), sel_setStride_, 32);
    objc_msgSend(objc_msgSend(objc_msgSend(v7, sel_layouts), sel_objectAtIndexedSubscript_, 0), sel_setStepFunction_, 1);
    re::ShaderManager::makeRenderPipelineDescriptor((re::ShaderManager *)v6, &v12);
    uint64_t v8 = *((void *)this + 13);
    uint64_t v9 = *(void **)(v8 + 312);
    uint64_t v10 = v12;
    if (v9 == v12)
    {
    }
    else
    {
      if (v9)
      {

        uint64_t v10 = v12;
      }
      *(void *)(v8 + 312) = v10;
    }
    objc_msgSend(*(id *)(*((void *)this + 13) + 312), sel_setLabel_, @"Text Rendering Pipeline");
    objc_msgSend(*(id *)(*((void *)this + 13) + 312), sel_setVertexFunction_, v13);
    objc_msgSend(*(id *)(*((void *)this + 13) + 312), sel_setFragmentFunction_, v14);
    objc_msgSend(*(id *)(*((void *)this + 13) + 312), sel_setVertexDescriptor_, v7);
    objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(*((void *)this + 13) + 312), sel_colorAttachments), sel_objectAtIndexedSubscript_, 0), sel_setBlendingEnabled_, 1);
    objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(*((void *)this + 13) + 312), sel_colorAttachments), sel_objectAtIndexedSubscript_, 0), sel_setRgbBlendOperation_, 0);
    objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(*((void *)this + 13) + 312), sel_colorAttachments), sel_objectAtIndexedSubscript_, 0), sel_setSourceRGBBlendFactor_, 4);
    objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(*((void *)this + 13) + 312), sel_colorAttachments), sel_objectAtIndexedSubscript_, 0), sel_setDestinationRGBBlendFactor_, 5);
    objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(*((void *)this + 13) + 312), sel_colorAttachments), sel_objectAtIndexedSubscript_, 0), sel_setAlphaBlendOperation_, 0);
    objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(*((void *)this + 13) + 312), sel_colorAttachments), sel_objectAtIndexedSubscript_, 0), sel_setSourceAlphaBlendFactor_, 1);
    objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(*((void *)this + 13) + 312), sel_colorAttachments), sel_objectAtIndexedSubscript_, 0), sel_setDestinationAlphaBlendFactor_, 5);
    objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(*((void *)this + 13) + 312), sel_colorAttachments), sel_objectAtIndexedSubscript_, 0), sel_setWriteMask_, 15);
    unint64_t v11 = (unsigned char *)*((void *)this + 13);
    v11[248] = 4;
    v11[253] = 1;
    v11[304] = 7;
    v11[309] = 0;
    if (v7) {

    }
    if (v13) {
    if (v14)
    }

    return *((void *)this + 13);
  }
  return result;
}

uint64_t re::HashTable<unsigned long long,re::TextRenderGroupData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(uint64_t a1, uint64_t *a2)
{
  if (!*(void *)a1) {
    return 0;
  }
  uint64_t v2 = *a2;
  unint64_t v3 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  uint64_t v4 = *(unsigned int *)(*(void *)(a1 + 8)
                       + 4
                       * (((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) ^ ((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) >> 31))
                        % *(unsigned int *)(a1 + 24)));
  if (v4 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 16);
  if (*(void *)(v6 + 168 * v4 + 16) != v2)
  {
    while (1)
    {
      LODWORD(v4) = *(_DWORD *)(v6 + 168 * v4 + 8) & 0x7FFFFFFF;
      if (v4 == 0x7FFFFFFF) {
        break;
      }
      if (*(void *)(v6 + 168 * v4 + 16) == v2) {
        return v6 + 168 * v4 + 24;
      }
    }
    return 0;
  }
  return v6 + 168 * v4 + 24;
}

uint64_t re::HashTable<unsigned long long,re::TextRenderGroupData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add<re::TextRenderGroupData&>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  unint64_t v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (!*(void *)a1)
  {
    LODWORD(v9) = 0;
    goto LABEL_8;
  }
  unint64_t v9 = v8 % *(unsigned int *)(a1 + 24);
  uint64_t v10 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v9);
  if (v10 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v13 = re::HashTable<unsigned long long,re::TextRenderGroupData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addEmplace<re::TextRenderGroupData&>(a1, v9, v8, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v12 = *(void *)(a1 + 16) + 168 * v13;
    return v12 + 24;
  }
  uint64_t v11 = *(void *)(a1 + 16);
  while (*(void *)(v11 + 168 * v10 + 16) != v6)
  {
    LODWORD(v10) = *(_DWORD *)(v11 + 168 * v10 + 8) & 0x7FFFFFFF;
    if (v10 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  uint64_t v12 = v11 + 168 * v10;
  return v12 + 24;
}

void *anonymous namespace'::initTextRenderGroup(_anonymous_namespace_ *this, re::TextRenderGroupData *a2, unint64_t a3)
{
  id v5 = this;
  uint64_t v6 = (uint64_t *)((char *)this + 104);
  id v5 = (_anonymous_namespace_ *)((char *)v5 + 48);
  uint64_t result = re::DynamicString::setCapacity(v5, (size_t)a2);
  *((void *)v5 + 4) = 0;
  *((void *)v5 + 11) = -1;
  return result;
}

uint64_t re::TextManager::findStaticTextParam(re::TextManager *a1, uint64_t a2, uint64_t a3, uint64_t *a4, void *a5)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  v14[0] = a3;
  uint64_t v7 = re::TextManager::renderData(a1);
  uint64_t result = re::HashTable<unsigned long long,re::TextRenderGroupData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(v7 + 152, v14);
  if (result)
  {
    uint64_t v9 = *(void *)(result + 80);
    if (v9)
    {
      uint64_t v10 = 0;
      uint64_t v11 = *(void *)(result + 8);
      for (uint64_t i = 120; ; i += 144)
      {
        if (v11 == v10)
        {
          v14[1] = 0;
          long long v26 = 0u;
          long long v27 = 0u;
          long long v24 = 0u;
          long long v25 = 0u;
          long long v23 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          int v15 = 136315906;
          long long v16 = "operator[]";
          __int16 v17 = 1024;
          int v18 = 468;
          __int16 v19 = 2048;
          uint64_t v20 = v11;
          __int16 v21 = 2048;
          uint64_t v22 = v11;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        if (*(void *)(*(void *)(result + 16) + i) == a2) {
          break;
        }
        if (v9 == ++v10) {
          return 0;
        }
      }
      *a4 = result;
      *a5 = v10;
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t re::TextManager::staticTextParam(re::TextManager *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  unint64_t v7 = 0;
  v8[0] = 0;
  StaticTextParaunint64_t m = re::TextManager::findStaticTextParam(a1, a2, a3, v8, &v7);
  uint64_t result = 0;
  if (StaticTextParam)
  {
    unint64_t v5 = v7;
    unint64_t v6 = *(void *)(v8[0] + 8);
    if (v6 <= v7)
    {
      v8[1] = 0;
      long long v20 = 0u;
      long long v21 = 0u;
      long long v18 = 0u;
      long long v19 = 0u;
      long long v17 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v9 = 136315906;
      uint64_t v10 = "operator[]";
      __int16 v11 = 1024;
      int v12 = 468;
      __int16 v13 = 2048;
      unint64_t v14 = v5;
      __int16 v15 = 2048;
      unint64_t v16 = v6;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    return *(void *)(v8[0] + 16) + 144 * v7;
  }
  return result;
}

uint64_t re::TextManager::removeStaticText(re::TextManager *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  unint64_t v4 = a2;
  uint64_t v37 = *MEMORY[0x263EF8340];
  unint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t result = re::TextManager::findStaticTextParam(a1, a2, a3, &v22, &v21);
  if ((result & 1) == 0)
  {
LABEL_15:
    re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) Invalid string render handle %llu:%lu.", "!\"Unreachable code\"", "removeStaticText", 305, v3, v4);
    _os_crash();
    __break(1u);
  }
  unint64_t v7 = v21;
  uint64_t v8 = v22;
  unint64_t v4 = *(void *)(v22 + 8);
  if (v4 <= v21)
  {
LABEL_14:
    uint64_t v23 = 0;
    long long v36 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    uint64_t v3 = &_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v24 = 136315906;
    long long v25 = "operator[]";
    __int16 v26 = 1024;
    int v27 = 468;
    __int16 v28 = 2048;
    unint64_t v29 = v7;
    __int16 v30 = 2048;
    unint64_t v31 = v4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v9 = *(void *)(v22 + 16) + 144 * v21;
  uint64_t v10 = *(void *)(v9 + 112);
  if (v10)
  {
    unint64_t v11 = *(void *)(v9 + 104);
    uint64_t v12 = *(void *)(v9 + 112);
    do
    {
      uint64_t result = re::DynamicString::removeAt((re::DynamicString *)(v8 + 48), v11);
      --v12;
    }
    while (v12);
  }
  unint64_t v13 = *(void *)(v8 + 80);
  *(void *)(v8 + 88) -= v10;
  if (v7 + 1 < v13)
  {
    uint64_t v14 = 144 * v7;
    while (1)
    {
      unint64_t v4 = *(void *)(v8 + 8);
      if (v4 <= v7 + 1) {
        break;
      }
      __int16 v15 = (void *)(*(void *)(v8 + 16) + v14);
      v15[31] -= v10;
      if (v4 <= v7) {
        goto LABEL_13;
      }
      uint64_t result = (uint64_t)re::StringID::operator=(v15, v15 + 18);
      long long v16 = *(_OWORD *)(result + 176);
      *(_OWORD *)(result + 16) = *(_OWORD *)(result + 160);
      *(_OWORD *)(result + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = v16;
      long long v17 = *(_OWORD *)(result + 208);
      *(_OWORD *)(result + 48) = *(_OWORD *)(result + 192);
      *(_OWORD *)(result + 64) = v17;
      *(void *)(result + 128) = *(void *)(result + 272);
      long long v18 = *(_OWORD *)(result + 256);
      long long v19 = *(_OWORD *)(result + 224);
      *(_OWORD *)(result + re::DynamicArray<re::RigComponentConstraint>::deinit((uint64_t)this + 96) = *(_OWORD *)(result + 240);
      *(_OWORD *)(result + 112) = v18;
      *(_OWORD *)(result + 80) = v19;
      unint64_t v13 = *(void *)(v8 + 80);
      unint64_t v20 = v7 + 2;
      ++v7;
      v14 += 144;
      if (v20 >= v13) {
        goto LABEL_11;
      }
    }
    uint64_t v23 = 0;
    long long v36 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v24 = 136315906;
    long long v25 = "operator[]";
    __int16 v26 = 1024;
    int v27 = 468;
    __int16 v28 = 2048;
    unint64_t v29 = v7 + 1;
    __int16 v30 = 2048;
    unint64_t v31 = v4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_13:
    uint64_t v23 = 0;
    long long v36 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v24 = 136315906;
    long long v25 = "operator[]";
    __int16 v26 = 1024;
    int v27 = 468;
    __int16 v28 = 2048;
    unint64_t v29 = v7;
    __int16 v30 = 2048;
    unint64_t v31 = v4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_14;
  }
LABEL_11:
  *(void *)(v8 + 80) = v13 - 1;
  *(unsigned char *)(v8 + 128) = 1;
  return result;
}

uint64_t re::TextManager::modifyStaticTextColor(re::TextManager *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = re::TextManager::staticTextParam(a1, a2, a3);
  if (result)
  {
    *(void *)(result + 16) = a4;
    *(void *)(result + 24) = a5;
  }
  else
  {
    re::internal::assertLog((re::internal *)6, v10, "assertion failure: '%s' (%s:line %i) Invalid string render handle %llu:%lu.", "!\"Unreachable code\"", "modifyStaticTextColor", 337, a3, a2);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

_OWORD *re::TextManager::modifyStaticTextWorldMatrix(re::TextManager *a1, uint64_t a2, uint64_t a3, long long *a4)
{
  uint64_t result = (_OWORD *)re::TextManager::staticTextParam(a1, a2, a3);
  if (result)
  {
    long long v9 = *a4;
    long long v10 = a4[1];
    long long v11 = a4[3];
    result[4] = a4[2];
    result[5] = v11;
    result[2] = v9;
    result[3] = v10;
  }
  else
  {
    re::internal::assertLog((re::internal *)6, v8, "assertion failure: '%s' (%s:line %i) Invalid string render handle %llu:%lu.", "!\"Unreachable code\"", "modifyStaticTextWorldMatrix", 347, a3, a2);
    uint64_t result = (_OWORD *)_os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TextManager::computeSize(BOOL this, const re::DynamicString *a2, const re::FontID *a3, double a4, double a5, __n128 a6)
{
  uint64_t v8 = this;
  uint64_t v45 = *MEMORY[0x263EF8340];
  uint64_t v9 = 0x7FFFFFFFLL;
  if (*(void *)(this + 56))
  {
    uint64_t v10 = *(unsigned int *)(*(void *)(this + 64)
                          + 4 * ((*(void *)a3 >> 1) % (unint64_t)*(unsigned int *)(this + 80)));
    if (v10 != 0x7FFFFFFF)
    {
      uint64_t v11 = *(void *)(this + 72);
      uint64_t v9 = 0x7FFFFFFFLL;
      while (1)
      {
        this = re::StringID::operator==((void *)(v11 + 40 * v10 + 16), a3);
        if (this) {
          break;
        }
        uint64_t v10 = *(_DWORD *)(v11 + 40 * v10 + 8) & 0x7FFFFFFF;
        if (v10 == 0x7FFFFFFF) {
          goto LABEL_8;
        }
      }
      uint64_t v9 = v10;
    }
  }
LABEL_8:
  uint64_t v12 = *(void *)(*(void *)(v8 + 72) + 40 * v9 + 32);
  if (!v12)
  {
    uint64_t v37 = *re::graphicsLogObjects((re *)this);
    if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v38 = *((void *)a3 + 1);
      *(_DWORD *)buf = 136315138;
      *(void *)&uint8_t buf[4] = v38;
      _os_log_impl(&dword_233120000, v37, OS_LOG_TYPE_DEFAULT, "Invalid font %s, returning empty bound", buf, 0xCu);
    }
    return 0;
  }
  unint64_t v13 = *((void *)a2 + 1);
  if (v13) {
    unint64_t v14 = v13 >> 1;
  }
  else {
    unint64_t v14 = v13 >> 1;
  }
  if (!v14) {
    return 0;
  }
  unint64_t v15 = 0;
  unint64_t v16 = 0;
  uint64_t v17 = 0;
  float v18 = 0.0;
  unsigned int v19 = 1;
  uint64_t v20 = MEMORY[0x263EF8318];
  a6.n128_u64[0] = 0;
  char v21 = 1;
  do
  {
    __n128 v39 = a6;
    uint64_t v22 = (unsigned char *)re::DynamicString::operator[]((uint64_t)a2, v15);
    int v23 = *v22;
    if (*v22)
    {
      if (v23 == 10)
      {
        uint64_t v24 = *(void *)(v12 + 8);
        if (v21)
        {
          a6 = v39;
        }
        else
        {
          a6 = v39;
          if (*(void *)(v24 + 24) <= v16) {
            goto LABEL_49;
          }
          a6.n128_f32[0] = v39.n128_f32[0]
                         + (float)(*(float *)(*(void *)(v24 + 40) + 16 * v16 + 8)
                                 - *(float *)(*(void *)(v24 + 40) + 16 * v16));
        }
        if (v18 < a6.n128_f32[0]) {
          float v18 = a6.n128_f32[0];
        }
        a6.n128_u32[0] = 0;
        a6.n128_f32[1] = a6.n128_f32[1] - *(float *)v24;
        ++v17;
        char v21 = 1;
      }
      else
      {
        int v25 = (char)v23;
        if ((char)v23 < 0) {
          int v26 = __maskrune((char)v23, 0x40000uLL);
        }
        else {
          int v26 = *(_DWORD *)(v20 + 4 * (char)v23 + 60) & 0x40000;
        }
        a6 = v39;
        if (v26)
        {
          unint64_t v27 = v25 - 32;
          __int16 v28 = *(void **)(v12 + 8);
          if (v28[3] <= v27)
          {
            long long v43 = 0u;
            long long v44 = 0u;
            long long v41 = 0u;
            long long v42 = 0u;
            *(_OWORD *)buf = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_49:
            long long v43 = 0u;
            long long v44 = 0u;
            long long v41 = 0u;
            long long v42 = 0u;
            *(_OWORD *)buf = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_50:
            long long v43 = 0u;
            long long v44 = 0u;
            long long v41 = 0u;
            long long v42 = 0u;
            *(_OWORD *)buf = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
            goto LABEL_51;
          }
          if (v21)
          {
            char v21 = 0;
            float32x2_t v29 = *(float32x2_t *)(v28[5] + 16 * v27);
          }
          else
          {
            unint64_t v30 = v27 + 95 * v16;
            if (v28[8] <= v30) {
              goto LABEL_50;
            }
            char v21 = 0;
            float32x2_t v29 = *(float32x2_t *)(v28[10] + 8 * v30);
          }
          a6.n128_u64[0] = (unint64_t)vadd_f32((float32x2_t)v39.n128_u64[0], v29);
          unint64_t v16 = v27;
        }
      }
    }
    else
    {
      a6 = v39;
    }
    unint64_t v15 = v19;
    unint64_t v31 = *((void *)a2 + 1);
    if (v31) {
      unint64_t v32 = v31 >> 1;
    }
    else {
      unint64_t v32 = v31 >> 1;
    }
  }
  while (v32 > v19++);
  uint64_t v34 = *(void *)(v12 + 8);
  if (v21) {
    goto LABEL_41;
  }
  if (*(void *)(v34 + 24) <= v16)
  {
LABEL_51:
    long long v43 = 0u;
    long long v44 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  a6.n128_f32[0] = a6.n128_f32[0]
                 + (float)(*(float *)(*(void *)(v34 + 40) + 16 * v16 + 8)
                         - *(float *)(*(void *)(v34 + 40) + 16 * v16));
LABEL_41:
  if (v18 >= a6.n128_f32[0]) {
    *(float *)&uint64_t v35 = v18;
  }
  else {
    *(float *)&uint64_t v35 = a6.n128_f32[0];
  }
  *((float *)&v35 + 1) = *(float *)v34 * (float)(unint64_t)(v17 + 1);
  return v35;
}

uint64_t re::TextManager::sortAndFillInstanceUniforms(uint64_t a1, void *a2, uint64_t a3)
{
  unint64_t v4 = a2;
  unint64_t v6 = a2[10];
  if (v6)
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = a2[1];
    uint64_t v10 = a2[4];
    do
    {
      if (v9 == v8) {
        goto LABEL_46;
      }
      if (v10 == v8)
      {
LABEL_47:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_48:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      *(void *)(a2[5] + 8 * v8++) = a2[2] + v7;
      v7 += 144;
    }
    while (v6 != v8);
  }
  unint64_t v11 = 126 - 2 * __clz(v6);
  if (v6) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t result = std::__introsort<std::_ClassicAlgPolicy,re::TextManager::sortAndFillInstanceUniforms(re::TextRenderGroupData &,TextRenderPerGlyphData *)::$_0 &,re::StringRenderParam **,false>(a2[5], (uint64_t *)(a2[5] + 8 * v6), v12, 1);
  unint64_t v15 = v4[10];
  if (v15)
  {
    uint64_t v40 = a3;
    uint64_t v41 = 0;
    unint64_t v16 = 0;
    uint64_t v17 = (uint64_t)(v4 + 6);
    uint64_t v38 = a1;
    __n128 v39 = v4;
    while (1)
    {
      if (v4[4] <= v16) {
        goto LABEL_48;
      }
      float v18 = *(void **)(v4[5] + 8 * v16);
      if (!*(void *)(a1 + 56)) {
        break;
      }
      uint64_t v19 = *(void *)(a1 + 72);
      uint64_t v20 = *(unsigned int *)(*(void *)(a1 + 64) + 4 * ((*v18 >> 1) % (unint64_t)*(unsigned int *)(a1 + 80)));
      if (v20 == 0x7FFFFFFF) {
        goto LABEL_20;
      }
      unint64_t v42 = v15;
      while (1)
      {
        uint64_t result = re::StringID::operator==((void *)(v19 + 40 * v20 + 16), v18);
        if (result) {
          break;
        }
        uint64_t v20 = *(_DWORD *)(v19 + 40 * v20 + 8) & 0x7FFFFFFF;
        if (v20 == 0x7FFFFFFF)
        {
          uint64_t v20 = 0x7FFFFFFFLL;
          break;
        }
      }
      unint64_t v15 = v42;
LABEL_21:
      if (v18[14])
      {
        uint64_t v21 = 0;
        uint64_t v22 = 0;
        unint64_t v23 = 0;
        uint64_t v24 = *(void *)(v19 + 40 * v20 + 32);
        LODWORD(v14) = 0;
        *((float *)&v14 + 1) = *(float *)(*(void *)(v24 + 8) + 4) - **(float **)(v24 + 8);
        long long v43 = v14;
        unsigned int v25 = 1;
        char v26 = 1;
        while (1)
        {
          uint64_t result = re::DynamicString::operator[](v17, v18[13] + v21);
          int v27 = *(unsigned __int8 *)result;
          if (*(unsigned char *)result)
          {
            if (v27 == 10)
            {
              *((void *)&v14 + 1) = *((void *)&v43 + 1);
              LODWORD(v14) = 0;
              *((float *)&v14 + 1) = *((float *)&v43 + 1) - **(float **)(v24 + 8);
              long long v43 = v14;
              char v26 = 1;
            }
            else
            {
              int v28 = (char)v27;
              if ((char)v27 < 0)
              {
                uint64_t result = __maskrune((char)v27, 0x40000uLL);
                if (!result) {
                  goto LABEL_36;
                }
              }
              else
              {
                uint64_t result = *(_DWORD *)(MEMORY[0x263EF8318] + 4 * (char)v27 + 60) & 0x40000;
                if (!result) {
                  goto LABEL_36;
                }
              }
              unint64_t v29 = v28 - 32;
              unint64_t v30 = *(void **)(v24 + 8);
              if (v30[3] <= v29)
              {
                os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
LABEL_44:
                os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
LABEL_45:
                os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
LABEL_46:
                os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
                goto LABEL_47;
              }
              unint64_t v31 = (float32x2_t *)(v30[5] + 16 * v29);
              float32x2_t v32 = *v31;
              if ((v26 & 1) == 0)
              {
                unint64_t v33 = v29 + 95 * v23;
                if (v30[8] <= v33) {
                  goto LABEL_45;
                }
                float32x2_t v32 = *(float32x2_t *)(v30[10] + 8 * v33);
              }
              uint64_t v34 = *((void *)&v43 + 1);
              *(float32x2_t *)&long long v14 = vadd_f32(*(float32x2_t *)&v43, v32);
              long long v43 = v14;
              *((float32x2_t *)&v14 + 1) = vadd_f32(vsub_f32(v31[1], *v31), *(float32x2_t *)&v14);
              *(_OWORD *)(v40 + 48 * (v22 + v41)) = v14;
              uint64_t v35 = *(void *)(v24 + 8);
              if (*(void *)(v35 + 104) <= v29) {
                goto LABEL_44;
              }
              char v26 = 0;
              uint64_t v36 = v40 + 48 * (v22 + v41);
              *(_OWORD *)(v36 + 16) = *(_OWORD *)(*(void *)(v35 + 120) + 16 * v29);
              *(_DWORD *)(v36 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = v16;
              ++v22;
              unint64_t v23 = v29;
            }
          }
LABEL_36:
          uint64_t v21 = v25;
          if (v18[14] <= (unint64_t)v25++)
          {
            unint64_t v4 = v39;
            unint64_t v15 = v39[10];
            a1 = v38;
            goto LABEL_39;
          }
        }
      }
      uint64_t v22 = 0;
LABEL_39:
      v18[14] = v22;
      v41 += v22;
      if (++v16 >= v15) {
        goto LABEL_42;
      }
    }
    uint64_t v19 = *(void *)(a1 + 72);
LABEL_20:
    uint64_t v20 = 0x7FFFFFFFLL;
    goto LABEL_21;
  }
  uint64_t v41 = 0;
LABEL_42:
  v4[11] = v41;
  return result;
}

void re::TextManager::renderTextGroup(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned char *a5, re::FrameContext *a6, uint64_t a7, int a8, uint64_t a9, uint64_t a10, long long a11, long long a12, long long a13, long long a14, long long a15, long long a16, long long a17, uint64_t a18, uint64_t a19, long long a20,re::FrameContext *a21,unint64_t a22,char *__s2,uint64_t a24,char *__s1,uint64_t a26,long long a27,long long a28,long long a29,long long a30,long long a31,long long a32,uint64_t a33,uint64_t a34,long long a35,long long a36,long long a37,long long a38,long long a39,uint64_t a40,uint64_t a41)
{
  a41 = *MEMORY[0x263EF8340];
  if (!*(void *)(a7 + 80)) {
    return;
  }
  unint64_t v42 = *(void *)(a7 + 56);
  unint64_t v43 = (v42 & 1) != 0 ? v42 >> 1 : v42 >> 1;
  if (!v43) {
    return;
  }
  re::FrameContext::perFrameAlloc(a6, 48 * v43, 0x10uLL, (uint64_t)&a35);
  uint64_t v49 = DWORD2(a35);
  uint64_t v50 = a36;
  uint64_t v51 = (void *)(a35 + DWORD2(a35));
  if (a8)
  {
    if (*(unsigned char *)(a7 + 128))
    {
      *(unsigned char *)(a7 + 128) = 0;
      re::TextManager::sortAndFillInstanceUniforms(a1, (void *)a7, *(void *)(a7 + 120));
    }
    memcpy(v51, *(const void **)(a7 + 120), 48 * *(void *)(a7 + 88));
  }
  else
  {
    re::TextManager::sortAndFillInstanceUniforms(a1, (void *)a7, a35 + DWORD2(a35));
  }
  unint64_t v52 = *(void *)(a4 + 16);
  if (!v52)
  {
LABEL_67:
    *(void *)&a31 = 0;
    a38 = 0u;
    a39 = 0u;
    a36 = 0u;
    a37 = 0u;
    a35 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(a27) = 136315906;
    *(void *)((char *)&a27 + 4) = "operator[]";
    WORD6(a27) = 1024;
    *(_DWORD *)((char *)&a27 + 14) = 797;
    WORD1(a28) = 2048;
    *(void *)((char *)&a28 + 4) = 0;
    WORD6(a28) = 2048;
    *(void *)((char *)&a28 + 14) = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_68;
  }
  unint64_t v53 = *(void *)(a3 + 16);
  if (!v53)
  {
LABEL_68:
    *(void *)&a31 = 0;
    a38 = 0u;
    a39 = 0u;
    a36 = 0u;
    a37 = 0u;
    a35 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(a27) = 136315906;
    *(void *)((char *)&a27 + 4) = "operator[]";
    WORD6(a27) = 1024;
    *(_DWORD *)((char *)&a27 + 14) = 797;
    WORD1(a28) = 2048;
    *(void *)((char *)&a28 + 4) = 0;
    WORD6(a28) = 2048;
    *(void *)((char *)&a28 + 14) = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_69;
  }
  uint64_t v54 = 0;
  int v55 = a9;
  uint64_t v56 = *(float32x4_t **)(a4 + 32);
  uint64_t v57 = *(long long **)(a3 + 32);
  float32x4_t v58 = *v56;
  float32x4_t v59 = v56[1];
  float32x4_t v60 = v56[2];
  float32x4_t v61 = v56[3];
  long long v62 = v57[1];
  long long v63 = v57[2];
  long long v64 = v57[3];
  a27 = *v57;
  a28 = v62;
  a29 = v63;
  a30 = v64;
  do
  {
    *(long long *)((char *)&a35 + v54) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v58, COERCE_FLOAT(*(long long *)((char *)&a27 + v54))), v59, *(float32x2_t *)((char *)&a27 + v54), 1), v60, *(float32x4_t *)((char *)&a27 + v54), 2), v61, *(float32x4_t *)((char *)&a27 + v54), 3);
    v54 += 16;
  }
  while (v54 != 64);
  uint64_t v114 = v50;
  uint64_t v115 = v49;
  long long v124 = a35;
  long long v121 = a37;
  long long v122 = a36;
  long long v120 = a38;
  if (*a5 == 2)
  {
    if (v52 <= 1)
    {
LABEL_70:
      *(void *)&a31 = 0;
      a38 = 0u;
      a39 = 0u;
      a36 = 0u;
      a37 = 0u;
      a35 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      LODWORD(a27) = 136315906;
      *(void *)((char *)&a27 + 4) = "operator[]";
      WORD6(a27) = 1024;
      *(_DWORD *)((char *)&a27 + 14) = 797;
      WORD1(a28) = 2048;
      *(void *)((char *)&a28 + 4) = 1;
      WORD6(a28) = 2048;
      *(void *)((char *)&a28 + 14) = 1;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_71:
      *(void *)&a31 = 0;
      a38 = 0u;
      a39 = 0u;
      a36 = 0u;
      a37 = 0u;
      a35 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      LODWORD(a27) = 136315906;
      *(void *)((char *)&a27 + 4) = "operator[]";
      WORD6(a27) = 1024;
      *(_DWORD *)((char *)&a27 + 14) = 797;
      WORD1(a28) = 2048;
      *(void *)((char *)&a28 + 4) = 1;
      WORD6(a28) = 2048;
      *(void *)((char *)&a28 + 14) = 1;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    if (v53 <= 1) {
      goto LABEL_71;
    }
    uint64_t v65 = 0;
    float32x4_t v66 = v56[4];
    float32x4_t v67 = v56[5];
    float32x4_t v68 = v56[6];
    float32x4_t v69 = v56[7];
    long long v70 = v57[5];
    long long v71 = v57[6];
    long long v72 = v57[7];
    a27 = v57[4];
    a28 = v70;
    a29 = v71;
    a30 = v72;
    do
    {
      *(long long *)((char *)&a35 + v65) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v66, COERCE_FLOAT(*(long long *)((char *)&a27 + v65))), v67, *(float32x2_t *)((char *)&a27 + v65), 1), v68, *(float32x4_t *)((char *)&a27 + v65), 2), v69, *(float32x4_t *)((char *)&a27 + v65), 3);
      v65 += 16;
    }
    while (v65 != 64);
    unint64_t v73 = (unint64_t)&off_23435F000;
    long long v116 = a35;
    long long v117 = a36;
    long long v118 = a37;
    long long v119 = a38;
  }
  else
  {
    long long v119 = xmmword_23435FBB0;
    long long v118 = xmmword_23435FD80;
    unint64_t v73 = (unint64_t)&off_23435F000;
    long long v117 = xmmword_23435FD60;
    long long v116 = xmmword_23435FD50;
  }
  re::FrameContext::perFrameAlloc(a6, 0x80uLL, 0x10uLL, (uint64_t)&a35);
  uint64_t vars0 = DWORD2(a35);
  uint64_t vars8 = a36;
  uint64_t v74 = (long long *)(a35 + DWORD2(a35));
  *uint64_t v74 = v124;
  v74[1] = v122;
  v74[2] = v121;
  v74[3] = v120;
  v74[4] = v116;
  v74[5] = v117;
  v74[6] = v118;
  v74[7] = v119;
  re::FrameContext::perFrameAlloc(a6, 80 * *(void *)(a7 + 80), 0x10uLL, (uint64_t)&a35);
  uint64_t v76 = DWORD2(a35);
  uint64_t v77 = a36;
  if (*(void *)(a7 + 80))
  {
    unint64_t v78 = 0;
    unint64_t v79 = HIDWORD(a35) / 0x50uLL;
    uint64_t v80 = (_OWORD *)(DWORD2(a35) + (void)a35 + 64);
    while (1)
    {
      unint64_t v81 = *(void *)(a7 + 32);
      if (v81 <= v78) {
        break;
      }
      if (v79 == v78) {
        goto LABEL_64;
      }
      unint64_t v82 = *(_OWORD **)(*(void *)(a7 + 40) + 8 * v78);
      long long v83 = v82[2];
      long long v84 = v82[3];
      long long v85 = v82[5];
      *(v80 - 2) = v82[4];
      *(v80 - 1) = v85;
      *(v80 - 4) = v83;
      *(v80 - 3) = v84;
      *uint64_t v80 = v82[1];
      v80 += 5;
      if (++v78 >= *(void *)(a7 + 80)) {
        goto LABEL_27;
      }
    }
    *(void *)&a31 = 0;
    a38 = 0u;
    a39 = 0u;
    a36 = 0u;
    a37 = 0u;
    a35 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(a27) = 136315906;
    *(void *)((char *)&a27 + 4) = "operator[]";
    WORD6(a27) = 1024;
    *(_DWORD *)((char *)&a27 + 14) = 468;
    WORD1(a28) = 2048;
    *(void *)((char *)&a28 + 4) = v78;
    WORD6(a28) = 2048;
    *(void *)((char *)&a28 + 14) = v81;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_64:
    re::internal::assertLog((re::internal *)6, v75, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v79, v79);
    _os_crash();
    __break(1u);
LABEL_65:
    a22 = 0;
    a38 = 0u;
    a39 = 0u;
    a36 = 0u;
    a37 = 0u;
    a35 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(a31) = 136315906;
    *(void *)((char *)&a31 + 4) = "operator[]";
    WORD6(a31) = 1024;
    *(_DWORD *)((char *)&a31 + 14) = 468;
    WORD1(are::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 2048;
    *(void *)((char *)&a32 + 4) = v73;
    WORD6(are::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 2048;
    *(void *)((char *)&a32 + 14) = v81;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_66:
    a26 = 0;
    a38 = 0u;
    a39 = 0u;
    a36 = 0u;
    a37 = 0u;
    a35 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(a31) = 136315906;
    *(void *)((char *)&a31 + 4) = "operator[]";
    WORD6(a31) = 1024;
    *(_DWORD *)((char *)&a31 + 14) = 468;
    WORD1(are::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 2048;
    *(void *)((char *)&a32 + 4) = v73;
    WORD6(are::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 2048;
    *(void *)((char *)&a32 + 14) = v81;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_67;
  }
LABEL_27:
  a28 = 0u;
  a29 = 0u;
  int v86 = *a5;
  uint64_t v87 = v76;
  re::FrameContext::perFrameAlloc(a6, 0x400uLL, 0x100uLL, (uint64_t)&a35);
  uint64_t v88 = DWORD2(a35);
  uint64_t v125 = a36;
  uint64_t v89 = a35 + DWORD2(a35);
  *(_OWORD *)uint64_t v89 = xmmword_23435FD50;
  *(_OWORD *)(v89 + 16) = xmmword_23435FD60;
  *(_OWORD *)(v89 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = xmmword_23435FD80;
  *(_OWORD *)(v89 + 48) = xmmword_23435FBB0;
  *(_OWORD *)(v89 + 64) = xmmword_23435FD50;
  *(_OWORD *)(v89 + 80) = xmmword_23435FD60;
  *(_OWORD *)(v89 + re::DynamicArray<re::RigComponentConstraint>::deinit((uint64_t)this + 96) = xmmword_23435FD80;
  *(_OWORD *)(v89 + 112) = xmmword_23435FBB0;
  *(_OWORD *)(v89 + 128) = xmmword_23435FD50;
  *(_OWORD *)(v89 + 144) = xmmword_23435FD60;
  *(_OWORD *)(v89 + 160) = xmmword_23435FD80;
  *(_OWORD *)(v89 + 176) = xmmword_23435FBB0;
  *(_OWORD *)(v89 + 192) = xmmword_23435FD50;
  *(_OWORD *)(v89 + 208) = xmmword_23435FD60;
  *(_OWORD *)(v89 + 224) = xmmword_23435FD80;
  *(_OWORD *)(v89 + 240) = xmmword_23435FBB0;
  *(_OWORD *)(v89 + 256) = xmmword_23435FD50;
  *(_OWORD *)(v89 + 272) = xmmword_23435FD60;
  *(_OWORD *)(v89 + 288) = xmmword_23435FD80;
  *(_OWORD *)(v89 + 304) = xmmword_23435FBB0;
  *(_OWORD *)(v89 + 320) = xmmword_23435FD50;
  *(_OWORD *)(v89 + 336) = xmmword_23435FD60;
  *(_OWORD *)(v89 + 352) = xmmword_23435FD80;
  *(_OWORD *)(v89 + 368) = xmmword_23435FBB0;
  *(_OWORD *)(v89 + 384) = xmmword_23435FD50;
  *(_OWORD *)(v89 + 400) = xmmword_23435FD60;
  *(_OWORD *)(v89 + 416) = xmmword_23435FD80;
  *(_OWORD *)(v89 + 4re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = xmmword_23435FBB0;
  *(_OWORD *)(v89 + 448) = xmmword_23435FD50;
  *(_OWORD *)(v89 + 464) = xmmword_23435FD60;
  *(_OWORD *)(v89 + 480) = xmmword_23435FD80;
  *(_OWORD *)(v89 + 4re::DynamicArray<re::RigComponentConstraint>::deinit((uint64_t)this + 96) = xmmword_23435FBB0;
  *(_OWORD *)(v89 + 512) = xmmword_23435FD50;
  *(_OWORD *)(v89 + 528) = xmmword_23435FD60;
  *(_OWORD *)(v89 + 544) = xmmword_23435FD80;
  *(_OWORD *)(v89 + 560) = xmmword_23435FBB0;
  *(_OWORD *)(v89 + 576) = xmmword_23435FD50;
  *(_OWORD *)(v89 + 592) = xmmword_23435FD60;
  *(_OWORD *)(v89 + 608) = xmmword_23435FD80;
  *(_OWORD *)(v89 + 624) = xmmword_23435FBB0;
  *(_OWORD *)(v89 + 640) = xmmword_23435FD50;
  *(_OWORD *)(v89 + 656) = xmmword_23435FD60;
  *(_OWORD *)(v89 + 672) = xmmword_23435FD80;
  *(_OWORD *)(v89 + 688) = xmmword_23435FBB0;
  *(_OWORD *)(v89 + 704) = xmmword_23435FD50;
  *(_OWORD *)(v89 + 720) = xmmword_23435FD60;
  *(_OWORD *)(v89 + 736) = xmmword_23435FD80;
  *(_OWORD *)(v89 + 752) = xmmword_23435FBB0;
  *(_OWORD *)(v89 + 880) = 0u;
  *(_OWORD *)(v89 + 8re::DynamicArray<re::RigComponentConstraint>::deinit((uint64_t)this + 96) = 0u;
  *(_OWORD *)(v89 + 848) = 0u;
  *(_OWORD *)(v89 + 864) = 0u;
  *(_OWORD *)(v89 + 816) = 0u;
  *(_OWORD *)(v89 + 8re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0u;
  *(_OWORD *)(v89 + 784) = 0u;
  *(_OWORD *)(v89 + 800) = 0u;
  *(_OWORD *)(v89 + 768) = 0u;
  *(_DWORD *)(v89 + 940) = v86;
  *(_DWORD *)(v89 + 944) = v55;
  *(_OWORD *)(v89 + 960) = 0u;
  *(_OWORD *)(v89 + 976) = a27;
  *(_OWORD *)(v89 + 992) = a28;
  *(_OWORD *)(v89 + 1008) = a29;
  uint64_t v90 = (void *)re::TextManager::renderData((re::TextManager *)a1);
  uint64_t v91 = a2;
  (*(void (**)(void, char *, void, void, void))(*(void *)(a2 + 8) + 16))(**(void **)(a2 + 8), sel_setVertexBuffer_offset_atIndex_, *v90, 0, 0);
  (*(void (**)(void, char *, uint64_t, uint64_t, uint64_t))(*(void *)(v91 + 8) + 16))(**(void **)(v91 + 8), sel_setVertexBuffer_offset_atIndex_, v114, v115, 1);
  (*(void (**)(void, char *, uint64_t, uint64_t, uint64_t))(*(void *)(v91 + 8) + 16))(**(void **)(v91 + 8), sel_setVertexBuffer_offset_atIndex_, v77, v87, 2);
  (*(void (**)(void, char *, uint64_t, uint64_t, uint64_t))(*(void *)(v91 + 8) + 16))(**(void **)(v91 + 8), sel_setVertexBuffer_offset_atIndex_, vars8, vars0, 3);
  (*(void (**)(void, char *, uint64_t, uint64_t, uint64_t))(*(void *)(v91 + 8) + 16))(**(void **)(v91 + 8), sel_setVertexBuffer_offset_atIndex_, v125, v88, 5);
  re::StringID::invalid((re::StringID *)&a24);
  if (!*(void *)(a7 + 32))
  {
LABEL_69:
    a22 = 0;
    a38 = 0u;
    a39 = 0u;
    a36 = 0u;
    a37 = 0u;
    a35 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(a31) = 136315906;
    *(void *)((char *)&a31 + 4) = "operator[]";
    WORD6(a31) = 1024;
    *(_DWORD *)((char *)&a31 + 14) = 468;
    WORD1(are::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 2048;
    *(void *)((char *)&a32 + 4) = 0;
    WORD6(are::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 2048;
    *(void *)((char *)&a32 + 14) = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_70;
  }
  uint64_t v92 = 0x7FFFFFFFLL;
  uint64_t v126 = a1;
  if (*(void *)(a1 + 56))
  {
    __int16 v93 = **(void ***)(a7 + 40);
    uint64_t v94 = *(unsigned int *)(*(void *)(a1 + 64) + 4 * ((*v93 >> 1) % (unint64_t)*(unsigned int *)(a1 + 80)));
    uint64_t v95 = a2;
    if (v94 != 0x7FFFFFFF)
    {
      uint64_t v96 = *(void *)(a1 + 72);
      uint64_t v92 = 0x7FFFFFFFLL;
      while (!re::StringID::operator==((void *)(v96 + 40 * v94 + 16), v93))
      {
        uint64_t v94 = *(_DWORD *)(v96 + 40 * v94 + 8) & 0x7FFFFFFF;
        if (v94 == 0x7FFFFFFF) {
          goto LABEL_36;
        }
      }
      uint64_t v92 = v94;
    }
  }
  else
  {
    uint64_t v95 = a2;
  }
LABEL_36:
  uint64_t v97 = v126;
  (*(void (**)(void, char *, void, void))(*(void *)(v95 + 8) + 104))(**(void **)(v95 + 8), sel_setFragmentTexture_atIndex_, **(void **)(*(void *)(v126 + 72) + 40 * v92 + 32), 0);
  if (!*(void *)(a7 + 80)) {
    goto LABEL_61;
  }
  unint64_t v73 = 0;
  uint64_t v98 = 0;
  uint64_t v99 = 0;
  do
  {
    unint64_t v81 = *(void *)(a7 + 32);
    if (v81 <= v73) {
      goto LABEL_65;
    }
    re::StringID::StringID((re::StringID *)&a22, *(const StringID **)(*(void *)(a7 + 40) + 8 * v73));
    if (((a22 ^ a24) > 1 || __s1 != __s2 && strcmp(__s1, __s2)) && re::FontID::isValid((re::FontID *)&a24))
    {
      if (v98)
      {
        *(_OWORD *)(((unint64_t)&a35 | 0x10) + 0x10) = 0u;
        *(_OWORD *)(((unint64_t)&a35 | 0x10) + 0x20) = 0u;
        *(_OWORD *)((unint64_t)&a35 | 0x10) = 0u;
        re::FrameContext::perFrameAlloc(a6, 0x80uLL, 0x80uLL, (uint64_t)&a31);
        uint64_t v100 = a32;
        uint64_t v101 = a31 + DWORD2(a31);
        *(_DWORD *)(v101 + 16) = 0;
        *(_DWORD *)(v101 + 28) = v98;
        *(_OWORD *)(v101 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = a35;
        *(_OWORD *)(v101 + 48) = a36;
        *(_OWORD *)(v101 + 64) = a37;
        *(_OWORD *)(v101 + 80) = a38;
        (*(void (**)(void, char *, uint64_t))(*(void *)(v95 + 8) + 16))(**(void **)(v95 + 8), sel_setVertexBuffer_offset_atIndex_, v100);
        (*(void (**)(void, char *, uint64_t, void, uint64_t, uint64_t, uint64_t))(*(void *)(v95 + 8) + 224))(**(void **)(v95 + 8), sel_drawPrimitives_vertexStart_vertexCount_instanceCount_baseInstance_, 3, 0, 6, v98, v99);
      }
      re::StringID::operator=((unint64_t *)&a24, (uint64_t *)&a22);
      if (*(void *)(v97 + 56))
      {
        unint64_t v102 = a22;
        uint64_t v103 = *(void *)(v97 + 72);
        uint64_t v104 = *(unsigned int *)(*(void *)(v97 + 64) + 4 * ((a22 >> 1) % *(unsigned int *)(v97 + 80)));
        if (v104 != 0x7FFFFFFF)
        {
          long long v105 = __s2;
          while (1)
          {
            uint64_t v106 = v103 + 40 * v104;
            uint64_t v108 = *(void *)(v106 + 16);
            uint64_t v107 = v106 + 16;
            if ((v108 ^ v102) <= 1)
            {
              uint64_t v109 = *(const char **)(v107 + 8);
              if (v109 == v105 || !strcmp(v109, v105)) {
                break;
              }
            }
            uint64_t v104 = *(_DWORD *)(v103 + 40 * v104 + 8) & 0x7FFFFFFF;
            if (v104 == 0x7FFFFFFF)
            {
              uint64_t v104 = 0x7FFFFFFFLL;
              break;
            }
          }
          uint64_t v95 = a2;
          goto LABEL_56;
        }
      }
      else
      {
        uint64_t v103 = *(void *)(v97 + 72);
      }
      uint64_t v104 = 0x7FFFFFFFLL;
LABEL_56:
      v99 += v98;
      (*(void (**)(void, char *, void, void))(*(void *)(v95 + 8) + 104))(**(void **)(v95 + 8), sel_setFragmentTexture_atIndex_, **(void **)(v103 + 40 * v104 + 32), 0);
      uint64_t v98 = 0;
      uint64_t v97 = v126;
    }
    unint64_t v81 = *(void *)(a7 + 32);
    if (v81 <= v73) {
      goto LABEL_66;
    }
    v98 += *(void *)(*(void *)(*(void *)(a7 + 40) + 8 * v73) + 112);
    re::StringID::destroyString((re::StringID *)&a22);
    ++v73;
  }
  while (v73 < *(void *)(a7 + 80));
  if (v98)
  {
    a37 = 0u;
    a38 = 0u;
    a36 = 0u;
    re::FrameContext::perFrameAlloc(a6, 0x80uLL, 0x80uLL, (uint64_t)&a31);
    uint64_t v110 = a32;
    uint64_t v111 = a31 + DWORD2(a31);
    *(_DWORD *)(v111 + 16) = 0;
    *(_DWORD *)(v111 + 28) = v98;
    *(_OWORD *)(v111 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = a35;
    *(_OWORD *)(v111 + 48) = a36;
    *(_OWORD *)(v111 + 64) = a37;
    *(_OWORD *)(v111 + 80) = a38;
    (*(void (**)(void, char *, uint64_t))(*(void *)(v95 + 8) + 16))(**(void **)(v95 + 8), sel_setVertexBuffer_offset_atIndex_, v110);
    (*(void (**)(void, char *, uint64_t, void, uint64_t, uint64_t, uint64_t))(*(void *)(v95 + 8) + 224))(**(void **)(v95 + 8), sel_drawPrimitives_vertexStart_vertexCount_instanceCount_baseInstance_, 3, 0, 6, v98, v99);
  }
LABEL_61:
  re::StringID::destroyString((re::StringID *)&a24);
}

uint64_t re::TextManager::render(re::TextManager *a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, long long a6, unsigned char *a7, uint64_t a8, unsigned __int8 a9, unsigned __int8 a10)
{
  *(void *)&long long v45 = a5;
  *((void *)&v45 + 1) = a8;
  *(void *)&long long v66 = *MEMORY[0x263EF8340];
  (*(void (**)(void, char *, id))(*(void *)(a4 + 8) + 152))(**(void **)(a4 + 8), sel_pushDebugGroup_, objc_msgSend(NSString, sel_stringWithCString_encoding_, "Text Rendering", 4));
  (*(void (**)(void, char *, void))(*(void *)(a4 + 8) + 64))(**(void **)(a4 + 8), sel_setCullMode_, 0);
  (*(void (**)(void, char *, uint64_t))(*(void *)(a4 + 8) + 136))(**(void **)(a4 + 8), sel_setFrontFacingWinding_, 1);
  uint64_t v15 = re::TextManager::renderData(a1);
  uint64_t v16 = *(void *)a1;
  uint64_t v17 = v15 + 320;
  uint64_t v18 = re::HashTable<re::RenderTargetInfo,NS::SharedPtr<MTL::RenderPipelineState>,re::Hash<re::RenderTargetInfo>,re::EqualTo<re::RenderTargetInfo>,true,false>::tryGet(v15 + 320, a2);
  if (!v18)
  {
    uint64_t v42 = v16;
    *(void *)&long long v43 = a7;
    HIDWORD(v43) = a10;
    do
    {
      objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(v15 + 312), sel_colorAttachments), sel_objectAtIndexedSubscript_, v18), sel_setPixelFormat_, (int)a2[v18 + 1]);
      ++v18;
    }
    while (v18 != 8);
    objc_msgSend(*(id *)(v15 + 312), sel_setRasterSampleCount_, *a2);
    objc_msgSend(*(id *)(v15 + 312), sel_setDepthAttachmentPixelFormat_);
    objc_msgSend(*(id *)(v15 + 312), sel_setStencilAttachmentPixelFormat_);
    if (*(unsigned char *)(v16 + 302)) {
      objc_msgSend(*(id *)(v15 + 312), sel_setMaxVertexAmplificationCount_, 2);
    }
    *(void *)&long long v46 = *(id *)(v16 + 184);
    re::mtl::Device::makeRenderPipelineState((id *)&v46, *(void *)(v15 + 312), &v57);
    re::HashTable<re::RenderTargetInfo,NS::SharedPtr<MTL::RenderPipelineState>,re::Hash<re::RenderTargetInfo>,re::EqualTo<re::RenderTargetInfo>,true,false>::add<NS::SharedPtr<MTL::RenderPipelineState>&>(v17, (uint64_t)a2, (id *)&v57);
    uint64_t v18 = re::HashTable<re::RenderTargetInfo,NS::SharedPtr<MTL::RenderPipelineState>,re::Hash<re::RenderTargetInfo>,re::EqualTo<re::RenderTargetInfo>,true,false>::tryGet(v17, a2);
    if ((void)v57) {
  }
    }
  (*(void (**)(void, char *, void))(*(void *)(a4 + 8) + 56))(**(void **)(a4 + 8), sel_setRenderPipelineState_, *(void *)v18);
  unsigned int v19 = (a2[9] - 250 < 0xB) & (0x425u >> (*((unsigned char *)a2 + 36) + 6));
  if (a10)
  {
    uint64_t v20 = re::TextManager::renderData(a1);
    uint64_t v22 = 256;
    if (v19)
    {
      uint64_t v22 = 200;
      uint64_t v23 = v20 + 200;
    }
    else
    {
      uint64_t v23 = v20 + 256;
    }
    LOBYTE(v46) = *(unsigned char *)(v20 + v22);
    uint64_t v24 = a8;
    if ((_BYTE)v46) {
      re::DynamicString::DynamicString((re::DynamicString *)((char *)&v46 + 8), (const re::DynamicString *)(v23 + 8));
    }
    *(long long *)((char *)v48 + 8) = *(_OWORD *)(v23 + 40);
    v25.i32[1] = HIDWORD(v48[0]);
    BYTE6(v48[1]) = *(unsigned char *)a3;
    v25.i32[0] = *(_DWORD *)(a3 + 3);
    uint8x8_t v26 = (uint8x8_t)vmovl_u8(v25).u64[0];
    *(_WORD *)((char *)&v48[1] + 1) = *(_WORD *)(a3 + 1);
    BYTE7(v48[1]) = *(unsigned char *)(a3 + 8);
    v21.i32[0] = *(_DWORD *)(a3 + 11);
    uint16x8_t v27 = vmovl_u8(v21);
    LOBYTE(v28) = v26.i8[0];
    BYTE1(v28) = v26.i8[4];
    BYTE2(v28) = v26.i8[2];
    BYTE3(v28) = v26.i8[6];
    BYTE4(v28) = v27.i8[0];
    BYTE5(v28) = v27.i8[4];
    BYTE6(v28) = v27.i8[2];
    HIBYTE(v28) = v27.i8[6];
    *((void *)&v48[0] + 1) = v28;
    *(_WORD *)((char *)&v48[1] + 3) = *(_WORD *)(a3 + 9);
    DepthStencilState = (void *)re::getOrCreateDepthStencilState(*(void *)a1, *(void *)(*(void *)a1 + 104), (uint64_t)&v46, v26);
    if (_BYTE)v46 && *((void *)&v46 + 1) && (v47) {
      (*(void (**)(void))(**((void **)&v46 + 1) + 40))();
    }
  }
  else
  {
    uint64_t v30 = re::TextManager::renderData(a1);
    uint64_t v32 = 256;
    if (v19) {
      uint64_t v32 = 200;
    }
    DepthStencilState = (void *)re::getOrCreateDepthStencilState(*(void *)a1, *(void *)(*(void *)a1 + 104), v30 + v32, v31);
    uint64_t v24 = a8;
  }
  (*(void (**)(void, char *, void))(*(void *)(a4 + 8) + 112))(**(void **)(a4 + 8), sel_setDepthStencilState_, *DepthStencilState);
  (*(void (**)(void, char *, void))(*(void *)(a4 + 8) + 120))(**(void **)(a4 + 8), sel_setStencilReferenceValue_, *(unsigned __int8 *)(a3 + 16));
  uint64_t v34 = re::setVertexAmplificationCount((_anonymous_namespace_ *)*(unsigned __int8 *)(*(void *)a1 + 302), a9, *a7, 0xFFFF, a4, v33);
  if (*(void *)(v24 + 112) == -1)
  {
    long long v49 = 0u;
    long long v47 = 0u;
    memset(v48, 0, sizeof(v48));
    long long v46 = 0u;
    re::DynamicString::setCapacity(&v48[1], 0);
    long long v50 = 0uLL;
    LODWORD(v51) = 1;
    __s2 = 0;
    uint64_t v54 = 0;
    uint64_t v52 = 0;
    LOBYTE(__s1) = 0;
    uint64_t v56 = -1;
    re::StringID::invalid((re::StringID *)&v57);
    *(void *)&long long v58 = 0x3F8000003F800000;
    *((void *)&v58 + 1) = 0x3F8000003F800000;
    long long v59 = 0u;
    long long v60 = 0u;
    *(_OWORD *)float32x4_t v61 = 0u;
    *(_OWORD *)long long v62 = 0u;
    uint64_t v64 = 0;
    *(void *)&v65[0] = 0;
    uint64_t v63 = -1;
    *(long long *)((char *)v65 + 8) = re::kInvalidStringRenderHandle;
    uint64_t v37 = re::StringID::operator=((unint64_t *)&v57, (uint64_t *)v24);
    long long v38 = *(_OWORD *)(v24 + 32);
    long long v58 = *(_OWORD *)(v24 + 16);
    long long v59 = v38;
    long long v39 = *(_OWORD *)(v24 + 64);
    long long v60 = *(_OWORD *)(v24 + 48);
    *(_OWORD *)float32x4_t v61 = v39;
    *(_OWORD *)long long v62 = *(_OWORD *)(v24 + 80);
    re::TextManager::addStringToGroup((re *)v37, (uint64_t)&v46, *(char **)(v24 + 96), *(void *)(v24 + 104), (uint64_t)&v57);
    LOBYTE(v41) = a9;
    re::TextManager::renderTextGroup((uint64_t)a1, a4, a6, *((uint64_t *)&a6 + 1), a7, (re::FrameContext *)v45, (uint64_t)&v46, 0, v41, v42, v43, a6, v45, v46, v47, v48[0], v48[1], v49, *((uint64_t *)&v49 + 1),
      v50,
      v51,
      v52,
      __s2,
      v54,
      __s1,
      v56,
      v57,
      v58,
      v59,
      v60,
      *(long long *)v61,
      *(long long *)v62,
      v63,
      v64,
      v65[0],
      v65[1],
      v66,
      v67,
      v68,
      v69,
      v70);
    re::StringID::destroyString((re::StringID *)&v57);
    re::TextRenderGroupData::~TextRenderGroupData((re::TextRenderGroupData *)&v46);
  }
  else
  {
    uint64_t v35 = re::TextManager::renderData(a1);
    uint64_t v36 = re::HashTable<unsigned long long,re::TextRenderGroupData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(v35 + 152, (uint64_t *)(v24 + 112));
    if (v36)
    {
      LOBYTE(v41) = a9;
      re::TextManager::renderTextGroup((uint64_t)a1, a4, a6, *((uint64_t *)&a6 + 1), a7, (re::FrameContext *)v45, v36, 1, v41, v42, v43, a6, v45, v46, v47, v48[0], v48[1], v49, *((uint64_t *)&v49 + 1),
        v50,
        v51,
        v52,
        __s2,
        v54,
        __s1,
        v56,
        v57,
        v58,
        v59,
        v60,
        *(long long *)v61,
        *(long long *)v62,
        v63,
        v64,
        v65[0],
        v65[1],
        v66,
        v67,
        v68,
        v69,
        v70);
    }
  }
  return (*(uint64_t (**)(void, char *))(*(void *)(a4 + 8) + 160))(**(void **)(a4 + 8), sel_popDebugGroup);
}

void re::FixedArray<TextRenderPerGlyphData>::init<>(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  *a1 = a2;
  a1[1] = a3;
  if (!a3) {
    return;
  }
  if (a3 >= 0x555555555555556)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 48, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v5 = 48 * a3;
  unint64_t v6 = (_OWORD *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a2 + 32))(a2, 48 * a3, 16);
  a1[2] = (uint64_t)v6;
  if (!v6)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v7, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    _os_crash();
    __break(1u);
    return;
  }
  uint64_t v8 = v6;
  if (a3 != 1)
  {
    bzero(v6, v5 - 48);
    uint64_t v8 = (_OWORD *)((char *)v8 + v5 - 48);
  }
  v8[1] = 0u;
  uint64_t v8[2] = 0u;
  *uint64_t v8 = 0u;
}

void *re::FixedArray<re::StringRenderParam>::init<>(void *result, uint64_t a2, unint64_t a3)
{
  *uint64_t result = a2;
  result[1] = a3;
  if (!a3) {
    return result;
  }
  if (a3 >= 0x1C71C71C71C71C8)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 144, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  unint64_t v4 = result;
  uint64_t v5 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a2 + 32))(a2, 144 * a3, 16);
  v4[2] = v5;
  if (!v5)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v6, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    uint64_t result = (void *)_os_crash();
    __break(1u);
    return result;
  }
  uint64_t v7 = v5;
  for (unint64_t i = a3 - 1; i; --i)
  {
    *(_OWORD *)(v7 + 112) = 0u;
    *(_OWORD *)(v7 + 128) = 0u;
    *(_OWORD *)(v7 + 80) = 0u;
    *(_OWORD *)(v7 + re::DynamicArray<re::RigComponentConstraint>::deinit((uint64_t)this + 96) = 0u;
    *(_OWORD *)(v7 + 48) = 0u;
    *(_OWORD *)(v7 + 64) = 0u;
    *(_OWORD *)(v7 + 16) = 0u;
    *(_OWORD *)(v7 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0u;
    *(_OWORD *)uint64_t v7 = 0u;
    re::StringID::invalid((re::StringID *)v7);
    *(void *)(v7 + 16) = 0x3F8000003F800000;
    *(void *)(v7 + 24) = 0x3F8000003F800000;
    *(_OWORD *)(v7 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0u;
    *(_OWORD *)(v7 + 48) = 0u;
    *(_OWORD *)(v7 + 64) = 0u;
    *(_OWORD *)(v7 + 80) = 0u;
    *(void *)(v7 + 104) = 0;
    *(void *)(v7 + 112) = 0;
    *(void *)(v7 + re::DynamicArray<re::RigComponentConstraint>::deinit((uint64_t)this + 96) = -1;
    *(_OWORD *)(v7 + 120) = re::kInvalidStringRenderHandle;
    v7 += 144;
  }
  *(_OWORD *)(v7 + 112) = 0u;
  *(_OWORD *)(v7 + 128) = 0u;
  *(_OWORD *)(v7 + 80) = 0u;
  *(_OWORD *)(v7 + re::DynamicArray<re::RigComponentConstraint>::deinit((uint64_t)this + 96) = 0u;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_OWORD *)(v7 + 64) = 0u;
  *(_OWORD *)(v7 + 16) = 0u;
  *(_OWORD *)(v7 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0u;
  *(_OWORD *)uint64_t v7 = 0u;
  uint64_t result = re::StringID::invalid((re::StringID *)v7);
  *(void *)(v7 + 16) = 0x3F8000003F800000;
  *(void *)(v7 + 24) = 0x3F8000003F800000;
  *(_OWORD *)(v7 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0u;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_OWORD *)(v7 + 64) = 0u;
  *(_OWORD *)(v7 + 80) = 0u;
  *(void *)(v7 + 104) = 0;
  *(void *)(v7 + 112) = 0;
  *(void *)(v7 + re::DynamicArray<re::RigComponentConstraint>::deinit((uint64_t)this + 96) = -1;
  *(_OWORD *)(v7 + 120) = re::kInvalidStringRenderHandle;
  return result;
}

void re::FixedArray<re::StringRenderParam *>::init<>(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  *a1 = a2;
  a1[1] = a3;
  if (!a3) {
    return;
  }
  if (a3 >> 61)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 8, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v5 = 8 * a3;
  uint64_t v6 = (void *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a2 + 32))(a2, 8 * a3, 8);
  a1[2] = (uint64_t)v6;
  if (!v6)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v7, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    _os_crash();
    __break(1u);
    return;
  }
  uint64_t v8 = v6;
  if (a3 != 1)
  {
    bzero(v6, v5 - 8);
    uint64_t v8 = (void *)((char *)v8 + v5 - 8);
  }
  *uint64_t v8 = 0;
}

void re::TextRenderGroupData::~TextRenderGroupData(re::TextRenderGroupData *this)
{
  *((void *)this + 10) = 0;
  *((void *)this + 11) = 0;
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 13);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 13);
  re::DynamicString::deinit((re::TextRenderGroupData *)((char *)this + 48));
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3);
  re::FixedArray<re::StringRenderParam>::deinit(this);
}

void *re::FixedArray<re::StringRenderParam>::deinit(void *result)
{
  if (*result)
  {
    uint64_t v1 = result;
    uint64_t v3 = result + 1;
    uint64_t v2 = result[1];
    if (v2)
    {
      unint64_t v4 = (re::StringID *)result[2];
      uint64_t v5 = 144 * v2;
      do
      {
        re::StringID::destroyString(v4);
        unint64_t v4 = (re::StringID *)((char *)v4 + 144);
        v5 -= 144;
      }
      while (v5);
      uint64_t result = (void *)(*(uint64_t (**)(void, void))(*(void *)*v1 + 40))(*v1, v1[2]);
      *uint64_t v3 = 0;
      v3[1] = 0;
    }
    *uint64_t v1 = 0;
  }
  return result;
}

uint64_t re::HashTable<re::RenderTargetInfo,NS::SharedPtr<MTL::RenderPipelineState>,re::Hash<re::RenderTargetInfo>,re::EqualTo<re::RenderTargetInfo>,true,false>::tryGet(uint64_t a1, _OWORD *a2)
{
  v11[2] = *MEMORY[0x263EF8340];
  long long v4 = a2[1];
  v9[0] = *a2;
  v9[1] = v4;
  _OWORD v9[2] = a2[2];
  int v10 = *((_DWORD *)a2 + 12);
  MurmurHash3_x64_128((uint64_t)v9, 44, 0, v11);
  if (!*(void *)a1) {
    return 0;
  }
  uint64_t v5 = *(unsigned int *)(*(void *)(a1 + 8)
                       + 4
                       * (((v11[1] + (v11[0] << 6) + (v11[0] >> 2) - 0x61C8864680B583E9) ^ v11[0])
                        % *(unsigned int *)(a1 + 24)));
  if (v5 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 16);
  while (1)
  {
    BOOL v7 = re::EqualTo<re::RenderTargetInfo>::operator()((int)v9, (void *)(v6 + 72 * v5 + 12), a2);
    uint64_t v6 = *(void *)(a1 + 16);
    if (v7) {
      break;
    }
    uint64_t v5 = *(_DWORD *)(v6 + 72 * v5 + 8) & 0x7FFFFFFF;
    if (v5 == 0x7FFFFFFF) {
      return 0;
    }
  }
  return v6 + 72 * v5 + 64;
}

uint64_t re::HashTable<re::RenderTargetInfo,NS::SharedPtr<MTL::RenderPipelineState>,re::Hash<re::RenderTargetInfo>,re::EqualTo<re::RenderTargetInfo>,true,false>::add<NS::SharedPtr<MTL::RenderPipelineState>&>(uint64_t a1, uint64_t a2, id *a3)
{
  v17[2] = *MEMORY[0x263EF8340];
  long long v6 = *(_OWORD *)(a2 + 16);
  v15[0] = *(_OWORD *)a2;
  v15[1] = v6;
  v15[2] = *(_OWORD *)(a2 + 32);
  int v16 = *(_DWORD *)(a2 + 48);
  MurmurHash3_x64_128((uint64_t)v15, 44, 0, v17);
  unint64_t v7 = (v17[1] + (v17[0] << 6) + (v17[0] >> 2) - 0x61C8864680B583E9) ^ v17[0];
  if (!*(void *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  unint64_t v8 = v7 % *(unsigned int *)(a1 + 24);
  uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v8);
  if (v9 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v12 = re::HashTable<re::RenderTargetInfo,NS::SharedPtr<MTL::RenderPipelineState>,re::Hash<re::RenderTargetInfo>,re::EqualTo<re::RenderTargetInfo>,true,false>::addEmplace<NS::SharedPtr<MTL::RenderPipelineState>&>(a1, v8, v7, (long long *)a2, a3);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v13 = *(void *)(a1 + 16) + 72 * v12;
    return v13 + 64;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  while (1)
  {
    BOOL v11 = re::EqualTo<re::RenderTargetInfo>::operator()((int)v15, (void *)(v10 + 72 * v9 + 12), (void *)a2);
    uint64_t v10 = *(void *)(a1 + 16);
    if (v11) {
      break;
    }
    uint64_t v9 = *(_DWORD *)(v10 + 72 * v9 + 8) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  uint64_t v13 = v10 + 72 * v9;
  return v13 + 64;
}

BOOL re::EqualTo<re::RenderTargetInfo>::operator()(int a1, void *__s1, void *__s2)
{
  return memcmp(__s1, __s2, 0x2CuLL) == 0;
}

uint64_t re::HashTable<re::RenderTargetInfo,NS::SharedPtr<MTL::RenderPipelineState>,re::Hash<re::RenderTargetInfo>,re::EqualTo<re::RenderTargetInfo>,true,false>::addEmplace<NS::SharedPtr<MTL::RenderPipelineState>&>(uint64_t a1, unsigned int a2, unint64_t a3, long long *a4, id *a5)
{
  uint64_t v10 = *(unsigned int *)(a1 + 36);
  if (v10 == 0x7FFFFFFF)
  {
    uint64_t v10 = *(unsigned int *)(a1 + 32);
    int v11 = v10;
    if (v10 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::RenderTargetInfo,NS::SharedPtr<MTL::RenderPipelineState>,re::Hash<re::RenderTargetInfo>,re::EqualTo<re::RenderTargetInfo>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = v11 + 1;
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 72 * v10 + 8);
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 72 * v10 + 8);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v12 + 72 * v10 + 8) = v13 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + 72 * v10 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 72 * v10 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 72 * v10) = a3;
  uint64_t v14 = *(void *)(a1 + 16) + 72 * v10;
  long long v15 = *a4;
  long long v16 = a4[1];
  long long v17 = a4[2];
  *(_DWORD *)(v14 + 60) = *((_DWORD *)a4 + 12);
  *(_OWORD *)(v14 + 44) = v17;
  *(_OWORD *)(v14 + 28) = v16;
  *(_OWORD *)(v14 + 12) = v15;
  uint64_t v18 = *(void *)(a1 + 16) + 72 * v10;
  *(void *)(v18 + 64) = *a5;
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return v10;
}

void re::HashTable<re::RenderTargetInfo,NS::SharedPtr<MTL::RenderPipelineState>,re::Hash<re::RenderTargetInfo>,re::EqualTo<re::RenderTargetInfo>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(void *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<re::RenderTargetInfo,NS::SharedPtr<MTL::RenderPipelineState>,re::Hash<re::RenderTargetInfo>,re::EqualTo<re::RenderTargetInfo>,true,false>::init((uint64_t)v13, v4, a2);
      long long v5 = *(_OWORD *)v13;
      *(_OWORD *)int v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      uint64_t v6 = *(void *)&v13[16];
      *(void *)&v13[16] = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = v6;
      long long v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&unsigned char v13[24] = *(_OWORD *)(a1 + 24);
      unsigned int v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      unsigned int v9 = v7;
      if (v7)
      {
        uint64_t v10 = 0;
        unint64_t v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(void *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashTable<re::RenderTargetInfo,NS::SharedPtr<MTL::RenderPipelineState>,re::Hash<re::RenderTargetInfo>,re::EqualTo<re::RenderTargetInfo>,true,false>::addAsMove(a1, *(void *)(*(void *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(*(void *)&v13[16] + v10), (long long *)(*(void *)&v13[16] + v10 + 12), (void *)(*(void *)&v13[16] + v10 + 64));
            unsigned int v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 72;
        }
        while (v11 < v9);
      }
      re::HashTable<re::RenderTargetInfo,NS::SharedPtr<MTL::RenderPipelineState>,re::Hash<re::RenderTargetInfo>,re::EqualTo<re::RenderTargetInfo>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2) {
      signed int v12 = a2;
    }
    else {
      signed int v12 = 3;
    }
  }
}

uint64_t re::HashTable<re::RenderTargetInfo,NS::SharedPtr<MTL::RenderPipelineState>,re::Hash<re::RenderTargetInfo>,re::EqualTo<re::RenderTargetInfo>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, long long *a4, void *a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::RenderTargetInfo,NS::SharedPtr<MTL::RenderPipelineState>,re::Hash<re::RenderTargetInfo>,re::EqualTo<re::RenderTargetInfo>,true,false>::setCapacity(a1, (2 * *(_DWORD *)(a1 + 28)));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = v10 + 1;
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 72 * v9 + 8);
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 72 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v11 + 72 * v9 + 8) = v12 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + 72 * v9 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 72 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 72 * v9) = a3;
  uint64_t v13 = *(void *)(a1 + 16) + 72 * v9;
  long long v14 = *a4;
  long long v15 = a4[1];
  long long v16 = a4[2];
  *(_DWORD *)(v13 + 60) = *((_DWORD *)a4 + 12);
  *(_OWORD *)(v13 + 44) = v16;
  *(_OWORD *)(v13 + 28) = v15;
  *(_OWORD *)(v13 + 12) = v14;
  uint64_t v17 = *(void *)(a1 + 8);
  *(void *)(*(void *)(a1 + 16) + 72 * v9 + 64) = *a5;
  *a5 = 0;
  *(_DWORD *)(v17 + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<re::RenderTargetInfo,NS::SharedPtr<MTL::RenderPipelineState>,re::Hash<re::RenderTargetInfo>,re::EqualTo<re::RenderTargetInfo>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  long long v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    unsigned int v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    long long v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      long long v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  int v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + 72 * v10, 16);
  if (v12)
  {
    long long v14 = v12;
    *(void *)(a1 + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &unk_2343655D0, 4 * v10);
    }
    *(void *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

double re::HashTable<re::RenderTargetInfo,NS::SharedPtr<MTL::RenderPipelineState>,re::Hash<re::RenderTargetInfo>,re::EqualTo<re::RenderTargetInfo>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    unint64_t v3 = *((unsigned int *)a1 + 8);
    if (v3)
    {
      uint64_t v4 = 0;
      for (unint64_t i = 0; i < v3; ++i)
      {
        uint64_t v6 = a1[2] + v4;
        int v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
          long long v8 = *(void **)(v6 + 64);
          if (v8)
          {

            *(void *)(v6 + 64) = 0;
            unint64_t v3 = *((unsigned int *)a1 + 8);
          }
        }
        v4 += 72;
      }
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

double re::HashTable<unsigned long long,re::TextRenderGroupData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    unint64_t v3 = *((unsigned int *)a1 + 8);
    if (v3)
    {
      uint64_t v4 = 0;
      for (unint64_t i = 0; i < v3; ++i)
      {
        uint64_t v6 = a1[2] + v4;
        int v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
          re::TextRenderGroupData::~TextRenderGroupData((re::TextRenderGroupData *)(v6 + 24));
          unint64_t v3 = *((unsigned int *)a1 + 8);
        }
        v4 += 168;
      }
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

void re::HashSetBase<re::FontID,re::FontID,re::internal::ValueAsKey<re::FontID>,re::Hash<re::FontID>,re::EqualTo<re::FontID>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v25, 0, 36);
      *(void *)&v25[36] = 0x7FFFFFFFLL;
      re::HashSetBase<re::FontID,re::FontID,re::internal::ValueAsKey<re::FontID>,re::Hash<re::FontID>,re::EqualTo<re::FontID>,true,false>::init((uint64_t)v25, v4, a2);
      long long v5 = *(_OWORD *)a1;
      *(void *)a1 = *(void *)v25;
      uint64_t v6 = *(void *)(a1 + 16);
      long long v7 = *(_OWORD *)&v25[8];
      *(_OWORD *)uint8x8_t v25 = v5;
      *(void *)&v25[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      long long v9 = *(_OWORD *)&v25[24];
      *(_OWORD *)&v25[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v25[32];
      *(_OWORD *)(a1 + 24) = v9;
      unint64_t v10 = v8;
      if (v8)
      {
        unint64_t v11 = 0;
        int v12 = DWORD1(v9);
        uint64_t v13 = v7;
        long long v14 = (uint64_t *)(v6 + 16);
        do
        {
          if ((*(_DWORD *)(v14 - 1) & 0x80000000) != 0)
          {
            unint64_t v15 = *(v14 - 2);
            unint64_t v16 = *(unsigned int *)(a1 + 24);
            unint64_t v17 = v15 % v16;
            uint64_t v18 = *(unsigned int *)(a1 + 36);
            if (v18 == 0x7FFFFFFF)
            {
              uint64_t v18 = *(unsigned int *)(a1 + 32);
              int v19 = v18;
              if (v18 == v16)
              {
                re::HashSetBase<re::FontID,re::FontID,re::internal::ValueAsKey<re::FontID>,re::Hash<re::FontID>,re::EqualTo<re::FontID>,true,false>::setCapacity(a1, (2 * v12));
                unint64_t v17 = v15 % *(unsigned int *)(a1 + 24);
                int v19 = *(_DWORD *)(a1 + 32);
                uint64_t v13 = *(void *)(a1 + 8);
              }
              *(_DWORD *)(a1 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = v19 + 1;
              uint64_t v20 = *(void *)(a1 + 16);
              int v21 = *(_DWORD *)(v20 + 32 * v18 + 8);
            }
            else
            {
              uint64_t v20 = *(void *)(a1 + 16);
              int v21 = *(_DWORD *)(v20 + 32 * v18 + 8);
              *(_DWORD *)(a1 + 36) = v21 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v20 + 32 * v18 + 8) = v21 | 0x80000000;
            *(_DWORD *)(*(void *)(a1 + 16) + 32 * v18 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 32 * v18 + 8) & 0x80000000 | *(_DWORD *)(v13 + 4 * v17);
            *(void *)(*(void *)(a1 + 16) + 32 * v18) = v15;
            uint64_t v22 = *(void *)(a1 + 16) + 32 * v18;
            uint64_t v23 = *v14;
            *(void *)(v22 + 16) = *(void *)(v22 + 16) & 0xFFFFFFFFFFFFFFFELL | *v14 & 1;
            *(void *)(v22 + 16) = *v14 & 0xFFFFFFFFFFFFFFFELL | v23 & 1;
            *(void *)(v22 + 24) = v14[1];
            *long long v14 = 0;
            v14[1] = (uint64_t)"";
            uint64_t v13 = *(void *)(a1 + 8);
            *(_DWORD *)(v13 + 4 * v17) = v18;
            int v12 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v12;
          }
          ++v11;
          v14 += 4;
        }
        while (v11 < v10);
      }
      re::HashTable<unsigned int,re::StringID,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)v25);
    }
  }
  else
  {
    if (a2) {
      signed int v24 = a2;
    }
    else {
      signed int v24 = 3;
    }
  }
}

void re::HashSetBase<re::FontID,re::FontID,re::internal::ValueAsKey<re::FontID>,re::Hash<re::FontID>,re::EqualTo<re::FontID>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  long long v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    long long v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    unsigned int v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      long long v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  int v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + 32 * v10, 16);
  if (v12)
  {
    long long v14 = v12;
    *(void *)(a1 + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &unk_2343655D0, 4 * v10);
    }
    *(void *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 601);
    _os_crash();
    __break(1u);
  }
}

void re::HashTable<re::FontID,re::FontAssetInternal *,re::Hash<re::FontID>,re::EqualTo<re::FontID>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v23, 0, 36);
      *(void *)&v23[36] = 0x7FFFFFFFLL;
      re::HashTable<re::FontID,re::FontAssetInternal *,re::Hash<re::FontID>,re::EqualTo<re::FontID>,true,false>::init((uint64_t)v23, v4, a2);
      long long v5 = *(_OWORD *)a1;
      *(void *)a1 = *(void *)v23;
      uint64_t v6 = *(void *)(a1 + 16);
      long long v7 = *(_OWORD *)&v23[8];
      *(_OWORD *)uint64_t v23 = v5;
      *(void *)&v23[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      long long v9 = *(_OWORD *)&v23[24];
      *(_OWORD *)&v23[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v23[32];
      *(_OWORD *)(a1 + 24) = v9;
      unint64_t v10 = v8;
      if (v8)
      {
        unint64_t v11 = 0;
        int v12 = DWORD1(v9);
        uint64_t v13 = v7;
        uint64_t v14 = v6 + 16;
        do
        {
          if ((*(_DWORD *)(v14 - 8) & 0x80000000) != 0)
          {
            unint64_t v15 = *(void *)(v14 - 16);
            unint64_t v16 = *(unsigned int *)(a1 + 24);
            unint64_t v17 = v15 % v16;
            uint64_t v18 = *(unsigned int *)(a1 + 36);
            if (v18 == 0x7FFFFFFF)
            {
              uint64_t v18 = *(unsigned int *)(a1 + 32);
              int v19 = v18;
              if (v18 == v16)
              {
                re::HashTable<re::FontID,re::FontAssetInternal *,re::Hash<re::FontID>,re::EqualTo<re::FontID>,true,false>::setCapacity(a1, (2 * v12));
                unint64_t v17 = v15 % *(unsigned int *)(a1 + 24);
                int v19 = *(_DWORD *)(a1 + 32);
                uint64_t v13 = *(void *)(a1 + 8);
              }
              *(_DWORD *)(a1 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = v19 + 1;
              uint64_t v20 = *(void *)(a1 + 16);
              int v21 = *(_DWORD *)(v20 + 40 * v18 + 8);
            }
            else
            {
              uint64_t v20 = *(void *)(a1 + 16);
              int v21 = *(_DWORD *)(v20 + 40 * v18 + 8);
              *(_DWORD *)(a1 + 36) = v21 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v20 + 40 * v18 + 8) = v21 | 0x80000000;
            *(_DWORD *)(*(void *)(a1 + 16) + 40 * v18 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 40 * v18 + 8) & 0x80000000 | *(_DWORD *)(v13 + 4 * v17);
            *(void *)(*(void *)(a1 + 16) + 40 * v18) = v15;
            re::StringID::StringID((re::StringID *)(*(void *)(a1 + 16) + 40 * v18 + 16), (const StringID *)v14);
            *(void *)(*(void *)(a1 + 16) + 40 * v18 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = *(void *)(v14 + 16);
            uint64_t v13 = *(void *)(a1 + 8);
            *(_DWORD *)(v13 + 4 * v17) = v18;
            int v12 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v12;
          }
          ++v11;
          v14 += 40;
        }
        while (v11 < v10);
      }
      re::HashTable<re::FontID,re::FontAssetInternal *,re::Hash<re::FontID>,re::EqualTo<re::FontID>,true,false>::deinit((uint64_t *)v23);
    }
  }
  else
  {
    if (a2) {
      signed int v22 = a2;
    }
    else {
      signed int v22 = 3;
    }
  }
}

void re::HashTable<re::FontID,re::FontAssetInternal *,re::Hash<re::FontID>,re::EqualTo<re::FontID>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  long long v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    long long v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    unsigned int v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      long long v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  int v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + 40 * v10, 16);
  if (v12)
  {
    uint64_t v14 = v12;
    *(void *)(a1 + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &unk_2343655D0, 4 * v10);
    }
    *(void *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

uint64_t re::HashTable<unsigned long long,re::TextRenderGroupData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addEmplace<re::TextRenderGroupData&>(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v10 = *(unsigned int *)(a1 + 36);
  if (v10 == 0x7FFFFFFF)
  {
    uint64_t v10 = *(unsigned int *)(a1 + 32);
    int v11 = v10;
    if (v10 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned long long,re::TextRenderGroupData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = v11 + 1;
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 168 * v10 + 8);
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 168 * v10 + 8);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  uint64_t v14 = 168 * v10;
  *(_DWORD *)(v12 + v14 + 8) = v13 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + v14 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + v14 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + v14) = a3;
  *(void *)(*(void *)(a1 + 16) + v14 + 16) = *a4;
  uint64_t v15 = *(void *)(a1 + 16) + v14;
  re::FixedArray<re::StringRenderParam>::FixedArray((void *)(v15 + 24), (uint64_t *)a5);
  re::FixedArray<re::StringRenderParam *>::FixedArray(v15 + 48, a5 + 24);
  re::DynamicString::DynamicString((re::DynamicString *)(v15 + 72), (const re::DynamicString *)(a5 + 48));
  long long v16 = *(_OWORD *)(a5 + 80);
  *(_DWORD *)(v15 + 120) = *(_DWORD *)(a5 + 96);
  *(_OWORD *)(v15 + 104) = v16;
  re::FixedArray<TextRenderPerGlyphData>::FixedArray(v15 + 128, a5 + 104);
  *(_OWORD *)(v15 + 152) = *(_OWORD *)(a5 + 128);
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return v10;
}

uint64_t re::FixedArray<re::StringRenderParam>::FixedArray(void *a1, uint64_t *a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v4 = *a2;
  if (!v4) {
    return (uint64_t)a1;
  }
  re::FixedArray<re::StringRenderParam>::init<>(a1, v4, a2[1]);
  uint64_t v6 = a2[1];
  if (a1[1] == v6)
  {
    if (v6)
    {
      uint64_t v7 = a2[2];
      unsigned int v8 = (unint64_t *)a1[2];
      uint64_t v9 = 144 * v6;
      do
      {
        uint64_t v10 = re::StringID::operator=(v8, (uint64_t *)v7);
        long long v11 = *(_OWORD *)(v7 + 16);
        long long v12 = *(_OWORD *)(v7 + 32);
        long long v13 = *(_OWORD *)(v7 + 64);
        *((_OWORD *)v10 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = *(_OWORD *)(v7 + 48);
        *((_OWORD *)v10 + 4) = v13;
        *((_OWORD *)v10 + 1) = v11;
        *((_OWORD *)v10 + 2) = v12;
        long long v14 = *(_OWORD *)(v7 + 80);
        long long v15 = *(_OWORD *)(v7 + 96);
        long long v16 = *(_OWORD *)(v7 + 112);
        uint8_t v10[16] = *(void *)(v7 + 128);
        *((_OWORD *)v10 + 6) = v15;
        *((_OWORD *)v10 + 7) = v16;
        *((_OWORD *)v10 + 5) = v14;
        v7 += 144;
        unsigned int v8 = v10 + 18;
        v9 -= 144;
      }
      while (v9);
    }
    return (uint64_t)a1;
  }
  re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) Cannot copy from a FixedArray of a different size", "m_size == other.m_size", "copy", 388);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::FixedArray<re::StringRenderParam *>::FixedArray(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  uint64_t v4 = *(void *)a2;
  if (!v4) {
    return a1;
  }
  re::FixedArray<re::StringRenderParam *>::init<>((uint64_t *)a1, v4, *(void *)(a2 + 8));
  uint64_t v6 = *(void *)(a2 + 8);
  if (*(void *)(a1 + 8) == v6)
  {
    if (v6) {
      memmove(*(void **)(a1 + 16), *(const void **)(a2 + 16), 8 * v6);
    }
    return a1;
  }
  re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) Cannot copy from a FixedArray of a different size", "m_size == other.m_size", "copy", 388);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::FixedArray<TextRenderPerGlyphData>::FixedArray(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  uint64_t v4 = *(void *)a2;
  if (!v4) {
    return a1;
  }
  re::FixedArray<TextRenderPerGlyphData>::init<>((uint64_t *)a1, v4, *(void *)(a2 + 8));
  uint64_t v6 = *(void *)(a2 + 8);
  if (*(void *)(a1 + 8) == v6)
  {
    if (v6) {
      memmove(*(void **)(a1 + 16), *(const void **)(a2 + 16), 48 * v6);
    }
    return a1;
  }
  re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) Cannot copy from a FixedArray of a different size", "m_size == other.m_size", "copy", 388);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

void re::HashTable<unsigned long long,re::TextRenderGroupData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v26, 0, 36);
      *(void *)&v26[36] = 0x7FFFFFFFLL;
      re::HashTable<unsigned long long,re::TextRenderGroupData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v26, v4, a2);
      long long v5 = *(_OWORD *)a1;
      *(void *)a1 = *(void *)v26;
      uint64_t v6 = *(void *)(a1 + 16);
      long long v7 = *(_OWORD *)&v26[8];
      *(_OWORD *)uint8x8_t v26 = v5;
      *(void *)&v26[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      long long v9 = *(_OWORD *)&v26[24];
      *(_OWORD *)&v26[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v26[32];
      *(_OWORD *)(a1 + 24) = v9;
      unint64_t v10 = v8;
      if (v8)
      {
        unint64_t v11 = 0;
        int v12 = DWORD1(v9);
        uint64_t v13 = v7;
        long long v14 = (_OWORD *)(v6 + 152);
        do
        {
          if ((*(_DWORD *)(v14 - 9) & 0x80000000) != 0)
          {
            unint64_t v15 = *((void *)v14 - 19);
            unint64_t v16 = *(unsigned int *)(a1 + 24);
            unint64_t v17 = v15 % v16;
            unsigned int v18 = *(_DWORD *)(a1 + 36);
            if (v18 == 0x7FFFFFFF)
            {
              unsigned int v18 = *(_DWORD *)(a1 + 32);
              unsigned int v19 = v18;
              if (v18 == v16)
              {
                re::HashTable<unsigned long long,re::TextRenderGroupData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(a1, (2 * v12));
                unint64_t v17 = v15 % *(unsigned int *)(a1 + 24);
                unsigned int v19 = *(_DWORD *)(a1 + 32);
                uint64_t v13 = *(void *)(a1 + 8);
              }
              *(_DWORD *)(a1 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = v19 + 1;
              uint64_t v20 = *(void *)(a1 + 16);
              int v21 = *(_DWORD *)(v20 + 168 * v18 + 8);
            }
            else
            {
              uint64_t v20 = *(void *)(a1 + 16);
              int v21 = *(_DWORD *)(v20 + 168 * v18 + 8);
              *(_DWORD *)(a1 + 36) = v21 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v20 + 168 * v18 + 8) = v21 | 0x80000000;
            uint64_t v22 = *(void *)(a1 + 16) + 168 * v18;
            *(_DWORD *)(v22 + 8) = *(_DWORD *)(v22 + 8) & 0x80000000 | *(_DWORD *)(v13 + 4 * v17);
            *(void *)(*(void *)(a1 + 16) + 168 * v18) = v15;
            *(void *)(*(void *)(a1 + 16) + 168 * v18 + 16) = *((void *)v14 - 17);
            uint64_t v23 = *(void *)(a1 + 16) + 168 * v18;
            re::FixedArray<re::StringRenderParam>::FixedArray((void *)(v23 + 24), (uint64_t *)v14 - 16);
            re::FixedArray<re::StringRenderParam *>::FixedArray(v23 + 48, (uint64_t)v14 - 104);
            re::DynamicString::DynamicString((re::DynamicString *)(v23 + 72), (const re::DynamicString *)(v14 - 5));
            long long v24 = *(v14 - 3);
            *(_DWORD *)(v23 + 120) = *((_DWORD *)v14 - 8);
            *(_OWORD *)(v23 + 104) = v24;
            re::FixedArray<TextRenderPerGlyphData>::FixedArray(v23 + 128, (uint64_t)v14 - 24);
            *(_OWORD *)(v23 + 152) = *v14;
            uint64_t v13 = *(void *)(a1 + 8);
            *(_DWORD *)(v13 + 4 * v17) = v18;
            int v12 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v12;
          }
          long long v14 = (_OWORD *)((char *)v14 + 168);
          ++v11;
        }
        while (v11 < v10);
      }
      re::HashTable<unsigned long long,re::TextRenderGroupData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v26);
    }
  }
  else
  {
    if (a2) {
      signed int v25 = a2;
    }
    else {
      signed int v25 = 3;
    }
  }
}

void re::HashTable<unsigned long long,re::TextRenderGroupData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  long long v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    long long v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    unsigned int v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      long long v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  int v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + 168 * v10, 16);
  if (v12)
  {
    long long v14 = v12;
    *(void *)(a1 + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &unk_2343655D0, 4 * v10);
    }
    *(void *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,re::TextManager::sortAndFillInstanceUniforms(re::TextRenderGroupData &,TextRenderPerGlyphData *)::$_0 &,re::StringRenderParam **,false>(uint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  unsigned int v8 = (uint64_t *)result;
  while (2)
  {
    uint64_t v96 = a2 - 2;
    uint64_t v98 = a2 - 1;
    uint64_t v95 = a2 - 3;
    signed int v9 = v8;
    uint64_t v103 = a2;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          unsigned int v8 = v9;
          uint64_t v10 = (char *)a2 - (char *)v9;
          uint64_t v11 = a2 - v9;
          if (v5 || !v4)
          {
            switch(v11)
            {
              case 0:
              case 1:
                return result;
              case 2:
                uint64_t v41 = *(a2 - 1);
                uint64_t v42 = *v8;
                uint64_t result = strcmp(*(const char **)(v41 + 8), *(const char **)(*v8 + 8));
                if ((result & 0x80000000) != 0)
                {
                  *unsigned int v8 = v41;
                  *(a2 - 1) = v42;
                }
                break;
              case 3:
                uint64_t result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::TextManager::sortAndFillInstanceUniforms(re::TextRenderGroupData &,TextRenderPerGlyphData *)::$_0 &,re::StringRenderParam **>(v8, v8 + 1, v98);
                break;
              case 4:
                uint64_t result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::TextManager::sortAndFillInstanceUniforms(re::TextRenderGroupData &,TextRenderPerGlyphData *)::$_0 &,re::StringRenderParam **>(v8, v8 + 1, v8 + 2, v98);
                break;
              case 5:
                long long v43 = v8 + 2;
                long long v44 = v8 + 3;
                std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::TextManager::sortAndFillInstanceUniforms(re::TextRenderGroupData &,TextRenderPerGlyphData *)::$_0 &,re::StringRenderParam **>(v8, v8 + 1, v8 + 2, v8 + 3);
                uint64_t v45 = *(a2 - 1);
                uint64_t v46 = v8[3];
                uint64_t result = strcmp(*(const char **)(v45 + 8), *(const char **)(v46 + 8));
                if ((result & 0x80000000) != 0)
                {
                  *long long v44 = v45;
                  *(a2 - 1) = v46;
                  uint64_t v47 = *v44;
                  uint64_t v48 = *v43;
                  uint64_t result = strcmp(*(const char **)(*v44 + 8), *(const char **)(*v43 + 8));
                  if ((result & 0x80000000) != 0)
                  {
                    *long long v43 = v47;
                    *long long v44 = v48;
                    uint64_t v49 = v8[1];
                    uint64_t result = strcmp(*(const char **)(v47 + 8), *(const char **)(v49 + 8));
                    if ((result & 0x80000000) != 0)
                    {
                      v8[1] = v47;
                      uint64_t v8[2] = v49;
                      uint64_t v50 = *v8;
                      uint64_t result = strcmp(*(const char **)(v47 + 8), *(const char **)(*v8 + 8));
                      if ((result & 0x80000000) != 0)
                      {
                        *unsigned int v8 = v47;
                        v8[1] = v50;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v10 <= 191)
          {
            uint64_t v51 = v8 + 1;
            BOOL v53 = v8 == a2 || v51 == a2;
            if (a4)
            {
              if (!v53)
              {
                uint64_t v54 = 0;
                int v55 = v8;
                do
                {
                  uint64_t v57 = *v55;
                  uint64_t v56 = v55[1];
                  int v55 = v51;
                  uint64_t result = strcmp(*(const char **)(v56 + 8), *(const char **)(v57 + 8));
                  if ((result & 0x80000000) != 0)
                  {
                    uint64_t v58 = v54;
                    while (1)
                    {
                      *(uint64_t *)((char *)v8 + v58 + 8) = v57;
                      if (!v58) {
                        break;
                      }
                      uint64_t v57 = *(uint64_t *)((char *)v8 + v58 - 8);
                      uint64_t result = strcmp(*(const char **)(v56 + 8), *(const char **)(v57 + 8));
                      v58 -= 8;
                      if ((result & 0x80000000) == 0)
                      {
                        long long v59 = (uint64_t *)((char *)v8 + v58 + 8);
                        goto LABEL_85;
                      }
                    }
                    long long v59 = v8;
LABEL_85:
                    *long long v59 = v56;
                  }
                  uint64_t v51 = v55 + 1;
                  v54 += 8;
                }
                while (v55 + 1 != a2);
              }
            }
            else if (!v53)
            {
              do
              {
                uint64_t v93 = *v8;
                uint64_t v92 = v8[1];
                unsigned int v8 = v51;
                uint64_t result = strcmp(*(const char **)(v92 + 8), *(const char **)(v93 + 8));
                if ((result & 0x80000000) != 0)
                {
                  uint64_t v94 = v8;
                  do
                  {
                    *uint64_t v94 = v93;
                    uint64_t v93 = *(v94 - 2);
                    uint64_t result = strcmp(*(const char **)(v92 + 8), *(const char **)(v93 + 8));
                    --v94;
                  }
                  while ((result & 0x80000000) != 0);
                  *uint64_t v94 = v92;
                }
                uint64_t v51 = v8 + 1;
              }
              while (v8 + 1 != a2);
            }
            return result;
          }
          if (!a3)
          {
            if (v8 != a2)
            {
              int64_t v60 = (unint64_t)(v11 - 2) >> 1;
              int64_t v101 = v60;
              do
              {
                int64_t v61 = v60;
                if (v101 >= v60)
                {
                  uint64_t v62 = (2 * v60) | 1;
                  uint64_t v63 = &v8[v62];
                  uint64_t v64 = *v63;
                  if (2 * v60 + 2 < v11)
                  {
                    uint64_t v65 = v63[1];
                    int v66 = strcmp(*(const char **)(v64 + 8), *(const char **)(v65 + 8));
                    if (v66 < 0) {
                      uint64_t v64 = v65;
                    }
                    a2 = v103;
                    if (v66 < 0)
                    {
                      ++v63;
                      uint64_t v62 = 2 * v61 + 2;
                    }
                  }
                  long long v67 = &v8[v61];
                  uint64_t v68 = *v67;
                  uint64_t result = strcmp(*(const char **)(v64 + 8), *(const char **)(*v67 + 8));
                  if ((result & 0x80000000) == 0)
                  {
                    int64_t v97 = v61;
                    uint64_t v99 = v68;
                    do
                    {
                      uint64_t v69 = v63;
                      *long long v67 = v64;
                      if (v101 < v62) {
                        break;
                      }
                      uint64_t v70 = (2 * v62) | 1;
                      uint64_t v63 = &v8[v70];
                      uint64_t v64 = *v63;
                      if (2 * v62 + 2 < v11)
                      {
                        uint64_t v71 = v63[1];
                        int v72 = strcmp(*(const char **)(v64 + 8), *(const char **)(v71 + 8));
                        if (v72 < 0) {
                          uint64_t v64 = v71;
                        }
                        a2 = v103;
                        if (v72 < 0)
                        {
                          ++v63;
                          uint64_t v70 = 2 * v62 + 2;
                        }
                      }
                      uint64_t result = strcmp(*(const char **)(v64 + 8), *(const char **)(v99 + 8));
                      long long v67 = v69;
                      uint64_t v62 = v70;
                    }
                    while ((result & 0x80000000) == 0);
                    int64_t v61 = v97;
                    *uint64_t v69 = v99;
                  }
                }
                int64_t v60 = v61 - 1;
              }
              while (v61);
              uint64_t v73 = (unint64_t)v10 >> 3;
              do
              {
                uint64_t v74 = 0;
                uint64_t v102 = *v8;
                uint64_t v104 = a2;
                uint64_t v75 = v8;
                do
                {
                  uint64_t v76 = &v75[v74];
                  uint64_t v79 = v76[1];
                  uint64_t v77 = v76 + 1;
                  uint64_t v78 = v79;
                  uint64_t v80 = (2 * v74) | 1;
                  uint64_t v81 = 2 * v74 + 2;
                  if (v81 < v73)
                  {
                    uint64_t v82 = v77[1];
                    uint64_t result = strcmp(*(const char **)(v78 + 8), *(const char **)(v82 + 8));
                    if ((int)result < 0)
                    {
                      uint64_t v78 = v82;
                      ++v77;
                      uint64_t v80 = v81;
                    }
                  }
                  *uint64_t v75 = v78;
                  uint64_t v75 = v77;
                  uint64_t v74 = v80;
                }
                while (v80 <= (uint64_t)((unint64_t)(v73 - 2) >> 1));
                long long v83 = v104 - 1;
                if (v77 == v104 - 1)
                {
                  long long v84 = v104 - 1;
                  *uint64_t v77 = v102;
                }
                else
                {
                  *uint64_t v77 = *v83;
                  long long v84 = v104 - 1;
                  *long long v83 = v102;
                  uint64_t v85 = (char *)v77 - (char *)v8 + 8;
                  if (v85 >= 9)
                  {
                    unint64_t v86 = (((unint64_t)v85 >> 3) - 2) >> 1;
                    uint64_t v87 = &v8[v86];
                    uint64_t v88 = *v87;
                    uint64_t v89 = *v77;
                    uint64_t result = strcmp(*(const char **)(*v87 + 8), *(const char **)(*v77 + 8));
                    if ((result & 0x80000000) != 0)
                    {
                      do
                      {
                        uint64_t v90 = v87;
                        *uint64_t v77 = v88;
                        if (!v86) {
                          break;
                        }
                        unint64_t v86 = (v86 - 1) >> 1;
                        uint64_t v87 = &v8[v86];
                        uint64_t v88 = *v87;
                        uint64_t result = strcmp(*(const char **)(*v87 + 8), *(const char **)(v89 + 8));
                        uint64_t v77 = v90;
                      }
                      while ((result & 0x80000000) != 0);
                      *uint64_t v90 = v89;
                    }
                  }
                }
                BOOL v91 = v73-- <= 2;
                a2 = v84;
              }
              while (!v91);
            }
            return result;
          }
          unint64_t v12 = (unint64_t)v11 >> 1;
          uint64_t v13 = &v8[(unint64_t)v11 >> 1];
          if ((unint64_t)v10 < 0x401)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::TextManager::sortAndFillInstanceUniforms(re::TextRenderGroupData &,TextRenderPerGlyphData *)::$_0 &,re::StringRenderParam **>(v13, v8, v98);
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::TextManager::sortAndFillInstanceUniforms(re::TextRenderGroupData &,TextRenderPerGlyphData *)::$_0 &,re::StringRenderParam **>(v8, v13, v98);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::TextManager::sortAndFillInstanceUniforms(re::TextRenderGroupData &,TextRenderPerGlyphData *)::$_0 &,re::StringRenderParam **>(v8 + 1, v13 - 1, v96);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::TextManager::sortAndFillInstanceUniforms(re::TextRenderGroupData &,TextRenderPerGlyphData *)::$_0 &,re::StringRenderParam **>(v8 + 2, &v8[v12 + 1], v95);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::TextManager::sortAndFillInstanceUniforms(re::TextRenderGroupData &,TextRenderPerGlyphData *)::$_0 &,re::StringRenderParam **>(v13 - 1, v13, &v8[v12 + 1]);
            uint64_t v14 = *v8;
            *unsigned int v8 = *v13;
            *uint64_t v13 = v14;
          }
          --a3;
          uint64_t v15 = *v8;
          if (a4) {
            break;
          }
          unint64_t v16 = *(const char **)(v15 + 8);
          if (strcmp(*(const char **)(*(v8 - 1) + 8), v16) < 0) {
            goto LABEL_13;
          }
          uint64_t result = strcmp(v16, *(const char **)(*v98 + 8));
          if ((result & 0x80000000) != 0)
          {
            signed int v9 = v8;
            do
            {
              uint64_t v31 = v9[1];
              ++v9;
              uint64_t result = strcmp(v16, *(const char **)(v31 + 8));
            }
            while ((result & 0x80000000) == 0);
          }
          else
          {
            uint64_t v32 = v8 + 1;
            do
            {
              signed int v9 = v32;
              if (v32 >= a2) {
                break;
              }
              ++v32;
              uint64_t result = strcmp(v16, *(const char **)(*v9 + 8));
            }
            while ((result & 0x80000000) == 0);
          }
          unint64_t v33 = a2;
          if (v9 < a2)
          {
            unint64_t v33 = a2;
            do
            {
              uint64_t v34 = *--v33;
              uint64_t result = strcmp(v16, *(const char **)(v34 + 8));
            }
            while ((result & 0x80000000) != 0);
          }
          if (v9 < v33)
          {
            uint64_t v35 = *v9;
            uint64_t v36 = *v33;
            do
            {
              *signed int v9 = v36;
              *unint64_t v33 = v35;
              uint64_t v37 = *(const char **)(v15 + 8);
              do
              {
                uint64_t v38 = v9[1];
                ++v9;
                uint64_t v35 = v38;
              }
              while ((strcmp(v37, *(const char **)(v38 + 8)) & 0x80000000) == 0);
              do
              {
                uint64_t v39 = *--v33;
                uint64_t v36 = v39;
                uint64_t result = strcmp(v37, *(const char **)(v39 + 8));
              }
              while ((result & 0x80000000) != 0);
            }
            while (v9 < v33);
          }
          uint64_t v40 = v9 - 1;
          BOOL v4 = v9 - 1 >= v8;
          BOOL v5 = v9 - 1 == v8;
          if (v9 - 1 != v8) {
            *unsigned int v8 = *v40;
          }
          a4 = 0;
          *uint64_t v40 = v15;
          a2 = v103;
        }
        unint64_t v16 = *(const char **)(v15 + 8);
LABEL_13:
        uint64_t v17 = 0;
        do
          uint64_t v18 = v8[++v17];
        while (strcmp(*(const char **)(v18 + 8), v16) < 0);
        unsigned int v19 = &v8[v17];
        uint64_t v20 = a2;
        if (v17 == 1)
        {
          uint64_t v20 = a2;
          do
          {
            if (v19 >= v20) {
              break;
            }
            uint64_t v22 = *--v20;
          }
          while ((strcmp(*(const char **)(v22 + 8), v16) & 0x80000000) == 0);
        }
        else
        {
          do
            uint64_t v21 = *--v20;
          while ((strcmp(*(const char **)(v21 + 8), v16) & 0x80000000) == 0);
        }
        if (v19 >= v20)
        {
          unint64_t v29 = v19 - 1;
        }
        else
        {
          uint64_t v23 = *v20;
          long long v24 = &v8[v17];
          signed int v25 = v20;
          do
          {
            *long long v24 = v23;
            *signed int v25 = v18;
            uint8x8_t v26 = *(const char **)(v15 + 8);
            do
            {
              uint64_t v27 = v24[1];
              ++v24;
              uint64_t v18 = v27;
            }
            while (strcmp(*(const char **)(v27 + 8), v26) < 0);
            do
            {
              uint64_t v28 = *--v25;
              uint64_t v23 = v28;
            }
            while ((strcmp(*(const char **)(v28 + 8), v26) & 0x80000000) == 0);
          }
          while (v24 < v25);
          unint64_t v29 = v24 - 1;
          a2 = v103;
        }
        if (v29 != v8) {
          *unsigned int v8 = *v29;
        }
        *unint64_t v29 = v15;
        if (v19 >= v20) {
          break;
        }
LABEL_34:
        uint64_t result = std::__introsort<std::_ClassicAlgPolicy,re::TextManager::sortAndFillInstanceUniforms(re::TextRenderGroupData &,TextRenderPerGlyphData *)::$_0 &,re::StringRenderParam **,false>(v8, v29, a3, a4 & 1);
        a4 = 0;
        signed int v9 = v29 + 1;
      }
      BOOL v30 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::TextManager::sortAndFillInstanceUniforms(re::TextRenderGroupData &,TextRenderPerGlyphData *)::$_0 &,re::StringRenderParam **>(v8, v29);
      signed int v9 = v29 + 1;
      uint64_t result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::TextManager::sortAndFillInstanceUniforms(re::TextRenderGroupData &,TextRenderPerGlyphData *)::$_0 &,re::StringRenderParam **>(v29 + 1, a2);
      if (result) {
        break;
      }
      if (!v30) {
        goto LABEL_34;
      }
    }
    a2 = v29;
    if (!v30) {
      continue;
    }
    return result;
  }
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::TextManager::sortAndFillInstanceUniforms(re::TextRenderGroupData &,TextRenderPerGlyphData *)::$_0 &,re::StringRenderParam **>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = *a1;
  unsigned int v8 = *(const char **)(*a2 + 8);
  int v9 = strcmp(v8, *(const char **)(*a1 + 8));
  uint64_t v10 = *a3;
  uint64_t result = strcmp(*(const char **)(*a3 + 8), v8);
  if (v9 < 0)
  {
    if ((result & 0x80000000) != 0)
    {
      *a1 = v10;
    }
    else
    {
      *a1 = v6;
      *a2 = v7;
      uint64_t v14 = *a3;
      uint64_t result = strcmp(*(const char **)(*a3 + 8), *(const char **)(v7 + 8));
      if ((result & 0x80000000) == 0) {
        return result;
      }
      *a2 = v14;
    }
    *a3 = v7;
  }
  else if ((result & 0x80000000) != 0)
  {
    *a2 = v10;
    *a3 = v6;
    uint64_t v12 = *a2;
    uint64_t v13 = *a1;
    uint64_t result = strcmp(*(const char **)(*a2 + 8), *(const char **)(*a1 + 8));
    if ((result & 0x80000000) != 0)
    {
      *a1 = v12;
      *a2 = v13;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::TextManager::sortAndFillInstanceUniforms(re::TextRenderGroupData &,TextRenderPerGlyphData *)::$_0 &,re::StringRenderParam **>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = *(a2 - 1);
      uint64_t v7 = *a1;
      if (strcmp(*(const char **)(v6 + 8), *(const char **)(*a1 + 8)) < 0)
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::TextManager::sortAndFillInstanceUniforms(re::TextRenderGroupData &,TextRenderPerGlyphData *)::$_0 &,re::StringRenderParam **>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::TextManager::sortAndFillInstanceUniforms(re::TextRenderGroupData &,TextRenderPerGlyphData *)::$_0 &,re::StringRenderParam **>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      uint64_t v18 = a1 + 2;
      unsigned int v19 = a1 + 3;
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::TextManager::sortAndFillInstanceUniforms(re::TextRenderGroupData &,TextRenderPerGlyphData *)::$_0 &,re::StringRenderParam **>(a1, a1 + 1, a1 + 2, a1 + 3);
      uint64_t v20 = *(a2 - 1);
      uint64_t v21 = a1[3];
      if (strcmp(*(const char **)(v20 + 8), *(const char **)(v21 + 8)) < 0)
      {
        *unsigned int v19 = v20;
        *(a2 - 1) = v21;
        uint64_t v22 = *v19;
        uint64_t v23 = *v18;
        if (strcmp(*(const char **)(*v19 + 8), *(const char **)(*v18 + 8)) < 0)
        {
          *uint64_t v18 = v22;
          *unsigned int v19 = v23;
          uint64_t v24 = a1[1];
          if (strcmp(*(const char **)(v22 + 8), *(const char **)(v24 + 8)) < 0)
          {
            a1[1] = v22;
            a1[2] = v24;
            uint64_t v25 = *a1;
            if (strcmp(*(const char **)(v22 + 8), *(const char **)(*a1 + 8)) < 0)
            {
              *a1 = v22;
              a1[1] = v25;
            }
          }
        }
      }
      return 1;
    default:
      unsigned int v8 = a1 + 2;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::TextManager::sortAndFillInstanceUniforms(re::TextRenderGroupData &,TextRenderPerGlyphData *)::$_0 &,re::StringRenderParam **>(a1, a1 + 1, a1 + 2);
      int v9 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v10 = 0;
      uint64_t v11 = 24;
      break;
  }
  while (1)
  {
    uint64_t v12 = *v9;
    uint64_t v13 = *v8;
    if (strcmp(*(const char **)(*v9 + 8), *(const char **)(v13 + 8)) < 0)
    {
      uint64_t v14 = v11;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v14) = v13;
        uint64_t v15 = v14 - 8;
        if (v14 == 8) {
          break;
        }
        uint64_t v13 = *(uint64_t *)((char *)a1 + v14 - 16);
        int v16 = strcmp(*(const char **)(v12 + 8), *(const char **)(v13 + 8));
        uint64_t v14 = v15;
        if ((v16 & 0x80000000) == 0)
        {
          uint64_t v17 = (uint64_t *)((char *)a1 + v15);
          goto LABEL_13;
        }
      }
      uint64_t v17 = a1;
LABEL_13:
      *uint64_t v17 = v12;
      if (++v10 == 8) {
        return v9 + 1 == a2;
      }
    }
    unsigned int v8 = v9;
    v11 += 8;
    if (++v9 == a2) {
      return 1;
    }
  }
}

uint64_t std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::TextManager::sortAndFillInstanceUniforms(re::TextRenderGroupData &,TextRenderPerGlyphData *)::$_0 &,re::StringRenderParam **>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::TextManager::sortAndFillInstanceUniforms(re::TextRenderGroupData &,TextRenderPerGlyphData *)::$_0 &,re::StringRenderParam **>(a1, a2, a3);
  uint64_t v8 = *a4;
  uint64_t v9 = *a3;
  uint64_t result = strcmp(*(const char **)(*a4 + 8), *(const char **)(*a3 + 8));
  if ((result & 0x80000000) != 0)
  {
    *a3 = v8;
    *a4 = v9;
    uint64_t v11 = *a3;
    uint64_t v12 = *a2;
    uint64_t result = strcmp(*(const char **)(*a3 + 8), *(const char **)(*a2 + 8));
    if ((result & 0x80000000) != 0)
    {
      *a2 = v11;
      *a3 = v12;
      uint64_t v13 = *a2;
      uint64_t v14 = *a1;
      uint64_t result = strcmp(*(const char **)(*a2 + 8), *(const char **)(*a1 + 8));
      if ((result & 0x80000000) != 0)
      {
        *a1 = v13;
        *a2 = v14;
      }
    }
  }
  return result;
}

void re::uploadDataToTexture(id *a1, void **a2, uint64_t *a3, id *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (objc_msgSend(*a4, sel_storageMode) == (id)2)
  {
    id v17 = objc_msgSend(*a1, sel_newBufferWithBytes_length_options_, a8, a9, 0);
    uint64_t v27 = v17;
    id v18 = *a4;
    long long v23 = 0uLL;
    uint64_t v24 = 0;
    re::mtl::BlitCommandEncoder::copyFromBufferToTexture(a2, &v27, a3, (long long *)a5, (uint64_t)v18, a7, a6, &v23);
    if (v17) {
  }
    }
  else
  {
    id v19 = *a4;
    uint64_t v20 = *(void *)(a5 + 16);
    uint64_t v21 = a3[1];
    uint64_t v22 = a3[2];
    long long v23 = 0uLL;
    uint64_t v24 = 0;
    long long v25 = *(_OWORD *)a5;
    uint64_t v26 = v20;
    objc_msgSend(v19, sel_replaceRegion_mipmapLevel_slice_withBytes_bytesPerRow_bytesPerImage_, &v23, a6, a7, a8, v21, v22);
  }
}

void re::makeTextureColor1D(id *a1, id *a2, id *a3, void **a4, float *a5)
{
  id v10 = objc_msgSend(objc_msgSend(MEMORY[0x263F12A50], sel_alloc), sel_init);
  objc_msgSend(v10, sel_setStorageMode_, objc_msgSend(*a3, sel_storageMode));
  objc_msgSend(v10, sel_setTextureType_, 0);
  objc_msgSend(v10, sel_setWidth_, 1);
  objc_msgSend(v10, sel_setPixelFormat_, 70);
  objc_msgSend(v10, sel_setStorageMode_, objc_msgSend(*a3, sel_storageMode));
  id v11 = objc_msgSend(*a3, sel_newTextureWithDescriptor_, v10);
  uint64_t v12 = (int)(float)(*a5 * 255.0);
  uint64_t v13 = (int)(float)(a5[1] * 255.0);
  float v14 = a5[3];
  uint64_t v15 = (int)(float)(a5[2] * 255.0);
  *a1 = v11;
  uint64_t v16 = (int)(float)(v14 * 255.0);
  int v22 = (v13 << 8) | (v15 << 16) | (v16 << 24) | v12;
  long long v20 = xmmword_23437DC70;
  uint64_t v21 = 4;
  int64x2_t v18 = vdupq_n_s64(1uLL);
  uint64_t v19 = 1;
  re::uploadDataToTexture(a2, a4, (uint64_t *)&v20, a1, (uint64_t)&v18, 0, 0, (uint64_t)&v22, 4);
  re::DynamicString::format((re::DynamicString *)"Color1D-(%i,%i,%i,%i)", (re::DynamicString *)&v18, v12, v13, v15, v16);
  if (v18.i8[8]) {
    id v17 = (__int8 *)v19;
  }
  else {
    id v17 = &v18.i8[9];
  }
  objc_msgSend(v11, sel_setLabel_, objc_msgSend(NSString, sel_stringWithCString_encoding_, v17, 4));
  if (v18.i64[0] && (v18.i8[8] & 1) != 0) {
    (*(void (**)(void))(*(void *)v18.i64[0] + 40))();
  }
  if (v10) {
}
  }

void re::makeTextureColor1x1(id *a1, id *a2, id *a3, void **a4, float *a5, char a6, unsigned int a7)
{
  if (a6) {
    uint64_t v11 = a7;
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v30 = 70;
  uint64_t v31 = v11;
  id v12 = objc_msgSend(*a3, sel_storageMode);
  id v29 = v12;
  uint64_t TextureCompressionType = re::mtl::getTextureCompressionType(a2, &v29, &v30, &v31);
  id v14 = objc_msgSend(objc_msgSend(MEMORY[0x263F12A50], sel_alloc), sel_init);
  objc_msgSend(v14, sel_setStorageMode_, v12);
  if ((objc_msgSend(v14, sel_respondsToSelector_, sel_setCompressionType_) & 1) != 0
    || objc_msgSend(v14, sel_methodSignatureForSelector_, sel_setCompressionType_))
  {
    objc_msgSend(v14, sel_setCompressionType_, TextureCompressionType);
  }
  objc_msgSend(v14, sel_setWidth_, 1);
  objc_msgSend(v14, sel_setHeight_, 1);
  objc_msgSend(v14, sel_setPixelFormat_, 70);
  objc_msgSend(v14, sel_setUsage_, v11);
  objc_msgSend(v14, sel_setStorageMode_, objc_msgSend(*a3, sel_storageMode));
  id v15 = objc_msgSend(*a3, sel_newTextureWithDescriptor_, v14);
  uint64_t v16 = (int)(float)(*a5 * 255.0);
  uint64_t v17 = (int)(float)(a5[1] * 255.0);
  float v18 = a5[3];
  uint64_t v19 = (int)(float)(a5[2] * 255.0);
  *a1 = v15;
  uint64_t v20 = (int)(float)(v18 * 255.0);
  int v28 = (v17 << 8) | (v19 << 16) | (v20 << 24) | v16;
  long long v26 = xmmword_23437DC70;
  uint64_t v27 = 4;
  int64x2_t v24 = vdupq_n_s64(1uLL);
  uint64_t v25 = 1;
  re::uploadDataToTexture(a2, a4, (uint64_t *)&v26, a1, (uint64_t)&v24, 0, 0, (uint64_t)&v28, 4);
  uint64_t v21 = "_writable";
  if ((v11 & 2) == 0) {
    uint64_t v21 = "";
  }
  re::DynamicString::format((re::DynamicString *)"Color1x1-(%i,%i,%i,%i)%s", (re::DynamicString *)&v24, v16, v17, v19, v20, v21);
  if (v24.i8[8]) {
    int v22 = (__int8 *)v25;
  }
  else {
    int v22 = &v24.i8[9];
  }
  objc_msgSend(v15, sel_setLabel_, objc_msgSend(NSString, sel_stringWithCString_encoding_, v22, 4));
  if (v24.i64[0] && (v24.i8[8] & 1) != 0) {
    (*(void (**)(void))(*(void *)v24.i64[0] + 40))();
  }
  if (v14) {
}
  }

void re::makeTextureColor1x1x1(id *a1, id *a2, id *a3, void **a4, float *a5)
{
  uint64_t v26 = 70;
  id v10 = objc_msgSend(*a3, sel_storageMode);
  id v25 = v10;
  v20.i64[0] = 0;
  uint64_t TextureCompressionType = re::mtl::getTextureCompressionType(a2, &v25, &v26, &v20);
  id v12 = objc_msgSend(objc_msgSend(MEMORY[0x263F12A50], sel_alloc), sel_init);
  objc_msgSend(v12, sel_setStorageMode_, v10);
  if ((objc_msgSend(v12, sel_respondsToSelector_, sel_setCompressionType_) & 1) != 0
    || objc_msgSend(v12, sel_methodSignatureForSelector_, sel_setCompressionType_))
  {
    objc_msgSend(v12, sel_setCompressionType_, TextureCompressionType);
  }
  objc_msgSend(v12, sel_setTextureType_, 7);
  objc_msgSend(v12, sel_setWidth_, 1);
  objc_msgSend(v12, sel_setHeight_, 1);
  objc_msgSend(v12, sel_setDepth_, 1);
  objc_msgSend(v12, sel_setPixelFormat_, 70);
  objc_msgSend(v12, sel_setStorageMode_, objc_msgSend(*a3, sel_storageMode));
  id v13 = objc_msgSend(*a3, sel_newTextureWithDescriptor_, v12);
  uint64_t v14 = (int)(float)(*a5 * 255.0);
  uint64_t v15 = (int)(float)(a5[1] * 255.0);
  float v16 = a5[3];
  uint64_t v17 = (int)(float)(a5[2] * 255.0);
  *a1 = v13;
  uint64_t v18 = (int)(float)(v16 * 255.0);
  int v24 = (v15 << 8) | (v17 << 16) | (v18 << 24) | v14;
  long long v22 = xmmword_23437DC70;
  uint64_t v23 = 4;
  int64x2_t v20 = vdupq_n_s64(1uLL);
  uint64_t v21 = 1;
  re::uploadDataToTexture(a2, a4, (uint64_t *)&v22, a1, (uint64_t)&v20, 0, 0, (uint64_t)&v24, 4);
  re::DynamicString::format((re::DynamicString *)"Color1x1x1-(%i,%i,%i,%i)", (re::DynamicString *)&v20, v14, v15, v17, v18);
  if (v20.i8[8]) {
    uint64_t v19 = (__int8 *)v21;
  }
  else {
    uint64_t v19 = &v20.i8[9];
  }
  objc_msgSend(v13, sel_setLabel_, objc_msgSend(NSString, sel_stringWithCString_encoding_, v19, 4));
  if (v20.i64[0] && (v20.i8[8] & 1) != 0) {
    (*(void (**)(void))(*(void *)v20.i64[0] + 40))();
  }
  if (v12) {
}
  }

void re::makeTexture2DArrayColor1x1(id *a1, id *a2, id *a3, void **a4, float32x4_t *a5)
{
  v21[1] = *MEMORY[0x263EF8340];
  uint64_t v20 = 115;
  id v10 = objc_msgSend(*a3, sel_storageMode);
  id v19 = v10;
  v15.i64[0] = 0;
  uint64_t TextureCompressionType = re::mtl::getTextureCompressionType(a2, &v19, &v20, &v15);
  id v12 = objc_msgSend(objc_msgSend(MEMORY[0x263F12A50], sel_alloc), sel_init);
  objc_msgSend(v12, sel_setStorageMode_, v10);
  if ((objc_msgSend(v12, sel_respondsToSelector_, sel_setCompressionType_) & 1) != 0
    || objc_msgSend(v12, sel_methodSignatureForSelector_, sel_setCompressionType_))
  {
    objc_msgSend(v12, sel_setCompressionType_, TextureCompressionType);
  }
  objc_msgSend(v12, sel_setTextureType_, 3);
  objc_msgSend(v12, sel_setWidth_, 1);
  objc_msgSend(v12, sel_setHeight_, 1);
  objc_msgSend(v12, sel_setArrayLength_, 1);
  objc_msgSend(v12, sel_setPixelFormat_, 115);
  objc_msgSend(v12, sel_setStorageMode_, objc_msgSend(*a3, sel_storageMode));
  id v13 = objc_msgSend(*a3, sel_newTextureWithDescriptor_, v12);
  *a1 = v13;
  v21[0] = vcvt_f16_f32(*a5);
  long long v17 = xmmword_2343C0850;
  uint64_t v18 = 8;
  int64x2_t v15 = vdupq_n_s64(1uLL);
  uint64_t v16 = 1;
  re::uploadDataToTexture(a2, a4, (uint64_t *)&v17, a1, (uint64_t)&v15, 0, 0, (uint64_t)v21, 8);
  re::DynamicString::format((re::DynamicString *)"Texture2DArray1x1x1-(%f,%f,%f,%f)", (re::DynamicString *)&v15, a5->f32[0], a5->f32[1], a5->f32[2], a5->f32[3]);
  if (v15.i8[8]) {
    uint64_t v14 = (__int8 *)v16;
  }
  else {
    uint64_t v14 = &v15.i8[9];
  }
  objc_msgSend(v13, sel_setLabel_, objc_msgSend(NSString, sel_stringWithCString_encoding_, v14, 4));
  if (v15.i64[0] && (v15.i8[8] & 1) != 0) {
    (*(void (**)(void))(*(void *)v15.i64[0] + 40))();
  }
  if (v12) {
}
  }

void re::makeStockEnvMapColor(id *a1, id *a2, id *a3, void **a4, float32x4_t *a5)
{
  v22[1] = *MEMORY[0x263EF8340];
  uint64_t v21 = 115;
  id v10 = objc_msgSend(*a3, sel_storageMode);
  id v20 = v10;
  v16.i64[0] = 0;
  uint64_t TextureCompressionType = re::mtl::getTextureCompressionType(a2, &v20, &v21, &v16);
  id v12 = objc_msgSend(objc_msgSend(MEMORY[0x263F12A50], sel_alloc), sel_init);
  objc_msgSend(v12, sel_setStorageMode_, v10);
  if ((objc_msgSend(v12, sel_respondsToSelector_, sel_setCompressionType_) & 1) != 0
    || objc_msgSend(v12, sel_methodSignatureForSelector_, sel_setCompressionType_))
  {
    objc_msgSend(v12, sel_setCompressionType_, TextureCompressionType);
  }
  objc_msgSend(v12, sel_setTextureType_, 5);
  objc_msgSend(v12, sel_setWidth_, 1);
  objc_msgSend(v12, sel_setHeight_, 1);
  objc_msgSend(v12, sel_setPixelFormat_, 115);
  objc_msgSend(v12, sel_setStorageMode_, objc_msgSend(*a3, sel_storageMode));
  id v13 = objc_msgSend(*a3, sel_newTextureWithDescriptor_, v12);
  uint64_t v14 = 0;
  *a1 = v13;
  v22[0] = vcvt_f16_f32(*a5);
  long long v18 = xmmword_2343C0850;
  uint64_t v19 = 8;
  do
  {
    int64x2_t v16 = vdupq_n_s64(1uLL);
    uint64_t v17 = 1;
    re::uploadDataToTexture(a2, a4, (uint64_t *)&v18, a1, (uint64_t)&v16, 0, v14++, (uint64_t)v22, 8);
  }
  while (v14 != 6);
  re::DynamicString::format((re::DynamicString *)"EnvMap1x1x6-(%f,%f,%f,%f)", (re::DynamicString *)&v16, a5->f32[0], a5->f32[1], a5->f32[2], a5->f32[3]);
  if (v16.i8[8]) {
    int64x2_t v15 = (__int8 *)v17;
  }
  else {
    int64x2_t v15 = &v16.i8[9];
  }
  objc_msgSend(v13, sel_setLabel_, objc_msgSend(NSString, sel_stringWithCString_encoding_, v15, 4));
  if (v16.i64[0] && (v16.i8[8] & 1) != 0) {
    (*(void (**)(void))(*(void *)v16.i64[0] + 40))();
  }
  if (v12) {
}
  }

void re::TextureManager::~TextureManager(re::TextureManager *this)
{
  re::DynamicArray<re::VirtualEnvironmentProbeSource>::deinit((uint64_t)this + 440);
  re::DynamicArray<NS::SharedPtr<MTL::SamplerState>>::deinit((uint64_t)this + 392);
  if (*((_DWORD *)this + 91))
  {
    double v2 = re::DataArray<re::Texture>::clear((void *)this + 40);
    if (!*((void *)this + 42))
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    unint64_t v3 = (void *)*((void *)this + 44);
    (*(void (**)(void, void, double))(**((void **)this + 40) + 40))(*((void *)this + 40), *v3, v2);
    (*(void (**)(void, void))(**((void **)this + 40) + 40))(*((void *)this + 40), v3[1]);
    re::DynamicArray<unsigned long>::deinit((uint64_t)this + 320);
    *((_DWORD *)this + 91) = 0;
  }
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 320);
  uint64_t v4 = *((void *)this + 33);
  if (v4)
  {
    BOOL v5 = (uint64_t *)((char *)this + 264);
    unint64_t v6 = *((unsigned int *)this + 74);
    if (v6)
    {
      uint64_t v7 = 0;
      for (unint64_t i = 0; i < v6; ++i)
      {
        uint64_t v9 = *((void *)this + 35) + v7;
        int v10 = *(_DWORD *)(v9 + 8);
        if (v10 < 0)
        {
          *(_DWORD *)(v9 + 8) = v10 & 0x7FFFFFFF;
          re::TextureHandle::invalidate((re::TextureHandle *)(v9 + 24));
          unint64_t v6 = *((unsigned int *)this + 74);
        }
        v7 += 40;
      }
      uint64_t v4 = *v5;
    }
    (*(void (**)(uint64_t, void))(*(void *)v4 + 40))(v4, *((void *)this + 34));
    *((_DWORD *)this + 74) = 0;
    *(_OWORD *)BOOL v5 = 0u;
    *(_OWORD *)((char *)this + 280) = 0u;
    *(void *)((char *)this + 300) = 0x7FFFFFFFLL;
  }
  uint64_t v11 = (void *)*((void *)this + 32);
  if (v11)
  {

    *((void *)this + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0;
  }
  re::FixedArray<re::DynamicString>::deinit((void *)this + 29);
  id v12 = (void *)*((void *)this + 27);
  if (v12)
  {

    *((void *)this + 27) = 0;
  }
  id v13 = (void *)*((void *)this + 26);
  if (v13)
  {

    *((void *)this + 26) = 0;
  }
  uint64_t v14 = (void *)*((void *)this + 25);
  if (v14)
  {

    *((void *)this + 25) = 0;
  }
  int64x2_t v15 = (void *)*((void *)this + 24);
  if (v15)
  {

    *((void *)this + 24) = 0;
  }
  int64x2_t v16 = (void *)*((void *)this + 23);
  if (v16)
  {

    *((void *)this + 2re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = 0;
  }
  uint64_t v17 = (void *)*((void *)this + 22);
  if (v17)
  {

    *((void *)this + 22) = 0;
  }
  long long v18 = (void *)*((void *)this + 21);
  if (v18)
  {

    *((void *)this + 21) = 0;
  }
  uint64_t v19 = (void *)*((void *)this + 20);
  if (v19)
  {

    *((void *)this + 20) = 0;
  }
  id v20 = (void *)*((void *)this + 19);
  if (v20)
  {

    *((void *)this + 19) = 0;
  }
  uint64_t v21 = (void *)*((void *)this + 18);
  if (v21)
  {

    *((void *)this + 18) = 0;
  }
  long long v22 = (void *)*((void *)this + 17);
  if (v22)
  {

    *((void *)this + 17) = 0;
  }
  uint64_t v23 = (void *)*((void *)this + 16);
  if (v23)
  {

    *((void *)this + 16) = 0;
  }
  int v24 = (void *)*((void *)this + 15);
  if (v24)
  {

    *((void *)this + 15) = 0;
  }
  id v25 = (void *)*((void *)this + 14);
  if (v25)
  {

    *((void *)this + 14) = 0;
  }
  uint64_t v26 = (void *)*((void *)this + 13);
  if (v26)
  {

    *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = 0;
  }
  uint64_t v27 = (void *)*((void *)this + 12);
  if (v27)
  {

    *((void *)this + 12) = 0;
  }
  int v28 = (void *)*((void *)this + 11);
  if (v28)
  {

    *((void *)this + 11) = 0;
  }
  id v29 = (void *)*((void *)this + 10);
  if (v29)
  {

    *((void *)this + 10) = 0;
  }
  uint64_t v30 = (void *)*((void *)this + 9);
  if (v30)
  {

    *((void *)this + 9) = 0;
  }
  uint64_t v31 = (void *)*((void *)this + 8);
  if (v31)
  {

    *((void *)this + 8) = 0;
  }
  uint64_t v32 = (void *)*((void *)this + 7);
  if (v32)
  {

    *((void *)this + 7) = 0;
  }
  unint64_t v33 = (void *)*((void *)this + 6);
  if (v33)
  {

    *((void *)this + 6) = 0;
  }
  uint64_t v34 = (void *)*((void *)this + 5);
  if (v34)
  {

    *((void *)this + 5) = 0;
  }
  uint64_t v35 = (void *)*((void *)this + 4);
  if (v35)
  {

    *((void *)this + 4) = 0;
  }
  uint64_t v36 = (void *)*((void *)this + 3);
  if (v36)
  {

    *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = 0;
  }
  uint64_t v37 = (void *)*((void *)this + 2);
  if (v37)
  {

    *((void *)this + 2) = 0;
  }
  uint64_t v38 = (void *)*((void *)this + 1);
  if (v38)
  {

    *((void *)this + 1) = 0;
  }
}

BOOL re::TextureManager::init(id *this, id *a2)
{
  v398[1] = *(void **)MEMORY[0x263EF8340];
  uint64_t v4 = re::ObjCObject::operator=(this, a2 + 23);
  unint64_t v5 = (unint64_t)(v4 + 29);
  if (!this[30])
  {
    uint64_t v389 = 0;
    long long v396 = 0u;
    long long v397 = 0u;
    long long v394 = 0u;
    long long v395 = 0u;
    int32x4_t v393 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v390 = 136315906;
    *(void *)&v390[4] = "operator[]";
    *(_WORD *)&v390[12] = 1024;
    *(_DWORD *)&v390[14] = 468;
    *(_WORD *)&v390[18] = 2048;
    *(void *)&v390[20] = 0;
    __int16 v391 = 2048;
    unint64_t v392 = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_479;
  }
  unint64_t v6 = (re::DynamicString *)this[31];
  v393.i64[0] = (uint64_t)"black";
  v393.i64[1] = 5;
  re::DynamicString::operator=(v6, (uint64_t)&v393);
  unint64_t v5 = (unint64_t)this[30];
  if (v5 <= 1)
  {
LABEL_479:
    uint64_t v389 = 0;
    long long v396 = 0u;
    long long v397 = 0u;
    long long v394 = 0u;
    long long v395 = 0u;
    int32x4_t v393 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v390 = 136315906;
    *(void *)&v390[4] = "operator[]";
    *(_WORD *)&v390[12] = 1024;
    *(_DWORD *)&v390[14] = 468;
    *(_WORD *)&v390[18] = 2048;
    *(void *)&v390[20] = 1;
    __int16 v391 = 2048;
    unint64_t v392 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_480;
  }
  uint64_t v7 = (re::DynamicString *)((char *)this[31] + 32);
  v393.i64[0] = (uint64_t)"white";
  v393.i64[1] = 5;
  re::DynamicString::operator=(v7, (uint64_t)&v393);
  unint64_t v5 = (unint64_t)this[30];
  if (v5 <= 2)
  {
LABEL_480:
    uint64_t v389 = 0;
    long long v396 = 0u;
    long long v397 = 0u;
    long long v394 = 0u;
    long long v395 = 0u;
    int32x4_t v393 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v390 = 136315906;
    *(void *)&v390[4] = "operator[]";
    *(_WORD *)&v390[12] = 1024;
    *(_DWORD *)&v390[14] = 468;
    *(_WORD *)&v390[18] = 2048;
    *(void *)&v390[20] = 2;
    __int16 v391 = 2048;
    unint64_t v392 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_481;
  }
  uint64_t v8 = (re::DynamicString *)((char *)this[31] + 64);
  v393.i64[0] = (uint64_t)"gray";
  v393.i64[1] = 4;
  re::DynamicString::operator=(v8, (uint64_t)&v393);
  unint64_t v5 = (unint64_t)this[30];
  if (v5 <= 3)
  {
LABEL_481:
    uint64_t v389 = 0;
    long long v396 = 0u;
    long long v397 = 0u;
    long long v394 = 0u;
    long long v395 = 0u;
    int32x4_t v393 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v390 = 136315906;
    *(void *)&v390[4] = "operator[]";
    *(_WORD *)&v390[12] = 1024;
    *(_DWORD *)&v390[14] = 468;
    *(_WORD *)&v390[18] = 2048;
    *(void *)&v390[20] = 3;
    __int16 v391 = 2048;
    unint64_t v392 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_482;
  }
  uint64_t v9 = (re::DynamicString *)((char *)this[31] + 96);
  v393.i64[0] = (uint64_t)"graySrgb";
  v393.i64[1] = 8;
  re::DynamicString::operator=(v9, (uint64_t)&v393);
  unint64_t v5 = (unint64_t)this[30];
  if (v5 <= 4)
  {
LABEL_482:
    uint64_t v389 = 0;
    long long v396 = 0u;
    long long v397 = 0u;
    long long v394 = 0u;
    long long v395 = 0u;
    int32x4_t v393 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v390 = 136315906;
    *(void *)&v390[4] = "operator[]";
    *(_WORD *)&v390[12] = 1024;
    *(_DWORD *)&v390[14] = 468;
    *(_WORD *)&v390[18] = 2048;
    *(void *)&v390[20] = 4;
    __int16 v391 = 2048;
    unint64_t v392 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_483;
  }
  int v10 = (re::DynamicString *)((char *)this[31] + 128);
  v393.i64[0] = (uint64_t)"lightBlue";
  v393.i64[1] = 9;
  re::DynamicString::operator=(v10, (uint64_t)&v393);
  unint64_t v5 = (unint64_t)this[30];
  if (v5 <= 5)
  {
LABEL_483:
    uint64_t v389 = 0;
    long long v396 = 0u;
    long long v397 = 0u;
    long long v394 = 0u;
    long long v395 = 0u;
    int32x4_t v393 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v390 = 136315906;
    *(void *)&v390[4] = "operator[]";
    *(_WORD *)&v390[12] = 1024;
    *(_DWORD *)&v390[14] = 468;
    *(_WORD *)&v390[18] = 2048;
    *(void *)&v390[20] = 5;
    __int16 v391 = 2048;
    unint64_t v392 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_484;
  }
  uint64_t v11 = (re::DynamicString *)((char *)this[31] + 160);
  v393.i64[0] = (uint64_t)"transparentBlank";
  v393.i64[1] = 16;
  re::DynamicString::operator=(v11, (uint64_t)&v393);
  unint64_t v5 = (unint64_t)this[30];
  if (v5 <= 6)
  {
LABEL_484:
    uint64_t v389 = 0;
    long long v396 = 0u;
    long long v397 = 0u;
    long long v394 = 0u;
    long long v395 = 0u;
    int32x4_t v393 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v390 = 136315906;
    *(void *)&v390[4] = "operator[]";
    *(_WORD *)&v390[12] = 1024;
    *(_DWORD *)&v390[14] = 468;
    *(_WORD *)&v390[18] = 2048;
    *(void *)&v390[20] = 6;
    __int16 v391 = 2048;
    unint64_t v392 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_485;
  }
  id v12 = (re::DynamicString *)((char *)this[31] + 192);
  v393.i64[0] = (uint64_t)"stockEnvMap";
  v393.i64[1] = 11;
  re::DynamicString::operator=(v12, (uint64_t)&v393);
  unint64_t v5 = (unint64_t)this[30];
  if (v5 <= 7)
  {
LABEL_485:
    uint64_t v389 = 0;
    long long v396 = 0u;
    long long v397 = 0u;
    long long v394 = 0u;
    long long v395 = 0u;
    int32x4_t v393 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v390 = 136315906;
    *(void *)&v390[4] = "operator[]";
    *(_WORD *)&v390[12] = 1024;
    *(_DWORD *)&v390[14] = 468;
    *(_WORD *)&v390[18] = 2048;
    *(void *)&v390[20] = 7;
    __int16 v391 = 2048;
    unint64_t v392 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_486;
  }
  id v13 = (re::DynamicString *)((char *)this[31] + 224);
  v393.i64[0] = (uint64_t)"stockEnvMapGraySrgb";
  v393.i64[1] = 19;
  re::DynamicString::operator=(v13, (uint64_t)&v393);
  unint64_t v5 = (unint64_t)this[30];
  if (v5 <= 0x10)
  {
LABEL_486:
    uint64_t v389 = 0;
    long long v396 = 0u;
    long long v397 = 0u;
    long long v394 = 0u;
    long long v395 = 0u;
    int32x4_t v393 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v390 = 136315906;
    *(void *)&v390[4] = "operator[]";
    *(_WORD *)&v390[12] = 1024;
    *(_DWORD *)&v390[14] = 468;
    *(_WORD *)&v390[18] = 2048;
    *(void *)&v390[20] = 16;
    __int16 v391 = 2048;
    unint64_t v392 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_487;
  }
  uint64_t v14 = (re::DynamicString *)((char *)this[31] + 512);
  v393.i64[0] = (uint64_t)"stockEnvMapArray";
  v393.i64[1] = 16;
  re::DynamicString::operator=(v14, (uint64_t)&v393);
  unint64_t v5 = (unint64_t)this[30];
  if (v5 <= 8)
  {
LABEL_487:
    uint64_t v389 = 0;
    long long v396 = 0u;
    long long v397 = 0u;
    long long v394 = 0u;
    long long v395 = 0u;
    int32x4_t v393 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v390 = 136315906;
    *(void *)&v390[4] = "operator[]";
    *(_WORD *)&v390[12] = 1024;
    *(_DWORD *)&v390[14] = 468;
    *(_WORD *)&v390[18] = 2048;
    *(void *)&v390[20] = 8;
    __int16 v391 = 2048;
    unint64_t v392 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_488;
  }
  int64x2_t v15 = (re::DynamicString *)((char *)this[31] + 256);
  v393.i64[0] = (uint64_t)"black3D";
  v393.i64[1] = 7;
  re::DynamicString::operator=(v15, (uint64_t)&v393);
  unint64_t v5 = (unint64_t)this[30];
  if (v5 <= 9)
  {
LABEL_488:
    uint64_t v389 = 0;
    long long v396 = 0u;
    long long v397 = 0u;
    long long v394 = 0u;
    long long v395 = 0u;
    int32x4_t v393 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v390 = 136315906;
    *(void *)&v390[4] = "operator[]";
    *(_WORD *)&v390[12] = 1024;
    *(_DWORD *)&v390[14] = 468;
    *(_WORD *)&v390[18] = 2048;
    *(void *)&v390[20] = 9;
    __int16 v391 = 2048;
    unint64_t v392 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_489;
  }
  int64x2_t v16 = (re::DynamicString *)((char *)this[31] + 288);
  v393.i64[0] = (uint64_t)"white3D";
  v393.i64[1] = 7;
  re::DynamicString::operator=(v16, (uint64_t)&v393);
  unint64_t v5 = (unint64_t)this[30];
  if (v5 <= 0xA)
  {
LABEL_489:
    uint64_t v389 = 0;
    long long v396 = 0u;
    long long v397 = 0u;
    long long v394 = 0u;
    long long v395 = 0u;
    int32x4_t v393 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v390 = 136315906;
    *(void *)&v390[4] = "operator[]";
    *(_WORD *)&v390[12] = 1024;
    *(_DWORD *)&v390[14] = 468;
    *(_WORD *)&v390[18] = 2048;
    *(void *)&v390[20] = 10;
    __int16 v391 = 2048;
    unint64_t v392 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_490;
  }
  uint64_t v17 = (re::DynamicString *)((char *)this[31] + 320);
  v393.i64[0] = (uint64_t)"mipmapGradient";
  v393.i64[1] = 14;
  re::DynamicString::operator=(v17, (uint64_t)&v393);
  unint64_t v5 = (unint64_t)this[30];
  if (v5 <= 0xB)
  {
LABEL_490:
    uint64_t v389 = 0;
    long long v396 = 0u;
    long long v397 = 0u;
    long long v394 = 0u;
    long long v395 = 0u;
    int32x4_t v393 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v390 = 136315906;
    *(void *)&v390[4] = "operator[]";
    *(_WORD *)&v390[12] = 1024;
    *(_DWORD *)&v390[14] = 468;
    *(_WORD *)&v390[18] = 2048;
    *(void *)&v390[20] = 11;
    __int16 v391 = 2048;
    unint64_t v392 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_491;
  }
  long long v18 = (re::DynamicString *)((char *)this[31] + 352);
  v393.i64[0] = (uint64_t)"red";
  v393.i64[1] = 3;
  re::DynamicString::operator=(v18, (uint64_t)&v393);
  unint64_t v5 = (unint64_t)this[30];
  if (v5 <= 0xC)
  {
LABEL_491:
    uint64_t v389 = 0;
    long long v396 = 0u;
    long long v397 = 0u;
    long long v394 = 0u;
    long long v395 = 0u;
    int32x4_t v393 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v390 = 136315906;
    *(void *)&v390[4] = "operator[]";
    *(_WORD *)&v390[12] = 1024;
    *(_DWORD *)&v390[14] = 468;
    *(_WORD *)&v390[18] = 2048;
    *(void *)&v390[20] = 12;
    __int16 v391 = 2048;
    unint64_t v392 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_492;
  }
  uint64_t v19 = (re::DynamicString *)((char *)this[31] + 384);
  v393.i64[0] = (uint64_t)"green";
  v393.i64[1] = 5;
  re::DynamicString::operator=(v19, (uint64_t)&v393);
  unint64_t v5 = (unint64_t)this[30];
  if (v5 <= 0xD)
  {
LABEL_492:
    uint64_t v389 = 0;
    long long v396 = 0u;
    long long v397 = 0u;
    long long v394 = 0u;
    long long v395 = 0u;
    int32x4_t v393 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v390 = 136315906;
    *(void *)&v390[4] = "operator[]";
    *(_WORD *)&v390[12] = 1024;
    *(_DWORD *)&v390[14] = 468;
    *(_WORD *)&v390[18] = 2048;
    *(void *)&v390[20] = 13;
    __int16 v391 = 2048;
    unint64_t v392 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_493;
  }
  id v20 = (re::DynamicString *)((char *)this[31] + 416);
  v393.i64[0] = (uint64_t)"cyan";
  v393.i64[1] = 4;
  re::DynamicString::operator=(v20, (uint64_t)&v393);
  unint64_t v5 = (unint64_t)this[30];
  if (v5 <= 0xE)
  {
LABEL_493:
    uint64_t v389 = 0;
    long long v396 = 0u;
    long long v397 = 0u;
    long long v394 = 0u;
    long long v395 = 0u;
    int32x4_t v393 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v390 = 136315906;
    *(void *)&v390[4] = "operator[]";
    *(_WORD *)&v390[12] = 1024;
    *(_DWORD *)&v390[14] = 468;
    *(_WORD *)&v390[18] = 2048;
    *(void *)&v390[20] = 14;
    __int16 v391 = 2048;
    unint64_t v392 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_494;
  }
  uint64_t v21 = (re::DynamicString *)((char *)this[31] + 448);
  v393.i64[0] = (uint64_t)"blackArray";
  v393.i64[1] = 10;
  re::DynamicString::operator=(v21, (uint64_t)&v393);
  unint64_t v5 = (unint64_t)this[30];
  if (v5 <= 0xF)
  {
LABEL_494:
    uint64_t v389 = 0;
    long long v396 = 0u;
    long long v397 = 0u;
    long long v394 = 0u;
    long long v395 = 0u;
    int32x4_t v393 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v390 = 136315906;
    *(void *)&v390[4] = "operator[]";
    *(_WORD *)&v390[12] = 1024;
    *(_DWORD *)&v390[14] = 468;
    *(_WORD *)&v390[18] = 2048;
    *(void *)&v390[20] = 15;
    __int16 v391 = 2048;
    unint64_t v392 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_495;
  }
  long long v22 = (re::DynamicString *)((char *)this[31] + 480);
  v393.i64[0] = (uint64_t)"transparentBlankArray";
  v393.i64[1] = 21;
  re::DynamicString::operator=(v22, (uint64_t)&v393);
  unint64_t v5 = (unint64_t)this[30];
  if (v5 <= 0x11)
  {
LABEL_495:
    uint64_t v389 = 0;
    long long v396 = 0u;
    long long v397 = 0u;
    long long v394 = 0u;
    long long v395 = 0u;
    int32x4_t v393 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v390 = 136315906;
    *(void *)&v390[4] = "operator[]";
    *(_WORD *)&v390[12] = 1024;
    *(_DWORD *)&v390[14] = 468;
    *(_WORD *)&v390[18] = 2048;
    *(void *)&v390[20] = 17;
    __int16 v391 = 2048;
    unint64_t v392 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_496;
  }
  uint64_t v23 = (re::DynamicString *)((char *)this[31] + 544);
  v393.i64[0] = (uint64_t)"black1D";
  v393.i64[1] = 7;
  re::DynamicString::operator=(v23, (uint64_t)&v393);
  unint64_t v5 = (unint64_t)this[30];
  if (v5 <= 0x12)
  {
LABEL_496:
    uint64_t v389 = 0;
    long long v396 = 0u;
    long long v397 = 0u;
    long long v394 = 0u;
    long long v395 = 0u;
    int32x4_t v393 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v390 = 136315906;
    *(void *)&v390[4] = "operator[]";
    *(_WORD *)&v390[12] = 1024;
    *(_DWORD *)&v390[14] = 468;
    *(_WORD *)&v390[18] = 2048;
    *(void *)&v390[20] = 18;
    __int16 v391 = 2048;
    unint64_t v392 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_497;
  }
  int v24 = (re::DynamicString *)((char *)this[31] + 576);
  v393.i64[0] = (uint64_t)"black1DArray";
  v393.i64[1] = 12;
  re::DynamicString::operator=(v24, (uint64_t)&v393);
  unint64_t v5 = (unint64_t)this[30];
  if (v5 <= 0x13)
  {
LABEL_497:
    uint64_t v389 = 0;
    long long v396 = 0u;
    long long v397 = 0u;
    long long v394 = 0u;
    long long v395 = 0u;
    int32x4_t v393 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v390 = 136315906;
    *(void *)&v390[4] = "operator[]";
    *(_WORD *)&v390[12] = 1024;
    *(_DWORD *)&v390[14] = 468;
    *(_WORD *)&v390[18] = 2048;
    *(void *)&v390[20] = 19;
    __int16 v391 = 2048;
    unint64_t v392 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_498;
  }
  id v25 = (re::DynamicString *)((char *)this[31] + 608);
  v393.i64[0] = (uint64_t)"stockTextureBuffer";
  v393.i64[1] = 18;
  re::DynamicString::operator=(v25, (uint64_t)&v393);
  unint64_t v5 = (unint64_t)this[30];
  if (v5 <= 0x14)
  {
LABEL_498:
    uint64_t v389 = 0;
    long long v396 = 0u;
    long long v397 = 0u;
    long long v394 = 0u;
    long long v395 = 0u;
    int32x4_t v393 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v390 = 136315906;
    *(void *)&v390[4] = "operator[]";
    *(_WORD *)&v390[12] = 1024;
    *(_DWORD *)&v390[14] = 468;
    *(_WORD *)&v390[18] = 2048;
    *(void *)&v390[20] = 20;
    __int16 v391 = 2048;
    unint64_t v392 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_499;
  }
  uint64_t v26 = (re::DynamicString *)((char *)this[31] + 640);
  v393.i64[0] = (uint64_t)"whiteArray";
  v393.i64[1] = 10;
  re::DynamicString::operator=(v26, (uint64_t)&v393);
  unint64_t v5 = (unint64_t)this[30];
  if (v5 <= 0x15)
  {
LABEL_499:
    uint64_t v389 = 0;
    long long v396 = 0u;
    long long v397 = 0u;
    long long v394 = 0u;
    long long v395 = 0u;
    int32x4_t v393 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v390 = 136315906;
    *(void *)&v390[4] = "operator[]";
    *(_WORD *)&v390[12] = 1024;
    *(_DWORD *)&v390[14] = 468;
    *(_WORD *)&v390[18] = 2048;
    *(void *)&v390[20] = 21;
    __int16 v391 = 2048;
    unint64_t v392 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_500;
  }
  uint64_t v27 = (re::DynamicString *)((char *)this[31] + 672);
  v393.i64[0] = (uint64_t)"white1D";
  v393.i64[1] = 7;
  re::DynamicString::operator=(v27, (uint64_t)&v393);
  unint64_t v5 = (unint64_t)this[30];
  if (v5 <= 0x16)
  {
LABEL_500:
    uint64_t v389 = 0;
    long long v396 = 0u;
    long long v397 = 0u;
    long long v394 = 0u;
    long long v395 = 0u;
    int32x4_t v393 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v390 = 136315906;
    *(void *)&v390[4] = "operator[]";
    *(_WORD *)&v390[12] = 1024;
    *(_DWORD *)&v390[14] = 468;
    *(_WORD *)&v390[18] = 2048;
    *(void *)&v390[20] = 22;
    __int16 v391 = 2048;
    unint64_t v392 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_501;
  }
  int v28 = (re::DynamicString *)((char *)this[31] + 704);
  v393.i64[0] = (uint64_t)"missingUITexture";
  v393.i64[1] = 16;
  re::DynamicString::operator=(v28, (uint64_t)&v393);
  unint64_t v5 = (unint64_t)this[30];
  if (v5 <= 0x17)
  {
LABEL_501:
    uint64_t v389 = 0;
    long long v396 = 0u;
    long long v397 = 0u;
    long long v394 = 0u;
    long long v395 = 0u;
    int32x4_t v393 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v390 = 136315906;
    *(void *)&v390[4] = "operator[]";
    *(_WORD *)&v390[12] = 1024;
    *(_DWORD *)&v390[14] = 468;
    *(_WORD *)&v390[18] = 2048;
    *(void *)&v390[20] = 23;
    __int16 v391 = 2048;
    unint64_t v392 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_502;
  }
  id v29 = (re::DynamicString *)((char *)this[31] + 736);
  v393.i64[0] = (uint64_t)"writableWhiteTexture";
  v393.i64[1] = 20;
  re::DynamicString::operator=(v29, (uint64_t)&v393);
  unint64_t v5 = (unint64_t)this[30];
  if (v5 <= 0x18)
  {
LABEL_502:
    uint64_t v389 = 0;
    long long v396 = 0u;
    long long v397 = 0u;
    long long v394 = 0u;
    long long v395 = 0u;
    int32x4_t v393 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v390 = 136315906;
    *(void *)&v390[4] = "operator[]";
    *(_WORD *)&v390[12] = 1024;
    *(_DWORD *)&v390[14] = 468;
    *(_WORD *)&v390[18] = 2048;
    *(void *)&v390[20] = 24;
    __int16 v391 = 2048;
    unint64_t v392 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_503;
  }
  uint64_t v30 = (re::DynamicString *)((char *)this[31] + 768);
  v393.i64[0] = (uint64_t)"grayArray";
  v393.i64[1] = 9;
  re::DynamicString::operator=(v30, (uint64_t)&v393);
  unint64_t v5 = (unint64_t)this[30];
  if (v5 <= 0x19)
  {
LABEL_503:
    uint64_t v389 = 0;
    long long v396 = 0u;
    long long v397 = 0u;
    long long v394 = 0u;
    long long v395 = 0u;
    int32x4_t v393 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v390 = 136315906;
    *(void *)&v390[4] = "operator[]";
    *(_WORD *)&v390[12] = 1024;
    *(_DWORD *)&v390[14] = 468;
    *(_WORD *)&v390[18] = 2048;
    *(void *)&v390[20] = 25;
    __int16 v391 = 2048;
    unint64_t v392 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_504;
  }
  uint64_t v31 = (re::DynamicString *)((char *)this[31] + 800);
  v393.i64[0] = (uint64_t)"graySrgbArray";
  v393.i64[1] = 13;
  re::DynamicString::operator=(v31, (uint64_t)&v393);
  unint64_t v5 = (unint64_t)this[30];
  if (v5 <= 0x1A)
  {
LABEL_504:
    uint64_t v389 = 0;
    long long v396 = 0u;
    long long v397 = 0u;
    long long v394 = 0u;
    long long v395 = 0u;
    int32x4_t v393 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v390 = 136315906;
    *(void *)&v390[4] = "operator[]";
    *(_WORD *)&v390[12] = 1024;
    *(_DWORD *)&v390[14] = 468;
    *(_WORD *)&v390[18] = 2048;
    *(void *)&v390[20] = 26;
    __int16 v391 = 2048;
    unint64_t v392 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_505;
  }
  uint64_t v32 = (re::DynamicString *)((char *)this[31] + 832);
  v393.i64[0] = (uint64_t)"infinity";
  v393.i64[1] = 8;
  re::DynamicString::operator=(v32, (uint64_t)&v393);
  unint64_t v5 = (unint64_t)this[30];
  if (v5 <= 0x1B)
  {
LABEL_505:
    uint64_t v389 = 0;
    long long v396 = 0u;
    long long v397 = 0u;
    long long v394 = 0u;
    long long v395 = 0u;
    int32x4_t v393 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v390 = 136315906;
    *(void *)&v390[4] = "operator[]";
    *(_WORD *)&v390[12] = 1024;
    *(_DWORD *)&v390[14] = 468;
    *(_WORD *)&v390[18] = 2048;
    *(void *)&v390[20] = 27;
    __int16 v391 = 2048;
    unint64_t v392 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_506:
    uint64_t v389 = 0;
    long long v396 = 0u;
    long long v397 = 0u;
    long long v394 = 0u;
    long long v395 = 0u;
    int32x4_t v393 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v390 = 136315906;
    *(void *)&v390[4] = "operator[]";
    *(_WORD *)&v390[12] = 1024;
    *(_DWORD *)&v390[14] = 468;
    *(_WORD *)&v390[18] = 2048;
    *(void *)&v390[20] = 0;
    __int16 v391 = 2048;
    unint64_t v392 = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_507;
  }
  unint64_t v33 = (re::DynamicString *)((char *)this[31] + 864);
  v393.i64[0] = (uint64_t)"infinityArray";
  v393.i64[1] = 13;
  re::DynamicString::operator=(v33, (uint64_t)&v393);
  id v34 = objc_msgSend(objc_msgSend(MEMORY[0x263F128F0], sel_alloc), sel_init);
  objc_msgSend(v34, sel_setSize_, 0x100000);
  objc_msgSend(v34, sel_setHazardTrackingMode_, 1);
  objc_msgSend(v34, sel_setStorageMode_, 0);
  v387 = 0;
  id v354 = v34;
  v393.i64[0] = (uint64_t)objc_msgSend(*this, sel_newHeapWithDescriptor_, v34);
  uint64_t v35 = this + 1;
  NS::SharedPtr<MTL::Texture>::operator=(this + 1, (void **)&v393);
  if (v393.i64[0]) {

  }
  int32x4_t v393 = (int32x4_t)xmmword_23435FBB0;
  re::makeTextureColor1x1((id *)v390, this, this + 1, &v387, (float *)v393.i32, 0, v36);
  NS::SharedPtr<MTL::Texture>::operator=(this + 2, (void **)v390);
  if (*(void *)v390) {

  }
  __asm { FMOV            V0.4S, #1.0 }
  int32x4_t v357 = _Q0;
  int32x4_t v393 = _Q0;
  re::makeTextureColor1x1((id *)v390, this, this + 1, &v387, (float *)v393.i32, 0, v37);
  NS::SharedPtr<MTL::Texture>::operator=(this + 3, (void **)v390);
  if (*(void *)v390) {

  }
  int32x4_t v393 = (int32x4_t)xmmword_2343BFCA0;
  re::makeTextureColor1x1((id *)v390, this, this + 1, &v387, (float *)v393.i32, 0, v43);
  NS::SharedPtr<MTL::Texture>::operator=(this + 4, (void **)v390);
  if (*(void *)v390) {

  }
  int32x4_t v393 = (int32x4_t)xmmword_2343C0860;
  re::makeTextureColor1x1((id *)v390, this, this + 1, &v387, (float *)v393.i32, 0, v44);
  NS::SharedPtr<MTL::Texture>::operator=(this + 5, (void **)v390);
  if (*(void *)v390) {

  }
  int32x4_t v393 = (int32x4_t)xmmword_2343C0870;
  re::makeTextureColor1x1((id *)v390, this, this + 1, &v387, (float *)v393.i32, 0, v45);
  NS::SharedPtr<MTL::Texture>::operator=(this + 6, (void **)v390);
  if (*(void *)v390) {

  }
  int32x4_t v393 = 0uLL;
  re::makeTextureColor1x1((id *)v390, this, this + 1, &v387, (float *)v393.i32, 0, v46);
  NS::SharedPtr<MTL::Texture>::operator=(this + 7, (void **)v390);
  if (*(void *)v390) {

  }
  uint64_t v47 = &selRef_stepFunction_0;
  uint64_t v48 = &selRef_stepFunction_0;
  v355 = a2;
  if (*((unsigned char *)a2 + 305))
  {
    uint64_t v389 = 115;
    id v49 = objc_msgSend(this[1], sel_storageMode);
    id v388 = v49;
    v393.i64[0] = 0;
    uint64_t TextureCompressionType = re::mtl::getTextureCompressionType(this, &v388, &v389, &v393);
    id v51 = objc_msgSend(objc_msgSend(MEMORY[0x263F12A50], sel_alloc), sel_init);
    objc_msgSend(v51, sel_setStorageMode_, v49);
    if ((objc_msgSend(v51, sel_respondsToSelector_, 0x1F728E639uLL) & 1) != 0
      || objc_msgSend(v51, sel_methodSignatureForSelector_, 0x1F728E639uLL))
    {
      objc_msgSend(v51, (SEL)0x1F728E639, TextureCompressionType);
    }
    objc_msgSend(v51, sel_setTextureType_, 6);
    objc_msgSend(v51, sel_setArrayLength_, 1);
    objc_msgSend(v51, sel_setWidth_, 1);
    objc_msgSend(v51, sel_setHeight_, 1);
    objc_msgSend(v51, sel_setPixelFormat_, 115);
    objc_msgSend(v51, sel_setStorageMode_, objc_msgSend(*v35, sel_storageMode));
    id v52 = objc_msgSend(*v35, sel_newTextureWithDescriptor_, v51);
    uint64_t v53 = 0;
    id v386 = v52;
    v398[0] = (void *)0x3C00000000000000;
    *(_OWORD *)v390 = xmmword_2343C0850;
    *(void *)&v390[16] = 8;
    do
    {
      int32x4_t v393 = (int32x4_t)vdupq_n_s64(1uLL);
      *(void *)&long long v394 = 1;
      re::uploadDataToTexture(this, &v387, (uint64_t *)v390, &v386, (uint64_t)&v393, 0, v53++, (uint64_t)v398, 8);
    }
    while (v53 != 6);
    re::DynamicString::format((re::DynamicString *)"CubeArray1x1x6x1-(%f,%f,%f,%f)", (re::DynamicString *)&v393, 0, 0, 0, 0x3FF0000000000000);
    if (v393.i8[8]) {
      uint64_t v54 = (__int8 *)v394;
    }
    else {
      uint64_t v54 = &v393.i8[9];
    }
    objc_msgSend(v52, sel_setLabel_, objc_msgSend(NSString, sel_stringWithCString_encoding_, v54, 4));
    if (v393.i64[0] && (v393.i8[8] & 1) != 0) {
      (*(void (**)(void))(*(void *)v393.i64[0] + 40))();
    }
    uint64_t v47 = &selRef_stepFunction_0;
    uint64_t v48 = &selRef_stepFunction_0;
    if (v51) {
  }
    }
  else
  {
    int32x4_t v393 = (int32x4_t)xmmword_23435FBB0;
    re::makeStockEnvMapColor(&v386, this, this + 1, &v387, (float32x4_t *)&v393);
  }
  NS::SharedPtr<MTL::Texture>::operator=(this + 8, &v386);
  if (v386) {

  }
  int32x4_t v393 = (int32x4_t)xmmword_23435FBB0;
  re::makeTexture2DArrayColor1x1((id *)v390, this, this + 1, &v387, (float32x4_t *)&v393);
  NS::SharedPtr<MTL::Texture>::operator=(this + 9, (void **)v390);
  if (*(void *)v390) {

  }
  int32x4_t v393 = 0uLL;
  re::makeTexture2DArrayColor1x1((id *)v390, this, this + 1, &v387, (float32x4_t *)&v393);
  NS::SharedPtr<MTL::Texture>::operator=(this + 10, (void **)v390);
  if (*(void *)v390) {

  }
  int32x4_t v393 = (int32x4_t)xmmword_23435FBB0;
  re::makeStockEnvMapColor((id *)v390, this, this + 1, &v387, (float32x4_t *)&v393);
  NS::SharedPtr<MTL::Texture>::operator=(this + 11, (void **)v390);
  if (*(void *)v390) {

  }
  int32x4_t v393 = (int32x4_t)xmmword_2343C0860;
  re::makeStockEnvMapColor((id *)v390, this, this + 1, &v387, (float32x4_t *)&v393);
  NS::SharedPtr<MTL::Texture>::operator=(this + 12, (void **)v390);
  if (*(void *)v390) {

  }
  int32x4_t v393 = (int32x4_t)xmmword_23435FBB0;
  re::makeTextureColor1x1x1((id *)v390, this, this + 1, &v387, (float *)v393.i32);
  NS::SharedPtr<MTL::Texture>::operator=(this + 13, (void **)v390);
  if (*(void *)v390) {

  }
  int32x4_t v393 = v357;
  re::makeTextureColor1x1x1((id *)v390, this, this + 1, &v387, (float *)v393.i32);
  NS::SharedPtr<MTL::Texture>::operator=(this + 14, (void **)v390);
  if (*(void *)v390) {

  }
  v356 = this + 7;
  uint64_t v389 = 70;
  id v55 = [this[1] v47[1]];
  id v388 = v55;
  v393.i64[0] = 0;
  uint64_t v56 = re::mtl::getTextureCompressionType(this, &v388, &v389, &v393);
  id v57 = objc_msgSend(objc_msgSend(MEMORY[0x263F12A50], sel_alloc), sel_init);
  objc_msgSend(v57, sel_setStorageMode_, v55);
  if ((objc_msgSend(v57, v48[46], sel_setCompressionType_) & 1) != 0
    || objc_msgSend(v57, sel_methodSignatureForSelector_, sel_setCompressionType_))
  {
    objc_msgSend(v57, sel_setCompressionType_, v56);
  }
  objc_msgSend(v57, sel_setWidth_, 64);
  objc_msgSend(v57, sel_setHeight_, 64);
  objc_msgSend(v57, sel_setPixelFormat_, 70);
  objc_msgSend(v57, sel_setMipmapLevelCount_, 7);
  objc_msgSend(v57, sel_setStorageMode_, objc_msgSend(*v35, v47[1]));
  id v58 = objc_msgSend(*v35, sel_newTextureWithDescriptor_, v57);
  uint64_t v59 = 0;
  v398[0] = v58;
  do
  {
    uint64_t v60 = (1 << v59);
    int64_t v61 = re::globalAllocators((re *)v58);
    uint64_t v62 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v61[2] + 32))(v61[2], v60 << (v59 + 2), 0);
    uint64_t v64 = v62;
    uint64_t v65 = v60 << v59;
    if (v60 << v59)
    {
      v63.i32[0] = dword_2343C0888[v59];
      int16x8_t v66 = (int16x8_t)vmovl_u8(v63);
      long long v67 = (_DWORD *)v62;
      do
      {
        *v67++ = vmovn_s16(v66).u32[0];
        --v65;
      }
      while (v65);
    }
    v393.i64[0] = 0;
    v393.i64[1] = 4 * (1 << v59);
    *(void *)&long long v394 = v60 << (v59 + 2);
    *(void *)v390 = (1 << v59);
    *(void *)&v390[8] = *(void *)v390;
    *(void *)&v390[16] = 1;
    re::uploadDataToTexture(this, &v387, v393.i64, v398, (uint64_t)v390, 6 - v59, 0, v62, v394);
    if (v64)
    {
      uint64_t v68 = re::globalAllocators((re *)v58);
      id v58 = (id)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v68[2] + 40))(v68[2], v64);
    }
    ++v59;
  }
  while (v59 != 7);
  if (v57) {

  }
  NS::SharedPtr<MTL::Texture>::operator=(this + 32, v398);
  if (v398[0]) {

  }
  int32x4_t v393 = (int32x4_t)xmmword_234376D50;
  re::makeTextureColor1x1((id *)v390, this, this + 1, &v387, (float *)v393.i32, 0, v69);
  NS::SharedPtr<MTL::Texture>::operator=(this + 15, (void **)v390);
  if (*(void *)v390) {

  }
  int32x4_t v393 = (int32x4_t)xmmword_234385470;
  re::makeTextureColor1x1((id *)v390, this, this + 1, &v387, (float *)v393.i32, 0, v70);
  NS::SharedPtr<MTL::Texture>::operator=(this + 16, (void **)v390);
  if (*(void *)v390) {

  }
  int32x4_t v393 = (int32x4_t)xmmword_234371EE0;
  re::makeTextureColor1x1((id *)v390, this, this + 1, &v387, (float *)v393.i32, 0, v71);
  NS::SharedPtr<MTL::Texture>::operator=(this + 17, (void **)v390);
  if (*(void *)v390) {

  }
  int32x4_t v393 = (int32x4_t)xmmword_23435FBB0;
  re::makeTextureColor1D((id *)v390, this, this + 1, &v387, (float *)v393.i32);
  NS::SharedPtr<MTL::Texture>::operator=(this + 18, (void **)v390);
  if (*(void *)v390) {

  }
  id v72 = objc_msgSend(objc_msgSend(MEMORY[0x263F12A50], sel_alloc), sel_init);
  objc_msgSend(v72, sel_setStorageMode_, objc_msgSend(this[1], sel_storageMode));
  objc_msgSend(v72, sel_setTextureType_, 1);
  objc_msgSend(v72, sel_setWidth_, 1);
  objc_msgSend(v72, sel_setPixelFormat_, 70);
  objc_msgSend(v72, sel_setStorageMode_, objc_msgSend(this[1], sel_storageMode));
  id v73 = objc_msgSend(this[1], sel_newTextureWithDescriptor_, v72);
  uint64_t v389 = (uint64_t)v73;
  LODWORD(v388) = -16777216;
  *(_OWORD *)v390 = xmmword_23437DC70;
  *(void *)&v390[16] = 4;
  int32x4_t v393 = (int32x4_t)vdupq_n_s64(1uLL);
  *(void *)&long long v394 = 1;
  re::uploadDataToTexture(this, &v387, (uint64_t *)v390, (id *)&v389, (uint64_t)&v393, 0, 0, (uint64_t)&v388, 4);
  re::DynamicString::format((re::DynamicString *)"Color1DArray-(%i,%i,%i,%i)", (re::DynamicString *)&v393, 0, 0, 0, 255);
  if (v393.i8[8]) {
    uint64_t v74 = (__int8 *)v394;
  }
  else {
    uint64_t v74 = &v393.i8[9];
  }
  objc_msgSend(v73, sel_setLabel_, objc_msgSend(NSString, sel_stringWithCString_encoding_, v74, 4));
  if (v393.i64[0] && (v393.i8[8] & 1) != 0) {
    (*(void (**)(void))(*(void *)v393.i64[0] + 40))();
  }
  if (v72) {

  }
  NS::SharedPtr<MTL::Texture>::operator=(this + 19, (void **)&v389);
  if (v389) {

  }
  id v75 = objc_msgSend(objc_msgSend(MEMORY[0x263F12A50], sel_alloc), sel_init);
  objc_msgSend(v75, sel_setStorageMode_, objc_msgSend(this[1], sel_storageMode));
  objc_msgSend(v75, sel_setTextureType_, 9);
  objc_msgSend(v75, sel_setWidth_, 1);
  objc_msgSend(v75, sel_setPixelFormat_, 70);
  objc_msgSend(v75, sel_setStorageMode_, objc_msgSend(this[1], sel_storageMode));
  id v76 = objc_msgSend(this[1], sel_newTextureWithDescriptor_, v75);
  uint64_t v389 = (uint64_t)v76;
  LODWORD(v388) = 0;
  *(_OWORD *)v390 = xmmword_23437DC70;
  *(void *)&v390[16] = 4;
  int32x4_t v393 = (int32x4_t)vdupq_n_s64(1uLL);
  *(void *)&long long v394 = 1;
  re::uploadDataToTexture(this, &v387, (uint64_t *)v390, (id *)&v389, (uint64_t)&v393, 0, 0, (uint64_t)&v388, 4);
  re::DynamicString::format((re::DynamicString *)"TextureBuffer-(%i,%i,%i,%i)", (re::DynamicString *)&v393, 0, 0, 0, 0);
  if (v393.i8[8]) {
    uint64_t v77 = (__int8 *)v394;
  }
  else {
    uint64_t v77 = &v393.i8[9];
  }
  objc_msgSend(v76, sel_setLabel_, objc_msgSend(NSString, sel_stringWithCString_encoding_, v77, 4));
  if (v393.i64[0] && (v393.i8[8] & 1) != 0) {
    (*(void (**)(void))(*(void *)v393.i64[0] + 40))();
  }
  if (v75) {

  }
  NS::SharedPtr<MTL::Texture>::operator=(this + 20, (void **)&v389);
  if (v389) {

  }
  int32x4_t v393 = v357;
  re::makeTexture2DArrayColor1x1((id *)v390, this, this + 1, &v387, (float32x4_t *)&v393);
  NS::SharedPtr<MTL::Texture>::operator=(this + 21, (void **)v390);
  if (*(void *)v390) {

  }
  int32x4_t v393 = v357;
  re::makeTextureColor1D((id *)v390, this, this + 1, &v387, (float *)v393.i32);
  NS::SharedPtr<MTL::Texture>::operator=(this + 22, (void **)v390);
  if (*(void *)v390) {

  }
  int32x4_t v393 = v357;
  re::makeTextureColor1x1((id *)v390, this, this + 1, &v387, (float *)v393.i32, 1, 3u);
  NS::SharedPtr<MTL::Texture>::operator=(this + 23, (void **)v390);
  if (*(void *)v390) {

  }
  int32x4_t v393 = (int32x4_t)xmmword_2343BFCA0;
  re::makeTexture2DArrayColor1x1((id *)v390, this, this + 1, &v387, (float32x4_t *)&v393);
  NS::SharedPtr<MTL::Texture>::operator=(this + 24, (void **)v390);
  if (*(void *)v390) {

  }
  int32x4_t v393 = (int32x4_t)xmmword_2343C0860;
  re::makeTexture2DArrayColor1x1((id *)v390, this, this + 1, &v387, (float32x4_t *)&v393);
  NS::SharedPtr<MTL::Texture>::operator=(this + 25, (void **)v390);
  if (*(void *)v390) {

  }
  uint64_t v389 = 115;
  id v78 = objc_msgSend(this[1], sel_storageMode);
  id v388 = v78;
  v393.i64[0] = 0;
  uint64_t v79 = re::mtl::getTextureCompressionType(this, &v388, &v389, &v393);
  id v80 = objc_msgSend(objc_msgSend(MEMORY[0x263F12A50], sel_alloc), sel_init);
  objc_msgSend(v80, sel_setStorageMode_, v78);
  if ((objc_msgSend(v80, sel_respondsToSelector_, sel_setCompressionType_) & 1) != 0
    || objc_msgSend(v80, sel_methodSignatureForSelector_, sel_setCompressionType_))
  {
    objc_msgSend(v80, sel_setCompressionType_, v79);
  }
  objc_msgSend(v80, sel_setTextureType_, 2);
  objc_msgSend(v80, sel_setWidth_, 1);
  objc_msgSend(v80, sel_setHeight_, 1);
  objc_msgSend(v80, sel_setArrayLength_, 1);
  objc_msgSend(v80, sel_setPixelFormat_, 115);
  objc_msgSend(v80, sel_setStorageMode_, objc_msgSend(this[1], sel_storageMode));
  id v81 = objc_msgSend(this[1], sel_newTextureWithDescriptor_, v80);
  id v386 = v81;
  v398[0] = (void *)0x7C007C007C007C00;
  *(_OWORD *)v390 = xmmword_2343C0850;
  *(void *)&v390[16] = 8;
  int32x4_t v393 = (int32x4_t)vdupq_n_s64(1uLL);
  *(void *)&long long v394 = 1;
  re::uploadDataToTexture(this, &v387, (uint64_t *)v390, &v386, (uint64_t)&v393, 0, 0, (uint64_t)v398, 8);
  re::DynamicString::format((re::DynamicString *)"Color1x1_Float16-(%f,%f,%f,%f)", (re::DynamicString *)&v393, 0x7FF0000000000000, 0x7FF0000000000000, 0x7FF0000000000000, 0x7FF0000000000000);
  if (v393.i8[8]) {
    uint64_t v82 = (__int8 *)v394;
  }
  else {
    uint64_t v82 = &v393.i8[9];
  }
  objc_msgSend(v81, sel_setLabel_, objc_msgSend(NSString, sel_stringWithCString_encoding_, v82, 4));
  if (v393.i64[0] && (v393.i8[8] & 1) != 0) {
    (*(void (**)(void))(*(void *)v393.i64[0] + 40))();
  }
  if (v80) {

  }
  NS::SharedPtr<MTL::Texture>::operator=(this + 26, &v386);
  if (v386) {

  }
  int32x4_t v393 = vdupq_n_s32(0x7F800000u);
  re::makeTexture2DArrayColor1x1((id *)v390, this, this + 1, &v387, (float32x4_t *)&v393);
  NS::SharedPtr<MTL::Texture>::operator=(this + 27, (void **)v390);
  if (*(void *)v390) {

  }
  TextureTableForName = (void *)re::MaterialManager::findOrCreateTextureTableForName((re::MaterialManager *)v355[3], "fallback");
  this[28] = TextureTableForName;
  unint64_t v5 = (unint64_t)(TextureTableForName + 9);
  re::DynamicArray<re::TextureViews<NS::SharedPtr<MTL::Texture>>>::setCapacity((void *)v5, 0x1CuLL);
  ++*(_DWORD *)(v5 + 24);
  if (!this[30]) {
    goto LABEL_506;
  }
  long long v84 = this[28];
  uint64_t v85 = (uint64_t)this[31];
  unint64_t v86 = *(void *)(v85 + 8);
  if (v86)
  {
    uint64_t v88 = *(unsigned char **)(v85 + 16);
    uint64_t v89 = this + 2;
    if (!v88)
    {
      uint64_t v93 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_151;
    }
    LOBYTE(v85) = *v88;
  }
  else
  {
    unint64_t v87 = v86 >> 8;
    uint64_t v88 = (unsigned char *)(v85 + 9);
    LOBYTE(v85) = v87;
    uint64_t v89 = this + 2;
  }
  if ((_BYTE)v85)
  {
    uint64_t v85 = (char)v85;
    char v90 = v88[1];
    if (v90)
    {
      BOOL v91 = v88 + 2;
      do
      {
        uint64_t v85 = 31 * v85 + v90;
        int v92 = *v91++;
        char v90 = v92;
      }
      while (v92);
    }
    uint64_t v93 = v85 & 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v93 = 0;
  }
LABEL_151:
  uint64_t v385 = v93;
  re::TextureTable::setTexture(v84, &v385, v89);
  uint64_t v385 = 0;
  unint64_t v5 = (unint64_t)this[30];
  if (v5 <= 1)
  {
LABEL_507:
    uint64_t v389 = 0;
    long long v396 = 0u;
    long long v397 = 0u;
    long long v394 = 0u;
    long long v395 = 0u;
    int32x4_t v393 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v390 = 136315906;
    *(void *)&v390[4] = "operator[]";
    *(_WORD *)&v390[12] = 1024;
    *(_DWORD *)&v390[14] = 468;
    *(_WORD *)&v390[18] = 2048;
    *(void *)&v390[20] = 1;
    __int16 v391 = 2048;
    unint64_t v392 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_508;
  }
  uint64_t v94 = this[28];
  uint64_t v95 = (uint64_t)this[31];
  unint64_t v96 = *(void *)(v95 + 40);
  if (v96)
  {
    uint64_t v98 = *(unsigned char **)(v95 + 48);
    if (!v98)
    {
      uint64_t v102 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_163;
    }
    LOBYTE(v95) = *v98;
  }
  else
  {
    unint64_t v97 = v96 >> 8;
    uint64_t v98 = (unsigned char *)(v95 + 41);
    LOBYTE(v95) = v97;
  }
  if ((_BYTE)v95)
  {
    uint64_t v95 = (char)v95;
    char v99 = v98[1];
    if (v99)
    {
      uint64_t v100 = v98 + 2;
      do
      {
        uint64_t v95 = 31 * v95 + v99;
        int v101 = *v100++;
        char v99 = v101;
      }
      while (v101);
    }
    uint64_t v102 = v95 & 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v102 = 0;
  }
LABEL_163:
  uint64_t v384 = v102;
  re::TextureTable::setTexture(v94, &v384, this + 3);
  uint64_t v384 = 0;
  unint64_t v5 = (unint64_t)this[30];
  if (v5 <= 2)
  {
LABEL_508:
    uint64_t v389 = 0;
    long long v396 = 0u;
    long long v397 = 0u;
    long long v394 = 0u;
    long long v395 = 0u;
    int32x4_t v393 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v390 = 136315906;
    *(void *)&v390[4] = "operator[]";
    *(_WORD *)&v390[12] = 1024;
    *(_DWORD *)&v390[14] = 468;
    *(_WORD *)&v390[18] = 2048;
    *(void *)&v390[20] = 2;
    __int16 v391 = 2048;
    unint64_t v392 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_509;
  }
  uint64_t v103 = this[28];
  uint64_t v104 = (uint64_t)this[31];
  unint64_t v105 = *(void *)(v104 + 72);
  if (v105)
  {
    uint64_t v107 = *(unsigned char **)(v104 + 80);
    uint64_t v108 = this + 4;
    if (!v107)
    {
      uint64_t v112 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_175;
    }
    LOBYTE(v104) = *v107;
  }
  else
  {
    unint64_t v106 = v105 >> 8;
    uint64_t v107 = (unsigned char *)(v104 + 73);
    LOBYTE(v104) = v106;
    uint64_t v108 = this + 4;
  }
  if ((_BYTE)v104)
  {
    uint64_t v104 = (char)v104;
    char v109 = v107[1];
    if (v109)
    {
      uint64_t v110 = v107 + 2;
      do
      {
        uint64_t v104 = 31 * v104 + v109;
        int v111 = *v110++;
        char v109 = v111;
      }
      while (v111);
    }
    uint64_t v112 = v104 & 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v112 = 0;
  }
LABEL_175:
  uint64_t v383 = v112;
  re::TextureTable::setTexture(v103, &v383, v108);
  uint64_t v383 = 0;
  unint64_t v5 = (unint64_t)this[30];
  if (v5 <= 3)
  {
LABEL_509:
    uint64_t v389 = 0;
    long long v396 = 0u;
    long long v397 = 0u;
    long long v394 = 0u;
    long long v395 = 0u;
    int32x4_t v393 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v390 = 136315906;
    *(void *)&v390[4] = "operator[]";
    *(_WORD *)&v390[12] = 1024;
    *(_DWORD *)&v390[14] = 468;
    *(_WORD *)&v390[18] = 2048;
    *(void *)&v390[20] = 3;
    __int16 v391 = 2048;
    unint64_t v392 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_510;
  }
  float32x4_t v113 = this[28];
  uint64_t v114 = (uint64_t)this[31];
  unint64_t v115 = *(void *)(v114 + 104);
  if (v115)
  {
    long long v117 = *(unsigned char **)(v114 + 112);
    if (!v117)
    {
      uint64_t v121 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_187;
    }
    LOBYTE(v114) = *v117;
  }
  else
  {
    unint64_t v116 = v115 >> 8;
    long long v117 = (unsigned char *)(v114 + 105);
    LOBYTE(v114) = v116;
  }
  if ((_BYTE)v114)
  {
    uint64_t v114 = (char)v114;
    char v118 = v117[1];
    if (v118)
    {
      long long v119 = v117 + 2;
      do
      {
        uint64_t v114 = 31 * v114 + v118;
        int v120 = *v119++;
        char v118 = v120;
      }
      while (v120);
    }
    uint64_t v121 = v114 & 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v121 = 0;
  }
LABEL_187:
  uint64_t v382 = v121;
  re::TextureTable::setTexture(v113, &v382, this + 5);
  uint64_t v382 = 0;
  unint64_t v5 = (unint64_t)this[30];
  if (v5 <= 4)
  {
LABEL_510:
    uint64_t v389 = 0;
    long long v396 = 0u;
    long long v397 = 0u;
    long long v394 = 0u;
    long long v395 = 0u;
    int32x4_t v393 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v390 = 136315906;
    *(void *)&v390[4] = "operator[]";
    *(_WORD *)&v390[12] = 1024;
    *(_DWORD *)&v390[14] = 468;
    *(_WORD *)&v390[18] = 2048;
    *(void *)&v390[20] = 4;
    __int16 v391 = 2048;
    unint64_t v392 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_511;
  }
  long long v122 = this[28];
  uint64_t v123 = (uint64_t)this[31];
  unint64_t v124 = *(void *)(v123 + 136);
  if (v124)
  {
    uint64_t v126 = *(unsigned char **)(v123 + 144);
    __int16 v127 = this + 6;
    if (!v126)
    {
      uint64_t v131 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_199;
    }
    LOBYTE(v12re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = *v126;
  }
  else
  {
    unint64_t v125 = v124 >> 8;
    uint64_t v126 = (unsigned char *)(v123 + 137);
    LOBYTE(v12re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = v125;
    __int16 v127 = this + 6;
  }
  if ((_BYTE)v123)
  {
    uint64_t v123 = (char)v123;
    char v128 = v126[1];
    if (v128)
    {
      long long v129 = v126 + 2;
      do
      {
        uint64_t v123 = 31 * v123 + v128;
        int v130 = *v129++;
        char v128 = v130;
      }
      while (v130);
    }
    uint64_t v131 = v123 & 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v131 = 0;
  }
LABEL_199:
  uint64_t v381 = v131;
  re::TextureTable::setTexture(v122, &v381, v127);
  uint64_t v381 = 0;
  unint64_t v5 = (unint64_t)this[30];
  if (v5 <= 5)
  {
LABEL_511:
    uint64_t v389 = 0;
    long long v396 = 0u;
    long long v397 = 0u;
    long long v394 = 0u;
    long long v395 = 0u;
    int32x4_t v393 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v390 = 136315906;
    *(void *)&v390[4] = "operator[]";
    *(_WORD *)&v390[12] = 1024;
    *(_DWORD *)&v390[14] = 468;
    *(_WORD *)&v390[18] = 2048;
    *(void *)&v390[20] = 5;
    __int16 v391 = 2048;
    unint64_t v392 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_512;
  }
  long long v132 = this[28];
  uint64_t v133 = (uint64_t)this[31];
  unint64_t v134 = *(void *)(v133 + 168);
  if (v134)
  {
    id v136 = *(unsigned char **)(v133 + 176);
    if (!v136)
    {
      uint64_t v140 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_211;
    }
    LOBYTE(v13re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = *v136;
  }
  else
  {
    unint64_t v135 = v134 >> 8;
    id v136 = (unsigned char *)(v133 + 169);
    LOBYTE(v13re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = v135;
  }
  if ((_BYTE)v133)
  {
    uint64_t v133 = (char)v133;
    char v137 = v136[1];
    if (v137)
    {
      uint64_t v138 = v136 + 2;
      do
      {
        uint64_t v133 = 31 * v133 + v137;
        int v139 = *v138++;
        char v137 = v139;
      }
      while (v139);
    }
    uint64_t v140 = v133 & 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v140 = 0;
  }
LABEL_211:
  uint64_t v380 = v140;
  re::TextureTable::setTexture(v132, &v380, v356);
  uint64_t v380 = 0;
  unint64_t v5 = (unint64_t)this[30];
  if (v5 <= 6)
  {
LABEL_512:
    uint64_t v389 = 0;
    long long v396 = 0u;
    long long v397 = 0u;
    long long v394 = 0u;
    long long v395 = 0u;
    int32x4_t v393 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v390 = 136315906;
    *(void *)&v390[4] = "operator[]";
    *(_WORD *)&v390[12] = 1024;
    *(_DWORD *)&v390[14] = 468;
    *(_WORD *)&v390[18] = 2048;
    *(void *)&v390[20] = 6;
    __int16 v391 = 2048;
    unint64_t v392 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_513;
  }
  uint64_t v141 = this[28];
  uint64_t v142 = (uint64_t)this[31];
  unint64_t v143 = *(void *)(v142 + 200);
  if (v143)
  {
    __int16 v145 = *(unsigned char **)(v142 + 208);
    if (!v145)
    {
      uint64_t v149 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_223;
    }
    LOBYTE(v142) = *v145;
  }
  else
  {
    unint64_t v144 = v143 >> 8;
    __int16 v145 = (unsigned char *)(v142 + 201);
    LOBYTE(v142) = v144;
  }
  if ((_BYTE)v142)
  {
    uint64_t v142 = (char)v142;
    char v146 = v145[1];
    if (v146)
    {
      long long v147 = v145 + 2;
      do
      {
        uint64_t v142 = 31 * v142 + v146;
        int v148 = *v147++;
        char v146 = v148;
      }
      while (v148);
    }
    uint64_t v149 = v142 & 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v149 = 0;
  }
LABEL_223:
  uint64_t v379 = v149;
  re::TextureTable::setTexture(v141, &v379, this + 11);
  uint64_t v379 = 0;
  unint64_t v5 = (unint64_t)this[30];
  if (v5 <= 7)
  {
LABEL_513:
    uint64_t v389 = 0;
    long long v396 = 0u;
    long long v397 = 0u;
    long long v394 = 0u;
    long long v395 = 0u;
    int32x4_t v393 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v390 = 136315906;
    *(void *)&v390[4] = "operator[]";
    *(_WORD *)&v390[12] = 1024;
    *(_DWORD *)&v390[14] = 468;
    *(_WORD *)&v390[18] = 2048;
    *(void *)&v390[20] = 7;
    __int16 v391 = 2048;
    unint64_t v392 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_514;
  }
  long long v150 = this[28];
  uint64_t v151 = (uint64_t)this[31];
  unint64_t v152 = *(void *)(v151 + 232);
  if (v152)
  {
    long long v154 = *(unsigned char **)(v151 + 240);
    int v155 = this + 12;
    if (!v154)
    {
      uint64_t v159 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_235;
    }
    LOBYTE(v151) = *v154;
  }
  else
  {
    unint64_t v153 = v152 >> 8;
    long long v154 = (unsigned char *)(v151 + 233);
    LOBYTE(v151) = v153;
    int v155 = this + 12;
  }
  if ((_BYTE)v151)
  {
    uint64_t v151 = (char)v151;
    char v156 = v154[1];
    if (v156)
    {
      long long v157 = v154 + 2;
      do
      {
        uint64_t v151 = 31 * v151 + v156;
        int v158 = *v157++;
        char v156 = v158;
      }
      while (v158);
    }
    uint64_t v159 = v151 & 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v159 = 0;
  }
LABEL_235:
  uint64_t v378 = v159;
  re::TextureTable::setTexture(v150, &v378, v155);
  uint64_t v378 = 0;
  unint64_t v5 = (unint64_t)this[30];
  if (v5 <= 0x10)
  {
LABEL_514:
    uint64_t v389 = 0;
    long long v396 = 0u;
    long long v397 = 0u;
    long long v394 = 0u;
    long long v395 = 0u;
    int32x4_t v393 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v390 = 136315906;
    *(void *)&v390[4] = "operator[]";
    *(_WORD *)&v390[12] = 1024;
    *(_DWORD *)&v390[14] = 468;
    *(_WORD *)&v390[18] = 2048;
    *(void *)&v390[20] = 16;
    __int16 v391 = 2048;
    unint64_t v392 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_515;
  }
  BOOL v160 = this[28];
  uint64_t v161 = (uint64_t)this[31];
  unint64_t v162 = *(void *)(v161 + 520);
  if (v162)
  {
    uint64_t v164 = *(unsigned char **)(v161 + 528);
    uint64_t v165 = this + 8;
    if (!v164)
    {
      uint64_t v169 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_247;
    }
    LOBYTE(v161) = *v164;
  }
  else
  {
    unint64_t v163 = v162 >> 8;
    uint64_t v164 = (unsigned char *)(v161 + 521);
    LOBYTE(v161) = v163;
    uint64_t v165 = this + 8;
  }
  if ((_BYTE)v161)
  {
    uint64_t v161 = (char)v161;
    char v166 = v164[1];
    if (v166)
    {
      uint64_t v167 = v164 + 2;
      do
      {
        uint64_t v161 = 31 * v161 + v166;
        int v168 = *v167++;
        char v166 = v168;
      }
      while (v168);
    }
    uint64_t v169 = v161 & 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v169 = 0;
  }
LABEL_247:
  uint64_t v377 = v169;
  re::TextureTable::setTexture(v160, &v377, v165);
  uint64_t v377 = 0;
  unint64_t v5 = (unint64_t)this[30];
  if (v5 <= 8)
  {
LABEL_515:
    uint64_t v389 = 0;
    long long v396 = 0u;
    long long v397 = 0u;
    long long v394 = 0u;
    long long v395 = 0u;
    int32x4_t v393 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v390 = 136315906;
    *(void *)&v390[4] = "operator[]";
    *(_WORD *)&v390[12] = 1024;
    *(_DWORD *)&v390[14] = 468;
    *(_WORD *)&v390[18] = 2048;
    *(void *)&v390[20] = 8;
    __int16 v391 = 2048;
    unint64_t v392 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_516;
  }
  unsigned int v170 = this[28];
  uint64_t v171 = (uint64_t)this[31];
  unint64_t v172 = *(void *)(v171 + 264);
  if (v172)
  {
    int v174 = *(unsigned char **)(v171 + 272);
    uint64_t v175 = this + 13;
    if (!v174)
    {
      uint64_t v179 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_259;
    }
    LOBYTE(v171) = *v174;
  }
  else
  {
    unint64_t v173 = v172 >> 8;
    int v174 = (unsigned char *)(v171 + 265);
    LOBYTE(v171) = v173;
    uint64_t v175 = this + 13;
  }
  if ((_BYTE)v171)
  {
    uint64_t v171 = (char)v171;
    char v176 = v174[1];
    if (v176)
    {
      uint64_t v177 = v174 + 2;
      do
      {
        uint64_t v171 = 31 * v171 + v176;
        int v178 = *v177++;
        char v176 = v178;
      }
      while (v178);
    }
    uint64_t v179 = v171 & 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v179 = 0;
  }
LABEL_259:
  uint64_t v376 = v179;
  re::TextureTable::setTexture(v170, &v376, v175);
  uint64_t v376 = 0;
  unint64_t v5 = (unint64_t)this[30];
  if (v5 <= 9)
  {
LABEL_516:
    uint64_t v389 = 0;
    long long v396 = 0u;
    long long v397 = 0u;
    long long v394 = 0u;
    long long v395 = 0u;
    int32x4_t v393 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v390 = 136315906;
    *(void *)&v390[4] = "operator[]";
    *(_WORD *)&v390[12] = 1024;
    *(_DWORD *)&v390[14] = 468;
    *(_WORD *)&v390[18] = 2048;
    *(void *)&v390[20] = 9;
    __int16 v391 = 2048;
    unint64_t v392 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_517;
  }
  uint64_t v180 = this[28];
  uint64_t v181 = (uint64_t)this[31];
  unint64_t v182 = *(void *)(v181 + 296);
  if (v182)
  {
    uint64_t v184 = *(unsigned char **)(v181 + 304);
    uint64_t v185 = this + 14;
    if (!v184)
    {
      uint64_t v189 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_271;
    }
    LOBYTE(v181) = *v184;
  }
  else
  {
    unint64_t v183 = v182 >> 8;
    uint64_t v184 = (unsigned char *)(v181 + 297);
    LOBYTE(v181) = v183;
    uint64_t v185 = this + 14;
  }
  if ((_BYTE)v181)
  {
    uint64_t v181 = (char)v181;
    char v186 = v184[1];
    if (v186)
    {
      int v187 = v184 + 2;
      do
      {
        uint64_t v181 = 31 * v181 + v186;
        int v188 = *v187++;
        char v186 = v188;
      }
      while (v188);
    }
    uint64_t v189 = v181 & 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v189 = 0;
  }
LABEL_271:
  uint64_t v375 = v189;
  re::TextureTable::setTexture(v180, &v375, v185);
  uint64_t v375 = 0;
  unint64_t v5 = (unint64_t)this[30];
  if (v5 <= 0xA)
  {
LABEL_517:
    uint64_t v389 = 0;
    long long v396 = 0u;
    long long v397 = 0u;
    long long v394 = 0u;
    long long v395 = 0u;
    int32x4_t v393 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v390 = 136315906;
    *(void *)&v390[4] = "operator[]";
    *(_WORD *)&v390[12] = 1024;
    *(_DWORD *)&v390[14] = 468;
    *(_WORD *)&v390[18] = 2048;
    *(void *)&v390[20] = 10;
    __int16 v391 = 2048;
    unint64_t v392 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_518;
  }
  char v190 = this[28];
  uint64_t v191 = (uint64_t)this[31];
  unint64_t v192 = *(void *)(v191 + 328);
  if (v192)
  {
    __int16 v194 = *(unsigned char **)(v191 + 336);
    long long v195 = this + 32;
    if (!v194)
    {
      uint64_t v199 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_283;
    }
    LOBYTE(v191) = *v194;
  }
  else
  {
    unint64_t v193 = v192 >> 8;
    __int16 v194 = (unsigned char *)(v191 + 329);
    LOBYTE(v191) = v193;
    long long v195 = this + 32;
  }
  if ((_BYTE)v191)
  {
    uint64_t v191 = (char)v191;
    char v196 = v194[1];
    if (v196)
    {
      long long v197 = v194 + 2;
      do
      {
        uint64_t v191 = 31 * v191 + v196;
        int v198 = *v197++;
        char v196 = v198;
      }
      while (v198);
    }
    uint64_t v199 = v191 & 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v199 = 0;
  }
LABEL_283:
  uint64_t v374 = v199;
  re::TextureTable::setTexture(v190, &v374, v195);
  uint64_t v374 = 0;
  unint64_t v5 = (unint64_t)this[30];
  if (v5 <= 0xB)
  {
LABEL_518:
    uint64_t v389 = 0;
    long long v396 = 0u;
    long long v397 = 0u;
    long long v394 = 0u;
    long long v395 = 0u;
    int32x4_t v393 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v390 = 136315906;
    *(void *)&v390[4] = "operator[]";
    *(_WORD *)&v390[12] = 1024;
    *(_DWORD *)&v390[14] = 468;
    *(_WORD *)&v390[18] = 2048;
    *(void *)&v390[20] = 11;
    __int16 v391 = 2048;
    unint64_t v392 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_519;
  }
  long long v200 = this[28];
  uint64_t v201 = (uint64_t)this[31];
  unint64_t v202 = *(void *)(v201 + 360);
  if (v202)
  {
    long long v204 = *(unsigned char **)(v201 + 368);
    long long v205 = this + 15;
    if (!v204)
    {
      uint64_t v209 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_295;
    }
    LOBYTE(v201) = *v204;
  }
  else
  {
    unint64_t v203 = v202 >> 8;
    long long v204 = (unsigned char *)(v201 + 361);
    LOBYTE(v201) = v203;
    long long v205 = this + 15;
  }
  if ((_BYTE)v201)
  {
    uint64_t v201 = (char)v201;
    char v206 = v204[1];
    if (v206)
    {
      long long v207 = v204 + 2;
      do
      {
        uint64_t v201 = 31 * v201 + v206;
        int v208 = *v207++;
        char v206 = v208;
      }
      while (v208);
    }
    uint64_t v209 = v201 & 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v209 = 0;
  }
LABEL_295:
  uint64_t v373 = v209;
  re::TextureTable::setTexture(v200, &v373, v205);
  uint64_t v373 = 0;
  unint64_t v5 = (unint64_t)this[30];
  if (v5 <= 0xC)
  {
LABEL_519:
    uint64_t v389 = 0;
    long long v396 = 0u;
    long long v397 = 0u;
    long long v394 = 0u;
    long long v395 = 0u;
    int32x4_t v393 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v390 = 136315906;
    *(void *)&v390[4] = "operator[]";
    *(_WORD *)&v390[12] = 1024;
    *(_DWORD *)&v390[14] = 468;
    *(_WORD *)&v390[18] = 2048;
    *(void *)&v390[20] = 12;
    __int16 v391 = 2048;
    unint64_t v392 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_520;
  }
  long long v210 = this[28];
  uint64_t v211 = (uint64_t)this[31];
  unint64_t v212 = *(void *)(v211 + 392);
  if (v212)
  {
    long long v214 = *(unsigned char **)(v211 + 400);
    long long v215 = this + 16;
    if (!v214)
    {
      uint64_t v219 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_307;
    }
    LOBYTE(v211) = *v214;
  }
  else
  {
    unint64_t v213 = v212 >> 8;
    long long v214 = (unsigned char *)(v211 + 393);
    LOBYTE(v211) = v213;
    long long v215 = this + 16;
  }
  if ((_BYTE)v211)
  {
    uint64_t v211 = (char)v211;
    char v216 = v214[1];
    if (v216)
    {
      long long v217 = v214 + 2;
      do
      {
        uint64_t v211 = 31 * v211 + v216;
        int v218 = *v217++;
        char v216 = v218;
      }
      while (v218);
    }
    uint64_t v219 = v211 & 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v219 = 0;
  }
LABEL_307:
  uint64_t v372 = v219;
  re::TextureTable::setTexture(v210, &v372, v215);
  uint64_t v372 = 0;
  unint64_t v5 = (unint64_t)this[30];
  if (v5 <= 0xD)
  {
LABEL_520:
    uint64_t v389 = 0;
    long long v396 = 0u;
    long long v397 = 0u;
    long long v394 = 0u;
    long long v395 = 0u;
    int32x4_t v393 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v390 = 136315906;
    *(void *)&v390[4] = "operator[]";
    *(_WORD *)&v390[12] = 1024;
    *(_DWORD *)&v390[14] = 468;
    *(_WORD *)&v390[18] = 2048;
    *(void *)&v390[20] = 13;
    __int16 v391 = 2048;
    unint64_t v392 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_521;
  }
  uint64_t v220 = this[28];
  uint64_t v221 = (uint64_t)this[31];
  unint64_t v222 = *(void *)(v221 + 424);
  if (v222)
  {
    unint64_t v224 = *(unsigned char **)(v221 + 432);
    unint64_t v225 = this + 17;
    if (!v224)
    {
      uint64_t v229 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_319;
    }
    LOBYTE(v221) = *v224;
  }
  else
  {
    unint64_t v223 = v222 >> 8;
    unint64_t v224 = (unsigned char *)(v221 + 425);
    LOBYTE(v221) = v223;
    unint64_t v225 = this + 17;
  }
  if ((_BYTE)v221)
  {
    uint64_t v221 = (char)v221;
    char v226 = v224[1];
    if (v226)
    {
      unint64_t v227 = v224 + 2;
      do
      {
        uint64_t v221 = 31 * v221 + v226;
        int v228 = *v227++;
        char v226 = v228;
      }
      while (v228);
    }
    uint64_t v229 = v221 & 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v229 = 0;
  }
LABEL_319:
  uint64_t v371 = v229;
  re::TextureTable::setTexture(v220, &v371, v225);
  uint64_t v371 = 0;
  unint64_t v5 = (unint64_t)this[30];
  if (v5 <= 0xE)
  {
LABEL_521:
    uint64_t v389 = 0;
    long long v396 = 0u;
    long long v397 = 0u;
    long long v394 = 0u;
    long long v395 = 0u;
    int32x4_t v393 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v390 = 136315906;
    *(void *)&v390[4] = "operator[]";
    *(_WORD *)&v390[12] = 1024;
    *(_DWORD *)&v390[14] = 468;
    *(_WORD *)&v390[18] = 2048;
    *(void *)&v390[20] = 14;
    __int16 v391 = 2048;
    unint64_t v392 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_522;
  }
  unint64_t v230 = this[28];
  uint64_t v231 = (uint64_t)this[31];
  unint64_t v232 = *(void *)(v231 + 456);
  if (v232)
  {
    int v234 = *(unsigned char **)(v231 + 464);
    if (!v234)
    {
      uint64_t v238 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_331;
    }
    LOBYTE(v231) = *v234;
  }
  else
  {
    unint64_t v233 = v232 >> 8;
    int v234 = (unsigned char *)(v231 + 457);
    LOBYTE(v231) = v233;
  }
  if ((_BYTE)v231)
  {
    uint64_t v231 = (char)v231;
    char v235 = v234[1];
    if (v235)
    {
      int v236 = v234 + 2;
      do
      {
        uint64_t v231 = 31 * v231 + v235;
        int v237 = *v236++;
        char v235 = v237;
      }
      while (v237);
    }
    uint64_t v238 = v231 & 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v238 = 0;
  }
LABEL_331:
  uint64_t v370 = v238;
  re::TextureTable::setTexture(v230, &v370, this + 9);
  uint64_t v370 = 0;
  unint64_t v5 = (unint64_t)this[30];
  if (v5 <= 0xF)
  {
LABEL_522:
    uint64_t v389 = 0;
    long long v396 = 0u;
    long long v397 = 0u;
    long long v394 = 0u;
    long long v395 = 0u;
    int32x4_t v393 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v390 = 136315906;
    *(void *)&v390[4] = "operator[]";
    *(_WORD *)&v390[12] = 1024;
    *(_DWORD *)&v390[14] = 468;
    *(_WORD *)&v390[18] = 2048;
    *(void *)&v390[20] = 15;
    __int16 v391 = 2048;
    unint64_t v392 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_523;
  }
  unint64_t v239 = this[28];
  uint64_t v240 = (uint64_t)this[31];
  unint64_t v241 = *(void *)(v240 + 488);
  if (v241)
  {
    unint64_t v243 = *(unsigned char **)(v240 + 496);
    if (!v243)
    {
      uint64_t v247 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_343;
    }
    LOBYTE(v240) = *v243;
  }
  else
  {
    unint64_t v242 = v241 >> 8;
    unint64_t v243 = (unsigned char *)(v240 + 489);
    LOBYTE(v240) = v242;
  }
  if ((_BYTE)v240)
  {
    uint64_t v240 = (char)v240;
    char v244 = v243[1];
    if (v244)
    {
      int v245 = v243 + 2;
      do
      {
        uint64_t v240 = 31 * v240 + v244;
        int v246 = *v245++;
        char v244 = v246;
      }
      while (v246);
    }
    uint64_t v247 = v240 & 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v247 = 0;
  }
LABEL_343:
  uint64_t v369 = v247;
  re::TextureTable::setTexture(v239, &v369, this + 10);
  uint64_t v369 = 0;
  unint64_t v5 = (unint64_t)this[30];
  if (v5 <= 0x11)
  {
LABEL_523:
    uint64_t v389 = 0;
    long long v396 = 0u;
    long long v397 = 0u;
    long long v394 = 0u;
    long long v395 = 0u;
    int32x4_t v393 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v390 = 136315906;
    *(void *)&v390[4] = "operator[]";
    *(_WORD *)&v390[12] = 1024;
    *(_DWORD *)&v390[14] = 468;
    *(_WORD *)&v390[18] = 2048;
    *(void *)&v390[20] = 17;
    __int16 v391 = 2048;
    unint64_t v392 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_524;
  }
  int v248 = this[28];
  uint64_t v249 = (uint64_t)this[31];
  unint64_t v250 = *(void *)(v249 + 552);
  if (v250)
  {
    int v252 = *(unsigned char **)(v249 + 560);
    if (!v252)
    {
      uint64_t v256 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_355;
    }
    LOBYTE(v249) = *v252;
  }
  else
  {
    unint64_t v251 = v250 >> 8;
    int v252 = (unsigned char *)(v249 + 553);
    LOBYTE(v249) = v251;
  }
  if ((_BYTE)v249)
  {
    uint64_t v249 = (char)v249;
    char v253 = v252[1];
    if (v253)
    {
      int v254 = v252 + 2;
      do
      {
        uint64_t v249 = 31 * v249 + v253;
        int v255 = *v254++;
        char v253 = v255;
      }
      while (v255);
    }
    uint64_t v256 = v249 & 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v256 = 0;
  }
LABEL_355:
  uint64_t v368 = v256;
  re::TextureTable::setTexture(v248, &v368, this + 18);
  uint64_t v368 = 0;
  unint64_t v5 = (unint64_t)this[30];
  if (v5 <= 0x12)
  {
LABEL_524:
    uint64_t v389 = 0;
    long long v396 = 0u;
    long long v397 = 0u;
    long long v394 = 0u;
    long long v395 = 0u;
    int32x4_t v393 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v390 = 136315906;
    *(void *)&v390[4] = "operator[]";
    *(_WORD *)&v390[12] = 1024;
    *(_DWORD *)&v390[14] = 468;
    *(_WORD *)&v390[18] = 2048;
    *(void *)&v390[20] = 18;
    __int16 v391 = 2048;
    unint64_t v392 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_525;
  }
  unint64_t v257 = this[28];
  uint64_t v258 = (uint64_t)this[31];
  unint64_t v259 = *(void *)(v258 + 584);
  if (v259)
  {
    unint64_t v261 = *(unsigned char **)(v258 + 592);
    if (!v261)
    {
      uint64_t v265 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_367;
    }
    LOBYTE(v258) = *v261;
  }
  else
  {
    unint64_t v260 = v259 >> 8;
    unint64_t v261 = (unsigned char *)(v258 + 585);
    LOBYTE(v258) = v260;
  }
  if ((_BYTE)v258)
  {
    uint64_t v258 = (char)v258;
    char v262 = v261[1];
    if (v262)
    {
      long long v263 = v261 + 2;
      do
      {
        uint64_t v258 = 31 * v258 + v262;
        int v264 = *v263++;
        char v262 = v264;
      }
      while (v264);
    }
    uint64_t v265 = v258 & 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v265 = 0;
  }
LABEL_367:
  uint64_t v367 = v265;
  re::TextureTable::setTexture(v257, &v367, this + 19);
  uint64_t v367 = 0;
  unint64_t v5 = (unint64_t)this[30];
  if (v5 <= 0x13)
  {
LABEL_525:
    uint64_t v389 = 0;
    long long v396 = 0u;
    long long v397 = 0u;
    long long v394 = 0u;
    long long v395 = 0u;
    int32x4_t v393 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v390 = 136315906;
    *(void *)&v390[4] = "operator[]";
    *(_WORD *)&v390[12] = 1024;
    *(_DWORD *)&v390[14] = 468;
    *(_WORD *)&v390[18] = 2048;
    *(void *)&v390[20] = 19;
    __int16 v391 = 2048;
    unint64_t v392 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_526;
  }
  unint64_t v266 = this[28];
  uint64_t v267 = (uint64_t)this[31];
  unint64_t v268 = *(void *)(v267 + 616);
  if (v268)
  {
    unint64_t v270 = *(unsigned char **)(v267 + 624);
    unint64_t v271 = this + 20;
    if (!v270)
    {
      uint64_t v275 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_379;
    }
    LOBYTE(v267) = *v270;
  }
  else
  {
    unint64_t v269 = v268 >> 8;
    unint64_t v270 = (unsigned char *)(v267 + 617);
    LOBYTE(v267) = v269;
    unint64_t v271 = this + 20;
  }
  if ((_BYTE)v267)
  {
    uint64_t v267 = (char)v267;
    char v272 = v270[1];
    if (v272)
    {
      long long v273 = v270 + 2;
      do
      {
        uint64_t v267 = 31 * v267 + v272;
        int v274 = *v273++;
        char v272 = v274;
      }
      while (v274);
    }
    uint64_t v275 = v267 & 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v275 = 0;
  }
LABEL_379:
  uint64_t v366 = v275;
  re::TextureTable::setTexture(v266, &v366, v271);
  uint64_t v366 = 0;
  unint64_t v5 = (unint64_t)this[30];
  if (v5 <= 0x14)
  {
LABEL_526:
    uint64_t v389 = 0;
    long long v396 = 0u;
    long long v397 = 0u;
    long long v394 = 0u;
    long long v395 = 0u;
    int32x4_t v393 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v390 = 136315906;
    *(void *)&v390[4] = "operator[]";
    *(_WORD *)&v390[12] = 1024;
    *(_DWORD *)&v390[14] = 468;
    *(_WORD *)&v390[18] = 2048;
    *(void *)&v390[20] = 20;
    __int16 v391 = 2048;
    unint64_t v392 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_527;
  }
  unint64_t v276 = this[28];
  uint64_t v277 = (uint64_t)this[31];
  unint64_t v278 = *(void *)(v277 + 648);
  if (v278)
  {
    unint64_t v280 = *(unsigned char **)(v277 + 656);
    if (!v280)
    {
      uint64_t v284 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_391;
    }
    LOBYTE(v277) = *v280;
  }
  else
  {
    unint64_t v279 = v278 >> 8;
    unint64_t v280 = (unsigned char *)(v277 + 649);
    LOBYTE(v277) = v279;
  }
  if ((_BYTE)v277)
  {
    uint64_t v277 = (char)v277;
    char v281 = v280[1];
    if (v281)
    {
      uint64_t v282 = v280 + 2;
      do
      {
        uint64_t v277 = 31 * v277 + v281;
        int v283 = *v282++;
        char v281 = v283;
      }
      while (v283);
    }
    uint64_t v284 = v277 & 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v284 = 0;
  }
LABEL_391:
  uint64_t v365 = v284;
  re::TextureTable::setTexture(v276, &v365, this + 21);
  uint64_t v365 = 0;
  unint64_t v5 = (unint64_t)this[30];
  if (v5 <= 0x15)
  {
LABEL_527:
    uint64_t v389 = 0;
    long long v396 = 0u;
    long long v397 = 0u;
    long long v394 = 0u;
    long long v395 = 0u;
    int32x4_t v393 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v390 = 136315906;
    *(void *)&v390[4] = "operator[]";
    *(_WORD *)&v390[12] = 1024;
    *(_DWORD *)&v390[14] = 468;
    *(_WORD *)&v390[18] = 2048;
    *(void *)&v390[20] = 21;
    __int16 v391 = 2048;
    unint64_t v392 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_528;
  }
  long long v285 = this[28];
  uint64_t v286 = (uint64_t)this[31];
  unint64_t v287 = *(void *)(v286 + 680);
  if (v287)
  {
    v289 = *(unsigned char **)(v286 + 688);
    __int16 v290 = this + 22;
    if (!v289)
    {
      uint64_t v294 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_403;
    }
    LOBYTE(v286) = *v289;
  }
  else
  {
    unint64_t v288 = v287 >> 8;
    v289 = (unsigned char *)(v286 + 681);
    LOBYTE(v286) = v288;
    __int16 v290 = this + 22;
  }
  if ((_BYTE)v286)
  {
    uint64_t v286 = (char)v286;
    char v291 = v289[1];
    if (v291)
    {
      __int16 v292 = v289 + 2;
      do
      {
        uint64_t v286 = 31 * v286 + v291;
        int v293 = *v292++;
        char v291 = v293;
      }
      while (v293);
    }
    uint64_t v294 = v286 & 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v294 = 0;
  }
LABEL_403:
  uint64_t v364 = v294;
  re::TextureTable::setTexture(v285, &v364, v290);
  uint64_t v364 = 0;
  unint64_t v5 = (unint64_t)this[30];
  if (v5 <= 0x18)
  {
LABEL_528:
    uint64_t v389 = 0;
    long long v396 = 0u;
    long long v397 = 0u;
    long long v394 = 0u;
    long long v395 = 0u;
    int32x4_t v393 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v390 = 136315906;
    *(void *)&v390[4] = "operator[]";
    *(_WORD *)&v390[12] = 1024;
    *(_DWORD *)&v390[14] = 468;
    *(_WORD *)&v390[18] = 2048;
    *(void *)&v390[20] = 24;
    __int16 v391 = 2048;
    unint64_t v392 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_529;
  }
  unint64_t v295 = this[28];
  uint64_t v296 = (uint64_t)this[31];
  unint64_t v297 = *(void *)(v296 + 776);
  if (v297)
  {
    uint64_t v299 = *(unsigned char **)(v296 + 784);
    if (!v299)
    {
      uint64_t v303 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_415;
    }
    LOBYTE(v2re::DynamicArray<re::RigComponentConstraint>::deinit((uint64_t)this + 96) = *v299;
  }
  else
  {
    unint64_t v298 = v297 >> 8;
    uint64_t v299 = (unsigned char *)(v296 + 777);
    LOBYTE(v2re::DynamicArray<re::RigComponentConstraint>::deinit((uint64_t)this + 96) = v298;
  }
  if ((_BYTE)v296)
  {
    uint64_t v296 = (char)v296;
    char v300 = v299[1];
    if (v300)
    {
      v301 = v299 + 2;
      do
      {
        uint64_t v296 = 31 * v296 + v300;
        int v302 = *v301++;
        char v300 = v302;
      }
      while (v302);
    }
    uint64_t v303 = v296 & 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v303 = 0;
  }
LABEL_415:
  uint64_t v363 = v303;
  re::TextureTable::setTexture(v295, &v363, this + 24);
  uint64_t v363 = 0;
  unint64_t v5 = (unint64_t)this[30];
  if (v5 <= 0x19)
  {
LABEL_529:
    uint64_t v389 = 0;
    long long v396 = 0u;
    long long v397 = 0u;
    long long v394 = 0u;
    long long v395 = 0u;
    int32x4_t v393 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v390 = 136315906;
    *(void *)&v390[4] = "operator[]";
    *(_WORD *)&v390[12] = 1024;
    *(_DWORD *)&v390[14] = 468;
    *(_WORD *)&v390[18] = 2048;
    *(void *)&v390[20] = 25;
    __int16 v391 = 2048;
    unint64_t v392 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_530;
  }
  v304 = this[28];
  uint64_t v305 = (uint64_t)this[31];
  unint64_t v306 = *(void *)(v305 + 808);
  if (v306)
  {
    v308 = *(unsigned char **)(v305 + 816);
    if (!v308)
    {
      uint64_t v312 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_427;
    }
    LOBYTE(v305) = *v308;
  }
  else
  {
    unint64_t v307 = v306 >> 8;
    v308 = (unsigned char *)(v305 + 809);
    LOBYTE(v305) = v307;
  }
  if ((_BYTE)v305)
  {
    uint64_t v305 = (char)v305;
    char v309 = v308[1];
    if (v309)
    {
      unint64_t v310 = v308 + 2;
      do
      {
        uint64_t v305 = 31 * v305 + v309;
        int v311 = *v310++;
        char v309 = v311;
      }
      while (v311);
    }
    uint64_t v312 = v305 & 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v312 = 0;
  }
LABEL_427:
  uint64_t v362 = v312;
  re::TextureTable::setTexture(v304, &v362, this + 25);
  uint64_t v362 = 0;
  unint64_t v5 = (unint64_t)this[30];
  if (v5 <= 0x1A)
  {
LABEL_530:
    uint64_t v389 = 0;
    long long v396 = 0u;
    long long v397 = 0u;
    long long v394 = 0u;
    long long v395 = 0u;
    int32x4_t v393 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v390 = 136315906;
    *(void *)&v390[4] = "operator[]";
    *(_WORD *)&v390[12] = 1024;
    *(_DWORD *)&v390[14] = 468;
    *(_WORD *)&v390[18] = 2048;
    *(void *)&v390[20] = 26;
    __int16 v391 = 2048;
    unint64_t v392 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_531;
  }
  unint64_t v313 = this[28];
  uint64_t v314 = (uint64_t)this[31];
  unint64_t v315 = *(void *)(v314 + 840);
  if (v315)
  {
    unint64_t v317 = *(unsigned char **)(v314 + 848);
    unint64_t v318 = this + 26;
    if (!v317)
    {
      uint64_t v322 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_439;
    }
    LOBYTE(v314) = *v317;
  }
  else
  {
    unint64_t v316 = v315 >> 8;
    unint64_t v317 = (unsigned char *)(v314 + 841);
    LOBYTE(v314) = v316;
    unint64_t v318 = this + 26;
  }
  if ((_BYTE)v314)
  {
    uint64_t v314 = (char)v314;
    char v319 = v317[1];
    if (v319)
    {
      long long v320 = v317 + 2;
      do
      {
        uint64_t v314 = 31 * v314 + v319;
        int v321 = *v320++;
        char v319 = v321;
      }
      while (v321);
    }
    uint64_t v322 = v314 & 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v322 = 0;
  }
LABEL_439:
  uint64_t v361 = v322;
  re::TextureTable::setTexture(v313, &v361, v318);
  uint64_t v361 = 0;
  unint64_t v5 = (unint64_t)this[30];
  if (v5 <= 0x1B)
  {
LABEL_531:
    uint64_t v389 = 0;
    long long v396 = 0u;
    long long v397 = 0u;
    long long v394 = 0u;
    long long v395 = 0u;
    int32x4_t v393 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v390 = 136315906;
    *(void *)&v390[4] = "operator[]";
    *(_WORD *)&v390[12] = 1024;
    *(_DWORD *)&v390[14] = 468;
    *(_WORD *)&v390[18] = 2048;
    *(void *)&v390[20] = 27;
    __int16 v391 = 2048;
    unint64_t v392 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_532;
  }
  uint64_t v323 = this[28];
  uint64_t v324 = (uint64_t)this[31];
  unint64_t v325 = *(void *)(v324 + 872);
  if (v325)
  {
    unint64_t v327 = *(unsigned char **)(v324 + 880);
    if (!v327)
    {
      uint64_t v331 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_451;
    }
    LOBYTE(v324) = *v327;
  }
  else
  {
    unint64_t v326 = v325 >> 8;
    unint64_t v327 = (unsigned char *)(v324 + 873);
    LOBYTE(v324) = v326;
  }
  if ((_BYTE)v324)
  {
    uint64_t v324 = (char)v324;
    char v328 = v327[1];
    if (v328)
    {
      uint64_t v329 = v327 + 2;
      do
      {
        uint64_t v324 = 31 * v324 + v328;
        int v330 = *v329++;
        char v328 = v330;
      }
      while (v330);
    }
    uint64_t v331 = v324 & 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v331 = 0;
  }
LABEL_451:
  uint64_t v360 = v331;
  re::TextureTable::setTexture(v323, &v360, this + 27);
  uint64_t v360 = 0;
  unint64_t v5 = (unint64_t)this[30];
  if (v5 <= 0x16)
  {
LABEL_532:
    uint64_t v389 = 0;
    long long v396 = 0u;
    long long v397 = 0u;
    long long v394 = 0u;
    long long v395 = 0u;
    int32x4_t v393 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v390 = 136315906;
    *(void *)&v390[4] = "operator[]";
    *(_WORD *)&v390[12] = 1024;
    *(_DWORD *)&v390[14] = 468;
    *(_WORD *)&v390[18] = 2048;
    *(void *)&v390[20] = 22;
    __int16 v391 = 2048;
    unint64_t v392 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_533:
    uint64_t v389 = 0;
    long long v396 = 0u;
    long long v397 = 0u;
    long long v394 = 0u;
    long long v395 = 0u;
    int32x4_t v393 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v390 = 136315906;
    *(void *)&v390[4] = "operator[]";
    *(_WORD *)&v390[12] = 1024;
    *(_DWORD *)&v390[14] = 468;
    *(_WORD *)&v390[18] = 2048;
    *(void *)&v390[20] = 23;
    __int16 v391 = 2048;
    unint64_t v392 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v332 = this[28];
  uint64_t v333 = (uint64_t)this[31];
  unint64_t v334 = *(void *)(v333 + 712);
  if (v334)
  {
    __int16 v336 = *(unsigned char **)(v333 + 720);
    if (!v336)
    {
      uint64_t v340 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_463;
    }
    LOBYTE(v33re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = *v336;
  }
  else
  {
    unint64_t v335 = v334 >> 8;
    __int16 v336 = (unsigned char *)(v333 + 713);
    LOBYTE(v33re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = v335;
  }
  if ((_BYTE)v333)
  {
    uint64_t v333 = (char)v333;
    char v337 = v336[1];
    if (v337)
    {
      __int16 v338 = v336 + 2;
      do
      {
        uint64_t v333 = 31 * v333 + v337;
        int v339 = *v338++;
        char v337 = v339;
      }
      while (v339);
    }
    uint64_t v340 = v333 & 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v340 = 0;
  }
LABEL_463:
  uint64_t v359 = v340;
  re::TextureTable::setTexture(v332, &v359, v356);
  uint64_t v359 = 0;
  unint64_t v5 = (unint64_t)this[30];
  if (v5 <= 0x17) {
    goto LABEL_533;
  }
  unint64_t v341 = this[28];
  uint64_t v342 = (uint64_t)this[31];
  unint64_t v343 = *(void *)(v342 + 744);
  if (v343)
  {
    __int16 v345 = *(unsigned char **)(v342 + 752);
    long long v346 = this + 23;
    if (!v345)
    {
      uint64_t v350 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_475;
    }
    LOBYTE(v342) = *v345;
  }
  else
  {
    unint64_t v344 = v343 >> 8;
    __int16 v345 = (unsigned char *)(v342 + 745);
    LOBYTE(v342) = v344;
    long long v346 = this + 23;
  }
  if ((_BYTE)v342)
  {
    uint64_t v342 = (char)v342;
    char v347 = v345[1];
    if (v347)
    {
      long long v348 = v345 + 2;
      do
      {
        uint64_t v342 = 31 * v342 + v347;
        int v349 = *v348++;
        char v347 = v349;
      }
      while (v349);
    }
    uint64_t v350 = v342 & 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v350 = 0;
  }
LABEL_475:
  uint64_t v358 = v350;
  re::TextureTable::setTexture(v341, &v358, v346);
  uint64_t v358 = 0;
  re::DynamicArray<re::RigNodeConstraint>::setCapacity(this + 40, 0);
  ++*((_DWORD *)this + 86);
  *((_DWORD *)this + 91) = 32;
  re::DataArray<re::Texture>::allocBlock(this + 40);
  id v352 = *this;

  if (v354) {
  return v352 != 0;
  }
}

void re::TextureManager::deinit(re::TextureManager *this)
{
  re::DataArray<re::Texture>::clear((void *)this + 40);
  *((void *)this + 28) = 0;

  *((void *)this + 2) = 0;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = 0;

  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;

  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;

  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;

  *((void *)this + 8) = 0;
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = 0;

  *((void *)this + 14) = 0;
  *((void *)this + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0;

  *((void *)this + 15) = 0;
  *((void *)this + 16) = 0;

  *((void *)this + 17) = 0;
  *((void *)this + 9) = 0;

  *((void *)this + 10) = 0;
  *((void *)this + 18) = 0;

  *((void *)this + 19) = 0;
  *((void *)this + 20) = 0;

  *((void *)this + 24) = 0;
  *((void *)this + 25) = 0;

  *((void *)this + 26) = 0;
  *((void *)this + 27) = 0;
  double v2 = *(void **)this;
  *(void *)this = 0;
}

double re::DataArray<re::Texture>::clear(void *a1)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v13, (uint64_t)a1, 0);
  if ((void *)v13 != a1 || WORD4(v13) != 0xFFFFLL || (DWORD2(v13) & 0xFFFF0000) != 4294901760)
  {
    do
    {
      unint64_t v4 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v13);
      re::DataArray<re::Texture>::destroy((uint64_t)a1, v4);
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v13);
    }
    while ((void *)v13 != a1 || WORD4(v13) != 0xFFFF || WORD5(v13) != 0xFFFF);
  }
  unint64_t v7 = a1[2];
  unint64_t v8 = v7 - 1;
  if (v7 != 1)
  {
    uint64_t v9 = 16 * v7 - 16;
    do
    {
      if (v7 <= v8)
      {
        long long v16 = 0u;
        long long v17 = 0u;
        long long v14 = 0u;
        long long v15 = 0u;
        long long v13 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_25:
        long long v16 = 0u;
        long long v17 = 0u;
        long long v14 = 0u;
        long long v15 = 0u;
        long long v13 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      int v10 = (void *)(a1[4] + v9);
      (*(void (**)(void, void))(*(void *)*a1 + 40))(*a1, *v10);
      (*(void (**)(void, void))(*(void *)*a1 + 40))(*a1, v10[1]);
      unint64_t v11 = a1[2];
      if (v11 <= v8) {
        goto LABEL_25;
      }
      unint64_t v7 = v11 - 1;
      if (v11 - 1 > v8)
      {
        *(_OWORD *)(a1[4] + v9) = *(_OWORD *)(a1[4] + 16 * v11 - 16);
        unint64_t v7 = a1[2] - 1;
      }
      a1[2] = v7;
      ++*((_DWORD *)a1 + 6);
      v9 -= 16;
      --v8;
    }
    while (v8);
  }
  double result = NAN;
  a1[6] = 0xFFFFFFFF00000000;
  return result;
}

void re::TextureManager::createRenderTarget(id *a1@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, int a4@<W3>, unsigned int a5@<W4>, uint64_t a6@<X5>, int a7@<W6>, int a8@<W7>, id *a9@<X8>)
{
  id v22 = *a1;
  uint64_t v17 = a7 | 4u;
  id v18 = objc_msgSend(objc_msgSend(MEMORY[0x263F12A50], sel_alloc), sel_init);
  uint64_t v19 = v18;
  if (a5 >= 2) {
    uint64_t v20 = 4;
  }
  else {
    uint64_t v20 = 2;
  }
  objc_msgSend(v18, sel_setTextureType_, v20);
  objc_msgSend(v19, sel_setWidth_, a2);
  objc_msgSend(v19, sel_setHeight_, a3);
  objc_msgSend(v19, sel_setPixelFormat_, a4);
  objc_msgSend(v19, sel_setMipmapLevelCount_, 1);
  objc_msgSend(v19, sel_setUsage_, v17);
  if (a8 == 0xFFFF) {
    int v21 = 0;
  }
  else {
    int v21 = a8;
  }
  objc_msgSend(v19, sel_setResourceOptions_, v21);
  objc_msgSend(v19, sel_setProtectionOptions_, re::protectionOptions((re *)objc_msgSend(v19, sel_setSampleCount_, a5)));
  re::mtl::Device::makeTexture(v19, &v22, a9);
  if (a6) {
    objc_msgSend(*a9, sel_setLabel_, objc_msgSend(NSString, sel_stringWithCString_encoding_, a6, 4));
  }
  if (v19) {
}
  }

id re::TextureManager::stockTextureForType@<X0>(re *a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  switch(a2)
  {
    case 0:
      unint64_t v5 = (void *)*((void *)a1 + 18);
      goto LABEL_13;
    case 1:
      unint64_t v5 = (void *)*((void *)a1 + 19);
      goto LABEL_13;
    case 2:
      unint64_t v5 = (void *)*((void *)a1 + 2);
      goto LABEL_13;
    case 3:
      unint64_t v5 = (void *)*((void *)a1 + 9);
      goto LABEL_13;
    case 5:
      unint64_t v5 = (void *)*((void *)a1 + 11);
      goto LABEL_13;
    case 6:
      unint64_t v5 = (void *)*((void *)a1 + 8);
      goto LABEL_13;
    case 7:
      unint64_t v5 = (void *)*((void *)a1 + 13);
      goto LABEL_13;
    case 9:
      unint64_t v5 = (void *)*((void *)a1 + 20);
LABEL_13:
      id result = v5;
      break;
    default:
      unint64_t v6 = *re::graphicsLogObjects(a1);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        v8[0] = 67109120;
        v8[1] = a2;
        _os_log_impl(&dword_233120000, v6, OS_LOG_TYPE_DEFAULT, "Texture type %u not supported", (uint8_t *)v8, 8u);
      }
      id result = 0;
      break;
  }
  *a3 = result;
  return result;
}

void re::TextureManager::dequeueMipmapGeneration(os_unfair_lock_s *this@<X0>, uint64_t a2@<X8>)
{
  double v2 = (re::TextureManager *)this;
  unint64_t v4 = this + 96;
  os_unfair_lock_lock(this + 96);
  double v2 = (re::TextureManager *)((char *)v2 + 392);
  uint64_t v5 = 0;
  *(void *)a2 = 0;
  long long v6 = 0u;
  *(_OWORD *)(a2 + 8) = 0u;
  uint64_t v8 = 0;
  *(void *)(a2 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0;
  *(_DWORD *)(a2 + 24) = 1;
  int v7 = 1;
  re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(a2, (uint64_t)v2);
  re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)v2, (uint64_t)&v5);
  re::DynamicArray<NS::SharedPtr<MTL::SamplerState>>::deinit((uint64_t)&v5);
  os_unfair_lock_unlock(v4);
}

void re::TextureManager::queueBlurGeneration(os_unfair_lock_s *a1, void **a2, void **a3, char a4)
{
  uint64_t v8 = a1 + 108;
  os_unfair_lock_lock(a1 + 108);
  id v9 = 0;
  id v10 = 0;
  char v11 = 3;
  NS::SharedPtr<MTL::Texture>::operator=(&v9, a2);
  NS::SharedPtr<MTL::Texture>::operator=(&v10, a3);
  char v11 = a4;
  re::DynamicArray<re::RenderGraphBlurGenerationData>::add((_anonymous_namespace_ *)&a1[110], (uint64_t)&v9);
  os_unfair_lock_unlock(v8);
  if (v10)
  {

    id v10 = 0;
  }
  if (v9) {
}
  }

id re::DynamicArray<re::RenderGraphBlurGenerationData>::add(_anonymous_namespace_ *this, uint64_t a2)
{
  unint64_t v4 = *((void *)this + 2);
  if (v4 >= *((void *)this + 1))
  {
    re::DynamicArray<re::RenderGraphBlurGenerationData>::growCapacity(this, v4 + 1);
    unint64_t v4 = *((void *)this + 2);
  }
  uint64_t v5 = *((void *)this + 4) + 24 * v4;
  *(void *)uint64_t v5 = *(id *)a2;
  id result = *(id *)(a2 + 8);
  *(void *)(v5 + 8) = result;
  *(unsigned char *)(v5 + 16) = *(unsigned char *)(a2 + 16);
  ++*((void *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

void re::TextureManager::dequeueBlurGeneration(os_unfair_lock_s *this@<X0>, uint64_t a2@<X8>)
{
  double v2 = (re::TextureManager *)this;
  unint64_t v4 = this + 108;
  os_unfair_lock_lock(this + 108);
  double v2 = (re::TextureManager *)((char *)v2 + 440);
  uint64_t v5 = 0;
  *(void *)a2 = 0;
  long long v6 = 0u;
  *(_OWORD *)(a2 + 8) = 0u;
  uint64_t v8 = 0;
  *(void *)(a2 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0;
  *(_DWORD *)(a2 + 24) = 1;
  int v7 = 1;
  re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(a2, (uint64_t)v2);
  re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)v2, (uint64_t)&v5);
  re::DynamicArray<re::VirtualEnvironmentProbeSource>::deinit((uint64_t)&v5);
  os_unfair_lock_unlock(v4);
}

void re::TextureManager::registerTexture(os_unfair_lock_s *a1@<X0>, void **a2@<X1>, os_unfair_lock_s **a3@<X8>)
{
  id v3 = 0;
  re::TextureManager::registerTextureAndHeap(a1, a2, &v3, a3);
  if (v3) {
}
  }

void re::TextureManager::registerTextureAndHeap(os_unfair_lock_s *a1@<X0>, void **a2@<X1>, void **a3@<X2>, os_unfair_lock_s **a4@<X8>)
{
  uint64_t v8 = a1 + 78;
  os_unfair_lock_lock(a1 + 78);
  int v10 = re::DataArray<re::Texture>::create<>((uint64_t)&a1[80], v9);
  char v11 = (void **)re::DataArray<re::Texture>::get((uint64_t)&a1[80], v10);
  NS::SharedPtr<MTL::Texture>::operator=(v11 + 2, a2);
  NS::SharedPtr<MTL::Texture>::operator=(v11 + 1, a2);
  NS::SharedPtr<MTL::Texture>::operator=(v11 + 4, a3);
  NS::SharedPtr<MTL::Texture>::operator=(v11 + 3, a3);
  *a4 = a1;
  a4[1] = (os_unfair_lock_s *)v11;
  os_unfair_lock_unlock(v8);
}

unint64_t re::DataArray<re::Texture>::create<>(uint64_t a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a1 + 56);
  if ((v3 + 1) >> 24) {
    int v4 = 1;
  }
  else {
    int v4 = v3 + 1;
  }
  *(_DWORD *)(a1 + 56) = v4;
  uint64_t v5 = *(unsigned __int16 *)(a1 + 52);
  unint64_t v6 = *(unsigned __int16 *)(a1 + 54);
  if (v5 == 0xFFFF && v6 == 0xFFFF)
  {
    if (*(_DWORD *)(a1 + 48) >= *(_DWORD *)(a1 + 44)) {
      re::DataArray<re::Texture>::allocBlock((void *)a1);
    }
    uint64_t v10 = *(void *)(a1 + 16);
    unint64_t v6 = (unsigned __int16)(v10 - 1);
    if (v10)
    {
      uint64_t v5 = *(unsigned int *)(a1 + 48);
      if (v5 < 0x10000)
      {
        char v11 = (void *)(*(void *)(a1 + 32) + 16 * v6);
        *(_DWORD *)(a1 + 48) = v5 + 1;
        *(_DWORD *)(v11[1] + 4 * v5) = *(_DWORD *)(a1 + 56);
        uint64_t v9 = *v11 + 88 * v5;
        goto LABEL_15;
      }
LABEL_18:
      re::internal::assertLog((re::internal *)5, a2, "assertion failure: '%s' (%s:line %i) m_tailBlockLinearAllocationCount (%u) is too large for a 16-bit unsigned integer", "!overflow", "create", 601, v5, v13, v14);
      _os_crash();
      __break(1u);
    }
LABEL_17:
    uint64_t v13 = 0;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(v14) = 136315906;
    *(void *)((char *)&v14 + 4) = "operator[]";
    WORD6(v14) = 1024;
    HIWORD(v14) = 789;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_18;
  }
  if (*(void *)(a1 + 16) <= v6)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v8 = (void *)(*(void *)(a1 + 32) + 16 * v6);
  *(_DWORD *)(v8[1] + 4 * v5) = v4;
  uint64_t v9 = *v8 + 88 * v5;
  *(_DWORD *)(a1 + 52) = *(_DWORD *)v9;
LABEL_15:
  ++*(_DWORD *)(a1 + 40);
  *(_OWORD *)uint64_t v9 = 0u;
  *(_OWORD *)(v9 + 16) = 0u;
  *(_OWORD *)(v9 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0u;
  *(_OWORD *)(v9 + 48) = 0u;
  *(_OWORD *)(v9 + 64) = 0u;
  *(_DWORD *)uint64_t v9 = 1;
  *(_OWORD *)(v9 + 8) = 0u;
  *(_OWORD *)(v9 + 24) = 0u;
  *(_OWORD *)(v9 + 40) = 0u;
  *(_OWORD *)(v9 + 56) = 0u;
  *(void *)(v9 + 72) = 0x7FFFFFFF00000000;
  *(void *)(v9 + 80) = 0;
  return (v6 << 16) | ((unint64_t)(*(_DWORD *)(a1 + 56) & 0xFFFFFF) << 32) | v5;
}

uint64_t re::DataArray<re::Texture>::get(uint64_t a1, int a2)
{
  if (*(void *)(a1 + 16) <= (unint64_t)HIWORD(a2))
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(*(void *)(a1 + 32) + 16 * HIWORD(a2)) + 88 * (unsigned __int16)a2;
}

void re::TextureManager::synchronizeTextures(os_unfair_lock_s *this)
{
  double v2 = this + 78;
  os_unfair_lock_lock(this + 78);
  int v3 = (char *)&this[80];
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v13, (uint64_t)v3, 0);
  if (v3 != (char *)v13 || WORD4(v13) != 0xFFFFLL || (DWORD2(v13) & 0xFFFF0000) != 4294901760)
  {
    do
    {
      if (atomic_load((unsigned int *)re::DataArray<re::Texture>::DataArrayIterator<re::Texture,re::Texture&>::operator*((unsigned __int16 *)&v13)))
      {
        int v7 = (void **)(re::DataArray<re::Texture>::DataArrayIterator<re::Texture,re::Texture&>::operator*((unsigned __int16 *)&v13)
                     + 16);
        uint64_t v8 = re::DataArray<re::Texture>::DataArrayIterator<re::Texture,re::Texture&>::operator*((unsigned __int16 *)&v13);
        NS::SharedPtr<MTL::Texture>::operator=((void **)(v8 + 8), v7);
        uint64_t v9 = (void **)(re::DataArray<re::Texture>::DataArrayIterator<re::Texture,re::Texture&>::operator*((unsigned __int16 *)&v13)
                     + 32);
        uint64_t v10 = re::DataArray<re::Texture>::DataArrayIterator<re::Texture,re::Texture&>::operator*((unsigned __int16 *)&v13);
        NS::SharedPtr<MTL::Texture>::operator=((void **)(v10 + 24), v9);
        re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v13);
      }
      else
      {
        long long v12 = v13;
        re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v13);
        unint64_t v11 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v12);
        re::DataArray<re::Texture>::destroy((uint64_t)v3, v11);
      }
    }
    while ((char *)v13 != v3 || WORD4(v13) != 0xFFFF || WORD5(v13) != 0xFFFF);
  }
  os_unfair_lock_unlock(v2);
}

uint64_t re::DataArray<re::Texture>::DataArrayIterator<re::Texture,re::Texture&>::operator*(unsigned __int16 *a1)
{
  unint64_t v1 = a1[5];
  if (*(void *)(*(void *)a1 + 16) <= v1)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(*(void *)(*(void *)a1 + 32) + 16 * v1) + 88 * a1[4];
}

void re::DataArray<re::Texture>::destroy(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = WORD1(a2);
  unint64_t v3 = *(void *)(a1 + 16);
  if (WORD1(a2) < v3)
  {
    int v4 = a2;
    unsigned int v6 = (unsigned __int16)(v3 - 1) == WORD1(a2) ? *(_DWORD *)(a1 + 48) : *(_DWORD *)(a1 + 44);
    if ((unsigned __int16)a2 < v6)
    {
      uint64_t v7 = (unsigned __int16)a2;
      uint64_t v8 = *(void *)(a1 + 32);
      int v9 = *(_DWORD *)(*(void *)(v8 + 16 * WORD1(a2) + 8) + 4 * (unsigned __int16)a2);
      if (v9 && v9 == (HIDWORD(a2) & 0xFFFFFF))
      {
        uint64_t v11 = *(void *)(v8 + 16 * WORD1(a2));
        if (v11)
        {
          uint64_t v12 = v11 + 88 * (unsigned __int16)a2;
          re::HashSetBase<re::Texture::TrackedBlock,re::Texture::TrackedBlock,re::internal::ValueAsKey<re::Texture::TrackedBlock>,re::Texture::TrackedBlockHash,re::EqualTo<re::Texture::TrackedBlock>,true,false>::deinit((uint64_t *)(v12 + 40));
          long long v15 = *(void **)(v12 + 32);
          long long v14 = (void *)(v12 + 32);
          long long v13 = v15;
          if (v15)
          {

            *long long v14 = 0;
          }
          uint64_t v16 = v11 + 88 * v7;
          uint64_t v19 = *(void **)(v16 + 24);
          id v18 = (void *)(v16 + 24);
          uint64_t v17 = v19;
          if (v19)
          {

            *id v18 = 0;
          }
          uint64_t v20 = v11 + 88 * v7;
          uint64_t v23 = *(void **)(v20 + 16);
          id v22 = (void *)(v20 + 16);
          int v21 = v23;
          if (v23)
          {

            *id v22 = 0;
          }
          uint64_t v24 = v11 + 88 * v7;
          uint64_t v27 = *(void **)(v24 + 8);
          uint64_t v26 = (void *)(v24 + 8);
          id v25 = v27;
          if (v27)
          {

            *uint64_t v26 = 0;
          }
          if (*(void *)(a1 + 16) <= v2)
          {
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
          *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 16 * v2 + 8) + 4 * v7) = 0;
          *(_DWORD *)(v11 + 88 * v7) = *(_DWORD *)(a1 + 52);
          *(_DWORD *)(a1 + 52) = v4;
          --*(_DWORD *)(a1 + 40);
        }
      }
    }
  }
}

_anonymous_namespace_ *re::DataArray<re::Texture>::allocBlock(void *a1)
{
  uint64_t v3 = 88 * *((unsigned int *)a1 + 11);
  uint64_t v4 = (*(uint64_t (**)(void, uint64_t, void))(*(void *)*a1 + 32))(*a1, v3, 0);
  if (!v4)
  {
    re::internal::assertLog((re::internal *)6, v5, "assertion failure: '%s' (%s:line %i) DataArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "block.elements", "allocBlock", 520, v3, *(void *)(*a1 + 8));
    _os_crash();
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v6 = v4;
  uint64_t v1 = 4 * *((unsigned int *)a1 + 11);
  id result = (_anonymous_namespace_ *)(*(uint64_t (**)(void, uint64_t, void))(*(void *)*a1 + 32))(*a1, v1, 0);
  if (!result)
  {
LABEL_16:
    re::internal::assertLog((re::internal *)6, v8, "assertion failure: '%s' (%s:line %i) DataArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "block.allocationCounters", "allocBlock", 528, v1, *(void *)(*a1 + 8));
    id result = (_anonymous_namespace_ *)_os_crash();
    __break(1u);
    return result;
  }
  int v9 = result;
  unint64_t v11 = a1[1];
  unint64_t v10 = a1[2];
  if (v10 >= v11)
  {
    unint64_t v12 = v10 + 1;
    if (v11 < v10 + 1)
    {
      if (*a1)
      {
        unint64_t v13 = 2 * v11;
        if (!v11) {
          unint64_t v13 = 8;
        }
        if (v13 <= v12) {
          unint64_t v14 = v12;
        }
        else {
          unint64_t v14 = v13;
        }
        id result = (_anonymous_namespace_ *)re::DynamicArray<re::RigNodeConstraint>::setCapacity(a1, v14);
      }
      else
      {
        id result = (_anonymous_namespace_ *)re::DynamicArray<re::RigNodeConstraint>::setCapacity(a1, v12);
        ++*((_DWORD *)a1 + 6);
      }
    }
    unint64_t v10 = a1[2];
  }
  long long v15 = (uint64_t *)(a1[4] + 16 * v10);
  *long long v15 = v6;
  v15[1] = (uint64_t)v9;
  a1[2] = v10 + 1;
  ++*((_DWORD *)a1 + 6);
  *((_DWORD *)a1 + 12) = 0;
  return result;
}

void *re::DynamicArray<re::RenderGraphBlurGenerationData>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    uint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::RenderGraphBlurGenerationData>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::RenderGraphBlurGenerationData>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void *re::DynamicArray<re::RenderGraphBlurGenerationData>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      id result = (void *)*result;
      if (!*v5)
      {
        id result = (void *)re::DynamicArray<re::RenderGraphBlurGenerationData>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x18uLL))
        {
          uint64_t v2 = 24 * a2;
          id result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 24 * a2, 8);
          if (result)
          {
            unint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_18;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 24, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        id result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      unint64_t v7 = 0;
      if (!v3)
      {
LABEL_18:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = 24 * v9;
        unint64_t v11 = v7;
        do
        {
          *unint64_t v11 = *(void *)v8;
          *(void *)uint64_t v8 = 0;
          v11[1] = *(void *)(v8 + 8);
          *(void *)(v8 + 8) = 0;
          *((unsigned char *)v11 + 16) = *(unsigned char *)(v8 + 16);
          if (*(void *)v8)
          {

            *(void *)uint64_t v8 = 0;
          }
          v8 += 24;
          v11 += 3;
          v10 -= 24;
        }
        while (v10);
        uint64_t v8 = v5[4];
      }
      id result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_18;
    }
  }
  return result;
}

uint64_t re::parseFontLayout@<X0>(re::FileStreamReader *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  re::FileStreamReader::open(a1, (uint64_t)v70);
  if (v70[0])
  {
    *((void *)&v67 + 1) = 0;
    uint64_t v68 = 0;
    uint64_t v69 = 0;
    re::DynamicString::setCapacity(&v67, 0);
    if (re::readLineFromStream((re *)v71, (re::StreamReader *)&v67, v7))
    {
      if (BYTE8(v67)) {
        uint64_t v8 = v68;
      }
      else {
        uint64_t v8 = (char *)&v67 + 9;
      }
      float v9 = atof(v8);
      *(float *)a2 = v9;
      if (re::readLineFromStream((re *)v71, (re::StreamReader *)&v67, v10))
      {
        id v57 = a1;
        uint64_t v58 = a3;
        if (BYTE8(v67)) {
          unint64_t v11 = v68;
        }
        else {
          unint64_t v11 = (char *)&v67 + 9;
        }
        float v13 = atof(v11);
        *(float *)(a2 + 4) = v13;
        if (*(void *)(a2 + 16) <= 0x5EuLL) {
          re::DynamicArray<re::Vector4<float>>::setCapacity((void *)(a2 + 8), 0x5FuLL);
        }
        for (uint64_t i = 0; i != 95; ++i)
        {
          if (!re::readLineFromStream((re *)v71, (re::StreamReader *)&v67, v12))
          {
            re::DynamicString::format((re::DynamicString *)"[%s] Failed to parse font layout %luth glyphBound.", (re::DynamicString *)&v65, v57, i);
            goto LABEL_97;
          }
          uint64_t v15 = 0;
          unint64_t v16 = 0;
          __n128 v64 = 0uLL;
          do
          {
            uint64_t v17 = re::DynamicString::find((re::DynamicString *)&v67, " ", 1, v16, (uint64_t)&v62);
            long long v65 = 0u;
            long long v66 = 0u;
            re::DynamicString::setCapacity(&v65, 0);
            if ((_BYTE)v62)
            {
              uint64_t v18 = v63;
              re::DynamicString::substr((re::DynamicString *)&v67, v16, v63 - v16, (re::DynamicString *)&v60);
              re::DynamicString::operator=((re::DynamicString *)&v65, (re::DynamicString *)&v60);
              if (v60 && (v61 & 1) != 0) {
                (*(void (**)(void))(*(void *)v60 + 40))();
              }
              unint64_t v16 = v18 + 1;
            }
            else
            {
              if (BYTE8(v67)) {
                size_t v22 = *((void *)&v67 + 1) >> 1;
              }
              else {
                size_t v22 = BYTE8(v67) >> 1;
              }
              re::DynamicString::substr((re::DynamicString *)&v67, v16, v22, (re::DynamicString *)&v60);
              re::DynamicString::operator=((re::DynamicString *)&v65, (re::DynamicString *)&v60);
              if (v60 && (v61 & 1) != 0) {
                (*(void (**)(void))(*(void *)v60 + 40))();
              }
            }
            uint64_t v19 = BYTE8(v65) & 1;
            if (BYTE8(v65)) {
              uint64_t v20 = (const char *)v66;
            }
            else {
              uint64_t v20 = (char *)&v65 + 9;
            }
            float v21 = atof(v20);
            v64.n128_f32[v15] = v21;
            if ((void)v65 && v19) {
              (*(void (**)(void))(*(void *)v65 + 40))();
            }
            ++v15;
          }
          while (v15 != 4);
          re::DynamicArray<re::Vector4<float>>::add((_anonymous_namespace_ *)(a2 + 8), &v64);
        }
        uint64_t v59 = (_anonymous_namespace_ *)(a2 + 48);
        if (*(void *)(a2 + 56) <= 0x2340uLL) {
          re::DynamicArray<re::EvaluationRegisterId<int>>::setCapacity(v59, 0x2341uLL);
        }
        uint64_t v23 = 0;
        while (2)
        {
          uint64_t v56 = v23;
          for (uint64_t j = 0; j != 95; ++j)
          {
            if (!re::readLineFromStream((re *)v71, (re::StreamReader *)&v67, v12))
            {
              re::DynamicString::format((re::DynamicString *)"[%s] Failed to parse font layout glyph offset for the pair [%lu, %lu].", (re::DynamicString *)&v65, v57, v56, j);
              goto LABEL_97;
            }
            uint64_t v25 = 0;
            unint64_t v26 = 0;
            uint64_t v62 = 0;
            char v27 = 1;
            do
            {
              char v28 = v27;
              id v29 = re::DynamicString::find((re::DynamicString *)&v67, " ", 1, v26, (uint64_t)&v64);
              long long v65 = 0u;
              long long v66 = 0u;
              re::DynamicString::setCapacity(&v65, 0);
              if (v64.n128_u8[0])
              {
                unint64_t v30 = v64.n128_u64[1];
                re::DynamicString::substr((re::DynamicString *)&v67, v26, v64.n128_u64[1] - v26, (re::DynamicString *)&v60);
                re::DynamicString::operator=((re::DynamicString *)&v65, (re::DynamicString *)&v60);
                if (v60 && (v61 & 1) != 0) {
                  (*(void (**)(void))(*(void *)v60 + 40))();
                }
                unint64_t v26 = v30 + 1;
              }
              else
              {
                if (BYTE8(v67)) {
                  size_t v34 = *((void *)&v67 + 1) >> 1;
                }
                else {
                  size_t v34 = BYTE8(v67) >> 1;
                }
                re::DynamicString::substr((re::DynamicString *)&v67, v26, v34, (re::DynamicString *)&v60);
                re::DynamicString::operator=((re::DynamicString *)&v65, (re::DynamicString *)&v60);
                if (v60 && (v61 & 1) != 0) {
                  (*(void (**)(void))(*(void *)v60 + 40))();
                }
              }
              uint64_t v31 = BYTE8(v65) & 1;
              if (BYTE8(v65)) {
                uint64_t v32 = (const char *)v66;
              }
              else {
                uint64_t v32 = (char *)&v65 + 9;
              }
              float v33 = atof(v32);
              *((float *)&v62 + v25) = v33;
              if ((void)v65 && v31) {
                (*(void (**)(void))(*(void *)v65 + 40))();
              }
              char v27 = 0;
              uint64_t v25 = 1;
            }
            while ((v28 & 1) != 0);
            re::DynamicArray<unsigned long>::add(v59, &v62);
          }
          uint64_t v23 = v56 + 1;
          if (v56 != 94) {
            continue;
          }
          break;
        }
        uint64_t v35 = 0;
        unsigned int v36 = (_anonymous_namespace_ *)(a2 + 88);
        while (re::readLineFromStream((re *)v71, (re::StreamReader *)&v67, v12))
        {
          uint64_t v37 = 0;
          unint64_t v38 = 0;
          __n128 v64 = 0uLL;
          do
          {
            uint64_t v39 = re::DynamicString::find((re::DynamicString *)&v67, " ", 1, v38, (uint64_t)&v62);
            long long v65 = 0u;
            long long v66 = 0u;
            re::DynamicString::setCapacity(&v65, 0);
            if ((_BYTE)v62)
            {
              uint64_t v40 = v63;
              re::DynamicString::substr((re::DynamicString *)&v67, v38, v63 - v38, (re::DynamicString *)&v60);
              re::DynamicString::operator=((re::DynamicString *)&v65, (re::DynamicString *)&v60);
              if (v60 && (v61 & 1) != 0) {
                (*(void (**)(void))(*(void *)v60 + 40))();
              }
              unint64_t v38 = v40 + 1;
            }
            else
            {
              if (BYTE8(v67)) {
                size_t v44 = *((void *)&v67 + 1) >> 1;
              }
              else {
                size_t v44 = BYTE8(v67) >> 1;
              }
              re::DynamicString::substr((re::DynamicString *)&v67, v38, v44, (re::DynamicString *)&v60);
              re::DynamicString::operator=((re::DynamicString *)&v65, (re::DynamicString *)&v60);
              if (v60 && (v61 & 1) != 0) {
                (*(void (**)(void))(*(void *)v60 + 40))();
              }
            }
            uint64_t v41 = BYTE8(v65) & 1;
            if (BYTE8(v65)) {
              uint64_t v42 = (const char *)v66;
            }
            else {
              uint64_t v42 = (char *)&v65 + 9;
            }
            float v43 = atof(v42);
            v64.n128_f32[v37] = v43;
            if ((void)v65 && v41) {
              (*(void (**)(void))(*(void *)v65 + 40))();
            }
            ++v37;
          }
          while (v37 != 4);
          re::DynamicArray<re::Vector4<float>>::add(v36, &v64);
          if (++v35 == 95)
          {
            *(unsigned char *)uint64_t v58 = 1;
            goto LABEL_98;
          }
        }
        re::DynamicString::format((re::DynamicString *)"[%s] Failed to parse font layout %lu glyphTexcoordBounds.", (re::DynamicString *)&v65, v57, v35);
LABEL_97:
        long long v53 = v65;
        long long v54 = v66;
        *(unsigned char *)uint64_t v58 = 0;
        *(_OWORD *)(v58 + 8) = v53;
        *(_OWORD *)(v58 + 24) = v54;
LABEL_98:
        uint64_t v49 = v67;
        if (void)v67 && (BYTE8(v67))
        {
          uint64_t v50 = v68;
          goto LABEL_101;
        }
        return re::Result<re::FileStreamReader,re::DetailedError>::~Result((uint64_t)v70);
      }
      re::DynamicString::format((re::DynamicString *)"[%s] Failed to parse font layout belowBaselineHeight.", (re::DynamicString *)&v65, a1);
    }
    else
    {
      re::DynamicString::format((re::DynamicString *)"[%s] Failed to parse font layout lineHeight.", (re::DynamicString *)&v65, a1);
    }
    long long v51 = v65;
    long long v52 = v66;
    *(unsigned char *)a3 = 0;
    *(_OWORD *)(a3 + 8) = v51;
    *(_OWORD *)(a3 + 24) = v52;
    goto LABEL_98;
  }
  re::formattedErrorMessage<re::DetailedError>((uint64_t)v71, (re::DynamicString *)&v65);
  if (BYTE8(v65)) {
    unsigned int v45 = (char *)v66;
  }
  else {
    unsigned int v45 = (char *)&v65 + 9;
  }
  re::DynamicString::format((re::DynamicString *)"[%s] Failed to open font layout file. Error: %s", (re::DynamicString *)&v67, a1, v45);
  long long v46 = v67;
  uint64_t v47 = v68;
  uint64_t v48 = v69;
  *(unsigned char *)a3 = 0;
  *(_OWORD *)(a3 + 8) = v46;
  *(void *)(a3 + 24) = v47;
  *(void *)(a3 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = v48;
  uint64_t v49 = v65;
  if (void)v65 && (BYTE8(v65))
  {
    uint64_t v50 = (const char *)v66;
LABEL_101:
    (*(void (**)(uint64_t, const char *))(*(void *)v49 + 40))(v49, v50);
  }
  return re::Result<re::FileStreamReader,re::DetailedError>::~Result((uint64_t)v70);
}

BOOL re::readLineFromStream(re *this, re::StreamReader *a2, re::DynamicString *a3)
{
  uint64_t v5 = *((void *)a2 + 1);
  if (v5)
  {
    *((void *)a2 + 1) = 1;
    uint64_t v6 = (unsigned char *)*((void *)a2 + 2);
  }
  else
  {
    *((unsigned char *)a2 + 8) = v5 & 1;
    uint64_t v6 = (char *)a2 + 9;
  }
  char v11 = 0;
  *uint64_t v6 = 0;
  while ((*(uint64_t (**)(re *, char *, uint64_t))(*(void *)this + 16))(this, &v11, 1) == 1 && v11 != 10)
  {
    char __src = v11;
    re::DynamicString::append(a2, &__src, 1uLL);
  }
  unint64_t v8 = *((void *)a2 + 1);
  if (v8) {
    unint64_t v9 = v8 >> 1;
  }
  else {
    unint64_t v9 = v8 >> 1;
  }
  return v9 != 0;
}

uint64_t *re::graphicsLogObjects(re *this)
{
  {
    re::graphicsLogObjects(void)::logObjects = (uint64_t)os_log_create("com.apple.re", "Graphics");
  }
  return &re::graphicsLogObjects(void)::logObjects;
}

uint64_t re::GraphicsLoggingUtilities::toStr@<X0>(float *a1@<X0>, re::DynamicString *a2@<X8>)
{
  return re::DynamicString::format((re::DynamicString *)"row0: %g %g %g %g row1: %g %g %g %g row2: %g %g %g %g row3: %g %g %g %g", a2, *a1, a1[4], a1[8], a1[12], a1[1], a1[5], a1[9], a1[13], a1[2], a1[6], a1[10], a1[14], a1[3], a1[7], a1[11], a1[15]);
}

uint64_t re::getOrCreateRenderPipelineState(uint64_t *a1, uint64_t a2)
{
  uint64_t v237 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)a2) {
    unint64_t v4 = re::Hash<re::DynamicString>::operator()((uint64_t)info, a2 + 8);
  }
  else {
    unint64_t v4 = 0;
  }
  if (*(unsigned char *)(a2 + 40)) {
    unint64_t v5 = re::Hash<re::DynamicString>::operator()((uint64_t)info, a2 + 48);
  }
  else {
    unint64_t v5 = 0;
  }
  unint64_t v6 = re::TechniqueDefinitionBuilder::hashFunctionConstants(*(void *)(a2 + 176), *(void *)(a2 + 160), 1);
  unint64_t v7 = re::Hash<re::DynamicString>::operator()((uint64_t)info, a2 + 80);
  unint64_t v8 = re::Hash<re::DynamicString>::operator()((uint64_t)info, a2 + 112);
  uint64_t v9 = 0;
  if (*(unsigned char *)(a2 + 192)) {
    unint64_t v10 = *(void *)(a2 + 200);
  }
  else {
    unint64_t v10 = 0;
  }
  unint64_t v11 = ((v10 << 6)
       + (v10 >> 2)
       - 0x61C8864680B583E9
       + (((*(void *)(a2 + 184) << 6)
         + (*(void *)(a2 + 184) >> 2)
         - 0x61C8864680B583E9
         + (((v8 << 6)
           + (v8 >> 2)
           - 0x61C8864680B583E9
           + (((v7 << 6)
             + (v7 >> 2)
             - 0x61C8864680B583E9
             + (((((((v4 << 6) + (v4 >> 2) - 0x61C8864680B583E9) ^ v4) + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9) ^ v5)
               + (v6 << 6)
               + (v6 >> 2)
               - 0x61C8864680B583E9) ^ v6)) ^ v7)) ^ v8)) ^ *(void *)(a2 + 184))) ^ v10;
  do
  {
    if (*(unsigned char *)(a2 + v9 + 208)) {
      int v12 = *(_DWORD *)(a2 + v9 + 212);
    }
    else {
      int v12 = 0;
    }
    unint64_t v11 = (v11 - 0x61C8864680B583E9 + ((uint64_t)v12 << 6) + ((unint64_t)v12 >> 2)) ^ v12;
    v9 += 8;
  }
  while (v9 != 64);
  if (*(unsigned char *)(a2 + 272)) {
    unint64_t v13 = *(int *)(a2 + 276);
  }
  else {
    unint64_t v13 = 0;
  }
  if (*(unsigned char *)(a2 + 280)) {
    unint64_t v14 = *(int *)(a2 + 284);
  }
  else {
    unint64_t v14 = 0;
  }
  unint64_t v15 = ((v14 << 6) - 0x61C8864680B583E9 + (v14 >> 2) + ((v11 - 0x61C8864680B583E9 + (v13 << 6) + (v13 >> 2)) ^ v13)) ^ v14;
  uint64_t v16 = a1[7];
  if (*(void *)v16)
  {
    uint64_t v17 = *(unsigned int *)(*(void *)(v16 + 8) + 4 * (v15 % *(unsigned int *)(v16 + 24)));
    if (v17 != 0x7FFFFFFF)
    {
      uint64_t v26 = *(void *)(v16 + 16);
      if (*(void *)(v26 + 24 * v17 + 8) == v15) {
        return v26 + 24 * v17 + 16;
      }
      while (1)
      {
        LODWORD(v17) = *(_DWORD *)(v26 + 24 * v17) & 0x7FFFFFFF;
        if (v17 == 0x7FFFFFFF) {
          break;
        }
        if (*(void *)(v26 + 24 * v17 + 8) == v15) {
          return v26 + 24 * v17 + 16;
        }
      }
    }
  }
  if (!*(unsigned char *)(a2 + 288))
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF95EC0, memory_order_acquire) & 1) == 0)
    {
      char v176 = (re::AppleBuild *)__cxa_guard_acquire(&qword_26AF95EC0);
      if (v176)
      {
        _MergedGlobals_392 = *re::AppleBuild::get(v176) == 1;
        __cxa_guard_release(&qword_26AF95EC0);
      }
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF95EC8, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_26AF95EC8))
    {
      re::Defaults::BOOLValue((re::Defaults *)"shouldCrashOnRuntimeCompilation", v177, info);
      if (info[0]) {
        int v178 = &info[1];
      }
      else {
        int v178 = &_MergedGlobals_392;
      }
      byte_26AF95EB9 = *v178;
      __cxa_guard_release(&qword_26AF95EC8);
    }
  }
  uint64_t v18 = mach_absolute_time();
  uint64_t v19 = (id *)a1[7];
  if (*(unsigned char *)a2)
  {
    if (*(void *)(a2 + 16)) {
      uint64_t v20 = *(const char **)(a2 + 24);
    }
    else {
      uint64_t v20 = (const char *)(a2 + 17);
    }
    *(void *)info = re::ShaderManager::getLibraryHash((re::ShaderManager *)a1[7], v20);
    uint64_t v21 = re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet((uint64_t)(v19 + 33), (uint64_t *)info);
    if (*(void *)(a2 + 16)) {
      size_t v22 = *(const char **)(a2 + 24);
    }
    else {
      size_t v22 = (const char *)(a2 + 17);
    }
    unint64_t LibraryHash = re::ShaderManager::getLibraryHash((re::ShaderManager *)a1[7], v22);
    if (!v21) {
      return 0;
    }
    uint64_t v24 = LibraryHash;
    uint64_t v25 = (id *)(v21 + 8);
    uint64_t v19 = (id *)a1[7];
  }
  else
  {
    uint64_t v25 = v19 + 31;
    uint64_t v24 = (uint64_t)v19[32];
  }
  re::ShaderManager::makeRenderPipelineDescriptor((re::ShaderManager *)v19, &v198);
  if (*(unsigned char *)(a2 + 40))
  {
    if (*(void *)(a2 + 56)) {
      uint64_t v28 = *(void *)(a2 + 64);
    }
    else {
      uint64_t v28 = a2 + 57;
    }
    objc_msgSend(v198, sel_setLabel_, objc_msgSend(NSString, sel_stringWithCString_encoding_, v28, 4));
  }
  id v197 = objc_msgSend(objc_msgSend(MEMORY[0x263F128B0], sel_alloc), sel_init);
  uint64_t v29 = *(void *)(a2 + 160);
  if (v29)
  {
    uint64_t v30 = v29 << 6;
    uint64_t v31 = (unsigned __int16 *)(*(void *)(a2 + 176) + 32);
    do
    {
      objc_msgSend(v197, sel_setConstantValue_type_atIndex_, *((void *)v31 + 3), *v31, v31[1]);
      v31 += 32;
      v30 -= 64;
    }
    while (v30);
  }
  if (*(void *)(a2 + 88)) {
    uint64_t v32 = *(void *)(a2 + 96);
  }
  else {
    uint64_t v32 = a2 + 89;
  }
  re::ShaderManager::makeFunctionDescriptor(a1[7], v32, &v197, v25, v24, &v196);
  if (*(void *)(a2 + 120)) {
    uint64_t v33 = *(void *)(a2 + 128);
  }
  else {
    uint64_t v33 = a2 + 121;
  }
  re::ShaderManager::makeFunctionDescriptor(a1[7], v33, &v197, v25, v24, &v195);
  re::mtl::Library::makeFunctionWithDescriptor(v25, v196, &v194);
  if (v194) {
    objc_msgSend(v198, sel_setVertexFunction_);
  }
  re::mtl::Library::makeFunctionWithDescriptor(v25, v195, &v193);
  if (v193) {
    objc_msgSend(v198, sel_setFragmentFunction_);
  }
  objc_msgSend(v198, sel_setRasterSampleCount_, *(void *)(a2 + 184));
  if (*(unsigned char *)(a2 + 192)) {
    objc_msgSend(v198, sel_setMaxVertexAmplificationCount_, *(void *)(a2 + 200));
  }
  uint64_t v34 = 0;
  uint64_t v35 = (int *)(a2 + 212);
  do
  {
    if (*((unsigned char *)v35 - 4) && *v35) {
      objc_msgSend(objc_msgSend(objc_msgSend(v198, sel_colorAttachments), sel_objectAtIndexedSubscript_, v34), sel_setPixelFormat_, *v35);
    }
    ++v34;
    v35 += 2;
  }
  while (v34 != 8);
  int v36 = *(_DWORD *)(a2 + 276);
  if (*(unsigned char *)(a2 + 272)) {
    BOOL v37 = v36 == 0;
  }
  else {
    BOOL v37 = 1;
  }
  if (!v37) {
    objc_msgSend(v198, sel_setDepthAttachmentPixelFormat_, v36);
  }
  if (*(unsigned char *)(a2 + 280))
  {
    int v38 = *(_DWORD *)(a2 + 284);
    if (v38) {
      objc_msgSend(v198, sel_setStencilAttachmentPixelFormat_, v38);
    }
  }
  objc_msgSend(v198, sel_setInputPrimitiveTopology_, 3);
  id v192 = 0;
  uint64_t v39 = (re::mtl::Device *)(a1 + 23);
  re::mtl::Device::makeRenderPipelineState((id *)a1 + 23, (uint64_t)v198, info);
  NS::SharedPtr<MTL::Texture>::operator=(&v192, (void **)info);
  if (*(void *)info) {

  }
  uint64_t v40 = mach_absolute_time();
  uint64_t v41 = v40;
  double v42 = *(double *)&re::convertMachTimeToNanoSecs(unsigned long long)::tmscale;
  if (*(double *)&re::convertMachTimeToNanoSecs(unsigned long long)::tmscale < 0.0)
  {
    uint64_t v40 = mach_timebase_info((mach_timebase_info_t)info);
    if (v40)
    {
      double v45 = NAN;
      goto LABEL_81;
    }
    LODWORD(v4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = *(_DWORD *)info;
    LODWORD(v44) = *(_DWORD *)&info[4];
    double v42 = (double)v43 / (double)v44;
    re::convertMachTimeToNanoSecs(unsigned long long)::tmscale = *(void *)&v42;
  }
  double v45 = v42 * (double)(v41 - v18);
LABEL_81:
  int v46 = (int)(v45 / 1000000.0);
  uint64_t v47 = *re::graphicsLogObjects((re *)v40);
  if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v48 = a2 + 89;
    if (*(void *)(a2 + 88)) {
      uint64_t v48 = *(void *)(a2 + 96);
    }
    if (*(void *)(a2 + 120)) {
      uint64_t v49 = *(void *)(a2 + 128);
    }
    else {
      uint64_t v49 = a2 + 121;
    }
    *(_DWORD *)info = 136446722;
    *(void *)&info[4] = v48;
    __int16 v200 = 2082;
    *(void *)uint64_t v201 = v49;
    *(_WORD *)&v201[8] = 1024;
    *(_DWORD *)unint64_t v202 = v46;
    _os_log_impl(&dword_233120000, v47, OS_LOG_TYPE_DEFAULT, "PSO compilation completed for render pipeline %{public}s/%{public}s in %d", info, 0x1Cu);
  }
  if (*(void *)v16)
  {
    unint64_t v50 = v15 % *(unsigned int *)(v16 + 24);
    uint64_t v51 = *(unsigned int *)(*(void *)(v16 + 8) + 4 * v50);
    if (v51 != 0x7FFFFFFF)
    {
      uint64_t v52 = *(void *)(v16 + 16);
      if (*(void *)(v52 + 24 * v51 + 8) == v15)
      {
LABEL_93:
        uint64_t v53 = v52 + 24 * v51;
        goto LABEL_101;
      }
      while (1)
      {
        LODWORD(v51) = *(_DWORD *)(v52 + 24 * v51) & 0x7FFFFFFF;
        if (v51 == 0x7FFFFFFF) {
          break;
        }
        if (*(void *)(v52 + 24 * v51 + 8) == v15) {
          goto LABEL_93;
        }
      }
    }
  }
  else
  {
    LODWORD(v50) = 0;
  }
  uint64_t v54 = *(unsigned int *)(v16 + 36);
  if (v54 == 0x7FFFFFFF)
  {
    uint64_t v54 = *(unsigned int *)(v16 + 32);
    int v55 = v54;
    if (v54 == *(_DWORD *)(v16 + 24))
    {
      re::HashTable<unsigned long,re::CachedTileRenderPipelineState,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(v16, 2 * *(_DWORD *)(v16 + 28));
      LODWORD(v50) = v15 % *(unsigned int *)(v16 + 24);
      int v55 = *(_DWORD *)(v16 + 32);
    }
    *(_DWORD *)(v16 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = v55 + 1;
    uint64_t v56 = *(void *)(v16 + 16);
    int v57 = *(_DWORD *)(v56 + 24 * v54);
  }
  else
  {
    uint64_t v56 = *(void *)(v16 + 16);
    int v57 = *(_DWORD *)(v56 + 24 * v54);
    *(_DWORD *)(v16 + 36) = v57 & 0x7FFFFFFF;
  }
  uint64_t v58 = 24 * v54;
  *(_DWORD *)(v56 + v58) = v57 | 0x80000000;
  *(_DWORD *)(*(void *)(v16 + 16) + v58) = *(_DWORD *)(*(void *)(v16 + 16) + 24 * v54) & 0x80000000 | *(_DWORD *)(*(void *)(v16 + 8) + 4 * v50);
  *(void *)(*(void *)(v16 + 16) + 24 * v54 + 8) = v15;
  uint64_t v59 = *(void *)(v16 + 16) + 24 * v54;
  *(void *)(v59 + 16) = v192;
  *(_DWORD *)(*(void *)(v16 + 8) + 4 * v50) = v54;
  ++*(_DWORD *)(v16 + 28);
  ++*(_DWORD *)(v16 + 40);
  uint64_t v53 = *(void *)(v16 + 16) + 24 * v54;
LABEL_101:
  uint64_t v27 = v53 + 16;
  if (v46 < 11) {
    goto LABEL_271;
  }
  uint64_t v60 = (re::DynamicString *)re::RenderManager::perFrameAllocator((re::RenderManager *)a1);
  uint64_t v61 = *(void *)(a2 + 160);
  if (!v61)
  {
    uint64_t v65 = 0xFFFFFFFFLL;
    uint64_t v66 = 0xFFFFFFFFLL;
    uint64_t v64 = 0xFFFFFFFFLL;
LABEL_117:
    uint64_t v71 = 0xFFFFFFFFLL;
LABEL_118:
    uint64_t v72 = 0xFFFFFFFFLL;
    uint64_t v73 = 0xFFFFFFFFLL;
    goto LABEL_119;
  }
  uint64_t v62 = *(unsigned __int16 **)(a2 + 176);
  uint64_t v63 = v61 << 6;
  while (!re::TechniqueFunctionConstant::getAs64Bits((re::TechniqueFunctionConstant *)v62))
  {
    v62 += 32;
    v63 -= 64;
    if (!v63)
    {
      uint64_t v64 = 0xFFFFFFFFLL;
      goto LABEL_109;
    }
  }
  uint64_t v64 = v62[17];
LABEL_109:
  uint64_t v67 = *(void *)(a2 + 160);
  if (!v67)
  {
    uint64_t v65 = 0xFFFFFFFFLL;
    uint64_t v66 = 0xFFFFFFFFLL;
    goto LABEL_117;
  }
  int v68 = 0;
  uint64_t v69 = *(unsigned __int16 **)(a2 + 176);
  uint64_t v70 = v67 << 6;
  while (!re::TechniqueFunctionConstant::getAs64Bits((re::TechniqueFunctionConstant *)v69))
  {
LABEL_114:
    v69 += 32;
    v70 -= 64;
    if (!v70)
    {
      uint64_t v71 = 0xFFFFFFFFLL;
      goto LABEL_136;
    }
  }
  if (v68 != 1)
  {
    int v68 = 1;
    goto LABEL_114;
  }
  uint64_t v71 = v69[17];
LABEL_136:
  uint64_t v87 = *(void *)(a2 + 160);
  if (!v87)
  {
    uint64_t v65 = 0xFFFFFFFFLL;
    uint64_t v66 = 0xFFFFFFFFLL;
    goto LABEL_118;
  }
  uint64_t v88 = v71;
  int v89 = 0;
  char v90 = *(unsigned __int16 **)(a2 + 176);
  uint64_t v91 = v87 << 6;
  while (!re::TechniqueFunctionConstant::getAs64Bits((re::TechniqueFunctionConstant *)v90))
  {
LABEL_141:
    v90 += 32;
    v91 -= 64;
    if (!v91)
    {
      uint64_t v66 = 0xFFFFFFFFLL;
      goto LABEL_220;
    }
  }
  if (v89 != 2)
  {
    ++v89;
    goto LABEL_141;
  }
  uint64_t v66 = v90[17];
LABEL_220:
  uint64_t v134 = *(void *)(a2 + 160);
  if (!v134)
  {
    uint64_t v65 = 0xFFFFFFFFLL;
    uint64_t v72 = 0xFFFFFFFFLL;
    uint64_t v73 = 0xFFFFFFFFLL;
    uint64_t v71 = v88;
    goto LABEL_119;
  }
  uint64_t v189 = v66;
  int v135 = 0;
  id v136 = *(unsigned __int16 **)(a2 + 176);
  uint64_t v137 = v134 << 6;
  while (2)
  {
    if (!re::TechniqueFunctionConstant::getAs64Bits((re::TechniqueFunctionConstant *)v136))
    {
LABEL_225:
      v136 += 32;
      v137 -= 64;
      if (!v137)
      {
        uint64_t v138 = v64;
        uint64_t v72 = 0xFFFFFFFFLL;
        goto LABEL_288;
      }
      continue;
    }
    break;
  }
  if (v135 != 3)
  {
    ++v135;
    goto LABEL_225;
  }
  uint64_t v138 = v64;
  uint64_t v72 = v136[17];
LABEL_288:
  uint64_t v156 = *(void *)(a2 + 160);
  if (!v156)
  {
    uint64_t v65 = 0xFFFFFFFFLL;
    uint64_t v73 = 0xFFFFFFFFLL;
    uint64_t v64 = v138;
    uint64_t v71 = v88;
    uint64_t v66 = v189;
    goto LABEL_119;
  }
  uint64_t v185 = v72;
  int v157 = 0;
  int v158 = *(unsigned __int16 **)(a2 + 176);
  uint64_t v159 = v156 << 6;
  while (2)
  {
    if (!re::TechniqueFunctionConstant::getAs64Bits((re::TechniqueFunctionConstant *)v158))
    {
LABEL_293:
      v158 += 32;
      v159 -= 64;
      if (!v159)
      {
        uint64_t v65 = 0xFFFFFFFFLL;
        goto LABEL_306;
      }
      continue;
    }
    break;
  }
  if (v157 != 4)
  {
    ++v157;
    goto LABEL_293;
  }
  uint64_t v65 = v158[17];
LABEL_306:
  uint64_t v164 = *(void *)(a2 + 160);
  if (!v164)
  {
LABEL_312:
    uint64_t v73 = 0xFFFFFFFFLL;
    goto LABEL_323;
  }
  int v165 = 0;
  char v166 = *(unsigned __int16 **)(a2 + 176);
  uint64_t v167 = v164 << 6;
  while (2)
  {
    if (!re::TechniqueFunctionConstant::getAs64Bits((re::TechniqueFunctionConstant *)v166))
    {
LABEL_311:
      v166 += 32;
      v167 -= 64;
      if (!v167) {
        goto LABEL_312;
      }
      continue;
    }
    break;
  }
  if (v165 != 5)
  {
    ++v165;
    goto LABEL_311;
  }
  uint64_t v73 = v166[17];
LABEL_323:
  uint64_t v64 = v138;
  uint64_t v71 = v88;
  uint64_t v72 = v185;
  uint64_t v66 = v189;
LABEL_119:
  uint64_t v74 = *(void *)(a2 + 160);
  if (!v74)
  {
    uint64_t v81 = 0xFFFFFFFFLL;
    uint64_t v82 = 0xFFFFFFFFLL;
    goto LABEL_145;
  }
  uint64_t v179 = v73;
  uint64_t v181 = v64;
  uint64_t v183 = v72;
  uint64_t v187 = v66;
  int v75 = 0;
  id v76 = *(unsigned __int16 **)(a2 + 176);
  uint64_t v77 = v74 << 6;
  while (2)
  {
    if (!re::TechniqueFunctionConstant::getAs64Bits((re::TechniqueFunctionConstant *)v76))
    {
LABEL_124:
      v76 += 32;
      v77 -= 64;
      if (!v77)
      {
        id v78 = v39;
        uint64_t v79 = v27;
        id v80 = v60;
        uint64_t v81 = 0xFFFFFFFFLL;
        goto LABEL_128;
      }
      continue;
    }
    break;
  }
  if (v75 != 6)
  {
    ++v75;
    goto LABEL_124;
  }
  id v78 = v39;
  uint64_t v79 = v27;
  id v80 = v60;
  uint64_t v81 = v76[17];
LABEL_128:
  uint64_t v83 = *(void *)(a2 + 160);
  if (!v83)
  {
LABEL_134:
    uint64_t v82 = 0xFFFFFFFFLL;
    goto LABEL_144;
  }
  int v84 = 0;
  uint64_t v85 = *(unsigned __int16 **)(a2 + 176);
  uint64_t v86 = v83 << 6;
  while (2)
  {
    if (!re::TechniqueFunctionConstant::getAs64Bits((re::TechniqueFunctionConstant *)v85))
    {
LABEL_133:
      v85 += 32;
      v86 -= 64;
      if (!v86) {
        goto LABEL_134;
      }
      continue;
    }
    break;
  }
  if (v84 != 7)
  {
    ++v84;
    goto LABEL_133;
  }
  uint64_t v82 = v85[17];
LABEL_144:
  uint64_t v60 = v80;
  uint64_t v27 = v79;
  uint64_t v39 = v78;
  uint64_t v64 = v181;
  uint64_t v72 = v183;
  uint64_t v66 = v187;
  uint64_t v73 = v179;
LABEL_145:
  if (*(unsigned char *)(a2 + 208)) {
    uint64_t v92 = *(unsigned int *)(a2 + 212);
  }
  else {
    uint64_t v92 = 0xFFFFFFFFLL;
  }
  if (*(unsigned char *)(a2 + 216)) {
    uint64_t v93 = *(unsigned int *)(a2 + 220);
  }
  else {
    uint64_t v93 = 0xFFFFFFFFLL;
  }
  if (*(unsigned char *)(a2 + 224)) {
    uint64_t v94 = *(unsigned int *)(a2 + 228);
  }
  else {
    uint64_t v94 = 0xFFFFFFFFLL;
  }
  if (*(unsigned char *)(a2 + 232)) {
    uint64_t v95 = *(unsigned int *)(a2 + 236);
  }
  else {
    uint64_t v95 = 0xFFFFFFFFLL;
  }
  if (*(unsigned char *)(a2 + 240)) {
    uint64_t v96 = *(unsigned int *)(a2 + 244);
  }
  else {
    uint64_t v96 = 0xFFFFFFFFLL;
  }
  if (*(unsigned char *)(a2 + 248)) {
    uint64_t v97 = *(unsigned int *)(a2 + 252);
  }
  else {
    uint64_t v97 = 0xFFFFFFFFLL;
  }
  if (*(unsigned char *)(a2 + 256)) {
    uint64_t v98 = *(unsigned int *)(a2 + 260);
  }
  else {
    uint64_t v98 = 0xFFFFFFFFLL;
  }
  if (*(unsigned char *)(a2 + 264)) {
    uint64_t v99 = *(unsigned int *)(a2 + 268);
  }
  else {
    uint64_t v99 = 0xFFFFFFFFLL;
  }
  if (*(unsigned char *)(a2 + 272)) {
    uint64_t v100 = *(unsigned int *)(a2 + 276);
  }
  else {
    uint64_t v100 = 0;
  }
  if (*(unsigned char *)(a2 + 280)) {
    uint64_t v101 = *(unsigned int *)(a2 + 284);
  }
  else {
    uint64_t v101 = 0;
  }
  re::DynamicString::format(v60, (re::Allocator *)"fc=%d %d %d %d %d %d %d %d p=%d %d %d %d %d %d %d %d sc=%d d=%d s=%d", (re::DynamicString *)info, v64, v71, v66, v72, v65, v73, v81, v82, v92, v93, v94, v95, v96, v97, v98, v99,
    *(void *)(a2 + 184),
    v100,
    v101);
  if (info[8]) {
    uint64_t v103 = *(re **)&v201[2];
  }
  else {
    uint64_t v103 = (re *)&info[9];
  }
  re::REAnalyticsEventShaderPermutationsForCustomClear(v103, v102);
  if (*(void *)info && (info[8] & 1) != 0) {
    (*(void (**)(void))(**(void **)info + 40))();
  }
  isFrameCaptureEnabled = (re *)re::mtl::Device::isFrameCaptureEnabled(v39);
  unint64_t v105 = *re::graphicsLogObjects(isFrameCaptureEnabled);
  if (!os_log_type_enabled(v105, OS_LOG_TYPE_DEFAULT)) {
    goto LABEL_271;
  }
  if (*(unsigned char *)(a2 + 88)) {
    uint64_t v106 = *(void *)(a2 + 96);
  }
  else {
    uint64_t v106 = a2 + 89;
  }
  uint64_t v107 = *(void *)(a2 + 160);
  if (!v107)
  {
    int v111 = -1;
    int v112 = -1;
    int v191 = -1;
LABEL_201:
    int v117 = -1;
LABEL_202:
    int v118 = -1;
    int v119 = -1;
    goto LABEL_203;
  }
  uint64_t v108 = *(unsigned __int16 **)(a2 + 176);
  uint64_t v109 = v107 << 6;
  while (!re::TechniqueFunctionConstant::getAs64Bits((re::TechniqueFunctionConstant *)v108))
  {
    v108 += 32;
    v109 -= 64;
    if (!v109)
    {
      int v110 = -1;
      goto LABEL_192;
    }
  }
  int v110 = v108[17];
LABEL_192:
  uint64_t v113 = *(void *)(a2 + 160);
  int v191 = v110;
  if (!v113)
  {
    int v111 = -1;
    int v112 = -1;
    goto LABEL_201;
  }
  int v114 = 0;
  unint64_t v115 = *(unsigned __int16 **)(a2 + 176);
  uint64_t v116 = v113 << 6;
  while (!re::TechniqueFunctionConstant::getAs64Bits((re::TechniqueFunctionConstant *)v115))
  {
LABEL_197:
    v115 += 32;
    v116 -= 64;
    if (!v116)
    {
      int v117 = -1;
      goto LABEL_229;
    }
  }
  if (v114 != 1)
  {
    int v114 = 1;
    goto LABEL_197;
  }
  int v117 = v115[17];
LABEL_229:
  uint64_t v139 = *(void *)(a2 + 160);
  if (!v139)
  {
    int v111 = -1;
    int v112 = -1;
    goto LABEL_202;
  }
  int v140 = 0;
  uint64_t v141 = *(unsigned __int16 **)(a2 + 176);
  uint64_t v142 = v139 << 6;
  while (!re::TechniqueFunctionConstant::getAs64Bits((re::TechniqueFunctionConstant *)v141))
  {
LABEL_234:
    v141 += 32;
    v142 -= 64;
    if (!v142)
    {
      int v112 = -1;
      goto LABEL_297;
    }
  }
  if (v140 != 2)
  {
    ++v140;
    goto LABEL_234;
  }
  int v112 = v141[17];
LABEL_297:
  uint64_t v160 = *(void *)(a2 + 160);
  if (!v160)
  {
    int v111 = -1;
    goto LABEL_202;
  }
  int v190 = v112;
  int v161 = 0;
  unint64_t v162 = *(unsigned __int16 **)(a2 + 176);
  uint64_t v163 = v160 << 6;
  while (!re::TechniqueFunctionConstant::getAs64Bits((re::TechniqueFunctionConstant *)v162))
  {
LABEL_302:
    v162 += 32;
    v163 -= 64;
    if (!v163)
    {
      int v118 = -1;
      goto LABEL_314;
    }
  }
  if (v161 != 3)
  {
    ++v161;
    goto LABEL_302;
  }
  int v118 = v162[17];
LABEL_314:
  uint64_t v168 = *(void *)(a2 + 160);
  if (!v168)
  {
    int v111 = -1;
    int v119 = -1;
    int v112 = v190;
    goto LABEL_203;
  }
  int v186 = v118;
  int v169 = 0;
  unsigned int v170 = *(unsigned __int16 **)(a2 + 176);
  uint64_t v171 = v168 << 6;
  while (2)
  {
    if (!re::TechniqueFunctionConstant::getAs64Bits((re::TechniqueFunctionConstant *)v170))
    {
LABEL_319:
      v170 += 32;
      v171 -= 64;
      if (!v171)
      {
        int v111 = -1;
        goto LABEL_325;
      }
      continue;
    }
    break;
  }
  if (v169 != 4)
  {
    ++v169;
    goto LABEL_319;
  }
  int v111 = v170[17];
LABEL_325:
  uint64_t v172 = *(void *)(a2 + 160);
  if (!v172)
  {
LABEL_331:
    int v119 = -1;
    goto LABEL_333;
  }
  int v173 = 0;
  int v174 = *(unsigned __int16 **)(a2 + 176);
  uint64_t v175 = v172 << 6;
  while (2)
  {
    if (!re::TechniqueFunctionConstant::getAs64Bits((re::TechniqueFunctionConstant *)v174))
    {
LABEL_330:
      v174 += 32;
      v175 -= 64;
      if (!v175) {
        goto LABEL_331;
      }
      continue;
    }
    break;
  }
  if (v173 != 5)
  {
    ++v173;
    goto LABEL_330;
  }
  int v119 = v174[17];
LABEL_333:
  int v112 = v190;
  int v118 = v186;
LABEL_203:
  uint64_t v120 = *(void *)(a2 + 160);
  if (!v120)
  {
    int v128 = -1;
    int v129 = -1;
    goto LABEL_238;
  }
  int v180 = v119;
  int v182 = v111;
  int v184 = v118;
  int v188 = v112;
  uint64_t v121 = v106;
  int v122 = (int)isFrameCaptureEnabled;
  int v123 = 0;
  unint64_t v124 = *(unsigned __int16 **)(a2 + 176);
  uint64_t v125 = v120 << 6;
  while (2)
  {
    if (!re::TechniqueFunctionConstant::getAs64Bits((re::TechniqueFunctionConstant *)v124))
    {
LABEL_208:
      v124 += 32;
      v125 -= 64;
      if (!v125)
      {
        uint64_t v126 = v105;
        int v127 = v117;
        int v128 = -1;
        goto LABEL_212;
      }
      continue;
    }
    break;
  }
  if (v123 != 6)
  {
    ++v123;
    goto LABEL_208;
  }
  uint64_t v126 = v105;
  int v127 = v117;
  int v128 = v124[17];
LABEL_212:
  uint64_t v130 = *(void *)(a2 + 160);
  if (!v130)
  {
LABEL_218:
    int v129 = -1;
    goto LABEL_237;
  }
  int v131 = 0;
  long long v132 = *(unsigned __int16 **)(a2 + 176);
  uint64_t v133 = v130 << 6;
  while (2)
  {
    if (!re::TechniqueFunctionConstant::getAs64Bits((re::TechniqueFunctionConstant *)v132))
    {
LABEL_217:
      v132 += 32;
      v133 -= 64;
      if (!v133) {
        goto LABEL_218;
      }
      continue;
    }
    break;
  }
  if (v131 != 7)
  {
    ++v131;
    goto LABEL_217;
  }
  int v129 = v132[17];
LABEL_237:
  LODWORD(isFrameCaptureEnabled) = v122;
  uint64_t v106 = v121;
  int v117 = v127;
  unint64_t v105 = v126;
  int v112 = v188;
  int v118 = v184;
  int v111 = v182;
  int v119 = v180;
LABEL_238:
  if (*(unsigned char *)(a2 + 208)) {
    int v143 = *(_DWORD *)(a2 + 212);
  }
  else {
    int v143 = -1;
  }
  if (*(unsigned char *)(a2 + 216)) {
    int v144 = *(_DWORD *)(a2 + 220);
  }
  else {
    int v144 = -1;
  }
  if (*(unsigned char *)(a2 + 224)) {
    int v145 = *(_DWORD *)(a2 + 228);
  }
  else {
    int v145 = -1;
  }
  if (*(unsigned char *)(a2 + 232)) {
    int v146 = *(_DWORD *)(a2 + 236);
  }
  else {
    int v146 = -1;
  }
  if (*(unsigned char *)(a2 + 240)) {
    int v147 = *(_DWORD *)(a2 + 244);
  }
  else {
    int v147 = -1;
  }
  if (*(unsigned char *)(a2 + 248)) {
    int v148 = *(_DWORD *)(a2 + 252);
  }
  else {
    int v148 = -1;
  }
  if (*(unsigned char *)(a2 + 256)) {
    int v149 = *(_DWORD *)(a2 + 260);
  }
  else {
    int v149 = -1;
  }
  if (*(unsigned char *)(a2 + 264)) {
    int v150 = *(_DWORD *)(a2 + 268);
  }
  else {
    int v150 = -1;
  }
  uint64_t v151 = *(void *)(a2 + 184);
  if (*(unsigned char *)(a2 + 272)) {
    int v152 = *(_DWORD *)(a2 + 276);
  }
  else {
    int v152 = 0;
  }
  if (*(unsigned char *)(a2 + 280)) {
    int v153 = *(_DWORD *)(a2 + 284);
  }
  else {
    int v153 = 0;
  }
  long long v154 = "";
  if (isFrameCaptureEnabled) {
    long long v154 = "(frame capture enabled)";
  }
  *(_DWORD *)info = 136451330;
  *(void *)&info[4] = v106;
  __int16 v200 = 1024;
  *(_DWORD *)uint64_t v201 = v191;
  *(_WORD *)&v201[4] = 1024;
  *(_DWORD *)&v201[6] = v117;
  *(_WORD *)unint64_t v202 = 1024;
  *(_DWORD *)&v202[2] = v112;
  __int16 v203 = 1024;
  int v204 = v118;
  __int16 v205 = 1024;
  int v206 = v111;
  __int16 v207 = 1024;
  int v208 = v119;
  __int16 v209 = 1024;
  int v210 = v128;
  __int16 v211 = 1024;
  int v212 = v129;
  __int16 v213 = 1024;
  int v214 = v143;
  __int16 v215 = 1024;
  int v216 = v144;
  __int16 v217 = 1024;
  int v218 = v145;
  __int16 v219 = 1024;
  int v220 = v146;
  __int16 v221 = 1024;
  int v222 = v147;
  __int16 v223 = 1024;
  int v224 = v148;
  __int16 v225 = 1024;
  int v226 = v149;
  __int16 v227 = 1024;
  int v228 = v150;
  __int16 v229 = 1024;
  int v230 = v151;
  __int16 v231 = 1024;
  int v232 = v152;
  __int16 v233 = 1024;
  int v234 = v153;
  __int16 v235 = 2080;
  int v236 = v154;
  _os_log_impl(&dword_233120000, v105, OS_LOG_TYPE_DEFAULT, "Compiling PSO RT v=%{public}s fc=%d %d %d %d %d %d %d %d p=%d %d %d %d %d %d %d %d sc=%d d=%d s=%d %s", info, 0x88u);
LABEL_271:
  if (v192) {

  }
  if (v193) {
  if (v194)
  }

  if (v195) {
  if (v196)
  }

  if (v197) {
  if (v198)
  }

  return v27;
}

unint64_t re::SamplerTableCollection::hash(re::SamplerTableCollection *this)
{
  unint64_t v2 = 0;
  unint64_t result = 0;
  unint64_t v4 = (char *)this + 16;
  do
  {
    if (*((void *)v4 - 1) && *(void *)v4)
    {
      unint64_t v5 = *(void *)(*(void *)v4 + 48);
    }
    else
    {
      unint64_t v6 = 0x94D049BB133111EBLL
         * ((0xBF58476D1CE4E5B9 * (v2 ^ (v2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v2 ^ (v2 >> 30))) >> 27));
      unint64_t v5 = v6 ^ (v6 >> 31);
    }
    result ^= (result << 6) + (result >> 2) + v5 - 0x61C8864680B583E9;
    ++v2;
    v4 += 24;
  }
  while (v2 != 6);
  return result;
}

void *re::DrawCallRef::DrawCallRef(void *this, const re::DrawCall *a2)
{
  *this = a2;
  {
    uint64_t v3 = this;
    this = v3;
    if (v2)
    {
      unk_2687A02C0 = xmmword_23435FD60;
      xmmword_2687A02D0 = xmmword_23435FD80;
      unk_2687A02E0 = xmmword_23435FBB0;
      this = v3;
    }
  }
  return this;
}

void re::HashTable<re::PipelineStateCacheKey,re::SharedPtr<re::CachedPipelineState>,re::Hash<re::PipelineStateCacheKey>,re::EqualTo<re::PipelineStateCacheKey>,true,false>::clear(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 28))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 24);
    if (v2) {
      memset_pattern16(*(void **)(a1 + 8), &memset_pattern_68_0, 4 * v2);
    }
    unint64_t v3 = *(unsigned int *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = 0;
      for (unint64_t i = 0; i < v3; ++i)
      {
        uint64_t v6 = *(void *)(a1 + 16) + v4;
        int v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
          uint64_t v8 = *(void *)(v6 + 88);
          if (v8)
          {

            *(void *)(v6 + 88) = 0;
            unint64_t v3 = *(unsigned int *)(a1 + 32);
          }
        }
        v4 += 96;
      }
    }
    *(_DWORD *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0;
    int v9 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v9;
  }
}

uint64_t re::MaterialParameterTableLayers::getPrioritizedPassTechniqueMapping(re::MaterialParameterTableLayers *this, uint64_t a2)
{
  uint64_t v4 = (re::MaterialParameterTable *)*((void *)this + 7);
  if (!v4) {
    goto LABEL_5;
  }
  if (re::MaterialParameterTable::kDefaultNameHash(void)::once != -1) {
    dispatch_once(&re::MaterialParameterTable::kDefaultNameHash(void)::once, &__block_literal_global_29);
  }
  uint64_t result = re::MaterialParameterTable::tryGetPassTechniqueMapping(v4, a2, re::MaterialParameterTable::kDefaultNameHash(void)::_kDefaultNameHash);
  if (!result)
  {
LABEL_5:
    uint64_t v6 = (re::MaterialParameterTable *)*((void *)this + 6);
    if (!v6) {
      goto LABEL_9;
    }
    if (re::MaterialParameterTable::kDefaultNameHash(void)::once != -1) {
      dispatch_once(&re::MaterialParameterTable::kDefaultNameHash(void)::once, &__block_literal_global_29);
    }
    uint64_t result = re::MaterialParameterTable::tryGetPassTechniqueMapping(v6, a2, re::MaterialParameterTable::kDefaultNameHash(void)::_kDefaultNameHash);
    if (!result)
    {
LABEL_9:
      int v7 = (re::MaterialParameterTable *)*((void *)this + 9);
      if (!v7) {
        goto LABEL_13;
      }
      if (re::MaterialParameterTable::kDefaultNameHash(void)::once != -1) {
        dispatch_once(&re::MaterialParameterTable::kDefaultNameHash(void)::once, &__block_literal_global_29);
      }
      uint64_t result = re::MaterialParameterTable::tryGetPassTechniqueMapping(v7, a2, re::MaterialParameterTable::kDefaultNameHash(void)::_kDefaultNameHash);
      if (!result)
      {
LABEL_13:
        uint64_t v8 = *((void *)this + 5);
        if (!v8) {
          return 0;
        }
        int v9 = (re::MaterialParameterTable *)(v8 + 224);
        if (re::MaterialParameterTable::kDefaultNameHash(void)::once != -1) {
          dispatch_once(&re::MaterialParameterTable::kDefaultNameHash(void)::once, &__block_literal_global_29);
        }
        uint64_t result = re::MaterialParameterTable::tryGetPassTechniqueMapping(v9, a2, re::MaterialParameterTable::kDefaultNameHash(void)::_kDefaultNameHash);
        if (!result) {
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t re::MaterialParameterTableLayers::getDebugMode(uint64_t this, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = this;
  uint64_t v9 = a3;
  if (!*(unsigned char *)(a2 + 128)
    || (uint64_t v5 = *(void *)(*(void *)(a2 + 40) + 16),
        this = re::HashBrown<unsigned long,re::HashBrown<unsigned long,unsigned short,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::find((void *)(v5 + 184), &v9), this == -1)|| (uint64_t v6 = this, v7 = *(void *)(v5 + 192), this = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v7 + 72 * this + 8), (void *)(a2 + 136)), this == -1))
  {
    *(unsigned char *)uint64_t v3 = 0;
  }
  else
  {
    uint64_t v8 = *(void *)(v7 + 72 * v6 + 16) + 16 * this;
    *(unsigned char *)uint64_t v3 = 1;
    *(_WORD *)(v3 + 2) = *(_WORD *)(v8 + 8);
  }
  return this;
}

uint64_t re::MaterialParameterTableLayers::getTechniqueAtIndex(re::MaterialParameterTableLayers *this, unsigned int a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (!*((unsigned char *)this + 128))
  {
    unint64_t v4 = a2;
    goto LABEL_9;
  }
  uint64_t v3 = (void *)*((void *)this + 5);
  unint64_t v4 = a2;
  if (v3[10] <= (unint64_t)a2)
  {
LABEL_13:
    long long v12 = 0u;
    long long v13 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    long long v9 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_14:
    long long v12 = 0u;
    long long v13 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    long long v9 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (!v3[12]
    || (uint64_t v5 = **(void **)(v3[11] + 40 * a2), !*(unsigned char *)(v5 + 2632))
    || (re::MaterialParameterTableLayers::getDebugMode((uint64_t)&v9, (uint64_t)this, *(void *)(v5 + 2640)), !(_BYTE)v9))
  {
LABEL_9:
    uint64_t v7 = *((void *)this + 5);
    if (*(void *)(v7 + 80) > v4)
    {
      uint64_t v6 = (void *)(v7 + 88);
      return *(void *)(*v6 + 40 * v4);
    }
    long long v12 = 0u;
    long long v13 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    long long v9 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_13;
  }
  if (v3[13] <= v4) {
    goto LABEL_14;
  }
  uint64_t v6 = v3 + 14;
  return *(void *)(*v6 + 40 * v4);
}

void *re::MaterialParameterTableLayers::resolveTechniqueIndices(re::MaterialParameterTableLayers *this, uint64_t a2)
{
  PrioritizedPassTechniqueMapping = (uint64_t *)re::MaterialParameterTableLayers::getPrioritizedPassTechniqueMapping(this, a2);
  if (PrioritizedPassTechniqueMapping
    && (uint64_t v4 = re::HashTable<unsigned long,re::Pair<re::FixedArray<unsigned int>,signed char,true>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(*((void *)this + 5) + 24, PrioritizedPassTechniqueMapping)) != 0)
  {
    return *(void **)(v4 + 16);
  }
  else
  {
    return &re::kInvalidMaterialTechniqueIndex;
  }
}

BOOL re::MaterialParameterTableLayers::containsDirectBuffer(uint64_t *a1, unsigned int a2, int a3)
{
  if (a3 == 2)
  {
    uint64_t v3 = a1[1];
    if (!v3) {
      return 0;
    }
  }
  else
  {
    if (a3 != 1) {
      return 0;
    }
    uint64_t v3 = *a1;
    if (!*a1) {
      return 0;
    }
  }
  if (*(void *)(v3 + 8) > (unint64_t)a2) {
    return *(void *)(*(void *)(v3 + 16) + 8 * a2) != 0;
  }
  return 0;
}

void re::encodeDrawCalls(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  MEMORY[0x270FA5388](a1);
  STACK[0x2E0] = v71;
  uint64_t v73 = v72;
  unint64_t v75 = v74;
  unint64_t v76 = (unint64_t)&STACK[0x1020];
  uint64_t v77 = (uint64_t)&STACK[0xDB0];
  unint64_t v78 = (unint64_t)&STACK[0xCF0];
  STACK[0x1FF8] = *MEMORY[0x263EF8340];
  LODWORD(shouldCompileSynchronously) = *(unsigned __int8 *)(v72[3] + 271) | *((unsigned __int8 *)v72 + 148);
  uint64_t v80 = (uint64_t)&byte_26AF95ED1;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF95ED8, memory_order_acquire) & 1) == 0) {
    goto LABEL_970;
  }
  while (1)
  {
    if (*(unsigned char *)v80) {
      int v81 = *(unsigned __int8 *)(v80 + 1);
    }
    else {
      int v81 = shouldCompileSynchronously;
    }
    LODWORD(STACK[0x3A0]) = v81;
    LODWORD(STACK[0x304]) = v81 != 0;
    uint64_t v82 = *(int8x16_t **)(v73[3] + 24);
    *(_OWORD *)(v76 + 72) = 0u;
    *(_OWORD *)(v76 + 56) = 0u;
    *(_OWORD *)(v76 + 40) = 0u;
    *(int8x16_t *)&STACK[0x1020] = vextq_s8(v82[41], v82[41], 8uLL);
    unint64_t v83 = v82[40].u64[0];
    STACK[0x1078] = 0;
    STACK[0x1040] = v83;
    uint64_t v84 = re::MaterialManager::sceneTextures((re::MaterialManager *)v82, *((unsigned int *)v73 + 36));
    unint64_t v85 = v82[40].u64[1];
    STACK[0x1030] = v84;
    STACK[0x1038] = v85;
    STACK[0x1068] = v73[2] + 368;
    LODWORD(STACK[0xDD0]) = 0;
    *(_OWORD *)&STACK[0xDC0] = 0u;
    *(_OWORD *)&STACK[0xDB0] = 0u;
    STACK[0x1018] = 0;
    *(_OWORD *)(v78 + 2re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0u;
    *(_OWORD *)(v78 + 248) = 0u;
    *(_OWORD *)(v77 + 68) = 0u;
    *(_OWORD *)(v77 + 88) = 0u;
    *(_OWORD *)(v77 + 104) = 0u;
    *(_OWORD *)(v77 + 116) = 0u;
    *(_OWORD *)(v77 + re::DynamicArray<re::RigComponentConstraint>::deinit((uint64_t)this + 136) = 0u;
    *(_OWORD *)(v77 + 152) = 0u;
    *(_OWORD *)(v77 + 164) = 0u;
    *(_OWORD *)(v77 + 184) = 0u;
    *(_OWORD *)(v77 + 200) = 0u;
    *(_OWORD *)(v77 + 212) = 0u;
    *(_OWORD *)(v77 + 260) = 0u;
    *(_OWORD *)(v77 + 248) = 0u;
    *(_OWORD *)(v77 + 2re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0u;
    *(_OWORD *)(v77 + 308) = 0u;
    *(_OWORD *)(v77 + 2re::DynamicArray<re::RigComponentConstraint>::deinit((uint64_t)this + 96) = 0u;
    *(_OWORD *)(v77 + 280) = 0u;
    *(_OWORD *)(v77 + 328) = 0u;
    *(_OWORD *)(v77 + 344) = 0u;
    *(_OWORD *)(v77 + 356) = 0u;
    *(_OWORD *)(v77 + 376) = 0u;
    *(_OWORD *)(v77 + 392) = 0u;
    *(_OWORD *)(v77 + 404) = 0u;
    *(_OWORD *)(v77 + 424) = 0u;
    *(_OWORD *)(v77 + 440) = 0u;
    *(_OWORD *)(v77 + 452) = 0u;
    *(_OWORD *)(v77 + 472) = 0u;
    *(_OWORD *)(v77 + 488) = 0u;
    *(_OWORD *)(v77 + 500) = 0u;
    *(_OWORD *)(v77 + 520) = 0u;
    *(_OWORD *)(v77 + 536) = 0u;
    *(_OWORD *)(v77 + 548) = 0u;
    *(_OWORD *)(v77 + 5re::DynamicArray<re::RigComponentConstraint>::deinit((uint64_t)this + 96) = 0u;
    *(_OWORD *)(v77 + 584) = 0u;
    *(_OWORD *)(v77 + 568) = 0u;
    uint64_t v86 = (void *)v82[45].i64[0];
    unint64_t v87 = v86[10];
    unint64_t v88 = v86[17];
    unint64_t v89 = v86[15];
    STACK[0xDE0] = v86[12];
    STACK[0xDE8] = v87;
    STACK[0xDF0] = v88;
    STACK[0xDF8] = v89;
    STACK[0xE08] = (unint64_t)v86;
    char v90 = (void *)re::MaterialManager::lightBuffers((re::MaterialManager *)v82, *((unsigned int *)v73 + 36));
    unint64_t v91 = v90[10];
    unint64_t v92 = v90[17];
    unint64_t v93 = v90[15];
    STACK[0xE40] = v90[12];
    STACK[0xE48] = v91;
    STACK[0xE50] = v92;
    STACK[0xE58] = v93;
    LODWORD(STACK[0xE60]) = 0;
    STACK[0xE68] = (unint64_t)v90;
    uint64_t v94 = (void *)re::MaterialManager::sceneBuffers((re::MaterialManager *)v82, *((unsigned int *)v73 + 36));
    unint64_t v95 = v94[10];
    unint64_t v96 = v94[17];
    unint64_t v97 = v94[15];
    STACK[0xE10] = v94[12];
    STACK[0xE18] = v95;
    STACK[0xE20] = v96;
    STACK[0xE28] = v97;
    LODWORD(STACK[0xE30]) = 0;
    STACK[0xE38] = (unint64_t)v94;
    uint64_t v98 = (void *)v82[44].i64[1];
    unint64_t v99 = v98[10];
    unint64_t v100 = v98[17];
    unint64_t v101 = v98[15];
    STACK[0xE70] = v98[12];
    STACK[0xE78] = v99;
    STACK[0xE80] = v100;
    STACK[0xE88] = v101;
    LODWORD(STACK[0xE90]) = 0;
    uint64_t v102 = (void *)v73[2];
    uint64_t v103 = v102 + 60;
    unint64_t v104 = v102[72];
    unint64_t v105 = v102[70];
    unint64_t v106 = v102[77];
    unint64_t v107 = v102[75];
    STACK[0xE98] = (unint64_t)v98;
    STACK[0xF60] = v104;
    STACK[0xF68] = v105;
    STACK[0xF70] = v106;
    STACK[0xF78] = v107;
    LODWORD(STACK[0xF80]) = 0;
    *(void *)(v77 + 472) = v103;
    uint64_t v108 = (void *)v82[45].i64[1];
    unint64_t v109 = v108[10];
    unint64_t v110 = v108[17];
    unint64_t v111 = v108[15];
    STACK[0xFC0] = v108[12];
    STACK[0xFC8] = v109;
    STACK[0xFD0] = v110;
    STACK[0xFD8] = v111;
    LODWORD(STACK[0xFE0]) = 0;
    *(void *)(v77 + 568) = v108;
    unint64_t v112 = *((unsigned int *)v73 + 36);
    STACK[0x398] = (unint64_t)v82;
    uint64_t v113 = re::MaterialManager::lightBuffers((re::MaterialManager *)v82, v112);
    uint64_t v114 = *(void *)(v113 + 216);
    if (v114)
    {
      uint64_t v115 = 24 * v114;
      uint64_t v116 = (void *)(*(void *)(v113 + 232) + 16);
      do
      {
        uint64_t v117 = *(v116 - 1);
        if (v117) {
          [*(id *)v75 useResources:*v116 count:v117 usage:1 stages:2];
        }
        v116 += 3;
        v115 -= 24;
      }
      while (v115);
    }
    *(_OWORD *)&STACK[0xDA0] = 0u;
    *(_OWORD *)&STACK[0xD90] = 0u;
    *(_OWORD *)&STACK[0xD80] = 0u;
    *(_OWORD *)&STACK[0xD20] = 0u;
    *(_OWORD *)&STACK[0xD30] = 0u;
    *(_OWORD *)&STACK[0xD70] = 0u;
    *(_OWORD *)&STACK[0xD60] = 0u;
    *(_OWORD *)&STACK[0xD50] = 0u;
    *(_OWORD *)&STACK[0xD40] = 0u;
    int v118 = (re::MaterialManager *)STACK[0x398];
    unint64_t v119 = *(void *)(STACK[0x398] + 888);
    unint64_t v120 = *(void *)(v119 + 80);
    STACK[0xD20] = *(void *)(v119 + 96);
    STACK[0xD28] = v120;
    STACK[0xD30] = v119;
    uint64_t v121 = *(void *)(v73[2] + 24);
    *(_OWORD *)&STACK[0xCF0] = 0u;
    *(_OWORD *)&STACK[0xD00] = 0u;
    LODWORD(STACK[0xD10]) = 0;
    *(void *)(v78 + 36) = 0x7FFFFFFFLL;
    re::HashTable<unsigned long long,re::BufferTable,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::init((uint64_t)&STACK[0xCF0], v121, 3);
    LOBYTE(STACK[0xCD0]) = 0;
    *(_OWORD *)&STACK[0xCC0] = *(_OWORD *)re::MaterialManager::sceneConstants(v118, *((unsigned int *)v73 + 36));
    *(_OWORD *)&STACK[0x800] = xmmword_23435FD50;
    *(_OWORD *)&STACK[0x810] = xmmword_23435FD60;
    *(_OWORD *)&STACK[0x820] = xmmword_23435FD80;
    *(_OWORD *)&STACK[0x830] = xmmword_23435FBB0;
    *(_OWORD *)&STACK[0x840] = xmmword_23435FD50;
    *(_OWORD *)&STACK[0x850] = xmmword_23435FD60;
    *(_OWORD *)&STACK[0x860] = xmmword_23435FD80;
    *(_OWORD *)&STACK[0x870] = xmmword_23435FBB0;
    *(_OWORD *)&STACK[0x880] = xmmword_23435FD50;
    *(_OWORD *)&STACK[0x890] = xmmword_23435FD60;
    *(_OWORD *)&STACK[0x8A0] = xmmword_23435FD80;
    *(_OWORD *)&STACK[0x8B0] = xmmword_23435FBB0;
    *(_OWORD *)&STACK[0x8C0] = xmmword_23435FD50;
    *(_OWORD *)&STACK[0x8D0] = xmmword_23435FD60;
    *(_OWORD *)&STACK[0x8E0] = xmmword_23435FD80;
    *(_OWORD *)&STACK[0x8F0] = xmmword_23435FBB0;
    *(_OWORD *)&STACK[0x900] = xmmword_23435FD50;
    *(_OWORD *)&STACK[0x910] = xmmword_23435FD60;
    *(_OWORD *)&STACK[0x920] = xmmword_23435FD80;
    *(_OWORD *)&STACK[0x930] = xmmword_23435FBB0;
    *(_OWORD *)&STACK[0x940] = xmmword_23435FD50;
    *(_OWORD *)&STACK[0x950] = xmmword_23435FD60;
    *(_OWORD *)&STACK[0x960] = xmmword_23435FD80;
    *(_OWORD *)&STACK[0x970] = xmmword_23435FBB0;
    *(_OWORD *)&STACK[0x980] = xmmword_23435FD50;
    *(_OWORD *)&STACK[0x990] = xmmword_23435FD60;
    *(_OWORD *)&STACK[0x9A0] = xmmword_23435FD80;
    *(_OWORD *)&STACK[0x9B0] = xmmword_23435FBB0;
    *(_OWORD *)&STACK[0x9C0] = xmmword_23435FD50;
    *(_OWORD *)&STACK[0x9D0] = xmmword_23435FD60;
    *(_OWORD *)&STACK[0x9E0] = xmmword_23435FD80;
    *(_OWORD *)&STACK[0x9F0] = xmmword_23435FBB0;
    *(_OWORD *)&STACK[0xA00] = xmmword_23435FD50;
    *(_OWORD *)&STACK[0xA10] = xmmword_23435FD60;
    *(_OWORD *)&STACK[0xA20] = xmmword_23435FD80;
    *(_OWORD *)&STACK[0xA30] = xmmword_23435FBB0;
    *(_OWORD *)&STACK[0xA40] = xmmword_23435FD50;
    *(_OWORD *)&STACK[0xA50] = xmmword_23435FD60;
    *(_OWORD *)&STACK[0xA60] = xmmword_23435FD80;
    *(_OWORD *)&STACK[0xA70] = xmmword_23435FBB0;
    *(_OWORD *)&STACK[0xA80] = xmmword_23435FD50;
    *(_OWORD *)&STACK[0xA90] = xmmword_23435FD60;
    *(_OWORD *)&STACK[0xAA0] = xmmword_23435FD80;
    *(_OWORD *)&STACK[0xAB0] = xmmword_23435FBB0;
    *(_OWORD *)&STACK[0xAC0] = xmmword_23435FD50;
    *(_OWORD *)&STACK[0xAD0] = xmmword_23435FD60;
    *(_OWORD *)&STACK[0xAE0] = xmmword_23435FD80;
    *(_OWORD *)&STACK[0xAF0] = xmmword_23435FBB0;
    *(_OWORD *)&STACK[0xBC0] = 0u;
    *(_OWORD *)&STACK[0xB80] = 0u;
    *(_OWORD *)&STACK[0xB70] = 0u;
    *(_OWORD *)&STACK[0xB60] = 0u;
    *(_OWORD *)&STACK[0xB50] = 0u;
    *(_OWORD *)&STACK[0xB40] = 0u;
    *(_OWORD *)&STACK[0xB30] = 0u;
    *(_OWORD *)&STACK[0xB20] = 0u;
    *(_OWORD *)&STACK[0xB10] = 0u;
    *(_OWORD *)&STACK[0xB00] = 0u;
    *(_OWORD *)&STACK[0xBE0] = 0u;
    *(_OWORD *)&STACK[0xBF0] = 0u;
    uint64_t v122 = v73[1];
    int v123 = *(unsigned __int8 *)(v122 + 40);
    HIDWORD(v760) = *((_DWORD *)v73 + 28);
    LOBYTE(v760) = *((unsigned char *)v73 + 108);
    re::ConstantSetupHelper::populateViewConstants((uint64_t)&STACK[0x800], (float32x4_t *)v73[6], (float32x4_t *)v73[7], *(_OWORD **)(v122 + 48), (float32x4_t *)&STACK[0xCC0], *(uint64_t *)((char *)v73 + 76), v123, v73[4], *(int32x2_t *)((char *)v73 + 84), (int32x2_t)0x3F80000000000000, 0, *(_OWORD *)((char *)v73 + 84), HIDWORD(*(unint64_t *)((char *)v73 + 84)), *(_OWORD **)((char *)v73 + 92), *(float32x4_t **)((char *)v73 + 100), v760);
    uint64_t v124 = v73[8];
    if (v124) {
      re::ViewConstantsLateLatch::copyOriginalViewConstants(v124, &STACK[0x800]);
    }
    unint64_t shouldCompileSynchronously = (unint64_t)&STACK[0x1E60];
    uint64_t v125 = v73[3];
    uint64_t v126 = *(void *)(v125 + 24);
    unint64_t v76 = *(void *)(v126 + 920);
    if (v76 <= 1) {
      goto LABEL_957;
    }
    if (v76 != 2) {
      break;
    }
LABEL_958:
    STACK[0x710] = 0;
    *(_OWORD *)&STACK[0x1300] = 0u;
    *(_OWORD *)&STACK[0x12F0] = 0u;
    *(_OWORD *)&STACK[0x12E0] = 0u;
    *(_OWORD *)&STACK[0x12D0] = 0u;
    *(_OWORD *)&STACK[0x12C0] = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(STACK[0x1ED0]) = 136315906;
    *(void *)(shouldCompileSynchronously + 116) = "operator[]";
    LOWORD(STACK[0x1EDC]) = 1024;
    *(_DWORD *)(shouldCompileSynchronously + 126) = 797;
    LOWORD(STACK[0x1EE2]) = 2048;
    *(void *)(shouldCompileSynchronously + 1re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 2;
    LOWORD(STACK[0x1EEC]) = 2048;
    *(void *)(shouldCompileSynchronously + 142) = 2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_959:
    STACK[0x710] = 0;
    *(_OWORD *)&STACK[0x1300] = 0u;
    *(_OWORD *)&STACK[0x12F0] = 0u;
    *(_OWORD *)&STACK[0x12E0] = 0u;
    *(_OWORD *)&STACK[0x12D0] = 0u;
    *(_OWORD *)&STACK[0x12C0] = 0u;
    uint64_t v80 = &_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(STACK[0x1ED0]) = 136315906;
    *(void *)(shouldCompileSynchronously + 116) = "operator[]";
    LOWORD(STACK[0x1EDC]) = 1024;
    *(_DWORD *)(shouldCompileSynchronously + 126) = 797;
    LOWORD(STACK[0x1EE2]) = 2048;
    *(void *)(shouldCompileSynchronously + 1re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 3;
    LOWORD(STACK[0x1EEC]) = 2048;
    *(void *)(shouldCompileSynchronously + 142) = v76;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_960:
    re::internal::assertLog((re::internal *)6, v684, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v685, v684);
    _os_crash();
    __break(1u);
LABEL_961:
    re::internal::assertLog((re::internal *)6, v687, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v688, v687);
    _os_crash();
    __break(1u);
LABEL_962:
    re::internal::assertLog((re::internal *)4, v490, "assertion failure: '%s' (%s:line %i) ", "samplerIndexBuffer.size() == numTextures", "updateTextureBlockTables", 638);
    _os_crash();
    __break(1u);
LABEL_963:
    re::internal::assertLog((re::internal *)4, v490, "assertion failure: '%s' (%s:line %i) ", "uvIndexBuffer.size() == numTextures", "updateTextureBlockTables", 639);
    _os_crash();
    __break(1u);
LABEL_964:
    re::internal::assertLog((re::internal *)6, v714, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v715, v714);
    _os_crash();
    __break(1u);
LABEL_965:
    re::internal::assertLog((re::internal *)6, v717, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v718, v717);
    _os_crash();
    __break(1u);
LABEL_966:
    re::internal::assertLog((re::internal *)6, v725, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v726, v725);
    _os_crash();
    __break(1u);
LABEL_967:
    re::internal::assertLog((re::internal *)6, v728, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v729, v728);
    _os_crash();
    __break(1u);
LABEL_968:
    re::internal::assertLog((re::internal *)6, v725, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v726, v725);
    _os_crash();
    __break(1u);
LABEL_969:
    re::internal::assertLog((re::internal *)6, v741, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v742, v741);
    _os_crash();
    __break(1u);
LABEL_970:
    if (__cxa_guard_acquire(&qword_26AF95ED8))
    {
      re::Defaults::BOOLValue((re::Defaults *)"compilePipelinesSynchronously", v759, (char *)v80);
      __cxa_atexit((void (*)(void *))re::Optional<BOOL>::~Optional, (void *)v80, &dword_233120000);
      __cxa_guard_release((__guard *)(v80 + 7));
    }
  }
  if (v76 <= 3) {
    goto LABEL_959;
  }
  unint64_t v127 = v73[2];
  unint64_t v128 = *(void *)(v126 + 936);
  *(_OWORD *)&STACK[0x7C0] = 0uLL;
  *(_OWORD *)&STACK[0x7E0] = 0u;
  *(_OWORD *)&STACK[0x7F0] = 0u;
  LODWORD(STACK[0x7D0]) = *(_DWORD *)(v127 + 8);
  LODWORD(STACK[0x7D4]) = *(void *)(v127 + 32);
  *(_OWORD *)&STACK[0x7C0] = *(_OWORD *)&STACK[0xCC0];
  *(_OWORD *)&STACK[0x78C] = 0u;
  *(_OWORD *)&STACK[0x780] = 0u;
  *(_OWORD *)&STACK[0x770] = 0u;
  *(_OWORD *)&STACK[0x760] = 0u;
  *(_OWORD *)&STACK[0x750] = 0u;
  *(_OWORD *)&STACK[0x740] = 0u;
  *(_OWORD *)&STACK[0x730] = 0u;
  *(_OWORD *)&STACK[0x720] = 0u;
  *(_OWORD *)&STACK[0x710] = 0u;
  STACK[0x7B0] = 0;
  STACK[0x7A0] = 0;
  STACK[0x7A8] = 0;
  STACK[0x6F8] = (unint64_t)&unk_26E710B40;
  STACK[0x700] = v128;
  STACK[0x708] = (unint64_t)&STACK[0x7C0];
  STACK[0x6E0] = (unint64_t)&unk_26E710B40;
  STACK[0x6E8] = v128 + 64;
  STACK[0x6F0] = (unint64_t)&STACK[0x800];
  STACK[0x6C8] = (unint64_t)&unk_26E710B40;
  STACK[0x6D0] = v128 + 192;
  STACK[0x6D8] = 0;
  STACK[0x6B0] = (unint64_t)&unk_26E710B40;
  STACK[0x6B8] = v128 + 128;
  STACK[0x6C0] = 0;
  STACK[0x7A8] = *(void *)(v125 + 24) + 944;
  STACK[0x7B0] = 21;
  STACK[0x710] = (unint64_t)&STACK[0x6F8];
  STACK[0x718] = (unint64_t)&STACK[0x6E0];
  STACK[0x728] = (unint64_t)&STACK[0x6C8];
  STACK[0x720] = (unint64_t)&STACK[0x6B0];
  STACK[0x2A8] = v127;
  STACK[0x780] = *(void *)(v127 + 24);
  re::DynamicArray<re::ConstantSource const*>::setCapacity(&STACK[0x780], 0);
  uint64_t v129 = 0;
  ++LODWORD(STACK[0x798]);
  STACK[0x698] = (unint64_t)&STACK[0x710];
  STACK[0x6A0] = (unint64_t)&STACK[0x1020];
  STACK[0x6A8] = (unint64_t)&STACK[0xDB0];
  do
  {
    uint64_t v130 = (char *)&STACK[0x12C0] + v129;
    *(void *)uint64_t v130 = 0;
    *((void *)v130 + 1) = 0;
    v130[16] = 1;
    *((_WORD *)v130 + 9) = 0;
    v129 += 24;
    *((_DWORD *)v130 + 5) = 0;
  }
  while (v129 != 744);
  uint64_t v131 = 744;
  do
  {
    long long v132 = (char *)&STACK[0x12C0] + v131;
    *(void *)long long v132 = 0;
    *((void *)v132 + 1) = 0;
    v132[16] = 1;
    *((_WORD *)v132 + 9) = 0;
    *((_DWORD *)v132 + 5) = 0;
    v131 += 24;
  }
  while (v132 + 24 != (char *)&STACK[0x1890]);
  *(_OWORD *)&STACK[0x1A60] = 0u;
  *(_OWORD *)&STACK[0x1A70] = 0u;
  *(_OWORD *)&STACK[0x1A40] = 0u;
  *(_OWORD *)&STACK[0x1A50] = 0u;
  *(_OWORD *)&STACK[0x1A20] = 0u;
  *(_OWORD *)&STACK[0x1A30] = 0u;
  *(_OWORD *)&STACK[0x1A00] = 0u;
  *(_OWORD *)&STACK[0x1A10] = 0u;
  *(_OWORD *)&STACK[0x19E0] = 0u;
  *(_OWORD *)&STACK[0x19F0] = 0u;
  *(_OWORD *)&STACK[0x19C0] = 0u;
  *(_OWORD *)&STACK[0x19D0] = 0u;
  *(_OWORD *)&STACK[0x19A0] = 0u;
  *(_OWORD *)&STACK[0x19B0] = 0u;
  *(_OWORD *)&STACK[0x1980] = 0u;
  *(_OWORD *)&STACK[0x1990] = 0u;
  *(_OWORD *)&STACK[0x1960] = 0u;
  *(_OWORD *)&STACK[0x1970] = 0u;
  *(_OWORD *)&STACK[0x1940] = 0u;
  *(_OWORD *)&STACK[0x1950] = 0u;
  *(_OWORD *)&STACK[0x1920] = 0u;
  *(_OWORD *)&STACK[0x1930] = 0u;
  *(_OWORD *)&STACK[0x1900] = 0u;
  *(_OWORD *)&STACK[0x1910] = 0u;
  *(_OWORD *)&STACK[0x18E0] = 0u;
  *(_OWORD *)&STACK[0x18F0] = 0u;
  *(_OWORD *)&STACK[0x18C0] = 0u;
  *(_OWORD *)&STACK[0x18D0] = 0u;
  *(_OWORD *)&STACK[0x18A0] = 0u;
  *(_OWORD *)&STACK[0x18B0] = 0u;
  uint64_t v133 = 1984;
  *(_OWORD *)&STACK[0x1890] = 0u;
  do
  {
    *((unsigned char *)&STACK[0x12C0] + v13re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = 0;
    v133 += 16;
  }
  while (v133 != 2480);
  for (uint64_t i = 2480; i != 2976; i += 16)
    *((unsigned char *)&STACK[0x12C0] + i) = 0;
  for (uint64_t j = 0; j != 112; j += 56)
  {
    id v136 = (char *)&STACK[0x628] + j;
    *((void *)v136 + 6) = 0;
    *((_DWORD *)v136 + 11) = 0;
    *(_OWORD *)id v136 = 0uLL;
    *((_OWORD *)v136 + 1) = 0uLL;
    *(_OWORD *)(v136 + 26) = 0uLL;
  }
  re::ArgumentBufferCacheReferences::ArgumentBufferCacheReferences((re::ArgumentBufferCacheReferences *)&STACK[0x5D0], *(re::Allocator **)(v73[2] + 24));
  unint64_t v137 = *(void *)(v73[2] + 24);
  STACK[0x578] = 0;
  STACK[0x568] = 0;
  LODWORD(STACK[0x570]) = 0;
  STACK[0x560] = 0;
  STACK[0x558] = v137;
  uint64_t v138 = (_anonymous_namespace_ *)re::DynamicArray<re::InstanceConstants>::setCapacity(&STACK[0x558], 1uLL);
  int v139 = LODWORD(STACK[0x570]) + 1;
  LODWORD(STACK[0x570]) = v139;
  unint64_t v140 = STACK[0x568];
  unint64_t v141 = STACK[0x560];
  if (STACK[0x568] >= STACK[0x560])
  {
    unint64_t v142 = v140 + 1;
    if (v141 < v140 + 1)
    {
      if (STACK[0x558])
      {
        unint64_t v143 = 2 * v141;
        if (!v141) {
          unint64_t v143 = 8;
        }
        if (v143 <= v142) {
          unint64_t v144 = v140 + 1;
        }
        else {
          unint64_t v144 = v143;
        }
        re::DynamicArray<re::InstanceConstants>::setCapacity(&STACK[0x558], v144);
        int v139 = STACK[0x570];
      }
      else
      {
        re::DynamicArray<re::InstanceConstants>::setCapacity(&STACK[0x558], v142);
        int v139 = LODWORD(STACK[0x570]) + 1;
      }
    }
    unint64_t v140 = STACK[0x568];
  }
  int v145 = (_OWORD *)(STACK[0x578] + (v140 << 8));
  *int v145 = 0u;
  v145[1] = 0u;
  v145[2] = 0u;
  v145[3] = 0u;
  v145[4] = 0u;
  v145[5] = 0u;
  v145[6] = 0u;
  v145[7] = 0u;
  v145[8] = 0u;
  v145[9] = 0u;
  v145[10] = 0u;
  v145[11] = 0u;
  v145[12] = 0u;
  v145[13] = 0u;
  v145[14] = 0u;
  v145[15] = 0u;
  STACK[0x568] = v140 + 1;
  LODWORD(STACK[0x570]) = v139 + 1;
  LOWORD(STACK[0x530]) = 0;
  STACK[0x538] = 0;
  LODWORD(STACK[0x540]) = 0;
  STACK[0x550] = 0;
  STACK[0x548] = 0;
  unint64_t v76 = v73[1];
  unsigned __int8 v146 = *(unsigned char *)(v76 + 56);
  uint64_t v147 = (*(uint64_t (**)(void, char *, void))(*(void *)(v75 + 8) + 64))(**(void **)(v75 + 8), sel_setCullMode_, v146);
  LOBYTE(STACK[0x532]) = v146;
  __int16 v149 = STACK[0x530];
  LOBYTE(v150) = LOWORD(STACK[0x530]) | 1;
  LOWORD(STACK[0x530]) |= 1u;
  int v151 = *(unsigned __int8 *)v76;
  if ((v149 & 2) == 0 || LOBYTE(STACK[0x533]) != v151)
  {
    uint64_t v147 = (*(uint64_t (**)(void, char *, void))(*(void *)(v75 + 8) + 168))(**(void **)(v75 + 8), sel_setTriangleFillMode_, *(unsigned __int8 *)v76);
    LOBYTE(STACK[0x533]) = v151;
    __int16 v150 = LOWORD(STACK[0x530]) | 2;
    LOWORD(STACK[0x530]) = v150;
  }
  int v152 = *(unsigned __int8 *)(v76 + 59);
  if ((v150 & 4) == 0 || LOBYTE(STACK[0x534]) != v152 || LOBYTE(STACK[0x535]) != v152)
  {
    uint64_t v147 = (*(uint64_t (**)(void, char *, void, void))(*(void *)(v75 + 8) + 128))(**(void **)(v75 + 8), sel_setStencilFrontReferenceValue_backReferenceValue_, *(unsigned __int8 *)(v76 + 59), *(unsigned __int8 *)(v76 + 59));
    LOBYTE(STACK[0x534]) = v152;
    LOBYTE(STACK[0x535]) = v152;
    LOWORD(STACK[0x530]) |= 4u;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF95EE8, memory_order_acquire) & 1) == 0)
  {
    uint64_t v147 = __cxa_guard_acquire(&qword_26AF95EE8);
    if (v147)
    {
      re::Defaults::intValue((re::Defaults *)"fallbackRenderingMode", v148, (uint64_t)&byte_26AF95EE0);
      __cxa_guard_release(&qword_26AF95EE8);
    }
  }
  int v153 = v73 + 19;
  if (byte_26AF95EE0) {
    int v153 = &algn_26AF95EE1[3];
  }
  LODWORD(STACK[0x52C]) = *v153;
  uint64_t v154 = *(void *)(v73[3] + 88);
  if (v154)
  {
    STACK[0x1ED0] = 0;
    STACK[0x1ED8] = (unint64_t)"";
    unint64_t v78 = (unint64_t)"fallbackRenderingMode";
    unint64_t v76 = (unint64_t)&STACK[0x1ED0];
    uint64_t v77 = (uint64_t)&STACK[0x52C];
    re::DebugSettingsManager::getWithErrorCode<int>(v154, &STACK[0x1ED0], &STACK[0x52C]);
    re::StringID::destroyString((re::StringID *)&STACK[0x1ED0]);
    re::Defaults::intValue((re::Defaults *)"fallbackRenderingMode", v155, (uint64_t)&STACK[0x1ED0]);
    if (LOBYTE(STACK[0x1ED0])) {
      uint64_t v156 = &STACK[0x1ED4];
    }
    else {
      uint64_t v156 = &STACK[0x52C];
    }
    LODWORD(STACK[0x52C]) = *(_DWORD *)v156;
  }
  int v157 = *(int32x2_t **)(v75 + 64);
  unint64_t v158 = *(void *)(v75 + 48);
  if (v158 == *(void *)(v75 + 56)) {
    goto LABEL_52;
  }
  STACK[0x2B0] = 0;
  *(_DWORD *)&v791[8] = 0;
  uint64_t v792 = 0;
  STACK[0x2D0] = 0;
  v806 = 0;
  uint64_t v804 = 0;
  uint64_t v784 = 0;
  uint64_t v785 = 0;
  uint64_t v812 = 0;
  uint64_t v807 = 0;
  v786 = 0;
  uint64_t v816 = 0;
  uint64_t v794 = 0;
  uint64_t v795 = 0;
  uint64_t v805 = 0;
  uint64_t v814 = 0;
  uint64_t v803 = 0;
  uint64_t v783 = 0;
  uint64_t v813 = 0;
  uint64_t v793 = 0;
  STACK[0x2F0] = 0;
  uint64_t v801 = 0;
  uint64_t v802 = 0;
  STACK[0x318] = 0;
  unsigned __int8 v808 = 0;
  *(void *)v791 = v157[15].u8[0];
  *(_OWORD *)&STACK[0x350] = xmmword_2343C08C0;
  *(_OWORD *)&STACK[0x340] = xmmword_2343C08D0;
  uint64_t vars0 = (re::DynamicString *)&STACK[0x10F8];
  STACK[0x3D0] = (unint64_t)&STACK[0x1EF8];
  STACK[0x370] = (unint64_t)&STACK[0x1F00];
  STACK[0x3B8] = (unint64_t)&STACK[0x1ED9];
  uint64_t v159 = (void *)*v73;
  unint64_t v160 = STACK[0x398];
  v770 = (void *)(STACK[0x398] + 336);
  v790 = (_OWORD *)((unint64_t)&STACK[0x1200] | 0x30);
  STACK[0x2E8] = (unint64_t)&STACK[0x1198];
  STACK[0x3D8] = (unint64_t)&STACK[0x11C0];
  v811 = (void *)(v160 + 144);
  v778 = (void *)(v160 + 48);
  v777 = (void *)(v160 + 240);
  uint64_t vars8 = &STACK[0xF90];
  v776 = (void *)(v160 + 96);
  v774 = (void *)(v160 + 288);
  v775 = (void *)(v160 + 192);
  int v787 = -1;
  STACK[0x3E0] = v75;
  int v782 = v123;
  v765 = v159;
  while (2)
  {
    unint64_t v161 = v159[2];
    if (v161 <= v158) {
      goto LABEL_955;
    }
    unint64_t v162 = v158 >> 7;
    unint64_t v163 = v159[1];
    if (v163 <= v158 >> 7) {
      goto LABEL_956;
    }
    unint64_t v78 = *(void *)(*v159 + 8 * v162);
    unint64_t v796 = v158;
    uint64_t v77 = v158 & 0x7F;
    unint64_t v164 = v78 + (v77 << 7);
    re::MeshStats::setCurrentCategory(*(void *)(v75 + 64), *(int *)v791);
    uint64_t v165 = *(void *)(v164 + 64);
    STACK[0x3C0] = v164 + 64;
    unsigned int v166 = *(_DWORD *)(v164 + 32);
    STACK[0x3C8] = v164 + 32;
    STACK[0x338] = *(void *)(v165 + 40);
    if (v166 <= 1) {
      unsigned int v166 = 1;
    }
    *(_DWORD *)(*(void *)(v75 + 64) + 4) += v166;
    STACK[0x520] = 0;
    STACK[0x3B0] = v164;
    unsigned int v169 = *(_DWORD *)(v164 + 44);
    uint64_t v168 = (unsigned int *)(v164 + 44);
    unsigned int v167 = v169;
    if (v169 == -1)
    {
      int v178 = 0;
    }
    else
    {
      unsigned int v170 = *(_anonymous_namespace_ **)(v75 + 40);
      int v171 = *((unsigned __int8 *)v73 + 156);
      LOBYTE(STACK[0x51E]) = 0;
      unint64_t shouldCompileSynchronously = (unint64_t)v770;
      uint64_t v172 = (re *)re::resolveTechniqueVariant((re::MaterialParameterTableLayers *)v165, v770, v170, v167, &STACK[0x520], v171, (unsigned __int8 *)&STACK[0x51E]);
      char v173 = *(unsigned char *)(v165 + 112);
      char v174 = re::useDitherFade(v172);
      uint64_t v175 = *(_anonymous_namespace_ **)(v75 + 40);
      unsigned int v176 = *v168;
      int v177 = *((unsigned __int8 *)v73 + 156);
      LOBYTE(STACK[0x51C]) = 1;
      LOBYTE(STACK[0x51D]) = v173 | v174;
      int v178 = (uint64_t **)re::resolveTechniqueVariant((re::MaterialParameterTableLayers *)v165, v770, v175, v176, &STACK[0x520], v177, (unsigned __int8 *)&STACK[0x51C]);
      uint64_t v179 = **v178;
      if (*(unsigned char *)(v179 + 2632))
      {
        uint64_t v180 = *(void *)(v179 + 2640);
        LODWORD(STACK[0x1210]) = 0;
        _OWORD *v790 = 0u;
        *(_OWORD *)(((unint64_t)&STACK[0x1200] | 0x30) + 0x10) = 0u;
        *(_OWORD *)(((unint64_t)&STACK[0x1200] | 0x30) + 0x20) = 0u;
        re::MaterialParameterTableLayers::getDebugMode((uint64_t)&STACK[0x518], v165, v180);
        STACK[0x508] = (unint64_t)v178;
        goto LABEL_80;
      }
    }
    LODWORD(STACK[0x1210]) = 0;
    _OWORD *v790 = 0u;
    *(_OWORD *)(((unint64_t)&STACK[0x1200] | 0x30) + 0x10) = 0u;
    *(_OWORD *)(((unint64_t)&STACK[0x1200] | 0x30) + 0x20) = 0u;
    LOBYTE(STACK[0x518]) = 0;
    STACK[0x508] = (unint64_t)v178;
    if (!v178)
    {
LABEL_94:
      uint64_t v181 = 0;
      goto LABEL_95;
    }
LABEL_80:
    uint64_t v181 = *v178;
    if (!*v178) {
      goto LABEL_95;
    }
    if (*((unsigned char *)v181 + 40)) {
      uint64_t v182 = (uint64_t)(v181 + 6);
    }
    else {
      uint64_t v182 = *v181 + 8;
    }
    if (!v181[11]) {
      goto LABEL_94;
    }
    unint64_t v183 = *(void *)(v182 + 32);
    unint64_t v184 = 0x94D049BB133111EBLL
         * ((0xBF58476D1CE4E5B9 * (v183 ^ (v183 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v183 ^ (v183 >> 30))) >> 27));
    uint64_t v185 = *(unsigned int *)(v181[12] + 4 * ((v184 ^ (v184 >> 31)) % *((unsigned int *)v181 + 28)));
    if (v185 == 0x7FFFFFFF) {
      goto LABEL_94;
    }
    uint64_t v186 = v181[13];
    while (*(void *)(v186 + 32 * v185 + 16) != v183)
    {
      uint64_t v185 = *(_DWORD *)(v186 + 32 * v185 + 8) & 0x7FFFFFFF;
      if (v185 == 0x7FFFFFFF) {
        goto LABEL_94;
      }
    }
    if (!*(unsigned char *)(*v181 + 2845)) {
      goto LABEL_94;
    }
    uint64_t v181 = *(uint64_t **)(v186 + 32 * v185 + 24);
    if (!*((unsigned char *)v181 + 16)) {
      uint64_t v181 = 0;
    }
LABEL_95:
    STACK[0x510] = (unint64_t)v181;
    if (LODWORD(STACK[0x52C]) != 2)
    {
      BOOL v187 = LODWORD(STACK[0x52C]) != 1 || v181 == 0;
      if (v187) {
        goto LABEL_102;
      }
      STACK[0x508] = (unint64_t)v181;
    }
    STACK[0x510] = 0;
LABEL_102:
    char v188 = 0;
    uint64_t v189 = 0;
    uint64_t v190 = 0;
    unint64_t v191 = v78 + (v77 << 7);
    LODWORD(STACK[0xE60]) = *(_DWORD *)(v191 + 88);
    STACK[0x3F8] = v191 + 4;
    STACK[0x390] = v191 + 94;
    STACK[0x388] = v191 + 95;
    STACK[0x380] = v191 + 80;
    STACK[0x368] = v191 + 120;
    STACK[0x3A8] = v191 + 3;
    STACK[0x3F0] = v191 + 76;
    unint64_t v192 = STACK[0x338];
    STACK[0x2C8] = STACK[0x338] + 376;
    STACK[0x2C0] = v192 + 488;
    STACK[0x330] = v191 + 56;
    STACK[0x2B8] = v191 + 112;
    STACK[0x328] = v191 + 72;
    unint64_t v799 = v192 + 1016;
    unint64_t v800 = v192 + 904;
    v781 = (unsigned __int16 *)(v191 + 12);
    v797 = (unsigned __int16 *)(v191 + 92);
    STACK[0x310] = v191 + 36;
    STACK[0x308] = v191 + 10;
    v798 = (unsigned __int8 *)(v191 + 8);
    v780 = (unsigned int *)(v191 + 24);
    v772 = (unsigned int *)(v191 + 40);
    v769 = (_DWORD *)(v191 + 20);
    v766 = (unsigned __int8 *)(v191 + 2);
    v768 = (unsigned int *)(v191 + 28);
    v779 = (int *)(v191 + 16);
    v815 = (uint64_t **)(v191 + 104);
    do
    {
      unint64_t v76 = v189;
      if (v188)
      {
        char v188 = 1;
        goto LABEL_794;
      }
      uint64_t v77 = *(&STACK[0x508] + v190);
      float v193 = *(float *)(v165 + 152);
      BOOL v187 = LODWORD(STACK[0x3A0]) == 0;
      STACK[0x3E8] = v77;
      if (v187)
      {
        if (!v77)
        {
LABEL_130:
          unsigned __int16 v210 = 0;
          int v211 = *(_DWORD *)STACK[0x3F8];
          int v212 = *(_DWORD *)(v165 + 156);
          char v213 = *(unsigned char *)(v165 + 164);
          char v214 = 1;
          LODWORD(shouldCompileSynchronously) = STACK[0x304];
          int v215 = *(_DWORD *)(v165 + 120);
          goto LABEL_136;
        }
        unint64_t shouldCompileSynchronously = re::MaterialTechniqueVariant::shouldCompileSynchronously((re::MaterialTechniqueVariant *)v77);
      }
      else
      {
        if (!v77) {
          goto LABEL_130;
        }
        unint64_t shouldCompileSynchronously = 1;
      }
      unint64_t v194 = STACK[0x520];
      unint64_t v195 = v73[3];
      unint64_t v78 = v77 + 17;
      int v196 = atomic_load((unsigned __int8 *)(v77 + 17));
      if (!v196)
      {
        STACK[0x1ED8] = v77;
        STACK[0x1ED0] = v194;
        STACK[0x1EE0] = v195;
        int v196 = 2;
        atomic_store(2u, (unsigned __int8 *)v78);
        re::dispatchMaterialPipelineDataCompilation(&STACK[0x1ED0]);
      }
      char v197 = shouldCompileSynchronously ^ 1;
      if (v196 != 2) {
        char v197 = 1;
      }
      if ((v197 & 1) == 0)
      {
        v198.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
        int v199 = atomic_load((unsigned __int8 *)v78);
        if (v199 == 2)
        {
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep = v198.__d_.__rep_;
          int v201 = 65;
          while (--v201)
          {
            int v202 = atomic_load((unsigned __int8 *)v78);
            if (v202 != 2) {
              goto LABEL_126;
            }
          }
          do
          {
            v203.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_ - rep;
            if (v203.__d_.__rep_ < 64001)
            {
              if (v203.__d_.__rep_ >= 4001) {
                sched_yield();
              }
            }
            else
            {
              std::__cxx_contention_t v204 = std::__libcpp_atomic_monitor((const void *)(v77 + 17));
              int v205 = atomic_load((unsigned __int8 *)v78);
              if (v205 != 2) {
                break;
              }
              std::__libcpp_atomic_wait((const void *)(v77 + 17), v204);
            }
            int v206 = atomic_load((unsigned __int8 *)v78);
          }
          while (v206 == 2);
        }
LABEL_126:
        int v196 = atomic_load((unsigned __int8 *)v78);
      }
      if (v196 != 1)
      {
        char v188 = 0;
        goto LABEL_794;
      }
      uint64_t v207 = *(void *)(v77 + 8);
      uint64_t v208 = *(void *)(v207 + 24);
      if (v208) {
        int v209 = *(unsigned __int16 *)(v208 + 328) + 1;
      }
      else {
        int v209 = 0;
      }
      char v214 = 0;
      int v211 = *(_DWORD *)STACK[0x3F8];
      int v212 = *(_DWORD *)(v165 + 156);
      char v213 = *(unsigned char *)(v165 + 164);
      int v215 = *(_DWORD *)(v165 + 120);
      int v216 = *(unsigned __int16 *)(*(void *)(v207 + 16) + 328);
      if (v216 + 1 > v209) {
        unsigned __int16 v210 = v216 + 1;
      }
      else {
        unsigned __int16 v210 = v209;
      }
LABEL_136:
      int v217 = LOBYTE(STACK[0x518]);
      unsigned int v218 = LOWORD(STACK[0x51A]);
      int v219 = *(_DWORD *)STACK[0x3C8];
      int v220 = *(_DWORD *)(v165 + 160);
      if (*(unsigned char *)STACK[0x390]) {
        char v221 = *(unsigned char *)STACK[0x388];
      }
      else {
        char v221 = 0;
      }
      unint64_t v222 = *(void *)STACK[0x380];
      unint64_t v223 = *(void *)STACK[0x368];
      LODWORD(STACK[0x1200]) = bswap32((unsigned __int16)v211) & 0xFFFF0000 | HIWORD(v211);
      if (v193 <= 1.0) {
        float v224 = v193;
      }
      else {
        float v224 = 1.0;
      }
      if (v224 < 0.0) {
        float v224 = 0.0;
      }
      *(float *)&STACK[0x1204] = v224;
      LODWORD(STACK[0x1208]) = v212;
      if (v217) {
        uint64_t v77 = v218;
      }
      else {
        uint64_t v77 = 0;
      }
      LODWORD(STACK[0x1210]) = v215;
      LODWORD(STACK[0x120C]) = v77;
      LOBYTE(STACK[0x1224]) = 0;
      LODWORD(STACK[0x1214]) = v210;
      LODWORD(STACK[0x1218]) = 0;
      *(_OWORD *)&STACK[0x1240] = *(_OWORD *)&STACK[0x350];
      *(_OWORD *)&STACK[0x1250] = *(_OWORD *)&STACK[0x340];
      LOBYTE(STACK[0x1225]) = v221;
      LOBYTE(STACK[0x1226]) = v213;
      LODWORD(STACK[0x1220]) = 1065353216;
      LODWORD(STACK[0x121C]) = v219;
      LODWORD(STACK[0x1228]) = v220;
      if (*(unsigned char *)(v165 + 176))
      {
        float32x4_t v226 = *(float32x4_t *)(v165 + 208);
        float32x4_t v225 = vmulq_f32(v226, vsubq_f32(*(float32x4_t *)(v165 + 192), *(float32x4_t *)&STACK[0xCC0]));
        v226.f32[3] = -vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v225, 2), vaddq_f32(v225, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v225.f32, 1))).f32[0];
      }
      else
      {
        float32x4_t v226 = 0uLL;
      }
      *(float32x4_t *)&STACK[0x1230] = v226;
      STACK[0x1260] = v222;
      STACK[0x1268] = v223;
      STACK[0x6C0] = (unint64_t)&STACK[0x1200];
      unint64_t v227 = STACK[0x568];
      unint64_t v78 = *(unsigned int *)STACK[0x3C8];
      unsigned int v228 = *(_DWORD *)STACK[0x3C8];
      BOOL v229 = STACK[0x568] >= v78;
      LODWORD(STACK[0x3A4]) = v76;
      LODWORD(STACK[0x378]) = shouldCompileSynchronously;
      if (v229)
      {
        unint64_t v78 = v227;
      }
      else
      {
        if (STACK[0x560] < v78)
        {
          re::DynamicArray<re::InstanceConstants>::setCapacity(&STACK[0x558], v78);
          unsigned int v228 = *(_DWORD *)STACK[0x3C8];
        }
        STACK[0x568] = v78;
        ++LODWORD(STACK[0x570]);
      }
      if (*(unsigned char *)STACK[0x3A8] == 2) {
        unint64_t v75 = v228;
      }
      else {
        unint64_t v75 = 1;
      }
      int v230 = (unint64_t *)STACK[0x578];
      if ((int)v75 >= 1)
      {
        unint64_t v76 = 0;
        unint64_t shouldCompileSynchronously = STACK[0x578];
        while (v78 != v76)
        {
          __int16 v231 = (void *)*v73;
          unint64_t v232 = (v76 + *(_DWORD *)STACK[0x3F0]);
          unint64_t v233 = *(void *)(*v73 + 40);
          if (v233 <= v232) {
            goto LABEL_937;
          }
          unint64_t v234 = v232 >> 7;
          unint64_t v235 = v231[4];
          if (v235 <= v232 >> 7) {
            goto LABEL_938;
          }
          unint64_t v236 = v231[11];
          if (v236 <= v232) {
            goto LABEL_939;
          }
          unint64_t v237 = v231[10];
          if (v237 <= v234) {
            goto LABEL_940;
          }
          unint64_t v238 = v231[14];
          if (v238 <= v232) {
            goto LABEL_941;
          }
          unint64_t v239 = v231[13];
          if (v239 <= v234) {
            goto LABEL_942;
          }
          re::ConstantSetupHelper::populateInstanceConstants(shouldCompileSynchronously, *(void *)(v231[3] + 8 * v234) + ((unint64_t)(((_BYTE)v76 + *(unsigned char *)STACK[0x3F0]) & 0x7F) << 6), (float32x4_t *)&STACK[0xCC0], *(_DWORD *)(*(void *)(v231[12] + 8 * v234) + 4 * (((_BYTE)v76 + *(unsigned char *)STACK[0x3F0]) & 0x7F)), *(float *)(*(void *)(v231[9] + 8 * v234) + 4 * (((_BYTE)v76 + *(unsigned char *)STACK[0x3F0]) & 0x7F)));
          if (v214)
          {
            unsigned __int16 v240 = 0;
          }
          else
          {
            uint64_t v241 = *(void *)(STACK[0x3E8] + 8);
            uint64_t v242 = *(void *)(v241 + 24);
            if (v242) {
              LODWORD(v242) = *(unsigned __int16 *)(v242 + 328) + 1;
            }
            int v243 = *(unsigned __int16 *)(*(void *)(v241 + 16) + 328);
            if (v243 + 1 > (int)v242) {
              unsigned __int16 v240 = v243 + 1;
            }
            else {
              unsigned __int16 v240 = v242;
            }
          }
          int v244 = *(_DWORD *)(v165 + 152);
          *(_DWORD *)(shouldCompileSynchronously + 124) = bswap32((unsigned __int16)*(_DWORD *)STACK[0x3F8]) & 0xFFFF0000 | (unsigned __int16)HIWORD(*(_DWORD *)STACK[0x3F8]);
          *(_DWORD *)(shouldCompileSynchronously + 128) = v244;
          *(_DWORD *)(shouldCompileSynchronously + re::DynamicArray<re::RigComponentConstraint>::deinit((uint64_t)this + 136) = v77;
          *(_DWORD *)(shouldCompileSynchronously + 140) = v240;
          *(_DWORD *)(shouldCompileSynchronously + 1re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = v123;
          ++v76;
          shouldCompileSynchronously += 256;
          if (v75 == v76) {
            goto LABEL_175;
          }
        }
        STACK[0x1E60] = 0;
        *(_OWORD *)&STACK[0x1F10] = 0u;
        *(_OWORD *)&STACK[0x1F00] = 0u;
        *(_OWORD *)&STACK[0x1EF0] = 0u;
        *(_OWORD *)&STACK[0x1EE0] = 0u;
        *(_OWORD *)&STACK[0x1ED0] = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        LODWORD(STACK[0x1190]) = 136315906;
        STACK[0x1194] = (unint64_t)"operator[]";
        LOWORD(STACK[0x119C]) = 1024;
        LODWORD(STACK[0x119E]) = 789;
        LOWORD(STACK[0x11A2]) = 2048;
        STACK[0x11A4] = v78;
        LOWORD(STACK[0x11AC]) = 2048;
        STACK[0x11AE] = v78;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_937:
        re::internal::assertLog((re::internal *)6, (uint64_t)v148, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 296, v232, v233);
        _os_crash();
        __break(1u);
LABEL_938:
        re::internal::assertLog((re::internal *)6, (uint64_t)v148, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v234, v235);
        _os_crash();
        __break(1u);
LABEL_939:
        re::internal::assertLog((re::internal *)6, (uint64_t)v148, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 296, v232, v236);
        _os_crash();
        __break(1u);
LABEL_940:
        re::internal::assertLog((re::internal *)6, (uint64_t)v148, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v234, v237);
        _os_crash();
        __break(1u);
LABEL_941:
        re::internal::assertLog((re::internal *)6, (uint64_t)v148, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 296, v232, v238);
        _os_crash();
        __break(1u);
LABEL_942:
        re::internal::assertLog((re::internal *)6, (uint64_t)v148, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v234, v239);
        _os_crash();
        __break(1u);
        goto LABEL_943;
      }
LABEL_175:
      STACK[0x6D8] = (unint64_t)v230;
      unint64_t shouldCompileSynchronously = STACK[0x3C0];
      uint64_t v245 = *(void *)(*(void *)STACK[0x3C0] + 56);
      if (v245) {
        unint64_t v246 = v245 + 152;
      }
      else {
        unint64_t v246 = 0;
      }
      STACK[0x758] = v246;
      uint64_t v247 = *(void **)(*(void *)shouldCompileSynchronously + 64);
      if (v247) {
        uint64_t v247 = (void *)*v247;
      }
      unint64_t v75 = STACK[0x3E0];
      int v230 = &STACK[0x1E60];
      uint64_t v77 = STACK[0x3E8];
      STACK[0x778] = (unint64_t)v247;
      uint64_t v248 = *(void *)(*(void *)shouldCompileSynchronously + 48);
      if (v248) {
        unint64_t v249 = v248 + 152;
      }
      else {
        unint64_t v249 = 0;
      }
      STACK[0x750] = v249;
      uint64_t v250 = *(void *)(*(void *)shouldCompileSynchronously + 72);
      if (v250) {
        unint64_t v251 = v250 + 152;
      }
      else {
        unint64_t v251 = 0;
      }
      STACK[0x760] = v251;
      int v252 = *(void **)(*(void *)shouldCompileSynchronously + 56);
      if (v252)
      {
        unint64_t v253 = (unint64_t)(v252 + 33);
        unint64_t v254 = v252[45];
        unint64_t v255 = v252[43];
        unint64_t v256 = v252[50];
        int v252 = (void *)v252[48];
      }
      else
      {
        unint64_t v254 = 0;
        unint64_t v255 = 0;
        unint64_t v256 = 0;
        unint64_t v253 = 0;
      }
      STACK[0xF30] = v254;
      STACK[0xF38] = v255;
      STACK[0xF40] = v256;
      STACK[0xF48] = (unint64_t)v252;
      LODWORD(STACK[0xF50]) = 0;
      STACK[0xF58] = v253;
      unint64_t v257 = *(void **)(*(void *)shouldCompileSynchronously + 48);
      if (v257)
      {
        unint64_t v258 = (unint64_t)(v257 + 33);
        unint64_t v259 = v257[45];
        unint64_t v260 = v257[43];
        unint64_t v261 = v257[50];
        unint64_t v257 = (void *)v257[48];
      }
      else
      {
        unint64_t v259 = 0;
        unint64_t v260 = 0;
        unint64_t v261 = 0;
        unint64_t v258 = 0;
      }
      STACK[0xF00] = v259;
      STACK[0xF08] = v260;
      STACK[0xF10] = v261;
      STACK[0xF18] = (unint64_t)v257;
      LODWORD(STACK[0xF20]) = 0;
      STACK[0xF28] = v258;
      char v262 = *(void **)(*(void *)shouldCompileSynchronously + 72);
      if (v262)
      {
        unint64_t v263 = (unint64_t)(v262 + 33);
        unint64_t v264 = v262[45];
        unint64_t v265 = v262[43];
        unint64_t v266 = v262[50];
        char v262 = (void *)v262[48];
      }
      else
      {
        unint64_t v264 = 0;
        unint64_t v265 = 0;
        unint64_t v266 = 0;
        unint64_t v263 = 0;
      }
      STACK[0xFF0] = v264;
      STACK[0xFF8] = v265;
      STACK[0x1000] = v266;
      STACK[0x1008] = (unint64_t)v262;
      LODWORD(STACK[0x1010]) = 0;
      STACK[0x1018] = v263;
      uint64_t v267 = *(void **)shouldCompileSynchronously;
      uint64_t v268 = *(void *)(*(void *)shouldCompileSynchronously + 56);
      if (v268) {
        unint64_t v269 = v268 + 680;
      }
      else {
        unint64_t v269 = 0;
      }
      STACK[0x1060] = v269;
      unint64_t v270 = v267[8];
      if (v270) {
        unint64_t v270 = *(void *)(v270 + 8);
      }
      STACK[0x1078] = v270;
      uint64_t v271 = v267[6];
      if (v271) {
        unint64_t v272 = v271 + 680;
      }
      else {
        unint64_t v272 = 0;
      }
      uint64_t v273 = v267[9];
      if (v273) {
        unint64_t v274 = v273 + 680;
      }
      else {
        unint64_t v274 = 0;
      }
      STACK[0x1058] = v272;
      STACK[0x1070] = v274;
      unint64_t v275 = v267[7];
      if (v275)
      {
        unint64_t v276 = v275 + 792;
        unint64_t v277 = *(void *)(v275 + 888);
        unint64_t v275 = *(void *)(v275 + 872);
      }
      else
      {
        unint64_t v277 = 0;
        unint64_t v276 = 0;
      }
      STACK[0xD80] = v277;
      STACK[0xD88] = v275;
      STACK[0xD90] = v276;
      unint64_t v278 = *(void *)(*(void *)shouldCompileSynchronously + 48);
      if (v278)
      {
        unint64_t v279 = v278 + 792;
        unint64_t v280 = *(void *)(v278 + 888);
        unint64_t v278 = *(void *)(v278 + 872);
      }
      else
      {
        unint64_t v280 = 0;
        unint64_t v279 = 0;
      }
      STACK[0xD68] = v280;
      STACK[0xD70] = v278;
      STACK[0xD78] = v279;
      unint64_t v281 = *(void *)(*(void *)shouldCompileSynchronously + 72);
      if (v281)
      {
        unint64_t v282 = v281 + 792;
        unint64_t v283 = *(void *)(v281 + 888);
        unint64_t v281 = *(void *)(v281 + 872);
      }
      else
      {
        unint64_t v283 = 0;
        unint64_t v282 = 0;
      }
      STACK[0xD98] = v283;
      STACK[0xDA0] = v281;
      STACK[0xDA8] = v282;
      if (*(unsigned char *)STACK[0x3A8] == 1)
      {
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF95EF0, memory_order_acquire) & 1) == 0
          && __cxa_guard_acquire(&qword_26AF95EF0))
        {
          re::Defaults::BOOLValue((re::Defaults *)"skipDrawCallHandlers", v756, (char *)&STACK[0x1ED0]);
          if (LOBYTE(STACK[0x1ED0])) {
            char v757 = STACK[0x1ED1];
          }
          else {
            char v757 = 0;
          }
          _MergedGlobals_393 = v757;
          __cxa_guard_release(&qword_26AF95EF0);
        }
        uint64_t v284 = *(void *)(v75 + 64);
        long long v285 = (unsigned __int8 *)STACK[0x308];
        if (*(unsigned char *)(v284 + 120) != 3)
        {
          *(unsigned char *)(v284 + 120) = 3;
          *(void *)(v284 + re::DynamicArray<re::RigComponentConstraint>::deinit((uint64_t)this + 96) = v284 + 56;
          *(void *)(v284 + 104) = v284 + 60;
          *(void *)(v284 + 112) = v284 + 64;
        }
        re::EncoderState::setVertexAmplificationCountForState((_anonymous_namespace_ *)&STACK[0x530], (_anonymous_namespace_ *)*((unsigned __int8 *)v73 + 108), *(unsigned __int8 *)(v73[3] + 302), v73[1] + 8, *(unsigned __int8 *)STACK[0x310], *v285, v75);
        unint64_t shouldCompileSynchronously = v73[1];
        unint64_t v286 = v73[4];
        unint64_t v287 = (void *)v73[8];
        if (v287)
        {
          STACK[0x1ED0] = v287[197];
          STACK[0x1ED8] = 0;
          re::DynamicArray<re::PatchHandler>::add((_anonymous_namespace_ *)(v287 + 197), (__n128 *)&STACK[0x1ED0]);
          uint64_t v77 = v287[201] + 16 * v287[199] - 16;
        }
        else
        {
          uint64_t v77 = 0;
        }
        int v291 = *(_DWORD *)(v165 + 152);
        char v292 = *(unsigned char *)STACK[0x328];
        unint64_t v78 = *((unsigned __int8 *)v73 + 156);
        re::resolveStencilInfo((uint64_t)&STACK[0x1ED0], STACK[0x3B0], v73[5], 0);
        LODWORD(STACK[0x364]) = STACK[0x364] & 0xFFFFFF00 | LOBYTE(STACK[0x1EE0]);
        if (!_MergedGlobals_393)
        {
          v293.i32[0] = STACK[0x1ED0];
          int v295 = STACK[0x1ED4];
          v294.i32[0] = STACK[0x1ED8];
          int v296 = STACK[0x1EDC];
          unint64_t v297 = *(void *)(v75 + 64);
          uint64_t v298 = **v815;
          STACK[0x1ED0] = (unint64_t)&STACK[0x1020];
          STACK[0x1ED8] = (unint64_t)&STACK[0xDB0];
          STACK[0x1EE0] = (unint64_t)&STACK[0xD20];
          STACK[0x1EE8] = (unint64_t)&STACK[0x710];
          STACK[0x1EF0] = shouldCompileSynchronously + 8;
          STACK[0x1EF8] = v286;
          STACK[0x1F00] = v165 + 88;
          STACK[0x1F08] = v77;
          LODWORD(STACK[0x1F10]) = vmovn_s16((int16x8_t)vmovl_u8(v293)).u32[0];
          LODWORD(STACK[0x1F14]) = v295;
          LODWORD(STACK[0x1F18]) = vmovn_s16((int16x8_t)vmovl_u8(v294)).u32[0];
          LODWORD(STACK[0x1F1C]) = v296;
          LODWORD(STACK[0x1F20]) = STACK[0x364];
          LODWORD(STACK[0x1F24]) = v291;
          LOBYTE(STACK[0x1F28]) = v292;
          LOWORD(STACK[0x1F29]) = v78;
          STACK[0x1F30] = v297;
          STACK[0x1F38] = (unint64_t)&STACK[0x530];
          (*(void (**)(void))(v298 + 16))();
          if (STACK[0x2E0])
          {
            LOBYTE(STACK[0x4E0]) = 0;
            LOBYTE(STACK[0x4B8]) = 0;
            LOBYTE(STACK[0x450]) = 0;
            uint64_t v747 = v73[5];
            char v748 = *(unsigned char *)(v747 + 16);
            *(_OWORD *)&STACK[0x430] = *(_OWORD *)v747;
            LOBYTE(STACK[0x440]) = v748;
            re::DrawCallRecorderGroup::recordEncodedDrawCall(STACK[0x2E0], STACK[0x3B0], 0, (unsigned __int8 *)&STACK[0x4E0], (unsigned __int8 *)&STACK[0x4B8], (uint64_t)&STACK[0x450], (uint64_t)&STACK[0x430], 0, 1);
            if (LOBYTE(STACK[0x450]) && STACK[0x490])
            {
              if (STACK[0x4B0]) {
                (*(void (**)(unint64_t))(*(void *)STACK[0x490] + 40))(STACK[0x490]);
              }
              STACK[0x4B0] = 0;
              STACK[0x498] = 0;
              STACK[0x4A0] = 0;
              STACK[0x490] = 0;
              ++LODWORD(STACK[0x4A8]);
            }
            if (LOBYTE(STACK[0x4B8]) && STACK[0x4C0])
            {
              if (STACK[0x4C8]) {
                (*(void (**)(unint64_t, unint64_t))(*(void *)STACK[0x4C0] + 40))(STACK[0x4C0], STACK[0x4D0]);
              }
              *(_OWORD *)&STACK[0x4C0] = 0u;
              *(_OWORD *)&STACK[0x4D0] = 0u;
            }
            if (LOBYTE(STACK[0x4E0]) && STACK[0x4E8])
            {
              if (STACK[0x4F0]) {
                (*(void (**)(unint64_t, unint64_t))(*(void *)STACK[0x4E8] + 40))(STACK[0x4E8], STACK[0x4F8]);
              }
              *(_OWORD *)&STACK[0x4E8] = 0u;
              *(_OWORD *)&STACK[0x4F8] = 0u;
            }
          }
        }
        re::ShaderResourceBindState::reset((uint64_t)&STACK[0x12C0]);
        uint64_t v299 = *(void *)(v75 + 64);
        *(void *)(v299 + re::DynamicArray<re::RigComponentConstraint>::deinit((uint64_t)this + 96) = 0;
        *(void *)(v299 + 104) = 0;
        *(unsigned char *)(v299 + 120) = 0;
        *(void *)(v299 + 112) = 0;
        char v188 = 1;
        goto LABEL_230;
      }
      if (v214)
      {
        char v188 = 0;
LABEL_230:
        unint64_t v76 = LODWORD(STACK[0x3A4]);
        goto LABEL_794;
      }
      STACK[0x1190] = (unint64_t)&unk_26E6D3970;
      unint64_t v288 = STACK[0x2E8];
      *(_DWORD *)(v288 + 24) = 0;
      *(void *)(v288 + 8) = 0;
      *(void *)(v288 + 16) = 0;
      *(void *)unint64_t v288 = 0;
      *(_OWORD *)&STACK[0x11B8] = 0u;
      *(_OWORD *)&STACK[0x11C8] = 0u;
      *(_OWORD *)&STACK[0x11D8] = 0u;
      *(_OWORD *)&STACK[0x11E8] = 0u;
      STACK[0x11F8] = 0;
      if (*(unsigned char *)(v77 + 16))
      {
        v289 = *(void **)v77;
        if (*(unsigned char *)(*(void *)v77 + 40)) {
          __int16 v290 = (_anonymous_namespace_ *)(v289 + 6);
        }
        else {
          __int16 v290 = (_anonymous_namespace_ *)(*v289 + 8);
        }
        Permutatiounsigned int n = (_anonymous_namespace_ *)re::FunctionConstantsEnumerator::createPermutation(v290, STACK[0x520], v289[4], v289[3], (uint64_t)&STACK[0x1E60]);
        unint64_t v302 = 8 * STACK[0x1E70];
        uint64_t v303 = (_anonymous_namespace_ *)re::DynamicArray<BOOL>::setCapacity((void *)STACK[0x2E8], v302);
        ++LODWORD(STACK[0x11B0]);
        unint64_t v304 = STACK[0x11B8];
        uint64_t v305 = STACK[0x1E70];
        if (STACK[0x1E70])
        {
          for (unint64_t k = 0; STACK[0x1E70] > k; ++k)
          {
            unint64_t v307 = STACK[0x1E80] + (k << 6);
            re::DynamicString::DynamicString((re::DynamicString *)&STACK[0x1ED0], (const re::DynamicString *)v307);
            LODWORD(STACK[0x1EF0]) = *(_DWORD *)(v307 + 32);
            re::FixedArray<unsigned char>::FixedArray((void *)STACK[0x3D0], (uint64_t *)(v307 + 40));
            *(void *)(v304 + 8 * k) = re::TechniqueFunctionConstant::getAs64Bits((re::TechniqueFunctionConstant *)&STACK[0x1ED0]);
            re::DynamicString::rfind((uint64_t)&STACK[0x1ED0], 58, &STACK[0x1088]);
            unint64_t v308 = STACK[0x1ED8];
            if (LOBYTE(STACK[0x1088]))
            {
              if (v308) {
                unint64_t v309 = STACK[0x1EE0];
              }
              else {
                unint64_t v309 = STACK[0x3B8];
              }
              uint64_t v310 = *(char *)(v309 + STACK[0x1090] + 1);
              if (!*(unsigned char *)(v309 + STACK[0x1090] + 1)) {
                goto LABEL_253;
              }
              char v311 = *(unsigned char *)(v309 + STACK[0x1090] + 2);
              if (v311)
              {
                uint64_t v312 = (unsigned __int8 *)(v309 + STACK[0x1090] + 3);
                do
                {
                  uint64_t v310 = 31 * v310 + v311;
                  int v313 = *v312++;
                  char v311 = v313;
                }
                while (v313);
              }
            }
            else
            {
              if (v308)
              {
                uint64_t v314 = (unsigned char *)STACK[0x1EE0];
                if (!STACK[0x1EE0])
                {
                  uint64_t v310 = 0x7FFFFFFFFFFFFFFFLL;
                  goto LABEL_253;
                }
                LOBYTE(v310) = *v314;
              }
              else
              {
                uint64_t v310 = v308 >> 8;
                uint64_t v314 = (unsigned char *)STACK[0x3B8];
              }
              if (!(_BYTE)v310)
              {
                uint64_t v310 = 0;
                goto LABEL_253;
              }
              uint64_t v310 = (char)v310;
              char v315 = v314[1];
              if (v315)
              {
                unint64_t v316 = v314 + 2;
                do
                {
                  uint64_t v310 = 31 * v310 + v315;
                  int v317 = *v316++;
                  char v315 = v317;
                }
                while (v317);
              }
            }
            v310 &= ~0x8000000000000000;
LABEL_253:
            STACK[0x1168] = v310;
            LOWORD(STACK[0x1088]) = 8 * k;
            LOWORD(STACK[0x108A]) = 8;
            re::HashBrown<re::WeakStringID,re::ConstantLocation,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::ConstantLocation>,false>::addNew((_anonymous_namespace_ *)STACK[0x3D8], &STACK[0x1168], (int *)&STACK[0x1088]);
            if (STACK[0x1EF8])
            {
              if (STACK[0x1F00])
              {
                (*(void (**)(unint64_t, unint64_t))(*(void *)STACK[0x1EF8] + 40))(STACK[0x1EF8], STACK[0x1F08]);
                unint64_t v318 = (void *)STACK[0x370];
                *unint64_t v318 = 0;
                v318[1] = 0;
              }
              STACK[0x1EF8] = 0;
            }
            if (STACK[0x1ED0] && (STACK[0x1ED8] & 1) != 0) {
              (*(void (**)(unint64_t, unint64_t))(*(void *)STACK[0x1ED0] + 40))(STACK[0x1ED0], STACK[0x1EE0]);
            }
          }
        }
        STACK[0x770] = (unint64_t)&STACK[0x1190];
        unint64_t v300 = STACK[0x11F0];
        re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)&STACK[0x1E60]);
        uint64_t v77 = STACK[0x3E8];
      }
      else
      {
        unint64_t v300 = 0;
      }
      STACK[0x730] = **(void **)v77 + 320;
      STACK[0x738] = **(void **)v77 + 1448;
      STACK[0x740] = STACK[0x2C8];
      STACK[0x748] = *(void *)(STACK[0x338] + 16) + 400;
      if (*(void *)(*(void *)shouldCompileSynchronously + 80))
      {
        unint64_t v78 = *(unsigned int *)STACK[0x3C8];
        unint64_t v76 = STACK[0x790];
        if (STACK[0x790] >= v78)
        {
          if (STACK[0x790] <= v78) {
            goto LABEL_274;
          }
        }
        else
        {
          if (STACK[0x788] < v78)
          {
            re::DynamicArray<re::ConstantSource const*>::setCapacity(&STACK[0x780], *(unsigned int *)STACK[0x3C8]);
            unint64_t v76 = STACK[0x790];
          }
          if (v76 < v78)
          {
            char v319 = (void *)(STACK[0x7A0] + 8 * v76);
            uint64_t v320 = STACK[0x7A0] + 8 * v78 - (void)v319;
            if (v320 >= 1) {
              bzero(v319, 8 * (((unint64_t)v320 >> 3) - ((unint64_t)v320 > 7)) + 8);
            }
          }
        }
        STACK[0x790] = v78;
        ++LODWORD(STACK[0x798]);
        unint64_t v76 = v78;
        unint64_t v78 = *(unsigned int *)STACK[0x3C8];
LABEL_274:
        if (v78)
        {
          uint64_t v321 = 0;
          int v322 = *(_DWORD *)STACK[0x3F0];
          while (1)
          {
            uint64_t v323 = *v73;
            unint64_t v324 = (v322 + v321);
            unint64_t v325 = *(void *)(*v73 + 64);
            if (v325 <= v324) {
              break;
            }
            unint64_t v326 = v324 >> 7;
            unint64_t v327 = *(void *)(v323 + 56);
            if (v327 <= v324 >> 7) {
              goto LABEL_944;
            }
            if (v76 == v321) {
              goto LABEL_945;
            }
            *(void *)(STACK[0x7A0] + 8 * v321) = *(void *)(*(void *)(*(void *)(v323 + 48) + 8 * v326)
                                                             + 8 * (((_BYTE)v322 + (_BYTE)v321) & 0x7F));
            if (v78 == ++v321) {
              goto LABEL_280;
            }
          }
LABEL_943:
          re::internal::assertLog((re::internal *)6, (uint64_t)v148, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 296, v324, v325);
          _os_crash();
          __break(1u);
LABEL_944:
          re::internal::assertLog((re::internal *)6, (uint64_t)v148, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v326, v327);
          _os_crash();
          __break(1u);
LABEL_945:
          STACK[0x1088] = 0;
          *(_OWORD *)&STACK[0x1F10] = 0u;
          *(_OWORD *)&STACK[0x1F00] = 0u;
          *(_OWORD *)&STACK[0x1EF0] = 0u;
          *(_OWORD *)&STACK[0x1EE0] = 0u;
          *(_OWORD *)&STACK[0x1ED0] = 0u;
          uint64_t v80 = &_os_log_internal;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          LODWORD(STACK[0x1E60]) = 136315906;
          *(unint64_t *)((char *)v230 + 4) = (unint64_t)"operator[]";
          LOWORD(STACK[0x1E6C]) = 1024;
          *(_DWORD *)((char *)v230 + 14) = 789;
          LOWORD(STACK[0x1E72]) = 2048;
          *(unint64_t *)((char *)v230 + 20) = v76;
          LOWORD(STACK[0x1E7C]) = 2048;
          *(unint64_t *)((char *)v230 + 30) = v76;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_946:
          re::internal::assertLog((re::internal *)6, v609, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < N", "operator[]", 242, v75, 2);
          _os_crash();
          __break(1u);
          goto LABEL_947;
        }
      }
LABEL_280:
      unint64_t v809 = v300;
      char v328 = (void *)STACK[0x338];
      uint64_t v329 = *(void **)(STACK[0x338] + 16);
      unint64_t v330 = (unint64_t)(v329 + 64);
      unint64_t v331 = v329[76];
      unint64_t v332 = v329[74];
      unint64_t v333 = v329[81];
      unint64_t v334 = v329[79];
      STACK[0xED8] = v332;
      STACK[0xEE0] = v333;
      STACK[0xEE8] = v334;
      LODWORD(STACK[0xEF0]) = 0;
      STACK[0xEF8] = v330;
      unint64_t v335 = v328[71];
      unint64_t v336 = v328[78];
      unint64_t v337 = v328[76];
      STACK[0xEA0] = v328[73];
      STACK[0xEA8] = v335;
      STACK[0xEB0] = v336;
      STACK[0xEB8] = v337;
      LODWORD(STACK[0xEC0]) = 0;
      STACK[0xED0] = v331;
      STACK[0xEC8] = STACK[0x2C0];
      __int16 v338 = (void **)STACK[0x330];
      int v339 = *(re::AttributeTable **)STACK[0x330];
      uint64_t v340 = v339;
      do
      {
        unint64_t v341 = v340;
        uint64_t v340 = (re::AttributeTable *)*((void *)v340 + 1);
      }
      while (v340 && !*((void *)v341 + 9));
      STACK[0xDD8] = (unint64_t)v341 + 48;
      STACK[0xDB0] = re::AttributeTable::buffers(v339);
      STACK[0xDB8] = v342;
      re::resolveStencilInfo((uint64_t)&STACK[0x41F], STACK[0x3B0], v73[5], v77);
      uint64_t v343 = *(void *)shouldCompileSynchronously;
      unint64_t v344 = **(float ***)v77;
      float v345 = v344[28];
      float v346 = v344[29];
      float v347 = v344[30];
      uint64_t v348 = *(void *)(*(void *)shouldCompileSynchronously + 48);
      if (v348)
      {
        int v349 = *(unsigned __int8 *)(v348 + 1092);
        if (*(unsigned char *)(v348 + 1092))
        {
          a76 = *(float *)(v348 + 1096);
          a75 = *(float *)(v348 + 1100);
          int v349 = 1;
          float v69 = *(float *)(v348 + 1104);
        }
      }
      else
      {
        int v349 = 0;
      }
      uint64_t v350 = *(void *)(v343 + 56);
      if (v350)
      {
        int v351 = *(unsigned __int8 *)(v350 + 1092);
        if (*(unsigned char *)(v350 + 1092))
        {
          a74 = *(float *)(v350 + 1096);
          float v68 = *(float *)(v350 + 1100);
          int v351 = 1;
          float v70 = *(float *)(v350 + 1104);
        }
      }
      else
      {
        int v351 = 0;
      }
      uint64_t v352 = *(void *)(v343 + 72);
      if (v352 && *(unsigned char *)(v352 + 1092))
      {
        float v345 = *(float *)(v352 + 1096);
        float v346 = *(float *)(v352 + 1100);
        float v347 = *(float *)(v352 + 1104);
      }
      if (v351)
      {
        float v347 = v70;
        float v346 = v68;
        float v345 = a74;
      }
      if (v349) {
        float v353 = v69;
      }
      else {
        float v353 = v347;
      }
      if (v349) {
        float v354 = a75;
      }
      else {
        float v354 = v346;
      }
      if (v349) {
        float v355 = a76;
      }
      else {
        float v355 = v345;
      }
      v356 = *v338;
      uint64_t v357 = *(void *)(STACK[0x3E8] + 8);
      uint64_t v358 = *v338;
      if (v357)
      {
        id v359 = (id)(v357 + 8);
        uint64_t v358 = *v338;
      }
      do
      {
        uint64_t v360 = v358;
        uint64_t v358 = (void *)v358[1];
      }
      while (v358 && !v360[9]);
      uint64_t v361 = v360[12];
      uint64_t v362 = *(void *)(v357 + 16);
      unint64_t v363 = re::MaterialTechnique::combinedBuffersHash(*(re::MaterialTechnique **)STACK[0x3E8]);
      uint64_t v364 = *(void *)(*(void *)STACK[0x3C0] + 48);
      unint64_t v365 = 0x9E3779B97F4A7C17;
      if (v364) {
        unint64_t v365 = ((*(void *)(v364 + 312)
      }
               - 0x61C8864680B583E9
               + (*(void *)(v364 + 136) << 6)
               + (*(void *)(v364 + 136) >> 2)) ^ *(void *)(v364 + 136))
             - 0x61C8864680B583E9;
      unint64_t v366 = (v361 - 0x61C8864680B583E9 + (v363 << 6) + (v363 >> 2)) ^ v363;
      unint64_t v367 = ((v365 << 6)
            - 0x61C8864680B583E9
            + (v365 >> 2)
            + (((v366 << 6) - 0x61C8864680B583E9 + (v366 >> 2) + *(void *)(v362 + 288)) ^ v366)) ^ v365;
      uint64_t v368 = STACK[0x3E8] + 216;
      STACK[0x1ED0] = (unint64_t)v811;
      STACK[0x1ED8] = v368;
      if (!*v811) {
        goto LABEL_318;
      }
      uint64_t v369 = *(unsigned int *)(*(void *)(STACK[0x398] + 152) + 4 * (v367 % *(unsigned int *)(STACK[0x398] + 168)));
      if (v369 == 0x7FFFFFFF) {
        goto LABEL_318;
      }
      uint64_t v370 = *(void *)(STACK[0x398] + 160);
      while (*(void *)(v370 + 24 * v369 + 8) != v367)
      {
        LODWORD(v369) = *(_DWORD *)(v370 + 24 * v369) & 0x7FFFFFFF;
        if (v369 == 0x7FFFFFFF) {
          goto LABEL_318;
        }
      }
      uint64_t v371 = *(void *)(v370 + 24 * v369 + 16);
      if (!v371)
      {
LABEL_318:
        uint64_t v371 = re::MaterialTechniqueVariant::completeResolution<re::AttributeResolution,re::AttributeTable>((re *)STACK[0x3E8], (uint64_t *)&STACK[0x1ED0], v356, STACK[0x3B0], v367);
        uint64_t v368 = STACK[0x1ED8];
      }
      unint64_t shouldCompileSynchronously = STACK[0x3C0];
      uint64_t v77 = *(void *)(v371 + 40);
      STACK[0x2F8] = *(void *)(v371 + 24);
      STACK[0x1E60] = v367;
      int v372 = *(_DWORD *)(v368 + 28);
      re::HashSetBase<unsigned long,unsigned long,re::internal::ValueAsKey<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::add(v368, &STACK[0x1E60]);
      if (v372 != *(_DWORD *)(v368 + 28)) {
        ++*(_DWORD *)v371;
      }

      uint64_t v374 = *(void **)shouldCompileSynchronously;
      uint64_t v375 = *(re::MaterialParameterTable **)(*(void *)shouldCompileSynchronously + 56);
      if (v375)
      {
        unint64_t v376 = re::MaterialParameterTable::hash(v375);
        uint64_t v374 = *(void **)shouldCompileSynchronously;
      }
      else
      {
        unint64_t v376 = 0;
      }
      unint64_t v75 = STACK[0x3E0];
      unint64_t v377 = v374[6];
      if (v377)
      {
        unint64_t v377 = re::MaterialParameterTable::hash((re::MaterialParameterTable *)v377);
        uint64_t v374 = *(void **)shouldCompileSynchronously;
      }
      uint64_t v378 = v374[10];
      if (v378) {
        uint64_t v378 = (*(void *)(v378 + 248)
      }
              - 0x61C8864680B583E9
              + (*(void *)(v378 + 72) << 6)
              + (*(void *)(v378 + 72) >> 2)) ^ *(void *)(v378 + 72);
      unint64_t v379 = ((v377 << 6) - 0x61C8864680B583E9 + (v377 >> 2) + v378) ^ v377;
      STACK[0x2A0] = v376;
      unint64_t v380 = (v376 - 0x61C8864680B583E9 + (v379 << 6) + (v379 >> 2)) ^ v379;
      unint64_t v78 = v374[8];
      if (v78)
      {
        if (*(void *)v78) {
          unint64_t v381 = (*(uint64_t (**)(void))(**(void **)v78 + 8))(*(void *)v78);
        }
        else {
          unint64_t v381 = 0;
        }
        uint64_t v382 = *(void *)(v78 + 8);
        uint64_t v383 = 0x9E3779B97F4A7C17;
        unint64_t v78 = 0x9E3779B97F4A7C17;
        if (v382) {
          uint64_t v383 = (*(uint64_t (**)(uint64_t))(*(void *)v382 + 8))(v382) - 0x61C8864680B583E9;
        }
        v380 ^= (v380 << 6) - 0x61C8864680B583E9 + (v380 >> 2) + (((v381 >> 2) + (v381 << 6) + v383) ^ v381);
        uint64_t v374 = *(void **)shouldCompileSynchronously;
      }
      uint64_t v384 = (re::MaterialParameterTable *)v374[9];
      if (v384) {
        uint64_t v384 = (re::MaterialParameterTable *)re::MaterialParameterTable::hash(v384);
      }
      if (*(unsigned __int8 *)STACK[0x2B8] == 255)
      {
        STACK[0x2D8] = 0;
      }
      else
      {
        unint64_t v385 = 0xBF58476D1CE4E5B9 * (*(void *)STACK[0x2B8] ^ (*(void *)STACK[0x2B8] >> 30));
        STACK[0x2D8] = (0x94D049BB133111EBLL * (v385 ^ (v385 >> 27))) ^ ((0x94D049BB133111EBLL * (v385 ^ (v385 >> 27))) >> 31);
      }
      uint64_t v386 = ((unint64_t)v384 + 64 * v380 + (v380 >> 2) - 0x61C8864680B583E9) ^ v380;
      v387 = *(uint64_t **)STACK[0x330];
      if (STACK[0x3E8] == STACK[0x2F0])
      {
        BOOL v403 = v387[2] != v801 || v386 != v802;
        if (*(unsigned __int8 *)STACK[0x328] == v808)
        {
          if (!v403)
          {
            if (v787 == ((*(unsigned __int16 *)STACK[0x3B0] >> 1) & 7) && STACK[0x318] == STACK[0x2D8])
            {
              STACK[0x2D8] = STACK[0x318];
              goto LABEL_571;
            }
LABEL_400:
            *((void *)&v762 + 1) = v73[22];
            *(void *)&long long v762 = v73[20];
            v436 = (unsigned __int16 *)STACK[0x3B0];
            re::getOrCreateEncoderStates((uint64_t)&STACK[0x1ED0], (const char ****)STACK[0x2F0], *(void *)(v75 + 16), v73[3], v73[4], (unsigned char *)STACK[0x3B0], v387, v373, v77, STACK[0x2F8], (unsigned __int8 *)&STACK[0x41F], STACK[0x378], v762, v73[21]);
            if (LOBYTE(STACK[0x1ED0]))
            {
              re::Optional<re::DrawCallEncoderStates>::operator=((uint64_t)&STACK[0xCD0], (void **)&STACK[0x1ED0]);
              unsigned __int8 v808 = *(unsigned char *)STACK[0x328];
              int v787 = (*v436 >> 1) & 7;
              re::Optional<re::DrawCallEncoderStates>::~Optional((uint64_t)&STACK[0x1ED0]);
              goto LABEL_571;
            }
            re::Optional<re::DrawCallEncoderStates>::~Optional((uint64_t)&STACK[0x1ED0]);
            char v188 = 0;
            uint64_t v77 = STACK[0x318];
            goto LABEL_361;
          }
        }
        else if (!v403)
        {
          goto LABEL_400;
        }
      }
      *((void *)&v761 + 1) = v73[22];
      *(void *)&long long v761 = v73[20];
      id v388 = (unsigned __int16 *)STACK[0x3B0];
      re::getOrCreateEncoderStates((uint64_t)&STACK[0x1088], (const char ****)STACK[0x3E8], *(void *)(v75 + 16), v73[3], v73[4], (unsigned char *)STACK[0x3B0], v387, v373, v77, STACK[0x2F8], (unsigned __int8 *)&STACK[0x41F], STACK[0x378], v761, v73[21]);
      if (LOBYTE(STACK[0x1088]))
      {
        uint64_t v802 = v386;
        re::Optional<re::DrawCallEncoderStates>::operator=((uint64_t)&STACK[0xCD0], (void **)&STACK[0x1088]);
        unint64_t v389 = 0;
        unint64_t v390 = 0;
        uint64_t v801 = *(void *)(*(void *)STACK[0x330] + 16);
        unsigned __int8 v808 = *(unsigned char *)STACK[0x328];
        unsigned int v391 = *v388;
        unint64_t v392 = (void *)STACK[0x338];
        STACK[0x1050] = *(void *)(STACK[0x338] + 16) + 928;
        STACK[0x1048] = v800;
        uint64_t v393 = v392[2];
        STACK[0xD58] = *(void *)(v393 + 1120);
        STACK[0xD60] = v393 + 1040;
        unint64_t v394 = v392[137];
        STACK[0xD38] = v392[139];
        STACK[0xD40] = v394;
        int v787 = (v391 >> 1) & 7;
        STACK[0xD50] = *(void *)(v393 + 1136);
        STACK[0xD48] = v799;
        STACK[0x318] = *(void *)(v75 + 72);
        do
        {
          uint64_t v395 = *(&STACK[0x1020] + v389);
          if (v395)
          {
            uint64_t v396 = (*(uint64_t (**)(uint64_t))(*(void *)v395 + 8))(v395);
          }
          else
          {
            unint64_t v397 = 0x94D049BB133111EBLL
                 * ((0xBF58476D1CE4E5B9 * (v389 ^ (v389 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v389 ^ (v389 >> 30))) >> 27));
            uint64_t v396 = v397 ^ (v397 >> 31);
          }
          v390 ^= (v390 << 6) - 0x61C8864680B583E9 + (v390 >> 2) + v396;
          ++v389;
        }
        while (v389 != 12);
        unint64_t v398 = re::MaterialTechnique::combinedTexturesHash(*(re::MaterialTechnique **)STACK[0x3E8]);
        v399 = *(void **)STACK[0x3C0];
        uint64_t v400 = v399[6];
        if (v400) {
          unint64_t v401 = (*(void *)(v400 + 736)
        }
                - 0x61C8864680B583E9
                + (*(void *)(v400 + 600) << 6)
                + (*(void *)(v400 + 600) >> 2)) ^ *(void *)(v400 + 600);
        else {
          unint64_t v401 = 0;
        }
        uint64_t v404 = v399[7];
        if (v404) {
          uint64_t v405 = (*(void *)(v404 + 736)
        }
                - 0x61C8864680B583E9
                + (*(void *)(v404 + 600) << 6)
                + (*(void *)(v404 + 600) >> 2)) ^ *(void *)(v404 + 600);
        else {
          uint64_t v405 = 0;
        }
        uint64_t v406 = v399[8];
        if (v406 && (uint64_t v407 = *(void *)(v406 + 8)) != 0)
        {
          unint64_t v408 = (*(uint64_t (**)(uint64_t))(*(void *)v407 + 8))(v407);
          v399 = *(void **)STACK[0x3C0];
        }
        else
        {
          unint64_t v408 = 0;
        }
        uint64_t v409 = v399[9];
        if (v409) {
          uint64_t v410 = (*(void *)(v409 + 736)
        }
                - 0x61C8864680B583E9
                + (*(void *)(v409 + 600) << 6)
                + (*(void *)(v409 + 600) >> 2)) ^ *(void *)(v409 + 600);
        else {
          uint64_t v410 = 0;
        }
        unint64_t v411 = re::hashCombine(v390, v398, v401, v405, v408, v410);
        unint64_t v412 = re::MaterialTechnique::combinedConstantsHash(*(re::MaterialTechnique **)STACK[0x3E8]);
        v413 = *(void **)STACK[0x3C0];
        uint64_t v414 = v413[6];
        if (v414) {
          uint64_t v415 = (*(void *)(v414 + 248)
        }
                - 0x61C8864680B583E9
                + (*(void *)(v414 + 72) << 6)
                + (*(void *)(v414 + 72) >> 2)) ^ *(void *)(v414 + 72);
        else {
          uint64_t v415 = 0;
        }
        uint64_t v416 = v413[10];
        if (v416) {
          unint64_t v417 = (*(void *)(v416 + 248)
        }
                - 0x61C8864680B583E9
                + (*(void *)(v416 + 72) << 6)
                + (*(void *)(v416 + 72) >> 2)) ^ *(void *)(v416 + 72);
        else {
          unint64_t v417 = 0;
        }
        uint64_t v418 = v413[7];
        if (v418) {
          uint64_t v419 = (*(void *)(v418 + 248)
        }
                - 0x61C8864680B583E9
                + (*(void *)(v418 + 72) << 6)
                + (*(void *)(v418 + 72) >> 2)) ^ *(void *)(v418 + 72);
        else {
          uint64_t v419 = 0;
        }
        v420 = (void *)v413[8];
        if (v420 && *v420)
        {
          unint64_t v421 = (*(uint64_t (**)(void))(*(void *)*v420 + 8))(*v420);
          v413 = *(void **)STACK[0x3C0];
        }
        else
        {
          unint64_t v421 = 0;
        }
        uint64_t v422 = v413[9];
        if (v422) {
          uint64_t v423 = (*(void *)(v422 + 248)
        }
                - 0x61C8864680B583E9
                + (*(void *)(v422 + 72) << 6)
                + (*(void *)(v422 + 72) >> 2)) ^ *(void *)(v422 + 72);
        else {
          uint64_t v423 = 0;
        }
        unint64_t v424 = re::hashCombine(v412, v415, v417, v419, v421, v423);
        if (*(unsigned char *)(STACK[0x3E8] + 16)) {
          v424 ^= v809 - 0x61C8864680B583E9 + (v424 << 6) + (v424 >> 2);
        }
        STACK[0x378] = v424;
        unint64_t v425 = STACK[0x318];
        uint64_t v426 = *(void *)(STACK[0x3E0] + 72);
        v427 = *(void **)(STACK[0x3E8] + 8);
        if (v427) {
          v428 = v427 + 1;
        }
        unint64_t v429 = 0x94D049BB133111EBLL
             * ((0xBF58476D1CE4E5B9 * (v425 ^ (v425 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v425 ^ (v425 >> 30))) >> 27));
        unint64_t v430 = ((v429 ^ (v429 >> 31)) - 0x61C8864680B583E9 + (v411 << 6) + (v411 >> 2)) ^ v411;
        uint64_t v431 = (v430 << 6)
             - 0x61C8864680B583E9
             + (v430 >> 2)
             + ((v427[12] - 0x61C8864680B583E9 + (v427[11] << 6) + (v427[11] >> 2)) ^ v427[11]);
        STACK[0x2F0] = v430;
        unint64_t v432 = v431 ^ v430;
        unint64_t v433 = STACK[0x3E8] + 120;
        STACK[0x1ED0] = (unint64_t)v778;
        STACK[0x1ED8] = v433;
        if (!*v778) {
          goto LABEL_403;
        }
        uint64_t v434 = *(unsigned int *)(*(void *)(STACK[0x398] + 56) + 4 * (v432 % *(unsigned int *)(STACK[0x398] + 72)));
        if (v434 == 0x7FFFFFFF) {
          goto LABEL_403;
        }
        uint64_t v435 = *(void *)(STACK[0x398] + 64);
        while (*(void *)(v435 + 24 * v434 + 8) != v432)
        {
          LODWORD(v434) = *(_DWORD *)(v435 + 24 * v434) & 0x7FFFFFFF;
          if (v434 == 0x7FFFFFFF) {
            goto LABEL_403;
          }
        }
        uint64_t v437 = *(void *)(v435 + 24 * v434 + 16);
        if (!v437) {
LABEL_403:
        }
          uint64_t v437 = re::MaterialTechniqueVariant::completeResolution<re::TextureResolution,re::TextureTableCollection>((re *)STACK[0x3E8], (uint64_t *)&STACK[0x1ED0], (uint64_t *)&STACK[0x1020], STACK[0x3B0], v432, v426);
        uint64_t v795 = *(void *)(v437 + 40);
        uint64_t v816 = *(void *)(v437 + 24);
        if (*(void *)(*(void *)(STACK[0x3E8] + 8) + 24))
        {
          v786 = *(unsigned __int16 **)(v437 + 80);
          uint64_t v807 = *(void *)(v437 + 64);
        }
        else
        {
          uint64_t v807 = 0;
          v786 = 0;
        }
        uint64_t v438 = STACK[0x1ED8];
        STACK[0x1E60] = v432;
        int v439 = *(_DWORD *)(v438 + 28);
        re::HashSetBase<unsigned long,unsigned long,re::internal::ValueAsKey<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::add(v438, &STACK[0x1E60]);
        if (v439 != *(_DWORD *)(v438 + 28)) {
          ++*(_DWORD *)v437;
        }

        v440 = *(void **)(STACK[0x3E8] + 8);
        if (v440) {
          v441 = v440 + 1;
        }
        unint64_t v442 = re::SamplerTableCollection::hash((re::SamplerTableCollection *)&STACK[0xD20]);
        STACK[0x318] = (unint64_t)v440;
        unint64_t v443 = v440[11];
        uint64_t v444 = v440[12];
        unint64_t v445 = re::MaterialTechnique::combinedTextureBlocksHash(*(re::MaterialTechnique **)STACK[0x3E8]);
        v446 = *(void **)STACK[0x3C0];
        uint64_t v447 = v446[6];
        if (v447) {
          uint64_t v448 = (*(void *)(v447 + 1016)
        }
                - 0x61C8864680B583E9
                + (*(void *)(v447 + 952) << 6)
                + (*(void *)(v447 + 952) >> 2)) ^ *(void *)(v447 + 952);
        else {
          uint64_t v448 = 0;
        }
        uint64_t v449 = v446[7];
        if (v449) {
          unint64_t v450 = (*(void *)(v449 + 1016)
        }
                - 0x61C8864680B583E9
                + (*(void *)(v449 + 952) << 6)
                + (*(void *)(v449 + 952) >> 2)) ^ *(void *)(v449 + 952);
        else {
          unint64_t v450 = 0;
        }
        uint64_t v451 = v446[9];
        if (v451) {
          uint64_t v452 = (*(void *)(v451 + 1016)
        }
                - 0x61C8864680B583E9
                + (*(void *)(v451 + 952) << 6)
                + (*(void *)(v451 + 952) >> 2)) ^ *(void *)(v451 + 952);
        else {
          uint64_t v452 = 0;
        }
        unint64_t v453 = re::hashCombine(v442, (v444 - 0x61C8864680B583E9 + (v443 << 6) + (v443 >> 2)) ^ v443, v445, v448, v450, v452);
        unint64_t v454 = re::MaterialTechnique::combinedSamplersHash(*(re::MaterialTechnique **)STACK[0x3E8]);
        v455 = *(void **)STACK[0x3C0];
        unint64_t v456 = v455[6];
        if (v456) {
          unint64_t v456 = (*(void *)(v456 + 840)
        }
                - 0x61C8864680B583E9
                + (*(void *)(v456 + 664) << 6)
                + (*(void *)(v456 + 664) >> 2)) ^ *(void *)(v456 + 664);
        uint64_t v457 = STACK[0x3B0];
        uint64_t v458 = v455[7];
        uint64_t v459 = 0x9E3779B97F4A7C17;
        if (v458) {
          uint64_t v459 = ((*(void *)(v458 + 840)
        }
                 - 0x61C8864680B583E9
                 + (*(void *)(v458 + 664) << 6)
                 + (*(void *)(v458 + 664) >> 2)) ^ *(void *)(v458 + 664))
               - 0x61C8864680B583E9;
        uint64_t v460 = v455[9];
        uint64_t v461 = 0x9E3779B97F4A7C17;
        if (v460) {
          uint64_t v461 = ((*(void *)(v460 + 840)
        }
                 - 0x61C8864680B583E9
                 + (*(void *)(v460 + 664) << 6)
                 + (*(void *)(v460 + 664) >> 2)) ^ *(void *)(v460 + 664))
               - 0x61C8864680B583E9;
        unint64_t v462 = ((v453 << 6) - 0x61C8864680B583E9 + (v453 >> 2) + v454) ^ v453;
        unint64_t v463 = ((v456 >> 2) + (v456 << 6) + v459) ^ v456;
        unint64_t v464 = ((v462 << 6) - 0x61C8864680B583E9 + (v462 >> 2) + (((v463 >> 2) + (v463 << 6) + v461) ^ v463)) ^ v462;
        unint64_t v465 = STACK[0x3E8] + 312;
        STACK[0x1ED0] = (unint64_t)v777;
        STACK[0x1ED8] = v465;
        if (!*v777) {
          goto LABEL_433;
        }
        uint64_t v466 = *(unsigned int *)(*(void *)(STACK[0x398] + 248) + 4 * (v464 % *(unsigned int *)(STACK[0x398] + 264)));
        if (v466 == 0x7FFFFFFF) {
          goto LABEL_433;
        }
        uint64_t v467 = *(void *)(STACK[0x398] + 256);
        while (*(void *)(v467 + 24 * v466 + 8) != v464)
        {
          LODWORD(v466) = *(_DWORD *)(v467 + 24 * v466) & 0x7FFFFFFF;
          if (v466 == 0x7FFFFFFF) {
            goto LABEL_433;
          }
        }
        uint64_t v468 = *(void *)(v467 + 24 * v466 + 16);
        if (!v468) {
LABEL_433:
        }
          uint64_t v468 = re::MaterialTechniqueVariant::completeResolution<re::TextureBlockResolution,re::SamplerTableCollection>((re *)STACK[0x3E8], (uint64_t *)&STACK[0x1ED0], (uint64_t)&STACK[0xD20], v457, v464);
        int v230 = *(unint64_t **)(v468 + 40);
        uint64_t v469 = *(void *)(*(void *)(STACK[0x3E8] + 8) + 24);
        STACK[0x2D0] = *(void *)(v468 + 24);
        if (v469)
        {
          unint64_t v75 = *(void *)(v468 + 80);
          STACK[0x2B0] = *(void *)(v468 + 64);
        }
        else
        {
          STACK[0x2B0] = 0;
          unint64_t v75 = 0;
        }
        uint64_t v470 = STACK[0x1ED8];
        STACK[0x1E60] = v464;
        int v471 = *(_DWORD *)(v470 + 28);
        re::HashSetBase<unsigned long,unsigned long,re::internal::ValueAsKey<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::add(v470, &STACK[0x1E60]);
        if (v471 != *(_DWORD *)(v470 + 28)) {
          ++*(_DWORD *)v468;
        }

        uint64_t v472 = *(void *)(v73[2] + 24);
        uint64_t v473 = *(void *)(STACK[0x3E8] + 8);
        uint64_t v474 = *(void *)(v473 + 24);
        int v475 = *(unsigned __int16 *)(*(void *)(v473 + 16) + 328);
        unint64_t v76 = (unint64_t)&STACK[0xDB0];
        if (v474) {
          LODWORD(v474) = *(unsigned __int16 *)(v474 + 328) + 1;
        }
        if (v475 + 1 > (int)v474) {
          unsigned __int16 v476 = v475 + 1;
        }
        else {
          unsigned __int16 v476 = v474;
        }
        unint64_t shouldCompileSynchronously = v476;
        if (!v476)
        {
          unint64_t v78 = 0;
          LODWORD(STACK[0xFB0]) = 0;
          *(_OWORD *)&STACK[0xF90] = 0u;
          *(_OWORD *)&STACK[0xFA0] = 0u;
          unint64_t v75 = STACK[0x3E0];
          goto LABEL_480;
        }
        if (STACK[0xCF0])
        {
          unint64_t v477 = v464 % LODWORD(STACK[0xD08]);
          unint64_t v478 = STACK[0xCF8];
          unsigned int v479 = *(_DWORD *)(STACK[0xCF8] + 4 * v477);
          if (v479 != 0x7FFFFFFF)
          {
            unint64_t v494 = STACK[0xD00];
            if (*(void *)(STACK[0xD00] + 304 * v479 + 8) != v464)
            {
              do
              {
                unsigned int v510 = *(_DWORD *)(v494 + 304 * *(unsigned int *)(STACK[0xCF8] + 4 * v477)) & 0x7FFFFFFF;
                if (v510 == 0x7FFFFFFF) {
                  goto LABEL_447;
                }
              }
              while (*(void *)(v494 + 304 * v510 + 8) != v464);
              uint64_t v511 = *(unsigned int *)(STACK[0xCF8] + 4 * v477);
              do
              {
                uint64_t v511 = *(_DWORD *)(v494 + 304 * v511) & 0x7FFFFFFF;
                unsigned int v479 = 0x7FFFFFFF;
                if (v511 == 0x7FFFFFFF) {
                  break;
                }
                unsigned int v479 = v511;
              }
              while (*(void *)(v494 + 304 * v511 + 8) != v464);
            }
            unint64_t v78 = v494 + 304 * v479 + 16;
            unint64_t v75 = STACK[0x3E0];
LABEL_479:
            unint64_t v495 = *(void *)(v78 + 80);
            unint64_t v496 = *(void *)(v78 + 136);
            unint64_t v497 = *(void *)(v78 + 120);
            STACK[0xF90] = *(void *)(v78 + 96);
            STACK[0xF98] = v495;
            STACK[0xFA0] = v496;
            STACK[0xFA8] = v497;
            LODWORD(STACK[0xFB0]) = 0;
LABEL_480:
            STACK[0xFB8] = v78;
            uint64_t v498 = *(void *)(STACK[0x3E8] + 8);
            if (v498) {
              id v499 = (id)(v498 + 8);
            }
            unint64_t v500 = 0;
            unint64_t v501 = 0;
            uint64_t v502 = 40;
            do
            {
              uint64_t v503 = *(unint64_t *)((char *)&STACK[0xDB0] + v502);
              if (v503)
              {
                unint64_t v504 = *(void *)(v503 + 48);
              }
              else
              {
                unint64_t v505 = 0x94D049BB133111EBLL
                     * ((0xBF58476D1CE4E5B9 * (v500 ^ (v500 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v500 ^ (v500 >> 30))) >> 27));
                unint64_t v504 = v505 ^ (v505 >> 31);
              }
              v501 ^= (v501 << 6) - 0x61C8864680B583E9 + (v501 >> 2) + v504;
              ++v500;
              v502 += 48;
            }
            while (v500 != 13);
            unint64_t v506 = re::MaterialTechnique::combinedBuffersHash(*(re::MaterialTechnique **)STACK[0x3E8]);
            v507 = *(void **)STACK[0x3C0];
            uint64_t v508 = v507[6];
            if (v508) {
              uint64_t v509 = (*(void *)(v508 + 312)
            }
                    - 0x61C8864680B583E9
                    + (*(void *)(v508 + 136) << 6)
                    + (*(void *)(v508 + 136) >> 2)) ^ *(void *)(v508 + 136);
            else {
              uint64_t v509 = 0;
            }
            uint64_t v512 = v507[7];
            if (v512) {
              unint64_t v513 = (*(void *)(v512 + 312)
            }
                    - 0x61C8864680B583E9
                    + (*(void *)(v512 + 136) << 6)
                    + (*(void *)(v512 + 136) >> 2)) ^ *(void *)(v512 + 136);
            else {
              unint64_t v513 = 0;
            }
            uint64_t v514 = v507[9];
            if (v514) {
              uint64_t v515 = (*(void *)(v514 + 312)
            }
                    - 0x61C8864680B583E9
                    + (*(void *)(v514 + 136) << 6)
                    + (*(void *)(v514 + 136) >> 2)) ^ *(void *)(v514 + 136);
            else {
              uint64_t v515 = 0;
            }
            unint64_t v516 = re::hashCombine(v501, *(void *)(v498 + 104), v506, v509, v513, v515);
            unint64_t v517 = v516;
            unint64_t v518 = STACK[0x3E8] + 168;
            STACK[0x1ED0] = (unint64_t)v776;
            STACK[0x1ED8] = v518;
            if (!*v776) {
              goto LABEL_509;
            }
            uint64_t v519 = *(unsigned int *)(*(void *)(STACK[0x398] + 104) + 4
                                                                     * (v516 % *(unsigned int *)(STACK[0x398] + 120)));
            if (v519 == 0x7FFFFFFF) {
              goto LABEL_509;
            }
            uint64_t v520 = *(void *)(STACK[0x398] + 112);
            while (*(void *)(v520 + 24 * v519 + 8) != v516)
            {
              LODWORD(v519) = *(_DWORD *)(v520 + 24 * v519) & 0x7FFFFFFF;
              if (v519 == 0x7FFFFFFF) {
                goto LABEL_509;
              }
            }
            uint64_t v521 = *(void *)(v520 + 24 * v519 + 16);
            if (!v521) {
LABEL_509:
            }
              uint64_t v521 = re::MaterialTechniqueVariant::completeResolution<re::BufferResolution,re::BufferTableCollection>((re *)STACK[0x3E8], (uint64_t *)&STACK[0x1ED0], &STACK[0xDB0], STACK[0x3B0], v516);
            uint64_t v794 = *(void *)(v521 + 40);
            uint64_t v814 = *(void *)(v521 + 24);
            if (*(void *)(*(void *)(STACK[0x3E8] + 8) + 24))
            {
              uint64_t v785 = *(void *)(v521 + 80);
              uint64_t v805 = *(void *)(v521 + 64);
            }
            else
            {
              uint64_t v805 = 0;
              uint64_t v785 = 0;
            }
            uint64_t v522 = STACK[0x1ED8];
            STACK[0x1E60] = v517;
            int v523 = *(_DWORD *)(v522 + 28);
            re::HashSetBase<unsigned long,unsigned long,re::internal::ValueAsKey<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::add(v522, &STACK[0x1E60]);
            if (v523 != *(_DWORD *)(v522 + 28)) {
              ++*(_DWORD *)v521;
            }

            uint64_t v524 = *(void *)(STACK[0x3E8] + 8);
            unint64_t v525 = STACK[0x3C0];
            if (v524) {
              id v526 = (id)(v524 + 8);
            }
            unint64_t v527 = re::SamplerTableCollection::hash((re::SamplerTableCollection *)&STACK[0xD20]);
            unint64_t v528 = re::MaterialTechnique::combinedSamplersHash(*(re::MaterialTechnique **)STACK[0x3E8]);
            uint64_t v529 = *(void *)v525;
            unint64_t v530 = *(void *)(*(void *)v525 + 56);
            uint64_t v531 = 0x9E3779B97F4A7C17;
            if (v530) {
              uint64_t v531 = *(void *)(v530 + 952) - 0x61C8864680B583E9;
            }
            uint64_t v532 = *(void *)(v529 + 48);
            uint64_t v533 = 0x9E3779B97F4A7C17;
            if (v532) {
              uint64_t v533 = ((*(void *)(v532 + 840)
            }
                     - 0x61C8864680B583E9
                     + (*(void *)(v532 + 664) << 6)
                     + (*(void *)(v532 + 664) >> 2)) ^ *(void *)(v532 + 664))
                   - 0x61C8864680B583E9;
            if (v530) {
              unint64_t v530 = (*(void *)(v530 + 840)
            }
                    - 0x61C8864680B583E9
                    + (*(void *)(v530 + 664) << 6)
                    + (*(void *)(v530 + 664) >> 2)) ^ *(void *)(v530 + 664);
            uint64_t v534 = *(void *)(v529 + 72);
            uint64_t v535 = 0x9E3779B97F4A7C17;
            if (v534) {
              uint64_t v535 = ((*(void *)(v534 + 840)
            }
                     - 0x61C8864680B583E9
                     + (*(void *)(v534 + 664) << 6)
                     + (*(void *)(v534 + 664) >> 2)) ^ *(void *)(v534 + 664))
                   - 0x61C8864680B583E9;
            unint64_t v536 = ((v527 << 6) - 0x61C8864680B583E9 + (v527 >> 2) + *(void *)(v524 + 112)) ^ v527;
            unint64_t v537 = ((((v528 >> 2) + (v528 << 6) + v531) ^ v528) - 0x61C8864680B583E9 + (v536 << 6) + (v536 >> 2)) ^ v536;
            unint64_t v538 = (v533 + (v537 << 6) + (v537 >> 2)) ^ v537;
            unint64_t v539 = ((((v530 >> 2) + (v530 << 6) + v535) ^ v530) - 0x61C8864680B583E9 + (v538 << 6) + (v538 >> 2)) ^ v538;
            unint64_t v540 = STACK[0x3E8] + 264;
            STACK[0x1ED0] = (unint64_t)v775;
            STACK[0x1ED8] = v540;
            if (!*v775) {
              goto LABEL_532;
            }
            uint64_t v541 = *(unsigned int *)(*(void *)(STACK[0x398] + 200) + 4
                                                                     * (v539 % *(unsigned int *)(STACK[0x398] + 216)));
            if (v541 == 0x7FFFFFFF) {
              goto LABEL_532;
            }
            uint64_t v542 = *(void *)(STACK[0x398] + 208);
            while (*(void *)(v542 + 24 * v541 + 8) != v539)
            {
              LODWORD(v541) = *(_DWORD *)(v542 + 24 * v541) & 0x7FFFFFFF;
              if (v541 == 0x7FFFFFFF) {
                goto LABEL_532;
              }
            }
            uint64_t v543 = *(void *)(v542 + 24 * v541 + 16);
            if (!v543) {
LABEL_532:
            }
              uint64_t v543 = re::MaterialTechniqueVariant::completeResolution<re::SamplerResolution,re::SamplerTableCollection>((re *)STACK[0x3E8], (uint64_t *)&STACK[0x1ED0], (uint64_t)&STACK[0xD20], STACK[0x3B0], v539);
            uint64_t v792 = *(void *)(v543 + 40);
            uint64_t v812 = *(void *)(v543 + 24);
            if (*(void *)(*(void *)(STACK[0x3E8] + 8) + 24))
            {
              uint64_t v784 = *(void *)(v543 + 80);
              uint64_t v804 = *(void *)(v543 + 64);
            }
            else
            {
              uint64_t v804 = 0;
              uint64_t v784 = 0;
            }
            uint64_t v544 = STACK[0x1ED8];
            STACK[0x1E60] = v539;
            int v545 = *(_DWORD *)(v544 + 28);
            re::HashSetBase<unsigned long,unsigned long,re::internal::ValueAsKey<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::add(v544, &STACK[0x1E60]);
            if (v545 != *(_DWORD *)(v544 + 28)) {
              ++*(_DWORD *)v543;
            }

            uint64_t v546 = *(void *)(STACK[0x3E8] + 8);
            if (v546) {
              id v547 = (id)(v546 + 8);
            }
            unint64_t v548 = STACK[0x3E8] + 72;
            unint64_t v549 = ((STACK[0x378] << 6)
                  - 0x61C8864680B583E9
                  + (STACK[0x378] >> 2)
                  + ((*(void *)(**(void **)STACK[0x3E8] + 2720)
                    - 0x61C8864680B583E9
                    + (*(void *)(v546 + 80) << 6)
                    + (*(void *)(v546 + 80) >> 2)) ^ *(void *)(v546 + 80))) ^ STACK[0x378];
            v550 = (void *)STACK[0x398];
            STACK[0x1ED0] = STACK[0x398];
            STACK[0x1ED8] = v548;
            if (!*v550) {
              goto LABEL_547;
            }
            uint64_t v551 = *(unsigned int *)(*(void *)(STACK[0x398] + 8) + 4 * (v549 % *(unsigned int *)(STACK[0x398] + 24)));
            if (v551 == 0x7FFFFFFF) {
              goto LABEL_547;
            }
            uint64_t v552 = *(void *)(STACK[0x398] + 16);
            while (*(void *)(v552 + 24 * v551 + 8) != v549)
            {
              LODWORD(v551) = *(_DWORD *)(v552 + 24 * v551) & 0x7FFFFFFF;
              if (v551 == 0x7FFFFFFF) {
                goto LABEL_547;
              }
            }
            uint64_t v553 = *(void *)(v552 + 24 * v551 + 16);
            if (!v553) {
LABEL_547:
            }
              uint64_t v553 = re::MaterialTechniqueVariant::completeResolution<re::ConstantResolution,re::ConstantTableCollection>((re *)STACK[0x3E8], (uint64_t *)&STACK[0x1ED0], (uint64_t)&STACK[0x710], STACK[0x3B0], v549);
            uint64_t v793 = *(void *)(v553 + 40);
            uint64_t v813 = *(void *)(v553 + 24);
            if (*(void *)(*(void *)(STACK[0x3E8] + 8) + 24))
            {
              uint64_t v783 = *(void *)(v553 + 80);
              uint64_t v803 = *(void *)(v553 + 64);
            }
            else
            {
              uint64_t v803 = 0;
              uint64_t v783 = 0;
            }
            uint64_t v554 = STACK[0x1ED8];
            STACK[0x1E60] = v549;
            int v555 = *(_DWORD *)(v554 + 28);
            re::HashSetBase<unsigned long,unsigned long,re::internal::ValueAsKey<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::add(v554, &STACK[0x1E60]);
            if (v555 != *(_DWORD *)(v554 + 28)) {
              ++*(_DWORD *)v553;
            }

            uint64_t v556 = *(void *)(v75 + 72);
            uint64_t v557 = *(void *)(STACK[0x3E8] + 8);
            if (v557) {
              id v558 = (id)(v557 + 8);
            }
            unint64_t v559 = (STACK[0x2F0] - 0x61C8864680B583E9 + (STACK[0x378] << 6) + (STACK[0x378] >> 2)) ^ STACK[0x378];
            unint64_t v560 = ((v559 << 6) - 0x61C8864680B583E9 + (v559 >> 2) + *(void *)(v557 + 120)) ^ v559;
            unint64_t v561 = STACK[0x3E8] + 360;
            STACK[0x1ED0] = (unint64_t)v774;
            STACK[0x1ED8] = v561;
            if (!*v774) {
              goto LABEL_562;
            }
            uint64_t v562 = *(unsigned int *)(*(void *)(STACK[0x398] + 296) + 4
                                                                     * (v560 % *(unsigned int *)(STACK[0x398] + 312)));
            if (v562 == 0x7FFFFFFF) {
              goto LABEL_562;
            }
            uint64_t v563 = *(void *)(STACK[0x398] + 304);
            while (*(void *)(v563 + 24 * v562 + 8) != v560)
            {
              LODWORD(v562) = *(_DWORD *)(v563 + 24 * v562) & 0x7FFFFFFF;
              if (v562 == 0x7FFFFFFF) {
                goto LABEL_562;
              }
            }
            uint64_t v564 = *(void *)(v563 + 24 * v562 + 16);
            if (!v564) {
LABEL_562:
            }
              uint64_t v564 = re::MaterialTechniqueVariant::completeResolution<re::ArgumentBufferResolution,re::ArgumentBufferTableCollection>((re *)STACK[0x3E8], (uint64_t *)&STACK[0x1ED0], (uint64_t)&STACK[0x698], STACK[0x3B0], v560, v556);
            v806 = *(unint64_t **)(v564 + 40);
            STACK[0x2D0] = *(void *)(v564 + 24);
            if (*(void *)(*(void *)(STACK[0x3E8] + 8) + 24))
            {
              *(void *)&v791[4] = *(void *)(v564 + 80);
              STACK[0x2B0] = *(void *)(v564 + 64);
            }
            else
            {
              STACK[0x2B0] = 0;
              *(void *)&v791[4] = 0;
            }
            uint64_t v565 = STACK[0x1ED8];
            STACK[0x1E60] = v560;
            int v566 = *(_DWORD *)(v565 + 28);
            re::HashSetBase<unsigned long,unsigned long,re::internal::ValueAsKey<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::add(v565, &STACK[0x1E60]);
            if (v566 != *(_DWORD *)(v565 + 28)) {
              ++*(_DWORD *)v564;
            }

            unint64_t shouldCompileSynchronously = STACK[0x3C0];
            unint64_t v567 = STACK[0x2A0];
            if (!(STACK[0x2D0] | STACK[0x2B0])) {
              goto LABEL_570;
            }
            unint64_t v568 = v73[3];
            uint64_t v569 = *(void *)(v75 + 24);
            STACK[0x588] = v568;
            STACK[0x580] = v569;
            unint64_t v570 = *(void *)(*(void *)STACK[0x3E8] + 8);
            STACK[0x5A0] = (unint64_t)&STACK[0x698];
            STACK[0x590] = v570;
            STACK[0x5A8] = v567;
            STACK[0x5B8] = v75;
            if (!LOBYTE(STACK[0x620]))
            {
              re::ensureHeapInitialized(v569, (id *)(v568 + 184));
              uint64_t v594 = *(void *)(v75 + 24);
              uint64_t v595 = *(void *)(v594 + 80);
              if (v595)
              {
                v596 = *(uint64_t **)(v594 + 96);
                uint64_t v597 = 8 * v595;
                do
                {
                  uint64_t v598 = *v596++;
                  objc_msgSend(*(id *)v75, sel_useHeap_stages_, v598, 3);
                  v597 -= 8;
                }
                while (v597);
              }
              LOBYTE(STACK[0x620]) = 1;
              re::Optional<re::DrawCallEncoderStates>::~Optional((uint64_t)&STACK[0x1088]);
              STACK[0x2F0] = STACK[0x3E8];
            }
            else
            {
LABEL_570:
              re::Optional<re::DrawCallEncoderStates>::~Optional((uint64_t)&STACK[0x1088]);
              STACK[0x2F0] = STACK[0x3E8];
            }
LABEL_571:
            v571 = (unint64_t *)STACK[0x388];
            if (!*(unsigned char *)STACK[0x390]) {
              v571 = &STACK[0x42F];
            }
            unsigned __int8 v572 = *(unsigned char *)v571;
            __int16 v573 = STACK[0x530];
            if ((STACK[0x530] & 4) == 0 || LOBYTE(STACK[0x534]) != v572 || LOBYTE(STACK[0x535]) != v572)
            {
              (*(void (**)(void, char *, void, void))(*(void *)(v75 + 8) + 128))(**(void **)(v75 + 8), sel_setStencilFrontReferenceValue_backReferenceValue_, v572, v572);
              LOBYTE(STACK[0x534]) = v572;
              LOBYTE(STACK[0x535]) = v572;
              __int16 v573 = LOWORD(STACK[0x530]) | 4;
              LOWORD(STACK[0x530]) = v573;
            }
            if ((v573 & 8) == 0
              || *(float *)&STACK[0x538] != v355
              || *(float *)&STACK[0x53C] != v354
              || *(float *)&STACK[0x540] != v353)
            {
              (*(void (**)(void, char *, float, float, float))(*(void *)(v75 + 8) + 72))(**(void **)(v75 + 8), sel_setDepthBias_slopeScale_clamp_, v355, v354, v353);
              *(float *)&STACK[0x538] = v355;
              *(float *)&STACK[0x53C] = v354;
              *(float *)&STACK[0x540] = v353;
              LOWORD(STACK[0x530]) |= 8u;
            }
            if (!STACK[0xCE0])
            {
              id v588 = (id)STACK[0xCD8];
              unint64_t v78 = (unint64_t)v588;
              if (v588)
              {
                id v588 = objc_msgSend(objc_msgSend(v588, sel_label), sel_UTF8String);
                v589 = (const char *)v588;
              }
              else
              {
                v589 = "<NULL PSO>";
              }
              unint64_t shouldCompileSynchronously = *re::graphicsLogObjects((re *)v588);
              if (os_log_type_enabled((os_log_t)shouldCompileSynchronously, OS_LOG_TYPE_ERROR))
              {
                LODWORD(STACK[0x1ED0]) = 136315138;
                STACK[0x1ED4] = (unint64_t)v589;
                _os_log_error_impl(&dword_233120000, (os_log_t)shouldCompileSynchronously, OS_LOG_TYPE_ERROR, "cachedPipelineStatePair with PSO '%s' has a NULL depth-stencil. Draw call will be dropped.", (uint8_t *)&STACK[0x1ED0], 0xCu);
              }
              LOWORD(STACK[0x530]) = 0;
              re::ShaderResourceBindState::reset((uint64_t)&STACK[0x12C0]);
              LOBYTE(STACK[0x1ED0]) = 0;
              unint64_t v76 = LODWORD(STACK[0x3A4]);
              uint64_t v77 = STACK[0x2D8];
              if (LOBYTE(STACK[0xCD0]))
              {
                if (STACK[0xCE8])
                {

                  STACK[0xCE8] = 0;
                }
                if (STACK[0xCE0])
                {

                  STACK[0xCE0] = 0;
                }
                if (STACK[0xCD8])
                {

                  STACK[0xCD8] = 0;
                }
                LOBYTE(STACK[0xCD0]) = 0;
              }
              re::Optional<re::DrawCallEncoderStates>::~Optional((uint64_t)&STACK[0x1ED0]);
              if (v78) {

              }
              char v188 = 0;
              STACK[0x2F0] = 0;
              goto LABEL_793;
            }
            uint64_t v574 = v73[3];
            STACK[0x318] = *(void *)(v574 + 24);
            unint64_t v78 = v73[1];
            unint64_t v575 = *(void *)(v73[2] + 24);
            STACK[0x2A0] = *(void *)(v75 + 64);
            uint64_t v789 = v73[8];
            STACK[0x378] = *(void *)STACK[0x330];
            int v788 = *((unsigned __int8 *)v73 + 72);
            int v773 = *((unsigned __int8 *)v73 + 108);
            uint64_t v767 = v574;
            int v771 = *(unsigned __int8 *)(v574 + 302);
            *(_OWORD *)&STACK[0x400] = *(_OWORD *)&STACK[0x41F];
            LOBYTE(STACK[0x410]) = STACK[0x42F];
            v576.isa = *(Class *)shouldCompileSynchronously;
            uint64_t v577 = *(void *)(*(void *)shouldCompileSynchronously + 24);
            unint64_t v810 = v78;
            if (v577)
            {
              v578 = (os_unfair_lock_s **)*((void *)v576.isa + 2);
              STACK[0x1ED8] = 0;
              STACK[0x1EE0] = 0;
              LODWORD(STACK[0x1EE8]) = 0;
              STACK[0x1EF0] = 0;
              STACK[0x1ED0] = v575;
              re::DynamicArray<re::EvaluationRegisterId<int>>::setCapacity(&STACK[0x1ED0], 0);
              ++LODWORD(STACK[0x1EE8]);
              v579 = &v578[2 * v577];
              v580 = (_WORD *)STACK[0x3B0];
              do
              {
                STACK[0x1E60] = 0;
                re::TextureHandle::metalTexture(v578, &STACK[0x1168]);
                v581 = (void *)STACK[0x1168];
                if (STACK[0x1168]) {

                }
                STACK[0x1E60] = (unint64_t)v581;
                unint64_t v582 = STACK[0x1EE0];
                if (STACK[0x1EE0])
                {
                  unint64_t v583 = STACK[0x1EF0];
                  do
                  {
                    unint64_t v584 = v582 >> 1;
                    v585 = (unint64_t *)(v583 + 8 * (v582 >> 1));
                    unint64_t v587 = *v585;
                    v586 = v585 + 1;
                    v582 += ~(v582 >> 1);
                    if (v587 < (unint64_t)v581) {
                      unint64_t v583 = (unint64_t)v586;
                    }
                    else {
                      unint64_t v582 = v584;
                    }
                  }
                  while (v582);
                }
                else
                {
                  unint64_t v583 = STACK[0x1EF0];
                }
                re::DynamicArray<unsigned long>::insert(&STACK[0x1ED0], (uint64_t)(v583 - STACK[0x1EF0]) >> 3, &STACK[0x1E60]);
                v578 += 2;
              }
              while (v578 != v579);
              re::ArgumentBufferCacheReferences::addAndUseResourcePtrs(&STACK[0x5D0], (id *)v75, (uint64_t)&STACK[0x1ED0]);
              if (STACK[0x1ED0] && STACK[0x1EF0]) {
                (*(void (**)(unint64_t))(*(void *)STACK[0x1ED0] + 40))(STACK[0x1ED0]);
              }
              unint64_t shouldCompileSynchronously = STACK[0x3C0];
              v576.isa = *(Class *)STACK[0x3C0];
              unint64_t v78 = v810;
            }
            else
            {
              v580 = (_WORD *)STACK[0x3B0];
            }
            if (*((unsigned char *)v576.isa + 32)) {
              BOOL v590 = LOBYTE(STACK[0x621]) == 0;
            }
            else {
              BOOL v590 = 0;
            }
            if (v590)
            {
              objc_msgSend(*(id *)v75, sel_useHeap_stages_, *(void *)(*(void *)(v767 + 64) + 8), 3);
              LOBYTE(STACK[0x621]) = 1;
            }
            if (*(unsigned char *)(v78 + 57))
            {
              unsigned int v591 = *(unsigned __int8 *)(v78 + 58);
            }
            else
            {
              unsigned int v592 = (unsigned __int16)*v580;
              if ((v592 & 0x40) != 0)
              {
                unsigned int v591 = 0;
              }
              else
              {
                uint64_t v593 = **(void **)STACK[0x3E8];
                if (*(unsigned char *)(v593 + 124))
                {
                  unsigned int v591 = *(unsigned __int8 *)(v593 + 125);
                }
                else if ((v592 & 0x200) != 0)
                {
                  unsigned int v591 = (v592 >> 10) & 3;
                }
                else
                {
                  unsigned int v591 = *(unsigned __int8 *)(v78 + 56);
                }
              }
            }
            if (*(unsigned char *)(v78 + 60))
            {
              if (v591 == 1)
              {
                unsigned int v591 = 2;
              }
              else if (v591 == 2)
              {
                unsigned int v591 = 1;
              }
            }
            __int16 v599 = STACK[0x530];
            if ((STACK[0x530] & 1) == 0 || LOBYTE(STACK[0x532]) != v591)
            {
              (*(void (**)(void, char *, void))(*(void *)(v75 + 8) + 64))(**(void **)(v75 + 8), sel_setCullMode_, v591);
              LOBYTE(STACK[0x532]) = v591;
              __int16 v599 = LOWORD(STACK[0x530]) | 1;
              LOWORD(STACK[0x530]) = v599;
            }
            unsigned int v600 = (unsigned __int16)*v580;
            if ((v600 & 0x1000) != 0) {
              uint64_t v80 = (v600 >> 13) & 1;
            }
            else {
              uint64_t v80 = *(unsigned __int8 *)v78;
            }
            if ((v599 & 2) == 0 || LOBYTE(STACK[0x533]) != v80)
            {
              (*(void (**)(void, char *, void))(*(void *)(v75 + 8) + 168))(**(void **)(v75 + 8), sel_setTriangleFillMode_, v80);
              LOBYTE(STACK[0x533]) = v80;
              LOWORD(STACK[0x530]) |= 2u;
            }
            re::EncoderState::setRenderPipelineState((void **)&STACK[0x530], (void **)&STACK[0xCD8], v75);
            re::EncoderState::setDepthStencilState((void **)&STACK[0x530], (void **)&STACK[0xCE0], v75);
            if (v788) {
              (*(void (**)(void, char *, uint64_t, uint64_t))(*(void *)(v75 + 8) + 184))(**(void **)(v75 + 8), sel_setVisibilityResultMode_offset_, (uint64_t)(__int16)(*v580 << 10) >> 14, 8 * *v781);
            }
            v603 = *(void **)shouldCompileSynchronously;
            unint64_t v604 = *(void *)(*(void *)shouldCompileSynchronously + 56);
            if (v604)
            {
              char v605 = *(unsigned char *)(v604 + 1121);
              char v606 = *(unsigned char *)(v604 + 1122);
            }
            else
            {
              char v606 = 0;
              char v605 = 0;
            }
            STACK[0x5C8] = v604;
            LOBYTE(STACK[0x5C1]) = v605;
            LOBYTE(STACK[0x5C0]) = v606;
            unint64_t v607 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * *v797) ^ ((0xBF58476D1CE4E5B9 * *v797) >> 27));
            STACK[0x5B0] = ((*(void *)STACK[0x380] << 6)
                          - 0x61C8864680B583E9
                          + (*(void *)STACK[0x380] >> 2)
                          + (v607 ^ (v607 >> 31))) ^ *(void *)STACK[0x380];
            unint64_t v76 = STACK[0x2D0];
            int v230 = v806;
            if (STACK[0x2D0])
            {
              do
              {
                STACK[0x598] = (unint64_t)v230;
                uint64_t v608 = re::processArgumentBufferContextAndUseResources((uint64_t)&STACK[0x580], (uint64_t)&STACK[0x5D0], (id *)v75);
                unint64_t shouldCompileSynchronously = v75;
                unint64_t v75 = *(unsigned __int8 *)(v608 + 75);
                if (v75 >= 2) {
                  goto LABEL_946;
                }
                unint64_t v78 = v608;
                uint64_t v80 = (uint64_t)*(id *)(v608 + 8 * v75);
                objc_msgSend(*(id *)(v78 + 8 * v75), sel_length);
                re::ShaderResourceBindState::bindVertexResource((uint64_t)&STACK[0x12C0], v80, 0, *((unsigned __int16 *)v230 + 68), *(uint64_t **)(shouldCompileSynchronously + 8), 0, v610);
                unint64_t v75 = shouldCompileSynchronously;
                if (v80) {

                }
                v230 += 18;
                --v76;
              }
              while (v76);
              v603 = *(void **)STACK[0x3C0];
            }
            uint64_t v611 = *v603;
            v612 = (re::FrameContext *)STACK[0x2A8];
            int v230 = &STACK[0x1020];
            if (*v603)
            {
              unint64_t v613 = *(void *)(v611 + 8);
              if (v613)
              {
                uint64_t v614 = 0;
                for (unsigned int m = 0; m < v613; v614 = ++m)
                {
                  uint64_t v616 = *(void *)(v611 + 16);
                  unint64_t v617 = *(void *)(v616 + 8 * v614);
                  if (v617)
                  {
                    objc_msgSend(*(id *)(v616 + 8 * v614), sel_length);
                    re::ShaderResourceBindState::bindVertexResource((uint64_t)&STACK[0x12C0], v617, 0, m, *(uint64_t **)(v75 + 8), 0, v618);
                    unint64_t v613 = *(void *)(v611 + 8);
                  }
                }
              }
            }
            uint64_t v619 = STACK[0x3B0];
            uint64_t v620 = STACK[0x2A0];
            if (v813)
            {
              uint64_t v621 = v793;
              do
              {
                re::fillConstantBuffer((uint64_t)&STACK[0x1ED0], v612, v620, (uint64_t)&STACK[0x628], v789, (uint64_t)&STACK[0x710], v619, v621);
                re::ShaderResourceBindState::bindVertexResource((uint64_t)&STACK[0x12C0], STACK[0x1EE0], STACK[0x1ED8], *(unsigned __int16 *)(v621 + 96), *(uint64_t **)(v75 + 8), 0, v622);
                v621 += 112;
              }
              while (v621 != v793 + 112 * v813);
            }
            unint64_t shouldCompileSynchronously = STACK[0x2F8];
            int v123 = v782;
            if (v816)
            {
              uint64_t v623 = 8 * v816;
              uint64_t v624 = v795 + 4;
              while (1)
              {
                (*(void (**)(unint64_t *__return_ptr))(*(void *)*(&STACK[0x1020]
                                                                                    + *(unsigned __int16 *)(v624 - 2))
                                                                       + 24))(&STACK[0x1ED0]);
                unint64_t v625 = *(unsigned __int16 *)(v624 - 4);
                v626 = (void *)STACK[0x1ED0];
                if (v625 > 0x1E) {
                  goto LABEL_678;
                }
                v627 = &STACK[0x12C0] + 2 * v625;
                if (!*((unsigned char *)v627 + 1984)) {
                  break;
                }
                if ((void *)v627[249] != v626) {
                  goto LABEL_677;
                }
                if (v626) {
                  goto LABEL_673;
                }
LABEL_674:
                v624 += 8;
                v623 -= 8;
                if (!v623) {
                  goto LABEL_680;
                }
              }
              *((unsigned char *)v627 + 1984) = 1;
LABEL_677:
              v627[249] = (unint64_t)v626;
LABEL_678:
              (*(void (**)(void, char *, void *))(*(void *)(v75 + 8) + 48))(**(void **)(v75 + 8), sel_setVertexTexture_atIndex_, v626);
              v626 = (void *)STACK[0x1ED0];
              if (!STACK[0x1ED0]) {
                goto LABEL_674;
              }
LABEL_673:

              goto LABEL_674;
            }
LABEL_680:
            unint64_t v78 = 48;
            if (v814)
            {
              uint64_t v80 = 8 * v814;
              unint64_t v76 = v794 + 4;
              while (1)
              {
                v628 = &STACK[0xDB0] + 6 * *(unsigned __int16 *)(v76 - 2);
                unint64_t v629 = *(unsigned __int16 *)v76;
                unint64_t v630 = v628[1];
                if (v630 <= v629) {
                  break;
                }
                re::ShaderResourceBindState::bindVertexResource((uint64_t)&STACK[0x12C0], *(void *)(*v628 + 16 * v629), *(_DWORD *)(*v628 + 16 * v629 + 8), *(unsigned __int16 *)(v76 - 4), *(uint64_t **)(v75 + 8), 0, v602);
                v76 += 8;
                v80 -= 8;
                if (!v80) {
                  goto LABEL_684;
                }
              }
LABEL_947:
              re::internal::assertLog((re::internal *)6, v601, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v629, v630);
              _os_crash();
              __break(1u);
LABEL_948:
              re::internal::assertLog((re::internal *)6, v649, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < N", "operator[]", 242, v76, 2);
              _os_crash();
              __break(1u);
LABEL_949:
              STACK[0x1118] = 0;
              *(_OWORD *)&STACK[0x1F10] = 0u;
              *(_OWORD *)&STACK[0x1F00] = 0u;
              *(_OWORD *)&STACK[0x1EF0] = 0u;
              *(_OWORD *)&STACK[0x1EE0] = 0u;
              *(_OWORD *)&STACK[0x1ED0] = 0u;
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              LODWORD(STACK[0x1E60]) = 136315906;
              STACK[0x1E64] = (unint64_t)"operator[]";
              LOWORD(STACK[0x1E6C]) = 1024;
              LODWORD(STACK[0x1E6E]) = 468;
              LOWORD(STACK[0x1E72]) = 2048;
              STACK[0x1E74] = v76;
              LOWORD(STACK[0x1E7C]) = 2048;
              STACK[0x1E7E] = v80;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_950:
              STACK[0x1118] = 0;
              *(_OWORD *)&STACK[0x1F10] = 0u;
              *(_OWORD *)&STACK[0x1F00] = 0u;
              *(_OWORD *)&STACK[0x1EF0] = 0u;
              *(_OWORD *)&STACK[0x1EE0] = 0u;
              *(_OWORD *)&STACK[0x1ED0] = 0u;
              uint64_t v73 = (uint64_t *)&_os_log_internal;
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              LODWORD(STACK[0x1E60]) = 136315906;
              STACK[0x1E64] = (unint64_t)"operator[]";
              LOWORD(STACK[0x1E6C]) = 1024;
              LODWORD(STACK[0x1E6E]) = 468;
              LOWORD(STACK[0x1E72]) = 2048;
              STACK[0x1E74] = v76;
              LOWORD(STACK[0x1E7C]) = 2048;
              STACK[0x1E7E] = v80;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_951:
              STACK[0x1118] = 0;
              *(_OWORD *)&STACK[0x1F10] = 0u;
              *(_OWORD *)&STACK[0x1F00] = 0u;
              *(_OWORD *)&STACK[0x1EF0] = 0u;
              *(_OWORD *)&STACK[0x1EE0] = 0u;
              *(_OWORD *)&STACK[0x1ED0] = 0u;
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              LODWORD(STACK[0x1E60]) = 136315906;
              STACK[0x1E64] = (unint64_t)"operator[]";
              LOWORD(STACK[0x1E6C]) = 1024;
              LODWORD(STACK[0x1E6E]) = 468;
              LOWORD(STACK[0x1E72]) = 2048;
              STACK[0x1E74] = v76;
              LOWORD(STACK[0x1E7C]) = 2048;
              STACK[0x1E7E] = (unint64_t)v230;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_952:
              STACK[0x1118] = 0;
              *(_OWORD *)&STACK[0x1F10] = 0u;
              *(_OWORD *)&STACK[0x1F00] = 0u;
              *(_OWORD *)&STACK[0x1EF0] = 0u;
              *(_OWORD *)&STACK[0x1EE0] = 0u;
              *(_OWORD *)&STACK[0x1ED0] = 0u;
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              LODWORD(STACK[0x1E60]) = 136315906;
              STACK[0x1E64] = (unint64_t)"operator[]";
              LOWORD(STACK[0x1E6C]) = 1024;
              LODWORD(STACK[0x1E6E]) = 468;
              LOWORD(STACK[0x1E72]) = 2048;
              STACK[0x1E74] = v76;
              LOWORD(STACK[0x1E7C]) = 2048;
              STACK[0x1E7E] = (unint64_t)v230;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_953:
              STACK[0x1168] = 0;
              *(_OWORD *)&STACK[0x1F10] = 0u;
              *(_OWORD *)&STACK[0x1F00] = 0u;
              *(_OWORD *)&STACK[0x1EF0] = 0u;
              *(_OWORD *)&STACK[0x1EE0] = 0u;
              *(_OWORD *)&STACK[0x1ED0] = 0u;
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              LODWORD(STACK[0x1E60]) = 136315906;
              STACK[0x1E64] = (unint64_t)"operator[]";
              LOWORD(STACK[0x1E6C]) = 1024;
              LODWORD(STACK[0x1E6E]) = 476;
              LOWORD(STACK[0x1E72]) = 2048;
              STACK[0x1E74] = v78;
              LOWORD(STACK[0x1E7C]) = 2048;
              STACK[0x1E7E] = v75;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_954:
              re::internal::assertLog((re::internal *)6, v641, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v642, v641);
              _os_crash();
              __break(1u);
LABEL_955:
              re::internal::assertLog((re::internal *)6, (uint64_t)v148, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 296, v158, v161);
              _os_crash();
              __break(1u);
LABEL_956:
              re::internal::assertLog((re::internal *)6, (uint64_t)v148, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v162, v163);
              _os_crash();
              __break(1u);
LABEL_957:
              STACK[0x710] = 0;
              *(_OWORD *)&STACK[0x1300] = 0u;
              *(_OWORD *)&STACK[0x12F0] = 0u;
              *(_OWORD *)&STACK[0x12E0] = 0u;
              *(_OWORD *)&STACK[0x12D0] = 0u;
              *(_OWORD *)&STACK[0x12C0] = 0u;
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              LODWORD(STACK[0x1ED0]) = 136315906;
              *(void *)(shouldCompileSynchronously + 116) = "operator[]";
              LOWORD(STACK[0x1EDC]) = 1024;
              *(_DWORD *)(shouldCompileSynchronously + 126) = 797;
              LOWORD(STACK[0x1EE2]) = 2048;
              *(void *)(shouldCompileSynchronously + 1re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 1;
              LOWORD(STACK[0x1EEC]) = 2048;
              *(void *)(shouldCompileSynchronously + 142) = v76;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
              goto LABEL_958;
            }
LABEL_684:
            if (*(unsigned char *)(STACK[0x3E8] + 16) && *(unsigned char *)(**(void **)STACK[0x3E8] + 2848))
            {
              re::createVertexFetchArgumentBuffer<re::mtl::RenderCommandEncoder>((id *)(v767 + 184), (id *)v75, (re *)STACK[0x378], &STACK[0x1ED0]);
              id v631 = (id)STACK[0x1ED0];
              objc_msgSend((id)STACK[0x1ED0], sel_length);
              re::ShaderResourceBindState::bindVertexResource((uint64_t)&STACK[0x12C0], (unint64_t)v631, 0, 0x1Eu, *(uint64_t **)(v75 + 8), 0, v632);
              if (v631) {

              }
              unint64_t v633 = STACK[0xCE8];
              if (STACK[0x1580] != STACK[0xCE8]
                || STACK[0x1578]
                || LODWORD(STACK[0x158C])
                || !LOBYTE(STACK[0x1588])
                || LOWORD(STACK[0x158A]))
              {
                [*(id *)v75 setVertexVisibleFunctionTable:STACK[0xCE8] atBufferIndex:29];
                STACK[0x1578] = 0;
                STACK[0x1580] = v633;
                if (!LOBYTE(STACK[0x1588])) {
                  LOBYTE(STACK[0x1588]) = 1;
                }
                LOWORD(STACK[0x158A]) = 0;
                LODWORD(STACK[0x158C]) = 0;
              }
              if (STACK[0x1ED0]) {
            }
              }
            else if (shouldCompileSynchronously)
            {
              unint64_t v634 = v77 + 10 * shouldCompileSynchronously;
              unint64_t v76 = a29;
              do
              {
                if (*(_WORD *)(v77 + 6))
                {
                  unint64_t v635 = STACK[0x378];
                  do
                  {
                    unint64_t v636 = v635;
                    unint64_t v635 = *(void *)(v635 + 8);
                    unint64_t v75 = *(void *)(v636 + 32);
                    if (v635) {
                      BOOL v637 = v75 == 0;
                    }
                    else {
                      BOOL v637 = 0;
                    }
                  }
                  while (v637);
                  unint64_t v78 = *(unsigned __int16 *)(v77 + 4);
                  if (v75 <= v78) {
                    goto LABEL_953;
                  }
                  uint64_t v638 = *(void *)(v636 + 40);
                  if (*(unsigned char *)(v638 + 16 * v78 + 5) && !*(unsigned char *)(v77 + 8))
                  {
                    unint64_t v78 = *(unsigned __int16 *)(v638 + 16 * v78);
                    unint64_t shouldCompileSynchronously = 1;
                    uint64_t v80 = v78;
                  }
                  else
                  {
                    unint64_t v78 = 0;
                    uint64_t v80 = 0;
                    unint64_t shouldCompileSynchronously = 1;
                  }
                  unint64_t v75 = STACK[0x3E0];
                }
                else
                {
                  unint64_t shouldCompileSynchronously = 0;
                  unint64_t v78 = STACK[0x320];
                  uint64_t v80 = v76;
                }
                if (*(unsigned char *)(v77 + 8))
                {
                  id v639 = *(id *)(STACK[0x318] + 760);
                  objc_msgSend(v639, sel_length);
                  re::ShaderResourceBindState::bindVertexResource((uint64_t)&STACK[0x12C0], (unint64_t)v639, 0, *(unsigned __int16 *)v77, *(uint64_t **)(v75 + 8), shouldCompileSynchronously, v80);
                  if (v639) {
                }
                  }
                else
                {
                  uint64_t v640 = re::AttributeTable::buffers((re::AttributeTable *)STACK[0x378]);
                  unint64_t v642 = *(unsigned __int16 *)(v77 + 4);
                  if (v641 <= v642) {
                    goto LABEL_954;
                  }
                  re::ShaderResourceBindState::bindVertexResource((uint64_t)&STACK[0x12C0], *(void *)(v640 + 16 * v642), *(_DWORD *)(v640 + 16 * v642 + 8), *(unsigned __int16 *)v77, *(uint64_t **)(v75 + 8), shouldCompileSynchronously, v78);
                  STACK[0x320] = v78;
                  uint64_t v80 = v76;
                }
                v77 += 10;
                unint64_t v76 = v80;
              }
              while (v77 != v634);
              goto LABEL_721;
            }
            uint64_t v80 = a29;
LABEL_721:
            a29 = v80;
            unint64_t shouldCompileSynchronously = (unint64_t)&STACK[0x1E60];
            int v230 = &STACK[0x1020];
            unint64_t v78 = STACK[0x3E8];
            if (v812)
            {
              uint64_t v80 = 8 * v812;
              v643 = (unsigned __int16 *)(v792 + 4);
              while (1)
              {
                v644 = (unint64_t *)re::SamplerTableReference::samplerAt((re::SamplerTableReference *)(&STACK[0xD20] + 3 * *(v643 - 1)), *v643);
                unint64_t v645 = *(v643 - 2);
                unint64_t v646 = *v644;
                if (v645 > 0x1E) {
                  goto LABEL_726;
                }
                v647 = &STACK[0x12C0] + v645;
                if (v647[186] != v646) {
                  break;
                }
LABEL_727:
                v643 += 4;
                v80 -= 8;
                if (!v80) {
                  goto LABEL_728;
                }
              }
              v647[186] = v646;
              unint64_t v646 = *v644;
LABEL_726:
              objc_msgSend(*(id *)v75, "setVertexSamplerState:atIndex:", v646);
              goto LABEL_727;
            }
LABEL_728:
            if (*(void *)(*(void *)(v78 + 8) + 24))
            {
              uint64_t v77 = STACK[0x2B0];
              unint64_t v75 = *(void *)&v791[4];
              if (STACK[0x2B0])
              {
                do
                {
                  STACK[0x598] = v75;
                  unint64_t shouldCompileSynchronously = STACK[0x3E0];
                  uint64_t v648 = re::processArgumentBufferContextAndUseResources((uint64_t)&STACK[0x580], (uint64_t)&STACK[0x5D0], (id *)STACK[0x3E0]);
                  unint64_t v76 = *(unsigned __int8 *)(v648 + 75);
                  if (v76 >= 2) {
                    goto LABEL_948;
                  }
                  uint64_t v80 = v648;
                  unint64_t v78 = (unint64_t)*(id *)(v648 + 8 * v76);
                  objc_msgSend(*(id *)(v80 + 8 * v76), sel_length);
                  unint64_t v650 = *(unsigned __int16 *)(v75 + 136);
                  v651 = *(uint64_t **)(shouldCompileSynchronously + 8);
                  if (v650 < 0x1F)
                  {
                    STACK[0x1ED0] = v78;
                    STACK[0x1ED8] = 0;
                    uint64_t v80 = (uint64_t)(&STACK[0x12C0] + 3 * v650 + 93);
                    LOBYTE(STACK[0x1EE0]) = 1;
                    LOWORD(STACK[0x1EE2]) = 0;
                    LODWORD(STACK[0x1EE4]) = 0;
                    if (!re::ShaderResourceBindState::BufferBindState::operator==(v80, (uint64_t)&STACK[0x1ED0]))
                    {
                      uint64_t v652 = *v651;
                      if (*(void *)v80 == v78) {
                        ((void (*)(uint64_t, char *, void, unint64_t))v651[12])(v652, sel_setFragmentBufferOffset_atIndex_, 0, v650);
                      }
                      else {
                        ((void (*)(uint64_t, char *, unint64_t, void, unint64_t))v651[11])(v652, sel_setFragmentBuffer_offset_atIndex_, v78, 0, v650);
                      }
                      *(void *)uint64_t v80 = v78;
                      *(&STACK[0x12C0] + 3 * v650 + 94) = 0;
                      v653 = &STACK[0x12C0] + 3 * v650;
                      if (!*((unsigned char *)v653 + 760)) {
                        *((unsigned char *)v653 + 760) = 1;
                      }
                      v654 = &STACK[0x12C0] + 3 * v650;
                      *((_WORD *)v654 + 381) = 0;
                      *((_DWORD *)v654 + 191) = 0;
                    }
                  }
                  else
                  {
                    ((void (*)(void, char *, unint64_t, void, void))v651[11])(*v651, sel_setFragmentBuffer_offset_atIndex_, v78, 0, *(unsigned __int16 *)(v75 + 136));
                  }
                  if (v78) {

                  }
                  v75 += 144;
                  --v77;
                  unint64_t shouldCompileSynchronously = (unint64_t)&STACK[0x1E60];
                  int v230 = &STACK[0x1020];
                }
                while (v77);
              }
              uint64_t v655 = *(void *)(*(void *)STACK[0x3C0] + 8);
              unint64_t v75 = STACK[0x3E0];
              if (v655)
              {
                unint64_t v656 = *(void *)(v655 + 8);
                if (v656)
                {
                  uint64_t v657 = 0;
                  for (n = 0; n < v656; uint64_t v657 = ++n)
                  {
                    uint64_t v659 = *(void *)(v655 + 16);
                    unint64_t v660 = *(void *)(v659 + 8 * v657);
                    if (v660)
                    {
                      unsigned int v661 = objc_msgSend(*(id *)(v659 + 8 * v657), sel_length);
                      STACK[0x1ED0] = v660;
                      LODWORD(STACK[0x1ED8]) = 0;
                      LODWORD(STACK[0x1EDC]) = v661;
                      re::ShaderResourceBindState::bindFragmentResource((re::ShaderResourceBindState *)&STACK[0x12C0], (const BufferView *)&STACK[0x1ED0], n, *(RenderCommandEncoder **)(v75 + 8));
                      unint64_t v656 = *(void *)(v655 + 8);
                    }
                  }
                }
              }
              v662 = (re::FrameContext *)STACK[0x2A8];
              uint64_t v663 = STACK[0x3B0];
              uint64_t v664 = STACK[0x2A0];
              if (v803)
              {
                uint64_t v665 = v783;
                do
                {
                  re::fillConstantBuffer((uint64_t)&STACK[0x1ED0], v662, v664, (uint64_t)&STACK[0x628], v789, (uint64_t)&STACK[0x710], v663, v665);
                  STACK[0x1E60] = STACK[0x1EE0];
                  STACK[0x1E68] = STACK[0x1ED8];
                  re::ShaderResourceBindState::bindFragmentResource((re::ShaderResourceBindState *)&STACK[0x12C0], (const BufferView *)&STACK[0x1E60], *(unsigned __int16 *)(v665 + 96), *(RenderCommandEncoder **)(v75 + 8));
                  v665 += 112;
                }
                while (v665 != v783 + 112 * v803);
              }
              int v123 = v782;
              if (v807)
              {
                uint64_t v666 = 8 * v807;
                v667 = v786;
                do
                {
                  if (*((unsigned char *)v667 + 6))
                  {
                    unint64_t v668 = *v667;
                    if (v668 <= 0x1E)
                    {
                      v669 = &STACK[0x12C0] + 2 * v668;
                      if (*((unsigned char *)v669 + 2480))
                      {
                        if (!v669[311]) {
                          goto LABEL_771;
                        }
                      }
                      else
                      {
                        *((unsigned char *)v669 + 2480) = 1;
                      }
                      v669[311] = 0;
                    }
                    (*(void (**)(void, char *, void))(*(void *)(v75 + 8) + 104))(**(void **)(v75 + 8), sel_setFragmentTexture_atIndex_, 0);
                  }
                  else
                  {
                    (*(void (**)(unint64_t *__return_ptr))(*(void *)*(&STACK[0x1020] + v667[1])
                                                                           + 24))(&STACK[0x1ED0]);
                    unint64_t v670 = *v667;
                    v671 = (void *)STACK[0x1ED0];
                    if (v670 <= 0x1E)
                    {
                      v672 = &STACK[0x12C0] + 2 * v670;
                      if (*((unsigned char *)v672 + 2480))
                      {
                        if ((void *)v672[311] == v671)
                        {
                          if (!v671) {
                            goto LABEL_771;
                          }
LABEL_770:

                          goto LABEL_771;
                        }
                      }
                      else
                      {
                        *((unsigned char *)v672 + 2480) = 1;
                      }
                      v672[311] = (unint64_t)v671;
                    }
                    (*(void (**)(void, char *, void *))(*(void *)(v75 + 8) + 104))(**(void **)(v75 + 8), sel_setFragmentTexture_atIndex_, v671);
                    v671 = (void *)STACK[0x1ED0];
                    if (STACK[0x1ED0]) {
                      goto LABEL_770;
                    }
                  }
LABEL_771:
                  v667 += 4;
                  v666 -= 8;
                }
                while (v666);
              }
              uint64_t v77 = 48;
              if (v805)
              {
                uint64_t v673 = 8 * v805;
                v674 = (unsigned __int16 *)(v785 + 4);
                do
                {
                  STACK[0x1ED0] = re::BufferTableReference::getBuffer((re::BufferTableReference *)(&STACK[0xDB0] + 6 * *(v674 - 1)), *v674);
                  STACK[0x1ED8] = v675;
                  re::ShaderResourceBindState::bindFragmentResource((re::ShaderResourceBindState *)&STACK[0x12C0], (const BufferView *)&STACK[0x1ED0], *(v674 - 2), *(RenderCommandEncoder **)(v75 + 8));
                  v674 += 4;
                  v673 -= 8;
                }
                while (v673);
              }
              unint64_t v78 = STACK[0x3E8];
              if (v804)
              {
                uint64_t v676 = 8 * v804;
                v677 = (unsigned __int16 *)(v784 + 4);
                while (1)
                {
                  v678 = (unint64_t *)re::SamplerTableReference::samplerAt((re::SamplerTableReference *)(&STACK[0xD20] + 3 * *(v677 - 1)), *v677);
                  unint64_t v679 = *(v677 - 2);
                  unint64_t v680 = *v678;
                  if (v679 > 0x1E) {
                    goto LABEL_780;
                  }
                  v681 = &STACK[0x12C0] + v679;
                  if (v681[217] != v680) {
                    break;
                  }
LABEL_781:
                  v677 += 4;
                  v676 -= 8;
                  if (!v676) {
                    goto LABEL_782;
                  }
                }
                v681[217] = v680;
                unint64_t v680 = *v678;
LABEL_780:
                objc_msgSend(*(id *)v75, sel_setFragmentSamplerState_atIndex_, v680);
                goto LABEL_781;
              }
            }
LABEL_782:
            int v682 = *(unsigned char *)(STACK[0x3B0] + 1) & 1;
            if ((STACK[0x530] & 0x10) == 0 || LOBYTE(STACK[0x544]) != v682)
            {
              (*(void (**)(void, char *, void))(*(void *)(v75 + 8) + 136))(**(void **)(v75 + 8), sel_setFrontFacingWinding_, *(unsigned char *)(STACK[0x3B0] + 1) & 1);
              LOBYTE(STACK[0x544]) = v682;
              LOWORD(STACK[0x530]) |= 0x10u;
            }
            uint64_t v80 = STACK[0x308];
            re::EncoderState::setVertexAmplificationCountForState((_anonymous_namespace_ *)&STACK[0x530], (_anonymous_namespace_ *)(v771 != 0), v773 != 0, v810 + 8, *(unsigned __int8 *)STACK[0x310], *(unsigned __int8 *)STACK[0x308], v75);
            if (*(void *)(*(void *)(v78 + 8) + 184))
            {
              unint64_t v76 = STACK[0x330];
              uint64_t v683 = re::AttributeTable::buffers(*(re::AttributeTable **)STACK[0x330]);
              unint64_t v685 = *v798;
              if (v684 <= v685) {
                goto LABEL_960;
              }
              uint64_t v80 = *(void *)(v683 + 16 * v685);
              uint64_t v686 = re::AttributeTable::buffers(*(re::AttributeTable **)v76);
              unint64_t v688 = *v798;
              if (v687 <= v688) {
                goto LABEL_961;
              }
              objc_msgSend(*(id *)v75, sel_setTessellationFactorBuffer_offset_instanceStride_, v80, *(unsigned int *)(v686 + 16 * v688 + 8), 0);
              objc_msgSend(*(id *)v75, sel_drawPatches_patchStart_patchCount_patchIndexBuffer_patchIndexBufferOffset_instanceCount_baseInstance_, *(unsigned __int8 *)(*(void *)(v78 + 8) + 176), 0, *v780, 0, 0, 1);
              goto LABEL_789;
            }
            unsigned int v692 = *(unsigned __int16 *)v80;
            int v693 = *((_DWORD *)v73 + 28);
            if (v693)
            {
              BOOL v695 = (v692 & 2) == 0 || v693 != 2;
              BOOL v696 = (v692 & 1) != 0 && v693 == 1;
              uint64_t v80 = (uint64_t)v779;
              if (!v696 && v695) {
                goto LABEL_789;
              }
            }
            else
            {
              uint64_t v80 = (uint64_t)v779;
              if ((v692 & 3) == 0)
              {
LABEL_789:
                unint64_t v689 = STACK[0x2A0];
                *(_DWORD *)(v689 + 8) = *(_DWORD *)(STACK[0x2A0] + 8) + 1;
                v690 = *(_DWORD **)(v689 + 96);
                if (v690) {
                  ++*v690;
                }
                v691 = (unint64_t ***)STACK[0x3E8];
                if (STACK[0x2E0])
                {
                  LOBYTE(STACK[0x1ED0]) = 0;
                  LOBYTE(STACK[0x1168]) = 0;
                  LOBYTE(STACK[0x1140]) = 0;
                  if (*v691)
                  {
                    v749 = **v691;
                    if (v749)
                    {
                      unint64_t v78 = *v749;
                      LOBYTE(STACK[0x1E60]) = 1;
                      re::DynamicString::DynamicString((re::DynamicString *)&STACK[0x1E68], (const re::DynamicString *)(v749 + 305));
                      re::Optional<re::DynamicString>::operator=((unsigned __int8 *)&STACK[0x1168], &STACK[0x1E60]);
                      if (LOBYTE(STACK[0x1E60]) && STACK[0x1E68] && (STACK[0x1E70] & 1) != 0) {
                        (*(void (**)(unint64_t, unint64_t))(*(void *)STACK[0x1E68] + 40))(STACK[0x1E68], STACK[0x1E78]);
                      }
                      v750 = (const re::DynamicString *)(**v691 + 309);
                      LOBYTE(STACK[0x1E60]) = 1;
                      re::DynamicString::DynamicString((re::DynamicString *)&STACK[0x1E68], v750);
                      re::Optional<re::DynamicString>::operator=((unsigned __int8 *)&STACK[0x1140], &STACK[0x1E60]);
                      if (LOBYTE(STACK[0x1E60]) && STACK[0x1E68] && (STACK[0x1E70] & 1) != 0) {
                        (*(void (**)(unint64_t, unint64_t))(*(void *)STACK[0x1E68] + 40))(STACK[0x1E68], STACK[0x1E78]);
                      }
                      v751 = **v691;
                      LOBYTE(STACK[0x1E60]) = 1;
                      long long v752 = *(_OWORD *)(v751 + 11);
                      *(_OWORD *)&STACK[0x1E68] = *(_OWORD *)(v751 + 9);
                      *(_OWORD *)&STACK[0x1E78] = v752;
                      *(_OWORD *)&STACK[0x1E88] = *(_OWORD *)(v751 + 13);
                      LODWORD(STACK[0x1E98]) = *((_DWORD *)v751 + 30);
                      int v753 = *((unsigned __int8 *)v751 + 124);
                      LOBYTE(STACK[0x1E9C]) = v753;
                      if (v753) {
                        LOBYTE(STACK[0x1E9D]) = *((unsigned char *)v751 + 125);
                      }
                      re::DynamicArray<re::RenderAttachmentState>::DynamicArray((uint64_t)&STACK[0x1EA0], (uint64_t *)v751 + 16);
                      re::Optional<re::TechniqueState>::operator=((uint64_t)&STACK[0x1ED0], (unsigned __int8 *)&STACK[0x1E60]);
                      if (LOBYTE(STACK[0x1E60]) && STACK[0x1EA0] && STACK[0x1EC0]) {
                        (*(void (**)(unint64_t))(*(void *)STACK[0x1EA0] + 40))(STACK[0x1EA0]);
                      }
                      int v754 = LOBYTE(STACK[0x1168]);
                      LOBYTE(STACK[0x1118]) = v754;
                      if (v754) {
                        re::DynamicString::DynamicString((re::DynamicString *)&STACK[0x1120], (const re::DynamicString *)&STACK[0x1170]);
                      }
                      unint64_t v75 = STACK[0x3E0];
                      unint64_t shouldCompileSynchronously = (unint64_t)&STACK[0x1E60];
                      int v123 = v782;
                    }
                    else
                    {
                      unint64_t v78 = 0;
                      LOBYTE(STACK[0x1118]) = 0;
                    }
                    int v755 = LOBYTE(STACK[0x1140]);
                    LOBYTE(STACK[0x10F0]) = v755;
                    if (v755) {
                      re::DynamicString::DynamicString((re::DynamicString *)&STACK[0x10F8], (const re::DynamicString *)&STACK[0x1148]);
                    }
                  }
                  else
                  {
                    unint64_t v78 = 0;
                    LOBYTE(STACK[0x1118]) = 0;
                    LOBYTE(STACK[0x10F0]) = 0;
                  }
                  re::Optional<re::TechniqueState>::Optional((uint64_t)&STACK[0x1088], (unsigned __int8 *)&STACK[0x1ED0]);
                  *(_OWORD *)&STACK[0x1E60] = *(_OWORD *)&STACK[0x400];
                  LOBYTE(STACK[0x1E70]) = STACK[0x410];
                  re::DrawCallRecorderGroup::recordEncodedDrawCall(STACK[0x2E0], STACK[0x3B0], (const char *)v78, (unsigned __int8 *)&STACK[0x1118], (unsigned __int8 *)&STACK[0x10F0], (uint64_t)&STACK[0x1088], (uint64_t)&STACK[0x1E60], *(unsigned int *)STACK[0x3C8], 0);
                  if (LOBYTE(STACK[0x1088]) && STACK[0x10C8])
                  {
                    if (STACK[0x10E8]) {
                      (*(void (**)(unint64_t))(*(void *)STACK[0x10C8] + 40))(STACK[0x10C8]);
                    }
                    STACK[0x10E8] = 0;
                    STACK[0x10D0] = 0;
                    STACK[0x10D8] = 0;
                    STACK[0x10C8] = 0;
                    ++LODWORD(STACK[0x10E0]);
                  }
                  if (LOBYTE(STACK[0x10F0]) && STACK[0x10F8])
                  {
                    if (STACK[0x1100]) {
                      (*(void (**)(unint64_t, unint64_t))(*(void *)STACK[0x10F8] + 40))(STACK[0x10F8], STACK[0x1108]);
                    }
                    *(_OWORD *)&STACK[0x10F8] = 0u;
                    *(_OWORD *)&STACK[0x1108] = 0u;
                  }
                  if (LOBYTE(STACK[0x1118]) && STACK[0x1120])
                  {
                    if (STACK[0x1128]) {
                      (*(void (**)(unint64_t, unint64_t))(*(void *)STACK[0x1120] + 40))(STACK[0x1120], STACK[0x1130]);
                    }
                    *(_OWORD *)&STACK[0x1120] = 0u;
                    *(_OWORD *)&STACK[0x1130] = 0u;
                  }
                  if (LOBYTE(STACK[0x1140]) && STACK[0x1148] && (STACK[0x1150] & 1) != 0) {
                    (*(void (**)(unint64_t, unint64_t))(*(void *)STACK[0x1148] + 40))(STACK[0x1148], STACK[0x1158]);
                  }
                  if (LOBYTE(STACK[0x1168]) && STACK[0x1170] && (STACK[0x1178] & 1) != 0) {
                    (*(void (**)(unint64_t, unint64_t))(*(void *)STACK[0x1170] + 40))(STACK[0x1170], STACK[0x1180]);
                  }
                  if (LOBYTE(STACK[0x1ED0]) && STACK[0x1F10] && STACK[0x1F30]) {
                    (*(void (**)(unint64_t))(*(void *)STACK[0x1F10] + 40))(STACK[0x1F10]);
                  }
                }
                char v188 = 1;
                unint64_t v76 = LODWORD(STACK[0x3A4]);
                uint64_t v77 = STACK[0x2D8];
                goto LABEL_793;
              }
            }
            unint64_t v697 = *(unsigned int *)STACK[0x3C8];
            unsigned int v698 = *(_DWORD *)STACK[0x310];
            uint64_t v699 = *v772;
            if (v698 * v697 > 1 || v699)
            {
              int v706 = (v692 >> 1) & 1;
              if (v692) {
                LOBYTE(v706) = 0;
              }
              if ((v706 & (v698 > 1)) != 0) {
                unint64_t v76 = *(unsigned int *)STACK[0x3C8];
              }
              else {
                unint64_t v76 = 0;
              }
              if ((~v692 & 3) != 0) {
                unint64_t v707 = 1;
              }
              else {
                unint64_t v707 = v698;
              }
              unint64_t v708 = *(unsigned __int16 *)STACK[0x3B0];
              if (v708)
              {
                unint64_t v78 = *v769;
                if (!v78) {
                  goto LABEL_789;
                }
                STACK[0x378] = v707;
                uint64_t v77 = (v708 >> 1) & 7;
                uint64_t v723 = (v708 >> 7) & 1;
                uint64_t v724 = re::AttributeTable::buffers(*(re::AttributeTable **)STACK[0x330]);
                unint64_t v726 = *v766;
                if (v773)
                {
                  if (v725 <= v726) {
                    goto LABEL_966;
                  }
                  uint64_t v80 = *(void *)(v724 + 16 * v726);
                  uint64_t v727 = re::AttributeTable::buffers(*(re::AttributeTable **)STACK[0x330]);
                  unint64_t v729 = *v766;
                  if (v728 <= v729) {
                    goto LABEL_967;
                  }
                  v730 = (_DWORD *)STACK[0x3C8];
                  (*(void (**)(void, char *, uint64_t, unint64_t, uint64_t, uint64_t, void, void))(*(void *)(v75 + 8) + 232))(**(void **)(v75 + 8), sel_drawIndexedPrimitives_indexCount_indexType_indexBuffer_indexBufferOffset_instanceCount_baseVertex_baseInstance_, v77, v78, v723, v80, *(unsigned int *)(v727 + 16 * v729 + 8), *(unsigned int *)STACK[0x3C8]);
                  unint64_t v731 = STACK[0x378];
                  int v732 = *v730 * STACK[0x378] * (*v769 / 3u);
                  unint64_t v733 = STACK[0x2A0];
                  *(_DWORD *)(v733 + 12) = v732 + *(_DWORD *)(STACK[0x2A0] + 12);
                  v734 = *(_DWORD **)(v733 + 104);
                  if (v734) {
                    *v734 += v732;
                  }
                  int v735 = *(_DWORD *)STACK[0x3C8] * v731;
                }
                else
                {
                  if (v725 <= v726) {
                    goto LABEL_968;
                  }
                  uint64_t v80 = *(void *)(v724 + 16 * v726);
                  uint64_t v740 = re::AttributeTable::buffers(*(re::AttributeTable **)STACK[0x330]);
                  unint64_t v742 = *v766;
                  if (v741 <= v742) {
                    goto LABEL_969;
                  }
                  v743 = (_DWORD *)STACK[0x3C8];
                  unint64_t v744 = STACK[0x378];
                  (*(void (**)(void, char *, void, unint64_t, uint64_t, uint64_t, void, unint64_t))(*(void *)(v75 + 8) + 232))(**(void **)(v75 + 8), sel_drawIndexedPrimitives_indexCount_indexType_indexBuffer_indexBufferOffset_instanceCount_baseVertex_baseInstance_, v77, v78, v723, v80, *(unsigned int *)(v740 + 16 * v742 + 8), *(unsigned int *)STACK[0x3C8] * (unint64_t)STACK[0x378]);
                  int v745 = *v743 * v744 * (*v769 / 3u);
                  unint64_t v733 = STACK[0x2A0];
                  *(_DWORD *)(v733 + 12) = v745 + *(_DWORD *)(STACK[0x2A0] + 12);
                  v746 = *(_DWORD **)(v733 + 104);
                  if (v746) {
                    *v746 += v745;
                  }
                  int v735 = *(_DWORD *)STACK[0x3C8] * v744;
                }
                int v722 = v735 * *v779;
                *(_DWORD *)(v733 + 16) += v722;
                v704 = *(_DWORD **)(v733 + 112);
                unint64_t shouldCompileSynchronously = (unint64_t)&STACK[0x1E60];
                if (!v704) {
                  goto LABEL_789;
                }
              }
              else
              {
                uint64_t v709 = (v708 >> 1) & 7;
                if (v773)
                {
                  uint64_t v710 = v76 + v699;
                  uint64_t v711 = *(void *)(v75 + 8);
                }
                else
                {
                  unint64_t v697 = v707 * (unint64_t)v697;
                  uint64_t v710 = v76 + v699;
                  uint64_t v711 = *(void *)(v75 + 8);
                  uint64_t v709 = v709;
                }
                (*(void (**)(void, char *, uint64_t, void, void, unint64_t, uint64_t))(v711 + 224))(*(void *)v711, sel_drawPrimitives_vertexStart_vertexCount_instanceCount_baseInstance_, v709, *v768, *(unsigned int *)v80, v697, v710);
                int v736 = *(_DWORD *)v80;
                int v737 = *(_DWORD *)STACK[0x3C8] * v707 * (*(_DWORD *)v80 / 3u);
                unint64_t v738 = STACK[0x2A0];
                *(_DWORD *)(v738 + 12) = v737 + *(_DWORD *)(STACK[0x2A0] + 12);
                v739 = *(_DWORD **)(v738 + 104);
                if (v739)
                {
                  *v739 += v737;
                  int v736 = *(_DWORD *)v80;
                }
                int v722 = v736 * v707 * *(_DWORD *)STACK[0x3C8];
                *(_DWORD *)(v738 + 16) += v722;
                v704 = *(_DWORD **)(v738 + 112);
                if (!v704) {
                  goto LABEL_789;
                }
              }
            }
            else
            {
              unint64_t v76 = *(unsigned __int16 *)STACK[0x3B0];
              if ((v76 & 1) == 0)
              {
                (*(void (**)(void, char *, unint64_t, void, void))(*(void *)(v75 + 8) + 200))(**(void **)(v75 + 8), sel_drawPrimitives_vertexStart_vertexCount_, (v76 >> 1) & 7, *v768, *(unsigned int *)v80);
                int v700 = *(_DWORD *)v80;
                unsigned int v701 = *(_DWORD *)v80 / 3u;
                unint64_t v702 = STACK[0x2A0];
                *(_DWORD *)(v702 + 12) = *(_DWORD *)(STACK[0x2A0] + 12) + v701;
                v703 = *(_DWORD **)(v702 + 104);
                if (v703)
                {
                  *v703 += v701;
                  int v700 = *(_DWORD *)v80;
                }
                *(_DWORD *)(v702 + 16) += v700;
                v704 = *(_DWORD **)(v702 + 112);
                if (!v704) {
                  goto LABEL_789;
                }
                int v705 = *v704 + v700;
                goto LABEL_859;
              }
              unint64_t v712 = *v769;
              if (!v712) {
                goto LABEL_789;
              }
              STACK[0x378] = v712;
              uint64_t v77 = STACK[0x330];
              uint64_t v713 = re::AttributeTable::buffers(*(re::AttributeTable **)STACK[0x330]);
              uint64_t v80 = (uint64_t)v766;
              unint64_t v715 = *v766;
              if (v714 <= v715) {
                goto LABEL_964;
              }
              unint64_t v78 = *(void *)(v713 + 16 * v715);
              uint64_t v716 = re::AttributeTable::buffers(*(re::AttributeTable **)v77);
              unint64_t v718 = *v766;
              if (v717 <= v718) {
                goto LABEL_965;
              }
              (*(void (**)(void, char *, unint64_t, unint64_t, void, unint64_t, void))(*(void *)(v75 + 8) + 216))(**(void **)(v75 + 8), sel_drawIndexedPrimitives_indexCount_indexType_indexBuffer_indexBufferOffset_, (v76 >> 1) & 7, STACK[0x378], (v76 >> 7) & 1, v78, *(unsigned int *)(v716 + 16 * v718 + 8));
              unsigned int v719 = *v769 / 3u;
              unint64_t v720 = STACK[0x2A0];
              *(_DWORD *)(v720 + 12) = *(_DWORD *)(STACK[0x2A0] + 12) + v719;
              v721 = *(_DWORD **)(v720 + 104);
              if (v721) {
                *v721 += v719;
              }
              int v722 = *v779;
              *(_DWORD *)(v720 + 16) += *v779;
              v704 = *(_DWORD **)(v720 + 112);
              if (!v704) {
                goto LABEL_789;
              }
            }
            int v705 = *v704 + v722;
LABEL_859:
            _DWORD *v704 = v705;
            goto LABEL_789;
          }
LABEL_447:
          STACK[0x1E60] = v464;
          *(_OWORD *)&STACK[0x1FE0] = 0u;
          *(_OWORD *)&STACK[0x1FD0] = 0u;
          *(_OWORD *)&STACK[0x1FC0] = 0u;
          *(_OWORD *)&STACK[0x1FB0] = 0u;
          *(_OWORD *)&STACK[0x1FA0] = 0u;
          *(_OWORD *)&STACK[0x1F90] = 0u;
          *(_OWORD *)&STACK[0x1F80] = 0u;
          *(_OWORD *)&STACK[0x1F70] = 0u;
          *(_OWORD *)&STACK[0x1F60] = 0u;
          *(_OWORD *)&STACK[0x1F50] = 0u;
          *(_OWORD *)&STACK[0x1F40] = 0u;
          *(_OWORD *)&STACK[0x1F30] = 0u;
          *(_OWORD *)&STACK[0x1F20] = 0u;
          *(_OWORD *)&STACK[0x1F10] = 0u;
          *(_OWORD *)&STACK[0x1F00] = 0u;
          *(_OWORD *)&STACK[0x1EF0] = 0u;
          *(_OWORD *)&STACK[0x1EE0] = 0u;
          *(_OWORD *)&STACK[0x1ED0] = 0u;
          LODWORD(STACK[0x1F70]) = 1;
          *(_OWORD *)&STACK[0x1F80] = 0uLL;
          STACK[0x1F78] = 0;
          LODWORD(STACK[0x1F90]) = 0;
          *(_OWORD *)&STACK[0x1FA0] = 0uLL;
          STACK[0x1F98] = 0;
          LODWORD(STACK[0x1FB0]) = 0;
          *(_OWORD *)&STACK[0x1FB8] = 0u;
          *(_OWORD *)&STACK[0x1FC8] = 0u;
          LODWORD(STACK[0x1FD8]) = 0;
          uint64_t v480 = *(unsigned int *)(v478 + 4 * v477);
          if (v480 != 0x7FFFFFFF)
          {
            unint64_t v481 = STACK[0xD00];
            while (*(void *)(v481 + 304 * v480 + 8) != v464)
            {
              LODWORD(v480) = *(_DWORD *)(v481 + 304 * v480) & 0x7FFFFFFF;
              if (v480 == 0x7FFFFFFF) {
                goto LABEL_451;
              }
            }
            uint64_t v80 = v472;
            unint64_t v483 = v481 + 304 * v480;
            goto LABEL_455;
          }
LABEL_451:
          uint64_t v80 = v472;
        }
        else
        {
          uint64_t v80 = *(void *)(v73[2] + 24);
          LODWORD(v477) = 0;
          STACK[0x1E60] = v464;
          *(_OWORD *)&STACK[0x1FE0] = 0u;
          *(_OWORD *)&STACK[0x1FD0] = 0u;
          *(_OWORD *)&STACK[0x1FC0] = 0u;
          *(_OWORD *)&STACK[0x1FB0] = 0u;
          *(_OWORD *)&STACK[0x1FA0] = 0u;
          *(_OWORD *)&STACK[0x1F90] = 0u;
          *(_OWORD *)&STACK[0x1F80] = 0u;
          *(_OWORD *)&STACK[0x1F70] = 0u;
          *(_OWORD *)&STACK[0x1F60] = 0u;
          *(_OWORD *)&STACK[0x1F50] = 0u;
          *(_OWORD *)&STACK[0x1F40] = 0u;
          *(_OWORD *)&STACK[0x1F30] = 0u;
          *(_OWORD *)&STACK[0x1F20] = 0u;
          *(_OWORD *)&STACK[0x1F10] = 0u;
          *(_OWORD *)&STACK[0x1F00] = 0u;
          *(_OWORD *)&STACK[0x1EF0] = 0u;
          *(_OWORD *)&STACK[0x1EE0] = 0u;
          *(_OWORD *)&STACK[0x1ED0] = 0u;
          LODWORD(STACK[0x1F70]) = 1;
          *(_OWORD *)&STACK[0x1F80] = 0uLL;
          STACK[0x1F78] = 0;
          LODWORD(STACK[0x1F90]) = 0;
          *(_OWORD *)&STACK[0x1FA0] = 0uLL;
          STACK[0x1F98] = 0;
          LODWORD(STACK[0x1FB0]) = 0;
          *(_OWORD *)&STACK[0x1FB8] = 0u;
          *(_OWORD *)&STACK[0x1FC8] = 0u;
          LODWORD(STACK[0x1FD8]) = 0;
        }
        unsigned int v482 = re::HashTable<unsigned long long,re::BufferTable,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::addAsMove((uint64_t)&STACK[0xCF0], v477, v464, &STACK[0x1E60], (uint64_t)&STACK[0x1ED0]);
        ++LODWORD(STACK[0xD18]);
        unint64_t v483 = STACK[0xD00] + 304 * v482;
LABEL_455:
        unint64_t v78 = v483 + 16;
        re::BufferTable::~BufferTable((re::BufferTable *)&STACK[0x1ED0]);
        uint64_t v484 = *(void *)(STACK[0x3E8] + 8);
        uint64_t v485 = *(void *)(v484 + 16);
        uint64_t v486 = *(void *)(v484 + 24);
        if (v486) {
          LODWORD(v486) = *(unsigned __int8 *)(v486 + 332);
        }
        unsigned int v487 = *(unsigned __int8 *)(v485 + 332);
        if (v487 <= v486) {
          unsigned int v487 = v486;
        }
        LODWORD(STACK[0x1ED0]) = v487 - 1;
        STACK[0x1178] = 0;
        STACK[0x1168] = 0;
        STACK[0x1170] = 0;
        re::FixedArray<unsigned char>::init<int>(&STACK[0x1168], v80, shouldCompileSynchronously, &STACK[0x1ED0]);
        LODWORD(STACK[0x1ED0]) = 0;
        STACK[0x1150] = 0;
        STACK[0x1140] = 0;
        STACK[0x1148] = 0;
        STACK[0x318] = v80;
        re::FixedArray<unsigned char>::init<int>(&STACK[0x1140], v80, shouldCompileSynchronously, &STACK[0x1ED0]);
        if (STACK[0x2D0])
        {
          v488 = (unint64_t *)((char *)v230 + 6 * STACK[0x2D0]);
          do
          {
            unint64_t v76 = *(unsigned __int16 *)v230;
            uint64_t v80 = STACK[0x1170];
            if (STACK[0x1170] <= v76) {
              goto LABEL_949;
            }
            *(unsigned char *)(STACK[0x1178] + v76) = *((unsigned char *)v230 + 2);
            unint64_t v76 = *(unsigned __int16 *)v230;
            uint64_t v80 = STACK[0x1148];
            if (STACK[0x1148] <= v76) {
              goto LABEL_950;
            }
            *(unsigned char *)(STACK[0x1150] + v76) = *((unsigned char *)v230 + 4);
            int v230 = (unint64_t *)((char *)v230 + 6);
          }
          while (v230 != v488);
        }
        if (STACK[0x2B0])
        {
          unint64_t v489 = v75 + 6 * STACK[0x2B0];
          do
          {
            unint64_t v76 = *(unsigned __int16 *)v75;
            int v230 = (unint64_t *)STACK[0x1170];
            if (STACK[0x1170] <= v76) {
              goto LABEL_951;
            }
            *(unsigned char *)(STACK[0x1178] + v76) = *(unsigned char *)(v75 + 2);
            unint64_t v76 = *(unsigned __int16 *)v75;
            int v230 = (unint64_t *)STACK[0x1148];
            if (STACK[0x1148] <= v76) {
              goto LABEL_952;
            }
            *(unsigned char *)(STACK[0x1150] + v76) = *(unsigned char *)(v75 + 4);
            v75 += 6;
          }
          while (v75 != v489);
        }
        re::BufferTable::deinit((re::BufferTable *)v78);
        re::BufferTable::init((re::BufferTable *)v78, (re::Allocator *)STACK[0x318], 1uLL);
        if (STACK[0x1170] != shouldCompileSynchronously) {
          goto LABEL_962;
        }
        if (STACK[0x1148] != shouldCompileSynchronously) {
          goto LABEL_963;
        }
        re::FrameContext::perFrameAlloc((re::FrameContext *)STACK[0x2A8], 2 * shouldCompileSynchronously, 0x10uLL, (uint64_t)&STACK[0x1ED0]);
        unint64_t v491 = STACK[0x1ED0];
        uint64_t v492 = LODWORD(STACK[0x1ED8]);
        memcpy((void *)(STACK[0x1ED0] + v492), (const void *)STACK[0x1178], shouldCompileSynchronously);
        memcpy((void *)(v491 + (v492 + shouldCompileSynchronously)), (const void *)STACK[0x1150], shouldCompileSynchronously);
        STACK[0x1118] = 0x66DF0473A9B7D6CALL;
        unint64_t v493 = STACK[0x1ED8];
        STACK[0x1E60] = STACK[0x1EE0];
        STACK[0x1E68] = v493;
        re::BufferTable::setBuffer((re::BufferTable *)v78, (const re::WeakStringID *)&STACK[0x1118], (const BufferView *)&STACK[0x1E60]);
        if (STACK[0x1140] && STACK[0x1148]) {
          (*(void (**)(unint64_t, unint64_t))(*(void *)STACK[0x1140] + 40))(STACK[0x1140], STACK[0x1150]);
        }
        unint64_t v75 = STACK[0x3E0];
        if (STACK[0x1168] && STACK[0x1170]) {
          (*(void (**)(unint64_t, unint64_t))(*(void *)STACK[0x1168] + 40))(STACK[0x1168], STACK[0x1178]);
        }
        goto LABEL_479;
      }
      re::Optional<re::DrawCallEncoderStates>::~Optional((uint64_t)&STACK[0x1088]);
      char v188 = 0;
      uint64_t v77 = STACK[0x318];
LABEL_361:
      unint64_t v76 = LODWORD(STACK[0x3A4]);
LABEL_793:
      re::ConstantTable::~ConstantTable((re::ConstantTable *)&STACK[0x1190]);
      STACK[0x318] = v77;
LABEL_794:
      uint64_t v189 = 1;
      uint64_t v190 = 1;
    }
    while ((v76 & 1) == 0);
    unint64_t v158 = v796 + 1;
    uint64_t v159 = v765;
    if (v765 != (void *)*v73 || v158 != *(void *)(v75 + 56)) {
      continue;
    }
    break;
  }
  int v157 = *(int32x2_t **)(v75 + 64);
LABEL_52:
  v157[2].i32[1] += LODWORD(STACK[0x68C]) + LODWORD(STACK[0x654]);
  v157[3] = vadd_s32(vrev64_s32(vadd_s32((int32x2_t)STACK[0x690], (int32x2_t)STACK[0x658])), v157[3]);
  if (STACK[0x550])
  {

    STACK[0x550] = 0;
  }
  if (STACK[0x548]) {

  }
  if (STACK[0x558] && STACK[0x578]) {
    (*(void (**)(unint64_t))(*(void *)STACK[0x558] + 40))(STACK[0x558]);
  }
  if (STACK[0x5F8])
  {
    if (STACK[0x618]) {
      (*(void (**)(unint64_t))(*(void *)STACK[0x5F8] + 40))(STACK[0x5F8]);
    }
    STACK[0x618] = 0;
    STACK[0x600] = 0;
    STACK[0x608] = 0;
    STACK[0x5F8] = 0;
    ++LODWORD(STACK[0x610]);
  }
  if (STACK[0x5D0] && STACK[0x5F0]) {
    (*(void (**)(unint64_t))(*(void *)STACK[0x5D0] + 40))(STACK[0x5D0]);
  }
  if (STACK[0x780] && STACK[0x7A0]) {
    (*(void (**)(unint64_t))(*(void *)STACK[0x780] + 40))(STACK[0x780]);
  }
  re::Optional<re::DrawCallEncoderStates>::~Optional((uint64_t)&STACK[0xCD0]);
  re::HashTable<unsigned long long,re::BufferTable,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::deinit((uint64_t *)&STACK[0xCF0]);
}

uint64_t re::resolveTechniqueVariant(re::MaterialParameterTableLayers *this, void *a2, _anonymous_namespace_ *a3, unsigned int a4, unint64_t *a5, int a6, unsigned __int8 *a7)
{
  if (a4 == -1) {
    return 0;
  }
  uint64_t v33 = v7;
  uint64_t v34 = v8;
  if (a6)
  {
    uint64_t v14 = (char *)this + 112;
    if (*a7) {
      uint64_t v14 = a7 + 1;
    }
    unsigned __int8 v15 = *v14 | 4;
    if (!*a7) {
      *a7 = 1;
    }
    a7[1] = v15;
  }
  TechniqueAtIndex = (re::MaterialTechnique *)re::MaterialParameterTableLayers::getTechniqueAtIndex(this, a4);
  uint64_t result = re::MaterialTechnique::getOrCreateTechniqueVariant(TechniqueAtIndex, 0, 0);
  uint64_t v18 = (_OWORD *)((char *)this + 88);
  if (*((unsigned char *)this + 112) || *(void *)v18 || *((void *)this + 12) || *((void *)this + 13))
  {
    uint64_t v19 = *((unsigned char *)TechniqueAtIndex + 40) ? (uint64_t)TechniqueAtIndex + 48 : *(void *)TechniqueAtIndex + 8;
    if (*(void *)(v19 + 8))
    {
      long long v20 = v18[1];
      v32[0] = *v18;
      v32[1] = v20;
      unint64_t v21 = *(void *)(v19 + 24);
      v30[0] = *a7;
      if (v30[0]) {
        v30[1] = a7[1];
      }
      uint64_t v31 = ((v21 << 6)
           + (v21 >> 2)
           + re::CombinedDynamicFunctionConstants::hash((unsigned __int8 *)v32, v30)
           - 0x61C8864680B583E9) ^ v21;
      uint64_t v22 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(a2, &v31);
      if (v22 == -1)
      {
        uint64_t v22 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(a3, &v31);
        if (v22 == -1)
        {
          v26[0] = *a7;
          if (v26[0]) {
            v26[1] = a7[1];
          }
          re::CombinedDynamicFunctionConstants::combinedMap((uint64_t *)v32, v26, (_anonymous_namespace_ *)&v27);
          uint64_t v25 = re::FunctionConstantsEnumerator::enumerateFunctionConstantSet(v19, &v27);
          if (v29)
          {
            if (v28) {
              uint64_t v28 = 0;
            }
            if (v27) {
              (*(void (**)(void))(*(void *)v29 + 40))();
            }
          }
          uint64_t v27 = v25;
          uint64_t v24 = (unint64_t *)re::HashBrown<unsigned long,unsigned long long,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::addNew(a3, &v31, &v27);
          goto LABEL_24;
        }
        uint64_t v23 = *((void *)a3 + 1);
      }
      else
      {
        uint64_t v23 = a2[1];
      }
      uint64_t v24 = (unint64_t *)(v23 + 16 * v22 + 8);
LABEL_24:
      uint64_t result = re::MaterialTechnique::getOrCreateTechniqueVariant(TechniqueAtIndex, *v24, 0);
      *a5 = *v24;
    }
  }
  return result;
}

_anonymous_namespace_ *re::EncoderState::setVertexAmplificationCountForState(_anonymous_namespace_ *result, _anonymous_namespace_ *a2, int a3, uint64_t a4, int a5, int a6, uint64_t a7)
{
  long long v12 = result;
  if ((~*(unsigned __int16 *)result & 0x60) != 0
    || *((unsigned __int8 *)result + 21) != a5
    || *((unsigned __int16 *)result + 11) != a6)
  {
    if (*(void *)(a4 + 8) != a5
      && (atomic_exchange(re::EncoderState::setVertexAmplificationCountForState(BOOL,BOOL,re::FixedArray<re::mtl::Viewport> const&,unsigned char,unsigned char,re::mtl::RenderCommandEncoder &)::__FILE____LINE___logged, 1u) & 1) == 0)
    {
      long long v13 = *re::graphicsLogObjects(result);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)unsigned __int8 v15 = 0;
        _os_log_impl(&dword_233120000, v13, OS_LOG_TYPE_DEFAULT, "The viewport count and size must match", v15, 2u);
      }
    }
    re::mtl::RenderCommandEncoder::setViewports(a7);
    uint64_t result = re::setVertexAmplificationCount(a2, a3, a5, a6, a7, v14);
    *((unsigned char *)v12 + 21) = a5;
    *((_WORD *)v12 + 11) = a6;
    *(_WORD *)v12 |= 0x60u;
  }
  return result;
}

uint64_t re::resolveStencilInfo(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void **)(a2 + 64);
  uint64_t v7 = v6[6];
  if (v7)
  {
    unint64_t v4 = *(unsigned __int8 *)(v7 + 1080);
    if (*(unsigned char *)(v7 + 1080))
    {
      unint64_t v4 = *(void *)(v7 + 1081);
      LODWORD(v7) = 1;
    }
    else
    {
      LODWORD(v7) = 0;
    }
  }
  uint64_t v8 = v6[7];
  if (v8)
  {
    unint64_t v5 = *(unsigned __int8 *)(v8 + 1080);
    if (*(unsigned char *)(v8 + 1080))
    {
      unint64_t v5 = *(void *)(v8 + 1081);
      LODWORD(v8) = 1;
    }
    else
    {
      LODWORD(v8) = 0;
    }
  }
  unint64_t v9 = v6[9];
  if (!v9)
  {
    int v10 = 0;
LABEL_14:
    if (!a4) {
      goto LABEL_12;
    }
    goto LABEL_15;
  }
  int v10 = *(unsigned __int8 *)(v9 + 1080);
  if (!*(unsigned char *)(v9 + 1080)) {
    goto LABEL_14;
  }
  unint64_t v9 = *(void *)(v9 + 1081);
  int v10 = 1;
  if (!a4)
  {
LABEL_12:
    LODWORD(v11) = 255;
    goto LABEL_16;
  }
LABEL_15:
  LODWORD(v11) = *(unsigned __int8 *)(**(void **)a4 + 78);
LABEL_16:
  *(_OWORD *)uint64_t result = *(_OWORD *)a3;
  *(unsigned char *)(result + 16) = *(unsigned char *)(a3 + 16);
  int v12 = *(unsigned __int8 *)(a2 + 112);
  if (v12 != 255)
  {
    *(unsigned char *)uint64_t result = v12 == 1;
    *(_DWORD *)(result + 1) = *(_DWORD *)(a2 + 113);
    *(_WORD *)(result + 5) = *(_WORD *)(a2 + 117);
    *(void *)(result + 8) = *(void *)result;
    *(unsigned char *)(result + 16) = *(unsigned char *)(a2 + 119);
  }
  if ((v7 | v8 | v10))
  {
    if (v8) {
      unint64_t v13 = v5;
    }
    else {
      unint64_t v13 = v9;
    }
    if (v7) {
      unint64_t v14 = v4;
    }
    else {
      unint64_t v14 = v13;
    }
    *(unsigned char *)uint64_t result = v14 == 1;
    *(unsigned char *)(result + 1) = BYTE1(v14);
    *(unsigned char *)(result + 2) = BYTE2(v14);
    *(unsigned char *)(result + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = BYTE3(v14);
    *(unsigned char *)(result + 4) = BYTE4(v14);
    *(unsigned char *)(result + 5) = BYTE5(v14);
    *(unsigned char *)(result + 6) = BYTE6(v14);
    *(void *)(result + 8) = *(void *)result;
    unint64_t v11 = HIBYTE(v14);
  }
  else if (v11 == 255)
  {
    return result;
  }
  *(unsigned char *)(result + 16) = v11;
  return result;
}

uint64_t re::ShaderResourceBindState::reset(uint64_t this)
{
  uint64_t v1 = 0;
  uint64_t v2 = 1488;
  uint64_t v3 = 1984;
  do
  {
    uint64_t v4 = this + v1;
    *(void *)uint64_t v4 = 0;
    *(void *)(v4 + 8) = 0;
    if (!*(unsigned char *)(this + v1 + 16)) {
      *(unsigned char *)(v4 + 16) = 1;
    }
    *(_WORD *)(v4 + 18) = 0;
    *(_DWORD *)(v4 + 20) = 0;
    *(_OWORD *)(v4 + 744) = 0uLL;
    if (!*(unsigned char *)(v4 + 760)) {
      *(unsigned char *)(v4 + 760) = 1;
    }
    uint64_t v5 = this + v1;
    *(_WORD *)(v5 + 762) = 0;
    *(_DWORD *)(v5 + 764) = 0;
    if (*(unsigned char *)(this + v3)) {
      *(unsigned char *)(this + vre::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = 0;
    }
    if (*(unsigned char *)(this + v3 + 496)) {
      *(unsigned char *)(this + v3 + 4re::DynamicArray<re::RigComponentConstraint>::deinit((uint64_t)this + 96) = 0;
    }
    uint64_t v6 = (void *)(this + v2);
    *uint64_t v6 = 0;
    v6[31] = 0;
    v1 += 24;
    v2 += 8;
    v3 += 16;
  }
  while (v1 != 744);
  return this;
}

void re::getOrCreateEncoderStates(uint64_t a1, const char ****a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned char *a6, uint64_t *a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned __int8 *a11, unsigned __int8 a12, long long a13, uint64_t a14)
{
  uint64_t v103 = *MEMORY[0x263EF8340];
  unint64_t v89 = 0;
  char v90 = 0;
  unint64_t v88 = 0;
  unint64_t v21 = **a2;
  unint64_t v87 = 0;
  if (!*((unsigned char *)a2 + 16)) {
    goto LABEL_7;
  }
  if (!*((unsigned char *)v21 + 2848)) {
    goto LABEL_7;
  }
  re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)&v87, *a7);
  if (v87) {
    goto LABEL_7;
  }
  int v86 = 0;
  long long v84 = 0u;
  long long v85 = 0u;
  long long v82 = 0u;
  long long v83 = 0u;
  long long v80 = 0u;
  long long v81 = 0u;
  long long v78 = 0u;
  long long v79 = 0u;
  long long v76 = 0u;
  long long v77 = 0u;
  long long v75 = 0u;
  re::createVertexFetchFunctionKey((re *)a7, (uint64_t)&v75);
  re::getOrCreateVertexFetchFunction(*(void *)(a4 + 32), *(id **)(a4 + 56), (uint64_t)&v75, ***a2, (uint64_t)(*a2)[1][170], (uint64_t *)buf);
  uint64_t v23 = v87;
  uint64_t v24 = *(id **)buf;
  unint64_t v87 = *(id **)buf;
  *(void *)buf = v23;
  if (v23)
  {

    uint64_t v24 = v87;
  }
  if (v24)
  {
LABEL_7:
    *(void *)&long long v75 = a3;
    *((void *)&v75 + 1) = a4;
    *(void *)&long long v76 = *(void *)(a4 + 104);
    *((void *)&v76 + 1) = a5;
    uint64_t v25 = a2[1];
    *(void *)&long long v77 = v25;
    if (v25) {
      uint64_t v26 = v25 + 1;
    }
    *((void *)&v77 + 1) = v21;
    uint64_t v27 = (*a2)[1];
    if (v27) {
      uint64_t v28 = v27[169];
    }
    else {
      uint64_t v28 = 0;
    }
    *(void *)&long long v78 = v28;
    WORD4(v78) = *((unsigned __int8 *)a2 + 16);
    *(void *)&long long v79 = a7;
    *((void *)&v79 + 1) = a9;
    *(void *)&long long v80 = a10;
    BYTE8(v80) = (*a6 >> 1) & 7;
    long long v81 = (unint64_t)v27[170];
    long long v82 = a13;
    *(void *)&long long v83 = a14;
    re::getOrCreatePipelineState((re *)&v75, a6[72], (uint64_t *)&v74);
    uint64_t v29 = v74;
    uint64_t v73 = v74;
    if (v74)
    {
      uint64_t v30 = (char *)v74 + 8;
      uint64_t v29 = v74;
    }
    uint64_t v31 = (re *)re::HashTable<re::PipelineStateCacheKey,re::SharedPtr<re::CachedPipelineState>,re::Hash<re::PipelineStateCacheKey>,re::EqualTo<re::PipelineStateCacheKey>,true,false>::addNew<re::SharedPtr<re::CachedPipelineState>&>((uint64_t)(a2 + 3), (void *)v29 + 3, (uint64_t *)&v73);
    if (v73)
    {

      uint64_t v73 = 0;
    }
    if (v74)
    {
      char v34 = a6[72];
      int v35 = *(_DWORD *)(a5 + 40);
      int v36 = *a11;
      unsigned __int8 v37 = a11[1];
      unsigned __int8 v38 = a11[2];
      v32.i32[0] = *(_DWORD *)(a11 + 3);
      uint8x8_t v39 = (uint8x8_t)vmovl_u8(v32).u64[0];
      int v40 = a11[8];
      unsigned __int8 v41 = a11[9];
      unsigned __int8 v42 = a11[10];
      v33.i32[0] = *(_DWORD *)(a11 + 11);
      uint16x8_t v43 = vmovl_u8(v33);
      LOBYTE(v44) = v39.i8[0];
      BYTE1(v44) = v39.i8[4];
      BYTE2(v44) = v39.i8[2];
      BYTE3(v44) = v39.i8[6];
      BYTE4(v44) = v43.i8[0];
      BYTE5(v44) = v43.i8[4];
      BYTE6(v44) = v43.i8[2];
      buf[0] = 0;
      HIBYTE(v44) = v43.i8[6];
      uint64_t v94 = v44;
      if ((v34 & 4) != 0) {
        char v45 = 7;
      }
      else {
        char v45 = *((unsigned char *)v21 + 82);
      }
      char v95 = v45;
      unsigned __int8 v96 = v37;
      unsigned __int8 v97 = v38;
      unsigned __int8 v98 = v41;
      unsigned __int8 v99 = v42;
      char v100 = *((unsigned char *)v21 + 74) & ~v34 & 1;
      unsigned int v49 = ((v35 - 253) < 0xA) & (0x385u >> (v35 + 3));
      if (v36) {
        char v50 = v49;
      }
      else {
        char v50 = 0;
      }
      char v101 = v50;
      if (v40) {
        char v51 = v49;
      }
      else {
        char v51 = 0;
      }
      char v102 = v51;
      DepthStencilState = (re *)re::getOrCreateDepthStencilState(a4, *(void *)(a4 + 104), (uint64_t)buf, v39);
      uint64_t v53 = (void **)DepthStencilState;
      if (buf[0])
      {
        DepthStencilState = *(re **)&buf[8];
        if (*(void *)&buf[8])
        {
          if (buf[16]) {
            DepthStencilState = (re *)(*(uint64_t (**)(void, uint64_t))(**(void **)&buf[8] + 40))(*(void *)&buf[8], v93);
          }
        }
      }
      if (v53)
      {
        int v54 = a12;
        int v55 = atomic_load((unsigned __int8 *)v74 + 240);
        if (v54 && v55 == 1)
        {
          uint64_t v56 = (unsigned __int8 *)v74 + 240;
          v57.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
          int v58 = atomic_load(v56);
          if (v58 == 1)
          {
            std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep = v57.__d_.__rep_;
            int v60 = 65;
            while (--v60)
            {
              int v61 = atomic_load(v56);
              if (v61 != 1) {
                goto LABEL_52;
              }
            }
            do
            {
              v64.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_ - rep;
              if (v64.__d_.__rep_ < 64001)
              {
                if (v64.__d_.__rep_ >= 4001) {
                  sched_yield();
                }
              }
              else
              {
                std::__cxx_contention_t v65 = std::__libcpp_atomic_monitor(v56);
                int v66 = atomic_load(v56);
                if (v66 != 1) {
                  break;
                }
                std::__libcpp_atomic_wait(v56, v65);
              }
              int v67 = atomic_load(v56);
            }
            while (v67 == 1);
          }
LABEL_52:
          int v55 = atomic_load((unsigned __int8 *)v74 + 240);
        }
        if (!v55)
        {
          if (!v87) {
            goto LABEL_73;
          }
          int v68 = atomic_load((unsigned __int8 *)v87 + 204);
          if (a12 && v68 == 1)
          {
            *(void *)&long long v91 = (char *)v87 + 204;
            BYTE8(v91) = 1;
            HIDWORD(v91) = 5;
            *(void *)buf = (char *)v87 + 204;
            *(_OWORD *)&uint8_t buf[8] = v91;
            std::__libcpp_thread_poll_with_backoff[abi:nn180100]<std::__cxx_atomic_wait_test_fn_impl<std::__cxx_atomic_impl<re::VertexFetchCompilationState,std::__cxx_atomic_base_impl<re::VertexFetchCompilationState>>,re::VertexFetchCompilationState> &,std::__libcpp_atomic_wait_backoff_impl<std::__cxx_atomic_impl<re::VertexFetchCompilationState,std::__cxx_atomic_base_impl<re::VertexFetchCompilationState>>,std::__cxx_atomic_wait_test_fn_impl<std::__cxx_atomic_impl<re::VertexFetchCompilationState,std::__cxx_atomic_base_impl<re::VertexFetchCompilationState>>,re::VertexFetchCompilationState>> &>((uint64_t)&v91, (uint64_t)buf, 0);
            int v68 = atomic_load((unsigned __int8 *)v87 + 204);
          }
          if (!v68)
          {
LABEL_73:
            NS::SharedPtr<MTL::Texture>::operator=(&v90, (void **)v74 + 2);
            NS::SharedPtr<MTL::Texture>::operator=(&v89, v53);
            if (*((unsigned char *)a2 + 16))
            {
              if (*((unsigned char *)v21 + 2848))
              {
                re::CachedPipelineState::getOrCreateVertexFetchPipeline((id *)v74, v87, (uint64_t *)buf);
                NS::SharedPtr<MTL::Texture>::operator=(&v90, (void **)(*(void *)buf + 16));
                NS::SharedPtr<MTL::Texture>::operator=(&v88, (void **)(*(void *)buf + 24));
                if (*(void *)buf) {
              }
                }
            }
            float v69 = v90;
            float v70 = v89;
            id v71 = v88;
            *(unsigned char *)a1 = 1;
            *(void *)(a1 + 8) = v69;
            *(void *)(a1 + 16) = v70;
            *(void *)(a1 + 24) = v71;
            goto LABEL_55;
          }
        }
LABEL_54:
        *(unsigned char *)a1 = 0;
LABEL_55:
        if (v74) {

        }
        if ((void)v77) {
        goto LABEL_59;
        }
      }
      int v46 = *re::graphicsLogObjects(DepthStencilState);
      if (!os_log_type_enabled(v46, OS_LOG_TYPE_ERROR)) {
        goto LABEL_54;
      }
      uint64_t v62 = ***a2;
      *(_DWORD *)buf = 136315138;
      *(void *)&uint8_t buf[4] = v62;
      uint64_t v48 = "Failed to obtain cached depth stencil state for technique %s";
    }
    else
    {
      int v46 = *re::graphicsLogObjects(v31);
      if (!os_log_type_enabled(v46, OS_LOG_TYPE_ERROR)) {
        goto LABEL_54;
      }
      uint64_t v47 = ***a2;
      *(_DWORD *)buf = 136315138;
      *(void *)&uint8_t buf[4] = v47;
      uint64_t v48 = "Failed to obtain cached pipeline state for technique %s";
    }
    _os_log_error_impl(&dword_233120000, v46, OS_LOG_TYPE_ERROR, v48, buf, 0xCu);
    goto LABEL_54;
  }
  uint64_t v63 = *re::graphicsLogObjects(v22);
  if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR))
  {
    uint64_t v72 = ***a2;
    *(_DWORD *)buf = 136315138;
    *(void *)&uint8_t buf[4] = v72;
    _os_log_error_impl(&dword_233120000, v63, OS_LOG_TYPE_ERROR, "Failed to obtain cached vertex fetch function for technique %s", buf, 0xCu);
  }
  *(unsigned char *)a1 = 0;
LABEL_59:
  if (v87) {

  }
  if (v88) {
  if (v89)
  }

  if (v90) {
}
  }

uint64_t re::Optional<re::DrawCallEncoderStates>::operator=(uint64_t a1, void **a2)
{
  int v3 = *(unsigned __int8 *)a2;
  if (*(unsigned char *)a1) {
    BOOL v4 = 0;
  }
  else {
    BOOL v4 = v3 == 0;
  }
  if (!v4)
  {
    if (*(unsigned char *)a1) {
      BOOL v5 = v3 == 0;
    }
    else {
      BOOL v5 = 0;
    }
    if (v5)
    {
      uint64_t v8 = *(void **)(a1 + 24);
      if (v8)
      {

        *(void *)(a1 + 24) = 0;
      }
      unint64_t v9 = *(void **)(a1 + 16);
      if (v9)
      {

        *(void *)(a1 + 16) = 0;
      }
      int v10 = *(void **)(a1 + 8);
      if (v10)
      {

        *(void *)(a1 + 8) = 0;
      }
      *(unsigned char *)a1 = 0;
    }
    else
    {
      if (*(unsigned char *)a1) {
        BOOL v7 = 1;
      }
      else {
        BOOL v7 = v3 == 0;
      }
      if (v7)
      {
        NS::SharedPtr<MTL::Texture>::operator=((void **)(a1 + 8), a2 + 1);
        NS::SharedPtr<MTL::Texture>::operator=((void **)(a1 + 16), a2 + 2);
        NS::SharedPtr<MTL::Texture>::operator=((void **)(a1 + 24), a2 + 3);
      }
      else
      {
        *(unsigned char *)a1 = 1;
        *(void *)(a1 + 8) = a2[1];
        *(void *)(a1 + 16) = a2[2];
        *(void *)(a1 + 24) = a2[3];
      }
    }
  }
  return a1;
}

uint64_t re::encodeDrawCalls(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, unsigned __int8 a18, int a19, int a20,uint64_t a21)
{
  if (a2 && *(void *)(a2 + 16))
  {
    HIDWORD(v48) = a20;
    HIDWORD(v47) = a19;
    HIDWORD(v46) = a18;
    unsigned int v49 = (id *)result;
    uint64_t v26 = re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v82);
    uint64_t v61 = a2;
    uint64_t v62 = a14;
    uint64_t v63 = a3;
    uint64_t v64 = a4;
    uint64_t v65 = a6;
    uint64_t v66 = a7;
    uint64_t v67 = a12;
    uint64_t v68 = a13;
    uint64_t v69 = 0;
    v70[0] = a17;
    *(void *)&v70[4] = a15;
    *(void *)&v70[12] = a15;
    *(void *)&v70[20] = a15;
    *(void *)&v70[28] = a15;
    v70[36] = a18;
    LODWORD(v71) = a19;
    long long v73 = 0u;
    LODWORD(v74) = a20;
    BYTE4(v74) = 0;
    LODWORD(v75) = 0;
    BYTE4(v75) = 0;
    uint64_t v76 = a9;
    uint64_t v77 = a11;
    uint64_t v78 = a10;
    long long v80 = 0u;
    long long v81 = 0u;
    locatiounsigned int n = 0;
    uint64_t v27 = re::globalAllocators((re *)v26);
    uint64_t v28 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v27[2] + 32))(v27[2], 264, 8);
    *(_OWORD *)uint64_t v28 = 0u;
    *(_OWORD *)(v28 + 16) = 0u;
    *(_OWORD *)(v28 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0u;
    *(_OWORD *)(v28 + 48) = 0u;
    *(_OWORD *)(v28 + 64) = 0u;
    *(_OWORD *)(v28 + 80) = 0u;
    *(_OWORD *)(v28 + re::DynamicArray<re::RigComponentConstraint>::deinit((uint64_t)this + 96) = 0u;
    *(_OWORD *)(v28 + 112) = 0u;
    *(_OWORD *)(v28 + 128) = 0u;
    *(_OWORD *)(v28 + 144) = 0u;
    *(_OWORD *)(v28 + 160) = 0u;
    *(_OWORD *)(v28 + 176) = 0u;
    *(_OWORD *)(v28 + 192) = 0u;
    *(_OWORD *)(v28 + 208) = 0u;
    *(_OWORD *)(v28 + 224) = 0u;
    *(_OWORD *)(v28 + 240) = 0u;
    *(void *)(v28 + 256) = 0;
    uint64_t v60 = 0;
    uint64_t v57 = 0;
    uint64_t v58 = 0;
    uint64_t v52 = (re::mtl::RenderEncoderImpCache *)v28;
    re::ObjCObject::operator=(&location, v49);
    re::mtl::RenderEncoderImpCache::build(v52, location);
    uint64_t v53 = a5 + 48;
    uint64_t v54 = a5 + 104;
    uint64_t v42 = *(void *)(a4 + 24) + 336;
    uint64_t v55 = *(void *)(a4 + 24);
    uint64_t v56 = v42;
    uint64_t v43 = *(void *)(a2 + 16);
    uint64_t v57 = 0;
    uint64_t v58 = v43;
    uint64_t v59 = a3 + 112;
    uint64_t v60 = a21;
    uint64_t v44 = *(void *)(a4 + 104);
    if (v44) {
      re::RenderStat::sampleRenderEncoderMTLCounterBegin(v44 + 872, (uint64_t)&location, 1u);
    }
    re::encodeDrawCalls((uint64_t)&location, (uint64_t)&v61, a16, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v46, a9, v47,
      a10,
      a11,
      v48,
      (uint64_t)v49,
      a5,
      a21,
      a16,
      (uint64_t)location,
      v52,
      v53,
      v54,
      v55,
      v56,
      v57,
      v58,
      v59,
      v60,
      v61,
      v62,
      v63,
      v64,
      v65,
      v66,
      v67,
      v68,
      v69,
      *(uint64_t *)v70,
      *(uint64_t *)&v70[8],
      *(uint64_t *)&v70[16],
      *(uint64_t *)&v70[24],
      *(uint64_t *)&v70[32],
      v71,
      v72,
      v73,
      *((uint64_t *)&v73 + 1),
      v74,
      v75,
      v76,
      v77,
      v78,
      v79,
      v80,
      *((uint64_t *)&v80 + 1),
      v81);
    uint64_t v45 = *(void *)(a4 + 104);
    if (v45) {
      re::RenderStat::sampleRenderEncoderMTLCounterEnd(v45 + 872, (uint64_t)&location, 1u);
    }
    re::mtl::RenderCommandEncoder::~RenderCommandEncoder((re::mtl::RenderCommandEncoder *)&location);
    return re::ProfilerTimeGuard<(re::ProfilerStatistic)79>::end((uint64_t)v82);
  }
  return result;
}

uint64_t re::EngineConstantSource::lookup(re::EngineConstantSource *this, const re::WeakStringID *a2)
{
  uint64_t v2 = *((void *)this + 1);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(*((void **)this + 1), a2);
  if (v3 == -1) {
    return 0;
  }
  else {
    return *(void *)(v2 + 8) + 16 * v3 + 8;
  }
}

uint64_t re::EngineConstantSource::layoutHash(re::EngineConstantSource *this)
{
  uint64_t v1 = *((void *)this + 1);
  if (v1) {
    return *(void *)(v1 + 48);
  }
  else {
    return 0;
  }
}

uint64_t re::EngineConstantSource::data(re::EngineConstantSource *this)
{
  return *((void *)this + 2);
}

uint64_t re::HashBrown<unsigned long,unsigned long long,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::addNew(_anonymous_namespace_ *a1, void *a2, uint64_t *a3)
{
  uint64_t v6 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(a1, a2);
  if (v6 != -1) {
    return *((void *)a1 + 1) + 16 * v6 + 8;
  }
  return re::HashBrown<unsigned long,unsigned long long,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::internalAdd(a1, a2, a3);
}

uint64_t re::HashBrown<unsigned long,unsigned long long,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::internalAdd(_anonymous_namespace_ *a1, void *a2, uint64_t *a3)
{
  if (!*((void *)a1 + 7))
  {
  }
  uint64_t v6 = *((void *)a1 + 4);
  if (!v6 || (unint64_t v7 = *((void *)a1 + 2), v7 > 8 * v6))
  {
    re::HashBrown<unsigned long,unsigned long long,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::resize((uint64_t *)a1, 1);
    unint64_t v7 = *((void *)a1 + 2);
  }
  unint64_t v8 = 0xBF58476D1CE4E5B9;
  unint64_t v9 = 0x94D049BB133111EBLL;
  unint64_t v10 = 0xBF58476D1CE4E5B9 * (*a2 ^ (*a2 >> 30));
  unint64_t v11 = (0x94D049BB133111EBLL * (v10 ^ (v10 >> 27))) ^ ((0x94D049BB133111EBLL * (v10 ^ (v10 >> 27))) >> 31);
  unint64_t v12 = v7 >> 4;
  uint64_t v13 = *(void *)a1;
  unint64_t v14 = v11 % v12;
  while (1)
  {
    unint64_t v15 = __clz(__rbit64(*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v13 + 16 * v14)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800)));
    if (v15 < 0x40) {
      break;
    }
    if (v14 + 1 == v12) {
      unint64_t v14 = 0;
    }
    else {
      ++v14;
    }
    if (v14 == v11 % v12)
    {
      re::internal::assertLog((re::internal *)4, (uint64_t)a2, -1.79399301e-307, 4.74803907e-38, "assertion failure: '%s' (%s:line %i) Unexpected full hash-table", "blockIndex != h1(key) % blockCount()", "internalAdd", 656);
      _os_crash();
      __break(1u);
      break;
    }
  }
  uint64_t v16 = v13 + 16 * v14;
  BOOL v17 = *(unsigned __int8 *)(v16 + v15) == 255;
  *(unsigned char *)(v16 + v15) = v11 & 0x7F;
  unint64_t v18 = v15 + 16 * v14;
  uint64_t v19 = *a3;
  uint64_t v20 = *((void *)a1 + 1);
  uint64_t v21 = v20 + 16 * v18;
  uint64_t v22 = 16 * v18;
  *(void *)(v20 + v22) = *a2;
  *(void *)(v21 + 8) = v19;
  uint64_t result = v21 + 8;
  uint64_t v24 = v17;
  uint64_t v25 = *((void *)a1 + 4) - v24;
  ++*((void *)a1 + 3);
  *((void *)a1 + 4) = v25;
  uint64_t v26 = *(void *)(v20 + v22) ^ (*(void *)(v20 + v22) >> 30);
  unint64_t v27 = ((v26 * v8) ^ ((v26 * v8) >> 27)) * v9;
  *((void *)a1 + 5) ^= (v27 >> 31) ^ v27;
  return result;
}

{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;

  if (!*((void *)a1 + 7))
  {
  }
  uint64_t v6 = *((void *)a1 + 4);
  if (!v6 || (unint64_t v7 = *((void *)a1 + 2), v7 > 8 * v6))
  {
    re::HashBrown<unsigned long,unsigned long long,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::resize(a1, 1);
    unint64_t v7 = *((void *)a1 + 2);
  }
  unint64_t v8 = 0xBF58476D1CE4E5B9 * (*a2 ^ (*a2 >> 30));
  unint64_t v9 = (0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) ^ ((0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) >> 31);
  unint64_t v10 = v7 >> 4;
  unint64_t v11 = v9 % (v7 >> 4);
  unint64_t v12 = *(void *)a1;
  uint64_t v13 = __clz(__rbit64(*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*(void *)a1 + 16 * v11)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800)));
  if (v13 >= 0x40)
  {
    do
    {
      if (v11 + 1 == v10) {
        unint64_t v11 = 0;
      }
      else {
        ++v11;
      }
      uint64_t v13 = __clz(__rbit64(*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v12 + 16 * v11)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800)));
    }
    while (v13 > 0x3F);
  }
  unint64_t v14 = v12 + 16 * v11;
  unint64_t v15 = *(unsigned __int8 *)(v14 + v13) == 255;
  *(unsigned char *)(v14 + v1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = v9 & 0x7F;
  uint64_t v16 = v13 + 16 * v11;
  BOOL v17 = *a3;
  unint64_t v18 = *((void *)a1 + 1);
  uint64_t v19 = v18 + 16 * v16;
  uint64_t v20 = 16 * v16;
  *(void *)(v18 + v20) = *a2;
  *(void *)(v19 + 8) = v17;
  uint64_t result = v19 + 8;
  uint64_t v22 = v15;
  uint64_t v23 = *((void *)a1 + 4) - v22;
  ++*((void *)a1 + 3);
  *((void *)a1 + 4) = v23;
  uint64_t v24 = *(void *)(v18 + v20) ^ (*(void *)(v18 + v20) >> 30);
  uint64_t v25 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v24) ^ ((0xBF58476D1CE4E5B9 * v24) >> 27));
  *((void *)a1 + 5) ^= (v25 >> 31) ^ v25;
  return result;
}

uint64_t re::HashBrown<unsigned long,unsigned long long,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::resize(uint64_t *a1, int a2)
{
  unint64_t v2 = a1[2];
  unint64_t v3 = a1[3] + a2;
  unint64_t v4 = (((151 * v3) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  if (v4 > v2)
  {
    unint64_t v5 = 3 * v2;
    unint64_t v6 = v5 << 6;
    uint64_t v7 = (v5 >> 1) & 0x1FFFFFFFFFFFFFFLL;
    if (v4 <= v6 >> 7) {
      unint64_t v4 = v7;
    }
    unint64_t v3 = (v4 << 7) / 0x97;
  }
  return re::HashBrown<unsigned long,unsigned long long,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::doResize(a1, v3);
}

uint64_t re::HashBrown<unsigned long,unsigned long long,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::doResize(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = a1[7];
  memset(v22, 0, sizeof(v22));
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::init(v22, v4, a2);
  v20[0] = a1;
  unint64_t v5 = a1[2];
  if (v5 >= 0x10)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a1;
    unint64_t v8 = v5 >> 4;
    while (1)
    {
      unsigned __int16 v9 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v7 + v6)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800).u16[0];
      v20[1] = (unsigned __int16)~v9;
      if (v9 != 0xFFFF) {
        break;
      }
      v6 += 16;
      if (!--v8) {
        goto LABEL_9;
      }
    }
    uint64_t v10 = __clz(__rbit64((unsigned __int16)~v9)) + v6;
    uint64_t v21 = v10;
    if (v10 != -1)
    {
      do
      {
        re::HashBrown<unsigned long,unsigned long long,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::internalAdd((_anonymous_namespace_ *)v22, (void *)(*(void *)(v20[0] + 8) + 16 * v10), (uint64_t *)(*(void *)(v20[0] + 8) + 16 * v10 + 8));
        re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v20);
        uint64_t v10 = v21;
      }
      while (v21 != -1);
      unint64_t v5 = a1[2];
    }
  }
LABEL_9:
  uint64_t v12 = *((void *)&v22[3] + 1);
  *((void *)&v22[3] + 1) = a1[7];
  uint64_t result = *((void *)&v22[3] + 1);
  long long v13 = v22[0];
  long long v14 = v22[1];
  *(void *)&v22[1] = v5;
  uint64_t v15 = *a1;
  uint64_t v16 = a1[1];
  *(void *)&v22[0] = *a1;
  *((void *)&v22[0] + 1) = v16;
  long long v17 = v22[2];
  long long v18 = *(_OWORD *)(a1 + 5);
  a1[6] = *(void *)&v22[3];
  a1[7] = v12;
  *(_OWORD *)((char *)&v22[2] + 8) = v18;
  long long v19 = *(_OWORD *)(a1 + 3);
  *(_OWORD *)a1 = v13;
  *((_OWORD *)a1 + 1) = v14;
  *((_OWORD *)a1 + 2) = v17;
  *(_OWORD *)((char *)&v22[1] + 8) = v19;
  if (result)
  {
    if (v16) {
      *((void *)&v22[0] + 1) = 0;
    }
    if (v15) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 40))(result);
    }
  }
  return result;
}

BOOL std::__libcpp_thread_poll_with_backoff[abi:nn180100]<std::__cxx_atomic_wait_test_fn_impl<std::__cxx_atomic_impl<re::VertexFetchCompilationState,std::__cxx_atomic_base_impl<re::VertexFetchCompilationState>>,re::VertexFetchCompilationState> &,std::__libcpp_atomic_wait_backoff_impl<std::__cxx_atomic_impl<re::VertexFetchCompilationState,std::__cxx_atomic_base_impl<re::VertexFetchCompilationState>>,std::__cxx_atomic_wait_test_fn_impl<std::__cxx_atomic_impl<re::VertexFetchCompilationState,std::__cxx_atomic_base_impl<re::VertexFetchCompilationState>>,re::VertexFetchCompilationState>> &>(uint64_t a1, uint64_t a2, std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep a3)
{
  v7.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  unsigned int v8 = 0;
  while (1)
  {
    unsigned __int16 v9 = *(unsigned __int8 **)a1;
    int v10 = *(_DWORD *)(a1 + 12);
    if ((v10 - 1) >= 2) {
      int v3 = v10 == 5 ? atomic_load(v9) : *v9;
    }
    else {
      LOBYTE(vre::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = atomic_load_explicit((atomic_uchar *volatile)v9, memory_order_acquire);
    }
    int v11 = *(unsigned __int8 *)(a1 + 8);
    if (v3 != v11) {
      break;
    }
    if (v8 <= 0x3F)
    {
      ++v8;
    }
    else
    {
      v12.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_ - v7.__d_.__rep_;
      if (a3 && v12.__d_.__rep_ > a3
        || std::__libcpp_atomic_wait_backoff_impl<std::__cxx_atomic_impl<re::VertexFetchCompilationState,std::__cxx_atomic_base_impl<re::VertexFetchCompilationState>>,std::__cxx_atomic_wait_test_fn_impl<std::__cxx_atomic_impl<re::VertexFetchCompilationState,std::__cxx_atomic_base_impl<re::VertexFetchCompilationState>>,re::VertexFetchCompilationState>>::operator()[abi:nn180100](a2, v12.__d_.__rep_))
      {
        return v3 != v11;
      }
    }
  }
  return v3 != v11;
}

uint64_t std::__libcpp_atomic_wait_backoff_impl<std::__cxx_atomic_impl<re::VertexFetchCompilationState,std::__cxx_atomic_base_impl<re::VertexFetchCompilationState>>,std::__cxx_atomic_wait_test_fn_impl<std::__cxx_atomic_impl<re::VertexFetchCompilationState,std::__cxx_atomic_base_impl<re::VertexFetchCompilationState>>,re::VertexFetchCompilationState>>::operator()[abi:nn180100](uint64_t a1, uint64_t a2)
{
  if (a2 < 64001)
  {
    if (a2 >= 4001) {
      sched_yield();
    }
    return 0;
  }
  std::__cxx_contention_t v3 = std::__libcpp_atomic_monitor(*(const void **)a1);
  uint64_t v4 = *(unsigned __int8 **)(a1 + 8);
  int v5 = *(_DWORD *)(a1 + 20);
  if ((v5 - 1) >= 2)
  {
    if (v5 == 5) {
      LODWORD(v4) = atomic_load(v4);
    }
    else {
      LODWORD(v4) = *v4;
    }
  }
  else
  {
    LOBYTE(v4) = atomic_load_explicit((atomic_uchar *volatile)v4, memory_order_acquire);
  }
  if (v4 == *(unsigned __int8 *)(a1 + 16))
  {
    std::__libcpp_atomic_wait(*(const void **)a1, v3);
    return 0;
  }
  return 1;
}

void *re::DynamicArray<unsigned long>::insert(void *this, unint64_t a2, void *a3)
{
  unint64_t v4 = this[2];
  if (v4 + 1 <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v6 = this;
  if (v4 >= this[1])
  {
    this = re::DynamicArray<unsigned long>::growCapacity(this, v4 + 1);
    unint64_t v4 = v6[2];
  }
  uint64_t v7 = v6[4];
  if (v4 <= a2)
  {
    *(void *)(v7 + 8 * v4) = *a3;
  }
  else
  {
    *(void *)(v7 + 8 * v4) = *(void *)(v7 + 8 * v4 - 8);
    uint64_t v8 = v7 + 8 * a2;
    uint64_t v9 = v7 + 8 * v6[2] - 8;
    if (v9 != v8)
    {
      this = memmove((void *)(v8 + 8), (const void *)v8, v9 - v8);
      uint64_t v7 = v6[4];
    }
    *(void *)(v7 + 8 * a2) = *a3;
  }
  ++v6[2];
  ++*((_DWORD *)v6 + 6);
  return this;
}

uint64_t re::ShaderResourceBindState::bindVertexResource(uint64_t a1, unint64_t a2, unsigned int a3, unsigned int a4, uint64_t *a5, char a6, uint64_t a7)
{
  if (a4 < 0x1F)
  {
    long long v29 = a2;
    if (a6)
    {
      char v30 = 1;
      __int16 v31 = a7;
    }
    else
    {
      char v30 = 0;
    }
    unsigned int v32 = a3;
    uint64_t v21 = (void *)(a1 + 24 * a4);
    uint64_t result = re::ShaderResourceBindState::BufferBindState::operator==((uint64_t)v21, (uint64_t)&v29);
    if ((result & 1) == 0)
    {
      uint64_t v22 = *a5;
      if (*v21 == a2)
      {
        if (a6) {
          uint64_t result = ((uint64_t (*)(uint64_t, char *, void, uint64_t, void))a5[5])(v22, sel_setVertexBufferOffset_attributeStride_atIndex_, a3, a7, a4);
        }
        else {
          uint64_t result = ((uint64_t (*)(uint64_t, char *, void, void))a5[3])(v22, sel_setVertexBufferOffset_atIndex_, a3, a4);
        }
      }
      else if (a6)
      {
        uint64_t result = ((uint64_t (*)(uint64_t, char *, unint64_t, void, uint64_t, void))a5[4])(v22, sel_setVertexBuffer_offset_attributeStride_atIndex_, a2, a3, a7, a4);
      }
      else
      {
        uint64_t result = ((uint64_t (*)(uint64_t, char *, unint64_t, void, void))a5[2])(v22, sel_setVertexBuffer_offset_atIndex_, a2, a3, a4);
      }
      *(_OWORD *)uint64_t v21 = v29;
      uint64_t v23 = a1 + 24 * a4;
      int v26 = *(unsigned __int8 *)(v23 + 16);
      uint64_t v24 = (unsigned char *)(v23 + 16);
      int v25 = v26;
      if (v26) {
        BOOL v27 = 0;
      }
      else {
        BOOL v27 = v30 == 0;
      }
      if (!v27)
      {
        if (v25) {
          BOOL v28 = v30 == 0;
        }
        else {
          BOOL v28 = 0;
        }
        if (v28)
        {
          *uint64_t v24 = 0;
        }
        else
        {
          if (!v25 && v30) {
            *uint64_t v24 = 1;
          }
          *(_WORD *)(a1 + 24 * a4 + 18) = a7;
        }
      }
      *(_DWORD *)(a1 + 24 * a4 + 20) = a3;
    }
  }
  else
  {
    uint64_t v13 = a3;
    uint64_t v14 = *a5;
    if (a6)
    {
      uint64_t v15 = (uint64_t (*)(uint64_t, char *, unint64_t, uint64_t, uint64_t, void))a5[4];
      uint64_t v16 = sel_setVertexBuffer_offset_attributeStride_atIndex_;
      unint64_t v17 = a2;
      uint64_t v18 = a7;
    }
    else
    {
      uint64_t v15 = (uint64_t (*)(uint64_t, char *, unint64_t, uint64_t, uint64_t, void))a5[2];
      uint64_t v16 = sel_setVertexBuffer_offset_atIndex_;
      unint64_t v17 = a2;
      uint64_t v18 = a4;
    }
    return v15(v14, v16, v17, v13, v18, a4);
  }
  return result;
}

void re::fillConstantBuffer(uint64_t a1, re::FrameContext *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v12 = *(unsigned __int8 *)(a8 + 106);
  if (v12 > 1)
  {
    if (*(unsigned char *)(a8 + 107)
      && ((unsigned int v27 = *(_DWORD *)(a7 + 32), v27 >= 2) ? (v28 = *(unsigned char *)(a7 + 3) == 2) : (v28 = 0), v28))
    {
      re::FrameContext::perFrameAlloc(this, *(_DWORD *)(a8 + 100) * v27, *(unsigned __int16 *)(a8 + 98), a1);
      uint64_t v40 = *(unsigned int *)(a1 + 12);
      uint64_t v41 = *(void *)a1 + *(unsigned int *)(a1 + 8);
      uint64_t v42 = *(unsigned int *)(a8 + 100);
      uint64_t v43 = *(unsigned int *)(a7 + 32);
      uint64_t v44 = *(void *)(a8 + 24);
      *(void *)&long long v50 = *(void *)(a8 + 40);
      *((void *)&v50 + 1) = v44;
      uint64_t v45 = *(void *)(a8 + 72);
      uint64_t v48 = *(long long **)(a8 + 88);
      uint64_t v49 = v45;
      re::ConstantTableCollection::fillInstanceArray(a6, v41, v40, v42, v43, (long long **)&v50, (uint64_t)&v48);
      int v46 = *(_DWORD *)(a7 + 32);
      int v47 = *(_DWORD *)(a3 + 24);
      *(_DWORD *)(a3 + 20) += v46 * *(_DWORD *)(a8 + 100);
      int v39 = v47 + v46 * *(_DWORD *)(a8 + 24);
    }
    else
    {
      re::FrameContext::perFrameAlloc(this, *(unsigned int *)(a8 + 100), *(unsigned __int16 *)(a8 + 98), a1);
      uint64_t v29 = *(void *)a1 + *(unsigned int *)(a1 + 8);
      uint64_t v30 = *(unsigned int *)(a8 + 100);
      uint64_t v31 = *(void *)(a8 + 24);
      *(void *)&long long v50 = *(void *)(a8 + 40);
      *((void *)&v50 + 1) = v31;
      uint64_t v32 = *(void *)(a8 + 72);
      uint64_t v48 = *(long long **)(a8 + 88);
      uint64_t v49 = v32;
      re::ConstantTableCollection::fill(a6, v29, v30, (uint64_t)&v50, &v48);
      if (a5)
      {
        if ((*(_WORD *)(a8 + 104) & 2) != 0)
        {
          uint64_t v33 = *(unsigned int *)(a1 + 12);
          uint64_t v34 = *(void *)(a8 + 24);
          *(void *)&long long v50 = *(void *)(a8 + 40);
          *((void *)&v50 + 1) = v34;
          re::ViewConstantsLateLatch::trackViewConstantsBuffer(a5, v29, v33, (uint64_t *)&v50);
        }
        unsigned __int8 v35 = *(unsigned char *)(a7 + 9);
        if (v35 && (*(_WORD *)(a8 + 104) & 8) != 0)
        {
          uint64_t v36 = *(unsigned int *)(a1 + 12);
          uint64_t v37 = *(void *)(a8 + 24);
          *(void *)&long long v50 = *(void *)(a8 + 40);
          *((void *)&v50 + 1) = v37;
          re::InstanceConstantsLateLatch::trackInstanceConstantsBuffer((_anonymous_namespace_ *)(a5 + 1536), v29, v36, (uint64_t *)&v50, v35);
        }
      }
      int v38 = *(_DWORD *)(a3 + 24);
      *(_DWORD *)(a3 + 20) += *(_DWORD *)(a8 + 100);
      int v39 = v38 + *(_DWORD *)(a8 + 24);
    }
    *(_DWORD *)(a3 + 24) = v39;
  }
  else
  {
    uint64_t v14 = a4 + 56 * *(unsigned __int8 *)(a8 + 106);
    if (!*(unsigned char *)(v14 + 41)
      && *(unsigned char *)(a4 + 56 * *(unsigned __int8 *)(a8 + 106) + 40)
      && *(void *)a8 == *(void *)(a4 + 56 * *(unsigned __int8 *)(a8 + 106) + 24)
      && *(void *)(a8 + 48) == *(void *)(a4 + 56 * *(unsigned __int8 *)(a8 + 106) + 32))
    {
      *(_DWORD *)(a4 + 56 * *(unsigned __int8 *)(a8 + 106) + 48) += *(_DWORD *)(a8 + 100);
LABEL_7:
      uint64_t v24 = a4 + 56 * v12;
      *(_OWORD *)a1 = *(_OWORD *)v24;
      *(void *)(a1 + 16) = *(void *)(v24 + 16);
      return;
    }
    re::FrameContext::perFrameAlloc(this, *(unsigned int *)(a8 + 100), *(unsigned __int16 *)(a8 + 98), (uint64_t)&v50);
    *(_OWORD *)uint64_t v14 = v50;
    *(void *)(v14 + 16) = v51;
    uint64_t v15 = *(void *)v14 + *(unsigned int *)(v14 + 8);
    uint64_t v16 = *(unsigned int *)(a8 + 100);
    uint64_t v17 = *(void *)(a8 + 24);
    *(void *)&long long v50 = *(void *)(a8 + 40);
    *((void *)&v50 + 1) = v17;
    uint64_t v18 = *(void *)(a8 + 72);
    uint64_t v48 = *(long long **)(a8 + 88);
    uint64_t v49 = v18;
    re::ConstantTableCollection::fill(a6, v15, v16, (uint64_t)&v50, &v48);
    if (a5)
    {
      if ((*(_WORD *)(a8 + 104) & 2) != 0)
      {
        uint64_t v20 = *(unsigned int *)(v14 + 12);
        uint64_t v21 = *(void *)v14 + *(unsigned int *)(v14 + 8);
        uint64_t v22 = *(void *)(a8 + 24);
        *(void *)&long long v50 = *(void *)(a8 + 40);
        *((void *)&v50 + 1) = v22;
        re::ViewConstantsLateLatch::trackViewConstantsBuffer(a5, v21, v20, (uint64_t *)&v50);
      }
    }
    uint64_t v23 = a4 + 56 * v12;
    *(_DWORD *)(v23 + 44) += *(_DWORD *)(a8 + 100);
    *(_DWORD *)(v23 + 52) += *(_DWORD *)(a8 + 24);
    *(void *)(v23 + 24) = *(void *)a8;
    *(void *)(v23 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = *(void *)(a8 + 48);
    *(unsigned char *)(v23 + 40) = 1;
    unint64_t v12 = *(unsigned __int8 *)(a8 + 106);
    if (v12 < 2) {
      goto LABEL_7;
    }
    re::internal::assertLog((re::internal *)6, v19, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < N", "operator[]", 234, *(unsigned __int8 *)(a8 + 106), 2);
    _os_crash();
    __break(1u);
  }
}

uint64_t re::SamplerTableReference::samplerAt(re::SamplerTableReference *this, unint64_t a2)
{
  unint64_t v2 = *((void *)this + 1);
  if (v2 > a2) {
    return *(void *)this + 8 * a2;
  }
  re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, a2, v2);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::ShaderResourceBindState::bindFragmentResource(re::ShaderResourceBindState *this, const BufferView *a2, unsigned int a3, RenderCommandEncoder *a4)
{
  if (a3 < 0x1F)
  {
    uint64_t v13 = (void *)((char *)this + 24 * a3 + 744);
    uint64_t v14 = *(void *)a2;
    v20[0] = *(void *)a2;
    v20[1] = 0;
    char v21 = 1;
    __int16 v22 = 0;
    uint64_t v15 = *((unsigned int *)a2 + 2);
    int v23 = *((_DWORD *)a2 + 2);
    uint64_t result = re::ShaderResourceBindState::BufferBindState::operator==((uint64_t)v13, (uint64_t)v20);
    if ((result & 1) == 0)
    {
      m_object = a4->m_object;
      if (*v13 == v14) {
        uint64_t result = ((uint64_t (*)(m_impCache *, char *, uint64_t, void))a4[6].m_object)(m_object, sel_setFragmentBufferOffset_atIndex_, v15, a3);
      }
      else {
        uint64_t result = ((uint64_t (*)(m_impCache *, char *, uint64_t, uint64_t, void))a4[5].var0)(m_object, sel_setFragmentBuffer_offset_atIndex_, v14, v15, a3);
      }
      int v17 = *((_DWORD *)a2 + 2);
      *uint64_t v13 = *(void *)a2;
      v13[1] = 0;
      uint64_t v18 = (char *)this + 24 * a3;
      if (!v18[760]) {
        v18[760] = 1;
      }
      uint64_t v19 = (char *)this + 24 * a3;
      *((_WORD *)v19 + 381) = 0;
      *((_DWORD *)v19 + 191) = v17;
    }
  }
  else
  {
    uint64_t v7 = *(void *)a2;
    uint64_t v8 = *((unsigned int *)a2 + 2);
    uint64_t v9 = a4->m_object;
    var0 = a4[5].var0;
    return ((uint64_t (*)(m_impCache *, char *, uint64_t, uint64_t, void))var0)(v9, sel_setFragmentBuffer_offset_atIndex_, v7, v8, a3);
  }
  return result;
}

uint64_t re::Optional<re::TechniqueState>::operator=(uint64_t a1, unsigned __int8 *a2)
{
  int v3 = *a2;
  if (*(unsigned char *)a1) {
    BOOL v4 = 0;
  }
  else {
    BOOL v4 = v3 == 0;
  }
  if (v4) {
    return a1;
  }
  if (*(unsigned char *)a1) {
    BOOL v5 = v3 == 0;
  }
  else {
    BOOL v5 = 0;
  }
  if (v5)
  {
    re::DynamicArray<unsigned long>::deinit(a1 + 64);
    *(unsigned char *)a1 = 0;
    return a1;
  }
  uint64_t v6 = (_OWORD *)(a1 + 8);
  if (*(unsigned char *)a1) {
    BOOL v7 = 1;
  }
  else {
    BOOL v7 = v3 == 0;
  }
  if (!v7)
  {
    *(unsigned char *)a1 = 1;
    long long v11 = *(_OWORD *)(a2 + 8);
    long long v12 = *(_OWORD *)(a2 + 24);
    long long v13 = *(_OWORD *)(a2 + 40);
    *(_DWORD *)(a1 + 56) = *((_DWORD *)a2 + 14);
    *(_OWORD *)(a1 + 24) = v12;
    *(_OWORD *)(a1 + 40) = v13;
    *uint64_t v6 = v11;
    int v14 = a2[60];
    *(unsigned char *)(a1 + 60) = v14;
    if (v14) {
      *(unsigned char *)(a1 + 61) = a2[61];
    }
    *(void *)(a1 + re::DynamicArray<re::RigComponentConstraint>::deinit((uint64_t)this + 96) = 0;
    *(void *)(a1 + 72) = 0;
    *(void *)(a1 + 80) = 0;
    *(void *)(a1 + 64) = 0;
    *(_DWORD *)(a1 + 88) = 0;
    uint64_t v15 = *((void *)a2 + 9);
    *(void *)(a1 + 64) = *((void *)a2 + 8);
    *(void *)(a1 + 72) = v15;
    *((void *)a2 + 8) = 0;
    *((void *)a2 + 9) = 0;
    goto LABEL_32;
  }
  long long v8 = *(_OWORD *)(a2 + 8);
  long long v9 = *(_OWORD *)(a2 + 24);
  long long v10 = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *((_DWORD *)a2 + 14);
  *(_OWORD *)(a1 + 24) = v9;
  *(_OWORD *)(a1 + 40) = v10;
  *uint64_t v6 = v8;
  if (*(unsigned char *)(a1 + 60) || a2[60])
  {
    if (!*(unsigned char *)(a1 + 60) || a2[60])
    {
      if (!*(unsigned char *)(a1 + 60) && a2[60]) {
        *(unsigned char *)(a1 + 60) = 1;
      }
      *(unsigned char *)(a1 + 61) = a2[61];
    }
    else
    {
      *(unsigned char *)(a1 + 60) = 0;
    }
  }
  if ((unsigned __int8 *)a1 == a2) {
    return a1;
  }
  uint64_t v16 = *(void *)(a1 + 64);
  uint64_t v17 = *((void *)a2 + 8);
  if (!v16 || !v17 || v16 == v17)
  {
    uint64_t v18 = *(void *)(a1 + 72);
    uint64_t v19 = *((void *)a2 + 9);
    *(void *)(a1 + 64) = v17;
    *(void *)(a1 + 72) = v19;
    *((void *)a2 + 8) = v16;
    *((void *)a2 + 9) = v18;
LABEL_32:
    uint64_t v20 = *(void *)(a1 + 80);
    *(void *)(a1 + 80) = *((void *)a2 + 10);
    *((void *)a2 + 10) = v20;
    uint64_t v21 = *(void *)(a1 + 96);
    *(void *)(a1 + re::DynamicArray<re::RigComponentConstraint>::deinit((uint64_t)this + 96) = *((void *)a2 + 12);
    *((void *)a2 + 12) = v21;
    ++*((_DWORD *)a2 + 22);
    ++*(_DWORD *)(a1 + 88);
    return a1;
  }
  re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || !other.isInitialized() || m_allocator == other.m_allocator", "operator=", 503);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

BOOL re::ShaderResourceBindState::BufferBindState::operator==(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 8) != *(void *)(a2 + 8)
    || *(void *)a1 != *(void *)a2
    || *(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20))
  {
    return 0;
  }
  BOOL v2 = (*(unsigned __int8 *)(a2 + 16) | *(unsigned __int8 *)(a1 + 16)) == 0;
  if (*(unsigned char *)(a1 + 16) && *(unsigned char *)(a2 + 16)) {
    return *(unsigned __int16 *)(a1 + 18) == *(unsigned __int16 *)(a2 + 18);
  }
  return v2;
}

uint64_t re::Optional<re::TechniqueState>::Optional(uint64_t a1, unsigned __int8 *a2)
{
  int v3 = *a2;
  *(unsigned char *)a1 = v3;
  if (v3)
  {
    long long v4 = *(_OWORD *)(a2 + 8);
    long long v5 = *(_OWORD *)(a2 + 24);
    long long v6 = *(_OWORD *)(a2 + 40);
    *(_DWORD *)(a1 + 56) = *((_DWORD *)a2 + 14);
    *(_OWORD *)(a1 + 40) = v6;
    *(_OWORD *)(a1 + 24) = v5;
    *(_OWORD *)(a1 + 8) = v4;
    int v7 = a2[60];
    *(unsigned char *)(a1 + 60) = v7;
    if (v7) {
      *(unsigned char *)(a1 + 61) = a2[61];
    }
    re::DynamicArray<re::RenderAttachmentState>::DynamicArray(a1 + 64, (uint64_t *)a2 + 8);
  }
  return a1;
}

uint64_t re::HashTable<unsigned long long,re::BufferTable,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      int v12 = *(_DWORD *)(a1 + 28);
      signed int v13 = 2 * v12;
      uint64_t v14 = *(void *)a1;
      if (*(void *)a1)
      {
        if (v13) {
          BOOL v15 = v9 == v13;
        }
        else {
          BOOL v15 = 1;
        }
        if (!v15 && (v12 & 0x80000000) == 0)
        {
          memset(v37, 0, 36);
          *(void *)&v37[36] = 0x7FFFFFFFLL;
          re::HashTable<unsigned long long,re::BufferTable,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::init((uint64_t)v37, v14, v13);
          long long v16 = *(_OWORD *)v37;
          *(_OWORD *)uint64_t v37 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v16;
          uint64_t v17 = *(void *)&v37[16];
          uint64_t v18 = *(void *)(a1 + 16);
          *(void *)&v37[16] = v18;
          *(void *)(a1 + 16) = v17;
          long long v20 = *(_OWORD *)&v37[24];
          *(_OWORD *)&v37[24] = *(_OWORD *)(a1 + 24);
          unsigned int v19 = *(_DWORD *)&v37[32];
          *(_OWORD *)(a1 + 24) = v20;
          uint64_t v21 = v19;
          if (v19)
          {
            __int16 v22 = (void *)(v18 + 8);
            do
            {
              if ((*(_DWORD *)(v22 - 1) & 0x80000000) != 0) {
                re::HashTable<unsigned long long,re::BufferTable,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::addAsMove(a1, *v22 % (unint64_t)*(unsigned int *)(a1 + 24), *v22, v22, v22 + 1);
              }
              v22 += 38;
              --v21;
            }
            while (v21);
          }
          re::HashTable<unsigned long long,re::BufferTable,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::deinit((uint64_t *)v37);
        }
      }
      else
      {
        if (v13) {
          signed int v25 = 2 * v12;
        }
        else {
          signed int v25 = 3;
        }
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = v10 + 1;
    uint64_t v23 = *(void *)(a1 + 16);
    int v24 = *(_DWORD *)(v23 + 304 * v9);
  }
  else
  {
    uint64_t v23 = *(void *)(a1 + 16);
    int v24 = *(_DWORD *)(v23 + 304 * v9);
    *(_DWORD *)(a1 + 36) = v24 & 0x7FFFFFFF;
  }
  uint64_t v26 = 304 * v9;
  *(_DWORD *)(v23 + v26) = v24 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + v26) = *(_DWORD *)(*(void *)(a1 + 16) + v26) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + v26 + 8) = *a4;
  uint64_t v27 = *(void *)(a1 + 16) + v26;
  *(_OWORD *)(v27 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0u;
  *(_OWORD *)(v27 + 48) = 0u;
  *(_OWORD *)(v27 + 64) = 0u;
  *(_OWORD *)(v27 + 16) = 0u;
  re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::swap((uint64_t *)(v27 + 16), (uint64_t *)a5);
  *(void *)(v27 + 112) = 0;
  *(_DWORD *)(v27 + 104) = 0;
  *(void *)(v27 + 88) = 0;
  *(void *)(v27 + re::DynamicArray<re::RigComponentConstraint>::deinit((uint64_t)this + 96) = 0;
  *(void *)(v27 + 80) = 0;
  *(void *)(v27 + 80) = *(void *)(a5 + 64);
  *(void *)(a5 + 64) = 0;
  *(void *)(v27 + 88) = *(void *)(a5 + 72);
  *(void *)(a5 + 72) = 0;
  uint64_t v28 = *(void *)(v27 + 96);
  *(void *)(v27 + re::DynamicArray<re::RigComponentConstraint>::deinit((uint64_t)this + 96) = *(void *)(a5 + 80);
  *(void *)(a5 + 80) = v28;
  uint64_t v29 = *(void *)(v27 + 112);
  *(void *)(v27 + 112) = *(void *)(a5 + 96);
  *(void *)(a5 + re::DynamicArray<re::RigComponentConstraint>::deinit((uint64_t)this + 96) = v29;
  ++*(_DWORD *)(a5 + 88);
  ++*(_DWORD *)(v27 + 104);
  *(void *)(v27 + 152) = 0;
  *(void *)(v27 + 128) = 0;
  *(void *)(v27 + re::DynamicArray<re::RigComponentConstraint>::deinit((uint64_t)this + 136) = 0;
  *(void *)(v27 + 120) = 0;
  *(_DWORD *)(v27 + 144) = 0;
  *(void *)(v27 + 120) = *(void *)(a5 + 104);
  *(void *)(a5 + 104) = 0;
  *(void *)(v27 + 128) = *(void *)(a5 + 112);
  *(void *)(a5 + 112) = 0;
  uint64_t v30 = *(void *)(v27 + 136);
  *(void *)(v27 + re::DynamicArray<re::RigComponentConstraint>::deinit((uint64_t)this + 136) = *(void *)(a5 + 120);
  *(void *)(a5 + 120) = v30;
  uint64_t v31 = *(void *)(v27 + 152);
  *(void *)(v27 + 152) = *(void *)(a5 + 136);
  *(void *)(a5 + re::DynamicArray<re::RigComponentConstraint>::deinit((uint64_t)this + 136) = v31;
  ++*(_DWORD *)(a5 + 128);
  ++*(_DWORD *)(v27 + 144);
  *(void *)(v27 + 160) = 0;
  *(void *)(v27 + 168) = 0;
  v27 += 160;
  *(_DWORD *)(v27 + 16) = 1;
  *(void *)(v27 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0;
  *(void *)(v27 + 40) = 0;
  *(void *)(v27 + 24) = 0;
  *(_DWORD *)(v27 + 48) = 0;
  re::BucketArray<RESubscriptionHandle,8ul>::swap(v27, a5 + 144);
  *(void *)(v27 + 88) = 0;
  *(_DWORD *)(v27 + 80) = 0;
  *(void *)(v27 + 64) = 0;
  *(void *)(v27 + 72) = 0;
  *(void *)(v27 + 56) = 0;
  *(void *)(v27 + 56) = *(void *)(a5 + 200);
  *(void *)(a5 + 200) = 0;
  *(void *)(v27 + 64) = *(void *)(a5 + 208);
  *(void *)(a5 + 208) = 0;
  uint64_t v32 = *(void *)(v27 + 72);
  *(void *)(v27 + 72) = *(void *)(a5 + 216);
  *(void *)(a5 + 216) = v32;
  uint64_t v33 = *(void *)(v27 + 88);
  *(void *)(v27 + 88) = *(void *)(a5 + 232);
  *(void *)(a5 + 2re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = v33;
  ++*(_DWORD *)(a5 + 224);
  ++*(_DWORD *)(v27 + 80);
  *(void *)(v27 + 128) = 0;
  *(void *)(v27 + 104) = 0;
  *(void *)(v27 + 112) = 0;
  *(void *)(v27 + re::DynamicArray<re::RigComponentConstraint>::deinit((uint64_t)this + 96) = 0;
  *(_DWORD *)(v27 + 120) = 0;
  *(void *)(v27 + re::DynamicArray<re::RigComponentConstraint>::deinit((uint64_t)this + 96) = *(void *)(a5 + 240);
  *(void *)(a5 + 240) = 0;
  *(void *)(v27 + 104) = *(void *)(a5 + 248);
  *(void *)(a5 + 248) = 0;
  uint64_t v34 = *(void *)(v27 + 112);
  *(void *)(v27 + 112) = *(void *)(a5 + 256);
  *(void *)(a5 + 256) = v34;
  uint64_t v35 = *(void *)(v27 + 128);
  *(void *)(v27 + 128) = *(void *)(a5 + 272);
  *(void *)(a5 + 272) = v35;
  ++*(_DWORD *)(a5 + 264);
  ++*(_DWORD *)(v27 + 120);
  *(_DWORD *)(v27 + re::DynamicArray<re::RigComponentConstraint>::deinit((uint64_t)this + 136) = *(_DWORD *)(a5 + 280);
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<unsigned long long,re::BufferTable,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  long long v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    int v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    long long v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      long long v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  int v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + 304 * v10, 16);
  if (v12)
  {
    uint64_t v14 = v12;
    *(void *)(a1 + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &memset_pattern_68_0, 4 * v10);
    }
    *(void *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

double re::HashTable<unsigned long long,re::BufferTable,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    unint64_t v3 = *((unsigned int *)a1 + 8);
    if (v3)
    {
      uint64_t v4 = 0;
      for (unint64_t i = 0; i < v3; ++i)
      {
        uint64_t v6 = a1[2];
        int v7 = *(_DWORD *)(v6 + v4);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + v4) = v7 & 0x7FFFFFFF;
          re::BufferTable::~BufferTable((re::BufferTable *)(v6 + v4 + 16));
          unint64_t v3 = *((unsigned int *)a1 + 8);
        }
        v4 += 304;
      }
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

uint64_t re::Optional<re::DrawCallEncoderStates>::~Optional(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    uint64_t v2 = *(void **)(a1 + 24);
    if (v2)
    {

      *(void *)(a1 + 24) = 0;
    }
    unint64_t v3 = *(void **)(a1 + 16);
    if (v3)
    {

      *(void *)(a1 + 16) = 0;
    }
    uint64_t v4 = *(void **)(a1 + 8);
    if (v4)
    {

      *(void *)(a1 + 8) = 0;
    }
  }
  return a1;
}

void *re::DynamicArray<re::ConstantSource const*>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v2 = result[1];
  if (v2 != a2)
  {
    uint64_t v4 = result;
    if (result[2] <= a2)
    {
      double result = (void *)*result;
      if (*v4)
      {
        if (!a2)
        {
          uint64_t v6 = 0;
          if (!v2) {
            goto LABEL_8;
          }
          goto LABEL_7;
        }
        double result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 8 * a2, 8);
        if (result)
        {
          uint64_t v6 = result;
          if (!v4[1])
          {
LABEL_8:
            unsigned char v4[4] = v6;
            v4[1] = a2;
            return result;
          }
LABEL_7:
          memcpy(v6, (const void *)v4[4], 8 * v4[2]);
          double result = (void *)(*(uint64_t (**)(void, void))(*(void *)*v4 + 40))(*v4, v4[4]);
          goto LABEL_8;
        }
        re::internal::assertLog((re::internal *)6, v5, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, 8 * a2, *(void *)(*v4 + 8));
        double result = (void *)_os_crash();
        __break(1u);
      }
      else
      {
        double result = (void *)re::DynamicArray<re::ConstantSource const*>::setCapacity(v4, a2);
        ++*((_DWORD *)v4 + 6);
      }
    }
  }
  return result;
}

void *re::DynamicArray<re::InstanceConstants>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      double result = (void *)*result;
      if (*v5)
      {
        if (!a2)
        {
          int v7 = 0;
          if (!v3) {
            goto LABEL_9;
          }
          goto LABEL_8;
        }
        if (HIBYTE(a2))
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 256, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          unint64_t v2 = a2 << 8;
          double result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, a2 << 8, 256);
          if (result)
          {
            int v7 = result;
            if (!v5[1])
            {
LABEL_9:
              v5[4] = v7;
              v5[1] = a2;
              return result;
            }
LABEL_8:
            memcpy(v7, (const void *)v5[4], v5[2] << 8);
            double result = (void *)(*(uint64_t (**)(void, void))(*(void *)*v5 + 40))(*v5, v5[4]);
            goto LABEL_9;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        double result = (void *)_os_crash();
        __break(1u);
      }
      else
      {
        double result = (void *)re::DynamicArray<re::InstanceConstants>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
      }
    }
  }
  return result;
}

re::mtl::mps::ImageGuidedFilter *re::mtl::mps::ImageGuidedFilter::ImageGuidedFilter(re::mtl::mps::ImageGuidedFilter *this, const re::mtl::Device *a2, uint64_t a3)
{
  id v4 = (id)[objc_alloc(MEMORY[0x263F13290]) initWithDevice:*(void *)a2 kernelDiameter:a3];
  *(void *)this = v4;

  return this;
}

void re::mtl::mps::UnaryImageKernel::encodeToCommandBuffer(void **a1, uint64_t *a2, id *a3, uint64_t *a4)
{
  id v4 = *a1;
  uint64_t v5 = *a2;
  uint64_t v6 = *a4;
  id v7 = *a3;
  [v4 encodeToCommandBuffer:v5 sourceTexture:v7 destinationTexture:v6];
}

re::mtl::mps::ImageGaussianBlur *re::mtl::mps::ImageGaussianBlur::ImageGaussianBlur(re::mtl::mps::ImageGaussianBlur *this, const re::mtl::Device *a2, float a3)
{
  id v6 = objc_alloc(MEMORY[0x263F13288]);
  *(float *)&double v7 = a3;
  id v8 = (id)[v6 initWithDevice:*(void *)a2 sigma:v7];
  *(void *)this = v8;

  return this;
}

re::mtl::mps::ImageBilinearScale *re::mtl::mps::ImageBilinearScale::ImageBilinearScale(re::mtl::mps::ImageBilinearScale *this, const re::mtl::Device *a2)
{
  id v3 = (id)[objc_alloc(MEMORY[0x263F13240]) initWithDevice:*(void *)a2];
  *(void *)this = v3;

  return this;
}

re::mtl::mps::ImageAreaMax *re::mtl::mps::ImageAreaMax::ImageAreaMax(re::mtl::mps::ImageAreaMax *this, const re::mtl::Device *a2, uint64_t a3, uint64_t a4)
{
  id v5 = (id)[objc_alloc(MEMORY[0x263F13230]) initWithDevice:*(void *)a2 kernelWidth:a3 kernelHeight:a4];
  *(void *)this = v5;

  return this;
}

re::mtl::mps::ImageTent *re::mtl::mps::ImageTent::ImageTent(re::mtl::mps::ImageTent *this, const re::mtl::Device *a2, uint64_t a3, uint64_t a4)
{
  id v5 = (id)[objc_alloc(MEMORY[0x263F132E8]) initWithDevice:*(void *)a2 kernelWidth:a3 kernelHeight:a4];
  *(void *)this = v5;

  return this;
}

uint64_t re::mtl::getTypeSize(int a1)
{
  if ((a1 - 3) > 0x52) {
    return 0;
  }
  else {
    return dword_2343C0920[(__int16)(a1 - 3)];
  }
}

uint64_t *re::MeshNameMap::init(uint64_t *result, re::_anonymous_namespace_::MeshCollectionAccessor *a2, re::_anonymous_namespace_::MeshCollectionAccessor *this, unint64_t a4, unint64_t a5)
{
  uint64_t v78 = *MEMORY[0x263EF8340];
  unint64_t v5 = *((void *)this + 1);
  if (*((void *)a2 + 2)) {
    BOOL v6 = v5 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6) {
    return result;
  }
  unint64_t v7 = a5;
  unint64_t v8 = a4;
  unint64_t v9 = (unint64_t)this;
  uint64_t v11 = result;
  uint64_t v52 = *((void *)a2 + 2);
  uint64_t v53 = *((void *)this + 1);
  unint64_t v12 = *(void *)(a4 + 8);
  if (v53)
  {
    unint64_t v13 = 0;
    unint64_t v56 = 0;
    unint64_t v14 = 0;
    unint64_t v15 = 0;
    unint64_t v7 = 0;
    do
    {
      unint64_t v55 = v15;
      unint64_t v18 = v56;
      if (v16) {
        unint64_t v18 = v56 + 1;
      }
      unint64_t v56 = v18;
      if (v16)
      {
        unint64_t v5 = v16;
        for (unint64_t i = 0; i != v5; ++i)
        {
          if (v20 < v12)
          {
            unint64_t v21 = *(void *)(v8 + 8);
            if (v21 <= v20) {
              goto LABEL_79;
            }
            ++v13;
            v14 += *(void *)(*(void *)v8 + 160 * v20 + 24);
          }
        }
      }
      unint64_t v15 = v54 + v55;
      ++v7;
      unint64_t v9 = (unint64_t)this;
    }
    while (v7 != v53);
    if (v13 > 0xFFFFFFFE) {
      goto LABEL_101;
    }
    unint64_t v22 = v56;
    if (v56 >= 0xFFFFFFFF)
    {
LABEL_102:
      re::internal::assertLog((re::internal *)4, v17, "assertion failure: '%s' (%s:line %i) The number of skinned instances exceeds expectations.", "skinnedMeshInstanceCount < 4294967295U", "init", 252);
      _os_crash();
      __break(1u);
      goto LABEL_103;
    }
    if (v14 >= 0xFFFFFFFF)
    {
LABEL_103:
      re::internal::assertLog((re::internal *)4, v17, "assertion failure: '%s' (%s:line %i) The number of skinned joints exceeds expectations.", "skinnedMeshPartJointCount < 4294967295U", "init", 253);
      _os_crash();
      __break(1u);
      goto LABEL_104;
    }
    LODWORD(v5) = v53;
    unint64_t v7 = a5;
    if (v15 < 0xFFFFFFFF) {
      goto LABEL_24;
    }
    re::internal::assertLog((re::internal *)4, v17, "assertion failure: '%s' (%s:line %i) The number of mesh parts exceeds expectations.", "meshPartInstanceCount < 4294967295U", "init", 254);
    _os_crash();
    __break(1u);
  }
  unint64_t v15 = 0;
  unint64_t v22 = 0;
  unint64_t v13 = 0;
LABEL_24:
  unint64_t v57 = v22;
  re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)(v11 + 2), v7, 2 * v5);
  re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)(v11 + 8), v7, 2 * v52);
  unint64_t v8 = v52;
  re::FixedArray<unsigned short>::init<>(v11 + 14, v7, v52);
  re::FixedArray<re::FixedArray<unsigned int>>::init<>(v11 + 17, v7, v52);
  re::FixedArray<re::StringID>::init<>(v11 + 20, v7, v52);
  re::FixedArray<re::StringID>::init<>(v11 + 23, v7, v53);
  re::FixedArray<int>::init<>(v11 + 26, v7, v53);
  re::FixedArray<int>::init<>(v11 + 29, v7, v57);
  re::FixedArray<int>::init<>(v11 + 32, v7, v13);
  re::FixedArray<unsigned int>::init<unsigned int const&>(v11 + 35, v7, v15, re::MeshNameMap::kInvalidSkinnedPartIndex);
  re::FixedArray<re::HashTable<re::StringID,unsigned short,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>>::init<>((uint64_t)(v11 + 38), v7, v52);
  unint64_t v23 = (v5 + 1);
  re::FixedArray<int>::init<>(v11 + 41, v7, v23);
  re::FixedArray<int>::init<>(v11 + 44, v7, (v52 + 1));
  re::FixedArray<int>::init<>(v11 + 47, v7, v23);
  re::FixedArray<int>::init<>(v11 + 50, v7, v15);
  uint64_t v61 = 0;
  unint64_t v62 = 0;
  uint64_t v63 = 0;
  unint64_t v5 = 0;
  unsigned int v58 = 0;
  unsigned int v26 = 0;
  unsigned int v27 = 0;
  unsigned int v60 = 0;
  do
  {
    unint64_t v14 = v27;
    unint64_t v28 = *(void *)(v9 + 8);
    if (v28 <= v27) {
      goto LABEL_85;
    }
    unint64_t i = *(void *)v9;
    unint64_t v9 = v29;
    unint64_t v8 = v62;
    if (v62 <= v29) {
      goto LABEL_86;
    }
    ++*(_DWORD *)(v63 + 4 * v29);
    unint64_t v8 = v60;
    unint64_t v7 = v11[42];
    if (v7 <= v60) {
      goto LABEL_87;
    }
    *(_DWORD *)(v11[43] + 4 * v60) = v26;
    unint64_t v8 = v60;
    unint64_t v7 = v11[24];
    if (v7 <= v60) {
      goto LABEL_88;
    }
    unint64_t v14 = i + 96 * v14;
    re::StringID::operator=((unint64_t *)(v11[25] + 16 * v60), (uint64_t *)v14);
    unint64_t v8 = v60;
    unint64_t v7 = v11[27];
    if (v7 <= v60) {
      goto LABEL_89;
    }
    *(_DWORD *)(v11[28] + 4 * v60) = v9;
    unint64_t v8 = v60;
    unint64_t v7 = v11[48];
    if (v7 <= v60) {
      goto LABEL_90;
    }
    *(_DWORD *)(v11[49] + 4 * v60) = v5;
    re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add<unsigned int &>((uint64_t)(v11 + 2), (StringID *)v14, &v60);
    {
      unint64_t v14 = v58;
      unint64_t v8 = v11[30];
      if (v8 <= v58) {
        goto LABEL_99;
      }
      *(_DWORD *)(v11[31] + 4 * v58) = v60;
      if (v30)
      {
        unint64_t v14 = v30;
        unint64_t v31 = 0;
        unint64_t v8 = 1;
        do
        {
          {
            unint64_t v7 = v5;
            unint64_t i = v11[33];
            if (i <= v5) {
              goto LABEL_83;
            }
            unint64_t i = v26 + v8 - 1;
            *(_DWORD *)(v11[34] + 4 * v5) = i;
            unint64_t v7 = v11[36];
            if (v7 <= i) {
              goto LABEL_84;
            }
            *(_DWORD *)(v11[37] + 4 * i) = v5;
            unint64_t v5 = (v5 + 1);
          }
          unint64_t v31 = v8;
          BOOL v32 = v14 > v8;
          unint64_t v8 = (v8 + 1);
        }
        while (v32);
      }
      ++v58;
    }
    uint64_t v34 = v33;
    unint64_t v9 = (unint64_t)this;
    if (v33)
    {
      unint64_t v8 = v26;
      unint64_t v14 = v11[51];
      if (v14 >= v26) {
        uint64_t v35 = v26;
      }
      else {
        uint64_t v35 = v11[51];
      }
      while (v14 != v35)
      {
        *(_DWORD *)(v11[52] + 4 * v8) = v60;
        ++v35;
        ++v8;
        if (!--v34) {
          goto LABEL_47;
        }
      }
      uint64_t v64 = 0;
      long long v76 = 0u;
      long long v77 = 0u;
      long long v74 = 0u;
      long long v75 = 0u;
      long long v73 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v65 = 136315906;
      uint64_t v66 = "operator[]";
      __int16 v67 = 1024;
      int v68 = 468;
      __int16 v69 = 2048;
      unint64_t v70 = v8;
      __int16 v71 = 2048;
      unint64_t v72 = v14;
      _os_log_send_and_compose_impl();
      unint64_t v20 = _os_crash_msg();
      __break(1u);
LABEL_79:
      re::internal::assertLog((re::internal *)6, v17, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v20, v21);
      _os_crash();
      __break(1u);
LABEL_80:
      uint64_t v64 = 0;
      long long v76 = 0u;
      long long v77 = 0u;
      long long v74 = 0u;
      long long v75 = 0u;
      long long v73 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v65 = 136315906;
      uint64_t v66 = "operator[]";
      __int16 v67 = 1024;
      int v68 = 797;
      __int16 v69 = 2048;
      unint64_t v70 = v14;
      __int16 v71 = 2048;
      unint64_t v72 = v12;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_81:
      uint64_t v64 = 0;
      long long v76 = 0u;
      long long v77 = 0u;
      long long v74 = 0u;
      long long v75 = 0u;
      long long v73 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v65 = 136315906;
      uint64_t v66 = "operator[]";
      __int16 v67 = 1024;
      int v68 = 476;
      __int16 v69 = 2048;
      unint64_t v70 = v8;
      __int16 v71 = 2048;
      unint64_t v72 = v12;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_82:
      uint64_t v64 = 0;
      long long v76 = 0u;
      long long v77 = 0u;
      long long v74 = 0u;
      long long v75 = 0u;
      long long v73 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v65 = 136315906;
      uint64_t v66 = "operator[]";
      __int16 v67 = 1024;
      int v68 = 468;
      __int16 v69 = 2048;
      unint64_t v70 = v14;
      __int16 v71 = 2048;
      unint64_t v72 = v12;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_83:
      uint64_t v64 = 0;
      long long v76 = 0u;
      long long v77 = 0u;
      long long v74 = 0u;
      long long v75 = 0u;
      long long v73 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v65 = 136315906;
      uint64_t v66 = "operator[]";
      __int16 v67 = 1024;
      int v68 = 468;
      __int16 v69 = 2048;
      unint64_t v70 = v7;
      __int16 v71 = 2048;
      unint64_t v72 = i;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_84:
      uint64_t v64 = 0;
      long long v76 = 0u;
      long long v77 = 0u;
      long long v74 = 0u;
      long long v75 = 0u;
      long long v73 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v65 = 136315906;
      uint64_t v66 = "operator[]";
      __int16 v67 = 1024;
      int v68 = 468;
      __int16 v69 = 2048;
      unint64_t v70 = i;
      __int16 v71 = 2048;
      unint64_t v72 = v7;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_85:
      re::internal::assertLog((re::internal *)6, v25, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v14, v28);
      _os_crash();
      __break(1u);
LABEL_86:
      uint64_t v64 = 0;
      long long v76 = 0u;
      long long v77 = 0u;
      long long v74 = 0u;
      long long v75 = 0u;
      long long v73 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v65 = 136315906;
      uint64_t v66 = "operator[]";
      __int16 v67 = 1024;
      int v68 = 468;
      __int16 v69 = 2048;
      unint64_t v70 = v9;
      __int16 v71 = 2048;
      unint64_t v72 = v8;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_87:
      uint64_t v64 = 0;
      long long v76 = 0u;
      long long v77 = 0u;
      long long v74 = 0u;
      long long v75 = 0u;
      long long v73 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v65 = 136315906;
      uint64_t v66 = "operator[]";
      __int16 v67 = 1024;
      int v68 = 468;
      __int16 v69 = 2048;
      unint64_t v70 = v8;
      __int16 v71 = 2048;
      unint64_t v72 = v7;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_88:
      uint64_t v64 = 0;
      long long v76 = 0u;
      long long v77 = 0u;
      long long v74 = 0u;
      long long v75 = 0u;
      long long v73 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v65 = 136315906;
      uint64_t v66 = "operator[]";
      __int16 v67 = 1024;
      int v68 = 468;
      __int16 v69 = 2048;
      unint64_t v70 = v8;
      __int16 v71 = 2048;
      unint64_t v72 = v7;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_89:
      uint64_t v64 = 0;
      long long v76 = 0u;
      long long v77 = 0u;
      long long v74 = 0u;
      long long v75 = 0u;
      long long v73 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v65 = 136315906;
      uint64_t v66 = "operator[]";
      __int16 v67 = 1024;
      int v68 = 468;
      __int16 v69 = 2048;
      unint64_t v70 = v8;
      __int16 v71 = 2048;
      unint64_t v72 = v7;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_90:
      uint64_t v64 = 0;
      long long v76 = 0u;
      long long v77 = 0u;
      long long v74 = 0u;
      long long v75 = 0u;
      long long v73 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v65 = 136315906;
      uint64_t v66 = "operator[]";
      __int16 v67 = 1024;
      int v68 = 468;
      __int16 v69 = 2048;
      unint64_t v70 = v8;
      __int16 v71 = 2048;
      unint64_t v72 = v7;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_91:
      uint64_t v64 = 0;
      long long v76 = 0u;
      long long v77 = 0u;
      long long v74 = 0u;
      long long v75 = 0u;
      long long v73 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v65 = 136315906;
      uint64_t v66 = "operator[]";
      __int16 v67 = 1024;
      int v68 = 468;
      __int16 v69 = 2048;
      unint64_t v70 = v7;
      __int16 v71 = 2048;
      unint64_t v72 = v12;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_92:
      uint64_t v64 = 0;
      long long v76 = 0u;
      long long v77 = 0u;
      long long v74 = 0u;
      long long v75 = 0u;
      long long v73 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v65 = 136315906;
      uint64_t v66 = "operator[]";
      __int16 v67 = 1024;
      int v68 = 468;
      __int16 v69 = 2048;
      unint64_t v70 = v7;
      __int16 v71 = 2048;
      unint64_t v72 = v12;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_93:
      uint64_t v64 = 0;
      long long v76 = 0u;
      long long v77 = 0u;
      long long v74 = 0u;
      long long v75 = 0u;
      long long v73 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v65 = 136315906;
      uint64_t v66 = "operator[]";
      __int16 v67 = 1024;
      int v68 = 468;
      __int16 v69 = 2048;
      unint64_t v70 = v7;
      __int16 v71 = 2048;
      unint64_t v72 = v12;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_94:
      uint64_t v64 = 0;
      long long v76 = 0u;
      long long v77 = 0u;
      long long v74 = 0u;
      long long v75 = 0u;
      long long v73 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v65 = 136315906;
      uint64_t v66 = "operator[]";
      __int16 v67 = 1024;
      int v68 = 468;
      __int16 v69 = 2048;
      unint64_t v70 = v7;
      __int16 v71 = 2048;
      unint64_t v72 = v12;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_95:
      uint64_t v64 = 0;
      long long v76 = 0u;
      long long v77 = 0u;
      long long v74 = 0u;
      long long v75 = 0u;
      long long v73 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v65 = 136315906;
      uint64_t v66 = "operator[]";
      __int16 v67 = 1024;
      int v68 = 468;
      __int16 v69 = 2048;
      unint64_t v70 = v7;
      __int16 v71 = 2048;
      unint64_t v72 = v5;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_96:
      uint64_t v64 = 0;
      long long v76 = 0u;
      long long v77 = 0u;
      long long v74 = 0u;
      long long v75 = 0u;
      long long v73 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v65 = 136315906;
      uint64_t v66 = "operator[]";
      __int16 v67 = 1024;
      int v68 = 468;
      __int16 v69 = 2048;
      unint64_t v70 = v7;
      __int16 v71 = 2048;
      unint64_t v72 = v8;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_97:
      uint64_t v64 = 0;
      long long v76 = 0u;
      long long v77 = 0u;
      long long v74 = 0u;
      long long v75 = 0u;
      long long v73 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v65 = 136315906;
      uint64_t v66 = "operator[]";
      __int16 v67 = 1024;
      int v68 = 468;
      __int16 v69 = 2048;
      unint64_t v70 = v7;
      __int16 v71 = 2048;
      unint64_t v72 = v8;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_98:
      uint64_t v64 = 0;
      long long v76 = 0u;
      long long v77 = 0u;
      long long v74 = 0u;
      long long v75 = 0u;
      long long v73 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v65 = 136315906;
      uint64_t v66 = "operator[]";
      __int16 v67 = 1024;
      int v68 = 468;
      __int16 v69 = 2048;
      unint64_t v70 = v8;
      __int16 v71 = 2048;
      unint64_t v72 = v9;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_99:
      uint64_t v64 = 0;
      long long v76 = 0u;
      long long v77 = 0u;
      long long v74 = 0u;
      long long v75 = 0u;
      long long v73 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v65 = 136315906;
      uint64_t v66 = "operator[]";
      __int16 v67 = 1024;
      int v68 = 468;
      __int16 v69 = 2048;
      unint64_t v70 = v14;
      __int16 v71 = 2048;
      unint64_t v72 = v8;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_100:
      uint64_t v64 = 0;
      long long v76 = 0u;
      long long v77 = 0u;
      long long v74 = 0u;
      long long v75 = 0u;
      long long v73 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v65 = 136315906;
      uint64_t v66 = "operator[]";
      __int16 v67 = 1024;
      int v68 = 468;
      __int16 v69 = 2048;
      unint64_t v70 = v14;
      __int16 v71 = 2048;
      unint64_t v72 = v8;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_101:
      re::internal::assertLog((re::internal *)4, v17, "assertion failure: '%s' (%s:line %i) The number of skinned parts exceeds expectations.", "skinnedMeshPartCount < 4294967295U", "init", 251);
      _os_crash();
      __break(1u);
      goto LABEL_102;
    }
LABEL_47:
    v26 += v33;
    unsigned int v27 = v60 + 1;
    unsigned int v60 = v27;
  }
  while (v27 < v53);
  unint64_t v14 = v11[42];
  unint64_t v12 = v53;
  if (v14 <= v53)
  {
LABEL_104:
    uint64_t v64 = 0;
    long long v76 = 0u;
    long long v77 = 0u;
    long long v74 = 0u;
    long long v75 = 0u;
    long long v73 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v65 = 136315906;
    uint64_t v66 = "operator[]";
    __int16 v67 = 1024;
    int v68 = 468;
    __int16 v69 = 2048;
    unint64_t v70 = v12;
    __int16 v71 = 2048;
    unint64_t v72 = v14;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_105;
  }
  *(_DWORD *)(v11[43] + 4 * v5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = v26;
  unint64_t v14 = v11[48];
  if (v14 <= v53)
  {
LABEL_105:
    uint64_t v64 = 0;
    long long v76 = 0u;
    long long v77 = 0u;
    long long v74 = 0u;
    long long v75 = 0u;
    long long v73 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v65 = 136315906;
    uint64_t v66 = "operator[]";
    __int16 v67 = 1024;
    int v68 = 468;
    __int16 v69 = 2048;
    unint64_t v70 = v12;
    __int16 v71 = 2048;
    unint64_t v72 = v14;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_106;
  }
  unint64_t v8 = 0;
  unint64_t v9 = 0;
  unint64_t v7 = 0;
  int v36 = 0;
  *(_DWORD *)(v11[49] + 4 * v5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = v5;
  do
  {
    unint64_t v12 = v11[15];
    if (v12 <= v7) {
      goto LABEL_91;
    }
    unint64_t v14 = (unint64_t)v37;
    *(_WORD *)(v11[16] + 2 * v7) = (_WORD)v37;
    unint64_t v12 = v11[18];
    if (v12 <= v7) {
      goto LABEL_92;
    }
    unint64_t v12 = v62;
    if (v62 <= v7) {
      goto LABEL_93;
    }
    int v38 = (uint64_t *)(v11[19] + v8);
    unint64_t v39 = *(unsigned int *)(v63 + 4 * v7);
    unint64_t v12 = v11[21];
    if (v12 <= v7) {
      goto LABEL_94;
    }
    re::StringID::operator=((unint64_t *)(v11[22] + v9), (uint64_t *)v5);
    unint64_t v5 = v11[45];
    if (v5 <= v7) {
      goto LABEL_95;
    }
    uint64_t v40 = v11[46];
    *(_DWORD *)(v40 + 4 * v7) = v36;
    v36 += v14;
    ++v7;
    v9 += 16;
    v8 += 24;
  }
  while (v52 != v7);
  unint64_t v41 = v52;
  if (v5 <= v52)
  {
LABEL_106:
    uint64_t v64 = 0;
    long long v76 = 0u;
    long long v77 = 0u;
    long long v74 = 0u;
    long long v75 = 0u;
    long long v73 = 0u;
    unint64_t v50 = v41;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v65 = 136315906;
    uint64_t v66 = "operator[]";
    __int16 v67 = 1024;
    int v68 = 468;
    __int16 v69 = 2048;
    unint64_t v70 = v50;
    __int16 v71 = 2048;
    unint64_t v72 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  unint64_t v14 = 0;
  *(_DWORD *)(v40 + 4 * v52) = v36;
  unint64_t v5 = 24;
  unint64_t v12 = v53;
  do
  {
    unint64_t v7 = v42;
    unint64_t v8 = v11[18];
    if (v8 <= v42) {
      goto LABEL_96;
    }
    unint64_t v8 = v62;
    if (v62 <= v42) {
      goto LABEL_97;
    }
    uint64_t v43 = v11[19];
    unint64_t v9 = *(void *)(v43 + 24 * v42 + 8);
    uint64_t v44 = v63;
    uint64_t v45 = *(unsigned int *)(v63 + 4 * v42);
    unint64_t v8 = v9 - v45;
    if (v9 <= v9 - v45) {
      goto LABEL_98;
    }
    *(_DWORD *)(*(void *)(v43 + 24 * v42 + 16) + 4 * v8) = v14;
    --*(_DWORD *)(v44 + 4 * v42);
    ++v14;
  }
  while (v53 != v14);
  unint64_t v14 = 0;
  unint64_t i = 816;
  unint64_t v5 = 560;
  while (2)
  {
    re::MeshNameMap::addMeshAssetModelNameToMap((re::MeshNameMap *)v11, v46, v14);
    unint64_t v8 = v11[39];
    if (v8 <= v14) {
      goto LABEL_100;
    }
    if ((2 * v7) <= 1) {
      signed int v48 = 1;
    }
    else {
      signed int v48 = 2 * v7;
    }
    unint64_t v12 = v11[40] + 48 * v14;
    LOWORD(v60) = 0;
    if (v7)
    {
      unint64_t v9 = 0;
      unint64_t v8 = 0;
      do
      {
        unint64_t v12 = *((void *)a2 + 2);
        if (v12 <= v14) {
          goto LABEL_80;
        }
        uint64_t v49 = *((void *)a2 + 4);
        unint64_t v12 = *(void *)(v49 + 816 * v14 + 56);
        if (v12 <= v8) {
          goto LABEL_81;
        }
        unint64_t v12 = v11[39];
        if (v12 <= v14) {
          goto LABEL_82;
        }
        re::HashTable<re::StringID,unsigned short,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add<unsigned short &>(v11[40] + 48 * v14, (StringID *)(*(void *)(v49 + 816 * v14 + 64) + 560 * v8 + 504), &v60);
        unint64_t v9 = (v9 + 1);
        LOWORD(v60) = v9;
        unint64_t v8 = (unsigned __int16)v9;
      }
      while (v7 > (unsigned __int16)v9);
    }
    if (++v14 != v52) {
      continue;
    }
    break;
  }
  ++*(_DWORD *)v11;
  re::MeshNameMap::calculateHash(v11);
  double result = v61;
  if (v61)
  {
    if (v62) {
      return (uint64_t *)(*(uint64_t (**)(void))(*v61 + 40))();
    }
  }
  return result;
}

uint64_t re::MeshNameMap::init(uint64_t result, re::_anonymous_namespace_::MeshAssetAccessor *a2, re::_anonymous_namespace_::MeshAssetAccessor *a3, unint64_t a4, unint64_t a5)
{
  uint64_t v72 = *MEMORY[0x263EF8340];
  unint64_t v5 = *((void *)a2 + 52);
  if (v5) {
    BOOL v6 = a4 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6) {
    return result;
  }
  unint64_t v7 = a5;
  unint64_t v9 = (uint64_t *)result;
  unint64_t v10 = *((void *)a2 + 117);
  unint64_t v47 = a4;
  if (!a4) {
    goto LABEL_22;
  }
  unint64_t v45 = *((void *)a2 + 52);
  unint64_t v11 = 0;
  unint64_t v12 = 0;
  unint64_t v13 = 0;
  unint64_t v14 = 0;
  unint64_t v15 = 0;
  do
  {
    if (v16) {
      ++v12;
    }
    unint64_t v50 = v12;
    if (v16)
    {
      unint64_t v7 = v16;
      for (unint64_t i = 0; i != v7; ++i)
      {
        if (v19 < v10)
        {
          ++v11;
          v13 += *(void *)(re::MeshAsset::skeletonAtIndex(a2, v19) + 24);
        }
      }
    }
    unint64_t v12 = v50;
    v14 += v48;
    ++v15;
  }
  while (v15 != v47);
  if (v11 > 0xFFFFFFFE)
  {
LABEL_99:
    re::internal::assertLog((re::internal *)4, v17, "assertion failure: '%s' (%s:line %i) The number of skinned parts exceeds expectations.", "skinnedMeshPartCount < 4294967295U", "init", 251);
    _os_crash();
    __break(1u);
    goto LABEL_100;
  }
  if (v50 >= 0xFFFFFFFF)
  {
LABEL_100:
    re::internal::assertLog((re::internal *)4, v17, "assertion failure: '%s' (%s:line %i) The number of skinned instances exceeds expectations.", "skinnedMeshInstanceCount < 4294967295U", "init", 252);
    _os_crash();
    __break(1u);
    goto LABEL_101;
  }
  if (v13 >= 0xFFFFFFFF)
  {
LABEL_101:
    re::internal::assertLog((re::internal *)4, v17, "assertion failure: '%s' (%s:line %i) The number of skinned joints exceeds expectations.", "skinnedMeshPartJointCount < 4294967295U", "init", 253);
    _os_crash();
    __break(1u);
LABEL_102:
    uint64_t v58 = 0;
    long long v70 = 0u;
    long long v71 = 0u;
    long long v68 = 0u;
    long long v69 = 0u;
    long long v67 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v59 = 136315906;
    unsigned int v60 = "operator[]";
    __int16 v61 = 1024;
    int v62 = 468;
    __int16 v63 = 2048;
    unint64_t v64 = v5;
    __int16 v65 = 2048;
    unint64_t v66 = v13;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_103;
  }
  unint64_t v5 = v45;
  unint64_t v7 = a5;
  if (v14 >= 0xFFFFFFFF)
  {
    re::internal::assertLog((re::internal *)4, v17, "assertion failure: '%s' (%s:line %i) The number of mesh parts exceeds expectations.", "meshPartInstanceCount < 4294967295U", "init", 254);
    _os_crash();
    __break(1u);
LABEL_22:
    unint64_t v14 = 0;
    unint64_t v12 = 0;
    unint64_t v11 = 0;
  }
  unint64_t v20 = a4;
  re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)(v9 + 2), v7, 2 * a4);
  re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)(v9 + 8), v7, 2 * v5);
  re::FixedArray<unsigned short>::init<>(v9 + 14, v7, v5);
  re::FixedArray<re::FixedArray<unsigned int>>::init<>(v9 + 17, v7, v5);
  re::FixedArray<re::StringID>::init<>(v9 + 20, v7, v5);
  re::FixedArray<re::StringID>::init<>(v9 + 23, v7, v47);
  re::FixedArray<int>::init<>(v9 + 26, v7, v47);
  re::FixedArray<int>::init<>(v9 + 29, v7, v12);
  re::FixedArray<int>::init<>(v9 + 32, v7, v11);
  re::FixedArray<unsigned int>::init<unsigned int const&>(v9 + 35, v7, v14, re::MeshNameMap::kInvalidSkinnedPartIndex);
  re::FixedArray<re::HashTable<re::StringID,unsigned short,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>>::init<>((uint64_t)(v9 + 38), v7, v5);
  re::FixedArray<int>::init<>(v9 + 41, v7, (a4 + 1));
  re::FixedArray<int>::init<>(v9 + 44, v7, (v5 + 1));
  re::FixedArray<int>::init<>(v9 + 47, v7, (a4 + 1));
  re::FixedArray<int>::init<>(v9 + 50, v7, v14);
  uint64_t v55 = 0;
  unint64_t v56 = 0;
  uint64_t v57 = 0;
  unint64_t v49 = v5;
  unint64_t v12 = 0;
  unsigned int v51 = 0;
  unint64_t v7 = 0;
  unsigned int v23 = 0;
  unsigned int v54 = 0;
  do
  {
    unint64_t v13 = v23;
    if (v20 <= v23) {
      goto LABEL_83;
    }
    unint64_t v5 = v24;
    unint64_t v20 = v56;
    if (v56 <= v24) {
      goto LABEL_84;
    }
    ++*(_DWORD *)(v57 + 4 * v24);
    unint64_t v20 = v54;
    unint64_t v14 = v9[42];
    if (v14 <= v54) {
      goto LABEL_85;
    }
    *(_DWORD *)(v9[43] + 4 * v54) = v7;
    unint64_t v11 = v54;
    unint64_t v20 = v9[24];
    if (v20 <= v54) {
      goto LABEL_86;
    }
    unint64_t v13 = (unint64_t)a3 + 96 * v13;
    re::StringID::operator=((unint64_t *)(v9[25] + 16 * v54), (uint64_t *)v13);
    unint64_t v20 = v54;
    unint64_t v14 = v9[27];
    if (v14 <= v54) {
      goto LABEL_87;
    }
    *(_DWORD *)(v9[28] + 4 * v54) = v5;
    unint64_t v20 = v54;
    unint64_t v14 = v9[48];
    if (v14 <= v54) {
      goto LABEL_88;
    }
    *(_DWORD *)(v9[49] + 4 * v54) = v12;
    re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add<unsigned int &>((uint64_t)(v9 + 2), (StringID *)v13, &v54);
    {
      unint64_t v13 = v51;
      unint64_t v20 = v9[30];
      if (v20 <= v51) {
        goto LABEL_97;
      }
      *(_DWORD *)(v9[31] + 4 * v51) = v54;
      if (v25)
      {
        unint64_t v13 = v25;
        unint64_t v26 = 0;
        unint64_t v11 = 1;
        do
        {
          {
            unint64_t v20 = v12;
            unint64_t v14 = v9[33];
            if (v14 <= v12) {
              goto LABEL_81;
            }
            unint64_t v14 = (v7 + v11 - 1);
            *(_DWORD *)(v9[34] + 4 * v12) = v14;
            unint64_t v20 = v9[36];
            if (v20 <= v14) {
              goto LABEL_82;
            }
            *(_DWORD *)(v9[37] + 4 * v14) = v12;
            unint64_t v12 = (v12 + 1);
          }
          unint64_t v26 = v11;
          BOOL v27 = v13 > v11;
          unint64_t v11 = (v11 + 1);
        }
        while (v27);
      }
      ++v51;
    }
    unint64_t v20 = a4;
    uint64_t v29 = v28;
    if (v28)
    {
      unint64_t v5 = v7;
      unint64_t v13 = v9[51];
      if (v13 >= v7) {
        uint64_t v30 = v7;
      }
      else {
        uint64_t v30 = v9[51];
      }
      while (v13 != v30)
      {
        *(_DWORD *)(v9[52] + 4 * v5) = v54;
        ++v30;
        ++v5;
        if (!--v29) {
          goto LABEL_46;
        }
      }
      uint64_t v58 = 0;
      long long v70 = 0u;
      long long v71 = 0u;
      long long v68 = 0u;
      long long v69 = 0u;
      long long v67 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v59 = 136315906;
      unsigned int v60 = "operator[]";
      __int16 v61 = 1024;
      int v62 = 468;
      __int16 v63 = 2048;
      unint64_t v64 = v5;
      __int16 v65 = 2048;
      unint64_t v66 = v13;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_78;
    }
LABEL_46:
    unint64_t v7 = v7 + v28;
    unsigned int v23 = v54 + 1;
    unsigned int v54 = v23;
  }
  while (v23 < a4);
  unint64_t v13 = v9[42];
  unint64_t v5 = v47;
  if (v13 <= v47) {
    goto LABEL_102;
  }
  *(_DWORD *)(v9[43] + 4 * v47) = v7;
  unint64_t v13 = v9[48];
  if (v13 <= v47)
  {
LABEL_103:
    uint64_t v58 = 0;
    long long v70 = 0u;
    long long v71 = 0u;
    long long v68 = 0u;
    long long v69 = 0u;
    long long v67 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v59 = 136315906;
    unsigned int v60 = "operator[]";
    __int16 v61 = 1024;
    int v62 = 468;
    __int16 v63 = 2048;
    unint64_t v64 = v5;
    __int16 v65 = 2048;
    unint64_t v66 = v13;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_104;
  }
  uint64_t v31 = 0;
  unint64_t v10 = 0;
  unint64_t v20 = 0;
  int v32 = 0;
  *(_DWORD *)(v9[49] + 4 * v47) = v12;
  do
  {
    unint64_t v12 = v9[15];
    if (v12 <= v20) {
      goto LABEL_89;
    }
    unint64_t v13 = (unint64_t)v33;
    *(_WORD *)(v9[16] + 2 * v20) = (_WORD)v33;
    unint64_t v12 = v9[18];
    if (v12 <= v20) {
      goto LABEL_90;
    }
    unint64_t v12 = v56;
    if (v56 <= v20) {
      goto LABEL_91;
    }
    uint64_t v34 = (uint64_t *)(v9[19] + v31);
    unint64_t v5 = *(unsigned int *)(v57 + 4 * v20);
    unint64_t v12 = v9[21];
    if (v12 <= v20) {
      goto LABEL_92;
    }
    re::StringID::operator=((unint64_t *)(v9[22] + v10), (uint64_t *)v7);
    unint64_t v12 = v9[45];
    if (v12 <= v20) {
      goto LABEL_93;
    }
    uint64_t v35 = v9[46];
    *(_DWORD *)(v35 + 4 * v20) = v32;
    v32 += v13;
    ++v20;
    v10 += 16;
    v31 += 24;
  }
  while (v49 != v20);
  unint64_t v7 = v49;
  if (v12 <= v49)
  {
LABEL_104:
    uint64_t v58 = 0;
    long long v70 = 0u;
    long long v71 = 0u;
    long long v68 = 0u;
    long long v69 = 0u;
    long long v67 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v59 = 136315906;
    unsigned int v60 = "operator[]";
    __int16 v61 = 1024;
    int v62 = 468;
    __int16 v63 = 2048;
    unint64_t v64 = v7;
    __int16 v65 = 2048;
    unint64_t v66 = v12;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  unint64_t v13 = 0;
  *(_DWORD *)(v35 + 4 * v49) = v32;
  unint64_t v12 = 24;
  unint64_t v5 = v47;
  do
  {
    unint64_t v10 = v36;
    unint64_t v7 = v9[18];
    if (v7 <= v36) {
      goto LABEL_94;
    }
    unint64_t v7 = v56;
    if (v56 <= v36) {
      goto LABEL_95;
    }
    uint64_t v37 = v9[19];
    unint64_t v20 = *(void *)(v37 + 24 * v36 + 8);
    uint64_t v38 = v57;
    uint64_t v39 = *(unsigned int *)(v57 + 4 * v36);
    unint64_t v7 = v20 - v39;
    if (v20 <= v20 - v39) {
      goto LABEL_96;
    }
    *(_DWORD *)(*(void *)(v37 + 24 * v36 + 16) + 4 * v7) = v13;
    --*(_DWORD *)(v38 + 4 * v36);
    ++v13;
  }
  while (v47 != v13);
  unint64_t v13 = 0;
  unint64_t v5 = 48;
  unint64_t v14 = 560;
  while (2)
  {
    re::MeshNameMap::addMeshAssetModelNameToMap((re::MeshNameMap *)v9, v40, v13);
    unint64_t v10 = v9[39];
    if (v10 <= v13) {
      goto LABEL_98;
    }
    if ((2 * v7) <= 1) {
      signed int v42 = 1;
    }
    else {
      signed int v42 = 2 * v7;
    }
    uint64_t v43 = v9[40] + 48 * v13;
    LOWORD(v54) = 0;
    if (v7)
    {
      unint64_t v20 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = *((void *)a2 + 52);
        if (v11 <= v13) {
          break;
        }
        uint64_t v44 = re::DataArray<re::MeshModel>::get(*((void *)a2 + 55) + 8, *(void *)(*((void *)a2 + 54) + 8 * v13));
        unint64_t v11 = *(void *)(v44 + 56);
        if (v11 <= v10) {
          goto LABEL_79;
        }
        unint64_t v11 = v9[39];
        if (v11 <= v13) {
          goto LABEL_80;
        }
        re::HashTable<re::StringID,unsigned short,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add<unsigned short &>(v9[40] + 48 * v13, (StringID *)(*(void *)(v44 + 64) + 560 * v10 + 504), &v54);
        unint64_t v20 = (v20 + 1);
        LOWORD(v54) = v20;
        unint64_t v10 = (unsigned __int16)v20;
        if (v7 <= (unsigned __int16)v20) {
          goto LABEL_73;
        }
      }
LABEL_78:
      uint64_t v58 = 0;
      long long v70 = 0u;
      long long v71 = 0u;
      long long v68 = 0u;
      long long v69 = 0u;
      long long v67 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v59 = 136315906;
      unsigned int v60 = "operator[]";
      __int16 v61 = 1024;
      int v62 = 797;
      __int16 v63 = 2048;
      unint64_t v64 = v13;
      __int16 v65 = 2048;
      unint64_t v66 = v11;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_79:
      uint64_t v58 = 0;
      long long v70 = 0u;
      long long v71 = 0u;
      long long v68 = 0u;
      long long v69 = 0u;
      long long v67 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v59 = 136315906;
      unsigned int v60 = "operator[]";
      __int16 v61 = 1024;
      int v62 = 476;
      __int16 v63 = 2048;
      unint64_t v64 = v10;
      __int16 v65 = 2048;
      unint64_t v66 = v11;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_80:
      uint64_t v58 = 0;
      long long v70 = 0u;
      long long v71 = 0u;
      long long v68 = 0u;
      long long v69 = 0u;
      long long v67 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v59 = 136315906;
      unsigned int v60 = "operator[]";
      __int16 v61 = 1024;
      int v62 = 468;
      __int16 v63 = 2048;
      unint64_t v64 = v13;
      __int16 v65 = 2048;
      unint64_t v66 = v11;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_81:
      uint64_t v58 = 0;
      long long v70 = 0u;
      long long v71 = 0u;
      long long v68 = 0u;
      long long v69 = 0u;
      long long v67 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v59 = 136315906;
      unsigned int v60 = "operator[]";
      __int16 v61 = 1024;
      int v62 = 468;
      __int16 v63 = 2048;
      unint64_t v64 = v20;
      __int16 v65 = 2048;
      unint64_t v66 = v14;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_82:
      uint64_t v58 = 0;
      long long v70 = 0u;
      long long v71 = 0u;
      long long v68 = 0u;
      long long v69 = 0u;
      long long v67 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v59 = 136315906;
      unsigned int v60 = "operator[]";
      __int16 v61 = 1024;
      int v62 = 468;
      __int16 v63 = 2048;
      unint64_t v64 = v14;
      __int16 v65 = 2048;
      unint64_t v66 = v20;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_83:
      re::internal::assertLog((re::internal *)6, v22, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v13, v20);
      _os_crash();
      __break(1u);
LABEL_84:
      uint64_t v58 = 0;
      long long v70 = 0u;
      long long v71 = 0u;
      long long v68 = 0u;
      long long v69 = 0u;
      long long v67 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v59 = 136315906;
      unsigned int v60 = "operator[]";
      __int16 v61 = 1024;
      int v62 = 468;
      __int16 v63 = 2048;
      unint64_t v64 = v5;
      __int16 v65 = 2048;
      unint64_t v66 = v20;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_85:
      uint64_t v58 = 0;
      long long v70 = 0u;
      long long v71 = 0u;
      long long v68 = 0u;
      long long v69 = 0u;
      long long v67 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v59 = 136315906;
      unsigned int v60 = "operator[]";
      __int16 v61 = 1024;
      int v62 = 468;
      __int16 v63 = 2048;
      unint64_t v64 = v20;
      __int16 v65 = 2048;
      unint64_t v66 = v14;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_86:
      uint64_t v58 = 0;
      long long v70 = 0u;
      long long v71 = 0u;
      long long v68 = 0u;
      long long v69 = 0u;
      long long v67 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v59 = 136315906;
      unsigned int v60 = "operator[]";
      __int16 v61 = 1024;
      int v62 = 468;
      __int16 v63 = 2048;
      unint64_t v64 = v11;
      __int16 v65 = 2048;
      unint64_t v66 = v20;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_87:
      uint64_t v58 = 0;
      long long v70 = 0u;
      long long v71 = 0u;
      long long v68 = 0u;
      long long v69 = 0u;
      long long v67 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v59 = 136315906;
      unsigned int v60 = "operator[]";
      __int16 v61 = 1024;
      int v62 = 468;
      __int16 v63 = 2048;
      unint64_t v64 = v20;
      __int16 v65 = 2048;
      unint64_t v66 = v14;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_88:
      uint64_t v58 = 0;
      long long v70 = 0u;
      long long v71 = 0u;
      long long v68 = 0u;
      long long v69 = 0u;
      long long v67 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v59 = 136315906;
      unsigned int v60 = "operator[]";
      __int16 v61 = 1024;
      int v62 = 468;
      __int16 v63 = 2048;
      unint64_t v64 = v20;
      __int16 v65 = 2048;
      unint64_t v66 = v14;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_89:
      uint64_t v58 = 0;
      long long v70 = 0u;
      long long v71 = 0u;
      long long v68 = 0u;
      long long v69 = 0u;
      long long v67 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v59 = 136315906;
      unsigned int v60 = "operator[]";
      __int16 v61 = 1024;
      int v62 = 468;
      __int16 v63 = 2048;
      unint64_t v64 = v20;
      __int16 v65 = 2048;
      unint64_t v66 = v12;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_90:
      uint64_t v58 = 0;
      long long v70 = 0u;
      long long v71 = 0u;
      long long v68 = 0u;
      long long v69 = 0u;
      long long v67 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v59 = 136315906;
      unsigned int v60 = "operator[]";
      __int16 v61 = 1024;
      int v62 = 468;
      __int16 v63 = 2048;
      unint64_t v64 = v20;
      __int16 v65 = 2048;
      unint64_t v66 = v12;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_91:
      uint64_t v58 = 0;
      long long v70 = 0u;
      long long v71 = 0u;
      long long v68 = 0u;
      long long v69 = 0u;
      long long v67 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v59 = 136315906;
      unsigned int v60 = "operator[]";
      __int16 v61 = 1024;
      int v62 = 468;
      __int16 v63 = 2048;
      unint64_t v64 = v20;
      __int16 v65 = 2048;
      unint64_t v66 = v12;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_92:
      uint64_t v58 = 0;
      long long v70 = 0u;
      long long v71 = 0u;
      long long v68 = 0u;
      long long v69 = 0u;
      long long v67 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v59 = 136315906;
      unsigned int v60 = "operator[]";
      __int16 v61 = 1024;
      int v62 = 468;
      __int16 v63 = 2048;
      unint64_t v64 = v20;
      __int16 v65 = 2048;
      unint64_t v66 = v12;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_93:
      uint64_t v58 = 0;
      long long v70 = 0u;
      long long v71 = 0u;
      long long v68 = 0u;
      long long v69 = 0u;
      long long v67 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v59 = 136315906;
      unsigned int v60 = "operator[]";
      __int16 v61 = 1024;
      int v62 = 468;
      __int16 v63 = 2048;
      unint64_t v64 = v20;
      __int16 v65 = 2048;
      unint64_t v66 = v12;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_94:
      uint64_t v58 = 0;
      long long v70 = 0u;
      long long v71 = 0u;
      long long v68 = 0u;
      long long v69 = 0u;
      long long v67 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v59 = 136315906;
      unsigned int v60 = "operator[]";
      __int16 v61 = 1024;
      int v62 = 468;
      __int16 v63 = 2048;
      unint64_t v64 = v10;
      __int16 v65 = 2048;
      unint64_t v66 = v7;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_95:
      uint64_t v58 = 0;
      long long v70 = 0u;
      long long v71 = 0u;
      long long v68 = 0u;
      long long v69 = 0u;
      long long v67 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v59 = 136315906;
      unsigned int v60 = "operator[]";
      __int16 v61 = 1024;
      int v62 = 468;
      __int16 v63 = 2048;
      unint64_t v64 = v10;
      __int16 v65 = 2048;
      unint64_t v66 = v7;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_96:
      uint64_t v58 = 0;
      long long v70 = 0u;
      long long v71 = 0u;
      long long v68 = 0u;
      long long v69 = 0u;
      long long v67 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v59 = 136315906;
      unsigned int v60 = "operator[]";
      __int16 v61 = 1024;
      int v62 = 468;
      __int16 v63 = 2048;
      unint64_t v64 = v7;
      __int16 v65 = 2048;
      unint64_t v66 = v20;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_97:
      uint64_t v58 = 0;
      long long v70 = 0u;
      long long v71 = 0u;
      long long v68 = 0u;
      long long v69 = 0u;
      long long v67 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v59 = 136315906;
      unsigned int v60 = "operator[]";
      __int16 v61 = 1024;
      int v62 = 468;
      __int16 v63 = 2048;
      unint64_t v64 = v13;
      __int16 v65 = 2048;
      unint64_t v66 = v20;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_98:
      uint64_t v58 = 0;
      long long v70 = 0u;
      long long v71 = 0u;
      long long v68 = 0u;
      long long v69 = 0u;
      long long v67 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v59 = 136315906;
      unsigned int v60 = "operator[]";
      __int16 v61 = 1024;
      int v62 = 468;
      __int16 v63 = 2048;
      unint64_t v64 = v13;
      __int16 v65 = 2048;
      unint64_t v66 = v10;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_99;
    }
LABEL_73:
    if (++v13 != v49) {
      continue;
    }
    break;
  }
  ++*(_DWORD *)v9;
  re::MeshNameMap::calculateHash(v9);
  double result = v55;
  if (v55)
  {
    if (v56) {
      return (*(uint64_t (**)(void))(*(void *)v55 + 40))();
    }
  }
  return result;
}

uint64_t re::MeshNameMap::init(uint64_t result, re::_anonymous_namespace_::MeshAssetDataAccessor *a2, re::_anonymous_namespace_::MeshAssetAccessor *a3, unint64_t a4, unint64_t a5)
{
  uint64_t v71 = *MEMORY[0x263EF8340];
  if (*((void *)a2 + 2)) {
    BOOL v6 = a4 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6) {
    return result;
  }
  unint64_t i = a5;
  unint64_t v9 = (uint64_t *)result;
  uint64_t v45 = *((void *)a2 + 2);
  unint64_t v10 = *((void *)a2 + 12);
  unint64_t v46 = a4;
  if (a4)
  {
    unint64_t v11 = 0;
    unint64_t v12 = 0;
    unint64_t v13 = 0;
    unint64_t v14 = 0;
    unint64_t v15 = 0;
    do
    {
      unint64_t v49 = v14;
      if (v16) {
        ++v12;
      }
      unint64_t v48 = v12;
      if (v16)
      {
        unint64_t v5 = v16;
        for (unint64_t i = 0; i != v5; ++i)
        {
          if (v18 < v10)
          {
            unint64_t v12 = v18;
            unint64_t v19 = v10;
            unint64_t v10 = *((void *)a2 + 12);
            if (v10 <= v18) {
              goto LABEL_79;
            }
            ++v11;
            v13 += *(void *)(*((void *)a2 + 14) + 112 * v18 + 24);
            unint64_t v10 = v19;
          }
        }
      }
      unint64_t v12 = v48;
      unint64_t v14 = v47 + v49;
      ++v15;
    }
    while (v15 != v46);
    if (v11 > 0xFFFFFFFE) {
      goto LABEL_101;
    }
    if (v48 >= 0xFFFFFFFF)
    {
LABEL_102:
      re::internal::assertLog((re::internal *)4, v17, "assertion failure: '%s' (%s:line %i) The number of skinned instances exceeds expectations.", "skinnedMeshInstanceCount < 4294967295U", "init", 252);
      _os_crash();
      __break(1u);
      goto LABEL_103;
    }
    if (v13 >= 0xFFFFFFFF)
    {
LABEL_103:
      re::internal::assertLog((re::internal *)4, v17, "assertion failure: '%s' (%s:line %i) The number of skinned joints exceeds expectations.", "skinnedMeshPartJointCount < 4294967295U", "init", 253);
      _os_crash();
      __break(1u);
      goto LABEL_104;
    }
    unint64_t i = a5;
    if (v14 < 0xFFFFFFFF) {
      goto LABEL_24;
    }
    re::internal::assertLog((re::internal *)4, v17, "assertion failure: '%s' (%s:line %i) The number of mesh parts exceeds expectations.", "meshPartInstanceCount < 4294967295U", "init", 254);
    _os_crash();
    __break(1u);
  }
  unint64_t v14 = 0;
  unint64_t v12 = 0;
  unint64_t v11 = 0;
LABEL_24:
  unint64_t v15 = a4;
  re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)(v9 + 2), i, 2 * a4);
  re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)(v9 + 8), i, 2 * v45);
  re::FixedArray<unsigned short>::init<>(v9 + 14, i, v45);
  re::FixedArray<re::FixedArray<unsigned int>>::init<>(v9 + 17, i, v45);
  re::FixedArray<re::StringID>::init<>(v9 + 20, i, v45);
  re::FixedArray<re::StringID>::init<>(v9 + 23, i, v46);
  re::FixedArray<int>::init<>(v9 + 26, i, v46);
  re::FixedArray<int>::init<>(v9 + 29, i, v12);
  re::FixedArray<int>::init<>(v9 + 32, i, v11);
  re::FixedArray<unsigned int>::init<unsigned int const&>(v9 + 35, i, v14, re::MeshNameMap::kInvalidSkinnedPartIndex);
  re::FixedArray<re::HashTable<re::StringID,unsigned short,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>>::init<>((uint64_t)(v9 + 38), i, v45);
  re::FixedArray<int>::init<>(v9 + 41, i, (a4 + 1));
  re::FixedArray<int>::init<>(v9 + 44, i, (v45 + 1));
  re::FixedArray<int>::init<>(v9 + 47, i, (a4 + 1));
  re::FixedArray<int>::init<>(v9 + 50, i, v14);
  uint64_t v54 = 0;
  unint64_t v55 = 0;
  uint64_t v56 = 0;
  unint64_t v12 = 0;
  unsigned int v50 = 0;
  unint64_t v5 = 0;
  unsigned int v22 = 0;
  unsigned int v53 = 0;
  do
  {
    unint64_t v13 = v22;
    if (v15 <= v22) {
      goto LABEL_85;
    }
    unint64_t i = v23;
    unint64_t v15 = v55;
    if (v55 <= v23) {
      goto LABEL_86;
    }
    ++*(_DWORD *)(v56 + 4 * v23);
    unint64_t v15 = v53;
    unint64_t v14 = v9[42];
    if (v14 <= v53) {
      goto LABEL_87;
    }
    *(_DWORD *)(v9[43] + 4 * v5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = v5;
    unint64_t v11 = v53;
    unint64_t v15 = v9[24];
    if (v15 <= v53) {
      goto LABEL_88;
    }
    unint64_t v13 = (unint64_t)a3 + 96 * v13;
    re::StringID::operator=((unint64_t *)(v9[25] + 16 * v53), (uint64_t *)v13);
    unint64_t v15 = v53;
    unint64_t v14 = v9[27];
    if (v14 <= v53) {
      goto LABEL_89;
    }
    *(_DWORD *)(v9[28] + 4 * v5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = i;
    unint64_t v15 = v53;
    unint64_t v14 = v9[48];
    if (v14 <= v53) {
      goto LABEL_90;
    }
    *(_DWORD *)(v9[49] + 4 * v5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = v12;
    re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add<unsigned int &>((uint64_t)(v9 + 2), (StringID *)v13, &v53);
    {
      unint64_t v13 = v50;
      unint64_t v15 = v9[30];
      if (v15 <= v50) {
        goto LABEL_99;
      }
      *(_DWORD *)(v9[31] + 4 * v50) = v53;
      if (v24)
      {
        unint64_t v13 = v24;
        unint64_t v25 = 0;
        unint64_t v11 = 1;
        do
        {
          {
            unint64_t v15 = v12;
            unint64_t v14 = v9[33];
            if (v14 <= v12) {
              goto LABEL_83;
            }
            unint64_t v14 = (v5 + v11 - 1);
            *(_DWORD *)(v9[34] + 4 * v12) = v14;
            unint64_t v15 = v9[36];
            if (v15 <= v14) {
              goto LABEL_84;
            }
            *(_DWORD *)(v9[37] + 4 * v14) = v12;
            unint64_t v12 = (v12 + 1);
          }
          unint64_t v25 = v11;
          BOOL v26 = v13 > v11;
          unint64_t v11 = (v11 + 1);
        }
        while (v26);
      }
      ++v50;
    }
    unint64_t v15 = a4;
    uint64_t v28 = v27;
    if (v27)
    {
      unint64_t i = v5;
      unint64_t v13 = v9[51];
      if (v13 >= v5) {
        uint64_t v29 = v5;
      }
      else {
        uint64_t v29 = v9[51];
      }
      while (v13 != v29)
      {
        *(_DWORD *)(v9[52] + 4 * i) = v53;
        ++v29;
        ++i;
        if (!--v28) {
          goto LABEL_47;
        }
      }
      uint64_t v57 = 0;
      long long v69 = 0u;
      long long v70 = 0u;
      long long v67 = 0u;
      long long v68 = 0u;
      long long v66 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v58 = 136315906;
      int v59 = "operator[]";
      __int16 v60 = 1024;
      int v61 = 468;
      __int16 v62 = 2048;
      unint64_t v63 = i;
      __int16 v64 = 2048;
      unint64_t v65 = v13;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_79:
      uint64_t v54 = 0;
      long long v69 = 0u;
      long long v70 = 0u;
      long long v67 = 0u;
      long long v68 = 0u;
      long long v66 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v58 = 136315906;
      int v59 = "operator[]";
      __int16 v60 = 1024;
      int v61 = 797;
      __int16 v62 = 2048;
      unint64_t v63 = v12;
      __int16 v64 = 2048;
      unint64_t v65 = v10;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_80:
      uint64_t v57 = 0;
      long long v69 = 0u;
      long long v70 = 0u;
      long long v67 = 0u;
      long long v68 = 0u;
      long long v66 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v58 = 136315906;
      int v59 = "operator[]";
      __int16 v60 = 1024;
      int v61 = 797;
      __int16 v62 = 2048;
      unint64_t v63 = v13;
      __int16 v64 = 2048;
      unint64_t v65 = v10;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_81:
      uint64_t v57 = 0;
      long long v69 = 0u;
      long long v70 = 0u;
      long long v67 = 0u;
      long long v68 = 0u;
      long long v66 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v58 = 136315906;
      int v59 = "operator[]";
      __int16 v60 = 1024;
      int v61 = 797;
      __int16 v62 = 2048;
      unint64_t v63 = i;
      __int16 v64 = 2048;
      unint64_t v65 = v10;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_82:
      uint64_t v57 = 0;
      long long v69 = 0u;
      long long v70 = 0u;
      long long v67 = 0u;
      long long v68 = 0u;
      long long v66 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v58 = 136315906;
      int v59 = "operator[]";
      __int16 v60 = 1024;
      int v61 = 468;
      __int16 v62 = 2048;
      unint64_t v63 = v13;
      __int16 v64 = 2048;
      unint64_t v65 = v10;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_83:
      uint64_t v57 = 0;
      long long v69 = 0u;
      long long v70 = 0u;
      long long v67 = 0u;
      long long v68 = 0u;
      long long v66 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v58 = 136315906;
      int v59 = "operator[]";
      __int16 v60 = 1024;
      int v61 = 468;
      __int16 v62 = 2048;
      unint64_t v63 = v15;
      __int16 v64 = 2048;
      unint64_t v65 = v14;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_84:
      uint64_t v57 = 0;
      long long v69 = 0u;
      long long v70 = 0u;
      long long v67 = 0u;
      long long v68 = 0u;
      long long v66 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v58 = 136315906;
      int v59 = "operator[]";
      __int16 v60 = 1024;
      int v61 = 468;
      __int16 v62 = 2048;
      unint64_t v63 = v14;
      __int16 v64 = 2048;
      unint64_t v65 = v15;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_85:
      re::internal::assertLog((re::internal *)6, v21, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v13, v15);
      _os_crash();
      __break(1u);
LABEL_86:
      uint64_t v57 = 0;
      long long v69 = 0u;
      long long v70 = 0u;
      long long v67 = 0u;
      long long v68 = 0u;
      long long v66 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v58 = 136315906;
      int v59 = "operator[]";
      __int16 v60 = 1024;
      int v61 = 468;
      __int16 v62 = 2048;
      unint64_t v63 = i;
      __int16 v64 = 2048;
      unint64_t v65 = v15;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_87:
      uint64_t v57 = 0;
      long long v69 = 0u;
      long long v70 = 0u;
      long long v67 = 0u;
      long long v68 = 0u;
      long long v66 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v58 = 136315906;
      int v59 = "operator[]";
      __int16 v60 = 1024;
      int v61 = 468;
      __int16 v62 = 2048;
      unint64_t v63 = v15;
      __int16 v64 = 2048;
      unint64_t v65 = v14;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_88:
      uint64_t v57 = 0;
      long long v69 = 0u;
      long long v70 = 0u;
      long long v67 = 0u;
      long long v68 = 0u;
      long long v66 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v58 = 136315906;
      int v59 = "operator[]";
      __int16 v60 = 1024;
      int v61 = 468;
      __int16 v62 = 2048;
      unint64_t v63 = v11;
      __int16 v64 = 2048;
      unint64_t v65 = v15;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_89:
      uint64_t v57 = 0;
      long long v69 = 0u;
      long long v70 = 0u;
      long long v67 = 0u;
      long long v68 = 0u;
      long long v66 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v58 = 136315906;
      int v59 = "operator[]";
      __int16 v60 = 1024;
      int v61 = 468;
      __int16 v62 = 2048;
      unint64_t v63 = v15;
      __int16 v64 = 2048;
      unint64_t v65 = v14;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_90:
      uint64_t v57 = 0;
      long long v69 = 0u;
      long long v70 = 0u;
      long long v67 = 0u;
      long long v68 = 0u;
      long long v66 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v58 = 136315906;
      int v59 = "operator[]";
      __int16 v60 = 1024;
      int v61 = 468;
      __int16 v62 = 2048;
      unint64_t v63 = v15;
      __int16 v64 = 2048;
      unint64_t v65 = v14;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_91:
      uint64_t v57 = 0;
      long long v69 = 0u;
      long long v70 = 0u;
      long long v67 = 0u;
      long long v68 = 0u;
      long long v66 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v58 = 136315906;
      int v59 = "operator[]";
      __int16 v60 = 1024;
      int v61 = 468;
      __int16 v62 = 2048;
      unint64_t v63 = v15;
      __int16 v64 = 2048;
      unint64_t v65 = v12;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_92:
      uint64_t v57 = 0;
      long long v69 = 0u;
      long long v70 = 0u;
      long long v67 = 0u;
      long long v68 = 0u;
      long long v66 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v58 = 136315906;
      int v59 = "operator[]";
      __int16 v60 = 1024;
      int v61 = 468;
      __int16 v62 = 2048;
      unint64_t v63 = v15;
      __int16 v64 = 2048;
      unint64_t v65 = v12;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_93:
      uint64_t v57 = 0;
      long long v69 = 0u;
      long long v70 = 0u;
      long long v67 = 0u;
      long long v68 = 0u;
      long long v66 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v58 = 136315906;
      int v59 = "operator[]";
      __int16 v60 = 1024;
      int v61 = 468;
      __int16 v62 = 2048;
      unint64_t v63 = v15;
      __int16 v64 = 2048;
      unint64_t v65 = v12;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_94:
      uint64_t v57 = 0;
      long long v69 = 0u;
      long long v70 = 0u;
      long long v67 = 0u;
      long long v68 = 0u;
      long long v66 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v58 = 136315906;
      int v59 = "operator[]";
      __int16 v60 = 1024;
      int v61 = 468;
      __int16 v62 = 2048;
      unint64_t v63 = v15;
      __int16 v64 = 2048;
      unint64_t v65 = v12;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_95:
      uint64_t v57 = 0;
      long long v69 = 0u;
      long long v70 = 0u;
      long long v67 = 0u;
      long long v68 = 0u;
      long long v66 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v58 = 136315906;
      int v59 = "operator[]";
      __int16 v60 = 1024;
      int v61 = 468;
      __int16 v62 = 2048;
      unint64_t v63 = v15;
      __int16 v64 = 2048;
      unint64_t v65 = v12;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_96:
      uint64_t v57 = 0;
      long long v69 = 0u;
      long long v70 = 0u;
      long long v67 = 0u;
      long long v68 = 0u;
      long long v66 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v58 = 136315906;
      int v59 = "operator[]";
      __int16 v60 = 1024;
      int v61 = 468;
      __int16 v62 = 2048;
      unint64_t v63 = i;
      __int16 v64 = 2048;
      unint64_t v65 = v5;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_97:
      uint64_t v57 = 0;
      long long v69 = 0u;
      long long v70 = 0u;
      long long v67 = 0u;
      long long v68 = 0u;
      long long v66 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v58 = 136315906;
      int v59 = "operator[]";
      __int16 v60 = 1024;
      int v61 = 468;
      __int16 v62 = 2048;
      unint64_t v63 = i;
      __int16 v64 = 2048;
      unint64_t v65 = v5;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_98:
      uint64_t v57 = 0;
      long long v69 = 0u;
      long long v70 = 0u;
      long long v67 = 0u;
      long long v68 = 0u;
      long long v66 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v58 = 136315906;
      int v59 = "operator[]";
      __int16 v60 = 1024;
      int v61 = 468;
      __int16 v62 = 2048;
      unint64_t v63 = v5;
      __int16 v64 = 2048;
      unint64_t v65 = v15;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_99:
      uint64_t v57 = 0;
      long long v69 = 0u;
      long long v70 = 0u;
      long long v67 = 0u;
      long long v68 = 0u;
      long long v66 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v58 = 136315906;
      int v59 = "operator[]";
      __int16 v60 = 1024;
      int v61 = 468;
      __int16 v62 = 2048;
      unint64_t v63 = v13;
      __int16 v64 = 2048;
      unint64_t v65 = v15;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_100:
      uint64_t v57 = 0;
      long long v69 = 0u;
      long long v70 = 0u;
      long long v67 = 0u;
      long long v68 = 0u;
      long long v66 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v58 = 136315906;
      int v59 = "operator[]";
      __int16 v60 = 1024;
      int v61 = 468;
      __int16 v62 = 2048;
      unint64_t v63 = v13;
      __int16 v64 = 2048;
      unint64_t v65 = i;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_101:
      re::internal::assertLog((re::internal *)4, v17, "assertion failure: '%s' (%s:line %i) The number of skinned parts exceeds expectations.", "skinnedMeshPartCount < 4294967295U", "init", 251);
      _os_crash();
      __break(1u);
      goto LABEL_102;
    }
LABEL_47:
    unint64_t v5 = v5 + v27;
    unsigned int v22 = v53 + 1;
    unsigned int v53 = v22;
  }
  while (v22 < a4);
  unint64_t v13 = v9[42];
  unint64_t i = v46;
  if (v13 <= v46)
  {
LABEL_104:
    uint64_t v57 = 0;
    long long v69 = 0u;
    long long v70 = 0u;
    long long v67 = 0u;
    long long v68 = 0u;
    long long v66 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v58 = 136315906;
    int v59 = "operator[]";
    __int16 v60 = 1024;
    int v61 = 468;
    __int16 v62 = 2048;
    unint64_t v63 = i;
    __int16 v64 = 2048;
    unint64_t v65 = v13;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_105;
  }
  *(_DWORD *)(v9[43] + 4 * v46) = v5;
  unint64_t v13 = v9[48];
  if (v13 <= v46)
  {
LABEL_105:
    uint64_t v57 = 0;
    long long v69 = 0u;
    long long v70 = 0u;
    long long v67 = 0u;
    long long v68 = 0u;
    long long v66 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v58 = 136315906;
    int v59 = "operator[]";
    __int16 v60 = 1024;
    int v61 = 468;
    __int16 v62 = 2048;
    unint64_t v63 = i;
    __int16 v64 = 2048;
    unint64_t v65 = v13;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_106;
  }
  unint64_t v11 = 0;
  unint64_t i = 0;
  unint64_t v15 = 0;
  int v30 = 0;
  *(_DWORD *)(v9[49] + 4 * v46) = v12;
  do
  {
    unint64_t v12 = v9[15];
    if (v12 <= v15) {
      goto LABEL_91;
    }
    unint64_t v13 = (unint64_t)v31;
    *(_WORD *)(v9[16] + 2 * v15) = (_WORD)v31;
    unint64_t v12 = v9[18];
    if (v12 <= v15) {
      goto LABEL_92;
    }
    unint64_t v12 = v55;
    if (v55 <= v15) {
      goto LABEL_93;
    }
    int v32 = (uint64_t *)(v9[19] + v11);
    unint64_t v33 = *(unsigned int *)(v56 + 4 * v15);
    unint64_t v12 = v9[21];
    if (v12 <= v15) {
      goto LABEL_94;
    }
    re::StringID::operator=((unint64_t *)(v9[22] + i), (uint64_t *)v5);
    unint64_t v12 = v9[45];
    if (v12 <= v15) {
      goto LABEL_95;
    }
    uint64_t v34 = v9[46];
    *(_DWORD *)(v34 + 4 * v15) = v30;
    v30 += v13;
    ++v15;
    i += 16;
    v11 += 24;
  }
  while (v45 != v15);
  unint64_t v5 = v45;
  if (v12 <= v45)
  {
LABEL_106:
    uint64_t v57 = 0;
    long long v69 = 0u;
    long long v70 = 0u;
    long long v67 = 0u;
    long long v68 = 0u;
    long long v66 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v58 = 136315906;
    int v59 = "operator[]";
    __int16 v60 = 1024;
    int v61 = 468;
    __int16 v62 = 2048;
    unint64_t v63 = v5;
    __int16 v64 = 2048;
    unint64_t v65 = v12;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  unint64_t v13 = 0;
  *(_DWORD *)(v34 + 4 * v45) = v30;
  unint64_t v12 = 24;
  do
  {
    unint64_t i = v35;
    unint64_t v5 = v9[18];
    if (v5 <= v35) {
      goto LABEL_96;
    }
    unint64_t v5 = v55;
    if (v55 <= v35) {
      goto LABEL_97;
    }
    uint64_t v36 = v9[19];
    unint64_t v15 = *(void *)(v36 + 24 * v35 + 8);
    uint64_t v37 = v56;
    uint64_t v38 = *(unsigned int *)(v56 + 4 * v35);
    unint64_t v5 = v15 - v38;
    if (v15 <= v15 - v38) {
      goto LABEL_98;
    }
    *(_DWORD *)(*(void *)(v36 + 24 * v35 + 16) + 4 * v5) = v13;
    --*(_DWORD *)(v37 + 4 * v35);
    ++v13;
  }
  while (v46 != v13);
  unint64_t v13 = 0;
  unint64_t v14 = 48;
  while (2)
  {
    re::MeshNameMap::addMeshAssetModelNameToMap((re::MeshNameMap *)v9, v39, v13);
    unint64_t i = v9[39];
    if (i <= v13) {
      goto LABEL_100;
    }
    if ((2 * v5) <= 1) {
      signed int v41 = 1;
    }
    else {
      signed int v41 = 2 * v5;
    }
    uint64_t v42 = v9[40] + 48 * v13;
    LOWORD(v5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = 0;
    if (v5)
    {
      unint64_t v15 = 0;
      unint64_t i = 0;
      do
      {
        unint64_t v10 = *((void *)a2 + 2);
        if (v10 <= v13) {
          goto LABEL_80;
        }
        uint64_t v43 = *((void *)a2 + 4);
        unint64_t v10 = *(void *)(v43 + (v13 << 9) + 208);
        if (v10 <= i) {
          goto LABEL_81;
        }
        unint64_t v10 = v9[39];
        if (v10 <= v13) {
          goto LABEL_82;
        }
        re::HashTable<re::StringID,unsigned short,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add<unsigned short &>(v9[40] + 48 * v13, (StringID *)(*(void *)(v43 + (v13 << 9) + 224) + (i << 8) + 72), &v53);
        unint64_t v15 = (v15 + 1);
        LOWORD(v5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = v15;
        unint64_t i = (unsigned __int16)v15;
      }
      while (v5 > (unsigned __int16)v15);
    }
    if (++v13 != v45) {
      continue;
    }
    break;
  }
  ++*(_DWORD *)v9;
  re::MeshNameMap::calculateHash(v9);
  double result = v54;
  if (v54)
  {
    if (v55) {
      return (*(uint64_t (**)(void))(*(void *)v54 + 40))();
    }
  }
  return result;
}

uint64_t re::MeshNameMap::deinit(re::MeshNameMap *this)
{
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 2);
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 14);
  re::FixedArray<re::FixedArray<float>>::deinit((void *)this + 17);
  re::FixedArray<re::StringID>::deinit((void *)this + 20);
  re::FixedArray<re::StringID>::deinit((void *)this + 23);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 26);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 29);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 32);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 35);
  re::FixedArray<re::HashTable<re::StringID,unsigned short,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>>::deinit((void *)this + 38);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 41);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 44);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 47);
  uint64_t result = re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 50);
  ++*(_DWORD *)this;
  *((void *)this + 1) = 0;
  return result;
}

uint64_t re::MeshNameMap::meshPartInstanceCount(re::MeshNameMap *this, unsigned int a2)
{
  unint64_t v2 = a2 + 1;
  unint64_t v3 = *((void *)this + 42);
  if (v3 <= v2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_5:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (v3 <= a2) {
    goto LABEL_5;
  }
  return (*(_DWORD *)(*((void *)this + 43) + 4 * v2) - *(_DWORD *)(*((void *)this + 43) + 4 * a2));
}

uint64_t re::MeshNameMap::modelIndex(re::MeshNameMap *this, const re::StringID *a2)
{
  unint64_t v3 = (char *)this + 64;
  id v4 = (unsigned int *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)this + 64, a2);
  if (v4) {
    return *v4;
  }
  unint64_t v5 = (const char *)*((void *)a2 + 1);
  size_t v6 = strlen(v5);
  size_t v9 = v8;
  v11[0] = 0;
  v11[1] = "";
  id v4 = (unsigned int *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v3, v11);
  re::StringID::destroyString((re::StringID *)v11);
  if (v4) {
    return *v4;
  }
  else {
    return 0xFFFFLL;
  }
}

uint64_t re::anonymous namespace'::meshModelTrimmedName(uint64_t result, unint64_t a2)
{
  v4[0] = result;
  v4[1] = a2;
  unint64_t v2 = a2;
  while (v2)
  {
    int v3 = *(unsigned __int8 *)(result - 1 + v2--);
    if (v3 == 47) {
      return re::Slice<char>::range(v4, v2 + 1, a2);
    }
  }
  return result;
}

uint64_t re::MeshNameMap::modelIndex(re::MeshNameMap *this, unsigned int a2)
{
  if (*((void *)this + 27) <= (unint64_t)a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(unsigned int *)(*((void *)this + 28) + 4 * a2);
}

uint64_t re::MeshNameMap::meshPartStartIndexForInstance(re::MeshNameMap *this, unsigned int a2)
{
  if (*((void *)this + 42) <= (unint64_t)a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(unsigned int *)(*((void *)this + 43) + 4 * a2);
}

uint64_t re::MeshNameMap::skinnedPartIndexForPartInstance(re::MeshNameMap *this, unsigned int a2)
{
  if (*((void *)this + 36) <= (unint64_t)a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(unsigned int *)(*((void *)this + 37) + 4 * a2);
}

uint64_t *re::MeshNameMap::meshInstancePartsForIdentifier@<X0>(uint64_t this@<X0>, unsigned __int8 *a2@<X1>, void *a3@<X8>)
{
  int v3 = (void *)this;
  uint64_t v42 = *MEMORY[0x263EF8340];
  int v5 = *a2;
  if (v5 != 3)
  {
    unint64_t v15 = (unsigned char *)*((void *)a2 + 4);
    if (v15 && *v15)
    {
      uint64_t v16 = a2 + 24;
      if (v5 == 2)
      {
        this = re::MeshNameMap::modelIndex((re::MeshNameMap *)this, (const re::StringID *)(a2 + 8));
        if (this == 0xFFFF) {
          goto LABEL_42;
        }
        unint64_t v32 = this;
        if (v3[39] > (unint64_t)this)
        {
          this = re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(v3[40] + 48 * this, v16);
          if (!this) {
            goto LABEL_42;
          }
          if (v3[18] > v32)
          {
            uint64_t v33 = v3[19] + 24 * v32;
            uint64_t v6 = *(void *)(v33 + 8);
            uint64_t v34 = *(void *)(v33 + 16);
            __int16 v35 = *(_WORD *)this;
            uint64_t v10 = re::globalAllocators((re *)this)[2];
            *((void *)&v38 + 1) = v10;
            if (v10) {
              uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v10 + 32))(v10, 32, 0);
            }
            else {
              uint64_t v11 = 0;
            }
            *(void *)uint64_t v11 = &unk_26E710C98;
            *(void *)(v11 + 8) = v34;
            *(void *)(v11 + 16) = v6;
            *(_WORD *)(v11 + 24) = v35;
            goto LABEL_4;
          }
LABEL_55:
          long long v40 = 0u;
          long long v41 = 0u;
          long long v38 = 0u;
          long long v39 = 0u;
          *(_OWORD *)buf = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        goto LABEL_52;
      }
      if (v5 == 1)
      {
        this = re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(this + 16, (void *)a2 + 1);
        if (!this) {
          goto LABEL_42;
        }
        unint64_t v17 = *(unsigned int *)this;
        if (v3[27] > v17)
        {
          unint64_t v18 = *(unsigned int *)(v3[28] + 4 * v17);
          if (v3[39] > v18)
          {
            this = re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(v3[40] + 48 * v18, v16);
            if (!this) {
              goto LABEL_42;
            }
            uint64_t v19 = *(unsigned __int16 *)this;
            uint64_t v20 = re::globalAllocators((re *)this)[2];
            *(void *)buf = &unk_26E710C40;
            *(void *)&uint8_t buf[8] = v17 | (v19 << 32);
            *((void *)&v38 + 1) = v20;
            *(void *)&long long v39 = buf;
            *a3 = 1;
LABEL_24:
            uint64_t v12 = (uint64_t)(a3 + 1);
            a3[4] = v20;
            goto LABEL_6;
          }
          goto LABEL_51;
        }
LABEL_50:
        long long v40 = 0u;
        long long v41 = 0u;
        long long v38 = 0u;
        long long v39 = 0u;
        *(_OWORD *)buf = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_51:
        long long v40 = 0u;
        long long v41 = 0u;
        long long v38 = 0u;
        long long v39 = 0u;
        *(_OWORD *)buf = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_52:
        long long v40 = 0u;
        long long v41 = 0u;
        long long v38 = 0u;
        long long v39 = 0u;
        *(_OWORD *)buf = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_53;
      }
      int v30 = *re::graphicsLogObjects((re *)this);
      this = os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT);
      if (!this) {
        goto LABEL_42;
      }
      int v36 = *a2;
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v36;
    }
    else
    {
      if (v5 == 2)
      {
        this = re::MeshNameMap::modelIndex((re::MeshNameMap *)this, (const re::StringID *)(a2 + 8));
        if (this == 0xFFFF) {
          goto LABEL_42;
        }
        if (v3[18] <= (unint64_t)this)
        {
          long long v40 = 0u;
          long long v41 = 0u;
          long long v38 = 0u;
          long long v39 = 0u;
          *(_OWORD *)buf = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        else if (v3[15] > (unint64_t)this)
        {
          uint64_t v25 = v3[19] + 24 * this;
          uint64_t v26 = *(void *)(v25 + 8);
          uint64_t v27 = *(unsigned __int16 *)(v3[16] + 2 * this);
          if (v26 * v27)
          {
            uint64_t v28 = *(void *)(v25 + 16);
            uint64_t v10 = re::globalAllocators((re *)this)[2];
            *((void *)&v38 + 1) = v10;
            if (v10) {
              uint64_t v29 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v10 + 32))(v10, 32, 0);
            }
            else {
              uint64_t v29 = 0;
            }
            *(void *)uint64_t v29 = &unk_26E710BE8;
            *(void *)(v29 + 8) = v28;
            *(void *)(v29 + 16) = v26;
            *(_WORD *)(v29 + 24) = v27;
            *(void *)&long long v39 = v29;
            *a3 = v26 * v27;
            goto LABEL_5;
          }
          goto LABEL_42;
        }
        long long v40 = 0u;
        long long v41 = 0u;
        long long v38 = 0u;
        long long v39 = 0u;
        *(_OWORD *)buf = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_50;
      }
      if (v5 == 1)
      {
        this = re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(this + 16, (void *)a2 + 1);
        if (!this) {
          goto LABEL_42;
        }
        unint64_t v21 = *(unsigned int *)this;
        if (v21 == 0xFFFF) {
          goto LABEL_42;
        }
        if (v3[27] > v21)
        {
          unint64_t v22 = *(unsigned int *)(v3[28] + 4 * v21);
          if (v3[15] > v22)
          {
            uint64_t v23 = v3[16];
            uint64_t v24 = *(unsigned __int16 *)(v23 + 2 * v22);
            if (!*(_WORD *)(v23 + 2 * v22)) {
              goto LABEL_42;
            }
            uint64_t v20 = re::globalAllocators((re *)this)[2];
            *(void *)buf = &unk_26E710B80;
            *(_DWORD *)&uint8_t buf[8] = v21;
            *((void *)&v38 + 1) = v20;
            *(void *)&long long v39 = buf;
            *a3 = v24;
            goto LABEL_24;
          }
          goto LABEL_54;
        }
LABEL_53:
        long long v40 = 0u;
        long long v41 = 0u;
        long long v38 = 0u;
        long long v39 = 0u;
        *(_OWORD *)buf = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_54:
        long long v40 = 0u;
        long long v41 = 0u;
        long long v38 = 0u;
        long long v39 = 0u;
        *(_OWORD *)buf = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_55;
      }
      int v30 = *re::graphicsLogObjects((re *)this);
      this = os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT);
      if (!this) {
        goto LABEL_42;
      }
      int v31 = *a2;
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v31;
    }
    _os_log_impl(&dword_233120000, v30, OS_LOG_TYPE_DEFAULT, "Invalid mesh identifier type detected: %u.", buf, 8u);
    goto LABEL_42;
  }
  uint64_t v6 = *(void *)(this + 408);
  if (v6)
  {
    uint64_t v7 = *(void *)(this + 416);
    uint64_t v9 = *(void *)(this + 336);
    uint64_t v8 = *(void *)(this + 344);
    uint64_t v10 = re::globalAllocators((re *)this)[2];
    *((void *)&v38 + 1) = v10;
    uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v10 + 32))(v10, 40, 0);
    *(void *)uint64_t v11 = &unk_26E710CF0;
    *(void *)(v11 + 8) = v7;
    *(void *)(v11 + 16) = v6;
    *(void *)(v11 + 24) = v8;
    *(void *)(v11 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = v9;
LABEL_4:
    *(void *)&long long v39 = v11;
    *a3 = v6;
LABEL_5:
    uint64_t v12 = (uint64_t)(a3 + 1);
    a3[4] = v10;
LABEL_6:
    a3[5] = 0;
    re::FunctionBase<24ul,re::MeshInstanceAndPartIndex ()(unsigned long)>::operator=<24ul>(v12, (uint64_t)buf);
    return (uint64_t *)re::FunctionBase<24ul,re::MeshInstanceAndPartIndex ()(unsigned long)>::destroyCallable((uint64_t)buf);
  }
LABEL_42:
  *a3 = 0;
  uint64_t result = re::globalAllocators((re *)this);
  a3[4] = result[2];
  a3[5] = 0;
  return result;
}

void re::MeshNameMap::addMeshAssetModelNameToMap(re::MeshNameMap *this, StringID *a2, int a3)
{
  int v12 = a3;
  id v4 = (char *)this + 64;
  re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add<unsigned int &>((uint64_t)this + 64, a2, &v12);
  size_t v5 = strlen(a2->var1);
  size_t v8 = v7;
  var1 = a2->var1;
  size_t v10 = strlen(var1);
  if (v10 != v8 || (size_t v10 = memcmp(v6, var1, v8), v10))
  {
    *(void *)&v11.var0 = 0;
    v11.var1 = "";
    re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add<unsigned int &>((uint64_t)v4, &v11, &v12);
    re::StringID::destroyString((re::StringID *)&v11);
  }
}

uint64_t re::MeshNameMap::estimateFootprint(re::MeshNameMap *this)
{
  unint64_t v2 = ((unint64_t)*((unsigned int *)this + 10) << 6) + 424;
  uint64_t v3 = *((unsigned int *)this + 12);
  if (v3)
  {
    uint64_t v4 = 0;
    size_t v5 = (int *)*((void *)this + 4);
    while (1)
    {
      int v6 = *v5;
      v5 += 8;
      if (v6 < 0) {
        break;
      }
      if (v3 == ++v4)
      {
        LODWORD(v4) = *((_DWORD *)this + 12);
        break;
      }
    }
  }
  else
  {
    LODWORD(v4) = 0;
  }
  if (v3 != v4)
  {
    uint64_t v7 = v4;
    uint64_t v8 = *((void *)this + 4);
    do
    {
      uint64_t v9 = v8 + 32 * v7;
      if (*(unsigned char *)(v9 + 8)) {
        size_t v10 = strlen(*(const char **)(v9 + 16)) + 1;
      }
      else {
        size_t v10 = 0;
      }
      v2 += v10;
      if (v3 <= (int)v4 + 1) {
        int v11 = v4 + 1;
      }
      else {
        int v11 = v3;
      }
      while (1)
      {
        uint64_t v7 = (v4 + 1);
        if (v11 - 1 == v4) {
          break;
        }
        LODWORD(v4) = v4 + 1;
        int v12 = v7;
        if ((*(_DWORD *)(v8 + 32 * v7) & 0x80000000) != 0) {
          goto LABEL_19;
        }
      }
      int v12 = v11;
LABEL_19:
      LODWORD(v4) = v12;
    }
    while (v3 != v12);
  }
  unint64_t v13 = v2 + ((unint64_t)*((unsigned int *)this + 22) << 6);
  uint64_t v14 = *((unsigned int *)this + 24);
  if (v14)
  {
    uint64_t v15 = 0;
    uint64_t v16 = (int *)*((void *)this + 10);
    while (1)
    {
      int v17 = *v16;
      v16 += 8;
      if (v17 < 0) {
        break;
      }
      if (v14 == ++v15)
      {
        LODWORD(v15) = *((_DWORD *)this + 24);
        break;
      }
    }
  }
  else
  {
    LODWORD(v15) = 0;
  }
  if (v14 != v15)
  {
    uint64_t v18 = v15;
    uint64_t v19 = *((void *)this + 10);
    do
    {
      uint64_t v20 = v19 + 32 * v18;
      if (*(unsigned char *)(v20 + 8)) {
        size_t v21 = strlen(*(const char **)(v20 + 16)) + 1;
      }
      else {
        size_t v21 = 0;
      }
      v13 += v21;
      if (v14 <= (int)v15 + 1) {
        int v22 = v15 + 1;
      }
      else {
        int v22 = *((_DWORD *)this + 24);
      }
      while (1)
      {
        uint64_t v18 = (v15 + 1);
        if (v22 - 1 == v15) {
          break;
        }
        LODWORD(v15) = v15 + 1;
        int v23 = v18;
        if ((*(_DWORD *)(v19 + 32 * v18) & 0x80000000) != 0) {
          goto LABEL_38;
        }
      }
      int v23 = v22;
LABEL_38:
      LODWORD(v15) = v23;
    }
    while (v14 != v23);
  }
  uint64_t v24 = *((void *)this + 18);
  uint64_t v25 = v13 + 2 * *((void *)this + 15) + 24 * v24;
  if (v24)
  {
    uint64_t v26 = (uint64_t *)(*((void *)this + 19) + 8);
    do
    {
      uint64_t v27 = *v26;
      v26 += 3;
      v25 += 4 * v27;
      --v24;
    }
    while (v24);
  }
  uint64_t v28 = *((void *)this + 21);
  uint64_t v29 = v25 + 16 * v28;
  if (v28)
  {
    int v30 = (const char **)(*((void *)this + 22) + 8);
    uint64_t v31 = 16 * v28;
    do
    {
      if (*(unsigned char *)(v30 - 1)) {
        size_t v32 = strlen(*v30) + 1;
      }
      else {
        size_t v32 = 0;
      }
      v29 += v32;
      v30 += 2;
      v31 -= 16;
    }
    while (v31);
  }
  uint64_t v33 = *((void *)this + 24);
  uint64_t v34 = v29 + 16 * v33;
  if (v33)
  {
    __int16 v35 = (const char **)(*((void *)this + 25) + 8);
    do
    {
      if (*(unsigned char *)(v35 - 1)) {
        size_t v36 = strlen(*v35) + 1;
      }
      else {
        size_t v36 = 0;
      }
      v34 += v36;
      v35 += 2;
      --v33;
    }
    while (v33);
  }
  uint64_t v37 = *((void *)this + 39);
  uint64_t v38 = v34
      + 48 * v37
      + 4 * (*((void *)this + 30) + *((void *)this + 27) + *((void *)this + 33) + *((void *)this + 36));
  if (v37)
  {
    uint64_t v39 = 0;
    uint64_t v40 = *((void *)this + 40);
    do
    {
      uint64_t v41 = v40 + 48 * v39;
      uint64_t v42 = *(unsigned int *)(v41 + 32);
      if (v42)
      {
        uint64_t v43 = 0;
        uint64_t v44 = *(int **)(v40 + 48 * v39 + 16);
        while (1)
        {
          int v45 = *v44;
          v44 += 8;
          if (v45 < 0) {
            break;
          }
          if (v42 == ++v43)
          {
            LODWORD(v4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = *(_DWORD *)(v41 + 32);
            break;
          }
        }
      }
      else
      {
        LODWORD(v4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = 0;
      }
      v38 += 30 * *(unsigned int *)(v41 + 24) + ((30 * *(unsigned int *)(v41 + 24) + 15) & 0x3FFFFFFFF0);
      if (v42 != v43)
      {
        uint64_t v46 = v43;
        uint64_t v47 = *(void *)(v40 + 48 * v39 + 16);
        do
        {
          uint64_t v48 = v47 + 32 * v46;
          if (*(unsigned char *)(v48 + 8)) {
            size_t v49 = strlen(*(const char **)(v48 + 16)) + 1;
          }
          else {
            size_t v49 = 0;
          }
          v38 += v49;
          if (v42 <= (int)v43 + 1) {
            int v50 = v43 + 1;
          }
          else {
            int v50 = v42;
          }
          while (1)
          {
            uint64_t v46 = (v43 + 1);
            if (v50 - 1 == v43) {
              break;
            }
            LODWORD(v4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = v43 + 1;
            int v51 = v46;
            if ((*(_DWORD *)(v47 + 32 * v46) & 0x80000000) != 0) {
              goto LABEL_74;
            }
          }
          int v51 = v50;
LABEL_74:
          LODWORD(v4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = v51;
        }
        while (v42 != v51);
      }
      ++v39;
    }
    while (v39 != v37);
  }
  return v38 + 4 * (*((void *)this + 45) + *((void *)this + 42) + *((void *)this + 48));
}

void *re::MeshNameMap::calculateHash(void *this)
{
  uint64_t v1 = (uint64_t)this;
  uint64_t v14[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = this[21];
  if (v2)
  {
    unint64_t v3 = 0;
    uint64_t v4 = (unint64_t *)this[22];
    uint64_t v5 = 16 * v2;
    do
    {
      unint64_t v6 = *v4;
      v4 += 2;
      unint64_t v7 = 0x94D049BB133111EBLL
         * ((0xBF58476D1CE4E5B9 * ((v6 >> 31) ^ (v6 >> 1))) ^ ((0xBF58476D1CE4E5B9 * ((v6 >> 31) ^ (v6 >> 1))) >> 27));
      v3 ^= (v3 << 6) - 0x61C8864680B583E9 + (v3 >> 2) + (v7 ^ (v7 >> 31));
      v5 -= 16;
    }
    while (v5);
  }
  else
  {
    unint64_t v3 = 0;
  }
  uint64_t v8 = this[24];
  if (v8)
  {
    uint64_t v9 = (unint64_t *)this[25];
    uint64_t v10 = 16 * v8;
    do
    {
      unint64_t v11 = *v9;
      v9 += 2;
      unint64_t v12 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * ((v11 >> 31) ^ (v11 >> 1))) ^ ((0xBF58476D1CE4E5B9 * ((v11 >> 31) ^ (v11 >> 1))) >> 27));
      v3 ^= (v3 << 6) - 0x61C8864680B583E9 + (v3 >> 2) + (v12 ^ (v12 >> 31));
      v10 -= 16;
    }
    while (v10);
  }
  uint64_t v13 = this[36];
  if (v13)
  {
    this = (void *)MurmurHash3_x64_128(this[37], v13, 0, v14);
    v3 ^= (v3 << 6)
        - 0x61C8864680B583E9
        + (v3 >> 2)
        + ((v14[1] - 0x61C8864680B583E9 + (v14[0] << 6) + (v14[0] >> 2)) ^ v14[0]);
  }
  *(void *)(v1 + 8) = v3;
  return this;
}

void re::internal::Callable<re::MeshNameMap::meshInstancePartsForInstance(re::StringID const&)::$_0,re::MeshInstanceAndPartIndex ()(unsigned long)>::~Callable()
{
}

unint64_t re::internal::Callable<re::MeshNameMap::meshInstancePartsForInstance(re::StringID const&)::$_0,re::MeshInstanceAndPartIndex ()(unsigned long)>::operator()(uint64_t a1, void *a2)
{
  return *(unsigned int *)(a1 + 8) | ((unint64_t)(unsigned __int16)*a2 << 32);
}

uint64_t re::internal::Callable<re::MeshNameMap::meshInstancePartsForInstance(re::StringID const&)::$_0,re::MeshInstanceAndPartIndex ()(unsigned long)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E710B80;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<re::MeshNameMap::meshInstancePartsForInstance(re::StringID const&)::$_0,re::MeshInstanceAndPartIndex ()(unsigned long)>::moveInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E710B80;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<re::MeshNameMap::meshInstancePartsForInstance(re::StringID const&)::$_0,re::MeshInstanceAndPartIndex ()(unsigned long)>::size()
{
  return 16;
}

void re::internal::Callable<re::MeshNameMap::meshInstancePartsForModel(re::StringID const&)::$_0,re::MeshInstanceAndPartIndex ()(unsigned long)>::~Callable()
{
}

unint64_t re::internal::Callable<re::MeshNameMap::meshInstancePartsForModel(re::StringID const&)::$_0,re::MeshInstanceAndPartIndex ()(unsigned long)>::operator()(uint64_t a1, void *a2)
{
  unint64_t v2 = *(unsigned __int16 *)(a1 + 24);
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 > *a2 / v2) {
    return *(unsigned int *)(*(void *)(a1 + 8) + 4 * (*a2 / v2)) | ((unint64_t)(*a2 % v2) << 32);
  }
  re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, *a2 / v2, v3);
  unint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::internal::Callable<re::MeshNameMap::meshInstancePartsForModel(re::StringID const&)::$_0,re::MeshInstanceAndPartIndex ()(unsigned long)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E710BE8;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::Callable<re::MeshNameMap::meshInstancePartsForModel(re::StringID const&)::$_0,re::MeshInstanceAndPartIndex ()(unsigned long)>::moveInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E710BE8;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::Callable<re::MeshNameMap::meshInstancePartsForModel(re::StringID const&)::$_0,re::MeshInstanceAndPartIndex ()(unsigned long)>::size()
{
  return 32;
}

void re::internal::Callable<re::MeshNameMap::meshInstancePartsForIdentifier(re::MeshIdentifierAsset const&)::$_0,re::MeshInstanceAndPartIndex ()(unsigned long)>::~Callable()
{
}

uint64_t re::internal::Callable<re::MeshNameMap::meshInstancePartsForIdentifier(re::MeshIdentifierAsset const&)::$_0,re::MeshInstanceAndPartIndex ()(unsigned long)>::operator()(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

void *re::internal::Callable<re::MeshNameMap::meshInstancePartsForIdentifier(re::MeshIdentifierAsset const&)::$_0,re::MeshInstanceAndPartIndex ()(unsigned long)>::cloneInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E710C40;
  a2[1] = *(void *)(a1 + 8);
  return a2;
}

void *re::internal::Callable<re::MeshNameMap::meshInstancePartsForIdentifier(re::MeshIdentifierAsset const&)::$_0,re::MeshInstanceAndPartIndex ()(unsigned long)>::moveInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E710C40;
  a2[1] = *(void *)(a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<re::MeshNameMap::meshInstancePartsForIdentifier(re::MeshIdentifierAsset const&)::$_0,re::MeshInstanceAndPartIndex ()(unsigned long)>::size()
{
  return 16;
}

void re::internal::Callable<re::MeshNameMap::meshInstancePartsForIdentifier(re::MeshIdentifierAsset const&)::$_1,re::MeshInstanceAndPartIndex ()(unsigned long)>::~Callable()
{
}

unint64_t re::internal::Callable<re::MeshNameMap::meshInstancePartsForIdentifier(re::MeshIdentifierAsset const&)::$_1,re::MeshInstanceAndPartIndex ()(unsigned long)>::operator()(uint64_t a1, unint64_t *a2)
{
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 > *a2) {
    return *(unsigned int *)(*(void *)(a1 + 8) + 4 * *a2) | ((unint64_t)*(unsigned __int16 *)(a1 + 24) << 32);
  }
  re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, *a2, v2);
  unint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::internal::Callable<re::MeshNameMap::meshInstancePartsForIdentifier(re::MeshIdentifierAsset const&)::$_1,re::MeshInstanceAndPartIndex ()(unsigned long)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E710C98;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::Callable<re::MeshNameMap::meshInstancePartsForIdentifier(re::MeshIdentifierAsset const&)::$_1,re::MeshInstanceAndPartIndex ()(unsigned long)>::moveInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E710C98;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::Callable<re::MeshNameMap::meshInstancePartsForIdentifier(re::MeshIdentifierAsset const&)::$_1,re::MeshInstanceAndPartIndex ()(unsigned long)>::size()
{
  return 32;
}

void re::internal::Callable<re::MeshNameMap::meshInstancePartsForIdentifier(re::MeshIdentifierAsset const&)::$_2,re::MeshInstanceAndPartIndex ()(unsigned long)>::~Callable()
{
}

unint64_t re::internal::Callable<re::MeshNameMap::meshInstancePartsForIdentifier(re::MeshIdentifierAsset const&)::$_2,re::MeshInstanceAndPartIndex ()(unsigned long)>::operator()(void *a1, unint64_t *a2)
{
  unint64_t v2 = *a2;
  unint64_t v3 = a1[2];
  if (v3 <= *a2)
  {
    re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, *a2, v3);
    unint64_t v5 = _os_crash();
    __break(1u);
  }
  else
  {
    unint64_t v5 = *(unsigned int *)(a1[1] + 4 * v2);
    unint64_t v6 = a1[4];
    if (v6 > v5) {
      return v5 & 0xFFFF0000FFFFFFFFLL | ((unint64_t)(unsigned __int16)(v2 - *(_WORD *)(a1[3] + 4 * v5)) << 32);
    }
  }
  re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v5, v6);
  unint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::internal::Callable<re::MeshNameMap::meshInstancePartsForIdentifier(re::MeshIdentifierAsset const&)::$_2,re::MeshInstanceAndPartIndex ()(unsigned long)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E710CF0;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::Callable<re::MeshNameMap::meshInstancePartsForIdentifier(re::MeshIdentifierAsset const&)::$_2,re::MeshInstanceAndPartIndex ()(unsigned long)>::moveInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E710CF0;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::Callable<re::MeshNameMap::meshInstancePartsForIdentifier(re::MeshIdentifierAsset const&)::$_2,re::MeshInstanceAndPartIndex ()(unsigned long)>::size()
{
  return 40;
}

uint64_t re::anonymous namespace'::MeshCollectionAccessor::modelIndexForInstance(re::_anonymous_namespace_::MeshCollectionAccessor *this, unint64_t a2)
{
  unint64_t v2 = *((void *)this + 1);
  if (v2 > a2) {
    return *(unsigned int *)(*(void *)this + 96 * a2 + 80);
  }
  re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, a2, v2);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::anonymous namespace'::MeshCollectionAccessor::partCount(re::_anonymous_namespace_::MeshCollectionAccessor *this, unint64_t a2)
{
  if (*((void *)this + 2) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(*((void *)this + 4) + 816 * a2 + 56);
}

uint64_t re::anonymous namespace'::MeshCollectionAccessor::skinnedPartCount(re::_anonymous_namespace_::MeshCollectionAccessor *this, unint64_t a2)
{
  if (*((void *)this + 2) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v2 = *(void *)(*((void *)this + 4) + 816 * a2 + 176);
  if (v2) {
    return *(void *)(v2 + 8);
  }
  else {
    return 0;
  }
}

uint64_t re::anonymous namespace'::MeshCollectionAccessor::skeletonIndexForModelPart(re::_anonymous_namespace_::MeshCollectionAccessor *this, unint64_t a2, unint64_t a3)
{
  if (*((void *)this + 2) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v3 = *(void *)(*((void *)this + 4) + 816 * a2 + 176);
  if (v3 && *(void *)(v3 + 8) > a3) {
    return *(unsigned int *)(*(void *)(v3 + 16) + 72 * a3 + 4);
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t re::FixedArray<re::HashTable<re::StringID,unsigned short,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>>::init<>(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)uint64_t result = a2;
  *(void *)(result + 8) = a3;
  if (a3)
  {
    uint64_t v4 = result;
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 48 * a3, 8);
    *(void *)(v4 + 16) = result;
    if (result)
    {
      uint64_t v6 = a3 - 1;
      if (a3 != 1)
      {
        do
        {
          *(_OWORD *)(result + 16) = 0uLL;
          *(_OWORD *)(result + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0uLL;
          *(_OWORD *)uint64_t result = 0uLL;
          *(_DWORD *)(result + 36) = 0x7FFFFFFF;
          result += 48;
          --v6;
        }
        while (v6);
      }
      *(_OWORD *)(result + 16) = 0u;
      *(_OWORD *)(result + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0u;
      *(_OWORD *)uint64_t result = 0u;
      *(_DWORD *)(result + 36) = 0x7FFFFFFF;
    }
    else
    {
      re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
      uint64_t result = _os_crash();
      __break(1u);
    }
  }
  return result;
}

unint64_t re::anonymous namespace'::MeshCollectionAccessor::modelName(re::_anonymous_namespace_::MeshCollectionAccessor *this, unint64_t a2)
{
  if (*((void *)this + 2) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *((void *)this + 4) + 816 * a2;
}

re::StringID *re::HashTable<re::StringID,unsigned short,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add<unsigned short &>(uint64_t a1, StringID *a2, _WORD *a3)
{
  unint64_t v6 = 0xBF58476D1CE4E5B9 * ((*(void *)&a2->var0 >> 31) ^ (*(void *)&a2->var0 >> 1));
  unint64_t v7 = (0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) ^ ((0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) >> 31);
  if (!*(void *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  unint64_t v8 = v7 % *(unsigned int *)(a1 + 24);
  uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v8);
  if (v9 == 0x7FFFFFFF)
  {
LABEL_8:
    uint64_t v12 = *(unsigned int *)(a1 + 36);
    if (v12 == 0x7FFFFFFF)
    {
      uint64_t v12 = *(unsigned int *)(a1 + 32);
      int v13 = v12;
      if (v12 == *(_DWORD *)(a1 + 24))
      {
        re::HashTable<re::StringID,unsigned short,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
        LODWORD(v8) = v7 % *(unsigned int *)(a1 + 24);
        int v13 = *(_DWORD *)(a1 + 32);
      }
      *(_DWORD *)(a1 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = v13 + 1;
      uint64_t v14 = *(void *)(a1 + 16);
      int v15 = *(_DWORD *)(v14 + 32 * v12);
    }
    else
    {
      uint64_t v14 = *(void *)(a1 + 16);
      int v15 = *(_DWORD *)(v14 + 32 * v12);
      *(_DWORD *)(a1 + 36) = v15 & 0x7FFFFFFF;
    }
    uint64_t v16 = 32 * v12;
    *(_DWORD *)(v14 + v16) = v15 | 0x80000000;
    *(_DWORD *)(*(void *)(a1 + 16) + v16) = *(_DWORD *)(*(void *)(a1 + 16) + 32 * v12) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * v8);
    uint64_t result = re::StringID::StringID((re::StringID *)(*(void *)(a1 + 16) + 32 * v12 + 8), a2);
    uint64_t v17 = *(void *)(a1 + 8);
    *(_WORD *)(*(void *)(a1 + 16) + 32 * v12 + 24) = *a3;
    *(_DWORD *)(v17 + 4 * v8) = v12;
    ++*(_DWORD *)(a1 + 28);
    ++*(_DWORD *)(a1 + 40);
    return result;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  while (1)
  {
    uint64_t result = (re::StringID *)re::StringID::operator==((void *)(v10 + 32 * v9 + 8), a2);
    if (result) {
      return result;
    }
    uint64_t v9 = *(_DWORD *)(v10 + 32 * v9) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
}

void re::HashTable<re::StringID,unsigned short,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v24, 0, 36);
      *(void *)&v24[36] = 0x7FFFFFFFLL;
      re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v24, v4, a2);
      long long v5 = *(_OWORD *)a1;
      *(void *)a1 = *(void *)v24;
      uint64_t v6 = *(void *)(a1 + 16);
      long long v7 = *(_OWORD *)&v24[8];
      *(_OWORD *)uint64_t v24 = v5;
      *(void *)&v24[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      long long v9 = *(_OWORD *)&v24[24];
      *(_OWORD *)&v24[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v24[32];
      *(_OWORD *)(a1 + 24) = v9;
      unint64_t v10 = v8;
      if (v8)
      {
        unint64_t v11 = 0;
        int v12 = DWORD1(v9);
        uint64_t v13 = v7;
        do
        {
          if ((*(_DWORD *)v6 & 0x80000000) != 0)
          {
            unint64_t v14 = 0xBF58476D1CE4E5B9 * ((*(void *)(v6 + 8) >> 31) ^ (*(void *)(v6 + 8) >> 1));
            unint64_t v15 = (0x94D049BB133111EBLL * (v14 ^ (v14 >> 27))) ^ ((0x94D049BB133111EBLL * (v14 ^ (v14 >> 27))) >> 31);
            unint64_t v16 = *(unsigned int *)(a1 + 24);
            unint64_t v17 = v15 % v16;
            uint64_t v18 = *(unsigned int *)(a1 + 36);
            if (v18 == 0x7FFFFFFF)
            {
              uint64_t v18 = *(unsigned int *)(a1 + 32);
              int v19 = v18;
              if (v18 == v16)
              {
                re::HashTable<re::StringID,unsigned short,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1, (2 * v12));
                unint64_t v17 = v15 % *(unsigned int *)(a1 + 24);
                int v19 = *(_DWORD *)(a1 + 32);
                uint64_t v13 = *(void *)(a1 + 8);
              }
              *(_DWORD *)(a1 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = v19 + 1;
              uint64_t v20 = *(void *)(a1 + 16);
              int v21 = *(_DWORD *)(v20 + 32 * v18);
            }
            else
            {
              uint64_t v20 = *(void *)(a1 + 16);
              int v21 = *(_DWORD *)(v20 + 32 * v18);
              *(_DWORD *)(a1 + 36) = v21 & 0x7FFFFFFF;
            }
            uint64_t v22 = 32 * v18;
            *(_DWORD *)(v20 + v22) = v21 | 0x80000000;
            *(_DWORD *)(*(void *)(a1 + 16) + v22) = *(_DWORD *)(*(void *)(a1 + 16) + 32 * v18) & 0x80000000 | *(_DWORD *)(v13 + 4 * v17);
            re::StringID::StringID((re::StringID *)(*(void *)(a1 + 16) + 32 * v18 + 8), (const StringID *)(v6 + 8));
            *(_WORD *)(*(void *)(a1 + 16) + 32 * v18 + 24) = *(_WORD *)(v6 + 24);
            uint64_t v13 = *(void *)(a1 + 8);
            *(_DWORD *)(v13 + 4 * v17) = v18;
            int v12 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v12;
          }
          ++v11;
          v6 += 32;
        }
        while (v11 < v10);
      }
      re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v24);
    }
  }
  else
  {
    if (a2) {
      signed int v23 = a2;
    }
    else {
      signed int v23 = 3;
    }
  }
}

uint64_t re::anonymous namespace'::MeshAssetAccessor::modelIndexForInstance(re::_anonymous_namespace_::MeshAssetAccessor *this, unint64_t a2, unint64_t a3)
{
  if (a2 > a3) {
    return *((unsigned int *)this + 24 * a3 + 20);
  }
  re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, a3, a2);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::anonymous namespace'::MeshAssetAccessor::partCount(re::_anonymous_namespace_::MeshAssetAccessor *this, unint64_t a2)
{
  if (*((void *)this + 52) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(re::DataArray<re::MeshModel>::get(*((void *)this + 55) + 8, *(void *)(*((void *)this + 54) + 8 * a2))+ 56);
}

uint64_t re::anonymous namespace'::MeshAssetAccessor::skinnedPartCount(re::_anonymous_namespace_::MeshAssetAccessor *this, unint64_t a2)
{
  if (*((void *)this + 52) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v2 = *(void *)(re::DataArray<re::MeshModel>::get(*((void *)this + 55) + 8, *(void *)(*((void *)this + 54) + 8 * a2))+ 176);
  if (v2) {
    return *(void *)(v2 + 8);
  }
  else {
    return 0;
  }
}

uint64_t re::anonymous namespace'::MeshAssetAccessor::skeletonIndexForModelPart(re::_anonymous_namespace_::MeshAssetAccessor *this, unint64_t a2, unint64_t a3)
{
  if (*((void *)this + 52) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v4 = *(void *)(re::DataArray<re::MeshModel>::get(*((void *)this + 55) + 8, *(void *)(*((void *)this + 54) + 8 * a2))+ 176);
  if (v4 && *(void *)(v4 + 8) > a3) {
    return *(unsigned int *)(*(void *)(v4 + 16) + 72 * a3 + 4);
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t re::anonymous namespace'::MeshAssetAccessor::modelName(re::_anonymous_namespace_::MeshAssetAccessor *this, unint64_t a2)
{
  if (*((void *)this + 52) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v2 = *(void *)(*((void *)this + 54) + 8 * a2);
  uint64_t v3 = *((void *)this + 55) + 8;
  return re::DataArray<re::MeshModel>::get(v3, v2);
}

uint64_t re::anonymous namespace'::MeshAssetDataAccessor::partCount(re::_anonymous_namespace_::MeshAssetDataAccessor *this, unint64_t a2)
{
  if (*((void *)this + 2) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(*((void *)this + 4) + (a2 << 9) + 208);
}

uint64_t re::anonymous namespace'::MeshAssetDataAccessor::skinnedPartCount(re::_anonymous_namespace_::MeshAssetDataAccessor *this, unint64_t a2)
{
  if (*((void *)this + 2) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(*((void *)this + 4) + (a2 << 9) + 168);
}

uint64_t re::anonymous namespace'::MeshAssetDataAccessor::skeletonIndexForModelPart(re::_anonymous_namespace_::MeshAssetDataAccessor *this, unint64_t a2, unint64_t a3)
{
  if (*((void *)this + 2) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_5:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v3 = *((void *)this + 4) + (a2 << 9);
  if (*(void *)(v3 + 168) <= a3) {
    goto LABEL_5;
  }
  return *(unsigned int *)(*(void *)(v3 + 184) + 144 * a3);
}

unint64_t re::anonymous namespace'::MeshAssetDataAccessor::modelName(re::_anonymous_namespace_::MeshAssetDataAccessor *this, unint64_t a2)
{
  if (*((void *)this + 2) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *((void *)this + 4) + (a2 << 9);
}

re::ShaderManager *re::ShaderManager::ShaderManager(re::ShaderManager *this)
{
  *((_DWORD *)this + 8) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *(void *)((char *)this + 36) = 0x7FFFFFFFLL;
  *((_OWORD *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_DWORD *)this + 20) = 0;
  *(void *)((char *)this + 84) = 0x7FFFFFFFLL;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_DWORD *)this + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0;
  *(void *)((char *)this + 1re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0x7FFFFFFFLL;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_DWORD *)this + 44) = 0;
  *(void *)((char *)this + 180) = 0x7FFFFFFFLL;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = 0u;
  *((_DWORD *)this + 56) = 0;
  *(void *)((char *)this + 228) = 0x7FFFFFFFLL;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *((_DWORD *)this + 74) = 0;
  *((void *)this + 30) = 0;
  *((void *)this + 31) = 0;
  *(void *)((char *)this + 300) = 0x7FFFFFFFLL;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  *((_DWORD *)this + 86) = 0;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 2re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = 0u;
  *(_OWORD *)((char *)this + 380) = 0u;
  *(void *)((char *)this + 3re::DynamicArray<re::RigComponentConstraint>::deinit((uint64_t)this + 96) = 0x7FFFFFFFLL;
  *((_WORD *)this + 204) = 0;
  *((_DWORD *)this + 10re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = 0;
  *((unsigned char *)this + 416) = 0;
  re::makeDepthPixelFormatPredictions((uint64_t)this + 424);
  re::makeStencilPixelFormatPredictions((uint64_t)this + 472);
  re::makeSampleCountPredictions((uint64_t)this + 520);
  re::makePixel0FormatsPredictions((uint64_t)this + 568);
  re::makePixel1FormatsPredictions((uint64_t)this + 616);
  Pixel2FormatsPredictions = (re *)re::makePixel2FormatsPredictions((uint64_t)this + 664);
  *((unsigned char *)this + 712) = 0;
  *((_OWORD *)this + 45) = 0u;
  *((_OWORD *)this + 46) = 0u;
  *((void *)this + 94) = 850045863;
  *(_OWORD *)((char *)this + 760) = 0u;
  *(_OWORD *)((char *)this + 776) = 0u;
  *(_OWORD *)((char *)this + 792) = 0u;
  *((void *)this + 101) = 0;
  uint64_t v3 = re::globalAllocators(Pixel2FormatsPredictions);
  *((void *)this + 106) = v3[2];
  *((void *)this + 107) = 0;
  *((void *)this + 111) = re::globalAllocators((re *)v3)[2];
  *((void *)this + 112) = 0;
  return this;
}

void re::ShaderManager::~ShaderManager(re::ShaderManager *this)
{
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 83);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 77);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 71);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 65);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 59);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 53);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 45);
  re::DynamicArray<NS::SharedPtr<MTL::SamplerState>>::deinit((uint64_t)this + 320);
  re::HashTable<unsigned long,re::ShaderManager::LibraryEntry,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::deinit((uint64_t *)this + 33);

  re::HashTable<unsigned long,re::HashSet<unsigned short,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::deinit((uint64_t *)this + 24);
  re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit((uint64_t *)this + 18);
  re::HashTable<unsigned long,re::CachedTileRenderPipelineState,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::deinit((uint64_t *)this + 12);
  re::HashTable<unsigned long,re::CachedTileRenderPipelineState,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::deinit((uint64_t *)this + 6);
  re::HashTable<unsigned long,re::CachedTileRenderPipelineState,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::deinit((uint64_t *)this);
}

BOOL re::ShaderManager::init(re::ShaderManager *this, id *a2)
{
  uint64_t v3 = (void **)((char *)this + 240);
  re::ObjCObject::operator=((id *)this + 30, a2 + 23);
  uint64_t v54 = 0x100000001;
  int v55 = 0;
  uint64_t v56 = 0;
  re::dispatch::Queue::make("com.apple.re.specializedPSOCompiler", (int *)&v54, &v59);
  uint64_t v4 = (void **)((char *)this + 720);
  if ((NSObject **)((char *)this + 720) != &v59)
  {
    long long v5 = v59;
    int v59 = 0;
    uint64_t v6 = *v4;
    *uint64_t v4 = v5;
  }
  re::dispatch::Queue::global((re::dispatch::Queue *)0x21, 0, &v53);
  uint64_t v50 = 0x100000000;
  int v51 = 1;
  uint64_t v52 = &v53;
  re::dispatch::Queue::make("com.apple.re.fallbackPSOCompiler", (int *)&v50, &v59);
  long long v7 = (void **)((char *)this + 736);
  if ((NSObject **)((char *)this + 736) != &v59)
  {
    unsigned int v8 = v59;
    int v59 = 0;
    long long v9 = *v7;
    *long long v7 = v8;
  }
  uint64_t v47 = 0x100000000;
  int v48 = 0;
  uint64_t v49 = 0;
  re::dispatch::Queue::make("com.apple.re.fallbackPSOProducer", (int *)&v47, &v59);
  unint64_t v10 = (void **)((char *)this + 744);
  if ((NSObject **)((char *)this + 744) != &v59)
  {
    unint64_t v11 = v59;
    int v59 = 0;
    int v12 = *v10;
    *unint64_t v10 = v11;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF95F00, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF95F00))
  {
    re::Defaults::intValue((re::Defaults *)"compilationQueueWidth", v39, (uint64_t)&v59);
    if ((_BYTE)v59) {
      int v40 = HIDWORD(v59);
    }
    else {
      int v40 = 2;
    }
    _MergedGlobals_394 = v40;
    __cxa_guard_release(&qword_26AF95F00);
  }
  uint64_t v13 = dispatch_semaphore_create(_MergedGlobals_394);

  unint64_t v14 = (void *)*((void *)this + 91);
  *((void *)this + 91) = v13;

  re::Bundle::testData(v15, &v46);
  if (!v46)
  {
    re::Bundle::application(&v59);
    unint64_t v16 = v59;
    int v59 = 0;
    unint64_t v17 = v46;
    uint64_t v46 = v16;
  }
  re::Bundle::findFile((re::Bundle *)&v46, "default.metallib", (re::DynamicString *)&v42);
  if (v43) {
    uint64_t v18 = v45;
  }
  else {
    uint64_t v18 = (re::ns *)v44;
  }
  re::mtl::Device::makeLibraryWithFile(v3, v18, (re **)&v59);
  int v19 = (void **)((char *)this + 248);
  if ((NSObject **)((char *)this + 248) != &v59)
  {
    uint64_t v20 = v59;
    int v59 = 0;
    int v21 = *v19;
    *int v19 = v20;
  }
  re::Defaults::BOOLValue((re::Defaults *)"generateBinaryArchiveOnDevice", v22, (char *)&v59);
  if ((_BYTE)v59) {
    char v24 = BYTE1(v59);
  }
  else {
    char v24 = 0;
  }
  *((unsigned char *)this + 408) = v24;
  re::Defaults::BOOLValue((re::Defaults *)"disableBinaryArchives", v23, (char *)&v59);
  if ((_BYTE)v59) {
    char v26 = BYTE1(v59);
  }
  else {
    char v26 = 0;
  }
  *((unsigned char *)this + 409) = v26;
  re::Defaults::BOOLValue((re::Defaults *)"harvestAllPipelines", v25, (char *)&v59);
  if ((_BYTE)v59) {
    char v28 = BYTE1(v59);
  }
  else {
    char v28 = 0;
  }
  *((unsigned char *)this + 416) = v28;
  if (*((unsigned char *)this + 408)) {
    re::ShaderManager::makeAndAddBinaryArchive(this, 0, "testOnDeviceArchive");
  }
  re::Defaults::stringValue((re::Defaults *)"binaryArchiveInputPath", v27, (uint64_t)&v59);
  if ((_BYTE)v59)
  {
    if (v61) {
      uint64_t v29 = *(const char **)&v62[7];
    }
    else {
      uint64_t v29 = v62;
    }
    re::ShaderManager::makeAndAddBinaryArchive(this, v29, "testInputArchive");
  }
  re::Bundle::findFile((re::Bundle *)&v46, "default-binaryarchive.metallib", (re::DynamicString *)&v57);
  uint64_t v30 = v58[0] >> 1;
  if ((v58[0] & 1) == 0) {
    uint64_t v30 = LOBYTE(v58[0]) >> 1;
  }
  if (v30)
  {
    if (v58[0]) {
      uint64_t v31 = (const char *)v58[1];
    }
    else {
      uint64_t v31 = (char *)v58 + 1;
    }
    re::ShaderManager::makeAndAddBinaryArchive(this, v31, "default-binaryarchive.metallib");
  }
  if (v57 && (v58[0] & 1) != 0) {
    (*(void (**)(void))(*(void *)v57 + 40))();
  }
  if (_BYTE)v59 && v60 && (v61) {
    (*(void (**)(void))(*(void *)v60 + 40))();
  }
  atomic_store(0, (unsigned int *)this + 204);
  uint64_t v32 = *((void *)this + 31);
  if (v32)
  {
    if (v43) {
      uint64_t v33 = (const char *)v45;
    }
    else {
      uint64_t v33 = v44;
    }
    unint64_t LibraryHash = re::ShaderManager::getLibraryHash(this, v33);
    re::ShaderManager::installLibrary(this, LibraryHash, (id *)this + 31);
    if (v43) {
      __int16 v35 = (const char *)v45;
    }
    else {
      __int16 v35 = v44;
    }
    int v59 = re::ShaderManager::getLibraryHash(this, v35);
    uint64_t v36 = re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet((uint64_t)this + 264, (uint64_t *)&v59);
    uint64_t v37 = v59;
    if (!v36) {
      uint64_t v37 = 0;
    }
    *((void *)this + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = v37;
    id v41 = *((id *)this + 31);
    re::APIFunctionCache::init((uint64_t)this + 144, &v41);
  }
  if (v42 && (v43 & 1) != 0) {
    (*(void (**)(void))(*(void *)v42 + 40))();
  }

  return v32 != 0;
}

void re::ShaderManager::prepareForDeinit(re::ShaderManager *this)
{
  uint64_t v2 = (std::mutex *)((char *)this + 752);
  std::mutex::lock((std::mutex *)((char *)this + 752));
  atomic_store(1u, (unsigned __int8 *)this + 712);
  std::mutex::unlock(v2);
  uint64_t v3 = (unsigned int *)((char *)this + 816);
  int v4 = atomic_load(v3);
  if (v4 >= 1)
  {
    do
    {
      *(void *)&long long v5 = v3;
      *((void *)&v5 + 1) = v4 | 0x500000000;
      uint64_t v6 = v3;
      long long v7 = v5;
      std::__libcpp_thread_poll_with_backoff[abi:nn180100]<std::__cxx_atomic_wait_test_fn_impl<std::__cxx_atomic_impl<int,std::__cxx_atomic_base_impl<int>>,int> &,std::__libcpp_atomic_wait_backoff_impl<std::__cxx_atomic_impl<int,std::__cxx_atomic_base_impl<int>>,std::__cxx_atomic_wait_test_fn_impl<std::__cxx_atomic_impl<int,std::__cxx_atomic_base_impl<int>>,int>> &>((uint64_t)&v5, (uint64_t)&v6, 0);
      int v4 = atomic_load(v3);
    }
    while (v4 > 0);
  }
}

re *re::ShaderManager::deinit(re::ShaderManager *this, const char *a2)
{
  re::ShaderManager::serializeBinaryArchive(this, a2);
  uint64_t v3 = (void *)*((void *)this + 31);
  *((void *)this + 31) = 0;

  re::HashTable<unsigned long,re::ShaderManager::LibraryEntry,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::clear((uint64_t)this + 264);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 71);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 77);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 53);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 59);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 65);
  return re::APIFunctionCache::deinit((re::ShaderManager *)((char *)this + 144));
}

void re::ShaderManager::serializeBinaryArchive(re::ShaderManager *this, const char *a2)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  if (!*((unsigned char *)this + 408)) {
    return;
  }
  re::Defaults::stringValue((re::Defaults *)"binaryArchiveOutputPath", a2, (uint64_t)v10);
  if (v10[0])
  {
    if (v12) {
      int v4 = *(unsigned char **)&v13[7];
    }
    else {
      int v4 = v13;
    }
    id v5 = objc_msgSend(NSString, sel_stringWithCString_encoding_, v4, 4);
    id v6 = objc_msgSend(NSURL, sel_fileURLWithPath_, v5);
    if (!*((void *)this + 42))
    {
      uint64_t v14 = 0;
      long long v26 = 0u;
      long long v27 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      *(_OWORD *)buf = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v15 = 136315906;
      unint64_t v16 = "operator[]";
      __int16 v17 = 1024;
      int v18 = 789;
      __int16 v19 = 2048;
      uint64_t v20 = 0;
      __int16 v21 = 2048;
      uint64_t v22 = 0;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    long long v7 = (re *)objc_msgSend(**((id **)this + 44), sel_serializeToURL_error_, v6, 0);
    if (!v7) {
      goto LABEL_13;
    }
    unsigned int v8 = *re::graphicsLogObjects(v7);
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_13;
    }
    *(_WORD *)buf = 0;
    long long v9 = "Binary archive serialization successful!";
    goto LABEL_12;
  }
  unsigned int v8 = *re::graphicsLogObjects(v3);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    long long v9 = "Generated binary archive on device, but no output URL was provided.";
LABEL_12:
    _os_log_impl(&dword_233120000, v8, OS_LOG_TYPE_DEFAULT, v9, buf, 2u);
  }
LABEL_13:
  if (v10[0] && v11 && (v12 & 1) != 0) {
    (*(void (**)(void))(*(void *)v11 + 40))();
  }
}

void re::HashTable<unsigned long,re::ShaderManager::LibraryEntry,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::clear(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 28))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 24);
    if (v2) {
      memset_pattern16(*(void **)(a1 + 8), &memset_pattern_64, 4 * v2);
    }
    unint64_t v3 = *(unsigned int *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = 0;
      for (unint64_t i = 0; i < v3; ++i)
      {
        uint64_t v6 = *(void *)(a1 + 16) + v4;
        int v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;

          unint64_t v3 = *(unsigned int *)(a1 + 32);
        }
        v4 += 40;
      }
    }
    *(_DWORD *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0;
    int v8 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v8;
  }
}

BOOL re::ShaderManager::makeAndAddBinaryArchive(re::ShaderManager *this, const char *a2, const char *a3)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  uint64_t v6 = (os_unfair_lock_s *)((char *)this + 412);
  os_unfair_lock_lock((os_unfair_lock_t)this + 103);
  if (a2 && (size_t v7 = strlen(a2)) != 0)
  {
    MurmurHash3_x64_128((uint64_t)a2, v7, 0, (unint64_t *)&buf);
    unint64_t v8 = (*((void *)&buf + 1) + ((void)buf << 6) + ((unint64_t)buf >> 2) - 0x61C8864680B583E9) ^ buf;
  }
  else
  {
    unint64_t v8 = 0;
  }
  unint64_t v26 = v8;
  if (re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::contains((uint64_t)this + 360, (uint64_t *)&v26))
  {
    BOOL v9 = 1;
  }
  else
  {
    id v10 = objc_msgSend(objc_msgSend(MEMORY[0x263F127D0], sel_alloc), sel_init);
    id v25 = v10;
    objc_msgSend(v10, sel_setOptions_, 6);
    if (a2)
    {
      id v11 = objc_msgSend(NSString, sel_stringWithCString_encoding_, a2, 4);
      objc_msgSend(v10, sel_setUrl_, objc_msgSend(NSURL, sel_fileURLWithPath_, v11));
    }
    re::mtl::Device::makeBinaryArchive((id *)this + 30, &v25, &v24);
    BOOL v9 = v24 != 0;
    if (v24)
    {
      if (a3) {
        char v12 = (_anonymous_namespace_ *)objc_msgSend(v24, sel_setLabel_, objc_msgSend(NSString, sel_stringWithCString_encoding_, a3, 4));
      }
      unint64_t v13 = *((void *)this + 41);
      unint64_t v14 = *((void *)this + 42);
      if (v14 >= v13)
      {
        unint64_t v15 = v14 + 1;
        if (v13 < v15)
        {
          if (*((void *)this + 40))
          {
            uint64_t v16 = 2 * v13;
            BOOL v17 = v13 == 0;
            unint64_t v18 = 8;
            if (!v17) {
              unint64_t v18 = v16;
            }
            if (v18 <= v15) {
              unint64_t v19 = v15;
            }
            else {
              unint64_t v19 = v18;
            }
            re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::setCapacity((void *)this + 40, v19);
          }
          else
          {
            re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::setCapacity((void *)this + 40, v15);
            ++*((_DWORD *)this + 86);
          }
        }
        unint64_t v14 = *((void *)this + 42);
      }
      uint64_t v20 = *((void *)this + 44);
      *(void *)(v20 + 8 * v14) = v24;
      ++*((void *)this + 42);
      ++*((_DWORD *)this + 86);
      __int16 v21 = (re *)re::HashSetBase<unsigned long,unsigned long,re::internal::ValueAsKey<unsigned long>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add((uint64_t)this + 360, (uint64_t *)&v26);
      uint64_t v22 = *re::graphicsLogObjects(v21);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = a2;
        _os_log_impl(&dword_233120000, v22, OS_LOG_TYPE_DEFAULT, "MTLBinaryArchive loaded from %s", (uint8_t *)&buf, 0xCu);
      }
      if (v24) {
    }
      }
    if (v25) {
  }
    }
  os_unfair_lock_unlock(v6);
  return v9;
}

void re::ShaderManager::makeLibraryWithFile(void **this, const char *a2, re::ns *a3, const char *a4)
{
  re::mtl::Device::makeLibraryWithFile(this + 30, a3, &v7);
  unint64_t LibraryHash = re::ShaderManager::getLibraryHash((re::ShaderManager *)this, a2);
  re::ShaderManager::installLibrary((re::ShaderManager *)this, LibraryHash, (id *)&v7);
}

unint64_t re::ShaderManager::getLibraryHash(re::ShaderManager *this, const char *__s)
{
  void (***v3)(unint64_t *__return_ptr);
  const char *v4;
  size_t v5;
  unint64_t v6;
  size_t v7;
  unint64_t v9;
  uint64_t v10;
  char v11;
  unsigned char v12[23];
  unint64_t v13[3];

  uint64_t v13[2] = *MEMORY[0x263EF8340];
  if (!__s) {
    return *((void *)this + 32);
  }
  unint64_t v3 = (void (***)(unint64_t *__return_ptr))*((void *)this + 39);
  if (v3 && ((**v3)(&v9), (_BYTE)v9))
  {
    if (v11) {
      uint64_t v4 = *(const char **)&v12[7];
    }
    else {
      uint64_t v4 = v12;
    }
    id v5 = strlen(v4);
    if (v5)
    {
      MurmurHash3_x64_128((uint64_t)v4, v5, 0, v13);
      uint64_t v6 = (v13[1] + (v13[0] << 6) + (v13[0] >> 2) - 0x61C8864680B583E9) ^ v13[0];
      if (!(_BYTE)v9) {
        return v6;
      }
    }
    else
    {
      uint64_t v6 = 0;
    }
    if (v10 && (v11 & 1) != 0) {
      (*(void (**)(void))(*(void *)v10 + 40))();
    }
  }
  else
  {
    size_t v7 = strlen(__s);
    if (v7)
    {
      MurmurHash3_x64_128((uint64_t)__s, v7, 0, &v9);
      return (v10 + (v9 << 6) + (v9 >> 2) - 0x61C8864680B583E9) ^ v9;
    }
    else
    {
      return 0;
    }
  }
  return v6;
}

uint64_t re::ShaderManager::releaseLibrary(uint64_t this, uint64_t a2)
{
  if (*(void *)(this + 256) != a2)
  {
    uint64_t v3 = this + 264;
    uint64_t v5 = a2;
    this = re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(this + 264, &v5);
    if (this)
    {
      if (!*(_DWORD *)this || (int v4 = *(_DWORD *)this - 1, (*(_DWORD *)this = v4) == 0))
      {
        uint64_t v5 = a2;
        return re::HashTable<unsigned long,re::ShaderManager::LibraryEntry,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::remove(v3, &v5);
      }
    }
  }
  return this;
}

uint64_t re::HashTable<unsigned long,re::ShaderManager::LibraryEntry,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::remove(uint64_t a1, uint64_t *a2)
{
  if (!*(void *)a1) {
    return 0;
  }
  uint64_t v3 = *a2;
  unint64_t v4 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  unint64_t v5 = ((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) ^ ((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) >> 31))
     % *(unsigned int *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(unsigned int *)(v6 + 4 * v5);
  if (v7 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v9 = *(void *)(a1 + 16);
  if (*(void *)(v9 + 40 * v7 + 16) != v3)
  {
    while (1)
    {
      unsigned int v10 = v7;
      int v11 = *(_DWORD *)(v9 + 40 * v7 + 8);
      uint64_t v7 = v11 & 0x7FFFFFFF;
      if ((v11 & 0x7FFFFFFF) == 0x7FFFFFFF) {
        return 0;
      }
      if (*(void *)(v9 + 40 * v7 + 16) == v3)
      {
        *(_DWORD *)(v9 + 40 * v10 + 8) = *(_DWORD *)(v9 + 40 * v10 + 8) & 0x80000000 | *(_DWORD *)(v9 + 40 * v7 + 8) & 0x7FFFFFFF;
        goto LABEL_9;
      }
    }
  }
  *(_DWORD *)(v6 + 4 * v5) = *(_DWORD *)(v9 + 40 * v7 + 8) & 0x7FFFFFFF;
LABEL_9:
  uint64_t v12 = *(void *)(a1 + 16);
  uint64_t v13 = v12 + 40 * v7;
  int v16 = *(_DWORD *)(v13 + 8);
  unint64_t v15 = (int *)(v13 + 8);
  int v14 = v16;
  if (v16 < 0)
  {
    *unint64_t v15 = v14 & 0x7FFFFFFF;

    uint64_t v12 = *(void *)(a1 + 16);
    int v14 = *(_DWORD *)(v12 + 40 * v7 + 8);
  }
  int v17 = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(v12 + 40 * v7 + 8) = *(_DWORD *)(a1 + 36) | v14 & 0x80000000;
  --*(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 36) = v7;
  *(_DWORD *)(a1 + 40) = v17 + 1;
  return 1;
}

void re::ShaderManager::makeFunction(uint64_t *a1@<X0>, uint64_t a2@<X1>, re::ns *a3@<X2>, void *a4@<X3>, void *a5@<X8>)
{
  uint64_t v12 = a2;
  uint64_t v9 = re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet((uint64_t)(a1 + 33), &v12);
  if (v9)
  {
    if (a4)
    {
      re::ShaderManager::makeFunctionDescriptor((re::ShaderManager *)a1, &v11);
      unsigned int v10 = v11;
      objc_msgSend(v11, sel_setName_, objc_msgSend(NSString, sel_stringWithCString_encoding_, a3, 4));
      objc_msgSend(v10, sel_setConstantValues_, *a4);
      re::ShaderManager::makeFunctionWithDescriptor((uint64_t)a1, a1[32], &v11, a5);
      if (v10) {
    }
      }
    else
    {
      re::mtl::Library::makeFunction((void **)(v9 + 8), a3, a5);
    }
  }
  else
  {
    *a5 = 0;
  }
}

void re::ShaderManager::makeFunctionDescriptor(re::ShaderManager *this@<X0>, void *a2@<X8>)
{
  id v4 = objc_msgSend(objc_msgSend(MEMORY[0x263F128B8], sel_alloc), sel_init);
  *a2 = v4;
  id v5 = v4;
  id v6 = v5;
  re::ShaderManager::addBinaryArchivesToFunction((uint64_t)this, &v6, 0);
  if (v5)
  {
  }
}

void re::ShaderManager::makeFunctionWithDescriptor(uint64_t a1@<X0>, uint64_t a2@<X1>, void **a3@<X2>, void *a4@<X8>)
{
  if (a2)
  {
    uint64_t v9 = a2;
    uint64_t v6 = re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(a1 + 264, &v9);
    if (v6) {
      re::mtl::Library::makeFunctionWithDescriptor((id *)(v6 + 8), *a3, a4);
    }
    else {
      *a4 = 0;
    }
  }
  else
  {
    uint64_t v7 = (id *)(a1 + 248);
    unint64_t v8 = *a3;
    re::mtl::Library::makeFunctionWithDescriptor(v7, v8, a4);
  }
}

uint64_t (***re::ShaderManager::scheduleAsyncFuncOnCompilationQueue(uint64_t a1, int a2, uint64_t a3, uint64_t a4))(void)
{
  v21[6] = *MEMORY[0x263EF8340];
  uint64_t v13 = *(void *)(a4 + 24);
  uint64_t v14 = 0;
  re::FunctionBase<24ul,void ()(void)>::operator=<24ul>((uint64_t)v12, a4);
  std::mutex::lock((std::mutex *)(a1 + 752));
  unsigned __int8 v7 = atomic_load((unsigned __int8 *)(a1 + 712));
  if ((v7 & 1) == 0)
  {
    atomic_fetch_add((atomic_uint *volatile)(a1 + 816), 1u);
    if (a2)
    {
      unint64_t v8 = (dispatch_queue_t *)(a1 + 744);
      uint64_t v15 = MEMORY[0x263EF8330];
      uint64_t v16 = 1174405120;
      uint64_t v9 = ___ZNK2re13ShaderManager29resolveShaderCompilationQueueIZNKS0_35scheduleAsyncFuncOnCompilationQueueEbyNS_8FunctionIFvvEEEE3__0EEvbyS4_T__block_invoke;
      unsigned int v10 = &__block_descriptor_tmp_38;
    }
    else
    {
      unint64_t v8 = (dispatch_queue_t *)(a1 + 720);
      uint64_t v15 = MEMORY[0x263EF8330];
      uint64_t v16 = 1174405120;
      uint64_t v9 = ___ZNK2re13ShaderManager29resolveShaderCompilationQueueIZNKS0_35scheduleAsyncFuncOnCompilationQueueEbyNS_8FunctionIFvvEEEE3__0EEvbyS4_T__block_invoke_39;
      unsigned int v10 = &__block_descriptor_tmp_42_0;
    }
    int v17 = v9;
    unint64_t v18 = v10;
    uint64_t v19 = a1;
    uint64_t v20 = a3;
    void v21[3] = v13;
    v21[4] = 0;
    re::FunctionBase<24ul,void ()(void)>::operator=<24ul>((uint64_t)v21, (uint64_t)v12);
    dispatch_async(*v8, &v15);
    re::FunctionBase<24ul,void ()(void)>::destroyCallable((uint64_t)v21);
  }
  std::mutex::unlock((std::mutex *)(a1 + 752));
  return re::FunctionBase<24ul,void ()(void)>::destroyCallable((uint64_t)v12);
}

uint64_t (***re::ShaderManager::scheduleGroupNotifyOnCompilationQueue(uint64_t a1, int a2, void *a3, id *a4, uint64_t a5))(void)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  uint64_t v17 = *(void *)(a5 + 24);
  uint64_t v18 = 0;
  re::FunctionBase<24ul,void ()(void)>::operator=<24ul>((uint64_t)v16, a5);
  id v14 = *a4;
  uint64_t v9 = (std::mutex *)(a1 + 752);
  std::mutex::lock((std::mutex *)(a1 + 752));
  unsigned __int8 v10 = atomic_load((unsigned __int8 *)(a1 + 712));
  if ((v10 & 1) == 0)
  {
    atomic_fetch_add((atomic_uint *volatile)(a1 + 816), 1u);
    v19[0] = MEMORY[0x263EF8330];
    v19[1] = 1174405120;
    if (a2)
    {
      uint64_t v20 = ___ZNK2re13ShaderManager29resolveShaderCompilationQueueIZNKS0_37scheduleGroupNotifyOnCompilationQueueEbyNS_8dispatch5GroupENS_8FunctionIFvvEEEE3__0EEvbyS6_T__block_invoke;
      __int16 v21 = &__block_descriptor_tmp_46;
      uint64_t v22 = a1;
      id v23 = v14;
      id v24 = a3;
      uint64_t v26 = v17;
      uint64_t v27 = 0;
      re::FunctionBase<24ul,void ()(void)>::operator=<24ul>((uint64_t)v25, (uint64_t)v16);
      int v11 = *(id *)(a1 + 744);
      uint64_t v15 = v11;
      re::dispatch::Group::notify(&v14, &v15, v19);

      re::FunctionBase<24ul,void ()(void)>::destroyCallable((uint64_t)v25);
    }
    else
    {
      uint64_t v20 = ___ZNK2re13ShaderManager29resolveShaderCompilationQueueIZNKS0_37scheduleGroupNotifyOnCompilationQueueEbyNS_8dispatch5GroupENS_8FunctionIFvvEEEE3__0EEvbyS6_T__block_invoke_47;
      __int16 v21 = &__block_descriptor_tmp_50_0;
      uint64_t v22 = a1;
      id v23 = a3;
      v25[2] = v17;
      uint64_t v26 = 0;
      re::FunctionBase<24ul,void ()(void)>::operator=<24ul>((uint64_t)&v24, (uint64_t)v16);
      uint64_t v12 = *(id *)(a1 + 720);
      uint64_t v15 = v12;
      re::dispatch::Group::notify(&v14, &v15, v19);

      re::FunctionBase<24ul,void ()(void)>::destroyCallable((uint64_t)&v24);
    }
  }
  std::mutex::unlock(v9);

  return re::FunctionBase<24ul,void ()(void)>::destroyCallable((uint64_t)v16);
}

uint64_t (***re::ShaderManager::scheduleAsyncGroupFuncOnCompilationQueue(uint64_t a1, int a2, void *a3, id *a4, uint64_t a5))(void)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  uint64_t v17 = *(void *)(a5 + 24);
  uint64_t v18 = 0;
  re::FunctionBase<24ul,void ()(void)>::operator=<24ul>((uint64_t)v16, a5);
  id v14 = *a4;
  uint64_t v9 = (std::mutex *)(a1 + 752);
  std::mutex::lock((std::mutex *)(a1 + 752));
  unsigned __int8 v10 = atomic_load((unsigned __int8 *)(a1 + 712));
  if ((v10 & 1) == 0)
  {
    atomic_fetch_add((atomic_uint *volatile)(a1 + 816), 1u);
    v19[0] = MEMORY[0x263EF8330];
    v19[1] = 1174405120;
    if (a2)
    {
      uint64_t v20 = ___ZNK2re13ShaderManager29resolveShaderCompilationQueueIZNKS0_40scheduleAsyncGroupFuncOnCompilationQueueEbyNS_8dispatch5GroupENS_8FunctionIFvvEEEE3__0EEvbyS6_T__block_invoke;
      __int16 v21 = &__block_descriptor_tmp_54_0;
      uint64_t v22 = a1;
      id v23 = v14;
      id v24 = a3;
      uint64_t v26 = v17;
      uint64_t v27 = 0;
      re::FunctionBase<24ul,void ()(void)>::operator=<24ul>((uint64_t)v25, (uint64_t)v16);
      int v11 = *(id *)(a1 + 744);
      uint64_t v15 = v11;
      re::dispatch::Group::async(&v14, &v15, v19);

      re::FunctionBase<24ul,void ()(void)>::destroyCallable((uint64_t)v25);
    }
    else
    {
      uint64_t v20 = ___ZNK2re13ShaderManager29resolveShaderCompilationQueueIZNKS0_40scheduleAsyncGroupFuncOnCompilationQueueEbyNS_8dispatch5GroupENS_8FunctionIFvvEEEE3__0EEvbyS6_T__block_invoke_55;
      __int16 v21 = &__block_descriptor_tmp_58_1;
      uint64_t v22 = a1;
      id v23 = a3;
      v25[2] = v17;
      uint64_t v26 = 0;
      re::FunctionBase<24ul,void ()(void)>::operator=<24ul>((uint64_t)&v24, (uint64_t)v16);
      uint64_t v12 = *(id *)(a1 + 720);
      uint64_t v15 = v12;
      re::dispatch::Group::async(&v14, &v15, v19);

      re::FunctionBase<24ul,void ()(void)>::destroyCallable((uint64_t)&v24);
    }
  }
  std::mutex::unlock(v9);

  return re::FunctionBase<24ul,void ()(void)>::destroyCallable((uint64_t)v16);
}

uint64_t re::ShaderManager::executeWithPrioritizedShaderCompilation(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 856);
  if (v2) {
    return (*(uint64_t (**)(void))(*(void *)v2 + 16))();
  }
  else {
    return (*(uint64_t (**)(void))(**(void **)(a2 + 32) + 16))();
  }
}

uint64_t re::ShaderManager::executeWithShaderCompilationBlamedToPeer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 && a2)
  {
    uint64_t v5 = a2;
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 16))(a1, &v5);
  }
  else
  {
    id v4 = *(uint64_t (**)(void))(**(void **)(a3 + 32) + 16);
    return v4();
  }
}

uint64_t re::ShaderManager::tryRequestFunctionReflection(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, int a5, uint64_t a6, uint64_t a7)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  v20[0] = a2;
  uint64_t v14 = re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(a1 + 264, v20);
  if (v14) {
    uint64_t v15 = (id *)(v14 + 8);
  }
  else {
    uint64_t v15 = (id *)(a1 + 248);
  }
  uint64_t v30 = *(void *)(a7 + 24);
  uint64_t v31 = 0;
  re::FunctionBase<24ul,void ()(re::Pair<NS::SharedPtr<MTL::Function>,re::DynamicArray<NS::SharedPtr<MTL::Argument>>,true> const&)>::operator=<24ul>((uint64_t)v29, a7);
  uint64_t v32 = a1;
  re::ShaderManager::makeFunctionDescriptor(a1, a3, a4, v15, a2, &v19);
  v20[3] = v30;
  void v20[4] = 0;
  re::FunctionBase<24ul,void ()(re::Pair<NS::SharedPtr<MTL::Function>,re::DynamicArray<NS::SharedPtr<MTL::Argument>>,true> const&)>::operator=<24ul>((uint64_t)v20, (uint64_t)v29);
  v20[5] = v32;
  id v16 = v19;
  id v21 = v19;
  uint64_t v22 = a3;
  char v23 = a5;
  uint64_t v24 = a6;
  id v25 = (re *)*v15;
  uint64_t v17 = re::globalAllocators(v25)[2];
  uint64_t v27 = v17;
  if (v17) {
    uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v17 + 32))(v17, 96, 0);
  }
  uint64_t v28 = re::internal::Callable<re::ShaderManager::tryRequestFunctionReflection(unsigned long long,char const*,NS::SharedPtr<MTL::FunctionConstantValues> const&,BOOL,unsigned long long,re::Function<void ()(re::Pair<NS::SharedPtr<MTL::Function>,re::DynamicArray<NS::SharedPtr<MTL::Argument>>,true> const&)>)::$_0,void ()(void)>::Callable(v17, (uint64_t)v20);
  re::ShaderManager::scheduleAsyncFuncOnCompilationQueue(a1, a5, a6, (uint64_t)v26);
  re::FunctionBase<24ul,void ()(void)>::destroyCallable((uint64_t)v26);

  if (v21)
  {

    id v21 = 0;
  }
  re::FunctionBase<24ul,void ()(re::Pair<NS::SharedPtr<MTL::Function>,re::DynamicArray<NS::SharedPtr<MTL::Argument>>,true> const&)>::destroyCallable((uint64_t)v20);
  if (v16) {

  }
  re::FunctionBase<24ul,void ()(re::Pair<NS::SharedPtr<MTL::Function>,re::DynamicArray<NS::SharedPtr<MTL::Argument>>,true> const&)>::destroyCallable((uint64_t)v29);
  return 1;
}

void re::ShaderManager::makeFunctionDescriptor(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  id v12 = objc_msgSend(objc_msgSend(MEMORY[0x263F128B8], sel_alloc), sel_init);
  *a6 = v12;
  objc_msgSend(v12, sel_setName_, objc_msgSend(NSString, sel_stringWithCString_encoding_, a2, 4));
  if (*a3) {
    objc_msgSend(v12, sel_setConstantValues_);
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 412));
  if (*(void *)(a1 + 336) && !*(unsigned char *)(a1 + 409))
  {
    id v13 = objc_msgSend(objc_msgSend(MEMORY[0x263EFF8C0], sel_alloc), sel_initWithObjects_count_, *(void *)(a1 + 352), *(void *)(a1 + 336));
    objc_msgSend(v12, sel_setBinaryArchives_, v13);
    if (*(unsigned char *)(a1 + 408) && (*(void *)(a1 + 256) == a5 || *(unsigned char *)(a1 + 416)))
    {
      if (!*(void *)(a1 + 336))
      {
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      objc_msgSend(**(id **)(a1 + 352), sel_addFunctionWithDescriptor_library_error_, v12, *a4, 0);
    }
    if (v13) {
  }
    }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 412));
}

void re::ShaderManager::makeFunctionDescriptor(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X8>)
{
}

void re::ShaderManager::addBinaryArchivesToRenderPipeline(uint64_t a1, id *a2, uint64_t a3)
{
  uint64_t v6 = (os_unfair_lock_s *)(a1 + 412);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 412));
  if (*(void *)(a1 + 336) && !*(unsigned char *)(a1 + 409))
  {
    id v7 = objc_msgSend(objc_msgSend(MEMORY[0x263EFF8C0], sel_alloc), sel_initWithObjects_count_, *(void *)(a1 + 352), *(void *)(a1 + 336));
    objc_msgSend(*a2, sel_setBinaryArchives_, v7);
    if (*(unsigned char *)(a1 + 408) && (*(void *)(a1 + 256) == a3 || *(unsigned char *)(a1 + 416)))
    {
      if (!*(void *)(a1 + 336))
      {
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      objc_msgSend(**(id **)(a1 + 352), sel_addRenderPipelineFunctionsWithDescriptor_error_, *a2, 0);
    }
    if (v7) {
  }
    }
  os_unfair_lock_unlock(v6);
}

void re::ShaderManager::addBinaryArchivesToTilePipeline(uint64_t a1, id *a2, uint64_t a3)
{
  uint64_t v6 = (os_unfair_lock_s *)(a1 + 412);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 412));
  if (*(void *)(a1 + 336) && !*(unsigned char *)(a1 + 409))
  {
    id v7 = objc_msgSend(objc_msgSend(MEMORY[0x263EFF8C0], sel_alloc), sel_initWithObjects_count_, *(void *)(a1 + 352), *(void *)(a1 + 336));
    objc_msgSend(*a2, sel_setBinaryArchives_, v7);
    if (*(unsigned char *)(a1 + 408) && (*(void *)(a1 + 256) == a3 || *(unsigned char *)(a1 + 416)))
    {
      if (!*(void *)(a1 + 336))
      {
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      objc_msgSend(**(id **)(a1 + 352), sel_addTileRenderPipelineFunctionsWithDescriptor_error_, *a2, 0);
    }
    if (v7) {
  }
    }
  os_unfair_lock_unlock(v6);
}

void re::ShaderManager::addBinaryArchivesToComputePipeline(uint64_t a1, id *a2, uint64_t a3)
{
  uint64_t v6 = (os_unfair_lock_s *)(a1 + 412);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 412));
  if (*(void *)(a1 + 336) && !*(unsigned char *)(a1 + 409))
  {
    id v7 = objc_msgSend(objc_msgSend(MEMORY[0x263EFF8C0], sel_alloc), sel_initWithObjects_count_, *(void *)(a1 + 352), *(void *)(a1 + 336));
    objc_msgSend(*a2, sel_setBinaryArchives_, v7);
    if (*(unsigned char *)(a1 + 408) && (*(void *)(a1 + 256) == a3 || *(unsigned char *)(a1 + 416)))
    {
      if (!*(void *)(a1 + 336))
      {
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      objc_msgSend(**(id **)(a1 + 352), sel_addComputePipelineFunctionsWithDescriptor_error_, *a2, 0);
    }
    if (v7) {
  }
    }
  os_unfair_lock_unlock(v6);
}

void re::ShaderManager::addBinaryArchivesToFunction(uint64_t a1, id *a2, uint64_t a3)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t v6 = (os_unfair_lock_s *)(a1 + 412);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 412));
  if (*(void *)(a1 + 336) && !*(unsigned char *)(a1 + 409))
  {
    id v7 = objc_msgSend(objc_msgSend(MEMORY[0x263EFF8C0], sel_alloc), sel_initWithObjects_count_, *(void *)(a1 + 352), *(void *)(a1 + 336));
    objc_msgSend(*a2, sel_setBinaryArchives_, v7);
    if (*(unsigned char *)(a1 + 408) && (*(void *)(a1 + 256) == a3 || *(unsigned char *)(a1 + 416)))
    {
      *(void *)&v9[0] = a3;
      uint64_t v8 = re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(a1 + 264, (uint64_t *)v9);
      if (v8)
      {
        if (!*(void *)(a1 + 336))
        {
          memset(v9, 0, sizeof(v9));
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        objc_msgSend(**(id **)(a1 + 352), sel_addFunctionWithDescriptor_library_error_, *a2, *(void *)(v8 + 8), 0);
      }
    }
    if (v7) {
  }
    }
  os_unfair_lock_unlock(v6);
}

void re::ShaderManager::installLibrary(re::ShaderManager *this, unint64_t a2, id *a3)
{
  uint64_t v6 = (void *)((char *)this + 264);
  unint64_t v19 = a2;
  id v7 = (re *)re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet((uint64_t)this + 264, (uint64_t *)&v19);
  if (v7)
  {
    unint64_t v19 = a2;
    id v7 = (re *)re::HashTable<unsigned long,re::ShaderManager::LibraryEntry,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::remove((uint64_t)v6, (uint64_t *)&v19);
  }
  if (*a3)
  {
    LODWORD(v19) = 0;
    id v20 = 0;
    re::ObjCObject::operator=(&v20, a3);
    LODWORD(v19) = v19 + 1;
    unint64_t v8 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
    unint64_t v9 = v8 ^ (v8 >> 31);
    if (*v6)
    {
      unint64_t v10 = v9 % *((unsigned int *)this + 72);
      uint64_t v11 = *(unsigned int *)(*((void *)this + 34) + 4 * v10);
      if (v11 != 0x7FFFFFFF)
      {
        uint64_t v12 = *((void *)this + 35);
        if (*(void *)(v12 + 40 * v11 + 16) == a2)
        {
LABEL_19:

          return;
        }
        while (1)
        {
          LODWORD(v11) = *(_DWORD *)(v12 + 40 * v11 + 8) & 0x7FFFFFFF;
          if (v11 == 0x7FFFFFFF) {
            break;
          }
          if (*(void *)(v12 + 40 * v11 + 16) == a2) {
            goto LABEL_19;
          }
        }
      }
    }
    else
    {
      LODWORD(v10) = 0;
    }
    uint64_t v14 = *((unsigned int *)this + 75);
    if (v14 == 0x7FFFFFFF)
    {
      uint64_t v14 = *((unsigned int *)this + 74);
      int v15 = v14;
      if (v14 == *((_DWORD *)this + 72))
      {
        re::HashTable<unsigned long,re::ShaderManager::LibraryEntry,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::setCapacity((uint64_t)v6, 2 * *((_DWORD *)this + 73));
        LODWORD(v10) = v9 % *((unsigned int *)this + 72);
        int v15 = *((_DWORD *)this + 74);
      }
      *((_DWORD *)this + 74) = v15 + 1;
      uint64_t v16 = *((void *)this + 35);
      int v17 = *(_DWORD *)(v16 + 40 * v14 + 8);
    }
    else
    {
      uint64_t v16 = *((void *)this + 35);
      int v17 = *(_DWORD *)(v16 + 40 * v14 + 8);
      *((_DWORD *)this + 75) = v17 & 0x7FFFFFFF;
    }
    *(_DWORD *)(v16 + 40 * v14 + 8) = v17 | 0x80000000;
    *(_DWORD *)(*((void *)this + 35) + 40 * v14 + 8) = *(_DWORD *)(*((void *)this + 35) + 40 * v14 + 8) & 0x80000000 | *(_DWORD *)(*((void *)this + 34) + 4 * v10);
    *(void *)(*((void *)this + 35) + 40 * v14) = v9;
    *(void *)(*((void *)this + 35) + 40 * v14 + 16) = a2;
    uint64_t v18 = *((void *)this + 35) + 40 * v14;
    *(_DWORD *)(v18 + 24) = v19;
    *(void *)(v18 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = v20;
    *(_DWORD *)(*((void *)this + 34) + 4 * v10) = v14;
    ++*((_DWORD *)this + 73);
    ++*((_DWORD *)this + 76);
    goto LABEL_19;
  }
  id v13 = *re::graphicsLogObjects(v7);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
  {
    LOWORD(v19) = 0;
    _os_log_error_impl(&dword_233120000, v13, OS_LOG_TYPE_ERROR, "Cannot install a NULL library.", (uint8_t *)&v19, 2u);
  }
}

void re::ShaderManager::makeRenderPipelineDescriptor(re::ShaderManager *this@<X0>, void *a2@<X8>)
{
  id v4 = objc_msgSend(objc_msgSend(MEMORY[0x263F129C0], sel_alloc), sel_init);
  *a2 = v4;
  id v5 = v4;
  id v6 = v5;
  re::ShaderManager::addBinaryArchivesToRenderPipeline((uint64_t)this, &v6, 0);
  if (v5)
  {
  }
}

void re::ShaderManager::makeComputePipelineDescriptor(re::ShaderManager *this@<X0>, void *a2@<X8>)
{
  id v4 = objc_msgSend(objc_msgSend(MEMORY[0x263F12850], sel_alloc), sel_init);
  *a2 = v4;
  id v5 = v4;
  id v6 = v5;
  re::ShaderManager::addBinaryArchivesToComputePipeline((uint64_t)this, &v6, 0);
  if (v5)
  {
  }
}

void re::ShaderManager::makeTileRenderPipelineDescriptor(re::ShaderManager *this@<X0>, void *a2@<X8>)
{
  id v4 = objc_msgSend(objc_msgSend(MEMORY[0x263F12A70], sel_alloc), sel_init);
  *a2 = v4;
  id v5 = v4;
  id v6 = v5;
  re::ShaderManager::addBinaryArchivesToTilePipeline((uint64_t)this, &v6, 0);
  if (v5)
  {
  }
}

double re::HashTable<unsigned long,re::HashSet<unsigned short,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    unint64_t v3 = *((unsigned int *)a1 + 8);
    if (v3)
    {
      uint64_t v4 = 0;
      for (unint64_t i = 0; i < v3; ++i)
      {
        uint64_t v6 = a1[2];
        int v7 = *(_DWORD *)(v6 + v4);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + v4) = v7 & 0x7FFFFFFF;
          re::HashSetBase<unsigned short,unsigned short,re::internal::ValueAsKey<unsigned short>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::deinit((uint64_t *)(v6 + v4 + 16));
          unint64_t v3 = *((unsigned int *)a1 + 8);
        }
        v4 += 64;
      }
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

uint64_t re::internal::Callable<re::ShaderManager::tryRequestFunctionReflection(unsigned long long,char const*,NS::SharedPtr<MTL::FunctionConstantValues> const&,BOOL,unsigned long long,re::Function<void ()(re::Pair<NS::SharedPtr<MTL::Function>,re::DynamicArray<NS::SharedPtr<MTL::Argument>>,true> const&)>)::$_0,void ()(void)>::Callable(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26E710D48;
  *(void *)(a1 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = *(void *)(a2 + 24);
  *(void *)(a1 + 40) = 0;
  re::FunctionBase<24ul,void ()(re::Pair<NS::SharedPtr<MTL::Function>,re::DynamicArray<NS::SharedPtr<MTL::Argument>>,true> const&)>::operator=<24ul>(a1 + 8, a2);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 40);
  *(void *)(a2 + 48) = 0;
  uint64_t v4 = *(void *)(a2 + 72);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 80) = v4;
  uint64_t v5 = *(void *)(a2 + 80);
  *(void *)(a2 + 80) = 0;
  *(void *)(a1 + 88) = v5;
  return a1;
}

uint64_t re::internal::Callable<re::ShaderManager::tryRequestFunctionReflection(unsigned long long,char const*,NS::SharedPtr<MTL::FunctionConstantValues> const&,BOOL,unsigned long long,re::Function<void ()(re::Pair<NS::SharedPtr<MTL::Function>,re::DynamicArray<NS::SharedPtr<MTL::Argument>>,true> const&)>)::$_0,void ()(void)>::~Callable(uint64_t a1)
{
  *(void *)a1 = &unk_26E710D48;

  uint64_t v2 = *(void **)(a1 + 56);
  if (v2)
  {

    *(void *)(a1 + 56) = 0;
  }
  re::FunctionBase<24ul,void ()(re::Pair<NS::SharedPtr<MTL::Function>,re::DynamicArray<NS::SharedPtr<MTL::Argument>>,true> const&)>::destroyCallable(a1 + 8);
  return a1;
}

void re::internal::Callable<re::ShaderManager::tryRequestFunctionReflection(unsigned long long,char const*,NS::SharedPtr<MTL::FunctionConstantValues> const&,BOOL,unsigned long long,re::Function<void ()(re::Pair<NS::SharedPtr<MTL::Function>,re::DynamicArray<NS::SharedPtr<MTL::Argument>>,true> const&)>)::$_0,void ()(void)>::~Callable(uint64_t a1)
{
  *(void *)a1 = &unk_26E710D48;

  uint64_t v2 = *(void **)(a1 + 56);
  if (v2)
  {

    *(void *)(a1 + 56) = 0;
  }
  re::FunctionBase<24ul,void ()(re::Pair<NS::SharedPtr<MTL::Function>,re::DynamicArray<NS::SharedPtr<MTL::Argument>>,true> const&)>::destroyCallable(a1 + 8);
  JUMPOUT(0x237DBCBD0);
}

void re::internal::Callable<re::ShaderManager::tryRequestFunctionReflection(unsigned long long,char const*,NS::SharedPtr<MTL::FunctionConstantValues> const&,BOOL,unsigned long long,re::Function<void ()(re::Pair<NS::SharedPtr<MTL::Function>,re::DynamicArray<NS::SharedPtr<MTL::Argument>>,true> const&)>)::$_0,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (re::internal::enableSignposts(0, 0)) {
    kdebug_trace();
  }
  re::mtl::Library::makeFunctionWithDescriptor((id *)(a1 + 88), *(void **)(a1 + 56), &v2);
  if (v2)
  {
    v3[0] = &unk_26E710DA0;
    v3[1] = &v2;
    *(void *)&long long v4 = a1 + 8;
    *((void *)&v4 + 1) = v3;
    re::runInLocalAutoreleasePool((uint64_t)v3);
    std::__function::__value_func<void ()(void)>::~__value_func[abi:nn180100](v3);
  }
  else
  {
    uint64_t v6 = 0;
    int v5 = 0;
    *(_OWORD *)unint64_t v3 = 0u;
    long long v4 = 0u;
    (*(void (**)(void, id *))(**(void **)(a1 + 40) + 16))(*(void *)(a1 + 40), v3);
    re::DynamicArray<NS::SharedPtr<MTL::SamplerState>>::deinit((uint64_t)&v3[1]);
    if (v3[0]) {
  }
    }
  if (re::internal::enableSignposts(0, 0)) {
    kdebug_trace();
  }
  if (v2) {
}
  }

uint64_t re::internal::Callable<re::ShaderManager::tryRequestFunctionReflection(unsigned long long,char const*,NS::SharedPtr<MTL::FunctionConstantValues> const&,BOOL,unsigned long long,re::Function<void ()(re::Pair<NS::SharedPtr<MTL::Function>,re::DynamicArray<NS::SharedPtr<MTL::Argument>>,true> const&)>)::$_0,void ()(void)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E710D48;
  *(void *)(a2 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = *(void *)(a1 + 32);
  *(void *)(a2 + 40) = 0;
  re::FunctionBase<24ul,void ()(re::Pair<NS::SharedPtr<MTL::Function>,re::DynamicArray<NS::SharedPtr<MTL::Argument>>,true> const&)>::operator=<24ul>(a2 + 8, a1 + 8);
  long long v4 = *(void **)(a1 + 56);
  *(void *)(a2 + 48) = *(void *)(a1 + 48);
  *(void *)(a2 + 56) = v4;
  long long v5 = *(_OWORD *)(a1 + 64);
  *(void *)(a2 + 80) = *(void *)(a1 + 80);
  *(_OWORD *)(a2 + 64) = v5;
  *(void *)(a2 + 88) = *(id *)(a1 + 88);
  return a2;
}

uint64_t re::internal::Callable<re::ShaderManager::tryRequestFunctionReflection(unsigned long long,char const*,NS::SharedPtr<MTL::FunctionConstantValues> const&,BOOL,unsigned long long,re::Function<void ()(re::Pair<NS::SharedPtr<MTL::Function>,re::DynamicArray<NS::SharedPtr<MTL::Argument>>,true> const&)>)::$_0,void ()(void)>::moveInto(uint64_t a1, uint64_t a2)
{
  return re::internal::Callable<re::ShaderManager::tryRequestFunctionReflection(unsigned long long,char const*,NS::SharedPtr<MTL::FunctionConstantValues> const&,BOOL,unsigned long long,re::Function<void ()(re::Pair<NS::SharedPtr<MTL::Function>,re::DynamicArray<NS::SharedPtr<MTL::Argument>>,true> const&)>)::$_0,void ()(void)>::Callable(a2, a1 + 8);
}

uint64_t re::internal::Callable<re::ShaderManager::tryRequestFunctionReflection(unsigned long long,char const*,NS::SharedPtr<MTL::FunctionConstantValues> const&,BOOL,unsigned long long,re::Function<void ()(re::Pair<NS::SharedPtr<MTL::Function>,re::DynamicArray<NS::SharedPtr<MTL::Argument>>,true> const&)>)::$_0,void ()(void)>::size()
{
  return 96;
}

void std::__function::__func<re::ShaderManager::tryRequestFunctionReflection(unsigned long long,char const*,NS::SharedPtr<MTL::FunctionConstantValues> const&,BOOL,unsigned long long,re::Function<void ()(re::Pair<NS::SharedPtr<MTL::Function>,re::DynamicArray<NS::SharedPtr<MTL::Argument>>,true> const&)>)::$_1::operator() const(NS::SharedPtr<MTL::Function> const&)::{lambda(void)#1},std::allocator<re::ShaderManager::tryRequestFunctionReflection(unsigned long long,char const*,NS::SharedPtr<MTL::FunctionConstantValues> const&,BOOL,unsigned long long,re::Function<void ()(re::Pair<NS::SharedPtr<MTL::Function>,re::DynamicArray<NS::SharedPtr<MTL::Argument>>,true> const&)>)::$_1::operator() const(NS::SharedPtr<MTL::Function> const&)::{lambda(void)#1}>,void ()(void)>::~__func()
{
}

__n128 std::__function::__func<re::ShaderManager::tryRequestFunctionReflection(unsigned long long,char const*,NS::SharedPtr<MTL::FunctionConstantValues> const&,BOOL,unsigned long long,re::Function<void ()(re::Pair<NS::SharedPtr<MTL::Function>,re::DynamicArray<NS::SharedPtr<MTL::Argument>>,true> const&)>)::$_1::operator() const(NS::SharedPtr<MTL::Function> const&)::{lambda(void)#1},std::allocator<re::ShaderManager::tryRequestFunctionReflection(unsigned long long,char const*,NS::SharedPtr<MTL::FunctionConstantValues> const&,BOOL,unsigned long long,re::Function<void ()(re::Pair<NS::SharedPtr<MTL::Function>,re::DynamicArray<NS::SharedPtr<MTL::Argument>>,true> const&)>)::$_1::operator() const(NS::SharedPtr<MTL::Function> const&)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  id v2 = (char *)operator new(0x18uLL);
  *(void *)id v2 = &unk_26E710DA0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<re::ShaderManager::tryRequestFunctionReflection(unsigned long long,char const*,NS::SharedPtr<MTL::FunctionConstantValues> const&,BOOL,unsigned long long,re::Function<void ()(re::Pair<NS::SharedPtr<MTL::Function>,re::DynamicArray<NS::SharedPtr<MTL::Argument>>,true> const&)>)::$_1::operator() const(NS::SharedPtr<MTL::Function> const&)::{lambda(void)#1},std::allocator<re::ShaderManager::tryRequestFunctionReflection(unsigned long long,char const*,NS::SharedPtr<MTL::FunctionConstantValues> const&,BOOL,unsigned long long,re::Function<void ()(re::Pair<NS::SharedPtr<MTL::Function>,re::DynamicArray<NS::SharedPtr<MTL::Argument>>,true> const&)>)::$_1::operator() const(NS::SharedPtr<MTL::Function> const&)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E710DA0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<re::ShaderManager::tryRequestFunctionReflection(unsigned long long,char const*,NS::SharedPtr<MTL::FunctionConstantValues> const&,BOOL,unsigned long long,re::Function<void ()(re::Pair<NS::SharedPtr<MTL::Function>,re::DynamicArray<NS::SharedPtr<MTL::Argument>>,true> const&)>)::$_1::operator() const(NS::SharedPtr<MTL::Function> const&)::{lambda(void)#1},std::allocator<re::ShaderManager::tryRequestFunctionReflection(unsigned long long,char const*,NS::SharedPtr<MTL::FunctionConstantValues> const&,BOOL,unsigned long long,re::Function<void ()(re::Pair<NS::SharedPtr<MTL::Function>,re::DynamicArray<NS::SharedPtr<MTL::Argument>>,true> const&)>)::$_1::operator() const(NS::SharedPtr<MTL::Function> const&)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v5 = 0;
  *(_OWORD *)id v2 = 0u;
  long long v3 = 0u;
  int v4 = 0;
  NS::SharedPtr<MTL::Texture>::operator=(v2, *(void ***)(a1 + 8));
  (*(void (**)(void, id *))(**(void **)(*(void *)(a1 + 16) + 32) + 16))(*(void *)(*(void *)(a1 + 16) + 32), v2);
  re::DynamicArray<NS::SharedPtr<MTL::SamplerState>>::deinit((uint64_t)&v2[1]);
  if (v2[0]) {
}
  }

uint64_t std::__function::__func<re::ShaderManager::tryRequestFunctionReflection(unsigned long long,char const*,NS::SharedPtr<MTL::FunctionConstantValues> const&,BOOL,unsigned long long,re::Function<void ()(re::Pair<NS::SharedPtr<MTL::Function>,re::DynamicArray<NS::SharedPtr<MTL::Argument>>,true> const&)>)::$_1::operator() const(NS::SharedPtr<MTL::Function> const&)::{lambda(void)#1},std::allocator<re::ShaderManager::tryRequestFunctionReflection(unsigned long long,char const*,NS::SharedPtr<MTL::FunctionConstantValues> const&,BOOL,unsigned long long,re::Function<void ()(re::Pair<NS::SharedPtr<MTL::Function>,re::DynamicArray<NS::SharedPtr<MTL::Argument>>,true> const&)>)::$_1::operator() const(NS::SharedPtr<MTL::Function> const&)::{lambda(void)#1}>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::ShaderManager::tryRequestFunctionReflection(unsigned long long,char const*,NS::SharedPtr<MTL::FunctionConstantValues> const&,BOOL,unsigned long long,re::Function<void ()(re::Pair<NS::SharedPtr<MTL::Function>,re::DynamicArray<NS::SharedPtr<MTL::Argument>>,true> const&)>)::$_1::operator() const(NS::SharedPtr<MTL::Function> const&)::{lambda(void)#1},std::allocator<re::ShaderManager::tryRequestFunctionReflection(unsigned long long,char const*,NS::SharedPtr<MTL::FunctionConstantValues> const&,BOOL,unsigned long long,re::Function<void ()(re::Pair<NS::SharedPtr<MTL::Function>,re::DynamicArray<NS::SharedPtr<MTL::Argument>>,true> const&)>)::$_1::operator() const(NS::SharedPtr<MTL::Function> const&)::{lambda(void)#1}>,void ()(void)>::target_type()
{
}

uint64_t re::FunctionBase<24ul,void ()(re::Function<void ()(void)> const&)>::operator=<24ul>(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    re::FunctionBase<24ul,void ()(re::Function<void ()(void)> const&)>::destroyCallable(a1);
    uint64_t v4 = *(void *)(a2 + 32);
    if (v4)
    {
      unint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4);
      uint64_t v6 = a1;
      if (v5 >= 0x19)
      {
        unint64_t v7 = v5;
        uint64_t v8 = *(void *)(a1 + 24);
        if (v8) {
          uint64_t v6 = (*(uint64_t (**)(uint64_t, unint64_t, void))(*(void *)v8 + 32))(v8, v7, 0);
        }
        else {
          uint64_t v6 = 0;
        }
      }
      *(void *)(a1 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = v6;
      (*(void (**)(void))(**(void **)(a2 + 32) + 24))(*(void *)(a2 + 32));
    }
  }
  return a1;
}

uint64_t re::FunctionBase<24ul,void ()(unsigned long long,re::Function<void ()(void)> const&)>::operator=<24ul>(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    re::FunctionBase<24ul,void ()(unsigned long long,re::Function<void ()(void)> const&)>::destroyCallable(a1);
    uint64_t v4 = *(void *)(a2 + 32);
    if (v4)
    {
      unint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4);
      uint64_t v6 = a1;
      if (v5 >= 0x19)
      {
        unint64_t v7 = v5;
        uint64_t v8 = *(void *)(a1 + 24);
        if (v8) {
          uint64_t v6 = (*(uint64_t (**)(uint64_t, unint64_t, void))(*(void *)v8 + 32))(v8, v7, 0);
        }
        else {
          uint64_t v6 = 0;
        }
      }
      *(void *)(a1 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = v6;
      (*(void (**)(void))(**(void **)(a2 + 32) + 24))(*(void *)(a2 + 32));
    }
  }
  return a1;
}

double re::HashTable<unsigned long,re::ShaderManager::LibraryEntry,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    unint64_t v3 = *((unsigned int *)a1 + 8);
    if (v3)
    {
      uint64_t v4 = 0;
      for (unint64_t i = 0; i < v3; ++i)
      {
        uint64_t v6 = a1[2] + v4;
        int v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;

          unint64_t v3 = *((unsigned int *)a1 + 8);
        }
        v4 += 40;
      }
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

BOOL std::__libcpp_thread_poll_with_backoff[abi:nn180100]<std::__cxx_atomic_wait_test_fn_impl<std::__cxx_atomic_impl<int,std::__cxx_atomic_base_impl<int>>,int> &,std::__libcpp_atomic_wait_backoff_impl<std::__cxx_atomic_impl<int,std::__cxx_atomic_base_impl<int>>,std::__cxx_atomic_wait_test_fn_impl<std::__cxx_atomic_impl<int,std::__cxx_atomic_base_impl<int>>,int>> &>(uint64_t a1, uint64_t a2, std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep a3)
{
  v6.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  unsigned int v7 = 0;
  while (1)
  {
    uint64_t v8 = *(unsigned int **)a1;
    int v9 = *(_DWORD *)(a1 + 12);
    if ((v9 - 1) >= 2) {
      unsigned int explicit = v9 == 5 ? atomic_load(v8) : *v8;
    }
    else {
      unsigned int explicit = atomic_load_explicit((atomic_uint *volatile)v8, memory_order_acquire);
    }
    int v11 = *(_DWORD *)(a1 + 8);
    if (explicit != v11) {
      break;
    }
    if (v7 <= 0x3F)
    {
      ++v7;
    }
    else
    {
      v12.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_ - v6.__d_.__rep_;
      if (a3 && v12.__d_.__rep_ > a3
        || std::__libcpp_atomic_wait_backoff_impl<std::__cxx_atomic_impl<int,std::__cxx_atomic_base_impl<int>>,std::__cxx_atomic_wait_test_fn_impl<std::__cxx_atomic_impl<int,std::__cxx_atomic_base_impl<int>>,int>>::operator()[abi:nn180100](a2, v12.__d_.__rep_))
      {
        return explicit != v11;
      }
    }
  }
  return explicit != v11;
}

uint64_t std::__libcpp_atomic_wait_backoff_impl<std::__cxx_atomic_impl<int,std::__cxx_atomic_base_impl<int>>,std::__cxx_atomic_wait_test_fn_impl<std::__cxx_atomic_impl<int,std::__cxx_atomic_base_impl<int>>,int>>::operator()[abi:nn180100](uint64_t a1, uint64_t a2)
{
  if (a2 < 64001)
  {
    if (a2 >= 4001) {
      sched_yield();
    }
    return 0;
  }
  std::__cxx_contention_t v3 = std::__libcpp_atomic_monitor(*(const void **)a1);
  uint64_t v4 = *(unsigned int **)(a1 + 8);
  int v5 = *(_DWORD *)(a1 + 20);
  if ((v5 - 1) >= 2)
  {
    if (v5 == 5) {
      unsigned int explicit = atomic_load(v4);
    }
    else {
      unsigned int explicit = *v4;
    }
  }
  else
  {
    unsigned int explicit = atomic_load_explicit((atomic_uint *volatile)v4, memory_order_acquire);
  }
  if (explicit == *(_DWORD *)(a1 + 16))
  {
    std::__libcpp_atomic_wait(*(const void **)a1, v3);
    return 0;
  }
  return 1;
}

uint64_t (***___ZNK2re13ShaderManager29resolveShaderCompilationQueueIZNKS0_35scheduleAsyncFuncOnCompilationQueueEbyNS_8FunctionIFvvEEEE3__0EEvbyS4_T__block_invoke(void *a1))(void)
{
  v6[5] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[4];
  dispatch_semaphore_wait(*(dispatch_semaphore_t *)(v2 + 728), 0xFFFFFFFFFFFFFFFFLL);
  v5[0] = MEMORY[0x263EF8330];
  v5[1] = 1174405120;
  void v5[2] = ___ZNK2re13ShaderManager29resolveShaderCompilationQueueIZNKS0_35scheduleAsyncFuncOnCompilationQueueEbyNS_8FunctionIFvvEEEE3__0EEvbyS4_T__block_invoke_2;
  v5[3] = &__block_descriptor_tmp_49;
  uint64_t v3 = a1[5];
  v5[4] = v2;
  v5[5] = v3;
  v6[3] = a1[9];
  void v6[4] = 0;
  re::FunctionBase<24ul,void ()(void)>::operator=<24ul>((uint64_t)v6, (uint64_t)(a1 + 6));
  dispatch_async(*(dispatch_queue_t *)(v2 + 736), v5);
  return re::FunctionBase<24ul,void ()(void)>::destroyCallable((uint64_t)v6);
}

void ___ZNK2re13ShaderManager29resolveShaderCompilationQueueIZNKS0_35scheduleAsyncFuncOnCompilationQueueEbyNS_8FunctionIFvvEEEE3__0EEvbyS4_T__block_invoke_2(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  re::ShaderManager::executeWithShaderCompilationBlamedToPeer(*(void *)(v1 + 896), *(void *)(a1 + 40), a1 + 48);
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v1 + 728));
  atomic_fetch_add((atomic_uint *volatile)(v1 + 816), 0xFFFFFFFF);
  JUMPOUT(0x237DBC9B0);
}

uint64_t __copy_helper_block_8_48c24_ZTSN2re8FunctionIFvvEEE(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = 0;
  return re::FunctionBase<24ul,void ()(void)>::operator=<24ul>(a1 + 48, a2 + 48);
}

uint64_t (***__destroy_helper_block_8_48c24_ZTSN2re8FunctionIFvvEEE(uint64_t a1))(void)
{
  return re::FunctionBase<24ul,void ()(void)>::destroyCallable(a1 + 48);
}

void ___ZNK2re13ShaderManager29resolveShaderCompilationQueueIZNKS0_35scheduleAsyncFuncOnCompilationQueueEbyNS_8FunctionIFvvEEEE3__0EEvbyS4_T__block_invoke_39(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  re::ShaderManager::executeWithShaderCompilationBlamedToPeer(*(void *)(v1 + 896), *(void *)(a1 + 40), a1 + 48);
  atomic_fetch_add((atomic_uint *volatile)(v1 + 816), 0xFFFFFFFF);
  JUMPOUT(0x237DBC9B0);
}

uint64_t (***___ZNK2re13ShaderManager29resolveShaderCompilationQueueIZNKS0_37scheduleGroupNotifyOnCompilationQueueEbyNS_8dispatch5GroupENS_8FunctionIFvvEEEE3__0EEvbyS6_T__block_invoke(void *a1))(void)
{
  _OWORD v9[5] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[4];
  dispatch_semaphore_wait(*(dispatch_semaphore_t *)(v2 + 728), 0xFFFFFFFFFFFFFFFFLL);
  uint64_t v3 = (id *)(a1 + 5);
  v8[0] = MEMORY[0x263EF8330];
  v8[1] = 1174405120;
  _DWORD v8[2] = ___ZNK2re13ShaderManager29resolveShaderCompilationQueueIZNKS0_37scheduleGroupNotifyOnCompilationQueueEbyNS_8dispatch5GroupENS_8FunctionIFvvEEEE3__0EEvbyS6_T__block_invoke_2;
  v8[3] = &__block_descriptor_tmp_45_1;
  uint64_t v4 = a1[6];
  void v8[4] = v2;
  void v8[5] = v4;
  _OWORD v9[3] = a1[10];
  v9[4] = 0;
  re::FunctionBase<24ul,void ()(void)>::operator=<24ul>((uint64_t)v9, (uint64_t)(a1 + 7));
  int v5 = *(id *)(v2 + 736);
  unsigned int v7 = v5;
  re::dispatch::Group::async(v3, &v7, v8);

  return re::FunctionBase<24ul,void ()(void)>::destroyCallable((uint64_t)v9);
}

void ___ZNK2re13ShaderManager29resolveShaderCompilationQueueIZNKS0_37scheduleGroupNotifyOnCompilationQueueEbyNS_8dispatch5GroupENS_8FunctionIFvvEEEE3__0EEvbyS6_T__block_invoke_2(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  re::ShaderManager::executeWithShaderCompilationBlamedToPeer(*(void *)(v1 + 896), *(void *)(a1 + 40), a1 + 48);
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v1 + 728));
  atomic_fetch_add((atomic_uint *volatile)(v1 + 816), 0xFFFFFFFF);
  JUMPOUT(0x237DBC9B0);
}

uint64_t __copy_helper_block_8_40c110_ZTSZNK2re13ShaderManager37scheduleGroupNotifyOnCompilationQueueEbyNS_8dispatch5GroupENS_8FunctionIFvvEEEE3__056c24_ZTSN2re8FunctionIFvvEEE(void *a1, uint64_t a2)
{
  a1[5] = *(id *)(a2 + 40);
  a1[10] = *(void *)(a2 + 80);
  a1[11] = 0;
  return re::FunctionBase<24ul,void ()(void)>::operator=<24ul>((uint64_t)(a1 + 7), a2 + 56);
}

void __destroy_helper_block_8_40c110_ZTSZNK2re13ShaderManager37scheduleGroupNotifyOnCompilationQueueEbyNS_8dispatch5GroupENS_8FunctionIFvvEEEE3__056c24_ZTSN2re8FunctionIFvvEEE(uint64_t a1)
{
  re::FunctionBase<24ul,void ()(void)>::destroyCallable(a1 + 56);
  uint64_t v2 = *(void **)(a1 + 40);
}

void ___ZNK2re13ShaderManager29resolveShaderCompilationQueueIZNKS0_37scheduleGroupNotifyOnCompilationQueueEbyNS_8dispatch5GroupENS_8FunctionIFvvEEEE3__0EEvbyS6_T__block_invoke_47(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  re::ShaderManager::executeWithShaderCompilationBlamedToPeer(*(void *)(v1 + 896), *(void *)(a1 + 40), a1 + 48);
  atomic_fetch_add((atomic_uint *volatile)(v1 + 816), 0xFFFFFFFF);
  JUMPOUT(0x237DBC9B0);
}

uint64_t (***___ZNK2re13ShaderManager29resolveShaderCompilationQueueIZNKS0_40scheduleAsyncGroupFuncOnCompilationQueueEbyNS_8dispatch5GroupENS_8FunctionIFvvEEEE3__0EEvbyS6_T__block_invoke(void *a1))(void)
{
  _OWORD v9[5] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[4];
  dispatch_semaphore_wait(*(dispatch_semaphore_t *)(v2 + 728), 0xFFFFFFFFFFFFFFFFLL);
  uint64_t v3 = (id *)(a1 + 5);
  v8[0] = MEMORY[0x263EF8330];
  v8[1] = 1174405120;
  _DWORD v8[2] = ___ZNK2re13ShaderManager29resolveShaderCompilationQueueIZNKS0_40scheduleAsyncGroupFuncOnCompilationQueueEbyNS_8dispatch5GroupENS_8FunctionIFvvEEEE3__0EEvbyS6_T__block_invoke_2;
  v8[3] = &__block_descriptor_tmp_53_0;
  uint64_t v4 = a1[6];
  void v8[4] = v2;
  void v8[5] = v4;
  _OWORD v9[3] = a1[10];
  v9[4] = 0;
  re::FunctionBase<24ul,void ()(void)>::operator=<24ul>((uint64_t)v9, (uint64_t)(a1 + 7));
  int v5 = *(id *)(v2 + 736);
  unsigned int v7 = v5;
  re::dispatch::Group::async(v3, &v7, v8);

  return re::FunctionBase<24ul,void ()(void)>::destroyCallable((uint64_t)v9);
}

void ___ZNK2re13ShaderManager29resolveShaderCompilationQueueIZNKS0_40scheduleAsyncGroupFuncOnCompilationQueueEbyNS_8dispatch5GroupENS_8FunctionIFvvEEEE3__0EEvbyS6_T__block_invoke_2(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  re::ShaderManager::executeWithShaderCompilationBlamedToPeer(*(void *)(v1 + 896), *(void *)(a1 + 40), a1 + 48);
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v1 + 728));
  atomic_fetch_add((atomic_uint *volatile)(v1 + 816), 0xFFFFFFFF);
  JUMPOUT(0x237DBC9B0);
}

uint64_t __copy_helper_block_8_40c113_ZTSZNK2re13ShaderManager40scheduleAsyncGroupFuncOnCompilationQueueEbyNS_8dispatch5GroupENS_8FunctionIFvvEEEE3__056c24_ZTSN2re8FunctionIFvvEEE(void *a1, uint64_t a2)
{
  a1[5] = *(id *)(a2 + 40);
  a1[10] = *(void *)(a2 + 80);
  a1[11] = 0;
  return re::FunctionBase<24ul,void ()(void)>::operator=<24ul>((uint64_t)(a1 + 7), a2 + 56);
}

void __destroy_helper_block_8_40c113_ZTSZNK2re13ShaderManager40scheduleAsyncGroupFuncOnCompilationQueueEbyNS_8dispatch5GroupENS_8FunctionIFvvEEEE3__056c24_ZTSN2re8FunctionIFvvEEE(uint64_t a1)
{
  re::FunctionBase<24ul,void ()(void)>::destroyCallable(a1 + 56);
  uint64_t v2 = *(void **)(a1 + 40);
}

void ___ZNK2re13ShaderManager29resolveShaderCompilationQueueIZNKS0_40scheduleAsyncGroupFuncOnCompilationQueueEbyNS_8dispatch5GroupENS_8FunctionIFvvEEEE3__0EEvbyS6_T__block_invoke_55(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  re::ShaderManager::executeWithShaderCompilationBlamedToPeer(*(void *)(v1 + 896), *(void *)(a1 + 40), a1 + 48);
  atomic_fetch_add((atomic_uint *volatile)(v1 + 816), 0xFFFFFFFF);
  JUMPOUT(0x237DBC9B0);
}

void re::HashTable<unsigned long,re::ShaderManager::LibraryEntry,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v25, 0, 36);
      *(void *)&v25[36] = 0x7FFFFFFFLL;
      re::HashTable<unsigned long,re::ShaderManager::LibraryEntry,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::init((uint64_t)v25, v4, a2);
      long long v5 = *(_OWORD *)a1;
      *(void *)a1 = *(void *)v25;
      uint64_t v6 = *(void *)(a1 + 16);
      long long v7 = *(_OWORD *)&v25[8];
      *(_OWORD *)id v25 = v5;
      *(void *)&v25[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      long long v9 = *(_OWORD *)&v25[24];
      *(_OWORD *)&v25[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v25[32];
      *(_OWORD *)(a1 + 24) = v9;
      unint64_t v10 = v8;
      if (v8)
      {
        unint64_t v11 = 0;
        int v12 = DWORD1(v9);
        uint64_t v13 = v7;
        uint64_t v14 = (void *)(v6 + 32);
        do
        {
          if ((*(_DWORD *)(v14 - 3) & 0x80000000) != 0)
          {
            unint64_t v15 = *(v14 - 4);
            unint64_t v16 = *(unsigned int *)(a1 + 24);
            unint64_t v17 = v15 % v16;
            uint64_t v18 = *(unsigned int *)(a1 + 36);
            if (v18 == 0x7FFFFFFF)
            {
              uint64_t v18 = *(unsigned int *)(a1 + 32);
              int v19 = v18;
              if (v18 == v16)
              {
                re::HashTable<unsigned long,re::ShaderManager::LibraryEntry,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::setCapacity(a1, (2 * v12));
                unint64_t v17 = v15 % *(unsigned int *)(a1 + 24);
                int v19 = *(_DWORD *)(a1 + 32);
                uint64_t v13 = *(void *)(a1 + 8);
              }
              *(_DWORD *)(a1 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = v19 + 1;
              uint64_t v20 = *(void *)(a1 + 16);
              int v21 = *(_DWORD *)(v20 + 40 * v18 + 8);
            }
            else
            {
              uint64_t v20 = *(void *)(a1 + 16);
              int v21 = *(_DWORD *)(v20 + 40 * v18 + 8);
              *(_DWORD *)(a1 + 36) = v21 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v20 + 40 * v18 + 8) = v21 | 0x80000000;
            *(_DWORD *)(*(void *)(a1 + 16) + 40 * v18 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 40 * v18 + 8) & 0x80000000 | *(_DWORD *)(v13 + 4 * v17);
            *(void *)(*(void *)(a1 + 16) + 40 * v18) = v15;
            *(void *)(*(void *)(a1 + 16) + 40 * v18 + 16) = *(v14 - 2);
            uint64_t v22 = *(void *)(a1 + 16) + 40 * v18;
            *(_DWORD *)(v22 + 24) = *((_DWORD *)v14 - 2);
            uint64_t v23 = *v14;
            *uint64_t v14 = 0;
            *(void *)(v22 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = v23;
            uint64_t v13 = *(void *)(a1 + 8);
            *(_DWORD *)(v13 + 4 * v17) = v18;
            int v12 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v12;
          }
          ++v11;
          v14 += 5;
        }
        while (v11 < v10);
      }
      re::HashTable<unsigned long,re::ShaderManager::LibraryEntry,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::deinit((uint64_t *)v25);
    }
  }
  else
  {
    if (a2) {
      signed int v24 = a2;
    }
    else {
      signed int v24 = 3;
    }
  }
}

void re::HashTable<unsigned long,re::ShaderManager::LibraryEntry,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  long long v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    long long v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    unsigned int v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      long long v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  int v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + 40 * v10, 16);
  if (v12)
  {
    uint64_t v14 = v12;
    *(void *)(a1 + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &memset_pattern_64, 4 * v10);
    }
    *(void *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

uint64_t re::CameraView::makeCameraData@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  re::CameraData::CameraData((re::CameraData *)a4, *(re::Allocator **)a3);
  re::DynamicString::operator=((re::DynamicString *)(a4 + 8), (re::DynamicString *)a1);
  if (re::DynamicInlineArray<re::RenderCamera,2ul>::ensureCapacity((void *)(a4 + 48), v8))
  {
    uint64_t v10 = a4 + 48 + 32 * *(void *)(a4 + 48);
    long long v11 = *(_OWORD *)(a1 + 48);
    *(_OWORD *)(v10 + 16) = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(v10 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = v11;
    ++*(void *)(a4 + 48);
    ++*(_DWORD *)(a4 + 56);
  }
  if (re::DynamicInlineArray<re::RenderCamera,2ul>::ensureCapacity((void *)(a4 + 128), v9))
  {
    uint64_t v13 = (_OWORD *)(a4 + 128 + (*(void *)(a4 + 128) << 6));
    long long v14 = *(_OWORD *)(a1 + 80);
    v13[1] = *(_OWORD *)(a1 + 64);
    uint64_t v13[2] = v14;
    long long v15 = *(_OWORD *)(a1 + 112);
    v13[3] = *(_OWORD *)(a1 + 96);
    v13[4] = v15;
    ++*(void *)(a4 + 128);
    ++*(_DWORD *)(a4 + 136);
  }
  if (re::DynamicInlineArray<re::RenderCamera,2ul>::ensureCapacity((void *)(a4 + 272), v12))
  {
    unint64_t v16 = (_OWORD *)(a4 + 272 + (*(void *)(a4 + 272) << 6));
    long long v17 = *(_OWORD *)(a1 + 592);
    v16[1] = *(_OWORD *)(a1 + 576);
    v16[2] = v17;
    long long v18 = *(_OWORD *)(a1 + 624);
    v16[3] = *(_OWORD *)(a1 + 608);
    v16[4] = v18;
    ++*(void *)(a4 + 272);
    ++*(_DWORD *)(a4 + 280);
  }
  uint64_t v19 = *(void *)(a3 + 48);
  *(void *)(a4 + 440) = *(void *)(a3 + 32);
  *(void *)(a4 + 448) = v19;
  *(_OWORD *)(a4 + 416) = *(_OWORD *)(a1 + 320);
  *(_DWORD *)(a4 + 484) = *(_DWORD *)(a1 + 356);
  *(void *)(a4 + 456) = *(void *)(a1 + 340);
  *(unsigned char *)(a4 + 464) = *(unsigned char *)(a1 + 350);
  *(_DWORD *)(a4 + 468) = *(_DWORD *)(a1 + 352);
  *(unsigned char *)(a4 + 472) = *(unsigned char *)(a1 + 652);
  *(_WORD *)(a4 + 488) = *(_WORD *)(a3 + 64);
  if ([*(id *)(a2 + 184) supportsFamily:1003])
  {
    if (*(_DWORD *)(a1 + 112)) {
      int v20 = 2;
    }
    else {
      int v20 = 1;
    }
  }
  else
  {
    int v20 = 0;
  }
  *(_DWORD *)(a4 + 492) = v20;
  uint64_t result = [*(id *)(a2 + 184) supportsFamily:1005];
  *(_DWORD *)(a4 + 4re::DynamicArray<re::RigComponentConstraint>::deinit((uint64_t)this + 96) = result;
  *(_DWORD *)(a4 + 504) = *(_DWORD *)(a1 + 656);
  if (*(unsigned char *)(a1 + 265)) {
    int v22 = 1;
  }
  else {
    int v22 = 2;
  }
  *(_DWORD *)(a4 + 500) = v22;
  *(unsigned char *)(a4 + 512) = *(unsigned char *)(a1 + 660);
  return result;
}

uint64_t re::CameraMultiView::makeCameraDataInstancedMode@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  re::CameraView::makeCameraData((uint64_t)a1, a2, a3, a4);
  if (re::DynamicInlineArray<re::RenderCamera,2ul>::ensureCapacity((void *)(a4 + 128), v6))
  {
    uint64_t v8 = (_OWORD *)(a4 + 128 + (*(void *)(a4 + 128) << 6));
    long long v9 = a1[47];
    v8[1] = a1[46];
    _DWORD v8[2] = v9;
    long long v10 = a1[49];
    v8[3] = a1[48];
    void v8[4] = v10;
    ++*(void *)(a4 + 128);
    ++*(_DWORD *)(a4 + 136);
  }
  if (re::DynamicInlineArray<re::RenderCamera,2ul>::ensureCapacity((void *)(a4 + 48), v7))
  {
    uint64_t v12 = a4 + 48 + 32 * *(void *)(a4 + 48);
    long long v13 = a1[45];
    *(_OWORD *)(v12 + 16) = a1[44];
    *(_OWORD *)(v12 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = v13;
    ++*(void *)(a4 + 48);
    ++*(_DWORD *)(a4 + 56);
  }
  uint64_t result = re::DynamicInlineArray<re::RenderCamera,2ul>::ensureCapacity((void *)(a4 + 272), v11);
  if (result)
  {
    long long v15 = (_OWORD *)(a4 + 272 + (*(void *)(a4 + 272) << 6));
    long long v16 = a1[81];
    long long v17 = a1[79];
    v15[1] = a1[78];
    v15[2] = v17;
    _OWORD v15[3] = a1[80];
    v15[4] = v16;
    ++*(void *)(a4 + 272);
    ++*(_DWORD *)(a4 + 280);
  }
  *(unsigned char *)(a4 + 490) = *(void *)(a4 + 128);
  return result;
}

uint64_t re::CameraView::makeViewportPercentData@<X0>(re::CameraView *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = &unk_26E710FD0;
  *(void *)(a3 + 16) = 0;
  *(_DWORD *)(a3 + 24) = 0;
  uint64_t result = re::DynamicInlineArray<re::Vector4<float>,2ul>::ensureCapacity((void *)(a3 + 16), a2);
  if (result)
  {
    *(_OWORD *)(a3 + 16 + 16 * (*(void *)(a3 + 16))++ + 16) = *((_OWORD *)this + 34);
    ++*(_DWORD *)(a3 + 24);
  }
  *(_WORD *)(a3 + 64) = 1;
  *(_DWORD *)(a3 + 68) = *((_DWORD *)this + 162);
  return result;
}

void re::ViewportPercentData::~ViewportPercentData(re::ViewportPercentData *this)
{
  *((void *)this + 2) = 0;
  ++*((_DWORD *)this + 6);
}

{
  *((void *)this + 2) = 0;
  ++*((_DWORD *)this + 6);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::CameraMultiView::makeViewportPercentDataInstancedMode@<X0>(re::CameraMultiView *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  re::CameraView::makeViewportPercentData(this, a2, a3);
  uint64_t result = re::DynamicInlineArray<re::Vector4<float>,2ul>::ensureCapacity((void *)(a3 + 16), v5);
  if (result)
  {
    *(_OWORD *)(a3 + 16 + 16 * (*(void *)(a3 + 16))++ + 16) = *((_OWORD *)this + 76);
    ++*(_DWORD *)(a3 + 24);
  }
  *(unsigned char *)(a3 + 64) = 2;
  *(unsigned char *)(a3 + 65) = *((unsigned char *)this + 1345);
  *(_DWORD *)(a3 + 68) = 0;
  return result;
}

__n128 re::CameraView::makeMeshLodSelectInputData@<Q0>(__n128 *this@<X0>, __n128 *a2@<X8>)
{
  a2->n128_u64[0] = (unint64_t)&unk_26E711050;
  a2[1].n128_u8[1] = 0;
  a2[1].n128_u8[4] = 0;
  a2[1].n128_u8[0] = this[25].n128_u8[0];
  if (this[25].n128_u8[1])
  {
    a2[1].n128_u8[1] = 1;
    a2[1].n128_u8[2] = this[25].n128_u8[2];
  }
  if (this[25].n128_u8[4])
  {
    a2[1].n128_u8[4] = 1;
    a2[1].n128_u32[2] = this[25].n128_u32[2];
  }
  __n128 v2 = this[31];
  a2[6] = this[30];
  a2[7] = v2;
  __n128 v3 = this[33];
  a2[8] = this[32];
  a2[9] = v3;
  __n128 v4 = this[27];
  a2[2] = this[26];
  a2[3] = v4;
  __n128 result = this[28];
  __n128 v6 = this[29];
  a2[4] = result;
  a2[5] = v6;
  return result;
}

void re::CameraView::addPickupScopeLanes(re::CameraView *this, re::RenderFrame *a2)
{
  uint64_t v2 = *((void *)this + 36);
  if (v2)
  {
    uint64_t v5 = (char *)this + 9;
    uint64_t v6 = v2 << 6;
    uint64_t v7 = (const char **)(*((void *)this + 38) + 48);
    do
    {
      if (*(unsigned char *)(v7 - 1)) {
        uint64_t v8 = *v7;
      }
      else {
        uint64_t v8 = (char *)v7 - 7;
      }
      if (*(unsigned char *)(v7 - 5)) {
        long long v9 = *(v7 - 4);
      }
      else {
        long long v9 = (char *)v7 - 39;
      }
      long long v10 = v5;
      if (*((unsigned char *)this + 8)) {
        long long v10 = (const char *)*((void *)this + 2);
      }
      re::RenderFrame::pickupScopeLane(a2, v8, v9, v10);
      v7 += 8;
      v6 -= 64;
    }
    while (v6);
  }
}

uint64_t re::CameraView::prepareEmitDefault(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, const char *a6)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  re::CameraView::addPickupScopeLanes((re::CameraView *)a1, (re::RenderFrame *)a2);
  if (*(unsigned char *)(a1 + 8)) {
    uint64_t v11 = *(const char **)(a1 + 16);
  }
  else {
    uint64_t v11 = (const char *)(a1 + 9);
  }
  unint64_t v12 = 0x9E3779B97F4A7C17;
  size_t v13 = strlen(a6);
  if (v13)
  {
    MurmurHash3_x64_128((uint64_t)a6, v13, 0, &v26);
    unint64_t v14 = (*(void *)v27 - 0x61C8864680B583E9 + (v26 << 6) + (v26 >> 2)) ^ v26;
  }
  else
  {
    unint64_t v14 = 0;
  }
  size_t v15 = strlen(v11);
  if (v15)
  {
    MurmurHash3_x64_128((uint64_t)v11, v15, 0, &v26);
    unint64_t v12 = ((*(void *)v27 - 0x61C8864680B583E9 + (v26 << 6) + (v26 >> 2)) ^ v26) - 0x61C8864680B583E9;
  }
  uint64_t v16 = ((v14 >> 2) + (v14 << 6) + v12) ^ v14;
  re::CameraView::makeCameraData(a1, a2[1], a5, (uint64_t)&v26);
  re::RenderGraphDataStore::add<re::CameraData,re::CameraData>(a3, v16, (uint64_t)&v26);
  uint64_t v33 = 0;
  ++v34;
  uint64_t v31 = 0;
  ++v32;
  uint64_t v29 = 0;
  ++v30;
  if (*(void *)v27 && (v27[8] & 1) != 0) {
    (*(void (**)(void))(**(void **)v27 + 40))();
  }
  re::CameraView::makeViewportPercentData((re::CameraView *)a1, v17, (uint64_t)&v26);
  re::RenderGraphDataStore::add<re::ViewportPercentData,re::ViewportPercentData>(a3, v16, (uint64_t)&v26);
  uint64_t v18 = a2[1];
  unint64_t v26 = (unint64_t)&unk_26E70E0D0;
  *(_DWORD *)uint64_t v27 = *(_DWORD *)(a1 + 640);
  int v19 = *(unsigned __int8 *)(v18 + 300);
  BOOL v21 = *(_DWORD *)v27 != -1 && v19 != 0;
  v27[4] = v21;
  v27[5] = *(unsigned char *)(a1 + 347);
  re::RenderGraphDataStore::add<re::VRRData,re::VRRData>(a3, v16, (uint64_t)&v26);
  unint64_t v26 = (unint64_t)&unk_26E70E050;
  v27[16] = *(unsigned char *)(a1 + 376);
  *(_OWORD *)uint64_t v27 = *(_OWORD *)(a1 + 360);
  re::RenderGraphDataStore::add<re::StencilInfoData,re::StencilInfoData>(a3, v16, (uint64_t)&v26);
  re::CameraView::makeMeshLodSelectInputData((__n128 *)a1, (__n128 *)&v26);
  re::RenderGraphDataStore::add<re::MeshLodSelectInputData,re::MeshLodSelectInputData>(a3, v16, (uint64_t)&v26);
  uint64_t v22 = *(void *)(a5 + 56);
  unint64_t v26 = (unint64_t)&unk_26E711090;
  *(void *)uint64_t v27 = v22;
  re::RenderGraphDataStore::add<re::SceneScope,re::SceneScope>(a3, v16, (uint64_t)&v26);
  unint64_t v26 = (unint64_t)&unk_26E7110D0;
  *(_DWORD *)uint64_t v27 = *(_DWORD *)(a5 + 440);
  re::RenderGraphDataStore::add<re::SceneIndexData,re::SceneIndexData>(a3, v16, (uint64_t)&v26);
  unint64_t v26 = (unint64_t)&unk_26E6FD650;
  *(_WORD *)uint64_t v27 = *(_WORD *)(a1 + 653);
  re::RenderGraphDataStore::add<re::PipelineCompilationData,re::PipelineCompilationData>(a3, v16, (uint64_t)&v26);
  uint64_t v23 = *(float32x4_t **)(a5 + 432);
  if (v23)
  {
    unint64_t v26 = (unint64_t)&unk_26E711010;
    *(float32x4_t *)&v27[8] = vaddq_f32(*(float32x4_t *)(a1 + 320), *v23);
    __int8 v28 = v23[1].i8[0];
    re::RenderGraphDataStore::add<re::TintContextData,re::TintContextData>(a3, v16, (uint64_t)&v26);
  }
  uint64_t v24 = *(unsigned __int8 *)(a2[1] + 303);
  unint64_t v26 = (unint64_t)&unk_26E70E110;
  v27[0] = v24;
  *(void *)&v27[8] = v24 << 9;
  return re::RenderGraphDataStore::addHashed<re::ThreadGroupMemoryData,re::ThreadGroupMemoryData>(a3, v16, (uint64_t)&v26);
}

uint64_t re::RenderGraphDataStore::add<re::CameraData,re::CameraData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v19[2] = *MEMORY[0x263EF8340];
  uint64_t v17 = 0;
  unint64_t v18 = 0;
  {
    re::introspect<re::CameraData>(void)::info = (_UNKNOWN *)re::introspect_CameraData(0);
  }
  uint64_t v17 = re::introspect<re::CameraData>(void)::info;
  size_t v6 = strlen(*((const char **)re::introspect<re::CameraData>(void)::info + 6));
  if (v6)
  {
    MurmurHash3_x64_128(*((void *)re::introspect<re::CameraData>(void)::info + 6), v6, 0, v19);
    unint64_t v7 = (v19[1] - 0x61C8864680B583E9 + (v19[0] << 6) + (v19[0] >> 2)) ^ v19[0];
  }
  else
  {
    unint64_t v7 = 0;
  }
  unint64_t v18 = v7;
  re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addOrReplace<re::IntrospectionStructure const*&>(a1 + 176, &v18, &v17);
  v19[0] = (a2 - 0x61C8864680B583E9 + (v18 << 6) + (v18 >> 2)) ^ v18;
  uint64_t v8 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 528, 16);
  *(void *)uint64_t v8 = &unk_26E70E230;
  *(_OWORD *)(v8 + 24) = 0u;
  *(_OWORD *)(v8 + 8) = 0u;
  *(void *)(v8 + 8) = *(void *)(a3 + 8);
  *(void *)(a3 + 8) = 0;
  uint64_t v9 = *(void *)(v8 + 24);
  *(void *)(v8 + 24) = *(void *)(a3 + 24);
  *(void *)(a3 + 24) = v9;
  *(void *)(v8 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = *(void *)(a3 + 32);
  *(void *)(a3 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = 0;
  uint64_t v10 = *(void *)(v8 + 16);
  *(void *)(v8 + 16) = *(void *)(a3 + 16);
  *(void *)(a3 + 16) = v10;
  *(void *)(v8 + 48) = 0;
  *(_DWORD *)(v8 + 56) = 0;
  re::DynamicInlineArray<re::RenderCamera,2ul>::move((unint64_t *)(v8 + 48), (unint64_t *)(a3 + 48));
  *(void *)(v8 + 128) = 0;
  *(_DWORD *)(v8 + re::DynamicArray<re::RigComponentConstraint>::deinit((uint64_t)this + 136) = 0;
  re::DynamicInlineArray<re::Projection,2ul>::move((unint64_t *)(v8 + 128), (unint64_t *)(a3 + 128));
  *(void *)(v8 + 272) = 0;
  *(_DWORD *)(v8 + 280) = 0;
  re::DynamicInlineArray<re::Projection,2ul>::move((unint64_t *)(v8 + 272), (unint64_t *)(a3 + 272));
  long long v11 = *(_OWORD *)(a3 + 416);
  long long v12 = *(_OWORD *)(a3 + 432);
  long long v13 = *(_OWORD *)(a3 + 448);
  *(_OWORD *)(v8 + 458) = *(_OWORD *)(a3 + 458);
  *(_OWORD *)(v8 + 4re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = v12;
  *(_OWORD *)(v8 + 448) = v13;
  *(_OWORD *)(v8 + 416) = v11;
  int v14 = *(unsigned __int8 *)(a3 + 476);
  *(unsigned char *)(v8 + 476) = v14;
  if (v14) {
    *(_DWORD *)(v8 + 480) = *(_DWORD *)(a3 + 480);
  }
  long long v15 = *(_OWORD *)(a3 + 484);
  *(_OWORD *)(v8 + 497) = *(_OWORD *)(a3 + 497);
  *(_OWORD *)(v8 + 484) = v15;
  uint64_t v17 = (void *)v8;
  return *(void *)re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addNew<re::CameraData *>(a1 + 64, v19, &v17);
}

uint64_t re::RenderGraphDataStore::add<re::ViewportPercentData,re::ViewportPercentData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4 = (unint64_t)"N2re19ViewportPercentDataE";
  if (((unint64_t)"N2re19ViewportPercentDataE" & 0x8000000000000000) != 0)
  {
    uint64_t v5 = (unsigned __int8 *)((unint64_t)"N2re19ViewportPercentDataE" & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v6 = 5381;
    do
    {
      unint64_t v4 = v6;
      unsigned int v7 = *v5++;
      uint64_t v6 = (33 * v6) ^ v7;
    }
    while (v7);
  }
  uint64_t v12 = (a2 + (v4 << 6) + (v4 >> 2) - 0x61C8864680B583E9) ^ v4;
  uint64_t v8 = a1 + 64;
  uint64_t v9 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 80, 16);
  *(void *)uint64_t v9 = &unk_26E710FD0;
  *(void *)(v9 + 16) = 0;
  *(_DWORD *)(v9 + 24) = 0;
  re::DynamicInlineArray<re::PlaneF,6ul>::move((unint64_t *)(v9 + 16), (unint64_t *)(a3 + 16));
  *(void *)(v9 + 64) = *(void *)(a3 + 64);
  uint64_t v11 = v9;
  return *(void *)re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addNew<re::CameraData *>(v8, (unint64_t *)&v12, &v11);
}

void re::RenderGraphDataStore::add<re::VRRData,re::VRRData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v21[2] = *MEMORY[0x263EF8340];
  int v19 = 0;
  unint64_t v20 = 0;
  {
    re::introspect<re::VRRData>(void)::info = (_UNKNOWN *)re::introspect_VRRData(0);
  }
  int v19 = re::introspect<re::VRRData>(void)::info;
  size_t v6 = strlen(*((const char **)re::introspect<re::VRRData>(void)::info + 6));
  if (v6)
  {
    MurmurHash3_x64_128(*((void *)re::introspect<re::VRRData>(void)::info + 6), v6, 0, v21);
    unint64_t v7 = (v21[1] - 0x61C8864680B583E9 + (v21[0] << 6) + (v21[0] >> 2)) ^ v21[0];
  }
  else
  {
    unint64_t v7 = 0;
  }
  unint64_t v20 = v7;
  re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addOrReplace<re::IntrospectionStructure const*&>(a1 + 176, &v20, &v19);
  unint64_t v8 = (a2 - 0x61C8864680B583E9 + (v20 << 6) + (v20 >> 2)) ^ v20;
  uint64_t v9 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 16, 8);
  *(void *)uint64_t v9 = &unk_26E70E0D0;
  int v10 = *(_DWORD *)(a3 + 8);
  *(_WORD *)(v9 + 12) = *(_WORD *)(a3 + 12);
  *(_DWORD *)(v9 + 8) = v10;
  unint64_t v11 = *(void *)(a1 + 64);
  if (v11)
  {
    unint64_t v11 = v8 % *(unsigned int *)(a1 + 88);
    uint64_t v12 = *(unsigned int *)(*(void *)(a1 + 72) + 4 * v11);
    if (v12 != 0x7FFFFFFF)
    {
      uint64_t v18 = *(void *)(a1 + 80);
      if (*(void *)(v18 + 24 * v12 + 8) == v8) {
        return;
      }
      while (1)
      {
        LODWORD(v12) = *(_DWORD *)(v18 + 24 * v12) & 0x7FFFFFFF;
        if (v12 == 0x7FFFFFFF) {
          break;
        }
        if (*(void *)(v18 + 24 * v12 + 8) == v8) {
          return;
        }
      }
    }
  }
  uint64_t v13 = *(unsigned int *)(a1 + 100);
  if (v13 == 0x7FFFFFFF)
  {
    uint64_t v13 = *(unsigned int *)(a1 + 96);
    int v14 = v13;
    if (v13 == *(_DWORD *)(a1 + 88))
    {
      re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(a1 + 64, 2 * *(_DWORD *)(a1 + 92));
      LODWORD(v11) = v8 % *(unsigned int *)(a1 + 88);
      int v14 = *(_DWORD *)(a1 + 96);
    }
    *(_DWORD *)(a1 + re::DynamicArray<re::RigComponentConstraint>::deinit((uint64_t)this + 96) = v14 + 1;
    uint64_t v15 = *(void *)(a1 + 80);
    int v16 = *(_DWORD *)(v15 + 24 * v13);
  }
  else
  {
    uint64_t v15 = *(void *)(a1 + 80);
    int v16 = *(_DWORD *)(v15 + 24 * v13);
    *(_DWORD *)(a1 + 100) = v16 & 0x7FFFFFFF;
  }
  uint64_t v17 = 24 * v13;
  *(_DWORD *)(v15 + v17) = v16 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 80) + v17) = *(_DWORD *)(*(void *)(a1 + 80) + 24 * v13) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 72) + 4 * v11);
  *(void *)(*(void *)(a1 + 80) + 24 * v13 + 8) = v8;
  *(void *)(*(void *)(a1 + 80) + 24 * v13 + 16) = v9;
  *(_DWORD *)(*(void *)(a1 + 72) + 4 * v11) = v13;
  ++*(_DWORD *)(a1 + 92);
  ++*(_DWORD *)(a1 + 104);
}

void re::RenderGraphDataStore::add<re::StencilInfoData,re::StencilInfoData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v21[2] = *MEMORY[0x263EF8340];
  int v19 = 0;
  unint64_t v20 = 0;
  {
    re::introspect<re::StencilInfoData>(void)::info = (_UNKNOWN *)re::introspect_StencilInfoData(0);
  }
  int v19 = re::introspect<re::StencilInfoData>(void)::info;
  size_t v6 = strlen(*((const char **)re::introspect<re::StencilInfoData>(void)::info + 6));
  if (v6)
  {
    MurmurHash3_x64_128(*((void *)re::introspect<re::StencilInfoData>(void)::info + 6), v6, 0, v21);
    unint64_t v7 = (v21[1] - 0x61C8864680B583E9 + (v21[0] << 6) + (v21[0] >> 2)) ^ v21[0];
  }
  else
  {
    unint64_t v7 = 0;
  }
  unint64_t v20 = v7;
  re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addOrReplace<re::IntrospectionStructure const*&>(a1 + 176, &v20, &v19);
  unint64_t v8 = (a2 - 0x61C8864680B583E9 + (v20 << 6) + (v20 >> 2)) ^ v20;
  uint64_t v9 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 32, 8);
  *(void *)uint64_t v9 = &unk_26E70E050;
  long long v10 = *(_OWORD *)(a3 + 8);
  *(unsigned char *)(v9 + 24) = *(unsigned char *)(a3 + 24);
  *(_OWORD *)(v9 + 8) = v10;
  unint64_t v11 = *(void *)(a1 + 64);
  if (v11)
  {
    unint64_t v11 = v8 % *(unsigned int *)(a1 + 88);
    uint64_t v12 = *(unsigned int *)(*(void *)(a1 + 72) + 4 * v11);
    if (v12 != 0x7FFFFFFF)
    {
      uint64_t v18 = *(void *)(a1 + 80);
      if (*(void *)(v18 + 24 * v12 + 8) == v8) {
        return;
      }
      while (1)
      {
        LODWORD(v12) = *(_DWORD *)(v18 + 24 * v12) & 0x7FFFFFFF;
        if (v12 == 0x7FFFFFFF) {
          break;
        }
        if (*(void *)(v18 + 24 * v12 + 8) == v8) {
          return;
        }
      }
    }
  }
  uint64_t v13 = *(unsigned int *)(a1 + 100);
  if (v13 == 0x7FFFFFFF)
  {
    uint64_t v13 = *(unsigned int *)(a1 + 96);
    int v14 = v13;
    if (v13 == *(_DWORD *)(a1 + 88))
    {
      re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(a1 + 64, 2 * *(_DWORD *)(a1 + 92));
      LODWORD(v11) = v8 % *(unsigned int *)(a1 + 88);
      int v14 = *(_DWORD *)(a1 + 96);
    }
    *(_DWORD *)(a1 + re::DynamicArray<re::RigComponentConstraint>::deinit((uint64_t)this + 96) = v14 + 1;
    uint64_t v15 = *(void *)(a1 + 80);
    int v16 = *(_DWORD *)(v15 + 24 * v13);
  }
  else
  {
    uint64_t v15 = *(void *)(a1 + 80);
    int v16 = *(_DWORD *)(v15 + 24 * v13);
    *(_DWORD *)(a1 + 100) = v16 & 0x7FFFFFFF;
  }
  uint64_t v17 = 24 * v13;
  *(_DWORD *)(v15 + v17) = v16 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 80) + v17) = *(_DWORD *)(*(void *)(a1 + 80) + 24 * v13) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 72) + 4 * v11);
  *(void *)(*(void *)(a1 + 80) + 24 * v13 + 8) = v8;
  *(void *)(*(void *)(a1 + 80) + 24 * v13 + 16) = v9;
  *(_DWORD *)(*(void *)(a1 + 72) + 4 * v11) = v13;
  ++*(_DWORD *)(a1 + 92);
  ++*(_DWORD *)(a1 + 104);
}

uint64_t re::RenderGraphDataStore::add<re::MeshLodSelectInputData,re::MeshLodSelectInputData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = (unint64_t)"N2re22MeshLodSelectInputDataE";
  if (((unint64_t)"N2re22MeshLodSelectInputDataE" & 0x8000000000000000) != 0)
  {
    size_t v6 = (unsigned __int8 *)((unint64_t)"N2re22MeshLodSelectInputDataE" & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v7 = 5381;
    do
    {
      unint64_t v5 = v7;
      unsigned int v8 = *v6++;
      uint64_t v7 = (33 * v7) ^ v8;
    }
    while (v8);
  }
  uint64_t v20 = (a2 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9) ^ v5;
  uint64_t v9 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 160, 16);
  *(void *)uint64_t v9 = &unk_26E711050;
  *(unsigned char *)(v9 + 16) = *(unsigned char *)(a3 + 16);
  int v10 = *(unsigned __int8 *)(a3 + 17);
  *(unsigned char *)(v9 + 17) = v10;
  if (v10) {
    *(unsigned char *)(v9 + 18) = *(unsigned char *)(a3 + 18);
  }
  int v11 = *(unsigned __int8 *)(a3 + 20);
  *(unsigned char *)(v9 + 20) = v11;
  if (v11) {
    *(_DWORD *)(v9 + 24) = *(_DWORD *)(a3 + 24);
  }
  long long v12 = *(_OWORD *)(a3 + 32);
  long long v13 = *(_OWORD *)(a3 + 48);
  long long v14 = *(_OWORD *)(a3 + 80);
  *(_OWORD *)(v9 + 64) = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(v9 + 80) = v14;
  *(_OWORD *)(v9 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32) = v12;
  *(_OWORD *)(v9 + 48) = v13;
  long long v15 = *(_OWORD *)(a3 + 96);
  long long v16 = *(_OWORD *)(a3 + 112);
  long long v17 = *(_OWORD *)(a3 + 144);
  *(_OWORD *)(v9 + 128) = *(_OWORD *)(a3 + 128);
  *(_OWORD *)(v9 + 144) = v17;
  *(_OWORD *)(v9 + re::DynamicArray<re::RigComponentConstraint>::deinit((uint64_t)this + 96) = v15;
  *(_OWORD *)(v9 + 112) = v16;
  uint64_t v19 = v9;
  return re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addNew<re::CameraData *>(a1 + 64, (unint64_t *)&v20, &v19);
}

uint64_t re::RenderGraphDataStore::add<re::SceneScope,re::SceneScope>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4 = (unint64_t)"N2re10SceneScopeE";
  if (((unint64_t)"N2re10SceneScopeE" & 0x8000000000000000) != 0)
  {
    unint64_t v5 = (unsigned __int8 *)((unint64_t)"N2re10SceneScopeE" & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v6 = 5381;
    do
    {
      unint64_t v4 = v6;
      unsigned int v7 = *v5++;
      uint64_t v6 = (33 * v6) ^ v7;
    }
    while (v7);
  }
  uint64_t v12 = (a2 + (v4 << 6) + (v4 >> 2) - 0x61C8864680B583E9) ^ v4;
  uint64_t v8 = a1 + 64;
  uint64_t v9 = (void *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 16, 8);
  *uint64_t v9 = &unk_26E711090;
  v9[1] = *(void *)(a3 + 8);
  int v11 = v9;
  return *(void *)re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addNew<re::CameraData *>(v8, (unint64_t *)&v12, &v11);
}