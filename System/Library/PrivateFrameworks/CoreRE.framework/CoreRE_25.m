void re::RenderGraphProfilerOverlayNode::getMaterialParameterTables(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  re::MaterialParameterBlock *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;

  if (*(void *)(a1 + 272))
  {
    v4 = re::AssetHandle::asset<re::MaterialAsset>((re::MaterialAsset *)(a1 + 264));
    if (v4)
    {
      v5 = *(re::MaterialParameterBlock **)(v4 + 1672);
      if (v5)
      {
        v6 = *(void *)(a1 + 272);
        if (v6) {
          v7 = *(void *)(v6 + 664);
        }
        else {
          v7 = 0;
        }
        v8 = 0x94D049BB133111EBLL
           * ((0xBF58476D1CE4E5B9 * (v6 ^ (v6 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v6 ^ (v6 >> 30))) >> 27));
        v10 = v7 ^ (v8 >> 31) ^ v8;
        re::MaterialParameterBlock::createMaterialParameterTableIfNeeded(v5, &v9);
        re::HashTable<unsigned long,re::SharedPtr<re::MaterialParameterTable>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::add(a2, &v10, &v9);
        if (v9) {
      }
        }
    }
  }
}

void re::RenderGraphProfilerOverlayNode::executeSystemHUDRendering(re::RenderGraphContext &)::$_0::operator()(uint64_t *a1, int a2, int a3, int a4, void *a5)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  uint64_t v10 = *a1;
  re::StringID::invalid((re::StringID *)v46);
  uint64_t v47 = 0x3F8000003F800000;
  uint64_t v48 = 0x3F8000003F800000;
  float32x4_t v49 = 0u;
  float32x4_t v50 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  long long v53 = 0u;
  uint64_t v54 = -1;
  re::StringID::invalid((re::StringID *)v36);
  long long v40 = 0u;
  long long v41 = 0u;
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  uint64_t v42 = -1;
  long long v45 = re::kInvalidStringRenderHandle;
  long long v11 = *(_OWORD *)(v10 + 352);
  long long v38 = 0u;
  long long v39 = 0u;
  long long v37 = v11;
  HIDWORD(v37) = 1065353216;
  re::StringID::operator=(v36, (uint64_t *)(*(void *)(a1[1] + 8) + 8));
  re::TextManager::drawDynamicText(*(void *)(*(void *)(a1[1] + 8) + 72), (uint64_t)v46, a5, (uint64_t)v36);
  uint64_t v12 = a1[1];
  int v13 = *(_DWORD *)a1[2];
  int v14 = *(_DWORD *)a1[3];
  if (v14 >= 0) {
    int v15 = *(_DWORD *)a1[3];
  }
  else {
    int v15 = v14 + 1;
  }
  double v16 = (double)-(v15 >> 1);
  int v17 = a4 / v13;
  int v18 = *(_DWORD *)a1[4];
  if (v18 >= 0) {
    int v19 = *(_DWORD *)a1[4];
  }
  else {
    int v19 = v18 + 1;
  }
  double v24 = (double)-(v19 >> 1);
  float v20 = v16 + 1.0 / (double)v13 * (double)v14 * (double)(a4 % v13);
  int v21 = v14 / v13;
  int v22 = *(_DWORD *)a1[5];
  float v23 = v24 + 1.0 / (double)v22 * (double)v18 * (double)(v17 + 1);
  *(float *)&double v24 = *(float *)(v10 + 380) * (float)(v21 / a3);
  if (*(float *)&v24 > (float)(*(float *)(v10 + 376) * (float)(v18 / v22 / a2))) {
    *(float *)&double v24 = *(float *)(v10 + 376) * (float)(v18 / v22 / a2);
  }
  *(float *)&double v24 = *(float *)a1[6] * *(float *)&v24;
  __asm { FMOV            V5.4S, #1.0 }
  *(void *)&_Q5 = __PAIR64__(LODWORD(v23), LODWORD(v20));
  float32x4_t v49 = vmulq_n_f32((float32x4_t)xmmword_23435FD50, *(float *)&v24);
  float32x4_t v50 = vmulq_n_f32((float32x4_t)xmmword_23435FD60, *(float *)vshrq_n_u64((uint64x2_t)vdupq_lane_s32(*(int32x2_t *)&v24, 0), 0x20uLL).i32);
  long long v51 = xmmword_23435FD80;
  long long v52 = _Q5;
  v30 = *(re::TextManager **)(*(void *)(v12 + 8) + 72);
  re::RenderGraphContext::rtInfo((re::RenderGraphContext *)v12, *(re::RenderGraphNodeBase **)(v12 + 40), (uint64_t)v35);
  uint64_t v31 = *(void *)a1[7];
  if (v31)
  {
    long long v32 = *(_OWORD *)(v31 + 8);
    char v34 = *(unsigned char *)(v31 + 24);
    long long v33 = v32;
  }
  else
  {
    *(void *)&long long v33 = 134217472;
    *((void *)&v33 + 1) = 134217472;
    char v34 = 0;
  }
  re::TextManager::render(v30, v35, (uint64_t)&v33, a1[8], *(void *)a1[1], *(_OWORD *)(a1 + 9), (unsigned char *)a1[11], (uint64_t)v46, *(unsigned char *)a1[12], 0);
  re::StringID::destroyString((re::StringID *)v36);
  re::StringID::destroyString((re::StringID *)v46);
}

uint64_t re::RenderGraphProfilerOverlayNode::executeMiniHUDRendering(re::RenderGraphContext &)::$_0::operator()(uint64_t result, uint64_t a2, unint64_t *a3, _DWORD *a4, double a5, double a6, float a7)
{
  if (*(float *)&a5 > 1.0) {
    *(float *)&a5 = 1.0;
  }
  if (*(float *)&a6 < 0.0) {
    *(float *)&a6 = 0.0;
  }
  v7 = *(void **)(result + 16);
  unint64_t v8 = v7[1];
  if (v8 <= *a3)
  {
    re::internal::assertLog((re::internal *)6, a2, a5, a6, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, *a3, v8);
    _os_crash();
    __break(1u);
    goto LABEL_15;
  }
  float32x4_t v9 = vmulq_n_f32(*(float32x4_t *)*(void *)result, *(float *)&a5);
  __asm { FMOV            V0.4S, #1.0 }
  HIDWORD(v15) = HIDWORD(_Q0);
  *(float *)&long long v15 = **(float **)(result + 24) + a7;
  *((float *)&v15 + 1) = **(float **)(result + 32) - (float)(**(float **)(result + 40) * (float)(int)a2);
  float32x4_t v16 = vaddq_f32(v9, vmulq_n_f32(*(float32x4_t *)*(void *)(result + 8), *(float *)&a6));
  DWORD2(v15) = *a4;
  int v17 = (_OWORD *)(*v7 + 32 * *a3);
  *int v17 = v15;
  v17[1] = v16;
  int v18 = *(void **)(result + 16);
  unint64_t v19 = *a3 + 1;
  unint64_t v20 = v18[1];
  if (v20 <= v19)
  {
LABEL_15:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v19, v20);
    _os_crash();
    __break(1u);
    goto LABEL_16;
  }
  HIDWORD(v21) = HIDWORD(_Q0);
  LODWORD(v21) = **(_DWORD **)(result + 24);
  *((float *)&v21 + 1) = **(float **)(result + 32) - (float)(**(float **)(result + 40) * (float)(int)a2);
  DWORD2(v21) = *a4;
  int v22 = (_OWORD *)(*v18 + 32 * v19);
  *int v22 = v21;
  v22[1] = v16;
  float v23 = *(void **)(result + 16);
  unint64_t v24 = *a3 + 2;
  unint64_t v25 = v23[1];
  if (v25 <= v24)
  {
LABEL_16:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v24, v25);
    _os_crash();
    __break(1u);
    goto LABEL_17;
  }
  float v26 = (float)(a2 + 1);
  HIDWORD(v27) = HIDWORD(_Q0);
  LODWORD(v27) = **(_DWORD **)(result + 24);
  *((float *)&v27 + 1) = **(float **)(result + 32) - (float)(**(float **)(result + 40) * v26);
  DWORD2(v27) = *a4;
  v28 = (_OWORD *)(*v23 + 32 * v24);
  _OWORD *v28 = v27;
  v28[1] = v16;
  v29 = *(void **)(result + 16);
  unint64_t v30 = *a3 + 3;
  unint64_t v31 = v29[1];
  if (v31 <= v30)
  {
LABEL_17:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v30, v31);
    _os_crash();
    __break(1u);
    goto LABEL_18;
  }
  *(float *)&_Q0 = **(float **)(result + 24) + a7;
  *((float *)&_Q0 + 1) = **(float **)(result + 32) - (float)(**(float **)(result + 40) * v26);
  DWORD2(_Q0) = *a4;
  long long v32 = (_OWORD *)(*v29 + 32 * v30);
  *long long v32 = _Q0;
  v32[1] = v16;
  long long v33 = *(void **)(result + 16);
  unint64_t v34 = *a3;
  unint64_t v35 = v33[1];
  if (v35 <= *a3)
  {
LABEL_18:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v34, v35);
    _os_crash();
    __break(1u);
    goto LABEL_19;
  }
  unint64_t v36 = v34 + 4;
  if (v35 <= v34 + 4)
  {
LABEL_19:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v36, v35);
    _os_crash();
    __break(1u);
    goto LABEL_20;
  }
  long long v37 = (_OWORD *)(*v33 + 32 * v34);
  long long v38 = (_OWORD *)(*v33 + 32 * v36);
  long long v39 = v37[1];
  *long long v38 = *v37;
  v38[1] = v39;
  long long v40 = *(void **)(result + 16);
  unint64_t v41 = *a3 + 2;
  unint64_t v42 = v40[1];
  if (v42 <= v41)
  {
LABEL_20:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v41, v42);
    _os_crash();
    __break(1u);
    goto LABEL_21;
  }
  unint64_t v43 = *a3 + 5;
  if (v42 > v43)
  {
    uint64_t v44 = (_OWORD *)(*v40 + 32 * v41);
    long long v45 = (_OWORD *)(*v40 + 32 * v43);
    long long v46 = v44[1];
    *long long v45 = *v44;
    v45[1] = v46;
    *a3 += 6;
    *(float *)a4 = *(float *)a4 + 0.01;
    return result;
  }
LABEL_21:
  re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v43, v42);
  result = _os_crash();
  __break(1u);
  return result;
}

void re::RenderGraphProfilerOverlayNode::executeMiniHUDRendering(re::RenderGraphContext &)::$_1::operator()(uint64_t *a1, int a2, void *a3)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  uint64_t v6 = *a1;
  re::StringID::invalid((re::StringID *)v31);
  uint64_t v32 = 0x3F8000003F800000;
  uint64_t v33 = 0x3F8000003F800000;
  float32x4_t v34 = 0u;
  float32x4_t v35 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  uint64_t v39 = -1;
  re::StringID::invalid((re::StringID *)v21);
  long long v25 = 0u;
  long long v26 = 0u;
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  uint64_t v27 = -1;
  long long v30 = re::kInvalidStringRenderHandle;
  long long v7 = *(_OWORD *)(v6 + 384);
  long long v23 = 0u;
  long long v24 = 0u;
  long long v22 = v7;
  HIDWORD(v22) = _MergedGlobals_452;
  re::StringID::operator=(v21, (uint64_t *)(*(void *)(a1[1] + 8) + 8));
  re::TextManager::drawDynamicText(*(void *)(*(void *)(a1[1] + 8) + 72), (uint64_t)v31, a3, (uint64_t)v21);
  uint64_t v8 = a1[1];
  *(float *)v9.i32 = *(float *)(v6 + 372) * 32.0;
  __asm { FMOV            V5.4S, #1.0 }
  *(float *)&_Q5 = *(float *)a1[2] + 8.0;
  *((float *)&_Q5 + 1) = (float)(*(float *)a1[4] + (float)(*(float *)a1[5] / -3.0))
                       - (float)(*(float *)a1[5] * (float)a2);
  float32x4_t v34 = vmulq_n_f32((float32x4_t)xmmword_23435FD50, *(float *)v9.i32);
  float32x4_t v35 = vmulq_n_f32((float32x4_t)xmmword_23435FD60, *(float *)vshrq_n_u64((uint64x2_t)vdupq_lane_s32(v9, 0), 0x20uLL).i32);
  long long v36 = xmmword_23435FD80;
  long long v37 = _Q5;
  long long v15 = *(re::TextManager **)(*(void *)(v8 + 8) + 72);
  re::RenderGraphContext::rtInfo((re::RenderGraphContext *)v8, *(re::RenderGraphNodeBase **)(v8 + 40), (uint64_t)v20);
  uint64_t v16 = *(void *)a1[7];
  if (v16)
  {
    long long v17 = *(_OWORD *)(v16 + 8);
    char v19 = *(unsigned char *)(v16 + 24);
    long long v18 = v17;
  }
  else
  {
    *(void *)&long long v18 = 134217472;
    *((void *)&v18 + 1) = 134217472;
    char v19 = 0;
  }
  re::TextManager::render(v15, v20, (uint64_t)&v18, a1[8], *(void *)a1[1], *(_OWORD *)(a1 + 9), (unsigned char *)a1[11], (uint64_t)v31, *(unsigned char *)a1[12], 0);
  re::StringID::destroyString((re::StringID *)v21);
  re::StringID::destroyString((re::StringID *)v31);
}

uint64_t std::vector<re::RenderText>::push_back[abi:nn180100](uint64_t *a1, StringID *a2)
{
  v4 = a1 + 2;
  unint64_t v5 = a1[2];
  uint64_t v6 = (re::StringID *)a1[1];
  if ((unint64_t)v6 >= v5)
  {
    uint64_t v14 = ((uint64_t)v6 - *a1) >> 7;
    if ((unint64_t)(v14 + 1) >> 57) {
      abort();
    }
    uint64_t v15 = v5 - *a1;
    uint64_t v16 = v15 >> 6;
    if (v15 >> 6 <= (unint64_t)(v14 + 1)) {
      uint64_t v16 = v14 + 1;
    }
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFF80) {
      unint64_t v17 = 0x1FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v16;
    }
    v25[4] = v4;
    if (v17) {
      unint64_t v17 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<re::RenderText>>(v17);
    }
    else {
      uint64_t v18 = 0;
    }
    unint64_t v19 = v17 + (v14 << 7);
    v25[0] = v17;
    v25[1] = v19;
    v25[3] = v17 + (v18 << 7);
    re::StringID::StringID((re::StringID *)v19, a2);
    StringID v21 = a2[2];
    StringID v20 = a2[3];
    *(StringID *)(v19 + 16) = a2[1];
    *(StringID *)(v19 + 32) = v21;
    *(StringID *)(v19 + 48) = v20;
    StringID v22 = a2[4];
    StringID v23 = a2[5];
    StringID v24 = a2[6];
    *(void *)(v19 + 112) = *(void *)&a2[7].var0;
    *(StringID *)(v19 + 80) = v23;
    *(StringID *)(v19 + 96) = v24;
    *(StringID *)(v19 + 64) = v22;
    v25[2] = v19 + 128;
    std::vector<re::RenderText>::__swap_out_circular_buffer(a1, v25);
    uint64_t v13 = a1[1];
    uint64_t result = std::__split_buffer<re::RenderText>::~__split_buffer((uint64_t)v25);
  }
  else
  {
    uint64_t result = (uint64_t)re::StringID::StringID(v6, a2);
    StringID v8 = a2[1];
    StringID v9 = a2[3];
    *(StringID *)(result + 32) = a2[2];
    *(StringID *)(result + 48) = v9;
    *(StringID *)(result + 16) = v8;
    StringID v10 = a2[4];
    StringID v11 = a2[5];
    StringID v12 = a2[6];
    *(void *)(result + 112) = *(void *)&a2[7].var0;
    *(StringID *)(result + 80) = v11;
    *(StringID *)(result + 96) = v12;
    *(StringID *)(result + 64) = v10;
    uint64_t v13 = result + 128;
  }
  a1[1] = v13;
  return result;
}

void *re::allocInfo_RenderGraphProfilerOverlayNode(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9B7C0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9B7C0))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF9B7E0, "RenderGraphProfilerOverlayNode");
    __cxa_guard_release(&qword_26AF9B7C0);
  }
  return &unk_26AF9B7E0;
}

void re::initInfo_RenderGraphProfilerOverlayNode(re *this, re::IntrospectionBase *a2)
{
  v13[0] = 0x88E0128837D64CE2;
  v13[1] = "RenderGraphProfilerOverlayNode";
  re::StringID::destroyString((re::StringID *)v13);
  *((_OWORD *)this + 2) = v14;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9B7C8, memory_order_acquire) & 1) == 0)
  {
    v4 = (re *)__cxa_guard_acquire(&qword_26AF9B7C8);
    if (v4)
    {
      unint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::introspect_RenderGraphNode((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "RenderGraphNode";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF9B7D0 = v7;
      StringID v8 = re::introspectionAllocator((re *)v7);
      StringID v10 = re::introspect_AssetHandle((re *)1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + 8) = "profilerMaterialAsset";
      *(void *)(v11 + 16) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x10800000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + 48) = 0;
      *(void *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF9B7D8 = v11;
      __cxa_guard_release(&qword_26AF9B7C8);
    }
  }
  *((void *)this + 2) = 0x1A000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((void *)this + 8) = &qword_26AF9B7D0;
  *((void *)this + 9) = re::internal::defaultConstruct<re::RenderGraphProfilerOverlayNode>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::RenderGraphProfilerOverlayNode>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::RenderGraphProfilerOverlayNode>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::RenderGraphProfilerOverlayNode>;
  re::IntrospectionRegistry::add(this, v3);
  long long v12 = v14;
}

double re::internal::defaultConstruct<re::RenderGraphProfilerOverlayNode>(int a1, int a2, re::RenderGraphProfilerOverlayNode *this)
{
  *(void *)&double result = re::RenderGraphProfilerOverlayNode::RenderGraphProfilerOverlayNode(this).n128_u64[0];
  return result;
}

void re::internal::defaultDestruct<re::RenderGraphProfilerOverlayNode>(uint64_t a1, uint64_t a2, id *a3)
{
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 33));
  re::RenderGraphNode::~RenderGraphNode(a3);
}

void re::internal::defaultDestructV2<re::RenderGraphProfilerOverlayNode>(id *a1)
{
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 33));
  re::RenderGraphNode::~RenderGraphNode(a1);
}

uint64_t re::introspect_RenderGraphProfilerOverlayNode(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RenderGraphProfilerOverlayNode", (uint64_t (*)(re::internal *))re::allocInfo_RenderGraphProfilerOverlayNode, (re::IntrospectionBase *(*)(void))re::initInfo_RenderGraphProfilerOverlayNode, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::RenderGraphProfilerOverlayNode>, this);
}

void re::ProfilerOverlayRenderGraphProvider::~ProfilerOverlayRenderGraphProvider(re::ProfilerOverlayRenderGraphProvider *this)
{
  *(void *)this = &unk_26E6D52C8;
  re::DynamicString::deinit((re::ProfilerOverlayRenderGraphProvider *)((char *)this + 8));
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E6D52C8;
  re::DynamicString::deinit((re::ProfilerOverlayRenderGraphProvider *)((char *)this + 8));
  JUMPOUT(0x237DBCBD0);
}

void re::RenderGraphProfilerOverlayNode::~RenderGraphProfilerOverlayNode(id *this)
{
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(this + 33));
  re::RenderGraphNode::~RenderGraphNode(this);
}

{
  uint64_t vars8;

  re::AssetHandle::~AssetHandle((re::AssetHandle *)(this + 33));
  re::RenderGraphNode::~RenderGraphNode(this);
  JUMPOUT(0x237DBCBD0);
}

re::DynamicString *re::ProfilerMiniHudStatistics::copy(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  re::DynamicString::operator=((re::DynamicString *)(a1 + 56), (re::DynamicString *)(a2 + 56));
  re::DynamicString::operator=((re::DynamicString *)(a1 + 88), (re::DynamicString *)(a2 + 88));
  re::DynamicString::operator=((re::DynamicString *)(a1 + 120), (re::DynamicString *)(a2 + 120));
  re::DynamicString::operator=((re::DynamicString *)(a1 + 152), (re::DynamicString *)(a2 + 152));
  re::DynamicString::operator=((re::DynamicString *)(a1 + 184), (re::DynamicString *)(a2 + 184));
  re::DynamicString::operator=((re::DynamicString *)(a1 + 216), (re::DynamicString *)(a2 + 216));
  re::DynamicString::operator=((re::DynamicString *)(a1 + 248), (re::DynamicString *)(a2 + 248));
  re::DynamicString::operator=((re::DynamicString *)(a1 + 280), (re::DynamicString *)(a2 + 280));
  re::DynamicString::operator=((re::DynamicString *)(a1 + 312), (re::DynamicString *)(a2 + 312));
  re::DynamicString::operator=((re::DynamicString *)(a1 + 344), (re::DynamicString *)(a2 + 344));
  double result = re::DynamicString::operator=((re::DynamicString *)(a1 + 376), (re::DynamicString *)(a2 + 376));
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  return result;
}

uint64_t *std::vector<re::RenderText>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  if (v2 != *result)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = v4 + v5;
      uint64_t v7 = v2 + v5;
      uint64_t v8 = *(void *)(v2 + v5 - 128);
      *(void *)(v6 - 128) = *(void *)(v4 + v5 - 128) & 0xFFFFFFFFFFFFFFFELL | v8 & 1;
      *(void *)(v6 - 128) = *(void *)(v2 + v5 - 128) & 0xFFFFFFFFFFFFFFFELL | v8 & 1;
      *(void *)(v6 - 120) = *(void *)(v2 + v5 - 120);
      *(void *)(v7 - 128) = 0;
      *(void *)(v7 - 120) = "";
      uint64_t v9 = *(void *)(v2 + v5 - 16);
      long long v10 = *(_OWORD *)(v2 + v5 - 64);
      long long v11 = *(_OWORD *)(v2 + v5 - 32);
      *(_OWORD *)(v6 - 48) = *(_OWORD *)(v2 + v5 - 48);
      *(_OWORD *)(v6 - 32) = v11;
      *(_OWORD *)(v6 - 64) = v10;
      long long v13 = *(_OWORD *)(v2 + v5 - 96);
      long long v12 = *(_OWORD *)(v2 + v5 - 80);
      *(_OWORD *)(v6 - 112) = *(_OWORD *)(v2 + v5 - 112);
      *(_OWORD *)(v6 - 96) = v13;
      *(_OWORD *)(v6 - 80) = v12;
      *(void *)(v6 - 16) = v9;
      v5 -= 128;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  uint64_t v14 = *result;
  *double result = v4;
  a2[1] = v14;
  uint64_t v15 = result[1];
  result[1] = a2[2];
  a2[2] = v15;
  uint64_t v16 = result[2];
  result[2] = a2[3];
  a2[3] = v16;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<re::RenderText>>(unint64_t a1)
{
  if (a1 >> 57) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(a1 << 7);
}

uint64_t std::__split_buffer<re::RenderText>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 128;
    re::StringID::destroyString((re::StringID *)(i - 128));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

__n128 re::RenderGraphProfilerOverlayNode::RenderGraphProfilerOverlayNode(re::RenderGraphProfilerOverlayNode *this)
{
  v1 = re::RenderGraphNode::RenderGraphNode(this);
  *((_DWORD *)v1 + 64) = 1;
  *(void *)v1 = &unk_26E71B510;
  *(_OWORD *)((char *)v1 + 264) = 0u;
  *(_OWORD *)((char *)v1 + 280) = 0u;
  __asm { FMOV            V0.4S, #1.0 }
  *((__n128 *)v1 + 19) = result;
  *((_OWORD *)v1 + 20) = xmmword_23440EAE0;
  *((void *)v1 + 42) = 0x3F33333341A00000;
  *((_DWORD *)v1 + 86) = 1061997773;
  *((_OWORD *)v1 + 22) = xmmword_234396400;
  *((_OWORD *)v1 + 23) = xmmword_23440EAF0;
  *((__n128 *)v1 + 24) = result;
  *((_DWORD *)v1 + 100) = 1050253722;
  return result;
}

void *re::allocInfo_BtStencilPrepassNode(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_453, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_453))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF9B878, "BtStencilPrepassNode");
    __cxa_guard_release(&_MergedGlobals_453);
  }
  return &unk_26AF9B878;
}

void re::initInfo_BtStencilPrepassNode(re *this, re::IntrospectionBase *a2)
{
  v13[0] = 0x6343F9729E3C5C18;
  v13[1] = "BtStencilPrepassNode";
  re::StringID::destroyString((re::StringID *)v13);
  *((_OWORD *)this + 2) = v14;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9B860, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF9B860);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::introspect_RenderGraphNode((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "RenderGraphNode";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF9B868 = v7;
      uint64_t v8 = re::introspectionAllocator((re *)v7);
      long long v10 = re::introspect_BOOL((re *)1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + 8) = "debugPass";
      *(void *)(v11 + 16) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x10000000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + 48) = 0;
      *(void *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF9B870 = v11;
      __cxa_guard_release(&qword_26AF9B860);
    }
  }
  *((void *)this + 2) = 0x10800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((void *)this + 8) = &qword_26AF9B868;
  *((void *)this + 9) = re::internal::defaultConstruct<re::BtStencilPrepassNode>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::BtStencilPrepassNode>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::BtStencilPrepassNode>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::BtStencilPrepassNode>;
  re::IntrospectionRegistry::add(this, v3);
  long long v12 = v14;
}

re::RenderGraphNode *re::internal::defaultConstruct<re::BtStencilPrepassNode>(int a1, int a2, re::RenderGraphNode *this)
{
  __n128 result = re::RenderGraphNode::RenderGraphNode(this);
  *(void *)__n128 result = &unk_26E6C6490;
  *((unsigned char *)result + 256) = 0;
  return result;
}

uint64_t re::internal::defaultDestruct<re::BtStencilPrepassNode>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

re::RenderGraphNode *re::internal::defaultConstructV2<re::BtStencilPrepassNode>(re::RenderGraphNode *a1)
{
  __n128 result = re::RenderGraphNode::RenderGraphNode(a1);
  *(void *)__n128 result = &unk_26E6C6490;
  *((unsigned char *)result + 256) = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::BtStencilPrepassNode>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::introspect_BtStencilPrepassNode(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"BtStencilPrepassNode", (uint64_t (*)(re::internal *))re::allocInfo_BtStencilPrepassNode, (re::IntrospectionBase *(*)(void))re::initInfo_BtStencilPrepassNode, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::BtStencilPrepassNode>, this);
}

void re::ProjectiveShadowBuilder::MutableState::~MutableState(re::ProjectiveShadowBuilder::MutableState *this)
{
  if (*(void *)this)
  {

    *(void *)this = 0;
  }
  uint64_t v2 = *((void *)this + 1);
  if (v2)
  {

    *((void *)this + 1) = 0;
    if (*(void *)this)
    {

      *(void *)this = 0;
    }
  }
}

void re::ProjectiveShadowBuilder::build(re::RenderManager *this@<X2>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v381 = *MEMORY[0x263EF8340];
  unint64_t v7 = re::RenderManager::perFrameAllocator(this);
  uint64_t v298 = a2;
  unint64_t v8 = *(void *)(a2 + 8);
  *(void *)buf = v7;
  memset(&buf[8], 0, 52);
  *(void *)&buf[60] = 0x7FFFFFFFLL;
  re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)&buf[24], v7, 3);
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  uint64_t v263 = v7;
  *(void *)(a4 + 8) = v7;
  *(void *)(a4 + 16) = v8;
  if (v8)
  {
    if (v8 >= 0x38E38E38E38E38FLL)
    {
LABEL_243:
      re::internal::assertLog((re::internal *)6, v9, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 72, v8);
      _os_crash();
      __break(1u);
LABEL_244:
      re::internal::assertLog((re::internal *)4, v11, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
      _os_crash();
      __break(1u);
LABEL_245:
      *(void *)&v331[0] = 0;
      memset(buf, 0, 80);
      unint64_t v84 = &_os_log_internal;
      unint64_t v249 = v232;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)v379 = 136315906;
      *(void *)(v4 + 4) = "operator[]";
      *(_WORD *)&v379[12] = 1024;
      *(_DWORD *)(v4 + 14) = 468;
      *(_WORD *)&v379[18] = 2048;
      *(void *)(v4 + 20) = v249;
      *(_WORD *)&v379[28] = 2048;
      *(void *)(v4 + 30) = v7;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_246:
      *(void *)&v331[0] = 0;
      memset(buf, 0, 80);
      unint64_t v250 = v84;
      unint64_t v99 = &_os_log_internal;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)v379 = 136315906;
      *(void *)(v4 + 4) = "operator[]";
      *(_WORD *)&v379[12] = 1024;
      *(_DWORD *)(v4 + 14) = 468;
      *(_WORD *)&v379[18] = 2048;
      *(void *)(v4 + 20) = v250;
      *(_WORD *)&v379[28] = 2048;
      *(void *)(v4 + 30) = v7;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_247:
      re::internal::assertLog((re::internal *)6, v100, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 96, v99);
      _os_crash();
      __break(1u);
LABEL_248:
      re::internal::assertLog((re::internal *)4, v102, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
      _os_crash();
      __break(1u);
LABEL_249:
      re::internal::assertLog((re::internal *)6, v106, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 40, v99);
      _os_crash();
      __break(1u);
LABEL_250:
      re::internal::assertLog((re::internal *)4, v108, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
      _os_crash();
      __break(1u);
LABEL_251:
      re::internal::assertLog((re::internal *)4, v120, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || m_allocator == other.m_allocator", "operator=", 296);
      _os_crash();
      __break(1u);
    }
    uint64_t v10 = (*(uint64_t (**)(unint64_t, unint64_t, uint64_t))(*(void *)v7 + 32))(v7, 72 * v8, 8);
    *(void *)(a4 + 24) = v10;
    if (!v10) {
      goto LABEL_244;
    }
    for (uint64_t i = (uint64_t *)v10; --v8; i += 9)
    {
      re::FixedArray<re::PlanarReceiverData::Bucket>::FixedArray(i, (uint64_t *)buf);
      re::HashTable<unsigned long long,re::PlanarReceiverEntry,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::HashTable((uint64_t)(i + 3), (uint64_t)&buf[24]);
    }
    re::FixedArray<re::PlanarReceiverData::Bucket>::FixedArray(i, (uint64_t *)buf);
    re::HashTable<unsigned long long,re::PlanarReceiverEntry,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::HashTable((uint64_t)(i + 3), (uint64_t)&buf[24]);
  }
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)&buf[24]);
  long long v13 = (re *)re::FixedArray<re::PlanarReceiverData::Bucket>::deinit(buf);
  uint64_t v14 = a2;
  if (!*(unsigned char *)(a2 + 32)) {
    return;
  }
  if (!*(void *)(a2 + 48))
  {
    float32x4_t v34 = *re::graphicsLogObjects(v13);
    if (!os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    *(_WORD *)buf = 0;
    float32x4_t v35 = "ProjectiveShadowBuilder::build: Missing projective shadow material";
    goto LABEL_39;
  }
  if (!*(void *)(a2 + 56))
  {
    float32x4_t v34 = *re::graphicsLogObjects(v13);
    if (!os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    *(_WORD *)buf = 0;
    float32x4_t v35 = "ProjectiveShadowBuilder::build: Missing projective shadow receiver material";
LABEL_39:
    _os_log_impl(&dword_233120000, v34, OS_LOG_TYPE_DEFAULT, v35, buf, 2u);
    return;
  }
  if (!*(void *)a3)
  {
    *(void *)buf = this;
    re::make::shared::object<re::MaterialParameterBlock,re::RenderManager *&>((re *)buf, (re::MaterialParameterBlock **)v379);
    uint64_t v15 = *(re::MaterialParameterBlock **)a3;
    *(void *)a3 = *(void *)v379;
    *(void *)v379 = v15;
    if (v15) {

    }
    uint64_t v14 = a2;
  }
  if (!*(void *)(a3 + 8))
  {
    *(void *)buf = this;
    re::make::shared::object<re::MaterialParameterBlock,re::RenderManager *&>((re *)buf, (re::MaterialParameterBlock **)v379);
    uint64_t v16 = *(void *)(a3 + 8);
    *(void *)(a3 + 8) = *(void *)v379;
    *(void *)v379 = v16;
    if (v16) {

    }
    uint64_t v14 = a2;
  }
  uint64_t v4 = v379;
  uint64_t v17 = *(void *)(v14 + 8);
  uint64_t v18 = *(void *)(v14 + 16);
  uint64_t v19 = v18 + 56 * v17;
  if (v17)
  {
    int v20 = 0;
    int v21 = 0;
    uint64_t v22 = *(void *)(v14 + 16);
    while (1)
    {
      uint64_t v23 = *(void *)(v22 + 40);
      if (v23) {
        break;
      }
LABEL_33:
      v22 += 56;
      if (v22 == v19) {
        goto LABEL_41;
      }
    }
    unint64_t v24 = 0;
    unint64_t v25 = *(void *)(v22 + 8);
    while (1)
    {
      unint64_t v26 = v24 >> 2;
      if (v25 <= v24 >> 2) {
        break;
      }
      uint64_t v27 = v22 + 24;
      if ((*(unsigned char *)(v22 + 16) & 1) == 0) {
        uint64_t v27 = *(void *)(v22 + 32);
      }
      uint64_t v28 = *(void *)(v27 + 8 * v26) + 120 * (v24 & 3);
      uint64_t v29 = *(void *)(v28 + 56);
      if (v29)
      {
        uint64_t v30 = *(void *)(v28 + 72);
        uint64_t v31 = 96 * v29;
        uint64_t v32 = (float *)(v30 + 12);
        do
        {
          float v33 = *v32;
          v32 += 24;
          if (v33 < *(float *)(v14 + 288)) {
            ++v20;
          }
          else {
            ++v21;
          }
          v31 -= 96;
        }
        while (v31);
      }
      if (++v24 == v23) {
        goto LABEL_33;
      }
    }
    *(void *)&v331[0] = 0;
    memset(buf, 0, 80);
    uint64_t v18 = &_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v379 = 136315906;
    *(void *)&v379[4] = "operator[]";
    *(_WORD *)&v379[12] = 1024;
    *(_DWORD *)&v379[14] = 866;
    *(_WORD *)&v379[18] = 2048;
    *(void *)&v379[20] = v26;
    *(_WORD *)&v379[28] = 2048;
    *(void *)&v379[30] = v25;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_52;
  }
  int v21 = 0;
  int v20 = 0;
LABEL_41:
  unsigned int v36 = 4 * v21;
  unsigned int v37 = v20 + 4 * v21;
  uint32x2_t v38 = *(uint32x2_t *)(v14 + 280);
  if (v38.i32[0]) {
    _ZF = HIDWORD(*(void *)(v14 + 280)) == 0;
  }
  else {
    _ZF = 1;
  }
  if (_ZF)
  {
    if (v37 >= 5)
    {
      if (v37 > 0x10)
      {
LABEL_52:
        uint32x2_t v38 = (uint32x2_t)0x40000000200;
        goto LABEL_53;
      }
      unsigned int v40 = 512;
      int v41 = 4;
    }
    else
    {
      unsigned int v40 = 256;
      int v41 = 2;
    }
    *(_DWORD *)(a3 + 16) = v41;
    uint32x2_t v38 = (uint32x2_t)vdup_n_s32(v40);
  }
LABEL_53:
  uint32x2_t v314 = v38;
  float32x2_t v251 = vcvt_f32_u32(v38);
  float v42 = vdiv_f32((float32x2_t)vdup_lane_s32((int32x2_t)v251, 1), v251).f32[0];
  unsigned int v43 = (int)((float)(sqrtf((float)v37 / v42) + 0.5) + 0.5);
  if ((v43 & 0xFFFFFFFE)
     * (float)((float)((float)((float)v43 * v42) * 0.5) + (float)((float)((float)v43 * v42) * 0.5)) < v36)
    ++v43;
  if (*(_DWORD *)(a3 + 16) <= v43) {
    unsigned int v44 = v43;
  }
  else {
    unsigned int v44 = *(_DWORD *)(a3 + 16);
  }
  *(_DWORD *)(a3 + 16) = v44;
  *(void *)&buf[32] = 0;
  memset(buf, 0, 28);
  __asm { FMOV            V10.2S, #1.0 }
  uint64_t v254 = a4;
  if (v17)
  {
    uint64_t v49 = 0;
    unsigned int v50 = 2 * v44;
    float v310 = (float)(float)(v42 * (float)v44);
    *(float *)&uint64_t v51 = (float)v44;
    *((float *)&v51 + 1) = v310;
    float32x4_t v318 = (float32x4_t)vdupq_lane_s64(v51, 0);
    do
    {
      uint64_t v52 = *(void *)(v18 + 40);
      if (v52)
      {
        for (unint64_t j = 0; j != v52; ++j)
        {
          uint64_t v54 = re::BucketArray<re::ProjectiveShadowBuilder::Input::PerSceneData,4ul>::operator[](v18, j);
          uint64_t v56 = *(void *)(v54 + 56);
          if (v56)
          {
            v57 = *(float32x4_t **)(v54 + 72);
            v58 = &v57[6 * v56];
            uint64_t v14 = v298;
            do
            {
              float v59 = v57->f32[3];
              float v60 = *(float *)(v14 + 288);
              if (v59 >= v60)
              {
                if (v49 % v50) {
                  BOOL v61 = v49 % v50 + 4 > v50;
                }
                else {
                  BOOL v61 = 0;
                }
                if (v61)
                {
                  do
                  {
                    *(_DWORD *)v379 = v49;
                    LODWORD(v49) = v49 + 1;
                    re::DynamicArray<int>::add(buf, v379);
                  }
                  while (v49 % v50);
                  float v59 = v57->f32[3];
                  uint64_t v14 = v298;
                  float v60 = *(float *)(v298 + 288);
                }
                uint64_t v62 = (v49 + 4);
                unsigned int v63 = (v49 >> 1) % v44;
                unsigned int v64 = v49 & 1 | (2 * (v49 / v50));
                float v65 = v59 - v60;
                float v66 = *(float *)(v14 + 292);
                if (v66 < 0.000001) {
                  float v66 = 0.000001;
                }
                float v67 = 1.0 - (float)(v65 / v66);
                if (v67 > 1.0) {
                  float v67 = 1.0;
                }
                v55.f32[0] = v67 * 0.5;
                if (v67 < 0.0) {
                  v55.f32[0] = 0.0;
                }
                float32x2_t v68 = vcvt_f32_u32((uint32x2_t)__PAIR64__(v64, v63));
                float32x2_t v55 = (float32x2_t)vdupq_lane_s32((int32x2_t)v55, 0).u64[0];
                float32x2_t v69 = vsub_f32(vadd_f32(v68, (float32x2_t)0x4000000040000000), v55);
                *(float32x2_t *)v70.f32 = vadd_f32(v68, v55);
                *(float32x2_t *)&v70.u32[2] = v69;
                v55.i32[1] = v318.i32[1];
                v57[1] = vdivq_f32(v70, v318);
                uint64_t v49 = v62;
              }
              v57 += 6;
            }
            while (v57 != v58);
          }
          else
          {
            uint64_t v14 = v298;
          }
        }
      }
      v18 += 56;
    }
    while (v18 != v19);
    uint64_t v71 = *(void *)(v14 + 8);
    uint64_t v4 = v379;
    if (v71)
    {
      uint64_t v72 = *(void *)(v14 + 16);
      uint64_t v73 = v72 + 56 * v71;
      float32x4_t v319 = (float32x4_t)vdupq_lane_s64(__SPAIR64__(LODWORD(v310), (float)v44), 0);
      do
      {
        uint64_t v74 = *(void *)(v72 + 40);
        if (v74)
        {
          for (unint64_t k = 0; k != v74; ++k)
          {
            uint64_t v76 = re::BucketArray<re::ProjectiveShadowBuilder::Input::PerSceneData,4ul>::operator[](v72, k);
            uint64_t v77 = *(void *)(v76 + 56);
            if (v77)
            {
              v78 = (float32x4_t *)(*(void *)(v76 + 72) + 16);
              uint64_t v79 = 96 * v77;
              uint64_t v14 = v298;
              do
              {
                if (v78[-1].f32[3] < *(float *)(v298 + 288))
                {
                  if (*(void *)&buf[16])
                  {
                    int v80 = *(_DWORD *)(*(void *)&buf[32] + 4 * (*(void *)&buf[16] - 1));
                    uint64_t v81 = v49;
                    --*(void *)&buf[16];
                    ++*(_DWORD *)&buf[24];
                    LODWORD(v49) = v80;
                  }
                  else
                  {
                    uint64_t v81 = (v49 + 1);
                  }
                  v82.i32[0] = (v49 >> 1) % v44;
                  v82.i32[1] = v49 & 1 | (2 * (v49 / v50));
                  *(float32x2_t *)v83.f32 = vcvt_f32_u32(v82);
                  *(float32x2_t *)&v83.u32[2] = vadd_f32(*(float32x2_t *)v83.f32, _D10);
                  float32x4_t *v78 = vdivq_f32(v83, v319);
                  uint64_t v49 = v81;
                }
                v78 += 6;
                v79 -= 96;
              }
              while (v79);
            }
            else
            {
              uint64_t v14 = v298;
            }
          }
        }
        v72 += 56;
      }
      while (v72 != v73);
    }
    a4 = v254;
    if (*(void *)buf && *(void *)&buf[32])
    {
      (*(void (**)(void, void))(**(void **)buf + 40))(*(void *)buf, *(void *)&buf[32]);
      uint64_t v14 = v298;
    }
  }
  *(uint32x2_t *)a4 = v314;
  if (*(void *)(v14 + 8))
  {
    unint64_t v84 = 0;
    float32x2_t v85 = vrsqrte_f32((float32x2_t)1065353216);
    float32x2_t v86 = vmul_f32(v85, vrsqrts_f32((float32x2_t)1065353216, vmul_f32(v85, v85)));
    float32x4_t v87 = vmulq_n_f32((float32x4_t)xmmword_23435FD60, vmul_f32(v86, vrsqrts_f32((float32x2_t)1065353216, vmul_f32(v86, v86))).f32[0]);
    float32x4_t v258 = vnegq_f32(v87);
    float32x4_t v259 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v87, (int32x4_t)v87), (int8x16_t)v87, 0xCuLL);
    float v266 = fabsf(v87.f32[2]);
    float32x4_t v273 = v87;
    int32x4_t v262 = (int32x4_t)COERCE_UNSIGNED_INT(-v87.f32[1]);
    v87.i32[0] = 0;
    v87.f32[1] = -v87.f32[2];
    __n128 v261 = (__n128)v87.u64[0];
    while (1)
    {
      unint64_t v7 = *(void *)(a4 + 16);
      if (v7 <= v84) {
        goto LABEL_246;
      }
      uint64_t v88 = *(void *)(v14 + 16);
      uint64_t v89 = v88 + 56 * v84;
      unint64_t v90 = *(void *)(v89 + 40);
      v256 = (uint64_t *)(v89 + 40);
      if (v90)
      {
        uint64_t v91 = *(void *)(v254 + 24);
        memset(buf, 0, 24);
        re::FixedArray<re::FixedArray<unsigned int>>::init<>((uint64_t *)buf, v263, v90);
        v253 = (uint64_t *)(v91 + 72 * v84);
        re::FixedArray<float>::operator=(v253, (uint64_t *)buf);
        re::FixedArray<re::PlanarReceiverData::Bucket>::deinit(buf);
        uint64_t v92 = *v256;
        if (*v256)
        {
          unint64_t v93 = v84;
          unsigned int v94 = 0;
          unint64_t v95 = 0;
          unint64_t v255 = v93;
          uint64_t v96 = v88 + 56 * v93;
          do
            v94 += *(_DWORD *)(re::BucketArray<re::ProjectiveShadowBuilder::Input::PerSceneData,4ul>::operator[](v96, v95++)+ 16);
          while (v92 != v95);
          if (v94) {
            re::HashTable<unsigned long long,re::PlanarReceiverEntry,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(v91 + 72 * v255 + 24, v94);
          }
          unint64_t v84 = v255;
          if (*v256) {
            break;
          }
        }
      }
LABEL_237:
      ++v84;
      uint64_t v14 = v298;
      a4 = v254;
      if (v84 >= *(void *)(v298 + 8)) {
        return;
      }
    }
    unint64_t v97 = 0;
    uint64_t v98 = v91 + 72 * v255;
    uint64_t v272 = v98 + 24;
    v264 = (void *)(v98 + 32);
    v265 = (unsigned int *)(v98 + 48);
    v260 = (uint64_t *)(v98 + 40);
    v267 = (_DWORD *)(v98 + 64);
    uint64_t v252 = v96;
    while (1)
    {
      unint64_t v268 = v97;
      v271 = (void *)re::BucketArray<re::ProjectiveShadowBuilder::Input::PerSceneData,4ul>::operator[](v96, v97);
      unint64_t v99 = v271[12];
      memset(&buf[8], 0, 20);
      *(void *)&buf[32] = 0;
      *(void *)buf = v263;
      re::DynamicArray<re::MeshScene>::setCapacity(buf, 0);
      memset(&buf[40], 0, 56);
      ++*(_DWORD *)&buf[24];
      *(_DWORD *)&buf[84] = 0x7FFFFFFF;
      uint64_t v325 = 0;
      uint64_t v323 = v263;
      unint64_t v324 = v99;
      if (v99)
      {
        if (v99 >= 0x2AAAAAAAAAAAAABLL) {
          goto LABEL_247;
        }
        uint64_t v101 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)v263 + 32))(v263, 96 * v99, 8);
        uint64_t v325 = v101;
        if (!v101) {
          goto LABEL_248;
        }
        unint64_t v103 = v99 - 1;
        if (v99 != 1)
        {
          uint64_t v104 = v101 + 48;
          do
          {
            re::DynamicArray<re::MeshScene>::DynamicArray(v104 - 48, (uint64_t *)buf);
            *(void *)(v104 - 8) = *(void *)&buf[40];
            *(_OWORD *)uint64_t v104 = 0u;
            *(_OWORD *)(v104 + 16) = 0u;
            *(_DWORD *)(v104 + 32) = 0;
            *(void *)(v104 + 36) = 0x7FFFFFFFLL;
            if (*(void *)&buf[48])
            {
              if (*(_DWORD *)&buf[76] <= 3u) {
                signed int v105 = 3;
              }
              else {
                signed int v105 = *(_DWORD *)&buf[76];
              }
              re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(v104, *(uint64_t *)&buf[48], v105);
              re::HashTable<unsigned long long,re::MaterialParameterTable const*,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::copy(v104, (uint64_t)&buf[48]);
            }
            v104 += 96;
            --v103;
          }
          while (v103);
          uint64_t v101 = v104 - 48;
        }
        *(void *)(v101 + 32) = 0;
        *(void *)uint64_t v101 = 0;
        *(_OWORD *)(v101 + 8) = 0u;
        *(_DWORD *)(v101 + 24) = 0;
        *(void *)uint64_t v101 = *(void *)buf;
        *(void *)buf = 0;
        *(void *)(v101 + 8) = *(void *)&buf[8];
        *(void *)(v101 + 16) = *(void *)&buf[16];
        *(_OWORD *)&buf[8] = 0u;
        *(void *)(v101 + 32) = *(void *)&buf[32];
        *(void *)&buf[32] = 0;
        ++*(_DWORD *)&buf[24];
        ++*(_DWORD *)(v101 + 24);
        *(void *)(v101 + 40) = *(void *)&buf[40];
        *(_DWORD *)(v101 + 80) = 0;
        *(_OWORD *)(v101 + 48) = 0u;
        *(_OWORD *)(v101 + 64) = 0u;
        *(void *)(v101 + 84) = 0x7FFFFFFFLL;
        *(void *)(v101 + 48) = *(void *)&buf[48];
        *(void *)(v101 + 56) = *(void *)&buf[56];
        *(_OWORD *)&buf[48] = 0u;
        *(void *)(v101 + 64) = *(void *)&buf[64];
        *(void *)&buf[64] = 0;
        *(_DWORD *)(v101 + 72) = *(_DWORD *)&buf[72];
        *(_DWORD *)(v101 + 76) = *(_DWORD *)&buf[76];
        *(_DWORD *)(v101 + 80) = *(_DWORD *)&buf[80];
        *(_DWORD *)(v101 + 84) = *(_DWORD *)&buf[84];
        *(_OWORD *)&buf[72] = xmmword_23436F740;
      }
      re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)&buf[48]);
      re::DynamicArray<re::MeshScene>::deinit((uint64_t)buf);
      unint64_t v99 = v271[12];
      unint64_t v276 = v99;
      if (v99)
      {
        if (v99 >= 0x666666666666667) {
          goto LABEL_249;
        }
        uint64_t v107 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)v263 + 32))(v263, 40 * v99, 8);
        if (!v107) {
          goto LABEL_250;
        }
        uint64_t v109 = v107;
        uint64_t v110 = v107;
        unint64_t v111 = v99 - 1;
        if (v99 != 1)
        {
          uint64_t v110 = v107;
          do
          {
            *(void *)(v110 + 32) = 0;
            *(void *)(v110 + 8) = 0;
            *(void *)(v110 + 16) = 0;
            *(void *)uint64_t v110 = 0;
            *(_DWORD *)(v110 + 24) = 0;
            v110 += 40;
            --v111;
          }
          while (v111);
        }
        *(void *)(v110 + 32) = 0;
        *(void *)(v110 + 8) = 0;
        *(void *)(v110 + 16) = 0;
        *(void *)uint64_t v110 = 0;
        *(_DWORD *)(v110 + 24) = 0;
      }
      else
      {
        uint64_t v109 = 0;
      }
      uint64_t v112 = v298;
      uint64_t v113 = v271[7];
      if (v113)
      {
        uint64_t v114 = v271[9];
        uint64_t v115 = 96 * v113;
        do
        {
          unint64_t v7 = *(unsigned int *)(v114 + 32);
          if (v276 <= v7) {
            goto LABEL_240;
          }
          v116 = (_anonymous_namespace_ *)(v109 + 40 * v7);
          uint64_t v117 = v109;
          re::DynamicArray<re::ShadowClusterInfo>::add(v116, v114);
          uint64_t v109 = v117;
          uint64_t v112 = v298;
          v114 += 96;
          v115 -= 96;
        }
        while (v115);
      }
      uint64_t v269 = *(void *)(v112 + 48);
      uint64_t v270 = v109;
      uint64_t v279 = *(void *)(v112 + 56);
      float v291 = *(float *)(v112 + 276);
      unsigned int v118 = *(_DWORD *)(v112 + 296);
      uint64_t v119 = re::RenderManager::perFrameAllocator(this);
      v121.i32[1] = 925353388;
      long long v346 = xmmword_23440EBB0;
      long long v347 = xmmword_23440EBC0;
      unint64_t v122 = v324;
      if (v324)
      {
        v123 = (re::MaterialParameterTableBuilder *)v119;
        unint64_t v124 = 0;
        int v125 = 0;
        *(float *)v121.i32 = (float)v118;
        float32x2_t v126 = vdiv_f32((float32x2_t)vdup_lane_s32(v121, 0), v251);
        float32x2_t v127 = vadd_f32(v126, v126);
        v128 = (re::MaterialParameterBlock **)a3;
        while (1)
        {
          int v275 = v125;
          unint64_t v277 = v124;
          uint64_t v274 = v325;
          v292 = (_anonymous_namespace_ *)(v325 + 96 * v124);
          uint64_t v311 = (uint64_t)v292 + 48;
          re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v292 + 48, (uint64_t)v123, 3);
          v343[1] = 0;
          v343[2] = 0;
          int v344 = 0;
          uint64_t v345 = 0;
          v343[0] = v123;
          re::DynamicArray<float *>::setCapacity(v343, 0);
          ++v344;
          v340[1] = 0;
          v340[2] = 0;
          int v341 = 0;
          uint64_t v342 = 0;
          v340[0] = v123;
          re::DynamicArray<re::Event<re::NetworkSystem,unsigned long long,RESyncPendingCommitAction *>::Subscription>::setCapacity(v340);
          ++v341;
          v337[1] = 0;
          v337[2] = 0;
          int v338 = 0;
          uint64_t v339 = 0;
          v337[0] = v123;
          re::DynamicArray<re::AABB>::setCapacity(v337, 0);
          unint64_t v129 = v277;
          ++v338;
          unint64_t v7 = v271[12];
          if (v7 <= v277) {
            goto LABEL_241;
          }
          uint64_t v130 = v271[14] + 48 * v277;
          float32x4_t v131 = vmulq_f32(*(float32x4_t *)v130, *(float32x4_t *)v130);
          LODWORD(v293) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v131, 2), vaddq_f32(v131, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v131.f32, 1))).u32[0];
          int32x4_t v297 = *(int32x4_t *)v130;
          float32x4_t v132 = *(float32x4_t *)v130;
          unint64_t v7 = (unint64_t)buf;
          if (fabsf(v293) >= 1.0e-10)
          {
            float32x2_t v133 = vrsqrte_f32((float32x2_t)LODWORD(v293));
            float32x2_t v134 = vmul_f32(v133, vrsqrts_f32((float32x2_t)LODWORD(v293), vmul_f32(v133, v133)));
            float32x4_t v132 = vmulq_n_f32((float32x4_t)v297, vmul_f32(v134, vrsqrts_f32((float32x2_t)LODWORD(v293), vmul_f32(v134, v134))).f32[0]);
          }
          float32x4_t v135 = vmulq_f32(v273, v132);
          int32x2_t v136 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v135, 2), vaddq_f32(v135, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v135.f32, 1))).u64[0];
          if (*(float *)v136.i32 == -1.0
            || (float v137 = (float)((float)(fabsf(*(float *)v136.i32) + 1.0) + 1.0) * 0.00001,
                *(float *)v136.i32 = *(float *)v136.i32 + 1.0,
                fabsf(*(float *)v136.i32) < v137))
          {
            if (v266 >= 0.00001)
            {
              __n128 v138 = v261;
              v138.n128_u32[2] = v273.u32[1];
            }
            else
            {
              __n128 v138 = (__n128)vtrn1q_s32(v262, (int32x4_t)v273);
            }
            int32x4_t v139 = (int32x4_t)vmulq_f32((float32x4_t)v138, (float32x4_t)v138);
            v139.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v139, 2), vadd_f32(*(float32x2_t *)v139.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v139.i8, 1))).u32[0];
            float32x2_t v140 = vrsqrte_f32((float32x2_t)v139.u32[0]);
            float32x2_t v141 = vmul_f32(v140, vrsqrts_f32((float32x2_t)v139.u32[0], vmul_f32(v140, v140)));
            __n128 v142 = (__n128)vmulq_n_f32((float32x4_t)v138, vmul_f32(v141, vrsqrts_f32((float32x2_t)v139.u32[0], vmul_f32(v141, v141))).f32[0]);
            v138.n128_u64[0] = 0;
          }
          else
          {
            int8x16_t v230 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v132, (int32x4_t)v132), (int8x16_t)v132, 0xCuLL), v258), v132, v259);
            __n128 v138 = (__n128)vuzp1q_s32((int32x4_t)v230, (int32x4_t)v230);
            float32x4_t v231 = (float32x4_t)vextq_s8((int8x16_t)v138, v230, 0xCuLL);
            *(float *)v136.i32 = sqrtf(*(float *)v136.i32 + *(float *)v136.i32);
            v138.n128_f32[0] = *(float *)v136.i32 * 0.5;
            __n128 v142 = (__n128)vdivq_f32(v231, (float32x4_t)vdupq_lane_s32(v136, 0));
          }
          unint64_t v8 = v277;
          if (v276 <= v277) {
            goto LABEL_242;
          }
          unint64_t v143 = v270 + 40 * v277;
          uint64_t v144 = *(void *)(v143 + 16);
          if (v144) {
            break;
          }
LABEL_200:
          *(void *)(v274 + 96 * v277 + 40) = v269;
          if (v337[0])
          {
            uint64_t v120 = v339;
            if (v339) {
              (*(void (**)(__n128, __n128))(*(void *)v337[0] + 40))(v138, v142);
            }
          }
          if (v340[0])
          {
            uint64_t v120 = v342;
            if (v342) {
              (*(void (**)(__n128, __n128))(*(void *)v340[0] + 40))(v138, v142);
            }
          }
          if (v343[0])
          {
            uint64_t v120 = v345;
            if (v345) {
              (*(void (**)(__n128, __n128))(*(void *)v343[0] + 40))(v138, v142);
            }
          }
          unint64_t v124 = (v275 + 1);
          unint64_t v122 = v324;
          int v125 = v275 + 1;
          if (v324 <= v124) {
            goto LABEL_212;
          }
        }
        float32x4_t v294 = *(float32x4_t *)(v130 + 16);
        float32x4_t v145 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v142, (int32x4_t)v142), (int8x16_t)v142, 0xCuLL);
        float32x4_t v146 = vnegq_f32((float32x4_t)v142);
        float32x4_t v147 = vmlaq_f32(vmulq_f32((float32x4_t)v142, (float32x4_t)xmmword_23437C080), (float32x4_t)xmmword_23435FD50, v145);
        int8x16_t v148 = (int8x16_t)vaddq_f32(v147, v147);
        float32x4_t v149 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v148, (int32x4_t)v148), v148, 0xCuLL);
        int8x16_t v150 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v149, (int32x4_t)v149), (int8x16_t)v149, 0xCuLL), v146), v149, v145);
        int32x4_t v151 = (int32x4_t)vaddq_f32(vaddq_f32(vmulq_n_f32(v149, v138.n128_f32[0]), (float32x4_t)xmmword_23435FD50), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v150, (int32x4_t)v150), v150, 0xCuLL));
        float32x4_t v152 = vmlaq_f32(vmulq_f32((float32x4_t)v142, (float32x4_t)xmmword_234390E80), (float32x4_t)xmmword_234382760, v145);
        int8x16_t v153 = (int8x16_t)vaddq_f32(v152, v152);
        float32x4_t v154 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v153, (int32x4_t)v153), v153, 0xCuLL);
        int8x16_t v155 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v154, (int32x4_t)v154), (int8x16_t)v154, 0xCuLL), v146), v154, v145);
        int32x4_t v156 = (int32x4_t)vaddq_f32(vaddq_f32(vmulq_n_f32(v154, v138.n128_f32[0]), (float32x4_t)xmmword_234382760), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v155, (int32x4_t)v155), v155, 0xCuLL));
        int32x4_t v157 = vzip1q_s32(v151, v297);
        int32x4_t v158 = vzip1q_s32(v151, v156);
        v158.i32[2] = *(_OWORD *)v130;
        float32x4_t v290 = (float32x4_t)v158;
        int32x4_t v159 = vzip2q_s32(v151, v156);
        v159.i32[2] = *(void *)(v130 + 8);
        float32x4_t v289 = (float32x4_t)v159;
        v159.i64[0] = __PAIR64__(v156.u32[1], v151.u32[1]);
        v160.i64[0] = __PAIR64__(v156.u32[2], v151.u32[2]);
        v151.i32[1] = v156.i32[0];
        v151.i64[1] = v297.u32[0];
        v159.i64[1] = v297.u32[1];
        float32x4_t v285 = (float32x4_t)vzip2q_s32(v157, vdupq_lane_s32(*(int32x2_t *)v156.i8, 1));
        int32x4_t v286 = v151;
        v160.i64[1] = v297.u32[2];
        float32x4_t v287 = v160;
        int32x4_t v288 = v159;
        v161 = *(float32x2_t **)(v143 + 32);
        v284 = &v161[12 * v144];
        *(float *)v156.i32 = v142.n128_f32[0] + v142.n128_f32[0];
        v154.f32[0] = (float)(v142.n128_f32[0] + v142.n128_f32[0]) * v142.n128_f32[0];
        *(float *)v159.i32 = vmuls_lane_f32(v142.n128_f32[1] + v142.n128_f32[1], (float32x2_t)v142.n128_u64[0], 1);
        v160.f32[0] = vmuls_lane_f32(v142.n128_f32[2] + v142.n128_f32[2], (float32x4_t)v142, 2);
        float v162 = vmuls_lane_f32(v142.n128_f32[0] + v142.n128_f32[0], (float32x2_t)v142.n128_u64[0], 1);
        float v163 = vmuls_lane_f32(v142.n128_f32[0] + v142.n128_f32[0], (float32x4_t)v142, 2);
        v142.n128_f32[0] = vmuls_lane_f32(v142.n128_f32[1] + v142.n128_f32[1], (float32x4_t)v142, 2);
        *(float *)v156.i32 = v138.n128_f32[0] * *(float *)v156.i32;
        *(float *)v157.i32 = v138.n128_f32[0] * (float)(v142.n128_f32[1] + v142.n128_f32[1]);
        v138.n128_f32[0] = v138.n128_f32[0] * (float)(v142.n128_f32[2] + v142.n128_f32[2]);
        v164.i32[3] = 0;
        v164.f32[0] = 1.0 - (float)(*(float *)v159.i32 + v160.f32[0]);
        v164.f32[1] = v162 + v138.n128_f32[0];
        v164.f32[2] = v163 - *(float *)v157.i32;
        *(float *)v151.i32 = 1.0 - (float)(v154.f32[0] + v160.f32[0]);
        v160.i32[3] = 0;
        v160.f32[0] = v162 - v138.n128_f32[0];
        v160.i32[1] = v151.i32[0];
        v160.f32[2] = v142.n128_f32[0] + *(float *)v156.i32;
        float32x4_t v282 = v160;
        float32x4_t v283 = v164;
        v157.i32[3] = 0;
        *(float *)v157.i32 = v163 + *(float *)v157.i32;
        *(float *)&v157.i32[1] = v142.n128_f32[0] - *(float *)v156.i32;
        *(float *)&v157.i32[2] = 1.0 - (float)(v154.f32[0] + *(float *)v159.i32);
        float32x4_t v280 = vmulq_n_f32((float32x4_t)v297, v291);
        float32x4_t v281 = (float32x4_t)v157;
        v138.n128_u32[3] = 1065353216;
        while (1)
        {
          uint64_t v165 = 0;
          float32x4_t v167 = *(float32x4_t *)v161->f32;
          int8x16_t v166 = *(int8x16_t *)v161[2].f32;
          float32x4_t v168 = vnegq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v290, COERCE_FLOAT(*(_OWORD *)v161->f32)), v285, *v161, 1), v289, *(float32x4_t *)v161->f32, 2));
          v168.i32[3] = v138.n128_i32[3];
          float32x2_t v169 = (float32x2_t)vextq_s8(v166, v166, 8uLL).u64[0];
          float32x2_t v170 = vsub_f32(v169, *(float32x2_t *)v166.i8);
          float32x2_t v171 = vminnm_f32(vmaxnm_f32(vadd_f32(v127, vmul_f32(vmul_n_f32(v170, v161[5].f32[1]), (float32x2_t)vdup_n_s32(0xBE15F61A))), 0), _D10);
          LODWORD(v172) = HIDWORD(*(_OWORD *)v161->f32);
          float v173 = (float)(1.0 / v172) * 0.5;
          uint64_t v296 = v166.i64[0];
          __asm { FMOV            V1.2S, #-1.0 }
          *(float32x2_t *)v179.f32 = vadd_f32(vadd_f32(*(float32x2_t *)v166.i8, v169), _D1);
          *(float32x2_t *)v166.i8 = vmul_n_f32(vsub_f32(v170, v171), 1.0 / v172);
          float32x4_t v175 = vmulq_f32((float32x4_t)v297, vsubq_f32(*(float32x4_t *)v161->f32, v294));
          float v176 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v175, 2), vaddq_f32(v175, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v175.f32, 1))).f32[0];
          float32x4_t v177 = vmulq_n_f32((float32x4_t)xmmword_23435FD50, *(float *)v166.i32);
          float32x4_t v178 = vmulq_n_f32((float32x4_t)xmmword_23435FD60, *(float *)vshrq_n_u64((uint64x2_t)v166, 0x20uLL).i32);
          v179.f32[2] = v173 * v176;
          v179.i32[3] = 1.0;
          *(int32x4_t *)v379 = v286;
          *(int32x4_t *)&v379[16] = v288;
          float v307 = v173;
          float32x4_t v180 = vmulq_n_f32((float32x4_t)xmmword_23435FD80, v173);
          *(float32x4_t *)&v379[32] = v287;
          float32x4_t v380 = v168;
          __n128 v295 = (__n128)v168;
          do
          {
            *(float32x4_t *)&buf[v165] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v177, COERCE_FLOAT(*(_OWORD *)&v379[v165])), v178, *(float32x2_t *)&v379[v165], 1), v180, *(float32x4_t *)&v379[v165], 2), v179, *(float32x4_t *)&v379[v165], 3);
            v165 += 16;
          }
          while (v165 != 64);
          long long v305 = *(_OWORD *)&buf[16];
          long long v306 = *(_OWORD *)buf;
          long long v303 = *(_OWORD *)&buf[48];
          long long v304 = *(_OWORD *)&buf[32];
          v181 = *v128;
          memset(v379, 0, 36);
          *(void *)&v379[36] = 0x7FFFFFFFLL;
          float32x2_t v182 = v161[8];
          if (v182)
          {
            uint64_t v299 = 0;
            uint64_t v183 = 0;
            int v301 = 0;
            uint64_t v300 = 0;
            uint64_t v184 = 0;
            uint64_t v185 = 0;
            unsigned int v315 = 0;
            unsigned int v312 = 0;
            unsigned int v320 = 0;
            v308 = (float32x4_t *)v161;
            float32x2_t v186 = v161[10];
            uint64_t v187 = *(void *)&v186 + 24 * *(void *)&v182;
            float v188 = (float)(v173 * v176) + -0.5;
            uint64_t v302 = v187;
            do
            {
              if (*(unsigned char *)(*(void *)&v186 + 20))
              {
                float v189 = *(float *)(*(void *)&v186 + 8);
                unsigned int v190 = 73244475
                     * ((73244475 * (LODWORD(v189) ^ HIWORD(LODWORD(v189)))) ^ ((73244475
                                                                                             * (LODWORD(v189) ^ HIWORD(LODWORD(v189)))) >> 16));
                unsigned int v191 = 73244475 * (*(_DWORD *)(*(void *)&v186 + 12) ^ HIWORD(*(_DWORD *)(*(void *)&v186 + 12)));
                unint64_t v192 = (73244475 * (v191 ^ HIWORD(v191))) ^ ((73244475 * (v191 ^ HIWORD(v191))) >> 16);
                unsigned int v193 = 73244475 * (*(_DWORD *)(*(void *)&v186 + 16) ^ HIWORD(*(_DWORD *)(*(void *)&v186 + 16)));
                unint64_t v194 = (((unint64_t)(v190 ^ HIWORD(v190)) << 6)
                      - 0x61C8864680B583E9
                      + ((unint64_t)(v190 ^ HIWORD(v190)) >> 2)
                      + ((((73244475 * (v193 ^ HIWORD(v193))) ^ ((73244475 * (v193 ^ HIWORD(v193))) >> 16))
                        - 0x61C8864680B583E9
                        + (v192 << 6)
                        + (v192 >> 2)) ^ v192)) ^ v190 ^ HIWORD(v190);
                uint64_t v195 = *(void *)v379;
                unint64_t v196 = 0x94D049BB133111EBLL
                     * ((0xBF58476D1CE4E5B9 * (v194 ^ (v194 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v194 ^ (v194 >> 30))) >> 27));
                unint64_t v197 = v196 ^ (v196 >> 31);
                if (*(void *)v379)
                {
                  for (uint64_t m = *(unsigned int *)(v183 + 4 * (v197 % v320));
                        m != 0x7FFFFFFF;
                        uint64_t m = *(_DWORD *)(v185 + 32 * m + 8) & 0x7FFFFFFF)
                  {
                    if (*(void *)(v185 + 32 * m + 16) == v194)
                    {
                      uint64_t v211 = *(unsigned int *)(v183 + 4 * (v197 % v312));
                      if (v211 == 0x7FFFFFFF)
                      {
                        uint64_t v211 = 0x7FFFFFFFLL;
                      }
                      else
                      {
                        uint64_t v212 = *(void *)(v185 + 32 * v211 + 16);
                        for (n = *(unsigned int *)(v183 + 4 * (v197 % v312)); v212 != v194; uint64_t v211 = n)
                        {
                          uint64_t n = *(_DWORD *)(v185 + 32 * n + 8) & 0x7FFFFFFF;
                          uint64_t v211 = 0x7FFFFFFFLL;
                          if (n == 0x7FFFFFFF) {
                            break;
                          }
                          uint64_t v212 = *(void *)(v185 + 32 * n + 16);
                        }
                      }
                      re::HashTable<unsigned long long,re::MaterialParameterTable const*,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addOrReplace<re::MaterialParameterTable*&>(v311, *(uint64_t **)&v186, (void *)(v185 + 32 * v211 + 24));
                      unsigned int v320 = v312;
                      goto LABEL_183;
                    }
                  }
                }
                re::MaterialParameterBlock::setFloat(v181, "intensity", v189, (uint64_t)v336);
                v336[0] = 0;
                re::MaterialParameterBlock::setFloat(v181, "objectDecayRate", *(float *)(*(void *)&v186 + 12), (uint64_t)v335);
                v335[0] = 0;
                float v199 = expf(-(float)(*(float *)(*(void *)&v186 + 16) * (float)(v307 * v308[2].f32[1])));
                if (v199 > 1.0) {
                  float v199 = 1.0;
                }
                re::MaterialParameterBlock::setFloat(v181, "decayToGround", v199, (uint64_t)v334);
                v334[0] = 0;
                re::MaterialParameterBlock::setFloat(v181, "radialDistanceToGround", v188, (uint64_t)v333);
                v333[0] = 0;
                v331[0] = v306;
                v331[1] = v305;
                v331[2] = v304;
                v331[3] = v303;
                re::MaterialParameterBlock::setMatrix4x4F(v181, "planeSurfaceViewMatrix", v331, (uint64_t)v332);
                v332[0] = 0;
                v200 = v123;
                v201 = re::MaterialParameterBlock::copyCurrentStateAsMaterialParameterTable(v181, v123);
                *(void *)buf = v201;
                if (v195)
                {
                  unsigned int v202 = v315;
                  unint64_t v203 = v197 % v315;
                  for (iuint64_t i = *(unsigned int *)(v183 + 4 * v203); ; iuint64_t i = *(_DWORD *)(v185 + 32 * ii + 8) & 0x7FFFFFFF)
                  {
                    if (ii == 0x7FFFFFFF)
                    {
                      unsigned int v312 = v315;
                      unsigned int v320 = v315;
                      goto LABEL_172;
                    }
                    if (*(void *)(v185 + 32 * ii + 16) == v194) {
                      break;
                    }
                  }
                  unsigned int v312 = v315;
                  unsigned int v320 = v315;
                }
                else
                {
                  unint64_t v203 = 0;
                  unsigned int v202 = v315;
LABEL_172:
                  uint64_t v205 = *(unsigned int *)&v379[36];
                  if (*(_DWORD *)&v379[36] == 0x7FFFFFFF)
                  {
                    int v206 = v184;
                    uint64_t v207 = v300;
                    if (v184 == v300)
                    {
                      re::HashTable<unsigned long long,re::ecs2::Scene const*,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity((uint64_t)v379, 2 * v301);
                      uint64_t v207 = *(unsigned int *)&v379[24];
                      int v206 = *(_DWORD *)&v379[32];
                      unint64_t v203 = v197 % *(unsigned int *)&v379[24];
                      uint64_t v185 = *(void *)&v379[16];
                      uint64_t v299 = *(void *)&v379[8];
                    }
                    uint64_t v208 = (v206 + 1);
                    *(_DWORD *)&v379[32] = v208;
                    uint64_t v205 = v184;
                    int v209 = *(_DWORD *)(v185 + 32 * v184 + 8);
                    uint64_t v183 = v299;
                    unsigned int v202 = v207;
                    unsigned int v312 = v207;
                    uint64_t v300 = v207;
                    unsigned int v320 = v207;
                  }
                  else
                  {
                    int v209 = *(_DWORD *)(v185 + 32 * *(unsigned int *)&v379[36] + 8);
                    *(_DWORD *)&v379[36] = v209 & 0x7FFFFFFF;
                    uint64_t v208 = v184;
                    LODWORD(v184) = v205;
                  }
                  unsigned int v315 = v202;
                  *(_DWORD *)(v185 + 32 * v205 + 8) = v209 | 0x80000000;
                  uint64_t v185 = *(void *)&v379[16];
                  uint64_t v210 = *(void *)&v379[16] + 32 * v205;
                  *(_DWORD *)(v210 + 8) = *(_DWORD *)(v210 + 8) & 0x80000000 | *(_DWORD *)(v183 + 4 * v203);
                  *(void *)uint64_t v210 = v197;
                  *(void *)(v210 + 16) = v194;
                  *(void *)(v210 + 24) = v201;
                  *(_DWORD *)(v183 + 4 * v203) = v184;
                  int v301 = ++*(_DWORD *)&v379[28];
                  ++*(_DWORD *)&v379[40];
                  uint64_t v184 = v208;
                }
                re::HashTable<unsigned long long,re::MaterialParameterTable const*,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addOrReplace<re::MaterialParameterTable*&>(v311, *(uint64_t **)&v186, buf);
                v123 = v200;
                uint64_t v187 = v302;
              }
LABEL_183:
              *(void *)&v186 += 24;
            }
            while (*(void *)&v186 != v187);
            v161 = (float32x2_t *)v308;
            float32x4_t v167 = *v308;
            float32x4_t v214 = vmulq_f32((float32x4_t)v297, vsubq_f32(*v308, v294));
            LODWORD(v176) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v214, 2), vaddq_f32(v214, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v214.f32, 1))).u32[0];
            LODWORD(v172) = HIDWORD(*(unsigned long long *)v308);
            uint64_t v4 = v379;
            v128 = (re::MaterialParameterBlock **)a3;
            unint64_t v7 = (unint64_t)buf;
          }
          float v316 = v176;
          float32x4_t v321 = v167;
          v215 = v128[1];
          *(void *)buf = v296;
          uint64_t v326 = 0x18FB5CC241;
          re::MaterialParameterBlock::setConstant(v215, &v326, 8uLL, buf, 32, (uint64_t)v330);
          v330[0] = 0;
          *(float32x2_t *)buf = v170;
          uint64_t v326 = 0x18FB550729;
          re::MaterialParameterBlock::setConstant(v215, &v326, 8uLL, buf, 32, (uint64_t)v329);
          v329[0] = 0;
          *(float *)&uint64_t v326 = v291;
          *(void *)buf = 0x2817DD560165845ALL;
          re::MaterialParameterBlock::setConstant(v215, (uint64_t *)buf, 4uLL, &v326, 1, (uint64_t)v328);
          v328[0] = 0;
          char v363 = 0;
          char v364 = 0;
          long long v365 = 0u;
          memset(buf, 0, 40);
          memset(&buf[48], 0, 48);
          float32x4_t v349 = 0u;
          long long v350 = 0u;
          long long v351 = 0u;
          long long v352 = 0u;
          long long v353 = 0u;
          char v354 = 0;
          long long v355 = 0u;
          long long v356 = 0u;
          long long v357 = 0u;
          long long v358 = 0u;
          long long v359 = 0u;
          long long v360 = 0u;
          long long v361 = 0u;
          memset(v362, 0, 28);
          v216 = v161;
          if (re::MaterialParameterTable::kDefaultNameHash(void)::once != -1) {
            dispatch_once(&re::MaterialParameterTable::kDefaultNameHash(void)::once, &__block_literal_global_29);
          }
          uint64_t v366 = re::MaterialParameterTable::kDefaultNameHash(void)::_kDefaultNameHash;
          float32x2_t v367 = _D10;
          int v368 = 1065353216;
          long long v369 = 0u;
          memset(v370, 0, sizeof(v370));
          unint64_t v371 = 0xFFFFFFFF00000001;
          *(void *)&long long v217 = 0x7F0000007FLL;
          *((void *)&v217 + 1) = 0x7F0000007FLL;
          int32x4_t v372 = vdupq_n_s32(0x7F800000u);
          long long v373 = v217;
          uint64_t v374 = 0;
          char v375 = 0;
          uint64_t v376 = 0;
          char v377 = 0;
          uint64_t v378 = 0x10100010001;
          uint64_t v218 = (*(uint64_t (**)(re::MaterialParameterTableBuilder *, uint64_t, uint64_t))(*(void *)v123
                                                                                                  + 32))(v123, 24, 8);
          *(void *)uint64_t v218 = v123;
          *(_OWORD *)(v218 + 8) = xmmword_234361DE0;
          v219 = (void *)(*(uint64_t (**)(re::MaterialParameterTableBuilder *, uint64_t, uint64_t))(*(void *)v123 + 32))(v123, 8, 8);
          *(void *)(v218 + 16) = v219;
          if (!v219) {
            break;
          }
          float32x4_t v221 = vaddq_f32(v280, vsubq_f32(v321, vmulq_n_f32((float32x4_t)v297, v316 / v293)));
          int32x2_t v222 = (int32x2_t)vdiv_f32(v171, v170);
          *(float *)v222.i32 = (float)(1.0 / (float)(1.0 - fmaxf(*(float *)v222.i32, *(float *)&v222.i32[1])))
                             * (float)(v172 + v172);
          float32x4_t v317 = vmulq_n_f32(v282, *(float *)vshrq_n_u64((uint64x2_t)vdupq_lane_s32(v222, 0), 0x20uLL).i32);
          float32x4_t v322 = vmulq_n_f32(v283, *(float *)v222.i32);
          float32x4_t v313 = vmulq_n_f32(v281, *(float *)v222.i32);
          v221.i32[3] = 1.0;
          float32x4_t v309 = v221;
          void *v219 = *(void *)(v298 + 304);
          uint64_t v223 = *(void *)(v218 + 8);
          *(void *)buf = *(void *)(v218 + 16);
          *(void *)&buf[8] = v223;
          uint64_t v326 = (uint64_t)&v346;
          uint64_t v327 = 1;
          uint64_t v224 = (*(uint64_t (**)(re::MaterialParameterTableBuilder *, uint64_t, uint64_t))(*(void *)v123
                                                                                                  + 32))(v123, 72, 8);
          *(void *)&buf[24] = re::MeshBoundingBoxes::MeshBoundingBoxes(v224, (uint64_t)v123, (const void **)&v326, 1);
          uint64_t v326 = (uint64_t)&v346;
          uint64_t v327 = 1;
          uint64_t v225 = (*(uint64_t (**)(re::MaterialParameterTableBuilder *, uint64_t, uint64_t))(*(void *)v123
                                                                                                  + 32))(v123, 72, 8);
          uint64_t v226 = re::MeshBoundingBoxes::MeshBoundingBoxes(v225, (uint64_t)v123, (const void **)&v326, 1);
          int32x4_t v372 = (int32x4_t)v346;
          long long v373 = v347;
          *(void *)&buf[32] = v226;
          uint64_t v374 = v226;
          v227 = re::MaterialParameterBlock::copyCurrentStateAsMaterialParameterTable(v215, v123);
          v228 = (void *)(*(uint64_t (**)(re::MaterialParameterTableBuilder *, uint64_t, uint64_t))(*(void *)v123 + 32))(v123, 8, 8);
          void *v228 = v227;
          *(void *)&long long v356 = v228;
          *((void *)&v356 + 1) = 1;
          v229 = (void *)(*(uint64_t (**)(re::MaterialParameterTableBuilder *, uint64_t, uint64_t))(*(void *)v123 + 32))(v123, 8, 8);
          void *v229 = v279;
          *(void *)&long long v350 = v229;
          *((void *)&v350 + 1) = 1;
          *(float32x4_t *)&buf[48] = v322;
          *(float32x4_t *)&buf[64] = v317;
          *(float32x4_t *)&buf[80] = v313;
          float32x4_t v349 = v309;
          if (*(void *)v292) {
            re::DynamicArray<re::MeshScene>::add(v292, (long long *)buf);
          }
          if (v362[2])
          {
            if ((void)v360) {
              *(void *)&long long v360 = 0;
            }
            if (*((void *)&v359 + 1)) {
              (*(void (**)(void, void))(*(void *)v362[2] + 40))(v362[2], *((void *)&v359 + 1));
            }
          }
          re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)v379);
          v161 += 12;
          __n128 v138 = v295;
          if (&v216[12] == v284) {
            goto LABEL_200;
          }
        }
        re::internal::assertLog((re::internal *)4, v220, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
        _os_crash();
        __break(1u);
LABEL_240:
        *(void *)&v331[0] = 0;
        memset(buf, 0, 80);
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v379 = 136315906;
        *(void *)&v379[4] = "operator[]";
        *(_WORD *)&v379[12] = 1024;
        *(_DWORD *)&v379[14] = 468;
        *(_WORD *)&v379[18] = 2048;
        *(void *)&v379[20] = v7;
        *(_WORD *)&v379[28] = 2048;
        *(void *)&v379[30] = v276;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_241:
        uint64_t v326 = 0;
        memset(buf, 0, 80);
        unint64_t v8 = v129;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v379 = 136315906;
        *(void *)&v379[4] = "operator[]";
        *(_WORD *)&v379[12] = 1024;
        *(_DWORD *)&v379[14] = 797;
        *(_WORD *)&v379[18] = 2048;
        *(void *)&v379[20] = v8;
        *(_WORD *)&v379[28] = 2048;
        *(void *)&v379[30] = v7;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_242:
        uint64_t v326 = 0;
        memset(buf, 0, 80);
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v379 = 136315906;
        *(void *)&v379[4] = "operator[]";
        *(_WORD *)&v379[12] = 1024;
        *(_DWORD *)&v379[14] = 476;
        *(_WORD *)&v379[18] = 2048;
        *(void *)&v379[20] = v8;
        *(_WORD *)&v379[28] = 2048;
        *(void *)&v379[30] = v276;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_243;
      }
LABEL_212:
      unint64_t v7 = v253[1];
      unint64_t v232 = v268;
      uint64_t v96 = v252;
      v233 = (void *)v272;
      if (v7 <= v268) {
        goto LABEL_245;
      }
      v234 = (uint64_t *)(v253[2] + 24 * v268);
      if (v234 != &v323)
      {
        uint64_t v235 = *v234;
        if (*v234) {
          BOOL v236 = v235 == v323;
        }
        else {
          BOOL v236 = 1;
        }
        if (!v236) {
          goto LABEL_251;
        }
        uint64_t *v234 = v323;
        uint64_t v323 = v235;
        unint64_t v237 = v234[1];
        v234[1] = v122;
        unint64_t v324 = v237;
        uint64_t v238 = v234[2];
        v234[2] = v325;
        uint64_t v325 = v238;
      }
      uint64_t v239 = v271[2];
      if (v239) {
        break;
      }
LABEL_231:
      if (v263 && v276)
      {
        uint64_t v248 = 0;
        do
        {
          re::DynamicArray<re::ShadowClusterInfo>::deinit(v270 + v248);
          v248 += 40;
        }
        while (40 * v276 != v248);
        (*(void (**)(uint64_t, uint64_t))(*(void *)v263 + 40))(v263, v270);
      }
      re::FixedArray<re::PlanarReceiverInfo>::deinit(&v323);
      unint64_t v97 = v268 + 1;
      unint64_t v84 = v255;
      if (v268 + 1 >= *v256) {
        goto LABEL_237;
      }
    }
    uint64_t v240 = v271[4];
    uint64_t v241 = v240 + 16 * v239;
    while (1)
    {
      int v242 = *(_DWORD *)(v240 + 8);
      *(_DWORD *)buf = v232;
      *(_DWORD *)&buf[4] = v242;
      unint64_t v243 = 0xBF58476D1CE4E5B9 * (*(void *)v240 ^ (*(void *)v240 >> 30));
      unint64_t v244 = (0x94D049BB133111EBLL * (v243 ^ (v243 >> 27))) ^ ((0x94D049BB133111EBLL * (v243 ^ (v243 >> 27))) >> 31);
      if (*v233)
      {
        unint64_t v245 = v244 % *v265;
        uint64_t v246 = *(unsigned int *)(*v264 + 4 * v245);
        if (v246 != 0x7FFFFFFF)
        {
          uint64_t v247 = *v260;
          while (*(void *)(v247 + 32 * v246 + 16) != *(void *)v240)
          {
            uint64_t v246 = *(_DWORD *)(v247 + 32 * v246 + 8) & 0x7FFFFFFF;
            if (v246 == 0x7FFFFFFF) {
              goto LABEL_229;
            }
          }
          goto LABEL_230;
        }
      }
      else
      {
        LODWORD(v245) = 0;
      }
LABEL_229:
      re::HashTable<unsigned long long,re::PlanarReceiverEntry,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsCopy(v272, v245, v244, (void *)v240, buf);
      v233 = (void *)v272;
      ++*v267;
      LODWORD(v232) = v268;
LABEL_230:
      v240 += 16;
      if (v240 == v241) {
        goto LABEL_231;
      }
    }
  }
}

void re::HashTable<unsigned long long,re::MaterialParameterTable const*,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addOrReplace<re::MaterialParameterTable*&>(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  unint64_t v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  unint64_t v9 = *(void *)a1;
  if (*(void *)a1)
  {
    unint64_t v9 = v8 % *(unsigned int *)(a1 + 24);
    uint64_t v10 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v9);
    if (v10 != 0x7FFFFFFF)
    {
      uint64_t v15 = *(void *)(a1 + 16);
      if (*(void *)(v15 + 32 * v10 + 16) == v6)
      {
LABEL_12:
        *(void *)(v15 + 32 * v10 + 24) = *a3;
        goto LABEL_13;
      }
      while (1)
      {
        uint64_t v10 = *(_DWORD *)(v15 + 32 * v10 + 8) & 0x7FFFFFFF;
        if (v10 == 0x7FFFFFFF) {
          break;
        }
        if (*(void *)(v15 + 32 * v10 + 16) == v6) {
          goto LABEL_12;
        }
      }
    }
  }
  uint64_t v11 = *(unsigned int *)(a1 + 36);
  if (v11 == 0x7FFFFFFF)
  {
    uint64_t v11 = *(unsigned int *)(a1 + 32);
    int v12 = v11;
    if (v11 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      LODWORD(v9) = v8 % *(unsigned int *)(a1 + 24);
      int v12 = *(_DWORD *)(a1 + 32);
      uint64_t v6 = *a2;
    }
    *(_DWORD *)(a1 + 32) = v12 + 1;
    uint64_t v13 = *(void *)(a1 + 16);
    int v14 = *(_DWORD *)(v13 + 32 * v11 + 8);
  }
  else
  {
    uint64_t v13 = *(void *)(a1 + 16);
    int v14 = *(_DWORD *)(v13 + 32 * v11 + 8);
    *(_DWORD *)(a1 + 36) = v14 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v13 + 32 * v11 + 8) = v14 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + 32 * v11 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 32 * v11 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * v9);
  *(void *)(*(void *)(a1 + 16) + 32 * v11) = v8;
  *(void *)(*(void *)(a1 + 16) + 32 * v11 + 16) = v6;
  *(void *)(*(void *)(a1 + 16) + 32 * v11 + 24) = *a3;
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * v9) = v11;
  ++*(_DWORD *)(a1 + 28);
LABEL_13:
  ++*(_DWORD *)(a1 + 40);
}

uint64_t re::FixedArray<re::PlanarReceiverData::Bucket>::FixedArray(uint64_t *a1, uint64_t *a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v3 = *a2;
  if (!v3) {
    return (uint64_t)a1;
  }
  unint64_t v4 = (unint64_t)a1;
  re::FixedArray<re::FixedArray<unsigned int>>::init<>(a1, v3, a2[1]);
  uint64_t v6 = a2[1];
  if (a1[1] != v6) {
    goto LABEL_44;
  }
  if (!v6) {
    return (uint64_t)a1;
  }
  unint64_t v7 = (uint64_t *)a2[2];
  unint64_t v8 = &v7[3 * v6];
  for (uint64_t i = (uint64_t *)a1[2]; ; i += 3)
  {
    if (i == v7) {
      goto LABEL_39;
    }
    uint64_t v10 = *v7;
    if (!*i) {
      break;
    }
    if (v10) {
      goto LABEL_16;
    }
LABEL_39:
    v7 += 3;
    if (v7 == v8) {
      return (uint64_t)a1;
    }
  }
  if (!v10) {
    goto LABEL_39;
  }
  unint64_t v4 = v7[1];
  *uint64_t i = v10;
  i[1] = v4;
  if (v4)
  {
    if (v4 >= 0x2AAAAAAAAAAAAABLL) {
      goto LABEL_42;
    }
    uint64_t v11 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)v10 + 32))(v10, 96 * v4, 8);
    i[2] = v11;
    if (!v11) {
      goto LABEL_43;
    }
    unint64_t v12 = v4 - 1;
    if (v4 != 1)
    {
      do
      {
        *(void *)uint64_t v11 = 0;
        *(void *)(v11 + 8) = 0;
        *(_DWORD *)(v11 + 24) = 0;
        *(void *)(v11 + 16) = 0;
        *(_OWORD *)(v11 + 32) = 0uLL;
        *(_OWORD *)(v11 + 48) = 0uLL;
        *(_OWORD *)(v11 + 64) = 0uLL;
        *(_OWORD *)(v11 + 80) = 0uLL;
        *(_DWORD *)(v11 + 84) = 0x7FFFFFFF;
        v11 += 96;
        --v12;
      }
      while (v12);
    }
    *(void *)uint64_t v11 = 0;
    *(void *)(v11 + 8) = 0;
    *(_DWORD *)(v11 + 24) = 0;
    *(void *)(v11 + 16) = 0;
    *(_OWORD *)(v11 + 32) = 0uLL;
    *(_OWORD *)(v11 + 48) = 0uLL;
    *(_OWORD *)(v11 + 64) = 0uLL;
    *(_OWORD *)(v11 + 80) = 0uLL;
    *(_DWORD *)(v11 + 84) = 0x7FFFFFFF;
  }
LABEL_16:
  uint64_t v13 = v7[1];
  if (i[1] == v13)
  {
    if (v13)
    {
      uint64_t v14 = v7[2];
      unint64_t v4 = v14 + 96 * v13;
      uint64_t v15 = i[2];
      do
      {
        if (v15 != v14)
        {
          uint64_t v16 = *(void *)v14;
          if (*(void *)v15)
          {
            if (v16)
            {
              re::DynamicArray<re::MeshScene>::copy((void *)v15, v14);
            }
            else
            {
              uint64_t v18 = *(void *)(v15 + 16);
              *(void *)(v15 + 16) = 0;
              if (v18)
              {
                uint64_t v19 = 656 * v18;
                uint64_t v20 = *(void *)(v15 + 32) + 256;
                do
                {
                  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit(v20);
                  v20 += 656;
                  v19 -= 656;
                }
                while (v19);
              }
            }
            ++*(_DWORD *)(v15 + 24);
          }
          else if (v16)
          {
            unint64_t v17 = *(void *)(v14 + 16);
            *(void *)uint64_t v15 = v16;
            re::DynamicArray<re::MeshScene>::setCapacity((void *)v15, v17);
            ++*(_DWORD *)(v15 + 24);
            re::DynamicArray<re::MeshScene>::copy((void *)v15, v14);
          }
          uint64_t v5 = *(void *)(v14 + 48);
          uint64_t v21 = *(void *)(v15 + 48);
          *(void *)(v15 + 40) = *(void *)(v14 + 40);
          if (v21)
          {
            uint64_t v22 = v15 + 48;
            if (v5)
            {
              re::HashTable<unsigned long long,re::MaterialParameterTable const*,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::copy(v22, v14 + 48);
              ++*(_DWORD *)(v15 + 88);
            }
            else
            {
              re::HashTable<void *,unsigned int,re::Hash<void *>,re::EqualTo<void *>,true,false>::clear(v22);
            }
          }
          else if (v5)
          {
            if (*(_DWORD *)(v14 + 76) <= 3u) {
              signed int v23 = 3;
            }
            else {
              signed int v23 = *(_DWORD *)(v14 + 76);
            }
            re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(v15 + 48, v5, v23);
            re::HashTable<unsigned long long,re::MaterialParameterTable const*,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::copy(v15 + 48, v14 + 48);
          }
        }
        v14 += 96;
        v15 += 96;
      }
      while (v14 != v4);
    }
    goto LABEL_39;
  }
  re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) Cannot copy from a FixedArray of a different size", "m_size == other.m_size", "copy", 388);
  _os_crash();
  __break(1u);
LABEL_42:
  re::internal::assertLog((re::internal *)6, v5, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 96, v4);
  _os_crash();
  __break(1u);
LABEL_43:
  re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
  _os_crash();
  __break(1u);
LABEL_44:
  re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) Cannot copy from a FixedArray of a different size", "m_size == other.m_size", "copy", 388);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

void re::HashTable<unsigned long long,re::MaterialParameterTable const*,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::copy(uint64_t a1, uint64_t a2)
{
  re::HashTable<void *,unsigned int,re::Hash<void *>,re::EqualTo<void *>,true,false>::clear(a1);
  unsigned int v4 = *(_DWORD *)(a2 + 28);
  if (*(_DWORD *)(a1 + 24) < v4) {
    re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::setCapacity(a1, v4);
  }
  unint64_t v5 = *(unsigned int *)(a2 + 32);
  if (v5)
  {
    uint64_t v6 = 0;
    for (unint64_t i = 0; i < v5; ++i)
    {
      unint64_t v8 = (unint64_t *)(*(void *)(a2 + 16) + v6);
      if ((v8[1] & 0x80000000) != 0)
      {
        unint64_t v9 = *v8;
        unint64_t v10 = *(unsigned int *)(a1 + 24);
        unint64_t v11 = *v8 % v10;
        uint64_t v12 = *(unsigned int *)(a1 + 36);
        if (v12 == 0x7FFFFFFF)
        {
          uint64_t v12 = *(unsigned int *)(a1 + 32);
          int v13 = v12;
          if (v12 == v10)
          {
            re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
            unint64_t v11 = v9 % *(unsigned int *)(a1 + 24);
            int v13 = *(_DWORD *)(a1 + 32);
          }
          *(_DWORD *)(a1 + 32) = v13 + 1;
          uint64_t v14 = *(void *)(a1 + 16);
          int v15 = *(_DWORD *)(v14 + 32 * v12 + 8);
        }
        else
        {
          uint64_t v14 = *(void *)(a1 + 16);
          int v15 = *(_DWORD *)(v14 + 32 * v12 + 8);
          *(_DWORD *)(a1 + 36) = v15 & 0x7FFFFFFF;
        }
        *(_DWORD *)(v14 + 32 * v12 + 8) = v15 | 0x80000000;
        *(_DWORD *)(*(void *)(a1 + 16) + 32 * v12 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 32 * v12 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * v11);
        *(void *)(*(void *)(a1 + 16) + 32 * v12) = v9;
        unint64_t v16 = v8[3];
        *(void *)(*(void *)(a1 + 16) + 32 * v12 + 16) = v8[2];
        *(void *)(*(void *)(a1 + 16) + 32 * v12 + 24) = v16;
        *(_DWORD *)(*(void *)(a1 + 8) + 4 * v11) = v12;
        ++*(_DWORD *)(a1 + 28);
        unint64_t v5 = *(unsigned int *)(a2 + 32);
      }
      v6 += 32;
    }
  }
}

uint64_t re::HashTable<unsigned long long,re::PlanarReceiverEntry,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::HashTable(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 36) = 0x7FFFFFFFLL;
  uint64_t v4 = *(void *)a2;
  if (v4)
  {
    if (*(_DWORD *)(a2 + 28) <= 3u) {
      signed int v5 = 3;
    }
    else {
      signed int v5 = *(_DWORD *)(a2 + 28);
    }
    re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(a1, v4, v5);
    re::HashTable<unsigned long long,re::PlanarReceiverEntry,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::copy(a1, a2);
  }
  return a1;
}

double re::createWarpMatrixForSourceProjection(float32x4_t a1, float32x4_t a2, float32x4_t a3, float32x4_t a4, simd_float4 a5, simd_float4 a6, simd_float4 a7, simd_float4 a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, float32x4_t a17, float32x4_t a18, float32x4_t a19, float32x4_t a20,simd_float4 a21,simd_float4 a22,simd_float4 a23,simd_float4 a24)
{
  uint64_t v24 = 0;
  v33.columns[0] = a5;
  v33.columns[1] = a6;
  v33.columns[2] = a7;
  v33.columns[3] = a8;
  do
  {
    v34.columns[v24] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a1, COERCE_FLOAT(*(_OWORD *)&v33.columns[v24])), a2, *(float32x2_t *)v33.columns[v24].f32, 1), a3, (float32x4_t)v33.columns[v24], 2), a4, (float32x4_t)v33.columns[v24], 3);
    ++v24;
  }
  while (v24 != 4);
  uint64_t v25 = 0;
  simd_float4x4 v26 = v34;
  v33.columns[0] = a21;
  v33.columns[1] = a22;
  v33.columns[2] = a23;
  v33.columns[3] = a24;
  do
  {
    v34.columns[v25] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a17, COERCE_FLOAT(*(_OWORD *)&v33.columns[v25])), a18, *(float32x2_t *)v33.columns[v25].f32, 1), a19, (float32x4_t)v33.columns[v25], 2), a20, (float32x4_t)v33.columns[v25], 3);
    ++v25;
  }
  while (v25 != 4);
  float32x4_t v31 = (float32x4_t)v34.columns[0];
  float32x4_t v32 = (float32x4_t)v34.columns[1];
  float32x4_t v29 = (float32x4_t)v34.columns[3];
  float32x4_t v30 = (float32x4_t)v34.columns[2];
  simd_float4x4 v35 = __invert_f4(v26);
  uint64_t v27 = 0;
  simd_float4x4 v33 = v35;
  do
  {
    v34.columns[v27] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v31, COERCE_FLOAT(*(_OWORD *)&v33.columns[v27])), v32, *(float32x2_t *)v33.columns[v27].f32, 1), v30, (float32x4_t)v33.columns[v27], 2), v29, (float32x4_t)v33.columns[v27], 3);
    ++v27;
  }
  while (v27 != 4);
  return *(double *)v34.columns[0].i64;
}

double re::createViewportToNDCReprojectionMatrix(uint64_t a1, unint64_t a2, float32x4_t a3, float32x4_t a4, float32x4_t a5, float a6, double a7)
{
  uint64_t v7 = 0;
  float32x2_t v8 = (float32x2_t)vzip1_s32((int32x2_t)a2, (int32x2_t)HIDWORD(a2));
  *((float *)&a7 + 1) = a6;
  float32x2_t v9 = vmul_f32(*(float32x2_t *)&a7, v8);
  *(float *)&a7 = -*(float *)&a7;
  *(float32x2_t *)&long long v10 = vdiv_f32(vmla_f32((float32x2_t)0xBF8000003F800000, vmla_f32(v8, (float32x2_t)0x4000000040000000, (float32x2_t)a1), *(float32x2_t *)&a7), v9);
  DWORD2(v10) = vextq_s8(*(int8x16_t *)(MEMORY[0x263EF89A0] + 32), *(int8x16_t *)(MEMORY[0x263EF89A0] + 32), 8uLL).u32[0];
  HIDWORD(v10) = HIDWORD(*(_OWORD *)(MEMORY[0x263EF89A0] + 32));
  v12[2] = v10;
  do
  {
    *(long long *)((char *)&v13 + v7 * 16) = (__int128)vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a3, COERCE_FLOAT(v12[v7])), a4, *(float32x2_t *)&v12[v7], 1), a5, (float32x4_t)v12[v7], 2);
    ++v7;
  }
  while (v7 != 3);
  return *(double *)&v13;
}

void *re::DepthStencilCombinerProvider::DepthStencilCombinerProvider(void *a1, const re::DynamicString *a2)
{
  re::DynamicString::DynamicString((re::DynamicString *)&v4, a2);
  *a1 = &unk_26E6D52C8;
  re::DynamicString::DynamicString((re::DynamicString *)(a1 + 1), (const re::DynamicString *)&v4);
  if (v4 && (v5 & 1) != 0) {
    (*(void (**)(void))(*(void *)v4 + 40))();
  }
  *a1 = &unk_26E71B600;
  a1[5] = 65290051;
  a1[6] = "Color";
  a1[7] = 65919651;
  a1[8] = "Depth";
  a1[9] = 0x11F25A259CLL;
  a1[10] = "Stencil";
  return a1;
}

void re::DepthStencilCombinerProvider::~DepthStencilCombinerProvider(re::DepthStencilCombinerProvider *this)
{
  *(void *)this = &unk_26E6D52C8;
  re::DynamicString::deinit((re::DepthStencilCombinerProvider *)((char *)this + 8));
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E6D52C8;
  re::DynamicString::deinit((re::DepthStencilCombinerProvider *)((char *)this + 8));
  JUMPOUT(0x237DBCBD0);
}

unint64_t re::DepthStencilCombinerProvider::prepareFrame(re::DepthStencilCombinerProvider *this, char *a2, const char *a3, re::RenderFrame *a4)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  uint64_t v23 = *((void *)this + 7) & 0x7FFFFFFFFFFFFFFFLL;
  signed int ScopePixelFormat = re::RenderFrame::getScopePixelFormat((uint64_t)a4, a3, &v23);
  uint64_t v22 = *((void *)this + 9) & 0x7FFFFFFFFFFFFFFFLL;
  signed int v9 = re::RenderFrame::getScopePixelFormat((uint64_t)a4, a3, &v22);
  size_t v10 = strlen(a2);
  if (v10)
  {
    MurmurHash3_x64_128((uint64_t)a2, v10, 0, &v24);
    unint64_t v11 = (v25 - 0x61C8864680B583E9 + (v24 << 6) + (v24 >> 2)) ^ v24;
  }
  else
  {
    unint64_t v11 = 0;
  }
  size_t v12 = strlen(a3);
  if (v12)
  {
    MurmurHash3_x64_128((uint64_t)a3, v12, 0, &v24);
    unint64_t v13 = ((v25 - 0x61C8864680B583E9 + (v24 << 6) + (v24 >> 2)) ^ v24) - 0x61C8864680B583E9;
  }
  else
  {
    unint64_t v13 = 0x9E3779B97F4A7C17;
  }
  uint64_t v14 = *(unsigned int *)(re::RenderGraphDataStore::get<re::CameraData>((uint64_t)a4 + 32, ((v11 >> 2) + (v11 << 6) + v13) ^ v11)+ 484);
  v21[0] = 0x674BDBD52888E1DDLL;
  v21[1] = (unint64_t)"DepthStencilCombinerProvider";
  unint64_t ScopeHash = re::RenderGraphProviderBase::generateScopeHash(v21, a2, a3);
  unint64_t v16 = 0xBF58476D1CE4E5B9 * (ScopePixelFormat ^ ((unint64_t)ScopePixelFormat >> 30));
  unint64_t v17 = (((0x94D049BB133111EBLL * (v16 ^ (v16 >> 27))) ^ ((0x94D049BB133111EBLL * (v16 ^ (v16 >> 27))) >> 31))
       - 0x61C8864680B583E9
       + (ScopeHash << 6)
       + (ScopeHash >> 2)) ^ ScopeHash;
  unint64_t v18 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (v9 ^ ((unint64_t)v9 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                        * (v9 ^ ((unint64_t)v9 >> 30))) >> 27));
  unint64_t v19 = ((v18 ^ (v18 >> 31)) - 0x61C8864680B583E9 + (v17 << 6) + (v17 >> 2)) ^ v17;
  return (v14 - 0x61C8864680B583E9 + (v19 << 6) + (v19 >> 2)) ^ v19;
}

void re::DepthStencilCombinerProvider::provide(re::DepthStencilCombinerProvider *this, const char *a2, const char *a3, re::RenderFrame *a4)
{
  uint64_t v47 = *((void *)this + 7) & 0x7FFFFFFFFFFFFFFFLL;
  unsigned int ScopePixelFormat = re::RenderFrame::getScopePixelFormat((uint64_t)a4, a3, &v47);
  unsigned int v48 = ScopePixelFormat;
  uint64_t v45 = *((void *)this + 9) & 0x7FFFFFFFFFFFFFFFLL;
  unsigned int v9 = re::RenderFrame::getScopePixelFormat((uint64_t)a4, a3, &v45);
  unsigned int v46 = v9;
  BOOL v11 = ScopePixelFormat != 250 && ScopePixelFormat != 252;
  BOOL v13 = ScopePixelFormat != 255 && ScopePixelFormat != 260;
  BOOL v15 = v9 != 255 && v9 != 260;
  if (v13 || v15)
  {
    char v18 = v9 != 253 || v13;
    if (v18)
    {
      if (v9) {
        BOOL v13 = 1;
      }
      if (!v13)
      {
        BOOL v17 = ScopePixelFormat == 0;
        int v43 = 0;
        unsigned int v44 = ScopePixelFormat;
        goto LABEL_53;
      }
      if (!v11 && !v15)
      {
        BOOL v16 = v9 == 0;
        BOOL v17 = ScopePixelFormat == 0;
        int v43 = 20;
        unsigned int v44 = v9;
        goto LABEL_22;
      }
      if (ScopePixelFormat) {
        LOBYTE(v15) = 1;
      }
      if (!v15)
      {
        int v43 = 0;
        unsigned int v44 = v9;
        BOOL v42 = v9 == 0;
        goto LABEL_56;
      }
      char v19 = v9 != 253 || v11;
      if (v19)
      {
        if (v11 || v9 != 0)
        {
          if (v9 != 253 || ScopePixelFormat != 0)
          {
            if (ScopePixelFormat != 0 || v9 != 0) {
              return;
            }
            if (*(unsigned char *)(*((void *)a4 + 1) + 308))
            {
              uint64_t v21 = this;
              uint64_t v22 = a2;
              uint64_t v23 = a3;
              unint64_t v24 = a4;
              BOOL v25 = 1;
LABEL_63:
              re::DepthStencilCombinerProvider::provide(char const*,char const*,re::RenderFrame &)const::$_0::operator()((uint64_t)v21, v22, v23, v24, (int *)&v48, v25);
              unsigned int v37 = this;
              uint32x2_t v38 = a2;
              uint64_t v39 = a3;
              unsigned int v40 = a4;
              int v41 = 1;
              goto LABEL_64;
            }
            int v43 = 0;
            unsigned int v44 = 260;
            BOOL v42 = 1;
            uint64_t v26 = "DropDepthDropStencil";
            uint64_t v27 = "DropDepthDropStencil[MSAA]";
LABEL_57:
            uint64_t v28 = this;
            float32x4_t v29 = a2;
            float32x4_t v30 = a3;
            float32x4_t v31 = a4;
            BOOL v17 = 1;
            goto LABEL_50;
          }
          if (*(unsigned char *)(*((void *)a4 + 1) + 308))
          {
            simd_float4x4 v33 = this;
            simd_float4x4 v34 = a2;
            simd_float4x4 v35 = a3;
            unsigned int v36 = a4;
            BOOL v32 = 1;
            goto LABEL_60;
          }
          int v43 = 20;
          unsigned int v44 = 260;
          BOOL v42 = 0;
LABEL_56:
          uint64_t v26 = "DropDepthKeepStencil";
          uint64_t v27 = "DropDepthKeepStencil[MSAA]";
          goto LABEL_57;
        }
        if (*(unsigned char *)(*((void *)a4 + 1) + 308))
        {
          BOOL v25 = ScopePixelFormat == 0;
          uint64_t v21 = this;
          uint64_t v22 = a2;
          uint64_t v23 = a3;
          unint64_t v24 = a4;
          goto LABEL_63;
        }
        BOOL v17 = ScopePixelFormat == 0;
        int v43 = 20;
        unsigned int v44 = 260;
LABEL_53:
        BOOL v42 = 1;
        uint64_t v26 = "KeepDepthDropStencil";
        uint64_t v27 = "KeepDepthDropStencil[MSAA]";
        goto LABEL_49;
      }
      if (*(unsigned char *)(*((void *)a4 + 1) + 308))
      {
        BOOL v32 = ScopePixelFormat == 0;
        simd_float4x4 v33 = this;
        simd_float4x4 v34 = a2;
        simd_float4x4 v35 = a3;
        unsigned int v36 = a4;
LABEL_60:
        re::DepthStencilCombinerProvider::provide(char const*,char const*,re::RenderFrame &)const::$_0::operator()((uint64_t)v33, v34, v35, v36, (int *)&v48, v32);
        unsigned int v37 = this;
        uint32x2_t v38 = a2;
        uint64_t v39 = a3;
        unsigned int v40 = a4;
        int v41 = 0;
LABEL_64:
        re::DepthStencilCombinerProvider::provide(char const*,char const*,re::RenderFrame &)const::$_1::operator()((uint64_t)v37, v38, v39, v40, (int *)&v46, v41);
        return;
      }
      BOOL v17 = ScopePixelFormat == 0;
      unsigned int v44 = 260;
    }
    else
    {
      BOOL v17 = ScopePixelFormat == 0;
      unsigned int v44 = ScopePixelFormat;
    }
    int v43 = 20;
    BOOL v42 = 0;
    goto LABEL_48;
  }
  BOOL v16 = v9 == 0;
  BOOL v17 = ScopePixelFormat == 0;
  int v43 = 0;
  unsigned int v44 = ScopePixelFormat;
LABEL_22:
  BOOL v42 = v16;
LABEL_48:
  uint64_t v26 = "KeepDepthKeepStencil";
  uint64_t v27 = "KeepDepthKeepStencil[MSAA]";
LABEL_49:
  uint64_t v28 = this;
  float32x4_t v29 = a2;
  float32x4_t v30 = a3;
  float32x4_t v31 = a4;
LABEL_50:
  re::DepthStencilCombinerProvider::provide(char const*,char const*,re::RenderFrame &)const::$_2::operator()((uint64_t)v28, v29, v30, v31, (int *)&v44, v26, v27, v17, v42, &v43);
}

void re::DepthStencilCombinerProvider::provide(char const*,char const*,re::RenderFrame &)const::$_2::operator()(uint64_t a1, const char *a2, const char *a3, re::RenderFrame *this, int *a5, char *a6, const char *a7, int a8, char a9, int *a10)
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  re::RenderFrame::tryGetInputTarget(this, a6, 0, (double *)&v45);
  if (DWORD2(v45) == -1 || HIDWORD(v45) == -1)
  {
    uint64_t v44 = 0;
    if (!a8 || (a9 & 1) == 0)
    {
      if (a9) {
        uint64_t v19 = *(void *)(a1 + 56);
      }
      else {
        uint64_t v19 = *(void *)(a1 + 72);
      }
      uint64_t v44 = v19 & 0x7FFFFFFFFFFFFFFFLL;
    }
    uint64_t v34 = -1;
    unint64_t v20 = 0x9E3779B97F4A7C17;
    uint64_t v35 = -1;
    uint64_t v36 = -1;
    char v37 = 0;
    __asm { FMOV            V0.2S, #1.0 }
    uint64_t v38 = _D0;
    long long v39 = xmmword_2343AEB90;
    long long v41 = xmmword_234376700;
    long long v42 = xmmword_234378E20;
    char v43 = 0;
    int v40 = *a10;
    int v25 = *a5;
    LODWORD(v32) = 3;
    HIDWORD(v32) = v25;
    int v33 = 3;
    re::RenderFrame::createTarget(this, (const re::RenderGraphTargetDescription *)&v32, a6, &v46);
    long long v45 = v46;
    re::RenderFrame::inheritLaneProperties(this, &v44, (double *)&v45, 0);
    size_t v26 = strlen(a2);
    if (v26)
    {
      MurmurHash3_x64_128((uint64_t)a2, v26, 0, (unint64_t *)&v46);
      unint64_t v27 = (*((void *)&v46 + 1) - 0x61C8864680B583E9 + ((void)v46 << 6) + ((unint64_t)v46 >> 2)) ^ v46;
    }
    else
    {
      unint64_t v27 = 0;
    }
    size_t v28 = strlen(a3);
    if (v28)
    {
      MurmurHash3_x64_128((uint64_t)a3, v28, 0, (unint64_t *)&v46);
      unint64_t v20 = ((*((void *)&v46 + 1) - 0x61C8864680B583E9 + ((void)v46 << 6) + ((unint64_t)v46 >> 2)) ^ v46)
          - 0x61C8864680B583E9;
    }
    unsigned int v29 = *(_DWORD *)(re::RenderGraphDataStore::get<re::CameraData>((uint64_t)this + 32, ((v27 >> 2) + (v27 << 6) + v20) ^ v27)+ 484);
    if (v29 >= 2)
    {
      LODWORD(v35) = v29;
      int v33 = 8;
      re::RenderFrame::createTarget(this, (const re::RenderGraphTargetDescription *)&v32, a7, &v46);
      long long v31 = v45;
      int v30 = DWORD2(v46);
      *(_DWORD *)(re::RenderGraphResourceDescriptions::targetDescription((re::RenderFrame *)((char *)this + 3448), (uint64_t *)&v31)+ 80) = v30;
      re::RenderFrame::inheritLaneProperties(this, &v44, (double *)&v46, 0);
    }
  }
  uint64_t v32 = *(void *)(a1 + 56) & 0x7FFFFFFFFFFFFFFFLL;
  re::RenderFrame::addTargetOutput(this, &v32, (double *)&v45, 0);
  uint64_t v32 = *(void *)(a1 + 72) & 0x7FFFFFFFFFFFFFFFLL;
  re::RenderFrame::addTargetOutput(this, &v32, (double *)&v45, 0);
}

void re::DepthStencilCombinerProvider::provide(char const*,char const*,re::RenderFrame &)const::$_0::operator()(uint64_t a1, const char *a2, const char *a3, re::RenderFrame *this, int *a5, int a6)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  size_t v12 = (void *)(a1 + 56);
  re::RenderFrame::tryGetInputTarget(this, *(const char **)(a1 + 64), 0, (double *)&v41);
  if (DWORD2(v41) == -1 || HIDWORD(v41) == -1)
  {
    uint64_t v31 = -1;
    unint64_t v14 = 0x9E3779B97F4A7C17;
    uint64_t v32 = -1;
    uint64_t v33 = -1;
    char v34 = 0;
    __asm { FMOV            V0.2S, #1.0 }
    uint64_t v35 = _D0;
    int v38 = -1;
    long long v39 = xmmword_234378E20;
    char v40 = 0;
    long long v36 = xmmword_2343AEB90;
    long long v37 = xmmword_2343AEBA0;
    int v19 = *a5;
    if (!*a5) {
      int v19 = 252;
    }
    LODWORD(v29) = 3;
    HIDWORD(v29) = v19;
    int v30 = 3;
    re::RenderFrame::createTarget(this, (const re::RenderGraphTargetDescription *)&v29, "Depth", &v42);
    long long v41 = v42;
    uint64_t v20 = 56;
    if (a6)
    {
      uint64_t v20 = 72;
      uint64_t v21 = (void *)(a1 + 72);
    }
    else
    {
      uint64_t v21 = v12;
    }
    *(void *)&long long v42 = *(void *)(a1 + v20) & 0x7FFFFFFFFFFFFFFFLL;
    re::RenderFrame::inheritLaneProperties(this, (uint64_t *)&v42, (double *)&v41, 0);
    size_t v22 = strlen(a2);
    if (v22)
    {
      MurmurHash3_x64_128((uint64_t)a2, v22, 0, (unint64_t *)&v42);
      unint64_t v23 = (*((void *)&v42 + 1) - 0x61C8864680B583E9 + ((void)v42 << 6) + ((unint64_t)v42 >> 2)) ^ v42;
    }
    else
    {
      unint64_t v23 = 0;
    }
    size_t v24 = strlen(a3);
    if (v24)
    {
      MurmurHash3_x64_128((uint64_t)a3, v24, 0, (unint64_t *)&v42);
      unint64_t v14 = ((*((void *)&v42 + 1) - 0x61C8864680B583E9 + ((void)v42 << 6) + ((unint64_t)v42 >> 2)) ^ v42)
          - 0x61C8864680B583E9;
    }
    unsigned int v25 = *(_DWORD *)(re::RenderGraphDataStore::get<re::CameraData>((uint64_t)this + 32, ((v23 >> 2) + (v23 << 6) + v14) ^ v23)+ 484);
    if (v25 >= 2)
    {
      LODWORD(v32) = v25;
      int v30 = 8;
      re::RenderFrame::createTarget(this, (const re::RenderGraphTargetDescription *)&v29, "Depth[MSAA]", &v42);
      long long v28 = v41;
      int v26 = DWORD2(v42);
      *(_DWORD *)(re::RenderGraphResourceDescriptions::targetDescription((re::RenderFrame *)((char *)this + 3448), (uint64_t *)&v28)+ 80) = v26;
      uint64_t v27 = *v21 & 0x7FFFFFFFFFFFFFFFLL;
      re::RenderFrame::inheritLaneProperties(this, &v27, (double *)&v42, 0);
    }
  }
  uint64_t v29 = *v12 & 0x7FFFFFFFFFFFFFFFLL;
  re::RenderFrame::addTargetOutput(this, &v29, (double *)&v41, 0);
}

void re::DepthStencilCombinerProvider::provide(char const*,char const*,re::RenderFrame &)const::$_1::operator()(uint64_t a1, const char *a2, const char *a3, re::RenderFrame *this, int *a5, int a6)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  size_t v12 = (void *)(a1 + 72);
  re::RenderFrame::tryGetInputTarget(this, *(const char **)(a1 + 80), 0, (double *)&v41);
  if (DWORD2(v41) == -1 || HIDWORD(v41) == -1)
  {
    uint64_t v31 = -1;
    unint64_t v14 = 0x9E3779B97F4A7C17;
    uint64_t v32 = -1;
    uint64_t v33 = -1;
    char v34 = 0;
    __asm { FMOV            V0.2S, #1.0 }
    uint64_t v35 = _D0;
    int v38 = -1;
    long long v39 = xmmword_234378E20;
    char v40 = 0;
    long long v36 = xmmword_2343AEB90;
    long long v37 = xmmword_2343AEBA0;
    int v19 = *a5;
    if (!*a5) {
      int v19 = 253;
    }
    LODWORD(v29) = 3;
    HIDWORD(v29) = v19;
    int v30 = 3;
    re::RenderFrame::createTarget(this, (const re::RenderGraphTargetDescription *)&v29, "Stencil", &v42);
    long long v41 = v42;
    uint64_t v20 = 72;
    if (a6)
    {
      uint64_t v20 = 56;
      uint64_t v21 = (void *)(a1 + 56);
    }
    else
    {
      uint64_t v21 = v12;
    }
    *(void *)&long long v42 = *(void *)(a1 + v20) & 0x7FFFFFFFFFFFFFFFLL;
    re::RenderFrame::inheritLaneProperties(this, (uint64_t *)&v42, (double *)&v41, 0);
    size_t v22 = strlen(a2);
    if (v22)
    {
      MurmurHash3_x64_128((uint64_t)a2, v22, 0, (unint64_t *)&v42);
      unint64_t v23 = (*((void *)&v42 + 1) - 0x61C8864680B583E9 + ((void)v42 << 6) + ((unint64_t)v42 >> 2)) ^ v42;
    }
    else
    {
      unint64_t v23 = 0;
    }
    size_t v24 = strlen(a3);
    if (v24)
    {
      MurmurHash3_x64_128((uint64_t)a3, v24, 0, (unint64_t *)&v42);
      unint64_t v14 = ((*((void *)&v42 + 1) - 0x61C8864680B583E9 + ((void)v42 << 6) + ((unint64_t)v42 >> 2)) ^ v42)
          - 0x61C8864680B583E9;
    }
    unsigned int v25 = *(_DWORD *)(re::RenderGraphDataStore::get<re::CameraData>((uint64_t)this + 32, ((v23 >> 2) + (v23 << 6) + v14) ^ v23)+ 484);
    if (v25 >= 2)
    {
      LODWORD(v32) = v25;
      int v30 = 8;
      re::RenderFrame::createTarget(this, (const re::RenderGraphTargetDescription *)&v29, "Stencil[MSAA]", &v42);
      long long v28 = v41;
      int v26 = DWORD2(v42);
      *(_DWORD *)(re::RenderGraphResourceDescriptions::targetDescription((re::RenderFrame *)((char *)this + 3448), (uint64_t *)&v28)+ 80) = v26;
      uint64_t v27 = *v21 & 0x7FFFFFFFFFFFFFFFLL;
      re::RenderFrame::inheritLaneProperties(this, &v27, (double *)&v42, 0);
    }
  }
  uint64_t v29 = *v12 & 0x7FFFFFFFFFFFFFFFLL;
  re::RenderFrame::addTargetOutput(this, &v29, (double *)&v41, 0);
}

re::RenderGraphSimpleForwardEmitter *re::RenderGraphSimpleForwardEmitter::RenderGraphSimpleForwardEmitter(re::RenderGraphSimpleForwardEmitter *this)
{
  uint64_t v2 = re::RealityEmitterBase::RealityEmitterBase(this);
  *(void *)uint64_t v2 = &unk_26E71B648;
  *((void *)v2 + 103) = 0;
  *((void *)v2 + 105) = 0;
  *((void *)v2 + 104) = 0;
  *(_OWORD *)((char *)v2 + 744) = 0u;
  *(_OWORD *)((char *)v2 + 760) = 0u;
  *(_OWORD *)((char *)v2 + 776) = 0u;
  *(_OWORD *)((char *)v2 + 792) = 0u;
  *(_OWORD *)((char *)v2 + 801) = 0u;
  re::StringID::invalid((re::RealityEmitterBase *)((char *)v2 + 848));
  *((void *)this + 108) = 0;
  re::StringID::invalid((re::RenderGraphSimpleForwardEmitter *)((char *)this + 872));
  *((void *)this + 111) = 0;
  re::StringID::invalid((re::RenderGraphSimpleForwardEmitter *)((char *)this + 896));
  *((void *)this + 114) = 0;
  re::StringID::invalid((re::RenderGraphSimpleForwardEmitter *)((char *)this + 920));
  *((void *)this + 117) = 0;
  re::StringID::invalid((re::RenderGraphSimpleForwardEmitter *)((char *)this + 944));
  *((void *)this + 120) = 0;
  re::StringID::invalid((re::RenderGraphSimpleForwardEmitter *)((char *)this + 968));
  *((void *)this + 123) = 0;
  re::StringID::invalid((re::RenderGraphSimpleForwardEmitter *)((char *)this + 992));
  *((void *)this + 126) = 0;
  re::StringID::invalid((re::RenderGraphSimpleForwardEmitter *)((char *)this + 1016));
  *((void *)this + 129) = 0;
  re::StringID::invalid((re::RenderGraphSimpleForwardEmitter *)((char *)this + 1040));
  *((void *)this + 133) = 0;
  *((void *)this + 132) = 0;
  return this;
}

re::RealityEmitterBase *re::RealityEmitterBase::RealityEmitterBase(re::RealityEmitterBase *this)
{
  *((unsigned char *)this + 8) = 0;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *(_OWORD *)((char *)this + 108) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)((char *)this + 60) = 0u;
  *(void *)((char *)this + 124) = 0x7FFFFFFFLL;
  *(void *)this = &unk_26E71B7A0;
  *((unsigned char *)this + 136) = 0;
  *(void *)((char *)this + 140) = 0xFD000000FCLL;
  *((void *)this + 19) = 0;
  *((void *)this + 20) = 0;
  *((_DWORD *)this + 42) = 2;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  re::StringID::invalid((re::RealityEmitterBase *)((char *)this + 256));
  *((void *)this + 34) = 0;
  re::StringID::invalid((re::RealityEmitterBase *)((char *)this + 280));
  *((void *)this + 37) = 0;
  re::StringID::invalid((re::RealityEmitterBase *)((char *)this + 304));
  *((void *)this + 40) = 0;
  re::StringID::invalid((re::RealityEmitterBase *)((char *)this + 328));
  *((void *)this + 43) = 0;
  re::StringID::invalid((re::RealityEmitterBase *)((char *)this + 352));
  *((void *)this + 46) = 0;
  re::StringID::invalid((re::RealityEmitterBase *)((char *)this + 376));
  *((void *)this + 49) = 0;
  re::StringID::invalid((re::RealityEmitterBase *)((char *)this + 400));
  *((void *)this + 52) = 0;
  re::StringID::invalid((re::RealityEmitterBase *)((char *)this + 424));
  *((void *)this + 55) = 0;
  re::StringID::invalid((re::RealityEmitterBase *)((char *)this + 448));
  *((void *)this + 58) = 0;
  re::StringID::invalid((re::RealityEmitterBase *)((char *)this + 472));
  *((unsigned char *)this + 496) = 0;
  *((void *)this + 61) = 0;
  *(_OWORD *)((char *)this + 504) = 0u;
  *(_OWORD *)((char *)this + 520) = 0u;
  *(_OWORD *)((char *)this + 536) = 0u;
  re::StringID::invalid((re::RealityEmitterBase *)((char *)this + 552));
  *((void *)this + 71) = 0;
  re::StringID::invalid((re::RealityEmitterBase *)((char *)this + 576));
  *((void *)this + 80) = 0;
  *((_OWORD *)this + 38) = 0u;
  *((_OWORD *)this + 39) = 0u;
  *((_OWORD *)this + 37) = 0u;
  re::StringID::invalid((re::RealityEmitterBase *)((char *)this + 648));
  *((void *)this + 83) = 0;
  re::StringID::invalid((re::RealityEmitterBase *)((char *)this + 672));
  *((void *)this + 86) = 0;
  re::StringID::invalid((re::RealityEmitterBase *)((char *)this + 696));
  *((void *)this + 89) = 0;
  re::StringID::invalid((re::RealityEmitterBase *)((char *)this + 720));
  *((void *)this + 92) = 0;
  return this;
}

void re::RenderGraphSimpleForwardEmitter::~RenderGraphSimpleForwardEmitter(re::RenderGraphSimpleForwardEmitter *this)
{
  uint64_t v2 = (re::RenderGraphManager *)*((void *)this + 133);
  if (v2) {
    re::RenderGraphSimpleForwardEmitter::unregisterProviders(this, v2);
  }
  re::StringID::destroyString((re::RenderGraphSimpleForwardEmitter *)((char *)this + 1040));
  re::StringID::destroyString((re::RenderGraphSimpleForwardEmitter *)((char *)this + 1016));
  re::StringID::destroyString((re::RenderGraphSimpleForwardEmitter *)((char *)this + 992));
  re::StringID::destroyString((re::RenderGraphSimpleForwardEmitter *)((char *)this + 968));
  re::StringID::destroyString((re::RenderGraphSimpleForwardEmitter *)((char *)this + 944));
  re::StringID::destroyString((re::RenderGraphSimpleForwardEmitter *)((char *)this + 920));
  re::StringID::destroyString((re::RenderGraphSimpleForwardEmitter *)((char *)this + 896));
  re::StringID::destroyString((re::RenderGraphSimpleForwardEmitter *)((char *)this + 872));
  re::StringID::destroyString((re::RenderGraphSimpleForwardEmitter *)((char *)this + 848));
  re::AssetHandle::~AssetHandle((re::RenderGraphSimpleForwardEmitter *)((char *)this + 824));
  re::AssetHandle::~AssetHandle((re::RenderGraphSimpleForwardEmitter *)((char *)this + 792));
  re::AssetHandle::~AssetHandle((re::RenderGraphSimpleForwardEmitter *)((char *)this + 768));
  re::AssetHandle::~AssetHandle((re::RenderGraphSimpleForwardEmitter *)((char *)this + 744));
  re::RealityEmitterBase::~RealityEmitterBase(this);
}

{
  uint64_t vars8;

  re::RenderGraphSimpleForwardEmitter::~RenderGraphSimpleForwardEmitter(this);
  JUMPOUT(0x237DBCBD0);
}

void re::RenderGraphSimpleForwardEmitter::unregisterProviders(re::RenderGraphSimpleForwardEmitter *this, re::RenderGraphManager *a2)
{
  re::RealityEmitterBase::unregisterCommonProviders(this, a2);
  if (re::FontID::isValid((re::RenderGraphSimpleForwardEmitter *)((char *)this + 896)))
  {
    re::StringID::StringID((re::StringID *)v20, (const StringID *)this + 56);
    uint64_t v21 = *((void *)this + 114);
    re::RenderGraphManager::removeProvider((uint64_t)a2, (uint64_t)v20);
    re::StringID::destroyString((re::StringID *)v20);
    re::ProviderHandle::invalidate((re::RenderGraphSimpleForwardEmitter *)((char *)this + 896));
  }
  if (re::FontID::isValid((re::RenderGraphSimpleForwardEmitter *)((char *)this + 920)))
  {
    re::StringID::StringID((re::StringID *)v18, (const StringID *)((char *)this + 920));
    uint64_t v19 = *((void *)this + 117);
    re::RenderGraphManager::removeProvider((uint64_t)a2, (uint64_t)v18);
    re::StringID::destroyString((re::StringID *)v18);
    re::ProviderHandle::invalidate((re::RenderGraphSimpleForwardEmitter *)((char *)this + 920));
  }
  if (re::FontID::isValid((re::RenderGraphSimpleForwardEmitter *)((char *)this + 992)))
  {
    re::StringID::StringID((re::StringID *)v16, (const StringID *)this + 62);
    uint64_t v17 = *((void *)this + 126);
    re::RenderGraphManager::removeProvider((uint64_t)a2, (uint64_t)v16);
    re::StringID::destroyString((re::StringID *)v16);
    re::ProviderHandle::invalidate((re::RenderGraphSimpleForwardEmitter *)((char *)this + 992));
  }
  if (re::FontID::isValid((re::RenderGraphSimpleForwardEmitter *)((char *)this + 1016)))
  {
    re::StringID::StringID((re::StringID *)v14, (const StringID *)((char *)this + 1016));
    uint64_t v15 = *((void *)this + 129);
    re::RenderGraphManager::removeProvider((uint64_t)a2, (uint64_t)v14);
    re::StringID::destroyString((re::StringID *)v14);
    re::ProviderHandle::invalidate((re::RenderGraphSimpleForwardEmitter *)((char *)this + 1016));
  }
  if (re::FontID::isValid((re::RenderGraphSimpleForwardEmitter *)((char *)this + 872)))
  {
    re::StringID::StringID((re::StringID *)v12, (const StringID *)((char *)this + 872));
    uint64_t v13 = *((void *)this + 111);
    re::RenderGraphManager::removeProvider((uint64_t)a2, (uint64_t)v12);
    re::StringID::destroyString((re::StringID *)v12);
    re::ProviderHandle::invalidate((re::RenderGraphSimpleForwardEmitter *)((char *)this + 872));
  }
  if (re::FontID::isValid((re::RenderGraphSimpleForwardEmitter *)((char *)this + 848)))
  {
    re::StringID::StringID((re::StringID *)v10, (const StringID *)this + 53);
    uint64_t v11 = *((void *)this + 108);
    re::RenderGraphManager::removeProvider((uint64_t)a2, (uint64_t)v10);
    re::StringID::destroyString((re::StringID *)v10);
    re::ProviderHandle::invalidate((re::RenderGraphSimpleForwardEmitter *)((char *)this + 848));
  }
  if (re::FontID::isValid((re::RenderGraphSimpleForwardEmitter *)((char *)this + 944)))
  {
    re::StringID::StringID((re::StringID *)v8, (const StringID *)this + 59);
    uint64_t v9 = *((void *)this + 120);
    re::RenderGraphManager::removeProvider((uint64_t)a2, (uint64_t)v8);
    re::StringID::destroyString((re::StringID *)v8);
    re::ProviderHandle::invalidate((re::RenderGraphSimpleForwardEmitter *)((char *)this + 944));
  }
  if (re::FontID::isValid((re::RenderGraphSimpleForwardEmitter *)((char *)this + 968)))
  {
    re::StringID::StringID((re::StringID *)v6, (const StringID *)((char *)this + 968));
    uint64_t v7 = *((void *)this + 123);
    re::RenderGraphManager::removeProvider((uint64_t)a2, (uint64_t)v6);
    re::StringID::destroyString((re::StringID *)v6);
    re::ProviderHandle::invalidate((re::RenderGraphSimpleForwardEmitter *)((char *)this + 968));
  }
  if (re::FontID::isValid((re::RenderGraphSimpleForwardEmitter *)((char *)this + 1040)))
  {
    re::StringID::StringID((re::StringID *)v4, (const StringID *)this + 65);
    uint64_t v5 = *((void *)this + 132);
    re::RenderGraphManager::removeProvider((uint64_t)a2, (uint64_t)v4);
    re::StringID::destroyString((re::StringID *)v4);
    re::ProviderHandle::invalidate((re::RenderGraphSimpleForwardEmitter *)((char *)this + 1040));
  }
}

void re::RealityEmitterBase::~RealityEmitterBase(re::RealityEmitterBase *this)
{
  *(void *)this = &unk_26E71B7A0;
  uint64_t v2 = (re::RealityEmitterBase *)((char *)this + 152);
  re::StringID::destroyString((re::RealityEmitterBase *)((char *)this + 720));
  re::StringID::destroyString((re::RealityEmitterBase *)((char *)this + 696));
  re::StringID::destroyString((re::RealityEmitterBase *)((char *)this + 672));
  re::StringID::destroyString((re::RealityEmitterBase *)((char *)this + 648));
  re::AssetHandle::~AssetHandle((re::RealityEmitterBase *)((char *)this + 624));
  re::AssetHandle::~AssetHandle((re::RealityEmitterBase *)((char *)this + 600));
  re::StringID::destroyString((re::RealityEmitterBase *)((char *)this + 576));
  re::StringID::destroyString((re::RealityEmitterBase *)((char *)this + 552));
  re::AssetHandle::~AssetHandle((re::RealityEmitterBase *)((char *)this + 528));
  re::AssetHandle::~AssetHandle((re::RealityEmitterBase *)((char *)this + 504));
  re::StringID::destroyString((re::RealityEmitterBase *)((char *)this + 472));
  re::StringID::destroyString((re::RealityEmitterBase *)((char *)this + 448));
  re::StringID::destroyString((re::RealityEmitterBase *)((char *)this + 424));
  re::StringID::destroyString((re::RealityEmitterBase *)((char *)this + 400));
  re::StringID::destroyString((re::RealityEmitterBase *)((char *)this + 376));
  re::StringID::destroyString((re::RealityEmitterBase *)((char *)this + 352));
  re::StringID::destroyString((re::RealityEmitterBase *)((char *)this + 328));
  re::StringID::destroyString((re::RealityEmitterBase *)((char *)this + 304));
  re::StringID::destroyString((re::RealityEmitterBase *)((char *)this + 280));
  re::StringID::destroyString((re::RealityEmitterBase *)((char *)this + 256));
  re::AssetHandle::~AssetHandle((re::RealityEmitterBase *)((char *)this + 224));
  re::AssetHandle::~AssetHandle((re::RealityEmitterBase *)((char *)this + 200));
  re::AssetHandle::~AssetHandle((re::RealityEmitterBase *)((char *)this + 176));
  re::ProjectiveShadowBuilder::MutableState::~MutableState(v2);
  re::RenderGraphEmitterBase::~RenderGraphEmitterBase(this);
}

void re::RenderGraphSimpleForwardEmitter::registerProviders(re::RenderGraphSimpleForwardEmitter *this, re::RenderManager **a2, AssetService *a3)
{
  re::RealityEmitterBase::registerCommonProviders(this, a2, a3);
  (*((void (**)(long long *__return_ptr, AssetService *, const char *))a3->var0 + 1))(&v85, a3, "engine:BuiltinRenderGraphResources/Common/depthClear.rematerial");
  long long v6 = *((_OWORD *)this + 11);
  *((_OWORD *)this + 11) = v85;
  long long v85 = v6;
  uint64_t v7 = *((void *)this + 24);
  *((void *)this + 24) = v86;
  uint64_t v86 = v7;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v85);
  re::AssetHandle::loadAsync((re::RenderGraphSimpleForwardEmitter *)((char *)this + 176));
  (*((void (**)(long long *__return_ptr, AssetService *, const char *))a3->var0 + 1))(&v85, a3, "engine:default.metallib");
  re::AssetHandle::loadAsync((re::AssetHandle *)&v85);
  uint64_t v8 = *((void *)this + 97);
  if (v8)
  {
    unsigned int v9 = atomic_load((unsigned int *)(v8 + 704));
    if (v9 != 2) {
      re::AssetHandle::loadNow(*((void *)this + 97), 0);
    }
    uint64_t v10 = *((void *)this + 97);
    if (v10)
    {
      unsigned int v11 = atomic_load((unsigned int *)(v10 + 704));
      if (v11 == 2 && !re::FontID::isValid((re::RenderGraphSimpleForwardEmitter *)((char *)this + 896)))
      {
        uint64_t v12 = re::AssetHandle::asset<re::RenderGraphAsset>((re::RenderGraphSimpleForwardEmitter *)((char *)this + 768));
        re::RenderGraphManager::addProviderInternal((re::RenderGraphManager *)a2, "Camera", (const re::RenderGraphProviderBase *)(v12 + 8), 0, 0, (uint64_t)&v83);
        long long v13 = v83;
        *(void *)&long long v83 = 0;
        *((void *)&v83 + 1) = "";
        uint64_t v14 = *((void *)this + 112);
        *((void *)this + 112) = v13;
        unint64_t v15 = v13 & 0xFFFFFFFFFFFFFFFELL | v14 & 1;
        uint64_t v16 = *((void *)this + 113);
        *((void *)this + 113) = *((void *)&v13 + 1);
        unint64_t v87 = v15;
        uint64_t v88 = v16;
        re::StringID::destroyString((re::StringID *)&v87);
        *((void *)this + 114) = v84;
        re::StringID::destroyString((re::StringID *)&v83);
      }
    }
  }
  BOOL isValid = re::FontID::isValid((re::RenderGraphSimpleForwardEmitter *)((char *)this + 920));
  if (!isValid)
  {
    char v18 = re::globalAllocators((re *)isValid);
    uint64_t v19 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v18[2] + 32))(v18[2], 48, 8);
    re::VFXRenderGraphProvider::VFXRenderGraphProvider((uint64_t)v19, (const re::DynamicString *)v82);
    if (*(void *)&v82[0])
    {
      if (BYTE8(v82[0])) {
        (*(void (**)(void))(**(void **)&v82[0] + 40))();
      }
      memset(v82, 0, sizeof(v82));
    }
    re::RenderGraphManager::addProviderInternal((re::RenderGraphManager *)a2, "VFXSimulation", v19, 0, 1, (uint64_t)&v83);
    long long v20 = v83;
    *(void *)&long long v83 = 0;
    *((void *)&v83 + 1) = "";
    uint64_t v21 = *((void *)this + 115);
    *((void *)this + 115) = v20;
    unint64_t v22 = v20 & 0xFFFFFFFFFFFFFFFELL | v21 & 1;
    uint64_t v23 = *((void *)this + 116);
    *((void *)this + 116) = *((void *)&v20 + 1);
    unint64_t v87 = v22;
    uint64_t v88 = v23;
    re::StringID::destroyString((re::StringID *)&v87);
    *((void *)this + 117) = v84;
    re::StringID::destroyString((re::StringID *)&v83);
  }
  BOOL v24 = re::FontID::isValid((re::RenderGraphSimpleForwardEmitter *)((char *)this + 992));
  if (!v24)
  {
    unsigned int v25 = re::globalAllocators((re *)v24);
    int v26 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v25[2] + 32))(v25[2], 88, 8);
    re::DepthStencilCombinerProvider::DepthStencilCombinerProvider(v26, (const re::DynamicString *)v81);
    if (*(void *)&v81[0])
    {
      if (BYTE8(v81[0])) {
        (*(void (**)(void))(**(void **)&v81[0] + 40))();
      }
      memset(v81, 0, sizeof(v81));
    }
    re::RenderGraphManager::addProviderInternal((re::RenderGraphManager *)a2, "Camera", v26, -10, 1, (uint64_t)&v83);
    long long v27 = v83;
    *(void *)&long long v83 = 0;
    *((void *)&v83 + 1) = "";
    uint64_t v28 = *((void *)this + 124);
    *((void *)this + 124) = v27;
    unint64_t v29 = v27 & 0xFFFFFFFFFFFFFFFELL | v28 & 1;
    uint64_t v30 = *((void *)this + 125);
    *((void *)this + 125) = *((void *)&v27 + 1);
    unint64_t v87 = v29;
    uint64_t v88 = v30;
    re::StringID::destroyString((re::StringID *)&v87);
    *((void *)this + 126) = v84;
    re::StringID::destroyString((re::StringID *)&v83);
  }
  BOOL v31 = re::FontID::isValid((re::RenderGraphSimpleForwardEmitter *)((char *)this + 1016));
  if (!v31)
  {
    uint64_t v32 = re::globalAllocators((re *)v31);
    uint64_t v33 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v32[2] + 32))(v32[2], 136, 8);
    re::DepthStencilSplitterProvider::DepthStencilSplitterProvider((uint64_t)v33, (const re::DynamicString *)v80);
    if (*(void *)&v80[0])
    {
      if (BYTE8(v80[0])) {
        (*(void (**)(void))(**(void **)&v80[0] + 40))();
      }
      memset(v80, 0, sizeof(v80));
    }
    (*((void (**)(long long *__return_ptr, AssetService *, const char *))a3->var0 + 1))(&v83, a3, "engine:BuiltinRenderGraphResources/Common/separateDepth.rematerial");
    long long v34 = *(_OWORD *)(v33 + 11);
    *(_OWORD *)(v33 + 11) = v83;
    long long v83 = v34;
    uint64_t v35 = v33[13];
    v33[13] = v84;
    uint64_t v84 = v35;
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v83);
    re::AssetHandle::loadAsync((re::AssetHandle *)(v33 + 11));
    re::AssetHandle::operator=((uint64_t)this + 224, v33 + 11);
    (*((void (**)(long long *__return_ptr, AssetService *, const char *))a3->var0 + 1))(&v83, a3, "engine:BuiltinRenderGraphResources/Common/separateStencil.rematerial");
    long long v36 = *((_OWORD *)v33 + 7);
    *((_OWORD *)v33 + 7) = v83;
    long long v83 = v36;
    uint64_t v37 = v33[16];
    v33[16] = v84;
    uint64_t v84 = v37;
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v83);
    re::AssetHandle::loadAsync((re::AssetHandle *)(v33 + 14));
    re::AssetHandle::operator=((uint64_t)this + 200, v33 + 14);
    re::RenderGraphManager::addProviderInternal((re::RenderGraphManager *)a2, "Camera", (const re::RenderGraphProviderBase *)v33, 10, 1, (uint64_t)&v83);
    long long v38 = v83;
    *(void *)&long long v83 = 0;
    *((void *)&v83 + 1) = "";
    uint64_t v39 = *((void *)this + 127);
    *((void *)this + 127) = v38;
    unint64_t v40 = v38 & 0xFFFFFFFFFFFFFFFELL | v39 & 1;
    uint64_t v41 = *((void *)this + 128);
    *((void *)this + 128) = *((void *)&v38 + 1);
    unint64_t v87 = v40;
    uint64_t v88 = v41;
    re::StringID::destroyString((re::StringID *)&v87);
    *((void *)this + 129) = v84;
    re::StringID::destroyString((re::StringID *)&v83);
  }
  uint64_t v42 = *((void *)this + 94);
  if (v42)
  {
    unsigned int v43 = atomic_load((unsigned int *)(v42 + 704));
    if (v43 != 2) {
      re::AssetHandle::loadNow(*((void *)this + 94), 0);
    }
    uint64_t v44 = *((void *)this + 94);
    if (v44)
    {
      unsigned int v45 = atomic_load((unsigned int *)(v44 + 704));
      if (v45 == 2 && !re::FontID::isValid((re::RenderGraphSimpleForwardEmitter *)((char *)this + 872)))
      {
        uint64_t v46 = re::AssetHandle::asset<re::RenderGraphAsset>((re::RenderGraphSimpleForwardEmitter *)((char *)this + 744));
        re::RenderGraphManager::addProviderInternal((re::RenderGraphManager *)a2, "SingleGraphShadows", (const re::RenderGraphProviderBase *)(v46 + 8), 0, 0, (uint64_t)&v83);
        long long v47 = v83;
        *(void *)&long long v83 = 0;
        *((void *)&v83 + 1) = "";
        uint64_t v48 = *((void *)this + 109);
        *((void *)this + 109) = v47;
        unint64_t v49 = v47 & 0xFFFFFFFFFFFFFFFELL | v48 & 1;
        uint64_t v50 = *((void *)this + 110);
        *((void *)this + 110) = *((void *)&v47 + 1);
        unint64_t v87 = v49;
        uint64_t v88 = v50;
        re::StringID::destroyString((re::StringID *)&v87);
        *((void *)this + 111) = v84;
        re::StringID::destroyString((re::StringID *)&v83);
      }
    }
  }
  uint64_t v51 = (long long *)((char *)this + 824);
  uint64_t v52 = *((void *)this + 104);
  if (!v52 || (unsigned int v53 = atomic_load((unsigned int *)(v52 + 704)), v53 != 2))
  {
    (*((void (**)(long long *__return_ptr, AssetService *, const char *))a3->var0 + 1))(&v83, a3, "engine:BuiltinRenderGraphResources/Common/filter.rerendergraph");
    long long v54 = *v51;
    *uint64_t v51 = v83;
    long long v83 = v54;
    uint64_t v55 = *((void *)this + 105);
    *((void *)this + 105) = v84;
    uint64_t v84 = v55;
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v83);
    re::AssetHandle::loadNow(*((void *)this + 104), 0);
  }
  uint64_t v56 = *((void *)this + 104);
  if (v56)
  {
    unsigned int v57 = atomic_load((unsigned int *)(v56 + 704));
    if (v57 == 2 && !re::FontID::isValid((re::RenderGraphSimpleForwardEmitter *)((char *)this + 848)))
    {
      uint64_t v58 = re::AssetHandle::asset<re::RenderGraphAsset>((re::RenderGraphSimpleForwardEmitter *)((char *)this + 824));
      re::RenderGraphManager::addProviderInternal((re::RenderGraphManager *)a2, "Filter", (const re::RenderGraphProviderBase *)(v58 + 8), 0, 0, (uint64_t)&v83);
      long long v59 = v83;
      *(void *)&long long v83 = 0;
      *((void *)&v83 + 1) = "";
      uint64_t v60 = *((void *)this + 106);
      *((void *)this + 106) = v59;
      unint64_t v61 = v59 & 0xFFFFFFFFFFFFFFFELL | v60 & 1;
      uint64_t v62 = *((void *)this + 107);
      *((void *)this + 107) = *((void *)&v59 + 1);
      unint64_t v87 = v61;
      uint64_t v88 = v62;
      re::StringID::destroyString((re::StringID *)&v87);
      *((void *)this + 108) = v84;
      re::StringID::destroyString((re::StringID *)&v83);
    }
  }
  uint64_t v63 = *((void *)this + 100);
  if (v63)
  {
    unsigned int v64 = atomic_load((unsigned int *)(v63 + 704));
    if (v64 != 2) {
      re::AssetHandle::loadNow(*((void *)this + 100), 0);
    }
    uint64_t v65 = *((void *)this + 100);
    if (v65)
    {
      unsigned int v66 = atomic_load((unsigned int *)(v65 + 704));
      if (v66 == 2 && !re::FontID::isValid((re::RenderGraphSimpleForwardEmitter *)((char *)this + 968)))
      {
        uint64_t v67 = re::AssetHandle::asset<re::RenderGraphAsset>((re::RenderGraphSimpleForwardEmitter *)((char *)this + 792));
        re::RenderGraphManager::addProviderInternal((re::RenderGraphManager *)a2, "PostProcess", (const re::RenderGraphProviderBase *)(v67 + 8), 0, 0, (uint64_t)&v83);
        long long v68 = v83;
        *(void *)&long long v83 = 0;
        *((void *)&v83 + 1) = "";
        uint64_t v69 = *((void *)this + 121);
        *((void *)this + 121) = v68;
        unint64_t v70 = v68 & 0xFFFFFFFFFFFFFFFELL | v69 & 1;
        uint64_t v71 = *((void *)this + 122);
        *((void *)this + 122) = *((void *)&v68 + 1);
        unint64_t v87 = v70;
        uint64_t v88 = v71;
        re::StringID::destroyString((re::StringID *)&v87);
        *((void *)this + 123) = v84;
        re::StringID::destroyString((re::StringID *)&v83);
      }
    }
  }
  BOOL v72 = re::FontID::isValid((re::RenderGraphSimpleForwardEmitter *)((char *)this + 1040));
  if (!v72)
  {
    uint64_t v73 = re::globalAllocators((re *)v72);
    uint64_t v74 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v73[2] + 32))(v73[2], 112, 8);
    re::VRRUnwarpProvider::VRRUnwarpProvider(v74, (const re::DynamicString *)v79);
    if (*(void *)&v79[0])
    {
      if (BYTE8(v79[0])) {
        (*(void (**)(void))(**(void **)&v79[0] + 40))();
      }
      memset(v79, 0, sizeof(v79));
    }
    re::AssetHandle::operator=((uint64_t)v74 + 40, (uint64_t *)&v85);
    re::RenderGraphManager::addProviderInternal((re::RenderGraphManager *)a2, "Camera", v74, 50, 1, (uint64_t)&v83);
    long long v75 = v83;
    *(void *)&long long v83 = 0;
    *((void *)&v83 + 1) = "";
    uint64_t v76 = *((void *)this + 130);
    *((void *)this + 130) = v75;
    unint64_t v77 = v75 & 0xFFFFFFFFFFFFFFFELL | v76 & 1;
    uint64_t v78 = *((void *)this + 131);
    *((void *)this + 131) = *((void *)&v75 + 1);
    unint64_t v87 = v77;
    uint64_t v88 = v78;
    re::StringID::destroyString((re::StringID *)&v87);
    *((void *)this + 132) = v84;
    re::StringID::destroyString((re::StringID *)&v83);
  }
  *((void *)this + 133) = a2;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v85);
}

void re::RenderGraphSimpleForwardEmitter::afterCameraViewHandler(uint64_t a1, uint64_t a2, uint64_t a3, re::RenderFrame *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v19[11] = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a7 + 8)) {
    unsigned int v11 = *(const char **)(a7 + 16);
  }
  else {
    unsigned int v11 = (const char *)(a7 + 9);
  }
  if (!*(unsigned char *)(a7 + 348) && *(void *)(a1 + 800))
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9B8F8, memory_order_acquire) & 1) == 0)
    {
      uint64_t v17 = (re *)__cxa_guard_acquire(&qword_26AF9B8F8);
      if (v17)
      {
        _MergedGlobals_454 = re::hashString(v17, v18);
        __cxa_guard_release(&qword_26AF9B8F8);
      }
    }
    unint64_t v13 = 0x9E3779B97F4A7C17;
    unint64_t v14 = _MergedGlobals_454;
    size_t v15 = strlen(v11);
    if (v15)
    {
      MurmurHash3_x64_128((uint64_t)v11, v15, 0, v19);
      unint64_t v13 = ((v19[1] - 0x61C8864680B583E9 + (v19[0] << 6) + (v19[0] >> 2)) ^ v19[0]) - 0x61C8864680B583E9;
    }
    re::CameraView::makeViewportPercentData((re::CameraView *)a7, v16, (uint64_t)v19);
    re::RenderGraphDataStore::add<re::ViewportPercentData,re::ViewportPercentData>(a5, ((v14 >> 2) + (v14 << 6) + v13) ^ v14, (uint64_t)v19);
    re::RenderFrame::emitGraph(a4, "PostProcess", v11);
    *(unsigned char *)(*(void *)(*(void *)(*((void *)a4 + 1) + 104) + 1648) + 16) = 0;
  }
  re::RealityEmitterBase::emitCustomPostProcessGraph<re::CameraView>(a1, a3, (uint64_t)a4, (void *)a7);
}

void re::RenderGraphSimpleForwardEmitter::afterCameraMultiViewHandler(uint64_t a1, uint64_t a2, uint64_t a3, re::RenderFrame *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v17[11] = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a7 + 8)) {
    uint64_t v7 = *(const char **)(a7 + 16);
  }
  else {
    uint64_t v7 = (const char *)(a7 + 9);
  }
  if (!*(unsigned char *)(a7 + 348) && *(void *)(a1 + 800))
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9B908, memory_order_acquire) & 1) == 0)
    {
      size_t v15 = (re *)__cxa_guard_acquire(&qword_26AF9B908);
      if (v15)
      {
        qword_26AF9B900 = re::hashString(v15, v16);
        __cxa_guard_release(&qword_26AF9B908);
      }
    }
    unint64_t v11 = 0x9E3779B97F4A7C17;
    unint64_t v12 = qword_26AF9B900;
    size_t v13 = strlen(v7);
    if (v13)
    {
      MurmurHash3_x64_128((uint64_t)v7, v13, 0, v17);
      unint64_t v11 = ((v17[1] - 0x61C8864680B583E9 + (v17[0] << 6) + (v17[0] >> 2)) ^ v17[0]) - 0x61C8864680B583E9;
    }
    re::CameraMultiView::makeViewportPercentDataInstancedMode((re::CameraMultiView *)a7, v14, (uint64_t)v17);
    re::RenderGraphDataStore::add<re::ViewportPercentData,re::ViewportPercentData>(a5, ((v12 >> 2) + (v12 << 6) + v11) ^ v12, (uint64_t)v17);
    re::RenderFrame::emitGraph(a4, "PostProcess", v7);
    *(unsigned char *)(*(void *)(*(void *)(*((void *)a4 + 1) + 104) + 1648) + 16) = 0;
  }
}

uint64_t re::RenderGraphSimpleForwardEmitter::emitFrameContext(re::RealityEmitterBase *a1, void *a2, re::RenderFrame *this, re *a4)
{
  re::RenderFrame::emitGraph(this, "UploadMultiSceneConstants", "RenderFrame");
  uint64_t v9 = a2[2];
  if (v9)
  {
    uint64_t v10 = (void *)a2[3];
    uint64_t v11 = 464 * v9;
    do
    {
      re::RealityEmitterBase::emitDeformerGraph((uint64_t)a1, (uint64_t)v10, this, (uint64_t)a4);
      re::RealityEmitterBase::emitVFXSimulationGraph((uint64_t)a1, v10, this, (uint64_t)a4);
      v10 += 58;
      v11 -= 464;
    }
    while (v11);
  }
  uint64_t v12 = a2[12];
  if (v12 && *(void *)(v12 + 16)) {
    re::RenderFrame::emitGraph(this, "MipmapGenerationContext", "RenderFrame");
  }
  uint64_t v13 = a2[13];
  if (v13 && *(void *)(v13 + 16)) {
    re::RenderFrame::emitGraph(this, "BlurGenerationContext", "RenderFrame");
  }
  re::RealityEmitterBase::emitProbeWriteGraph(a1, this, v8);
  re::RenderFrame::emitGraph(this, "ProjectiveMeshShadow", "RenderFrame");
  re::RealityEmitterBase::emitPlanarProjectiveShadowGraph((uint64_t)a1, a2, this, (uint64_t)a4);
  int v28 = 0;
  uint64_t v14 = a2[2];
  if (v14)
  {
    uint64_t v15 = a2[3];
    uint64_t v16 = 464 * v14;
    do
    {
      re::RealityEmitterBase::emitSingleGraphShadows((uint64_t)a1, v15, this, (uint64_t)a4, &v28);
      v15 += 464;
      v16 -= 464;
    }
    while (v16);
    uint64_t v17 = a2[2];
    if (v17)
    {
      char v18 = (re::Allocator **)a2[3];
      uint64_t v19 = 464 * v17;
      do
      {
        re::RealityEmitterBase::emitFilterMapGraph((uint64_t)a1, v18, (uint64_t)this, (uint64_t)a4);
        v18 += 58;
        v19 -= 464;
      }
      while (v19);
      uint64_t v20 = a2[2];
      if (v20)
      {
        uint64_t v21 = a2[3];
        uint64_t v22 = 464 * v20;
        do
        {
          re::RealityEmitterBase::emitVisualProxyHighFidelityGraph((uint64_t)a1, v21, this, a4);
          v21 += 464;
          v22 -= 464;
        }
        while (v22);
        uint64_t v24 = a2[2];
        if (v24)
        {
          uint64_t v25 = a2[3];
          uint64_t v26 = 464 * v24;
          do
          {
            re::RealityEmitterBase::emitCameraGraphs(a1, a2, v25, (uint64_t)this, (uint64_t)a4, 0, v23);
            v25 += 464;
            v26 -= 464;
          }
          while (v26);
        }
      }
    }
  }
  return re::RealityEmitterBase::pushPipelineCompilationDataToDataStore(a1, this, a4);
}

void re::RenderGraphSimpleForwardEmitter::afterPrepareSceneContextHandler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(unsigned char **)(a4 + 336);
  if (!v4) {
    return;
  }
  uint64_t v7 = (re::RenderGraphAsset *)(a1 + 768);
  if (!re::AssetHandle::asset<re::RenderGraphAsset>((re::RenderGraphAsset *)(a1 + 768))) {
    return;
  }
  if (*v4)
  {
    int v8 = v4[5];
    int v9 = v8 ^ 1;
    if (!v4[6]) {
      goto LABEL_10;
    }
LABEL_8:
    unsigned int v10 = 2 * (v8 != 0);
    goto LABEL_11;
  }
  if (v4[6])
  {
    int v8 = v4[5];
    int v9 = v8 ^ 1;
    goto LABEL_8;
  }
  int v9 = 0;
LABEL_10:
  unsigned int v10 = 0;
LABEL_11:
  if ((*(unsigned char *)(a3 + 120) & 0x3F) != (v10 | v9))
  {
    uint64_t v11 = *(void *)(a1 + 776);
    if (v11)
    {
      unsigned int v12 = atomic_load((unsigned int *)(v11 + 704));
      if (v12 == 2)
      {
        ++*(_DWORD *)(*(void *)(a1 + 776) + 260);
        uint64_t v13 = re::AssetHandle::loadedAsset<re::RenderGraphAsset>(v7);
        if (v13)
        {
          uint64_t v14 = (re::RenderGraphFile *)(v13 + 8);
          unint64_t v16 = 0x9AB5F11FB4FA0048;
          uint64_t v17 = "SceneUnderstandingOcclusionAndShadowNode";
          char v15 = v9;
          re::RenderGraphFile::setRuntimeNodeSetting<BOOL>((re::RenderGraphFile *)(v13 + 8), (const re::StringID *)&v16, "Enabled", &v15);
          re::StringID::destroyString((re::StringID *)&v16);
          unint64_t v16 = 0xF5A2D353F87D6B9CLL;
          uint64_t v17 = "MeshShadowProjectedPatchReceiverNode";
          char v15 = v10 >> 1;
          re::RenderGraphFile::setRuntimeNodeSetting<BOOL>(v14, (const re::StringID *)&v16, "Enabled", &v15);
          re::StringID::destroyString((re::StringID *)&v16);
          unint64_t v16 = 0xF7F248B7F1C26F4;
          uint64_t v17 = "PatchShadowReceiverDepthOnlyNode";
          char v15 = v10 >> 1;
          re::RenderGraphFile::setRuntimeNodeSetting<BOOL>(v14, (const re::StringID *)&v16, "Enabled", &v15);
          re::StringID::destroyString((re::StringID *)&v16);
        }
      }
    }
  }
  *(unsigned char *)(a3 + 120) = v10 | v9;
}

void *re::allocInfo_RenderGraphSimpleForwardEmitter(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9B910, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9B910))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF9B948, "RenderGraphSimpleForwardEmitter");
    __cxa_guard_release(&qword_26AF9B910);
  }
  return &unk_26AF9B948;
}

void re::initInfo_RenderGraphSimpleForwardEmitter(re *this, re::IntrospectionBase *a2)
{
  v25[0] = 0x189F6B76760EA926;
  v25[1] = "RenderGraphSimpleForwardEmitter";
  re::StringID::destroyString((re::StringID *)v25);
  *((_OWORD *)this + 2) = v26;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9B918, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF9B918);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::introspect_RealityEmitterBase((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "RealityEmitterBase";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF9B920 = v7;
      int v8 = re::introspectionAllocator((re *)v7);
      unsigned int v10 = re::introspect_AssetHandle((re *)1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + 8) = "shadowGraph";
      *(void *)(v11 + 16) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x2E800000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + 48) = 0;
      *(void *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF9B928 = v11;
      unsigned int v12 = re::introspectionAllocator((re *)v11);
      uint64_t v14 = re::introspect_AssetHandle((re *)1, v13);
      uint64_t v15 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 72, 8);
      *(_DWORD *)uint64_t v15 = 1;
      *(void *)(v15 + 8) = "cameraGraph";
      *(void *)(v15 + 16) = v14;
      *(void *)(v15 + 24) = 0;
      *(void *)(v15 + 32) = 0x30000000002;
      *(_DWORD *)(v15 + 40) = 0;
      *(void *)(v15 + 48) = 0;
      *(void *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_26AF9B930 = v15;
      unint64_t v16 = re::introspectionAllocator((re *)v15);
      char v18 = re::introspect_AssetHandle((re *)1, v17);
      uint64_t v19 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v16 + 32))(v16, 72, 8);
      *(_DWORD *)uint64_t v19 = 1;
      *(void *)(v19 + 8) = "postProcessGraph";
      *(void *)(v19 + 16) = v18;
      *(void *)(v19 + 24) = 0;
      *(void *)(v19 + 32) = 0x31800000004;
      *(_DWORD *)(v19 + 40) = 0;
      *(void *)(v19 + 48) = 0;
      *(void *)(v19 + 56) = 0;
      *(_DWORD *)(v19 + 64) = 0;
      qword_26AF9B938 = v19;
      uint64_t v20 = re::introspectionAllocator((re *)v19);
      uint64_t v22 = re::introspect_BOOL((re *)1, v21);
      uint64_t v23 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v20 + 32))(v20, 72, 8);
      *(_DWORD *)uint64_t v23 = 1;
      *(void *)(v23 + 8) = "enableBlurProvider";
      *(void *)(v23 + 16) = v22;
      *(void *)(v23 + 24) = 0;
      *(void *)(v23 + 32) = 0x33000000005;
      *(_DWORD *)(v23 + 40) = 0;
      *(void *)(v23 + 48) = 0;
      *(void *)(v23 + 56) = 0;
      *(_DWORD *)(v23 + 64) = 0;
      qword_26AF9B940 = v23;
      __cxa_guard_release(&qword_26AF9B918);
    }
  }
  *((void *)this + 2) = 0x43000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 5;
  *((void *)this + 8) = &qword_26AF9B920;
  *((void *)this + 9) = re::internal::defaultConstruct<re::RenderGraphSimpleForwardEmitter>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::RenderGraphSimpleForwardEmitter>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::RenderGraphSimpleForwardEmitter>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::RenderGraphSimpleForwardEmitter>;
  re::IntrospectionRegistry::add(this, v3);
  long long v24 = v26;
}

re::RenderGraphSimpleForwardEmitter *re::internal::defaultConstruct<re::RenderGraphSimpleForwardEmitter>(int a1, int a2, re::RenderGraphSimpleForwardEmitter *this)
{
  return re::RenderGraphSimpleForwardEmitter::RenderGraphSimpleForwardEmitter(this);
}

void re::internal::defaultDestruct<re::RenderGraphSimpleForwardEmitter>(int a1, int a2, re::RenderGraphSimpleForwardEmitter *this)
{
}

uint64_t re::introspect_RenderGraphSimpleForwardEmitter(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RenderGraphSimpleForwardEmitter", (uint64_t (*)(re::internal *))re::allocInfo_RenderGraphSimpleForwardEmitter, (re::IntrospectionBase *(*)(void))re::initInfo_RenderGraphSimpleForwardEmitter, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::RenderGraphSimpleForwardEmitter>, this);
}

uint64_t re::RenderGraphFile::setRuntimeNodeSetting<BOOL>(re::RenderGraphFile *a1, const re::StringID *a2, char *a3, char *a4)
{
  uint64_t v5 = a3;
  uint64_t v6 = &off_268773000;
  {
    uint64_t v14 = a1;
    uint64_t v13 = a4;
    uint64_t v11 = a2;
    uint64_t v6 = &off_268773000;
    a2 = v11;
    uint64_t v5 = a3;
    a4 = v13;
    int v10 = v9;
    a1 = v14;
    if (v10)
    {
      re::introspect<BOOL>(void)::info = re::introspect_BOOL(0, v11);
      uint64_t v6 = &off_268773000;
      a1 = v14;
      a2 = v11;
      uint64_t v5 = a3;
      a4 = v13;
    }
  }
  uint64_t v7 = (const re::IntrospectionBase *)v6[187];
  return re::RenderGraphFile::setRuntimeNodeSetting(a1, a2, v7, v5, a4);
}

uint64_t re::RealityEmitterBase::beforeCameraViewHandlerCommon<re::CameraView>(uint64_t a1, void *a2, uint64_t a3, re::RenderFrame *a4, uint64_t a5, char *__s1, const re::CameraView *a7)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  BOOL v13 = !strcmp(__s1, "Camera") || strcmp(__s1, "Portal") == 0;
  uint64_t result = *(void *)(a3 + 24);
  if (result) {
    BOOL v15 = !v13;
  }
  else {
    BOOL v15 = 1;
  }
  if (!v15)
  {
    re::PlanarReflectionContext::makeReflectionCameraViews((re::PlanarReflectionContext *)result, a4, a7, (uint64_t)&v33);
    if ((void)v34)
    {
      uint64_t v16 = v35;
      uint64_t v17 = 672 * v34;
      do
      {
        (*(void (**)(uint64_t, void *, uint64_t, re::RenderFrame *, uint64_t, const char *, uint64_t))(*(void *)a1 + 96))(a1, a2, a3, a4, a5, "Camera", v16);
        v16 += 672;
        v17 -= 672;
      }
      while (v17);
    }
    uint64_t result = re::DynamicArray<re::CameraView>::deinit((uint64_t)&v33);
  }
  if (v13)
  {
    uint64_t v29 = *(void *)(a3 + 320);
    if (v29)
    {
      uint64_t v28 = *(void *)(v29 + 40);
      if (v28)
      {
        unint64_t v18 = 0;
        uint64_t v19 = a2 + 4;
        do
        {
          unint64_t v30 = v18;
          uint64_t result = re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[](v29, v18);
          uint64_t v20 = *(void *)(result + 16);
          if (v20)
          {
            uint64_t v21 = *(void **)(result + 32);
            uint64_t v22 = &v21[92 * v20];
            uint64_t v32 = v22;
            do
            {
              uint64_t result = re::HashBrown<void const*,unsigned long,re::Hash<void const*>,re::EqualTo<void const*>,void,false>::find(v19, *v21 >> 1);
              if (result != -1)
              {
                unint64_t v23 = *(unsigned int *)(a2[5] + 16 * result + 8);
                if (a2[2] <= v23)
                {
                  long long v36 = 0u;
                  long long v37 = 0u;
                  long long v34 = 0u;
                  long long v35 = 0u;
                  long long v33 = 0u;
                  os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                  _os_log_send_and_compose_impl();
                  _os_crash_msg();
                  __break(1u);
                }
                uint64_t v24 = a2[3] + 464 * v23;
                uint64_t result = *(void *)(v24 + 24);
                if (result)
                {
                  uint64_t v25 = v19;
                  re::PlanarReflectionContext::makeReflectionCameraViews((re::PlanarReflectionContext *)result, a4, a7, (uint64_t)&v33);
                  if ((void)v34)
                  {
                    uint64_t v26 = v35;
                    uint64_t v27 = 672 * v34;
                    do
                    {
                      (*(void (**)(uint64_t, void *, uint64_t, re::RenderFrame *, uint64_t, const char *, uint64_t))(*(void *)a1 + 96))(a1, a2, v24, a4, a5, "Camera", v26);
                      v26 += 672;
                      v27 -= 672;
                    }
                    while (v27);
                  }
                  uint64_t result = re::DynamicArray<re::CameraView>::deinit((uint64_t)&v33);
                  uint64_t v19 = v25;
                  uint64_t v22 = v32;
                }
              }
              v21 += 92;
            }
            while (v21 != v22);
          }
          unint64_t v18 = v30 + 1;
        }
        while (v30 + 1 != v28);
      }
    }
  }
  return result;
}

uint64_t re::RealityEmitterBase::beforeCameraViewHandlerCommon<re::CameraMultiView>(uint64_t a1, void *a2, uint64_t a3, re::RenderFrame *a4, uint64_t a5, char *__s1, const re::CameraMultiView *a7)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  BOOL v13 = !strcmp(__s1, "Camera") || strcmp(__s1, "Portal") == 0;
  uint64_t result = *(void *)(a3 + 24);
  if (result) {
    BOOL v15 = !v13;
  }
  else {
    BOOL v15 = 1;
  }
  if (!v15)
  {
    re::PlanarReflectionContext::makeReflectionCameraMultiViews((re::PlanarReflectionContext *)result, a4, a7, (uint64_t)&v33);
    if ((void)v34)
    {
      uint64_t v16 = v35;
      uint64_t v17 = 1360 * v34;
      do
      {
        (*(void (**)(uint64_t, void *, uint64_t, re::RenderFrame *, uint64_t, const char *, uint64_t))(*(void *)a1 + 104))(a1, a2, a3, a4, a5, "Camera", v16);
        v16 += 1360;
        v17 -= 1360;
      }
      while (v17);
    }
    uint64_t result = re::DynamicArray<re::CameraMultiView>::deinit((uint64_t)&v33);
  }
  if (v13)
  {
    uint64_t v29 = *(void *)(a3 + 320);
    if (v29)
    {
      uint64_t v28 = *(void *)(v29 + 40);
      if (v28)
      {
        unint64_t v18 = 0;
        uint64_t v19 = a2 + 4;
        do
        {
          unint64_t v30 = v18;
          uint64_t result = re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[](v29, v18);
          uint64_t v20 = *(void *)(result + 16);
          if (v20)
          {
            uint64_t v21 = *(void **)(result + 32);
            uint64_t v22 = &v21[92 * v20];
            uint64_t v32 = v22;
            do
            {
              uint64_t result = re::HashBrown<void const*,unsigned long,re::Hash<void const*>,re::EqualTo<void const*>,void,false>::find(v19, *v21 >> 1);
              if (result != -1)
              {
                unint64_t v23 = *(unsigned int *)(a2[5] + 16 * result + 8);
                if (a2[2] <= v23)
                {
                  long long v36 = 0u;
                  long long v37 = 0u;
                  long long v34 = 0u;
                  long long v35 = 0u;
                  long long v33 = 0u;
                  os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                  _os_log_send_and_compose_impl();
                  _os_crash_msg();
                  __break(1u);
                }
                uint64_t v24 = a2[3] + 464 * v23;
                uint64_t result = *(void *)(v24 + 24);
                if (result)
                {
                  uint64_t v25 = v19;
                  re::PlanarReflectionContext::makeReflectionCameraMultiViews((re::PlanarReflectionContext *)result, a4, a7, (uint64_t)&v33);
                  if ((void)v34)
                  {
                    uint64_t v26 = v35;
                    uint64_t v27 = 1360 * v34;
                    do
                    {
                      (*(void (**)(uint64_t, void *, uint64_t, re::RenderFrame *, uint64_t, const char *, uint64_t))(*(void *)a1 + 104))(a1, a2, v24, a4, a5, "Camera", v26);
                      v26 += 1360;
                      v27 -= 1360;
                    }
                    while (v27);
                  }
                  uint64_t result = re::DynamicArray<re::CameraMultiView>::deinit((uint64_t)&v33);
                  uint64_t v19 = v25;
                  uint64_t v22 = v32;
                }
              }
              v21 += 92;
            }
            while (v21 != v22);
          }
          unint64_t v18 = v30 + 1;
        }
        while (v30 + 1 != v28);
      }
    }
  }
  return result;
}

uint64_t re::RealityEmitterBase::cameraViewHandlerCommon<re::CameraView>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  unint64_t v13 = 0x9E3779B97F4A7C17;
  re::CameraView::prepareEmitDefault(a7, (uint64_t *)a4, a5, a2, a3, a6);
  if (*(unsigned char *)(a7 + 8)) {
    uint64_t v14 = *(const char **)(a7 + 16);
  }
  else {
    uint64_t v14 = (const char *)(a7 + 9);
  }
  if (*(unsigned char *)(a7 + 350))
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9B9D0, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_26AF9B9D0))
    {
      qword_26AF9B9C8 = re::hashString((re *)"DynamicFunctionConstants", v25);
      __cxa_guard_release(&qword_26AF9B9D0);
    }
    unint64_t v15 = qword_26AF9B9C8;
    size_t v16 = strlen(v14);
    unint64_t v17 = 0x9E3779B97F4A7C17;
    if (v16)
    {
      MurmurHash3_x64_128((uint64_t)v14, v16, 0, &v30);
      unint64_t v17 = ((v31 - 0x61C8864680B583E9 + (v30 << 6) + (v30 >> 2)) ^ v30) - 0x61C8864680B583E9;
    }
    uint64_t v18 = ((v15 >> 2) + (v15 << 6) + v17) ^ v15;
    uint64_t v19 = re::RenderGraphDataStore::tryGet<re::DynamicFunctionConstantsData>(a5, v18);
    if (!v19)
    {
      unint64_t v30 = *(void *)(a4 + 376);
      v29[0] = 2;
      uint64_t v19 = re::RenderGraphDataStore::add<re::DynamicFunctionConstantsData,re::PerFrameAllocator *,int>(a5, v18, (uint64_t *)&v30, v29);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9B9E0, memory_order_acquire) & 1) == 0)
    {
      uint64_t v28 = v19;
      int v27 = __cxa_guard_acquire(&qword_26AF9B9E0);
      uint64_t v19 = v28;
      if (v27)
      {
        qword_26AF9B9D8 = re::hashString((re *)"EnableUserEnvironment", v26);
        __cxa_guard_release(&qword_26AF9B9E0);
        uint64_t v19 = v28;
      }
    }
    LODWORD(v30) = 1;
    re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::addOrReplace((_anonymous_namespace_ *)(v19 + 8), &qword_26AF9B9D8, (int *)&v30);
  }
  size_t v20 = strlen(a6);
  if (v20)
  {
    MurmurHash3_x64_128((uint64_t)a6, v20, 0, &v30);
    unint64_t v21 = (v31 - 0x61C8864680B583E9 + (v30 << 6) + (v30 >> 2)) ^ v30;
  }
  else
  {
    unint64_t v21 = 0;
  }
  size_t v22 = strlen(v14);
  if (v22)
  {
    MurmurHash3_x64_128((uint64_t)v14, v22, 0, &v30);
    unint64_t v13 = ((v31 - 0x61C8864680B583E9 + (v30 << 6) + (v30 >> 2)) ^ v30) - 0x61C8864680B583E9;
  }
  uint64_t v23 = ((v21 >> 2) + (v21 << 6) + v13) ^ v21;
  if (*(unsigned char *)(a1 + 136)) {
    *(unsigned char *)(re::RenderGraphDataStore::add<re::TriangleFillModeData>(a5, v23) + 8) = 1;
  }
  unint64_t v30 = (unint64_t)&unk_26E71C2A8;
  LODWORD(v31) = *(_DWORD *)(a1 + 140);
  re::RenderGraphDataStore::add<re::DefaultDepthFormatData,re::DefaultDepthFormatData&>(a5, v23, (uint64_t)&v30);
  unint64_t v30 = (unint64_t)&unk_26E71C2E8;
  LODWORD(v31) = *(_DWORD *)(a1 + 144);
  re::RenderGraphDataStore::add<re::DefaultStencilFormatData,re::DefaultStencilFormatData&>(a5, v23, (uint64_t)&v30);
  uint64_t v34 = 0;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  unint64_t v30 = 0;
  int v33 = 0;
  if (!*(unsigned char *)(a4 + 424))
  {
    re::CameraView::registerFileProviders(a6, a7, *(re::RenderGraphManager **)a4, a3, (uint64_t)v29);
    re::DynamicArray<re::ProviderHandle>::operator=((uint64_t)&v30, (uint64_t)v29);
    re::DynamicArray<re::Pair<re::StringID,re::RigDataValue *,true>>::deinit((uint64_t)v29);
  }
  re::RenderFrame::emitGraph((re::RenderFrame *)a4, a6, v14);
  re::CameraView::unregisterFileProviders(*(void *)a4, (uint64_t)&v30);
  return re::DynamicArray<re::Pair<re::StringID,re::RigDataValue *,true>>::deinit((uint64_t)&v30);
}

unint64_t re::getCombinedScopeHash(unint64_t this, char *__s, const char *a3)
{
  v8[2] = *MEMORY[0x263EF8340];
  unint64_t v5 = 0x9E3779B97F4A7C17;
  size_t v6 = strlen(__s);
  if (v6)
  {
    MurmurHash3_x64_128((uint64_t)__s, v6, 0, v8);
    unint64_t v5 = ((v8[1] - 0x61C8864680B583E9 + (v8[0] << 6) + (v8[0] >> 2)) ^ v8[0]) - 0x61C8864680B583E9;
  }
  return ((this >> 2) + (this << 6) + v5) ^ this;
}

uint64_t re::RenderGraphDataStore::add<re::DynamicFunctionConstantsData,re::PerFrameAllocator *,int>(uint64_t a1, uint64_t a2, uint64_t *a3, int *a4)
{
  unint64_t v6 = (unint64_t)"N2re28DynamicFunctionConstantsDataE";
  if (((unint64_t)"N2re28DynamicFunctionConstantsDataE" & 0x8000000000000000) != 0)
  {
    uint64_t v7 = (unsigned __int8 *)((unint64_t)"N2re28DynamicFunctionConstantsDataE" & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v8 = 5381;
    do
    {
      unint64_t v6 = v8;
      unsigned int v9 = *v7++;
      uint64_t v8 = (33 * v8) ^ v9;
    }
    while (v9);
  }
  uint64_t v16 = (a2 + (v6 << 6) + (v6 >> 2) - 0x61C8864680B583E9) ^ v6;
  uint64_t v10 = a1 + 64;
  uint64_t v11 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 72, 8);
  uint64_t v12 = *a3;
  uint64_t v13 = *a4;
  *(void *)uint64_t v11 = &unk_26E71C1A0;
  *(_OWORD *)(v11 + 24) = 0u;
  *(_OWORD *)(v11 + 40) = 0u;
  *(_OWORD *)(v11 + 56) = 0u;
  *(_OWORD *)(v11 + 8) = 0u;
  re::HashBrown<unsigned long long,re::ecs2::PortalServiceQuery::WorldType,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::init((void *)(v11 + 8), v12, v13);
  uint64_t v15 = v11;
  return *(void *)re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addNew<re::CameraData *>(v10, (unint64_t *)&v16, &v15);
}

uint64_t re::RenderGraphDataStore::add<re::TriangleFillModeData>(uint64_t a1, uint64_t a2)
{
  v20[2] = *MEMORY[0x263EF8340];
  uint64_t v18 = 0;
  unint64_t v19 = 0;
  {
    re::introspect<re::TriangleFillModeData>(void)::info = (_UNKNOWN *)re::introspect_TriangleFillModeData(0);
  }
  uint64_t v18 = re::introspect<re::TriangleFillModeData>(void)::info;
  size_t v4 = strlen(*((const char **)re::introspect<re::TriangleFillModeData>(void)::info + 6));
  if (v4)
  {
    MurmurHash3_x64_128(*((void *)re::introspect<re::TriangleFillModeData>(void)::info + 6), v4, 0, v20);
    unint64_t v5 = (v20[1] - 0x61C8864680B583E9 + (v20[0] << 6) + (v20[0] >> 2)) ^ v20[0];
  }
  else
  {
    unint64_t v5 = 0;
  }
  unint64_t v19 = v5;
  re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addOrReplace<re::IntrospectionStructure const*&>(a1 + 176, &v19, &v18);
  unint64_t v6 = (a2 - 0x61C8864680B583E9 + (v19 << 6) + (v19 >> 2)) ^ v19;
  uint64_t v7 = (void *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 16, 8);
  v7[1] = 0;
  unint64_t v8 = *(void *)(a1 + 64);
  void *v7 = &unk_26E70E170;
  if (v8)
  {
    unint64_t v8 = v6 % *(unsigned int *)(a1 + 88);
    uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 72) + 4 * v8);
    if (v9 != 0x7FFFFFFF)
    {
      uint64_t v16 = *(void *)(a1 + 80);
      if (*(void *)(v16 + 24 * v9 + 8) == v6)
      {
LABEL_16:
        uint64_t v15 = v16 + 24 * v9;
        return *(void *)(v15 + 16);
      }
      while (1)
      {
        LODWORD(v9) = *(_DWORD *)(v16 + 24 * v9) & 0x7FFFFFFF;
        if (v9 == 0x7FFFFFFF) {
          break;
        }
        if (*(void *)(v16 + 24 * v9 + 8) == v6) {
          goto LABEL_16;
        }
      }
    }
  }
  uint64_t v10 = *(unsigned int *)(a1 + 100);
  if (v10 == 0x7FFFFFFF)
  {
    uint64_t v10 = *(unsigned int *)(a1 + 96);
    int v11 = v10;
    if (v10 == *(_DWORD *)(a1 + 88))
    {
      re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(a1 + 64, 2 * *(_DWORD *)(a1 + 92));
      LODWORD(v8) = v6 % *(unsigned int *)(a1 + 88);
      int v11 = *(_DWORD *)(a1 + 96);
    }
    *(_DWORD *)(a1 + 96) = v11 + 1;
    uint64_t v12 = *(void *)(a1 + 80);
    int v13 = *(_DWORD *)(v12 + 24 * v10);
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 80);
    int v13 = *(_DWORD *)(v12 + 24 * v10);
    *(_DWORD *)(a1 + 100) = v13 & 0x7FFFFFFF;
  }
  uint64_t v14 = 24 * v10;
  *(_DWORD *)(v12 + v14) = v13 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 80) + v14) = *(_DWORD *)(*(void *)(a1 + 80) + 24 * v10) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 72) + 4 * v8);
  *(void *)(*(void *)(a1 + 80) + 24 * v10 + 8) = v6;
  *(void *)(*(void *)(a1 + 80) + 24 * v10 + 16) = v7;
  *(_DWORD *)(*(void *)(a1 + 72) + 4 * v8) = v10;
  ++*(_DWORD *)(a1 + 92);
  ++*(_DWORD *)(a1 + 104);
  uint64_t v15 = *(void *)(a1 + 80) + 24 * v10;
  return *(void *)(v15 + 16);
}

uint64_t re::RenderGraphDataStore::add<re::DefaultDepthFormatData,re::DefaultDepthFormatData&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v12[2] = *MEMORY[0x263EF8340];
  uint64_t v10 = 0;
  unint64_t v11 = 0;
  {
    re::introspect<re::DefaultDepthFormatData>(void)::info = (_UNKNOWN *)re::introspect_DefaultDepthFormatData(0);
  }
  uint64_t v10 = re::introspect<re::DefaultDepthFormatData>(void)::info;
  size_t v6 = strlen(*((const char **)re::introspect<re::DefaultDepthFormatData>(void)::info + 6));
  if (v6)
  {
    MurmurHash3_x64_128(*((void *)re::introspect<re::DefaultDepthFormatData>(void)::info + 6), v6, 0, v12);
    unint64_t v7 = (v12[1] - 0x61C8864680B583E9 + (v12[0] << 6) + (v12[0] >> 2)) ^ v12[0];
  }
  else
  {
    unint64_t v7 = 0;
  }
  unint64_t v11 = v7;
  re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addOrReplace<re::IntrospectionStructure const*&>(a1 + 176, &v11, &v10);
  v12[0] = (a2 - 0x61C8864680B583E9 + (v11 << 6) + (v11 >> 2)) ^ v11;
  uint64_t v8 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 16, 8);
  *(void *)uint64_t v8 = &unk_26E71C2A8;
  *(_DWORD *)(v8 + 8) = *(_DWORD *)(a3 + 8);
  uint64_t v10 = (void *)v8;
  return *(void *)re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addNew<re::CameraData *>(a1 + 64, v12, &v10);
}

uint64_t re::RenderGraphDataStore::add<re::DefaultStencilFormatData,re::DefaultStencilFormatData&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v12[2] = *MEMORY[0x263EF8340];
  uint64_t v10 = 0;
  unint64_t v11 = 0;
  {
    re::introspect<re::DefaultStencilFormatData>(void)::info = (_UNKNOWN *)re::introspect_DefaultStencilFormatData(0);
  }
  uint64_t v10 = re::introspect<re::DefaultStencilFormatData>(void)::info;
  size_t v6 = strlen(*((const char **)re::introspect<re::DefaultStencilFormatData>(void)::info + 6));
  if (v6)
  {
    MurmurHash3_x64_128(*((void *)re::introspect<re::DefaultStencilFormatData>(void)::info + 6), v6, 0, v12);
    unint64_t v7 = (v12[1] - 0x61C8864680B583E9 + (v12[0] << 6) + (v12[0] >> 2)) ^ v12[0];
  }
  else
  {
    unint64_t v7 = 0;
  }
  unint64_t v11 = v7;
  re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addOrReplace<re::IntrospectionStructure const*&>(a1 + 176, &v11, &v10);
  v12[0] = (a2 - 0x61C8864680B583E9 + (v11 << 6) + (v11 >> 2)) ^ v11;
  uint64_t v8 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 16, 8);
  *(void *)uint64_t v8 = &unk_26E71C2E8;
  *(_DWORD *)(v8 + 8) = *(_DWORD *)(a3 + 8);
  uint64_t v10 = (void *)v8;
  return *(void *)re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addNew<re::CameraData *>(a1 + 64, v12, &v10);
}

uint64_t re::DynamicArray<re::ProviderHandle>::operator=(uint64_t result, uint64_t a2)
{
  if (result != a2)
  {
    uint64_t v2 = *(void *)result;
    uint64_t v3 = *(void *)a2;
    if (*(void *)result) {
      BOOL v4 = v3 == 0;
    }
    else {
      BOOL v4 = 1;
    }
    if (v4 || v2 == v3)
    {
      uint64_t v6 = *(void *)(result + 8);
      uint64_t v7 = *(void *)(a2 + 8);
      *(void *)uint64_t result = v3;
      *(void *)(result + 8) = v7;
      *(void *)a2 = v2;
      *(void *)(a2 + 8) = v6;
      uint64_t v8 = *(void *)(result + 16);
      *(void *)(result + 16) = *(void *)(a2 + 16);
      *(void *)(a2 + 16) = v8;
      uint64_t v9 = *(void *)(result + 32);
      *(void *)(result + 32) = *(void *)(a2 + 32);
      *(void *)(a2 + 32) = v9;
      ++*(_DWORD *)(a2 + 24);
      ++*(_DWORD *)(result + 24);
    }
    else
    {
      re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || !other.isInitialized() || m_allocator == other.m_allocator", "operator=", 503);
      uint64_t result = _os_crash();
      __break(1u);
    }
  }
  return result;
}

uint64_t re::RealityEmitterBase::cameraViewHandlerCommon<re::CameraMultiView>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  unint64_t v13 = 0x9E3779B97F4A7C17;
  re::CameraMultiView::prepareEmitDefaultInstancedMode(a7, (uint64_t *)a4, a5, a2, a3, a6);
  if (*(unsigned char *)(a7 + 8)) {
    uint64_t v14 = *(const char **)(a7 + 16);
  }
  else {
    uint64_t v14 = (const char *)(a7 + 9);
  }
  if (*(unsigned char *)(a7 + 350))
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9B9F0, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_26AF9B9F0))
    {
      qword_26AF9B9E8 = re::hashString((re *)"DynamicFunctionConstants", v25);
      __cxa_guard_release(&qword_26AF9B9F0);
    }
    unint64_t v15 = qword_26AF9B9E8;
    size_t v16 = strlen(v14);
    unint64_t v17 = 0x9E3779B97F4A7C17;
    if (v16)
    {
      MurmurHash3_x64_128((uint64_t)v14, v16, 0, &v30);
      unint64_t v17 = ((v31 - 0x61C8864680B583E9 + (v30 << 6) + (v30 >> 2)) ^ v30) - 0x61C8864680B583E9;
    }
    uint64_t v18 = ((v15 >> 2) + (v15 << 6) + v17) ^ v15;
    uint64_t v19 = re::RenderGraphDataStore::tryGet<re::DynamicFunctionConstantsData>(a5, v18);
    if (!v19)
    {
      unint64_t v30 = *(void *)(a4 + 376);
      v29[0] = 2;
      uint64_t v19 = re::RenderGraphDataStore::add<re::DynamicFunctionConstantsData,re::PerFrameAllocator *,int>(a5, v18, (uint64_t *)&v30, v29);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9BA00, memory_order_acquire) & 1) == 0)
    {
      uint64_t v28 = v19;
      int v27 = __cxa_guard_acquire(&qword_26AF9BA00);
      uint64_t v19 = v28;
      if (v27)
      {
        qword_26AF9B9F8 = re::hashString((re *)"EnableUserEnvironment", v26);
        __cxa_guard_release(&qword_26AF9BA00);
        uint64_t v19 = v28;
      }
    }
    LODWORD(v30) = 1;
    re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::addOrReplace((_anonymous_namespace_ *)(v19 + 8), &qword_26AF9B9F8, (int *)&v30);
  }
  size_t v20 = strlen(a6);
  if (v20)
  {
    MurmurHash3_x64_128((uint64_t)a6, v20, 0, &v30);
    unint64_t v21 = (v31 - 0x61C8864680B583E9 + (v30 << 6) + (v30 >> 2)) ^ v30;
  }
  else
  {
    unint64_t v21 = 0;
  }
  size_t v22 = strlen(v14);
  if (v22)
  {
    MurmurHash3_x64_128((uint64_t)v14, v22, 0, &v30);
    unint64_t v13 = ((v31 - 0x61C8864680B583E9 + (v30 << 6) + (v30 >> 2)) ^ v30) - 0x61C8864680B583E9;
  }
  uint64_t v23 = ((v21 >> 2) + (v21 << 6) + v13) ^ v21;
  if (*(unsigned char *)(a1 + 136)) {
    *(unsigned char *)(re::RenderGraphDataStore::add<re::TriangleFillModeData>(a5, v23) + 8) = 1;
  }
  unint64_t v30 = (unint64_t)&unk_26E71C2A8;
  LODWORD(v31) = *(_DWORD *)(a1 + 140);
  re::RenderGraphDataStore::add<re::DefaultDepthFormatData,re::DefaultDepthFormatData&>(a5, v23, (uint64_t)&v30);
  unint64_t v30 = (unint64_t)&unk_26E71C2E8;
  LODWORD(v31) = *(_DWORD *)(a1 + 144);
  re::RenderGraphDataStore::add<re::DefaultStencilFormatData,re::DefaultStencilFormatData&>(a5, v23, (uint64_t)&v30);
  uint64_t v34 = 0;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  unint64_t v30 = 0;
  int v33 = 0;
  if (!*(unsigned char *)(a4 + 424))
  {
    re::CameraView::registerFileProviders(a6, a7, *(re::RenderGraphManager **)a4, a3, (uint64_t)v29);
    re::DynamicArray<re::ProviderHandle>::operator=((uint64_t)&v30, (uint64_t)v29);
    re::DynamicArray<re::Pair<re::StringID,re::RigDataValue *,true>>::deinit((uint64_t)v29);
  }
  re::RenderFrame::emitGraph((re::RenderFrame *)a4, a6, v14);
  re::CameraView::unregisterFileProviders(*(void *)a4, (uint64_t)&v30);
  return re::DynamicArray<re::Pair<re::StringID,re::RigDataValue *,true>>::deinit((uint64_t)&v30);
}

void re::RealityEmitterBase::emitCustomPostProcessGraph<re::CameraView>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  BOOL v4 = *(void **)(a2 + 424);
  if (v4
    && *v4
    && re::HashSetBase<unsigned long,unsigned long,re::internal::ValueAsKey<unsigned long>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::tryGet((uint64_t)(v4 + 1), a4 + 48))
  {
    if (a4[1]) {
      uint64_t v8 = (const char *)a4[2];
    }
    else {
      uint64_t v8 = (char *)a4 + 9;
    }
    {
      re::RealityEmitterBase::emitCustomPostProcessGraph<re::CameraView>(re::RenderSceneContext &,re::RenderFrame &,re::CameraView const&)::kCustomPostProcessTypeunint64_t ScopeHash = re::hashString((re *)"CustomPostProcess", v16);
    }
    uint64_t v9 = 0x9E3779B97F4A7C17;
    unint64_t v10 = re::RealityEmitterBase::emitCustomPostProcessGraph<re::CameraView>(re::RenderSceneContext &,re::RenderFrame &,re::CameraView const&)::kCustomPostProcessTypeScopeHash;
    size_t v11 = strlen(v8);
    if (v11)
    {
      MurmurHash3_x64_128((uint64_t)v8, v11, 0, (unint64_t *)v17);
      uint64_t v9 = ((*((void *)&v17[0] + 1) - 0x61C8864680B583E9 + (*(void *)&v17[0] << 6) + (*(void *)&v17[0] >> 2)) ^ *(void *)&v17[0])
         - 0x61C8864680B583E9;
    }
    uint64_t v12 = re::RenderGraphDataStore::add<re::CustomPostProcessRenderGraphData>((re *)(a3 + 32), ((v10 >> 2) + (v10 << 6) + v9) ^ v10);
    unint64_t v13 = *(id **)(a2 + 424);
    re::ObjCObject::operator=((id *)(v12 + 8), v13);
    re::HashSetBase<unsigned long,unsigned long,re::internal::ValueAsKey<unsigned long>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::operator=(v12 + 16, (uint64_t)(v13 + 1));
    re::Projection::computeMatrix4x4F((re::Projection *)(a4 + 8), (uint64_t)v17);
    long long v14 = v17[1];
    *(_OWORD *)(v12 + 64) = v17[0];
    *(_OWORD *)(v12 + 80) = v14;
    long long v15 = v17[3];
    *(_OWORD *)(v12 + 96) = v17[2];
    *(_OWORD *)(v12 + 112) = v15;
    re::RenderFrame::emitGraph((re::RenderFrame *)a3, "CustomPostProcess", v8);
  }
}

uint64_t re::HashSetBase<unsigned long,unsigned long,re::internal::ValueAsKey<unsigned long>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::tryGet(uint64_t a1, uint64_t *a2)
{
  unint64_t v2 = *(unsigned int *)(a1 + 24);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = *a2;
  unint64_t v4 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  uint64_t v5 = *(unsigned int *)(*(void *)(a1 + 8)
                       + 4
                       * (((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) ^ ((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) >> 31))
                        % v2));
  if (v5 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v7 = *(void *)(a1 + 16);
  if (*(void *)(v7 + 24 * v5 + 16) != v3)
  {
    while (1)
    {
      LODWORD(v5) = *(_DWORD *)(v7 + 24 * v5 + 8) & 0x7FFFFFFF;
      if (v5 == 0x7FFFFFFF) {
        break;
      }
      if (*(void *)(v7 + 24 * v5 + 16) == v3) {
        return v7 + 24 * v5 + 16;
      }
    }
    return 0;
  }
  return v7 + 24 * v5 + 16;
}

void re::RealityEmitterBase::afterCameraViewHandlerRealityRenderer(uint64_t a1, uint64_t a2, re::RenderFrame *a3, uint64_t a4, uint64_t a5)
{
  v16[11] = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a5 + 8)) {
    uint64_t v9 = *(const char **)(a5 + 16);
  }
  else {
    uint64_t v9 = (const char *)(a5 + 9);
  }
  if (!*(unsigned char *)(a5 + 348))
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9BC30, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_26AF9BC30))
    {
      qword_26AF9BC28 = re::hashString((re *)"PostProcess", v15);
      __cxa_guard_release(&qword_26AF9BC30);
    }
    unint64_t v11 = 0x9E3779B97F4A7C17;
    unint64_t v12 = qword_26AF9BC28;
    size_t v13 = strlen(v9);
    if (v13)
    {
      MurmurHash3_x64_128((uint64_t)v9, v13, 0, v16);
      unint64_t v11 = ((v16[1] - 0x61C8864680B583E9 + (v16[0] << 6) + (v16[0] >> 2)) ^ v16[0]) - 0x61C8864680B583E9;
    }
    re::CameraView::makeViewportPercentData((re::CameraView *)a5, v14, (uint64_t)v16);
    re::RenderGraphDataStore::add<re::ViewportPercentData,re::ViewportPercentData>(a4, ((v12 >> 2) + (v12 << 6) + v11) ^ v12, (uint64_t)v16);
    re::RenderFrame::emitGraph(a3, "PostProcess", v9);
    *(unsigned char *)(*(void *)(*(void *)(*((void *)a3 + 1) + 104) + 1648) + 16) = 0;
  }
  re::RealityEmitterBase::emitCustomPostProcessGraph<re::CameraView>(a1, a2, (uint64_t)a3, (void *)a5);
}

re *re::RealityEmitterBase::registerCommonProviders(re::RealityEmitterBase *this, re::RenderManager **a2, AssetService *a3)
{
  v102[5] = *MEMORY[0x263EF8340];
  BOOL isValid = re::FontID::isValid((re::RealityEmitterBase *)((char *)this + 304));
  if (!isValid)
  {
    uint64_t v7 = re::globalAllocators((re *)isValid);
    uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7[2] + 32))(v7[2], 40, 8);
    re::DynamicString::DynamicString((re::DynamicString *)&v97, (const re::DynamicString *)&v95);
    *(void *)uint64_t v8 = &unk_26E6D52C8;
    re::DynamicString::DynamicString((re::DynamicString *)(v8 + 8), (const re::DynamicString *)&v97);
    if (void)v97 && (BYTE8(v97)) {
      (*(void (**)(void, uint64_t))(*(void *)v97 + 40))(v97, v98);
    }
    *(void *)uint64_t v8 = &unk_26E71B850;
    if ((void)v95)
    {
      if (BYTE8(v95)) {
        (*(void (**)(void, void))(*(void *)v95 + 40))(v95, v96);
      }
      long long v95 = 0u;
      long long v96 = 0u;
    }
    re::RenderGraphManager::addProviderInternal((re::RenderGraphManager *)a2, "UploadMultiSceneConstants", (const re::RenderGraphProviderBase *)v8, 0, 1, (uint64_t)&v97);
    long long v9 = v97;
    *(void *)&long long v97 = 0;
    *((void *)&v97 + 1) = "";
    uint64_t v10 = *((void *)this + 38);
    unint64_t v11 = (const char *)*((void *)this + 39);
    *((_OWORD *)this + 19) = v9;
    unint64_t v85 = v9 & 0xFFFFFFFFFFFFFFFELL | v10 & 1;
    uint64_t v86 = v11;
    re::StringID::destroyString((re::StringID *)&v85);
    *((void *)this + 40) = v98;
    re::StringID::destroyString((re::StringID *)&v97);
  }
  BOOL v12 = re::FontID::isValid((re::RealityEmitterBase *)((char *)this + 328));
  if (!v12)
  {
    size_t v13 = re::globalAllocators((re *)v12);
    uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v13[2] + 32))(v13[2], 40, 8);
    re::DynamicString::DynamicString((re::DynamicString *)&v97, (const re::DynamicString *)v94);
    *(void *)uint64_t v14 = &unk_26E6D52C8;
    re::DynamicString::DynamicString((re::DynamicString *)(v14 + 8), (const re::DynamicString *)&v97);
    if (void)v97 && (BYTE8(v97)) {
      (*(void (**)(void, uint64_t))(*(void *)v97 + 40))(v97, v98);
    }
    *(void *)uint64_t v14 = &unk_26E71B898;
    if (*(void *)&v94[0])
    {
      if (BYTE8(v94[0])) {
        (*(void (**)(void))(**(void **)&v94[0] + 40))();
      }
      memset(v94, 0, sizeof(v94));
    }
    re::RenderGraphManager::addProviderInternal((re::RenderGraphManager *)a2, "Deformer", (const re::RenderGraphProviderBase *)v14, 0, 1, (uint64_t)&v97);
    long long v15 = v97;
    *(void *)&long long v97 = 0;
    *((void *)&v97 + 1) = "";
    uint64_t v16 = *((void *)this + 41);
    unint64_t v17 = (const char *)*((void *)this + 42);
    *(_OWORD *)((char *)this + 328) = v15;
    unint64_t v85 = v15 & 0xFFFFFFFFFFFFFFFELL | v16 & 1;
    uint64_t v86 = v17;
    re::StringID::destroyString((re::StringID *)&v85);
    *((void *)this + 43) = v98;
    re::StringID::destroyString((re::StringID *)&v97);
  }
  BOOL v18 = re::FontID::isValid((re::RealityEmitterBase *)((char *)this + 352));
  if (!v18)
  {
    uint64_t v19 = re::globalAllocators((re *)v18);
    uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v19[2] + 32))(v19[2], 40, 8);
    re::DynamicString::DynamicString((re::DynamicString *)&v97, (const re::DynamicString *)v93);
    *(void *)uint64_t v20 = &unk_26E6D52C8;
    re::DynamicString::DynamicString((re::DynamicString *)(v20 + 8), (const re::DynamicString *)&v97);
    if (void)v97 && (BYTE8(v97)) {
      (*(void (**)(void, uint64_t))(*(void *)v97 + 40))(v97, v98);
    }
    *(void *)uint64_t v20 = &unk_26E71B9A8;
    if (*(void *)&v93[0])
    {
      if (BYTE8(v93[0])) {
        (*(void (**)(void))(**(void **)&v93[0] + 40))();
      }
      memset(v93, 0, sizeof(v93));
    }
    re::RenderGraphManager::addProviderInternal((re::RenderGraphManager *)a2, "MipmapGenerationContext", (const re::RenderGraphProviderBase *)v20, 0, 1, (uint64_t)&v97);
    long long v21 = v97;
    *(void *)&long long v97 = 0;
    *((void *)&v97 + 1) = "";
    uint64_t v22 = *((void *)this + 44);
    uint64_t v23 = (const char *)*((void *)this + 45);
    *((_OWORD *)this + 22) = v21;
    unint64_t v85 = v21 & 0xFFFFFFFFFFFFFFFELL | v22 & 1;
    uint64_t v86 = v23;
    re::StringID::destroyString((re::StringID *)&v85);
    *((void *)this + 46) = v98;
    re::StringID::destroyString((re::StringID *)&v97);
  }
  BOOL v24 = re::FontID::isValid((re::RealityEmitterBase *)((char *)this + 376));
  if (!v24)
  {
    uint64_t v25 = re::globalAllocators((re *)v24);
    uint64_t v26 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v25[2] + 32))(v25[2], 64, 8);
    re::DynamicString::DynamicString((re::DynamicString *)&v97, (const re::DynamicString *)v92);
    *uint64_t v26 = &unk_26E6D52C8;
    re::DynamicString::DynamicString((re::DynamicString *)(v26 + 1), (const re::DynamicString *)&v97);
    if (void)v97 && (BYTE8(v97)) {
      (*(void (**)(void, uint64_t))(*(void *)v97 + 40))(v97, v98);
    }
    *uint64_t v26 = &unk_26E71B9F0;
    v26[6] = 0;
    v26[7] = 0;
    v26[5] = 0;
    if (*(void *)&v92[0])
    {
      if (BYTE8(v92[0])) {
        (*(void (**)(void))(**(void **)&v92[0] + 40))();
      }
      memset(v92, 0, sizeof(v92));
    }
    (*((void (**)(long long *__return_ptr, AssetService *, const char *))a3->var0 + 1))(&v97, a3, "engine:default.metallib");
    long long v27 = *(_OWORD *)(v26 + 5);
    *(_OWORD *)(v26 + 5) = v97;
    long long v97 = v27;
    uint64_t v28 = v26[7];
    v26[7] = v98;
    uint64_t v98 = v28;
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v97);
    re::RenderGraphManager::addProviderInternal((re::RenderGraphManager *)a2, "BlurGenerationContext", (const re::RenderGraphProviderBase *)v26, 0, 1, (uint64_t)&v97);
    long long v29 = v97;
    *(void *)&long long v97 = 0;
    *((void *)&v97 + 1) = "";
    uint64_t v30 = *((void *)this + 47);
    uint64_t v31 = (const char *)*((void *)this + 48);
    *(_OWORD *)((char *)this + 376) = v29;
    unint64_t v85 = v29 & 0xFFFFFFFFFFFFFFFELL | v30 & 1;
    uint64_t v86 = v31;
    re::StringID::destroyString((re::StringID *)&v85);
    *((void *)this + 49) = v98;
    re::StringID::destroyString((re::StringID *)&v97);
  }
  BOOL v32 = re::FontID::isValid((re::RealityEmitterBase *)((char *)this + 400));
  if (!v32)
  {
    int v33 = re::globalAllocators((re *)v32);
    uint64_t v34 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v33[2] + 32))(v33[2], 40, 8);
    re::DynamicString::DynamicString((re::DynamicString *)&v97, (const re::DynamicString *)v91);
    *(void *)uint64_t v34 = &unk_26E6D52C8;
    re::DynamicString::DynamicString((re::DynamicString *)(v34 + 8), (const re::DynamicString *)&v97);
    if (void)v97 && (BYTE8(v97)) {
      (*(void (**)(void, uint64_t))(*(void *)v97 + 40))(v97, v98);
    }
    *(void *)uint64_t v34 = &unk_26E71BA38;
    if (*(void *)&v91[0])
    {
      if (BYTE8(v91[0])) {
        (*(void (**)(void))(**(void **)&v91[0] + 40))();
      }
      memset(v91, 0, sizeof(v91));
    }
    re::RenderGraphManager::addProviderInternal((re::RenderGraphManager *)a2, "ProbeWriteContext", (const re::RenderGraphProviderBase *)v34, 0, 1, (uint64_t)&v97);
    long long v35 = v97;
    *(void *)&long long v97 = 0;
    *((void *)&v97 + 1) = "";
    uint64_t v36 = *((void *)this + 50);
    long long v37 = (const char *)*((void *)this + 51);
    *((_OWORD *)this + 25) = v35;
    unint64_t v85 = v35 & 0xFFFFFFFFFFFFFFFELL | v36 & 1;
    uint64_t v86 = v37;
    re::StringID::destroyString((re::StringID *)&v85);
    *((void *)this + 52) = v98;
    re::StringID::destroyString((re::StringID *)&v97);
  }
  BOOL v38 = re::FontID::isValid((re::RealityEmitterBase *)((char *)this + 448));
  if (!v38)
  {
    uint64_t v39 = re::globalAllocators((re *)v38);
    uint64_t v40 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v39[2] + 32))(v39[2], 40, 8);
    re::DynamicString::DynamicString((re::DynamicString *)&v97, (const re::DynamicString *)v90);
    *(void *)uint64_t v40 = &unk_26E6D52C8;
    re::DynamicString::DynamicString((re::DynamicString *)(v40 + 8), (const re::DynamicString *)&v97);
    if (void)v97 && (BYTE8(v97)) {
      (*(void (**)(void, uint64_t))(*(void *)v97 + 40))(v97, v98);
    }
    *(void *)uint64_t v40 = &unk_26E71BA80;
    if (*(void *)&v90[0])
    {
      if (BYTE8(v90[0])) {
        (*(void (**)(void))(**(void **)&v90[0] + 40))();
      }
      memset(v90, 0, sizeof(v90));
    }
    re::RenderGraphManager::addProviderInternal((re::RenderGraphManager *)a2, "CustomPostProcess", (const re::RenderGraphProviderBase *)v40, 0, 1, (uint64_t)&v97);
    long long v41 = v97;
    *(void *)&long long v97 = 0;
    *((void *)&v97 + 1) = "";
    uint64_t v42 = *((void *)this + 56);
    unsigned int v43 = (const char *)*((void *)this + 57);
    *((_OWORD *)this + 28) = v41;
    unint64_t v85 = v41 & 0xFFFFFFFFFFFFFFFELL | v42 & 1;
    uint64_t v86 = v43;
    re::StringID::destroyString((re::StringID *)&v85);
    *((void *)this + 58) = v98;
    re::StringID::destroyString((re::StringID *)&v97);
  }
  BOOL v44 = re::FontID::isValid((re::RealityEmitterBase *)((char *)this + 472));
  if (!v44)
  {
    unsigned int v45 = re::globalAllocators((re *)v44);
    uint64_t v46 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v45[2] + 32))(v45[2], 40, 8);
    re::DynamicString::DynamicString((re::DynamicString *)&v97, (const re::DynamicString *)v89);
    *(void *)uint64_t v46 = &unk_26E6D52C8;
    re::DynamicString::DynamicString((re::DynamicString *)(v46 + 8), (const re::DynamicString *)&v97);
    if (void)v97 && (BYTE8(v97)) {
      (*(void (**)(void, uint64_t))(*(void *)v97 + 40))(v97, v98);
    }
    *(void *)uint64_t v46 = &unk_26E71BAC8;
    if (*(void *)&v89[0])
    {
      if (BYTE8(v89[0])) {
        (*(void (**)(void))(**(void **)&v89[0] + 40))();
      }
      memset(v89, 0, sizeof(v89));
    }
    re::RenderGraphManager::addProviderInternal((re::RenderGraphManager *)a2, "VisualProxyHighFidelity", (const re::RenderGraphProviderBase *)v46, 0, 1, (uint64_t)&v97);
    long long v47 = v97;
    *(void *)&long long v97 = 0;
    *((void *)&v97 + 1) = "";
    uint64_t v48 = *((void *)this + 59);
    unint64_t v49 = (const char *)*((void *)this + 60);
    *(_OWORD *)((char *)this + 472) = v47;
    unint64_t v85 = v47 & 0xFFFFFFFFFFFFFFFELL | v48 & 1;
    uint64_t v86 = v49;
    re::StringID::destroyString((re::StringID *)&v85);
    *((void *)this + 61) = v98;
    re::StringID::destroyString((re::StringID *)&v97);
  }
  uint64_t v50 = *((void *)this + 76);
  if (v50)
  {
    unsigned int v51 = atomic_load((unsigned int *)(v50 + 704));
    BOOL v52 = v51 != 2;
    if (!a3) {
      goto LABEL_70;
    }
  }
  else
  {
    BOOL v52 = 1;
    if (!a3) {
      goto LABEL_70;
    }
  }
  if (v52)
  {
    (*((void (**)(long long *__return_ptr, AssetService *, const char *))a3->var0 + 1))(&v97, a3, "engine:BuiltinRenderGraphResources/Common/realityRendererCamera.rerendergraph");
    long long v53 = *(_OWORD *)((char *)this + 600);
    *(_OWORD *)((char *)this + 600) = v97;
    long long v97 = v53;
    uint64_t v54 = *((void *)this + 77);
    *((void *)this + 77) = v98;
    uint64_t v98 = v54;
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v97);
    re::AssetHandle::loadNow(*((void *)this + 76), 0);
  }
LABEL_70:
  uint64_t v55 = *((void *)this + 79);
  if (v55)
  {
    unsigned int v56 = atomic_load((unsigned int *)(v55 + 704));
    BOOL v57 = v56 != 2;
    if (!a3) {
      goto LABEL_79;
    }
  }
  else
  {
    BOOL v57 = 1;
    if (!a3) {
      goto LABEL_79;
    }
  }
  if (v57)
  {
    if (re::RenderManager::isProtoStereoRenderingEnabled(a2[87])) {
      uint64_t v58 = "engine:BuiltinRenderGraphResources/Common/realityRendererPostProcessStereo.rerendergraph";
    }
    else {
      uint64_t v58 = "engine:BuiltinRenderGraphResources/Common/realityRendererPostProcess.rerendergraph";
    }
    (*((void (**)(long long *__return_ptr, AssetService *, const char *))a3->var0 + 1))(&v97, a3, v58);
    long long v59 = *((_OWORD *)this + 39);
    *((_OWORD *)this + 39) = v97;
    long long v97 = v59;
    uint64_t v60 = *((void *)this + 80);
    *((void *)this + 80) = v98;
    uint64_t v98 = v60;
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v97);
    re::AssetHandle::loadNow(*((void *)this + 79), 0);
  }
LABEL_79:
  if (!re::FontID::isValid((re::RealityEmitterBase *)((char *)this + 696)))
  {
    unint64_t v61 = (re *)(*((void *(**)(long long *__return_ptr, AssetService *, const char *))a3->var0 + 1))(&v97, a3, "engine:default.metallib");
    uint64_t v62 = re::globalAllocators(v61);
    uint64_t v63 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v62[2] + 32))(v62[2], 64, 8);
    re::ProjectiveShadowProvider::ProjectiveShadowProvider(v63, (const re::DynamicString *)v88, (const re::AssetHandle *)&v97);
    if (*(void *)&v88[0])
    {
      if (BYTE8(v88[0])) {
        (*(void (**)(void))(**(void **)&v88[0] + 40))();
      }
      memset(v88, 0, sizeof(v88));
    }
    re::RenderGraphManager::addProviderInternal((re::RenderGraphManager *)a2, "ProjectiveShadow", v63, 0, 1, (uint64_t)&v85);
    unint64_t v64 = v85;
    uint64_t v65 = v86;
    unint64_t v85 = 0;
    uint64_t v86 = "";
    uint64_t v66 = *((void *)this + 87);
    *((void *)this + 87) = v64;
    unint64_t v67 = v64 & 0xFFFFFFFFFFFFFFFELL | v66 & 1;
    uint64_t v68 = *((void *)this + 88);
    *((void *)this + 88) = v65;
    unint64_t v99 = v67;
    uint64_t v100 = v68;
    re::StringID::destroyString((re::StringID *)&v99);
    *((void *)this + 89) = v87;
    re::StringID::destroyString((re::StringID *)&v85);
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v97);
  }
  if (!re::FontID::isValid((re::RealityEmitterBase *)((char *)this + 720)))
  {
    uint64_t v69 = (re *)(*((void *(**)(long long *__return_ptr, AssetService *, const char *))a3->var0 + 1))(&v97, a3, "engine:default.metallib");
    unint64_t v70 = re::globalAllocators(v69);
    uint64_t v71 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v70[2] + 32))(v70[2], 64, 8);
    re::MeshShadowProvider::MeshShadowProvider(v71, (const re::DynamicString *)v84, (const re::AssetHandle *)&v97);
    if (*(void *)&v84[0])
    {
      if (BYTE8(v84[0])) {
        (*(void (**)(void))(**(void **)&v84[0] + 40))();
      }
      memset(v84, 0, sizeof(v84));
    }
    re::RenderGraphManager::addProviderInternal((re::RenderGraphManager *)a2, "ProjectiveMeshShadow", v71, 0, 1, (uint64_t)&v85);
    unint64_t v72 = v85;
    uint64_t v73 = v86;
    unint64_t v85 = 0;
    uint64_t v86 = "";
    uint64_t v74 = *((void *)this + 90);
    *((void *)this + 90) = v72;
    unint64_t v75 = v72 & 0xFFFFFFFFFFFFFFFELL | v74 & 1;
    uint64_t v76 = *((void *)this + 91);
    *((void *)this + 91) = v73;
    unint64_t v99 = v75;
    uint64_t v100 = v76;
    re::StringID::destroyString((re::StringID *)&v99);
    *((void *)this + 92) = v87;
    re::StringID::destroyString((re::StringID *)&v85);
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v97);
  }
  uint64_t result = (re *)re::FontID::isValid((re::RealityEmitterBase *)((char *)this + 424));
  if ((result & 1) == 0)
  {
    uint64_t v78 = re::globalAllocators(result);
    uint64_t v79 = v78[2];
    v102[0] = &unk_26E71BB10;
    v102[3] = v79;
    v102[4] = v102;
    uint64_t v80 = re::globalAllocators((re *)v78)[2];
    v101[0] = &unk_26E71BB68;
    v101[3] = v80;
    v101[4] = v101;
    re::RenderGraphManager::addProvider((re *)a2, "Camera", (uint64_t)v102, (uint64_t)v101, -100, (uint64_t)&v97);
    long long v81 = v97;
    *(void *)&long long v97 = 0;
    *((void *)&v97 + 1) = "";
    uint64_t v82 = *((void *)this + 53);
    long long v83 = (const char *)*((void *)this + 54);
    *(_OWORD *)((char *)this + 424) = v81;
    unint64_t v85 = v81 & 0xFFFFFFFFFFFFFFFELL | v82 & 1;
    uint64_t v86 = v83;
    re::StringID::destroyString((re::StringID *)&v85);
    *((void *)this + 55) = v98;
    re::StringID::destroyString((re::StringID *)&v97);
    re::FunctionBase<24ul,void ()(char const*,char const*,re::RenderFrame &)>::destroyCallable((uint64_t)v101);
    uint64_t result = (re *)re::FunctionBase<24ul,unsigned long long ()(char const*,char const*,re::RenderFrame &)>::destroyCallable((uint64_t)v102);
  }
  *((void *)this + 31) = a2;
  return result;
}

void re::RealityEmitterBase::unregisterCommonProviders(re::RealityEmitterBase *this, re::RenderGraphManager *a2)
{
  unint64_t v4 = (StringID *)((char *)this + 256);
  if (re::FontID::isValid((re::RealityEmitterBase *)((char *)this + 256)))
  {
    re::StringID::StringID((re::StringID *)v29, v4);
    uint64_t v30 = *((void *)this + 34);
    re::RenderGraphManager::removeProvider((uint64_t)a2, (uint64_t)v29);
    re::StringID::destroyString((re::StringID *)v29);
    re::ProviderHandle::invalidate((re::ProviderHandle *)v4);
  }
  if (re::FontID::isValid((re::RealityEmitterBase *)((char *)this + 280)))
  {
    re::StringID::StringID((re::StringID *)v27, (const StringID *)((char *)this + 280));
    uint64_t v28 = *((void *)this + 37);
    re::RenderGraphManager::removeProvider((uint64_t)a2, (uint64_t)v27);
    re::StringID::destroyString((re::StringID *)v27);
    re::ProviderHandle::invalidate((re::RealityEmitterBase *)((char *)this + 280));
  }
  if (re::FontID::isValid((re::RealityEmitterBase *)((char *)this + 304)))
  {
    re::StringID::StringID((re::StringID *)v25, (const StringID *)this + 19);
    uint64_t v26 = *((void *)this + 40);
    re::RenderGraphManager::removeProvider((uint64_t)a2, (uint64_t)v25);
    re::StringID::destroyString((re::StringID *)v25);
    re::ProviderHandle::invalidate((re::RealityEmitterBase *)((char *)this + 304));
  }
  if (re::FontID::isValid((re::RealityEmitterBase *)((char *)this + 328)))
  {
    re::StringID::StringID((re::StringID *)v23, (const StringID *)((char *)this + 328));
    uint64_t v24 = *((void *)this + 43);
    re::RenderGraphManager::removeProvider((uint64_t)a2, (uint64_t)v23);
    re::StringID::destroyString((re::StringID *)v23);
    re::ProviderHandle::invalidate((re::RealityEmitterBase *)((char *)this + 328));
  }
  if (re::FontID::isValid((re::RealityEmitterBase *)((char *)this + 352)))
  {
    re::StringID::StringID((re::StringID *)v21, (const StringID *)this + 22);
    uint64_t v22 = *((void *)this + 46);
    re::RenderGraphManager::removeProvider((uint64_t)a2, (uint64_t)v21);
    re::StringID::destroyString((re::StringID *)v21);
    re::ProviderHandle::invalidate((re::RealityEmitterBase *)((char *)this + 352));
  }
  if (re::FontID::isValid((re::RealityEmitterBase *)((char *)this + 400)))
  {
    re::StringID::StringID((re::StringID *)v19, (const StringID *)this + 25);
    uint64_t v20 = *((void *)this + 52);
    re::RenderGraphManager::removeProvider((uint64_t)a2, (uint64_t)v19);
    re::StringID::destroyString((re::StringID *)v19);
    re::ProviderHandle::invalidate((re::RealityEmitterBase *)((char *)this + 400));
  }
  if (re::FontID::isValid((re::RealityEmitterBase *)((char *)this + 448)))
  {
    re::StringID::StringID((re::StringID *)v17, (const StringID *)this + 28);
    uint64_t v18 = *((void *)this + 58);
    re::RenderGraphManager::removeProvider((uint64_t)a2, (uint64_t)v17);
    re::StringID::destroyString((re::StringID *)v17);
    re::ProviderHandle::invalidate((re::RealityEmitterBase *)((char *)this + 448));
  }
  if (re::FontID::isValid((re::RealityEmitterBase *)((char *)this + 472)))
  {
    re::StringID::StringID((re::StringID *)v15, (const StringID *)((char *)this + 472));
    uint64_t v16 = *((void *)this + 61);
    re::RenderGraphManager::removeProvider((uint64_t)a2, (uint64_t)v15);
    re::StringID::destroyString((re::StringID *)v15);
    re::ProviderHandle::invalidate((re::RealityEmitterBase *)((char *)this + 472));
  }
  if (re::FontID::isValid((re::RealityEmitterBase *)((char *)this + 552)))
  {
    re::StringID::StringID((re::StringID *)v13, (const StringID *)((char *)this + 552));
    uint64_t v14 = *((void *)this + 71);
    re::RenderGraphManager::removeProvider((uint64_t)a2, (uint64_t)v13);
    re::StringID::destroyString((re::StringID *)v13);
    re::ProviderHandle::invalidate((re::RealityEmitterBase *)((char *)this + 552));
  }
  if (re::FontID::isValid((re::RealityEmitterBase *)((char *)this + 576)))
  {
    re::StringID::StringID((re::StringID *)v11, (const StringID *)this + 36);
    uint64_t v12 = *((void *)this + 74);
    re::RenderGraphManager::removeProvider((uint64_t)a2, (uint64_t)v11);
    re::StringID::destroyString((re::StringID *)v11);
    re::ProviderHandle::invalidate((re::RealityEmitterBase *)((char *)this + 576));
  }
  if (re::FontID::isValid((re::RealityEmitterBase *)((char *)this + 696)))
  {
    re::StringID::StringID((re::StringID *)v9, (const StringID *)((char *)this + 696));
    uint64_t v10 = *((void *)this + 89);
    re::RenderGraphManager::removeProvider((uint64_t)a2, (uint64_t)v9);
    re::StringID::destroyString((re::StringID *)v9);
    re::ProviderHandle::invalidate((re::RealityEmitterBase *)((char *)this + 696));
  }
  if (re::FontID::isValid((re::RealityEmitterBase *)((char *)this + 720)))
  {
    re::StringID::StringID((re::StringID *)v7, (const StringID *)this + 45);
    uint64_t v8 = *((void *)this + 92);
    re::RenderGraphManager::removeProvider((uint64_t)a2, (uint64_t)v7);
    re::StringID::destroyString((re::StringID *)v7);
    re::ProviderHandle::invalidate((re::RealityEmitterBase *)((char *)this + 720));
  }
  if (re::FontID::isValid((re::RealityEmitterBase *)((char *)this + 424)))
  {
    re::StringID::StringID((re::StringID *)v5, (const StringID *)((char *)this + 424));
    uint64_t v6 = *((void *)this + 55);
    re::RenderGraphManager::removeProvider((uint64_t)a2, (uint64_t)v5);
    re::StringID::destroyString((re::StringID *)v5);
    re::ProviderHandle::invalidate((re::RealityEmitterBase *)((char *)this + 424));
  }
}

uint64_t re::RealityEmitterBase::pushPipelineCompilationDataToDataStore(re::RealityEmitterBase *this, re::RenderFrame *a2, re::RenderGraphDataStore *a3)
{
  while (1)
  {
    uint64_t v10 = 0xC1ECEDF69A9CD01;
    uint64_t v4 = re::RenderFrameData::stream((re::RenderFrame *)((char *)a2 + 264), (const re::WeakStringID *)&v10);
    uint64_t result = re::HashTable<std::type_index,re::RenderFrameDataArrayWrapper,re::Hash<std::type_index>,re::EqualTo<std::type_index>,true,false>::tryGet(v4, &v10);
    if (!result) {
      break;
    }
    if (!result) {
      break;
    }
    if (*(void *)(result + 40))
    {
      uint64_t v7 = re::BucketArray<re::PipelineCompilationData,4ul>::operator[](result, 0);
      return re::RenderGraphDataStore::add<re::PipelineCompilationData,re::PipelineCompilationData&>((uint64_t)a3, re::RealityEmitterBase::pushPipelineCompilationDataToDataStore(re::RenderFrame &,re::RenderGraphDataStore &)::kPipelineCompilationDataScopeHash, v7);
    }
    re::internal::assertLog((re::internal *)4, v6, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "first", 754);
    _os_crash();
    __break(1u);
LABEL_8:
    long long v9 = a2;
    a2 = v9;
    if (v8)
    {
      re::RealityEmitterBase::pushPipelineCompilationDataToDataStore(re::RenderFrame &,re::RenderGraphDataStore &)::kPipelineCompilationDataunint64_t ScopeHash = re::hashString((re *)"PipelineCompilationData", (const char *)v9);
      a2 = v9;
    }
  }
  return result;
}

uint64_t re::RenderGraphDataStore::add<re::PipelineCompilationData,re::PipelineCompilationData&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4 = (unint64_t)"N2re23PipelineCompilationDataE";
  if (((unint64_t)"N2re23PipelineCompilationDataE" & 0x8000000000000000) != 0)
  {
    uint64_t v5 = (unsigned __int8 *)((unint64_t)"N2re23PipelineCompilationDataE" & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v6 = 5381;
    do
    {
      unint64_t v4 = v6;
      unsigned int v7 = *v5++;
      uint64_t v6 = (33 * v6) ^ v7;
    }
    while (v7);
  }
  uint64_t v12 = (a2 + (v4 << 6) + (v4 >> 2) - 0x61C8864680B583E9) ^ v4;
  uint64_t v8 = a1 + 64;
  uint64_t v9 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 16, 8);
  *(void *)uint64_t v9 = &unk_26E6FD650;
  *(_WORD *)(v9 + 8) = *(_WORD *)(a3 + 8);
  uint64_t v11 = v9;
  return *(void *)re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addNew<re::CameraData *>(v8, (unint64_t *)&v12, &v11);
}

void re::RealityEmitterBase::handleRenderFrameData(uint64_t this, re::RenderFrame *a2)
{
  uint64_t v380 = *MEMORY[0x263EF8340];
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v369, 5083, *((void *)a2 + 1));
  re::RenderFrameContextBuilder::build((uint64_t)a2, this + 152, (unint64_t)&v363);
  if (atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9BA10, memory_order_acquire)) {
    goto LABEL_2;
  }
  while (1)
  {
    if (__cxa_guard_acquire(&qword_26AF9BA10))
    {
      qword_26AF9BA08 = re::hashString((re *)"RenderGraphDataPipeData", v337);
      __cxa_guard_release(&qword_26AF9BA10);
    }
LABEL_2:
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9BA20, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_26AF9BA20))
    {
      qword_26AF9BA18 = re::hashString((re *)"RenderFrame", v338);
      __cxa_guard_release(&qword_26AF9BA20);
    }
    unint64_t v4 = (re::Allocator *)*((void *)a2 + 47);
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9BA30, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_26AF9BA30))
    {
      qword_26AF9BA28 = re::getCombinedScopeHash((re *)"RenderFrameContext", (const char *)qword_26AF9BA18);
      __cxa_guard_release(&qword_26AF9BA30);
    }
    unint64_t v5 = (unint64_t)"N2re27RenderGraphDataStoreWrapperINS_18RenderFrameContextEEE";
    if (((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_18RenderFrameContextEEE" & 0x8000000000000000) != 0)
    {
      uint64_t v6 = (unsigned __int8 *)((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_18RenderFrameContextEEE" & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v7 = 5381;
      do
      {
        unint64_t v5 = v7;
        unsigned int v8 = *v6++;
        uint64_t v7 = (33 * v7) ^ v8;
      }
      while (v8);
    }
    unint64_t v9 = (qword_26AF9BA28 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9) ^ v5;
    uint64_t v10 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**((void **)a2 + 5) + 32))(*((void *)a2 + 5), 152, 8);
    *(void *)&v371[0] = v4;
    *(_OWORD *)&v374[24] = 0u;
    v374[40] = 32;
    *(void *)&v374[48] = 0;
    v374[56] = 1;
    *(void *)uint64_t v10 = &unk_26E71BCB0;
    *(void *)(v10 + 8) = v4;
    *(void *)(v10 + 16) = v4;
    *(void *)(v10 + 24) = 0;
    *(_OWORD *)((char *)v371 + 8) = 0u;
    *(void *)(v10 + 96) = v4;
    *(_OWORD *)&v374[8] = 0u;
    *(_OWORD *)(v10 + 32) = 0u;
    *(_OWORD *)((char *)&v371[1] + 8) = 0u;
    *(void *)(v10 + 48) = 0;
    *((void *)&v371[2] + 1) = 0;
    *(void *)(v10 + 88) = 0;
    *(void *)uint64_t v374 = 0;
    *(_OWORD *)(v10 + 56) = 0u;
    *(_OWORD *)(v10 + 72) = 0u;
    long long v372 = 0u;
    long long v373 = 0u;
    long long v11 = *(_OWORD *)&v374[16];
    long long v12 = *(_OWORD *)&v374[32];
    *(_OWORD *)(v10 + 129) = *(_OWORD *)&v374[41];
    *(_OWORD *)(v10 + 120) = v12;
    *(_OWORD *)(v10 + 104) = v11;
    re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::deinit((uint64_t)&v371[2]);
    re::FixedArray<re::RenderSceneContext>::deinit((void *)v371 + 1);
    unint64_t v14 = *((void *)a2 + 12);
    char v354 = (unint64_t *)((char *)a2 + 96);
    if (v14)
    {
      unint64_t v14 = v9 % *((unsigned int *)a2 + 30);
      uint64_t v15 = *(unsigned int *)(*((void *)a2 + 13) + 4 * v14);
      if (v15 != 0x7FFFFFFF)
      {
        uint64_t v22 = *((void *)a2 + 14);
        if (*(void *)(v22 + 24 * v15 + 8) == v9)
        {
LABEL_18:
          uint64_t v21 = v22 + 24 * v15;
          goto LABEL_19;
        }
        while (1)
        {
          LODWORD(v15) = *(_DWORD *)(v22 + 24 * v15) & 0x7FFFFFFF;
          if (v15 == 0x7FFFFFFF) {
            break;
          }
          if (*(void *)(v22 + 24 * v15 + 8) == v9) {
            goto LABEL_18;
          }
        }
      }
    }
    uint64_t v16 = *((unsigned int *)a2 + 33);
    if (v16 == 0x7FFFFFFF)
    {
      uint64_t v16 = *((unsigned int *)a2 + 32);
      int v17 = v16;
      if (v16 == *((_DWORD *)a2 + 30))
      {
        re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity((uint64_t)v354, 2 * *((_DWORD *)a2 + 31));
        LODWORD(v14) = v9 % *((unsigned int *)a2 + 30);
        int v17 = *((_DWORD *)a2 + 32);
      }
      *((_DWORD *)a2 + 32) = v17 + 1;
      uint64_t v18 = *((void *)a2 + 14);
      int v19 = *(_DWORD *)(v18 + 24 * v16);
    }
    else
    {
      uint64_t v18 = *((void *)a2 + 14);
      int v19 = *(_DWORD *)(v18 + 24 * v16);
      *((_DWORD *)a2 + 33) = v19 & 0x7FFFFFFF;
    }
    uint64_t v20 = 24 * v16;
    *(_DWORD *)(v18 + v20) = v19 | 0x80000000;
    *(_DWORD *)(*((void *)a2 + 14) + v20) = *(_DWORD *)(*((void *)a2 + 14) + 24 * v16) & 0x80000000 | *(_DWORD *)(*((void *)a2 + 13) + 4 * v14);
    *(void *)(*((void *)a2 + 14) + 24 * v16 + 8) = v9;
    *(void *)(*((void *)a2 + 14) + 24 * v16 + 16) = v10;
    *(_DWORD *)(*((void *)a2 + 13) + 4 * v14) = v16;
    ++*((_DWORD *)a2 + 31);
    ++*((_DWORD *)a2 + 34);
    uint64_t v21 = *((void *)a2 + 14) + 24 * v16;
LABEL_19:
    uint64_t v23 = *(void *)(v21 + 16);
    unint64_t v24 = v367;
    *((void *)&v371[0] + 1) = v367;
    *(void *)&v371[1] = 0;
    *(void *)&v371[0] = v4;
    if (v367)
    {
      if (v367 >= 0x8D3DCB08D3DCB1) {
        goto LABEL_325;
      }
      uint64_t v25 = (*(uint64_t (**)(re::Allocator *, unint64_t, uint64_t))(*(void *)v4 + 32))(v4, 464 * v367, 8);
      *(void *)&v371[1] = v25;
      if (!v25)
      {
        re::internal::assertLog((re::internal *)4, v26, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
        uint64_t v25 = _os_crash();
        __break(1u);
        goto LABEL_23;
      }
      while (--v24)
LABEL_23:
        uint64_t v25 = re::RenderSceneContext::RenderSceneContext(v25, v4) + 464;
      re::RenderSceneContext::RenderSceneContext(v25, v4);
      unint64_t v4 = *(re::Allocator **)&v371[0];
    }
    long long v27 = *(re::Allocator **)(v23 + 16);
    if (!v27 || v27 == v4) {
      break;
    }
LABEL_326:
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || m_allocator == other.m_allocator", "operator=", 296);
    _os_crash();
    __break(1u);
  }
  uint64_t v342 = this;
  uint64_t v28 = (re::RenderFrame *)((char *)a2 + 32);
  *(void *)(v23 + 16) = v4;
  uint64_t v29 = *(void *)(v23 + 24);
  uint64_t v30 = *(void *)(v23 + 32);
  uint64_t v31 = *((void *)&v371[0] + 1);
  uint64_t v32 = *(void *)&v371[1];
  *(void *)&v371[0] = v27;
  *((void *)&v371[0] + 1) = v29;
  *(void *)(v23 + 24) = v31;
  *(void *)(v23 + 32) = v32;
  *(void *)&v371[1] = v30;
  re::FixedArray<re::RenderSceneContext>::deinit(v371);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9BA40, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9BA40))
  {
    qword_26AF9BA38 = (qword_26AF9BA18
                     - 0x61C8864680B583E9
                     + (qword_26AF9BA08 << 6)
                     + ((unint64_t)qword_26AF9BA08 >> 2)) ^ qword_26AF9BA08;
    __cxa_guard_release(&qword_26AF9BA40);
  }
  uint64_t v33 = re::RenderGraphDataStore::add<re::RenderGraphDataPipeData>((uint64_t)a2 + 32, qword_26AF9BA38);
  uint64_t v34 = *((void *)a2 + 40);
  *(void *)(v33 + 8) = v34;
  *(void *)(v23 + 136) = v34;
  uint64_t v352 = v23;
  long long v353 = (char *)a2 + 32;
  if (v367)
  {
    uint64_t v35 = 0;
    unint64_t v36 = 0;
    long long v37 = (char *)a2 + 264;
    uint64_t v38 = 448;
    while (1)
    {
      uint64_t v39 = *(char **)(v23 + 24);
      if ((unint64_t)v39 <= v36) {
        break;
      }
      uint64_t v40 = &v368[v35];
      uint64_t v41 = *(void *)(v23 + 32);
      *(void *)char v375 = v368[v35 + 1];
      uint64_t v42 = re::RenderFrameData::stream((re::RenderFrame *)((char *)a2 + 264), (const re::WeakStringID *)v375);
      this = **v40;
      unint64_t v43 = qword_26AF9BA08;
      size_t v44 = strlen((const char *)this);
      uint64_t v45 = 0x9E3779B97F4A7C17;
      if (v44)
      {
        MurmurHash3_x64_128(this, v44, 0, (unint64_t *)v371);
        uint64_t v45 = ((*((void *)&v371[0] + 1)
              - 0x61C8864680B583E9
              + (*(void *)&v371[0] << 6)
              + (*(void *)&v371[0] >> 2)) ^ *(void *)&v371[0])
            - 0x61C8864680B583E9;
      }
      uint64_t v46 = ((v43 >> 2) + (v43 << 6) + v45) ^ v43;
      uint64_t v28 = (re::RenderFrame *)((char *)a2 + 32);
      uint64_t v47 = re::RenderGraphDataStore::add<re::RenderGraphDataPipeData>((uint64_t)v353, v46);
      uint64_t v48 = *(void *)(v42 + 48);
      *(void *)(v47 + 8) = v48;
      *(void *)(v41 + v38) = v48;
      ++v36;
      v35 += 186;
      v38 += 464;
      uint64_t v23 = v352;
      if (v36 >= v367) {
        goto LABEL_35;
      }
    }
    unint64_t v370 = 0;
    long long v372 = 0u;
    long long v373 = 0u;
    memset(v371, 0, sizeof(v371));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)char v375 = 136315906;
    *(void *)&v375[4] = "operator[]";
    *(_WORD *)&v375[12] = 1024;
    *(_DWORD *)&v375[14] = 468;
    __int16 v376 = 2048;
    unint64_t v377 = v36;
    __int16 v378 = 2048;
    v379 = v39;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_321:
    unint64_t v370 = 0;
    long long v372 = 0u;
    long long v373 = 0u;
    memset(v371, 0, sizeof(v371));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)char v375 = 136315906;
    *(void *)&v375[4] = "operator[]";
    *(_WORD *)&v375[12] = 1024;
    *(_DWORD *)&v375[14] = 468;
    __int16 v376 = 2048;
    unint64_t v377 = v36;
    __int16 v378 = 2048;
    v379 = v37;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_322:
    unint64_t v370 = 0;
    long long v372 = 0u;
    long long v373 = 0u;
    memset(v371, 0, sizeof(v371));
    unint64_t v24 = &_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)char v375 = 136315906;
    *(void *)&v375[4] = "operator[]";
    *(_WORD *)&v375[12] = 1024;
    *(_DWORD *)&v375[14] = 468;
    __int16 v376 = 2048;
    unint64_t v377 = v36;
    __int16 v378 = 2048;
    v379 = v37;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_323:
    re::internal::assertLog((re::internal *)4, v271, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || !other.isInitialized() || allocator() == other.allocator()", "operator=", 526);
    _os_crash();
    __break(1u);
LABEL_324:
    re::internal::assertLog((re::internal *)4, v271, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || !other.isInitialized() || allocator() == other.allocator()", "operator=", 526);
    _os_crash();
    __break(1u);
LABEL_325:
    re::internal::assertLog((re::internal *)6, v13, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 464, v24);
    _os_crash();
    __break(1u);
    goto LABEL_326;
  }
LABEL_35:
  unint64_t v49 = (void *)*((void *)a2 + 1);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9BA50, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9BA50))
  {
    qword_26AF9BA48 = re::hashString((re *)"RenderFrame", v339);
    __cxa_guard_release(&qword_26AF9BA50);
  }
  int v341 = (void *)(v23 + 8);
  uint64_t v50 = *(void *)(v23 + 8);
  unsigned int v51 = (re::DrawingManager *)v49[13];
  if (v51 && re::DrawingManager::shouldRenderProfilerNode(v51))
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9BA60, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_26AF9BA60))
    {
      qword_26AF9BA58 = re::getCombinedScopeHash((re *)"ProfilerOverlay", (const char *)qword_26AF9BA48);
      __cxa_guard_release(&qword_26AF9BA60);
    }
    unint64_t v52 = (unint64_t)"N2re29ProfilerOverlayEnablementDataE";
    if (((unint64_t)"N2re29ProfilerOverlayEnablementDataE" & 0x8000000000000000) != 0)
    {
      long long v53 = (unsigned __int8 *)((unint64_t)"N2re29ProfilerOverlayEnablementDataE" & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v54 = 5381;
      do
      {
        unint64_t v52 = v54;
        unsigned int v55 = *v53++;
        uint64_t v54 = (33 * v54) ^ v55;
      }
      while (v55);
    }
    *(void *)&v371[0] = (qword_26AF9BA58 - 0x61C8864680B583E9 + (v52 << 6) + (v52 >> 2)) ^ v52;
    uint64_t v56 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**((void **)a2 + 5) + 32))(*((void *)a2 + 5), 16, 8);
    *(void *)uint64_t v56 = &unk_26E71BD30;
    *(unsigned char *)(v56 + 8) = 1;
    *(void *)char v375 = v56;
    re::HashBrown<unsigned long,re::RenderGraphBuilderData *,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<re::RenderGraphBuilderData *>,false>::addNew((re::RenderFrame *)((char *)a2 + 144), v371, (uint64_t *)v375);
  }
  if (v364) {
    char v57 = v365;
  }
  else {
    char v57 = 1;
  }
  *(unsigned char *)(v23 + 144) = v57;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9BA70, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9BA70))
  {
    qword_26AF9BA68 = re::getCombinedScopeHash((re *)"SceneArray", (const char *)qword_26AF9BA48);
    __cxa_guard_release(&qword_26AF9BA70);
  }
  unint64_t v58 = (unint64_t)"N2re14SceneArrayDataE";
  long long v59 = (StringID *)v342;
  if (((unint64_t)"N2re14SceneArrayDataE" & 0x8000000000000000) != 0)
  {
    uint64_t v60 = (unsigned __int8 *)((unint64_t)"N2re14SceneArrayDataE" & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v61 = 5381;
    do
    {
      unint64_t v58 = v61;
      unsigned int v62 = *v60++;
      uint64_t v61 = (33 * v61) ^ v62;
    }
    while (v62);
  }
  unint64_t v63 = (qword_26AF9BA68 - 0x61C8864680B583E9 + (v58 << 6) + (v58 >> 2)) ^ v58;
  uint64_t v64 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**((void **)a2 + 5) + 32))(*((void *)a2 + 5), 48, 8);
  *(void *)uint64_t v64 = &unk_26E71BD78;
  *(void *)(v64 + 40) = 0;
  *(void *)(v64 + 16) = 0;
  *(void *)(v64 + 24) = 0;
  *(_DWORD *)(v64 + 32) = 0;
  *(void *)(v64 + 8) = v50;
  re::DynamicArray<float *>::setCapacity((void *)(v64 + 8), 0);
  ++*(_DWORD *)(v64 + 32);
  unint64_t v65 = *((void *)a2 + 12);
  if (!v65) {
    goto LABEL_52;
  }
  unint64_t v65 = v63 % *((unsigned int *)a2 + 30);
  uint64_t v66 = *(unsigned int *)(*((void *)a2 + 13) + 4 * v65);
  if (v66 == 0x7FFFFFFF) {
    goto LABEL_52;
  }
  uint64_t v73 = *((void *)a2 + 14);
  if (*(void *)(v73 + 24 * v66 + 8) == v63)
  {
LABEL_61:
    uint64_t v72 = v73 + 24 * v66;
  }
  else
  {
    while (1)
    {
      LODWORD(v66) = *(_DWORD *)(v73 + 24 * v66) & 0x7FFFFFFF;
      if (v66 == 0x7FFFFFFF) {
        break;
      }
      if (*(void *)(v73 + 24 * v66 + 8) == v63) {
        goto LABEL_61;
      }
    }
LABEL_52:
    uint64_t v67 = *((unsigned int *)a2 + 33);
    if (v67 == 0x7FFFFFFF)
    {
      uint64_t v67 = *((unsigned int *)a2 + 32);
      int v68 = v67;
      if (v67 == *((_DWORD *)a2 + 30))
      {
        re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity((uint64_t)v354, 2 * *((_DWORD *)a2 + 31));
        LODWORD(v65) = v63 % *((unsigned int *)a2 + 30);
        int v68 = *((_DWORD *)a2 + 32);
      }
      *((_DWORD *)a2 + 32) = v68 + 1;
      uint64_t v69 = *((void *)a2 + 14);
      int v70 = *(_DWORD *)(v69 + 24 * v67);
    }
    else
    {
      uint64_t v69 = *((void *)a2 + 14);
      int v70 = *(_DWORD *)(v69 + 24 * v67);
      *((_DWORD *)a2 + 33) = v70 & 0x7FFFFFFF;
    }
    uint64_t v71 = 24 * v67;
    *(_DWORD *)(v69 + v71) = v70 | 0x80000000;
    *(_DWORD *)(*((void *)a2 + 14) + v71) = *(_DWORD *)(*((void *)a2 + 14) + 24 * v67) & 0x80000000 | *(_DWORD *)(*((void *)a2 + 13) + 4 * v65);
    *(void *)(*((void *)a2 + 14) + 24 * v67 + 8) = v63;
    *(void *)(*((void *)a2 + 14) + 24 * v67 + 16) = v64;
    *(_DWORD *)(*((void *)a2 + 13) + 4 * v65) = v67;
    ++*((_DWORD *)a2 + 31);
    ++*((_DWORD *)a2 + 34);
    uint64_t v72 = *((void *)a2 + 14) + 24 * v67;
  }
  uint64_t v74 = (void *)(v72 + 16);
  if (v367)
  {
    unint64_t v75 = v368;
    uint64_t v76 = (void *)(*v74 + 8);
    uint64_t v77 = 1488 * v367;
    do
    {
      re::DynamicArray<re::TransitionCondition *>::add(v76, *v75);
      v75 += 186;
      v77 -= 1488;
    }
    while (v77);
  }
  uint64_t v78 = (re::TonemapUserParameters *)(v49[19] + 88);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9BA80, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9BA80))
  {
    qword_26AF9BA78 = re::getCombinedScopeHash((re *)"ToneMapping", (const char *)qword_26AF9BA48);
    __cxa_guard_release(&qword_26AF9BA80);
  }
  uint64_t v79 = re::RenderGraphDataStore::add<re::TonemapParametersData>((uint64_t)v28, qword_26AF9BA78);
  re::TonemapUserParameters::computeRenderParameters(v78, (uint64_t)v371);
  *(_OWORD *)(v79 + 88) = *(_OWORD *)v374;
  *(_OWORD *)(v79 + 104) = *(_OWORD *)&v374[16];
  *(_OWORD *)(v79 + 120) = *(_OWORD *)&v374[32];
  *(_DWORD *)(v79 + 136) = *(_DWORD *)&v374[48];
  *(_OWORD *)(v79 + 24) = v371[1];
  *(_OWORD *)(v79 + 40) = v371[2];
  *(_OWORD *)(v79 + 56) = v372;
  *(_OWORD *)(v79 + 72) = v373;
  *(_OWORD *)(v79 + 8) = v371[0];
  re::ColorManager::updateTonemapLUTs(v49[19], (float *)(v79 + 8));
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9BA90, memory_order_acquire) & 1) == 0)
  {
    uint64_t v80 = (re *)__cxa_guard_acquire(&qword_26AF9BA90);
    if (v80)
    {
      qword_26AF9BA88 = re::getCombinedScopeHash((re *)"CameraTMData", (const char *)qword_26AF9BA48);
      __cxa_guard_release(&qword_26AF9BA90);
    }
  }
  unint64_t v81 = (unint64_t)"N2re27RenderGraphDataStoreWrapperINS_12CameraTMDataEEE";
  if (((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_12CameraTMDataEEE" & 0x8000000000000000) != 0)
  {
    uint64_t v82 = (unsigned __int8 *)((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_12CameraTMDataEEE" & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v83 = 5381;
    do
    {
      unint64_t v81 = v83;
      unsigned int v84 = *v82++;
      uint64_t v83 = (33 * v83) ^ v84;
    }
    while (v84);
  }
  unint64_t v85 = (qword_26AF9BA88 - 0x61C8864680B583E9 + (v81 << 6) + (v81 >> 2)) ^ v81;
  uint64_t v86 = re::globalAllocators(v80);
  uint64_t v87 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v86[2] + 32))(v86[2], 1048, 8);
  bzero(v87 + 2, 0x408uLL);
  unint64_t v88 = *((void *)a2 + 6);
  long long v356 = (unint64_t *)((char *)a2 + 48);
  *uint64_t v87 = &unk_26E71BDB8;
  __asm { FMOV            V0.2S, #1.0 }
  v87[1] = _D0;
  if (v88
    && (unint64_t v88 = v85 % *((unsigned int *)a2 + 18),
        uint64_t v93 = *(unsigned int *)(*((void *)a2 + 7) + 4 * v88),
        v93 != 0x7FFFFFFF))
  {
    uint64_t v100 = *((void *)a2 + 8);
    while (*(void *)(v100 + 24 * v93 + 8) != v85)
    {
      LODWORD(v93) = *(_DWORD *)(v100 + 24 * v93) & 0x7FFFFFFF;
      if (v93 == 0x7FFFFFFF) {
        goto LABEL_72;
      }
    }
    uint64_t v99 = v100 + 24 * v93;
  }
  else
  {
LABEL_72:
    uint64_t v94 = *((unsigned int *)a2 + 21);
    if (v94 == 0x7FFFFFFF)
    {
      uint64_t v94 = *((unsigned int *)a2 + 20);
      int v95 = v94;
      if (v94 == *((_DWORD *)a2 + 18))
      {
        re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity((uint64_t)v356, 2 * *((_DWORD *)a2 + 19));
        LODWORD(v88) = v85 % *((unsigned int *)a2 + 18);
        int v95 = *((_DWORD *)a2 + 20);
      }
      *((_DWORD *)a2 + 20) = v95 + 1;
      uint64_t v96 = *((void *)a2 + 8);
      int v97 = *(_DWORD *)(v96 + 24 * v94);
    }
    else
    {
      uint64_t v96 = *((void *)a2 + 8);
      int v97 = *(_DWORD *)(v96 + 24 * v94);
      *((_DWORD *)a2 + 21) = v97 & 0x7FFFFFFF;
    }
    uint64_t v98 = 24 * v94;
    *(_DWORD *)(v96 + v98) = v97 | 0x80000000;
    *(_DWORD *)(*((void *)a2 + 8) + v98) = *(_DWORD *)(*((void *)a2 + 8) + 24 * v94) & 0x80000000 | *(_DWORD *)(*((void *)a2 + 7) + 4 * v88);
    *(void *)(*((void *)a2 + 8) + 24 * v94 + 8) = v85;
    *(void *)(*((void *)a2 + 8) + 24 * v94 + 16) = v87;
    *(_DWORD *)(*((void *)a2 + 7) + 4 * v88) = v94;
    ++*((_DWORD *)a2 + 19);
    ++*((_DWORD *)a2 + 22);
    uint64_t v99 = *((void *)a2 + 8) + 24 * v94;
  }
  uint64_t v101 = *(void *)(v99 + 16);
  uint64_t v102 = v49[36];
  if (*(void *)(v102 + 608)) {
    *(unsigned char *)(v101 + 16) = 1;
  }
  unint64_t v103 = (unint64_t *)v49[14];
  if (v103)
  {
    *(float *)(v101 + 8) = (float)v103[232] * 0.0039062;
    uint64_t v104 = *(void *)(v102 + 704);
    if (v104) {
      (*(void (**)(uint64_t))(*(void *)v104 + 16))(v104);
    }
    uint64_t v105 = v49[19];
    unint64_t v106 = v103[243];
    *(void *)&v371[0] = v103[244];
    *((void *)&v371[0] + 1) = v106;
    re::ColorManager::updateISPTonemapLUTAccelerated(v105);
  }
  *(void *)(v23 + 104) = (*(uint64_t (**)(void))(**(void **)(v23 + 136) + 24))(*(void *)(v23 + 136));
  *(void *)(v23 + 112) = (*(uint64_t (**)(void))(**(void **)(v23 + 136) + 184))(*(void *)(v23 + 136));
  *(void *)(v23 + 120) = v363;
  unint64_t v340 = v367;
  if (v367)
  {
    unint64_t v36 = 0;
    v343 = (_anonymous_namespace_ *)(v23 + 40);
    this = 464;
    while (1)
    {
      long long v37 = *(char **)(v23 + 24);
      if ((unint64_t)v37 <= v36) {
        goto LABEL_321;
      }
      unint64_t v357 = *(void *)(v23 + 32);
      unint64_t v107 = v357 + 464 * v36;
      *(_DWORD *)(v107 + 440) = v36;
      long long v37 = (char *)v367;
      if (v367 <= v36) {
        goto LABEL_322;
      }
      uint64_t v108 = v368;
      uint64_t v109 = (char ***)&v368[186 * v36];
      uint64_t v110 = **v109;
      if (v110)
      {
        uint64_t v111 = *v110;
        if (*v110)
        {
          char v112 = v110[1];
          if (v112)
          {
            uint64_t v113 = (unsigned __int8 *)(v110 + 2);
            do
            {
              uint64_t v111 = 31 * v111 + v112;
              int v114 = *v113++;
              char v112 = v114;
            }
            while (v114);
          }
          unint64_t v115 = v111 & 0x7FFFFFFFFFFFFFFFLL;
        }
        else
        {
          unint64_t v115 = 0;
        }
      }
      else
      {
        unint64_t v115 = 0x7FFFFFFFFFFFFFFFLL;
      }
      unint64_t v370 = v115;
      LODWORD(v371[0]) = v36;
      if (re::HashBrown<void const*,unsigned long,re::Hash<void const*>,re::EqualTo<void const*>,void,false>::find(v343, v115) == -1)
      {
        re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,void,false>::internalAdd(v343, &v370, v371);
        uint64_t v110 = **v109;
      }
      long long v358 = v108;
      size_t v116 = strlen(v110);
      if (v116)
      {
        MurmurHash3_x64_128((uint64_t)v110, v116, 0, (unint64_t *)v371);
        uint64_t v117 = (*((void *)&v371[0] + 1)
              - 0x61C8864680B583E9
              + (*(void *)&v371[0] << 6)
              + (*(void *)&v371[0] >> 2)) ^ *(void *)&v371[0];
      }
      else
      {
        uint64_t v117 = 0;
      }
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9BAA0, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26AF9BAA0))
      {
        qword_26AF9BA98 = re::hashString((re *)"SceneIndex", v294);
        __cxa_guard_release(&qword_26AF9BAA0);
      }
      unint64_t v118 = (unint64_t)"N2re14SceneIndexDataE";
      if (((unint64_t)"N2re14SceneIndexDataE" & 0x8000000000000000) != 0)
      {
        uint64_t v119 = (unsigned __int8 *)((unint64_t)"N2re14SceneIndexDataE" & 0x7FFFFFFFFFFFFFFFLL);
        uint64_t v120 = 5381;
        do
        {
          unint64_t v118 = v120;
          unsigned int v121 = *v119++;
          uint64_t v120 = (33 * v120) ^ v121;
        }
        while (v121);
      }
      uint64_t v122 = v117 - 0x61C8864680B583E9;
      *(void *)&v371[0] = (((v117
                             - 0x61C8864680B583E9
                             + (qword_26AF9BA98 << 6)
                             + ((unint64_t)qword_26AF9BA98 >> 2)) ^ qword_26AF9BA98)
                           - 0x61C8864680B583E9
                           + (v118 << 6)
                           + (v118 >> 2)) ^ v118;
      v123 = (void *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**((void **)a2 + 5) + 32))(*((void *)a2 + 5), 16, 8);
      void *v123 = &unk_26E7110D0;
      v123[1] = 0xFFFFFFFFLL;
      *(void *)char v375 = v123;
      *(_DWORD *)(*(void *)re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addNew<re::CameraData *>((uint64_t)v354, (unint64_t *)v371, v375)+ 8) = *(_DWORD *)(v107 + 440);
      unint64_t v124 = v357 + 464 * v36;
      int v125 = *(unsigned __int8 *)(v124 + 444);
      int v126 = LOBYTE(v358[186 * v36 + 184]);
      if (*(unsigned char *)(v124 + 444)) {
        _ZF = 0;
      }
      else {
        _ZF = v126 == 0;
      }
      if (!_ZF)
      {
        v128 = (unsigned char *)(v124 + 444);
        if (v125) {
          BOOL v129 = v126 == 0;
        }
        else {
          BOOL v129 = 0;
        }
        if (v129)
        {
          unsigned char *v128 = 0;
        }
        else
        {
          if (v125) {
            BOOL v130 = 1;
          }
          else {
            BOOL v130 = v126 == 0;
          }
          if (!v130) {
            unsigned char *v128 = 1;
          }
          *(unsigned char *)(v357 + 464 * v36 + 445) = BYTE1(v358[186 * v36 + 184]);
        }
      }
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9BAB0, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26AF9BAB0))
      {
        qword_26AF9BAA8 = re::hashString((re *)"MeshScenes", v295);
        __cxa_guard_release(&qword_26AF9BAB0);
      }
      long long v351 = v110;
      unint64_t v131 = qword_26AF9BAA8;
      unint64_t v132 = (unint64_t)"N2re27RenderGraphDataStoreWrapperINS_15MeshSceneArraysEEE";
      if (((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_15MeshSceneArraysEEE" & 0x8000000000000000) != 0)
      {
        float32x2_t v133 = (unsigned __int8 *)((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_15MeshSceneArraysEEE" & 0x7FFFFFFFFFFFFFFFLL);
        uint64_t v134 = 5381;
        do
        {
          unint64_t v132 = v134;
          unsigned int v135 = *v133++;
          uint64_t v134 = (33 * v134) ^ v135;
        }
        while (v135);
      }
      uint64_t v136 = (uint64_t)&v358[186 * v36 + 5];
      uint64_t v137 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**((void **)a2 + 5) + 32))(*((void *)a2 + 5), 64, 8);
      *(void *)uint64_t v137 = &unk_26E71BDF8;
      *(void *)(v137 + 16) = 0;
      *(void *)(v137 + 8) = 0;
      *(void *)(v137 + 40) = 0;
      *(void *)(v137 + 48) = 0;
      *(void *)(v137 + 32) = 0;
      *(_DWORD *)(v137 + 56) = 0;
      *((void *)&v371[1] + 1) = 0;
      *(void *)&v371[2] = 0;
      v371[0] = 0uLL;
      *(_DWORD *)(v137 + 24) = 3;
      LODWORD(v371[1]) = 3;
      re::DynamicOverflowArray<re::DynamicArray<re::CameraView> const**,2ul>::operator=(v137 + 8, v136);
      re::DynamicOverflowArray<re::DynamicArray<re::CameraView> const**,2ul>::operator=(v136, (uint64_t)v371);
      __n128 v138 = *(re **)&v371[0];
      if (*(void *)&v371[0] && (v371[1] & 1) == 0) {
        __n128 v138 = (re *)(*(uint64_t (**)(void))(**(void **)&v371[0] + 40))();
      }
      unint64_t v139 = (((v122 + (v131 << 6) + (v131 >> 2)) ^ v131) - 0x61C8864680B583E9 + (v132 << 6) + (v132 >> 2)) ^ v132;
      float32x2_t v140 = v358;
      float32x2_t v141 = &v358[186 * v36];
      __n128 v142 = *(void **)(v137 + 48);
      *(void *)(v137 + 48) = v141[10];
      v141[10] = v142;
      ++*(_DWORD *)(v137 + 56);
      ++*((_DWORD *)v141 + 22);
      unint64_t v143 = *v354;
      if (!*v354
        || (unint64_t v143 = v139 % *((unsigned int *)a2 + 30),
            uint64_t v144 = *(unsigned int *)(*((void *)a2 + 13) + 4 * v143),
            v144 == 0x7FFFFFFF))
      {
LABEL_137:
        uint64_t v146 = *((unsigned int *)a2 + 33);
        if (v146 == 0x7FFFFFFF)
        {
          uint64_t v146 = *((unsigned int *)a2 + 32);
          int v147 = v146;
          if (v146 == *((_DWORD *)a2 + 30))
          {
            re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity((uint64_t)v354, 2 * *((_DWORD *)a2 + 31));
            unint64_t v143 = v139 % *((unsigned int *)a2 + 30);
            int v147 = *((_DWORD *)a2 + 32);
          }
          *((_DWORD *)a2 + 32) = v147 + 1;
          uint64_t v148 = *((void *)a2 + 14);
          int v149 = *(_DWORD *)(v148 + 24 * v146);
        }
        else
        {
          uint64_t v148 = *((void *)a2 + 14);
          int v149 = *(_DWORD *)(v148 + 24 * v146);
          *((_DWORD *)a2 + 33) = v149 & 0x7FFFFFFF;
        }
        uint64_t v150 = 24 * v146;
        *(_DWORD *)(v148 + v150) = v149 | 0x80000000;
        *(_DWORD *)(*((void *)a2 + 14) + v150) = *(_DWORD *)(*((void *)a2 + 14) + 24 * v146) & 0x80000000 | *(_DWORD *)(*((void *)a2 + 13) + 4 * v143);
        *(void *)(*((void *)a2 + 14) + 24 * v146 + 8) = v139;
        *(void *)(*((void *)a2 + 14) + 24 * v146 + 16) = v137;
        *(_DWORD *)(*((void *)a2 + 13) + 4 * v143) = v146;
        ++*((_DWORD *)a2 + 31);
        ++*((_DWORD *)a2 + 34);
        int32x4_t v151 = (uint64_t *)(*((void *)a2 + 14) + 24 * v146 + 16);
        float32x2_t v140 = v358;
      }
      else
      {
        uint64_t v145 = *((void *)a2 + 14);
        while (*(void *)(v145 + 24 * v144 + 8) != v139)
        {
          LODWORD(v144) = *(_DWORD *)(v145 + 24 * v144) & 0x7FFFFFFF;
          if (v144 == 0x7FFFFFFF) {
            goto LABEL_137;
          }
        }
        int32x4_t v151 = (uint64_t *)(v145 + 24 * v144 + 16);
      }
      uint64_t v350 = *v151;
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9BAC0, memory_order_acquire) & 1) == 0)
      {
        __n128 v138 = (re *)__cxa_guard_acquire(&qword_26AF9BAC0);
        if (v138)
        {
          qword_26AF9BAB8 = re::hashString((re *)"MeshDeformations", v296);
          __cxa_guard_release(&qword_26AF9BAC0);
        }
      }
      uint64_t v152 = (uint64_t)v140[186 * v36 + 12];
      if (v152) {
        break;
      }
      uint64_t v349 = 0;
      uint64_t v165 = v358;
LABEL_166:
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9BAD0, memory_order_acquire) & 1) == 0)
      {
        __n128 v138 = (re *)__cxa_guard_acquire(&qword_26AF9BAD0);
        if (v138)
        {
          qword_26AF9BAC8 = re::hashString((re *)"VFXScenes", v297);
          __cxa_guard_release(&qword_26AF9BAD0);
        }
      }
      uint64_t v172 = (uint64_t)v165[186 * v36 + 13];
      uint64_t v345 = v109;
      if (v172)
      {
        unint64_t v173 = (unint64_t)"N2re27RenderGraphDataStoreWrapperINS_11BucketArrayINS_12DynamicArrayINS_8VFXSceneEEELm4EEEEE";
        if (((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_11BucketArrayINS_12DynamicArrayINS_8VFXSceneEEELm4EEEEE" & 0x8000000000000000) != 0)
        {
          v174 = (unsigned __int8 *)((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_11BucketArrayINS_12DynamicAr"
                                                       "rayINS_8VFXSceneEEELm4EEEEE" & 0x7FFFFFFFFFFFFFFFLL);
          uint64_t v175 = 5381;
          do
          {
            unint64_t v173 = v175;
            unsigned int v176 = *v174++;
            uint64_t v175 = (33 * v175) ^ v176;
          }
          while (v176);
        }
        unint64_t v177 = qword_26AF9BAC8;
        float32x4_t v178 = re::globalAllocators(v138);
        uint64_t v179 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v178[2] + 32))(v178[2], 64, 8);
        *(void *)uint64_t v179 = &unk_26E71BE78;
        *(void *)(v179 + 16) = 0;
        *(void *)(v179 + 8) = 0;
        *(void *)(v179 + 40) = 0;
        *(void *)(v179 + 48) = 0;
        *(void *)(v179 + 32) = 0;
        *(_DWORD *)(v179 + 56) = 0;
        *((void *)&v371[1] + 1) = 0;
        *(void *)&v371[2] = 0;
        v371[0] = 0uLL;
        *(_DWORD *)(v179 + 24) = 3;
        LODWORD(v371[1]) = 3;
        re::DynamicOverflowArray<re::DynamicArray<re::CameraView> const**,2ul>::operator=(v179 + 8, v172);
        re::DynamicOverflowArray<re::DynamicArray<re::CameraView> const**,2ul>::operator=(v172, (uint64_t)v371);
        if (*(void *)&v371[0] && (v371[1] & 1) == 0) {
          (*(void (**)(void))(**(void **)&v371[0] + 40))();
        }
        unint64_t v180 = (((v122 + (v177 << 6) + (v177 >> 2)) ^ v177) - 0x61C8864680B583E9 + (v173 << 6) + (v173 >> 2)) ^ v173;
        uint64_t v181 = *(void *)(v179 + 48);
        *(void *)(v179 + 48) = *(void *)(v172 + 40);
        *(void *)(v172 + 40) = v181;
        ++*(_DWORD *)(v179 + 56);
        ++*(_DWORD *)(v172 + 48);
        unint64_t v182 = *v356;
        if (!*v356) {
          goto LABEL_181;
        }
        unint64_t v182 = v180 % *((unsigned int *)a2 + 18);
        uint64_t v183 = *(unsigned int *)(*((void *)a2 + 7) + 4 * v182);
        if (v183 == 0x7FFFFFFF) {
          goto LABEL_181;
        }
        uint64_t v184 = *((void *)a2 + 8);
        uint64_t v185 = v358;
        if (*(void *)(v184 + 24 * v183 + 8) == v180)
        {
LABEL_179:
          float32x2_t v186 = (void *)(v184 + 24 * v183 + 16);
        }
        else
        {
          while (1)
          {
            LODWORD(v183) = *(_DWORD *)(v184 + 24 * v183) & 0x7FFFFFFF;
            if (v183 == 0x7FFFFFFF) {
              break;
            }
            if (*(void *)(v184 + 24 * v183 + 8) == v180) {
              goto LABEL_179;
            }
          }
LABEL_181:
          uint64_t v188 = *((unsigned int *)a2 + 21);
          if (v188 == 0x7FFFFFFF)
          {
            uint64_t v188 = *((unsigned int *)a2 + 20);
            int v189 = v188;
            if (v188 == *((_DWORD *)a2 + 18))
            {
              re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity((uint64_t)v356, 2 * *((_DWORD *)a2 + 19));
              unint64_t v182 = v180 % *((unsigned int *)a2 + 18);
              int v189 = *((_DWORD *)a2 + 20);
            }
            *((_DWORD *)a2 + 20) = v189 + 1;
            uint64_t v190 = *((void *)a2 + 8);
            int v191 = *(_DWORD *)(v190 + 24 * v188);
          }
          else
          {
            uint64_t v190 = *((void *)a2 + 8);
            int v191 = *(_DWORD *)(v190 + 24 * v188);
            *((_DWORD *)a2 + 21) = v191 & 0x7FFFFFFF;
          }
          uint64_t v192 = 24 * v188;
          *(_DWORD *)(v190 + v192) = v191 | 0x80000000;
          *(_DWORD *)(*((void *)a2 + 8) + v192) = *(_DWORD *)(*((void *)a2 + 8) + 24 * v188) & 0x80000000 | *(_DWORD *)(*((void *)a2 + 7) + 4 * v182);
          *(void *)(*((void *)a2 + 8) + 24 * v188 + 8) = v180;
          *(void *)(*((void *)a2 + 8) + 24 * v188 + 16) = v179;
          *(_DWORD *)(*((void *)a2 + 7) + 4 * v182) = v188;
          ++*((_DWORD *)a2 + 19);
          ++*((_DWORD *)a2 + 22);
          float32x2_t v186 = (void *)(*((void *)a2 + 8) + 24 * v188 + 16);
          uint64_t v185 = v358;
        }
        uint64_t v348 = *v186 + 8;
        unint64_t v187 = v357;
        goto LABEL_188;
      }
      uint64_t v348 = 0;
      unint64_t v187 = v357;
      uint64_t v185 = v358;
LABEL_188:
      unint64_t v193 = v187 + 464 * v36;
      unint64_t v194 = (re *)(*(uint64_t (**)(void))(**(void **)(v193 + 448) + 952))(*(void *)(v193 + 448));
      long long v347 = v194;
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9BAE0, memory_order_acquire) & 1) == 0)
      {
        unint64_t v194 = (re *)__cxa_guard_acquire(&qword_26AF9BAE0);
        if (v194)
        {
          qword_26AF9BAD8 = re::hashString((re *)"LightContext", v298);
          __cxa_guard_release(&qword_26AF9BAE0);
        }
      }
      unint64_t v195 = (unint64_t)"N2re27RenderGraphDataStoreWrapperINS_13LightContextsEEE";
      if (((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_13LightContextsEEE" & 0x8000000000000000) != 0)
      {
        unint64_t v196 = (unsigned __int8 *)((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_13LightContextsEEE" & 0x7FFFFFFFFFFFFFFFLL);
        uint64_t v197 = 5381;
        do
        {
          unint64_t v195 = v197;
          unsigned int v198 = *v196++;
          uint64_t v197 = (33 * v197) ^ v198;
        }
        while (v198);
      }
      unint64_t v199 = (((v122 + (qword_26AF9BAD8 << 6) + ((unint64_t)qword_26AF9BAD8 >> 2)) ^ qword_26AF9BAD8)
            - 0x61C8864680B583E9
            + (v195 << 6)
            + (v195 >> 2)) ^ v195;
      v200 = re::globalAllocators(v194);
      uint64_t v201 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v200[2] + 32))(v200[2], 304, 8);
      *(void *)uint64_t v201 = &unk_26E71BEB8;
      *(void *)(v201 + 8) = 0;
      *(void *)(v201 + 16) = 0;
      *(_DWORD *)(v201 + 24) = 1;
      *(void *)(v201 + 40) = 0;
      *(void *)(v201 + 48) = 0;
      *(void *)(v201 + 32) = 0;
      *(_DWORD *)(v201 + 56) = 0;
      re::BucketArray<RESubscriptionHandle,8ul>::swap(v201 + 8, (uint64_t)&v185[186 * v36 + 26]);
      unsigned int v202 = &v185[186 * v36];
      *(_DWORD *)(v201 + 96) = 0;
      *(_OWORD *)(v201 + 80) = 0u;
      *(_OWORD *)(v201 + 64) = 0u;
      *(void *)(v201 + 100) = 0x7FFFFFFFLL;
      re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)(v201 + 64), (uint64_t *)v202 + 33);
      *(void *)(v201 + 112) = 0;
      *(void *)(v201 + 120) = 0;
      *(void *)(v201 + 128) = 0;
      *(void *)(v201 + 112) = v202[39];
      v202[39] = 0;
      *(void *)(v201 + 120) = v202[40];
      v202[40] = 0;
      unint64_t v203 = *(void **)(v201 + 128);
      *(void *)(v201 + 128) = v202[41];
      v202[41] = v203;
      *(void *)(v201 + 136) = 0;
      *(void *)(v201 + 144) = 0;
      *(void *)(v201 + 152) = 0;
      *(void *)(v201 + 136) = v202[42];
      v202[42] = 0;
      *(void *)(v201 + 144) = v202[43];
      v202[43] = 0;
      v204 = *(void **)(v201 + 152);
      *(void *)(v201 + 152) = v202[44];
      v202[44] = v204;
      *(void *)(v201 + 160) = 0;
      *(void *)(v201 + 168) = 0;
      *(void *)(v201 + 176) = 0;
      *(void *)(v201 + 160) = v202[45];
      v202[45] = 0;
      *(void *)(v201 + 168) = v202[46];
      v202[46] = 0;
      uint64_t v205 = *(void **)(v201 + 176);
      *(void *)(v201 + 176) = v202[47];
      v202[47] = v205;
      *(void *)(v201 + 184) = 0;
      *(void *)(v201 + 192) = 0;
      *(void *)(v201 + 200) = 0;
      *(void *)(v201 + 184) = v202[48];
      v202[48] = 0;
      *(void *)(v201 + 192) = v202[49];
      v202[49] = 0;
      int v206 = *(void **)(v201 + 200);
      *(void *)(v201 + 200) = v202[50];
      v202[50] = v206;
      *(void *)(v201 + 208) = 0;
      *(void *)(v201 + 216) = 0;
      *(void *)(v201 + 224) = 0;
      *(void *)(v201 + 208) = v202[51];
      v202[51] = 0;
      *(void *)(v201 + 216) = v202[52];
      v202[52] = 0;
      uint64_t v207 = *(void **)(v201 + 224);
      *(void *)(v201 + 224) = v202[53];
      v202[53] = v207;
      *(void *)(v201 + 232) = 0;
      *(void *)(v201 + 240) = 0;
      *(void *)(v201 + 248) = 0;
      *(void *)(v201 + 232) = v202[54];
      v202[54] = 0;
      *(void *)(v201 + 240) = v202[55];
      v202[55] = 0;
      uint64_t v208 = *(void **)(v201 + 248);
      *(void *)(v201 + 248) = v202[56];
      v202[56] = v208;
      long long v209 = *(_OWORD *)(v202 + 57);
      *(unsigned char *)(v201 + 272) = *((unsigned char *)v202 + 472);
      *(_OWORD *)(v201 + 256) = v209;
      long long v210 = *((_OWORD *)v202 + 30);
      *(unsigned char *)(v201 + 296) = *((unsigned char *)v202 + 496);
      *(_OWORD *)(v201 + 280) = v210;
      unint64_t v211 = *v356;
      if (*v356)
      {
        unint64_t v211 = v199 % *((unsigned int *)a2 + 18);
        uint64_t v212 = *(unsigned int *)(*((void *)a2 + 7) + 4 * v211);
        if (v212 != 0x7FFFFFFF)
        {
          uint64_t v220 = *((void *)a2 + 8);
          v219 = v358;
          if (*(void *)(v220 + 24 * v212 + 8) == v199)
          {
LABEL_203:
            uint64_t v218 = (void *)(v220 + 24 * v212 + 16);
            goto LABEL_204;
          }
          while (1)
          {
            LODWORD(v212) = *(_DWORD *)(v220 + 24 * v212) & 0x7FFFFFFF;
            if (v212 == 0x7FFFFFFF) {
              break;
            }
            if (*(void *)(v220 + 24 * v212 + 8) == v199) {
              goto LABEL_203;
            }
          }
        }
      }
      uint64_t v213 = *((unsigned int *)a2 + 21);
      if (v213 == 0x7FFFFFFF)
      {
        uint64_t v213 = *((unsigned int *)a2 + 20);
        int v214 = v213;
        if (v213 == *((_DWORD *)a2 + 18))
        {
          re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity((uint64_t)v356, 2 * *((_DWORD *)a2 + 19));
          unint64_t v211 = v199 % *((unsigned int *)a2 + 18);
          int v214 = *((_DWORD *)a2 + 20);
        }
        *((_DWORD *)a2 + 20) = v214 + 1;
        uint64_t v215 = *((void *)a2 + 8);
        int v216 = *(_DWORD *)(v215 + 24 * v213);
      }
      else
      {
        uint64_t v215 = *((void *)a2 + 8);
        int v216 = *(_DWORD *)(v215 + 24 * v213);
        *((_DWORD *)a2 + 21) = v216 & 0x7FFFFFFF;
      }
      uint64_t v217 = 24 * v213;
      *(_DWORD *)(v215 + v217) = v216 | 0x80000000;
      *(_DWORD *)(*((void *)a2 + 8) + v217) = *(_DWORD *)(*((void *)a2 + 8) + 24 * v213) & 0x80000000 | *(_DWORD *)(*((void *)a2 + 7) + 4 * v211);
      *(void *)(*((void *)a2 + 8) + 24 * v213 + 8) = v199;
      *(void *)(*((void *)a2 + 8) + 24 * v213 + 16) = v201;
      *(_DWORD *)(*((void *)a2 + 7) + 4 * v211) = v213;
      ++*((_DWORD *)a2 + 19);
      ++*((_DWORD *)a2 + 22);
      uint64_t v218 = (void *)(*((void *)a2 + 8) + 24 * v213 + 16);
      v219 = v358;
LABEL_204:
      float32x4_t v221 = (void *)(v193 + 448);
      uint64_t v222 = *v218;
      long long v346 = (re::LightContexts *)(*v218 + 8);
      BOOL isEmpty = re::LightContexts::isEmpty(v346);
      uint64_t v224 = (unsigned char *)(v357 + 464 * v36);
      v224[456] = !isEmpty;
      v224[457] = *(unsigned char *)(v222 + 296);
      uint64_t v225 = &v219[186 * v36];
      v224[458] = *((unsigned char *)v225 + 1456);
      long long v355 = v225;
      v224[460] = *((unsigned char *)v225 + 616);
      uint64_t v344 = (*(uint64_t (**)(void))(**(void **)(v193 + 448) + 480))();
      uint64_t v226 = (*(uint64_t (**)(void))(**(void **)(v193 + 448) + 1112))();
      if (v226) {
        BOOL v227 = *(void *)(v226 + 16) != 0;
      }
      else {
        BOOL v227 = 0;
      }
      *(unsigned char *)(v357 + 464 * v36 + 459) = v227;
      v228 = v219[186 * v36 + 183];
      if (v228)
      {
        *(void *)&v371[0] = &unk_26E71BBC0;
        *((void *)&v371[0] + 1) = v228;
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9BAF0, memory_order_acquire) & 1) == 0
          && __cxa_guard_acquire(&qword_26AF9BAF0))
        {
          qword_26AF9BAE8 = re::hashString((re *)"IBLContextOverride", v299);
          __cxa_guard_release(&qword_26AF9BAF0);
        }
        unint64_t v229 = (unint64_t)"N2re23IBLContextOverrideScopeE";
        if (((unint64_t)"N2re23IBLContextOverrideScopeE" & 0x8000000000000000) != 0)
        {
          int8x16_t v230 = (unsigned __int8 *)((unint64_t)"N2re23IBLContextOverrideScopeE" & 0x7FFFFFFFFFFFFFFFLL);
          uint64_t v231 = 5381;
          do
          {
            unint64_t v229 = v231;
            unsigned int v232 = *v230++;
            uint64_t v231 = (33 * v231) ^ v232;
          }
          while (v232);
        }
        unint64_t v233 = (((v122 + (qword_26AF9BAE8 << 6) + ((unint64_t)qword_26AF9BAE8 >> 2)) ^ qword_26AF9BAE8)
              - 0x61C8864680B583E9
              + (v229 << 6)
              + (v229 >> 2)) ^ v229;
        uint64_t v226 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**((void **)a2 + 5) + 32))(*((void *)a2 + 5), 16, 8);
        uint64_t v234 = v226;
        *(void *)uint64_t v226 = &unk_26E71BBC0;
        *(void *)(v226 + 8) = *((void *)&v371[0] + 1);
        unint64_t v235 = *((void *)a2 + 12);
        if (!v235
          || (unint64_t v235 = v233 % *((unsigned int *)a2 + 30),
              uint64_t v236 = *(unsigned int *)(*((void *)a2 + 13) + 4 * v235),
              v236 == 0x7FFFFFFF))
        {
LABEL_217:
          uint64_t v238 = *((unsigned int *)a2 + 33);
          if (v238 == 0x7FFFFFFF)
          {
            uint64_t v238 = *((unsigned int *)a2 + 32);
            int v239 = v238;
            if (v238 == *((_DWORD *)a2 + 30))
            {
              re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity((uint64_t)v354, 2 * *((_DWORD *)a2 + 31));
              unint64_t v235 = v233 % *((unsigned int *)a2 + 30);
              int v239 = *((_DWORD *)a2 + 32);
            }
            *((_DWORD *)a2 + 32) = v239 + 1;
            uint64_t v240 = *((void *)a2 + 14);
            int v241 = *(_DWORD *)(v240 + 24 * v238);
          }
          else
          {
            uint64_t v240 = *((void *)a2 + 14);
            int v241 = *(_DWORD *)(v240 + 24 * v238);
            *((_DWORD *)a2 + 33) = v241 & 0x7FFFFFFF;
          }
          uint64_t v242 = 24 * v238;
          *(_DWORD *)(v240 + v242) = v241 | 0x80000000;
          *(_DWORD *)(*((void *)a2 + 14) + v242) = *(_DWORD *)(*((void *)a2 + 14) + 24 * v238) & 0x80000000 | *(_DWORD *)(*((void *)a2 + 13) + 4 * v235);
          *(void *)(*((void *)a2 + 14) + 24 * v238 + 8) = v233;
          *(void *)(*((void *)a2 + 14) + 24 * v238 + 16) = v234;
          *(_DWORD *)(*((void *)a2 + 13) + 4 * v235) = v238;
          ++*((_DWORD *)a2 + 31);
          ++*((_DWORD *)a2 + 34);
        }
        else
        {
          uint64_t v237 = *((void *)a2 + 14);
          while (*(void *)(v237 + 24 * v236 + 8) != v233)
          {
            LODWORD(v236) = *(_DWORD *)(v237 + 24 * v236) & 0x7FFFFFFF;
            if (v236 == 0x7FFFFFFF) {
              goto LABEL_217;
            }
          }
        }
      }
      unint64_t v243 = &v358[186 * v36];
      unint64_t v244 = v243[88];
      unint64_t v245 = v243[87];
      if (v244)
      {
        BOOL v246 = v244[5] != 0;
        if (!v245) {
          goto LABEL_227;
        }
      }
      else
      {
        BOOL v246 = 0;
        if (!v245)
        {
LABEL_227:
          BOOL v247 = 0;
          goto LABEL_228;
        }
      }
      BOOL v247 = v245[5] != 0;
LABEL_228:
      if (v246 || v247)
      {
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9BB00, memory_order_acquire) & 1) == 0)
        {
          uint64_t v226 = __cxa_guard_acquire(&qword_26AF9BB00);
          if (v226)
          {
            qword_26AF9BAF8 = re::hashString((re *)"TextInfo", v300);
            __cxa_guard_release(&qword_26AF9BB00);
          }
        }
        unint64_t v248 = (unint64_t)"N2re27RenderGraphDataStoreWrapperINS_8TextInfoEEE";
        if (((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_8TextInfoEEE" & 0x8000000000000000) != 0)
        {
          unint64_t v249 = (unsigned __int8 *)((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_8TextInfoEEE" & 0x7FFFFFFFFFFFFFFFLL);
          uint64_t v250 = 5381;
          do
          {
            unint64_t v248 = v250;
            unsigned int v251 = *v249++;
            uint64_t v250 = (33 * v250) ^ v251;
          }
          while (v251);
        }
        unint64_t v252 = (((v122 + (qword_26AF9BAF8 << 6) + ((unint64_t)qword_26AF9BAF8 >> 2)) ^ qword_26AF9BAF8)
              - 0x61C8864680B583E9
              + (v248 << 6)
              + (v248 >> 2)) ^ v248;
        v253 = re::globalAllocators((re *)v226);
        uint64_t v254 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v253[2] + 32))(v253[2], 24, 8);
        v254[1] = 0;
        v254[2] = 0;
        *uint64_t v254 = &unk_26E71BEF8;
        unint64_t v255 = *v356;
        if (!*v356
          || (unint64_t v255 = v252 % *((unsigned int *)a2 + 18),
              uint64_t v256 = *(unsigned int *)(*((void *)a2 + 7) + 4 * v255),
              v256 == 0x7FFFFFFF))
        {
LABEL_240:
          uint64_t v259 = *((unsigned int *)a2 + 21);
          if (v259 == 0x7FFFFFFF)
          {
            uint64_t v259 = *((unsigned int *)a2 + 20);
            int v260 = v259;
            if (v259 == *((_DWORD *)a2 + 18))
            {
              re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity((uint64_t)v356, 2 * *((_DWORD *)a2 + 19));
              unint64_t v255 = v252 % *((unsigned int *)a2 + 18);
              int v260 = *((_DWORD *)a2 + 20);
            }
            *((_DWORD *)a2 + 20) = v260 + 1;
            uint64_t v261 = *((void *)a2 + 8);
            int v262 = *(_DWORD *)(v261 + 24 * v259);
          }
          else
          {
            uint64_t v261 = *((void *)a2 + 8);
            int v262 = *(_DWORD *)(v261 + 24 * v259);
            *((_DWORD *)a2 + 21) = v262 & 0x7FFFFFFF;
          }
          uint64_t v263 = 24 * v259;
          *(_DWORD *)(v261 + v263) = v262 | 0x80000000;
          *(_DWORD *)(*((void *)a2 + 8) + v263) = *(_DWORD *)(*((void *)a2 + 8) + 24 * v259) & 0x80000000 | *(_DWORD *)(*((void *)a2 + 7) + 4 * v255);
          *(void *)(*((void *)a2 + 8) + 24 * v259 + 8) = v252;
          *(void *)(*((void *)a2 + 8) + 24 * v259 + 16) = v254;
          *(_DWORD *)(*((void *)a2 + 7) + 4 * v255) = v259;
          ++*((_DWORD *)a2 + 19);
          ++*((_DWORD *)a2 + 22);
          uint64_t v264 = *((void *)a2 + 8) + 24 * v259;
        }
        else
        {
          uint64_t v257 = *((void *)a2 + 8);
          while (*(void *)(v257 + 24 * v256 + 8) != v252)
          {
            LODWORD(v256) = *(_DWORD *)(v257 + 24 * v256) & 0x7FFFFFFF;
            if (v256 == 0x7FFFFFFF) {
              goto LABEL_240;
            }
          }
          uint64_t v264 = v257 + 24 * v256;
        }
        uint64_t v265 = *(void *)(v264 + 16);
        if (v246) {
          *(void *)(v265 + 16) = v244;
        }
        float32x4_t v258 = (void *)(v265 + 8);
        if (v247) {
          *float32x4_t v258 = v245;
        }
      }
      else
      {
        float32x4_t v258 = 0;
      }
      float v266 = v355 + 63;
      v267 = (void *)(v357 + 464 * v36);
      v267[7] = v351;
      v267[1] = v346;
      v267[2] = (*(uint64_t (**)(void))(*(void *)*v221 + 408))();
      v267[3] = v347;
      unint64_t v268 = v267 + 2;
      v268[2] = v350 + 8;
      this = 464;
      v268[3] = v349;
      v268[4] = v348;
      v268[7] = v258;
      v268[9] = (*(uint64_t (**)(void))(*(void *)*v221 + 800))();
      uint64_t v269 = v358;
      uint64_t v270 = &v358[186 * v36];
      re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)(v268 + 10), (uint64_t)(v270 + 16));
      re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)(v268 + 15), (uint64_t)(v270 + 21));
      v268[20] = v270[2];
      long long v272 = *((_OWORD *)v270 + 7);
      unint64_t v24 = v357;
      *(_OWORD *)(v268 + 21) = v272;
      float32x4_t v273 = v268 + 23;
      uint64_t v28 = (re::RenderFrame *)((char *)a2 + 32);
      if (v268 + 23 != v355 + 63)
      {
        uint64_t v274 = *v273;
        if (*v273 && *v266 && v274 != *v266) {
          goto LABEL_323;
        }
        v371[0] = 0uLL;
        LODWORD(v371[1]) = 1;
        unint64_t v275 = v357 + 464 * v36;
        *((void *)&v371[1] + 1) = 0;
        *(void *)&v371[2] = 0;
        int v278 = *(_DWORD *)(v275 + 216);
        unint64_t v276 = (_DWORD *)(v275 + 216);
        int v277 = v278;
        if (v278)
        {
          if (*(void *)(v357 + 464 * v36 + 208))
          {
            re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::move((uint64_t)v371, (uint64_t)(v268 + 23));
          }
          else
          {
            *(void *)&v371[0] = v274;
            *unint64_t v276 = v277 + 2;
            LODWORD(v371[1]) = 3;
          }
        }
        else
        {
          LODWORD(v371[1]) = 3;
          re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::swap((uint64_t *)v371, v268 + 23);
        }
        re::DynamicOverflowArray<re::DynamicArray<re::CameraView> const**,2ul>::operator=((uint64_t)(v268 + 23), (uint64_t)v266);
        re::DynamicOverflowArray<re::DynamicArray<re::CameraView> const**,2ul>::operator=((uint64_t)v266, (uint64_t)v371);
        if (*(void *)&v371[0] && (v371[1] & 1) == 0) {
          (*(void (**)(void))(**(void **)&v371[0] + 40))();
        }
        unint64_t v279 = v357 + 464 * v36;
        uint64_t v269 = v358;
        float32x4_t v280 = &v358[186 * v36];
        float32x4_t v281 = *(void **)(v279 + 240);
        *(void *)(v279 + 240) = v280[68];
        v280[68] = v281;
        ++*(_DWORD *)(v279 + 248);
        ++*((_DWORD *)v280 + 138);
      }
      unint64_t v282 = v357 + 464 * v36;
      float32x4_t v283 = &v269[186 * v36];
      if ((void **)(v282 + 200) != v283 + 63)
      {
        v284 = (uint64_t *)(v282 + 256);
        float32x4_t v285 = v283 + 70;
        uint64_t v286 = *(void *)(v282 + 256);
        if (v286 && *v285 && v286 != *v285) {
          goto LABEL_324;
        }
        v371[0] = 0uLL;
        LODWORD(v371[1]) = 1;
        unint64_t v287 = v357 + 464 * v36;
        *((void *)&v371[1] + 1) = 0;
        *(void *)&v371[2] = 0;
        int v288 = *(_DWORD *)(v287 + 272);
        if (v288)
        {
          if (*(void *)(v357 + 464 * v36 + 264))
          {
            re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::move((uint64_t)v371, (uint64_t)v284);
          }
          else
          {
            *(void *)&v371[0] = v286;
            *(_DWORD *)(v287 + 272) = v288 + 2;
            LODWORD(v371[1]) = 3;
          }
        }
        else
        {
          LODWORD(v371[1]) = 3;
          re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::swap((uint64_t *)v371, v284);
        }
        re::DynamicOverflowArray<re::DynamicArray<re::CameraView> const**,2ul>::operator=((uint64_t)v284, (uint64_t)v285);
        re::DynamicOverflowArray<re::DynamicArray<re::CameraView> const**,2ul>::operator=((uint64_t)v285, (uint64_t)v371);
        if (*(void *)&v371[0] && (v371[1] & 1) == 0) {
          (*(void (**)(void))(**(void **)&v371[0] + 40))();
        }
        unint64_t v289 = v357 + 464 * v36;
        uint64_t v269 = v358;
        float32x4_t v290 = &v358[186 * v36];
        float v291 = *(void **)(v289 + 296);
        *(void *)(v289 + 296) = v290[75];
        v290[75] = v291;
        ++*(_DWORD *)(v289 + 304);
        ++*((_DWORD *)v290 + 152);
      }
      unint64_t v292 = v357 + 464 * v36;
      *(unsigned char *)(v292 + 312) = *((unsigned char *)v355 + 616);
      *(void *)(v292 + 320) = (*(uint64_t (**)(void))(*(void *)*v221 + 840))(*v221);
      float v293 = &v269[186 * v36];
      *(void *)(v292 + 328) = v293[3];
      *(void *)(v292 + 336) = (*(uint64_t (**)(void))(*(void *)*v221 + 1016))();
      *(void *)(v292 + 344) = v293[4];
      re::FixedArray<float>::operator=((uint64_t *)(v292 + 352), v293 + 78);
      re::HashTable<unsigned long long,re::PlanarReceiverEntry,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::operator=(v292 + 376, v293 + 81);
      *(void *)(v292 + 424) = (*(uint64_t (**)(void))(*(void *)*v221 + 1048))();
      *(void *)(v292 + 432) = v344;
      if (*v268) {
        re::IBLContext::updateRenderSceneContextFlags((re::IBLContext *)*v268, (BOOL *)(v357 + 464 * v36 + 461), (BOOL *)(v357 + 464 * v36 + 462));
      }
      long long v59 = (StringID *)v342;
      (*(void (**)(uint64_t, char ***, void *, unint64_t, char *))(*(void *)v342 + 64))(v342, v345, v341, v357 + 464 * v36++, v353);
      uint64_t v23 = v352;
      if (v36 == v340) {
        goto LABEL_295;
      }
    }
    unint64_t v153 = (unint64_t)"N2re27RenderGraphDataStoreWrapperINS_11BucketArrayINS_25MeshDeformationCollectionELm4EEEEE";
    if (((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_11BucketArrayINS_25MeshDeformationCollectionELm4EEEEE" & 0x8000000000000000) != 0)
    {
      float32x4_t v154 = (unsigned __int8 *)((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_11BucketArrayINS_25MeshDeformati"
                                                   "onCollectionELm4EEEEE" & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v155 = 5381;
      do
      {
        unint64_t v153 = v155;
        unsigned int v156 = *v154++;
        uint64_t v155 = (33 * v155) ^ v156;
      }
      while (v156);
    }
    unint64_t v157 = qword_26AF9BAB8;
    int32x4_t v158 = re::globalAllocators(v138);
    uint64_t v159 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v158[2] + 32))(v158[2], 64, 8);
    *(void *)uint64_t v159 = &unk_26E71BE38;
    *(void *)(v159 + 16) = 0;
    *(void *)(v159 + 8) = 0;
    *(void *)(v159 + 40) = 0;
    *(void *)(v159 + 48) = 0;
    *(void *)(v159 + 32) = 0;
    *(_DWORD *)(v159 + 56) = 0;
    *((void *)&v371[1] + 1) = 0;
    *(void *)&v371[2] = 0;
    v371[0] = 0uLL;
    *(_DWORD *)(v159 + 24) = 3;
    LODWORD(v371[1]) = 3;
    re::DynamicOverflowArray<re::DynamicArray<re::CameraView> const**,2ul>::operator=(v159 + 8, v152);
    re::DynamicOverflowArray<re::DynamicArray<re::CameraView> const**,2ul>::operator=(v152, (uint64_t)v371);
    __n128 v138 = *(re **)&v371[0];
    if (*(void *)&v371[0] && (v371[1] & 1) == 0) {
      __n128 v138 = (re *)(*(uint64_t (**)(void))(**(void **)&v371[0] + 40))();
    }
    unint64_t v160 = (((v122 + (v157 << 6) + (v157 >> 2)) ^ v157) - 0x61C8864680B583E9 + (v153 << 6) + (v153 >> 2)) ^ v153;
    uint64_t v161 = *(void *)(v159 + 48);
    *(void *)(v159 + 48) = *(void *)(v152 + 40);
    *(void *)(v152 + 40) = v161;
    ++*(_DWORD *)(v159 + 56);
    ++*(_DWORD *)(v152 + 48);
    unint64_t v162 = *v356;
    if (!*v356
      || (unint64_t v162 = v160 % *((unsigned int *)a2 + 18),
          uint64_t v163 = *(unsigned int *)(*((void *)a2 + 7) + 4 * v162),
          v163 == 0x7FFFFFFF))
    {
LABEL_159:
      uint64_t v167 = *((unsigned int *)a2 + 21);
      if (v167 == 0x7FFFFFFF)
      {
        uint64_t v167 = *((unsigned int *)a2 + 20);
        int v168 = v167;
        if (v167 == *((_DWORD *)a2 + 18))
        {
          re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity((uint64_t)v356, 2 * *((_DWORD *)a2 + 19));
          unint64_t v162 = v160 % *((unsigned int *)a2 + 18);
          int v168 = *((_DWORD *)a2 + 20);
        }
        *((_DWORD *)a2 + 20) = v168 + 1;
        uint64_t v169 = *((void *)a2 + 8);
        int v170 = *(_DWORD *)(v169 + 24 * v167);
      }
      else
      {
        uint64_t v169 = *((void *)a2 + 8);
        int v170 = *(_DWORD *)(v169 + 24 * v167);
        *((_DWORD *)a2 + 21) = v170 & 0x7FFFFFFF;
      }
      uint64_t v171 = 24 * v167;
      *(_DWORD *)(v169 + v171) = v170 | 0x80000000;
      *(_DWORD *)(*((void *)a2 + 8) + v171) = *(_DWORD *)(*((void *)a2 + 8) + 24 * v167) & 0x80000000 | *(_DWORD *)(*((void *)a2 + 7) + 4 * v162);
      *(void *)(*((void *)a2 + 8) + 24 * v167 + 8) = v160;
      *(void *)(*((void *)a2 + 8) + 24 * v167 + 16) = v159;
      *(_DWORD *)(*((void *)a2 + 7) + 4 * v162) = v167;
      ++*((_DWORD *)a2 + 19);
      ++*((_DWORD *)a2 + 22);
      int8x16_t v166 = (void *)(*((void *)a2 + 8) + 24 * v167 + 16);
      uint64_t v165 = v358;
    }
    else
    {
      uint64_t v164 = *((void *)a2 + 8);
      uint64_t v165 = v358;
      while (*(void *)(v164 + 24 * v163 + 8) != v160)
      {
        LODWORD(v163) = *(_DWORD *)(v164 + 24 * v163) & 0x7FFFFFFF;
        if (v163 == 0x7FFFFFFF) {
          goto LABEL_159;
        }
      }
      int8x16_t v166 = (void *)(v164 + 24 * v163 + 16);
    }
    uint64_t v349 = *v166 + 8;
    goto LABEL_166;
  }
LABEL_295:
  if (*(unsigned char *)(v23 + 144))
  {
    (*(void (**)(StringID *, void *, re::RenderFrame *, re *))(*(void *)&v59->var0 + 72))(v59, v341, a2, v28);
  }
  else
  {
    var1 = (re::RenderGraphManager *)v59[15].var1;
    uint64_t v302 = re::AssetHandle::asset<re::RenderGraphAsset>((re::RenderGraphAsset *)&v59[37].var1);
    re::RenderGraphManager::addProviderInternal(var1, "Camera", (const re::RenderGraphProviderBase *)(v302 + 8), 0, 0, (uint64_t)v371);
    long long v303 = v371[0];
    *(void *)&v371[0] = 0;
    *((void *)&v371[0] + 1) = "";
    long long v304 = v59[40].var1;
    v59[40].var1 = (char *)v303;
    unint64_t v305 = v303 & 0xFFFFFFFFFFFFFFFELL | v304 & 1;
    uint64_t v306 = *(void *)&v59[41].var0;
    *(void *)&v59[41].var0 = *((void *)&v303 + 1);
    *(void *)char v375 = v305;
    *(void *)&v375[8] = v306;
    re::StringID::destroyString((re::StringID *)v375);
    v59[41].var1 = *(char **)&v371[1];
    re::StringID::destroyString((re::StringID *)v371);
    float v307 = (re::RenderGraphManager *)v59[15].var1;
    uint64_t v308 = re::AssetHandle::asset<re::RenderGraphAsset>((re::RenderGraphAsset *)&v59[39]);
    re::RenderGraphManager::addProviderInternal(v307, "PostProcess", (const re::RenderGraphProviderBase *)(v308 + 8), 0, 0, (uint64_t)v371);
    long long v309 = v371[0];
    *(void *)&v371[0] = 0;
    *((void *)&v371[0] + 1) = "";
    uint64_t v310 = *(void *)&v59[42].var0;
    *(void *)&v59[42].var0 = v309;
    unint64_t v311 = v309 & 0xFFFFFFFFFFFFFFFELL | v310 & 1;
    unsigned int v312 = v59[42].var1;
    v59[42].var1 = (char *)*((void *)&v309 + 1);
    *(void *)char v375 = v311;
    *(void *)&v375[8] = v312;
    re::StringID::destroyString((re::StringID *)v375);
    *(void *)&v59[43].var0 = *(void *)&v371[1];
    re::StringID::destroyString((re::StringID *)v371);
    re::RenderFrame::emitGraph(a2, "UploadMultiSceneConstants", "RenderFrame");
    uint64_t v315 = *(void *)(v23 + 24);
    if (v315)
    {
      float v316 = *(void **)(v23 + 32);
      uint64_t v317 = 464 * v315;
      do
      {
        re::RealityEmitterBase::emitDeformerGraph((uint64_t)v313, (uint64_t)v316, a2, (uint64_t)v28);
        re::RealityEmitterBase::emitVFXSimulationGraph(v318, v316, a2, (uint64_t)v28);
        v316 += 58;
        v317 -= 464;
      }
      while (v317);
    }
    uint64_t v319 = *(void *)(v23 + 104);
    if (v319 && *(void *)(v319 + 16)) {
      re::RenderFrame::emitGraph(a2, "MipmapGenerationContext", "RenderFrame");
    }
    uint64_t v320 = *(void *)(v23 + 112);
    if (v320 && *(void *)(v320 + 16)) {
      re::RenderFrame::emitGraph(a2, "BlurGenerationContext", "RenderFrame");
    }
    re::RealityEmitterBase::emitProbeWriteGraph(v313, a2, v314);
    re::RenderFrame::emitGraph(a2, "ProjectiveMeshShadow", "RenderFrame");
    LODWORD(v371[0]) = 0;
    uint64_t v322 = *(void *)(v23 + 24);
    if (v322)
    {
      uint64_t v323 = *(void *)(v23 + 32);
      uint64_t v324 = 464 * v322;
      do
      {
        re::RealityEmitterBase::emitSingleGraphShadows((uint64_t)v321, v323, a2, (uint64_t)v28, v371);
        v323 += 464;
        v324 -= 464;
      }
      while (v324);
      uint64_t v325 = *(void *)(v23 + 24);
      if (v325)
      {
        uint64_t v326 = *(re::Allocator ***)(v23 + 32);
        uint64_t v327 = 464 * v325;
        do
        {
          re::RealityEmitterBase::emitFilterMapGraph((uint64_t)v321, v326, (uint64_t)a2, (uint64_t)v28);
          v326 += 58;
          v327 -= 464;
        }
        while (v327);
        uint64_t v328 = *(void *)(v23 + 24);
        if (v328)
        {
          uint64_t v329 = *(void *)(v23 + 32);
          uint64_t v330 = 464 * v328;
          do
          {
            re::RealityEmitterBase::emitVisualProxyHighFidelityGraph((uint64_t)v321, v329, a2, v28);
            v329 += 464;
            v330 -= 464;
          }
          while (v330);
          uint64_t v332 = *(void *)(v23 + 24);
          if (v332)
          {
            uint64_t v333 = *(void *)(v23 + 32);
            uint64_t v334 = 464 * v332;
            do
            {
              re::RealityEmitterBase::emitCameraGraphs(v59, v341, v333, (uint64_t)a2, (uint64_t)v28, 1, v331);
              v333 += 464;
              v334 -= 464;
            }
            while (v334);
          }
        }
      }
    }
    re::RealityEmitterBase::pushPipelineCompilationDataToDataStore(v321, a2, v28);
    uint64_t v335 = (uint64_t)v59[15].var1;
    re::StringID::StringID((re::StringID *)v361, (StringID *)((char *)v59 + 648));
    v362 = v59[41].var1;
    re::RenderGraphManager::removeProvider(v335, (uint64_t)v361);
    re::StringID::destroyString((re::StringID *)v361);
    re::ProviderHandle::invalidate((re::ProviderHandle *)&v59[40].var1);
    uint64_t v336 = (uint64_t)v59[15].var1;
    re::StringID::StringID((re::StringID *)v359, v59 + 42);
    uint64_t v360 = *(void *)&v59[43].var0;
    re::RenderGraphManager::removeProvider(v336, (uint64_t)v359);
    re::StringID::destroyString((re::StringID *)v359);
    re::ProviderHandle::invalidate((re::ProviderHandle *)&v59[42]);
  }
  re::FixedArray<re::RenderFrameContextBuilder::Result::PerSceneData>::deinit(&v366);
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v369);
}

unint64_t re::getCombinedScopeHash(re *this, const char *a2)
{
  v7[2] = *MEMORY[0x263EF8340];
  size_t v4 = strlen((const char *)this);
  if (v4)
  {
    MurmurHash3_x64_128((uint64_t)this, v4, 0, v7);
    unint64_t v5 = (v7[1] - 0x61C8864680B583E9 + (v7[0] << 6) + (v7[0] >> 2)) ^ v7[0];
  }
  else
  {
    unint64_t v5 = 0;
  }
  return (unint64_t)&a2[64 * v5 - 0x61C8864680B583E9 + (v5 >> 2)] ^ v5;
}

uint64_t re::RenderGraphDataStore::add<re::RenderGraphDataPipeData>(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (unint64_t)"N2re23RenderGraphDataPipeDataE";
  if (((unint64_t)"N2re23RenderGraphDataPipeDataE" & 0x8000000000000000) != 0)
  {
    size_t v4 = (unsigned __int8 *)((unint64_t)"N2re23RenderGraphDataPipeDataE" & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v5 = 5381;
    do
    {
      unint64_t v3 = v5;
      unsigned int v6 = *v4++;
      uint64_t v5 = (33 * v5) ^ v6;
    }
    while (v6);
  }
  unint64_t v7 = (a2 + (v3 << 6) + (v3 >> 2) - 0x61C8864680B583E9) ^ v3;
  unsigned int v8 = (void *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 16, 8);
  unint64_t v9 = *(void *)(a1 + 64);
  *unsigned int v8 = &unk_26E71BCF0;
  v8[1] = 0;
  if (v9)
  {
    unint64_t v9 = v7 % *(unsigned int *)(a1 + 88);
    uint64_t v10 = *(unsigned int *)(*(void *)(a1 + 72) + 4 * v9);
    if (v10 != 0x7FFFFFFF)
    {
      uint64_t v17 = *(void *)(a1 + 80);
      if (*(void *)(v17 + 24 * v10 + 8) == v7)
      {
LABEL_15:
        uint64_t v16 = v17 + 24 * v10;
        return *(void *)(v16 + 16);
      }
      while (1)
      {
        LODWORD(v10) = *(_DWORD *)(v17 + 24 * v10) & 0x7FFFFFFF;
        if (v10 == 0x7FFFFFFF) {
          break;
        }
        if (*(void *)(v17 + 24 * v10 + 8) == v7) {
          goto LABEL_15;
        }
      }
    }
  }
  uint64_t v11 = *(unsigned int *)(a1 + 100);
  if (v11 == 0x7FFFFFFF)
  {
    uint64_t v11 = *(unsigned int *)(a1 + 96);
    int v12 = v11;
    if (v11 == *(_DWORD *)(a1 + 88))
    {
      re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(a1 + 64, 2 * *(_DWORD *)(a1 + 92));
      LODWORD(v9) = v7 % *(unsigned int *)(a1 + 88);
      int v12 = *(_DWORD *)(a1 + 96);
    }
    *(_DWORD *)(a1 + 96) = v12 + 1;
    uint64_t v13 = *(void *)(a1 + 80);
    int v14 = *(_DWORD *)(v13 + 24 * v11);
  }
  else
  {
    uint64_t v13 = *(void *)(a1 + 80);
    int v14 = *(_DWORD *)(v13 + 24 * v11);
    *(_DWORD *)(a1 + 100) = v14 & 0x7FFFFFFF;
  }
  uint64_t v15 = 24 * v11;
  *(_DWORD *)(v13 + v15) = v14 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 80) + v15) = *(_DWORD *)(*(void *)(a1 + 80) + 24 * v11) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 72) + 4 * v9);
  *(void *)(*(void *)(a1 + 80) + 24 * v11 + 8) = v7;
  *(void *)(*(void *)(a1 + 80) + 24 * v11 + 16) = v8;
  *(_DWORD *)(*(void *)(a1 + 72) + 4 * v9) = v11;
  ++*(_DWORD *)(a1 + 92);
  ++*(_DWORD *)(a1 + 104);
  uint64_t v16 = *(void *)(a1 + 80) + 24 * v11;
  return *(void *)(v16 + 16);
}

void re::RealityEmitterBase::emitDeformerGraph(uint64_t a1, uint64_t a2, re::RenderFrame *a3, uint64_t a4)
{
  uint64_t v105 = *MEMORY[0x263EF8340];
  unsigned int v6 = *(re **)(*((void *)a3 + 1) + 40);
  uint64_t ActiveDeformationData = re::DeformationManager::createActiveDeformationData(v6, *((void *)a3 + 46), *((void *)a3 + 47));
  uint64_t v98 = a2;
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(v8 + 40);
  if (v9)
  {
    for (unint64_t i = 0; i != v9; ++i)
    {
      uint64_t v11 = re::BucketArray<re::IBLContext,4ul>::operator[](v8, i);
      re::DeformationManager::addDeformations((re::RenderManager **)v6, v11, ActiveDeformationData);
    }
  }
  uint64_t v12 = *(void *)(v98 + 184);
  if (v12)
  {
    uint64_t v13 = *(void *)(v12 + 40);
    if (v13)
    {
      for (unint64_t j = 0; j != v13; ++j)
      {
        uint64_t v15 = re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[](v12, j);
        uint64_t v16 = *(void *)(v15 + 16);
        if (v16)
        {
          uint64_t v17 = 672 * v16;
          uint64_t v18 = (long long *)(*(void *)(v15 + 32) + 64);
          do
          {
            long long v19 = *(v18 - 1);
            long long v99 = *(v18 - 2);
            long long v100 = v19;
            long long v20 = *v18;
            long long v21 = v18[1];
            long long v22 = v18[3];
            long long v103 = v18[2];
            long long v104 = v22;
            long long v101 = v20;
            long long v102 = v21;
            re::DynamicArray<re::RigJoint>::add((_anonymous_namespace_ *)(ActiveDeformationData + 64), (uint64_t)&v99);
            v18 += 42;
            v17 -= 672;
          }
          while (v17);
        }
      }
    }
  }
  uint64_t v23 = *(void *)(v98 + 192);
  if (v23)
  {
    uint64_t v24 = *(void *)(v23 + 40);
    if (v24)
    {
      for (unint64_t k = 0; k != v24; ++k)
      {
        uint64_t v26 = re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[](v23, k);
        uint64_t v27 = *(void *)(v26 + 16);
        if (v27)
        {
          uint64_t v28 = *(_OWORD **)(v26 + 32);
          uint64_t v29 = 1360 * v27;
          do
          {
            long long v30 = v28[3];
            long long v99 = v28[2];
            long long v100 = v30;
            long long v31 = v28[4];
            long long v32 = v28[5];
            long long v33 = v28[7];
            long long v103 = v28[6];
            long long v104 = v33;
            long long v101 = v31;
            long long v102 = v32;
            re::DynamicArray<re::RigJoint>::add((_anonymous_namespace_ *)(ActiveDeformationData + 64), (uint64_t)&v99);
            long long v34 = v28[45];
            long long v99 = v28[44];
            long long v100 = v34;
            long long v35 = v28[46];
            long long v36 = v28[47];
            long long v37 = v28[49];
            long long v103 = v28[48];
            long long v104 = v37;
            long long v101 = v35;
            long long v102 = v36;
            re::DynamicArray<re::RigJoint>::add((_anonymous_namespace_ *)(ActiveDeformationData + 64), (uint64_t)&v99);
            v28 += 85;
            v29 -= 1360;
          }
          while (v29);
        }
      }
    }
  }
  uint64_t v38 = *(void *)(v98 + 240);
  if (v38)
  {
    for (unint64_t m = 0; m != v38; ++m)
    {
      uint64_t v40 = re::BucketArray<unsigned long,4ul>::operator[](v98 + 200, m);
      uint64_t v41 = *(void *)(*(void *)v40 + 16);
      if (v41)
      {
        uint64_t v42 = 672 * v41;
        unint64_t v43 = (long long *)(*(void *)(*(void *)v40 + 32) + 64);
        do
        {
          long long v44 = *(v43 - 1);
          long long v99 = *(v43 - 2);
          long long v100 = v44;
          long long v45 = *v43;
          long long v46 = v43[1];
          long long v47 = v43[3];
          long long v103 = v43[2];
          long long v104 = v47;
          long long v101 = v45;
          long long v102 = v46;
          re::DynamicArray<re::RigJoint>::add((_anonymous_namespace_ *)(ActiveDeformationData + 64), (uint64_t)&v99);
          v43 += 42;
          v42 -= 672;
        }
        while (v42);
      }
    }
  }
  uint64_t v48 = *(void *)(v98 + 296);
  if (v48)
  {
    for (unint64_t n = 0; n != v48; ++n)
    {
      uint64_t v50 = re::BucketArray<unsigned long,4ul>::operator[](v98 + 256, n);
      uint64_t v51 = *(void *)(*(void *)v50 + 16);
      if (v51)
      {
        unint64_t v52 = *(_OWORD **)(*(void *)v50 + 32);
        uint64_t v53 = 1360 * v51;
        do
        {
          long long v54 = v52[3];
          long long v99 = v52[2];
          long long v100 = v54;
          long long v55 = v52[4];
          long long v56 = v52[5];
          long long v57 = v52[7];
          long long v103 = v52[6];
          long long v104 = v57;
          long long v101 = v55;
          long long v102 = v56;
          re::DynamicArray<re::RigJoint>::add((_anonymous_namespace_ *)(ActiveDeformationData + 64), (uint64_t)&v99);
          long long v58 = v52[45];
          long long v99 = v52[44];
          long long v100 = v58;
          long long v59 = v52[46];
          long long v60 = v52[47];
          long long v61 = v52[49];
          long long v103 = v52[48];
          long long v104 = v61;
          long long v101 = v59;
          long long v102 = v60;
          re::DynamicArray<re::RigJoint>::add((_anonymous_namespace_ *)(ActiveDeformationData + 64), (uint64_t)&v99);
          v52 += 85;
          v53 -= 1360;
        }
        while (v53);
      }
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9BB10, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9BB10))
  {
    qword_26AF9BB08 = re::hashString((re *)"Deformer", v96);
    __cxa_guard_release(&qword_26AF9BB10);
  }
  unint64_t v62 = qword_26AF9BB08;
  unint64_t v63 = (re *)strlen(*(const char **)(v98 + 56));
  if (v63)
  {
    unint64_t v63 = (re *)MurmurHash3_x64_128(*(void *)(v98 + 56), (int)v63, 0, (unint64_t *)&v99);
    unint64_t v64 = ((*((void *)&v99 + 1) - 0x61C8864680B583E9 + ((void)v99 << 6) + ((unint64_t)v99 >> 2)) ^ v99)
        - 0x61C8864680B583E9;
  }
  else
  {
    unint64_t v64 = 0x9E3779B97F4A7C17;
  }
  unint64_t v65 = ((v62 >> 2) + (v62 << 6) + v64) ^ v62;
  if (*(unsigned char *)(v98 + 444))
  {
    unint64_t v66 = (unint64_t)"N2re36SimplifiedMeshBufferDeformationIndexE";
    if (((unint64_t)"N2re36SimplifiedMeshBufferDeformationIndexE" & 0x8000000000000000) != 0)
    {
      uint64_t v67 = (unsigned __int8 *)((unint64_t)"N2re36SimplifiedMeshBufferDeformationIndexE" & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v68 = 5381;
      do
      {
        unint64_t v66 = v68;
        unsigned int v69 = *v67++;
        uint64_t v68 = (33 * v68) ^ v69;
      }
      while (v69);
    }
    unint64_t v70 = (v65 - 0x61C8864680B583E9 + (v66 << 6) + (v66 >> 2)) ^ v66;
    uint64_t v71 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a4 + 8) + 32))(*(void *)(a4 + 8), 16, 8);
    unint64_t v63 = (re *)(a4 + 64);
    unint64_t v72 = *(void *)(a4 + 64);
    int v73 = *(unsigned __int8 *)(v98 + 445);
    *(void *)uint64_t v71 = &unk_26E71BF38;
    *(_DWORD *)(v71 + 8) = v73;
    if (v72)
    {
      unint64_t v72 = v70 % *(unsigned int *)(a4 + 88);
      uint64_t v74 = *(unsigned int *)(*(void *)(a4 + 72) + 4 * v72);
      if (v74 != 0x7FFFFFFF)
      {
        uint64_t v95 = *(void *)(a4 + 80);
        if (*(void *)(v95 + 24 * v74 + 8) == v70) {
          goto LABEL_46;
        }
        while (1)
        {
          LODWORD(v74) = *(_DWORD *)(v95 + 24 * v74) & 0x7FFFFFFF;
          if (v74 == 0x7FFFFFFF) {
            break;
          }
          if (*(void *)(v95 + 24 * v74 + 8) == v70) {
            goto LABEL_46;
          }
        }
      }
    }
    uint64_t v75 = *(unsigned int *)(a4 + 100);
    if (v75 == 0x7FFFFFFF)
    {
      uint64_t v75 = *(unsigned int *)(a4 + 96);
      int v76 = v75;
      if (v75 == *(_DWORD *)(a4 + 88))
      {
        re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity((uint64_t)v63, 2 * *(_DWORD *)(a4 + 92));
        LODWORD(v72) = v70 % *(unsigned int *)(a4 + 88);
        int v76 = *(_DWORD *)(a4 + 96);
      }
      *(_DWORD *)(a4 + 96) = v76 + 1;
      uint64_t v77 = *(void *)(a4 + 80);
      int v78 = *(_DWORD *)(v77 + 24 * v75);
    }
    else
    {
      uint64_t v77 = *(void *)(a4 + 80);
      int v78 = *(_DWORD *)(v77 + 24 * v75);
      *(_DWORD *)(a4 + 100) = v78 & 0x7FFFFFFF;
    }
    uint64_t v79 = 24 * v75;
    *(_DWORD *)(v77 + v79) = v78 | 0x80000000;
    *(_DWORD *)(*(void *)(a4 + 80) + v79) = *(_DWORD *)(*(void *)(a4 + 80) + 24 * v75) & 0x80000000 | *(_DWORD *)(*(void *)(a4 + 72) + 4 * v72);
    *(void *)(*(void *)(a4 + 80) + 24 * v75 + 8) = v70;
    *(void *)(*(void *)(a4 + 80) + 24 * v75 + 16) = v71;
    *(_DWORD *)(*(void *)(a4 + 72) + 4 * v72) = v75;
    ++*(_DWORD *)(a4 + 92);
    ++*(_DWORD *)(a4 + 104);
  }
LABEL_46:
  unint64_t v80 = (unint64_t)"N2re27RenderGraphDataStoreWrapperIPNS_21ActiveDeformationDataEEE";
  if (((unint64_t)"N2re27RenderGraphDataStoreWrapperIPNS_21ActiveDeformationDataEEE" & 0x8000000000000000) != 0)
  {
    unint64_t v81 = (unsigned __int8 *)((unint64_t)"N2re27RenderGraphDataStoreWrapperIPNS_21ActiveDeformationDataEEE" & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v82 = 5381;
    do
    {
      unint64_t v80 = v82;
      unsigned int v83 = *v81++;
      uint64_t v82 = (33 * v82) ^ v83;
    }
    while (v83);
  }
  unint64_t v84 = (v65 - 0x61C8864680B583E9 + (v80 << 6) + (v80 >> 2)) ^ v80;
  unint64_t v85 = re::globalAllocators(v63);
  uint64_t v86 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v85[2] + 32))(v85[2], 16, 8);
  unint64_t v87 = *(void *)(a4 + 16);
  *uint64_t v86 = &unk_26E71BF60;
  v86[1] = ActiveDeformationData;
  if (v87)
  {
    unint64_t v87 = v84 % *(unsigned int *)(a4 + 40);
    uint64_t v88 = *(unsigned int *)(*(void *)(a4 + 24) + 4 * v87);
    if (v88 != 0x7FFFFFFF)
    {
      uint64_t v94 = *(void *)(a4 + 32);
      if (*(void *)(v94 + 24 * v88 + 8) == v84) {
        goto LABEL_57;
      }
      while (1)
      {
        LODWORD(v88) = *(_DWORD *)(v94 + 24 * v88) & 0x7FFFFFFF;
        if (v88 == 0x7FFFFFFF) {
          break;
        }
        if (*(void *)(v94 + 24 * v88 + 8) == v84) {
          goto LABEL_57;
        }
      }
    }
  }
  uint64_t v89 = *(unsigned int *)(a4 + 52);
  if (v89 == 0x7FFFFFFF)
  {
    uint64_t v89 = *(unsigned int *)(a4 + 48);
    int v90 = v89;
    if (v89 == *(_DWORD *)(a4 + 40))
    {
      re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(a4 + 16, 2 * *(_DWORD *)(a4 + 44));
      LODWORD(v87) = v84 % *(unsigned int *)(a4 + 40);
      int v90 = *(_DWORD *)(a4 + 48);
    }
    *(_DWORD *)(a4 + 48) = v90 + 1;
    uint64_t v91 = *(void *)(a4 + 32);
    int v92 = *(_DWORD *)(v91 + 24 * v89);
  }
  else
  {
    uint64_t v91 = *(void *)(a4 + 32);
    int v92 = *(_DWORD *)(v91 + 24 * v89);
    *(_DWORD *)(a4 + 52) = v92 & 0x7FFFFFFF;
  }
  uint64_t v93 = 24 * v89;
  *(_DWORD *)(v91 + v93) = v92 | 0x80000000;
  *(_DWORD *)(*(void *)(a4 + 32) + v93) = *(_DWORD *)(*(void *)(a4 + 32) + 24 * v89) & 0x80000000 | *(_DWORD *)(*(void *)(a4 + 24) + 4 * v87);
  *(void *)(*(void *)(a4 + 32) + 24 * v89 + 8) = v84;
  *(void *)(*(void *)(a4 + 32) + 24 * v89 + 16) = v86;
  *(_DWORD *)(*(void *)(a4 + 24) + 4 * v87) = v89;
  ++*(_DWORD *)(a4 + 44);
  ++*(_DWORD *)(a4 + 56);
LABEL_57:
  re::RenderFrame::emitGraph(a3, "Deformer", *(const char **)(v98 + 56));
}

void re::RealityEmitterBase::emitVFXSimulationGraph(uint64_t a1, void *a2, re::RenderFrame *a3, uint64_t a4)
{
  uint64_t v73 = *MEMORY[0x263EF8340];
  uint64_t v6 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(**((void **)a3 + 47) + 32))(*((void **)a3 + 47), 144, 16);
  unint64_t v62 = a3;
  unint64_t v7 = (void *)*((void *)a3 + 47);
  *(void *)(v6 + 32) = 0;
  *(void *)(v6 + 8) = 0;
  uint64_t v8 = (unint64_t *)(v6 + 8);
  *(_DWORD *)(v6 + 24) = 0;
  *(void *)(v6 + 16) = 0;
  *(void *)uint64_t v6 = v7;
  re::DynamicArray<float *>::setCapacity((void *)v6, 0);
  ++*(_DWORD *)(v6 + 24);
  *(void *)(v6 + 48) = 0;
  *(void *)(v6 + 64) = 0;
  *(void *)(v6 + 72) = 0x3F80000000000000;
  *(void *)(v6 + 56) = 0;
  *(_DWORD *)(v6 + 80) = 0;
  *(_OWORD *)(v6 + 84) = xmmword_234390F00;
  *(void *)(v6 + 100) = 0xBDCCCCCD3DCCCCCDLL;
  *(unsigned char *)(v6 + 108) = 0;
  *(_OWORD *)(v6 + 112) = xmmword_23435FD80;
  *(_DWORD *)(v6 + 128) = 1;
  *(void *)(v6 + 136) = 0;
  unint64_t v64 = a2;
  uint64_t v9 = a2[6];
  uint64_t v10 = *(void *)(v9 + 40);
  if (v10)
  {
    for (unint64_t i = 0; i != v10; ++i)
    {
      uint64_t v12 = (_anonymous_namespace_ *)re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[](v9, i);
      uint64_t v13 = *((void *)v12 + 2);
      if (v13)
      {
        uint64_t v14 = *((void *)v12 + 4);
        unint64_t v15 = *(void *)(v6 + 16);
        uint64_t v16 = 800 * v13;
        do
        {
          unint64_t v17 = *v8;
          if (v15 >= *v8)
          {
            unint64_t v18 = v15 + 1;
            if (v17 < v15 + 1)
            {
              if (*(void *)v6)
              {
                unint64_t v19 = 2 * v17;
                if (!v17) {
                  unint64_t v19 = 8;
                }
                if (v19 <= v18) {
                  unint64_t v20 = v18;
                }
                else {
                  unint64_t v20 = v19;
                }
                uint64_t v12 = (_anonymous_namespace_ *)re::DynamicArray<float *>::setCapacity((void *)v6, v20);
              }
              else
              {
                uint64_t v12 = (_anonymous_namespace_ *)re::DynamicArray<float *>::setCapacity((void *)v6, v18);
                ++*(_DWORD *)(v6 + 24);
              }
            }
            unint64_t v15 = *(void *)(v6 + 16);
          }
          *(void *)(*(void *)(v6 + 32) + 8 * v15++) = v14;
          *(void *)(v6 + 16) = v15;
          ++*(_DWORD *)(v6 + 24);
          v14 += 800;
          v16 -= 800;
        }
        while (v16);
      }
    }
  }
  if (*(void *)(v6 + 16))
  {
    uint64_t v21 = a2[24];
    if (v21 && (uint64_t v22 = *(void *)(v21 + 40)) != 0)
    {
      unint64_t v23 = 0;
      while (1)
      {
        uint64_t v24 = re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[](v21, v23);
        if (*(void *)(v24 + 16)) {
          break;
        }
        if (v22 == ++v23) {
          goto LABEL_24;
        }
      }
      uint64_t v38 = *(_OWORD **)(v24 + 32);
      long long v65 = v38[2];
      long long v66 = v38[3];
      long long v67 = v38[4];
      long long v70 = v38[7];
      long long v69 = v38[6];
      long long v68 = v38[5];
      uint64_t v26 = a4;
    }
    else
    {
LABEL_24:
      uint64_t v25 = a2[23];
      uint64_t v26 = a4;
      if (v25 && (uint64_t v27 = *(void *)(v25 + 40)) != 0)
      {
        unint64_t v28 = 0;
        while (1)
        {
          uint64_t v29 = re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[](v25, v28);
          if (*(void *)(v29 + 16)) {
            break;
          }
          if (v27 == ++v28) {
            goto LABEL_29;
          }
        }
        long long v37 = *(_OWORD **)(v29 + 32);
      }
      else
      {
LABEL_29:
        uint64_t v30 = a2[37];
        if (v30)
        {
          unint64_t v31 = 0;
          while (1)
          {
            uint64_t v32 = re::BucketArray<unsigned long,4ul>::operator[]((uint64_t)(a2 + 32), v31);
            uint64_t v33 = *(void *)v32;
            if (*(void *)(*(void *)v32 + 16)) {
              break;
            }
            if (v30 == ++v31) {
              goto LABEL_33;
            }
          }
        }
        else
        {
LABEL_33:
          uint64_t v34 = a2[30];
          if (!v34) {
            return;
          }
          unint64_t v35 = 0;
          while (1)
          {
            uint64_t v36 = re::BucketArray<unsigned long,4ul>::operator[]((uint64_t)(a2 + 25), v35);
            uint64_t v33 = *(void *)v36;
            if (*(void *)(*(void *)v36 + 16)) {
              break;
            }
            if (v34 == ++v35) {
              return;
            }
          }
        }
        long long v37 = *(_OWORD **)(v33 + 32);
      }
      long long v65 = v37[2];
      long long v66 = v37[3];
      long long v67 = v37[4];
      long long v70 = v37[7];
      long long v69 = v37[6];
      long long v68 = v37[5];
    }
    *(_OWORD *)(v6 + 80) = v67;
    *(_OWORD *)(v6 + 96) = v68;
    *(_OWORD *)(v6 + 112) = v69;
    *(_OWORD *)(v6 + 128) = v70;
    *(_OWORD *)(v6 + 48) = v65;
    *(_OWORD *)(v6 + 64) = v66;
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9BB20, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_26AF9BB20))
    {
      qword_26AF9BB18 = re::hashString((re *)"VFXSimulation", v61);
      __cxa_guard_release(&qword_26AF9BB20);
    }
    unint64_t v39 = qword_26AF9BB18;
    uint64_t v40 = (const char *)v64[7];
    size_t v41 = strlen(v40);
    if (v41)
    {
      MurmurHash3_x64_128((uint64_t)v40, v41, 0, &v71);
      unint64_t v42 = ((unint64_t)&v72[64 * v71 - 0x61C8864680B583E9 + (v71 >> 2)] ^ v71) - 0x61C8864680B583E9;
      uint64_t v40 = (const char *)v64[7];
    }
    else
    {
      unint64_t v42 = 0x9E3779B97F4A7C17;
    }
    uint64_t v43 = ((v39 >> 2) + (v39 << 6) + v42) ^ v39;
    unint64_t v71 = (unint64_t)&unk_26E711090;
    unint64_t v72 = v40;
    long long v44 = (re *)re::RenderGraphDataStore::add<re::SceneScope,re::SceneScope>(v26, v43, (uint64_t)&v71);
    unint64_t v45 = (unint64_t)"N2re27RenderGraphDataStoreWrapperIPNS_23ActiveVFXSimulationDataEEE";
    if (((unint64_t)"N2re27RenderGraphDataStoreWrapperIPNS_23ActiveVFXSimulationDataEEE" & 0x8000000000000000) != 0)
    {
      long long v46 = (unsigned __int8 *)((unint64_t)"N2re27RenderGraphDataStoreWrapperIPNS_23ActiveVFXSimulationDataEEE" & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v47 = 5381;
      do
      {
        unint64_t v45 = v47;
        unsigned int v48 = *v46++;
        uint64_t v47 = (33 * v47) ^ v48;
      }
      while (v48);
    }
    unint64_t v49 = (v43 - 0x61C8864680B583E9 + (v45 << 6) + (v45 >> 2)) ^ v45;
    uint64_t v50 = re::globalAllocators(v44);
    uint64_t v51 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v50[2] + 32))(v50[2], 16, 8);
    unint64_t v52 = *(void *)(v26 + 16);
    *uint64_t v51 = &unk_26E71BFA0;
    v51[1] = v6;
    if (v52)
    {
      unint64_t v52 = v49 % *(unsigned int *)(v26 + 40);
      uint64_t v53 = *(unsigned int *)(*(void *)(v26 + 24) + 4 * v52);
      long long v54 = v62;
      if (v53 != 0x7FFFFFFF)
      {
        uint64_t v55 = *(void *)(v26 + 32);
        if (*(void *)(v55 + 24 * v53 + 8) == v49)
        {
LABEL_62:
          re::RenderFrame::emitGraph(v54, "VFXSimulation", (const char *)v64[7]);
          return;
        }
        while (1)
        {
          LODWORD(v53) = *(_DWORD *)(v55 + 24 * v53) & 0x7FFFFFFF;
          if (v53 == 0x7FFFFFFF) {
            break;
          }
          if (*(void *)(v55 + 24 * v53 + 8) == v49) {
            goto LABEL_62;
          }
        }
      }
    }
    else
    {
      long long v54 = v62;
    }
    uint64_t v56 = *(unsigned int *)(v26 + 52);
    if (v56 == 0x7FFFFFFF)
    {
      uint64_t v56 = *(unsigned int *)(v26 + 48);
      int v57 = v56;
      if (v56 == *(_DWORD *)(v26 + 40))
      {
        re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(v26 + 16, 2 * *(_DWORD *)(v26 + 44));
        LODWORD(v52) = v49 % *(unsigned int *)(v26 + 40);
        int v57 = *(_DWORD *)(v26 + 48);
      }
      *(_DWORD *)(v26 + 48) = v57 + 1;
      uint64_t v58 = *(void *)(v26 + 32);
      int v59 = *(_DWORD *)(v58 + 24 * v56);
    }
    else
    {
      uint64_t v58 = *(void *)(v26 + 32);
      int v59 = *(_DWORD *)(v58 + 24 * v56);
      *(_DWORD *)(v26 + 52) = v59 & 0x7FFFFFFF;
    }
    uint64_t v60 = 24 * v56;
    *(_DWORD *)(v58 + v60) = v59 | 0x80000000;
    *(_DWORD *)(*(void *)(v26 + 32) + v60) = *(_DWORD *)(*(void *)(v26 + 32) + 24 * v56) & 0x80000000 | *(_DWORD *)(*(void *)(v26 + 24) + 4 * v52);
    *(void *)(*(void *)(v26 + 32) + 24 * v56 + 8) = v49;
    *(void *)(*(void *)(v26 + 32) + 24 * v56 + 16) = v51;
    *(_DWORD *)(*(void *)(v26 + 24) + 4 * v52) = v56;
    ++*(_DWORD *)(v26 + 44);
    ++*(_DWORD *)(v26 + 56);
    goto LABEL_62;
  }
}

void re::RealityEmitterBase::emitProbeWriteGraph(re::RealityEmitterBase *this, re::RenderFrame *a2, double a3)
{
  {
    re::RealityEmitterBase::emitProbeWriteGraph(re::RenderFrame &)::kProbeWriteContextCombinedunint64_t ScopeHash = re::getCombinedScopeHash((re *)"ProbeWriteContext", "RenderFrame", v6);
  }
  uint64_t v4 = *(void *)(*((void *)a2 + 1) + 104);
  if (v4) {
    uint64_t v5 = *(re::ProbeManager **)(v4 + 320);
  }
  else {
    uint64_t v5 = 0;
  }
  re::ProbeManager::generateWorkload(v5, v7, a3);
  if (v7[0])
  {
    re::RenderGraphDataStore::add<re::ProbeWriteContext,re::ProbeWriteContext>((re::RenderFrame *)((char *)a2 + 32), re::RealityEmitterBase::emitProbeWriteGraph(re::RenderFrame &)::kProbeWriteContextCombinedScopeHash, (uint64_t)v8);
    re::RenderFrame::emitGraph(a2, "ProbeWriteContext", "RenderFrame");
    if (v7[0]) {
      (*(void (**)(void *))v8[0])(v8);
    }
  }
}

void re::RealityEmitterBase::emitSingleGraphShadows(uint64_t a1, uint64_t a2, re::RenderFrame *a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v241 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(void *)(a2 + 112);
  if (!v5) {
    return;
  }
  unint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 320 * v5;
  uint64_t v13 = (unsigned __int16 *)(*(void *)(a2 + 128) + 148);
  do
  {
    if (*v13 != 0xFFFF) {
      unint64_t v10 = ++v11;
    }
    v13 += 160;
    v12 -= 320;
  }
  while (v12);
  uint64_t v14 = *(const char **)(a2 + 56);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9BB40, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9BB40))
  {
    qword_26AF9BB38 = re::hashString((re *)"SingleGraphShadows", v202);
    __cxa_guard_release(&qword_26AF9BB40);
  }
  unint64_t v15 = qword_26AF9BB38;
  size_t v16 = strlen(v14);
  int v206 = a3;
  uint64_t v207 = a4;
  v204 = (char *)v14;
  if (v16)
  {
    MurmurHash3_x64_128((uint64_t)v14, v16, 0, (unint64_t *)&v224);
    unint64_t v17 = ((*((void *)&v224 + 1) - 0x61C8864680B583E9 + ((void)v224 << 6) + ((unint64_t)v224 >> 2)) ^ v224)
        - 0x61C8864680B583E9;
  }
  else
  {
    unint64_t v17 = 0x9E3779B97F4A7C17;
  }
  int v214 = (void *)a2;
  unint64_t v18 = *(re::Allocator **)a2;
  unint64_t v19 = (unint64_t)"N2re15CameraArrayDataE";
  if (((unint64_t)"N2re15CameraArrayDataE" & 0x8000000000000000) != 0)
  {
    unint64_t v20 = (unsigned __int8 *)((unint64_t)"N2re15CameraArrayDataE" & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v21 = 5381;
    do
    {
      unint64_t v19 = v21;
      unsigned int v22 = *v20++;
      uint64_t v21 = (33 * v21) ^ v22;
    }
    while (v22);
  }
  unint64_t v23 = (void *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a4 + 8) + 32))(*(void *)(a4 + 8), 32, 8);
  *unint64_t v23 = &unk_26E71BFE0;
  v23[1] = 0;
  v23[2] = 0;
  v23[3] = 0;
  re::CameraData::CameraData((re::CameraData *)&v224, v18);
  v23[1] = v18;
  v23[2] = v10;
  uint64_t v205 = a5;
  long long v210 = v18;
  if (v10)
  {
    if (v10 >= 0x7C1F07C1F07C20) {
      goto LABEL_202;
    }
    uint64_t v25 = (*(uint64_t (**)(re::Allocator *, unint64_t, uint64_t))(*(void *)v18 + 32))(v18, 528 * v10, 16);
    v23[3] = v25;
    if (!v25)
    {
LABEL_203:
      re::internal::assertLog((re::internal *)4, v26, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
      _os_crash();
      __break(1u);
      goto LABEL_204;
    }
    uint64_t v27 = v25;
    unint64_t v28 = v10 - 1;
    if (v10 != 1)
    {
      unint64_t v203 = v15;
      uint64_t v29 = v25;
      do
      {
        *(void *)uint64_t v27 = &unk_26E70E230;
        re::DynamicString::DynamicString((re::DynamicString *)(v27 + 8), (const re::DynamicString *)((char *)&v224 + 8));
        *(void *)(v27 + 48) = 0;
        *(_DWORD *)(v27 + 56) = 0;
        uint64_t v30 = v227;
        memcpy((void *)(v27 + 64), v228, 32 * v227);
        *(void *)(v27 + 48) = v30;
        *(void *)(v27 + 128) = 0;
        *(_DWORD *)(v27 + 136) = 0;
        uint64_t v31 = v229;
        memcpy((void *)(v27 + 144), v231, v229 << 6);
        *(void *)(v27 + 128) = v31;
        *(void *)(v27 + 272) = 0;
        *(_DWORD *)(v27 + 280) = 0;
        uint64_t v32 = v232;
        memcpy((void *)(v27 + 288), v234, v232 << 6);
        *(void *)(v27 + 272) = v32;
        long long v34 = v236;
        long long v33 = *(_OWORD *)v237;
        long long v35 = v235;
        *(_OWORD *)(v27 + 458) = *(_OWORD *)&v237[10];
        *(_OWORD *)(v27 + 432) = v34;
        *(_OWORD *)(v27 + 448) = v33;
        *(_OWORD *)(v27 + 416) = v35;
        int v36 = v238;
        *(unsigned char *)(v27 + 476) = v238;
        if (v36) {
          *(_DWORD *)(v27 + 480) = v239;
        }
        long long v37 = v240[0];
        *(_OWORD *)(v27 + 497) = *(_OWORD *)((char *)v240 + 13);
        *(_OWORD *)(v27 + 484) = v37;
        v27 += 528;
        v29 += 528;
        --v28;
      }
      while (v28);
      unint64_t v15 = v203;
    }
    *(void *)uint64_t v27 = &unk_26E70E230;
    re::DynamicString::DynamicString((re::DynamicString *)(v27 + 8), (const re::DynamicString *)((char *)&v224 + 8));
    *(void *)(v27 + 48) = 0;
    *(_DWORD *)(v27 + 56) = 0;
    uint64_t v38 = v227;
    memcpy((void *)(v27 + 64), v228, 32 * v227);
    *(void *)(v27 + 48) = v38;
    *(void *)(v27 + 128) = 0;
    *(_DWORD *)(v27 + 136) = 0;
    uint64_t v39 = v229;
    memcpy((void *)(v27 + 144), v231, v229 << 6);
    *(void *)(v27 + 128) = v39;
    *(void *)(v27 + 272) = 0;
    *(_DWORD *)(v27 + 280) = 0;
    uint64_t v40 = v232;
    memcpy((void *)(v27 + 288), v234, v232 << 6);
    *(void *)(v27 + 272) = v40;
    long long v42 = v236;
    long long v41 = *(_OWORD *)v237;
    long long v43 = v235;
    *(_OWORD *)(v27 + 458) = *(_OWORD *)&v237[10];
    *(_OWORD *)(v27 + 432) = v42;
    *(_OWORD *)(v27 + 448) = v41;
    *(_OWORD *)(v27 + 416) = v43;
    int v44 = v238;
    *(unsigned char *)(v27 + 476) = v238;
    if (v44) {
      *(_DWORD *)(v27 + 480) = v239;
    }
    long long v45 = v240[0];
    *(_OWORD *)(v27 + 497) = *(_OWORD *)((char *)v240 + 13);
    *(_OWORD *)(v27 + 484) = v45;
    unint64_t v18 = v210;
  }
  unint64_t v208 = ((v15 >> 2) + (v15 << 6) + v17) ^ v15;
  unint64_t v46 = v208 - 0x61C8864680B583E9;
  ++v233;
  ++v230;
  uint64_t v47 = (unint64_t *)(v207 + 64);
  uint64_t v232 = 0;
  uint64_t v229 = 0;
  *(void *)&long long v227 = 0;
  ++DWORD2(v227);
  if (*((void *)&v224 + 1) && (v225 & 1) != 0) {
    (*(void (**)(void))(**((void **)&v224 + 1) + 40))();
  }
  unint64_t v48 = (v208 - 0x61C8864680B583E9 + (v19 << 6) + (v19 >> 2)) ^ v19;
  unint64_t v49 = *v47;
  if (*v47)
  {
    uint64_t v50 = v206;
    uint64_t v51 = v207;
    unint64_t v49 = v48 % *(unsigned int *)(v207 + 88);
    uint64_t v52 = *(unsigned int *)(*(void *)(v207 + 72) + 4 * v49);
    if (v52 != 0x7FFFFFFF)
    {
      uint64_t v53 = *(void *)(v207 + 80);
      if (*(void *)(v53 + 24 * v52 + 8) == v48)
      {
LABEL_33:
        long long v54 = (re::DynamicString **)(v53 + 24 * v52 + 16);
        goto LABEL_41;
      }
      while (1)
      {
        LODWORD(v52) = *(_DWORD *)(v53 + 24 * v52) & 0x7FFFFFFF;
        if (v52 == 0x7FFFFFFF) {
          break;
        }
        if (*(void *)(v53 + 24 * v52 + 8) == v48) {
          goto LABEL_33;
        }
      }
    }
  }
  else
  {
    uint64_t v50 = v206;
    uint64_t v51 = v207;
  }
  uint64_t v55 = *(unsigned int *)(v51 + 100);
  if (v55 == 0x7FFFFFFF)
  {
    uint64_t v55 = *(unsigned int *)(v51 + 96);
    int v56 = v55;
    if (v55 == *(_DWORD *)(v51 + 88))
    {
      re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity((uint64_t)v47, 2 * *(_DWORD *)(v51 + 92));
      LODWORD(v49) = v48 % *(unsigned int *)(v51 + 88);
      int v56 = *(_DWORD *)(v51 + 96);
    }
    *(_DWORD *)(v51 + 96) = v56 + 1;
    uint64_t v57 = *(void *)(v51 + 80);
    int v58 = *(_DWORD *)(v57 + 24 * v55);
  }
  else
  {
    uint64_t v57 = *(void *)(v51 + 80);
    int v58 = *(_DWORD *)(v57 + 24 * v55);
    *(_DWORD *)(v51 + 100) = v58 & 0x7FFFFFFF;
  }
  uint64_t v59 = 24 * v55;
  *(_DWORD *)(v57 + v59) = v58 | 0x80000000;
  *(_DWORD *)(*(void *)(v51 + 80) + v59) = *(_DWORD *)(*(void *)(v51 + 80) + 24 * v55) & 0x80000000 | *(_DWORD *)(*(void *)(v51 + 72) + 4 * v49);
  *(void *)(*(void *)(v51 + 80) + 24 * v55 + 8) = v48;
  *(void *)(*(void *)(v51 + 80) + 24 * v55 + 16) = v23;
  *(_DWORD *)(*(void *)(v51 + 72) + 4 * v49) = v55;
  ++*(_DWORD *)(v51 + 92);
  ++*(_DWORD *)(v51 + 104);
  long long v54 = (re::DynamicString **)(*(void *)(v51 + 80) + 24 * v55 + 16);
  unint64_t v18 = v210;
LABEL_41:
  unint64_t v60 = (unint64_t)"N2re26MultiViewCullModeArrayDataE";
  if (((unint64_t)"N2re26MultiViewCullModeArrayDataE" & 0x8000000000000000) != 0)
  {
    long long v61 = (unsigned __int8 *)((unint64_t)"N2re26MultiViewCullModeArrayDataE" & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v62 = 5381;
    do
    {
      unint64_t v60 = v62;
      unsigned int v63 = *v61++;
      uint64_t v62 = (33 * v62) ^ v63;
    }
    while (v63);
  }
  uint64_t v213 = *v54;
  long long v65 = (void *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v51 + 8) + 32))(*(void *)(v51 + 8), 32, 8);
  *long long v65 = &unk_26E71C020;
  v65[1] = v18;
  v65[2] = v10;
  v65[3] = 0;
  if (v10)
  {
    if ((v10 & 0x8000000000000000) == 0)
    {
      long long v66 = (unsigned char *)(*(uint64_t (**)(re::Allocator *, unint64_t, uint64_t))(*(void *)v18 + 32))(v18, 2 * v10, 1);
      v65[3] = v66;
      if (v66)
      {
        unint64_t v68 = v10 - 1;
        if (v10 != 1)
        {
          do
          {
            *long long v66 = 0;
            v66 += 2;
            --v68;
          }
          while (v68);
        }
        *long long v66 = 0;
        goto LABEL_50;
      }
LABEL_205:
      re::internal::assertLog((re::internal *)4, v67, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
      _os_crash();
      __break(1u);
      goto LABEL_206;
    }
LABEL_204:
    re::internal::assertLog((re::internal *)6, v64, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 2, v10);
    _os_crash();
    __break(1u);
    goto LABEL_205;
  }
LABEL_50:
  unint64_t v69 = (v46 + (v60 << 6) + (v60 >> 2)) ^ v60;
  unint64_t v70 = *v47;
  if (*v47)
  {
    unint64_t v70 = v69 % *(unsigned int *)(v51 + 88);
    uint64_t v71 = *(unsigned int *)(*(void *)(v51 + 72) + 4 * v70);
    if (v71 != 0x7FFFFFFF)
    {
      uint64_t v78 = *(void *)(v51 + 80);
      if (*(void *)(v78 + 24 * v71 + 8) == v69)
      {
LABEL_61:
        uint64_t v77 = (void *)(v78 + 24 * v71 + 16);
        goto LABEL_62;
      }
      while (1)
      {
        LODWORD(v71) = *(_DWORD *)(v78 + 24 * v71) & 0x7FFFFFFF;
        if (v71 == 0x7FFFFFFF) {
          break;
        }
        if (*(void *)(v78 + 24 * v71 + 8) == v69) {
          goto LABEL_61;
        }
      }
    }
  }
  uint64_t v72 = *(unsigned int *)(v51 + 100);
  if (v72 == 0x7FFFFFFF)
  {
    uint64_t v72 = *(unsigned int *)(v51 + 96);
    int v73 = v72;
    if (v72 == *(_DWORD *)(v51 + 88))
    {
      re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity((uint64_t)v47, 2 * *(_DWORD *)(v51 + 92));
      LODWORD(v70) = v69 % *(unsigned int *)(v51 + 88);
      int v73 = *(_DWORD *)(v51 + 96);
    }
    *(_DWORD *)(v51 + 96) = v73 + 1;
    uint64_t v74 = *(void *)(v51 + 80);
    int v75 = *(_DWORD *)(v74 + 24 * v72);
  }
  else
  {
    uint64_t v74 = *(void *)(v51 + 80);
    int v75 = *(_DWORD *)(v74 + 24 * v72);
    *(_DWORD *)(v51 + 100) = v75 & 0x7FFFFFFF;
  }
  uint64_t v76 = 24 * v72;
  *(_DWORD *)(v74 + v76) = v75 | 0x80000000;
  *(_DWORD *)(*(void *)(v51 + 80) + v76) = *(_DWORD *)(*(void *)(v51 + 80) + 24 * v72) & 0x80000000 | *(_DWORD *)(*(void *)(v51 + 72) + 4 * v70);
  *(void *)(*(void *)(v51 + 80) + 24 * v72 + 8) = v69;
  *(void *)(*(void *)(v51 + 80) + 24 * v72 + 16) = v65;
  *(_DWORD *)(*(void *)(v51 + 72) + 4 * v70) = v72;
  ++*(_DWORD *)(v51 + 92);
  ++*(_DWORD *)(v51 + 104);
  uint64_t v77 = (void *)(*(void *)(v51 + 80) + 24 * v72 + 16);
  unint64_t v18 = v210;
LABEL_62:
  __src = (void *)*v77;
  unint64_t v216 = 0;
  *(void *)uint64_t v217 = 0;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9BCB0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9BCB0))
  {
    qword_26AF9BCA8 = re::introspect_ShadowMapAtlasData(0);
    __cxa_guard_release(&qword_26AF9BCB0);
  }
  unint64_t v216 = qword_26AF9BCA8;
  size_t v79 = strlen(*(const char **)(qword_26AF9BCA8 + 48));
  unint64_t v80 = (unint64_t *)(v207 + 64);
  if (v79)
  {
    MurmurHash3_x64_128(*(void *)(qword_26AF9BCA8 + 48), v79, 0, (unint64_t *)&v224);
    unint64_t v81 = (*((void *)&v224 + 1) - 0x61C8864680B583E9 + ((void)v224 << 6) + ((unint64_t)v224 >> 2)) ^ v224;
  }
  else
  {
    unint64_t v81 = 0;
  }
  *(void *)uint64_t v217 = v81;
  re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addOrReplace<re::IntrospectionStructure const*&>(v51 + 176, (unint64_t *)v217, &v216);
  unint64_t v82 = (v46 + (*(void *)v217 << 6) + (*(void *)v217 >> 2)) ^ *(void *)v217;
  unsigned int v83 = (void *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v51 + 8) + 32))(*(void *)(v51 + 8), 24, 8);
  v83[1] = 0;
  v83[2] = 252;
  *unsigned int v83 = &unk_26E70E1F0;
  unint64_t v84 = *(void *)(v51 + 64);
  if (v84)
  {
    unint64_t v84 = v82 % *(unsigned int *)(v51 + 88);
    uint64_t v85 = *(unsigned int *)(*(void *)(v51 + 72) + 4 * v84);
    if (v85 != 0x7FFFFFFF)
    {
      uint64_t v92 = *(void *)(v51 + 80);
      if (*(void *)(v92 + 24 * v85 + 8) == v82)
      {
LABEL_77:
        uint64_t v91 = (uint64_t *)(v92 + 24 * v85 + 16);
        goto LABEL_78;
      }
      while (1)
      {
        LODWORD(v85) = *(_DWORD *)(v92 + 24 * v85) & 0x7FFFFFFF;
        if (v85 == 0x7FFFFFFF) {
          break;
        }
        if (*(void *)(v92 + 24 * v85 + 8) == v82) {
          goto LABEL_77;
        }
      }
    }
  }
  uint64_t v86 = *(unsigned int *)(v51 + 100);
  if (v86 == 0x7FFFFFFF)
  {
    uint64_t v86 = *(unsigned int *)(v51 + 96);
    int v87 = v86;
    if (v86 == *(_DWORD *)(v51 + 88))
    {
      re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity((uint64_t)v80, 2 * *(_DWORD *)(v51 + 92));
      LODWORD(v84) = v82 % *(unsigned int *)(v51 + 88);
      int v87 = *(_DWORD *)(v51 + 96);
    }
    *(_DWORD *)(v51 + 96) = v87 + 1;
    uint64_t v88 = *(void *)(v51 + 80);
    int v89 = *(_DWORD *)(v88 + 24 * v86);
  }
  else
  {
    uint64_t v88 = *(void *)(v51 + 80);
    int v89 = *(_DWORD *)(v88 + 24 * v86);
    *(_DWORD *)(v51 + 100) = v89 & 0x7FFFFFFF;
  }
  uint64_t v90 = 24 * v86;
  *(_DWORD *)(v88 + v90) = v89 | 0x80000000;
  *(_DWORD *)(*(void *)(v51 + 80) + v90) = *(_DWORD *)(*(void *)(v51 + 80) + 24 * v86) & 0x80000000 | *(_DWORD *)(*(void *)(v51 + 72) + 4 * v84);
  *(void *)(*(void *)(v51 + 80) + 24 * v86 + 8) = v82;
  *(void *)(*(void *)(v51 + 80) + 24 * v86 + 16) = v83;
  *(_DWORD *)(*(void *)(v51 + 72) + 4 * v84) = v86;
  ++*(_DWORD *)(v51 + 92);
  ++*(_DWORD *)(v51 + 104);
  uint64_t v91 = (uint64_t *)(*(void *)(v51 + 80) + 24 * v86 + 16);
  unint64_t v18 = v210;
LABEL_78:
  uint64_t v93 = *v91;
  *(void *)(v93 + 8) = *(void *)(v214[1] + 280);
  *(_DWORD *)(v93 + 16) = 252;
  unint64_t v94 = (unint64_t)"N2re17ViewportArrayDataE";
  if (((unint64_t)"N2re17ViewportArrayDataE" & 0x8000000000000000) != 0)
  {
    uint64_t v95 = (unsigned __int8 *)((unint64_t)"N2re17ViewportArrayDataE" & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v96 = 5381;
    do
    {
      unint64_t v94 = v96;
      unsigned int v97 = *v95++;
      uint64_t v96 = (33 * v96) ^ v97;
    }
    while (v97);
  }
  long long v99 = (void *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v51 + 8) + 32))(*(void *)(v51 + 8), 32, 8);
  *long long v99 = &unk_26E71C060;
  v99[1] = v18;
  v99[2] = v10;
  v99[3] = 0;
  if (v10)
  {
    if (!(v10 >> 59))
    {
      long long v100 = (void *)(*(uint64_t (**)(re::Allocator *, unint64_t, uint64_t))(*(void *)v18 + 32))(v18, 32 * v10, 8);
      v99[3] = v100;
      if (v100)
      {
        unint64_t v102 = v10 - 1;
        if (v10 != 1)
        {
          long long v103 = v100;
          do
          {
            *long long v100 = &unk_26E70E090;
            v100[1] = 0;
            v100[2] = 0;
            v100[3] = 0x3F80000000000000;
            v100 += 4;
            v103 += 4;
            --v102;
          }
          while (v102);
        }
        *long long v100 = &unk_26E70E090;
        v100[1] = 0;
        v100[2] = 0;
        v100[3] = 0x3F80000000000000;
        goto LABEL_88;
      }
LABEL_207:
      re::internal::assertLog((re::internal *)4, v101, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
      _os_crash();
      __break(1u);
      re::internal::assertLog((re::internal *)6, v201, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 160, v10);
      _os_crash();
      __break(1u);
      goto LABEL_208;
    }
LABEL_206:
    re::internal::assertLog((re::internal *)6, v98, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 32, v10);
    _os_crash();
    __break(1u);
    goto LABEL_207;
  }
LABEL_88:
  unint64_t v104 = (v46 + (v94 << 6) + (v94 >> 2)) ^ v94;
  unint64_t v105 = *v80;
  if (*v80)
  {
    unint64_t v105 = v104 % *(unsigned int *)(v51 + 88);
    uint64_t v106 = *(unsigned int *)(*(void *)(v51 + 72) + 4 * v105);
    if (v106 != 0x7FFFFFFF)
    {
      uint64_t v113 = *(void *)(v51 + 80);
      if (*(void *)(v113 + 24 * v106 + 8) == v104)
      {
LABEL_99:
        char v112 = (uint64_t *)(v113 + 24 * v106 + 16);
        goto LABEL_100;
      }
      while (1)
      {
        LODWORD(v106) = *(_DWORD *)(v113 + 24 * v106) & 0x7FFFFFFF;
        if (v106 == 0x7FFFFFFF) {
          break;
        }
        if (*(void *)(v113 + 24 * v106 + 8) == v104) {
          goto LABEL_99;
        }
      }
    }
  }
  uint64_t v107 = *(unsigned int *)(v51 + 100);
  if (v107 == 0x7FFFFFFF)
  {
    uint64_t v107 = *(unsigned int *)(v51 + 96);
    int v108 = v107;
    if (v107 == *(_DWORD *)(v51 + 88))
    {
      re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity((uint64_t)v80, 2 * *(_DWORD *)(v51 + 92));
      LODWORD(v105) = v104 % *(unsigned int *)(v51 + 88);
      int v108 = *(_DWORD *)(v51 + 96);
    }
    *(_DWORD *)(v51 + 96) = v108 + 1;
    uint64_t v109 = *(void *)(v51 + 80);
    int v110 = *(_DWORD *)(v109 + 24 * v107);
  }
  else
  {
    uint64_t v109 = *(void *)(v51 + 80);
    int v110 = *(_DWORD *)(v109 + 24 * v107);
    *(_DWORD *)(v51 + 100) = v110 & 0x7FFFFFFF;
  }
  uint64_t v111 = 24 * v107;
  *(_DWORD *)(v109 + v111) = v110 | 0x80000000;
  *(_DWORD *)(*(void *)(v51 + 80) + v111) = *(_DWORD *)(*(void *)(v51 + 80) + 24 * v107) & 0x80000000 | *(_DWORD *)(*(void *)(v51 + 72) + 4 * v105);
  *(void *)(*(void *)(v51 + 80) + 24 * v107 + 8) = v104;
  *(void *)(*(void *)(v51 + 80) + 24 * v107 + 16) = v99;
  *(_DWORD *)(*(void *)(v51 + 72) + 4 * v105) = v107;
  ++*(_DWORD *)(v51 + 92);
  ++*(_DWORD *)(v51 + 104);
  char v112 = (uint64_t *)(*(void *)(v51 + 80) + 24 * v107 + 16);
  unint64_t v18 = v210;
LABEL_100:
  unint64_t v114 = (unint64_t)"N2re27MeshLodSelectInputArrayDataE";
  if (((unint64_t)"N2re27MeshLodSelectInputArrayDataE" & 0x8000000000000000) != 0)
  {
    unint64_t v115 = (unsigned __int8 *)((unint64_t)"N2re27MeshLodSelectInputArrayDataE" & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v116 = 5381;
    do
    {
      unint64_t v114 = v116;
      unsigned int v117 = *v115++;
      uint64_t v116 = (33 * v116) ^ v117;
    }
    while (v117);
  }
  uint64_t v211 = *v112;
  unint64_t v118 = (void *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**((void **)v50 + 5) + 32))(*((void *)v50 + 5), 32, 8);
  *unint64_t v118 = &unk_26E71C0A0;
  v118[1] = v18;
  v118[2] = v10;
  v118[3] = 0;
  if (v10)
  {
    uint64_t v119 = (*(uint64_t (**)(re::Allocator *, unint64_t, uint64_t))(*(void *)v18 + 32))(v18, 160 * v10, 16);
    v118[3] = v119;
    if (v119)
    {
      unint64_t v121 = v10 - 1;
      if (v10 != 1)
      {
        uint64_t v122 = v119;
        do
        {
          *(_OWORD *)uint64_t v119 = 0uLL;
          *(_OWORD *)(v119 + 16) = 0uLL;
          *(_OWORD *)(v119 + 96) = 0uLL;
          *(_OWORD *)(v119 + 112) = 0uLL;
          *(_OWORD *)(v119 + 128) = xmmword_23435FD80;
          *(_OWORD *)(v119 + 144) = 0uLL;
          *(_OWORD *)(v119 + 64) = 0uLL;
          *(_OWORD *)(v119 + 80) = 0uLL;
          *(_OWORD *)(v119 + 32) = 0uLL;
          *(_OWORD *)(v119 + 48) = 0uLL;
          *(void *)uint64_t v119 = &unk_26E711050;
          *(unsigned char *)(v119 + 16) = 1;
          *(_DWORD *)(v119 + 96) = 0;
          *(_OWORD *)(v119 + 100) = xmmword_234390F00;
          *(void *)(v119 + 116) = 0xBDCCCCCD3DCCCCCDLL;
          *(_DWORD *)(v119 + 144) = 1;
          v119 += 160;
          v122 += 160;
          --v121;
        }
        while (v121);
      }
      *(_OWORD *)uint64_t v119 = 0u;
      *(_OWORD *)(v119 + 16) = 0u;
      *(_OWORD *)(v119 + 96) = 0u;
      *(_OWORD *)(v119 + 112) = 0u;
      *(_OWORD *)(v119 + 144) = 0u;
      *(_OWORD *)(v119 + 64) = 0u;
      *(_OWORD *)(v119 + 80) = 0u;
      *(_OWORD *)(v119 + 32) = 0u;
      *(_OWORD *)(v119 + 48) = 0u;
      *(void *)uint64_t v119 = &unk_26E711050;
      *(unsigned char *)(v119 + 16) = 1;
      *(_DWORD *)(v119 + 96) = 0;
      *(_OWORD *)(v119 + 100) = xmmword_234390F00;
      *(void *)(v119 + 116) = 0xBDCCCCCD3DCCCCCDLL;
      *(_OWORD *)(v119 + 128) = xmmword_23435FD80;
      *(_DWORD *)(v119 + 144) = 1;
      goto LABEL_109;
    }
LABEL_208:
    re::internal::assertLog((re::internal *)4, v120, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    _os_crash();
    __break(1u);
  }
LABEL_109:
  unint64_t v123 = (v46 + (v114 << 6) + (v114 >> 2)) ^ v114;
  uint64_t v124 = (uint64_t)v50 + 96;
  unint64_t v125 = *((void *)v50 + 12);
  if (v125)
  {
    unint64_t v125 = v123 % *((unsigned int *)v50 + 30);
    uint64_t v126 = *(unsigned int *)(*((void *)v50 + 13) + 4 * v125);
    if (v126 != 0x7FFFFFFF)
    {
      uint64_t v133 = *((void *)v50 + 14);
      if (*(void *)(v133 + 24 * v126 + 8) == v123)
      {
LABEL_120:
        uint64_t v132 = v133 + 24 * v126;
        goto LABEL_121;
      }
      while (1)
      {
        LODWORD(v126) = *(_DWORD *)(v133 + 24 * v126) & 0x7FFFFFFF;
        if (v126 == 0x7FFFFFFF) {
          break;
        }
        if (*(void *)(v133 + 24 * v126 + 8) == v123) {
          goto LABEL_120;
        }
      }
    }
  }
  uint64_t v127 = *((unsigned int *)v50 + 33);
  if (v127 == 0x7FFFFFFF)
  {
    uint64_t v127 = *((unsigned int *)v50 + 32);
    int v128 = v127;
    if (v127 == *((_DWORD *)v50 + 30))
    {
      re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(v124, 2 * *((_DWORD *)v50 + 31));
      LODWORD(v125) = v123 % *((unsigned int *)v50 + 30);
      int v128 = *((_DWORD *)v50 + 32);
    }
    *((_DWORD *)v50 + 32) = v128 + 1;
    uint64_t v129 = *((void *)v50 + 14);
    int v130 = *(_DWORD *)(v129 + 24 * v127);
  }
  else
  {
    uint64_t v129 = *((void *)v50 + 14);
    int v130 = *(_DWORD *)(v129 + 24 * v127);
    *((_DWORD *)v50 + 33) = v130 & 0x7FFFFFFF;
  }
  uint64_t v131 = 24 * v127;
  *(_DWORD *)(v129 + v131) = v130 | 0x80000000;
  *(_DWORD *)(*((void *)v50 + 14) + v131) = *(_DWORD *)(*((void *)v50 + 14) + 24 * v127) & 0x80000000 | *(_DWORD *)(*((void *)v50 + 13) + 4 * v125);
  *(void *)(*((void *)v50 + 14) + 24 * v127 + 8) = v123;
  *(void *)(*((void *)v50 + 14) + 24 * v127 + 16) = v118;
  *(_DWORD *)(*((void *)v50 + 13) + 4 * v125) = v127;
  ++*((_DWORD *)v50 + 31);
  ++*((_DWORD *)v50 + 34);
  uint64_t v132 = *((void *)v50 + 14) + 24 * v127;
LABEL_121:
  uint64_t v134 = v208;
  uint64_t v209 = *(void *)(v132 + 16);
  re::RealityEmitterBase::addSceneDataToDataStore(v124, (uint64_t)v214, v134, v51);
  if (*a5) {
    goto LABEL_134;
  }
  unint64_t v216 = 0;
  *(void *)uint64_t v217 = &unk_26E71C328;
  v217[8] = 1;
  uint64_t v215 = 0;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9BCC0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9BCC0))
  {
    qword_26AF9BCB8 = re::introspect_ForceClearData(0);
    __cxa_guard_release(&qword_26AF9BCC0);
  }
  uint64_t v215 = qword_26AF9BCB8;
  size_t v135 = strlen(*(const char **)(qword_26AF9BCB8 + 48));
  if (v135)
  {
    MurmurHash3_x64_128(*(void *)(qword_26AF9BCB8 + 48), v135, 0, (unint64_t *)&v224);
    unint64_t v136 = (*((void *)&v224 + 1) - 0x61C8864680B583E9 + ((void)v224 << 6) + ((unint64_t)v224 >> 2)) ^ v224;
  }
  else
  {
    unint64_t v136 = 0;
  }
  unint64_t v216 = v136;
  re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addOrReplace<re::IntrospectionStructure const*&>(v51 + 176, &v216, &v215);
  unint64_t v137 = (v46 + (v216 << 6) + (v216 >> 2)) ^ v216;
  uint64_t v138 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v51 + 8) + 32))(*(void *)(v51 + 8), 16, 8);
  *(void *)uint64_t v138 = &unk_26E71C328;
  *(unsigned char *)(v138 + 8) = v217[8];
  unint64_t v139 = *(void *)(v51 + 64);
  if (v139)
  {
    unint64_t v139 = v137 % *(unsigned int *)(v51 + 88);
    uint64_t v140 = *(unsigned int *)(*(void *)(v51 + 72) + 4 * v139);
    if (v140 != 0x7FFFFFFF)
    {
      uint64_t v200 = *(void *)(v51 + 80);
      if (*(void *)(v200 + 24 * v140 + 8) == v137) {
        goto LABEL_134;
      }
      while (1)
      {
        LODWORD(v140) = *(_DWORD *)(v200 + 24 * v140) & 0x7FFFFFFF;
        if (v140 == 0x7FFFFFFF) {
          break;
        }
        if (*(void *)(v200 + 24 * v140 + 8) == v137) {
          goto LABEL_134;
        }
      }
    }
  }
  uint64_t v141 = *(unsigned int *)(v51 + 100);
  if (v141 == 0x7FFFFFFF)
  {
    uint64_t v141 = *(unsigned int *)(v51 + 96);
    int v142 = v141;
    if (v141 == *(_DWORD *)(v51 + 88))
    {
      re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity((uint64_t)v80, 2 * *(_DWORD *)(v51 + 92));
      LODWORD(v139) = v137 % *(unsigned int *)(v51 + 88);
      int v142 = *(_DWORD *)(v51 + 96);
    }
    *(_DWORD *)(v51 + 96) = v142 + 1;
    uint64_t v143 = *(void *)(v51 + 80);
    int v144 = *(_DWORD *)(v143 + 24 * v141);
  }
  else
  {
    uint64_t v143 = *(void *)(v51 + 80);
    int v144 = *(_DWORD *)(v143 + 24 * v141);
    *(_DWORD *)(v51 + 100) = v144 & 0x7FFFFFFF;
  }
  uint64_t v145 = 24 * v141;
  *(_DWORD *)(v143 + v145) = v144 | 0x80000000;
  *(_DWORD *)(*(void *)(v51 + 80) + v145) = *(_DWORD *)(*(void *)(v51 + 80) + 24 * v141) & 0x80000000 | *(_DWORD *)(*(void *)(v51 + 72) + 4 * v139);
  *(void *)(*(void *)(v51 + 80) + 24 * v141 + 8) = v137;
  *(void *)(*(void *)(v51 + 80) + 24 * v141 + 16) = v138;
  *(_DWORD *)(*(void *)(v51 + 72) + 4 * v139) = v141;
  ++*(_DWORD *)(v51 + 92);
  ++*(_DWORD *)(v51 + 104);
LABEL_134:
  unint64_t v146 = (unint64_t)"N2re18MeshNodeFilterDataE";
  if (((unint64_t)"N2re18MeshNodeFilterDataE" & 0x8000000000000000) != 0)
  {
    int v147 = (unsigned __int8 *)((unint64_t)"N2re18MeshNodeFilterDataE" & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v148 = 5381;
    do
    {
      unint64_t v146 = v148;
      unsigned int v149 = *v147++;
      uint64_t v148 = (33 * v148) ^ v149;
    }
    while (v149);
  }
  unint64_t v150 = (v46 + (v146 << 6) + (v146 >> 2)) ^ v146;
  uint64_t v152 = (void *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v51 + 8) + 32))(*(void *)(v51 + 8), 16, 8);
  *uint64_t v152 = &unk_26E71C0E0;
  v152[1] = 0;
  unint64_t v153 = *(void *)(v51 + 64);
  if (!v153
    || (unint64_t v153 = v150 % *(unsigned int *)(v51 + 88),
        uint64_t v154 = *(unsigned int *)(*(void *)(v51 + 72) + 4 * v153),
        v154 == 0x7FFFFFFF))
  {
LABEL_139:
    uint64_t v155 = *(unsigned int *)(v51 + 100);
    if (v155 == 0x7FFFFFFF)
    {
      uint64_t v155 = *(unsigned int *)(v51 + 96);
      int v156 = v155;
      if (v155 == *(_DWORD *)(v51 + 88))
      {
        re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity((uint64_t)v80, 2 * *(_DWORD *)(v51 + 92));
        LODWORD(v153) = v150 % *(unsigned int *)(v51 + 88);
        int v156 = *(_DWORD *)(v51 + 96);
      }
      *(_DWORD *)(v51 + 96) = v156 + 1;
      uint64_t v157 = *(void *)(v51 + 80);
      int v158 = *(_DWORD *)(v157 + 24 * v155);
    }
    else
    {
      uint64_t v157 = *(void *)(v51 + 80);
      int v158 = *(_DWORD *)(v157 + 24 * v155);
      *(_DWORD *)(v51 + 100) = v158 & 0x7FFFFFFF;
    }
    uint64_t v159 = 24 * v155;
    *(_DWORD *)(v157 + v159) = v158 | 0x80000000;
    *(_DWORD *)(*(void *)(v51 + 80) + v159) = *(_DWORD *)(*(void *)(v51 + 80) + 24 * v155) & 0x80000000 | *(_DWORD *)(*(void *)(v51 + 72) + 4 * v153);
    *(void *)(*(void *)(v51 + 80) + 24 * v155 + 8) = v150;
    *(void *)(*(void *)(v51 + 80) + 24 * v155 + 16) = v152;
    *(_DWORD *)(*(void *)(v51 + 72) + 4 * v153) = v155;
    ++*(_DWORD *)(v51 + 92);
    ++*(_DWORD *)(v51 + 104);
    uint64_t v160 = *(void *)(v51 + 80) + 24 * v155;
    goto LABEL_149;
  }
  uint64_t v161 = *(void *)(v51 + 80);
  while (*(void *)(v161 + 24 * v154 + 8) != v150)
  {
    LODWORD(v154) = *(_DWORD *)(v161 + 24 * v154) & 0x7FFFFFFF;
    if (v154 == 0x7FFFFFFF) {
      goto LABEL_139;
    }
  }
  uint64_t v160 = v161 + 24 * v154;
LABEL_149:
  *(void *)(*(void *)(v160 + 16) + 8) |= 0x1000000010uLL;
  uint64_t v162 = v214[14];
  if (v162)
  {
    uint64_t v163 = 0;
    int v164 = 0;
    uint64_t v165 = v214[16];
    uint64_t v166 = 320 * v162;
    do
    {
      if (*(__int16 *)(v165 + v163 + 148) != -1)
      {
        unint64_t v10 = *((void *)v213 + 2);
        if (v10 <= v164)
        {
          unint64_t v216 = 0;
          long long v227 = 0u;
          v228[0] = 0u;
          long long v225 = 0u;
          long long v226 = 0u;
          long long v224 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)uint64_t v217 = 136315906;
          *(void *)&v217[4] = "operator[]";
          __int16 v218 = 1024;
          int v219 = 468;
          __int16 v220 = 2048;
          uint64_t v221 = v164;
          __int16 v222 = 2048;
          unint64_t v223 = v10;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_199:
          unint64_t v216 = 0;
          long long v227 = 0u;
          v228[0] = 0u;
          long long v225 = 0u;
          long long v226 = 0u;
          long long v224 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)uint64_t v217 = 136315906;
          *(void *)&v217[4] = "operator[]";
          __int16 v218 = 1024;
          int v219 = 468;
          __int16 v220 = 2048;
          uint64_t v221 = v164;
          __int16 v222 = 2048;
          unint64_t v223 = v10;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_200:
          unint64_t v216 = 0;
          long long v227 = 0u;
          v228[0] = 0u;
          long long v225 = 0u;
          long long v226 = 0u;
          long long v224 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)uint64_t v217 = 136315906;
          *(void *)&v217[4] = "operator[]";
          __int16 v218 = 1024;
          int v219 = 468;
          __int16 v220 = 2048;
          uint64_t v221 = v164;
          __int16 v222 = 2048;
          unint64_t v223 = v10;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_201:
          unint64_t v216 = 0;
          long long v227 = 0u;
          v228[0] = 0u;
          long long v225 = 0u;
          long long v226 = 0u;
          long long v224 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)uint64_t v217 = 136315906;
          *(void *)&v217[4] = "operator[]";
          __int16 v218 = 1024;
          int v219 = 468;
          __int16 v220 = 2048;
          uint64_t v221 = v164;
          __int16 v222 = 2048;
          unint64_t v223 = v10;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_202:
          re::internal::assertLog((re::internal *)6, v24, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 528, v10);
          _os_crash();
          __break(1u);
          goto LABEL_203;
        }
        uint64_t v167 = *((void *)v213 + 3);
        int v168 = (void *)(v167 + 528 * v164);
        v168[55] = v214[4];
        v168[56] = v214[6];
        uint64_t v169 = v168 + 6;
        if (re::DynamicInlineArray<re::RenderCamera,2ul>::ensureCapacity(v168 + 6, v151))
        {
          uint64_t v171 = v167 + 528 * v164;
          uint64_t v172 = v171 + 32 * *v169;
          long long v173 = *(_OWORD *)(v165 + v163 + 48);
          *(_OWORD *)(v172 + 64) = *(_OWORD *)(v165 + v163 + 32);
          *(_OWORD *)(v172 + 80) = v173;
          ++*v169;
          ++*(_DWORD *)(v171 + 56);
        }
        v174 = (void *)(v167 + 528 * v164 + 128);
        if (re::DynamicInlineArray<re::RenderCamera,2ul>::ensureCapacity(v174, v170))
        {
          uint64_t v175 = v167 + 528 * v164;
          unsigned int v176 = (_OWORD *)(v175 + (*v174 << 6));
          long long v178 = *(_OWORD *)(v165 + v163 + 64);
          long long v177 = *(_OWORD *)(v165 + v163 + 80);
          long long v179 = *(_OWORD *)(v165 + v163 + 112);
          v176[11] = *(_OWORD *)(v165 + v163 + 96);
          v176[12] = v179;
          v176[9] = v178;
          v176[10] = v177;
          ++*v174;
          ++*(_DWORD *)(v175 + 136);
        }
        uint64_t v180 = v167 + 528 * v164;
        *(_OWORD *)(v180 + 416) = xmmword_23435FBB0;
        *(unsigned char *)(v180 + 473) = *(unsigned char *)(v165 + v163 + 312);
        int v181 = *(_DWORD *)(v165 + v163 + 308);
        if (!*(unsigned char *)(v180 + 476)) {
          *(unsigned char *)(v180 + 476) = 1;
        }
        *(_DWORD *)(v167 + 528 * v164 + 480) = v181;
        unint64_t v10 = __src[2];
        if (v10 <= v164) {
          goto LABEL_199;
        }
        uint64_t v182 = __src[3];
        uint64_t v183 = (unsigned char *)(v182 + 2 * v164);
        if (*v183 || *(unsigned char *)(v165 + v163 + 304))
        {
          if (!*v183 || *(unsigned char *)(v165 + v163 + 304))
          {
            if (*v183 || !*(unsigned char *)(v165 + v163 + 304))
            {
              char v185 = *(unsigned char *)(v165 + v163 + 305);
              uint64_t v184 = v182 + 2 * v164;
            }
            else
            {
              *uint64_t v183 = 1;
              uint64_t v184 = v182 + 2 * v164;
              char v185 = *(unsigned char *)(v165 + v163 + 305);
            }
            *(unsigned char *)(v184 + 1) = v185;
          }
          else
          {
            *uint64_t v183 = 0;
          }
        }
        unint64_t v10 = *(void *)(v211 + 16);
        if (v10 <= v164) {
          goto LABEL_200;
        }
        uint64_t v186 = v165 + v163;
        v187.i64[0] = *(void *)(v165 + v163 + 140);
        v187.i64[1] = *(void *)(v165 + v163 + 128);
        uint64_t v188 = *(void *)(v211 + 24) + 32 * v164;
        *(float32x4_t *)(v188 + 8) = vcvtq_f32_u32(v187);
        *(void *)(v188 + 24) = 0x3F80000000000000;
        unint64_t v10 = *(void *)(v209 + 16);
        if (v10 <= v164) {
          goto LABEL_201;
        }
        uint64_t v189 = *(void *)(v209 + 24);
        uint64_t v190 = v189 + 160 * v164;
        *(unsigned char *)(v190 + 16) = *(unsigned char *)(v186 + 160);
        uint64_t v191 = v190 + 16;
        int v192 = *(unsigned __int8 *)(v186 + 161);
        if (*(unsigned char *)(v191 + 1) || v192)
        {
          if (!*(unsigned char *)(v191 + 1) || v192)
          {
            if (!*(unsigned char *)(v191 + 1) && v192) {
              *(unsigned char *)(v191 + 1) = 1;
            }
            *(unsigned char *)(v191 + 2) = *(unsigned char *)(v165 + v163 + 162);
          }
          else
          {
            *(unsigned char *)(v191 + 1) = 0;
          }
        }
        if (*(unsigned char *)(v191 + 4) || *(unsigned char *)(v165 + v163 + 164))
        {
          if (!*(unsigned char *)(v191 + 4) || *(unsigned char *)(v165 + v163 + 164))
          {
            if (!*(unsigned char *)(v191 + 4))
            {
              if (*(unsigned char *)(v165 + v163 + 164)) {
                *(unsigned char *)(v191 + 4) = 1;
              }
            }
            *(_DWORD *)(v191 + 8) = *(_DWORD *)(v165 + v163 + 168);
          }
          else
          {
            *(unsigned char *)(v191 + 4) = 0;
          }
        }
        unint64_t v193 = (_OWORD *)(v189 + 160 * v164);
        long long v194 = *(_OWORD *)(v165 + v163 + 176);
        long long v195 = *(_OWORD *)(v165 + v163 + 192);
        long long v196 = *(_OWORD *)(v165 + v163 + 224);
        v193[4] = *(_OWORD *)(v165 + v163 + 208);
        v193[5] = v196;
        v193[2] = v194;
        v193[3] = v195;
        long long v197 = *(_OWORD *)(v165 + v163 + 240);
        long long v198 = *(_OWORD *)(v165 + v163 + 256);
        long long v199 = *(_OWORD *)(v165 + v163 + 288);
        v193[8] = *(_OWORD *)(v165 + v163 + 272);
        v193[9] = v199;
        v193[6] = v197;
        v193[7] = v198;
        ++v164;
      }
      v163 += 320;
    }
    while (v166 != v163);
  }
  re::RenderFrame::emitGraph(v206, "SingleGraphShadows", v204);
  ++*v205;
}

void re::RealityEmitterBase::emitFilterMapGraph(uint64_t a1, re::Allocator **a2, uint64_t a3, uint64_t a4)
{
  uint64_t v94 = *MEMORY[0x263EF8340];
  uint64_t v4 = a2[19];
  if (v4)
  {
    unint64_t v7 = a2[21];
    uint64_t v8 = *a2;
    uint64_t v83 = a4 + 176;
    uint64_t v79 = a4 + 64;
    unint64_t v80 = (re::Allocator *)((char *)v7 + 352 * (void)v4);
    uint64_t v78 = a3 + 96;
    do
    {
      if (*((__int16 *)v7 + 74) != -1)
      {
        if (*((unsigned char *)v7 + 8)) {
          uint64_t v9 = *((void *)v7 + 2);
        }
        else {
          uint64_t v9 = (uint64_t)v7 + 9;
        }
        re::DynamicString::format((re::DynamicString *)"%s_%s", (re::DynamicString *)&v84, v9, "Filter");
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9BB30, memory_order_acquire) & 1) == 0
          && __cxa_guard_acquire(&qword_26AF9BB30))
        {
          qword_26AF9BB28 = re::hashString((re *)"Filter", v77);
          __cxa_guard_release(&qword_26AF9BB30);
        }
        unint64_t v10 = qword_26AF9BB28;
        if (v85) {
          uint64_t v11 = v87;
        }
        else {
          uint64_t v11 = v86;
        }
        size_t v12 = strlen(v11);
        unint64_t v13 = 0x9E3779B97F4A7C17;
        if (v12)
        {
          MurmurHash3_x64_128((uint64_t)v11, v12, 0, &v90);
          unint64_t v13 = ((v91 - 0x61C8864680B583E9 + (v90 << 6) + (v90 >> 2)) ^ v90) - 0x61C8864680B583E9;
        }
        unint64_t v89 = 0;
        uint64_t v88 = 0;
        {
          re::introspect<re::CameraData>(void)::info = (_UNKNOWN *)re::introspect_CameraData(0);
        }
        uint64_t v88 = (re::CameraData *)re::introspect<re::CameraData>(void)::info;
        size_t v14 = strlen(*((const char **)re::introspect<re::CameraData>(void)::info + 6));
        if (v14)
        {
          MurmurHash3_x64_128(*((void *)re::introspect<re::CameraData>(void)::info + 6), v14, 0, &v90);
          unint64_t v15 = (v91 - 0x61C8864680B583E9 + (v90 << 6) + (v90 >> 2)) ^ v90;
        }
        else
        {
          unint64_t v15 = 0;
        }
        unint64_t v89 = v15;
        re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addOrReplace<re::IntrospectionStructure const*&>(v83, &v89, &v88);
        uint64_t v81 = ((v10 >> 2) + (v10 << 6) + v13) ^ v10;
        uint64_t v16 = v81 - 0x61C8864680B583E9;
        unint64_t v90 = (v81 - 0x61C8864680B583E9 + (v89 << 6) + (v89 >> 2)) ^ v89;
        unint64_t v17 = (re::CameraData *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a4 + 8) + 32))(*(void *)(a4 + 8), 528, 16);
        uint64_t v88 = re::CameraData::CameraData(v17, v8);
        unint64_t v18 = (re *)re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addNew<re::CameraData *>(v79, &v90, &v88);
        uint64_t v19 = *(void *)v18;
        re::globalAllocators(v18);
        uint64_t v20 = (*(uint64_t (**)(re::Allocator *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 56, 8);
        *(_OWORD *)(v20 + 16) = 0u;
        *(_OWORD *)(v20 + 32) = 0u;
        *(void *)(v20 + 40) = 0;
        *(void *)(v20 + 48) = 0;
        *(_OWORD *)uint64_t v20 = 0u;
        *(_DWORD *)(v20 + 16) = 1;
        *(void *)(v20 + 24) = 0;
        *(void *)(v20 + 32) = 0;
        *(_DWORD *)(v20 + 48) = 0;
        uint64_t v21 = re::globalAllocators((re *)v20)[2];
        unint64_t v90 = (unint64_t)&unk_26E71BC00;
        uint64_t v92 = v21;
        uint64_t v93 = &v90;
        uint64_t v22 = (*(uint64_t (**)(re::Allocator *, uint64_t, unint64_t *))(*(void *)v8 + 16))(v8, v20, &v90);
        re::FunctionBase<24ul,void ()(void *)>::destroyCallable((uint64_t)&v90);
        uint64_t v23 = re::BucketArray<re::MeshSceneCollection,16ul>::addUninitialized(v22);
        re::DynamicArray<re::MeshScene>::DynamicArray(v23, (uint64_t *)v7 + 38);
        *(void *)(v19 + 440) = v22;
        *(void *)(v19 + 448) = 0;
        if (re::DynamicInlineArray<re::RenderCamera,2ul>::ensureCapacity((void *)(v19 + 48), v24))
        {
          uint64_t v26 = v19 + 48 + 32 * *(void *)(v19 + 48);
          long long v27 = *((_OWORD *)v7 + 3);
          *(_OWORD *)(v26 + 16) = *((_OWORD *)v7 + 2);
          *(_OWORD *)(v26 + 32) = v27;
          ++*(void *)(v19 + 48);
          ++*(_DWORD *)(v19 + 56);
        }
        if (re::DynamicInlineArray<re::RenderCamera,2ul>::ensureCapacity((void *)(v19 + 128), v25))
        {
          unint64_t v28 = (_OWORD *)(v19 + 128 + (*(void *)(v19 + 128) << 6));
          long long v30 = *((_OWORD *)v7 + 4);
          long long v29 = *((_OWORD *)v7 + 5);
          long long v31 = *((_OWORD *)v7 + 7);
          v28[3] = *((_OWORD *)v7 + 6);
          v28[4] = v31;
          v28[1] = v30;
          v28[2] = v29;
          ++*(void *)(v19 + 128);
          ++*(_DWORD *)(v19 + 136);
        }
        *(_OWORD *)(v19 + 416) = xmmword_23435FBB0;
        unint64_t v89 = 0;
        uint64_t v88 = 0;
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9BCA0, memory_order_acquire) & 1) == 0
          && __cxa_guard_acquire(&qword_26AF9BCA0))
        {
          qword_26AF9BC98 = re::introspect_FilterMapAtlasData(0);
          __cxa_guard_release(&qword_26AF9BCA0);
        }
        uint64_t v88 = (re::CameraData *)qword_26AF9BC98;
        size_t v32 = strlen(*(const char **)(qword_26AF9BC98 + 48));
        if (v32)
        {
          MurmurHash3_x64_128(*(void *)(qword_26AF9BC98 + 48), v32, 0, &v90);
          unint64_t v33 = (v91 - 0x61C8864680B583E9 + (v90 << 6) + (v90 >> 2)) ^ v90;
        }
        else
        {
          unint64_t v33 = 0;
        }
        unint64_t v89 = v33;
        re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addOrReplace<re::IntrospectionStructure const*&>(v83, &v89, &v88);
        unint64_t v34 = (v16 + (v89 << 6) + (v89 >> 2)) ^ v89;
        uint64_t v35 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a4 + 8) + 32))(*(void *)(a4 + 8), 32, 8);
        *(void *)uint64_t v35 = &unk_26E70E1B0;
        *(void *)(v35 + 8) = 0;
        *(_OWORD *)(v35 + 16) = xmmword_23440EC70;
        unint64_t v36 = *(void *)(a4 + 64);
        if (!v36
          || (unint64_t v36 = v34 % *(unsigned int *)(a4 + 88),
              uint64_t v37 = *(unsigned int *)(*(void *)(a4 + 72) + 4 * v36),
              v37 == 0x7FFFFFFF))
        {
LABEL_30:
          uint64_t v39 = *(unsigned int *)(a4 + 100);
          if (v39 == 0x7FFFFFFF)
          {
            uint64_t v39 = *(unsigned int *)(a4 + 96);
            int v40 = v39;
            if (v39 == *(_DWORD *)(a4 + 88))
            {
              re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(v79, 2 * *(_DWORD *)(a4 + 92));
              unint64_t v36 = v34 % *(unsigned int *)(a4 + 88);
              int v40 = *(_DWORD *)(a4 + 96);
            }
            *(_DWORD *)(a4 + 96) = v40 + 1;
            uint64_t v41 = *(void *)(a4 + 80);
            int v42 = *(_DWORD *)(v41 + 24 * v39);
          }
          else
          {
            uint64_t v41 = *(void *)(a4 + 80);
            int v42 = *(_DWORD *)(v41 + 24 * v39);
            *(_DWORD *)(a4 + 100) = v42 & 0x7FFFFFFF;
          }
          uint64_t v43 = 24 * v39;
          *(_DWORD *)(v41 + v43) = v42 | 0x80000000;
          *(_DWORD *)(*(void *)(a4 + 80) + v43) = *(_DWORD *)(*(void *)(a4 + 80) + 24 * v39) & 0x80000000 | *(_DWORD *)(*(void *)(a4 + 72) + 4 * v36);
          *(void *)(*(void *)(a4 + 80) + 24 * v39 + 8) = v34;
          *(void *)(*(void *)(a4 + 80) + 24 * v39 + 16) = v35;
          *(_DWORD *)(*(void *)(a4 + 72) + 4 * v36) = v39;
          ++*(_DWORD *)(a4 + 92);
          ++*(_DWORD *)(a4 + 104);
          int v44 = (uint64_t *)(*(void *)(a4 + 80) + 24 * v39 + 16);
        }
        else
        {
          uint64_t v38 = *(void *)(a4 + 80);
          while (*(void *)(v38 + 24 * v37 + 8) != v34)
          {
            LODWORD(v37) = *(_DWORD *)(v38 + 24 * v37) & 0x7FFFFFFF;
            if (v37 == 0x7FFFFFFF) {
              goto LABEL_30;
            }
          }
          int v44 = (uint64_t *)(v38 + 24 * v37 + 16);
        }
        uint64_t v45 = *v44;
        *(void *)(v45 + 8) = *((void *)a2[1] + 34);
        *(_DWORD *)(v45 + 16) = 115;
        *(void *)(v45 + 24) = *(void *)(a3 + 416);
        unint64_t v89 = 0;
        uint64_t v88 = 0;
        {
          re::introspect<re::ViewportData>(void)::info = (_UNKNOWN *)re::introspect_ViewportData(0);
        }
        uint64_t v88 = (re::CameraData *)re::introspect<re::ViewportData>(void)::info;
        size_t v46 = strlen(*((const char **)re::introspect<re::ViewportData>(void)::info + 6));
        if (v46)
        {
          MurmurHash3_x64_128(*((void *)re::introspect<re::ViewportData>(void)::info + 6), v46, 0, &v90);
          unint64_t v47 = (v91 - 0x61C8864680B583E9 + (v90 << 6) + (v90 >> 2)) ^ v90;
        }
        else
        {
          unint64_t v47 = 0;
        }
        unint64_t v89 = v47;
        re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addOrReplace<re::IntrospectionStructure const*&>(v83, &v89, &v88);
        unint64_t v48 = (v16 + (v89 << 6) + (v89 >> 2)) ^ v89;
        unint64_t v49 = (void *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a4 + 8) + 32))(*(void *)(a4 + 8), 32, 8);
        *unint64_t v49 = &unk_26E70E090;
        v49[1] = 0;
        v49[2] = 0;
        v49[3] = 0x3F80000000000000;
        unint64_t v50 = *(void *)(a4 + 64);
        if (!v50
          || (unint64_t v50 = v48 % *(unsigned int *)(a4 + 88),
              uint64_t v51 = *(unsigned int *)(*(void *)(a4 + 72) + 4 * v50),
              v51 == 0x7FFFFFFF))
        {
LABEL_46:
          uint64_t v53 = *(unsigned int *)(a4 + 100);
          if (v53 == 0x7FFFFFFF)
          {
            uint64_t v53 = *(unsigned int *)(a4 + 96);
            int v54 = v53;
            if (v53 == *(_DWORD *)(a4 + 88))
            {
              re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(v79, 2 * *(_DWORD *)(a4 + 92));
              unint64_t v50 = v48 % *(unsigned int *)(a4 + 88);
              int v54 = *(_DWORD *)(a4 + 96);
            }
            *(_DWORD *)(a4 + 96) = v54 + 1;
            uint64_t v55 = *(void *)(a4 + 80);
            int v56 = *(_DWORD *)(v55 + 24 * v53);
          }
          else
          {
            uint64_t v55 = *(void *)(a4 + 80);
            int v56 = *(_DWORD *)(v55 + 24 * v53);
            *(_DWORD *)(a4 + 100) = v56 & 0x7FFFFFFF;
          }
          uint64_t v57 = 24 * v53;
          *(_DWORD *)(v55 + v57) = v56 | 0x80000000;
          *(_DWORD *)(*(void *)(a4 + 80) + v57) = *(_DWORD *)(*(void *)(a4 + 80) + 24 * v53) & 0x80000000 | *(_DWORD *)(*(void *)(a4 + 72) + 4 * v50);
          *(void *)(*(void *)(a4 + 80) + 24 * v53 + 8) = v48;
          *(void *)(*(void *)(a4 + 80) + 24 * v53 + 16) = v49;
          *(_DWORD *)(*(void *)(a4 + 72) + 4 * v50) = v53;
          ++*(_DWORD *)(a4 + 92);
          ++*(_DWORD *)(a4 + 104);
          uint64_t v58 = *(void *)(a4 + 80) + 24 * v53;
        }
        else
        {
          uint64_t v52 = *(void *)(a4 + 80);
          while (*(void *)(v52 + 24 * v51 + 8) != v48)
          {
            LODWORD(v51) = *(_DWORD *)(v52 + 24 * v51) & 0x7FFFFFFF;
            if (v51 == 0x7FFFFFFF) {
              goto LABEL_46;
            }
          }
          uint64_t v58 = v52 + 24 * v51;
        }
        uint64_t v59 = *(void *)(v58 + 16);
        v60.i64[0] = *(void *)((char *)v7 + 140);
        v60.i64[1] = *((void *)v7 + 16);
        *(float32x4_t *)(v59 + 8) = vcvtq_f32_u32(v60);
        *(void *)(v59 + 24) = 0x3F80000000000000;
        unint64_t v61 = (unint64_t)"N2re22MeshLodSelectInputDataE";
        if (((unint64_t)"N2re22MeshLodSelectInputDataE" & 0x8000000000000000) != 0)
        {
          uint64_t v62 = (unsigned __int8 *)((unint64_t)"N2re22MeshLodSelectInputDataE" & 0x7FFFFFFFFFFFFFFFLL);
          uint64_t v63 = 5381;
          do
          {
            unint64_t v61 = v63;
            unsigned int v64 = *v62++;
            uint64_t v63 = (33 * v63) ^ v64;
          }
          while (v64);
        }
        unint64_t v90 = (v16 + (v61 << 6) + (v61 >> 2)) ^ v61;
        uint64_t v65 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a3 + 40) + 32))(*(void *)(a3 + 40), 160, 16);
        *(_OWORD *)uint64_t v65 = 0u;
        *(_OWORD *)(v65 + 16) = 0u;
        *(_OWORD *)(v65 + 96) = 0u;
        *(_OWORD *)(v65 + 112) = 0u;
        *(_OWORD *)(v65 + 144) = 0u;
        *(_OWORD *)(v65 + 32) = 0u;
        *(_OWORD *)(v65 + 48) = 0u;
        *(_OWORD *)(v65 + 64) = 0u;
        *(_OWORD *)(v65 + 80) = 0u;
        *(void *)uint64_t v65 = &unk_26E711050;
        *(unsigned char *)(v65 + 16) = 1;
        *(_DWORD *)(v65 + 96) = 0;
        *(_OWORD *)(v65 + 100) = xmmword_234390F00;
        *(void *)(v65 + 116) = 0xBDCCCCCD3DCCCCCDLL;
        *(_OWORD *)(v65 + 128) = xmmword_23435FD80;
        *(_DWORD *)(v65 + 144) = 1;
        unint64_t v89 = v65;
        long long v66 = (uint64_t *)re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addNew<re::CameraData *>(v78, &v90, &v89);
        uint64_t v67 = *v66;
        *(unsigned char *)(v67 + 16) = *((unsigned char *)v7 + 160);
        if (*(unsigned char *)(v67 + 17) || *((unsigned char *)v7 + 161))
        {
          if (!*(unsigned char *)(v67 + 17) || *((unsigned char *)v7 + 161))
          {
            if (!*(unsigned char *)(v67 + 17) && *((unsigned char *)v7 + 161)) {
              *(unsigned char *)(v67 + 17) = 1;
            }
            *(unsigned char *)(v67 + 18) = *((unsigned char *)v7 + 162);
          }
          else
          {
            *(unsigned char *)(v67 + 17) = 0;
          }
        }
        if (*(unsigned char *)(v67 + 20) || *((unsigned char *)v7 + 164))
        {
          if (!*(unsigned char *)(v67 + 20) || *((unsigned char *)v7 + 164))
          {
            if (!*(unsigned char *)(v67 + 20) && *((unsigned char *)v7 + 164)) {
              *(unsigned char *)(v67 + 20) = 1;
            }
            *(_DWORD *)(v67 + 24) = *((_DWORD *)v7 + 42);
          }
          else
          {
            *(unsigned char *)(v67 + 20) = 0;
          }
        }
        long long v68 = *((_OWORD *)v7 + 11);
        long long v69 = *((_OWORD *)v7 + 12);
        long long v70 = *((_OWORD *)v7 + 14);
        *(_OWORD *)(v67 + 64) = *((_OWORD *)v7 + 13);
        *(_OWORD *)(v67 + 80) = v70;
        *(_OWORD *)(v67 + 32) = v68;
        *(_OWORD *)(v67 + 48) = v69;
        long long v71 = *((_OWORD *)v7 + 15);
        long long v72 = *((_OWORD *)v7 + 16);
        long long v73 = *((_OWORD *)v7 + 18);
        *(_OWORD *)(v67 + 128) = *((_OWORD *)v7 + 17);
        *(_OWORD *)(v67 + 144) = v73;
        *(_OWORD *)(v67 + 96) = v71;
        *(_OWORD *)(v67 + 112) = v72;
        re::RealityEmitterBase::addSceneDataToDataStore((uint64_t)v66, (uint64_t)a2, v81, a4);
        if (v85) {
          uint64_t v74 = v87;
        }
        else {
          uint64_t v74 = v86;
        }
        size_t v75 = strlen(v74);
        uint64_t v76 = (void *)re::GrowableLinearAllocator::alloc((re::GrowableLinearAllocator *)(*(void *)(a3 + 3824) + 24), v75 + 1, 0);
        memcpy(v76, v74, v75);
        *((unsigned char *)v76 + v75) = 0;
        re::RenderFrame::emitGraph((re::RenderFrame *)a3, "Filter", (const char *)v76);
        if (v84)
        {
          if (v85) {
            (*(void (**)(void))(*(void *)v84 + 40))();
          }
        }
      }
      unint64_t v7 = (re::Allocator *)((char *)v7 + 352);
    }
    while (v7 != v80);
  }
}

void re::RealityEmitterBase::emitVisualProxyHighFidelityGraph(uint64_t a1, uint64_t a2, re::RenderFrame *a3, re *a4)
{
  v14[2] = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a2 + 176);
  if (v4)
  {
    {
      re::RealityEmitterBase::emitVisualProxyHighFidelityGraph(re::RenderSceneContext &,re::RenderFrame &,re::RenderGraphDataStore &)::kVisualProxyHighFidelityunint64_t ScopeHash = re::hashString((re *)"VisualProxyHighFidelity", v12);
    }
    {
      re::RealityEmitterBase::emitVisualProxyHighFidelityGraph(re::RenderSceneContext &,re::RenderFrame &,re::RenderGraphDataStore &)::kVisualProxyHighFidelityCombinedunint64_t ScopeHash = re::getCombinedScopeHash(re::RealityEmitterBase::emitVisualProxyHighFidelityGraph(re::RenderSceneContext &,re::RenderFrame &,re::RenderGraphDataStore &)::kVisualProxyHighFidelityScopeHash, "RenderFrame", v13);
    }
    uint64_t v8 = re::RenderGraphDataStore::tryGet<re::RenderGraphDataStoreWrapper<re::VisualProxyHighFidelityHandlerData>>((uint64_t)a4, re::RealityEmitterBase::emitVisualProxyHighFidelityGraph(re::RenderSceneContext &,re::RenderFrame &,re::RenderGraphDataStore &)::kVisualProxyHighFidelityCombinedScopeHash);
    if (!v8)
    {
      unint64_t v9 = 0x9E3779B97F4A7C17;
      unint64_t v10 = re::RealityEmitterBase::emitVisualProxyHighFidelityGraph(re::RenderSceneContext &,re::RenderFrame &,re::RenderGraphDataStore &)::kVisualProxyHighFidelityScopeHash;
      size_t v11 = strlen(*(const char **)(a2 + 56));
      if (v11)
      {
        MurmurHash3_x64_128(*(void *)(a2 + 56), v11, 0, v14);
        unint64_t v9 = ((v14[1] - 0x61C8864680B583E9 + (v14[0] << 6) + (v14[0] >> 2)) ^ v14[0]) - 0x61C8864680B583E9;
      }
      uint64_t v8 = re::RenderGraphDataStore::add<re::RenderGraphDataStoreWrapper<re::VisualProxyHighFidelityHandlerData>>(a4, ((v10 >> 2) + (v10 << 6) + v9) ^ v10);
    }
    re::DynamicArray<re::ProviderHandle>::operator=(v8 + 8, v4);
    re::RenderFrame::emitGraph(a3, "VisualProxyHighFidelity", *(const char **)(a2 + 56));
  }
}

void re::RealityEmitterBase::emitCameraGraphs(unsigned char *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint8x8_t a7)
{
  uint64_t v8 = a4;
  uint64_t v101 = *MEMORY[0x263EF8340];
  char v86 = 0;
  uint64_t v12 = *(void *)(*(void *)(a4 + 8) + 88);
  if (!v12)
  {
    if (!a1[496]) {
      goto LABEL_9;
    }
    unint64_t v13 = a1 + 496;
    goto LABEL_7;
  }
  unint64_t v93 = 0xE32A9F87631BCE4ALL;
  v94[0] = (uint64_t)"overdraw:enable";
  re::DebugSettingsManager::getWithErrorCode<BOOL>(v12, &v93, &v86);
  re::StringID::destroyString((re::StringID *)&v93);
  if (v86 == a1[496]) {
    goto LABEL_9;
  }
  unint64_t v13 = a1 + 496;
  if (!v86)
  {
LABEL_7:
    uint64_t v21 = *((void *)a1 + 31);
    re::StringID::StringID((re::StringID *)v84, (const StringID *)(a1 + 552));
    uint64_t v85 = *((void *)a1 + 71);
    re::RenderGraphManager::removeProvider(v21, (uint64_t)v84);
    re::StringID::destroyString((re::StringID *)v84);
    re::ProviderHandle::invalidate((re::ProviderHandle *)(a1 + 552));
    goto LABEL_8;
  }
  size_t v14 = (re::RenderGraphManager *)*((void *)a1 + 31);
  uint64_t v15 = re::AssetHandle::asset<re::RenderGraphAsset>((re::RenderGraphAsset *)(a1 + 504));
  re::RenderGraphManager::addProviderInternal(v14, "Camera", (const re::RenderGraphProviderBase *)(v15 + 8), 0, 0, (uint64_t)&v93);
  unint64_t v16 = v93;
  uint64_t v17 = v94[0];
  unint64_t v93 = 0;
  v94[0] = (uint64_t)"";
  uint64_t v18 = *((void *)a1 + 69);
  *((void *)a1 + 69) = v16;
  unint64_t v19 = v16 & 0xFFFFFFFFFFFFFFFELL | v18 & 1;
  uint64_t v20 = *((void *)a1 + 70);
  *((void *)a1 + 70) = v17;
  *(void *)&long long v89 = v19;
  *((void *)&v89 + 1) = v20;
  re::StringID::destroyString((re::StringID *)&v89);
  *((void *)a1 + 71) = v94[1];
  re::StringID::destroyString((re::StringID *)&v93);
LABEL_8:
  *unint64_t v13 = v86;
LABEL_9:
  a7.i32[0] = *(_DWORD *)(a3 + 456);
  if (vmovn_s16((int16x8_t)vmovl_u8(a7)).u32[0]) {
    BOOL v22 = 0;
  }
  else {
    BOOL v22 = (*(unsigned char *)(a3 + 462) | *(unsigned char *)(a3 + 461)) == 0;
  }
  BOOL v23 = v22 && *(unsigned char *)(a3 + 460) == 0;
  unint64_t v80 = a2;
  uint64_t v82 = a3;
  uint64_t v83 = (re::RenderFrame *)v8;
  if (!v23)
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9BB70, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_26AF9BB70))
    {
      qword_26AF9BB68 = re::hashString((re *)"DynamicFunctionConstants", v63);
      __cxa_guard_release(&qword_26AF9BB70);
    }
    unint64_t v24 = 0x9E3779B97F4A7C17;
    unint64_t v25 = qword_26AF9BB68;
    size_t v26 = strlen(*(const char **)(a3 + 56));
    if (v26)
    {
      MurmurHash3_x64_128(*(void *)(a3 + 56), v26, 0, &v93);
      unint64_t v24 = ((v94[0] - 0x61C8864680B583E9 + (v93 << 6) + (v93 >> 2)) ^ v93) - 0x61C8864680B583E9;
    }
    uint64_t v27 = re::RenderGraphDataStore::tryGet<re::DynamicFunctionConstantsData>(a5, ((v25 >> 2) + (v25 << 6) + v24) ^ v25);
    if (!v27)
    {
      unint64_t v93 = *(void *)(v8 + 376);
      LODWORD(v89) = 7;
      uint64_t v27 = re::RenderGraphDataStore::add<re::DynamicFunctionConstantsData,re::PerFrameAllocator *,int>(a5, ((v25 >> 2) + (v25 << 6) + v24) ^ v25, (uint64_t *)&v93, (int *)&v89);
    }
    a2 = v80;
    if (*(unsigned char *)(a3 + 456))
    {
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9BB80, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26AF9BB80))
      {
        qword_26AF9BB78 = re::hashString((re *)"EnableDynamicLighting", v64);
        __cxa_guard_release(&qword_26AF9BB80);
      }
      LODWORD(v93) = 1;
      re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::addOrReplace((_anonymous_namespace_ *)(v27 + 8), &qword_26AF9BB78, (int *)&v93);
    }
    if (*(unsigned char *)(a3 + 457))
    {
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9BB90, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26AF9BB90))
      {
        qword_26AF9BB88 = re::hashString((re *)"EnableShadowedDynamicLight", v65);
        __cxa_guard_release(&qword_26AF9BB90);
      }
      LODWORD(v93) = 1;
      re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::addOrReplace((_anonymous_namespace_ *)(v27 + 8), &qword_26AF9BB88, (int *)&v93);
    }
    if (*(unsigned char *)(a3 + 458))
    {
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9BBA0, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26AF9BBA0))
      {
        qword_26AF9BB98 = re::hashString((re *)"EnableAREnvProbe", v66);
        __cxa_guard_release(&qword_26AF9BBA0);
      }
      LODWORD(v93) = 1;
      re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::addOrReplace((_anonymous_namespace_ *)(v27 + 8), &qword_26AF9BB98, (int *)&v93);
      uint64_t v28 = re::RenderGraphDataStore::tryGet<re::ProbeContext>(a5, (int)"ProbeContext", "RenderFrame");
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9BBB0, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26AF9BBB0))
      {
        qword_26AF9BBA8 = re::hashString((re *)"LocalProbeCount", v67);
        __cxa_guard_release(&qword_26AF9BBB0);
      }
      re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::addOrReplace((_anonymous_namespace_ *)(v27 + 8), &qword_26AF9BBA8, (_DWORD *)(v28 + 24));
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9BBC0, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26AF9BBC0))
      {
        qword_26AF9BBB8 = re::hashString((re *)"GlobalProbeCount", v68);
        __cxa_guard_release(&qword_26AF9BBC0);
      }
      re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::addOrReplace((_anonymous_namespace_ *)(v27 + 8), &qword_26AF9BBB8, (_DWORD *)(v28 + 28));
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9BBD0, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26AF9BBD0))
      {
        qword_26AF9BBC8 = re::hashString((re *)"EnableCrossBlending", v69);
        __cxa_guard_release(&qword_26AF9BBD0);
      }
      LODWORD(v93) = *(unsigned __int8 *)(v28 + 32);
      re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::addOrReplace((_anonymous_namespace_ *)(v27 + 8), &qword_26AF9BBC8, (int *)&v93);
    }
    if (*(unsigned char *)(a3 + 459))
    {
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9BBE0, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26AF9BBE0))
      {
        qword_26AF9BBD8 = re::hashString((re *)"EnableVirtualEnvironmentProbes", v70);
        __cxa_guard_release(&qword_26AF9BBE0);
      }
      LODWORD(v93) = 1;
      re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::addOrReplace((_anonymous_namespace_ *)(v27 + 8), &qword_26AF9BBD8, (int *)&v93);
    }
    if (*(unsigned char *)(a3 + 460))
    {
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9BBF0, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26AF9BBF0))
      {
        qword_26AF9BBE8 = re::hashString((re *)"PortalClippingMode", v71);
        __cxa_guard_release(&qword_26AF9BBF0);
      }
      LODWORD(v93) = 1;
      re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::addOrReplace((_anonymous_namespace_ *)(v27 + 8), &qword_26AF9BBE8, (int *)&v93);
    }
    if (*(unsigned char *)(a3 + 461))
    {
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9BC00, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26AF9BC00))
      {
        qword_26AF9BBF8 = re::hashString((re *)"EnableIBLRotation", v72);
        __cxa_guard_release(&qword_26AF9BC00);
      }
      LODWORD(v93) = *(unsigned __int8 *)(a3 + 461);
      re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::addOrReplace((_anonymous_namespace_ *)(v27 + 8), &qword_26AF9BBF8, (int *)&v93);
    }
    if (*(unsigned char *)(a3 + 462))
    {
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9BC10, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26AF9BC10))
      {
        qword_26AF9BC08 = re::hashString((re *)"EnableIBLBlending", v73);
        __cxa_guard_release(&qword_26AF9BC10);
      }
      LODWORD(v93) = *(unsigned __int8 *)(a3 + 462);
      re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::addOrReplace((_anonymous_namespace_ *)(v27 + 8), &qword_26AF9BC08, (int *)&v93);
    }
  }
  uint64_t v79 = *(void *)(a3 + 184);
  if (v79)
  {
    uint64_t v77 = *(void *)(v79 + 40);
    if (v77)
    {
      for (unint64_t i = 0; i != v77; ++i)
      {
        uint64_t v30 = re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[](v79, i);
        uint64_t v31 = *(void *)(v30 + 16);
        if (v31)
        {
          size_t v32 = *(char **)(v30 + 32);
          uint64_t v33 = 672 * v31;
          do
          {
            if (a6)
            {
              uint64_t v34 = v82;
              re::RealityEmitterBase::beforeCameraViewHandlerCommon<re::CameraView>((uint64_t)a1, a2, v82, (re::RenderFrame *)v8, a5, "Camera", (const re::CameraView *)v32);
              (*(void (**)(unsigned char *, void *, uint64_t, uint64_t, uint64_t, const char *, char *))(*(void *)a1 + 112))(a1, a2, v82, v8, a5, "Camera", v32);
              re::RealityEmitterBase::afterCameraViewHandlerRealityRenderer((uint64_t)a1, v82, (re::RenderFrame *)v8, a5, (uint64_t)v32);
            }
            else
            {
              uint64_t v34 = v82;
              (*(void (**)(unsigned char *, void *, uint64_t, uint64_t, uint64_t, const char *, char *))(*(void *)a1 + 80))(a1, a2, v82, v8, a5, "Camera", v32);
              (*(void (**)(unsigned char *, void *, uint64_t, uint64_t, uint64_t, const char *, char *))(*(void *)a1 + 96))(a1, a2, v82, v8, a5, "Camera", v32);
              if (a1[496])
              {
                if (*((void *)v32 + 1)) {
                  uint64_t v35 = (const char *)*((void *)v32 + 2);
                }
                else {
                  uint64_t v35 = v32 + 9;
                }
                re::RenderFrame::emitGraph((re::RenderFrame *)v8, "OverdrawHeatmap", v35);
              }
              else
              {
                (*(void (**)(unsigned char *, void *, uint64_t, uint64_t, uint64_t, const char *, char *))(*(void *)a1 + 120))(a1, a2, v82, v8, a5, "Camera", v32);
              }
            }
            ++*(_WORD *)(v34 + 64);
            v32 += 672;
            v33 -= 672;
          }
          while (v33);
        }
      }
    }
  }
  uint64_t v36 = v82;
  uint64_t v75 = *(void *)(v82 + 192);
  if (v75)
  {
    uint64_t v74 = *(void *)(v75 + 40);
    if (v74)
    {
      unint64_t v37 = 0;
      do
      {
        unint64_t v76 = v37;
        uint64_t v38 = re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[](v75, v37);
        uint64_t v39 = *(void *)(v38 + 16);
        if (v39)
        {
          uint64_t v40 = *(void *)(v38 + 32);
          uint64_t v78 = v40 + 1360 * v39;
          do
          {
            int v41 = *(unsigned __int8 *)(v40 + 1344);
            if ((re::RenderManager::isProtoStereoRenderingEnabled(*(re::RenderManager **)(v8 + 8)) | a6 ^ 1) == 1
              && v41 == 1)
            {
              if (a6)
              {
                unint64_t v48 = 0x9E3779B97F4A7C17;
                re::RealityEmitterBase::beforeCameraViewHandlerCommon<re::CameraMultiView>((uint64_t)a1, v80, v36, (re::RenderFrame *)v8, a5, "Camera", (const re::CameraMultiView *)v40);
                re::RealityEmitterBase::cameraViewHandlerCommon<re::CameraMultiView>((uint64_t)a1, (uint64_t)v80, v36, v8, a5, "Camera", v40);
                if (*(unsigned char *)(v40 + 8)) {
                  unint64_t v49 = *(const char **)(v40 + 16);
                }
                else {
                  unint64_t v49 = (const char *)(v40 + 9);
                }
                if (!*(unsigned char *)(v40 + 348))
                {
                  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9BC40, memory_order_acquire) & 1) == 0
                    && __cxa_guard_acquire(&qword_26AF9BC40))
                  {
                    MurmurHash3_x64_128((uint64_t)"PostProcess", 11, 0, &v93);
                    qword_26AF9BC38 = (v94[0] - 0x61C8864680B583E9 + (v93 << 6) + (v93 >> 2)) ^ v93;
                    __cxa_guard_release(&qword_26AF9BC40);
                  }
                  unint64_t v50 = qword_26AF9BC38;
                  size_t v51 = strlen(v49);
                  unint64_t v53 = 0x9E3779B97F4A7C17;
                  if (v51)
                  {
                    MurmurHash3_x64_128((uint64_t)v49, v51, 0, &v93);
                    unint64_t v53 = ((v94[0] - 0x61C8864680B583E9 + (v93 << 6) + (v93 >> 2)) ^ v93) - 0x61C8864680B583E9;
                  }
                  uint64_t v54 = ((v50 >> 2) + (v50 << 6) + v53) ^ v50;
                  re::CameraMultiView::makeViewportPercentDataInstancedMode((re::CameraMultiView *)v40, v52, (uint64_t)&v93);
                  uint64_t v55 = (_anonymous_namespace_ *)re::RenderGraphDataStore::add<re::ViewportPercentData,re::ViewportPercentData>(a5, v54, (uint64_t)&v93);
                  long long v89 = xmmword_23435FD50;
                  long long v90 = xmmword_23435FD60;
                  long long v91 = xmmword_23435FD80;
                  long long v92 = xmmword_23435FBB0;
                  re::DynamicArray<re::Matrix4x4<float>>::add((_anonymous_namespace_ *)v95, (uint64_t)&v89);
                  long long v89 = xmmword_23435FD50;
                  long long v90 = xmmword_23435FD60;
                  long long v91 = xmmword_23435FD80;
                  long long v92 = xmmword_23435FBB0;
                  re::DynamicArray<re::Matrix4x4<float>>::add((_anonymous_namespace_ *)v95, (uint64_t)&v89);
                  long long v89 = xmmword_23435FD50;
                  long long v90 = xmmword_23435FD60;
                  long long v91 = xmmword_23435FD80;
                  long long v92 = xmmword_23435FBB0;
                  re::DynamicArray<re::Matrix4x4<float>>::add((_anonymous_namespace_ *)v94, (uint64_t)&v89);
                  long long v89 = xmmword_23435FD50;
                  long long v90 = xmmword_23435FD60;
                  long long v91 = xmmword_23435FD80;
                  long long v92 = xmmword_23435FBB0;
                  re::DynamicArray<re::Matrix4x4<float>>::add((_anonymous_namespace_ *)v94, (uint64_t)&v89);
                  char v100 = 2;
                  unint64_t v56 = qword_26AF9BC38;
                  size_t v57 = strlen(v49);
                  if (v57)
                  {
                    MurmurHash3_x64_128((uint64_t)v49, v57, 0, (unint64_t *)&v89);
                    unint64_t v48 = ((*((void *)&v89 + 1)
                          - 0x61C8864680B583E9
                          + ((void)v89 << 6)
                          + ((unint64_t)v89 >> 2)) ^ v89)
                        - 0x61C8864680B583E9;
                  }
                  int v87 = 0;
                  unint64_t v88 = 0;
                  {
                    re::introspect<re::CameraMatrices>(void)::info = (_UNKNOWN *)re::introspect_CameraMatrices(0);
                  }
                  int v87 = re::introspect<re::CameraMatrices>(void)::info;
                  size_t v58 = strlen(*((const char **)re::introspect<re::CameraMatrices>(void)::info + 6));
                  if (v58)
                  {
                    MurmurHash3_x64_128(*((void *)re::introspect<re::CameraMatrices>(void)::info + 6), v58, 0, (unint64_t *)&v89);
                    unint64_t v59 = (*((void *)&v89 + 1)
                         - 0x61C8864680B583E9
                         + ((void)v89 << 6)
                         + ((unint64_t)v89 >> 2)) ^ v89;
                  }
                  else
                  {
                    unint64_t v59 = 0;
                  }
                  unint64_t v88 = v59;
                  re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addOrReplace<re::IntrospectionStructure const*&>(a5 + 176, &v88, &v87);
                  *(void *)&long long v89 = ((((v56 >> 2) + (v56 << 6) + v48) ^ v56)
                                   - 0x61C8864680B583E9
                                   + (v88 << 6)
                                   + (v88 >> 2)) ^ v88;
                  uint64_t v61 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a5 + 8) + 32))(*(void *)(a5 + 8), 144, 16);
                  *(void *)uint64_t v61 = &unk_26E70E270;
                  re::DynamicArray<re::Matrix4x4<float>>::DynamicArray(v61 + 8, v94);
                  re::DynamicArray<re::Matrix4x4<float>>::DynamicArray(v61 + 48, v95);
                  int v62 = v98;
                  *(unsigned char *)(v61 + 96) = v98;
                  if (v62) {
                    *(_OWORD *)(v61 + 112) = v99;
                  }
                  *(unsigned char *)(v61 + 128) = v100;
                  int v87 = (void *)v61;
                  re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addNew<re::CameraData *>(a5 + 64, (unint64_t *)&v89, &v87);
                  re::RenderFrame::emitGraph(v83, "PostProcess", v49);
                  *(unsigned char *)(*(void *)(*(void *)(*((void *)v83 + 1) + 104) + 1648) + 16) = 0;
                  if (v95[0])
                  {
                    if (v97) {
                      (*(void (**)(void))(*(void *)v95[0] + 40))();
                    }
                    uint64_t v97 = 0;
                    memset(v95, 0, sizeof(v95));
                    ++v96;
                  }
                  if (v94[0] && v94[4]) {
                    (*(void (**)(void))(*(void *)v94[0] + 40))();
                  }
                }
              }
              else
              {
                (*(void (**)(unsigned char *, void *, uint64_t, uint64_t, uint64_t, const char *, uint64_t))(*(void *)a1 + 88))(a1, v80, v36, v8, a5, "Camera", v40);
                (*(void (**)(unsigned char *, void *, uint64_t, uint64_t, uint64_t, const char *, uint64_t))(*(void *)a1 + 104))(a1, v80, v36, v8, a5, "Camera", v40);
                if (a1[496])
                {
                  if (*(void *)(v40 + 8)) {
                    uint32x4_t v60 = *(const char **)(v40 + 16);
                  }
                  else {
                    uint32x4_t v60 = (const char *)(v40 + 9);
                  }
                  re::RenderFrame::emitGraph((re::RenderFrame *)v8, "OverdrawHeatmap", v60);
                }
                else
                {
                  (*(void (**)(unsigned char *, void *, uint64_t, uint64_t, uint64_t, const char *, uint64_t))(*(void *)a1 + 128))(a1, v80, v36, v8, a5, "Camera", v40);
                }
              }
            }
            else
            {
              char v43 = 0;
              int v44 = (const re::CameraView *)v40;
              uint64_t v45 = 1;
              do
              {
                char v46 = v43;
                if (a6)
                {
                  re::RealityEmitterBase::beforeCameraViewHandlerCommon<re::CameraView>((uint64_t)a1, v80, v82, v83, a5, "Camera", v44);
                  (*(void (**)(unsigned char *, void *, uint64_t, re::RenderFrame *, uint64_t, const char *, const re::CameraView *))(*(void *)a1 + 112))(a1, v80, v82, v83, a5, "Camera", v44);
                  re::RealityEmitterBase::afterCameraViewHandlerRealityRenderer((uint64_t)a1, v82, v83, a5, (uint64_t)v44);
                }
                else
                {
                  (*(void (**)(unsigned char *, void *, uint64_t, re::RenderFrame *, uint64_t, const char *, const re::CameraView *))(*(void *)a1 + 80))(a1, v80, v82, v83, a5, "Camera", v44);
                  (*(void (**)(unsigned char *, void *, uint64_t, re::RenderFrame *, uint64_t, const char *, const re::CameraView *))(*(void *)a1 + 96))(a1, v80, v82, v83, a5, "Camera", v44);
                  if (a1[496])
                  {
                    if (*(void *)(v40 + 8)) {
                      unint64_t v47 = *(const char **)(v40 + 16);
                    }
                    else {
                      unint64_t v47 = (const char *)(v40 + 9);
                    }
                    re::RenderFrame::emitGraph(v83, "OverdrawHeatmap", v47);
                  }
                  else
                  {
                    (*(void (**)(unsigned char *, void *, uint64_t, re::RenderFrame *, uint64_t, const char *, const re::CameraView *))(*(void *)a1 + 120))(a1, v80, v82, v83, a5, "Camera", v44);
                  }
                }
                int v44 = (const re::CameraView *)(v40 + 672 * v45);
                char v43 = 1;
                uint64_t v45 = 2;
              }
              while ((v46 & 1) == 0);
            }
            uint64_t v36 = v82;
            uint64_t v8 = (uint64_t)v83;
            ++*(_WORD *)(v82 + 64);
            v40 += 1360;
          }
          while (v40 != v78);
        }
        unint64_t v37 = v76 + 1;
      }
      while (v76 + 1 != v74);
    }
  }
}

uint64_t re::RealityEmitterBase::addSceneDataToDataStore(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a2 + 56);
  v11[0] = &unk_26E711090;
  v11[1] = v7;
  re::RenderGraphDataStore::add<re::SceneScope,re::SceneScope>(a4, a3, (uint64_t)v11);
  unint64_t v9 = &unk_26E7110D0;
  int v10 = *(_DWORD *)(a2 + 440);
  return re::RenderGraphDataStore::add<re::SceneIndexData,re::SceneIndexData>(a4, a3, (uint64_t)&v9);
}

uint64_t re::RenderGraphDataStore::tryGet<re::RenderGraphDataStoreWrapper<re::VisualProxyHighFidelityHandlerData>>(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = (unint64_t)"N2re27RenderGraphDataStoreWrapperINS_34VisualProxyHighFidelityHandlerDataEEE";
  if (((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_34VisualProxyHighFidelityHandlerDataEEE" & 0x8000000000000000) != 0)
  {
    unint64_t v3 = (unsigned __int8 *)((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_34VisualProxyHighFidelityHandlerDataEEE" & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v4 = 5381;
    do
    {
      unint64_t v2 = v4;
      unsigned int v5 = *v3++;
      uint64_t v4 = (33 * v4) ^ v5;
    }
    while (v5);
  }
  unint64_t v7 = (a2 + (v2 << 6) + (v2 >> 2) - 0x61C8864680B583E9) ^ v2;
  uint64_t result = re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(a1 + 16, (uint64_t *)&v7);
  if (result) {
    return *(void *)result;
  }
  return result;
}

uint64_t re::RenderGraphDataStore::add<re::RenderGraphDataStoreWrapper<re::VisualProxyHighFidelityHandlerData>>(re *a1, uint64_t a2)
{
  unint64_t v2 = (unint64_t)"N2re27RenderGraphDataStoreWrapperINS_34VisualProxyHighFidelityHandlerDataEEE";
  if (((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_34VisualProxyHighFidelityHandlerDataEEE" & 0x8000000000000000) != 0)
  {
    unint64_t v3 = (unsigned __int8 *)((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_34VisualProxyHighFidelityHandlerDataEEE" & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v4 = 5381;
    do
    {
      unint64_t v2 = v4;
      unsigned int v5 = *v3++;
      uint64_t v4 = (33 * v4) ^ v5;
    }
    while (v5);
  }
  uint64_t v11 = (a2 + (v2 << 6) + (v2 >> 2) - 0x61C8864680B583E9) ^ v2;
  uint64_t v6 = (uint64_t)a1 + 16;
  unint64_t v7 = re::globalAllocators(a1);
  uint64_t v8 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7[2] + 32))(v7[2], 48, 8);
  v8[4] = 0;
  v8[5] = 0;
  *uint64_t v8 = &unk_26E71C120;
  v8[1] = 0;
  v8[2] = 0;
  unint64_t v8[3] = 0;
  *((_DWORD *)v8 + 8) = 0;
  int v10 = v8;
  return *(void *)re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addNew<re::CameraData *>(v6, (unint64_t *)&v11, &v10);
}

void re::RealityEmitterBase::emitPlanarProjectiveShadowGraph(uint64_t a1, void *a2, re::RenderFrame *a3, uint64_t a4)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9BB50, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9BB50))
  {
    qword_26AF9BB48 = re::hashString((re *)"ProjectiveShadow", v49);
    __cxa_guard_release(&qword_26AF9BB50);
  }
  uint64_t v7 = a2[2];
  if (v7)
  {
    uint64_t v8 = a2[3];
    uint64_t v9 = v8 + 464 * v7;
    uint64_t v51 = a4 + 64;
    char v10 = 1;
    do
    {
      while (1)
      {
        uint64_t v11 = *(void *)(v8 + 360);
        if (!v11) {
          break;
        }
        uint64_t v52 = a3;
        uint64_t v12 = *(void *)(v8 + 368);
        uint64_t v13 = v12 + 24 * v11;
        do
        {
          uint64_t v14 = *(void *)(v12 + 8);
          if (v14)
          {
            uint64_t v15 = *(void *)(v12 + 16);
            uint64_t v16 = 96 * v14;
            do
            {
              re::BucketArray<re::MeshSceneCollection,16ul>::add(*(void *)(v8 + 32), v15);
              v15 += 96;
              v16 -= 96;
            }
            while (v16);
          }
          v12 += 24;
        }
        while (v12 != v13);
        unint64_t v17 = qword_26AF9BB48;
        size_t v18 = strlen(*(const char **)(v8 + 56));
        unint64_t v19 = 0x9E3779B97F4A7C17;
        if (v18)
        {
          MurmurHash3_x64_128(*(void *)(v8 + 56), v18, 0, &v53);
          unint64_t v19 = ((v54 - 0x61C8864680B583E9 + (v53 << 6) + (v53 >> 2)) ^ v53) - 0x61C8864680B583E9;
        }
        unint64_t v20 = (unint64_t)"N2re27RenderGraphDataStoreWrapperINS_18PlanarReceiverDataEEE";
        if (((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_18PlanarReceiverDataEEE" & 0x8000000000000000) != 0)
        {
          uint64_t v21 = (unsigned __int8 *)((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_18PlanarReceiverDataEEE" & 0x7FFFFFFFFFFFFFFFLL);
          uint64_t v22 = 5381;
          do
          {
            unint64_t v20 = v22;
            unsigned int v23 = *v21++;
            uint64_t v22 = (33 * v22) ^ v23;
          }
          while (v23);
        }
        unint64_t v24 = ((((v17 >> 2) + (v17 << 6) + v19) ^ v17) - 0x61C8864680B583E9 + (v20 << 6) + (v20 >> 2)) ^ v20;
        uint64_t v25 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a4 + 8) + 32))(*(void *)(a4 + 8), 80, 8);
        *(void *)uint64_t v25 = &unk_26E71C160;
        *(void *)(v25 + 8) = 0;
        *(void *)(v25 + 16) = 0;
        *(void *)(v25 + 24) = 0;
        *(void *)(v25 + 8) = *(void *)(v8 + 352);
        *(void *)(v8 + 352) = 0;
        *(void *)(v25 + 16) = *(void *)(v8 + 360);
        *(void *)(v8 + 360) = 0;
        uint64_t v26 = *(void *)(v25 + 24);
        *(void *)(v25 + 24) = *(void *)(v8 + 368);
        *(void *)(v8 + 368) = v26;
        *(_OWORD *)(v25 + 48) = 0u;
        *(_DWORD *)(v25 + 64) = 0;
        *(_OWORD *)(v25 + 32) = 0u;
        *(void *)(v25 + 68) = 0x7FFFFFFFLL;
        re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)(v25 + 32), (uint64_t *)(v8 + 376));
        unint64_t v27 = *(void *)(a4 + 64);
        if (!v27
          || (unint64_t v27 = v24 % *(unsigned int *)(a4 + 88),
              uint64_t v28 = *(unsigned int *)(*(void *)(a4 + 72) + 4 * v27),
              v28 == 0x7FFFFFFF))
        {
LABEL_22:
          uint64_t v30 = *(unsigned int *)(a4 + 100);
          if (v30 == 0x7FFFFFFF)
          {
            uint64_t v30 = *(unsigned int *)(a4 + 96);
            int v31 = v30;
            if (v30 == *(_DWORD *)(a4 + 88))
            {
              re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(v51, 2 * *(_DWORD *)(a4 + 92));
              unint64_t v27 = v24 % *(unsigned int *)(a4 + 88);
              int v31 = *(_DWORD *)(a4 + 96);
            }
            *(_DWORD *)(a4 + 96) = v31 + 1;
            uint64_t v32 = *(void *)(a4 + 80);
            int v33 = *(_DWORD *)(v32 + 24 * v30);
          }
          else
          {
            uint64_t v32 = *(void *)(a4 + 80);
            int v33 = *(_DWORD *)(v32 + 24 * v30);
            *(_DWORD *)(a4 + 100) = v33 & 0x7FFFFFFF;
          }
          uint64_t v34 = 24 * v30;
          *(_DWORD *)(v32 + v34) = v33 | 0x80000000;
          *(_DWORD *)(*(void *)(a4 + 80) + v34) = *(_DWORD *)(*(void *)(a4 + 80) + 24 * v30) & 0x80000000 | *(_DWORD *)(*(void *)(a4 + 72) + 4 * v27);
          *(void *)(*(void *)(a4 + 80) + 24 * v30 + 8) = v24;
          *(void *)(*(void *)(a4 + 80) + 24 * v30 + 16) = v25;
          *(_DWORD *)(*(void *)(a4 + 72) + 4 * v27) = v30;
          ++*(_DWORD *)(a4 + 92);
          ++*(_DWORD *)(a4 + 104);
        }
        else
        {
          uint64_t v29 = *(void *)(a4 + 80);
          while (*(void *)(v29 + 24 * v28 + 8) != v24)
          {
            LODWORD(v28) = *(_DWORD *)(v29 + 24 * v28) & 0x7FFFFFFF;
            if (v28 == 0x7FFFFFFF) {
              goto LABEL_22;
            }
          }
        }
        char v10 = 0;
        v8 += 464;
        a3 = v52;
        if (v8 == v9) {
          goto LABEL_31;
        }
      }
      v8 += 464;
    }
    while (v8 != v9);
    if (v10) {
      return;
    }
LABEL_31:
    unint64_t v53 = (unint64_t)&unk_26E71BC58;
    uint64_t v54 = a2[14];
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9BB60, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_26AF9BB60))
    {
      qword_26AF9BB58 = re::getCombinedScopeHash(qword_26AF9BB48, "RenderFrame", v50);
      __cxa_guard_release(&qword_26AF9BB60);
    }
    unint64_t v35 = (unint64_t)"N2re28ProjectiveShadowMapDimensionE";
    if (((unint64_t)"N2re28ProjectiveShadowMapDimensionE" & 0x8000000000000000) != 0)
    {
      uint64_t v36 = (unsigned __int8 *)((unint64_t)"N2re28ProjectiveShadowMapDimensionE" & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v37 = 5381;
      do
      {
        unint64_t v35 = v37;
        unsigned int v38 = *v36++;
        uint64_t v37 = (33 * v37) ^ v38;
      }
      while (v38);
    }
    unint64_t v39 = (qword_26AF9BB58 - 0x61C8864680B583E9 + (v35 << 6) + (v35 >> 2)) ^ v35;
    uint64_t v40 = (void *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a4 + 8) + 32))(*(void *)(a4 + 8), 16, 8);
    *uint64_t v40 = &unk_26E71BC58;
    v40[1] = v54;
    unint64_t v41 = *(void *)(a4 + 64);
    if (v41)
    {
      unint64_t v41 = v39 % *(unsigned int *)(a4 + 88);
      uint64_t v42 = *(unsigned int *)(*(void *)(a4 + 72) + 4 * v41);
      if (v42 != 0x7FFFFFFF)
      {
        uint64_t v48 = *(void *)(a4 + 80);
        if (*(void *)(v48 + 24 * v42 + 8) == v39)
        {
LABEL_43:
          re::RenderFrame::emitGraph(a3, "ProjectiveShadow", "RenderFrame");
          return;
        }
        while (1)
        {
          LODWORD(v42) = *(_DWORD *)(v48 + 24 * v42) & 0x7FFFFFFF;
          if (v42 == 0x7FFFFFFF) {
            break;
          }
          if (*(void *)(v48 + 24 * v42 + 8) == v39) {
            goto LABEL_43;
          }
        }
      }
    }
    uint64_t v43 = *(unsigned int *)(a4 + 100);
    if (v43 == 0x7FFFFFFF)
    {
      uint64_t v43 = *(unsigned int *)(a4 + 96);
      int v44 = v43;
      if (v43 == *(_DWORD *)(a4 + 88))
      {
        re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(v51, 2 * *(_DWORD *)(a4 + 92));
        LODWORD(v41) = v39 % *(unsigned int *)(a4 + 88);
        int v44 = *(_DWORD *)(a4 + 96);
      }
      *(_DWORD *)(a4 + 96) = v44 + 1;
      uint64_t v45 = *(void *)(a4 + 80);
      int v46 = *(_DWORD *)(v45 + 24 * v43);
    }
    else
    {
      uint64_t v45 = *(void *)(a4 + 80);
      int v46 = *(_DWORD *)(v45 + 24 * v43);
      *(_DWORD *)(a4 + 100) = v46 & 0x7FFFFFFF;
    }
    uint64_t v47 = 24 * v43;
    *(_DWORD *)(v45 + v47) = v46 | 0x80000000;
    *(_DWORD *)(*(void *)(a4 + 80) + v47) = *(_DWORD *)(*(void *)(a4 + 80) + 24 * v43) & 0x80000000 | *(_DWORD *)(*(void *)(a4 + 72) + 4 * v41);
    *(void *)(*(void *)(a4 + 80) + 24 * v43 + 8) = v39;
    *(void *)(*(void *)(a4 + 80) + 24 * v43 + 16) = v40;
    *(_DWORD *)(*(void *)(a4 + 72) + 4 * v41) = v43;
    ++*(_DWORD *)(a4 + 92);
    ++*(_DWORD *)(a4 + 104);
    goto LABEL_43;
  }
}

void re::RealityEmitterBase::execute(re::RealityEmitterBase *this, re::RenderManager *a2)
{
  uint64_t v4 = mach_absolute_time();
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v35, 5089, (uint64_t)a2);
  (*(void (**)(re::RealityEmitterBase *, re::RenderManager *))(*(void *)this + 56))(this, a2);
  re::RenderGraphEmitterBase::execute(this, a2);
  uint64_t v5 = *((void *)a2 + 13);
  if (v5) {
    uint64_t v6 = re::RenderFrameBox::get(v5 + 344, 0xFFFFFFFFFFFFFFFuLL);
  }
  else {
    uint64_t v6 = 0;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9BC20, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9BC20))
  {
    qword_26AF9BC18 = re::getCombinedScopeHash((re *)"RenderFrameContext", "RenderFrame", v34);
    __cxa_guard_release(&qword_26AF9BC20);
  }
  unint64_t v7 = (unint64_t)"N2re27RenderGraphDataStoreWrapperINS_18RenderFrameContextEEE";
  unint64_t v8 = (unint64_t)"N2re27RenderGraphDataStoreWrapperINS_18RenderFrameContextEEE";
  if (((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_18RenderFrameContextEEE" & 0x8000000000000000) != 0)
  {
    uint64_t v9 = (unsigned __int8 *)((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_18RenderFrameContextEEE" & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v10 = 5381;
    do
    {
      unint64_t v8 = v10;
      unsigned int v11 = *v9++;
      uint64_t v10 = (33 * v10) ^ v11;
    }
    while (v11);
  }
  unint64_t v36 = (qword_26AF9BC18 + (v8 << 6) + (v8 >> 2) - 0x61C8864680B583E9) ^ v8;
  uint64_t v12 = (re::ProfilerConfig *)re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(v6 + 96, (uint64_t *)&v36);
  if (v12 && *(void *)v12)
  {
    if (((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_18RenderFrameContextEEE" & 0x8000000000000000) != 0)
    {
      uint64_t v13 = (unsigned __int8 *)((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_18RenderFrameContextEEE" & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v14 = 5381;
      do
      {
        unint64_t v7 = v14;
        unsigned int v15 = *v13++;
        uint64_t v14 = (33 * v14) ^ v15;
      }
      while (v15);
    }
    unint64_t v36 = (qword_26AF9BC18 - 0x61C8864680B583E9 + (v7 << 6) + (v7 >> 2)) ^ v7;
    uint64_t v12 = (re::ProfilerConfig *)re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(v6 + 96, (uint64_t *)&v36);
    if (v12)
    {
      if (*(void *)(v6 + 96))
      {
        unint64_t v16 = v36 % *(unsigned int *)(v6 + 120);
        uint64_t v17 = *(void *)(v6 + 104);
        uint64_t v18 = *(unsigned int *)(v17 + 4 * v16);
        if (v18 != 0x7FFFFFFF)
        {
          uint64_t v19 = *(void *)(v6 + 112);
          if (*(void *)(v19 + 24 * v18 + 8) == v36)
          {
            *(_DWORD *)(v17 + 4 * v16) = *(_DWORD *)(v19 + 24 * v18) & 0x7FFFFFFF;
LABEL_21:
            uint64_t v21 = *(void *)(v6 + 112);
            uint64_t v22 = (int *)(v21 + 24 * v18);
            int v23 = *v22;
            if (*v22 < 0)
            {
              *uint64_t v22 = v23 & 0x7FFFFFFF;
              uint64_t v21 = *(void *)(v6 + 112);
              int v23 = *(_DWORD *)(v21 + 24 * v18);
            }
            *(_DWORD *)(v21 + 24 * v18) = *(_DWORD *)(v6 + 132) | v23 & 0x80000000;
            --*(_DWORD *)(v6 + 124);
            int v24 = *(_DWORD *)(v6 + 136) + 1;
            *(_DWORD *)(v6 + 132) = v18;
            *(_DWORD *)(v6 + 136) = v24;
          }
          else
          {
            while (1)
            {
              unsigned int v20 = v18;
              LODWORD(v18) = *(_DWORD *)(v19 + 24 * v18) & 0x7FFFFFFF;
              if (v18 == 0x7FFFFFFF) {
                break;
              }
              if (*(void *)(v19 + 24 * v18 + 8) == v36)
              {
                *(_DWORD *)(v19 + 24 * v20) = *(_DWORD *)(v19 + 24 * v20) & 0x80000000 | *(_DWORD *)(v19 + 24 * v18) & 0x7FFFFFFF;
                goto LABEL_21;
              }
            }
          }
        }
      }
    }
  }
  uint64_t v25 = *((void *)a2 + 13);
  if (v25)
  {
    uint64_t v26 = *(void *)(v25 + 1648);
    if (v26)
    {
      if (!*(unsigned char *)(v26 + 296))
      {
        isStatisticCollectionEnabled = (re *)re::ProfilerConfig::isStatisticCollectionEnabled(v12);
        if (isStatisticCollectionEnabled)
        {
          uint64_t v28 = re::profilerThreadContext(isStatisticCollectionEnabled);
          uint64_t v29 = mach_absolute_time();
          uint64_t v30 = *(int64x2_t **)(v28 + 152);
          if (v30)
          {
            uint64_t v31 = v30[376].u64[0];
            if (v31 >= v29 - v4) {
              uint64_t v31 = v29 - v4;
            }
            v30[376].i64[0] = v31;
            uint64_t v32 = v30[376].u64[1];
            if (v32 <= v29 - v4) {
              uint64_t v32 = v29 - v4;
            }
            v30[376].i64[1] = v32;
            int64x2_t v33 = vdupq_n_s64(1uLL);
            v33.i64[0] = v29 - v4;
            v30[377] = vaddq_s64(v30[377], v33);
            *(unsigned char *)(v28 + 184) = 0;
          }
        }
      }
    }
  }
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v35);
}

uint64_t anonymous namespace'::getSourceTable(_anonymous_namespace_ *this, const char *a2, const char *a3, const char *a4, re::RenderFrame *a5)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  if (!strcmp((const char *)this, "global"))
  {
    uint64_t v12 = *(re::MaterialManager **)(*((void *)a4 + 1) + 24);
    return re::MaterialManager::findTextureTableByName(v12, (const char *)this);
  }
  else
  {
    unint64_t v9 = 0x9E3779B97F4A7C17;
    size_t v10 = strlen(a2);
    if (v10)
    {
      MurmurHash3_x64_128((uint64_t)a2, v10, 0, &v26);
      unint64_t v11 = (v27 - 0x61C8864680B583E9 + (v26 << 6) + (v26 >> 2)) ^ v26;
    }
    else
    {
      unint64_t v11 = 0;
    }
    size_t v14 = strlen(a3);
    unint64_t v15 = 0x9E3779B97F4A7C17;
    if (v14)
    {
      MurmurHash3_x64_128((uint64_t)a3, v14, 0, &v26);
      unint64_t v15 = ((v27 - 0x61C8864680B583E9 + (v26 << 6) + (v26 >> 2)) ^ v26) - 0x61C8864680B583E9;
    }
    uint64_t v16 = ((v11 >> 2) + (v11 << 6) + v15) ^ v11;
    uint64_t v17 = re::RenderGraphDataStore::tryGet<re::SceneIndexData>((uint64_t)(a4 + 32), v16);
    if (v17) {
      goto LABEL_11;
    }
    uint64_t v19 = re::RenderGraphDataStore::tryGet<re::SceneScope>((uint64_t)(a4 + 32), v16);
    if (!v19) {
      goto LABEL_17;
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9BC80, memory_order_acquire) & 1) == 0)
    {
      uint64_t v23 = v19;
      int v25 = __cxa_guard_acquire(&qword_26AF9BC80);
      uint64_t v19 = v23;
      if (v25)
      {
        qword_26AF9BC78 = re::hashString((re *)"SceneIndex", v24);
        __cxa_guard_release(&qword_26AF9BC80);
        uint64_t v19 = v23;
      }
    }
    unint64_t v20 = qword_26AF9BC78;
    uint64_t v21 = *(const char **)(v19 + 8);
    size_t v22 = strlen(v21);
    if (v22)
    {
      MurmurHash3_x64_128((uint64_t)v21, v22, 0, &v26);
      unint64_t v9 = ((v27 - 0x61C8864680B583E9 + (v26 << 6) + (v26 >> 2)) ^ v26) - 0x61C8864680B583E9;
    }
    uint64_t v17 = re::RenderGraphDataStore::tryGet<re::SceneIndexData>((uint64_t)(a4 + 32), ((v20 >> 2) + (v20 << 6) + v9) ^ v20);
    if (v17) {
LABEL_11:
    }
      uint64_t v18 = *(unsigned int *)(v17 + 8);
    else {
LABEL_17:
    }
      uint64_t v18 = 0;
    return re::MaterialManager::findPerSceneTextureTableByName(*(re::MaterialManager **)(*((void *)a4 + 1) + 24), (const char *)this, v18);
  }
}

uint64_t re::RenderGraphUpdateMaterialTextureSource::configure(re::RenderGraphUpdateMaterialTextureSource *this, const char *a2, const char *a3, re::RenderFrame *a4, re::RenderFrame *a5)
{
  if (*((unsigned char *)this + 264)) {
    uint64_t v6 = (_anonymous_namespace_ *)*((void *)this + 34);
  }
  else {
    uint64_t v6 = (re::RenderGraphUpdateMaterialTextureSource *)((char *)this + 265);
  }
  *((unsigned char *)this + 336) = result != 0;
  return result;
}

void re::RenderGraphUpdateMaterialTextureSource::setup(re::RenderGraphUpdateMaterialTextureSource *this, re::RenderGraphBuilder *a2, re::RenderGraphDataStore *a3)
{
  if (*((unsigned char *)this + 336))
  {
    uint64_t v5 = *((unsigned int *)this + 80);
    if (v5)
    {
      uint64_t v6 = 0;
      unint64_t v7 = (int *)(*((void *)this + 38) + 8);
      while (1)
      {
        int v8 = *v7;
        v7 += 16;
        if (v8 < 0) {
          break;
        }
        if (v5 == ++v6)
        {
          LODWORD(v6) = *((_DWORD *)this + 80);
          break;
        }
      }
    }
    else
    {
      LODWORD(v6) = 0;
    }
    if (v5 != v6)
    {
      uint64_t v9 = v6;
      do
      {
        uint64_t v10 = *((void *)this + 38);
        memset(v13, 0, 7);
        uint64_t v14 = 2;
        re::RenderGraphBuilder::read((uint64_t)a2, v10 + (v9 << 6) + 48, (uint64_t)v13);
        if (*((_DWORD *)this + 80) <= (v6 + 1)) {
          int v11 = v6 + 1;
        }
        else {
          int v11 = *((_DWORD *)this + 80);
        }
        int v12 = v6;
        while (1)
        {
          uint64_t v9 = (v12 + 1);
          if (v11 - 1 == v12) {
            break;
          }
          ++v12;
          LODWORD(v6) = v9;
          if ((*(_DWORD *)(*((void *)this + 38) + (v9 << 6) + 8) & 0x80000000) != 0) {
            goto LABEL_18;
          }
        }
        LODWORD(v6) = v11;
LABEL_18:
        ;
      }
      while (v5 != v6);
    }
    *((unsigned char *)a2 + 592) = 1;
  }
}

void re::RenderGraphUpdateMaterialTextureSource::execute(re::RenderGraphUpdateMaterialTextureSource *this, re::RenderGraphContext *a2)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v33, 5044, 0);
  if (*((unsigned char *)this + 336))
  {
    uint64_t v4 = *((void *)this + 33);
    uint64_t v5 = (v4 & 1) != 0 ? (const char *)*((void *)this + 34) : (char *)this + 265;
    if (!strcmp(v5, "global"))
    {
      int v8 = (v4 & 1) != 0 ? (const char *)*((void *)this + 34) : (char *)this + 265;
      uint64_t TextureTableByName = re::MaterialManager::findTextureTableByName(*(re::MaterialManager **)(*((void *)a2 + 1) + 24), v8);
    }
    else
    {
      uint64_t v6 = re::RenderGraphDataStore::tryGet<re::SceneIndexData>(*((void *)a2 + 146), *(void *)(*((void *)a2 + 5) + 48));
      if (v6) {
        goto LABEL_7;
      }
      uint64_t v9 = re::RenderGraphDataStore::tryGet<re::SceneScope>(*((void *)a2 + 146), *(void *)(*((void *)a2 + 5) + 48));
      if (!v9) {
        goto LABEL_15;
      }
      uint64_t v10 = v9;
      unint64_t v11 = 0x9E3779B97F4A7C17;
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9BC90, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26AF9BC90))
      {
        MurmurHash3_x64_128((uint64_t)"SceneIndex", 10, 0, &v34);
        qword_26AF9BC88 = (v35 - 0x61C8864680B583E9 + (v34 << 6) + (v34 >> 2)) ^ v34;
        __cxa_guard_release(&qword_26AF9BC90);
      }
      unint64_t v12 = qword_26AF9BC88;
      uint64_t v13 = *(const char **)(v10 + 8);
      size_t v14 = strlen(v13);
      if (v14)
      {
        MurmurHash3_x64_128((uint64_t)v13, v14, 0, &v34);
        unint64_t v11 = ((v35 - 0x61C8864680B583E9 + (v34 << 6) + (v34 >> 2)) ^ v34) - 0x61C8864680B583E9;
      }
      uint64_t v6 = re::RenderGraphDataStore::tryGet<re::SceneIndexData>(*((void *)a2 + 146), ((v12 >> 2) + (v12 << 6) + v11) ^ v12);
      if (v6) {
LABEL_7:
      }
        uint64_t v7 = *(unsigned int *)(v6 + 8);
      else {
LABEL_15:
      }
        uint64_t v7 = 0;
      unint64_t v15 = (*((unsigned char *)this + 264) & 1) != 0 ? (const char *)*((void *)this + 34) : (char *)this + 265;
      uint64_t TextureTableByName = re::MaterialManager::findPerSceneTextureTableByName(*(re::MaterialManager **)(*((void *)a2 + 1) + 24), v15, v7);
    }
    uint64_t v17 = (void *)TextureTableByName;
    uint64_t v18 = *((unsigned int *)this + 80);
    if (v18)
    {
      uint64_t v19 = 0;
      unint64_t v20 = (int *)(*((void *)this + 38) + 8);
      while (1)
      {
        int v21 = *v20;
        v20 += 16;
        if (v21 < 0) {
          break;
        }
        if (v18 == ++v19)
        {
          LODWORD(v19) = *((_DWORD *)this + 80);
          break;
        }
      }
    }
    else
    {
      LODWORD(v19) = 0;
    }
    if (v18 != v19)
    {
      uint64_t v22 = v19;
      do
      {
        uint64_t v23 = *((void *)this + 38) + (v22 << 6);
        uint64_t v24 = v23 + 48;
        if (*(unsigned char *)(v23 + 24))
        {
          int v25 = *(char **)(v23 + 32);
          re::RenderGraphContext::metalTexture((uint64_t)a2, v24, 0, 0, &v32);
          if (!v25)
          {
            uint64_t v26 = 0x7FFFFFFFFFFFFFFFLL;
            goto LABEL_39;
          }
        }
        else
        {
          int v25 = (char *)(v23 + 25);
          re::RenderGraphContext::metalTexture((uint64_t)a2, v24, 0, 0, &v32);
        }
        uint64_t v26 = *v25;
        if (*v25)
        {
          char v27 = v25[1];
          if (v27)
          {
            uint64_t v28 = (unsigned __int8 *)(v25 + 2);
            do
            {
              uint64_t v26 = 31 * v26 + v27;
              int v29 = *v28++;
              char v27 = v29;
            }
            while (v29);
          }
          v26 &= ~0x8000000000000000;
        }
LABEL_39:
        unint64_t v34 = v26;
        re::TextureTable::setTexture(v17, (uint64_t *)&v34, &v32);
        if (v32) {

        }
        if (*((_DWORD *)this + 80) <= (v19 + 1)) {
          int v30 = v19 + 1;
        }
        else {
          int v30 = *((_DWORD *)this + 80);
        }
        while (1)
        {
          uint64_t v22 = (v19 + 1);
          if (v30 - 1 == v19) {
            break;
          }
          LODWORD(v19) = v19 + 1;
          int v31 = v22;
          if ((*(_DWORD *)(*((void *)this + 38) + (v22 << 6) + 8) & 0x80000000) != 0) {
            goto LABEL_48;
          }
        }
        int v31 = v30;
LABEL_48:
        LODWORD(v19) = v31;
      }
      while (v18 != v31);
    }
  }
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v33);
}

void *re::allocInfo_RealityEmitterBase(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9BC48, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9BC48))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF9BD58, "RealityEmitterBase");
    __cxa_guard_release(&qword_26AF9BC48);
  }
  return &unk_26AF9BD58;
}

void re::initInfo_RealityEmitterBase(re *this, re::IntrospectionBase *a2)
{
  v21[0] = 0xABD03B7E6DF05E1ELL;
  v21[1] = "RealityEmitterBase";
  re::StringID::destroyString((re::StringID *)v21);
  *((_OWORD *)this + 2) = v22;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9BC50, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF9BC50);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::introspect_RenderGraphEmitterBase((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "RenderGraphEmitterBase";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF9BCE8 = v7;
      int v8 = re::introspectionAllocator((re *)v7);
      uint64_t v10 = re::introspect_BOOL((re *)1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + 8) = "displayWireframe";
      *(void *)(v11 + 16) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x8800000002;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + 48) = 0;
      *(void *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF9BCF0 = v11;
      unint64_t v12 = re::introspectionAllocator((re *)v11);
      size_t v14 = re::mtl::introspect_PixelFormat((re::mtl *)1, v13);
      uint64_t v15 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 72, 8);
      *(_DWORD *)uint64_t v15 = 1;
      *(void *)(v15 + 8) = "depthFormat";
      *(void *)(v15 + 16) = v14;
      *(void *)(v15 + 24) = 0;
      *(void *)(v15 + 32) = 0x8C00000003;
      *(_DWORD *)(v15 + 40) = 0;
      *(void *)(v15 + 48) = 0;
      *(void *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_26AF9BCF8 = v15;
      uint64_t v16 = re::introspectionAllocator((re *)v15);
      uint64_t v18 = re::mtl::introspect_PixelFormat((re::mtl *)1, v17);
      uint64_t v19 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v16 + 32))(v16, 72, 8);
      *(_DWORD *)uint64_t v19 = 1;
      *(void *)(v19 + 8) = "stencilFormat";
      *(void *)(v19 + 16) = v18;
      *(void *)(v19 + 24) = 0;
      *(void *)(v19 + 32) = 0x9000000005;
      *(_DWORD *)(v19 + 40) = 0;
      *(void *)(v19 + 48) = 0;
      *(void *)(v19 + 56) = 0;
      *(_DWORD *)(v19 + 64) = 0;
      qword_26AF9BD00 = v19;
      __cxa_guard_release(&qword_26AF9BC50);
    }
  }
  *((void *)this + 2) = 0x2E800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((_DWORD *)this + 14) = 4;
  *((void *)this + 8) = &qword_26AF9BCE8;
  re::IntrospectionRegistry::add(this, v3);
  long long v20 = v22;
}

uint64_t re::introspect_RealityEmitterBase(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RealityEmitterBase", (uint64_t (*)(re::internal *))re::allocInfo_RealityEmitterBase, (re::IntrospectionBase *(*)(void))re::initInfo_RealityEmitterBase, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::RealityEmitterBase>, this);
}

void *re::allocInfo_RenderGraphUpdateMaterialTextureSource(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9BC58, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9BC58))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF9BDD0, "RenderGraphUpdateMaterialTextureSource");
    __cxa_guard_release(&qword_26AF9BC58);
  }
  return &unk_26AF9BDD0;
}

void re::initInfo_RenderGraphUpdateMaterialTextureSource(re *this, re::IntrospectionBase *a2)
{
  v16[0] = 0x5BE3C778DE9B131CLL;
  v16[1] = "RenderGraphUpdateMaterialTextureSource";
  re::StringID::destroyString((re::StringID *)v16);
  *((_OWORD *)this + 2) = v17;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9BC60, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF9BC60);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::introspect_RenderGraphNode((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "RenderGraphNode";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF9BCD0 = v7;
      int v8 = re::introspectionAllocator((re *)v7);
      uint64_t v10 = re::IntrospectionInfo<re::DynamicString>::get(1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + 8) = "sourceName";
      *(void *)(v11 + 16) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x10000000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + 48) = 0;
      *(void *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF9BCD8 = v11;
      unint64_t v12 = re::introspectionAllocator((re *)v11);
      re::IntrospectionInfo<re::HashTable<re::DynamicString,re::RenderGraphTargetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get((uint64_t)v12, v13);
      uint64_t v14 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 72, 8);
      *(_DWORD *)uint64_t v14 = 1;
      *(void *)(v14 + 8) = "targetsToUpdate";
      *(void *)(v14 + 16) = &qword_26AF9BD08;
      *(void *)(v14 + 24) = 0;
      *(void *)(v14 + 32) = 0x12000000002;
      *(_DWORD *)(v14 + 40) = 0;
      *(void *)(v14 + 48) = 0;
      *(void *)(v14 + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_26AF9BCE0 = v14;
      __cxa_guard_release(&qword_26AF9BC60);
    }
  }
  *((void *)this + 2) = 0x15800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((void *)this + 8) = &qword_26AF9BCD0;
  *((void *)this + 9) = re::internal::defaultConstruct<re::RenderGraphUpdateMaterialTextureSource>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::RenderGraphUpdateMaterialTextureSource>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::RenderGraphUpdateMaterialTextureSource>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::RenderGraphUpdateMaterialTextureSource>;
  re::IntrospectionRegistry::add(this, v3);
  long long v15 = v17;
}

void re::IntrospectionInfo<re::HashTable<re::DynamicString,re::RenderGraphTargetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get(uint64_t a1, const re::IntrospectionBase *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9BCC8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9BCC8))
  {
    re::IntrospectionHashTableBase::IntrospectionHashTableBase((re::IntrospectionHashTableBase *)&qword_26AF9BD08);
    qword_26AF9BD08 = (uint64_t)&unk_26E71C208;
    __cxa_guard_release(&qword_26AF9BCC8);
  }
  if ((_MergedGlobals_455 & 1) == 0)
  {
    unint64_t v2 = re::IntrospectionInfo<re::DynamicString>::get(1, a2);
    uint64_t v4 = re::introspect_RenderGraphTargetHandle((re *)1, v3);
    if ((_MergedGlobals_455 & 1) == 0)
    {
      uint64_t v5 = (uint64_t)v4;
      _MergedGlobals_455 = 1;
      int v6 = *((_DWORD *)v4 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF9BD08, 0);
      qword_26AF9BD18 = 0x3000000007;
      dword_26AF9BD20 = v6;
      word_26AF9BD24 = 0;
      *(void *)&xmmword_26AF9BD28 = 0;
      *((void *)&xmmword_26AF9BD28 + 1) = 0xFFFFFFFFLL;
      qword_26AF9BD38 = (uint64_t)v2;
      qword_26AF9BD40 = 0;
      qword_26AF9BD48 = v5;
      qword_26AF9BD50 = 0;
      qword_26AF9BD08 = (uint64_t)&unk_26E71C208;
      re::IntrospectionRegistry::add(v7, v8);
      re::getPrettyTypeName((re *)&qword_26AF9BD08, (const re::IntrospectionBase *)&v25);
      if (v26) {
        uint64_t v9 = v27;
      }
      else {
        uint64_t v9 = (char *)&v26 + 1;
      }
      if (v25 && (v26 & 1) != 0) {
        (*(void (**)(void))(*(void *)v25 + 40))();
      }
      long long v10 = v2[2];
      long long v20 = *(_OWORD *)(v5 + 32);
      long long v21 = v10;
      uint64_t v11 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v22);
      if (v11)
      {
        uint64_t v12 = *v11;
        *((void *)&v19 + 1) = v12;
      }
      else
      {
        uint64_t v25 = 0x449AD97C4B77BED4;
        uint64_t v26 = "_CompareFunc";
        uint64_t v13 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, &v25);
        if (v13)
        {
          uint64_t v14 = *v13;
          re::StringID::destroyString((re::StringID *)&v25);
        }
        else
        {
          re::StringID::destroyString((re::StringID *)&v25);
          *(void *)&v30.var0 = 0x449AD97C4B77BED4;
          v30.var1 = "_CompareFunc";
          long long v15 = (void *)v25;
          uint64_t v14 = (uint64_t)v26;
          re::StringID::destroyString((re::StringID *)&v30);
        }
        re::TypeInfo::TypeInfo((uint64_t)&v30, (uint64_t)&v26);
        if (!v15
          || (uint64_t v16 = *v31,
              uint64_t v25 = v14,
              uint64_t v26 = v16,
              LODWORD(v27) = -1,
              (long long v17 = (_anonymous_namespace_ *)re::HashTable<re::internal::TypeAttributeKey,re::internal::TypeAttributeData,re::Hash<re::internal::TypeAttributeKey>,re::EqualTo<re::internal::TypeAttributeKey>,true,false>::tryGet(*(void *)&v30.var0 + 768, &v25)) == 0)|| !*(void *)v17)
        {
          long long v29 = v21;
          v28[0] = v15;
          v28[1] = v14;
        }
        long long v23 = v20;
        long long v24 = v21;
        re::TypeBuilder::beginDictionaryType((uint64_t)&v25, v22, 1, 0x30uLL, 8uLL, &v24, &v23);
        re::TypeBuilder::setConstructor((uint64_t)&v25, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::RenderGraphTargetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v25, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::RenderGraphTargetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setDictionaryAccessors((uint64_t)&v25, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::RenderGraphTargetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::RenderGraphTargetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::RenderGraphTargetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::RenderGraphTargetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
        re::TypeBuilder::setDictionaryIterator((uint64_t)&v25, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::RenderGraphTargetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (BOOL (*)(void *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::RenderGraphTargetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (const void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::RenderGraphTargetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::RenderGraphTargetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::RenderGraphTargetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v25, v18);
      }
      xmmword_26AF9BD28 = v19;
      re::StringID::destroyString((re::StringID *)v22);
    }
  }
}

double re::internal::defaultConstruct<re::RenderGraphUpdateMaterialTextureSource>(int a1, int a2, re::RenderGraphNode *this)
{
  uint64_t v4 = re::RenderGraphNode::RenderGraphNode(this);
  *(void *)this = &unk_26E71B6F8;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  re::DynamicString::setCapacity((void *)this + 32, 0);
  double result = 0.0;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((void *)this + 40) = 0x7FFFFFFF00000000;
  *((_DWORD *)this + 82) = 0;
  *((unsigned char *)this + 336) = 0;
  return result;
}

uint64_t re::internal::defaultDestruct<re::RenderGraphUpdateMaterialTextureSource>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

double re::internal::defaultConstructV2<re::RenderGraphUpdateMaterialTextureSource>(uint64_t a1)
{
  unint64_t v2 = re::RenderGraphNode::RenderGraphNode((re::RenderGraphNode *)a1);
  *(void *)unint64_t v2 = &unk_26E71B6F8;
  unint64_t v3 = (void *)((char *)v2 + 256);
  *((_OWORD *)v2 + 16) = 0u;
  *((_OWORD *)v2 + 17) = 0u;
  re::DynamicString::setCapacity(v3, 0);
  double result = 0.0;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(void *)(a1 + 320) = 0x7FFFFFFF00000000;
  *(_DWORD *)(a1 + 328) = 0;
  *(unsigned char *)(a1 + 336) = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::RenderGraphUpdateMaterialTextureSource>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::introspect_RenderGraphUpdateMaterialTextureSource(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RenderGraphUpdateMaterialTextureSource", (uint64_t (*)(re::internal *))re::allocInfo_RenderGraphUpdateMaterialTextureSource, (re::IntrospectionBase *(*)(void))re::initInfo_RenderGraphUpdateMaterialTextureSource, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::RenderGraphUpdateMaterialTextureSource>, this);
}

void re::RenderGraphUpdateMaterialTextureSource::~RenderGraphUpdateMaterialTextureSource(re::RenderGraphUpdateMaterialTextureSource *this)
{
  *(void *)this = &unk_26E71B6F8;
  re::HashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 36);
  re::DynamicString::deinit((re::RenderGraphUpdateMaterialTextureSource *)((char *)this + 256));
  re::RenderGraphNode::~RenderGraphNode((id *)this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E71B6F8;
  re::HashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 36);
  re::DynamicString::deinit((re::RenderGraphUpdateMaterialTextureSource *)((char *)this + 256));
  re::RenderGraphNode::~RenderGraphNode((id *)this);
  JUMPOUT(0x237DBCBD0);
}

void re::DefaultDepthFormatData::~DefaultDepthFormatData(re::DefaultDepthFormatData *this)
{
}

void re::DefaultStencilFormatData::~DefaultStencilFormatData(re::DefaultStencilFormatData *this)
{
}

void re::UploadMultiSceneConstantsRenderGraphProvider::~UploadMultiSceneConstantsRenderGraphProvider(re::UploadMultiSceneConstantsRenderGraphProvider *this)
{
  *(void *)this = &unk_26E6D52C8;
  re::DynamicString::deinit((re::UploadMultiSceneConstantsRenderGraphProvider *)((char *)this + 8));
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E6D52C8;
  re::DynamicString::deinit((re::UploadMultiSceneConstantsRenderGraphProvider *)((char *)this + 8));
  JUMPOUT(0x237DBCBD0);
}

unint64_t re::UploadMultiSceneConstantsRenderGraphProvider::prepareFrame(re::UploadMultiSceneConstantsRenderGraphProvider *this, char *a2, char *a3, re::RenderFrame *a4)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  uint64_t v44 = 0x5216D4B08B8035A8;
  uint64_t v45 = "TonemapLUTTexture_Current";
  unint64_t v46 = 0xF0C3C206081611F8;
  uint64_t v47 = "TonemapLUTTexture_Previous";
  re::FixedInlineArray<re::StringID,2ul>::FixedInlineArray(v38, &v44, 2);
  for (uint64_t i = 16; i != -16; i -= 16)
    re::StringID::destroyString((re::StringID *)((char *)&v44 + i));
  uint64_t v44 = 0x667334BF02C73D6CLL;
  uint64_t v45 = "TonemapLUTTexture0";
  unint64_t v46 = 0x667334BF02C73D6ELL;
  uint64_t v47 = "TonemapLUTTexture1";
  re::FixedInlineArray<re::StringID,2ul>::FixedInlineArray(v37, &v44, 2);
  for (uint64_t j = 16; j != -16; j -= 16)
    re::StringID::destroyString((re::StringID *)((char *)&v44 + j));
  uint64_t v44 = 0x273652880D147520;
  uint64_t v45 = "TonemapInverseLUTTexture_Current";
  unint64_t v46 = 0xBF93FF1EB909C180;
  uint64_t v47 = "TonemapInverseLUTTexture_Previous";
  re::FixedInlineArray<re::StringID,2ul>::FixedInlineArray(v36, &v44, 2);
  for (uint64_t k = 16; k != -16; k -= 16)
    re::StringID::destroyString((re::StringID *)((char *)&v44 + k));
  uint64_t v44 = 0xC36BD034B306F4F4;
  uint64_t v45 = "TonemapInverseLUTTexture0";
  unint64_t v46 = 0xC36BD034B306F4F6;
  uint64_t v47 = "TonemapInverseLUTTexture1";
  re::FixedInlineArray<re::StringID,2ul>::FixedInlineArray(v35, &v44, 2);
  for (uint64_t m = 16; m != -16; m -= 16)
    re::StringID::destroyString((re::StringID *)((char *)&v44 + m));
  uint64_t v44 = 0xBEA741F8351B3A5CLL;
  uint64_t v45 = "ISPTonemapLUTTexture_Current";
  unint64_t v46 = 0x1640FDB391DBA3C4;
  uint64_t v47 = "ISPTonemapLUTTexture_Previous";
  re::FixedInlineArray<re::StringID,2ul>::FixedInlineArray(v34, &v44, 2);
  for (uint64_t n = 16; n != -16; n -= 16)
    re::StringID::destroyString((re::StringID *)((char *)&v44 + n));
  uint64_t v44 = 0x8C66F49CEF715B38;
  uint64_t v45 = "ISPTonemapLUTTexture0";
  unint64_t v46 = 0x8C66F49CEF715B3ALL;
  uint64_t v47 = "ISPTonemapLUTTexture1";
  re::FixedInlineArray<re::StringID,2ul>::FixedInlineArray(v33, &v44, 2);
  for (iuint64_t i = 16; ii != -16; ii -= 16)
    re::StringID::destroyString((re::StringID *)((char *)&v44 + ii));
  if (a3)
  {
    uint64_t v13 = *a3;
    if (*a3)
    {
      char v14 = a3[1];
      if (v14)
      {
        long long v15 = a3 + 2;
        do
        {
          uint64_t v13 = 31 * v13 + v14;
          int v16 = *(unsigned __int8 *)v15++;
          char v14 = v16;
        }
        while (v16);
      }
      v13 &= ~0x8000000000000000;
    }
  }
  else
  {
    uint64_t v13 = 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v42 = v13;
  long long v17 = *(re::RenderGraphPersistentResourceManager **)(*(void *)a4 + 296);
  LOBYTE(v46) = 0;
  HIDWORD(v46) = 1065353216;
  long long v48 = xmmword_234378E20;
  uint64_t v47 = (const char *)0xFFFFFFFF00000000;
  uint64_t v45 = (const char *)132;
  LODWORD(v44) = 2;
  uint64_t v18 = *((void *)a4 + 46);
  v43[0] = 0x57914155EAD10A54;
  v43[1] = (uint64_t)"TonemapParamsBuffer_Current";
  v43[2] = 0x9A96EA0C92DFD2CCLL;
  v43[3] = (uint64_t)"TonemapParamsBuffer_Previous";
  re::FixedInlineArray<re::StringID,2ul>::FixedInlineArray(v41, v43, 2);
  for (juint64_t j = 2; jj != -2; jj -= 2)
    re::StringID::destroyString((re::StringID *)&v43[jj]);
  int v21 = v18 & 1;
  if ((int)v18 < 0) {
    int v21 = -v21;
  }
  int v22 = v21;
  if (v21 >= 2)
  {
    re::internal::assertLog((re::internal *)6, v20, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < N", "operator[]", 242, v21, 2);
    _os_crash();
    __break(1u);
  }
  v43[0] = v41[2 * v21] >> 1;
  uint64_t v39 = 0x7B89B19BECFC8920;
  re::RenderGraphPersistentResourceManager::registerPersistentBuffer(v17, (const re::WeakStringID *)&v42, (const re::WeakStringID *)v43, (const re::WeakStringID *)&v39, a4, (const re::RenderGraphBufferDescription *)&v44, &v40, 0);
  v43[0] = v41[2 * (1 - v22)] >> 1;
  uint64_t v39 = 0x7B89B19BECFC8921;
  re::RenderGraphPersistentResourceManager::registerPersistentBuffer(v17, (const re::WeakStringID *)&v42, (const re::WeakStringID *)v43, (const re::WeakStringID *)&v39, a4, (const re::RenderGraphBufferDescription *)&v44, &v40, 0);
  for (kuint64_t k = 2; kk != -2; kk -= 2)
    re::StringID::destroyString((re::StringID *)&v41[kk]);
  re::UploadMultiSceneConstantsRenderGraphProvider::registerTonemappingLUTTextures(a3, a4, (uint64_t)v38, v37);
  re::UploadMultiSceneConstantsRenderGraphProvider::registerTonemappingLUTTextures(a3, a4, (uint64_t)v36, v35);
  re::UploadMultiSceneConstantsRenderGraphProvider::registerTonemappingLUTTextures(a3, a4, (uint64_t)v34, v33);
  v32[0] = 0x286AE258F5FA4B8ELL;
  v32[1] = (unint64_t)"UploadMultiSceneConstantsRenderGraphProvider";
  unint64_t ScopeHash = re::RenderGraphProviderBase::generateScopeHash(v32, a2, a3);
  for (muint64_t m = 2; mm != -2; mm -= 2)
    re::StringID::destroyString((re::StringID *)&v33[mm]);
  for (nuint64_t n = 2; nn != -2; nn -= 2)
    re::StringID::destroyString((re::StringID *)&v34[nn]);
  for (uint64_t i1 = 2; i1 != -2; i1 -= 2)
    re::StringID::destroyString((re::StringID *)&v35[i1]);
  for (uint64_t i2 = 2; i2 != -2; i2 -= 2)
    re::StringID::destroyString((re::StringID *)&v36[i2]);
  for (uint64_t i3 = 2; i3 != -2; i3 -= 2)
    re::StringID::destroyString((re::StringID *)&v37[i3]);
  for (uint64_t i4 = 2; i4 != -2; i4 -= 2)
    re::StringID::destroyString((re::StringID *)&v38[i4]);
  return ScopeHash;
}

uint64_t re::UploadMultiSceneConstantsRenderGraphProvider::provide(re::UploadMultiSceneConstantsRenderGraphProvider *this, const char *a2, char *a3, re::RenderFrame *a4)
{
  RenderGraph = (re *)re::RenderFrame::makeRenderGraph(a4, "UploadMultiSceneConstants", 1uLL);
  int v8 = re::globalAllocators(RenderGraph);
  uint64_t v9 = (re::RenderGraphNode *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v8[2] + 32))(v8[2], 320, 8);
  long long v10 = re::RenderGraphNode::RenderGraphNode(v9, "UploadTonemapConstants");
  *(void *)long long v10 = &unk_26E71EC30;
  uint64_t v11 = (_OWORD *)((char *)v10 + 256);
  *((void *)v10 + 32) = 0;
  *((void *)v10 + 33) = -1;
  uint64_t v12 = (_OWORD *)((char *)v10 + 272);
  *((void *)v10 + 34) = 0;
  *((void *)v10 + 35) = -1;
  uint64_t v13 = (_OWORD *)((char *)v10 + 288);
  *((void *)v10 + 36) = 0;
  *((void *)v10 + 37) = -1;
  char v14 = (_OWORD *)((char *)v10 + 304);
  *((void *)v10 + 38) = 0;
  *((void *)v10 + 39) = -1;
  v28[0] = v10;
  re::DynamicArray<re::TransitionCondition *>::add(RenderGraph, v28);
  *((void *)v9 + 3) = *((void *)RenderGraph + 10);
  *((void *)v9 + 4) = *((void *)RenderGraph + 12);
  *((void *)v9 + 6) = *((void *)RenderGraph + 13);
  if (a3)
  {
    uint64_t v15 = *a3;
    if (*a3)
    {
      char v16 = a3[1];
      if (v16)
      {
        long long v17 = a3 + 2;
        do
        {
          uint64_t v15 = 31 * v15 + v16;
          int v18 = *(unsigned __int8 *)v17++;
          char v16 = v18;
        }
        while (v18);
      }
      uint64_t v19 = ((v15 & 0x7FFFFFFFFFFFFFFFLL) - 0x64AE335E693A181FLL) ^ 0x2BC8A0AAF568852ALL;
    }
    else
    {
      uint64_t v19 = 0xB0996C0B63AD62CBLL;
    }
  }
  else
  {
    uint64_t v19 = 0x30996C0B63AD62CALL;
  }
  v28[1] = -1;
  char v29 = 0;
  int v30 = 1065353216;
  unint64_t v31 = 0xFFFFFFFF00000020;
  LODWORD(v28[0]) = 2;
  *(void *)&long long v34 = 0x57914155EAD10A54;
  *((void *)&v34 + 1) = "TonemapParamsBuffer_Current";
  uint64_t v32 = -1;
  uint64_t v33 = v19;
  re::StringID::destroyString((re::StringID *)&v34);
  re::RenderFrame::createBuffer(a4, (const re::RenderGraphBufferDescription *)v28, "TonemapParamsBuffer_Current", &v34);
  *uint64_t v11 = v34;
  *(void *)&v27.var0 = 0x5216D4B08B8035A8;
  v27.var1 = "TonemapLUTTexture_Current";
  re::UploadMultiSceneConstantsRenderGraphProvider::createTonemappingLUTTexture(v12, &v27, a3, a4);
  re::StringID::destroyString((re::StringID *)&v27);
  *(void *)&v26.var0 = 0x273652880D147520;
  v26.var1 = "TonemapInverseLUTTexture_Current";
  re::UploadMultiSceneConstantsRenderGraphProvider::createTonemappingLUTTexture(v13, &v26, a3, a4);
  re::StringID::destroyString((re::StringID *)&v26);
  *(void *)&v25.var0 = 0xBEA741F8351B3A5CLL;
  v25.var1 = "ISPTonemapLUTTexture_Current";
  re::UploadMultiSceneConstantsRenderGraphProvider::createTonemappingLUTTexture(v14, &v25, a3, a4);
  re::StringID::destroyString((re::StringID *)&v25);
  re::RenderGraphNode::configure(v9, a2, a3, a4);
  int v21 = re::globalAllocators(v20);
  int v22 = (re::RenderGraphNode *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v21[2] + 32))(v21[2], 256, 8);
  long long v23 = re::RenderGraphNode::RenderGraphNode(v22, "UploadMultiSceneConstants");
  *(void *)long long v23 = &unk_26E71EB88;
  v28[0] = v23;
  re::DynamicArray<re::TransitionCondition *>::add(RenderGraph, v28);
  *((void *)v22 + 3) = *((void *)RenderGraph + 10);
  *((void *)v22 + 4) = *((void *)RenderGraph + 12);
  *((void *)v22 + 6) = *((void *)RenderGraph + 13);
  return (*(uint64_t (**)(re::RenderGraphNode *, const char *, char *, re::RenderFrame *))(*(void *)v22 + 80))(v22, a2, a3, a4);
}

void re::UploadMultiSceneConstantsRenderGraphProvider::registerTonemappingLUTTextures(char *a1, re::RenderFrame *a2, uint64_t a3, void *a4)
{
  if (a1)
  {
    uint64_t v7 = *a1;
    if (*a1)
    {
      char v8 = a1[1];
      if (v8)
      {
        uint64_t v9 = (unsigned __int8 *)(a1 + 2);
        do
        {
          uint64_t v7 = 31 * v7 + v8;
          int v10 = *v9++;
          char v8 = v10;
        }
        while (v10);
      }
      v7 &= ~0x8000000000000000;
    }
  }
  else
  {
    uint64_t v7 = 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v35 = v7;
  int v26 = -1;
  char v27 = 0;
  __asm { FMOV            V0.2S, #1.0 }
  uint64_t v28 = _D0;
  int v31 = -1;
  char v34 = 0;
  long long v29 = xmmword_2343AEB90;
  long long v30 = xmmword_23440EC90;
  *(void *)&long long v16 = 0x100000001;
  *((void *)&v16 + 1) = 0x100000001;
  v25[0] = xmmword_23440EC80;
  v25[1] = v16;
  if (*((int *)a2 + 92) >= 0) {
    int v17 = *((_DWORD *)a2 + 92) & 1;
  }
  else {
    int v17 = -(*((_DWORD *)a2 + 92) & 1);
  }
  int v18 = v17;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  if (v17 >= 2)
  {
    re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < N", "operator[]", 242, v17, 2);
    _os_crash();
    __break(1u);
  }
  else
  {
    uint64_t v19 = *(re::RenderGraphPersistentResourceManager **)(*(void *)a2 + 296);
    uint64_t v20 = *(void *)(a3 + 16 * v17) >> 1;
    uint64_t v22 = *a4 >> 1;
    uint64_t v23 = v20;
    re::RenderGraphPersistentResourceManager::registerPersistentTexture(v19, (const re::WeakStringID *)&v35, (const re::WeakStringID *)&v23, (const re::WeakStringID *)&v22, a2, (const re::RenderGraphTargetDescription *)v25, &v24);
    uint64_t v21 = *(void *)(a3 + 16 * (1 - v18)) >> 1;
    uint64_t v22 = a4[2] >> 1;
    uint64_t v23 = v21;
    re::RenderGraphPersistentResourceManager::registerPersistentTexture(v19, (const re::WeakStringID *)&v35, (const re::WeakStringID *)&v23, (const re::WeakStringID *)&v22, a2, (const re::RenderGraphTargetDescription *)v25, &v24);
  }
}

unint64_t *re::FixedInlineArray<re::StringID,2ul>::FixedInlineArray(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v3 = a1;
  *(void *)&long long v4 = 0;
  *((void *)&v4 + 1) = "";
  *(_OWORD *)a1 = v4;
  *((_OWORD *)a1 + 1) = v4;
  if (a3)
  {
    uint64_t v6 = 16 * a3;
    do
    {
      uint64_t v7 = re::StringID::operator=(a1, a2);
      a2 += 2;
      a1 = v7 + 2;
      v6 -= 16;
    }
    while (v6);
  }
  return v3;
}

double re::UploadMultiSceneConstantsRenderGraphProvider::createTonemappingLUTTexture(_OWORD *a1, StringID *a2, char *a3, re::RenderFrame *a4)
{
  if (a3)
  {
    uint64_t v7 = 0x9E3779B97F4A7C17;
    uint64_t v8 = *a3;
    if (*a3)
    {
      char v9 = a3[1];
      if (v9)
      {
        int v10 = (unsigned __int8 *)(a3 + 2);
        do
        {
          uint64_t v8 = 31 * v8 + v9;
          int v11 = *v10++;
          char v9 = v11;
        }
        while (v11);
      }
      uint64_t v7 = (v8 & 0x7FFFFFFFFFFFFFFFLL) - 0x61C8864680B583E9;
    }
  }
  else
  {
    uint64_t v7 = 0x1E3779B97F4A7C16;
  }
  int v21 = 2;
  uint64_t v22 = -1;
  uint64_t v23 = -1;
  uint64_t v24 = -1;
  char v25 = 0;
  __asm { FMOV            V0.2S, #1.0 }
  uint64_t v26 = _D0;
  long long v27 = xmmword_2343AEB90;
  long long v28 = xmmword_2343AEBA0;
  int v29 = -1;
  uint64_t v30 = -1;
  char v32 = 0;
  uint64_t v20 = 2;
  re::StringID::StringID((re::StringID *)v19, a2);
  uint64_t v31 = (v7 + (v19[0] >> 3) + (v19[0] >> 1 << 6)) ^ (v19[0] >> 1);
  re::StringID::destroyString((re::StringID *)v19);
  re::RenderFrame::createTarget(a4, (const re::RenderGraphTargetDescription *)&v20, a2->var1, &v18);
  double result = *(double *)&v18;
  *a1 = v18;
  return result;
}

void re::DeformerRenderGraphProvider::~DeformerRenderGraphProvider(re::DeformerRenderGraphProvider *this)
{
  *(void *)this = &unk_26E6D52C8;
  re::DynamicString::deinit((re::DeformerRenderGraphProvider *)((char *)this + 8));
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E6D52C8;
  re::DynamicString::deinit((re::DeformerRenderGraphProvider *)((char *)this + 8));
  JUMPOUT(0x237DBCBD0);
}

unint64_t re::DeformerRenderGraphProvider::prepareFrame(re::DeformerRenderGraphProvider *this, char *a2, const char *a3, re::RenderFrame *a4)
{
  v5[0] = 0x6EA8672173185DB7;
  v5[1] = (unint64_t)"DeformerRenderGraphProvider";
  return re::RenderGraphProviderBase::generateScopeHash(v5, a2, a3);
}

uint64_t (***re::DeformerRenderGraphProvider::provide(re::DeformerRenderGraphProvider *this, const char *a2, const char *a3, re::RenderFrame *a4))(void)
{
  v10[5] = *MEMORY[0x263EF8340];
  RenderGraph = (re *)re::RenderFrame::makeRenderGraph(a4, "DeformerGraph", 0);
  uint64_t v5 = re::globalAllocators(RenderGraph);
  uint64_t v6 = v5[2];
  v10[0] = &unk_26E71B8E0;
  v10[3] = v6;
  v10[4] = v10;
  uint64_t v7 = re::globalAllocators((re *)v5)[2];
  v9[0] = &unk_26E71B938;
  v9[3] = v7;
  v9[4] = v9;
  re::RenderGraph::addNode(RenderGraph, "Run Deformers", (uint64_t)v10, (uint64_t)v9);
  re::FunctionBase<24ul,void ()(re::RenderGraphContext &)>::destroyCallable((uint64_t)v9);
  return re::FunctionBase<24ul,void ()(re::RenderGraphBuilder &,re::RenderGraphDataStore &)>::destroyCallable((uint64_t)v10);
}

void re::internal::Callable<re::DeformerRenderGraphProvider::provide(char const*,char const*,re::RenderFrame &)::{lambda(re::RenderGraphBuilder &,re::RenderGraphDataStore &)#1},void ()(re::RenderGraphBuilder &,re::RenderGraphDataStore &)>::~Callable()
{
}

void re::internal::Callable<re::DeformerRenderGraphProvider::provide(char const*,char const*,re::RenderFrame &)::{lambda(re::RenderGraphBuilder &,re::RenderGraphDataStore &)#1},void ()(re::RenderGraphBuilder &,re::RenderGraphDataStore &)>::operator()(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 592) = 1;
}

void *re::internal::Callable<re::DeformerRenderGraphProvider::provide(char const*,char const*,re::RenderFrame &)::{lambda(re::RenderGraphBuilder &,re::RenderGraphDataStore &)#1},void ()(re::RenderGraphBuilder &,re::RenderGraphDataStore &)>::cloneInto(uint64_t a1, void *a2)
{
  double result = a2;
  *a2 = &unk_26E71B8E0;
  return result;
}

void *re::internal::Callable<re::DeformerRenderGraphProvider::provide(char const*,char const*,re::RenderFrame &)::{lambda(re::RenderGraphBuilder &,re::RenderGraphDataStore &)#1},void ()(re::RenderGraphBuilder &,re::RenderGraphDataStore &)>::moveInto(uint64_t a1, void *a2)
{
  double result = a2;
  *a2 = &unk_26E71B8E0;
  return result;
}

uint64_t re::internal::Callable<re::DeformerRenderGraphProvider::provide(char const*,char const*,re::RenderFrame &)::{lambda(re::RenderGraphBuilder &,re::RenderGraphDataStore &)#1},void ()(re::RenderGraphBuilder &,re::RenderGraphDataStore &)>::size()
{
  return 16;
}

void re::internal::Callable<re::DeformerRenderGraphProvider::provide(char const*,char const*,re::RenderFrame &)::{lambda(re::RenderGraphContext &)#1},void ()(re::RenderGraphContext &)>::~Callable()
{
}

void re::internal::Callable<re::DeformerRenderGraphProvider::provide(char const*,char const*,re::RenderFrame &)::{lambda(re::RenderGraphContext &)#1},void ()(re::RenderGraphContext &)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = a2[146];
  unint64_t v4 = (unint64_t)"N2re27RenderGraphDataStoreWrapperIPNS_21ActiveDeformationDataEEE";
  if (((unint64_t)"N2re27RenderGraphDataStoreWrapperIPNS_21ActiveDeformationDataEEE" & 0x8000000000000000) != 0)
  {
    uint64_t v5 = (unsigned __int8 *)((unint64_t)"N2re27RenderGraphDataStoreWrapperIPNS_21ActiveDeformationDataEEE" & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v6 = 5381;
    do
    {
      unint64_t v4 = v6;
      unsigned int v7 = *v5++;
      uint64_t v6 = (33 * v6) ^ v7;
    }
    while (v7);
  }
  unint64_t v24 = (*(void *)(a2[5] + 48) + (v4 << 6) + (v4 >> 2) - 0x61C8864680B583E9) ^ v4;
  uint64_t v8 = re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(v3 + 16, (uint64_t *)&v24);
  if (v8)
  {
    if (*(void *)v8)
    {
      char v9 = *(void **)(*(void *)v8 + 8);
      if (v9[6])
      {
        uint64_t v10 = *a2;
        uint64_t v11 = a2[1];
        uint64_t v12 = *(void **)(v11 + 40);
        if (!*(void *)(*a2 + 64))
        {
          uint64_t v13 = *(re::DrawingManager **)(v11 + 104);
          uint64_t v14 = *((void *)v13 + 219);
          uint64_t ReservedCommandBuffer = re::DrawingManager::createReservedCommandBuffer(v13, v10);
          id v16 = *(id *)(ReservedCommandBuffer + 16);
          if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9BC70, memory_order_acquire) & 1) == 0
            && __cxa_guard_acquire(&qword_26AF9BC70))
          {
            uint64_t v23 = re::ns::String::String((re::ns::String *)&qword_26AF9BC68, (re::ns *)"DeformerCommandBuffer");
            __cxa_guard_release((__guard *)v23 + 1);
          }
          id v17 = (id)qword_26AF9BC68;
          [v16 setLabel:v17];

          uint64_t v18 = *((void *)v13 + 206);
          if (v18 && (*(unsigned char *)(v18 + 177) & 0x10) != 0) {
            re::DrawingManager::configureForProfiling((uint64_t)v13, ReservedCommandBuffer, 2u);
          }
          objc_storeStrong((id *)(*a2 + 64), *(id *)(ReservedCommandBuffer + 16));
          uint64_t v10 = *a2;
          if (!v14)
          {
            uint64_t v19 = *(void *)(v10 + 88);
            if (v19)
            {
              uint64_t v20 = 16 * v19;
              int v21 = (void *)(*(void *)(v10 + 104) + 8);
              do
              {
                uint64_t v22 = *(v21 - 1);
                if (v22) {
                  [*(id *)(*a2 + 64) encodeWaitForEvent:v22 value:*v21];
                }
                v21 += 2;
                v20 -= 16;
              }
              while (v20);
              uint64_t v10 = *a2;
            }
          }
        }
        re::DeformationManager::deform(v12, v10, v9);
      }
    }
  }
}

void *re::internal::Callable<re::DeformerRenderGraphProvider::provide(char const*,char const*,re::RenderFrame &)::{lambda(re::RenderGraphContext &)#1},void ()(re::RenderGraphContext &)>::cloneInto(uint64_t a1, void *a2)
{
  double result = a2;
  *a2 = &unk_26E71B938;
  return result;
}

void *re::internal::Callable<re::DeformerRenderGraphProvider::provide(char const*,char const*,re::RenderFrame &)::{lambda(re::RenderGraphContext &)#1},void ()(re::RenderGraphContext &)>::moveInto(uint64_t a1, void *a2)
{
  double result = a2;
  *a2 = &unk_26E71B938;
  return result;
}

uint64_t re::internal::Callable<re::DeformerRenderGraphProvider::provide(char const*,char const*,re::RenderFrame &)::{lambda(re::RenderGraphContext &)#1},void ()(re::RenderGraphContext &)>::size()
{
  return 16;
}

void re::MipMapGenerationRenderGraphProvider::~MipMapGenerationRenderGraphProvider(re::MipMapGenerationRenderGraphProvider *this)
{
  *(void *)this = &unk_26E6D52C8;
  re::DynamicString::deinit((re::MipMapGenerationRenderGraphProvider *)((char *)this + 8));
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E6D52C8;
  re::DynamicString::deinit((re::MipMapGenerationRenderGraphProvider *)((char *)this + 8));
  JUMPOUT(0x237DBCBD0);
}

unint64_t re::MipMapGenerationRenderGraphProvider::prepareFrame(re::MipMapGenerationRenderGraphProvider *this, char *a2, const char *a3, re::RenderFrame *a4)
{
  v5[0] = 0x20BE0F4953CF4189;
  v5[1] = (unint64_t)"MipMapGenerationRenderGraphProvider";
  return re::RenderGraphProviderBase::generateScopeHash(v5, a2, a3);
}

void re::MipMapGenerationRenderGraphProvider::provide(re::MipMapGenerationRenderGraphProvider *this, const char *a2, const char *a3, re::RenderFrame *a4)
{
  RenderGraph = (re *)re::RenderFrame::makeRenderGraph(a4, "MipmapGeneration", 1uLL);
  uint64_t v8 = re::globalAllocators(RenderGraph);
  char v9 = (re::RenderGraphNode *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v8[2] + 32))(v8[2], 256, 8);
  uint64_t v10 = re::RenderGraphNode::RenderGraphNode(v9, "MipmapGeneration");
  *(void *)uint64_t v10 = &unk_26E71DE28;
  uint64_t v13 = v10;
  re::DynamicArray<re::TransitionCondition *>::add(RenderGraph, &v13);
  uint64_t v11 = *((void *)RenderGraph + 12);
  uint64_t v12 = *((void *)RenderGraph + 13);
  *((void *)v9 + 3) = *((void *)RenderGraph + 10);
  *((void *)v9 + 4) = v11;
  *((void *)v9 + 6) = v12;
  re::RenderGraphNode::configure(v9, a2, a3, a4);
}

void re::BlurGenerationRenderGraphProvider::~BlurGenerationRenderGraphProvider(re::BlurGenerationRenderGraphProvider *this)
{
  *(void *)this = &unk_26E6D52C8;
  re::DynamicString::deinit((re::BlurGenerationRenderGraphProvider *)((char *)this + 8));
}

{
  uint64_t vars8;

  re::AssetHandle::~AssetHandle((re::BlurGenerationRenderGraphProvider *)((char *)this + 40));
  *(void *)this = &unk_26E6D52C8;
  re::DynamicString::deinit((re::BlurGenerationRenderGraphProvider *)((char *)this + 8));
  JUMPOUT(0x237DBCBD0);
}

unint64_t re::BlurGenerationRenderGraphProvider::prepareFrame(re::BlurGenerationRenderGraphProvider *this, char *a2, const char *a3, re::RenderFrame *a4)
{
  v5[0] = 0x171CC058D73313EALL;
  v5[1] = (unint64_t)"BlurGenerationRenderGraphProvider";
  return re::RenderGraphProviderBase::generateScopeHash(v5, a2, a3);
}

void re::BlurGenerationRenderGraphProvider::provide(re::BlurGenerationRenderGraphProvider *this, const char *a2, const char *a3, re::RenderFrame *a4)
{
  RenderGraph = (re *)re::RenderFrame::makeRenderGraph(a4, "BlurGeneration", 1uLL);
  char v9 = re::globalAllocators(RenderGraph);
  uint64_t v10 = (re::RenderGraphNode *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v9[2] + 32))(v9[2], 304, 8);
  uint64_t v11 = re::RenderGraphNode::RenderGraphNode(v10, "BlurGeneration");
  *(void *)uint64_t v11 = &unk_26E7200A8;
  uint64_t v12 = (uint64_t)v11 + 256;
  *((_OWORD *)v11 + 16) = 0u;
  *((_OWORD *)v11 + 17) = 0u;
  *((_OWORD *)v11 + 18) = 0u;
  uint64_t v15 = v11;
  re::DynamicArray<re::TransitionCondition *>::add(RenderGraph, &v15);
  uint64_t v13 = *((void *)RenderGraph + 12);
  uint64_t v14 = *((void *)RenderGraph + 13);
  *((void *)v10 + 3) = *((void *)RenderGraph + 10);
  *((void *)v10 + 4) = v13;
  *((void *)v10 + 6) = v14;
  re::AssetHandle::operator=(v12, (uint64_t *)this + 5);
  re::RenderGraphBlurGenerationNode::configure((void **)v10, a2, a3, a4);
}

void re::ProbeWriteRenderGraphProvider::~ProbeWriteRenderGraphProvider(re::ProbeWriteRenderGraphProvider *this)
{
  *(void *)this = &unk_26E6D52C8;
  re::DynamicString::deinit((re::ProbeWriteRenderGraphProvider *)((char *)this + 8));
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E6D52C8;
  re::DynamicString::deinit((re::ProbeWriteRenderGraphProvider *)((char *)this + 8));
  JUMPOUT(0x237DBCBD0);
}

unint64_t re::ProbeWriteRenderGraphProvider::prepareFrame(re::ProbeWriteRenderGraphProvider *this, char *a2, const char *a3, re::RenderFrame *a4)
{
  v5[0] = 0x18F744CEEF88C8BALL;
  v5[1] = (unint64_t)"ProbeWriteRenderGraphProvider";
  return re::RenderGraphProviderBase::generateScopeHash(v5, a2, a3);
}

uint64_t re::ProbeWriteRenderGraphProvider::provide(re::ProbeWriteRenderGraphProvider *this, const char *a2, const char *a3, re::RenderFrame *a4)
{
  RenderGraph = (re *)re::RenderFrame::makeRenderGraph(a4, "ProbeWrite", 1uLL);
  uint64_t v8 = re::globalAllocators(RenderGraph);
  char v9 = (re::RenderGraphNode *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v8[2] + 32))(v8[2], 264, 8);
  uint64_t v10 = re::RenderGraphNode::RenderGraphNode(v9, "ProbeClamp");
  *(void *)uint64_t v10 = &unk_26E71D7A0;
  *((void *)v10 + 32) = 0;
  char v32 = v10;
  re::DynamicArray<re::TransitionCondition *>::add(RenderGraph, &v32);
  *((void *)v9 + 3) = *((void *)RenderGraph + 10);
  *((void *)v9 + 4) = *((void *)RenderGraph + 12);
  *((void *)v9 + 6) = *((void *)RenderGraph + 13);
  uint64_t v11 = (re *)re::RenderGraphProbeArrayClampNode::configure((void **)v9, a2, a3, a4);
  uint64_t v12 = re::globalAllocators(v11);
  uint64_t v13 = (re::RenderGraphNode *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v12[2] + 32))(v12[2], 256, 8);
  uint64_t v14 = re::RenderGraphNode::RenderGraphNode(v13, "ProbeMipMaps");
  *(void *)uint64_t v14 = &unk_26E71D848;
  char v32 = v14;
  re::DynamicArray<re::TransitionCondition *>::add(RenderGraph, &v32);
  *((void *)v13 + 3) = *((void *)RenderGraph + 10);
  *((void *)v13 + 4) = *((void *)RenderGraph + 12);
  *((void *)v13 + 6) = *((void *)RenderGraph + 13);
  re::RenderGraphNode::configure(v13, a2, a3, a4);
  id v16 = re::globalAllocators(v15);
  id v17 = (re::RenderGraphNode *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v16[2] + 32))(v16[2], 264, 8);
  uint64_t v18 = re::RenderGraphNode::RenderGraphNode(v17, "ProbeDiffuseFilter");
  *(void *)uint64_t v18 = &unk_26E71D998;
  *((void *)v18 + 32) = 0;
  char v32 = v18;
  re::DynamicArray<re::TransitionCondition *>::add(RenderGraph, &v32);
  *((void *)v17 + 3) = *((void *)RenderGraph + 10);
  *((void *)v17 + 4) = *((void *)RenderGraph + 12);
  *((void *)v17 + 6) = *((void *)RenderGraph + 13);
  uint64_t v19 = (re *)re::RenderGraphProbeArrayDiffuseFilterNode::configure((void **)v17, a2, a3, a4);
  uint64_t v20 = re::globalAllocators(v19);
  int v21 = (re::RenderGraphNode *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v20[2] + 32))(v20[2], 264, 8);
  uint64_t v22 = re::RenderGraphNode::RenderGraphNode(v21, "ProbeSpecularFilter");
  *(void *)uint64_t v22 = &unk_26E71D8F0;
  *((void *)v22 + 32) = 0;
  char v32 = v22;
  re::DynamicArray<re::TransitionCondition *>::add(RenderGraph, &v32);
  *((void *)v21 + 3) = *((void *)RenderGraph + 10);
  *((void *)v21 + 4) = *((void *)RenderGraph + 12);
  *((void *)v21 + 6) = *((void *)RenderGraph + 13);
  uint64_t v23 = (re *)re::RenderGraphProbeArraySpecularFilterNode::configure((void **)v21, a2, a3, a4);
  unint64_t v24 = re::globalAllocators(v23);
  char v25 = (re::RenderGraphNode *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v24[2] + 32))(v24[2], 256, 8);
  uint64_t v26 = re::RenderGraphNode::RenderGraphNode(v25, "ProbeCopy");
  *(void *)uint64_t v26 = &unk_26E71DA40;
  char v32 = v26;
  re::DynamicArray<re::TransitionCondition *>::add(RenderGraph, &v32);
  *((void *)v25 + 3) = *((void *)RenderGraph + 10);
  *((void *)v25 + 4) = *((void *)RenderGraph + 12);
  *((void *)v25 + 6) = *((void *)RenderGraph + 13);
  re::RenderGraphNode::configure(v25, a2, a3, a4);
  long long v28 = re::globalAllocators(v27);
  int v29 = (re::RenderGraphNode *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v28[2] + 32))(v28[2], 264, 8);
  uint64_t v30 = re::RenderGraphNode::RenderGraphNode(v29, "ProbeLatLong");
  *(void *)uint64_t v30 = &unk_26E71DAE8;
  *((void *)v30 + 32) = 0;
  char v32 = v30;
  re::DynamicArray<re::TransitionCondition *>::add(RenderGraph, &v32);
  *((void *)v29 + 3) = *((void *)RenderGraph + 10);
  *((void *)v29 + 4) = *((void *)RenderGraph + 12);
  *((void *)v29 + 6) = *((void *)RenderGraph + 13);
  return re::RenderGraphProbeArrayLatLongNode::configure((void **)v29, a2, a3, a4);
}

void re::CustomPostProcessRenderGraphProvider::~CustomPostProcessRenderGraphProvider(re::CustomPostProcessRenderGraphProvider *this)
{
  *(void *)this = &unk_26E6D52C8;
  re::DynamicString::deinit((re::CustomPostProcessRenderGraphProvider *)((char *)this + 8));
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E6D52C8;
  re::DynamicString::deinit((re::CustomPostProcessRenderGraphProvider *)((char *)this + 8));
  JUMPOUT(0x237DBCBD0);
}

unint64_t re::CustomPostProcessRenderGraphProvider::prepareFrame(re::CustomPostProcessRenderGraphProvider *this, char *a2, const char *a3, re::RenderFrame *a4)
{
  v5[0] = 0x41BAFCC672CF692BLL;
  v5[1] = (unint64_t)"CustomPostProcessRenderGraphProvider";
  return re::RenderGraphProviderBase::generateScopeHash(v5, a2, a3);
}

void re::CustomPostProcessRenderGraphProvider::provide(re::CustomPostProcessRenderGraphProvider *this, const char *a2, char *a3, re::RenderFrame *a4)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  re::RenderFrame::tryGetInputTarget(a4, "Color", a3, (double *)&v22);
  re::RenderFrame::tryGetInputTarget(a4, "Depth", a3, (double *)&v20);
  _ZF = v23 == -1 || HIDWORD(v23) == -1;
  if (_ZF || (v21 != -1 ? (BOOL v8 = HIDWORD(v21) == -1) : (BOOL v8 = 1), v8))
  {
    if ((atomic_exchange(re::CustomPostProcessRenderGraphProvider::provide(char const*,char const*,re::RenderFrame &)const::__FILE____LINE___logged, 1u) & 1) == 0)
    {
      char v9 = *re::graphicsLogObjects(v6);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315138;
        *(void *)&buf[4] = "provide";
        _os_log_impl(&dword_233120000, v9, OS_LOG_TYPE_DEFAULT, "%s: required targets for custom post processing aren't available incurrent graph.\n", buf, 0xCu);
      }
    }
  }
  else
  {
    RenderGraph = (re *)re::RenderFrame::makeRenderGraph(a4, "CustomPostProcessGraph", 0);
    uint64_t v11 = re::globalAllocators(RenderGraph);
    uint64_t v12 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v11[2] + 32))(v11[2], 256, 8);
    uint64_t v13 = re::RenderGraphNode::RenderGraphNode((re::RenderGraphNode *)v12, "CustomPostProcessNode");
    *(void *)uint64_t v13 = &unk_26E717CD8;
    *(void *)buf = v13;
    re::DynamicArray<re::TransitionCondition *>::add(RenderGraph, buf);
    unint64_t v12[3] = *((void *)RenderGraph + 10);
    v12[4] = *((void *)RenderGraph + 12);
    v12[6] = *((void *)RenderGraph + 13);
    *(void *)buf = 3;
    *(_DWORD *)&buf[8] = 2;
    memset(&buf[12], 255, 24);
    buf[36] = 0;
    __asm { FMOV            V0.2S, #1.0 }
    *(void *)&buf[40] = _D0;
    long long v25 = xmmword_2343AEB90;
    long long v26 = xmmword_2343AEBA0;
    int v27 = -1;
    long long v28 = xmmword_234378E20;
    char v29 = 0;
    re::RenderFrame::createTarget(a4, (const re::RenderGraphTargetDescription *)buf, "CustomPostTarget", &v18);
    *(void *)buf = 65290051;
    re::RenderFrame::addTargetOutput(a4, (uint64_t *)buf, (double *)&v18, a3);
    *(void *)buf = v18;
    *(void *)&buf[8] = v19;
    *(void *)&buf[16] = 0x100000000;
    *(_OWORD *)&buf[32] = xmmword_23435FBB0;
    LOWORD(v25) = 0;
    *(void *)((char *)&v25 + 4) = 0;
    re::DynamicArray<re::TargetWrite>::add((_anonymous_namespace_ *)(v12 + 27), (uint64_t)buf);
    *(void *)buf = v18;
    *(void *)&buf[8] = v19;
    *(void *)&buf[16] = 0x500000000;
    *(_OWORD *)&buf[32] = xmmword_23435FBB0;
    LOWORD(v25) = 0;
    *(void *)((char *)&v25 + 4) = 0;
    re::DynamicArray<re::TargetWrite>::add((_anonymous_namespace_ *)(v12 + 27), (uint64_t)buf);
    *(void *)buf = v22;
    *(void *)&buf[8] = v23;
    *(void *)&buf[16] = 0;
    *(void *)&buf[24] = 2;
    re::DynamicArray<re::TargetRead>::add((_anonymous_namespace_ *)(v12 + 22), (__n128 *)buf);
    *(void *)buf = v20;
    *(void *)&buf[8] = v21;
    *(void *)&buf[16] = 0;
    *(void *)&buf[24] = 2;
    re::DynamicArray<re::TargetRead>::add((_anonymous_namespace_ *)(v12 + 22), (__n128 *)buf);
  }
}

void re::VisualProxyHighFidelityGraphProvider::~VisualProxyHighFidelityGraphProvider(re::VisualProxyHighFidelityGraphProvider *this)
{
  *(void *)this = &unk_26E6D52C8;
  re::DynamicString::deinit((re::VisualProxyHighFidelityGraphProvider *)((char *)this + 8));
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E6D52C8;
  re::DynamicString::deinit((re::VisualProxyHighFidelityGraphProvider *)((char *)this + 8));
  JUMPOUT(0x237DBCBD0);
}

unint64_t re::VisualProxyHighFidelityGraphProvider::prepareFrame(re::VisualProxyHighFidelityGraphProvider *this, char *a2, const char *a3, re::RenderFrame *a4)
{
  v5[0] = 0x29D9C6F3AFF97BE9;
  v5[1] = (unint64_t)"VisualProxyHighFidelityGraphProvider";
  return re::RenderGraphProviderBase::generateScopeHash(v5, a2, a3);
}

void *re::VisualProxyHighFidelityGraphProvider::provide(re::VisualProxyHighFidelityGraphProvider *this, const char *a2, const char *a3, re::RenderFrame *a4)
{
  RenderGraph = (re *)re::RenderFrame::makeRenderGraph(a4, "VisualProxyGraph", 1uLL);
  uint64_t v5 = re::globalAllocators(RenderGraph);
  uint64_t v6 = (re::RenderGraphNode *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 256, 8);
  unsigned int v7 = re::RenderGraphNode::RenderGraphNode(v6, "visualProxyHighFidelity");
  *(void *)unsigned int v7 = &unk_26E71F8D8;
  uint64_t v11 = v7;
  double result = re::DynamicArray<re::TransitionCondition *>::add(RenderGraph, &v11);
  uint64_t v9 = *((void *)RenderGraph + 12);
  uint64_t v10 = *((void *)RenderGraph + 13);
  *((void *)v6 + 3) = *((void *)RenderGraph + 10);
  *((void *)v6 + 4) = v9;
  *((void *)v6 + 6) = v10;
  return result;
}

void re::internal::Callable<re::RealityEmitterBase::registerCommonProviders(re::RenderGraphManager &,re::AssetService *)::$_0,unsigned long long ()(char const*,char const*,re::RenderFrame &)>::~Callable()
{
}

uint64_t re::internal::Callable<re::RealityEmitterBase::registerCommonProviders(re::RenderGraphManager &,re::AssetService *)::$_0,unsigned long long ()(char const*,char const*,re::RenderFrame &)>::operator()(uint64_t a1, const char **a2, const char **a3, uint64_t a4)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v5 = (char *)*a2;
  uint64_t v6 = *a3;
  size_t v7 = strlen(*a2);
  if (v7)
  {
    MurmurHash3_x64_128((uint64_t)v5, v7, 0, &v15);
    unint64_t v8 = (unint64_t)&v16[64 * v15 - 0x61C8864680B583E9 + (v15 >> 2)] ^ v15;
  }
  else
  {
    unint64_t v8 = 0;
  }
  size_t v9 = strlen(v6);
  if (v9)
  {
    MurmurHash3_x64_128((uint64_t)v6, v9, 0, &v15);
    unint64_t v10 = ((unint64_t)&v16[64 * v15 - 0x61C8864680B583E9 + (v15 >> 2)] ^ v15) - 0x61C8864680B583E9;
  }
  else
  {
    unint64_t v10 = 0x9E3779B97F4A7C17;
  }
  unsigned int v11 = *(_DWORD *)(re::RenderGraphDataStore::get<re::CameraData>(a4 + 32, ((v8 >> 2) + (v8 << 6) + v10) ^ v8) + 484);
  unint64_t v15 = 0x18EDBD623C4C0C58;
  id v16 = "ColorTexture";
  unint64_t v12 = re::RenderGraphProviderBase::generateScopeHash(&v15, v5, v6);
  unsigned int v13 = 73244475 * ((73244475 * (v11 ^ HIWORD(v11))) ^ ((73244475 * (v11 ^ HIWORD(v11))) >> 16));
  return ((v12 << 6) - 0x61C8864680B583E9 + (v12 >> 2) + (v13 ^ HIWORD(v13))) ^ v12;
}

void *re::internal::Callable<re::RealityEmitterBase::registerCommonProviders(re::RenderGraphManager &,re::AssetService *)::$_0,unsigned long long ()(char const*,char const*,re::RenderFrame &)>::cloneInto(uint64_t a1, void *a2)
{
  double result = a2;
  *a2 = &unk_26E71BB10;
  return result;
}

void *re::internal::Callable<re::RealityEmitterBase::registerCommonProviders(re::RenderGraphManager &,re::AssetService *)::$_0,unsigned long long ()(char const*,char const*,re::RenderFrame &)>::moveInto(uint64_t a1, void *a2)
{
  double result = a2;
  *a2 = &unk_26E71BB10;
  return result;
}

uint64_t re::internal::Callable<re::RealityEmitterBase::registerCommonProviders(re::RenderGraphManager &,re::AssetService *)::$_0,unsigned long long ()(char const*,char const*,re::RenderFrame &)>::size()
{
  return 16;
}

void re::internal::Callable<re::RealityEmitterBase::registerCommonProviders(re::RenderGraphManager &,re::AssetService *)::$_1,void ()(char const*,char const*,re::RenderFrame &)>::~Callable()
{
}

void re::internal::Callable<re::RealityEmitterBase::registerCommonProviders(re::RenderGraphManager &,re::AssetService *)::$_1,void ()(char const*,char const*,re::RenderFrame &)>::operator()(int a1, const char **a2, const char **a3, re::RenderFrame *this)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  uint64_t v5 = *a2;
  uint64_t v6 = *a3;
  re::RenderFrame::tryGetInputTarget(this, "Color", 0, (double *)&v20);
  __asm { FMOV            V8.2S, #1.0 }
  if (_ZF)
  {
    *(void *)uint64_t v21 = 3;
    *(_DWORD *)&v21[8] = 2;
    *(void *)&v21[12] = -1;
    *(void *)&long long v22 = -1;
    *((void *)&v22 + 1) = -1;
    char v23 = 0;
    uint64_t v24 = _D8;
    long long v25 = xmmword_2343AEB90;
    long long v26 = xmmword_2343AEBA0;
    int v27 = -1;
    long long v28 = xmmword_234378E20;
    char v29 = 0;
    re::RenderFrame::createTarget(this, (const re::RenderGraphTargetDescription *)v21, "Color0", &v19);
    long long v20 = v19;
  }
  uint64_t v12 = 0x9E3779B97F4A7C17;
  size_t v13 = strlen(v5);
  if (v13)
  {
    MurmurHash3_x64_128((uint64_t)v5, v13, 0, (unint64_t *)v21);
    unint64_t v14 = (*(void *)&v21[8] - 0x61C8864680B583E9 + (*(void *)v21 << 6) + (*(void *)v21 >> 2)) ^ *(void *)v21;
  }
  else
  {
    unint64_t v14 = 0;
  }
  size_t v15 = strlen(v6);
  if (v15)
  {
    MurmurHash3_x64_128((uint64_t)v6, v15, 0, (unint64_t *)v21);
    uint64_t v12 = ((*(void *)&v21[8] - 0x61C8864680B583E9 + (*(void *)v21 << 6) + (*(void *)v21 >> 2)) ^ *(void *)v21)
        - 0x61C8864680B583E9;
  }
  unsigned int v16 = *(_DWORD *)(re::RenderGraphDataStore::get<re::CameraData>((uint64_t)this + 32, ((v14 >> 2) + (v14 << 6) + v12) ^ v14)+ 484);
  if (v16 >= 2)
  {
    *(_OWORD *)uint64_t v21 = xmmword_23440ECA0;
    *(_DWORD *)&unsigned char v21[16] = -1;
    LODWORD(v22) = v16;
    *(void *)((char *)&v22 + 4) = -1;
    HIDWORD(v22) = -1;
    char v23 = 0;
    uint64_t v24 = _D8;
    long long v25 = xmmword_2343AEB90;
    long long v26 = xmmword_2343AEBA0;
    int v27 = -1;
    long long v28 = xmmword_234378E20;
    char v29 = 0;
    re::RenderFrame::createTarget(this, (const re::RenderGraphTargetDescription *)v21, "Color0[MSAA]", &v19);
    *(_OWORD *)uint64_t v21 = v20;
    int v17 = DWORD2(v19);
    *(_DWORD *)(re::RenderGraphResourceDescriptions::targetDescription((re::RenderFrame *)((char *)this + 3448), (uint64_t *)v21)+ 80) = v17;
    uint64_t v18 = 65290051;
    re::RenderFrame::addTargetOutput(this, &v18, (double *)&v19, 0);
  }
  *(void *)&long long v19 = 65290051;
  re::RenderFrame::addTargetOutput(this, (uint64_t *)&v19, (double *)&v20, 0);
}

void *re::internal::Callable<re::RealityEmitterBase::registerCommonProviders(re::RenderGraphManager &,re::AssetService *)::$_1,void ()(char const*,char const*,re::RenderFrame &)>::cloneInto(uint64_t a1, void *a2)
{
  double result = a2;
  *a2 = &unk_26E71BB68;
  return result;
}

void *re::internal::Callable<re::RealityEmitterBase::registerCommonProviders(re::RenderGraphManager &,re::AssetService *)::$_1,void ()(char const*,char const*,re::RenderFrame &)>::moveInto(uint64_t a1, void *a2)
{
  double result = a2;
  *a2 = &unk_26E71BB68;
  return result;
}

uint64_t re::internal::Callable<re::RealityEmitterBase::registerCommonProviders(re::RenderGraphManager &,re::AssetService *)::$_1,void ()(char const*,char const*,re::RenderFrame &)>::size()
{
  return 16;
}

void re::IBLContextOverrideScope::~IBLContextOverrideScope(re::IBLContextOverrideScope *this)
{
}

uint64_t re::DynamicOverflowArray<re::DynamicArray<re::CameraView> const**,2ul>::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    if (*(void *)a1)
    {
      if (*(void *)a2 && *(void *)a1 != *(void *)a2)
      {
        re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || !other.isInitialized() || m_allocator == other.m_allocator", "operator=", 527);
        uint64_t result = _os_crash();
        __break(1u);
        return result;
      }
    }
    if (*(unsigned char *)(a2 + 16))
    {
      if (*(void *)(a2 + 8))
      {
        re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::move(a1, a2);
      }
      else
      {
        re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1);
        *(void *)a1 = *(void *)a2;
        *(_DWORD *)(a2 + 16) += 2;
        *(_DWORD *)(a1 + 16) += 2;
      }
    }
    else
    {
      *(void *)(a1 + 8) = 0;
      *(_DWORD *)(a1 + 16) += 2;
      re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::swap((uint64_t *)a1, (uint64_t *)a2);
    }
  }
  return a1;
}

void re::internal::Callable<re::RealityEmitterBase::emitFilterMapGraph(re::RenderSceneContext &,re::RenderFrame &,re::RenderGraphDataStore &)::$_0,void ()(void *)>::~Callable()
{
}

uint64_t re::internal::Callable<re::RealityEmitterBase::emitFilterMapGraph(re::RenderSceneContext &,re::RenderFrame &,re::RenderGraphDataStore &)::$_0,void ()(void *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  re::BucketArray<re::MeshSceneCollection,16ul>::deinit(*a2);
  return re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v2);
}

void *re::internal::Callable<re::RealityEmitterBase::emitFilterMapGraph(re::RenderSceneContext &,re::RenderFrame &,re::RenderGraphDataStore &)::$_0,void ()(void *)>::cloneInto(uint64_t a1, void *a2)
{
  uint64_t result = a2;
  *a2 = &unk_26E71BC00;
  return result;
}

void *re::internal::Callable<re::RealityEmitterBase::emitFilterMapGraph(re::RenderSceneContext &,re::RenderFrame &,re::RenderGraphDataStore &)::$_0,void ()(void *)>::moveInto(uint64_t a1, void *a2)
{
  uint64_t result = a2;
  *a2 = &unk_26E71BC00;
  return result;
}

uint64_t re::internal::Callable<re::RealityEmitterBase::emitFilterMapGraph(re::RenderSceneContext &,re::RenderFrame &,re::RenderGraphDataStore &)::$_0,void ()(void *)>::size()
{
  return 16;
}

void re::ForceClearData::~ForceClearData(re::ForceClearData *this)
{
}

void re::ProjectiveShadowMapDimension::~ProjectiveShadowMapDimension(re::ProjectiveShadowMapDimension *this)
{
}

void *re::RenderGraphDataStoreWrapper<re::RenderFrameContext>::~RenderGraphDataStoreWrapper(void *a1)
{
  *a1 = &unk_26E71BCB0;
  re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::deinit((uint64_t)(a1 + 5));
  re::FixedArray<re::RenderSceneContext>::deinit(a1 + 2);
  return a1;
}

void re::RenderGraphDataStoreWrapper<re::RenderFrameContext>::~RenderGraphDataStoreWrapper(void *a1)
{
  *a1 = &unk_26E71BCB0;
  re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::deinit((uint64_t)(a1 + 5));
  re::FixedArray<re::RenderSceneContext>::deinit(a1 + 2);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::RenderSceneContext::RenderSceneContext(uint64_t a1, re::Allocator *a2)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 50) = 0u;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 96) = a2;
  re::DynamicArray<re::ShadowView>::setCapacity((void *)(a1 + 96), 0);
  ++*(_DWORD *)(a1 + 120);
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(_DWORD *)(a1 + 160) = 0;
  *(void *)(a1 + 136) = a2;
  re::DynamicArray<re::FilterView>::setCapacity((void *)(a1 + 136), 0);
  ++*(_DWORD *)(a1 + 160);
  *(void *)(a1 + 176) = 0;
  re::PortalInfo::PortalInfo((re::PortalInfo *)(a1 + 200), a2);
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 352) = a2;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_DWORD *)(a1 + 408) = 0;
  *(void *)(a1 + 412) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 376) = 0u;
  re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(a1 + 376, (uint64_t)a2, 3);
  *(void *)(a1 + 424) = 0;
  *(void *)(a1 + 432) = 0;
  *(void *)(a1 + 437) = 0;
  *(void *)(a1 + 448) = 0;
  *(void *)(a1 + 455) = 0;
  return a1;
}

void *re::FixedArray<re::RenderSceneContext>::deinit(void *result)
{
  if (*result)
  {
    v1 = result;
    uint64_t v3 = result + 1;
    uint64_t v2 = result[1];
    if (v2)
    {
      uint64_t v4 = 0;
      uint64_t v5 = result[2];
      uint64_t v6 = 464 * v2;
      do
      {
        re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)(v5 + v4 + 376));
        re::FixedArray<re::PlanarReceiverData::Bucket>::deinit((void *)(v5 + v4 + 352));
        re::BucketArray<unsigned long,4ul>::deinit(v5 + v4 + 256);
        re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v5 + v4 + 256);
        re::BucketArray<unsigned long,4ul>::deinit(v5 + v4 + 200);
        re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v5 + v4 + 200);
        re::DynamicArray<re::FilterView>::deinit(v5 + v4 + 136);
        re::DynamicArray<re::ShadowView>::deinit(v5 + v4 + 96);
        v4 += 464;
      }
      while (v6 != v4);
      uint64_t result = (void *)(*(uint64_t (**)(void, void))(*(void *)*v1 + 40))(*v1, v1[2]);
      void *v3 = 0;
      v3[1] = 0;
    }
    void *v1 = 0;
  }
  return result;
}

void re::RenderGraphDataPipeData::~RenderGraphDataPipeData(re::RenderGraphDataPipeData *this)
{
}

void re::ProfilerOverlayEnablementData::~ProfilerOverlayEnablementData(re::ProfilerOverlayEnablementData *this)
{
}

unint64_t re::ProfilerOverlayEnablementData::hash(re::ProfilerOverlayEnablementData *this)
{
  unint64_t v1 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * *((unsigned __int8 *)this + 8)) ^ ((0xBF58476D1CE4E5B9 * *((unsigned __int8 *)this + 8)) >> 27));
  return v1 ^ (v1 >> 31);
}

void re::SceneArrayData::~SceneArrayData(re::SceneArrayData *this)
{
}

{
  uint64_t vars8;

  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8);
  JUMPOUT(0x237DBCBD0);
}

void re::RenderGraphDataStoreWrapper<re::CameraTMData>::~RenderGraphDataStoreWrapper()
{
}

void re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,void,false>::internalAdd(_anonymous_namespace_ *a1, unint64_t *a2, _DWORD *a3)
{
  if (!*((void *)a1 + 7))
  {
  }
  uint64_t v6 = *((void *)a1 + 4);
  if (!v6 || (unint64_t v7 = *((void *)a1 + 2), v7 > 8 * v6))
  {
    re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,void,false>::resize((long long *)a1);
    unint64_t v7 = *((void *)a1 + 2);
  }
  unint64_t v8 = 0xBF58476D1CE4E5B9 * (*a2 ^ (*a2 >> 30));
  unint64_t v9 = (0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) ^ ((0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) >> 31);
  unint64_t v10 = v7 >> 4;
  unint64_t v11 = v9 % (v7 >> 4);
  uint64_t v12 = *(void *)a1;
  unint64_t v13 = __clz(__rbit64(*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*(void *)a1 + 16 * v11)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800)));
  if (v13 >= 0x40)
  {
    do
    {
      if (v11 + 1 == v10) {
        unint64_t v11 = 0;
      }
      else {
        ++v11;
      }
      unint64_t v13 = __clz(__rbit64(*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v12 + 16 * v11)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800)));
    }
    while (v13 > 0x3F);
  }
  uint64_t v14 = v12 + 16 * v11;
  BOOL v15 = *(unsigned __int8 *)(v14 + v13) == 255;
  *(unsigned char *)(v14 + v13) = v9 & 0x7F;
  unint64_t v16 = *a2;
  LODWORD(v14) = *a3;
  uint64_t v17 = *((void *)a1 + 1) + 16 * (v13 + 16 * v11);
  *(void *)uint64_t v17 = *a2;
  *(_DWORD *)(v17 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v14;
  uint64_t v18 = *((void *)a1 + 4) - v15;
  ++*((void *)a1 + 3);
  *((void *)a1 + 4) = v18;
  unint64_t v19 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (v16 ^ (v16 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v16 ^ (v16 >> 30))) >> 27));
  *((void *)a1 + 5) ^= (v19 >> 31) ^ v19;
}

void re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,void,false>::resize(long long *a1)
{
  unint64_t v3 = *((void *)a1 + 2);
  uint64_t v2 = *((void *)a1 + 3);
  unint64_t v4 = (((unint64_t)(151 * (v2 + 1)) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  unint64_t v5 = ((3 * v3) >> 1) & 0x1FFFFFFFFFFFFFFLL;
  if (v4 > (192 * v3) >> 7) {
    unint64_t v5 = (((unint64_t)(151 * (v2 + 1)) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  }
  unint64_t v6 = (v5 << 7) / 0x97;
  uint64_t v7 = *((void *)a1 + 7);
  long long v26 = 0u;
  *(_OWORD *)int v27 = 0u;
  if (v4 <= v3) {
    uint64_t v8 = v2 + 1;
  }
  else {
    uint64_t v8 = v6;
  }
  memset(&v27[16], 0, 32);
  re::HashBrown<unsigned long long,re::ecs2::PortalServiceQuery::WorldType,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::init(&v26, v7, v8);
  unint64_t v9 = *((void *)a1 + 2);
  if (v9 >= 0x10)
  {
    uint64_t v10 = 0;
    unint64_t v11 = v9 >> 4;
    while (1)
    {
      unsigned __int16 v12 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*(void *)a1 + v10)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800).u16[0];
      unint64_t v13 = (unsigned __int16)~v12;
      if (v12 != 0xFFFF) {
        break;
      }
      v10 += 16;
      if (!--v11) {
        goto LABEL_12;
      }
    }
    unint64_t v14 = __clz(__rbit64(v13)) + v10;
    while (v14 != -1)
    {
      re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,void,false>::internalAdd(&v26, *((void *)a1 + 1) + 16 * v14, *((void *)a1 + 1) + 16 * v14 + 8);
      unint64_t v21 = v14 >> 4;
      unint64_t v9 = *((void *)a1 + 2);
      if (v14 >> 4 >= v9 >> 4) {
        break;
      }
      unint64_t v22 = __clz(__rbit64((-2 << (v14 & 0xF)) & v13));
      if (v22 >= 0x40)
      {
        uint64_t v23 = 16 * v21;
        unint64_t v24 = ~v21 + (v9 >> 4);
        while (v24)
        {
          unint64_t v13 = (unsigned __int16)~*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*(void *)a1 + v23 + 16)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800);
          unint64_t v25 = __clz(__rbit64(v13));
          v23 += 16;
          --v24;
          if (v25 <= 0x3F)
          {
            unint64_t v14 = v25 + v23;
            goto LABEL_20;
          }
        }
        break;
      }
      unint64_t v14 = v22 + (v14 & 0xFFFFFFFFFFFFFFF0);
LABEL_20:
      ;
    }
  }
LABEL_12:
  uint64_t v15 = *(void *)&v27[40];
  *(void *)&v27[40] = *((void *)a1 + 7);
  long long v16 = v26;
  long long v17 = *(_OWORD *)v27;
  long long v26 = *a1;
  *(void *)int v27 = v9;
  long long v18 = *(_OWORD *)&v27[16];
  long long v19 = *(long long *)((char *)a1 + 40);
  *((void *)a1 + 6) = *(void *)&v27[32];
  *((void *)a1 + 7) = v15;
  *(_OWORD *)&v27[24] = v19;
  long long v20 = *(long long *)((char *)a1 + 24);
  *a1 = v16;
  a1[1] = v17;
  a1[2] = v18;
  *(_OWORD *)&v27[8] = v20;
  re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::deinit((uint64_t)&v26);
}

void *re::RenderGraphDataStoreWrapper<re::MeshSceneArrays>::~RenderGraphDataStoreWrapper(void *a1)
{
  *a1 = &unk_26E71BDF8;
  uint64_t v2 = (uint64_t)(a1 + 1);
  re::BucketArray<re::MeshSceneCollection,16ul>::deinit((uint64_t)(a1 + 1));
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v2);
  return a1;
}

void re::RenderGraphDataStoreWrapper<re::MeshSceneArrays>::~RenderGraphDataStoreWrapper(void *a1)
{
  *a1 = &unk_26E71BDF8;
  uint64_t v1 = (uint64_t)(a1 + 1);
  re::BucketArray<re::MeshSceneCollection,16ul>::deinit((uint64_t)(a1 + 1));
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v1);
  JUMPOUT(0x237DBCBD0);
}

void *re::RenderGraphDataStoreWrapper<re::BucketArray<re::MeshDeformationCollection,4ul>>::~RenderGraphDataStoreWrapper(void *a1)
{
  *a1 = &unk_26E71BE38;
  uint64_t v2 = (uint64_t)(a1 + 1);
  re::BucketArray<re::MeshDeformationCollection,4ul>::deinit((uint64_t)(a1 + 1));
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v2);
  return a1;
}

void re::RenderGraphDataStoreWrapper<re::BucketArray<re::MeshDeformationCollection,4ul>>::~RenderGraphDataStoreWrapper(void *a1)
{
  *a1 = &unk_26E71BE38;
  uint64_t v1 = (uint64_t)(a1 + 1);
  re::BucketArray<re::MeshDeformationCollection,4ul>::deinit((uint64_t)(a1 + 1));
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v1);
  JUMPOUT(0x237DBCBD0);
}

void *re::RenderGraphDataStoreWrapper<re::BucketArray<re::DynamicArray<re::VFXScene>,4ul>>::~RenderGraphDataStoreWrapper(void *a1)
{
  *a1 = &unk_26E71BE78;
  uint64_t v2 = (uint64_t)(a1 + 1);
  re::BucketArray<re::DynamicArray<re::VFXScene>,4ul>::deinit((uint64_t)(a1 + 1));
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v2);
  return a1;
}

void re::RenderGraphDataStoreWrapper<re::BucketArray<re::DynamicArray<re::VFXScene>,4ul>>::~RenderGraphDataStoreWrapper(void *a1)
{
  *a1 = &unk_26E71BE78;
  uint64_t v1 = (uint64_t)(a1 + 1);
  re::BucketArray<re::DynamicArray<re::VFXScene>,4ul>::deinit((uint64_t)(a1 + 1));
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v1);
  JUMPOUT(0x237DBCBD0);
}

uint64_t *re::RenderGraphDataStoreWrapper<re::LightContexts>::~RenderGraphDataStoreWrapper(uint64_t *a1)
{
  *a1 = (uint64_t)&unk_26E71BEB8;
  uint64_t v2 = a1 + 14;
  uint64_t v3 = (uint64_t)(a1 + 1);
  re::FixedArray<CoreIKTransform>::deinit(a1 + 29);
  re::FixedArray<CoreIKTransform>::deinit(a1 + 26);
  re::FixedArray<CoreIKTransform>::deinit(a1 + 23);
  re::FixedArray<CoreIKTransform>::deinit(a1 + 20);
  re::FixedArray<CoreIKTransform>::deinit(a1 + 17);
  re::FixedArray<CoreIKTransform>::deinit(v2);
  re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit(a1 + 8);
  re::BucketArray<re::LightContext,16ul>::deinit(v3);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v3);
  return a1;
}

void re::RenderGraphDataStoreWrapper<re::LightContexts>::~RenderGraphDataStoreWrapper(uint64_t *a1)
{
  *a1 = (uint64_t)&unk_26E71BEB8;
  uint64_t v2 = a1 + 14;
  uint64_t v3 = (uint64_t)(a1 + 1);
  re::FixedArray<CoreIKTransform>::deinit(a1 + 29);
  re::FixedArray<CoreIKTransform>::deinit(a1 + 26);
  re::FixedArray<CoreIKTransform>::deinit(a1 + 23);
  re::FixedArray<CoreIKTransform>::deinit(a1 + 20);
  re::FixedArray<CoreIKTransform>::deinit(a1 + 17);
  re::FixedArray<CoreIKTransform>::deinit(v2);
  re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit(a1 + 8);
  re::BucketArray<re::LightContext,16ul>::deinit(v3);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v3);
  JUMPOUT(0x237DBCBD0);
}

void re::RenderGraphDataStoreWrapper<re::TextInfo>::~RenderGraphDataStoreWrapper()
{
}

void re::SimplifiedMeshBufferDeformationIndex::~SimplifiedMeshBufferDeformationIndex(re::SimplifiedMeshBufferDeformationIndex *this)
{
}

void re::RenderGraphDataStoreWrapper<re::ActiveDeformationData *>::~RenderGraphDataStoreWrapper()
{
}

void re::RenderGraphDataStoreWrapper<re::ActiveVFXSimulationData *>::~RenderGraphDataStoreWrapper()
{
}

uint64_t re::RenderGraphDataStore::add<re::ProbeWriteContext,re::ProbeWriteContext>(re *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4 = (unint64_t)"N2re17ProbeWriteContextE";
  if (((unint64_t)"N2re17ProbeWriteContextE" & 0x8000000000000000) != 0)
  {
    unint64_t v5 = (unsigned __int8 *)((unint64_t)"N2re17ProbeWriteContextE" & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v6 = 5381;
    do
    {
      unint64_t v4 = v6;
      unsigned int v7 = *v5++;
      uint64_t v6 = (33 * v6) ^ v7;
    }
    while (v7);
  }
  uint64_t v13 = (a2 + (v4 << 6) + (v4 >> 2) - 0x61C8864680B583E9) ^ v4;
  uint64_t v8 = (uint64_t)a1 + 16;
  unint64_t v9 = re::globalAllocators(a1);
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v9[2] + 32))(v9[2], 312, 8);
  uint64_t v12 = re::ProbeWriteContext::ProbeWriteContext(v10, a3);
  return *(void *)re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addNew<re::CameraData *>(v8, (unint64_t *)&v13, &v12);
}

void re::CameraArrayData::~CameraArrayData(re::CameraArrayData *this)
{
}

{
  uint64_t vars8;

  re::FixedArray<re::CameraData>::deinit((void *)this + 1);
  JUMPOUT(0x237DBCBD0);
}

void *re::FixedArray<re::CameraData>::deinit(void *result)
{
  if (*result)
  {
    uint64_t v1 = result;
    uint64_t v3 = result + 1;
    uint64_t v2 = result[1];
    if (v2)
    {
      uint64_t v4 = 528 * v2;
      unint64_t v5 = (_DWORD *)(result[2] + 280);
      do
      {
        *((void *)v5 - re::FixedArray<re::CameraData>::deinit((void *)this + 1) = 0;
        ++*v5;
        *((void *)v5 - 19) = 0;
        ++*(v5 - 36);
        *((void *)v5 - 29) = 0;
        ++*(v5 - 56);
        double v6 = re::DynamicString::deinit((re::DynamicString *)(v5 - 68));
        v5 += 132;
        v4 -= 528;
      }
      while (v4);
      uint64_t result = (void *)(*(uint64_t (**)(void, void, double))(*(void *)*v1 + 40))(*v1, v1[2], v6);
      void *v3 = 0;
      v3[1] = 0;
    }
    void *v1 = 0;
  }
  return result;
}

void re::MultiViewCullModeArrayData::~MultiViewCullModeArrayData(re::MultiViewCullModeArrayData *this)
{
}

{
  uint64_t vars8;

  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::ViewportArrayData::~ViewportArrayData(re::ViewportArrayData *this)
{
}

{
  uint64_t vars8;

  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::MeshLodSelectInputArrayData::~MeshLodSelectInputArrayData(re::MeshLodSelectInputArrayData *this)
{
}

{
  uint64_t vars8;

  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::MeshNodeFilterData::~MeshNodeFilterData(re::MeshNodeFilterData *this)
{
}

void *re::RenderGraphDataStoreWrapper<re::VisualProxyHighFidelityHandlerData>::~RenderGraphDataStoreWrapper(void *a1)
{
  *a1 = &unk_26E71C120;
  re::DynamicArray<re::VisualProxyHighFidelityTextureCopyRequest>::deinit((uint64_t)(a1 + 1));
  return a1;
}

void re::RenderGraphDataStoreWrapper<re::VisualProxyHighFidelityHandlerData>::~RenderGraphDataStoreWrapper(void *a1)
{
  *a1 = &unk_26E71C120;
  re::DynamicArray<re::VisualProxyHighFidelityTextureCopyRequest>::deinit((uint64_t)(a1 + 1));
  JUMPOUT(0x237DBCBD0);
}

void *re::RenderGraphDataStoreWrapper<re::PlanarReceiverData>::~RenderGraphDataStoreWrapper(void *a1)
{
  *a1 = &unk_26E71C160;
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(a1 + 4);
  re::FixedArray<re::PlanarReceiverData::Bucket>::deinit(a1 + 1);
  return a1;
}

void re::RenderGraphDataStoreWrapper<re::PlanarReceiverData>::~RenderGraphDataStoreWrapper(void *a1)
{
  *a1 = &unk_26E71C160;
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(a1 + 4);
  re::FixedArray<re::PlanarReceiverData::Bucket>::deinit(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::DynamicFunctionConstantsData::~DynamicFunctionConstantsData(re::DynamicFunctionConstantsData *this)
{
}

{
  uint64_t vars8;

  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::RenderGraphDataStore::add<re::CustomPostProcessRenderGraphData>(re *a1, uint64_t a2)
{
  unint64_t v2 = (unint64_t)"N2re32CustomPostProcessRenderGraphDataE";
  if (((unint64_t)"N2re32CustomPostProcessRenderGraphDataE" & 0x8000000000000000) != 0)
  {
    uint64_t v3 = (unsigned __int8 *)((unint64_t)"N2re32CustomPostProcessRenderGraphDataE" & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v4 = 5381;
    do
    {
      unint64_t v2 = v4;
      unsigned int v5 = *v3++;
      uint64_t v4 = (33 * v4) ^ v5;
    }
    while (v5);
  }
  uint64_t v11 = (a2 + (v2 << 6) + (v2 >> 2) - 0x61C8864680B583E9) ^ v2;
  uint64_t v6 = (uint64_t)a1 + 16;
  unsigned int v7 = re::globalAllocators(a1);
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7[2] + 32))(v7[2], 128, 16);
  *(void *)(v8 + 4re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = 0;
  *(void *)(v8 + 56) = 0;
  *(void *)uint64_t v8 = &unk_26E71C1E0;
  *(_OWORD *)(v8 + re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = 0u;
  *(_OWORD *)(v8 + 24) = 0u;
  *(_OWORD *)(v8 + 36) = 0u;
  *(_DWORD *)(v8 + 52) = 0x7FFFFFFF;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(_OWORD *)(v8 + 96) = 0u;
  *(_OWORD *)(v8 + 112) = 0u;
  uint64_t v10 = v8;
  return *(void *)re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addNew<re::CameraData *>(v6, (unint64_t *)&v11, &v10);
}

void re::CustomPostProcessRenderGraphData::~CustomPostProcessRenderGraphData(re::CustomPostProcessRenderGraphData *this)
{
  *(void *)this = &unk_26E71C1E0;
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E71C1E0;
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2);

  JUMPOUT(0x237DBCBD0);
}

uint64_t re::DynamicArray<re::Matrix4x4<float>>::DynamicArray(uint64_t a1, uint64_t *a2)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  uint64_t v3 = *a2;
  if (*a2)
  {
    unint64_t v5 = a2[2];
    *(void *)a1 = v3;
    re::DynamicArray<re::Matrix4x4<float>>::setCapacity((void *)a1, v5);
    ++*(_DWORD *)(a1 + 24);
    re::DynamicArray<re::Matrix4x4<float>>::copy((void **)a1, (uint64_t)a2);
  }
  return a1;
}

void *re::IntrospectionHashTable<re::DynamicString,re::RenderGraphTargetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::~IntrospectionHashTable(void *a1)
{
  *a1 = &unk_26E6C0400;
  uint64_t v2 = (uint64_t)(a1 + 6);
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 8));
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionHashTable<re::DynamicString,re::RenderGraphTargetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::~IntrospectionHashTable(void *a1)
{
  *a1 = &unk_26E6C0400;
  uint64_t v2 = (uint64_t)(a1 + 6);
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 8));
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

double re::IntrospectionHashTable<re::DynamicString,re::RenderGraphTargetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::construct(uint64_t a1, uint64_t a2)
{
  double result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 36) = 0x7FFFFFFF;
  return result;
}

double re::IntrospectionHashTable<re::DynamicString,re::RenderGraphTargetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::destroy(uint64_t a1, uint64_t *a2)
{
  return re::HashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a2);
}

void re::IntrospectionHashTable<re::DynamicString,re::RenderGraphTargetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  re::HashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a2);
  if (a4 <= 3) {
    signed int v7 = 3;
  }
  else {
    signed int v7 = a4;
  }
  re::HashTable<unsigned long long,re::Function<void ()(void)>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)a2, a3, v7);
}

void re::IntrospectionHashTable<re::DynamicString,re::RenderGraphTargetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(uint64_t a1, uint64_t a2, unsigned int a3)
{
}

uint64_t re::IntrospectionHashTable<re::DynamicString,re::RenderGraphTargetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::size(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 28);
}

void re::IntrospectionHashTable<re::DynamicString,re::RenderGraphTargetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(uint64_t a1, uint64_t a2)
{
}

re::IntrospectionBase *re::IntrospectionHashTable<re::DynamicString,re::RenderGraphTargetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addElement(uint64_t a1, re *a2, int a3, uint64_t a4, re::DynamicString *a5)
{
  v10[0] = 0;
  v10[1] = -1;
  uint64_t v8 = (re::IntrospectionBase *)re::HashTable<re::DynamicString,re::RenderGraphTargetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addOrReplace(a4, a5, v10);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 64), v8);
  return v8;
}

uint64_t re::IntrospectionHashTable<re::DynamicString,re::RenderGraphTargetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::iterate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(unsigned int *)(a2 + 32);
  if (v5)
  {
    uint64_t v6 = 0;
    signed int v7 = (int *)(*(void *)(a2 + 16) + 8);
    while (1)
    {
      int v8 = *v7;
      v7 += 16;
      if (v8 < 0) {
        break;
      }
      if (v5 == ++v6)
      {
        LODWORD(v6) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v6) = 0;
  }
  if (v5 == v6) {
    return 1;
  }
  uint64_t v10 = v6;
  do
  {
    uint64_t result = std::function<BOOL ()(void const*,void *)>::operator()(a3, *(void *)(a2 + 16) + (v10 << 6) + 16, *(void *)(a2 + 16) + (v10 << 6) + 48);
    if (!result) {
      break;
    }
    int v11 = *(_DWORD *)(a2 + 32) <= (v6 + 1) ? v6 + 1 : *(_DWORD *)(a2 + 32);
    while (1)
    {
      uint64_t v10 = (v6 + 1);
      if (v11 - 1 == v6) {
        break;
      }
      LODWORD(v6) = v6 + 1;
      int v12 = v10;
      if ((*(_DWORD *)(*(void *)(a2 + 16) + (v10 << 6) + 8) & 0x80000000) != 0) {
        goto LABEL_18;
      }
    }
    int v12 = v11;
LABEL_18:
    LODWORD(v6) = v12;
  }
  while (v5 != v12);
  return result;
}

double re::IntrospectionHashTable<re::DynamicString,re::RenderGraphTargetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::destroyKey(int a1, re::DynamicString *this)
{
  return re::DynamicString::deinit(this);
}

void re::HashTable<re::DynamicString,re::RenderGraphTargetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(void *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<unsigned long long,re::Function<void ()(void)>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v13, v4, a2);
      long long v5 = *(_OWORD *)v13;
      *(_OWORD *)uint64_t v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      uint64_t v6 = *(void *)&v13[16];
      uint64_t v7 = *(void *)(a1 + 16);
      *(void *)&unsigned char v13[16] = v7;
      *(void *)(a1 + 16) = v6;
      long long v9 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v9;
      uint64_t v10 = v8;
      if (v8)
      {
        int v11 = (void *)(v7 + 48);
        do
        {
          if ((*(_DWORD *)(v11 - 5) & 0x80000000) != 0) {
            re::HashTable<re::DynamicString,re::RenderGraphTargetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(a1, *(v11 - 6) % (unint64_t)*(unsigned int *)(a1 + 24), *(v11 - 6), (re::DynamicString *)(v11 - 4), v11);
          }
          v11 += 8;
          --v10;
        }
        while (v10);
      }
      re::HashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2) {
      signed int v12 = a2;
    }
    else {
      signed int v12 = 3;
    }
  }
}

uint64_t re::HashTable<re::DynamicString,re::RenderGraphTargetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, re::DynamicString *a4, void *a5)
{
  uint64_t v10 = *(unsigned int *)(a1 + 36);
  if (v10 == 0x7FFFFFFF)
  {
    uint64_t v10 = *(unsigned int *)(a1 + 32);
    int v11 = v10;
    if (v10 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::DynamicString,re::RenderGraphTargetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, (2 * *(_DWORD *)(a1 + 28)));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v11 + 1;
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + (v10 << 6) + 8);
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + (v10 << 6) + 8);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v12 + (v10 << 6) + re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = v13 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + (v10 << 6) + re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = *(_DWORD *)(*(void *)(a1 + 16) + (v10 << 6) + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + (v10 << 6)) = a3;
  re::DynamicString::DynamicString((re::DynamicString *)(*(void *)(a1 + 16) + (v10 << 6) + 16), a4);
  uint64_t v14 = *(void *)(a1 + 8);
  uint64_t v15 = *(void *)(a1 + 16) + (v10 << 6);
  *(void *)(v15 + 4re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = 0;
  *(void *)(v15 + 4re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = *a5;
  *(void *)(v15 + 56) = -1;
  *(void *)(v15 + 56) = a5[1];
  *(_DWORD *)(v14 + 4 * a2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return v10;
}

unint64_t re::HashTable<re::DynamicString,re::RenderGraphTargetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addOrReplace(uint64_t a1, re::DynamicString *a2, void *a3)
{
  unint64_t v6 = re::Hash<re::DynamicString>::operator()((uint64_t)&v15, (uint64_t)a2);
  unint64_t v7 = v6;
  if (!*(void *)a1)
  {
    LODWORD(vre::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = 0;
    goto LABEL_8;
  }
  unint64_t v8 = v6 % *(unsigned int *)(a1 + 24);
  uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v8);
  if (v9 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v12 = re::HashTable<re::DynamicString,re::RenderGraphTargetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    unint64_t v13 = *(void *)(a1 + 16) + ((unint64_t)v12 << 6);
    return v13 + 48;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  while (1)
  {
    uint64_t v11 = v10 + (v9 << 6);
    if (re::DynamicString::operator==(v11 + 16, (uint64_t)a2)) {
      break;
    }
    uint64_t v9 = *(_DWORD *)(v11 + 8) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  *(_OWORD *)(v11 + 4re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = *(_OWORD *)a3;
  ++*(_DWORD *)(a1 + 40);
  unint64_t v13 = *(void *)(a1 + 16) + (v9 << 6);
  return v13 + 48;
}

void re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::RenderGraphTargetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
  re::HashTable<unsigned long long,re::Function<void ()(void)>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init(a1, a3, 3);
}

double re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::RenderGraphTargetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t *a1)
{
  re::HashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a1);
  return re::HashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a1);
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::RenderGraphTargetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

void re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::RenderGraphTargetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (*a1 == a3)
  {
    re::HashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear((uint64_t)a1);
  }
  else
  {
    re::HashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a1);
    re::HashTable<unsigned long long,re::Function<void ()(void)>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)a1, a3, 3);
  }
}

unint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::RenderGraphTargetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke(uint64_t a1, void **a2, re::Allocator *a3, re::DynamicString *a4)
{
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  Instance = re::TypeInfo::createInstance((re::TypeInfo *)v11, a3, 0);
  unint64_t v9 = re::HashTable<re::DynamicString,re::RenderGraphTargetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addOrReplace(a1, a4, Instance);
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  re::TypeInfo::releaseInstance((re::TypeInfo *)v11, Instance, a3, 0);
  return v9;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::RenderGraphTargetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = re::Hash<re::DynamicString>::operator()((uint64_t)&v9, a2);
  if (!*(void *)a1) {
    return 0;
  }
  uint64_t v5 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * (v4 % *(unsigned int *)(a1 + 24)));
  if (v5 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 16);
  while (1)
  {
    uint64_t v7 = v6 + (v5 << 6);
    if (re::DynamicString::operator==(v7 + 16, a2)) {
      break;
    }
    uint64_t v5 = *(_DWORD *)(v7 + 8) & 0x7FFFFFFF;
    if (v5 == 0x7FFFFFFF) {
      return 0;
    }
  }
  return v7 + 48;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::RenderGraphTargetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 40, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = *(_DWORD *)(a1 + 40);
  *(unsigned char *)(result + 16) = 0;
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::RenderGraphTargetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (*((_DWORD *)a1 + 2) == *(_DWORD *)(*a1 + 40))
  {
    uint64_t v3 = *(unsigned int *)(v2 + 32);
    if (*((unsigned char *)a1 + 16))
    {
      int v4 = *((_DWORD *)a1 + 8);
      if (v4 == v3)
      {
        LODWORD(v5) = *(_DWORD *)(v2 + 32);
      }
      else
      {
        uint64_t v8 = a1[3];
        unsigned int v9 = *(_DWORD *)(v8 + 32);
        unsigned int v10 = v4 + 1;
        do
        {
          LODWORD(v5) = v10;
          *((_DWORD *)a1 + re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = v10;
          if (v10 >= v9) {
            break;
          }
          int v11 = *(_DWORD *)(*(void *)(v8 + 16) + ((unint64_t)v10++ << 6) + 8);
        }
        while ((v11 & 0x80000000) == 0);
      }
    }
    else
    {
      uint64_t v5 = 0;
      if (v3)
      {
        uint64_t v6 = (int *)(*(void *)(v2 + 16) + 8);
        while (1)
        {
          int v7 = *v6;
          v6 += 16;
          if (v7 < 0) {
            break;
          }
          if (v3 == ++v5)
          {
            LODWORD(v5) = *(_DWORD *)(v2 + 32);
            break;
          }
        }
      }
      *((unsigned char *)a1 + 16) = 1;
      a1[3] = v2;
      a1[4] = v5;
      LODWORD(v3) = *(_DWORD *)(v2 + 32);
    }
    return v5 != v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 583);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::RenderGraphTargetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(void *)a1 + 40)) {
    return *(void *)(*(void *)(a1 + 24) + 16) + ((unint64_t)*(unsigned int *)(a1 + 32) << 6) + 16;
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 598);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::RenderGraphTargetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(void *)a1 + 40)) {
    return *(void *)(*(void *)(a1 + 24) + 16) + ((unint64_t)*(unsigned int *)(a1 + 32) << 6) + 48;
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 607);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::RenderGraphTargetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 40))
  {
    uint64_t v2 = *(uint64_t (**)(uint64_t, _DWORD *))(*(void *)a2 + 40);
    return v2(a2, a1);
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 616);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

void re::RenderGraphNodeRegistry::~RenderGraphNodeRegistry(re::RenderGraphNodeRegistry *this)
{
  uint64_t v1 = this;
  {
    if (this)
    {
      re::introspect<re::RenderGraphNode>(void)::info = (_UNKNOWN *)re::introspect_RenderGraphNode(0);
    }
  }
  uint64_t v2 = (void *)*((void *)re::introspect<re::RenderGraphNode>(void)::info + 8);
  uint64_t v3 = (_DWORD *)*v2;
  if (*(_DWORD *)*v2 != 2)
  {
    int v4 = (_DWORD **)(v2 + 1);
    uint64_t v5 = *((unsigned int *)re::introspect<re::RenderGraphNode>(void)::info + 14) - 1;
    do
    {
      uint64_t v6 = *v4++;
      uint64_t v3 = v6;
      --v5;
    }
    while (*v6 != 2);
  }
  *((void *)v3 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
  uint64_t v7 = *((void *)v1 + 2);
  if (v7)
  {
    uint64_t v8 = (uint64_t *)*((void *)v1 + 4);
    uint64_t v9 = 40 * v7;
    do
    {
      uint64_t v10 = *v8;
      if (*v8)
      {
        int v11 = re::globalAllocators(this);
        this = (re::RenderGraphNodeRegistry *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v11[2] + 40))(v11[2], v10);
      }
      *uint64_t v8 = 0;
      v8 += 5;
      v9 -= 40;
    }
    while (v9);
  }
  re::DynamicArray<re::IntrospectionPolymorphicType>::deinit((uint64_t)v1);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)v1 + 11);
  re::HashTable<unsigned long,std::function<re::RenderGraphNode & ()(re::RenderGraph &,char const*)>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::deinit((uint64_t *)v1 + 5);
  re::DynamicArray<re::IntrospectionPolymorphicType>::deinit((uint64_t)v1);
}

void re::RenderGraphNodeRegistry::init(re::RenderGraphNodeRegistry *this)
{
  uint64_t v1 = re::globalAllocators(this);
  uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v1[2] + 32))(v1[2], 160, 8);
  uint64_t v3 = (re::RenderGraphNodeRegistry *)re::RenderGraphNodeRegistry::RenderGraphNodeRegistry(v2);
  re::RenderGraphNodeRegistry::m_instance = (uint64_t)v3;
  re::RenderGraphNodeRegistry::registerAllNodeTypes(v3);
}

void re::RenderGraphNodeRegistry::registerAllNodeTypes(re::RenderGraphNodeRegistry *this)
{
  re::RenderGraphNodeRegistry::registerNode(re::RenderGraphNodeRegistry::m_instance, (uint64_t)re::renderGraphNodeRegistryItem<re::ARGuidedFilterOcclusionNode>(void)::item);
  re::RenderGraphNodeRegistry::registerNode(re::RenderGraphNodeRegistry::m_instance, (uint64_t)re::renderGraphNodeRegistryItem<re::ARSegmentationCompositeNode>(void)::item);
  re::RenderGraphNodeRegistry::registerNode(re::RenderGraphNodeRegistry::m_instance, (uint64_t)re::renderGraphNodeRegistryItem<re::ARSegmentationDilationNode>(void)::item);
  re::RenderGraphNodeRegistry::registerNode(re::RenderGraphNodeRegistry::m_instance, (uint64_t)re::renderGraphNodeRegistryItem<re::ARSegmentationDualGuidedFilterNode>(void)::item);
  re::RenderGraphNodeRegistry::registerNode(re::RenderGraphNodeRegistry::m_instance, (uint64_t)re::renderGraphNodeRegistryItem<re::ARSegmentationGenerateGuideNode>(void)::item);
  re::RenderGraphNodeRegistry::registerNode(re::RenderGraphNodeRegistry::m_instance, (uint64_t)re::renderGraphNodeRegistryItem<re::ComputeClusterProbeIntersectionNode>(void)::item);
  re::RenderGraphNodeRegistry::registerNode(re::RenderGraphNodeRegistry::m_instance, (uint64_t)re::renderGraphNodeRegistryItem<re::DebugClusterAABBNode>(void)::item);
  re::RenderGraphNodeRegistry::registerNode(re::RenderGraphNodeRegistry::m_instance, (uint64_t)re::renderGraphNodeRegistryItem<re::GenerateClusterAABBNode>(void)::item);
  re::RenderGraphNodeRegistry::registerNode(re::RenderGraphNodeRegistry::m_instance, (uint64_t)re::renderGraphNodeRegistryItem<re::RenderProjectiveMeshShadowPatchesNode>(void)::item);
  re::RenderGraphNodeRegistry::registerNode(re::RenderGraphNodeRegistry::m_instance, (uint64_t)re::renderGraphNodeRegistryItem<re::RenderGraphARCombinedPostProcessNode>(void)::item);
  re::RenderGraphNodeRegistry::registerNode(re::RenderGraphNodeRegistry::m_instance, (uint64_t)re::renderGraphNodeRegistryItem<re::RenderGraphARUploadPostParams>(void)::item);
  re::RenderGraphNodeRegistry::registerNode(re::RenderGraphNodeRegistry::m_instance, (uint64_t)re::renderGraphNodeRegistryItem<re::RenderGraphBloomNode>(void)::item);
  re::RenderGraphNodeRegistry::registerNode(re::RenderGraphNodeRegistry::m_instance, (uint64_t)re::renderGraphNodeRegistryItem<re::RenderGraphCombinedPostProcessNode>(void)::item);
  re::RenderGraphNodeRegistry::registerNode(re::RenderGraphNodeRegistry::m_instance, (uint64_t)re::renderGraphNodeRegistryItem<re::RenderGraphDofBokehBlurNode>(void)::item);
  re::RenderGraphNodeRegistry::registerNode(re::RenderGraphNodeRegistry::m_instance, (uint64_t)re::renderGraphNodeRegistryItem<re::RenderGraphDofCompositeNode>(void)::item);
  re::RenderGraphNodeRegistry::registerNode(re::RenderGraphNodeRegistry::m_instance, (uint64_t)re::renderGraphNodeRegistryItem<re::RenderGraphDofSetupNode>(void)::item);
  re::RenderGraphNodeRegistry::registerNode(re::RenderGraphNodeRegistry::m_instance, (uint64_t)re::renderGraphNodeRegistryItem<re::RenderGraphDownsampleBlur>(void)::item);
  re::RenderGraphNodeRegistry::registerNode(re::RenderGraphNodeRegistry::m_instance, (uint64_t)re::renderGraphNodeRegistryItem<re::RenderGraphDownsampleThresholdNode>(void)::item);
  re::RenderGraphNodeRegistry::registerNode(re::RenderGraphNodeRegistry::m_instance, (uint64_t)re::renderGraphNodeRegistryItem<re::RenderGraphMPSImageAreaMaxNode>(void)::item);
  re::RenderGraphNodeRegistry::registerNode(re::RenderGraphNodeRegistry::m_instance, (uint64_t)re::renderGraphNodeRegistryItem<re::RenderGraphMPSImageGaussianBlurNode>(void)::item);
  re::RenderGraphNodeRegistry::registerNode(re::RenderGraphNodeRegistry::m_instance, (uint64_t)re::renderGraphNodeRegistryItem<re::RenderGraphMotionBlurNode>(void)::item);
  re::RenderGraphNodeRegistry::registerNode(re::RenderGraphNodeRegistry::m_instance, (uint64_t)re::renderGraphNodeRegistryItem<re::RenderGraphTonemapNode>(void)::item);
  re::RenderGraphNodeRegistry::registerNode(re::RenderGraphNodeRegistry::m_instance, (uint64_t)re::renderGraphNodeRegistryItem<re::RenderGraphUpdateMaterialTextureSource>(void)::item);
  re::RenderGraphNodeRegistry::registerNode(re::RenderGraphNodeRegistry::m_instance, (uint64_t)re::renderGraphNodeRegistryItem<re::RenderGraphUploadBloomParams>(void)::item);
  re::RenderGraphNodeRegistry::registerNode(re::RenderGraphNodeRegistry::m_instance, (uint64_t)re::renderGraphNodeRegistryItem<re::RenderGraphUploadPostParams>(void)::item);
  uint64_t v1 = re::RenderGraphNodeRegistry::m_instance;
  re::RenderGraphNodeRegistry::registerNode(v1, (uint64_t)&re::renderGraphNodeRegistryItem<re::RenderGraphVRRUnwarpNode>(void)::item);
}

re *re::internal::destroyPersistent<re::RenderGraphNodeRegistry>(re *result, uint64_t a2, re::RenderGraphNodeRegistry *a3)
{
  if (a3)
  {
    uint64_t v4 = re::globalAllocators(result)[2];
    re::RenderGraphNodeRegistry::~RenderGraphNodeRegistry(a3);
    uint64_t v5 = *(uint64_t (**)(uint64_t, re::RenderGraphNodeRegistry *))(*(void *)v4 + 40);
    return (re *)v5(v4, a3);
  }
  return result;
}

void re::RenderGraphNodeRegistry::registerNode(uint64_t a1, uint64_t a2)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  uint64_t v4 = (os_unfair_lock_s *)(a1 + 152);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 152));
  uint64_t v5 = (char *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
  size_t v6 = strlen(v5);
  if (v6)
  {
    MurmurHash3_x64_128((uint64_t)v5, v6, 0, (unint64_t *)&v41);
    unint64_t v7 = (*((void *)&v41 + 1) - 0x61C8864680B583E9 + ((void)v41 << 6) + ((unint64_t)v41 >> 2)) ^ v41;
  }
  else
  {
    unint64_t v7 = 0;
  }
  unint64_t v40 = v7;
  unint64_t v8 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (v7 ^ (v7 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v7 ^ (v7 >> 30))) >> 27));
  unint64_t v9 = v8 ^ (v8 >> 31);
  if (*(void *)(a1 + 40))
  {
    uint64_t v10 = *(unsigned int *)(*(void *)(a1 + 48) + 4 * (v9 % *(unsigned int *)(a1 + 64)));
    if (v10 != 0x7FFFFFFF)
    {
      uint64_t v20 = *(void *)(a1 + 56);
      if (*(void *)(v20 + 56 * v10 + 16) == v7) {
        goto LABEL_36;
      }
      while (1)
      {
        LODWORD(v10) = *(_DWORD *)(v20 + 56 * v10 + 8) & 0x7FFFFFFF;
        if (v10 == 0x7FFFFFFF) {
          break;
        }
        if (*(void *)(v20 + 56 * v10 + 16) == v7) {
          goto LABEL_36;
        }
      }
    }
  }
  unsigned int v38 = v4;
  uint64_t v11 = (**(uint64_t (***)(uint64_t))a2)(a2);
  int v12 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 8))(a2);
  size_t v13 = strlen(v5);
  size_t v14 = v13 + 1;
  char v15 = re::globalAllocators((re *)v13);
  long long v16 = (void *)(*(uint64_t (**)(uint64_t, size_t, void))(*(void *)v15[2] + 32))(v15[2], v14, 0);
  memcpy(v16, v5, v14);
  (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)a2 + 24))(&v41, a2);
  if (!*(void *)(a1 + 40))
  {
    LODWORD(v17) = 0;
    goto LABEL_17;
  }
  unint64_t v17 = v9 % *(unsigned int *)(a1 + 64);
  uint64_t v18 = *(unsigned int *)(*(void *)(a1 + 48) + 4 * v17);
  if (v18 == 0x7FFFFFFF)
  {
LABEL_17:
    re::HashTable<unsigned long,std::function<re::RenderGraphNode & ()(re::RenderGraph &,char const*)>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::addAsMove(a1 + 40, v17, v9, &v40, (uint64_t)&v41);
    ++*(_DWORD *)(a1 + 80);
    goto LABEL_18;
  }
  uint64_t v19 = *(void *)(a1 + 56);
  while (*(void *)(v19 + 56 * v18 + 16) != v7)
  {
    LODWORD(v1re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = *(_DWORD *)(v19 + 56 * v18 + 8) & 0x7FFFFFFF;
    if (v18 == 0x7FFFFFFF) {
      goto LABEL_17;
    }
  }
LABEL_18:
  std::__function::__value_func<re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::~__value_func[abi:nn180100](&v41);
  size_t v21 = strlen((const char *)v16);
  if (v21)
  {
    MurmurHash3_x64_128((uint64_t)v16, v21, 0, (unint64_t *)&v41);
    unint64_t v22 = (*((void *)&v41 + 1) - 0x61C8864680B583E9 + ((void)v41 << 6) + ((unint64_t)v41 >> 2)) ^ v41;
  }
  else
  {
    unint64_t v22 = 0;
  }
  *(void *)&long long v41 = v16;
  *((void *)&v41 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = v11;
  uint64_t v42 = 0;
  unint64_t v43 = v22;
  int v44 = v12;
  re::DynamicArray<re::IntrospectionPolymorphicType>::add((void *)a1, (uint64_t)&v41);
  uint64_t v23 = re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)&v41 + 8);
  *(_DWORD *)(a1 + 136) = *(void *)(a1 + 16);
  *(void *)(a1 + 144) = *(void *)(a1 + 32);
  unint64_t v24 = re::introspectionSharedMutex((re *)v23);
  std::__shared_mutex_base::lock(v24);
  long long v41 = *(_OWORD *)(v11 + 32);
  if (v5)
  {
    uint64_t v25 = *v5;
    uint64_t v4 = v38;
    if (*v5)
    {
      char v26 = v5[1];
      if (v26)
      {
        int v27 = (unsigned __int8 *)(v5 + 2);
        do
        {
          uint64_t v25 = 31 * v25 + v26;
          int v28 = *v27++;
          char v26 = v28;
        }
        while (v28);
      }
    }
  }
  else
  {
    uint64_t v25 = 0;
    uint64_t v4 = v38;
  }
  *(void *)&v39.var0 = 2 * v25;
  v39.var1 = v5;
  re::StringID::destroyString((re::StringID *)&v39);
  uint64_t v30 = re::introspectionSharedMutex(v29);
  std::__shared_mutex_base::unlock(v30);
  unint64_t v31 = *(void *)(a1 + 88);
  if (v31)
  {
    unint64_t v31 = v9 % *(unsigned int *)(a1 + 112);
    uint64_t v32 = *(unsigned int *)(*(void *)(a1 + 96) + 4 * v31);
    if (v32 != 0x7FFFFFFF)
    {
      uint64_t v37 = *(void *)(a1 + 104);
      if (*(void *)(v37 + 32 * v32 + 16) == v7) {
        goto LABEL_36;
      }
      while (1)
      {
        uint64_t v32 = *(_DWORD *)(v37 + 32 * v32 + 8) & 0x7FFFFFFF;
        if (v32 == 0x7FFFFFFF) {
          break;
        }
        if (*(void *)(v37 + 32 * v32 + 16) == v7) {
          goto LABEL_36;
        }
      }
    }
  }
  uint64_t v33 = *(unsigned int *)(a1 + 124);
  if (v33 == 0x7FFFFFFF)
  {
    uint64_t v33 = *(unsigned int *)(a1 + 120);
    int v34 = v33;
    if (v33 == *(_DWORD *)(a1 + 112))
    {
      re::HashTable<unsigned long long,re::ecs2::Scene const*,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(a1 + 88, 2 * *(_DWORD *)(a1 + 116));
      LODWORD(v3re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = v9 % *(unsigned int *)(a1 + 112);
      int v34 = *(_DWORD *)(a1 + 120);
    }
    *(_DWORD *)(a1 + 120) = v34 + 1;
    uint64_t v35 = *(void *)(a1 + 104);
    int v36 = *(_DWORD *)(v35 + 32 * v33 + 8);
  }
  else
  {
    uint64_t v35 = *(void *)(a1 + 104);
    int v36 = *(_DWORD *)(v35 + 32 * v33 + 8);
    *(_DWORD *)(a1 + 124) = v36 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v35 + 32 * v33 + re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = v36 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 104) + 32 * v33 + re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = *(_DWORD *)(*(void *)(a1 + 104) + 32 * v33 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 96) + 4 * v31);
  *(void *)(*(void *)(a1 + 104) + 32 * v33) = v9;
  *(void *)(*(void *)(a1 + 104) + 32 * v33 + 16) = v7;
  *(void *)(*(void *)(a1 + 104) + 32 * v33 + 24) = a2;
  *(_DWORD *)(*(void *)(a1 + 96) + 4 * v3re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = v33;
  ++*(_DWORD *)(a1 + 116);
  ++*(_DWORD *)(a1 + 128);
LABEL_36:
  os_unfair_lock_unlock(v4);
}

void re::RenderGraphNodeRegistry::registryItem(os_unfair_lock_s *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v8 = a2;
  uint64_t v5 = this + 38;
  os_unfair_lock_lock(this + 38);
  size_t v6 = (void *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)&this[22], &v8);
  if (v6)
  {
    *(void *)(a3 + re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = *v6;
    char v7 = 1;
  }
  else
  {
    char v7 = 0;
  }
  *(unsigned char *)a3 = v7;
  os_unfair_lock_unlock(v5);
}

uint64_t re::RenderGraphNodeRegistry::RenderGraphNodeRegistry(uint64_t this)
{
  *(void *)this = 0;
  *(void *)(this + re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = 0;
  *(_DWORD *)(this + 24) = 0;
  *(void *)(this + 16) = 0;
  *(_OWORD *)(this + 32) = 0u;
  *(_OWORD *)(this + 4re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = 0u;
  *(_OWORD *)(this + 60) = 0u;
  *(void *)(this + 76) = 0x7FFFFFFFLL;
  *(_OWORD *)(this + 8re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = 0u;
  *(_OWORD *)(this + 104) = 0u;
  *(_DWORD *)(this + 120) = 0;
  *(void *)(this + 124) = 0x7FFFFFFFLL;
  *(_DWORD *)(this + 136) = 0;
  uint64_t v1 = this + 136;
  *(void *)(this + 144) = 0;
  *(_DWORD *)(this + 152) = 0;
  uint64_t v2 = &re::mtl::introspect_BlendOperation(BOOL)::enumTable;
  {
    uint64_t v11 = this + 136;
    uint64_t v12 = this;
    uint64_t v2 = (void *)&re::mtl::introspect_BlendOperation(BOOL)::enumTable;
    int v10 = v9;
    uint64_t v1 = v11;
    this = v12;
    if (v10)
    {
      re::introspect<re::RenderGraphNode>(void)::info = (_UNKNOWN *)re::introspect_RenderGraphNode(0);
      uint64_t v2 = (void *)&re::mtl::introspect_BlendOperation(BOOL)::enumTable;
      uint64_t v1 = v11;
      this = v12;
    }
  }
  uint64_t v3 = v2[108];
  uint64_t v4 = *(void **)(v3 + 64);
  uint64_t v5 = (_DWORD *)*v4;
  if (*(_DWORD *)*v4 != 2)
  {
    size_t v6 = (_DWORD **)(v4 + 1);
    uint64_t v7 = *(unsigned int *)(v3 + 56) - 1;
    do
    {
      uint64_t v8 = *v6++;
      uint64_t v5 = v8;
      --v7;
    }
    while (*v8 != 2);
  }
  *((void *)v5 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = v1;
  return this;
}

double re::HashTable<unsigned long,std::function<re::RenderGraphNode & ()(re::RenderGraph &,char const*)>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    unint64_t v3 = *((unsigned int *)a1 + 8);
    if (v3)
    {
      uint64_t v4 = 0;
      for (unint64_t i = 0; i < v3; ++i)
      {
        uint64_t v6 = a1[2] + v4;
        int v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = v7 & 0x7FFFFFFF;
          std::__function::__value_func<re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::~__value_func[abi:nn180100]((void *)(v6 + 24));
          unint64_t v3 = *((unsigned int *)a1 + 8);
        }
        v4 += 56;
      }
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

uint64_t re::RenderGraphNodeRegistryItem<re::ARGuidedFilterOcclusionNode>::introspectionInfo()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9BE50, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9BE50))
  {
    _MergedGlobals_456 = re::introspect_ARGuidedFilterOcclusionNode(0);
    __cxa_guard_release(&qword_26AF9BE50);
  }
  return _MergedGlobals_456;
}

uint64_t re::RenderGraphNodeRegistryItem<re::ARGuidedFilterOcclusionNode>::dataOffset()
{
  return 0;
}

const char *re::RenderGraphNodeRegistryItem<re::ARGuidedFilterOcclusionNode>::typeName()
{
  return "ARGuidedFilterOcclusionNode";
}

void re::RenderGraphNodeRegistryItem<re::ARGuidedFilterOcclusionNode>::makeCreateFunction(void *a1@<X8>)
{
  *a1 = &unk_26E71C3B0;
  a1[3] = a1;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::ARGuidedFilterOcclusionNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::ARGuidedFilterOcclusionNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::~__func()
{
}

void *std::__function::__func<re::RenderGraphNodeRegistryItem<re::ARGuidedFilterOcclusionNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::ARGuidedFilterOcclusionNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone()
{
  double result = operator new(0x10uLL);
  *double result = &unk_26E71C3B0;
  return result;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::ARGuidedFilterOcclusionNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::ARGuidedFilterOcclusionNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E71C3B0;
}

re::RenderGraphNode *std::__function::__func<re::RenderGraphNodeRegistryItem<re::ARGuidedFilterOcclusionNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::ARGuidedFilterOcclusionNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::operator()(re *a1, void *a2, const char **a3)
{
  uint64_t v4 = *a3;
  uint64_t v5 = re::globalAllocators(a1);
  uint64_t v6 = (re::RenderGraphNode *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 512, 8);
  int v7 = re::RenderGraphNode::RenderGraphNode(v6, v4);
  *(void *)int v7 = &unk_26E720000;
  *((void *)v7 + 32) = 0;
  *((void *)v7 + 33) = -1;
  *((void *)v7 + 34) = 0;
  *((void *)v7 + 35) = -1;
  *((void *)v7 + 36) = 0;
  *((void *)v7 + 37) = -1;
  *((void *)v7 + 3re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = 0;
  *((void *)v7 + 39) = -1;
  *((void *)v7 + 40) = 0;
  *((void *)v7 + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = -1;
  *((void *)v7 + 42) = 0;
  *((void *)v7 + 43) = -1;
  *((void *)v7 + 44) = 0;
  *((void *)v7 + 45) = -1;
  *((void *)v7 + 46) = 0;
  *((void *)v7 + 47) = -1;
  *((void *)v7 + 4re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = 0;
  *((void *)v7 + 49) = -1;
  *((void *)v7 + 50) = 0;
  *((void *)v7 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = -1;
  *((void *)v7 + 52) = 0;
  *((void *)v7 + 53) = -1;
  *((void *)v7 + 54) = 0;
  *((void *)v7 + 55) = -1;
  *((void *)v7 + 56) = 0;
  *((void *)v7 + 57) = -1;
  *((void *)v7 + 5re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = 0;
  *((void *)v7 + 59) = -1;
  *((void *)v7 + 60) = 0;
  *((void *)v7 + 6re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = -1;
  *((void *)v7 + 62) = 0;
  *((void *)v7 + 63) = -1;
  uint64_t v11 = v7;
  re::DynamicArray<re::TransitionCondition *>::add(a2, &v11);
  uint64_t v8 = a2[12];
  uint64_t v9 = a2[13];
  *((void *)v6 + 3) = a2[10];
  *((void *)v6 + 4) = v8;
  *((void *)v6 + 6) = v9;
  return v6;
}

uint64_t std::__function::__func<re::RenderGraphNodeRegistryItem<re::ARGuidedFilterOcclusionNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::ARGuidedFilterOcclusionNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderGraphNodeRegistryItem<re::ARGuidedFilterOcclusionNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::ARGuidedFilterOcclusionNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target_type()
{
}

uint64_t re::RenderGraphNodeRegistryItem<re::ARSegmentationCompositeNode>::introspectionInfo()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9BE60, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9BE60))
  {
    qword_26AF9BE58 = re::introspect_ARSegmentationCompositeNode(0);
    __cxa_guard_release(&qword_26AF9BE60);
  }
  return qword_26AF9BE58;
}

uint64_t re::RenderGraphNodeRegistryItem<re::ARSegmentationCompositeNode>::dataOffset()
{
  return 0;
}

const char *re::RenderGraphNodeRegistryItem<re::ARSegmentationCompositeNode>::typeName()
{
  return "ARSegmentationCompositeNode";
}

void re::RenderGraphNodeRegistryItem<re::ARSegmentationCompositeNode>::makeCreateFunction(void *a1@<X8>)
{
  *a1 = &unk_26E71C478;
  a1[3] = a1;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::ARSegmentationCompositeNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::ARSegmentationCompositeNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::~__func()
{
}

void *std::__function::__func<re::RenderGraphNodeRegistryItem<re::ARSegmentationCompositeNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::ARSegmentationCompositeNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone()
{
  double result = operator new(0x10uLL);
  *double result = &unk_26E71C478;
  return result;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::ARSegmentationCompositeNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::ARSegmentationCompositeNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E71C478;
}

re::RenderGraphFullscreenNode *std::__function::__func<re::RenderGraphNodeRegistryItem<re::ARSegmentationCompositeNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::ARSegmentationCompositeNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::operator()(re *a1, void *a2, const char **a3)
{
  uint64_t v4 = *a3;
  uint64_t v5 = re::globalAllocators(a1);
  uint64_t v6 = (re::RenderGraphFullscreenNode *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 488, 8);
  int v7 = re::RenderGraphFullscreenNode::RenderGraphFullscreenNode(v6, v4);
  *(void *)int v7 = &unk_26E71ABC8;
  *((void *)v7 + 57) = 0;
  *((void *)v7 + 5re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = -1;
  *((void *)v7 + 59) = 0;
  *((void *)v7 + 60) = -1;
  uint64_t v11 = v7;
  re::DynamicArray<re::TransitionCondition *>::add(a2, &v11);
  uint64_t v8 = a2[12];
  uint64_t v9 = a2[13];
  *((void *)v6 + 3) = a2[10];
  *((void *)v6 + 4) = v8;
  *((void *)v6 + 6) = v9;
  return v6;
}

uint64_t std::__function::__func<re::RenderGraphNodeRegistryItem<re::ARSegmentationCompositeNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::ARSegmentationCompositeNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderGraphNodeRegistryItem<re::ARSegmentationCompositeNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::ARSegmentationCompositeNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target_type()
{
}

uint64_t re::RenderGraphNodeRegistryItem<re::ARSegmentationDilationNode>::introspectionInfo()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9BE70, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9BE70))
  {
    qword_26AF9BE68 = re::introspect_ARSegmentationDilationNode(0);
    __cxa_guard_release(&qword_26AF9BE70);
  }
  return qword_26AF9BE68;
}

uint64_t re::RenderGraphNodeRegistryItem<re::ARSegmentationDilationNode>::dataOffset()
{
  return 0;
}

const char *re::RenderGraphNodeRegistryItem<re::ARSegmentationDilationNode>::typeName()
{
  return "ARSegmentationDilationNode";
}

void re::RenderGraphNodeRegistryItem<re::ARSegmentationDilationNode>::makeCreateFunction(void *a1@<X8>)
{
  *a1 = &unk_26E71C540;
  a1[3] = a1;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::ARSegmentationDilationNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::ARSegmentationDilationNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::~__func()
{
}

void *std::__function::__func<re::RenderGraphNodeRegistryItem<re::ARSegmentationDilationNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::ARSegmentationDilationNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone()
{
  double result = operator new(0x10uLL);
  *double result = &unk_26E71C540;
  return result;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::ARSegmentationDilationNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::ARSegmentationDilationNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E71C540;
}

re::RenderGraphNode *std::__function::__func<re::RenderGraphNodeRegistryItem<re::ARSegmentationDilationNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::ARSegmentationDilationNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::operator()(re *a1, void *a2, const char **a3)
{
  uint64_t v4 = *a3;
  uint64_t v5 = re::globalAllocators(a1);
  uint64_t v6 = (re::RenderGraphNode *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 304, 8);
  int v7 = re::RenderGraphNode::RenderGraphNode(v6, v4);
  *(void *)int v7 = &unk_26E71A9D0;
  *((_OWORD *)v7 + 16) = 0u;
  *((_OWORD *)v7 + 17) = 0u;
  *((void *)v7 + 36) = -1;
  *((void *)v7 + 37) = 0;
  uint64_t v11 = v7;
  re::DynamicArray<re::TransitionCondition *>::add(a2, &v11);
  uint64_t v8 = a2[12];
  uint64_t v9 = a2[13];
  *((void *)v6 + 3) = a2[10];
  *((void *)v6 + 4) = v8;
  *((void *)v6 + 6) = v9;
  return v6;
}

uint64_t std::__function::__func<re::RenderGraphNodeRegistryItem<re::ARSegmentationDilationNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::ARSegmentationDilationNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderGraphNodeRegistryItem<re::ARSegmentationDilationNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::ARSegmentationDilationNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target_type()
{
}

uint64_t re::RenderGraphNodeRegistryItem<re::ARSegmentationDualGuidedFilterNode>::introspectionInfo()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9BE80, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9BE80))
  {
    qword_26AF9BE78 = re::introspect_ARSegmentationDualGuidedFilterNode(0);
    __cxa_guard_release(&qword_26AF9BE80);
  }
  return qword_26AF9BE78;
}

uint64_t re::RenderGraphNodeRegistryItem<re::ARSegmentationDualGuidedFilterNode>::dataOffset()
{
  return 0;
}

const char *re::RenderGraphNodeRegistryItem<re::ARSegmentationDualGuidedFilterNode>::typeName()
{
  return "ARSegmentationDualGuidedFilterNode";
}

void re::RenderGraphNodeRegistryItem<re::ARSegmentationDualGuidedFilterNode>::makeCreateFunction(void *a1@<X8>)
{
  *a1 = &unk_26E71C608;
  a1[3] = a1;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::ARSegmentationDualGuidedFilterNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::ARSegmentationDualGuidedFilterNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::~__func()
{
}

void *std::__function::__func<re::RenderGraphNodeRegistryItem<re::ARSegmentationDualGuidedFilterNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::ARSegmentationDualGuidedFilterNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone()
{
  double result = operator new(0x10uLL);
  *double result = &unk_26E71C608;
  return result;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::ARSegmentationDualGuidedFilterNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::ARSegmentationDualGuidedFilterNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E71C608;
}

re::RenderGraphNode *std::__function::__func<re::RenderGraphNodeRegistryItem<re::ARSegmentationDualGuidedFilterNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::ARSegmentationDualGuidedFilterNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::operator()(re *a1, void *a2, const char **a3)
{
  uint64_t v4 = *a3;
  uint64_t v5 = re::globalAllocators(a1);
  uint64_t v6 = (re::RenderGraphNode *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 304, 8);
  int v7 = re::RenderGraphNode::RenderGraphNode(v6, v4);
  *(void *)int v7 = &unk_26E71AB20;
  *((void *)v7 + 32) = 0;
  *((void *)v7 + 33) = -1;
  *((void *)v7 + 34) = 0;
  *((void *)v7 + 35) = -1;
  *((void *)v7 + 36) = 0;
  *((void *)v7 + 37) = -1;
  uint64_t v11 = v7;
  re::DynamicArray<re::TransitionCondition *>::add(a2, &v11);
  uint64_t v8 = a2[12];
  uint64_t v9 = a2[13];
  *((void *)v6 + 3) = a2[10];
  *((void *)v6 + 4) = v8;
  *((void *)v6 + 6) = v9;
  return v6;
}

uint64_t std::__function::__func<re::RenderGraphNodeRegistryItem<re::ARSegmentationDualGuidedFilterNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::ARSegmentationDualGuidedFilterNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderGraphNodeRegistryItem<re::ARSegmentationDualGuidedFilterNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::ARSegmentationDualGuidedFilterNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target_type()
{
}

uint64_t re::RenderGraphNodeRegistryItem<re::ARSegmentationGenerateGuideNode>::introspectionInfo()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9BE90, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9BE90))
  {
    qword_26AF9BE88 = re::introspect_ARSegmentationGenerateGuideNode(0);
    __cxa_guard_release(&qword_26AF9BE90);
  }
  return qword_26AF9BE88;
}

uint64_t re::RenderGraphNodeRegistryItem<re::ARSegmentationGenerateGuideNode>::dataOffset()
{
  return 0;
}

const char *re::RenderGraphNodeRegistryItem<re::ARSegmentationGenerateGuideNode>::typeName()
{
  return "ARSegmentationGenerateGuideNode";
}

void re::RenderGraphNodeRegistryItem<re::ARSegmentationGenerateGuideNode>::makeCreateFunction(void *a1@<X8>)
{
  *a1 = &unk_26E71C6D0;
  a1[3] = a1;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::ARSegmentationGenerateGuideNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::ARSegmentationGenerateGuideNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::~__func()
{
}

void *std::__function::__func<re::RenderGraphNodeRegistryItem<re::ARSegmentationGenerateGuideNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::ARSegmentationGenerateGuideNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone()
{
  double result = operator new(0x10uLL);
  *double result = &unk_26E71C6D0;
  return result;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::ARSegmentationGenerateGuideNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::ARSegmentationGenerateGuideNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E71C6D0;
}

re::RenderGraphNode *std::__function::__func<re::RenderGraphNodeRegistryItem<re::ARSegmentationGenerateGuideNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::ARSegmentationGenerateGuideNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::operator()(re *a1, void *a2, const char **a3)
{
  uint64_t v4 = *a3;
  uint64_t v5 = re::globalAllocators(a1);
  uint64_t v6 = (re::RenderGraphNode *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 328, 8);
  int v7 = re::RenderGraphNode::RenderGraphNode(v6, v4);
  *(void *)int v7 = &unk_26E71AA78;
  *((_OWORD *)v7 + 16) = 0u;
  *((_OWORD *)v7 + 17) = 0u;
  *((void *)v7 + 36) = -1;
  *((void *)v7 + 37) = 0;
  *((void *)v7 + 3re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = -1;
  *((void *)v7 + 39) = 0;
  *((void *)v7 + 40) = 0;
  uint64_t v11 = v7;
  re::DynamicArray<re::TransitionCondition *>::add(a2, &v11);
  uint64_t v8 = a2[12];
  uint64_t v9 = a2[13];
  *((void *)v6 + 3) = a2[10];
  *((void *)v6 + 4) = v8;
  *((void *)v6 + 6) = v9;
  return v6;
}

uint64_t std::__function::__func<re::RenderGraphNodeRegistryItem<re::ARSegmentationGenerateGuideNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::ARSegmentationGenerateGuideNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderGraphNodeRegistryItem<re::ARSegmentationGenerateGuideNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::ARSegmentationGenerateGuideNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target_type()
{
}

uint64_t re::RenderGraphNodeRegistryItem<re::ComputeClusterProbeIntersectionNode>::introspectionInfo()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9BEA0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9BEA0))
  {
    qword_26AF9BE98 = re::introspect_ComputeClusterProbeIntersectionNode(0);
    __cxa_guard_release(&qword_26AF9BEA0);
  }
  return qword_26AF9BE98;
}

uint64_t re::RenderGraphNodeRegistryItem<re::ComputeClusterProbeIntersectionNode>::dataOffset()
{
  return 0;
}

const char *re::RenderGraphNodeRegistryItem<re::ComputeClusterProbeIntersectionNode>::typeName()
{
  return "ComputeClusterProbeIntersectionNode";
}

void re::RenderGraphNodeRegistryItem<re::ComputeClusterProbeIntersectionNode>::makeCreateFunction(void *a1@<X8>)
{
  *a1 = &unk_26E71C798;
  a1[3] = a1;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::ComputeClusterProbeIntersectionNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::ComputeClusterProbeIntersectionNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::~__func()
{
}

void *std::__function::__func<re::RenderGraphNodeRegistryItem<re::ComputeClusterProbeIntersectionNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::ComputeClusterProbeIntersectionNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone()
{
  double result = operator new(0x10uLL);
  *double result = &unk_26E71C798;
  return result;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::ComputeClusterProbeIntersectionNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::ComputeClusterProbeIntersectionNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E71C798;
}

re::RenderGraphNode *std::__function::__func<re::RenderGraphNodeRegistryItem<re::ComputeClusterProbeIntersectionNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::ComputeClusterProbeIntersectionNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::operator()(re *a1, void *a2, const char **a3)
{
  uint64_t v4 = *a3;
  uint64_t v5 = re::globalAllocators(a1);
  uint64_t v6 = (re::RenderGraphNode *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 320, 8);
  int v7 = re::RenderGraphNode::RenderGraphNode(v6, v4);
  *(void *)int v7 = &unk_26E718000;
  uint64_t v8 = (void *)((char *)v7 + 280);
  *((_OWORD *)v7 + 16) = 0u;
  *((_OWORD *)v7 + 17) = 0u;
  *((_OWORD *)v7 + 1re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = 0u;
  *((void *)v7 + 3re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = 0;
  re::DynamicString::setCapacity(v8, 0);
  *((void *)v6 + 39) = 0;
  uint64_t v12 = v6;
  re::DynamicArray<re::TransitionCondition *>::add(a2, &v12);
  uint64_t v9 = a2[12];
  uint64_t v10 = a2[13];
  *((void *)v6 + 3) = a2[10];
  *((void *)v6 + 4) = v9;
  *((void *)v6 + 6) = v10;
  return v6;
}

uint64_t std::__function::__func<re::RenderGraphNodeRegistryItem<re::ComputeClusterProbeIntersectionNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::ComputeClusterProbeIntersectionNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderGraphNodeRegistryItem<re::ComputeClusterProbeIntersectionNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::ComputeClusterProbeIntersectionNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target_type()
{
}

uint64_t re::RenderGraphNodeRegistryItem<re::DebugClusterAABBNode>::introspectionInfo()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9BEB0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9BEB0))
  {
    qword_26AF9BEA8 = re::introspect_DebugClusterAABBNode(0);
    __cxa_guard_release(&qword_26AF9BEB0);
  }
  return qword_26AF9BEA8;
}

uint64_t re::RenderGraphNodeRegistryItem<re::DebugClusterAABBNode>::dataOffset()
{
  return 0;
}

const char *re::RenderGraphNodeRegistryItem<re::DebugClusterAABBNode>::typeName()
{
  return "DebugClusterAABBNode";
}

void re::RenderGraphNodeRegistryItem<re::DebugClusterAABBNode>::makeCreateFunction(void *a1@<X8>)
{
  *a1 = &unk_26E71C860;
  a1[3] = a1;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::DebugClusterAABBNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::DebugClusterAABBNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::~__func()
{
}

void *std::__function::__func<re::RenderGraphNodeRegistryItem<re::DebugClusterAABBNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::DebugClusterAABBNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone()
{
  double result = operator new(0x10uLL);
  *double result = &unk_26E71C860;
  return result;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::DebugClusterAABBNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::DebugClusterAABBNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E71C860;
}

re::RenderGraphNode *std::__function::__func<re::RenderGraphNodeRegistryItem<re::DebugClusterAABBNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::DebugClusterAABBNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::operator()(re *a1, void *a2, const char **a3)
{
  uint64_t v4 = *a3;
  uint64_t v5 = re::globalAllocators(a1);
  uint64_t v6 = (re::RenderGraphNode *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 288, 8);
  int v7 = re::RenderGraphNode::RenderGraphNode(v6, v4);
  *(void *)int v7 = &unk_26E7180A8;
  *((_OWORD *)v7 + 16) = 0u;
  *((_OWORD *)v7 + 17) = 0u;
  uint64_t v11 = v7;
  re::DynamicArray<re::TransitionCondition *>::add(a2, &v11);
  uint64_t v8 = a2[12];
  uint64_t v9 = a2[13];
  *((void *)v6 + 3) = a2[10];
  *((void *)v6 + 4) = v8;
  *((void *)v6 + 6) = v9;
  return v6;
}

uint64_t std::__function::__func<re::RenderGraphNodeRegistryItem<re::DebugClusterAABBNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::DebugClusterAABBNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderGraphNodeRegistryItem<re::DebugClusterAABBNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::DebugClusterAABBNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target_type()
{
}

uint64_t re::RenderGraphNodeRegistryItem<re::GenerateClusterAABBNode>::introspectionInfo()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9BEC0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9BEC0))
  {
    qword_26AF9BEB8 = re::introspect_GenerateClusterAABBNode(0);
    __cxa_guard_release(&qword_26AF9BEC0);
  }
  return qword_26AF9BEB8;
}

uint64_t re::RenderGraphNodeRegistryItem<re::GenerateClusterAABBNode>::dataOffset()
{
  return 0;
}

const char *re::RenderGraphNodeRegistryItem<re::GenerateClusterAABBNode>::typeName()
{
  return "GenerateClusterAABBNode";
}

void re::RenderGraphNodeRegistryItem<re::GenerateClusterAABBNode>::makeCreateFunction(void *a1@<X8>)
{
  *a1 = &unk_26E71C928;
  a1[3] = a1;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::GenerateClusterAABBNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::GenerateClusterAABBNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::~__func()
{
}

void *std::__function::__func<re::RenderGraphNodeRegistryItem<re::GenerateClusterAABBNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::GenerateClusterAABBNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone()
{
  double result = operator new(0x10uLL);
  *double result = &unk_26E71C928;
  return result;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::GenerateClusterAABBNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::GenerateClusterAABBNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E71C928;
}

re::RenderGraphNode *std::__function::__func<re::RenderGraphNodeRegistryItem<re::GenerateClusterAABBNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::GenerateClusterAABBNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::operator()(re *a1, void *a2, const char **a3)
{
  uint64_t v4 = *a3;
  uint64_t v5 = re::globalAllocators(a1);
  uint64_t v6 = (re::RenderGraphNode *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 320, 8);
  int v7 = re::RenderGraphNode::RenderGraphNode(v6, v4);
  *(void *)int v7 = &unk_26E717F58;
  uint64_t v8 = (void *)((char *)v7 + 280);
  *((_OWORD *)v7 + 16) = 0u;
  *((_OWORD *)v7 + 17) = 0u;
  *((_OWORD *)v7 + 1re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = 0u;
  *((void *)v7 + 3re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = 0;
  re::DynamicString::setCapacity(v8, 0);
  *((void *)v6 + 39) = 0;
  uint64_t v12 = v6;
  re::DynamicArray<re::TransitionCondition *>::add(a2, &v12);
  uint64_t v9 = a2[12];
  uint64_t v10 = a2[13];
  *((void *)v6 + 3) = a2[10];
  *((void *)v6 + 4) = v9;
  *((void *)v6 + 6) = v10;
  return v6;
}

uint64_t std::__function::__func<re::RenderGraphNodeRegistryItem<re::GenerateClusterAABBNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::GenerateClusterAABBNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderGraphNodeRegistryItem<re::GenerateClusterAABBNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::GenerateClusterAABBNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target_type()
{
}

uint64_t re::RenderGraphNodeRegistryItem<re::RenderProjectiveMeshShadowPatchesNode>::introspectionInfo()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9BED0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9BED0))
  {
    qword_26AF9BEC8 = re::introspect_RenderProjectiveMeshShadowPatchesNode(0);
    __cxa_guard_release(&qword_26AF9BED0);
  }
  return qword_26AF9BEC8;
}

uint64_t re::RenderGraphNodeRegistryItem<re::RenderProjectiveMeshShadowPatchesNode>::dataOffset()
{
  return 0;
}

const char *re::RenderGraphNodeRegistryItem<re::RenderProjectiveMeshShadowPatchesNode>::typeName()
{
  return "RenderProjectiveMeshShadowPatches";
}

void re::RenderGraphNodeRegistryItem<re::RenderProjectiveMeshShadowPatchesNode>::makeCreateFunction(void *a1@<X8>)
{
  *a1 = &unk_26E71C9F0;
  a1[3] = a1;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderProjectiveMeshShadowPatchesNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderProjectiveMeshShadowPatchesNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::~__func()
{
}

void *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderProjectiveMeshShadowPatchesNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderProjectiveMeshShadowPatchesNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone()
{
  double result = operator new(0x10uLL);
  *double result = &unk_26E71C9F0;
  return result;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderProjectiveMeshShadowPatchesNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderProjectiveMeshShadowPatchesNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E71C9F0;
}

re::RenderGraphNode *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderProjectiveMeshShadowPatchesNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderProjectiveMeshShadowPatchesNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::operator()(re *a1, void *a2, const char **a3)
{
  uint64_t v4 = *a3;
  uint64_t v5 = re::globalAllocators(a1);
  uint64_t v6 = (re::RenderGraphNode *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 264, 8);
  int v7 = re::RenderGraphNode::RenderGraphNode(v6, v4);
  *(void *)int v7 = &unk_26E7189B8;
  *((_WORD *)v7 + 12re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = 0;
  *((unsigned char *)v7 + 25re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = 0;
  uint64_t v11 = v7;
  re::DynamicArray<re::TransitionCondition *>::add(a2, &v11);
  uint64_t v8 = a2[12];
  uint64_t v9 = a2[13];
  *((void *)v6 + 3) = a2[10];
  *((void *)v6 + 4) = v8;
  *((void *)v6 + 6) = v9;
  return v6;
}

uint64_t std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderProjectiveMeshShadowPatchesNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderProjectiveMeshShadowPatchesNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderProjectiveMeshShadowPatchesNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderProjectiveMeshShadowPatchesNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target_type()
{
}

uint64_t re::RenderGraphNodeRegistryItem<re::RenderGraphARCombinedPostProcessNode>::introspectionInfo()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9BEE0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9BEE0))
  {
    qword_26AF9BED8 = re::introspect_RenderGraphARCombinedPostProcessNode(0);
    __cxa_guard_release(&qword_26AF9BEE0);
  }
  return qword_26AF9BED8;
}

uint64_t re::RenderGraphNodeRegistryItem<re::RenderGraphARCombinedPostProcessNode>::dataOffset()
{
  return 0;
}

const char *re::RenderGraphNodeRegistryItem<re::RenderGraphARCombinedPostProcessNode>::typeName()
{
  return "RenderGraphARCombinedPostProcessNode";
}

void re::RenderGraphNodeRegistryItem<re::RenderGraphARCombinedPostProcessNode>::makeCreateFunction(void *a1@<X8>)
{
  *a1 = &unk_26E71CAB8;
  a1[3] = a1;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphARCombinedPostProcessNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphARCombinedPostProcessNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::~__func()
{
}

void *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphARCombinedPostProcessNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphARCombinedPostProcessNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone()
{
  double result = operator new(0x10uLL);
  *double result = &unk_26E71CAB8;
  return result;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphARCombinedPostProcessNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphARCombinedPostProcessNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E71CAB8;
}

re::RenderGraphNode *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphARCombinedPostProcessNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphARCombinedPostProcessNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::operator()(re *a1, void *a2, const char **a3)
{
  uint64_t v4 = *a3;
  uint64_t v5 = re::globalAllocators(a1);
  uint64_t v6 = (re::RenderGraphNode *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 448, 8);
  int v7 = re::RenderGraphNode::RenderGraphNode(v6, v4);
  *(void *)int v7 = &unk_26E71DC38;
  *((void *)v7 + 32) = 0;
  *((_DWORD *)v7 + 66) = 0;
  *((void *)v7 + 55) = 0;
  *((void *)v7 + 52) = 0;
  *((void *)v7 + 53) = 0;
  *((void *)v7 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
  *((_DWORD *)v7 + 10re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = 0;
  *(_DWORD *)((char *)v7 + 40re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
  uint64_t v11 = v7;
  re::DynamicArray<re::TransitionCondition *>::add(a2, &v11);
  uint64_t v8 = a2[12];
  uint64_t v9 = a2[13];
  *((void *)v6 + 3) = a2[10];
  *((void *)v6 + 4) = v8;
  *((void *)v6 + 6) = v9;
  return v6;
}

uint64_t std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphARCombinedPostProcessNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphARCombinedPostProcessNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphARCombinedPostProcessNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphARCombinedPostProcessNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target_type()
{
}

uint64_t re::RenderGraphNodeRegistryItem<re::RenderGraphARUploadPostParams>::introspectionInfo()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9BEF0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9BEF0))
  {
    qword_26AF9BEE8 = re::introspect_RenderGraphARUploadPostParams(0);
    __cxa_guard_release(&qword_26AF9BEF0);
  }
  return qword_26AF9BEE8;
}

uint64_t re::RenderGraphNodeRegistryItem<re::RenderGraphARUploadPostParams>::dataOffset()
{
  return 0;
}

const char *re::RenderGraphNodeRegistryItem<re::RenderGraphARUploadPostParams>::typeName()
{
  return "RenderGraphARUploadPostParams";
}

void re::RenderGraphNodeRegistryItem<re::RenderGraphARUploadPostParams>::makeCreateFunction(void *a1@<X8>)
{
  *a1 = &unk_26E71CB80;
  a1[3] = a1;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphARUploadPostParams>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphARUploadPostParams>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::~__func()
{
}

void *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphARUploadPostParams>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphARUploadPostParams>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone()
{
  double result = operator new(0x10uLL);
  *double result = &unk_26E71CB80;
  return result;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphARUploadPostParams>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphARUploadPostParams>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E71CB80;
}

uint64_t std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphARUploadPostParams>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphARUploadPostParams>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::operator()(re *a1, void *a2, const char **a3)
{
  uint64_t v4 = *a3;
  uint64_t v5 = re::globalAllocators(a1);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 320, 8);
  int v7 = re::RenderGraphNode::RenderGraphNode((re::RenderGraphNode *)v6, v4);
  *(void *)int v7 = &unk_26E71DB90;
  *((_WORD *)v7 + 12re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = 0;
  *((unsigned char *)v7 + 25re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = 0;
  *(_OWORD *)(v6 + 260) = xmmword_23436C470;
  *(_OWORD *)(v6 + 276) = xmmword_2343679C0;
  *((unsigned char *)v7 + 292) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *((void *)v7 + 37) = _D0;
  *((unsigned char *)v7 + 304) = 0;
  *(void *)(v6 + 30re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = 0x3F80000000000000;
  *((unsigned char *)v7 + 316) = 0;
  long long v16 = v7;
  re::DynamicArray<re::TransitionCondition *>::add(a2, &v16);
  uint64_t v13 = a2[12];
  uint64_t v14 = a2[13];
  *(void *)(v6 + 24) = a2[10];
  *(void *)(v6 + 32) = v13;
  *(void *)(v6 + 4re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = v14;
  return v6;
}

uint64_t std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphARUploadPostParams>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphARUploadPostParams>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphARUploadPostParams>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphARUploadPostParams>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target_type()
{
}

uint64_t re::RenderGraphNodeRegistryItem<re::RenderGraphBloomNode>::introspectionInfo()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9BF00, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9BF00))
  {
    qword_26AF9BEF8 = re::introspect_RenderGraphBloomNode(0);
    __cxa_guard_release(&qword_26AF9BF00);
  }
  return qword_26AF9BEF8;
}

uint64_t re::RenderGraphNodeRegistryItem<re::RenderGraphBloomNode>::dataOffset()
{
  return 0;
}

const char *re::RenderGraphNodeRegistryItem<re::RenderGraphBloomNode>::typeName()
{
  return "RenderGraphBloomNode";
}

void re::RenderGraphNodeRegistryItem<re::RenderGraphBloomNode>::makeCreateFunction(void *a1@<X8>)
{
  *a1 = &unk_26E71CC48;
  a1[3] = a1;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphBloomNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphBloomNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::~__func()
{
}

void *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphBloomNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphBloomNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone()
{
  double result = operator new(0x10uLL);
  *double result = &unk_26E71CC48;
  return result;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphBloomNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphBloomNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E71CC48;
}

re::RenderGraphFullscreenNode *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphBloomNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphBloomNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::operator()(re *a1, void *a2, const char **a3)
{
  uint64_t v4 = *a3;
  uint64_t v5 = re::globalAllocators(a1);
  uint64_t v6 = (re::RenderGraphFullscreenNode *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 456, 8);
  int v7 = re::RenderGraphFullscreenNode::RenderGraphFullscreenNode(v6, v4);
  *(void *)int v7 = &unk_26E718580;
  uint64_t v11 = v7;
  re::DynamicArray<re::TransitionCondition *>::add(a2, &v11);
  uint64_t v8 = a2[12];
  uint64_t v9 = a2[13];
  *((void *)v6 + 3) = a2[10];
  *((void *)v6 + 4) = v8;
  *((void *)v6 + 6) = v9;
  return v6;
}

uint64_t std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphBloomNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphBloomNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphBloomNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphBloomNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target_type()
{
}

uint64_t re::RenderGraphNodeRegistryItem<re::RenderGraphCombinedPostProcessNode>::introspectionInfo()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9BF10, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9BF10))
  {
    qword_26AF9BF08 = re::introspect_RenderGraphCombinedPostProcessNode(0);
    __cxa_guard_release(&qword_26AF9BF10);
  }
  return qword_26AF9BF08;
}

uint64_t re::RenderGraphNodeRegistryItem<re::RenderGraphCombinedPostProcessNode>::dataOffset()
{
  return 0;
}

const char *re::RenderGraphNodeRegistryItem<re::RenderGraphCombinedPostProcessNode>::typeName()
{
  return "RenderGraphCombinedPostProcessNode";
}

void re::RenderGraphNodeRegistryItem<re::RenderGraphCombinedPostProcessNode>::makeCreateFunction(void *a1@<X8>)
{
  *a1 = &unk_26E71CD10;
  a1[3] = a1;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphCombinedPostProcessNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphCombinedPostProcessNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::~__func()
{
}

void *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphCombinedPostProcessNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphCombinedPostProcessNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone()
{
  double result = operator new(0x10uLL);
  *double result = &unk_26E71CD10;
  return result;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphCombinedPostProcessNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphCombinedPostProcessNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E71CD10;
}

re::RenderGraphNode *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphCombinedPostProcessNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphCombinedPostProcessNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::operator()(re *a1, void *a2, const char **a3)
{
  uint64_t v4 = *a3;
  uint64_t v5 = re::globalAllocators(a1);
  uint64_t v6 = (re::RenderGraphNode *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 464, 8);
  int v7 = re::RenderGraphNode::RenderGraphNode(v6, v4);
  *(void *)int v7 = &unk_26E71AE08;
  *((void *)v7 + 32) = 0;
  *((_DWORD *)v7 + 66) = 0;
  *((void *)v7 + 52) = 0;
  *((void *)v7 + 53) = 0;
  *((void *)v7 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
  *((_DWORD *)v7 + 10re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = 0;
  *((_DWORD *)v7 + 100) = 0;
  *((unsigned char *)v7 + 404) = 0;
  *((void *)v7 + 55) = 0;
  *((void *)v7 + 56) = 0;
  *((void *)v7 + 57) = -1;
  uint64_t v11 = v7;
  re::DynamicArray<re::TransitionCondition *>::add(a2, &v11);
  uint64_t v8 = a2[12];
  uint64_t v9 = a2[13];
  *((void *)v6 + 3) = a2[10];
  *((void *)v6 + 4) = v8;
  *((void *)v6 + 6) = v9;
  return v6;
}

uint64_t std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphCombinedPostProcessNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphCombinedPostProcessNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphCombinedPostProcessNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphCombinedPostProcessNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target_type()
{
}

uint64_t re::RenderGraphNodeRegistryItem<re::RenderGraphDofBokehBlurNode>::introspectionInfo()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9BF20, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9BF20))
  {
    qword_26AF9BF18 = re::introspect_RenderGraphDofBokehBlurNode(0);
    __cxa_guard_release(&qword_26AF9BF20);
  }
  return qword_26AF9BF18;
}

uint64_t re::RenderGraphNodeRegistryItem<re::RenderGraphDofBokehBlurNode>::dataOffset()
{
  return 0;
}

const char *re::RenderGraphNodeRegistryItem<re::RenderGraphDofBokehBlurNode>::typeName()
{
  return "RenderGraphDofBokehBlurNode";
}

void re::RenderGraphNodeRegistryItem<re::RenderGraphDofBokehBlurNode>::makeCreateFunction(void *a1@<X8>)
{
  *a1 = &unk_26E71CDD8;
  a1[3] = a1;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphDofBokehBlurNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphDofBokehBlurNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::~__func()
{
}

void *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphDofBokehBlurNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphDofBokehBlurNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone()
{
  double result = operator new(0x10uLL);
  *double result = &unk_26E71CDD8;
  return result;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphDofBokehBlurNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphDofBokehBlurNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E71CDD8;
}

re::RenderGraphFullscreenNode *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphDofBokehBlurNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphDofBokehBlurNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::operator()(re *a1, void *a2, const char **a3)
{
  uint64_t v4 = *a3;
  uint64_t v5 = re::globalAllocators(a1);
  uint64_t v6 = (re::RenderGraphFullscreenNode *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 456, 8);
  int v7 = re::RenderGraphFullscreenNode::RenderGraphFullscreenNode(v6, v4);
  *(void *)int v7 = &unk_26E7181F8;
  uint64_t v11 = v7;
  re::DynamicArray<re::TransitionCondition *>::add(a2, &v11);
  uint64_t v8 = a2[12];
  uint64_t v9 = a2[13];
  *((void *)v6 + 3) = a2[10];
  *((void *)v6 + 4) = v8;
  *((void *)v6 + 6) = v9;
  return v6;
}

uint64_t std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphDofBokehBlurNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphDofBokehBlurNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphDofBokehBlurNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphDofBokehBlurNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target_type()
{
}

uint64_t re::RenderGraphNodeRegistryItem<re::RenderGraphDofCompositeNode>::introspectionInfo()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9BF30, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9BF30))
  {
    qword_26AF9BF28 = re::introspect_RenderGraphDofCompositeNode(0);
    __cxa_guard_release(&qword_26AF9BF30);
  }
  return qword_26AF9BF28;
}

uint64_t re::RenderGraphNodeRegistryItem<re::RenderGraphDofCompositeNode>::dataOffset()
{
  return 0;
}

const char *re::RenderGraphNodeRegistryItem<re::RenderGraphDofCompositeNode>::typeName()
{
  return "RenderGraphDofCompositeNode";
}

void re::RenderGraphNodeRegistryItem<re::RenderGraphDofCompositeNode>::makeCreateFunction(void *a1@<X8>)
{
  *a1 = &unk_26E71CEA0;
  a1[3] = a1;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphDofCompositeNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphDofCompositeNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::~__func()
{
}

void *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphDofCompositeNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphDofCompositeNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone()
{
  double result = operator new(0x10uLL);
  *double result = &unk_26E71CEA0;
  return result;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphDofCompositeNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphDofCompositeNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E71CEA0;
}

re::RenderGraphFullscreenNode *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphDofCompositeNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphDofCompositeNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::operator()(re *a1, void *a2, const char **a3)
{
  uint64_t v4 = *a3;
  uint64_t v5 = re::globalAllocators(a1);
  uint64_t v6 = (re::RenderGraphFullscreenNode *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 528, 8);
  int v7 = re::RenderGraphFullscreenNode::RenderGraphFullscreenNode(v6, v4);
  *(void *)int v7 = &unk_26E7182A0;
  *((void *)v7 + 57) = 0;
  *((void *)v7 + 5re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = 0;
  *((_OWORD *)v7 + 30) = 0u;
  *((_OWORD *)v7 + 3re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0u;
  *((_OWORD *)v7 + 32) = 0u;
  uint64_t v11 = v7;
  re::DynamicArray<re::TransitionCondition *>::add(a2, &v11);
  uint64_t v8 = a2[12];
  uint64_t v9 = a2[13];
  *((void *)v6 + 3) = a2[10];
  *((void *)v6 + 4) = v8;
  *((void *)v6 + 6) = v9;
  return v6;
}

uint64_t std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphDofCompositeNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphDofCompositeNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphDofCompositeNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphDofCompositeNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target_type()
{
}

uint64_t re::RenderGraphNodeRegistryItem<re::RenderGraphDofSetupNode>::introspectionInfo()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9BF40, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9BF40))
  {
    qword_26AF9BF38 = re::introspect_RenderGraphDofSetupNode(0);
    __cxa_guard_release(&qword_26AF9BF40);
  }
  return qword_26AF9BF38;
}

uint64_t re::RenderGraphNodeRegistryItem<re::RenderGraphDofSetupNode>::dataOffset()
{
  return 0;
}

const char *re::RenderGraphNodeRegistryItem<re::RenderGraphDofSetupNode>::typeName()
{
  return "RenderGraphDofSetupNode";
}

void re::RenderGraphNodeRegistryItem<re::RenderGraphDofSetupNode>::makeCreateFunction(void *a1@<X8>)
{
  *a1 = &unk_26E71CF68;
  a1[3] = a1;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphDofSetupNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphDofSetupNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::~__func()
{
}

void *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphDofSetupNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphDofSetupNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone()
{
  double result = operator new(0x10uLL);
  *double result = &unk_26E71CF68;
  return result;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphDofSetupNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphDofSetupNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E71CF68;
}

re::RenderGraphFullscreenNode *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphDofSetupNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphDofSetupNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::operator()(re *a1, void *a2, const char **a3)
{
  uint64_t v4 = *a3;
  uint64_t v5 = re::globalAllocators(a1);
  uint64_t v6 = (re::RenderGraphFullscreenNode *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 576, 8);
  int v7 = re::RenderGraphFullscreenNode::RenderGraphFullscreenNode(v6, v4);
  *(void *)int v7 = &unk_26E718150;
  *((void *)v7 + 5re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = 0;
  *((void *)v7 + 59) = 0;
  *((void *)v7 + 57) = 0;
  *(_OWORD *)((char *)v7 + 504) = 0u;
  *(_OWORD *)((char *)v7 + 520) = 0u;
  *(_OWORD *)((char *)v7 + 536) = 0u;
  *(_OWORD *)((char *)v7 + 552) = 0u;
  *((void *)v7 + 7re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
  uint64_t v11 = v7;
  re::DynamicArray<re::TransitionCondition *>::add(a2, &v11);
  uint64_t v8 = a2[12];
  uint64_t v9 = a2[13];
  *((void *)v6 + 3) = a2[10];
  *((void *)v6 + 4) = v8;
  *((void *)v6 + 6) = v9;
  return v6;
}

uint64_t std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphDofSetupNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphDofSetupNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphDofSetupNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphDofSetupNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target_type()
{
}

uint64_t re::RenderGraphNodeRegistryItem<re::RenderGraphDownsampleBlur>::introspectionInfo()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9BF50, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9BF50))
  {
    qword_26AF9BF48 = re::introspect_RenderGraphDownsampleBlur(0);
    __cxa_guard_release(&qword_26AF9BF50);
  }
  return qword_26AF9BF48;
}

uint64_t re::RenderGraphNodeRegistryItem<re::RenderGraphDownsampleBlur>::dataOffset()
{
  return 0;
}

const char *re::RenderGraphNodeRegistryItem<re::RenderGraphDownsampleBlur>::typeName()
{
  return "RenderGraphDownsampleBlur";
}

void re::RenderGraphNodeRegistryItem<re::RenderGraphDownsampleBlur>::makeCreateFunction(void *a1@<X8>)
{
  *a1 = &unk_26E71D030;
  a1[3] = a1;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphDownsampleBlur>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphDownsampleBlur>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::~__func()
{
}

void *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphDownsampleBlur>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphDownsampleBlur>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone()
{
  double result = operator new(0x10uLL);
  *double result = &unk_26E71D030;
  return result;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphDownsampleBlur>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphDownsampleBlur>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E71D030;
}

re::RenderGraphNode *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphDownsampleBlur>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphDownsampleBlur>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::operator()(re *a1, void *a2, const char **a3)
{
  uint64_t v4 = *a3;
  uint64_t v5 = re::globalAllocators(a1);
  uint64_t v6 = (re::RenderGraphNode *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 320, 8);
  int v7 = re::RenderGraphNode::RenderGraphNode(v6, v4);
  *(void *)int v7 = &unk_26E7184D8;
  *((void *)v7 + 32) = 0;
  *((void *)v7 + 33) = -1;
  *((_OWORD *)v7 + 17) = 0u;
  *((_OWORD *)v7 + 1re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = 0u;
  *((void *)v7 + 3re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = -1;
  *((void *)v7 + 39) = 0;
  uint64_t v11 = v7;
  re::DynamicArray<re::TransitionCondition *>::add(a2, &v11);
  uint64_t v8 = a2[12];
  uint64_t v9 = a2[13];
  *((void *)v6 + 3) = a2[10];
  *((void *)v6 + 4) = v8;
  *((void *)v6 + 6) = v9;
  return v6;
}

uint64_t std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphDownsampleBlur>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphDownsampleBlur>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphDownsampleBlur>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphDownsampleBlur>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target_type()
{
}

uint64_t re::RenderGraphNodeRegistryItem<re::RenderGraphDownsampleThresholdNode>::introspectionInfo()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9BF60, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9BF60))
  {
    qword_26AF9BF58 = re::introspect_RenderGraphDownsampleThresholdNode(0);
    __cxa_guard_release(&qword_26AF9BF60);
  }
  return qword_26AF9BF58;
}

uint64_t re::RenderGraphNodeRegistryItem<re::RenderGraphDownsampleThresholdNode>::dataOffset()
{
  return 0;
}

const char *re::RenderGraphNodeRegistryItem<re::RenderGraphDownsampleThresholdNode>::typeName()
{
  return "RenderGraphDownsampleThresholdNode";
}

void re::RenderGraphNodeRegistryItem<re::RenderGraphDownsampleThresholdNode>::makeCreateFunction(void *a1@<X8>)
{
  *a1 = &unk_26E71D0F8;
  a1[3] = a1;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphDownsampleThresholdNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphDownsampleThresholdNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::~__func()
{
}

void *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphDownsampleThresholdNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphDownsampleThresholdNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone()
{
  double result = operator new(0x10uLL);
  *double result = &unk_26E71D0F8;
  return result;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphDownsampleThresholdNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphDownsampleThresholdNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E71D0F8;
}

re::RenderGraphNode *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphDownsampleThresholdNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphDownsampleThresholdNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::operator()(re *a1, void *a2, const char **a3)
{
  uint64_t v4 = *a3;
  uint64_t v5 = re::globalAllocators(a1);
  uint64_t v6 = (re::RenderGraphNode *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 288, 8);
  int v7 = re::RenderGraphNode::RenderGraphNode(v6, v4);
  *(void *)int v7 = &unk_26E718430;
  *((_OWORD *)v7 + 16) = 0u;
  *((_OWORD *)v7 + 17) = 0u;
  uint64_t v11 = v7;
  re::DynamicArray<re::TransitionCondition *>::add(a2, &v11);
  uint64_t v8 = a2[12];
  uint64_t v9 = a2[13];
  *((void *)v6 + 3) = a2[10];
  *((void *)v6 + 4) = v8;
  *((void *)v6 + 6) = v9;
  return v6;
}

uint64_t std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphDownsampleThresholdNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphDownsampleThresholdNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphDownsampleThresholdNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphDownsampleThresholdNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target_type()
{
}

uint64_t re::RenderGraphNodeRegistryItem<re::RenderGraphMotionBlurNode>::introspectionInfo()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9BF70, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9BF70))
  {
    qword_26AF9BF68 = re::introspect_RenderGraphMotionBlurNode(0);
    __cxa_guard_release(&qword_26AF9BF70);
  }
  return qword_26AF9BF68;
}

uint64_t re::RenderGraphNodeRegistryItem<re::RenderGraphMotionBlurNode>::dataOffset()
{
  return 0;
}

const char *re::RenderGraphNodeRegistryItem<re::RenderGraphMotionBlurNode>::typeName()
{
  return "RenderGraphMotionBlurNode";
}

void re::RenderGraphNodeRegistryItem<re::RenderGraphMotionBlurNode>::makeCreateFunction(void *a1@<X8>)
{
  *a1 = &unk_26E71D1C0;
  a1[3] = a1;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphMotionBlurNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphMotionBlurNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::~__func()
{
}

void *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphMotionBlurNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphMotionBlurNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone()
{
  double result = operator new(0x10uLL);
  *double result = &unk_26E71D1C0;
  return result;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphMotionBlurNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphMotionBlurNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E71D1C0;
}

re::RenderGraphFullscreenNode *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphMotionBlurNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphMotionBlurNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::operator()(re *a1, void *a2, const char **a3)
{
  uint64_t v4 = *a3;
  uint64_t v5 = re::globalAllocators(a1);
  uint64_t v6 = (re::RenderGraphFullscreenNode *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 600, 8);
  int v7 = re::RenderGraphFullscreenNode::RenderGraphFullscreenNode(v6, v4);
  *(void *)int v7 = &unk_26E71B280;
  *(_OWORD *)((char *)v7 + 456) = 0u;
  *(_OWORD *)((char *)v7 + 472) = 0u;
  *((void *)v7 + 6re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0x3C3C888F86;
  *(_OWORD *)((char *)v7 + 504) = 0u;
  *(_OWORD *)((char *)v7 + 520) = 0u;
  *(_OWORD *)((char *)v7 + 536) = 0u;
  *(_OWORD *)((char *)v7 + 552) = 0u;
  *(_OWORD *)((char *)v7 + 56re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = 0u;
  *(_OWORD *)((char *)v7 + 584) = 0u;
  uint64_t v11 = v7;
  re::DynamicArray<re::TransitionCondition *>::add(a2, &v11);
  uint64_t v8 = a2[12];
  uint64_t v9 = a2[13];
  *((void *)v6 + 3) = a2[10];
  *((void *)v6 + 4) = v8;
  *((void *)v6 + 6) = v9;
  return v6;
}

uint64_t std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphMotionBlurNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphMotionBlurNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphMotionBlurNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphMotionBlurNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target_type()
{
}

uint64_t re::RenderGraphNodeRegistryItem<re::RenderGraphTonemapNode>::introspectionInfo()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9BF80, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9BF80))
  {
    qword_26AF9BF78 = re::introspect_RenderGraphTonemapNode(0);
    __cxa_guard_release(&qword_26AF9BF80);
  }
  return qword_26AF9BF78;
}

uint64_t re::RenderGraphNodeRegistryItem<re::RenderGraphTonemapNode>::dataOffset()
{
  return 0;
}

const char *re::RenderGraphNodeRegistryItem<re::RenderGraphTonemapNode>::typeName()
{
  return "RenderGraphTonemapNode";
}

void re::RenderGraphNodeRegistryItem<re::RenderGraphTonemapNode>::makeCreateFunction(void *a1@<X8>)
{
  *a1 = &unk_26E71D288;
  a1[3] = a1;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphTonemapNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphTonemapNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::~__func()
{
}

void *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphTonemapNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphTonemapNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone()
{
  double result = operator new(0x10uLL);
  *double result = &unk_26E71D288;
  return result;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphTonemapNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphTonemapNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E71D288;
}

uint64_t std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphTonemapNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphTonemapNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::operator()(re *a1, void *a2, const char **a3)
{
  uint64_t v4 = *a3;
  uint64_t v5 = re::globalAllocators(a1);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 520, 8);
  int v7 = re::RenderGraphFullscreenNode::RenderGraphFullscreenNode((re::RenderGraphFullscreenNode *)v6, v4);
  *(void *)int v7 = &unk_26E71F028;
  *(_OWORD *)(v6 + 456) = xmmword_23436C470;
  *(_OWORD *)(v6 + 472) = xmmword_2343679C0;
  *((unsigned char *)v7 + 48re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = 0;
  *(void *)(v6 + 492) = 0x3F8000003F800000;
  *((unsigned char *)v7 + 500) = 0;
  *((void *)v7 + 63) = 0x3F80000000000000;
  *((unsigned char *)v7 + 512) = 0;
  *((unsigned char *)v7 + 516) = 0;
  uint64_t v11 = v7;
  re::DynamicArray<re::TransitionCondition *>::add(a2, &v11);
  uint64_t v8 = a2[12];
  uint64_t v9 = a2[13];
  *(void *)(v6 + 24) = a2[10];
  *(void *)(v6 + 32) = v8;
  *(void *)(v6 + 4re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = v9;
  return v6;
}

uint64_t std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphTonemapNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphTonemapNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphTonemapNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphTonemapNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target_type()
{
}

uint64_t re::RenderGraphNodeRegistryItem<re::RenderGraphUpdateMaterialTextureSource>::introspectionInfo()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9BF90, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9BF90))
  {
    qword_26AF9BF88 = re::introspect_RenderGraphUpdateMaterialTextureSource(0);
    __cxa_guard_release(&qword_26AF9BF90);
  }
  return qword_26AF9BF88;
}

uint64_t re::RenderGraphNodeRegistryItem<re::RenderGraphUpdateMaterialTextureSource>::dataOffset()
{
  return 0;
}

const char *re::RenderGraphNodeRegistryItem<re::RenderGraphUpdateMaterialTextureSource>::typeName()
{
  return "UpdateMaterialTextureSource";
}

void re::RenderGraphNodeRegistryItem<re::RenderGraphUpdateMaterialTextureSource>::makeCreateFunction(void *a1@<X8>)
{
  *a1 = &unk_26E71D350;
  a1[3] = a1;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphUpdateMaterialTextureSource>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphUpdateMaterialTextureSource>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::~__func()
{
}

void *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphUpdateMaterialTextureSource>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphUpdateMaterialTextureSource>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone()
{
  double result = operator new(0x10uLL);
  *double result = &unk_26E71D350;
  return result;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphUpdateMaterialTextureSource>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphUpdateMaterialTextureSource>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E71D350;
}

uint64_t std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphUpdateMaterialTextureSource>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphUpdateMaterialTextureSource>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::operator()(re *a1, void *a2, const char **a3)
{
  uint64_t v4 = *a3;
  uint64_t v5 = re::globalAllocators(a1);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 344, 8);
  int v7 = re::RenderGraphNode::RenderGraphNode((re::RenderGraphNode *)v6, v4);
  *(void *)int v7 = &unk_26E71B6F8;
  uint64_t v8 = (void *)((char *)v7 + 256);
  *((_OWORD *)v7 + 16) = 0u;
  *((_OWORD *)v7 + 17) = 0u;
  re::DynamicString::setCapacity(v8, 0);
  *(_OWORD *)(v6 + 28re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = 0u;
  *(_OWORD *)(v6 + 304) = 0u;
  *(void *)(v6 + 320) = 0x7FFFFFFF00000000;
  *(_DWORD *)(v6 + 32re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = 0;
  *(unsigned char *)(v6 + 336) = 0;
  uint64_t v12 = v6;
  re::DynamicArray<re::TransitionCondition *>::add(a2, &v12);
  uint64_t v9 = a2[12];
  uint64_t v10 = a2[13];
  *(void *)(v6 + 24) = a2[10];
  *(void *)(v6 + 32) = v9;
  *(void *)(v6 + 4re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = v10;
  return v6;
}

uint64_t std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphUpdateMaterialTextureSource>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphUpdateMaterialTextureSource>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphUpdateMaterialTextureSource>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphUpdateMaterialTextureSource>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target_type()
{
}

uint64_t re::RenderGraphNodeRegistryItem<re::RenderGraphUploadBloomParams>::introspectionInfo()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9BFA0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9BFA0))
  {
    qword_26AF9BF98 = re::introspect_RenderGraphUploadBloomParams(0);
    __cxa_guard_release(&qword_26AF9BFA0);
  }
  return qword_26AF9BF98;
}

uint64_t re::RenderGraphNodeRegistryItem<re::RenderGraphUploadBloomParams>::dataOffset()
{
  return 0;
}

const char *re::RenderGraphNodeRegistryItem<re::RenderGraphUploadBloomParams>::typeName()
{
  return "RenderGraphUploadBloomParams";
}

void re::RenderGraphNodeRegistryItem<re::RenderGraphUploadBloomParams>::makeCreateFunction(void *a1@<X8>)
{
  *a1 = &unk_26E71D418;
  a1[3] = a1;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphUploadBloomParams>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphUploadBloomParams>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::~__func()
{
}

void *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphUploadBloomParams>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphUploadBloomParams>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone()
{
  double result = operator new(0x10uLL);
  *double result = &unk_26E71D418;
  return result;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphUploadBloomParams>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphUploadBloomParams>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E71D418;
}

re::RenderGraphNode *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphUploadBloomParams>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphUploadBloomParams>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::operator()(re *a1, void *a2, const char **a3)
{
  uint64_t v4 = *a3;
  uint64_t v5 = re::globalAllocators(a1);
  uint64_t v6 = (re::RenderGraphNode *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 272, 8);
  int v7 = re::RenderGraphNode::RenderGraphNode(v6, v4);
  *(void *)int v7 = &unk_26E718388;
  *((void *)v7 + 32) = 0x3F8000003E800000;
  *((void *)v7 + 33) = 0x13F800000;
  uint64_t v11 = v7;
  re::DynamicArray<re::TransitionCondition *>::add(a2, &v11);
  uint64_t v8 = a2[12];
  uint64_t v9 = a2[13];
  *((void *)v6 + 3) = a2[10];
  *((void *)v6 + 4) = v8;
  *((void *)v6 + 6) = v9;
  return v6;
}

uint64_t std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphUploadBloomParams>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphUploadBloomParams>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphUploadBloomParams>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphUploadBloomParams>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target_type()
{
}

uint64_t re::RenderGraphNodeRegistryItem<re::RenderGraphUploadPostParams>::introspectionInfo()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9BFB0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9BFB0))
  {
    qword_26AF9BFA8 = re::introspect_RenderGraphUploadPostParams(0);
    __cxa_guard_release(&qword_26AF9BFB0);
  }
  return qword_26AF9BFA8;
}

uint64_t re::RenderGraphNodeRegistryItem<re::RenderGraphUploadPostParams>::dataOffset()
{
  return 0;
}

const char *re::RenderGraphNodeRegistryItem<re::RenderGraphUploadPostParams>::typeName()
{
  return "RenderGraphUploadPostParams";
}

void re::RenderGraphNodeRegistryItem<re::RenderGraphUploadPostParams>::makeCreateFunction(void *a1@<X8>)
{
  *a1 = &unk_26E71D4E0;
  a1[3] = a1;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphUploadPostParams>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphUploadPostParams>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::~__func()
{
}

void *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphUploadPostParams>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphUploadPostParams>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone()
{
  double result = operator new(0x10uLL);
  *double result = &unk_26E71D4E0;
  return result;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphUploadPostParams>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphUploadPostParams>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E71D4E0;
}

uint64_t std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphUploadPostParams>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphUploadPostParams>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::operator()(re *a1, void *a2, const char **a3)
{
  uint64_t v4 = *a3;
  uint64_t v5 = re::globalAllocators(a1);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 336, 8);
  int v7 = re::RenderGraphNode::RenderGraphNode((re::RenderGraphNode *)v6, v4);
  *(void *)int v7 = &unk_26E71AD60;
  *((_DWORD *)v7 + 64) = 0;
  *(_OWORD *)(v6 + 260) = xmmword_23436C470;
  *(_OWORD *)(v6 + 276) = xmmword_2343679C0;
  *((unsigned char *)v7 + 292) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *((void *)v7 + 37) = _D0;
  *((unsigned char *)v7 + 304) = 0;
  *(void *)(v6 + 30re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = 0x3F80000000000000;
  *((unsigned char *)v7 + 316) = 0;
  *((void *)v7 + 40) = 0x3F8000003E800000;
  *((void *)v7 + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0x13F800000;
  long long v16 = v7;
  re::DynamicArray<re::TransitionCondition *>::add(a2, &v16);
  uint64_t v13 = a2[12];
  uint64_t v14 = a2[13];
  *(void *)(v6 + 24) = a2[10];
  *(void *)(v6 + 32) = v13;
  *(void *)(v6 + 4re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = v14;
  return v6;
}

uint64_t std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphUploadPostParams>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphUploadPostParams>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphUploadPostParams>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphUploadPostParams>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target_type()
{
}

void *std::__function::__value_func<re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::~__value_func[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void re::HashTable<unsigned long,std::function<re::RenderGraphNode & ()(re::RenderGraph &,char const*)>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      int v11 = *(_DWORD *)(a1 + 28);
      signed int v12 = 2 * v11;
      uint64_t v13 = *(void *)a1;
      if (*(void *)a1)
      {
        if (v12) {
          BOOL v14 = v9 == v12;
        }
        else {
          BOOL v14 = 1;
        }
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v29, 0, 36);
          *(void *)&v29[36] = 0x7FFFFFFFLL;
          re::HashTable<re::Pair<re::StringSlice,re::StringSlice,true>,unsigned long,re::Hash<re::Pair<re::StringSlice,re::StringSlice,true>>,re::EqualTo<re::Pair<re::StringSlice,re::StringSlice,true>>,true,false>::init((uint64_t)v29, v13, v12);
          long long v15 = *(_OWORD *)v29;
          *(_OWORD *)char v29 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          uint64_t v16 = *(void *)&v29[16];
          uint64_t v17 = *(void *)(a1 + 16);
          *(void *)&unsigned char v29[16] = v17;
          *(void *)(a1 + 16) = v16;
          long long v19 = *(_OWORD *)&v29[24];
          *(_OWORD *)&v29[24] = *(_OWORD *)(a1 + 24);
          unsigned int v18 = *(_DWORD *)&v29[32];
          *(_OWORD *)(a1 + 24) = v19;
          uint64_t v20 = v18;
          if (v18)
          {
            uint64_t v21 = v17 + 16;
            do
            {
              if ((*(_DWORD *)(v21 - 8) & 0x80000000) != 0) {
                re::HashTable<unsigned long,std::function<re::RenderGraphNode & ()(re::RenderGraph &,char const*)>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::addAsMove(a1, *(void *)(v21 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(v21 - 16), v21, v21 + 8);
              }
              v21 += 56;
              --v20;
            }
            while (v20);
          }
          re::HashTable<unsigned long,std::function<re::RenderGraphNode & ()(re::RenderGraph &,char const*)>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::deinit((uint64_t *)v29);
        }
      }
      else
      {
        if (v12) {
          signed int v24 = 2 * v11;
        }
        else {
          signed int v24 = 3;
        }
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v22 = *(void *)(a1 + 16);
    int v23 = *(_DWORD *)(v22 + 56 * v9 + 8);
  }
  else
  {
    uint64_t v22 = *(void *)(a1 + 16);
    int v23 = *(_DWORD *)(v22 + 56 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v23 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v22 + 56 * v9 + re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = v23 | 0x80000000;
  uint64_t v25 = a2;
  uint64_t v26 = *(void *)(a1 + 8);
  *(_DWORD *)(*(void *)(a1 + 16) + 56 * v9 + re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 56 * v9 + 8) & 0x80000000 | *(_DWORD *)(v26 + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 56 * v9) = a3;
  *(void *)(*(void *)(a1 + 16) + 56 * v9 + 16) = *a4;
  uint64_t v28 = *(void *)(a5 + 24);
  if (v28)
  {
    if (v28 == a5)
    {
      uint64_t v27 = *(void *)(a1 + 16) + 56 * v9 + 24;
      *(void *)(v27 + 24) = v27;
      (*(void (**)(void))(**(void **)(a5 + 24) + 24))(*(void *)(a5 + 24));
      uint64_t v26 = *(void *)(a1 + 8);
    }
    else
    {
      *(void *)(*(void *)(a1 + 16) + 56 * v9 + 4re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = v28;
      *(void *)(a5 + 24) = 0;
    }
  }
  else
  {
    *(void *)(*(void *)(a1 + 16) + 56 * v9 + 4re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = 0;
  }
  *(_DWORD *)(v26 + 4 * v25) = v9;
  ++*(_DWORD *)(a1 + 28);
}

void re::GenerateProjectiveShadowMapNode::execute(const char **this, re::RenderGraphContext *a2)
{
  uint64_t v155 = *MEMORY[0x263EF8340];
  MurmurHash3_x64_128((uint64_t)"arProjectiveShadowTechnique", 27, 0, (unint64_t *)buf);
  unint64_t v3 = *(void *)buf;
  uint64_t v4 = *(void *)&buf[8];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9BFC0, memory_order_acquire) & 1) == 0)
  {
    long long v89 = (re *)__cxa_guard_acquire(&qword_26AF9BFC0);
    if (v89)
    {
      _MergedGlobals_457 = re::getCombinedScopeHash(v89, v90, v91);
      __cxa_guard_release(&qword_26AF9BFC0);
    }
  }
  uint64_t v5 = re::RenderGraphDataStore::tryGet<re::SceneArrayData>(*((void *)a2 + 146), _MergedGlobals_457);
  if (!v5)
  {
    int v87 = *re::graphicsLogObjects(0);
    if (os_log_type_enabled(v87, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233120000, v87, OS_LOG_TYPE_DEFAULT, "GenerateProjectiveShadowMapNode::execute: Missing SceneArrayData. Skipping node execution.", buf, 2u);
    }
    return;
  }
  uint64_t v6 = v5;
  int v7 = *(re::Allocator **)(*(void *)a2 + 24);
  unsigned int v117 = (re::DrawTable *)(*(uint64_t (**)(re::Allocator *, uint64_t, uint64_t))(*(void *)v7 + 32))(v7, 328, 8);
  re::DrawTable::DrawTable(v117, v7);
  uint64_t v8 = *(void *)(v6 + 24);
  if (!v8) {
    goto LABEL_91;
  }
  uint64_t v9 = *(const char ***)(v6 + 40);
  unint64_t v93 = &v9[v8];
  unint64_t v116 = (v4 + (v3 << 6) + (v3 >> 2) - 0x61C8864680B583E9) ^ v3;
  __asm { FMOV            V9.2S, #1.0 }
  uint64_t v122 = a2;
  do
  {
    uint64_t v94 = v9;
    long long v15 = *v9;
    size_t v16 = strlen(*v9);
    if (v16)
    {
      MurmurHash3_x64_128((uint64_t)v15, v16, 0, (unint64_t *)buf);
      uint64_t v17 = (*(void *)&buf[8] - 0x61C8864680B583E9 + (*(void *)buf << 6) + (*(void *)buf >> 2)) ^ *(void *)buf;
    }
    else
    {
      uint64_t v17 = 0;
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9BFD0, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_26AF9BFD0))
    {
      qword_26AF9BFC8 = re::hashString((re *)"ProjectiveShadow", v85);
      __cxa_guard_release(&qword_26AF9BFD0);
    }
    uint64_t v18 = *((void *)a2 + 146);
    unint64_t v19 = (unint64_t)"N2re27RenderGraphDataStoreWrapperINS_18PlanarReceiverDataEEE";
    if (((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_18PlanarReceiverDataEEE" & 0x8000000000000000) != 0)
    {
      uint64_t v20 = (unsigned __int8 *)((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_18PlanarReceiverDataEEE" & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v21 = 5381;
      do
      {
        unint64_t v19 = v21;
        unsigned int v22 = *v20++;
        uint64_t v21 = (33 * v21) ^ v22;
      }
      while (v22);
    }
    uint64_t v23 = v17 - 0x61C8864680B583E9;
    *(void *)buf = (((v23 + (qword_26AF9BFC8 << 6) + ((unint64_t)qword_26AF9BFC8 >> 2)) ^ qword_26AF9BFC8)
                    - 0x61C8864680B583E9
                    + (v19 << 6)
                    + (v19 >> 2)) ^ v19;
    signed int v24 = (re::RenderGraphContext **)re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(v18 + 64, (uint64_t *)buf);
    if (v24)
    {
      a2 = *v24;
      if (*v24)
      {
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9BFE0, memory_order_acquire) & 1) == 0
          && __cxa_guard_acquire(&qword_26AF9BFE0))
        {
          qword_26AF9BFD8 = re::hashString((re *)"MeshScenes", v86);
          __cxa_guard_release(&qword_26AF9BFE0);
        }
        uint64_t v25 = re::RenderGraphDataStore::tryGet<re::RenderGraphDataStoreWrapper<re::MeshSceneArrays>>(*((void *)v122 + 146), (v23 + (qword_26AF9BFD8 << 6) + ((unint64_t)qword_26AF9BFD8 >> 2)) ^ qword_26AF9BFD8);
        uint64_t v26 = v25 + 8;
        if (!v25) {
          uint64_t v26 = 0;
        }
        uint64_t v96 = v26;
        uint64_t v95 = *(void *)(v26 + 40);
        if (v95)
        {
          unint64_t v27 = 0;
          uint64_t v101 = a2;
          while (1)
          {
            unint64_t v97 = v27;
            uint64_t PassTechniqueMapping = re::BucketArray<re::MeshSceneCollection,16ul>::operator[](v96, v27);
            if (*(void *)(PassTechniqueMapping + 16)) {
              break;
            }
LABEL_81:
            unint64_t v27 = v97 + 1;
            if (v97 + 1 == v95) {
              goto LABEL_82;
            }
          }
          uint64_t v29 = PassTechniqueMapping;
          uint64_t v30 = 0;
          uint64_t v31 = *(void *)(*((void *)v122 + 1) + 32);
          uint64_t v108 = v31 + 8;
          uint64_t v109 = v31 + 72;
          uint64_t v107 = PassTechniqueMapping;
          while (1)
          {
            if (*((void *)a2 + 4))
            {
              uint64_t v32 = *(void *)(v29 + 32);
              uint64_t v33 = (float32x4_t *)(v32 + 656 * v30);
              unint64_t v34 = v33[26].u64[0];
              unint64_t v35 = 0x94D049BB133111EBLL
                  * ((0xBF58476D1CE4E5B9 * (v34 ^ (v34 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v34 ^ (v34 >> 30))) >> 27));
              unint64_t v112 = v35 ^ (v35 >> 31);
              uint64_t v36 = *(unsigned int *)(*((void *)a2 + 5) + 4 * (v112 % *((unsigned int *)a2 + 14)));
              if (v36 != 0x7FFFFFFF)
              {
                uint64_t v37 = *((void *)a2 + 6);
                uint64_t v38 = *(void *)(v37 + 32 * v36 + 16);
                uint64_t v39 = *(unsigned int *)(*((void *)a2 + 5) + 4 * (v112 % *((unsigned int *)a2 + 14)));
                if (v38 == v34)
                {
                  uint64_t v40 = *(unsigned int *)(*((void *)a2 + 5) + 4 * (v112 % *((unsigned int *)a2 + 14)));
                }
                else
                {
                  do
                  {
                    uint64_t v39 = *(_DWORD *)(v37 + 32 * v39 + 8) & 0x7FFFFFFF;
                    if (v39 == 0x7FFFFFFF) {
                      goto LABEL_34;
                    }
                  }
                  while (*(void *)(v37 + 32 * v39 + 16) != v34);
                  while (1)
                  {
                    uint64_t v40 = v36;
                    if (v38 == v34) {
                      break;
                    }
                    uint64_t v36 = *(_DWORD *)(v37 + 32 * v36 + 8) & 0x7FFFFFFF;
                    uint64_t v40 = 0x7FFFFFFFLL;
                    if (v36 == 0x7FFFFFFF) {
                      break;
                    }
                    uint64_t v38 = *(void *)(v37 + 32 * v36 + 16);
                  }
                }
                uint64_t v41 = v37 + 32 * v40;
                unsigned int v44 = *(_DWORD *)(v41 + 24);
                uint64_t v42 = v41 + 24;
                unint64_t v43 = v44;
                unint64_t v45 = *((void *)a2 + 2);
                if (v45 <= v44)
                {
                  v130[0] = 0;
                  long long v139 = 0u;
                  long long v140 = 0u;
                  long long v137 = 0u;
                  long long v138 = 0u;
                  *(_OWORD *)buf = 0u;
                  os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                  *(_DWORD *)uint64_t v131 = 136315906;
                  *(void *)&v131[4] = "operator[]";
                  *(_WORD *)&v131[12] = 1024;
                  *(_DWORD *)&v131[14] = 476;
                  *(_WORD *)&v131[18] = 2048;
                  *(void *)&v131[20] = v43;
                  *(_WORD *)&v131[28] = 2048;
                  *(void *)&v131[30] = v45;
                  _os_log_send_and_compose_impl();
                  _os_crash_msg();
                  __break(1u);
LABEL_96:
                  v130[0] = 0;
                  long long v139 = 0u;
                  long long v140 = 0u;
                  long long v137 = 0u;
                  long long v138 = 0u;
                  *(_OWORD *)buf = 0u;
                  os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                  *(_DWORD *)uint64_t v131 = 136315906;
                  *(void *)&v131[4] = "operator[]";
                  *(_WORD *)&v131[12] = 1024;
                  *(_DWORD *)&v131[14] = 476;
                  *(_WORD *)&v131[18] = 2048;
                  *(void *)&v131[20] = v45;
                  *(_WORD *)&v131[28] = 2048;
                  *(void *)&v131[30] = v43;
                  _os_log_send_and_compose_impl();
                  _os_crash_msg();
                  __break(1u);
LABEL_97:
                  v130[0] = 0;
                  long long v139 = 0u;
                  long long v140 = 0u;
                  long long v137 = 0u;
                  long long v138 = 0u;
                  *(_OWORD *)buf = 0u;
                  os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                  *(_DWORD *)uint64_t v131 = 136315906;
                  *(void *)&v131[4] = "operator[]";
                  *(_WORD *)&v131[12] = 1024;
                  *(_DWORD *)&v131[14] = 468;
                  *(_WORD *)&v131[18] = 2048;
                  *(void *)&v131[20] = a2;
                  *(_WORD *)&v131[28] = 2048;
                  *(void *)&v131[30] = v45;
                  _os_log_send_and_compose_impl();
                  _os_crash_msg();
                  __break(1u);
LABEL_98:
                  uint64_t v88 = re::DrawCallRecorder::allocateDrawCallRecorderGroup((re::RenderGraphContext *)((char *)a2 + 1336), this[2], "arProjectiveShadowTechnique");
                  goto LABEL_93;
                }
                unint64_t v45 = *(unsigned int *)(v42 + 4);
                uint64_t v46 = *((void *)a2 + 3) + 24 * v43;
                unint64_t v43 = *(void *)(v46 + 8);
                if (v43 <= v45) {
                  goto LABEL_96;
                }
                uint64_t v47 = *(void *)(v46 + 16);
                uint64_t v111 = (void *)(v47 + 96 * v45 + 48);
                if (!*v111
                  || (uint64_t v48 = v47 + 96 * v45,
                      char v100 = (void *)(v48 + 56),
                      long long v99 = (unsigned int *)(v48 + 72),
                      uint64_t v49 = *(unsigned int *)(*(void *)(v48 + 56) + 4 * (v112 % *(unsigned int *)(v48 + 72))),
                      v49 == 0x7FFFFFFF))
                {
LABEL_32:
                  uint64_t v52 = *re::graphicsLogObjects((re *)PassTechniqueMapping);
                  uint64_t PassTechniqueMapping = os_log_type_enabled(v52, OS_LOG_TYPE_DEBUG);
                  if (PassTechniqueMapping)
                  {
                    *(_WORD *)buf = 0;
                    _os_log_debug_impl(&dword_233120000, v52, OS_LOG_TYPE_DEBUG, "No material parameters for this entity (probably 0-sized bounding box), skip the shadow rendering!\n", buf, 2u);
                  }
                }
                else
                {
                  uint64_t v50 = v47 + 96 * v45;
                  uint64_t v51 = *(void *)(v50 + 64);
                  int v110 = (uint64_t *)(v50 + 64);
                  while (*(void *)(v51 + 32 * v49 + 16) != v34)
                  {
                    uint64_t v49 = *(_DWORD *)(v51 + 32 * v49 + 8) & 0x7FFFFFFF;
                    if (v49 == 0x7FFFFFFF) {
                      goto LABEL_32;
                    }
                  }
                  if (*(unsigned char *)(v32 + 656 * v30 + 643) && v33->i64[1])
                  {
                    unint64_t v53 = 0;
                    uint64_t v106 = v33 + 3;
                    unint64_t v121 = v33 + 26;
                    uint64_t v54 = v32 + 656 * v30;
                    uint64_t v104 = v30;
                    uint64_t v105 = v54 + 16;
                    unsigned __int8 v98 = (uint64_t *)(v47 + 96 * v45 + 40);
                    uint64_t v55 = (unint64_t *)(v54 + 120);
                    unint64_t v115 = (void *)(v54 + 112);
                    uint64_t v120 = (_DWORD *)(v54 + 320);
                    unint64_t v118 = (_DWORD *)(v54 + 412);
                    uint64_t v119 = (_DWORD *)(v54 + 408);
                    uint64_t v102 = v33[26].i64[0];
                    long long v103 = v33;
                    while (1)
                    {
                      unint64_t v113 = v53;
                      uint64_t v56 = re::DataArray<re::MeshInstance>::get(v109, *(void *)(v33->i64[0] + 8 * v53));
                      uint64_t PassTechniqueMapping = re::DataArray<re::MeshModel>::get(v108, *(void *)(v56 + 16));
                      uint64_t v57 = PassTechniqueMapping;
                      uint64_t v58 = 0;
                      float32x4_t v59 = *v106;
                      float32x4_t v60 = v106[1];
                      float32x4_t v61 = v106[2];
                      float32x4_t v62 = v106[3];
                      long long v63 = *(_OWORD *)(v56 + 48);
                      long long v64 = *(_OWORD *)(v56 + 64);
                      long long v65 = *(_OWORD *)(v56 + 80);
                      *(_OWORD *)uint64_t v131 = *(_OWORD *)(v56 + 32);
                      *(_OWORD *)&v131[16] = v63;
                      *(_OWORD *)&v131[32] = v64;
                      *(_OWORD *)uint64_t v132 = v65;
                      do
                      {
                        *(float32x4_t *)&buf[v58] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v59, COERCE_FLOAT(*(_OWORD *)&v131[v58])), v60, *(float32x2_t *)&v131[v58], 1), v61, *(float32x4_t *)&v131[v58], 2), v62, *(float32x4_t *)&v131[v58], 3);
                        v58 += 16;
                      }
                      while (v58 != 64);
                      long long v126 = v137;
                      long long v127 = *(_OWORD *)buf;
                      long long v124 = v139;
                      long long v125 = v138;
                      if (*(void *)v105 && (uint64_t v66 = *(void *)(*(void *)v105 + 96)) != 0)
                      {
                        unint64_t v45 = *(void *)(v66 + 8);
                        a2 = (re::RenderGraphContext *)v113;
                        if (v45 <= v113) {
                          goto LABEL_97;
                        }
                        uint64_t v67 = *(void *)(v66 + 16) + 24 * v113;
                        a2 = *(re::RenderGraphContext **)(v67 + 8);
                        uint64_t v114 = *(void *)(v67 + 16);
                      }
                      else
                      {
                        a2 = 0;
                        uint64_t v114 = 0;
                      }
                      if (!*v111) {
                        break;
                      }
                      uint64_t v68 = *(unsigned int *)(*v100 + 4 * (v112 % *v99));
                      uint64_t v69 = *v110;
                      if (v68 == 0x7FFFFFFF) {
                        goto LABEL_59;
                      }
                      while (*(void *)(v69 + 32 * v68 + 16) != v34)
                      {
                        uint64_t v68 = *(_DWORD *)(v69 + 32 * v68 + 8) & 0x7FFFFFFF;
                        if (v68 == 0x7FFFFFFF) {
                          goto LABEL_59;
                        }
                      }
LABEL_60:
                      if (*(void *)(PassTechniqueMapping + 56))
                      {
                        uint64_t v70 = 0;
                        unint64_t v71 = 0;
                        uint64_t v72 = *v98;
                        uint64_t v123 = *(void *)(v69 + 32 * v68 + 24);
                        do
                        {
                          uint64_t v73 = *(void *)(v57 + 64);
                          unint64_t v74 = *(unsigned __int16 *)(v73 + v70 + 474);
                          if (*v55 > v74)
                          {
                            uint64_t v75 = *(void *)(*v115 + 8 * v74);
                            if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9BFF0, memory_order_acquire) & 1) == 0)
                            {
                              uint64_t PassTechniqueMapping = __cxa_guard_acquire(&qword_26AF9BFF0);
                              if (PassTechniqueMapping)
                              {
                                MurmurHash3_x64_128((uint64_t)"Occlusion", 9, 0, (unint64_t *)buf);
                                qword_26AF9BFE8 = (*(void *)&buf[8]
                                                 - 0x61C8864680B583E9
                                                 + (*(void *)buf << 6)
                                                 + (*(void *)buf >> 2)) ^ *(void *)buf;
                                __cxa_guard_release(&qword_26AF9BFF0);
                              }
                            }
                            if (v75)
                            {
                              uint64_t v76 = qword_26AF9BFE8;
                              if (re::MaterialParameterTable::kDefaultNameHash(void)::once != -1) {
                                dispatch_once(&re::MaterialParameterTable::kDefaultNameHash(void)::once, &__block_literal_global_29);
                              }
                              uint64_t PassTechniqueMapping = re::MaterialParameterTable::tryGetPassTechniqueMapping((re::MaterialParameterTable *)(v75 + 224), v76, re::MaterialParameterTable::kDefaultNameHash(void)::_kDefaultNameHash);
                              if (PassTechniqueMapping) {
                                goto LABEL_75;
                              }
                            }
                          }
                          if (v71 >= (unint64_t)a2)
                          {
                            uint64_t v77 = 0;
                            if (!v72)
                            {
LABEL_73:
                              uint64_t v83 = *re::graphicsLogObjects((re *)PassTechniqueMapping);
                              uint64_t PassTechniqueMapping = os_log_type_enabled(v83, OS_LOG_TYPE_DEFAULT);
                              if (PassTechniqueMapping)
                              {
                                uint64_t v84 = *(void *)(v73 + v70 + 512);
                                *(_DWORD *)buf = 136315138;
                                *(void *)&buf[4] = v84;
                                _os_log_impl(&dword_233120000, v83, OS_LOG_TYPE_DEFAULT, "Failed to find a planar shadow materialInstance for meshPart: %s.", buf, 0xCu);
                              }
                              goto LABEL_75;
                            }
                          }
                          else
                          {
                            uint64_t v77 = *(void *)(v114 + 8 * v71);
                            if (!v72) {
                              goto LABEL_73;
                            }
                          }
                          uint64_t v78 = (*(uint64_t (**)(re::Allocator *, uint64_t, uint64_t))(*(void *)v7 + 32))(v7, 224, 16);
                          *(_OWORD *)(v78 + 32) = 0u;
                          *(_OWORD *)(v78 + 4re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = 0u;
                          *(_OWORD *)uint64_t v78 = 0u;
                          *(_OWORD *)(v78 + 16) = 0u;
                          *(_OWORD *)(v78 + 64) = 0u;
                          *(_OWORD *)(v78 + 80) = 0u;
                          *(_OWORD *)(v78 + 96) = 0u;
                          *(_OWORD *)(v78 + 112) = 0u;
                          *(_OWORD *)(v78 + 12re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = 0u;
                          *(_OWORD *)(v78 + 144) = 0u;
                          *(_OWORD *)(v78 + 160) = 0u;
                          *(_OWORD *)(v78 + 176) = 0u;
                          *(_OWORD *)(v78 + 192) = 0u;
                          *(_OWORD *)(v78 + 20re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = 0u;
                          *(void *)(v78 + 152) = _D9;
                          *(_DWORD *)(v78 + 160) = 1065353216;
                          *(void *)(v78 + 40) = v72;
                          *(void *)(v78 + 4re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = v123;
                          *(_DWORD *)(v78 + 120) = *v120;
                          int v79 = (((*(_DWORD *)(v73 + v70 + 544) ^ *(_DWORD *)(v72 + 216)) & ~*(_DWORD *)(v72 + 220) | *(_DWORD *)(v72 + 220) & *(_DWORD *)(v72 + 216)) ^ *v119) & ~*v118 | *v119 & *v118;
                          *(void *)buf = v121->i64[0];
                          *(void *)&buf[8] = 0;
                          *(void *)&long long v138 = 0;
                          long long v137 = (unint64_t)(v73 + v70);
                          *((void *)&v138 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = v77;
                          *(void *)&long long v139 = v78;
                          *((void *)&v139 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0xFFFF010000000000;
                          long long v140 = v127;
                          long long v141 = v126;
                          long long v142 = v125;
                          long long v143 = v124;
                          uint64_t v145 = 0;
                          uint64_t v144 = 0;
                          *(void *)int v147 = 0;
                          *(_DWORD *)((char *)&v147[1] + 3) = 0;
                          *(void *)&v147[3] = 0;
                          *(void *)&v147[5] = 0;
                          __int16 v148 = 0;
                          int v146 = -1;
                          int v149 = v79;
                          uint64_t v150 = 0x7FFFFFFF00000000;
                          int v151 = 0;
                          uint64_t v152 = 0xFFFFFFFFLL;
                          uint64_t v153 = 0;
                          uint64_t v154 = 0;
                          unint64_t v80 = (int *)re::MaterialParameterTableLayers::resolveTechniqueIndices((re::MaterialParameterTableLayers *)v78, v116);
                          if (!v81)
                          {
                            re::internal::assertLog((re::internal *)6, 0, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
                            _os_crash();
                            __break(1u);
                            goto LABEL_91;
                          }
                          int v146 = *v80;
                          uint64_t v82 = *(void *)v122;
                          uint64_t v128 = 0;
                          int v129 = 0;
                          uint64_t PassTechniqueMapping = re::addDrawCall((uint64_t)v117, (uint64_t)buf, v82, 1u, (uint64_t)&v128);
LABEL_75:
                          ++v71;
                          v70 += 560;
                        }
                        while (v71 < *(void *)(v57 + 56));
                      }
                      unint64_t v53 = v113 + 1;
                      uint64_t v33 = v103;
                      uint64_t v30 = v104;
                      a2 = v101;
                      unint64_t v34 = v102;
                      uint64_t v29 = v107;
                      if (v113 + 1 >= v103->i64[1]) {
                        goto LABEL_34;
                      }
                    }
                    uint64_t v69 = *v110;
LABEL_59:
                    uint64_t v68 = 0x7FFFFFFFLL;
                    goto LABEL_60;
                  }
                }
              }
            }
LABEL_34:
            if ((unint64_t)++v30 >= *(void *)(v29 + 16)) {
              goto LABEL_81;
            }
          }
        }
      }
    }
LABEL_82:
    uint64_t v9 = v94 + 1;
    a2 = v122;
  }
  while (v94 + 1 != v93);
LABEL_91:
  if (*((unsigned char *)a2 + 1332)) {
    goto LABEL_98;
  }
  uint64_t v88 = 0;
LABEL_93:
  v135[0] = xmmword_23435FD50;
  v135[1] = xmmword_23435FD60;
  v135[2] = xmmword_23435FD80;
  v135[3] = xmmword_23435FBB0;
  re::DrawTableSlice::DrawTableSlice(buf, (uint64_t)v117);
  *(void *)uint64_t v131 = "arProjectiveShadowTechnique";
  *(void *)&v131[8] = buf;
  *(void *)&v131[16] = v135;
  *(void *)&v131[24] = v135;
  *(void *)&v131[32] = 0;
  *(_WORD *)&v131[40] = 513;
  v131[42] = 0;
  *(_WORD *)&v131[44] = 0;
  memset(&v132[15], 0, 33);
  uint64_t v133 = v88;
  char v134 = 1;
  re::RenderGraphContext::getDefaultEncodeDrawCallDataStoreArgs(a2, v130);
  re::RenderGraphContext::encodeDrawCalls(a2, v130, v131);
}

uint64_t re::DownsampleShadowMapNode::configure(void **this, const char *a2, const char *a3, re::RenderFrame *a4)
{
  v10[0] = 0;
  uint64_t v16 = 0;
  memset(v14, 0, sizeof(v14));
  int v15 = 0;
  char v17 = 0;
  char v18 = 0;
  uint64_t v19 = 0;
  char v20 = 0;
  ComputePipelineState = (void **)re::getOrCreateComputePipelineState(*((void *)a4 + 1), (uint64_t)v10);
  NS::SharedPtr<MTL::Texture>::operator=(this + 39, ComputePipelineState);
  re::RenderGraphNode::configure((re::RenderGraphNode *)this, a2, a3, a4);
  re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)v14);
  uint64_t result = v13[0];
  if (v13[0])
  {
    if (v13[1]) {
      uint64_t result = (*(uint64_t (**)(void))(*(void *)v13[0] + 40))();
    }
    memset(v13, 0, sizeof(v13));
  }
  if (v10[0])
  {
    uint64_t result = v11;
    if (v11)
    {
      if (v12) {
        return (*(uint64_t (**)(void))(*(void *)v11 + 40))();
      }
    }
  }
  return result;
}

uint64_t re::DownsampleShadowMapNode::setup(re::DownsampleShadowMapNode *this, re::RenderGraphBuilder *a2, re::RenderGraphDataStore *a3)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  re::RenderGraphNode::setup(this, a2, a3);
  *(_DWORD *)((char *)v6 + 3) = 0;
  LODWORD(v6[0]) = 0;
  v6[1] = 2;
  re::RenderGraphBuilder::read((uint64_t)a2, (uint64_t)this + 256, (uint64_t)v6);
  v6[0] = 0x500000000;
  long long v7 = xmmword_23435FBB0;
  __int16 v8 = 0;
  int v9 = 0;
  int v10 = 0;
  return re::RenderGraphBuilder::write((uint64_t)a2, (uint64_t)this + 272, (uint64_t)v6);
}

void re::DownsampleShadowMapNode::execute(re::DownsampleShadowMapNode *this, re::RenderGraphContext *a2)
{
  uint64_t v2 = a2;
  re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this + 256, 0, 0, &v10);
  re::RenderGraphContext::metalTexture((uint64_t)v2, (uint64_t)this + 272, 0, 0, &v9);
  uint64_t v4 = (id *)re::DrawingManager::currentCommandBuffer(*(re::DrawingManager **)(*((void *)v2 + 1) + 104));
  re::RenderGraphContext::acquireManagedComputeEncoder((uint64_t)v2, v4, *((re::RenderGraphNodeBase **)v2 + 5), 0, &v8);
  [v8 setComputePipelineState:*((void *)this + 39)];
  [v8 setTexture:v10 atIndex:0];
  [v8 setTexture:v9 atIndex:1];
  LODWORD(v2) = objc_msgSend(*((id *)this + 39), sel_threadExecutionWidth);
  uint64_t v5 = objc_msgSend(*((id *)this + 39), sel_maxTotalThreadsPerThreadgroup) / v2;
  uint64_t v6 = (objc_msgSend(v9, sel_width) + v2 - 1) / v2;
  unsigned int v7 = objc_msgSend(v9, sel_height);
  v12[0] = v6;
  v12[1] = (v5 + v7 - 1) / v5;
  v12[2] = 1;
  v11[0] = v2;
  v11[1] = v5;
  void v11[2] = 1;
  [v8 dispatchThreadgroups:v12 threadsPerThreadgroup:v11];

  if (v9) {
  if (v10)
  }
}

uint64_t re::BlurOnePassNode::configure(void **this, const char *a2, const char *a3, re::RenderFrame *a4)
{
  v10[0] = 0;
  re::DynamicString::DynamicString((re::DynamicString *)v13, (const re::DynamicString *)(this + 36));
  uint64_t v16 = 0;
  memset(v14, 0, sizeof(v14));
  int v15 = 0;
  char v17 = 0;
  char v18 = 0;
  uint64_t v19 = 0;
  char v20 = 0;
  ComputePipelineState = (void **)re::getOrCreateComputePipelineState(*((void *)a4 + 1), (uint64_t)v10);
  NS::SharedPtr<MTL::Texture>::operator=(this + 43, ComputePipelineState);
  re::RenderGraphNode::configure((re::RenderGraphNode *)this, a2, a3, a4);
  re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)v14);
  uint64_t result = v13[0];
  if (v13[0])
  {
    if (v13[1]) {
      uint64_t result = (*(uint64_t (**)(void))(*(void *)v13[0] + 40))();
    }
    memset(v13, 0, sizeof(v13));
  }
  if (v10[0])
  {
    uint64_t result = v11;
    if (v11)
    {
      if (v12) {
        return (*(uint64_t (**)(void))(*(void *)v11 + 40))();
      }
    }
  }
  return result;
}

uint64_t re::BlurOnePassNode::setup(re::BlurOnePassNode *this, re::RenderGraphBuilder *a2, re::RenderGraphDataStore *a3)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  re::RenderGraphNode::setup(this, a2, a3);
  *(_DWORD *)((char *)v6 + 3) = 0;
  LODWORD(v6[0]) = 0;
  v6[1] = 2;
  re::RenderGraphBuilder::read((uint64_t)a2, (uint64_t)this + 272, (uint64_t)v6);
  v6[0] = 0x500000000;
  long long v7 = xmmword_23435FBB0;
  __int16 v8 = 0;
  int v9 = 0;
  int v10 = 0;
  return re::RenderGraphBuilder::write((uint64_t)a2, (uint64_t)this + 256, (uint64_t)v6);
}

void re::BlurOnePassNode::execute(re::BlurOnePassNode *this, re::RenderGraphContext *a2)
{
  uint64_t v2 = a2;
  unint64_t v3 = this;
  re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this + 272, 0, 0, &v9);
  re::RenderGraphContext::metalTexture((uint64_t)v2, (uint64_t)v3 + 256, 0, 0, &v8);
  uint64_t v4 = (id *)re::DrawingManager::currentCommandBuffer(*(re::DrawingManager **)(*((void *)v2 + 1) + 104));
  re::RenderGraphContext::acquireManagedComputeEncoder((uint64_t)v2, v4, *((re::RenderGraphNodeBase **)v2 + 5), 0, &v7);
  [v7 setComputePipelineState:*((void *)v3 + 43)];
  [v7 setTexture:v9 atIndex:0];
  [v7 setTexture:v8 atIndex:1];
  id v5 = objc_msgSend(v8, sel_height);
  [v7 setThreadgroupMemoryLength:(8 * (void)v5 + 15) & 0xFFFFFFFFFFFFFFF0 atIndex:0];
  LODWORD(v2) = objc_msgSend(v8, sel_height);
  LODWORD(v3) = objc_msgSend(v8, sel_width);
  unsigned int v6 = objc_msgSend(v8, sel_arrayLength);
  v12[0] = v3;
  v12[1] = v6;
  v12[2] = 1;
  uint64_t v10 = v2;
  int64x2_t v11 = vdupq_n_s64(1uLL);
  [v7 dispatchThreadgroups:v12 threadsPerThreadgroup:&v10];

  if (v8) {
  if (v9)
  }
}

void re::GenerateProjectiveShadowMapNode::~GenerateProjectiveShadowMapNode(id *this)
{
  re::RenderGraphNode::~RenderGraphNode(this);
  JUMPOUT(0x237DBCBD0);
}

void re::DownsampleShadowMapNode::~DownsampleShadowMapNode(re::DownsampleShadowMapNode *this)
{
  uint64_t v2 = (void *)*((void *)this + 39);
  if (v2)
  {

    *((void *)this + 39) = 0;
  }
  re::AssetHandle::~AssetHandle((re::DownsampleShadowMapNode *)((char *)this + 288));
  re::RenderGraphNode::~RenderGraphNode((id *)this);
}

{
  void *v2;
  uint64_t vars8;

  uint64_t v2 = (void *)*((void *)this + 39);
  if (v2)
  {

    *((void *)this + 39) = 0;
  }
  re::AssetHandle::~AssetHandle((re::DownsampleShadowMapNode *)((char *)this + 288));
  re::RenderGraphNode::~RenderGraphNode((id *)this);
  JUMPOUT(0x237DBCBD0);
}

void re::BlurOnePassNode::~BlurOnePassNode(re::BlurOnePassNode *this)
{
  *(void *)this = &unk_26E71D6B0;
  uint64_t v2 = (void *)*((void *)this + 43);
  if (v2)
  {

    *((void *)this + 43) = 0;
  }
  re::AssetHandle::~AssetHandle((re::BlurOnePassNode *)((char *)this + 320));
  re::DynamicString::deinit((re::BlurOnePassNode *)((char *)this + 288));
  re::RenderGraphNode::~RenderGraphNode((id *)this);
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_26E71D6B0;
  uint64_t v2 = (void *)*((void *)this + 43);
  if (v2)
  {

    *((void *)this + 43) = 0;
  }
  re::AssetHandle::~AssetHandle((re::BlurOnePassNode *)((char *)this + 320));
  re::DynamicString::deinit((re::BlurOnePassNode *)((char *)this + 288));
  re::RenderGraphNode::~RenderGraphNode((id *)this);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::VFXRenderGraphProvider::VFXRenderGraphProvider(uint64_t a1, const re::DynamicString *a2)
{
  re::DynamicString::DynamicString((re::DynamicString *)&v4, a2);
  *(void *)a1 = &unk_26E6D52C8;
  re::DynamicString::DynamicString((re::DynamicString *)(a1 + 8), (const re::DynamicString *)&v4);
  if (v4 && (v5 & 1) != 0) {
    (*(void (**)(void))(*(void *)v4 + 40))();
  }
  *(void *)a1 = &unk_26E71D758;
  *(unsigned char *)(a1 + 40) = 0;
  return a1;
}

void re::VFXRenderGraphProvider::~VFXRenderGraphProvider(re::VFXRenderGraphProvider *this)
{
  *(void *)this = &unk_26E6D52C8;
  re::DynamicString::deinit((re::VFXRenderGraphProvider *)((char *)this + 8));
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E6D52C8;
  re::DynamicString::deinit((re::VFXRenderGraphProvider *)((char *)this + 8));
  JUMPOUT(0x237DBCBD0);
}

unint64_t re::VFXRenderGraphProvider::prepareFrame(re::VFXRenderGraphProvider *this, char *a2, const char *a3, re::RenderFrame *a4)
{
  v5[0] = 0x596323A061D6FAA1;
  v5[1] = (unint64_t)"VFXRenderGraphProvider";
  return re::RenderGraphProviderBase::generateScopeHash(v5, a2, a3);
}

void re::VFXRenderGraphProvider::provide(re::VFXRenderGraphProvider *this, const char *a2, const char *a3, re::RenderFrame *a4)
{
  RenderGraph = (re *)re::RenderFrame::makeRenderGraph(a4, "VFXSimulation", 1uLL);
  id v9 = re::RenderGraph::addNode<re::RenderGraphVFXNode>(RenderGraph, "VFXSimulationNode");
  *((unsigned char *)v9 + 256) = *((unsigned char *)this + 40);
  re::RenderGraphNode::configure(v9, a2, a3, a4);
}

void re::rendergraph_helper::getOcclusionMeshPasses(uint64_t a1@<X8>)
{
  uint64_t v2 = &dword_2687A1000;
  {
    uint64_t v6 = a1;
    uint64_t v2 = &dword_2687A1000;
    a1 = v6;
    if (v4)
    {
      re::rendergraph_helper::getOcclusionMeshPasses(void)::passNameHash = re::hashString((re *)"Occlusion", v5);
      uint64_t v2 = &dword_2687A1000;
      a1 = v6;
    }
  }
  uint64_t v3 = *((void *)v2 + 242);
  *(void *)a1 = "Occlusion";
  *(void *)(a1 + re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = v3;
  *(_WORD *)(a1 + 16) = -256;
  *(unsigned char *)(a1 + 1re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = 14;
  *(unsigned char *)(a1 + 23) = 0;
}

void re::rendergraph_helper::getOpaqueMeshPasses(uint64_t a1@<X8>)
{
  uint64_t v2 = &dword_2687A1000;
  {
    uint64_t v6 = a1;
    uint64_t v2 = &dword_2687A1000;
    a1 = v6;
    if (v4)
    {
      re::rendergraph_helper::getOpaqueMeshPasses(void)::passNameHash = re::hashString((re *)"Opaque", v5);
      uint64_t v2 = &dword_2687A1000;
      a1 = v6;
    }
  }
  uint64_t v3 = *((void *)v2 + 244);
  *(void *)a1 = "Opaque";
  *(void *)(a1 + re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = v3;
  *(_WORD *)(a1 + 16) = -256;
  *(unsigned char *)(a1 + 1re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = 14;
  *(unsigned char *)(a1 + 23) = 0;
}

void re::rendergraph_helper::getSkyboxMeshPasses(uint64_t a1@<X8>)
{
  uint64_t v2 = &dword_2687A1000;
  {
    uint64_t v6 = a1;
    uint64_t v2 = &dword_2687A1000;
    a1 = v6;
    if (v4)
    {
      re::rendergraph_helper::getSkyboxMeshPasses(void)::passNameHash = re::hashString((re *)"Skybox", v5);
      uint64_t v2 = &dword_2687A1000;
      a1 = v6;
    }
  }
  uint64_t v3 = *((void *)v2 + 246);
  *(void *)a1 = "Skybox";
  *(void *)(a1 + re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = v3;
  *(_WORD *)(a1 + 16) = -256;
  *(unsigned char *)(a1 + 1re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = 0;
  *(unsigned char *)(a1 + 23) = 0;
}

uint64_t re::rendergraph_helper::getTransparentMeshPasses@<X0>(void *a1@<X8>)
{
  uint64_t v70 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9C000, memory_order_acquire) & 1) == 0)
  {
    unsigned int v22 = a1;
    int v8 = __cxa_guard_acquire(&qword_26AF9C000);
    a1 = v22;
    if (v8)
    {
      _MergedGlobals_458 = re::hashString((re *)"Occlusion", v9);
      __cxa_guard_release(&qword_26AF9C000);
      a1 = v22;
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9C010, memory_order_acquire) & 1) == 0)
  {
    uint64_t v23 = a1;
    int v10 = __cxa_guard_acquire(&qword_26AF9C010);
    a1 = v23;
    if (v10)
    {
      qword_26AF9C008 = re::hashString((re *)"FadeDepthPrepass", v11);
      __cxa_guard_release(&qword_26AF9C010);
      a1 = v23;
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9C020, memory_order_acquire) & 1) == 0)
  {
    signed int v24 = a1;
    int v12 = __cxa_guard_acquire(&qword_26AF9C020);
    a1 = v24;
    if (v12)
    {
      qword_26AF9C018 = re::hashString((re *)"FadeOpaqueAfterPrepass", v13);
      __cxa_guard_release(&qword_26AF9C020);
      a1 = v24;
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9C030, memory_order_acquire) & 1) == 0)
  {
    uint64_t v25 = a1;
    int v14 = __cxa_guard_acquire(&qword_26AF9C030);
    a1 = v25;
    if (v14)
    {
      qword_26AF9C028 = re::hashString((re *)"FadeOpaqueNoPrepass", v15);
      __cxa_guard_release(&qword_26AF9C030);
      a1 = v25;
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9C040, memory_order_acquire) & 1) == 0)
  {
    uint64_t v26 = a1;
    int v16 = __cxa_guard_acquire(&qword_26AF9C040);
    a1 = v26;
    if (v16)
    {
      qword_26AF9C038 = re::hashString((re *)"FadeOpaque", v17);
      __cxa_guard_release(&qword_26AF9C040);
      a1 = v26;
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9C050, memory_order_acquire) & 1) == 0)
  {
    unint64_t v27 = a1;
    int v18 = __cxa_guard_acquire(&qword_26AF9C050);
    a1 = v27;
    if (v18)
    {
      qword_26AF9C048 = re::hashString((re *)"Opaque", v19);
      __cxa_guard_release(&qword_26AF9C050);
      a1 = v27;
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9C060, memory_order_acquire) & 1) == 0)
  {
    uint64_t v28 = a1;
    int v20 = __cxa_guard_acquire(&qword_26AF9C060);
    a1 = v28;
    if (v20)
    {
      qword_26AF9C058 = re::hashString((re *)"Transparent", v21);
      __cxa_guard_release(&qword_26AF9C060);
      a1 = v28;
    }
  }
  uint64_t v2 = 0;
  v29[0] = "Occlusion";
  v29[1] = _MergedGlobals_458;
  __int16 v30 = 1536;
  char v31 = 8;
  int v32 = 16843521;
  char v33 = 0;
  unint64_t v34 = "FadeDepthPrepass";
  uint64_t v35 = qword_26AF9C008;
  __int16 v36 = 1024;
  char v37 = 10;
  int v38 = 16843009;
  char v39 = 1;
  uint64_t v40 = "FadeOpaqueAfterPrepass";
  uint64_t v41 = qword_26AF9C018;
  __int16 v42 = -256;
  char v43 = 10;
  int v44 = 33686018;
  char v45 = 1;
  uint64_t v46 = "FadeOpaqueNoPrepass";
  uint64_t v47 = qword_26AF9C028;
  __int16 v48 = 768;
  char v49 = 8;
  uint64_t result = qword_26AF9C038;
  uint64_t v52 = "FadeOpaque";
  uint64_t v53 = qword_26AF9C038;
  uint64_t v58 = "Opaque";
  uint64_t v59 = qword_26AF9C048;
  int v50 = 50529027;
  char v51 = 0;
  __int16 v54 = -256;
  char v55 = 8;
  int v56 = 33686274;
  char v57 = 1;
  __int16 v60 = 1536;
  char v61 = 8;
  int v62 = 33686274;
  char v63 = 1;
  long long v64 = "Transparent";
  uint64_t v65 = qword_26AF9C058;
  __int16 v66 = -256;
  char v67 = 8;
  int v68 = 50529027;
  char v69 = 0;
  do
  {
    int v4 = &a1[v2];
    void *v4 = 0;
    v4[1] = 0;
    *((_WORD *)v4 + re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = -256;
    *((unsigned char *)v4 + 1re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = 0;
    v2 += 3;
    *((unsigned char *)v4 + 23) = 0;
  }
  while (v2 != 21);
  for (uint64_t i = 0; i != 21; i += 3)
  {
    uint64_t v6 = &a1[i];
    id v7 = &v29[i];
    *(_OWORD *)uint64_t v6 = *(_OWORD *)&v29[i];
    *(_DWORD *)((char *)v6 + 15) = *(_DWORD *)((char *)&v29[i + 1] + 7);
    if (v29 != a1) {
      *(_DWORD *)((char *)v6 + 19) = *(_DWORD *)((char *)v7 + 19);
    }
    *((unsigned char *)v6 + 23) = *((unsigned char *)v7 + 23);
  }
  return result;
}

void re::rendergraph_helper::getRenderOnTopMeshPasses(void *a1@<X8>)
{
  uint64_t v78 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9C070, memory_order_acquire) & 1) == 0)
  {
    uint64_t v23 = a1;
    int v7 = __cxa_guard_acquire(&qword_26AF9C070);
    a1 = v23;
    if (v7)
    {
      qword_26AF9C068 = re::hashString((re *)"DepthPush", v8);
      __cxa_guard_release(&qword_26AF9C070);
      a1 = v23;
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9C080, memory_order_acquire) & 1) == 0)
  {
    signed int v24 = a1;
    int v9 = __cxa_guard_acquire(&qword_26AF9C080);
    a1 = v24;
    if (v9)
    {
      qword_26AF9C078 = re::hashString((re *)"Occlusion", v10);
      __cxa_guard_release(&qword_26AF9C080);
      a1 = v24;
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9C090, memory_order_acquire) & 1) == 0)
  {
    uint64_t v25 = a1;
    int v11 = __cxa_guard_acquire(&qword_26AF9C090);
    a1 = v25;
    if (v11)
    {
      qword_26AF9C088 = re::hashString((re *)"FadeDepthPrepass", v12);
      __cxa_guard_release(&qword_26AF9C090);
      a1 = v25;
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9C0A0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v26 = a1;
    int v13 = __cxa_guard_acquire(&qword_26AF9C0A0);
    a1 = v26;
    if (v13)
    {
      qword_26AF9C098 = re::hashString((re *)"FadeOpaqueAfterPrepass", v14);
      __cxa_guard_release(&qword_26AF9C0A0);
      a1 = v26;
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9C0B0, memory_order_acquire) & 1) == 0)
  {
    unint64_t v27 = a1;
    int v15 = __cxa_guard_acquire(&qword_26AF9C0B0);
    a1 = v27;
    if (v15)
    {
      qword_26AF9C0A8 = re::hashString((re *)"FadeOpaqueNoPrepass", v16);
      __cxa_guard_release(&qword_26AF9C0B0);
      a1 = v27;
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9C0C0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v28 = a1;
    int v17 = __cxa_guard_acquire(&qword_26AF9C0C0);
    a1 = v28;
    if (v17)
    {
      qword_26AF9C0B8 = re::hashString((re *)"FadeOpaque", v18);
      __cxa_guard_release(&qword_26AF9C0C0);
      a1 = v28;
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9C0D0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v29 = a1;
    int v19 = __cxa_guard_acquire(&qword_26AF9C0D0);
    a1 = v29;
    if (v19)
    {
      qword_26AF9C0C8 = re::hashString((re *)"Opaque", v20);
      __cxa_guard_release(&qword_26AF9C0D0);
      a1 = v29;
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9C0E0, memory_order_acquire) & 1) == 0)
  {
    __int16 v30 = a1;
    int v21 = __cxa_guard_acquire(&qword_26AF9C0E0);
    a1 = v30;
    if (v21)
    {
      qword_26AF9C0D8 = re::hashString((re *)"Transparent", v22);
      __cxa_guard_release(&qword_26AF9C0E0);
      a1 = v30;
    }
  }
  uint64_t v2 = 0;
  v31[0] = "DepthPush";
  v31[1] = qword_26AF9C068;
  __int16 v32 = -248;
  char v33 = 0;
  int v34 = 0;
  char v35 = 0;
  __int16 v36 = "Occlusion";
  uint64_t v37 = qword_26AF9C078;
  __int16 v38 = -248;
  char v39 = 0;
  int v40 = 16843521;
  char v41 = 1;
  __int16 v42 = "FadeDepthPrepass";
  uint64_t v43 = qword_26AF9C088;
  __int16 v44 = 1032;
  char v45 = 2;
  int v46 = 16843009;
  char v47 = 1;
  __int16 v48 = "FadeOpaqueAfterPrepass";
  uint64_t v49 = qword_26AF9C098;
  __int16 v50 = -248;
  char v51 = 2;
  int v52 = 33686018;
  char v53 = 1;
  __int16 v54 = "FadeOpaqueNoPrepass";
  uint64_t v55 = qword_26AF9C0A8;
  __int16 v56 = 776;
  char v57 = 0;
  __int16 v60 = "FadeOpaque";
  uint64_t v61 = qword_26AF9C0B8;
  __int16 v66 = "Opaque";
  uint64_t v67 = qword_26AF9C0C8;
  __int16 v68 = 1544;
  int v58 = 50529027;
  char v59 = 0;
  __int16 v62 = -248;
  char v63 = 0;
  int v64 = 33686274;
  char v65 = 1;
  char v69 = 0;
  int v70 = 33686274;
  char v71 = 1;
  uint64_t v72 = "Transparent";
  uint64_t v73 = qword_26AF9C0D8;
  __int16 v74 = -248;
  char v75 = 0;
  int v76 = 50529027;
  char v77 = 0;
  do
  {
    uint64_t v3 = &a1[v2];
    void *v3 = 0;
    v3[1] = 0;
    *((_WORD *)v3 + re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = -256;
    *((unsigned char *)v3 + 1re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = 0;
    v2 += 3;
    *((unsigned char *)v3 + 23) = 0;
  }
  while (v2 != 24);
  for (uint64_t i = 0; i != 24; i += 3)
  {
    char v5 = &a1[i];
    uint64_t v6 = &v31[i];
    *(_OWORD *)char v5 = *(_OWORD *)&v31[i];
    *(_DWORD *)((char *)v5 + 15) = *(_DWORD *)((char *)&v31[i + 1] + 7);
    if (v31 != a1) {
      *(_DWORD *)((char *)v5 + 19) = *(_DWORD *)((char *)v6 + 19);
    }
    *((unsigned char *)v5 + 23) = *((unsigned char *)v6 + 23);
  }
}

void re::RenderGraphProbeArrayClampNode::setup(re::RenderGraphNode *this, re::RenderGraphBuilder *a2, re::RenderGraphDataStore *a3)
{
  *((_WORD *)a2 + 296) = 257;
  re::RenderGraphNode::setup(this, a2, a3);
}

uint64_t re::RenderGraphProbeArrayClampNode::configure(void **this, const char *a2, const char *a3, re::RenderFrame *a4)
{
  v10[0] = 0;
  long long v14 = 0uLL;
  *((void *)&v13 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
  re::DynamicString::setCapacity(&v13, 0);
  uint64_t v17 = 0;
  memset(v15, 0, sizeof(v15));
  int v16 = 0;
  char v18 = 0;
  char v19 = 0;
  uint64_t v20 = 0;
  char v21 = 0;
  v22[0] = "generateClampedMap";
  v22[1] = 18;
  re::DynamicString::operator=((re::DynamicString *)&v13, (uint64_t)v22);
  ComputePipelineState = (void **)re::getOrCreateComputePipelineState(*((void *)a4 + 1), (uint64_t)v10);
  NS::SharedPtr<MTL::Texture>::operator=(this + 32, ComputePipelineState);
  re::RenderGraphNode::configure((re::RenderGraphNode *)this, a2, a3, a4);
  re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)v15);
  uint64_t result = v13;
  if ((void)v13)
  {
    if (BYTE8(v13)) {
      uint64_t result = (*(uint64_t (**)(void))(*(void *)v13 + 40))();
    }
    long long v13 = 0u;
    long long v14 = 0u;
  }
  if (v10[0])
  {
    uint64_t result = v11;
    if (v11)
    {
      if (v12) {
        return (*(uint64_t (**)(void))(*(void *)v11 + 40))();
      }
    }
  }
  return result;
}

void re::RenderGraphProbeArrayClampNode::execute(const char **this, re::RenderGraphContext *a2)
{
  uint64_t v4 = re::RenderGraphDataStore::tryGet<re::ProbeWriteContext>(*((void *)a2 + 146), this[4]);
  if (v4)
  {
    uint64_t v5 = v4;
    if (*(unsigned char *)(v4 + 8))
    {
      re::RenderGraphContext::makeComputeCommandEncoder(a2, 0, &v13);
      [v13 setComputePipelineState:this[32]];
      [v13 setTexture:*(void *)(v5 + 280) atIndex:0];
      [v13 setTexture:*(void *)(v5 + 304) atIndex:1];
      uint64_t v6 = *(void *)(v5 + 32);
      uint64_t v7 = *(void *)(v5 + 20);
      int v9 = v7;
      int v10 = *(_DWORD *)(v5 + 16);
      uint64_t v11 = v7;
      uint64_t v12 = v6;
      [v13 setBytes:&v10 length:24 atIndex:0];
      int v8 = v9 + 126;
      if (v9 >= -63) {
        int v8 = v9 + 63;
      }
      uint64_t v16 = (v8 >> 6);
      int64x2_t v17 = vdupq_n_s64(1uLL);
      long long v14 = xmmword_234411900;
      uint64_t v15 = 1;
      [v13 dispatchThreadgroups:&v16 threadsPerThreadgroup:&v14];
      re::RenderGraphContext::finishEncoding<re::mtl::ComputeCommandEncoder &>((uint64_t)a2, &v13);
    }
  }
}

void re::RenderGraphProbeArrayMipGenerationNode::setup(re::RenderGraphNode *this, re::RenderGraphBuilder *a2, re::RenderGraphDataStore *a3)
{
  *((_WORD *)a2 + 296) = 257;
  re::RenderGraphNode::setup(this, a2, a3);
}

void re::RenderGraphProbeArrayMipGenerationNode::execute(const char **this, re::RenderGraphContext *a2)
{
  uint64_t v3 = re::RenderGraphDataStore::tryGet<re::ProbeWriteContext>(*((void *)a2 + 146), this[4]);
  if (v3)
  {
    uint64_t v4 = v3;
    if (*(unsigned char *)(v3 + 40))
    {
      re::RenderGraphContext::makeBlitCommandEncoder(a2, 0, &v5);
      [v5 generateMipmapsForTexture:*(void *)(v4 + 280)];
      re::RenderGraphContext::finishEncoding<re::mtl::BlitCommandEncoder &>((uint64_t)a2, &v5);
    }
  }
}

void re::RenderGraphProbeArraySpecularFilterNode::setup(re::RenderGraphNode *this, re::RenderGraphBuilder *a2, re::RenderGraphDataStore *a3)
{
  *((_WORD *)a2 + 296) = 257;
  re::RenderGraphNode::setup(this, a2, a3);
}

uint64_t re::RenderGraphProbeArraySpecularFilterNode::configure(void **this, const char *a2, const char *a3, re::RenderFrame *a4)
{
  v10[0] = 0;
  long long v14 = 0uLL;
  *((void *)&v13 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
  re::DynamicString::setCapacity(&v13, 0);
  uint64_t v17 = 0;
  memset(v15, 0, sizeof(v15));
  int v16 = 0;
  char v18 = 0;
  char v19 = 0;
  uint64_t v20 = 0;
  char v21 = 0;
  v22[0] = "generatePrefilteredSpecularMapFast";
  v22[1] = 34;
  re::DynamicString::operator=((re::DynamicString *)&v13, (uint64_t)v22);
  ComputePipelineState = (void **)re::getOrCreateComputePipelineState(*((void *)a4 + 1), (uint64_t)v10);
  NS::SharedPtr<MTL::Texture>::operator=(this + 32, ComputePipelineState);
  re::RenderGraphNode::configure((re::RenderGraphNode *)this, a2, a3, a4);
  re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)v15);
  uint64_t result = v13;
  if ((void)v13)
  {
    if (BYTE8(v13)) {
      uint64_t result = (*(uint64_t (**)(void))(*(void *)v13 + 40))();
    }
    long long v13 = 0u;
    long long v14 = 0u;
  }
  if (v10[0])
  {
    uint64_t result = v11;
    if (v11)
    {
      if (v12) {
        return (*(uint64_t (**)(void))(*(void *)v11 + 40))();
      }
    }
  }
  return result;
}

void re::RenderGraphProbeArraySpecularFilterNode::execute(const char **this, re::RenderGraphContext *a2)
{
  uint64_t v4 = re::RenderGraphDataStore::tryGet<re::ProbeWriteContext>(*((void *)a2 + 146), this[4]);
  if (v4)
  {
    uint64_t v5 = v4;
    if (*(void *)(v4 + 128))
    {
      re::RenderGraphContext::makeComputeCommandEncoder(a2, 0, &v26);
      [v26 setComputePipelineState:this[32]];
      uint64_t v6 = *(void *)(v5 + 128);
      if (v6)
      {
        uint64_t v7 = *(int **)(v5 + 144);
        int v8 = &v7[17 * v6];
        int8x16_t v16 = (int8x16_t)vdupq_n_s64(0x1FFFFFFFuLL);
        int64x2_t v17 = vdupq_n_s64(7uLL);
        int64x2_t v15 = vdupq_n_s64(8uLL);
        do
        {
          [v26 setTexture:*(void *)(v5 + 304) atIndex:0];
          [v26 setTexture:*(void *)(v5 + 280) atIndex:1];
          id v9 = objc_msgSend(*(id *)(v5 + 288), sel_newTextureViewWithPixelFormat_textureType_levels_slices_, 115, 3, v7[14], 1, 0, 6);
          [v26 setTexture:v9 atIndex:2];
          uint64_t v10 = 0;
          int32x2_t v18 = vmovn_s64(*(int64x2_t *)(v7 + 2));
          int v11 = *v7;
          int v12 = v7[15];
          unsigned int v20 = v7[14];
          int v21 = v12;
          int v25 = re::RenderGraphProbeArraySpecularFilterNode::kTotalSampleCounts[v20];
          int v19 = v11;
          float v22 = (float)v20 / (float)(v12 - 1);
          int v24 = 16;
          long long v13 = (char *)&re::RenderGraphProbeArraySpecularFilterNode::kGGXSampleDirections + 256 * v20;
          do
          {
            *(_OWORD *)&v23[v10] = *(_OWORD *)&v13[v10];
            v10 += 16;
          }
          while (v10 != 256);
          [v26 setBytes:&v18 length:304 atIndex:0];
          uint64_t v14 = v7[1];
          int8x16_t v29 = vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)vaddq_s64(*((int64x2_t *)v7 + 2), v17), 3uLL), v16);
          uint64_t v30 = v14;
          int64x2_t v27 = v15;
          uint64_t v28 = 1;
          [v26 dispatchThreadgroups:&v29 threadsPerThreadgroup:&v27];
          if (v9) {

          }
          v7 += 17;
        }
        while (v7 != v8);
      }
      re::RenderGraphContext::finishEncoding<re::mtl::ComputeCommandEncoder &>((uint64_t)a2, &v26);
    }
  }
}

void re::RenderGraphProbeArrayDiffuseFilterNode::setup(re::RenderGraphNode *this, re::RenderGraphBuilder *a2, re::RenderGraphDataStore *a3)
{
  *((_WORD *)a2 + 296) = 257;
  re::RenderGraphNode::setup(this, a2, a3);
}

uint64_t re::RenderGraphProbeArrayDiffuseFilterNode::configure(void **this, const char *a2, const char *a3, re::RenderFrame *a4)
{
  v10[0] = 0;
  long long v14 = 0uLL;
  *((void *)&v13 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
  re::DynamicString::setCapacity(&v13, 0);
  uint64_t v17 = 0;
  memset(v15, 0, sizeof(v15));
  int v16 = 0;
  char v18 = 0;
  char v19 = 0;
  uint64_t v20 = 0;
  char v21 = 0;
  v22[0] = "generatePrefilteredDiffuseMapFast";
  v22[1] = 33;
  re::DynamicString::operator=((re::DynamicString *)&v13, (uint64_t)v22);
  ComputePipelineState = (void **)re::getOrCreateComputePipelineState(*((void *)a4 + 1), (uint64_t)v10);
  NS::SharedPtr<MTL::Texture>::operator=(this + 32, ComputePipelineState);
  re::RenderGraphNode::configure((re::RenderGraphNode *)this, a2, a3, a4);
  re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)v15);
  uint64_t result = v13;
  if ((void)v13)
  {
    if (BYTE8(v13)) {
      uint64_t result = (*(uint64_t (**)(void))(*(void *)v13 + 40))();
    }
    long long v13 = 0u;
    long long v14 = 0u;
  }
  if (v10[0])
  {
    uint64_t result = v11;
    if (v11)
    {
      if (v12) {
        return (*(uint64_t (**)(void))(*(void *)v11 + 40))();
      }
    }
  }
  return result;
}

void re::RenderGraphProbeArrayDiffuseFilterNode::execute(const char **this, re::RenderGraphContext *a2)
{
  uint64_t v4 = re::RenderGraphDataStore::tryGet<re::ProbeWriteContext>(*((void *)a2 + 146), this[4]);
  if (v4)
  {
    uint64_t v5 = v4;
    if (*(unsigned char *)(v4 + 48))
    {
      re::RenderGraphContext::makeComputeCommandEncoder(a2, 0, &v13);
      [v13 setComputePipelineState:this[32]];
      id v6 = objc_msgSend(*(id *)(v5 + 296), sel_newTextureViewWithPixelFormat_textureType_levels_slices_, 115, 3, 0, 1, 0, 6);
      [v13 setTexture:v6 atIndex:1];
      [v13 setTexture:*(void *)(v5 + 304) atIndex:0];
      uint64_t v7 = 0;
      int32x2_t v9 = vmovn_s64(*(int64x2_t *)(v5 + 60));
      LODWORD(v10) = *(_DWORD *)(v5 + 52);
      int v12 = 32;
      do
      {
        *(_OWORD *)&v11[v7 * 16] = re::RenderGraphProbeArrayDiffuseFilterNode::kCosSampleDirections[v7];
        ++v7;
      }
      while (v7 != 32);
      [v13 setBytes:&v9 length:544 atIndex:0];
      uint64_t v8 = *(unsigned int *)(v5 + 56);
      int8x16_t v16 = vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)vaddq_s64(*(int64x2_t *)(v5 + 84), vdupq_n_s64(7uLL)), 3uLL), (int8x16_t)vdupq_n_s64(0x1FFFFFFFuLL));
      uint64_t v17 = v8;
      int64x2_t v14 = vdupq_n_s64(8uLL);
      uint64_t v15 = 1;
      objc_msgSend(v13, "dispatchThreadgroups:threadsPerThreadgroup:", &v16, &v14, *(void *)&v9, v10);
      re::RenderGraphContext::finishEncoding<re::mtl::ComputeCommandEncoder &>((uint64_t)a2, &v13);
      if (v6) {
    }
      }
  }
}

void re::RenderGraphProbeArrayCopyNode::setup(re::RenderGraphNode *this, re::RenderGraphBuilder *a2, re::RenderGraphDataStore *a3)
{
  *((_WORD *)a2 + 296) = 257;
  re::RenderGraphNode::setup(this, a2, a3);
}

void re::RenderGraphProbeArrayCopyNode::execute(const char **this, re::RenderGraphContext *a2)
{
  uint64_t v3 = re::RenderGraphDataStore::tryGet<re::ProbeWriteContext>(*((void *)a2 + 146), this[4]);
  if (v3)
  {
    uint64_t v4 = v3;
    if (*(void *)(v3 + 168))
    {
      re::RenderGraphContext::makeBlitCommandEncoder(a2, 0, &v15);
      uint64_t v5 = *(void *)(v4 + 168);
      if (v5)
      {
        id v6 = *(_DWORD **)(v4 + 184);
        uint64_t v7 = 12 * v5;
        while (1)
        {
          id v13 = 0;
          id v14 = 0;
          int v8 = v6[2];
          if (v8 == 1) {
            break;
          }
          id v9 = 0;
          id v10 = 0;
          if (!v8)
          {
            id v12 = objc_msgSend(*(id *)(v4 + 264), sel_newTextureViewWithPixelFormat_textureType_levels_slices_, 115, 5, 0, objc_msgSend(*(id *)(v4 + 264), sel_mipmapLevelCount, 0, 0), (6 * *v6), 6);
            NS::SharedPtr<MTL::Texture>::operator=(&v14, &v12);
            if (v12) {

            }
            uint64_t v11 = (void **)(v4 + 288);
LABEL_13:
            NS::SharedPtr<MTL::Texture>::operator=(&v13, v11);
            id v10 = v13;
            id v9 = v14;
          }
          [v15 copyFromTexture:v10 toTexture:v9];
          if (v13) {

          }
          if (v14) {
          v6 += 3;
          }
          v7 -= 12;
          if (!v7) {
            goto LABEL_19;
          }
        }
        id v12 = objc_msgSend(*(id *)(v4 + 272), sel_newTextureViewWithPixelFormat_textureType_levels_slices_, 115, 5, 0, objc_msgSend(*(id *)(v4 + 272), sel_mipmapLevelCount), (6 * *v6), 6);
        NS::SharedPtr<MTL::Texture>::operator=(&v14, &v12);
        if (v12) {

        }
        uint64_t v11 = (void **)(v4 + 296);
        goto LABEL_13;
      }
LABEL_19:
      re::RenderGraphContext::finishEncoding<re::mtl::BlitCommandEncoder &>((uint64_t)a2, &v15);
    }
  }
}

void re::RenderGraphProbeArrayLatLongNode::setup(re::RenderGraphNode *this, re::RenderGraphBuilder *a2, re::RenderGraphDataStore *a3)
{
  *((_WORD *)a2 + 296) = 257;
  re::RenderGraphNode::setup(this, a2, a3);
}

uint64_t re::RenderGraphProbeArrayLatLongNode::configure(void **this, const char *a2, const char *a3, re::RenderFrame *a4)
{
  v10[0] = 0;
  long long v14 = 0uLL;
  *((void *)&v13 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
  re::DynamicString::setCapacity(&v13, 0);
  uint64_t v17 = 0;
  memset(v15, 0, sizeof(v15));
  int v16 = 0;
  char v18 = 0;
  char v19 = 0;
  uint64_t v20 = 0;
  char v21 = 0;
  v22[0] = "generateLatLongMap";
  v22[1] = 18;
  re::DynamicString::operator=((re::DynamicString *)&v13, (uint64_t)v22);
  ComputePipelineState = (void **)re::getOrCreateComputePipelineState(*((void *)a4 + 1), (uint64_t)v10);
  NS::SharedPtr<MTL::Texture>::operator=(this + 32, ComputePipelineState);
  re::RenderGraphNode::configure((re::RenderGraphNode *)this, a2, a3, a4);
  re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)v15);
  uint64_t result = v13;
  if ((void)v13)
  {
    if (BYTE8(v13)) {
      uint64_t result = (*(uint64_t (**)(void))(*(void *)v13 + 40))();
    }
    long long v13 = 0u;
    long long v14 = 0u;
  }
  if (v10[0])
  {
    uint64_t result = v11;
    if (v11)
    {
      if (v12) {
        return (*(uint64_t (**)(void))(*(void *)v11 + 40))();
      }
    }
  }
  return result;
}

void re::RenderGraphProbeArrayLatLongNode::execute(const char **this, re::RenderGraphContext *a2)
{
  uint64_t v4 = re::RenderGraphDataStore::tryGet<re::ProbeWriteContext>(*((void *)a2 + 146), this[4]);
  if (v4)
  {
    uint64_t v5 = v4;
    if (*(unsigned char *)(v4 + 192))
    {
      re::RenderGraphContext::makeComputeCommandEncoder(a2, 0, &v17);
      [v17 setComputePipelineState:this[32]];
      [v17 setTexture:*(void *)(v5 + 264) atIndex:0];
      [v17 setTexture:*(void *)(v5 + 304) atIndex:1];
      long long v10 = *(_OWORD *)(v5 + 200);
      re::FixedArray<unsigned long>::FixedArray(&v11, v5 + 216);
      re::FixedArray<unsigned int>::FixedArray(&v14, v5 + 240);
      int v7 = v10;
      uint64_t v8 = *((void *)&v10 + 1);
      unsigned int v9 = v12;
      [v17 setBytes:&v7 length:16 atIndex:0];
      [v17 setBytes:v13 length:8 * v9 atIndex:1];
      [v17 setBytes:v16 length:4 * v9 atIndex:2];
      int v6 = HIDWORD(v10) + 126;
      if (SHIDWORD(v10) >= -63) {
        int v6 = HIDWORD(v10) + 63;
      }
      uint64_t v19 = 1;
      uint64_t v20 = (v6 >> 6);
      int64x2_t v21 = vdupq_n_s64(1uLL);
      long long v18 = xmmword_234411900;
      [v17 dispatchThreadgroups:&v20 threadsPerThreadgroup:&v18];
      re::RenderGraphContext::finishEncoding<re::mtl::ComputeCommandEncoder &>((uint64_t)a2, &v17);
      if (v14)
      {
        if (v15)
        {
          (*(void (**)(void))(*(void *)v14 + 40))();
          uint64_t v15 = 0;
          uint64_t v16 = 0;
        }
        uint64_t v14 = 0;
      }
      if (v11)
      {
        if (v12) {
          (*(void (**)(void))(*(void *)v11 + 40))();
        }
      }
    }
  }
}

void re::RenderGraphProbeArrayClampNode::~RenderGraphProbeArrayClampNode(re::RenderGraphProbeArrayClampNode *this)
{
  uint64_t v2 = (void *)*((void *)this + 32);
  if (v2)
  {

    *((void *)this + 32) = 0;
  }
  re::RenderGraphNode::~RenderGraphNode((id *)this);
}

{
  void *v2;
  uint64_t vars8;

  uint64_t v2 = (void *)*((void *)this + 32);
  if (v2)
  {

    *((void *)this + 32) = 0;
  }
  re::RenderGraphNode::~RenderGraphNode((id *)this);
  JUMPOUT(0x237DBCBD0);
}

void re::RenderGraphProbeArrayMipGenerationNode::~RenderGraphProbeArrayMipGenerationNode(id *this)
{
  re::RenderGraphNode::~RenderGraphNode(this);
  JUMPOUT(0x237DBCBD0);
}

void re::RenderGraphProbeArraySpecularFilterNode::~RenderGraphProbeArraySpecularFilterNode(re::RenderGraphProbeArraySpecularFilterNode *this)
{
  uint64_t v2 = (void *)*((void *)this + 32);
  if (v2)
  {

    *((void *)this + 32) = 0;
  }
  re::RenderGraphNode::~RenderGraphNode((id *)this);
}

{
  void *v2;
  uint64_t vars8;

  uint64_t v2 = (void *)*((void *)this + 32);
  if (v2)
  {

    *((void *)this + 32) = 0;
  }
  re::RenderGraphNode::~RenderGraphNode((id *)this);
  JUMPOUT(0x237DBCBD0);
}

void re::RenderGraphProbeArrayDiffuseFilterNode::~RenderGraphProbeArrayDiffuseFilterNode(re::RenderGraphProbeArrayDiffuseFilterNode *this)
{
  uint64_t v2 = (void *)*((void *)this + 32);
  if (v2)
  {

    *((void *)this + 32) = 0;
  }
  re::RenderGraphNode::~RenderGraphNode((id *)this);
}

{
  void *v2;
  uint64_t vars8;

  uint64_t v2 = (void *)*((void *)this + 32);
  if (v2)
  {

    *((void *)this + 32) = 0;
  }
  re::RenderGraphNode::~RenderGraphNode((id *)this);
  JUMPOUT(0x237DBCBD0);
}

void re::RenderGraphProbeArrayCopyNode::~RenderGraphProbeArrayCopyNode(id *this)
{
  re::RenderGraphNode::~RenderGraphNode(this);
  JUMPOUT(0x237DBCBD0);
}

void re::RenderGraphProbeArrayLatLongNode::~RenderGraphProbeArrayLatLongNode(re::RenderGraphProbeArrayLatLongNode *this)
{
  uint64_t v2 = (void *)*((void *)this + 32);
  if (v2)
  {

    *((void *)this + 32) = 0;
  }
  re::RenderGraphNode::~RenderGraphNode((id *)this);
}

{
  void *v2;
  uint64_t vars8;

  uint64_t v2 = (void *)*((void *)this + 32);
  if (v2)
  {

    *((void *)this + 32) = 0;
  }
  re::RenderGraphNode::~RenderGraphNode((id *)this);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::RenderGraphDataStore::tryGet<re::ProbeWriteContext>(uint64_t a1, const char *a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  MurmurHash3_x64_128((uint64_t)"ProbeWriteContext", 17, 0, &v13);
  unint64_t v4 = (v14 + (v13 << 6) + (v13 >> 2) - 0x61C8864680B583E9) ^ v13;
  size_t v5 = strlen(a2);
  if (v5)
  {
    MurmurHash3_x64_128((uint64_t)a2, v5, 0, &v13);
    unint64_t v6 = ((v14 - 0x61C8864680B583E9 + (v13 << 6) + (v13 >> 2)) ^ v13) - 0x61C8864680B583E9;
  }
  else
  {
    unint64_t v6 = 0x9E3779B97F4A7C17;
  }
  unint64_t v7 = ((v4 >> 2) + (v4 << 6) + v6) ^ v4;
  unint64_t v8 = (unint64_t)"N2re17ProbeWriteContextE";
  if (((unint64_t)"N2re17ProbeWriteContextE" & 0x8000000000000000) != 0)
  {
    unsigned int v9 = (unsigned __int8 *)((unint64_t)"N2re17ProbeWriteContextE" & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v10 = 5381;
    do
    {
      unint64_t v8 = v10;
      unsigned int v11 = *v9++;
      uint64_t v10 = (33 * v10) ^ v11;
    }
    while (v11);
  }
  unint64_t v13 = (v7 - 0x61C8864680B583E9 + (v8 << 6) + (v8 >> 2)) ^ v8;
  uint64_t result = re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(a1 + 16, (uint64_t *)&v13);
  if (result) {
    return *(void *)result;
  }
  return result;
}

void re::RenderGraphARUploadPostParams::setup(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 592) = 1;
}

void re::RenderGraphARUploadPostParams::execute(re::RenderGraphARUploadPostParams *this, re::RenderGraphContext *a2)
{
  if (*((unsigned char *)this + 256) && !*((unsigned char *)this + 257))
  {
    uint64_t v4 = re::RenderGraphDataStore::add<re::TonemapParametersData>(*((void *)a2 + 146), *(void *)(*((void *)a2 + 5) + 48));
    re::TonemapUserParameters::computeRenderParameters((re::RenderGraphARUploadPostParams *)((char *)this + 260), (uint64_t)&v21);
    long long v5 = v25;
    *(_OWORD *)(v4 + 8re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = v26;
    long long v6 = v28;
    *(_OWORD *)(v4 + 104) = v27;
    *(_OWORD *)(v4 + 120) = v6;
    long long v7 = v21;
    *(_OWORD *)(v4 + 24) = v22;
    long long v8 = v24;
    *(_OWORD *)(v4 + 40) = v23;
    *(_OWORD *)(v4 + 56) = v8;
    *(_OWORD *)(v4 + 72) = v5;
    *(_DWORD *)(v4 + 136) = v29;
    *(_OWORD *)(v4 + re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = v7;
  }
  if (*((unsigned char *)this + 258))
  {
    unsigned int v9 = (unsigned __int8 *)*((void *)a2 + 2);
    long long v10 = xmmword_23435FD80;
    long long v11 = xmmword_23435FD60;
    long long v12 = xmmword_23435FD50;
    if (v9[64] && *v9 != v9[1] && v9[65])
    {
      long long v12 = *((_OWORD *)v9 + 1);
      long long v11 = *((_OWORD *)v9 + 2);
      long long v10 = *((_OWORD *)v9 + 3);
    }
    long long v17 = v12;
    long long v18 = v11;
    long long v19 = v10;
    re::FrameContext::perFrameAlloc(*(re::FrameContext **)a2, 0x30uLL, 0x10uLL, (uint64_t)&v21);
    unint64_t v13 = (void *)v22;
    uint64_t v20 = *((void *)&v21 + 1);
    uint64_t v14 = (long long *)(v21 + DWORD2(v21));
    *uint64_t v14 = v17;
    v14[1] = v18;
    v14[2] = v19;
    uint64_t v15 = re::RenderGraphDataStore::add<re::RenderGraphDataStoreWrapper<re::ColorExecData>>(*((re **)a2 + 146), *(void *)(*((void *)a2 + 5) + 48));
    *(void *)&long long v21 = v13;
    *((void *)&v21 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = v20;
    NS::SharedPtr<MTL::Texture>::operator=((void **)(v15 + 8), (void **)&v21);
    uint64_t v16 = (void *)v21;
    *(void *)(v15 + 16) = *((void *)&v21 + 1);
    if (v16) {
  }
    }
}

uint64_t re::RenderGraphARCombinedPostProcessNode::setup(re::RenderGraphARCombinedPostProcessNode *this, re::RenderGraphBuilder *a2, re::RenderGraphDataStore *a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (!*((void *)this + 24))
  {
    long long v10 = 0u;
    long long v11 = 0u;
    long long v8 = 0u;
    long long v9 = 0u;
    long long v7 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_5:
    long long v10 = 0u;
    long long v11 = 0u;
    long long v8 = 0u;
    long long v9 = 0u;
    long long v7 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  re::RenderGraphBuilder::read((uint64_t)a2, *((void *)this + 26), *((void *)this + 26) + 16);
  if (!*((void *)this + 29)) {
    goto LABEL_5;
  }
  uint64_t v5 = *((void *)this + 31);
  *(void *)&long long v7 = 0x100000000;
  long long v8 = xmmword_23435FBB0;
  LOWORD(v9) = 0;
  *(void *)((char *)&v9 + 4) = 0;
  return re::RenderGraphBuilder::write((uint64_t)a2, v5, (uint64_t)&v7);
}

void re::RenderGraphARCombinedPostProcessNode::configure(re::RenderGraphARCombinedPostProcessNode *this, const char *a2, const char *a3, re::RenderFrame *a4)
{
  unint64_t v8 = *((void *)this + 53);
  if (v8)
  {
    unint64_t v9 = 0;
    uint64_t v10 = 8;
    do
    {
      long long v11 = (uint64_t *)(*((void *)this + 55) + v10);
      uint64_t v13 = *v11;
      uint64_t v12 = (re::AssetHandle *)(v11 - 1);
      if (v13)
      {
        if (v8 <= v9)
        {
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        re::AssetHandle::loadAsync(v12);
        unint64_t v8 = *((void *)this + 53);
      }
      if (v9 > 0xE) {
        break;
      }
      ++v9;
      v10 += 24;
    }
    while (v8 > v9);
  }
  unint64_t v14 = *((void *)this + 32);
  if (v14 > 0xF)
  {
    if (v14 == 16) {
      goto LABEL_12;
    }
  }
  else
  {
    bzero((char *)this + 8 * v14 + 272, 128 - 8 * v14);
  }
  *((void *)this + 32) = 16;
  ++*((_DWORD *)this + 66);
LABEL_12:
  re::RenderGraphNode::configure(this, a2, a3, a4);
}

void re::RenderGraphARCombinedPostProcessNode::execute(re::RenderGraphARCombinedPostProcessNode *this, re::RenderGraphContext *a2)
{
  uint64_t v87 = *MEMORY[0x263EF8340];
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v74, 5040, 0);
  if (!*((void *)this + 53))
  {
LABEL_8:
    if (*((unsigned char *)this + 400))
    {
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9C0F0, memory_order_acquire) & 1) == 0)
      {
        char v51 = (re *)__cxa_guard_acquire(&qword_26AF9C0F0);
        if (v51)
        {
          _MergedGlobals_459 = re::getCombinedScopeHash(v51, v52, v53);
          __cxa_guard_release(&qword_26AF9C0F0);
        }
      }
      if (*((unsigned char *)this + 401))
      {
        uint64_t v12 = _MergedGlobals_459;
        uint64_t v13 = *((void *)a2 + 146);
      }
      else
      {
        uint64_t v13 = *((void *)a2 + 146);
        uint64_t v12 = *(void *)(*((void *)a2 + 5) + 48);
      }
      unint64_t v2 = re::RenderGraphDataStore::tryGet<re::TonemapParametersData>(v13, v12);
      if (!v2)
      {
        char v33 = *re::graphicsLogObjects(0);
        if (!os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_57;
        }
        *(_WORD *)buf = 0;
        int v34 = "RenderGraphARCombinedPostProcessNode expects TonemapParametersData from the render graph data store but th"
              "ere isn't any. Will skip the execution.";
        goto LABEL_32;
      }
      re::FrameContext::perFrameAlloc(*(re::FrameContext **)a2, 0x84uLL, 4uLL, (uint64_t)buf);
      uint64_t v14 = v83;
      unint64_t v15 = *(unsigned int *)&buf[8] | ((unint64_t)*(unsigned int *)&buf[12] << 32);
      uint64_t v16 = *(void *)buf + *(unsigned int *)&buf[8];
      *(_OWORD *)uint64_t v16 = *(_OWORD *)(v2 + 8);
      long long v17 = *(_OWORD *)(v2 + 24);
      long long v18 = *(_OWORD *)(v2 + 40);
      long long v19 = *(_OWORD *)(v2 + 72);
      *(_OWORD *)(v16 + 4re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = *(_OWORD *)(v2 + 56);
      *(_OWORD *)(v16 + 64) = v19;
      *(_OWORD *)(v16 + 16) = v17;
      *(_OWORD *)(v16 + 32) = v18;
      long long v20 = *(_OWORD *)(v2 + 88);
      long long v21 = *(_OWORD *)(v2 + 104);
      long long v22 = *(_OWORD *)(v2 + 120);
      *(_DWORD *)(v16 + 12re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = *(_DWORD *)(v2 + 136);
      *(_OWORD *)(v16 + 96) = v21;
      *(_OWORD *)(v16 + 112) = v22;
      *(_OWORD *)(v16 + 80) = v20;
      long long v23 = (re::BufferTable *)(*(void *)a2 + 480);
      *(void *)int v76 = 0x1C6D7B14F4E32CD0;
      *(void *)buf = v14;
      *(void *)&buf[8] = v15;
      re::BufferTable::setBuffer(v23, (const re::WeakStringID *)v76, (const BufferView *)buf);
    }
    if (!*((unsigned char *)this + 404)) {
      goto LABEL_18;
    }
    uint64_t v24 = re::RenderGraphDataStore::tryGet<re::RenderGraphDataStoreWrapper<re::ColorExecData>>(*((void *)a2 + 146), *(void *)(*((void *)a2 + 5) + 48));
    if (v24)
    {
      long long v25 = (re::BufferTable *)(*(void *)a2 + 480);
      *(void *)buf = 0x775E00AD509B0A76;
      re::BufferTable::setBuffer(v25, (const re::WeakStringID *)buf, v24 + 8);
LABEL_18:
      uint64_t v7 = 0xA3521511A35B9;
      uint64_t v26 = *(void *)a2;
      v75[0] = 0xA3521511A35B9;
      if (*((void *)this + 24))
      {
        long long v27 = (void *)(v26 + 368);
        re::RenderGraphContext::metalTexture((uint64_t)a2, *((void *)this + 26), 0, 0, (id *)buf);
        re::DynamicTextureTableAdd(v27, v75, (id *)buf);
        if (*(void *)buf) {

        }
        unint64_t v3 = *((unsigned __int8 *)this + 400) | (2 * *((unsigned __int8 *)this + 402)) | (4
                                                                                          * *((unsigned __int8 *)this
                                                                                            + 403)) | (8 * *((unsigned __int8 *)this + 404));
        if (*((void *)this + 32) <= v3)
        {
          re::DynamicString::format((re::DynamicString *)"%s: Permutation %du was requested but only %lu materials exist.", (re::DynamicString *)buf, *((void *)this + 2), (*((unsigned char *)this + 400) | (2 * *((unsigned char *)this + 402)) | (4 * *((unsigned char *)this + 403)) | (8 * *((unsigned char *)this + 404))), *((void *)this + 32));
          re::RenderGraphExecutable::addError(*((void *)a2 + 147), (uint64_t)buf);
          uint64_t v31 = *(void *)buf;
          if (!*(void *)buf || (buf[8] & 1) == 0) {
            goto LABEL_57;
          }
          uint64_t v32 = v83;
          goto LABEL_56;
        }
        unint64_t v2 = *((void *)this + 53);
        if (v2 <= v3) {
          goto LABEL_62;
        }
        uint64_t v28 = *(void *)(*((void *)this + v3 + 34) + 1664);
        unint64_t v29 = *(void *)(*((void *)this + 55) + 24 * v3 + 8);
        if (v29) {
          uint64_t v30 = *(void *)(v29 + 664);
        }
        else {
          uint64_t v30 = 0;
        }
        unint64_t v35 = 0x94D049BB133111EBLL
            * ((0xBF58476D1CE4E5B9 * (v29 ^ (v29 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v29 ^ (v29 >> 30))) >> 27));
        *(void *)buf = v30 ^ (v35 >> 31) ^ v35;
        __int16 v36 = (uint64_t *)re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet((uint64_t)a2 + 1568, (uint64_t *)buf);
        if (v36) {
          uint64_t v37 = *v36;
        }
        else {
          uint64_t v37 = 0;
        }
        re::RenderGraphContext::makeFullscreenDrawCall(a2, v28, v37, 0, 0, 0, (int32x2_t *)buf);
        __int16 v38 = (re::MaterialParameterTableLayers *)v86;
        unint64_t v2 = (unint64_t)"fullscreen";
        MurmurHash3_x64_128((uint64_t)"fullscreen", 10, 0, (unint64_t *)v76);
        char v39 = re::MaterialParameterTableLayers::resolveTechniqueIndices(v38, (*(void *)&v76[8] + (*(void *)v76 << 6) + (*(void *)v76 >> 2) - 0x61C8864680B583E9) ^ *(void *)v76);
        if (!v40) {
          goto LABEL_63;
        }
        HIDWORD(v84) = *v39;
        if (HIDWORD(v84) == -1) {
          goto LABEL_57;
        }
        uint64_t v41 = re::RenderGraphDataStore::tryGet<re::CameraData>(*((void *)a2 + 146), *(void *)(*((void *)a2 + 5) + 48));
        uint64_t v73 = 0;
        uint64_t v70 = 0;
        memset(v71, 0, sizeof(v71));
        int v72 = 0;
        memset(v68, 0, sizeof(v68));
        int v69 = 0;
        if (v41)
        {
          unint64_t v3 = v41;
          if (*(void *)(v41 + 128))
          {
            unint64_t v4 = 0;
            int v42 = 0;
            while (1)
            {
              re::Projection::computeMatrix4x4F((re::Projection *)(v3 + 144 + (v4 << 6)), (uint64_t)v76);
              re::DynamicArray<re::Matrix4x4<float>>::add((_anonymous_namespace_ *)v71, (uint64_t)v76);
              unint64_t v44 = *(void *)(v3 + 48);
              if (v44 <= v4) {
                break;
              }
              re::RenderCamera::computeInverseTransform((float32x4_t *)(v3 + 64 + 32 * v4), (uint64_t)v76);
              re::DynamicArray<re::Matrix4x4<float>>::add((_anonymous_namespace_ *)v68, (uint64_t)v76);
              unint64_t v4 = ++v42;
              if (*(void *)(v3 + 128) <= (unint64_t)v42) {
                goto LABEL_44;
              }
            }
LABEL_60:
            re::internal::assertLog((re::internal *)6, v43, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, v4, v44);
            _os_crash();
            __break(1u);
            goto LABEL_61;
          }
LABEL_44:
          char v45 = *(unsigned char *)(v3 + 490);
        }
        else
        {
          *(_OWORD *)int v76 = xmmword_23435FD50;
          *(_OWORD *)&v76[16] = xmmword_23435FD60;
          *(_OWORD *)&v76[32] = xmmword_23435FD80;
          *(_OWORD *)char v77 = xmmword_23435FBB0;
          re::DynamicArray<re::Matrix4x4<float>>::add((_anonymous_namespace_ *)v71, (uint64_t)v76);
          *(_OWORD *)int v76 = xmmword_23435FD50;
          *(_OWORD *)&v76[16] = xmmword_23435FD60;
          *(_OWORD *)&v76[32] = xmmword_23435FD80;
          *(_OWORD *)char v77 = xmmword_23435FBB0;
          re::DynamicArray<re::Matrix4x4<float>>::add((_anonymous_namespace_ *)v68, (uint64_t)v76);
          char v45 = 1;
        }
        re::DrawCallRef::DrawCallRef(&v63, (const re::DrawCall *)buf);
        uint64_t v46 = 0;
        *(void *)int v76 = &v63;
        *(void *)&v76[24] = &v64;
        *(void *)char v77 = &v65;
        uint64_t v78 = &v66;
        *(int64x2_t *)&v76[8] = vdupq_n_s64(1uLL);
        *(_OWORD *)&v76[32] = *(_OWORD *)&v76[8];
        *(_OWORD *)&v77[8] = *(_OWORD *)&v76[8];
        long long v79 = *(_OWORD *)&v76[8];
        unint64_t v80 = &v67;
        long long v81 = *(_OWORD *)&v76[8];
        v54[0] = "fullscreen";
        v54[1] = v76;
        v54[2] = v70;
        v54[3] = v73;
        v54[4] = 0;
        char v55 = v45;
        __int16 v56 = 2;
        __int16 v57 = 0;
        long long v58 = 0u;
        long long v59 = 0u;
        char v60 = 0;
        if (!*((unsigned char *)a2 + 1332)) {
          goto LABEL_47;
        }
        goto LABEL_64;
      }
LABEL_61:
      v54[0] = 0;
      long long v85 = 0u;
      long long v86 = 0u;
      long long v83 = 0u;
      long long v84 = 0u;
      *(_OWORD *)buf = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)int v76 = 136315906;
      *(void *)&v76[4] = "operator[]";
      *(_WORD *)&v76[12] = 1024;
      *(_DWORD *)&v76[14] = 789;
      *(_WORD *)&v76[18] = 2048;
      *(void *)&v76[20] = 0;
      *(_WORD *)&v76[28] = 2048;
      *(void *)&v76[30] = 0;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_62:
      v54[0] = 0;
      long long v85 = 0u;
      long long v86 = 0u;
      long long v83 = 0u;
      long long v84 = 0u;
      *(_OWORD *)buf = 0u;
      a2 = (re::RenderGraphContext *)&_os_log_internal;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)int v76 = 136315906;
      *(void *)&v76[4] = "operator[]";
      *(_WORD *)&v76[12] = 1024;
      *(_DWORD *)&v76[14] = 789;
      *(_WORD *)&v76[18] = 2048;
      *(void *)&v76[20] = v3;
      *(_WORD *)&v76[28] = 2048;
      *(void *)&v76[30] = v2;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_63:
      re::internal::assertLog((re::internal *)6, v40, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
      _os_crash();
      __break(1u);
LABEL_64:
      uint64_t v46 = re::DrawCallRecorder::allocateDrawCallRecorderGroup((re::RenderGraphContext *)((char *)a2 + 1336), *((const char **)this + 2), "fullscreen");
LABEL_47:
      uint64_t v61 = v46;
      char v62 = 0;
      re::RenderGraphContext::getDefaultEncodeDrawCallDataStoreArgs(a2, v75);
      re::RenderGraphContext::encodeDrawCalls(a2, v75, v54);
      char v47 = (re *)(*(void *)a2 + 368);
      v75[0] = v7;
      re::DynamicTextureTableRemove(v47, (re::TextureTable *)v75, v48);
      if (*((unsigned char *)this + 400))
      {
        uint64_t v49 = (re::BufferTable *)(*(void *)a2 + 480);
        v75[0] = 0x1C6D7B14F4E32CD0;
        re::BufferTable::removeBuffer(v49, (const re::WeakStringID *)v75);
      }
      if (*((unsigned char *)this + 404))
      {
        __int16 v50 = (re::BufferTable *)(*(void *)a2 + 480);
        v75[0] = 0x775E00AD509B0A76;
        re::BufferTable::removeBuffer(v50, (const re::WeakStringID *)v75);
      }
      if (v68[0] && v70) {
        (*(void (**)(void))(*(void *)v68[0] + 40))();
      }
      uint64_t v31 = v71[0];
      if (!v71[0]) {
        goto LABEL_57;
      }
      uint64_t v32 = v73;
      if (!v73) {
        goto LABEL_57;
      }
LABEL_56:
      (*(void (**)(uint64_t, uint64_t))(*(void *)v31 + 40))(v31, v32);
      goto LABEL_57;
    }
    char v33 = *re::graphicsLogObjects(0);
    if (!os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_57;
    }
    *(_WORD *)buf = 0;
    int v34 = "RenderGraphARCombinedPostProcessNode expects ColorExecDataWrapper from the render graph data store but there i"
          "sn't any. Will skip the execution. Did you forget to add a upload node?";
LABEL_32:
    _os_log_impl(&dword_233120000, v33, OS_LOG_TYPE_DEFAULT, v34, buf, 2u);
    goto LABEL_57;
  }
  unint64_t v3 = 0;
  unint64_t v2 = 0;
  uint64_t v7 = (uint64_t)this + 272;
  while (re::AssetHandle::loadedAsset<re::MaterialAsset>((re::MaterialAsset *)(*((void *)this + 55) + v3)))
  {
    unint64_t v8 = *((void *)this + 53);
    if (v8 <= v2)
    {
      v54[0] = 0;
      long long v85 = 0u;
      long long v86 = 0u;
      long long v83 = 0u;
      long long v84 = 0u;
      *(_OWORD *)buf = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)int v76 = 136315906;
      *(void *)&v76[4] = "operator[]";
      *(_WORD *)&v76[12] = 1024;
      *(_DWORD *)&v76[14] = 789;
      *(_WORD *)&v76[18] = 2048;
      *(void *)&v76[20] = v2;
      *(_WORD *)&v76[28] = 2048;
      *(void *)&v76[30] = v8;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_59:
      re::internal::assertLog((re::internal *)6, v10, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, v2, v11);
      _os_crash();
      __break(1u);
      goto LABEL_60;
    }
    uint64_t v9 = re::AssetHandle::loadedAsset<re::MaterialAsset>((re::MaterialAsset *)(*((void *)this + 55) + v3));
    unint64_t v11 = *((void *)this + 32);
    if (v11 <= v2) {
      goto LABEL_59;
    }
    *(void *)(v7 + 8 * v2) = v9;
    if (v2 <= 0xE)
    {
      ++v2;
      v3 += 24;
      if (*((void *)this + 53) > v2) {
        continue;
      }
    }
    goto LABEL_8;
  }
LABEL_57:
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v74);
}

void re::RenderGraphARCombinedPostProcessNode::getMaterialParameterTables(uint64_t a1, uint64_t a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  unint64_t v2 = *(unsigned __int8 *)(a1 + 400) | (2 * *(unsigned __int8 *)(a1 + 402)) | (4 * *(unsigned __int8 *)(a1 + 403)) | (8 * *(unsigned __int8 *)(a1 + 404));
  if (*(void *)(a1 + 424) > v2)
  {
    uint64_t v4 = *(void *)(a1 + 440);
    if (*(void *)(v4 + 24 * v2 + 8))
    {
      uint64_t v6 = re::AssetHandle::loadedAsset<re::MaterialAsset>((re::MaterialAsset *)(v4 + 24 * v2));
      if (v6)
      {
        uint64_t v7 = *(re::MaterialParameterBlock **)(v6 + 1672);
        if (v7)
        {
          unint64_t v8 = *(void *)(a1 + 424);
          if (v8 <= v2)
          {
            memset(v20, 0, sizeof(v20));
            unint64_t v12 = v8;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)uint64_t v13 = 136315906;
            *(void *)&void v13[4] = "operator[]";
            __int16 v14 = 1024;
            int v15 = 797;
            __int16 v16 = 2048;
            unint64_t v17 = v2;
            __int16 v18 = 2048;
            unint64_t v19 = v12;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
          unint64_t v9 = *(void *)(*(void *)(a1 + 440) + 24 * v2 + 8);
          if (v9) {
            uint64_t v10 = *(void *)(v9 + 664);
          }
          else {
            uint64_t v10 = 0;
          }
          unint64_t v11 = 0x94D049BB133111EBLL
              * ((0xBF58476D1CE4E5B9 * (v9 ^ (v9 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v9 ^ (v9 >> 30))) >> 27));
          *(void *)&v20[0] = v10 ^ (v11 >> 31) ^ v11;
          re::MaterialParameterBlock::createMaterialParameterTableIfNeeded(v7, v13);
          re::HashTable<unsigned long,re::SharedPtr<re::MaterialParameterTable>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::add(a2, (unint64_t *)v20, v13);
          if (*(void *)v13) {
        }
          }
      }
    }
  }
}

void *re::allocInfo_RenderGraphARUploadPostParams(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9C0F8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9C0F8))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF9C178, "RenderGraphARUploadPostParams");
    __cxa_guard_release(&qword_26AF9C0F8);
  }
  return &unk_26AF9C178;
}

void re::initInfo_RenderGraphARUploadPostParams(re *this, re::IntrospectionBase *a2)
{
  v24[0] = 0x259D9E6D55C4A960;
  v24[1] = "RenderGraphARUploadPostParams";
  re::StringID::destroyString((re::StringID *)v24);
  *((_OWORD *)this + 2) = v25;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9C100, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF9C100);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::introspect_RenderGraphNode((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = "RenderGraphNode";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 4re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF9C118 = v7;
      unint64_t v8 = re::introspectionAllocator((re *)v7);
      uint64_t v10 = re::introspect_BOOL((re *)1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = "tonemappingEnabled";
      *(void *)(v11 + 16) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x10000000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + 4re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF9C120 = v11;
      unint64_t v12 = re::introspectionAllocator((re *)v11);
      uint64_t v13 = re::introspect_TonemapUserParameters((re::IntrospectionBase **)1);
      uint64_t v14 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 72, 8);
      *(_DWORD *)uint64_t v14 = 1;
      *(void *)(v14 + re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = "tonemapUserParameters";
      *(void *)(v14 + 16) = v13;
      *(void *)(v14 + 24) = 0;
      *(void *)(v14 + 32) = 0x10400000002;
      *(_DWORD *)(v14 + 40) = 0;
      *(void *)(v14 + 4re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v14 + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_26AF9C128 = v14;
      int v15 = re::introspectionAllocator((re *)v14);
      unint64_t v17 = re::introspect_BOOL((re *)1, v16);
      uint64_t v18 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v15 + 32))(v15, 72, 8);
      *(_DWORD *)uint64_t v18 = 1;
      *(void *)(v18 + re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = "tonemappingSharedParamsEnabled";
      *(void *)(v18 + 16) = v17;
      *(void *)(v18 + 24) = 0;
      *(void *)(v18 + 32) = 0x10100000003;
      *(_DWORD *)(v18 + 40) = 0;
      *(void *)(v18 + 4re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v18 + 56) = 0;
      *(_DWORD *)(v18 + 64) = 0;
      qword_26AF9C130 = v18;
      unint64_t v19 = re::introspectionAllocator((re *)v18);
      uint64_t v21 = re::introspect_BOOL((re *)1, v20);
      uint64_t v22 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v19 + 32))(v19, 72, 8);
      *(_DWORD *)uint64_t v22 = 1;
      *(void *)(v22 + re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = "colorConvertEnabled";
      *(void *)(v22 + 16) = v21;
      *(void *)(v22 + 24) = 0;
      *(void *)(v22 + 32) = 0x10200000004;
      *(_DWORD *)(v22 + 40) = 0;
      *(void *)(v22 + 4re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v22 + 56) = 0;
      *(_DWORD *)(v22 + 64) = 0;
      qword_26AF9C138 = v22;
      __cxa_guard_release(&qword_26AF9C100);
    }
  }
  *((void *)this + 2) = 0x14000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 5;
  *((void *)this + re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = &qword_26AF9C118;
  *((void *)this + 9) = re::internal::defaultConstruct<re::RenderGraphARUploadPostParams>;
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::RenderGraphARUploadPostParams>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::RenderGraphARUploadPostParams>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::RenderGraphARUploadPostParams>;
  re::IntrospectionRegistry::add(this, v3);
  long long v23 = v25;
}

double re::internal::defaultConstruct<re::RenderGraphARUploadPostParams>(int a1, int a2, re::RenderGraphARUploadPostParams *this)
{
  return re::RenderGraphARUploadPostParams::RenderGraphARUploadPostParams(this);
}

uint64_t re::internal::defaultDestruct<re::RenderGraphARUploadPostParams>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

uint64_t re::internal::defaultDestructV2<re::RenderGraphARUploadPostParams>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::introspect_RenderGraphARUploadPostParams(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RenderGraphARUploadPostParams", (uint64_t (*)(re::internal *))re::allocInfo_RenderGraphARUploadPostParams, (re::IntrospectionBase *(*)(void))re::initInfo_RenderGraphARUploadPostParams, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::RenderGraphARUploadPostParams>, this);
}

void *re::allocInfo_RenderGraphARCombinedPostProcessNode(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9C108, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9C108))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF9C1F0, "RenderGraphARCombinedPostProcessNode");
    __cxa_guard_release(&qword_26AF9C108);
  }
  return &unk_26AF9C1F0;
}

void re::initInfo_RenderGraphARCombinedPostProcessNode(re *this, re::IntrospectionBase *a2)
{
  v33[0] = 0x55028F1BAB7A21C6;
  v33[1] = "RenderGraphARCombinedPostProcessNode";
  re::StringID::destroyString((re::StringID *)v33);
  *((_OWORD *)this + 2) = v34;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9C110, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF9C110);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::introspect_RenderGraphNode((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = "RenderGraphNode";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 4re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF9C140 = v7;
      unint64_t v8 = re::introspectionAllocator((re *)v7);
      uint64_t v10 = re::introspect_BOOL((re *)1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = "tonemappingEnabled";
      *(void *)(v11 + 16) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x19000000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + 4re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF9C148 = v11;
      unint64_t v12 = re::introspectionAllocator((re *)v11);
      uint64_t v14 = re::introspect_BOOL((re *)1, v13);
      uint64_t v15 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 72, 8);
      *(_DWORD *)uint64_t v15 = 1;
      *(void *)(v15 + re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = "colorCorrectionEnabled";
      *(void *)(v15 + 16) = v14;
      *(void *)(v15 + 24) = 0;
      *(void *)(v15 + 32) = 0x19200000002;
      *(_DWORD *)(v15 + 40) = 0;
      *(void *)(v15 + 4re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_26AF9C150 = v15;
      __int16 v16 = re::introspectionAllocator((re *)v15);
      uint64_t v18 = re::introspect_BOOL((re *)1, v17);
      uint64_t v19 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v16 + 32))(v16, 72, 8);
      *(_DWORD *)uint64_t v19 = 1;
      *(void *)(v19 + re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = "cameraNoiseEnabled";
      *(void *)(v19 + 16) = v18;
      *(void *)(v19 + 24) = 0;
      *(void *)(v19 + 32) = 0x19300000003;
      *(_DWORD *)(v19 + 40) = 0;
      *(void *)(v19 + 4re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v19 + 56) = 0;
      *(_DWORD *)(v19 + 64) = 0;
      qword_26AF9C158 = v19;
      long long v20 = re::introspectionAllocator((re *)v19);
      uint64_t v22 = re::IntrospectionInfo<re::DynamicArray<re::AssetHandle>>::get(1, v21);
      uint64_t v23 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v20 + 32))(v20, 72, 8);
      *(_DWORD *)uint64_t v23 = 1;
      *(void *)(v23 + re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = "combinedMaterialPermutations";
      *(void *)(v23 + 16) = v22;
      *(void *)(v23 + 24) = 0;
      *(void *)(v23 + 32) = 0x19800000004;
      *(_DWORD *)(v23 + 40) = 0;
      *(void *)(v23 + 4re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v23 + 56) = 0;
      *(_DWORD *)(v23 + 64) = 0;
      qword_26AF9C160 = v23;
      uint64_t v24 = re::introspectionAllocator((re *)v23);
      uint64_t v26 = re::introspect_BOOL((re *)1, v25);
      uint64_t v27 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v24 + 32))(v24, 72, 8);
      *(_DWORD *)uint64_t v27 = 1;
      *(void *)(v27 + re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = "tonemappingSharedParamsEnabled";
      *(void *)(v27 + 16) = v26;
      *(void *)(v27 + 24) = 0;
      *(void *)(v27 + 32) = 0x19100000005;
      *(_DWORD *)(v27 + 40) = 0;
      *(void *)(v27 + 4re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v27 + 56) = 0;
      *(_DWORD *)(v27 + 64) = 0;
      qword_26AF9C168 = v27;
      uint64_t v28 = re::introspectionAllocator((re *)v27);
      uint64_t v30 = re::introspect_BOOL((re *)1, v29);
      uint64_t v31 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v28 + 32))(v28, 72, 8);
      *(_DWORD *)uint64_t v31 = 1;
      *(void *)(v31 + re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = "colorConvertEnabled";
      *(void *)(v31 + 16) = v30;
      *(void *)(v31 + 24) = 0;
      *(void *)(v31 + 32) = 0x19400000006;
      *(_DWORD *)(v31 + 40) = 0;
      *(void *)(v31 + 4re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v31 + 56) = 0;
      *(_DWORD *)(v31 + 64) = 0;
      qword_26AF9C170 = v31;
      __cxa_guard_release(&qword_26AF9C110);
    }
  }
  *((void *)this + 2) = 0x1C000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 7;
  *((void *)this + re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = &qword_26AF9C140;
  *((void *)this + 9) = re::internal::defaultConstruct<re::RenderGraphARCombinedPostProcessNode>;
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::RenderGraphARCombinedPostProcessNode>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::RenderGraphARCombinedPostProcessNode>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::RenderGraphARCombinedPostProcessNode>;
  re::IntrospectionRegistry::add(this, v3);
  long long v32 = v34;
}

re::RenderGraphNode *re::internal::defaultConstruct<re::RenderGraphARCombinedPostProcessNode>(int a1, int a2, re::RenderGraphNode *this)
{
  uint64_t result = re::RenderGraphNode::RenderGraphNode(this);
  *(void *)uint64_t result = &unk_26E71DC38;
  *((void *)result + 32) = 0;
  *((_DWORD *)result + 66) = 0;
  *((void *)result + 55) = 0;
  *((void *)result + 52) = 0;
  *((void *)result + 53) = 0;
  *((void *)result + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
  *((_DWORD *)result + 10re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = 0;
  *(_DWORD *)((char *)result + 40re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
  return result;
}

uint64_t re::internal::defaultDestruct<re::RenderGraphARCombinedPostProcessNode>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

re::RenderGraphNode *re::internal::defaultConstructV2<re::RenderGraphARCombinedPostProcessNode>(re::RenderGraphNode *a1)
{
  uint64_t result = re::RenderGraphNode::RenderGraphNode(a1);
  *(void *)uint64_t result = &unk_26E71DC38;
  *((void *)result + 32) = 0;
  *((_DWORD *)result + 66) = 0;
  *((void *)result + 55) = 0;
  *((void *)result + 52) = 0;
  *((void *)result + 53) = 0;
  *((void *)result + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
  *((_DWORD *)result + 10re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = 0;
  *(_DWORD *)((char *)result + 40re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::RenderGraphARCombinedPostProcessNode>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::introspect_RenderGraphARCombinedPostProcessNode(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RenderGraphARCombinedPostProcessNode", (uint64_t (*)(re::internal *))re::allocInfo_RenderGraphARCombinedPostProcessNode, (re::IntrospectionBase *(*)(void))re::initInfo_RenderGraphARCombinedPostProcessNode, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::RenderGraphARCombinedPostProcessNode>, this);
}

void re::RenderGraphARUploadPostParams::~RenderGraphARUploadPostParams(id *this)
{
  re::RenderGraphNode::~RenderGraphNode(this);
  JUMPOUT(0x237DBCBD0);
}

void re::RenderGraphARCombinedPostProcessNode::~RenderGraphARCombinedPostProcessNode(re::RenderGraphARCombinedPostProcessNode *this)
{
  *(void *)this = &unk_26E71DC38;
  re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 408);
  *((void *)this + 32) = 0;
  ++*((_DWORD *)this + 66);
  re::RenderGraphNode::~RenderGraphNode((id *)this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E71DC38;
  re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 408);
  *((void *)this + 32) = 0;
  ++*((_DWORD *)this + 66);
  re::RenderGraphNode::~RenderGraphNode((id *)this);
  JUMPOUT(0x237DBCBD0);
}

double re::RenderGraphARUploadPostParams::RenderGraphARUploadPostParams(re::RenderGraphARUploadPostParams *this)
{
  uint64_t v1 = (char *)this + 260;
  unint64_t v2 = re::RenderGraphNode::RenderGraphNode(this);
  *(void *)unint64_t v2 = &unk_26E71DB90;
  *((_WORD *)v2 + 12re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = 0;
  *((unsigned char *)v2 + 25re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = 0;
  *(_OWORD *)uint64_t v1 = xmmword_23436C470;
  *((_OWORD *)v1 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = xmmword_2343679C0;
  *((unsigned char *)v2 + 292) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *((double *)v2 + 37) = result;
  *((unsigned char *)v2 + 304) = 0;
  *((void *)v1 + 6) = 0x3F80000000000000;
  *((unsigned char *)v2 + 316) = 0;
  return result;
}

void re::RenderGraphMeshNodeBase::computeSortDistance(uint64_t a1, float32x4_t *a2, unsigned char *a3, __n128 *a4, float32x2_t *a5, float32x4_t *a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, float32x4_t a12)
{
  uint64_t v17 = a1;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9C270, memory_order_acquire) & 1) == 0)
  {
    char v71 = a4;
    uint64_t v67 = a3;
    a1 = __cxa_guard_acquire(&qword_26AF9C270);
    a3 = v67;
    a4 = v71;
    if (a1)
    {
      re::Defaults::BOOLValue((re::Defaults *)"useLegacySortingDistances", v68, (char *)buf);
      if (buf[0]) {
        uint8_t v69 = buf[1];
      }
      else {
        uint8_t v69 = 0;
      }
      _MergedGlobals_460 = v69;
      __cxa_guard_release(&qword_26AF9C270);
      a3 = v67;
      a4 = v71;
    }
  }
  char v18 = 1;
  switch(*a3)
  {
    case 0:
      goto LABEL_7;
    case 1:
      re::BoundingSphere::BoundingSphere((float32x4_t *)buf, v17, a2);
      a12 = vaddq_f32(*(float32x4_t *)buf, vmulq_n_f32(*a6, *(float *)&buf[12]));
      char v18 = 0;
      if (!a7) {
        return;
      }
      goto LABEL_45;
    case 2:
      re::BoundingSphere::BoundingSphere((float32x4_t *)buf, v17, a2);
      a12 = vsubq_f32(*(float32x4_t *)buf, vmulq_n_f32(*a6, *(float *)&buf[12]));
      char v18 = 0;
      if (!a7) {
        return;
      }
      goto LABEL_45;
    case 3:
      simd_float4x4 v73 = __invert_f4(*(simd_float4x4 *)a2->f32);
      v73.columns[0] = (simd_float4)vaddq_f32((float32x4_t)v73.columns[3], vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v73.columns[0], COERCE_FLOAT(*(_OWORD *)a5->f32)), (float32x4_t)v73.columns[1], *a5, 1), (float32x4_t)v73.columns[2], *(float32x4_t *)a5->f32, 2));
      float32x4_t v25 = vdivq_f32((float32x4_t)v73.columns[0], (float32x4_t)vdupq_laneq_s32((int32x4_t)v73.columns[0], 3));
      float32x4_t v27 = *(float32x4_t *)v17;
      float32x4_t v26 = *(float32x4_t *)(v17 + 16);
      v73.columns[3] = (simd_float4)vcgtq_f32(*(float32x4_t *)v17, v26);
      v73.columns[3].i32[3] = v73.columns[3].i32[2];
      if ((vmaxvq_u32((uint32x4_t)v73.columns[3]) & 0x80000000) != 0)
      {
        float32x4_t v29 = 0uLL;
      }
      else
      {
        v28.i64[0] = 0x3F0000003F000000;
        v28.i64[1] = 0x3F0000003F000000;
        float32x4_t v29 = vmulq_f32(vaddq_f32(v27, v26), v28);
      }
      float32x4_t v35 = vsubq_f32(v29, v25);
      __asm { FMOV            V5.4S, #1.0 }
      float32x4_t v41 = vdivq_f32(_Q5, v35);
      float32x4_t v42 = vmulq_f32(vsubq_f32(v27, v25), v41);
      float32x4_t v43 = vmulq_f32(vsubq_f32(v26, v25), v41);
      float v44 = v43.f32[1];
      if (vmovn_s32(vcgtq_f32(v43, v42)).u8[0]) {
        float v45 = v43.f32[0];
      }
      else {
        float v45 = v42.f32[0];
      }
      if (v42.f32[1] >= v43.f32[1]) {
        float v44 = v42.f32[1];
      }
      int8x8_t v46 = (int8x8_t)vdup_laneq_s32((int32x4_t)v43, 2);
      int8x8_t v47 = (int8x8_t)vdup_laneq_s32((int32x4_t)v42, 2);
      *(float *)v46.i32 = v44;
      *(float *)v47.i32 = v45;
      int8x8_t v48 = vbsl_s8((int8x8_t)vcgt_f32((float32x2_t)__PAIR64__(v46.u32[1], LODWORD(v45)), (float32x2_t)__PAIR64__(v47.u32[1], LODWORD(v44))), v46, v47);
      if (*(float *)v48.i32 > *(float *)&v48.i32[1]) {
        v48.i32[0] = v48.i32[1];
      }
      goto LABEL_41;
    case 4:
      simd_float4x4 v74 = __invert_f4(*(simd_float4x4 *)a2->f32);
      v74.columns[0] = (simd_float4)vaddq_f32((float32x4_t)v74.columns[3], vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v74.columns[0], COERCE_FLOAT(*(_OWORD *)a5->f32)), (float32x4_t)v74.columns[1], *a5, 1), (float32x4_t)v74.columns[2], *(float32x4_t *)a5->f32, 2));
      float32x4_t v25 = vdivq_f32((float32x4_t)v74.columns[0], (float32x4_t)vdupq_laneq_s32((int32x4_t)v74.columns[0], 3));
      float32x4_t v31 = *(float32x4_t *)v17;
      float32x4_t v30 = *(float32x4_t *)(v17 + 16);
      v74.columns[3] = (simd_float4)vcgtq_f32(*(float32x4_t *)v17, v30);
      v74.columns[3].i32[3] = v74.columns[3].i32[2];
      if ((vmaxvq_u32((uint32x4_t)v74.columns[3]) & 0x80000000) != 0)
      {
        float32x4_t v33 = 0uLL;
      }
      else
      {
        v32.i64[0] = 0x3F0000003F000000;
        v32.i64[1] = 0x3F0000003F000000;
        float32x4_t v33 = vmulq_f32(vaddq_f32(v31, v30), v32);
      }
      float32x4_t v35 = vsubq_f32(v33, v25);
      __asm { FMOV            V5.4S, #1.0 }
      float32x4_t v50 = vdivq_f32(_Q5, v35);
      float32x4_t v51 = vmulq_f32(vsubq_f32(v31, v25), v50);
      float32x4_t v52 = vmulq_f32(vsubq_f32(v30, v25), v50);
      float v53 = v52.f32[1];
      if (vmovn_s32(vcgtq_f32(v51, v52)).u8[0]) {
        float v54 = v52.f32[0];
      }
      else {
        float v54 = v51.f32[0];
      }
      if (v51.f32[1] <= v52.f32[1]) {
        float v53 = v51.f32[1];
      }
      int8x8_t v55 = (int8x8_t)vdup_laneq_s32((int32x4_t)v52, 2);
      int8x8_t v56 = (int8x8_t)vdup_laneq_s32((int32x4_t)v51, 2);
      *(float *)v55.i32 = v53;
      *(float *)v56.i32 = v54;
      int8x8_t v48 = vbsl_s8((int8x8_t)vcgt_f32((float32x2_t)__PAIR64__(v56.u32[1], LODWORD(v53)), (float32x2_t)__PAIR64__(v55.u32[1], LODWORD(v54))), v55, v56);
      if (*(float *)v48.i32 < *(float *)&v48.i32[1]) {
        v48.i32[0] = v48.i32[1];
      }
LABEL_41:
      float32x4_t v57 = vaddq_f32(v25, vmulq_n_f32(v35, *(float *)v48.i32));
      float32x4_t v58 = vaddq_f32(a2[3], vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*a2, v57.f32[0]), a2[1], *(float32x2_t *)v57.f32, 1), a2[2], v57, 2));
      a12 = vdivq_f32(v58, (float32x4_t)vdupq_laneq_s32((int32x4_t)v58, 3));
      goto LABEL_42;
    case 5:
      a12 = *(float32x4_t *)a4;
      goto LABEL_42;
    case 6:
      goto LABEL_44;
    case 7:
      if (!a7) {
        return;
      }
      goto LABEL_45;
    default:
      if ((atomic_exchange(byte_26AF9C269, 1u) & 1) == 0)
      {
        uint64_t v19 = *re::graphicsLogObjects((re *)a1);
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_233120000, v19, OS_LOG_TYPE_DEFAULT, "An unknown mesh sort point heuristic has been encountered. All unknown heuristics will default to kCentroid.", buf, 2u);
        }
      }
LABEL_7:
      float32x4_t v20 = *(float32x4_t *)(v17 + 16);
      uint32x4_t v21 = (uint32x4_t)vcgtq_f32(*(float32x4_t *)v17, v20);
      v21.i32[3] = v21.i32[2];
      if ((vmaxvq_u32(v21) & 0x80000000) != 0)
      {
        float32x4_t v24 = 0uLL;
      }
      else
      {
        float32x4_t v22 = vaddq_f32(*(float32x4_t *)v17, v20);
        v23.i64[0] = 0x3F0000003F000000;
        v23.i64[1] = 0x3F0000003F000000;
        float32x4_t v24 = vmulq_f32(v22, v23);
      }
      float32x4_t v34 = vaddq_f32(a2[3], vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*a2, v24.f32[0]), a2[1], *(float32x2_t *)v24.f32, 1), a2[2], v24, 2));
      a12 = vdivq_f32(v34, (float32x4_t)vdupq_laneq_s32((int32x4_t)v34, 3));
LABEL_42:
      if (!_MergedGlobals_460)
      {
        char v18 = 0;
        if (!a7) {
          return;
        }
        goto LABEL_45;
      }
      char v18 = 0;
LABEL_44:
      if (a7)
      {
LABEL_45:
        if (*(unsigned char *)a8)
        {
          __n128 v70 = (__n128)a12;
          uint64_t MutableSortingContext = re::DrawCallRecorderGroup::getMutableSortingContext(a7, *(_DWORD *)(a8 + 4));
          long long v60 = *(_OWORD *)(v17 + 16);
          *(_OWORD *)(MutableSortingContext + 32) = *(_OWORD *)v17;
          *(_OWORD *)(MutableSortingContext + 4re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = v60;
          float32x4_t v62 = a2[2];
          float32x4_t v61 = a2[3];
          float32x4_t v63 = a2[1];
          *(float32x4_t *)(MutableSortingContext + 64) = *a2;
          *(float32x4_t *)(MutableSortingContext + 80) = v63;
          *(float32x4_t *)(MutableSortingContext + 96) = v62;
          *(float32x4_t *)(MutableSortingContext + 112) = v61;
          char v64 = *(unsigned char *)(MutableSortingContext + 128) ? 0 : v18;
          if ((v64 & 1) == 0)
          {
            char v65 = v18 ^ 1;
            if (!*(unsigned char *)(MutableSortingContext + 128)) {
              char v65 = 1;
            }
            if (v65)
            {
              if (*(unsigned char *)(MutableSortingContext + 128)) {
                char v66 = 1;
              }
              else {
                char v66 = v18;
              }
              if ((v66 & 1) == 0) {
                *(unsigned char *)(MutableSortingContext + 12re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = 1;
              }
              *(__n128 *)(MutableSortingContext + 144) = v70;
            }
            else
            {
              *(unsigned char *)(MutableSortingContext + 12re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = 0;
            }
          }
        }
      }
      return;
  }
}

uint64_t re::RenderGraphMeshNodeBase::removeTargetWritesWithTypes(uint64_t result, uint64_t a2, unint64_t a3, int a4)
{
  unint64_t v4 = *(void *)(result + 232);
  if (v4)
  {
    unint64_t v5 = 0;
    do
    {
      if (v4 <= v5)
      {
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_25:
        re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v9, a3);
        _os_crash();
        __break(1u);
      }
      uint64_t v6 = *(void *)(result + 248);
      if (a3)
      {
        uint64_t v7 = 4 * a3;
        unint64_t v8 = (_DWORD *)a2;
        while (*v8 != *(_DWORD *)(v6 + (v5 << 6) + 20))
        {
          ++v8;
          v7 -= 4;
          if (!v7)
          {
            unint64_t v8 = (_DWORD *)(a2 + 4 * a3);
            break;
          }
        }
      }
      else
      {
        unint64_t v8 = (_DWORD *)a2;
      }
      unint64_t v9 = ((uint64_t)v8 - a2) >> 2;
      if (v9 == a3) {
        goto LABEL_21;
      }
      if (a3 <= v9) {
        goto LABEL_25;
      }
      int v10 = *(_DWORD *)(a2 + 4 * v9);
      BOOL v11 = v10 == 6 || v10 == 1;
      if (v11 && *(_DWORD *)(v6 + (v5 << 6) + 16) != a4)
      {
LABEL_21:
        ++v5;
      }
      else
      {
        uint64_t v12 = v4 - 1;
        if (v4 - 1 > v5)
        {
          uint64_t v13 = v6 + (v4 << 6);
          uint64_t v14 = (_OWORD *)(v6 + (v5 << 6));
          long long v15 = *(_OWORD *)(v13 - 64);
          long long v16 = *(_OWORD *)(v13 - 48);
          long long v17 = *(_OWORD *)(v13 - 16);
          v14[2] = *(_OWORD *)(v13 - 32);
          void v14[3] = v17;
          *uint64_t v14 = v15;
          v14[1] = v16;
          uint64_t v12 = *(void *)(result + 232) - 1;
        }
        *(void *)(result + 232) = v12;
        ++*(_DWORD *)(result + 240);
        unint64_t v4 = v12;
      }
    }
    while (v5 < v4);
  }
  return result;
}

uint64_t re::RenderGraphMeshNodeBase::sortAndDrawMeshPartsInternal(re *a1, float32x4_t *a2, uint64_t a3, re::DrawTable *a4, unsigned char *a5, uint64_t a6, uint64_t a7, char a8, unsigned char *a9, char a10, const char *a11, uint64_t a12, char a13)
{
  long long v15 = a4;
  unint64_t v18 = (unint64_t)a1;
  uint64_t v19 = a11;
  uint64_t v101 = *MEMORY[0x263EF8340];
  uint64_t v89 = a3;
  unint64_t v90 = (unint64_t)a4;
  if (a2[83].i8[4]) {
    goto LABEL_61;
  }
  for (uint64_t i = 0; ; uint64_t i = (uint64_t)a1)
  {
    float32x4_t v22 = *(re::Allocator **)(a2->i64[0] + 24);
    uint64_t v23 = *(unsigned int *)(v18 + 256);
    v93[1] = 0;
    _OWORD v93[2] = 0;
    v93[0] = a5;
    long long v94 = *(_OWORD *)a12;
    a5 = v95;
    memset(v95, 0, sizeof(v95));
    uint64_t v96 = re::globalAllocators(a1)[2];
    uint64_t v97 = 0;
    char v98 = 0;
    char v99 = *(unsigned char *)(a12 + 16);
    char v100 = 0;
    re::RenderGraphMeshNodeBase::sortMeshParts(&v86, v23, a3, v15, a2, i, v93, v22);
    re::FunctionBase<32ul,BOOL ()(re::MeshPartDrawContext const&)>::destroyCallable((uint64_t)v95);
    long long v15 = (re::DrawTable *)(*(uint64_t (**)(re::Allocator *, uint64_t, uint64_t))(*(void *)v22 + 32))(v22, 328, 8);
    re::DrawTable::DrawTable(v15, v22, (v87 + 127) >> 7);
    re::RenderGraphMeshNodeBase::makeDrawCallsFromMeshParts(&v89, v88, v87, a2, (uint64_t)v15, *(unsigned __int8 *)(a7 + 64), v24, v25, i);
    if (!*((void *)v15 + 5)) {
      break;
    }
    a2[94].i8[8] = 2;
    uint64_t v70 = a7;
    unint64_t v71 = v18;
    uint64_t v69 = i;
    if (re::GraphicsFeatureFlags::enableDepthPatch(void)::onceToken != -1) {
      dispatch_once(&re::GraphicsFeatureFlags::enableDepthPatch(void)::onceToken, &__block_literal_global_10_1);
    }
    if (!re::GraphicsFeatureFlags::enableDepthPatch(void)::gEnableDepthPatch || !v87)
    {
LABEL_31:
      re::DrawTableSlice::DrawTableSlice(v93, (uint64_t)v15);
      v74[0] = a11;
      v74[1] = v93;
      uint64_t v44 = *(void *)(v70 + 80);
      v74[2] = *(void *)(v70 + 40);
      v74[3] = v44;
      v74[4] = a6;
      char v75 = *(unsigned char *)(v70 + 128);
      char v76 = a8;
      if (*a9) {
        char v78 = a9[1];
      }
      char v79 = a10;
      char v80 = 0;
      long long v81 = 0u;
      long long v82 = 0u;
      char v83 = 0;
      uint64_t v84 = v69;
      char v85 = a13;
      re::RenderGraphContext::getDefaultEncodeDrawCallDataStoreArgs((re::RenderGraphContext *)a2, (uint64_t *)buf);
      re::RenderGraphContext::encodeDrawCalls(a2, buf, v74);
      a2[94].i8[8] = 0;
      if (*(_DWORD *)(v71 + 256) != 1)
      {
        uint64_t v45 = *(void *)(a2->i64[1] + 88);
        if (v45)
        {
          *(void *)buf = 0xD6C08CFBFE435984;
          *(void *)&buf[8] = "meshnode:debugDrawOrder";
          unsigned __int8 v91 = 0;
          if (re::DebugSettingsManager::getWithErrorCode<BOOL>(v45, buf, &v91))
          {
            re::StringID::destroyString((re::StringID *)buf);
          }
          else
          {
            int v47 = v91;
            re::StringID::destroyString((re::StringID *)buf);
            if (v47)
            {
              uint64_t v49 = *re::graphicsLogObjects(v48);
              BOOL v50 = os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT);
              if (v50)
              {
                uint64_t v51 = *(void *)(v71 + 16);
                *(_DWORD *)buf = 136315138;
                *(void *)&buf[4] = v51;
                _os_log_impl(&dword_233120000, v49, OS_LOG_TYPE_DEFAULT, "======================== Start Draw MeshNode[%s] ======================== ", buf, 0xCu);
              }
              if (*((void *)v15 + 5))
              {
                unint64_t v52 = 0;
                do
                {
                  float v53 = (re *)re::BucketArray<re::DrawCall,128ul>::operator[]((uint64_t)v15, v52);
                  float v54 = *re::graphicsLogObjects(v53);
                  BOOL v50 = os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT);
                  if (v50)
                  {
                    uint64_t v55 = *((void *)v53 + 10);
                    *(_DWORD *)buf = 134218240;
                    *(void *)&buf[4] = v52;
                    *(_WORD *)&buf[12] = 2048;
                    *(void *)&buf[14] = v55;
                    _os_log_impl(&dword_233120000, v54, OS_LOG_TYPE_DEFAULT, "Draw MeshPart[%zu]{ identifier:[%llu] }", buf, 0x16u);
                  }
                  ++v52;
                }
                while (v52 < *((void *)v15 + 5));
              }
              int8x8_t v56 = *re::graphicsLogObjects((re *)v50);
              if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v58 = *(void *)(v71 + 16);
                *(_DWORD *)buf = 136315138;
                *(void *)&buf[4] = v58;
                _os_log_impl(&dword_233120000, v56, OS_LOG_TYPE_DEFAULT, "======================== Finish Draw MeshNode[%s] ======================== ", buf, 0xCu);
              }
              uint64_t v59 = *(void *)(a2->i64[1] + 104);
              if (v59)
              {
                long long v60 = *(os_unfair_lock_s **)(v59 + 304);
                if (v60 && v87 != 0)
                {
                  uint64_t v62 = 0;
                  unint64_t v63 = 0;
                  uint64_t v65 = v89;
                  unint64_t v64 = v90;
                  do
                  {
                    if (v64 <= *(unsigned __int8 *)(v88 + v62 + 4))
                    {
                      re::internal::assertLog((re::internal *)6, v57, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, *(unsigned __int8 *)(v88 + v62 + 4), v64);
                      _os_crash();
                      __break(1u);
                    }
                    char v66 = (float32x4_t *)re::BucketArray<re::MeshPartDrawContext,128ul>::operator[](*(void *)(v65 + 24 * *(unsigned __int8 *)(v88 + v62 + 4)), *(unsigned int *)(v88 + v62));
                    uint64_t v67 = (float *)v66[2].i64[0];
                    DWORD1(v6re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = 0;
                    HIDWORD(v6re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = 0;
                    *(float *)&long long v68 = (float)v63 / (float)(v87 - 1);
                    *((float *)&v68 + 2) = 1.0 - *(float *)&v68;
                    *(_OWORD *)buf = v68;
                    re::DebugRenderer::drawBox(v60, v66 + 4, v67, (long long *)buf, 1);
                    ++v63;
                    v62 += 12;
                  }
                  while (v63 < v87);
                }
              }
            }
          }
        }
      }
      break;
    }
    uint64_t v27 = 0;
    a7 = 12;
    a12 = 24;
    while (v90 > *(unsigned __int8 *)(v88 + 12 * v27 + 4))
    {
      uint64_t v28 = re::BucketArray<re::MeshPartDrawContext,128ul>::operator[](*(void *)(v89 + 24 * *(unsigned __int8 *)(v88 + 12 * v27 + 4)), *(unsigned int *)(v88 + 12 * v27));
      if (*(unsigned char *)(v28 + 177))
      {
        a3 = v28;
        if (*(void *)(v28 + 32))
        {
          a5 = (unsigned char *)re::RenderGraphDataStore::tryGet<re::DepthPatchData>(a2[73].i64[0], *(void *)(a2[2].i64[1] + 48));
          if (!a5)
          {
            unint64_t v29 = (unint64_t)"N2re14DepthPatchDataE";
            if (((unint64_t)"N2re14DepthPatchDataE" & 0x8000000000000000) != 0)
            {
              float32x4_t v30 = (unsigned __int8 *)((unint64_t)"N2re14DepthPatchDataE" & 0x7FFFFFFFFFFFFFFFLL);
              uint64_t v31 = 5381;
              do
              {
                unint64_t v29 = v31;
                unsigned int v32 = *v30++;
                uint64_t v31 = (33 * v31) ^ v32;
              }
              while (v32);
            }
            unint64_t v18 = *(void *)(a2->i64[0] + 24);
            uint64_t v33 = a2[73].i64[0];
            unint64_t v34 = (*(void *)(a2[2].i64[1] + 48) + (v29 << 6) + (v29 >> 2) - 0x61C8864680B583E9) ^ v29;
            uint64_t v35 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v33 + 8) + 32))(*(void *)(v33 + 8), 88, 8);
            *(void *)uint64_t v35 = &unk_26E71DE00;
            *(void *)(v35 + 16) = 0;
            *(void *)(v35 + 24) = 0;
            *(_DWORD *)(v35 + 32) = 0;
            *(void *)(v35 + 80) = 0;
            *(_OWORD *)(v35 + 40) = 0u;
            *(_OWORD *)(v35 + 56) = 0u;
            *(_DWORD *)(v35 + 72) = 0;
            *(void *)(v35 + re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = v18;
            re::DynamicArray<re::AABB>::setCapacity((void *)(v35 + 8), 0);
            ++*(_DWORD *)(v35 + 32);
            *(void *)(v35 + 4re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = v18;
            re::DynamicArray<re::Matrix4x4<float>>::setCapacity((void *)(v35 + 48), 0);
            unint64_t v36 = *(void *)(v33 + 64);
            ++*(_DWORD *)(v35 + 72);
            if (!v36
              || (unint64_t v36 = v34 % *(unsigned int *)(v33 + 88),
                  uint64_t v37 = *(unsigned int *)(*(void *)(v33 + 72) + 4 * v36),
                  v37 == 0x7FFFFFFF))
            {
LABEL_21:
              unint64_t v18 = *(unsigned int *)(v33 + 100);
              if (v18 == 0x7FFFFFFF)
              {
                unint64_t v18 = *(unsigned int *)(v33 + 96);
                int v39 = v18;
                if (v18 == *(_DWORD *)(v33 + 88))
                {
                  re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(v33 + 64, 2 * *(_DWORD *)(v33 + 92));
                  unint64_t v36 = v34 % *(unsigned int *)(v33 + 88);
                  int v39 = *(_DWORD *)(v33 + 96);
                }
                *(_DWORD *)(v33 + 96) = v39 + 1;
                uint64_t v40 = *(void *)(v33 + 80);
                int v41 = *(_DWORD *)(v40 + 24 * v18);
              }
              else
              {
                uint64_t v40 = *(void *)(v33 + 80);
                int v41 = *(_DWORD *)(v40 + 24 * v18);
                *(_DWORD *)(v33 + 100) = v41 & 0x7FFFFFFF;
              }
              uint64_t v42 = 24 * v18;
              *(_DWORD *)(v40 + v42) = v41 | 0x80000000;
              *(_DWORD *)(*(void *)(v33 + 80) + v42) = *(_DWORD *)(*(void *)(v33 + 80) + 24 * v18) & 0x80000000 | *(_DWORD *)(*(void *)(v33 + 72) + 4 * v36);
              *(void *)(*(void *)(v33 + 80) + 24 * v18 + re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = v34;
              *(void *)(*(void *)(v33 + 80) + 24 * v18 + 16) = v35;
              *(_DWORD *)(*(void *)(v33 + 72) + 4 * v36) = v18;
              ++*(_DWORD *)(v33 + 92);
              ++*(_DWORD *)(v33 + 104);
              uint64_t v43 = *(void *)(v33 + 80) + 24 * v18;
            }
            else
            {
              uint64_t v38 = *(void *)(v33 + 80);
              while (*(void *)(v38 + 24 * v37 + 8) != v34)
              {
                LODWORD(v37) = *(_DWORD *)(v38 + 24 * v37) & 0x7FFFFFFF;
                if (v37 == 0x7FFFFFFF) {
                  goto LABEL_21;
                }
              }
              uint64_t v43 = v38 + 24 * v37;
            }
            a5 = *(unsigned char **)(v43 + 16);
          }
          re::DynamicArray<re::AABB>::add((_anonymous_namespace_ *)(a5 + 8), *(void *)(a3 + 32));
          re::DynamicArray<re::Matrix4x4<float>>::add((_anonymous_namespace_ *)(a5 + 48), a3 + 64);
        }
      }
      if (++v27 >= v87) {
        goto LABEL_31;
      }
    }
    re::internal::assertLog((re::internal *)6, v26, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, *(unsigned __int8 *)(v88 + 12 * v27 + 4), v90);
    _os_crash();
    __break(1u);
LABEL_61:
    a1 = (re *)re::DrawCallRecorder::allocateDrawCallRecorderGroup((re::DrawCallRecorder *)&a2[83].u32[2], *(const char **)(v18 + 16), v19);
  }
  uint64_t result = v86;
  if (v86)
  {
    if (v88) {
      return (*(uint64_t (**)(void))(*(void *)v86 + 40))();
    }
  }
  return result;
}

#error "233E608A8: call analysis failed (funcsize=57)"

uint64_t re::RenderGraphMeshNodeBase::makeDrawCallsFromMeshParts(uint64_t *a1, uint64_t a2, unint64_t a3, float32x4_t *a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  LODWORD(v210) = a6;
  uint64_t v209 = (unsigned int *)a2;
  uint64_t v253 = *MEMORY[0x263EF8340];
  unint64_t v208 = a3;
  if (!a3) {
    goto LABEL_119;
  }
  BOOL v11 = a1;
  uint64_t v212 = a9;
  unint64_t v12 = (unint64_t)a4;
  unint64_t v13 = a3;
  if (!*(unsigned char *)(a4[1].i64[1] + 209)) {
    goto LABEL_64;
  }
  if (isAutomaticInstancingEnabled(void)::onceToken != -1) {
    goto LABEL_276;
  }
  while (1)
  {
    if (!isAutomaticInstancingEnabled(void)::g_enableAutomaticInstancing)
    {
LABEL_64:
      unint64_t v9 = (unint64_t)v237;
      unint64_t v51 = 12 * v13;
      unint64_t v52 = (unsigned __int8 *)(v209 + 1);
      unint64_t v13 = 24;
      while (1)
      {
        if (v212)
        {
          uint64_t v58 = (uint64_t *)re::Slice<re::FilteredMeshPass>::operator[](*v11, v11[1], *v52);
          uint64_t v59 = (uint64_t *)re::BucketArray<re::MeshPartDrawContext,128ul>::operator[](*v58, *((unsigned int *)v52 - 1));
          uint64_t v60 = v59[2];
          uint64_t v61 = v60 ? *(void *)(v60 + 512) : 0;
          uint64_t v62 = *v59;
          uint64_t v63 = *(void *)(a4->i64[0] + 24);
          char v53 = 1;
          v221[0] = 1;
          int v222 = *((_DWORD *)v52 + 1);
          re::DrawCallMeshPartsDetails::DrawCallMeshPartsDetails((uint64_t)&v229, v63, v62, v61, (uint64_t)v221);
          int v64 = re::DrawCallRecorderGroup::recordDrawCallMeshPartsDetails(re::DrawCallMeshPartsDetails const&)::nextIndex++;
          *(_DWORD *)int v239 = v64;
          re::HashTable<unsigned int,re::DrawCallMeshPartsDetails,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::add(v212 + 112, v239, &v229);
          unint64_t v10 = *(unsigned int *)v239;
          re::DynamicArray<re::DrawCallMeshPartsDetails::PerMeshPartDetails>::deinit((uint64_t)&v229 + 8);
          BOOL v11 = a1;
        }
        else
        {
          char v53 = 0;
        }
        unint64_t v54 = *v52;
        unint64_t v55 = v11[1];
        if (v55 <= v54) {
          break;
        }
        uint64_t v56 = re::BucketArray<re::MeshPartDrawContext,128ul>::operator[](*(void *)(*v11 + 24 * *v52), *((unsigned int *)v52 - 1));
        re::FrameContext::FrameContext((re::FrameContext *)&v229, *(re::Allocator **)(a4->i64[0] + 24));
        v218[0] = v53;
        if (v212) {
          int v219 = v10;
        }
        unsigned __int8 v220 = v52[1];
        uint64_t v57 = re::addDrawCall(a5, v56, (uint64_t)&v229, v210, (uint64_t)v218);
        re::BufferTable::~BufferTable((re::BufferTable *)&v238);
        re::TextureTableImpl<NS::SharedPtr<MTL::Texture>>::~TextureTableImpl(v237);
        re::DynamicArray<re::BufferSlice>::deinit((uint64_t)&v233 + 8);

        if ((void)v232)
        {

          *(void *)&long long v232 = 0;
        }
        if (*((void *)&v231 + 1))
        {

          *((void *)&v231 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
        }

        if (!*(unsigned char *)(a5 + 320))
        {
          LOBYTE(v229) = *v52;
          (*(void (**)(uint64_t, uint64_t, uint64_t, long long *))(*(void *)(a5 + 280) + 16))(a5 + 280, v57, v56, &v229);
        }
        v52 += 12;
        v51 -= 12;
        BOOL v11 = a1;
        if (!v51) {
          goto LABEL_119;
        }
      }
LABEL_264:
      re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v54, v55);
      _os_crash();
      __break(1u);
LABEL_265:
      re::internal::assertLog((re::internal *)6, v154, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v159, v160);
      _os_crash();
      __break(1u);
LABEL_266:
      re::internal::assertLog((re::internal *)6, v15, "assertion failure: '%s' (%s:line %i) Index out of range. fromInclusive = %zu, size = %zu", "fromInclusive <= size()", "range", 241, v51, v10);
      _os_crash();
      __break(1u);
LABEL_267:
      re::internal::assertLog((re::internal *)6, v15, "assertion failure: '%s' (%s:line %i) Index out of range. toExclusive = %zu, size = %zu", "toExclusive <= size()", "range", 242, v51, v10);
      _os_crash();
      __break(1u);
LABEL_268:
      re::internal::assertLog((re::internal *)6, v15, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v74, v75);
      _os_crash();
      __break(1u);
      goto LABEL_269;
    }
    if (v13 >= 0x1555555555555556)
    {
      re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 12, v13);
      _os_crash();
      __break(1u);
LABEL_278:
      re::internal::assertLog((re::internal *)4, v15, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
      _os_crash();
      __break(1u);
LABEL_279:
      re::internal::assertLog((re::internal *)6, v15, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v65, v13);
      _os_crash();
      __break(1u);
      goto LABEL_280;
    }
    uint64_t v197 = *(void *)(*(void *)v12 + 24);
    uint64_t v14 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)v197 + 32))(v197, 12 * v13, 4);
    if (!v14) {
      goto LABEL_278;
    }
    uint64_t v16 = v14;
    long long v17 = a1;
    long long v198 = (unsigned int *)v14;
    if (v13 == 1) {
      break;
    }
    uint64_t v18 = 1;
    uint64_t v19 = v14;
    do
    {
      *(unsigned char *)(v19 + re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = 0;
      *(void *)uint64_t v19 = 0;
      v19 += 12;
      ++v18;
    }
    while (v13 != v18);
    unsigned int v20 = 0;
    unsigned int v21 = 0;
    *(unsigned char *)(v19 + re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = 0;
    *(void *)uint64_t v19 = 0;
    if (v13 < 2) {
      goto LABEL_83;
    }
    unsigned int v21 = 0;
    unsigned int v20 = 0;
    unint64_t v9 = 2;
    unint64_t v12 = 1;
    while (1)
    {
      unint64_t v10 = v20;
      if (v13 <= v20) {
        break;
      }
      if (!v209) {
        goto LABEL_41;
      }
      unint64_t v22 = LOBYTE(v209[3 * v12 + 1]);
      uint64_t v23 = &v209[3 * v20];
      int v25 = *((unsigned __int8 *)v23 + 4);
      uint64_t v24 = (unsigned __int8 *)(v23 + 1);
      if (v22 != v25) {
        goto LABEL_41;
      }
      unint64_t v26 = v17[1];
      if (v26 <= v22) {
        goto LABEL_273;
      }
      uint64_t v27 = re::BucketArray<re::MeshPartDrawContext,128ul>::operator[](*(void *)(*a1 + 24 * LOBYTE(v209[3 * v12 + 1])), v209[3 * v12]);
      unint64_t v29 = *v24;
      unint64_t v30 = a1[1];
      if (v30 <= v29) {
        goto LABEL_274;
      }
      uint64_t v31 = v27;
      uint64_t v32 = re::BucketArray<re::MeshPartDrawContext,128ul>::operator[](*(void *)(*a1 + 24 * *v24), v209[3 * v20]);
      long long v17 = a1;
      uint64_t v33 = *(void **)(v31 + 216);
      uint64_t v16 = (uint64_t)v198;
      if (v33)
      {
        if (*v33) {
          goto LABEL_41;
        }
      }
      unint64_t v34 = *(void **)(v32 + 216);
      if (v34)
      {
        if (*v34) {
          goto LABEL_41;
        }
      }
      uint64_t v35 = *(void *)(v31 + 16);
      if (*(int *)(v35 + 540) > 1) {
        goto LABEL_41;
      }
      uint64_t v36 = *(void *)(v32 + 16);
      long long v17 = a1;
      if (*(int *)(v36 + 540) > 1) {
        goto LABEL_41;
      }
      long long v17 = a1;
      if (*(_DWORD *)(v31 + 56) != *(_DWORD *)(v32 + 56)) {
        goto LABEL_41;
      }
      BOOL v37 = v35 == v36 && BYTE1(v209[3 * v12 + 1]) == BYTE1(v209[3 * v20 + 1]);
      long long v17 = a1;
      if (!v37) {
        goto LABEL_41;
      }
      if (*(_DWORD *)(v31 + 180) != *(_DWORD *)(v32 + 180)) {
        goto LABEL_41;
      }
      if (*(void *)(v31 + 40) != *(void *)(v32 + 40)) {
        goto LABEL_41;
      }
      unint64_t v15 = *(unsigned int *)(v31 + 144);
      if (v15 != *(_DWORD *)(v32 + 144)) {
        goto LABEL_41;
      }
      long long v17 = a1;
      if (((*(unsigned __int8 *)(v31 + 60) << 24) | (*(unsigned __int8 *)(v31 + 61) << 16) | *(unsigned __int16 *)(v31 + 62)) != ((*(unsigned __int8 *)(v32 + 60) << 24) | (*(unsigned __int8 *)(v32 + 61) << 16) | *(unsigned __int16 *)(v32 + 62))) {
        goto LABEL_41;
      }
      if (v15 == -1) {
        goto LABEL_41;
      }
      uint64_t v38 = *(float32x4_t **)(v31 + 48);
      int v39 = *(float32x4_t **)(v32 + 48);
      uint64_t v40 = re::FixedArray<std::unique_ptr<re::MaterialTechnique,std::function<void ()(re::MaterialTechnique*)>>>::operator[](v38[2].i64[1] + 72, v15);
      long long v17 = a1;
      if (!*(void *)v40) {
        goto LABEL_41;
      }
      if (!*(void *)(**(void **)v40 + 2704)) {
        goto LABEL_41;
      }
      if (v38[2].i64[1] != v39[2].i64[1]) {
        goto LABEL_41;
      }
      if (v38[3].i64[0] != v39[3].i64[0]) {
        goto LABEL_41;
      }
      if (v38[3].i64[1] != v39[3].i64[1]) {
        goto LABEL_41;
      }
      if (v38[4].i64[1] != v39[4].i64[1]) {
        goto LABEL_41;
      }
      if (v38[4].i64[0] != v39[4].i64[0]) {
        goto LABEL_41;
      }
      if (v38[9].f32[2] != v39[9].f32[2]) {
        goto LABEL_41;
      }
      if (v38[9].f32[3] != v39[9].f32[3]) {
        goto LABEL_41;
      }
      if (v38[10].f32[0] != v39[10].f32[0]) {
        goto LABEL_41;
      }
      LOBYTE(v229) = 0;
      uint64_t v44 = re::CombinedDynamicFunctionConstants::hash(&v38[5].u8[8], (unsigned __int8 *)&v229);
      v239[0] = 0;
      uint64_t v45 = re::CombinedDynamicFunctionConstants::hash(&v39[5].u8[8], v239);
      long long v17 = a1;
      if (v44 != v45) {
        goto LABEL_41;
      }
      if (v38[7].u16[4] != v39[7].u16[4]) {
        goto LABEL_41;
      }
      if (v38[7].u16[5] != v39[7].u16[5]) {
        goto LABEL_41;
      }
      BOOL v46 = re::Optional<re::PortalPlane>::operator==(v38 + 11, v39 + 11);
      long long v17 = a1;
      if (!v46) {
        goto LABEL_41;
      }
      uint64_t v47 = v38[5].i64[0];
      uint64_t v48 = v39[5].i64[0];
      if (v47 != v48)
      {
        if (!v47) {
          goto LABEL_41;
        }
        if (!v48) {
          goto LABEL_41;
        }
        long long v17 = a1;
        if (((*(void *)(v47 + 248)
             + (*(void *)(v47 + 72) << 6)
             + (*(void *)(v47 + 72) >> 2)
             - 0x61C8864680B583E9) ^ *(void *)(v47 + 72)) != ((*(void *)(v48 + 248)
                                                                 + (*(void *)(v48 + 72) << 6)
                                                                 + (*(void *)(v48 + 72) >> 2)
                                                                 - 0x61C8864680B583E9) ^ *(void *)(v48 + 72)))
          goto LABEL_41;
      }
      uint64_t v49 = v38[8].i8[0] ? v38[8].i64[1] : 0;
      uint64_t v50 = v39[8].i8[0] ? v39[8].i64[1] : 0;
      long long v17 = a1;
      uint64_t v16 = (uint64_t)v198;
      if (v49 != v50)
      {
LABEL_41:
        unint64_t v13 = v21;
        if (v208 <= v21) {
          goto LABEL_270;
        }
        char v41 = v209[3 * v20 + 1];
        uint64_t v42 = v16 + 12 * v21;
        *(_DWORD *)uint64_t v42 = v20;
        unsigned int v20 = v9 - 1;
        ++v21;
        *(_DWORD *)(v42 + 4) = v9 - 1;
        *(unsigned char *)(v42 + re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = v41;
      }
      unint64_t v12 = v9;
      unint64_t v13 = v208;
      BOOL v43 = v208 > v9;
      unint64_t v9 = (v9 + 1);
      if (!v43) {
        goto LABEL_83;
      }
    }
LABEL_269:
    re::internal::assertLog((re::internal *)6, v15, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v10, v13);
    _os_crash();
    __break(1u);
LABEL_270:
    uint64_t v241 = 0;
    long long v232 = 0u;
    long long v233 = 0u;
    long long v230 = 0u;
    long long v231 = 0u;
    long long v229 = 0u;
    unint64_t v12 = &_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)int v239 = 136315906;
    *(void *)&v239[4] = "operator[]";
    *(_WORD *)&v239[12] = 1024;
    *(_DWORD *)&v239[14] = 468;
    *(_WORD *)&v239[18] = 2048;
    *(void *)uint64_t v240 = v13;
    *(_WORD *)&v240[8] = 2048;
    *(void *)&v240[10] = v208;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_271:
    re::internal::assertLog((re::internal *)6, v154, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, v12, v171);
    _os_crash();
    __break(1u);
LABEL_272:
    re::internal::assertLog((re::internal *)6, v154, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, v12, v172);
    _os_crash();
    __break(1u);
LABEL_273:
    re::internal::assertLog((re::internal *)6, v15, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v22, v26);
    _os_crash();
    __break(1u);
LABEL_274:
    re::internal::assertLog((re::internal *)6, v28, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v29, v30);
    _os_crash();
    __break(1u);
LABEL_275:
    re::internal::assertLog((re::internal *)6, v154, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, v12, v173);
    _os_crash();
    __break(1u);
LABEL_276:
    dispatch_once(&isAutomaticInstancingEnabled(void)::onceToken, &__block_literal_global_42);
    BOOL v11 = a1;
  }
  unsigned int v20 = 0;
  unsigned int v21 = 0;
  *(unsigned char *)(v14 + re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = 0;
  *(void *)uint64_t v14 = 0;
LABEL_83:
  uint64_t v65 = v20;
  if (v13 <= v20) {
    goto LABEL_279;
  }
  unint64_t v9 = v13;
  unint64_t v13 = v21;
  char v66 = v209;
  if (v9 <= v21)
  {
LABEL_280:
    uint64_t v241 = 0;
    long long v232 = 0u;
    long long v233 = 0u;
    long long v230 = 0u;
    long long v231 = 0u;
    long long v229 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)int v239 = 136315906;
    *(void *)&v239[4] = "operator[]";
    *(_WORD *)&v239[12] = 1024;
    *(_DWORD *)&v239[14] = 468;
    *(_WORD *)&v239[18] = 2048;
    *(void *)uint64_t v240 = v13;
    *(_WORD *)&v240[8] = 2048;
    *(void *)&v240[10] = v9;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_281;
  }
  char v67 = v209[3 * v20 + 1];
  uint64_t v68 = v16 + 12 * v21;
  *(_DWORD *)uint64_t v68 = v20;
  *(_DWORD *)(v68 + 4) = v9;
  *(unsigned char *)(v68 + re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = v67;
  if (v9 == -1)
  {
LABEL_281:
    uint64_t v241 = 0;
    long long v232 = 0u;
    long long v233 = 0u;
    long long v230 = 0u;
    long long v231 = 0u;
    long long v229 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)int v239 = 136315906;
    *(void *)&v239[4] = "slice";
    *(_WORD *)&v239[12] = 1024;
    *(_DWORD *)&v239[14] = 502;
    *(_WORD *)&v239[18] = 2048;
    *(void *)uint64_t v240 = 0;
    *(_WORD *)&v240[8] = 2048;
    *(void *)&v240[10] = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_282;
  }
  unint64_t v10 = v9;
  unint64_t v69 = v21 + 1;
  if (v9 < v69)
  {
LABEL_282:
    re::internal::assertLog((re::internal *)7, v15, "assertion failure: '%s' (%s:line %i) Invalid count. index = %zu, count = %zu, array size = %zu", "endIndexExclusive <= m_size", "slice", 512, 0, v69, v10);
    _os_crash();
    __break(1u);
    goto LABEL_283;
  }
  if (v21 != -1)
  {
    uint64_t v70 = v198;
    unint64_t v71 = &v198[3 * v69];
    uint64_t v199 = a5 + 280;
    uint64_t v200 = v71;
    unint64_t v13 = a5 + 168;
    unint64_t v9 = a5 + 224;
    do
    {
      unint64_t v51 = *v70;
      if (v10 < v51) {
        goto LABEL_266;
      }
      unint64_t v72 = v70[1];
      if (v10 < v72) {
        goto LABEL_267;
      }
      unint64_t v10 = 12;
      simd_float4x4 v73 = &v66[3 * v51];
      unint64_t v74 = *((unsigned __int8 *)v73 + 4);
      unint64_t v75 = a1[1];
      if (v75 <= v74) {
        goto LABEL_268;
      }
      v204 = &v66[3 * v51];
      int v206 = v70;
      unint64_t v76 = v72 - v51;
      unsigned __int8 v202 = *((unsigned char *)v73 + 4);
      uint64_t v203 = *(void *)(*a1 + 24 * v202);
      uint64_t v77 = re::BucketArray<re::MeshPartDrawContext,128ul>::operator[](v203, *v73);
      char v78 = (__n128 *)v77;
      if (v212)
      {
        unint64_t v216 = v72 - v51;
        uint64_t v201 = (__n128 *)v77;
        *((void *)&v231 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
        long long v230 = 0uLL;
        LODWORD(v23re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
        *(void *)&long long v229 = v197;
        *((void *)&v229 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = v197;
        re::DynamicArray<re::DrawCallMeshPartsDetails::PerMeshPartDetails>::setCapacity((void *)&v229 + 1, 0);
        LODWORD(v23re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = v231 + 1;
        if (v72 != v51)
        {
          uint64_t v94 = 12 * v72 - 12 * v51;
          uint64_t v95 = &v209[3 * v51 + 2];
          while (1)
          {
            unint64_t v96 = *((unsigned __int8 *)v95 - 4);
            unint64_t v97 = a1[1];
            if (v97 <= v96) {
              break;
            }
            unsigned int v98 = *v95;
            char v99 = (uint64_t *)re::BucketArray<re::MeshPartDrawContext,128ul>::operator[](*(void *)(*a1 + 24 * *((unsigned __int8 *)v95 - 4)), *(v95 - 2));
            uint64_t v100 = v99[2];
            if (v100) {
              uint64_t v101 = *(void *)(v100 + 512);
            }
            else {
              uint64_t v101 = 0;
            }
            uint64_t v102 = *v99;
            v246[0] = 1;
            *(_DWORD *)&v246[4] = v98;
            re::DrawCallMeshPartsDetails::appendPerMeshPartDetails((uint64_t)&v229, v102, v101, (uint64_t)v246);
            v95 += 3;
            v94 -= 12;
            if (!v94) {
              goto LABEL_115;
            }
          }
LABEL_283:
          re::internal::assertLog((re::internal *)6, v93, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v96, v97);
          _os_crash();
          __break(1u);
        }
LABEL_115:
        int v103 = re::DrawCallRecorderGroup::recordDrawCallMeshPartsDetails(re::DrawCallMeshPartsDetails const&)::nextIndex++;
        v226.i32[0] = v103;
        re::HashTable<unsigned int,re::DrawCallMeshPartsDetails,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::add(v212 + 112, &v226, &v229);
        __int32 v104 = v226.i32[0];
        re::DynamicArray<re::DrawCallMeshPartsDetails::PerMeshPartDetails>::deinit((uint64_t)&v229 + 8);
        uint64_t v79 = a4->i64[0];
        unint64_t v76 = v216;
        if (v216 > 1)
        {
          v239[0] = 1;
          *(_DWORD *)&v239[4] = v104;
          char v78 = v201;
          goto LABEL_95;
        }
        LOBYTE(v24re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 1;
        HIDWORD(v24re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = v104;
        unint64_t v71 = v200;
        char v78 = v201;
      }
      else
      {
        uint64_t v79 = a4->i64[0];
        if (v76 > 1)
        {
          v239[0] = 0;
LABEL_95:
          v239[8] = BYTE1(v66[3 * v51 + 1]);
          uint64_t v80 = 0;
          uint64_t v215 = *(unsigned int *)(re::addInstancedDrawCall((re::DrawTable *)a5, v78, v79, v210, v76, (uint64_t)v239) + 76);
          unsigned int v81 = 1;
          do
          {
            uint64_t v82 = re::BucketArray<re::MeshPartDrawContext,128ul>::operator[](v203, v204[3 * v80]);
            unint64_t v83 = v80 + v215;
            uint64_t v84 = (_OWORD *)re::BucketArray<re::Matrix4x4<float>,128ul>::operator[](a5 + 56, v83);
            long long v85 = *(_OWORD *)(v82 + 112);
            long long v87 = *(_OWORD *)(v82 + 64);
            long long v86 = *(_OWORD *)(v82 + 80);
            _OWORD v84[2] = *(_OWORD *)(v82 + 96);
            v84[3] = v85;
            *uint64_t v84 = v87;
            v84[1] = v86;
            uint64_t v88 = *(void *)(*(void *)(v82 + 48) + 80);
            if (v88) {
              uint64_t v89 = v88 + 152;
            }
            else {
              uint64_t v89 = 0;
            }
            *(void *)re::BucketArray<re::ConstantTable const*,128ul>::operator[](a5 + 112, v83) = v89;
            float v90 = *(float *)(v82 + 192) * (float)*(int *)(v82 + 184);
            *(float *)re::BucketArray<unsigned int,128ul>::operator[](v13, v83) = v90;
            int v91 = *(_DWORD *)(v82 + 200);
            *(_DWORD *)re::BucketArray<unsigned int,128ul>::operator[](v9, v83) = v91;
            uint64_t v80 = v81;
            BOOL v43 = v76 > v81++;
          }
          while (v43);
          unint64_t v10 = v208;
          char v66 = v209;
          unint64_t v71 = v200;
          if (*(unsigned char *)(a5 + 320)) {
            goto LABEL_106;
          }
          LOBYTE(v229) = v202;
          long long v92 = *(void (**)(void))(*(void *)v199 + 16);
LABEL_105:
          v92();
          goto LABEL_106;
        }
        LOBYTE(v24re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
      }
      LOBYTE(v242) = BYTE1(v66[3 * v51 + 1]);
      re::addDrawCall(a5, (uint64_t)v78, v79, v210, (uint64_t)&v241);
      unint64_t v10 = v208;
      if (!*(unsigned char *)(a5 + 320))
      {
        LOBYTE(v229) = v202;
        long long v92 = *(void (**)(void))(*(void *)v199 + 16);
        goto LABEL_105;
      }
LABEL_106:
      uint64_t v70 = v206 + 3;
    }
    while (v206 + 3 != v71);
  }
  (*(void (**)(uint64_t, unsigned int *))(*(void *)v197 + 40))(v197, v198);
LABEL_119:
  uint64_t result = re::RenderGraphDataStore::tryGet<re::CameraData>(a4[73].i64[0], *(void *)(a4[2].i64[1] + 48));
  if (!result) {
    return result;
  }
  uint64_t v106 = re::RenderGraphDataStore::get<re::CameraData>(a4[73].i64[0], *(void *)(a4[2].i64[1] + 48));
  uint64_t v241 = 0;
  unint64_t v242 = 0;
  int v243 = 1;
  unint64_t v244 = 0;
  unint64_t v245 = 0;
  *(void *)&v239[8] = 0;
  *(void *)int v239 = 0;
  *(_DWORD *)&v239[16] = 1;
  uint64_t v107 = &v240[4];
  *(void *)&v240[12] = 0;
  *(void *)&v240[4] = 0;
  re::RenderGraphContext::rtAttachmentHandles((uint64_t)a4, a4[2].u64[1], (uint64_t)v239);
  if (v239[16]) {
    uint64_t v109 = (uint64_t *)&v240[4];
  }
  else {
    uint64_t v109 = *(uint64_t **)&v240[12];
  }
  if (*(void *)&v239[8])
  {
    LODWORD(v5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
    int v110 = &v109[2 * *(void *)&v239[8]];
    uint64_t v111 = v209;
    do
    {
      v228[0] = *v109;
      v228[1] = v109[1];
      uint64_t v108 = (_anonymous_namespace_ *)re::RenderGraphResourceDescriptions::targetDescription(*(re **)(a4[73].i64[1] + 136), v228);
      unint64_t v51 = (*((unsigned char *)v108 + 104) != 0) | v51;
      v109 += 2;
    }
    while (v109 != v110);
  }
  else
  {
    unint64_t v51 = 0;
    uint64_t v111 = v209;
  }
  if (a4[65].i32[3] || (__int32 v112 = a4[7].i32[0]) != 0)
  {
    uint64_t v113 = v106;
    if ((v239[16] & 1) == 0) {
      uint64_t v107 = *(unsigned char **)&v240[12];
    }
    if (*(void *)&v239[8])
    {
      uint64_t v114 = &v107[16 * *(void *)&v239[8]];
      do
      {
        unint64_t v115 = *((unsigned int *)v107 + 2);
        if (a4[65].i32[3])
        {
          if (a4[64].i64[0])
          {
            unint64_t v116 = 0x94D049BB133111EBLL
                 * ((0xBF58476D1CE4E5B9 * (v115 ^ (v115 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v115 ^ (v115 >> 30))) >> 27));
            uint64_t v117 = *(unsigned int *)(a4[64].i64[1] + 4 * ((v116 ^ (v116 >> 31)) % a4[65].u32[2]));
            if (v117 != 0x7FFFFFFF)
            {
              uint64_t v118 = a4[65].i64[0];
              while (*(_DWORD *)(v118 + 112 * v117 + 4) != v115)
              {
                LODWORD(v117) = *(_DWORD *)(v118 + 112 * v117) & 0x7FFFFFFF;
                if (v117 == 0x7FFFFFFF) {
                  goto LABEL_163;
                }
              }
              goto LABEL_146;
            }
          }
        }
        else
        {
          uint64_t v119 = a4[7].i64[0];
          if (v119)
          {
            uint64_t v120 = 112 * v119;
            unint64_t v121 = a4 + 8;
            while (v121->i32[0] != v115)
            {
              v121 += 7;
              v120 -= 112;
              if (!v120) {
                goto LABEL_163;
              }
            }
LABEL_146:
            if (v241)
            {
              char v122 = v243;
              if (v243)
              {
                if (v242 - 8 < 0xFFFFFFFFFFFFFFF7)
                {
                  unint64_t v123 = v242 + 1;
                  unint64_t v125 = 16;
LABEL_156:
                  if (v125 <= v123) {
                    unint64_t v126 = v123;
                  }
                  else {
                    unint64_t v126 = v125;
                  }
                  uint64_t v108 = (_anonymous_namespace_ *)re::DynamicOverflowArray<unsigned int,8ul>::setCapacity(&v241, v126);
                  char v122 = v243;
                }
              }
              else
              {
                unint64_t v123 = v242 + 1;
                if (v242 >= v244 && v244 < v123)
                {
                  unint64_t v125 = 2 * v244;
                  goto LABEL_156;
                }
              }
            }
            else
            {
              uint64_t v108 = (_anonymous_namespace_ *)re::DynamicOverflowArray<unsigned int,8ul>::setCapacity(&v241, v242 + 1);
              char v122 = v243 + 2;
              v243 += 2;
            }
            BOOL v37 = (v122 & 1) == 0;
            long long v127 = v245;
            unint64_t v128 = v242;
            if (!v37) {
              long long v127 = &v244;
            }
            *((_DWORD *)v127 + v242) = v115;
            unint64_t v242 = v128 + 1;
            v243 += 2;
          }
        }
LABEL_163:
        v107 += 16;
      }
      while (v107 != v114);
    }
    __int32 v112 = v242 != 0;
    uint64_t v111 = v209;
    uint64_t v106 = v113;
  }
  LODWORD(a5) = v112;
  if (((v112 | v51) & 1) == 0) {
    goto LABEL_256;
  }
  int v129 = a4;
  int v130 = *(const char **)(a4[2].i64[1] + 24);
  unint64_t v9 = *(void *)(v106 + 48);
  unint64_t v131 = re::Hash<re::DynamicString>::operator()((uint64_t)v246, (uint64_t)&v229);
  uint64_t v133 = 0x7FFFFFFFLL;
  if (a4[67].i64[0])
  {
    uint64_t v134 = *(unsigned int *)(a4[67].i64[1] + 4 * (v131 % a4[68].u32[2]));
    if (v134 != 0x7FFFFFFF)
    {
      uint64_t v135 = a4[68].i64[0];
      uint64_t v133 = 0x7FFFFFFFLL;
      while (!re::DynamicString::operator==(v135 + 224 * v134 + 16, (uint64_t)&v229))
      {
        uint64_t v134 = *(_DWORD *)(v135 + 224 * v134 + 8) & 0x7FFFFFFF;
        if (v134 == 0x7FFFFFFF) {
          goto LABEL_173;
        }
      }
      uint64_t v133 = v134;
    }
  }
LABEL_173:
  unint64_t v136 = (_anonymous_namespace_ *)v229;
  if (void)v229 && (BYTE8(v229)) {
    unint64_t v136 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v229 + 40))();
  }
  long long v137 = a4 + 67;
  if (v133 != 0x7FFFFFFF) {
    goto LABEL_194;
  }
  char v138 = *(unsigned char *)(v106 + 512);
  long long v230 = 0u;
  long long v231 = 0u;
  long long v232 = 0u;
  long long v233 = 0u;
  uint64_t v234 = 0x1600000017;
  char v235 = v138;
  char v236 = 0;
  *(void *)&long long v229 = 1;
  DWORD2(v229) = 1;
  long long v139 = (_anonymous_namespace_ *)re::DynamicInlineArray<REFrameAnalysisBottleneck,2ul>::ensureCapacity(1uLL, v132);
  uint64_t v140 = v229;
  long long v141 = &v230 + 5 * v229;
  *long long v141 = 0u;
  v141[1] = 0u;
  v141[2] = 0u;
  v141[3] = 0u;
  *((void *)v141 + re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = 0x1600000017;
  *((unsigned char *)v141 + 72) = v138;
  *((unsigned char *)v141 + 73) = 0;
  *(void *)&long long v229 = v140 + 1;
  ++DWORD2(v229);
  unint64_t v142 = re::Hash<re::DynamicString>::operator()((uint64_t)&v226, (uint64_t)v246);
  unint64_t v143 = v142;
  uint64_t v212 = v106;
  if (!v137->i64[0])
  {
    LODWORD(v144) = 0;
    goto LABEL_184;
  }
  unint64_t v144 = v142 % a4[68].u32[2];
  uint64_t v145 = *(unsigned int *)(a4[67].i64[1] + 4 * v144);
  if (v145 == 0x7FFFFFFF)
  {
LABEL_184:
    uint64_t v147 = v129[69].u32[1];
    if (v147 == 0x7FFFFFFF)
    {
      uint64_t v147 = v129[69].u32[0];
      __int32 v148 = v147;
      if (v147 == v129[68].i32[2])
      {
        re::HashTable<re::DynamicString,re::DynamicInlineArray<re::FixedOccupancyGrid,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity((uint64_t)v137, 2 * v129[68].i32[3]);
        LODWORD(v144) = v143 % v129[68].u32[2];
        __int32 v148 = v129[69].i32[0];
      }
      v129[69].i32[0] = v148 + 1;
      uint64_t v149 = v129[68].i64[0];
      int v150 = *(_DWORD *)(v149 + 224 * v147 + 8);
    }
    else
    {
      uint64_t v149 = v129[68].i64[0];
      int v150 = *(_DWORD *)(v149 + 224 * v147 + 8);
      v129[69].i32[1] = v150 & 0x7FFFFFFF;
    }
    *(_DWORD *)(v149 + 224 * v147 + re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = v150 | 0x80000000;
    *(_DWORD *)(v129[68].i64[0] + 224 * v147 + re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = *(_DWORD *)(v129[68].i64[0] + 224 * v147 + 8) & 0x80000000 | *(_DWORD *)(v129[67].i64[1] + 4 * v144);
    *(void *)(v129[68].i64[0] + 224 * v147) = v143;
    re::DynamicString::DynamicString((re::DynamicString *)(v129[68].i64[0] + 224 * v147 + 16), (const re::DynamicString *)v246);
    uint64_t v151 = v129[68].i64[0];
    *(void *)(v151 + 224 * v147 + 4re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = 0;
    uint64_t v152 = v151 + 224 * v147 + 48;
    *(_DWORD *)(v152 + re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = 0;
    re::DynamicInlineArray<re::FixedOccupancyGrid,2ul>::copy((void *)v152, (uint64_t *)&v229);
    *(_DWORD *)(v129[67].i64[1] + 4 * v144) = v147;
    ++v129[68].i32[3];
    ++v129[69].i32[2];
    goto LABEL_190;
  }
  uint64_t v146 = a4[68].i64[0];
  while (!re::DynamicString::operator==(v146 + 224 * v145 + 16, (uint64_t)v246))
  {
    uint64_t v145 = *(_DWORD *)(v146 + 224 * v145 + 8) & 0x7FFFFFFF;
    if (v145 == 0x7FFFFFFF)
    {
      int v129 = a4;
      goto LABEL_184;
    }
  }
LABEL_190:
  unint64_t v136 = *(_anonymous_namespace_ **)v246;
  if (*(void *)v246 && (v246[8] & 1) != 0) {
    unint64_t v136 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(**(void **)v246 + 40))();
  }
  int v129 = a4;
  uint64_t v111 = v209;
LABEL_194:
  unint64_t v153 = re::Hash<re::DynamicString>::operator()((uint64_t)v246, (uint64_t)&v229);
  uint64_t v155 = 0x7FFFFFFFLL;
  if (v137->i64[0])
  {
    uint64_t v156 = *(unsigned int *)(v129[67].i64[1] + 4 * (v153 % v129[68].u32[2]));
    if (v156 != 0x7FFFFFFF)
    {
      uint64_t v157 = v129[68].i64[0];
      uint64_t v155 = 0x7FFFFFFFLL;
      while (!re::DynamicString::operator==(v157 + 224 * v156 + 16, (uint64_t)&v229))
      {
        uint64_t v156 = *(_DWORD *)(v157 + 224 * v156 + 8) & 0x7FFFFFFF;
        if (v156 == 0x7FFFFFFF) {
          goto LABEL_201;
        }
      }
      uint64_t v155 = v156;
    }
  }
LABEL_201:
  uint64_t v158 = v129[68].i64[0];
  if (void)v229 && (BYTE8(v229)) {
    (*(void (**)(void))(*(void *)v229 + 40))();
  }
  if (v208)
  {
    unint64_t v10 = (unint64_t)&v111[3 * v208];
    uint64_t v210 = v106 + 64;
    uint64_t v207 = (unint64_t *)(v158 + 224 * v155 + 48);
    unint64_t v208 = v106 + 144;
    uint64_t v205 = v158 + 224 * v155 + 64;
    unint64_t v13 = 24;
    int32x4_t v217 = vdupq_n_s32(0x7F800000u);
    do
    {
      unint64_t v159 = *((unsigned __int8 *)v111 + 4);
      unint64_t v160 = a1[1];
      if (v160 <= v159) {
        goto LABEL_265;
      }
      uint64_t v161 = re::BucketArray<re::MeshPartDrawContext,128ul>::operator[](*(void *)(*a1 + 24 * *((unsigned __int8 *)v111 + 4)), *v111);
      uint64_t v162 = *(re::MaterialParameterTableLayers **)(v161 + 48);
      if (v162)
      {
        uint64_t v154 = *(unsigned int *)(v161 + 144);
        if (v154 != -1)
        {
          uint64_t v163 = *(float32x4_t **)(v161 + 32);
          TechniqueAtIndex = (uint64_t *)re::MaterialParameterTableLayers::getTechniqueAtIndex(v162, v154);
          if (TechniqueAtIndex)
          {
            uint64_t v165 = *TechniqueAtIndex;
            if (*TechniqueAtIndex)
            {
              if ((*(unsigned char *)(v161 + 177) & 2) == 0)
              {
                unint64_t v166 = *(void *)(v165 + 2480);
                unint64_t v167 = (v166 & 1) != 0 ? v166 >> 1 : v166 >> 1;
                int v168 = *(_DWORD *)(v165 + 108);
                if (v167 && v168 != 0)
                {
                  if (re::MeshPart::computeTriangleCount(*(re::MeshPart **)(v161 + 16)))
                  {
                    uint32x4_t v170 = (uint32x4_t)vcgtq_f32(*v163, v163[1]);
                    v170.i32[3] = v170.i32[2];
                    if ((vmaxvq_u32(v170) & 0x80000000) == 0)
                    {
                      re::AABB::transform(v163, (float32x4_t *)(v161 + 64), (uint64_t)&v226);
                      if (v9)
                      {
                        unint64_t v12 = 0;
                        uint64_t v209 = v111;
                        uint64_t v212 = v106;
                        while (1)
                        {
                          unint64_t v171 = *(void *)(v106 + 48);
                          if (v171 <= v12) {
                            goto LABEL_271;
                          }
                          v224[0] = v226;
                          v224[1] = v227;
                          unint64_t v172 = *(void *)(v106 + 128);
                          if (v172 <= v12) {
                            goto LABEL_272;
                          }
                          re::RenderCamera::transformWorldBoundsToScreen((float32x4_t *)(v210 + 32 * v12), v224, (const re::Projection *)(v208 + (v12 << 6)), (uint64_t)v225);
                          if (v51)
                          {
                            unint64_t v173 = *v207;
                            if (*v207 <= v12) {
                              goto LABEL_275;
                            }
                            re::FixedOccupancyGrid::setOccupied(v205 + 80 * v12, (uint64_t *)v225, (*(_DWORD *)(v161 + 180) >> 17) & 3);
                          }
                          if (a5)
                          {
                            v174 = (unsigned int *)((v243 & 1) != 0 ? &v244 : v245);
                            if (v242) {
                              break;
                            }
                          }
LABEL_253:
                          ++v12;
                          uint64_t v111 = v209;
                          uint64_t v106 = v212;
                          unint64_t v13 = 24;
                          if (v12 == v9) {
                            goto LABEL_254;
                          }
                        }
                        uint64_t v175 = &v174[v242];
                        while (2)
                        {
                          unsigned int v223 = 0;
                          unsigned int v223 = *v174;
                          uint64_t v176 = re::SmallHashTable<unsigned int,re::DynamicOverflowArray<re::AABB,2ul>,8ul,re::Hash<unsigned int>,re::EqualTo<unsigned int>,false>::tryGet((uint64_t)&a4[6], &v223);
                          unint64_t v13 = v176;
                          unint64_t v177 = *(void *)(v176 + 8);
                          int32x4_t v178 = v217;
                          v179.i64[0] = 0x7F0000007FLL;
                          v179.i64[1] = 0x7F0000007FLL;
                          if (v177 < v9)
                          {
                            if (*(void *)v176)
                            {
                              if ((*(_DWORD *)(v176 + 16) & 1) == 0) {
                                goto LABEL_237;
                              }
LABEL_239:
                              unint64_t v180 = 2;
                            }
                            else
                            {
                              re::DynamicOverflowArray<re::AABB,2ul>::setCapacity((void *)v13, v9);
                              v179.i64[0] = 0x7F0000007FLL;
                              v179.i64[1] = 0x7F0000007FLL;
                              int32x4_t v178 = v217;
                              int v181 = *(_DWORD *)(v13 + 16) + 2;
                              *(_DWORD *)(v13 + 16) = v181;
                              if (v181) {
                                goto LABEL_239;
                              }
LABEL_237:
                              unint64_t v180 = *(void *)(v13 + 32);
                            }
                            if (v180 < v9)
                            {
                              re::DynamicOverflowArray<re::AABB,2ul>::setCapacity((void *)v13, v9);
                              v179.i64[0] = 0x7F0000007FLL;
                              v179.i64[1] = 0x7F0000007FLL;
                              int32x4_t v178 = v217;
                            }
                            unint64_t v182 = *(void *)(v13 + 8);
                            uint64_t v183 = v9 - v182;
                            if (v9 > v182)
                            {
                              uint64_t v184 = 32 * v182;
                              do
                              {
                                unint64_t v185 = v13 + 32;
                                if ((*(unsigned char *)(v13 + 16) & 1) == 0) {
                                  unint64_t v185 = *(void *)(v13 + 40);
                                }
                                uint64_t v186 = (int32x4_t *)(v185 + v184);
                                *uint64_t v186 = v178;
                                v186[1] = v179;
                                v184 += 32;
                                --v183;
                              }
                              while (v183);
                            }
                            *(void *)(v13 + re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = v9;
                            *(_DWORD *)(v13 + 16) += 2;
                            unint64_t v177 = v9;
                          }
                          if (v177 <= v12)
                          {
                            v228[2] = 0;
                            long long v232 = 0u;
                            long long v233 = 0u;
                            long long v230 = 0u;
                            long long v231 = 0u;
                            long long v229 = 0u;
                            unint64_t v51 = &_os_log_internal;
                            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                            *(_DWORD *)BOOL v246 = 136315906;
                            *(void *)&v246[4] = "operator[]";
                            __int16 v247 = 1024;
                            int v248 = 858;
                            __int16 v249 = 2048;
                            unint64_t v250 = v12;
                            __int16 v251 = 2048;
                            unint64_t v252 = v177;
                            _os_log_send_and_compose_impl();
                            _os_crash_msg();
                            __break(1u);
                            goto LABEL_264;
                          }
                          if (*(unsigned char *)(v13 + 16)) {
                            unint64_t v187 = v13 + 32;
                          }
                          else {
                            unint64_t v187 = *(void *)(v13 + 40);
                          }
                          uint64_t v188 = (float32x4_t *)(v187 + 32 * v12);
                          float32x4_t v189 = (float32x4_t)v225[0];
                          float32x4_t v190 = *v188;
                          float32x4_t v191 = v188[1];
                          v190.i32[3] = 0;
                          v189.i32[3] = 0;
                          *uint64_t v188 = vminnmq_f32(v190, v189);
                          float32x4_t v192 = (float32x4_t)v225[1];
                          v191.i32[3] = 0;
                          v192.i32[3] = 0;
                          v188[1] = vmaxnmq_f32(v191, v192);
                          if (++v174 == v175) {
                            goto LABEL_253;
                          }
                          continue;
                        }
                      }
LABEL_254:
                      float32x4_t v193 = a4[4];
                      float32x4_t v194 = a4[5];
                      v193.i32[3] = 0;
                      float32x4_t v195 = v226;
                      float32x4_t v196 = v227;
                      v195.i32[3] = 0;
                      v194.i32[3] = 0;
                      v196.i32[3] = 0;
                      a4[4] = vminnmq_f32(v193, v195);
                      a4[5] = vmaxnmq_f32(v194, v196);
                    }
                  }
                }
              }
            }
          }
        }
      }
      v111 += 3;
    }
    while (v111 != (unsigned int *)v10);
  }
LABEL_256:
  if (*(void *)v239 && (v239[16] & 1) == 0) {
    (*(void (**)(void))(**(void **)v239 + 40))();
  }
  uint64_t result = (uint64_t)v241;
  if (v241)
  {
    if ((v243 & 1) == 0) {
      return (*(uint64_t (**)(void))(*v241 + 40))();
    }
  }
  return result;
}

uint64_t re::Slice<re::FilteredMeshPass>::operator[](uint64_t a1, unint64_t a2, unint64_t a3)
{
  if (a2 > a3) {
    return a1 + 24 * a3;
  }
  re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, a3, a2, v3, v4);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

double re::RenderGraphMeshNodeBase::setColorAttachment(uint64_t a1, int a2, uint64_t *a3, long long *a4, char a5, uint64_t a6)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v15 = 0x600000001;
  re::RenderGraphMeshNodeBase::removeTargetWritesWithTypes(a1, (uint64_t)&v15, 2uLL, a2);
  long long v12 = *a4;
  uint64_t v15 = *a3;
  uint64_t v16 = a3[1];
  int v17 = a2;
  int v18 = 1;
  long long v14 = v12;
  long long v19 = v12;
  char v20 = a5;
  char v21 = 0;
  int v22 = 0;
  int v23 = 0;
  *(void *)&double result = re::DynamicArray<re::TargetWrite>::add((_anonymous_namespace_ *)(a1 + 216), (uint64_t)&v15).n128_u64[0];
  if (*(unsigned char *)a6)
  {
    uint64_t v15 = *(void *)(a6 + 8);
    uint64_t v16 = *(void *)(a6 + 16);
    int v17 = a2;
    int v18 = 6;
    long long v19 = v14;
    char v20 = a5;
    char v21 = 0;
    int v22 = 0;
    int v23 = 0;
    *(void *)&double result = re::DynamicArray<re::TargetWrite>::add((_anonymous_namespace_ *)(a1 + 216), (uint64_t)&v15).n128_u64[0];
  }
  return result;
}

double re::RenderGraphMeshNodeBase::setDepthOnlyAttachment(uint64_t a1, uint64_t *a2, char a3, uint64_t a4, float a5)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  uint64_t v14 = 0x700000002;
  re::RenderGraphMeshNodeBase::removeTargetWritesWithTypes(a1, (uint64_t)&v14, 2uLL, 0);
  *(void *)&long long v9 = LODWORD(a5);
  DWORD2(v9) = 0;
  HIDWORD(v9) = 1.0;
  unint64_t v10 = (_anonymous_namespace_ *)(a1 + 216);
  uint64_t v14 = *a2;
  uint64_t v15 = a2[1];
  uint64_t v16 = 0x200000000;
  long long v13 = v9;
  long long v17 = v9;
  char v18 = a3;
  char v19 = 0;
  int v20 = 0;
  int v21 = 0;
  *(void *)&double result = re::DynamicArray<re::TargetWrite>::add(v10, (uint64_t)&v14).n128_u64[0];
  if (*(unsigned char *)a4)
  {
    uint64_t v14 = *(void *)(a4 + 8);
    uint64_t v15 = *(void *)(a4 + 16);
    uint64_t v16 = 0x700000000;
    long long v17 = v13;
    char v18 = a3;
    char v19 = 0;
    int v20 = 0;
    int v21 = 0;
    *(void *)&double result = re::DynamicArray<re::TargetWrite>::add(v10, (uint64_t)&v14).n128_u64[0];
  }
  return result;
}

uint64_t *re::RenderGraphMeshNodeBase::validateAttachmentsDuringGraphBuild(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v81 = *MEMORY[0x263EF8340];
  int v67 = 0;
  long long v65 = 0u;
  long long v66 = 0u;
  uint64_t v68 = 0x7FFFFFFFLL;
  re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)&v65, a3, 3);
  char v60 = 0;
  unsigned __int8 v55 = 0;
  if (!a1[29])
  {
    int v40 = HIDWORD(v66);
    goto LABEL_104;
  }
  unint64_t v7 = 0;
  LODWORD(v3) = 0;
  while (2)
  {
    unint64_t v8 = a1[31] + (v7 << 6);
    long long v9 = (unsigned int *)(v8 + 16);
    switch(*(_DWORD *)(v8 + 20))
    {
      case 1:
        unint64_t v10 = *v9;
        if (!re::HashTable<unsigned int,re::RenderGraphMeshNodeBase::validateAttachmentsDuringGraphBuild(re::RenderGraphCompiled &,re::PerFrameAllocator &)::AttachmentPair,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::containsKey((uint64_t)&v65, *v9))
        {
          LOBYTE(v76) = 1;
          DWORD1(v76) = v3;
          BYTE8(v76) = 0;
          goto LABEL_54;
        }
        uint64_t v11 = v65;
        if ((void)v65)
        {
          unint64_t v12 = 0x94D049BB133111EBLL
              * ((0xBF58476D1CE4E5B9 * (v10 ^ (v10 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v10 ^ (v10 >> 30))) >> 27));
          uint64_t v13 = v66;
          uint64_t v14 = *(unsigned int *)(*((void *)&v65 + 1) + 4 * ((v12 ^ (v12 >> 31)) % DWORD2(v66)));
          if (v14 != 0x7FFFFFFF)
          {
            do
            {
              if (*(_DWORD *)(v66 + 32 * v14 + 12) == v10) {
                goto LABEL_64;
              }
              uint64_t v14 = *(_DWORD *)(v66 + 32 * v14 + 8) & 0x7FFFFFFF;
            }
            while (v14 != 0x7FFFFFFF);
          }
        }
        else
        {
          uint64_t v13 = v66;
        }
        uint64_t v14 = 0x7FFFFFFFLL;
LABEL_64:
        if (*(unsigned char *)(v13 + 32 * v14 + 16))
        {
          uint64_t v25 = a1[2];
          uint64_t v53 = 0;
          uint64_t v54 = -1;
          uint64_t v53 = *(void *)v8;
          uint64_t v54 = *(void *)(v8 + 8);
          re::RenderGraphCompiled::targetName(a2, (uint64_t)&v53, (re::StringID *)&v70);
          re::DynamicString::format((re::DynamicString *)"(%s): Cannot bind more than one color target to attachmentIndex %u. Using target %s.", (re::DynamicString *)&v76, v25, v10, *(void *)&v71[4]);
          re::RenderGraphCompiled::addError(a2, (uint64_t)&v76);
          if ((void)v76)
          {
            if (BYTE8(v76)) {
              (*(void (**)(void))(*(void *)v76 + 40))();
            }
            long long v76 = 0u;
            long long v77 = 0u;
          }
          re::StringID::destroyString((re::StringID *)&v70);
          LODWORD(v10) = *v9;
        }
        if (v11
          && (unint64_t v26 = 0xBF58476D1CE4E5B9 * (v10 ^ ((unint64_t)v10 >> 30)),
              uint64_t v27 = *(unsigned int *)(*((void *)&v65 + 1)
                                    + 4
                                    * (((0x94D049BB133111EBLL * (v26 ^ (v26 >> 27))) ^ ((0x94D049BB133111EBLL
                                                                                       * (v26 ^ (v26 >> 27))) >> 31))
                                     % DWORD2(v66))),
              v27 != 0x7FFFFFFF))
        {
          int v36 = *(_DWORD *)(v13 + 32 * v27 + 12);
          for (i = v27; v36 != v10; uint64_t v27 = i)
          {
            uint64_t i = *(_DWORD *)(v13 + 32 * i + 8) & 0x7FFFFFFF;
            uint64_t v27 = 0x7FFFFFFFLL;
            if (i == 0x7FFFFFFF) {
              break;
            }
            int v36 = *(_DWORD *)(v13 + 32 * i + 12);
          }
        }
        else
        {
          uint64_t v27 = 0x7FFFFFFFLL;
        }
        uint64_t v28 = v13 + 32 * v27;
        int v30 = *(unsigned __int8 *)(v28 + 16);
        uint64_t v29 = v28 + 16;
        if (!v30) {
          *(unsigned char *)uint64_t v29 = 1;
        }
        *(_DWORD *)(v29 + 4) = v3;
        goto LABEL_90;
      case 2:
        if (!v60)
        {
          LOBYTE(v76) = 1;
          BYTE4(v76) = 1;
          DWORD2(v76) = v3;
          BYTE12(v76) = 0;
          goto LABEL_58;
        }
        if (!v61) {
          goto LABEL_17;
        }
        uint64_t v15 = a1[2];
        uint64_t v49 = 0;
        uint64_t v50 = -1;
        uint64_t v49 = *(void *)v8;
        uint64_t v50 = *(void *)(v8 + 8);
        re::RenderGraphCompiled::targetName(a2, (uint64_t)&v49, (re::StringID *)&v70);
        re::DynamicString::format((re::DynamicString *)"(%s): Cannot bind more than one depth target. Using target %s.", (re::DynamicString *)&v76, v15, *(void *)&v71[4]);
        re::RenderGraphCompiled::addError(a2, (uint64_t)&v76);
        if ((void)v76)
        {
          if (BYTE8(v76)) {
            (*(void (**)(void))(*(void *)v76 + 40))();
          }
          long long v76 = 0u;
          long long v77 = 0u;
        }
        re::StringID::destroyString((re::StringID *)&v70);
        if (!v61) {
LABEL_17:
        }
          char v61 = 1;
        unsigned int v62 = v3;
        goto LABEL_90;
      case 3:
        if (!v55)
        {
          LOBYTE(v76) = 1;
          BYTE4(v76) = 1;
          DWORD2(v76) = v3;
          BYTE12(v76) = 0;
          goto LABEL_60;
        }
        if (!v56) {
          goto LABEL_26;
        }
        uint64_t v16 = a1[2];
        uint64_t v45 = 0;
        uint64_t v46 = -1;
        uint64_t v45 = *(void *)v8;
        uint64_t v46 = *(void *)(v8 + 8);
        re::RenderGraphCompiled::targetName(a2, (uint64_t)&v45, (re::StringID *)&v70);
        re::DynamicString::format((re::DynamicString *)"(%s): Cannot bind more than one stencil target. Using target %s.", (re::DynamicString *)&v76, v16, *(void *)&v71[4]);
        re::RenderGraphCompiled::addError(a2, (uint64_t)&v76);
        if ((void)v76)
        {
          if (BYTE8(v76)) {
            (*(void (**)(void))(*(void *)v76 + 40))();
          }
          long long v76 = 0u;
          long long v77 = 0u;
        }
        re::StringID::destroyString((re::StringID *)&v70);
        if (!v56) {
LABEL_26:
        }
          char v56 = 1;
        unsigned int v57 = v3;
        goto LABEL_90;
      case 6:
        unint64_t v17 = *v9;
        if (re::HashTable<unsigned int,re::RenderGraphMeshNodeBase::validateAttachmentsDuringGraphBuild(re::RenderGraphCompiled &,re::PerFrameAllocator &)::AttachmentPair,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::containsKey((uint64_t)&v65, *v9))
        {
          uint64_t v18 = v65;
          if ((void)v65)
          {
            unint64_t v19 = 0x94D049BB133111EBLL
                * ((0xBF58476D1CE4E5B9 * (v17 ^ (v17 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v17 ^ (v17 >> 30))) >> 27));
            uint64_t v20 = v66;
            uint64_t v21 = *(unsigned int *)(*((void *)&v65 + 1) + 4 * ((v19 ^ (v19 >> 31)) % DWORD2(v66)));
            if (v21 != 0x7FFFFFFF)
            {
              while (*(_DWORD *)(v66 + 32 * v21 + 12) != v17)
              {
                uint64_t v21 = *(_DWORD *)(v66 + 32 * v21 + 8) & 0x7FFFFFFF;
                if (v21 == 0x7FFFFFFF) {
                  goto LABEL_77;
                }
              }
LABEL_78:
              if (*(unsigned char *)(v20 + 32 * v21 + 24))
              {
                uint64_t v31 = a1[2];
                uint64_t v51 = 0;
                uint64_t v52 = -1;
                uint64_t v51 = *(void *)v8;
                uint64_t v52 = *(void *)(v8 + 8);
                re::RenderGraphCompiled::targetName(a2, (uint64_t)&v51, (re::StringID *)&v70);
                re::DynamicString::format((re::DynamicString *)"(%s): Cannot bind more than one color resolve target to attachmentIndex %u. Using target %s.", (re::DynamicString *)&v76, v31, v17, *(void *)&v71[4]);
                re::RenderGraphCompiled::addError(a2, (uint64_t)&v76);
                if ((void)v76)
                {
                  if (BYTE8(v76)) {
                    (*(void (**)(void, void))(*(void *)v76 + 40))(v76, v77);
                  }
                  long long v76 = 0u;
                  long long v77 = 0u;
                }
                re::StringID::destroyString((re::StringID *)&v70);
                LODWORD(v17) = *v9;
              }
              if (v18
                && (unint64_t v32 = 0xBF58476D1CE4E5B9 * (v17 ^ ((unint64_t)v17 >> 30)),
                    uint64_t v33 = *(unsigned int *)(*((void *)&v65 + 1)
                                          + 4
                                          * (((0x94D049BB133111EBLL * (v32 ^ (v32 >> 27))) ^ ((0x94D049BB133111EBLL
                                                                                             * (v32 ^ (v32 >> 27))) >> 31))
                                           % DWORD2(v66))),
                    v33 != 0x7FFFFFFF))
              {
                int v38 = *(_DWORD *)(v20 + 32 * v33 + 12);
                for (j = v33; v38 != v17; uint64_t v33 = j)
                {
                  uint64_t j = *(_DWORD *)(v20 + 32 * j + 8) & 0x7FFFFFFF;
                  uint64_t v33 = 0x7FFFFFFFLL;
                  if (j == 0x7FFFFFFF) {
                    break;
                  }
                  int v38 = *(_DWORD *)(v20 + 32 * j + 12);
                }
              }
              else
              {
                uint64_t v33 = 0x7FFFFFFFLL;
              }
              uint64_t v34 = v20 + 32 * v33;
              if (!*(unsigned char *)(v34 + 24)) {
                *(unsigned char *)(v34 + 24) = 1;
              }
              *(_DWORD *)(v34 + 2re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = v3;
              goto LABEL_90;
            }
          }
          else
          {
            uint64_t v20 = v66;
          }
LABEL_77:
          uint64_t v21 = 0x7FFFFFFFLL;
          goto LABEL_78;
        }
        LOBYTE(v76) = 0;
        BYTE8(v76) = 1;
        HIDWORD(v76) = v3;
LABEL_54:
        re::HashTable<unsigned int,re::RenderGraphMeshNodeBase::validateAttachmentsDuringGraphBuild(re::RenderGraphCompiled &,re::PerFrameAllocator &)::AttachmentPair,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::addNew((uint64_t)&v65, (_DWORD *)(v8 + 16), (unsigned __int8 *)&v76);
LABEL_90:
        unint64_t v7 = (v3 + 1);
        unint64_t v35 = a1[29];
        unint64_t v3 = v7;
        if (v35 > v7) {
          continue;
        }
        int v40 = v55;
        if (!HIDWORD(v66))
        {
          if (v60)
          {
            if (!v55) {
              return re::HashTable<unsigned int,re::RenderGraphMeshNodeBase::validateAttachmentsDuringGraphBuild(re::RenderGraphCompiled &,re::PerFrameAllocator &)::AttachmentPair,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::~HashTable((uint64_t *)&v65);
            }
LABEL_113:
            unint64_t v41 = v62;
            if (v35 <= v62)
            {
              uint64_t v69 = 0;
              long long v79 = 0u;
              long long v80 = 0u;
              long long v77 = 0u;
              long long v78 = 0u;
              long long v76 = 0u;
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              int v70 = 136315906;
              *(void *)unint64_t v71 = "operator[]";
              *(_WORD *)&v71[8] = 1024;
              *(_DWORD *)&v71[10] = 797;
              __int16 v72 = 2048;
              unint64_t v73 = v41;
              __int16 v74 = 2048;
              unint64_t v75 = v35;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
            }
            else
            {
              unint64_t v3 = v57;
              if (v35 > v57)
              {
                if (*(_DWORD *)(a1[31] + ((unint64_t)v62 << 6) + 8) != *(_DWORD *)(a1[31]
                                                                                         + ((unint64_t)v57 << 6)
                                                                                         + 8))
                {
                  re::DynamicString::format((re::DynamicString *)"(%s): Depth and stencil attachment, if both bound, must use the same target", (re::DynamicString *)&v76, a1[2]);
                  re::RenderGraphCompiled::addError(a2, (uint64_t)&v76);
                  if ((void)v76)
                  {
                    if (BYTE8(v76)) {
                      (*(void (**)(void))(*(void *)v76 + 40))();
                    }
                  }
                }
                if (v63)
                {
                  if (v58) {
                    goto LABEL_127;
                  }
                }
                else if (!v58)
                {
                  return re::HashTable<unsigned int,re::RenderGraphMeshNodeBase::validateAttachmentsDuringGraphBuild(re::RenderGraphCompiled &,re::PerFrameAllocator &)::AttachmentPair,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::~HashTable((uint64_t *)&v65);
                }
                re::DynamicString::format((re::DynamicString *)"(%s): Depth and stencil either both use the same resolve target, or don't use resolve target at all.", (re::DynamicString *)&v76, a1[2]);
                re::RenderGraphCompiled::addError(a2, (uint64_t)&v76);
                if (void)v76 && (BYTE8(v76)) {
                  (*(void (**)(void))(*(void *)v76 + 40))();
                }
                if (!v63) {
                  return re::HashTable<unsigned int,re::RenderGraphMeshNodeBase::validateAttachmentsDuringGraphBuild(re::RenderGraphCompiled &,re::PerFrameAllocator &)::AttachmentPair,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::~HashTable((uint64_t *)&v65);
                }
LABEL_127:
                unint64_t v41 = v64;
                unint64_t v35 = a1[29];
                if (v35 > v64)
                {
                  unint64_t v3 = v59;
                  if (v35 > v59)
                  {
                    if (*(_DWORD *)(a1[31] + ((unint64_t)v64 << 6) + 8) != *(_DWORD *)(a1[31]
                                                                                             + ((unint64_t)v59 << 6)
                                                                                             + 8))
                    {
                      re::DynamicString::format((re::DynamicString *)"(%s): Depth and stencil either both use the same resolve target, or don't use resolve target at all.", (re::DynamicString *)&v76, a1[2]);
                      re::RenderGraphCompiled::addError(a2, (uint64_t)&v76);
                      if ((void)v76)
                      {
                        if (BYTE8(v76)) {
                          (*(void (**)(void))(*(void *)v76 + 40))();
                        }
                      }
                    }
                    return re::HashTable<unsigned int,re::RenderGraphMeshNodeBase::validateAttachmentsDuringGraphBuild(re::RenderGraphCompiled &,re::PerFrameAllocator &)::AttachmentPair,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::~HashTable((uint64_t *)&v65);
                  }
LABEL_137:
                  uint64_t v69 = 0;
                  long long v79 = 0u;
                  long long v80 = 0u;
                  long long v77 = 0u;
                  long long v78 = 0u;
                  long long v76 = 0u;
                  os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                  int v70 = 136315906;
                  *(void *)unint64_t v71 = "operator[]";
                  *(_WORD *)&v71[8] = 1024;
                  *(_DWORD *)&v71[10] = 797;
                  __int16 v72 = 2048;
                  unint64_t v73 = v3;
                  __int16 v74 = 2048;
                  unint64_t v75 = v35;
                  _os_log_send_and_compose_impl();
                  _os_crash_msg();
                  __break(1u);
LABEL_138:
                  re::internal::assertLog((re::internal *)4, v6, "assertion failure: '%s' (%s:line %i) Invalid RenderGraphResourceOperationType for RenderGraphMeshNode.", "!\"Unreachable code\"", "validateAttachmentsDuringGraphBuild", 885);
                  _os_crash();
                  __break(1u);
                }
LABEL_136:
                uint64_t v69 = 0;
                long long v79 = 0u;
                long long v80 = 0u;
                long long v77 = 0u;
                long long v78 = 0u;
                long long v76 = 0u;
                os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                int v70 = 136315906;
                *(void *)unint64_t v71 = "operator[]";
                *(_WORD *)&v71[8] = 1024;
                *(_DWORD *)&v71[10] = 797;
                __int16 v72 = 2048;
                unint64_t v73 = v41;
                __int16 v74 = 2048;
                unint64_t v75 = v35;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
                goto LABEL_137;
              }
            }
            uint64_t v69 = 0;
            long long v79 = 0u;
            long long v80 = 0u;
            long long v77 = 0u;
            long long v78 = 0u;
            long long v76 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            int v70 = 136315906;
            *(void *)unint64_t v71 = "operator[]";
            *(_WORD *)&v71[8] = 1024;
            *(_DWORD *)&v71[10] = 797;
            __int16 v72 = 2048;
            unint64_t v73 = v3;
            __int16 v74 = 2048;
            unint64_t v75 = v35;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
            goto LABEL_136;
          }
LABEL_104:
          if (!v40)
          {
            re::DynamicString::format((re::DynamicString *)"(%s): No attachments are bound.", (re::DynamicString *)&v76, a1[2]);
            re::RenderGraphCompiled::addError(a2, (uint64_t)&v76);
            if (void)v76 && (BYTE8(v76)) {
              (*(void (**)(void))(*(void *)v76 + 40))();
            }
            int v40 = v55;
            if (v60) {
              goto LABEL_109;
            }
          }
          return re::HashTable<unsigned int,re::RenderGraphMeshNodeBase::validateAttachmentsDuringGraphBuild(re::RenderGraphCompiled &,re::PerFrameAllocator &)::AttachmentPair,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::~HashTable((uint64_t *)&v65);
        }
        if (!v60) {
          return re::HashTable<unsigned int,re::RenderGraphMeshNodeBase::validateAttachmentsDuringGraphBuild(re::RenderGraphCompiled &,re::PerFrameAllocator &)::AttachmentPair,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::~HashTable((uint64_t *)&v65);
        }
LABEL_109:
        if (v40)
        {
          unint64_t v35 = a1[29];
          goto LABEL_113;
        }
        return re::HashTable<unsigned int,re::RenderGraphMeshNodeBase::validateAttachmentsDuringGraphBuild(re::RenderGraphCompiled &,re::PerFrameAllocator &)::AttachmentPair,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::~HashTable((uint64_t *)&v65);
      case 7:
        if (v60)
        {
          if (!v63) {
            goto LABEL_41;
          }
          uint64_t v22 = a1[2];
          uint64_t v47 = 0;
          uint64_t v48 = -1;
          uint64_t v47 = *(void *)v8;
          uint64_t v48 = *(void *)(v8 + 8);
          re::RenderGraphCompiled::targetName(a2, (uint64_t)&v47, (re::StringID *)&v70);
          re::DynamicString::format((re::DynamicString *)"(%s): Cannot bind more than one depth resolve target. Using target %s.", (re::DynamicString *)&v76, v22, *(void *)&v71[4]);
          re::RenderGraphCompiled::addError(a2, (uint64_t)&v76);
          if ((void)v76)
          {
            if (BYTE8(v76)) {
              (*(void (**)(void, void))(*(void *)v76 + 40))(v76, v77);
            }
            long long v76 = 0u;
            long long v77 = 0u;
          }
          re::StringID::destroyString((re::StringID *)&v70);
          if (!v63) {
LABEL_41:
          }
            char v63 = 1;
          unsigned int v64 = v3;
          goto LABEL_90;
        }
        LOBYTE(v76) = 1;
        BYTE4(v76) = 0;
        BYTE12(v76) = 1;
        LODWORD(v77) = v3;
LABEL_58:
        uint64_t v24 = (unsigned __int8 *)&v60;
        goto LABEL_61;
      case 8:
        if (v55)
        {
          if (!v58) {
            goto LABEL_50;
          }
          uint64_t v23 = a1[2];
          uint64_t v43 = 0;
          uint64_t v44 = -1;
          uint64_t v43 = *(void *)v8;
          uint64_t v44 = *(void *)(v8 + 8);
          re::RenderGraphCompiled::targetName(a2, (uint64_t)&v43, (re::StringID *)&v70);
          re::DynamicString::format((re::DynamicString *)"(%s): Cannot bind more than one stencil resolve target. Using target %s.", (re::DynamicString *)&v76, v23, *(void *)&v71[4]);
          re::RenderGraphCompiled::addError(a2, (uint64_t)&v76);
          if ((void)v76)
          {
            if (BYTE8(v76)) {
              (*(void (**)(void, void))(*(void *)v76 + 40))(v76, v77);
            }
            long long v76 = 0u;
            long long v77 = 0u;
          }
          re::StringID::destroyString((re::StringID *)&v70);
          if (!v58) {
LABEL_50:
          }
            char v58 = 1;
          unsigned int v59 = v3;
        }
        else
        {
          LOBYTE(v76) = 1;
          BYTE4(v76) = 0;
          BYTE12(v76) = 1;
          LODWORD(v77) = v3;
LABEL_60:
          uint64_t v24 = &v55;
LABEL_61:
          re::Optional<re::RenderGraphMeshNodeBase::validateAttachmentsDuringGraphBuild(re::RenderGraphCompiled &,re::PerFrameAllocator &)::AttachmentPair>::operator=((uint64_t)v24, (unsigned __int8 *)&v76);
        }
        goto LABEL_90;
      default:
        goto LABEL_138;
    }
  }
}

BOOL re::HashTable<unsigned int,re::RenderGraphMeshNodeBase::validateAttachmentsDuringGraphBuild(re::RenderGraphCompiled &,re::PerFrameAllocator &)::AttachmentPair,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::containsKey(uint64_t a1, unsigned int a2)
{
  if (!*(void *)a1) {
    return 0;
  }
  unint64_t v2 = 0xBF58476D1CE4E5B9 * (a2 ^ ((unint64_t)a2 >> 30));
  uint64_t v3 = *(unsigned int *)(*(void *)(a1 + 8)
                       + 4
                       * (((0x94D049BB133111EBLL * (v2 ^ (v2 >> 27))) ^ ((0x94D049BB133111EBLL * (v2 ^ (v2 >> 27))) >> 31))
                        % *(unsigned int *)(a1 + 24)));
  if (v3 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 16);
  if (*(_DWORD *)(v5 + 32 * v3 + 12) == a2) {
    return 1;
  }
  do
  {
    uint64_t v3 = *(_DWORD *)(v5 + 32 * v3 + 8) & 0x7FFFFFFF;
    BOOL result = v3 != 0x7FFFFFFF;
  }
  while (v3 != 0x7FFFFFFF && *(_DWORD *)(v5 + 32 * v3 + 12) != a2);
  return result;
}

void re::HashTable<unsigned int,re::RenderGraphMeshNodeBase::validateAttachmentsDuringGraphBuild(re::RenderGraphCompiled &,re::PerFrameAllocator &)::AttachmentPair,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::addNew(uint64_t a1, _DWORD *a2, unsigned __int8 *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (v6 ^ (v6 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v6 ^ (v6 >> 30))) >> 27));
  unint64_t v8 = v7 ^ (v7 >> 31);
  if (*(void *)a1)
  {
    unint64_t v9 = v8 % *(unsigned int *)(a1 + 24);
    uint64_t v10 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v9);
    if (v10 != 0x7FFFFFFF)
    {
      uint64_t v11 = *(void *)(a1 + 16);
      if (*(_DWORD *)(v11 + 32 * v10 + 12) == v6) {
        return;
      }
      while (1)
      {
        uint64_t v10 = *(_DWORD *)(v11 + 32 * v10 + 8) & 0x7FFFFFFF;
        if (v10 == 0x7FFFFFFF) {
          break;
        }
        if (*(_DWORD *)(v11 + 32 * v10 + 12) == v6) {
          return;
        }
      }
    }
  }
  else
  {
    LODWORD(v9) = 0;
  }
  re::HashTable<unsigned int,re::RenderGraphMeshNodeBase::validateAttachmentsDuringGraphBuild(re::RenderGraphCompiled &,re::PerFrameAllocator &)::AttachmentPair,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::addAsMove(a1, v9, v8, a2, a3);
  ++*(_DWORD *)(a1 + 40);
}

uint64_t re::Optional<re::RenderGraphMeshNodeBase::validateAttachmentsDuringGraphBuild(re::RenderGraphCompiled &,re::PerFrameAllocator &)::AttachmentPair>::operator=(uint64_t result, unsigned __int8 *a2)
{
  int v2 = *a2;
  if (*(unsigned char *)result) {
    BOOL v3 = 0;
  }
  else {
    BOOL v3 = v2 == 0;
  }
  if (!v3)
  {
    if (*(unsigned char *)result) {
      BOOL v4 = v2 == 0;
    }
    else {
      BOOL v4 = 0;
    }
    if (v4)
    {
      *(unsigned char *)BOOL result = 0;
      return result;
    }
    if (*(unsigned char *)result) {
      BOOL v5 = 1;
    }
    else {
      BOOL v5 = v2 == 0;
    }
    if (v5)
    {
      if (*(unsigned char *)(result + 4) || a2[4])
      {
        if (!*(unsigned char *)(result + 4) || a2[4])
        {
          if (!*(unsigned char *)(result + 4) && a2[4]) {
            *(unsigned char *)(result + 4) = 1;
          }
          *(_DWORD *)(result + re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = *((_DWORD *)a2 + 2);
        }
        else
        {
          *(unsigned char *)(result + 4) = 0;
        }
      }
      if (*(unsigned char *)(result + 12) || a2[12])
      {
        if (!*(unsigned char *)(result + 12) || a2[12])
        {
          if (!*(unsigned char *)(result + 12) && a2[12]) {
            *(unsigned char *)(result + 12) = 1;
          }
          goto LABEL_23;
        }
        *(unsigned char *)(result + 12) = 0;
      }
    }
    else
    {
      *(unsigned char *)BOOL result = 1;
      int v6 = a2[4];
      *(unsigned char *)(result + 4) = v6;
      if (v6) {
        *(_DWORD *)(result + re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = *((_DWORD *)a2 + 2);
      }
      int v7 = a2[12];
      *(unsigned char *)(result + 12) = v7;
      if (v7) {
LABEL_23:
      }
        *(_DWORD *)(result + 16) = *((_DWORD *)a2 + 4);
    }
  }
  return result;
}

uint64_t *re::HashTable<unsigned int,re::RenderGraphMeshNodeBase::validateAttachmentsDuringGraphBuild(re::RenderGraphCompiled &,re::PerFrameAllocator &)::AttachmentPair,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::~HashTable(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    uint64_t v3 = *((unsigned int *)a1 + 8);
    if (v3)
    {
      uint64_t v4 = 0;
      uint64_t v5 = 32 * v3;
      do
      {
        uint64_t v6 = a1[2] + v4;
        int v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0) {
          *(_DWORD *)(v6 + re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = v7 & 0x7FFFFFFF;
        }
        v4 += 32;
      }
      while (v5 != v4);
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0u;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return a1;
}

uint64_t re::RenderGraphMeshNodeBase::validateAttachmentsPerFrame(uint64_t result, uint64_t a2)
{
  uint64_t v56 = *MEMORY[0x263EF8340];
  unint64_t v2 = *(void *)(result + 232);
  if (!v2) {
    return result;
  }
  uint64_t v4 = (void *)result;
  uint64_t v5 = 0;
  unint64_t v6 = 0;
  unsigned int v7 = 0;
  unint64_t v8 = 0;
  unsigned int v9 = 0;
  int v35 = 0;
  memset(v41, 0, sizeof(v41));
  uint64_t v37 = 0xFFFFFFFFLL;
  uint64_t v39 = 0xFFFFFFFFLL;
  uint64_t v36 = 0xFFFFFFFFLL;
  int v38 = -1;
  while (1)
  {
    uint64_t v10 = v4[31];
    uint64_t v11 = v10 + v5;
    if (*(_DWORD *)(v10 + v5 + 8) == -1 || *(_DWORD *)(v11 + 12) == -1) {
      goto LABEL_77;
    }
    if (v2 <= v6)
    {
      v40[0] = 0;
      long long v54 = 0u;
      long long v55 = 0u;
      long long v52 = 0u;
      long long v53 = 0u;
      long long v51 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v43 = 136315906;
      uint64_t v44 = "operator[]";
      __int16 v45 = 1024;
      int v46 = 797;
      __int16 v47 = 2048;
      unint64_t v48 = v6;
      __int16 v49 = 2048;
      unint64_t v50 = v2;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_90:
      uint64_t v42 = 0;
      long long v54 = 0u;
      long long v55 = 0u;
      long long v52 = 0u;
      long long v53 = 0u;
      long long v51 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v43 = 136315906;
      uint64_t v44 = "operator[]";
      __int16 v45 = 1024;
      int v46 = 797;
      __int16 v47 = 2048;
      unint64_t v48 = v6;
      __int16 v49 = 2048;
      unint64_t v50 = v8;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_91:
      uint64_t v42 = 0;
      long long v54 = 0u;
      long long v55 = 0u;
      long long v52 = 0u;
      long long v53 = 0u;
      long long v51 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v43 = 136315906;
      uint64_t v44 = "operator[]";
      __int16 v45 = 1024;
      int v46 = 797;
      __int16 v47 = 2048;
      unint64_t v48 = v6;
      __int16 v49 = 2048;
      unint64_t v50 = v8;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v12 = v10 + v5;
    unsigned int v13 = *(_DWORD *)(v12 + 20);
    if (v13 == 5) {
      goto LABEL_77;
    }
    uint64_t v14 = *(unsigned int *)(v12 + 16);
    re::RenderGraphResourceDescriptions::targetDescriptionSource(*(void *)(a2 + 136), v11, (uint64_t)v40);
    BOOL result = re::RenderGraphExecutable::targetDescription(a2, (uint64_t)v40);
    uint64_t v15 = (unsigned int *)result;
    if (v8)
    {
      uint64_t v16 = v39;
      if (*(_DWORD *)(result + 12) != v36)
      {
        re::DynamicString::format((re::DynamicString *)"(%s): Multiple render targets don't have the same width: AttachmentIndex %d: %d, expected %d.", (re::DynamicString *)&v51, v4[2], v14, v36, *(unsigned int *)(result + 12));
        re::RenderGraphExecutable::addError(a2, (uint64_t)&v51);
        BOOL result = v51;
        if ((void)v51)
        {
          if (BYTE8(v51)) {
            BOOL result = (*(uint64_t (**)(void, void))(*(void *)v51 + 40))(v51, v52);
          }
        }
      }
      if (v15[4] != v37)
      {
        re::DynamicString::format((re::DynamicString *)"(%s): Multiple render targets don't have the same height: AttachmentIndex %d: %d, expected %d.", (re::DynamicString *)&v51, v4[2], v14, v37, v15[4]);
        re::RenderGraphExecutable::addError(a2, (uint64_t)&v51);
        BOOL result = v51;
        if ((void)v51)
        {
          if (BYTE8(v51)) {
            BOOL result = (*(uint64_t (**)(void, void))(*(void *)v51 + 40))(v51, v52);
          }
        }
      }
      uint64_t v17 = v15[6];
      if (v17 != v39)
      {
        re::DynamicString::format((re::DynamicString *)"(%s): Multiple render targets don't have the same arrayLength: AttachmentIndex %d: %d, expected %d.", (re::DynamicString *)&v51, v4[2], v14, v39, v17);
        re::RenderGraphExecutable::addError(a2, (uint64_t)&v51);
        BOOL result = v51;
        if ((void)v51)
        {
          if (BYTE8(v51)) {
            BOOL result = (*(uint64_t (**)(void, void))(*(void *)v51 + 40))(v51, v52);
          }
        }
      }
    }
    else
    {
      uint64_t v16 = *(unsigned int *)(result + 24);
      uint64_t v36 = *(unsigned int *)(result + 12);
      uint64_t v37 = *(unsigned int *)(result + 16);
    }
    uint64_t v39 = v16;
    if (v13 > 8)
    {
LABEL_37:
      LODWORD(v20) = v38;
      goto LABEL_60;
    }
    int v18 = 1 << v13;
    if (((1 << v13) & 0x42) == 0)
    {
      if ((v18 & 0x84) == 0)
      {
        if ((v18 & 0x108) == 0) {
          goto LABEL_37;
        }
        unint64_t v8 = v4[29];
        if (v8 <= v6) {
          goto LABEL_90;
        }
        uint64_t v19 = v15[1];
        if (*(unsigned char *)(v4[31] + v5 + 49))
        {
          LODWORD(v20) = v38;
          if ((v19 - 250) > 0xA) {
            goto LABEL_82;
          }
          int v21 = 1 << (v19 + 6);
          int v22 = 1069;
        }
        else
        {
          LODWORD(v20) = v38;
          if ((v19 - 253) > 9) {
            goto LABEL_82;
          }
          int v21 = 1 << (v19 + 3);
          int v22 = 901;
        }
        if ((v21 & v22) != 0)
        {
LABEL_41:
          unsigned int v28 = v15[1];
          if (v9) {
            uint64_t v29 = v9;
          }
          else {
            uint64_t v29 = v28;
          }
          if (v28 != v29)
          {
            unsigned int v9 = v29;
            re::DynamicString::format((re::DynamicString *)"(%s): Stencil target format and resolve target format don't match (%d vs %d)", (re::DynamicString *)&v51, v4[2], v15[1], v29, v34);
            goto LABEL_56;
          }
          unsigned int v9 = v15[1];
          goto LABEL_60;
        }
LABEL_82:
        re::DynamicString::format((re::DynamicString *)"(%s): Invalid stencil target format: %d", (re::DynamicString *)&v51, v4[2], v19);
        re::RenderGraphExecutable::addError(a2, (uint64_t)&v51);
        BOOL result = v51;
        if (void)v51 && (BYTE8(v51)) {
          BOOL result = (*(uint64_t (**)(void, void))(*(void *)v51 + 40))(v51, v52);
        }
        goto LABEL_41;
      }
      unint64_t v8 = v4[29];
      if (v8 <= v6) {
        goto LABEL_91;
      }
      uint64_t v25 = v15[1];
      if (*(unsigned char *)(v4[31] + v5 + 49))
      {
        LODWORD(v20) = v38;
        if ((v25 - 250) > 0xA) {
          goto LABEL_79;
        }
        int v26 = 1 << (v25 + 6);
        int v27 = 1069;
      }
      else
      {
        LODWORD(v20) = v38;
        if ((v25 - 250) > 0xA) {
          goto LABEL_79;
        }
        int v26 = 1 << (v25 + 6);
        int v27 = 1061;
      }
      if ((v26 & v27) != 0)
      {
LABEL_50:
        unsigned int v30 = v15[1];
        if (v7) {
          uint64_t v31 = v7;
        }
        else {
          uint64_t v31 = v30;
        }
        if (v30 != v31)
        {
          unsigned int v7 = v31;
          re::DynamicString::format((re::DynamicString *)"(%s): Depth target format and resolve target format don't match (%d vs %d)", (re::DynamicString *)&v51, v4[2], v15[1], v31, v34);
          goto LABEL_56;
        }
        unsigned int v7 = v15[1];
        goto LABEL_60;
      }
LABEL_79:
      re::DynamicString::format((re::DynamicString *)"(%s): Invalid depth target format: %d", (re::DynamicString *)&v51, v4[2], v25);
      re::RenderGraphExecutable::addError(a2, (uint64_t)&v51);
      BOOL result = v51;
      if (void)v51 && (BYTE8(v51)) {
        BOOL result = (*(uint64_t (**)(void, void))(*(void *)v51 + 40))(v51, v52);
      }
      goto LABEL_50;
    }
    LODWORD(v20) = v38;
    if (v14 > 7) {
      break;
    }
    uint64_t v23 = *((unsigned int *)v41 + v14);
    unsigned int v24 = v15[1];
    if (v23)
    {
      if (v24 != v23)
      {
        re::DynamicString::format((re::DynamicString *)"(%s): Attachment Index (%d) target format and resolve target format don't match (%d vs %d)", (re::DynamicString *)&v51, v4[2], v14, v15[1], v23);
LABEL_56:
        re::RenderGraphExecutable::addError(a2, (uint64_t)&v51);
        BOOL result = v51;
        if (void)v51 && (BYTE8(v51)) {
          BOOL result = (*(uint64_t (**)(void, void))(*(void *)v51 + 40))(v51, v52);
        }
      }
    }
    else
    {
      *((_DWORD *)v41 + v14) = v24;
    }
LABEL_60:
    if (v13 - 1 > 2)
    {
      if (v13 - 6 <= 2)
      {
        uint64_t v33 = v15[5];
        if (v33 != 1 || v15[20] == -1)
        {
          re::DynamicString::format((re::DynamicString *)"(%s): Attachment Index (%d) has resolve target with sample count (%d) > 1, or the resolve target is not pointing at its corresponding MSAA target.", (re::DynamicString *)&v51, v4[2], v14, v33);
          re::RenderGraphExecutable::addError(a2, (uint64_t)&v51);
          BOOL result = v51;
          if ((void)v51)
          {
            if (BYTE8(v51)) {
              BOOL result = (*(uint64_t (**)(void, void))(*(void *)v51 + 40))(v51, v52);
            }
          }
        }
      }
    }
    else
    {
      unsigned int v32 = v15[5];
      if (v35) {
        uint64_t v20 = v20;
      }
      else {
        uint64_t v20 = v32;
      }
      if (v32 == v20)
      {
        int v35 = 1;
        int v38 = v15[5];
      }
      else
      {
        uint64_t v34 = v20;
        re::DynamicString::format((re::DynamicString *)"(%s): Attachment Index (%d) has a sample count (%d) that does not match other attachments (%d).", (re::DynamicString *)&v51, v4[2], v14, v15[5]);
        re::RenderGraphExecutable::addError(a2, (uint64_t)&v51);
        BOOL result = v51;
        if ((void)v51)
        {
          if (BYTE8(v51)) {
            BOOL result = (*(uint64_t (**)(void, void))(*(void *)v51 + 40))(v51, v52);
          }
        }
        int v38 = v20;
        int v35 = 1;
      }
    }
    unint64_t v2 = v4[29];
    unint64_t v8 = 1;
LABEL_77:
    ++v6;
    v5 += 64;
    if (v2 <= v6) {
      return result;
    }
  }
  re::DynamicString::format((re::DynamicString *)"(%s): Attachment index %d is greater than pixelFormats array fixed size (%d).", (re::DynamicString *)&v51, v4[2], v14, 8);
  re::RenderGraphExecutable::addError(a2, (uint64_t)&v51);
  BOOL result = v51;
  if (void)v51 && (BYTE8(v51)) {
    return (*(uint64_t (**)(void, void))(*(void *)v51 + 40))(v51, v52);
  }
  return result;
}

void *re::RenderGraphMeshNodeBase::depthSort(re *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16, uint64_t a17, int a18, int a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,unint64_t a30,int a31,long long *a32,unsigned int a33,float a34,float a35,unsigned int a36,float a37,int a38,__int16 a39,char a40,char a41,char a42,char a43,char a44,char a45,char a46,char a47,char a48,char a49,char a50,int a51,char a52,unsigned __int8 a53,char a54,char a55,char a56,int a57,long long a58,float32x4_t a59,uint64_t a60,void *a61,float a62,uint64_t a63)
{
  a74 = *MEMORY[0x263EF8340];
  if (a1 == 2) {
    int v70 = -1;
  }
  else {
    int v70 = 1;
  }
  float v71 = (float)v70;
  __int16 v72 = *(unsigned int **)(a4 + 32);
  unint64_t v73 = *(void *)(a4 + 16);
  uint64_t v74 = re::globalAllocators(a1)[2];
  a61 = &unk_26E71DD18;
  a62 = v71;
  a64 = v74;
  a65 = &a61;
  a32 = 0;
  a29 = 0;
  a30 = 0;
  a31 = 0;
  a28 = a7;
  re::DynamicArray<re::ecs2::CoincidentalSortKey>::setCapacity(&a28, v73);
  ++a31;
  uint64_t v75 = re::RenderGraphDataStore::get<re::CameraData>(*(void *)(a3 + 1168), *(void *)(*(void *)(a3 + 40) + 48));
  if (!*(void *)(v75 + 48))
  {
LABEL_90:
    long long v153 = 0uLL;
    re::internal::assertLog((re::internal *)6, v76, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389);
    _os_crash();
    __break(1u);
LABEL_91:
    a66 = a58;
    a67 = a59;
    if (!*(unsigned char *)(a5 + 208)) {
      *(unsigned char *)(a5 + 20re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = 1;
    }
    float32x4_t v140 = a67;
    *(_OWORD *)(a5 + 224) = a66;
    *(float32x4_t *)(a5 + 240) = v140;
    if (v73) {
      goto LABEL_7;
    }
    goto LABEL_94;
  }
  uint64_t v77 = v75;
  re::RenderCamera::computeLocalTransform((re::RenderCamera *)(v75 + 64), (uint64_t)&a66);
  int32x4_t v83 = (int32x4_t)vmulq_f32(a68, a68);
  v83.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v83, 2), vadd_f32(*(float32x2_t *)v83.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v83.i8, 1))).u32[0];
  float32x2_t v84 = vrsqrte_f32((float32x2_t)v83.u32[0]);
  float32x2_t v85 = vmul_f32(v84, vrsqrts_f32((float32x2_t)v83.u32[0], vmul_f32(v84, v84)));
  a59 = vnegq_f32(vmulq_n_f32(a68, vmul_f32(v85, vrsqrts_f32((float32x2_t)v83.u32[0], vmul_f32(v85, v85))).f32[0]));
  uint64_t v87 = *(void *)(v77 + 64);
  uint64_t v86 = *(void *)(v77 + 72);
  *(void *)&a58 = v87;
  *((void *)&a58 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = v86;
  if (a5) {
    goto LABEL_91;
  }
  if (v73)
  {
LABEL_7:
    v88.i64[0] = v87;
    v88.i64[1] = v86;
    float32x4_t vars0 = v88;
    uint64_t v89 = &v72[3 * v73];
    unint64_t v160 = v89;
    uint64_t v161 = a2;
    while (1)
    {
      unint64_t v90 = *((unsigned __int8 *)v72 + 4);
      unint64_t v91 = a2[1];
      if (v91 <= v90)
      {
        re::internal::assertLog((re::internal *)6, v78, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, *((unsigned __int8 *)v72 + 4), v91);
        _os_crash();
        __break(1u);
        goto LABEL_90;
      }
      uint64_t v92 = *a2;
      uint64_t v93 = re::BucketArray<re::MeshPartDrawContext,128ul>::operator[](*(void *)(*a2 + 24 * *((unsigned __int8 *)v72 + 4)), *v72);
      unint64_t v73 = v93;
      uint64_t v96 = *(void *)(v93 + 32);
      if (*(_DWORD *)(v93 + 144) != -1 || (__int32 v104 = *(void **)(v93 + 216)) != 0 && *v104)
      {
        a56 = 0;
        if (a5)
        {
          int SortingDebugContextAndReturnIndex = re::DrawCallRecorderGroup::allocateSortingDebugContextAndReturnIndex((re::DrawCallRecorderGroup *)a5);
          a56 = 1;
          a57 = SortingDebugContextAndReturnIndex;
        }
        float32x4_t v97 = *(float32x4_t *)(v96 + 16);
        uint32x4_t v98 = (uint32x4_t)vcgtq_f32(*(float32x4_t *)v96, v97);
        v98.i32[3] = v98.i32[2];
        v98.i32[0] = vmaxvq_u32(v98);
        if ((v98.i32[0] & 0x80000000) == 0) {
          break;
        }
      }
LABEL_87:
      v72 += 3;
      if (v72 == v89) {
        goto LABEL_94;
      }
    }
    re::RenderGraphMeshNodeBase::computeSortDistance(v96, (float32x4_t *)(v73 + 64), (unsigned char *)(v73 + 152), (__n128 *)(v73 + 128), (float32x2_t *)&a58, &a59, a5, (uint64_t)&a56, *(double *)v98.i64, *(double *)v97.i64, v94, v95);
    float v100 = v99;
    unsigned int v101 = *(unsigned __int8 *)(v73 + 153);
    if ((v101 & 5) != 0) {
      float v102 = *(float *)(v73 + 164);
    }
    else {
      float v102 = v99;
    }
    if ((v101 & 8) != 0) {
      float v103 = *(float *)(v73 + 160);
    }
    else {
      float v103 = v102;
    }
    if (*(unsigned char *)(v73 + 157) || (uint64_t v105 = *(float32x4_t **)(v73 + 168)) == 0)
    {
      char v170 = 0;
    }
    else
    {
      float32x4_t v106 = *(float32x4_t *)(v96 + 16);
      uint32x4_t v107 = (uint32x4_t)vcgtq_f32(*(float32x4_t *)v96, v106);
      v107.i32[3] = v107.i32[2];
      if ((vmaxvq_u32(v107) & 0x80000000) != 0)
      {
        float32x4_t v110 = 0uLL;
      }
      else
      {
        float32x4_t v108 = vaddq_f32(*(float32x4_t *)v96, v106);
        v109.i64[0] = 0x3F0000003F000000;
        v109.i64[1] = 0x3F0000003F000000;
        float32x4_t v110 = vmulq_f32(v108, v109);
      }
      float32x4_t v111 = v105[1];
      float32x4_t v112 = vmulq_f32(vsubq_f32(vars0, v111), *v105);
      float32x4_t v113 = vaddq_f32(*(float32x4_t *)(v73 + 112), vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)(v73 + 64), v110.f32[0]), *(float32x4_t *)(v73 + 80), *(float32x2_t *)v110.f32, 1), *(float32x4_t *)(v73 + 96), v110, 2));
      float32x4_t v114 = vmulq_f32(*v105, vsubq_f32(vdivq_f32(v113, (float32x4_t)vdupq_laneq_s32((int32x4_t)v113, 3)), v111));
      if (((vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v114, 2), vaddq_f32(v114, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v114.f32, 1))).u32[0] ^ vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v112, 2), vaddq_f32(v112, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v112.f32, 1))).u32[0]) & 0x80000000) != 0)char v115 = 1; {
      else
      }
        char v115 = -1;
      char v170 = v115;
    }
    int v116 = *(_DWORD *)(v73 + 184);
    float v117 = *(float *)(v73 + 192);
    unsigned __int8 v118 = *(unsigned char *)(v92 + 24 * v90 + 8);
    int v162 = *(_DWORD *)(v73 + 188);
    int v163 = v101 & (v117 == 0.0);
    if (v118)
    {
      uint64_t v119 = 0;
      unsigned __int8 v118 = 0;
      if ((v101 & (v117 == 0.0)) != 0) {
        int v120 = 2;
      }
      else {
        int v120 = 0;
      }
      int v121 = (2 * v101) & 4;
      if ((v101 & 0x10) != 0) {
        int v121 = 4;
      }
      unsigned int v122 = v121 | (v101 >> 2) & 8 | v120;
      if (v122 <= 1) {
        unsigned int v122 = 1;
      }
      do
      {
        if (((v122 >> v119) & 1) != 0
          && v118 <= *(unsigned __int8 *)(v92 + 24 * v90 + 9 + v119))
        {
          unsigned __int8 v118 = *(unsigned char *)(v92 + 24 * v90 + 9 + v119);
        }
        ++v119;
      }
      while (v119 != 4);
    }
    if ((v101 & 8) != 0)
    {
      char v171 = v118;
      if ((v101 & 2) != 0)
      {
        unsigned int v123 = *(unsigned __int8 *)(a6 + 89);
        if (v118 > v123) {
          LOBYTE(v123) = v118;
        }
        char v171 = v123;
      }
    }
    else
    {
      char v171 = 0;
    }
    if (v101)
    {
      unsigned int v164 = *(_DWORD *)(v73 + 184);
      if (*(unsigned char *)(v73 + 158))
      {
LABEL_63:
        unsigned int v128 = *v72;
        int v168 = *(_DWORD *)(v73 + 196);
        char v169 = *((unsigned char *)v72 + 4);
        char v129 = *((unsigned char *)v72 + 5);
        char v130 = *(unsigned char *)(v73 + 150);
        char v131 = *(unsigned char *)(v73 + 155);
        __int16 v166 = *(_WORD *)(v73 + 148);
        char v167 = *(unsigned char *)(v73 + 154);
        char v132 = *(unsigned char *)(v73 + 156);
        uint64_t v133 = a5;
        if (a5)
        {
          LOBYTE(a5) = 1;
          a19 = a57;
        }
        int v134 = *(unsigned __int8 *)(a6 + 88);
        if (a53 | v134)
        {
          a33 = v128;
          a34 = v103;
          a35 = v102;
          a36 = v164;
          a37 = v100;
          a38 = v168;
          a39 = v166;
          a40 = 1;
          a41 = v171;
          a42 = v169;
          a43 = v129;
          a44 = v130;
          a45 = v131;
          a46 = v167;
          a47 = v132;
          a48 = v170;
          a50 = a5;
          if (v133) {
            a51 = a19;
          }
          if (v163 && (v116 != v162 && !v134 || a54 && !v134)) {
            a43 = v129 | 1;
          }
          a68.i32[2] = 0;
          a68.i8[12] = 0;
          a66 = 0u;
          a67 = 0u;
          *(uint64_t *)((char *)&a67.i64[1] + 5) = 0;
          *(void *)&a66 = v133;
          (*((void (**)(void **, long long *, unsigned int *, long long *, __n128))*a65 + 2))(a65, &a32[4 * a30 - 4], &a33, &a66, v136);
          int v135 = *(unsigned __int8 *)(a6 + 88);
        }
        else
        {
          int v135 = 0;
        }
        if (a55 && !v135)
        {
          a33 = v128;
          a34 = v103;
          a35 = v102;
          a37 = v100;
          a38 = v168;
          a39 = v166;
          a40 = 1;
          a41 = v171;
          a42 = v169;
          a44 = v130;
          a45 = v131;
          a46 = v167;
          a47 = v132;
          a48 = v170;
          a50 = a5;
          if (v133) {
            a51 = a19;
          }
          a36 = *(_DWORD *)(v73 + 188);
          a43 = v129 | 2;
          a68.i32[2] = 0;
          a68.i8[12] = 0;
          a66 = 0u;
          a67 = 0u;
          *(uint64_t *)((char *)&a67.i64[1] + 5) = 0;
          *(void *)&a66 = v133;
          (*((void (**)(void **, long long *, unsigned int *, long long *, __n128))*a65 + 2))(a65, &a32[4 * a30 - 4], &a33, &a66, v137);
          int v135 = *(unsigned __int8 *)(a6 + 88);
        }
        if (a54 && !v135)
        {
          a33 = v128;
          a34 = v103;
          a35 = v102;
          a36 = v164;
          a37 = v100;
          a38 = v168;
          a39 = v166;
          a41 = v171;
          a42 = v169;
          a44 = v130;
          a45 = v131;
          a46 = v167;
          a47 = v132;
          a48 = v170;
          a50 = a5;
          if (v133) {
            a51 = a19;
          }
          a40 = 0;
          a43 = v129 | 2;
          a68.i32[2] = 0;
          a68.i8[12] = 0;
          a66 = 0u;
          a67 = 0u;
          *(uint64_t *)((char *)&a67.i64[1] + 5) = 0;
          *(void *)&a66 = v133;
          (*((void (**)(void **, long long *, unsigned int *, long long *, __n128))*a65 + 2))(a65, &a32[4 * a30 - 4], &a33, &a66, v138);
        }
        a5 = v133;
        uint64_t v89 = v160;
        a2 = v161;
        goto LABEL_87;
      }
      if (*(unsigned char *)(v92 + 24 * v90 + 16)) {
        BOOL v124 = v117 == 0.0;
      }
      else {
        BOOL v124 = 1;
      }
      int v125 = v101 & 0xA;
      BOOL v126 = v124 || v125 == 0;
      unsigned int v127 = v118 | 0x80000000;
      if (v126) {
        unsigned int v127 = *(_DWORD *)(v73 + 184);
      }
    }
    else
    {
      unsigned int v127 = v118 & ((int)(v101 << 29) >> 31);
    }
    unsigned int v164 = v127;
    goto LABEL_63;
  }
LABEL_94:
  uint64_t v141 = a4;
  if (a65)
  {
    (*(void (**)(void **))*a65)(a65);
    if (a65 != &a61) {
      (*(void (**)(uint64_t))(*(void *)a64 + 40))(a64);
    }
    a65 = 0;
  }
  unint64_t v142 = a32;
  unint64_t v143 = a30;
  unint64_t v144 = 126 - 2 * __clz(a30);
  if (a30) {
    unint64_t v145 = v144;
  }
  else {
    unint64_t v145 = 0;
  }
             vars0.i64[1]);
  *(void *)(v141 + 16) = 0;
  ++*(_DWORD *)(v141 + 24);
  if (*(void *)(v141 + 8) >= v143)
  {
    if (!v143) {
      goto LABEL_106;
    }
  }
  else
  {
    re::DynamicArray<re::MeshLodLevelInfo>::setCapacity((void *)v141, v143);
  }
  unint64_t v147 = v143 << 6;
  __int32 v148 = (char *)v142 + 44;
  do
  {
    LODWORD(a66) = *((_DWORD *)v148 - 3);
    BYTE4(a66) = *(v148 - 8);
    BYTE5(a66) = *v148;
    DWORD2(a66) = *((_DWORD *)v148 - 1);
    BOOL result = re::DynamicArray<re::MeshLodLevelInfo>::add((void *)v141, (uint64_t *)&a66);
    v148 += 64;
    v147 -= 64;
  }
  while (v147);
LABEL_106:
  if (v142)
  {
    BOOL result = a28;
    if (a28) {
      return (void *)(*(uint64_t (**)(void *, long long *))(*(void *)a28 + 40))(a28, v142);
    }
  }
  return result;
}

uint64_t re::RenderGraphMeshNodeBase::focusSort(re *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16, uint64_t a17, int a18, int a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,unint64_t a30,int a31,unint64_t a32,unsigned int a33,float a34,float a35,unsigned int a36,float a37,int a38,__int16 a39,char a40,char a41,char a42,char a43,char a44,char a45,char a46,char a47,char a48,char a49,char a50,int a51,char a52,unsigned __int8 a53,char a54,char a55,char a56,int a57,long long a58,float32x4_t a59,uint64_t a60,void *a61,float a62,uint64_t a63)
{
  a74 = *MEMORY[0x263EF8340];
  if (a1 == 4) {
    int v70 = -1;
  }
  else {
    int v70 = 1;
  }
  float v71 = (float)v70;
  __int16 v72 = *(unsigned int **)(a4 + 32);
  unint64_t v73 = *(void *)(a4 + 16);
  uint64_t v74 = re::globalAllocators(a1)[2];
  a61 = &unk_26E71DD80;
  a62 = v71;
  a64 = v74;
  a65 = &a61;
  a32 = 0;
  a29 = 0;
  a30 = 0;
  a31 = 0;
  a28 = a7;
  re::DynamicArray<re::ecs2::CoincidentalSortKey>::setCapacity(&a28, v73);
  ++a31;
  uint64_t v75 = re::RenderGraphDataStore::get<re::CameraData>(*(void *)(a3 + 1168), *(void *)(*(void *)(a3 + 40) + 48));
  if (!*(void *)(v75 + 48))
  {
LABEL_90:
    long long v153 = 0uLL;
    re::internal::assertLog((re::internal *)6, v76, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389);
    _os_crash();
    __break(1u);
LABEL_91:
    a66 = a58;
    a67 = a59;
    if (!*(unsigned char *)(a5 + 208)) {
      *(unsigned char *)(a5 + 20re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = 1;
    }
    float32x4_t v140 = a67;
    *(_OWORD *)(a5 + 224) = a66;
    *(float32x4_t *)(a5 + 240) = v140;
    if (v73) {
      goto LABEL_7;
    }
    goto LABEL_94;
  }
  uint64_t v77 = v75;
  re::RenderCamera::computeLocalTransform((re::RenderCamera *)(v75 + 64), (uint64_t)&a66);
  int32x4_t v83 = (int32x4_t)vmulq_f32(a68, a68);
  v83.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v83, 2), vadd_f32(*(float32x2_t *)v83.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v83.i8, 1))).u32[0];
  float32x2_t v84 = vrsqrte_f32((float32x2_t)v83.u32[0]);
  float32x2_t v85 = vmul_f32(v84, vrsqrts_f32((float32x2_t)v83.u32[0], vmul_f32(v84, v84)));
  a59 = vnegq_f32(vmulq_n_f32(a68, vmul_f32(v85, vrsqrts_f32((float32x2_t)v83.u32[0], vmul_f32(v85, v85))).f32[0]));
  uint64_t v87 = *(void *)(v77 + 64);
  uint64_t v86 = *(void *)(v77 + 72);
  *(void *)&a58 = v87;
  *((void *)&a58 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = v86;
  if (a5) {
    goto LABEL_91;
  }
  if (v73)
  {
LABEL_7:
    v88.i64[0] = v87;
    v88.i64[1] = v86;
    float32x4_t vars0 = v88;
    uint64_t v89 = &v72[3 * v73];
    unint64_t v160 = v89;
    uint64_t v161 = a2;
    while (1)
    {
      unint64_t v90 = *((unsigned __int8 *)v72 + 4);
      unint64_t v91 = a2[1];
      if (v91 <= v90)
      {
        re::internal::assertLog((re::internal *)6, v78, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, *((unsigned __int8 *)v72 + 4), v91);
        _os_crash();
        __break(1u);
        goto LABEL_90;
      }
      uint64_t v92 = *a2;
      uint64_t v93 = re::BucketArray<re::MeshPartDrawContext,128ul>::operator[](*(void *)(*a2 + 24 * *((unsigned __int8 *)v72 + 4)), *v72);
      unint64_t v73 = v93;
      uint64_t v96 = *(void *)(v93 + 32);
      if (*(_DWORD *)(v93 + 144) != -1 || (__int32 v104 = *(void **)(v93 + 216)) != 0 && *v104)
      {
        a56 = 0;
        if (a5)
        {
          int SortingDebugContextAndReturnIndex = re::DrawCallRecorderGroup::allocateSortingDebugContextAndReturnIndex((re::DrawCallRecorderGroup *)a5);
          a56 = 1;
          a57 = SortingDebugContextAndReturnIndex;
        }
        float32x4_t v97 = *(float32x4_t *)(v96 + 16);
        uint32x4_t v98 = (uint32x4_t)vcgtq_f32(*(float32x4_t *)v96, v97);
        v98.i32[3] = v98.i32[2];
        v98.i32[0] = vmaxvq_u32(v98);
        if ((v98.i32[0] & 0x80000000) == 0) {
          break;
        }
      }
LABEL_87:
      v72 += 3;
      if (v72 == v89) {
        goto LABEL_94;
      }
    }
    re::RenderGraphMeshNodeBase::computeSortDistance(v96, (float32x4_t *)(v73 + 64), (unsigned char *)(v73 + 152), (__n128 *)(v73 + 128), (float32x2_t *)&a58, &a59, a5, (uint64_t)&a56, *(double *)v98.i64, *(double *)v97.i64, v94, v95);
    float v100 = v99;
    unsigned int v101 = *(unsigned __int8 *)(v73 + 153);
    if ((v101 & 5) != 0) {
      float v102 = *(float *)(v73 + 164);
    }
    else {
      float v102 = v99;
    }
    if ((v101 & 8) != 0) {
      float v103 = *(float *)(v73 + 160);
    }
    else {
      float v103 = v102;
    }
    if (*(unsigned char *)(v73 + 157) || (uint64_t v105 = *(float32x4_t **)(v73 + 168)) == 0)
    {
      char v170 = 0;
    }
    else
    {
      float32x4_t v106 = *(float32x4_t *)(v96 + 16);
      uint32x4_t v107 = (uint32x4_t)vcgtq_f32(*(float32x4_t *)v96, v106);
      v107.i32[3] = v107.i32[2];
      if ((vmaxvq_u32(v107) & 0x80000000) != 0)
      {
        float32x4_t v110 = 0uLL;
      }
      else
      {
        float32x4_t v108 = vaddq_f32(*(float32x4_t *)v96, v106);
        v109.i64[0] = 0x3F0000003F000000;
        v109.i64[1] = 0x3F0000003F000000;
        float32x4_t v110 = vmulq_f32(v108, v109);
      }
      float32x4_t v111 = v105[1];
      float32x4_t v112 = vmulq_f32(vsubq_f32(vars0, v111), *v105);
      float32x4_t v113 = vaddq_f32(*(float32x4_t *)(v73 + 112), vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)(v73 + 64), v110.f32[0]), *(float32x4_t *)(v73 + 80), *(float32x2_t *)v110.f32, 1), *(float32x4_t *)(v73 + 96), v110, 2));
      float32x4_t v114 = vmulq_f32(*v105, vsubq_f32(vdivq_f32(v113, (float32x4_t)vdupq_laneq_s32((int32x4_t)v113, 3)), v111));
      if (((vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v114, 2), vaddq_f32(v114, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v114.f32, 1))).u32[0] ^ vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v112, 2), vaddq_f32(v112, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v112.f32, 1))).u32[0]) & 0x80000000) != 0)char v115 = 1; {
      else
      }
        char v115 = -1;
      char v170 = v115;
    }
    int v116 = *(_DWORD *)(v73 + 184);
    float v117 = *(float *)(v73 + 192);
    unsigned __int8 v118 = *(unsigned char *)(v92 + 24 * v90 + 8);
    int v162 = *(_DWORD *)(v73 + 188);
    int v163 = v101 & (v117 == 0.0);
    if (v118)
    {
      uint64_t v119 = 0;
      unsigned __int8 v118 = 0;
      if ((v101 & (v117 == 0.0)) != 0) {
        int v120 = 2;
      }
      else {
        int v120 = 0;
      }
      int v121 = (2 * v101) & 4;
      if ((v101 & 0x10) != 0) {
        int v121 = 4;
      }
      unsigned int v122 = v121 | (v101 >> 2) & 8 | v120;
      if (v122 <= 1) {
        unsigned int v122 = 1;
      }
      do
      {
        if (((v122 >> v119) & 1) != 0
          && v118 <= *(unsigned __int8 *)(v92 + 24 * v90 + 9 + v119))
        {
          unsigned __int8 v118 = *(unsigned char *)(v92 + 24 * v90 + 9 + v119);
        }
        ++v119;
      }
      while (v119 != 4);
    }
    if ((v101 & 8) != 0)
    {
      char v171 = v118;
      if ((v101 & 2) != 0)
      {
        unsigned int v123 = *(unsigned __int8 *)(a6 + 89);
        if (v118 > v123) {
          LOBYTE(v123) = v118;
        }
        char v171 = v123;
      }
    }
    else
    {
      char v171 = 0;
    }
    if (v101)
    {
      unsigned int v164 = *(_DWORD *)(v73 + 184);
      if (*(unsigned char *)(v73 + 158))
      {
LABEL_63:
        unsigned int v128 = *v72;
        int v168 = *(_DWORD *)(v73 + 196);
        char v169 = *((unsigned char *)v72 + 4);
        char v129 = *((unsigned char *)v72 + 5);
        char v130 = *(unsigned char *)(v73 + 150);
        char v131 = *(unsigned char *)(v73 + 155);
        __int16 v166 = *(_WORD *)(v73 + 148);
        char v167 = *(unsigned char *)(v73 + 154);
        char v132 = *(unsigned char *)(v73 + 156);
        uint64_t v133 = a5;
        if (a5)
        {
          LOBYTE(a5) = 1;
          a19 = a57;
        }
        int v134 = *(unsigned __int8 *)(a6 + 88);
        if (a53 | v134)
        {
          a33 = v128;
          a34 = v103;
          a35 = v102;
          a36 = v164;
          a37 = v100;
          a38 = v168;
          a39 = v166;
          a40 = 1;
          a41 = v171;
          a42 = v169;
          a43 = v129;
          a44 = v130;
          a45 = v131;
          a46 = v167;
          a47 = v132;
          a48 = v170;
          a50 = a5;
          if (v133) {
            a51 = a19;
          }
          if (v163 && (v116 != v162 && !v134 || a54 && !v134)) {
            a43 = v129 | 1;
          }
          a69 = 0;
          a66 = 0u;
          a67 = 0u;
          *(float32x4_t *)((char *)&a67 + 14) = 0u;
          *(void *)&a66 = v133;
          (*((void (**)(void **, unint64_t, unsigned int *, long long *, __n128))*a65 + 2))(a65, a32 + (a30 << 6) - 64, &a33, &a66, v136);
          int v135 = *(unsigned __int8 *)(a6 + 88);
        }
        else
        {
          int v135 = 0;
        }
        if (a55 && !v135)
        {
          a33 = v128;
          a34 = v103;
          a35 = v102;
          a37 = v100;
          a38 = v168;
          a39 = v166;
          a40 = 1;
          a41 = v171;
          a42 = v169;
          a44 = v130;
          a45 = v131;
          a46 = v167;
          a47 = v132;
          a48 = v170;
          a50 = a5;
          if (v133) {
            a51 = a19;
          }
          a36 = *(_DWORD *)(v73 + 188);
          a43 = v129 | 2;
          a69 = 0;
          a66 = 0u;
          a67 = 0u;
          *(float32x4_t *)((char *)&a67 + 14) = 0u;
          *(void *)&a66 = v133;
          (*((void (**)(void **, unint64_t, unsigned int *, long long *, __n128))*a65 + 2))(a65, a32 + (a30 << 6) - 64, &a33, &a66, v137);
          int v135 = *(unsigned __int8 *)(a6 + 88);
        }
        if (a54 && !v135)
        {
          a33 = v128;
          a34 = v103;
          a35 = v102;
          a36 = v164;
          a37 = v100;
          a38 = v168;
          a39 = v166;
          a41 = v171;
          a42 = v169;
          a44 = v130;
          a45 = v131;
          a46 = v167;
          a47 = v132;
          a48 = v170;
          a50 = a5;
          if (v133) {
            a51 = a19;
          }
          a40 = 0;
          a43 = v129 | 2;
          a69 = 0;
          a66 = 0u;
          a67 = 0u;
          *(float32x4_t *)((char *)&a67 + 14) = 0u;
          *(void *)&a66 = v133;
          (*((void (**)(void **, unint64_t, unsigned int *, long long *, __n128))*a65 + 2))(a65, a32 + (a30 << 6) - 64, &a33, &a66, v138);
        }
        a5 = v133;
        uint64_t v89 = v160;
        a2 = v161;
        goto LABEL_87;
      }
      if (*(unsigned char *)(v92 + 24 * v90 + 16)) {
        BOOL v124 = v117 == 0.0;
      }
      else {
        BOOL v124 = 1;
      }
      int v125 = v101 & 0xA;
      BOOL v126 = v124 || v125 == 0;
      unsigned int v127 = v118 | 0x80000000;
      if (v126) {
        unsigned int v127 = *(_DWORD *)(v73 + 184);
      }
    }
    else
    {
      unsigned int v127 = v118 & ((int)(v101 << 29) >> 31);
    }
    unsigned int v164 = v127;
    goto LABEL_63;
  }
LABEL_94:
  uint64_t v141 = a4;
  if (a65)
  {
    (*(void (**)(void **))*a65)(a65);
    if (a65 != &a61) {
      (*(void (**)(uint64_t))(*(void *)a64 + 40))(a64);
    }
    a65 = 0;
  }
  unint64_t v142 = a32;
  unint64_t v143 = a30;
  unint64_t v144 = 126 - 2 * __clz(a30);
  if (a30) {
    unint64_t v145 = v144;
  }
  else {
    unint64_t v145 = 0;
  }
  uint64_t result = std::__introsort<std::_ClassicAlgPolicy,re::RenderGraphMeshNodeBase::focusSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::$_1 &,re::RenderGraphMeshNodeBase::focusSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::FocusSortKey *,false>(a32, a32 + (a30 << 6), v145, 1uLL, v79, v80, v81, v82, v149, v150, v151, v152, v153, v154, v155, v156, v157, a4, vars0.i64[0],
             vars0.i64[1]);
  *(void *)(v141 + 16) = 0;
  ++*(_DWORD *)(v141 + 24);
  if (*(void *)(v141 + 8) >= v143)
  {
    if (!v143) {
      goto LABEL_106;
    }
  }
  else
  {
    re::DynamicArray<re::MeshLodLevelInfo>::setCapacity((void *)v141, v143);
  }
  unint64_t v147 = v143 << 6;
  unint64_t v148 = v142 + 45;
  do
  {
    LODWORD(a66) = *(_DWORD *)(v148 - 5);
    WORD2(a66) = *(_WORD *)(v148 - 1);
    DWORD2(a66) = 0;
    uint64_t result = (uint64_t)re::DynamicArray<re::MeshLodLevelInfo>::add((void *)v141, (uint64_t *)&a66);
    v148 += 64;
    v147 -= 64;
  }
  while (v147);
LABEL_106:
  if (v142)
  {
    uint64_t result = a28;
    if (a28) {
      return (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)a28 + 40))(a28, v142);
    }
  }
  return result;
}

uint64_t re::RenderGraphMeshNodeBase::techniqueSort(void *a1, uint64_t a2, uint64_t a3, re::DrawCallRecorderGroup *a4, uint64_t *a5)
{
  uint64_t v62 = *(void *)(*(void *)(a2 + 8) + 24);
  memset(v84, 0, sizeof(v84));
  uint64_t v85 = (uint64_t)a5;
  unint64_t v8 = *(void *)(a3 + 16);
  int32x4_t v83 = 0;
  unint64_t v80 = 0;
  unint64_t v81 = 0;
  int v82 = 0;
  unint64_t v79 = a5;
  re::DynamicArray<re::RenderGraphMeshNodeBase::techniqueSort(re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::Allocator *)::TechniqueSortKey>::setCapacity(&v79, v8);
  int v66 = ++v82;
  uint64_t v78 = 0;
  v75[1] = 0;
  uint64_t v76 = 0;
  int v77 = 0;
  v75[0] = a5;
  re::DynamicArray<re::MeshLodLevelInfo>::setCapacity(v75, 0);
  ++v77;
  if (*(void *)(a3 + 16))
  {
    uint64_t v14 = 0;
    unint64_t v15 = 0;
    unsigned int v64 = a1;
    while (1)
    {
      uint64_t v16 = *(void *)(a3 + 32);
      uint64_t v17 = (unsigned int *)(v16 + v14);
      unint64_t v18 = a1[1];
      if (v18 <= *(unsigned __int8 *)(v16 + v14 + 4)) {
        break;
      }
      uint64_t v19 = re::BucketArray<re::MeshPartDrawContext,128ul>::operator[](*(void *)(*a1 + 24 * *(unsigned __int8 *)(v16 + v14 + 4)), *v17);
      uint64_t v20 = v19;
      uint64_t v21 = *(void *)(v19 + 48);
      int v22 = *(void **)(v19 + 216);
      if (v22 && *v22)
      {
        re::DynamicArray<re::MeshLodLevelInfo>::add(v75, (uint64_t *)(v16 + v14));
      }
      else
      {
        uint64_t v9 = *(unsigned int *)(v19 + 144);
        if (v9 != -1)
        {
          TechniqueAtIndex = (re::MaterialTechnique *)re::MaterialParameterTableLayers::getTechniqueAtIndex(*(re::MaterialParameterTableLayers **)(v19 + 48), v9);
          TechniqueVariant = (_anonymous_namespace_ *)re::MaterialTechnique::getOrCreateTechniqueVariant(TechniqueAtIndex, 0, 0);
          uint64_t v25 = (unsigned __int8 *)TechniqueVariant;
          int v26 = (_OWORD *)(v21 + 88);
          if (*(unsigned char *)(v21 + 112) || *(void *)v26 || *(void *)(v21 + 96) || *(void *)(v21 + 104))
          {
            long long v27 = *(_OWORD *)(v21 + 104);
            v74[0] = *v26;
            v74[1] = v27;
            uint64_t v28 = *((unsigned char *)TechniqueAtIndex + 40) ? (uint64_t)TechniqueAtIndex + 48 : *(void *)TechniqueAtIndex + 8;
            if (*(void *)(v28 + 8))
            {
              uint64_t v73 = 0;
              unint64_t v29 = *(void *)(v28 + 24);
              v72[0] = 0;
              uint64_t v73 = ((v29 << 6)
                   + (v29 >> 2)
                   + re::CombinedDynamicFunctionConstants::hash((unsigned __int8 *)v74, v72)
                   - 0x61C8864680B583E9) ^ v29;
              uint64_t v30 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v62 + 336), &v73);
              if (v30 == -1)
              {
                uint64_t v32 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(v84, &v73);
                if (v32 == -1)
                {
                  uint64_t v71 = 0;
                  v67[0] = 0;
                  re::CombinedDynamicFunctionConstants::combinedMap((uint64_t *)v74, v67, (_anonymous_namespace_ *)&v68);
                  uint64_t v33 = re::FunctionConstantsEnumerator::enumerateFunctionConstantSet(v28, &v68);
                  if (v70)
                  {
                    if (v69) {
                      uint64_t v69 = 0;
                    }
                    if (v68) {
                      (*(void (**)(void))(*(void *)v70 + 40))();
                    }
                  }
                  uint64_t v71 = v33;
                  uint64_t v31 = (unint64_t *)re::HashBrown<unsigned long,unsigned long long,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::addNew((_anonymous_namespace_ *)v84, &v73, &v71);
                }
                else
                {
                  uint64_t v31 = (unint64_t *)(v84[1] + 16 * v32 + 8);
                }
              }
              else
              {
                uint64_t v31 = (unint64_t *)(*(void *)(v62 + 344) + 16 * v30 + 8);
              }
              TechniqueVariant = (_anonymous_namespace_ *)re::MaterialTechnique::getOrCreateTechniqueVariant(TechniqueAtIndex, *v31, 0);
              uint64_t v25 = (unsigned __int8 *)TechniqueVariant;
            }
          }
          uint64_t v34 = *(void *)(v20 + 40);
          if (!v34) {
            uint64_t v34 = *(void *)(v20 + 16);
          }
          uint64_t v35 = *(void *)(v34 + 16);
          if (v81 >= v80)
          {
            unint64_t v36 = v81 + 1;
            if (v80 < v81 + 1)
            {
              if (v79)
              {
                unint64_t v37 = 8;
                if (v80) {
                  unint64_t v37 = 2 * v80;
                }
                if (v37 <= v36) {
                  unint64_t v38 = v81 + 1;
                }
                else {
                  unint64_t v38 = v37;
                }
                re::DynamicArray<re::RenderGraphMeshNodeBase::techniqueSort(re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::Allocator *)::TechniqueSortKey>::setCapacity(&v79, v38);
                int v39 = v82;
              }
              else
              {
                re::DynamicArray<re::RenderGraphMeshNodeBase::techniqueSort(re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::Allocator *)::TechniqueSortKey>::setCapacity(&v79, v36);
                int v39 = v82 + 1;
              }
              int v66 = v39;
            }
          }
          unint64_t v40 = v81;
          char v63 = v83;
          unint64_t v41 = &v83[2 * v81];
          *((void *)v41 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
          *((void *)v41 + 2) = 0;
          *(void *)unint64_t v41 = 0;
          *(void *)((char *)v41 + 23) = 0;
          unint64_t v81 = v40 + 1;
          int v82 = ++v66;
          *((_DWORD *)v41 + 6) = *(_DWORD *)(v16 + v14);
          *((unsigned char *)v41 + 2re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = *((unsigned char *)v17 + 4);
          *((unsigned char *)v41 + 30) = *(unsigned char *)(v16 + v14 + 5);
          LOBYTE(v74[0]) = 0;
          int v42 = *(unsigned __int16 *)(v20 + 148);
          if (*(_WORD *)(v20 + 148))
          {
            re::DrawCallSortKey<3ul,unsigned long long>::appendUInt16((uint64_t)v41, *(unsigned __int16 *)(v20 + 148), v74);
            re::DrawCallSortKey<3ul,unsigned long long>::appendUInt8((uint64_t)v41, *(unsigned __int8 *)(v20 + 150), v74);
            LOBYTE(v74[0]) += 5;
          }
          else
          {
            re::DrawCallSortKey<3ul,unsigned long long>::appendUInt64((uint64_t)v41, *(void *)(**(void **)v25 + 2728), v74);
          }
          re::DrawCallSortKey<3ul,unsigned long long>::appendUInt8((uint64_t)v41, v25[18], v74);
          re::DrawCallSortKey<3ul,unsigned long long>::appendUInt64((uint64_t)v41, v35, v74);
          re::DrawCallSortKey<3ul,unsigned long long>::appendBytes((uint64_t)v41, *(void *)(*(void *)(v20 + 16) + 504) >> 1, 0, 7uLL, v74);
          if (a4)
          {
            unsigned int SortingDebugContextAndReturnIndex = re::DrawCallRecorderGroup::allocateSortingDebugContextAndReturnIndex(a4);
            if (SortingDebugContextAndReturnIndex <= 0xFE)
            {
              char v44 = SortingDebugContextAndReturnIndex;
              BOOL v45 = v42 != 0;
              uint64_t MutableSortingContext = re::DrawCallRecorderGroup::getMutableSortingContext((uint64_t)a4, SortingDebugContextAndReturnIndex);
              re::DynamicString::format((re::DynamicString *)"Technique Sort - IsGroupedTechnique: %d TechniqueGroupID: %d IndexInTechniqueGroup: %d TechniqueAndMaterialNameHash: %zu HSRFlush: %d DescriptorHash: %zu MeshNameHash: %llu ", (re::DynamicString *)&v68, v45, *(unsigned __int16 *)(v20 + 148), *(unsigned __int8 *)(v20 + 150), *(void *)(**(void **)v25 + 2728), v25[18], v35, *(void *)(*(void *)(v20 + 16) + 504) >> 1);
              re::DynamicString::operator=((re::DynamicString *)MutableSortingContext, (re::DynamicString *)&v68);
              __int16 v47 = *(long long **)(v20 + 32);
              if (v47)
              {
                long long v48 = *v47;
                long long v49 = v47[1];
              }
              else
              {
                long long v48 = 0uLL;
                long long v49 = 0uLL;
              }
              *(_OWORD *)(MutableSortingContext + 32) = v48;
              *(_OWORD *)(MutableSortingContext + 4re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = v49;
              __n128 v13 = *(__n128 *)(v20 + 64);
              long long v50 = *(_OWORD *)(v20 + 80);
              long long v51 = *(_OWORD *)(v20 + 112);
              *(_OWORD *)(MutableSortingContext + 96) = *(_OWORD *)(v20 + 96);
              *(_OWORD *)(MutableSortingContext + 112) = v51;
              *(__n128 *)(MutableSortingContext + 64) = v13;
              *(_OWORD *)(MutableSortingContext + 80) = v50;
              if (*(unsigned char *)(MutableSortingContext + 128)) {
                *(unsigned char *)(MutableSortingContext + 12re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = 0;
              }
              BYTE13(v63[2 * v40 + 1]) = v44;
              if (v68 && (v69 & 1) != 0) {
                (*(void (**)(void))(*(void *)v68 + 40))();
              }
            }
          }
          a1 = v64;
        }
      }
      ++v15;
      v14 += 12;
      if (v15 >= *(void *)(a3 + 16)) {
        goto LABEL_56;
      }
    }
    re::internal::assertLog((re::internal *)6, v9, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, *(unsigned __int8 *)(v16 + v14 + 4), v18);
    uint64_t result = _os_crash();
    __break(1u);
  }
  else
  {
LABEL_56:
    long long v52 = v83;
    unint64_t v53 = v81;
    unint64_t v54 = 126 - 2 * __clz(v81);
    if (v81) {
      unint64_t v55 = v54;
    }
    else {
      unint64_t v55 = 0;
    }
    v56.n128_f64[0] = std::__introsort<std::_ClassicAlgPolicy,re::RenderGraphMeshNodeBase::techniqueSort(re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::Allocator *)::$_0 &,re::RenderGraphMeshNodeBase::techniqueSort(re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::Allocator *)::TechniqueSortKey *,false>(v83, &v83[2 * v81], v55, 1uLL, v10, v13, v11, v12);
    *(void *)(a3 + 16) = 0;
    ++*(_DWORD *)(a3 + 24);
    if (v53)
    {
      uint64_t v57 = 32 * v53;
      char v58 = (char *)v52 + 30;
      do
      {
        LODWORD(v6re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = *(_DWORD *)(v58 - 6);
        BYTE4(v6re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = *(v58 - 2);
        BYTE5(v6re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = *v58;
        LODWORD(v69) = *(v58 - 1);
        re::DynamicArray<re::MeshLodLevelInfo>::add((void *)a3, &v68);
        v58 += 32;
        v57 -= 32;
      }
      while (v57);
    }
    if (v76)
    {
      unsigned int v59 = v78;
      uint64_t v60 = 12 * v76;
      do
      {
        re::DynamicArray<re::MeshLodLevelInfo>::add((void *)a3, v59);
        unsigned int v59 = (uint64_t *)((char *)v59 + 12);
        v60 -= 12;
      }
      while (v60);
    }
    if (v75[0] && v78) {
      (*(void (**)(__n128))(*(void *)v75[0] + 40))(v56);
    }
    if (v52 && v79) {
      (*(void (**)(uint64_t *, long long *, __n128))(*v79 + 40))(v79, v52, v56);
    }
    uint64_t result = v85;
    if (v85)
    {
      if (v84[1]) {
        v84[1] = 0;
      }
      if (v84[0]) {
        return (*(uint64_t (**)(__n128))(*(void *)v85 + 40))(v56);
      }
    }
  }
  return result;
}

uint64_t re::RenderGraphMeshNodeBase::makeDrawCallsFromMeshParts(uint64_t *a1, uint64_t a2, unint64_t a3, float32x4_t *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = re::RenderGraphDataStore::get<re::CameraData>(a4[73].i64[0], *(void *)(a4[2].i64[1] + 48));
  re::RenderGraphDataStore::get<re::CameraMatrices>(a4[73].i64[0], *(void *)(a4[2].i64[1] + 48));
  return re::RenderGraphMeshNodeBase::makeDrawCallsFromMeshParts(a1, a2, a3, a4, a5, *(unsigned __int8 *)(v12 + 490), v13, v14, a6);
}

void ___Z28isAutomaticInstancingEnabledv_block_invoke(uint64_t a1, const char *a2)
{
  re::Defaults::BOOLValue((re::Defaults *)"enableAutomaticInstancing", a2, &v5);
  if (v5)
  {
    isAutomaticInstancingEnabled(void)::g_enableAutomaticInstancing = v6;
    if (v6) {
      return;
    }
  }
  else if (isAutomaticInstancingEnabled(void)::g_enableAutomaticInstancing)
  {
    return;
  }
  uint64_t v3 = *re::graphicsLogObjects(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_233120000, v3, OS_LOG_TYPE_DEFAULT, "Automatic instancing of draw calls has been disabled.", v4, 2u);
  }
}

double re::RenderGraphMeshNodeBase::drawDebugSortPoints(re::RenderGraphMeshNodeBase *this, const re::RenderGraphContext *a2, const re::MeshSortingCollection *a3, double result)
{
  uint64_t v4 = *(void *)(*((void *)a2 + 1) + 88);
  if (v4)
  {
    v37.i64[0] = 0x5960C87A30814232;
    v37.i64[1] = (uint64_t)"meshsorting:visualizeRPGSortPoints";
    LOBYTE(v47) = 0;
    if (re::DebugSettingsManager::getWithErrorCode<BOOL>(v4, &v37, &v47))
    {
      re::StringID::destroyString((re::StringID *)&v37);
    }
    else
    {
      int v7 = v47;
      re::StringID::destroyString((re::StringID *)&v37);
      if (a3)
      {
        if (v7)
        {
          uint64_t v8 = *(void *)(*((void *)a2 + 1) + 104);
          if (v8)
          {
            if (*(void *)(v8 + 304))
            {
              unsigned int v49 = 0;
              long long v47 = 0u;
              long long v48 = 0u;
              uint64_t v50 = 0x7FFFFFFFLL;
              uint64_t v9 = *((unsigned int *)a3 + 20);
              if (v9)
              {
                uint64_t v10 = 0;
                uint64_t v11 = (int *)(*((void *)a3 + 8) + 8);
                while (1)
                {
                  int v12 = *v11;
                  v11 += 10;
                  if (v12 < 0) {
                    break;
                  }
                  if (v9 == ++v10)
                  {
                    LODWORD(v10) = *((_DWORD *)a3 + 20);
                    break;
                  }
                }
              }
              else
              {
                LODWORD(v10) = 0;
              }
              if (v9 == v10)
              {
                unsigned int v13 = 0;
                LODWORD(v14) = 0;
                uint64_t v46 = 0;
                uint64_t v43 = 0;
                uint64_t v44 = 0;
                uint64_t v42 = 0;
                int v45 = 0;
              }
              else
              {
                uint64_t v15 = v10;
                unsigned int v16 = *((_DWORD *)a3 + 20);
                do
                {
                  uint64_t v17 = *((void *)a3 + 8);
                  v37.i64[0] = 0;
                  v37.i64[0] = *(void *)(v17 + 40 * v15 + 24);
                  if (v37.i64[0])
                  {
                    re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew((uint64_t)&v47, (uint64_t *)&v37);
                    unsigned int v16 = *((_DWORD *)a3 + 20);
                  }
                  if (v16 <= (int)v10 + 1) {
                    unsigned int v18 = v10 + 1;
                  }
                  else {
                    unsigned int v18 = v16;
                  }
                  while (1)
                  {
                    uint64_t v15 = (v10 + 1);
                    if (v18 - 1 == v10) {
                      break;
                    }
                    LODWORD(v10) = v10 + 1;
                    unsigned int v19 = v15;
                    if ((*(_DWORD *)(*((void *)a3 + 8) + 40 * v15 + 8) & 0x80000000) != 0) {
                      goto LABEL_27;
                    }
                  }
                  unsigned int v19 = v18;
LABEL_27:
                  LODWORD(v10) = v19;
                }
                while (v9 != v19);
                unsigned int v13 = v49;
                uint64_t v46 = 0;
                uint64_t v43 = 0;
                uint64_t v44 = 0;
                uint64_t v42 = 0;
                int v45 = 0;
                uint64_t v14 = 0;
                if (v49)
                {
                  uint64_t v20 = (int *)(v48 + 8);
                  while (1)
                  {
                    int v21 = *v20;
                    v20 += 6;
                    if (v21 < 0) {
                      break;
                    }
                    if (v49 == ++v14)
                    {
                      LODWORD(v14) = v49;
                      break;
                    }
                  }
                }
              }
              if (v13 != v14)
              {
                uint64_t v22 = v14;
                uint64_t v23 = (char *)a3 + 144;
                unsigned int v24 = v13;
                uint64_t v25 = v48;
                do
                {
                  uint64_t v26 = re::HashTable<re::ecs2::Entity const*,re::ecs2::BillboardData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet((uint64_t)v23, *(void *)(v25 + 24 * v22 + 16));
                  if (v26)
                  {
                    uint64_t v28 = (float *)v26;
                    v27.i32[0] = 0;
                    float32x4_t v36 = *(float32x4_t *)(v26 + 48);
                    int8x16_t v29 = (int8x16_t)v36;
                    v29.i8[0] = *(unsigned char *)(v26 + 32);
                    int8x16_t v41 = vbslq_s8(vdupq_lane_s8((int8x8_t)*(_OWORD *)&vceqq_s8(v29, v27), 0), (int8x16_t)xmmword_2344125B0, (int8x16_t)xmmword_2344125A0);
                    uint64_t v30 = *(void *)(*((void *)a2 + 1) + 104);
                    if (v30) {
                      uint64_t v31 = *(os_unfair_lock_s **)(v30 + 304);
                    }
                    else {
                      uint64_t v31 = 0;
                    }
                    float32x4_t v37 = (float32x4_t)xmmword_23435FD50;
                    float32x4_t v38 = (float32x4_t)xmmword_23435FD60;
                    long long v39 = xmmword_23435FD80;
                    long long v40 = xmmword_23435FBB0;
                    re::DebugRenderer::drawBox(v31, &v37, v28, (long long *)v41.i8, 1);
                    float32x4_t v37 = vaddq_f32(v36, (float32x4_t)xmmword_2344125C0);
                    float32x4_t v38 = vaddq_f32(v36, (float32x4_t)xmmword_2344125D0);
                    long long v39 = (__int128)v41;
                    re::DynamicArray<re::Pair<re::AABB,unsigned int,true>>::add((uint64_t)&v42, (uint64_t)&v37);
                    float32x4_t v37 = vaddq_f32(v36, (float32x4_t)xmmword_2344125E0);
                    float32x4_t v38 = vaddq_f32(v36, (float32x4_t)xmmword_2344125F0);
                    long long v39 = (__int128)v41;
                    re::DynamicArray<re::Pair<re::AABB,unsigned int,true>>::add((uint64_t)&v42, (uint64_t)&v37);
                    float32x4_t v37 = vaddq_f32(v36, (float32x4_t)xmmword_234412600);
                    float32x4_t v38 = vaddq_f32(v36, (float32x4_t)xmmword_234412610);
                    long long v39 = (__int128)v41;
                    re::DynamicArray<re::Pair<re::AABB,unsigned int,true>>::add((uint64_t)&v42, (uint64_t)&v37);
                    unsigned int v24 = v49;
                    uint64_t v25 = v48;
                  }
                  if (v24 <= (int)v14 + 1) {
                    unsigned int v32 = v14 + 1;
                  }
                  else {
                    unsigned int v32 = v24;
                  }
                  while (1)
                  {
                    uint64_t v22 = (v14 + 1);
                    if (v32 - 1 == v14) {
                      break;
                    }
                    LODWORD(v14) = v14 + 1;
                    unsigned int v33 = v22;
                    if ((*(_DWORD *)(v25 + 24 * v22 + 8) & 0x80000000) != 0) {
                      goto LABEL_47;
                    }
                  }
                  unsigned int v33 = v32;
LABEL_47:
                  LODWORD(v14) = v33;
                }
                while (v13 != v33);
              }
              uint64_t v34 = *(void *)(*((void *)a2 + 1) + 104);
              if (v34) {
                uint64_t v35 = *(os_unfair_lock_s **)(v34 + 304);
              }
              else {
                uint64_t v35 = 0;
              }
              v37.i64[0] = v46;
              v37.i64[1] = v44;
              re::DebugRenderer::drawLines(v35, (uint64_t)&v37, 0);
              if (v42)
              {
                if (v46) {
                  (*(void (**)(uint64_t))(*(void *)v42 + 40))(v42);
                }
                uint64_t v46 = 0;
              }
              return re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)&v47);
            }
          }
        }
      }
    }
  }
  return result;
}

void *anonymous namespace'::filterMeshPartContextsInternal@<X0>(void *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  if (a2)
  {
    uint64_t v8 = a1;
    unint64_t v9 = 0;
    uint64_t v10 = 24 * a2;
    uint64_t v11 = a1;
    do
    {
      uint64_t v12 = *v11;
      v11 += 3;
      v9 += *(void *)(v12 + 40);
      v10 -= 24;
    }
    while (v10);
    *(void *)(a5 + 32) = 0;
    *(void *)(a5 + re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = 0;
    *(void *)(a5 + 16) = 0;
    *(_DWORD *)(a5 + 24) = 0;
    *(void *)a5 = a4;
    uint64_t result = re::DynamicArray<re::MeshLodLevelInfo>::setCapacity((void *)a5, v9);
    uint64_t v14 = 0;
    unsigned __int8 v15 = 0;
    ++*(_DWORD *)(a5 + 24);
    unint64_t v52 = a2;
    unint64_t v53 = v8;
    while (1)
    {
      if (*(void *)(a3 + 32) | *(void *)(a3 + 16)) {
        BOOL v16 = 1;
      }
      else {
        BOOL v16 = *(_DWORD *)(a3 + 4) != 0;
      }
      uint64_t v17 = &v8[3 * v14];
      int v19 = *((unsigned __int8 *)v17 + 15);
      unsigned int v18 = (char *)v17 + 15;
      BOOL v20 = 1;
      if (!v19 && *(v18 - 1) == 255) {
        BOOL v20 = BYTE5(v8[3 * v14 + 1]) != 0;
      }
      int v21 = &v8[3 * v14];
      if (!v16)
      {
        if (*(void *)(a3 + 80)) {
          BOOL v20 = 1;
        }
        if (!v20 && !*(unsigned char *)(a3 + 92))
        {
          if (*(void *)(*v21 + 40))
          {
            unsigned int v22 = 1;
            do
            {
              LODWORD(v56) = v22 - 1;
              WORD2(v56) = v15;
              int v57 = 0;
              uint64_t result = re::DynamicArray<re::MeshLodLevelInfo>::add((void *)a5, &v56);
            }
            while (*(void *)(*v21 + 40) > (unint64_t)v22++);
          }
          goto LABEL_71;
        }
      }
      BOOL v54 = v16;
      uint64_t result = (void *)*v21;
      if (*(void *)(*v21 + 40)) {
        break;
      }
LABEL_71:
      uint64_t v14 = ++v15;
      uint64_t v8 = v53;
      if (v52 <= v15) {
        return result;
      }
    }
    unint64_t v24 = 0;
    unsigned int v25 = 0;
    unint64_t v55 = (unsigned __int8 *)&v53[3 * v14 + 1] + 5;
    while (1)
    {
      uint64_t v26 = re::BucketArray<re::MeshPartDrawContext,128ul>::operator[]((uint64_t)result, v24);
      uint64_t v27 = v26;
      if (*(_DWORD *)(v26 + 144) != -1 || (unsigned int v32 = *(void **)(v26 + 216)) != 0 && *v32)
      {
        unsigned int v28 = *(unsigned __int8 *)(v26 + 153);
        int v29 = (2 * v28) & 4;
        if ((v28 & 0x10) != 0) {
          int v29 = 4;
        }
        unsigned int v30 = v29 | (v28 >> 2) & 8 | (2 * v28) & (2 * (*(float *)(v26 + 192) == 0.0));
        if (v30 <= 1) {
          unsigned int v30 = 1;
        }
        BOOL v31 = (v30 & *v18) == 0 && (*(v18 - 1) & v30) != 0 && (*v55 & ~v30) == 0;
        if (((*(_DWORD *)a3 ^ *(_DWORD *)(v26 + 180)) & *(_DWORD *)(a3 + 4)) == 0 && v31)
        {
          uint64_t v34 = *(void *)(a3 + 80);
          if ((!v34 || (*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v34 + 16))(v34, v27))
            && (!*(unsigned char *)(a3 + 92)
             || (*(unsigned char *)(v27 + 153) & 8) != 0
             && *(float *)(v27 + 160) == *(float *)(a3 + 96)
             && *(unsigned __int8 *)(v27 + 154) == *(unsigned __int8 *)(a3 + 100)
             && *(unsigned __int8 *)(v27 + 156) == *(unsigned __int8 *)(a3 + 101)))
          {
            uint64_t v35 = *(void **)(v27 + 216);
            if (v35)
            {
              if (*v35) {
                goto LABEL_69;
              }
            }
            if (!v54) {
              goto LABEL_69;
            }
            TechniqueAtIndex = (uint64_t *)re::MaterialParameterTableLayers::getTechniqueAtIndex(*(re::MaterialParameterTableLayers **)(v27 + 48), *(_DWORD *)(v27 + 144));
            uint64_t v37 = *TechniqueAtIndex;
            uint64_t v38 = *(void *)(a3 + 16);
            if (v38)
            {
              uint64_t v50 = *TechniqueAtIndex;
              uint64_t v39 = v37 + 2648;
              long long v40 = (void *)(*(void *)(a3 + 8) + 24);
              uint64_t v41 = 32 * v38;
              while (1)
              {
                uint64_t v42 = (void *)re::HashTable<re::WeakStringID,re::RenderFrameContextBuilder::Result::PerSceneData *,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::tryGet(v39, *(v40 - 3) >> 1);
                if (v42)
                {
                  unint64_t v43 = *(v40 - 1);
                  if (v43 <= 1 && *v40 && !*(unsigned char *)*v40) {
                    break;
                  }
                  if (*v42 == v43 >> 1) {
                    break;
                  }
                }
                v40 += 4;
                v41 -= 32;
                if (!v41)
                {
                  char v51 = 1;
                  goto LABEL_59;
                }
              }
              char v51 = 0;
LABEL_59:
              uint64_t v37 = v50;
            }
            else
            {
              char v51 = 0;
            }
            uint64_t v44 = *(void *)(a3 + 32);
            if (v44)
            {
              uint64_t v45 = v37 + 2648;
              uint64_t v46 = (void *)(*(void *)(a3 + 24) + 24);
              uint64_t v47 = 32 * v44;
              do
              {
                long long v48 = (void *)re::HashTable<re::WeakStringID,re::RenderFrameContextBuilder::Result::PerSceneData *,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::tryGet(v45, *(v46 - 3) >> 1);
                if (v48)
                {
                  unint64_t v49 = *(v46 - 1);
                  if (v49 <= 1 && *v46 && !*(unsigned char *)*v46) {
                    goto LABEL_70;
                  }
                  if (*v48 == v49 >> 1) {
                    goto LABEL_70;
                  }
                }
                v46 += 4;
                v47 -= 32;
              }
              while (v47);
            }
            if ((v51 & 1) == 0)
            {
LABEL_69:
              LODWORD(v56) = v25;
              WORD2(v56) = v15;
              int v57 = 0;
              re::DynamicArray<re::MeshLodLevelInfo>::add((void *)a5, &v56);
            }
          }
        }
      }
LABEL_70:
      uint64_t result = (void *)*v21;
      unint64_t v24 = ++v25;
      if (*(void *)(*v21 + 40) <= (unint64_t)v25) {
        goto LABEL_71;
      }
    }
  }
  *(void *)(a5 + 32) = 0;
  *(void *)(a5 + re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = 0;
  *(void *)(a5 + 16) = 0;
  *(_DWORD *)(a5 + 24) = 0;
  *(void *)a5 = a4;
  uint64_t result = re::DynamicArray<re::MeshLodLevelInfo>::setCapacity((void *)a5, 0);
  ++*(_DWORD *)(a5 + 24);
  return result;
}

void *re::introspect_MeshSortMode(re *this, const re::IntrospectionBase *a2)
{
  int v2 = (int)this;
  {
    if (v9)
    {
      uint64_t v10 = re::introspectionAllocator(v9);
      uint64_t v11 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v10 + 32))(v10, 24, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *((void *)v11 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
      *((void *)v11 + 2) = "None";
      re::introspect_MeshSortMode(BOOL)::enumAttributes = (uint64_t)v11;
      uint64_t v12 = re::introspectionAllocator(v11);
      unsigned int v13 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 24, 8);
      *(_DWORD *)unsigned int v13 = 1;
      *((void *)v13 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 1;
      *((void *)v13 + 2) = "TechniqueSort";
      qword_2687A17C8 = (uint64_t)v13;
      uint64_t v14 = re::introspectionAllocator(v13);
      unsigned __int8 v15 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v14 + 32))(v14, 24, 8);
      *(_DWORD *)unsigned __int8 v15 = 1;
      *((void *)v15 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 3;
      *((void *)v15 + 2) = "FrontToBack";
      qword_2687A17D0 = (uint64_t)v15;
      BOOL v16 = re::introspectionAllocator(v15);
      uint64_t v17 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v16 + 32))(v16, 24, 8);
      *(_DWORD *)uint64_t v17 = 1;
      *((void *)v17 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 2;
      *((void *)v17 + 2) = "BackToFront";
      qword_2687A17D8 = (uint64_t)v17;
      unsigned int v18 = re::introspectionAllocator(v17);
      int v19 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v18 + 32))(v18, 24, 8);
      *(_DWORD *)int v19 = 1;
      *((void *)v19 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 5;
      *((void *)v19 + 2) = "FocusFrontToBack";
      qword_2687A17E0 = (uint64_t)v19;
      BOOL v20 = re::introspectionAllocator(v19);
      uint64_t v21 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v20 + 32))(v20, 24, 8);
      *(_DWORD *)uint64_t v21 = 1;
      *(void *)(v21 + re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = 4;
      *(void *)(v21 + 16) = "FocusBackToFront";
      qword_2687A17E8 = v21;
    }
  }
  {
    unsigned int v22 = re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&re::introspect_MeshSortMode(BOOL)::info, "MeshSortMode", 4, 4, 1, 1);
    *(void *)unsigned int v22 = &unk_26E715E00;
    *((void *)v22 + re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = &re::introspect_MeshSortMode(BOOL)::enumTable;
    *((_DWORD *)v22 + 4) = 9;
  }
  if (v2)
  {
    if (re::introspect_MeshSortMode(BOOL)::isInitialized) {
      return &re::introspect_MeshSortMode(BOOL)::info;
    }
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v24);
    char v3 = re::introspect_MeshSortMode(BOOL)::isInitialized;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v24);
    if (v3) {
      return &re::introspect_MeshSortMode(BOOL)::info;
    }
    char v5 = re::introspectionSharedMutex(v4);
    std::__shared_mutex_base::lock(v5);
    if (re::introspect_MeshSortMode(BOOL)::isInitialized)
    {
LABEL_9:
      int v7 = re::introspectionSharedMutex(v6);
      std::__shared_mutex_base::unlock(v7);
      return &re::introspect_MeshSortMode(BOOL)::info;
    }
  }
  re::introspect_MeshSortMode(BOOL)::isInitialized = 1;
  re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&re::introspect_MeshSortMode(BOOL)::info, a2);
  v23[0] = 0x38AFE39ADCB26B1CLL;
  v23[1] = (uint64_t)"MeshSortMode";
  xmmword_2687A1818 = v24;
  re::StringID::destroyString((re::StringID *)v23);
  if ((v2 & 1) == 0) {
    goto LABEL_9;
  }
  return &re::introspect_MeshSortMode(BOOL)::info;
}

void re::internal::Callable<re::RenderGraphMeshNodeBase::depthSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::$_0,void ()(anonymous namespace'::DepthSortKey &,anonymous namespace'::CommonSortKeyArgs const&,re::DrawCallRecorderGroup *)>::~Callable()
{
}

uint64_t re::internal::Callable<re::RenderGraphMeshNodeBase::depthSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::$_0,void ()(anonymous namespace'::DepthSortKey &,anonymous namespace'::CommonSortKeyArgs const&,re::DrawCallRecorderGroup *)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6 = *a4;
  *(_DWORD *)(a2 + 32) = *(_DWORD *)a3;
  *(unsigned char *)(a2 + 36) = *(unsigned char *)(a3 + 28);
  *(unsigned char *)(a2 + 44) = *(unsigned char *)(a3 + 29);
  float v7 = *(float *)(a1 + 8);
  char v13 = 0;
  re::DrawCallSortKey<4ul,unsigned long long>::appendFloat(a2, &v13, v7 * *(float *)(a3 + 4));
  re::DrawCallSortKey<4ul,unsigned long long>::appendUInt8(a2, *(unsigned __int8 *)(a3 + 32), &v13);
  re::DrawCallSortKey<4ul,unsigned long long>::appendUInt8(a2, *(unsigned __int8 *)(a3 + 33), &v13);
  re::DrawCallSortKey<4ul,unsigned long long>::appendUInt8(a2, *(unsigned __int8 *)(a3 + 27), &v13);
  re::DrawCallSortKey<4ul,unsigned long long>::appendInt8(a2, (int)(float)(v7 * (float)*(char *)(a3 + 34)), &v13);
  re::DrawCallSortKey<4ul,unsigned long long>::appendFloat(a2, &v13, v7 * *(float *)(a3 + 8));
  re::DrawCallSortKey<4ul,unsigned long long>::appendUInt8(a2, *(unsigned __int8 *)(a3 + 31), &v13);
  re::DrawCallSortKey<4ul,unsigned long long>::appendInt32(a2, *(unsigned int *)(a3 + 12), &v13);
  re::DrawCallSortKey<4ul,unsigned long long>::appendFloat(a2, &v13, v7 * *(float *)(a3 + 16));
  re::DrawCallSortKey<4ul,unsigned long long>::appendUInt16(a2, *(unsigned __int16 *)(a3 + 24), &v13);
  re::DrawCallSortKey<4ul,unsigned long long>::appendUInt8(a2, *(unsigned __int8 *)(a3 + 30), &v13);
  re::DrawCallSortKey<4ul,unsigned long long>::appendUInt32(a2, *(unsigned int *)(a3 + 20), &v13);
  uint64_t result = re::DrawCallSortKey<4ul,unsigned long long>::appendUInt8(a2, *(unsigned __int8 *)(a3 + 26), &v13);
  if (v6)
  {
    re::DynamicString::format((re::DynamicString *)"Depth Sort - OuterGroupDistance: %f OuterGroupTiebreaker: %d OuterGroupSuborder: %d OuterOrder: %d InnerGroupCameraInsideOutsideOrder: %d InnerGroupDistance: %f InnerGroupTiebreaker: %d InnerOrder: %d MeshDistance: %f TechniqueGroupID: %d IndexInTechniqueGroup: %d CreationOrder: %d DepthPrepassPriority: %d ", (re::DynamicString *)&v10, *(float *)(a3 + 4), *(unsigned __int8 *)(a3 + 32), *(unsigned __int8 *)(a3 + 33), *(unsigned __int8 *)(a3 + 27), *(char *)(a3 + 34), *(float *)(a3 + 8), *(unsigned __int8 *)(a3 + 31), *(unsigned int *)(a3 + 12), *(float *)(a3 + 16), *(unsigned __int16 *)(a3 + 24), *(unsigned __int8 *)(a3 + 30), *(unsigned int *)(a3 + 20), *(unsigned __int8 *)(a3 + 26));
    if (*(unsigned char *)(a3 + 36))
    {
      uint64_t MutableSortingContext = (re::DynamicString *)re::DrawCallRecorderGroup::getMutableSortingContext(v6, *(_DWORD *)(a3 + 40));
      re::DynamicString::operator=(MutableSortingContext, (re::DynamicString *)&v10);
      *(_DWORD *)(a2 + 40) = *(_DWORD *)(a3 + 40);
    }
    uint64_t result = v10;
    if (v10)
    {
      if (v11) {
        return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v10 + 40))(v10, v12);
      }
    }
  }
  return result;
}

uint64_t re::internal::Callable<re::RenderGraphMeshNodeBase::depthSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::$_0,void ()(anonymous namespace'::DepthSortKey &,anonymous namespace'::CommonSortKeyArgs const&,re::DrawCallRecorderGroup *)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E71DD18;
  *(_DWORD *)(a2 + re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = *(_DWORD *)(a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<re::RenderGraphMeshNodeBase::depthSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::$_0,void ()(anonymous namespace'::DepthSortKey &,anonymous namespace'::CommonSortKeyArgs const&,re::DrawCallRecorderGroup *)>::moveInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E71DD18;
  *(_DWORD *)(a2 + re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = *(_DWORD *)(a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<re::RenderGraphMeshNodeBase::depthSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::$_0,void ()(anonymous namespace'::DepthSortKey &,anonymous namespace'::CommonSortKeyArgs const&,re::DrawCallRecorderGroup *)>::size()
{
  return 16;
}

void re::internal::Callable<re::RenderGraphMeshNodeBase::focusSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::$_0,void ()(re::RenderGraphMeshNodeBase::focusSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::FocusSortKey &,anonymous namespace'::CommonSortKeyArgs const&,re::DrawCallRecorderGroup *)>::~Callable()
{
}

uint64_t re::internal::Callable<re::RenderGraphMeshNodeBase::focusSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::$_0,void ()(re::RenderGraphMeshNodeBase::focusSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::FocusSortKey &,anonymous namespace'::CommonSortKeyArgs const&,re::DrawCallRecorderGroup *)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6 = *a4;
  *(_DWORD *)(a2 + 40) = *(_DWORD *)a3;
  *(_WORD *)(a2 + 44) = *(_WORD *)(a3 + 28);
  float v7 = *(float *)(a1 + 8);
  char v13 = 0;
  re::DrawCallSortKey<5ul,unsigned long long>::appendFloat(a2, &v13, v7 * *(float *)(a3 + 4));
  re::DrawCallSortKey<5ul,unsigned long long>::appendUInt8(a2, *(unsigned __int8 *)(a3 + 32), &v13);
  re::DrawCallSortKey<5ul,unsigned long long>::appendUInt8(a2, *(unsigned __int8 *)(a3 + 33), &v13);
  re::DrawCallSortKey<5ul,unsigned long long>::appendUInt8(a2, *(unsigned __int8 *)(a3 + 27), &v13);
  re::DrawCallSortKey<5ul,unsigned long long>::appendInt8(a2, (int)(float)(v7 * (float)*(char *)(a3 + 34)), &v13);
  re::DrawCallSortKey<5ul,unsigned long long>::appendFloat(a2, &v13, v7 * *(float *)(a3 + 8));
  re::DrawCallSortKey<5ul,unsigned long long>::appendUInt8(a2, *(unsigned __int8 *)(a3 + 31), &v13);
  re::DrawCallSortKey<5ul,unsigned long long>::appendInt32(a2, *(unsigned int *)(a3 + 12), &v13);
  re::DrawCallSortKey<5ul,unsigned long long>::appendFloat(a2, &v13, v7 * *(float *)(a3 + 16));
  re::DrawCallSortKey<5ul,unsigned long long>::appendUInt16(a2, *(unsigned __int16 *)(a3 + 24), &v13);
  re::DrawCallSortKey<5ul,unsigned long long>::appendUInt8(a2, *(unsigned __int8 *)(a3 + 30), &v13);
  re::DrawCallSortKey<5ul,unsigned long long>::appendUInt32(a2, *(unsigned int *)(a3 + 20), &v13);
  uint64_t result = re::DrawCallSortKey<5ul,unsigned long long>::appendUInt8(a2, *(unsigned __int8 *)(a3 + 26), &v13);
  if (v6)
  {
    re::DynamicString::format((re::DynamicString *)"Depth Sort - OuterGroupDistance: %f OuterGroupTiebreaker: %d OuterGroupSuborder: %d OuterOrder: %d InnerGroupCameraInsideOutsideOrder: %d InnerGroupDistance: %f InnerGroupTiebreaker: %d InnerOrder: %d MeshDistance: %f TechniqueGroupID: %d IndexInTechniqueGroup: %d CreationOrder: %d DepthPrepassPriority: %d ", (re::DynamicString *)&v10, *(float *)(a3 + 4), *(unsigned __int8 *)(a3 + 32), *(unsigned __int8 *)(a3 + 33), *(unsigned __int8 *)(a3 + 27), *(char *)(a3 + 34), *(float *)(a3 + 8), *(unsigned __int8 *)(a3 + 31), *(unsigned int *)(a3 + 12), *(float *)(a3 + 16), *(unsigned __int16 *)(a3 + 24), *(unsigned __int8 *)(a3 + 30), *(unsigned int *)(a3 + 20), *(unsigned __int8 *)(a3 + 26));
    if (*(unsigned char *)(a3 + 36))
    {
      uint64_t MutableSortingContext = (re::DynamicString *)re::DrawCallRecorderGroup::getMutableSortingContext(v6, *(_DWORD *)(a3 + 40));
      re::DynamicString::operator=(MutableSortingContext, (re::DynamicString *)&v10);
      *(_DWORD *)(a2 + 4re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = *(_DWORD *)(a3 + 40);
    }
    uint64_t result = v10;
    if (v10)
    {
      if (v11) {
        return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v10 + 40))(v10, v12);
      }
    }
  }
  return result;
}

uint64_t re::internal::Callable<re::RenderGraphMeshNodeBase::focusSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::$_0,void ()(re::RenderGraphMeshNodeBase::focusSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::FocusSortKey &,anonymous namespace'::CommonSortKeyArgs const&,re::DrawCallRecorderGroup *)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E71DD80;
  *(_DWORD *)(a2 + re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = *(_DWORD *)(a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<re::RenderGraphMeshNodeBase::focusSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::$_0,void ()(re::RenderGraphMeshNodeBase::focusSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::FocusSortKey &,anonymous namespace'::CommonSortKeyArgs const&,re::DrawCallRecorderGroup *)>::moveInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E71DD80;
  *(_DWORD *)(a2 + re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = *(_DWORD *)(a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<re::RenderGraphMeshNodeBase::focusSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::$_0,void ()(re::RenderGraphMeshNodeBase::focusSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::FocusSortKey &,anonymous namespace'::CommonSortKeyArgs const&,re::DrawCallRecorderGroup *)>::size()
{
  return 16;
}

uint64_t re::FixedArray<std::unique_ptr<re::MaterialTechnique,std::function<void ()(re::MaterialTechnique*)>>>::operator[](uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 8) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 16) + 40 * a2;
}

BOOL re::Optional<re::PortalPlane>::operator==(float32x4_t *a1, float32x4_t *a2)
{
  int v2 = a2->u8[0];
  BOOL v3 = (v2 | a1->u8[0]) == 0;
  if (a1->i8[0]) {
    BOOL v4 = v2 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    uint32x4_t v5 = (uint32x4_t)vceqq_f32(a1[1], a2[1]);
    v5.i32[3] = v5.i32[2];
    if ((vminvq_u32(v5) & 0x80000000) != 0)
    {
      uint32x4_t v6 = (uint32x4_t)vceqq_f32(a1[2], a2[2]);
      v6.i32[3] = v6.i32[2];
      return vminvq_u32(v6) >> 31;
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

void re::HashTable<unsigned int,re::RenderGraphMeshNodeBase::validateAttachmentsDuringGraphBuild(re::RenderGraphCompiled &,re::PerFrameAllocator &)::AttachmentPair,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _DWORD *a4, unsigned __int8 *a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      int v11 = *(_DWORD *)(a1 + 28);
      signed int v12 = 2 * v11;
      uint64_t v13 = *(void *)a1;
      if (*(void *)a1)
      {
        if (v12) {
          BOOL v14 = v9 == v12;
        }
        else {
          BOOL v14 = 1;
        }
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v31, 0, 36);
          *(void *)&v31[36] = 0x7FFFFFFFLL;
          re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v31, v13, v12);
          long long v15 = *(_OWORD *)v31;
          *(_OWORD *)BOOL v31 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          uint64_t v16 = *(void *)&v31[16];
          uint64_t v17 = *(void *)(a1 + 16);
          *(void *)&unsigned char v31[16] = v17;
          *(void *)(a1 + 16) = v16;
          long long v19 = *(_OWORD *)&v31[24];
          *(_OWORD *)&v31[24] = *(_OWORD *)(a1 + 24);
          unsigned int v18 = *(_DWORD *)&v31[32];
          *(_OWORD *)(a1 + 24) = v19;
          uint64_t v20 = v18;
          if (v18)
          {
            uint64_t v21 = v17 + 16;
            do
            {
              if ((*(_DWORD *)(v21 - 8) & 0x80000000) != 0) {
                re::HashTable<unsigned int,re::RenderGraphMeshNodeBase::validateAttachmentsDuringGraphBuild(re::RenderGraphCompiled &,re::PerFrameAllocator &)::AttachmentPair,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::addAsMove(a1, *(void *)(v21 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(v21 - 16), v21 - 4, v21);
              }
              v21 += 32;
              --v20;
            }
            while (v20);
          }
          re::HashTable<unsigned int,re::RenderGraphMeshNodeBase::validateAttachmentsDuringGraphBuild(re::RenderGraphCompiled &,re::PerFrameAllocator &)::AttachmentPair,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::~HashTable((uint64_t *)v31);
        }
      }
      else
      {
        if (v12) {
          signed int v24 = 2 * v11;
        }
        else {
          signed int v24 = 3;
        }
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v22 = *(void *)(a1 + 16);
    int v23 = *(_DWORD *)(v22 + 32 * v9 + 8);
  }
  else
  {
    uint64_t v22 = *(void *)(a1 + 16);
    int v23 = *(_DWORD *)(v22 + 32 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v23 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v22 + 32 * v9 + re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = v23 | 0x80000000;
  uint64_t v25 = *(void *)(a1 + 8);
  *(_DWORD *)(*(void *)(a1 + 16) + 32 * v9 + re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 32 * v9 + 8) & 0x80000000 | *(_DWORD *)(v25 + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 32 * v9) = a3;
  *(_DWORD *)(*(void *)(a1 + 16) + 32 * v9 + 12) = *a4;
  uint64_t v26 = *(void *)(a1 + 16);
  int v27 = *a5;
  uint64_t v28 = v26 + 32 * v9;
  *(unsigned char *)(v28 + 16) = v27;
  uint64_t v29 = v28 + 16;
  if (v27) {
    *(_DWORD *)(v29 + 4) = *((_DWORD *)a5 + 1);
  }
  int v30 = a5[8];
  *(unsigned char *)(v26 + 32 * v9 + 24) = v30;
  if (v30) {
    *(_DWORD *)(v26 + 32 * v9 + 2re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = *((_DWORD *)a5 + 3);
  }
  *(_DWORD *)(v25 + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
}

uint64_t anonymous namespace'::getColorDepthDrawFlags(char *a1, uint64_t a2)
{
  BOOL v4 = *(void **)(a2 + 216);
  if (v4 && *v4)
  {
    int v5 = *(unsigned __int8 *)(a2 + 210);
    int v6 = *(unsigned __int8 *)(a2 + 211);
    BOOL v7 = *(unsigned char *)(a2 + 209) != 0;
    BOOL v8 = *(unsigned char *)(a2 + 208) != 0;
  }
  else
  {
    uint64_t v9 = *(re::MaterialParameterTableLayers **)(a2 + 48);
    uint64_t TechniqueAtIndex = re::MaterialParameterTableLayers::getTechniqueAtIndex(v9, *(_DWORD *)(a2 + 144));
    uint64_t v11 = *(void *)TechniqueAtIndex;
    unint64_t v12 = *(void *)(*(void *)TechniqueAtIndex + 2480);
    if (v12) {
      unint64_t v13 = v12 >> 1;
    }
    else {
      unint64_t v13 = v12 >> 1;
    }
    BOOL v8 = v13 != 0;
    char v14 = *(unsigned char *)(a2 + 177);
    BOOL v7 = (v14 & 2) == 0 && *(_DWORD *)(v11 + 108) != 0;
    int v5 = *(unsigned char *)(v11 + 74) & ~v14 & 1;
    int v6 = *(unsigned __int8 *)(v11 + 80);
    uint64_t v15 = *((void *)v9 + 6);
    if (v15 && *(unsigned char *)(v15 + 1080)
      || (uint64_t v15 = *((void *)v9 + 7)) != 0 && *(unsigned char *)(v15 + 1080)
      || (uint64_t v15 = *((void *)v9 + 9)) != 0 && *(unsigned char *)(v15 + 1080))
    {
      v6 |= (HIDWORD(*(void *)(v15 + 1081)) | ((unsigned __int16)WORD2(*(void *)(v15 + 1081)) >> 8));
    }
  }
  int v16 = *(_DWORD *)(a2 + 184);
  int v17 = *(_DWORD *)(a2 + 188);
  int v18 = *(unsigned char *)(a2 + 153) & (*(float *)(a2 + 192) == 0.0);
  if (v16 == v17) {
    int v19 = 0;
  }
  else {
    int v19 = *(unsigned char *)(a2 + 153) & (*(float *)(a2 + 192) == 0.0);
  }
  char v20 = v8 && v7;
  if (v6) {
    char v20 = 1;
  }
  if (v19 != 1) {
    char v20 = 1;
  }
  *a1 = v20;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9C280, memory_order_acquire) & 1) == 0)
  {
    uint64_t v26 = (re *)__cxa_guard_acquire(&qword_26AF9C280);
    if (v26)
    {
      qword_26AF9C278 = re::hashString(v26, v27);
      __cxa_guard_release(&qword_26AF9C280);
    }
  }
  uint64_t result = re::MaterialParameterTableLayers::getPrioritizedPassTechniqueMapping(*(re::MaterialParameterTableLayers **)(a2 + 48), qword_26AF9C278);
  if (v18) {
    BOOL v22 = v16 == v17;
  }
  else {
    BOOL v22 = 0;
  }
  if (v22) {
    int v23 = (result != 0) & (*(unsigned __int8 *)(a2 + 153) >> 1);
  }
  else {
    LOBYTE(v23) = 0;
  }
  a1[1] = v23;
  if (v5 | v6) {
    BOOL v24 = *(_DWORD *)(a2 + 184) == *(_DWORD *)(a2 + 188);
  }
  else {
    BOOL v24 = 1;
  }
  if (v24) {
    char v25 = 0;
  }
  else {
    char v25 = v19;
  }
  a1[2] = v25;
  return result;
}

__n128 re::DynamicArray<anonymous namespace'::DepthSortKey>::add(uint64_t a1, long long *a2)
{
  unint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = *(void *)(a1 + 16);
  unint64_t v6 = v5 + 1;
  if (v5 >= v4 && v4 < v6)
  {
    if (*(void *)a1)
    {
      uint64_t v13 = 2 * v4;
      BOOL v14 = v4 == 0;
      unint64_t v15 = 8;
      if (!v14) {
        unint64_t v15 = v13;
      }
      if (v15 <= v6) {
        unint64_t v16 = v6;
      }
      else {
        unint64_t v16 = v15;
      }
      re::DynamicArray<re::ecs2::CoincidentalSortKey>::setCapacity((void *)a1, v16);
    }
    else
    {
      re::DynamicArray<re::ecs2::CoincidentalSortKey>::setCapacity((void *)a1, v6);
      ++*(_DWORD *)(a1 + 24);
    }
  }
  uint64_t v8 = *(void *)(a1 + 32) + (*(void *)(a1 + 16) << 6);
  __n128 result = (__n128)a2[2];
  long long v10 = a2[3];
  long long v12 = *a2;
  long long v11 = a2[1];
  *(__n128 *)(v8 + 32) = result;
  *(_OWORD *)(v8 + 4re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = v10;
  *(_OWORD *)uint64_t v8 = v12;
  *(_OWORD *)(v8 + 16) = v11;
  ++*(void *)(a1 + 16);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

long long *std::__introsort<std::_ClassicAlgPolicy,re::RenderGraphMeshNodeBase::depthSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::$_1 &,anonymous namespace'::DepthSortKey *,false>(long long *result, long long *a2, unint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6, BOOL a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, long long a13, long long a14, long long a15, long long a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  char v22 = a4;
  unint64_t v23 = a3;
  char v25 = result;
  a20 = *MEMORY[0x263EF8340];
  unint64_t v26 = (unint64_t)&v251 | 0x18;
  while (2)
  {
    unint64_t v250 = a2 - 4;
    int v27 = v25;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          char v25 = v27;
          uint64_t v28 = (char *)a2 - (char *)v27;
          unint64_t v29 = ((char *)a2 - (char *)v27) >> 6;
          if (v21 || !v20)
          {
            switch(v29)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                uint64_t v115 = 0;
                while (1)
                {
                  unint64_t v116 = *(void *)((char *)a2 + v115 - 40);
                  unint64_t v117 = *(void *)((char *)v27 + v115 + 24);
                  if (v116 != v117) {
                    break;
                  }
                  v115 -= 8;
                  if (v115 == -32) {
                    return result;
                  }
                }
                if (v116 < v117)
                {
                  long long v198 = v27[1];
                  long long v199 = v27[3];
                  a15 = v27[2];
                  a16 = v199;
                  a14 = v198;
                  a13 = *v27;
                  long long v200 = *(long long *)((char *)a2 - 35);
                  long long v201 = *(a2 - 3);
                  *int v27 = *v250;
                  v27[1] = v201;
                  *(long long *)((char *)v27 + 29) = v200;
                  long long v203 = a13;
                  long long v202 = a14;
                  *(long long *)((char *)a2 - 35) = *(long long *)((char *)&a14 + 13);
                  *unint64_t v250 = v203;
                  *(a2 - 3) = v202;
                }
                return result;
              case 3uLL:
              case 4uLL:
              case 5uLL:
                unsigned __int8 v118 = v27 + 4;
                uint64_t v119 = v27 + 8;
                int v120 = v27 + 12;
                uint64_t v121 = 0;
                break;
              default:
                JUMPOUT(0);
            }
            while (1)
            {
              unint64_t v122 = *(void *)((char *)a2 + v121 - 40);
              unint64_t v123 = *(void *)((char *)v27 + v121 + 216);
              if (v122 != v123) {
                break;
              }
              v121 -= 8;
              if (v121 == -32) {
                return result;
              }
            }
            if (v122 < v123)
            {
              uint64_t v204 = 0;
              long long v205 = v27[15];
              a15 = v27[14];
              a16 = v205;
              long long v207 = v27[13];
              a13 = *v120;
              long long v206 = a13;
              a14 = v207;
              long long v208 = *v250;
              long long v209 = *(a2 - 3);
              *(long long *)((char *)v27 + 22re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = *(long long *)((char *)a2 - 35);
              *int v120 = v208;
              v27[13] = v209;
              long long v210 = *(long long *)((char *)&a14 + 13);
              *unint64_t v250 = v206;
              *(a2 - 3) = v207;
              *(long long *)((char *)a2 - 35) = v210;
              while (1)
              {
                unint64_t v211 = *(void *)((char *)v27 + v204 + 216);
                unint64_t v212 = *(void *)((char *)v27 + v204 + 152);
                if (v211 != v212) {
                  break;
                }
                v204 -= 8;
                if (v204 == -32) {
                  return result;
                }
              }
              if (v211 < v212)
              {
                uint64_t v227 = 0;
                long long v228 = v27[10];
                long long v230 = *v119;
                a14 = v27[9];
                long long v229 = a14;
                a15 = v228;
                long long v231 = *v120;
                long long v232 = v27[13];
                long long v233 = *(long long *)((char *)v27 + 221);
                *int v120 = v230;
                v27[13] = v229;
                *(long long *)((char *)v27 + 22re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = *(long long *)((char *)&a14 + 13);
                *uint64_t v119 = v231;
                v27[9] = v232;
                *(long long *)((char *)v27 + 157) = v233;
                while (1)
                {
                  unint64_t v234 = *(void *)((char *)v27 + v227 + 152);
                  unint64_t v235 = *(void *)((char *)v27 + v227 + 88);
                  if (v234 != v235) {
                    break;
                  }
                  v227 -= 8;
                  if (v227 == -32) {
                    return result;
                  }
                }
                if (v234 < v235)
                {
                  uint64_t v236 = 0;
                  long long v237 = v27[6];
                  long long v239 = *v118;
                  a14 = v27[5];
                  long long v238 = a14;
                  a15 = v237;
                  long long v240 = *v119;
                  long long v241 = v27[9];
                  long long v242 = *(long long *)((char *)v27 + 157);
                  *uint64_t v119 = v239;
                  v27[9] = v238;
                  *(long long *)((char *)v27 + 157) = *(long long *)((char *)&a14 + 13);
                  *unsigned __int8 v118 = v240;
                  v27[5] = v241;
                  *(long long *)((char *)v27 + 93) = v242;
                  while (1)
                  {
                    unint64_t v243 = *(void *)((char *)v27 + v236 + 88);
                    unint64_t v244 = *(void *)((char *)v27 + v236 + 24);
                    if (v243 != v244) {
                      break;
                    }
                    v236 -= 8;
                    if (v236 == -32) {
                      return result;
                    }
                  }
                  if (v243 < v244)
                  {
                    long long v245 = v27[1];
                    long long v246 = v27[3];
                    a15 = v27[2];
                    a16 = v246;
                    a14 = v245;
                    a13 = *v27;
                    *(long long *)((char *)v27 + 29) = *(long long *)((char *)v27 + 93);
                    long long v247 = v27[5];
                    *int v27 = *v118;
                    v27[1] = v247;
                    long long v248 = a13;
                    long long v249 = a14;
                    *(long long *)((char *)v27 + 93) = *(long long *)((char *)&a14 + 13);
                    *unsigned __int8 v118 = v248;
                    v27[5] = v249;
                  }
                }
              }
            }
            return result;
          }
          if (v28 <= 1535)
          {
            BOOL v124 = v27 + 4;
            BOOL v126 = v27 == a2 || v124 == a2;
            if (v22)
            {
              if (!v126)
              {
                unsigned int v127 = v27;
                do
                {
                  uint64_t v128 = 0;
                  while (1)
                  {
                    unint64_t v129 = *(void *)((char *)v127 + v128 + 88);
                    unint64_t v130 = *(void *)((char *)v127 + v128 + 24);
                    if (v129 != v130) {
                      break;
                    }
                    v128 -= 8;
                    if (v128 == -32) {
                      goto LABEL_151;
                    }
                  }
                  if (v129 < v130)
                  {
                    long long v132 = v124[2];
                    long long v131 = v124[3];
                    a14 = v124[1];
                    a15 = v132;
                    a16 = v131;
                    a13 = *v124;
                    uint64_t v133 = v127;
                    int v134 = v124;
                    while (1)
                    {
                      long long v135 = v133[1];
                      *int v134 = *v133;
                      v134[1] = v135;
                      *(long long *)((char *)v134 + 29) = *(long long *)((char *)v133 + 29);
                      if (v133 == v27) {
                        break;
                      }
                      int v134 = v133;
                      uint64_t v136 = 0;
                      v133 -= 4;
                      while (1)
                      {
                        unint64_t v137 = *(void *)(((unint64_t)&a13 | 0x18) + v136);
                        unint64_t v138 = *(void *)((char *)v134 + v136 - 40);
                        if (v137 != v138) {
                          break;
                        }
                        v136 -= 8;
                        if (v136 == -32) {
                          goto LABEL_150;
                        }
                      }
                      if (v137 >= v138) {
                        goto LABEL_150;
                      }
                    }
                    int v134 = v27;
LABEL_150:
                    long long v139 = *(long long *)((char *)&a14 + 13);
                    v134[1] = a14;
                    long long v140 = a13;
                    *(long long *)((char *)v134 + 29) = v139;
                    *int v134 = v140;
                  }
LABEL_151:
                  v124 += 4;
                  v127 += 4;
                }
                while (v124 != a2);
              }
            }
            else if (!v126)
            {
              do
              {
                uint64_t v213 = 0;
                while (1)
                {
                  unint64_t v214 = *(void *)((char *)v25 + v213 + 88);
                  unint64_t v215 = *(void *)((char *)v25 + v213 + 24);
                  if (v214 != v215) {
                    break;
                  }
                  v213 -= 8;
                  if (v213 == -32) {
                    goto LABEL_242;
                  }
                }
                if (v214 < v215)
                {
                  long long v217 = v124[2];
                  long long v216 = v124[3];
                  a14 = v124[1];
                  a15 = v217;
                  a16 = v216;
                  a13 = *v124;
                  __int16 v218 = v25;
                  int v219 = v124;
                  do
                  {
                    uint64_t v220 = 0;
                    uint64_t v221 = v219;
                    int v219 = v218;
                    long long v222 = v218[1];
                    *uint64_t v221 = *v218;
                    v221[1] = v222;
                    *(long long *)((char *)v221 + 29) = *(long long *)((char *)v218 + 29);
                    v218 -= 4;
                    while (1)
                    {
                      unint64_t v223 = *(void *)((char *)&a14 + v220 + 8);
                      unint64_t v224 = *(void *)((char *)v219 + v220 - 40);
                      if (v223 != v224) {
                        break;
                      }
                      v220 -= 8;
                      if (v220 == -32) {
                        goto LABEL_241;
                      }
                    }
                  }
                  while (v223 < v224);
LABEL_241:
                  long long v225 = *(long long *)((char *)&a14 + 13);
                  v219[1] = a14;
                  long long v226 = a13;
                  *(long long *)((char *)v219 + 29) = v225;
                  long long *v219 = v226;
                }
LABEL_242:
                v124 += 4;
                v25 += 4;
              }
              while (v124 != a2);
            }
            return result;
          }
          if (!v23)
          {
            if (v27 != a2)
            {
              int64_t v141 = (v29 - 2) >> 1;
              unint64_t v142 = &v27[8 * v141];
              unint64_t v143 = &v27[4 * v141];
              int64_t v144 = v141;
              do
              {
                int64_t v145 = v144;
                if (v141 >= v144)
                {
                  uint64_t v146 = (2 * v144) | 1;
                  unint64_t v147 = &v27[4 * v146];
                  if (2 * v145 + 2 < (uint64_t)v29)
                  {
                    uint64_t v148 = 0;
                    while (1)
                    {
                      unint64_t v149 = *(void *)((char *)v142 + v148 + 88);
                      a4 = *(void *)((char *)v142 + v148 + 152);
                      if (v149 != a4) {
                        break;
                      }
                      v148 -= 8;
                      if (v148 == -32) {
                        goto LABEL_162;
                      }
                    }
                    LOBYTE(a5) = v149 < a4;
LABEL_162:
                    if (((v149 != a4) & a5) != 0)
                    {
                      v147 += 4;
                      uint64_t v146 = 2 * v145 + 2;
                    }
                  }
                  __n128 result = &v27[4 * v145];
                  uint64_t v150 = 24;
                  while (1)
                  {
                    unint64_t v151 = *(void *)((char *)v147 + v150);
                    a3 = *(void *)((char *)v143 + v150);
                    if (v151 != a3) {
                      break;
                    }
                    v150 -= 8;
                    if (v150 == -8) {
                      goto LABEL_169;
                    }
                  }
                  if (v151 < a3) {
                    goto LABEL_189;
                  }
LABEL_169:
                  long long v153 = result[2];
                  long long v152 = result[3];
                  a14 = result[1];
                  a15 = v153;
                  a16 = v152;
                  a13 = *result;
                  while (1)
                  {
                    long long v154 = v147;
                    long long v155 = *(long long *)((char *)v147 + 29);
                    result[1] = v147[1];
                    long long v156 = *v147;
                    *(long long *)((char *)result + 29) = v155;
                    *__n128 result = v156;
                    if (v141 < v146) {
                      break;
                    }
                    uint64_t v157 = (2 * v146) | 1;
                    unint64_t v147 = &v27[4 * v157];
                    uint64_t v158 = 2 * v146 + 2;
                    if (v158 < (uint64_t)v29)
                    {
                      a4 = 0;
                      unint64_t v159 = &v27[8 * v146];
                      while (1)
                      {
                        a5 = *(void *)((char *)v159 + a4 + 88);
                        unint64_t v160 = *(void *)((char *)v159 + a4 + 152);
                        if (a5 != v160) {
                          break;
                        }
                        a4 -= 8;
                        if (a4 == -32) {
                          goto LABEL_178;
                        }
                      }
                      a7 = a5 < v160;
LABEL_178:
                      if (a5 != v160 && a7)
                      {
                        v147 += 4;
                        uint64_t v146 = v158;
                      }
                      else
                      {
                        uint64_t v146 = v157;
                      }
                    }
                    else
                    {
                      uint64_t v146 = (2 * v146) | 1;
                    }
                    uint64_t v161 = 24;
                    while (1)
                    {
                      unint64_t v162 = *(void *)((char *)v147 + v161);
                      a3 = *(void *)((char *)&a13 + v161);
                      if (v162 != a3) {
                        break;
                      }
                      v161 -= 8;
                      if (v161 == -8) {
                        goto LABEL_186;
                      }
                    }
                    LOBYTE(a4) = v162 < a3;
LABEL_186:
                    __n128 result = v154;
                    if (v162 != a3)
                    {
                      __n128 result = v154;
                      if (a4) {
                        break;
                      }
                    }
                  }
                  long long v163 = *(long long *)((char *)&a14 + 13);
                  v154[1] = a14;
                  long long v164 = a13;
                  *(long long *)((char *)v154 + 29) = v163;
                  *long long v154 = v164;
                }
LABEL_189:
                int64_t v144 = v145 - 1;
                v142 -= 8;
                v143 -= 4;
              }
              while (v145);
              uint64_t v165 = (unint64_t)v28 >> 6;
              do
              {
                uint64_t v166 = 0;
                *(_OWORD *)float32x4_t vars0 = v27[1];
                long long v251 = *v27;
                char v167 = v27;
                do
                {
                  int v168 = &v167[4 * v166];
                  char v169 = v168 + 4;
                  uint64_t v170 = (2 * v166) | 1;
                  uint64_t v166 = 2 * v166 + 2;
                  if (v166 >= v165)
                  {
                    uint64_t v166 = v170;
                  }
                  else
                  {
                    uint64_t v171 = 0;
                    while (1)
                    {
                      __n128 result = *(long long **)((char *)v168 + v171 + 88);
                      unint64_t v172 = *(long long **)((char *)v168 + v171 + 152);
                      if (result != v172) {
                        break;
                      }
                      v171 -= 8;
                      if (v171 == -32) {
                        goto LABEL_199;
                      }
                    }
                    LOBYTE(a3) = result < v172;
LABEL_199:
                    if (((result != v172) & a3) != 0) {
                      char v169 = v168 + 8;
                    }
                    else {
                      uint64_t v166 = v170;
                    }
                  }
                  long long v173 = *(long long *)((char *)v169 + 29);
                  v167[1] = v169[1];
                  long long v174 = *v169;
                  *(long long *)((char *)v167 + 29) = v173;
                  *char v167 = v174;
                  char v167 = v169;
                }
                while (v166 <= (uint64_t)((unint64_t)(v165 - 2) >> 1));
                a2 -= 4;
                if (v169 == a2)
                {
                  long long v185 = *(_OWORD *)&vars0[13];
                  v169[1] = *(_OWORD *)vars0;
                  long long v186 = v251;
                  *(long long *)((char *)v169 + 29) = v185;
                  *char v169 = v186;
                }
                else
                {
                  long long v175 = *(long long *)((char *)a2 + 29);
                  v169[1] = a2[1];
                  long long v176 = *a2;
                  *(long long *)((char *)v169 + 29) = v175;
                  *char v169 = v176;
                  long long v178 = v251;
                  long long v177 = *(_OWORD *)vars0;
                  *(long long *)((char *)a2 + 29) = *(_OWORD *)&vars0[13];
                  *a2 = v178;
                  a2[1] = v177;
                  uint64_t v179 = (char *)v169 - (char *)v27 + 64;
                  if (v179 >= 65)
                  {
                    unint64_t v180 = (((unint64_t)v179 >> 6) - 2) >> 1;
                    int v181 = &v27[4 * v180];
                    uint64_t v182 = 24;
                    while (1)
                    {
                      unint64_t v183 = *(void *)((char *)v181 + v182);
                      unint64_t v184 = *(void *)((char *)v169 + v182);
                      if (v183 != v184) {
                        break;
                      }
                      v182 -= 8;
                      if (v182 == -8) {
                        goto LABEL_210;
                      }
                    }
                    if (v183 < v184)
                    {
                      long long v189 = v169[2];
                      long long v188 = v169[3];
                      a14 = v169[1];
                      a15 = v189;
                      a16 = v188;
                      a13 = *v169;
                      do
                      {
                        float32x4_t v190 = v181;
                        long long v191 = *(long long *)((char *)v181 + 29);
                        v169[1] = v181[1];
                        long long v192 = *v181;
                        *(long long *)((char *)v169 + 29) = v191;
                        *char v169 = v192;
                        if (!v180) {
                          break;
                        }
                        unint64_t v180 = (v180 - 1) >> 1;
                        int v181 = &v27[4 * v180];
                        uint64_t v193 = 24;
                        while (1)
                        {
                          unint64_t v194 = *(void *)((char *)v181 + v193);
                          unint64_t v195 = *(void *)((char *)&a13 + v193);
                          if (v194 != v195) {
                            break;
                          }
                          v193 -= 8;
                          if (v193 == -8) {
                            goto LABEL_221;
                          }
                        }
                        char v169 = v190;
                      }
                      while (v194 < v195);
LABEL_221:
                      long long v196 = *(long long *)((char *)&a14 + 13);
                      v190[1] = a14;
                      long long v197 = a13;
                      *(long long *)((char *)v190 + 29) = v196;
                      *float32x4_t v190 = v197;
                    }
                  }
                }
LABEL_210:
                ;
              }
              while (v165-- > 2);
            }
            return result;
          }
          unint64_t v30 = v29 >> 1;
          BOOL v31 = &v27[4 * (v29 >> 1)];
          if ((unint64_t)v28 > 0x2000)
          {
            long long v32 = v25[1];
            long long v33 = v25[3];
            a15 = v25[2];
            a16 = v33;
            a14 = v32;
            a13 = *v25;
            long long v34 = *(long long *)((char *)v31 + 29);
            long long v35 = v31[1];
            *char v25 = *v31;
            v25[1] = v35;
            *(long long *)((char *)v25 + 29) = v34;
            long long v37 = a13;
            long long v36 = a14;
            *(long long *)((char *)v31 + 29) = *(long long *)((char *)&a14 + 13);
            *BOOL v31 = v37;
            v31[1] = v36;
          }
          else
          {
          }
          --v23;
          if (v22) {
            break;
          }
          uint64_t v42 = 0;
          while (1)
          {
            unint64_t v43 = *(void *)((char *)v25 + v42 - 40);
            unint64_t v44 = *(void *)((char *)v25 + v42 + 24);
            if (v43 != v44) {
              break;
            }
            v42 -= 8;
            if (v42 == -32) {
              goto LABEL_14;
            }
          }
          if (v43 < v44) {
            break;
          }
LABEL_14:
          uint64_t v45 = 0;
          *(_OWORD *)float32x4_t vars0 = v25[1];
          long long v251 = *v25;
          while (1)
          {
            unint64_t v46 = *(void *)&vars0[v45 + 8];
            unint64_t v47 = *(void *)((char *)a2 + v45 - 40);
            BOOL v48 = v46 >= v47;
            if (v46 != v47) {
              break;
            }
            v45 -= 8;
            if (v45 == -32)
            {
              unint64_t v49 = v25;
              while (1)
              {
LABEL_76:
                int v27 = v49 + 4;
                if (v49 + 4 >= a2) {
                  goto LABEL_84;
                }
                uint64_t v88 = 0;
                while (1)
                {
                  unint64_t v89 = *(void *)(v26 + v88);
                  unint64_t v90 = *(void *)((char *)v49 + v88 + 88);
                  if (v89 != v90) {
                    break;
                  }
                  v88 -= 8;
                  if (v88 == -32) {
                    goto LABEL_82;
                  }
                }
                BOOL v38 = v89 < v90;
LABEL_82:
                v49 += 4;
                if (v89 != v90)
                {
                  unint64_t v49 = v27;
                  if (v38) {
                    goto LABEL_84;
                  }
                }
              }
            }
          }
          float32x2_t v84 = v25;
          unint64_t v49 = v25;
          if (v48) {
            goto LABEL_76;
          }
          while (1)
          {
            uint64_t v85 = 0;
            int v27 = v84 + 4;
            while (1)
            {
              unint64_t v86 = *(void *)(v26 + v85);
              unint64_t v87 = *(void *)((char *)v84 + v85 + 88);
              if (v86 != v87) {
                break;
              }
              v85 -= 8;
              if (v85 == -32) {
                goto LABEL_73;
              }
            }
            BOOL v38 = v86 < v87;
LABEL_73:
            v84 += 4;
            if (v86 != v87)
            {
              float32x2_t v84 = v27;
              if (v38) {
                break;
              }
            }
          }
LABEL_84:
          unint64_t v91 = a2;
          if (v27 < a2)
          {
            uint64_t v92 = a2;
            do
            {
              uint64_t v93 = 0;
              unint64_t v91 = v92 - 4;
              while (1)
              {
                unint64_t v94 = *(void *)(v26 + v93);
                unint64_t v95 = *(void *)((char *)v92 + v93 - 40);
                if (v94 != v95) {
                  break;
                }
                v93 -= 8;
                if (v93 == -32) {
                  goto LABEL_106;
                }
              }
              v92 -= 4;
            }
            while (v94 < v95);
          }
LABEL_106:
          while (v27 < v91)
          {
            long long v96 = v27[1];
            long long v97 = v27[3];
            a15 = v27[2];
            a16 = v97;
            a14 = v96;
            a13 = *v27;
            long long v98 = *(long long *)((char *)v91 + 29);
            long long v99 = v91[1];
            *int v27 = *v91;
            v27[1] = v99;
            *(long long *)((char *)v27 + 29) = v98;
            long long v101 = a13;
            long long v100 = a14;
            *(long long *)((char *)v91 + 29) = *(long long *)((char *)&a14 + 13);
            *unint64_t v91 = v101;
            v91[1] = v100;
            float v102 = v27;
            while (1)
            {
              uint64_t v103 = 0;
              int v27 = v102 + 4;
              while (1)
              {
                unint64_t v104 = *(void *)(v26 + v103);
                unint64_t v105 = *(void *)((char *)v102 + v103 + 88);
                if (v104 != v105) {
                  break;
                }
                v103 -= 8;
                if (v103 == -32) {
                  goto LABEL_98;
                }
              }
              BOOL v39 = v104 < v105;
LABEL_98:
              v102 += 4;
              if (v104 != v105)
              {
                float v102 = v27;
                if (v39) {
                  break;
                }
              }
            }
            float32x4_t v106 = v91;
            do
            {
              uint64_t v107 = 0;
              unint64_t v91 = v106 - 4;
              while (1)
              {
                unint64_t v108 = *(void *)(v26 + v107);
                unint64_t v109 = *(void *)((char *)v106 + v107 - 40);
                if (v108 != v109) {
                  break;
                }
                v107 -= 8;
                if (v107 == -32) {
                  goto LABEL_106;
                }
              }
              v106 -= 4;
            }
            while (v108 < v109);
          }
          float32x4_t v110 = v27 - 4;
          BOOL v20 = v27 - 4 >= v25;
          BOOL v21 = v27 - 4 == v25;
          if (v27 - 4 != v25)
          {
            long long v111 = *(long long *)((char *)v27 - 35);
            v25[1] = *(v27 - 3);
            long long v112 = *v110;
            *(long long *)((char *)v25 + 29) = v111;
            *char v25 = v112;
          }
          char v22 = 0;
          long long v113 = *(_OWORD *)&vars0[13];
          *(v27 - 3) = *(_OWORD *)vars0;
          long long v114 = v251;
          *(long long *)((char *)v27 - 35) = v113;
          *float32x4_t v110 = v114;
        }
        *(_OWORD *)float32x4_t vars0 = v25[1];
        long long v251 = *v25;
        uint64_t v50 = v25;
        do
        {
          uint64_t v51 = 0;
          unint64_t v52 = v50;
          v50 += 4;
          while (1)
          {
            unint64_t v53 = *(void *)((char *)v52 + v51 + 88);
            unint64_t v54 = *(void *)&vars0[v51 + 8];
            if (v53 != v54) {
              break;
            }
            v51 -= 8;
            if (v51 == -32) {
              goto LABEL_25;
            }
          }
        }
        while (v53 < v54);
LABEL_25:
        unint64_t v55 = a2;
        if (v52 == v25)
        {
          uint64_t v60 = a2;
          while (v50 < v60)
          {
            uint64_t v61 = 0;
            int v57 = v60 - 4;
            while (1)
            {
              unint64_t v62 = *(void *)((char *)v60 + v61 - 40);
              unint64_t v63 = *(void *)(v26 + v61);
              if (v62 != v63) {
                break;
              }
              v61 -= 8;
              if (v61 == -32) {
                goto LABEL_41;
              }
            }
            BOOL v40 = v62 < v63;
LABEL_41:
            v60 -= 4;
            if (v62 != v63)
            {
              uint64_t v60 = v57;
              if (v40) {
                goto LABEL_45;
              }
            }
          }
          int v57 = v60;
        }
        else
        {
          while (1)
          {
            uint64_t v56 = 0;
            int v57 = v55 - 4;
            while (1)
            {
              unint64_t v58 = *(void *)((char *)v55 + v56 - 40);
              unint64_t v59 = *(void *)(v26 + v56);
              if (v58 != v59) {
                break;
              }
              v56 -= 8;
              if (v56 == -32) {
                goto LABEL_31;
              }
            }
            BOOL v40 = v58 < v59;
LABEL_31:
            v55 -= 4;
            if (v58 != v59)
            {
              unint64_t v55 = v57;
              if (v40) {
                break;
              }
            }
          }
        }
LABEL_45:
        if (v50 < v57)
        {
          unsigned int v64 = v50;
          long long v65 = v57;
          do
          {
            long long v66 = v64[3];
            a15 = v64[2];
            a16 = v66;
            long long v68 = v64[1];
            a13 = *v64;
            long long v67 = a13;
            a14 = v68;
            long long v69 = *v65;
            long long v70 = v65[1];
            *(long long *)((char *)v64 + 29) = *(long long *)((char *)v65 + 29);
            *unsigned int v64 = v69;
            v64[1] = v70;
            long long v71 = *(long long *)((char *)&a14 + 13);
            *long long v65 = v67;
            v65[1] = v68;
            *(long long *)((char *)v65 + 29) = v71;
            do
            {
              uint64_t v72 = 0;
              unint64_t v52 = v64;
              v64 += 4;
              while (1)
              {
                unint64_t v73 = *(void *)((char *)v52 + v72 + 88);
                unint64_t v74 = *(void *)(v26 + v72);
                if (v73 != v74) {
                  break;
                }
                v72 -= 8;
                if (v72 == -32) {
                  goto LABEL_53;
                }
              }
            }
            while (v73 < v74);
            while (1)
            {
LABEL_53:
              uint64_t v75 = 0;
              uint64_t v76 = v65 - 4;
              while (1)
              {
                unint64_t v77 = *(void *)((char *)v65 + v75 - 40);
                unint64_t v78 = *(void *)(v26 + v75);
                if (v77 != v78) {
                  break;
                }
                v75 -= 8;
                if (v75 == -32) {
                  goto LABEL_58;
                }
              }
              BOOL v41 = v77 < v78;
LABEL_58:
              v65 -= 4;
              if (v77 != v78)
              {
                long long v65 = v76;
                if (v41) {
                  break;
                }
              }
            }
            long long v65 = v76;
          }
          while (v64 < v76);
        }
        if (v52 != v25)
        {
          long long v79 = *(long long *)((char *)v52 + 29);
          v25[1] = v52[1];
          long long v80 = *v52;
          *(long long *)((char *)v25 + 29) = v79;
          *char v25 = v80;
        }
        long long v81 = *(_OWORD *)&vars0[13];
        v52[1] = *(_OWORD *)vars0;
        long long v82 = v251;
        *(long long *)((char *)v52 + 29) = v81;
        *unint64_t v52 = v82;
        if (v50 >= v57) {
          break;
        }
LABEL_66:
        char v22 = 0;
        int v27 = v52 + 4;
      }
      int v27 = v52 + 4;
      if (result) {
        break;
      }
      if (!v83) {
        goto LABEL_66;
      }
    }
    a2 = v52;
    if (!v83) {
      continue;
    }
    return result;
  }
}

long long *std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::RenderGraphMeshNodeBase::depthSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::$_1 &,anonymous namespace'::DepthSortKey *>(long long *result, long long *a2, long long *a3)
{
  uint64_t v5 = 24;
  while (1)
  {
    unint64_t v6 = *(void *)((char *)a2 + v5);
    unint64_t v7 = *(void *)((char *)result + v5);
    if (v6 != v7) {
      break;
    }
    v5 -= 8;
    if (v5 == -8) {
      goto LABEL_6;
    }
  }
  BOOL v3 = v6 < v7;
LABEL_6:
  BOOL v8 = v6 != v7 && v3;
  uint64_t v9 = 24;
  while (1)
  {
    unint64_t v10 = *(void *)((char *)a3 + v9);
    unint64_t v11 = *(void *)((char *)a2 + v9);
    if (v10 != v11) {
      break;
    }
    v9 -= 8;
    if (v9 == -8) {
      goto LABEL_11;
    }
  }
  BOOL v4 = v10 < v11;
LABEL_11:
  if (v8)
  {
    if (v10 != v11 && v4)
    {
      long long v12 = result[1];
      long long v13 = *result;
      *(_DWORD *)long long v36 = HIDWORD(v12);
      *(_OWORD *)&unint64_t v36[4] = result[2];
      long long v15 = *a3;
      long long v14 = a3[1];
      *(long long *)((char *)result + 29) = *(long long *)((char *)a3 + 29);
      *__n128 result = v15;
      result[1] = v14;
LABEL_27:
      *a3 = v13;
      a3[1] = v12;
      *(long long *)((char *)a3 + 29) = *(_OWORD *)&v36[1];
      return result;
    }
    long long v22 = *result;
    *(_OWORD *)long long v34 = result[1];
    *(_OWORD *)&v34[16] = result[2];
    long long v24 = *a2;
    long long v23 = a2[1];
    *(long long *)((char *)result + 29) = *(long long *)((char *)a2 + 29);
    *__n128 result = v24;
    result[1] = v23;
    *a2 = v22;
    a2[1] = *(_OWORD *)v34;
    *(long long *)((char *)a2 + 29) = *(_OWORD *)&v34[13];
    uint64_t v25 = 24;
    while (1)
    {
      unint64_t v26 = *(void *)((char *)a3 + v25);
      unint64_t v27 = *(void *)((char *)a2 + v25);
      if (v26 != v27) {
        break;
      }
      v25 -= 8;
      if (v25 == -8) {
        return result;
      }
    }
    if (v26 < v27)
    {
      long long v12 = a2[1];
      long long v13 = *a2;
      *(_DWORD *)long long v36 = HIDWORD(v12);
      *(_OWORD *)&unint64_t v36[4] = a2[2];
      long long v32 = *a3;
      long long v31 = a3[1];
      *(long long *)((char *)a2 + 29) = *(long long *)((char *)a3 + 29);
      *a2 = v32;
      a2[1] = v31;
      goto LABEL_27;
    }
  }
  else if (v10 != v11 && v4)
  {
    long long v16 = *a2;
    *(_OWORD *)long long v33 = a2[1];
    *(_OWORD *)&unsigned char v33[16] = a2[2];
    long long v18 = *a3;
    long long v17 = a3[1];
    *(long long *)((char *)a2 + 29) = *(long long *)((char *)a3 + 29);
    *a2 = v18;
    a2[1] = v17;
    *a3 = v16;
    a3[1] = *(_OWORD *)v33;
    *(long long *)((char *)a3 + 29) = *(_OWORD *)&v33[13];
    uint64_t v19 = 24;
    while (1)
    {
      unint64_t v20 = *(void *)((char *)a2 + v19);
      unint64_t v21 = *(void *)((char *)result + v19);
      if (v20 != v21) {
        break;
      }
      v19 -= 8;
      if (v19 == -8) {
        return result;
      }
    }
    if (v20 < v21)
    {
      long long v28 = *result;
      *(_OWORD *)long long v35 = result[1];
      *(_OWORD *)&unsigned char v35[16] = result[2];
      long long v30 = *a2;
      long long v29 = a2[1];
      *(long long *)((char *)result + 29) = *(long long *)((char *)a2 + 29);
      *__n128 result = v30;
      result[1] = v29;
      *a2 = v28;
      a2[1] = *(_OWORD *)v35;
      *(long long *)((char *)a2 + 29) = *(_OWORD *)&v35[13];
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::RenderGraphMeshNodeBase::depthSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::$_1 &,anonymous namespace'::DepthSortKey *>(long long *a1, long long *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 6;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = 0;
      unint64_t v7 = a2 - 4;
      while (1)
      {
        unint64_t v8 = *(void *)((char *)a2 + v6 - 40);
        unint64_t v9 = *(void *)((char *)a1 + v6 + 24);
        if (v8 != v9) {
          break;
        }
        v6 -= 8;
        if (v6 == -32) {
          return 1;
        }
      }
      if (v8 < v9)
      {
        long long v35 = a1[2];
        long long v37 = *a1;
        *(_OWORD *)long long v71 = a1[1];
        long long v36 = *(_OWORD *)v71;
        *(_OWORD *)&v71[16] = v35;
        long long v39 = *v7;
        long long v38 = *(a2 - 3);
        *(long long *)((char *)a1 + 29) = *(long long *)((char *)a2 - 35);
        *a1 = v39;
        a1[1] = v38;
        long long *v7 = v37;
        *(a2 - 3) = v36;
        *(long long *)((char *)a2 - 35) = *(_OWORD *)&v71[13];
      }
      return 1;
    case 3:
      return 1;
    case 4:
      return 1;
    case 5:
      long long v28 = a1 + 4;
      long long v29 = a1 + 8;
      long long v30 = a1 + 12;
      long long v31 = a2 - 4;
      uint64_t v32 = 0;
      while (1)
      {
        unint64_t v33 = *(void *)((char *)a2 + v32 - 40);
        unint64_t v34 = *(void *)((char *)a1 + v32 + 216);
        if (v33 != v34) {
          break;
        }
        v32 -= 8;
        if (v32 == -32) {
          return 1;
        }
      }
      if (v33 < v34)
      {
        uint64_t v40 = 0;
        long long v41 = a1[14];
        long long v43 = *v30;
        *(_OWORD *)long long v71 = a1[13];
        long long v42 = *(_OWORD *)v71;
        *(_OWORD *)&v71[16] = v41;
        long long v45 = *v31;
        long long v44 = *(a2 - 3);
        *(long long *)((char *)a1 + 22re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = *(long long *)((char *)a2 - 35);
        long long *v30 = v45;
        a1[13] = v44;
        *long long v31 = v43;
        *(a2 - 3) = v42;
        *(long long *)((char *)a2 - 35) = *(_OWORD *)&v71[13];
        BOOL result = 1;
        while (1)
        {
          unint64_t v46 = *(void *)((char *)a1 + v40 + 216);
          unint64_t v47 = *(void *)((char *)a1 + v40 + 152);
          if (v46 != v47) {
            break;
          }
          v40 -= 8;
          if (v40 == -32) {
            return result;
          }
        }
        if (v46 < v47)
        {
          uint64_t v48 = 0;
          long long v49 = a1[10];
          long long v51 = *v29;
          *(_OWORD *)long long v71 = a1[9];
          long long v50 = *(_OWORD *)v71;
          *(_OWORD *)&v71[16] = v49;
          long long v52 = *v30;
          long long v53 = a1[13];
          long long v54 = *(long long *)((char *)a1 + 221);
          long long *v30 = v51;
          a1[13] = v50;
          *(long long *)((char *)a1 + 22re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = *(_OWORD *)&v71[13];
          long long *v29 = v52;
          a1[9] = v53;
          *(long long *)((char *)a1 + 157) = v54;
          BOOL result = 1;
          while (1)
          {
            unint64_t v55 = *(void *)((char *)a1 + v48 + 152);
            unint64_t v56 = *(void *)((char *)a1 + v48 + 88);
            if (v55 != v56) {
              break;
            }
            v48 -= 8;
            if (v48 == -32) {
              return result;
            }
          }
          if (v55 < v56)
          {
            uint64_t v57 = 0;
            long long v58 = a1[6];
            long long v60 = *v28;
            *(_OWORD *)long long v71 = a1[5];
            long long v59 = *(_OWORD *)v71;
            *(_OWORD *)&v71[16] = v58;
            long long v61 = *v29;
            long long v62 = a1[9];
            long long v63 = *(long long *)((char *)a1 + 157);
            long long *v29 = v60;
            a1[9] = v59;
            *(long long *)((char *)a1 + 157) = *(_OWORD *)&v71[13];
            long long *v28 = v61;
            a1[5] = v62;
            *(long long *)((char *)a1 + 93) = v63;
            BOOL result = 1;
            while (1)
            {
              unint64_t v64 = *(void *)((char *)a1 + v57 + 88);
              unint64_t v65 = *(void *)((char *)a1 + v57 + 24);
              if (v64 != v65) {
                break;
              }
              v57 -= 8;
              if (v57 == -32) {
                return result;
              }
            }
            if (v64 < v65)
            {
              long long v66 = a1[2];
              long long v68 = *a1;
              *(_OWORD *)long long v71 = a1[1];
              long long v67 = *(_OWORD *)v71;
              *(_OWORD *)&v71[16] = v66;
              long long v69 = a1[5];
              *a1 = *v28;
              a1[1] = v69;
              *(long long *)((char *)a1 + 29) = *(long long *)((char *)a1 + 93);
              long long *v28 = v68;
              a1[5] = v67;
              *(long long *)((char *)a1 + 93) = *(_OWORD *)&v71[13];
            }
          }
        }
      }
      return 1;
    default:
      unint64_t v10 = a1 + 8;
      unint64_t v11 = a1 + 12;
      if (a1 + 12 == a2) {
        return 1;
      }
      int v12 = 0;
      long long v13 = (char *)a1 + 88;
      long long v14 = a1;
      break;
  }
  while (2)
  {
    uint64_t v15 = 0;
    while (1)
    {
      unint64_t v16 = *(void *)((char *)v14 + v15 + 216);
      unint64_t v17 = *(void *)((char *)v14 + v15 + 152);
      if (v16 != v17) {
        break;
      }
      v15 -= 8;
      if (v15 == -32) {
        goto LABEL_23;
      }
    }
    if (v16 < v17)
    {
      long long v18 = v11[1];
      long long v70 = *v11;
      *(_OWORD *)long long v71 = v18;
      long long v19 = v11[3];
      *(_OWORD *)&v71[16] = v11[2];
      long long vars0 = v19;
      unint64_t v20 = v13;
      unint64_t v21 = v11;
      while (1)
      {
        long long v22 = v10[1];
        *unint64_t v21 = *v10;
        v21[1] = v22;
        *(long long *)((char *)v21 + 29) = *(long long *)((char *)v10 + 29);
        if (v10 == a1) {
          break;
        }
        unint64_t v21 = v10;
        uint64_t v23 = 0;
        v10 -= 4;
        while (1)
        {
          unint64_t v24 = *(void *)(((unint64_t)&v70 | 0x18) + v23);
          unint64_t v25 = *(void *)&v20[v23];
          if (v24 != v25) {
            break;
          }
          v23 -= 8;
          if (v23 == -32) {
            goto LABEL_22;
          }
        }
        v20 -= 64;
        if (v24 >= v25) {
          goto LABEL_22;
        }
      }
      unint64_t v21 = a1;
LABEL_22:
      long long v26 = *(_OWORD *)&v71[13];
      v21[1] = *(_OWORD *)v71;
      long long v27 = v70;
      *(long long *)((char *)v21 + 29) = v26;
      *unint64_t v21 = v27;
      if (++v12 == 8) {
        return v11 + 4 == a2;
      }
    }
LABEL_23:
    unint64_t v10 = v11;
    v14 += 4;
    v13 += 64;
    v11 += 4;
    if (v11 != a2) {
      continue;
    }
    return 1;
  }
}

long long *std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::RenderGraphMeshNodeBase::depthSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::$_1 &,anonymous namespace'::DepthSortKey *>(long long *a1, long long *a2, long long *a3, long long *a4)
{
  uint64_t v9 = 24;
  while (1)
  {
    unint64_t v10 = *(void *)((char *)a4 + v9);
    unint64_t v11 = *(void *)((char *)a3 + v9);
    if (v10 != v11) {
      break;
    }
    v9 -= 8;
    if (v9 == -8) {
      return result;
    }
  }
  if (v10 < v11)
  {
    long long v12 = *a3;
    *(_OWORD *)var10 = a3[1];
    *(_OWORD *)&var10[16] = a3[2];
    long long v14 = *a4;
    long long v13 = a4[1];
    *(long long *)((char *)a3 + 29) = *(long long *)((char *)a4 + 29);
    *a3 = v14;
    a3[1] = v13;
    *a4 = v12;
    a4[1] = *(_OWORD *)var10;
    *(long long *)((char *)a4 + 29) = *(_OWORD *)&var10[13];
    uint64_t v15 = 24;
    while (1)
    {
      unint64_t v16 = *(void *)((char *)a3 + v15);
      unint64_t v17 = *(void *)((char *)a2 + v15);
      if (v16 != v17) {
        break;
      }
      v15 -= 8;
      if (v15 == -8) {
        return result;
      }
    }
    if (v16 < v17)
    {
      long long v18 = *a2;
      *(_OWORD *)var10a = a2[1];
      *(_OWORD *)&var10a[16] = a2[2];
      long long v20 = *a3;
      long long v19 = a3[1];
      *(long long *)((char *)a2 + 29) = *(long long *)((char *)a3 + 29);
      *a2 = v20;
      a2[1] = v19;
      *a3 = v18;
      a3[1] = *(_OWORD *)var10a;
      *(long long *)((char *)a3 + 29) = *(_OWORD *)&var10a[13];
      uint64_t v21 = 24;
      while (1)
      {
        unint64_t v22 = *(void *)((char *)a2 + v21);
        unint64_t v23 = *(void *)((char *)a1 + v21);
        if (v22 != v23) {
          break;
        }
        v21 -= 8;
        if (v21 == -8) {
          return result;
        }
      }
      if (v22 < v23)
      {
        long long v24 = *a1;
        *(_OWORD *)var10b = a1[1];
        *(_OWORD *)&var10b[16] = a1[2];
        long long v26 = *a2;
        long long v25 = a2[1];
        *(long long *)((char *)a1 + 29) = *(long long *)((char *)a2 + 29);
        *a1 = v26;
        a1[1] = v25;
        *a2 = v24;
        a2[1] = *(_OWORD *)var10b;
        *(long long *)((char *)a2 + 29) = *(_OWORD *)&var10b[13];
      }
    }
  }
  return result;
}

unint64_t std::__introsort<std::_ClassicAlgPolicy,re::RenderGraphMeshNodeBase::focusSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::$_1 &,re::RenderGraphMeshNodeBase::focusSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::FocusSortKey *,false>(unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6, BOOL a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, long long a13, long long a14, long long a15, long long a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  char v22 = a4;
  unint64_t v23 = a3;
  long long v25 = (long long *)result;
  a20 = *MEMORY[0x263EF8340];
  unint64_t v26 = (unint64_t)&v271 | 0x20;
  while (2)
  {
    uint64_t v270 = (long long *)(a2 - 64);
    long long v27 = v25;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          long long v25 = v27;
          uint64_t v28 = a2 - (void)v27;
          unint64_t v29 = (uint64_t)(a2 - (void)v27) >> 6;
          if (v21 || !v20)
          {
            switch(v29)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                uint64_t v125 = 0;
                while (1)
                {
                  unint64_t v126 = *(void *)(a2 - 32 + v125);
                  unint64_t v127 = *(void *)((char *)v27 + v125 + 32);
                  if (v126 != v127) {
                    break;
                  }
                  v125 -= 8;
                  if (v125 == -40) {
                    return result;
                  }
                }
                if (v126 < v127)
                {
                  long long v217 = v27[1];
                  long long v218 = v27[3];
                  a15 = v27[2];
                  a16 = v218;
                  a14 = v217;
                  a13 = *v27;
                  long long v220 = *(_OWORD *)(a2 - 48);
                  long long v219 = *(_OWORD *)(a2 - 32);
                  long long v221 = *v270;
                  *((_DWORD *)v27 + 12) = *(_DWORD *)(a2 - 16);
                  v27[1] = v220;
                  v27[2] = v219;
                  *long long v27 = v221;
                  long long v223 = a14;
                  long long v222 = a15;
                  long long v224 = a13;
                  *(_DWORD *)(a2 - 16) = a16;
                  *(_OWORD *)(a2 - 4re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = v223;
                  *(_OWORD *)(a2 - 32) = v222;
                  *uint64_t v270 = v224;
                }
                return result;
              case 3uLL:
                return (unint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::RenderGraphMeshNodeBase::focusSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::$_1 &,re::RenderGraphMeshNodeBase::focusSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::FocusSortKey *>(v27, v27 + 4, v270);
              case 4uLL:
                return (unint64_t)std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::RenderGraphMeshNodeBase::focusSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::$_1 &,re::RenderGraphMeshNodeBase::focusSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::FocusSortKey *>(v27, v27 + 4, v27 + 8, (uint64_t)v270);
              case 5uLL:
                uint64_t v128 = v27 + 4;
                unint64_t v129 = v27 + 8;
                unint64_t v130 = v27 + 12;
                BOOL result = (unint64_t)std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::RenderGraphMeshNodeBase::focusSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::$_1 &,re::RenderGraphMeshNodeBase::focusSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::FocusSortKey *>(v27, v27 + 4, v27 + 8, (uint64_t)(v27 + 12));
                uint64_t v131 = 0;
                break;
              default:
                JUMPOUT(0);
            }
            while (1)
            {
              unint64_t v132 = *(void *)(a2 - 32 + v131);
              unint64_t v133 = *(void *)((char *)v27 + v131 + 224);
              if (v132 != v133) {
                break;
              }
              v131 -= 8;
              if (v131 == -40) {
                return result;
              }
            }
            if (v132 < v133)
            {
              uint64_t v225 = 0;
              long long v227 = v27[15];
              a15 = v27[14];
              long long v226 = a15;
              a16 = v227;
              long long v228 = v27[13];
              a13 = *v130;
              long long v229 = a13;
              a14 = v228;
              long long v231 = *(_OWORD *)(a2 - 48);
              long long v230 = *(_OWORD *)(a2 - 32);
              long long v232 = *v270;
              *((_DWORD *)v27 + 60) = *(_DWORD *)(a2 - 16);
              v27[13] = v231;
              v27[14] = v230;
              *unint64_t v130 = v232;
              *(_DWORD *)(a2 - 16) = a16;
              *(_OWORD *)(a2 - 4re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = v228;
              *(_OWORD *)(a2 - 32) = v226;
              *uint64_t v270 = v229;
              while (1)
              {
                unint64_t v233 = *(void *)((char *)v27 + v225 + 224);
                unint64_t v234 = *(void *)((char *)v27 + v225 + 160);
                if (v233 != v234) {
                  break;
                }
                v225 -= 8;
                if (v225 == -40) {
                  return result;
                }
              }
              if (v233 < v234)
              {
                uint64_t v250 = 0;
                long long v251 = v27[10];
                a16 = v27[11];
                *((_DWORD *)v27 + 44) = *((_DWORD *)v27 + 60);
                *((_DWORD *)v27 + 60) = a16;
                long long v253 = *v129;
                long long v252 = v27[9];
                long long v254 = v27[13];
                *unint64_t v129 = *v130;
                v27[9] = v254;
                v27[10] = v27[14];
                *unint64_t v130 = v253;
                v27[13] = v252;
                v27[14] = v251;
                while (1)
                {
                  unint64_t v255 = *(void *)((char *)v27 + v250 + 160);
                  unint64_t v256 = *(void *)((char *)v27 + v250 + 96);
                  if (v255 != v256) {
                    break;
                  }
                  v250 -= 8;
                  if (v250 == -40) {
                    return result;
                  }
                }
                if (v255 < v256)
                {
                  uint64_t v257 = 0;
                  long long v258 = v27[6];
                  a16 = v27[7];
                  *((_DWORD *)v27 + 2re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = *((_DWORD *)v27 + 44);
                  *((_DWORD *)v27 + 44) = a16;
                  long long v260 = *v128;
                  long long v259 = v27[5];
                  long long v261 = v27[9];
                  long long *v128 = *v129;
                  v27[5] = v261;
                  v27[6] = v27[10];
                  *unint64_t v129 = v260;
                  v27[9] = v259;
                  v27[10] = v258;
                  while (1)
                  {
                    unint64_t v262 = *(void *)((char *)v27 + v257 + 96);
                    unint64_t v263 = *(void *)((char *)v27 + v257 + 32);
                    if (v262 != v263) {
                      break;
                    }
                    v257 -= 8;
                    if (v257 == -40) {
                      return result;
                    }
                  }
                  if (v262 < v263)
                  {
                    long long v264 = v27[1];
                    long long v265 = v27[3];
                    a15 = v27[2];
                    a16 = v265;
                    a14 = v264;
                    a13 = *v27;
                    *((_DWORD *)v27 + 12) = *((_DWORD *)v27 + 28);
                    long long v266 = v27[6];
                    v27[1] = v27[5];
                    v27[2] = v266;
                    *long long v27 = *v128;
                    long long v267 = a13;
                    long long v268 = a14;
                    long long v269 = a15;
                    *((_DWORD *)v27 + 2re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = a16;
                    v27[5] = v268;
                    v27[6] = v269;
                    long long *v128 = v267;
                  }
                }
              }
            }
            return result;
          }
          if (v28 <= 1535)
          {
            int v134 = v27 + 4;
            BOOL v136 = v27 == (long long *)a2 || v134 == (long long *)a2;
            if (v22)
            {
              if (!v136)
              {
                unint64_t v137 = v27;
                do
                {
                  uint64_t v138 = 0;
                  while (1)
                  {
                    unint64_t v139 = *(void *)((char *)v137 + v138 + 96);
                    unint64_t v140 = *(void *)((char *)v137 + v138 + 32);
                    if (v139 != v140) {
                      break;
                    }
                    v138 -= 8;
                    if (v138 == -40) {
                      goto LABEL_151;
                    }
                  }
                  if (v139 < v140)
                  {
                    long long v142 = v134[2];
                    long long v141 = v134[3];
                    a14 = v134[1];
                    a15 = v142;
                    a16 = v141;
                    a13 = *v134;
                    unint64_t v143 = v137;
                    int64_t v144 = v134;
                    while (1)
                    {
                      int64_t v145 = v144;
                      int64_t v144 = v143;
                      long long v146 = v143[1];
                      *int64_t v145 = *v143;
                      v145[1] = v146;
                      v145[2] = v143[2];
                      *((_DWORD *)v145 + 12) = *((_DWORD *)v143 + 12);
                      if (v143 == v27) {
                        break;
                      }
                      uint64_t v147 = 0;
                      v143 -= 4;
                      while (1)
                      {
                        unint64_t v148 = *(void *)(((unint64_t)&a13 | 0x20) + v147);
                        unint64_t v149 = *(void *)((char *)v144 + v147 - 32);
                        if (v148 != v149) {
                          break;
                        }
                        v147 -= 8;
                        if (v147 == -40) {
                          goto LABEL_150;
                        }
                      }
                      if (v148 >= v149) {
                        goto LABEL_150;
                      }
                    }
                    int64_t v144 = v27;
LABEL_150:
                    int v150 = a16;
                    long long v151 = a15;
                    v144[1] = a14;
                    v144[2] = v151;
                    long long v152 = a13;
                    *((_DWORD *)v144 + 12) = v150;
                    *int64_t v144 = v152;
                  }
LABEL_151:
                  v134 += 4;
                  v137 += 4;
                }
                while (v134 != (long long *)a2);
              }
            }
            else if (!v136)
            {
              do
              {
                uint64_t v235 = 0;
                while (1)
                {
                  unint64_t v236 = *(void *)((char *)v25 + v235 + 96);
                  unint64_t v237 = *(void *)((char *)v25 + v235 + 32);
                  if (v236 != v237) {
                    break;
                  }
                  v235 -= 8;
                  if (v235 == -40) {
                    goto LABEL_242;
                  }
                }
                if (v236 < v237)
                {
                  long long v239 = v134[2];
                  long long v238 = v134[3];
                  a14 = v134[1];
                  a15 = v239;
                  a16 = v238;
                  a13 = *v134;
                  long long v240 = v25;
                  long long v241 = v134;
                  do
                  {
                    uint64_t v242 = 0;
                    unint64_t v243 = v241;
                    long long v241 = v240;
                    long long v244 = v240[1];
                    *unint64_t v243 = *v240;
                    v243[1] = v244;
                    v243[2] = v240[2];
                    *((_DWORD *)v243 + 12) = *((_DWORD *)v240 + 12);
                    v240 -= 4;
                    while (1)
                    {
                      unint64_t v245 = *(void *)((char *)&a15 + v242);
                      unint64_t v246 = *(void *)((char *)v241 + v242 - 32);
                      if (v245 != v246) {
                        break;
                      }
                      v242 -= 8;
                      if (v242 == -40) {
                        goto LABEL_241;
                      }
                    }
                  }
                  while (v245 < v246);
LABEL_241:
                  int v247 = a16;
                  long long v248 = a15;
                  v241[1] = a14;
                  v241[2] = v248;
                  long long v249 = a13;
                  *((_DWORD *)v241 + 12) = v247;
                  *long long v241 = v249;
                }
LABEL_242:
                v134 += 4;
                v25 += 4;
              }
              while (v134 != (long long *)a2);
            }
            return result;
          }
          if (!v23)
          {
            if (v27 != (long long *)a2)
            {
              int64_t v153 = (v29 - 2) >> 1;
              long long v154 = &v27[8 * v153];
              long long v155 = &v27[4 * v153];
              int64_t v156 = v153;
              do
              {
                int64_t v157 = v156;
                if (v153 >= v156)
                {
                  uint64_t v158 = (2 * v156) | 1;
                  unint64_t v159 = &v27[4 * v158];
                  if (2 * v157 + 2 < (uint64_t)v29)
                  {
                    uint64_t v160 = 0;
                    while (1)
                    {
                      unint64_t v161 = *(void *)((char *)v154 + v160 + 96);
                      a4 = *(void *)((char *)v154 + v160 + 160);
                      if (v161 != a4) {
                        break;
                      }
                      v160 -= 8;
                      if (v160 == -40) {
                        goto LABEL_162;
                      }
                    }
                    LOBYTE(a5) = v161 < a4;
LABEL_162:
                    if (((v161 != a4) & a5) != 0)
                    {
                      v159 += 4;
                      uint64_t v158 = 2 * v157 + 2;
                    }
                  }
                  BOOL result = (unint64_t)&v27[4 * v157];
                  uint64_t v162 = 32;
                  while (1)
                  {
                    unint64_t v163 = *(void *)((char *)v159 + v162);
                    a3 = *(void *)((char *)v155 + v162);
                    if (v163 != a3) {
                      break;
                    }
                    v162 -= 8;
                    if (v162 == -8) {
                      goto LABEL_169;
                    }
                  }
                  if (v163 < a3) {
                    goto LABEL_189;
                  }
LABEL_169:
                  long long v165 = *(_OWORD *)(result + 32);
                  long long v164 = *(_OWORD *)(result + 48);
                  a14 = *(_OWORD *)(result + 16);
                  a15 = v165;
                  a16 = v164;
                  a13 = *(_OWORD *)result;
                  while (1)
                  {
                    unint64_t v166 = (unint64_t)v159;
                    int v167 = *((_DWORD *)v159 + 12);
                    long long v168 = *(_OWORD *)(v166 + 32);
                    *(_OWORD *)(result + 16) = *(_OWORD *)(v166 + 16);
                    *(_OWORD *)(result + 32) = v168;
                    long long v169 = *(_OWORD *)v166;
                    *(_DWORD *)(result + 4re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = v167;
                    *(_OWORD *)BOOL result = v169;
                    if (v153 < v158) {
                      break;
                    }
                    uint64_t v170 = (2 * v158) | 1;
                    unint64_t v159 = &v27[4 * v170];
                    uint64_t v171 = 2 * v158 + 2;
                    if (v171 < (uint64_t)v29)
                    {
                      a4 = 0;
                      unint64_t v172 = &v27[8 * v158];
                      while (1)
                      {
                        a5 = *(void *)((char *)v172 + a4 + 96);
                        unint64_t v173 = *(void *)((char *)v172 + a4 + 160);
                        if (a5 != v173) {
                          break;
                        }
                        a4 -= 8;
                        if (a4 == -40) {
                          goto LABEL_178;
                        }
                      }
                      a7 = a5 < v173;
LABEL_178:
                      if (a5 != v173 && a7)
                      {
                        v159 += 4;
                        uint64_t v158 = v171;
                      }
                      else
                      {
                        uint64_t v158 = v170;
                      }
                    }
                    else
                    {
                      uint64_t v158 = (2 * v158) | 1;
                    }
                    uint64_t v174 = 32;
                    while (1)
                    {
                      unint64_t v175 = *(void *)((char *)v159 + v174);
                      a3 = *(void *)((char *)&a13 + v174);
                      if (v175 != a3) {
                        break;
                      }
                      v174 -= 8;
                      if (v174 == -8) {
                        goto LABEL_186;
                      }
                    }
                    LOBYTE(a4) = v175 < a3;
LABEL_186:
                    BOOL result = v166;
                    if (v175 != a3)
                    {
                      BOOL result = v166;
                      if (a4) {
                        break;
                      }
                    }
                  }
                  int v176 = a16;
                  long long v177 = a15;
                  *(_OWORD *)(v166 + 16) = a14;
                  *(_OWORD *)(v166 + 32) = v177;
                  long long v178 = a13;
                  *(_DWORD *)(v166 + 4re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = v176;
                  *(_OWORD *)unint64_t v166 = v178;
                }
LABEL_189:
                int64_t v156 = v157 - 1;
                v154 -= 8;
                v155 -= 4;
              }
              while (v157);
              uint64_t v179 = (unint64_t)v28 >> 6;
              do
              {
                uint64_t v180 = 0;
                long long v182 = v27[2];
                long long v181 = v27[3];
                long long vars0 = v27[1];
                long long v275 = v182;
                int v278 = v181;
                long long v271 = *v27;
                unint64_t v183 = v27;
                do
                {
                  unint64_t v184 = &v183[4 * v180];
                  long long v185 = v184 + 4;
                  uint64_t v186 = (2 * v180) | 1;
                  uint64_t v180 = 2 * v180 + 2;
                  if (v180 >= v179)
                  {
                    uint64_t v180 = v186;
                  }
                  else
                  {
                    uint64_t v187 = 0;
                    while (1)
                    {
                      BOOL result = *(void *)((char *)v184 + v187 + 96);
                      unint64_t v188 = *(void *)((char *)v184 + v187 + 160);
                      if (result != v188) {
                        break;
                      }
                      v187 -= 8;
                      if (v187 == -40) {
                        goto LABEL_199;
                      }
                    }
                    LOBYTE(a3) = result < v188;
LABEL_199:
                    if (((result != v188) & a3) != 0) {
                      long long v185 = v184 + 8;
                    }
                    else {
                      uint64_t v180 = v186;
                    }
                  }
                  int v189 = *((_DWORD *)v185 + 12);
                  long long v190 = v185[2];
                  v183[1] = v185[1];
                  v183[2] = v190;
                  long long v191 = *v185;
                  *((_DWORD *)v183 + 12) = v189;
                  *unint64_t v183 = v191;
                  unint64_t v183 = v185;
                }
                while (v180 <= (uint64_t)((unint64_t)(v179 - 2) >> 1));
                a2 -= 64;
                if (v185 == (long long *)a2)
                {
                  v185[1] = vars0;
                  v185[2] = v182;
                  long long v203 = v271;
                  *((_DWORD *)v185 + 12) = v278;
                  *long long v185 = v203;
                }
                else
                {
                  int v192 = *(_DWORD *)(a2 + 48);
                  long long v193 = *(_OWORD *)(a2 + 32);
                  v185[1] = *(_OWORD *)(a2 + 16);
                  v185[2] = v193;
                  long long v194 = *(_OWORD *)a2;
                  *((_DWORD *)v185 + 12) = v192;
                  *long long v185 = v194;
                  long long v195 = vars0;
                  long long v196 = v271;
                  *(_DWORD *)(a2 + 4re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = v278;
                  *(_OWORD *)(a2 + 16) = v195;
                  *(_OWORD *)(a2 + 32) = v275;
                  *(_OWORD *)a2 = v196;
                  uint64_t v197 = (char *)v185 - (char *)v27 + 64;
                  if (v197 >= 65)
                  {
                    unint64_t v198 = (((unint64_t)v197 >> 6) - 2) >> 1;
                    long long v199 = &v27[4 * v198];
                    uint64_t v200 = 32;
                    while (1)
                    {
                      unint64_t v201 = *(void *)((char *)v199 + v200);
                      unint64_t v202 = *(void *)((char *)v185 + v200);
                      if (v201 != v202) {
                        break;
                      }
                      v200 -= 8;
                      if (v200 == -8) {
                        goto LABEL_210;
                      }
                    }
                    if (v201 < v202)
                    {
                      long long v206 = v185[2];
                      long long v205 = v185[3];
                      a14 = v185[1];
                      a15 = v206;
                      a16 = v205;
                      a13 = *v185;
                      do
                      {
                        long long v207 = v199;
                        int v208 = *((_DWORD *)v199 + 12);
                        long long v209 = v207[2];
                        v185[1] = v207[1];
                        v185[2] = v209;
                        long long v210 = *v207;
                        *((_DWORD *)v185 + 12) = v208;
                        *long long v185 = v210;
                        if (!v198) {
                          break;
                        }
                        unint64_t v198 = (v198 - 1) >> 1;
                        long long v199 = &v27[4 * v198];
                        uint64_t v211 = 32;
                        while (1)
                        {
                          unint64_t v212 = *(void *)((char *)v199 + v211);
                          unint64_t v213 = *(void *)((char *)&a13 + v211);
                          if (v212 != v213) {
                            break;
                          }
                          v211 -= 8;
                          if (v211 == -8) {
                            goto LABEL_221;
                          }
                        }
                        long long v185 = v207;
                      }
                      while (v212 < v213);
LABEL_221:
                      int v214 = a16;
                      long long v215 = a15;
                      v207[1] = a14;
                      v207[2] = v215;
                      long long v216 = a13;
                      *((_DWORD *)v207 + 12) = v214;
                      *long long v207 = v216;
                    }
                  }
                }
LABEL_210:
                ;
              }
              while (v179-- > 2);
            }
            return result;
          }
          unint64_t v30 = v29 >> 1;
          long long v31 = &v27[4 * (v29 >> 1)];
          if ((unint64_t)v28 > 0x2000)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::RenderGraphMeshNodeBase::focusSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::$_1 &,re::RenderGraphMeshNodeBase::focusSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::FocusSortKey *>(v25, &v25[4 * (v29 >> 1)], v270);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::RenderGraphMeshNodeBase::focusSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::$_1 &,re::RenderGraphMeshNodeBase::focusSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::FocusSortKey *>(v25 + 4, v31 - 4, (long long *)(a2 - 128));
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::RenderGraphMeshNodeBase::focusSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::$_1 &,re::RenderGraphMeshNodeBase::focusSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::FocusSortKey *>(v25 + 8, &v25[4 * v30 + 4], (long long *)(a2 - 192));
            BOOL result = (unint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::RenderGraphMeshNodeBase::focusSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::$_1 &,re::RenderGraphMeshNodeBase::focusSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::FocusSortKey *>(v31 - 4, v31, &v25[4 * v30 + 4]);
            long long v32 = v25[1];
            long long v33 = v25[3];
            a15 = v25[2];
            a16 = v33;
            a14 = v32;
            a13 = *v25;
            long long v35 = v31[1];
            long long v34 = v31[2];
            long long v36 = *v31;
            *((_DWORD *)v25 + 12) = *((_DWORD *)v31 + 12);
            v25[1] = v35;
            _OWORD v25[2] = v34;
            *long long v25 = v36;
            long long v38 = a14;
            long long v37 = a15;
            long long v39 = a13;
            *((_DWORD *)v31 + 12) = a16;
            v31[1] = v38;
            void v31[2] = v37;
            *long long v31 = v39;
          }
          else
          {
            BOOL result = (unint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::RenderGraphMeshNodeBase::focusSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::$_1 &,re::RenderGraphMeshNodeBase::focusSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::FocusSortKey *>(&v25[4 * (v29 >> 1)], v25, v270);
          }
          --v23;
          if (v22) {
            break;
          }
          uint64_t v44 = 0;
          while (1)
          {
            unint64_t v45 = *(void *)((char *)v25 + v44 - 32);
            unint64_t v46 = *(void *)((char *)v25 + v44 + 32);
            if (v45 != v46) {
              break;
            }
            v44 -= 8;
            if (v44 == -40) {
              goto LABEL_14;
            }
          }
          if (v45 < v46) {
            break;
          }
LABEL_14:
          uint64_t v47 = 0;
          long long v49 = v25[2];
          long long v48 = v25[3];
          long long vars0 = v25[1];
          long long v273 = v49;
          int v276 = v48;
          long long v271 = *v25;
          while (1)
          {
            unint64_t v50 = *(void *)((char *)&v271 + v47 + 32);
            unint64_t v51 = *(void *)(a2 + v47 - 32);
            BOOL v52 = v50 >= v51;
            if (v50 != v51) {
              break;
            }
            v47 -= 8;
            if (v47 == -40)
            {
              long long v53 = v25;
              while (1)
              {
LABEL_76:
                long long v27 = v53 + 4;
                if ((unint64_t)(v53 + 4) >= a2) {
                  goto LABEL_84;
                }
                uint64_t v96 = 0;
                while (1)
                {
                  unint64_t v97 = *(void *)(v26 + v96);
                  unint64_t v98 = *(void *)((char *)v53 + v96 + 96);
                  if (v97 != v98) {
                    break;
                  }
                  v96 -= 8;
                  if (v96 == -40) {
                    goto LABEL_82;
                  }
                }
                BOOL v40 = v97 < v98;
LABEL_82:
                v53 += 4;
                if (v97 != v98)
                {
                  long long v53 = v27;
                  if (v40) {
                    goto LABEL_84;
                  }
                }
              }
            }
          }
          uint64_t v92 = v25;
          long long v53 = v25;
          if (v52) {
            goto LABEL_76;
          }
          while (1)
          {
            uint64_t v93 = 0;
            long long v27 = v92 + 4;
            while (1)
            {
              unint64_t v94 = *(void *)(v26 + v93);
              unint64_t v95 = *(void *)((char *)v92 + v93 + 96);
              if (v94 != v95) {
                break;
              }
              v93 -= 8;
              if (v93 == -40) {
                goto LABEL_73;
              }
            }
            BOOL v40 = v94 < v95;
LABEL_73:
            v92 += 4;
            if (v94 != v95)
            {
              uint64_t v92 = v27;
              if (v40) {
                break;
              }
            }
          }
LABEL_84:
          unint64_t v99 = a2;
          if ((unint64_t)v27 < a2)
          {
            unint64_t v100 = a2;
            do
            {
              uint64_t v101 = 0;
              unint64_t v99 = v100 - 64;
              while (1)
              {
                unint64_t v102 = *(void *)(v26 + v101);
                unint64_t v103 = *(void *)(v100 + v101 - 32);
                if (v102 != v103) {
                  break;
                }
                v101 -= 8;
                if (v101 == -40) {
                  goto LABEL_106;
                }
              }
              v100 -= 64;
            }
            while (v102 < v103);
          }
LABEL_106:
          while ((unint64_t)v27 < v99)
          {
            long long v104 = v27[1];
            long long v105 = v27[3];
            a15 = v27[2];
            a16 = v105;
            a14 = v104;
            a13 = *v27;
            long long v107 = *(_OWORD *)(v99 + 16);
            long long v106 = *(_OWORD *)(v99 + 32);
            long long v108 = *(_OWORD *)v99;
            *((_DWORD *)v27 + 12) = *(_DWORD *)(v99 + 48);
            v27[1] = v107;
            v27[2] = v106;
            *long long v27 = v108;
            long long v110 = a14;
            long long v109 = a15;
            long long v111 = a13;
            *(_DWORD *)(v99 + 4re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = a16;
            *(_OWORD *)(v99 + 16) = v110;
            *(_OWORD *)(v99 + 32) = v109;
            *(_OWORD *)unint64_t v99 = v111;
            long long v112 = v27;
            while (1)
            {
              uint64_t v113 = 0;
              long long v27 = v112 + 4;
              while (1)
              {
                unint64_t v114 = *(void *)(v26 + v113);
                unint64_t v115 = *(void *)((char *)v112 + v113 + 96);
                if (v114 != v115) {
                  break;
                }
                v113 -= 8;
                if (v113 == -40) {
                  goto LABEL_98;
                }
              }
              BOOL v41 = v114 < v115;
LABEL_98:
              v112 += 4;
              if (v114 != v115)
              {
                long long v112 = v27;
                if (v41) {
                  break;
                }
              }
            }
            unint64_t v116 = v99;
            do
            {
              uint64_t v117 = 0;
              unint64_t v99 = v116 - 64;
              while (1)
              {
                unint64_t v118 = *(void *)(v26 + v117);
                unint64_t v119 = *(void *)(v116 + v117 - 32);
                if (v118 != v119) {
                  break;
                }
                v117 -= 8;
                if (v117 == -40) {
                  goto LABEL_106;
                }
              }
              v116 -= 64;
            }
            while (v118 < v119);
          }
          int v120 = v27 - 4;
          BOOL v20 = v27 - 4 >= v25;
          BOOL v21 = v27 - 4 == v25;
          if (v27 - 4 != v25)
          {
            int v121 = *((_DWORD *)v27 - 4);
            long long v122 = *(v27 - 2);
            v25[1] = *(v27 - 3);
            _OWORD v25[2] = v122;
            long long v123 = *v120;
            *((_DWORD *)v25 + 12) = v121;
            *long long v25 = v123;
          }
          char v22 = 0;
          *(v27 - 3) = vars0;
          *(v27 - 2) = v273;
          long long v124 = v271;
          *((_DWORD *)v27 - 4) = v276;
          *int v120 = v124;
        }
        long long v55 = v25[2];
        long long v54 = v25[3];
        long long vars0 = v25[1];
        long long v274 = v55;
        int v277 = v54;
        long long v271 = *v25;
        unint64_t v56 = v25;
        do
        {
          uint64_t v57 = 0;
          long long v58 = v56;
          v56 += 4;
          while (1)
          {
            unint64_t v59 = *(void *)((char *)v58 + v57 + 96);
            unint64_t v60 = *(void *)((char *)&v271 + v57 + 32);
            if (v59 != v60) {
              break;
            }
            v57 -= 8;
            if (v57 == -40) {
              goto LABEL_25;
            }
          }
        }
        while (v59 < v60);
LABEL_25:
        unint64_t v61 = a2;
        if (v58 == v25)
        {
          unint64_t v66 = a2;
          while ((unint64_t)v56 < v66)
          {
            uint64_t v67 = 0;
            unint64_t v63 = v66 - 64;
            while (1)
            {
              unint64_t v68 = *(void *)(v66 + v67 - 32);
              unint64_t v69 = *(void *)(v26 + v67);
              if (v68 != v69) {
                break;
              }
              v67 -= 8;
              if (v67 == -40) {
                goto LABEL_41;
              }
            }
            BOOL v42 = v68 < v69;
LABEL_41:
            v66 -= 64;
            if (v68 != v69)
            {
              unint64_t v66 = v63;
              if (v42) {
                goto LABEL_45;
              }
            }
          }
          unint64_t v63 = v66;
        }
        else
        {
          while (1)
          {
            uint64_t v62 = 0;
            unint64_t v63 = v61 - 64;
            while (1)
            {
              unint64_t v64 = *(void *)(v61 + v62 - 32);
              unint64_t v65 = *(void *)(v26 + v62);
              if (v64 != v65) {
                break;
              }
              v62 -= 8;
              if (v62 == -40) {
                goto LABEL_31;
              }
            }
            BOOL v42 = v64 < v65;
LABEL_31:
            v61 -= 64;
            if (v64 != v65)
            {
              unint64_t v61 = v63;
              if (v42) {
                break;
              }
            }
          }
        }
LABEL_45:
        if ((unint64_t)v56 < v63)
        {
          long long v70 = v56;
          unint64_t v71 = v63;
          do
          {
            long long v73 = v70[3];
            a15 = v70[2];
            long long v72 = a15;
            a16 = v73;
            long long v74 = v70[1];
            a13 = *v70;
            long long v75 = a13;
            a14 = v74;
            long long v77 = *(_OWORD *)(v71 + 16);
            long long v76 = *(_OWORD *)(v71 + 32);
            long long v78 = *(_OWORD *)v71;
            *((_DWORD *)v70 + 12) = *(_DWORD *)(v71 + 48);
            v70[1] = v77;
            v70[2] = v76;
            *long long v70 = v78;
            int v79 = a16;
            *(_OWORD *)(v71 + 16) = v74;
            *(_OWORD *)(v71 + 32) = v72;
            *(_OWORD *)unint64_t v71 = v75;
            *(_DWORD *)(v71 + 4re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = v79;
            do
            {
              uint64_t v80 = 0;
              long long v58 = v70;
              v70 += 4;
              while (1)
              {
                unint64_t v81 = *(void *)((char *)v58 + v80 + 96);
                unint64_t v82 = *(void *)(v26 + v80);
                if (v81 != v82) {
                  break;
                }
                v80 -= 8;
                if (v80 == -40) {
                  goto LABEL_53;
                }
              }
            }
            while (v81 < v82);
            while (1)
            {
LABEL_53:
              uint64_t v83 = 0;
              unint64_t v84 = v71 - 64;
              while (1)
              {
                unint64_t v85 = *(void *)(v71 + v83 - 32);
                unint64_t v86 = *(void *)(v26 + v83);
                if (v85 != v86) {
                  break;
                }
                v83 -= 8;
                if (v83 == -40) {
                  goto LABEL_58;
                }
              }
              BOOL v43 = v85 < v86;
LABEL_58:
              v71 -= 64;
              if (v85 != v86)
              {
                unint64_t v71 = v84;
                if (v43) {
                  break;
                }
              }
            }
            unint64_t v71 = v84;
          }
          while ((unint64_t)v70 < v84);
        }
        if (v58 != v25)
        {
          int v87 = *((_DWORD *)v58 + 12);
          long long v88 = v58[2];
          v25[1] = v58[1];
          _OWORD v25[2] = v88;
          long long v89 = *v58;
          *((_DWORD *)v25 + 12) = v87;
          *long long v25 = v89;
        }
        v58[1] = vars0;
        v58[2] = v274;
        long long v90 = v271;
        *((_DWORD *)v58 + 12) = v277;
        long long *v58 = v90;
        if ((unint64_t)v56 >= v63) {
          break;
        }
LABEL_66:
        BOOL result = std::__introsort<std::_ClassicAlgPolicy,re::RenderGraphMeshNodeBase::focusSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::$_1 &,re::RenderGraphMeshNodeBase::focusSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::FocusSortKey *,false>(v25, v58, v23, v22 & 1);
        char v22 = 0;
        long long v27 = v58 + 4;
      }
      BOOL v91 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::RenderGraphMeshNodeBase::focusSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::$_1 &,re::RenderGraphMeshNodeBase::focusSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::FocusSortKey *>((char *)v25, (char *)v58);
      long long v27 = v58 + 4;
      BOOL result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::RenderGraphMeshNodeBase::focusSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::$_1 &,re::RenderGraphMeshNodeBase::focusSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::FocusSortKey *>((char *)v58 + 64, (char *)a2);
      if (result) {
        break;
      }
      if (!v91) {
        goto LABEL_66;
      }
    }
    a2 = (unint64_t)v58;
    if (!v91) {
      continue;
    }
    return result;
  }
}

_OWORD *std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::RenderGraphMeshNodeBase::focusSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::$_1 &,re::RenderGraphMeshNodeBase::focusSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::FocusSortKey *>(_OWORD *result, long long *a2, long long *a3)
{
  uint64_t v5 = 32;
  while (1)
  {
    unint64_t v6 = *(void *)((char *)a2 + v5);
    unint64_t v7 = *(void *)((char *)result + v5);
    if (v6 != v7) {
      break;
    }
    v5 -= 8;
    if (v5 == -8) {
      goto LABEL_6;
    }
  }
  BOOL v3 = v6 < v7;
LABEL_6:
  BOOL v8 = v6 != v7 && v3;
  uint64_t v9 = 32;
  while (1)
  {
    unint64_t v10 = *(void *)((char *)a3 + v9);
    unint64_t v11 = *(void *)((char *)a2 + v9);
    if (v10 != v11) {
      break;
    }
    v9 -= 8;
    if (v9 == -8) {
      goto LABEL_11;
    }
  }
  BOOL v4 = v10 < v11;
LABEL_11:
  if (v8)
  {
    if (v10 != v11 && v4)
    {
      long long v12 = result[2];
      long long v45 = result[3];
      long long v13 = *result;
      long long v14 = result[1];
      long long v16 = a3[1];
      long long v15 = a3[2];
      long long v17 = *a3;
      *((_DWORD *)result + 12) = *((_DWORD *)a3 + 12);
      result[1] = v16;
      result[2] = v15;
      *BOOL result = v17;
LABEL_27:
      a3[1] = v14;
      a3[2] = v12;
      *a3 = v13;
      *((_DWORD *)a3 + 12) = v45;
      return result;
    }
    long long v27 = result[2];
    long long v47 = result[3];
    long long v28 = *result;
    long long v29 = result[1];
    long long v31 = a2[1];
    long long v30 = a2[2];
    long long v32 = *a2;
    *((_DWORD *)result + 12) = *((_DWORD *)a2 + 12);
    result[1] = v31;
    result[2] = v30;
    *BOOL result = v32;
    a2[1] = v29;
    a2[2] = v27;
    *a2 = v28;
    *((_DWORD *)a2 + 12) = v47;
    uint64_t v33 = 32;
    while (1)
    {
      unint64_t v34 = *(void *)((char *)a3 + v33);
      unint64_t v35 = *(void *)((char *)a2 + v33);
      if (v34 != v35) {
        break;
      }
      v33 -= 8;
      if (v33 == -8) {
        return result;
      }
    }
    if (v34 < v35)
    {
      long long v12 = a2[2];
      long long v45 = a2[3];
      long long v13 = *a2;
      long long v14 = a2[1];
      long long v43 = a3[1];
      long long v42 = a3[2];
      long long v44 = *a3;
      *((_DWORD *)a2 + 12) = *((_DWORD *)a3 + 12);
      a2[1] = v43;
      a2[2] = v42;
      *a2 = v44;
      goto LABEL_27;
    }
  }
  else if (v10 != v11 && v4)
  {
    long long v18 = a2[2];
    long long v46 = a2[3];
    long long v19 = *a2;
    long long v20 = a2[1];
    long long v22 = a3[1];
    long long v21 = a3[2];
    long long v23 = *a3;
    *((_DWORD *)a2 + 12) = *((_DWORD *)a3 + 12);
    a2[1] = v22;
    a2[2] = v21;
    *a2 = v23;
    a3[1] = v20;
    a3[2] = v18;
    *a3 = v19;
    *((_DWORD *)a3 + 12) = v46;
    uint64_t v24 = 32;
    while (1)
    {
      unint64_t v25 = *(void *)((char *)a2 + v24);
      unint64_t v26 = *(void *)((char *)result + v24);
      if (v25 != v26) {
        break;
      }
      v24 -= 8;
      if (v24 == -8) {
        return result;
      }
    }
    if (v25 < v26)
    {
      long long v36 = result[2];
      long long v48 = result[3];
      long long v37 = *result;
      long long v38 = result[1];
      long long v40 = a2[1];
      long long v39 = a2[2];
      long long v41 = *a2;
      *((_DWORD *)result + 12) = *((_DWORD *)a2 + 12);
      result[1] = v40;
      result[2] = v39;
      *BOOL result = v41;
      a2[1] = v38;
      a2[2] = v36;
      *a2 = v37;
      *((_DWORD *)a2 + 12) = v48;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::RenderGraphMeshNodeBase::focusSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::$_1 &,re::RenderGraphMeshNodeBase::focusSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::FocusSortKey *>(char *a1, char *a2)
{
  uint64_t v4 = (a2 - a1) >> 6;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = 0;
      unint64_t v7 = a2 - 64;
      while (1)
      {
        unint64_t v8 = *(void *)&a2[v6 - 32];
        unint64_t v9 = *(void *)&a1[v6 + 32];
        if (v8 != v9) {
          break;
        }
        v6 -= 8;
        if (v6 == -40) {
          return 1;
        }
      }
      if (v8 < v9)
      {
        long long v36 = *((_OWORD *)a1 + 2);
        long long vars0 = *((_OWORD *)a1 + 3);
        long long v37 = *(_OWORD *)a1;
        long long v38 = *((_OWORD *)a1 + 1);
        long long v40 = *((_OWORD *)a2 - 3);
        long long v39 = *((_OWORD *)a2 - 2);
        long long v41 = *(_OWORD *)v7;
        *((_DWORD *)a1 + 12) = *((_DWORD *)a2 - 4);
        *((_OWORD *)a1 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = v40;
        *((_OWORD *)a1 + 2) = v39;
        *(_OWORD *)a1 = v41;
        *((_OWORD *)a2 - 3) = v38;
        *((_OWORD *)a2 - 2) = v36;
        *(_OWORD *)unint64_t v7 = v37;
        *((_DWORD *)a2 - 4) = vars0;
      }
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::RenderGraphMeshNodeBase::focusSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::$_1 &,re::RenderGraphMeshNodeBase::focusSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::FocusSortKey *>(a1, (long long *)a1 + 4, (long long *)a2 - 4);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::RenderGraphMeshNodeBase::focusSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::$_1 &,re::RenderGraphMeshNodeBase::focusSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::FocusSortKey *>((long long *)a1, (long long *)a1 + 4, (long long *)a1 + 8, (uint64_t)(a2 - 64));
      return 1;
    case 5:
      long long v29 = (long long *)(a1 + 64);
      long long v30 = (long long *)(a1 + 128);
      long long v31 = (long long *)(a1 + 192);
      long long v32 = a2 - 64;
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::RenderGraphMeshNodeBase::focusSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::$_1 &,re::RenderGraphMeshNodeBase::focusSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::FocusSortKey *>((long long *)a1, (long long *)a1 + 4, (long long *)a1 + 8, (uint64_t)(a1 + 192));
      uint64_t v33 = 0;
      while (1)
      {
        unint64_t v34 = *(void *)&a2[v33 - 32];
        unint64_t v35 = *(void *)&a1[v33 + 224];
        if (v34 != v35) {
          break;
        }
        v33 -= 8;
        if (v33 == -40) {
          return 1;
        }
      }
      if (v34 < v35)
      {
        uint64_t v42 = 0;
        long long v43 = *((_OWORD *)a1 + 14);
        long long vars0 = *((_OWORD *)a1 + 15);
        long long v44 = *v31;
        long long v45 = *((_OWORD *)a1 + 13);
        long long v47 = *((_OWORD *)a2 - 3);
        long long v46 = *((_OWORD *)a2 - 2);
        long long v48 = *(_OWORD *)v32;
        *((_DWORD *)a1 + 60) = *((_DWORD *)a2 - 4);
        *((_OWORD *)a1 + 13) = v47;
        *((_OWORD *)a1 + 14) = v46;
        *long long v31 = v48;
        *((_DWORD *)a2 - 4) = vars0;
        *((_OWORD *)a2 - 3) = v45;
        *((_OWORD *)a2 - 2) = v43;
        *(_OWORD *)long long v32 = v44;
        BOOL result = 1;
        while (1)
        {
          unint64_t v49 = *(void *)&a1[v42 + 224];
          unint64_t v50 = *(void *)&a1[v42 + 160];
          if (v49 != v50) {
            break;
          }
          v42 -= 8;
          if (v42 == -40) {
            return result;
          }
        }
        if (v49 < v50)
        {
          uint64_t v51 = 0;
          long long v52 = *((_OWORD *)a1 + 10);
          long long vars0 = *((_OWORD *)a1 + 11);
          *((_DWORD *)a1 + 44) = *((_DWORD *)a1 + 60);
          *((_DWORD *)a1 + 60) = vars0;
          long long v54 = *v30;
          long long v53 = *((_OWORD *)a1 + 9);
          long long v55 = *((_OWORD *)a1 + 13);
          long long *v30 = *v31;
          *((_OWORD *)a1 + 9) = v55;
          *((_OWORD *)a1 + 10) = *((_OWORD *)a1 + 14);
          *long long v31 = v54;
          *((_OWORD *)a1 + 13) = v53;
          *((_OWORD *)a1 + 14) = v52;
          BOOL result = 1;
          while (1)
          {
            unint64_t v56 = *(void *)&a1[v51 + 160];
            unint64_t v57 = *(void *)&a1[v51 + 96];
            if (v56 != v57) {
              break;
            }
            v51 -= 8;
            if (v51 == -40) {
              return result;
            }
          }
          if (v56 < v57)
          {
            uint64_t v58 = 0;
            long long v59 = *((_OWORD *)a1 + 6);
            long long vars0 = *((_OWORD *)a1 + 7);
            *((_DWORD *)a1 + 2re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = *((_DWORD *)a1 + 44);
            *((_DWORD *)a1 + 44) = vars0;
            long long v61 = *v29;
            long long v60 = *((_OWORD *)a1 + 5);
            long long v62 = *((_OWORD *)a1 + 9);
            long long *v29 = *v30;
            *((_OWORD *)a1 + 5) = v62;
            *((_OWORD *)a1 + 6) = *((_OWORD *)a1 + 10);
            long long *v30 = v61;
            *((_OWORD *)a1 + 9) = v60;
            *((_OWORD *)a1 + 10) = v59;
            BOOL result = 1;
            while (1)
            {
              unint64_t v63 = *(void *)&a1[v58 + 96];
              unint64_t v64 = *(void *)&a1[v58 + 32];
              if (v63 != v64) {
                break;
              }
              v58 -= 8;
              if (v58 == -40) {
                return result;
              }
            }
            if (v63 < v64)
            {
              long long v65 = *((_OWORD *)a1 + 2);
              long long vars0 = *((_OWORD *)a1 + 3);
              long long v67 = *(_OWORD *)a1;
              long long v66 = *((_OWORD *)a1 + 1);
              long long v68 = *((_OWORD *)a1 + 5);
              *(_OWORD *)a1 = *v29;
              *((_OWORD *)a1 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = v68;
              *((_OWORD *)a1 + 2) = *((_OWORD *)a1 + 6);
              *((_DWORD *)a1 + 12) = *((_DWORD *)a1 + 28);
              long long *v29 = v67;
              *((_OWORD *)a1 + 5) = v66;
              *((_OWORD *)a1 + 6) = v65;
              *((_DWORD *)a1 + 2re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = vars0;
            }
          }
        }
      }
      return 1;
    default:
      unint64_t v10 = a1 + 128;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::RenderGraphMeshNodeBase::focusSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::$_1 &,re::RenderGraphMeshNodeBase::focusSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::FocusSortKey *>(a1, (long long *)a1 + 4, (long long *)a1 + 8);
      unint64_t v11 = a1 + 192;
      if (a1 + 192 == a2) {
        return 1;
      }
      int v12 = 0;
      long long v13 = a1 + 96;
      long long v14 = a1;
      break;
  }
  while (2)
  {
    uint64_t v15 = 0;
    while (1)
    {
      unint64_t v16 = *(void *)((char *)v14 + v15 + 224);
      unint64_t v17 = *(void *)((char *)v14 + v15 + 160);
      if (v16 != v17) {
        break;
      }
      v15 -= 8;
      if (v15 == -40) {
        goto LABEL_23;
      }
    }
    if (v16 < v17)
    {
      long long v18 = *((_OWORD *)v11 + 1);
      long long v69 = *(_OWORD *)v11;
      long long v70 = v18;
      long long v19 = *((_OWORD *)v11 + 3);
      long long v71 = *((_OWORD *)v11 + 2);
      long long vars0 = v19;
      long long v20 = v13;
      long long v21 = v11;
      while (1)
      {
        long long v22 = *((_OWORD *)v10 + 1);
        *(_OWORD *)long long v21 = *(_OWORD *)v10;
        *((_OWORD *)v21 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = v22;
        *((_OWORD *)v21 + 2) = *((_OWORD *)v10 + 2);
        *((_DWORD *)v21 + 12) = *((_DWORD *)v10 + 12);
        if (v10 == a1) {
          break;
        }
        long long v21 = v10;
        uint64_t v23 = 0;
        v10 -= 64;
        while (1)
        {
          unint64_t v24 = *(void *)(((unint64_t)&v69 | 0x20) + v23);
          unint64_t v25 = *(void *)((char *)v20 + v23);
          if (v24 != v25) {
            break;
          }
          v23 -= 8;
          if (v23 == -40) {
            goto LABEL_22;
          }
        }
        v20 -= 4;
        if (v24 >= v25) {
          goto LABEL_22;
        }
      }
      long long v21 = a1;
LABEL_22:
      int v26 = vars0;
      long long v27 = v71;
      *((_OWORD *)v21 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = v70;
      *((_OWORD *)v21 + 2) = v27;
      long long v28 = v69;
      *((_DWORD *)v21 + 12) = v26;
      *(_OWORD *)long long v21 = v28;
      if (++v12 == 8) {
        return v11 + 64 == a2;
      }
    }
LABEL_23:
    unint64_t v10 = v11;
    v14 += 4;
    v13 += 4;
    v11 += 64;
    if (v11 != a2) {
      continue;
    }
    return 1;
  }
}

_OWORD *std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::RenderGraphMeshNodeBase::focusSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::$_1 &,re::RenderGraphMeshNodeBase::focusSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::FocusSortKey *>(long long *a1, long long *a2, long long *a3, uint64_t a4)
{
  BOOL result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::RenderGraphMeshNodeBase::focusSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::$_1 &,re::RenderGraphMeshNodeBase::focusSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::FocusSortKey *>(a1, a2, a3);
  uint64_t v9 = 32;
  while (1)
  {
    unint64_t v10 = *(void *)(a4 + v9);
    unint64_t v11 = *(void *)((char *)a3 + v9);
    if (v10 != v11) {
      break;
    }
    v9 -= 8;
    if (v9 == -8) {
      return result;
    }
  }
  if (v10 < v11)
  {
    long long v12 = a3[2];
    long long v36 = a3[3];
    long long v13 = *a3;
    long long v14 = a3[1];
    long long v16 = *(_OWORD *)(a4 + 16);
    long long v15 = *(_OWORD *)(a4 + 32);
    long long v17 = *(_OWORD *)a4;
    *((_DWORD *)a3 + 12) = *(_DWORD *)(a4 + 48);
    a3[1] = v16;
    a3[2] = v15;
    *a3 = v17;
    *(_OWORD *)(a4 + 16) = v14;
    *(_OWORD *)(a4 + 32) = v12;
    *(_OWORD *)a4 = v13;
    *(_DWORD *)(a4 + 4re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8) = v36;
    uint64_t v18 = 32;
    while (1)
    {
      unint64_t v19 = *(void *)((char *)a3 + v18);
      unint64_t v20 = *(void *)((char *)a2 + v18);
      if (v19 != v20) {
        break;
      }
      v18 -= 8;
      if (v18 == -8) {
        return result;
      }
    }
    if (v19 < v20)
    {
      long long v21 = a2[2];
      long long v37 = a2[3];
      long long v22 = *a2;
      long long v23 = a2[1];
      long long v25 = a3[1];
      long long v24 = a3[2];
      long long v26 = *a3;
      *((_DWORD *)a2 + 12) = *((_DWORD *)a3 + 12);
      a2[1] = v25;
      a2[2] = v24;
      *a2 = v26;
      a3[1] = v23;
      a3[2] = v21;
      *a3 = v22;
      *((_DWORD *)a3 + 12) = v37;
      uint64_t v27 = 32;
      while (1)
      {
        unint64_t v28 = *(void *)((char *)a2 + v27);
        unint64_t v29 = *(void *)((char *)a1 + v27);
        if (v28 != v29) {
          break;
        }
        v27 -= 8;
        if (v27 == -8) {
          return result;
        }
      }
      if (v28 < v29)
      {
        long long v30 = a1[2];
        long long v38 = a1[3];
        long long v31 = *a1;
        long long v32 = a1[1];
        long long v34 = a2[1];
        long long v33 = a2[2];
        long long v35 = *a2;
        *((_DWORD *)a1 + 12) = *((_DWORD *)a2 + 12);
        a1[1] = v34;
        a1[2] = v33;
        *a1 = v35;
        a2[1] = v32;
        a2[2] = v30;
        *a2 = v31;
        *((_DWORD *)a2 + 12) = v38;
      }
    }
  }
  return result;
}

void *re::DynamicArray<re::RenderGraphMeshNodeBase::techniqueSort(re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::Allocator *)::TechniqueSortKey>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      BOOL result = (void *)*result;
      if (*v5)
      {
        if (!a2)
        {
          unint64_t v7 = 0;
          if (!v3) {
            goto LABEL_9;
          }
          goto LABEL_8;
        }
        if (a2 >> 59)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 32, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          uint64_t v2 = 32 * a2;
          BOOL result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 32 * a2, 32);
          if (result)
          {
            unint64_t v7 = result;
            if (!v5[1])
            {
LABEL_9:
              v5[4] = v7;
              v5[1] = a2;
              return result;
            }
LABEL_8:
            memcpy(v7, (const void *)v5[4], 32 * v5[2]);
            BOOL result = (void *)(*(uint64_t (**)(void, void))(*(void *)*v5 + 40))(*v5, v5[4]);
            goto LABEL_9;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        BOOL result = (void *)_os_crash();
        __break(1u);
      }
      else
      {
        BOOL result = (void *)re::DynamicArray<re::RenderGraphMeshNodeBase::techniqueSort(re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::Allocator *)::TechniqueSortKey>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
      }
    }
  }
  return result;
}

double std::__introsort<std::_ClassicAlgPolicy,re::RenderGraphMeshNodeBase::techniqueSort(re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::Allocator *)::$_0 &,re::RenderGraphMeshNodeBase::techniqueSort(re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::Allocator *)::TechniqueSortKey *,false>(long long *a1, long long *a2, unint64_t a3, unint64_t a4, unint64_t a5, __n128 a6, uint64_t a7, BOOL a8)
{
  char v10 = a4;
  unint64_t v11 = a3;
  unint64_t v14 = (unint64_t)v183 | 0x10;
  while (2)
  {
    long long v182 = a2 - 2;
    long long v15 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v15;
          uint64_t v16 = (char *)a2 - (char *)v15;
          unint64_t v17 = ((char *)a2 - (char *)v15) >> 5;
          if (v9 || !v8)
          {
            switch(v17)
            {
              case 0uLL:
              case 1uLL:
                return a6.n128_f64[0];
              case 2uLL:
                uint64_t v92 = 0;
                while (1)
                {
                  unint64_t v93 = *(void *)((char *)a2 + v92 - 16);
                  unint64_t v94 = *(void *)((char *)v15 + v92 + 16);
                  if (v93 != v94) {
                    break;
                  }
                  v92 -= 8;
                  if (v92 == -24) {
                    return a6.n128_f64[0];
                  }
                }
                if (v93 < v94)
                {
                  long long v157 = v15[1];
                  *(_OWORD *)var10 = *v15;
                  *(_OWORD *)&var10[16] = v157;
                  __n128 v158 = (__n128)*v182;
                  *(long long *)((char *)v15 + 15) = *(long long *)((char *)a2 - 17);
                  *long long v15 = (__int128)v158;
                  a6 = *(__n128 *)var10;
                  *(long long *)((char *)a2 - 17) = *(_OWORD *)&var10[15];
                  *long long v182 = (__int128)a6;
                }
                return a6.n128_f64[0];
              case 3uLL:
                a6.n128_f64[0] = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::RenderGraphMeshNodeBase::techniqueSort(re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::Allocator *)::$_0 &,re::RenderGraphMeshNodeBase::techniqueSort(re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::Allocator *)::TechniqueSortKey *>(v15, v15 + 2, v182, a6.n128_f64[0]);
                return a6.n128_f64[0];
              case 4uLL:
                a6.n128_f64[0] = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::RenderGraphMeshNodeBase::techniqueSort(re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::Allocator *)::$_0 &,re::RenderGraphMeshNodeBase::techniqueSort(re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::Allocator *)::TechniqueSortKey *>(v15, v15 + 2, v15 + 4, v182, a6.n128_f64[0]);
                return a6.n128_f64[0];
              case 5uLL:
                unint64_t v95 = v15 + 2;
                uint64_t v96 = v15 + 4;
                unint64_t v97 = v15 + 6;
                a6.n128_f64[0] = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::RenderGraphMeshNodeBase::techniqueSort(re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::Allocator *)::$_0 &,re::RenderGraphMeshNodeBase::techniqueSort(re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::Allocator *)::TechniqueSortKey *>(v15, v15 + 2, v15 + 4, v15 + 6, a6.n128_f64[0]);
                uint64_t v98 = 0;
                break;
              default:
                JUMPOUT(0);
            }
            while (1)
            {
              unint64_t v99 = *(void *)((char *)a2 + v98 - 16);
              unint64_t v100 = *(void *)((char *)v15 + v98 + 112);
              if (v99 != v100) {
                break;
              }
              v98 -= 8;
              if (v98 == -24) {
                return a6.n128_f64[0];
              }
            }
            if (v99 < v100)
            {
              uint64_t v159 = 0;
              long long v160 = v15[7];
              *(_OWORD *)var10 = *v97;
              long long v161 = *(_OWORD *)var10;
              *(_OWORD *)&var10[16] = v160;
              a6 = *(__n128 *)((char *)a2 - 17);
              *unint64_t v97 = *v182;
              *(long long *)((char *)v15 + 11re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = (__int128)a6;
              a6.n128_u64[0] = *(void *)&var10[15];
              *(long long *)((char *)a2 - 17) = *(_OWORD *)&var10[15];
              *long long v182 = v161;
              while (1)
              {
                unint64_t v162 = *(void *)((char *)v15 + v159 + 112);
                unint64_t v163 = *(void *)((char *)v15 + v159 + 80);
                if (v162 != v163) {
                  break;
                }
                v159 -= 8;
                if (v159 == -24) {
                  return a6.n128_f64[0];
                }
              }
              if (v162 < v163)
              {
                uint64_t v173 = 0;
                long long v174 = v15[5];
                *(_OWORD *)var10 = *v96;
                a6 = *(__n128 *)var10;
                *(_OWORD *)&var10[16] = v174;
                *uint64_t v96 = *v97;
                *(long long *)((char *)v15 + 79) = *(long long *)((char *)v15 + 111);
                *unint64_t v97 = (__int128)a6;
                a6.n128_u64[0] = *(void *)&var10[15];
                *(long long *)((char *)v15 + 11re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = *(_OWORD *)&var10[15];
                while (1)
                {
                  unint64_t v175 = *(void *)((char *)v15 + v173 + 80);
                  unint64_t v176 = *(void *)((char *)v15 + v173 + 48);
                  if (v175 != v176) {
                    break;
                  }
                  v173 -= 8;
                  if (v173 == -24) {
                    return a6.n128_f64[0];
                  }
                }
                if (v175 < v176)
                {
                  uint64_t v177 = 0;
                  long long v178 = v15[3];
                  *(_OWORD *)var10 = *v95;
                  a6 = *(__n128 *)var10;
                  *(_OWORD *)&var10[16] = v178;
                  *unint64_t v95 = *v96;
                  *(long long *)((char *)v15 + 47) = *(long long *)((char *)v15 + 79);
                  *uint64_t v96 = (__int128)a6;
                  a6.n128_u64[0] = *(void *)&var10[15];
                  *(long long *)((char *)v15 + 79) = *(_OWORD *)&var10[15];
                  while (1)
                  {
                    unint64_t v179 = *(void *)((char *)v15 + v177 + 48);
                    unint64_t v180 = *(void *)((char *)v15 + v177 + 16);
                    if (v179 != v180) {
                      break;
                    }
                    v177 -= 8;
                    if (v177 == -24) {
                      return a6.n128_f64[0];
                    }
                  }
                  if (v179 < v180)
                  {
                    a6 = (__n128)v15[1];
                    *(_OWORD *)var10 = *v15;
                    *(__n128 *)&var10[16] = a6;
                    *long long v15 = *v95;
                    *(long long *)((char *)v15 + 15) = *(long long *)((char *)v15 + 47);
                    *unint64_t v95 = *(_OWORD *)var10;
                    a6.n128_u64[0] = *(void *)&var10[15];
                    *(long long *)((char *)v15 + 47) = *(_OWORD *)&var10[15];
                  }
                }
              }
            }
            return a6.n128_f64[0];
          }
          if (v16 <= 767)
          {
            uint64_t v101 = v15 + 2;
            BOOL v103 = v15 == a2 || v101 == a2;
            if (v10)
            {
              if (!v103)
              {
                long long v104 = v15;
                do
                {
                  uint64_t v105 = 0;
                  while (1)
                  {
                    unint64_t v106 = *(void *)((char *)v104 + v105 + 48);
                    unint64_t v107 = *(void *)((char *)v104 + v105 + 16);
                    if (v106 != v107) {
                      break;
                    }
                    v105 -= 8;
                    if (v105 == -24) {
                      goto LABEL_151;
                    }
                  }
                  if (v106 < v107)
                  {
                    *(_OWORD *)&var10[16] = v101[1];
                    *(_OWORD *)var10 = *v101;
                    long long v108 = v104;
                    long long v109 = v101;
                    while (1)
                    {
                      *long long v109 = *v108;
                      *(long long *)((char *)v109 + 15) = *(long long *)((char *)v108 + 15);
                      if (v108 == v15) {
                        break;
                      }
                      long long v109 = v108;
                      uint64_t v110 = 0;
                      v108 -= 2;
                      while (1)
                      {
                        unint64_t v111 = *(void *)(((unint64_t)var10 | 0x10) + v110);
                        unint64_t v112 = *(void *)((char *)v109 + v110 - 16);
                        if (v111 != v112) {
                          break;
                        }
                        v110 -= 8;
                        if (v110 == -24) {
                          goto LABEL_150;
                        }
                      }
                      if (v111 >= v112) {
                        goto LABEL_150;
                      }
                    }
                    long long v109 = v15;
LABEL_150:
                    a6 = *(__n128 *)var10;
                    *(long long *)((char *)v109 + 15) = *(_OWORD *)&var10[15];
                    *long long v109 = (__int128)a6;
                  }
LABEL_151:
                  v101 += 2;
                  v104 += 2;
                }
                while (v101 != a2);
              }
            }
            else if (!v103)
            {
              do
              {
                uint64_t v164 = 0;
                while (1)
                {
                  unint64_t v165 = *(void *)((char *)a1 + v164 + 48);
                  unint64_t v166 = *(void *)((char *)a1 + v164 + 16);
                  if (v165 != v166) {
                    break;
                  }
                  v164 -= 8;
                  if (v164 == -24) {
                    goto LABEL_242;
                  }
                }
                if (v165 < v166)
                {
                  *(_OWORD *)&var10[16] = v101[1];
                  *(_OWORD *)var10 = *v101;
                  int v167 = a1;
                  long long v168 = v101;
                  do
                  {
                    uint64_t v169 = 0;
                    uint64_t v170 = v168;
                    long long v168 = v167;
                    *uint64_t v170 = *v167;
                    *(long long *)((char *)v170 + 15) = *(long long *)((char *)v167 + 15);
                    v167 -= 2;
                    while (1)
                    {
                      unint64_t v171 = *(void *)&var10[v169 + 16];
                      unint64_t v172 = *(void *)((char *)v168 + v169 - 16);
                      if (v171 != v172) {
                        break;
                      }
                      v169 -= 8;
                      if (v169 == -24) {
                        goto LABEL_241;
                      }
                    }
                  }
                  while (v171 < v172);
LABEL_241:
                  a6 = *(__n128 *)var10;
                  *(long long *)((char *)v168 + 15) = *(_OWORD *)&var10[15];
                  *long long v168 = (__int128)a6;
                }
LABEL_242:
                v101 += 2;
                a1 += 2;
              }
              while (v101 != a2);
            }
            return a6.n128_f64[0];
          }
          if (!v11)
          {
            if (v15 != a2)
            {
              int64_t v113 = (v17 - 2) >> 1;
              unint64_t v114 = &v15[4 * v113];
              unint64_t v115 = &v15[2 * v113];
              int64_t v116 = v113;
              do
              {
                int64_t v117 = v116;
                if (v113 >= v116)
                {
                  uint64_t v118 = (2 * v116) | 1;
                  unint64_t v119 = &v15[2 * v118];
                  if (2 * v117 + 2 < (uint64_t)v17)
                  {
                    uint64_t v120 = 0;
                    while (1)
                    {
                      unint64_t v121 = *(void *)((char *)v114 + v120 + 48);
                      a4 = *(void *)((char *)v114 + v120 + 80);
                      if (v121 != a4) {
                        break;
                      }
                      v120 -= 8;
                      if (v120 == -24) {
                        goto LABEL_162;
                      }
                    }
                    LOBYTE(a5) = v121 < a4;
LABEL_162:
                    if (((v121 != a4) & a5) != 0)
                    {
                      v119 += 2;
                      uint64_t v118 = 2 * v117 + 2;
                    }
                  }
                  long long v122 = &v15[2 * v117];
                  uint64_t v123 = 16;
                  while (1)
                  {
                    unint64_t v124 = *(void *)((char *)v119 + v123);
                    a3 = *(void *)((char *)v115 + v123);
                    if (v124 != a3) {
                      break;
                    }
                    v123 -= 8;
                    if (v123 == -8) {
                      goto LABEL_169;
                    }
                  }
                  if (v124 < a3) {
                    goto LABEL_189;
                  }
LABEL_169:
                  *(_OWORD *)&var10[16] = v122[1];
                  *(_OWORD *)var10 = *v122;
                  while (1)
                  {
                    uint64_t v125 = v119;
                    long long v126 = *v119;
                    *(long long *)((char *)v122 + 15) = *(long long *)((char *)v119 + 15);
                    *long long v122 = v126;
                    if (v113 < v118) {
                      break;
                    }
                    uint64_t v127 = (2 * v118) | 1;
                    unint64_t v119 = &v15[2 * v127];
                    uint64_t v128 = 2 * v118 + 2;
                    if (v128 < (uint64_t)v17)
                    {
                      a4 = 0;
                      unint64_t v129 = &v15[4 * v118];
                      while (1)
                      {
                        a5 = *(void *)((char *)v129 + a4 + 48);
                        unint64_t v130 = *(void *)((char *)v129 + a4 + 80);
                        if (a5 != v130) {
                          break;
                        }
                        a4 -= 8;
                        if (a4 == -24) {
                          goto LABEL_178;
                        }
                      }
                      a8 = a5 < v130;
LABEL_178:
                      if (a5 != v130 && a8)
                      {
                        v119 += 2;
                        uint64_t v118 = v128;
                      }
                      else
                      {
                        uint64_t v118 = v127;
                      }
                    }
                    else
                    {
                      uint64_t v118 = (2 * v118) | 1;
                    }
                    uint64_t v131 = 16;
                    while (1)
                    {
                      unint64_t v132 = *(void *)((char *)v119 + v131);
                      a3 = *(void *)&var10[v131];
                      if (v132 != a3) {
                        break;
                      }
                      v131 -= 8;
                      if (v131 == -8) {
                        goto LABEL_186;
                      }
                    }
                    LOBYTE(a4) = v132 < a3;
LABEL_186:
                    long long v122 = v125;
                    if (v132 != a3)
                    {
                      long long v122 = v125;
                      if (a4) {
                        break;
                      }
                    }
                  }
                  long long v133 = *(_OWORD *)var10;
                  *(long long *)((char *)v125 + 15) = *(_OWORD *)&var10[15];
                  *uint64_t v125 = v133;
                }
LABEL_189:
                int64_t v116 = v117 - 1;
                v114 -= 4;
                v115 -= 2;
              }
              while (v117);
              uint64_t v134 = (unint64_t)v16 >> 5;
              do
              {
                uint64_t v135 = 0;
                *(_OWORD *)&v183[16] = v15[1];
                *(_OWORD *)unint64_t v183 = *v15;
                BOOL v136 = (__n128 *)v15;
                do
                {
                  unint64_t v137 = &v136[2 * v135];
                  uint64_t v138 = (long long *)&v137[2];
                  uint64_t v139 = (2 * v135) | 1;
                  uint64_t v135 = 2 * v135 + 2;
                  if (v135 >= v134)
                  {
                    uint64_t v135 = v139;
                  }
                  else
                  {
                    uint64_t v140 = 0;
                    while (1)
                    {
                      unint64_t v141 = v137[3].n128_u64[v140];
                      unint64_t v142 = v137[5].n128_u64[v140];
                      if (v141 != v142) {
                        break;
                      }
                      if (--v140 == -3) {
                        goto LABEL_199;
                      }
                    }
                    LOBYTE(a3) = v141 < v142;
LABEL_199:
                    if (((v141 != v142) & a3) != 0) {
                      uint64_t v138 = (long long *)&v137[4];
                    }
                    else {
                      uint64_t v135 = v139;
                    }
                  }
                  __n128 v143 = (__n128)*v138;
                  *(__n128 *)((char *)v136 + 15) = *(__n128 *)((char *)v138 + 15);
                  *BOOL v136 = v143;
                  BOOL v136 = (__n128 *)v138;
                }
                while (v135 <= (uint64_t)((unint64_t)(v134 - 2) >> 1));
                a2 -= 2;
                if (v138 == a2)
                {
                  a6 = *(__n128 *)v183;
                  *(long long *)((char *)v138 + 15) = *(_OWORD *)&v183[15];
                  *uint64_t v138 = (__int128)a6;
                }
                else
                {
                  __n128 v144 = (__n128)*a2;
                  *(long long *)((char *)v138 + 15) = *(long long *)((char *)a2 + 15);
                  *uint64_t v138 = (__int128)v144;
                  a6 = *(__n128 *)v183;
                  *(long long *)((char *)a2 + 15) = *(_OWORD *)&v183[15];
                  *a2 = (__int128)a6;
                  uint64_t v145 = (char *)v138 - (char *)v15 + 32;
                  if (v145 >= 33)
                  {
                    unint64_t v146 = (((unint64_t)v145 >> 5) - 2) >> 1;
                    uint64_t v147 = &v15[2 * v146];
                    uint64_t v148 = 16;
                    while (1)
                    {
                      unint64_t v149 = *(void *)((char *)v147 + v148);
                      unint64_t v150 = *(void *)((char *)v138 + v148);
                      if (v149 != v150) {
                        break;
                      }
                      v148 -= 8;
                      if (v148 == -8) {
                        goto LABEL_210;
                      }
                    }
                    if (v149 < v150)
                    {
                      *(_OWORD *)&var10[16] = v138[1];
                      *(_OWORD *)var10 = *v138;
                      do
                      {
                        long long v152 = v147;
                        long long v153 = *v147;
                        *(long long *)((char *)v138 + 15) = *(long long *)((char *)v147 + 15);
                        *uint64_t v138 = v153;
                        if (!v146) {
                          break;
                        }
                        unint64_t v146 = (v146 - 1) >> 1;
                        uint64_t v147 = &v15[2 * v146];
                        uint64_t v154 = 16;
                        while (1)
                        {
                          unint64_t v155 = *(void *)((char *)v147 + v154);
                          unint64_t v156 = *(void *)&var10[v154];
                          if (v155 != v156) {
                            break;
                          }
                          v154 -= 8;
                          if (v154 == -8) {
                            goto LABEL_221;
                          }
                        }
                        uint64_t v138 = v152;
                      }
                      while (v155 < v156);
LABEL_221:
                      a6 = *(__n128 *)var10;
                      *(long long *)((char *)v152 + 15) = *(_OWORD *)&var10[15];
                      *long long v152 = (__int128)a6;
                    }
                  }
                }
LABEL_210:
                ;
              }
              while (v134-- > 2);
            }
            return a6.n128_f64[0];
          }
          unint64_t v18 = v17 >> 1;
          unint64_t v19 = &v15[2 * (v17 >> 1)];
          if ((unint64_t)v16 > 0x1000)
          {
            double v20 = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::RenderGraphMeshNodeBase::techniqueSort(re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::Allocator *)::$_0 &,re::RenderGraphMeshNodeBase::techniqueSort(re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::Allocator *)::TechniqueSortKey *>(a1, &a1[2 * (v17 >> 1)], v182, a6.n128_f64[0]);
            double v21 = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::RenderGraphMeshNodeBase::techniqueSort(re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::Allocator *)::$_0 &,re::RenderGraphMeshNodeBase::techniqueSort(re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::Allocator *)::TechniqueSortKey *>(a1 + 2, v19 - 2, a2 - 4, v20);
            double v22 = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::RenderGraphMeshNodeBase::techniqueSort(re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::Allocator *)::$_0 &,re::RenderGraphMeshNodeBase::techniqueSort(re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::Allocator *)::TechniqueSortKey *>(a1 + 4, &a1[2 * v18 + 2], a2 - 6, v21);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::RenderGraphMeshNodeBase::techniqueSort(re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::Allocator *)::$_0 &,re::RenderGraphMeshNodeBase::techniqueSort(re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::Allocator *)::TechniqueSortKey *>(v19 - 2, v19, &a1[2 * v18 + 2], v22);
            *(_OWORD *)&var10[16] = a1[1];
            *(_OWORD *)var10 = *a1;
            long long v23 = *(long long *)((char *)v19 + 15);
            *a1 = *v19;
            *(long long *)((char *)a1 + 15) = v23;
            long long v24 = *(_OWORD *)var10;
            *(long long *)((char *)v19 + 15) = *(_OWORD *)&var10[15];
            *unint64_t v19 = v24;
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::RenderGraphMeshNodeBase::techniqueSort(re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::Allocator *)::$_0 &,re::RenderGraphMeshNodeBase::techniqueSort(re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::Allocator *)::TechniqueSortKey *>(&a1[2 * (v17 >> 1)], a1, v182, a6.n128_f64[0]);
          }
          --v11;
          if (v10) {
            break;
          }
          uint64_t v29 = 0;
          while (1)
          {
            unint64_t v30 = *(void *)((char *)a1 + v29 - 16);
            unint64_t v31 = *(void *)((char *)a1 + v29 + 16);
            if (v30 != v31) {
              break;
            }
            v29 -= 8;
            if (v29 == -24) {
              goto LABEL_14;
            }
          }
          if (v30 < v31) {
            break;
          }
LABEL_14:
          uint64_t v32 = 0;
          *(_OWORD *)&v183[16] = a1[1];
          *(_OWORD *)unint64_t v183 = *a1;
          while (1)
          {
            unint64_t v33 = *(void *)&v183[v32 + 16];
            unint64_t v34 = *(void *)((char *)a2 + v32 - 16);
            BOOL v35 = v33 >= v34;
            if (v33 != v34) {
              break;
            }
            v32 -= 8;
            if (v32 == -24)
            {
              long long v36 = a1;
              while (1)
              {
LABEL_76:
                long long v15 = v36 + 2;
                if (v36 + 2 >= a2) {
                  goto LABEL_84;
                }
                uint64_t v71 = 0;
                while (1)
                {
                  unint64_t v72 = *(void *)(v14 + v71);
                  unint64_t v73 = *(void *)((char *)v36 + v71 + 48);
                  if (v72 != v73) {
                    break;
                  }
                  v71 -= 8;
                  if (v71 == -24) {
                    goto LABEL_82;
                  }
                }
                BOOL v25 = v72 < v73;
LABEL_82:
                v36 += 2;
                if (v72 != v73)
                {
                  long long v36 = v15;
                  if (v25) {
                    goto LABEL_84;
                  }
                }
              }
            }
          }
          long long v67 = a1;
          long long v36 = a1;
          if (v35) {
            goto LABEL_76;
          }
          while (1)
          {
            uint64_t v68 = 0;
            long long v15 = v67 + 2;
            while (1)
            {
              unint64_t v69 = *(void *)(v14 + v68);
              unint64_t v70 = *(void *)((char *)v67 + v68 + 48);
              if (v69 != v70) {
                break;
              }
              v68 -= 8;
              if (v68 == -24) {
                goto LABEL_73;
              }
            }
            BOOL v25 = v69 < v70;
LABEL_73:
            v67 += 2;
            if (v69 != v70)
            {
              long long v67 = v15;
              if (v25) {
                break;
              }
            }
          }
LABEL_84:
          long long v74 = a2;
          if (v15 < a2)
          {
            long long v75 = a2;
            do
            {
              uint64_t v76 = 0;
              long long v74 = v75 - 2;
              while (1)
              {
                unint64_t v77 = *(void *)(v14 + v76);
                unint64_t v78 = *(void *)((char *)v75 + v76 - 16);
                if (v77 != v78) {
                  break;
                }
                v76 -= 8;
                if (v76 == -24) {
                  goto LABEL_106;
                }
              }
              v75 -= 2;
            }
            while (v77 < v78);
          }
LABEL_106:
          while (v15 < v74)
          {
            long long v79 = v15[1];
            *(_OWORD *)var10 = *v15;
            *(_OWORD *)&var10[16] = v79;
            long long v80 = *v74;
            *(long long *)((char *)v15 + 15) = *(long long *)((char *)v74 + 15);
            *long long v15 = v80;
            long long v81 = *(_OWORD *)var10;
            *(long long *)((char *)v74 + 15) = *(_OWORD *)&var10[15];
            *long long v74 = v81;
            unint64_t v82 = v15;
            while (1)
            {
              uint64_t v83 = 0;
              long long v15 = v82 + 2;
              while (1)
              {
                unint64_t v84 = *(void *)(v14 + v83);
                unint64_t v85 = *(void *)((char *)v82 + v83 + 48);
                if (v84 != v85) {
                  break;
                }
                v83 -= 8;
                if (v83 == -24) {
                  goto LABEL_98;
                }
              }
              BOOL v26 = v84 < v85;
LABEL_98:
              v82 += 2;
              if (v84 != v85)
              {
                unint64_t v82 = v15;
                if (v26) {
                  break;
                }
              }
            }
            unint64_t v86 = v74;
            do
            {
              uint64_t v87 = 0;
              long long v74 = v86 - 2;
              while (1)
              {
                unint64_t v88 = *(void *)(v14 + v87);
                unint64_t v89 = *(void *)((char *)v86 + v87 - 16);
                if (v88 != v89) {
                  break;
                }
                v87 -= 8;
                if (v87 == -24) {
                  goto LABEL_106;
                }
              }
              v86 -= 2;
            }
            while (v88 < v89);
          }
          long long v90 = (__n128 *)(v15 - 2);
          BOOL v8 = v15 - 2 >= a1;
          BOOL v9 = v15 - 2 == a1;
          if (v15 - 2 != a1)
          {
            __n128 v91 = *v90;
            *(long long *)((char *)a1 + 15) = *(long long *)((char *)v15 - 17);
            *a1 = (__int128)v91;
          }
          char v10 = 0;
          a6 = *(__n128 *)v183;
          *(long long *)((char *)v15 - 17) = *(_OWORD *)&v183[15];
          *long long v90 = a6;
        }
        *(_OWORD *)&v183[16] = a1[1];
        *(_OWORD *)unint64_t v183 = *a1;
        long long v37 = a1;
        do
        {
          uint64_t v38 = 0;
          long long v39 = v37;
          v37 += 2;
          while (1)
          {
            unint64_t v40 = *(void *)((char *)v39 + v38 + 48);
            unint64_t v41 = *(void *)&v183[v38 + 16];
            if (v40 != v41) {
              break;
            }
            v38 -= 8;
            if (v38 == -24) {
              goto LABEL_25;
            }
          }
        }
        while (v40 < v41);
LABEL_25:
        uint64_t v42 = a2;
        if (v39 == a1)
        {
          long long v47 = a2;
          while (v37 < v47)
          {
            uint64_t v48 = 0;
            long long v44 = v47 - 2;
            while (1)
            {
              unint64_t v49 = *(void *)((char *)v47 + v48 - 16);
              unint64_t v50 = *(void *)(v14 + v48);
              if (v49 != v50) {
                break;
              }
              v48 -= 8;
              if (v48 == -24) {
                goto LABEL_41;
              }
            }
            BOOL v27 = v49 < v50;
LABEL_41:
            v47 -= 2;
            if (v49 != v50)
            {
              long long v47 = v44;
              if (v27) {
                goto LABEL_45;
              }
            }
          }
          long long v44 = v47;
        }
        else
        {
          while (1)
          {
            uint64_t v43 = 0;
            long long v44 = v42 - 2;
            while (1)
            {
              unint64_t v45 = *(void *)((char *)v42 + v43 - 16);
              unint64_t v46 = *(void *)(v14 + v43);
              if (v45 != v46) {
                break;
              }
              v43 -= 8;
              if (v43 == -24) {
                goto LABEL_31;
              }
            }
            BOOL v27 = v45 < v46;
LABEL_31:
            v42 -= 2;
            if (v45 != v46)
            {
              uint64_t v42 = v44;
              if (v27) {
                break;
              }
            }
          }
        }
LABEL_45:
        if (v37 < v44)
        {
          uint64_t v51 = v37;
          long long v52 = v44;
          do
          {
            long long v53 = v51[1];
            *(_OWORD *)var10 = *v51;
            long long v54 = *(_OWORD *)var10;
            *(_OWORD *)&var10[16] = v53;
            long long v55 = *(long long *)((char *)v52 + 15);
            *uint64_t v51 = *v52;
            *(long long *)((char *)v51 + 15) = v55;
            *(long long *)((char *)v52 + 15) = *(_OWORD *)&var10[15];
            *long long v52 = v54;
            do
            {
              uint64_t v56 = 0;
              long long v39 = v51;
              v51 += 2;
              while (1)
              {
                unint64_t v57 = *(void *)((char *)v39 + v56 + 48);
                unint64_t v58 = *(void *)(v14 + v56);
                if (v57 != v58) {
                  break;
                }
                v56 -= 8;
                if (v56 == -24) {
                  goto LABEL_53;
                }
              }
            }
            while (v57 < v58);
            while (1)
            {
LABEL_53:
              uint64_t v59 = 0;
              long long v60 = v52 - 2;
              while (1)
              {
                unint64_t v61 = *(void *)((char *)v52 + v59 - 16);
                unint64_t v62 = *(void *)(v14 + v59);
                if (v61 != v62) {
                  break;
                }
                v59 -= 8;
                if (v59 == -24) {
                  goto LABEL_58;
                }
              }
              BOOL v28 = v61 < v62;
LABEL_58:
              v52 -= 2;
              if (v61 != v62)
              {
                long long v52 = v60;
                if (v28) {
                  break;
                }
              }
            }
            long long v52 = v60;
          }
          while (v51 < v60);
        }
        if (v39 != a1)
        {
          long long v63 = *v39;
          *(long long *)((char *)a1 + 15) = *(long long *)((char *)v39 + 15);
          *a1 = v63;
        }
        long long v64 = *(_OWORD *)v183;
        *(long long *)((char *)v39 + 15) = *(_OWORD *)&v183[15];
        *long long v39 = v64;
        if (v37 >= v44) {
          break;
        }
LABEL_66:
        std::__introsort<std::_ClassicAlgPolicy,re::RenderGraphMeshNodeBase::techniqueSort(re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::Allocator *)::$_0 &,re::RenderGraphMeshNodeBase::techniqueSort(re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::Allocator *)::TechniqueSortKey *,false>(a1, v39, v11, v10 & 1);
        char v10 = 0;
        long long v15 = v39 + 2;
      }
      BOOL v65 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::RenderGraphMeshNodeBase::techniqueSort(re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::Allocator *)::$_0 &,re::RenderGraphMeshNodeBase::techniqueSort(re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::Allocator *)::TechniqueSortKey *>(a1, v39, *(double *)&v64);
      long long v15 = v39 + 2;
      if (std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::RenderGraphMeshNodeBase::techniqueSort(re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::Allocator *)::$_0 &,re::RenderGraphMeshNodeBase::techniqueSort(re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::Allocator *)::TechniqueSortKey *>(v39 + 2, a2, v66))
      {
        break;
      }
      if (!v65) {
        goto LABEL_66;
      }
    }
    a2 = v39;
    if (!v65) {
      continue;
    }
    return a6.n128_f64[0];
  }
}

double std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::RenderGraphMeshNodeBase::techniqueSort(re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::Allocator *)::$_0 &,re::RenderGraphMeshNodeBase::techniqueSort(re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::Allocator *)::TechniqueSortKey *>(long long *a1, long long *a2, long long *a3, double result)
{
  uint64_t v6 = 16;
  while (1)
  {
    unint64_t v7 = *(void *)((char *)a2 + v6);
    unint64_t v8 = *(void *)((char *)a1 + v6);
    if (v7 != v8) {
      break;
    }
    v6 -= 8;
    if (v6 == -8) {
      goto LABEL_6;
    }
  }
  BOOL v4 = v7 < v8;
LABEL_6:
  BOOL v9 = v7 != v8 && v4;
  uint64_t v10 = 16;
  while (1)
  {
    unint64_t v11 = *(void *)((char *)a3 + v10);
    unint64_t v12 = *(void *)((char *)a2 + v10);
    if (v11 != v12) {
      break;
    }
    v10 -= 8;
    if (v10 == -8) {
      goto LABEL_11;
    }
  }
  BOOL v5 = v11 < v12;
LABEL_11:
  if (v9)
  {
    if (v11 != v12 && v5)
    {
      long long v13 = *a1;
      long long vars0 = *a1;
      long long v14 = *(long long *)((char *)a3 + 15);
      *a1 = *a3;
      *(long long *)((char *)a1 + 15) = v14;
LABEL_27:
      *a3 = v13;
      BOOL result = *(double *)((char *)&vars0 + 15);
      *(long long *)((char *)a3 + 15) = *(long long *)((char *)&vars0 + 15);
      return result;
    }
    *(_OWORD *)vars0b = *a1;
    long long v20 = *a1;
    *(_OWORD *)&vars0b[16] = a1[1];
    long long v21 = *(long long *)((char *)a2 + 15);
    *a1 = *a2;
    *(long long *)((char *)a1 + 15) = v21;
    *a2 = v20;
    BOOL result = *(double *)&vars0b[15];
    *(long long *)((char *)a2 + 15) = *(_OWORD *)&vars0b[15];
    uint64_t v22 = 16;
    while (1)
    {
      unint64_t v23 = *(void *)((char *)a3 + v22);
      unint64_t v24 = *(void *)((char *)a2 + v22);
      if (v23 != v24) {
        break;
      }
      v22 -= 8;
      if (v22 == -8) {
        return result;
      }
    }
    if (v23 < v24)
    {
      long long v13 = *a2;
      long long vars0 = *a2;
      long long v27 = *(long long *)((char *)a3 + 15);
      *a2 = *a3;
      *(long long *)((char *)a2 + 15) = v27;
      goto LABEL_27;
    }
  }
  else if (v11 != v12 && v5)
  {
    *(_OWORD *)vars0a = *a2;
    long long v15 = *a2;
    *(_OWORD *)&vars0a[16] = a2[1];
    long long v16 = *(long long *)((char *)a3 + 15);
    *a2 = *a3;
    *(long long *)((char *)a2 + 15) = v16;
    *a3 = v15;
    BOOL result = *(double *)&vars0a[15];
    *(long long *)((char *)a3 + 15) = *(_OWORD *)&vars0a[15];
    uint64_t v17 = 16;
    while (1)
    {
      unint64_t v18 = *(void *)((char *)a2 + v17);
      unint64_t v19 = *(void *)((char *)a1 + v17);
      if (v18 != v19) {
        break;
      }
      v17 -= 8;
      if (v17 == -8) {
        return result;
      }
    }
    if (v18 < v19)
    {
      *(_OWORD *)vars0c = *a1;
      long long v25 = *a1;
      *(_OWORD *)&vars0c[16] = a1[1];
      long long v26 = *(long long *)((char *)a2 + 15);
      *a1 = *a2;
      *(long long *)((char *)a1 + 15) = v26;
      *a2 = v25;
      BOOL result = *(double *)&vars0c[15];
      *(long long *)((char *)a2 + 15) = *(_OWORD *)&vars0c[15];
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::RenderGraphMeshNodeBase::techniqueSort(re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::Allocator *)::$_0 &,re::RenderGraphMeshNodeBase::techniqueSort(re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::Allocator *)::TechniqueSortKey *>(long long *a1, long long *a2, double a3)
{
  uint64_t v5 = ((char *)a2 - (char *)a1) >> 5;
  BOOL result = 1;
  switch(v5)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v7 = 0;
      unint64_t v8 = a2 - 2;
      while (1)
      {
        unint64_t v9 = *(void *)((char *)a2 + v7 - 16);
        unint64_t v10 = *(void *)((char *)a1 + v7 + 16);
        if (v9 != v10) {
          break;
        }
        v7 -= 8;
        if (v7 == -24) {
          return 1;
        }
      }
      if (v9 < v10)
      {
        long long v34 = a1[1];
        *(_OWORD *)long long v54 = *a1;
        long long v33 = *(_OWORD *)v54;
        *(_OWORD *)&v54[16] = v34;
        long long v35 = *(long long *)((char *)a2 - 17);
        *a1 = *v8;
        *(long long *)((char *)a1 + 15) = v35;
        *unint64_t v8 = v33;
        *(long long *)((char *)a2 - 17) = *(_OWORD *)&v54[15];
      }
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::RenderGraphMeshNodeBase::techniqueSort(re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::Allocator *)::$_0 &,re::RenderGraphMeshNodeBase::techniqueSort(re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::Allocator *)::TechniqueSortKey *>(a1, a1 + 2, a2 - 2, a3);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::RenderGraphMeshNodeBase::techniqueSort(re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::Allocator *)::$_0 &,re::RenderGraphMeshNodeBase::techniqueSort(re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::Allocator *)::TechniqueSortKey *>(a1, a1 + 2, a1 + 4, a2 - 2, a3);
      return 1;
    case 5:
      long long v26 = a1 + 2;
      long long v27 = a1 + 4;
      BOOL v28 = a1 + 6;
      uint64_t v29 = a2 - 2;
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::RenderGraphMeshNodeBase::techniqueSort(re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::Allocator *)::$_0 &,re::RenderGraphMeshNodeBase::techniqueSort(re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::Allocator *)::TechniqueSortKey *>(a1, a1 + 2, a1 + 4, a1 + 6, a3);
      uint64_t v30 = 0;
      while (1)
      {
        unint64_t v31 = *(void *)((char *)a2 + v30 - 16);
        unint64_t v32 = *(void *)((char *)a1 + v30 + 112);
        if (v31 != v32) {
          break;
        }
        v30 -= 8;
        if (v30 == -24) {
          return 1;
        }
      }
      if (v31 < v32)
      {
        uint64_t v36 = 0;
        long long v38 = a1[7];
        *(_OWORD *)long long v54 = *v28;
        long long v37 = *(_OWORD *)v54;
        *(_OWORD *)&v54[16] = v38;
        long long v39 = *(long long *)((char *)a2 - 17);
        long long *v28 = *v29;
        *(long long *)((char *)a1 + 11re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = v39;
        long long *v29 = v37;
        *(long long *)((char *)a2 - 17) = *(_OWORD *)&v54[15];
        BOOL result = 1;
        while (1)
        {
          unint64_t v40 = *(void *)((char *)a1 + v36 + 112);
          unint64_t v41 = *(void *)((char *)a1 + v36 + 80);
          if (v40 != v41) {
            break;
          }
          v36 -= 8;
          if (v36 == -24) {
            return result;
          }
        }
        if (v40 < v41)
        {
          uint64_t v42 = 0;
          long long v44 = a1[5];
          *(_OWORD *)long long v54 = *v27;
          long long v43 = *(_OWORD *)v54;
          *(_OWORD *)&v54[16] = v44;
          *long long v27 = *v28;
          *(long long *)((char *)a1 + 79) = *(long long *)((char *)a1 + 111);
          long long *v28 = v43;
          *(long long *)((char *)a1 + 11re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = *(_OWORD *)&v54[15];
          BOOL result = 1;
          while (1)
          {
            unint64_t v45 = *(void *)((char *)a1 + v42 + 80);
            unint64_t v46 = *(void *)((char *)a1 + v42 + 48);
            if (v45 != v46) {
              break;
            }
            v42 -= 8;
            if (v42 == -24) {
              return result;
            }
          }
          if (v45 < v46)
          {
            uint64_t v47 = 0;
            long long v49 = a1[3];
            *(_OWORD *)long long v54 = *v26;
            long long v48 = *(_OWORD *)v54;
            *(_OWORD *)&v54[16] = v49;
            *long long v26 = *v27;
            *(long long *)((char *)a1 + 47) = *(long long *)((char *)a1 + 79);
            *long long v27 = v48;
            *(long long *)((char *)a1 + 79) = *(_OWORD *)&v54[15];
            BOOL result = 1;
            while (1)
            {
              unint64_t v50 = *(void *)((char *)a1 + v47 + 48);
              unint64_t v51 = *(void *)((char *)a1 + v47 + 16);
              if (v50 != v51) {
                break;
              }
              v47 -= 8;
              if (v47 == -24) {
                return result;
              }
            }
            if (v50 < v51)
            {
              long long v53 = a1[1];
              *(_OWORD *)long long v54 = *a1;
              long long v52 = *(_OWORD *)v54;
              *(_OWORD *)&v54[16] = v53;
              *a1 = *v26;
              *(long long *)((char *)a1 + 15) = *(long long *)((char *)a1 + 47);
              *long long v26 = v52;
              *(long long *)((char *)a1 + 47) = *(_OWORD *)&v54[15];
            }
          }
        }
      }
      return 1;
    default:
      unint64_t v11 = a1 + 4;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::RenderGraphMeshNodeBase::techniqueSort(re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::Allocator *)::$_0 &,re::RenderGraphMeshNodeBase::techniqueSort(re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::Allocator *)::TechniqueSortKey *>(a1, a1 + 2, a1 + 4, a3);
      unint64_t v12 = a1 + 6;
      if (a1 + 6 == a2) {
        return 1;
      }
      int v13 = 0;
      long long v14 = a1 + 3;
      long long v15 = a1;
      break;
  }
  while (2)
  {
    uint64_t v16 = 0;
    while (1)
    {
      unint64_t v17 = *(void *)((char *)v15 + v16 + 112);
      unint64_t v18 = *(void *)((char *)v15 + v16 + 80);
      if (v17 != v18) {
        break;
      }
      v16 -= 8;
      if (v16 == -24) {
        goto LABEL_23;
      }
    }
    if (v17 < v18)
    {
      long long v19 = v12[1];
      *(_OWORD *)long long v54 = *v12;
      *(_OWORD *)&v54[16] = v19;
      long long v20 = v14;
      long long v21 = v12;
      while (1)
      {
        *long long v21 = *v11;
        *(long long *)((char *)v21 + 15) = *(long long *)((char *)v11 + 15);
        if (v11 == a1) {
          break;
        }
        long long v21 = v11;
        uint64_t v22 = 0;
        v11 -= 2;
        while (1)
        {
          unint64_t v23 = *(void *)(((unint64_t)v54 | 0x10) + v22);
          unint64_t v24 = *(void *)((char *)v20 + v22);
          if (v23 != v24) {
            break;
          }
          v22 -= 8;
          if (v22 == -24) {
            goto LABEL_22;
          }
        }
        v20 -= 2;
        if (v23 >= v24) {
          goto LABEL_22;
        }
      }
      long long v21 = a1;
LABEL_22:
      long long v25 = *(_OWORD *)v54;
      *(long long *)((char *)v21 + 15) = *(_OWORD *)&v54[15];
      *long long v21 = v25;
      if (++v13 == 8) {
        return v12 + 2 == a2;
      }
    }
LABEL_23:
    unint64_t v11 = v12;
    v15 += 2;
    v14 += 2;
    v12 += 2;
    if (v12 != a2) {
      continue;
    }
    return 1;
  }
}

double std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::RenderGraphMeshNodeBase::techniqueSort(re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::Allocator *)::$_0 &,re::RenderGraphMeshNodeBase::techniqueSort(re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::Allocator *)::TechniqueSortKey *>(long long *a1, long long *a2, long long *a3, long long *a4, double a5)
{
  double result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::RenderGraphMeshNodeBase::techniqueSort(re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::Allocator *)::$_0 &,re::RenderGraphMeshNodeBase::techniqueSort(re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::Allocator *)::TechniqueSortKey *>(a1, a2, a3, a5);
  uint64_t v10 = 16;
  while (1)
  {
    unint64_t v11 = *(void *)((char *)a4 + v10);
    unint64_t v12 = *(void *)((char *)a3 + v10);
    if (v11 != v12) {
      break;
    }
    v10 -= 8;
    if (v10 == -8) {
      return result;
    }
  }
  if (v11 < v12)
  {
    *(_OWORD *)long long v25 = *a3;
    long long v13 = *a3;
    *(_OWORD *)&unsigned char v25[16] = a3[1];
    long long v14 = *(long long *)((char *)a4 + 15);
    *a3 = *a4;
    *(long long *)((char *)a3 + 15) = v14;
    *a4 = v13;
    double result = *(double *)&v25[15];
    *(long long *)((char *)a4 + 15) = *(_OWORD *)&v25[15];
    uint64_t v15 = 16;
    while (1)
    {
      unint64_t v16 = *(void *)((char *)a3 + v15);
      unint64_t v17 = *(void *)((char *)a2 + v15);
      if (v16 != v17) {
        break;
      }
      v15 -= 8;
      if (v15 == -8) {
        return result;
      }
    }
    if (v16 < v17)
    {
      *(_OWORD *)long long v26 = *a2;
      long long v18 = *a2;
      *(_OWORD *)&v26[16] = a2[1];
      long long v19 = *(long long *)((char *)a3 + 15);
      *a2 = *a3;
      *(long long *)((char *)a2 + 15) = v19;
      *a3 = v18;
      double result = *(double *)&v26[15];
      *(long long *)((char *)a3 + 15) = *(_OWORD *)&v26[15];
      uint64_t v20 = 16;
      while (1)
      {
        unint64_t v21 = *(void *)((char *)a2 + v20);
        unint64_t v22 = *(void *)((char *)a1 + v20);
        if (v21 != v22) {
          break;
        }
        v20 -= 8;
        if (v20 == -8) {
          return result;
        }
      }
      if (v21 < v22)
      {
        *(_OWORD *)long long v27 = *a1;
        long long v23 = *a1;
        *(_OWORD *)&unsigned char v27[16] = a1[1];
        long long v24 = *(long long *)((char *)a2 + 15);
        *a1 = *a2;
        *(long long *)((char *)a1 + 15) = v24;
        *a2 = v23;
        double result = *(double *)&v27[15];
        *(long long *)((char *)a2 + 15) = *(_OWORD *)&v27[15];
      }
    }
  }
  return result;
}

uint64_t re::RenderGraphDataStore::tryGet<re::DepthPatchData>(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = (unint64_t)"N2re14DepthPatchDataE";
  if (((unint64_t)"N2re14DepthPatchDataE" & 0x8000000000000000) != 0)
  {
    uint64_t v3 = (unsigned __int8 *)((unint64_t)"N2re14DepthPatchDataE" & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v4 = 5381;
    do
    {
      unint64_t v2 = v4;
      unsigned int v5 = *v3++;
      uint64_t v4 = (33 * v4) ^ v5;
    }
    while (v5);
  }
  unint64_t v7 = (a2 + (v2 << 6) + (v2 >> 2) - 0x61C8864680B583E9) ^ v2;
  uint64_t result = re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(a1 + 64, (uint64_t *)&v7);
  if (result) {
    return *(void *)result;
  }
  return result;
}

void re::DepthPatchData::~DepthPatchData(re::DepthPatchData *this)
{
}

{
  uint64_t vars8;

  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8);
  JUMPOUT(0x237DBCBD0);
}

void re::RenderGraphMipmapGenerationNode::setup(re::RenderGraphNode *this, re::RenderGraphBuilder *a2, re::RenderGraphDataStore *a3)
{
  *((_WORD *)a2 + 296) = 257;
  re::RenderGraphNode::setup(this, a2, a3);
}

void re::RenderGraphMipmapGenerationNode::execute(char **this, re::RenderGraphContext *a2)
{
  uint64_t v3 = re::RenderGraphDataStore::tryGet<re::MipmapGenerationContext>(*((void *)a2 + 146), (int)"MipmapGenerationContext", this[4]);
  if (v3)
  {
    uint64_t v4 = v3;
    re::RenderGraphContext::makeBlitCommandEncoder(a2, 0, &v9);
    uint64_t v5 = *(void *)(v4 + 16);
    if (v5)
    {
      uint64_t v6 = *(uint64_t **)(v4 + 32);
      uint64_t v7 = 8 * v5;
      do
      {
        uint64_t v8 = *v6++;
        [v9 generateMipmapsForTexture:v8];
        v7 -= 8;
      }
      while (v7);
    }
    re::RenderGraphContext::finishEncoding<re::mtl::BlitCommandEncoder &>((uint64_t)a2, &v9);
  }
}

void re::RenderGraphMipmapGenerationNode::~RenderGraphMipmapGenerationNode(id *this)
{
  re::RenderGraphNode::~RenderGraphNode(this);
  JUMPOUT(0x237DBCBD0);
}

re::RenderGraphMRCNode *re::RenderGraphMRCNode::RenderGraphMRCNode(re::RenderGraphMRCNode *this, const char *a2)
{
  uint64_t v3 = re::RenderGraphNode::RenderGraphNode(this, a2);
  *(void *)uint64_t v3 = &unk_26E71DED0;
  uint64_t v4 = (void *)((char *)v3 + 280);
  *((_OWORD *)v3 + 16) = 0u;
  *((_OWORD *)v3 + 17) = 0u;
  *((_OWORD *)v3 + 1re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
  *((void *)v3 + 3re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  re::DynamicString::setCapacity(v4, 0);
  *((void *)this + 40) = 0;
  *((void *)this + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
  *((void *)this + 42) = 0;
  *((unsigned char *)this + 344) = 1;
  *((void *)this + 45) = 0;
  *((void *)this + 46) = 0;
  *((void *)this + 44) = 0;
  *((_DWORD *)this + 94) = 0;
  *((void *)this + 54) = 0;
  *((_OWORD *)this + 24) = 0u;
  *((_OWORD *)this + 25) = 0u;
  *(_OWORD *)((char *)this + 412) = 0u;
  return this;
}

void re::RenderGraphMRCNode::configure(re::RenderGraphMRCNode *this, const char *a2, const char *a3, re::RenderFrame *a4)
{
  re::AssetHandle::loadNow(*((void *)this + 33), 0);
  re::RenderGraphNode::configure(this, a2, a3, a4);
}

void re::RenderGraphMRCNode::setup(re::RenderGraphMRCNode *this, re::RenderGraphBuilder *a2, re::RenderGraphDataStore *a3)
{
  void v11[2] = *MEMORY[0x263EF8340];
  if (*((unsigned char *)this + 344))
  {
    uint64_t v6 = *((void *)this + 6);
    {
      re::introspect<re::ThreadGroupMemoryData>(void)::info = (_UNKNOWN *)re::introspect_ThreadGroupMemoryData(0);
    }
    size_t v7 = strlen(*((const char **)re::introspect<re::ThreadGroupMemoryData>(void)::info + 6));
    if (v7)
    {
      MurmurHash3_x64_128(*((void *)re::introspect<re::ThreadGroupMemoryData>(void)::info + 6), v7, 0, v11);
      unint64_t v8 = (v11[1] - 0x61C8864680B583E9 + (v11[0] << 6) + (v11[0] >> 2)) ^ v11[0];
    }
    else
    {
      unint64_t v8 = 0;
    }
    v11[0] = (v6 - 0x61C8864680B583E9 + (v8 << 6) + (v8 >> 2)) ^ v8;
    uint64_t v9 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)a3 + 14, v11);
    if (v9 != -1)
    {
      uint64_t v10 = *(void *)(*((void *)a3 + 15) + 16 * v9 + 8);
      if (v10)
      {
        if (*(unsigned char *)(v10 + 8)) {
          *((void *)this + 9) = *(void *)(v10 + 16);
        }
      }
    }
  }
  re::RenderGraphNode::setup(this, a2, a3);
}

void re::RenderGraphMRCNode::execute(re::RenderGraphMRCNode *this, re::RenderGraphContext *a2)
{
  uint64_t v75 = *MEMORY[0x263EF8340];
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v62, 5036, 0);
  uint64_t v4 = (_anonymous_namespace_ *)(*(uint64_t (**)(re::RenderGraphMRCNode *, re::RenderGraphContext *))(*(void *)this + 136))(this, a2);
  if (v4)
  {
    LOBYTE(v66[0]) = 0;
    memset((char *)&v67[1] + 8, 0, 32);
    re::DynamicString::setCapacity((void *)&v67[1] + 1, 0);
    *((void *)&v67[3] + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
    uint64_t v68 = 0;
    uint64_t v69 = 0;
    int v70 = 0;
    int v72 = 0;
    memset(v71, 0, 53);
    id v73 = objc_msgSend(objc_msgSend(MEMORY[0x263F12940], sel_alloc), sel_init);
    __int16 v74 = 1;
    re::DynamicString::operator=((re::DynamicString *)((char *)&v67[1] + 8), (re::RenderGraphMRCNode *)((char *)this + 280));
    re::DynamicArray<re::TechniqueFunctionConstant>::operator=((uint64_t)&v67[3] + 8, (uint64_t *)this + 50);
    re::RenderGraphContext::rtInfo(a2, this, (uint64_t)v64);
    *(_OWORD *)&v71[8] = *(_OWORD *)v64;
    *(_OWORD *)&v71[24] = *(_OWORD *)&v64[16];
    *(_OWORD *)&v71[40] = *(_OWORD *)&v64[32];
    int v72 = v65;
    if (*((void *)this + 33))
    {
      uint64_t v5 = re::AssetHandle::loadedAsset<re::ShaderLibraryAsset>((re::RenderGraphMRCNode *)((char *)this + 256));
      re::DynamicString::DynamicString((re::DynamicString *)&v59, (const re::DynamicString *)(v5 + 40));
      v64[0] = 1;
      *(void *)&v64[8] = v59;
      *(void *)&v64[32] = v61;
      *(_OWORD *)&v64[16] = v60;
      uint64_t v61 = 0;
      uint64_t v59 = 0;
      long long v60 = 0uLL;
      re::Optional<re::DynamicString>::operator=((unsigned __int8 *)v66, v64);
      if (v64[0] && *(void *)&v64[8])
      {
        if (v64[16]) {
          (*(void (**)(void))(**(void **)&v64[8] + 40))();
        }
        memset(&v64[8], 0, 32);
      }
      if (v59 && (v60 & 1) != 0) {
        (*(void (**)(void))(*(void *)v59 + 40))();
      }
    }
    if (*((_DWORD *)this + 84)) {
      BOOL v6 = *((_DWORD *)this + 85) == 0;
    }
    else {
      BOOL v6 = 1;
    }
    LOBYTE(v74) = v6;
    TileRenderPipelineState = (void **)re::getOrCreateTileRenderPipelineState(*((void *)a2 + 1), (uint64_t)v66);
    NS::SharedPtr<MTL::Texture>::operator=((void **)this + 49, TileRenderPipelineState);
    if (v73)
    {

      id v73 = 0;
    }
    re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)&v67[3] + 8);
    if (*((void *)&v67[1] + 1))
    {
      if (v67[2]) {
        (*(void (**)(void))(**((void **)&v67[1] + 1) + 40))();
      }
      memset((char *)&v67[1] + 8, 0, 32);
    }
    if (LOBYTE(v66[0]) && v66[1] && (v67[0] & 1) != 0) {
      (*(void (**)(void))(*(void *)v66[1] + 40))();
    }
  }
  uint64_t v8 = re::DrawingManager::currentCommandBuffer(*(re::DrawingManager **)(*((void *)a2 + 1) + 104));
  re::RenderGraphContext::acquireManagedRenderEncoder(&v57, a2, v8, 0);
  (*(void (**)(void, char *, void))(v58 + 56))(*(void *)v58, sel_setRenderPipelineState_, *((void *)this + 49));
  uint64_t v9 = *((void *)this + 46);
  if (v9)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 8 * v9;
    unint64_t v12 = (unsigned int *)(*((void *)this + 48) + 4);
    do
    {
      objc_msgSend(v57, sel_setThreadgroupMemoryLength_offset_atIndex_, *v12, v10, *(v12 - 1));
      unsigned int v13 = *v12;
      v12 += 2;
      v10 += v13;
      v11 -= 8;
    }
    while (v11);
  }
  uint64_t v14 = *((void *)this + 14);
  if (v14)
  {
    uint64_t v15 = *((void *)this + 16);
    uint64_t v16 = 32 * v14;
    do
    {
      if (!*(unsigned char *)(v15 + 20) || *(_DWORD *)(v15 + 8) != -1 && *(_DWORD *)(v15 + 12) != -1)
      {
        uint64_t v17 = re::RenderGraphContext::metalBuffer((uint64_t)a2, v15);
        objc_msgSend(v57, sel_setTileBuffer_offset_atIndex_, *(void *)v17, *(unsigned int *)(v17 + 8), *(unsigned int *)(v15 + 16));
      }
      v15 += 32;
      v16 -= 32;
    }
    while (v16);
  }
  uint64_t v18 = *((void *)this + 19);
  if (v18)
  {
    uint64_t v19 = *((void *)this + 21);
    uint64_t v20 = v18 << 6;
    do
    {
      if (!*(unsigned char *)(v19 + 49) || *(_DWORD *)(v19 + 8) != -1 && *(_DWORD *)(v19 + 12) != -1)
      {
        uint64_t v21 = re::RenderGraphContext::metalBuffer((uint64_t)a2, v19);
        objc_msgSend(v57, sel_setTileBuffer_offset_atIndex_, *(void *)v21, *(unsigned int *)(v21 + 8), *(unsigned int *)(v19 + 16));
      }
      v19 += 64;
      v20 -= 64;
    }
    while (v20);
  }
  uint64_t v22 = *((void *)this + 24);
  if (v22)
  {
    uint64_t v23 = *((void *)this + 26);
    uint64_t v24 = 32 * v22;
    do
    {
      if (!*(unsigned char *)(v23 + 20) || *(_DWORD *)(v23 + 8) != -1 && *(_DWORD *)(v23 + 12) != -1)
      {
        re::RenderGraphContext::metalTexture((uint64_t)a2, v23, *(unsigned __int8 *)(v23 + 21), *(unsigned __int8 *)(v23 + 22), v66);
        objc_msgSend(v57, sel_setTileTexture_atIndex_, v66[0], *(unsigned int *)(v23 + 16));
        if (v66[0]) {
      }
        }
      v23 += 32;
      v24 -= 32;
    }
    while (v24);
  }
  uint64_t v25 = *((void *)this + 29);
  if (v25)
  {
    uint64_t v26 = *((void *)this + 31);
    uint64_t v27 = v25 << 6;
    do
    {
      if (!*(unsigned char *)(v26 + 49) || *(_DWORD *)(v26 + 8) != -1 && *(_DWORD *)(v26 + 12) != -1)
      {
        re::RenderGraphContext::metalTexture((uint64_t)a2, v26, 0, 0, v66);
        objc_msgSend(v57, sel_setTileTexture_atIndex_, v66[0], *(unsigned int *)(v26 + 16));
        if (v66[0]) {
      }
        }
      v26 += 64;
      v27 -= 64;
    }
    while (v27);
  }
  (*(void (**)(re::RenderGraphMRCNode *, re::RenderGraphContext *, id *))(*(void *)this + 128))(this, a2, &v57);
  unsigned int v28 = *((_DWORD *)this + 84);
  if (!v28 || (unsigned int v29 = *((_DWORD *)this + 85)) == 0)
  {
    unsigned int v28 = objc_msgSend(v57, sel_tileWidth);
    unsigned int v29 = objc_msgSend(v57, sel_tileHeight);
  }
  uint64_t v30 = re::RenderGraphDataStore::tryGet<re::CameraData>(*((void *)a2 + 146), *(void *)(*((void *)a2 + 5) + 48));
  if (v30)
  {
    uint64_t v32 = v30;
    uint64_t v33 = v29;
    uint64_t v34 = v28;
    uint32x4_t v35 = (uint32x4_t)vceqzq_f32(*((float32x4_t *)this + 20));
    v35.i32[3] = v35.i32[2];
    if ((vminvq_u32(v35) & 0x80000000) != 0)
    {
      uint64_t v59 = 0;
      long long v60 = 0uLL;
      uint64_t v49 = *(void *)(*(void *)a2 + 24);
      v66[0] = 0;
      v66[1] = 0;
      *(void *)&v67[0] = 0;
      uint64_t v50 = re::RenderGraphDataStore::tryGet<re::ViewportPercentData>(*((void *)a2 + 146), *(void *)(*((void *)a2 + 5) + 48));
      if (v50) {
        unint64_t v51 = *(unsigned __int8 *)(v50 + 64);
      }
      else {
        unint64_t v51 = 1;
      }
      re::FixedArray<re::mtl::Viewport>::init<>(&v59, v49, v51);
      re::FixedArray<re::Vector4<float>>::init<>((uint64_t *)v66, v49, v51);
      uint64_t v52 = re::RenderGraphDataStore::tryGet<re::ViewportData>(*((void *)a2 + 146), *(void *)(*((void *)a2 + 5) + 48));
      re::RenderGraphContext::selectViewport((unint64_t)a2, v52, (uint64_t)&v59, (_anonymous_namespace_ *)v66, 0);
      if (v66[0] && v66[1]) {
        (*(void (**)(void))(*(void *)v66[0] + 40))();
      }
      if (*(unsigned char *)(v32 + 490))
      {
        uint64_t v53 = 0;
        this = 0;
        while (1)
        {
          long long v38 = (float32x4_t *)v60;
          if ((unint64_t)v60 <= (unint64_t)this) {
            break;
          }
          uint64x2_t v54 = vcvtq_u64_f64(vcvtq_f64_f32(*(float32x2_t *)(*((void *)&v60 + 1) + v53)));
          uint64x2_t v55 = vcvtq_u64_f64(vcvtq_f64_f32(*(float32x2_t *)(*((void *)&v60 + 1) + v53 + 8)));
          *(void *)long long v64 = v34;
          *(void *)&v64[8] = v29;
          *(void *)&v64[16] = 1;
          *(uint64x2_t *)double v66 = v54;
          *(uint64x2_t *)((char *)v67 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v55;
          *(void *)&v67[0] = 0;
          *((void *)&v67[1] + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 1;
          objc_msgSend(v57, sel_dispatchThreadsPerTile_inRegion_withRenderTargetArrayIndex_, v64, v66, this);
          this = (re::RenderGraphMRCNode *)((char *)this + 1);
          v53 += 24;
          if ((unint64_t)this >= *(unsigned __int8 *)(v32 + 490)) {
            goto LABEL_83;
          }
        }
LABEL_89:
        uint64_t v63 = 0;
        memset(v67, 0, sizeof(v67));
        *(_OWORD *)double v66 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)long long v64 = 136315906;
        *(void *)&v64[4] = "operator[]";
        *(_WORD *)&v64[12] = 1024;
        *(_DWORD *)&v64[14] = 468;
        *(_WORD *)&v64[18] = 2048;
        *(void *)&v64[20] = this;
        *(_WORD *)&v64[28] = 2048;
        *(void *)&v64[30] = v38;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
LABEL_83:
      if (v59 && (void)v60) {
        (*(void (**)(void))(*(void *)v59 + 40))();
      }
    }
    else if (*(unsigned char *)(v30 + 490))
    {
      unint64_t v36 = 0;
      long long v37 = (const re::Projection *)(v30 + 144);
      long long v38 = (float32x4_t *)(v30 + 64);
      long long v39 = (float32x4_t *)((char *)a2 + 64);
      while (1)
      {
        unint64_t v40 = *(void *)(v32 + 128);
        if (v40 <= v36) {
          break;
        }
        unint64_t v41 = *(void *)(v32 + 48);
        if (v41 <= v36) {
          goto LABEL_88;
        }
        float32x4_t v42 = v39[1];
        v56[0] = *v39;
        v56[1] = v42;
        re::RenderCamera::transformWorldBoundsToScreen(v38, v56, v37, (uint64_t)v64);
        float32x4_t v43 = *((float32x4_t *)this + 20);
        float32x4_t v44 = vmulq_f32(*(float32x4_t *)v64, v43);
        *(float32x4_t *)long long v64 = v44;
        *(float32x4_t *)&v64[16] = vmulq_f32(v43, *(float32x4_t *)&v64[16]);
        float32x4_t v45 = vsubq_f32(*(float32x4_t *)&v64[16], v44);
        float32x4_t v46 = v45;
        v46.i32[3] = 0;
        unint64_t v47 = vmaxnmq_f32(v46, (float32x4_t)0).u64[0];
        if (*(float *)&v47 >= 1.0 && *((float *)&v47 + 1) >= 1.0)
        {
          uint64_t v59 = v34;
          *(void *)&long long v60 = v33;
          *((void *)&v60 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 1;
          *(uint64x2_t *)double v66 = vcvtq_u64_f64(vcvtq_f64_f32(*(float32x2_t *)v44.f32));
          *(uint64x2_t *)((char *)v67 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = vcvtq_u64_f64(vcvtq_f64_f32(vrndp_f32(*(float32x2_t *)v45.f32)));
          *(void *)&v67[0] = 0;
          *((void *)&v67[1] + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 1;
          objc_msgSend(v57, sel_dispatchThreadsPerTile_inRegion_withRenderTargetArrayIndex_, &v59, v66, v36);
        }
        ++v36;
        long long v37 = (const re::Projection *)((char *)v37 + 64);
        v38 += 2;
        if (v36 >= *(unsigned __int8 *)(v32 + 490)) {
          goto LABEL_86;
        }
      }
      re::internal::assertLog((re::internal *)6, v31, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, v36, v40);
      _os_crash();
      __break(1u);
LABEL_88:
      re::internal::assertLog((re::internal *)6, v31, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, v36, v41);
      _os_crash();
      __break(1u);
      goto LABEL_89;
    }
  }
LABEL_86:
  re::mtl::RenderCommandEncoder::~RenderCommandEncoder((re::mtl::RenderCommandEncoder *)&v57);
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v62);
}

void *re::allocInfo_RenderGraphMRCNode(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_461, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_461))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF9C2B8, "RenderGraphMRCNode");
    __cxa_guard_release(&_MergedGlobals_461);
  }
  return &unk_26AF9C2B8;
}

void re::initInfo_RenderGraphMRCNode(re *this, re::IntrospectionBase *a2)
{
  v20[0] = 0xA5BAE2AB5AB1D450;
  v20[1] = "RenderGraphMRCNode";
  re::StringID::destroyString((re::StringID *)v20);
  *((_OWORD *)this + 2) = v21;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9C290, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF9C290);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::introspect_RenderGraphNode((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "RenderGraphNode";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF9C298 = v7;
      uint64_t v8 = re::introspectionAllocator((re *)v7);
      uint64_t v10 = re::introspect_AssetHandle((re *)1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "library";
      *(void *)(v11 + 16) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x10000000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF9C2A0 = v11;
      unint64_t v12 = re::introspectionAllocator((re *)v11);
      unsigned int v13 = re::IntrospectionInfo<re::DynamicArray<re::ThreadGroupMemorySetting>>::get((re *)1);
      uint64_t v14 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 72, 8);
      *(_DWORD *)uint64_t v14 = 1;
      *(void *)(v14 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "threadGroupMemorySettings";
      *(void *)(v14 + 16) = v13;
      *(void *)(v14 + 24) = 0;
      *(void *)(v14 + 32) = 0x16000000003;
      *(_DWORD *)(v14 + 40) = 0;
      *(void *)(v14 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v14 + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_26AF9C2A8 = v14;
      uint64_t v15 = re::introspectionAllocator((re *)v14);
      uint64_t v17 = re::IntrospectionInfo<re::DynamicString>::get(1, v16);
      uint64_t v18 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v15 + 32))(v15, 72, 8);
      *(_DWORD *)uint64_t v18 = 1;
      *(void *)(v18 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "tileFunction";
      *(void *)(v18 + 16) = v17;
      *(void *)(v18 + 24) = 0;
      *(void *)(v18 + 32) = 0x11800000004;
      *(_DWORD *)(v18 + 40) = 0;
      *(void *)(v18 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v18 + 56) = 0;
      *(_DWORD *)(v18 + 64) = 0;
      qword_26AF9C2B0 = v18;
      __cxa_guard_release(&qword_26AF9C290);
    }
  }
  *((void *)this + 2) = 0x1C000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 4;
  *((void *)this + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = &qword_26AF9C298;
  *((void *)this + 9) = re::internal::defaultConstruct<re::RenderGraphMRCNode>;
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::RenderGraphMRCNode>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::RenderGraphMRCNode>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::RenderGraphMRCNode>;
  re::IntrospectionRegistry::add(this, v3);
  long long v19 = v21;
}

re::RenderGraphMRCNode *re::internal::defaultConstruct<re::RenderGraphMRCNode>(int a1, int a2, re::RenderGraphMRCNode *this)
{
  return re::RenderGraphMRCNode::RenderGraphMRCNode(this);
}

uint64_t re::internal::defaultDestruct<re::RenderGraphMRCNode>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

uint64_t re::internal::defaultDestructV2<re::RenderGraphMRCNode>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::introspect_RenderGraphMRCNode(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RenderGraphMRCNode", (uint64_t (*)(re::internal *))re::allocInfo_RenderGraphMRCNode, (re::IntrospectionBase *(*)(void))re::initInfo_RenderGraphMRCNode, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::RenderGraphMRCNode>, this);
}

re::RenderGraphMRCNode *re::RenderGraphMRCNode::RenderGraphMRCNode(re::RenderGraphMRCNode *this)
{
  unint64_t v2 = re::RenderGraphNode::RenderGraphNode(this);
  *(void *)unint64_t v2 = &unk_26E71DED0;
  uint64_t v3 = (void *)((char *)v2 + 280);
  *((_OWORD *)v2 + 16) = 0u;
  *((_OWORD *)v2 + 17) = 0u;
  *((_OWORD *)v2 + 1re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
  *((void *)v2 + 3re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  re::DynamicString::setCapacity(v3, 0);
  *((void *)this + 40) = 0;
  *((void *)this + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
  *((void *)this + 42) = 0;
  *((unsigned char *)this + 344) = 1;
  *((void *)this + 45) = 0;
  *((void *)this + 46) = 0;
  *((void *)this + 44) = 0;
  *((_DWORD *)this + 94) = 0;
  *((void *)this + 54) = 0;
  *((_OWORD *)this + 24) = 0u;
  *((_OWORD *)this + 25) = 0u;
  *(_OWORD *)((char *)this + 412) = 0u;
  return this;
}

void re::RenderGraphCommitCommandBufferNode::setup(re::RenderGraphNode *this, re::RenderGraphBuilder *a2, re::RenderGraphDataStore *a3)
{
  *((_WORD *)a2 + 296) = 257;
  re::RenderGraphNode::setup(this, a2, a3);
}

void re::RenderGraphCommitCommandBufferNode::execute(re::RenderGraphCommitCommandBufferNode *this, re::RenderGraphContext *a2)
{
  unint64_t v2 = *(re::DrawingManager **)(*((void *)a2 + 1) + 104);
  if (v2) {
    re::DrawingManager::commitQueuedCommandBuffers(v2);
  }
}

void *re::allocInfo_RenderGraphCommitCommandBufferNode(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_462, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_462))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF9C348, "RenderGraphCommitCommandBufferNode");
    __cxa_guard_release(&_MergedGlobals_462);
  }
  return &unk_26AF9C348;
}

void re::initInfo_RenderGraphCommitCommandBufferNode(re *this, re::IntrospectionBase *a2)
{
  v9[0] = 0x292463081C40DE7CLL;
  v9[1] = "RenderGraphCommitCommandBufferNode";
  re::StringID::destroyString((re::StringID *)v9);
  *((_OWORD *)this + 2) = v10;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9C340, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF9C340);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::introspect_RenderGraphNode((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "RenderGraphNode";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF9C338 = v7;
      __cxa_guard_release(&qword_26AF9C340);
    }
  }
  *((void *)this + 2) = 0x10000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((void *)this + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = &qword_26AF9C338;
  *((void *)this + 9) = re::internal::defaultConstruct<re::RenderGraphCommitCommandBufferNode>;
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::RenderGraphCommitCommandBufferNode>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::RenderGraphCommitCommandBufferNode>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::RenderGraphCommitCommandBufferNode>;
  re::IntrospectionRegistry::add(this, v3);
  long long v8 = v10;
}

re::RenderGraphNode *re::internal::defaultConstruct<re::RenderGraphCommitCommandBufferNode>(int a1, int a2, re::RenderGraphNode *this)
{
  uint64_t result = re::RenderGraphNode::RenderGraphNode(this);
  *(void *)uint64_t result = &unk_26E71DF88;
  return result;
}

void re::internal::defaultDestruct<re::RenderGraphCommitCommandBufferNode>(int a1, int a2, id *this)
{
}

re::RenderGraphNode *re::internal::defaultConstructV2<re::RenderGraphCommitCommandBufferNode>(re::RenderGraphNode *a1)
{
  uint64_t result = re::RenderGraphNode::RenderGraphNode(a1);
  *(void *)uint64_t result = &unk_26E71DF88;
  return result;
}

uint64_t re::introspect_RenderGraphCommitCommandBufferNode(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RenderGraphCommitCommandBufferNode", (uint64_t (*)(re::internal *))re::allocInfo_RenderGraphCommitCommandBufferNode, (re::IntrospectionBase *(*)(void))re::initInfo_RenderGraphCommitCommandBufferNode, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::RenderGraphCommitCommandBufferNode>, this);
}

void re::RenderGraphCommitCommandBufferNode::~RenderGraphCommitCommandBufferNode(id *this)
{
  re::RenderGraphNode::~RenderGraphNode(this);
  JUMPOUT(0x237DBCBD0);
}

void re::RenderGraphMPSImageAreaMaxNode::configure(id *this, const char *a2, const char *a3, re::RenderFrame *a4)
{
  re::RenderGraphNode::configure((re::RenderGraphNode *)this, a2, a3, a4);
  id v6 = *(id *)(*((void *)a4 + 1) + 184);
  id v17 = v6;
  uint64_t v7 = this + 33;
  id v8 = this[33];
  if (!v8)
  {
    re::mtl::mps::ImageAreaMax::ImageAreaMax((re::mtl::mps::ImageAreaMax *)&v16, (const re::mtl::Device *)&v17, *((int *)this + 64), *((int *)this + 64));
    if (v7 != &v16)
    {
      id v9 = v16;
      id v16 = 0;
      id v10 = *v7;
      id *v7 = v9;
    }
    id v8 = *v7;
  }
  uint64_t v11 = [v8 kernelWidth];
  uint64_t v12 = *((int *)this + 64);
  if (v11 != v12 || (v13 = [this[33] kernelHeight], uint64_t v12 = *((int *)this + 64), v13 != v12))
  {
    re::mtl::mps::ImageAreaMax::ImageAreaMax((re::mtl::mps::ImageAreaMax *)&v16, (const re::mtl::Device *)&v17, v12, v12);
    if (v7 != &v16)
    {
      id v14 = v16;
      id v16 = 0;
      id v15 = *v7;
      id *v7 = v14;
    }
  }
}

void re::RenderGraphMPSImageAreaMaxNode::execute(id *this, id **a2)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v34, 5093, 0);
  uint64_t v5 = *a2;
  re::RenderGraphMPSNodeBase::getCommandBufferWithProtectionOptions((re::RenderGraphMPSNodeBase *)this, (re::RenderGraphContext *)a2, &v33);
  id v27 = *v5;
  id v26 = v33;
  uint64_t v32 = 0;
  id v29 = 0;
  id v30 = 0;
  locatiouint64_t n = 0;
  char v31 = 0;
  re::ObjCObject::operator=(&v29, &v26);
  re::ObjCObject::operator=(&location, &v27);

  [this[33] setEdgeMode:*((unsigned __int8 *)this + 260)];
  if (!this[24])
  {
LABEL_26:
    re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
    _os_crash();
    __break(1u);
    goto LABEL_27;
  }
  uint64_t v7 = this[26];
  v25[0] = *v7;
  v25[1] = v7[1];
  if (!this[29])
  {
LABEL_27:
    re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
    _os_crash();
    __break(1u);
    goto LABEL_28;
  }
  unint64_t v2 = v36;
  id v8 = this + 33;
  id v9 = this[31];
  v24[0] = *v9;
  v24[1] = v9[1];
  re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)v25, 0, 0, &v23);
  re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)v24, 0, 0, &v22);
  re::SyncMechanism::sync((re::SyncMechanism *)&location);
  *(void *)&v43[0] = objc_msgSend(v23, sel_width);
  *(void *)unint64_t v36 = objc_msgSend(v23, sel_height);
  re::RenderGraphMPSNodeBase::getViewports((re::RenderGraphContext *)a2, (const unint64_t *)v43, (const unint64_t *)v36, &v19);
  if (objc_msgSend(v23, sel_textureType) == (id)2)
  {
    if (v20)
    {
      uint64x2_t v10 = vcvtq_u64_f64(vcvtq_f64_f32(v21[1]));
      uint64_t v11 = *v8;
      v43[0] = vcvtq_u64_f64(vcvtq_f64_f32(*v21));
      *(uint64x2_t *)((char *)&v43[1] + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v10;
      *(void *)&v43[1] = 0;
      *((void *)&v43[2] + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 1;
      [v11 setClipRect:v43];
      re::mtl::mps::UnaryImageKernel::encodeToCommandBuffer(this + 33, (uint64_t *)&v33, &v23, (uint64_t *)&v22);
      goto LABEL_15;
    }
LABEL_28:
    uint64_t v35 = 0;
    *((_OWORD *)v2 + 6) = 0u;
    *((_OWORD *)v2 + 7) = 0u;
    *((_OWORD *)v2 + 4) = 0u;
    *((_OWORD *)v2 + 5) = 0u;
    *((_OWORD *)v2 + 3) = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)unint64_t v36 = 136315906;
    *(void *)(v2 + 4) = "operator[]";
    __int16 v37 = 1024;
    *(_DWORD *)(v2 + 14) = 468;
    __int16 v39 = 2048;
    *(void *)(v2 + 20) = 0;
    __int16 v41 = 2048;
    *(void *)(v2 + 30) = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (objc_msgSend(v23, sel_textureType) != (id)3)
  {
    objc_msgSend(v23, sel_textureType);
    id v17 = objc_msgSend(v23, sel_textureType);
    re::internal::assertLog((re::internal *)5, v18, "assertion failure: '%s' (%s:line %i) Unsupported texture type %lu.", "false", "execute", 66, v17);
    _os_crash();
    __break(1u);
    return;
  }
  if (objc_msgSend(v23, sel_arrayLength))
  {
    uint64_t v12 = 0;
    unint64_t v13 = 0;
    while (1)
    {
      unint64_t v14 = v20;
      if (v20 <= v13) {
        break;
      }
      uint64x2_t v15 = vcvtq_u64_f64(vcvtq_f64_f32(v21[v12 + 1]));
      id v16 = *v8;
      v43[0] = vcvtq_u64_f64(vcvtq_f64_f32(v21[v12]));
      *(uint64x2_t *)((char *)&v43[1] + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v15;
      *(void *)&v43[1] = 0;
      *((void *)&v43[2] + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 1;
      [v16 setClipRect:v43];
      re::makeView2DArrayTo2D(&v23, v13, v43);
      re::makeView2DArrayTo2D(&v22, v13, v36);
      re::mtl::mps::UnaryImageKernel::encodeToCommandBuffer(v8, (uint64_t *)&v33, (id *)v43, (uint64_t *)v36);
      if (*(void *)v36) {

      }
      if (*(void *)&v43[0]) {
      ++v13;
      }
      v12 += 3;
      if (v13 >= (unint64_t)objc_msgSend(v23, sel_arrayLength)) {
        goto LABEL_15;
      }
    }
    uint64_t v35 = 0;
    memset(v43, 0, sizeof(v43));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)unint64_t v36 = 136315906;
    *(void *)&unint64_t v36[4] = "operator[]";
    __int16 v37 = 1024;
    int v38 = 468;
    __int16 v39 = 2048;
    unint64_t v40 = v13;
    __int16 v41 = 2048;
    unint64_t v42 = v14;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_26;
  }
LABEL_15:
  re::SyncMechanism::sync((re::SyncMechanism *)&location);
  if (v19 && v20) {
    (*(void (**)(void))(*(void *)v19 + 40))();
  }
  if (v22) {

  }
  if (v23) {
  if (v30)
  }
  {

    id v30 = 0;
  }

  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v34);
}

void *re::allocInfo_RenderGraphMPSImageAreaMaxNode(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_463, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_463))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF9C3E8, "RenderGraphMPSImageAreaMaxNode");
    __cxa_guard_release(&_MergedGlobals_463);
  }
  return &unk_26AF9C3E8;
}

void re::initInfo_RenderGraphMPSImageAreaMaxNode(re *this, re::IntrospectionBase *a2)
{
  v17[0] = 0x265369E83F9AD5ACLL;
  v17[1] = "RenderGraphMPSImageAreaMaxNode";
  re::StringID::destroyString((re::StringID *)v17);
  *((_OWORD *)this + 2) = v18;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9C3C8, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF9C3C8);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::introspect_RenderGraphNode((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "RenderGraphNode";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF9C3D0 = v7;
      id v8 = re::introspectionAllocator((re *)v7);
      uint64x2_t v10 = re::introspect_int((re *)1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "dilation";
      *(void *)(v11 + 16) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x10000000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF9C3D8 = v11;
      uint64_t v12 = re::introspectionAllocator((re *)v11);
      unint64_t v14 = re::introspect_MPSImageEdgeModeType((re *)1, v13);
      uint64_t v15 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 72, 8);
      *(_DWORD *)uint64_t v15 = 1;
      *(void *)(v15 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "edgeMode";
      *(void *)(v15 + 16) = v14;
      *(void *)(v15 + 24) = 0;
      *(void *)(v15 + 32) = 0x10400000002;
      *(_DWORD *)(v15 + 40) = 0;
      *(void *)(v15 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_26AF9C3E0 = v15;
      __cxa_guard_release(&qword_26AF9C3C8);
    }
  }
  *((void *)this + 2) = 0x11000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((void *)this + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = &qword_26AF9C3D0;
  *((void *)this + 9) = re::internal::defaultConstruct<re::RenderGraphMPSImageAreaMaxNode>;
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::RenderGraphMPSImageAreaMaxNode>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::RenderGraphMPSImageAreaMaxNode>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::RenderGraphMPSImageAreaMaxNode>;
  re::IntrospectionRegistry::add(this, v3);
  long long v16 = v18;
}

re::RenderGraphNode *re::internal::defaultConstruct<re::RenderGraphMPSImageAreaMaxNode>(int a1, int a2, re::RenderGraphNode *this)
{
  uint64_t result = re::RenderGraphNode::RenderGraphNode(this);
  *(void *)uint64_t result = &unk_26E71E030;
  *((unsigned char *)result + 260) = 0;
  *((void *)result + 33) = 0;
  return result;
}

void re::internal::defaultDestruct<re::RenderGraphMPSImageAreaMaxNode>(uint64_t a1, uint64_t a2, id *a3)
{
  re::RenderGraphNode::~RenderGraphNode(a3);
}

re::RenderGraphNode *re::internal::defaultConstructV2<re::RenderGraphMPSImageAreaMaxNode>(re::RenderGraphNode *a1)
{
  uint64_t result = re::RenderGraphNode::RenderGraphNode(a1);
  *(void *)uint64_t result = &unk_26E71E030;
  *((unsigned char *)result + 260) = 0;
  *((void *)result + 33) = 0;
  return result;
}

void re::internal::defaultDestructV2<re::RenderGraphMPSImageAreaMaxNode>(id *a1)
{
  re::RenderGraphNode::~RenderGraphNode(a1);
}

uint64_t re::introspect_RenderGraphMPSImageAreaMaxNode(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RenderGraphMPSImageAreaMaxNode", (uint64_t (*)(re::internal *))re::allocInfo_RenderGraphMPSImageAreaMaxNode, (re::IntrospectionBase *(*)(void))re::initInfo_RenderGraphMPSImageAreaMaxNode, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::RenderGraphMPSImageAreaMaxNode>, this);
}

void re::RenderGraphMPSImageAreaMaxNode::~RenderGraphMPSImageAreaMaxNode(id *this)
{
  re::RenderGraphNode::~RenderGraphNode(this);
}

{
  uint64_t vars8;

  re::RenderGraphNode::~RenderGraphNode(this);
  JUMPOUT(0x237DBCBD0);
}

void *re::allocInfo_DummyEnvironmentNode(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_464, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_464))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF9C478, "DummyEnvironmentNode");
    __cxa_guard_release(&_MergedGlobals_464);
  }
  return &unk_26AF9C478;
}

void re::initInfo_DummyEnvironmentNode(re *this, re::IntrospectionBase *a2)
{
  v9[0] = 0xE867E250ADF42A1ALL;
  v9[1] = "DummyEnvironmentNode";
  re::StringID::destroyString((re::StringID *)v9);
  *((_OWORD *)this + 2) = v10;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9C470, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF9C470);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::introspect_RenderGraphNode((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "RenderGraphNode";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF9C468 = v7;
      __cxa_guard_release(&qword_26AF9C470);
    }
  }
  *((void *)this + 2) = 0x10000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((void *)this + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = &qword_26AF9C468;
  *((void *)this + 9) = re::internal::defaultConstruct<re::DummyEnvironmentNode>;
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::DummyEnvironmentNode>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::DummyEnvironmentNode>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::DummyEnvironmentNode>;
  re::IntrospectionRegistry::add(this, v3);
  long long v8 = v10;
}

re::RenderGraphNode *re::internal::defaultConstruct<re::DummyEnvironmentNode>(int a1, int a2, re::RenderGraphNode *this)
{
  uint64_t result = re::RenderGraphNode::RenderGraphNode(this);
  *(void *)uint64_t result = &unk_26E6C6320;
  return result;
}

uint64_t re::internal::defaultDestruct<re::DummyEnvironmentNode>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

re::RenderGraphNode *re::internal::defaultConstructV2<re::DummyEnvironmentNode>(re::RenderGraphNode *a1)
{
  uint64_t result = re::RenderGraphNode::RenderGraphNode(a1);
  *(void *)uint64_t result = &unk_26E6C6320;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::DummyEnvironmentNode>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::introspect_DummyEnvironmentNode(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"DummyEnvironmentNode", (uint64_t (*)(re::internal *))re::allocInfo_DummyEnvironmentNode, (re::IntrospectionBase *(*)(void))re::initInfo_DummyEnvironmentNode, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::DummyEnvironmentNode>, this);
}

uint64_t re::LightContextAtlasContainer::allocateTiles(re::LightContextAtlasContainer *this)
{
  if (dyld_program_sdk_at_least()) {
    unsigned int v2 = 2;
  }
  else {
    unsigned int v2 = 1;
  }
  re::TextureAtlas::allocateTiles((uint64_t)this, v2);
  uint64_t result = re::TextureAtlas::allocateTiles((uint64_t)this + 96, 1u);
  *((unsigned char *)this + 192) = 1;
  return result;
}

void *re::LightContextBuilder::addAmbientLights(void *result, __int16 a2, uint64_t a3)
{
  uint64_t v63 = *MEMORY[0x263EF8340];
  __int16 v20 = a2;
  if (*(void *)(a3 + 16))
  {
    uint64_t v3 = result;
    uint64_t v19 = 0;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v15 = 0;
    int v18 = 0;
    re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)&v15, a3);
    memset(v25, 0, 24);
    long long v22 = 0u;
    long long v23 = 1uLL;
    long long v24 = 0uLL;
    *((void *)&v25[1] + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 1;
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    uint64_t v31 = 1;
    long long v30 = 0u;
    uint64_t v29 = 0;
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    uint64_t v37 = 1;
    long long v36 = 0u;
    uint64_t v35 = 0;
    uint64_t v38 = 0;
    uint64_t v39 = 0;
    uint64_t v40 = 0;
    uint64_t v43 = 1;
    long long v42 = 0u;
    uint64_t v41 = 0;
    uint64_t v44 = 0;
    uint64_t v45 = 0;
    uint64_t v46 = 0;
    uint64_t v47 = 0;
    uint64_t v49 = 1;
    long long v48 = 0u;
    uint64_t v52 = 0;
    uint64_t v51 = 0;
    uint64_t v53 = 0;
    uint64_t v50 = 0;
    uint64_t v54 = 0;
    uint64_t v4 = re::SmallHashTable<unsigned short,re::LightContextBuilder::LightArrays,8ul,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true>::add((uint64_t)(v3 + 11), &v20, (uint64_t)&v22);
    re::BucketArray<re::LightContextBuilder::RectAreaLightBucket,4ul>::deinit((uint64_t)&v48);
    if ((void)v48)
    {
      int v5 = v49;
      if ((v49 & 1) == 0)
      {
        (*(void (**)(void))(*(void *)v48 + 40))();
        int v5 = v49;
      }
      long long v48 = 0uLL;
      LODWORD(v49) = (v5 | 1) + 2;
    }
    re::BucketArray<re::LightContextBuilder::PointLightBucket,4ul>::deinit((uint64_t)&v42);
    if ((void)v42)
    {
      int v6 = v43;
      if ((v43 & 1) == 0)
      {
        (*(void (**)(void))(*(void *)v42 + 40))();
        int v6 = v43;
      }
      long long v42 = 0uLL;
      LODWORD(v43) = (v6 | 1) + 2;
    }
    re::BucketArray<re::LightContextBuilder::SpotLightBucket,4ul>::deinit((uint64_t)&v36);
    if ((void)v36)
    {
      int v7 = v37;
      if ((v37 & 1) == 0)
      {
        (*(void (**)(void))(*(void *)v36 + 40))();
        int v7 = v37;
      }
      long long v36 = 0uLL;
      LODWORD(v37) = (v7 | 1) + 2;
    }
    re::BucketArray<re::LightContextBuilder::RealWorldProxyLightBucket,4ul>::deinit((uint64_t)&v30);
    if ((void)v30)
    {
      int v8 = v31;
      if ((v31 & 1) == 0)
      {
        (*(void (**)(void))(*(void *)v30 + 40))();
        int v8 = v31;
      }
      long long v30 = 0uLL;
      LODWORD(v3re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = (v8 | 1) + 2;
    }
    re::BucketArray<re::LightContextBuilder::DirectionalLightBucket,4ul>::deinit((uint64_t)v25 + 8);
    if (*((void *)&v25[0] + 1))
    {
      int v9 = DWORD2(v25[1]);
      if ((BYTE8(v25[1]) & 1) == 0)
      {
        (*(void (**)(void))(**((void **)&v25[0] + 1) + 40))();
        int v9 = DWORD2(v25[1]);
      }
      *((void *)&v25[0] + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
      *(void *)&v25[1] = 0;
      DWORD2(v25[1]) = (v9 | 1) + 2;
    }
    re::BucketArray<re::LightContextBuilder::AmbientLightBucket,4ul>::deinit((uint64_t)&v22);
    uint64_t result = (void *)v22;
    if ((void)v22 && (v23 & 1) == 0) {
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v22 + 40))();
    }
    unint64_t v10 = *(void *)(v4 + 40);
    unint64_t v11 = *(void *)(v4 + 8);
    if (v10 + 1 > 4 * v11)
    {
      uint64_t result = re::BucketArray<re::MipmapGenerationContext,4ul>::setBucketsCapacity((void *)v4, (v10 + 4) >> 2);
      unint64_t v11 = *(void *)(v4 + 8);
    }
    if (v11 <= v10 >> 2)
    {
      uint64_t v21 = 0;
      memset(v25, 0, sizeof(v25));
      long long v23 = 0u;
      long long v24 = 0u;
      long long v22 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v55 = 136315906;
      uint64_t v56 = "operator[]";
      __int16 v57 = 1024;
      int v58 = 858;
      __int16 v59 = 2048;
      unint64_t v60 = v10 >> 2;
      __int16 v61 = 2048;
      unint64_t v62 = v11;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v12 = *(void *)(v4 + 32);
    if (*(_DWORD *)(v4 + 16)) {
      uint64_t v12 = v4 + 24;
    }
    uint64_t v13 = *(void *)(v12 + 8 * (v10 >> 2));
    ++*(void *)(v4 + 40);
    ++*(_DWORD *)(v4 + 48);
    uint64_t v14 = v13 + 40 * (v10 & 3);
    *(void *)(v14 + 32) = 0;
    *(_DWORD *)(v14 + 24) = 0;
    *(void *)(v14 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
    *(void *)(v14 + 16) = 0;
    *(void *)uint64_t v14 = 0;
    *(void *)uint64_t v14 = v15;
    *(void *)(v14 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v16;
    *(void *)(v14 + 16) = v17;
    *(void *)(v14 + 32) = v19;
    ++v18;
    ++*(_DWORD *)(v14 + 24);
    *((unsigned char *)v3 + 2992) = 0;
  }
  return result;
}

uint64_t re::LightContextBuilder::addDirectionalLights(uint64_t result, __int16 a2, uint64_t a3)
{
  uint64_t v65 = *MEMORY[0x263EF8340];
  __int16 v25 = a2;
  if (*(void *)(a3 + 16))
  {
    uint64_t v3 = result;
    uint64_t v19 = 0;
    long long v20 = 0uLL;
    int v21 = 0;
    long long v22 = 0u;
    memset(v23, 0, sizeof(v23));
    uint64_t v24 = 0;
    uint64_t v4 = (_anonymous_namespace_ *)re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)&v19, a3);
    unint64_t v5 = *((void *)&v20 + 1);
    unint64_t v6 = 0;
    if (v5)
    {
      unint64_t v7 = 0;
      uint64_t v8 = 134;
      do
      {
        uint64_t v9 = *((void *)&v20 + 1);
        if (*((void *)&v20 + 1) <= v7)
        {
          uint64_t v26 = 0;
          memset(v30, 0, 32);
          long long v29 = 0u;
          long long v27 = 0u;
          long long v28 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          int v57 = 136315906;
          int v58 = "operator[]";
          __int16 v59 = 1024;
          int v60 = 789;
          __int16 v61 = 2048;
          unint64_t v62 = v7;
          __int16 v63 = 2048;
          uint64_t v64 = v9;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_38:
          uint64_t v26 = 0;
          memset(v30, 0, 32);
          long long v29 = 0u;
          long long v27 = 0u;
          long long v28 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          int v57 = 136315906;
          int v58 = "operator[]";
          __int16 v59 = 1024;
          int v60 = 468;
          __int16 v61 = 2048;
          unint64_t v62 = v7;
          __int16 v63 = 2048;
          uint64_t v64 = v9;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        uint64_t v10 = v22;
        if (*(unsigned char *)(v22 + v8))
        {
          if (dyld_program_sdk_at_least() && v6 >= 8)
          {
            *(unsigned char *)(v10 + vre::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
          }
          else
          {
            unint64_t v11 = re::TextureAtlas::requestTile(*(re::TextureAtlas **)(v3 + 2984), 1024, 1024, 0.0);
            uint64_t v9 = *((void *)&v23[1] + 1);
            if (*((void *)&v23[1] + 1) <= v7) {
              goto LABEL_38;
            }
            *(void *)(v24 + 8 * v7) = v11;
            ++v6;
          }
        }
        ++v7;
        v8 += 144;
      }
      while (v5 != v7);
    }
    long long v27 = 0u;
    long long v28 = 1uLL;
    long long v29 = 0uLL;
    v30[3] = 1;
    memset(v30, 0, 24);
    memset(&v30[4], 0, 32);
    uint64_t v32 = 1;
    long long v31 = 0u;
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    uint64_t v35 = 0;
    uint64_t v38 = 1;
    long long v37 = 0u;
    uint64_t v36 = 0;
    uint64_t v39 = 0;
    uint64_t v40 = 0;
    uint64_t v41 = 0;
    uint64_t v44 = 1;
    long long v43 = 0u;
    uint64_t v42 = 0;
    uint64_t v45 = 0;
    uint64_t v46 = 0;
    uint64_t v47 = 0;
    uint64_t v48 = 0;
    int v51 = 0;
    long long v49 = 0u;
    uint64_t v54 = 0;
    int v50 = 1;
    uint64_t v53 = 0;
    uint64_t v55 = 0;
    uint64_t v52 = 0;
    uint64_t v56 = 0;
    uint64_t v12 = re::SmallHashTable<unsigned short,re::LightContextBuilder::LightArrays,8ul,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true>::add(v3 + 88, &v25, (uint64_t)&v27);
    re::BucketArray<re::LightContextBuilder::RectAreaLightBucket,4ul>::deinit((uint64_t)&v49);
    if ((void)v49)
    {
      int v13 = v50;
      if ((v50 & 1) == 0)
      {
        (*(void (**)(void))(*(void *)v49 + 40))();
        int v13 = v50;
      }
      long long v49 = 0uLL;
      int v50 = (v13 | 1) + 2;
    }
    re::BucketArray<re::LightContextBuilder::PointLightBucket,4ul>::deinit((uint64_t)&v43);
    if ((void)v43)
    {
      int v14 = v44;
      if ((v44 & 1) == 0)
      {
        (*(void (**)(void))(*(void *)v43 + 40))();
        int v14 = v44;
      }
      long long v43 = 0uLL;
      LODWORD(v44) = (v14 | 1) + 2;
    }
    re::BucketArray<re::LightContextBuilder::SpotLightBucket,4ul>::deinit((uint64_t)&v37);
    if ((void)v37)
    {
      int v15 = v38;
      if ((v38 & 1) == 0)
      {
        (*(void (**)(void))(*(void *)v37 + 40))();
        int v15 = v38;
      }
      long long v37 = 0uLL;
      LODWORD(v3re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = (v15 | 1) + 2;
    }
    re::BucketArray<re::LightContextBuilder::RealWorldProxyLightBucket,4ul>::deinit((uint64_t)&v31);
    if ((void)v31)
    {
      int v16 = v32;
      if ((v32 & 1) == 0)
      {
        (*(void (**)(void))(*(void *)v31 + 40))();
        int v16 = v32;
      }
      long long v31 = 0uLL;
      LODWORD(v32) = (v16 | 1) + 2;
    }
    re::BucketArray<re::LightContextBuilder::DirectionalLightBucket,4ul>::deinit((uint64_t)&v30[1]);
    if (v30[1])
    {
      int v17 = v30[3];
      if ((v30[3] & 1) == 0)
      {
        (*(void (**)(void))(*(void *)v30[1] + 40))();
        int v17 = v30[3];
      }
      v30[1] = 0;
      v30[2] = 0;
      LODWORD(v30[3]) = (v17 | 1) + 2;
    }
    re::BucketArray<re::LightContextBuilder::AmbientLightBucket,4ul>::deinit((uint64_t)&v27);
    if ((void)v27)
    {
      if ((v28 & 1) == 0) {
        (*(void (**)(void))(*(void *)v27 + 40))();
      }
    }
    uint64_t v18 = re::BucketArray<re::LightContextBuilder::DirectionalLightBucket,4ul>::addUninitialized(v12 + 56);
    *(void *)(v18 + 32) = 0;
    *(_DWORD *)(v18 + 24) = 0;
    *(_OWORD *)(v18 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
    *(void *)uint64_t v18 = 0;
    *(void *)uint64_t v18 = v19;
    uint64_t v19 = 0;
    *(_OWORD *)(v18 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v20;
    long long v20 = 0u;
    *(void *)(v18 + 32) = v22;
    ++v21;
    ++*(_DWORD *)(v18 + 24);
    *(void *)(v18 + 56) = 0;
    *(_OWORD *)(v18 + 40) = 0u;
    *(void *)(v18 + 40) = *((void *)&v22 + 1);
    long long v22 = 0u;
    *(void *)(v18 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(void *)&v23[0];
    *(void *)&v23[0] = 0;
    *(void *)(v18 + 56) = *((void *)&v23[0] + 1);
    *(void *)(v18 + 80) = 0;
    *(_OWORD *)(v18 + 64) = 0u;
    *(void *)(v18 + 64) = *(void *)&v23[1];
    *(_OWORD *)((char *)v23 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
    *(void *)(v18 + 72) = *((void *)&v23[1] + 1);
    *(void *)(v18 + 80) = v24;
    *((void *)&v23[1] + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
    uint64_t v24 = 0;
    *(void *)(v12 + 336) = v6;
    *(unsigned char *)(v3 + 2992) = 0;
    return re::DynamicArray<re::RectAreaLightInfo>::deinit((uint64_t)&v19);
  }
  return result;
}

uint64_t re::LightContextBuilder::addGlobalDirectionalLight(re::LightContextBuilder *this, float a2)
{
  uint64_t v3 = this;
  uint64_t v60 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9C4F8, memory_order_acquire) & 1) == 0) {
    goto LABEL_24;
  }
  while (1)
  {
    *((unsigned char *)v3 + 3032) = _MergedGlobals_465;
    memset(v37, 0, sizeof(v37));
    re::DynamicString::setCapacity(v37, 0);
    *(_DWORD *)&v42[24] = 1092616192;
    char v44 = 0;
    *(_DWORD *)&v45[6] = 1065353216;
    long long v38 = xmmword_23435FD50;
    long long v39 = xmmword_234412B70;
    long long v40 = xmmword_234412B80;
    long long v41 = xmmword_23435FBB0;
    *(void *)&v42[16] = 0x3C23D70A3F800000;
    __asm { FMOV            V0.4S, #1.0 }
    *(_OWORD *)uint64_t v42 = _Q0;
    uint64_t v43 = LODWORD(a2) | 0x3F00000000000000;
    *(_DWORD *)uint64_t v45 = 16843009;
    uint64_t v36 = 0;
    v33[1] = 0;
    uint64_t v34 = 0;
    v33[0] = 0;
    int v35 = 0;
    re::DynamicArray<re::DirectionalLightInfo>::growCapacity(v33, 1uLL);
    uint64_t v9 = v36 + 144 * v34;
    uint64_t v10 = *((void *)&v37[1] + 1);
    *(void *)uint64_t v9 = *(void *)&v37[0];
    *(void *)(v9 + 24) = v10;
    *(_OWORD *)(v9 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_OWORD *)((char *)v37 + 8);
    long long v11 = v41;
    *(_OWORD *)(v9 + 64) = v40;
    *(_OWORD *)(v9 + 80) = v11;
    *(_OWORD *)(v9 + 96) = *(_OWORD *)v42;
    *(_OWORD *)(v9 + 10re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_OWORD *)&v42[12];
    long long v12 = v39;
    *(_OWORD *)(v9 + 32) = v38;
    *(_OWORD *)(v9 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v12;
    *(void *)(v9 + 124) = v43;
    *(unsigned char *)(v9 + 132) = 0;
    *(void *)(v9 + 134) = *(void *)v45;
    *(_WORD *)(v9 + 142) = *(_WORD *)&v45[8];
    unint64_t v13 = ++v34;
    ++v35;
    v26[0] = 0;
    v26[1] = 0;
    int v28 = 0;
    uint64_t v27 = 0;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    uint64_t v32 = 0;
    if (!v33[0]) {
      break;
    }
    v26[0] = v33[0];
    re::DynamicArray<re::DirectionalLightInfo>::setCapacity(v26, v13);
    ++v28;
    re::DynamicArray<re::DirectionalLightInfo>::copy(v26, (uint64_t)v33);
    if (v27 != 1) {
      break;
    }
    *((unsigned char *)v3 + 2992) = 0;
    int v15 = &v31;
    if (!v27)
    {
      uint64_t v46 = 0;
      long long v58 = 0u;
      long long v59 = 0u;
      long long v56 = 0u;
      long long v57 = 0u;
      long long v55 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v47 = 136315906;
      uint64_t v48 = "operator[]";
      __int16 v49 = 1024;
      int v50 = 789;
      __int16 v51 = 2048;
      uint64_t v52 = 0;
      __int16 v53 = 2048;
      uint64_t v54 = 0;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_22:
      uint64_t v46 = 0;
      long long v58 = 0u;
      long long v59 = 0u;
      long long v56 = 0u;
      long long v57 = 0u;
      long long v55 = 0u;
      uint64_t v3 = (re::LightContextBuilder *)&_os_log_internal;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v47 = 136315906;
      uint64_t v48 = "operator[]";
      __int16 v49 = (__int16)v15;
      int v50 = 468;
      __int16 v51 = 2048;
      uint64_t v52 = 0;
      __int16 v53 = 2048;
      uint64_t v54 = 0;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_23;
    }
    if (*(unsigned char *)(v29 + 134))
    {
      LOWORD(v15) = 1024;
      unint64_t v16 = re::TextureAtlas::requestTile(*((re::TextureAtlas **)v3 + 373), 1024, 1024, 0.0);
      if (!*((void *)&v31 + 1)) {
        goto LABEL_22;
      }
      *uint64_t v32 = v16;
    }
    re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)v3, (uint64_t)v26);
    re::FixedArray<float>::operator=((uint64_t *)v3 + 5, (uint64_t *)&v29 + 1);
    if (v26 == (void *)v3) {
      break;
    }
    uint64_t v18 = *((void *)v3 + 8);
    if (!v18 || v18 == (void)v31)
    {
      uint64_t v19 = *((void *)v3 + 9);
      long long v20 = (unint64_t *)*((void *)v3 + 10);
      uint64_t v21 = *((void *)&v31 + 1);
      long long v22 = v32;
      *((void *)v3 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v31;
      *((void *)v3 + 9) = v21;
      *(void *)&long long v31 = v18;
      *((void *)&v31 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = v19;
      *((void *)v3 + 10) = v22;
      uint64_t v32 = v20;
      break;
    }
LABEL_23:
    re::internal::assertLog((re::internal *)4, v17, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || m_allocator == other.m_allocator", "operator=", 296);
    _os_crash();
    __break(1u);
LABEL_24:
    this = (re::LightContextBuilder *)__cxa_guard_acquire(&qword_26AF9C4F8);
    if (this)
    {
      re::Defaults::BOOLValue((re::Defaults *)"enableCalculateIBLShadowProjectionBoundsFromScene", v24, (char *)v37);
      if (LOBYTE(v37[0])) {
        char v25 = BYTE1(v37[0]);
      }
      else {
        char v25 = 1;
      }
      _MergedGlobals_465 = v25;
      __cxa_guard_release(&qword_26AF9C4F8);
    }
  }
  if ((void)v31)
  {
    if (*((void *)&v31 + 1))
    {
      (*(void (**)(void))(*(void *)v31 + 40))();
      *((void *)&v31 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
      uint64_t v32 = 0;
    }
    *(void *)&long long v31 = 0;
  }
  if (*((void *)&v29 + 1))
  {
    if ((void)v30)
    {
      (*(void (**)(void))(**((void **)&v29 + 1) + 40))();
      long long v30 = 0uLL;
    }
    *((void *)&v29 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
  }
  re::DynamicArray<re::RectAreaLightInfo>::deinit((uint64_t)v26);
  return re::DynamicArray<re::RectAreaLightInfo>::deinit((uint64_t)v33);
}

uint64_t re::LightContextBuilder::addRealWorldProxyLights(uint64_t result, __int16 a2, uint64_t a3)
{
  uint64_t v76 = *MEMORY[0x263EF8340];
  __int16 v36 = a2;
  if (*(void *)(a3 + 16))
  {
    uint64_t v3 = result;
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    int v29 = 0;
    unint64_t v28 = 0;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    unint64_t v4 = (unint64_t)&v26;
    unint64_t v5 = (_anonymous_namespace_ *)re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)&v26, a3);
    unint64_t v6 = v28;
    if (v6)
    {
      unint64_t v8 = 0;
      while (1)
      {
        unint64_t v9 = re::TextureAtlas::requestTile(*(re::TextureAtlas **)(v3 + 2984), 1024, 1024, 0.0);
        unint64_t v10 = v35;
        if ((unint64_t)v35 <= v8) {
          break;
        }
        *(void *)(*((void *)&v35 + 1) + 8 * v8++) = v9;
        if (v6 == v8) {
          goto LABEL_6;
        }
      }
      uint64_t v37 = 0;
      memset(v41, 0, 32);
      long long v39 = 0u;
      long long v40 = 0u;
      long long v38 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v68 = 136315906;
      uint64_t v69 = "operator[]";
      __int16 v70 = 1024;
      int v71 = 468;
      __int16 v72 = 2048;
      id v73 = (void *)v8;
      __int16 v74 = 2048;
      unint64_t v75 = v10;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_47:
      uint64_t v37 = 0;
      memset(v41, 0, 32);
      long long v39 = 0u;
      long long v40 = 0u;
      long long v38 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v68 = 136315906;
      uint64_t v69 = "operator[]";
      __int16 v70 = 1024;
      int v71 = 858;
      __int16 v72 = 2048;
      id v73 = (void *)v4;
      __int16 v74 = 2048;
      unint64_t v75 = v10;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
LABEL_6:
    long long v39 = 1uLL;
    long long v38 = 0u;
    long long v40 = 0uLL;
    v41[3] = 1;
    memset(v41, 0, 24);
    memset(&v41[4], 0, 32);
    uint64_t v43 = 1;
    long long v42 = 0u;
    uint64_t v44 = 0;
    uint64_t v45 = 0;
    uint64_t v46 = 0;
    uint64_t v49 = 1;
    long long v48 = 0u;
    uint64_t v47 = 0;
    uint64_t v50 = 0;
    uint64_t v51 = 0;
    uint64_t v52 = 0;
    uint64_t v55 = 1;
    long long v54 = 0u;
    uint64_t v53 = 0;
    uint64_t v56 = 0;
    uint64_t v57 = 0;
    uint64_t v58 = 0;
    uint64_t v59 = 0;
    int v62 = 0;
    long long v60 = 0u;
    uint64_t v65 = 0;
    int v61 = 1;
    uint64_t v64 = 0;
    uint64_t v66 = 0;
    uint64_t v63 = 0;
    uint64_t v67 = 0;
    uint64_t v11 = re::SmallHashTable<unsigned short,re::LightContextBuilder::LightArrays,8ul,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true>::add(v3 + 88, &v36, (uint64_t)&v38);
    re::BucketArray<re::LightContextBuilder::RectAreaLightBucket,4ul>::deinit((uint64_t)&v60);
    if ((void)v60)
    {
      int v12 = v61;
      if ((v61 & 1) == 0)
      {
        (*(void (**)(void))(*(void *)v60 + 40))();
        int v12 = v61;
      }
      long long v60 = 0uLL;
      int v61 = (v12 | 1) + 2;
    }
    re::BucketArray<re::LightContextBuilder::PointLightBucket,4ul>::deinit((uint64_t)&v54);
    if ((void)v54)
    {
      int v13 = v55;
      if ((v55 & 1) == 0)
      {
        (*(void (**)(void))(*(void *)v54 + 40))();
        int v13 = v55;
      }
      long long v54 = 0uLL;
      LODWORD(v55) = (v13 | 1) + 2;
    }
    re::BucketArray<re::LightContextBuilder::SpotLightBucket,4ul>::deinit((uint64_t)&v48);
    if ((void)v48)
    {
      int v14 = v49;
      if ((v49 & 1) == 0)
      {
        (*(void (**)(void))(*(void *)v48 + 40))();
        int v14 = v49;
      }
      long long v48 = 0uLL;
      LODWORD(v49) = (v14 | 1) + 2;
    }
    re::BucketArray<re::LightContextBuilder::RealWorldProxyLightBucket,4ul>::deinit((uint64_t)&v42);
    if ((void)v42)
    {
      int v15 = v43;
      if ((v43 & 1) == 0)
      {
        (*(void (**)(void))(*(void *)v42 + 40))();
        int v15 = v43;
      }
      long long v42 = 0uLL;
      LODWORD(v43) = (v15 | 1) + 2;
    }
    re::BucketArray<re::LightContextBuilder::DirectionalLightBucket,4ul>::deinit((uint64_t)&v41[1]);
    if (v41[1])
    {
      int v16 = v41[3];
      if ((v41[3] & 1) == 0)
      {
        (*(void (**)(void))(*(void *)v41[1] + 40))();
        int v16 = v41[3];
      }
      v41[1] = 0;
      _OWORD v41[2] = 0;
      LODWORD(v41[3]) = (v16 | 1) + 2;
    }
    re::BucketArray<re::LightContextBuilder::AmbientLightBucket,4ul>::deinit((uint64_t)&v38);
    if ((void)v38 && (v39 & 1) == 0) {
      (*(void (**)(void))(*(void *)v38 + 40))();
    }
    unint64_t v17 = *(void *)(v11 + 152);
    unint64_t v10 = *(void *)(v11 + 120);
    if (v17 + 1 > 4 * v10)
    {
      re::BucketArray<re::LightContextBuilder::RealWorldProxyLightBucket,4ul>::setBucketsCapacity((void *)(v11 + 112), (v17 + 4) >> 2);
      unint64_t v10 = *(void *)(v11 + 120);
    }
    unint64_t v4 = v17 >> 2;
    if (v10 <= v17 >> 2) {
      goto LABEL_47;
    }
    uint64_t v18 = *(void *)(v11 + 144);
    if (*(_DWORD *)(v11 + 128)) {
      uint64_t v18 = v11 + 136;
    }
    uint64_t v19 = *(void *)(v18 + 8 * v4);
    ++*(void *)(v11 + 152);
    ++*(_DWORD *)(v11 + 160);
    uint64_t v20 = v19 + 120 * (v17 & 3);
    *(void *)(v20 + 32) = 0;
    *(_DWORD *)(v20 + 24) = 0;
    *(void *)(v20 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
    *(void *)(v20 + 16) = 0;
    *(void *)uint64_t v20 = 0;
    *(void *)uint64_t v20 = v26;
    uint64_t v26 = 0;
    *(void *)(v20 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v27;
    uint64_t v27 = 0;
    unint64_t v21 = *(void *)(v20 + 16);
    *(void *)(v20 + 16) = v28;
    unint64_t v28 = v21;
    uint64_t v22 = *(void *)(v20 + 32);
    *(void *)(v20 + 32) = v30;
    *(void *)&long long v30 = v22;
    ++v29;
    ++*(_DWORD *)(v20 + 24);
    *(void *)(v20 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
    *(void *)(v20 + 56) = 0;
    *(void *)(v20 + 40) = 0;
    *(void *)(v20 + 40) = *((void *)&v30 + 1);
    *((void *)&v30 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
    *(void *)(v20 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v31;
    *(void *)&long long v31 = 0;
    uint64_t v23 = *(void *)(v20 + 56);
    *(void *)(v20 + 56) = *((void *)&v31 + 1);
    *((void *)&v31 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = v23;
    *(void *)(v20 + 64) = v32;
    *(void *)(v20 + 72) = 0;
    *(void *)(v20 + 80) = 0;
    *(void *)(v20 + 8re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
    *(void *)(v20 + 72) = v33;
    *(void *)&long long v33 = 0;
    *(void *)(v20 + 80) = *((void *)&v33 + 1);
    *((void *)&v33 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
    uint64_t v24 = *(void *)(v20 + 88);
    *(void *)(v20 + 8re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v34;
    *(void *)&long long v34 = v24;
    *(void *)(v20 + 96) = 0;
    *(void *)(v20 + 104) = 0;
    *(void *)(v20 + 112) = 0;
    *(void *)(v20 + 96) = *((void *)&v34 + 1);
    *((void *)&v34 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
    *(void *)(v20 + 104) = v35;
    *(void *)&long long v35 = 0;
    uint64_t v25 = *(void *)(v20 + 112);
    *(void *)(v20 + 112) = *((void *)&v35 + 1);
    *((void *)&v35 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = v25;
    *(void *)(v11 + 336) += v6;
    *(unsigned char *)(v3 + 2992) = 0;
    if (*((void *)&v34 + 1)) {
      *((void *)&v34 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
    }
    if ((void)v33)
    {
      if (*((void *)&v33 + 1))
      {
        (*(void (**)(void))(*(void *)v33 + 40))();
        *((void *)&v33 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
        *(void *)&long long v34 = 0;
      }
      *(void *)&long long v33 = 0;
    }
    if (*((void *)&v30 + 1))
    {
      if ((void)v31)
      {
        (*(void (**)(void))(**((void **)&v30 + 1) + 40))();
        long long v31 = 0uLL;
      }
      *((void *)&v30 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
    }
    return re::DynamicArray<re::RectAreaLightInfo>::deinit((uint64_t)&v26);
  }
  return result;
}

uint64_t re::LightContextBuilder::addSpotLights(uint64_t result, unsigned int a2, uint64_t a3)
{
  uint64_t v91 = *MEMORY[0x263EF8340];
  __int16 v51 = a2;
  if (!*(void *)(a3 + 16)) {
    return result;
  }
  uint64_t v5 = result;
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  int v44 = 0;
  unint64_t v43 = 0;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  unint64_t v6 = (_anonymous_namespace_ *)re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)&v41, a3);
  unint64_t v7 = v43;
  if (!*(_DWORD *)(v5 + 2964))
  {
    uint64_t v18 = *(void *)(v5 + 104);
    if (v18)
    {
      uint64_t v16 = v5 + 128;
      uint64_t v19 = 352 * v18;
      while (*(unsigned __int16 *)(v16 - 8) != a2)
      {
        v16 += 352;
        v19 -= 352;
        if (!v19) {
          goto LABEL_14;
        }
      }
      goto LABEL_9;
    }
LABEL_14:
    unint64_t v17 = 0;
    goto LABEL_15;
  }
  if (!*(void *)(v5 + 2936)) {
    goto LABEL_14;
  }
  unint64_t v10 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * a2) ^ ((0xBF58476D1CE4E5B9 * a2) >> 27));
  unint64_t v11 = v10 ^ (v10 >> 31);
  uint64_t v12 = *(unsigned int *)(*(void *)(v5 + 2944) + 4 * (v11 % *(unsigned int *)(v5 + 2960)));
  if (v12 == 0x7FFFFFFF) {
    goto LABEL_14;
  }
  uint64_t v13 = *(void *)(v5 + 2952);
  unint64_t v14 = 0xBF58476D1CE4E5B9 * *(unsigned __int16 *)(v13 + 352 * v12 + 4);
  if (((0x94D049BB133111EBLL * (v14 ^ (v14 >> 27))) ^ ((0x94D049BB133111EBLL * (v14 ^ (v14 >> 27))) >> 31)) != v11)
  {
    do
    {
      LODWORD(v12) = *(_DWORD *)(v13 + 352 * v12) & 0x7FFFFFFF;
      if (v12 == 0x7FFFFFFF) {
        goto LABEL_14;
      }
      unint64_t v15 = 0xBF58476D1CE4E5B9 * *(unsigned __int16 *)(v13 + 352 * v12 + 4);
    }
    while (((0x94D049BB133111EBLL * (v15 ^ (v15 >> 27))) ^ ((0x94D049BB133111EBLL * (v15 ^ (v15 >> 27))) >> 31)) != v11);
  }
  uint64_t v16 = v13 + 352 * v12 + 8;
LABEL_9:
  unint64_t v17 = *(void *)(v16 + 336);
LABEL_15:
  if (v7)
  {
    unint64_t v20 = 0;
    unint64_t v21 = 0;
    while (1)
    {
      unint64_t v22 = v43;
      if (v43 <= v21)
      {
        uint64_t v52 = 0;
        memset(v56, 0, 32);
        long long v54 = 0u;
        long long v55 = 0u;
        long long v53 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v83 = 136315906;
        unint64_t v84 = "operator[]";
        __int16 v85 = 1024;
        int v86 = 789;
        __int16 v87 = 2048;
        unint64_t v88 = v21;
        __int16 v89 = 2048;
        unint64_t v90 = v22;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_69:
        uint64_t v52 = 0;
        memset(v56, 0, 32);
        long long v54 = 0u;
        long long v55 = 0u;
        long long v53 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v83 = 136315906;
        unint64_t v84 = "operator[]";
        __int16 v85 = 1024;
        int v86 = 468;
        __int16 v87 = 2048;
        unint64_t v88 = v21;
        __int16 v89 = 2048;
        unint64_t v90 = v22;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_70:
        uint64_t v52 = 0;
        memset(v56, 0, 32);
        long long v54 = 0u;
        long long v55 = 0u;
        long long v53 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v83 = 136315906;
        unint64_t v84 = "operator[]";
        __int16 v85 = 1024;
        int v86 = 468;
        __int16 v87 = 2048;
        unint64_t v88 = v21;
        __int16 v89 = 2048;
        unint64_t v90 = v3;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_71:
        uint64_t v52 = 0;
        memset(v56, 0, 32);
        long long v54 = 0u;
        long long v55 = 0u;
        long long v53 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v83 = 136315906;
        unint64_t v84 = "operator[]";
        __int16 v85 = 1024;
        int v86 = 858;
        __int16 v87 = 2048;
        unint64_t v88 = v20;
        __int16 v89 = 2048;
        unint64_t v90 = v21;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      uint64_t v23 = v45 + v20;
      if (!*(unsigned char *)(v45 + v20 + 224)) {
        goto LABEL_24;
      }
      if (!dyld_program_sdk_at_least() || v17 < 8) {
        break;
      }
      *(unsigned char *)(v23 + 224) = 0;
LABEL_27:
      ++v21;
      v20 += 240;
      if (v7 == v21) {
        goto LABEL_28;
      }
    }
    unint64_t v24 = re::TextureAtlas::requestTile(*(re::TextureAtlas **)(v5 + 2984), 512, 512, 1.0);
    unint64_t v3 = v50;
    if ((unint64_t)v50 <= v21) {
      goto LABEL_70;
    }
    *(void *)(*((void *)&v50 + 1) + 8 * v2re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = v24;
    ++v17;
LABEL_24:
    if (*(unsigned char *)(v23 + 223))
    {
      unint64_t v25 = re::TextureAtlas::requestTile((re::TextureAtlas *)(*(void *)(v5 + 2984) + 96), 512, 512, 1.0);
      unint64_t v22 = *((void *)&v48 + 1);
      if (*((void *)&v48 + 1) <= v21) {
        goto LABEL_69;
      }
      *(void *)(v49 + 8 * v2re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = v25;
    }
    goto LABEL_27;
  }
LABEL_28:
  long long v54 = 1uLL;
  long long v53 = 0u;
  long long v55 = 0uLL;
  v56[3] = 1;
  memset(v56, 0, 24);
  memset(&v56[4], 0, 32);
  uint64_t v58 = 1;
  long long v57 = 0u;
  uint64_t v59 = 0;
  uint64_t v60 = 0;
  uint64_t v61 = 0;
  uint64_t v64 = 1;
  long long v63 = 0u;
  uint64_t v62 = 0;
  uint64_t v65 = 0;
  uint64_t v66 = 0;
  uint64_t v67 = 0;
  uint64_t v70 = 1;
  long long v69 = 0u;
  uint64_t v68 = 0;
  uint64_t v71 = 0;
  uint64_t v72 = 0;
  uint64_t v73 = 0;
  uint64_t v74 = 0;
  int v77 = 0;
  long long v75 = 0u;
  uint64_t v80 = 0;
  int v76 = 1;
  uint64_t v79 = 0;
  uint64_t v81 = 0;
  uint64_t v78 = 0;
  uint64_t v82 = 0;
  uint64_t v26 = re::SmallHashTable<unsigned short,re::LightContextBuilder::LightArrays,8ul,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true>::add(v5 + 88, &v51, (uint64_t)&v53);
  re::BucketArray<re::LightContextBuilder::RectAreaLightBucket,4ul>::deinit((uint64_t)&v75);
  if ((void)v75)
  {
    int v27 = v76;
    if ((v76 & 1) == 0)
    {
      (*(void (**)(void))(*(void *)v75 + 40))();
      int v27 = v76;
    }
    long long v75 = 0uLL;
    int v76 = (v27 | 1) + 2;
  }
  re::BucketArray<re::LightContextBuilder::PointLightBucket,4ul>::deinit((uint64_t)&v69);
  if ((void)v69)
  {
    int v28 = v70;
    if ((v70 & 1) == 0)
    {
      (*(void (**)(void))(*(void *)v69 + 40))();
      int v28 = v70;
    }
    long long v69 = 0uLL;
    LODWORD(v70) = (v28 | 1) + 2;
  }
  re::BucketArray<re::LightContextBuilder::SpotLightBucket,4ul>::deinit((uint64_t)&v63);
  if ((void)v63)
  {
    int v29 = v64;
    if ((v64 & 1) == 0)
    {
      (*(void (**)(void))(*(void *)v63 + 40))();
      int v29 = v64;
    }
    long long v63 = 0uLL;
    LODWORD(v64) = (v29 | 1) + 2;
  }
  re::BucketArray<re::LightContextBuilder::RealWorldProxyLightBucket,4ul>::deinit((uint64_t)&v57);
  if ((void)v57)
  {
    int v30 = v58;
    if ((v58 & 1) == 0)
    {
      (*(void (**)(void))(*(void *)v57 + 40))();
      int v30 = v58;
    }
    long long v57 = 0uLL;
    LODWORD(v5re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = (v30 | 1) + 2;
  }
  re::BucketArray<re::LightContextBuilder::DirectionalLightBucket,4ul>::deinit((uint64_t)&v56[1]);
  if (v56[1])
  {
    int v31 = v56[3];
    if ((v56[3] & 1) == 0)
    {
      (*(void (**)(void))(*(void *)v56[1] + 40))();
      int v31 = v56[3];
    }
    v56[1] = 0;
    float32x4_t v56[2] = 0;
    LODWORD(v56[3]) = (v31 | 1) + 2;
  }
  re::BucketArray<re::LightContextBuilder::AmbientLightBucket,4ul>::deinit((uint64_t)&v53);
  if ((void)v53 && (v54 & 1) == 0) {
    (*(void (**)(void))(*(void *)v53 + 40))();
  }
  unint64_t v32 = *(void *)(v26 + 208);
  unint64_t v21 = *(void *)(v26 + 176);
  if (v32 + 1 > 4 * v21)
  {
    re::BucketArray<re::LightContextBuilder::RealWorldProxyLightBucket,4ul>::setBucketsCapacity((void *)(v26 + 168), (v32 + 4) >> 2);
    unint64_t v21 = *(void *)(v26 + 176);
  }
  unint64_t v20 = v32 >> 2;
  if (v21 <= v32 >> 2) {
    goto LABEL_71;
  }
  uint64_t v33 = *(void *)(v26 + 200);
  if (*(_DWORD *)(v26 + 184)) {
    uint64_t v33 = v26 + 192;
  }
  uint64_t v34 = *(void *)(v33 + 8 * v20);
  ++*(void *)(v26 + 208);
  ++*(_DWORD *)(v26 + 216);
  uint64_t v35 = v34 + 120 * (v32 & 3);
  *(void *)(v35 + 32) = 0;
  *(_DWORD *)(v35 + 24) = 0;
  *(void *)(v35 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  *(void *)(v35 + 16) = 0;
  *(void *)uint64_t v35 = 0;
  *(void *)uint64_t v35 = v41;
  uint64_t v41 = 0;
  *(void *)(v35 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v42;
  uint64_t v42 = 0;
  unint64_t v36 = *(void *)(v35 + 16);
  *(void *)(v35 + 16) = v43;
  unint64_t v43 = v36;
  uint64_t v37 = *(void *)(v35 + 32);
  *(void *)(v35 + 32) = v45;
  *(void *)&long long v45 = v37;
  ++v44;
  ++*(_DWORD *)(v35 + 24);
  *(void *)(v35 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  *(void *)(v35 + 56) = 0;
  *(void *)(v35 + 40) = 0;
  *(void *)(v35 + 40) = *((void *)&v45 + 1);
  *((void *)&v45 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
  *(void *)(v35 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v46;
  *(void *)&long long v46 = 0;
  uint64_t v38 = *(void *)(v35 + 56);
  *(void *)(v35 + 56) = *((void *)&v46 + 1);
  *((void *)&v46 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = v38;
  *(void *)(v35 + 64) = v47;
  *(void *)(v35 + 72) = 0;
  *(void *)(v35 + 80) = 0;
  *(void *)(v35 + 8re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  *(void *)(v35 + 72) = v48;
  *(void *)&long long v48 = 0;
  *(void *)(v35 + 80) = *((void *)&v48 + 1);
  *((void *)&v48 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
  uint64_t v39 = *(void *)(v35 + 88);
  *(void *)(v35 + 8re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v49;
  *(void *)&long long v49 = v39;
  *(void *)(v35 + 96) = 0;
  *(void *)(v35 + 104) = 0;
  *(void *)(v35 + 112) = 0;
  *(void *)(v35 + 96) = *((void *)&v49 + 1);
  *((void *)&v49 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
  *(void *)(v35 + 104) = v50;
  *(void *)&long long v50 = 0;
  uint64_t v40 = *(void *)(v35 + 112);
  *(void *)(v35 + 112) = *((void *)&v50 + 1);
  *((void *)&v50 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = v40;
  *(void *)(v26 + 336) = v17;
  *(unsigned char *)(v5 + 2992) = 0;
  if (*((void *)&v49 + 1)) {
    *((void *)&v49 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
  }
  if ((void)v48)
  {
    if (*((void *)&v48 + 1))
    {
      (*(void (**)(void))(*(void *)v48 + 40))();
      *((void *)&v48 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
      *(void *)&long long v49 = 0;
    }
    *(void *)&long long v48 = 0;
  }
  if (*((void *)&v45 + 1))
  {
    if ((void)v46)
    {
      (*(void (**)(void))(**((void **)&v45 + 1) + 40))();
      long long v46 = 0uLL;
    }
    *((void *)&v45 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
  }
  return re::DynamicArray<re::SpotLightInfo>::deinit((uint64_t)&v41);
}

uint64_t re::LightContextBuilder::addPointLights(uint64_t result, __int16 a2, uint64_t a3)
{
  uint64_t v88 = *MEMORY[0x263EF8340];
  __int16 v48 = a2;
  if (*(void *)(a3 + 16))
  {
    uint64_t v3 = result;
    uint64_t v38 = 0;
    uint64_t v39 = 0;
    int v41 = 0;
    unint64_t v40 = 0;
    long long v42 = 0u;
    long long v43 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    unint64_t v4 = (_anonymous_namespace_ *)re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)&v38, a3);
    unint64_t v5 = v40;
    *(void *)&long long v47 = v5;
    if (v5)
    {
      if (v5 >= 0x555555555555556)
      {
LABEL_72:
        re::internal::assertLog((re::internal *)6, v7, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 48, v5);
        _os_crash();
        __break(1u);
        goto LABEL_73;
      }
      *((void *)&v47 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = v8;
      if (!v8)
      {
LABEL_73:
        re::internal::assertLog((re::internal *)4, v9, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
        _os_crash();
        __break(1u);
        goto LABEL_74;
      }
      unint64_t v10 = v5 - 1;
      if (v5 != 1)
      {
        uint64_t v11 = 0;
        do
        {
          for (uint64_t i = 0; i != 48; i += 8)
            *(void *)((char *)v8 + i) = 0xFFFFFFFFLL;
          unint64_t v8 = (_anonymous_namespace_ *)((char *)v8 + 48);
          ++v11;
        }
        while (v11 != v10);
      }
      for (uint64_t j = 0; j != 48; j += 8)
        *(void *)((char *)v8 + j) = 0xFFFFFFFFLL;
      *((void *)&v45 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = v5;
      *(void *)&long long v46 = v14;
      if (!v14)
      {
LABEL_74:
        re::internal::assertLog((re::internal *)4, v15, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
        _os_crash();
        __break(1u);
      }
      if (v5 != 1)
      {
        do
        {
          *(void *)unint64_t v14 = 0xFFFFFFFFLL;
          unint64_t v14 = (_anonymous_namespace_ *)((char *)v14 + 8);
          --v10;
        }
        while (v10);
      }
      *(void *)unint64_t v14 = 0xFFFFFFFFLL;
    }
    else
    {
    }
    if (v5)
    {
      uint64_t v16 = 0;
      unint64_t v17 = 0;
      while (1)
      {
        unint64_t v18 = v40;
        if (v40 <= v17) {
          break;
        }
        uint64_t v19 = v42;
        if (*(unsigned char *)(v42 + 224 * v17 + 215))
        {
          unint64_t v18 = v47;
          if ((unint64_t)v47 <= v17) {
            goto LABEL_69;
          }
          uint64_t v20 = 0;
          unint64_t v21 = *(re::TextureAtlas **)(v3 + 2984);
          uint64_t v22 = *((void *)&v47 + 1) + v16;
          do
          {
            *(void *)(v22 + v20) = re::TextureAtlas::requestTile(v21, 256, 256, 2.0);
            v20 += 8;
          }
          while (v20 != 48);
        }
        if (*(unsigned char *)(v19 + 224 * v17 + 214))
        {
          unint64_t v18 = *((void *)&v45 + 1);
          if (*((void *)&v45 + 1) <= v17) {
            goto LABEL_70;
          }
          uint64_t v23 = v46;
          *(void *)(v23 + 8 * v17) = re::TextureAtlas::requestTile((re::TextureAtlas *)(*(void *)(v3 + 2984) + 96), 512, 256, 2.0);
        }
        ++v17;
        v16 += 48;
        if (v17 == v5) {
          goto LABEL_28;
        }
      }
      uint64_t v49 = 0;
      memset(v53, 0, 32);
      long long v51 = 0u;
      long long v52 = 0u;
      long long v50 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v80 = 136315906;
      uint64_t v81 = "operator[]";
      __int16 v82 = 1024;
      int v83 = 789;
      __int16 v84 = 2048;
      unint64_t v85 = v17;
      __int16 v86 = 2048;
      unint64_t v87 = v18;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_69:
      uint64_t v49 = 0;
      memset(v53, 0, 32);
      long long v51 = 0u;
      long long v52 = 0u;
      long long v50 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v80 = 136315906;
      uint64_t v81 = "operator[]";
      __int16 v82 = 1024;
      int v83 = 468;
      __int16 v84 = 2048;
      unint64_t v85 = v17;
      __int16 v86 = 2048;
      unint64_t v87 = v18;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_70:
      uint64_t v49 = 0;
      memset(v53, 0, 32);
      long long v51 = 0u;
      long long v52 = 0u;
      long long v50 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v80 = 136315906;
      uint64_t v81 = "operator[]";
      __int16 v82 = 1024;
      int v83 = 468;
      __int16 v84 = 2048;
      unint64_t v85 = v17;
      __int16 v86 = 2048;
      unint64_t v87 = v18;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_71;
    }
LABEL_28:
    long long v51 = 1uLL;
    long long v50 = 0u;
    long long v52 = 0uLL;
    v53[3] = 1;
    memset(v53, 0, 24);
    memset(&v53[4], 0, 32);
    uint64_t v55 = 1;
    long long v54 = 0u;
    uint64_t v56 = 0;
    uint64_t v57 = 0;
    uint64_t v58 = 0;
    uint64_t v61 = 1;
    long long v60 = 0u;
    uint64_t v59 = 0;
    uint64_t v62 = 0;
    uint64_t v63 = 0;
    uint64_t v64 = 0;
    uint64_t v67 = 1;
    long long v66 = 0u;
    uint64_t v65 = 0;
    uint64_t v68 = 0;
    uint64_t v69 = 0;
    uint64_t v70 = 0;
    uint64_t v71 = 0;
    int v74 = 0;
    long long v72 = 0u;
    int v73 = 1;
    uint64_t v76 = 0;
    uint64_t v78 = 0;
    uint64_t v75 = 0;
    uint64_t v77 = 0;
    uint64_t v79 = 0;
    unint64_t v5 = re::SmallHashTable<unsigned short,re::LightContextBuilder::LightArrays,8ul,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true>::add(v3 + 88, &v48, (uint64_t)&v50);
    re::BucketArray<re::LightContextBuilder::RectAreaLightBucket,4ul>::deinit((uint64_t)&v72);
    if ((void)v72)
    {
      int v24 = v73;
      if ((v73 & 1) == 0)
      {
        (*(void (**)(void))(*(void *)v72 + 40))();
        int v24 = v73;
      }
      long long v72 = 0uLL;
      int v73 = (v24 | 1) + 2;
    }
    re::BucketArray<re::LightContextBuilder::PointLightBucket,4ul>::deinit((uint64_t)&v66);
    if ((void)v66)
    {
      int v25 = v67;
      if ((v67 & 1) == 0)
      {
        (*(void (**)(void))(*(void *)v66 + 40))();
        int v25 = v67;
      }
      long long v66 = 0uLL;
      LODWORD(v67) = (v25 | 1) + 2;
    }
    re::BucketArray<re::LightContextBuilder::SpotLightBucket,4ul>::deinit((uint64_t)&v60);
    if ((void)v60)
    {
      int v26 = v61;
      if ((v61 & 1) == 0)
      {
        (*(void (**)(void))(*(void *)v60 + 40))();
        int v26 = v61;
      }
      long long v60 = 0uLL;
      LODWORD(v6re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = (v26 | 1) + 2;
    }
    re::BucketArray<re::LightContextBuilder::RealWorldProxyLightBucket,4ul>::deinit((uint64_t)&v54);
    if ((void)v54)
    {
      int v27 = v55;
      if ((v55 & 1) == 0)
      {
        (*(void (**)(void))(*(void *)v54 + 40))();
        int v27 = v55;
      }
      long long v54 = 0uLL;
      LODWORD(v55) = (v27 | 1) + 2;
    }
    re::BucketArray<re::LightContextBuilder::DirectionalLightBucket,4ul>::deinit((uint64_t)&v53[1]);
    if (v53[1])
    {
      int v28 = v53[3];
      if ((v53[3] & 1) == 0)
      {
        (*(void (**)(void))(*(void *)v53[1] + 40))();
        int v28 = v53[3];
      }
      v53[1] = 0;
      v53[2] = 0;
      LODWORD(v53[3]) = (v28 | 1) + 2;
    }
    re::BucketArray<re::LightContextBuilder::AmbientLightBucket,4ul>::deinit((uint64_t)&v50);
    if ((void)v50 && (v51 & 1) == 0) {
      (*(void (**)(void))(*(void *)v50 + 40))();
    }
    unint64_t v29 = *(void *)(v5 + 264);
    unint64_t v18 = *(void *)(v5 + 232);
    if (v29 + 1 > 4 * v18)
    {
      re::BucketArray<re::LightContextBuilder::RealWorldProxyLightBucket,4ul>::setBucketsCapacity((void *)(v5 + 224), (v29 + 4) >> 2);
      unint64_t v18 = *(void *)(v5 + 232);
    }
    unint64_t v17 = v29 >> 2;
    if (v18 <= v29 >> 2)
    {
LABEL_71:
      uint64_t v49 = 0;
      memset(v53, 0, 32);
      long long v51 = 0u;
      long long v52 = 0u;
      long long v50 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v80 = 136315906;
      uint64_t v81 = "operator[]";
      __int16 v82 = 1024;
      int v83 = 858;
      __int16 v84 = 2048;
      unint64_t v85 = v17;
      __int16 v86 = 2048;
      unint64_t v87 = v18;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_72;
    }
    unint64_t v30 = *(void *)(v5 + 256);
    if (*(_DWORD *)(v5 + 240)) {
      unint64_t v30 = v5 + 248;
    }
    uint64_t v31 = *(void *)(v30 + 8 * v17);
    ++*(void *)(v5 + 264);
    ++*(_DWORD *)(v5 + 272);
    uint64_t v32 = v31 + 120 * (v29 & 3);
    *(void *)(v32 + 32) = 0;
    *(_DWORD *)(v32 + 24) = 0;
    *(void *)(v32 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
    *(void *)(v32 + 16) = 0;
    *(void *)uint64_t v32 = 0;
    *(void *)uint64_t v32 = v38;
    uint64_t v38 = 0;
    *(void *)(v32 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v39;
    uint64_t v39 = 0;
    unint64_t v33 = *(void *)(v32 + 16);
    *(void *)(v32 + 16) = v40;
    unint64_t v40 = v33;
    uint64_t v34 = *(void *)(v32 + 32);
    *(void *)(v32 + 32) = v42;
    *(void *)&long long v42 = v34;
    ++v41;
    ++*(_DWORD *)(v32 + 24);
    *(void *)(v32 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
    *(void *)(v32 + 56) = 0;
    *(void *)(v32 + 40) = 0;
    *(void *)(v32 + 40) = *((void *)&v42 + 1);
    *((void *)&v42 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
    *(void *)(v32 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v43;
    *(void *)&long long v43 = 0;
    uint64_t v35 = *(void *)(v32 + 56);
    *(void *)(v32 + 56) = *((void *)&v43 + 1);
    *((void *)&v43 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = v35;
    *(void *)(v32 + 64) = v44;
    *(void *)(v32 + 72) = 0;
    *(void *)(v32 + 80) = 0;
    *(void *)(v32 + 8re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
    *(void *)(v32 + 72) = v45;
    *(void *)&long long v45 = 0;
    *(void *)(v32 + 80) = *((void *)&v45 + 1);
    *((void *)&v45 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
    uint64_t v36 = *(void *)(v32 + 88);
    *(void *)(v32 + 8re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v46;
    *(void *)&long long v46 = v36;
    *(void *)(v32 + 96) = 0;
    *(void *)(v32 + 104) = 0;
    *(void *)(v32 + 112) = 0;
    *(void *)(v32 + 96) = *((void *)&v46 + 1);
    *((void *)&v46 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
    *(void *)(v32 + 104) = v47;
    *(void *)&long long v47 = 0;
    uint64_t v37 = *(void *)(v32 + 112);
    *(void *)(v32 + 112) = *((void *)&v47 + 1);
    *((void *)&v47 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = v37;
    *(unsigned char *)(v3 + 2992) = 0;
    if (*((void *)&v46 + 1)) {
      *((void *)&v46 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
    }
    if ((void)v45)
    {
      if (*((void *)&v45 + 1))
      {
        (*(void (**)(void))(*(void *)v45 + 40))();
        *((void *)&v45 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
        *(void *)&long long v46 = 0;
      }
      *(void *)&long long v45 = 0;
    }
    if (*((void *)&v42 + 1))
    {
      if ((void)v43)
      {
        (*(void (**)(void))(**((void **)&v42 + 1) + 40))();
        long long v43 = 0uLL;
      }
      *((void *)&v42 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
    }
    return re::DynamicArray<re::PointLightInfo>::deinit((uint64_t)&v38);
  }
  return result;
}

uint64_t re::LightContextBuilder::addRectAreaLights(uint64_t result, __int16 a2, uint64_t a3)
{
  uint64_t v63 = *MEMORY[0x263EF8340];
  __int16 v20 = a2;
  if (*(void *)(a3 + 16))
  {
    uint64_t v3 = result;
    uint64_t v19 = 0;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v15 = 0;
    int v18 = 0;
    re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)&v15, a3);
    memset(v25, 0, 24);
    long long v22 = 0u;
    long long v23 = 1uLL;
    long long v24 = 0uLL;
    *((void *)&v25[1] + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 1;
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    uint64_t v31 = 1;
    long long v30 = 0u;
    uint64_t v29 = 0;
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    uint64_t v37 = 1;
    long long v36 = 0u;
    uint64_t v35 = 0;
    uint64_t v38 = 0;
    uint64_t v39 = 0;
    uint64_t v40 = 0;
    uint64_t v43 = 1;
    long long v42 = 0u;
    uint64_t v41 = 0;
    uint64_t v44 = 0;
    uint64_t v45 = 0;
    uint64_t v46 = 0;
    uint64_t v47 = 0;
    uint64_t v49 = 1;
    long long v48 = 0u;
    uint64_t v52 = 0;
    uint64_t v51 = 0;
    uint64_t v53 = 0;
    uint64_t v50 = 0;
    uint64_t v54 = 0;
    uint64_t v4 = re::SmallHashTable<unsigned short,re::LightContextBuilder::LightArrays,8ul,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true>::add(v3 + 88, &v20, (uint64_t)&v22);
    re::BucketArray<re::LightContextBuilder::RectAreaLightBucket,4ul>::deinit((uint64_t)&v48);
    if ((void)v48)
    {
      int v5 = v49;
      if ((v49 & 1) == 0)
      {
        (*(void (**)(void))(*(void *)v48 + 40))();
        int v5 = v49;
      }
      long long v48 = 0uLL;
      LODWORD(v49) = (v5 | 1) + 2;
    }
    re::BucketArray<re::LightContextBuilder::PointLightBucket,4ul>::deinit((uint64_t)&v42);
    if ((void)v42)
    {
      int v6 = v43;
      if ((v43 & 1) == 0)
      {
        (*(void (**)(void))(*(void *)v42 + 40))();
        int v6 = v43;
      }
      long long v42 = 0uLL;
      LODWORD(v43) = (v6 | 1) + 2;
    }
    re::BucketArray<re::LightContextBuilder::SpotLightBucket,4ul>::deinit((uint64_t)&v36);
    if ((void)v36)
    {
      int v7 = v37;
      if ((v37 & 1) == 0)
      {
        (*(void (**)(void))(*(void *)v36 + 40))();
        int v7 = v37;
      }
      long long v36 = 0uLL;
      LODWORD(v37) = (v7 | 1) + 2;
    }
    re::BucketArray<re::LightContextBuilder::RealWorldProxyLightBucket,4ul>::deinit((uint64_t)&v30);
    if ((void)v30)
    {
      int v8 = v31;
      if ((v31 & 1) == 0)
      {
        (*(void (**)(void))(*(void *)v30 + 40))();
        int v8 = v31;
      }
      long long v30 = 0uLL;
      LODWORD(v3re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = (v8 | 1) + 2;
    }
    re::BucketArray<re::LightContextBuilder::DirectionalLightBucket,4ul>::deinit((uint64_t)v25 + 8);
    if (*((void *)&v25[0] + 1))
    {
      int v9 = DWORD2(v25[1]);
      if ((BYTE8(v25[1]) & 1) == 0)
      {
        (*(void (**)(void))(**((void **)&v25[0] + 1) + 40))();
        int v9 = DWORD2(v25[1]);
      }
      *((void *)&v25[0] + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
      *(void *)&v25[1] = 0;
      DWORD2(v25[1]) = (v9 | 1) + 2;
    }
    re::BucketArray<re::LightContextBuilder::AmbientLightBucket,4ul>::deinit((uint64_t)&v22);
    if ((void)v22 && (v23 & 1) == 0) {
      (*(void (**)(void))(*(void *)v22 + 40))();
    }
    unint64_t v10 = *(void *)(v4 + 320);
    unint64_t v11 = *(void *)(v4 + 288);
    if (v10 + 1 > 4 * v11)
    {
      re::BucketArray<re::MipmapGenerationContext,4ul>::setBucketsCapacity((void *)(v4 + 280), (v10 + 4) >> 2);
      unint64_t v11 = *(void *)(v4 + 288);
    }
    if (v11 <= v10 >> 2)
    {
      uint64_t v21 = 0;
      memset(v25, 0, sizeof(v25));
      long long v23 = 0u;
      long long v24 = 0u;
      long long v22 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v55 = 136315906;
      uint64_t v56 = "operator[]";
      __int16 v57 = 1024;
      int v58 = 858;
      __int16 v59 = 2048;
      unint64_t v60 = v10 >> 2;
      __int16 v61 = 2048;
      unint64_t v62 = v11;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v12 = *(void *)(v4 + 312);
    if (*(_DWORD *)(v4 + 296)) {
      uint64_t v12 = v4 + 304;
    }
    uint64_t v13 = *(void *)(v12 + 8 * (v10 >> 2));
    ++*(void *)(v4 + 320);
    ++*(_DWORD *)(v4 + 328);
    uint64_t v14 = v13 + 40 * (v10 & 3);
    *(void *)(v14 + 32) = 0;
    *(_DWORD *)(v14 + 24) = 0;
    *(void *)(v14 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
    *(void *)(v14 + 16) = 0;
    *(void *)uint64_t v14 = 0;
    *(void *)uint64_t v14 = v15;
    uint64_t v15 = 0;
    *(void *)(v14 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v16;
    uint64_t v16 = 0;
    *(void *)(v14 + 16) = v17;
    uint64_t v17 = 0;
    *(void *)(v14 + 32) = v19;
    uint64_t v19 = 0;
    ++v18;
    ++*(_DWORD *)(v14 + 24);
    *(unsigned char *)(v3 + 2992) = 0;
    return re::DynamicArray<re::RectAreaLightInfo>::deinit((uint64_t)&v15);
  }
  return result;
}

uint64_t re::LightContextBuilder::computeSceneBoundingBoxCorners(uint64_t result, uint64_t a2, uint64_t a3, int a4, char a5, double a6, double a7, double a8, __n128 a9)
{
  uint64_t v44 = result;
  uint64_t v59 = *MEMORY[0x263EF8340];
  uint64_t v45 = *(void *)(a3 + 40);
  if (v45)
  {
    unint64_t v9 = 0;
    uint64_t v10 = a2 + 72;
    float32x4_t v11 = (float32x4_t)vdupq_n_s32(0x7F800000u);
    uint64_t v12 = a2 + 8;
    v13.i64[0] = 0x7F0000007FLL;
    v13.i64[1] = 0x7F0000007FLL;
    while (1)
    {
      float32x4_t v51 = v13;
      float32x4_t v53 = v11;
      unint64_t v47 = v9;
      uint64_t result = re::BucketArray<re::MeshSceneCollection,16ul>::operator[](a3, v9);
      uint64_t v14 = *(void *)(result + 16);
      if (v14) {
        break;
      }
      float32x4_t v13 = v51;
      float32x4_t v11 = v53;
LABEL_24:
      unint64_t v9 = v47 + 1;
      if (v47 + 1 == v45) {
        goto LABEL_27;
      }
    }
    uint64_t v15 = *(float32x4_t **)(result + 32);
    uint64_t v50 = &v15[41 * v14];
    float32x4_t v13 = v51;
    float32x4_t v11 = v53;
    while (1)
    {
      if (a5)
      {
        if (v15[40].i8[1]) {
          goto LABEL_9;
        }
      }
      else if (v15[26].u16[4] == a4)
      {
LABEL_9:
        uint64_t v16 = v15[1].i64[1];
        long long v55 = *(_OWORD *)v16;
        if (v15->i64[1])
        {
          unint64_t v17 = 0;
          do
          {
            float32x4_t v52 = v13;
            float32x4_t v54 = v11;
            uint64_t result = re::DataArray<re::MeshInstance>::tryGet(v10, *(void *)(v15->i64[0] + 8 * v17));
            if (result
              && (int v18 = (_OWORD *)result,
                  (uint64_t result = re::DataArray<re::MeshModel>::tryGet(v12, *(void *)(result + 16))) != 0))
            {
              unint64_t v19 = *(void *)(v16 + 24);
              if (v19 <= v17)
              {
                memset(v56, 0, sizeof(v56));
                os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                *(_DWORD *)__int16 v57 = 136315906;
                *(void *)&v57[4] = "operator[]";
                *(_WORD *)&v57[12] = 1024;
                *(_DWORD *)&v57[14] = 866;
                *(_WORD *)&v57[18] = 2048;
                *(void *)&v57[20] = v17;
                *(_WORD *)&v57[28] = 2048;
                *(void *)&v57[30] = v19;
                _os_log_send_and_compose_impl();
                uint64_t result = _os_crash_msg();
                __break(1u);
                goto LABEL_37;
              }
              uint64_t v20 = v16 + 40;
              if ((*(unsigned char *)(v16 + 32) & 1) == 0) {
                uint64_t v20 = *(void *)(v16 + 48);
              }
              unint64_t v21 = 0;
              unint64_t v22 = *(unsigned int *)(v20 + 4 * v17);
              long long v23 = v18[3];
              long long v24 = v18[4];
              long long v25 = v18[5];
              uint64_t v26 = *(void *)((unint64_t)&v55 & 0xFFFFFFFFFFFFFFF7 | (8 * (v22 & 1)));
              unint64_t v27 = v22 >> 1;
              float32x4_t v28 = v15[3];
              float32x4_t v29 = v15[4];
              float32x4_t v30 = v15[5];
              float32x4_t v31 = v15[6];
              *(_OWORD *)__int16 v57 = v18[2];
              *(_OWORD *)&v57[16] = v23;
              *(_OWORD *)&v57[32] = v24;
              long long v58 = v25;
              do
              {
                v56[v21 / 0x10] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v28, COERCE_FLOAT(*(_OWORD *)&v57[v21])), v29, *(float32x2_t *)&v57[v21], 1), v30, *(float32x4_t *)&v57[v21], 2), v31, *(float32x4_t *)&v57[v21], 3);
                v21 += 16;
              }
              while (v21 != 64);
              uint64_t result = (uint64_t)re::AABB::transform((float32x4_t *)(v26 + 32 * v27), v56, (uint64_t)v57);
              float32x4_t v33 = v52;
              float32x4_t v32 = v54;
              v32.i32[3] = 0;
              float32x4_t v34 = *(float32x4_t *)v57;
              float32x4_t v35 = *(float32x4_t *)&v57[16];
              v34.i32[3] = 0;
              float32x4_t v11 = vminnmq_f32(v32, v34);
              v33.i32[3] = 0;
              v35.i32[3] = 0;
              float32x4_t v13 = vmaxnmq_f32(v33, v35);
            }
            else
            {
              float32x4_t v13 = v52;
              float32x4_t v11 = v54;
            }
          }
          while (++v17 < v15->i64[1]);
        }
      }
      v15 += 41;
      if (v15 == v50) {
        goto LABEL_24;
      }
    }
  }
  float32x4_t v11 = (float32x4_t)vdupq_n_s32(0x7F800000u);
  v13.i64[0] = 0x7F0000007FLL;
  v13.i64[1] = 0x7F0000007FLL;
LABEL_27:
  uint32x4_t v36 = (uint32x4_t)vcgtq_f32(v11, v13);
  v36.i32[3] = v36.i32[2];
  if ((vmaxvq_u32(v36) & 0x80000000) != 0)
  {
LABEL_37:
    for (uint64_t i = 0; i != 256; i += 32)
    {
      uint64_t v43 = v44 + i;
      *(void *)uint64_t v43 = 0;
      *(void *)(v43 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(unsigned char *)(v43 + 16) = 0;
    }
  }
  else
  {
    for (uint64_t j = 0; j != 256; j += 32)
    {
      uint64_t v38 = v44 + j;
      *(void *)uint64_t v38 = 0;
      *(void *)(v38 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(unsigned char *)(v38 + 16) = 0;
    }
    uint64_t v39 = 0;
    uint64_t v40 = (__n128 *)(v44 + 16);
    do
    {
      a9.n128_u64[0] = (unint64_t)vbsl_s8((int8x8_t)vceqz_s32((int32x2_t)vand_s8((int8x8_t)vdup_n_s32(v39), (int8x8_t)0x200000001)), *(int8x8_t *)v11.f32, *(int8x8_t *)v13.f32);
      if ((v39 & 4) != 0) {
        float v41 = v13.f32[2];
      }
      else {
        float v41 = v11.f32[2];
      }
      a9.n128_f32[2] = v41;
      v40[-1] = a9;
      v40->n128_u8[0] = 0;
      v40 += 2;
      ++v39;
    }
    while (v39 != 8);
  }
  return result;
}

void re::LightContextBuilder::calculateDirectionalLightBoundsWithCameraView(float32x4_t *a1, _OWORD *a2, float32x4_t *a3, float32x4_t *a4, int a5, int a6, char a7, float a8)
{
  long long v16 = a2[5];
  long long v99 = a2[4];
  long long v100 = v16;
  long long v17 = a2[7];
  long long v101 = a2[6];
  long long v102 = v17;
  BYTE12(v100) = 0;
  _ZF = v17 == 1;
  float v19 = 1.0;
  if (!_ZF) {
    float v19 = 0.0;
  }
  float v94 = v19;
  re::Projection::computeMatrix4x4F((re::Projection *)&v99, (uint64_t)&v95);
  v103.columns[2] = (simd_float4)v97;
  v103.columns[3] = (simd_float4)v98;
  v103.columns[0] = (simd_float4)v95;
  v103.columns[1] = (simd_float4)v96;
  simd_float4x4 v104 = __invert_f4(v103);
  float32x4_t v90 = (float32x4_t)v104.columns[1];
  float32x4_t v91 = (float32x4_t)v104.columns[0];
  float32x4_t v92 = (float32x4_t)v104.columns[3];
  float32x4_t v93 = (float32x4_t)v104.columns[2];
  re::RenderCamera::computeLocalTransform((re::RenderCamera *)(a2 + 2), (uint64_t)&v95);
  float32x4_t v20 = vaddq_f32(v92, vmlaq_n_f32(vsubq_f32(v90, v91), v93, v94));
  float32x4_t v21 = vdivq_f32(v20, (float32x4_t)vdupq_laneq_s32((int32x4_t)v20, 3));
  float32x4_t v22 = vmulq_f32(v21, (float32x4_t)xmmword_234382760);
  float32x4_t v23 = vaddq_f32(vmulq_n_f32(v21, (float)(a8 + 0.0)/ vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v22, 2), vaddq_f32(v22, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v22.f32, 1))).f32[0]), (float32x4_t)0);
  float32x4_t v24 = vaddq_f32(v92, vmlaq_n_f32(vaddq_f32(v90, v91), v93, v94));
  float32x4_t v25 = vdivq_f32(v24, (float32x4_t)vdupq_laneq_s32((int32x4_t)v24, 3));
  float32x4_t v26 = vmulq_f32(v25, (float32x4_t)xmmword_234382760);
  float32x4_t v27 = vaddq_f32(vmulq_n_f32(v25, (float)(a8 + 0.0)/ vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v26, 2), vaddq_f32(v26, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v26.f32, 1))).f32[0]), (float32x4_t)0);
  __asm { FMOV            V6.4S, #-1.0 }
  float32x4_t v32 = vaddq_f32(v92, vmlaq_n_f32(vmlaq_f32(vnegq_f32(v91), _Q6, v90), v93, v94));
  float32x4_t v33 = vdivq_f32(v32, (float32x4_t)vdupq_laneq_s32((int32x4_t)v32, 3));
  float32x4_t v34 = vmulq_f32(v33, (float32x4_t)xmmword_234382760);
  float32x4_t v35 = vaddq_f32(vmulq_n_f32(v33, (float)(a8 + 0.0)/ vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v34, 2), vaddq_f32(v34, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v34.f32, 1))).f32[0]), (float32x4_t)0);
  float32x4_t v36 = vaddq_f32(v92, vmlaq_n_f32(vmlaq_f32(v91, _Q6, v90), v93, v94));
  float32x4_t v37 = vdivq_f32(v36, (float32x4_t)vdupq_laneq_s32((int32x4_t)v36, 3));
  float32x4_t v38 = vmulq_f32(v37, (float32x4_t)xmmword_234382760);
  float32x4_t v39 = vaddq_f32(vmulq_n_f32(v37, (float)(a8 + 0.0)/ vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v38, 2), vaddq_f32(v38, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v38.f32, 1))).f32[0]), (float32x4_t)0);
  v40.i64[0] = 0x3F0000003F000000;
  v40.i64[1] = 0x3F0000003F000000;
  float32x4_t v41 = vmulq_f32(vaddq_f32(vmulq_f32(vaddq_f32(v25, v33), v40), vmulq_f32(vaddq_f32(v27, v35), v40)), v40);
  if (a5)
  {
    if (a6)
    {
      float32x4_t v42 = vsubq_f32(v27, v41);
      float v43 = v42.f32[1];
      if (v42.f32[0] >= v42.f32[1]) {
        float v43 = v42.f32[0];
      }
      v42.i32[0] = v42.i32[2];
      if (v43 >= v42.f32[2]) {
        v42.f32[0] = v43;
      }
    }
    else
    {
      float32x4_t v54 = vsubq_f32(v39, v21);
      float32x4_t v55 = vmulq_f32(v54, v54);
      float v56 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v55, 2), vaddq_f32(v55, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v55.f32, 1))).f32[0]);
      float32x4_t v57 = vsubq_f32(v35, v25);
      float32x4_t v58 = vmulq_f32(v57, v57);
      float v59 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v58, 2), vaddq_f32(v58, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v58.f32, 1))).f32[0]);
      float32x4_t v60 = vsubq_f32(v27, v33);
      float32x4_t v61 = vmulq_f32(v60, v60);
      float v62 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v61, 2), vaddq_f32(v61, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v61.f32, 1))).f32[0]);
      float32x4_t v63 = vsubq_f32(v23, v37);
      float32x4_t v64 = vmulq_f32(v63, v63);
      float v65 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v64, 2), vaddq_f32(v64, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v64.f32, 1))).f32[0]);
      if (v56 < v59) {
        float v56 = v59;
      }
      if (v62 < v56) {
        float v62 = v56;
      }
      if (v65 < v62) {
        float v65 = v62;
      }
      v42.f32[0] = v65 * 0.5;
    }
  }
  else if (a7)
  {
    float32x4_t v44 = vsubq_f32(v39, v21);
    float32x4_t v45 = vmulq_f32(v44, v44);
    float32x4_t v46 = vsubq_f32(v35, v25);
    float32x4_t v47 = vmulq_f32(v46, v46);
    float v48 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v45, 2), vaddq_f32(v45, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v45.f32, 1))).f32[0]);
    float v49 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v47, 2), vaddq_f32(v47, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v47.f32, 1))).f32[0]);
    float32x4_t v50 = vsubq_f32(v27, v33);
    float32x4_t v51 = vmulq_f32(v50, v50);
    float32x4_t v52 = vsubq_f32(v23, v37);
    float32x4_t v42 = vmulq_f32(v52, v52);
    float v53 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v51, 2), vaddq_f32(v51, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v51.f32, 1))).f32[0]);
    v42.f32[0] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v42, 2), vaddq_f32(v42, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v42.f32, 1))).f32[0]);
    if (v48 < v49) {
      float v48 = v49;
    }
    if (v53 < v48) {
      float v53 = v48;
    }
    if (v42.f32[0] < v53) {
      v42.f32[0] = v53;
    }
  }
  else
  {
    float32x4_t v66 = vsubq_f32(v39, v41);
    float32x4_t v67 = vmulq_f32(v66, v66);
    LODWORD(v6re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v67, 2), vaddq_f32(v67, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v67.f32, 1))).u32[0];
    float32x4_t v69 = vsubq_f32(v35, v41);
    float32x4_t v70 = vmulq_f32(v69, v69);
    float32x4_t v71 = vsubq_f32(v27, v41);
    float32x4_t v72 = vmulq_f32(v71, v71);
    LODWORD(v73) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v70, 2), vaddq_f32(v70, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v70.f32, 1))).u32[0];
    float32x4_t v74 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v72, 2), vaddq_f32(v72, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v72.f32, 1)));
    float32x4_t v75 = vsubq_f32(v23, v41);
    float32x4_t v76 = vmulq_f32(v75, v75);
    float32x4_t v42 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v76, 2), vaddq_f32(v76, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v76.f32, 1)));
    if ((vmovn_s32(vcgtq_f32(v42, v74)).u8[0] & 1) == 0) {
      v42.f32[0] = v74.f32[0];
    }
    if (v73 >= v42.f32[0]) {
      v42.f32[0] = v73;
    }
    if (v68 >= v42.f32[0]) {
      v42.f32[0] = v68;
    }
    v42.f32[0] = sqrtf(v42.f32[0]);
  }
  float32x4_t v77 = vaddq_f32(v98, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v95, v41.f32[0]), v96, *(float32x2_t *)v41.f32, 1), v97, v41, 2));
  float32x4_t v78 = vmulq_f32(*a3, *a3);
  if (fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v78, 2), vaddq_f32(v78, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v78.f32, 1))).f32[0]) >= 1.0e-10)
  {
    uint64_t v81 = 0;
    float32x4_t v82 = a4[4];
    int32x4_t v83 = (int32x4_t)vmulq_f32(v82, v82);
    v83.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v83, 2), vadd_f32(*(float32x2_t *)v83.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v83.i8, 1))).u32[0];
    float32x2_t v84 = vrsqrte_f32((float32x2_t)v83.u32[0]);
    float32x2_t v85 = vmul_f32(v84, vrsqrts_f32((float32x2_t)v83.u32[0], vmul_f32(v84, v84)));
    LODWORD(v86) = vmul_f32(v85, vrsqrts_f32((float32x2_t)v83.u32[0], vmul_f32(v85, v85))).u32[0];
    float v80 = INFINITY;
    float v79 = -INFINITY;
    float32x4_t v87 = vnegq_f32(vmulq_n_f32(v82, v86));
    do
    {
      float32x4_t v88 = vmulq_f32(vsubq_f32(a3[v81], v77), v87);
      float v89 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v88, 2), vaddq_f32(v88, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v88.f32, 1))).f32[0];
      if (v89 > v79) {
        float v79 = v89;
      }
      if (v89 < v80) {
        float v80 = v89;
      }
      v81 += 2;
    }
    while (v81 != 16);
  }
  else
  {
    float v79 = 10.0;
    float v80 = 0.01;
  }
  *a1 = v77;
  a1[1].i32[0] = v42.i32[0];
  a1[1].f32[1] = v80;
  a1[1].f32[2] = v79;
}

void re::LightContextBuilder::buildShadowViews(re::PerFrameAllocator *,re::LightContexts &)const::$_0::operator()(re::Allocator *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, int a6, unsigned char *a7, _anonymous_namespace_ *a8)
{
  uint64_t v72 = *MEMORY[0x263EF8340];
  if (*(__int16 *)(a3 + 20) == -1)
  {
    float32x4_t v35 = *re::graphicsLogObjects(a1);
    if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
    {
      if (*(void *)(a2 + 8)) {
        uint64_t v36 = *(void *)(a2 + 16);
      }
      else {
        uint64_t v36 = a2 + 9;
      }
      *(_DWORD *)buf = 136315138;
      *(void *)&buf[4] = v36;
      _os_log_impl(&dword_233120000, v35, OS_LOG_TYPE_DEFAULT, "Failed to allocate shadow map for light %s: not enough free space in shadow map atlas.", buf, 0xCu);
    }
  }
  else
  {
    re::ShadowView::ShadowView((re::ShadowView *)buf, a1);
    if (*(void *)(a2 + 8)) {
      long long v16 = *(const char **)(a2 + 16);
    }
    else {
      long long v16 = (const char *)(a2 + 9);
    }
    re::DynamicString::DynamicString((re::DynamicString *)&v61, v16, a1);
    re::DynamicString::operator=((re::DynamicString *)buf, (re::DynamicString *)&v61);
    if (v61 && (v62 & 1) != 0) {
      (*(void (**)(void))(*(void *)v61 + 40))();
    }
    *(_OWORD *)v67[0].i8 = *(_OWORD *)a3;
    *(int32x2_t *)((char *)&v67[1] + 6) = *(int32x2_t *)(a3 + 14);
    float v18 = *(float *)(a2 + 32);
    float v17 = *(float *)(a2 + 36);
    float v19 = *(float *)(a2 + 40);
    float v20 = *(float *)(a2 + 48);
    float v21 = *(float *)(a2 + 52);
    float v22 = *(float *)(a2 + 56);
    float v23 = *(float *)(a2 + 64);
    float v24 = *(float *)(a2 + 68);
    float v25 = *(float *)(a2 + 72);
    float v26 = (float)(v18 + v21) + v25;
    if (v26 >= 0.0)
    {
      float v37 = sqrtf(v26 + 1.0);
      float v38 = v37 + v37;
      float32x2_t v39 = vrecpe_f32((float32x2_t)COERCE_UNSIGNED_INT(v37 + v37));
      float32x2_t v40 = vmul_f32(v39, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v37 + v37), v39));
      float v41 = vmul_f32(v40, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v37 + v37), v40)).f32[0];
      *(float *)&long long v31 = (float)(v22 - v24) * v41;
      float v32 = (float)(v23 - v19) * v41;
      float v33 = (float)(v17 - v20) * v41;
      float v34 = v38 * 0.25;
    }
    else if (v18 < v21 || v18 < v25)
    {
      float v42 = 1.0 - v18;
      BOOL v43 = v21 < v25;
      float v44 = sqrtf((float)(v42 - v21) + v25);
      *(float *)&unsigned int v45 = v44 + v44;
      float32x2_t v46 = vrecpe_f32((float32x2_t)v45);
      float32x2_t v47 = vmul_f32(v46, vrecps_f32((float32x2_t)v45, v46));
      float v48 = vmul_f32(v47, vrecps_f32((float32x2_t)v45, v47)).f32[0];
      float v49 = (float)(v19 + v23) * v48;
      float v50 = v22 + v24;
      float v51 = v50 * v48;
      float v52 = *(float *)&v45 * 0.25;
      float v53 = (float)(v17 - v20) * v48;
      float v54 = sqrtf(v21 + (float)(v42 - v25));
      *(float *)&unsigned int v55 = v54 + v54;
      float32x2_t v56 = vrecpe_f32((float32x2_t)v55);
      float32x2_t v57 = vmul_f32(v56, vrecps_f32((float32x2_t)v55, v56));
      v57.f32[0] = vmul_f32(v57, vrecps_f32((float32x2_t)v55, v57)).f32[0];
      float v58 = (float)(v17 + v20) * v57.f32[0];
      float v59 = *(float *)&v55 * 0.25;
      float v60 = v50 * v57.f32[0];
      float v34 = (float)(v23 - v19) * v57.f32[0];
      if (v43) {
        *(float *)&long long v31 = v49;
      }
      else {
        *(float *)&long long v31 = v58;
      }
      if (v43) {
        float v32 = v51;
      }
      else {
        float v32 = v59;
      }
      if (v43) {
        float v33 = v52;
      }
      else {
        float v33 = v60;
      }
      if (v43) {
        float v34 = v53;
      }
    }
    else
    {
      float v27 = sqrtf(v18 + (float)((float)(1.0 - v21) - v25));
      *(float *)&unsigned int v28 = v27 + v27;
      float32x2_t v29 = vrecpe_f32((float32x2_t)v28);
      float32x2_t v30 = vmul_f32(v29, vrecps_f32((float32x2_t)v28, v29));
      v30.f32[0] = vmul_f32(v30, vrecps_f32((float32x2_t)v28, v30)).f32[0];
      *(float *)&long long v31 = *(float *)&v28 * 0.25;
      float v32 = (float)(v17 + v20) * v30.f32[0];
      float v33 = (float)(v19 + v23) * v30.f32[0];
      float v34 = (float)(v22 - v24) * v30.f32[0];
    }
    *((float *)&v31 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = v32;
    *((void *)&v31 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = __PAIR64__(LODWORD(v34), LODWORD(v33));
    long long v64 = *(_OWORD *)(a2 + 80);
    long long v65 = v31;
    re::Projection::setFromMatrix4x4F((uint64_t)&v66, a4);
    *(int32x2_t *)((char *)&v67[1] + 4) = vadd_s32(*(int32x2_t *)((char *)&v67[1] + 4), (int32x2_t)0x300000003);
    v67[0] = vadd_s32(v67[0], (int32x2_t)0x500000005);
    char v71 = a5;
    if (v68 || *a7)
    {
      if (!v68 || *a7)
      {
        if (!v68) {
          BOOL v68 = *a7 != 0;
        }
        char v69 = a7[1];
      }
      else
      {
        BOOL v68 = 0;
      }
    }
    int v70 = a6;
    re::DynamicArray<re::ShadowView>::add(a8, (uint64_t)buf);
    if (*(void *)buf)
    {
      if (buf[8]) {
        (*(void (**)(void))(**(void **)buf + 40))();
      }
    }
  }
}

BOOL re::LightContextBuilder::checkIfMeshBoundingBoxIsInsideSpotLightCone(uint64_t a1, float32x4_t *a2, float32_t a3, float a4, double a5, double a6, double a7, double a8, double a9, float32x4_t a10)
{
  uint64_t v11 = 0;
  float32x4_t v13 = a2[2];
  float32x4_t v12 = a2[3];
  float32x4_t v64 = *a2;
  float32x4_t v65 = a2[1];
  float32x4_t v63 = vmulq_f32(*a2, (float32x4_t)0);
  float32x4_t v14 = vmlaq_f32(v63, (float32x4_t)0, v65);
  float32x4_t v15 = vmlaq_f32(v14, (float32x4_t)0, v13);
  __asm { FMOV            V0.4S, #-1.0 }
  float32x4_t v66 = v13;
  float32x4_t v21 = vmlaq_f32(v14, _Q0, v13);
  int32x4_t v22 = (int32x4_t)vmulq_f32(v21, v21);
  v22.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v22, 2), vadd_f32(*(float32x2_t *)v22.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v22.i8, 1))).u32[0];
  *(float32x2_t *)v13.f32 = vrsqrte_f32((float32x2_t)v22.u32[0]);
  *(float32x2_t *)v13.f32 = vmul_f32(*(float32x2_t *)v13.f32, vrsqrts_f32((float32x2_t)v22.u32[0], vmul_f32(*(float32x2_t *)v13.f32, *(float32x2_t *)v13.f32)));
  LODWORD(v23) = vmul_f32(*(float32x2_t *)v13.f32, vrsqrts_f32((float32x2_t)v22.u32[0], vmul_f32(*(float32x2_t *)v13.f32, *(float32x2_t *)v13.f32))).u32[0];
  float v24 = a4 * 0.5;
  do
  {
    float v25 = &v68[v11];
    *(void *)float v25 = 0;
    *((void *)v25 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
    unsigned char v25[16] = 0;
    v11 += 32;
  }
  while (v11 != 256);
  uint64_t v26 = 0;
  float32x4_t v27 = vaddq_f32(v12, v15);
  float32x4_t v28 = vmulq_n_f32(v21, v23);
  int8x8_t v29 = *(int8x8_t *)a1;
  int8x8_t v30 = *(int8x8_t *)(a1 + 16);
  float v31 = *(float *)(a1 + 8);
  float v32 = *(float *)(a1 + 24);
  float v33 = (float32x4_t *)&v69;
  char v34 = 1;
  char v35 = 1;
  do
  {
    *(int8x8_t *)a10.f32 = vbsl_s8((int8x8_t)vceqz_s32((int32x2_t)vand_s8((int8x8_t)vdup_n_s32(v26), (int8x8_t)0x200000001)), v29, v30);
    if ((v26 & 4) != 0) {
      *(float *)&unsigned __int32 v36 = v32;
    }
    else {
      *(float *)&unsigned __int32 v36 = v31;
    }
    a10.i32[2] = v36;
    float32x4_t v37 = vmulq_f32(v28, vsubq_f32(a10, v27));
    v33[-1] = a10;
    a10 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v37, 2), vaddq_f32(v37, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v37.f32, 1)));
    if (a10.f32[0] > a3)
    {
      char v35 = 0;
LABEL_11:
      v33->i8[0] = 1;
      goto LABEL_13;
    }
    if (a10.f32[0] < 0.0)
    {
      char v34 = 0;
      goto LABEL_11;
    }
    char v35 = 0;
    char v34 = 0;
    v33->i8[0] = 0;
LABEL_13:
    ++v26;
    v33 += 2;
  }
  while (v26 != 8);
  float32x4_t v67 = v27;
  float v38 = tanf(v24);
  uint64_t v39 = 0;
  float v40 = v38 * a3;
  float32x4_t v41 = vmlaq_f32(vmlaq_f32(v64, (float32x4_t)0, v65), (float32x4_t)0, v66);
  int32x4_t v42 = (int32x4_t)vmulq_f32(v41, v41);
  v42.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v42, 2), vadd_f32(*(float32x2_t *)v42.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v42.i8, 1))).u32[0];
  float32x2_t v43 = vrsqrte_f32((float32x2_t)v42.u32[0]);
  float32x2_t v44 = vmul_f32(v43, vrsqrts_f32((float32x2_t)v42.u32[0], vmul_f32(v43, v43)));
  float32x4_t v45 = vmulq_n_f32(v41, vmul_f32(v44, vrsqrts_f32((float32x2_t)v42.u32[0], vmul_f32(v44, v44))).f32[0]);
  float32x4_t v46 = vmlaq_f32(vaddq_f32(v63, v65), (float32x4_t)0, v66);
  int32x4_t v47 = (int32x4_t)vmulq_f32(v46, v46);
  v47.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v47, 2), vadd_f32(*(float32x2_t *)v47.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v47.i8, 1))).u32[0];
  float32x2_t v48 = vrsqrte_f32((float32x2_t)v47.u32[0]);
  float32x2_t v49 = vmul_f32(v48, vrsqrts_f32((float32x2_t)v47.u32[0], vmul_f32(v48, v48)));
  float32x4_t v50 = vmulq_n_f32(v46, vmul_f32(v49, vrsqrts_f32((float32x2_t)v47.u32[0], vmul_f32(v49, v49))).f32[0]);
  char v51 = 1;
  float v52 = -(float)(v38 * a3);
  char v53 = 1;
  char v54 = 1;
  char v55 = 1;
  do
  {
    float32x4_t v56 = vsubq_f32(*(float32x4_t *)&v68[v39], v67);
    float32x4_t v57 = vmulq_f32(v56, v56);
    float32x4_t v58 = vmulq_f32(v45, v56);
    v57.f32[0] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v57, 2), vaddq_f32(v57, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v57.f32, 1))).f32[0]);
    float v59 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v58, 2), vaddq_f32(v58, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v58.f32, 1))).f32[0]/ v57.f32[0];
    float32x4_t v60 = vmulq_f32(v50, v56);
    float v61 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v60, 2), vaddq_f32(v60, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v60.f32, 1))).f32[0]/ v57.f32[0];
    v55 &= v59 < v52;
    if (v59 <= v40) {
      char v54 = 0;
    }
    else {
      char v55 = 0;
    }
    v53 &= v59 < v52;
    if (v61 <= v40) {
      char v51 = 0;
    }
    else {
      char v53 = 0;
    }
    v39 += 32;
  }
  while (v39 != 256);
  return (((v54 | v55 | v51 | v53) | (v34 | v35)) & 1) == 0;
}

BOOL re::LightContextBuilder::checkIfMeshBoundingBoxIsInsidePointLightSphere(uint64_t a1, float32x4_t *a2, float a3)
{
  uint64_t v4 = 0;
  float32x4_t v5 = a2[2];
  float32x4_t v6 = a2[3];
  float32x4_t v7 = vmlaq_f32(vmulq_f32(*a2, (float32x4_t)0), (float32x4_t)0, a2[1]);
  do
  {
    int v8 = &v48[v4];
    v8->i64[0] = 0;
    v8->i64[1] = 0;
    v8[1].i8[0] = 0;
    v4 += 2;
  }
  while (v4 != 16);
  uint64_t v9 = 0;
  int8x8_t v10 = *(int8x8_t *)a1;
  int8x8_t v11 = *(int8x8_t *)(a1 + 16);
  float v12 = *(float *)(a1 + 8);
  float v13 = *(float *)(a1 + 24);
  float32x4_t v14 = v48;
  do
  {
    *(int8x8_t *)v3.f32 = vbsl_s8((int8x8_t)vceqz_s32((int32x2_t)vand_s8((int8x8_t)vdup_n_s32(v9), (int8x8_t)0x200000001)), v10, v11);
    if ((v9 & 4) != 0) {
      float v15 = v13;
    }
    else {
      float v15 = v12;
    }
    v3.f32[2] = v15;
    *float32x4_t v14 = v3;
    v14 += 2;
    ++v9;
  }
  while (v9 != 8);
  uint64_t v16 = 0;
  float32x4_t v17 = vaddq_f32(v6, vmlaq_f32(v7, (float32x4_t)0, v5));
  float32x4_t v18 = vsubq_f32(v48[2], v48[0]);
  int32x4_t v19 = (int32x4_t)vmulq_f32(v18, v18);
  v19.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v19, 2), vadd_f32(*(float32x2_t *)v19.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v19.i8, 1))).u32[0];
  float32x2_t v20 = vrsqrte_f32((float32x2_t)v19.u32[0]);
  float32x2_t v21 = vmul_f32(v20, vrsqrts_f32((float32x2_t)v19.u32[0], vmul_f32(v20, v20)));
  float32x4_t v22 = vmulq_n_f32(v18, vmul_f32(v21, vrsqrts_f32((float32x2_t)v19.u32[0], vmul_f32(v21, v21))).f32[0]);
  float32x4_t v23 = vsubq_f32(v48[4], v48[0]);
  int32x4_t v24 = (int32x4_t)vmulq_f32(v23, v23);
  v24.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v24, 2), vadd_f32(*(float32x2_t *)v24.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v24.i8, 1))).u32[0];
  float32x2_t v25 = vrsqrte_f32((float32x2_t)v24.u32[0]);
  float32x2_t v26 = vmul_f32(v25, vrsqrts_f32((float32x2_t)v24.u32[0], vmul_f32(v25, v25)));
  float32x4_t v27 = vmulq_n_f32(v23, vmul_f32(v26, vrsqrts_f32((float32x2_t)v24.u32[0], vmul_f32(v26, v26))).f32[0]);
  float32x4_t v28 = vsubq_f32(v48[8], v48[0]);
  int32x4_t v29 = (int32x4_t)vmulq_f32(v28, v28);
  v29.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v29, 2), vadd_f32(*(float32x2_t *)v29.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v29.i8, 1))).u32[0];
  *(float32x2_t *)v24.i8 = vrsqrte_f32((float32x2_t)v29.u32[0]);
  *(float32x2_t *)v24.i8 = vmul_f32(*(float32x2_t *)v24.i8, vrsqrts_f32((float32x2_t)v29.u32[0], vmul_f32(*(float32x2_t *)v24.i8, *(float32x2_t *)v24.i8)));
  float32x4_t v30 = vmulq_n_f32(v28, vmul_f32(*(float32x2_t *)v24.i8, vrsqrts_f32((float32x2_t)v29.u32[0], vmul_f32(*(float32x2_t *)v24.i8, *(float32x2_t *)v24.i8))).f32[0]);
  char v31 = 1;
  char v32 = 1;
  float v33 = -a3;
  char v34 = 1;
  char v35 = 1;
  char v36 = 1;
  char v37 = 1;
  do
  {
    float32x4_t v38 = vsubq_f32(v48[v16], v17);
    float32x4_t v39 = vmulq_f32(v22, v38);
    float32x4_t v40 = vmulq_f32(v27, v38);
    v39.f32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v39, 2), vaddq_f32(v39, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v39.f32, 1))).f32[0];
    float32x4_t v41 = vmulq_f32(v30, v38);
    LODWORD(v42) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v40, 2), vaddq_f32(v40, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v40.f32, 1))).u32[0];
    LODWORD(v43) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v41, 2), vaddq_f32(v41, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v41.f32, 1))).u32[0];
    BOOL v44 = v39.f32[0] < v33;
    v37 &= v39.f32[0] > a3;
    if (v39.f32[0] > a3) {
      BOOL v44 = 0;
    }
    v36 &= v44;
    BOOL v45 = v42 < v33;
    v35 &= v42 > a3;
    if (v42 > a3) {
      BOOL v45 = 0;
    }
    v34 &= v45;
    v32 &= v43 > a3;
    BOOL v46 = v43 <= a3 && v43 < v33;
    v31 &= v46;
    v16 += 2;
  }
  while (v16 != 16);
  return (((v37 | v36 | v35 | v34) | (v32 | v31)) & 1) == 0;
}

uint64_t re::LightContextBuilder::buildLightContext(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v152 = result;
  unint64_t v5 = a3;
  uint64_t v150 = a2;
  uint64_t v184 = *MEMORY[0x263EF8340];
  uint64_t v6 = a3 + 56;
  uint64_t v7 = *(void *)(a3 + 96);
  if (v7)
  {
    unint64_t v8 = 0;
    for (unint64_t i = 0; i != v7; ++i)
    {
      uint64_t result = re::BucketArray<re::SkinningModelBuilder::RawSkinnedMeshPartData,4ul>::operator[](v6, i);
      v8 += *(void *)(result + 16);
    }
  }
  else
  {
    unint64_t v8 = 0;
  }
  uint64_t v142 = v6;
  uint64_t v139 = v5 + 224;
  uint64_t v10 = *(void *)(v5 + 264);
  if (v10)
  {
    unint64_t v11 = 0;
    unint64_t v12 = 0;
    while (1)
    {
      uint64_t result = re::BucketArray<re::LightContextBuilder::RealWorldProxyLightBucket,4ul>::operator[](v139, v12);
      unint64_t v13 = *(void *)(result + 16);
      if (v13) {
        break;
      }
LABEL_14:
      if (++v12 == v10) {
        goto LABEL_17;
      }
    }
    unint64_t v14 = 0;
    unint64_t v15 = *(void *)(result + 48);
    unint64_t v16 = *(void *)(result + 56);
    unint64_t v17 = *(void *)(result + 32) + 200;
    while (v15 != v14)
    {
      if (*(unsigned char *)(v16 + v14))
      {
        uint64_t result = re::LightContextBuilder::checkIfMeshBoundingBoxIsInsidePointLightSphere(a5, (float32x4_t *)(v17 - 168), *(float *)v17);
        v11 += result;
      }
      ++v14;
      v17 += 224;
      if (v13 == v14) {
        goto LABEL_14;
      }
    }
    *(void *)long long v174 = 0;
    long long v162 = 0u;
    long long v163 = 0u;
    long long v160 = 0u;
    long long v161 = 0u;
    float32x4_t v159 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(v181[0]) = 136315906;
    *(void *)((char *)v181 + 4) = "operator[]";
    WORD6(v181[0]) = 1024;
    *(_DWORD *)((char *)v181 + 14) = 476;
    WORD1(v181[1]) = 2048;
    *(void *)((char *)&v181[1] + 4) = v15;
    WORD6(v181[1]) = 2048;
    *(void *)((char *)&v181[1] + 14) = v15;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_178;
  }
  unint64_t v11 = 0;
LABEL_17:
  uint64_t v138 = v5 + 168;
  uint64_t v135 = (void *)v5;
  uint64_t v18 = *(void *)(v5 + 208);
  if (v18)
  {
    unint64_t v15 = 0;
    unint64_t v19 = 0;
    while (1)
    {
      uint64_t result = re::BucketArray<re::LightContextBuilder::RealWorldProxyLightBucket,4ul>::operator[](v138, v19);
      unint64_t v14 = *(void *)(result + 16);
      if (v14) {
        break;
      }
LABEL_25:
      if (++v19 == v18) {
        goto LABEL_28;
      }
    }
    unint64_t v16 = 0;
    unint64_t v13 = *(void *)(result + 48);
    unint64_t v17 = *(void *)(result + 56);
    unint64_t v5 = *(void *)(result + 32) + 208;
    while (v13 != v16)
    {
      if (*(unsigned char *)(v17 + v16))
      {
        uint64_t result = re::LightContextBuilder::checkIfMeshBoundingBoxIsInsideSpotLightCone(a5, (float32x4_t *)(v5 - 176), *(float32_t *)(v5 - 8), *(float *)v5, v20, v21, v22, v23, v24, v25);
        v15 += result;
      }
      ++v16;
      v5 += 240;
      if (v14 == v16) {
        goto LABEL_25;
      }
    }
LABEL_178:
    *(void *)long long v174 = 0;
    long long v162 = 0u;
    long long v163 = 0u;
    long long v160 = 0u;
    long long v161 = 0u;
    float32x4_t v159 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(v181[0]) = 136315906;
    *(void *)((char *)v181 + 4) = "operator[]";
    WORD6(v181[0]) = 1024;
    *(_DWORD *)((char *)v181 + 14) = 476;
    WORD1(v181[1]) = 2048;
    *(void *)((char *)&v181[1] + 4) = v13;
    WORD6(v181[1]) = 2048;
    *(void *)((char *)&v181[1] + 14) = v13;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_179:
    long long v182 = 0u;
    long long v183 = 0u;
    memset(v181, 0, sizeof(v181));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)long long v174 = 136315906;
    *(void *)&v174[4] = "operator[]";
    __int16 v175 = 1024;
    int v176 = 476;
    __int16 v177 = 2048;
    unint64_t v178 = v8;
    __int16 v179 = 2048;
    unint64_t v180 = v15;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_180:
    long long v182 = 0u;
    long long v183 = 0u;
    memset(v181, 0, sizeof(v181));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)long long v174 = 136315906;
    *(void *)&v174[4] = "operator[]";
    __int16 v175 = 1024;
    int v176 = 468;
    __int16 v177 = 2048;
    unint64_t v178 = v150 + v8;
    __int16 v179 = 2048;
    unint64_t v180 = v11;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_181;
  }
  unint64_t v15 = 0;
LABEL_28:
  unint64_t v13 = (unint64_t)v135;
  uint64_t v26 = v135[5];
  if (v26)
  {
    unint64_t v16 = 0;
    for (unint64_t j = 0; j != v26; ++j)
    {
      uint64_t result = re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[]((uint64_t)v135, j);
      v16 += *(void *)(result + 16);
    }
  }
  else
  {
    unint64_t v16 = 0;
  }
  uint64_t v28 = v135[40];
  if (v28)
  {
    unint64_t v14 = 0;
    for (unint64_t k = 0; k != v28; ++k)
    {
      uint64_t result = re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[]((uint64_t)(v135 + 35), k);
      v14 += *(void *)(result + 16);
    }
  }
  else
  {
    unint64_t v14 = 0;
  }
  unint64_t v5 = (unint64_t)(v135 + 14);
  uint64_t v30 = v135[19];
  if (v30)
  {
    unint64_t v17 = 0;
    for (unint64_t m = 0; m != v30; ++m)
    {
      uint64_t result = re::BucketArray<re::LightContextBuilder::RealWorldProxyLightBucket,4ul>::operator[]((uint64_t)(v135 + 14), m);
      v17 += *(void *)(result + 64);
    }
  }
  else
  {
    unint64_t v17 = 0;
  }
  long long v147 = *(_OWORD *)(a4 + 168);
  long long v148 = *(_OWORD *)(a4 + 72);
  uint64_t v32 = v152;
  *(void *)(v152 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v8;
  *(void *)(v152 + 16) = 0;
  *(void *)uint64_t v152 = v150;
  if (v8)
  {
    if (v8 >= 0x13B13B13B13B13CLL)
    {
LABEL_196:
      re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 208, v8);
      _os_crash();
      __break(1u);
      goto LABEL_197;
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)v150 + 32))(v150, 208 * v8, 16);
    *(void *)(v152 + 16) = result;
    if (!result)
    {
LABEL_197:
      re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
      _os_crash();
      __break(1u);
      goto LABEL_198;
    }
    unint64_t v33 = v8 - 1;
    if (v8 != 1)
    {
      do
      {
        *(_DWORD *)(result + 176) = 0;
        *(_OWORD *)(result + 144) = 0uLL;
        *(_OWORD *)(result + 160) = 0uLL;
        *(_OWORD *)(result + 112) = 0uLL;
        *(_OWORD *)(result + 12re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0uLL;
        *(_OWORD *)(result + 80) = 0uLL;
        *(_OWORD *)(result + 96) = 0uLL;
        *(_OWORD *)(result + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0uLL;
        *(_OWORD *)(result + 64) = 0uLL;
        *(_OWORD *)(result + 16) = 0uLL;
        *(_OWORD *)(result + 32) = 0uLL;
        *(_OWORD *)uint64_t result = 0uLL;
        *(_WORD *)(result + 176) = -1;
        *(void *)(result + 196) = 0;
        *(void *)(result + 180) = 0;
        *(void *)(result + 18re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
        *(_WORD *)(result + 200) = -1;
        *(_WORD *)(result + 204) = 0;
        result += 208;
        --v33;
      }
      while (v33);
    }
    *(_DWORD *)(result + 176) = 0;
    *(_OWORD *)(result + 144) = 0u;
    *(_OWORD *)(result + 160) = 0u;
    *(_OWORD *)(result + 112) = 0u;
    *(_OWORD *)(result + 12re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
    *(_OWORD *)(result + 80) = 0u;
    *(_OWORD *)(result + 96) = 0u;
    *(_OWORD *)(result + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)uint64_t result = 0u;
    *(_WORD *)(result + 176) = -1;
    *(void *)(result + 196) = 0;
    *(void *)(result + 180) = 0;
    *(void *)(result + 18re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
    *(_WORD *)(result + 200) = -1;
    *(_WORD *)(result + 204) = 0;
    uint64_t v32 = v152;
  }
  *(void *)(v32 + 32) = v11;
  *(void *)(v32 + 40) = 0;
  *(void *)(v32 + 24) = v150;
  if (v11)
  {
    if (v11 >= 0xBA2E8BA2E8BA2FLL)
    {
LABEL_198:
      re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 352, v11);
      _os_crash();
      __break(1u);
      goto LABEL_199;
    }
    uint64_t v34 = v32;
    uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)v150 + 32))(v150, 352 * v11, 16);
    *(void *)(v34 + 40) = result;
    if (!result)
    {
LABEL_199:
      re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
      _os_crash();
      __break(1u);
      goto LABEL_200;
    }
    if (v11 != 1)
    {
      uint64_t v35 = 0;
      do
      {
        uint64_t v36 = 0;
        *(_OWORD *)(result + 156) = 0uLL;
        *(_OWORD *)(result + 12re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0uLL;
        *(_OWORD *)(result + 144) = 0uLL;
        *(_OWORD *)(result + 96) = 0uLL;
        *(_OWORD *)(result + 112) = 0uLL;
        *(_OWORD *)(result + 64) = 0uLL;
        *(_OWORD *)(result + 80) = 0uLL;
        *(_OWORD *)(result + 32) = 0uLL;
        *(_OWORD *)(result + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0uLL;
        *(_OWORD *)uint64_t result = 0uLL;
        *(_OWORD *)(result + 16) = 0uLL;
        do
        {
          uint64_t v37 = result + v36;
          *(void *)(v37 + 180) = 0;
          *(void *)(v37 + 172) = 0;
          *(_DWORD *)(v37 + 18re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
          *(_WORD *)(v37 + 192) = -1;
          v36 += 24;
        }
        while (v36 != 144);
        float32x4_t v38 = (void *)(result + 316);
        *(_DWORD *)(result + 332) = 0;
        *(void *)(result + 324) = 0;
        *(_WORD *)(result + 336) = -1;
        *(_WORD *)(result + 340) = 0;
        *(unsigned char *)(result + 342) = 0;
        result += 352;
        ++v35;
        *float32x4_t v38 = 0;
      }
      while (v35 != v11 - 1);
    }
    uint64_t v39 = 0;
    *(_OWORD *)(result + 156) = 0u;
    *(_OWORD *)(result + 12re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
    *(_OWORD *)(result + 144) = 0u;
    *(_OWORD *)(result + 96) = 0u;
    *(_OWORD *)(result + 112) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 80) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
    *(_OWORD *)uint64_t result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    do
    {
      uint64_t v40 = result + v39;
      *(void *)(v40 + 180) = 0;
      *(void *)(v40 + 172) = 0;
      *(_DWORD *)(v40 + 18re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(_WORD *)(v40 + 192) = -1;
      v39 += 24;
    }
    while (v39 != 144);
    *(_DWORD *)(result + 332) = 0;
    *(void *)(result + 324) = 0;
    *(void *)(result + 316) = 0;
    *(_WORD *)(result + 336) = -1;
    *(_WORD *)(result + 340) = 0;
    *(unsigned char *)(result + 342) = 0;
    uint64_t v32 = v152;
  }
  *(void *)(v32 + 56) = v15;
  *(void *)(v32 + 64) = 0;
  *(void *)(v32 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v150;
  if (v15)
  {
    if (v15 >= 0x111111111111112)
    {
LABEL_200:
      re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 240, v15);
      _os_crash();
      __break(1u);
      goto LABEL_201;
    }
    uint64_t v41 = v32;
    uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)v150 + 32))(v150, 240 * v15, 16);
    *(void *)(v41 + 64) = result;
    if (!result)
    {
LABEL_201:
      re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
      _os_crash();
      __break(1u);
      goto LABEL_202;
    }
    unint64_t v42 = v15 - 1;
    if (v15 != 1)
    {
      do
      {
        *(_OWORD *)(result + 18re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0uLL;
        *(_OWORD *)(result + 160) = 0uLL;
        *(_OWORD *)(result + 176) = 0uLL;
        *(_OWORD *)(result + 12re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0uLL;
        *(_OWORD *)(result + 144) = 0uLL;
        *(_OWORD *)(result + 96) = 0uLL;
        *(_OWORD *)(result + 112) = 0uLL;
        *(_OWORD *)(result + 64) = 0uLL;
        *(_OWORD *)(result + 80) = 0uLL;
        *(_OWORD *)(result + 32) = 0uLL;
        *(_OWORD *)(result + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0uLL;
        *(_OWORD *)uint64_t result = 0uLL;
        *(_OWORD *)(result + 16) = 0uLL;
        *(_WORD *)(result + 200) = -1;
        *(void *)(result + 220) = 0;
        *(void *)(result + 204) = 0;
        *(void *)(result + 212) = 0;
        *(_WORD *)(result + 224) = -1;
        *(_WORD *)(result + 22re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
        *(unsigned char *)(result + 230) = 0;
        result += 240;
        --v42;
      }
      while (v42);
    }
    *(_OWORD *)(result + 18re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
    *(_OWORD *)(result + 160) = 0u;
    *(_OWORD *)(result + 176) = 0u;
    *(_OWORD *)(result + 12re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
    *(_OWORD *)(result + 144) = 0u;
    *(_OWORD *)(result + 96) = 0u;
    *(_OWORD *)(result + 112) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 80) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
    *(_OWORD *)uint64_t result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_WORD *)(result + 200) = -1;
    *(void *)(result + 220) = 0;
    *(void *)(result + 204) = 0;
    *(void *)(result + 212) = 0;
    *(_WORD *)(result + 224) = -1;
    *(_WORD *)(result + 22re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
    *(unsigned char *)(result + 230) = 0;
    uint64_t v32 = v152;
  }
  *(void *)(v32 + 80) = v16;
  *(void *)(v32 + 8re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  *(void *)(v32 + 72) = v150;
  if (v16)
  {
    uint64_t v43 = v142;
    if (v16 >> 59)
    {
LABEL_202:
      re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 32, v16);
      _os_crash();
      __break(1u);
      goto LABEL_203;
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)v150 + 32))(v150, 32 * v16, 16);
    uint64_t v32 = v152;
    *(void *)(v152 + 8re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = result;
    if (!result)
    {
LABEL_203:
      re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
      _os_crash();
      __break(1u);
      goto LABEL_204;
    }
    uint64_t v133 = result;
    uint64_t v44 = result;
    unint64_t v45 = v16 - 1;
    if (v16 != 1)
    {
      uint64_t v44 = result;
      do
      {
        *(void *)uint64_t v44 = 0;
        *(void *)(v44 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
        *(_DWORD *)(v44 + 16) = 0;
        v44 += 32;
        --v45;
      }
      while (v45);
    }
    *(void *)uint64_t v44 = 0;
    *(void *)(v44 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
    *(_DWORD *)(v44 + 16) = 0;
  }
  else
  {
    uint64_t v133 = 0;
    uint64_t v43 = v142;
  }
  *(void *)(v32 + 104) = v14;
  *(void *)(v32 + 112) = 0;
  *(void *)(v32 + 96) = v150;
  if (v14)
  {
    if (v14 >= 0x24924924924924ALL)
    {
LABEL_204:
      re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 112, v14);
      _os_crash();
      __break(1u);
      goto LABEL_205;
    }
    uint64_t v46 = v32;
    uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)v150 + 32))(v150, 112 * v14, 16);
    *(void *)(v46 + 112) = result;
    if (!result)
    {
LABEL_205:
      re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
      _os_crash();
      __break(1u);
      goto LABEL_206;
    }
    unint64_t v47 = v14 - 1;
    if (v14 != 1)
    {
      do
      {
        *(void *)(result + 8re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
        *(unsigned char *)(result + 96) = 0;
        *(_OWORD *)uint64_t result = 0uLL;
        *(_OWORD *)(result + 16) = 0uLL;
        *(_OWORD *)(result + 32) = 0uLL;
        *(_OWORD *)(result + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0uLL;
        *(_OWORD *)(result + 64) = 0uLL;
        *(_DWORD *)(result + 80) = 0;
        result += 112;
        --v47;
      }
      while (v47);
    }
    *(void *)(result + 8re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
    *(unsigned char *)(result + 96) = 0;
    *(_OWORD *)uint64_t result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_DWORD *)(result + 80) = 0;
    uint64_t v32 = v152;
  }
  *(void *)(v32 + 12re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v17;
  *(void *)(v32 + 136) = 0;
  *(void *)(v32 + 120) = v150;
  unint64_t v141 = v17;
  if (v17)
  {
    if (v17 >= 0x155555555555556)
    {
LABEL_206:
      re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 192, v17);
      _os_crash();
      __break(1u);
LABEL_207:
      re::internal::assertLog((re::internal *)4, v48, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
      _os_crash();
      __break(1u);
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)v150 + 32))(v150, 192 * v17, 16);
    uint64_t v32 = v152;
    *(void *)(v152 + 136) = result;
    if (!result) {
      goto LABEL_207;
    }
    uint64_t v49 = result;
    unint64_t v50 = v17 - 1;
    if (v17 != 1)
    {
      uint64_t v49 = result;
      do
      {
        *(_DWORD *)(v49 + 176) = 0;
        *(_OWORD *)(v49 + 144) = 0uLL;
        *(_OWORD *)(v49 + 160) = 0uLL;
        *(_OWORD *)(v49 + 112) = 0uLL;
        *(_OWORD *)(v49 + 12re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0uLL;
        *(_OWORD *)(v49 + 80) = 0uLL;
        *(_OWORD *)(v49 + 96) = 0uLL;
        *(_OWORD *)(v49 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0uLL;
        *(_OWORD *)(v49 + 64) = 0uLL;
        *(_OWORD *)(v49 + 16) = 0uLL;
        *(_OWORD *)(v49 + 32) = 0uLL;
        *(_OWORD *)uint64_t v49 = 0uLL;
        *(_WORD *)(v49 + 176) = -1;
        v49 += 192;
        --v50;
      }
      while (v50);
    }
    uint64_t v140 = result;
    *(_DWORD *)(v49 + 176) = 0;
    *(_OWORD *)(v49 + 144) = 0u;
    *(_OWORD *)(v49 + 160) = 0u;
    *(_OWORD *)(v49 + 112) = 0u;
    *(_OWORD *)(v49 + 12re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
    *(_OWORD *)(v49 + 80) = 0u;
    *(_OWORD *)(v49 + 96) = 0u;
    *(_OWORD *)(v49 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
    *(_OWORD *)(v49 + 64) = 0u;
    *(_OWORD *)(v49 + 16) = 0u;
    *(_OWORD *)(v49 + 32) = 0u;
    *(_OWORD *)uint64_t v49 = 0u;
    *(_WORD *)(v49 + 176) = -1;
  }
  else
  {
    uint64_t v140 = 0;
  }
  *(void *)&long long v51 = v147;
  *((void *)&v51 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = v148;
  *(_OWORD *)(v32 + 144) = v51;
  *(unsigned char *)(v32 + 160) = 0;
  uint64_t v144 = v135[12];
  if (v144)
  {
    uint64_t v150 = 0;
    unint64_t v52 = 0;
    unint64_t v16 = (unint64_t)&v163;
    unint64_t v17 = (unint64_t)v173 + 2;
    do
    {
      uint64_t result = re::BucketArray<re::SkinningModelBuilder::RawSkinnedMeshPartData,4ul>::operator[](v43, v52);
      if (*(void *)(result + 16))
      {
        unint64_t v14 = result;
        unint64_t v146 = v52;
        uint64_t v53 = 0;
        unint64_t v5 = 0;
        unint64_t v8 = 0;
        uint64_t v54 = v152;
        uint64_t v55 = 208 * v150 + 205;
        do
        {
          uint64_t v56 = *(void *)(v14 + 32);
          long long v155 = 0uLL;
          int v157 = 0;
          memset((char *)v173 + 2, 0, 20);
          unint64_t v13 = v56 + v53;
          float32x4_t v159 = *(float32x4_t *)(v56 + v53 + 32);
          long long v160 = *(_OWORD *)(v56 + v53 + 48);
          long long v161 = *(_OWORD *)(v56 + v53 + 64);
          long long v162 = *(_OWORD *)(v56 + v53 + 80);
          unint64_t v15 = *(void *)(v14 + 48);
          if (v15 <= v8) {
            goto LABEL_179;
          }
          float32x4_t v57 = (long long *)(*(void *)(v14 + 56) + v5);
          long long v163 = *v57;
          long long v164 = v57[1];
          long long v165 = v57[2];
          long long v166 = v57[3];
          long long v167 = *(_OWORD *)(v13 + 96);
          int v58 = *(_DWORD *)(v13 + 112);
          int v59 = *(_DWORD *)(v13 + 128);
          unint64_t v15 = *(unsigned __int8 *)(v13 + 135);
          if (*(unsigned char *)(v13 + 134))
          {
            unint64_t v11 = *(void *)(v14 + 72);
            if (v11 <= v8) {
              goto LABEL_183;
            }
            uint64_t result = re::DataArray<re::TextureAtlasTile>::get(a4 + 8, *(void *)(*(void *)(v14 + 80) + 8 * v8));
            long long v155 = *(_OWORD *)result;
            int v157 = *(_DWORD *)(result + 16);
            __int16 v60 = *(_WORD *)(result + 20);
            uint64_t v54 = v152;
            if (!v15) {
              *(unsigned char *)(v152 + 160) = 1;
            }
          }
          else
          {
            __int16 v60 = -1;
          }
          unint64_t v11 = *(void *)(v54 + 8);
          if (v11 <= v150 + v8) {
            goto LABEL_180;
          }
          char v61 = *(unsigned char *)(v13 + 134);
          char v62 = (unsigned char *)(*(void *)(v54 + 16) + v55);
          *(_OWORD *)(v62 - 125) = v164;
          *(_OWORD *)(v62 - 109) = v165;
          *(_OWORD *)(v62 - 93) = v166;
          *(_OWORD *)(v62 - 77) = v167;
          *(_OWORD *)(v62 - 189) = v160;
          *(_OWORD *)(v62 - 173) = v161;
          *(_OWORD *)(v62 - 157) = v162;
          *(_OWORD *)(v62 - 14re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = v163;
          *(float32x4_t *)(v62 - 205) = v159;
          *(_DWORD *)(v62 - 6re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = v58;
          *(_DWORD *)(v62 - 57) = v59;
          *(_DWORD *)(v62 - 53) = 3;
          *(_OWORD *)(v62 - 49) = v155;
          *(_DWORD *)(v62 - 33) = v157;
          *(_WORD *)(v62 - 29) = v60;
          *(_OWORD *)(v62 - 27) = v173[0];
          *(void *)(v62 - 13) = *(void *)((char *)v173 + 14);
          *(_WORD *)(v62 - 5) = -1;
          *(v62 - re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = v61;
          *char v62 = v15;
          ++v8;
          v55 += 208;
          v5 += 64;
          v53 += 144;
        }
        while (v8 < *(void *)(v14 + 16));
        v150 += v8;
        unint64_t v13 = (unint64_t)v135;
        uint64_t v43 = v142;
        unint64_t v52 = v146;
      }
      ++v52;
    }
    while (v52 != v144);
  }
  uint64_t v136 = *(void *)(v13 + 264);
  if (v136)
  {
    unint64_t v149 = 0;
    unint64_t v63 = 0;
    unint64_t v14 = (unint64_t)&v159;
    unint64_t v17 = (unint64_t)&v159;
    unint64_t v64 = a4 + 8;
    while (1)
    {
      unint64_t v137 = v63;
      uint64_t result = re::BucketArray<re::LightContextBuilder::RealWorldProxyLightBucket,4ul>::operator[](v139, v63);
      unint64_t v5 = *(void *)(result + 16);
      if (v5) {
        break;
      }
LABEL_124:
      unint64_t v63 = v137 + 1;
      if (v137 + 1 == v136) {
        goto LABEL_125;
      }
    }
    unint64_t v11 = 0;
    unint64_t v8 = 0;
    long long v151 = (void *)result;
    while (1)
    {
      unint64_t v15 = *(void *)(result + 48);
      if (v15 <= v8) {
        break;
      }
      if (*(unsigned char *)(*(void *)(result + 56) + v8))
      {
        unint64_t v13 = *(void *)(result + 32);
        unint64_t v65 = v13 + 224 * v8;
        unint64_t v16 = v65 + 32;
        float v66 = *(float *)(v65 + 200);
        if (re::LightContextBuilder::checkIfMeshBoundingBoxIsInsidePointLightSphere(a5, (float32x4_t *)(v65 + 32), v66))
        {
          for (uint64_t n = 0; n != 144; n += 24)
          {
            BOOL v68 = (char *)&v159 + n;
            *(void *)(v68 + 180) = 0;
            *(void *)(v68 + 172) = 0;
            *((_DWORD *)v68 + 47) = 0;
            *((_WORD *)v68 + 96) = -1;
          }
          memset(&v170[4], 0, 20);
          WORD2(v170[6]) = -1;
          float32x4_t v159 = *(float32x4_t *)v16;
          long long v160 = *(_OWORD *)(v65 + 48);
          long long v161 = *(_OWORD *)(v65 + 64);
          long long v162 = *(_OWORD *)(v65 + 80);
          unint64_t v69 = v13 + 224 * v8;
          long long v166 = *(_OWORD *)(v69 + 176);
          long long v165 = *(_OWORD *)(v69 + 160);
          long long v164 = *(_OWORD *)(v69 + 144);
          long long v163 = *(_OWORD *)(v69 + 128);
          long long v167 = *(_OWORD *)(v65 + 96);
          *(void *)long long v168 = *(void *)(v65 + 112);
          *(float *)&v168[8] = v66;
          int v70 = *(unsigned __int8 *)(v69 + 215);
          unint64_t v16 = v69 + 215;
          *(void *)&v168[12] = *(void *)(v16 - 11);
          *(void *)&v168[20] = 0x300000003;
          uint64_t v71 = v152;
          unint64_t v5 = v149;
          if (v70)
          {
            unint64_t v15 = v151[13];
            if (v15 <= v8) {
              goto LABEL_192;
            }
            uint64_t v72 = 0;
            unint64_t v73 = v151[14] + v11;
            float32x4_t v74 = v169;
            do
            {
              uint64_t v75 = re::DataArray<re::TextureAtlasTile>::get(v64, *(void *)(v73 + v72));
              *float32x4_t v74 = *(_OWORD *)v75;
              *(void *)((char *)v74 + 14) = *(void *)(v75 + 14);
              v72 += 8;
              float32x4_t v74 = (_OWORD *)((char *)v74 + 24);
            }
            while (v72 != 48);
            uint64_t v71 = v152;
            *(unsigned char *)(v152 + 160) = 1;
            unint64_t v14 = (unint64_t)&v159;
            unint64_t v5 = v149;
          }
          unint64_t v76 = v13 + 224 * v8;
          int v78 = *(unsigned __int8 *)(v76 + 214);
          unint64_t v13 = v76 + 214;
          char v77 = v78;
          if (v78)
          {
            unint64_t v15 = v151[10];
            if (v15 <= v8) {
              goto LABEL_193;
            }
            uint64_t v79 = re::DataArray<re::TextureAtlasTile>::get(a4 + 104, *(void *)(v151[11] + 8 * v8));
            *(_OWORD *)&v170[4] = *(_OWORD *)v79;
            uint64_t v71 = v152;
            *(void *)((char *)&v170[5] + 6) = *(void *)(v79 + 14);
            char v77 = *(unsigned char *)v13;
          }
          LOBYTE(v17re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
          HIBYTE(v17re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = *(unsigned char *)v16;
          char v172 = v77;
          unint64_t v15 = *(void *)(v71 + 32);
          if (v15 <= v5) {
            goto LABEL_187;
          }
          uint64_t v80 = *(void *)(v71 + 40) + 352 * v5;
          unint64_t v81 = v5 + 1;
          *(_OWORD *)(v80 + 112) = v166;
          *(_OWORD *)(v80 + 12re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v167;
          *(_OWORD *)(v80 + 144) = *(_OWORD *)v168;
          *(_OWORD *)(v80 + 156) = *(_OWORD *)&v168[12];
          *(_OWORD *)(v80 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v162;
          *(_OWORD *)(v80 + 64) = v163;
          *(_OWORD *)(v80 + 80) = v164;
          *(_OWORD *)(v80 + 96) = v165;
          *(float32x4_t *)uint64_t v80 = v159;
          *(_OWORD *)(v80 + 16) = v160;
          *(_OWORD *)(v80 + 32) = v161;
          *(_OWORD *)(v80 + 252) = v169[5];
          *(_OWORD *)(v80 + 26re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v169[6];
          *(_OWORD *)(v80 + 284) = *(_OWORD *)v170;
          *(_OWORD *)(v80 + 29re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_OWORD *)((char *)&v170[1] + 6);
          *(_OWORD *)(v80 + 18re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v169[1];
          *(_OWORD *)(v80 + 204) = v169[2];
          *(_OWORD *)(v80 + 220) = v169[3];
          *(_OWORD *)(v80 + 236) = v169[4];
          *(_OWORD *)(v80 + 172) = v169[0];
          *(_OWORD *)(v80 + 316) = *(_OWORD *)&v170[4];
          *(void *)(v80 + 330) = *(void *)((char *)&v170[5] + 6);
          *(_WORD *)(v80 + 340) = v171;
          *(unsigned char *)(v80 + 342) = v172;
          uint64_t result = (uint64_t)v151;
          unint64_t v5 = v151[2];
          unint64_t v149 = v81;
        }
        else
        {
          uint64_t result = (uint64_t)v151;
        }
      }
      ++v8;
      v11 += 48;
      if (v8 >= v5) {
        goto LABEL_124;
      }
    }
LABEL_181:
    *(void *)long long v174 = 0;
    long long v162 = 0u;
    long long v163 = 0u;
    long long v160 = 0u;
    long long v161 = 0u;
    float32x4_t v159 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(v181[0]) = 136315906;
    *(void *)((char *)v181 + 4) = "operator[]";
    WORD6(v181[0]) = 1024;
    *(_DWORD *)((char *)v181 + 14) = 476;
    WORD1(v181[1]) = 2048;
    *(void *)((char *)&v181[1] + 4) = v8;
    WORD6(v181[1]) = 2048;
    *(void *)((char *)&v181[1] + 14) = v15;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_182;
  }
LABEL_125:
  uint64_t v143 = v135[26];
  if (v143)
  {
    unint64_t v5 = 0;
    unint64_t v82 = 0;
    unint64_t v13 = (unint64_t)v173 + 2;
    while (1)
    {
      unint64_t v145 = v82;
      uint64_t result = re::BucketArray<re::LightContextBuilder::RealWorldProxyLightBucket,4ul>::operator[](v138, v82);
      unint64_t v89 = *(void *)(result + 16);
      if (v89) {
        break;
      }
LABEL_143:
      unint64_t v82 = v145 + 1;
      if (v145 + 1 == v143) {
        goto LABEL_144;
      }
    }
    unint64_t v11 = result;
    unint64_t v8 = 0;
    unint64_t v15 = 112;
    while (1)
    {
      unint64_t v14 = *(void *)(v11 + 48);
      if (v14 <= v8) {
        break;
      }
      if (*(unsigned char *)(*(void *)(v11 + 56) + v8))
      {
        unint64_t v14 = *(void *)(v11 + 32);
        unint64_t v90 = v14 + v15;
        unint64_t v16 = v14 + v15 - 80;
        float32_t v91 = *(float *)(v14 + v15 + 88);
        float v92 = *(float *)(v14 + v15 + 96);
        uint64_t result = re::LightContextBuilder::checkIfMeshBoundingBoxIsInsideSpotLightCone(a5, (float32x4_t *)v16, v91, v92, *(double *)&v83, *(double *)&v84, v85, v86, v87, v88);
        if (result)
        {
          long long v156 = 0uLL;
          int v158 = 0;
          memset((char *)v173 + 2, 0, 20);
          float32x4_t v159 = *(float32x4_t *)v16;
          long long v160 = *(_OWORD *)(v14 + v15 - 64);
          long long v161 = *(_OWORD *)(v14 + v15 - 48);
          long long v162 = *(_OWORD *)(v14 + v15 - 32);
          long long v93 = *(_OWORD *)(v90 + 16);
          long long v94 = *(_OWORD *)(v90 + 32);
          long long v83 = *(_OWORD *)(v90 + 48);
          long long v84 = *(_OWORD *)(v90 + 64);
          long long v165 = v83;
          long long v166 = v84;
          long long v163 = v93;
          long long v164 = v94;
          long long v167 = *(_OWORD *)(v90 - 16);
          uint64_t v95 = *(void *)v90;
          int v96 = *(_DWORD *)(v90 + 92);
          uint64_t v97 = *(void *)(v90 + 100);
          if (*(unsigned char *)(v90 + 112))
          {
            unint64_t v64 = *(void *)(v11 + 104);
            if (v64 <= v8) {
              goto LABEL_194;
            }
            uint64_t result = re::DataArray<re::TextureAtlasTile>::get(a4 + 8, *(void *)(*(void *)(v11 + 112) + 8 * v8));
            long long v156 = *(_OWORD *)result;
            int v158 = *(_DWORD *)(result + 16);
            unint64_t v16 = *(unsigned __int16 *)(result + 20);
            uint64_t v98 = v152;
            *(unsigned char *)(v152 + 160) = 1;
          }
          else
          {
            unint64_t v16 = 0xFFFFLL;
            uint64_t v98 = v152;
          }
          if (*(unsigned char *)(v14 + v15 + 111))
          {
            unint64_t v17 = *(void *)(v11 + 80);
            if (v17 <= v8) {
              goto LABEL_195;
            }
            uint64_t result = re::DataArray<re::TextureAtlasTile>::get(a4 + 104, *(void *)(*(void *)(v11 + 88) + 8 * v8));
            *(_OWORD *)((char *)v173 + 2) = *(_OWORD *)result;
            *(_DWORD *)((char *)&v173[1] + 2) = *(_DWORD *)(result + 16);
            __int16 v99 = *(_WORD *)(result + 20);
            uint64_t v98 = v152;
          }
          else
          {
            __int16 v99 = -1;
          }
          unint64_t v17 = *(void *)(v98 + 56);
          if (v17 <= v5) {
            goto LABEL_188;
          }
          uint64_t v100 = *(void *)(v98 + 64) + 240 * v5++;
          char v101 = *(unsigned char *)(v14 + v15 + 111);
          char v102 = *(unsigned char *)(v90 + 112);
          char v103 = *(unsigned char *)(v14 + v15 + 110);
          *(_OWORD *)(v100 + 80) = v164;
          *(_OWORD *)(v100 + 96) = v165;
          *(_OWORD *)(v100 + 112) = v166;
          *(_OWORD *)(v100 + 12re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v167;
          *(_OWORD *)(v100 + 16) = v160;
          *(_OWORD *)(v100 + 32) = v161;
          *(_OWORD *)(v100 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v162;
          *(_OWORD *)(v100 + 64) = v163;
          *(float32x4_t *)uint64_t v100 = v159;
          *(void *)(v100 + 144) = v95;
          *(float32_t *)(v100 + 152) = v91;
          *(_DWORD *)(v100 + 156) = v96;
          *(float *)(v100 + 160) = v92;
          *(void *)(v100 + 164) = v97;
          *(void *)(v100 + 172) = 0x300000003;
          *(_OWORD *)(v100 + 180) = v156;
          *(_DWORD *)(v100 + 196) = v158;
          *(_WORD *)(v100 + 200) = v16;
          *(_OWORD *)(v100 + 202) = v173[0];
          *(void *)(v100 + 216) = *(void *)((char *)v173 + 14);
          *(_WORD *)(v100 + 224) = v99;
          *(unsigned char *)(v100 + 22re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v103;
          *(unsigned char *)(v100 + 229) = v102;
          *(unsigned char *)(v100 + 230) = v101;
          unint64_t v89 = *(void *)(v11 + 16);
        }
      }
      ++v8;
      v15 += 240;
      if (v8 >= v89) {
        goto LABEL_143;
      }
    }
LABEL_182:
    *(void *)long long v174 = 0;
    long long v162 = 0u;
    long long v163 = 0u;
    long long v160 = 0u;
    long long v161 = 0u;
    float32x4_t v159 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(v181[0]) = 136315906;
    *(void *)((char *)v181 + 4) = "operator[]";
    WORD6(v181[0]) = 1024;
    *(_DWORD *)((char *)v181 + 14) = 476;
    WORD1(v181[1]) = 2048;
    *(void *)((char *)&v181[1] + 4) = v8;
    WORD6(v181[1]) = 2048;
    *(void *)((char *)&v181[1] + 14) = v14;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_183:
    long long v182 = 0u;
    long long v183 = 0u;
    memset(v181, 0, sizeof(v181));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)long long v174 = 136315906;
    *(void *)&v174[4] = "operator[]";
    __int16 v175 = 1024;
    int v176 = 476;
    __int16 v177 = 2048;
    unint64_t v178 = v8;
    __int16 v179 = 2048;
    unint64_t v180 = v11;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_184;
  }
LABEL_144:
  unint64_t v17 = (unint64_t)(v135 + 14);
  unint64_t v16 = (unint64_t)v135;
  uint64_t v104 = v135[5];
  unint64_t v11 = (unint64_t)(v135 + 35);
  if (v104)
  {
    unint64_t v15 = 0;
    unint64_t v105 = 0;
    unint64_t v13 = v133 + 16;
    while (1)
    {
      uint64_t result = re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[]((uint64_t)v135, v105);
      uint64_t v106 = *(void *)(result + 16);
      if (v106) {
        break;
      }
LABEL_153:
      if (++v105 == v104) {
        goto LABEL_154;
      }
    }
    unint64_t v8 = *(void *)(v152 + 80);
    if (v15 <= v8) {
      unint64_t v14 = *(void *)(v152 + 80);
    }
    else {
      unint64_t v14 = v15;
    }
    uint64_t v107 = 32 * v106;
    long long v108 = (int *)(*(void *)(result + 32) + 16);
    long long v109 = (_DWORD *)(v13 + 32 * v15);
    while (v14 != v15)
    {
      uint64_t v110 = v108 - 4;
      int v111 = *v108;
      v108 += 8;
      ++v15;
      *((_OWORD *)v109 - re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = *(_OWORD *)v110;
      *long long v109 = v111;
      v109 += 8;
      v107 -= 32;
      if (!v107) {
        goto LABEL_153;
      }
    }
LABEL_184:
    *(void *)long long v174 = 0;
    long long v162 = 0u;
    long long v163 = 0u;
    long long v160 = 0u;
    long long v161 = 0u;
    float32x4_t v159 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(v181[0]) = 136315906;
    *(void *)((char *)v181 + 4) = "operator[]";
    WORD6(v181[0]) = 1024;
    *(_DWORD *)((char *)v181 + 14) = 468;
    WORD1(v181[1]) = 2048;
    *(void *)((char *)&v181[1] + 4) = v14;
    WORD6(v181[1]) = 2048;
    *(void *)((char *)&v181[1] + 14) = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_185:
    *(void *)&v173[0] = 0;
    long long v162 = 0u;
    long long v163 = 0u;
    long long v160 = 0u;
    long long v161 = 0u;
    float32x4_t v159 = 0u;
    unint64_t v125 = &_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)long long v174 = 136315906;
    *(void *)&v174[4] = "operator[]";
    __int16 v175 = 1024;
    int v176 = 468;
    __int16 v177 = 2048;
    unint64_t v178 = v14;
    __int16 v179 = 2048;
    unint64_t v180 = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_186;
  }
LABEL_154:
  uint64_t v112 = v135[40];
  if (v112)
  {
    unint64_t v15 = 0;
    unint64_t v113 = 0;
    unint64_t v13 = (unint64_t)&v183;
    while (1)
    {
      uint64_t result = re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[]((uint64_t)(v135 + 35), v113);
      uint64_t v114 = *(void *)(result + 16);
      if (v114) {
        break;
      }
LABEL_163:
      if (++v113 == v112) {
        goto LABEL_164;
      }
    }
    uint64_t v115 = 0;
    uint64_t v116 = *(void *)(result + 32);
    unint64_t v8 = *(void *)(v152 + 104);
    if (v15 <= v8) {
      unint64_t v14 = *(void *)(v152 + 104);
    }
    else {
      unint64_t v14 = v15;
    }
    uint64_t v117 = 144 * v114;
    uint64_t v118 = 112 * v15;
    while (1)
    {
      uint64_t v119 = v116 + v115;
      v181[0] = *(_OWORD *)(v116 + v115 + 32);
      v181[1] = *(_OWORD *)(v116 + v115 + 48);
      v181[2] = *(_OWORD *)(v116 + v115 + 64);
      long long v182 = *(_OWORD *)(v116 + v115 + 80);
      long long v183 = *(_OWORD *)(v116 + v115 + 96);
      if (v14 == v15) {
        goto LABEL_185;
      }
      ++v15;
      char v120 = *(unsigned char *)(v119 + 136);
      uint64_t v121 = *(void *)(v119 + 128);
      int v122 = *(_DWORD *)(v119 + 112);
      uint64_t v123 = *(void *)(v152 + 112) + v118;
      *(_OWORD *)(v123 + 16) = v181[1];
      *(_OWORD *)(v123 + 32) = v181[2];
      *(_OWORD *)(v123 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v182;
      *(_OWORD *)(v123 + 64) = v183;
      *(_OWORD *)uint64_t v123 = v181[0];
      *(_DWORD *)(v123 + 80) = v122;
      *(void *)(v123 + 8re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v121;
      *(unsigned char *)(v123 + 96) = v120;
      v115 += 144;
      v118 += 112;
      if (v117 == v115) {
        goto LABEL_163;
      }
    }
  }
LABEL_164:
  uint64_t v154 = v135[19];
  if (v154)
  {
    unint64_t v14 = 0;
    unint64_t v64 = 0;
    unint64_t v16 = (unint64_t)&v163;
    unint64_t v11 = (unint64_t)&v167;
    unint64_t v8 = a4 + 8;
    while (1)
    {
      uint64_t result = re::BucketArray<re::LightContextBuilder::RealWorldProxyLightBucket,4ul>::operator[](v17, v64);
      unint64_t v124 = *(void *)(result + 16);
      if (v124) {
        break;
      }
LABEL_175:
      ++v64;
      unint64_t v17 = (unint64_t)(v135 + 14);
      if (v64 == v154) {
        return result;
      }
    }
    unint64_t v15 = result;
    unint64_t v17 = 0;
    unint64_t v5 = 0;
    unint64_t v13 = 0;
    while (1)
    {
      unint64_t v125 = *(void *)(v15 + 48);
      if (v125 <= v13) {
        break;
      }
      if (*(unsigned char *)(*(void *)(v15 + 56) + v13))
      {
        unint64_t v126 = *(void *)(v15 + 32) + v17;
        float32x4_t v159 = *(float32x4_t *)(v126 + 32);
        long long v160 = *(_OWORD *)(v126 + 48);
        long long v161 = *(_OWORD *)(v126 + 64);
        long long v162 = *(_OWORD *)(v126 + 80);
        unint64_t v127 = *(void *)(v15 + 80);
        if (v127 <= v13) {
          goto LABEL_189;
        }
        uint64_t v128 = (long long *)(*(void *)(v15 + 88) + v5);
        long long v163 = *v128;
        long long v164 = v128[1];
        long long v165 = v128[2];
        long long v166 = v128[3];
        long long v167 = *(_OWORD *)(v126 + 96);
        unint64_t v127 = *(void *)(v15 + 104);
        if (v127 <= v13) {
          goto LABEL_190;
        }
        int v129 = *(_DWORD *)(v126 + 112);
        int v130 = *(_DWORD *)(v126 + 128);
        uint64_t result = re::DataArray<re::TextureAtlasTile>::get(v8, *(void *)(*(void *)(v15 + 112) + 8 * v13));
        v173[0] = *(_OWORD *)result;
        LODWORD(v173[1]) = *(_DWORD *)(result + 16);
        __int16 v131 = *(_WORD *)(result + 20);
        *(unsigned char *)(v152 + 160) = 1;
        if (v141 <= v14) {
          goto LABEL_191;
        }
        unint64_t v132 = v140 + 192 * v14++;
        *(_OWORD *)(v132 + 80) = v164;
        *(_OWORD *)(v132 + 96) = v165;
        *(_OWORD *)(v132 + 112) = v166;
        *(_OWORD *)(v132 + 12re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v167;
        *(_OWORD *)(v132 + 16) = v160;
        *(_OWORD *)(v132 + 32) = v161;
        *(_OWORD *)(v132 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v162;
        *(_OWORD *)(v132 + 64) = v163;
        *(float32x4_t *)unint64_t v132 = v159;
        *(_DWORD *)(v132 + 144) = v129;
        *(_DWORD *)(v132 + 14re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v130;
        *(_DWORD *)(v132 + 152) = 3;
        *(_OWORD *)(v132 + 156) = v173[0];
        *(_DWORD *)(v132 + 172) = v173[1];
        *(_WORD *)(v132 + 176) = v131;
        unint64_t v124 = *(void *)(v15 + 16);
      }
      ++v13;
      v5 += 64;
      v17 += 144;
      if (v13 >= v124) {
        goto LABEL_175;
      }
    }
LABEL_186:
    *(void *)long long v174 = 0;
    long long v162 = 0u;
    long long v163 = 0u;
    long long v160 = 0u;
    long long v161 = 0u;
    float32x4_t v159 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(v181[0]) = 136315906;
    *(void *)((char *)v181 + 4) = "operator[]";
    WORD6(v181[0]) = 1024;
    *(_DWORD *)((char *)v181 + 14) = 476;
    WORD1(v181[1]) = 2048;
    *(void *)((char *)&v181[1] + 4) = v13;
    WORD6(v181[1]) = 2048;
    *(void *)((char *)&v181[1] + 14) = v125;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_187:
    *(void *)&v173[0] = 0;
    long long v182 = 0u;
    long long v183 = 0u;
    memset(v181, 0, sizeof(v181));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)long long v174 = 136315906;
    *(void *)&v174[4] = "operator[]";
    __int16 v175 = 1024;
    int v176 = 468;
    __int16 v177 = 2048;
    unint64_t v178 = v5;
    __int16 v179 = 2048;
    unint64_t v180 = v15;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_188:
    long long v182 = 0u;
    long long v183 = 0u;
    memset(v181, 0, sizeof(v181));
    unint64_t v127 = &_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)long long v174 = 136315906;
    *(void *)&v174[4] = "operator[]";
    __int16 v175 = 1024;
    int v176 = 468;
    __int16 v177 = 2048;
    unint64_t v178 = v5;
    __int16 v179 = 2048;
    unint64_t v180 = v17;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_189:
    *(void *)&v173[0] = 0;
    long long v182 = 0u;
    long long v183 = 0u;
    memset(v181, 0, sizeof(v181));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)long long v174 = 136315906;
    *(void *)&v174[4] = "operator[]";
    __int16 v175 = 1024;
    int v176 = 476;
    __int16 v177 = 2048;
    unint64_t v178 = v13;
    __int16 v179 = 2048;
    unint64_t v180 = v127;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_190:
    *(void *)&v173[0] = 0;
    long long v182 = 0u;
    long long v183 = 0u;
    memset(v181, 0, sizeof(v181));
    unint64_t v64 = &_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)long long v174 = 136315906;
    *(void *)&v174[4] = "operator[]";
    __int16 v175 = 1024;
    int v176 = 476;
    __int16 v177 = 2048;
    unint64_t v178 = v13;
    __int16 v179 = 2048;
    unint64_t v180 = v127;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_191:
    long long v182 = 0u;
    long long v183 = 0u;
    memset(v181, 0, sizeof(v181));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)long long v174 = 136315906;
    *(void *)&v174[4] = "operator[]";
    __int16 v175 = 1024;
    int v176 = 468;
    __int16 v177 = 2048;
    unint64_t v178 = v14;
    __int16 v179 = 2048;
    unint64_t v180 = v141;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_192:
    *(void *)&v173[0] = 0;
    long long v182 = 0u;
    long long v183 = 0u;
    memset(v181, 0, sizeof(v181));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)long long v174 = 136315906;
    *(void *)&v174[4] = "operator[]";
    __int16 v175 = 1024;
    int v176 = 476;
    __int16 v177 = 2048;
    unint64_t v178 = v8;
    __int16 v179 = 2048;
    unint64_t v180 = v15;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_193:
    *(void *)&v173[0] = 0;
    long long v182 = 0u;
    long long v183 = 0u;
    memset(v181, 0, sizeof(v181));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)long long v174 = 136315906;
    *(void *)&v174[4] = "operator[]";
    __int16 v175 = 1024;
    int v176 = 476;
    __int16 v177 = 2048;
    unint64_t v178 = v8;
    __int16 v179 = 2048;
    unint64_t v180 = v15;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_194:
    long long v182 = 0u;
    long long v183 = 0u;
    memset(v181, 0, sizeof(v181));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)long long v174 = 136315906;
    *(void *)&v174[4] = "operator[]";
    __int16 v175 = 1024;
    int v176 = 476;
    __int16 v177 = 2048;
    unint64_t v178 = v8;
    __int16 v179 = 2048;
    unint64_t v180 = v64;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_195:
    long long v182 = 0u;
    long long v183 = 0u;
    memset(v181, 0, sizeof(v181));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)long long v174 = 136315906;
    *(void *)&v174[4] = "operator[]";
    __int16 v175 = 1024;
    int v176 = 476;
    __int16 v177 = 2048;
    unint64_t v178 = v8;
    __int16 v179 = 2048;
    unint64_t v180 = v17;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_196;
  }
  return result;
}

uint64_t re::LightContexts::addPerMeshLightContext(uint64_t a1, unsigned int a2, unint64_t a3, __n128 *a4)
{
  __int16 v29 = a2;
  unint64_t v28 = a3;
  unsigned __int8 v7 = a4[10].n128_u8[0];
  uint64_t v8 = *(void *)(a1 + 40);
  re::BucketArray<re::LightContext,16ul>::add(a1, a4);
  *(unsigned char *)(a1 + 288) |= v7;
  uint64_t v9 = *(void *)(a1 + 56);
  LODWORD(v25) = 0;
  long long v27 = 0u;
  memset(v26, 0, sizeof(v26));
  DWORD1(v27) = 0x7FFFFFFF;
  unint64_t v10 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * a2) ^ ((0xBF58476D1CE4E5B9 * a2) >> 27));
  unint64_t v11 = v10 ^ (v10 >> 31);
  if (v9)
  {
    unint64_t v12 = v11 % *(unsigned int *)(a1 + 80);
    uint64_t v13 = *(unsigned int *)(*(void *)(a1 + 64) + 4 * v12);
    if (v13 != 0x7FFFFFFF)
    {
      uint64_t v14 = *(void *)(a1 + 72);
      if (*(unsigned __int16 *)(v14 + 72 * v13 + 12) == a2)
      {
LABEL_6:
        uint64_t v15 = v14 + 72 * v13;
        goto LABEL_9;
      }
      while (1)
      {
        LODWORD(v13) = *(_DWORD *)(v14 + 72 * v13 + 8) & 0x7FFFFFFF;
        if (v13 == 0x7FFFFFFF) {
          break;
        }
        if (*(unsigned __int16 *)(v14 + 72 * v13 + 12) == a2) {
          goto LABEL_6;
        }
      }
    }
  }
  else
  {
    LODWORD(v12) = 0;
  }
  unsigned int v16 = re::HashTable<unsigned short,re::LightContexts::LightContextContents,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::addAsMove(a1 + 56, v12, v11, &v29, &v25);
  ++*(_DWORD *)(a1 + 96);
  uint64_t v15 = *(void *)(a1 + 72) + 72 * v16;
LABEL_9:
  uint64_t v17 = v15 + 16;
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)v26);
  uint64_t result = v17 + 8;
  uint64_t v19 = *(void *)(v17 + 8);
  LODWORD(v25) = v8;
  unint64_t v20 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (a3 ^ (a3 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a3 ^ (a3 >> 30))) >> 27));
  unint64_t v21 = v20 ^ (v20 >> 31);
  if (v19)
  {
    unint64_t v22 = v21 % *(unsigned int *)(v17 + 32);
    uint64_t v23 = *(unsigned int *)(*(void *)(v17 + 16) + 4 * v22);
    if (v23 != 0x7FFFFFFF)
    {
      uint64_t v24 = *(void *)(v17 + 24);
      if (*(void *)(v24 + 32 * v23 + 16) == a3) {
        return result;
      }
      while (1)
      {
        uint64_t v23 = *(_DWORD *)(v24 + 32 * v23 + 8) & 0x7FFFFFFF;
        if (v23 == 0x7FFFFFFF) {
          break;
        }
        if (*(void *)(v24 + 32 * v23 + 16) == a3) {
          return result;
        }
      }
    }
  }
  else
  {
    LODWORD(v22) = 0;
  }
  uint64_t result = re::HashTable<unsigned long long,unsigned int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(result, v22, v21, &v28, &v25);
  ++*(_DWORD *)(v17 + 48);
  return result;
}

void *re::DynamicArray<re::SingleCullingFrustum>::add(uint64_t a1, unint64_t *a2)
{
  unint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = *(void *)(a1 + 16);
  if (v5 >= v4)
  {
    unint64_t v6 = v5 + 1;
    if (v4 < v5 + 1)
    {
      if (*(void *)a1)
      {
        uint64_t v7 = 2 * v4;
        BOOL v8 = v4 == 0;
        unint64_t v9 = 8;
        if (!v8) {
          unint64_t v9 = v7;
        }
        if (v9 <= v6) {
          unint64_t v10 = v6;
        }
        else {
          unint64_t v10 = v9;
        }
        re::DynamicArray<re::SingleCullingFrustum>::setCapacity((void *)a1, v10);
      }
      else
      {
        re::DynamicArray<re::SingleCullingFrustum>::setCapacity((void *)a1, v6);
        ++*(_DWORD *)(a1 + 24);
      }
    }
    unint64_t v5 = *(void *)(a1 + 16);
  }
  uint64_t v11 = *(void *)(a1 + 32) + 240 * v5;
  *(void *)uint64_t v11 = 0;
  *(_DWORD *)(v11 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  re::DynamicInlineArray<re::PlaneF,6ul>::move((unint64_t *)v11, a2);
  *(_OWORD *)(v11 + 112) = 0u;
  v11 += 112;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
  *(_OWORD *)(v11 + 16) = 0u;
  uint64_t result = memmove((void *)v11, a2 + 14, 0x80uLL);
  ++*(void *)(a1 + 16);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::LightContextBuilder::build@<X0>(uint64_t a1@<X0>, re::Allocator *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v13 = a6;
  uint64_t v669 = *MEMORY[0x263EF8340];
  if (a6)
  {
    uint64_t v17 = *(void *)(a6 + 40);
    if (v17)
    {
      unint64_t v18 = 0;
      do
      {
        uint64_t v19 = re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[](v13, v18);
        if (*(void *)(v19 + 16)) {
          goto LABEL_13;
        }
      }
      while (v17 != ++v18);
    }
  }
  if (a7)
  {
    uint64_t v20 = *(void *)(a7 + 40);
    if (v20)
    {
      unint64_t v21 = 0;
      while (1)
      {
        uint64_t v19 = re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[](a7, v21);
        if (*(void *)(v19 + 16)) {
          break;
        }
        if (v20 == ++v21) {
          goto LABEL_11;
        }
      }
LABEL_13:
      uint64_t v23 = (_OWORD **)(v19 + 32);
      goto LABEL_17;
    }
  }
LABEL_11:
  if (*(void *)(a8 + 40))
  {
    unint64_t v22 = (void *)re::BucketArray<re::DynamicArray<re::CameraView> const*,4ul>::operator[](a8, 0);
  }
  else
  {
    if (!*(void *)(a8 + 96))
    {
LABEL_48:
      return re::LightContextBuilder::Result::Result(a9, a2);
    }
    unint64_t v22 = (void *)re::BucketArray<re::DynamicArray<re::CameraView> const*,4ul>::operator[](a8 + 56, 0);
  }
  uint64_t v23 = (_OWORD **)(*v22 + 32);
LABEL_17:
  uint64_t v24 = *v23;
  if (!*v23) {
    goto LABEL_48;
  }
  v592 = a2;
  v635.columns[0].i16[0] = 0;
  simd_float4 v656 = 0u;
  simd_float4 v657 = (simd_float4)1uLL;
  simd_float4 v658 = 0uLL;
  v659.columns[1].i64[1] = 1;
  memset(&v659, 0, 24);
  memset(&v659.columns[2], 0, 32);
  float32x4_t v660 = 0u;
  *(_OWORD *)v661 = 1uLL;
  memset(&v661[16], 0, 40);
  *(void *)&v661[56] = 1;
  *(_OWORD *)&v661[64] = 0uLL;
  long long v662 = 0uLL;
  int v666 = 0;
  memset(v664, 0, sizeof(v664));
  *(_OWORD *)v663 = 0u;
  *(_OWORD *)&v663[16] = 1uLL;
  *(_OWORD *)&v663[32] = 0uLL;
  int v665 = 1;
  memset(v667, 0, sizeof(v667));
  re::SmallHashTable<unsigned short,re::LightContextBuilder::LightArrays,8ul,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true>::add(a1 + 88, (__int16 *)&v635, (uint64_t)&v656);
  re::BucketArray<re::LightContextBuilder::RectAreaLightBucket,4ul>::deinit((uint64_t)&v664[8]);
  if (*(void *)&v664[8])
  {
    int v25 = v665;
    if ((v665 & 1) == 0)
    {
      (*(void (**)(void))(**(void **)&v664[8] + 40))();
      int v25 = v665;
    }
    *(void *)&v664[8] = 0;
    *(void *)&v664[16] = 0;
    int v665 = (v25 | 1) + 2;
  }
  re::BucketArray<re::LightContextBuilder::PointLightBucket,4ul>::deinit((uint64_t)v663);
  if (*(void *)v663)
  {
    int v26 = *(_DWORD *)&v663[16];
    if ((v663[16] & 1) == 0)
    {
      (*(void (**)(void))(**(void **)v663 + 40))();
      int v26 = *(_DWORD *)&v663[16];
    }
    *(_OWORD *)v663 = 0uLL;
    *(_DWORD *)&v663[16] = (v26 | 1) + 2;
  }
  re::BucketArray<re::LightContextBuilder::SpotLightBucket,4ul>::deinit((uint64_t)&v661[40]);
  if (*(void *)&v661[40])
  {
    int v27 = *(_DWORD *)&v661[56];
    if ((v661[56] & 1) == 0)
    {
      (*(void (**)(void))(**(void **)&v661[40] + 40))();
      int v27 = *(_DWORD *)&v661[56];
    }
    *(void *)&v661[40] = 0;
    *(void *)&v661[48] = 0;
    *(_DWORD *)&v661[56] = (v27 | 1) + 2;
  }
  re::BucketArray<re::LightContextBuilder::RealWorldProxyLightBucket,4ul>::deinit((uint64_t)&v660);
  if (v660.i64[0])
  {
    int v28 = *(_DWORD *)v661;
    if ((v661[0] & 1) == 0)
    {
      (*(void (**)(void))(*(void *)v660.i64[0] + 40))();
      int v28 = *(_DWORD *)v661;
    }
    float32x4_t v660 = 0uLL;
    *(_DWORD *)v661 = (v28 | 1) + 2;
  }
  re::BucketArray<re::LightContextBuilder::DirectionalLightBucket,4ul>::deinit((uint64_t)&v659.columns[0].i64[1]);
  if (v659.columns[0].i64[1])
  {
    __int32 v29 = v659.columns[1].i32[2];
    if ((v659.columns[1].i8[8] & 1) == 0)
    {
      (*(void (**)(void))(*(void *)v659.columns[0].i64[1] + 40))();
      __int32 v29 = v659.columns[1].i32[2];
    }
    v659.columns[0].i64[1] = 0;
    v659.columns[1].i64[0] = 0;
    v659.columns[1].i32[2] = (v29 | 1) + 2;
  }
  re::BucketArray<re::LightContextBuilder::AmbientLightBucket,4ul>::deinit((uint64_t)&v656);
  if (v656.i64[0] && (v657.i8[0] & 1) == 0) {
    (*(void (**)(void))(*(void *)v656.i64[0] + 40))();
  }
  int v34 = *(_DWORD *)(a1 + 2964);
  uint64_t v545 = a7;
  uint64_t v546 = a9;
  if (v34)
  {
    uint64_t v35 = (unsigned __int16 *)(a1 + 2936);
    uint64_t v30 = *(unsigned int *)(a1 + 2968);
    if (v30)
    {
      uint64_t v36 = 0;
      uint64_t v37 = *(_DWORD **)(a1 + 2952);
      while ((*v37 & 0x80000000) == 0)
      {
        v37 += 88;
        if (v30 == ++v36)
        {
          LODWORD(v36) = *(_DWORD *)(a1 + 2968);
          break;
        }
      }
      uint64_t v31 = v36;
    }
    else
    {
      uint64_t v31 = 0;
    }
    uint64_t v39 = a1 + 2936;
  }
  else
  {
    uint64_t v35 = (unsigned __int16 *)(a1 + 120);
    uint64_t v39 = a1 + 120 + 352 * *(void *)(a1 + 104);
  }
  BOOL v40 = v35 == (unsigned __int16 *)v39;
  if (v34) {
    BOOL v40 = v30 == v31;
  }
  uint64_t v591 = a1;
  if (!v40)
  {
    uint64_t v544 = a1 + 40;
    unint64_t i5 = 144;
    v45.i64[0] = 0;
    v46.i64[0] = 0;
    v595.i8[0] = 0;
    nunint64_t n = (unint64_t)&v655;
    unint64_t v48 = (unint64_t)v622;
    uint64_t v542 = v13;
    uint64_t v543 = a8;
    v593 = v24;
    int v541 = *(_DWORD *)(a1 + 2964);
    uint64_t v539 = v39;
    int v540 = v30;
    while (1)
    {
      uint64_t v547 = v31;
      v548 = v35;
      if (v34)
      {
        uint64_t v49 = *((void *)v35 + 2) + 352 * v31;
        unint64_t v50 = (unsigned __int16 *)(v49 + 4);
        long long v51 = (void *)(v49 + 8);
      }
      else
      {
        long long v51 = v35 + 4;
        unint64_t v50 = v35;
      }
      int v52 = *v50;
      if (*(void *)(a1 + 16))
      {
        uint64_t v53 = re::BucketArray<re::LightContextBuilder::DirectionalLightBucket,4ul>::addUninitialized((uint64_t)(v51 + 7));
        uint64_t v54 = v53;
        *(void *)(v53 + 32) = 0;
        *(void *)(v53 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
        *(void *)(v53 + 16) = 0;
        *(void *)uint64_t v53 = 0;
        *(_DWORD *)(v53 + 24) = 0;
        if (*(void *)a1)
        {
          unint64_t v55 = *(void *)(a1 + 16);
          *(void *)uint64_t v53 = *(void *)a1;
          re::DynamicArray<re::DirectionalLightInfo>::setCapacity((void *)v53, v55);
          ++*(_DWORD *)(v54 + 24);
          re::DynamicArray<re::DirectionalLightInfo>::copy((void *)v54, a1);
        }
        re::FixedArray<re::Matrix4x4<float>>::FixedArray((uint64_t *)(v54 + 40), v544);
        *(void *)(v54 + 64) = 0;
        *(void *)(v54 + 72) = 0;
        *(void *)(v54 + 80) = 0;
        uint64_t v56 = *(void *)(a1 + 64);
        if (v56)
        {
          re::FixedArray<re::DataArrayHandle<re::DeformationStack>>::init<>((void *)(v54 + 64), v56, *(void *)(a1 + 72));
          uint64_t v58 = *(void *)(a1 + 72);
          if (*(void *)(v54 + 72) != v58) {
            goto LABEL_690;
          }
          if (v58) {
            memmove(*(void **)(v54 + 80), *(const void **)(a1 + 80), 8 * v58);
          }
        }
      }
      for (uint64_t i = 0; i != 256; i += 32)
      {
        __int16 v60 = (char *)&v656 + i;
        *(void *)__int16 v60 = 0;
        *((void *)v60 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
        v60[16] = 0;
      }
      for (uint64_t j = 0; j != 256; j += 32)
      {
        char v62 = (char *)&v635 + j;
        *(void *)char v62 = 0;
        *((void *)v62 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
        unsigned char v62[16] = 0;
      }
      v550 = v51;
      if (v51[12] || v51[19] || v51[26])
      {
        re::LightContextBuilder::computeSceneBoundingBoxCorners((uint64_t)v622, a3, a4, v52, 0, *(double *)v45.i64, *(double *)v46.i64, v32, v33);
        *(_OWORD *)&v661[64] = v631;
        long long v662 = v632;
        *(float32x4_t *)v663 = v633;
        v663[16] = v634;
        *(_OWORD *)v661 = v627;
        *(_OWORD *)&v661[16] = v628;
        *(_OWORD *)&v661[32] = v629;
        *(_OWORD *)&v661[48] = v630;
        v659.columns[1] = v623;
        v659.columns[2] = v624;
        v659.columns[3] = v625;
        float32x4_t v660 = v626;
        simd_float4 v656 = (simd_float4)v622[0];
        simd_float4 v657 = (simd_float4)v622[1];
        simd_float4 v658 = (simd_float4)v622[2];
        v659.columns[0] = (simd_float4)v622[3];
        re::LightContextBuilder::computeSceneBoundingBoxCorners((uint64_t)v622, a3, a4, v52, 1, *(double *)v622[2].i64, *(double *)v622[3].i64, v63, v64);
        long long v644 = v631;
        long long v645 = v632;
        float32x4_t v646 = v633;
        char v647 = v634;
        long long v640 = v627;
        long long v641 = v628;
        long long v642 = v629;
        long long v643 = v630;
        simd_float4 v636 = v623;
        simd_float4 v637 = v624;
        simd_float4 v638 = v625;
        float32x4_t v639 = v626;
        v635.columns[0] = (simd_float4)v622[0];
        v635.columns[1] = (simd_float4)v622[1];
        v45.i64[0] = v622[2].i64[0];
        v46.i64[0] = v622[3].i64[0];
        v635.columns[2] = (simd_float4)v622[2];
        v635.columns[3] = (simd_float4)v622[3];
        uint64_t v65 = *(void *)(a1 + 2984);
        uint64_t v559 = v51[12];
        if (v559)
        {
          unint64_t v66 = 0;
          int v67 = *(unsigned __int8 *)(a1 + 3032);
          uint64_t v555 = (uint64_t)(v51 + 7);
          uint64_t v538 = *(void *)(a1 + 2984);
          uint64_t v572 = v65 + 8;
          do
          {
            unint64_t v565 = v66;
            BOOL v68 = (uint64_t *)re::BucketArray<re::SkinningModelBuilder::RawSkinnedMeshPartData,4ul>::operator[](v555, v66);
            unint64_t v69 = v68[2];
            unint64_t i4 = 1;
            if (v68[2])
            {
              for (unint64_t k = 0; k < v68[2]; ++k)
              {
                uint64_t v72 = v68[4];
                unint64_t v73 = v72 + 144 * k;
                if (*(unsigned char *)(v73 + 135))
                {
                  re::LightContextBuilder::calculateDirectionalLightBoundsWithCameraView((float32x4_t *)v648, v24, (float32x4_t *)&v656, (float32x4_t *)v73, 1, v67 != 0, 1, *(float *)(v72 + 144 * k + 124));
                  if (vabds_f32(*(float *)v648, *(float *)&re::LightContextBuilder::globalBounds) >= 0.5
                    || vabds_f32(*(float *)&v648[4], *((float *)&re::LightContextBuilder::globalBounds + 1)) >= 0.5
                    || vabds_f32(*(float *)&v648[8], *((float *)&re::LightContextBuilder::globalBounds + 2)) >= 0.5
                    || vabds_f32(*(float *)&v648[16], *(float *)&dword_26879B9E0) >= 0.5)
                  {
                    re::LightContextBuilder::globalBounds = *(_OWORD *)v648;
                    v74.i32[1] = *(_DWORD *)&v648[16];
                    *(long long *)((char *)&re::LightContextBuilder::globalBounds + 12) = *(_OWORD *)&v648[12];
                  }
                  if (v67)
                  {
                    v74.i32[0] = dword_26879B9E0;
                    float32x4_t v75 = (float32x4_t)v635.columns[0];
                    float32x4_t v76 = vmulq_f32(v75, v75);
                    double v32 = COERCE_DOUBLE(vdup_lane_s32(v74, 0));
                    if (fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v76, 2), vaddq_f32(v76, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v76.f32, 1))).f32[0]) >= 1.0e-10)
                    {
                      uint64_t v84 = 0;
                      float32x4_t v85 = (float32x4_t)re::LightContextBuilder::globalBounds;
                      char v86 = 1;
LABEL_98:
                      float32x4_t v87 = vsubq_f32((float32x4_t)v635.columns[2 * v84], v85);
                      float32x4_t v88 = vmulq_f32(v87, v87);
                      if (sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v88, 2), vaddq_f32(v88, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v88.f32, 1))).f32[0]) > *(float *)v74.i32)
                      {
LABEL_103:
                        long long v93 = &v635.columns[2 * v84++ + 2];
                        while (1)
                        {
                          v93[-1].i8[0] = 1;
                          if (v84 == 8) {
                            break;
                          }
                          float32x4_t v94 = *(float32x4_t *)v93;
                          v93 += 2;
                          float32x4_t v95 = vsubq_f32(v94, v85);
                          float32x4_t v96 = vmulq_f32(v95, v95);
                          ++v84;
                          if (sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v96, 2), vaddq_f32(v96, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v96.f32, 1))).f32[0]) <= *(float *)v74.i32)
                          {
                            char v86 = 0;
                            if (v84 != 8) {
                              goto LABEL_98;
                            }
                            goto LABEL_119;
                          }
                        }
                        if ((v86 & 1) == 0) {
                          goto LABEL_119;
                        }
                        float32x4_t v104 = v85;
                        v104.i32[3] = *(_DWORD *)(v73 + 92);
                        *(float32x4_t *)(v73 + 80) = v104;
                        float32x4_t v105 = v85;
                      }
                      else
                      {
                        unint64_t v89 = &v635.columns[2 * v84 + 2];
                        while (v84 != 7)
                        {
                          float32x4_t v90 = *(float32x4_t *)v89;
                          v89 += 2;
                          float32x4_t v91 = vsubq_f32(v90, v85);
                          float32x4_t v92 = vmulq_f32(v91, v91);
                          ++v84;
                          if (sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v92, 2), vaddq_f32(v92, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v92.f32, 1))).f32[0]) > *(float *)v74.i32)
                          {
                            char v86 = 0;
                            goto LABEL_103;
                          }
                        }
                        if (v86)
                        {
                          v106.i64[0] = 0x3F0000003F000000;
                          v106.i64[1] = 0x3F0000003F000000;
                          float32x4_t v105 = vmulq_f32(vaddq_f32(v75, v646), v106);
                          float32x4_t v107 = v105;
                          v107.i32[3] = *(_DWORD *)(v73 + 92);
                          *(float32x4_t *)(v73 + 80) = v107;
                          v107.i32[0] = vextq_s8((int8x16_t)v105, (int8x16_t)v105, 8uLL).u32[0];
                          v107.i32[1] = v105.i32[0];
                          v108.i32[0] = vextq_s8((int8x16_t)v75, (int8x16_t)v75, 8uLL).u32[0];
                          v108.i32[1] = v75.i32[0];
                          double v32 = COERCE_DOUBLE(vabd_f32(*(float32x2_t *)v107.f32, v108));
                        }
                        else
                        {
LABEL_119:
                          uint64_t v109 = 0;
                          float32x4_t v110 = 0uLL;
                          do
                          {
                            float32x4_t v111 = (float32x4_t)v635.columns[v109];
                            if (v635.columns[v109 + 1].i8[0])
                            {
                              float32x4_t v112 = vsubq_f32(v111, v85);
                              int32x4_t v113 = (int32x4_t)vmulq_f32(v112, v112);
                              v113.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v113, 2), vadd_f32(*(float32x2_t *)v113.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v113.i8, 1))).u32[0];
                              float32x2_t v114 = vrsqrte_f32((float32x2_t)v113.u32[0]);
                              float32x2_t v115 = vmul_f32(v114, vrsqrts_f32((float32x2_t)v113.u32[0], vmul_f32(v114, v114)));
                              float32x4_t v111 = vaddq_f32(v85, vmulq_n_f32(vmulq_n_f32(v112, vmul_f32(v115, vrsqrts_f32((float32x2_t)v113.u32[0], vmul_f32(v115, v115))).f32[0]), *(float *)v74.i32));
                              v635.columns[v109] = (simd_float4)v111;
                            }
                            float32x4_t v110 = vaddq_f32(v110, v111);
                            v109 += 2;
                          }
                          while (v109 != 16);
                          uint64_t v116 = 0;
                          v117.i64[0] = 0x3E0000003E000000;
                          v117.i64[1] = 0x3E0000003E000000;
                          float32x4_t v105 = vmulq_f32(v110, v117);
                          float32x4_t v118 = v105;
                          v118.i32[3] = *(_DWORD *)(v73 + 92);
                          *(float32x4_t *)(v73 + 80) = v118;
                          v119.i32[0] = vextq_s8((int8x16_t)v105, (int8x16_t)v105, 8uLL).u32[0];
                          v119.i32[1] = v105.i32[0];
                          double v32 = 0.0;
                          do
                          {
                            v120.i32[0] = v635.columns[v116].i32[2];
                            v120.i32[1] = v635.columns[v116].i32[0];
                            float32x2_t v121 = vabd_f32(v120, v119);
                            double v32 = COERCE_DOUBLE(vbsl_s8((int8x8_t)vcgt_f32(v121, *(float32x2_t *)&v32), (int8x8_t)v121, *(int8x8_t *)&v32));
                            v116 += 2;
                          }
                          while (v116 != 16);
                        }
                      }
                      LODWORD(v122) = vsubq_f32(v105, v85).i32[1];
                      float v78 = v122 - *(float *)v74.i32;
                      float v77 = *(float *)v74.i32 + v122;
                    }
                    else
                    {
                      float v77 = 10.0;
                      float v78 = 0.01;
                    }
                    unint64_t v73 = v68[6];
                    if (v73 <= k) {
                      goto LABEL_458;
                    }
                    float v123 = v77 + (float)(fabsf(v77) * 0.3);
                    float v124 = v123 - (float)(v78 - (float)(fabsf(v78) * 0.3));
                    *(float *)&unsigned int v125 = v123 / v124;
                    v45.i64[0] = 0;
                    v45.i64[1] = __PAIR64__(1.0, v125);
                    *(float *)&unsigned int v126 = 1.0 / v124;
                    v46.i64[0] = 0;
                    v46.i64[1] = v126;
                    v33.n128_u32[0] = 0;
                    v33.n128_u64[1] = 0;
                    v33.n128_f32[1] = 2.0 / (float)(*(float *)&v32 + *(float *)&v32);
                    *(float *)&double v32 = 2.0 / (float)(*((float *)&v32 + 1) + *((float *)&v32 + 1));
                  }
                  else
                  {
                    long long v83 = re::LightContextBuilder::globalBounds;
                    HIDWORD(v83) = *(_DWORD *)(v73 + 92);
                    *(_OWORD *)(v73 + 80) = v83;
                    unint64_t v73 = v68[6];
                    if (v73 <= k)
                    {
                      *(void *)v650 = 0;
                      simd_float4 v623 = 0u;
                      memset(v622, 0, sizeof(v622));
                      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                      v655.columns[0].i32[0] = 136315906;
                      *(uint64_t *)((char *)v655.columns[0].i64 + 4) = (uint64_t)"operator[]";
                      v655.columns[0].i16[6] = 1024;
                      *(__int32 *)((char *)&v655.columns[0].i32[3] + 2) = 468;
                      v655.columns[1].i16[1] = 2048;
                      *(uint64_t *)((char *)v655.columns[1].i64 + 4) = k;
                      v655.columns[1].i16[6] = 2048;
                      *(uint64_t *)((char *)&v655.columns[1].i64[1] + 6) = v73;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
                      goto LABEL_463;
                    }
                    v45.i64[0] = 0;
                    *(float *)&v45.i32[2] = unk_26879B9E8 / (float)(unk_26879B9E8 - *(float *)&dword_26879B9E4);
                    v45.i32[3] = 1.0;
                    v46.i64[0] = 0;
                    v46.i32[3] = 0;
                    *(float *)&v46.i32[2] = 1.0 / (float)(unk_26879B9E8 - *(float *)&dword_26879B9E4);
                    *(float *)&double v32 = 2.0 / (float)(*(float *)&dword_26879B9E0 + *(float *)&dword_26879B9E0);
                    v33.n128_u32[0] = 0;
                    v33.n128_u64[1] = 0;
                    v33.n128_f32[1] = *(float *)&v32;
                  }
                  unint64_t v127 = (_OWORD *)(v68[7] + (k << 6));
                  *unint64_t v127 = LODWORD(v32);
                  v127[1] = v33;
                  v127[2] = v46;
                  v127[3] = v45;
                }
                else
                {
                  unint64_t i4 = v68[9];
                  if (i4 <= k) {
                    goto LABEL_459;
                  }
                  int v79 = *(unsigned __int8 *)(v72 + 144 * k + 134);
                  uint64_t v80 = *(void *)(v68[10] + 8 * k);
                  if (*(unsigned char *)(v72 + 144 * k + 136))
                  {
                    re::LightContextBuilder::calculateDirectionalLightBoundsWithCameraView(v622, v593, (float32x4_t *)&v656, (float32x4_t *)v73, 0, 0, *(unsigned char *)(v72 + 144 * k + 137), *(float *)(v72 + 144 * k + 124));
                    float32x4_t v81 = v622[0];
                    LODWORD(v32) = v622[1].i32[1];
                    float v82 = v622[1].f32[0];
                    v45.i32[0] = v622[1].i32[2];
                    __n128 v33 = *(__n128 *)(v73 + 80);
                  }
                  else
                  {
                    __n128 v33 = *(__n128 *)(v73 + 80);
                    float v82 = *(float *)(v72 + 144 * k + 140) * 0.5;
                    LODWORD(v32) = *(_DWORD *)(v73 + 116);
                    v45.i32[0] = *(_DWORD *)(v73 + 120);
                    float32x4_t v81 = (float32x4_t)v33;
                  }
                  v81.i32[3] = v33.n128_i32[3];
                  *(float32x4_t *)(v73 + 80) = v81;
                  *(float *)&double v32 = *(float *)v45.i32 - *(float *)&v32;
                  v33.n128_f32[0] = 1.0 / *(float *)&v32;
                  v97.i32[1] = 0;
                  v97.i64[1] = 0;
                  v97.f32[0] = 2.0 / (float)(v82 + v82);
                  v98.i32[0] = 0;
                  v98.i64[1] = 0;
                  v98.f32[1] = v97.f32[0];
                  v99.i64[0] = 0;
                  v99.i32[3] = 0;
                  v99.f32[2] = 1.0 / *(float *)&v32;
                  *(float *)v45.i32 = *(float *)v45.i32 / *(float *)&v32;
                  v46.i64[0] = 0;
                  v46.i64[1] = __PAIR64__(1.0, v45.u32[0]);
                  if (v79)
                  {
                    float32x4_t v605 = v98;
                    float32x4_t v612 = v97;
                    float32x4_t v596 = (float32x4_t)v46;
                    float32x4_t v600 = v99;
                    int32x2_t v10 = *(int32x2_t *)re::DataArray<re::TextureAtlasTile>::get(v572, v80);
                    simd_float4x4 v671 = __invert_f4(*(simd_float4x4 *)(v73 + 32));
                    float32x4_t v99 = v600;
                    float32x4_t v98 = v605;
                    float32x4_t v97 = v612;
                    uint64_t v100 = 0;
                    simd_float4x4 v655 = v671;
                    do
                    {
                      v622[v100] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v612, COERCE_FLOAT(*(_OWORD *)&v655.columns[v100])), v605, *(float32x2_t *)v655.columns[v100].f32, 1), v600, (float32x4_t)v655.columns[v100], 2), v596, (float32x4_t)v655.columns[v100], 3);
                      ++v100;
                    }
                    while (v100 != 4);
                    float32x2_t v101 = vcvt_f32_u32((uint32x2_t)vadd_s32(v10, (int32x2_t)0x500000005));
                    __n128 v33 = (__n128)v622[2];
                    float32x4_t v102 = vmlaq_f32(vmlaq_f32(vmulq_f32(v622[0], (float32x4_t)0), (float32x4_t)0, v622[1]), (float32x4_t)0, v622[2]);
                    *(float32x2_t *)v102.f32 = vmul_f32(vmul_f32(v101, (float32x2_t)0x3F0000003F000000), vadd_f32(*(float32x2_t *)v622[3].f32, *(float32x2_t *)v102.f32));
                    *(void *)&double v32 = vrndaq_f32(v102).u64[0];
                    *(float32x2_t *)v45.i8 = vadd_f32(vmul_f32(vdiv_f32((float32x2_t)0x4000000040000000, v101), vsub_f32(*(float32x2_t *)&v32, *(float32x2_t *)v102.f32)), 0);
                    v45.i64[1] = vextq_s8((int8x16_t)v596, (int8x16_t)v596, 8uLL).u64[0];
                    int32x4_t v46 = v45;
                  }
                  uint64_t v24 = v593;
                  unint64_t i4 = 1;
                  unint64_t v73 = v68[6];
                  if (v73 <= k)
                  {
LABEL_460:
                    *(void *)v648 = 0;
                    simd_float4 v623 = 0u;
                    memset(v622, 0, sizeof(v622));
                    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                    v655.columns[0].i32[0] = 136315906;
                    *(uint64_t *)((char *)v655.columns[0].i64 + 4) = (uint64_t)"operator[]";
                    v655.columns[0].i16[6] = 1024;
                    *(__int32 *)((char *)&v655.columns[0].i32[3] + 2) = 468;
                    v655.columns[1].i16[1] = 2048;
                    *(uint64_t *)((char *)v655.columns[1].i64 + 4) = k;
                    v655.columns[1].i16[6] = 2048;
                    *(uint64_t *)((char *)&v655.columns[1].i64[1] + 6) = v73;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
LABEL_461:
                    uint64_t v330 = (unsigned __int16 *)(v73 + 120);
                    uint64_t v381 = v73 + 120 + 352 * *(void *)(v73 + 104);
                    goto LABEL_465;
                  }
                  char v103 = (float32x4_t *)(v68[7] + (k << 6));
                  *char v103 = v97;
                  v103[1] = v98;
                  v103[2] = v99;
                  v103[3] = (float32x4_t)v46;
                }
              }
            }
            unint64_t v66 = v565 + 1;
          }
          while (v565 + 1 != v559);
          long long v51 = v550;
          uint64_t v65 = v538;
        }
      }
      else
      {
        uint64_t v65 = *(void *)(a1 + 2984);
      }
      v564 = (uint64_t *)v51[19];
      if (v564) {
        break;
      }
LABEL_145:
      uint64_t v150 = v550[26];
      if (v150)
      {
        for (unint64_t m = 0; m != v150; ++m)
        {
          uint64_t v152 = re::BucketArray<re::ProjectiveShadowBuilder::Input::PerSceneData,4ul>::operator[]((uint64_t)(v550 + 21), m);
          unint64_t v153 = *(void *)(v152 + 16);
          if (v153)
          {
            uint64_t v154 = v152;
            unint64_t v155 = 0;
            v156.i64[0] = 0x3F0000003F000000;
            v156.i64[1] = 0x3F0000003F000000;
            int32x4_t v157 = (int32x4_t)vmulq_f32(vaddq_f32((float32x4_t)v656, *(float32x4_t *)v663), v156);
            int32x4_t v46 = vdupq_lane_s32(*(int32x2_t *)v157.i8, 1);
            float32x4_t v607 = (float32x4_t)v46;
            float v614 = *(float *)v157.i32;
            int32x4_t v45 = vdupq_laneq_s32(v157, 2);
            float32x4_t v602 = (float32x4_t)v45;
            uint64_t v158 = 116;
            do
            {
              uint64_t v159 = *(void *)(v154 + 32) + v158;
              if (*(unsigned char *)(v159 + 108))
              {
                simd_float4x4 v673 = __invert_f4(*(simd_float4x4 *)(v159 - 84));
                *(float *)v10.i32 = fabsf(COERCE_FLOAT(vaddq_f32(*(float32x4_t *)(&v673 + 48), vmlaq_f32(vmlaq_f32(vmulq_n_f32(*(float32x4_t *)&v673, v614), v607, *(float32x4_t *)(&v673 + 16)), v602, *(float32x4_t *)(&v673 + 32))).i32[2]));
                *(double *)v45.i64 = tan(*(float *)(v159 + 92) * 0.5);
                *(float *)v45.i32 = *(double *)v45.i64;
                *(float *)v46.i32 = *(float *)v159 * *(float *)v45.i32;
                if (*(float *)v46.i32 < (float)(*(float *)v10.i32 * *(float *)v45.i32)) {
                  *(float *)v46.i32 = *(float *)v10.i32 * *(float *)v45.i32;
                }
                v33.n128_u32[0] = 1140654080;
                *(float *)&double v32 = *(float *)v46.i32
                               + (float)((float)((float)(*(float *)v46.i32 + *(float *)v46.i32) / 506.0) * 3.0);
                float v160 = (float)(*(float *)&v32 * *(float *)v45.i32) / *(float *)v46.i32;
                v46.i32[0] = 1.0;
                *(float *)v45.i32 = 1.0 / v160;
                *(_DWORD *)(v159 + 32) = v45.i32[0];
                *(_DWORD *)(v159 + 12) = v45.i32[0];
                unint64_t v153 = *(void *)(v154 + 16);
              }
              ++v155;
              v158 += 240;
            }
            while (v155 < v153);
          }
        }
      }
      int v34 = v541;
      if (v541)
      {
        uint64_t v35 = v548;
        unsigned int v161 = v547 + 1;
        a1 = v591;
        a2 = v592;
        uint64_t v13 = v542;
        a8 = v543;
        uint64_t v24 = v593;
        long long v163 = (unsigned __int16 *)v539;
        int v162 = v540;
        do
        {
          uint64_t v31 = v161;
          if (v161 >= *((_DWORD *)v548 + 8)) {
            break;
          }
          ++v161;
        }
        while ((*(_DWORD *)(*((void *)v548 + 2) + 352 * v31) & 0x80000000) == 0);
      }
      else
      {
        uint64_t v31 = v547;
        uint64_t v35 = v548 + 176;
        a1 = v591;
        a2 = v592;
        uint64_t v13 = v542;
        a8 = v543;
        uint64_t v24 = v593;
        long long v163 = (unsigned __int16 *)v539;
        int v162 = v540;
      }
      BOOL v164 = v35 == v163;
      if (v541) {
        BOOL v164 = v162 == v31;
      }
      if (v164) {
        goto LABEL_57;
      }
    }
    unint64_t v128 = 0;
    uint64_t v129 = v65 + 8;
    while (1)
    {
      unint64_t v573 = v128;
      int v130 = (uint64_t *)re::BucketArray<re::ProjectiveShadowBuilder::Input::PerSceneData,4ul>::operator[]((uint64_t)(v550 + 14), v128);
      unint64_t v131 = v130[2];
      if (v130[2]) {
        break;
      }
LABEL_144:
      unint64_t v128 = v573 + 1;
      if ((uint64_t *)(v573 + 1) == v564) {
        goto LABEL_145;
      }
    }
    unint64_t v132 = 0;
    while (1)
    {
      unint64_t v133 = v130[13];
      if (v133 <= v132) {
        break;
      }
      uint64_t v134 = v130[4];
      unint64_t v135 = v134 + 144 * v132;
      uint64_t v136 = *(void *)(v130[14] + 8 * v132);
      if (*(unsigned char *)(v135 + 134))
      {
        re::LightContextBuilder::calculateDirectionalLightBoundsWithCameraView(v622, v24, (float32x4_t *)&v656, (float32x4_t *)v135, 0, 0, *(unsigned char *)(v134 + 144 * v132 + 140), *(float *)(v134 + 144 * v132 + 124));
        float32x4_t v137 = v622[0];
        float v139 = v622[1].f32[1];
        float v138 = v622[1].f32[0];
        float v140 = v622[1].f32[2];
        float32x4_t v141 = *(float32x4_t *)(v135 + 80);
      }
      else
      {
        float32x4_t v141 = *(float32x4_t *)(v135 + 80);
        float v138 = *(float *)(v134 + 144 * v132 + 136) * 0.5;
        float v139 = *(float *)(v135 + 116);
        float v140 = *(float *)(v135 + 120);
        float32x4_t v137 = v141;
      }
      v137.i32[3] = v141.i32[3];
      *(float32x4_t *)(v135 + 80) = v137;
      *(float *)&unsigned int v142 = 2.0 / (float)(v138 + v138);
      float v143 = v140 - v139;
      float32x4_t v613 = (float32x4_t)v142;
      LODWORD(v144) = 0;
      HIDWORD(v144) = v142;
      v145.i64[0] = 0;
      v145.i32[3] = 0;
      v145.f32[2] = 1.0 / v143;
      float32x4_t v601 = v145;
      float32x4_t v606 = (float32x4_t)v144;
      v145.i64[0] = 0;
      v145.i64[1] = __PAIR64__(1.0, v140 / v143);
      float32x4_t v597 = v145;
      int32x2_t v10 = *(int32x2_t *)re::DataArray<re::TextureAtlasTile>::get(v129, v136);
      simd_float4x4 v672 = __invert_f4(*(simd_float4x4 *)(v135 + 32));
      uint64_t v146 = 0;
      simd_float4x4 v655 = v672;
      do
      {
        v622[v146] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v613, COERCE_FLOAT(*(_OWORD *)&v655.columns[v146])), v606, *(float32x2_t *)v655.columns[v146].f32, 1), v601, (float32x4_t)v655.columns[v146], 2), v597, (float32x4_t)v655.columns[v146], 3);
        ++v146;
      }
      while (v146 != 4);
      unint64_t v133 = v130[10];
      if (v133 <= v132) {
        goto LABEL_203;
      }
      double v32 = *(double *)v622[2].i64;
      __n128 v33 = (__n128)v622[3];
      float32x2_t v147 = vcvt_f32_u32((uint32x2_t)vadd_s32(v10, (int32x2_t)0x500000005));
      float32x4_t v148 = vmlaq_f32(vmlaq_f32(vmulq_f32(v622[0], (float32x4_t)0), (float32x4_t)0, v622[1]), (float32x4_t)0, v622[2]);
      *(float32x2_t *)v148.f32 = vmul_f32(vmul_f32(v147, (float32x2_t)0x3F0000003F000000), vadd_f32(*(float32x2_t *)v622[3].f32, *(float32x2_t *)v148.f32));
      *(float32x2_t *)v45.i8 = vadd_f32(vmul_f32(vdiv_f32((float32x2_t)0x4000000040000000, v147), vsub_f32((float32x2_t)*(_OWORD *)&vrndaq_f32(v148), *(float32x2_t *)v148.f32)), 0);
      v46.i64[0] = vextq_s8((int8x16_t)v597, (int8x16_t)v597, 8uLL).u64[0];
      v45.i64[1] = v46.i64[0];
      unint64_t v149 = (float32x4_t *)(v130[11] + (v132 << 6));
      *unint64_t v149 = v613;
      v149[1] = v606;
      v149[2] = v601;
      v149[3] = (float32x4_t)v45;
      if (++v132 >= v130[2]) {
        goto LABEL_144;
      }
    }
    *(void *)v648 = 0;
    simd_float4 v623 = 0u;
    memset(v622, 0, sizeof(v622));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    v655.columns[0].i32[0] = 136315906;
    *(uint64_t *)((char *)v655.columns[0].i64 + 4) = (uint64_t)"operator[]";
    v655.columns[0].i16[6] = 1024;
    *(__int32 *)((char *)&v655.columns[0].i32[3] + 2) = 468;
    v655.columns[1].i16[1] = 2048;
    *(uint64_t *)((char *)v655.columns[1].i64 + 4) = v132;
    v655.columns[1].i16[6] = 2048;
    *(uint64_t *)((char *)&v655.columns[1].i64[1] + 6) = v133;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_203:
    *(void *)v648 = 0;
    simd_float4 v623 = 0u;
    memset(v622, 0, sizeof(v622));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    v655.columns[0].i32[0] = 136315906;
    *(uint64_t *)((char *)v655.columns[0].i64 + 4) = (uint64_t)"operator[]";
    v655.columns[0].i16[6] = 1024;
    *(__int32 *)((char *)&v655.columns[0].i32[3] + 2) = 468;
    v655.columns[1].i16[1] = 2048;
    *(uint64_t *)((char *)v655.columns[1].i64 + 4) = v132;
    v655.columns[1].i16[6] = 2048;
    *(uint64_t *)((char *)&v655.columns[1].i64[1] + 6) = v133;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_204:
    uint64_t v43 = 0;
    uint64_t v246 = v242;
    goto LABEL_205;
  }
LABEL_57:
  if (!re::s_debugSettingsManager)
  {
    v649 = 0;
    *(void *)&v648[16] = 0;
    *(_DWORD *)&v648[24] = 0;
    *(_OWORD *)v648 = (unint64_t)a2;
    re::DynamicArray<re::SingleCullingFrustum>::setCapacity(v648, 0);
    ++*(_DWORD *)&v648[24];
    if (!v13) {
      goto LABEL_173;
    }
LABEL_167:
    uint64_t v165 = *(void *)(v13 + 40);
    if (v165)
    {
      for (unint64_t n = 0; n != v165; ++n)
      {
        uint64_t v167 = re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[](v13, n);
        uint64_t v173 = *(void *)(v167 + 16);
        if (v173)
        {
          uint64_t v174 = 672 * v173;
          __int16 v175 = (const re::RenderCamera *)(*(void *)(v167 + 32) + 64);
          do
          {
            re::computeCullingPlanes((float32x4_t *)v175 - 2, v175, (const re::Projection *)1, (float32x4_t *)&v656, v168, v169, v170, v171, v172);
            re::computeFrustumCorners((float32x4_t *)v175 - 2, (uint64_t)v175, 1, &v660, v176, v177, v178);
            re::DynamicArray<re::SingleCullingFrustum>::add((uint64_t)v648, (unint64_t *)&v656);
            __int16 v175 = (const re::RenderCamera *)((char *)v175 + 672);
            v174 -= 672;
          }
          while (v174);
        }
      }
    }
    goto LABEL_173;
  }
  v635.columns[0].i8[0] = 0;
  v656.i64[0] = 0xF53EA7863F1002DELL;
  v656.i64[1] = (uint64_t)"overrides:disablelightfrustumculling";
  re::DebugSettingsManager::getWithErrorCode<BOOL>(re::s_debugSettingsManager, &v656, &v635);
  re::StringID::destroyString((re::StringID *)&v656);
  int v41 = v635.columns[0].u8[0];
  v649 = 0;
  *(void *)&v648[16] = 0;
  *(_DWORD *)&v648[24] = 0;
  *(_OWORD *)v648 = (unint64_t)a2;
  re::DynamicArray<re::SingleCullingFrustum>::setCapacity(v648, 0);
  ++*(_DWORD *)&v648[24];
  if (v41) {
    goto LABEL_194;
  }
  if (v13) {
    goto LABEL_167;
  }
LABEL_173:
  uint64_t v179 = v545;
  if (v545)
  {
    uint64_t v180 = *(void *)(v545 + 40);
    if (v180)
    {
      for (iuint64_t i = 0; ii != v180; ++ii)
      {
        uint64_t v182 = v179;
        uint64_t v183 = re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[](v179, ii);
        uint64_t v189 = *(void *)(v183 + 16);
        if (v189)
        {
          uint64_t v190 = 1360 * v189;
          long long v191 = (const re::RenderCamera *)(*(void *)(v183 + 32) + 736);
          do
          {
            re::computeCullingPlanes((float32x4_t *)v191 - 44, (const re::RenderCamera *)((char *)v191 - 672), (const re::Projection *)1, (float32x4_t *)&v656, v184, v185, v186, v187, v188);
            re::computeFrustumCorners((float32x4_t *)v191 - 44, (uint64_t)v191 - 672, 1, &v660, v192, v193, v194);
            re::DynamicArray<re::SingleCullingFrustum>::add((uint64_t)v648, (unint64_t *)&v656);
            re::computeCullingPlanes((float32x4_t *)v191 - 2, v191, (const re::Projection *)1, (float32x4_t *)&v656, v195, v196, v197, v198, v199);
            re::computeFrustumCorners((float32x4_t *)v191 - 2, (uint64_t)v191, 1, &v660, v200, v201, v202);
            re::DynamicArray<re::SingleCullingFrustum>::add((uint64_t)v648, (unint64_t *)&v656);
            long long v191 = (const re::RenderCamera *)((char *)v191 + 1360);
            v190 -= 1360;
          }
          while (v190);
        }
        uint64_t v179 = v182;
      }
    }
  }
  uint64_t v203 = *(void *)(a8 + 40);
  if (v203)
  {
    for (juint64_t j = 0; jj != v203; ++jj)
    {
      uint64_t v205 = *(void *)re::BucketArray<re::DynamicArray<re::CameraView> const*,4ul>::operator[](a8, jj);
      if (v205)
      {
        uint64_t v211 = *(void *)(v205 + 16);
        if (v211)
        {
          uint64_t v212 = 672 * v211;
          unint64_t v213 = (const re::RenderCamera *)(*(void *)(v205 + 32) + 64);
          do
          {
            re::computeCullingPlanes((float32x4_t *)v213 - 2, v213, (const re::Projection *)1, (float32x4_t *)&v656, v206, v207, v208, v209, v210);
            re::computeFrustumCorners((float32x4_t *)v213 - 2, (uint64_t)v213, 1, &v660, v214, v215, v216);
            re::DynamicArray<re::SingleCullingFrustum>::add((uint64_t)v648, (unint64_t *)&v656);
            unint64_t v213 = (const re::RenderCamera *)((char *)v213 + 672);
            v212 -= 672;
          }
          while (v212);
        }
      }
    }
  }
  uint64_t v217 = *(void *)(a8 + 96);
  if (v217)
  {
    unint64_t v218 = 0;
    uint64_t v219 = a8 + 56;
    do
    {
      uint64_t v220 = *(void *)re::BucketArray<re::DynamicArray<re::CameraView> const*,4ul>::operator[](v219, v218);
      if (v220)
      {
        uint64_t v226 = *(void *)(v220 + 16);
        if (v226)
        {
          uint64_t v227 = 1360 * v226;
          long long v228 = (const re::RenderCamera *)(*(void *)(v220 + 32) + 736);
          do
          {
            re::computeCullingPlanes((float32x4_t *)v228 - 44, (const re::RenderCamera *)((char *)v228 - 672), (const re::Projection *)1, (float32x4_t *)&v656, v221, v222, v223, v224, v225);
            re::computeFrustumCorners((float32x4_t *)v228 - 44, (uint64_t)v228 - 672, 1, &v660, v229, v230, v231);
            re::DynamicArray<re::SingleCullingFrustum>::add((uint64_t)v648, (unint64_t *)&v656);
            re::computeCullingPlanes((float32x4_t *)v228 - 2, v228, (const re::Projection *)1, (float32x4_t *)&v656, v232, v233, v234, v235, v236);
            re::computeFrustumCorners((float32x4_t *)v228 - 2, (uint64_t)v228, 1, &v660, v237, v238, v239);
            re::DynamicArray<re::SingleCullingFrustum>::add((uint64_t)v648, (unint64_t *)&v656);
            long long v228 = (const re::RenderCamera *)((char *)v228 + 1360);
            v227 -= 1360;
          }
          while (v227);
        }
      }
      ++v218;
    }
    while (v218 != v217);
  }
LABEL_194:
  uint64_t v240 = v591;
  int v241 = *(_DWORD *)(v591 + 2964);
  if (v241)
  {
    uint64_t v242 = v591 + 2936;
    uint64_t v42 = *(unsigned int *)(v591 + 2968);
    if (v42)
    {
      uint64_t v243 = 0;
      long long v244 = *(_DWORD **)(v591 + 2952);
      unint64_t v245 = (unint64_t)v592;
      while ((*v244 & 0x80000000) == 0)
      {
        v244 += 88;
        if (v42 == ++v243)
        {
          LODWORD(v243) = *(_DWORD *)(v591 + 2968);
          break;
        }
      }
      uint64_t v43 = v243;
      uint64_t v246 = v591 + 2936;
      goto LABEL_206;
    }
    goto LABEL_204;
  }
  uint64_t v242 = v591 + 120;
  uint64_t v246 = v591 + 120 + 352 * *(void *)(v591 + 104);
LABEL_205:
  unint64_t v245 = (unint64_t)v592;
LABEL_206:
  v598 = (unint64_t *)(v240 + 3024);
  int v247 = (unint64_t *)(v240 + 3016);
  BOOL v248 = v242 == v246;
  if (v241) {
    BOOL v248 = v42 == v43;
  }
  if (v248)
  {
LABEL_209:
    long long v249 = *(re::ProfilerConfig **)v648;
    uint64_t v250 = (void *)v591;
    if (*(void *)v648 && v649)
    {
      if (*(void *)&v648[16])
      {
        long long v251 = &v649[15 * *(void *)&v648[16]];
        long long v252 = v649;
        do
        {
          v252->i64[0] = 0;
          ++v252->i32[2];
          v252 += 15;
        }
        while (v252 != v251);
      }
      long long v249 = (re::ProfilerConfig *)(*(uint64_t (**)(re::ProfilerConfig *))(*(void *)v249 + 40))(v249);
    }
    *(void *)(v591 + 3000) = *(void *)(v591 + 3016) + *(void *)(v591 + 3008) + *(void *)(v591 + 3024);
    uint64_t isStatisticCollectionEnabled = re::ProfilerConfig::isStatisticCollectionEnabled(v249);
    if (isStatisticCollectionEnabled)
    {
      uint64_t isStatisticCollectionEnabled = re::profilerThreadContext((re *)isStatisticCollectionEnabled);
      long long v254 = *(int64x2_t **)(isStatisticCollectionEnabled + 152);
      if (v254)
      {
        unint64_t v255 = *(void *)(v591 + 3008);
        unint64_t v256 = v254[420].u64[0];
        if (v256 >= v255) {
          unint64_t v256 = *(void *)(v591 + 3008);
        }
        v254[420].i64[0] = v256;
        unint64_t v257 = v254[420].u64[1];
        if (v257 <= v255) {
          unint64_t v257 = v255;
        }
        v254[420].i64[1] = v257;
        int64x2_t v258 = vdupq_n_s64(1uLL);
        v258.i64[0] = v255;
        v254[421] = vaddq_s64(v254[421], v258);
        *(unsigned char *)(isStatisticCollectionEnabled + 184) = 0;
      }
    }
    uint64_t v259 = re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)isStatisticCollectionEnabled);
    if (v259)
    {
      uint64_t v259 = re::profilerThreadContext((re *)v259);
      long long v260 = *(int64x2_t **)(v259 + 152);
      if (v260)
      {
        unint64_t v261 = *v247;
        unint64_t v262 = v260[412].u64[0];
        if (v262 >= *v247) {
          unint64_t v262 = *v247;
        }
        v260[412].i64[0] = v262;
        unint64_t v263 = v260[412].u64[1];
        if (v263 <= v261) {
          unint64_t v263 = v261;
        }
        v260[412].i64[1] = v263;
        int64x2_t v264 = vdupq_n_s64(1uLL);
        v264.i64[0] = v261;
        v260[413] = vaddq_s64(v260[413], v264);
        *(unsigned char *)(v259 + 184) = 0;
      }
    }
    uint64_t v265 = re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v259);
    if (v265)
    {
      uint64_t v265 = re::profilerThreadContext((re *)v265);
      long long v266 = *(int64x2_t **)(v265 + 152);
      if (v266)
      {
        unint64_t v267 = *v598;
        unint64_t v268 = v266[404].u64[0];
        if (v268 >= *v598) {
          unint64_t v268 = *v598;
        }
        v266[404].i64[0] = v268;
        unint64_t v269 = v266[404].u64[1];
        if (v269 <= v267) {
          unint64_t v269 = v267;
        }
        v266[404].i64[1] = v269;
        int64x2_t v270 = vdupq_n_s64(1uLL);
        v270.i64[0] = v267;
        v266[405] = vaddq_s64(v266[405], v270);
        *(unsigned char *)(v265 + 184) = 0;
      }
    }
    long long v271 = (re *)re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v265);
    if (v271)
    {
      uint64_t v272 = re::profilerThreadContext(v271);
      long long v273 = *(int64x2_t **)(v272 + 152);
      if (v273)
      {
        unint64_t v274 = *(void *)(v591 + 3000);
        unint64_t v275 = v273[388].u64[0];
        if (v275 >= v274) {
          unint64_t v275 = *(void *)(v591 + 3000);
        }
        v273[388].i64[0] = v275;
        unint64_t v276 = v273[388].u64[1];
        if (v276 <= v274) {
          unint64_t v276 = v274;
        }
        v273[388].i64[1] = v276;
        int64x2_t v277 = vdupq_n_s64(1uLL);
        v277.i64[0] = v274;
        v273[389] = vaddq_s64(v273[389], v277);
        *(unsigned char *)(v272 + 184) = 0;
      }
    }
    re::LightContextBuilder::Result::Result(v546, (re::Allocator *)v245);
    uint64_t v278 = *(void *)(v591 + 2984);
    uint64_t v615 = *(void *)(v278 + 72);
    uint64_t v608 = *(void *)(v278 + 168);
    simd_float4 v656 = 0u;
    v657.i32[0] = 1;
    v657.i64[1] = 0;
    simd_float4 v658 = 0u;
    v659.columns[0].i32[0] = 0;
    re::BucketArray<re::LightContext,16ul>::init((uint64_t)&v656, v245, 1uLL);
    v564 = &v659.columns[0].i64[1];
    memset(&v659.columns[0].u32[2], 0, 36);
    int32x2_t v10 = (int32x2_t)0x7FFFFFFFLL;
    *(uint64_t *)((char *)&v659.columns[2].i64[1] + 4) = 0x7FFFFFFFLL;
    v659.columns[3].i64[1] = v245;
    float32x4_t v660 = 0u;
    *(_OWORD *)&v661[8] = 0u;
    *(void *)v661 = v245;
    *(void *)&v661[24] = v245;
    *(_OWORD *)&v661[32] = 0u;
    *(_OWORD *)&v661[56] = 0u;
    *(void *)&v661[48] = v245;
    *(void *)&v661[72] = v245;
    long long v662 = 0u;
    *(void *)v663 = v245;
    memset(&v663[8], 0, 33);
    *(void *)&long long v281 = v608;
    *((void *)&v281 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = v615;
    *(_OWORD *)v664 = v281;
    v664[16] = 0;
    int v282 = *(_DWORD *)(v591 + 2964);
    if (!v282) {
      goto LABEL_305;
    }
    float32x4_t v283 = (unsigned __int16 *)(v591 + 2936);
    uint64_t v279 = *(unsigned int *)(v591 + 2968);
    if (v279)
    {
      uint64_t v284 = 0;
      float32x4_t v285 = *(_DWORD **)(v591 + 2952);
      while ((*v285 & 0x80000000) == 0)
      {
        v285 += 88;
        if (v279 == ++v284)
        {
          LODWORD(v284) = *(_DWORD *)(v591 + 2968);
          break;
        }
      }
      uint64_t v280 = v284;
    }
    else
    {
      uint64_t v280 = 0;
    }
    uint64_t v325 = v591 + 2936;
    goto LABEL_308;
  }
  v609 = v649;
  uint64_t v286 = *(void *)&v648[16];
  uint64_t v603 = 240 * *(void *)&v648[16] - 240;
  uint64_t v556 = v246;
  int v560 = v42;
  v568 = (unint64_t *)(v240 + 3016);
  LODWORD(v564) = v241;
  while (1)
  {
    uint64_t v574 = v43;
    uint64_t v578 = v242;
    if (v241) {
      uint64_t v287 = *(void *)(v242 + 16) + 352 * v43 + 8;
    }
    else {
      uint64_t v287 = v242 + 8;
    }
    uint64_t v288 = *(void *)(v287 + 152);
    if (v288)
    {
      for (kunint64_t k = 0; kk != v288; ++kk)
      {
        uint64_t v290 = re::BucketArray<re::ProjectiveShadowBuilder::Input::PerSceneData,4ul>::operator[](v287 + 112, kk);
        *(void *)(v290 + 64) = *(void *)(v290 + 16);
        int64_t v291 = *(void *)(v290 + 48);
        if (v291 >= 1) {
          memset(*(void **)(v290 + 56), 1, v291);
        }
      }
    }
    uint64_t v582 = v287;
    uint64_t v594 = *(void *)(v287 + 264);
    if (v594) {
      break;
    }
LABEL_275:
    int v247 = v568;
    uint64_t v617 = *(void *)(v582 + 208);
    if (v617)
    {
      unint64_t v307 = 0;
      v595.i64[0] = v582 + 168;
      while (1)
      {
        uint64_t v308 = re::BucketArray<re::ProjectiveShadowBuilder::Input::PerSceneData,4ul>::operator[](v595.i64[0], v307);
        *(void *)(v308 + 64) = 0;
        long long v309 = (unint64_t *)(v308 + 64);
        if (*(void *)(v308 + 16)) {
          break;
        }
LABEL_292:
        if (++v307 == v617) {
          goto LABEL_293;
        }
      }
      uint64_t v250 = (void *)v308;
      unint64_t v245 = 0;
      while (2)
      {
        uint64_t v310 = v250[4] + 240 * v245;
        simd_float4x4 v674 = __invert_f4(*(simd_float4x4 *)(v310 + 32));
        uint64_t v311 = 0;
        float32x4_t v312 = *(float32x4_t *)(v310 + 128);
        float32x4_t v313 = *(float32x4_t *)(v310 + 144);
        float32x4_t v314 = *(float32x4_t *)(v310 + 160);
        float32x4_t v315 = *(float32x4_t *)(v310 + 176);
        simd_float4x4 v635 = v674;
        do
        {
          *(float32x4_t *)((char *)&v656 + v311 * 16) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v312, COERCE_FLOAT(*(_OWORD *)&v635.columns[v311])), v313, *(float32x2_t *)v635.columns[v311].f32, 1), v314, (float32x4_t)v635.columns[v311], 2), v315, (float32x4_t)v635.columns[v311], 3);
          ++v311;
        }
        while (v311 != 4);
        v675.columns[0] = v656;
        v675.columns[1] = v657;
        v675.columns[2] = v658;
        v675.columns[3] = v659.columns[0];
        v622[0] = (float32x4_t)v656;
        v622[1] = (float32x4_t)v657;
        v622[2] = (float32x4_t)v658;
        v622[3] = (float32x4_t)v659.columns[0];
        simd_float4x4 v655 = __invert_f4(v675);
        re::buildCullingFrustum((uint64_t)v622, &v655, &v656);
        if (v286)
        {
          uint64_t v316 = v603;
          uint64_t v317 = v609;
          do
          {
            char v318 = re::approxFrustumIntersectFrustum(v317, (float32x4_t *)&v656);
            if (v318) {
              break;
            }
            v317 += 15;
            uint64_t v319 = v316;
            v316 -= 240;
          }
          while (v319);
          unint64_t v305 = v250[6];
          if (v305 <= v245) {
            goto LABEL_304;
          }
          *(unsigned char *)(v250[7] + v245) = v318;
          uint64_t v320 = v309;
          if (v318) {
            goto LABEL_291;
          }
        }
        else
        {
          unint64_t v305 = v250[6];
          if (v305 <= v245) {
            goto LABEL_304;
          }
          *(unsigned char *)(v250[7] + v245) = 0;
        }
        uint64_t v320 = v568;
LABEL_291:
        ++*v320;
        if (++v245 >= v250[2]) {
          goto LABEL_292;
        }
        continue;
      }
    }
LABEL_293:
    int v241 = (int)v564;
    if (v564)
    {
      uint64_t v242 = v578;
      unsigned int v321 = v574 + 1;
      unint64_t v245 = (unint64_t)v592;
      uint64_t v323 = v556;
      int v322 = v560;
      do
      {
        uint64_t v43 = v321;
        if (v321 >= *(_DWORD *)(v578 + 32)) {
          break;
        }
        ++v321;
      }
      while ((*(_DWORD *)(*(void *)(v578 + 16) + 352 * v43) & 0x80000000) == 0);
    }
    else
    {
      uint64_t v43 = v574;
      uint64_t v242 = v578 + 352;
      unint64_t v245 = (unint64_t)v592;
      uint64_t v323 = v556;
      int v322 = v560;
    }
    BOOL v324 = v242 == v323;
    if (v564) {
      BOOL v324 = v322 == v43;
    }
    if (v324) {
      goto LABEL_209;
    }
  }
  unint64_t v292 = 0;
  uint64_t v587 = v287 + 224;
  while (1)
  {
    v595.i64[0] = v292;
    float v293 = (void *)re::BucketArray<re::ProjectiveShadowBuilder::Input::PerSceneData,4ul>::operator[](v587, v292);
    v293[8] = 0;
    unint64_t v245 = (unint64_t)(v293 + 8);
    if (v293[2]) {
      break;
    }
LABEL_274:
    unint64_t v292 = v595.i64[0] + 1;
    if (v595.i64[0] + 1 == v594) {
      goto LABEL_275;
    }
  }
  uint64_t v250 = v293;
  unint64_t v296 = 0;
  uint64_t v297 = v293[4];
  uint64_t v298 = v293[7];
  while (!v286)
  {
    unint64_t v305 = v250[6];
    if (v305 <= v296) {
      goto LABEL_303;
    }
    *(unsigned char *)(v298 + v296) = 0;
LABEL_272:
    uint64_t v306 = v598;
LABEL_273:
    ++*v306;
    if (++v296 >= v250[2]) {
      goto LABEL_274;
    }
  }
  uint64_t v299 = (float32x4_t *)(v297 + 224 * v296);
  float32x4_t v300 = v299[5];
  v300.i32[3] = v299[12].i32[2];
  float32x4_t v616 = v300;
  uint64_t v301 = v603;
  uint64_t v302 = (uint64_t *)v609;
  do
  {
    simd_float4 v656 = (simd_float4)v616;
    BOOL isBoundingSphereIntersectingFrustumPlanes = re::isBoundingSphereIntersectingFrustumPlanes((float32x4_t *)&v656, v302, *(double *)v616.i64, v294, v295);
    if (isBoundingSphereIntersectingFrustumPlanes) {
      break;
    }
    v302 += 30;
    uint64_t v304 = v301;
    v301 -= 240;
  }
  while (v304);
  unint64_t v305 = v250[6];
  if (v305 > v296)
  {
    *(unsigned char *)(v298 + v296) = isBoundingSphereIntersectingFrustumPlanes;
    uint64_t v306 = (void *)v245;
    if (isBoundingSphereIntersectingFrustumPlanes) {
      goto LABEL_273;
    }
    goto LABEL_272;
  }
LABEL_303:
  v622[0].i64[0] = 0;
  memset(&v659, 0, 32);
  simd_float4 v658 = 0u;
  simd_float4 v657 = 0u;
  simd_float4 v656 = 0u;
  os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
  v635.columns[0].i32[0] = 136315906;
  *(uint64_t *)((char *)v635.columns[0].i64 + 4) = (uint64_t)"operator[]";
  v635.columns[0].i16[6] = 1024;
  *(__int32 *)((char *)&v635.columns[0].i32[3] + 2) = 468;
  v635.columns[1].i16[1] = 2048;
  *(uint64_t *)((char *)v635.columns[1].i64 + 4) = v296;
  v635.columns[1].i16[6] = 2048;
  *(uint64_t *)((char *)&v635.columns[1].i64[1] + 6) = v305;
  _os_log_send_and_compose_impl();
  _os_crash_msg();
  __break(1u);
LABEL_304:
  uint64_t v620 = 0;
  simd_float4 v636 = 0u;
  memset(&v635, 0, sizeof(v635));
  os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
  *(_DWORD *)v650 = 136315906;
  *(void *)&v650[4] = "operator[]";
  *(_WORD *)&v650[12] = 1024;
  *(_DWORD *)&v650[14] = 468;
  __int16 v651 = 2048;
  unint64_t v652 = v245;
  __int16 v653 = 2048;
  unint64_t v654 = v305;
  _os_log_send_and_compose_impl();
  _os_crash_msg();
  __break(1u);
LABEL_305:
  float32x4_t v283 = (unsigned __int16 *)(v250 + 15);
  uint64_t v325 = (uint64_t)&v250[44 * v250[13] + 15];
LABEL_308:
  BOOL v326 = v283 == (unsigned __int16 *)v325;
  if (v282) {
    BOOL v326 = v279 == v280;
  }
  if (!v326)
  {
    unint64_t i5 = (unint64_t)&v635;
    uint64_t v551 = v325;
    int32x4_t v595 = vdupq_n_s32(0x7F800000u);
    int v561 = v282;
    int v557 = v279;
    do
    {
      if (v282)
      {
        uint64_t v333 = *((void *)v283 + 2) + 352 * v280;
        uint64_t v334 = (unsigned __int16 *)(v333 + 4);
        unint64_t v335 = v333 + 8;
      }
      else
      {
        unint64_t v335 = (unint64_t)(v283 + 4);
        uint64_t v334 = v283;
      }
      uint64_t v569 = v280;
      v575 = v283;
      uint64_t v604 = *v334;
      if (*(void *)(v335 + 208) || *(void *)(v335 + 264))
      {
        uint64_t v579 = *(void *)(a4 + 40);
        if (v579)
        {
          unint64_t v336 = 0;
          unint64_t v588 = v335;
          do
          {
            unint64_t v583 = v336;
            uint64_t v337 = re::BucketArray<re::MeshSceneCollection,16ul>::operator[](a4, v336);
            uint64_t v338 = *(void *)(v337 + 16);
            if (v338)
            {
              nunint64_t n = *(void *)(v337 + 32);
              unint64_t v599 = nn + 656 * v338;
              do
              {
                if (*(unsigned __int16 *)(nn + 424) == v604)
                {
                  v655.columns[0] = (simd_float4)v595;
                  v339.i64[0] = 0x7F0000007FLL;
                  v339.i64[1] = 0x7F0000007FLL;
                  v655.columns[1] = v339;
                  unint64_t k = *(void *)(nn + 24);
                  if (k)
                  {
                    *(_OWORD *)v648 = *(_OWORD *)k;
                    if (*(void *)(nn + 8))
                    {
                      unint64_t v48 = 0;
                      unint64_t v73 = k + 40;
                      v340.i64[0] = 0x7F0000007FLL;
                      v340.i64[1] = 0x7F0000007FLL;
                      simd_float4 v610 = (simd_float4)v595;
                      float32x4_t v618 = v340;
                      while (1)
                      {
                        uint64_t v341 = re::DataArray<re::MeshInstance>::tryGet(a3 + 72, *(void *)(*(void *)nn + 8 * v48));
                        if (v341)
                        {
                          uint64_t v342 = (float32x4_t *)v341;
                          if (re::DataArray<re::MeshModel>::tryGet(a3 + 8, *(void *)(v341 + 16)))
                          {
                            unint64_t i4 = *(void *)(k + 24);
                            if (i4 <= v48)
                            {
                              *(void *)v650 = 0;
                              simd_float4 v636 = 0u;
                              memset(&v635, 0, sizeof(v635));
                              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                              v622[0].i32[0] = 136315906;
                              *(uint64_t *)((char *)v622[0].i64 + 4) = (uint64_t)"operator[]";
                              v622[0].i16[6] = 1024;
                              *(__int32 *)((char *)&v622[0].i32[3] + 2) = 866;
                              v622[1].i16[1] = 2048;
                              *(uint64_t *)((char *)v622[1].i64 + 4) = v48;
                              v622[1].i16[6] = 2048;
                              *(uint64_t *)((char *)&v622[1].i64[1] + 6) = i4;
                              _os_log_send_and_compose_impl();
                              _os_crash_msg();
                              __break(1u);
LABEL_458:
                              *(void *)v650 = 0;
                              simd_float4 v623 = 0u;
                              memset(v622, 0, sizeof(v622));
                              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                              v655.columns[0].i32[0] = 136315906;
                              *(uint64_t *)((char *)v655.columns[0].i64 + 4) = (uint64_t)"operator[]";
                              v655.columns[0].i16[6] = 1024;
                              *(__int32 *)((char *)&v655.columns[0].i32[3] + 2) = 468;
                              v655.columns[1].i16[1] = 2048;
                              *(uint64_t *)((char *)v655.columns[1].i64 + 4) = k;
                              v655.columns[1].i16[6] = 2048;
                              *(uint64_t *)((char *)&v655.columns[1].i64[1] + 6) = v73;
                              _os_log_send_and_compose_impl();
                              _os_crash_msg();
                              __break(1u);
LABEL_459:
                              *(void *)v648 = 0;
                              simd_float4 v623 = 0u;
                              memset(v622, 0, sizeof(v622));
                              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                              v655.columns[0].i32[0] = 136315906;
                              *(uint64_t *)((char *)v655.columns[0].i64 + 4) = (uint64_t)"operator[]";
                              v655.columns[0].i16[6] = 1024;
                              *(__int32 *)((char *)&v655.columns[0].i32[3] + 2) = 468;
                              v655.columns[1].i16[1] = 2048;
                              *(uint64_t *)((char *)v655.columns[1].i64 + 4) = k;
                              v655.columns[1].i16[6] = 2048;
                              *(uint64_t *)((char *)&v655.columns[1].i64[1] + 6) = i4;
                              _os_log_send_and_compose_impl();
                              _os_crash_msg();
                              __break(1u);
                              goto LABEL_460;
                            }
                            unint64_t v343 = k + 40;
                            if ((*(unsigned char *)(k + 32) & 1) == 0) {
                              unint64_t v343 = *(void *)(k + 48);
                            }
                            uint64_t v344 = 0;
                            uint64_t v345 = *(unsigned int *)(v343 + 4 * v48);
                            float32x4_t v346 = v342[3];
                            float32x4_t v347 = v342[4];
                            float32x4_t v348 = v342[5];
                            uint64_t v349 = *(void *)((unint64_t)v648 & 0xFFFFFFFFFFFFFFF7 | (8 * (v345 & 1)));
                            float32x4_t v350 = *(float32x4_t *)(nn + 48);
                            float32x4_t v351 = *(float32x4_t *)(nn + 64);
                            float32x4_t v352 = *(float32x4_t *)(nn + 80);
                            float32x4_t v353 = *(float32x4_t *)(nn + 96);
                            v622[0] = v342[2];
                            v622[1] = v346;
                            v622[2] = v347;
                            v622[3] = v348;
                            do
                            {
                              v635.columns[v344] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v350, COERCE_FLOAT(*(_OWORD *)&v622[v344])), v351, *(float32x2_t *)v622[v344].f32, 1), v352, v622[v344], 2), v353, v622[v344], 3);
                              ++v344;
                            }
                            while (v344 != 4);
                            re::AABB::transform((float32x4_t *)(v349 + ((16 * v345) & 0xFFFFFFFE0)), (float32x4_t *)&v635, (uint64_t)v622);
                            float32x4_t v354 = (float32x4_t)v610;
                            v354.i32[3] = 0;
                            float32x4_t v355 = v622[0];
                            float32x4_t v356 = v622[1];
                            v355.i32[3] = 0;
                            float32x4_t v357 = vminnmq_f32(v354, v355);
                            float32x4_t v358 = v618;
                            v358.i32[3] = 0;
                            v356.i32[3] = 0;
                            simd_float4 v610 = (simd_float4)v357;
                            float32x4_t v618 = vmaxnmq_f32(v358, v356);
                          }
                        }
                        if (++v48 >= *(void *)(nn + 8))
                        {
                          v655.columns[0] = v610;
                          v655.columns[1] = (simd_float4)v618;
                          uint64_t v250 = (void *)v591;
                          unint64_t v335 = v588;
                          break;
                        }
                      }
                    }
                  }
                  unint64_t v245 = (unint64_t)v592;
                  re::LightContextBuilder::buildLightContext((uint64_t)&v635, (uint64_t)v592, v335, v250[373], (uint64_t)&v655);
                  re::LightContexts::addPerMeshLightContext((uint64_t)&v656, v604, *(void *)(nn + 416), (__n128 *)&v635);
                  if (v639.i64[1] && (void)v640)
                  {
                    (*(void (**)(uint64_t, void))(*(void *)v639.i64[1] + 40))(v639.i64[1], *((void *)&v640 + 1));
                    long long v640 = 0uLL;
                  }
                  if (v638.i64[0] && v638.i64[1]) {
                    (*(void (**)(uint64_t, uint64_t))(*(void *)v638.i64[0] + 40))(v638.i64[0], v639.i64[0]);
                  }
                  if (v636.i64[1] && v637.i64[0]) {
                    (*(void (**)(uint64_t, uint64_t))(*(void *)v636.i64[1] + 40))(v636.i64[1], v637.i64[1]);
                  }
                  if (v635.columns[3].i64[0] && v635.columns[3].i64[1]) {
                    (*(void (**)(uint64_t, uint64_t))(*(void *)v635.columns[3].i64[0] + 40))(v635.columns[3].i64[0], v636.i64[0]);
                  }
                  if (v635.columns[1].i64[1] && v635.columns[2].i64[0]) {
                    (*(void (**)(uint64_t, uint64_t))(*(void *)v635.columns[1].i64[1] + 40))(v635.columns[1].i64[1], v635.columns[2].i64[1]);
                  }
                  if (v635.columns[0].i64[0] && v635.columns[0].i64[1]) {
                    (*(void (**)(uint64_t, uint64_t))(*(void *)v635.columns[0].i64[0] + 40))(v635.columns[0].i64[0], v635.columns[1].i64[0]);
                  }
                }
                nn += 656;
              }
              while (nn != v599);
            }
            unint64_t v336 = v583 + 1;
          }
          while (v583 + 1 != v579);
        }
        if (a5)
        {
          uint64_t v359 = *(void *)(a5 + 40);
          if (v359)
          {
            for (munint64_t m = 0; mm != v359; ++mm)
            {
              uint64_t v361 = re::BucketArray<re::DynamicArray<re::VFXScene>,4ul>::operator[](a5, mm);
              uint64_t v362 = *(void *)(v361 + 16);
              if (v362)
              {
                uint64_t v363 = (float32x4_t *)(*(void *)(v361 + 32) + 416);
                uint64_t v364 = 800 * v362;
                do
                {
                  if (v363->u16[4] == v604)
                  {
                    v622[0] = v363[2];
                    v622[1] = v363[3];
                    re::LightContextBuilder::buildLightContext((uint64_t)&v635, v245, v335, *(void *)(v591 + 2984), (uint64_t)v622);
                    re::LightContexts::addPerMeshLightContext((uint64_t)&v656, v604, v363->i64[0], (__n128 *)&v635);
                    if (v639.i64[1] && (void)v640)
                    {
                      (*(void (**)(uint64_t, void))(*(void *)v639.i64[1] + 40))(v639.i64[1], *((void *)&v640 + 1));
                      long long v640 = 0uLL;
                    }
                    if (v638.i64[0] && v638.i64[1]) {
                      (*(void (**)(uint64_t, uint64_t))(*(void *)v638.i64[0] + 40))(v638.i64[0], v639.i64[0]);
                    }
                    if (v636.i64[1] && v637.i64[0]) {
                      (*(void (**)(uint64_t, uint64_t))(*(void *)v636.i64[1] + 40))(v636.i64[1], v637.i64[1]);
                    }
                    if (v635.columns[3].i64[0] && v635.columns[3].i64[1]) {
                      (*(void (**)(uint64_t, uint64_t))(*(void *)v635.columns[3].i64[0] + 40))(v635.columns[3].i64[0], v636.i64[0]);
                    }
                    if (v635.columns[1].i64[1] && v635.columns[2].i64[0]) {
                      (*(void (**)(uint64_t, uint64_t))(*(void *)v635.columns[1].i64[1] + 40))(v635.columns[1].i64[1], v635.columns[2].i64[1]);
                    }
                    if (v635.columns[0].i64[0] && v635.columns[0].i64[1]) {
                      (*(void (**)(uint64_t, uint64_t))(*(void *)v635.columns[0].i64[0] + 40))(v635.columns[0].i64[0], v635.columns[1].i64[0]);
                    }
                  }
                  v363 += 50;
                  v364 -= 800;
                }
                while (v364);
              }
            }
          }
        }
        goto LABEL_447;
      }
      v655.columns[0] = (simd_float4)v595;
      v365.i64[0] = 0x7F0000007FLL;
      v365.i64[1] = 0x7F0000007FLL;
      v655.columns[1] = v365;
      re::LightContextBuilder::buildLightContext((uint64_t)&v635, v245, v335, v250[373], (uint64_t)&v655);
      char v366 = v642;
      __int32 v367 = v658.i32[2];
      re::BucketArray<re::LightContext,16ul>::add((uint64_t)&v656, (__n128 *)&v635);
      v664[16] |= v366;
      memset(&v622[0].u32[2], 0, 36);
      *(int32x2_t *)((char *)&v622[2].u64[1] + 4) = v10;
      v622[0].i32[0] = v367;
      unint64_t v368 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v604) ^ ((0xBF58476D1CE4E5B9 * v604) >> 27));
      unint64_t v369 = v368 ^ (v368 >> 31);
      if (v659.columns[0].i64[1])
      {
        unint64_t v370 = v369 % v659.columns[2].u32[0];
        uint64_t v371 = *(unsigned int *)(v659.columns[1].i64[0] + 4 * v370);
        if (v371 != 0x7FFFFFFF)
        {
          while (*(unsigned __int16 *)(v659.columns[1].i64[1] + 72 * v371 + 12) != v604)
          {
            LODWORD(v37re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = *(_DWORD *)(v659.columns[1].i64[1] + 72 * v371 + 8) & 0x7FFFFFFF;
            if (v371 == 0x7FFFFFFF) {
              goto LABEL_422;
            }
          }
          goto LABEL_428;
        }
      }
      else
      {
        unint64_t v370 = 0;
      }
LABEL_422:
      uint64_t v372 = v659.columns[2].u32[3];
      if (v659.columns[2].i32[3] == 0x7FFFFFFF)
      {
        uint64_t v372 = v659.columns[2].u32[2];
        __int32 v373 = v659.columns[2].i32[2];
        if (v659.columns[2].i32[2] == v659.columns[2].i32[0])
        {
          re::HashTable<unsigned short,re::LightContexts::LightContextContents,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::setCapacity((uint64_t)v564, 2 * v659.columns[2].i32[1]);
          __int32 v373 = v659.columns[2].i32[2];
          unint64_t v370 = v369 % v659.columns[2].u32[0];
        }
        v659.columns[2].i32[2] = v373 + 1;
        uint64_t v374 = v659.columns[1].i64[1];
        int v375 = *(_DWORD *)(v659.columns[1].i64[1] + 72 * v372 + 8);
      }
      else
      {
        uint64_t v374 = v659.columns[1].i64[1];
        int v375 = *(_DWORD *)(v659.columns[1].i64[1] + 72 * v659.columns[2].u32[3] + 8);
        v659.columns[2].i32[3] = v375 & 0x7FFFFFFF;
      }
      *(_DWORD *)(v374 + 72 * v372 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v375 | 0x80000000;
      *(_DWORD *)(v659.columns[1].i64[1] + 72 * v372 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_DWORD *)(v659.columns[1].i64[1] + 72 * v372 + 8) & 0x80000000 | *(_DWORD *)(v659.columns[1].i64[0] + 4 * v370);
      *(void *)(v659.columns[1].i64[1] + 72 * v372) = v369;
      *(_WORD *)(v659.columns[1].i64[1] + 72 * v372 + 12) = v604;
      uint64_t v376 = v659.columns[1].i64[1] + 72 * v372;
      *(_DWORD *)(v376 + 16) = v367;
      re::HashTable<unsigned long long,unsigned int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::HashTable(v376 + 24, (uint64_t)&v622[0].i64[1]);
      *(_DWORD *)(v659.columns[1].i64[0] + 4 * v370) = v372;
      ++v659.columns[2].i32[1];
      ++v659.columns[3].i32[0];
LABEL_428:
      v377.n128_f64[0] = re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(&v622[0].i64[1]);
      unint64_t v245 = (unint64_t)v592;
      if (v639.i64[1])
      {
        if ((void)v640)
        {
          (*(void (**)(double))(*(void *)v639.i64[1] + 40))(v377.n128_f64[0]);
          long long v640 = 0uLL;
        }
        v639.i64[1] = 0;
      }
      if (v638.i64[0] && v638.i64[1]) {
        (*(void (**)(__n128))(*(void *)v638.i64[0] + 40))(v377);
      }
      if (v636.i64[1] && v637.i64[0]) {
        (*(void (**)(__n128))(*(void *)v636.i64[1] + 40))(v377);
      }
      if (v635.columns[3].i64[0] && v635.columns[3].i64[1]) {
        (*(void (**)(__n128))(*(void *)v635.columns[3].i64[0] + 40))(v377);
      }
      if (v635.columns[1].i64[1] && v635.columns[2].i64[0]) {
        (*(void (**)(__n128))(*(void *)v635.columns[1].i64[1] + 40))(v377);
      }
      if (v635.columns[0].i64[0] && v635.columns[0].i64[1]) {
        (*(void (**)(__n128))(*(void *)v635.columns[0].i64[0] + 40))(v377);
      }
LABEL_447:
      int v282 = v561;
      if (v561)
      {
        float32x4_t v283 = v575;
        unsigned int v378 = v569 + 1;
        uint64_t v250 = (void *)v591;
        int v379 = v557;
        do
        {
          uint64_t v280 = v378;
          if (v378 >= *((_DWORD *)v575 + 8)) {
            break;
          }
          ++v378;
        }
        while ((*(_DWORD *)(*((void *)v575 + 2) + 352 * v280) & 0x80000000) == 0);
      }
      else
      {
        float32x4_t v283 = v575 + 176;
        uint64_t v250 = (void *)v591;
        int v379 = v557;
        uint64_t v280 = v569;
      }
      BOOL v380 = v283 == (unsigned __int16 *)v551;
      if (v561) {
        BOOL v380 = v379 == v280;
      }
    }
    while (!v380);
  }
  unint64_t v48 = (unint64_t)v661;
  unint64_t i4 = (unint64_t)v663;
  nunint64_t n = (unint64_t)v664;
  unint64_t i5 = v546;
  re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::operator=((void *)(v546 + 80), &v656);
  re::HashTable<unsigned short,re::LightContexts::LightContextContents,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::operator=(v546 + 136, v564);
  re::FixedArray<float>::operator=((uint64_t *)(v546 + 184), &v659.columns[3].i64[1]);
  re::FixedArray<float>::operator=((uint64_t *)(v546 + 208), (uint64_t *)v661);
  re::FixedArray<float>::operator=((uint64_t *)(v546 + 232), (uint64_t *)&v661[24]);
  re::FixedArray<float>::operator=((uint64_t *)(v546 + 256), (uint64_t *)&v661[48]);
  re::FixedArray<float>::operator=((uint64_t *)(v546 + 280), (uint64_t *)&v661[72]);
  re::FixedArray<float>::operator=((uint64_t *)(v546 + 304), (uint64_t *)v663);
  *(_OWORD *)(v546 + 32re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_OWORD *)&v663[24];
  *(unsigned char *)(v546 + 344) = v663[40];
  *(_OWORD *)(v546 + 352) = *(_OWORD *)v664;
  *(unsigned char *)(v546 + 36re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v664[16];
  if (*(void *)v663)
  {
    if (*(void *)&v663[8])
    {
      (*(void (**)(void, void))(**(void **)v663 + 40))(*(void *)v663, *(void *)&v663[16]);
      *(void *)&v663[8] = 0;
      *(void *)&v663[16] = 0;
    }
    *(void *)v663 = 0;
  }
  unint64_t v73 = v591;
  unint64_t k = (unint64_t)v592;
  if (*(void *)&v661[72])
  {
    if ((void)v662)
    {
      (*(void (**)(void, void))(**(void **)&v661[72] + 40))(*(void *)&v661[72], *((void *)&v662 + 1));
      long long v662 = 0uLL;
    }
    *(void *)&v661[72] = 0;
  }
  if (*(void *)&v661[48])
  {
    if (*(void *)&v661[56])
    {
      (*(void (**)(void, void))(**(void **)&v661[48] + 40))(*(void *)&v661[48], *(void *)&v661[64]);
      *(void *)&v661[56] = 0;
      *(void *)&v661[64] = 0;
    }
    *(void *)&v661[48] = 0;
  }
  if (*(void *)&v661[24])
  {
    if (*(void *)&v661[32])
    {
      (*(void (**)(void, void))(**(void **)&v661[24] + 40))(*(void *)&v661[24], *(void *)&v661[40]);
      *(_OWORD *)&v661[32] = 0uLL;
    }
    *(void *)&v661[24] = 0;
  }
  if (*(void *)v661)
  {
    if (*(void *)&v661[8])
    {
      (*(void (**)(void, void))(**(void **)v661 + 40))(*(void *)v661, *(void *)&v661[16]);
      *(void *)&v661[8] = 0;
      *(void *)&v661[16] = 0;
    }
    *(void *)v661 = 0;
  }
  if (v659.columns[3].i64[1])
  {
    if (v660.i64[0])
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v659.columns[3].i64[1] + 40))(v659.columns[3].i64[1], v660.i64[1]);
      float32x4_t v660 = 0uLL;
    }
    v659.columns[3].i64[1] = 0;
  }
  re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit(v564);
  re::BucketArray<re::LightContext,16ul>::deinit((uint64_t)&v656);
  if (v656.i64[0] && (v657.i8[0] & 1) == 0) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v656.i64[0] + 40))(v656.i64[0], v658.i64[0]);
  }
  v622[2].i64[0] = 0;
  v622[1].i64[0] = 0;
  v622[1].i32[2] = 0;
  v622[0] = (float32x4_t)(unint64_t)v592;
  re::DynamicArray<re::ShadowView>::setCapacity(v622, 0);
  ++v622[1].i32[2];
  int v329 = *(_DWORD *)(v591 + 2964);
  if (!v329) {
    goto LABEL_461;
  }
  uint64_t v330 = (unsigned __int16 *)(v591 + 2936);
  uint64_t v327 = *(unsigned int *)(v591 + 2968);
  if (!v327)
  {
LABEL_463:
    uint64_t v328 = 0;
    goto LABEL_464;
  }
  uint64_t v331 = 0;
  uint64_t v332 = *(_DWORD **)(v591 + 2952);
  while ((*v332 & 0x80000000) == 0)
  {
    v332 += 88;
    if (v327 == ++v331)
    {
      LODWORD(v33re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = *(_DWORD *)(v591 + 2968);
      break;
    }
  }
  uint64_t v328 = v331;
LABEL_464:
  uint64_t v381 = (uint64_t)v330;
LABEL_465:
  uint64_t v570 = v381;
  BOOL v382 = v330 == (unsigned __int16 *)v381;
  if (v329) {
    BOOL v382 = v327 == v328;
  }
  if (!v382)
  {
    int v558 = v329;
    int v554 = v327;
    while (1)
    {
      uint64_t v562 = v328;
      v566 = v330;
      if (v329)
      {
        uint64_t v390 = *((void *)v330 + 2) + 352 * v328;
        v391 = (unsigned __int16 *)(v390 + 4);
        v392 = (void *)(v390 + 8);
      }
      else
      {
        v392 = v330 + 4;
        v391 = v330;
      }
      int v619 = *v391;
      v611 = v392;
      uint64_t v393 = v392[12];
      if (v393)
      {
        unint64_t v394 = 0;
        unint64_t v73 = (unint64_t)(v392 + 7);
        do
        {
          uint64_t v395 = re::BucketArray<re::SkinningModelBuilder::RawSkinnedMeshPartData,4ul>::operator[](v73, v394);
          unint64_t v396 = *(void *)(v395 + 16);
          if (v396)
          {
            unint64_t i4 = v395;
            unint64_t i5 = 0;
            unint64_t i2 = 0;
            for (nunint64_t n = 0; nn < v396; ++nn)
            {
              unint64_t v48 = *(void *)(i4 + 32);
              unint64_t v398 = v48 + i2;
              if (*(unsigned char *)(v48 + i2 + 134))
              {
                unint64_t v399 = *(void *)(i4 + 72);
                if (v399 <= nn) {
                  goto LABEL_679;
                }
                uint64_t v400 = re::DataArray<re::TextureAtlasTile>::get(*(void *)(v591 + 2984) + 8, *(void *)(*(void *)(i4 + 80) + 8 * nn));
                unint64_t v399 = *(void *)(i4 + 48);
                if (v399 <= nn) {
                  goto LABEL_680;
                }
                v401 = (float32x4_t *)(*(void *)(i4 + 56) + i5);
                simd_float4 v402 = (simd_float4)v401[2];
                float32x4_t v404 = *v401;
                simd_float4 v403 = (simd_float4)v401[1];
                v659.columns[0] = (simd_float4)v401[3];
                simd_float4 v658 = v402;
                simd_float4 v656 = (simd_float4)v404;
                simd_float4 v657 = v403;
                int v405 = *(unsigned __int8 *)(v48 + i2 + 135);
                v650[0] = *(unsigned char *)(v48 + i2 + 132);
                if (v650[0]) {
                  v650[1] = *(unsigned char *)(v48 + i2 + 133);
                }
                re::LightContextBuilder::buildShadowViews(re::PerFrameAllocator *,re::LightContexts &)const::$_0::operator()(v592, v48 + i2, v400, (uint64_t)&v656, v405 != 0, v619, v650, (_anonymous_namespace_ *)v622);
                unint64_t v396 = *(void *)(i4 + 16);
              }
              i2 += 144;
              i5 += 64;
            }
          }
          ++v394;
        }
        while (v394 != v393);
      }
      unint64_t v398 = (unint64_t)v611;
      uint64_t v406 = v611[19];
      if (v406) {
        break;
      }
LABEL_504:
      uint64_t v415 = v611[26];
      unint64_t v399 = (unint64_t)&v635;
      if (v415)
      {
        for (unint64_t i1 = 0; i1 != v415; ++i1)
        {
          uint64_t v417 = re::BucketArray<re::LightContextBuilder::RealWorldProxyLightBucket,4ul>::operator[]((uint64_t)(v611 + 21), i1);
          unint64_t v418 = *(void *)(v417 + 16);
          if (v418)
          {
            unint64_t i4 = v417;
            unint64_t i5 = 0;
            for (nunint64_t n = 0; nn < v418; ++nn)
            {
              unint64_t v48 = *(void *)(i4 + 32);
              if (*(unsigned char *)(v48 + i5 + 224))
              {
                unint64_t i2 = *(void *)(i4 + 48);
                if (i2 <= nn) {
                  goto LABEL_685;
                }
                if (*(unsigned char *)(*(void *)(i4 + 56) + nn))
                {
                  unint64_t i2 = *(void *)(i4 + 104);
                  if (i2 <= nn) {
                    goto LABEL_686;
                  }
                  uint64_t v419 = re::DataArray<re::TextureAtlasTile>::get(*(void *)(v591 + 2984) + 8, *(void *)(*(void *)(i4 + 112) + 8 * nn));
                  unint64_t v420 = v48 + i5;
                  v621[0] = *(unsigned char *)(v48 + i5 + 220);
                  if (v621[0]) {
                    v621[1] = *(unsigned char *)(v420 + 221);
                  }
                  re::LightContextBuilder::buildShadowViews(re::PerFrameAllocator *,re::LightContexts &)const::$_0::operator()(v592, v48 + i5, v419, v420 + 128, 0, v619, v621, (_anonymous_namespace_ *)v622);
                  unint64_t v418 = *(void *)(i4 + 16);
                }
              }
              i5 += 240;
            }
          }
        }
      }
      unint64_t v73 = v591;
      uint64_t v576 = v611[33];
      if (!v576) {
        goto LABEL_560;
      }
      unint64_t v421 = 0;
      uint64_t v580 = (uint64_t)(v611 + 28);
      unint64_t i4 = 224;
      do
      {
        unint64_t v584 = v421;
        uint64_t v422 = re::BucketArray<re::LightContextBuilder::RealWorldProxyLightBucket,4ul>::operator[](v580, v421);
        unint64_t v423 = *(void *)(v422 + 16);
        if (!v423) {
          goto LABEL_559;
        }
        unint64_t v398 = v422;
        unint64_t v48 = 0;
        for (unint64_t i2 = 0; i2 < v423; ++i2)
        {
          uint64_t v424 = *(void *)(v398 + 32);
          unint64_t i5 = v424 + 224 * i2;
          if (!*(unsigned char *)(i5 + 215)) {
            goto LABEL_558;
          }
          nunint64_t n = *(void *)(v398 + 48);
          if (nn <= i2) {
            goto LABEL_687;
          }
          if (!*(unsigned char *)(*(void *)(v398 + 56) + i2)) {
            goto LABEL_558;
          }
          for (uint64_t i3 = 0; i3 != 144; i3 += 24)
          {
            v426 = (char *)&v635 + i3;
            *(void *)v426 = 0;
            *((void *)v426 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
            *((_DWORD *)v426 + 4) = 0;
            *((_WORD *)v426 + 10) = -1;
          }
          uint64_t v427 = 0;
          unint64_t v589 = v48;
          do
          {
            nunint64_t n = *(void *)(v398 + 104);
            if (nn <= i2)
            {
              *(void *)v648 = 0;
              memset(&v659, 0, 32);
              simd_float4 v658 = 0u;
              simd_float4 v657 = 0u;
              simd_float4 v656 = 0u;
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              v655.columns[0].i32[0] = 136315906;
              *(uint64_t *)((char *)v655.columns[0].i64 + 4) = (uint64_t)"operator[]";
              v655.columns[0].i16[6] = 1024;
              *(__int32 *)((char *)&v655.columns[0].i32[3] + 2) = 476;
              v655.columns[1].i16[1] = 2048;
              *(uint64_t *)((char *)v655.columns[1].i64 + 4) = i2;
              v655.columns[1].i16[6] = 2048;
              *(uint64_t *)((char *)&v655.columns[1].i64[1] + 6) = nn;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_675:
              v655.columns[0].i64[0] = 0;
              memset(&v659, 0, 32);
              simd_float4 v658 = 0u;
              simd_float4 v657 = 0u;
              simd_float4 v656 = 0u;
              unint64_t v433 = &_os_log_internal;
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              v622[0].i32[0] = 136315906;
              *(uint64_t *)((char *)v622[0].i64 + 4) = (uint64_t)"operator[]";
              v622[0].i16[6] = 1024;
              *(__int32 *)((char *)&v622[0].i32[3] + 2) = 476;
              v622[1].i16[1] = 2048;
              *(uint64_t *)((char *)v622[1].i64 + 4) = v398;
              v622[1].i16[6] = 2048;
              *(uint64_t *)((char *)&v622[1].i64[1] + 6) = v48;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_676:
              re::internal::assertLog((re::internal *)6, v435, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v433, v611);
              _os_crash();
              __break(1u);
LABEL_677:
              v655.columns[0].i64[0] = 0;
              memset(&v659, 0, 32);
              simd_float4 v658 = 0u;
              simd_float4 v657 = 0u;
              simd_float4 v656 = 0u;
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              v622[0].i32[0] = 136315906;
              *(uint64_t *)((char *)v622[0].i64 + 4) = (uint64_t)"operator[]";
              v622[0].i16[6] = 1024;
              *(__int32 *)((char *)&v622[0].i32[3] + 2) = 476;
              v622[1].i16[1] = 2048;
              *(uint64_t *)((char *)v622[1].i64 + 4) = v399;
              v622[1].i16[6] = 2048;
              *(uint64_t *)((char *)&v622[1].i64[1] + 6) = v73;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
              goto LABEL_678;
            }
            uint64_t v428 = re::DataArray<re::TextureAtlasTile>::get(*(void *)(v73 + 2984) + 8, *(void *)(*(void *)(v398 + 112) + v48));
            v429 = (char *)&v635 + v427;
            *(_OWORD *)v429 = *(_OWORD *)v428;
            *(void *)(v429 + 14) = *(void *)(v428 + 14);
            v427 += 24;
            v48 += 8;
          }
          while (v427 != 144);
          uint64_t v430 = v424 + 224 * i2;
          nunint64_t n = *(unsigned __int8 *)(v430 + 212);
          if (*(unsigned char *)(v430 + 212)) {
            v595.i8[0] = *(unsigned char *)(v424 + 224 * i2 + 213);
          }
          unint64_t PointLightFaceLookatOrientations = (unint64_t)re::getPointLightFaceLookatOrientations((re *)v428);
          unint64_t v73 = PointLightFaceLookatOrientations;
          v611 = v432;
          unint64_t v433 = 0;
          unint64_t v399 = i5 + 9;
          uint64_t v434 = v424 + 224 * i2 + 128;
          unint64_t i4 = (unint64_t)&v635;
          do
          {
            if (*(__int16 *)(i4 + 20) == -1)
            {
              v446 = *re::graphicsLogObjects((re *)PointLightFaceLookatOrientations);
              unint64_t PointLightFaceLookatOrientations = os_log_type_enabled(v446, OS_LOG_TYPE_DEFAULT);
              if (PointLightFaceLookatOrientations)
              {
                if (*(void *)(i5 + 8)) {
                  uint64_t v447 = *(void *)(i5 + 16);
                }
                else {
                  uint64_t v447 = i5 + 9;
                }
                v656.i32[0] = 136315138;
                *(uint64_t *)((char *)v656.i64 + 4) = v447;
                _os_log_impl(&dword_233120000, v446, OS_LOG_TYPE_DEFAULT, "Failed to allocate shadow map face for point light %s: not enough free space in shadow map atlas.", (uint8_t *)&v656, 0xCu);
              }
            }
            else
            {
              unint64_t v48 = (unint64_t)v592;
              re::ShadowView::ShadowView((re::ShadowView *)&v656, v592);
              if ((unint64_t)v611 <= v433) {
                goto LABEL_676;
              }
              uint64_t v436 = *(void *)(v73 + 16 * v433);
              uint64_t v437 = *(void *)(v73 + 16 * v433 + 8);
              simd_float4 v658 = *(simd_float4 *)(i5 + 80);
              v659.columns[0].i64[0] = v436;
              v659.columns[0].i64[1] = v437;
              if (*(void *)(i5 + 8)) {
                unint64_t v438 = *(void *)(i5 + 16);
              }
              else {
                unint64_t v438 = i5 + 9;
              }
              re::DynamicString::format(v592, (re::Allocator *)"%s_face%u", (re::DynamicString *)&v655, v438, v433);
              re::DynamicString::operator=((re::DynamicString *)&v656, (re::DynamicString *)&v655);
              if (v655.columns[0].i64[0] && (v655.columns[0].i8[8] & 1) != 0) {
                (*(void (**)(void))(*(void *)v655.columns[0].i64[0] + 40))();
              }
              float v439 = atan2f((float)*(unsigned int *)i4, (float)(*(_DWORD *)i4 - 3));
              float v440 = v439 + v439;
              re::Projection::setFromMatrix4x4F((uint64_t)&v659.columns[1], v434);
              float v441 = v659.columns[1].f32[1];
              float v442 = (float)(v659.columns[2].f32[0] - v659.columns[1].f32[3])
                   / (float)(v659.columns[2].f32[1] - v659.columns[2].f32[2]);
              float v443 = (float)(v659.columns[2].f32[0] + v659.columns[1].f32[3]) * 0.5;
              float v444 = (float)(v659.columns[2].f32[1] + v659.columns[2].f32[2]) * 0.5;
              float v445 = v441 * tanf(v440 * 0.5);
              v659.columns[2].f32[1] = v444 + v445;
              v659.columns[2].f32[2] = v444 - v445;
              v659.columns[2].f32[0] = v443 + (float)(v442 * v445);
              v659.columns[1].f32[3] = v443 - (float)(v442 * v445);
              HIDWORD(v667[0]) = v619;
              if (LOBYTE(v667[0]) | nn)
              {
                if (nn || !LOBYTE(v667[0]))
                {
                  if (nn && !LOBYTE(v667[0])) {
                    LOBYTE(v667[0]) = 1;
                  }
                  BYTE1(v667[0]) = v595.i8[0];
                }
                else
                {
                  LOBYTE(v667[0]) = 0;
                }
              }
              *(_OWORD *)v661 = *(_OWORD *)i4;
              *(void *)&v661[14] = *(void *)(i4 + 14);
              re::DynamicArray<re::ShadowView>::add((_anonymous_namespace_ *)v622, (uint64_t)&v656);
              unint64_t PointLightFaceLookatOrientations = v656.i64[0];
              if (v656.i64[0] && (v656.i8[8] & 1) != 0) {
                unint64_t PointLightFaceLookatOrientations = (*(uint64_t (**)(void))(*(void *)v656.i64[0] + 40))();
              }
            }
            i4 += 24;
            ++v433;
          }
          while (v433 != 6);
          unint64_t v423 = *(void *)(v398 + 16);
          unint64_t v73 = v591;
          unint64_t i4 = 224;
          unint64_t v399 = (unint64_t)&v635;
          unint64_t v48 = v589;
LABEL_558:
          v48 += 48;
        }
LABEL_559:
        unint64_t v421 = v584 + 1;
      }
      while (v584 + 1 != v576);
LABEL_560:
      int v329 = v558;
      if (v558)
      {
        uint64_t v330 = v566;
        unsigned int v448 = v562 + 1;
        unint64_t i5 = v546;
        unint64_t k = (unint64_t)v592;
        int v449 = v554;
        do
        {
          uint64_t v328 = v448;
          if (v448 >= *((_DWORD *)v566 + 8)) {
            break;
          }
          ++v448;
        }
        while ((*(_DWORD *)(*((void *)v566 + 2) + 352 * v328) & 0x80000000) == 0);
      }
      else
      {
        uint64_t v328 = v562;
        uint64_t v330 = v566 + 176;
        unint64_t i5 = v546;
        unint64_t k = (unint64_t)v592;
        int v449 = v554;
      }
      BOOL v450 = v330 == (unsigned __int16 *)v570;
      if (v558) {
        BOOL v450 = v449 == v328;
      }
      if (v450) {
        goto LABEL_468;
      }
    }
    unint64_t v407 = 0;
    unint64_t v73 = (unint64_t)(v611 + 14);
    while (1)
    {
      uint64_t v408 = re::BucketArray<re::LightContextBuilder::RealWorldProxyLightBucket,4ul>::operator[]((uint64_t)(v611 + 14), v407);
      unint64_t v409 = *(void *)(v408 + 16);
      if (v409) {
        break;
      }
LABEL_503:
      if (++v407 == v406) {
        goto LABEL_504;
      }
    }
    unint64_t i4 = v408;
    unint64_t i5 = 0;
    unint64_t i2 = 0;
    nunint64_t n = 0;
    while (1)
    {
      unint64_t v399 = *(void *)(i4 + 48);
      if (v399 <= nn) {
        break;
      }
      if (*(unsigned char *)(*(void *)(i4 + 56) + nn))
      {
        unint64_t v399 = *(void *)(i4 + 104);
        if (v399 <= nn) {
          goto LABEL_683;
        }
        unint64_t v48 = *(void *)(i4 + 32);
        uint64_t v410 = re::DataArray<re::TextureAtlasTile>::get(*(void *)(v591 + 2984) + 8, *(void *)(*(void *)(i4 + 112) + 8 * nn));
        unint64_t v399 = *(void *)(i4 + 80);
        if (v399 <= nn) {
          goto LABEL_684;
        }
        v411 = (float32x4_t *)(*(void *)(i4 + 88) + i5);
        simd_float4 v412 = (simd_float4)v411[2];
        float32x4_t v414 = *v411;
        simd_float4 v413 = (simd_float4)v411[1];
        v659.columns[0] = (simd_float4)v411[3];
        simd_float4 v658 = v412;
        simd_float4 v656 = (simd_float4)v414;
        simd_float4 v657 = v413;
        LOBYTE(v620) = *(unsigned char *)(v48 + i2 + 132);
        if ((_BYTE)v620) {
          BYTE1(v620) = *(unsigned char *)(v48 + i2 + 133);
        }
        re::LightContextBuilder::buildShadowViews(re::PerFrameAllocator *,re::LightContexts &)const::$_0::operator()(v592, v48 + i2, v410, (uint64_t)&v656, 0, v619, &v620, (_anonymous_namespace_ *)v622);
        unint64_t v409 = *(void *)(i4 + 16);
      }
      ++nn;
      i2 += 144;
      i5 += 64;
      if (nn >= v409) {
        goto LABEL_503;
      }
    }
LABEL_678:
    v655.columns[0].i64[0] = 0;
    memset(&v659, 0, 32);
    simd_float4 v658 = 0u;
    simd_float4 v657 = 0u;
    simd_float4 v656 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    v635.columns[0].i32[0] = 136315906;
    *(uint64_t *)((char *)v635.columns[0].i64 + 4) = (uint64_t)"operator[]";
    v635.columns[0].i16[6] = 1024;
    *(__int32 *)((char *)&v635.columns[0].i32[3] + 2) = 476;
    v635.columns[1].i16[1] = 2048;
    *(uint64_t *)((char *)v635.columns[1].i64 + 4) = nn;
    v635.columns[1].i16[6] = 2048;
    *(uint64_t *)((char *)&v635.columns[1].i64[1] + 6) = v399;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_679:
    v655.columns[0].i64[0] = 0;
    memset(&v659, 0, 32);
    simd_float4 v658 = 0u;
    simd_float4 v657 = 0u;
    simd_float4 v656 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    v635.columns[0].i32[0] = 136315906;
    *(uint64_t *)((char *)v635.columns[0].i64 + 4) = (uint64_t)"operator[]";
    v635.columns[0].i16[6] = 1024;
    *(__int32 *)((char *)&v635.columns[0].i32[3] + 2) = 476;
    v635.columns[1].i16[1] = 2048;
    *(uint64_t *)((char *)v635.columns[1].i64 + 4) = nn;
    v635.columns[1].i16[6] = 2048;
    *(uint64_t *)((char *)&v635.columns[1].i64[1] + 6) = v399;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_680:
    v655.columns[0].i64[0] = 0;
    memset(&v659, 0, 32);
    simd_float4 v658 = 0u;
    simd_float4 v657 = 0u;
    simd_float4 v656 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    v635.columns[0].i32[0] = 136315906;
    *(uint64_t *)((char *)v635.columns[0].i64 + 4) = (uint64_t)"operator[]";
    v635.columns[0].i16[6] = 1024;
    *(__int32 *)((char *)&v635.columns[0].i32[3] + 2) = 476;
    v635.columns[1].i16[1] = 2048;
    *(uint64_t *)((char *)v635.columns[1].i64 + 4) = nn;
    v635.columns[1].i16[6] = 2048;
    *(uint64_t *)((char *)&v635.columns[1].i64[1] + 6) = v399;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_681:
    v655.columns[0].i64[0] = 0;
    memset(&v659, 0, 32);
    simd_float4 v658 = 0u;
    simd_float4 v657 = 0u;
    simd_float4 v656 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    v622[0].i32[0] = 136315906;
    *(uint64_t *)((char *)v622[0].i64 + 4) = (uint64_t)"operator[]";
    v622[0].i16[6] = 1024;
    *(__int32 *)((char *)&v622[0].i32[3] + 2) = 476;
    v622[1].i16[1] = 2048;
    *(uint64_t *)((char *)v622[1].i64 + 4) = v398;
    v622[1].i16[6] = 2048;
    *(uint64_t *)((char *)&v622[1].i64[1] + 6) = v48;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_682:
    v655.columns[0].i64[0] = 0;
    memset(&v659, 0, 32);
    simd_float4 v658 = 0u;
    simd_float4 v657 = 0u;
    simd_float4 v656 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    v622[0].i32[0] = 136315906;
    *(uint64_t *)((char *)v622[0].i64 + 4) = (uint64_t)"operator[]";
    v622[0].i16[6] = 1024;
    *(__int32 *)((char *)&v622[0].i32[3] + 2) = 476;
    v622[1].i16[1] = 2048;
    *(uint64_t *)((char *)v622[1].i64 + 4) = v399;
    v622[1].i16[6] = 2048;
    *(uint64_t *)((char *)&v622[1].i64[1] + 6) = v73;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_683:
    v655.columns[0].i64[0] = 0;
    memset(&v659, 0, 32);
    simd_float4 v658 = 0u;
    simd_float4 v657 = 0u;
    simd_float4 v656 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    v635.columns[0].i32[0] = 136315906;
    *(uint64_t *)((char *)v635.columns[0].i64 + 4) = (uint64_t)"operator[]";
    v635.columns[0].i16[6] = 1024;
    *(__int32 *)((char *)&v635.columns[0].i32[3] + 2) = 476;
    v635.columns[1].i16[1] = 2048;
    *(uint64_t *)((char *)v635.columns[1].i64 + 4) = nn;
    v635.columns[1].i16[6] = 2048;
    *(uint64_t *)((char *)&v635.columns[1].i64[1] + 6) = v399;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_684:
    v655.columns[0].i64[0] = 0;
    memset(&v659, 0, 32);
    simd_float4 v658 = 0u;
    simd_float4 v657 = 0u;
    simd_float4 v656 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    v635.columns[0].i32[0] = 136315906;
    *(uint64_t *)((char *)v635.columns[0].i64 + 4) = (uint64_t)"operator[]";
    v635.columns[0].i16[6] = 1024;
    *(__int32 *)((char *)&v635.columns[0].i32[3] + 2) = 476;
    v635.columns[1].i16[1] = 2048;
    *(uint64_t *)((char *)v635.columns[1].i64 + 4) = nn;
    v635.columns[1].i16[6] = 2048;
    *(uint64_t *)((char *)&v635.columns[1].i64[1] + 6) = v399;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_685:
    v655.columns[0].i64[0] = 0;
    memset(&v659, 0, 32);
    simd_float4 v658 = 0u;
    simd_float4 v657 = 0u;
    simd_float4 v656 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    v635.columns[0].i32[0] = 136315906;
    *(uint64_t *)((char *)v635.columns[0].i64 + 4) = (uint64_t)"operator[]";
    v635.columns[0].i16[6] = 1024;
    *(__int32 *)((char *)&v635.columns[0].i32[3] + 2) = 476;
    v635.columns[1].i16[1] = 2048;
    *(uint64_t *)((char *)v635.columns[1].i64 + 4) = nn;
    v635.columns[1].i16[6] = 2048;
    *(uint64_t *)((char *)&v635.columns[1].i64[1] + 6) = i2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_686:
    v655.columns[0].i64[0] = 0;
    memset(&v659, 0, 32);
    simd_float4 v658 = 0u;
    simd_float4 v657 = 0u;
    simd_float4 v656 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    v635.columns[0].i32[0] = 136315906;
    *(uint64_t *)((char *)v635.columns[0].i64 + 4) = (uint64_t)"operator[]";
    v635.columns[0].i16[6] = 1024;
    *(__int32 *)((char *)&v635.columns[0].i32[3] + 2) = 476;
    v635.columns[1].i16[1] = 2048;
    *(uint64_t *)((char *)v635.columns[1].i64 + 4) = nn;
    v635.columns[1].i16[6] = 2048;
    *(uint64_t *)((char *)&v635.columns[1].i64[1] + 6) = i2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_687:
    v655.columns[0].i64[0] = 0;
    memset(&v659, 0, 32);
    simd_float4 v658 = 0u;
    simd_float4 v657 = 0u;
    simd_float4 v656 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    v635.columns[0].i32[0] = 136315906;
    *(uint64_t *)((char *)v635.columns[0].i64 + 4) = (uint64_t)"operator[]";
    v635.columns[0].i16[6] = 1024;
    *(__int32 *)((char *)&v635.columns[0].i32[3] + 2) = 476;
    v635.columns[1].i16[1] = 2048;
    *(uint64_t *)((char *)v635.columns[1].i64 + 4) = i2;
    v635.columns[1].i16[6] = 2048;
    *(uint64_t *)((char *)&v635.columns[1].i64[1] + 6) = nn;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_688:
    re::internal::assertLog((re::internal *)6, v383, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1018, i5, v455);
    _os_crash();
    __break(1u);
LABEL_689:
    v655.columns[0].i64[0] = 0;
    memset(&v659, 0, 32);
    simd_float4 v658 = 0u;
    simd_float4 v657 = 0u;
    simd_float4 v656 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    v622[0].i32[0] = 136315906;
    *(uint64_t *)((char *)v622[0].i64 + 4) = (uint64_t)"operator[]";
    v622[0].i16[6] = 1024;
    *(__int32 *)((char *)&v622[0].i32[3] + 2) = 866;
    v622[1].i16[1] = 2048;
    *(uint64_t *)((char *)v622[1].i64 + 4) = nn;
    v622[1].i16[6] = 2048;
    *(uint64_t *)((char *)&v622[1].i64[1] + 6) = i4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_690:
    re::internal::assertLog((re::internal *)4, v57, "assertion failure: '%s' (%s:line %i) Cannot copy from a FixedArray of a different size", "m_size == other.m_size", "copy", 388);
    _os_crash();
    __break(1u);
  }
LABEL_468:
  re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(i5, (uint64_t)v622);
  re::DynamicArray<re::ShadowView>::deinit((uint64_t)v622);
  v635.columns[2].i64[0] = 0;
  v635.columns[1].i64[0] = 0;
  v635.columns[1].i32[2] = 0;
  v635.columns[0] = (simd_float4)k;
  re::DynamicArray<re::FilterView>::setCapacity(&v635, 0);
  ++v635.columns[1].i32[2];
  int v386 = *(_DWORD *)(v73 + 2964);
  if (v386)
  {
    unint64_t v387 = v73 + 2936;
    uint64_t v384 = *(unsigned int *)(v73 + 2968);
    if (v384)
    {
      uint64_t v388 = 0;
      v389 = *(_DWORD **)(v73 + 2952);
      while ((*v389 & 0x80000000) == 0)
      {
        v389 += 88;
        if (v384 == ++v388)
        {
          LODWORD(v38re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_DWORD *)(v73 + 2968);
          break;
        }
      }
      uint64_t v385 = v388;
    }
    else
    {
      uint64_t v385 = 0;
    }
    uint64_t v451 = v73 + 2936;
  }
  else
  {
    unint64_t v387 = v73 + 120;
    uint64_t v451 = v73 + 120 + 352 * *(void *)(v73 + 104);
  }
  BOOL v452 = v387 == v451;
  if (v386) {
    BOOL v452 = v384 == v385;
  }
  if (!v452)
  {
    v611 = v667;
    int v571 = *(_DWORD *)(v73 + 2964);
    uint64_t v563 = v451;
    int v567 = v384;
    do
    {
      uint64_t v577 = v385;
      unint64_t v581 = v387;
      if (v386) {
        uint64_t v461 = *(void *)(v387 + 16) + 352 * v385 + 8;
      }
      else {
        uint64_t v461 = v387 + 8;
      }
      uint64_t v585 = v461;
      unint64_t v462 = *(void *)(v461 + 208);
      if (v462)
      {
        unint64_t i5 = v462;
        for (unint64_t i4 = 0; i4 != i5; ++i4)
        {
          uint64_t v463 = re::BucketArray<re::LightContextBuilder::RealWorldProxyLightBucket,4ul>::operator[](v585 + 168, i4);
          unint64_t v464 = *(void *)(v463 + 16);
          if (v464)
          {
            unint64_t i2 = v463;
            unint64_t v398 = 0;
            nunint64_t n = 128;
            do
            {
              uint64_t v465 = *(void *)(i2 + 32);
              unint64_t v399 = v465 + nn;
              if (*(unsigned char *)(v465 + nn + 95))
              {
                unint64_t v48 = *(void *)(i2 + 48);
                if (v48 <= v398) {
                  goto LABEL_675;
                }
                if (*(unsigned char *)(*(void *)(i2 + 56) + v398))
                {
                  unint64_t v48 = *(void *)(i2 + 80);
                  if (v48 <= v398) {
                    goto LABEL_681;
                  }
                  v466 = (__int16 *)re::DataArray<re::TextureAtlasTile>::get(*(void *)(v73 + 2984) + 104, *(void *)(*(void *)(i2 + 88) + 8 * v398));
                  if (v466[10] == -1)
                  {
                    v503 = *re::graphicsLogObjects((re *)v466);
                    if (os_log_type_enabled(v503, OS_LOG_TYPE_DEFAULT))
                    {
                      uint64_t v504 = v465 + nn - 119;
                      if (*(void *)(v465 + nn - 120)) {
                        uint64_t v504 = *(void *)(v465 + nn - 112);
                      }
                      v656.i32[0] = 136315138;
                      *(uint64_t *)((char *)v656.i64 + 4) = v504;
                      _os_log_impl(&dword_233120000, v503, OS_LOG_TYPE_DEFAULT, "Failed to allocate filter map for light %s: not enough free space in filter map atlas.", (uint8_t *)&v656, 0xCu);
                    }
                  }
                  else
                  {
                    v467 = v466;
                    uint64_t v468 = v465 + nn;
                    unint64_t v469 = *(void *)(v465 + nn + 64);
                    re::FilterView::FilterView((uint64_t)&v656, k);
                    unint64_t v668 = v469;
                    re::DynamicString::operator=((re::DynamicString *)&v656, (re::DynamicString *)(v399 - 128));
                    long long v470 = *(_OWORD *)v467;
                    *(void *)&v661[14] = *(void *)(v467 + 7);
                    *(_OWORD *)v661 = v470;
                    float v472 = *(float *)(v468 - 96);
                    float v471 = *(float *)(v468 - 92);
                    float v473 = *(float *)(v468 - 88);
                    float v474 = *(float *)(v468 - 80);
                    float v475 = *(float *)(v468 - 76);
                    float v476 = *(float *)(v468 - 72);
                    float v477 = *(float *)(v468 - 64);
                    float v478 = *(float *)(v468 - 60);
                    float v479 = *(float *)(v468 - 56);
                    float v480 = (float)(v472 + v475) + v479;
                    if (v480 >= 0.0)
                    {
                      float v505 = sqrtf(v480 + 1.0);
                      float v506 = v505 + v505;
                      float32x2_t v507 = vrecpe_f32((float32x2_t)COERCE_UNSIGNED_INT(v505 + v505));
                      float32x2_t v508 = vmul_f32(v507, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v505 + v505), v507));
                      float v509 = vmul_f32(v508, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v505 + v505), v508)).f32[0];
                      v514.f32[0] = (float)(v476 - v478) * v509;
                      float v515 = (float)(v477 - v473) * v509;
                      float v516 = (float)(v471 - v474) * v509;
                      float v517 = v506 * 0.25;
                    }
                    else if (v472 < v475 || v472 < v479)
                    {
                      float v482 = 1.0 - v472;
                      BOOL v483 = v475 < v479;
                      BOOL v484 = v475 < v479;
                      float v485 = sqrtf((float)(v482 - v475) + v479);
                      *(float *)&unsigned int v486 = v485 + v485;
                      float32x2_t v487 = vrecpe_f32((float32x2_t)v486);
                      float32x2_t v488 = vmul_f32(v487, vrecps_f32((float32x2_t)v486, v487));
                      float v489 = vmul_f32(v488, vrecps_f32((float32x2_t)v486, v488)).f32[0];
                      float v490 = (float)(v473 + v477) * v489;
                      float v491 = v476 + v478;
                      float v492 = v491 * v489;
                      float v493 = *(float *)&v486 * 0.25;
                      float v494 = (float)(v471 - v474) * v489;
                      float v495 = sqrtf(v475 + (float)(v482 - v479));
                      *(float *)&unsigned int v496 = v495 + v495;
                      float32x2_t v497 = vrecpe_f32((float32x2_t)v496);
                      float32x2_t v498 = vmul_f32(v497, vrecps_f32((float32x2_t)v496, v497));
                      float v499 = vmul_f32(v498, vrecps_f32((float32x2_t)v496, v498)).f32[0];
                      float v500 = (float)(v471 + v474) * v499;
                      float v501 = *(float *)&v496 * 0.25;
                      float v502 = v491 * v499;
                      float v517 = (float)(v477 - v473) * v499;
                      if (v483) {
                        v514.f32[0] = v490;
                      }
                      else {
                        v514.f32[0] = v500;
                      }
                      if (v484) {
                        float v515 = v492;
                      }
                      else {
                        float v515 = v501;
                      }
                      if (v484) {
                        float v516 = v493;
                      }
                      else {
                        float v516 = v502;
                      }
                      if (v484) {
                        float v517 = v494;
                      }
                    }
                    else
                    {
                      float v510 = sqrtf(v472 + (float)((float)(1.0 - v475) - v479));
                      *(float *)&unsigned int v511 = v510 + v510;
                      float32x2_t v512 = vrecpe_f32((float32x2_t)v511);
                      float32x2_t v513 = vmul_f32(v512, vrecps_f32((float32x2_t)v511, v512));
                      v513.f32[0] = vmul_f32(v513, vrecps_f32((float32x2_t)v511, v513)).f32[0];
                      v514.f32[0] = *(float *)&v511 * 0.25;
                      float v515 = (float)(v471 + v474) * v513.f32[0];
                      float v516 = (float)(v473 + v477) * v513.f32[0];
                      float v517 = (float)(v476 - v478) * v513.f32[0];
                    }
                    v514.f32[1] = v515;
                    v514.i64[1] = __PAIR64__(LODWORD(v517), LODWORD(v516));
                    simd_float4 v658 = *(simd_float4 *)(v468 - 48);
                    v659.columns[0] = v514;
                    re::Projection::setFromMatrix4x4F((uint64_t)&v659.columns[1], v468);
                    *(int32x2_t *)&v661[12] = vadd_s32(*(int32x2_t *)&v661[12], (int32x2_t)0x300000003);
                    *(int32x2_t *)v661 = vadd_s32(*(int32x2_t *)v661, (int32x2_t)0x500000005);
                    re::DynamicArray<re::FilterView>::add((uint64_t)&v635, (uint64_t)&v656);
                    re::DynamicArray<re::MeshScene>::deinit((uint64_t)v667);
                    if (v656.i64[0] && (v656.i8[8] & 1) != 0) {
                      (*(void (**)(uint64_t, uint64_t))(*(void *)v656.i64[0] + 40))(v656.i64[0], v657.i64[0]);
                    }
                  }
                  unint64_t v464 = *(void *)(i2 + 16);
                  unint64_t v73 = v591;
                }
              }
              ++v398;
              nn += 240;
            }
            while (v398 < v464);
          }
        }
      }
      uint64_t v590 = *(void *)(v585 + 264);
      if (v590)
      {
        unint64_t i2 = 0;
        uint64_t v586 = v585 + 224;
        do
        {
          uint64_t v518 = re::BucketArray<re::LightContextBuilder::RealWorldProxyLightBucket,4ul>::operator[](v586, i2);
          unint64_t v519 = *(void *)(v518 + 16);
          if (v519)
          {
            unint64_t v398 = v518;
            unint64_t v399 = 0;
            unint64_t i4 = 128;
            do
            {
              nunint64_t n = *(void *)(v398 + 32);
              unint64_t v48 = nn + i4;
              if (*(unsigned char *)(nn + i4 + 86))
              {
                unint64_t v73 = *(void *)(v398 + 48);
                if (v73 <= v399) {
                  goto LABEL_677;
                }
                if (*(unsigned char *)(*(void *)(v398 + 56) + v399))
                {
                  unint64_t v73 = *(void *)(v398 + 80);
                  if (v73 <= v399) {
                    goto LABEL_682;
                  }
                  uint64_t v520 = re::DataArray<re::TextureAtlasTile>::get(*(void *)(v591 + 2984) + 104, *(void *)(*(void *)(v398 + 88) + 8 * v399));
                  unsigned int v521 = *(_DWORD *)v520;
                  *(_OWORD *)v650 = *(_OWORD *)(v520 + 4);
                  int v522 = *(unsigned __int16 *)(v520 + 20);
                  unint64_t i5 = *(void *)(nn + i4 + 64);
                  v523 = re::getPointLightFaceLookatOrientations((re *)v520);
                  if (v522 == 0xFFFF)
                  {
                    v533 = *re::graphicsLogObjects((re *)v523);
                    unint64_t k = (unint64_t)v592;
                    if (os_log_type_enabled(v533, OS_LOG_TYPE_DEFAULT))
                    {
                      uint64_t v534 = nn + i4 - 119;
                      if (*(void *)(nn + i4 - 120)) {
                        uint64_t v534 = *(void *)(nn + i4 - 112);
                      }
                      v656.i32[0] = 136315138;
                      *(uint64_t *)((char *)v656.i64 + 4) = v534;
                      _os_log_impl(&dword_233120000, v533, OS_LOG_TYPE_DEFAULT, "Failed to allocate filter map face for point light %s: not enough free space in filter map atlas.", (uint8_t *)&v656, 0xCu);
                    }
                  }
                  else
                  {
                    re::FilterView::FilterView((uint64_t)&v656, (uint64_t)v592);
                    unint64_t v668 = i5;
                    simd_float4 v658 = *(simd_float4 *)(nn + i4 - 48);
                    v659.columns[0].i64[1] = 0x3F80000000000000;
                    v659.columns[0].i64[0] = 0;
                    re::DynamicString::format((re::DynamicString *)"_face%u", (re::DynamicString *)&v655, 0);
                    re::DynamicString::operator+((re::DynamicString *)(v48 - 128), (uint64_t)&v655, (re::DynamicString *)v622);
                    if (v622[0].i8[8]) {
                      v524 = (const char *)v622[1].i64[0];
                    }
                    else {
                      v524 = &v622[0].i8[9];
                    }
                    size_t v525 = strlen(v524);
                    *(void *)v648 = v524;
                    *(void *)&v648[8] = v525;
                    re::DynamicString::operator=((re::DynamicString *)&v656, (uint64_t)v648);
                    if (v622[0].i64[0])
                    {
                      if (v622[0].i8[8]) {
                        (*(void (**)(void))(*(void *)v622[0].i64[0] + 40))();
                      }
                      memset(v622, 0, 32);
                    }
                    if (v655.columns[0].i64[0] && (v655.columns[0].i8[8] & 1) != 0) {
                      (*(void (**)(void))(*(void *)v655.columns[0].i64[0] + 40))();
                    }
                    float v526 = atan2f((float)v521, (float)(v521 - 3));
                    float v527 = v526 + v526;
                    re::Projection::setFromMatrix4x4F((uint64_t)&v659.columns[1], nn + i4);
                    float v528 = v659.columns[1].f32[1];
                    float v529 = (float)(v659.columns[2].f32[0] - v659.columns[1].f32[3])
                         / (float)(v659.columns[2].f32[1] - v659.columns[2].f32[2]);
                    float v530 = (float)(v659.columns[2].f32[0] + v659.columns[1].f32[3]) * 0.5;
                    float v531 = (float)(v659.columns[2].f32[1] + v659.columns[2].f32[2]) * 0.5;
                    float v532 = v528 * tanf(v527 * 0.5);
                    v659.columns[2].f32[1] = v531 + v532;
                    v659.columns[2].f32[2] = v531 - v532;
                    v659.columns[2].f32[0] = v530 + (float)(v529 * v532);
                    v659.columns[1].f32[3] = v530 - (float)(v529 * v532);
                    *(_DWORD *)v661 = v521;
                    *(_OWORD *)&v661[4] = *(_OWORD *)v650;
                    *(_WORD *)&v661[20] = v522;
                    re::DynamicArray<re::FilterView>::add((uint64_t)&v635, (uint64_t)&v656);
                    re::DynamicArray<re::MeshScene>::deinit((uint64_t)v667);
                    unint64_t k = (unint64_t)v592;
                    if (v656.i64[0] && (v656.i8[8] & 1) != 0) {
                      (*(void (**)(void))(*(void *)v656.i64[0] + 40))();
                    }
                  }
                  unint64_t v519 = *(void *)(v398 + 16);
                }
              }
              ++v399;
              i4 += 224;
            }
            while (v399 < v519);
          }
          ++i2;
        }
        while (i2 != v590);
      }
      int v386 = v571;
      if (v571)
      {
        unint64_t v387 = v581;
        unsigned int v535 = v577 + 1;
        unint64_t v73 = v591;
        int v536 = v567;
        do
        {
          uint64_t v385 = v535;
          if (v535 >= *(_DWORD *)(v581 + 32)) {
            break;
          }
          ++v535;
        }
        while ((*(_DWORD *)(*(void *)(v581 + 16) + 352 * v385) & 0x80000000) == 0);
      }
      else
      {
        uint64_t v385 = v577;
        unint64_t v387 = v581 + 352;
        unint64_t v73 = v591;
        int v536 = v567;
      }
      BOOL v537 = v387 == v563;
      if (v571) {
        BOOL v537 = v536 == v385;
      }
    }
    while (!v537);
  }
  uint64_t v453 = a10;
  uint64_t v454 = *(void *)(a10 + 40);
  if (v454)
  {
    for (unint64_t i5 = 0; i5 != v454; ++i5)
    {
      unint64_t v455 = *(void *)(v453 + 40);
      if (v455 <= i5) {
        goto LABEL_688;
      }
      nunint64_t n = i5 >> 2;
      unint64_t i4 = *(void *)(v453 + 8);
      if (i4 <= i5 >> 2) {
        goto LABEL_689;
      }
      uint64_t v456 = *(void *)(v453 + 32);
      if (*(unsigned char *)(v453 + 16)) {
        uint64_t v456 = a10 + 24;
      }
      uint64_t v457 = *(void *)(v456 + 8 * nn) + 40 * (i5 & 3);
      uint64_t v458 = *(void *)(v457 + 16);
      if (v458)
      {
        uint64_t v459 = *(void *)(v457 + 32);
        unint64_t i4 = v459 + 656 * v458;
        do
        {
          if (v635.columns[1].i64[0])
          {
            nunint64_t n = v635.columns[2].i64[0] + 304;
            uint64_t v460 = 352 * v635.columns[1].i64[0];
            do
            {
              if (*(void *)(nn + 40) == *(void *)(v459 + 416))
              {
                if (*(void *)nn) {
                  re::DynamicArray<re::MeshScene>::add((_anonymous_namespace_ *)nn, (long long *)v459);
                }
              }
              nn += 352;
              v460 -= 352;
            }
            while (v460);
          }
          v459 += 656;
        }
        while (v459 != i4);
      }
      uint64_t v453 = a10;
    }
  }
  re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v546 + 40, (uint64_t)&v635);
  return re::DynamicArray<re::FilterView>::deinit((uint64_t)&v635);
}

_anonymous_namespace_ *re::DynamicArray<re::ShadowView>::add(_anonymous_namespace_ *result, uint64_t a2)
{
  float32x4_t v3 = result;
  unint64_t v5 = *((void *)result + 1);
  unint64_t v4 = *((void *)result + 2);
  if (v4 >= v5)
  {
    unint64_t v6 = v4 + 1;
    if (v5 < v4 + 1)
    {
      if (*(void *)result)
      {
        unint64_t v7 = 2 * v5;
        if (!v5) {
          unint64_t v7 = 8;
        }
        if (v7 <= v6) {
          unint64_t v8 = v6;
        }
        else {
          unint64_t v8 = v7;
        }
        uint64_t result = (_anonymous_namespace_ *)re::DynamicArray<re::ShadowView>::setCapacity(result, v8);
      }
      else
      {
        uint64_t result = (_anonymous_namespace_ *)re::DynamicArray<re::ShadowView>::setCapacity(v3, v6);
        ++*((_DWORD *)v3 + 6);
      }
    }
    unint64_t v4 = *((void *)v3 + 2);
  }
  uint64_t v9 = *((void *)v3 + 4);
  uint64_t v10 = v9 + 320 * v4;
  *(_OWORD *)uint64_t v10 = 0u;
  *(_OWORD *)(v10 + 16) = 0u;
  *(void *)(v10 + 24) = *(void *)(a2 + 24);
  uint64_t v11 = *(void *)(a2 + 8);
  *(void *)uint64_t v10 = *(void *)a2;
  *(void *)a2 = 0;
  uint64_t v12 = *(void *)(a2 + 16);
  *(void *)(a2 + 24) = 0;
  uint64_t v14 = *(void *)(v10 + 8);
  uint64_t v13 = *(void *)(v10 + 16);
  *(void *)(v10 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v11;
  *(void *)(v10 + 16) = v12;
  *(void *)(a2 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v14;
  *(void *)(a2 + 16) = v13;
  long long v15 = *(_OWORD *)(a2 + 96);
  long long v16 = *(_OWORD *)(a2 + 112);
  long long v17 = *(_OWORD *)(a2 + 128);
  *(void *)(v10 + 142) = *(void *)(a2 + 142);
  *(_OWORD *)(v10 + 112) = v16;
  *(_OWORD *)(v10 + 12re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v17;
  *(_OWORD *)(v10 + 96) = v15;
  long long v18 = *(_OWORD *)(a2 + 32);
  long long v19 = *(_OWORD *)(a2 + 48);
  long long v20 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v10 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v10 + 80) = v20;
  *(_OWORD *)(v10 + 32) = v18;
  *(_OWORD *)(v10 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v19;
  *(unsigned char *)(v10 + 160) = *(unsigned char *)(a2 + 160);
  LODWORD(v12) = *(unsigned __int8 *)(a2 + 161);
  *(unsigned char *)(v10 + 16re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = v12;
  if (v12) {
    *(unsigned char *)(v9 + 320 * v4 + 162) = *(unsigned char *)(a2 + 162);
  }
  int v21 = *(unsigned __int8 *)(a2 + 164);
  *(unsigned char *)(v9 + 320 * v4 + 164) = v21;
  if (v21) {
    *(_DWORD *)(v9 + 320 * v4 + 16re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_DWORD *)(a2 + 168);
  }
  uint64_t v22 = v9 + 320 * v4;
  long long v23 = *(_OWORD *)(a2 + 176);
  long long v24 = *(_OWORD *)(a2 + 192);
  long long v25 = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(v22 + 20re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(v22 + 224) = v25;
  *(_OWORD *)(v22 + 176) = v23;
  *(_OWORD *)(v22 + 192) = v24;
  long long v26 = *(_OWORD *)(a2 + 240);
  long long v27 = *(_OWORD *)(a2 + 256);
  long long v28 = *(_OWORD *)(a2 + 288);
  *(_OWORD *)(v22 + 272) = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(v22 + 28re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v28;
  *(_OWORD *)(v22 + 240) = v26;
  *(_OWORD *)(v22 + 256) = v27;
  int v29 = *(unsigned __int8 *)(a2 + 304);
  *(unsigned char *)(v22 + 304) = v29;
  if (v29) {
    *(unsigned char *)(v9 + 320 * v4 + 305) = *(unsigned char *)(a2 + 305);
  }
  uint64_t v30 = v9 + 320 * v4;
  int v31 = *(_DWORD *)(a2 + 308);
  *(unsigned char *)(v30 + 312) = *(unsigned char *)(a2 + 312);
  *(_DWORD *)(v30 + 30re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v31;
  ++*((void *)v3 + 2);
  ++*((_DWORD *)v3 + 6);
  return result;
}

re::ShadowView *re::ShadowView::ShadowView(re::ShadowView *this, re::Allocator *a2)
{
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *(void *)this = a2;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
  re::DynamicString::setCapacity(this, 0);
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0x3F80000000000000;
  *((_DWORD *)this + 16) = 0;
  *(_OWORD *)((char *)this + 6re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = xmmword_234390F00;
  *(void *)((char *)this + 84) = 0xBDCCCCCD3DCCCCCDLL;
  *((unsigned char *)this + 92) = 0;
  *((_OWORD *)this + 6) = xmmword_23435FD80;
  *((_DWORD *)this + 2re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 1;
  *((void *)this + 16) = 0;
  *((void *)this + 17) = 0;
  *((void *)this + 15) = 0;
  *((_DWORD *)this + 36) = 0;
  *((_WORD *)this + 74) = -1;
  *((_WORD *)this + 80) = 1;
  *((unsigned char *)this + 164) = 0;
  *((_OWORD *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_DWORD *)this + 60) = 0;
  *(_OWORD *)((char *)this + 244) = xmmword_234390F00;
  *(void *)((char *)this + 260) = 0xBDCCCCCD3DCCCCCDLL;
  *((unsigned char *)this + 26re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  *((_OWORD *)this + 17) = xmmword_23435FD80;
  *((_DWORD *)this + 72) = 1;
  *((void *)this + 37) = 0;
  *((unsigned char *)this + 304) = 0;
  *((_DWORD *)this + 77) = 0;
  *((unsigned char *)this + 312) = 0;
  return this;
}

__n128 re::DynamicArray<re::FilterView>::add(uint64_t a1, uint64_t a2)
{
  unint64_t v5 = *(void *)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  if (v4 >= v5)
  {
    unint64_t v6 = v4 + 1;
    if (v5 < v4 + 1)
    {
      if (*(void *)a1)
      {
        unint64_t v7 = 2 * v5;
        if (!v5) {
          unint64_t v7 = 8;
        }
        if (v7 <= v6) {
          unint64_t v8 = v6;
        }
        else {
          unint64_t v8 = v7;
        }
        re::DynamicArray<re::FilterView>::setCapacity((void *)a1, v8);
      }
      else
      {
        re::DynamicArray<re::FilterView>::setCapacity((void *)a1, v6);
        ++*(_DWORD *)(a1 + 24);
      }
    }
    unint64_t v4 = *(void *)(a1 + 16);
  }
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = v9 + 352 * v4;
  *(_OWORD *)uint64_t v10 = 0u;
  *(_OWORD *)(v10 + 16) = 0u;
  *(void *)(v10 + 24) = *(void *)(a2 + 24);
  uint64_t v11 = *(void *)(a2 + 8);
  *(void *)uint64_t v10 = *(void *)a2;
  *(void *)a2 = 0;
  uint64_t v12 = *(void *)(a2 + 16);
  *(void *)(a2 + 24) = 0;
  uint64_t v14 = *(void *)(v10 + 8);
  uint64_t v13 = *(void *)(v10 + 16);
  *(void *)(v10 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v11;
  *(void *)(v10 + 16) = v12;
  *(void *)(a2 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v14;
  *(void *)(a2 + 16) = v13;
  long long v15 = *(_OWORD *)(a2 + 96);
  long long v16 = *(_OWORD *)(a2 + 112);
  long long v17 = *(_OWORD *)(a2 + 128);
  *(void *)(v10 + 142) = *(void *)(a2 + 142);
  *(_OWORD *)(v10 + 112) = v16;
  *(_OWORD *)(v10 + 12re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v17;
  *(_OWORD *)(v10 + 96) = v15;
  long long v18 = *(_OWORD *)(a2 + 32);
  long long v19 = *(_OWORD *)(a2 + 48);
  long long v20 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v10 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v10 + 80) = v20;
  *(_OWORD *)(v10 + 32) = v18;
  *(_OWORD *)(v10 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v19;
  *(unsigned char *)(v10 + 160) = *(unsigned char *)(a2 + 160);
  LODWORD(v12) = *(unsigned __int8 *)(a2 + 161);
  *(unsigned char *)(v10 + 16re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = v12;
  if (v12) {
    *(unsigned char *)(v9 + 352 * v4 + 162) = *(unsigned char *)(a2 + 162);
  }
  int v21 = *(unsigned __int8 *)(a2 + 164);
  *(unsigned char *)(v9 + 352 * v4 + 164) = v21;
  if (v21) {
    *(_DWORD *)(v9 + 352 * v4 + 16re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_DWORD *)(a2 + 168);
  }
  uint64_t v22 = v9 + 352 * v4;
  long long v23 = *(_OWORD *)(a2 + 176);
  long long v24 = *(_OWORD *)(a2 + 192);
  long long v25 = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(v22 + 20re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(v22 + 224) = v25;
  *(_OWORD *)(v22 + 176) = v23;
  *(_OWORD *)(v22 + 192) = v24;
  __n128 result = *(__n128 *)(a2 + 240);
  long long v27 = *(_OWORD *)(a2 + 256);
  long long v28 = *(_OWORD *)(a2 + 288);
  *(_OWORD *)(v22 + 272) = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(v22 + 28re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v28;
  *(__n128 *)(v22 + 240) = result;
  *(_OWORD *)(v22 + 256) = v27;
  *(void *)(v22 + 336) = 0;
  *(void *)(v22 + 312) = 0;
  *(void *)(v22 + 320) = 0;
  *(void *)(v22 + 304) = 0;
  *(_DWORD *)(v22 + 32re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  uint64_t v29 = *(void *)(a2 + 312);
  *(void *)(v22 + 304) = *(void *)(a2 + 304);
  *(void *)(v22 + 312) = v29;
  *(void *)(a2 + 304) = 0;
  *(void *)(a2 + 312) = 0;
  uint64_t v30 = *(void *)(v22 + 320);
  *(void *)(v22 + 320) = *(void *)(a2 + 320);
  *(void *)(a2 + 320) = v30;
  uint64_t v31 = *(void *)(v22 + 336);
  uint64_t v32 = *(void *)(a2 + 344);
  *(void *)(v22 + 336) = *(void *)(a2 + 336);
  *(void *)(a2 + 336) = v31;
  ++*(_DWORD *)(a2 + 328);
  ++*(_DWORD *)(v22 + 328);
  *(void *)(v22 + 344) = v32;
  ++*(void *)(a1 + 16);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::FilterView::FilterView(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = a2;
  *(void *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  re::DynamicString::setCapacity((void *)a1, 0);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  *(void *)(a1 + 56) = 0x3F80000000000000;
  *(_DWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 6re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = xmmword_234390F00;
  *(void *)(a1 + 84) = 0xBDCCCCCD3DCCCCCDLL;
  *(unsigned char *)(a1 + 92) = 0;
  *(_OWORD *)(a1 + 96) = xmmword_23435FD80;
  *(_DWORD *)(a1 + 112) = 1;
  *(void *)(a1 + 12re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 144) = 0;
  *(_WORD *)(a1 + 14re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = -1;
  *(_WORD *)(a1 + 160) = 1;
  *(unsigned char *)(a1 + 164) = 0;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 20re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_DWORD *)(a1 + 240) = 0;
  *(_OWORD *)(a1 + 244) = xmmword_234390F00;
  *(void *)(a1 + 260) = 0xBDCCCCCD3DCCCCCDLL;
  *(unsigned char *)(a1 + 26re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  *(_OWORD *)(a1 + 272) = xmmword_23435FD80;
  *(_DWORD *)(a1 + 28re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 1;
  *(void *)(a1 + 336) = 0;
  *(_DWORD *)(a1 + 32re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = a2;
  re::DynamicArray<re::MeshScene>::setCapacity((void *)(a1 + 304), 0);
  ++*(_DWORD *)(a1 + 328);
  *(void *)(a1 + 344) = 0;
  return a1;
}

uint64_t re::DynamicArray<re::MeshScene>::add(_anonymous_namespace_ *this, long long *a2)
{
  unint64_t v4 = *((void *)this + 2);
  if (v4 >= *((void *)this + 1))
  {
    re::DynamicArray<re::MeshScene>::growCapacity(this, v4 + 1);
    unint64_t v4 = *((void *)this + 2);
  }
  uint64_t v5 = *((void *)this + 4);
  uint64_t v6 = v5 + 656 * v4;
  long long v7 = *a2;
  long long v8 = a2[1];
  long long v9 = a2[3];
  *(_OWORD *)(v6 + 32) = a2[2];
  *(_OWORD *)(v6 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v9;
  *(_OWORD *)uint64_t v6 = v7;
  *(_OWORD *)(v6 + 16) = v8;
  long long v10 = a2[4];
  long long v11 = a2[5];
  long long v12 = a2[7];
  *(_OWORD *)(v6 + 96) = a2[6];
  *(_OWORD *)(v6 + 112) = v12;
  *(_OWORD *)(v6 + 64) = v10;
  *(_OWORD *)(v6 + 80) = v11;
  long long v13 = a2[8];
  long long v14 = a2[9];
  long long v15 = a2[11];
  *(_OWORD *)(v6 + 160) = a2[10];
  *(_OWORD *)(v6 + 176) = v15;
  *(_OWORD *)(v6 + 12re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v13;
  *(_OWORD *)(v6 + 144) = v14;
  long long v16 = a2[12];
  long long v17 = a2[13];
  long long v18 = a2[15];
  *(_OWORD *)(v6 + 224) = a2[14];
  *(_OWORD *)(v6 + 240) = v18;
  *(_OWORD *)(v6 + 192) = v16;
  *(_OWORD *)(v6 + 20re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v17;
  uint64_t result = re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::HashBrown(v6 + 256, (uint64_t *)a2 + 32);
  *(_DWORD *)(v6 + 320) = *((_DWORD *)a2 + 80);
  int v20 = *((unsigned __int8 *)a2 + 328);
  *(unsigned char *)(v6 + 32re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v20;
  if (v20) {
    *(void *)(v5 + 656 * v4 + 336) = *((void *)a2 + 42);
  }
  uint64_t v21 = v5 + 656 * v4;
  *(_OWORD *)(v21 + 344) = *(long long *)((char *)a2 + 344);
  long long v22 = *(long long *)((char *)a2 + 360);
  long long v23 = *(long long *)((char *)a2 + 376);
  long long v24 = *(long long *)((char *)a2 + 408);
  *(_OWORD *)(v21 + 392) = *(long long *)((char *)a2 + 392);
  *(_OWORD *)(v21 + 40re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v24;
  *(_OWORD *)(v21 + 360) = v22;
  *(_OWORD *)(v21 + 376) = v23;
  long long v25 = *(long long *)((char *)a2 + 424);
  long long v26 = *(long long *)((char *)a2 + 440);
  long long v27 = *(long long *)((char *)a2 + 472);
  *(_OWORD *)(v21 + 456) = *(long long *)((char *)a2 + 456);
  *(_OWORD *)(v21 + 472) = v27;
  *(_OWORD *)(v21 + 424) = v25;
  *(_OWORD *)(v21 + 440) = v26;
  int v28 = *((unsigned __int8 *)a2 + 496);
  *(unsigned char *)(v21 + 496) = v28;
  if (v28)
  {
    long long v29 = a2[33];
    uint64_t v30 = v5 + 656 * v4;
    *(_OWORD *)(v30 + 512) = a2[32];
    *(_OWORD *)(v30 + 52re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v29;
  }
  uint64_t v31 = v5 + 656 * v4;
  *(void *)(v31 + 544) = *((void *)a2 + 68);
  int v32 = *((unsigned __int8 *)a2 + 560);
  *(unsigned char *)(v31 + 560) = v32;
  if (v32)
  {
    __n128 v33 = (_OWORD *)(v5 + 656 * v4);
    long long v34 = a2[36];
    long long v35 = a2[37];
    long long v36 = a2[39];
    v33[38] = a2[38];
    v33[39] = v36;
    v33[36] = v34;
    v33[37] = v35;
  }
  *(void *)(v5 + 656 * v4 + 640) = *((void *)a2 + 80);
  ++*((void *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

__n128 re::BucketArray<re::LightContext,16ul>::add(uint64_t a1, __n128 *a2)
{
  unint64_t v4 = *(void *)(a1 + 40);
  unint64_t v5 = *(void *)(a1 + 8);
  if (v4 + 1 > 16 * v5)
  {
    re::BucketArray<re::LightContext,16ul>::setBucketsCapacity((uint64_t *)a1, (v4 + 16) >> 4);
    unint64_t v5 = *(void *)(a1 + 8);
  }
  if (v5 <= v4 >> 4)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v6 = a1 + 24;
  }
  else {
    uint64_t v6 = *(void *)(a1 + 32);
  }
  uint64_t v7 = *(void *)(v6 + 8 * (v4 >> 4));
  ++*(void *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  long long v8 = (__n128 *)(v7 + 168 * (v4 & 0xF));
  v8->n128_u64[0] = 0;
  v8->n128_u64[1] = 0;
  v8[1].n128_u64[0] = 0;
  v8->n128_u64[0] = a2->n128_u64[0];
  a2->n128_u64[0] = 0;
  v8->n128_u64[1] = a2->n128_u64[1];
  a2->n128_u64[1] = 0;
  unint64_t v9 = v8[1].n128_u64[0];
  v8[1].n128_u64[0] = a2[1].n128_u64[0];
  a2[1].n128_u64[0] = v9;
  v8[1].n128_u64[1] = 0;
  v8[2].n128_u64[0] = 0;
  v8[2].n128_u64[1] = 0;
  v8[1].n128_u64[1] = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = 0;
  v8[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = 0;
  unint64_t v10 = v8[2].n128_u64[1];
  v8[2].n128_u64[1] = a2[2].n128_u64[1];
  a2[2].n128_u64[1] = v10;
  v8[3].n128_u64[0] = 0;
  v8[3].n128_u64[1] = 0;
  v8[4].n128_u64[0] = 0;
  v8[3].n128_u64[0] = a2[3].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  v8[3].n128_u64[1] = a2[3].n128_u64[1];
  a2[3].n128_u64[1] = 0;
  unint64_t v11 = v8[4].n128_u64[0];
  v8[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[4].n128_u64[0] = v11;
  v8[4].n128_u64[1] = 0;
  v8[5].n128_u64[0] = 0;
  v8[5].n128_u64[1] = 0;
  v8[4].n128_u64[1] = a2[4].n128_u64[1];
  a2[4].n128_u64[1] = 0;
  v8[5].n128_u64[0] = a2[5].n128_u64[0];
  a2[5].n128_u64[0] = 0;
  unint64_t v12 = v8[5].n128_u64[1];
  v8[5].n128_u64[1] = a2[5].n128_u64[1];
  a2[5].n128_u64[1] = v12;
  v8[6].n128_u64[0] = 0;
  v8[6].n128_u64[1] = 0;
  v8[7].n128_u64[0] = 0;
  v8[6].n128_u64[0] = a2[6].n128_u64[0];
  a2[6].n128_u64[0] = 0;
  v8[6].n128_u64[1] = a2[6].n128_u64[1];
  a2[6].n128_u64[1] = 0;
  unint64_t v13 = v8[7].n128_u64[0];
  v8[7].n128_u64[0] = a2[7].n128_u64[0];
  a2[7].n128_u64[0] = v13;
  v8[7].n128_u64[1] = 0;
  v8[8].n128_u64[0] = 0;
  v8[8].n128_u64[1] = 0;
  v8[7].n128_u64[1] = a2[7].n128_u64[1];
  a2[7].n128_u64[1] = 0;
  v8[8].n128_u64[0] = a2[8].n128_u64[0];
  a2[8].n128_u64[0] = 0;
  unint64_t v14 = v8[8].n128_u64[1];
  v8[8].n128_u64[1] = a2[8].n128_u64[1];
  a2[8].n128_u64[1] = v14;
  __n128 result = a2[9];
  v8[10].n128_u8[0] = a2[10].n128_u8[0];
  v8[9] = result;
  return result;
}

uint64_t re::LightContextBuilder::Result::Result(uint64_t a1, re::Allocator *a2)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)a1 = a2;
  re::DynamicArray<re::ShadowView>::setCapacity((void *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  *(void *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(void *)(a1 + 40) = a2;
  re::DynamicArray<re::FilterView>::setCapacity((void *)(a1 + 40), 0);
  ++*(_DWORD *)(a1 + 64);
  re::LightContexts::LightContexts((re::LightContexts *)(a1 + 80), a2);
  return a1;
}

uint64_t re::SmallHashTable<unsigned short,re::LightContextBuilder::LightArrays,8ul,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true>::add(uint64_t a1, __int16 *a2, uint64_t a3)
{
  if (*(_DWORD *)(a1 + 2876))
  {
    uint64_t v6 = a1 + 2848;
LABEL_3:
    return re::HashTable<unsigned short,re::LightContextBuilder::LightArrays,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,true>::add(v6, a2, a3);
  }
  uint64_t v8 = a1 + 32;
  uint64_t v9 = *(void *)(a1 + 16);
  if (v9)
  {
    uint64_t v10 = 0;
    do
    {
      if (*(unsigned __int16 *)(a1 + v10 + 32) == (unsigned __int16)*a2) {
        return a1 + v10 + 40;
      }
      v10 += 352;
    }
    while (352 * v9 != v10);
    if ((v9 & 0xFFFFFFF8) == 0) {
      goto LABEL_19;
    }
    if (*(void *)(a1 + 2848)) {
      goto LABEL_15;
    }
    unint64_t v11 = *(uint64_t **)a1;
    if (!*(void *)a1)
    {
    }
    re::HashTable<unsigned short,re::LightContextBuilder::LightArrays,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,true>::init(a1 + 2848, (uint64_t)v11, 16);
    uint64_t v9 = *(void *)(a1 + 16);
    if (v9)
    {
LABEL_15:
      unint64_t v12 = (_WORD *)(v8 + 352 * v9);
      unint64_t v13 = (_WORD *)(a1 + 32);
      do
      {
        re::HashTable<unsigned short,re::LightContextBuilder::LightArrays,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,true>::add(a1 + 2848, v13, (uint64_t)(v13 + 4));
        v13 += 176;
      }
      while (v13 != v12);
      uint64_t v9 = *(void *)(a1 + 16);
    }
    re::ObjectHelper::destroy<re::KeyValuePair<unsigned short,re::LightContextBuilder::LightArrays>>(a1 + 32, v8 + 352 * v9);
    *(void *)(a1 + 16) = 0;
    ++*(_DWORD *)(a1 + 24);
    uint64_t v6 = a1 + 2848;
    goto LABEL_3;
  }
LABEL_19:
  __int16 v24 = *a2;
  v25[0] = 0;
  v25[1] = 0;
  int v26 = 1;
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  uint64_t v27 = 0;
  int v30 = 0;
  re::BucketArray<re::LightContextBuilder::AmbientLightBucket,4ul>::swap((uint64_t)v25, a3);
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  int v33 = 1;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  uint64_t v34 = 0;
  int v37 = 0;
  re::BucketArray<re::LightContextBuilder::AmbientLightBucket,4ul>::swap((uint64_t)&v31, a3 + 56);
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  int v40 = 1;
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  uint64_t v41 = 0;
  int v44 = 0;
  re::BucketArray<re::LightContextBuilder::AmbientLightBucket,4ul>::swap((uint64_t)&v38, a3 + 112);
  uint64_t v45 = 0;
  uint64_t v46 = 0;
  int v47 = 1;
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  uint64_t v48 = 0;
  int v51 = 0;
  re::BucketArray<re::LightContextBuilder::AmbientLightBucket,4ul>::swap((uint64_t)&v45, a3 + 168);
  uint64_t v52 = 0;
  uint64_t v53 = 0;
  int v54 = 1;
  uint64_t v56 = 0;
  uint64_t v57 = 0;
  uint64_t v55 = 0;
  int v58 = 0;
  re::BucketArray<re::LightContextBuilder::AmbientLightBucket,4ul>::swap((uint64_t)&v52, a3 + 224);
  uint64_t v59 = 0;
  uint64_t v60 = 0;
  int v61 = 1;
  uint64_t v63 = 0;
  uint64_t v64 = 0;
  uint64_t v62 = 0;
  int v65 = 0;
  re::BucketArray<re::LightContextBuilder::AmbientLightBucket,4ul>::swap((uint64_t)&v59, a3 + 280);
  uint64_t v66 = *(void *)(a3 + 336);
  unint64_t v15 = *(void *)(a1 + 16);
  if (v15 < 8)
  {
    uint64_t v16 = v8 + 352 * v15;
    *(_WORD *)uint64_t v16 = v24;
    *(void *)(v16 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
    *(void *)(v16 + 16) = 0;
    *(_DWORD *)(v16 + 24) = 1;
    *(void *)(v16 + 40) = 0;
    *(void *)(v16 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
    *(void *)(v16 + 32) = 0;
    *(_DWORD *)(v16 + 56) = 0;
    re::BucketArray<re::LightContextBuilder::AmbientLightBucket,4ul>::swap(v16 + 8, (uint64_t)v25);
    *(void *)(v16 + 64) = 0;
    *(void *)(v16 + 72) = 0;
    *(_DWORD *)(v16 + 80) = 1;
    *(void *)(v16 + 96) = 0;
    *(void *)(v16 + 104) = 0;
    *(void *)(v16 + 8re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
    *(_DWORD *)(v16 + 112) = 0;
    re::BucketArray<re::LightContextBuilder::AmbientLightBucket,4ul>::swap(v16 + 64, (uint64_t)&v31);
    *(void *)(v16 + 120) = 0;
    *(void *)(v16 + 12re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
    *(_DWORD *)(v16 + 136) = 1;
    *(void *)(v16 + 152) = 0;
    *(void *)(v16 + 160) = 0;
    *(void *)(v16 + 144) = 0;
    *(_DWORD *)(v16 + 16re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
    re::BucketArray<re::LightContextBuilder::AmbientLightBucket,4ul>::swap(v16 + 120, (uint64_t)&v38);
    *(void *)(v16 + 176) = 0;
    *(void *)(v16 + 184) = 0;
    *(_DWORD *)(v16 + 192) = 1;
    *(void *)(v16 + 20re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
    *(void *)(v16 + 216) = 0;
    *(void *)(v16 + 200) = 0;
    *(_DWORD *)(v16 + 224) = 0;
    re::BucketArray<re::LightContextBuilder::AmbientLightBucket,4ul>::swap(v16 + 176, (uint64_t)&v45);
    *(void *)(v16 + 232) = 0;
    *(void *)(v16 + 240) = 0;
    v16 += 232;
    *(_DWORD *)(v16 + 16) = 1;
    *(void *)(v16 + 32) = 0;
    *(void *)(v16 + 40) = 0;
    *(void *)(v16 + 24) = 0;
    *(_DWORD *)(v16 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
    re::BucketArray<re::LightContextBuilder::AmbientLightBucket,4ul>::swap(v16, (uint64_t)&v52);
    *(void *)(v16 + 56) = 0;
    *(void *)(v16 + 64) = 0;
    *(_DWORD *)(v16 + 72) = 1;
    *(void *)(v16 + 8re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
    *(void *)(v16 + 96) = 0;
    *(void *)(v16 + 80) = 0;
    *(_DWORD *)(v16 + 104) = 0;
    re::BucketArray<re::LightContextBuilder::AmbientLightBucket,4ul>::swap(v16 + 56, (uint64_t)&v59);
    *(void *)(v16 + 112) = v66;
    ++*(void *)(a1 + 16);
    ++*(_DWORD *)(a1 + 24);
    re::BucketArray<re::LightContextBuilder::RectAreaLightBucket,4ul>::deinit((uint64_t)&v59);
    if (v59)
    {
      int v17 = v61;
      if ((v61 & 1) == 0)
      {
        (*(void (**)(void))(*(void *)v59 + 40))();
        int v17 = v61;
      }
      uint64_t v59 = 0;
      uint64_t v60 = 0;
      int v61 = (v17 | 1) + 2;
    }
    re::BucketArray<re::LightContextBuilder::PointLightBucket,4ul>::deinit((uint64_t)&v52);
    if (v52)
    {
      int v18 = v54;
      if ((v54 & 1) == 0)
      {
        (*(void (**)(void))(*(void *)v52 + 40))();
        int v18 = v54;
      }
      uint64_t v52 = 0;
      uint64_t v53 = 0;
      int v54 = (v18 | 1) + 2;
    }
    re::BucketArray<re::LightContextBuilder::SpotLightBucket,4ul>::deinit((uint64_t)&v45);
    if (v45)
    {
      int v19 = v47;
      if ((v47 & 1) == 0)
      {
        (*(void (**)(void))(*(void *)v45 + 40))();
        int v19 = v47;
      }
      uint64_t v45 = 0;
      uint64_t v46 = 0;
      int v47 = (v19 | 1) + 2;
    }
    re::BucketArray<re::LightContextBuilder::RealWorldProxyLightBucket,4ul>::deinit((uint64_t)&v38);
    if (v38)
    {
      int v20 = v40;
      if ((v40 & 1) == 0)
      {
        (*(void (**)(void))(*(void *)v38 + 40))();
        int v20 = v40;
      }
      uint64_t v38 = 0;
      uint64_t v39 = 0;
      int v40 = (v20 | 1) + 2;
    }
    re::BucketArray<re::LightContextBuilder::DirectionalLightBucket,4ul>::deinit((uint64_t)&v31);
    if (v31)
    {
      int v21 = v33;
      if ((v33 & 1) == 0)
      {
        (*(void (**)(void))(*(void *)v31 + 40))();
        int v21 = v33;
      }
      uint64_t v31 = 0;
      uint64_t v32 = 0;
      int v33 = (v21 | 1) + 2;
    }
    re::BucketArray<re::LightContextBuilder::AmbientLightBucket,4ul>::deinit((uint64_t)v25);
    if (v25[0] && (v26 & 1) == 0) {
      (*(void (**)(void))(*(void *)v25[0] + 40))();
    }
    uint64_t v23 = *(void *)(a1 + 16);
    if (v23) {
      return v8 + 352 * (v23 - 1) + 8;
    }
    re::internal::assertLog((re::internal *)6, v22, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, -1, 0);
    _os_crash();
    __break(1u);
  }
  re::internal::assertLog((re::internal *)4, v14, "assertion failure: '%s' (%s:line %i) Capacity limit reached. DynamicInlineArray<T,N> cannot be resized.", "false", "ensureCapacity", 277);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::HashTable<unsigned short,re::LightContextBuilder::LightArrays,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,true>::add(uint64_t a1, _WORD *a2, uint64_t a3)
{
  unint64_t v6 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (unsigned __int16)*a2) ^ ((0xBF58476D1CE4E5B9 * (unsigned __int16)*a2) >> 27));
  unint64_t v7 = v6 ^ (v6 >> 31);
  if (!*(void *)a1)
  {
    LODWORD(vre::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
    goto LABEL_8;
  }
  unint64_t v8 = v7 % *(unsigned int *)(a1 + 24);
  uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v8);
  if (v9 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v14 = re::HashTable<unsigned short,re::LightContextBuilder::LightArrays,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,true>::addAsMove(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v13 = *(void *)(a1 + 16) + 352 * v14;
    return v13 + 8;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  unint64_t v11 = 0xBF58476D1CE4E5B9 * *(unsigned __int16 *)(v10 + 352 * v9 + 4);
  if (((0x94D049BB133111EBLL * (v11 ^ (v11 >> 27))) ^ ((0x94D049BB133111EBLL * (v11 ^ (v11 >> 27))) >> 31)) != v7)
  {
    do
    {
      LODWORD(v9) = *(_DWORD *)(v10 + 352 * v9) & 0x7FFFFFFF;
      if (v9 == 0x7FFFFFFF) {
        goto LABEL_8;
      }
      unint64_t v12 = 0xBF58476D1CE4E5B9 * *(unsigned __int16 *)(v10 + 352 * v9 + 4);
    }
    while (((0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) ^ ((0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) >> 31)) != v7);
  }
  uint64_t v13 = v10 + 352 * v9;
  return v13 + 8;
}

void re::HashTable<unsigned short,re::LightContextBuilder::LightArrays,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,true>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  unint64_t v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    unint64_t v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    unint64_t v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      unint64_t v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  unint64_t v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + 352 * v10, 16);
  if (v12)
  {
    unsigned int v14 = v12;
    *(void *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &unk_2343655D0, 4 * v10);
    }
    *(void *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

uint64_t re::HashTable<unsigned short,re::LightContextBuilder::LightArrays,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,true>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _WORD *a4, uint64_t a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      int v12 = *(_DWORD *)(a1 + 28);
      signed int v13 = 2 * v12;
      uint64_t v14 = *(void *)a1;
      if (*(void *)a1)
      {
        if (v13) {
          BOOL v15 = v9 == v13;
        }
        else {
          BOOL v15 = 1;
        }
        if (!v15 && (v12 & 0x80000000) == 0)
        {
          memset(v31, 0, 36);
          *(void *)&v31[36] = 0x7FFFFFFFLL;
          re::HashTable<unsigned short,re::LightContextBuilder::LightArrays,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,true>::init((uint64_t)v31, v14, v13);
          long long v16 = *(_OWORD *)v31;
          *(_OWORD *)uint64_t v31 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v16;
          uint64_t v17 = *(void *)&v31[16];
          uint64_t v18 = *(void *)(a1 + 16);
          *(void *)&unsigned char v31[16] = v18;
          *(void *)(a1 + 16) = v17;
          long long v20 = *(_OWORD *)&v31[24];
          *(_OWORD *)&v31[24] = *(_OWORD *)(a1 + 24);
          unsigned int v19 = *(_DWORD *)&v31[32];
          *(_OWORD *)(a1 + 24) = v20;
          unint64_t v21 = v19;
          if (v19)
          {
            unint64_t v22 = 0;
            uint64_t v23 = (unsigned __int16 *)(v18 + 4);
            do
            {
              if ((*((_DWORD *)v23 - 1) & 0x80000000) != 0)
              {
                unint64_t v24 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * *v23) ^ ((0xBF58476D1CE4E5B9 * *v23) >> 27));
                re::HashTable<unsigned short,re::LightContextBuilder::LightArrays,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,true>::addAsMove(a1, (v24 ^ (v24 >> 31)) % *(unsigned int *)(a1 + 24), v24 ^ (v24 >> 31), v23, v23 + 2);
              }
              ++v22;
              v23 += 176;
            }
            while (v22 < v21);
          }
          re::HashTable<unsigned short,re::LightContextBuilder::LightArrays,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,true>::deinit((uint64_t *)v31);
        }
      }
      else
      {
        if (v13) {
          signed int v27 = 2 * v12;
        }
        else {
          signed int v27 = 3;
        }
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v25 = *(void *)(a1 + 16);
    int v26 = *(_DWORD *)(v25 + 352 * v9);
  }
  else
  {
    uint64_t v25 = *(void *)(a1 + 16);
    int v26 = *(_DWORD *)(v25 + 352 * v9);
    *(_DWORD *)(a1 + 36) = v26 & 0x7FFFFFFF;
  }
  uint64_t v28 = 352 * v9;
  *(_DWORD *)(v25 + v2re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v26 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + v2re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_DWORD *)(*(void *)(a1 + 16) + v28) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(_WORD *)(*(void *)(a1 + 16) + v28 + 4) = *a4;
  uint64_t v29 = *(void *)(a1 + 16) + v28;
  *(void *)(v29 + 16) = 0;
  *(void *)(v29 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  *(_DWORD *)(v29 + 24) = 1;
  *(void *)(v29 + 40) = 0;
  *(void *)(v29 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  *(void *)(v29 + 32) = 0;
  *(_DWORD *)(v29 + 56) = 0;
  re::BucketArray<re::LightContextBuilder::AmbientLightBucket,4ul>::swap(v29 + 8, a5);
  *(void *)(v29 + 64) = 0;
  *(void *)(v29 + 72) = 0;
  *(_DWORD *)(v29 + 80) = 1;
  *(void *)(v29 + 96) = 0;
  *(void *)(v29 + 104) = 0;
  *(void *)(v29 + 8re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  *(_DWORD *)(v29 + 112) = 0;
  re::BucketArray<re::LightContextBuilder::AmbientLightBucket,4ul>::swap(v29 + 64, a5 + 56);
  *(void *)(v29 + 120) = 0;
  *(void *)(v29 + 12re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  *(_DWORD *)(v29 + 136) = 1;
  *(void *)(v29 + 152) = 0;
  *(void *)(v29 + 160) = 0;
  *(void *)(v29 + 144) = 0;
  *(_DWORD *)(v29 + 16re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  re::BucketArray<re::LightContextBuilder::AmbientLightBucket,4ul>::swap(v29 + 120, a5 + 112);
  *(void *)(v29 + 176) = 0;
  *(void *)(v29 + 184) = 0;
  *(_DWORD *)(v29 + 192) = 1;
  *(void *)(v29 + 20re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  *(void *)(v29 + 216) = 0;
  *(void *)(v29 + 200) = 0;
  *(_DWORD *)(v29 + 224) = 0;
  re::BucketArray<re::LightContextBuilder::AmbientLightBucket,4ul>::swap(v29 + 176, a5 + 168);
  *(void *)(v29 + 232) = 0;
  *(void *)(v29 + 240) = 0;
  v29 += 232;
  *(_DWORD *)(v29 + 16) = 1;
  *(void *)(v29 + 32) = 0;
  *(void *)(v29 + 40) = 0;
  *(void *)(v29 + 24) = 0;
  *(_DWORD *)(v29 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  re::BucketArray<re::LightContextBuilder::AmbientLightBucket,4ul>::swap(v29, a5 + 224);
  *(void *)(v29 + 56) = 0;
  *(void *)(v29 + 64) = 0;
  *(_DWORD *)(v29 + 72) = 1;
  *(void *)(v29 + 8re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  *(void *)(v29 + 96) = 0;
  *(void *)(v29 + 80) = 0;
  *(_DWORD *)(v29 + 104) = 0;
  re::BucketArray<re::LightContextBuilder::AmbientLightBucket,4ul>::swap(v29 + 56, a5 + 280);
  *(void *)(v29 + 112) = *(void *)(a5 + 336);
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

uint64_t re::BucketArray<re::LightContextBuilder::AmbientLightBucket,4ul>::swap(uint64_t a1, uint64_t a2)
{
  v7[0] = 0;
  v7[1] = 0;
  int v8 = 1;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  int v4 = *(_DWORD *)(a1 + 16);
  if (v4)
  {
    if (*(void *)(a1 + 8))
    {
      re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::move((uint64_t)v7, a1);
    }
    else
    {
      v7[0] = *(void *)a1;
      *(_DWORD *)(a1 + 16) = v4 + 2;
      int v8 = 3;
    }
  }
  else
  {
    int v8 = 3;
    re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::swap(v7, (uint64_t *)a1);
  }
  re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::operator=(a1, a2);
  re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::operator=(a2, (uint64_t)v7);
  uint64_t result = v7[0];
  if (v7[0] && (v8 & 1) == 0) {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)v7[0] + 40))();
  }
  uint64_t v6 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = v6;
  ++*(_DWORD *)(a1 + 48);
  ++*(_DWORD *)(a2 + 48);
  return result;
}

uint64_t re::BucketArray<re::LightContextBuilder::DirectionalLightBucket,4ul>::addUninitialized(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 40);
  unint64_t v3 = *(void *)(a1 + 8);
  if (v2 + 1 > 4 * v3)
  {
    re::BucketArray<re::LightContextBuilder::DirectionalLightBucket,4ul>::setBucketsCapacity((void *)a1, (v2 + 4) >> 2);
    unint64_t v3 = *(void *)(a1 + 8);
  }
  if (v3 <= v2 >> 2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v4 = a1 + 24;
  }
  else {
    uint64_t v4 = *(void *)(a1 + 32);
  }
  uint64_t v5 = *(void *)(v4 + 8 * (v2 >> 2));
  ++*(void *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  return v5 + 88 * (v2 & 3);
}

void *re::BucketArray<re::LightContextBuilder::DirectionalLightBucket,4ul>::setBucketsCapacity(void *result, unint64_t a2)
{
  unint64_t v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        unint64_t v4 = v3[1];
        if (v4 <= a2) {
          break;
        }
        uint64_t result = (void *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      if (v4 < a2)
      {
        uint64_t v5 = v3 + 3;
        do
        {
          uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t, void))(*(void *)*v3 + 32))(*v3, 352, 0);
          uint64_t v6 = result;
          if (*v3)
          {
            unint64_t v7 = v3[1];
            int v8 = *((_DWORD *)v3 + 4);
            if ((v8 & 1) == 0)
            {
              unint64_t v9 = *v5;
              BOOL v11 = v7 >= *v5;
              unint64_t v10 = v7 + 1;
              BOOL v11 = !v11 || v9 >= v10;
              if (v11) {
                goto LABEL_22;
              }
              unint64_t v12 = 2 * v9;
              goto LABEL_18;
            }
            unint64_t v10 = v7 + 1;
            if (v10 >= 3)
            {
              unint64_t v12 = 4;
LABEL_18:
              if (v12 <= v10) {
                unint64_t v14 = v10;
              }
              else {
                unint64_t v14 = v12;
              }
              uint64_t result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v14);
              int v8 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            unint64_t v13 = v3[1] + 1;
            uint64_t result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v13);
            int v8 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + 4) = v8;
          }
LABEL_22:
          BOOL v15 = v3 + 3;
          if ((v8 & 1) == 0) {
            BOOL v15 = (void *)v3[4];
          }
          unint64_t v16 = v3[1];
          v15[v16++] = v6;
          v3[1] = v16;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v16 < a2);
      }
    }
  }
  else
  {
    re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, a2);
    *((_DWORD *)v3 + 4) += 2;
    v3[5] = 0;
    uint64_t result = (void *)re::BucketArray<re::LightContextBuilder::DirectionalLightBucket,4ul>::setBucketsCapacity(v3, a2);
    ++*((_DWORD *)v3 + 12);
  }
  return result;
}

void re::DynamicArray<re::DirectionalLightInfo>::copy(void *a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 16);
  if (v4 >= a1[2])
  {
    re::DynamicArray<re::DirectionalLightInfo>::setCapacity(a1, *(void *)(a2 + 16));
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::DirectionalLightInfo *,re::DirectionalLightInfo *,re::DirectionalLightInfo *>(*(re::DynamicString **)(a2 + 32), (re::DynamicString *)(*(void *)(a2 + 32) + 144 * a1[2]), a1[4]);
    uint64_t v8 = a1[2];
    if (v8 != v4)
    {
      uint64_t v9 = *(void *)(a2 + 32);
      uint64_t v10 = a1[4];
      uint64_t v11 = 144 * v8;
      uint64_t v12 = 144 * v4;
      do
      {
        uint64_t v13 = v9 + v11;
        unint64_t v14 = re::DynamicString::DynamicString((re::DynamicString *)(v10 + v11), (const re::DynamicString *)(v9 + v11));
        long long v15 = *(_OWORD *)(v9 + v11 + 48);
        *((_OWORD *)v14 + 2) = *(_OWORD *)(v9 + v11 + 32);
        *((_OWORD *)v14 + 3) = v15;
        long long v16 = *(_OWORD *)(v9 + v11 + 64);
        long long v17 = *(_OWORD *)(v9 + v11 + 80);
        long long v18 = *(_OWORD *)(v9 + v11 + 96);
        *(_OWORD *)((char *)v14 + 10re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_OWORD *)(v9 + v11 + 108);
        *((_OWORD *)v14 + 5) = v17;
        *((_OWORD *)v14 + 6) = v18;
        *((_OWORD *)v14 + 4) = v16;
        *(void *)((char *)v14 + 124) = *(void *)(v9 + v11 + 124);
        int v19 = *(unsigned __int8 *)(v9 + v11 + 132);
        *((unsigned char *)v14 + 132) = v19;
        if (v19) {
          *((unsigned char *)v14 + 133) = *(unsigned char *)(v13 + 133);
        }
        uint64_t v20 = *(void *)(v13 + 134);
        *((_WORD *)v14 + 7re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = *(_WORD *)(v13 + 142);
        *(void *)((char *)v14 + 134) = v20;
        v9 += 144;
        v12 -= 144;
        v10 += 144;
      }
      while (v11 != v12);
    }
  }
  else
  {
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::DirectionalLightInfo *,re::DirectionalLightInfo *,re::DirectionalLightInfo *>(*(re::DynamicString **)(a2 + 32), (re::DynamicString *)(*(void *)(a2 + 32) + 144 * v4), a1[4]);
    uint64_t v5 = a1[2];
    if (v4 != v5)
    {
      uint64_t v6 = (re::DynamicString *)(a1[4] + 144 * v4);
      uint64_t v7 = 144 * v5 - 144 * v4;
      do
      {
        re::DynamicString::deinit(v6);
        uint64_t v6 = (re::DynamicString *)((char *)v6 + 144);
        v7 -= 144;
      }
      while (v7);
    }
  }
  a1[2] = v4;
}

re::DynamicString *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::DirectionalLightInfo *,re::DirectionalLightInfo *,re::DirectionalLightInfo *>(re::DynamicString *result, re::DynamicString *a2, uint64_t a3)
{
  if (result != a2)
  {
    uint64_t v5 = result;
    uint64_t v6 = 0;
    do
    {
      uint64_t result = re::DynamicString::operator=((re::DynamicString *)(a3 + v6), (re::DynamicString *)((char *)v5 + v6));
      long long v7 = *(_OWORD *)((char *)v5 + v6 + 48);
      *((_OWORD *)result + 2) = *(_OWORD *)((char *)v5 + v6 + 32);
      *((_OWORD *)result + 3) = v7;
      long long v8 = *(_OWORD *)((char *)v5 + v6 + 64);
      long long v9 = *(_OWORD *)((char *)v5 + v6 + 80);
      long long v10 = *(_OWORD *)((char *)v5 + v6 + 96);
      *(_OWORD *)((char *)result + 10re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_OWORD *)((char *)v5 + v6 + 108);
      *((_OWORD *)result + 5) = v9;
      *((_OWORD *)result + 6) = v10;
      *((_OWORD *)result + 4) = v8;
      *(void *)((char *)result + 124) = *(void *)((char *)v5 + v6 + 124);
      if (*((unsigned char *)result + 132) || *((unsigned char *)v5 + v6 + 132))
      {
        if (!*((unsigned char *)result + 132) || *((unsigned char *)v5 + v6 + 132))
        {
          if (*((unsigned char *)result + 132) || !*((unsigned char *)v5 + v6 + 132))
          {
            *(unsigned char *)(a3 + v6 + 133) = *((unsigned char *)v5 + v6 + 133);
          }
          else
          {
            *((unsigned char *)result + 132) = 1;
            *(unsigned char *)(a3 + v6 + 133) = *((unsigned char *)v5 + v6 + 133);
          }
        }
        else
        {
          *((unsigned char *)result + 132) = 0;
        }
      }
      uint64_t v11 = a3 + v6;
      uint64_t v12 = *(void *)((char *)v5 + v6 + 134);
      *(_WORD *)(v11 + 142) = *(_WORD *)((char *)v5 + v6 + 142);
      *(void *)(v11 + 134) = v12;
      v6 += 144;
    }
    while ((re::DynamicString *)((char *)v5 + v6) != a2);
  }
  return result;
}

void *re::BucketArray<re::LightContextBuilder::RealWorldProxyLightBucket,4ul>::setBucketsCapacity(void *result, unint64_t a2)
{
  unint64_t v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        unint64_t v4 = v3[1];
        if (v4 <= a2) {
          break;
        }
        uint64_t result = (void *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      if (v4 < a2)
      {
        uint64_t v5 = v3 + 3;
        do
        {
          uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t, void))(*(void *)*v3 + 32))(*v3, 480, 0);
          uint64_t v6 = result;
          if (*v3)
          {
            unint64_t v7 = v3[1];
            int v8 = *((_DWORD *)v3 + 4);
            if ((v8 & 1) == 0)
            {
              unint64_t v9 = *v5;
              BOOL v11 = v7 >= *v5;
              unint64_t v10 = v7 + 1;
              BOOL v11 = !v11 || v9 >= v10;
              if (v11) {
                goto LABEL_22;
              }
              unint64_t v12 = 2 * v9;
              goto LABEL_18;
            }
            unint64_t v10 = v7 + 1;
            if (v10 >= 3)
            {
              unint64_t v12 = 4;
LABEL_18:
              if (v12 <= v10) {
                unint64_t v14 = v10;
              }
              else {
                unint64_t v14 = v12;
              }
              uint64_t result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v14);
              int v8 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            unint64_t v13 = v3[1] + 1;
            uint64_t result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v13);
            int v8 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + 4) = v8;
          }
LABEL_22:
          long long v15 = v3 + 3;
          if ((v8 & 1) == 0) {
            long long v15 = (void *)v3[4];
          }
          unint64_t v16 = v3[1];
          v15[v16++] = v6;
          v3[1] = v16;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v16 < a2);
      }
    }
  }
  else
  {
    re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, a2);
    *((_DWORD *)v3 + 4) += 2;
    v3[5] = 0;
    uint64_t result = (void *)re::BucketArray<re::LightContextBuilder::RealWorldProxyLightBucket,4ul>::setBucketsCapacity(v3, a2);
    ++*((_DWORD *)v3 + 12);
  }
  return result;
}

uint64_t re::BucketArray<re::LightContextBuilder::RealWorldProxyLightBucket,4ul>::operator[](uint64_t a1, unint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1018, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(void *)(a1 + 8) <= a2 >> 2) {
    goto LABEL_8;
  }
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v3 = a1 + 24;
  }
  else {
    uint64_t v3 = *(void *)(a1 + 32);
  }
  return *(void *)(v3 + 8 * (a2 >> 2)) + 120 * (a2 & 3);
}

void *re::DynamicArray<re::SingleCullingFrustum>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      uint64_t result = (void *)*result;
      if (!*v5)
      {
        uint64_t result = (void *)re::DynamicArray<re::SingleCullingFrustum>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0xF0uLL))
        {
          uint64_t v2 = 240 * a2;
          uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 240 * a2, 16);
          if (result)
          {
            unint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 240, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        uint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      unint64_t v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = v8 + 240 * v9;
        BOOL v11 = v7;
        do
        {
          *(void *)BOOL v11 = 0;
          *((_DWORD *)v11 + 2) = 0;
          re::DynamicInlineArray<re::PlaneF,6ul>::move((unint64_t *)v11, (unint64_t *)v8);
          v11[7] = 0u;
          unint64_t v12 = v11 + 7;
          v12[6] = 0u;
          v12[7] = 0u;
          v12[4] = 0u;
          v12[5] = 0u;
          v12[2] = 0u;
          void v12[3] = 0u;
          v12[1] = 0u;
          memmove(v12, (const void *)(v8 + 112), 0x80uLL);
          *(void *)uint64_t v8 = 0;
          ++*(_DWORD *)(v8 + 8);
          v8 += 240;
          BOOL v11 = v12 + 8;
        }
        while (v8 != v10);
        uint64_t v8 = v5[4];
      }
      uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

uint64_t re::BucketArray<re::DynamicArray<re::CameraView> const*,4ul>::operator[](uint64_t a1, unint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1018, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(void *)(a1 + 8) <= a2 >> 2) {
    goto LABEL_8;
  }
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v3 = a1 + 24;
  }
  else {
    uint64_t v3 = *(void *)(a1 + 32);
  }
  return *(void *)(v3 + 8 * (a2 >> 2)) + 8 * (a2 & 3);
}

uint64_t re::RayTracedAmbientOcclusionProvider::RayTracedAmbientOcclusionProvider(uint64_t a1, const re::DynamicString *a2)
{
  re::DynamicString::DynamicString((re::DynamicString *)&v4, a2);
  *(void *)a1 = &unk_26E6D52C8;
  re::DynamicString::DynamicString((re::DynamicString *)(a1 + 8), (const re::DynamicString *)&v4);
  if (v4 && (v5 & 1) != 0) {
    (*(void (**)(void))(*(void *)v4 + 40))();
  }
  *(void *)a1 = &unk_26E71E0D8;
  *(unsigned char *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 44) = xmmword_234412B90;
  *(_WORD *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 62) = 16843009;
  *(_WORD *)(a1 + 66) = 256;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 16re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  *(void *)(a1 + 152) = 0;
  *(_DWORD *)(a1 + 176) = 0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 8re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 129) = 0u;
  return a1;
}

void re::RayTracedAmbientOcclusionProvider::~RayTracedAmbientOcclusionProvider(re::RayTracedAmbientOcclusionProvider *this)
{
  uint64_t v3 = (void *)((char *)this + 152);
  uint64_t v2 = *((void *)this + 19);
  if (v2)
  {
    uint64_t v4 = *((void *)this + 23);
    if (v4)
    {
      uint64_t v5 = *((void *)this + 21);
      if (v5)
      {
        uint64_t v6 = 8 * v5;
        do
        {
          if (*(void *)v4)
          {

            *(void *)uint64_t v4 = 0;
          }
          v4 += 8;
          v6 -= 8;
        }
        while (v6);
        uint64_t v2 = *((void *)this + 19);
        uint64_t v4 = *((void *)this + 23);
      }
      (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, v4);
    }
    *((void *)this + 23) = 0;
    v3[1] = 0;
    v3[2] = 0;
    void *v3 = 0;
    ++*((_DWORD *)this + 44);
  }
  re::AssetHandle::~AssetHandle((re::RayTracedAmbientOcclusionProvider *)((char *)this + 120));
  re::AssetHandle::~AssetHandle((re::RayTracedAmbientOcclusionProvider *)((char *)this + 96));
  re::AssetHandle::~AssetHandle((re::RayTracedAmbientOcclusionProvider *)((char *)this + 72));
  *(void *)this = &unk_26E6D52C8;
  re::DynamicString::deinit((re::RayTracedAmbientOcclusionProvider *)((char *)this + 8));
}

{
  uint64_t vars8;

  re::RayTracedAmbientOcclusionProvider::~RayTracedAmbientOcclusionProvider(this);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::RayTracedAmbientOcclusionProvider::prepareFrame(re::RayTracedAmbientOcclusionProvider *this, char *__s, char *a3, re::RenderFrame *a4)
{
  uint64_t v217 = *MEMORY[0x263EF8340];
  if (a3)
  {
    uint64_t v8 = *a3;
    if (*a3)
    {
      char v9 = a3[1];
      if (v9)
      {
        uint64_t v10 = a3 + 2;
        do
        {
          uint64_t v8 = 31 * v8 + v9;
          int v11 = *(unsigned __int8 *)v10++;
          char v9 = v11;
        }
        while (v11);
      }
      v8 &= ~0x8000000000000000;
    }
  }
  else
  {
    uint64_t v8 = 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v201 = v8;
  unint64_t v12 = (id *)*((void *)a4 + 1);
  int v13 = *((unsigned __int8 *)this + 40);
  BOOL v14 = *((unsigned __int8 *)this + 144) != v13;
  *((unsigned char *)this + 144) = v13;
  if (!v13) {
    return 0;
  }
  uint64_t v15 = re::RenderGraphDataStore::tryGet<re::SceneScope>((uint64_t)a4 + 32, __s, a3);
  __s2 = a3;
  uint64_t v80 = v12;
  char v79 = v14;
  if (!v15)
  {
    int ScopeLayer = re::RenderFrame::getScopeLayer(a4, a3);
LABEL_14:
    if (ScopeLayer == -1) {
      int v18 = 0;
    }
    else {
      int v18 = ScopeLayer;
    }
    goto LABEL_17;
  }
  uint64_t v16 = re::RenderGraphDataStore::tryGet<re::SimplifiedMeshBufferDeformationIndex>((uint64_t)a4 + 32, *(const char **)(v15 + 8));
  int ScopeLayer = re::RenderFrame::getScopeLayer(a4, a3);
  if (!v16) {
    goto LABEL_14;
  }
  int v18 = *(_DWORD *)(v16 + 8);
LABEL_17:
  unint64_t v78 = v18;
  if (*((void *)this + 21) <= (unint64_t)v18)
  {
    uint64_t v20 = (re *)re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::setCapacity((void *)this + 19, v18 + 1);
    int v21 = *((_DWORD *)this + 42);
    if ((int)v78 >= v21)
    {
      int v22 = v78 - v21 + 1;
      do
      {
        uint64_t v23 = re::globalAllocators(v20);
        unint64_t v24 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v23[2] + 32))(v23[2], 736, 16);
        bzero(v24, 0x2E0uLL);
        ArcSharedObject::ArcSharedObject((ArcSharedObject *)v24, 0);
        *unint64_t v24 = &unk_26E71E120;
        *((_DWORD *)v24 + 6) = 0;
        *((_WORD *)v24 + 14) = 257;
        *((_OWORD *)v24 + 14) = 0u;
        *((_OWORD *)v24 + 15) = 0u;
        *((_OWORD *)v24 + 16) = 0u;
        *((_OWORD *)v24 + 13) = 0u;
        *(_OWORD *)((char *)v24 + 26re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
        *(void *)((char *)v24 + 284) = 0x7FFFFFFFLL;
        *(_OWORD *)(v24 + 37) = 0u;
        *(_OWORD *)(v24 + 39) = 0u;
        *((_DWORD *)v24 + 82) = 0;
        *(void *)((char *)v24 + 332) = 0x7FFFFFFFLL;
        *(_OWORD *)(v24 + 43) = 0u;
        *(_OWORD *)(v24 + 45) = 0u;
        *((_DWORD *)v24 + 94) = 0;
        *(void *)((char *)v24 + 380) = 0x7FFFFFFFLL;
        v24[70] = 0;
        *(_OWORD *)((char *)v24 + 420) = 0u;
        *(_OWORD *)(v24 + 49) = 0u;
        *(_OWORD *)(v24 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0u;
        *((_DWORD *)v24 + 11re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
        *(_OWORD *)(v24 + 55) = 0u;
        *(_OWORD *)(v24 + 57) = 0u;
        *((_DWORD *)v24 + 12re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
        *((_OWORD *)v24 + 30) = 0u;
        *((_OWORD *)v24 + 3re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0u;
        *((_DWORD *)v24 + 13re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
        *(_OWORD *)(v24 + 65) = 0u;
        *(_OWORD *)(v24 + 67) = 0u;
        v24[71] = 850045863;
        *((_OWORD *)v24 + 44) = 0u;
        *((_OWORD *)v24 + 45) = 0u;
        *((_OWORD *)v24 + 42) = 0u;
        *((_OWORD *)v24 + 43) = 0u;
        *((_OWORD *)v24 + 40) = 0u;
        *((_OWORD *)v24 + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0u;
        *((_OWORD *)v24 + 3re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
        *((_OWORD *)v24 + 39) = 0u;
        *((_OWORD *)v24 + 36) = 0u;
        *((_OWORD *)v24 + 37) = 0u;
        unint64_t v26 = *((void *)this + 20);
        unint64_t v27 = *((void *)this + 21);
        if (v27 >= v26)
        {
          unint64_t v28 = v27 + 1;
          if (v26 < v27 + 1)
          {
            if (*((void *)this + 19))
            {
              uint64_t v29 = 2 * v26;
              _ZF = v26 == 0;
              unint64_t v31 = 8;
              if (!_ZF) {
                unint64_t v31 = v29;
              }
              if (v31 <= v28) {
                unint64_t v32 = v28;
              }
              else {
                unint64_t v32 = v31;
              }
              uint64_t v20 = (re *)re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::setCapacity((void *)this + 19, v32);
            }
            else
            {
              uint64_t v20 = (re *)re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::setCapacity((void *)this + 19, v28);
              ++*((_DWORD *)this + 44);
            }
          }
          unint64_t v27 = *((void *)this + 21);
        }
        *(void *)(*((void *)this + 23) + 8 * v27) = v24;
        *((void *)this + 2re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = v27 + 1;
        ++*((_DWORD *)this + 44);
        --v22;
      }
      while (v22);
    }
  }
  int32x4_t v157 = 0;
  float32x4_t v156 = 0;
  int v158 = 1065353216;
  unint64_t v159 = 0;
  uint64_t v161 = 0;
  uint64_t v160 = 0;
  uint64_t v162 = -1;
  uint64_t v163 = 0;
  uint64_t v164 = -1;
  uint64_t v165 = 0;
  uint64_t v166 = -1;
  uint64_t v167 = 0;
  uint64_t v168 = -1;
  uint64_t v169 = 0;
  uint64_t v170 = -1;
  uint64_t v171 = 0;
  uint64_t v172 = -1;
  uint64_t v173 = 0;
  uint64_t v174 = -1;
  uint64_t v175 = 0;
  uint64_t v176 = -1;
  uint64_t v177 = 0;
  uint64_t v178 = -1;
  uint64_t v179 = 0;
  uint64_t v180 = -1;
  uint64_t v181 = 0;
  uint64_t v182 = -1;
  uint64_t v183 = 0;
  uint64_t v184 = -1;
  uint64_t v185 = 0;
  uint64_t v186 = -1;
  uint64_t v187 = 0;
  uint64_t v188 = -1;
  uint64_t v189 = 0;
  uint64_t v190 = -1;
  uint64_t v191 = 0;
  uint64_t v192 = -1;
  uint64_t v193 = 0;
  uint64_t v194 = -1;
  uint64_t v195 = 0;
  uint64_t v196 = -1;
  uint64_t v197 = 0;
  uint64_t v198 = -1;
  uint64_t v199 = 0;
  uint64_t v200 = -1;
  unint64_t v33 = *((void *)this + 21);
  if (v33 <= v78)
  {
    uint64_t v140 = 0;
    long long v212 = 0u;
    long long v213 = 0u;
    memset(v211, 0, sizeof(v211));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)float32x4_t v202 = 136315906;
    *(void *)&v202[4] = "operator[]";
    uint64_t v203 = 0x800000003150400;
    *(void *)uint64_t v204 = v78;
    *(_WORD *)&v204[8] = 2048;
    *(void *)&v204[10] = v33;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)&v156, *(void *)(*((void *)this + 23) + 8 * v78));
  int32x4_t v157 = (char *)this + 44;
  int v158 = *((_DWORD *)this + 17);
  ScopeResolutiounint64_t n = re::RenderFrame::getScopeResolution(a4, __s2);
  int v35 = ScopeResolution;
  uint64_t v19 = 0;
  unint64_t v36 = HIDWORD(ScopeResolution);
  int v37 = (float)((float)(int)ScopeResolution * 0.25);
  int v38 = (float)((float)SHIDWORD(ScopeResolution) * 0.25);
  unint64_t v159 = __PAIR64__(v38, v37);
  if (v37 && v38)
  {
    uint64_t v39 = v156;
    char v40 = v79;
    if (*((void *)v156 + 26) != ScopeResolution)
    {
      *((void *)v156 + 26) = ScopeResolution;
      re::RayTracedAmbientOcclusionMutablePersistentData::createPersistentTextures((void **)v39, v37, v38, v80 + 23);
      char v40 = 1;
    }
    *((unsigned char *)v39 + 29) = v40;
    int v76 = v36;
    if (*((unsigned char *)v39 + 28))
    {
      *((unsigned char *)v39 + 2re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      re::RayTracedAmbientOcclusionMutablePersistentData::createRayTracer(v39, v80);
      re::RayTracedAmbientOcclusionMutablePersistentData::compileShaderFunctions((void **)v39, (uint64_t)v80, (uint64_t)this + 44);
      v211[0] = objc_msgSend(v80[23], sel_newEvent);
      NS::SharedPtr<MTL::Texture>::operator=((void **)v39 + 79, v211);
      if (v211[0]) {

      }
      uint64_t v39 = v156;
    }
    id v41 = *((id *)v39 + 80);
    id v155 = v41;
    v211[0] = (void *)0x13DF6A181E311838;
    re::RenderFrame::registerExternalTexture((uint64_t)a4, &v155, v211, &v201, 0);
    if (v41)
    {

      id v155 = 0;
    }
    id v42 = *((id *)v156 + 81);
    id v154 = v42;
    v211[0] = (void *)0x13DF6A181E3A91ECLL;
    re::RenderFrame::registerExternalTexture((uint64_t)a4, &v154, v211, &v201, 0);
    if (v42)
    {

      id v154 = 0;
    }
    id v43 = *((id *)v156 + 82);
    id v153 = v43;
    v211[0] = (void *)0x1B064461A1224D17;
    re::RenderFrame::registerExternalTexture((uint64_t)a4, &v153, v211, &v201, 0);
    if (v43)
    {

      id v153 = 0;
    }
    v152[0] = 0;
    v152[1] = "";
    BYTE4(v211[4]) = 0;
    __asm { FMOV            V8.2S, #1.0 }
    v211[5] = _D8;
    int v214 = -1;
    char v216 = 0;
    *(void **)((char *)&v211[1] + 4) = (void *)v159;
    v211[0] = (void *)0x1900000000;
    LODWORD(v211[1]) = 2;
    *(_OWORD *)((char *)&v211[2] + 4) = xmmword_2343AC130;
    long long v215 = 0u;
    long long v212 = xmmword_2343AEB90;
    long long v213 = xmmword_234412BA0;
    BOOL v151 = 0;
    uint64_t v49 = *(re::RenderGraphPersistentResourceManager **)(*(void *)a4 + 296);
    uint64_t v50 = v152[0] >> 1;
    *(void *)float32x4_t v202 = v152[0] >> 1;
    uint64_t v140 = 0x4465F5311B5B73D5;
    uint64_t v129 = 0x4465F5311B5B73D5;
    re::RenderGraphPersistentResourceManager::registerPersistentTexture(v49, (const re::WeakStringID *)v202, (const re::WeakStringID *)&v140, (const re::WeakStringID *)&v129, a4, (const re::RenderGraphTargetDescription *)v211, &v151);
    int v51 = *(re::RenderGraphPersistentResourceManager **)(*(void *)a4 + 296);
    *(void *)float32x4_t v202 = v50;
    uint64_t v140 = 0x4465F5311B5B73D6;
    uint64_t v129 = 0x4465F5311B5B73D6;
    re::RenderGraphPersistentResourceManager::registerPersistentTexture(v51, (const re::WeakStringID *)v202, (const re::WeakStringID *)&v140, (const re::WeakStringID *)&v129, a4, (const re::RenderGraphTargetDescription *)v211, &v151);
    v204[16] = 0;
    uint64_t v205 = _D8;
    long long v206 = xmmword_2343AEB90;
    long long v207 = xmmword_2343AEBA0;
    int v208 = -1;
    char v210 = 0;
    uint64_t v203 = v159;
    *(void *)float32x4_t v202 = 0xD00000000;
    *(_DWORD *)&v202[8] = 2;
    *(_OWORD *)uint64_t v204 = xmmword_2343AC130;
    long long v209 = 0u;
    uint64_t v52 = *(re::RenderGraphPersistentResourceManager **)(*(void *)a4 + 296);
    uint64_t v140 = v50;
    uint64_t v129 = 0x20954661F6FLL;
    uint64_t v118 = 0x20954661F6FLL;
    re::RenderGraphPersistentResourceManager::registerPersistentTexture(v52, (const re::WeakStringID *)&v140, (const re::WeakStringID *)&v129, (const re::WeakStringID *)&v118, a4, (const re::RenderGraphTargetDescription *)v202, &v151);
    char v144 = 0;
    float32x4_t v145 = _D8;
    long long v146 = xmmword_2343AEB90;
    long long v147 = xmmword_2343AEBA0;
    int v148 = -1;
    char v150 = 0;
    unint64_t v142 = v159;
    uint64_t v140 = 0x1900000000;
    int v141 = 2;
    long long v143 = xmmword_2343AC130;
    long long v149 = 0u;
    uint64_t v53 = *(re::RenderGraphPersistentResourceManager **)(*(void *)a4 + 296);
    uint64_t v129 = v50;
    uint64_t v118 = 0x238480915F587375;
    uint64_t v106 = 0x238480915F587375;
    re::RenderGraphPersistentResourceManager::registerPersistentTexture(v53, (const re::WeakStringID *)&v129, (const re::WeakStringID *)&v118, (const re::WeakStringID *)&v106, a4, (const re::RenderGraphTargetDescription *)&v140, &v151);
    char v133 = 0;
    uint64_t v134 = _D8;
    long long v135 = xmmword_2343AEB90;
    long long v136 = xmmword_2343AEBA0;
    int v137 = -1;
    char v139 = 0;
    unint64_t v131 = v159;
    uint64_t v129 = 0xFC00000000;
    int v130 = 2;
    long long v132 = xmmword_2343AC130;
    long long v138 = 0u;
    int v54 = *(re::RenderGraphPersistentResourceManager **)(*(void *)a4 + 296);
    uint64_t v55 = v152[0] >> 1;
    uint64_t v118 = v152[0] >> 1;
    uint64_t v106 = 0xE819A4F8ADA157;
    uint64_t v95 = 0xE819A4F8ADA157;
    re::RenderGraphPersistentResourceManager::registerPersistentTexture(v54, (const re::WeakStringID *)&v118, (const re::WeakStringID *)&v106, (const re::WeakStringID *)&v95, a4, (const re::RenderGraphTargetDescription *)&v129, &v151);
    char v122 = 0;
    float v123 = _D8;
    long long v124 = xmmword_2343AEB90;
    long long v125 = xmmword_2343AEBA0;
    int v126 = -1;
    char v128 = 0;
    unint64_t v120 = v159;
    uint64_t v118 = 0x1700000000;
    int v119 = 2;
    long long v121 = xmmword_2343AC130;
    long long v127 = 0u;
    uint64_t v56 = *(re::RenderGraphPersistentResourceManager **)(*(void *)a4 + 296);
    uint64_t v106 = v55;
    uint64_t v95 = 0x1C1B1AFA2EA4B8D3;
    v89[0] = 0x1C1B1AFA2EA4B8D3;
    re::RenderGraphPersistentResourceManager::registerPersistentTexture(v56, (const re::WeakStringID *)&v106, (const re::WeakStringID *)&v95, (const re::WeakStringID *)v89, a4, (const re::RenderGraphTargetDescription *)&v118, &v151);
    char v111 = 0;
    float32x4_t v112 = _D8;
    long long v113 = xmmword_2343AEB90;
    long long v114 = xmmword_2343AEBA0;
    int v115 = -1;
    char v117 = 0;
    int v109 = v76;
    uint64_t v106 = 0xA00000000;
    int v108 = v35;
    int v107 = 2;
    long long v110 = xmmword_2343AC130;
    long long v116 = 0u;
    uint64_t v57 = *(re::RenderGraphPersistentResourceManager **)(*(void *)a4 + 296);
    uint64_t v95 = v55;
    v89[0] = 0x1E19C7A8DCC7299BLL;
    v83[0] = 0x1E19C7A8DCC7299BLL;
    re::RenderGraphPersistentResourceManager::registerPersistentTexture(v57, (const re::WeakStringID *)&v95, (const re::WeakStringID *)v89, (const re::WeakStringID *)v83, a4, (const re::RenderGraphTargetDescription *)&v106, &v151);
    char v99 = 0;
    uint64_t v100 = _D8;
    long long v101 = xmmword_2343AEB90;
    long long v102 = xmmword_2343AEBA0;
    int v103 = -1;
    char v105 = 0;
    unint64_t v97 = v159;
    uint64_t v95 = 0xD00000000;
    int v96 = 2;
    long long v98 = xmmword_2343AC130;
    long long v104 = 0u;
    int v58 = *(re::RenderGraphPersistentResourceManager **)(*(void *)a4 + 296);
    uint64_t v59 = v152[0] >> 1;
    v89[0] = v152[0] >> 1;
    v83[0] = 0x5A9E5718CD5BF864;
    uint64_t v94 = 0x5A9E5718CD5BF864;
    re::RenderGraphPersistentResourceManager::registerPersistentTexture(v58, (const re::WeakStringID *)v89, (const re::WeakStringID *)v83, (const re::WeakStringID *)&v94, a4, (const re::RenderGraphTargetDescription *)&v95, &v151);
    uint64_t v160 = (4 * v159 * HIDWORD(v159));
    char v90 = 0;
    int v91 = 1065353216;
    unint64_t v92 = 0xFFFFFFFF00000020;
    LODWORD(v89[0]) = 0;
    v89[1] = 24 * v160;
    long long v93 = 0u;
    uint64_t v60 = *(re::RenderGraphPersistentResourceManager **)(*(void *)a4 + 296);
    v83[0] = v59;
    uint64_t v94 = 81930;
    uint64_t v88 = 81930;
    re::RenderGraphPersistentResourceManager::registerPersistentBuffer(v60, (const re::WeakStringID *)v83, (const re::WeakStringID *)&v94, (const re::WeakStringID *)&v88, a4, (const re::RenderGraphBufferDescription *)v89, &v151, 0);
    char v84 = 0;
    int v85 = 1065353216;
    unint64_t v86 = 0xFFFFFFFF00000020;
    LODWORD(v83[0]) = 0;
    v83[1] = 4 * v160;
    long long v87 = 0u;
    int v61 = *(re::RenderGraphPersistentResourceManager **)(*(void *)a4 + 296);
    uint64_t v94 = v59;
    uint64_t v88 = 0x1B0929D413E97EA9;
    uint64_t v82 = 0x1B0929D413E97EA9;
    re::RenderGraphPersistentResourceManager::registerPersistentBuffer(v61, (const re::WeakStringID *)&v94, (const re::WeakStringID *)&v88, (const re::WeakStringID *)&v82, a4, (const re::RenderGraphBufferDescription *)v83, &v151, 0);
    v81[0] = 0x6BAE80D95E64306FLL;
    v81[1] = (unint64_t)"RayTracedAmbientOcclusionProvider";
    unint64_t ScopeHash = re::RenderGraphProviderBase::generateScopeHash(v81, __s, __s2);
    unint64_t v63 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * (v78 ^ (v78 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v78 ^ (v78 >> 30))) >> 27));
    unint64_t v64 = (v63 ^ (v63 >> 31)) + (ScopeHash << 6) + (ScopeHash >> 2);
    unint64_t v65 = 0xBF58476D1CE4E5B9 * (v159 ^ ((unint64_t)v159 >> 30));
    unint64_t v66 = (0x94D049BB133111EBLL * (v65 ^ (v65 >> 27))) ^ ((0x94D049BB133111EBLL * (v65 ^ (v65 >> 27))) >> 31);
    unint64_t v67 = 0xBF58476D1CE4E5B9 * (HIDWORD(v159) ^ ((unint64_t)HIDWORD(v159) >> 30));
    unint64_t v68 = ((((v64 - 0x61C8864680B583E9) ^ ScopeHash) << 6)
         + (((v64 - 0x61C8864680B583E9) ^ ScopeHash) >> 2)
         + ((((0x94D049BB133111EBLL * (v67 ^ (v67 >> 27))) ^ ((0x94D049BB133111EBLL * (v67 ^ (v67 >> 27))) >> 31))
           + (v66 << 6)
           + (v66 >> 2)
           - 0x61C8864680B583E9) ^ v66)
         - 0x61C8864680B583E9) ^ (v64 - 0x61C8864680B583E9) ^ ScopeHash;
    unint64_t v69 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * *((unsigned __int8 *)v156 + 29)) ^ ((0xBF58476D1CE4E5B9
                                                                      * *((unsigned __int8 *)v156 + 29)) >> 27));
    unint64_t v70 = ((v69 ^ (v69 >> 31)) + (v68 << 6) + (v68 >> 2) - 0x61C8864680B583E9) ^ v68;
    unint64_t v71 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * *((unsigned __int8 *)this + 62)) ^ ((0xBF58476D1CE4E5B9
                                                                      * *((unsigned __int8 *)this + 62)) >> 27));
    unint64_t v72 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * *((unsigned __int8 *)this + 65)) ^ ((0xBF58476D1CE4E5B9
                                                                      * *((unsigned __int8 *)this + 65)) >> 27));
    unint64_t v73 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * *((unsigned __int8 *)this + 67)) ^ ((0xBF58476D1CE4E5B9
                                                                      * *((unsigned __int8 *)this + 67)) >> 27));
    unint64_t v74 = ((v71 ^ (v71 >> 31)) + (v70 << 6) + (v70 >> 2) - 0x61C8864680B583E9) ^ v70;
    uint64_t v19 = ((((v73 ^ (v73 >> 31)) + ((v72 ^ (v72 >> 31)) << 6) + ((v72 ^ (v72 >> 31)) >> 2) - 0x61C8864680B583E9) ^ v72 ^ (v72 >> 31))
         + (v74 << 6)
         + (v74 >> 2)
         - 0x61C8864680B583E9) ^ v74;
    re::StringID::destroyString((re::StringID *)v152);
  }
  if (v156) {

  }
  return v19;
}

void re::RayTracedAmbientOcclusionProvider::provide(re::RayTracedAmbientOcclusionProvider *this, char *a2, const char *a3, re::RenderFrame *a4)
{
  uint64_t v219 = *MEMORY[0x263EF8340];
  RenderGraph = (re *)re::RenderFrame::makeRenderGraph(a4, a3, 0);
  if (a3)
  {
    uint64_t v9 = *a3;
    if (*a3)
    {
      char v10 = a3[1];
      if (v10)
      {
        int v11 = a3 + 2;
        do
        {
          uint64_t v9 = 31 * v9 + v10;
          int v12 = *(unsigned __int8 *)v11++;
          char v10 = v12;
        }
        while (v12);
      }
      uint64_t v13 = v9 & 0x7FFFFFFFFFFFFFFFLL;
    }
    else
    {
      uint64_t v13 = 0;
    }
  }
  else
  {
    uint64_t v13 = 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v14 = re::RenderGraphDataStore::tryGet<re::SceneScope>((uint64_t)a4 + 32, a2, a3);
  if (v14)
  {
    uint64_t v15 = re::RenderGraphDataStore::tryGet<re::SimplifiedMeshBufferDeformationIndex>((uint64_t)a4 + 32, *(const char **)(v14 + 8));
    int ScopeLayer = re::RenderFrame::getScopeLayer(a4, a3);
    if (v15)
    {
      int v17 = *(_DWORD *)(v15 + 8);
      goto LABEL_16;
    }
  }
  else
  {
    int ScopeLayer = re::RenderFrame::getScopeLayer(a4, a3);
  }
  if (ScopeLayer == -1) {
    int v17 = 0;
  }
  else {
    int v17 = ScopeLayer;
  }
LABEL_16:
  *(void *)&v195[0] = 0;
  uint64_t v194 = 0;
  LODWORD(v195[1]) = 0;
  *((void *)&v195[0] + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 1065353216;
  *(void *)&v195[2] = 0;
  *((void *)&v195[1] + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
  *((void *)&v195[2] + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = -1;
  *(void *)&v195[3] = 0;
  *((void *)&v195[3] + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = -1;
  *(void *)&v195[4] = 0;
  *((void *)&v195[4] + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = -1;
  *(void *)&v195[5] = 0;
  *((void *)&v195[5] + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = -1;
  *(void *)&v195[6] = 0;
  *((void *)&v195[6] + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = -1;
  *(void *)&v195[7] = 0;
  *((void *)&v195[7] + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = -1;
  *(void *)&v195[8] = 0;
  *((void *)&v195[8] + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = -1;
  *(void *)&v195[9] = 0;
  *((void *)&v195[9] + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = -1;
  *(void *)&v195[10] = 0;
  *((void *)&v195[10] + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = -1;
  *(void *)&v195[11] = 0;
  *((void *)&v195[11] + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = -1;
  *(void *)&v195[12] = 0;
  *((void *)&v195[12] + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = -1;
  *(void *)&v195[13] = 0;
  *((void *)&v195[13] + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = -1;
  *(void *)&v195[14] = 0;
  *((void *)&v195[14] + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = -1;
  *(void *)&v195[15] = 0;
  *((void *)&v195[15] + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = -1;
  *(void *)&v195[16] = 0;
  *((void *)&v195[16] + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = -1;
  *(void *)&v195[17] = 0;
  *((void *)&v195[17] + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = -1;
  *(void *)&v195[18] = 0;
  *((void *)&v195[18] + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = -1;
  *(void *)&v195[19] = 0;
  *((void *)&v195[19] + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = -1;
  *(void *)&v195[20] = 0;
  *((void *)&v195[20] + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = -1;
  uint64_t v18 = v17;
  *(void *)&v195[21] = 0;
  unint64_t v19 = *((void *)this + 21);
  *((void *)&v195[21] + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = -1;
  if (v19 <= v17)
  {
    *(void *)uint64_t v183 = 0;
    long long v208 = 0u;
    long long v207 = 0u;
    memset(v206, 0, sizeof(v206));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v196 = 136315906;
    *(void *)&v196[4] = "operator[]";
    *(_WORD *)&v196[12] = 1024;
    *(_DWORD *)&v196[14] = 789;
    *(_WORD *)&v196[18] = 2048;
    uint64_t v197 = v18;
    *(_WORD *)uint64_t v198 = 2048;
    *(void *)&v198[2] = v19;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(&v194, *(void *)(*((void *)this + 23) + 8 * v17));
  *(void *)&v195[0] = (char *)this + 44;
  DWORD2(v195[0]) = *((_DWORD *)this + 17);
  ScopeResolutiounint64_t n = re::RenderFrame::getScopeResolution(a4, a3);
  __asm { FMOV            V1.2S, #0.25 }
  *(uint32x2_t *)((char *)v195 + 12) = vcvt_u32_f32(vmul_f32(vcvt_f32_s32((int32x2_t)ScopeResolution), _D1));
  re::RenderFrame::tryGetInputTarget(a4, "Color", 0, (double *)v206);
  v195[2] = v206[0];
  re::RenderFrame::tryGetInputTarget(a4, "Depth", 0, (double *)v206);
  v195[3] = v206[0];
  DWORD2(v206[0]) = 2;
  memset((char *)v206 + 12, 255, 24);
  BYTE4(v206[2]) = 0;
  __asm { FMOV            V9.2S, #1.0 }
  *((void *)&v206[2] + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = _D9;
  long long v207 = xmmword_2343AEB90;
  long long v208 = xmmword_2343AEBA0;
  int v209 = -1;
  char v212 = 0;
  *(void *)&v206[0] = 2;
  *(void *)uint64_t v196 = 0x27BED4303C623070;
  *(void *)&v196[8] = "PreviousCount";
  uint64_t v210 = -1;
  uint64_t v211 = (v13 - 0x64F625B8ECE32FDBLL) ^ 0x13DF6A181E311838;
  re::StringID::destroyString((re::StringID *)v196);
  re::RenderFrame::createTarget(a4, (const re::RenderGraphTargetDescription *)v206, "PreviousCount", v196);
  v195[4] = *(_OWORD *)v196;
  *(_DWORD *)&v196[8] = 2;
  *(void *)&v196[12] = -1;
  uint64_t v197 = -1;
  *(void *)uint64_t v198 = -1;
  v198[8] = 0;
  uint64_t v199 = _D9;
  long long v200 = xmmword_2343AEB90;
  long long v201 = xmmword_2343AEBA0;
  int v202 = -1;
  char v205 = 0;
  *(void *)uint64_t v196 = 2;
  *(void *)uint64_t v183 = 0x27BED4303C7523D8;
  *(void *)&v183[8] = "PreviousDepth";
  uint64_t v203 = -1;
  uint64_t v204 = (v13 - 0x64F625B8EA82646ELL) ^ 0x13DF6A181E3A91ECLL;
  re::StringID::destroyString((re::StringID *)v183);
  re::RenderFrame::createTarget(a4, (const re::RenderGraphTargetDescription *)v196, "PreviousDepth", v183);
  v195[5] = *(_OWORD *)v183;
  *(_DWORD *)&v183[8] = 2;
  *(void *)&v183[12] = -1;
  uint64_t v184 = -1;
  uint64_t v185 = -1;
  char v186 = 0;
  uint64_t v187 = _D9;
  long long v188 = xmmword_2343AEB90;
  long long v189 = xmmword_2343AEBA0;
  int v190 = -1;
  char v193 = 0;
  *(void *)uint64_t v183 = 2;
  *(void *)uint64_t v172 = 0x360C88C342449A2ELL;
  *(void *)&v172[8] = "AccumulatedAmbientOcclusion";
  uint64_t v191 = -1;
  uint64_t v192 = (v13 + 0x668A233A3026551CLL) ^ 0x1B064461A1224D17;
  re::StringID::destroyString((re::StringID *)v172);
  re::RenderFrame::createTarget(a4, (const re::RenderGraphTargetDescription *)v183, "AccumulatedAmbientOcclusion", v172);
  v195[6] = *(_OWORD *)v172;
  *(_DWORD *)&v172[8] = 2;
  *(void *)&v172[12] = -1;
  uint64_t v173 = -1;
  uint64_t v174 = -1;
  char v175 = 0;
  uint64_t v176 = _D9;
  long long v177 = xmmword_2343AEB90;
  long long v178 = xmmword_2343AEBA0;
  int v179 = -1;
  char v182 = 0;
  *(void *)uint64_t v172 = 2;
  *(void *)uint64_t v161 = 0x88CBEA6236B6E7AALL;
  *(void *)&v161[8] = "ColorIntermediate1";
  uint64_t v180 = -1;
  uint64_t v181 = (v13 - 0x3731BCB36301B1B4) ^ 0x4465F5311B5B73D5;
  re::StringID::destroyString((re::StringID *)v161);
  re::RenderFrame::createTarget(a4, (const re::RenderGraphTargetDescription *)v172, "ColorIntermediate1", v161);
  v195[7] = *(_OWORD *)v161;
  *(void *)uint64_t v161 = 0x88CBEA6236B6E7ACLL;
  *(void *)&v161[8] = "ColorIntermediate2";
  uint64_t v181 = (v13 - 0x3731BCB36301B174) ^ 0x4465F5311B5B73D6;
  re::StringID::destroyString((re::StringID *)v161);
  re::RenderFrame::createTarget(a4, (const re::RenderGraphTargetDescription *)v172, "ColorIntermediate2", v161);
  v195[8] = *(_OWORD *)v161;
  *(_DWORD *)&v161[8] = 2;
  *(void *)&v161[12] = -1;
  uint64_t v162 = -1;
  uint64_t v163 = -1;
  char v164 = 0;
  uint64_t v165 = _D9;
  long long v166 = xmmword_2343AEB90;
  long long v167 = xmmword_2343AEBA0;
  int v168 = -1;
  char v171 = 0;
  *(void *)uint64_t v161 = 2;
  *(void *)char v150 = 0x412A8CC3EDELL;
  *(void *)&v150[8] = "NewCount";
  uint64_t v169 = -1;
  uint64_t v170 = (v13 - 0x61C8036F1214204ELL) ^ 0x20954661F6FLL;
  re::StringID::destroyString((re::StringID *)v150);
  re::RenderFrame::createTarget(a4, (const re::RenderGraphTargetDescription *)v161, "NewCount", v150);
  v195[10] = *(_OWORD *)v150;
  *(_DWORD *)&v150[8] = 2;
  *(void *)&v150[12] = -1;
  uint64_t v151 = -1;
  uint64_t v152 = -1;
  char v153 = 0;
  uint64_t v154 = _D9;
  long long v155 = xmmword_2343AEB90;
  long long v156 = xmmword_2343AEBA0;
  int v157 = -1;
  char v160 = 0;
  *(void *)char v150 = 2;
  *(void *)char v139 = 0x47090122BEB0E6EALL;
  *(void *)&v139[8] = "NewAmbientOcclusion";
  uint64_t v158 = -1;
  uint64_t v159 = (v13 - 0x77C741CA52C289CCLL) ^ 0x238480915F587375;
  re::StringID::destroyString((re::StringID *)v139);
  re::RenderFrame::createTarget(a4, (const re::RenderGraphTargetDescription *)v150, "NewAmbientOcclusion", v139);
  v195[11] = *(_OWORD *)v139;
  *(_DWORD *)&v139[8] = 2;
  *(void *)&v139[12] = -1;
  uint64_t v140 = -1;
  uint64_t v141 = -1;
  char v142 = 0;
  uint64_t v143 = _D9;
  long long v144 = xmmword_2343AEB90;
  long long v145 = xmmword_2343AEBA0;
  int v146 = -1;
  char v149 = 0;
  *(void *)char v139 = 2;
  *(void *)char v128 = 0x1D03349F15B42AELL;
  *(void *)&v128[8] = "LowResDepth";
  uint64_t v147 = -1;
  uint64_t v148 = (v13 - 0x2788169F1721C5D4) ^ 0xE819A4F8ADA157;
  re::StringID::destroyString((re::StringID *)v128);
  re::RenderFrame::createTarget(a4, (const re::RenderGraphTargetDescription *)v139, "LowResDepth", v128);
  v195[13] = *(_OWORD *)v128;
  *(_DWORD *)&v128[8] = 2;
  *(void *)&v128[12] = -1;
  uint64_t v129 = -1;
  uint64_t v130 = -1;
  char v131 = 0;
  uint64_t v132 = _D9;
  long long v133 = xmmword_2343AEB90;
  long long v134 = xmmword_2343AEBA0;
  int v135 = -1;
  char v138 = 0;
  *(void *)char v128 = 2;
  *(void *)char v117 = 0x383635F45D4971A6;
  *(void *)&v117[8] = "LowResNormal";
  uint64_t v136 = -1;
  uint64_t v137 = (v13 - 0x53FB00FC4BDE20F5) ^ 0x1C1B1AFA2EA4B8D3;
  re::StringID::destroyString((re::StringID *)v117);
  re::RenderFrame::createTarget(a4, (const re::RenderGraphTargetDescription *)v128, "LowResNormal", v117);
  v195[14] = *(_OWORD *)v117;
  *(_DWORD *)&v117[8] = 2;
  *(void *)&v117[12] = -1;
  uint64_t v118 = -1;
  uint64_t v119 = -1;
  char v120 = 0;
  uint64_t v121 = _D9;
  long long v122 = xmmword_2343AEB90;
  long long v123 = xmmword_2343AEBA0;
  int v124 = -1;
  char v127 = 0;
  *(void *)char v117 = 2;
  *(void *)uint64_t v106 = 0x3C338F51B98E5336;
  *(void *)&v106[8] = "ReceiverMask";
  uint64_t v125 = -1;
  uint64_t v126 = (v13 + 0x2C2FD5DAE846AD3DLL) ^ 0x1E19C7A8DCC7299BLL;
  re::StringID::destroyString((re::StringID *)v106);
  re::RenderFrame::createTarget(a4, (const re::RenderGraphTargetDescription *)v117, "ReceiverMask", v106);
  v195[16] = *(_OWORD *)v106;
  *(_DWORD *)&v106[8] = 2;
  *(void *)&v106[12] = -1;
  uint64_t v107 = -1;
  uint64_t v108 = -1;
  char v109 = 0;
  uint64_t v110 = _D9;
  long long v111 = xmmword_2343AEB90;
  long long v112 = xmmword_2343AEBA0;
  int v113 = -1;
  char v116 = 0;
  *(void *)uint64_t v106 = 2;
  v213.n128_u64[0] = 0xB53CAE319AB7F0C8;
  v213.n128_u64[1] = (unint64_t)"RayTracingMask";
  uint64_t v114 = -1;
  uint64_t v115 = (v13 + 0x5C74D5B3099F9330) ^ 0x5A9E5718CD5BF864;
  re::StringID::destroyString((re::StringID *)&v213);
  re::RenderFrame::createTarget(a4, (const re::RenderGraphTargetDescription *)v106, "RayTracingMask", &v213);
  v195[15] = v213;
  *((void *)&v195[1] + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = (4 * HIDWORD(v195[0]) * LODWORD(v195[1]));
  uint64_t v100 = -1;
  char v101 = 0;
  int v102 = 1065353216;
  unint64_t v103 = 0xFFFFFFFF00000020;
  int v99 = 2;
  v213.n128_u64[0] = 163860;
  v213.n128_u64[1] = (unint64_t)"Ray";
  uint64_t v104 = -1;
  uint64_t v105 = (v13 - 0x61C8864680653167) ^ 0x1400A;
  re::StringID::destroyString((re::StringID *)&v213);
  re::RenderFrame::createBuffer(a4, (const re::RenderGraphBufferDescription *)&v99, "Ray", &v213);
  v195[20] = v213;
  uint64_t v93 = -1;
  char v94 = 0;
  int v95 = 1065353216;
  unint64_t v96 = 0xFFFFFFFF00000020;
  int v92 = 2;
  v213.n128_u64[0] = 0x361253A827D2FD52;
  v213.n128_u64[1] = (unint64_t)"Intersection";
  uint64_t v97 = -1;
  uint64_t v98 = (v13 + 0x674439337EA48601) ^ 0x1B0929D413E97EA9;
  unint64_t v27 = this;
  re::StringID::destroyString((re::StringID *)&v213);
  re::RenderFrame::createBuffer(a4, (const re::RenderGraphBufferDescription *)&v92, "Intersection", &v213);
  v195[21] = v213;
  v213.n128_u64[0] = 65290051;
  re::RenderFrame::addTargetOutput(a4, (uint64_t *)&v213, (double *)&v195[2], 0);
  v213.n128_u64[0] = 65919651;
  re::RenderFrame::addTargetOutput(a4, (uint64_t *)&v213, (double *)&v195[3], 0);
  unint64_t v28 = re::RenderGraph::addNode<re::RenderGraphMeshNode>(RenderGraph, "RayTracedAmbientOcclusionLowResMeshNode");
  v213.n128_u64[0] = (unint64_t)"Ground";
  v213.n128_u64[1] = 6;
  re::DynamicString::operator=((re::RenderGraphMeshNode *)((char *)v28 + 264), (uint64_t)&v213);
  unint64_t v28 = (re::RenderGraphMeshNode *)((char *)v28 + 216);
  __n128 v213 = (__n128)v195[14];
  uint64_t v214 = 0x100000000;
  long long v216 = xmmword_23435FBB0;
  __int16 v217 = 1;
  uint64_t v218 = 0;
  re::DynamicArray<re::TargetWrite>::add(v28, (uint64_t)&v213);
  __n128 v213 = (__n128)v195[13];
  uint64_t v214 = 0x200000000;
  long long v216 = xmmword_23435FBB0;
  __int16 v217 = 1;
  uint64_t v218 = 0;
  re::DynamicArray<re::TargetWrite>::add(v28, (uint64_t)&v213);
  uint64_t v29 = re::RenderGraph::addNode<re::RenderGraphMeshNode>(RenderGraph, "RayTracedAmbientOcclusionFullResMeshNode");
  v213.n128_u64[0] = (unint64_t)"FullResGround";
  v213.n128_u64[1] = 13;
  re::DynamicString::operator=((re::RenderGraphMeshNode *)((char *)v29 + 264), (uint64_t)&v213);
  uint64_t v29 = (re::RenderGraphMeshNode *)((char *)v29 + 216);
  __n128 v213 = (__n128)v195[16];
  uint64_t v214 = 0x100000000;
  long long v216 = xmmword_23435FBB0;
  __int16 v217 = 0;
  uint64_t v218 = 0;
  re::DynamicArray<re::TargetWrite>::add(v29, (uint64_t)&v213);
  __n128 v213 = (__n128)v195[3];
  uint64_t v214 = 0x200000000;
  long long v216 = xmmword_23435FBB0;
  __int16 v217 = 0;
  uint64_t v218 = 0;
  re::DynamicArray<re::TargetWrite>::add(v29, (uint64_t)&v213);
  __n128 v213 = (__n128)v195[3];
  uint64_t v214 = 0x300000000;
  long long v216 = xmmword_23435FBB0;
  __int16 v217 = 256;
  uint64_t v218 = 0;
  re::DynamicArray<re::TargetWrite>::add(v29, (uint64_t)&v213);
  unint64_t v31 = re::globalAllocators(v30);
  unint64_t v32 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v31[2] + 32))(v31[2], 616, 8);
  re::RayTracedAmbientOcclusionNode::RayTracedAmbientOcclusionNode((re::RayTracedAmbientOcclusionNode *)v32, "RayTracedAmbientOcclusionCameraMatchingNode");
  *unint64_t v33 = &unk_26E71E168;
  v213.n128_u64[0] = (unint64_t)v33;
  re::DynamicArray<re::TransitionCondition *>::add(RenderGraph, &v213);
  v32[3] = *((void *)RenderGraph + 10);
  v32[4] = *((void *)RenderGraph + 12);
  v32[6] = *((void *)RenderGraph + 13);
  re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(v32 + 32, v194);
  uint64_t v34 = (re *)memcpy(v32 + 33, v195, 0x160uLL);
  int v35 = re::globalAllocators(v34);
  unint64_t v36 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v35[2] + 32))(v35[2], 616, 8);
  re::RayTracedAmbientOcclusionNode::RayTracedAmbientOcclusionNode((re::RayTracedAmbientOcclusionNode *)v36, "RayTracedAmbientOcclusionAccelerationStructureNode");
  *int v37 = &unk_26E71E2F8;
  v213.n128_u64[0] = (unint64_t)v37;
  re::DynamicArray<re::TransitionCondition *>::add(RenderGraph, &v213);
  v36[3] = *((void *)RenderGraph + 10);
  unint64_t v36[4] = *((void *)RenderGraph + 12);
  v36[6] = *((void *)RenderGraph + 13);
  re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(v36 + 32, v194);
  int v38 = (re *)memcpy(v36 + 33, v195, 0x160uLL);
  uint64_t v39 = re::globalAllocators(v38);
  char v40 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v39[2] + 32))(v39[2], 616, 8);
  re::RayTracedAmbientOcclusionNode::RayTracedAmbientOcclusionNode((re::RayTracedAmbientOcclusionNode *)v40, "RayTracedAmbientOcclusionMaskGenerationNode");
  *id v41 = &unk_26E71E450;
  v213.n128_u64[0] = (unint64_t)v41;
  re::DynamicArray<re::TransitionCondition *>::add(RenderGraph, &v213);
  v40[3] = *((void *)RenderGraph + 10);
  v40[4] = *((void *)RenderGraph + 12);
  v40[6] = *((void *)RenderGraph + 13);
  re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(v40 + 32, v194);
  id v42 = (re *)memcpy(v40 + 33, v195, 0x160uLL);
  id v43 = re::globalAllocators(v42);
  int v44 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v43[2] + 32))(v43[2], 616, 8);
  re::RayTracedAmbientOcclusionNode::RayTracedAmbientOcclusionNode((re::RayTracedAmbientOcclusionNode *)v44, "RayTracedAmbientOcclusionRaysNode");
  *uint64_t v45 = &unk_26E71E4F8;
  v213.n128_u64[0] = (unint64_t)v45;
  re::DynamicArray<re::TransitionCondition *>::add(RenderGraph, &v213);
  v44[3] = *((void *)RenderGraph + 10);
  v44[4] = *((void *)RenderGraph + 12);
  v44[6] = *((void *)RenderGraph + 13);
  re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(v44 + 32, v194);
  uint64_t v46 = (re *)memcpy(v44 + 33, v195, 0x160uLL);
  int v47 = re::globalAllocators(v46);
  uint64_t v48 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v47[2] + 32))(v47[2], 616, 8);
  re::RayTracedAmbientOcclusionNode::RayTracedAmbientOcclusionNode((re::RayTracedAmbientOcclusionNode *)v48, "RayTracedAmbientOcclusionIntersectionsNode");
  *uint64_t v49 = &unk_26E71E5A0;
  v213.n128_u64[0] = (unint64_t)v49;
  re::DynamicArray<re::TransitionCondition *>::add(RenderGraph, &v213);
  v48[3] = *((void *)RenderGraph + 10);
  v48[4] = *((void *)RenderGraph + 12);
  v48[6] = *((void *)RenderGraph + 13);
  re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(v48 + 32, v194);
  uint64_t v50 = (re *)memcpy(v48 + 33, v195, 0x160uLL);
  int v51 = re::globalAllocators(v50);
  uint64_t v52 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v51[2] + 32))(v51[2], 616, 8);
  re::RayTracedAmbientOcclusionNode::RayTracedAmbientOcclusionNode((re::RayTracedAmbientOcclusionNode *)v52, "RayTracedAmbientOcclusionTextureNode");
  *uint64_t v53 = &unk_26E71E648;
  v213.n128_u64[0] = (unint64_t)v53;
  re::DynamicArray<re::TransitionCondition *>::add(RenderGraph, &v213);
  v52[3] = *((void *)RenderGraph + 10);
  v52[4] = *((void *)RenderGraph + 12);
  v52[6] = *((void *)RenderGraph + 13);
  re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(v52 + 32, v194);
  int v54 = (re *)memcpy(v52 + 33, v195, 0x160uLL);
  uint64_t v55 = re::globalAllocators(v54);
  uint64_t v56 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v55[2] + 32))(v55[2], 616, 8);
  re::RayTracedAmbientOcclusionNode::RayTracedAmbientOcclusionNode((re::RayTracedAmbientOcclusionNode *)v56, "RayTracedAmbientOcclusionGradientBlurNode");
  void *v57 = &unk_26E71E6F0;
  v213.n128_u64[0] = (unint64_t)v57;
  re::DynamicArray<re::TransitionCondition *>::add(RenderGraph, &v213);
  v56[3] = *((void *)RenderGraph + 10);
  v56[4] = *((void *)RenderGraph + 12);
  v56[6] = *((void *)RenderGraph + 13);
  re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(v56 + 32, v194);
  int v58 = (re *)memcpy(v56 + 33, v195, 0x160uLL);
  uint64_t v59 = re::globalAllocators(v58);
  uint64_t v60 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v59[2] + 32))(v59[2], 616, 8);
  re::RayTracedAmbientOcclusionNode::RayTracedAmbientOcclusionNode((re::RayTracedAmbientOcclusionNode *)v60, "RayTracedAmbientOcclusionAccumulationNode");
  *int v61 = &unk_26E71E798;
  v213.n128_u64[0] = (unint64_t)v61;
  re::DynamicArray<re::TransitionCondition *>::add(RenderGraph, &v213);
  v60[3] = *((void *)RenderGraph + 10);
  v60[4] = *((void *)RenderGraph + 12);
  v60[6] = *((void *)RenderGraph + 13);
  re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(v60 + 32, v194);
  memcpy(v60 + 33, v195, 0x160uLL);
  uint64_t v62 = re::RenderGraph::addNode<re::RenderGraphTargetCopyNode>(RenderGraph, "RayTracedAmbientOcclusionUpdateDepth");
  __n128 v213 = (__n128)v195[13];
  uint64_t v214 = 0;
  uint64_t v215 = 2;
  re::DynamicArray<re::TargetRead>::add((re::RenderGraphNode *)((char *)v62 + 176), &v213);
  __n128 v213 = (__n128)v195[5];
  uint64_t v214 = 0x400000000;
  long long v216 = xmmword_23435FBB0;
  __int16 v217 = 0;
  uint64_t v218 = 0;
  re::DynamicArray<re::TargetWrite>::add((re::RenderGraphNode *)((char *)v62 + 216), (uint64_t)&v213);
  unint64_t v63 = re::RenderGraph::addNode<re::RenderGraphTargetCopyNode>(RenderGraph, "RayTracedAmbientOcclusionUpdateCount");
  __n128 v213 = (__n128)v195[10];
  uint64_t v214 = 0;
  uint64_t v215 = 2;
  re::DynamicArray<re::TargetRead>::add((re::RenderGraphNode *)((char *)v63 + 176), &v213);
  __n128 v213 = (__n128)v195[4];
  uint64_t v214 = 0x400000000;
  long long v216 = xmmword_23435FBB0;
  __int16 v217 = 0;
  uint64_t v218 = 0;
  re::DynamicArray<re::TargetWrite>::add((re::RenderGraphNode *)((char *)v63 + 216), (uint64_t)&v213);
  unint64_t v64 = re::RenderGraph::addNode<re::RenderGraphTargetCopyNode>(RenderGraph, "RayTracedAmbientOcclusionUpdateAccumulatedAmbientOcclusion");
  __n128 v213 = (__n128)v195[11];
  uint64_t v214 = 0;
  uint64_t v215 = 2;
  re::DynamicArray<re::TargetRead>::add((re::RenderGraphNode *)((char *)v64 + 176), &v213);
  __n128 v213 = (__n128)v195[6];
  uint64_t v214 = 0x400000000;
  long long v216 = xmmword_23435FBB0;
  __int16 v217 = 0;
  uint64_t v218 = 0;
  re::DynamicArray<re::TargetWrite>::add((re::RenderGraphNode *)((char *)v64 + 216), (uint64_t)&v213);
  if (*((unsigned char *)this + 62) && *((unsigned char *)this + 65))
  {
    for (int i = 0; i != 5; ++i)
    {
      unint64_t v67 = re::globalAllocators(v65);
      uint64_t v68 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v67[2] + 32))(v67[2], 624, 8);
      re::RayTracedAmbientOcclusionNode::RayTracedAmbientOcclusionNode((re::RayTracedAmbientOcclusionNode *)v68, "RayTracedAmbientOcclusionDenoisingNode");
      *(void *)unint64_t v69 = &unk_26E71E840;
      *(_DWORD *)(v69 + 616) = 16908287;
      v213.n128_u64[0] = v69;
      re::DynamicArray<re::TransitionCondition *>::add(RenderGraph, &v213);
      *(void *)(v68 + 24) = *((void *)RenderGraph + 10);
      *(void *)(v68 + 32) = *((void *)RenderGraph + 12);
      *(void *)(v68 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *((void *)RenderGraph + 13);
      re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)(v68 + 256), v194);
      unint64_t v65 = (re *)memcpy((void *)(v68 + 264), v195, 0x160uLL);
      *(_WORD *)(v68 + 616) = i;
      *(unsigned char *)(v68 + 61re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = i == 4;
      *(unsigned char *)(v68 + 619) = (i & 1) == 0;
    }
  }
  else
  {
    unint64_t v70 = re::globalAllocators(v65);
    unint64_t v71 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v70[2] + 32))(v70[2], 616, 8);
    re::RayTracedAmbientOcclusionNode::RayTracedAmbientOcclusionNode((re::RayTracedAmbientOcclusionNode *)v71, "RayTracedAmbientOcclusionBypassDenoisingNode");
    *unint64_t v72 = &unk_26E71E8E8;
    v213.n128_u64[0] = (unint64_t)v72;
    re::DynamicArray<re::TransitionCondition *>::add(RenderGraph, &v213);
    void v71[3] = *((void *)RenderGraph + 10);
    v71[4] = *((void *)RenderGraph + 12);
    v71[6] = *((void *)RenderGraph + 13);
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(v71 + 32, v194);
    unint64_t v65 = (re *)memcpy(v71 + 33, v195, 0x160uLL);
  }
  int v73 = *((unsigned __int8 *)v27 + 67);
  unint64_t v74 = *(uint64_t (**)(void))(*(void *)re::globalAllocators(v65)[2] + 32);
  if (v73)
  {
    float32x4_t v75 = (void *)v74();
    int v76 = re::RenderGraphFullscreenNode::RenderGraphFullscreenNode((re::RenderGraphFullscreenNode *)v75, "RayTracedAmbientOcclusionFullscreenComposite");
    *(void *)int v76 = &unk_26E71E990;
    uint64_t v77 = (uint64_t)v76 + 456;
    *(_OWORD *)((char *)v76 + 456) = 0u;
    *(_OWORD *)((char *)v76 + 472) = 0u;
    *(_OWORD *)((char *)v76 + 48re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
    *(_OWORD *)((char *)v76 + 504) = 0u;
    *(_OWORD *)((char *)v76 + 520) = 0u;
    *(_OWORD *)((char *)v76 + 536) = 0u;
    v213.n128_u64[0] = (unint64_t)v76;
    re::DynamicArray<re::TransitionCondition *>::add(RenderGraph, &v213);
    v75[3] = *((void *)RenderGraph + 10);
    v75[4] = *((void *)RenderGraph + 12);
    v75[6] = *((void *)RenderGraph + 13);
    __n128 v213 = (__n128)v195[2];
    uint64_t v214 = 0;
    uint64_t v215 = 2;
    re::DynamicArray<re::TargetRead>::add((_anonymous_namespace_ *)(v75 + 22), &v213);
    __n128 v213 = (__n128)v195[7];
    uint64_t v214 = 0;
    uint64_t v215 = 2;
    re::DynamicArray<re::TargetRead>::add((_anonymous_namespace_ *)(v75 + 22), &v213);
    __n128 v213 = (__n128)v195[16];
    uint64_t v214 = 0;
    uint64_t v215 = 2;
    re::DynamicArray<re::TargetRead>::add((_anonymous_namespace_ *)(v75 + 22), &v213);
    __n128 v213 = (__n128)v195[2];
    uint64_t v214 = 0x100000000;
    long long v216 = xmmword_23435FBB0;
    __int16 v217 = 0;
    uint64_t v218 = 0;
    re::DynamicArray<re::TargetWrite>::add((_anonymous_namespace_ *)(v75 + 27), (uint64_t)&v213);
    __n128 v90 = (__n128)v195[2];
    double v79 = re::RenderGraphFullscreenNode::setRenderGraphTexture((uint64_t)v75, (const re::DynamicString *)v91, &v90);
    uint64_t v80 = *(_anonymous_namespace_ **)&v91[0];
    if (*(void *)&v91[0])
    {
      if (BYTE8(v91[0])) {
        uint64_t v80 = (_anonymous_namespace_ *)(*(uint64_t (**)(double))(**(void **)&v91[0] + 40))(v79);
      }
      memset(v91, 0, sizeof(v91));
    }
    __n128 v88 = (__n128)v195[7];
    double v81 = re::RenderGraphFullscreenNode::setRenderGraphTexture((uint64_t)v75, (const re::DynamicString *)v89, &v88);
    uint64_t v82 = *(_anonymous_namespace_ **)&v89[0];
    if (*(void *)&v89[0])
    {
      if (BYTE8(v89[0])) {
        uint64_t v82 = (_anonymous_namespace_ *)(*(uint64_t (**)(double))(**(void **)&v89[0] + 40))(v81);
      }
      memset(v89, 0, sizeof(v89));
    }
    __n128 v86 = (__n128)v195[16];
    double v83 = re::RenderGraphFullscreenNode::setRenderGraphTexture((uint64_t)v75, (const re::DynamicString *)v87, &v86);
    if (*(void *)&v87[0])
    {
      if (BYTE8(v87[0])) {
        (*(void (**)(double))(**(void **)&v87[0] + 40))(v83);
      }
      memset(v87, 0, sizeof(v87));
    }
    v213.n128_u64[0] = (unint64_t)"fullscreen";
    v213.n128_u64[1] = 10;
    re::DynamicString::operator=((re::DynamicString *)(v75 + 36), (uint64_t)&v213);
    re::AssetHandle::operator=(v77, (uint64_t *)v27 + 9);
    re::AssetHandle::operator=((uint64_t)(v75 + 60), (uint64_t *)v27 + 12);
    re::AssetHandle::operator=((uint64_t)(v75 + 63), (uint64_t *)v27 + 15);
    v75[66] = re::AssetHandle::asset<re::MaterialAsset>((re::RayTracedAmbientOcclusionProvider *)((char *)v27 + 72));
    if (*((void *)v27 + 13)) {
      v75[67] = re::AssetHandle::asset<re::MaterialAsset>((re::RayTracedAmbientOcclusionProvider *)((char *)v27 + 96));
    }
    if (*((void *)v27 + 16)) {
      v75[68] = re::AssetHandle::asset<re::MaterialAsset>((re::RayTracedAmbientOcclusionProvider *)((char *)v27 + 120));
    }
  }
  else
  {
    char v84 = (uint64_t *)v74();
    re::RayTracedAmbientOcclusionNode::RayTracedAmbientOcclusionNode((re::RayTracedAmbientOcclusionNode *)v84, "RayTracedAmbientOcclusionDirectDisplayNode");
    *int v85 = &unk_26E71EA38;
    v213.n128_u64[0] = (unint64_t)v85;
    re::DynamicArray<re::TransitionCondition *>::add(RenderGraph, &v213);
    v84[3] = *((void *)RenderGraph + 10);
    v84[4] = *((void *)RenderGraph + 12);
    v84[6] = *((void *)RenderGraph + 13);
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(v84 + 32, v194);
    memcpy(v84 + 33, v195, 0x160uLL);
  }
  if (v194) {
}
  }

void *re::allocInfo_RayTracedAmbientOcclusionSettings(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_466, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_466))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF9C580, "RayTracedAmbientOcclusionSettings");
    __cxa_guard_release(&_MergedGlobals_466);
  }
  return &unk_26AF9C580;
}

void re::initInfo_RayTracedAmbientOcclusionSettings(re *this, re::IntrospectionBase *a2)
{
  v50[0] = 0xD75D01D3DD85CD42;
  v50[1] = "RayTracedAmbientOcclusionSettings";
  re::StringID::destroyString((re::StringID *)v50);
  *((_OWORD *)this + 2) = v51;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9C508, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF9C508);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      unint64_t v7 = re::introspect_float((re *)1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "rayDistributionVerticalStretchOnGround";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 32) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF9C528 = v8;
      uint64_t v9 = re::introspectionAllocator((re *)v8);
      int v11 = re::introspect_float((re *)1, v10);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "rayDistributionVerticalStretchOnWall";
      *(void *)(v12 + 16) = v11;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 32) = 0x400000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF9C530 = v12;
      uint64_t v13 = re::introspectionAllocator((re *)v12);
      uint64_t v15 = re::introspect_float((re *)1, v14);
      uint64_t v16 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v13 + 32))(v13, 72, 8);
      *(_DWORD *)uint64_t v16 = 1;
      *(void *)(v16 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "whiteLevel";
      *(void *)(v16 + 16) = v15;
      *(void *)(v16 + 24) = 0;
      *(void *)(v16 + 32) = 0x800000003;
      *(_DWORD *)(v16 + 40) = 0;
      *(void *)(v16 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_26AF9C538 = v16;
      int v17 = re::introspectionAllocator((re *)v16);
      unint64_t v19 = re::introspect_float((re *)1, v18);
      uint64_t v20 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v17 + 32))(v17, 72, 8);
      *(_DWORD *)uint64_t v20 = 1;
      *(void *)(v20 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "minFullIntensityAngle";
      *(void *)(v20 + 16) = v19;
      *(void *)(v20 + 24) = 0;
      *(void *)(v20 + 32) = 0xC00000004;
      *(_DWORD *)(v20 + 40) = 0;
      *(void *)(v20 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_26AF9C540 = v20;
      int v21 = re::introspectionAllocator((re *)v20);
      uint64_t v23 = re::introspect_short((re *)1, v22);
      uint64_t v24 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v21 + 32))(v21, 72, 8);
      *(_DWORD *)uint64_t v24 = 1;
      *(void *)(v24 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "ambientOcclusionType";
      *(void *)(v24 + 16) = v23;
      *(void *)(v24 + 24) = 0;
      *(void *)(v24 + 32) = 0x1000000005;
      *(_DWORD *)(v24 + 40) = 0;
      *(void *)(v24 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v24 + 56) = 0;
      *(_DWORD *)(v24 + 64) = 0;
      qword_26AF9C548 = v24;
      uint64_t v25 = re::introspectionAllocator((re *)v24);
      unint64_t v27 = re::introspect_BOOL((re *)1, v26);
      uint64_t v28 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v25 + 32))(v25, 72, 8);
      *(_DWORD *)uint64_t v28 = 1;
      *(void *)(v28 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "postProcessAmbientOcclusion";
      *(void *)(v28 + 16) = v27;
      *(void *)(v28 + 24) = 0;
      *(void *)(v28 + 32) = 0x1200000006;
      *(_DWORD *)(v28 + 40) = 0;
      *(void *)(v28 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v28 + 56) = 0;
      *(_DWORD *)(v28 + 64) = 0;
      qword_26AF9C550 = v28;
      uint64_t v29 = re::introspectionAllocator((re *)v28);
      unint64_t v31 = re::introspect_BOOL((re *)1, v30);
      uint64_t v32 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v29 + 32))(v29, 72, 8);
      *(_DWORD *)uint64_t v32 = 1;
      *(void *)(v32 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "accumulateAmbientOcclusion";
      *(void *)(v32 + 16) = v31;
      *(void *)(v32 + 24) = 0;
      *(void *)(v32 + 32) = 0x1300000007;
      *(_DWORD *)(v32 + 40) = 0;
      *(void *)(v32 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v32 + 56) = 0;
      *(_DWORD *)(v32 + 64) = 0;
      qword_26AF9C558 = v32;
      unint64_t v33 = re::introspectionAllocator((re *)v32);
      int v35 = re::introspect_BOOL((re *)1, v34);
      uint64_t v36 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v33 + 32))(v33, 72, 8);
      *(_DWORD *)uint64_t v36 = 1;
      *(void *)(v36 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "temporallyReprojectAmbientOcclusion";
      *(void *)(v36 + 16) = v35;
      *(void *)(v36 + 24) = 0;
      *(void *)(v36 + 32) = 0x1400000008;
      *(_DWORD *)(v36 + 40) = 0;
      *(void *)(v36 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v36 + 56) = 0;
      *(_DWORD *)(v36 + 64) = 0;
      qword_26AF9C560 = v36;
      int v37 = re::introspectionAllocator((re *)v36);
      uint64_t v39 = re::introspect_BOOL((re *)1, v38);
      uint64_t v40 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v37 + 32))(v37, 72, 8);
      *(_DWORD *)uint64_t v40 = 1;
      *(void *)(v40 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "denoiseAmbientOcclusion";
      *(void *)(v40 + 16) = v39;
      *(void *)(v40 + 24) = 0;
      *(void *)(v40 + 32) = 0x1500000009;
      *(_DWORD *)(v40 + 40) = 0;
      *(void *)(v40 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v40 + 56) = 0;
      *(_DWORD *)(v40 + 64) = 0;
      qword_26AF9C568 = v40;
      id v41 = re::introspectionAllocator((re *)v40);
      id v43 = re::introspect_BOOL((re *)1, v42);
      uint64_t v44 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v41 + 32))(v41, 72, 8);
      *(_DWORD *)uint64_t v44 = 1;
      *(void *)(v44 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "reduceIntensityAtGrazingAngles";
      *(void *)(v44 + 16) = v43;
      *(void *)(v44 + 24) = 0;
      *(void *)(v44 + 32) = 0x160000000ALL;
      *(_DWORD *)(v44 + 40) = 0;
      *(void *)(v44 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v44 + 56) = 0;
      *(_DWORD *)(v44 + 64) = 0;
      qword_26AF9C570 = v44;
      uint64_t v45 = re::introspectionAllocator((re *)v44);
      int v47 = re::introspect_BOOL((re *)1, v46);
      uint64_t v48 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v45 + 32))(v45, 72, 8);
      *(_DWORD *)uint64_t v48 = 1;
      *(void *)(v48 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "compositeAmbientOcclusion";
      *(void *)(v48 + 16) = v47;
      *(void *)(v48 + 24) = 0;
      *(void *)(v48 + 32) = 0x170000000DLL;
      *(_DWORD *)(v48 + 40) = 0;
      *(void *)(v48 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v48 + 56) = 0;
      *(_DWORD *)(v48 + 64) = 0;
      qword_26AF9C578 = v48;
      __cxa_guard_release(&qword_26AF9C508);
    }
  }
  *((void *)this + 2) = 0x1800000008;
  *((_DWORD *)this + 6) = 4;
  *((_WORD *)this + 14) = 1;
  *((_DWORD *)this + 14) = 11;
  *((void *)this + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = &qword_26AF9C528;
  *((void *)this + 9) = re::internal::defaultConstruct<re::RayTracedAmbientOcclusionSettings>;
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::RayTracedAmbientOcclusionSettings>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::RayTracedAmbientOcclusionSettings>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::RayTracedAmbientOcclusionSettings>;
  re::IntrospectionRegistry::add(this, v3);
  long long v49 = v51;
}

double re::internal::defaultConstruct<re::RayTracedAmbientOcclusionSettings>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result = 0.12500003;
  *(_OWORD *)a3 = xmmword_234412B90;
  *(_WORD *)(a3 + 16) = 0;
  *(_DWORD *)(a3 + 1re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 16843009;
  *(_WORD *)(a3 + 22) = 256;
  return result;
}

double re::internal::defaultConstructV2<re::RayTracedAmbientOcclusionSettings>(uint64_t a1)
{
  double result = 0.12500003;
  *(_OWORD *)a1 = xmmword_234412B90;
  *(_WORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 1re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 16843009;
  *(_WORD *)(a1 + 22) = 256;
  return result;
}

uint64_t re::introspect_RayTracedAmbientOcclusionSettings(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RayTracedAmbientOcclusionSettings", (uint64_t (*)(re::internal *))re::allocInfo_RayTracedAmbientOcclusionSettings, (re::IntrospectionBase *(*)(void))re::initInfo_RayTracedAmbientOcclusionSettings, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::RayTracedAmbientOcclusionSettings>, this);
}

uint64_t re::RenderGraphDataStore::tryGet<re::SceneScope>(uint64_t a1, char *__s, const char *a3)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v6 = 0x9E3779B97F4A7C17;
  size_t v7 = strlen(__s);
  if (v7)
  {
    MurmurHash3_x64_128((uint64_t)__s, v7, 0, &v11);
    unint64_t v8 = (v12 - 0x61C8864680B583E9 + (v11 << 6) + (v11 >> 2)) ^ v11;
  }
  else
  {
    unint64_t v8 = 0;
  }
  size_t v9 = strlen(a3);
  if (v9)
  {
    MurmurHash3_x64_128((uint64_t)a3, v9, 0, &v11);
    unint64_t v6 = ((v12 - 0x61C8864680B583E9 + (v11 << 6) + (v11 >> 2)) ^ v11) - 0x61C8864680B583E9;
  }
  return re::RenderGraphDataStore::tryGet<re::SceneScope>(a1, ((v8 >> 2) + (v8 << 6) + v6) ^ v8);
}

uint64_t re::RenderGraphDataStore::tryGet<re::SimplifiedMeshBufferDeformationIndex>(uint64_t a1, const char *a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  MurmurHash3_x64_128((uint64_t)"Deformer", 8, 0, &v13);
  unint64_t v4 = (v14 + (v13 << 6) + (v13 >> 2) - 0x61C8864680B583E9) ^ v13;
  size_t v5 = strlen(a2);
  if (v5)
  {
    MurmurHash3_x64_128((uint64_t)a2, v5, 0, &v13);
    unint64_t v6 = ((v14 - 0x61C8864680B583E9 + (v13 << 6) + (v13 >> 2)) ^ v13) - 0x61C8864680B583E9;
  }
  else
  {
    unint64_t v6 = 0x9E3779B97F4A7C17;
  }
  unint64_t v7 = ((v4 >> 2) + (v4 << 6) + v6) ^ v4;
  unint64_t v8 = (unint64_t)"N2re36SimplifiedMeshBufferDeformationIndexE";
  if (((unint64_t)"N2re36SimplifiedMeshBufferDeformationIndexE" & 0x8000000000000000) != 0)
  {
    size_t v9 = (unsigned __int8 *)((unint64_t)"N2re36SimplifiedMeshBufferDeformationIndexE" & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v10 = 5381;
    do
    {
      unint64_t v8 = v10;
      unsigned int v11 = *v9++;
      uint64_t v10 = (33 * v10) ^ v11;
    }
    while (v11);
  }
  unint64_t v13 = (v7 - 0x61C8864680B583E9 + (v8 << 6) + (v8 >> 2)) ^ v8;
  uint64_t result = re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(a1 + 64, (uint64_t *)&v13);
  if (result) {
    return *(void *)result;
  }
  return result;
}

void re::RayTracedAmbientOcclusionMutablePersistentData::~RayTracedAmbientOcclusionMutablePersistentData(re::RayTracedAmbientOcclusionMutablePersistentData *this)
{
  re::RayTracedAmbientOcclusionMutablePersistentData::~RayTracedAmbientOcclusionMutablePersistentData(this);
  JUMPOUT(0x237DBCBD0);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  *(void *)this = &unk_26E71E120;
  uint64_t v2 = (void *)*((void *)this + 91);
  if (v2)
  {

    *((void *)this + 9re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
  }
  uint64_t v3 = (void *)*((void *)this + 90);
  if (v3)
  {

    *((void *)this + 90) = 0;
  }
  unint64_t v4 = (void *)*((void *)this + 89);
  if (v4)
  {

    *((void *)this + 89) = 0;
  }
  size_t v5 = (void *)*((void *)this + 88);
  if (v5)
  {

    *((void *)this + 8re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  }
  unint64_t v6 = (void *)*((void *)this + 87);
  if (v6)
  {

    *((void *)this + 87) = 0;
  }
  unint64_t v7 = (void *)*((void *)this + 86);
  if (v7)
  {

    *((void *)this + 86) = 0;
  }
  unint64_t v8 = (void *)*((void *)this + 85);
  if (v8)
  {

    *((void *)this + 85) = 0;
  }
  size_t v9 = (void *)*((void *)this + 84);
  if (v9)
  {

    *((void *)this + 84) = 0;
  }
  uint64_t v10 = (void *)*((void *)this + 83);
  if (v10)
  {

    *((void *)this + 83) = 0;
  }
  unsigned int v11 = (void *)*((void *)this + 82);
  if (v11)
  {

    *((void *)this + 82) = 0;
  }
  uint64_t v12 = (void *)*((void *)this + 81);
  if (v12)
  {

    *((void *)this + 8re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
  }
  unint64_t v13 = (void *)*((void *)this + 80);
  if (v13)
  {

    *((void *)this + 80) = 0;
  }
  uint64_t v14 = (void *)*((void *)this + 79);
  if (v14)
  {

    *((void *)this + 79) = 0;
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 568));
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 528);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 488);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 448);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 408);

  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 43);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 37);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 31);

  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

double re::RayTracedAmbientOcclusionNode::RayTracedAmbientOcclusionNode(re::RayTracedAmbientOcclusionNode *this, const char *a2)
{
  uint64_t v2 = re::RenderGraphNode::RenderGraphNode(this, a2);
  *(void *)uint64_t v2 = &unk_26E71E228;
  *((void *)v2 + 32) = 0;
  *((void *)v2 + 33) = 0;
  *((void *)v2 + 34) = 1065353216;
  *((_DWORD *)v2 + 70) = 0;
  *((void *)v2 + 36) = 0;
  *((void *)v2 + 37) = 0;
  double result = NAN;
  *((void *)v2 + 3re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = -1;
  *((void *)v2 + 39) = 0;
  *((void *)v2 + 40) = -1;
  *((void *)v2 + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
  *((void *)v2 + 42) = -1;
  *((void *)v2 + 43) = 0;
  *((void *)v2 + 44) = -1;
  *((void *)v2 + 45) = 0;
  *((void *)v2 + 46) = -1;
  *((void *)v2 + 47) = 0;
  *((void *)v2 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = -1;
  *((void *)v2 + 49) = 0;
  *((void *)v2 + 50) = -1;
  *((void *)v2 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
  *((void *)v2 + 52) = -1;
  *((void *)v2 + 53) = 0;
  *((void *)v2 + 54) = -1;
  *((void *)v2 + 55) = 0;
  *((void *)v2 + 56) = -1;
  *((void *)v2 + 57) = 0;
  *((void *)v2 + 5re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = -1;
  *((void *)v2 + 59) = 0;
  *((void *)v2 + 60) = -1;
  *((void *)v2 + 6re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
  *((void *)v2 + 62) = -1;
  *((void *)v2 + 63) = 0;
  *((void *)v2 + 64) = -1;
  *((void *)v2 + 65) = 0;
  *((void *)v2 + 66) = -1;
  *((void *)v2 + 67) = 0;
  *((void *)v2 + 6re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = -1;
  *((void *)v2 + 69) = 0;
  *((void *)v2 + 70) = -1;
  *((void *)v2 + 7re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
  *((void *)v2 + 72) = -1;
  *((void *)v2 + 73) = 0;
  *((void *)v2 + 74) = -1;
  *((void *)v2 + 75) = 0;
  *((void *)v2 + 76) = -1;
  return result;
}

void re::RayTracedAmbientOcclusionCameraMatchingNode::~RayTracedAmbientOcclusionCameraMatchingNode(re::RayTracedAmbientOcclusionCameraMatchingNode *this)
{
  *(void *)this = &unk_26E71E228;
  uint64_t v2 = *((void *)this + 32);
  if (v2)
  {

    *((void *)this + 32) = 0;
  }
  re::RenderGraphNode::~RenderGraphNode((id *)this);
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_26E71E228;
  uint64_t v2 = *((void *)this + 32);
  if (v2)
  {

    *((void *)this + 32) = 0;
  }
  re::RenderGraphNode::~RenderGraphNode((id *)this);
  JUMPOUT(0x237DBCBD0);
}

void re::RayTracedAmbientOcclusionCameraMatchingNode::setup(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 592) = 1;
}

void re::RayTracedAmbientOcclusionCameraMatchingNode::execute(re::RayTracedAmbientOcclusionCameraMatchingNode *this, re::RenderGraphContext *a2)
{
  uint64_t v4 = re::RenderGraphDataStore::get<re::CameraData>(*((void *)a2 + 146), *(void *)(*((void *)a2 + 5) + 48));
  if (!*(void *)(v4 + 48))
  {
    re::internal::assertLog((re::internal *)6, v5, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, 0, 0);
    _os_crash();
    __break(1u);
    goto LABEL_34;
  }
  unint64_t v6 = (float32x4_t *)(v4 + 64);
  __src[2] = *(_OWORD *)(v4 + 64);
  if (!*(void *)(v4 + 128))
  {
LABEL_34:
    re::internal::assertLog((re::internal *)6, v5, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, 0, 0);
    _os_crash();
    __break(1u);
    goto LABEL_35;
  }
  uint64_t v7 = v4 + 144;
  int v8 = *(_DWORD *)(v4 + 192);
  LODWORD(__src[0]) = *(_DWORD *)(v4 + 144);
  DWORD1(__src[0]) = v8;
  *((void *)&__src[0] + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = *(void *)(v4 + 148);
  re::Projection::computeMatrix4x4F((re::Projection *)(v4 + 144), (uint64_t)&v75);
  *(void *)&__src[1] = __PAIR64__(v75.columns[3].u32[2], v75.columns[2].u32[2]);
  simd_float4x4 v85 = __invert_f4(v75);
  if (!*(void *)(v7 - 96))
  {
LABEL_35:
    re::internal::assertLog((re::internal *)6, v9, *(double *)v85.columns[0].i64, *(double *)v85.columns[1].i64, *(double *)v85.columns[2].i64, *(double *)v85.columns[3].i64, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, 0, 0);
    _os_crash();
    __break(1u);
    return;
  }
  simd_float4 v66 = v85.columns[1];
  simd_float4 v67 = v85.columns[0];
  simd_float4 v68 = v85.columns[3];
  simd_float4 v69 = v85.columns[2];
  re::RenderCamera::computeInverseTransform(v6, (uint64_t)&v71);
  unint64_t v10 = 0;
  float32x4_t v11 = (float32x4_t)v75.columns[0];
  float32x4_t v12 = (float32x4_t)v75.columns[1];
  float32x4_t v13 = (float32x4_t)v75.columns[2];
  float32x4_t v14 = (float32x4_t)v75.columns[3];
  simd_float4 v77 = (simd_float4)v71;
  simd_float4 v78 = (simd_float4)v72;
  simd_float4 v79 = (simd_float4)v73;
  simd_float4 v80 = (simd_float4)v74;
  do
  {
    *(long long *)((char *)&v81 + v10) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v11, COERCE_FLOAT(*(_OWORD *)((char *)&v77 + v10))), v12, *(float32x2_t *)&v77.f32[v10 / 4], 1), v13, *(float32x4_t *)((char *)&v77 + v10), 2), v14, *(float32x4_t *)((char *)&v77 + v10), 3);
    v10 += 16;
  }
  while (v10 != 64);
  long long v64 = v82;
  long long v65 = v81;
  long long v62 = v84;
  long long v63 = v83;
  re::RenderCamera::computeLocalTransform((re::RenderCamera *)v6, (uint64_t)&v71);
  unint64_t v15 = 0;
  float32x4_t v16 = v71;
  float32x4_t v17 = v72;
  float32x4_t v18 = v73;
  float32x4_t v19 = v74;
  simd_float4 v77 = v67;
  simd_float4 v78 = v66;
  simd_float4 v79 = v69;
  simd_float4 v80 = v68;
  do
  {
    *(long long *)((char *)&v81 + v15) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v16, COERCE_FLOAT(*(_OWORD *)((char *)&v77 + v15))), v17, *(float32x2_t *)&v77.f32[v15 / 4], 1), v18, *(float32x4_t *)((char *)&v77 + v15), 2), v19, *(float32x4_t *)((char *)&v77 + v15), 3);
    v15 += 16;
  }
  while (v15 != 64);
  __src[7] = v65;
  __src[8] = v64;
  __src[9] = v63;
  __src[10] = v62;
  __src[3] = v81;
  __src[4] = v82;
  __src[5] = v83;
  __src[6] = v84;
  uint64_t v20 = (_OWORD *)*((void *)this + 32);
  long long v21 = v20[3];
  __src[11] = v20[2];
  __src[12] = v21;
  long long v22 = v20[4];
  long long v23 = v20[5];
  long long v24 = v20[7];
  __src[15] = v20[6];
  __src[16] = v24;
  __src[13] = v22;
  __src[14] = v23;
  long long v25 = v20[8];
  long long v26 = v20[9];
  long long v27 = v20[10];
  long long v28 = v20[12];
  __src[20] = v20[11];
  __src[21] = v28;
  __src[18] = v26;
  __src[19] = v27;
  __src[17] = v25;
  long long v29 = v83;
  v20[6] = v82;
  v20[7] = v29;
  long long v30 = __src[10];
  long long v31 = __src[8];
  v20[11] = __src[9];
  v20[12] = v30;
  long long v32 = __src[7];
  v20[8] = __src[6];
  v20[9] = v32;
  v20[10] = v31;
  long long v33 = __src[1];
  void v20[2] = __src[0];
  unint64_t v20[3] = v33;
  long long v34 = __src[3];
  v20[4] = __src[2];
  _OWORD v20[5] = v34;
  uint64_t v35 = *((void *)this + 33);
  *(void *)&__src[24] = *(void *)v35;
  DWORD2(__src[24]) = *(_DWORD *)(v35 + 8);
  if (*(unsigned char *)(v35 + 22)) {
    int v36 = *(_DWORD *)(v35 + 12);
  }
  else {
    int v36 = 0;
  }
  HIDWORD(__src[24]) = v36;
  char v37 = *(unsigned char *)(v35 + 18);
  if (v37) {
    char v37 = *(unsigned char *)(v35 + 19) != 0;
  }
  uint64_t v38 = 0;
  LOBYTE(__src[25]) = v37;
  BYTE1(__src[25]) = *(unsigned char *)(*((void *)this + 32) + 29);
  DWORD1(__src[25]) = *((_DWORD *)this + 68);
  uint64_t v39 = *(re::FrameContext **)a2;
  uint64_t v40 = 4 * (*(void *)(*(void *)a2 + 32) & 0x3FFFFFFFLL);
  do
  {
    *((void *)&__src[22] + v3re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = re::RayTracedAmbientOcclusionCameraMatchingNode::haltonSequence[((int)v40 + (int)v38) % 864];
    ++v38;
  }
  while (v38 != 4);
  re::FrameContext::perFrameAlloc(v39, 0x1A0uLL, 0x10uLL, (uint64_t)&v81);
  id v41 = (void *)v82;
  uint64_t v70 = *((void *)&v81 + 1);
  id v42 = (re *)memcpy((void *)(v81 + DWORD2(v81)), __src, 0x1A0uLL);
  uint64_t v43 = *((void *)a2 + 146);
  unint64_t v44 = (unint64_t)"N2re27RenderGraphDataStoreWrapperINS_33RayTracedAmbientOcclusionExecDataEEE";
  if (((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_33RayTracedAmbientOcclusionExecDataEEE" & 0x8000000000000000) != 0)
  {
    uint64_t v45 = (unsigned __int8 *)((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_33RayTracedAmbientOcclusionExecDataEEE" & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v46 = 5381;
    do
    {
      unint64_t v44 = v46;
      unsigned int v47 = *v45++;
      uint64_t v46 = (33 * v46) ^ v47;
    }
    while (v47);
  }
  unint64_t v48 = (*(void *)(*((void *)a2 + 5) + 48) + (v44 << 6) + (v44 >> 2) - 0x61C8864680B583E9) ^ v44;
  long long v49 = re::globalAllocators(v42);
  uint64_t v50 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v49[2] + 32))(v49[2], 24, 8);
  v50[1] = 0;
  void v50[2] = 0;
  unint64_t v51 = *(void *)(v43 + 16);
  *uint64_t v50 = &unk_26E71E2D0;
  if (!v51
    || (unint64_t v51 = v48 % *(unsigned int *)(v43 + 40),
        uint64_t v52 = *(unsigned int *)(*(void *)(v43 + 24) + 4 * v51),
        v52 == 0x7FFFFFFF))
  {
LABEL_20:
    uint64_t v53 = *(unsigned int *)(v43 + 52);
    if (v53 == 0x7FFFFFFF)
    {
      uint64_t v53 = *(unsigned int *)(v43 + 48);
      int v54 = v53;
      if (v53 == *(_DWORD *)(v43 + 40))
      {
        re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(v43 + 16, 2 * *(_DWORD *)(v43 + 44));
        LODWORD(v5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = v48 % *(unsigned int *)(v43 + 40);
        int v54 = *(_DWORD *)(v43 + 48);
      }
      *(_DWORD *)(v43 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v54 + 1;
      uint64_t v55 = *(void *)(v43 + 32);
      int v56 = *(_DWORD *)(v55 + 24 * v53);
    }
    else
    {
      uint64_t v55 = *(void *)(v43 + 32);
      int v56 = *(_DWORD *)(v55 + 24 * v53);
      *(_DWORD *)(v43 + 52) = v56 & 0x7FFFFFFF;
    }
    uint64_t v57 = 24 * v53;
    *(_DWORD *)(v55 + v57) = v56 | 0x80000000;
    *(_DWORD *)(*(void *)(v43 + 32) + v57) = *(_DWORD *)(*(void *)(v43 + 32) + 24 * v53) & 0x80000000 | *(_DWORD *)(*(void *)(v43 + 24) + 4 * v51);
    *(void *)(*(void *)(v43 + 32) + 24 * v53 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v48;
    *(void *)(*(void *)(v43 + 32) + 24 * v53 + 16) = v50;
    *(_DWORD *)(*(void *)(v43 + 24) + 4 * v5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = v53;
    ++*(_DWORD *)(v43 + 44);
    ++*(_DWORD *)(v43 + 56);
    uint64_t v58 = *(void *)(v43 + 32) + 24 * v53;
    goto LABEL_30;
  }
  uint64_t v59 = *(void *)(v43 + 32);
  while (*(void *)(v59 + 24 * v52 + 8) != v48)
  {
    LODWORD(v52) = *(_DWORD *)(v59 + 24 * v52) & 0x7FFFFFFF;
    if (v52 == 0x7FFFFFFF) {
      goto LABEL_20;
    }
  }
  uint64_t v58 = v59 + 24 * v52;
LABEL_30:
  uint64_t v60 = *(void *)(v58 + 16);
  *(void *)&long long v81 = v41;
  *((void *)&v81 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = v70;
  NS::SharedPtr<MTL::Texture>::operator=((void **)(v60 + 8), (void **)&v81);
  int v61 = (void *)v81;
  *(void *)(v60 + 16) = *((void *)&v81 + 1);
  if (v61) {
}
  }

void re::RayTracedAmbientOcclusionNode::~RayTracedAmbientOcclusionNode(re::RayTracedAmbientOcclusionNode *this)
{
  *(void *)this = &unk_26E71E228;
  uint64_t v2 = *((void *)this + 32);
  if (v2)
  {

    *((void *)this + 32) = 0;
  }
  re::RenderGraphNode::~RenderGraphNode((id *)this);
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_26E71E228;
  uint64_t v2 = *((void *)this + 32);
  if (v2)
  {

    *((void *)this + 32) = 0;
  }
  re::RenderGraphNode::~RenderGraphNode((id *)this);
  JUMPOUT(0x237DBCBD0);
}

void *re::RenderGraphDataStoreWrapper<re::RayTracedAmbientOcclusionExecData>::~RenderGraphDataStoreWrapper(void *a1)
{
  *a1 = &unk_26E71E2D0;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {

    a1[1] = 0;
  }
  return a1;
}

void re::RenderGraphDataStoreWrapper<re::RayTracedAmbientOcclusionExecData>::~RenderGraphDataStoreWrapper(void *a1)
{
  *a1 = &unk_26E71E2D0;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {

    a1[1] = 0;
  }
  JUMPOUT(0x237DBCBD0);
}

void re::RayTracedAmbientOcclusionAccelerationStructureNode::~RayTracedAmbientOcclusionAccelerationStructureNode(re::RayTracedAmbientOcclusionAccelerationStructureNode *this)
{
  *(void *)this = &unk_26E71E228;
  uint64_t v2 = *((void *)this + 32);
  if (v2)
  {

    *((void *)this + 32) = 0;
  }
  re::RenderGraphNode::~RenderGraphNode((id *)this);
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_26E71E228;
  uint64_t v2 = *((void *)this + 32);
  if (v2)
  {

    *((void *)this + 32) = 0;
  }
  re::RenderGraphNode::~RenderGraphNode((id *)this);
  JUMPOUT(0x237DBCBD0);
}

void re::RayTracedAmbientOcclusionAccelerationStructureNode::setup(uint64_t a1, uint64_t a2)
{
  *(_WORD *)(a2 + 592) = 257;
}

void re::RayTracedAmbientOcclusionAccelerationStructureNode::execute(re::RayTracedAmbientOcclusionAccelerationStructureNode *this, re::RenderGraphContext *a2)
{
  uint64_t v279 = *MEMORY[0x263EF8340];
  uint64_t v4 = (std::mutex *)(*((void *)this + 32) + 568);
  std::mutex::lock(v4);
  uint64_t v5 = re::RenderGraphDataStore::tryGet<re::SceneScope>(*((void *)a2 + 146), *(void *)(*((void *)a2 + 5) + 48));
  if (!v5) {
    goto LABEL_165;
  }
  uint64_t v6 = v5;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9C518, memory_order_acquire) & 1) == 0)
  {
    uint64_t v211 = (re *)__cxa_guard_acquire(&qword_26AF9C518);
    if (v211)
    {
      qword_26AF9C510 = re::hashString(v211, v212);
      __cxa_guard_release(&qword_26AF9C518);
    }
  }
  unint64_t v7 = qword_26AF9C510;
  int v8 = *(const char **)(v6 + 8);
  size_t v9 = strlen(v8);
  if (v9)
  {
    MurmurHash3_x64_128((uint64_t)v8, v9, 0, (unint64_t *)v264);
    uint64_t v10 = ((*(void *)&v264[8] - 0x61C8864680B583E9 + (*(void *)v264 << 6) + (*(void *)v264 >> 2)) ^ *(void *)v264)
        - 0x61C8864680B583E9;
  }
  else
  {
    uint64_t v10 = 0x9E3779B97F4A7C17;
  }
  unint64_t v11 = ((v7 >> 2) + (v7 << 6) + v10) ^ v7;
  uint64_t v12 = *((void *)a2 + 146);
  unint64_t v13 = (unint64_t)"N2re36SimplifiedMeshBufferDeformationIndexE";
  if (((unint64_t)"N2re36SimplifiedMeshBufferDeformationIndexE" & 0x8000000000000000) != 0)
  {
    float32x4_t v14 = (unsigned __int8 *)((unint64_t)"N2re36SimplifiedMeshBufferDeformationIndexE" & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v15 = 5381;
    do
    {
      unint64_t v13 = v15;
      unsigned int v16 = *v14++;
      uint64_t v15 = (33 * v15) ^ v16;
    }
    while (v16);
  }
  *(void *)int64x2_t v264 = (v11 - 0x61C8864680B583E9 + (v13 << 6) + (v13 >> 2)) ^ v13;
  uint64_t v17 = re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(v12 + 64, (uint64_t *)v264);
  if (!v17 || !*(void *)v17) {
    goto LABEL_165;
  }
  unint64_t v19 = *(void *)(*(void *)(*((void *)a2 + 1) + 40) + 968);
  unint64_t v20 = *(void *)(*(void *)a2 + 32);
  unint64_t v21 = *(unsigned int *)(*(void *)v17 + 8);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9C520, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9C520))
  {
    qword_26AF9C5F8 = 0xFFFFFFFFFFFFFFFLL;
    xmmword_26AF9C600 = 0u;
    unk_26AF9C610 = 0u;
    xmmword_26AF9C620 = 0u;
    unk_26AF9C630 = 0u;
    xmmword_26AF9C640 = 0u;
    unk_26AF9C650 = 0u;
    xmmword_26AF9C660 = 0u;
    __cxa_guard_release(&qword_26AF9C520);
  }
  if (*(void *)(v19 + 40 * (v20 & 7) + 24) <= v21) {
    uint64_t v22 = 0;
  }
  else {
    uint64_t v22 = *(void *)(v19 + 40 * (v20 & 7) + 40) + 120 * v21;
  }
  if (v22) {
    long long v23 = (uint64_t *)v22;
  }
  else {
    long long v23 = &qword_26AF9C5F8;
  }
  uint64_t v24 = v23[6];
  long long v25 = (re::RenderGraphContext *)(v24 - 1);
  if ((int)v25 < 1)
  {
    unint64_t v27 = 0;
  }
  else
  {
    unint64_t v26 = v23[10];
    if (v26 <= (v24 - 2)) {
      goto LABEL_273;
    }
    LODWORD(v27) = 0;
    long long v28 = (int *)(v23[9] + 8);
    uint64_t v29 = (v24 - 1);
    do
    {
      int v30 = *v28;
      v28 += 4;
      unint64_t v27 = (v27 + v30);
      --v29;
    }
    while (v29);
  }
  unint64_t v31 = (unint64_t)this;
  unint64_t v32 = *((void *)this + 32);
  uint64_t v33 = *(void *)(v32 + 400);
  if (v33)
  {
    uint64_t v33 = [(id)v33 status];
    unint64_t v32 = *((void *)this + 32);
    if (v33 == 1)
    {
      objc_storeStrong((id *)(v32 + 392), *(id *)(v32 + 400));
      uint64_t v34 = *((void *)this + 32);
      uint64_t v35 = *(void **)(v34 + 400);
      *(void *)(v34 + 400) = 0;

      uint64_t v36 = *((void *)this + 32);
      uint64_t v37 = v36 + 344;
      *(_DWORD *)&v264[40] = 0;
      *(_OWORD *)int64x2_t v264 = *(_OWORD *)(v36 + 296);
      *(_OWORD *)(v36 + 296) = 0u;
      *(void *)&v264[16] = *(void *)(v36 + 312);
      *(void *)(v36 + 312) = 0;
      *(_OWORD *)&v264[24] = *(_OWORD *)(v36 + 320);
      *(_OWORD *)(v36 + 320) = xmmword_23436F740;
      re::HashTable<unsigned long long,int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::operator=(v36 + 296, (uint64_t *)(v36 + 344));
      re::HashTable<unsigned long long,int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::operator=(v37, (uint64_t *)v264);
      re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)v264);
      re::HashTable<void *,unsigned int,re::Hash<void *>,re::EqualTo<void *>,true,false>::clear(*((void *)this + 32) + 344);
      uint64_t v38 = *((void *)this + 32);
      uint64_t v39 = v38 + 448;
      *(void *)int64x2_t v264 = *(void *)(v38 + 408);
      *(void *)(v38 + 40re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(_OWORD *)&v264[8] = *(_OWORD *)(v38 + 416);
      *(_OWORD *)(v38 + 416) = 0u;
      *(void *)&v264[32] = *(void *)(v38 + 440);
      *(void *)(v38 + 440) = 0;
      ++*(_DWORD *)(v38 + 432);
      unint64_t v19 = 1;
      *(_DWORD *)&v264[24] = 1;
      re::DynamicArray<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)>>::operator=(v38 + 408, v38 + 448);
      re::DynamicArray<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)>>::operator=(v39, (uint64_t)v264);
      if (*(void *)v264 && *(void *)&v264[32]) {
        (*(void (**)(void))(**(void **)v264 + 40))();
      }
      uint64_t v40 = *((void *)this + 32);
      unint64_t v20 = v40 + 528;
      *(void *)int64x2_t v264 = *(void *)(v40 + 488);
      *(_OWORD *)&v264[8] = *(_OWORD *)(v40 + 496);
      *(void *)(v40 + 48re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v40 + 496) = 0;
      *(void *)(v40 + 504) = 0;
      *(void *)&v264[32] = *(void *)(v40 + 520);
      *(void *)(v40 + 520) = 0;
      ++*(_DWORD *)(v40 + 512);
      *(_DWORD *)&v264[24] = 1;
      re::DynamicArray<re::RigComponentConstraint>::operator=(v40 + 488, v40 + 528);
      re::DynamicArray<re::RigComponentConstraint>::operator=(v20, (uint64_t)v264);
      uint64_t v33 = *(void *)v264;
      if (*(void *)v264)
      {
        uint64_t v18 = *(void *)&v264[32];
        if (*(void *)&v264[32]) {
          uint64_t v33 = (*(uint64_t (**)(void))(**(void **)v264 + 40))();
        }
      }
      unint64_t v32 = *((void *)this + 32);
      *(void *)(v32 + 464) = 0;
      ++*(_DWORD *)(v32 + 472);
      *(void *)(v32 + 544) = 0;
      ++*(_DWORD *)(v32 + 552);
    }
  }
  uint64_t v246 = v25;
  if (*(void *)(v32 + 400)) {
    goto LABEL_34;
  }
  uint64_t v33 = *(void *)(v32 + 392);
  if (v33)
  {
    uint64_t v33 = [(id)v33 instanceCount];
    if (v33 == (int)v27)
    {
      if ((int)v25 < 1) {
        goto LABEL_34;
      }
      char v105 = 0;
      int v106 = 0;
      int v107 = 0;
      unint64_t v108 = v23[10];
      unint64_t v109 = v23[14];
      do
      {
        uint64_t v110 = v107;
        if (v108 <= v107) {
          goto LABEL_251;
        }
        if (v109 <= v107) {
          goto LABEL_252;
        }
        int v111 = *(_DWORD *)(v23[9] + 16 * v107 + 8);
        if (v111 >= 1)
        {
          uint64_t v112 = *((void *)this + 32);
          unint64_t v19 = *(void *)(v112 + 424);
          uint64_t v33 = v106;
          if (v19 <= v106) {
            unint64_t v31 = v106;
          }
          else {
            unint64_t v31 = *(void *)(v112 + 424);
          }
          v106 += v111;
          while (1)
          {
            if (v31 == v33) {
              goto LABEL_236;
            }
            uint64_t v18 = *(void *)(*(void *)(v112 + 440) + 8 * v33);
            if (*(void *)(v23[13] + 8 * v107) != v18) {
              break;
            }
            ++v33;
            if (!--v111) {
              goto LABEL_114;
            }
          }
          char v105 = 1;
          int v106 = v33;
          int v107 = (int)v25;
        }
LABEL_114:
        ++v107;
      }
      while (v107 < (int)v25);
      if ((v105 & 1) == 0) {
        goto LABEL_34;
      }
    }
    unint64_t v32 = *((void *)this + 32);
    if ((int)v27 < 1)
    {
      unint64_t v19 = *(void *)(v32 + 392);
      *(void *)(v32 + 392) = 0;
      goto LABEL_217;
    }
  }
  else if ((int)v27 <= 0)
  {
    goto LABEL_34;
  }
  unint64_t v245 = (re::FrameContext **)a2;
  float32x4_t v232 = v4;
  uint64_t v147 = *(void *)(v32 + 248);
  v32 += 248;
  if (!v147)
  {
    uint64_t v149 = *((void *)this + 32);
    if (!*(void *)(v149 + 248))
    {
      unint64_t v20 = v149 + 344;
    }
  }
  *(_DWORD *)int64x2_t v264 = 0;
  if ((int)v25 >= 1)
  {
    int v150 = 0;
    unint64_t v31 = 0x263F13000uLL;
    a2 = (re::RenderGraphContext *)2863311531;
    while (1)
    {
      uint64_t v151 = v150;
      unint64_t v152 = v23[14];
      if (v152 <= v150) {
        break;
      }
      uint64_t v153 = *((void *)this + 32);
      if (!*(void *)(v153 + 248)
        || (unint64_t v154 = *(void *)(v23[13] + 8 * v150),
            unint64_t v155 = 0x94D049BB133111EBLL
                 * ((0xBF58476D1CE4E5B9 * (v154 ^ (v154 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v154 ^ (v154 >> 30))) >> 27)),
            uint64_t v156 = *(unsigned int *)(*(void *)(v153 + 256)
                                   + 4 * ((v155 ^ (v155 >> 31)) % *(unsigned int *)(v153 + 272))),
            v156 == 0x7FFFFFFF))
      {
LABEL_178:
        uint64_t v158 = (void *)[objc_alloc(MEMORY[0x263F133E0]) initWithGroup:*(void *)(*((void *)this + 32) + 224)];
        uint64_t v160 = *(int *)v264;
        unint64_t v161 = v23[8];
        unint64_t v162 = *(int *)v264 + 1;
        if (v162 >= v161) {
          goto LABEL_244;
        }
        if (v161 <= *(int *)v264) {
          goto LABEL_245;
        }
        unint64_t v20 = (unint64_t)v158;
        unint64_t v32 = (*(_DWORD *)(v23[7] + 4 * v162) - *(_DWORD *)(v23[7] + 4 * *(int *)v264)) / 0xCuLL;
        [v158 setVertexStride:12];
        [(id)v20 setIndexType:32];
        [(id)v20 setTriangleCount:v32];
        uint64_t v164 = *(int *)v264;
        unint64_t v165 = v23[12];
        if (v165 <= *(int *)v264) {
          goto LABEL_246;
        }
        if (*(unsigned char *)(v23[11] + *(int *)v264)) {
          [(id)v20 setUsage:1];
        }
        [(id)v20 setVertexBuffer:v23[1]];
        uint64_t v167 = *(int *)v264;
        unint64_t v168 = v23[6];
        if (v168 <= *(int *)v264) {
          goto LABEL_247;
        }
        [(id)v20 setVertexBufferOffset:*(unsigned int *)(v23[5] + 4 * *(int *)v264) + (unint64_t)*((unsigned int *)v23 + 4)];
        [(id)v20 setIndexBuffer:v23[3]];
        uint64_t v170 = *(int *)v264;
        unint64_t v171 = v23[8];
        if (v171 <= *(int *)v264) {
          goto LABEL_248;
        }
        [(id)v20 setIndexBufferOffset:*(unsigned int *)(v23[7] + 4 * *(int *)v264) + (unint64_t)*((unsigned int *)v23 + 8)];
        [*(id *)(*((void *)this + 32) + 240) addObject:v20];
        LODWORD(v262[0]) = 0;
        LODWORD(v262[0]) = [*(id *)(*((void *)this + 32) + 240) count] - 1;
        uint64_t v173 = *(int *)v264;
        unint64_t v174 = v23[14];
        if (v174 <= *(int *)v264) {
          goto LABEL_249;
        }
        re::HashTable<unsigned long long,int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add<int &>(*((void *)this + 32) + 248, (uint64_t *)(v23[13] + 8 * *(int *)v264), v262);
        uint64_t v176 = *(int *)v264;
        unint64_t v177 = v23[14];
        if (v177 <= *(int *)v264) {
          goto LABEL_250;
        }
        re::HashTable<unsigned long long,int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add<int &>(*((void *)this + 32) + 344, (uint64_t *)(v23[13] + 8 * *(int *)v264), v264);
        unint64_t v32 = (unint64_t)*v245 + 64;
        unint64_t v19 = LODWORD(v262[0]);
        unint64_t v20 = (unint64_t)(id)v20;
        uint64_t v269 = re::globalAllocators((re *)v20)[2];
        uint64_t v270 = 0;
        uint64_t v178 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v269 + 32))(v269, 32, 0);
        *(void *)uint64_t v178 = &unk_26E71E3A0;
        *(void *)(v178 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = this;
        *(void *)(v178 + 16) = v20;
        *(_DWORD *)(v178 + 24) = v19;
        uint64_t v270 = v178;
        re::mtl::CommandBuffer::addCompletionHandler((void **)v32, (uint64_t)v268);

        re::FunctionBase<24ul,void ()(re::mtl::CommandBuffer const&)>::destroyCallable((uint64_t)v268);
        int v150 = *(_DWORD *)v264;
      }
      else
      {
        uint64_t v157 = *(void *)(v153 + 264);
        while (*(void *)(v157 + 32 * v156 + 16) != v154)
        {
          uint64_t v156 = *(_DWORD *)(v157 + 32 * v156 + 8) & 0x7FFFFFFF;
          if (v156 == 0x7FFFFFFF) {
            goto LABEL_178;
          }
        }
      }
      *(_DWORD *)int64x2_t v264 = ++v150;
      if (v150 >= (int)v25) {
        goto LABEL_189;
      }
    }
LABEL_240:
    re::internal::assertLog((re::internal *)6, v18, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v151, v152);
    _os_crash();
    __break(1u);
LABEL_241:
    re::internal::assertLog((re::internal *)6, v141, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v27, v142);
    _os_crash();
    __break(1u);
LABEL_242:
    re::internal::assertLog((re::internal *)6, v143, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v27, v144);
    _os_crash();
    __break(1u);
LABEL_243:
    re::internal::assertLog((re::internal *)6, v145, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v27, v146);
    _os_crash();
    __break(1u);
LABEL_244:
    re::internal::assertLog((re::internal *)6, v159, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v162, v161);
    _os_crash();
    __break(1u);
LABEL_245:
    re::internal::assertLog((re::internal *)6, v159, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v160, v161);
    _os_crash();
    __break(1u);
LABEL_246:
    re::internal::assertLog((re::internal *)6, v163, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v164, v165);
    _os_crash();
    __break(1u);
LABEL_247:
    re::internal::assertLog((re::internal *)6, v166, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v167, v168);
    _os_crash();
    __break(1u);
LABEL_248:
    re::internal::assertLog((re::internal *)6, v169, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v170, v171);
    _os_crash();
    __break(1u);
LABEL_249:
    re::internal::assertLog((re::internal *)6, v172, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v173, v174);
    _os_crash();
    __break(1u);
LABEL_250:
    re::internal::assertLog((re::internal *)6, v175, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v176, v177);
    _os_crash();
    __break(1u);
LABEL_251:
    re::internal::assertLog((re::internal *)6, v18, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v110, v108);
    _os_crash();
    __break(1u);
LABEL_252:
    re::internal::assertLog((re::internal *)6, v18, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v110, v109);
    _os_crash();
    __break(1u);
LABEL_253:
    re::internal::assertLog((re::internal *)6, v43, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v49, v50);
    _os_crash();
    __break(1u);
LABEL_254:
    v248.i64[0] = 0;
    memset(v264, 0, 80);
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v271 = 136315906;
    uint64_t v272 = "operator[]";
    __int16 v273 = 1024;
    int v274 = 789;
    __int16 v275 = 2048;
    unint64_t v276 = v20;
    __int16 v277 = 2048;
    unint64_t v278 = v19;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_255:
    uint64_t v261 = 0;
    memset(v264, 0, 80);
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v271 = 136315906;
    uint64_t v272 = "operator[]";
    __int16 v273 = 1024;
    int v274 = 789;
    __int16 v275 = 2048;
    unint64_t v276 = v20;
    __int16 v277 = 2048;
    unint64_t v278 = v19;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_256;
  }
LABEL_189:
  uint64_t v179 = [objc_alloc(MEMORY[0x263F13308]) initWithGroup:*(void *)(*((void *)this + 32) + 224)];
  uint64_t v180 = *((void *)this + 32);
  uint64_t v181 = *(void **)(v180 + 400);
  *(void *)(v180 + 400) = v179;

  [*(id *)(*((void *)this + 32) + 400) setUsage:1];
  re::DynamicArray<double>::resize(*((void *)this + 32) + 448, v27);
  re::DynamicArray<re::Vector3<float>>::resize(*((void *)this + 32) + 528, v27);
  unint64_t v20 = 4 * v27;
  re::FrameContext::perFrameAlloc(*v245, v20, 4uLL, (uint64_t)v264);
  uint64_t v182 = *(void *)v264;
  uint64_t v229 = *(unsigned int *)&v264[8];
  unint64_t v242 = *(unsigned int *)&v264[12];
  uint64_t v218 = *(void *)&v264[16];
  re::FrameContext::perFrameAlloc(*v245, (unint64_t)v27 << 6, 0x10uLL, (uint64_t)v264);
  uint64_t v238 = *(void *)v264;
  uint64_t v226 = *(unsigned int *)&v264[8];
  unint64_t v183 = *(unsigned int *)&v264[12];
  uint64_t v215 = *(void *)&v264[16];
  *(int32x2_t *)&double v184 = re::FrameContext::perFrameAlloc(*v245, v20, 4uLL, (uint64_t)v264);
  unint64_t v19 = *(void *)v264;
  uint64_t v223 = *(unsigned int *)&v264[8];
  unint64_t v31 = *(unsigned int *)&v264[12];
  uint64_t v213 = *(void *)&v264[16];
  char v186 = objc_msgSend(MEMORY[0x263EFF980], "array", v184);
  if ((int)v25 < 1) {
    goto LABEL_214;
  }
  unint64_t v20 = 0;
  uint64_t v187 = v182;
  unint64_t v32 = 0;
  unint64_t v188 = v242 >> 2;
  unint64_t v241 = v31 >> 2;
  unint64_t v242 = v183 >> 6;
  unint64_t v31 = v188;
  unint64_t v240 = v19 + v223;
  uint64_t v239 = v238 + v226;
  uint64_t v235 = v187 + v229;
  do
  {
    unint64_t v189 = v23[10];
    if (v189 <= v20) {
      goto LABEL_258;
    }
    int v190 = (re::RenderGraphContext *)*(unsigned int *)(v23[9] + 16 * v20 + 8);
    long long v253 = 0;
    unint64_t v191 = v23[14];
    if (v191 <= v20)
    {
LABEL_259:
      re::internal::assertLog((re::internal *)6, v185, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v20, v191);
      _os_crash();
      __break(1u);
LABEL_260:
      re::internal::assertLog((re::internal *)6, v71, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v72, v73);
      _os_crash();
      __break(1u);
LABEL_261:
      re::internal::assertLog((re::internal *)6, v71, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v20, v31);
      _os_crash();
      __break(1u);
LABEL_262:
      re::internal::assertLog((re::internal *)6, v71, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v96, v75);
      _os_crash();
      __break(1u);
LABEL_263:
      re::internal::assertLog((re::internal *)6, v71, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v20, v242);
      _os_crash();
      __break(1u);
LABEL_264:
      re::internal::assertLog((re::internal *)6, v71, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v20, v240);
      _os_crash();
      __break(1u);
LABEL_265:
      re::internal::assertLog((re::internal *)6, v71, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v72, v102);
      _os_crash();
      __break(1u);
LABEL_266:
      uint64_t v261 = 0;
      memset(v264, 0, 80);
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v271 = 136315906;
      uint64_t v272 = "operator[]";
      __int16 v273 = 1024;
      int v274 = 789;
      __int16 v275 = 2048;
      unint64_t v276 = v19;
      __int16 v277 = 2048;
      unint64_t v278 = v32;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_267:
      re::internal::assertLog((re::internal *)6, v71, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v19, v85);
      _os_crash();
      __break(1u);
LABEL_268:
      re::internal::assertLog((re::internal *)6, v88, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v19, v89);
      _os_crash();
      __break(1u);
LABEL_269:
      re::internal::assertLog((re::internal *)6, v88, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v31, v91);
      _os_crash();
      __break(1u);
LABEL_270:
      re::internal::assertLog((re::internal *)6, v88, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v20, v31);
      _os_crash();
      __break(1u);
LABEL_271:
      re::internal::assertLog((re::internal *)6, v88, *(double *)v94.i64, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v20, v242);
      _os_crash();
      __break(1u);
LABEL_272:
      re::internal::assertLog((re::internal *)6, v88, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v20, v240);
      _os_crash();
      __break(1u);
LABEL_273:
      re::internal::assertLog((re::internal *)6, v18, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v26, v26);
      _os_crash();
      __break(1u);
    }
    long long v253 = *(uint64_t **)(v23[13] + 8 * v20);
    if ((int)v190 < 1) {
      goto LABEL_213;
    }
    uint64_t v192 = 0;
    a2 = 0;
    LODWORD(v193) = v31 - v32;
    if (v31 >= v32) {
      unint64_t v193 = v193;
    }
    else {
      unint64_t v193 = 0;
    }
    LODWORD(v194) = v242 - v32;
    if (v242 >= v32) {
      unint64_t v194 = v194;
    }
    else {
      unint64_t v194 = 0;
    }
    LODWORD(v195) = v241 - v32;
    if (v241 >= v32) {
      unint64_t v195 = v195;
    }
    else {
      unint64_t v195 = 0;
    }
    uint64_t v196 = v239 + ((uint64_t)(int)v32 << 6);
    do
    {
      if ((re::RenderGraphContext *)v193 == a2) {
        goto LABEL_229;
      }
      *(_DWORD *)(v235 + 4 * (int)v32 + 4 * (void)a2) = v20;
      unint64_t v197 = v23[10];
      if (v197 <= v20)
      {
LABEL_230:
        re::internal::assertLog((re::internal *)6, v197, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v20, v197);
        _os_crash();
        __break(1u);
LABEL_231:
        re::internal::assertLog((re::internal *)6, v198, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, a2, v199);
        _os_crash();
        __break(1u);
LABEL_232:
        re::internal::assertLog((re::internal *)6, v198, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, (char *)a2 + (int)v32, v242);
        _os_crash();
        __break(1u);
LABEL_233:
        re::internal::assertLog((re::internal *)6, (uint64_t)v200, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, (char *)a2 + (int)v32, v241);
        _os_crash();
        __break(1u);
LABEL_234:
        *(void *)&v258[0] = 0;
        memset(v264, 0, 80);
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        LODWORD(v262[0]) = 136315906;
        *(uint64_t *)((char *)v262 + 4) = (uint64_t)"operator[]";
        WORD2(v262[1]) = 1024;
        *(_DWORD *)((char *)&v262[1] + 6) = 789;
        WORD1(v262[2]) = 2048;
        *(uint64_t *)((char *)&v262[2] + 4) = (uint64_t)a2 + (int)v32;
        WORD2(v262[3]) = 2048;
        *(uint64_t *)((char *)&v262[3] + 6) = v19;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_235:
        *(void *)&v258[0] = 0;
        memset(v264, 0, 80);
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        LODWORD(v262[0]) = 136315906;
        *(uint64_t *)((char *)v262 + 4) = (uint64_t)"operator[]";
        WORD2(v262[1]) = 1024;
        *(_DWORD *)((char *)&v262[1] + 6) = 789;
        WORD1(v262[2]) = 2048;
        *(uint64_t *)((char *)&v262[2] + 4) = (uint64_t)a2 + (int)v32;
        WORD2(v262[3]) = 2048;
        *(uint64_t *)((char *)&v262[3] + 6) = v19;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_236:
        *(void *)&v258[0] = 0;
        memset(v264, 0, 80);
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        LODWORD(v262[0]) = 136315906;
        *(uint64_t *)((char *)v262 + 4) = (uint64_t)"operator[]";
        WORD2(v262[1]) = 1024;
        *(_DWORD *)((char *)&v262[1] + 6) = 789;
        WORD1(v262[2]) = 2048;
        *(uint64_t *)((char *)&v262[2] + 4) = v31;
        WORD2(v262[3]) = 2048;
        *(uint64_t *)((char *)&v262[3] + 6) = v19;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_237:
        re::internal::assertLog((re::internal *)6, v138, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v27, v139);
        _os_crash();
        __break(1u);
LABEL_238:
        re::internal::assertLog((re::internal *)6, v43, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v45, v46);
        _os_crash();
        __break(1u);
LABEL_239:
        re::internal::assertLog((re::internal *)6, v43, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v45, v47);
        _os_crash();
        __break(1u);
        goto LABEL_240;
      }
      uint64_t v198 = v23[9];
      unint64_t v199 = *(void *)(v198 + 16 * v20 + 8);
      if (v199 <= (unint64_t)a2) {
        goto LABEL_231;
      }
      if ((re::RenderGraphContext *)v194 == a2) {
        goto LABEL_232;
      }
      long long v200 = (long long *)(*(void *)(v198 + 16 * v20) + v192);
      long long v201 = (_OWORD *)(v196 + v192);
      long long v202 = *v200;
      long long v203 = v200[1];
      long long v204 = v200[3];
      v201[2] = v200[2];
      v201[3] = v204;
      _OWORD *v201 = v202;
      v201[1] = v203;
      if ((re::RenderGraphContext *)v195 == a2) {
        goto LABEL_233;
      }
      *(_DWORD *)(v240 + 4 * (int)v32 + 4 * (void)a2) = 1;
      char v205 = (void *)*((void *)this + 32);
      unint64_t v19 = v205[58];
      if (v19 <= (unint64_t)a2 + (int)v32) {
        goto LABEL_234;
      }
      *(void *)(v205[60] + 8 * (int)v32 + 8 * (void)a2) = v253;
      unint64_t v19 = v205[68];
      if (v19 <= (unint64_t)a2 + (int)v32) {
        goto LABEL_235;
      }
      uint64_t v185 = v205[70] + 16 * (int)v32;
      *(_OWORD *)(v185 + 16 * (void)a2) = *(_OWORD *)(v196 + v192 + 48);
      a2 = (re::RenderGraphContext *)((char *)a2 + 1);
      v192 += 64;
    }
    while (v190 != a2);
    unint64_t v32 = (v32 + a2);
LABEL_213:
    long long v206 = objc_msgSend(*(id *)(*((void *)this + 32) + 240), "objectAtIndexedSubscript:", *(int *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(*((void *)this + 32) + 248, (uint64_t *)&v253));
    [v186 addObject:v206];

    ++v20;
  }
  while ((re::RenderGraphContext *)v20 != v25);
LABEL_214:
  unint64_t v19 = (unint64_t)v186;
  long long v207 = (void *)[v186 copy];
  [*(id *)(*((void *)this + 32) + 400) setAccelerationStructures:v207];
  [*(id *)(*((void *)this + 32) + 400) setInstanceBuffer:v218];
  [*(id *)(*((void *)this + 32) + 400) setInstanceBufferOffset:v229];
  [*(id *)(*((void *)this + 32) + 400) setTransformBuffer:v215];
  [*(id *)(*((void *)this + 32) + 400) setTransformBufferOffset:v226];
  [*(id *)(*((void *)this + 32) + 400) setMaskBuffer:v213];
  [*(id *)(*((void *)this + 32) + 400) setMaskBufferOffset:v223];
  long long v208 = (re *)[*(id *)(*((void *)this + 32) + 400) setInstanceCount:v27];
  unint64_t v32 = (unint64_t)*v245 + 64;
  *(_OWORD *)&v264[68] = *((_OWORD *)v23 + 4);
  *(_OWORD *)&v264[84] = *((_OWORD *)v23 + 5);
  *(_OWORD *)&v264[100] = *((_OWORD *)v23 + 6);
  *(void *)&v264[116] = v23[14];
  *(_OWORD *)&v264[4] = *(_OWORD *)v23;
  *(_OWORD *)&v264[20] = *((_OWORD *)v23 + 1);
  *(_OWORD *)&v264[36] = *((_OWORD *)v23 + 2);
  *(_OWORD *)&v264[52] = *((_OWORD *)v23 + 3);
  uint64_t v209 = re::globalAllocators(v208)[2];
  uint64_t v266 = v209;
  uint64_t v267 = 0;
  if (v209) {
    uint64_t v209 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v209 + 32))(v209, 144, 0);
  }
  *(void *)uint64_t v209 = &unk_26E71E3F8;
  *(void *)(v209 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = this;
  *(_DWORD *)(v209 + 16) = v25;
  *(_OWORD *)(v209 + 20) = *(_OWORD *)v264;
  *(_OWORD *)(v209 + 36) = *(_OWORD *)&v264[16];
  *(_OWORD *)(v209 + 84) = *(_OWORD *)&v264[64];
  *(_OWORD *)(v209 + 100) = *(_OWORD *)&v264[80];
  *(_OWORD *)(v209 + 116) = *(_OWORD *)&v264[96];
  *(_OWORD *)(v209 + 12re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_OWORD *)&v264[108];
  *(_OWORD *)(v209 + 52) = *(_OWORD *)&v264[32];
  *(_OWORD *)(v209 + 6re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_OWORD *)&v264[48];
  uint64_t v267 = v209;
  re::mtl::CommandBuffer::addCompletionHandler((void **)v32, (uint64_t)v265);
  re::FunctionBase<24ul,void ()(re::mtl::CommandBuffer const&)>::destroyCallable((uint64_t)v265);

  uint64_t v4 = v232;
  a2 = (re::RenderGraphContext *)v245;
LABEL_217:

LABEL_34:
  id v41 = this;
  uint64_t v42 = *((void *)this + 32);
  if (*(void *)(v42 + 392))
  {
    if (*(void *)(v42 + 400))
    {
      int v259 = 0;
      memset(v258, 0, sizeof(v258));
      uint64_t v260 = 0x7FFFFFFFLL;
      unint64_t v257 = 0;
      unint64_t v254 = 0;
      unint64_t v255 = 0;
      uint64_t v252 = 0;
      long long v253 = 0;
      int v256 = 0;
      v249[1] = 0;
      unint64_t v250 = 0;
      v249[0] = 0;
      int v251 = 0;
      int v271 = 0;
      if ((int)v25 <= 0) {
        goto LABEL_143;
      }
      uint64_t v243 = a2;
      float32x4_t v230 = v4;
      a2 = 0;
      unint64_t v32 = 0;
      int v44 = 0;
      unint64_t v27 = 0x100000000;
      do
      {
        unint64_t v45 = v44;
        unint64_t v46 = v23[10];
        if (v46 <= v44) {
          goto LABEL_238;
        }
        unint64_t v47 = v23[14];
        if (v47 <= v45) {
          goto LABEL_239;
        }
        unint64_t v19 = *(void *)(v23[9] + 16 * v45 + 8);
        unint64_t v20 = (unint64_t)this;
        unint64_t v48 = (int *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(*((void *)this + 32) + 248, (uint64_t *)(v23[13] + 8 * v45));
        if (v48)
        {
          unint64_t v31 = *v48;
          if ([*(id *)(*((void *)this + 32) + 232) count] > v31)
          {
            v262[0] = 0;
            uint64_t v49 = v271;
            unint64_t v50 = v23[14];
            if (v50 <= v271) {
              goto LABEL_253;
            }
            v262[0] = *(void *)(v23[13] + 8 * v271);
            unint64_t v51 = (_anonymous_namespace_ *)re::HashTable<unsigned long long,int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add<int &>((uint64_t)v258, v262, &v271);
            if ((int)v19 >= 1)
            {
              uint64_t v52 = 0;
              unint64_t v20 = 0;
              unint64_t v19 = v19;
              uint64_t v53 = 48;
              while (1)
              {
                unint64_t v31 = v271;
                if (v32 >= v254)
                {
                  unint64_t v55 = v32 + 1;
                  if (v254 < v55)
                  {
                    if (v253)
                    {
                      unint64_t v56 = 8;
                      if (v254) {
                        unint64_t v56 = 2 * v254;
                      }
                      if (v56 <= v55) {
                        unint64_t v57 = v55;
                      }
                      else {
                        unint64_t v57 = v56;
                      }
                      re::DynamicArray<re::MeshResourceDefinition::Level>::setCapacity(&v253, v57);
                    }
                    else
                    {
                      re::DynamicArray<re::MeshResourceDefinition::Level>::setCapacity(&v253, v55);
                      ++v256;
                    }
                  }
                  unint64_t v32 = v255;
                  a2 = v257;
                  int v54 = v271;
                }
                else
                {
                  int v54 = v271;
                }
                *((void *)a2 + v32) = v52 + v31;
                unint64_t v32 = ++v255;
                ++v256;
                uint64_t v58 = v54;
                unint64_t v59 = v23[10];
                if (v59 <= v54) {
                  break;
                }
                uint64_t v60 = v23[9];
                unint64_t v61 = *(void *)(v60 + 16 * v58 + 8);
                if (v61 <= v20) {
                  goto LABEL_219;
                }
                *(_OWORD *)int64x2_t v264 = *(_OWORD *)(*(void *)(v60 + 16 * v58) + v53);
                re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v249, (__n128 *)v264);
                ++v20;
                v52 += 0x100000000;
                v53 += 64;
                if (v19 == v20) {
                  goto LABEL_60;
                }
              }
              re::internal::assertLog((re::internal *)6, v43, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v54, v59);
              _os_crash();
              __break(1u);
LABEL_219:
              re::internal::assertLog((re::internal *)6, v43, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v20, v61);
              _os_crash();
              __break(1u);
LABEL_220:
              re::internal::assertLog((re::internal *)6, v120, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v32 + (int)v53, v242);
              _os_crash();
              __break(1u);
              goto LABEL_221;
            }
LABEL_60:
            long long v25 = v246;
          }
        }
        int v44 = v271 + 1;
        int v271 = v44;
      }
      while (v44 < (int)v25);
      uint64_t v4 = v230;
      a2 = v243;
      if (v250)
      {
        unint64_t v263 = 0;
        memset(v262, 0, 44);
        re::internal::GeomKDTree<re::Vector3<float>>::build((uint64_t)v262, v250, v252);
        int v62 = [*(id *)(*((void *)this + 32) + 392) instanceCount];
        re::FrameContext::perFrameAlloc(*(re::FrameContext **)v243, 4 * v62, 4uLL, (uint64_t)v264);
        uint64_t v63 = *(void *)v264;
        uint64_t v227 = *(unsigned int *)&v264[8];
        unint64_t v242 = *(unsigned int *)&v264[12];
        uint64_t v219 = *(void *)&v264[16];
        re::FrameContext::perFrameAlloc(*(re::FrameContext **)v243, (uint64_t)v62 << 6, 0x10uLL, (uint64_t)v264);
        unint64_t v31 = *(void *)v264;
        uint64_t v224 = *(unsigned int *)&v264[8];
        unint64_t v64 = *(unsigned int *)&v264[12];
        uint64_t v216 = *(void *)&v264[16];
        *(int32x2_t *)&double v65 = re::FrameContext::perFrameAlloc(*(re::FrameContext **)v243, 4 * v62, 4uLL, (uint64_t)v264);
        uint64_t v66 = *(void *)v264;
        uint64_t v221 = *(unsigned int *)&v264[8];
        unint64_t v19 = *(unsigned int *)&v264[12];
        uint64_t v214 = *(void *)&v264[16];
        simd_float4 v67 = objc_msgSend(MEMORY[0x263EFF980], "array", v65);
        if (v62 >= 1)
        {
          uint64_t v68 = v63;
          unint64_t v20 = 0;
          unint64_t v241 = v68 + v227;
          unint64_t v236 = v31 + v224;
          unint64_t v31 = v242 >> 2;
          unint64_t v242 = v64 >> 6;
          a2 = (re::RenderGraphContext *)(v66 + v221);
          unint64_t v240 = v19 >> 2;
          unint64_t v27 = v62;
          float32x4_t v233 = v257;
          do
          {
            simd_float4 v69 = (void *)*((void *)this + 32);
            unint64_t v19 = v69[63];
            if (v19 <= v20) {
              goto LABEL_254;
            }
            float32x4_t v248 = *(float32x4_t *)(v69[65] + 16 * v20);
            uint64_t v247 = 0;
            unint64_t v19 = v69[53];
            if (v19 <= v20) {
              goto LABEL_255;
            }
            uint64_t v247 = *(void *)(v69[55] + 8 * v20);
            uint64_t v70 = (int *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)v258, &v247);
            if (v70)
            {
              unint64_t v72 = *v70;
              unint64_t v73 = v23[10];
              if (v73 <= v72) {
                goto LABEL_260;
              }
              float32x4_t v74 = (void *)(v23[9] + 16 * v72);
              unint64_t v75 = v74[1];
              if ((int)v75 >= 1)
              {
                uint64_t v76 = 0;
                int v77 = -1;
                float v78 = 3.4028e38;
                uint64_t v79 = 48;
                while (v75 != v76)
                {
                  float32x4_t v80 = vsubq_f32(*(float32x4_t *)(*v74 + v79), v248);
                  float32x4_t v81 = vmulq_f32(v80, v80);
                  float v82 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v81, 2), vaddq_f32(v81, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v81.f32, 1))).f32[0];
                  if (v82 < v78)
                  {
                    float v78 = v82;
                    int v77 = v76;
                  }
                  ++v76;
                  v79 += 64;
                  if (v74[1] == v76) {
                    goto LABEL_87;
                  }
                }
LABEL_226:
                unint64_t v210 = (v75 - 1);
                if (v75 < v210) {
                  unint64_t v210 = v75;
                }
                re::internal::assertLog((re::internal *)6, v71, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v210, v75);
                _os_crash();
                __break(1u);
LABEL_229:
                re::internal::assertLog((re::internal *)6, v185, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, (char *)a2 + (int)v32, v31);
                _os_crash();
                __break(1u);
                goto LABEL_230;
              }
              int v77 = -1;
LABEL_87:
              if (v20 >= v31) {
                goto LABEL_261;
              }
              *(_DWORD *)(v241 + 4 * v20) = v20;
              uint64_t v96 = v77;
              if (v75 <= v77) {
                goto LABEL_262;
              }
              if (v20 >= v242) {
                goto LABEL_263;
              }
              uint64_t v97 = (long long *)(*v74 + ((uint64_t)v77 << 6));
              uint64_t v98 = (_OWORD *)(v236 + (v20 << 6));
              long long v99 = *v97;
              long long v100 = v97[1];
              long long v101 = v97[3];
              v98[2] = v97[2];
              v98[3] = v101;
              *uint64_t v98 = v99;
              v98[1] = v100;
              if (v20 >= v240) {
                goto LABEL_264;
              }
              *((_DWORD *)a2 + v20) = 1;
              unint64_t v102 = v23[14];
              if (v102 <= v72) {
                goto LABEL_265;
              }
              int v92 = *(_DWORD *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(*((void *)this + 32) + 248, (uint64_t *)(v23[13] + 8 * v72));
            }
            else
            {
              int v83 = -1;
              int v271 = -1;
              if (v262[4])
              {
                *(void *)int64x2_t v264 = 0x7FF0000000000000;
                re::internal::GeomKDTree<re::Vector3<float>>::findClosestHelper((uint64_t)v262, v263, &v248, (double *)v264, &v271);
                int v83 = v271;
              }
              unint64_t v19 = v83;
              if (v32 <= v83) {
                goto LABEL_266;
              }
              long long v84 = (int *)((char *)v233 + 8 * v83);
              unint64_t v19 = *v84;
              unint64_t v85 = v23[14];
              if (v85 <= v19) {
                goto LABEL_267;
              }
              unint64_t v86 = v31;
              unint64_t v31 = v84[1];
              long long v87 = (int *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(*((void *)this + 32) + 248, (uint64_t *)(v23[13] + 8 * v19));
              unint64_t v89 = v23[10];
              if (v89 <= v19) {
                goto LABEL_268;
              }
              uint64_t v90 = v23[9];
              unint64_t v91 = *(void *)(v90 + 16 * v19 + 8);
              if (v91 <= v31) {
                goto LABEL_269;
              }
              int v92 = *v87;
              unint64_t v93 = *(void *)(v90 + 16 * v19) + (v31 << 6);
              *(_OWORD *)int64x2_t v264 = *(_OWORD *)v93;
              *(_OWORD *)&v264[16] = *(_OWORD *)(v93 + 16);
              *(_OWORD *)&v264[32] = *(_OWORD *)(v93 + 32);
              unint64_t v31 = v86;
              if (v20 >= v86) {
                goto LABEL_270;
              }
              float32x4_t v94 = v248;
              v94.i32[3] = *(_DWORD *)(v93 + 60);
              *(_DWORD *)(v241 + 4 * v20) = v20;
              if (v20 >= v242) {
                goto LABEL_271;
              }
              int v95 = (_OWORD *)(v236 + (v20 << 6));
              *int v95 = *(_OWORD *)v264;
              v95[1] = *(_OWORD *)&v264[16];
              v95[2] = *(_OWORD *)&v264[32];
              uint64_t v95[3] = v94;
              if (v20 >= v240) {
                goto LABEL_272;
              }
              *((_DWORD *)a2 + v20) = 0;
            }
            unint64_t v103 = [*(id *)(*((void *)this + 32) + 232) objectAtIndexedSubscript:v92];
            [v67 addObject:v103];

            ++v20;
          }
          while (v20 != v27);
        }
        uint64_t v104 = (void *)[v67 copy];
        [*(id *)(*((void *)this + 32) + 392) setAccelerationStructures:v104];
        [*(id *)(*((void *)this + 32) + 392) setInstanceBuffer:v219];
        [*(id *)(*((void *)this + 32) + 392) setInstanceBufferOffset:v227];
        [*(id *)(*((void *)this + 32) + 392) setTransformBuffer:v216];
        [*(id *)(*((void *)this + 32) + 392) setTransformBufferOffset:v224];
        [*(id *)(*((void *)this + 32) + 392) setMaskBuffer:v214];
        [*(id *)(*((void *)this + 32) + 392) setMaskBufferOffset:v221];

        if (v262[2] && v263) {
          (*(void (**)(void))(*(void *)v262[2] + 40))();
        }
        uint64_t v4 = v230;
        a2 = v243;
        long long v25 = v246;
      }
      else
      {
LABEL_143:
        uint64_t v135 = *((void *)this + 32);
        uint64_t v136 = *(void **)(v135 + 392);
        *(void *)(v135 + 392) = 0;
      }
      if (v249[0] && v252) {
        (*(void (**)(void))(*(void *)v249[0] + 40))();
      }
      if (v253 && v257) {
        (*(void (**)(void))(*v253 + 40))();
      }
      re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)v258);
      id v41 = this;
      goto LABEL_151;
    }
    unint64_t v32 = 4 * (int)v27;
    re::FrameContext::perFrameAlloc(*(re::FrameContext **)a2, v32, 4uLL, (uint64_t)v264);
    unint64_t v19 = *(void *)v264;
    uint64_t v231 = *(unsigned int *)&v264[8];
    unint64_t v31 = *(unsigned int *)&v264[12];
    uint64_t v222 = *(void *)&v264[16];
    re::FrameContext::perFrameAlloc(*(re::FrameContext **)a2, (uint64_t)(int)v27 << 6, 0x10uLL, (uint64_t)v264);
    uint64_t v113 = *(void *)v264;
    uint64_t v225 = *(unsigned int *)&v264[8];
    unint64_t v114 = *(unsigned int *)&v264[12];
    uint64_t v217 = *(void *)&v264[16];
    long long v244 = a2;
    *(int32x2_t *)&double v116 = re::FrameContext::perFrameAlloc(*(re::FrameContext **)a2, v32, 4uLL, (uint64_t)v264);
    uint64_t v228 = *(unsigned int *)&v264[8];
    uint64_t v220 = *(void *)&v264[16];
    if ((int)v25 < 1)
    {
LABEL_142:
      objc_msgSend(*(id *)(*((void *)this + 32) + 392), "setInstanceBuffer:", v222, v116);
      [*(id *)(*((void *)this + 32) + 392) setInstanceBufferOffset:v231];
      [*(id *)(*((void *)this + 32) + 392) setTransformBuffer:v217];
      [*(id *)(*((void *)this + 32) + 392) setTransformBufferOffset:v225];
      [*(id *)(*((void *)this + 32) + 392) setMaskBuffer:v220];
      [*(id *)(*((void *)this + 32) + 392) setMaskBufferOffset:v228];
      a2 = v244;
      long long v25 = v246;
      id v41 = this;
      goto LABEL_151;
    }
    a2 = 0;
    LODWORD(v53) = 0;
    unint64_t v241 = v114 >> 6;
    unint64_t v242 = v31 >> 2;
    uint64_t v237 = *(void *)v264 + *(unsigned int *)&v264[8];
    unint64_t v240 = (unint64_t)*(unsigned int *)&v264[12] >> 2;
    uint64_t v234 = v113 + v225;
    unint64_t v27 = v19 + v231;
    unint64_t v20 = 1;
    while (1)
    {
      unint64_t v117 = v23[10];
      if (v117 <= (unint64_t)a2) {
        break;
      }
      unint64_t v118 = v23[14];
      if (v118 <= (unint64_t)a2) {
        goto LABEL_257;
      }
      unint64_t v19 = *(unsigned int *)(v23[9] + 16 * (void)a2 + 8);
      uint64_t v119 = objc_msgSend(*(id *)(*((void *)this + 32) + 232), "objectAtIndexedSubscript:", *(int *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(*((void *)this + 32) + 248, (uint64_t *)(v23[13] + 8 * (void)a2)));
      if ((int)v19 >= 1)
      {
        uint64_t v121 = 0;
        unint64_t v32 = 0;
        LODWORD(v122) = v242 - v53;
        if (v242 >= v53) {
          uint64_t v122 = v122;
        }
        else {
          uint64_t v122 = 0;
        }
        LODWORD(v123) = v241 - v53;
        if (v241 >= v53) {
          uint64_t v123 = v123;
        }
        else {
          uint64_t v123 = 0;
        }
        LODWORD(v124) = v240 - v53;
        if (v240 >= v53) {
          uint64_t v124 = v124;
        }
        else {
          uint64_t v124 = 0;
        }
        uint64_t v125 = v234 + ((uint64_t)(int)v53 << 6);
        do
        {
          if (v122 == v32) {
            goto LABEL_220;
          }
          *(_DWORD *)(v27 + 4 * (int)v53 + 4 * v32) = a2;
          unint64_t v126 = v23[10];
          if (v126 <= (unint64_t)a2)
          {
LABEL_221:
            re::internal::assertLog((re::internal *)6, v120, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, a2, v126);
            _os_crash();
            __break(1u);
LABEL_222:
            re::internal::assertLog((re::internal *)6, v128, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v32, v128);
            _os_crash();
            __break(1u);
LABEL_223:
            re::internal::assertLog((re::internal *)6, v128, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v32 + (int)v53, v241);
            _os_crash();
            __break(1u);
LABEL_224:
            re::internal::assertLog((re::internal *)6, (uint64_t)v130, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v32 + (int)v53, v240);
            _os_crash();
            __break(1u);
LABEL_225:
            *(void *)&v258[0] = 0;
            memset(v264, 0, 80);
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            LODWORD(v262[0]) = 136315906;
            *(uint64_t *)((char *)v262 + 4) = (uint64_t)"operator[]";
            WORD2(v262[1]) = 1024;
            *(_DWORD *)((char *)&v262[1] + 6) = 789;
            WORD1(v262[2]) = 2048;
            *(uint64_t *)((char *)&v262[2] + 4) = v32 + (int)v53;
            WORD2(v262[3]) = 2048;
            *(uint64_t *)((char *)&v262[3] + 6) = v31;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
            goto LABEL_226;
          }
          uint64_t v127 = v23[9];
          unint64_t v128 = *(void *)(v127 + 16 * (void)a2 + 8);
          if (v128 <= v32) {
            goto LABEL_222;
          }
          if (v123 == v32) {
            goto LABEL_223;
          }
          uint64_t v129 = (long long *)(*(void *)(v127 + 16 * (void)a2) + v121);
          uint64_t v130 = (_OWORD *)(v125 + v121);
          long long v131 = *v129;
          long long v132 = v129[1];
          long long v133 = v129[3];
          v130[2] = v129[2];
          v130[3] = v133;
          *uint64_t v130 = v131;
          v130[1] = v132;
          if (v124 == v32) {
            goto LABEL_224;
          }
          *(_DWORD *)(v237 + 4 * (int)v53 + 4 * v32) = 1;
          uint64_t v134 = *((void *)this + 32);
          unint64_t v31 = *(void *)(v134 + 504);
          if (v31 <= (int)v53 + v32) {
            goto LABEL_225;
          }
          uint64_t v120 = v125 + v121;
          *(_OWORD *)(*(void *)(v134 + 520) + 16 * (int)v53 + 16 * v32++) = *(_OWORD *)(v125 + v121 + 48);
          v121 += 64;
        }
        while (v19 != v32);
        LODWORD(v53) = v53 + v32;
      }

      a2 = (re::RenderGraphContext *)((char *)a2 + 1);
      if (a2 == v246) {
        goto LABEL_142;
      }
    }
LABEL_256:
    re::internal::assertLog((re::internal *)6, *(void *)&v115, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, a2, v117);
    _os_crash();
    __break(1u);
LABEL_257:
    re::internal::assertLog((re::internal *)6, *(void *)&v115, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, a2, v118);
    _os_crash();
    __break(1u);
LABEL_258:
    re::internal::assertLog((re::internal *)6, v185, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v20, v189);
    _os_crash();
    __break(1u);
    goto LABEL_259;
  }
LABEL_151:
  if (*(void *)(*((void *)v41 + 32) + 392))
  {
    uint64_t v137 = v41;
    unint64_t v20 = (unint64_t)objc_retain(*(id *)(re::DrawingManager::currentCommandBuffer(*(re::DrawingManager **)(*((void *)a2 + 1) + 104))
                                              + 16));
    if ((int)v25 >= 1)
    {
      unint64_t v27 = 0;
      do
      {
        unint64_t v139 = v23[14];
        if (v139 <= v27) {
          goto LABEL_237;
        }
        uint64_t v140 = (int *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(*((void *)v137 + 32) + 248, (uint64_t *)(v23[13] + 8 * v27));
        if (v140)
        {
          unint64_t v32 = *v140;
          if ([*(id *)(*((void *)v137 + 32) + 232) count] > v32)
          {
            unint64_t v32 = [*(id *)(*((void *)v137 + 32) + 232) objectAtIndexedSubscript:v32];
            [(id)v32 setVertexBuffer:v23[1]];
            unint64_t v142 = v23[6];
            if (v142 <= v27) {
              goto LABEL_241;
            }
            [(id)v32 setVertexBufferOffset:*(unsigned int *)(v23[5] + 4 * v27) + (unint64_t)*((unsigned int *)v23 + 4)];
            [(id)v32 setIndexBuffer:v23[3]];
            unint64_t v144 = v23[8];
            if (v144 <= v27) {
              goto LABEL_242;
            }
            [(id)v32 setIndexBufferOffset:*(unsigned int *)(v23[7] + 4 * v27) + (unint64_t)*((unsigned int *)v23 + 8)];
            unint64_t v146 = v23[12];
            if (v146 <= v27) {
              goto LABEL_243;
            }
            if (*(unsigned char *)(v23[11] + v27))
            {
              re::RenderGraphContext::makeComputeCommandEncoder(a2, 0, (id *)v264);
              re::RenderGraphContext::finishEncoding<re::mtl::ComputeCommandEncoder>(*((void **)a2 + 4), (id *)v264);

              [(id)v32 encodeRefitToCommandBuffer:v20];
            }
          }
        }
      }
      while ((re::RenderGraphContext *)++v27 != v25);
    }
    re::RenderGraphContext::makeComputeCommandEncoder(a2, 0, (id *)v264);
    re::RenderGraphContext::finishEncoding<re::mtl::ComputeCommandEncoder>(*((void **)a2 + 4), (id *)v264);

    [*(id *)(*((void *)v137 + 32) + 392) encodeRefitToCommandBuffer:v20];
  }
LABEL_165:
  std::mutex::unlock(v4);
}

uint64_t re::HashTable<unsigned long long,int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add<int &>(uint64_t result, uint64_t *a2, _DWORD *a3)
{
  uint64_t v5 = result;
  uint64_t v6 = *a2;
  unint64_t v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  unint64_t v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (*(void *)result)
  {
    unint64_t v9 = v8 % *(unsigned int *)(result + 24);
    uint64_t v10 = *(unsigned int *)(*(void *)(result + 8) + 4 * v9);
    if (v10 != 0x7FFFFFFF)
    {
      uint64_t v11 = *(void *)(result + 16);
      if (*(void *)(v11 + 32 * v10 + 16) == v6) {
        return result;
      }
      while (1)
      {
        uint64_t v10 = *(_DWORD *)(v11 + 32 * v10 + 8) & 0x7FFFFFFF;
        if (v10 == 0x7FFFFFFF) {
          break;
        }
        if (*(void *)(v11 + 32 * v10 + 16) == v6) {
          return result;
        }
      }
    }
  }
  else
  {
    LODWORD(v9) = 0;
  }
  double result = re::HashTable<unsigned long long,int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(result, v9, v8, a2, a3);
  ++*(_DWORD *)(v5 + 40);
  return result;
}

void re::RenderGraphContext::finishEncoding<re::mtl::ComputeCommandEncoder>(void *a1, id *a2)
{
  if (*a2)
  {
    re::RenderGraphResourceAllocationManager::onReleaseEncoder<re::mtl::ComputeCommandEncoder>(a1, (void **)a2);
    [*a2 endEncoding];
    uint64_t v3 = *a2;
    *a2 = 0;
  }
}

uint64_t re::HashTable<unsigned long long,int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::operator=(uint64_t a1, uint64_t *a2)
{
  if ((uint64_t *)a1 != a2)
  {
    uint64_t v4 = *(void *)a1;
    uint64_t v5 = *a2;
    if (*(void *)a1) {
      BOOL v6 = v4 == v5;
    }
    else {
      BOOL v6 = 1;
    }
    if (v6)
    {
      *(void *)a1 = v5;
      *a2 = v4;
      uint64_t v7 = *(void *)(a1 + 8);
      *(void *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = a2[1];
      a2[1] = v7;
      uint64_t v8 = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = a2[2];
      a2[2] = v8;
      LODWORD(vre::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_DWORD *)(a1 + 24);
      *(_DWORD *)(a1 + 24) = *((_DWORD *)a2 + 6);
      *((_DWORD *)a2 + 6) = v8;
      LODWORD(vre::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_DWORD *)(a1 + 28);
      *(_DWORD *)(a1 + 2re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *((_DWORD *)a2 + 7);
      *((_DWORD *)a2 + 7) = v8;
      LODWORD(vre::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_DWORD *)(a1 + 32);
      *(_DWORD *)(a1 + 32) = *((_DWORD *)a2 + 8);
      *((_DWORD *)a2 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v8;
      LODWORD(vre::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_DWORD *)(a1 + 36);
      *(_DWORD *)(a1 + 36) = *((_DWORD *)a2 + 9);
      *((_DWORD *)a2 + 9) = v8;
    }
    else
    {
      re::HashTable<void *,unsigned int,re::Hash<void *>,re::EqualTo<void *>,true,false>::clear(a1);
      if (v5)
      {
        unsigned int v9 = *((_DWORD *)a2 + 7);
        if (*(_DWORD *)(a1 + 24) < v9) {
          re::HashTable<unsigned long long,int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(a1, v9);
        }
        unint64_t v10 = *((unsigned int *)a2 + 8);
        if (v10)
        {
          uint64_t v11 = 0;
          for (unint64_t i = 0; i < v10; ++i)
          {
            unint64_t v13 = (uint64_t *)(a2[2] + v11);
            if ((v13[1] & 0x80000000) != 0)
            {
              unint64_t v14 = *v13;
              unint64_t v15 = *(unsigned int *)(a1 + 24);
              unint64_t v16 = *v13 % v15;
              uint64_t v17 = *(unsigned int *)(a1 + 36);
              if (v17 == 0x7FFFFFFF)
              {
                uint64_t v17 = *(unsigned int *)(a1 + 32);
                int v18 = v17;
                if (v17 == v15)
                {
                  re::HashTable<unsigned long long,int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
                  unint64_t v16 = v14 % *(unsigned int *)(a1 + 24);
                  int v18 = *(_DWORD *)(a1 + 32);
                }
                *(_DWORD *)(a1 + 32) = v18 + 1;
                uint64_t v19 = *(void *)(a1 + 16);
                int v20 = *(_DWORD *)(v19 + 32 * v17 + 8);
              }
              else
              {
                uint64_t v19 = *(void *)(a1 + 16);
                int v20 = *(_DWORD *)(v19 + 32 * v17 + 8);
                *(_DWORD *)(a1 + 36) = v20 & 0x7FFFFFFF;
              }
              *(_DWORD *)(v19 + 32 * v17 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v20 | 0x80000000;
              uint64_t v21 = *(void *)(a1 + 8);
              *(_DWORD *)(*(void *)(a1 + 16) + 32 * v17 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 32 * v17 + 8) & 0x80000000 | *(_DWORD *)(v21 + 4 * v16);
              *(void *)(*(void *)(a1 + 16) + 32 * v17) = v14;
              *(void *)(*(void *)(a1 + 16) + 32 * v17 + 16) = v13[2];
              *(_DWORD *)(*(void *)(a1 + 16) + 32 * v17 + 24) = *((_DWORD *)v13 + 6);
              *(_DWORD *)(v21 + 4 * v16) = v17;
              ++*(_DWORD *)(a1 + 28);
              unint64_t v10 = *((unsigned int *)a2 + 8);
            }
            v11 += 32;
          }
        }
        ++*(_DWORD *)(a1 + 40);
      }
    }
  }
  return a1;
}

uint64_t re::internal::Callable<re::RayTracedAmbientOcclusionAccelerationStructureNode::execute(re::RenderGraphContext &)::{lambda(re::mtl::CommandBuffer const&)#1},void ()(re::mtl::CommandBuffer const&)>::~Callable(uint64_t a1)
{
  return a1;
}

void re::internal::Callable<re::RayTracedAmbientOcclusionAccelerationStructureNode::execute(re::RenderGraphContext &)::{lambda(re::mtl::CommandBuffer const&)#1},void ()(re::mtl::CommandBuffer const&)>::~Callable(uint64_t a1)
{
  JUMPOUT(0x237DBCBD0);
}

void re::internal::Callable<re::RayTracedAmbientOcclusionAccelerationStructureNode::execute(re::RenderGraphContext &)::{lambda(re::mtl::CommandBuffer const&)#1},void ()(re::mtl::CommandBuffer const&)>::operator()(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = (std::mutex *)(*(void *)(v2 + 256) + 568);
  std::mutex::lock(v3);
  [*(id *)(a1 + 16) rebuild];
  [*(id *)(*(void *)(v2 + 256) + 232) addObject:*(void *)(a1 + 16)];
  std::mutex::unlock(v3);
}

uint64_t re::internal::Callable<re::RayTracedAmbientOcclusionAccelerationStructureNode::execute(re::RenderGraphContext &)::{lambda(re::mtl::CommandBuffer const&)#1},void ()(re::mtl::CommandBuffer const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void **)(a1 + 16);
  *(void *)a2 = &unk_26E71E3A0;
  *(void *)(a2 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v4;
  *(void *)(a2 + 16) = v5;
  *(_DWORD *)(a2 + 24) = *(_DWORD *)(a1 + 24);
  return a2;
}

uint64_t re::internal::Callable<re::RayTracedAmbientOcclusionAccelerationStructureNode::execute(re::RenderGraphContext &)::{lambda(re::mtl::CommandBuffer const&)#1},void ()(re::mtl::CommandBuffer const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E71E3A0;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)(a2 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v2;
  *(_DWORD *)(a2 + 24) = *(_DWORD *)(a1 + 24);
  return a2;
}

uint64_t re::internal::Callable<re::RayTracedAmbientOcclusionAccelerationStructureNode::execute(re::RenderGraphContext &)::{lambda(re::mtl::CommandBuffer const&)#1},void ()(re::mtl::CommandBuffer const&)>::size()
{
  return 32;
}

void re::internal::Callable<re::RayTracedAmbientOcclusionAccelerationStructureNode::execute(re::RenderGraphContext &)::{lambda(re::mtl::CommandBuffer const&)#2},void ()(re::mtl::CommandBuffer const&)>::~Callable()
{
}

void re::internal::Callable<re::RayTracedAmbientOcclusionAccelerationStructureNode::execute(re::RenderGraphContext &)::{lambda(re::mtl::CommandBuffer const&)#2},void ()(re::mtl::CommandBuffer const&)>::operator()(uint64_t a1)
{
  uint64_t v65 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = (std::mutex *)(*(void *)(v2 + 256) + 568);
  std::mutex::lock(v3);
  unint64_t v4 = *(int *)(a1 + 16);
  uint64_t v50 = 0;
  v47[1] = 0;
  unint64_t v48 = 0;
  int v49 = 0;
  BOOL v6 = (_anonymous_namespace_ *)re::DynamicArray<REResourceSharingClientObject * {__strong}>::setCapacity(v47, v4);
  ++v49;
  unint64_t v7 = *(int *)(a1 + 16);
  uint64_t v46 = 0;
  v43[1] = 0;
  unint64_t v44 = 0;
  int v45 = 0;
  uint64_t v8 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegisterId<int>>::setCapacity(v43, v7);
  ++v45;
  unint64_t v9 = *(int *)(a1 + 16);
  uint64_t v42 = 0;
  v39[1] = 0;
  uint64_t v40 = 0;
  int v41 = 0;
  unint64_t v10 = (_anonymous_namespace_ *)re::DynamicArray<REResourceSharingClientObject * {__strong}>::setCapacity(v39, v9);
  ++v41;
  unint64_t v11 = *(int *)(a1 + 16);
  uint64_t v38 = 0;
  v35[1] = 0;
  unint64_t v36 = 0;
  int v37 = 0;
  re::DynamicArray<re::EvaluationRegisterId<int>>::setCapacity(v35, v11);
  ++v37;
  if (*(int *)(a1 + 16) >= 1)
  {
    unint64_t v13 = 0;
    unint64_t v14 = 0;
    while (1)
    {
      unint64_t v15 = *(void *)(a1 + 136);
      if (v15 <= (unint64_t)v14) {
        break;
      }
      unint64_t v16 = objc_msgSend(*(id *)(*(void *)(v2 + 256) + 232), "objectAtIndexedSubscript:", *(int *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(*(void *)(v2 + 256) + 248, (uint64_t *)((char *)&v13->__m_.__sig + *(void *)(a1 + 128))));
      uint64_t v17 = [v16 vertexBuffer];
      id v34 = v17;
      re::DynamicArray<REResourceSharingClientObject * {__strong}>::add((uint64_t)v47, &v34);

      *(void *)&long long v60 = [v16 vertexBufferOffset];
      re::DynamicArray<unsigned long>::add(v43, &v60);
      int v18 = [v16 indexBuffer];
      id v33 = v18;
      re::DynamicArray<REResourceSharingClientObject * {__strong}>::add((uint64_t)v39, &v33);

      *(void *)&long long v60 = [v16 indexBufferOffset];
      re::DynamicArray<unsigned long>::add(v35, &v60);
      [v16 setVertexBuffer:*(void *)(a1 + 32)];
      unint64_t v20 = *(void *)(a1 + 72);
      if (v20 <= (unint64_t)v14) {
        goto LABEL_23;
      }
      [v16 setVertexBufferOffset:*(unsigned int *)(*(void *)(a1 + 64) + 4 * (void)v14) + (unint64_t)*(unsigned int *)(a1 + 40)];
      [v16 setIndexBuffer:*(void *)(a1 + 48)];
      unint64_t v22 = *(void *)(a1 + 88);
      if (v22 <= (unint64_t)v14) {
        goto LABEL_24;
      }
      [v16 setIndexBufferOffset:*(unsigned int *)(*(void *)(a1 + 80) + 4 * (void)v14) + (unint64_t)*(unsigned int *)(a1 + 56)];

      unint64_t v14 = (std::mutex *)((char *)v14 + 1);
      unint64_t v13 = (std::mutex *)((char *)v13 + 8);
      if ((uint64_t)v14 >= *(int *)(a1 + 16)) {
        goto LABEL_7;
      }
    }
    re::internal::assertLog((re::internal *)6, v12, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v14, v15);
    _os_crash();
    __break(1u);
LABEL_23:
    re::internal::assertLog((re::internal *)6, v19, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v14, v20);
    _os_crash();
    __break(1u);
LABEL_24:
    re::internal::assertLog((re::internal *)6, v21, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v14, v22);
    _os_crash();
    __break(1u);
LABEL_25:
    re::internal::assertLog((re::internal *)6, v23, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v14, v27);
    _os_crash();
    __break(1u);
LABEL_26:
    uint64_t v51 = 0;
    long long v63 = 0u;
    long long v64 = 0u;
    long long v61 = 0u;
    long long v62 = 0u;
    long long v60 = 0u;
    int v30 = (std::mutex *)&_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v52 = 136315906;
    uint64_t v53 = "operator[]";
    __int16 v54 = 1024;
    int v55 = 789;
    __int16 v56 = 2048;
    unint64_t v57 = v13;
    __int16 v58 = 2048;
    unint64_t v59 = v13;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_27:
    uint64_t v51 = 0;
    long long v63 = 0u;
    long long v64 = 0u;
    long long v61 = 0u;
    long long v62 = 0u;
    long long v60 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v52 = 136315906;
    uint64_t v53 = "operator[]";
    __int16 v54 = 1024;
    int v55 = 789;
    __int16 v56 = 2048;
    unint64_t v57 = v14;
    __int16 v58 = 2048;
    unint64_t v59 = v30;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_28:
    uint64_t v51 = 0;
    long long v63 = 0u;
    long long v64 = 0u;
    long long v61 = 0u;
    long long v62 = 0u;
    long long v60 = 0u;
    unint64_t v31 = (std::mutex *)&_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v52 = 136315906;
    uint64_t v53 = "operator[]";
    __int16 v54 = 1024;
    int v55 = 789;
    __int16 v56 = 2048;
    unint64_t v57 = v3;
    __int16 v58 = 2048;
    unint64_t v59 = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_29:
    uint64_t v51 = 0;
    long long v63 = 0u;
    long long v64 = 0u;
    long long v61 = 0u;
    long long v62 = 0u;
    long long v60 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v52 = 136315906;
    uint64_t v53 = "operator[]";
    __int16 v54 = 1024;
    int v55 = 789;
    __int16 v56 = 2048;
    unint64_t v57 = v14;
    __int16 v58 = 2048;
    unint64_t v59 = v31;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
LABEL_7:
  unint64_t v32 = v3;
  [*(id *)(*(void *)(v2 + 256) + 400) rebuild];
  if (*(int *)(a1 + 16) >= 1)
  {
    uint64_t v24 = 0;
    unint64_t v14 = 0;
    unint64_t v13 = v48;
    uint64_t v25 = v50;
    uint64_t v3 = v40;
    uint64_t v26 = v42;
    do
    {
      unint64_t v27 = *(void *)(a1 + 136);
      if (v27 <= (unint64_t)v14) {
        goto LABEL_25;
      }
      long long v28 = objc_msgSend(*(id *)(*(void *)(v2 + 256) + 232), "objectAtIndexedSubscript:", *(int *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(*(void *)(v2 + 256) + 248, (uint64_t *)(*(void *)(a1 + 128) + v24)));
      if (v13 == v14) {
        goto LABEL_26;
      }
      uint64_t v29 = v28;
      [v28 setVertexBuffer:*(void *)(v25 + 8 * (void)v14)];
      int v30 = (std::mutex *)v44;
      if (v44 <= (unint64_t)v14) {
        goto LABEL_27;
      }
      [v29 setVertexBufferOffset:*(void *)(v46 + 8 * (void)v14)];
      if (v3 == v14) {
        goto LABEL_28;
      }
      [v29 setIndexBuffer:*(void *)(v26 + 8 * (void)v14)];
      unint64_t v31 = (std::mutex *)v36;
      if (v36 <= (unint64_t)v14) {
        goto LABEL_29;
      }
      [v29 setIndexBufferOffset:*(void *)(v38 + 8 * (void)v14)];

      unint64_t v14 = (std::mutex *)((char *)v14 + 1);
      v24 += 8;
    }
    while ((uint64_t)v14 < *(int *)(a1 + 16));
  }
  if (v35[0] && v38) {
    (*(void (**)(void))(*(void *)v35[0] + 40))();
  }
  re::DynamicArray<re::ObjCObject>::deinit((uint64_t)v39);
  if (v43[0] && v46) {
    (*(void (**)(void))(*(void *)v43[0] + 40))();
  }
  re::DynamicArray<re::ObjCObject>::deinit((uint64_t)v47);
  std::mutex::unlock(v32);
}

uint64_t re::internal::Callable<re::RayTracedAmbientOcclusionAccelerationStructureNode::execute(re::RenderGraphContext &)::{lambda(re::mtl::CommandBuffer const&)#2},void ()(re::mtl::CommandBuffer const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E71E3F8;
  *(_OWORD *)(a2 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_OWORD *)(a1 + 8);
  long long v2 = *(_OWORD *)(a1 + 24);
  long long v3 = *(_OWORD *)(a1 + 40);
  long long v4 = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 56) = v4;
  *(_OWORD *)(a2 + 40) = v3;
  *(_OWORD *)(a2 + 24) = v2;
  long long v5 = *(_OWORD *)(a1 + 88);
  long long v6 = *(_OWORD *)(a1 + 104);
  long long v7 = *(_OWORD *)(a1 + 120);
  *(void *)(a2 + 136) = *(void *)(a1 + 136);
  *(_OWORD *)(a2 + 120) = v7;
  *(_OWORD *)(a2 + 104) = v6;
  *(_OWORD *)(a2 + 8re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v5;
  return a2;
}

uint64_t re::internal::Callable<re::RayTracedAmbientOcclusionAccelerationStructureNode::execute(re::RenderGraphContext &)::{lambda(re::mtl::CommandBuffer const&)#2},void ()(re::mtl::CommandBuffer const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E71E3F8;
  *(_OWORD *)(a2 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_OWORD *)(a1 + 8);
  long long v2 = *(_OWORD *)(a1 + 24);
  long long v3 = *(_OWORD *)(a1 + 40);
  long long v4 = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 56) = v4;
  *(_OWORD *)(a2 + 40) = v3;
  *(_OWORD *)(a2 + 24) = v2;
  long long v5 = *(_OWORD *)(a1 + 88);
  long long v6 = *(_OWORD *)(a1 + 104);
  long long v7 = *(_OWORD *)(a1 + 120);
  *(void *)(a2 + 136) = *(void *)(a1 + 136);
  *(_OWORD *)(a2 + 120) = v7;
  *(_OWORD *)(a2 + 104) = v6;
  *(_OWORD *)(a2 + 8re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v5;
  return a2;
}

uint64_t re::internal::Callable<re::RayTracedAmbientOcclusionAccelerationStructureNode::execute(re::RenderGraphContext &)::{lambda(re::mtl::CommandBuffer const&)#2},void ()(re::mtl::CommandBuffer const&)>::size()
{
  return 144;
}

void re::RayTracedAmbientOcclusionMaskGenerationNode::~RayTracedAmbientOcclusionMaskGenerationNode(re::RayTracedAmbientOcclusionMaskGenerationNode *this)
{
  *(void *)this = &unk_26E71E228;
  uint64_t v2 = *((void *)this + 32);
  if (v2)
  {

    *((void *)this + 32) = 0;
  }
  re::RenderGraphNode::~RenderGraphNode((id *)this);
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_26E71E228;
  uint64_t v2 = *((void *)this + 32);
  if (v2)
  {

    *((void *)this + 32) = 0;
  }
  re::RenderGraphNode::~RenderGraphNode((id *)this);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::RayTracedAmbientOcclusionMaskGenerationNode::setup(re::RayTracedAmbientOcclusionMaskGenerationNode *this, re::RenderGraphBuilder *a2, re::RenderGraphDataStore *a3)
{
  long long v4 = this;
  uint64_t v12 = *MEMORY[0x263EF8340];
  *(_DWORD *)((char *)&v6 + 3) = 0;
  LODWORD(v6) = 0;
  uint64_t v7 = 2;
  re::RenderGraphBuilder::read((uint64_t)a2, (uint64_t)this + 296, (uint64_t)&v6);
  *(_DWORD *)((char *)&v6 + 3) = 0;
  LODWORD(v6) = 0;
  uint64_t v7 = 2;
  re::RenderGraphBuilder::read((uint64_t)a2, (uint64_t)v4 + 472, (uint64_t)&v6);
  long long v4 = (re::RayTracedAmbientOcclusionMaskGenerationNode *)((char *)v4 + 504);
  *(_DWORD *)((char *)&v6 + 3) = 0;
  LODWORD(v6) = 0;
  uint64_t v7 = 2;
  re::RenderGraphBuilder::read((uint64_t)a2, (uint64_t)v4, (uint64_t)&v6);
  uint64_t v6 = 0x500000000;
  long long v8 = xmmword_23435FBB0;
  __int16 v9 = 0;
  int v10 = 0;
  int v11 = 0;
  return re::RenderGraphBuilder::write((uint64_t)a2, (uint64_t)v4, (uint64_t)&v6);
}

void re::RayTracedAmbientOcclusionMaskGenerationNode::execute(re::RayTracedAmbientOcclusionMaskGenerationNode *this, re::RenderGraphContext *a2)
{
  uint64_t v4 = re::RenderGraphDataStore::tryGet<re::RenderGraphDataStoreWrapper<re::RayTracedAmbientOcclusionExecData>>(*((void *)a2 + 146), *(void *)(*((void *)a2 + 5) + 48));
  id v5 = *(id *)(v4 + 8);
  uint64_t v6 = *(unsigned int *)(v4 + 16);
  re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this + 296, 0, 0, &v15);
  re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this + 472, 0, 0, &v14);
  re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this + 504, 0, 0, &v13);
  uint64_t v7 = (id *)re::DrawingManager::currentCommandBuffer(*(re::DrawingManager **)(*((void *)a2 + 1) + 104));
  re::RenderGraphContext::acquireManagedComputeEncoder((uint64_t)a2, v7, *((re::RenderGraphNodeBase **)a2 + 5), 0, &v12);
  [v12 setComputePipelineState:*(void *)(*((void *)this + 32) + 664)];
  [v12 setBuffer:v5 offset:v6 atIndex:0];
  [v12 setTexture:v15 atIndex:0];
  [v12 setTexture:v14 atIndex:1];
  [v12 setTexture:v13 atIndex:2];
  re::RayTracedAmbientOcclusionNode::computeEncoderDispatch(**(void ***)a2, &v12, (id *)(*((void *)this + 32) + 664), *((_DWORD *)this + 69), *((_DWORD *)this + 70));
  [v12 setComputePipelineState:*(void *)(*((void *)this + 32) + 672)];
  [v12 setTexture:v13 atIndex:0];
  re::RayTracedAmbientOcclusionNode::computeEncoderDispatch(**(void ***)a2, &v12, (id *)(*((void *)this + 32) + 672), *((_DWORD *)this + 69), *((_DWORD *)this + 70));
  [v12 setComputePipelineState:*(void *)(*((void *)this + 32) + 680)];
  [v12 setTexture:v13 atIndex:0];
  uint64_t v8 = *((void *)a2 + 1);
  id v11 = v12;
  re::RenderManager::sampleComputeEncoderMTLCounterBegin(v8, &v11, 1u);

  re::RayTracedAmbientOcclusionNode::computeEncoderDispatch(**(void ***)a2, &v12, (id *)(*((void *)this + 32) + 680), *((_DWORD *)this + 69), *((_DWORD *)this + 70));
  uint64_t v9 = *((void *)a2 + 1);
  id v10 = v12;
  re::RenderManager::sampleComputeEncoderMTLCounterEnd(v9, &v10, 1u);

  if (v13) {
  if (v14)
  }

  if (v15) {
  if (v5)
  }
}

uint64_t re::RayTracedAmbientOcclusionNode::computeEncoderDispatch(void *a1, void **a2, id *a3, unsigned int a4, unsigned int a5)
{
  if ([a1 supportsFamily:1004])
  {
    unsigned int v9 = objc_msgSend(*a3, sel_threadExecutionWidth);
    unsigned int v10 = objc_msgSend(*a3, sel_maxTotalThreadsPerThreadgroup);
    id v11 = *a2;
    uint64_t v16 = a4;
    uint64_t v17 = a5;
    uint64_t v18 = 1;
    v14.i64[0] = v9;
    v14.i64[1] = v10 / v9;
    uint64_t v15 = 1;
    return [v11 dispatchThreads:&v16 threadsPerThreadgroup:&v14];
  }
  else
  {
    id v13 = *a2;
    uint64_t v16 = (a4 + 7) >> 3;
    uint64_t v17 = (a5 + 7) >> 3;
    uint64_t v18 = 1;
    int64x2_t v14 = vdupq_n_s64(8uLL);
    uint64_t v15 = 1;
    return [v13 dispatchThreadgroups:&v16 threadsPerThreadgroup:&v14];
  }
}

uint64_t re::RenderGraphDataStore::tryGet<re::RenderGraphDataStoreWrapper<re::RayTracedAmbientOcclusionExecData>>(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = (unint64_t)"N2re27RenderGraphDataStoreWrapperINS_33RayTracedAmbientOcclusionExecDataEEE";
  if (((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_33RayTracedAmbientOcclusionExecDataEEE" & 0x8000000000000000) != 0)
  {
    long long v3 = (unsigned __int8 *)((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_33RayTracedAmbientOcclusionExecDataEEE" & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v4 = 5381;
    do
    {
      unint64_t v2 = v4;
      unsigned int v5 = *v3++;
      uint64_t v4 = (33 * v4) ^ v5;
    }
    while (v5);
  }
  unint64_t v7 = (a2 + (v2 << 6) + (v2 >> 2) - 0x61C8864680B583E9) ^ v2;
  uint64_t result = re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(a1 + 16, (uint64_t *)&v7);
  if (result) {
    return *(void *)result;
  }
  return result;
}

void re::RayTracedAmbientOcclusionRaysNode::~RayTracedAmbientOcclusionRaysNode(re::RayTracedAmbientOcclusionRaysNode *this)
{
  *(void *)this = &unk_26E71E228;
  uint64_t v2 = *((void *)this + 32);
  if (v2)
  {

    *((void *)this + 32) = 0;
  }
  re::RenderGraphNode::~RenderGraphNode((id *)this);
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_26E71E228;
  uint64_t v2 = *((void *)this + 32);
  if (v2)
  {

    *((void *)this + 32) = 0;
  }
  re::RenderGraphNode::~RenderGraphNode((id *)this);
  JUMPOUT(0x237DBCBD0);
}

void re::RayTracedAmbientOcclusionRaysNode::setup(re::RayTracedAmbientOcclusionRaysNode *this, re::RenderGraphBuilder *a2, re::RenderGraphDataStore *a3)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v5 = 0x500000000;
  long long v7 = xmmword_23435FBB0;
  __int16 v8 = 0;
  int v9 = 0;
  int v10 = 0;
  re::RenderGraphBuilder::write(a2, (uint64_t)this + 584, (uint64_t)&v5);
  *(_DWORD *)((char *)&v5 + 3) = 0;
  LODWORD(v5) = 0;
  uint64_t v6 = 2;
  re::RenderGraphBuilder::read((uint64_t)a2, (uint64_t)this + 504, (uint64_t)&v5);
  *(_DWORD *)((char *)&v5 + 3) = 0;
  LODWORD(v5) = 0;
  uint64_t v6 = 2;
  re::RenderGraphBuilder::read((uint64_t)a2, (uint64_t)this + 472, (uint64_t)&v5);
  *(_DWORD *)((char *)&v5 + 3) = 0;
  LODWORD(v5) = 0;
  uint64_t v6 = 2;
  re::RenderGraphBuilder::read((uint64_t)a2, (uint64_t)this + 488, (uint64_t)&v5);
}

void re::RayTracedAmbientOcclusionRaysNode::execute(re::RayTracedAmbientOcclusionRaysNode *this, re::RenderGraphContext *a2)
{
  uint64_t v4 = re::RenderGraphDataStore::tryGet<re::RenderGraphDataStoreWrapper<re::RayTracedAmbientOcclusionExecData>>(*((void *)a2 + 146), *(void *)(*((void *)a2 + 5) + 48));
  id v5 = *(id *)(v4 + 8);
  uint64_t v6 = *(unsigned int *)(v4 + 16);
  uint64_t v7 = re::RenderGraphContext::metalBuffer((uint64_t)a2, (uint64_t)this + 584);
  id v8 = *(id *)v7;
  uint64_t v9 = *(unsigned int *)(v7 + 8);
  re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this + 504, 0, 0, &v18);
  re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this + 472, 0, 0, &v17);
  re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this + 488, 0, 0, &v16);
  int v10 = (id *)re::DrawingManager::currentCommandBuffer(*(re::DrawingManager **)(*((void *)a2 + 1) + 104));
  re::RenderGraphContext::acquireManagedComputeEncoder((uint64_t)a2, v10, *((re::RenderGraphNodeBase **)a2 + 5), 0, &v15);
  [v15 setComputePipelineState:*(void *)(*((void *)this + 32) + 688)];
  [v15 setBuffer:v5 offset:v6 atIndex:0];
  [v15 setBuffer:v8 offset:v9 atIndex:1];
  [v15 setTexture:v18 atIndex:0];
  [v15 setTexture:v17 atIndex:1];
  [v15 setTexture:v16 atIndex:2];
  uint64_t v11 = *((void *)a2 + 1);
  id v14 = v15;
  re::RenderManager::sampleComputeEncoderMTLCounterBegin(v11, &v14, 1u);

  re::RayTracedAmbientOcclusionNode::computeEncoderDispatch(**(void ***)a2, &v15, (id *)(*((void *)this + 32) + 688), *((_DWORD *)this + 69), *((_DWORD *)this + 70));
  uint64_t v12 = *((void *)a2 + 1);
  id v13 = v15;
  re::RenderManager::sampleComputeEncoderMTLCounterEnd(v12, &v13, 1u);

  if (v16) {
  if (v17)
  }

  if (v18) {
  if (v8)
  }

  if (v5) {
}
  }

void re::RayTracedAmbientOcclusionIntersectionsNode::~RayTracedAmbientOcclusionIntersectionsNode(re::RayTracedAmbientOcclusionIntersectionsNode *this)
{
  *(void *)this = &unk_26E71E228;
  uint64_t v2 = *((void *)this + 32);
  if (v2)
  {

    *((void *)this + 32) = 0;
  }
  re::RenderGraphNode::~RenderGraphNode((id *)this);
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_26E71E228;
  uint64_t v2 = *((void *)this + 32);
  if (v2)
  {

    *((void *)this + 32) = 0;
  }
  re::RenderGraphNode::~RenderGraphNode((id *)this);
  JUMPOUT(0x237DBCBD0);
}

void re::RayTracedAmbientOcclusionIntersectionsNode::setup(re::RayTracedAmbientOcclusionIntersectionsNode *this, re::RenderGraphBuilder *a2, re::RenderGraphDataStore *a3)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  *(_DWORD *)((char *)&v5 + 3) = 0;
  LODWORD(v5) = 0;
  uint64_t v6 = 2;
  re::RenderGraphBuilder::read((uint64_t)a2, (uint64_t)this + 584, (uint64_t)&v5);
  uint64_t v5 = 0x500000000;
  long long v7 = xmmword_23435FBB0;
  __int16 v8 = 0;
  int v9 = 0;
  int v10 = 0;
  re::RenderGraphBuilder::write(a2, (uint64_t)this + 600, (uint64_t)&v5);
  *(_DWORD *)((char *)&v5 + 3) = 0;
  LODWORD(v5) = 0;
  uint64_t v6 = 2;
  re::RenderGraphBuilder::read((uint64_t)a2, (uint64_t)this + 504, (uint64_t)&v5);
  *((unsigned char *)a2 + 593) = 1;
}

void re::RayTracedAmbientOcclusionIntersectionsNode::execute(re::RayTracedAmbientOcclusionIntersectionsNode *this, re::RenderGraphContext *a2)
{
  uint64_t v4 = (std::mutex *)(*((void *)this + 32) + 568);
  std::mutex::lock(v4);
  uint64_t v5 = *(void **)(*((void *)this + 32) + 392);
  if (v5 && [v5 status] == 1)
  {
    id v6 = objc_retain(*(id *)(re::DrawingManager::currentCommandBuffer(*(re::DrawingManager **)(*((void *)a2 + 1)
                                                                                             + 104))
                           + 16));
    uint64_t v7 = re::RenderGraphContext::metalBuffer((uint64_t)a2, (uint64_t)this + 584);
    id v8 = *(id *)v7;
    uint64_t v9 = *(unsigned int *)(v7 + 8);
    uint64_t v10 = re::RenderGraphContext::metalBuffer((uint64_t)a2, (uint64_t)this + 600);
    id v11 = *(id *)v10;
    uint64_t v12 = *(unsigned int *)(v10 + 8);
    re::RenderGraphContext::makeComputeCommandEncoder(a2, 0, &v17);
    re::RenderGraphContext::finishEncoding<re::mtl::ComputeCommandEncoder>(*((void **)a2 + 4), &v17);

    [*(id *)(*((void *)this + 32) + 216) encodeIntersectionToCommandBuffer:v6 intersectionType:1 rayBuffer:v8 rayBufferOffset:v9 intersectionBuffer:v11 intersectionBufferOffset:v12 rayCount:*((void *)this + 36) accelerationStructure:*(void *)(*((void *)this + 32) + 392)];
    if (v11) {

    }
    if (v8) {
  }
    }
  else
  {
    uint64_t v13 = re::RenderGraphContext::metalBuffer((uint64_t)a2, (uint64_t)this + 584);
    id v14 = *(id *)v13;
    uint64_t v15 = *(unsigned int *)(v13 + 8);
    re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this + 504, 0, 0, &v17);
    re::RenderGraphContext::makeComputeCommandEncoder(a2, 0, &v16);
    [v16 setComputePipelineState:*(void *)(*((void *)this + 32) + 696)];
    [v16 setBuffer:v14 offset:v15 atIndex:0];
    [v16 setTexture:v17 atIndex:0];
    re::RayTracedAmbientOcclusionNode::computeEncoderDispatch(**(void ***)a2, &v16, (id *)(*((void *)this + 32) + 696), *((_DWORD *)this + 69), *((_DWORD *)this + 70));
    re::RenderGraphContext::finishEncoding<re::mtl::ComputeCommandEncoder &>((uint64_t)a2, &v16);

    if (v17) {
    if (v14)
    }
  }
  std::mutex::unlock(v4);
}

void re::RayTracedAmbientOcclusionTextureNode::~RayTracedAmbientOcclusionTextureNode(re::RayTracedAmbientOcclusionTextureNode *this)
{
  *(void *)this = &unk_26E71E228;
  uint64_t v2 = *((void *)this + 32);
  if (v2)
  {

    *((void *)this + 32) = 0;
  }
  re::RenderGraphNode::~RenderGraphNode((id *)this);
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_26E71E228;
  uint64_t v2 = *((void *)this + 32);
  if (v2)
  {

    *((void *)this + 32) = 0;
  }
  re::RenderGraphNode::~RenderGraphNode((id *)this);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::RayTracedAmbientOcclusionTextureNode::setup(re::RayTracedAmbientOcclusionTextureNode *this, re::RenderGraphBuilder *a2, re::RenderGraphDataStore *a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  *(_DWORD *)((char *)&v6 + 3) = 0;
  LODWORD(v6) = 0;
  uint64_t v7 = 2;
  re::RenderGraphBuilder::read((uint64_t)a2, (uint64_t)this + 584, (uint64_t)&v6);
  *(_DWORD *)((char *)&v6 + 3) = 0;
  LODWORD(v6) = 0;
  uint64_t v7 = 2;
  re::RenderGraphBuilder::read((uint64_t)a2, (uint64_t)this + 600, (uint64_t)&v6);
  *(_DWORD *)((char *)&v6 + 3) = 0;
  LODWORD(v6) = 0;
  uint64_t v7 = 2;
  re::RenderGraphBuilder::read((uint64_t)a2, (uint64_t)this + 504, (uint64_t)&v6);
  uint64_t v6 = 0x500000000;
  long long v8 = xmmword_23435FBB0;
  __int16 v9 = 0;
  int v10 = 0;
  int v11 = 0;
  return re::RenderGraphBuilder::write((uint64_t)a2, (uint64_t)this + 440, (uint64_t)&v6);
}

void re::RayTracedAmbientOcclusionTextureNode::execute(re::RayTracedAmbientOcclusionTextureNode *this, re::RenderGraphContext *a2)
{
  uint64_t v4 = re::RenderGraphDataStore::tryGet<re::RenderGraphDataStoreWrapper<re::RayTracedAmbientOcclusionExecData>>(*((void *)a2 + 146), *(void *)(*((void *)a2 + 5) + 48));
  id v5 = *(id *)(v4 + 8);
  uint64_t v6 = *(unsigned int *)(v4 + 16);
  uint64_t v7 = re::RenderGraphContext::metalBuffer((uint64_t)a2, (uint64_t)this + 584);
  id v8 = *(id *)v7;
  uint64_t v9 = *(unsigned int *)(v7 + 8);
  uint64_t v10 = re::RenderGraphContext::metalBuffer((uint64_t)a2, (uint64_t)this + 600);
  id v11 = *(id *)v10;
  uint64_t v12 = *(unsigned int *)(v10 + 8);
  re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this + 504, 0, 0, &v24);
  re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this + 440, 0, 0, &v23);
  uint64_t v13 = (id *)re::DrawingManager::currentCommandBuffer(*(re::DrawingManager **)(*((void *)a2 + 1) + 104));
  re::RenderGraphContext::acquireManagedComputeEncoder((uint64_t)a2, v13, *((re::RenderGraphNodeBase **)a2 + 5), 0, &v21);
  id v14 = v21;
  uint64_t v21 = 0;
  unint64_t v22 = v14;

  [v14 setComputePipelineState:*(void *)(*((void *)this + 32) + 704)];
  [v14 setBuffer:v5 offset:v6 atIndex:0];
  [v14 setBuffer:v8 offset:v9 atIndex:1];
  [v14 setBuffer:v11 offset:v12 atIndex:2];
  [v14 setTexture:v24 atIndex:0];
  [v14 setTexture:v23 atIndex:1];
  uint64_t v15 = *((void *)a2 + 1);
  id v16 = v14;
  id v20 = v16;
  re::RenderManager::sampleComputeEncoderMTLCounterBegin(v15, &v20, 1u);

  re::RayTracedAmbientOcclusionNode::computeEncoderDispatch(**(void ***)a2, &v22, (id *)(*((void *)this + 32) + 704), *((_DWORD *)this + 69), *((_DWORD *)this + 70));
  uint64_t v17 = *((void *)a2 + 1);
  id v18 = v16;
  id v19 = v18;
  re::RenderManager::sampleComputeEncoderMTLCounterEnd(v17, &v19, 1u);

  if (v23) {
  if (v24)
  }

  if (v11) {
  if (v8)
  }

  if (v5) {
}
  }

void re::RayTracedAmbientOcclusionGradientBlurNode::~RayTracedAmbientOcclusionGradientBlurNode(re::RayTracedAmbientOcclusionGradientBlurNode *this)
{
  *(void *)this = &unk_26E71E228;
  uint64_t v2 = *((void *)this + 32);
  if (v2)
  {

    *((void *)this + 32) = 0;
  }
  re::RenderGraphNode::~RenderGraphNode((id *)this);
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_26E71E228;
  uint64_t v2 = *((void *)this + 32);
  if (v2)
  {

    *((void *)this + 32) = 0;
  }
  re::RenderGraphNode::~RenderGraphNode((id *)this);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::RayTracedAmbientOcclusionGradientBlurNode::setup(re::RayTracedAmbientOcclusionGradientBlurNode *this, re::RenderGraphBuilder *a2, re::RenderGraphDataStore *a3)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  *(_DWORD *)((char *)&v6 + 3) = 0;
  LODWORD(v6) = 0;
  uint64_t v7 = 2;
  re::RenderGraphBuilder::read((uint64_t)a2, (uint64_t)this + 360, (uint64_t)&v6);
  uint64_t v6 = 0x500000000;
  long long v8 = xmmword_23435FBB0;
  __int16 v9 = 0;
  uint64_t v10 = 0;
  re::RenderGraphBuilder::write((uint64_t)a2, (uint64_t)this + 376, (uint64_t)&v6);
  *(_DWORD *)((char *)&v6 + 3) = 0;
  LODWORD(v6) = 0;
  uint64_t v7 = 2;
  re::RenderGraphBuilder::read((uint64_t)a2, (uint64_t)this + 440, (uint64_t)&v6);
  uint64_t v6 = 0x500000000;
  long long v8 = xmmword_23435FBB0;
  __int16 v9 = 0;
  uint64_t v10 = 0;
  uint64_t result = re::RenderGraphBuilder::write((uint64_t)a2, (uint64_t)this + 392, (uint64_t)&v6);
  *((unsigned char *)a2 + 593) = 1;
  return result;
}

void re::RayTracedAmbientOcclusionGradientBlurNode::execute(re::RayTracedAmbientOcclusionGradientBlurNode *this, re::RenderGraphContext *a2)
{
  uint64_t v4 = *(void **)a2;
  id v5 = objc_retain(*(id *)(re::DrawingManager::currentCommandBuffer(*(re::DrawingManager **)(*((void *)a2 + 1) + 104))
                         + 16));
  re::RayTracedAmbientOcclusionNode::encodeSignalMpsEvent(this, a2, 0);
  id v6 = *(id *)(re::RenderGraphDataStore::tryGet<re::RenderGraphDataStoreWrapper<re::RayTracedAmbientOcclusionExecData>>(*((void *)a2 + 146), *(void *)(*((void *)a2 + 5) + 48))+ 8);
  re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this + 360, 0, 0, &v19);
  re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this + 376, 0, 0, &v18);
  re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this + 440, 0, 0, &v17);
  re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this + 392, 0, 0, &v16);
  id v7 = objc_alloc(MEMORY[0x263F13288]);
  LODWORD(vre::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 3.5;
  __int16 v9 = (void *)[v7 initWithDevice:*v4 sigma:v8];
  re::RayTracedAmbientOcclusionNode::encodeWaitForMpsEvent(this, a2, 0);
  id v10 = v18;
  id v11 = v19;
  id v12 = v5;
  [v9 encodeToCommandBuffer:v12 sourceTexture:v11 destinationTexture:v10];

  id v13 = v16;
  id v14 = v17;
  id v15 = v12;
  [v9 encodeToCommandBuffer:v15 sourceTexture:v14 destinationTexture:v13];

  re::RayTracedAmbientOcclusionNode::encodeSignalMpsEvent(this, a2, 1);
  if (v16) {

  }
  if (v17) {
  if (v18)
  }

  if (v19) {
  if (v6)
  }
}

void re::RayTracedAmbientOcclusionNode::encodeSignalMpsEvent(re::RayTracedAmbientOcclusionNode *this, re::RenderGraphContext *a2, uint64_t a3)
{
  id v6 = objc_retain(*(id *)(re::DrawingManager::currentCommandBuffer(*(re::DrawingManager **)(*((void *)a2 + 1) + 104))
                         + 16));
  [v6 encodeSignalEvent:*(void *)(*((void *)this + 32) + 632) value:2 * (*(void *)(*(void *)a2 + 32) & 0xFFFFFFFFFFFFFFFLL) + a3];
}

void re::RayTracedAmbientOcclusionNode::encodeWaitForMpsEvent(re::RayTracedAmbientOcclusionNode *this, re::RenderGraphContext *a2, uint64_t a3)
{
  id v6 = objc_retain(*(id *)(re::DrawingManager::currentCommandBuffer(*(re::DrawingManager **)(*((void *)a2 + 1) + 104))
                         + 16));
  [v6 encodeWaitForEvent:*(void *)(*((void *)this + 32) + 632) value:2 * (*(void *)(*(void *)a2 + 32) & 0xFFFFFFFFFFFFFFFLL) + a3];
}

void re::RayTracedAmbientOcclusionAccumulationNode::~RayTracedAmbientOcclusionAccumulationNode(re::RayTracedAmbientOcclusionAccumulationNode *this)
{
  *(void *)this = &unk_26E71E228;
  uint64_t v2 = *((void *)this + 32);
  if (v2)
  {

    *((void *)this + 32) = 0;
  }
  re::RenderGraphNode::~RenderGraphNode((id *)this);
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_26E71E228;
  uint64_t v2 = *((void *)this + 32);
  if (v2)
  {

    *((void *)this + 32) = 0;
  }
  re::RenderGraphNode::~RenderGraphNode((id *)this);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::RayTracedAmbientOcclusionAccumulationNode::setup(re::RayTracedAmbientOcclusionAccumulationNode *this, re::RenderGraphBuilder *a2, re::RenderGraphDataStore *a3)
{
  uint64_t v4 = this;
  uint64_t v11 = *MEMORY[0x263EF8340];
  *(_DWORD *)((char *)&v6 + 3) = 0;
  LODWORD(v6) = 0;
  uint64_t v7 = 2;
  re::RenderGraphBuilder::read((uint64_t)a2, (uint64_t)this + 504, (uint64_t)&v6);
  *(_DWORD *)((char *)&v6 + 3) = 0;
  LODWORD(v6) = 0;
  uint64_t v7 = 2;
  re::RenderGraphBuilder::read((uint64_t)a2, (uint64_t)v4 + 344, (uint64_t)&v6);
  *(_DWORD *)((char *)&v6 + 3) = 0;
  LODWORD(v6) = 0;
  uint64_t v7 = 2;
  re::RenderGraphBuilder::read((uint64_t)a2, (uint64_t)v4 + 328, (uint64_t)&v6);
  *(_DWORD *)((char *)&v6 + 3) = 0;
  LODWORD(v6) = 0;
  uint64_t v7 = 2;
  re::RenderGraphBuilder::read((uint64_t)a2, (uint64_t)v4 + 376, (uint64_t)&v6);
  *(_DWORD *)((char *)&v6 + 3) = 0;
  LODWORD(v6) = 0;
  uint64_t v7 = 2;
  re::RenderGraphBuilder::read((uint64_t)a2, (uint64_t)v4 + 360, (uint64_t)&v6);
  *(_DWORD *)((char *)&v6 + 3) = 0;
  LODWORD(v6) = 0;
  uint64_t v7 = 2;
  re::RenderGraphBuilder::read((uint64_t)a2, (uint64_t)v4 + 472, (uint64_t)&v6);
  *(_DWORD *)((char *)&v6 + 3) = 0;
  LODWORD(v6) = 0;
  uint64_t v7 = 2;
  re::RenderGraphBuilder::read((uint64_t)a2, (uint64_t)v4 + 488, (uint64_t)&v6);
  uint64_t v6 = 0x500000000;
  long long v8 = xmmword_23435FBB0;
  __int16 v9 = 0;
  uint64_t v10 = 0;
  re::RenderGraphBuilder::write((uint64_t)a2, (uint64_t)v4 + 424, (uint64_t)&v6);
  *(_DWORD *)((char *)&v6 + 3) = 0;
  LODWORD(v6) = 0;
  uint64_t v7 = 2;
  re::RenderGraphBuilder::read((uint64_t)a2, (uint64_t)v4 + 392, (uint64_t)&v6);
  uint64_t v4 = (re::RayTracedAmbientOcclusionAccumulationNode *)((char *)v4 + 440);
  *(_DWORD *)((char *)&v6 + 3) = 0;
  LODWORD(v6) = 0;
  uint64_t v7 = 2;
  re::RenderGraphBuilder::read((uint64_t)a2, (uint64_t)v4, (uint64_t)&v6);
  uint64_t v6 = 0x500000000;
  long long v8 = xmmword_23435FBB0;
  __int16 v9 = 0;
  uint64_t v10 = 0;
  return re::RenderGraphBuilder::write((uint64_t)a2, (uint64_t)v4, (uint64_t)&v6);
}

void re::RayTracedAmbientOcclusionAccumulationNode::execute(re::RayTracedAmbientOcclusionAccumulationNode *this, re::RenderGraphContext *a2)
{
  re::RayTracedAmbientOcclusionNode::encodeWaitForMpsEvent(this, a2, 1);
  uint64_t v4 = re::RenderGraphDataStore::tryGet<re::RenderGraphDataStoreWrapper<re::RayTracedAmbientOcclusionExecData>>(*((void *)a2 + 146), *(void *)(*((void *)a2 + 5) + 48));
  id v5 = *(id *)(v4 + 8);
  uint64_t v6 = *(unsigned int *)(v4 + 16);
  re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this + 504, 0, 0, &v20);
  re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this + 344, 0, 0, &v19);
  re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this + 328, 0, 0, &v18);
  re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this + 376, 0, 0, &v17);
  re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this + 360, 0, 0, &v16);
  re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this + 472, 0, 0, &v15);
  re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this + 488, 0, 0, &v14);
  re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this + 424, 0, 0, &v13);
  re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this + 392, 0, 0, &v12);
  re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this + 440, 0, 0, &v11);
  uint64_t v7 = (id *)re::DrawingManager::currentCommandBuffer(*(re::DrawingManager **)(*((void *)a2 + 1) + 104));
  re::RenderGraphContext::acquireManagedComputeEncoder((uint64_t)a2, v7, *((re::RenderGraphNodeBase **)a2 + 5), 0, &v9);
  long long v8 = v9;
  __int16 v9 = 0;
  uint64_t v10 = v8;

  [v8 setComputePipelineState:*(void *)(*((void *)this + 32) + 712)];
  [v8 setBuffer:v5 offset:v6 atIndex:0];
  [v8 setTexture:v20 atIndex:0];
  [v8 setTexture:v19 atIndex:1];
  [v8 setTexture:v18 atIndex:2];
  [v8 setTexture:v17 atIndex:3];
  [v8 setTexture:v16 atIndex:4];
  [v8 setTexture:v15 atIndex:5];
  [v8 setTexture:v14 atIndex:6];
  [v8 setTexture:v13 atIndex:7];
  [v8 setTexture:v12 atIndex:8];
  [v8 setTexture:v11 atIndex:9];
  re::RayTracedAmbientOcclusionNode::computeEncoderDispatch(**(void ***)a2, &v10, (id *)(*((void *)this + 32) + 712), *((_DWORD *)this + 69), *((_DWORD *)this + 70));

  if (v11) {
  if (v12)
  }

  if (v13) {
  if (v14)
  }

  if (v15) {
  if (v16)
  }

  if (v17) {
  if (v18)
  }

  if (v19) {
  if (v20)
  }

  if (v5) {
}
  }

void re::RayTracedAmbientOcclusionDenoisingNode::~RayTracedAmbientOcclusionDenoisingNode(re::RayTracedAmbientOcclusionDenoisingNode *this)
{
  *(void *)this = &unk_26E71E228;
  uint64_t v2 = *((void *)this + 32);
  if (v2)
  {

    *((void *)this + 32) = 0;
  }
  re::RenderGraphNode::~RenderGraphNode((id *)this);
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_26E71E228;
  uint64_t v2 = *((void *)this + 32);
  if (v2)
  {

    *((void *)this + 32) = 0;
  }
  re::RenderGraphNode::~RenderGraphNode((id *)this);
  JUMPOUT(0x237DBCBD0);
}

void re::RayTracedAmbientOcclusionDenoisingNode::setup(re::RayTracedAmbientOcclusionDenoisingNode *this, re::RenderGraphBuilder *a2, re::RenderGraphDataStore *a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  *(_DWORD *)((char *)&v6 + 3) = 0;
  LODWORD(v6) = 0;
  uint64_t v7 = 2;
  re::RenderGraphBuilder::read((uint64_t)a2, (uint64_t)this + 504, (uint64_t)&v6);
  *(_DWORD *)((char *)&v6 + 3) = 0;
  LODWORD(v6) = 0;
  uint64_t v7 = 2;
  re::RenderGraphBuilder::read((uint64_t)a2, (uint64_t)this + 472, (uint64_t)&v6);
  *(_DWORD *)((char *)&v6 + 3) = 0;
  LODWORD(v6) = 0;
  uint64_t v7 = 2;
  re::RenderGraphBuilder::read((uint64_t)a2, (uint64_t)this + 488, (uint64_t)&v6);
  *(_DWORD *)((char *)&v6 + 3) = 0;
  LODWORD(v6) = 0;
  uint64_t v7 = 2;
  re::RenderGraphBuilder::read((uint64_t)a2, (uint64_t)this + 424, (uint64_t)&v6);
  if (*((unsigned char *)this + 619))
  {
    *(_DWORD *)((char *)&v6 + 3) = 0;
    LODWORD(v6) = 0;
    uint64_t v7 = 2;
    re::RenderGraphBuilder::read((uint64_t)a2, (uint64_t)this + 440, (uint64_t)&v6);
    id v5 = (char *)this + 376;
  }
  else
  {
    *(_DWORD *)((char *)&v6 + 3) = 0;
    LODWORD(v6) = 0;
    uint64_t v7 = 2;
    re::RenderGraphBuilder::read((uint64_t)a2, (uint64_t)this + 376, (uint64_t)&v6);
    id v5 = (char *)this + 440;
  }
  uint64_t v6 = 0x500000000;
  long long v8 = xmmword_23435FBB0;
  __int16 v9 = 0;
  int v10 = 0;
  int v11 = 0;
  re::RenderGraphBuilder::write((uint64_t)a2, (uint64_t)v5, (uint64_t)&v6);
  if (!*((_WORD *)this + 308))
  {
    *(_DWORD *)((char *)&v6 + 3) = 0;
    LODWORD(v6) = 0;
    uint64_t v7 = 2;
    re::RenderGraphBuilder::read((uint64_t)a2, (uint64_t)this + 360, (uint64_t)&v6);
  }
  *((unsigned char *)a2 + 593) = 1;
}

void re::RayTracedAmbientOcclusionDenoisingNode::execute(re::RayTracedAmbientOcclusionDenoisingNode *this, re::RenderGraphContext *a2)
{
  uint64_t v4 = re::RenderGraphDataStore::tryGet<re::RenderGraphDataStoreWrapper<re::RayTracedAmbientOcclusionExecData>>(*((void *)a2 + 146), *(void *)(*((void *)a2 + 5) + 48));
  id v5 = *(id *)(v4 + 8);
  uint64_t v6 = *(unsigned int *)(v4 + 16);
  re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this + 504, 0, 0, &v22);
  re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this + 472, 0, 0, &v21);
  re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this + 488, 0, 0, &v20);
  re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this + 424, 0, 0, &v19);
  re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this + 440, 0, 0, &v18);
  re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this + 376, 0, 0, &v17);
  int v16 = 0;
  LOWORD(v16) = *((_WORD *)this + 308);
  BYTE2(v16) = *((unsigned char *)this + 618);
  re::RenderGraphContext::makeComputeCommandEncoder(a2, 0, &v15);
  [v15 setComputePipelineState:*(void *)(*((void *)this + 32) + 720)];
  [v15 setBytes:&v16 length:4 atIndex:0];
  [v15 setBuffer:v5 offset:v6 atIndex:1];
  [v15 setTexture:v22 atIndex:0];
  [v15 setTexture:v21 atIndex:1];
  [v15 setTexture:v20 atIndex:2];
  [v15 setTexture:v19 atIndex:3];
  if (*((unsigned char *)this + 619)) {
    uint64_t v7 = &v18;
  }
  else {
    uint64_t v7 = &v17;
  }
  if (*((unsigned char *)this + 619)) {
    long long v8 = &v17;
  }
  else {
    long long v8 = &v18;
  }
  [v15 setTexture:*v7 atIndex:4];
  [v15 setTexture:*v8 atIndex:5];
  re::RayTracedAmbientOcclusionNode::computeEncoderDispatch(**(void ***)a2, &v15, (id *)(*((void *)this + 32) + 720), *((_DWORD *)this + 69), *((_DWORD *)this + 70));
  re::RenderGraphContext::finishEncoding<re::mtl::ComputeCommandEncoder &>((uint64_t)a2, &v15);
  if (*((unsigned char *)this + 618) && !*((unsigned char *)this + 619))
  {
    __int16 v9 = *(void **)a2;
    id v10 = objc_retain(*(id *)(re::DrawingManager::currentCommandBuffer(*(re::DrawingManager **)(*((void *)a2 + 1)
                                                                                              + 104))
                            + 16));
    int v11 = (void *)[objc_alloc(MEMORY[0x263F13260]) initWithDevice:*v9 srcAlpha:1 destAlpha:1 backgroundColor:0 conversionInfo:0];
    re::RenderGraphContext::finishEncoding<re::mtl::ComputeCommandEncoder &>((uint64_t)a2, &v15);
    id v12 = v17;
    id v13 = v18;
    id v14 = v10;
    [v11 encodeToCommandBuffer:v14 sourceTexture:v13 destinationTexture:v12];
  }
  if (v17) {

  }
  if (v18) {
  if (v19)
  }

  if (v20) {
  if (v21)
  }

  if (v22) {
  if (v5)
  }
}

void re::RayTracedAmbientOcclusionBypassDenoisingNode::~RayTracedAmbientOcclusionBypassDenoisingNode(re::RayTracedAmbientOcclusionBypassDenoisingNode *this)
{
  *(void *)this = &unk_26E71E228;
  uint64_t v2 = *((void *)this + 32);
  if (v2)
  {

    *((void *)this + 32) = 0;
  }
  re::RenderGraphNode::~RenderGraphNode((id *)this);
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_26E71E228;
  uint64_t v2 = *((void *)this + 32);
  if (v2)
  {

    *((void *)this + 32) = 0;
  }
  re::RenderGraphNode::~RenderGraphNode((id *)this);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::RayTracedAmbientOcclusionBypassDenoisingNode::setup(re::RayTracedAmbientOcclusionBypassDenoisingNode *this, re::RenderGraphBuilder *a2, re::RenderGraphDataStore *a3)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  *(_DWORD *)((char *)v6 + 3) = 0;
  LODWORD(v6[0]) = 0;
  v6[1] = 2;
  re::RenderGraphBuilder::read((uint64_t)a2, (uint64_t)this + 360, (uint64_t)v6);
  v6[0] = 0x500000000;
  long long v7 = xmmword_23435FBB0;
  __int16 v8 = 0;
  int v9 = 0;
  int v10 = 0;
  return re::RenderGraphBuilder::write((uint64_t)a2, (uint64_t)this + 376, (uint64_t)v6);
}

void re::RayTracedAmbientOcclusionBypassDenoisingNode::execute(re::RayTracedAmbientOcclusionBypassDenoisingNode *this, re::RenderGraphContext *a2)
{
  re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this + 360, 0, 0, &v7);
  re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this + 376, 0, 0, &v6);
  uint64_t v4 = (id *)re::DrawingManager::currentCommandBuffer(*(re::DrawingManager **)(*((void *)a2 + 1) + 104));
  re::RenderGraphContext::acquireManagedComputeEncoder((uint64_t)a2, v4, *((re::RenderGraphNodeBase **)a2 + 5), 0, &v5);
  [v5 setComputePipelineState:*(void *)(*((void *)this + 32) + 728)];
  [v5 setTexture:v7 atIndex:0];
  [v5 setTexture:v6 atIndex:1];
  re::RayTracedAmbientOcclusionNode::computeEncoderDispatch(**(void ***)a2, &v5, (id *)(*((void *)this + 32) + 728), *((_DWORD *)this + 69), *((_DWORD *)this + 70));

  if (v6) {
  if (v7)
  }
}

void re::RayTracedAmbientOcclusionCompositeNode::~RayTracedAmbientOcclusionCompositeNode(id *this)
{
  re::RayTracedAmbientOcclusionCompositeNode::~RayTracedAmbientOcclusionCompositeNode(this);
  JUMPOUT(0x237DBCBD0);
}

{
  uint64_t vars8;

  *this = &unk_26E71E990;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(this + 63));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(this + 60));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(this + 57));
  re::RenderGraphFullscreenNode::~RenderGraphFullscreenNode(this);
}

void re::RayTracedAmbientOcclusionCompositeNode::getMaterialParameterTables(void *a1, uint64_t a2)
{
  uint64_t v4 = re::AssetHandle::loadedAsset<re::MaterialAsset>((re::MaterialAsset *)(a1 + 60));
  if (v4)
  {
    id v5 = *(re::MaterialParameterBlock **)(v4 + 1672);
    if (v5)
    {
      unint64_t v6 = a1[61];
      uint64_t v7 = v6 ? *(void *)(v6 + 664) : 0;
      unint64_t v8 = 0x94D049BB133111EBLL
         * ((0xBF58476D1CE4E5B9 * (v6 ^ (v6 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v6 ^ (v6 >> 30))) >> 27));
      unint64_t v20 = v7 ^ (v8 >> 31) ^ v8;
      re::MaterialParameterBlock::createMaterialParameterTableIfNeeded(v5, &v19);
      re::HashTable<unsigned long,re::SharedPtr<re::MaterialParameterTable>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::add(a2, &v20, &v19);
      if (v19) {
    }
      }
  }
  uint64_t v9 = re::AssetHandle::loadedAsset<re::MaterialAsset>((re::MaterialAsset *)(a1 + 63));
  if (v9)
  {
    int v10 = *(re::MaterialParameterBlock **)(v9 + 1672);
    if (v10)
    {
      unint64_t v11 = a1[64];
      uint64_t v12 = v11 ? *(void *)(v11 + 664) : 0;
      unint64_t v13 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * (v11 ^ (v11 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v11 ^ (v11 >> 30))) >> 27));
      unint64_t v20 = v12 ^ (v13 >> 31) ^ v13;
      re::MaterialParameterBlock::createMaterialParameterTableIfNeeded(v10, &v19);
      re::HashTable<unsigned long,re::SharedPtr<re::MaterialParameterTable>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::add(a2, &v20, &v19);
      if (v19) {
    }
      }
  }
  uint64_t v14 = re::AssetHandle::loadedAsset<re::MaterialAsset>((re::MaterialAsset *)(a1 + 57));
  if (v14)
  {
    id v15 = *(re::MaterialParameterBlock **)(v14 + 1672);
    if (v15)
    {
      unint64_t v16 = a1[58];
      if (v16) {
        uint64_t v17 = *(void *)(v16 + 664);
      }
      else {
        uint64_t v17 = 0;
      }
      unint64_t v18 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * (v16 ^ (v16 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v16 ^ (v16 >> 30))) >> 27));
      unint64_t v20 = v17 ^ (v18 >> 31) ^ v18;
      re::MaterialParameterBlock::createMaterialParameterTableIfNeeded(v15, &v19);
      re::HashTable<unsigned long,re::SharedPtr<re::MaterialParameterTable>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::add(a2, &v20, &v19);
      if (v19) {
    }
      }
  }
  re::RenderGraphFullscreenNode::getMaterialParameterTables((uint64_t)a1, a2);
}

void re::RayTracedAmbientOcclusionCompositeNode::configure(re::RayTracedAmbientOcclusionCompositeNode *this, const char *a2, const char *a3, re::RenderFrame *a4)
{
  *((void *)this + 66) = re::AssetHandle::asset<re::MaterialAsset>((re::RayTracedAmbientOcclusionCompositeNode *)((char *)this + 456));
  if (*((void *)this + 61)) {
    *((void *)this + 67) = re::AssetHandle::asset<re::MaterialAsset>((re::RayTracedAmbientOcclusionCompositeNode *)((char *)this + 480));
  }
  if (*((void *)this + 64)) {
    *((void *)this + 6re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = re::AssetHandle::asset<re::MaterialAsset>((re::RayTracedAmbientOcclusionCompositeNode *)((char *)this + 504));
  }
  re::RenderGraphFullscreenNode::configure(this, a2, a3, a4);
}

void re::RayTracedAmbientOcclusionCompositeNode::execute(re::RayTracedAmbientOcclusionCompositeNode *this, re::RenderGraphContext *a2)
{
  uint64_t v4 = re::RenderGraphDataStore::tryGet<re::RenderGraphDataStoreWrapper<re::RayTracedAmbientOcclusionExecData>>(*((void *)a2 + 146), *(void *)(*((void *)a2 + 5) + 48));
  id v5 = *(id *)(v4 + 8);
  unint64_t v6 = *(void **)(v4 + 16);
  v14[0] = v5;
  v14[1] = v6;
  uint64_t v7 = (re::BufferTable *)(*(void *)a2 + 480);
  v13[0] = 0x7A5B733119923A71;
  re::BufferTable::setBuffer(v7, (const re::WeakStringID *)v13, (uint64_t)v14);
  re::RenderGraphContext::rtInfo(a2, *((re::RenderGraphNodeBase **)a2 + 5), (uint64_t)v13);
  uint64_t v8 = *((void *)this + 67);
  if (v8 && (HIDWORD(v13[0]) == 81 || HIDWORD(v13[0]) == 71))
  {
    *((void *)this + 40) = v8;
    uint64_t v9 = (re::RayTracedAmbientOcclusionCompositeNode *)((char *)this + 480);
  }
  else
  {
    uint64_t v10 = *((void *)this + 68);
    if (v10 && (HIDWORD(v13[0]) == 80 || HIDWORD(v13[0]) == 70))
    {
      *((void *)this + 40) = v10;
      uint64_t v9 = (re::RayTracedAmbientOcclusionCompositeNode *)((char *)this + 504);
    }
    else
    {
      *((void *)this + 40) = *((void *)this + 66);
      uint64_t v9 = (re::RayTracedAmbientOcclusionCompositeNode *)((char *)this + 456);
    }
  }
  re::RenderGraphFullscreenNode::executeInternal(this, a2, v9);
  unint64_t v11 = (re::BufferTable *)(*(void *)a2 + 480);
  uint64_t v12 = 0x7A5B733119923A71;
  re::BufferTable::removeBuffer(v11, (const re::WeakStringID *)&v12);
  if (v14[0]) {
}
  }

void re::RayTracedAmbientOcclusionDirectDisplayNode::~RayTracedAmbientOcclusionDirectDisplayNode(re::RayTracedAmbientOcclusionDirectDisplayNode *this)
{
  *(void *)this = &unk_26E71E228;
  uint64_t v2 = *((void *)this + 32);
  if (v2)
  {

    *((void *)this + 32) = 0;
  }
  re::RenderGraphNode::~RenderGraphNode((id *)this);
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_26E71E228;
  uint64_t v2 = *((void *)this + 32);
  if (v2)
  {

    *((void *)this + 32) = 0;
  }
  re::RenderGraphNode::~RenderGraphNode((id *)this);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::RayTracedAmbientOcclusionDirectDisplayNode::setup(re::RayTracedAmbientOcclusionDirectDisplayNode *this, re::RenderGraphBuilder *a2, re::RenderGraphDataStore *a3)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  *(_DWORD *)((char *)v6 + 3) = 0;
  LODWORD(v6[0]) = 0;
  v6[1] = 2;
  re::RenderGraphBuilder::read((uint64_t)a2, (uint64_t)this + 376, (uint64_t)v6);
  v6[0] = 0x500000000;
  long long v7 = xmmword_23435FBB0;
  __int16 v8 = 0;
  int v9 = 0;
  int v10 = 0;
  return re::RenderGraphBuilder::write((uint64_t)a2, (uint64_t)this + 296, (uint64_t)v6);
}

void re::RayTracedAmbientOcclusionDirectDisplayNode::execute(re::RayTracedAmbientOcclusionDirectDisplayNode *this, re::RenderGraphContext *a2)
{
  re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this + 376, 0, 0, &v9);
  re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this + 296, 0, 0, &v8);
  uint64_t v4 = (id *)re::DrawingManager::currentCommandBuffer(*(re::DrawingManager **)(*((void *)a2 + 1) + 104));
  re::RenderGraphContext::acquireManagedComputeEncoder((uint64_t)a2, v4, *((re::RenderGraphNodeBase **)a2 + 5), 0, &v7);
  [v7 setComputePipelineState:*(void *)(*((void *)this + 32) + 728)];
  [v7 setTexture:v9 atIndex:0];
  [v7 setTexture:v8 atIndex:1];
  id v5 = (id *)(*((void *)this + 32) + 728);
  unsigned int v6 = objc_msgSend(v8, sel_width);
  re::RayTracedAmbientOcclusionNode::computeEncoderDispatch(**(void ***)a2, &v7, v5, v6, objc_msgSend(v8, sel_height));

  if (v8) {
  if (v9)
  }
}

void re::StencilPtInjectionNode::execute(re::StencilPtInjectionNode *this, re::RenderGraphContext *a2)
{
  uint64_t v2 = a2;
  uint64_t v40 = *MEMORY[0x263EF8340];
  uint64_t v4 = re::RenderGraphDataStore::tryGet<re::SceneScope>(*((void *)a2 + 146), *(void *)(*((void *)a2 + 5) + 48));
  uint64_t v5 = re::RenderGraphDataStore::get<re::CameraData>(*((void *)v2 + 146), *(void *)(*((void *)v2 + 5) + 48));
  uint64_t v8 = v5;
  __int16 v29 = 256;
  if (*((unsigned char *)this + 256)) {
    re::buildCullingFrustum(v5 + 64, (_DWORD *)(v5 + 144), *(unsigned __int8 *)(v5 + 490), &v29, (uint64_t)v33, v6, v7);
  }
  else {
    bzero(v33, 0x230uLL);
  }
  id v9 = (float32x4_t *)v33;
  if (!v4) {
    goto LABEL_33;
  }
  uint64_t v10 = *(void *)(*((void *)v2 + 1) + 32);
  uint64_t RenderGraphDataPipe = re::RenderGraphContext::tryGetRenderGraphDataPipe(v2, *(const char **)(v4 + 8));
  if (!RenderGraphDataPipe) {
    goto LABEL_33;
  }
  uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)RenderGraphDataPipe + 840))(RenderGraphDataPipe);
  uint64_t v27 = *(void *)(v12 + 40);
  uint64_t v28 = v12;
  if (!v27) {
    goto LABEL_33;
  }
  unsigned int v13 = 0;
  unint64_t v14 = 0;
  while (1)
  {
    uint64_t isBoundingBoxInsidePlanes = re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[](v28, v14);
    uint64_t v16 = *(void *)(isBoundingBoxInsidePlanes + 16);
    if (v16) {
      break;
    }
LABEL_27:
    if (++v14 == v27) {
      goto LABEL_33;
    }
  }
  uint64_t v17 = *(float32x4_t **)(isBoundingBoxInsidePlanes + 32);
  uint64_t v18 = 736 * v16;
  while (1)
  {
    if ((v17[28].i32[3] & *(_DWORD *)(v8 + 504)) == 0) {
      goto LABEL_26;
    }
    if (!*((unsigned char *)this + 256)) {
      goto LABEL_20;
    }
    if (v33[0] == 1)
    {
      unint64_t v31 = v35;
      uint64_t v32 = v34[0];
      re::computeMeshSceneBoundingBox(v17 + 2, v10, &buf);
      uint64_t isBoundingBoxInsidePlanes = re::isBoundingBoxInsidePlanes((uint64_t)&buf, (uint64_t)&v31, v17 + 5);
      if (isBoundingBoxInsidePlanes) {
        goto LABEL_20;
      }
      goto LABEL_26;
    }
    if (v33[0] != 2) {
      goto LABEL_26;
    }
    unint64_t v31 = v35;
    uint64_t v32 = v34[0];
    re::computeMeshSceneBoundingBox(v17 + 2, v10, &buf);
    id v9 = v17 + 5;
    uint64_t isBoundingBoxInsidePlanes = re::isBoundingBoxInsidePlanes((uint64_t)&buf, (uint64_t)&v31, v17 + 5);
    if (isBoundingBoxInsidePlanes) {
      break;
    }
    if (v33[0] <= 1uLL)
    {
      re::internal::assertLog((re::internal *)6, v19, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, 1, v33[0]);
      _os_crash();
      __break(1u);
      goto LABEL_41;
    }
    v30[0] = &v36;
    v30[1] = v35[12];
    re::computeMeshSceneBoundingBox(v17 + 2, v10, &buf);
    id v9 = (float32x4_t *)v33;
    uint64_t isBoundingBoxInsidePlanes = re::isBoundingBoxInsidePlanes((uint64_t)&buf, (uint64_t)v30, v17 + 5);
    if (isBoundingBoxInsidePlanes) {
      goto LABEL_20;
    }
LABEL_26:
    v17 += 46;
    v18 -= 736;
    if (!v18) {
      goto LABEL_27;
    }
  }
  id v9 = (float32x4_t *)v33;
LABEL_20:
  if (re::PortalUserDefaults::maximumPortalCount(void)::onceToken != -1) {
    dispatch_once(&re::PortalUserDefaults::maximumPortalCount(void)::onceToken, &__block_literal_global_30);
  }
  if (v13 < re::PortalUserDefaults::maximumPortalCount(void)::maximumPortalCount)
  {
    ++v13;
    unint64_t v20 = (char *)this + 264;
    if (!*((void *)this + 35)) {
      unint64_t v20 = 0;
    }
    buf.i8[0] = *((unsigned char *)this + 256);
    *(__int16 *)((char *)buf.i16 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = *((unsigned __int8 *)this + 304);
    buf.i8[3] = *((unsigned char *)this + 306);
    buf.i64[1] = (uint64_t)v20;
    __int16 v39 = 0;
    uint64_t isBoundingBoxInsidePlanes = re::StencilPtInjectionNode::executeForPortal((unint64_t)v17, (float32x4_t *)v2, v10, *((void *)this + 2), *((char **)this + 3), *((void *)this + 4), (uint64_t)&buf);
    goto LABEL_26;
  }
  if ((atomic_exchange(re::StencilPtInjectionNode::execute(re::RenderGraphContext &)::__FILE____LINE___logged, 1u) & 1) == 0)
  {
    uint64_t v2 = (re::RenderGraphContext *)*re::graphicsLogObjects((re *)isBoundingBoxInsidePlanes);
    if (os_log_type_enabled((os_log_t)v2, OS_LOG_TYPE_DEFAULT))
    {
      if (re::PortalUserDefaults::maximumPortalCount(void)::onceToken == -1)
      {
LABEL_32:
        int v21 = re::PortalUserDefaults::maximumPortalCount(void)::maximumPortalCount;
        v9[35].i32[0] = 67109120;
        v9[35].i32[1] = v21;
        goto LABEL_33;
      }
LABEL_41:
      dispatch_once(&re::PortalUserDefaults::maximumPortalCount(void)::onceToken, &__block_literal_global_30);
      goto LABEL_32;
    }
  }
LABEL_33:
  uint64_t v22 = v9[15].i64[0];
  if (v22)
  {
    id v23 = v37;
    id v24 = &v37[9 * v22];
    do
    {
      *(void *)id v23 = 0;
      ++*((_DWORD *)v23 + 2);
      v23 += 9;
    }
    while (v23 != v24);
  }
  if (v33[0])
  {
    uint64_t v25 = v34;
    uint64_t v26 = &v34[14 * v33[0]];
    do
    {
      *uint64_t v25 = 0;
      ++*((_DWORD *)v25 + 2);
      v25 += 14;
    }
    while (v25 != v26);
  }
}

uint64_t re::StencilPtInjectionNode::executeForPortal(unint64_t a1, float32x4_t *a2, uint64_t a3, uint64_t a4, char *__s, unint64_t a6, uint64_t a7)
{
  uint64_t v217 = *MEMORY[0x263EF8340];
  uint64_t v12 = (void *)0x9E3779B97F4A7C17;
  size_t v13 = strlen(__s);
  if (v13)
  {
    MurmurHash3_x64_128((uint64_t)__s, v13, 0, (unint64_t *)&v194);
    unint64_t v14 = (*((void *)&v194 + 1) - 0x61C8864680B583E9 + ((void)v194 << 6) + ((unint64_t)v194 >> 2)) ^ v194;
  }
  else
  {
    unint64_t v14 = 0;
  }
  size_t v15 = strlen((const char *)a6);
  unint64_t v16 = 0x9E3779B97F4A7C17;
  if (v15)
  {
    MurmurHash3_x64_128(a6, v15, 0, (unint64_t *)&v194);
    unint64_t v16 = ((*((void *)&v194 + 1) - 0x61C8864680B583E9 + ((void)v194 << 6) + ((unint64_t)v194 >> 2)) ^ v194)
        - 0x61C8864680B583E9;
  }
  uint64_t v17 = &PipelineCompilationData;
  uint64_t v18 = re::RenderGraphDataStore::get<re::SceneScope>(a2[73].i64[0], ((v14 >> 2) + (v14 << 6) + v16) ^ v14);
  unint64_t v148 = v18;
  unint64_t v149 = a6;
  if (!*(unsigned char *)(a7 + 3)) {
    goto LABEL_40;
  }
  unint64_t v19 = v18;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9C678, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9C678))
  {
    _MergedGlobals_467 = re::hashString((re *)"StencilIncrement", v138);
    __cxa_guard_release(&qword_26AF9C678);
  }
  *(void *)&long long v194 = a1;
  *((void *)&v194 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = v19;
  *(void *)&long long v195 = a6;
  *((void *)&v195 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = "StencilIncrement";
  v196[0] = _MergedGlobals_467;
  char v20 = *(unsigned char *)(a7 + 16);
  char v21 = *(unsigned char *)(a7 + 17);
  *(_OWORD *)&v196[1] = __const__ZN2re20FeatureStencilStates13getPortalInfoENS0_11PortalUsageEhh_kIncrementStInfo;
  LOBYTE(v196[3]) = v21 | 0x80;
  BYTE1(v196[1]) = v20;
  BYTE1(v196[2]) = v20;
  unint64_t v197 = a2;
  uint64_t v198 = a3;
  memset(v184, 0, 40);
  long long v183 = 0u;
  long long v182 = 0u;
  re::RenderGraphContext::getDefaultEncodeDrawCallDataStoreArgs((re::RenderGraphContext *)a2, (uint64_t *)&v182);
  re::encodeMeshPassForPortal((uint64_t)&v182, (uint64_t)&v194);
  if (!*(unsigned char *)(a7 + 3)) {
    goto LABEL_40;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9C688, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9C688))
  {
    qword_26AF9C680 = re::hashString((re *)"PortalOcclusion", v141);
    __cxa_guard_release(&qword_26AF9C688);
  }
  uint64_t v22 = re::RenderGraphDataStore::tryGet<re::MeshPassInfoData>(a2[73].i64[0], *(void *)(a2[2].i64[1] + 48));
  if (!v22) {
    goto LABEL_32;
  }
  *(void *)&long long v194 = qword_26AF9C680;
  uint64_t v23 = re::HashTable<unsigned long,re::MeshPassInfo,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(*(void *)(v22 + 8), (uint64_t *)&v194);
  if (!v23) {
    goto LABEL_32;
  }
  uint64_t v24 = v23;
  if (a2[83].i8[4]) {
    goto LABEL_150;
  }
  for (unint64_t i = 0;
        ;
        unint64_t i = (re::RenderGraphContext *)re::DrawCallRecorder::allocateDrawCallRecorderGroup((re::DrawCallRecorder *)&a2[83].u32[2], "StencilPortalOcclusion", "PortalOcclusion"))
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9C738, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_26AF9C738))
    {
      qword_26AF9C730 = re::hashString((re *)"RenderGraphDataPipeData", v144);
      __cxa_guard_release(&qword_26AF9C738);
    }
    unint64_t v25 = qword_26AF9C730;
    size_t v26 = strlen(*(const char **)(v19 + 8));
    unint64_t v27 = 0x9E3779B97F4A7C17;
    if (v26)
    {
      MurmurHash3_x64_128(*(void *)(v19 + 8), v26, 0, (unint64_t *)&v194);
      unint64_t v27 = (unint64_t)v12
          + (((unint64_t)&v12[8 * (void)v194] + *((void *)&v194 + 1) + ((unint64_t)v194 >> 2)) ^ v194);
    }
    uint64_t v28 = re::RenderGraphDataStore::tryGet<re::MeshSortingCollection>(a2[73].i64[0], ((v25 >> 2) + (v25 << 6) + v27) ^ v25);
    if (v28)
    {
      if (*(void *)(v28 + 48))
      {
        unint64_t v29 = *(void *)(a1 + 16);
        unint64_t v30 = 0x94D049BB133111EBLL
            * ((0xBF58476D1CE4E5B9 * (v29 ^ (v29 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v29 ^ (v29 >> 30))) >> 27));
        uint64_t v31 = *(unsigned int *)(*(void *)(v28 + 56) + 4 * ((v30 ^ (v30 >> 31)) % *(unsigned int *)(v28 + 72)));
        if (v31 != 0x7FFFFFFF)
        {
          uint64_t v32 = *(void *)(v28 + 64);
          if (*(void *)(v32 + 40 * v31 + 16) == v29)
          {
LABEL_23:
            uint64_t v33 = v32 + 40 * v31;
            uint64_t v35 = *(void *)(v33 + 24);
            id v34 = (uint64_t *)(v33 + 24);
            if (v35)
            {
              uint64_t v36 = re::RenderGraphDataStore::tryGet<re::RenderGraphDataStoreWrapper<re::MeshRenderPassGroups>>(a2[73].i64[0], *(void *)(a2[2].i64[1] + 48));
              if (v36)
              {
                uint64_t v37 = re::HashTable<unsigned long long,re::MeshRenderPassGroups::RenderPassGroupSortData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(v36 + 8, v34);
                if (v37)
                {
                  uint64_t v38 = v37;
                  uint64_t v39 = re::RenderGraphDataStore::get<re::CameraMatrices>(a2[73].i64[0], *(void *)(a2[2].i64[1] + 48));
                  uint64_t PipelineCompilationData = v24;
                  LOBYTE(v169) = 0;
                  *(_DWORD *)((char *)&v169 + 5) = 65280;
                  uint64_t v176 = &PipelineCompilationData;
                  uint64_t v177 = 1;
                  uint64_t v40 = *(re::Allocator **)(a2->i64[0] + 24);
                  unint64_t v197 = 0;
                  memset(v196, 0, sizeof(v196));
                  long long v194 = 0u;
                  long long v195 = 0u;
                  uint64_t v198 = re::globalAllocators((re *)v39)[2];
                  uint64_t v199 = 0;
                  __int16 v200 = 1;
                  int v41 = *(_DWORD *)v38;
                  char v42 = *(unsigned char *)(v38 + 4);
                  char v43 = *(unsigned char *)(v38 + 9);
                  char v201 = 1;
                  int v202 = v41;
                  char v203 = v42;
                  char v204 = v43;
                  re::RenderGraphMeshNodeBase::sortMeshParts(&v186, 1, &PipelineCompilationData, 1, a2, i, &v194, v40);
                  re::FunctionBase<32ul,BOOL ()(re::MeshPartDrawContext const&)>::destroyCallable((uint64_t)&v196[1]);
                  unint64_t v44 = (re::DrawTable *)(*(uint64_t (**)(re::Allocator *, uint64_t, uint64_t))(*(void *)v40 + 32))(v40, 328, 8);
                  re::DrawTable::DrawTable(v44, v40, (v188 + 127) >> 7);
                  re::RenderGraphMeshNodeBase::makeDrawCallsFromMeshParts((uint64_t *)&v176, v189, v188, a2, (uint64_t)v44, *(unsigned __int8 *)(v39 + 64), v39, 0, (uint64_t)i);
                  if (*((void *)v44 + 5))
                  {
                    a2[94].i8[8] = 2;
                    re::DrawTableSlice::DrawTableSlice(&v194, (uint64_t)v44);
                    *(void *)&long long v182 = "StencilPortalOcclusion";
                    *((void *)&v182 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = &v194;
                    uint64_t v45 = *(void *)(v39 + 80);
                    *(void *)&long long v183 = *(void *)(v39 + 40);
                    *((void *)&v183 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = v45;
                    *(void *)double v184 = 0;
                    v184[8] = *(unsigned char *)(v39 + 128);
                    *(_WORD *)&v184[9] = 0;
                    *(_DWORD *)&v184[12] = -2147417856;
                    *(_WORD *)&v184[16] = 640;
                    *(void *)&v184[18] = 0x280800100010000;
                    *(_DWORD *)&v184[26] = 0x10000;
                    v184[30] = 0x80;
                    memset(&v184[31], 0, 33);
                    *(void *)&long long v185 = i;
                    BYTE8(v185) = 0;
                    re::RenderGraphContext::getDefaultEncodeDrawCallDataStoreArgs((re::RenderGraphContext *)a2, (uint64_t *)&v158);
                    re::RenderGraphContext::encodeDrawCalls(a2, &v158, &v182);
                    a2[94].i8[8] = 0;
                  }
                  if (v186 && v189) {
                    (*(void (**)(void))(*(void *)v186 + 40))();
                  }
                  unint64_t v19 = v148;
                  a6 = v149;
                  uint64_t v17 = &PipelineCompilationData;
                  uint64_t v12 = (void *)0x9E3779B97F4A7C17;
                }
              }
            }
          }
          else
          {
            while (1)
            {
              LODWORD(v3re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = *(_DWORD *)(v32 + 40 * v31 + 8) & 0x7FFFFFFF;
              if (v31 == 0x7FFFFFFF) {
                break;
              }
              if (*(void *)(v32 + 40 * v31 + 16) == v29) {
                goto LABEL_23;
              }
            }
          }
        }
      }
    }
LABEL_32:
    if (*(unsigned char *)(a7 + 3))
    {
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9C698, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26AF9C698))
      {
        qword_26AF9C690 = re::hashString((re *)"DepthBufferClear", v142);
        __cxa_guard_release(&qword_26AF9C698);
      }
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9C6A8, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26AF9C6A8))
      {
        qword_26AF9C6A0 = re::hashString((re *)"DepthBufferClearNoColor", v143);
        __cxa_guard_release(&qword_26AF9C6A8);
      }
      BOOL v46 = *(unsigned char *)(a7 + 2) == 0;
      unint64_t v47 = &qword_26AF9C6A0;
      if (!*(unsigned char *)(a7 + 2)) {
        unint64_t v47 = &qword_26AF9C690;
      }
      uint64_t v48 = *v47;
      int v49 = "DepthBufferClearNoColor";
      *(void *)&long long v194 = a1;
      *((void *)&v194 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = v19;
      if (v46) {
        int v49 = "DepthBufferClear";
      }
      *(void *)&long long v195 = a6;
      *((void *)&v195 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = v49;
      v196[0] = v48;
      *(_OWORD *)&v196[1] = __const__ZN2re20FeatureStencilStates13getPortalInfoENS0_11PortalUsageEhh_kDepthClearStInfo;
      LOBYTE(v196[3]) = 0x80;
      BYTE1(v196[1]) = 0x80;
      BYTE1(v196[2]) = 0x80;
      unint64_t v197 = a2;
      uint64_t v198 = a3;
      *(void *)&v184[32] = 0;
      *(_OWORD *)(v17 + 2re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0u;
      *(_OWORD *)(v17 + 19) = 0u;
      *(_OWORD *)(v17 + 17) = 0u;
      *(_OWORD *)(v17 + 15) = 0u;
      re::RenderGraphContext::getDefaultEncodeDrawCallDataStoreArgs((re::RenderGraphContext *)a2, (uint64_t *)&v182);
      re::encodeMeshPassForPortal((uint64_t)&v182, (uint64_t)&v194);
    }
LABEL_40:
    re::CameraData::CameraData((re::CameraData *)&v194, *(re::Allocator **)(a2->i64[0] + 24));
    v181[0] = &unk_26E711090;
    uint64_t v50 = &v176;
    uint64_t v176 = (uint64_t *)&unk_26E70E050;
    uint64_t v177 = 134217472;
    int v178 = 134217472;
    int v179 = 0;
    size_t v51 = strlen(*(const char **)(a1 + 8));
    uint64_t v147 = a3;
    if (v51)
    {
      MurmurHash3_x64_128(*(void *)(a1 + 8), v51, 0, (unint64_t *)&v182);
      unint64_t v52 = ((unint64_t)&v12[8 * (void)v182] + *((void *)&v182 + 1) + ((unint64_t)v182 >> 2)) ^ v182;
    }
    else
    {
      unint64_t v52 = 0;
    }
    uint64_t v53 = re::RenderGraphDataStore::get<re::CameraData>(a2[73].i64[0], *(void *)(a2[2].i64[1] + 48));
    re::DynamicString::operator=((re::DynamicString *)((char *)&v194 + 8), (re::DynamicString *)(v53 + 8));
    re::DynamicInlineArray<re::RenderCamera,2ul>::operator=(&v196[2], (uint64_t *)(v53 + 48));
    re::DynamicInlineArray<re::Projection,2ul>::operator=((uint64_t *)&v205, (uint64_t *)(v53 + 128));
    unint64_t v150 = a1;
    if (&v194 != (long long *)v53)
    {
      unint64_t v54 = *(void *)(v53 + 272);
      unint64_t v55 = v208;
      if (v54 >= v208)
      {
        uint64_t v56 = v53 + 288 + (v208 << 6);
        if (v208) {
          memmove(v210, (const void *)(v53 + 288), v208 << 6);
        }
        memcpy(&v210[64 * v55], (const void *)(v53 + 288 + (v55 << 6)), v53 + 288 + (v54 << 6) - v56);
        uint64_t v50 = &v176;
      }
      else if (v54)
      {
        memmove(v210, (const void *)(v53 + 288), v54 << 6);
      }
      unint64_t v208 = v54;
      ++v209;
    }
    long long v57 = *(_OWORD *)(v53 + 416);
    long long v58 = *(_OWORD *)(v53 + 432);
    long long v59 = *(_OWORD *)(v53 + 448);
    *(_OWORD *)&v213[10] = *(_OWORD *)(v53 + 458);
    long long v212 = v58;
    *(_OWORD *)uint64_t v213 = v59;
    long long v211 = v57;
    if (v214 || *(unsigned char *)(v53 + 476))
    {
      if (!v214 || *(unsigned char *)(v53 + 476))
      {
        if (!v214) {
          BOOL v214 = *(unsigned char *)(v53 + 476) != 0;
        }
        int v215 = *(_DWORD *)(v53 + 480);
      }
      else
      {
        BOOL v214 = 0;
      }
    }
    long long v60 = *(_OWORD *)(v53 + 484);
    *(_OWORD *)&v216[13] = *(_OWORD *)(v53 + 497);
    *(_OWORD *)uint64_t v216 = v60;
    size_t v61 = strlen((const char *)a6);
    *(void *)&long long v182 = a6;
    *((void *)&v182 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = v61;
    re::DynamicString::operator=((re::DynamicString *)((char *)&v194 + 8), (uint64_t)&v182);
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9C6B8, memory_order_acquire) & 1) == 0)
    {
LABEL_153:
      if (__cxa_guard_acquire(&qword_26AF9C6B8))
      {
        qword_26AF9C6B0 = re::hashString((re *)"MeshScenes", v132);
        __cxa_guard_release(&qword_26AF9C6B8);
      }
    }
    unint64_t v62 = v52 - 0x61C8864680B583E9;
    uint64_t v63 = re::RenderGraphDataStore::tryGet<re::RenderGraphDataStoreWrapper<re::MeshSceneArrays>>(a2[73].i64[0], (v52 - 0x61C8864680B583E9 + (qword_26AF9C6B0 << 6) + ((unint64_t)qword_26AF9C6B0 >> 2)) ^ qword_26AF9C6B0);
    uint64_t v64 = v63 + 8;
    if (!v63) {
      uint64_t v64 = 0;
    }
    *((void *)&v212 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = v64;
    MurmurHash3_x64_128((uint64_t)"VFXScenes", 9, 0, (unint64_t *)&v182);
    unint64_t v65 = (*((void *)&v182 + 1) - 0x61C8864680B583E9 + ((void)v182 << 6) + ((unint64_t)v182 >> 2)) ^ v182;
    unint64_t v66 = (v62 + (v65 << 6) + (v65 >> 2)) ^ v65;
    uint64_t v67 = a2[73].i64[0];
    unint64_t v68 = (unint64_t)"N2re27RenderGraphDataStoreWrapperINS_11BucketArrayINS_12DynamicArrayINS_8VFXSceneEEELm4EEEEE";
    if (((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_11BucketArrayINS_12DynamicArrayINS_8VFXSceneEEELm4EEEEE" & 0x8000000000000000) != 0)
    {
      simd_float4 v69 = (unsigned __int8 *)((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_11BucketArrayINS_12DynamicArrayIN"
                                                  "S_8VFXSceneEEELm4EEEEE" & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v70 = 5381;
      do
      {
        unint64_t v68 = v70;
        unsigned int v71 = *v69++;
        uint64_t v70 = (33 * v70) ^ v71;
      }
      while (v71);
    }
    *(void *)&long long v182 = (v66 - 0x61C8864680B583E9 + (v68 << 6) + (v68 >> 2)) ^ v68;
    unint64_t v72 = (uint64_t *)re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(v67 + 16, (uint64_t *)&v182);
    if (v72) {
      uint64_t v73 = *v72;
    }
    else {
      uint64_t v73 = 0;
    }
    if (v73) {
      uint64_t v74 = v73 + 8;
    }
    else {
      uint64_t v74 = 0;
    }
    *(void *)uint64_t v213 = v74;
    v181[1] = *(void *)(a1 + 8);
    if (*(unsigned char *)(a7 + 3))
    {
      uint64_t v177 = 50364417;
      int v178 = 50364417;
      int v179 = 0;
      char v180 = 0x80;
    }
    else
    {
      *((unsigned char *)v50 + 24) = 0;
      *(_OWORD *)(v50 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = xmmword_234414B70;
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9C6C8, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_26AF9C6C8))
    {
      qword_26AF9C6C0 = re::hashString((re *)"SceneIndex", v133);
      __cxa_guard_release(&qword_26AF9C6C8);
    }
    uint64_t PipelineCompilationData = re::RenderGraphContext::tryGetPipelineCompilationData((re::RenderGraphContext *)a2, *(void *)(a2[2].i64[1] + 48));
    *(void *)&long long v169 = v181;
    *((void *)&v169 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = re::RenderGraphDataStore::tryGet<re::SceneIndexData>(a2[73].i64[0], (v62 + (qword_26AF9C6C0 << 6) + ((unint64_t)qword_26AF9C6C0 >> 2)) ^ qword_26AF9C6C0);
    uint64_t v170 = &v176;
    uint64_t v171 = re::RenderGraphDataStore::tryGet<re::ViewportData>(a2[73].i64[0], *(void *)(a2[2].i64[1] + 48));
    uint64_t v172 = re::RenderGraphDataStore::tryGet<re::ViewportPercentData>(a2[73].i64[0], *(void *)(a2[2].i64[1] + 48));
    uint64_t v173 = re::RenderGraphDataStore::tryGet<re::TintContextData>(a2[73].i64[0], *(void *)(a2[2].i64[1] + 48));
    uint64_t v174 = re::RenderGraphDataStore::tryGet<re::VRRData>(a2[73].i64[0], *(void *)(a2[2].i64[1] + 48));
    uint64_t v75 = a2[73].i64[0];
    uint64_t v76 = *(void *)(a2[2].i64[1] + 48);
    {
      re::introspect<re::TriangleFillModeData>(void)::info = (_UNKNOWN *)re::introspect_TriangleFillModeData(0);
    }
    size_t v77 = strlen(*((const char **)re::introspect<re::TriangleFillModeData>(void)::info + 6));
    if (v77)
    {
      MurmurHash3_x64_128(*((void *)re::introspect<re::TriangleFillModeData>(void)::info + 6), v77, 0, (unint64_t *)&v182);
      unint64_t v78 = (*((void *)&v182 + 1) - 0x61C8864680B583E9 + ((void)v182 << 6) + ((unint64_t)v182 >> 2)) ^ v182;
    }
    else
    {
      unint64_t v78 = 0;
    }
    *(void *)&long long v182 = (v76 - 0x61C8864680B583E9 + (v78 << 6) + (v78 >> 2)) ^ v78;
    uint64_t v79 = (uint64_t *)re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(v75 + 64, (uint64_t *)&v182);
    if (v79) {
      uint64_t v80 = *v79;
    }
    else {
      uint64_t v80 = 0;
    }
    unint64_t v81 = 0x9E3779B97F4A7C17;
    uint64_t v175 = v80;
    uint64_t v166 = &unk_26E71A588;
    uint64_t v167 = 0;
    re::CameraMatrices::CameraMatrices((re::CameraMatrices *)&v186, *(re::Allocator **)(a2->i64[0] + 24), v216[6]);
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9C6D8, memory_order_acquire) & 1) == 0)
    {
      uint64_t v134 = (re *)__cxa_guard_acquire(&qword_26AF9C6D8);
      if (v134)
      {
        qword_26AF9C6D0 = re::getCombinedScopeHash(v134, v135, v136);
        __cxa_guard_release(&qword_26AF9C6D8);
      }
    }
    a3 = re::RenderGraphDataStore::get<re::RendererGlobals>(a2[73].i64[0], qword_26AF9C6D0);
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9C6E8, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_26AF9C6E8))
    {
      qword_26AF9C6E0 = re::hashString((re *)"DynamicFunctionConstants", v137);
      __cxa_guard_release(&qword_26AF9C6E8);
    }
    unint64_t v82 = qword_26AF9C6E0;
    size_t v83 = strlen((const char *)a6);
    if (v83)
    {
      MurmurHash3_x64_128(a6, v83, 0, (unint64_t *)&v182);
      unint64_t v81 = ((*((void *)&v182 + 1) - 0x61C8864680B583E9 + ((void)v182 << 6) + ((unint64_t)v182 >> 2)) ^ v182)
          - 0x61C8864680B583E9;
    }
    uint64_t v84 = re::RenderGraphDataStore::tryGet<re::DynamicFunctionConstantsData>(a2[73].i64[0], ((v82 >> 2) + (v82 << 6) + v81) ^ v82);
    uint64_t v85 = v84 ? v84 + 8 : 0;
    uint64_t v24 = re::RenderGraphDataStore::get<re::MeshLodSelectInputData>(a2[73].i64[0], *(void *)(a2[2].i64[1] + 48));
    uint64_t v86 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a2->i64[0] + 24) + 32))(*(void *)(a2->i64[0] + 24), 48, 8);
    uint64_t v87 = *(void *)(a2->i64[0] + 24);
    *(_DWORD *)(v86 + 32) = 0;
    *(_OWORD *)uint64_t v86 = 0u;
    *(_OWORD *)(v86 + 16) = 0u;
    *(void *)(v86 + 36) = 0x7FFFFFFFLL;
    re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::init(v86, v87, 3);
    uint64_t v167 = v86;
    if (!v216[6]) {
      break;
    }
    unint64_t v19 = 0;
    uint64_t v12 = v191;
    unint64_t v89 = (re::Projection *)&v207;
    a6 = (unint64_t)&v187;
    uint64_t v17 = (uint64_t *)&v197;
    while (v205 > v19)
    {
      re::Projection::computeMatrix4x4F(v89, (uint64_t)&v182);
      re::DynamicArray<re::Matrix4x4<float>>::add((_anonymous_namespace_ *)v191, (uint64_t)&v182);
      uint64_t v91 = v196[2];
      if (v196[2] <= v19) {
        goto LABEL_149;
      }
      re::RenderCamera::computeInverseTransform((float32x4_t *)v17, (uint64_t)&v182);
      re::DynamicArray<re::Matrix4x4<float>>::add((_anonymous_namespace_ *)&v187, (uint64_t)&v182);
      ++v19;
      v17 += 4;
      unint64_t v89 = (re::Projection *)((char *)v89 + 64);
      if (v19 >= v216[6]) {
        goto LABEL_94;
      }
    }
    re::internal::assertLog((re::internal *)6, v88, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, v19, v205);
    _os_crash();
    __break(1u);
LABEL_149:
    re::internal::assertLog((re::internal *)6, v90, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, v19, v91);
    _os_crash();
    __break(1u);
LABEL_150:
    ;
  }
LABEL_94:
  uint64_t v92 = *(void *)(a2->i64[0] + 24);
  long long v158 = 0u;
  long long v159 = 0u;
  LODWORD(v160) = 0;
  *(void *)((char *)&v160 + 4) = 0x7FFFFFFFLL;
  re::HashTable<unsigned long long,re::MeshSortingCollection::GroupData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)&v158, v92, 3);
  *(void *)&long long v182 = a2;
  *((void *)&v182 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = &v194;
  *(void *)&long long v183 = &v186;
  *((void *)&v183 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = v181;
  *(void *)double v184 = a3;
  *(void *)&v184[8] = &v166;
  *(void *)&v184[16] = v24;
  *(void *)&v184[24] = &v158;
  v184[32] = *(unsigned char *)a7;
  *(_WORD *)&v184[33] = 0;
  v184[36] = 0;
  *(void *)&v184[48] = v85;
  re::RenderGraphCameraSetupNode::setupDrawCallsForCamera((uint64_t)&v182, v93, v94, v95, v96, v97);
  v99.n128_f64[0] = re::HashTable<unsigned long long,re::MeshSortingCollection::GroupData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)&v158);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9C6F0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v98 = (_anonymous_namespace_ *)__cxa_guard_acquire(&qword_26AF9C6F0);
    if (v98)
    {
      qword_26AF9C740 = 0x4CB6D3AA6EABE92CLL;
      qword_26AF9C748 = (uint64_t)"Transparent_BackCompat";
      unk_26AF9C750 = 5231452;
      qword_26AF9C758 = (uint64_t)"True";
      __cxa_atexit((void (*)(void *))re::TechniqueTagFilter::~TechniqueTagFilter, &qword_26AF9C740, &dword_233120000);
      __cxa_guard_release(&qword_26AF9C6F0);
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9C6F8, memory_order_acquire) & 1) == 0)
  {
    uint64_t v98 = (_anonymous_namespace_ *)__cxa_guard_acquire(&qword_26AF9C6F8);
    if (v98)
    {
      re::StringID::StringID((re::StringID *)&v182, (const StringID *)&qword_26AF9C740);
      re::StringID::StringID((re::StringID *)&v183, (const StringID *)&unk_26AF9C750);
      qword_26AF9C760 = 0;
      qword_26AF9C768 = (uint64_t)"";
      unk_26AF9C770 = 0;
      qword_26AF9C778 = (uint64_t)"";
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::RigDataTypeClass::RigDataTypeAttribute *,re::RigDataTypeClass::RigDataTypeAttribute *,re::RigDataTypeClass::RigDataTypeAttribute *>((uint64_t)&v158, (uint64_t *)&v182, (uint64_t *)v184, (unint64_t *)&qword_26AF9C760);
      re::StringID::destroyString((re::StringID *)&v183);
      re::StringID::destroyString((re::StringID *)&v182);
      __cxa_atexit((void (*)(void *))re::FixedInlineArray<re::TechniqueTagFilter,1ul>::~FixedInlineArray, &qword_26AF9C760, &dword_233120000);
      __cxa_guard_release(&qword_26AF9C6F8);
    }
  }
  uint64_t v153 = (re::RenderGraphContext *)a2;
  uint64_t v100 = *(void *)(a7 + 8);
  if (v100)
  {
    if (*(void *)(v100 + 16))
    {
      uint64_t v101 = 0;
      unint64_t v102 = 0;
      do
      {
        uint64_t v103 = *(void *)(v100 + 32) + v101;
        if (*(unsigned char *)(v103 + 8)) {
          uint64_t v104 = *(const char **)(v103 + 16);
        }
        else {
          uint64_t v104 = (const char *)(v103 + 9);
        }
        re::DynamicString::operator+((re::DynamicString *)&v182, v104, (re::DynamicString *)&v158);
        if (void)v182 && (BYTE8(v182)) {
          (*(void (**)(void))(*(void *)v182 + 40))();
        }
        size_t v105 = strlen(v104);
        if (v105)
        {
          MurmurHash3_x64_128((uint64_t)v104, v105, 0, (unint64_t *)&v182);
          unint64_t v106 = (*((void *)&v182 + 1) - 0x61C8864680B583E9 + ((void)v182 << 6) + ((unint64_t)v182 >> 2)) ^ v182;
        }
        else
        {
          unint64_t v106 = 0;
        }
        *(void *)&long long v182 = v106;
        uint64_t v107 = re::HashTable<unsigned long,re::MeshPassInfo,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(v167, (uint64_t *)&v182);
        if (v107)
        {
          uint64_t v155 = v107;
          char v156 = 0;
          int v157 = 65280;
          *(void *)&long long v182 = &PipelineCompilationData;
          if (BYTE8(v158)) {
            unint64_t v108 = (char *)v159;
          }
          else {
            unint64_t v108 = (char *)&v158 + 9;
          }
          *((void *)&v182 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = a4;
          *(void *)&long long v183 = v108;
          *((void *)&v183 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = &v155;
          *(void *)&v184[8] = 0;
          *(void *)&v184[16] = 0;
          *(void *)double v184 = 1;
          *(void *)&v184[24] = &v186;
          *(_DWORD *)&v184[32] = 2;
          *(_WORD *)&v184[36] = 2;
          *(void *)&v184[40] = a2;
          *(_OWORD *)&v184[48] = *(_OWORD *)(v150 + 704);
          long long v185 = *(_OWORD *)(v150 + 688);
          re::encodeMaterialPassForPortalScene((uint64_t)&v182);
        }
        uint64_t v98 = (_anonymous_namespace_ *)v158;
        if (void)v158 && (BYTE8(v158)) {
          uint64_t v98 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v158 + 40))();
        }
        ++v102;
        uint64_t v100 = *(void *)(a7 + 8);
        v101 += 32;
      }
      while (*(void *)(v100 + 16) > v102);
    }
  }
  else
  {
    *(void *)&long long v158 = 0;
    DWORD2(v15re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
    re::rendergraph_helper::getOcclusionMeshPasses((uint64_t)&v182);
    re::rendergraph_helper::populateMeshPassArray<1ul,re::FixedInlineArray<re::rendergraph_helper::RenderPass,1ul>>((uint64_t)&v166, (uint64_t *)&v158, (uint64_t)&v182);
    long long v109 = *(_OWORD *)(a1 + 688);
    *(_OWORD *)&v184[48] = *(_OWORD *)(a1 + 704);
    *(void *)&long long v182 = &PipelineCompilationData;
    *((void *)&v182 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = a4;
    *(void *)&long long v183 = "Portal_Occlusion";
    *((void *)&v183 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = &v159;
    *(void *)double v184 = v158;
    *(void *)&v184[8] = 0;
    *(void *)&v184[16] = 0;
    *(void *)&v184[24] = &v186;
    *(_DWORD *)&v184[32] = 1;
    *(_WORD *)&v184[36] = 0;
    *(void *)&v184[40] = a2;
    uint64_t v145 = (long long *)(a1 + 704);
    unint64_t v146 = (long long *)(a1 + 688);
    long long v185 = v109;
    re::encodeMaterialPassForPortalScene((uint64_t)&v182);
    *(void *)&long long v158 = 0;
    DWORD2(v15re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
    re::rendergraph_helper::getOpaqueMeshPasses((uint64_t)&v182);
    re::rendergraph_helper::populateMeshPassArray<1ul,re::FixedInlineArray<re::rendergraph_helper::RenderPass,1ul>>((uint64_t)&v166, (uint64_t *)&v158, (uint64_t)&v182);
    long long v110 = *(_OWORD *)(a1 + 688);
    *(_OWORD *)&v184[48] = *(_OWORD *)(a1 + 704);
    *(void *)&long long v182 = &PipelineCompilationData;
    *((void *)&v182 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = a4;
    *(void *)&long long v183 = "Portal_Opaque";
    *((void *)&v183 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = &v159;
    *(void *)double v184 = v158;
    *(void *)&v184[8] = 0;
    *(void *)&v184[16] = 0;
    *(void *)&v184[24] = &v186;
    *(_DWORD *)&v184[32] = 1;
    *(_WORD *)&v184[36] = 2;
    *(void *)&v184[40] = a2;
    long long v185 = v110;
    re::encodeMaterialPassForPortalScene((uint64_t)&v182);
    *(void *)&long long v158 = 0;
    DWORD2(v15re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
    re::rendergraph_helper::getSkyboxMeshPasses((uint64_t)&v182);
    re::rendergraph_helper::populateMeshPassArray<1ul,re::FixedInlineArray<re::rendergraph_helper::RenderPass,1ul>>((uint64_t)&v166, (uint64_t *)&v158, (uint64_t)&v182);
    long long v111 = *(_OWORD *)(a1 + 688);
    *(_OWORD *)&v184[48] = *(_OWORD *)(a1 + 704);
    *(void *)&long long v182 = &PipelineCompilationData;
    *((void *)&v182 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = a4;
    *(void *)&long long v183 = "Portal_Skybox";
    *((void *)&v183 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = &v159;
    *(void *)double v184 = v158;
    *(void *)&v184[8] = 0;
    *(void *)&v184[16] = 0;
    *(void *)&v184[24] = &v186;
    *(_DWORD *)&v184[32] = 1;
    *(_WORD *)&v184[36] = 2;
    *(void *)&v184[40] = a2;
    long long v185 = v111;
    re::encodeMaterialPassForPortalScene((uint64_t)&v182);
    *(void *)&long long v182 = 0;
    DWORD2(v182) = 0;
    re::rendergraph_helper::getTransparentMeshPasses(&v158);
    a1 = 0;
    a6 = 0;
    a2 = (float32x4_t *)&v183;
    do
    {
      unint64_t v52 = *((unsigned __int8 *)&v158 + a1 + 16);
      int v112 = *((unsigned __int8 *)&v159 + a1 + 1);
      uint64_t v50 = (uint64_t **)*((unsigned __int8 *)&v159 + a1 + 2);
      int v113 = *(_DWORD *)((char *)&v159 + a1 + 3);
      int v114 = *((unsigned __int8 *)&v159 + a1 + 7);
      uint64_t v155 = *(void *)((char *)&v158 + a1 + 8);
      uint64_t v115 = re::HashTable<unsigned long,re::MeshPassInfo,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(v167, &v155);
      if (v115)
      {
        if (a6 >= 7)
        {
          re::internal::assertLog((re::internal *)4, v116, "assertion failure: '%s' (%s:line %i) Capacity limit reached. DynamicInlineArray<T,N> cannot be resized.", "false", "ensureCapacity", 277);
          _os_crash();
          __break(1u);
LABEL_152:
          re::internal::assertLog((re::internal *)4, v124, "assertion failure: '%s' (%s:line %i) Capacity limit reached. DynamicInlineArray<T,N> cannot be resized.", "false", "ensureCapacity", 277);
          _os_crash();
          __break(1u);
          goto LABEL_153;
        }
        unint64_t v117 = &v184[24 * a6 - 16];
        *(void *)unint64_t v117 = v115;
        v117[8] = 1;
        *(_DWORD *)(v117 + 9) = v113;
        *(_DWORD *)(v117 + 13) = v52 | (v112 << 8) | (v50 << 16) | (v114 << 24);
        a6 = v182 + 1;
        *(void *)&long long v182 = v182 + 1;
        ++DWORD2(v182);
      }
      a1 += 24;
    }
    while (a1 != 168);
    *(void *)&long long v158 = &PipelineCompilationData;
    *((void *)&v158 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = a4;
    *(void *)&long long v159 = "Portal_Transparent";
    *((void *)&v159 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = &v183;
    *(void *)&long long v160 = a6;
    *((void *)&v160 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = &qword_26AF9C760;
    *(void *)&long long v161 = 1;
    *((void *)&v161 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = &v186;
    LODWORD(v162) = 2;
    WORD2(v162) = 2;
    uint64_t v163 = v153;
    long long v118 = *v146;
    long long v164 = *v145;
    long long v165 = v118;
    a2 = (float32x4_t *)&v158;
    re::encodeMaterialPassForPortalScene((uint64_t)&v158);
    *(void *)&long long v182 = 0;
    DWORD2(v182) = 0;
    re::rendergraph_helper::getRenderOnTopMeshPasses(&v158);
    uint64_t v119 = 0;
    a1 = 0;
    a6 = (unint64_t)&v183;
    do
    {
      int v120 = *((unsigned __int8 *)&v158 + v119 + 16);
      uint64_t v50 = (uint64_t **)*((unsigned __int8 *)&v159 + v119 + 1);
      int v121 = *((unsigned __int8 *)&v159 + v119 + 2);
      unint64_t v52 = *(unsigned int *)((char *)&v159 + v119 + 3);
      int v122 = *((unsigned __int8 *)&v159 + v119 + 7);
      uint64_t v155 = *(void *)((char *)&v158 + v119 + 8);
      uint64_t v123 = re::HashTable<unsigned long,re::MeshPassInfo,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(v167, &v155);
      if (v123)
      {
        if (a1 >= 8) {
          goto LABEL_152;
        }
        uint64_t v125 = &v184[24 * a1 - 16];
        *(void *)uint64_t v125 = v123;
        v125[8] = 1;
        *(_DWORD *)(v125 + 9) = v52;
        *(_DWORD *)(v125 + 13) = v120 | (v50 << 8) | (v121 << 16) | (v122 << 24);
        a1 = v182 + 1;
        *(void *)&long long v182 = v182 + 1;
        ++DWORD2(v182);
      }
      v119 += 24;
    }
    while (v119 != 192);
    *(void *)&long long v158 = &PipelineCompilationData;
    *((void *)&v158 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = a4;
    *(void *)&long long v159 = "Portal_RenderOnTop";
    *((void *)&v159 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = &v183;
    *(void *)&long long v160 = a1;
    *((void *)&v160 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = &qword_26AF9C760;
    *(void *)&long long v161 = 1;
    *((void *)&v161 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = &v186;
    LODWORD(v162) = 2;
    WORD2(v162) = 2;
    uint64_t v163 = v153;
    long long v126 = *v146;
    long long v164 = *v145;
    long long v165 = v126;
    re::encodeMaterialPassForPortalScene((uint64_t)&v158);
  }
  if (*(unsigned char *)(a7 + 3))
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9C708, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_26AF9C708))
    {
      qword_26AF9C700 = re::hashString((re *)"DepthBufferPatchAndStencilDecrement", v139);
      __cxa_guard_release(&qword_26AF9C708);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9C718, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_26AF9C718))
    {
      qword_26AF9C710 = re::hashString((re *)"DepthBufferPatchAndStencilDecrementNoFragmentFunction", v140);
      __cxa_guard_release(&qword_26AF9C718);
    }
    BOOL v127 = *(unsigned char *)(a7 + 1) == 0;
    unint64_t v128 = &qword_26AF9C710;
    if (!*(unsigned char *)(a7 + 1)) {
      unint64_t v128 = &qword_26AF9C700;
    }
    uint64_t v129 = *v128;
    uint64_t v130 = "DepthBufferPatchAndStencilDecrementNoFragmentFunction";
    *(void *)&long long v182 = v150;
    *((void *)&v182 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = v148;
    if (v127) {
      uint64_t v130 = "DepthBufferPatchAndStencilDecrement";
    }
    *(void *)&long long v183 = v149;
    *((void *)&v183 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = v130;
    *(void *)double v184 = v129;
    *(_OWORD *)&v184[8] = __const__ZN2re20FeatureStencilStates13getPortalInfoENS0_11PortalUsageEhh_kDecrementStInfo;
    v184[24] = 0x80;
    v184[9] = 0x80;
    v184[17] = 0x80;
    *(void *)&v184[32] = v153;
    *(void *)&v184[40] = v147;
    uint64_t v162 = 0;
    long long v160 = 0u;
    long long v161 = 0u;
    long long v158 = 0u;
    long long v159 = 0u;
    re::RenderGraphContext::getDefaultEncodeDrawCallDataStoreArgs(v153, (uint64_t *)&v158);
    re::encodeMeshPassForPortal((uint64_t)&v158, (uint64_t)&v182);
  }
  if (v191[0])
  {
    if (v193) {
      (*(void (**)(__n128))(*(void *)v191[0] + 40))(v99);
    }
    uint64_t v193 = 0;
    memset(v191, 0, sizeof(v191));
    ++v192;
  }
  if (v187 && v190) {
    (*(void (**)(__n128))(*(void *)v187 + 40))(v99);
  }
  unint64_t v208 = 0;
  ++v209;
  unint64_t v205 = 0;
  ++v206;
  v196[2] = 0;
  ++LODWORD(v196[3]);
  uint64_t result = *((void *)&v194 + 1);
  if (*((void *)&v194 + 1))
  {
    if (v195) {
      return (*(uint64_t (**)(__n128))(**((void **)&v194 + 1) + 40))(v99);
    }
  }
  return result;
}

void re::TechniqueTagFilter::~TechniqueTagFilter(re::TechniqueTagFilter *this)
{
}

uint64_t re::FixedInlineArray<re::TechniqueTagFilter,1ul>::~FixedInlineArray(uint64_t a1)
{
  return a1;
}

void *re::allocInfo_StencilPtInjectionNode(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9C720, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9C720))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF9C7A8, "StencilPtInjectionNode");
    __cxa_guard_release(&qword_26AF9C720);
  }
  return &unk_26AF9C7A8;
}

void re::initInfo_StencilPtInjectionNode(re *this, re::IntrospectionBase *a2)
{
  v25[0] = 0xF842934DFAA68D32;
  v25[1] = "StencilPtInjectionNode";
  re::StringID::destroyString((re::StringID *)v25);
  *((_OWORD *)this + 2) = v26;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9C728, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF9C728);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::introspect_RenderGraphNode((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "RenderGraphNode";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF9C780 = v7;
      uint64_t v8 = re::introspectionAllocator((re *)v7);
      uint64_t v10 = re::introspect_BOOL((re *)1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "frustumCulling";
      *(void *)(v11 + 16) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x10000000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF9C788 = v11;
      uint64_t v12 = re::introspectionAllocator((re *)v11);
      unint64_t v14 = re::IntrospectionInfo<re::DynamicArray<re::DynamicString>>::get(1, v13);
      uint64_t v15 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 72, 8);
      *(_DWORD *)uint64_t v15 = 1;
      *(void *)(v15 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "materialPassesOverride";
      *(void *)(v15 + 16) = v14;
      *(void *)(v15 + 24) = 0;
      *(void *)(v15 + 32) = 0x10800000005;
      *(_DWORD *)(v15 + 40) = 0;
      *(void *)(v15 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_26AF9C790 = v15;
      unint64_t v16 = re::introspectionAllocator((re *)v15);
      uint64_t v18 = re::introspect_BOOL((re *)1, v17);
      uint64_t v19 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v16 + 32))(v16, 72, 8);
      *(_DWORD *)uint64_t v19 = 1;
      *(void *)(v19 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "depthBufferPatchAndStencilDecrementNoFragmentFunction";
      *(void *)(v19 + 16) = v18;
      *(void *)(v19 + 24) = 0;
      *(void *)(v19 + 32) = 0x13000000006;
      *(_DWORD *)(v19 + 40) = 0;
      *(void *)(v19 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v19 + 56) = 0;
      *(_DWORD *)(v19 + 64) = 0;
      qword_26AF9C798 = v19;
      char v20 = re::introspectionAllocator((re *)v19);
      uint64_t v22 = re::introspect_BOOL((re *)1, v21);
      uint64_t v23 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v20 + 32))(v20, 72, 8);
      *(_DWORD *)uint64_t v23 = 1;
      *(void *)(v23 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "shouldRenderPortalsAndStencil";
      *(void *)(v23 + 16) = v22;
      *(void *)(v23 + 24) = 0;
      *(void *)(v23 + 32) = 0x13200000007;
      *(_DWORD *)(v23 + 40) = 0;
      *(void *)(v23 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v23 + 56) = 0;
      *(_DWORD *)(v23 + 64) = 0;
      qword_26AF9C7A0 = v23;
      __cxa_guard_release(&qword_26AF9C728);
    }
  }
  *((void *)this + 2) = 0x13800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 5;
  *((void *)this + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = &qword_26AF9C780;
  *((void *)this + 9) = re::internal::defaultConstruct<re::StencilPtInjectionNode>;
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::StencilPtInjectionNode>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::StencilPtInjectionNode>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::StencilPtInjectionNode>;
  re::IntrospectionRegistry::add(this, v3);
  long long v24 = v26;
}

re::RenderGraphNode *re::internal::defaultConstruct<re::StencilPtInjectionNode>(int a1, int a2, re::RenderGraphNode *this)
{
  uint64_t result = re::RenderGraphNode::RenderGraphNode(this);
  *(void *)uint64_t result = &unk_26E71EAE0;
  *((unsigned char *)result + 256) = 1;
  *((void *)result + 37) = 0;
  *((void *)result + 34) = 0;
  *((void *)result + 35) = 0;
  *((void *)result + 33) = 0;
  *((_DWORD *)result + 72) = 0;
  *((_WORD *)result + 152) = 0;
  *((unsigned char *)result + 306) = 1;
  return result;
}

void re::internal::defaultDestruct<re::StencilPtInjectionNode>(uint64_t a1, uint64_t a2, id *a3)
{
  re::DynamicArray<re::DynamicString>::deinit((uint64_t)(a3 + 33));
  re::RenderGraphNode::~RenderGraphNode(a3);
}

re::RenderGraphNode *re::internal::defaultConstructV2<re::StencilPtInjectionNode>(re::RenderGraphNode *a1)
{
  uint64_t result = re::RenderGraphNode::RenderGraphNode(a1);
  *(void *)uint64_t result = &unk_26E71EAE0;
  *((unsigned char *)result + 256) = 1;
  *((void *)result + 37) = 0;
  *((void *)result + 34) = 0;
  *((void *)result + 35) = 0;
  *((void *)result + 33) = 0;
  *((_DWORD *)result + 72) = 0;
  *((_WORD *)result + 152) = 0;
  *((unsigned char *)result + 306) = 1;
  return result;
}

void re::internal::defaultDestructV2<re::StencilPtInjectionNode>(id *a1)
{
  re::DynamicArray<re::DynamicString>::deinit((uint64_t)(a1 + 33));
  re::RenderGraphNode::~RenderGraphNode(a1);
}

uint64_t re::introspect_StencilPtInjectionNode(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"StencilPtInjectionNode", (uint64_t (*)(re::internal *))re::allocInfo_StencilPtInjectionNode, (re::IntrospectionBase *(*)(void))re::initInfo_StencilPtInjectionNode, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::StencilPtInjectionNode>, this);
}

void re::StencilPtInjectionNode::~StencilPtInjectionNode(id *this)
{
  re::DynamicArray<re::DynamicString>::deinit((uint64_t)(this + 33));
  re::RenderGraphNode::~RenderGraphNode(this);
}

{
  uint64_t vars8;

  re::DynamicArray<re::DynamicString>::deinit((uint64_t)(this + 33));
  re::RenderGraphNode::~RenderGraphNode(this);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::RenderGraphDataStore::tryGet<re::RenderGraphDataStoreWrapper<re::MeshRenderPassGroups>>(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = (unint64_t)"N2re27RenderGraphDataStoreWrapperINS_20MeshRenderPassGroupsEEE";
  if (((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_20MeshRenderPassGroupsEEE" & 0x8000000000000000) != 0)
  {
    long long v3 = (unsigned __int8 *)((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_20MeshRenderPassGroupsEEE" & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v4 = 5381;
    do
    {
      unint64_t v2 = v4;
      unsigned int v5 = *v3++;
      uint64_t v4 = (33 * v4) ^ v5;
    }
    while (v5);
  }
  unint64_t v7 = (a2 + (v2 << 6) + (v2 >> 2) - 0x61C8864680B583E9) ^ v2;
  uint64_t result = re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(a1 + 64, (uint64_t *)&v7);
  if (result) {
    return *(void *)result;
  }
  return result;
}

uint64_t re::RenderGraphDataStore::tryGet<re::MeshPassInfoData>(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = (unint64_t)"N2re16MeshPassInfoDataE";
  if (((unint64_t)"N2re16MeshPassInfoDataE" & 0x8000000000000000) != 0)
  {
    long long v3 = (unsigned __int8 *)((unint64_t)"N2re16MeshPassInfoDataE" & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v4 = 5381;
    do
    {
      unint64_t v2 = v4;
      unsigned int v5 = *v3++;
      uint64_t v4 = (33 * v4) ^ v5;
    }
    while (v5);
  }
  unint64_t v7 = (a2 + (v2 << 6) + (v2 >> 2) - 0x61C8864680B583E9) ^ v2;
  uint64_t result = re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(a1 + 64, (uint64_t *)&v7);
  if (result) {
    return *(void *)result;
  }
  return result;
}

void re::UploadMultiSceneConstantsNode::setup(re::UploadMultiSceneConstantsNode *this, re::RenderGraphBuilder *a2, re::RenderGraphDataStore *a3)
{
  *((unsigned char *)a2 + 592) = 1;
}

uint64_t re::UploadMultiSceneConstantsNode::execute(const char **this, re::RenderGraphContext *a2)
{
  uint64_t v131 = *MEMORY[0x263EF8340];
  uint64_t v4 = re::RenderGraphDataStore::tryGet<re::ProbeContext>(*((void *)a2 + 146), (int)"ProbeContext", "RenderFrame");
  unsigned int v5 = (void *)re::RenderGraphDataStore::tryGet<re::Slice<re::ClippingParametersEntry>>(*((void *)a2 + 146), (int)"Clipping", "RenderFrame");
  uint64_t v111 = re::RenderGraphDataStore::tryGet<re::Slice<unsigned short>>(*((void *)a2 + 146), (int)"Clipping", "RenderFrame");
  uint64_t v6 = &_MergedGlobals_468;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9C828, memory_order_acquire) & 1) == 0)
  {
LABEL_104:
    if (__cxa_guard_acquire(&qword_26AF9C828))
    {
      *uint64_t v6 = re::hashString((re *)"SceneArray", v107);
      __cxa_guard_release(v6 + 1);
    }
  }
  size_t v7 = strlen(this[4]);
  unint64_t v8 = 0x9E3779B97F4A7C17;
  if (v7)
  {
    MurmurHash3_x64_128((uint64_t)this[4], v7, 0, &v122);
    unint64_t v8 = (((unint64_t)&v123[8 * v122 - 0xC3910C8D016B07DLL] + (v122 >> 2) - 1) ^ v122) - 0x61C8864680B583E9;
  }
  long long v109 = this;
  uint64_t v9 = re::RenderGraphDataStore::get<re::SceneArrayData>(*((void *)a2 + 146), (v8 + (*v6 << 6) + ((unint64_t)*v6 >> 2)) ^ *v6);
  re::MaterialManager::resizeScenes(*(re::MaterialManager **)(*((void *)a2 + 1) + 24), *(void *)(v9 + 24));
  unint64_t v10 = v8;
  if ((atomic_load_explicit((atomic_uchar *volatile)v6 + 24, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9C838))
  {
    qword_26AF9C830 = re::hashString((re *)"ProjectiveMeshShadow", v108);
    __cxa_guard_release(&qword_26AF9C838);
  }
  unint64_t v11 = qword_26AF9C830;
  MurmurHash3_x64_128((uint64_t)"RenderFrame", 11, 0, &v122);
  uint64_t v115 = re::RenderGraphDataStore::tryGet<re::RenderGraphDataStoreWrapper<re::MeshShadowRenderingData>>(*((void *)a2 + 146), ((v11 << 6)- 0x61C8864680B583E9+ (v11 >> 2)+ (((unint64_t)&v123[8 * v122 - 0xC3910C8D016B07DLL] + (v122 >> 2) - 1) ^ v122)) ^ v11);
  if (*(void *)(v9 + 24))
  {
    unint64_t v12 = 0;
    int v13 = 0;
    long long v110 = (id *)(v4 + 8);
    unint64_t v113 = v8;
    int v114 = (id *)v4;
    uint64_t v112 = v9;
    do
    {
      int v118 = v13;
      unint64_t v14 = *(char **)(*(void *)(v9 + 40) + 8 * v12);
      size_t v15 = strlen(v14);
      if (v15)
      {
        MurmurHash3_x64_128((uint64_t)v14, v15, 0, &v122);
        unint64_t v16 = ((unint64_t)&v123[8 * v122 - 0xC3910C8D016B07DLL] + (v122 >> 2) - 1) ^ v122;
      }
      else
      {
        unint64_t v16 = 0;
      }
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9C848, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26AF9C848))
      {
        qword_26AF9C840 = re::hashString((re *)"LightContext", v89);
        __cxa_guard_release(&qword_26AF9C848);
      }
      unint64_t v17 = v16 - 0x61C8864680B583E9;
      uint64_t v18 = re::RenderGraphDataStore::tryGet<re::RenderGraphDataStoreWrapper<re::LightContexts>>(*((void *)a2 + 146), (v17 + (qword_26AF9C840 << 6) + ((unint64_t)qword_26AF9C840 >> 2)) ^ qword_26AF9C840);
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9C858, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26AF9C858))
      {
        qword_26AF9C850 = re::hashString((re *)"IBLContextOverride", v90);
        __cxa_guard_release(&qword_26AF9C858);
      }
      uint64_t v19 = *((void *)a2 + 146);
      unint64_t v20 = (unint64_t)"N2re23IBLContextOverrideScopeE";
      if (((unint64_t)"N2re23IBLContextOverrideScopeE" & 0x8000000000000000) != 0)
      {
        char v21 = (unsigned __int8 *)((unint64_t)"N2re23IBLContextOverrideScopeE" & 0x7FFFFFFFFFFFFFFFLL);
        uint64_t v22 = 5381;
        do
        {
          unint64_t v20 = v22;
          unsigned int v23 = *v21++;
          uint64_t v22 = (33 * v22) ^ v23;
        }
        while (v23);
      }
      unint64_t v122 = (((v17 + (qword_26AF9C850 << 6) + ((unint64_t)qword_26AF9C850 >> 2)) ^ qword_26AF9C850)
            - 0x61C8864680B583E9
            + (v20 << 6)
            + (v20 >> 2)) ^ v20;
      long long v24 = (uint64_t *)re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(v19 + 64, (uint64_t *)&v122);
      if (v24) {
        uint64_t v117 = *v24;
      }
      else {
        uint64_t v117 = 0;
      }
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9C868, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26AF9C868))
      {
        qword_26AF9C860 = re::hashString((re *)"RenderGraphDataPipeData", v91);
        __cxa_guard_release(&qword_26AF9C868);
      }
      unint64_t v25 = (float32x4_t *)re::RenderGraphDataStore::tryGet<re::SceneCRWSReferencePosition>(*((void *)a2 + 146), (v10 + (qword_26AF9C860 << 6) + ((unint64_t)qword_26AF9C860 >> 2)) ^ qword_26AF9C860);
      if (v14 && !v25) {
        unint64_t v25 = (float32x4_t *)re::RenderGraphDataStore::tryGet<re::SceneCRWSReferencePosition>(*((void *)a2 + 146), (v17 + (qword_26AF9C860 << 6) + ((unint64_t)qword_26AF9C860 >> 2)) ^ qword_26AF9C860);
      }
      if (v25) {
        float32x4_t v121 = *v25;
      }
      else {
        float32x4_t v121 = 0uLL;
      }
      long long v26 = (float32x4_t *)re::MaterialManager::sceneConstants(*(re::MaterialManager **)(*((void *)a2 + 1) + 24), v12);
      *long long v26 = v121;
      uint64_t v27 = re::RenderGraphDataStore::tryGet<re::RenderGraphDataStoreWrapper<re::MeshShadowPerSceneRenderingData>>(*((void *)a2 + 146), (v10 + (qword_26AF9C830 << 6) + ((unint64_t)qword_26AF9C830 >> 2)) ^ qword_26AF9C830);
      if (v14 && !v27) {
        uint64_t v27 = re::RenderGraphDataStore::tryGet<re::RenderGraphDataStoreWrapper<re::MeshShadowPerSceneRenderingData>>(*((void *)a2 + 146), (v17 + (qword_26AF9C830 << 6) + ((unint64_t)qword_26AF9C830 >> 2)) ^ qword_26AF9C830);
      }
      uint64_t v116 = v27;
      uint64_t v28 = (re::BufferTable *)re::MaterialManager::sceneBuffers(*(re::MaterialManager **)(*((void *)a2 + 1) + 24), v12);
      re::FrameContext::perFrameAlloc(*(re::FrameContext **)a2, 0x18000uLL, 0x100uLL, (uint64_t)&v122);
      uint64_t v6 = v123;
      unint64_t v29 = v124;
      if (v5)
      {
        unint64_t v30 = v5[1];
        if (v30)
        {
          uint64_t v4 = v18;
          this = (const char **)(v122 + v123);
          if (v30 >= 0x400) {
            uint64_t v31 = 1024;
          }
          else {
            uint64_t v31 = v5[1];
          }
          bzero((void *)(v122 + v123), 0x10000uLL);
          uint64_t v33 = 0;
          unint64_t v34 = 0;
          float32x4_t v35 = v121;
          do
          {
            unint64_t v36 = v5[1];
            if (v36 <= v34)
            {
              re::internal::assertLog((re::internal *)6, v32, *(double *)v35.i64, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v34, v36);
              _os_crash();
              __break(1u);
              goto LABEL_104;
            }
            uint64_t v37 = &this[v33];
            uint64_t v38 = (float32x4_t *)(*v5 + v33 * 8);
            float32x4_t v40 = v38[2];
            float32x4_t v39 = v38[3];
            float32x4_t v41 = v38[1];
            *(float32x4_t *)uint64_t v37 = *v38;
            *((float32x4_t *)v37 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = v41;
            *((float32x4_t *)v37 + 2) = v40;
            *((float32x4_t *)v37 + 3) = v39;
            v39.i32[0] = HIDWORD(this[v33 + 1]);
            char v42 = (__int32 *)&this[v33 + 3] + 1;
            char v43 = (__int32 *)&this[v33 + 5] + 1;
            v39.i32[1] = *v42;
            v39.i32[2] = *v43;
            float32x4_t v44 = vsubq_f32(v39, v35);
            *((_DWORD *)v37 + 3) = v44.i32[0];
            *char v42 = v44.i32[1];
            *char v43 = v44.i32[2];
            *((float16x8_t *)v37 + 3) = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmaxnmq_f32(vcvtq_f32_f16((float16x4_t)this[v33 + 6]), (float32x4_t)0)), vmaxnmq_f32(vcvtq_f32_f16((float16x4_t)this[v33 + 7]), (float32x4_t)0));
            ++v34;
            v33 += 8;
          }
          while (v31 != v34);
          uint64_t v18 = v4;
          if (v111)
          {
            unint64_t v45 = *(void *)(v111 + 8);
            if (v45)
            {
              if (v45 >= 0x4000) {
                uint64_t v46 = 0x4000;
              }
              else {
                uint64_t v46 = *(void *)(v111 + 8);
              }
              unint64_t v47 = (char *)(this + 0x2000);
              bzero(v47, 0x8000uLL);
              size_t v48 = 2 * v46;
              uint64_t v18 = v4;
              memcpy(v47, *(const void **)v111, v48);
            }
          }
        }
      }
      v120[0] = v29;
      v120[1] = v6;
      unint64_t v122 = 0x29136C0FCC2;
      uint64_t v49 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(v28, &v122);
      re::BufferTable::setBuffer(v28, *(unsigned __int8 *)(*((void *)v28 + 1) + 16 * v49 + 8), (const BufferView *)v120);
      uint64_t v50 = (re::BufferTable *)re::MaterialManager::lightBuffers(*(re::MaterialManager **)(*((void *)a2 + 1) + 24), v12);
      if (v18) {
        re::LightContexts::createConstantBuffer(v18 + 8, *(re::FrameContext **)a2, &v121, v50);
      }
      size_t v51 = v14;
      if (v117) {
        size_t v51 = *(char **)(v117 + 8);
      }
      uint64_t v52 = re::RenderGraphDataStore::tryGet<re::IBLContext>(*((void *)a2 + 146), (int)"IBLContext", v51);
      unint64_t v122 = 0;
      uint64_t v123 = 0;
      int v125 = 0;
      unint64_t v124 = 0;
      uint64_t v126 = 0;
      id v127 = 0;
      LODWORD(v12re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      if (v52)
      {
        uint64_t v53 = (id *)v52;
        re::ColorManager::computeWPCMatrix((float32x4_t *)(*(void *)(*((void *)a2 + 1) + 112) + 2032), *(void *)(*((void *)a2 + 1) + 88), (uint64_t)v119);
        unint64_t v54 = *(re::FrameContext **)a2;
        unint64_t v55 = (unint64_t *)v53;
      }
      else
      {
        unint64_t v54 = *(re::FrameContext **)a2;
        v119[0] = xmmword_23435FD50;
        v119[1] = xmmword_23435FD60;
        v119[2] = xmmword_23435FD80;
        uint64_t v53 = (id *)&v122;
        unint64_t v55 = &v122;
      }
      re::IBLContext::createConstantBuffer((uint64_t)v55, v54, v50, v119);
      uint64_t v56 = (re::TextureTable *)re::MaterialManager::sceneTextures(*(re::MaterialManager **)(*((void *)a2 + 1) + 24), v12);
      re::IBLContext::updateSceneTextures(v53, v56);
      if (v127)
      {

        id v127 = 0;
      }
      re::DynamicArray<re::IBL>::deinit((uint64_t)&v122);
      uint64_t v57 = *((void *)a2 + 146);
      MurmurHash3_x64_128((uint64_t)"VirtualEnvironmentProbeContextOverride", 38, 0, &v122);
      unint64_t v58 = v122;
      long long v59 = v123;
      size_t v60 = strlen(v14);
      unint64_t v61 = 0x9E3779B97F4A7C17;
      if (v60)
      {
        MurmurHash3_x64_128((uint64_t)v14, v60, 0, &v122);
        unint64_t v61 = (((unint64_t)&v123[8 * v122 - 0xC3910C8D016B07DLL] + (v122 >> 2) - 1) ^ v122)
            - 0x61C8864680B583E9;
      }
      unint64_t v62 = (unint64_t)"N2re38VirtualEnvironmentProbeContextOverrideE";
      if (((unint64_t)"N2re38VirtualEnvironmentProbeContextOverrideE" & 0x8000000000000000) != 0)
      {
        uint64_t v63 = (unsigned __int8 *)((unint64_t)"N2re38VirtualEnvironmentProbeContextOverrideE" & 0x7FFFFFFFFFFFFFFFLL);
        uint64_t v64 = 5381;
        do
        {
          unint64_t v62 = v64;
          unsigned int v65 = *v63++;
          uint64_t v64 = (33 * v64) ^ v65;
        }
        while (v65);
      }
      unint64_t v66 = ((unint64_t)&v59[8 * v58 - 0xC3910C8D016B07DLL] + (v58 >> 2) - 1) ^ v58;
      unint64_t v122 = ((((v66 >> 2) + (v66 << 6) + v61) ^ v66) - 0x61C8864680B583E9 + (v62 << 6) + (v62 >> 2)) ^ v62;
      uint64_t v67 = (uint64_t *)re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(v57 + 64, (uint64_t *)&v122);
      if (v67)
      {
        uint64_t v68 = *v67;
        simd_float4 v69 = v114;
        if (*v67)
        {
          uint64_t v70 = (re::VirtualEnvironmentProbeContext *)re::RenderGraphDataStore::tryGet<re::VirtualEnvironmentProbeContext>(*((void *)a2 + 146), (int)"VirtualEnvironmentProbeContext", *(char **)(v68 + 8));
          float v71 = *(float *)(v68 + 16) * *(float *)(v68 + 20);
          goto LABEL_61;
        }
      }
      else
      {
        simd_float4 v69 = v114;
      }
      uint64_t v70 = (re::VirtualEnvironmentProbeContext *)re::RenderGraphDataStore::tryGet<re::VirtualEnvironmentProbeContext>(*((void *)a2 + 146), (int)"VirtualEnvironmentProbeContext", v14);
      float v71 = 1.0;
LABEL_61:
      [**(id **)a2 supportsFamily:5001];
      if (v70)
      {
        unint64_t v72 = (re::TextureTable *)re::MaterialManager::sceneTextures(*(re::MaterialManager **)(*((void *)a2 + 1) + 24), v12);
        re::VirtualEnvironmentProbeContext::createConstantBuffer(v70, *(re::FrameContext **)a2, v50, v71);
        re::VirtualEnvironmentProbeContext::createTextureBuffer(v70, *(re::FrameContext **)a2, v50);
        re::VirtualEnvironmentProbeContext::updateSceneTextures(v70, v72);
      }
      else
      {
        uint64_t v126 = 0;
        uint64_t v123 = 0;
        unint64_t v124 = 0;
        unint64_t v122 = 0;
        int v125 = 0;
        long long v128 = xmmword_23435FD50;
        long long v129 = xmmword_23435FD60;
        long long v130 = xmmword_23435FD80;
        re::VirtualEnvironmentProbeContext::createConstantBuffer((re::VirtualEnvironmentProbeContext *)&v122, *(re::FrameContext **)a2, v50, v71);
        re::VirtualEnvironmentProbeContext::createTextureBuffer((re::VirtualEnvironmentProbeContext *)&v122, *(re::FrameContext **)a2, v50);
        re::DynamicArray<re::VirtualEnvironmentProbeSource>::deinit((uint64_t)&v122);
      }
      uint64_t v9 = v112;
      if (v69)
      {
        uint64_t v73 = (void *)re::MaterialManager::sceneTextures(*(re::MaterialManager **)(*((void *)a2 + 1) + 24), v12);
        id v74 = objc_msgSend(*v69, sel_textureType);
        if (v74 == (id)3)
        {
          unint64_t v122 = 0x1AA47CB53A9AC861;
          uint64_t v76 = (uint64_t *)&v122;
          size_t v77 = v73;
          unint64_t v78 = v69;
        }
        else
        {
          if (v74 != (id)5)
          {
            if (v74 == (id)6)
            {
              unint64_t v122 = 0x3F800981E521C7A1;
              re::TextureTable::setTexture(v73, (uint64_t *)&v122, v69);
              unint64_t v122 = 0;
              uint64_t v75 = 0x150A18CBFF11727ALL;
              goto LABEL_71;
            }
LABEL_73:
            *(void *)&v119[0] = 0x7831721862C9B2CBLL;
            unint64_t v122 = (unint64_t)v69[2];
            LODWORD(v123) = 0;
            HIDWORD(v123) = objc_msgSend(v69[2], sel_length);
            re::BufferTable::setBuffer(v28, (const re::WeakStringID *)v119, (uint64_t)&v122);
            if (v122) {

            }
            goto LABEL_75;
          }
          unint64_t v122 = 0x24E8D221D19BF998;
          re::TextureTable::setTexture(v73, (uint64_t *)&v122, v69);
          unint64_t v122 = 0;
          uint64_t v75 = 0x319D4D8796A12B1FLL;
LABEL_71:
          *(void *)&v119[0] = v75;
          uint64_t v76 = (uint64_t *)v119;
          size_t v77 = v73;
          unint64_t v78 = v110;
        }
        re::TextureTable::setTexture(v77, v76, v78);
        goto LABEL_73;
      }
LABEL_75:
      re::FrameContext::perFrameAlloc(*(re::FrameContext **)a2, 8uLL, 4uLL, (uint64_t)&v122);
      uint64_t v79 = 0;
      uint64_t v80 = v123;
      unint64_t v81 = v124;
      if (v115 && v116 && v122) {
        uint64_t v79 = *(void *)(v116 + 8);
      }
      *(void *)(v122 + v123) = v79;
      unint64_t v122 = 0x441AC0ECAF42AD04;
      unint64_t v82 = *(unsigned __int8 *)(*((void *)v28 + 1)
                               + 16
                               * re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(v28, &v122)+ 8);
      unint64_t v122 = v81;
      uint64_t v123 = v80;
      re::BufferTable::setBuffer(v28, v82, (const BufferView *)&v122);
      if (v115) {
        unint64_t v83 = *(unsigned int *)(v115 + 20);
      }
      else {
        unint64_t v83 = 0;
      }
      if (v83 <= 1) {
        uint64_t v84 = 1;
      }
      else {
        uint64_t v84 = v83;
      }
      re::FrameContext::perFrameAlloc(*(re::FrameContext **)a2, 96 * v84, 0x10uLL, (uint64_t)&v122);
      uint64_t v85 = v123;
      unint64_t v86 = v124;
      uint64_t v87 = (_OWORD *)(v122 + v123);
      if (v83)
      {
        memcpy(v87, *(const void **)(v115 + 48), 96 * v83);
      }
      else
      {
        v87[4] = 0u;
        v87[5] = 0u;
        _OWORD v87[2] = 0u;
        v87[3] = 0u;
        *uint64_t v87 = 0u;
        v87[1] = 0u;
      }
      unint64_t v10 = v113;
      unint64_t v122 = 0xDFC20BDF4EDA5B3;
      unint64_t v88 = *(unsigned __int8 *)(*((void *)v28 + 1)
                               + 16
                               * re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(v28, &v122)+ 8);
      unint64_t v122 = v86;
      uint64_t v123 = v85;
      re::BufferTable::setBuffer(v28, v88, (const BufferView *)&v122);
      unint64_t v12 = (v118 + 1);
      int v13 = v118 + 1;
    }
    while (*(void *)(v112 + 24) > v12);
  }
  uint64_t v92 = re::RenderGraphDataStore::tryGet<re::AnchorTransformData>(*((void *)a2 + 146), (int)"AnchorTransformData", (char *)v109[4]);
  if (v92)
  {
    uint64_t v93 = v92;
    re::FrameContext::perFrameAlloc(*(re::FrameContext **)a2, *(void *)(v92 + 16) << 8, 0x100uLL, (uint64_t)&v122);
    double v94 = v123;
    unint64_t v95 = v124;
    if (*(void *)(v93 + 16))
    {
      uint64_t v96 = 0;
      unint64_t v97 = 0;
      uint64_t v98 = (char *)(v123 + v122 + 208);
      do
      {
        __n128 v99 = (_OWORD *)(*(void *)(v93 + 32) + v96);
        long long v101 = v99[2];
        long long v100 = v99[3];
        long long v102 = v99[1];
        *((_OWORD *)v98 - 9) = *v99;
        *((_OWORD *)v98 - re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v102;
        *((_OWORD *)v98 - 7) = v101;
        *((_OWORD *)v98 - 6) = v100;
        simd_float4x4 v132 = __invert_f4(*(simd_float4x4 *)(v98 - 144));
        *(simd_float4x4 *)(v98 - 20re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v132;
        *((_DWORD *)v98 - 6) = v132.columns[2].i32[0];
        *((void *)v98 - 4) = vzip1q_s32((int32x4_t)v132.columns[0], (int32x4_t)v132.columns[1]).u64[0];
        *((_DWORD *)v98 - 2) = v132.columns[2].i32[1];
        *((void *)v98 - 2) = vtrn2q_s32((int32x4_t)v132.columns[0], (int32x4_t)v132.columns[1]).u64[0];
        *((_DWORD *)v98 + 2) = v132.columns[2].i32[2];
        *(void *)uint64_t v98 = vzip1q_s32(vdupq_laneq_s32((int32x4_t)v132.columns[0], 2), vdupq_laneq_s32((int32x4_t)v132.columns[1], 2)).u64[0];
        v132.columns[0].i64[0] = *((void *)v98 - 18);
        v132.columns[1].i32[0] = *((_DWORD *)v98 - 34);
        v132.columns[2].i64[0] = *((void *)v98 - 16);
        v132.columns[3].i64[0] = *((void *)v98 - 14);
        int v103 = *((_DWORD *)v98 - 26);
        v132.columns[1].i32[1] = *((_DWORD *)v98 - 30);
        *((_DWORD *)v98 - 1re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v132.columns[3].i32[0];
        *((int32x2_t *)v98 - 10) = vzip1_s32(*(int32x2_t *)v132.columns[0].f32, *(int32x2_t *)v132.columns[2].f32);
        *((_DWORD *)v98 - 14) = v132.columns[3].i32[1];
        *((int32x2_t *)v98 - re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = vzip2_s32(*(int32x2_t *)v132.columns[0].f32, *(int32x2_t *)v132.columns[2].f32);
        *((_DWORD *)v98 - 10) = v103;
        *((void *)v98 - 6) = v132.columns[1].i64[0];
        ++v97;
        v98 += 256;
        v96 += 64;
      }
      while (v97 < *(void *)(v93 + 16));
    }
  }
  else
  {
    re::FrameContext::perFrameAlloc(*(re::FrameContext **)a2, 0x100uLL, 0x100uLL, (uint64_t)&v122);
    double v94 = v123;
    unint64_t v95 = v124;
    uint64_t v104 = (_OWORD *)(v122 + v123);
    *uint64_t v104 = xmmword_23435FD50;
    v104[1] = xmmword_23435FD60;
    v104[2] = xmmword_23435FD80;
    v104[3] = xmmword_23435FBB0;
    v104[4] = xmmword_23435FD50;
    v104[5] = xmmword_23435FD60;
    v104[6] = xmmword_23435FD80;
    v104[7] = xmmword_23435FBB0;
    v104[8] = xmmword_23435FD50;
    v104[9] = xmmword_23435FD60;
    v104[10] = xmmword_23435FD80;
    v104[11] = xmmword_23435FD50;
    v104[12] = xmmword_23435FD60;
    v104[13] = xmmword_23435FD80;
  }
  size_t v105 = *(re::BufferTable **)(*(void *)(*((void *)a2 + 1) + 24) + 720);
  *(void *)&v119[0] = 0x478674A22C6B2A1ALL;
  unint64_t v122 = v95;
  uint64_t v123 = v94;
  return re::BufferTable::setBuffer(v105, (const re::WeakStringID *)v119, (const BufferView *)&v122);
}

void re::UploadTonemapConstantsNode::setup(re::UploadTonemapConstantsNode *this, re::RenderGraphBuilder *a2, re::RenderGraphDataStore *a3)
{
  *((unsigned char *)a2 + 592) = 1;
}

void re::UploadTonemapConstantsNode::execute(re::UploadTonemapConstantsNode *this, re::RenderGraphContext *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9C878, memory_order_acquire) & 1) == 0)
  {
    unint64_t v16 = (re *)__cxa_guard_acquire(&qword_26AF9C878);
    if (v16)
    {
      qword_26AF9C870 = re::getCombinedScopeHash(v16, v17, v18);
      __cxa_guard_release(&qword_26AF9C878);
    }
  }
  uint64_t v4 = re::RenderGraphDataStore::tryGet<re::TonemapParametersData>(*((void *)a2 + 146), qword_26AF9C870);
  uint64_t v5 = *((void *)a2 + 2);
  uint64_t v6 = *(void **)(*(void *)(*((void *)a2 + 1) + 24) + 656);
  re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this + 272, 0, 0, &v24);
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  uint64_t v25 = 0;
  long long v28 = xmmword_234414BE0;
  uint64_t v29 = 1;
  objc_msgSend(v24, sel_replaceRegion_mipmapLevel_withBytes_bytesPerRow_, &v25, 0, v5 + 176, 4096);
  uint64_t v23 = 0xB3E5B3C154101;
  re::TextureTable::setTexture(v6, &v23, &v24);
  uint64_t v23 = 0;
  re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this + 288, 0, 0, &v22);
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  uint64_t v25 = 0;
  long long v28 = xmmword_234414BE0;
  uint64_t v29 = 1;
  objc_msgSend(v22, sel_replaceRegion_mipmapLevel_withBytes_bytesPerRow_, &v25, 0, v5 + 4272, 4096);
  uint64_t v21 = 0x645EADD8982CBD05;
  re::TextureTable::setTexture(v6, &v21, &v22);
  uint64_t v21 = 0;
  re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this + 304, 0, 0, &v20);
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  uint64_t v25 = 0;
  long long v28 = xmmword_234414BE0;
  uint64_t v29 = 1;
  objc_msgSend(v20, sel_replaceRegion_mipmapLevel_withBytes_bytesPerRow_, &v25, 0, v5 + 8368, 4096);
  uint64_t v19 = 0x259D0C231F804627;
  re::TextureTable::setTexture(v6, &v19, &v20);
  uint64_t v19 = 0;
  size_t v7 = (id *)re::RenderGraphContext::metalBuffer((uint64_t)a2, (uint64_t)this + 256);
  unint64_t v8 = objc_msgSend(*v7, sel_contents);
  *unint64_t v8 = *(_OWORD *)(v4 + 8);
  long long v9 = *(_OWORD *)(v4 + 40);
  long long v10 = *(_OWORD *)(v4 + 72);
  long long v11 = *(_OWORD *)(v4 + 24);
  unint64_t v8[3] = *(_OWORD *)(v4 + 56);
  v8[4] = v10;
  v8[1] = v11;
  v8[2] = v9;
  long long v12 = *(_OWORD *)(v4 + 104);
  long long v13 = *(_OWORD *)(v4 + 120);
  long long v14 = *(_OWORD *)(v4 + 88);
  *((_DWORD *)v8 + 32) = *(_DWORD *)(v4 + 136);
  v8[6] = v12;
  v8[7] = v13;
  v8[5] = v14;
  size_t v15 = *(re::BufferTable **)(*(void *)(*((void *)a2 + 1) + 24) + 720);
  uint64_t v25 = 0x1C6D7B14F4E32CD0;
  re::BufferTable::setBuffer(v15, (const re::WeakStringID *)&v25, (uint64_t)v7);
  if (v20) {

  }
  if (v22) {
  if (v24)
  }
}

void re::UploadMultiSceneConstantsNode::~UploadMultiSceneConstantsNode(id *this)
{
  re::RenderGraphNode::~RenderGraphNode(this);
  JUMPOUT(0x237DBCBD0);
}

void re::UploadTonemapConstantsNode::~UploadTonemapConstantsNode(id *this)
{
  re::RenderGraphNode::~RenderGraphNode(this);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::RenderGraphDataStore::get<re::SceneArrayData>(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = (unint64_t)"N2re14SceneArrayDataE";
  if (((unint64_t)"N2re14SceneArrayDataE" & 0x8000000000000000) != 0)
  {
    long long v3 = (unsigned __int8 *)((unint64_t)"N2re14SceneArrayDataE" & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v4 = 5381;
    do
    {
      unint64_t v2 = v4;
      unsigned int v5 = *v3++;
      uint64_t v4 = (33 * v4) ^ v5;
    }
    while (v5);
  }
  unsigned int v6 = 0x7FFFFFFF;
  if (*(void *)(a1 + 64))
  {
    unint64_t v7 = (a2 + (v2 << 6) + (v2 >> 2) - 0x61C8864680B583E9) ^ v2;
    unsigned int v8 = *(_DWORD *)(*(void *)(a1 + 72) + 4 * (v7 % *(unsigned int *)(a1 + 88)));
    if (v8 != 0x7FFFFFFF)
    {
      uint64_t v9 = *(void *)(a1 + 80);
      unsigned int v6 = *(_DWORD *)(*(void *)(a1 + 72) + 4 * (v7 % *(unsigned int *)(a1 + 88)));
      if (*(void *)(v9 + 24 * v8 + 8) != v7)
      {
        while (1)
        {
          unsigned int v6 = *(_DWORD *)(v9 + 24 * *(unsigned int *)(*(void *)(a1 + 72) + 4 * (v7 % *(unsigned int *)(a1 + 88)))) & 0x7FFFFFFF;
          if (v6 == 0x7FFFFFFF) {
            break;
          }
          if (*(void *)(v9 + 24 * v6 + 8) == v7) {
            return *(void *)(*(void *)(a1 + 80) + 24 * v6 + 16);
          }
        }
        unsigned int v6 = 0x7FFFFFFF;
      }
    }
  }
  return *(void *)(*(void *)(a1 + 80) + 24 * v6 + 16);
}

uint64_t re::RenderGraphDataStore::tryGet<re::RenderGraphDataStoreWrapper<re::LightContexts>>(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = (unint64_t)"N2re27RenderGraphDataStoreWrapperINS_13LightContextsEEE";
  if (((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_13LightContextsEEE" & 0x8000000000000000) != 0)
  {
    long long v3 = (unsigned __int8 *)((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_13LightContextsEEE" & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v4 = 5381;
    do
    {
      unint64_t v2 = v4;
      unsigned int v5 = *v3++;
      uint64_t v4 = (33 * v4) ^ v5;
    }
    while (v5);
  }
  unint64_t v7 = (a2 + (v2 << 6) + (v2 >> 2) - 0x61C8864680B583E9) ^ v2;
  uint64_t result = re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(a1 + 16, (uint64_t *)&v7);
  if (result) {
    return *(void *)result;
  }
  return result;
}

_anonymous_namespace_ *re::recordSortingDebugInformation(_anonymous_namespace_ *result, _anonymous_namespace_ *a2)
{
  unint64_t v2 = *(re::DynamicString **)(*(void *)result + 24);
  if (v2)
  {
    uint64_t v4 = *(void *)a2;
    if (*(void *)a2 && *((void *)a2 + 1) != 0)
    {
      unsigned int v6 = result;
      uint64_t v7 = *(unsigned int *)(v4 + 80);
      if (v7)
      {
        uint64_t v8 = 0;
        uint64_t v9 = (int *)(*(void *)(v4 + 64) + 8);
        while (1)
        {
          int v10 = *v9;
          v9 += 10;
          if (v10 < 0) {
            break;
          }
          if (v7 == ++v8)
          {
            LODWORD(vre::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_DWORD *)(v4 + 80);
            break;
          }
        }
      }
      else
      {
        LODWORD(vre::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      }
      if (v7 != v8)
      {
        uint64_t v11 = v8;
        do
        {
          long long v12 = (void *)(*(void *)(v4 + 64) + 40 * v11);
          unint64_t v14 = v12[2];
          unint64_t v13 = v12[3];
          unint64_t v15 = v12[4];
          uint64_t v33 = a2;
          unint64_t v34 = v2;
          float32x4_t v35 = v6;
          re::recordSortingDebugInformation(re::RenderGraphContext &,re::MeshSortingContext &)::$_0::operator()((_anonymous_namespace_ *)&v33, v14, v13, "RenderPassGroup", 0);
          uint64_t result = re::recordSortingDebugInformation(re::RenderGraphContext &,re::MeshSortingContext &)::$_0::operator()((_anonymous_namespace_ *)&v33, v14, v15, "FadeGroup", 1);
          if (*(_DWORD *)(v4 + 80) <= (v8 + 1)) {
            int v16 = v8 + 1;
          }
          else {
            int v16 = *(_DWORD *)(v4 + 80);
          }
          int v17 = v8;
          while (1)
          {
            uint64_t v11 = (v17 + 1);
            if (v16 - 1 == v17) {
              break;
            }
            ++v17;
            LODWORD(vre::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v11;
            if ((*(_DWORD *)(*(void *)(v4 + 64) + 40 * v11 + 8) & 0x80000000) != 0) {
              goto LABEL_22;
            }
          }
          LODWORD(vre::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v16;
LABEL_22:
          ;
        }
        while (v7 != v8);
        uint64_t v4 = *(void *)a2;
      }
      uint64_t v18 = *(unsigned int *)(v4 + 32);
      if (v18)
      {
        uint64_t v19 = 0;
        id v20 = (int *)(*(void *)(v4 + 16) + 8);
        while (1)
        {
          int v21 = *v20;
          v20 += 30;
          if (v21 < 0) {
            break;
          }
          if (v18 == ++v19)
          {
            LODWORD(v19) = *(_DWORD *)(v4 + 32);
            break;
          }
        }
      }
      else
      {
        LODWORD(v19) = 0;
      }
      if (v18 != v19)
      {
        uint64_t v22 = v19;
        unint64_t v30 = (_anonymous_namespace_ *)((char *)v6 + 1336);
        do
        {
          uint64_t v23 = *(void *)(v4 + 16) + 120 * v22;
          unint64_t v25 = *(void *)(v23 + 16);
          uint64_t v24 = *(void *)(v23 + 24);
          uint64_t v26 = *(unsigned int *)(v23 + 32);
          re::DynamicString::format(v2, (re::Allocator *)"%llu", (re::DynamicString *)&v31, v24);
          if (*((unsigned char *)v6 + 1332)) {
            re::DrawCallRecorder::savePerEntityDebugInformation(v30, v25, (const re::DynamicString *)&v33, (const re::DynamicString *)&v31);
          }
          if (v31 && (v32 & 1) != 0) {
            (*(void (**)(void))(*(void *)v31 + 40))();
          }
          uint64_t v27 = v33;
          if (v33 && (v34 & 1) != 0) {
            uint64_t v27 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v33 + 40))();
          }
          re::DynamicString::format(v2, (re::Allocator *)"%d", (re::DynamicString *)&v31, v26);
          if (*((unsigned char *)v6 + 1332)) {
            re::DrawCallRecorder::savePerEntityDebugInformation(v30, v25, (const re::DynamicString *)&v33, (const re::DynamicString *)&v31);
          }
          if (v31 && (v32 & 1) != 0) {
            (*(void (**)(void))(*(void *)v31 + 40))();
          }
          uint64_t result = v33;
          if (v33 && (v34 & 1) != 0) {
            uint64_t result = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v33 + 40))();
          }
          if (*(_DWORD *)(v4 + 32) <= (v19 + 1)) {
            int v28 = v19 + 1;
          }
          else {
            int v28 = *(_DWORD *)(v4 + 32);
          }
          while (1)
          {
            uint64_t v22 = (v19 + 1);
            if (v28 - 1 == v19) {
              break;
            }
            LODWORD(v19) = v19 + 1;
            int v29 = v22;
            if ((*(_DWORD *)(*(void *)(v4 + 16) + 120 * v22 + 8) & 0x80000000) != 0) {
              goto LABEL_56;
            }
          }
          int v29 = v28;
LABEL_56:
          LODWORD(v19) = v29;
        }
        while (v18 != v29);
      }
    }
  }
  return result;
}

_anonymous_namespace_ *re::recordSortingDebugInformation(re::RenderGraphContext &,re::MeshSortingContext &)::$_0::operator()(_anonymous_namespace_ *result, unint64_t a2, unint64_t a3, const char *a4, char a5)
{
  uint64_t v5 = **(void **)result;
  if (*(void *)(v5 + 144))
  {
    unint64_t v7 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * (a3 ^ (a3 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a3 ^ (a3 >> 30))) >> 27));
    unint64_t v8 = v7 ^ (v7 >> 31);
    uint64_t v9 = *(unsigned int *)(*(void *)(v5 + 152) + 4 * (v8 % *(unsigned int *)(v5 + 168)));
    if (v9 != 0x7FFFFFFF)
    {
      unint64_t v13 = result;
      uint64_t v14 = *(void *)(v5 + 160);
      uint64_t v15 = *(void *)(v14 + 176 * v9 + 16);
      if (v15 == a3)
      {
LABEL_7:
        uint64_t v17 = *(void *)(*(void *)result + 8);
        if (*(void *)v17)
        {
          uint64_t v18 = *(unsigned int *)(*(void *)(v17 + 8) + 4 * (v8 % *(unsigned int *)(v17 + 24)));
          if (v18 != 0x7FFFFFFF)
          {
            uint64_t v19 = *(void *)(v17 + 16);
            uint64_t v20 = *(void *)(v19 + (v18 << 7) + 16);
            if (v20 == a3)
            {
LABEL_13:
              if (v15 != a3)
              {
                while (1)
                {
                  LODWORD(v9) = *(_DWORD *)(v14 + 176 * v9 + 8) & 0x7FFFFFFF;
                  if (v9 == 0x7FFFFFFF) {
                    break;
                  }
                  if (*(void *)(v14 + 176 * v9 + 16) == a3) {
                    goto LABEL_18;
                  }
                }
                LODWORD(v9) = 0x7FFFFFFF;
              }
LABEL_18:
              uint64_t v22 = v14 + 176 * v9;
              while (v20 != a3)
              {
                uint64_t v18 = *(_DWORD *)(v19 + (v18 << 7) + 8) & 0x7FFFFFFF;
                if (v18 == 0x7FFFFFFF)
                {
                  LODWORD(v1re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0x7FFFFFFF;
                  break;
                }
                uint64_t v20 = *(void *)(v19 + (v18 << 7) + 16);
              }
              float v23 = *(float *)(v19 + ((unint64_t)v18 << 7) + 32);
              if (*(_WORD *)(v22 + 96))
              {
                uint64_t v24 = (_anonymous_namespace_ *)re::DynamicString::format(*((re::DynamicString **)result + 1), (re::Allocator *)"group sort-point based on %d custom sort point(s)", (re::DynamicString *)&v31, *(unsigned __int16 *)(v22 + 96));
              }
              else
              {
              }
              uint64_t v25 = *((void *)v13 + 2);
              if (v32) {
                uint64_t v26 = *(unsigned char **)&v33[7];
              }
              else {
                uint64_t v26 = v33;
              }
              re::DynamicString::format(*((re::DynamicString **)v13 + 1), (re::Allocator *)"%llu with group distance %f (%s)", (re::DynamicString *)&v29, a3, v23, v26);
              if (*(unsigned char *)(v25 + 1332)) {
                re::DrawCallRecorder::savePerEntityDebugInformation((re::DrawCallRecorder *)(v25 + 1336), a2, (const re::DynamicString *)v34, (const re::DynamicString *)&v29);
              }
              if (v29 && (v30 & 1) != 0) {
                (*(void (**)(void))(*(void *)v29 + 40))();
              }
              if (*(void *)&v34[0] && (BYTE8(v34[0]) & 1) != 0) {
                (*(void (**)(void))(**(void **)&v34[0] + 40))();
              }
              uint64_t v27 = *((void *)v13 + 2);
              if (*(unsigned char *)(v27 + 1332))
              {
                unint64_t v29 = a3;
                *(void *)&v34[0] = 0;
                BYTE8(v34[0]) = a5;
                long long v28 = *(_OWORD *)(v22 + 48);
                v34[1] = *(_OWORD *)(v22 + 32);
                void v34[2] = v28;
                v34[3] = *(_OWORD *)(v14 + 176 * v9 + 80);
                re::HashTable<unsigned long long,re::DrawCallRecorder::RenderPassGroupDebugInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add(v27 + 1432, (uint64_t *)&v29, v34);
              }
              uint64_t result = v31;
              if (v31)
              {
                if (v32) {
                  return (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v31 + 40))();
                }
              }
            }
            else
            {
              uint64_t v21 = v18;
              while (1)
              {
                uint64_t v21 = *(_DWORD *)(v19 + (v21 << 7) + 8) & 0x7FFFFFFF;
                if (v21 == 0x7FFFFFFF) {
                  break;
                }
                if (*(void *)(v19 + (v21 << 7) + 16) == a3) {
                  goto LABEL_13;
                }
              }
            }
          }
        }
      }
      else
      {
        uint64_t v16 = v9;
        while (1)
        {
          LODWORD(v16) = *(_DWORD *)(v14 + 176 * v16 + 8) & 0x7FFFFFFF;
          if (v16 == 0x7FFFFFFF) {
            break;
          }
          if (*(void *)(v14 + 176 * v16 + 16) == a3) {
            goto LABEL_7;
          }
        }
      }
    }
  }
  return result;
}

uint64_t re::HashTable<float,unsigned char,re::Hash<float>,re::EqualTo<float>,true,false>::add<int>(uint64_t a1, float *a2, _DWORD *a3)
{
  unint64_t v6 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (*(unsigned int *)a2 ^ ((unint64_t)*(unsigned int *)a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*(unsigned int *)a2 ^ ((unint64_t)*(unsigned int *)a2 >> 30))) >> 27));
  unint64_t v7 = v6 ^ (v6 >> 31);
  float v8 = *a2;
  if (*(void *)a1)
  {
    unint64_t v9 = v7 % *(unsigned int *)(a1 + 24);
    uint64_t v10 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v9);
    if (v10 != 0x7FFFFFFF)
    {
      uint64_t v11 = *(void *)(a1 + 16);
      if (*(float *)(v11 + 24 * v10 + 12) == v8)
      {
LABEL_6:
        uint64_t v12 = v11 + 24 * v10;
        return v12 + 16;
      }
      while (1)
      {
        LODWORD(v10) = *(_DWORD *)(v11 + 24 * v10 + 8) & 0x7FFFFFFF;
        if (v10 == 0x7FFFFFFF) {
          break;
        }
        if (*(float *)(v11 + 24 * v10 + 12) == v8) {
          goto LABEL_6;
        }
      }
    }
  }
  else
  {
    LODWORD(v9) = 0;
  }
  uint64_t v13 = *(unsigned int *)(a1 + 36);
  if (v13 == 0x7FFFFFFF)
  {
    uint64_t v13 = *(unsigned int *)(a1 + 32);
    int v14 = v13;
    if (v13 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<float,unsigned char,re::Hash<float>,re::EqualTo<float>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      LODWORD(v9) = v7 % *(unsigned int *)(a1 + 24);
      int v14 = *(_DWORD *)(a1 + 32);
      float v8 = *a2;
    }
    *(_DWORD *)(a1 + 32) = v14 + 1;
    uint64_t v15 = *(void *)(a1 + 16);
    int v16 = *(_DWORD *)(v15 + 24 * v13 + 8);
  }
  else
  {
    uint64_t v15 = *(void *)(a1 + 16);
    int v16 = *(_DWORD *)(v15 + 24 * v13 + 8);
    *(_DWORD *)(a1 + 36) = v16 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v15 + 24 * v13 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v16 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + 24 * v13 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 24 * v13 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * v9);
  *(void *)(*(void *)(a1 + 16) + 24 * v13) = v7;
  *(float *)(*(void *)(a1 + 16) + 24 * v13 + 12) = v8;
  *(unsigned char *)(*(void *)(a1 + 16) + 24 * v13 + 16) = *a3;
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * v9) = v13;
  ++*(_DWORD *)(a1 + 28);
  ++*(_DWORD *)(a1 + 40);
  uint64_t v12 = *(void *)(a1 + 16) + 24 * v13;
  return v12 + 16;
}

void re::RenderGraphCameraSetupNode::setupDrawCallsForCamera(uint64_t a1, double a2, double a3, float32x4_t a4, double a5, float32x4_t a6)
{
  uint64_t v6 = a1;
  uint64_t v274 = *MEMORY[0x263EF8340];
  float v8 = *(void **)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v213 = *(void *)(a1 + 24);
  uint64_t v214 = *(void *)(a1 + 40);
  uint64_t v215 = *(void *)(a1 + 48);
  uint64_t v216 = *(void *)(a1 + 32);
  unint64_t v265 = 0;
  int v266 = 0;
  unint64_t v268 = 0;
  int v269 = 0;
  char v271 = 0;
  char v231 = 0;
  uint64_t v9 = *(void *)(v8[1] + 88);
  if (v9)
  {
    v236.i64[0] = 0x7FA75CCDD0CC4AC6;
    v236.i64[1] = (uint64_t)"overrides:disablefrustumculling";
    re::DebugSettingsManager::getWithErrorCode<BOOL>(v9, &v236, &v231);
    re::StringID::destroyString((re::StringID *)&v236);
  }
  if (*(unsigned char *)(v6 + 64) && *(unsigned char *)(v7 + 472) && !v231)
  {
    *(_WORD *)uint64_t v272 = 256;
    re::buildCullingFrustum(v7 + 64, (_DWORD *)(v7 + 144), *(unsigned __int8 *)(v7 + 490), v272, (uint64_t)&v236, a4, a6);
    re::DynamicInlineArray<re::DynamicInlineArray<re::PlaneF,6ul>,2ul>::move(&v265, (unint64_t *)&v236);
    ++v266;
    re::DynamicInlineArray<re::DynamicInlineArray<re::Vector4<float>,8ul>,2ul>::move(&v268, &v252);
    ++v269;
    char v271 = v264;
    if (v252)
    {
      uint64_t v10 = &v253;
      uint64_t v11 = &v253 + 18 * v252;
      do
      {
        *uint64_t v10 = 0;
        ++*((_DWORD *)v10 + 2);
        v10 += 18;
      }
      while (v10 != v11);
    }
    if (v236.i64[0])
    {
      uint64_t v12 = v237;
      uint64_t v13 = &v237[7 * v236.i64[0]];
      do
      {
        *(void *)uint64_t v12 = 0;
        ++*((_DWORD *)v12 + 2);
        v12 += 7;
      }
      while (v12 != v13);
    }
  }
  uint64_t v14 = *(void *)(*v8 + 24);
  int v229 = 0;
  long long v227 = 0u;
  long long v228 = 0u;
  long long v226 = 0u;
  uint64_t v230 = 0x7FFFFFFFLL;
  uint64_t v212 = v14;
  re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)&v227, v14, 3);
  uint64_t v15 = *(void **)(v6 + 8);
  int v16 = *(void **)(v6 + 16);
  uint64_t v17 = *(void *)(v6 + 24);
  uint64_t v217 = *(void *)v6;
  uint64_t v218 = *(void *)(v6 + 56);
  uint64_t v18 = *(void *)(**(void **)v6 + 24);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9C890, memory_order_acquire) & 1) == 0) {
    goto LABEL_200;
  }
  while (1)
  {
    unint64_t v19 = qword_26AF9C888;
    uint64_t v20 = *(const char **)(v17 + 8);
    size_t v21 = strlen(v20);
    unint64_t v22 = 0x9E3779B97F4A7C17;
    if (v21)
    {
      MurmurHash3_x64_128((uint64_t)v20, v21, 0, (unint64_t *)&v236);
      unint64_t v22 = ((v236.i64[1] - 0x61C8864680B583E9 + (v236.i64[0] << 6) + ((unint64_t)v236.i64[0] >> 2)) ^ v236.i64[0])
          - 0x61C8864680B583E9;
    }
    uint64_t v23 = re::RenderGraphDataStore::tryGet<re::MeshSortingCollection>(*(void *)(v217 + 1168), ((v19 >> 2) + (v19 << 6) + v22) ^ v19);
    if (!v23) {
      goto LABEL_152;
    }
    uint64_t v17 = v23;
    *(void *)&long long v226 = v23;
    if (!v15[6])
    {
      re::internal::assertLog((re::internal *)6, v24, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, 0, 0);
      _os_crash();
      __break(1u);
LABEL_198:
      uint64_t v235 = 0;
      long long v238 = 0u;
      long long v239 = 0u;
      memset(v237, 0, sizeof(v237));
      float32x4_t v236 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)uint64_t v272 = 136315906;
      *(void *)&v272[4] = "operator[]";
      *(_WORD *)&v272[12] = 1024;
      *(_DWORD *)&v272[14] = 797;
      *(_WORD *)&v272[18] = 2048;
      *(void *)&v272[20] = 0;
      *(_WORD *)&v272[28] = 2048;
      *(void *)&v272[30] = 0;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_199;
    }
    re::RenderCamera::computeLocalTransform((re::RenderCamera *)(v15 + 8), (uint64_t)&v236);
    int32x4_t v25 = (int32x4_t)vmulq_f32((float32x4_t)v237[1], (float32x4_t)v237[1]);
    v25.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v25, 2), vadd_f32(*(float32x2_t *)v25.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v25.i8, 1))).u32[0];
    float32x2_t v26 = vrsqrte_f32((float32x2_t)v25.u32[0]);
    float32x2_t v27 = vmul_f32(v26, vrsqrts_f32((float32x2_t)v25.u32[0], vmul_f32(v26, v26)));
    float32x4_t v234 = vnegq_f32(vmulq_n_f32((float32x4_t)v237[1], vmul_f32(v27, vrsqrts_f32((float32x2_t)v25.u32[0], vmul_f32(v27, v27))).f32[0]));
    uint64_t v28 = v15[9];
    v233.i64[0] = v15[8];
    v233.i64[1] = v28;
    if (!v16[8]) {
      goto LABEL_198;
    }
    if (v16[3]) {
      break;
    }
LABEL_199:
    uint64_t v235 = 0;
    long long v238 = 0u;
    long long v239 = 0u;
    memset(v237, 0, sizeof(v237));
    float32x4_t v236 = 0u;
    uint64_t v6 = &_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v272 = 136315906;
    *(void *)&v272[4] = "operator[]";
    *(_WORD *)&v272[12] = 1024;
    *(_DWORD *)&v272[14] = 797;
    *(_WORD *)&v272[18] = 2048;
    *(void *)&v272[20] = 0;
    *(_WORD *)&v272[28] = 2048;
    *(void *)&v272[30] = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_200:
    if (__cxa_guard_acquire(&qword_26AF9C890))
    {
      qword_26AF9C888 = re::hashString((re *)"RenderGraphDataPipeData", v202);
      __cxa_guard_release(&qword_26AF9C890);
    }
  }
  uint64_t v29 = 0;
  char v30 = (float32x4_t *)v16[10];
  uint64_t v31 = (_OWORD *)v16[5];
  float32x4_t v32 = *v30;
  float32x4_t v33 = v30[1];
  float32x4_t v34 = v30[2];
  float32x4_t v35 = v30[3];
  long long v36 = v31[1];
  long long v37 = v31[2];
  long long v38 = v31[3];
  *(_OWORD *)uint64_t v272 = *v31;
  *(_OWORD *)&v272[16] = v36;
  *(_OWORD *)&v272[32] = v37;
  long long v273 = v38;
  do
  {
    *(float32x4_t *)((char *)&v236 + v29) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v32, COERCE_FLOAT(*(_OWORD *)&v272[v29])), v33, *(float32x2_t *)&v272[v29], 1), v34, *(float32x4_t *)&v272[v29], 2), v35, *(float32x4_t *)&v272[v29], 3);
    v29 += 16;
  }
  while (v29 != 64);
  float32x4_t v222 = (float32x4_t)v237[0];
  float32x4_t v223 = v236;
  float32x4_t v220 = (float32x4_t)v238;
  float32x4_t v221 = (float32x4_t)v237[1];
  memset(v272, 0, 36);
  *(void *)&v272[36] = 0x7FFFFFFFLL;
  re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::init((uint64_t)v272, v18, 3);
  uint64_t v225 = *(unsigned int *)(v17 + 128);
  uint64_t v41 = 0;
  if (v225)
  {
    char v42 = (int *)(*(void *)(v17 + 112) + 8);
    while (1)
    {
      int v43 = *v42;
      v42 += 32;
      if (v43 < 0) {
        break;
      }
      if (v225 == ++v41)
      {
        LODWORD(v4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = *(_DWORD *)(v17 + 128);
        break;
      }
    }
  }
  uint64_t v209 = v18;
  unint64_t v210 = v8;
  uint64_t v211 = v7;
  if (v225 != v41)
  {
    uint64_t v63 = v41;
    do
    {
      uint64_t v64 = *(void *)(v17 + 112);
      unsigned int v65 = (__n128 *)(v64 + (v63 << 7));
      unint64_t v66 = (float32x4_t *)&v65[2];
      float32x4_t v236 = (float32x4_t)xmmword_23435FD50;
      v237[0] = xmmword_23435FD60;
      v237[1] = xmmword_23435FD80;
      long long v238 = xmmword_23435FBB0;
      LOBYTE(v235) = 0;
      re::RenderGraphMeshNodeBase::computeSortDistance((uint64_t)&v65[2], &v236, &v65[4], v65 + 5, (float32x2_t *)&v233, &v234, 0, (uint64_t)&v235, 0.0, 0.0, *(double *)v39.i64, v40);
      int v68 = v67;
      LODWORD(v235) = v67;
      v236.i32[0] = 0;
      simd_float4 v69 = (unsigned char *)re::HashTable<float,unsigned char,re::Hash<float>,re::EqualTo<float>,true,false>::add<int>((uint64_t)v272, (float *)&v235, &v236);
      char v70 = (*v69)++;
      unint64_t v73 = v65[1].n128_u64[0];
      unint64_t v72 = v65 + 1;
      unint64_t v71 = v73;
      *(__int32 *)((char *)&v236.i32[1] + 3) = 0;
      v236.i64[0] = 0;
      unint64_t v74 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * (v73 ^ (v73 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v73 ^ (v73 >> 30))) >> 27));
      unint64_t v75 = v74 ^ (v74 >> 31);
      if ((void)v227)
      {
        unint64_t v76 = v75 % DWORD2(v228);
        uint64_t v77 = *(unsigned int *)(*((void *)&v227 + 1) + 4 * v76);
        if (v77 != 0x7FFFFFFF)
        {
          while (*(void *)(v228 + 40 * v77 + 16) != v71)
          {
            LODWORD(v77) = *(_DWORD *)(v228 + 40 * v77 + 8) & 0x7FFFFFFF;
            if (v77 == 0x7FFFFFFF) {
              goto LABEL_50;
            }
          }
          uint64_t v79 = v228 + 40 * v77;
          goto LABEL_52;
        }
      }
      else
      {
        LODWORD(v76) = 0;
      }
LABEL_50:
      unsigned int v78 = re::HashTable<unsigned long long,re::MeshSortingContext::MeshSortGroupSortData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove((uint64_t)&v227, v76, v75, v72, (uint64_t *)&v236);
      ++HIDWORD(v230);
      uint64_t v79 = v228 + 40 * v78;
LABEL_52:
      uint64_t v80 = v79 + 24;
      *(_DWORD *)(v79 + 24) = v68;
      *(unsigned char *)(v79 + 32) = v70;
      uint64_t v81 = v64 + (v63 << 7);
      *(_WORD *)(v80 + 9) = *(_WORD *)(v81 + 113);
      if (*(unsigned char *)(v81 + 112))
      {
        float32x4_t v82 = *v66;
        float32x4_t v83 = v66[1];
        uint32x4_t v84 = (uint32x4_t)vcgtq_f32(*v66, v83);
        v84.i32[3] = v84.i32[2];
        unsigned int v85 = vmaxvq_u32(v84);
        v86.i64[0] = 0;
        v86.i32[2] = 0;
        float32x4_t v87 = 0uLL;
        if ((v85 & 0x80000000) == 0)
        {
          v88.i64[0] = 0x3F0000003F000000;
          v88.i64[1] = 0x3F0000003F000000;
          float32x4_t v87 = vmulq_f32(vaddq_f32(v82, v83), v88);
          v89.i64[0] = 0x3F0000003F000000;
          v89.i64[1] = 0x3F0000003F000000;
          float32x4_t v86 = vmulq_f32(vaddq_f32(v82, v83), v89);
        }
        float32x4_t v90 = vsubq_f32(v233, v87);
        int32x4_t v91 = (int32x4_t)vmulq_f32(v90, v90);
        v91.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v91, 2), vadd_f32(*(float32x2_t *)v91.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v91.i8, 1))).u32[0];
        float32x2_t v92 = vrsqrte_f32((float32x2_t)v91.u32[0]);
        float32x2_t v93 = vmul_f32(v92, vrsqrts_f32((float32x2_t)v91.u32[0], vmul_f32(v92, v92)));
        float32x4_t v94 = vsubq_f32(v83, v82);
        v94.i32[3] = 0;
        float32x4_t v95 = vmaxnmq_f32(v94, (float32x4_t)0);
        float32x4_t v96 = vmulq_f32(v95, v95);
        v86.f32[3] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v96, 2), vaddq_f32(v96, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v96.f32, 1))).f32[0])* 0.5;
        float32x4_t v224 = vmulq_n_f32(v90, vmul_f32(v93, vrsqrts_f32((float32x2_t)v91.u32[0], vmul_f32(v93, v93))).f32[0]);
        float32x4_t v97 = vaddq_f32(v86, vmulq_n_f32(v224, v86.f32[3]));
        uint64_t v98 = (float32x4_t *)(v64 + (v63 << 7));
        float32x4_t v100 = v98[6];
        __n128 v99 = v98 + 6;
        float32x4_t v101 = v100;
        float32x4_t v102 = vmulq_f32(v101, v101);
        if (fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v102, 2), vaddq_f32(v102, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v102.f32, 1))).f32[0]) >= 1.0e-10)
        {
          float32x4_t v103 = v234;
          if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9C928, memory_order_acquire) & 1) == 0)
          {
            float32x4_t v207 = v97;
            float32x4_t v208 = v86;
            float32x4_t v205 = v103;
            float32x4_t v206 = v101;
            int v113 = __cxa_guard_acquire(&qword_26AF9C928);
            float32x4_t v103 = v205;
            float32x4_t v101 = v206;
            float32x4_t v97 = v207;
            float32x4_t v86 = v208;
            if (v113)
            {
              re::Defaults::floatValue((re::Defaults *)"depthBiasGroupNormalAngleCosine", v114, (uint64_t)&v236);
              float v115 = v236.f32[1];
              if (!v236.i8[0]) {
                float v115 = 0.5;
              }
              _MergedGlobals_469 = LODWORD(v115);
              __cxa_guard_release(&qword_26AF9C928);
              float32x4_t v103 = v205;
              float32x4_t v101 = v206;
              float32x4_t v97 = v207;
              float32x4_t v86 = v208;
            }
          }
          float32x4_t v104 = vmulq_f32(v101, vnegq_f32(v103));
          if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v104, 2), vaddq_f32(v104, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v104.f32, 1))).f32[0] > *(float *)&_MergedGlobals_469)float32x4_t v97 = v86; {
        }
          }
        float32x4_t v105 = vaddq_f32(v220, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v223, v97.f32[0]), v222, *(float32x2_t *)v97.f32, 1), v221, v97, 2));
        float v106 = 1.0;
        if (v105.f32[3] > 0.0)
        {
          v105.f32[0] = v105.f32[2] / v105.f32[3];
          if ((float)(v105.f32[2] / v105.f32[3]) > 0.9999) {
            v105.f32[0] = 0.9999;
          }
          if (v105.f32[0] >= 0.0) {
            float v106 = v105.f32[0];
          }
          else {
            float v106 = 0.0;
          }
        }
        float v107 = nextafterf(v106, 10.0);
        float32x4_t v108 = vmulq_f32(v224, *v99);
        float32x4_t v39 = vaddq_f32(v108, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v108.f32, 1));
        float v109 = v107 - v106;
        if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v108, 2), v39).f32[0] <= 0.0) {
          float v110 = -256.0;
        }
        else {
          float v110 = 256.0;
        }
        *(float *)(v80 + 4) = v109 * v110;
      }
      else
      {
        *(_DWORD *)(v80 + 4) = 0;
      }
      unsigned int v111 = *(_DWORD *)(v17 + 128);
      if (v111 <= (int)v41 + 1) {
        unsigned int v111 = v41 + 1;
      }
      while (1)
      {
        uint64_t v63 = (v41 + 1);
        if (v111 - 1 == v41) {
          break;
        }
        LODWORD(v4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = v41 + 1;
        unsigned int v112 = v63;
        if ((*(_DWORD *)(*(void *)(v17 + 112) + (v63 << 7) + 8) & 0x80000000) != 0) {
          goto LABEL_76;
        }
      }
      unsigned int v112 = v111;
LABEL_76:
      LODWORD(v4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = v112;
    }
    while (v225 != v112);
  }
  uint64_t v44 = v217;
  if (!HIDWORD(v228)
    || re::RenderGraphDataStore::tryGet<re::MeshSortGroupCameraData>(*(void *)(v217 + 1168), *(void *)(*(void *)(v217 + 40) + 48)))
  {
    goto LABEL_29;
  }
  uint64_t v116 = *(void *)(v217 + 1168);
  unint64_t v117 = (unint64_t)"N2re23MeshSortGroupCameraDataE";
  if (((unint64_t)"N2re23MeshSortGroupCameraDataE" & 0x8000000000000000) != 0)
  {
    int v118 = (unsigned __int8 *)((unint64_t)"N2re23MeshSortGroupCameraDataE" & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v119 = 5381;
    do
    {
      unint64_t v117 = v119;
      unsigned int v120 = *v118++;
      uint64_t v119 = (33 * v119) ^ v120;
    }
    while (v120);
  }
  unint64_t v121 = (*(void *)(*(void *)(v217 + 40) + 48) - 0x61C8864680B583E9 + (v117 << 6) + (v117 >> 2)) ^ v117;
  uint64_t v122 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v116 + 8) + 32))(*(void *)(v116 + 8), 56, 8);
  *(void *)uint64_t v122 = &unk_26E71EE80;
  *(_OWORD *)(v122 + 24) = 0u;
  *(_DWORD *)(v122 + 40) = 0;
  *(_OWORD *)(v122 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
  *(void *)(v122 + 44) = 0x7FFFFFFFLL;
  re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(v122 + 8, v209, 3);
  unint64_t v123 = *(void *)(v116 + 64);
  if (v123
    && (unint64_t v123 = v121 % *(unsigned int *)(v116 + 88),
        uint64_t v124 = *(unsigned int *)(*(void *)(v116 + 72) + 4 * v123),
        v124 != 0x7FFFFFFF))
  {
    uint64_t v131 = *(void *)(v116 + 80);
    while (*(void *)(v131 + 24 * v124 + 8) != v121)
    {
      LODWORD(v124) = *(_DWORD *)(v131 + 24 * v124) & 0x7FFFFFFF;
      if (v124 == 0x7FFFFFFF) {
        goto LABEL_88;
      }
    }
    uint64_t v130 = v131 + 24 * v124;
  }
  else
  {
LABEL_88:
    uint64_t v125 = *(unsigned int *)(v116 + 100);
    if (v125 == 0x7FFFFFFF)
    {
      uint64_t v125 = *(unsigned int *)(v116 + 96);
      int v126 = v125;
      if (v125 == *(_DWORD *)(v116 + 88))
      {
        re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(v116 + 64, 2 * *(_DWORD *)(v116 + 92));
        LODWORD(v123) = v121 % *(unsigned int *)(v116 + 88);
        int v126 = *(_DWORD *)(v116 + 96);
      }
      *(_DWORD *)(v116 + 96) = v126 + 1;
      uint64_t v127 = *(void *)(v116 + 80);
      int v128 = *(_DWORD *)(v127 + 24 * v125);
    }
    else
    {
      uint64_t v127 = *(void *)(v116 + 80);
      int v128 = *(_DWORD *)(v127 + 24 * v125);
      *(_DWORD *)(v116 + 100) = v128 & 0x7FFFFFFF;
    }
    uint64_t v129 = 24 * v125;
    *(_DWORD *)(v127 + v129) = v128 | 0x80000000;
    *(_DWORD *)(*(void *)(v116 + 80) + v129) = *(_DWORD *)(*(void *)(v116 + 80) + 24 * v125) & 0x80000000 | *(_DWORD *)(*(void *)(v116 + 72) + 4 * v123);
    *(void *)(*(void *)(v116 + 80) + 24 * v125 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v121;
    *(void *)(*(void *)(v116 + 80) + 24 * v125 + 16) = v122;
    *(_DWORD *)(*(void *)(v116 + 72) + 4 * v123) = v125;
    ++*(_DWORD *)(v116 + 92);
    ++*(_DWORD *)(v116 + 104);
    uint64_t v130 = *(void *)(v116 + 80) + 24 * v125;
  }
  uint64_t v132 = *(void *)(v130 + 16);
  uint64_t v44 = v217;
  if ((long long *)(v132 + 8) != &v227)
  {
    if (*(void *)(v132 + 8))
    {
      uint64_t v133 = v132 + 8;
      if ((void)v227)
      {
        re::HashTable<unsigned long long,re::MeshSortingContext::MeshSortGroupSortData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::copy(v133, (uint64_t)&v227);
        ++*(_DWORD *)(v132 + 48);
      }
      else
      {
        re::HashTable<unsigned long long,re::RenderGraphTargetHandle,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear(v133);
      }
    }
    else if ((void)v227)
    {
      if (HIDWORD(v228) <= 3) {
        signed int v201 = 3;
      }
      else {
        signed int v201 = HIDWORD(v228);
      }
      re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(v132 + 8, v227, v201);
      re::HashTable<unsigned long long,re::MeshSortingContext::MeshSortGroupSortData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::copy(v132 + 8, (uint64_t)&v227);
    }
  }
LABEL_29:
  uint64_t v45 = re::RenderGraphDataStore::tryGet<re::RenderGraphDataStoreWrapper<re::MeshRenderPassGroups>>(*(void *)(v44 + 1168), *(void *)(*(void *)(v44 + 40) + 48));
  uint64_t v48 = v218;
  if (v45) {
    BOOL v49 = v218 == 0;
  }
  else {
    BOOL v49 = 0;
  }
  if (v49)
  {
    uint64_t v48 = v45 + 8;
LABEL_150:
    float v8 = v210;
    uint64_t v7 = v211;
  }
  else
  {
    float v8 = v210;
    uint64_t v7 = v211;
    if (!v218)
    {
      uint64_t v50 = *(void *)(v44 + 1168);
      unint64_t v51 = (unint64_t)"N2re27RenderGraphDataStoreWrapperINS_20MeshRenderPassGroupsEEE";
      if (((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_20MeshRenderPassGroupsEEE" & 0x8000000000000000) != 0)
      {
        uint64_t v52 = (unsigned __int8 *)((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_20MeshRenderPassGroupsEEE" & 0x7FFFFFFFFFFFFFFFLL);
        uint64_t v53 = 5381;
        do
        {
          unint64_t v51 = v53;
          unsigned int v54 = *v52++;
          uint64_t v53 = (33 * v53) ^ v54;
        }
        while (v54);
      }
      unint64_t v55 = (*(void *)(*(void *)(v44 + 40) + 48) - 0x61C8864680B583E9 + (v51 << 6) + (v51 >> 2)) ^ v51;
      uint64_t v56 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v50 + 8) + 32))(*(void *)(v50 + 8), 56, 8);
      float32x4_t v236 = 0u;
      memset(v237, 0, 20);
      *(void *)((char *)&v237[1] + 4) = 0x7FFFFFFFLL;
      re::HashTable<unsigned long long,re::MeshSortingCollection::GroupData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)&v236, v209, 3);
      *(void *)uint64_t v56 = &unk_26E71EE40;
      *(_DWORD *)(v56 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(float32x4_t *)(v56 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v236;
      float32x4_t v236 = 0uLL;
      *(void *)(v56 + 24) = *(void *)&v237[0];
      *(void *)&v237[0] = 0;
      *(void *)(v56 + 32) = *((void *)&v237[0] + 1);
      *(void *)(v56 + 40) = *(void *)&v237[1];
      *(_OWORD *)((char *)v237 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = xmmword_23436F740;
      re::HashTable<unsigned long long,re::MeshSortingCollection::GroupData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)&v236);
      unint64_t v57 = *(void *)(v50 + 64);
      if (!v57) {
        goto LABEL_39;
      }
      unint64_t v57 = v55 % *(unsigned int *)(v50 + 88);
      uint64_t v58 = *(unsigned int *)(*(void *)(v50 + 72) + 4 * v57);
      if (v58 == 0x7FFFFFFF) {
        goto LABEL_39;
      }
      uint64_t v136 = *(void *)(v50 + 80);
      if (*(void *)(v136 + 24 * v58 + 8) == v55)
      {
LABEL_107:
        uint64_t v135 = v136 + 24 * v58;
      }
      else
      {
        while (1)
        {
          LODWORD(v5re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_DWORD *)(v136 + 24 * v58) & 0x7FFFFFFF;
          if (v58 == 0x7FFFFFFF) {
            break;
          }
          if (*(void *)(v136 + 24 * v58 + 8) == v55) {
            goto LABEL_107;
          }
        }
LABEL_39:
        uint64_t v59 = *(unsigned int *)(v50 + 100);
        if (v59 == 0x7FFFFFFF)
        {
          uint64_t v59 = *(unsigned int *)(v50 + 96);
          int v60 = v59;
          if (v59 == *(_DWORD *)(v50 + 88))
          {
            re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(v50 + 64, 2 * *(_DWORD *)(v50 + 92));
            LODWORD(v57) = v55 % *(unsigned int *)(v50 + 88);
            int v60 = *(_DWORD *)(v50 + 96);
          }
          *(_DWORD *)(v50 + 96) = v60 + 1;
          uint64_t v61 = *(void *)(v50 + 80);
          int v62 = *(_DWORD *)(v61 + 24 * v59);
        }
        else
        {
          uint64_t v61 = *(void *)(v50 + 80);
          int v62 = *(_DWORD *)(v61 + 24 * v59);
          *(_DWORD *)(v50 + 100) = v62 & 0x7FFFFFFF;
        }
        uint64_t v134 = 24 * v59;
        *(_DWORD *)(v61 + v134) = v62 | 0x80000000;
        *(_DWORD *)(*(void *)(v50 + 80) + v134) = *(_DWORD *)(*(void *)(v50 + 80) + 24 * v59) & 0x80000000 | *(_DWORD *)(*(void *)(v50 + 72) + 4 * v57);
        *(void *)(*(void *)(v50 + 80) + 24 * v59 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v55;
        *(void *)(*(void *)(v50 + 80) + 24 * v59 + 16) = v56;
        *(_DWORD *)(*(void *)(v50 + 72) + 4 * v57) = v59;
        ++*(_DWORD *)(v50 + 92);
        ++*(_DWORD *)(v50 + 104);
        uint64_t v135 = *(void *)(v50 + 80) + 24 * v59;
      }
      uint64_t v48 = *(void *)(v135 + 16) + 8;
    }
    uint64_t v137 = *(unsigned int *)(v17 + 176);
    if (v137)
    {
      uint64_t v138 = 0;
      unint64_t v139 = (int *)(*(void *)(v17 + 160) + 8);
      while (1)
      {
        int v140 = *v139;
        v139 += 44;
        if (v140 < 0) {
          break;
        }
        if (v137 == ++v138)
        {
          LODWORD(v13re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_DWORD *)(v17 + 176);
          break;
        }
      }
    }
    else
    {
      LODWORD(v13re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
    }
    if (v137 != v138)
    {
      uint64_t v141 = v138;
      uint64_t v219 = v48;
      while (1)
      {
        uint64_t v142 = *(void *)(v17 + 160);
        uint64_t v143 = v142 + 176 * v141;
        unint64_t v146 = *(void *)(v143 + 16);
        uint64_t v145 = (void *)(v143 + 16);
        unint64_t v144 = v146;
        LOBYTE(v237[0]) = 0;
        v236.i64[0] = 0;
        v236.i16[4] = 0;
        LOBYTE(v240) = 1;
        unint64_t v147 = 0x94D049BB133111EBLL
             * ((0xBF58476D1CE4E5B9 * (v146 ^ (v146 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v146 ^ (v146 >> 30))) >> 27));
        unint64_t v148 = v147 ^ (v147 >> 31);
        if (*(void *)v48)
        {
          unint64_t v149 = v148 % *(unsigned int *)(v48 + 24);
          uint64_t v150 = *(unsigned int *)(*(void *)(v48 + 8) + 4 * v149);
          if (v150 != 0x7FFFFFFF)
          {
            uint64_t v151 = *(void *)(v48 + 16);
            while (*(void *)(v151 + (v150 << 7) + 16) != v144)
            {
              uint64_t v150 = *(_DWORD *)(v151 + (v150 << 7) + 8) & 0x7FFFFFFF;
              if (v150 == 0x7FFFFFFF) {
                goto LABEL_124;
              }
            }
            unint64_t v153 = v151 + (v150 << 7);
            goto LABEL_126;
          }
        }
        else
        {
          LODWORD(v149) = 0;
        }
LABEL_124:
        unsigned int v152 = re::HashTable<unsigned long long,re::MeshRenderPassGroups::RenderPassGroupSortData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(v48, v149, v148, v145, (uint64_t *)&v236);
        ++*(_DWORD *)(v48 + 40);
        unint64_t v153 = *(void *)(v48 + 16) + ((unint64_t)v152 << 7);
LABEL_126:
        unint64_t v154 = v153 + 32;
        uint64_t v155 = v142 + 176 * v141;
        *(unsigned char *)(v154 + 5) = *(unsigned char *)(v155 + 64);
        *(_WORD *)(v154 + 6) = *(_WORD *)(v155 + 65);
        int v156 = *(unsigned __int8 *)(v155 + 112);
        if (*(unsigned char *)(v154 + 16)) {
          BOOL v157 = 0;
        }
        else {
          BOOL v157 = v156 == 0;
        }
        if (!v157)
        {
          if (*(unsigned char *)(v154 + 16)) {
            BOOL v158 = v156 == 0;
          }
          else {
            BOOL v158 = 0;
          }
          if (v158)
          {
            *(unsigned char *)(v154 + 16) = 0;
          }
          else
          {
            if (*(unsigned char *)(v154 + 16)) {
              BOOL v159 = 1;
            }
            else {
              BOOL v159 = v156 == 0;
            }
            if (v159)
            {
              uint64_t v160 = v142 + 176 * v141;
              long long v162 = *(_OWORD *)(v160 + 128);
              long long v163 = *(_OWORD *)(v160 + 144);
              *(void *)(v154 + 64) = *(void *)(v160 + 160);
            }
            else
            {
              *(unsigned char *)(v154 + 16) = 1;
              long long v161 = (_OWORD *)(v142 + 176 * v141);
              long long v162 = v161[8];
              long long v163 = v161[9];
              long long v46 = v161[10];
              *(_OWORD *)(v154 + 64) = v46;
            }
            *(_OWORD *)(v154 + 32) = v162;
            *(_OWORD *)(v154 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v163;
          }
        }
        float32x4_t v236 = (float32x4_t)xmmword_23435FD50;
        v237[0] = xmmword_23435FD60;
        v237[1] = xmmword_23435FD80;
        long long v238 = xmmword_23435FBB0;
        char v232 = 5;
        LOBYTE(v235) = 0;
        re::RenderGraphMeshNodeBase::computeSortDistance((uint64_t)(v145 + 2), &v236, &v232, (__n128 *)(v142 + 176 * v141 + 80), (float32x2_t *)&v233, &v234, 0, (uint64_t)&v235, 0.0, 0.0, *(double *)&v46, v47);
        __int32 v165 = v164;
        v236.i32[0] = v164;
        LODWORD(v235) = 0;
        uint64_t v166 = (unsigned char *)re::HashTable<float,unsigned char,re::Hash<float>,re::EqualTo<float>,true,false>::add<int>((uint64_t)v272, v236.f32, &v235);
        char v167 = (*v166)++;
        *(_DWORD *)unint64_t v154 = v165;
        *(unsigned char *)(v154 + 4) = v167;
        unsigned int v168 = *(_DWORD *)(v17 + 176);
        if (v168 <= (int)v138 + 1) {
          unsigned int v168 = v138 + 1;
        }
        uint64_t v48 = v219;
        while (1)
        {
          uint64_t v141 = (v138 + 1);
          if (v168 - 1 == v138) {
            break;
          }
          LODWORD(v13re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v138 + 1;
          unsigned int v169 = v141;
          if ((*(_DWORD *)(*(void *)(v17 + 160) + 176 * v141 + 8) & 0x80000000) != 0) {
            goto LABEL_149;
          }
        }
        unsigned int v169 = v168;
LABEL_149:
        LODWORD(v13re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v169;
        if (v137 == v169) {
          goto LABEL_150;
        }
      }
    }
  }
  *((void *)&v226 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = v48;
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)v272);
LABEL_152:
  if (*(unsigned char *)(v217 + 1332)) {
    re::recordSortingDebugInformation((_anonymous_namespace_ *)v217, (_anonymous_namespace_ *)&v226);
  }
  uint64_t v170 = *(void *)(*(void *)(v216 + 16) + 32);
  memset(v272, 0, 36);
  *(void *)&v272[36] = 0x7FFFFFFFLL;
  re::HashTable<unsigned long,re::DrawTable,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::init((uint64_t)v272, v212, 3);
  size_t v171 = strlen(*(const char **)(v213 + 8));
  unint64_t v172 = 0x9E3779B97F4A7C17;
  if (v171)
  {
    MurmurHash3_x64_128(*(void *)(v213 + 8), v171, 0, (unint64_t *)&v236);
    unint64_t v172 = ((v236.i64[1] - 0x61C8864680B583E9 + (v236.i64[0] << 6) + ((unint64_t)v236.i64[0] >> 2)) ^ v236.i64[0])
         - 0x61C8864680B583E9;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9C8A0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9C8A0))
  {
    qword_26AF9C898 = re::hashString((re *)"DynamicFunctionConstants", v203);
    __cxa_guard_release(&qword_26AF9C8A0);
  }
  uint64_t v173 = re::RenderGraphDataStore::tryGet<re::DynamicFunctionConstantsData>(v8[146], (v172 + (qword_26AF9C898 << 6) + ((unint64_t)qword_26AF9C898 >> 2)) ^ qword_26AF9C898);
  if (v173) {
    uint64_t v174 = v173 + 8;
  }
  else {
    uint64_t v174 = 0;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9C8B0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9C8B0))
  {
    qword_26AF9C8A8 = re::hashString((re *)"LightContext", v204);
    __cxa_guard_release(&qword_26AF9C8B0);
  }
  uint64_t v175 = re::RenderGraphDataStore::tryGet<re::RenderGraphDataStoreWrapper<re::LightContexts>>(v8[146], (v172 + (qword_26AF9C8A8 << 6) + ((unint64_t)qword_26AF9C8A8 >> 2)) ^ qword_26AF9C8A8);
  uint64_t v176 = 0;
  uint64_t v177 = *(void *)(v214 + 8);
  uint64_t v178 = *(void *)(v216 + 8);
  uint64_t v179 = *(void *)(v6 + 80);
  char v180 = *(unsigned char *)(v6 + 66);
  v236.i64[0] = v170;
  v236.i64[1] = (uint64_t)v8;
  *((void *)&v237[0] + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = &v226;
  *(void *)&v237[1] = v215 + 16;
  *((void *)&v237[1] + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = &v265;
  long long v238 = 0uLL;
  do
  {
    *(_DWORD *)((char *)&v239 + v176) = -65280;
    v176 += 4;
  }
  while (v176 != 8);
  DWORD2(v239) = 0;
  BYTE12(v239) = v180;
  *(void *)&v237[0] = &unk_26E711B00;
  if (v175) {
    uint64_t v181 = v175 + 8;
  }
  else {
    uint64_t v181 = 0;
  }
  int v251 = 0;
  LOBYTE(v252) = 0;
  uint64_t v253 = 0;
  long long v240 = 0u;
  long long v241 = 0u;
  long long v242 = 0u;
  char v243 = 0;
  long long v244 = 0u;
  long long v245 = 0u;
  long long v246 = 0u;
  long long v247 = 0u;
  long long v248 = 0u;
  long long v249 = 0u;
  char v250 = 0;
  long long v254 = xmmword_2343AC500;
  long long v255 = 0u;
  long long v256 = 0u;
  int v257 = -1;
  char v258 = 0;
  __int16 v259 = 1;
  uint64_t v260 = v178;
  uint64_t v261 = v177;
  uint64_t v262 = v179;
  uint64_t v263 = v174;
  uint64_t v182 = v7;
  uint64_t v183 = *(void *)(v7 + 440);
  if (v183)
  {
    uint64_t v184 = *(void *)(v183 + 40);
    if (v184)
    {
      for (unint64_t i = 0; i != v184; ++i)
      {
        uint64_t v186 = re::BucketArray<re::MeshSceneCollection,16ul>::operator[](v183, i);
        uint64_t v187 = *(void *)(v186 + 16);
        if (v187)
        {
          uint64_t v188 = *(void *)(v186 + 32);
          uint64_t v189 = 656 * v187;
          do
          {
            v234.i32[0] = 0;
              re::mesh_traversal::traverseMeshScene((uint64_t)v237, v188, v236.i64[0], v234.i32[0]);
            v188 += 656;
            v189 -= 656;
          }
          while (v189);
        }
      }
    }
  }
  uint64_t v190 = *(void *)(v182 + 448);
  if (v190)
  {
    uint64_t v191 = *(void *)(v190 + 40);
    if (v191)
    {
      for (unint64_t j = 0; j != v191; ++j)
      {
        uint64_t v193 = re::BucketArray<re::DynamicArray<re::VFXScene>,4ul>::operator[](v190, j);
        uint64_t v194 = *(void *)(v193 + 16);
        if (v194)
        {
          uint64_t v195 = *(void *)(v193 + 32);
          uint64_t v196 = 800 * v194;
          do
          {
            v234.i32[0] = 0;
              re::mesh_traversal::traverseVFXScene((uint64_t)v237, v195, v236.i64[1], v234.i32[0]);
            v195 += 800;
            v196 -= 800;
          }
          while (v196);
        }
      }
    }
  }
  re::HashTable<unsigned long,re::DrawTable,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::deinit((uint64_t *)v272);
  re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)&v227);
  if (v268)
  {
    unint64_t v197 = v270;
    uint64_t v198 = &v270[9 * v268];
    do
    {
      *(void *)unint64_t v197 = 0;
      ++*((_DWORD *)v197 + 2);
      v197 += 9;
    }
    while (v197 != v198);
  }
  if (v265)
  {
    uint64_t v199 = v267;
    __int16 v200 = &v267[7 * v265];
    do
    {
      *(void *)uint64_t v199 = 0;
      ++*((_DWORD *)v199 + 2);
      v199 += 7;
    }
    while (v199 != v200);
  }
}

BOOL re::anonymous namespace'::shouldDrawMeshForCamera(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if ((*(_DWORD *)(a2 + 428) & *(_DWORD *)(v4 + 504)) == 0) {
    return 0;
  }
  int v5 = *(unsigned __int8 *)(a1 + 65);
  if (*(unsigned char *)(a1 + 65))
  {
    if (*(unsigned char *)(v4 + 473) && *(unsigned char *)(a2 + 641) == 0) {
      return 0;
    }
  }
  if (!a3) {
    return (!*(unsigned char *)(a1 + 68) || *(_DWORD *)(a1 + 72) == *(unsigned __int16 *)(a2 + 424))
  }
        && (!v5 || *(unsigned __int8 *)(v4 + 473) | *(unsigned __int8 *)(a2 + 645));
  uint64_t v7 = *(_DWORD **)(a3 + 56);
  if (v7)
  {
    uint64_t v8 = *(unsigned __int16 *)(a2 + 424);
    unint64_t v9 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v8) ^ ((0xBF58476D1CE4E5B9 * v8) >> 27));
    uint64_t v10 = *(unsigned int *)(*(void *)(a3 + 64) + 4 * ((v9 ^ (v9 >> 31)) % *(unsigned int *)(a3 + 80)));
    if (v10 == 0x7FFFFFFF)
    {
LABEL_10:
      LODWORD(v7) = 0;
      goto LABEL_24;
    }
    unint64_t v11 = *(void *)(a2 + 416);
    uint64_t v12 = *(void *)(a3 + 72);
    while (*(unsigned __int16 *)(v12 + 72 * v10 + 12) != v8)
    {
      LODWORD(v10) = *(_DWORD *)(v12 + 72 * v10 + 8) & 0x7FFFFFFF;
      if (v10 == 0x7FFFFFFF) {
        goto LABEL_10;
      }
    }
    uint64_t v13 = v12 + 72 * v10;
    if (*(void *)(v13 + 24))
    {
      unint64_t v14 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * (v11 ^ (v11 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v11 ^ (v11 >> 30))) >> 27));
      uint64_t v15 = *(unsigned int *)(*(void *)(v12 + 72 * v10 + 32)
                            + 4 * ((v14 ^ (v14 >> 31)) % *(unsigned int *)(v12 + 72 * v10 + 48)));
      if (v15 != 0x7FFFFFFF)
      {
        uint64_t v16 = *(void *)(v12 + 72 * v10 + 40);
        if (*(void *)(v16 + 32 * v15 + 16) == v11)
        {
LABEL_20:
          uint64_t v7 = (_DWORD *)(v16 + 32 * v15 + 24);
          goto LABEL_21;
        }
        while (1)
        {
          uint64_t v15 = *(_DWORD *)(v16 + 32 * v15 + 8) & 0x7FFFFFFF;
          if (v15 == 0x7FFFFFFF) {
            break;
          }
          if (*(void *)(v16 + 32 * v15 + 16) == v11) {
            goto LABEL_20;
          }
        }
      }
    }
    uint64_t v7 = 0;
LABEL_21:
    if (!v7) {
      uint64_t v7 = (_DWORD *)(v13 + 16);
    }
    LODWORD(v7) = *v7;
  }
LABEL_24:
  *a4 = v7;
  return (!*(unsigned char *)(a1 + 68) || *(_DWORD *)(a1 + 72) == *(unsigned __int16 *)(a2 + 424))
      && (!v5 || *(unsigned __int8 *)(v4 + 473) | *(unsigned __int8 *)(a2 + 645));
}

void re::RenderGraphCameraSetupNode::setup(re::RenderGraphNode *this, re::RenderGraphBuilder *a2, re::RenderGraphDataStore *a3)
{
  *((unsigned char *)a2 + 592) = 1;
  re::RenderGraphNode::setup(this, a2, a3);
}

void re::RenderGraphCameraSetupNode::execute(const char **this, int32x4_t *a2)
{
  uint64_t v77 = *MEMORY[0x263EF8340];
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v61, 5034, 0);
  uint64_t v4 = re::RenderGraphDataStore::get<re::CameraData>(a2[73].i64[0], *(void *)(a2[2].i64[1] + 48));
  int v5 = &qword_26AF9C8B8;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9C8C0, memory_order_acquire) & 1) == 0) {
    goto LABEL_41;
  }
  while (1)
  {
    uint64_t v6 = re::RenderGraphDataStore::get<re::RendererGlobals>(a2[73].i64[0], *v5);
    uint64_t v60 = re::RenderGraphDataStore::get<re::SceneScope>(a2[73].i64[0], *(void *)(a2[2].i64[1] + 48));
    if ((atomic_load_explicit((atomic_uchar *volatile)v5 + 24, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_26AF9C8D0))
    {
      qword_26AF9C8C8 = re::hashString((re *)"DynamicFunctionConstants", v57);
      __cxa_guard_release(&qword_26AF9C8D0);
    }
    unint64_t v7 = qword_26AF9C8C8;
    size_t v8 = strlen(this[4]);
    if (v8)
    {
      MurmurHash3_x64_128((uint64_t)this[4], v8, 0, &v64);
      unint64_t v9 = ((v65 - 0x61C8864680B583E9 + (v64 << 6) + (v64 >> 2)) ^ v64) - 0x61C8864680B583E9;
    }
    else
    {
      unint64_t v9 = 0x9E3779B97F4A7C17;
    }
    uint64_t v10 = re::RenderGraphDataStore::tryGet<re::DynamicFunctionConstantsData>(a2[73].i64[0], ((v7 >> 2) + (v7 << 6) + v9) ^ v7);
    uint64_t v11 = v10 + 8;
    if (!v10) {
      uint64_t v11 = 0;
    }
    uint64_t v59 = v11;
    uint64_t v12 = *(re::Allocator **)(*(void *)(v6 + 8) + 24);
    if (re::RenderGraphDataStore::tryGet<re::CameraMatrices>(a2[73].i64[0], *(void *)(a2[2].i64[1] + 48))) {
      break;
    }
    uint64_t v13 = a2[73].i64[0];
    uint64_t v14 = *(void *)(a2[2].i64[1] + 48);
    int v62 = 0;
    unint64_t v63 = 0;
    {
      re::introspect<re::CameraMatrices>(void)::info = (_UNKNOWN *)re::introspect_CameraMatrices(0);
    }
    uint64_t v58 = v6;
    int v62 = (re::CameraMatrices *)re::introspect<re::CameraMatrices>(void)::info;
    size_t v15 = strlen(*((const char **)re::introspect<re::CameraMatrices>(void)::info + 6));
    uint64_t v16 = (re::RenderGraphCameraSetupNode *)this;
    if (v15)
    {
      MurmurHash3_x64_128(*((void *)re::introspect<re::CameraMatrices>(void)::info + 6), v15, 0, &v64);
      unint64_t v17 = (v65 - 0x61C8864680B583E9 + (v64 << 6) + (v64 >> 2)) ^ v64;
    }
    else
    {
      unint64_t v17 = 0;
    }
    unint64_t v63 = v17;
    re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addOrReplace<re::IntrospectionStructure const*&>(v13 + 176, &v63, &v62);
    unint64_t v64 = (v14 - 0x61C8864680B583E9 + (v63 << 6) + (v63 >> 2)) ^ v63;
    uint64_t v18 = (re::CameraMatrices *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v13 + 8) + 32))(*(void *)(v13 + 8), 144, 16);
    int v62 = re::CameraMatrices::CameraMatrices(v18, v12, *(unsigned __int8 *)(v4 + 490));
    unint64_t v19 = (void *)re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addNew<re::CameraData *>(v13 + 64, &v64, &v62);
    if (!*(unsigned char *)(v4 + 490))
    {
LABEL_18:
      v27.i64[0] = 0x7F0000007FLL;
      v27.i64[1] = 0x7F0000007FLL;
      a2[4] = vdupq_n_s32(0x7F800000u);
      a2[5] = v27;
      this = (const char **)v16;
      uint64_t v6 = v58;
      break;
    }
    int v5 = 0;
    size_t v21 = (_anonymous_namespace_ *)(*v19 + 48);
    unint64_t v22 = (re::Projection *)(v4 + 144);
    uint64_t v23 = (_anonymous_namespace_ *)(*v19 + 8);
    this = (const char **)(v4 + 64);
    while (1)
    {
      unint64_t v24 = *(void *)(v4 + 128);
      if (v24 <= (unint64_t)v5) {
        break;
      }
      re::Projection::computeMatrix4x4F(v22, (uint64_t)&v64);
      re::DynamicArray<re::Matrix4x4<float>>::add(v21, (uint64_t)&v64);
      unint64_t v26 = *(void *)(v4 + 48);
      if (v26 <= (unint64_t)v5) {
        goto LABEL_40;
      }
      re::RenderCamera::computeInverseTransform((float32x4_t *)this, (uint64_t)&v64);
      re::DynamicArray<re::Matrix4x4<float>>::add(v23, (uint64_t)&v64);
      int v5 = (uint64_t *)((char *)v5 + 1);
      this += 4;
      unint64_t v22 = (re::Projection *)((char *)v22 + 64);
      if ((unint64_t)v5 >= *(unsigned __int8 *)(v4 + 490)) {
        goto LABEL_18;
      }
    }
    re::internal::assertLog((re::internal *)6, v20, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, v5, v24);
    _os_crash();
    __break(1u);
LABEL_40:
    re::internal::assertLog((re::internal *)6, v25, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, v5, v26);
    _os_crash();
    __break(1u);
LABEL_41:
    unsigned int v54 = (re *)__cxa_guard_acquire(&qword_26AF9C8C0);
    if (v54)
    {
      *int v5 = re::getCombinedScopeHash(v54, v55, v56);
      __cxa_guard_release(v5 + 1);
    }
  }
  if (!re::RenderGraphDataStore::tryGet<re::MeshPassInfoData>(a2[73].i64[0], *(void *)(a2[2].i64[1] + 48)))
  {
    uint64_t v28 = re::RenderGraphDataStore::get<re::MeshLodSelectInputData>(a2[73].i64[0], *(void *)(a2[2].i64[1] + 48));
    uint64_t v29 = a2[73].i64[0];
    unint64_t v30 = (unint64_t)"N2re16MeshPassInfoDataE";
    if (((unint64_t)"N2re16MeshPassInfoDataE" & 0x8000000000000000) != 0)
    {
      uint64_t v31 = (unsigned __int8 *)((unint64_t)"N2re16MeshPassInfoDataE" & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v32 = 5381;
      do
      {
        unint64_t v30 = v32;
        unsigned int v33 = *v31++;
        uint64_t v32 = (33 * v32) ^ v33;
      }
      while (v33);
    }
    unint64_t v34 = (*(void *)(a2[2].i64[1] + 48) - 0x61C8864680B583E9 + (v30 << 6) + (v30 >> 2)) ^ v30;
    float32x4_t v35 = (void *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v29 + 8) + 32))(*(void *)(v29 + 8), 16, 8);
    unint64_t v36 = *(void *)(v29 + 64);
    *float32x4_t v35 = &unk_26E71A588;
    v35[1] = 0;
    if (v36)
    {
      unint64_t v36 = v34 % *(unsigned int *)(v29 + 88);
      uint64_t v37 = *(unsigned int *)(*(void *)(v29 + 72) + 4 * v36);
      if (v37 != 0x7FFFFFFF)
      {
        uint64_t v45 = *(void *)(v29 + 80);
        if (*(void *)(v45 + 24 * v37 + 8) == v34)
        {
LABEL_34:
          uint64_t v44 = (uint64_t *)(v45 + 24 * v37 + 16);
LABEL_35:
          uint64_t v46 = *v44;
          uint64_t v47 = (*(uint64_t (**)(re::Allocator *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 48, 8);
          *(_OWORD *)uint64_t v47 = 0u;
          *(_OWORD *)(v47 + 16) = 0u;
          *(_DWORD *)(v47 + 32) = 0;
          *(void *)(v47 + 36) = 0x7FFFFFFFLL;
          re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::init(v47, (uint64_t)v12, 3);
          *(void *)(v46 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v47;
          uint64_t v48 = re::RenderGraphDataStore::get<re::CameraMatrices>(a2[73].i64[0], *(void *)(a2[2].i64[1] + 48));
          unint64_t v64 = (unint64_t)a2;
          uint64_t v65 = v4;
          uint64_t v66 = v48;
          uint64_t v67 = v60;
          uint64_t v68 = v6;
          uint64_t v69 = v46;
          uint64_t v70 = v28;
          uint64_t v71 = 0;
          __int16 v72 = *((_WORD *)this + 128);
          char v73 = 0;
          if (*(unsigned char *)(v4 + 476)) {
            int v75 = *(_DWORD *)(v4 + 480);
          }
          uint64_t v76 = v59;
          re::RenderGraphCameraSetupNode::setupDrawCallsForCamera((uint64_t)&v64, v49, v50, v51, v52, v53);
          goto LABEL_38;
        }
        while (1)
        {
          LODWORD(v37) = *(_DWORD *)(v45 + 24 * v37) & 0x7FFFFFFF;
          if (v37 == 0x7FFFFFFF) {
            break;
          }
          if (*(void *)(v45 + 24 * v37 + 8) == v34) {
            goto LABEL_34;
          }
        }
      }
    }
    long long v38 = (re::RenderGraphCameraSetupNode *)this;
    uint64_t v39 = *(unsigned int *)(v29 + 100);
    if (v39 == 0x7FFFFFFF)
    {
      uint64_t v39 = *(unsigned int *)(v29 + 96);
      int v40 = v39;
      if (v39 == *(_DWORD *)(v29 + 88))
      {
        re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(v29 + 64, 2 * *(_DWORD *)(v29 + 92));
        LODWORD(v36) = v34 % *(unsigned int *)(v29 + 88);
        int v40 = *(_DWORD *)(v29 + 96);
      }
      *(_DWORD *)(v29 + 96) = v40 + 1;
      uint64_t v41 = *(void *)(v29 + 80);
      int v42 = *(_DWORD *)(v41 + 24 * v39);
    }
    else
    {
      uint64_t v41 = *(void *)(v29 + 80);
      int v42 = *(_DWORD *)(v41 + 24 * v39);
      *(_DWORD *)(v29 + 100) = v42 & 0x7FFFFFFF;
    }
    uint64_t v43 = 24 * v39;
    *(_DWORD *)(v41 + v43) = v42 | 0x80000000;
    *(_DWORD *)(*(void *)(v29 + 80) + v43) = *(_DWORD *)(*(void *)(v29 + 80) + 24 * v39) & 0x80000000 | *(_DWORD *)(*(void *)(v29 + 72) + 4 * v36);
    *(void *)(*(void *)(v29 + 80) + 24 * v39 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v34;
    *(void *)(*(void *)(v29 + 80) + 24 * v39 + 16) = v35;
    *(_DWORD *)(*(void *)(v29 + 72) + 4 * v36) = v39;
    ++*(_DWORD *)(v29 + 92);
    ++*(_DWORD *)(v29 + 104);
    uint64_t v44 = (uint64_t *)(*(void *)(v29 + 80) + 24 * v39 + 16);
    this = (const char **)v38;
    goto LABEL_35;
  }
LABEL_38:
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v61);
}

void re::RenderGraphMultiViewCameraSetupNode::setup(re::RenderGraphNode *this, re::RenderGraphBuilder *a2, re::RenderGraphDataStore *a3)
{
  *((unsigned char *)a2 + 592) = 1;
  re::RenderGraphNode::setup(this, a2, a3);
}

void re::RenderGraphMultiViewCameraSetupNode::execute(const char **this, re::RenderGraphContext *a2)
{
  uint64_t v136 = *MEMORY[0x263EF8340];
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v115, 5034, 0);
  unint64_t v3 = re::RenderGraphDataStore::get<re::CameraArrayData>(*((void *)a2 + 146), *(void *)(*((void *)a2 + 5) + 48));
  float v109 = a2;
  uint64_t v4 = *((void *)a2 + 146);
  unint64_t v5 = (unint64_t)"N2re27MeshLodSelectInputArrayDataE";
  if (((unint64_t)"N2re27MeshLodSelectInputArrayDataE" & 0x8000000000000000) != 0)
  {
    uint64_t v6 = (unsigned __int8 *)((unint64_t)"N2re27MeshLodSelectInputArrayDataE" & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v7 = 5381;
    do
    {
      unint64_t v5 = v7;
      unsigned int v8 = *v6++;
      uint64_t v7 = (33 * v7) ^ v8;
    }
    while (v8);
  }
  unint64_t v9 = 0x9E3779B97F4A7C17;
  unsigned int v10 = 0x7FFFFFFF;
  if (*(void *)(v4 + 64))
  {
    unint64_t v11 = (*(void *)(*((void *)a2 + 5) + 48) + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9) ^ v5;
    unsigned int v12 = *(_DWORD *)(*(void *)(v4 + 72) + 4 * (v11 % *(unsigned int *)(v4 + 88)));
    if (v12 != 0x7FFFFFFF)
    {
      uint64_t v13 = *(void *)(v4 + 80);
      unsigned int v10 = *(_DWORD *)(*(void *)(v4 + 72) + 4 * (v11 % *(unsigned int *)(v4 + 88)));
      if (*(void *)(v13 + 24 * v12 + 8) != v11)
      {
        while (1)
        {
          unsigned int v10 = *(_DWORD *)(v13 + 24
                                * *(unsigned int *)(*(void *)(v4 + 72) + 4 * (v11 % *(unsigned int *)(v4 + 88)))) & 0x7FFFFFFF;
          if (v10 == 0x7FFFFFFF) {
            break;
          }
          if (*(void *)(v13 + 24 * v10 + 8) == v11) {
            goto LABEL_11;
          }
        }
        unsigned int v10 = 0x7FFFFFFF;
      }
    }
  }
LABEL_11:
  uint64_t v110 = *(void *)(*(void *)(v4 + 80) + 24 * v10 + 16);
  unint64_t v14 = (unint64_t)&qword_26AF9C8D8;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9C8E0, memory_order_acquire) & 1) == 0) {
    goto LABEL_105;
  }
  while (1)
  {
    uint64_t v107 = re::RenderGraphDataStore::get<re::RendererGlobals>(*((void *)v109 + 146), *(void *)v14);
    uint64_t v106 = re::RenderGraphDataStore::get<re::SceneScope>(*((void *)v109 + 146), *(void *)(*((void *)v109 + 5) + 48));
    if ((atomic_load_explicit((atomic_uchar *volatile)(v14 + 0x18), memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_26AF9C8F0))
    {
      qword_26AF9C8E8 = re::hashString((re *)"DynamicFunctionConstants", v103);
      __cxa_guard_release(&qword_26AF9C8F0);
    }
    unint64_t v15 = qword_26AF9C8E8;
    size_t v16 = strlen(this[4]);
    if (v16)
    {
      MurmurHash3_x64_128((uint64_t)this[4], v16, 0, (unint64_t *)&v117);
      unint64_t v17 = ((*((void *)&v117 + 1) + v9 + ((void)v117 << 6) + ((unint64_t)v117 >> 2)) ^ v117) + v9;
    }
    else
    {
      unint64_t v17 = 0x9E3779B97F4A7C17;
    }
    uint64_t v18 = re::RenderGraphDataStore::tryGet<re::DynamicFunctionConstantsData>(*((void *)v109 + 146), ((v15 >> 2) + (v15 << 6) + v17) ^ v15);
    uint64_t v19 = v18 + 8;
    if (!v18) {
      uint64_t v19 = 0;
    }
    uint64_t v105 = v19;
    unsigned int v112 = *(re::Allocator **)(*(void *)(v107 + 8) + 24);
    uint64_t v20 = *((void *)v109 + 146);
    unint64_t v21 = (unint64_t)"N2re19CameraMatricesArrayE";
    unint64_t v22 = (unint64_t)"N2re19CameraMatricesArrayE";
    if (((unint64_t)"N2re19CameraMatricesArrayE" & 0x8000000000000000) != 0)
    {
      uint64_t v23 = (unsigned __int8 *)((unint64_t)"N2re19CameraMatricesArrayE" & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v24 = 5381;
      do
      {
        unint64_t v22 = v24;
        unsigned int v25 = *v23++;
        uint64_t v24 = (33 * v24) ^ v25;
      }
      while (v25);
    }
    *(void *)&long long v117 = (*(void *)(*((void *)v109 + 5) + 48) + v9 + (v22 << 6) + (v22 >> 2)) ^ v22;
    unint64_t v26 = (void *)re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(v20 + 64, (uint64_t *)&v117);
    unint64_t v111 = v3;
    if (v26 && *v26) {
      goto LABEL_66;
    }
    unint64_t v27 = *(void *)(v3 + 16);
    uint64_t v28 = *((void *)v109 + 146);
    if (((unint64_t)"N2re19CameraMatricesArrayE" & 0x8000000000000000) != 0)
    {
      uint64_t v29 = (unsigned __int8 *)((unint64_t)"N2re19CameraMatricesArrayE" & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v30 = 5381;
      do
      {
        unint64_t v21 = v30;
        unsigned int v31 = *v29++;
        uint64_t v30 = (33 * v30) ^ v31;
      }
      while (v31);
    }
    unint64_t v32 = (*(void *)(*((void *)v109 + 5) + 48) - 0x61C8864680B583E9 + (v21 << 6) + (v21 >> 2)) ^ v21;
    uint64_t v33 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v28 + 8) + 32))(*(void *)(v28 + 8), 48, 8);
    *(void *)uint64_t v33 = &unk_26E71EEC0;
    *(void *)(v33 + 40) = 0;
    *(void *)(v33 + 16) = 0;
    *(void *)(v33 + 24) = 0;
    *(_DWORD *)(v33 + 32) = 0;
    *(void *)(v33 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v112;
    re::DynamicArray<re::CameraMatrices>::setCapacity((void *)(v33 + 8), v27);
    unint64_t v34 = *(void *)(v28 + 64);
    ++*(_DWORD *)(v33 + 32);
    if (v34)
    {
      unint64_t v34 = v32 % *(unsigned int *)(v28 + 88);
      uint64_t v35 = *(unsigned int *)(*(void *)(v28 + 72) + 4 * v34);
      if (v35 != 0x7FFFFFFF)
      {
        uint64_t v42 = *(void *)(v28 + 80);
        if (*(void *)(v42 + 24 * v35 + 8) == v32)
        {
LABEL_37:
          uint64_t v41 = v42 + 24 * v35;
          goto LABEL_38;
        }
        while (1)
        {
          LODWORD(v35) = *(_DWORD *)(v42 + 24 * v35) & 0x7FFFFFFF;
          if (v35 == 0x7FFFFFFF) {
            break;
          }
          if (*(void *)(v42 + 24 * v35 + 8) == v32) {
            goto LABEL_37;
          }
        }
      }
    }
    uint64_t v36 = *(unsigned int *)(v28 + 100);
    if (v36 == 0x7FFFFFFF)
    {
      uint64_t v36 = *(unsigned int *)(v28 + 96);
      int v37 = v36;
      if (v36 == *(_DWORD *)(v28 + 88))
      {
        re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(v28 + 64, 2 * *(_DWORD *)(v28 + 92));
        LODWORD(v34) = v32 % *(unsigned int *)(v28 + 88);
        int v37 = *(_DWORD *)(v28 + 96);
      }
      *(_DWORD *)(v28 + 96) = v37 + 1;
      uint64_t v38 = *(void *)(v28 + 80);
      int v39 = *(_DWORD *)(v38 + 24 * v36);
    }
    else
    {
      uint64_t v38 = *(void *)(v28 + 80);
      int v39 = *(_DWORD *)(v38 + 24 * v36);
      *(_DWORD *)(v28 + 100) = v39 & 0x7FFFFFFF;
    }
    uint64_t v40 = 24 * v36;
    *(_DWORD *)(v38 + v40) = v39 | 0x80000000;
    *(_DWORD *)(*(void *)(v28 + 80) + v40) = *(_DWORD *)(*(void *)(v28 + 80) + 24 * v36) & 0x80000000 | *(_DWORD *)(*(void *)(v28 + 72) + 4 * v34);
    *(void *)(*(void *)(v28 + 80) + 24 * v36 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v32;
    *(void *)(*(void *)(v28 + 80) + 24 * v36 + 16) = v33;
    *(_DWORD *)(*(void *)(v28 + 72) + 4 * v34) = v36;
    ++*(_DWORD *)(v28 + 92);
    ++*(_DWORD *)(v28 + 104);
    uint64_t v41 = *(void *)(v28 + 80) + 24 * v36;
LABEL_38:
    uint64_t v43 = (void *)(v41 + 16);
    if (*(void *)(v3 + 16))
    {
      unint64_t v44 = 0;
      uint64_t v45 = *v43;
      float32x4_t v104 = (_anonymous_namespace_ *)(*v43 + 8);
      uint64_t v114 = 64;
      uint64_t v113 = 144;
      while (1)
      {
        uint64_t v46 = *(void *)(v3 + 24);
        uint64_t v47 = v46 + 528 * v44;
        re::CameraMatrices::CameraMatrices((re::CameraMatrices *)&v117, v112, *(unsigned __int8 *)(v47 + 490));
        if (*(unsigned char *)(v47 + 490)) {
          break;
        }
LABEL_45:
        unint64_t v57 = *(void *)(v45 + 16);
        unint64_t v56 = *(void *)(v45 + 24);
        if (v56 >= v57)
        {
          unint64_t v58 = v56 + 1;
          if (v57 < v56 + 1)
          {
            if (*(void *)v104)
            {
              unint64_t v59 = 2 * v57;
              if (!v57) {
                unint64_t v59 = 8;
              }
              if (v59 <= v58) {
                unint64_t v60 = v58;
              }
              else {
                unint64_t v60 = v59;
              }
              re::DynamicArray<re::CameraMatrices>::setCapacity(v104, v60);
            }
            else
            {
              re::DynamicArray<re::CameraMatrices>::setCapacity(v104, v58);
              ++*(_DWORD *)(v45 + 32);
            }
          }
          unint64_t v56 = *(void *)(v45 + 24);
        }
        uint64_t v61 = *(void *)(v45 + 40);
        uint64_t v62 = v61 + 144 * v56;
        *(void *)(v62 + 40) = 0;
        *(void *)uint64_t v62 = &unk_26E70E270;
        *(void *)(v62 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
        *(void *)(v62 + 16) = 0;
        *(void *)(v62 + 24) = 0;
        *(_DWORD *)(v62 + 32) = 0;
        *(void *)(v62 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *((void *)&v117 + 1);
        *((void *)&v117 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
        *(void *)(v62 + 16) = v118;
        *(void *)&long long v118 = 0;
        uint64_t v63 = *(void *)(v62 + 24);
        *(void *)(v62 + 24) = *((void *)&v118 + 1);
        *((void *)&v118 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = v63;
        uint64_t v64 = *(void *)(v62 + 40);
        *(void *)(v62 + 40) = *((void *)&v119 + 1);
        *((void *)&v119 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = v64;
        LODWORD(v119) = v119 + 1;
        ++*(_DWORD *)(v62 + 32);
        *(void *)(v62 + 80) = 0;
        *(void *)(v62 + 56) = 0;
        *(void *)(v62 + 64) = 0;
        *(void *)(v62 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
        *(_DWORD *)(v62 + 72) = 0;
        *(void *)(v62 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v120;
        *(void *)&long long v120 = 0;
        *(void *)(v62 + 56) = *((void *)&v120 + 1);
        *((void *)&v120 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
        uint64_t v65 = *(void *)(v62 + 64);
        *(void *)(v62 + 64) = v121;
        *(void *)&long long v121 = v65;
        uint64_t v66 = *(void *)(v62 + 80);
        *(void *)(v62 + 80) = v122;
        uint64_t v122 = v66;
        ++DWORD2(v121);
        ++*(_DWORD *)(v62 + 72);
        LODWORD(v66) = v123;
        *(unsigned char *)(v62 + 96) = v123;
        if (v66) {
          *(_OWORD *)(v61 + 144 * v56 + 112) = v124;
        }
        *(unsigned char *)(v61 + 144 * v56 + 12re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v125;
        ++*(void *)(v45 + 24);
        ++*(_DWORD *)(v45 + 32);
        unint64_t v3 = v111;
        if ((void)v120)
        {
          if (v122) {
            (*(void (**)(void))(*(void *)v120 + 40))();
          }
          uint64_t v122 = 0;
          *(void *)&long long v121 = 0;
          long long v120 = 0uLL;
          ++DWORD2(v121);
        }
        if (*((void *)&v117 + 1) && *((void *)&v119 + 1)) {
          (*(void (**)(void))(**((void **)&v117 + 1) + 40))();
        }
        ++v44;
        v113 += 528;
        v114 += 528;
        if (*(void *)(v111 + 16) <= v44) {
          goto LABEL_66;
        }
      }
      unint64_t v3 = 0;
      unint64_t v9 = v47 + 490;
      uint64_t v49 = v46 + 528 * v44;
      double v50 = (unint64_t *)(v49 + 128);
      float32x4_t v51 = (unint64_t *)(v49 + 48);
      double v52 = (float32x4_t *)(v46 + v114);
      float32x4_t v53 = (re::Projection *)(v46 + v113);
      while (*v50 > v3)
      {
        re::Projection::computeMatrix4x4F(v53, (uint64_t)v133);
        re::DynamicArray<re::Matrix4x4<float>>::add((_anonymous_namespace_ *)&v120, (uint64_t)v133);
        unint64_t v55 = *v51;
        if (*v51 <= v3) {
          goto LABEL_99;
        }
        re::RenderCamera::computeInverseTransform(v52, (uint64_t)v133);
        re::DynamicArray<re::Matrix4x4<float>>::add((_anonymous_namespace_ *)((char *)&v117 + 8), (uint64_t)v133);
        ++v3;
        v52 += 2;
        float32x4_t v53 = (re::Projection *)((char *)v53 + 64);
        if (v3 >= *(unsigned __int8 *)v9) {
          goto LABEL_45;
        }
      }
      re::internal::assertLog((re::internal *)6, v48, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, v3, *v50);
      _os_crash();
      __break(1u);
LABEL_99:
      re::internal::assertLog((re::internal *)6, v54, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, v3, v55);
      _os_crash();
      __break(1u);
      goto LABEL_100;
    }
LABEL_66:
    if (re::RenderGraphDataStore::tryGet<re::MeshPassInfoArrayData>(*((void *)v109 + 146), *(void *)(*((void *)v109 + 5) + 48)))
    {
      goto LABEL_97;
    }
    unint64_t v44 = *(void *)(v3 + 16);
    uint64_t v67 = *((void *)v109 + 146);
    unint64_t v14 = (unint64_t)"N2re21MeshPassInfoArrayDataE";
    if (((unint64_t)"N2re21MeshPassInfoArrayDataE" & 0x8000000000000000) != 0)
    {
      uint64_t v68 = (unsigned __int8 *)((unint64_t)"N2re21MeshPassInfoArrayDataE" & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v69 = 5381;
      do
      {
        unint64_t v14 = v69;
        unsigned int v70 = *v68++;
        uint64_t v69 = (33 * v69) ^ v70;
      }
      while (v70);
    }
    unint64_t v9 = *(void *)(*((void *)v109 + 5) + 48);
    __int16 v72 = (void *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v67 + 8) + 32))(*(void *)(v67 + 8), 32, 8);
    *__int16 v72 = &unk_26E71EF00;
    v72[1] = v112;
    unsigned __int8 v72[2] = v44;
    v72[3] = 0;
    if (!v44) {
      goto LABEL_77;
    }
    if (v44 >> 60) {
      goto LABEL_103;
    }
    char v73 = (void *)(*(uint64_t (**)(re::Allocator *, unint64_t, uint64_t))(*(void *)v112 + 32))(v112, 16 * v44, 8);
    v72[3] = v73;
    if (v73) {
      break;
    }
LABEL_104:
    re::internal::assertLog((re::internal *)4, v74, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    _os_crash();
    __break(1u);
LABEL_105:
    float32x4_t v100 = (re *)__cxa_guard_acquire(&qword_26AF9C8E0);
    if (v100)
    {
      *(void *)unint64_t v14 = re::getCombinedScopeHash(v100, v101, v102);
      __cxa_guard_release((__guard *)(v14 + 8));
    }
  }
  unint64_t v75 = v44 - 1;
  if (v44 != 1)
  {
    uint64_t v76 = v73;
    do
    {
      *char v73 = &unk_26E71A588;
      v73[1] = 0;
      v73 += 2;
      v76 += 2;
      --v75;
    }
    while (v75);
  }
  *char v73 = &unk_26E71A588;
  v73[1] = 0;
LABEL_77:
  unint64_t v77 = (v9 - 0x61C8864680B583E9 + (v14 << 6) + (v14 >> 2)) ^ v14;
  unint64_t v78 = *(void *)(v67 + 64);
  if (v78
    && (unint64_t v78 = v77 % *(unsigned int *)(v67 + 88),
        uint64_t v79 = *(unsigned int *)(*(void *)(v67 + 72) + 4 * v78),
        v79 != 0x7FFFFFFF))
  {
    uint64_t v85 = *(void *)(v67 + 80);
    while (*(void *)(v85 + 24 * v79 + 8) != v77)
    {
      LODWORD(v79) = *(_DWORD *)(v85 + 24 * v79) & 0x7FFFFFFF;
      if (v79 == 0x7FFFFFFF) {
        goto LABEL_79;
      }
    }
    uint64_t v84 = v85 + 24 * v79;
  }
  else
  {
LABEL_79:
    unint64_t v9 = *(unsigned int *)(v67 + 100);
    if (v9 == 0x7FFFFFFF)
    {
      unint64_t v9 = *(unsigned int *)(v67 + 96);
      int v80 = v9;
      if (v9 == *(_DWORD *)(v67 + 88))
      {
        re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(v67 + 64, 2 * *(_DWORD *)(v67 + 92));
        LODWORD(v7re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v77 % *(unsigned int *)(v67 + 88);
        int v80 = *(_DWORD *)(v67 + 96);
      }
      *(_DWORD *)(v67 + 96) = v80 + 1;
      uint64_t v81 = *(void *)(v67 + 80);
      int v82 = *(_DWORD *)(v81 + 24 * v9);
    }
    else
    {
      uint64_t v81 = *(void *)(v67 + 80);
      int v82 = *(_DWORD *)(v81 + 24 * v9);
      *(_DWORD *)(v67 + 100) = v82 & 0x7FFFFFFF;
    }
    uint64_t v83 = 24 * v9;
    *(_DWORD *)(v81 + v83) = v82 | 0x80000000;
    *(_DWORD *)(*(void *)(v67 + 80) + v83) = *(_DWORD *)(*(void *)(v67 + 80) + 24 * v9) & 0x80000000 | *(_DWORD *)(*(void *)(v67 + 72) + 4 * v78);
    *(void *)(*(void *)(v67 + 80) + 24 * v9 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v77;
    *(void *)(*(void *)(v67 + 80) + 24 * v9 + 16) = v72;
    *(_DWORD *)(*(void *)(v67 + 72) + 4 * v7re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v9;
    ++*(_DWORD *)(v67 + 92);
    ++*(_DWORD *)(v67 + 104);
    uint64_t v84 = *(void *)(v67 + 80) + 24 * v9;
  }
  float32x4_t v86 = (unint64_t *)(v84 + 16);
  if (*(void *)(v3 + 16))
  {
    uint64_t v87 = 0;
    unint64_t v44 = 0;
    unint64_t v88 = *v86;
    uint64_t v89 = 8;
    uint64_t v90 = 476;
    while (1)
    {
      float32x4_t v53 = *(re::Projection **)(v110 + 16);
      if ((unint64_t)v53 <= v44) {
        break;
      }
      float32x4_t v53 = *(re::Projection **)(v88 + 16);
      if ((unint64_t)v53 <= v44) {
        goto LABEL_101;
      }
      unint64_t v3 = *(void *)(v3 + 24);
      uint64_t v91 = *(void *)(v110 + 24);
      unint64_t v9 = v88;
      uint64_t v92 = *(void *)(v88 + 24);
      uint64_t v93 = (*(uint64_t (**)(re::Allocator *, uint64_t, uint64_t))(*(void *)v112 + 32))(v112, 48, 8);
      *(_OWORD *)uint64_t v93 = 0u;
      *(_OWORD *)(v93 + 16) = 0u;
      *(_DWORD *)(v93 + 32) = 0;
      *(void *)(v93 + 36) = 0x7FFFFFFFLL;
      re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::init(v93, (uint64_t)v112, 3);
      *(void *)(v92 + v89) = v93;
      uint64_t v94 = re::RenderGraphDataStore::get<re::CameraMatricesArray>(*((void *)v109 + 146), *(void *)(*((void *)v109 + 5) + 48));
      *(void *)&long long v117 = v109;
      *((void *)&v117 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = v3 + v90 - 476;
      if (!*(void *)(v94 + 24)) {
        goto LABEL_102;
      }
      *(void *)&long long v118 = *(void *)(v94 + 40);
      *((void *)&v118 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = v106;
      *(void *)&long long v119 = v107;
      *((void *)&v119 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = v92 + v89 - 8;
      long long v120 = (unint64_t)(v91 + v87);
      LOWORD(v12re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = *((_WORD *)this + 128);
      BYTE2(v12re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
      BYTE4(v12re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = *(unsigned char *)(v3 + v90);
      if (BYTE4(v121)) {
        DWORD2(v12re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = *(_DWORD *)(v3 + v90 + 4);
      }
      uint64_t v122 = v105;
      re::RenderGraphCameraSetupNode::setupDrawCallsForCamera((uint64_t)&v117, v95, v96, v97, v98, v99);
      ++v44;
      unint64_t v3 = v111;
      v89 += 16;
      v90 += 528;
      v87 += 160;
      unint64_t v88 = v9;
      if (*(void *)(v111 + 16) <= v44) {
        goto LABEL_97;
      }
    }
LABEL_100:
    *(void *)int v126 = 0;
    long long v120 = 0u;
    long long v121 = 0u;
    long long v118 = 0u;
    long long v119 = 0u;
    long long v117 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    v133[0] = 136315906;
    *(void *)&v133[1] = "operator[]";
    LOWORD(v133[3]) = 1024;
    *(_DWORD *)((char *)&v133[3] + 2) = 476;
    HIWORD(v133[4]) = 2048;
    *(void *)&v133[5] = v44;
    LOWORD(v133[7]) = 2048;
    *(void *)((char *)&v133[7] + 2) = v53;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_101:
    *(void *)int v126 = 0;
    long long v120 = 0u;
    long long v121 = 0u;
    long long v118 = 0u;
    long long v119 = 0u;
    long long v117 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    v133[0] = 136315906;
    *(void *)&v133[1] = "operator[]";
    LOWORD(v133[3]) = 1024;
    *(_DWORD *)((char *)&v133[3] + 2) = 468;
    HIWORD(v133[4]) = 2048;
    *(void *)&v133[5] = v44;
    LOWORD(v133[7]) = 2048;
    *(void *)((char *)&v133[7] + 2) = v53;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_102:
    uint64_t v116 = 0;
    long long v134 = 0u;
    long long v135 = 0u;
    memset(v133, 0, sizeof(v133));
    unint64_t v14 = &_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)int v126 = 136315906;
    *(void *)&v126[4] = "operator[]";
    __int16 v127 = 1024;
    int v128 = 797;
    __int16 v129 = 2048;
    uint64_t v130 = 0;
    __int16 v131 = 2048;
    uint64_t v132 = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_103:
    re::internal::assertLog((re::internal *)6, v71, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 16, v44);
    _os_crash();
    __break(1u);
    goto LABEL_104;
  }
LABEL_97:
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v115);
}

void *re::allocInfo_RenderGraphCameraSetupNode(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9C8F8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9C8F8))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF9C948, "RenderGraphCameraSetupNode");
    __cxa_guard_release(&qword_26AF9C8F8);
  }
  return &unk_26AF9C948;
}

void re::initInfo_RenderGraphCameraSetupNode(re *this, re::IntrospectionBase *a2)
{
  v17[0] = 0xC7B124D2A1079044;
  v17[1] = "RenderGraphCameraSetupNode";
  re::StringID::destroyString((re::StringID *)v17);
  *((_OWORD *)this + 2) = v18;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9C900, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF9C900);
    if (v4)
    {
      unint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::introspect_RenderGraphNode((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "RenderGraphNode";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF9C930 = v7;
      unsigned int v8 = re::introspectionAllocator((re *)v7);
      unsigned int v10 = re::introspect_BOOL((re *)1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "frustumCulling";
      *(void *)(v11 + 16) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x10000000002;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF9C938 = v11;
      unsigned int v12 = re::introspectionAllocator((re *)v11);
      unint64_t v14 = re::introspect_BOOL((re *)1, v13);
      uint64_t v15 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 72, 8);
      *(_DWORD *)uint64_t v15 = 1;
      *(void *)(v15 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "isForShadowMap";
      *(void *)(v15 + 16) = v14;
      *(void *)(v15 + 24) = 0;
      *(void *)(v15 + 32) = 0x10100000004;
      *(_DWORD *)(v15 + 40) = 0;
      *(void *)(v15 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_26AF9C940 = v15;
      __cxa_guard_release(&qword_26AF9C900);
    }
  }
  *((void *)this + 2) = 0x11800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((void *)this + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = &qword_26AF9C930;
  *((void *)this + 9) = re::internal::defaultConstruct<re::RenderGraphCameraSetupNode>;
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::RenderGraphCameraSetupNode>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::RenderGraphCameraSetupNode>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::RenderGraphCameraSetupNode>;
  re::IntrospectionRegistry::add(this, v3);
  long long v16 = v18;
}

double re::internal::defaultConstruct<re::RenderGraphCameraSetupNode>(int a1, int a2, re::RenderGraphNode *this)
{
  unint64_t v3 = re::RenderGraphNode::RenderGraphNode(this);
  *(void *)unint64_t v3 = &unk_26E71ECD8;
  *((_WORD *)v3 + 12re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  *((void *)v3 + 33) = 0;
  double result = NAN;
  *((void *)v3 + 34) = -1;
  return result;
}

uint64_t re::internal::defaultDestruct<re::RenderGraphCameraSetupNode>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

double re::internal::defaultConstructV2<re::RenderGraphCameraSetupNode>(re::RenderGraphNode *a1)
{
  uint64_t v1 = re::RenderGraphNode::RenderGraphNode(a1);
  *(void *)uint64_t v1 = &unk_26E71ECD8;
  *((_WORD *)v1 + 12re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  *((void *)v1 + 33) = 0;
  double result = NAN;
  *((void *)v1 + 34) = -1;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::RenderGraphCameraSetupNode>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::introspect_RenderGraphCameraSetupNode(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RenderGraphCameraSetupNode", (uint64_t (*)(re::internal *))re::allocInfo_RenderGraphCameraSetupNode, (re::IntrospectionBase *(*)(void))re::initInfo_RenderGraphCameraSetupNode, (void (*)(re::IntrospectionBase *))&qword_26AF9C908, this);
}

void *re::allocInfo_RenderGraphMultiViewCameraSetupNode(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9C910, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9C910))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF9C9C0, "RenderGraphMultiViewCameraSetupNode");
    __cxa_guard_release(&qword_26AF9C910);
  }
  return &unk_26AF9C9C0;
}

void re::initInfo_RenderGraphMultiViewCameraSetupNode(re *this, re::IntrospectionBase *a2)
{
  v11[0] = 0xAEB515AB82B4F4E8;
  v11[1] = "RenderGraphMultiViewCameraSetupNode";
  re::StringID::destroyString((re::StringID *)v11);
  *((_OWORD *)this + 2) = v12;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9C920, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF9C920);
    if (v4)
    {
      unint64_t v5 = (re *)re::introspectionAllocator(v4);
      uint64_t v6 = v5;
      uint64_t v7 = (re *)qword_26AF9C908;
      if (!qword_26AF9C908)
      {
        uint64_t v7 = (re *)re::allocInfo_RenderGraphCameraSetupNode(v5);
        qword_26AF9C908 = (uint64_t)v7;
        re::initInfo_RenderGraphCameraSetupNode(v7, v8);
      }
      uint64_t v9 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v6 + 32))(v6, 72, 8);
      *(_DWORD *)uint64_t v9 = 1;
      *(void *)(v9 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "RenderGraphCameraSetupNode";
      *(void *)(v9 + 16) = v7;
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 32) = 0;
      *(_DWORD *)(v9 + 40) = 3;
      *(void *)(v9 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_26AF9C918 = v9;
      __cxa_guard_release(&qword_26AF9C920);
    }
  }
  *((void *)this + 2) = 0x11800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((void *)this + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = &qword_26AF9C918;
  *((void *)this + 9) = re::internal::defaultConstruct<re::RenderGraphMultiViewCameraSetupNode>;
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::RenderGraphMultiViewCameraSetupNode>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::RenderGraphMultiViewCameraSetupNode>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::RenderGraphMultiViewCameraSetupNode>;
  re::IntrospectionRegistry::add(this, v3);
  long long v10 = v12;
}

double re::internal::defaultConstruct<re::RenderGraphMultiViewCameraSetupNode>(int a1, int a2, re::RenderGraphNode *this)
{
  unint64_t v3 = re::RenderGraphNode::RenderGraphNode(this);
  *((_WORD *)v3 + 12re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  *((void *)v3 + 33) = 0;
  double result = NAN;
  *((void *)v3 + 34) = -1;
  *(void *)unint64_t v3 = &unk_26E71ED68;
  return result;
}

void re::internal::defaultDestruct<re::RenderGraphMultiViewCameraSetupNode>(int a1, int a2, id *this)
{
  *this = &unk_26E71ECD8;
  re::RenderGraphNode::~RenderGraphNode(this);
}

double re::internal::defaultConstructV2<re::RenderGraphMultiViewCameraSetupNode>(re::RenderGraphNode *a1)
{
  uint64_t v1 = re::RenderGraphNode::RenderGraphNode(a1);
  *((_WORD *)v1 + 12re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  *((void *)v1 + 33) = 0;
  double result = NAN;
  *((void *)v1 + 34) = -1;
  *(void *)uint64_t v1 = &unk_26E71ED68;
  return result;
}

void re::internal::defaultDestructV2<re::RenderGraphMultiViewCameraSetupNode>(id *this)
{
  *this = &unk_26E71ECD8;
  re::RenderGraphNode::~RenderGraphNode(this);
}

uint64_t re::introspect_RenderGraphMultiViewCameraSetupNode(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RenderGraphMultiViewCameraSetupNode", (uint64_t (*)(re::internal *))re::allocInfo_RenderGraphMultiViewCameraSetupNode, (re::IntrospectionBase *(*)(void))re::initInfo_RenderGraphMultiViewCameraSetupNode, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::RenderGraphMultiViewCameraSetupNode>, this);
}

void re::RenderGraphCameraSetupNode::~RenderGraphCameraSetupNode(id *this)
{
  *this = &unk_26E71ECD8;
  re::RenderGraphNode::~RenderGraphNode(this);
}

{
  uint64_t vars8;

  *this = &unk_26E71ECD8;
  re::RenderGraphNode::~RenderGraphNode(this);
  JUMPOUT(0x237DBCBD0);
}

void re::RenderGraphMultiViewCameraSetupNode::~RenderGraphMultiViewCameraSetupNode(id *this)
{
  *this = &unk_26E71ECD8;
  re::RenderGraphNode::~RenderGraphNode(this);
}

{
  uint64_t vars8;

  *this = &unk_26E71ECD8;
  re::RenderGraphNode::~RenderGraphNode(this);
  JUMPOUT(0x237DBCBD0);
}

void *re::RenderGraphDataStoreWrapper<re::MeshRenderPassGroups>::~RenderGraphDataStoreWrapper(void *a1)
{
  *a1 = &unk_26E71EE40;
  re::HashTable<unsigned long long,re::MeshSortingCollection::GroupData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit(a1 + 1);
  return a1;
}

void re::RenderGraphDataStoreWrapper<re::MeshRenderPassGroups>::~RenderGraphDataStoreWrapper(void *a1)
{
  *a1 = &unk_26E71EE40;
  re::HashTable<unsigned long long,re::MeshSortingCollection::GroupData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::HashTable<float,unsigned char,re::Hash<float>,re::EqualTo<float>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v22, 0, 36);
      *(void *)&v22[36] = 0x7FFFFFFFLL;
      re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::init((uint64_t)v22, v4, a2);
      long long v5 = *(_OWORD *)a1;
      *(void *)a1 = *(void *)v22;
      uint64_t v6 = *(void *)(a1 + 16);
      long long v7 = *(_OWORD *)&v22[8];
      *(_OWORD *)unint64_t v22 = v5;
      *(void *)&v22[16] = v6;
      *(_OWORD *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v7;
      long long v9 = *(_OWORD *)&v22[24];
      *(_OWORD *)&v22[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v22[32];
      *(_OWORD *)(a1 + 24) = v9;
      uint64_t v10 = v8;
      if (v8)
      {
        int v11 = DWORD1(v9);
        uint64_t v12 = v7;
        uint64_t v13 = (unsigned char *)(v6 + 16);
        do
        {
          if ((*((_DWORD *)v13 - 2) & 0x80000000) != 0)
          {
            unint64_t v14 = *((void *)v13 - 2);
            unint64_t v15 = *(unsigned int *)(a1 + 24);
            unint64_t v16 = v14 % v15;
            uint64_t v17 = *(unsigned int *)(a1 + 36);
            if (v17 == 0x7FFFFFFF)
            {
              uint64_t v17 = *(unsigned int *)(a1 + 32);
              int v18 = v17;
              if (v17 == v15)
              {
                re::HashTable<float,unsigned char,re::Hash<float>,re::EqualTo<float>,true,false>::setCapacity(a1, (2 * v11));
                unint64_t v16 = v14 % *(unsigned int *)(a1 + 24);
                int v18 = *(_DWORD *)(a1 + 32);
                uint64_t v12 = *(void *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v18 + 1;
              uint64_t v19 = *(void *)(a1 + 16);
              int v20 = *(_DWORD *)(v19 + 24 * v17 + 8);
            }
            else
            {
              uint64_t v19 = *(void *)(a1 + 16);
              int v20 = *(_DWORD *)(v19 + 24 * v17 + 8);
              *(_DWORD *)(a1 + 36) = v20 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v19 + 24 * v17 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v20 | 0x80000000;
            *(_DWORD *)(*(void *)(a1 + 16) + 24 * v17 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 24 * v17 + 8) & 0x80000000 | *(_DWORD *)(v12 + 4 * v16);
            *(void *)(*(void *)(a1 + 16) + 24 * v17) = v14;
            *(_DWORD *)(*(void *)(a1 + 16) + 24 * v17 + 12) = *((_DWORD *)v13 - 1);
            *(unsigned char *)(*(void *)(a1 + 16) + 24 * v17 + 16) = *v13;
            uint64_t v12 = *(void *)(a1 + 8);
            *(_DWORD *)(v12 + 4 * v16) = v17;
            int v11 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 2re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v11;
          }
          v13 += 24;
          --v10;
        }
        while (v10);
      }
      re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)v22);
    }
  }
  else
  {
    if (a2) {
      signed int v21 = a2;
    }
    else {
      signed int v21 = 3;
    }
  }
}

uint64_t re::HashTable<unsigned long long,re::MeshSortingContext::MeshSortGroupSortData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, uint64_t *a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned long long,re::MeshSortingContext::MeshSortGroupSortData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 40 * v9 + 8);
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 40 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v11 + 40 * v9 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v12 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + 40 * v9 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 40 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 40 * v9) = a3;
  *(void *)(*(void *)(a1 + 16) + 40 * v9 + 16) = *a4;
  uint64_t v13 = *(void *)(a1 + 16) + 40 * v9;
  uint64_t v14 = *a5;
  *(_DWORD *)(v13 + 32) = *((_DWORD *)a5 + 2);
  *(void *)(v13 + 24) = v14;
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<unsigned long long,re::MeshSortingContext::MeshSortGroupSortData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(void *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v13, v4, a2);
      long long v5 = *(_OWORD *)v13;
      *(_OWORD *)uint64_t v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      uint64_t v6 = *(void *)&v13[16];
      uint64_t v7 = *(void *)(a1 + 16);
      *(void *)&unsigned char v13[16] = v7;
      *(void *)(a1 + 16) = v6;
      long long v9 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v9;
      uint64_t v10 = v8;
      if (v8)
      {
        uint64_t v11 = v7 + 16;
        do
        {
          if ((*(_DWORD *)(v11 - 8) & 0x80000000) != 0) {
            re::HashTable<unsigned long long,re::MeshSortingContext::MeshSortGroupSortData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, *(void *)(v11 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(v11 - 16), v11, v11 + 8);
          }
          v11 += 40;
          --v10;
        }
        while (v10);
      }
      re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2) {
      signed int v12 = a2;
    }
    else {
      signed int v12 = 3;
    }
  }
}

uint64_t re::RenderGraphDataStore::tryGet<re::MeshSortGroupCameraData>(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = (unint64_t)"N2re23MeshSortGroupCameraDataE";
  if (((unint64_t)"N2re23MeshSortGroupCameraDataE" & 0x8000000000000000) != 0)
  {
    unint64_t v3 = (unsigned __int8 *)((unint64_t)"N2re23MeshSortGroupCameraDataE" & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v4 = 5381;
    do
    {
      unint64_t v2 = v4;
      unsigned int v5 = *v3++;
      uint64_t v4 = (33 * v4) ^ v5;
    }
    while (v5);
  }
  unint64_t v7 = (a2 + (v2 << 6) + (v2 >> 2) - 0x61C8864680B583E9) ^ v2;
  uint64_t result = re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(a1 + 64, (uint64_t *)&v7);
  if (result) {
    return *(void *)result;
  }
  return result;
}

void re::MeshSortGroupCameraData::~MeshSortGroupCameraData(re::MeshSortGroupCameraData *this)
{
  *(void *)this = &unk_26E71EE80;
  re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E71EE80;
  re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::HashTable<unsigned long long,re::MeshSortingContext::MeshSortGroupSortData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::copy(uint64_t a1, uint64_t a2)
{
  re::HashTable<unsigned long long,re::RenderGraphTargetHandle,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear(a1);
  unsigned int v4 = *(_DWORD *)(a2 + 28);
  if (*(_DWORD *)(a1 + 24) < v4) {
    re::HashTable<unsigned long long,re::MeshSortingContext::MeshSortGroupSortData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(a1, v4);
  }
  unint64_t v5 = *(unsigned int *)(a2 + 32);
  if (v5)
  {
    uint64_t v6 = 0;
    for (unint64_t i = 0; i < v5; ++i)
    {
      unsigned int v8 = (uint64_t *)(*(void *)(a2 + 16) + v6);
      if ((v8[1] & 0x80000000) != 0)
      {
        unint64_t v9 = *v8;
        unint64_t v10 = *(unsigned int *)(a1 + 24);
        unint64_t v11 = *v8 % v10;
        uint64_t v12 = *(unsigned int *)(a1 + 36);
        if (v12 == 0x7FFFFFFF)
        {
          uint64_t v12 = *(unsigned int *)(a1 + 32);
          int v13 = v12;
          if (v12 == v10)
          {
            re::HashTable<unsigned long long,re::MeshSortingContext::MeshSortGroupSortData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
            unint64_t v11 = v9 % *(unsigned int *)(a1 + 24);
            int v13 = *(_DWORD *)(a1 + 32);
          }
          *(_DWORD *)(a1 + 32) = v13 + 1;
          uint64_t v14 = *(void *)(a1 + 16);
          int v15 = *(_DWORD *)(v14 + 40 * v12 + 8);
        }
        else
        {
          uint64_t v14 = *(void *)(a1 + 16);
          int v15 = *(_DWORD *)(v14 + 40 * v12 + 8);
          *(_DWORD *)(a1 + 36) = v15 & 0x7FFFFFFF;
        }
        *(_DWORD *)(v14 + 40 * v12 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v15 | 0x80000000;
        *(_DWORD *)(*(void *)(a1 + 16) + 40 * v12 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 40 * v12 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * v11);
        *(void *)(*(void *)(a1 + 16) + 40 * v12) = v9;
        *(void *)(*(void *)(a1 + 16) + 40 * v12 + 16) = v8[2];
        uint64_t v16 = *(void *)(a1 + 16) + 40 * v12;
        uint64_t v17 = v8[3];
        *(_DWORD *)(v16 + 32) = *((_DWORD *)v8 + 8);
        *(void *)(v16 + 24) = v17;
        *(_DWORD *)(*(void *)(a1 + 8) + 4 * v1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = v12;
        ++*(_DWORD *)(a1 + 28);
        unint64_t v5 = *(unsigned int *)(a2 + 32);
      }
      v6 += 40;
    }
  }
}

uint64_t re::HashTable<unsigned long long,re::MeshRenderPassGroups::RenderPassGroupSortData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, uint64_t *a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      int v11 = *(_DWORD *)(a1 + 28);
      signed int v12 = 2 * v11;
      uint64_t v13 = *(void *)a1;
      if (*(void *)a1)
      {
        if (v12) {
          BOOL v14 = v9 == v12;
        }
        else {
          BOOL v14 = 1;
        }
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v30, 0, 36);
          *(void *)&v30[36] = 0x7FFFFFFFLL;
          re::HashTable<unsigned long long,re::MeshSortingCollection::GroupData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v30, v13, v12);
          long long v15 = *(_OWORD *)v30;
          *(_OWORD *)uint64_t v30 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          uint64_t v16 = *(void *)&v30[16];
          *(void *)&v30[16] = *(void *)(a1 + 16);
          *(void *)(a1 + 16) = v16;
          long long v18 = *(_OWORD *)&v30[24];
          *(_OWORD *)&v30[24] = *(_OWORD *)(a1 + 24);
          unsigned int v17 = *(_DWORD *)&v30[32];
          *(_OWORD *)(a1 + 24) = v18;
          unsigned int v19 = v17;
          if (v17)
          {
            uint64_t v20 = 0;
            unint64_t v21 = 0;
            do
            {
              if ((*(_DWORD *)(*(void *)&v30[16] + v20 + 8) & 0x80000000) != 0)
              {
                re::HashTable<unsigned long long,re::MeshRenderPassGroups::RenderPassGroupSortData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, *(void *)(*(void *)&v30[16] + v20) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(*(void *)&v30[16] + v20), *(void *)&v30[16] + v20 + 16, *(void *)&v30[16] + v20 + 32);
                unsigned int v19 = *(_DWORD *)&v30[32];
              }
              ++v21;
              v20 += 128;
            }
            while (v21 < v19);
          }
          re::HashTable<unsigned long long,re::MeshSortingCollection::GroupData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v30);
        }
      }
      else
      {
        if (v12) {
          signed int v24 = 2 * v11;
        }
        else {
          signed int v24 = 3;
        }
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v22 = *(void *)(a1 + 16);
    int v23 = *(_DWORD *)(v22 + (v9 << 7) + 8);
  }
  else
  {
    uint64_t v22 = *(void *)(a1 + 16);
    int v23 = *(_DWORD *)(v22 + (v9 << 7) + 8);
    *(_DWORD *)(a1 + 36) = v23 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v22 + (v9 << 7) + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v23 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + (v9 << 7) + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_DWORD *)(*(void *)(a1 + 16) + (v9 << 7) + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + (v9 << 7)) = a3;
  *(void *)(*(void *)(a1 + 16) + (v9 << 7) + 16) = *a4;
  uint64_t v25 = *(void *)(a1 + 16) + (v9 << 7);
  uint64_t v26 = *a5;
  *(_WORD *)(v25 + 40) = *((_WORD *)a5 + 4);
  *(void *)(v25 + 32) = v26;
  LODWORD(v26) = *((unsigned __int8 *)a5 + 16);
  *(unsigned char *)(v25 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v26;
  if (v26)
  {
    long long v27 = *((_OWORD *)a5 + 2);
    long long v28 = *((_OWORD *)a5 + 4);
    *(_OWORD *)(v25 + 80) = *((_OWORD *)a5 + 3);
    *(_OWORD *)(v25 + 96) = v28;
    *(_OWORD *)(v25 + 64) = v27;
  }
  *(unsigned char *)(v25 + 112) = *((unsigned char *)a5 + 80);
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

uint64_t re::RenderGraphDataStore::get<re::CameraArrayData>(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = (unint64_t)"N2re15CameraArrayDataE";
  if (((unint64_t)"N2re15CameraArrayDataE" & 0x8000000000000000) != 0)
  {
    unint64_t v3 = (unsigned __int8 *)((unint64_t)"N2re15CameraArrayDataE" & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v4 = 5381;
    do
    {
      unint64_t v2 = v4;
      unsigned int v5 = *v3++;
      uint64_t v4 = (33 * v4) ^ v5;
    }
    while (v5);
  }
  unsigned int v6 = 0x7FFFFFFF;
  if (*(void *)(a1 + 64))
  {
    unint64_t v7 = (a2 + (v2 << 6) + (v2 >> 2) - 0x61C8864680B583E9) ^ v2;
    unsigned int v8 = *(_DWORD *)(*(void *)(a1 + 72) + 4 * (v7 % *(unsigned int *)(a1 + 88)));
    if (v8 != 0x7FFFFFFF)
    {
      uint64_t v9 = *(void *)(a1 + 80);
      unsigned int v6 = *(_DWORD *)(*(void *)(a1 + 72) + 4 * (v7 % *(unsigned int *)(a1 + 88)));
      if (*(void *)(v9 + 24 * v8 + 8) != v7)
      {
        while (1)
        {
          unsigned int v6 = *(_DWORD *)(v9 + 24 * *(unsigned int *)(*(void *)(a1 + 72) + 4 * (v7 % *(unsigned int *)(a1 + 88)))) & 0x7FFFFFFF;
          if (v6 == 0x7FFFFFFF) {
            break;
          }
          if (*(void *)(v9 + 24 * v6 + 8) == v7) {
            return *(void *)(*(void *)(a1 + 80) + 24 * v6 + 16);
          }
        }
        unsigned int v6 = 0x7FFFFFFF;
      }
    }
  }
  return *(void *)(*(void *)(a1 + 80) + 24 * v6 + 16);
}

void re::CameraMatricesArray::~CameraMatricesArray(re::CameraMatricesArray *this)
{
}

{
  uint64_t vars8;

  re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8);
  JUMPOUT(0x237DBCBD0);
}

void *re::DynamicArray<re::CameraMatrices>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    unsigned int v5 = result;
    if (result[2] <= a2)
    {
      uint64_t result = (void *)*result;
      if (!*v5)
      {
        uint64_t result = (void *)re::DynamicArray<re::CameraMatrices>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x90uLL))
        {
          uint64_t v2 = 144 * a2;
          uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 144 * a2, 16);
          if (result)
          {
            unint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_18;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 144, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        uint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      unint64_t v7 = 0;
      if (!v3)
      {
LABEL_18:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        unint64_t v10 = 0;
        uint64_t v11 = 144 * v9;
        do
        {
          signed int v12 = &v7[v10 / 8];
          uint64_t v13 = v8 + v10;
          v12[5] = 0;
          *signed int v12 = &unk_26E70E270;
          v12[1] = 0;
          v12[2] = 0;
          void v12[3] = 0;
          *((_DWORD *)v12 + re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = 0;
          uint64_t v14 = *(void *)(v8 + v10 + 16);
          v12[1] = *(void *)(v8 + v10 + 8);
          *(void *)(v8 + v10 + re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = 0;
          v12[2] = v14;
          *(void *)(v13 + 16) = 0;
          uint64_t v15 = v7[v10 / 8 + 3];
          void v12[3] = *(void *)(v8 + v10 + 24);
          *(void *)(v13 + 24) = v15;
          uint64_t v16 = v7[v10 / 8 + 5];
          v12[5] = *(void *)(v8 + v10 + 40);
          *(void *)(v13 + 40) = v16;
          *(_DWORD *)(v13 + 32) = *(_DWORD *)(v8 + v10 + 32) + 1;
          *((_DWORD *)v12 + re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = LODWORD(v7[v10 / 8 + 4]) + 1;
          v12[10] = 0;
          v12[7] = 0;
          unsigned char v12[8] = 0;
          v12[6] = 0;
          *((_DWORD *)v12 + 1re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = 0;
          uint64_t v18 = *(void *)(v8 + v10 + 56);
          uint64_t v17 = v8 + v10 + 48;
          v12[6] = *(void *)v17;
          v12[7] = v18;
          *(void *)uint64_t v17 = 0;
          *(void *)(v17 + re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = 0;
          uint64_t v19 = v7[v10 / 8 + 8];
          unsigned char v12[8] = *(void *)(v8 + v10 + 64);
          *(void *)(v17 + 16) = v19;
          uint64_t v20 = v7[v10 / 8 + 10];
          v12[10] = *(void *)(v8 + v10 + 80);
          *(void *)(v17 + 32) = v20;
          *(_DWORD *)(v17 + 24) = *(_DWORD *)(v8 + v10 + 72) + 1;
          *((_DWORD *)v12 + 1re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = LODWORD(v7[v10 / 8 + 9]) + 1;
          LODWORD(v20) = *(unsigned __int8 *)(v8 + v10 + 96);
          *((unsigned char *)v12 + 96) = v20;
          if (v20) {
            *((_OWORD *)v12 + 7) = *(_OWORD *)(v13 + 112);
          }
          *((unsigned char *)v12 + 12re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = *(unsigned char *)(v13 + 128);
          re::DynamicArray<unsigned long>::deinit(v17);
          re::DynamicArray<unsigned long>::deinit(v8 + v10 + 8);
          v10 += 144;
        }
        while (v11 != v10);
        uint64_t v8 = v5[4];
      }
      uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_18;
    }
  }
  return result;
}

uint64_t re::DynamicArray<re::CameraMatrices>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = 144 * v4;
        uint64_t v6 = v3 + 48;
        do
        {
          re::DynamicArray<unsigned long>::deinit(v6);
          re::DynamicArray<unsigned long>::deinit(v6 - 40);
          v6 += 144;
          v5 -= 144;
        }
        while (v5);
        uint64_t result = *(void *)a1;
        uint64_t v3 = *(void *)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::RenderGraphDataStore::tryGet<re::MeshPassInfoArrayData>(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = (unint64_t)"N2re21MeshPassInfoArrayDataE";
  if (((unint64_t)"N2re21MeshPassInfoArrayDataE" & 0x8000000000000000) != 0)
  {
    uint64_t v3 = (unsigned __int8 *)((unint64_t)"N2re21MeshPassInfoArrayDataE" & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v4 = 5381;
    do
    {
      unint64_t v2 = v4;
      unsigned int v5 = *v3++;
      uint64_t v4 = (33 * v4) ^ v5;
    }
    while (v5);
  }
  unint64_t v7 = (a2 + (v2 << 6) + (v2 >> 2) - 0x61C8864680B583E9) ^ v2;
  uint64_t result = re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(a1 + 64, (uint64_t *)&v7);
  if (result) {
    return *(void *)result;
  }
  return result;
}

void re::MeshPassInfoArrayData::~MeshPassInfoArrayData(re::MeshPassInfoArrayData *this)
{
}

{
  uint64_t vars8;

  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::RenderGraphDataStore::get<re::CameraMatricesArray>(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = (unint64_t)"N2re19CameraMatricesArrayE";
  if (((unint64_t)"N2re19CameraMatricesArrayE" & 0x8000000000000000) != 0)
  {
    uint64_t v3 = (unsigned __int8 *)((unint64_t)"N2re19CameraMatricesArrayE" & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v4 = 5381;
    do
    {
      unint64_t v2 = v4;
      unsigned int v5 = *v3++;
      uint64_t v4 = (33 * v4) ^ v5;
    }
    while (v5);
  }
  unsigned int v6 = 0x7FFFFFFF;
  if (*(void *)(a1 + 64))
  {
    unint64_t v7 = (a2 + (v2 << 6) + (v2 >> 2) - 0x61C8864680B583E9) ^ v2;
    unsigned int v8 = *(_DWORD *)(*(void *)(a1 + 72) + 4 * (v7 % *(unsigned int *)(a1 + 88)));
    if (v8 != 0x7FFFFFFF)
    {
      uint64_t v9 = *(void *)(a1 + 80);
      unsigned int v6 = *(_DWORD *)(*(void *)(a1 + 72) + 4 * (v7 % *(unsigned int *)(a1 + 88)));
      if (*(void *)(v9 + 24 * v8 + 8) != v7)
      {
        while (1)
        {
          unsigned int v6 = *(_DWORD *)(v9 + 24 * *(unsigned int *)(*(void *)(a1 + 72) + 4 * (v7 % *(unsigned int *)(a1 + 88)))) & 0x7FFFFFFF;
          if (v6 == 0x7FFFFFFF) {
            break;
          }
          if (*(void *)(v9 + 24 * v6 + 8) == v7) {
            return *(void *)(*(void *)(a1 + 80) + 24 * v6 + 16);
          }
        }
        unsigned int v6 = 0x7FFFFFFF;
      }
    }
  }
  return *(void *)(*(void *)(a1 + 80) + 24 * v6 + 16);
}

void re::RayTracedAmbientOcclusionMutablePersistentData::createPersistentTextures(void **this, int a2, int a3, id *a4)
{
  id v8 = objc_msgSend(objc_msgSend(MEMORY[0x263F12A50], sel_alloc), sel_init);
  objc_msgSend(v8, sel_setStorageMode_, 2);
  objc_msgSend(v8, sel_setWidth_, a2);
  objc_msgSend(v8, sel_setHeight_, a3);
  objc_msgSend(v8, sel_setUsage_, 3);
  objc_msgSend(v8, sel_setPixelFormat_, 13);
  re::mtl::Device::makeTexture(v8, a4, &v9);
  NS::SharedPtr<MTL::Texture>::operator=(this + 80, &v9);
  if (v9) {

  }
  objc_msgSend(v8, sel_setPixelFormat_, 252);
  re::mtl::Device::makeTexture(v8, a4, &v9);
  NS::SharedPtr<MTL::Texture>::operator=(this + 81, &v9);
  if (v9) {

  }
  objc_msgSend(v8, sel_setPixelFormat_, 25);
  re::mtl::Device::makeTexture(v8, a4, &v9);
  NS::SharedPtr<MTL::Texture>::operator=(this + 82, &v9);
  if (v9) {

  }
  if (v8) {
}
  }

void re::RayTracedAmbientOcclusionMutablePersistentData::createRayTracer(re::RayTracedAmbientOcclusionMutablePersistentData *this, id *a2)
{
  id v4 = objc_alloc(MEMORY[0x263F133D0]);
  id v5 = a2[23];
  uint64_t v6 = [v4 initWithDevice:v5];
  unint64_t v7 = (void *)*((void *)this + 27);
  *((void *)this + 27) = v6;

  [*((id *)this + 27) setRayDataType:3];
  [*((id *)this + 27) setRayStride:24];
  [*((id *)this + 27) setRayMaskOptions:2];
  [*((id *)this + 27) setIntersectionDataType:0];
  [*((id *)this + 27) setCullMode:0];
  id v8 = objc_alloc(MEMORY[0x263F130E0]);
  id v9 = a2[23];
  uint64_t v10 = [v8 initWithDevice:v9];
  uint64_t v11 = (void *)*((void *)this + 28);
  *((void *)this + 2re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = v10;

  uint64_t v12 = [MEMORY[0x263EFF980] array];
  uint64_t v13 = (void *)*((void *)this + 29);
  *((void *)this + 29) = v12;

  uint64_t v14 = [MEMORY[0x263EFF980] array];
  uint64_t v15 = (void *)*((void *)this + 30);
  *((void *)this + 30) = v14;
}

void re::RayTracedAmbientOcclusionMutablePersistentData::setUpComputePipelineState(uint64_t a1, uint64_t a2, uint64_t a3, void **a4, const char *a5)
{
  v72[3] = *MEMORY[0x263EF8340];
  id v8 = objc_msgSend(objc_msgSend(MEMORY[0x263F128B0], sel_alloc), sel_init);
  objc_msgSend(v8, sel_setConstantValue_type_atIndex_, a3 + 16, 37, 0);
  objc_msgSend(v8, sel_setConstantValue_type_atIndex_, a3 + 20, 53, 1);
  unsigned __int8 v63 = [*(id *)(a2 + 184) supportsFamily:1004];
  objc_msgSend(v8, sel_setConstantValue_type_atIndex_, &v63, 53, 2);
  unsigned __int8 v62 = 1;
  memset(v57, 0, sizeof(v57));
  id v9 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v56, 0);
  uint64_t v59 = 0;
  uint64_t v60 = 0;
  uint64_t v61 = 0;
  int v58 = 37;
  uint64_t v10 = (_anonymous_namespace_ *)re::TechniqueFunctionConstant::setAs64Bits((re::TechniqueFunctionConstant *)&v56, *(__int16 *)(a3 + 16));
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  uint64_t v11 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v48, 0);
  uint64_t v53 = 0;
  uint64_t v54 = 0;
  uint64_t v55 = 0;
  int v52 = 65589;
  uint64_t v12 = (_anonymous_namespace_ *)re::TechniqueFunctionConstant::setAs64Bits((re::TechniqueFunctionConstant *)&v48, *(unsigned __int8 *)(a3 + 20));
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  uint64_t v13 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v40, 0);
  uint64_t v45 = 0;
  uint64_t v46 = 0;
  uint64_t v47 = 0;
  int v44 = 131125;
  uint64_t v14 = (_anonymous_namespace_ *)re::TechniqueFunctionConstant::setAs64Bits((re::TechniqueFunctionConstant *)&v40, v63);
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  uint64_t v15 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v32, 0);
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  int v36 = 196661;
  uint64_t v16 = (_anonymous_namespace_ *)re::TechniqueFunctionConstant::setAs64Bits((re::TechniqueFunctionConstant *)&v32, v62);
  v21[0] = 0;
  re::DynamicString::DynamicString((re::DynamicString *)v64, (const re::DynamicString *)&v56);
  int v65 = v58;
  re::FixedArray<unsigned char>::FixedArray(v66, &v59);
  re::DynamicString::DynamicString((re::DynamicString *)v67, (const re::DynamicString *)&v48);
  v67[8] = v52;
  re::FixedArray<unsigned char>::FixedArray(v68, &v53);
  re::DynamicString::DynamicString((re::DynamicString *)v69, (const re::DynamicString *)&v40);
  v69[8] = v44;
  re::FixedArray<unsigned char>::FixedArray(v70, &v45);
  re::DynamicString::DynamicString((re::DynamicString *)v71, (const re::DynamicString *)&v32);
  v71[8] = v36;
  uint64_t v17 = (_anonymous_namespace_ *)re::FixedArray<unsigned char>::FixedArray(v72, &v37);
  uint64_t v27 = 0;
  memset(v25, 0, sizeof(v25));
  int v26 = 0;
  re::DynamicArray<re::TechniqueFunctionConstant>::setCapacity(v25, 4uLL);
  ++v26;
  re::DynamicArray<re::TechniqueFunctionConstant>::copy(v25, 0, v64, 4);
  char v28 = 0;
  char v29 = 0;
  uint64_t v30 = 0;
  uint64_t v18 = 32;
  char v31 = 1;
  do
  {
    re::FixedArray<CoreIKTransform>::deinit((uint64_t *)((char *)&v60 + v18 * 8));
    re::DynamicString::deinit((re::DynamicString *)&v57[v18]);
    v18 -= 8;
  }
  while (v18 * 8);
  ComputePipelineState = (void **)re::getOrCreateComputePipelineState(a2, (uint64_t)v21);
  NS::SharedPtr<MTL::Texture>::operator=(a4, ComputePipelineState);
  re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)v25);
  if (v24[0])
  {
    if (v24[1]) {
      (*(void (**)(void))(*(void *)v24[0] + 40))();
    }
    memset(v24, 0, sizeof(v24));
  }
  if (v21[0] && v22 && (v23 & 1) != 0) {
    (*(void (**)(void))(*(void *)v22 + 40))();
  }
  if (v37)
  {
    if (v38)
    {
      (*(void (**)(void))(*(void *)v37 + 40))();
      uint64_t v38 = 0;
      uint64_t v39 = 0;
    }
    uint64_t v37 = 0;
  }
  if (v32 && (v33 & 1) != 0) {
    (*(void (**)(void))(*v32 + 40))();
  }
  if (v45)
  {
    if (v46)
    {
      (*(void (**)(void))(*(void *)v45 + 40))();
      uint64_t v46 = 0;
      uint64_t v47 = 0;
    }
    uint64_t v45 = 0;
  }
  if (v40 && (v41 & 1) != 0) {
    (*(void (**)(void))(*v40 + 40))();
  }
  if (v53)
  {
    if (v54)
    {
      (*(void (**)(void))(*(void *)v53 + 40))();
      uint64_t v54 = 0;
      uint64_t v55 = 0;
    }
    uint64_t v53 = 0;
  }
  if (v48 && (v49 & 1) != 0) {
    (*(void (**)(void))(*v48 + 40))();
  }
  if (v59)
  {
    if (v60)
    {
      (*(void (**)(void))(*(void *)v59 + 40))();
      uint64_t v60 = 0;
      uint64_t v61 = 0;
    }
    uint64_t v59 = 0;
  }
  if (v56 && (v57[0] & 1) != 0) {
    (*(void (**)(void))(*v56 + 40))();
  }
  if (v8) {
}
  }

void re::RayTracedAmbientOcclusionMutablePersistentData::compileShaderFunctions(void **a1, uint64_t a2, uint64_t a3)
{
  re::RayTracedAmbientOcclusionMutablePersistentData::setUpComputePipelineState((uint64_t)a1, a2, a3, a1 + 83, "rayTracedAmbientOcclusionMaskKernel");
  re::RayTracedAmbientOcclusionMutablePersistentData::setUpComputePipelineState(v6, a2, a3, a1 + 84, "rayTracedAmbientOcclusionMaskDilationHorizontalKernel");
  re::RayTracedAmbientOcclusionMutablePersistentData::setUpComputePipelineState(v7, a2, a3, a1 + 85, "rayTracedAmbientOcclusionMaskDilationVerticalKernel");
  re::RayTracedAmbientOcclusionMutablePersistentData::setUpComputePipelineState(v8, a2, a3, a1 + 86, "rayTracedAmbientOcclusionRaysKernel");
  re::RayTracedAmbientOcclusionMutablePersistentData::setUpComputePipelineState(v9, a2, a3, a1 + 87, "rayTracedAmbientOcclusionRaysInvalidationKernel");
  re::RayTracedAmbientOcclusionMutablePersistentData::setUpComputePipelineState(v10, a2, a3, a1 + 88, "rayTracedAmbientOcclusionTextureKernel");
  re::RayTracedAmbientOcclusionMutablePersistentData::setUpComputePipelineState(v11, a2, a3, a1 + 89, "rayTracedAmbientOcclusionAccumulationKernel");
  re::RayTracedAmbientOcclusionMutablePersistentData::setUpComputePipelineState(v12, a2, a3, a1 + 90, "rayTracedAmbientOcclusionATrousDenoisingKernel");
  re::RayTracedAmbientOcclusionMutablePersistentData::setUpComputePipelineState(v13, a2, a3, a1 + 91, "testRayTracedAmbientOcclusionCopyKernel");
}

void re::RenderGraphEmitterRegistry::~RenderGraphEmitterRegistry(re::RenderGraphEmitterRegistry *this)
{
  uint64_t v1 = this;
  {
    if (this)
    {
      re::introspect<re::RenderGraphEmitterBase>(void)::info = (_UNKNOWN *)re::introspect_RenderGraphEmitterBase(0);
    }
  }
  unint64_t v2 = (void *)*((void *)re::introspect<re::RenderGraphEmitterBase>(void)::info + 8);
  uint64_t v3 = (_DWORD *)*v2;
  if (*(_DWORD *)*v2 != 2)
  {
    id v4 = (_DWORD **)(v2 + 1);
    uint64_t v5 = *((unsigned int *)re::introspect<re::RenderGraphEmitterBase>(void)::info + 14) - 1;
    do
    {
      uint64_t v6 = *v4++;
      uint64_t v3 = v6;
      --v5;
    }
    while (*v6 != 2);
  }
  *((void *)v3 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
  uint64_t v7 = *((void *)v1 + 2);
  if (v7)
  {
    uint64_t v8 = (uint64_t *)*((void *)v1 + 4);
    uint64_t v9 = 40 * v7;
    do
    {
      uint64_t v10 = *v8;
      if (*v8)
      {
        uint64_t v11 = re::globalAllocators(this);
        this = (re::RenderGraphEmitterRegistry *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v11[2] + 40))(v11[2], v10);
      }
      *uint64_t v8 = 0;
      v8 += 5;
      v9 -= 40;
    }
    while (v9);
  }
  re::DynamicArray<re::IntrospectionPolymorphicType>::deinit((uint64_t)v1);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)v1 + 5);
  re::DynamicArray<re::IntrospectionPolymorphicType>::deinit((uint64_t)v1);
}

uint64_t re::RenderGraphEmitterRegistry::init(re::RenderGraphEmitterRegistry *this)
{
  uint64_t v1 = re::globalAllocators(this);
  uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v1[2] + 32))(v1[2], 112, 8);
  uint64_t result = re::RenderGraphEmitterRegistry::RenderGraphEmitterRegistry(v2);
  re::RenderGraphEmitterRegistry::m_instance = result;
  return result;
}

re *re::internal::destroyPersistent<re::RenderGraphEmitterRegistry>(re *result, uint64_t a2, re::RenderGraphEmitterRegistry *a3)
{
  if (a3)
  {
    uint64_t v4 = re::globalAllocators(result)[2];
    re::RenderGraphEmitterRegistry::~RenderGraphEmitterRegistry(a3);
    uint64_t v5 = *(uint64_t (**)(uint64_t, re::RenderGraphEmitterRegistry *))(*(void *)v4 + 40);
    return (re *)v5(v4, a3);
  }
  return result;
}

void re::RenderGraphEmitterRegistry::registerEmitter(uint64_t a1, uint64_t a2)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  uint64_t v4 = (os_unfair_lock_s *)(a1 + 104);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 104));
  uint64_t v5 = (**(uint64_t (***)(uint64_t))a2)(a2);
  int v6 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 8))(a2);
  uint64_t v7 = (char *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
  uint64_t v8 = (re *)strlen(v7);
  size_t v9 = (size_t)v8 + 1;
  uint64_t v10 = re::globalAllocators(v8);
  uint64_t v11 = (void *)(*(uint64_t (**)(uint64_t, size_t, void))(*(void *)v10[2] + 32))(v10[2], v9, 0);
  memcpy(v11, v7, v9);
  size_t v12 = strlen((const char *)v11);
  if (v12)
  {
    MurmurHash3_x64_128((uint64_t)v11, v12, 0, (unint64_t *)&v32);
    unint64_t v13 = (*((void *)&v32 + 1) + ((void)v32 << 6) + ((unint64_t)v32 >> 2) - 0x61C8864680B583E9) ^ v32;
  }
  else
  {
    unint64_t v13 = 0;
  }
  *(void *)&long long v32 = v11;
  *((void *)&v32 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = v5;
  uint64_t v33 = 0;
  unint64_t v34 = v13;
  int v35 = v6;
  re::DynamicArray<re::IntrospectionPolymorphicType>::add((void *)a1, (uint64_t)&v32);
  uint64_t v14 = (re *)re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)&v32 + 8);
  *(_DWORD *)(a1 + 8re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = *(void *)(a1 + 16);
  *(void *)(a1 + 96) = *(void *)(a1 + 32);
  uint64_t v15 = re::introspectionSharedMutex(v14);
  std::__shared_mutex_base::lock(v15);
  long long v32 = *(_OWORD *)(v5 + 32);
  if (v7)
  {
    uint64_t v16 = *v7;
    if (*v7)
    {
      char v17 = v7[1];
      if (v17)
      {
        uint64_t v18 = (unsigned __int8 *)(v7 + 2);
        do
        {
          uint64_t v16 = 31 * v16 + v17;
          int v19 = *v18++;
          char v17 = v19;
        }
        while (v19);
      }
    }
  }
  else
  {
    uint64_t v16 = 0;
  }
  *(void *)&v31.var0 = 2 * v16;
  v31.var1 = v7;
  re::StringID::destroyString((re::StringID *)&v31);
  unint64_t v21 = re::introspectionSharedMutex(v20);
  std::__shared_mutex_base::unlock(v21);
  unint64_t v22 = *(void *)(a1 + 40);
  unint64_t v23 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (v13 ^ (v13 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v13 ^ (v13 >> 30))) >> 27));
  unint64_t v24 = v23 ^ (v23 >> 31);
  if (v22)
  {
    unint64_t v22 = v24 % *(unsigned int *)(a1 + 64);
    uint64_t v25 = *(unsigned int *)(*(void *)(a1 + 48) + 4 * v22);
    if (v25 != 0x7FFFFFFF)
    {
      uint64_t v30 = *(void *)(a1 + 56);
      if (*(void *)(v30 + 32 * v25 + 16) == v13) {
        goto LABEL_19;
      }
      while (1)
      {
        uint64_t v25 = *(_DWORD *)(v30 + 32 * v25 + 8) & 0x7FFFFFFF;
        if (v25 == 0x7FFFFFFF) {
          break;
        }
        if (*(void *)(v30 + 32 * v25 + 16) == v13) {
          goto LABEL_19;
        }
      }
    }
  }
  uint64_t v26 = *(unsigned int *)(a1 + 76);
  if (v26 == 0x7FFFFFFF)
  {
    uint64_t v26 = *(unsigned int *)(a1 + 72);
    int v27 = v26;
    if (v26 == *(_DWORD *)(a1 + 64))
    {
      re::HashTable<unsigned long long,re::ecs2::Scene const*,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(a1 + 40, 2 * *(_DWORD *)(a1 + 68));
      LODWORD(v22) = v24 % *(unsigned int *)(a1 + 64);
      int v27 = *(_DWORD *)(a1 + 72);
    }
    *(_DWORD *)(a1 + 72) = v27 + 1;
    uint64_t v28 = *(void *)(a1 + 56);
    int v29 = *(_DWORD *)(v28 + 32 * v26 + 8);
  }
  else
  {
    uint64_t v28 = *(void *)(a1 + 56);
    int v29 = *(_DWORD *)(v28 + 32 * v26 + 8);
    *(_DWORD *)(a1 + 76) = v29 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v28 + 32 * v26 + re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = v29 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 56) + 32 * v26 + re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = *(_DWORD *)(*(void *)(a1 + 56) + 32 * v26 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 48) + 4 * v22);
  *(void *)(*(void *)(a1 + 56) + 32 * v26) = v24;
  *(void *)(*(void *)(a1 + 56) + 32 * v26 + 16) = v13;
  *(void *)(*(void *)(a1 + 56) + 32 * v26 + 24) = a2;
  *(_DWORD *)(*(void *)(a1 + 48) + 4 * v22) = v26;
  ++*(_DWORD *)(a1 + 68);
  ++*(_DWORD *)(a1 + 80);
LABEL_19:
  os_unfair_lock_unlock(v4);
}

void re::RenderGraphEmitterRegistry::registryItem(os_unfair_lock_s *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v8 = a2;
  uint64_t v5 = this + 26;
  os_unfair_lock_lock(this + 26);
  int v6 = (void *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)&this[10], &v8);
  if (v6)
  {
    *(void *)(a3 + re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = *v6;
    char v7 = 1;
  }
  else
  {
    char v7 = 0;
  }
  *(unsigned char *)a3 = v7;
  os_unfair_lock_unlock(v5);
}

uint64_t re::RenderGraphEmitterRegistry::RenderGraphEmitterRegistry(uint64_t this)
{
  *(void *)this = 0;
  *(void *)(this + re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = 0;
  *(_DWORD *)(this + 24) = 0;
  *(void *)(this + 16) = 0;
  *(_OWORD *)(this + 32) = 0u;
  *(_OWORD *)(this + 4re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = 0u;
  *(_OWORD *)(this + 60) = 0u;
  *(void *)(this + 76) = 0x7FFFFFFFLL;
  *(_DWORD *)(this + 8re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = 0;
  uint64_t v1 = this + 88;
  *(void *)(this + 96) = 0;
  *(_DWORD *)(this + 104) = 0;
  uint64_t v2 = &re::mtl::introspect_BlendOperation(BOOL)::enumTable;
  {
    uint64_t v11 = this + 88;
    uint64_t v12 = this;
    uint64_t v2 = (void *)&re::mtl::introspect_BlendOperation(BOOL)::enumTable;
    int v10 = v9;
    uint64_t v1 = v11;
    this = v12;
    if (v10)
    {
      re::introspect<re::RenderGraphEmitterBase>(void)::info = (_UNKNOWN *)re::introspect_RenderGraphEmitterBase(0);
      uint64_t v2 = (void *)&re::mtl::introspect_BlendOperation(BOOL)::enumTable;
      uint64_t v1 = v11;
      this = v12;
    }
  }
  uint64_t v3 = v2[113];
  uint64_t v4 = *(void **)(v3 + 64);
  uint64_t v5 = (_DWORD *)*v4;
  if (*(_DWORD *)*v4 != 2)
  {
    int v6 = (_DWORD **)(v4 + 1);
    uint64_t v7 = *(unsigned int *)(v3 + 56) - 1;
    do
    {
      uint64_t v8 = *v6++;
      uint64_t v5 = v8;
      --v7;
    }
    while (*v8 != 2);
  }
  *((void *)v5 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = v1;
  return this;
}

void re::DepthPatchNode::configure(re::DepthPatchNode *this, const char *a2, const char *a3, re::RenderFrame *a4)
{
  if (*((void *)this + 34)) {
    re::AssetHandle::loadAsync((re::DepthPatchNode *)((char *)this + 264));
  }
}

void re::DepthPatchNode::execute(const char **this, re::RenderGraphContext *a2)
{
  uint64_t v94 = *MEMORY[0x263EF8340];
  if (re::GraphicsFeatureFlags::enableDepthPatch(void)::onceToken != -1) {
    goto LABEL_28;
  }
  while (1)
  {
    if (!re::GraphicsFeatureFlags::enableDepthPatch(void)::gEnableDepthPatch) {
      return;
    }
    uint64_t v5 = re::RenderGraphDataStore::tryGet<re::DepthPatchData>(*((void *)a2 + 146), *(void *)(*((void *)a2 + 5) + 48));
    if (!v5) {
      return;
    }
    uint64_t v6 = v5;
    if (!*(void *)(v5 + 24)) {
      return;
    }
    uint64_t v7 = re::AssetHandle::loadedAsset<re::MaterialAsset>((re::MaterialAsset *)(this + 33));
    if (!v7) {
      return;
    }
    uint64_t v8 = *(void *)(v7 + 1664);
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9CA40, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_26AF9CA40))
    {
      _MergedGlobals_470 = re::hashString((re *)"DepthPatchStencilMask", v51);
      __cxa_guard_release(&qword_26AF9CA40);
    }
    re::RenderGraphContext::makeFullscreenDrawCall(a2, v8, 0, 0, 0, 0, v80);
    int v9 = (int *)re::MaterialParameterTableLayers::resolveTechniqueIndices(v82, _MergedGlobals_470);
    if (!v10)
    {
      re::internal::assertLog((re::internal *)6, 0, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
      _os_crash();
      __break(1u);
LABEL_30:
      uint64_t v11 = re::DrawCallRecorder::allocateDrawCallRecorderGroup((re::RenderGraphContext *)((char *)a2 + 1336), this[2], "DepthPatchStencilMask");
      goto LABEL_10;
    }
    uint64_t v2 = &v61;
    int v81 = *v9;
    uint64_t v53 = this;
    if (*((unsigned char *)a2 + 1332)) {
      goto LABEL_30;
    }
    uint64_t v11 = 0;
LABEL_10:
    v79[0] = 1;
    *(__n128 *)((char *)&v2[14] + 15) = (__n128)__const__ZN2re20FeatureStencilStates17getDepthPatchInfoENS0_15DepthPatchUsageE_kWriteStInfo;
    v79[17] = 0x80;
    re::encodeFullscreenDrawCall((re::DrawCall *)v80, (uint64_t)"DepthPatchStencilMask", a2, v11, 0, v79, 0);
    uint64_t v12 = *(re::Allocator **)(*(void *)a2 + 24);
    uint64_t v13 = (*(uint64_t (**)(re::Allocator *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 224, 16);
    *(_OWORD *)uint64_t v13 = 0u;
    *(_OWORD *)(v13 + 16) = 0u;
    *(_OWORD *)(v13 + 32) = 0u;
    *(_OWORD *)(v13 + 4re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = 0u;
    *(_OWORD *)(v13 + 64) = 0u;
    *(_OWORD *)(v13 + 80) = 0u;
    *(_OWORD *)(v13 + 96) = 0u;
    *(_OWORD *)(v13 + 112) = 0u;
    *(_OWORD *)(v13 + 12re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = 0u;
    *(_OWORD *)(v13 + 144) = 0u;
    *(_OWORD *)(v13 + 160) = 0u;
    *(_OWORD *)(v13 + 176) = 0u;
    *(_OWORD *)(v13 + 192) = 0u;
    *(_OWORD *)(v13 + 20re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = 0u;
    __asm { FMOV            V0.2S, #1.0 }
    *(void *)(v13 + 152) = _D0;
    *(_DWORD *)(v13 + 160) = 1065353216;
    *(void *)(v13 + 40) = v8;
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9CA50, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_26AF9CA50))
    {
      qword_26AF9CA48 = re::hashString((re *)"DepthPatch", v52);
      __cxa_guard_release(&qword_26AF9CA50);
    }
    int v19 = (int *)re::MaterialParameterTableLayers::resolveTechniqueIndices((re::MaterialParameterTableLayers *)v13, qword_26AF9CA48);
    if (!v20)
    {
      re::internal::assertLog((re::internal *)6, 0, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
      _os_crash();
      __break(1u);
LABEL_32:
      uint64_t v49 = re::DrawCallRecorder::allocateDrawCallRecorderGroup((re::RenderGraphContext *)((char *)a2 + 1336), *(const char **)(v6 + 16), "DepthPatchPass");
LABEL_25:
      uint64_t v87 = v49;
      char v88 = 0;
      re::RenderGraphContext::getDefaultEncodeDrawCallDataStoreArgs(a2, v83);
      re::RenderGraphContext::encodeDrawCalls(a2, v83, v84);
      return;
    }
    int v21 = *v19;
    __n128 v61 = 0uLL;
    uint64_t v62 = *((void *)a2 + 188);
    uint64_t v63 = 0;
    uint64_t v64 = 0;
    uint64_t v65 = 0;
    uint64_t v66 = v13;
    unint64_t v67 = 0xFFFF010000000000;
    long long v68 = 0u;
    long long v69 = 0u;
    long long v70 = 0u;
    long long v71 = 0u;
    long long v72 = 0u;
    int v73 = v21;
    *(unint64_t *)((char *)v2[9].n128_u64 + 4) = 0;
    *(unsigned __int32 *)((char *)&v2[9].n128_u32[2] + 3) = 0;
    uint64_t v74 = 0;
    uint64_t v75 = 0;
    __int16 v76 = 0;
    *(unint64_t *)((char *)v2[11].n128_u64 + 4) = 25172350;
    *(unint64_t *)((char *)&v2[11].n128_u64[1] + 4) = 0x7FFFFFFFLL;
    *(unint64_t *)((char *)v2[12].n128_u64 + 4) = 0xFFFFFFFFLL;
    uint64_t v77 = 0;
    uint64_t v78 = 0;
    unint64_t v22 = (void *)(*(uint64_t (**)(re::Allocator *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 328, 8);
    re::DrawTable::DrawTable((re::DrawTable *)v22, v12);
    uint64_t v23 = re::RenderGraphDataStore::get<re::CameraMatrices>(*((void *)a2 + 146), *(void *)(*((void *)a2 + 5) + 48));
    uint64_t v24 = *(void *)a2;
    unsigned __int32 v25 = *(unsigned __int8 *)(v23 + 128);
    unsigned int v26 = *(_DWORD *)(v6 + 24);
    v60[0] = 0;
    v60[8] = 0;
    re::addInstancedDrawCall((re::DrawTable *)v22, &v61, v24, v25, v26, (uint64_t)v60);
    if (!*(void *)(v6 + 24)) {
      break;
    }
    unint64_t v27 = 0;
    unsigned int v28 = 0;
    uint64_t v2 = (__n128 *)(v22 + 7);
    while (1)
    {
      uint64_t v29 = *(void *)(v6 + 40) + 32 * v27;
      float32x4_t v31 = *(float32x4_t *)v29;
      float32x4_t v30 = *(float32x4_t *)(v29 + 16);
      int32x4_t v32 = vcgtq_f32(*(float32x4_t *)v29, v30);
      v33.i32[3] = v32.i32[2];
      LODWORD(v29) = vmaxvq_u32(v33);
      v33.i64[0] = 0;
      v33.i32[2] = 0;
      if ((v29 & 0x80000000) == 0)
      {
        v34.i64[0] = 0x3F0000003F000000;
        v34.i64[1] = 0x3F0000003F000000;
        uint32x4_t v33 = (uint32x4_t)vmulq_f32(vaddq_f32(v30, v31), v34);
      }
      this = *(const char ***)(v6 + 64);
      if ((unint64_t)this <= v27) {
        break;
      }
      uint64_t v35 = 0;
      float32x4_t v36 = vsubq_f32(v30, v31);
      v36.i32[3] = 0;
      v37.i64[0] = 0x3F0000003F000000;
      v37.i64[1] = 0x3F0000003F000000;
      float32x4_t v38 = vmulq_f32(vmaxnmq_f32(v36, (float32x4_t)0), v37);
      int32x4_t v39 = vdupq_lane_s32(0, 0);
      int32x4_t v40 = v39;
      v40.i32[0] = v38.i32[0];
      int32x4_t v41 = v39;
      v41.i32[1] = v38.i32[1];
      v39.i32[2] = v38.i32[2];
      uint64_t v42 = (float32x4_t *)(*(void *)(v6 + 80) + (v27 << 6));
      float32x4_t v43 = *v42;
      float32x4_t v44 = v42[1];
      float32x4_t v45 = v42[2];
      float32x4_t v46 = v42[3];
      v33.i32[3] = 1.0;
      *(int32x4_t *)uint64_t v84 = v40;
      *(int32x4_t *)&unsigned char v84[16] = v41;
      *(int32x4_t *)&v84[32] = v39;
      *(uint32x4_t *)&v84[48] = v33;
      do
      {
        *(long long *)((char *)&v89 + v35) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v43, COERCE_FLOAT(*(_OWORD *)&v84[v35])), v44, *(float32x2_t *)&v84[v35], 1), v45, *(float32x4_t *)&v84[v35], 2), v46, *(float32x4_t *)&v84[v35], 3);
        v35 += 16;
      }
      while (v35 != 64);
      long long v56 = v90;
      long long v57 = v89;
      long long v54 = v92;
      long long v55 = v91;
      uint64_t v47 = (_OWORD *)re::BucketArray<re::Matrix4x4<float>,128ul>::operator[]((uint64_t)(v22 + 7), v27);
      *uint64_t v47 = v57;
      v47[1] = v56;
      void v47[2] = v55;
      v47[3] = v54;
      unint64_t v27 = ++v28;
      if (*(void *)(v6 + 24) <= (unint64_t)v28) {
        goto LABEL_20;
      }
    }
    v83[0] = 0;
    long long v92 = 0u;
    long long v93 = 0u;
    long long v90 = 0u;
    long long v91 = 0u;
    long long v89 = 0u;
    a2 = (re::RenderGraphContext *)&_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v84 = 136315906;
    *(void *)&v84[4] = "operator[]";
    *(_WORD *)&v84[12] = 1024;
    *(_DWORD *)&v84[14] = 797;
    *(_WORD *)&v84[18] = 2048;
    *(void *)&v84[20] = v27;
    *(_WORD *)&v84[28] = 2048;
    *(void *)&v84[30] = this;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_28:
    dispatch_once(&re::GraphicsFeatureFlags::enableDepthPatch(void)::onceToken, &__block_literal_global_10_1);
  }
LABEL_20:
  uint64_t v6 = (uint64_t)v53;
  if (*((unsigned char *)v53 + 260)) {
    uint64_t v48 = &__const__ZN2re20FeatureStencilStates17getDepthPatchInfoENS0_15DepthPatchUsageE_kReadForImmersiveEnvironmentStInfo;
  }
  else {
    uint64_t v48 = &__const__ZN2re20FeatureStencilStates17getDepthPatchInfoENS0_15DepthPatchUsageE_kReadStInfo;
  }
  long long v58 = *v48;
  char v59 = *((unsigned char *)v48 + 16);
  if (v22[5])
  {
    re::DrawTableSlice::DrawTableSlice(&v89, (uint64_t)v22);
    uint64_t v49 = 0;
    *(void *)uint64_t v84 = "DepthPatchPass";
    *(void *)&v84[8] = &v89;
    uint64_t v50 = *(void *)(v23 + 80);
    *(void *)&unsigned char v84[16] = *(void *)(v23 + 40);
    *(void *)&v84[24] = v50;
    *(void *)&v84[32] = 0;
    v84[40] = *(unsigned char *)(v23 + 128);
    *(_WORD *)&v84[41] = 0;
    *(_WORD *)&v84[44] = 256;
    *(_OWORD *)&v84[46] = v58;
    v84[62] = v59;
    *(_OWORD *)&v84[63] = 0u;
    long long v85 = 0u;
    char v86 = 0;
    if (*((unsigned char *)a2 + 1332)) {
      goto LABEL_32;
    }
    goto LABEL_25;
  }
}

void *re::allocInfo_DepthPatchNode(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9CA58, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9CA58))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF9CA80, "DepthPatchNode");
    __cxa_guard_release(&qword_26AF9CA58);
  }
  return &unk_26AF9CA80;
}

void re::initInfo_DepthPatchNode(re *this, re::IntrospectionBase *a2)
{
  v17[0] = 0xF6EF85110940D60ELL;
  v17[1] = "DepthPatchNode";
  re::StringID::destroyString((re::StringID *)v17);
  *((_OWORD *)this + 2) = v18;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9CA60, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF9CA60);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::introspect_RenderGraphNode((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = "RenderGraphNode";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 4re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF9CA68 = v7;
      uint64_t v8 = re::introspectionAllocator((re *)v7);
      uint64_t v10 = re::introspect_BOOL((re *)1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = "renderToSeparateTarget";
      *(void *)(v11 + 16) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x10400000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + 4re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF9CA70 = v11;
      uint64_t v12 = re::introspectionAllocator((re *)v11);
      uint64_t v14 = re::introspect_AssetHandle((re *)1, v13);
      uint64_t v15 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 72, 8);
      *(_DWORD *)uint64_t v15 = 1;
      *(void *)(v15 + re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = "depthPatchMaterial";
      *(void *)(v15 + 16) = v14;
      *(void *)(v15 + 24) = 0;
      *(void *)(v15 + 32) = 0x10800000002;
      *(_DWORD *)(v15 + 40) = 0;
      *(void *)(v15 + 4re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_26AF9CA78 = v15;
      __cxa_guard_release(&qword_26AF9CA60);
    }
  }
  *((void *)this + 2) = 0x12000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((void *)this + re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = &qword_26AF9CA68;
  *((void *)this + 9) = re::internal::defaultConstruct<re::DepthPatchNode>;
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::DepthPatchNode>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::DepthPatchNode>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::DepthPatchNode>;
  re::IntrospectionRegistry::add(this, v3);
  long long v16 = v18;
}

re::RenderGraphNode *re::internal::defaultConstruct<re::DepthPatchNode>(int a1, int a2, re::RenderGraphNode *this)
{
  uint64_t result = re::RenderGraphNode::RenderGraphNode(this);
  *((_DWORD *)result + 64) = 1;
  *(void *)uint64_t result = &unk_26E71EF28;
  *((unsigned char *)result + 260) = 0;
  *((void *)result + 34) = 0;
  *((void *)result + 35) = 0;
  *((void *)result + 33) = 0;
  return result;
}

uint64_t re::internal::defaultDestruct<re::DepthPatchNode>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

re::RenderGraphNode *re::internal::defaultConstructV2<re::DepthPatchNode>(re::RenderGraphNode *a1)
{
  uint64_t result = re::RenderGraphNode::RenderGraphNode(a1);
  *((_DWORD *)result + 64) = 1;
  *(void *)uint64_t result = &unk_26E71EF28;
  *((unsigned char *)result + 260) = 0;
  *((void *)result + 34) = 0;
  *((void *)result + 35) = 0;
  *((void *)result + 33) = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::DepthPatchNode>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::introspect_DepthPatchNode(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"DepthPatchNode", (uint64_t (*)(re::internal *))re::allocInfo_DepthPatchNode, (re::IntrospectionBase *(*)(void))re::initInfo_DepthPatchNode, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::DepthPatchNode>, this);
}

void re::DepthPatchNode::~DepthPatchNode(id *this)
{
  *this = &unk_26E71EF28;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(this + 33));
  re::RenderGraphNode::~RenderGraphNode(this);
}

{
  uint64_t vars8;

  *this = &unk_26E71EF28;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(this + 33));
  re::RenderGraphNode::~RenderGraphNode(this);
  JUMPOUT(0x237DBCBD0);
}

__n128 re::RenderGraphEmitterBase::initRuntimeSettings@<Q0>(re::RenderGraphEmitterBase *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  re::RenderGraphEmitterRegistry::registryItem((os_unfair_lock_s *)re::RenderGraphEmitterRegistry::m_instance, a2, (uint64_t)v10);
  if (v10[0])
  {
    uint64_t v6 = (re *)(**v11)(v11);
    re::makeBindNode(v6, this, (uint64_t)&v12);
    if ((__n128 *)((char *)this + 16) != &v12) {
      re::BindNode::move((re::RenderGraphEmitterBase *)((char *)this + 16), (re::BindNode *)&v12);
    }
    result.n128_f64[0] = re::BindNode::deinit((re::BindNode *)&v12);
    *(unsigned char *)a3 = 1;
  }
  else
  {
    re::DynamicString::format((re::DynamicString *)"Unregistered RenderGraphEmitter with typeHash %lu.", (re::DynamicString *)&v12, a2);
    __n128 result = v12;
    uint64_t v8 = v13;
    uint64_t v9 = v14;
    *(unsigned char *)a3 = 0;
    *(__n128 *)(a3 + re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = result;
    *(void *)(a3 + 24) = v8;
    *(void *)(a3 + 32) = v9;
  }
  return result;
}

void re::RenderGraphEmitterBase::execute(re::RenderGraphEmitterBase *this, re::RenderManager *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *((void *)a2 + 13);
  if (v4)
  {
    this = (re::RenderGraphEmitterBase *)re::RenderFrameBox::get(v4 + 344, 0xFFFFFFFFFFFFFFFuLL);
    uint64_t v5 = this;
  }
  else
  {
    uint64_t v5 = 0;
  }
  unint64_t v6 = *((void *)v5 + 496);
  if (v6 >= 2)
  {
    uint64_t v7 = *re::graphicsLogObjects(this);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl(&dword_233120000, v7, OS_LOG_TYPE_DEFAULT, "Only one workload per frame is currently supported. Only the last workload will be executed.", v8, 2u);
    }
    unint64_t v6 = *((void *)v5 + 496);
  }
  if (v6) {
    (*(void (**)(re::RenderGraphEmitterBase *, re::RenderManager *, void))(*(void *)v3 + 40))(v3, a2, *(void *)(*((void *)v5 + 498) + 8 * v6 - 8));
  }
}

uint64_t re::RenderGraphEmitterBase::execute(re::RenderGraphEmitterBase *this, re::RenderManager *a2, re::RenderFrameWorkload *a3)
{
  uint64_t v5 = *((void *)a2 + 13);
  if (v5) {
    uint64_t v6 = re::RenderFrameBox::get(v5 + 344, *((void *)a3 + 5));
  }
  else {
    uint64_t v6 = 0;
  }
  re::RenderFrameWorkload::beforeEmit(a3);
  uint64_t v7 = *(uint64_t (**)(re::RenderGraphEmitterBase *, uint64_t))(*(void *)this + 48);
  return v7(this, v6);
}

uint64_t re::RenderGraphEmitterBase::setRuntimeSetting(re::BindNode **this, const re::IntrospectionBase *a2, const char *a3, char *a4)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  *(void *)&v20.var0 = 0;
  v20.var1 = "";
  uint64_t v8 = (unsigned int *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)(this + 11), &v20);
  if (!v8)
  {
    *(void *)&v28[8] = 0;
    long long v29 = 0uLL;
    LODWORD(v30) = 0;
    *((void *)&v30 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
    *(void *)&v31[0] = 0;
    *((void *)&v31[0] + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = "";
    v19[0] = (uint64_t)a3;
    v19[1] = strlen(a3);
    re::BindNode::bindPoint(this + 2, (uint64_t)a2, v19, (uint64_t)buf);
    *(void *)unsigned int v28 = *(void *)buf;
    re::DynamicArray<re::RigDataValue>::operator=((uint64_t)&v28[8], (uint64_t)&buf[8]);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&buf[8]);
    uint64_t v9 = (re *)re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&buf[8]);
    uint64_t v10 = *((void *)&v29 + 1);
    if (*((void *)&v29 + 1))
    {
      re::StringID::operator=((unint64_t *)v31, (uint64_t *)&v20);
      re::DynamicArray<re::BindPointAndPath>::add((_anonymous_namespace_ *)(this + 6), (uint64_t *)v28);
      *(_DWORD *)float32x4_t buf = *((_DWORD *)this + 16) - 1;
      uint64_t v8 = (unsigned int *)re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add<unsigned int &>((uint64_t)(this + 11), &v20, buf);
    }
    else
    {
      uint64_t v11 = *re::graphicsLogObjects(v9);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)float32x4_t buf = 136315138;
        *(void *)&buf[4] = a3;
        _os_log_impl(&dword_233120000, v11, OS_LOG_TYPE_DEFAULT, "Failed to find binding path [%s].", buf, 0xCu);
      }
      uint64_t v8 = 0;
    }
    re::StringID::destroyString((re::StringID *)v31);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v28[8]);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v28[8]);
    if (!v10) {
      goto LABEL_13;
    }
  }
  unint64_t v12 = *v8;
  uint64_t v13 = this[8];
  if ((unint64_t)v13 <= v12)
  {
    v19[0] = 0;
    memset(v31, 0, sizeof(v31));
    long long v29 = 0u;
    long long v30 = 0u;
    *(_OWORD *)unsigned int v28 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)float32x4_t buf = 136315906;
    *(void *)&buf[4] = "operator[]";
    __int16 v22 = 1024;
    int v23 = 789;
    __int16 v24 = 2048;
    unint64_t v25 = v12;
    __int16 v26 = 2048;
    unint64_t v27 = v13;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v14 = (_anonymous_namespace_ *)re::BindPoint::valueUntyped((re::BindNode *)((char *)this[10] + 64 * v12));
  *(void *)&v28[8] = 0;
  *(void *)&long long v29 = 0;
  if ((v15 & 1) == 0)
  {
    char v17 = *re::graphicsLogObjects((re *)v15);
    uint64_t v16 = 0;
    if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_14;
    }
    *(_DWORD *)unsigned int v28 = 136315138;
    *(void *)&v28[4] = a3;
    _os_log_impl(&dword_233120000, v17, OS_LOG_TYPE_DEFAULT, "Failed to perform deep copy into binding path [%s].", v28, 0xCu);
LABEL_13:
    uint64_t v16 = 0;
    goto LABEL_14;
  }
  uint64_t v16 = 1;
LABEL_14:
  re::StringID::destroyString((re::StringID *)&v20);
  return v16;
}

void *re::allocInfo_RenderGraphEmitterBase(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_471, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_471))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF9CB10, "RenderGraphEmitterBase");
    __cxa_guard_release(&_MergedGlobals_471);
  }
  return &unk_26AF9CB10;
}

void re::initInfo_RenderGraphEmitterBase(re *this, re::IntrospectionBase *a2)
{
  v8[0] = 0xB2BF4B7174817E0ELL;
  v8[1] = "RenderGraphEmitterBase";
  re::StringID::destroyString((re::StringID *)v8);
  *((_OWORD *)this + 2) = v9;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9CB08, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF9CB08);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 16, 8);
      *(_DWORD *)uint64_t v6 = 2;
      *(void *)(v6 + re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = 0;
      qword_26AF9CB00 = v6;
      __cxa_guard_release(&qword_26AF9CB08);
    }
  }
  *((void *)this + 2) = 0x8800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
  *((void *)this + 12) = 0;
  *((_DWORD *)this + 14) = 1;
  *((void *)this + re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = &qword_26AF9CB00;
  re::IntrospectionRegistry::add(this, v3);
  long long v7 = v9;
}

uint64_t re::introspect_RenderGraphEmitterBase(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RenderGraphEmitterBase", (uint64_t (*)(re::internal *))re::allocInfo_RenderGraphEmitterBase, (re::IntrospectionBase *(*)(void))re::initInfo_RenderGraphEmitterBase, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::RenderGraphEmitterBase>, this);
}

void re::guided_filter_occlusion::encodeGuidedFilterOcclusionCommands(uint64_t a1)
{
  re::SyncMechanism::sync(*(re::SyncMechanism **)(a1 + 16));
  re::mtl::CommandBuffer::makeComputeCommandEncoder((id *)(a1 + 8), &v102);
  uint64_t v2 = *(void *)(a1 + 48);
  [v102 setTexture:*(void *)v2 atIndex:0];
  [v102 setTexture:*(void *)(v2 + 8) atIndex:1];
  [v102 setTexture:*(void *)(v2 + 32) atIndex:2];
  uint64_t v3 = *(void *)(*(void *)(a1 + 56) + 88);
  id v4 = v102;
  [v4 setComputePipelineState:v3];

  id v5 = objc_msgSend(*(id *)(v2 + 32), sel_width);
  id v6 = objc_msgSend(*(id *)(v2 + 32), sel_height);
  v7.i64[0] = (uint64_t)v5;
  v7.i64[1] = (uint64_t)v6;
  float64x2_t v8 = (float64x2_t)vdupq_n_s64(0x3FB0000000000000uLL);
  uint64x2_t v106 = vcvtq_u64_f64(vrndpq_f64(vmulq_f64(vcvtq_f64_u64(v7), v8)));
  uint64_t v107 = 1;
  uint64_t v105 = 1;
  float64x2_t v98 = v8;
  long long v104 = re::guided_filter_occlusion::kDefaulThreadsPerGroup;
  [v102 dispatchThreadgroups:&v106 threadsPerThreadgroup:&v104];
  uint64_t v9 = *(void *)(a1 + 48);
  [v102 setTexture:*(void *)(v9 + 16) atIndex:0];
  [v102 setTexture:*(void *)(v9 + 48) atIndex:1];
  LODWORD(v109[0]) = *(_DWORD *)(*(void *)(re::RenderGraphDataStore::get<re::CameraMatrices>(*(void *)(*(void *)a1 + 1168), *(void *)(*(void *)(*(void *)a1 + 40) + 48))+ 80)+ 56);
  [v102 setBytes:v109 length:4 atIndex:2];
  uint64_t v10 = *(void *)(*(void *)(a1 + 56) + 104);
  id v11 = v102;
  [v11 setComputePipelineState:v10];

  id v12 = objc_msgSend(*(id *)(v9 + 56), sel_width);
  id v13 = objc_msgSend(*(id *)(v9 + 56), (SEL)&selRef_setDestinationAlphaBlendFactor_);
  v14.i64[0] = (uint64_t)v12;
  v14.i64[1] = (uint64_t)v13;
  uint64x2_t v106 = vcvtq_u64_f64(vrndpq_f64(vmulq_f64(vcvtq_f64_u64(v14), v98)));
  uint64_t v107 = 1;
  uint64_t v105 = 1;
  long long v104 = re::guided_filter_occlusion::kDefaulThreadsPerGroup;
  [v102 dispatchThreadgroups:&v106 threadsPerThreadgroup:&v104];
  [v102 endEncoding];
  re::SyncMechanism::sync(*(re::SyncMechanism **)(a1 + 16));
  uint64_t v15 = *(void **)(*(void *)(a1 + 32) + 16);
  uint64_t v16 = *(void **)(a1 + 8);
  uint64_t v17 = *(void *)(v9 + 56);
  id v18 = *(id *)(v9 + 48);
  id v19 = v16;
  id v20 = v15;
  [v20 encodeToCommandBuffer:v19 sourceTexture:v18 destinationTexture:v17];

  uint64_t v22 = *(void *)(a1 + 40);
  uint64_t v21 = *(void *)(a1 + 48);
  re::mtl::CommandBuffer::makeComputeCommandEncoder((id *)(a1 + 8), v109);
  [v109[0] setTexture:*(void *)(*(void *)(a1 + 24) + 16) atIndex:0];
  [v109[0] setTexture:*(void *)(*(void *)(a1 + 24) + 24) atIndex:1];
  [v109[0] setTexture:*(void *)(v21 + 88) atIndex:2];
  [v109[0] setBytes:*(void *)(a1 + 24) + 48 length:64 atIndex:3];
  uint64_t v23 = *(void *)(*(void *)(a1 + 56) + 80);
  id v24 = v109[0];
  [v24 setComputePipelineState:v23];

  uint64_t v25 = *(void *)(*(void *)(a1 + 24) + 160);
  v26.i64[0] = v25;
  v26.i64[1] = HIDWORD(v25);
  uint64x2_t v106 = vcvtq_u64_f64(vrndpq_f64(vmulq_f64(vcvtq_f64_u64(v26), v98)));
  uint64_t v107 = 1;
  uint64_t v105 = 1;
  long long v104 = re::guided_filter_occlusion::kDefaulThreadsPerGroup;
  [v109[0] dispatchThreadgroups:&v106 threadsPerThreadgroup:&v104];
  [v109[0] endEncoding];
  re::SyncMechanism::sync(*(re::SyncMechanism **)(a1 + 16));
  unint64_t v27 = *(void **)(a1 + 8);
  uint64_t v28 = *(void *)(v21 + 80);
  long long v29 = *(void **)(*(void *)(a1 + 32) + 24);
  id v30 = *(id *)(v21 + 88);
  id v31 = v27;
  id v32 = v29;
  [v32 encodeToCommandBuffer:v31 sourceTexture:v30 destinationTexture:v28];

  re::SyncMechanism::sync(*(re::SyncMechanism **)(a1 + 16));
  uint32x4_t v33 = *(void **)(*(void *)(a1 + 32) + 40);
  float32x4_t v34 = *(void **)(a1 + 8);
  uint64_t v35 = *(void *)(v22 + 24);
  id v36 = *(id *)(v21 + 80);
  id v37 = v34;
  id v38 = v33;
  [v38 encodeToCommandBuffer:v37 sourceTexture:v36 destinationTexture:v35];

  re::SyncMechanism::sync(*(re::SyncMechanism **)(a1 + 16));
  uint64_t v39 = *(void *)(a1 + 48);
  id v40 = objc_alloc(MEMORY[0x263F13230]);
  uint64_t v41 = *(unsigned int *)(*(void *)(a1 + 24) + 112);
  uint64_t v42 = (void *)[v40 initWithDevice:*(void *)(*(void *)(*(void *)a1 + 8) + 184) kernelWidth:v41 kernelHeight:v41];
  float32x4_t v43 = *(void **)(a1 + 8);
  float32x4_t v44 = *(void **)(v39 + 32);
  uint64_t v45 = *(void *)(v39 + 40);
  id v46 = v44;
  id v47 = v43;
  [v42 encodeToCommandBuffer:v47 sourceTexture:v46 destinationTexture:v45];

  re::SyncMechanism::sync(*(re::SyncMechanism **)(a1 + 16));
  uint64_t v48 = *(void *)(a1 + 48);
  re::mtl::CommandBuffer::makeComputeCommandEncoder((id *)(a1 + 8), v109);
  [v109[0] setTexture:*(void *)(v48 + 32) atIndex:0];
  [v109[0] setTexture:*(void *)(v48 + 40) atIndex:1];
  [v109[0] setTexture:*(void *)(v48 + 16) atIndex:2];
  [v109[0] setTexture:*(void *)(v48 + 24) atIndex:3];
  [v109[0] setTexture:*(void *)(v48 + 56) atIndex:4];
  LODWORD(v10re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = *(_DWORD *)(*(void *)(re::RenderGraphDataStore::get<re::CameraMatrices>(*(void *)(*(void *)a1 + 1168), *(void *)(*(void *)(*(void *)a1 + 40) + 48))+ 80)+ 56);
  [v109[0] setBytes:&v101 length:4 atIndex:0];
  [v109[0] setTexture:*(void *)(v48 + 64) atIndex:5];
  uint64_t v49 = *(void *)(*(void *)(a1 + 56) + 96);
  id v50 = v109[0];
  [v50 setComputePipelineState:v49];

  id v51 = objc_msgSend(*(id *)(v48 + 64), sel_width);
  id v52 = objc_msgSend(*(id *)(v48 + 64), sel_height);
  v53.i64[0] = (uint64_t)v51;
  v53.i64[1] = (uint64_t)v52;
  uint64x2_t v106 = vcvtq_u64_f64(vrndpq_f64(vmulq_f64(vcvtq_f64_u64(v53), v98)));
  uint64_t v107 = 1;
  uint64_t v105 = 1;
  long long v104 = re::guided_filter_occlusion::kDefaulThreadsPerGroup;
  [v109[0] dispatchThreadgroups:&v106 threadsPerThreadgroup:&v104];
  [v109[0] endEncoding];

  re::SyncMechanism::sync(*(re::SyncMechanism **)(a1 + 16));
  id v101 = *(id *)(*(void *)(a1 + 40) + 8);
  id v100 = *(id *)(*(void *)(a1 + 40) + 32);
  if (*(unsigned __int8 *)(a1 + 65) | *(unsigned __int8 *)(a1 + 64))
  {
    NS::SharedPtr<MTL::Texture>::operator=(&v101, *(void ***)(a1 + 40));
    NS::SharedPtr<MTL::Texture>::operator=(&v100, (void **)(*(void *)(a1 + 40) + 24));
  }
  re::mtl::CommandBuffer::makeComputeCommandEncoder((id *)(a1 + 8), &v99);
  uint64_t v54 = *(void *)(a1 + 48);
  uint64_t v55 = *(void *)(*(void *)(a1 + 24) + 176);
  [v99 setTexture:*(void *)(v54 + 64) atIndex:0];
  [v99 setTexture:*(void *)(v54 + 96) atIndex:1];
  uint64_t v56 = *(void *)(a1 + 24);
  LOWORD(v109[0]) = *(_DWORD *)(v56 + 128);
  HIDWORD(v109[0]) = *(_DWORD *)(v56 + 152);
  [v99 setBytes:v109 length:8 atIndex:0];
  uint64_t v57 = *(void *)(*(void *)(a1 + 56) + 64);
  id v58 = v99;
  [v58 setComputePipelineState:v57];

  v59.i64[0] = v55;
  v59.i64[1] = HIDWORD(v55);
  uint64x2_t v106 = vcvtq_u64_f64(vrndpq_f64(vmulq_f64(vcvtq_f64_u64(v59), v98)));
  uint64_t v107 = 1;
  uint64_t v105 = 1;
  long long v104 = re::guided_filter_occlusion::kDefaulThreadsPerGroup;
  [v99 dispatchThreadgroups:&v106 threadsPerThreadgroup:&v104];
  uint64_t v60 = *(void *)(a1 + 48);
  uint64_t v61 = *(void *)(*(void *)(a1 + 24) + 176);
  [v99 setTexture:*(void *)(v60 + 64) atIndex:0];
  [v99 setTexture:*(void *)(v60 + 104) atIndex:1];
  uint64_t v62 = *(void *)(*(void *)(a1 + 56) + 72);
  id v63 = v99;
  [v63 setComputePipelineState:v62];

  v59.i64[0] = v61;
  v59.i64[1] = HIDWORD(v61);
  uint64x2_t v106 = vcvtq_u64_f64(vrndpq_f64(vmulq_f64(vcvtq_f64_u64(v59), v98)));
  uint64_t v107 = 1;
  uint64_t v105 = 1;
  long long v104 = re::guided_filter_occlusion::kDefaulThreadsPerGroup;
  [v99 dispatchThreadgroups:&v106 threadsPerThreadgroup:&v104];
  [v99 endEncoding];
  re::SyncMechanism::sync(*(re::SyncMechanism **)(a1 + 16));
  uint64_t v64 = *(uint64_t **)(a1 + 40);
  uint64_t v65 = *(void **)(a1 + 8);
  uint64_t v66 = (void *)v64[3];
  unint64_t v67 = *(void **)(*(void *)(a1 + 48) + 104);
  uint64_t v68 = *v64;
  long long v69 = **(void ***)(a1 + 32);
  id v70 = *(id *)(*(void *)(a1 + 48) + 96);
  id v71 = v66;
  id v72 = v67;
  id v73 = v65;
  id v74 = v69;
  [v74 encodeRegressionToCommandBuffer:v73 sourceTexture:v72 guidanceTexture:v71 weightsTexture:v70 destinationCoefficientsTexture:v68];

  re::SyncMechanism::sync(*(re::SyncMechanism **)(a1 + 16));
  uint64_t v75 = *(void *)(a1 + 40);
  uint64_t v76 = *(void *)(a1 + 24);
  float v77 = *(float *)(v76 + 136);
  LODWORD(v6re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = *(_DWORD *)(v76 + 140);
  re::mtl::CommandBuffer::makeComputeCommandEncoder((id *)(a1 + 8), v109);
  [v109[0] setTexture:*(void *)(v75 + 24) atIndex:0];
  [v109[0] setTexture:v100 atIndex:1];
  [v109[0] setTexture:*(void *)v75 atIndex:2];
  [v109[0] setTexture:v101 atIndex:3];
  [v109[0] setTexture:*(void *)(v75 + 16) atIndex:6];
  float v108 = v77;
  [v109[0] setBytes:&v108 length:4 atIndex:7];
  int v103 = v61;
  [v109[0] setBytes:&v103 length:4 atIndex:8];
  uint64_t v78 = *(void *)(*(void *)(a1 + 56) + 56);
  id v79 = v109[0];
  [v79 setComputePipelineState:v78];

  id v80 = objc_msgSend(*(id *)(v75 + 16), sel_width);
  id v81 = objc_msgSend(*(id *)(v75 + 16), sel_height);
  v82.i64[0] = (uint64_t)v80;
  v82.i64[1] = (uint64_t)v81;
  uint64x2_t v106 = vcvtq_u64_f64(vrndpq_f64(vmulq_f64(vcvtq_f64_u64(v82), v98)));
  uint64_t v107 = 1;
  uint64_t v105 = 1;
  long long v104 = re::guided_filter_occlusion::kDefaulThreadsPerGroup;
  [v109[0] dispatchThreadgroups:&v106 threadsPerThreadgroup:&v104];
  [v109[0] endEncoding];

  re::SyncMechanism::sync(*(re::SyncMechanism **)(a1 + 16));
  uint64_t v83 = *(void *)(a1 + 48);
  uint64_t v84 = *(void **)(a1 + 8);
  long long v85 = *(void **)(v83 + 80);
  uint64_t v86 = *(void *)(v83 + 112);
  uint64_t v87 = **(void ***)(a1 + 32);
  id v88 = *(id *)(*(void *)(a1 + 40) + 16);
  id v89 = v85;
  id v90 = v84;
  id v91 = v87;
  [v91 encodeReconstructionToCommandBuffer:v90 guidanceTexture:v89 coefficientsTexture:v88 destinationTexture:v86];

  re::SyncMechanism::sync(*(re::SyncMechanism **)(a1 + 16));
  uint64_t v92 = *(void *)(a1 + 48);
  re::mtl::CommandBuffer::makeComputeCommandEncoder((id *)(a1 + 8), v109);
  [v109[0] setTexture:*(void *)(v92 + 112) atIndex:0];
  [v109[0] setTexture:*(void *)(v92 + 120) atIndex:1];
  float v108 = (float)(*(float *)(*(void *)(a1 + 24) + 156) * 5.0) + 1.0;
  [v109[0] setBytes:&v108 length:4 atIndex:2];
  uint64_t v93 = *(void *)(*(void *)(a1 + 56) + 48);
  id v94 = v109[0];
  [v94 setComputePipelineState:v93];

  id v95 = objc_msgSend(*(id *)(v92 + 120), sel_width);
  id v96 = objc_msgSend(*(id *)(v92 + 120), sel_height);
  v97.i64[0] = (uint64_t)v95;
  v97.i64[1] = (uint64_t)v96;
  uint64x2_t v106 = vcvtq_u64_f64(vrndpq_f64(vmulq_f64(vcvtq_f64_u64(v97), v98)));
  uint64_t v107 = 1;
  uint64_t v105 = 1;
  long long v104 = re::guided_filter_occlusion::kDefaulThreadsPerGroup;
  [v109[0] dispatchThreadgroups:&v106 threadsPerThreadgroup:&v104];
  [v109[0] endEncoding];

  re::SyncMechanism::sync(*(re::SyncMechanism **)(a1 + 16));
  if (v100) {

  }
  if (v101) {
}
  }

void re::RenderGraphTonemapNode::execute(re::RenderGraphTonemapNode *this, re::RenderGraphContext *a2)
{
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v36, 5060, 0);
  if (!*((unsigned char *)this + 516))
  {
    re::TonemapUserParameters::computeRenderParameters((re::RenderGraphTonemapNode *)((char *)this + 456), (uint64_t)buf);
    re::FrameContext::perFrameAlloc(*(re::FrameContext **)a2, 0x84uLL, 4uLL, (uint64_t)&v37);
    uint64_t v18 = v39;
    unint64_t v19 = v38 | ((unint64_t)HIDWORD(v38) << 32);
    uint64_t v20 = v37 + v38;
    *(_OWORD *)(v20 + 80) = v32;
    *(_OWORD *)(v20 + 96) = v33;
    *(_OWORD *)(v20 + 112) = v34;
    *(_DWORD *)(v20 + 12re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = v35;
    *(_OWORD *)(v20 + 16) = v28;
    *(_OWORD *)(v20 + 32) = v29;
    *(_OWORD *)(v20 + 4re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = v30;
    *(_OWORD *)(v20 + 64) = v31;
    *(_OWORD *)uint64_t v20 = *(_OWORD *)buf;
    uint64_t v15 = (re::BufferTable *)(*(void *)a2 + 480);
    uint64_t v26 = 0x1C6D7B14F4E32CD0;
    uint64_t v37 = v18;
    unint64_t v38 = v19;
    uint64_t v16 = &v26;
    uint64_t v17 = (uint8_t *)&v37;
    goto LABEL_6;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9CB90, memory_order_acquire) & 1) == 0)
  {
    uint64_t v23 = (re *)__cxa_guard_acquire(&qword_26AF9CB90);
    if (v23)
    {
      _MergedGlobals_472 = re::getCombinedScopeHash(v23, v24, v25);
      __cxa_guard_release(&qword_26AF9CB90);
    }
  }
  uint64_t v4 = re::RenderGraphDataStore::tryGet<re::TonemapParametersData>(*((void *)a2 + 146), _MergedGlobals_472);
  if (v4)
  {
    uint64_t v5 = v4;
    re::FrameContext::perFrameAlloc(*(re::FrameContext **)a2, 0x84uLL, 4uLL, (uint64_t)buf);
    uint64_t v6 = v28;
    unint64_t v7 = *(unsigned int *)&buf[8] | ((unint64_t)*(unsigned int *)&buf[12] << 32);
    uint64_t v8 = *(void *)buf + *(unsigned int *)&buf[8];
    *(_OWORD *)uint64_t v8 = *(_OWORD *)(v5 + 8);
    long long v9 = *(_OWORD *)(v5 + 24);
    long long v10 = *(_OWORD *)(v5 + 40);
    long long v11 = *(_OWORD *)(v5 + 72);
    *(_OWORD *)(v8 + 4re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = *(_OWORD *)(v5 + 56);
    *(_OWORD *)(v8 + 64) = v11;
    *(_OWORD *)(v8 + 16) = v9;
    *(_OWORD *)(v8 + 32) = v10;
    long long v12 = *(_OWORD *)(v5 + 88);
    long long v13 = *(_OWORD *)(v5 + 104);
    long long v14 = *(_OWORD *)(v5 + 120);
    *(_DWORD *)(v8 + 12re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = *(_DWORD *)(v5 + 136);
    *(_OWORD *)(v8 + 96) = v13;
    *(_OWORD *)(v8 + 112) = v14;
    *(_OWORD *)(v8 + 80) = v12;
    uint64_t v15 = (re::BufferTable *)(*(void *)a2 + 480);
    uint64_t v37 = 0x1C6D7B14F4E32CD0;
    *(void *)float32x4_t buf = v6;
    *(void *)&buf[8] = v7;
    uint64_t v16 = &v37;
    uint64_t v17 = buf;
LABEL_6:
    re::BufferTable::setBuffer(v15, (const re::WeakStringID *)v16, (const BufferView *)v17);
    re::RenderGraphFullscreenNode::executeInternal(this, a2, (re::RenderGraphTonemapNode *)((char *)this + 264));
    uint64_t v21 = (re::BufferTable *)(*(void *)a2 + 480);
    *(void *)float32x4_t buf = 0x1C6D7B14F4E32CD0;
    re::BufferTable::removeBuffer(v21, (const re::WeakStringID *)buf);
    goto LABEL_7;
  }
  uint64_t v22 = *re::graphicsLogObjects(0);
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)float32x4_t buf = 0;
    _os_log_impl(&dword_233120000, v22, OS_LOG_TYPE_DEFAULT, "RenderGraphTonemapNode expects TonemapParametersData from the render graph data store but there isn't any. Will skip the execution.", buf, 2u);
  }
LABEL_7:
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v36);
}

void *re::allocInfo_RenderGraphTonemapNode(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9CB98, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9CB98))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF9CBC0, "RenderGraphTonemapNode");
    __cxa_guard_release(&qword_26AF9CB98);
  }
  return &unk_26AF9CBC0;
}

void re::initInfo_RenderGraphTonemapNode(re *this, re::IntrospectionBase *a2)
{
  v16[0] = 0xB3170E0D645236E8;
  v16[1] = "RenderGraphTonemapNode";
  re::StringID::destroyString((re::StringID *)v16);
  *((_OWORD *)this + 2) = v17;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9CBA0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF9CBA0);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::introspect_RenderGraphFullscreenNode((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = "RenderGraphFullscreenNode";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 4re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF9CBA8 = v7;
      uint64_t v8 = re::introspectionAllocator((re *)v7);
      uint64_t v9 = re::introspect_TonemapUserParameters((re::IntrospectionBase **)1);
      uint64_t v10 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v10 = 1;
      *(void *)(v10 + re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = "tonemapUserParameters";
      *(void *)(v10 + 16) = v9;
      *(void *)(v10 + 24) = 0;
      *(void *)(v10 + 32) = 0x1C800000001;
      *(_DWORD *)(v10 + 40) = 0;
      *(void *)(v10 + 4re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_26AF9CBB0 = v10;
      long long v11 = re::introspectionAllocator((re *)v10);
      long long v13 = re::introspect_BOOL((re *)1, v12);
      uint64_t v14 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v11 + 32))(v11, 72, 8);
      *(_DWORD *)uint64_t v14 = 1;
      *(void *)(v14 + re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = "tonemappingSharedParamsEnabled";
      *(void *)(v14 + 16) = v13;
      *(void *)(v14 + 24) = 0;
      *(void *)(v14 + 32) = 0x20400000002;
      *(_DWORD *)(v14 + 40) = 0;
      *(void *)(v14 + 4re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v14 + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_26AF9CBB8 = v14;
      __cxa_guard_release(&qword_26AF9CBA0);
    }
  }
  *((void *)this + 2) = 0x20800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((void *)this + re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = &qword_26AF9CBA8;
  *((void *)this + 9) = re::internal::defaultConstruct<re::RenderGraphTonemapNode>;
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::RenderGraphTonemapNode>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::RenderGraphTonemapNode>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::RenderGraphTonemapNode>;
  re::IntrospectionRegistry::add(this, v3);
  long long v15 = v17;
}

double re::internal::defaultConstruct<re::RenderGraphTonemapNode>(int a1, int a2, re::RenderGraphTonemapNode *this)
{
  return re::RenderGraphTonemapNode::RenderGraphTonemapNode(this);
}

void re::internal::defaultDestruct<re::RenderGraphTonemapNode>(int a1, int a2, id *this)
{
}

uint64_t re::introspect_RenderGraphTonemapNode(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RenderGraphTonemapNode", (uint64_t (*)(re::internal *))re::allocInfo_RenderGraphTonemapNode, (re::IntrospectionBase *(*)(void))re::initInfo_RenderGraphTonemapNode, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::RenderGraphTonemapNode>, this);
}

void re::RenderGraphTonemapNode::~RenderGraphTonemapNode(id *this)
{
  re::RenderGraphFullscreenNode::~RenderGraphFullscreenNode(this);
  JUMPOUT(0x237DBCBD0);
}

double re::RenderGraphTonemapNode::RenderGraphTonemapNode(re::RenderGraphTonemapNode *this)
{
  *((void *)this + 56) = 0;
  uint64_t v1 = (char *)this + 456;
  *((_OWORD *)this + 26) = 0u;
  *((_OWORD *)this + 27) = 0u;
  *((_OWORD *)this + 24) = 0u;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 2re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0u;
  *((_OWORD *)this + 1re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0u;
  *((_OWORD *)this + re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0u;
  uint64_t v2 = re::RenderGraphFullscreenNode::RenderGraphFullscreenNode(this);
  *(void *)uint64_t v2 = &unk_26E71F028;
  double result = 0.00000175476111;
  *(_OWORD *)uint64_t v1 = xmmword_23436C470;
  *((_OWORD *)v1 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = xmmword_2343679C0;
  *((unsigned char *)v2 + 48re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = 0;
  *(void *)(v1 + 36) = 0x3F8000003F800000;
  *((unsigned char *)v2 + 500) = 0;
  *((void *)v2 + 63) = 0x3F80000000000000;
  *((unsigned char *)v2 + 512) = 0;
  *((unsigned char *)v2 + 516) = 0;
  return result;
}

uint64_t re::encodeMeshPassForPortal(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v117 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a2 + 64);
  if (*(unsigned char *)(v3 + 1332)) {
    goto LABEL_86;
  }
  for (uint64_t i = 0;
        ;
        uint64_t i = re::DrawCallRecorder::allocateDrawCallRecorderGroup((re::DrawCallRecorder *)(v3 + 1336), *(const char **)(*(void *)(v2 + 8) + 8), "encodeMeshPassForPortal"))
  {
    unint64_t v4 = 0x9E3779B97F4A7C17;
    uint64_t v5 = *(void *)v2;
    size_t v6 = strlen(*(const char **)(*(void *)(v2 + 8) + 8));
    unint64_t v7 = 0x9E3779B97F4A7C17;
    if (v6)
    {
      MurmurHash3_x64_128(*(void *)(*(void *)(v2 + 8) + 8), v6, 0, (unint64_t *)&v97);
      unint64_t v7 = ((*((void *)&v97 + 1) - 0x61C8864680B583E9 + ((void)v97 << 6) + ((unint64_t)v97 >> 2)) ^ v97)
         - 0x61C8864680B583E9;
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9CC48, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_26AF9CC48))
    {
      qword_26AF9CC40 = re::hashString((re *)"DynamicFunctionConstants", v69);
      __cxa_guard_release(&qword_26AF9CC48);
    }
    uint64_t v8 = *(void *)(v2 + 64);
    uint64_t v9 = v2;
    unint64_t v10 = qword_26AF9CC40;
    uint64_t v84 = v9;
    long long v11 = *(const char **)(v9 + 16);
    size_t v12 = strlen(v11);
    if (v12)
    {
      MurmurHash3_x64_128((uint64_t)v11, v12, 0, (unint64_t *)&v97);
      unint64_t v4 = ((*((void *)&v97 + 1) - 0x61C8864680B583E9 + ((void)v97 << 6) + ((unint64_t)v97 >> 2)) ^ v97)
         - 0x61C8864680B583E9;
    }
    uint64_t v13 = re::RenderGraphDataStore::tryGet<re::DynamicFunctionConstantsData>(*(void *)(v8 + 1168), ((v10 >> 2) + (v10 << 6) + v4) ^ v10);
    uint64_t v14 = v13 + 8;
    if (!v13) {
      uint64_t v14 = 0;
    }
    uint64_t v83 = v14;
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9CC58, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_26AF9CC58))
    {
      qword_26AF9CC50 = re::hashString((re *)"RenderGraphDataPipeData", v70);
      __cxa_guard_release(&qword_26AF9CC58);
    }
    uint64_t v2 = v84;
    uint64_t v15 = re::RenderGraphDataStore::tryGet<re::MeshSortingCollection>(*(void *)(*(void *)(v84 + 64) + 1168), (v7 + (qword_26AF9CC50 << 6) + ((unint64_t)qword_26AF9CC50 >> 2)) ^ qword_26AF9CC50);
    uint64_t v74 = re::RenderGraphDataStore::tryGet<re::MeshSortGroupCameraData>(*(void *)(*(void *)(v2 + 64) + 1168), *(void *)(*(void *)(*(void *)(v2 + 64) + 40) + 48));
    uint64_t v16 = *(void *)(**(void **)(v84 + 64) + 24);
    float v77 = (re::DrawTable *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v16 + 32))(v16, 328, 8);
    re::DrawTable::DrawTable(v77, *(re::Allocator **)(**(void **)(v84 + 64) + 24));
    uint64_t result = re::RenderGraphDataStore::get<re::CameraData>(*(void *)(*(void *)(v2 + 64) + 1168), *(void *)(*(void *)(*(void *)(v2 + 64) + 40) + 48));
    uint64_t v76 = result;
    if (!*(void *)(v5 + 40)) {
      break;
    }
    unint64_t v18 = 0;
    uint64_t v87 = (uint64_t *)(v5 + 448);
    uint64_t v82 = v15;
    __asm { FMOV            V8.2S, #1.0 }
    while (1)
    {
      uint64_t v23 = re::DataArray<re::MeshInstance>::get(*(void *)(v2 + 72) + 72, *(void *)(*(void *)(v5 + 32) + 8 * v18));
      uint64_t result = re::DataArray<re::MeshModel>::get(*(void *)(v2 + 72) + 8, *(void *)(v23 + 16));
      uint64_t v24 = 0;
      float32x4_t v25 = *(float32x4_t *)(v5 + 80);
      float32x4_t v26 = *(float32x4_t *)(v5 + 96);
      float32x4_t v27 = *(float32x4_t *)(v5 + 112);
      float32x4_t v28 = *(float32x4_t *)(v5 + 128);
      long long v29 = *(_OWORD *)(v23 + 48);
      long long v30 = *(_OWORD *)(v23 + 64);
      long long v31 = *(_OWORD *)(v23 + 80);
      *(_OWORD *)uint64_t v92 = *(_OWORD *)(v23 + 32);
      *(_OWORD *)&v92[16] = v29;
      *(_OWORD *)&v92[32] = v30;
      *(_OWORD *)&v92[48] = v31;
      do
      {
        *(long long *)((char *)&v97 + v24) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v25, COERCE_FLOAT(*(_OWORD *)&v92[v24])), v26, *(float32x2_t *)&v92[v24], 1), v27, *(float32x4_t *)&v92[v24], 2), v28, *(float32x4_t *)&v92[v24], 3);
        v24 += 16;
      }
      while (v24 != 64);
      long long v80 = v98;
      long long v81 = v97;
      long long v78 = v100;
      long long v79 = v99;
      uint64_t v32 = *(void *)(v5 + 48);
      unint64_t v73 = v18;
      if (v32 && (uint64_t v33 = *(void *)(v32 + 96)) != 0)
      {
        unint64_t v34 = *(void *)(v33 + 8);
        if (v34 <= v18) {
          goto LABEL_85;
        }
        uint64_t v75 = *(void *)(*(void *)(v33 + 16) + 24 * v18 + 16);
        unint64_t v86 = *(void *)(*(void *)(v33 + 16) + 24 * v18 + 8);
      }
      else
      {
        unint64_t v86 = 0;
        uint64_t v75 = 0;
      }
      if (*(void *)(result + 56)) {
        break;
      }
LABEL_79:
      unint64_t v18 = v73 + 1;
      if (v73 + 1 >= *(void *)(v5 + 40)) {
        goto LABEL_80;
      }
    }
    unint64_t v35 = 0;
    uint64_t v85 = result;
    while (1)
    {
      if (v35 >= v86) {
        uint64_t v36 = 0;
      }
      else {
        uint64_t v36 = *(void *)(v75 + 8 * v35);
      }
      unint64_t v18 = *(void *)(result + 64);
      uint64_t v37 = *(void *)(**(void **)(v2 + 64) + 24);
      uint64_t v38 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v37 + 32))(v37, 224, 16);
      uint64_t v40 = v38;
      *(_OWORD *)(v38 + 12re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = 0u;
      *(_OWORD *)(v38 + 144) = 0u;
      *(_OWORD *)(v38 + 160) = 0u;
      *(_OWORD *)(v38 + 176) = 0u;
      *(_OWORD *)(v38 + 192) = 0u;
      *(_OWORD *)(v38 + 20re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = 0u;
      *(_OWORD *)(v38 + 96) = 0u;
      *(_OWORD *)(v38 + 112) = 0u;
      *(_OWORD *)(v38 + 64) = 0u;
      *(_OWORD *)(v38 + 80) = 0u;
      *(_OWORD *)(v38 + 32) = 0u;
      *(_OWORD *)(v38 + 4re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = 0u;
      *(_OWORD *)uint64_t v38 = 0u;
      *(_OWORD *)(v38 + 16) = 0u;
      *(void *)(v38 + 152) = _D8;
      *(_DWORD *)(v38 + 160) = 1065353216;
      unint64_t v41 = *(unsigned __int16 *)(v18 + 560 * v35 + 474);
      if (*(void *)(v5 + 152) > v41) {
        *(void *)(v38 + 40) = *(void *)(*(void *)(v5 + 144) + 8 * v41);
      }
      if (*(void *)(v5 + 240) > v41) {
        *(void *)(v38 + 4re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = *(void *)(*(void *)(v5 + 232) + 8 * v41);
      }
      if (*(void *)(v5 + 224) > v41) {
        *(void *)(v38 + 56) = *(void *)(*(void *)(v5 + 216) + 8 * v41);
      }
      if (*(void *)(v5 + 272) > v41) {
        *(void *)(v38 + 64) = *(void *)(*(void *)(v5 + 264) + 8 * v41);
      }
      *(void *)(v38 + 72) = *(void *)(v5 + 280);
      *(_DWORD *)(v38 + 120) = *(_DWORD *)(v5 + 352);
      *(_DWORD *)(v38 + 156) = *(_DWORD *)(v5 + 412);
      int v42 = 0;
      if (v15
        && (uint64_t v43 = re::HashTable<unsigned long long,re::MeshSortingCollection::EntitySortingData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(v15, v87)) != 0)
      {
        int v44 = *(_DWORD *)(v43 + 8);
        if (v74)
        {
          if (*(void *)(v74 + 8))
          {
            unint64_t v45 = 0xBF58476D1CE4E5B9 * (*(void *)v43 ^ (*(void *)v43 >> 30));
            uint64_t v46 = *(unsigned int *)(*(void *)(v74 + 16)
                                  + 4
                                  * (((0x94D049BB133111EBLL * (v45 ^ (v45 >> 27))) ^ ((0x94D049BB133111EBLL
                                                                                     * (v45 ^ (v45 >> 27))) >> 31))
                                   % *(unsigned int *)(v74 + 32)));
            if (v46 != 0x7FFFFFFF)
            {
              uint64_t v47 = *(void *)(v74 + 24);
              while (*(void *)(v47 + 40 * v46 + 16) != *(void *)v43)
              {
                LODWORD(v46) = *(_DWORD *)(v47 + 40 * v46 + 8) & 0x7FFFFFFF;
                if (v46 == 0x7FFFFFFF) {
                  goto LABEL_43;
                }
              }
              int v42 = *(_DWORD *)(v47 + 40 * v46 + 28);
            }
          }
        }
      }
      else
      {
        int v44 = 0;
      }
LABEL_43:
      float v48 = *(float *)(v5 + 408);
      *(float *)(v40 + 152) = v48;
      if (*(unsigned char *)(v40 + 176)) {
        _ZF = 0;
      }
      else {
        _ZF = *(unsigned char *)(v5 + 528) == 0;
      }
      if (!_ZF)
      {
        if (!*(unsigned char *)(v40 + 176) || *(unsigned char *)(v5 + 528))
        {
          if (!*(unsigned char *)(v40 + 176) && *(unsigned char *)(v5 + 528)) {
            *(unsigned char *)(v40 + 176) = 1;
          }
          long long v50 = *(_OWORD *)(v5 + 560);
          *(_OWORD *)(v40 + 192) = *(_OWORD *)(v5 + 544);
          *(_OWORD *)(v40 + 20re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = v50;
        }
        else
        {
          *(unsigned char *)(v40 + 176) = 0;
        }
      }
      uint64_t v2 = *(_WORD *)(v5 + 354) != 0;
      unint64_t v34 = v48 != 1.0 || (unint64_t)(*(_WORD *)(v5 + 354) != 0);
      int v51 = (*(_DWORD *)(v18 + 560 * v35 + 544) ^ *(_DWORD *)(*(void *)(v40 + 40) + 216)) & ~*(_DWORD *)(*(void *)(v40 + 40) + 220) | *(_DWORD *)(*(void *)(v40 + 40) + 220) & *(_DWORD *)(*(void *)(v40 + 40) + 216);
      unint64_t v52 = *(void *)(v5 + 432);
      int v88 = v44;
      if (v52)
      {
        if (v52 <= v35) {
          goto LABEL_84;
        }
        uint64_t v53 = v36;
        unint64_t v54 = re::MaterialRenderFlags::flattenToOverrideFlags((re::MaterialRenderFlags *)(*(void *)(v5 + 424)
                                                                                        + 18 * v35));
        int v51 = (v51 ^ v54) & ~HIDWORD(v54) | HIDWORD(v54) & v54;
      }
      else
      {
        uint64_t v53 = v36;
      }
      int v55 = *(_DWORD *)(v5 + 444);
      int v56 = *(_DWORD *)(v5 + 440);
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9CC60, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26AF9CC60))
      {
        re::Defaults::BOOLValue((re::Defaults *)"enableDitherForStencilPortals", v65, (char *)&v97);
        if ((_BYTE)v97) {
          char v66 = BYTE1(v97);
        }
        else {
          char v66 = 1;
        }
        _MergedGlobals_473 = v66;
        __cxa_guard_release(&qword_26AF9CC60);
      }
      char v57 = _MergedGlobals_473 ? v34 : 0;
      char v58 = (2 * v2) | v57;
      uint64_t v59 = *(void *)(v5 + 312) ? v5 + 288 : 0;
      uint64_t v2 = v84;
      *(void *)(v40 + 8re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = v59;
      *(void *)(v40 + 96) = v83;
      *(void *)(v40 + 104) = 0;
      *(unsigned char *)(v40 + 112) = v58;
      uint64_t v60 = (int *)re::MaterialParameterTableLayers::resolveTechniqueIndices((re::MaterialParameterTableLayers *)v40, *(void *)(v84 + 32));
      if (!v61) {
        break;
      }
      int v62 = *v60;
      if (*v60 != -1)
      {
        long long v97 = (unint64_t)*v87;
        *(void *)&long long v98 = v18 + 560 * v35;
        *((void *)&v98 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = v98 + 432;
        *(void *)&long long v99 = v98 + 432;
        *((void *)&v99 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = v53;
        *(void *)&long long v100 = v40;
        *((void *)&v100 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0xFFFF010000000000;
        long long v101 = v81;
        long long v102 = v80;
        long long v103 = v79;
        long long v104 = v78;
        uint64_t v106 = 0;
        uint64_t v105 = 0;
        *(void *)float v108 = 0;
        *(_DWORD *)((char *)&v108[1] + 3) = 0;
        *(void *)&v108[3] = 0;
        *(void *)&v108[5] = 0;
        __int16 v109 = 0;
        int v107 = v62;
        int v110 = (v56 ^ v51) & ~v55 | v56 & v55;
        int v111 = v88;
        int v112 = 0x7FFFFFFF;
        int v113 = v42;
        uint64_t v114 = 0xFFFFFFFFLL;
        uint64_t v115 = 0;
        uint64_t v116 = 0;
        uint64_t v63 = **(void **)(v84 + 64);
        unsigned __int32 v64 = *(unsigned __int8 *)(v76 + 490);
        uint64_t v89 = 0;
        int v90 = 0;
        re::addDrawCall((uint64_t)v77, (uint64_t)&v97, v63, v64, (uint64_t)&v89);
      }
      ++v35;
      uint64_t result = v85;
      uint64_t v15 = v82;
      if (v35 >= *(void *)(v85 + 56)) {
        goto LABEL_79;
      }
    }
    re::internal::assertLog((re::internal *)6, 0, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
    _os_crash();
    __break(1u);
LABEL_84:
    re::internal::assertLog((re::internal *)6, v39, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v35, v52);
    _os_crash();
    __break(1u);
LABEL_85:
    uint64_t v91 = 0;
    long long v100 = 0u;
    long long v101 = 0u;
    long long v98 = 0u;
    long long v99 = 0u;
    long long v97 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v92 = 136315906;
    *(void *)&v92[4] = "operator[]";
    *(_WORD *)&v92[12] = 1024;
    *(_DWORD *)&v92[14] = 468;
    *(_WORD *)&v92[18] = 2048;
    *(void *)&v92[20] = v18;
    *(_WORD *)&v92[28] = 2048;
    *(void *)&v92[30] = v34;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_86:
    ;
  }
LABEL_80:
  if (*((void *)v77 + 5))
  {
    uint64_t v67 = re::RenderGraphDataStore::get<re::CameraMatrices>(*(void *)(*(void *)(v2 + 64) + 1168), *(void *)(*(void *)(*(void *)(v2 + 64) + 40) + 48));
    re::DrawTableSlice::DrawTableSlice(&v97, (uint64_t)v77);
    *(void *)uint64_t v92 = *(void *)(v2 + 24);
    *(void *)&v92[8] = &v97;
    uint64_t v68 = *(void *)(v67 + 80);
    *(void *)&v92[16] = *(void *)(v67 + 40);
    *(void *)&v92[24] = v68;
    *(void *)&v92[32] = 0;
    v92[40] = *(unsigned char *)(v67 + 128);
    *(_WORD *)&v92[41] = 2;
    *(_WORD *)&v92[44] = 256;
    *(_OWORD *)&v92[46] = *(_OWORD *)(v2 + 40);
    v92[62] = *(unsigned char *)(v2 + 56);
    *(_OWORD *)&v92[63] = 0u;
    long long v93 = 0u;
    char v94 = 0;
    uint64_t v95 = i;
    char v96 = 0;
    return re::RenderGraphContext::encodeDrawCalls(*(void *)(v2 + 64), a1, v92);
  }
  return result;
}

uint64_t re::HashTable<unsigned long long,re::MeshSortingCollection::EntitySortingData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(uint64_t a1, uint64_t *a2)
{
  if (!*(void *)a1) {
    return 0;
  }
  uint64_t v2 = *a2;
  unint64_t v3 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  uint64_t v4 = *(unsigned int *)(*(void *)(a1 + 8)
                       + 4
                       * (((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) ^ ((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) >> 31))
                        % *(unsigned int *)(a1 + 24)));
  if (v4 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 16);
  if (*(void *)(v6 + 120 * v4 + 16) != v2)
  {
    while (1)
    {
      LODWORD(v4) = *(_DWORD *)(v6 + 120 * v4 + 8) & 0x7FFFFFFF;
      if (v4 == 0x7FFFFFFF) {
        break;
      }
      if (*(void *)(v6 + 120 * v4 + 16) == v2) {
        return v6 + 120 * v4 + 24;
      }
    }
    return 0;
  }
  return v6 + 120 * v4 + 24;
}

uint64_t re::encodeMaterialPassForPortalScene(uint64_t result)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(result + 32);
  if (v1)
  {
    uint64_t v2 = result;
    unint64_t v3 = (uint64_t *)(result + 24);
    uint64_t v4 = *(void *)(result + 72);
    if (*(unsigned char *)(v4 + 1332))
    {
      uint64_t result = re::DrawCallRecorder::allocateDrawCallRecorderGroup((re::DrawCallRecorder *)(v4 + 1336), *(const char **)(result + 8), *(const char **)(result + 16));
      uint64_t v5 = result;
      uint64_t v1 = *(void *)(v2 + 32);
      uint64_t v4 = *(void *)(v2 + 72);
    }
    else
    {
      uint64_t v5 = 0;
    }
    uint64_t v6 = *(unsigned int *)(v2 + 64);
    uint64_t v7 = *(void *)(v2 + 24);
    memset(v28, 0, sizeof(v28));
    long long v29 = *(_OWORD *)(v2 + 40);
    memset(v30, 0, sizeof(v30));
    uint64_t v8 = re::globalAllocators((re *)result);
    uint64_t v31 = v8[2];
    uint64_t v32 = 0;
    __int16 v33 = 0;
    char v34 = 0;
    re::FunctionBase<32ul,BOOL ()(re::MeshPartDrawContext const&)>::destroyCallable((uint64_t)v30);
    uint64_t v9 = *(void *)(**(void **)(v2 + 72) + 24);
    unint64_t v10 = (re::DrawTable *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 328, 8);
    re::DrawTable::DrawTable(v10, *(re::Allocator **)(**(void **)(v2 + 72) + 24), (v26 + 127) >> 7);
    re::RenderGraphMeshNodeBase::makeDrawCallsFromMeshParts(v3, v27, v26, *(float32x4_t **)(v2 + 72), (uint64_t)v10, *(unsigned __int8 *)(*(void *)(v2 + 56) + 64), *(void *)(v2 + 56), 0, v5);
    *(unsigned char *)(*(void *)(v2 + 72) + 1512) = 4;
    re::DrawTableSlice::DrawTableSlice(v28, (uint64_t)v10);
    v14[0] = *(void *)(v2 + 16);
    v14[1] = v28;
    uint64_t v11 = *(void *)(v2 + 56);
    uint64_t v12 = *(void *)(v11 + 80);
    id v14[2] = *(void *)(v11 + 40);
    void v14[3] = v12;
    v14[4] = 0;
    char v15 = *(unsigned char *)(v11 + 128);
    char v16 = *(unsigned char *)(v2 + 68);
    char v17 = 0;
    char v18 = *(unsigned char *)(v2 + 69);
    char v19 = 0;
    char v20 = 0;
    long long v13 = *(_OWORD *)(v2 + 96);
    long long v21 = *(_OWORD *)(v2 + 80);
    long long v22 = v13;
    uint64_t v23 = v5;
    char v24 = 0;
    re::RenderGraphContext::encodeDrawCalls(*(void *)(v2 + 72), *(void *)v2, v14);
    *(unsigned char *)(*(void *)(v2 + 72) + 1512) = 0;
    uint64_t result = v25;
    if (v25)
    {
      if (v27) {
        return (*(uint64_t (**)(void))(*(void *)v25 + 40))();
      }
    }
  }
  return result;
}

float32x4_t *re::computeMeshSceneBoundingBox@<X0>(float32x4_t *result@<X0>, uint64_t a2@<X1>, float32x4_t *a3@<X8>)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  v4.i64[0] = 0x7F0000007FLL;
  v4.i64[1] = 0x7F0000007FLL;
  float32x4_t v19 = (float32x4_t)vdupq_n_s32(0x7F800000u);
  *a3 = v19;
  a3[1] = v4;
  v5.i64[0] = 0x7F0000007FLL;
  v5.i64[1] = 0x7F0000007FLL;
  float32x4_t v18 = v5;
  uint64_t v6 = result[1].i64[1];
  long long v20 = *(_OWORD *)v6;
  if (result->i64[1])
  {
    uint64_t v7 = (uint64_t *)result;
    unint64_t v8 = 0;
    uint64_t v9 = a2 + 72;
    uint64_t v10 = a2 + 8;
    do
    {
      uint64_t result = (float32x4_t *)re::DataArray<re::MeshInstance>::tryGet(v9, *(void *)(*v7 + 8 * v8));
      if (result)
      {
        uint64_t v11 = result;
        uint64_t result = (float32x4_t *)re::DataArray<re::MeshModel>::tryGet(v10, result[1].i64[0]);
        if (result)
        {
          unint64_t v12 = *(void *)(v6 + 24);
          if (v12 <= v8)
          {
            long long v32 = 0u;
            long long v33 = 0u;
            float32x4_t v30 = 0u;
            long long v31 = 0u;
            float32x4_t v29 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            int v21 = 136315906;
            long long v22 = "operator[]";
            __int16 v23 = 1024;
            int v24 = 866;
            __int16 v25 = 2048;
            unint64_t v26 = v8;
            __int16 v27 = 2048;
            unint64_t v28 = v12;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
          uint64_t v13 = v6 + 40;
          if ((*(unsigned char *)(v6 + 32) & 1) == 0) {
            uint64_t v13 = *(void *)(v6 + 48);
          }
          uint64_t result = re::AABB::transform((float32x4_t *)(*(void *)((unint64_t)&v20 & 0xFFFFFFFFFFFFFFF7 | (8* (*(_DWORD *)(v13 + 4 * v8) & 1)))+ ((16 * *(unsigned int *)(v13 + 4 * v8)) & 0xFFFFFFFE0)), v11 + 2, (uint64_t)&v29);
          float32x4_t v15 = v18;
          float32x4_t v14 = v19;
          v14.i32[3] = 0;
          float32x4_t v16 = v29;
          float32x4_t v17 = v30;
          v16.i32[3] = 0;
          v15.i32[3] = 0;
          v17.i32[3] = 0;
          float32x4_t v18 = vmaxnmq_f32(v15, v17);
          float32x4_t v19 = vminnmq_f32(v14, v16);
          *a3 = v19;
          a3[1] = v18;
        }
      }
      ++v8;
    }
    while (v8 < v7[1]);
  }
  return result;
}

void re::RenderGraphMPSNodeBase::setup(re::RenderGraphNode *this, re::RenderGraphBuilder *a2, re::RenderGraphDataStore *a3)
{
  *((unsigned char *)a2 + 593) = 1;
  re::RenderGraphNode::setup(this, a2, a3);
}

uint64_t re::RenderGraphMPSNodeBase::getCommandBufferWithProtectionOptions@<X0>(re::RenderGraphMPSNodeBase *this@<X0>, re::RenderGraphContext *a2@<X1>, void *a3@<X8>)
{
  id v6 = objc_retain(*(id *)(re::DrawingManager::currentCommandBuffer(*(re::DrawingManager **)(*((void *)a2 + 1) + 104))
                         + 16));
  *a3 = v6;
  uint64_t v7 = *((void *)this + 29);
  uint64_t v8 = 0;
  if (v7)
  {
    uint64_t v9 = *((void *)this + 31);
    uint64_t v10 = v7 << 6;
    do
    {
      re::RenderGraphContext::metalTexture((uint64_t)a2, v9, 0, 0, &v16);
      unint64_t v11 = (unint64_t)objc_msgSend(v16, sel_protectionOptions);
      if (v16) {

      }
      v8 |= v11;
      v9 += 64;
      v10 -= 64;
    }
    while (v10);
  }
  uint64_t v12 = *((void *)this + 19);
  if (v12)
  {
    uint64_t v13 = *((void *)this + 21);
    uint64_t v14 = v12 << 6;
    do
    {
      v8 |= (unint64_t)objc_msgSend(*(id *)re::RenderGraphContext::metalBuffer((uint64_t)a2, v13), sel_protectionOptions);
      v13 += 64;
      v14 -= 64;
    }
    while (v14);
  }
  uint64_t result = [v6 protectionOptions];
  if (result != v8) {
    return [v6 setProtectionOptions:v8];
  }
  return result;
}

uint64_t re::RenderGraphMPSNodeBase::getViewports@<X0>(re::RenderGraphContext *a1@<X1>, const unint64_t *a2@<X2>, const unint64_t *a3@<X3>, void *a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  uint64_t v9 = *(void *)(*(void *)a1 + 24);
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v10 = re::RenderGraphDataStore::tryGet<re::ViewportPercentData>(*((void *)a1 + 146), *(void *)(*((void *)a1 + 5) + 48));
  if (v10) {
    unint64_t v11 = *(unsigned __int8 *)(v10 + 64);
  }
  else {
    unint64_t v11 = 1;
  }
  re::FixedArray<re::mtl::Viewport>::init<>(a4, v9, v11);
  re::FixedArray<re::Vector4<float>>::init<>(&v19, v9, v11);
  uint64_t v12 = re::RenderGraphDataStore::tryGet<re::ViewportData>(*((void *)a1 + 146), *(void *)(*((void *)a1 + 5) + 48));
  re::RenderGraphContext::selectViewport((unint64_t)a1, v12, (uint64_t)a4, (_anonymous_namespace_ *)&v19, 0);
  uint64_t v13 = a4[1];
  if (v13)
  {
    float v14 = (float)*a2;
    float v15 = (float)*a3;
    id v16 = (float *)(a4[2] + 12);
    do
    {
      if (*(v16 - 1) == 0.0 && *v16 == 0.0)
      {
        *(v16 - re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = v14;
        *id v16 = v15;
      }
      v16 += 6;
      --v13;
    }
    while (v13);
  }
  uint64_t result = v19;
  if (v19) {
    BOOL v18 = v20 == 0;
  }
  else {
    BOOL v18 = 1;
  }
  if (!v18) {
    return (*(uint64_t (**)(void))(*(void *)v19 + 40))();
  }
  return result;
}

void *re::allocInfo_DefaultDepthFormatData(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_474, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_474))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF9CCC8, "DefaultDepthFormatData");
    __cxa_guard_release(&_MergedGlobals_474);
  }
  return &unk_26AF9CCC8;
}

void re::initInfo_DefaultDepthFormatData(re *this, re::IntrospectionBase *a2)
{
  v13[0] = 0xDE1393FAFE3F606;
  v13[1] = "DefaultDepthFormatData";
  re::StringID::destroyString((re::StringID *)v13);
  *((_OWORD *)this + 2) = v14;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9CC70, memory_order_acquire) & 1) == 0)
  {
    float32x4_t v4 = (re *)__cxa_guard_acquire(&qword_26AF9CC70);
    if (v4)
    {
      float32x4_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::introspect_RenderGraphData((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = "RenderGraphData";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 4re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF9CC98 = v7;
      uint64_t v8 = re::introspectionAllocator((re *)v7);
      uint64_t v10 = re::mtl::introspect_PixelFormat((re::mtl *)1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = "format";
      *(void *)(v11 + 16) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x800000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + 4re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF9CCA0 = v11;
      __cxa_guard_release(&qword_26AF9CC70);
    }
  }
  *((void *)this + 2) = 0x1000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((void *)this + re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = &qword_26AF9CC98;
  *((void *)this + 9) = re::internal::defaultConstruct<re::DefaultDepthFormatData>;
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::DefaultDepthFormatData>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::DefaultDepthFormatData>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::DefaultDepthFormatData>;
  re::IntrospectionRegistry::add(this, v3);
  long long v12 = v14;
}

void re::internal::defaultConstruct<re::DefaultDepthFormatData>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = &unk_26E71C2A8;
}

void *re::internal::defaultConstructV2<re::DefaultDepthFormatData>(void *result)
{
  *uint64_t result = &unk_26E71C2A8;
  return result;
}

uint64_t re::introspect_DefaultDepthFormatData(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"DefaultDepthFormatData", (uint64_t (*)(re::internal *))re::allocInfo_DefaultDepthFormatData, (re::IntrospectionBase *(*)(void))re::initInfo_DefaultDepthFormatData, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::DefaultDepthFormatData>, this);
}

void *re::allocInfo_DefaultStencilFormatData(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9CC78, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9CC78))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF9CD40, "DefaultStencilFormatData");
    __cxa_guard_release(&qword_26AF9CC78);
  }
  return &unk_26AF9CD40;
}

void re::initInfo_DefaultStencilFormatData(re *this, re::IntrospectionBase *a2)
{
  v13[0] = 0x5D8C4433CA9F5DF8;
  v13[1] = "DefaultStencilFormatData";
  re::StringID::destroyString((re::StringID *)v13);
  *((_OWORD *)this + 2) = v14;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9CC80, memory_order_acquire) & 1) == 0)
  {
    float32x4_t v4 = (re *)__cxa_guard_acquire(&qword_26AF9CC80);
    if (v4)
    {
      float32x4_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::introspect_RenderGraphData((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = "RenderGraphData";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 4re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF9CCA8 = v7;
      uint64_t v8 = re::introspectionAllocator((re *)v7);
      uint64_t v10 = re::mtl::introspect_PixelFormat((re::mtl *)1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = "format";
      *(void *)(v11 + 16) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x800000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + 4re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF9CCB0 = v11;
      __cxa_guard_release(&qword_26AF9CC80);
    }
  }
  *((void *)this + 2) = 0x1000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((void *)this + re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = &qword_26AF9CCA8;
  *((void *)this + 9) = re::internal::defaultConstruct<re::DefaultStencilFormatData>;
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::DefaultStencilFormatData>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::DefaultStencilFormatData>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::DefaultStencilFormatData>;
  re::IntrospectionRegistry::add(this, v3);
  long long v12 = v14;
}

void re::internal::defaultConstruct<re::DefaultStencilFormatData>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = &unk_26E71C2E8;
}

void *re::internal::defaultConstructV2<re::DefaultStencilFormatData>(void *result)
{
  *uint64_t result = &unk_26E71C2E8;
  return result;
}

uint64_t re::introspect_DefaultStencilFormatData(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"DefaultStencilFormatData", (uint64_t (*)(re::internal *))re::allocInfo_DefaultStencilFormatData, (re::IntrospectionBase *(*)(void))re::initInfo_DefaultStencilFormatData, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::DefaultStencilFormatData>, this);
}

void *re::allocInfo_ForceClearData(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9CC88, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9CC88))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF9CDB8, "ForceClearData");
    __cxa_guard_release(&qword_26AF9CC88);
  }
  return &unk_26AF9CDB8;
}

void re::initInfo_ForceClearData(re *this, re::IntrospectionBase *a2)
{
  v13[0] = 0x1E05F5F3774B4A18;
  v13[1] = "ForceClearData";
  re::StringID::destroyString((re::StringID *)v13);
  *((_OWORD *)this + 2) = v14;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9CC90, memory_order_acquire) & 1) == 0)
  {
    float32x4_t v4 = (re *)__cxa_guard_acquire(&qword_26AF9CC90);
    if (v4)
    {
      float32x4_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::introspect_RenderGraphData((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = "RenderGraphData";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 4re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF9CCB8 = v7;
      uint64_t v8 = re::introspectionAllocator((re *)v7);
      uint64_t v10 = re::introspect_BOOL((re *)1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = "forceClear";
      *(void *)(v11 + 16) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x800000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + 4re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF9CCC0 = v11;
      __cxa_guard_release(&qword_26AF9CC90);
    }
  }
  *((void *)this + 2) = 0x1000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((void *)this + re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = &qword_26AF9CCB8;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ForceClearData>;
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ForceClearData>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ForceClearData>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ForceClearData>;
  re::IntrospectionRegistry::add(this, v3);
  long long v12 = v14;
}

void re::internal::defaultConstruct<re::ForceClearData>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = &unk_26E71C328;
}

void *re::internal::defaultConstructV2<re::ForceClearData>(void *result)
{
  *uint64_t result = &unk_26E71C328;
  return result;
}

uint64_t re::introspect_ForceClearData(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ForceClearData", (uint64_t (*)(re::internal *))re::allocInfo_ForceClearData, (re::IntrospectionBase *(*)(void))re::initInfo_ForceClearData, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ForceClearData>, this);
}

void *re::introspect_MPSImageEdgeModeType(re *this, const re::IntrospectionBase *a2)
{
  int v2 = (int)this;
  {
    if (v9)
    {
      uint64_t v10 = re::introspectionAllocator(v9);
      uint64_t v11 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v10 + 32))(v10, 24, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *((void *)v11 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
      *((void *)v11 + 2) = "Zero";
      re::introspect_MPSImageEdgeModeType(BOOL)::enumAttributes = (uint64_t)v11;
      long long v12 = re::introspectionAllocator(v11);
      uint64_t v13 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 24, 8);
      *(_DWORD *)uint64_t v13 = 1;
      *(void *)(v13 + re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = 1;
      *(void *)(v13 + 16) = "Clamp";
      qword_2687A1860 = v13;
    }
  }
  {
    long long v14 = re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&re::introspect_MPSImageEdgeModeType(BOOL)::info, "MPSImageEdgeModeType", 1, 1, 1, 1);
    *(void *)long long v14 = &unk_26E715E00;
    *((void *)v14 + re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = &re::introspect_MPSImageEdgeModeType(BOOL)::enumTable;
    *((_DWORD *)v14 + 4) = 9;
  }
  if (v2)
  {
    if (re::introspect_MPSImageEdgeModeType(BOOL)::isInitialized) {
      return &re::introspect_MPSImageEdgeModeType(BOOL)::info;
    }
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v16);
    char v3 = re::introspect_MPSImageEdgeModeType(BOOL)::isInitialized;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v16);
    if (v3) {
      return &re::introspect_MPSImageEdgeModeType(BOOL)::info;
    }
    float32x4_t v5 = re::introspectionSharedMutex(v4);
    std::__shared_mutex_base::lock(v5);
    if (re::introspect_MPSImageEdgeModeType(BOOL)::isInitialized)
    {
LABEL_9:
      uint64_t v7 = re::introspectionSharedMutex(v6);
      std::__shared_mutex_base::unlock(v7);
      return &re::introspect_MPSImageEdgeModeType(BOOL)::info;
    }
  }
  re::introspect_MPSImageEdgeModeType(BOOL)::isInitialized = 1;
  re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&re::introspect_MPSImageEdgeModeType(BOOL)::info, a2);
  v15[0] = 0xD4663F6F4305B84ALL;
  v15[1] = (uint64_t)"MPSImageEdgeModeType";
  xmmword_2687A1890 = v16;
  re::StringID::destroyString((re::StringID *)v15);
  if ((v2 & 1) == 0) {
    goto LABEL_9;
  }
  return &re::introspect_MPSImageEdgeModeType(BOOL)::info;
}

void re::RenderGraphResolveNode::configure(re::RenderGraphResolveNode *this, const char *a2, const char *a3, re::RenderFrame *a4)
{
  if (*((void *)this + 29))
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    while (*(_DWORD *)(re::RenderGraphResourceDescriptions::targetDescription((re::RenderFrame *)((char *)a4 + 3448), (uint64_t *)(*((void *)this + 31) + v8))+ 80) == -1)
    {
      ++v9;
      v8 += 64;
      if (*((void *)this + 29) <= v9) {
        goto LABEL_5;
      }
    }
  }
  else
  {
LABEL_5:
    *((unsigned char *)this + 64) = 0;
  }
  re::RenderGraphNode::configure(this, a2, a3, a4);
}

void *re::allocInfo_RenderGraphResolveNode(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_475, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_475))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF9CE48, "RenderGraphResolveNode");
    __cxa_guard_release(&_MergedGlobals_475);
  }
  return &unk_26AF9CE48;
}

void re::initInfo_RenderGraphResolveNode(re *this, re::IntrospectionBase *a2)
{
  v9[0] = 0xB3098F95BFEF7B6CLL;
  v9[1] = "RenderGraphResolveNode";
  re::StringID::destroyString((re::StringID *)v9);
  *((_OWORD *)this + 2) = v10;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9CE40, memory_order_acquire) & 1) == 0)
  {
    float32x4_t v4 = (re *)__cxa_guard_acquire(&qword_26AF9CE40);
    if (v4)
    {
      float32x4_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::introspect_RenderGraphNode((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = "RenderGraphNode";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 4re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF9CE38 = v7;
      __cxa_guard_release(&qword_26AF9CE40);
    }
  }
  *((void *)this + 2) = 0x10000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((void *)this + re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = &qword_26AF9CE38;
  *((void *)this + 9) = re::internal::defaultConstruct<re::RenderGraphResolveNode>;
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::RenderGraphResolveNode>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::RenderGraphResolveNode>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::RenderGraphResolveNode>;
  re::IntrospectionRegistry::add(this, v3);
  long long v8 = v10;
}

re::RenderGraphNode *re::internal::defaultConstruct<re::RenderGraphResolveNode>(int a1, int a2, re::RenderGraphNode *this)
{
  uint64_t result = re::RenderGraphNode::RenderGraphNode(this);
  *(void *)uint64_t result = &unk_26E71F0E8;
  *((unsigned char *)result + 66) = 1;
  return result;
}

void re::internal::defaultDestruct<re::RenderGraphResolveNode>(int a1, int a2, id *this)
{
}

re::RenderGraphNode *re::internal::defaultConstructV2<re::RenderGraphResolveNode>(re::RenderGraphNode *a1)
{
  uint64_t result = re::RenderGraphNode::RenderGraphNode(a1);
  *(void *)uint64_t result = &unk_26E71F0E8;
  *((unsigned char *)result + 66) = 1;
  return result;
}

uint64_t re::introspect_RenderGraphResolveNode(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RenderGraphResolveNode", (uint64_t (*)(re::internal *))re::allocInfo_RenderGraphResolveNode, (re::IntrospectionBase *(*)(void))re::initInfo_RenderGraphResolveNode, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::RenderGraphResolveNode>, this);
}

void re::RenderGraphResolveNode::~RenderGraphResolveNode(id *this)
{
  re::RenderGraphNode::~RenderGraphNode(this);
  JUMPOUT(0x237DBCBD0);
}

void re::ARSegmentationExecuteData::~ARSegmentationExecuteData(re::ARSegmentationExecuteData *this)
{
  int v2 = (void *)*((void *)this + 4);
  if (v2)
  {

    *((void *)this + 4) = 0;
  }
}

{
  void *v2;
  uint64_t vars8;

  int v2 = (void *)*((void *)this + 4);
  if (v2)
  {

    *((void *)this + 4) = 0;
  }

  JUMPOUT(0x237DBCBD0);
}

uint64_t re::RenderGraphDataStore::tryGet<re::SceneUnderstandingGuidedFilterOcclusionData>(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = (unint64_t)"N2re43SceneUnderstandingGuidedFilterOcclusionDataE";
  if (((unint64_t)"N2re43SceneUnderstandingGuidedFilterOcclusionDataE" & 0x8000000000000000) != 0)
  {
    char v3 = (unsigned __int8 *)((unint64_t)"N2re43SceneUnderstandingGuidedFilterOcclusionDataE" & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v4 = 5381;
    do
    {
      unint64_t v2 = v4;
      unsigned int v5 = *v3++;
      uint64_t v4 = (33 * v4) ^ v5;
    }
    while (v5);
  }
  unint64_t v7 = (a2 + (v2 << 6) + (v2 >> 2) - 0x61C8864680B583E9) ^ v2;
  uint64_t result = re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(a1 + 16, (uint64_t *)&v7);
  if (result) {
    return *(void *)result;
  }
  return result;
}

uint64_t re::RenderGraphAREmitter::fillDataStoreAndEmitGraph(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const char *a6, char *a7)
{
  uint64_t v106 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9CEF0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9CEF0))
  {
    qword_26AF9CEE8 = re::hashString((re *)"ARSegmentationData", v80);
    __cxa_guard_release(&qword_26AF9CEF0);
  }
  unint64_t v13 = qword_26AF9CEE8;
  size_t v14 = strlen(*(const char **)(a5 + 56));
  uint64_t v15 = 0x9E3779B97F4A7C17;
  if (v14)
  {
    MurmurHash3_x64_128(*(void *)(a5 + 56), v14, 0, (unint64_t *)v98);
    uint64_t v15 = ((*((void *)&v98[0] + 1) - 0x61C8864680B583E9 + (*(void *)&v98[0] << 6) + (*(void *)&v98[0] >> 2)) ^ *(void *)&v98[0])
        - 0x61C8864680B583E9;
  }
  uint64_t v16 = re::RenderGraphDataStore::tryGet<re::ARSegmentationInputData>(a3 + 32, ((v13 >> 2) + (v13 << 6) + v15) ^ v13);
  re::createARSegmentationGenerateGuideData(a3, (const char *)a5, (uint64_t)v90);
  if (v16) {
    re::ARSegmentationEmitterCache::applyCachedDataToGraph(*(void ***)(a1 + 1824), (const re::ARSegmentationConnectionData *)v90, (id **)a3, a6);
  }
  size_t v17 = strlen(a6);
  if (v17)
  {
    MurmurHash3_x64_128((uint64_t)a6, v17, 0, (unint64_t *)v98);
    uint64_t v18 = (*((void *)&v98[0] + 1) - 0x61C8864680B583E9 + (*(void *)&v98[0] << 6) + (*(void *)&v98[0] >> 2)) ^ *(void *)&v98[0];
  }
  else
  {
    uint64_t v18 = 0;
  }
  size_t v19 = strlen(a7);
  if (v19)
  {
    MurmurHash3_x64_128((uint64_t)a7, v19, 0, (unint64_t *)v98);
    unint64_t v20 = (*((void *)&v98[0] + 1) - 0x61C8864680B583E9 + (*(void *)&v98[0] << 6) + (*(void *)&v98[0] >> 2)) ^ *(void *)&v98[0];
  }
  else
  {
    unint64_t v20 = 0;
  }
  uint64_t v21 = v18 - 0x61C8864680B583E9;
  unint64_t v95 = 0;
  unint64_t v96 = 0;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9CFD0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9CFD0))
  {
    qword_26AF9CFC8 = re::introspect_ARSegmentationConnectionData(0);
    __cxa_guard_release(&qword_26AF9CFD0);
  }
  unint64_t v95 = qword_26AF9CFC8;
  size_t v22 = strlen(*(const char **)(qword_26AF9CFC8 + 48));
  if (v22)
  {
    MurmurHash3_x64_128(*(void *)(qword_26AF9CFC8 + 48), v22, 0, (unint64_t *)v98);
    uint64_t v23 = (*((void *)&v98[0] + 1) - 0x61C8864680B583E9 + (*(void *)&v98[0] << 6) + (*(void *)&v98[0] >> 2)) ^ *(void *)&v98[0];
  }
  else
  {
    uint64_t v23 = 0;
  }
  unint64_t v96 = v23;
  re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addOrReplace<re::IntrospectionStructure const*&>(a4 + 176, &v96, &v95);
  uint64_t v88 = (v21 + (v20 << 6) + (v20 >> 2)) ^ v20;
  unint64_t v24 = (v88 - 0x61C8864680B583E9 + (v96 << 6) + (v96 >> 2)) ^ v96;
  uint64_t v25 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a4 + 8) + 32))(*(void *)(a4 + 8), 48, 8);
  *(void *)uint64_t v25 = &unk_26E71AD20;
  long long v26 = v91;
  long long v27 = v92;
  *(_DWORD *)(v25 + 40) = v93;
  *(_OWORD *)(v25 + 24) = v27;
  *(_OWORD *)(v25 + re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = v26;
  unint64_t v28 = *(void *)(a4 + 64);
  uint64_t v87 = a4 + 64;
  if (v28)
  {
    unint64_t v28 = v24 % *(unsigned int *)(a4 + 88);
    uint64_t v29 = *(unsigned int *)(*(void *)(a4 + 72) + 4 * v28);
    if (v29 != 0x7FFFFFFF)
    {
      uint64_t v45 = *(void *)(a4 + 80);
      if (*(void *)(v45 + 24 * v29 + 8) == v24) {
        goto LABEL_24;
      }
      while (1)
      {
        LODWORD(v29) = *(_DWORD *)(v45 + 24 * v29) & 0x7FFFFFFF;
        if (v29 == 0x7FFFFFFF) {
          break;
        }
        if (*(void *)(v45 + 24 * v29 + 8) == v24) {
          goto LABEL_24;
        }
      }
    }
  }
  uint64_t v30 = *(unsigned int *)(a4 + 100);
  if (v30 == 0x7FFFFFFF)
  {
    uint64_t v30 = *(unsigned int *)(a4 + 96);
    int v31 = v30;
    if (v30 == *(_DWORD *)(a4 + 88))
    {
      re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(v87, 2 * *(_DWORD *)(a4 + 92));
      LODWORD(v2re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = v24 % *(unsigned int *)(a4 + 88);
      int v31 = *(_DWORD *)(a4 + 96);
    }
    *(_DWORD *)(a4 + 96) = v31 + 1;
    uint64_t v32 = *(void *)(a4 + 80);
    int v33 = *(_DWORD *)(v32 + 24 * v30);
  }
  else
  {
    uint64_t v32 = *(void *)(a4 + 80);
    int v33 = *(_DWORD *)(v32 + 24 * v30);
    *(_DWORD *)(a4 + 100) = v33 & 0x7FFFFFFF;
  }
  uint64_t v34 = 24 * v30;
  *(_DWORD *)(v32 + v34) = v33 | 0x80000000;
  *(_DWORD *)(*(void *)(a4 + 80) + v34) = *(_DWORD *)(*(void *)(a4 + 80) + 24 * v30) & 0x80000000 | *(_DWORD *)(*(void *)(a4 + 72) + 4 * v28);
  *(void *)(*(void *)(a4 + 80) + 24 * v30 + re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = v24;
  *(void *)(*(void *)(a4 + 80) + 24 * v30 + 16) = v25;
  *(_DWORD *)(*(void *)(a4 + 72) + 4 * v2re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = v30;
  ++*(_DWORD *)(a4 + 92);
  ++*(_DWORD *)(a4 + 104);
LABEL_24:
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9CF00, memory_order_acquire) & 1) == 0)
  {
    long long v81 = (re *)__cxa_guard_acquire(&qword_26AF9CF00);
    if (v81)
    {
      qword_26AF9CEF8 = re::getCombinedScopeHash(v81, v82, v83);
      __cxa_guard_release(&qword_26AF9CF00);
    }
  }
  uint64_t v35 = re::RenderGraphDataStore::tryGet<re::SceneUnderstandingGuidedFilterOcclusionData>(a4, qword_26AF9CEF8);
  if (!v35)
  {
    long long v104 = 0u;
    long long v105 = 0u;
    long long v102 = 0u;
    long long v103 = 0u;
    long long v100 = 0u;
    long long v101 = 0u;
    long long v99 = 0u;
    memset(v98, 0, sizeof(v98));
    *(void *)(a1 + 1664) = 0;
    NS::SharedPtr<MTL::Texture>::operator=((void **)(a1 + 1672), (void **)v98 + 1);
    NS::SharedPtr<MTL::Texture>::operator=((void **)(a1 + 1680), (void **)&v98[1]);
    NS::SharedPtr<MTL::Texture>::operator=((void **)(a1 + 1688), (void **)&v98[1] + 1);
    NS::SharedPtr<MTL::Texture>::operator=((void **)(a1 + 1696), (void **)&v98[2]);
    NS::SharedPtr<MTL::Texture>::operator=((void **)(a1 + 1704), (void **)&v98[2] + 1);
    NS::SharedPtr<MTL::Texture>::operator=((void **)(a1 + 1712), (void **)&v99);
    NS::SharedPtr<MTL::Texture>::operator=((void **)(a1 + 1720), (void **)&v99 + 1);
    NS::SharedPtr<MTL::Texture>::operator=((void **)(a1 + 1728), (void **)&v100);
    NS::SharedPtr<MTL::Texture>::operator=((void **)(a1 + 1736), (void **)&v100 + 1);
    NS::SharedPtr<MTL::Texture>::operator=((void **)(a1 + 1744), (void **)&v101);
    NS::SharedPtr<MTL::Texture>::operator=((void **)(a1 + 1752), (void **)&v101 + 1);
    NS::SharedPtr<MTL::Texture>::operator=((void **)(a1 + 1760), (void **)&v102);
    NS::SharedPtr<MTL::Texture>::operator=((void **)(a1 + 1768), (void **)&v102 + 1);
    re::ObjCObject::operator=((id *)(a1 + 1776), (id *)&v103);
    re::ObjCObject::operator=((id *)(a1 + 1784), (id *)&v103 + 1);
    re::ObjCObject::operator=((id *)(a1 + 1792), (id *)&v104);
    re::ObjCObject::operator=((id *)(a1 + 1800), (id *)&v104 + 1);
    re::ObjCObject::operator=((id *)(a1 + 1808), (id *)&v105);
    re::ObjCObject::operator=((id *)(a1 + 1816), (id *)&v105 + 1);
    re::GuidedFilterOcclusionStateData::~GuidedFilterOcclusionStateData((id *)v98);
    goto LABEL_44;
  }
  uint64_t v36 = v35;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9CF10, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9CF10))
  {
    qword_26AF9CF08 = re::hashString((re *)"GuidedFilterOcclusion", v85);
    __cxa_guard_release(&qword_26AF9CF10);
  }
  *(void *)&v98[0] = &unk_26E71F2C8;
  uint64_t v38 = *(void *)(v36 + 168);
  *(void *)&long long v37 = *(void *)(v36 + 176);
  *((void *)&v37 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = *(void *)(v36 + 160);
  *(_OWORD *)((char *)v98 + re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = v37;
  unsigned int v39 = *(_DWORD *)(v36 + 116);
  LODWORD(v98[2]) = v37 / v39;
  DWORD1(v98[2]) = DWORD1(v37) / v39;
  uint64_t v40 = qword_26AF9CF08;
  *((void *)&v98[1] + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = v38;
  unint64_t v41 = v21 + (qword_26AF9CF08 << 6) + ((unint64_t)qword_26AF9CF08 >> 2);
  uint64_t v94 = 0;
  unint64_t v95 = 0;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9CFE0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9CFE0))
  {
    qword_26AF9CFD8 = re::introspect_SceneUnderstandingGuidedFilterOcclusionConnectionData(0);
    __cxa_guard_release(&qword_26AF9CFE0);
  }
  unint64_t v42 = v41 ^ v40;
  uint64_t v94 = qword_26AF9CFD8;
  size_t v43 = strlen(*(const char **)(qword_26AF9CFD8 + 48));
  if (v43)
  {
    MurmurHash3_x64_128(*(void *)(qword_26AF9CFD8 + 48), v43, 0, &v96);
    unint64_t v44 = (v97 - 0x61C8864680B583E9 + (v96 << 6) + (v96 >> 2)) ^ v96;
  }
  else
  {
    unint64_t v44 = 0;
  }
  unint64_t v95 = v44;
  re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addOrReplace<re::IntrospectionStructure const*&>(a4 + 176, &v95, &v94);
  unint64_t v46 = (v42 - 0x61C8864680B583E9 + (v95 << 6) + (v95 >> 2)) ^ v95;
  uint64_t v47 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a4 + 8) + 32))(*(void *)(a4 + 8), 40, 8);
  *(void *)uint64_t v47 = &unk_26E71F2C8;
  long long v48 = *(_OWORD *)((char *)v98 + 8);
  *(_OWORD *)(v47 + 24) = *(_OWORD *)((char *)&v98[1] + 8);
  *(_OWORD *)(v47 + re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = v48;
  unint64_t v49 = *(void *)(a4 + 64);
  if (v49)
  {
    unint64_t v49 = v46 % *(unsigned int *)(a4 + 88);
    uint64_t v50 = *(unsigned int *)(*(void *)(a4 + 72) + 4 * v49);
    if (v50 != 0x7FFFFFFF)
    {
      uint64_t v79 = *(void *)(a4 + 80);
      if (*(void *)(v79 + 24 * v50 + 8) == v46) {
        goto LABEL_44;
      }
      while (1)
      {
        LODWORD(v50) = *(_DWORD *)(v79 + 24 * v50) & 0x7FFFFFFF;
        if (v50 == 0x7FFFFFFF) {
          break;
        }
        if (*(void *)(v79 + 24 * v50 + 8) == v46) {
          goto LABEL_44;
        }
      }
    }
  }
  uint64_t v51 = *(unsigned int *)(a4 + 100);
  if (v51 == 0x7FFFFFFF)
  {
    uint64_t v51 = *(unsigned int *)(a4 + 96);
    int v52 = v51;
    if (v51 == *(_DWORD *)(a4 + 88))
    {
      re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(v87, 2 * *(_DWORD *)(a4 + 92));
      LODWORD(v49) = v46 % *(unsigned int *)(a4 + 88);
      int v52 = *(_DWORD *)(a4 + 96);
    }
    *(_DWORD *)(a4 + 96) = v52 + 1;
    uint64_t v53 = *(void *)(a4 + 80);
    int v54 = *(_DWORD *)(v53 + 24 * v51);
  }
  else
  {
    uint64_t v53 = *(void *)(a4 + 80);
    int v54 = *(_DWORD *)(v53 + 24 * v51);
    *(_DWORD *)(a4 + 100) = v54 & 0x7FFFFFFF;
  }
  uint64_t v55 = 24 * v51;
  *(_DWORD *)(v53 + v55) = v54 | 0x80000000;
  *(_DWORD *)(*(void *)(a4 + 80) + v55) = *(_DWORD *)(*(void *)(a4 + 80) + 24 * v51) & 0x80000000 | *(_DWORD *)(*(void *)(a4 + 72) + 4 * v49);
  *(void *)(*(void *)(a4 + 80) + 24 * v51 + re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = v46;
  *(void *)(*(void *)(a4 + 80) + 24 * v51 + 16) = v47;
  *(_DWORD *)(*(void *)(a4 + 72) + 4 * v49) = v51;
  ++*(_DWORD *)(a4 + 92);
  ++*(_DWORD *)(a4 + 104);
LABEL_44:
  *(void *)&v98[0] = &unk_26E71C2A8;
  DWORD2(v98[0]) = *(_DWORD *)(a1 + 1136);
  re::RenderGraphDataStore::add<re::DefaultDepthFormatData,re::DefaultDepthFormatData&>(a4, v88, (uint64_t)v98);
  *(void *)&v98[0] = &unk_26E71C2E8;
  DWORD2(v98[0]) = *(_DWORD *)(a1 + 1140);
  re::RenderGraphDataStore::add<re::DefaultStencilFormatData,re::DefaultStencilFormatData&>(a4, v88, (uint64_t)v98);
  *(void *)&v98[2] = 0;
  memset(v98, 0, 28);
  if (!*(unsigned char *)(a3 + 424))
  {
    re::CameraView::registerFileProviders(a7, a2, *(re::RenderGraphManager **)a3, a5, (uint64_t)&v96);
    re::DynamicArray<re::ProviderHandle>::operator=((uint64_t)v98, (uint64_t)&v96);
    re::DynamicArray<re::Pair<re::StringID,re::RigDataValue *,true>>::deinit((uint64_t)&v96);
  }
  uint64_t v56 = *(void *)(a1 + 1648);
  if (v56)
  {
    *(unsigned char *)(v56 + 40) = *(unsigned char *)(a1 + 1164);
    long long v57 = *(_OWORD *)(a1 + 1176);
    *(void *)(v56 + 60) = *(void *)(a1 + 1192);
    *(_OWORD *)(v56 + 44) = v57;
    uint64_t v58 = *(void *)(a1 + 1648);
    *(_DWORD *)(v58 + 6re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = *(_DWORD *)(a1 + 1200);
    re::AssetHandle::operator=(v58 + 72, (uint64_t *)(a1 + 1064));
    re::AssetHandle::operator=(*(void *)(a1 + 1648) + 96, (uint64_t *)(a1 + 1088));
    re::AssetHandle::operator=(*(void *)(a1 + 1648) + 120, (uint64_t *)(a1 + 1112));
  }
  int v59 = *(unsigned __int8 *)(a2 + 350);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9CF20, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9CF20))
  {
    qword_26AF9CF18 = re::hashString((re *)"DynamicFunctionConstants", v84);
    __cxa_guard_release(&qword_26AF9CF20);
  }
  if (v59)
  {
    unint64_t v60 = qword_26AF9CF18;
    if (*(void *)(a2 + 8)) {
      uint64_t v61 = *(const char **)(a2 + 16);
    }
    else {
      uint64_t v61 = (const char *)(a2 + 9);
    }
    size_t v62 = strlen(v61);
    unint64_t v63 = 0x9E3779B97F4A7C17;
    if (v62)
    {
      MurmurHash3_x64_128((uint64_t)v61, v62, 0, &v96);
      unint64_t v63 = ((v97 - 0x61C8864680B583E9 + (v96 << 6) + (v96 >> 2)) ^ v96) - 0x61C8864680B583E9;
    }
    uint64_t v64 = ((v60 >> 2) + (v60 << 6) + v63) ^ v60;
    uint64_t v65 = re::RenderGraphDataStore::tryGet<re::DynamicFunctionConstantsData>(a4, v64);
    if (!v65)
    {
      unint64_t v96 = *(void *)(a3 + 376);
      LODWORD(v95) = 7;
      uint64_t v65 = re::RenderGraphDataStore::add<re::DynamicFunctionConstantsData,re::PerFrameAllocator *,int>(a4, v64, (uint64_t *)&v96, (int *)&v95);
    }
    if (*(unsigned char *)(a2 + 350))
    {
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9CF30, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26AF9CF30))
      {
        qword_26AF9CF28 = re::hashString((re *)"EnableUserEnvironment", v86);
        __cxa_guard_release(&qword_26AF9CF30);
      }
      LODWORD(v96) = 1;
      re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::addOrReplace((_anonymous_namespace_ *)(v65 + 8), &qword_26AF9CF28, (int *)&v96);
    }
  }
  uint64_t v66 = *(void *)(a5 + 320);
  if (v66 && *(void *)(v66 + 40))
  {
    unint64_t v67 = qword_26AF9CF18;
    if (*(void *)(a2 + 8)) {
      uint64_t v68 = *(const char **)(a2 + 16);
    }
    else {
      uint64_t v68 = (const char *)(a2 + 9);
    }
    size_t v69 = strlen(v68);
    unint64_t v70 = 0x9E3779B97F4A7C17;
    if (v69)
    {
      MurmurHash3_x64_128((uint64_t)v68, v69, 0, &v96);
      unint64_t v70 = ((v97 - 0x61C8864680B583E9 + (v96 << 6) + (v96 >> 2)) ^ v96) - 0x61C8864680B583E9;
    }
    uint64_t v71 = ((v67 >> 2) + (v67 << 6) + v70) ^ v67;
    if (!re::RenderGraphDataStore::tryGet<re::DynamicFunctionConstantsData>(a4, v71))
    {
      uint64_t v72 = *(void *)(a3 + 376);
      unint64_t v73 = (unint64_t)"N2re28DynamicFunctionConstantsDataE";
      if (((unint64_t)"N2re28DynamicFunctionConstantsDataE" & 0x8000000000000000) != 0)
      {
        uint64_t v74 = (unsigned __int8 *)((unint64_t)"N2re28DynamicFunctionConstantsDataE" & 0x7FFFFFFFFFFFFFFFLL);
        uint64_t v75 = 5381;
        do
        {
          unint64_t v73 = v75;
          unsigned int v76 = *v74++;
          uint64_t v75 = (33 * v75) ^ v76;
        }
        while (v76);
      }
      unint64_t v96 = (v71 - 0x61C8864680B583E9 + (v73 << 6) + (v73 >> 2)) ^ v73;
      uint64_t v77 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a4 + 8) + 32))(*(void *)(a4 + 8), 72, 8);
      *(void *)uint64_t v77 = &unk_26E71C1A0;
      *(_OWORD *)(v77 + re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = 0u;
      *(_OWORD *)(v77 + 24) = 0u;
      *(_OWORD *)(v77 + 40) = 0u;
      *(void *)(v77 + 56) = 0;
      *(void *)(v77 + 64) = v72;
      unint64_t v95 = v77;
      re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addNew<re::CameraData *>(v87, &v96, &v95);
    }
  }
  re::RenderFrame::emitGraph((re::RenderFrame *)a3, a7, a6);
  re::CameraView::unregisterFileProviders(*(void *)a3, (uint64_t)v98);
  return re::DynamicArray<re::Pair<re::StringID,re::RigDataValue *,true>>::deinit((uint64_t)v98);
}

void re::RenderGraphAREmitter::~RenderGraphAREmitter(re::RenderGraphAREmitter *this)
{
  re::RenderGraphAREmitter::unregisterProviders(this, *((re::RenderGraphManager **)this + 151));
  unint64_t v2 = (void *)*((void *)this + 230);
  if (v2)
  {

    *((void *)this + 230) = 0;
  }

  uint64_t v3 = *((void *)this + 228);
  if (v3)
  {

    *((void *)this + 22re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = 0;
  }
  re::GuidedFilterOcclusionStateData::~GuidedFilterOcclusionStateData((id *)this + 208);
  re::StringID::destroyString((re::RenderGraphAREmitter *)((char *)this + 1624));
  re::AssetHandle::~AssetHandle((re::RenderGraphAREmitter *)((char *)this + 1600));
  re::AssetHandle::~AssetHandle((re::RenderGraphAREmitter *)((char *)this + 1576));
  re::StringID::destroyString((re::RenderGraphAREmitter *)((char *)this + 1552));
  re::StringID::destroyString((re::RenderGraphAREmitter *)((char *)this + 1528));
  re::StringID::destroyString((re::RenderGraphAREmitter *)((char *)this + 1504));
  re::StringID::destroyString((re::RenderGraphAREmitter *)((char *)this + 1480));
  re::StringID::destroyString((re::RenderGraphAREmitter *)((char *)this + 1456));
  re::StringID::destroyString((re::RenderGraphAREmitter *)((char *)this + 1432));
  re::StringID::destroyString((re::RenderGraphAREmitter *)((char *)this + 1408));
  re::StringID::destroyString((re::RenderGraphAREmitter *)((char *)this + 1384));
  re::StringID::destroyString((re::RenderGraphAREmitter *)((char *)this + 1360));
  re::StringID::destroyString((re::RenderGraphAREmitter *)((char *)this + 1336));
  re::StringID::destroyString((re::RenderGraphAREmitter *)((char *)this + 1312));
  re::StringID::destroyString((re::RenderGraphAREmitter *)((char *)this + 1288));
  re::StringID::destroyString((re::RenderGraphAREmitter *)((char *)this + 1264));
  re::StringID::destroyString((re::RenderGraphAREmitter *)((char *)this + 1240));
  re::AssetHandle::~AssetHandle((re::RenderGraphAREmitter *)((char *)this + 1216));
  re::AssetHandle::~AssetHandle((re::RenderGraphAREmitter *)((char *)this + 1112));
  re::AssetHandle::~AssetHandle((re::RenderGraphAREmitter *)((char *)this + 1088));
  re::AssetHandle::~AssetHandle((re::RenderGraphAREmitter *)((char *)this + 1064));
  re::AssetHandle::~AssetHandle((re::RenderGraphAREmitter *)((char *)this + 1032));
  re::AssetHandle::~AssetHandle((re::RenderGraphAREmitter *)((char *)this + 1008));
  re::AssetHandle::~AssetHandle((re::RenderGraphAREmitter *)((char *)this + 984));
  re::AssetHandle::~AssetHandle((re::RenderGraphAREmitter *)((char *)this + 960));
  re::AssetHandle::~AssetHandle((re::RenderGraphAREmitter *)((char *)this + 936));
  re::AssetHandle::~AssetHandle((re::RenderGraphAREmitter *)((char *)this + 912));
  re::AssetHandle::~AssetHandle((re::RenderGraphAREmitter *)((char *)this + 888));
  re::AssetHandle::~AssetHandle((re::RenderGraphAREmitter *)((char *)this + 864));
  re::AssetHandle::~AssetHandle((re::RenderGraphAREmitter *)((char *)this + 840));
  re::AssetHandle::~AssetHandle((re::RenderGraphAREmitter *)((char *)this + 816));
  re::AssetHandle::~AssetHandle((re::RenderGraphAREmitter *)((char *)this + 792));
  re::AssetHandle::~AssetHandle((re::RenderGraphAREmitter *)((char *)this + 768));
  re::AssetHandle::~AssetHandle((re::RenderGraphAREmitter *)((char *)this + 744));
  re::RealityEmitterBase::~RealityEmitterBase(this);
}

{
  uint64_t vars8;

  re::RenderGraphAREmitter::~RenderGraphAREmitter(this);
  JUMPOUT(0x237DBCBD0);
}

void re::RenderGraphAREmitter::unregisterProviders(re::RenderGraphAREmitter *this, re::RenderGraphManager *a2)
{
  re::RealityEmitterBase::unregisterCommonProviders(this, a2);
  if (re::FontID::isValid((re::RenderGraphAREmitter *)((char *)this + 1240)))
  {
    re::StringID::StringID((re::StringID *)v30, (const StringID *)((char *)this + 1240));
    uint64_t v31 = *((void *)this + 157);
    re::RenderGraphManager::removeProvider((uint64_t)a2, (uint64_t)v30);
    re::StringID::destroyString((re::StringID *)v30);
    re::ProviderHandle::invalidate((re::RenderGraphAREmitter *)((char *)this + 1240));
  }
  if (re::FontID::isValid((re::RenderGraphAREmitter *)((char *)this + 1408)))
  {
    re::StringID::StringID((re::StringID *)v28, (const StringID *)this + 88);
    uint64_t v29 = *((void *)this + 178);
    re::RenderGraphManager::removeProvider((uint64_t)a2, (uint64_t)v28);
    re::StringID::destroyString((re::StringID *)v28);
    re::ProviderHandle::invalidate((re::RenderGraphAREmitter *)((char *)this + 1408));
  }
  if (re::FontID::isValid((re::RenderGraphAREmitter *)((char *)this + 1432)))
  {
    re::StringID::StringID((re::StringID *)v26, (const StringID *)((char *)this + 1432));
    uint64_t v27 = *((void *)this + 181);
    re::RenderGraphManager::removeProvider((uint64_t)a2, (uint64_t)v26);
    re::StringID::destroyString((re::StringID *)v26);
    re::ProviderHandle::invalidate((re::RenderGraphAREmitter *)((char *)this + 1432));
  }
  if (re::FontID::isValid((re::RenderGraphAREmitter *)((char *)this + 1288)))
  {
    re::StringID::StringID((re::StringID *)v24, (const StringID *)((char *)this + 1288));
    uint64_t v25 = *((void *)this + 163);
    re::RenderGraphManager::removeProvider((uint64_t)a2, (uint64_t)v24);
    re::StringID::destroyString((re::StringID *)v24);
    re::ProviderHandle::invalidate((re::RenderGraphAREmitter *)((char *)this + 1288));
  }
  if (re::FontID::isValid((re::RenderGraphAREmitter *)((char *)this + 1312)))
  {
    re::StringID::StringID((re::StringID *)v22, (const StringID *)this + 82);
    uint64_t v23 = *((void *)this + 166);
    re::RenderGraphManager::removeProvider((uint64_t)a2, (uint64_t)v22);
    re::StringID::destroyString((re::StringID *)v22);
    re::ProviderHandle::invalidate((re::RenderGraphAREmitter *)((char *)this + 1312));
  }
  if (re::FontID::isValid((re::RenderGraphAREmitter *)((char *)this + 1336)))
  {
    re::StringID::StringID((re::StringID *)v20, (const StringID *)((char *)this + 1336));
    uint64_t v21 = *((void *)this + 169);
    re::RenderGraphManager::removeProvider((uint64_t)a2, (uint64_t)v20);
    re::StringID::destroyString((re::StringID *)v20);
    re::ProviderHandle::invalidate((re::RenderGraphAREmitter *)((char *)this + 1336));
  }
  uint64_t v4 = (void *)*((void *)this + 229);
  *((void *)this + 229) = 0;

  *((_OWORD *)this + 115) = 0u;
  if (re::FontID::isValid((re::RenderGraphAREmitter *)((char *)this + 1504)))
  {
    re::StringID::StringID((re::StringID *)v18, (const StringID *)this + 94);
    uint64_t v19 = *((void *)this + 190);
    re::RenderGraphManager::removeProvider((uint64_t)a2, (uint64_t)v18);
    re::StringID::destroyString((re::StringID *)v18);
    re::ProviderHandle::invalidate((re::RenderGraphAREmitter *)((char *)this + 1504));
  }
  if (re::FontID::isValid((re::RenderGraphAREmitter *)((char *)this + 1528)))
  {
    re::StringID::StringID((re::StringID *)v16, (const StringID *)((char *)this + 1528));
    uint64_t v17 = *((void *)this + 193);
    re::RenderGraphManager::removeProvider((uint64_t)a2, (uint64_t)v16);
    re::StringID::destroyString((re::StringID *)v16);
    re::ProviderHandle::invalidate((re::RenderGraphAREmitter *)((char *)this + 1528));
  }
  if (re::FontID::isValid((re::RenderGraphAREmitter *)((char *)this + 1456)))
  {
    re::StringID::StringID((re::StringID *)v14, (const StringID *)this + 91);
    uint64_t v15 = *((void *)this + 184);
    re::RenderGraphManager::removeProvider((uint64_t)a2, (uint64_t)v14);
    re::StringID::destroyString((re::StringID *)v14);
    re::ProviderHandle::invalidate((re::RenderGraphAREmitter *)((char *)this + 1456));
  }
  if (re::FontID::isValid((re::RenderGraphAREmitter *)((char *)this + 1480)))
  {
    re::StringID::StringID((re::StringID *)v12, (const StringID *)((char *)this + 1480));
    uint64_t v13 = *((void *)this + 187);
    re::RenderGraphManager::removeProvider((uint64_t)a2, (uint64_t)v12);
    re::StringID::destroyString((re::StringID *)v12);
    re::ProviderHandle::invalidate((re::RenderGraphAREmitter *)((char *)this + 1480));
  }
  if (*((unsigned char *)this + 1204) && re::FontID::isValid((re::RenderGraphAREmitter *)((char *)this + 1552)))
  {
    re::StringID::StringID((re::StringID *)v10, (const StringID *)this + 97);
    uint64_t v11 = *((void *)this + 196);
    re::RenderGraphManager::removeProvider((uint64_t)a2, (uint64_t)v10);
    re::StringID::destroyString((re::StringID *)v10);
    re::ProviderHandle::invalidate((re::RenderGraphAREmitter *)((char *)this + 1552));
  }
  if (re::FontID::isValid((re::RenderGraphAREmitter *)((char *)this + 1360)))
  {
    re::StringID::StringID((re::StringID *)v8, (const StringID *)this + 85);
    uint64_t v9 = *((void *)this + 172);
    re::RenderGraphManager::removeProvider((uint64_t)a2, (uint64_t)v8);
    re::StringID::destroyString((re::StringID *)v8);
    re::ProviderHandle::invalidate((re::RenderGraphAREmitter *)((char *)this + 1360));
  }
  if (re::FontID::isValid((re::RenderGraphAREmitter *)((char *)this + 1384)))
  {
    re::StringID::StringID((re::StringID *)v6, (const StringID *)((char *)this + 1384));
    uint64_t v7 = *((void *)this + 175);
    re::RenderGraphManager::removeProvider((uint64_t)a2, (uint64_t)v6);
    re::StringID::destroyString((re::StringID *)v6);
    re::ProviderHandle::invalidate((re::RenderGraphAREmitter *)((char *)this + 1384));
  }
  if (re::FontID::isValid((re::RenderGraphAREmitter *)((char *)this + 1624)))
  {
    re::StringID::StringID((re::StringID *)v5, (const StringID *)((char *)this + 1624));
    unint64_t v5[2] = *((void *)this + 205);
    re::RenderGraphManager::removeProvider((uint64_t)a2, (uint64_t)v5);
    re::StringID::destroyString((re::StringID *)v5);
    re::ProviderHandle::invalidate((re::RenderGraphAREmitter *)((char *)this + 1624));
  }
  *((void *)this + 206) = 0;
  re::ARSegmentationEmitterCache::unregisterRenderGraphProvider(*((re::ARSegmentationEmitterCache **)this + 228), a2);
}

re::RenderGraphAREmitter *re::RenderGraphAREmitter::RenderGraphAREmitter(re::RenderGraphAREmitter *this)
{
  unint64_t v2 = (char *)this + 1165;
  uint64_t v3 = re::RealityEmitterBase::RealityEmitterBase(this);
  *(void *)uint64_t v3 = &unk_26E71F190;
  *(_OWORD *)((char *)v3 + 744) = 0u;
  *(_OWORD *)((char *)v3 + 760) = 0u;
  *(_OWORD *)((char *)v3 + 776) = 0u;
  *(_OWORD *)((char *)v3 + 792) = 0u;
  *(_OWORD *)((char *)v3 + 80re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = 0u;
  *(_OWORD *)((char *)v3 + 824) = 0u;
  *(_OWORD *)((char *)v3 + 840) = 0u;
  *(_OWORD *)((char *)v3 + 856) = 0u;
  *(_OWORD *)((char *)v3 + 872) = 0u;
  *(_OWORD *)((char *)v3 + 88re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = 0u;
  *(_OWORD *)((char *)v3 + 904) = 0u;
  *(_OWORD *)((char *)v3 + 920) = 0u;
  *(_OWORD *)((char *)v3 + 936) = 0u;
  *(_OWORD *)((char *)v3 + 952) = 0u;
  *(_OWORD *)((char *)v3 + 96re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = 0u;
  *(_OWORD *)((char *)v3 + 984) = 0u;
  *(_OWORD *)((char *)v3 + 1000) = 0u;
  *(_OWORD *)((char *)v3 + 1016) = 0u;
  *(_OWORD *)((char *)v3 + 1032) = 0u;
  *((void *)v3 + 13re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
  *((_DWORD *)v3 + 264) = 1;
  *(_OWORD *)((char *)v3 + 1064) = 0u;
  *(_OWORD *)((char *)v3 + 1080) = 0u;
  *(_OWORD *)((char *)v3 + 1096) = 0u;
  *(_OWORD *)((char *)v3 + 1112) = 0u;
  *((void *)v3 + 14re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
  *((_OWORD *)v3 + 7re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = xmmword_234414DF0;
  *((void *)v3 + 144) = 0x4280000000000008;
  *((_DWORD *)v3 + 290) = 32;
  *((unsigned char *)v3 + 1164) = 0;
  *(_DWORD *)unint64_t v2 = 16843009;
  *((_DWORD *)v2 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0x1000000;
  *(_OWORD *)(v2 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = xmmword_234412B90;
  *((_WORD *)v3 + 596) = 0;
  *(_DWORD *)(v2 + 29) = 16843009;
  *((_WORD *)v3 + 599) = 256;
  *((_DWORD *)v3 + 300) = 1065353216;
  *((unsigned char *)v3 + 1204) = 1;
  *((void *)v3 + 154) = 0;
  *((_OWORD *)v3 + 76) = 0u;
  re::StringID::invalid((re::RealityEmitterBase *)((char *)v3 + 1240));
  *((void *)this + 157) = 0;
  re::StringID::invalid((re::RenderGraphAREmitter *)((char *)this + 1264));
  *((void *)this + 160) = 0;
  re::StringID::invalid((re::RenderGraphAREmitter *)((char *)this + 1288));
  *((void *)this + 163) = 0;
  re::StringID::invalid((re::RenderGraphAREmitter *)((char *)this + 1312));
  *((void *)this + 166) = 0;
  re::StringID::invalid((re::RenderGraphAREmitter *)((char *)this + 1336));
  *((void *)this + 169) = 0;
  re::StringID::invalid((re::RenderGraphAREmitter *)((char *)this + 1360));
  *((void *)this + 172) = 0;
  re::StringID::invalid((re::RenderGraphAREmitter *)((char *)this + 1384));
  *((void *)this + 175) = 0;
  re::StringID::invalid((re::RenderGraphAREmitter *)((char *)this + 1408));
  *((void *)this + 17re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = 0;
  re::StringID::invalid((re::RenderGraphAREmitter *)((char *)this + 1432));
  *((void *)this + 18re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
  re::StringID::invalid((re::RenderGraphAREmitter *)((char *)this + 1456));
  *((void *)this + 184) = 0;
  re::StringID::invalid((re::RenderGraphAREmitter *)((char *)this + 1480));
  *((void *)this + 187) = 0;
  re::StringID::invalid((re::RenderGraphAREmitter *)((char *)this + 1504));
  *((void *)this + 190) = 0;
  re::StringID::invalid((re::RenderGraphAREmitter *)((char *)this + 1528));
  *((void *)this + 193) = 0;
  re::StringID::invalid((re::RenderGraphAREmitter *)((char *)this + 1552));
  *((void *)this + 202) = 0;
  *((_OWORD *)this + 100) = 0u;
  *((_OWORD *)this + 99) = 0u;
  *((_OWORD *)this + 9re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = 0u;
  uint64_t v4 = re::StringID::invalid((re::RenderGraphAREmitter *)((char *)this + 1624));
  *((void *)this + 206) = 0;
  *((void *)this + 205) = 0;
  *((unsigned char *)this + 1656) = *((unsigned char *)this + 1172);
  *((_OWORD *)this + 104) = 0u;
  *((_OWORD *)this + 105) = 0u;
  *((_OWORD *)this + 106) = 0u;
  *((_OWORD *)this + 107) = 0u;
  *((_OWORD *)this + 10re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = 0u;
  *((_OWORD *)this + 109) = 0u;
  *((_OWORD *)this + 110) = 0u;
  *((_OWORD *)this + 11re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0u;
  *((_OWORD *)this + 112) = 0u;
  *((_OWORD *)this + 113) = 0u;
  *((_OWORD *)this + 114) = 0u;
  *((_OWORD *)this + 115) = 0u;
  unsigned int v5 = re::globalAllocators(v4);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 88, 8);
  *(_OWORD *)uint64_t v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)(v6 + 4re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = 0u;
  *(void *)(v6 + 80) = 0;
  *(_OWORD *)(v6 + 64) = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v6, 0);
  *(void *)uint64_t v6 = &unk_26E71F280;
  *(_OWORD *)(v6 + 24) = 0u;
  *(_OWORD *)(v6 + 40) = 0u;
  *(void *)(v6 + 56) = 0;
  re::StringID::invalid((re::StringID *)(v6 + 64));
  *(void *)(v6 + 80) = 0;
  uint64_t v7 = *((void *)this + 228);
  *((void *)this + 22re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = v6;
  if (v7) {

  }
  return this;
}

void re::RenderGraphAREmitter::afterPrepareSceneContextHandler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v114 = *MEMORY[0x263EF8340];
  uint64_t v9 = *(void **)(a4 + 328);
  if (v9)
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9CED0, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_26AF9CED0))
    {
      MurmurHash3_x64_128((uint64_t)"ARSegmentationData", 18, 0, &v101);
      qword_26AF9CEC8 = (v102 - 0x61C8864680B583E9 + (v101 << 6) + (v101 >> 2)) ^ v101;
      __cxa_guard_release(&qword_26AF9CED0);
    }
    unint64_t v10 = qword_26AF9CEC8;
    uint64_t v11 = (re *)strlen(*(const char **)(a4 + 56));
    if (v11)
    {
      uint64_t v11 = (re *)MurmurHash3_x64_128(*(void *)(a4 + 56), (int)v11, 0, &v101);
      unint64_t v12 = ((v102 - 0x61C8864680B583E9 + (v101 << 6) + (v101 >> 2)) ^ v101) - 0x61C8864680B583E9;
    }
    else
    {
      unint64_t v12 = 0x9E3779B97F4A7C17;
    }
    unint64_t v13 = ((v10 >> 2) + (v10 << 6) + v12) ^ v10;
    unint64_t v14 = (unint64_t)"N2re23ARSegmentationInputDataE";
    if (((unint64_t)"N2re23ARSegmentationInputDataE" & 0x8000000000000000) != 0)
    {
      uint64_t v15 = (unsigned __int8 *)((unint64_t)"N2re23ARSegmentationInputDataE" & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v16 = 5381;
      do
      {
        unint64_t v14 = v16;
        unsigned int v17 = *v15++;
        uint64_t v16 = (33 * v16) ^ v17;
      }
      while (v17);
    }
    unint64_t v18 = v13 - 0x61C8864680B583E9;
    unint64_t v19 = (v13 - 0x61C8864680B583E9 + (v14 << 6) + (v14 >> 2)) ^ v14;
    unint64_t v20 = re::globalAllocators(v11);
    uint64_t v21 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v20[2] + 32))(v20[2], 40, 8);
    uint64_t v23 = (unint64_t *)(a5 + 16);
    unint64_t v22 = *(void *)(a5 + 16);
    *uint64_t v21 = &unk_26E6FB528;
    v21[1] = v9[1];
    v9[1] = 0;
    void v21[2] = v9[2];
    void v9[2] = 0;
    v21[3] = v9[3];
    v9[3] = 0;
    v21[4] = v9[4];
    v9[4] = 0;
    if (v22)
    {
      unint64_t v22 = v19 % *(unsigned int *)(a5 + 40);
      uint64_t v24 = *(unsigned int *)(*(void *)(a5 + 24) + 4 * v22);
      if (v24 != 0x7FFFFFFF)
      {
        uint64_t v46 = *(void *)(a5 + 32);
        if (*(void *)(v46 + 24 * v24 + 8) == v19) {
          goto LABEL_17;
        }
        while (1)
        {
          LODWORD(v24) = *(_DWORD *)(v46 + 24 * v24) & 0x7FFFFFFF;
          if (v24 == 0x7FFFFFFF) {
            break;
          }
          if (*(void *)(v46 + 24 * v24 + 8) == v19) {
            goto LABEL_17;
          }
        }
      }
    }
    uint64_t v25 = *(unsigned int *)(a5 + 52);
    if (v25 == 0x7FFFFFFF)
    {
      uint64_t v25 = *(unsigned int *)(a5 + 48);
      int v26 = v25;
      if (v25 == *(_DWORD *)(a5 + 40))
      {
        re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(a5 + 16, 2 * *(_DWORD *)(a5 + 44));
        LODWORD(v22) = v19 % *(unsigned int *)(a5 + 40);
        int v26 = *(_DWORD *)(a5 + 48);
      }
      *(_DWORD *)(a5 + 4re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = v26 + 1;
      uint64_t v27 = *(void *)(a5 + 32);
      int v28 = *(_DWORD *)(v27 + 24 * v25);
    }
    else
    {
      uint64_t v27 = *(void *)(a5 + 32);
      int v28 = *(_DWORD *)(v27 + 24 * v25);
      *(_DWORD *)(a5 + 52) = v28 & 0x7FFFFFFF;
    }
    uint64_t v29 = 24 * v25;
    *(_DWORD *)(v27 + v29) = v28 | 0x80000000;
    *(_DWORD *)(*(void *)(a5 + 32) + v29) = *(_DWORD *)(*(void *)(a5 + 32) + 24 * v25) & 0x80000000 | *(_DWORD *)(*(void *)(a5 + 24) + 4 * v22);
    *(void *)(*(void *)(a5 + 32) + 24 * v25 + re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = v19;
    *(void *)(*(void *)(a5 + 32) + 24 * v25 + 16) = v21;
    *(_DWORD *)(*(void *)(a5 + 24) + 4 * v22) = v25;
    ++*(_DWORD *)(a5 + 44);
    ++*(_DWORD *)(a5 + 56);
LABEL_17:
    unint64_t v101 = (unint64_t)&unk_26E71F240;
    *(void *)long long v103 = 0;
    *(void *)&v103[8] = 0;
    LODWORD(v102) = 3;
    *((void *)&v102 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 1065353216;
    re::ObjCObject::operator=((id *)v103, (id *)(a1 + 1832));
    uint64_t v30 = NS::SharedPtr<MTL::Texture>::operator=((void **)&v103[8], (void **)(a1 + 1840));
    *(void *)&v103[16] = a1 + 1848;
    unint64_t v31 = (unint64_t)"N2re25ARSegmentationExecuteDataE";
    if (((unint64_t)"N2re25ARSegmentationExecuteDataE" & 0x8000000000000000) != 0)
    {
      uint64_t v32 = (unsigned __int8 *)((unint64_t)"N2re25ARSegmentationExecuteDataE" & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v33 = 5381;
      do
      {
        unint64_t v31 = v33;
        unsigned int v34 = *v32++;
        uint64_t v33 = (33 * v33) ^ v34;
      }
      while (v34);
    }
    unint64_t v35 = (v18 + (v31 << 6) + (v31 >> 2)) ^ v31;
    uint64_t v36 = re::globalAllocators((re *)v30);
    uint64_t v37 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v36[2] + 32))(v36[2], 48, 8);
    *(void *)uint64_t v37 = &unk_26E71F240;
    *(_OWORD *)(v37 + re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = v102;
    long long v38 = *(_OWORD *)v103;
    *(void *)long long v103 = 0;
    *(_OWORD *)(v37 + 24) = v38;
    *(void *)&v103[8] = 0;
    *(void *)(v37 + 40) = *(void *)&v103[16];
    unint64_t v39 = *v23;
    if (*v23)
    {
      unint64_t v39 = v35 % *(unsigned int *)(a5 + 40);
      uint64_t v40 = *(unsigned int *)(*(void *)(a5 + 24) + 4 * v39);
      if (v40 != 0x7FFFFFFF)
      {
        uint64_t v47 = *(void *)(a5 + 32);
        if (*(void *)(v47 + 24 * v40 + 8) == v35)
        {
LABEL_36:

          goto LABEL_37;
        }
        while (1)
        {
          LODWORD(v40) = *(_DWORD *)(v47 + 24 * v40) & 0x7FFFFFFF;
          if (v40 == 0x7FFFFFFF) {
            break;
          }
          if (*(void *)(v47 + 24 * v40 + 8) == v35) {
            goto LABEL_36;
          }
        }
      }
    }
    uint64_t v41 = *(unsigned int *)(a5 + 52);
    if (v41 == 0x7FFFFFFF)
    {
      uint64_t v41 = *(unsigned int *)(a5 + 48);
      int v42 = v41;
      if (v41 == *(_DWORD *)(a5 + 40))
      {
        re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(a5 + 16, 2 * *(_DWORD *)(a5 + 44));
        LODWORD(v39) = v35 % *(unsigned int *)(a5 + 40);
        int v42 = *(_DWORD *)(a5 + 48);
      }
      *(_DWORD *)(a5 + 4re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = v42 + 1;
      uint64_t v43 = *(void *)(a5 + 32);
      int v44 = *(_DWORD *)(v43 + 24 * v41);
    }
    else
    {
      uint64_t v43 = *(void *)(a5 + 32);
      int v44 = *(_DWORD *)(v43 + 24 * v41);
      *(_DWORD *)(a5 + 52) = v44 & 0x7FFFFFFF;
    }
    uint64_t v45 = 24 * v41;
    *(_DWORD *)(v43 + v45) = v44 | 0x80000000;
    *(_DWORD *)(*(void *)(a5 + 32) + v45) = *(_DWORD *)(*(void *)(a5 + 32) + 24 * v41) & 0x80000000 | *(_DWORD *)(*(void *)(a5 + 24) + 4 * v39);
    *(void *)(*(void *)(a5 + 32) + 24 * v41 + re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = v35;
    *(void *)(*(void *)(a5 + 32) + 24 * v41 + 16) = v37;
    *(_DWORD *)(*(void *)(a5 + 24) + 4 * v39) = v41;
    ++*(_DWORD *)(a5 + 44);
    ++*(_DWORD *)(a5 + 56);
    if (*(void *)&v103[8])
    {

      *(void *)&v103[8] = 0;
    }
    goto LABEL_36;
  }
LABEL_37:
  if (re::ecs2::ShadowHelper::enableShadowTechniqueLogs(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::ShadowHelper::enableShadowTechniqueLogs(void)::onceToken, &__block_literal_global_4);
  }
  if (re::ecs2::ShadowHelper::enableShadowTechniqueLogs(void)::g_enableShadowTechniqueLogs)
  {
    if (*(unsigned char *)(a1 + 1164))
    {
      long long v48 = *re::graphicsLogObjects((re *)a1);
      if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v10re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
        unint64_t v49 = "Grounding shadow technique used : Raytraced";
LABEL_50:
        _os_log_impl(&dword_233120000, v48, OS_LOG_TYPE_DEFAULT, v49, (uint8_t *)&v101, 2u);
      }
    }
    else
    {
      uint64_t v50 = *(void *)(a4 + 336);
      if (!v50 || !*(unsigned char *)(v50 + 6))
      {
        if (re::ecs2::ShadowHelper::forceEnableMeshProjectiveShadows(void)::onceToken != -1) {
          dispatch_once(&re::ecs2::ShadowHelper::forceEnableMeshProjectiveShadows(void)::onceToken, &__block_literal_global_15);
        }
        if (!re::ecs2::ShadowHelper::forceEnableMeshProjectiveShadows(void)::g_forceEnableMeshProjectiveShadows)
        {
          if (!*(unsigned char *)(a1 + 1165)) {
            goto LABEL_51;
          }
          long long v48 = *re::graphicsLogObjects((re *)a1);
          if (!os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_51;
          }
          LOWORD(v10re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
          unint64_t v49 = "Grounding shadow technique used : Planar Projective";
          goto LABEL_50;
        }
      }
      long long v48 = *re::graphicsLogObjects((re *)a1);
      if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v10re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
        unint64_t v49 = "Grounding shadow technique used : Projective Mesh";
        goto LABEL_50;
      }
    }
  }
LABEL_51:
  uint64_t v51 = *(unsigned char **)(a4 + 336);
  if (v51)
  {
    *(unsigned char *)(a1 + 1169) = v51[2];
    int v52 = v51[3];
    *(unsigned char *)(a1 + 1170) = v52;
    BOOL v53 = !v52 || v51[4] == 0;
    BOOL v54 = !v53;
    *(unsigned char *)(a1 + 117re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = v54;
    uint64_t v55 = *(void *)(a1 + 800);
    if (v55)
    {
      re::AssetHandle::loadNow(v55, 0);
      if (!*v51)
      {
        LOBYTE(v56) = v51[6];
        if (!(_BYTE)v56) {
          goto LABEL_66;
        }
      }
      int v56 = *(unsigned __int8 *)(a1 + 1171);
      if (*(unsigned char *)(a1 + 1171)) {
        int v56 = 4 * (v51[1] == 0);
      }
      if (*v51 || v51[6])
      {
        BOOL v57 = v56 == 0;
        char v58 = v56;
      }
      else
      {
LABEL_66:
        BOOL v57 = 0;
        char v58 = v56;
        v56 &= 4u;
      }
      unsigned int v59 = v58 & 4;
      if (v56)
      {
        if (*(unsigned char *)(a1 + 1166)) {
          unsigned __int8 v60 = 8;
        }
        else {
          unsigned __int8 v60 = 8 * *(unsigned char *)(a1 + 1167);
        }
      }
      else
      {
        unsigned __int8 v60 = 0;
      }
      char v61 = v59 | v60 | v57;
      char v62 = v51[6];
      if (v62) {
        char v62 = 2 * v51[5];
      }
      unsigned __int8 v63 = v62 | (16 * v51[1]) | v61;
      if (((v63 ^ *(unsigned char *)(a3 + 120)) & 0x3F) != 0)
      {
        uint64_t v64 = *(void *)(a1 + 800);
        if (v64)
        {
          unsigned int v65 = atomic_load((unsigned int *)(v64 + 704));
          if (v65 == 2)
          {
            ++*(_DWORD *)(*(void *)(a1 + 800) + 260);
            uint64_t v66 = re::AssetHandle::loadedAsset<re::RenderGraphAsset>((re::RenderGraphAsset *)(a1 + 792));
            if (v66)
            {
              unint64_t v67 = (re::RenderGraphFile *)(v66 + 8);
              if (v51[3])
              {
                unint64_t v101 = 0xA347EFBC0FB083E8;
                *(void *)&long long v102 = "ForceClearSceneUnderstandingMeshShadowSingleChannel";
                unsigned int v68 = v59 >> 2;
                LOBYTE(v112) = v68;
                re::RenderGraphFile::setRuntimeNodeSetting<BOOL>((re::RenderGraphFile *)(v66 + 8), (const re::StringID *)&v101, "Enabled", (char *)&v112);
                re::StringID::destroyString((re::StringID *)&v101);
                unint64_t v101 = 0x2A295CF77075A36CLL;
                *(void *)&long long v102 = "CompositeSceneUnderstandingShadowsNode";
                LOBYTE(v112) = v68;
                re::RenderGraphFile::setRuntimeNodeSetting<BOOL>(v67, (const re::StringID *)&v101, "Enabled", (char *)&v112);
                re::StringID::destroyString((re::StringID *)&v101);
                unint64_t v101 = 0x696F5EF842740C56;
                *(void *)&long long v102 = "CompositedMeshShadowProjectedPatchReceiverNode";
                LOBYTE(v112) = (v63 & 6) == 6;
                re::RenderGraphFile::setRuntimeNodeSetting<BOOL>(v67, (const re::StringID *)&v101, "Enabled", (char *)&v112);
                re::StringID::destroyString((re::StringID *)&v101);
                unint64_t v101 = 0x378766A6B9EC9AELL;
                *(void *)&long long v102 = "CompositedSceneUnderstandingShadowNode";
                LOBYTE(v112) = (v63 & 6) == 4;
                re::RenderGraphFile::setRuntimeNodeSetting<BOOL>(v67, (const re::StringID *)&v101, "Enabled", (char *)&v112);
                re::StringID::destroyString((re::StringID *)&v101);
              }
              unint64_t v101 = 0x9AB5F11FB4FA0048;
              *(void *)&long long v102 = "SceneUnderstandingOcclusionAndShadowNode";
              LOBYTE(v112) = (v63 & 3) == 1;
              re::RenderGraphFile::setRuntimeNodeSetting<BOOL>(v67, (const re::StringID *)&v101, "Enabled", (char *)&v112);
              re::StringID::destroyString((re::StringID *)&v101);
              unint64_t v101 = 0xF5A2D353F87D6B9CLL;
              *(void *)&long long v102 = "MeshShadowProjectedPatchReceiverNode";
              LOBYTE(v112) = (v63 & 3) == 3;
              re::RenderGraphFile::setRuntimeNodeSetting<BOOL>(v67, (const re::StringID *)&v101, "Enabled", (char *)&v112);
              re::StringID::destroyString((re::StringID *)&v101);
              unint64_t v101 = 0xF7F248B7F1C26F4;
              *(void *)&long long v102 = "PatchShadowReceiverDepthOnlyNode";
              LOBYTE(v112) = (v63 & 3) == 3;
              re::RenderGraphFile::setRuntimeNodeSetting<BOOL>(v67, (const re::StringID *)&v101, "Enabled", (char *)&v112);
              re::StringID::destroyString((re::StringID *)&v101);
              unint64_t v101 = 0x95DF29AA01C3F5E4;
              *(void *)&long long v102 = "SceneUnderstandingWireframeNode";
              LOBYTE(v112) = v63 >> 4;
              re::RenderGraphFile::setRuntimeNodeSetting<BOOL>(v67, (const re::StringID *)&v101, "Enabled", (char *)&v112);
              re::StringID::destroyString((re::StringID *)&v101);
              unint64_t v101 = 0x2B2EFFC92CCF4F14;
              *(void *)&long long v102 = "SceneUnderstandingShadowsDepthNode";
              LOBYTE(v112) = v60 >> 3;
              re::RenderGraphFile::setRuntimeNodeSetting<BOOL>(v67, (const re::StringID *)&v101, "Enabled", (char *)&v112);
              re::StringID::destroyString((re::StringID *)&v101);
            }
          }
        }
      }
      *(unsigned char *)(a3 + 120) = v63;
    }
  }
  uint64_t v69 = *(void *)(a4 + 344);
  if (v69)
  {
    unint64_t v101 = (unint64_t)&unk_26E703C30;
    LOBYTE(v102) = *(unsigned char *)(v69 + 8);
    *((void *)&v102 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = *(id *)(v69 + 16);
    id v70 = *(id *)(v69 + 24);
    long long v71 = *(_OWORD *)(v69 + 48);
    *(_OWORD *)&v103[8] = *(_OWORD *)(v69 + 32);
    long long v104 = v71;
    long long v72 = *(_OWORD *)(v69 + 64);
    long long v73 = *(_OWORD *)(v69 + 80);
    long long v74 = *(_OWORD *)(v69 + 112);
    long long v107 = *(_OWORD *)(v69 + 96);
    long long v108 = v74;
    long long v105 = v72;
    long long v106 = v73;
    long long v75 = *(_OWORD *)(v69 + 128);
    long long v76 = *(_OWORD *)(v69 + 144);
    long long v77 = *(_OWORD *)(v69 + 160);
    *(_OWORD *)&v111[10] = *(_OWORD *)(v69 + 170);
    long long v110 = v76;
    *(_OWORD *)int v111 = v77;
    long long v109 = v75;
    *(void *)long long v103 = v70;
    *(void *)&v103[8] = a1 + 1664;
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9CEE0, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_26AF9CEE0))
    {
      MurmurHash3_x64_128((uint64_t)"GuidedFilterOcclusionData", 25, 0, &v112);
      unint64_t v100 = (v113 + (v112 << 6) + (v112 >> 2) - 0x61C8864680B583E9) ^ v112;
      MurmurHash3_x64_128((uint64_t)"GuidedFilterOcclusion", 21, 0, &v112);
      qword_26AF9CED8 = ((v100 << 6)
                       + (v100 >> 2)
                       + ((v113 + (v112 << 6) + (v112 >> 2) - 0x61C8864680B583E9) ^ v112)
                       - 0x61C8864680B583E9) ^ v100;
      __cxa_guard_release(&qword_26AF9CEE0);
    }
    if (re::RenderGraphDataStore::tryGet<re::SceneUnderstandingGuidedFilterOcclusionData>(a5, qword_26AF9CED8)) {
      goto LABEL_96;
    }
    unint64_t v78 = (unint64_t)"N2re43SceneUnderstandingGuidedFilterOcclusionDataE";
    if (((unint64_t)"N2re43SceneUnderstandingGuidedFilterOcclusionDataE" & 0x8000000000000000) != 0)
    {
      uint64_t v79 = (unsigned __int8 *)((unint64_t)"N2re43SceneUnderstandingGuidedFilterOcclusionDataE" & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v80 = 5381;
      do
      {
        unint64_t v78 = v80;
        unsigned int v81 = *v79++;
        uint64_t v80 = (33 * v80) ^ v81;
      }
      while (v81);
    }
    unint64_t v82 = (qword_26AF9CED8 + (v78 << 6) + (v78 >> 2) - 0x61C8864680B583E9) ^ v78;
    uint64_t v83 = re::globalAllocators(0);
    uint64_t v84 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v83[2] + 32))(v83[2], 192, 16);
    *(void *)uint64_t v84 = &unk_26E703C30;
    *(unsigned char *)(v84 + re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = v102;
    *(void *)(v84 + 16) = *((void *)&v102 + 1);
    *(void *)(v84 + 24) = *(void *)v103;
    long long v85 = v104;
    *(_OWORD *)(v84 + 32) = *(_OWORD *)&v103[8];
    *(_OWORD *)(v84 + 4re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = v85;
    long long v86 = v108;
    long long v88 = v105;
    long long v87 = v106;
    *(_OWORD *)(v84 + 96) = v107;
    *(_OWORD *)(v84 + 112) = v86;
    *(_OWORD *)(v84 + 64) = v88;
    *(_OWORD *)(v84 + 80) = v87;
    long long v90 = v110;
    long long v89 = *(_OWORD *)v111;
    long long v91 = v109;
    *(_OWORD *)(v84 + 170) = *(_OWORD *)&v111[10];
    *(_OWORD *)(v84 + 144) = v90;
    *(_OWORD *)(v84 + 160) = v89;
    *(_OWORD *)(v84 + 12re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = v91;
    unint64_t v92 = *(void *)(a5 + 16);
    *((void *)&v102 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
    *(void *)long long v103 = 0;
    if (v92)
    {
      unint64_t v92 = v82 % *(unsigned int *)(a5 + 40);
      uint64_t v93 = *(unsigned int *)(*(void *)(a5 + 24) + 4 * v92);
      if (v93 != 0x7FFFFFFF)
      {
        uint64_t v99 = *(void *)(a5 + 32);
        if (*(void *)(v99 + 24 * v93 + 8) == v82)
        {
LABEL_96:
          if (*(void *)v103)
          {

            *(void *)long long v103 = 0;
          }
          if (*((void *)&v102 + 1)) {

          }
          return;
        }
        while (1)
        {
          LODWORD(v93) = *(_DWORD *)(v99 + 24 * v93) & 0x7FFFFFFF;
          if (v93 == 0x7FFFFFFF) {
            break;
          }
          if (*(void *)(v99 + 24 * v93 + 8) == v82) {
            goto LABEL_96;
          }
        }
      }
    }
    uint64_t v94 = *(unsigned int *)(a5 + 52);
    if (v94 == 0x7FFFFFFF)
    {
      uint64_t v94 = *(unsigned int *)(a5 + 48);
      int v95 = v94;
      if (v94 == *(_DWORD *)(a5 + 40))
      {
        re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(a5 + 16, 2 * *(_DWORD *)(a5 + 44));
        LODWORD(v92) = v82 % *(unsigned int *)(a5 + 40);
        int v95 = *(_DWORD *)(a5 + 48);
      }
      *(_DWORD *)(a5 + 4re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = v95 + 1;
      uint64_t v96 = *(void *)(a5 + 32);
      int v97 = *(_DWORD *)(v96 + 24 * v94);
    }
    else
    {
      uint64_t v96 = *(void *)(a5 + 32);
      int v97 = *(_DWORD *)(v96 + 24 * v94);
      *(_DWORD *)(a5 + 52) = v97 & 0x7FFFFFFF;
    }
    uint64_t v98 = 24 * v94;
    *(_DWORD *)(v96 + v9re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = v97 | 0x80000000;
    *(_DWORD *)(*(void *)(a5 + 32) + v9re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = *(_DWORD *)(*(void *)(a5 + 32) + 24 * v94) & 0x80000000 | *(_DWORD *)(*(void *)(a5 + 24) + 4 * v92);
    *(void *)(*(void *)(a5 + 32) + 24 * v94 + re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = v82;
    *(void *)(*(void *)(a5 + 32) + 24 * v94 + 16) = v84;
    *(_DWORD *)(*(void *)(a5 + 24) + 4 * v92) = v94;
    ++*(_DWORD *)(a5 + 44);
    ++*(_DWORD *)(a5 + 56);
    goto LABEL_96;
  }
}

uint64_t re::RenderGraphAREmitter::emitFrameContext(re::RealityEmitterBase *a1, void *a2, re::RenderFrame *this, re *a4)
{
  re::RenderFrame::emitGraph(this, "UploadMultiSceneConstants", "RenderFrame");
  uint64_t v9 = a2[2];
  if (v9)
  {
    unint64_t v10 = (void *)a2[3];
    uint64_t v11 = 464 * v9;
    do
    {
      re::RealityEmitterBase::emitDeformerGraph((uint64_t)a1, (uint64_t)v10, this, (uint64_t)a4);
      re::RealityEmitterBase::emitVFXSimulationGraph((uint64_t)a1, v10, this, (uint64_t)a4);
      v10 += 58;
      v11 -= 464;
    }
    while (v11);
  }
  uint64_t v12 = a2[12];
  if (v12 && *(void *)(v12 + 16)) {
    re::RenderFrame::emitGraph(this, "MipmapGenerationContext", "RenderFrame");
  }
  uint64_t v13 = a2[13];
  if (v13 && *(void *)(v13 + 16)) {
    re::RenderFrame::emitGraph(this, "BlurGenerationContext", "RenderFrame");
  }
  re::RealityEmitterBase::emitProbeWriteGraph(a1, this, v8);
  re::RenderFrame::emitGraph(this, "ProjectiveMeshShadow", "RenderFrame");
  if (*((unsigned char *)a1 + 1165)) {
    re::RealityEmitterBase::emitPlanarProjectiveShadowGraph((uint64_t)a1, a2, this, (uint64_t)a4);
  }
  int v28 = 0;
  uint64_t v14 = a2[2];
  if (v14)
  {
    uint64_t v15 = a2[3];
    uint64_t v16 = 464 * v14;
    do
    {
      re::RealityEmitterBase::emitSingleGraphShadows((uint64_t)a1, v15, this, (uint64_t)a4, &v28);
      v15 += 464;
      v16 -= 464;
    }
    while (v16);
    uint64_t v17 = a2[2];
    if (v17)
    {
      unint64_t v18 = (re::Allocator **)a2[3];
      uint64_t v19 = 464 * v17;
      do
      {
        re::RealityEmitterBase::emitFilterMapGraph((uint64_t)a1, v18, (uint64_t)this, (uint64_t)a4);
        v18 += 58;
        v19 -= 464;
      }
      while (v19);
      uint64_t v20 = a2[2];
      if (v20)
      {
        uint64_t v21 = a2[3];
        uint64_t v22 = 464 * v20;
        do
        {
          re::RealityEmitterBase::emitVisualProxyHighFidelityGraph((uint64_t)a1, v21, this, a4);
          v21 += 464;
          v22 -= 464;
        }
        while (v22);
        uint64_t v24 = a2[2];
        if (v24)
        {
          uint64_t v25 = a2[3];
          uint64_t v26 = 464 * v24;
          do
          {
            re::RealityEmitterBase::emitCameraGraphs(a1, a2, v25, (uint64_t)this, (uint64_t)a4, 0, v23);
            v25 += 464;
            v26 -= 464;
          }
          while (v26);
        }
      }
    }
  }
  return re::RealityEmitterBase::pushPipelineCompilationDataToDataStore(a1, this, a4);
}

uint64_t re::RenderGraphAREmitter::afterCameraViewHandler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, __n128 *a7)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  if (a7->n128_u64[1]) {
    uint64_t v12 = (const char *)a7[1].n128_u64[0];
  }
  else {
    uint64_t v12 = &a7->n128_i8[9];
  }
  size_t v13 = strlen(v12);
  if (v13)
  {
    MurmurHash3_x64_128((uint64_t)v12, v13, 0, &v40);
    unint64_t v14 = (v41 - 0x61C8864680B583E9 + (v40 << 6) + (v40 >> 2)) ^ v40;
  }
  else
  {
    unint64_t v14 = 0;
  }
  re::CameraView::makeCameraData((uint64_t)a7, a4[1], a3, (uint64_t)&v40);
  re::CameraView::makeMeshLodSelectInputData(a7, v38);
  if (*(unsigned char *)(a1 + 1169))
  {
    uint64_t v16 = &qword_26AF9CF38;
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9CF40, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_26AF9CF40))
    {
      uint64_t v17 = "DepthFeathering";
LABEL_45:
      *uint64_t v16 = re::hashString((re *)v17, v31);
      __cxa_guard_release(v16 + 1);
      goto LABEL_10;
    }
    uint64_t v17 = "DepthFeathering";
    goto LABEL_10;
  }
  if (*(unsigned char *)(a1 + 1170) && *(unsigned char *)(a1 + 1171))
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9CF50, memory_order_acquire) & 1) == 0)
    {
      unint64_t v35 = (re *)__cxa_guard_acquire(&qword_26AF9CF50);
      if (v35)
      {
        qword_26AF9CF48 = re::getCombinedScopeHash(v35, v36, v37);
        __cxa_guard_release(&qword_26AF9CF50);
      }
    }
    if (re::RenderGraphDataStore::tryGet<re::SceneUnderstandingGuidedFilterOcclusionData>(a5, qword_26AF9CF48))
    {
      uint64_t v16 = &qword_26AF9CF58;
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9CF60, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26AF9CF60))
      {
        uint64_t v17 = "GuidedFilterOcclusion";
        goto LABEL_45;
      }
      uint64_t v17 = "GuidedFilterOcclusion";
LABEL_10:
      uint64_t v18 = (v14 - 0x61C8864680B583E9 + (*v16 << 6) + ((unint64_t)*v16 >> 2)) ^ *v16;
      re::RenderGraphDataStore::add<re::CameraData,re::CameraData&>(a5, v18, (uint64_t)&v40);
      re::RenderGraphDataStore::add<re::MeshLodSelectInputData,re::MeshLodSelectInputData&>(a5, v18, (uint64_t)v38);
      re::RealityEmitterBase::addSceneDataToDataStore(a1, a3, v18, a5);
      re::RenderFrame::emitGraph((re::RenderFrame *)a4, v17, v12);
    }
  }
  uint64_t v19 = *(void *)(a1 + 872);
  if (v19)
  {
    unsigned int v20 = atomic_load((unsigned int *)(v19 + 704));
    if (v20 == 2) {
      re::AssetHandle::internalUpdateImmutableAsset<re::RenderGraphAsset,re::RenderGraphAREmitter::afterCameraViewHandler(re::RenderFrameContext &,re::RenderSceneContext &,re::RenderFrame &,re::RenderGraphDataStore &,char const*,re::CameraView const&)::$_0>((void *)(a1 + 864), (uint64_t)a7);
    }
  }
  uint64_t v21 = *(void *)(a1 + 920);
  if (v21)
  {
    unsigned int v22 = atomic_load((unsigned int *)(v21 + 704));
    if (v22 == 2) {
      re::AssetHandle::internalUpdateImmutableAsset<re::RenderGraphAsset,re::RenderGraphAREmitter::afterCameraViewHandler(re::RenderFrameContext &,re::RenderSceneContext &,re::RenderFrame &,re::RenderGraphDataStore &,char const*,re::CameraView const&)::$_0>((void *)(a1 + 912), (uint64_t)a7);
    }
  }
  uint64_t v23 = *(void *)(a1 + 1016);
  if (v23)
  {
    unsigned int v24 = atomic_load((unsigned int *)(v23 + 704));
    if (v24 == 2) {
      re::AssetHandle::internalUpdateImmutableAsset<re::RenderGraphAsset,re::RenderGraphAREmitter::afterCameraViewHandler(re::RenderFrameContext &,re::RenderSceneContext &,re::RenderFrame &,re::RenderGraphDataStore &,char const*,re::CameraView const&)::$_0>((void *)(a1 + 1008), (uint64_t)a7);
    }
  }
  uint64_t v25 = *(void *)(a1 + 1040);
  if (v25)
  {
    unsigned int v26 = atomic_load((unsigned int *)(v25 + 704));
    if (v26 == 2) {
      re::AssetHandle::internalUpdateImmutableAsset<re::RenderGraphAsset,re::RenderGraphAREmitter::afterCameraViewHandler(re::RenderFrameContext &,re::RenderSceneContext &,re::RenderFrame &,re::RenderGraphDataStore &,char const*,re::CameraView const&)::$_0>((void *)(a1 + 1032), (uint64_t)a7);
    }
  }
  if (!a7[21].n128_u8[12])
  {
    re::CameraView::makeViewportPercentData((re::CameraView *)a7, v15, (uint64_t)v39);
    if (*(unsigned char *)(a1 + 1166))
    {
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9CF70, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26AF9CF70))
      {
        qword_26AF9CF68 = re::hashString((re *)"DepthOfField", v32);
        __cxa_guard_release(&qword_26AF9CF70);
      }
      unint64_t v27 = (v14 - 0x61C8864680B583E9 + (qword_26AF9CF68 << 6) + ((unint64_t)qword_26AF9CF68 >> 2)) ^ qword_26AF9CF68;
      re::RenderGraphDataStore::add<re::CameraData,re::CameraData&>(a5, v27, (uint64_t)&v40);
      re::RenderGraphDataStore::add<re::ViewportPercentData,re::ViewportPercentData&>(a5, v27, v39);
      re::RealityEmitterBase::addSceneDataToDataStore(a1, a3, v27, a5);
      re::RenderFrame::emitGraph((re::RenderFrame *)a4, "DepthOfField", v12);
    }
    if (*(unsigned char *)(a1 + 1167))
    {
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9CF80, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26AF9CF80))
      {
        qword_26AF9CF78 = re::hashString((re *)"MotionBlur", v33);
        __cxa_guard_release(&qword_26AF9CF80);
      }
      unint64_t v28 = (v14 - 0x61C8864680B583E9 + (qword_26AF9CF78 << 6) + ((unint64_t)qword_26AF9CF78 >> 2)) ^ qword_26AF9CF78;
      re::RenderGraphDataStore::add<re::CameraData,re::CameraData&>(a5, v28, (uint64_t)&v40);
      re::RenderGraphDataStore::add<re::ViewportPercentData,re::ViewportPercentData&>(a5, v28, v39);
      re::RealityEmitterBase::addSceneDataToDataStore(a1, a3, v28, a5);
      re::RenderFrame::emitGraph((re::RenderFrame *)a4, "MotionBlur", v12);
    }
    if (*(unsigned char *)(a1 + 1168))
    {
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9CF90, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26AF9CF90))
      {
        qword_26AF9CF88 = re::hashString((re *)"PostProcessCombined", v34);
        __cxa_guard_release(&qword_26AF9CF90);
      }
      unint64_t v29 = (v14 - 0x61C8864680B583E9 + (qword_26AF9CF88 << 6) + ((unint64_t)qword_26AF9CF88 >> 2)) ^ qword_26AF9CF88;
      re::RenderGraphDataStore::add<re::ViewportPercentData,re::ViewportPercentData&>(a5, v29, v39);
      re::RealityEmitterBase::addSceneDataToDataStore(a1, a3, v29, a5);
      re::RenderFrame::emitGraph((re::RenderFrame *)a4, "PostProcessCombined", v12);
      *(unsigned char *)(*(void *)(*(void *)(a4[1] + 104) + 1648) + 16) = 0;
    }
  }
  re::RealityEmitterBase::emitCustomPostProcessGraph<re::CameraView>(a1, a3, (uint64_t)a4, a7);
  uint64_t v47 = 0;
  ++v48;
  uint64_t v45 = 0;
  ++v46;
  uint64_t v43 = 0;
  ++v44;
  uint64_t result = v41;
  if (v41)
  {
    if (v42) {
      return (*(uint64_t (**)(void))(*(void *)v41 + 40))();
    }
  }
  return result;
}

uint64_t re::RenderGraphDataStore::add<re::CameraData,re::CameraData&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v20[2] = *MEMORY[0x263EF8340];
  uint64_t v18 = 0;
  unint64_t v19 = 0;
  {
    re::introspect<re::CameraData>(void)::info = (_UNKNOWN *)re::introspect_CameraData(0);
  }
  uint64_t v18 = re::introspect<re::CameraData>(void)::info;
  size_t v6 = strlen(*((const char **)re::introspect<re::CameraData>(void)::info + 6));
  if (v6)
  {
    MurmurHash3_x64_128(*((void *)re::introspect<re::CameraData>(void)::info + 6), v6, 0, v20);
    unint64_t v7 = (v20[1] - 0x61C8864680B583E9 + (v20[0] << 6) + (v20[0] >> 2)) ^ v20[0];
  }
  else
  {
    unint64_t v7 = 0;
  }
  unint64_t v19 = v7;
  re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addOrReplace<re::IntrospectionStructure const*&>(a1 + 176, &v19, &v18);
  v20[0] = (a2 - 0x61C8864680B583E9 + (v19 << 6) + (v19 >> 2)) ^ v19;
  uint64_t v8 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 528, 16);
  *(void *)uint64_t v8 = &unk_26E70E230;
  re::DynamicString::DynamicString((re::DynamicString *)(v8 + 8), (const re::DynamicString *)(a3 + 8));
  *(void *)(v8 + 4re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = 0;
  *(_DWORD *)(v8 + 56) = 0;
  uint64_t v9 = *(void *)(a3 + 48);
  memcpy((void *)(v8 + 64), (const void *)(a3 + 64), 32 * v9);
  *(void *)(v8 + 4re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = v9;
  *(void *)(v8 + 12re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = 0;
  *(_DWORD *)(v8 + 136) = 0;
  uint64_t v10 = *(void *)(a3 + 128);
  memcpy((void *)(v8 + 144), (const void *)(a3 + 144), v10 << 6);
  *(void *)(v8 + 12re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = v10;
  *(void *)(v8 + 272) = 0;
  *(_DWORD *)(v8 + 280) = 0;
  uint64_t v11 = *(void *)(a3 + 272);
  memcpy((void *)(v8 + 288), (const void *)(a3 + 288), v11 << 6);
  *(void *)(v8 + 272) = v11;
  long long v13 = *(_OWORD *)(a3 + 432);
  long long v12 = *(_OWORD *)(a3 + 448);
  long long v14 = *(_OWORD *)(a3 + 416);
  *(_OWORD *)(v8 + 45re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = *(_OWORD *)(a3 + 458);
  *(_OWORD *)(v8 + 432) = v13;
  *(_OWORD *)(v8 + 44re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = v12;
  *(_OWORD *)(v8 + 416) = v14;
  int v15 = *(unsigned __int8 *)(a3 + 476);
  *(unsigned char *)(v8 + 476) = v15;
  if (v15) {
    *(_DWORD *)(v8 + 480) = *(_DWORD *)(a3 + 480);
  }
  long long v16 = *(_OWORD *)(a3 + 484);
  *(_OWORD *)(v8 + 497) = *(_OWORD *)(a3 + 497);
  *(_OWORD *)(v8 + 484) = v16;
  uint64_t v18 = (void *)v8;
  return re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addNew<re::CameraData *>(a1 + 64, v20, &v18);
}

void *re::AssetHandle::internalUpdateImmutableAsset<re::RenderGraphAsset,re::RenderGraphAREmitter::afterCameraViewHandler(re::RenderFrameContext &,re::RenderSceneContext &,re::RenderFrame &,re::RenderGraphDataStore &,char const*,re::CameraView const&)::$_0>(void *result, uint64_t a2)
{
  uint64_t v2 = result[1];
  if (v2)
  {
    unsigned int v3 = atomic_load((unsigned int *)(v2 + 704));
    if (v3 == 2)
    {
      ++*(_DWORD *)(result[1] + 260);
      uint64_t result = (void *)re::AssetHandle::loadedAsset<re::RenderGraphAsset>((re::RenderGraphAsset *)result);
      if (result)
      {
        unsigned int v5 = (re::RenderGraphFile *)(result + 1);
        if (*(unsigned char *)(a2 + 349)) {
          size_t v6 = "arKitPassthroughDisabledTechnique";
        }
        else {
          size_t v6 = "arKitPassthroughTechnique";
        }
        v7[0] = 0xBEC9DE826D75EA6;
        v7[1] = "Fullscreen_ARKitPassthrough";
        re::RenderGraphFile::setRuntimeNodeSetting<re::DynamicString>(v5, (const re::StringID *)v7, "techniqueName", (char *)&v8);
        re::StringID::destroyString((re::StringID *)v7);
        uint64_t result = v8;
        if (v8)
        {
          if (v9) {
            return (void *)(*(uint64_t (**)(void))(*v8 + 40))();
          }
        }
      }
    }
  }
  return result;
}

uint64_t re::RenderGraphDataStore::add<re::ViewportPercentData,re::ViewportPercentData&>(uint64_t a1, uint64_t a2, void *a3)
{
  unint64_t v4 = (unint64_t)"N2re19ViewportPercentDataE";
  if (((unint64_t)"N2re19ViewportPercentDataE" & 0x8000000000000000) != 0)
  {
    unsigned int v5 = (unsigned __int8 *)((unint64_t)"N2re19ViewportPercentDataE" & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v6 = 5381;
    do
    {
      unint64_t v4 = v6;
      unsigned int v7 = *v5++;
      uint64_t v6 = (33 * v6) ^ v7;
    }
    while (v7);
  }
  uint64_t v13 = (a2 + (v4 << 6) + (v4 >> 2) - 0x61C8864680B583E9) ^ v4;
  uint64_t v8 = a1 + 64;
  uint64_t v9 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 80, 16);
  *(void *)uint64_t v9 = &unk_26E710FD0;
  *(void *)(v9 + 16) = 0;
  *(_DWORD *)(v9 + 24) = 0;
  uint64_t v10 = a3[2];
  memcpy((void *)(v9 + 32), a3 + 4, 16 * v10);
  *(void *)(v9 + 16) = v10;
  *(void *)(v9 + 64) = a3[8];
  uint64_t v12 = v9;
  return re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addNew<re::CameraData *>(v8, (unint64_t *)&v13, &v12);
}

void re::RenderGraphAREmitter::afterCameraMultiViewHandler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  if (!*(unsigned char *)(a7 + 348))
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9CFA0, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_26AF9CFA0))
    {
      qword_26AF9CF98 = re::hashString((re *)"PostProcessMultiView", v17);
      __cxa_guard_release(&qword_26AF9CFA0);
    }
    unint64_t v11 = 0x9E3779B97F4A7C17;
    if (*(void *)(a7 + 8)) {
      uint64_t v12 = *(const char **)(a7 + 16);
    }
    else {
      uint64_t v12 = (const char *)(a7 + 9);
    }
    unint64_t v13 = qword_26AF9CF98;
    size_t v14 = strlen(v12);
    if (v14)
    {
      MurmurHash3_x64_128((uint64_t)v12, v14, 0, &v18);
      unint64_t v11 = ((v19 - 0x61C8864680B583E9 + (v18 << 6) + (v18 >> 2)) ^ v18) - 0x61C8864680B583E9;
    }
    uint64_t v15 = ((v13 >> 2) + (v13 << 6) + v11) ^ v13;
    re::CameraMultiView::makeCameraDataInstancedMode((_OWORD *)a7, a4[1], a3, (uint64_t)&v18);
    re::RenderGraphDataStore::add<re::CameraData,re::CameraData>(a5, v15, (uint64_t)&v18);
    uint64_t v25 = 0;
    ++v26;
    uint64_t v23 = 0;
    ++v24;
    uint64_t v21 = 0;
    ++v22;
    if (v19)
    {
      if (v20) {
        (*(void (**)(void))(*(void *)v19 + 40))();
      }
    }
    re::CameraMultiView::makeViewportPercentDataInstancedMode((re::CameraMultiView *)a7, v16, (uint64_t)&v18);
    re::RenderGraphDataStore::add<re::ViewportPercentData,re::ViewportPercentData>(a5, v15, (uint64_t)&v18);
    re::RenderFrame::emitGraph((re::RenderFrame *)a4, "PostProcessMultiView", v12);
    *(unsigned char *)(*(void *)(*(void *)(a4[1] + 104) + 1648) + 16) = 0;
  }
}

uint64_t re::RenderGraphAREmitter::cameraViewHandler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, char *a6, uint64_t a7)
{
  re::CameraView::prepareEmitDefault(a7, a4, a5, a2, a3, a6);
  if (*(void *)(a7 + 8)) {
    unint64_t v13 = *(const char **)(a7 + 16);
  }
  else {
    unint64_t v13 = (const char *)(a7 + 9);
  }
  return re::RenderGraphAREmitter::fillDataStoreAndEmitGraph(a1, a7, (uint64_t)a4, a5, a3, v13, a6);
}

uint64_t re::RenderGraphAREmitter::cameraMultiViewHandler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, char *a6, uint64_t a7)
{
  re::CameraMultiView::prepareEmitDefaultInstancedMode(a7, a4, a5, a2, a3, a6);
  if (*(void *)(a7 + 8)) {
    unint64_t v13 = *(const char **)(a7 + 16);
  }
  else {
    unint64_t v13 = (const char *)(a7 + 9);
  }
  return re::RenderGraphAREmitter::fillDataStoreAndEmitGraph(a1, a7, (uint64_t)a4, a5, a3, v13, a6);
}

void re::RenderGraphAREmitter::registerProviders(re::RenderGraphAREmitter *this, re::RenderManager **a2, AssetService *a3)
{
  re::RealityEmitterBase::registerCommonProviders(this, a2, a3);
  (*((void (**)(long long *__return_ptr, AssetService *, const char *))a3->var0 + 1))(&v148, a3, "engine:BuiltinRenderGraphResources/Common/depthClear.rematerial");
  long long v6 = *((_OWORD *)this + 11);
  *((_OWORD *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = v148;
  long long v148 = v6;
  uint64_t v7 = *((void *)this + 24);
  *((void *)this + 24) = v149;
  uint64_t v149 = v7;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v148);
  re::AssetHandle::loadAsync((re::RenderGraphAREmitter *)((char *)this + 176));
  (*((void (**)(AssetService *__return_ptr, AssetService *, const char *))a3->var0 + 1))(&v147, a3, "engine:default.metallib");
  re::AssetHandle::loadAsync((re::AssetHandle *)&v147);
  uint64_t v9 = *((void *)this + 100);
  if (v9)
  {
    unsigned int v10 = atomic_load((unsigned int *)(v9 + 704));
    if (v10 != 2) {
      re::AssetHandle::loadNow(*((void *)this + 100), 0);
    }
    uint64_t v11 = *((void *)this + 100);
    if (v11)
    {
      unsigned int v12 = atomic_load((unsigned int *)(v11 + 704));
      if (v12 == 2 && !re::FontID::isValid((re::RenderGraphAREmitter *)((char *)this + 1240)))
      {
        uint64_t v13 = *((void *)this + 100);
        if (v13)
        {
          unsigned int v14 = atomic_load((unsigned int *)(v13 + 704));
          if (v14 == 2)
          {
            ++*(_DWORD *)(*((void *)this + 100) + 260);
            uint64_t v15 = re::AssetHandle::loadedAsset<re::RenderGraphAsset>((re::RenderGraphAREmitter *)((char *)this + 792));
            if (v15)
            {
              re::RenderGraphManager::addProviderInternal((re::RenderGraphManager *)a2, "Camera", (const re::RenderGraphProviderBase *)(v15 + 8), 0, 0, (uint64_t)&v148);
              long long v16 = v148;
              *(void *)&long long v148 = 0;
              *((void *)&v148 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = "";
              uint64_t v17 = *((void *)this + 155);
              *((void *)this + 155) = v16;
              unint64_t v18 = v16 & 0xFFFFFFFFFFFFFFFELL | v17 & 1;
              uint64_t v19 = *((void *)this + 156);
              *((void *)this + 156) = *((void *)&v16 + 1);
              unint64_t v150 = v18;
              uint64_t v151 = v19;
              re::StringID::destroyString((re::StringID *)&v150);
              *((void *)this + 157) = v149;
              re::StringID::destroyString((re::StringID *)&v148);
            }
          }
        }
      }
    }
  }
  uint64_t v20 = *((void *)this + 103);
  if (v20)
  {
    unsigned int v21 = atomic_load((unsigned int *)(v20 + 704));
    if (v21 != 2) {
      re::AssetHandle::loadNow(*((void *)this + 103), 0);
    }
    uint64_t v22 = *((void *)this + 103);
    if (v22)
    {
      unsigned int v23 = atomic_load((unsigned int *)(v22 + 704));
      if (v23 == 2 && !re::FontID::isValid((re::RenderGraphAREmitter *)((char *)this + 1408)))
      {
        uint64_t v24 = *((void *)this + 103);
        if (v24)
        {
          unsigned int v25 = atomic_load((unsigned int *)(v24 + 704));
          if (v25 == 2)
          {
            ++*(_DWORD *)(*((void *)this + 103) + 260);
            uint64_t v26 = re::AssetHandle::loadedAsset<re::RenderGraphAsset>((re::RenderGraphAREmitter *)((char *)this + 816));
            if (v26)
            {
              re::RenderGraphManager::addProviderInternal((re::RenderGraphManager *)a2, "SingleGraphShadows", (const re::RenderGraphProviderBase *)(v26 + 8), 0, 0, (uint64_t)&v148);
              long long v27 = v148;
              *(void *)&long long v148 = 0;
              *((void *)&v148 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = "";
              uint64_t v28 = *((void *)this + 176);
              *((void *)this + 176) = v27;
              unint64_t v29 = v27 & 0xFFFFFFFFFFFFFFFELL | v28 & 1;
              uint64_t v30 = *((void *)this + 177);
              *((void *)this + 177) = *((void *)&v27 + 1);
              unint64_t v150 = v29;
              uint64_t v151 = v30;
              re::StringID::destroyString((re::StringID *)&v150);
              *((void *)this + 17re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = v149;
              re::StringID::destroyString((re::StringID *)&v148);
            }
          }
        }
      }
    }
  }
  uint64_t v31 = *((void *)this + 153);
  if (!v31 || (unsigned int v32 = atomic_load((unsigned int *)(v31 + 704)), v32 != 2))
  {
    (*((void (**)(long long *__return_ptr, AssetService *, const char *))a3->var0 + 1))(&v148, a3, "engine:BuiltinRenderGraphResources/Common/filter.rerendergraph");
    long long v33 = *((_OWORD *)this + 76);
    *((_OWORD *)this + 76) = v148;
    long long v148 = v33;
    uint64_t v34 = *((void *)this + 154);
    *((void *)this + 154) = v149;
    uint64_t v149 = v34;
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v148);
    re::AssetHandle::loadNow(*((void *)this + 153), 0);
  }
  uint64_t v35 = *((void *)this + 153);
  if (v35)
  {
    unsigned int v36 = atomic_load((unsigned int *)(v35 + 704));
    if (v36 == 2 && !re::FontID::isValid((re::RenderGraphAREmitter *)((char *)this + 1432)))
    {
      uint64_t v37 = *((void *)this + 153);
      if (v37)
      {
        unsigned int v38 = atomic_load((unsigned int *)(v37 + 704));
        if (v38 == 2)
        {
          ++*(_DWORD *)(*((void *)this + 153) + 260);
          uint64_t v39 = re::AssetHandle::loadedAsset<re::RenderGraphAsset>((re::RenderGraphAREmitter *)((char *)this + 1216));
          if (v39)
          {
            re::RenderGraphManager::addProviderInternal((re::RenderGraphManager *)a2, "Filter", (const re::RenderGraphProviderBase *)(v39 + 8), 0, 0, (uint64_t)&v148);
            long long v40 = v148;
            *(void *)&long long v148 = 0;
            *((void *)&v148 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = "";
            uint64_t v41 = *((void *)this + 179);
            *((void *)this + 179) = v40;
            unint64_t v42 = v40 & 0xFFFFFFFFFFFFFFFELL | v41 & 1;
            uint64_t v43 = *((void *)this + 180);
            *((void *)this + 180) = *((void *)&v40 + 1);
            unint64_t v150 = v42;
            uint64_t v151 = v43;
            re::StringID::destroyString((re::StringID *)&v150);
            *((void *)this + 18re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = v149;
            re::StringID::destroyString((re::StringID *)&v148);
          }
        }
      }
    }
  }
  uint64_t v44 = *((void *)this + 121);
  if (v44)
  {
    unsigned int v45 = atomic_load((unsigned int *)(v44 + 704));
    if (v45 != 2) {
      re::AssetHandle::loadNow(*((void *)this + 121), 0);
    }
    uint64_t v46 = *((void *)this + 121);
    if (v46)
    {
      unsigned int v47 = atomic_load((unsigned int *)(v46 + 704));
      if (v47 == 2 && !re::FontID::isValid((re::RenderGraphAREmitter *)((char *)this + 1288)))
      {
        uint64_t v48 = *((void *)this + 121);
        if (v48)
        {
          unsigned int v49 = atomic_load((unsigned int *)(v48 + 704));
          if (v49 == 2)
          {
            ++*(_DWORD *)(*((void *)this + 121) + 260);
            uint64_t v50 = re::AssetHandle::loadedAsset<re::RenderGraphAsset>((re::RenderGraphAREmitter *)((char *)this + 960));
            if (v50)
            {
              re::RenderGraphManager::addProviderInternal((re::RenderGraphManager *)a2, "DepthOfField", (const re::RenderGraphProviderBase *)(v50 + 8), 0, 0, (uint64_t)&v148);
              long long v51 = v148;
              *(void *)&long long v148 = 0;
              *((void *)&v148 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = "";
              uint64_t v52 = *((void *)this + 161);
              *((void *)this + 16re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = v51;
              unint64_t v53 = v51 & 0xFFFFFFFFFFFFFFFELL | v52 & 1;
              uint64_t v54 = *((void *)this + 162);
              *((void *)this + 162) = *((void *)&v51 + 1);
              unint64_t v150 = v53;
              uint64_t v151 = v54;
              re::StringID::destroyString((re::StringID *)&v150);
              *((void *)this + 163) = v149;
              re::StringID::destroyString((re::StringID *)&v148);
            }
          }
        }
      }
    }
  }
  uint64_t v55 = *((void *)this + 124);
  if (v55)
  {
    unsigned int v56 = atomic_load((unsigned int *)(v55 + 704));
    if (v56 != 2) {
      re::AssetHandle::loadNow(*((void *)this + 124), 0);
    }
    uint64_t v57 = *((void *)this + 124);
    if (v57)
    {
      unsigned int v58 = atomic_load((unsigned int *)(v57 + 704));
      if (v58 == 2 && !re::FontID::isValid((re::RenderGraphAREmitter *)((char *)this + 1312)))
      {
        uint64_t v59 = *((void *)this + 124);
        if (v59)
        {
          unsigned int v60 = atomic_load((unsigned int *)(v59 + 704));
          if (v60 == 2)
          {
            ++*(_DWORD *)(*((void *)this + 124) + 260);
            uint64_t v61 = re::AssetHandle::loadedAsset<re::RenderGraphAsset>((re::RenderGraphAREmitter *)((char *)this + 984));
            if (v61)
            {
              re::RenderGraphManager::addProviderInternal((re::RenderGraphManager *)a2, "MotionBlur", (const re::RenderGraphProviderBase *)(v61 + 8), 0, 0, (uint64_t)&v148);
              long long v62 = v148;
              *(void *)&long long v148 = 0;
              *((void *)&v148 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = "";
              uint64_t v63 = *((void *)this + 164);
              *((void *)this + 164) = v62;
              unint64_t v64 = v62 & 0xFFFFFFFFFFFFFFFELL | v63 & 1;
              uint64_t v65 = *((void *)this + 165);
              *((void *)this + 165) = *((void *)&v62 + 1);
              unint64_t v150 = v64;
              uint64_t v151 = v65;
              re::StringID::destroyString((re::StringID *)&v150);
              *((void *)this + 166) = v149;
              re::StringID::destroyString((re::StringID *)&v148);
            }
          }
        }
      }
    }
  }
  uint64_t v66 = *((void *)this + 127);
  if (v66)
  {
    unsigned int v67 = atomic_load((unsigned int *)(v66 + 704));
    if (v67 != 2) {
      re::AssetHandle::loadNow(*((void *)this + 127), 0);
    }
  }
  uint64_t v68 = *((void *)this + 130);
  if (v68)
  {
    unsigned int v69 = atomic_load((unsigned int *)(v68 + 704));
    if (v69 != 2) {
      re::AssetHandle::loadNow(*((void *)this + 130), 0);
    }
  }
  uint64_t v70 = *((void *)this + 118);
  if (v70)
  {
    unsigned int v71 = atomic_load((unsigned int *)(v70 + 704));
    if (v71 != 2) {
      re::AssetHandle::loadNow(*((void *)this + 118), 0);
    }
    uint64_t v72 = *((void *)this + 118);
    if (v72)
    {
      unsigned int v73 = atomic_load((unsigned int *)(v72 + 704));
      if (v73 == 2 && !re::FontID::isValid((re::RenderGraphAREmitter *)((char *)this + 1264)))
      {
        uint64_t v74 = *((void *)this + 118);
        if (v74)
        {
          unsigned int v75 = atomic_load((unsigned int *)(v74 + 704));
          if (v75 == 2)
          {
            ++*(_DWORD *)(*((void *)this + 118) + 260);
            uint64_t v76 = re::AssetHandle::loadedAsset<re::RenderGraphAsset>((re::RenderGraphAREmitter *)((char *)this + 936));
            if (v76)
            {
              re::RenderGraphManager::addProviderInternal((re::RenderGraphManager *)a2, "PostProcessMultiView", (const re::RenderGraphProviderBase *)(v76 + 8), 0, 0, (uint64_t)&v148);
              long long v77 = v148;
              *(void *)&long long v148 = 0;
              *((void *)&v148 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = "";
              uint64_t v78 = *((void *)this + 158);
              *((void *)this + 15re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = v77;
              unint64_t v79 = v77 & 0xFFFFFFFFFFFFFFFELL | v78 & 1;
              uint64_t v80 = *((void *)this + 159);
              *((void *)this + 159) = *((void *)&v77 + 1);
              unint64_t v150 = v79;
              uint64_t v151 = v80;
              re::StringID::destroyString((re::StringID *)&v150);
              *((void *)this + 160) = v149;
              re::StringID::destroyString((re::StringID *)&v148);
            }
          }
        }
      }
    }
  }
  uint64_t v81 = *((void *)this + 94);
  if (v81)
  {
    unsigned int v82 = atomic_load((unsigned int *)(v81 + 704));
    if (v82 != 2) {
      re::AssetHandle::loadNow(*((void *)this + 94), 0);
    }
    uint64_t v83 = *((void *)this + 94);
    if (v83)
    {
      unsigned int v84 = atomic_load((unsigned int *)(v83 + 704));
      if (v84 == 2 && !re::FontID::isValid((re::RenderGraphAREmitter *)((char *)this + 1360)))
      {
        uint64_t v85 = *((void *)this + 94);
        if (v85)
        {
          unsigned int v86 = atomic_load((unsigned int *)(v85 + 704));
          if (v86 == 2)
          {
            ++*(_DWORD *)(*((void *)this + 94) + 260);
            uint64_t v87 = re::AssetHandle::loadedAsset<re::RenderGraphAsset>((re::RenderGraphAREmitter *)((char *)this + 744));
            if (v87)
            {
              re::RenderGraphManager::addProviderInternal((re::RenderGraphManager *)a2, "DepthFeathering", (const re::RenderGraphProviderBase *)(v87 + 8), 0, 0, (uint64_t)&v148);
              long long v88 = v148;
              *(void *)&long long v148 = 0;
              *((void *)&v148 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = "";
              uint64_t v89 = *((void *)this + 170);
              *((void *)this + 170) = v88;
              unint64_t v90 = v88 & 0xFFFFFFFFFFFFFFFELL | v89 & 1;
              uint64_t v91 = *((void *)this + 171);
              *((void *)this + 17re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = *((void *)&v88 + 1);
              unint64_t v150 = v90;
              uint64_t v151 = v91;
              re::StringID::destroyString((re::StringID *)&v150);
              *((void *)this + 172) = v149;
              re::StringID::destroyString((re::StringID *)&v148);
            }
          }
        }
      }
    }
  }
  uint64_t v92 = *((void *)this + 97);
  if (v92)
  {
    unsigned int v93 = atomic_load((unsigned int *)(v92 + 704));
    if (v93 != 2) {
      re::AssetHandle::loadNow(*((void *)this + 97), 0);
    }
    uint64_t v94 = *((void *)this + 97);
    if (v94)
    {
      unsigned int v95 = atomic_load((unsigned int *)(v94 + 704));
      if (v95 == 2 && !re::FontID::isValid((re::RenderGraphAREmitter *)((char *)this + 1384)))
      {
        uint64_t v96 = *((void *)this + 97);
        if (v96)
        {
          unsigned int v97 = atomic_load((unsigned int *)(v96 + 704));
          if (v97 == 2)
          {
            ++*(_DWORD *)(*((void *)this + 97) + 260);
            uint64_t v98 = re::AssetHandle::loadedAsset<re::RenderGraphAsset>((re::RenderGraphAREmitter *)((char *)this + 768));
            if (v98)
            {
              re::RenderGraphManager::addProviderInternal((re::RenderGraphManager *)a2, "GuidedFilterOcclusion", (const re::RenderGraphProviderBase *)(v98 + 8), 0, 0, (uint64_t)&v148);
              long long v99 = v148;
              *(void *)&long long v148 = 0;
              *((void *)&v148 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = "";
              uint64_t v100 = *((void *)this + 173);
              *((void *)this + 173) = v99;
              unint64_t v101 = v99 & 0xFFFFFFFFFFFFFFFELL | v100 & 1;
              uint64_t v102 = *((void *)this + 174);
              *((void *)this + 174) = *((void *)&v99 + 1);
              unint64_t v150 = v101;
              uint64_t v151 = v102;
              re::StringID::destroyString((re::StringID *)&v150);
              *((void *)this + 175) = v149;
              re::StringID::destroyString((re::StringID *)&v148);
            }
          }
        }
      }
    }
  }
  if (*((unsigned char *)this + 1204)) {
    re::SFBSystemShellBlurProvider::registerProviderCommon((re::SFBSystemShellBlurProvider *)a2, (re::RenderGraphManager *)a3, &v147, (re::RenderGraphAREmitter *)((char *)this + 1576), (re::RenderGraphAREmitter *)((char *)this + 1600), (re::RenderGraphAREmitter *)((char *)this + 1552), v8);
  }
  BOOL isValid = re::FontID::isValid((re::RenderGraphAREmitter *)((char *)this + 1504));
  if (!isValid)
  {
    long long v104 = re::globalAllocators((re *)isValid);
    long long v105 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v104[2] + 32))(v104[2], 88, 8);
    re::DepthStencilCombinerProvider::DepthStencilCombinerProvider(v105, (const re::DynamicString *)v146);
    if (*(void *)&v146[0])
    {
      if (BYTE8(v146[0])) {
        (*(void (**)(void))(**(void **)&v146[0] + 40))();
      }
      memset(v146, 0, sizeof(v146));
    }
    re::RenderGraphManager::addProviderInternal((re::RenderGraphManager *)a2, "Camera", v105, -10, 1, (uint64_t)&v148);
    long long v106 = v148;
    *(void *)&long long v148 = 0;
    *((void *)&v148 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = "";
    uint64_t v107 = *((void *)this + 188);
    *((void *)this + 18re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = v106;
    unint64_t v108 = v106 & 0xFFFFFFFFFFFFFFFELL | v107 & 1;
    uint64_t v109 = *((void *)this + 189);
    *((void *)this + 189) = *((void *)&v106 + 1);
    unint64_t v150 = v108;
    uint64_t v151 = v109;
    re::StringID::destroyString((re::StringID *)&v150);
    *((void *)this + 190) = v149;
    re::StringID::destroyString((re::StringID *)&v148);
  }
  BOOL v110 = re::FontID::isValid((re::RenderGraphAREmitter *)((char *)this + 1528));
  if (!v110)
  {
    int v111 = re::globalAllocators((re *)v110);
    unint64_t v112 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v111[2] + 32))(v111[2], 136, 8);
    re::DepthStencilSplitterProvider::DepthStencilSplitterProvider((uint64_t)v112, (const re::DynamicString *)v145);
    if (*(void *)&v145[0])
    {
      if (BYTE8(v145[0])) {
        (*(void (**)(void))(**(void **)&v145[0] + 40))();
      }
      memset(v145, 0, sizeof(v145));
    }
    (*((void (**)(long long *__return_ptr, AssetService *, const char *))a3->var0 + 1))(&v148, a3, "engine:BuiltinRenderGraphResources/Common/separateDepth.rematerial");
    long long v113 = *(_OWORD *)(v112 + 11);
    *(_OWORD *)(v112 + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = v148;
    long long v148 = v113;
    uint64_t v114 = v112[13];
    v112[13] = v149;
    uint64_t v149 = v114;
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v148);
    re::AssetHandle::loadAsync((re::AssetHandle *)(v112 + 11));
    re::AssetHandle::operator=((uint64_t)this + 224, v112 + 11);
    (*((void (**)(long long *__return_ptr, AssetService *, const char *))a3->var0 + 1))(&v148, a3, "engine:BuiltinRenderGraphResources/Common/separateStencil.rematerial");
    long long v115 = *((_OWORD *)v112 + 7);
    *((_OWORD *)v112 + 7) = v148;
    long long v148 = v115;
    uint64_t v116 = v112[16];
    v112[16] = v149;
    uint64_t v149 = v116;
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v148);
    re::AssetHandle::loadAsync((re::AssetHandle *)(v112 + 14));
    re::AssetHandle::operator=((uint64_t)this + 200, v112 + 14);
    re::RenderGraphManager::addProviderInternal((re::RenderGraphManager *)a2, "Camera", (const re::RenderGraphProviderBase *)v112, 10, 1, (uint64_t)&v148);
    long long v117 = v148;
    *(void *)&long long v148 = 0;
    *((void *)&v148 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = "";
    uint64_t v118 = *((void *)this + 191);
    *((void *)this + 19re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = v117;
    unint64_t v119 = v117 & 0xFFFFFFFFFFFFFFFELL | v118 & 1;
    uint64_t v120 = *((void *)this + 192);
    *((void *)this + 192) = *((void *)&v117 + 1);
    unint64_t v150 = v119;
    uint64_t v151 = v120;
    re::StringID::destroyString((re::StringID *)&v150);
    *((void *)this + 193) = v149;
    re::StringID::destroyString((re::StringID *)&v148);
  }
  BOOL v121 = re::FontID::isValid((re::RenderGraphAREmitter *)((char *)this + 1456));
  if (!v121)
  {
    uint64_t v122 = re::globalAllocators((re *)v121);
    unsigned __int8 v123 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v122[2] + 32))(v122[2], 112, 8);
    re::VRRUnwarpProvider::VRRUnwarpProvider(v123, (const re::DynamicString *)v144);
    if (*(void *)&v144[0])
    {
      if (BYTE8(v144[0])) {
        (*(void (**)(void))(**(void **)&v144[0] + 40))();
      }
      memset(v144, 0, sizeof(v144));
    }
    re::AssetHandle::operator=((uint64_t)v123 + 40, (uint64_t *)&v147);
    re::RenderGraphManager::addProviderInternal((re::RenderGraphManager *)a2, "Camera", v123, 50, 1, (uint64_t)&v148);
    long long v124 = v148;
    *(void *)&long long v148 = 0;
    *((void *)&v148 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = "";
    uint64_t v125 = *((void *)this + 182);
    *((void *)this + 182) = v124;
    unint64_t v126 = v124 & 0xFFFFFFFFFFFFFFFELL | v125 & 1;
    uint64_t v127 = *((void *)this + 183);
    *((void *)this + 183) = *((void *)&v124 + 1);
    unint64_t v150 = v126;
    uint64_t v151 = v127;
    re::StringID::destroyString((re::StringID *)&v150);
    *((void *)this + 184) = v149;
    re::StringID::destroyString((re::StringID *)&v148);
  }
  BOOL v128 = re::FontID::isValid((re::RenderGraphAREmitter *)((char *)this + 1480));
  if (!v128)
  {
    __int16 v129 = re::globalAllocators((re *)v128);
    uint64_t v130 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v129[2] + 32))(v129[2], 48, 8);
    re::VFXRenderGraphProvider::VFXRenderGraphProvider((uint64_t)v130, (const re::DynamicString *)v143);
    if (*(void *)&v143[0])
    {
      if (BYTE8(v143[0])) {
        (*(void (**)(void))(**(void **)&v143[0] + 40))();
      }
      memset(v143, 0, sizeof(v143));
    }
    re::RenderGraphManager::addProviderInternal((re::RenderGraphManager *)a2, "VFXSimulation", v130, 0, 1, (uint64_t)&v148);
    long long v131 = v148;
    *(void *)&long long v148 = 0;
    *((void *)&v148 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = "";
    uint64_t v132 = *((void *)this + 185);
    *((void *)this + 185) = v131;
    unint64_t v133 = v131 & 0xFFFFFFFFFFFFFFFELL | v132 & 1;
    uint64_t v134 = *((void *)this + 186);
    *((void *)this + 186) = *((void *)&v131 + 1);
    unint64_t v150 = v133;
    uint64_t v151 = v134;
    re::StringID::destroyString((re::StringID *)&v150);
    *((void *)this + 187) = v149;
    re::StringID::destroyString((re::StringID *)&v148);
  }
  BOOL v135 = re::FontID::isValid((re::RenderGraphAREmitter *)((char *)this + 1624));
  if (!v135)
  {
    uint64_t v136 = re::globalAllocators((re *)v135);
    uint64_t v137 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v136[2] + 32))(v136[2], 192, 8);
    re::RayTracedAmbientOcclusionProvider::RayTracedAmbientOcclusionProvider((uint64_t)v137, (const re::DynamicString *)v142);
    *((void *)this + 206) = v137;
    if (*(void *)&v142[0])
    {
      if (BYTE8(v142[0]))
      {
        (*(void (**)(void))(**(void **)&v142[0] + 40))();
        uint64_t v137 = (_anonymous_namespace_ *)*((void *)this + 206);
      }
      memset(v142, 0, sizeof(v142));
    }
    re::RenderGraphManager::addProviderInternal((re::RenderGraphManager *)a2, "Camera", v137, 20, 1, (uint64_t)&v148);
    long long v138 = v148;
    *(void *)&long long v148 = 0;
    *((void *)&v148 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = "";
    uint64_t v139 = *((void *)this + 203);
    *((void *)this + 203) = v138;
    unint64_t v140 = v138 & 0xFFFFFFFFFFFFFFFELL | v139 & 1;
    uint64_t v141 = *((void *)this + 204);
    *((void *)this + 204) = *((void *)&v138 + 1);
    unint64_t v150 = v140;
    uint64_t v151 = v141;
    re::StringID::destroyString((re::StringID *)&v150);
    *((void *)this + 205) = v149;
    re::StringID::destroyString((re::StringID *)&v148);
  }
  re::ARSegmentationEmitterCache::registerRenderGraphProvider(*((re::ARSegmentationEmitterCache **)this + 228), (re::RenderGraphManager *)a2);
  *((void *)this + 15re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = a2;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v147);
}

void re::RenderGraphAREmitter::frameSetup(re::RenderGraphAREmitter *this, re::RenderManager *a2)
{
  if (*((unsigned __int8 *)this + 1656) != *((unsigned __int8 *)this + 1172)
    || !re::FontID::isValid((re::RenderGraphAREmitter *)((char *)this + 1336)))
  {
    if (re::FontID::isValid((re::RenderGraphAREmitter *)((char *)this + 1336)))
    {
      uint64_t v4 = *((void *)a2 + 13);
      if (v4) {
        uint64_t v5 = *(void *)(v4 + 296);
      }
      else {
        uint64_t v5 = 0;
      }
      re::StringID::StringID((re::StringID *)v22, (const StringID *)((char *)this + 1336));
      uint64_t v23 = *((void *)this + 169);
      re::RenderGraphManager::removeProvider(v5, (uint64_t)v22);
      re::StringID::destroyString((re::StringID *)v22);
      re::ProviderHandle::invalidate((re::RenderGraphAREmitter *)((char *)this + 1336));
    }
    if (*((unsigned char *)this + 1172)) {
      long long v6 = (re::RenderGraphAREmitter *)((char *)this + 1032);
    }
    else {
      long long v6 = (re::RenderGraphAREmitter *)((char *)this + 1008);
    }
    re::AssetHandle::AssetHandle((re::AssetHandle *)v20, v6);
    if (v21)
    {
      re::AssetHandle::loadNow(v21, 0);
      if (v21)
      {
        unsigned int v7 = atomic_load((unsigned int *)(v21 + 704));
        if (v7 == 2)
        {
          ++*(_DWORD *)(v21 + 260);
          uint64_t v8 = re::AssetHandle::loadedAsset<re::RenderGraphAsset>((re::RenderGraphAsset *)v20);
          if (v8)
          {
            uint64_t v9 = *((void *)a2 + 13);
            if (v9) {
              unsigned int v10 = *(re::RenderGraphManager **)(v9 + 296);
            }
            else {
              unsigned int v10 = 0;
            }
            re::RenderGraphManager::addProviderInternal(v10, "PostProcessCombined", (const re::RenderGraphProviderBase *)(v8 + 8), 0, 0, (uint64_t)&v24);
            unint64_t v11 = (unint64_t)v24;
            unsigned int v12 = v25;
            id v24 = 0;
            unsigned int v25 = "";
            uint64_t v13 = *((void *)this + 167);
            *((void *)this + 167) = v11;
            unint64_t v14 = v11 & 0xFFFFFFFFFFFFFFFELL | v13 & 1;
            uint64_t v15 = *((void *)this + 168);
            *((void *)this + 16re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = v12;
            v27[0] = v14;
            v27[1] = v15;
            re::StringID::destroyString((re::StringID *)v27);
            *((void *)this + 169) = v26;
            re::StringID::destroyString((re::StringID *)&v24);
          }
        }
      }
    }
    *((unsigned char *)this + 1656) = *((unsigned char *)this + 1172);
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v20);
  }
  if (!*((void *)this + 229))
  {
    long long v16 = (void **)((char *)this + 1832);
    uint64_t v17 = (re::RenderManager *)((char *)a2 + 184);
    re::ar::DualGuidedFilter::create(v17, 0, &v24);
    if ((id *)((char *)this + 1832) != &v24)
    {
      id v18 = v24;
      id v24 = 0;
      uint64_t v19 = *v16;
      *long long v16 = v18;
    }
    id v24 = objc_msgSend(*(id *)v17, sel_newEvent);
    NS::SharedPtr<MTL::Texture>::operator=((void **)this + 230, &v24);
    if (v24) {

    }
    objc_msgSend(*((id *)this + 230), sel_setLabel_, @"DualGuidedFilterCoefficientsEvent");
    *((void *)this + 23re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
  }
}

void re::introspect_RenderGraphAREmitterPostProcessOption(re *this, const re::IntrospectionBase *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9CFA8, memory_order_acquire) & 1) == 0)
  {
    id v24 = (re *)__cxa_guard_acquire(&qword_26AF9CFA8);
    if (v24)
    {
      unsigned int v25 = re::introspectionAllocator(v24);
      uint64_t v26 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v25 + 32))(v25, 24, 8);
      *(_DWORD *)uint64_t v26 = 1;
      *((void *)v26 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
      *((void *)v26 + 2) = "Fastest";
      qword_26AF9CFE8 = (uint64_t)v26;
      long long v27 = re::introspectionAllocator(v26);
      uint64_t v28 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v27 + 32))(v27, 24, 8);
      *(_DWORD *)uint64_t v28 = 1;
      *((void *)v28 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 1;
      *((void *)v28 + 2) = "Standard";
      qword_26AF9CFF0 = (uint64_t)v28;
      unint64_t v29 = re::introspectionAllocator(v28);
      uint64_t v30 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v29 + 32))(v29, 24, 8);
      *(_DWORD *)uint64_t v30 = 1;
      *((void *)v30 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 2;
      *((void *)v30 + 2) = "High";
      qword_26AF9CFF8 = (uint64_t)v30;
      uint64_t v31 = re::introspectionAllocator(v30);
      unsigned int v32 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v31 + 32))(v31, 24, 8);
      *(_DWORD *)unsigned int v32 = 1;
      *((void *)v32 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 3;
      *((void *)v32 + 2) = "Best";
      qword_26AF9D000 = (uint64_t)v32;
      long long v33 = re::introspectionAllocator(v32);
      uint64_t v34 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v33 + 32))(v33, 24, 8);
      *(_DWORD *)uint64_t v34 = 1;
      *((void *)v34 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 4;
      *((void *)v34 + 2) = "MultiView";
      qword_26AF9D008 = (uint64_t)v34;
      uint64_t v35 = re::introspectionAllocator(v34);
      uint64_t v36 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v35 + 32))(v35, 24, 8);
      *(_DWORD *)uint64_t v36 = 1;
      *(void *)(v36 + re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = 5;
      *(void *)(v36 + 16) = "Low";
      qword_26AF9D010 = v36;
      __cxa_guard_release(&qword_26AF9CFA8);
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9CFB0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9CFB0))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_26AF9D018, "RenderGraphAREmitterPostProcessOption", 4, 4, 1, 1);
    qword_26AF9D018 = (uint64_t)&unk_26E715E00;
    qword_26AF9D058 = (uint64_t)&re::introspect_RenderGraphAREmitterPostProcessOption(BOOL)::enumTable;
    dword_26AF9D028 = 9;
    __cxa_guard_release(&qword_26AF9CFB0);
  }
  if ((_MergedGlobals_476 & 1) == 0)
  {
    _MergedGlobals_476 = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_26AF9D018, a2);
    uint64_t v38 = 0x495BDF4BE72D0B7ELL;
    uint64_t v39 = "RenderGraphAREmitterPostProcessOption";
    v42[0] = 0x607DD0F01DCLL;
    v42[1] = "uint32_t";
    uint64_t v2 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v42);
    if (v2)
    {
      uint64_t v3 = *v2;
      re::StringID::destroyString((re::StringID *)v42);
      uint64_t v4 = (unsigned int *)qword_26AF9D058;
      v41[1] = v3;
      re::TypeBuilder::beginEnumType((uint64_t)v42, &v38, 1, 1, (uint64_t)v41);
      unint64_t v6 = *v4;
      if (v6)
      {
        for (unint64_t i = 0; i < v6; ++i)
        {
          uint64_t v8 = *(void *)(*((void *)v4 + 1) + 8 * i);
          if (*(_DWORD *)v8 == 1)
          {
            uint64_t v9 = *(char **)(v8 + 16);
            if (v9)
            {
              uint64_t v10 = *v9;
              if (*v9)
              {
                char v11 = v9[1];
                if (v11)
                {
                  unsigned int v12 = (unsigned __int8 *)(v9 + 2);
                  do
                  {
                    uint64_t v10 = 31 * v10 + v11;
                    int v13 = *v12++;
                    char v11 = v13;
                  }
                  while (v13);
                }
              }
            }
            else
            {
              uint64_t v10 = 0;
            }
            uint64_t v14 = *(void *)(v8 + 8);
            *(void *)&v40.var0 = 2 * v10;
            v40.var1 = v9;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v42, v14, &v40);
            re::StringID::destroyString((re::StringID *)&v40);
            unint64_t v6 = *v4;
          }
        }
        if (v6)
        {
          for (unint64_t j = 0; j < v6; ++j)
          {
            uint64_t v16 = *(void *)(*((void *)v4 + 1) + 8 * j);
            if (*(_DWORD *)v16 == 2)
            {
              uint64_t v17 = *(char **)(v16 + 16);
              if (v17)
              {
                uint64_t v18 = *v17;
                if (*v17)
                {
                  char v19 = v17[1];
                  if (v19)
                  {
                    uint64_t v20 = (unsigned __int8 *)(v17 + 2);
                    do
                    {
                      uint64_t v18 = 31 * v18 + v19;
                      int v21 = *v20++;
                      char v19 = v21;
                    }
                    while (v21);
                  }
                }
              }
              else
              {
                uint64_t v18 = 0;
              }
              uint64_t v22 = *(void *)(v16 + 8);
              *(void *)&v40.var0 = 2 * v18;
              v40.var1 = v17;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v42, v22, &v40);
              re::StringID::destroyString((re::StringID *)&v40);
              unint64_t v6 = *v4;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v42, v23);
      xmmword_26AF9D038 = (__int128)v40;
      re::StringID::destroyString((re::StringID *)&v38);
    }
    else
    {
      re::StringID::destroyString((re::StringID *)v42);
      re::internal::assertLog((re::internal *)5, v37, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "RenderGraphAREmitterPostProcessOption", v38, v39);
      _os_crash();
      __break(1u);
    }
  }
}

void *re::allocInfo_RenderGraphAREmitter(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9CFB8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9CFB8))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF9D060, "RenderGraphAREmitter");
    __cxa_guard_release(&qword_26AF9CFB8);
  }
  return &unk_26AF9D060;
}

void re::initInfo_RenderGraphAREmitter(re *this, re::IntrospectionBase *a2)
{
  v135[0] = 0x228CD2A2CBEEF78ALL;
  v135[1] = "RenderGraphAREmitter";
  re::StringID::destroyString((re::StringID *)v135);
  *((_OWORD *)this + 2) = v136;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9CFC0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF9CFC0);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::introspect_RealityEmitterBase((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = "RealityEmitterBase";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 4re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF9D0D8 = v7;
      uint64_t v8 = re::introspectionAllocator((re *)v7);
      uint64_t v10 = re::introspect_AssetHandle((re *)1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = "shadowMapGraph";
      *(void *)(v11 + 16) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x33000000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + 4re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF9D0E0 = v11;
      unsigned int v12 = re::introspectionAllocator((re *)v11);
      uint64_t v14 = re::introspect_AssetHandle((re *)1, v13);
      uint64_t v15 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 72, 8);
      *(_DWORD *)uint64_t v15 = 1;
      *(void *)(v15 + re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = "depthFeatheringGraph";
      *(void *)(v15 + 16) = v14;
      *(void *)(v15 + 24) = 0;
      *(void *)(v15 + 32) = 0x2E800000004;
      *(_DWORD *)(v15 + 40) = 0;
      *(void *)(v15 + 4re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_26AF9D0E8 = v15;
      uint64_t v16 = re::introspectionAllocator((re *)v15);
      uint64_t v18 = re::introspect_AssetHandle((re *)1, v17);
      uint64_t v19 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v16 + 32))(v16, 72, 8);
      *(_DWORD *)uint64_t v19 = 1;
      *(void *)(v19 + re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = "guidedFilterOcclusionGraph";
      *(void *)(v19 + 16) = v18;
      *(void *)(v19 + 24) = 0;
      *(void *)(v19 + 32) = 0x30000000005;
      *(_DWORD *)(v19 + 40) = 0;
      *(void *)(v19 + 4re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v19 + 56) = 0;
      *(_DWORD *)(v19 + 64) = 0;
      qword_26AF9D0F0 = v19;
      uint64_t v20 = re::introspectionAllocator((re *)v19);
      uint64_t v22 = re::introspect_AssetHandle((re *)1, v21);
      uint64_t v23 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v20 + 32))(v20, 72, 8);
      *(_DWORD *)uint64_t v23 = 1;
      *(void *)(v23 + re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = "cameraGraph";
      *(void *)(v23 + 16) = v22;
      *(void *)(v23 + 24) = 0;
      *(void *)(v23 + 32) = 0x31800000006;
      *(_DWORD *)(v23 + 40) = 0;
      *(void *)(v23 + 4re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v23 + 56) = 0;
      *(_DWORD *)(v23 + 64) = 0;
      qword_26AF9D0F8 = v23;
      id v24 = re::introspectionAllocator((re *)v23);
      uint64_t v26 = re::introspect_AssetHandle((re *)1, v25);
      uint64_t v27 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v24 + 32))(v24, 72, 8);
      *(_DWORD *)uint64_t v27 = 1;
      *(void *)(v27 + re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = "postProcessGraphFastest";
      *(void *)(v27 + 16) = v26;
      *(void *)(v27 + 24) = 0;
      *(void *)(v27 + 32) = 0x34800000008;
      *(_DWORD *)(v27 + 40) = 0;
      *(void *)(v27 + 4re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v27 + 56) = 0;
      *(_DWORD *)(v27 + 64) = 0;
      qword_26AF9D100 = v27;
      uint64_t v28 = re::introspectionAllocator((re *)v27);
      uint64_t v30 = re::introspect_AssetHandle((re *)1, v29);
      uint64_t v31 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v28 + 32))(v28, 72, 8);
      *(_DWORD *)uint64_t v31 = 1;
      *(void *)(v31 + re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = "postProcessGraphStandard";
      *(void *)(v31 + 16) = v30;
      *(void *)(v31 + 24) = 0;
      *(void *)(v31 + 32) = 0x36000000009;
      *(_DWORD *)(v31 + 40) = 0;
      *(void *)(v31 + 4re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v31 + 56) = 0;
      *(_DWORD *)(v31 + 64) = 0;
      qword_26AF9D108 = v31;
      unsigned int v32 = re::introspectionAllocator((re *)v31);
      uint64_t v34 = re::introspect_AssetHandle((re *)1, v33);
      uint64_t v35 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v32 + 32))(v32, 72, 8);
      *(_DWORD *)uint64_t v35 = 1;
      *(void *)(v35 + re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = "postProcessGraphHigh";
      *(void *)(v35 + 16) = v34;
      *(void *)(v35 + 24) = 0;
      *(void *)(v35 + 32) = 0x3780000000ALL;
      *(_DWORD *)(v35 + 40) = 0;
      *(void *)(v35 + 4re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v35 + 56) = 0;
      *(_DWORD *)(v35 + 64) = 0;
      qword_26AF9D110 = v35;
      uint64_t v36 = re::introspectionAllocator((re *)v35);
      uint64_t v38 = re::introspect_AssetHandle((re *)1, v37);
      uint64_t v39 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v36 + 32))(v36, 72, 8);
      *(_DWORD *)uint64_t v39 = 1;
      *(void *)(v39 + re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = "postProcessGraphBest";
      *(void *)(v39 + 16) = v38;
      *(void *)(v39 + 24) = 0;
      *(void *)(v39 + 32) = 0x3900000000BLL;
      *(_DWORD *)(v39 + 40) = 0;
      *(void *)(v39 + 4re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v39 + 56) = 0;
      *(_DWORD *)(v39 + 64) = 0;
      qword_26AF9D118 = v39;
      StringID v40 = re::introspectionAllocator((re *)v39);
      unint64_t v42 = re::introspect_AssetHandle((re *)1, v41);
      uint64_t v43 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v40 + 32))(v40, 72, 8);
      *(_DWORD *)uint64_t v43 = 1;
      *(void *)(v43 + re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = "postProcessGraphMultiView";
      *(void *)(v43 + 16) = v42;
      *(void *)(v43 + 24) = 0;
      *(void *)(v43 + 32) = 0x3A80000000CLL;
      *(_DWORD *)(v43 + 40) = 0;
      *(void *)(v43 + 4re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v43 + 56) = 0;
      *(_DWORD *)(v43 + 64) = 0;
      qword_26AF9D120 = v43;
      uint64_t v44 = (re *)re::introspectionAllocator((re *)v43);
      re::introspect_RenderGraphAREmitterPostProcessOption(v44, v45);
      uint64_t v46 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v44 + 32))(v44, 72, 8);
      *(_DWORD *)uint64_t v46 = 1;
      *(void *)(v46 + re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = "postProcessOption";
      *(void *)(v46 + 16) = &qword_26AF9D018;
      *(void *)(v46 + 24) = 0;
      *(void *)(v46 + 32) = 0x4200000000DLL;
      *(_DWORD *)(v46 + 40) = 0;
      *(void *)(v46 + 4re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v46 + 56) = 0;
      *(_DWORD *)(v46 + 64) = 0;
      qword_26AF9D128 = v46;
      unsigned int v47 = re::introspectionAllocator((re *)v46);
      unsigned int v49 = re::introspect_AssetHandle((re *)1, v48);
      uint64_t v50 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v47 + 32))(v47, 72, 8);
      *(_DWORD *)uint64_t v50 = 1;
      *(void *)(v50 + re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = "postProcessGraphDepthOfField";
      *(void *)(v50 + 16) = v49;
      *(void *)(v50 + 24) = 0;
      *(void *)(v50 + 32) = 0x3C00000000ELL;
      *(_DWORD *)(v50 + 40) = 0;
      *(void *)(v50 + 4re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v50 + 56) = 0;
      *(_DWORD *)(v50 + 64) = 0;
      qword_26AF9D130 = v50;
      long long v51 = re::introspectionAllocator((re *)v50);
      unint64_t v53 = re::introspect_AssetHandle((re *)1, v52);
      uint64_t v54 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v51 + 32))(v51, 72, 8);
      *(_DWORD *)uint64_t v54 = 1;
      *(void *)(v54 + re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = "postProcessGraphMotionBlur";
      *(void *)(v54 + 16) = v53;
      *(void *)(v54 + 24) = 0;
      *(void *)(v54 + 32) = 0x3D80000000FLL;
      *(_DWORD *)(v54 + 40) = 0;
      *(void *)(v54 + 4re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v54 + 56) = 0;
      *(_DWORD *)(v54 + 64) = 0;
      qword_26AF9D138 = v54;
      uint64_t v55 = re::introspectionAllocator((re *)v54);
      uint64_t v57 = re::introspect_AssetHandle((re *)1, v56);
      uint64_t v58 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v55 + 32))(v55, 72, 8);
      *(_DWORD *)uint64_t v58 = 1;
      *(void *)(v58 + re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = "postProcessGraphCombined";
      *(void *)(v58 + 16) = v57;
      *(void *)(v58 + 24) = 0;
      *(void *)(v58 + 32) = 0x3F000000010;
      *(_DWORD *)(v58 + 40) = 0;
      *(void *)(v58 + 4re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v58 + 56) = 0;
      *(_DWORD *)(v58 + 64) = 0;
      qword_26AF9D140 = v58;
      uint64_t v59 = re::introspectionAllocator((re *)v58);
      uint64_t v61 = re::introspect_AssetHandle((re *)1, v60);
      uint64_t v62 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v59 + 32))(v59, 72, 8);
      *(_DWORD *)uint64_t v62 = 1;
      *(void *)(v62 + re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = "postProcessGraphCombinedHDR";
      *(void *)(v62 + 16) = v61;
      *(void *)(v62 + 24) = 0;
      *(void *)(v62 + 32) = 0x40800000011;
      *(_DWORD *)(v62 + 40) = 0;
      *(void *)(v62 + 4re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v62 + 56) = 0;
      *(_DWORD *)(v62 + 64) = 0;
      qword_26AF9D148 = v62;
      uint64_t v63 = re::introspectionAllocator((re *)v62);
      uint64_t v65 = re::introspect_uint32_t((re *)1, v64);
      uint64_t v66 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v63 + 32))(v63, 72, 8);
      *(_DWORD *)uint64_t v66 = 1;
      *(void *)(v66 + re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = "clusterHorizontalSlices";
      *(void *)(v66 + 16) = v65;
      *(void *)(v66 + 24) = 0;
      *(void *)(v66 + 32) = 0x47800000012;
      *(_DWORD *)(v66 + 40) = 0;
      *(void *)(v66 + 4re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v66 + 56) = 0;
      *(_DWORD *)(v66 + 64) = 0;
      qword_26AF9D150 = v66;
      unsigned int v67 = re::introspectionAllocator((re *)v66);
      unsigned int v69 = re::introspect_uint32_t((re *)1, v68);
      uint64_t v70 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v67 + 32))(v67, 72, 8);
      *(_DWORD *)uint64_t v70 = 1;
      *(void *)(v70 + re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = "clusterVerticalSlices";
      *(void *)(v70 + 16) = v69;
      *(void *)(v70 + 24) = 0;
      *(void *)(v70 + 32) = 0x47C00000013;
      *(_DWORD *)(v70 + 40) = 0;
      *(void *)(v70 + 4re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v70 + 56) = 0;
      *(_DWORD *)(v70 + 64) = 0;
      qword_26AF9D158 = v70;
      unsigned int v71 = re::introspectionAllocator((re *)v70);
      unsigned int v73 = re::introspect_uint32_t((re *)1, v72);
      uint64_t v74 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v71 + 32))(v71, 72, 8);
      *(_DWORD *)uint64_t v74 = 1;
      *(void *)(v74 + re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = "clusterDepthSlices";
      *(void *)(v74 + 16) = v73;
      *(void *)(v74 + 24) = 0;
      *(void *)(v74 + 32) = 0x48000000014;
      *(_DWORD *)(v74 + 40) = 0;
      *(void *)(v74 + 4re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v74 + 56) = 0;
      *(_DWORD *)(v74 + 64) = 0;
      qword_26AF9D160 = v74;
      unsigned int v75 = re::introspectionAllocator((re *)v74);
      long long v77 = re::introspect_float((re *)1, v76);
      uint64_t v78 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v75 + 32))(v75, 72, 8);
      *(_DWORD *)uint64_t v78 = 1;
      *(void *)(v78 + re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = "clusterMaxDepthRange";
      *(void *)(v78 + 16) = v77;
      *(void *)(v78 + 24) = 0;
      *(void *)(v78 + 32) = 0x48400000015;
      *(_DWORD *)(v78 + 40) = 0;
      *(void *)(v78 + 4re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v78 + 56) = 0;
      *(_DWORD *)(v78 + 64) = 0;
      qword_26AF9D168 = v78;
      unint64_t v79 = re::introspectionAllocator((re *)v78);
      uint64_t v81 = re::introspect_uint32_t((re *)1, v80);
      uint64_t v82 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v79 + 32))(v79, 72, 8);
      *(_DWORD *)uint64_t v82 = 1;
      *(void *)(v82 + re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = "clusterMaxIntersectionFactor";
      *(void *)(v82 + 16) = v81;
      *(void *)(v82 + 24) = 0;
      *(void *)(v82 + 32) = 0x48800000016;
      *(_DWORD *)(v82 + 40) = 0;
      *(void *)(v82 + 4re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v82 + 56) = 0;
      *(_DWORD *)(v82 + 64) = 0;
      qword_26AF9D170 = v82;
      uint64_t v83 = re::introspectionAllocator((re *)v82);
      uint64_t v85 = re::introspect_BOOL((re *)1, v84);
      uint64_t v86 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v83 + 32))(v83, 72, 8);
      *(_DWORD *)uint64_t v86 = 1;
      *(void *)(v86 + re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = "enableRayTracedAmbientOcclusion";
      *(void *)(v86 + 16) = v85;
      *(void *)(v86 + 24) = 0;
      *(void *)(v86 + 32) = 0x48C00000017;
      *(_DWORD *)(v86 + 40) = 0;
      *(void *)(v86 + 4re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v86 + 56) = 0;
      *(_DWORD *)(v86 + 64) = 0;
      qword_26AF9D178 = v86;
      uint64_t v87 = re::introspectionAllocator((re *)v86);
      uint64_t v89 = re::introspect_BOOL((re *)1, v88);
      uint64_t v90 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v87 + 32))(v87, 72, 8);
      *(_DWORD *)uint64_t v90 = 1;
      *(void *)(v90 + re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = "enableProjectiveShadow";
      *(void *)(v90 + 16) = v89;
      *(void *)(v90 + 24) = 0;
      *(void *)(v90 + 32) = 0x48D00000018;
      *(_DWORD *)(v90 + 40) = 0;
      *(void *)(v90 + 4re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v90 + 56) = 0;
      *(_DWORD *)(v90 + 64) = 0;
      qword_26AF9D180 = v90;
      uint64_t v91 = re::introspectionAllocator((re *)v90);
      unsigned int v93 = re::introspect_BOOL((re *)1, v92);
      uint64_t v94 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v91 + 32))(v91, 72, 8);
      *(_DWORD *)uint64_t v94 = 1;
      *(void *)(v94 + re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = "enableDepthOfField";
      *(void *)(v94 + 16) = v93;
      *(void *)(v94 + 24) = 0;
      *(void *)(v94 + 32) = 0x48E00000019;
      *(_DWORD *)(v94 + 40) = 0;
      *(void *)(v94 + 4re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v94 + 56) = 0;
      *(_DWORD *)(v94 + 64) = 0;
      qword_26AF9D188 = v94;
      unsigned int v95 = re::introspectionAllocator((re *)v94);
      unsigned int v97 = re::introspect_BOOL((re *)1, v96);
      uint64_t v98 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v95 + 32))(v95, 72, 8);
      *(_DWORD *)uint64_t v98 = 1;
      *(void *)(v98 + re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = "enableMotionBlur";
      *(void *)(v98 + 16) = v97;
      *(void *)(v98 + 24) = 0;
      *(void *)(v98 + 32) = 0x48F0000001ALL;
      *(_DWORD *)(v98 + 40) = 0;
      *(void *)(v98 + 4re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v98 + 56) = 0;
      *(_DWORD *)(v98 + 64) = 0;
      qword_26AF9D190 = v98;
      long long v99 = re::introspectionAllocator((re *)v98);
      unint64_t v101 = re::introspect_BOOL((re *)1, v100);
      uint64_t v102 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v99 + 32))(v99, 72, 8);
      *(_DWORD *)uint64_t v102 = 1;
      *(void *)(v102 + re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = "enablePostProcessCombined";
      *(void *)(v102 + 16) = v101;
      *(void *)(v102 + 24) = 0;
      *(void *)(v102 + 32) = 0x4900000001BLL;
      *(_DWORD *)(v102 + 40) = 0;
      *(void *)(v102 + 4re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v102 + 56) = 0;
      *(_DWORD *)(v102 + 64) = 0;
      qword_26AF9D198 = v102;
      long long v103 = re::introspectionAllocator((re *)v102);
      long long v105 = re::introspect_BOOL((re *)1, v104);
      uint64_t v106 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v103 + 32))(v103, 72, 8);
      *(_DWORD *)uint64_t v106 = 1;
      *(void *)(v106 + re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = "enableDepthFeathering";
      *(void *)(v106 + 16) = v105;
      *(void *)(v106 + 24) = 0;
      *(void *)(v106 + 32) = 0x4910000001CLL;
      *(_DWORD *)(v106 + 40) = 0;
      *(void *)(v106 + 4re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v106 + 56) = 0;
      *(_DWORD *)(v106 + 64) = 0;
      qword_26AF9D1A0 = v106;
      uint64_t v107 = re::introspectionAllocator((re *)v106);
      uint64_t v109 = re::introspect_BOOL((re *)1, v108);
      uint64_t v110 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v107 + 32))(v107, 72, 8);
      *(_DWORD *)uint64_t v110 = 1;
      *(void *)(v110 + re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = "enableHDR";
      *(void *)(v110 + 16) = v109;
      *(void *)(v110 + 24) = 0;
      *(void *)(v110 + 32) = 0x4940000001DLL;
      *(_DWORD *)(v110 + 40) = 0;
      *(void *)(v110 + 4re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v110 + 56) = 0;
      *(_DWORD *)(v110 + 64) = 0;
      qword_26AF9D1A8 = v110;
      int v111 = re::introspectionAllocator((re *)v110);
      uint64_t v112 = re::introspect_RayTracedAmbientOcclusionSettings((re::IntrospectionBase **)1);
      uint64_t v113 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v111 + 32))(v111, 72, 8);
      *(_DWORD *)uint64_t v113 = 1;
      *(void *)(v113 + re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = "rayTracedAmbientOcclusionSettings";
      *(void *)(v113 + 16) = v112;
      *(void *)(v113 + 24) = 0;
      *(void *)(v113 + 32) = 0x4980000001ELL;
      *(_DWORD *)(v113 + 40) = 0;
      *(void *)(v113 + 4re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v113 + 56) = 0;
      *(_DWORD *)(v113 + 64) = 0;
      qword_26AF9D1B0 = v113;
      uint64_t v114 = re::introspectionAllocator((re *)v113);
      uint64_t v116 = re::introspect_float((re *)1, v115);
      uint64_t v117 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v114 + 32))(v114, 72, 8);
      *(_DWORD *)uint64_t v117 = 1;
      *(void *)(v117 + re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = "rayTracedShadowIntensity";
      *(void *)(v117 + 16) = v116;
      *(void *)(v117 + 24) = 0;
      *(void *)(v117 + 32) = 0x4B00000001FLL;
      *(_DWORD *)(v117 + 40) = 0;
      *(void *)(v117 + 4re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v117 + 56) = 0;
      *(_DWORD *)(v117 + 64) = 0;
      qword_26AF9D1B8 = v117;
      uint64_t v118 = re::introspectionAllocator((re *)v117);
      uint64_t v120 = re::introspect_AssetHandle((re *)1, v119);
      uint64_t v121 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v118 + 32))(v118, 72, 8);
      *(_DWORD *)uint64_t v121 = 1;
      *(void *)(v121 + re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = "rayTracedAmbientOcclusionCompositingMaterial";
      *(void *)(v121 + 16) = v120;
      *(void *)(v121 + 24) = 0;
      *(void *)(v121 + 32) = 0x42800000020;
      *(_DWORD *)(v121 + 40) = 0;
      *(void *)(v121 + 4re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v121 + 56) = 0;
      *(_DWORD *)(v121 + 64) = 0;
      qword_26AF9D1C0 = v121;
      uint64_t v122 = re::introspectionAllocator((re *)v121);
      long long v124 = re::introspect_AssetHandle((re *)1, v123);
      uint64_t v125 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v122 + 32))(v122, 72, 8);
      *(_DWORD *)uint64_t v125 = 1;
      *(void *)(v125 + re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = "rayTracedAmbientOcclusionCompositingMaterialDitherSRGB";
      *(void *)(v125 + 16) = v124;
      *(void *)(v125 + 24) = 0;
      *(void *)(v125 + 32) = 0x44000000021;
      *(_DWORD *)(v125 + 40) = 0;
      *(void *)(v125 + 4re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v125 + 56) = 0;
      *(_DWORD *)(v125 + 64) = 0;
      qword_26AF9D1C8 = v125;
      unint64_t v126 = re::introspectionAllocator((re *)v125);
      BOOL v128 = re::introspect_AssetHandle((re *)1, v127);
      uint64_t v129 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v126 + 32))(v126, 72, 8);
      *(_DWORD *)uint64_t v129 = 1;
      *(void *)(v129 + re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = "rayTracedAmbientOcclusionCompositingMaterialDitherLinear";
      *(void *)(v129 + 16) = v128;
      *(void *)(v129 + 24) = 0;
      *(void *)(v129 + 32) = 0x45800000022;
      *(_DWORD *)(v129 + 40) = 0;
      *(void *)(v129 + 4re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v129 + 56) = 0;
      *(_DWORD *)(v129 + 64) = 0;
      qword_26AF9D1D0 = v129;
      uint64_t v130 = re::introspectionAllocator((re *)v129);
      uint64_t v132 = re::introspect_BOOL((re *)1, v131);
      uint64_t v133 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v130 + 32))(v130, 72, 8);
      *(_DWORD *)uint64_t v133 = 1;
      *(void *)(v133 + re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = "enableBlurProvider";
      *(void *)(v133 + 16) = v132;
      *(void *)(v133 + 24) = 0;
      *(void *)(v133 + 32) = 0x4B400000024;
      *(_DWORD *)(v133 + 40) = 0;
      *(void *)(v133 + 4re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v133 + 56) = 0;
      *(_DWORD *)(v133 + 64) = 0;
      qword_26AF9D1D8 = v133;
      __cxa_guard_release(&qword_26AF9CFC0);
    }
  }
  *((void *)this + 2) = 0x74000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 33;
  *((void *)this + re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = &qword_26AF9D0D8;
  *((void *)this + 9) = re::internal::defaultConstruct<re::RenderGraphAREmitter>;
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::RenderGraphAREmitter>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::RenderGraphAREmitter>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::RenderGraphAREmitter>;
  re::IntrospectionRegistry::add(this, v3);
  long long v134 = v136;
}

re::RenderGraphAREmitter *re::internal::defaultConstruct<re::RenderGraphAREmitter>(int a1, int a2, re::RenderGraphAREmitter *this)
{
  return re::RenderGraphAREmitter::RenderGraphAREmitter(this);
}

void re::internal::defaultDestruct<re::RenderGraphAREmitter>(int a1, int a2, re::RenderGraphAREmitter *this)
{
}

uint64_t re::introspect_RenderGraphAREmitter(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RenderGraphAREmitter", (uint64_t (*)(re::internal *))re::allocInfo_RenderGraphAREmitter, (re::IntrospectionBase *(*)(void))re::initInfo_RenderGraphAREmitter, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::RenderGraphAREmitter>, this);
}

void re::GuidedFilterOcclusionStateData::~GuidedFilterOcclusionStateData(id *this)
{
  id v2 = this[13];
  if (v2)
  {

    this[13] = 0;
  }
  id v3 = this[12];
  if (v3)
  {

    this[12] = 0;
  }
  id v4 = this[11];
  if (v4)
  {

    this[11] = 0;
  }
  id v5 = this[10];
  if (v5)
  {

    this[10] = 0;
  }
  id v6 = this[9];
  if (v6)
  {

    this[9] = 0;
  }
  id v7 = this[8];
  if (v7)
  {

    this[8] = 0;
  }
  id v8 = this[7];
  if (v8)
  {

    this[7] = 0;
  }
  id v9 = this[6];
  if (v9)
  {

    this[6] = 0;
  }
  id v10 = this[5];
  if (v10)
  {

    this[5] = 0;
  }
  id v11 = this[4];
  if (v11)
  {

    this[4] = 0;
  }
  id v12 = this[3];
  if (v12)
  {

    this[3] = 0;
  }
  id v13 = this[2];
  if (v13)
  {

    this[2] = 0;
  }
  id v14 = this[1];
  if (v14)
  {

    this[1] = 0;
  }
}

void re::SceneUnderstandingGuidedFilterOcclusionConnectionData::~SceneUnderstandingGuidedFilterOcclusionConnectionData(re::SceneUnderstandingGuidedFilterOcclusionConnectionData *this)
{
}

void re::ARSegmentationEmitterCache::~ARSegmentationEmitterCache(re::ARSegmentationEmitterCache *this)
{
  re::StringID::destroyString((re::ARSegmentationEmitterCache *)((char *)this + 64));
  id v2 = (void *)*((void *)this + 5);
  if (v2)
  {

    *((void *)this + 5) = 0;
  }
  id v3 = (void *)*((void *)this + 4);
  if (v3)
  {

    *((void *)this + 4) = 0;
  }
  id v4 = (void *)*((void *)this + 3);
  if (v4)
  {

    *((void *)this + 3) = 0;
  }
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  void *v2;
  void *v3;
  void *v4;
  uint64_t vars8;

  re::StringID::destroyString((re::ARSegmentationEmitterCache *)((char *)this + 64));
  id v2 = (void *)*((void *)this + 5);
  if (v2)
  {

    *((void *)this + 5) = 0;
  }
  id v3 = (void *)*((void *)this + 4);
  if (v3)
  {

    *((void *)this + 4) = 0;
  }
  id v4 = (void *)*((void *)this + 3);
  if (v4)
  {

    *((void *)this + 3) = 0;
  }
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::RenderGraphFile::setRuntimeNodeSetting<re::DynamicString>(re::RenderGraphFile *a1, const re::StringID *a2, char *a3, char *a4)
{
  id v5 = a3;
  id v6 = &qword_268772000;
  {
    id v14 = a1;
    id v13 = a4;
    id v11 = a2;
    id v6 = &qword_268772000;
    a2 = v11;
    id v5 = a3;
    a4 = v13;
    int v10 = v9;
    a1 = v14;
    if (v10)
    {
      re::introspect<re::DynamicString>(void)::info = (uint64_t)re::IntrospectionInfo<re::DynamicString>::get(0, v11);
      id v6 = &qword_268772000;
      a1 = v14;
      a2 = v11;
      id v5 = a3;
      a4 = v13;
    }
  }
  id v7 = (const re::IntrospectionBase *)v6[452];
  return re::RenderGraphFile::setRuntimeNodeSetting(a1, a2, v7, v5, a4);
}

uint64_t re::supportedColorPixelFormat(id *this, const re::mtl::Device *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9D1F8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9D1F8))
  {
    _MergedGlobals_477 = [*this supportsFamily:1002];
    __cxa_guard_release(&qword_26AF9D1F8);
  }
  if (_MergedGlobals_477) {
    return 81;
  }
  else {
    return 115;
  }
}

uint64_t re::RenderGraphSFBSystemShellBlurProvider::prepareVCABlur(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  LODWORD(v4) = a3;
  uint64_t v522 = *MEMORY[0x263EF8340];
  id v6 = *(float32x4_t **)(a2 + 376);
  unint64_t v7 = a2 + 32;
  id v8 = (float32x4_t *)re::RenderGraphDataStore::tryGet<re::CameraData>(a2 + 32, a1);
  uint64_t v432 = a1;
  unint64_t v9 = re::RenderGraphDataStore::tryGet<re::SceneScope>(v7, a1);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9D1F0, memory_order_acquire) & 1) == 0) {
    goto LABEL_323;
  }
  while (1)
  {
    unint64_t v10 = qword_26AF9D1E8;
    size_t v11 = re::RigEvaluation::HashString::operator()((int)v498, *(char **)(v9 + 8));
    uint64_t v434 = (_anonymous_namespace_ *)re::RenderGraphDataStore::tryGet<re::MeshSortingCollection>(v7, ((v10 << 6) + (v10 >> 2) + v11 - 0x61C8864680B583E9) ^ v10);
    memset(v469, 0, 44);
    long long v467 = 0uLL;
    int v468 = 0;
    p_simd_float4x4 buf = (uint64_t)&v469[8];
    *(void *)&v469[44] = 0x7FFFFFFFLL;
    uint64_t v465 = &unk_26E71F350;
    v466 = (uint64_t *)v6;
    re::DynamicArray<re::VCARenderData::FrustumId>::setCapacity(&v466, 0);
    ++v468;
    re::HashTable<unsigned long long,re::Function<void ()(void)>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)&v469[8], (uint64_t)v6, 3);
    uint64_t v14 = a4;
    uint64_t v15 = a2;
    if (!v8) {
      goto LABEL_251;
    }
    unint64_t v9 = (unint64_t)&v8[9];
    if (v8[9].i32[0] == 1) {
      goto LABEL_251;
    }
    unint64_t v16 = *(unsigned int *)(a4 + 20);
    p_simd_float4x4 buf = *(unsigned int *)(a4 + 24);
    float v17 = *(float *)(a4 + 28);
    float v515 = &unk_26E71F390;
    uint64_t v516 = 0;
    int v517 = 0;
    unint64_t v18 = v8[8].u64[0];
    if (v18)
    {
      unint64_t v19 = 0;
      uint64_t v20 = 0;
      int v21 = (float32x4_t *)((char *)v8 + 156);
      while (v19 < 2)
      {
        uint64_t v22 = &v21[-1].f32[2];
        float32x4_t v23 = *v21;
        v21 += 4;
        float32x4_t v24 = vld1q_dup_f32(v22);
        v518[v19] = vdivq_f32(v23, v24);
        unint64_t v19 = ++v516;
        ++v517;
        if (v18 <= ++v20) {
          goto LABEL_8;
        }
      }
      goto LABEL_322;
    }
LABEL_8:
    int v429 = v4;
    unint64_t v25 = (unint64_t)"N2re18CameraProjFrustumsE";
    if (((unint64_t)"N2re18CameraProjFrustumsE" & 0x8000000000000000) != 0)
    {
      uint64_t v26 = (unsigned __int8 *)((unint64_t)"N2re18CameraProjFrustumsE" & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v27 = 5381;
      do
      {
        unint64_t v25 = v27;
        unsigned int v28 = *v26++;
        uint64_t v27 = (33 * v27) ^ v28;
      }
      while (v28);
    }
    unint64_t v29 = (v432 - 0x61C8864680B583E9 + (v25 << 6) + (v25 >> 2)) ^ v25;
    uint64_t v30 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a2 + 40) + 32))(*(void *)(a2 + 40), 64, 16);
    *(void *)uint64_t v30 = &unk_26E71F390;
    *(void *)(v30 + 16) = 0;
    *(_DWORD *)(v30 + 24) = 0;
    uint64_t v31 = v516;
    memcpy((void *)(v30 + 32), v518, 16 * v516);
    uint64_t v15 = a2;
    unint64_t v32 = *(void *)(a2 + 96);
    *(void *)(v30 + 16) = v31;
    if (v32)
    {
      unint64_t v32 = v29 % *(unsigned int *)(a2 + 120);
      uint64_t v33 = *(unsigned int *)(*(void *)(a2 + 104) + 4 * v32);
      if (v33 != 0x7FFFFFFF)
      {
        uint64_t v332 = *(void *)(a2 + 112);
        uint64_t v14 = a4;
        if (*(void *)(v332 + 24 * v33 + 8) == v29) {
          goto LABEL_19;
        }
        while (1)
        {
          LODWORD(v33) = *(_DWORD *)(v332 + 24 * v33) & 0x7FFFFFFF;
          if (v33 == 0x7FFFFFFF) {
            break;
          }
          if (*(void *)(v332 + 24 * v33 + 8) == v29) {
            goto LABEL_19;
          }
        }
      }
    }
    uint64_t v34 = *(unsigned int *)(a2 + 132);
    if (v34 == 0x7FFFFFFF)
    {
      uint64_t v34 = *(unsigned int *)(a2 + 128);
      int v35 = v34;
      uint64_t v14 = a4;
      if (v34 == *(_DWORD *)(a2 + 120))
      {
        re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(a2 + 96, 2 * *(_DWORD *)(a2 + 124));
        uint64_t v15 = a2;
        LODWORD(v32) = v29 % *(unsigned int *)(a2 + 120);
        int v35 = *(_DWORD *)(a2 + 128);
      }
      *(_DWORD *)(v15 + 12re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = v35 + 1;
      uint64_t v36 = *(void *)(v15 + 112);
      int v37 = *(_DWORD *)(v36 + 24 * v34);
    }
    else
    {
      uint64_t v36 = *(void *)(a2 + 112);
      int v37 = *(_DWORD *)(v36 + 24 * v34);
      *(_DWORD *)(a2 + 132) = v37 & 0x7FFFFFFF;
      uint64_t v14 = a4;
    }
    uint64_t v38 = 24 * v34;
    *(_DWORD *)(v36 + v3re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = v37 | 0x80000000;
    *(_DWORD *)(*(void *)(v15 + 112) + v3re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = *(_DWORD *)(*(void *)(v15 + 112) + 24 * v34) & 0x80000000 | *(_DWORD *)(*(void *)(v15 + 104) + 4 * v32);
    *(void *)(*(void *)(v15 + 112) + 24 * v34 + re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = v29;
    *(void *)(*(void *)(v15 + 112) + 24 * v34 + 16) = v30;
    *(_DWORD *)(*(void *)(v15 + 104) + 4 * v32) = v34;
    ++*(_DWORD *)(v15 + 124);
    ++*(_DWORD *)(v15 + 136);
LABEL_19:
    LODWORD(v4) = v429;
    if (v429) {
      goto LABEL_250;
    }
    *(_WORD *)uint64_t v14 = 0;
    uint64_t v39 = re::RenderGraphDataStore::tryGet<re::SceneScope>(v7, v432);
    uint64_t v15 = a2;
    if (!v39) {
      goto LABEL_250;
    }
    uint64_t v40 = re::RenderGraphDataStore::tryGet<re::BlurPlanesRenderFrameData>(v7, (int)"BlurPlanesRenderFrameData", *(char **)(v39 + 8));
    uint64_t v15 = a2;
    if (!v40 || !*(unsigned char *)(v40 + 81) && !*(unsigned char *)(v40 + 80)) {
      goto LABEL_250;
    }
    unint64_t v41 = *(void *)(v40 + 16);
    float v441 = (void *)v40;
    if ((unint64_t)v467 < v41)
    {
      uint64_t v42 = v40;
      re::DynamicArray<re::VCARenderData::FrustumId>::setCapacity(&v466, v41);
      unint64_t v41 = *(void *)(v42 + 16);
    }
    float v492 = 0;
    unint64_t v490 = 0;
    int v491 = 0;
    v489[1] = 0;
    v489[0] = v6;
    re::DynamicArray<re::MeshResourceDefinition::Level>::setCapacity(v489, v41);
    ++v491;
    __int16 v488 = 256;
    uint64_t v451 = v8 + 4;
    re::buildCullingFrustum((uint64_t)&v8[4], (float32x4_t *)v8[9].i32, v8[30].u8[10], &v488, (uint64_t)v498, v43, v44);
    v485.i64[0] = 0;
    v485.i32[2] = 0;
    re::DynamicInlineArray<re::DynamicInlineArray<re::PlaneF,6ul>,2ul>::copy(&v485, v498);
    if (!v485.i64[0]) {
      goto LABEL_319;
    }
    if (!v486[0]) {
      goto LABEL_320;
    }
    if (v8[3].i64[0]) {
      break;
    }
LABEL_321:
    re::internal::assertLog((re::internal *)6, v45, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, 0, 0);
    _os_crash();
    __break(1u);
LABEL_322:
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Capacity limit reached. DynamicInlineArray<T,N> cannot be resized.", "false", "ensureCapacity", 277);
    _os_crash();
    __break(1u);
LABEL_323:
    unint64_t v423 = (re *)__cxa_guard_acquire(&qword_26AF9D1F0);
    if (v423)
    {
      qword_26AF9D1E8 = re::hashString(v423, v424);
      __cxa_guard_release(&qword_26AF9D1F0);
    }
  }
  uint64_t v46 = (uint64_t)v519;
  float32x4_t v442 = v8[4];
  float32x4_t v444 = v487;
  unint64_t v47 = v8[8].u64[0];
  int v482 = 1;
  BOOL v484 = 0;
  uint64_t v483 = 0;
  unint64_t v481 = 0;
  float v480 = v6;
  re::DynamicOverflowArray<re::Matrix4x4<float>,2ul>::setCapacity(&v480, v47);
  v482 += 2;
  unint64_t v48 = v8[8].u64[0];
  int v477 = 1;
  unint64_t v7 = (unint64_t)&v475;
  float v479 = 0;
  uint64_t v478 = 0;
  unint64_t v476 = 0;
  float v475 = v6;
  re::DynamicOverflowArray<re::Matrix4x4<float>,2ul>::setCapacity(&v475, v48);
  v477 += 2;
  if (v8[8].i64[0])
  {
    unint64_t v4 = 0;
    LODWORD(v49) = 0;
    *((float *)&v49 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = (float)p_buf;
    float32x4_t v458 = (float32x4_t)COERCE_UNSIGNED_INT((float)v16);
    float32x4_t v461 = (float32x4_t)v49;
    unint64_t v16 = (unint64_t)v519;
    p_simd_float4x4 buf = (uint64_t)&buf;
    while (1)
    {
      re::Projection::computeMatrix4x4F((re::Projection *)(v9 + (v4 << 6)), (uint64_t)v496);
      unint64_t v51 = v8[3].u64[0];
      if (v51 <= v4) {
        goto LABEL_312;
      }
      re::RenderCamera::computeInverseTransform(&v451[2 * v4], (uint64_t)&v471);
      uint64_t v52 = 0;
      v519[0] = (float32x4_t)xmmword_234385420;
      v519[1] = (float32x4_t)xmmword_23437C520;
      v519[2] = (float32x4_t)xmmword_23435FD80;
      simd_float4 v520 = (simd_float4)xmmword_23435FBB0;
      do
      {
        buf.columns[v52] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v458, COERCE_FLOAT(*(_OWORD *)&v519[v52])), v461, *(float32x2_t *)v519[v52].f32, 1), (float32x4_t)xmmword_23435FD80, v519[v52], 2), (float32x4_t)xmmword_23435FBB0, v519[v52], 3);
        ++v52;
      }
      while (v52 != 4);
      uint64_t v53 = 0;
      float32x4_t v54 = (float32x4_t)buf.columns[0];
      float32x4_t v55 = (float32x4_t)buf.columns[1];
      float32x4_t v56 = (float32x4_t)buf.columns[2];
      float32x4_t v57 = (float32x4_t)buf.columns[3];
      v519[0] = (float32x4_t)xmmword_23435FD50;
      v519[1] = (float32x4_t)xmmword_23435FD60;
      v519[2] = (float32x4_t)xmmword_23435FD80;
      simd_float4 v520 = (simd_float4)xmmword_2343AC500;
      do
      {
        buf.columns[v53] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v54, COERCE_FLOAT(*(_OWORD *)&v519[v53])), v55, *(float32x2_t *)v519[v53].f32, 1), v56, v519[v53], 2), v57, v519[v53], 3);
        ++v53;
      }
      while (v53 != 4);
      uint64_t v58 = 0;
      float32x4_t v59 = (float32x4_t)buf.columns[0];
      float32x4_t v60 = (float32x4_t)buf.columns[1];
      float32x4_t v61 = (float32x4_t)buf.columns[2];
      float32x4_t v62 = (float32x4_t)buf.columns[3];
      v519[0] = *(float32x4_t *)v496;
      v519[1] = *(float32x4_t *)&v496[16];
      v519[2] = *(float32x4_t *)&v496[32];
      simd_float4 v520 = v497;
      do
      {
        buf.columns[v58] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v59, COERCE_FLOAT(*(_OWORD *)&v519[v58])), v60, *(float32x2_t *)v519[v58].f32, 1), v61, v519[v58], 2), v62, v519[v58], 3);
        ++v58;
      }
      while (v58 != 4);
      uint64_t v63 = 0;
      float32x4_t v64 = (float32x4_t)buf.columns[0];
      float32x4_t v65 = (float32x4_t)buf.columns[1];
      float32x4_t v66 = (float32x4_t)buf.columns[2];
      float32x4_t v67 = (float32x4_t)buf.columns[3];
      v519[0] = v471;
      v519[1] = v472;
      v519[2] = v473;
      simd_float4 v520 = v474;
      do
      {
        buf.columns[v63] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v64, COERCE_FLOAT(*(_OWORD *)&v519[v63])), v65, *(float32x2_t *)v519[v63].f32, 1), v66, v519[v63], 2), v67, v519[v63], 3);
        ++v63;
      }
      while (v63 != 4);
      re::DynamicOverflowArray<re::Matrix4x4<float>,2ul>::add((uint64_t)&v480, (uint64_t)&buf);
      unint64_t v29 = v481;
      if (v481 <= v4) {
        break;
      }
      uint64_t v68 = &v483;
      if ((v482 & 1) == 0) {
        uint64_t v68 = v484;
      }
      simd_float4x4 buf = __invert_f4(*(simd_float4x4 *)&v68[8 * v4]);
      re::DynamicOverflowArray<re::Matrix4x4<float>,2ul>::add((uint64_t)&v475, (uint64_t)&buf);
      if (v8[8].i64[0] <= ++v4) {
        goto LABEL_44;
      }
    }
LABEL_313:
    uint64_t v493 = 0;
    long long v495 = 0u;
    memset(&buf, 0, sizeof(buf));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    v519[0].i32[0] = 136315906;
    *(void *)(v46 + 4) = "operator[]";
    v519[0].i16[6] = 1024;
    *(_DWORD *)(v46 + 14) = 858;
    v519[1].i16[1] = 2048;
    *(void *)(v46 + 20) = v4;
    v519[1].i16[6] = 2048;
    *(void *)(v46 + 30) = v29;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_314:
    v471.i64[0] = 0;
    simd_float4 v520 = 0u;
    long long v521 = 0u;
    memset(v519, 0, sizeof(v519));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)unsigned int v496 = 136315906;
    *(void *)&v496[4] = "operator[]";
    *(_WORD *)&v496[12] = 1024;
    *(_DWORD *)&v496[14] = 789;
    *(_WORD *)&v496[18] = 2048;
    *(void *)&v496[20] = v4;
    *(_WORD *)&v496[28] = 2048;
    *(void *)&v496[30] = p_buf;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_315:
    re::internal::assertLog((re::internal *)6, v375, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, 0, 0);
    _os_crash();
    __break(1u);
LABEL_316:
    v471.i64[0] = 0;
    simd_float4 v520 = 0u;
    long long v521 = 0u;
    memset(v519, 0, sizeof(v519));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)unsigned int v496 = 136315906;
    *(void *)&v496[4] = "operator[]";
    *(_WORD *)&v496[12] = 1024;
    *(_DWORD *)&v496[14] = 789;
    *(_WORD *)&v496[18] = 2048;
    *(void *)&v496[20] = v16;
    *(_WORD *)&v496[28] = 2048;
    *(void *)&v496[30] = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_317:
    v471.i64[0] = 0;
    simd_float4 v520 = 0u;
    long long v521 = 0u;
    memset(v519, 0, sizeof(v519));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)unsigned int v496 = 136315906;
    *(void *)&v496[4] = "operator[]";
    *(_WORD *)&v496[12] = 1024;
    *(_DWORD *)&v496[14] = 789;
    *(_WORD *)&v496[18] = 2048;
    *(void *)&v496[20] = p_buf;
    *(_WORD *)&v496[28] = 2048;
    *(void *)&v496[30] = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_318;
  }
LABEL_44:
  v425 = v6;
  unsigned int v69 = v441;
  if (v441[2])
  {
    unint64_t v70 = 0;
    float32x4_t v71 = vmulq_f32(v444, v444);
    v71.i32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v71, 2), vaddq_f32(v71, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v71.f32, 1))).u32[0];
    float v72 = sqrtf(v71.f32[0]);
    float32x2_t v73 = vrsqrte_f32((float32x2_t)v71.u32[0]);
    float32x2_t v74 = vmul_f32(v73, vrsqrts_f32((float32x2_t)v71.u32[0], vmul_f32(v73, v73)));
    float32x4_t v75 = vmulq_n_f32(v444, vmul_f32(v74, vrsqrts_f32((float32x2_t)v71.u32[0], vmul_f32(v74, v74))).f32[0]);
    float32x4_t v76 = vmulq_f32(v444, v442);
    p_simd_float4x4 buf = (uint64_t)&buf;
    float32x4_t v459 = vsubq_f32(v442, vmulq_n_f32(v75, (float)(v444.f32[3]+ vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v76, 2), vaddq_f32(v76, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v76.f32, 1))).f32[0])/ v72));
    float32x4_t v462 = vnegq_f32(v75);
    __asm { FMOV            V0.4S, #1.0 }
    float32x4_t v426 = _Q0;
    uint64_t v46 = (uint64_t)v519;
    id v6 = &v464;
    while (1)
    {
      uint64_t v431 = v69[4];
      unint64_t v4 = v431 + 144 * v70;
      unint64_t v9 = v4 + 64;
      char isBoundingBoxInsidePlanesArray = re::isBoundingBoxInsidePlanesArray(v4 + 64, &v485, (float32x4_t *)v4);
      WORD2(v470) = 0;
      if ((isBoundingBoxInsidePlanesArray & 1) == 0 && v8[29].i8[8])
      {
        BYTE5(v470) = 1;
LABEL_53:
        re::DynamicArray<re::BlurPlaneTypeData>::add((_anonymous_namespace_ *)v489, &v470);
        goto LABEL_164;
      }
      *(unsigned char *)a4 = 1;
      if (!*(unsigned char *)(v431 + 144 * v70 + 128))
      {
        BYTE5(v470) = 1;
        goto LABEL_53;
      }
      uint64_t v82 = (float32x4_t *)(v431 + 144 * v70);
      float32x4_t v83 = v82[5];
      unint64_t v7 = (unint64_t)&v82[5];
      float32x4_t v84 = v83;
      uint32x4_t v85 = (uint32x4_t)vcgtq_f32(*(float32x4_t *)v9, v83);
      v85.i32[3] = v85.i32[2];
      if ((vmaxvq_u32(v85) & 0x80000000) != 0)
      {
        uint64_t v427 = 0;
        uint64_t v428 = 0;
      }
      else
      {
        v86.i64[0] = 0x3F0000003F000000;
        v86.i64[1] = 0x3F0000003F000000;
        float32x4_t v87 = vmulq_f32(vaddq_f32(*(float32x4_t *)v9, v84), v86);
        uint64_t v427 = v87.i64[1];
        uint64_t v428 = v87.i64[0];
      }
      unint64_t v430 = v70;
      if (v8[8].i64[0]) {
        break;
      }
      float32x4_t v445 = 0u;
      float32x4_t v446 = 0u;
      float32x4_t v449 = 0u;
      float32x4_t v450 = 0u;
      float32x4_t v452 = v426;
      float32x4_t v92 = 0uLL;
LABEL_141:
      float32x4_t v456 = v92;
      LODWORD(v470) = DWORD2(v467);
      re::DynamicArray<re::BlurPlaneTypeData>::add((_anonymous_namespace_ *)v489, &v470);
      unint64_t v70 = v430;
      uint64_t v270 = v431 + 144 * v430;
      uint64_t v273 = *(void *)(v270 + 96);
      char v271 = (uint64_t *)(v270 + 96);
      uint64_t v272 = v273;
      uint64_t v274 = v434;
      if (v434
        && (uint64_t v274 = (_anonymous_namespace_ *)re::HashTable<unsigned long long,re::MeshSortingCollection::EntitySortingData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)v434, v271)) != 0)
      {
        unint64_t v16 = *(void *)v274;
        int v275 = *((_DWORD *)v274 + 2);
      }
      else
      {
        int v275 = 0;
        unint64_t v16 = 0;
      }
      float32x4_t v276 = v456;
      uint64_t v277 = *((void *)&v467 + 1);
      if (*((void *)&v467 + 1) >= (unint64_t)v467)
      {
        unint64_t v278 = *((void *)&v467 + 1) + 1;
        if ((unint64_t)v467 < *((void *)&v467 + 1) + 1)
        {
          if (v466)
          {
            unint64_t v279 = 8;
            if ((void)v467) {
              unint64_t v279 = 2 * v467;
            }
            if (v279 <= v278) {
              unint64_t v280 = *((void *)&v467 + 1) + 1;
            }
            else {
              unint64_t v280 = v279;
            }
            re::DynamicArray<re::VCARenderData::FrustumId>::setCapacity(&v466, v280);
          }
          else
          {
            re::DynamicArray<re::VCARenderData::FrustumId>::setCapacity(&v466, v278);
            ++v468;
          }
          float32x4_t v276 = v456;
        }
        uint64_t v277 = *((void *)&v467 + 1);
      }
      uint64_t v281 = *(void *)v469 + 112 * v277;
      *(void *)uint64_t v281 = v272;
      *(void *)(v281 + re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = v16;
      *(_DWORD *)(v281 + 16) = v275;
      *(float32x4_t *)(v281 + 32) = v449;
      *(float32x4_t *)(v281 + 4re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = v450;
      *(float32x4_t *)(v281 + 64) = v445;
      *(float32x4_t *)(v281 + 80) = v446;
      *(float32x4_t *)(v281 + 96) = v276;
      ++*((void *)&v467 + 1);
      ++v468;
      buf.columns[0] = (simd_float4)v452;
      buf.columns[1].i64[1] = v427;
      buf.columns[1].i64[0] = v428;
      unint64_t v282 = 0xBF58476D1CE4E5B9 * (*v271 ^ ((unint64_t)*v271 >> 30));
      unint64_t v283 = (0x94D049BB133111EBLL * (v282 ^ (v282 >> 27))) ^ ((0x94D049BB133111EBLL * (v282 ^ (v282 >> 27))) >> 31);
      if (*(void *)&v469[8])
      {
        unint64_t v284 = v283 % *(unsigned int *)&v469[32];
        uint64_t v285 = *(unsigned int *)(*(void *)&v469[16] + 4 * v284);
        if (v285 != 0x7FFFFFFF)
        {
          while (*(void *)(*(void *)&v469[24] + (v285 << 6) + 16) != *v271)
          {
            uint64_t v285 = *(_DWORD *)(*(void *)&v469[24] + (v285 << 6) + 8) & 0x7FFFFFFF;
            if (v285 == 0x7FFFFFFF) {
              goto LABEL_163;
            }
          }
          goto LABEL_164;
        }
      }
      else
      {
        LODWORD(v284) = 0;
      }
LABEL_163:
      re::HashTable<unsigned long long,re::TintContext,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove((uint64_t)&v469[8], v284, v283, v271, (uint64_t)&buf);
      ++*(_DWORD *)&v469[48];
LABEL_164:
      ++v70;
      unsigned int v69 = v441;
      if (v441[2] <= v70) {
        goto LABEL_165;
      }
    }
    unint64_t v29 = 0;
    long long v88 = (float32x4_t *)(v431 + 144 * v430);
    float v443 = &v88[6].i8[8];
    unint64_t v433 = v88 + 7;
    uint64_t v89 = v481;
    uint64_t v90 = v484;
    if (v482) {
      uint64_t v90 = &v483;
    }
    unsigned int v448 = v90;
    uint64_t v91 = v479;
    if (v477) {
      uint64_t v91 = &v478;
    }
    uint64_t v435 = v91;
    unint64_t v436 = v476;
    float32x4_t v445 = 0u;
    float32x4_t v446 = 0u;
    float32x4_t v449 = 0u;
    float32x4_t v450 = 0u;
    float32x4_t v92 = 0uLL;
    float32x4_t v452 = v426;
    while (2)
    {
      if (v29 == v89)
      {
        *(void *)unsigned int v496 = 0;
        long long v495 = 0u;
        memset(&buf, 0, sizeof(buf));
        unint64_t v9 = &_os_log_internal;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        v519[0].i32[0] = 136315906;
        *(uint64_t *)((char *)v519[0].i64 + 4) = (uint64_t)"operator[]";
        v519[0].i16[6] = 1024;
        *(__int32 *)((char *)&v519[0].i32[3] + 2) = 858;
        v519[1].i16[1] = 2048;
        *(uint64_t *)((char *)v519[1].i64 + 4) = v89;
        v519[1].i16[6] = 2048;
        *(uint64_t *)((char *)&v519[1].i64[1] + 6) = v89;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_308:
        re::internal::assertLog((re::internal *)6, v101, v105, v103, v104, v106, v107, v102, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, v29, v108);
        _os_crash();
        __break(1u);
LABEL_309:
        v471.i64[0] = 0;
        simd_float4 v520 = 0u;
        long long v521 = 0u;
        memset(v519, 0, sizeof(v519));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)unsigned int v496 = 136315906;
        *(void *)&v496[4] = "operator[]";
        *(_WORD *)&v496[12] = 1024;
        *(_DWORD *)&v496[14] = 797;
        *(_WORD *)&v496[18] = 2048;
        *(void *)&v496[20] = v4;
        *(_WORD *)&v496[28] = 2048;
        *(void *)&v496[30] = v6;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_310:
        uint64_t v493 = 0;
        long long v495 = 0u;
        memset(&buf, 0, sizeof(buf));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)unsigned int v496 = 136315906;
        *(void *)&v496[4] = "operator[]";
        *(_WORD *)&v496[12] = 1024;
        *(_DWORD *)&v496[14] = 858;
        *(_WORD *)&v496[18] = 2048;
        *(void *)&v496[20] = v29;
        *(_WORD *)&v496[28] = 2048;
        *(void *)&v496[30] = v436;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_311:
        re::internal::assertLog((re::internal *)6, v167, *(double *)v174.columns[0].i64, *(double *)v174.columns[1].i64, *(double *)v174.columns[2].i64, *(double *)v174.columns[3].i64, *(double *)v170.i64, *(double *)v171.i64, *(double *)v169.i64, *(double *)v168.i64, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, 0, 0);
        _os_crash();
        __break(1u);
LABEL_312:
        re::internal::assertLog((re::internal *)6, v50, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, v4, v51);
        _os_crash();
        __break(1u);
        goto LABEL_313;
      }
      float32x4_t v453 = v92;
      uint64_t v93 = 0;
      unint64_t v16 = (unint64_t)&v448[8 * v29];
      float32x4_t v94 = *(float32x4_t *)v16;
      float32x4_t v95 = *(float32x4_t *)(v16 + 16);
      float32x4_t v96 = *(float32x4_t *)(v16 + 32);
      float32x4_t v97 = *(float32x4_t *)(v16 + 48);
      float32x4_t v98 = *(float32x4_t *)(v4 + 16);
      float32x4_t v99 = *(float32x4_t *)(v4 + 32);
      simd_float4 v100 = *(simd_float4 *)(v4 + 48);
      v519[0] = *(float32x4_t *)v4;
      v519[1] = v98;
      v519[2] = v99;
      simd_float4 v520 = v100;
      do
      {
        buf.columns[v93] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v94, COERCE_FLOAT(*(_OWORD *)&v519[v93])), v95, *(float32x2_t *)v519[v93].f32, 1), v96, v519[v93], 2), v97, v519[v93], 3);
        ++v93;
      }
      while (v93 != 4);
      v519[0] = (float32x4_t)buf.columns[0];
      v519[1] = (float32x4_t)buf.columns[1];
      v519[2] = (float32x4_t)buf.columns[2];
      simd_float4 v520 = buf.columns[3];
      re::AABB::transform((float32x4_t *)(v4 + 64), v519, (uint64_t)&v471);
      LODWORD(v104) = v471.i32[1];
      LODWORD(v103) = v471.i32[0];
      LODWORD(v105) = v471.i32[2];
      LODWORD(v107) = v472.i32[1];
      LODWORD(v106) = v472.i32[0];
      if (v29 || v471.f32[2] >= 0.0 || (LODWORD(v102) = v472.i32[2], v472.f32[2] <= 0.0))
      {
        unint64_t v108 = v8[3].u64[0];
        float32x4_t v92 = v453;
        if (v108 <= v29) {
          goto LABEL_308;
        }
        if (v436 <= v29) {
          goto LABEL_310;
        }
        float32x4_t v109 = v451[2 * v29];
        uint64_t v110 = (float32x4_t *)&v435[8 * v29];
        float32x4_t v111 = v110[1];
        float32x4_t v112 = v110[2];
        float32x4_t v113 = v110[3];
        float32x4_t v114 = vmulq_n_f32(*v110, v17 + v472.f32[0]);
        float32x4_t v115 = vaddq_f32(v113, vmlaq_n_f32(vmlaq_n_f32(v114, v111, v471.f32[1] - v17), v112, v471.f32[2]));
        float32x4_t v116 = vdivq_f32(v115, (float32x4_t)vdupq_laneq_s32((int32x4_t)v115, 3));
        float32x4_t v117 = vmulq_n_f32(*v110, v471.f32[0] - v17);
        float32x4_t v118 = vaddq_f32(v113, vmlaq_n_f32(vmlaq_n_f32(v117, v111, v471.f32[1] - v17), v112, v471.f32[2]));
        float32x4_t v119 = vdivq_f32(v118, (float32x4_t)vdupq_laneq_s32((int32x4_t)v118, 3));
        float32x4_t v120 = vaddq_f32(v113, vmlaq_n_f32(vmlaq_n_f32(v114, v111, v17 + v472.f32[1]), v112, v471.f32[2]));
        float32x4_t v121 = vdivq_f32(v120, (float32x4_t)vdupq_laneq_s32((int32x4_t)v120, 3));
        float32x4_t v122 = vaddq_f32(v113, vmlaq_n_f32(vmlaq_n_f32(v117, v111, v17 + v472.f32[1]), v112, v471.f32[2]));
        float32x4_t v123 = vdivq_f32(v122, (float32x4_t)vdupq_laneq_s32((int32x4_t)v122, 3));
        float32x4_t v124 = vsubq_f32(v116, v109);
        float32x4_t v125 = vsubq_f32(v121, v116);
        int8x16_t v126 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v125, (int32x4_t)v125), (int8x16_t)v125, 0xCuLL), vnegq_f32(v124)), v125, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v124, (int32x4_t)v124), (int8x16_t)v124, 0xCuLL));
        float32x4_t v127 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v126, (int32x4_t)v126), v126, 0xCuLL);
        float32x4_t v128 = vmulq_f32(v109, v127);
        v125.f32[0] = -vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v128, 2), vaddq_f32(v128, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v128.f32, 1))).f32[0];
        float32x4_t v129 = v127;
        v129.i32[3] = v125.i32[0];
        float32x4_t v130 = vsubq_f32(v123, v109);
        float32x4_t v131 = vsubq_f32(v119, v123);
        int8x16_t v132 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v131, (int32x4_t)v131), (int8x16_t)v131, 0xCuLL), vnegq_f32(v130)), v131, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v130, (int32x4_t)v130), (int8x16_t)v130, 0xCuLL));
        float32x4_t v133 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v132, (int32x4_t)v132), v132, 0xCuLL);
        float32x4_t v134 = vmulq_f32(v109, v133);
        v112.f32[0] = -vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v134, 2), vaddq_f32(v134, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v134.f32, 1))).f32[0];
        float32x4_t v135 = v133;
        v135.i32[3] = v112.i32[0];
        if (!v29)
        {
          float32x4_t v157 = vsubq_f32(v121, v109);
          float32x4_t v158 = vsubq_f32(v123, v121);
          int8x16_t v159 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v158, (int32x4_t)v158), (int8x16_t)v158, 0xCuLL), vnegq_f32(v157)), v158, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v157, (int32x4_t)v157), (int8x16_t)v157, 0xCuLL));
          float32x4_t v160 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v159, (int32x4_t)v159), v159, 0xCuLL);
          float32x4_t v161 = vmulq_f32(v109, v160);
          v160.f32[3] = -vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v161, 2), vaddq_f32(v161, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v161.f32, 1))).f32[0];
          float32x4_t v162 = vsubq_f32(v119, v109);
          float32x4_t v163 = vsubq_f32(v116, v119);
          int8x16_t v164 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v163, (int32x4_t)v163), (int8x16_t)v163, 0xCuLL), vnegq_f32(v162)), v163, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v162, (int32x4_t)v162), (int8x16_t)v162, 0xCuLL));
          float32x4_t v165 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v164, (int32x4_t)v164), v164, 0xCuLL);
          float32x4_t v454 = *v451;
          float32x4_t v166 = vmulq_f32(v109, v165);
          v165.f32[3] = -vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v166, 2), vaddq_f32(v166, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v166.f32, 1))).f32[0];
          float32x4_t v445 = v165;
          float32x4_t v446 = v160;
          float32x4_t v449 = v135;
          float32x4_t v450 = v129;
          goto LABEL_77;
        }
        int32x4_t v136 = (int32x4_t)vmulq_f32(v453, v453);
        v136.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v136, 2), vadd_f32(*(float32x2_t *)v136.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v136.i8, 1))).u32[0];
        float32x2_t v137 = vrsqrte_f32((float32x2_t)v136.u32[0]);
        float32x2_t v138 = vmul_f32(v137, vrsqrts_f32((float32x2_t)v136.u32[0], vmul_f32(v137, v137)));
        float32x4_t v139 = vmulq_n_f32(v453, vmul_f32(v138, vrsqrts_f32((float32x2_t)v136.u32[0], vmul_f32(v138, v138))).f32[0]);
        int32x4_t v140 = (int32x4_t)vmulq_f32(v449, v449);
        v140.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v140, 2), vadd_f32(*(float32x2_t *)v140.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v140.i8, 1))).u32[0];
        float32x2_t v141 = vrsqrte_f32((float32x2_t)v140.u32[0]);
        float32x2_t v142 = vmul_f32(v141, vrsqrts_f32((float32x2_t)v140.u32[0], vmul_f32(v141, v141)));
        float32x4_t v143 = vmulq_f32(v139, vmulq_n_f32(v449, vmul_f32(v142, vrsqrts_f32((float32x2_t)v140.u32[0], vmul_f32(v142, v142))).f32[0]));
        int32x4_t v144 = (int32x4_t)vmulq_f32(v135, v135);
        v144.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v144, 2), vadd_f32(*(float32x2_t *)v144.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v144.i8, 1))).u32[0];
        float32x2_t v145 = vrsqrte_f32((float32x2_t)v144.u32[0]);
        float32x2_t v146 = vmul_f32(v145, vrsqrts_f32((float32x2_t)v144.u32[0], vmul_f32(v145, v145)));
        float32x4_t v147 = vmulq_f32(v139, vmulq_n_f32(v133, vmul_f32(v146, vrsqrts_f32((float32x2_t)v144.u32[0], vmul_f32(v146, v146))).f32[0]));
        int32x4_t v148 = vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_lane_s16(vmovn_s32(vcgtq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v147, 2), vaddq_f32(v147, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v147.f32, 1))), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v143, 2), vaddq_f32(v143, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v143.f32, 1))))), 0)), 0x1FuLL);
        int32x4_t v149 = (int32x4_t)vmulq_f32(v450, v450);
        v149.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v149, 2), vadd_f32(*(float32x2_t *)v149.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v149.i8, 1))).u32[0];
        *(float32x2_t *)v144.i8 = vrsqrte_f32((float32x2_t)v149.u32[0]);
        *(float32x2_t *)v144.i8 = vmul_f32(*(float32x2_t *)v144.i8, vrsqrts_f32((float32x2_t)v149.u32[0], vmul_f32(*(float32x2_t *)v144.i8, *(float32x2_t *)v144.i8)));
        float32x4_t v150 = vmulq_f32(v139, vmulq_n_f32(v450, vmul_f32(*(float32x2_t *)v144.i8, vrsqrts_f32((float32x2_t)v149.u32[0], vmul_f32(*(float32x2_t *)v144.i8, *(float32x2_t *)v144.i8))).f32[0]));
        int32x4_t v151 = (int32x4_t)vmulq_f32(v129, v129);
        v151.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v151, 2), vadd_f32(*(float32x2_t *)v151.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v151.i8, 1))).u32[0];
        float32x2_t v152 = vrsqrte_f32((float32x2_t)v151.u32[0]);
        float32x2_t v153 = vmul_f32(v152, vrsqrts_f32((float32x2_t)v151.u32[0], vmul_f32(v152, v152)));
        float32x4_t v154 = vmulq_f32(v139, vmulq_n_f32(v127, vmul_f32(v153, vrsqrts_f32((float32x2_t)v151.u32[0], vmul_f32(v153, v153))).f32[0]));
        int8x16_t v155 = vbslq_s8((int8x16_t)vcltzq_s32(v148), (int8x16_t)v135, (int8x16_t)v449);
        if (vmovn_s32(vcgtq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v154, 2), vaddq_f32(v154, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v154.f32, 1))), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v150, 2), vaddq_f32(v150, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v150.f32, 1))))).u8[0])unsigned int v156 = -1; {
        else
        }
          unsigned int v156 = 0;
        float32x4_t v449 = (float32x4_t)v155;
        float32x4_t v450 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_n_s32(v156), (int8x16_t)v129, (int8x16_t)v450);
      }
      else
      {
        *(unsigned char *)(a4 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 1;
        unint64_t v108 = v8[3].u64[0];
        if (!v108) {
          goto LABEL_308;
        }
        float32x4_t v454 = *v451;
        float32x4_t v449 = 0u;
        float32x4_t v450 = 0u;
        float32x4_t v445 = 0u;
        float32x4_t v446 = 0u;
LABEL_77:
        simd_float4x4 v523 = __invert_f4(*(simd_float4x4 *)v4);
        float32x4_t v168 = (float32x4_t)v523.columns[0];
        float32x4_t v169 = (float32x4_t)v523.columns[1];
        float32x4_t v170 = (float32x4_t)v523.columns[2];
        float32x4_t v171 = (float32x4_t)v523.columns[3];
        v523.columns[0] = *(simd_float4 *)v7;
        v523.columns[1] = *(simd_float4 *)v9;
        float32x4_t v172 = vsubq_f32(*(float32x4_t *)v7, *(float32x4_t *)v9);
        buf.columns[0] = (simd_float4)v172;
        v523.columns[0] = (simd_float4)vaddq_f32((float32x4_t)v523.columns[0], (float32x4_t)v523.columns[1]);
        v523.columns[1].i64[0] = 0x3F0000003F000000;
        v523.columns[1].i64[1] = 0x3F0000003F000000;
        float32x4_t v173 = vmulq_f32((float32x4_t)v523.columns[0], (float32x4_t)v523.columns[1]);
        simd_float4x4 v174 = *(simd_float4x4 *)v4;
        if (*v443 == 5)
        {
          float32x4_t v175 = *v433;
        }
        else
        {
          float32x4_t v176 = vaddq_f32((float32x4_t)v174.columns[3], vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v174.columns[0], v173.f32[0]), (float32x4_t)v174.columns[1], *(float32x2_t *)v173.f32, 1), (float32x4_t)v174.columns[2], v173, 2));
          float32x4_t v175 = vdivq_f32(v176, (float32x4_t)vdupq_laneq_s32((int32x4_t)v176, 3));
        }
        uint64_t v177 = 2;
        if (v172.f32[1] <= v172.f32[2]) {
          uint64_t v177 = 1;
        }
        BOOL v178 = v172.f32[0] > v172.f32[2] || v172.f32[0] > v172.f32[1];
        if (!v178) {
          uint64_t v177 = 0;
        }
        if (*(float *)((unint64_t)&buf | (4 * v177)) >= 0.03)
        {
          if (!v8[3].i64[0]) {
            goto LABEL_311;
          }
          float v183 = v8[5].f32[0];
          float v184 = v8[5].f32[1];
          float v185 = v8[5].f32[2];
          v168.i32[0] = v8[5].i32[3];
          float v186 = (float)(v183 + v183) * v168.f32[0];
          v168.f32[0] = (float)((float)(v183 + v183) * v185) + (float)((float)(v184 + v184) * v168.f32[0]);
          float v438 = v168.f32[0];
          float v439 = (float)((float)(v184 + v184) * v185) - v186;
          float v440 = 1.0 - (float)((float)((float)(v183 + v183) * v183) + (float)((float)(v184 + v184) * v184));
          v168.f32[1] = v439;
          v168.f32[2] = v440;
          float32x4_t v455 = v168;
          simd_float4x4 v524 = __invert_f4(v174);
          float32x4_t v92 = v455;
          int8x16_t v187 = (int8x16_t)vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32((float32x4_t)v524.columns[0], v438), (float32x4_t)v524.columns[1], v439), (float32x4_t)v524.columns[2], v440);
          if (*(float *)v187.i32 >= 0.0) {
            uint64_t v188 = (float *)v7;
          }
          else {
            uint64_t v188 = (float *)(v4 + 64);
          }
          v187.i32[0] = vextq_s8(v187, v187, 8uLL).u32[0];
          *(int32x2_t *)v187.i8 = vcltz_f32(*(float32x2_t *)v187.i8);
          uint64_t v189 = 84;
          if (v187.i8[4]) {
            uint64_t v189 = 68;
          }
          float v190 = *v188;
          uint64_t v191 = 88;
          if (v187.i8[0]) {
            uint64_t v191 = 72;
          }
          float32x4_t v192 = vaddq_f32(*(float32x4_t *)(v4 + 48), vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(*(float32x4_t *)v4, v190), *(float32x4_t *)(v4 + 16), *(float *)(v4 + v189)), *(float32x4_t *)(v4 + 32), *(float *)(v4 + v191)));
          float32x4_t v182 = vmulq_f32(v455, vdivq_f32(v192, (float32x4_t)vdupq_laneq_s32((int32x4_t)v192, 3)));
        }
        else
        {
          v155.i32[1] = v454.i32[1];
          float32x4_t v179 = vaddq_f32(v171, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v168, v454.f32[0]), v169, *(float32x2_t *)v454.f32, 1), v170, v454, 2));
          float32x4_t v180 = xmmword_2344150A0[v177];
          float32x4_t v181 = vmulq_f32(vsubq_f32(vdivq_f32(v179, (float32x4_t)vdupq_laneq_s32((int32x4_t)v179, 3)), v173), v180);
          if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v181, 2), vaddq_f32(v181, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v181.f32, 1))).f32[0] >= 0.0)v174.columns[3].f32[0] = 1.0; {
          else
          }
            v174.columns[3].f32[0] = -1.0;
          v174.columns[3] = (simd_float4)vmulq_n_f32(v180, v174.columns[3].f32[0]);
          float32x4_t v92 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v174.columns[0], v174.columns[3].f32[0]), (float32x4_t)v174.columns[1], *(float32x2_t *)v174.columns[3].f32, 1), (float32x4_t)v174.columns[2], (float32x4_t)v174.columns[3], 2);
          float32x4_t v182 = vmulq_f32(v175, v92);
        }
        v92.f32[3] = -vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v182, 2), vaddq_f32(v182, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v182.f32, 1))).f32[0];
      }
      float32x4_t v193 = *(float32x4_t *)v9;
      float32x4_t v194 = *(float32x4_t *)v7;
      uint32x4_t v195 = (uint32x4_t)vcgtq_f32(*(float32x4_t *)v9, *(float32x4_t *)v7);
      v195.i32[3] = v195.i32[2];
      if ((vmaxvq_u32(v195) & 0x80000000) != 0)
      {
        float v198 = 0.0;
        v197.i64[0] = 0;
      }
      else
      {
        v196.i64[0] = 0x3F0000003F000000;
        v196.i64[1] = 0x3F0000003F000000;
        float32x4_t v197 = vmulq_f32(vaddq_f32(v193, v194), v196);
        float v198 = v197.f32[2];
      }
      float32x4_t v199 = *(float32x4_t *)(v4 + 16);
      float32x4_t v200 = *(float32x4_t *)(v4 + 32);
      float32x4_t v201 = *(float32x4_t *)(v4 + 48);
      float32x4_t v202 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v197.f32, 1);
      *(float *)v155.i32 = v198;
      float32x4_t v203 = vaddq_f32(v201, vmlaq_n_f32(vmlaq_f32(vmulq_n_f32(*(float32x4_t *)v4, v193.f32[0]), v202, v199), v200, v198));
      float32x4_t v204 = vdivq_f32(v203, (float32x4_t)vdupq_laneq_s32((int32x4_t)v203, 3));
      float32x4_t v205 = vaddq_f32(v201, vmlaq_n_f32(vmlaq_f32(vmulq_n_f32(*(float32x4_t *)v4, v194.f32[0]), v202, v199), v200, v198));
      float32x4_t v206 = vdivq_f32(v205, (float32x4_t)vdupq_laneq_s32((int32x4_t)v205, 3));
      float32x4_t v207 = vmulq_f32(vsubq_f32(v204, v459), v462);
      float32x4_t v208 = vmulq_f32(vsubq_f32(v206, v459), v462);
      float32x4_t v209 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v207, 2), vaddq_f32(v207, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v207.f32, 1)));
      float32x4_t v210 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v208, 2), vaddq_f32(v208, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v208.f32, 1)));
      if (v209.f32[0] < 0.0 || v210.f32[0] < 0.0)
      {
        if (v209.f32[0] >= 0.0 || (v211 = 0uLL, _NF = v210.f32[0] < 0.0, float32x4_t v210 = 0uLL, !_NF))
        {
          v210.i64[0] = 0;
          float32x4_t v210 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgeq_f32(v209, v210), 0), (int8x16_t)v204, (int8x16_t)v206);
          float32x4_t v212 = vsubq_f32(v206, v204);
          float32x4_t v213 = vmulq_f32(v444, v204);
          float32x4_t v214 = vmulq_f32(v444, v212);
          float32x4_t v211 = vaddq_f32(v204, vmulq_n_f32(v212, (float)-(float)(v444.f32[3]+ vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v213, 2), vaddq_f32(v213, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v213.f32, 1))).f32[0])/ vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v214, 2), vaddq_f32(v214, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v214.f32, 1))).f32[0]));
        }
      }
      else
      {
        float32x4_t v211 = v206;
        float32x4_t v210 = v204;
      }
      float32x4_t v215 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v155.i8, 0);
      float32x4_t v216 = vmulq_n_f32(*(float32x4_t *)v4, v197.f32[0]);
      float32x4_t v217 = vaddq_f32(v201, vmlaq_f32(vmlaq_lane_f32(v216, v199, *(float32x2_t *)v193.f32, 1), v215, v200));
      float32x4_t v218 = vdivq_f32(v217, (float32x4_t)vdupq_laneq_s32((int32x4_t)v217, 3));
      float32x4_t v219 = vaddq_f32(v201, vmlaq_f32(vmlaq_lane_f32(v216, v199, *(float32x2_t *)v194.f32, 1), v215, v200));
      float32x4_t v220 = vdivq_f32(v219, (float32x4_t)vdupq_laneq_s32((int32x4_t)v219, 3));
      float32x4_t v221 = vmulq_f32(vsubq_f32(v218, v459), v462);
      float32x4_t v222 = vmulq_f32(vsubq_f32(v220, v459), v462);
      float32x4_t v223 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v221, 2), vaddq_f32(v221, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v221.f32, 1)));
      float32x4_t v224 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v222, 2), vaddq_f32(v222, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v222.f32, 1)));
      if (v223.f32[0] < 0.0 || v224.f32[0] < 0.0)
      {
        if (v223.f32[0] >= 0.0 || (v225 = 0uLL, _NF = v224.f32[0] < 0.0, float32x4_t v224 = 0uLL, !_NF))
        {
          v224.i64[0] = 0;
          float32x4_t v224 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgeq_f32(v223, v224), 0), (int8x16_t)v218, (int8x16_t)v220);
          float32x4_t v226 = vsubq_f32(v220, v218);
          float32x4_t v227 = vmulq_f32(v444, v218);
          float32x4_t v228 = vmulq_f32(v444, v226);
          float32x4_t v225 = vaddq_f32(v218, vmulq_n_f32(v226, (float)-(float)(v444.f32[3]+ vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v227, 2), vaddq_f32(v227, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v227.f32, 1))).f32[0])/ vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v228, 2), vaddq_f32(v228, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v228.f32, 1))).f32[0]));
        }
      }
      else
      {
        float32x4_t v225 = v220;
        float32x4_t v224 = v218;
      }
      float32x4_t v229 = vmlaq_f32(v216, v202, v199);
      float32x4_t v230 = vaddq_f32(v201, vmlaq_laneq_f32(v229, v200, v193, 2));
      float32x4_t v231 = vdivq_f32(v230, (float32x4_t)vdupq_laneq_s32((int32x4_t)v230, 3));
      float32x4_t v232 = vaddq_f32(v201, vmlaq_laneq_f32(v229, v200, v194, 2));
      float32x4_t v233 = vdivq_f32(v232, (float32x4_t)vdupq_laneq_s32((int32x4_t)v232, 3));
      float32x4_t v234 = vmulq_f32(vsubq_f32(v231, v459), v462);
      float32x4_t v235 = vmulq_f32(vsubq_f32(v233, v459), v462);
      float32x4_t v236 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v234, 2), vaddq_f32(v234, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v234.f32, 1)));
      float32x4_t v237 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v235, 2), vaddq_f32(v235, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v235.f32, 1)));
      if (v236.f32[0] < 0.0 || v237.f32[0] < 0.0)
      {
        if (v236.f32[0] >= 0.0 || (v238 = 0uLL, _NF = v237.f32[0] < 0.0, float32x4_t v237 = 0uLL, !_NF))
        {
          v237.i64[0] = 0;
          float32x4_t v237 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgeq_f32(v236, v237), 0), (int8x16_t)v231, (int8x16_t)v233);
          float32x4_t v239 = vsubq_f32(v233, v231);
          float32x4_t v240 = vmulq_f32(v444, v231);
          float32x4_t v241 = vmulq_f32(v444, v239);
          float32x4_t v238 = vaddq_f32(v231, vmulq_n_f32(v239, (float)-(float)(v444.f32[3]+ vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v240, 2), vaddq_f32(v240, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v240.f32, 1))).f32[0])/ vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v241, 2), vaddq_f32(v241, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v241.f32, 1))).f32[0]));
        }
      }
      else
      {
        float32x4_t v238 = v233;
        float32x4_t v237 = v231;
      }
      float32x4_t v243 = *(float32x4_t *)v16;
      float32x4_t v242 = *(float32x4_t *)(v16 + 16);
      float32x4_t v244 = *(float32x4_t *)(v16 + 32);
      float32x4_t v245 = *(float32x4_t *)(v16 + 48);
      float32x4_t v246 = vaddq_f32(v245, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)v16, v210.f32[0]), v242, *(float32x2_t *)v210.f32, 1), v244, v210, 2));
      float32x4_t v247 = vaddq_f32(v245, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)v16, v211.f32[0]), v242, *(float32x2_t *)v211.f32, 1), v244, v211, 2));
      float32x4_t v248 = vsubq_f32(vdivq_f32(v247, (float32x4_t)vdupq_laneq_s32((int32x4_t)v247, 3)), vdivq_f32(v246, (float32x4_t)vdupq_laneq_s32((int32x4_t)v246, 3)));
      float32x4_t v249 = vmulq_f32(v248, v248);
      float v250 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v249, 2), vaddq_f32(v249, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v249.f32, 1))).f32[0]);
      if (v250 <= 0.1)
      {
        __asm { FMOV            V0.4S, #1.0 }
      }
      else
      {
        __asm { FMOV            V0.4S, #1.0 }
        _Q0.f32[0] = (float)(v250 + (float)(v17 * 2.0)) / v250;
      }
      float32x4_t v252 = vaddq_f32(v245, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v243, v224.f32[0]), v242, *(float32x2_t *)v224.f32, 1), v244, v224, 2));
      float32x4_t v253 = vaddq_f32(v245, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v243, v225.f32[0]), v242, *(float32x2_t *)v225.f32, 1), v244, v225, 2));
      float32x4_t v254 = vsubq_f32(vdivq_f32(v253, (float32x4_t)vdupq_laneq_s32((int32x4_t)v253, 3)), vdivq_f32(v252, (float32x4_t)vdupq_laneq_s32((int32x4_t)v252, 3)));
      float32x4_t v255 = vmulq_f32(v254, v254);
      float v256 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v255, 2), vaddq_f32(v255, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v255.f32, 1))).f32[0]);
      if (v256 > 0.1) {
        _Q0.f32[1] = (float)(v256 + (float)(v17 * 2.0)) / v256;
      }
      float32x4_t v257 = vaddq_f32(v245, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v243, v237.f32[0]), v242, *(float32x2_t *)v237.f32, 1), v244, v237, 2));
      float32x4_t v258 = vaddq_f32(v245, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v243, v238.f32[0]), v242, *(float32x2_t *)v238.f32, 1), v244, v238, 2));
      float32x4_t v259 = vsubq_f32(vdivq_f32(v258, (float32x4_t)vdupq_laneq_s32((int32x4_t)v258, 3)), vdivq_f32(v257, (float32x4_t)vdupq_laneq_s32((int32x4_t)v257, 3)));
      float32x4_t v260 = vmulq_f32(v259, v259);
      float v261 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v260, 2), vaddq_f32(v260, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v260.f32, 1))).f32[0]);
      if (v261 > 0.1) {
        _Q0.f32[2] = (float)(v261 + (float)(v17 * 2.0)) / v261;
      }
      BOOL v262 = v256 < v261;
      if (v250 >= v256 || v250 >= v261)
      {
        if (v256 >= v261)
        {
          uint64_t v265 = 0;
          BOOL v262 = v256 < v250;
          uint64_t v264 = 1;
          uint64_t v263 = 2;
        }
        else
        {
          uint64_t v264 = 0;
          uint64_t v265 = 2;
          BOOL v262 = v250 < v261;
          uint64_t v263 = 1;
        }
      }
      else
      {
        uint64_t v263 = 0;
        uint64_t v264 = 1;
        uint64_t v265 = 2;
      }
      float32x4_t v464 = _Q0;
      int v266 = *(_DWORD *)((unint64_t)&v464 | (4 * v264));
      if (!v262) {
        int v266 = *(_DWORD *)((unint64_t)&v464 | (4 * v265));
      }
      *(_DWORD *)((unint64_t)&v464 | (4 * v263)) = v266;
      float32x4_t v267 = v464;
      v267.i32[3] = 0;
      float32x4_t v268 = vminnmq_f32(v267, (float32x4_t)xmmword_234414FA0);
      float32x4_t v269 = v452;
      v269.i32[3] = 0;
      v268.i32[3] = 0;
      float32x4_t v452 = vmaxnmq_f32(v269, v268);
      if (v8[8].i64[0] <= ++v29) {
        goto LABEL_141;
      }
      continue;
    }
  }
LABEL_165:
  buf.columns[1].i32[0] = 1;
  buf.columns[2] = 0uLL;
  buf.columns[0] = (simd_float4)(unint64_t)v425;
  re::DynamicOverflowArray<re::AABB,8ul>::setCapacity(&buf, 0);
  buf.columns[1].i32[0] += 2;
  uint64_t v287 = v8[28].i64[0];
  if (v287)
  {
    uint64_t v288 = *(void *)(v287 + 40);
    if (v288)
    {
      unint64_t v289 = 0;
      p_simd_float4x4 buf = 800;
      do
      {
        uint64_t v290 = re::BucketArray<re::DynamicArray<re::VFXScene>,4ul>::operator[](v287, v289);
        uint64_t v291 = *(void *)(v290 + 16);
        if (v291)
        {
          uint64_t v292 = 800 * v291;
          uint64_t v293 = *(void *)(v290 + 32) + 448;
          do
          {
            re::DynamicOverflowArray<re::AABB,8ul>::add((uint64_t)&buf, v293);
            v293 += 800;
            v292 -= 800;
          }
          while (v292);
        }
        ++v289;
      }
      while (v289 != v288);
    }
  }
  unint64_t v9 = v490;
  if (v490)
  {
    unint64_t v7 = 0;
    unint64_t v29 = 0;
    uint64_t v46 = 144;
    double v294 = v441;
    do
    {
      unint64_t v16 = (unint64_t)v492;
      if (!v492->i8[8 * v7 + 5])
      {
        unint64_t v4 = v492->u32[2 * v7];
        p_simd_float4x4 buf = *((void *)&v467 + 1);
        if (*((void *)&v467 + 1) <= v4) {
          goto LABEL_314;
        }
        unint64_t v4 = 0;
        unsigned int v295 = 0;
        unsigned __int32 v463 = v492->u32[2 * v7];
        uint64_t v460 = *(void *)v469;
        p_simd_float4x4 buf = *(void *)v469 + 112 * v463 + 32;
        while (1)
        {
          if (v29 != v295)
          {
            id v6 = (float32x4_t *)v294[2];
            if ((unint64_t)v6 <= v4) {
              goto LABEL_309;
            }
            uint64_t v296 = v294[4];
            if (*(unsigned char *)(v296 + 144 * v4 + 129))
            {
              v519[0].i64[0] = p_buf;
              v519[0].i64[1] = 5;
              int isBoundingBoxInsidePlanes = re::isBoundingBoxInsidePlanes(v296 + 144 * v4 + 64, (uint64_t)v519, (float32x4_t *)(v296 + 144 * v4));
              double v294 = v441;
              if (isBoundingBoxInsidePlanes) {
                break;
              }
            }
          }
          unint64_t v4 = ++v295;
          if (v9 <= v295) {
            goto LABEL_184;
          }
        }
        *(unsigned char *)(v16 + 8 * v7 + 4) = 1;
        *(unsigned char *)(a4 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 1;
LABEL_184:
        uint64_t v298 = (char *)(v16 + 8 * v7);
        int v300 = v298[4];
        uint64_t v299 = (float32x4_t *)(v298 + 4);
        if (!v300)
        {
          uint64_t v457 = v299;
          uint64_t v301 = v294[7];
          if (v301)
          {
            uint64_t v302 = (float32x4_t *)v294[9];
            long long v303 = &v302[9 * v301];
            uint64_t v304 = (float32x4_t *)(v460 + 112 * v463);
            unint64_t v305 = v304 + 6;
            uint64_t v306 = &v304->i64[1];
            unint64_t v307 = (int *)&v304[1];
            while (1)
            {
              if (v434
                && (uint64_t v308 = re::HashTable<unsigned long long,re::MeshSortingCollection::EntitySortingData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)v434, (uint64_t *)&v302[8])) != 0)
              {
                uint64_t v309 = *(void *)v308;
                int v310 = *(_DWORD *)(v308 + 8);
              }
              else
              {
                uint64_t v309 = 0;
                int v310 = 0;
              }
              uint64_t v311 = v302 + 7;
              if (re::isBoundingBoxInsideVCAPlanes((uint64_t)v302, v302 + 2, v309, v310, &v302[6], v302 + 7, v305, v286, (float32x4_t *)p_buf, 4, *v306, *v307))break; {
              v302 += 9;
              }
              double v294 = v441;
              if (&v311[2] == v303) {
                goto LABEL_195;
              }
            }
            v457->i8[0] = 1;
            *(unsigned char *)(a4 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 1;
            double v294 = v441;
          }
LABEL_195:
          id v6 = v457;
          if (!v457->i8[0])
          {
            v519[0] = (float32x4_t)xmmword_23435FD50;
            v519[1] = (float32x4_t)xmmword_23435FD60;
            v519[2] = (float32x4_t)xmmword_23435FD80;
            simd_float4 v520 = (simd_float4)xmmword_23435FBB0;
            if (buf.columns[1].i8[0]) {
              float32x4_t v312 = &buf.columns[2];
            }
            else {
              float32x4_t v312 = (simd_float4 *)buf.columns[2].i64[1];
            }
            if (buf.columns[0].i64[1])
            {
              float32x4_t v313 = (float32x4_t *)(v460 + 112 * v463);
              float32x4_t v314 = v313 + 6;
              float32x4_t v315 = &v313->i64[1];
              uint64_t v316 = (int *)&v313[1];
              uint64_t v317 = 32 * buf.columns[0].i64[1];
              while (1)
              {
                v471.i8[0] = 0;
                *(_OWORD *)unsigned int v496 = 0u;
                if (re::isBoundingBoxInsideVCAPlanes((uint64_t)v312, v519, 0, 0, &v471, (float32x4_t *)v496, v314, v286, (float32x4_t *)p_buf, 4, *v315, *v316))break; {
                v312 += 2;
                }
                v317 -= 32;
                if (!v317) {
                  goto LABEL_205;
                }
              }
              v457->i8[0] = 1;
              *(unsigned char *)(a4 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 1;
            }
LABEL_205:
            double v294 = v441;
          }
        }
      }
      unint64_t v7 = (v29 + 1);
      unint64_t v9 = v490;
      unint64_t v29 = v7;
    }
    while (v490 > v7);
    LODWORD(v4) = v429;
    if (v490)
    {
      uint64_t v318 = 0;
      unsigned int v319 = 0;
      uint64_t v320 = v492;
      unsigned int v321 = 1;
      unint64_t v7 = *((void *)&v467 + 1);
      uint64_t v322 = *(void *)v469;
      uint64_t v14 = a4;
      while (1)
      {
        uint64_t v323 = (unsigned int *)v320 + 2 * v318;
        if (*((unsigned char *)v323 + 5)) {
          _ZF = 1;
        }
        else {
          _ZF = *((unsigned char *)v323 + 4) == 0;
        }
        if (!_ZF)
        {
          if (v321 - 1 != v319)
          {
            unint64_t v16 = *v323;
            if (v7 <= v16) {
              goto LABEL_316;
            }
            p_simd_float4x4 buf = v319;
            if (v7 <= v319) {
              goto LABEL_317;
            }
            uint64_t v325 = (long long *)(v322 + 112 * v16);
            BOOL v326 = (_OWORD *)(v322 + 112 * v319);
            long long v327 = *v325;
            long long v328 = v325[2];
            v326[1] = v325[1];
            v326[2] = v328;
            *BOOL v326 = v327;
            long long v329 = v325[3];
            long long v330 = v325[4];
            long long v331 = v325[6];
            v326[5] = v325[5];
            v326[6] = v331;
            v326[3] = v329;
            v326[4] = v330;
          }
          ++v319;
        }
        uint64_t v318 = v321;
        BOOL v178 = v9 > v321++;
        if (!v178) {
          goto LABEL_226;
        }
      }
    }
    unsigned int v319 = 0;
    uint64_t v14 = a4;
  }
  else
  {
    unsigned int v319 = 0;
    uint64_t v14 = a4;
    LODWORD(v4) = v429;
  }
LABEL_226:
  if (*((void *)&v467 + 1) > (unint64_t)v319) {
    re::DynamicArray<re::VCARenderData::FrustumId>::resize((uint64_t)&v466, v319);
  }
  if (buf.columns[0].i64[0] && (buf.columns[1].i8[0] & 1) == 0) {
    (*(void (**)(void))(*(void *)buf.columns[0].i64[0] + 40))();
  }
  if (v475 && (v477 & 1) == 0) {
    (*(void (**)(void))(v475->i64[0] + 40))();
  }
  if (v480 && (v482 & 1) == 0) {
    (*(void (**)(void))(v480->i64[0] + 40))();
  }
  if (v485.i64[0])
  {
    uint64_t v333 = v486;
    uint64_t v334 = &v486[14 * v485.i64[0]];
    do
    {
      *uint64_t v333 = 0;
      ++*((_DWORD *)v333 + 2);
      v333 += 14;
    }
    while (v333 != v334);
  }
  if ((void)v513)
  {
    unint64_t v335 = v514;
    unint64_t v336 = &v514[9 * v513];
    do
    {
      *(void *)unint64_t v335 = 0;
      ++*((_DWORD *)v335 + 2);
      v335 += 9;
    }
    while (v335 != v336);
  }
  if (v498[0])
  {
    uint64_t v337 = &v499;
    uint64_t v338 = &v499 + 7 * v498[0];
    do
    {
      *(void *)uint64_t v337 = 0;
      ++*((_DWORD *)v337 + 2);
      v337 += 7;
    }
    while (v337 != v338);
  }
  if (v489[0] && v492) {
    (*(void (**)(void))(*(void *)v489[0] + 40))();
  }
  uint64_t v15 = a2;
LABEL_250:
  p_simd_float4x4 buf = (uint64_t)&v469[8];
LABEL_251:
  if (!*(_WORD *)v14)
  {
    uint64_t v339 = 2512009519;
    goto LABEL_303;
  }
  if (*(unsigned char *)(v14 + 1))
  {
    unint64_t v340 = (unint64_t)"N2re13VCARenderDataE";
    if (((unint64_t)"N2re13VCARenderDataE" & 0x8000000000000000) != 0)
    {
      uint64_t v341 = (unsigned __int8 *)((unint64_t)"N2re13VCARenderDataE" & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v342 = 5381;
      do
      {
        unint64_t v340 = v342;
        unsigned int v343 = *v341++;
        uint64_t v342 = (33 * v342) ^ v343;
      }
      while (v343);
    }
    unint64_t v344 = (v432 - 0x61C8864680B583E9 + (v340 << 6) + (v340 >> 2)) ^ v340;
    uint64_t v345 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v15 + 40) + 32))(*(void *)(v15 + 40), 96, 8);
    uint64_t v15 = a2;
    uint64_t v346 = v345;
    *(void *)(v345 + 40) = 0;
    *(_OWORD *)(v345 + 16) = 0u;
    *(_DWORD *)(v345 + 32) = 0;
    *(void *)uint64_t v345 = &unk_26E71F350;
    *(void *)(v345 + re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = 0;
    *(void *)(v345 + re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = v466;
    v466 = 0;
    *(_OWORD *)(v345 + 16) = v467;
    long long v467 = 0u;
    *(void *)(v345 + 40) = *(void *)v469;
    ++v468;
    ++*(_DWORD *)(v345 + 32);
    *(_DWORD *)(v345 + 80) = 0;
    *(_OWORD *)(v345 + 4re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = 0u;
    *(_OWORD *)(v345 + 64) = 0u;
    *(void *)(v345 + 84) = 0x7FFFFFFFLL;
    *(void *)(v345 + 4re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = *(void *)&v469[8];
    *(_OWORD *)unint64_t v469 = 0u;
    *(void *)(v345 + 56) = *(void *)&v469[16];
    *(void *)(v345 + 64) = *(void *)&v469[24];
    unint64_t v347 = *(void *)(a2 + 96);
    *(_OWORD *)&v469[16] = 0u;
    *(void *)(v345 + 72) = *(void *)&v469[32];
    *(void *)(v345 + 80) = *(void *)&v469[40];
    *(_OWORD *)&v469[32] = xmmword_23436F740;
    if (!v347) {
      goto LABEL_259;
    }
    unint64_t v347 = v344 % *(unsigned int *)(a2 + 120);
    uint64_t v348 = *(unsigned int *)(*(void *)(a2 + 104) + 4 * v347);
    if (v348 == 0x7FFFFFFF) {
      goto LABEL_259;
    }
    uint64_t v410 = *(void *)(a2 + 112);
    if (*(void *)(v410 + 24 * v348 + 8) != v344)
    {
      while (1)
      {
        LODWORD(v34re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = *(_DWORD *)(v410 + 24 * v348) & 0x7FFFFFFF;
        if (v348 == 0x7FFFFFFF) {
          break;
        }
        if (*(void *)(v410 + 24 * v348 + 8) == v344) {
          goto LABEL_265;
        }
      }
LABEL_259:
      uint64_t v349 = *(unsigned int *)(a2 + 132);
      if (v349 == 0x7FFFFFFF)
      {
        uint64_t v349 = *(unsigned int *)(a2 + 128);
        int v350 = v349;
        if (v349 == *(_DWORD *)(a2 + 120))
        {
          re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(a2 + 96, 2 * *(_DWORD *)(a2 + 124));
          uint64_t v15 = a2;
          LODWORD(v347) = v344 % *(unsigned int *)(a2 + 120);
          int v350 = *(_DWORD *)(a2 + 128);
        }
        *(_DWORD *)(v15 + 12re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = v350 + 1;
        uint64_t v351 = *(void *)(v15 + 112);
        int v352 = *(_DWORD *)(v351 + 24 * v349);
      }
      else
      {
        uint64_t v351 = *(void *)(a2 + 112);
        int v352 = *(_DWORD *)(v351 + 24 * v349);
        *(_DWORD *)(a2 + 132) = v352 & 0x7FFFFFFF;
      }
      uint64_t v353 = 24 * v349;
      *(_DWORD *)(v351 + v353) = v352 | 0x80000000;
      *(_DWORD *)(*(void *)(v15 + 112) + v353) = *(_DWORD *)(*(void *)(v15 + 112) + 24 * v349) & 0x80000000 | *(_DWORD *)(*(void *)(v15 + 104) + 4 * v347);
      *(void *)(*(void *)(v15 + 112) + 24 * v349 + re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = v344;
      *(void *)(*(void *)(v15 + 112) + 24 * v349 + 16) = v346;
      *(_DWORD *)(*(void *)(v15 + 104) + 4 * v347) = v349;
      ++*(_DWORD *)(v15 + 124);
      ++*(_DWORD *)(v15 + 136);
    }
  }
LABEL_265:
  float32x4_t v354 = *(long long **)(*(void *)(v15 + 8) + 120);
  if (*((void *)v354 + 16))
  {
    long long v355 = *v354;
    long long v356 = v354[1];
    long long v357 = v354[3];
    *(_OWORD *)(v14 + 80) = v354[2];
    *(_OWORD *)(v14 + 96) = v357;
    *(_OWORD *)(v14 + 4re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = v355;
    *(_OWORD *)(v14 + 64) = v356;
    long long v358 = v354[4];
    long long v359 = v354[5];
    long long v360 = v354[7];
    *(_OWORD *)(v14 + 144) = v354[6];
    *(_OWORD *)(v14 + 160) = v360;
    *(_OWORD *)(v14 + 112) = v358;
    *(_OWORD *)(v14 + 12re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = v359;
    *((void *)v354 + 16) = 0;
  }
  v498[0] = (uint64_t)&unk_26E71F3D0;
  unint64_t v16 = (unint64_t)&v499;
  long long v361 = *(_OWORD *)(v14 + 64);
  long long v499 = *(_OWORD *)(v14 + 48);
  long long v500 = v361;
  long long v362 = *(_OWORD *)(v14 + 96);
  long long v501 = *(_OWORD *)(v14 + 80);
  long long v502 = v362;
  long long v363 = *(_OWORD *)(v14 + 128);
  long long v503 = *(_OWORD *)(v14 + 112);
  long long v504 = v363;
  long long v364 = *(_OWORD *)(v14 + 160);
  long long v505 = *(_OWORD *)(v14 + 144);
  long long v506 = v364;
  long long v365 = *(_OWORD *)(v14 + 176);
  long long v366 = *(_OWORD *)(v14 + 192);
  long long v367 = *(_OWORD *)(v14 + 208);
  long long v510 = *(_OWORD *)(v14 + 224);
  long long v509 = v367;
  long long v508 = v366;
  long long v507 = v365;
  long long v368 = *(_OWORD *)(v14 + 272);
  v514[0] = *(_OWORD *)(v14 + 288);
  long long v513 = v368;
  long long v369 = *(_OWORD *)(v14 + 240);
  unint64_t v370 = (unint64_t)"N2re20WorldToViewCacheDataE";
  long long v512 = *(_OWORD *)(v14 + 256);
  long long v511 = v369;
  if (((unint64_t)"N2re20WorldToViewCacheDataE" & 0x8000000000000000) != 0)
  {
    uint64_t v371 = (unsigned __int8 *)((unint64_t)"N2re20WorldToViewCacheDataE" & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v372 = 5381;
    do
    {
      unint64_t v370 = v372;
      unsigned int v373 = *v371++;
      uint64_t v372 = (33 * v372) ^ v373;
    }
    while (v373);
  }
  unint64_t v7 = (v432 - 0x61C8864680B583E9 + (v370 << 6) + (v370 >> 2)) ^ v370;
  uint64_t v374 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v15 + 40) + 32))(*(void *)(v15 + 40), 272, 16);
  uint64_t v376 = a2;
  unint64_t v9 = v374;
  *(void *)uint64_t v374 = &unk_26E71F3D0;
  long long v377 = v502;
  long long v379 = v499;
  long long v378 = v500;
  *(_OWORD *)(v374 + 4re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = v501;
  *(_OWORD *)(v374 + 64) = v377;
  *(_OWORD *)(v374 + 16) = v379;
  *(_OWORD *)(v374 + 32) = v378;
  long long v380 = v506;
  long long v382 = v503;
  long long v381 = v504;
  *(_OWORD *)(v374 + 112) = v505;
  *(_OWORD *)(v374 + 12re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = v380;
  *(_OWORD *)(v374 + 80) = v382;
  *(_OWORD *)(v374 + 96) = v381;
  long long v383 = v510;
  long long v385 = v507;
  long long v384 = v508;
  *(_OWORD *)(v374 + 176) = v509;
  *(_OWORD *)(v374 + 192) = v383;
  *(_OWORD *)(v374 + 144) = v385;
  *(_OWORD *)(v374 + 160) = v384;
  long long v386 = v514[0];
  long long v388 = v511;
  long long v387 = v512;
  *(_OWORD *)(v374 + 240) = v513;
  *(_OWORD *)(v374 + 256) = v386;
  *(_OWORD *)(v374 + 20re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = v388;
  *(_OWORD *)(v374 + 224) = v387;
  v389 = (re *)(a2 + 96);
  unint64_t v390 = *(void *)(a2 + 96);
  if (v390
    && (unint64_t v390 = v7 % *(unsigned int *)(a2 + 120),
        uint64_t v391 = *(unsigned int *)(*(void *)(a2 + 104) + 4 * v390),
        v391 != 0x7FFFFFFF))
  {
    uint64_t v409 = *(void *)(a2 + 112);
    while (*(void *)(v409 + 24 * v391 + 8) != v7)
    {
      LODWORD(v39re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = *(_DWORD *)(v409 + 24 * v391) & 0x7FFFFFFF;
      if (v391 == 0x7FFFFFFF) {
        goto LABEL_272;
      }
    }
  }
  else
  {
LABEL_272:
    unint64_t v16 = *(unsigned int *)(a2 + 132);
    if (v16 == 0x7FFFFFFF)
    {
      unint64_t v16 = *(unsigned int *)(a2 + 128);
      int v392 = v16;
      if (v16 == *(_DWORD *)(a2 + 120))
      {
        re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity((uint64_t)v389, 2 * *(_DWORD *)(a2 + 124));
        uint64_t v376 = a2;
        LODWORD(v390) = v7 % *(unsigned int *)(a2 + 120);
        int v392 = *(_DWORD *)(a2 + 128);
      }
      *(_DWORD *)(v376 + 12re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = v392 + 1;
      uint64_t v393 = *(void *)(v376 + 112);
      int v394 = *(_DWORD *)(v393 + 24 * v16);
    }
    else
    {
      uint64_t v393 = *(void *)(a2 + 112);
      int v394 = *(_DWORD *)(v393 + 24 * v16);
      *(_DWORD *)(a2 + 132) = v394 & 0x7FFFFFFF;
    }
    uint64_t v395 = 24 * v16;
    *(_DWORD *)(v393 + v395) = v394 | 0x80000000;
    *(_DWORD *)(*(void *)(v376 + 112) + v395) = *(_DWORD *)(*(void *)(v376 + 112) + 24 * v16) & 0x80000000 | *(_DWORD *)(*(void *)(v376 + 104) + 4 * v390);
    *(void *)(*(void *)(v376 + 112) + 24 * v16 + re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = v7;
    *(void *)(*(void *)(v376 + 112) + 24 * v16 + 16) = v9;
    *(_DWORD *)(*(void *)(v376 + 104) + 4 * v390) = v16;
    ++*(_DWORD *)(v376 + 124);
    ++*(_DWORD *)(v376 + 136);
  }
  if (!v8 || (v4 & 1) != 0) {
    goto LABEL_300;
  }
  if (v8[3].i64[0])
  {
    long long v396 = *(_OWORD *)(v14 + 64);
    *(_OWORD *)(v14 + 176) = *(_OWORD *)(v14 + 48);
    *(_OWORD *)(v14 + 192) = v396;
    long long v397 = *(_OWORD *)(v14 + 96);
    *(_OWORD *)(v14 + 20re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = *(_OWORD *)(v14 + 80);
    *(_OWORD *)(v14 + 224) = v397;
    if (!v8[3].i64[0]) {
      goto LABEL_315;
    }
    re::RenderCamera::computeInverseTransform(v8 + 4, (uint64_t)&buf);
    simd_float4 v400 = buf.columns[1];
    simd_float4 v401 = buf.columns[2];
    simd_float4 v402 = buf.columns[3];
    *(simd_float4 *)(v14 + 4re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = buf.columns[0];
    *(simd_float4 *)(v14 + 64) = v400;
    *(simd_float4 *)(v14 + 80) = v401;
    *(simd_float4 *)(v14 + 96) = v402;
    if (v8[3].i64[0] < 2uLL)
    {
      if ((atomic_exchange((atomic_uchar *volatile)&unk_26AF9D1E1, 1u) & 1) == 0)
      {
        v411 = *re::graphicsLogObjects(v398);
        if (os_log_type_enabled(v411, OS_LOG_TYPE_DEFAULT))
        {
          buf.columns[0].i16[0] = 0;
          simd_float4 v412 = "Blur: Caching WorldToView matrix: Right Camera data not available";
LABEL_299:
          _os_log_impl(&dword_233120000, v411, OS_LOG_TYPE_DEFAULT, v412, (uint8_t *)&buf, 2u);
        }
      }
      goto LABEL_300;
    }
    long long v403 = *(_OWORD *)(v14 + 128);
    *(_OWORD *)(v14 + 240) = *(_OWORD *)(v14 + 112);
    *(_OWORD *)(v14 + 256) = v403;
    long long v404 = *(_OWORD *)(v14 + 160);
    *(_OWORD *)(v14 + 272) = *(_OWORD *)(v14 + 144);
    *(_OWORD *)(v14 + 28re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = v404;
    unint64_t v405 = v8[3].u64[0];
    if (v405 > 1)
    {
      re::RenderCamera::computeInverseTransform(v8 + 6, (uint64_t)&buf);
      simd_float4 v406 = buf.columns[1];
      simd_float4 v407 = buf.columns[2];
      simd_float4 v408 = buf.columns[3];
      *(simd_float4 *)(v14 + 112) = buf.columns[0];
      *(simd_float4 *)(v14 + 12re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8) = v406;
      *(simd_float4 *)(v14 + 144) = v407;
      *(simd_float4 *)(v14 + 160) = v408;
      goto LABEL_300;
    }
LABEL_318:
    re::internal::assertLog((re::internal *)6, v399, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, 1, v405);
    _os_crash();
    __break(1u);
LABEL_319:
    re::internal::assertLog((re::internal *)6, v45, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, 0, 0);
    _os_crash();
    __break(1u);
LABEL_320:
    re::internal::assertLog((re::internal *)6, v45, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, 0, 0);
    _os_crash();
    __break(1u);
    goto LABEL_321;
  }
  if ((atomic_exchange(byte_26AF9D1E2, 1u) & 1) == 0)
  {
    v411 = *re::graphicsLogObjects(v389);
    if (os_log_type_enabled(v411, OS_LOG_TYPE_DEFAULT))
    {
      buf.columns[0].i16[0] = 0;
      simd_float4 v412 = "Blur: Caching WorldToView matrix: Left Camera data not available";
      goto LABEL_299;
    }
  }
LABEL_300:
  unint64_t v413 = 0xDFC926A60E076268;
  if (!*(unsigned char *)(v14 + 1)) {
    unint64_t v413 = 0x7B9CDD2A1D56B4CCLL;
  }
  unint64_t v414 = 0xBF58476D1CE4E5B9 * (*(int *)(v14 + 12) ^ ((unint64_t)*(int *)(v14 + 12) >> 30));
  unint64_t v415 = ((v413 << 6)
        - 0x61C8864680B583E9
        + (v413 >> 2)
        + ((0x94D049BB133111EBLL * (v414 ^ (v414 >> 27))) ^ ((0x94D049BB133111EBLL * (v414 ^ (v414 >> 27))) >> 31))) ^ v413;
  unint64_t v416 = 0xBF58476D1CE4E5B9 * (*(int *)(v14 + 16) ^ ((unint64_t)*(int *)(v14 + 16) >> 30));
  unint64_t v417 = (((0x94D049BB133111EBLL * (v416 ^ (v416 >> 27))) ^ ((0x94D049BB133111EBLL * (v416 ^ (v416 >> 27))) >> 31))
        - 0x61C8864680B583E9
        + (v415 << 6)
        + (v415 >> 2)) ^ v415;
  unint64_t v418 = 0xBF58476D1CE4E5B9 * (*(int *)(v14 + 20) ^ ((unint64_t)*(int *)(v14 + 20) >> 30));
  unint64_t v419 = (((0x94D049BB133111EBLL * (v418 ^ (v418 >> 27))) ^ ((0x94D049BB133111EBLL * (v418 ^ (v418 >> 27))) >> 31))
        - 0x61C8864680B583E9
        + (v417 << 6)
        + (v417 >> 2)) ^ v417;
  unint64_t v420 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * (*(int *)(v14 + 24) ^ ((unint64_t)*(int *)(v14 + 24) >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*(int *)(v14 + 24) ^ ((unint64_t)*(int *)(v14 + 24) >> 30))) >> 27));
  uint64_t v339 = ((v420 ^ (v420 >> 31)) - 0x61C8864680B583E9 + (v419 << 6) + (v419 >> 2)) ^ v419;
LABEL_303:
  double v421 = re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)&v469[8]);
  if (v466 && *(void *)v469) {
    (*(void (**)(double))(*v466 + 40))(v421);
  }
  return v339;
}

void re::VCARenderData::~VCARenderData(re::VCARenderData *this)
{
}

{
  uint64_t vars8;

  re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8);
  JUMPOUT(0x237DBCBD0);
}

void anonymous namespace'::createRenderGraphTarget(double *a1, long long **a2)
{
  unint64_t v4 = *a2;
  long long v6 = (*a2)[1];
  long long v5 = (*a2)[2];
  long long v20 = **a2;
  long long v21 = v6;
  long long v22 = v5;
  long long v7 = v4[6];
  long long v9 = v4[3];
  long long v8 = v4[4];
  long long v25 = v4[5];
  long long v26 = v7;
  long long v23 = v9;
  long long v24 = v8;
  if (*((unsigned char *)a2 + 72))
  {
    unint64_t v10 = (uint64_t *)a2[2];
    uint64_t v12 = *v10;
    uint64_t v11 = v10[1];
    uint64_t v13 = a2[10];
    unint64_t v27 = 2 * v12;
    uint64_t v28 = v11;
    *(void *)&long long v26 = ((unint64_t)&v13[4 * v12 - 0x61C8864680B583ELL] + ((v12 & 0x7FFFFFFFFFFFFFFFuLL) >> 2) - 9) ^ v12 & 0x7FFFFFFFFFFFFFFFLL;
    re::StringID::destroyString((re::StringID *)&v27);
  }
  re::RenderFrame::createTarget((re::RenderFrame *)a2[1], (const re::RenderGraphTargetDescription *)&v20, *((const char **)a2[2] + 1), a1);
  if (*((unsigned char *)a2 + 24))
  {
    uint64_t v14 = (re::RenderFrame *)a2[1];
    unint64_t v27 = (unint64_t)a2[4] & 0x7FFFFFFFFFFFFFFFLL;
    re::RenderFrame::inheritLaneProperties(v14, (uint64_t *)&v27, a1, 0);
  }
  if (*((unsigned char *)a2 + 48))
  {
    DWORD1(v2re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 4;
    LODWORD(v20) = 0;
    re::RenderFrame::createTarget((re::RenderFrame *)a2[1], (const re::RenderGraphTargetDescription *)&v20, (const char *)a2[8], &v27);
    if (*((unsigned char *)a2 + 24))
    {
      uint64_t v15 = (re::RenderFrame *)a2[1];
      unint64_t v19 = (unint64_t)a2[4] & 0x7FFFFFFFFFFFFFFFLL;
      re::RenderFrame::inheritLaneProperties(v15, (uint64_t *)&v19, (double *)&v27, 0);
    }
    unint64_t v16 = a2[1];
    v18[0] = *(uint64_t *)a1;
    v18[1] = (uint64_t)a1[1];
    int v17 = v28;
    *(_DWORD *)(re::RenderGraphResourceDescriptions::targetDescription((re *)((char *)v16 + 3448), v18) + 80) = v17;
  }
}

re::RenderGraphNode *re::RenderGraph::addNode<re::SFBSystemShellCreateTextureAliasNode>(re *a1, const char *a2)
{
  unint64_t v4 = re::globalAllocators(a1);
  long long v5 = (re::RenderGraphNode *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4[2] + 32))(v4[2], 272, 8);
  long long v6 = re::RenderGraphNode::RenderGraphNode(v5, a2);
  *(void *)long long v6 = &unk_26E71A190;
  *((unsigned char *)v6 + 25re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  *((void *)v6 + 33) = 0;
  unint64_t v10 = v6;
  re::DynamicArray<re::TransitionCondition *>::add(a1, &v10);
  uint64_t v7 = *((void *)a1 + 12);
  uint64_t v8 = *((void *)a1 + 13);
  *((void *)v5 + 3) = *((void *)a1 + 10);
  *((void *)v5 + 4) = v7;
  *((void *)v5 + re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v8;
  return v5;
}

re::AssetHandle *re::BlurManager::getBackdropMaterial(re::AssetHandle *this, uint64_t a2)
{
  id v2 = this;
  long long v5 = *(uint64_t (**)(uint64_t, uint64_t, void, void *, void *))(a2 + 160);
  uint64_t v3 = a2 + 160;
  unint64_t v4 = v5;
  if (v5)
  {
    if (!v6) {
      std::__throw_bad_any_cast[abi:nn180100]();
    }
    return re::AssetHandle::AssetHandle(v2, v6);
  }
  else
  {
    *(void *)this = 0;
    *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
    *((void *)this + 2) = 0;
  }
  return this;
}

re::RenderGraphComputeNodeBase *re::RenderGraph::addNode<re::SFBSystemShellComputeNode>(re *a1, const char *a2)
{
  unint64_t v4 = re::globalAllocators(a1);
  long long v5 = (re::RenderGraphComputeNodeBase *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4[2] + 32))(v4[2], 480, 16);
  long long v6 = re::RenderGraphComputeNodeBase::RenderGraphComputeNodeBase(v5, a2);
  *(void *)long long v6 = &unk_26E719D28;
  unint64_t v10 = v6;
  re::DynamicArray<re::TransitionCondition *>::add(a1, &v10);
  uint64_t v7 = *((void *)a1 + 12);
  uint64_t v8 = *((void *)a1 + 13);
  *((void *)v5 + 3) = *((void *)a1 + 10);
  *((void *)v5 + 4) = v7;
  *((void *)v5 + re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v8;
  return v5;
}

re::RenderGraphComputeNodeBase *re::RenderGraph::addNode<re::SFBSystemShellBlurTAANode>(re *a1, const char *a2)
{
  unint64_t v4 = re::globalAllocators(a1);
  long long v5 = (re::RenderGraphComputeNodeBase *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4[2] + 32))(v4[2], 496, 16);
  long long v6 = re::RenderGraphComputeNodeBase::RenderGraphComputeNodeBase(v5, a2);
  *(void *)long long v6 = &unk_26E719DE8;
  *((unsigned char *)v6 + 480) = 0;
  *(void *)((char *)v6 + 484) = 0;
  unint64_t v10 = v6;
  re::DynamicArray<re::TransitionCondition *>::add(a1, &v10);
  uint64_t v7 = *((void *)a1 + 12);
  uint64_t v8 = *((void *)a1 + 13);
  *((void *)v5 + 3) = *((void *)a1 + 10);
  *((void *)v5 + 4) = v7;
  *((void *)v5 + re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v8;
  return v5;
}

re::RenderGraphComputeNodeBase *re::RenderGraph::addNode<re::SFBSystemShellReprojectNode>(re *a1, const char *a2)
{
  unint64_t v4 = re::globalAllocators(a1);
  long long v5 = (re::RenderGraphComputeNodeBase *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4[2] + 32))(v4[2], 496, 16);
  long long v6 = re::RenderGraphComputeNodeBase::RenderGraphComputeNodeBase(v5, a2);
  *(void *)long long v6 = &unk_26E71A0D0;
  *((void *)v6 + 60) = 0;
  unint64_t v10 = v6;
  re::DynamicArray<re::TransitionCondition *>::add(a1, &v10);
  uint64_t v7 = *((void *)a1 + 12);
  uint64_t v8 = *((void *)a1 + 13);
  *((void *)v5 + 3) = *((void *)a1 + 10);
  *((void *)v5 + 4) = v7;
  *((void *)v5 + re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v8;
  return v5;
}

uint64_t re::RenderGraphSFBSystemShellBlurProvider::prepareFrame(re::RenderGraphSFBSystemShellBlurProvider *this, const char *__s, const char *a3, re::RenderFrame *a4)
{
  uint64_t v278 = *MEMORY[0x263EF8340];
  size_t v8 = strlen(__s);
  if (v8)
  {
    MurmurHash3_x64_128((uint64_t)__s, v8, 0, (unint64_t *)__src);
    unint64_t v9 = (*(void *)&__src[8] - 0x61C8864680B583E9 + (*(void *)__src << 6) + (*(void *)__src >> 2)) ^ *(void *)__src;
  }
  else
  {
    unint64_t v9 = 0;
  }
  size_t v10 = strlen(a3);
  if (v10)
  {
    MurmurHash3_x64_128((uint64_t)a3, v10, 0, (unint64_t *)__src);
    uint64_t v11 = ((*(void *)&__src[8] - 0x61C8864680B583E9 + (*(void *)__src << 6) + (*(void *)__src >> 2)) ^ *(void *)__src)
        - 0x61C8864680B583E9;
  }
  else
  {
    uint64_t v11 = 0x9E3779B97F4A7C17;
  }
  if (!*((unsigned char *)this + 112)) {
    return 0;
  }
  unint64_t v12 = ((v9 >> 2) + (v9 << 6) + v11) ^ v9;
  float32x4_t v243 = (char *)a4 + 32;
  if (!*(unsigned char *)(re::RenderGraphDataStore::get<re::CameraData>((uint64_t)a4 + 32, v12) + 462)) {
    return 0;
  }
  *(void *)&long long v254 = v12;
  int v15 = *((_DWORD *)this + 383);
  __asm { FMOV            V8.2S, #1.0 }
  long long v21 = (simd_float3 *)MEMORY[0x263EF89A8];
  if (v15)
  {
    long long v22 = (char *)this + 1504;
    long long v23 = (char *)re::HashTable<unsigned long long,re::RenderGraphSFBSystemShellBlurProvider::BlurFrameContext,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::tryGet((uint64_t)this + 1504, v12);
    if (v23) {
      goto LABEL_41;
    }
    uint64_t v24 = *((unsigned int *)this + 384);
    if (v24)
    {
      uint64_t v25 = 0;
      long long v26 = (_DWORD *)*((void *)this + 190);
      while ((*v26 & 0x80000000) == 0)
      {
        v26 += 84;
        if (v24 == ++v25)
        {
          LODWORD(v25) = *((_DWORD *)this + 384);
          break;
        }
      }
      LODWORD(v14) = v25;
    }
    else
    {
      LODWORD(v14) = 0;
    }
    uint64_t v28 = (char *)this + 1504;
  }
  else
  {
    long long v22 = (char *)this + 160;
    uint64_t v24 = *((void *)this + 18);
    uint64_t v28 = (char *)this + 336 * v24 + 160;
    if (v24)
    {
      long long v23 = (char *)this + 176;
      v24 *= 336;
      do
      {
        uint64_t v14 = *((void *)v23 - 2);
        if (v14 == v12) {
          goto LABEL_41;
        }
        v23 += 336;
        v24 -= 336;
      }
      while (v24);
    }
  }
  BOOL v29 = v22 == v28;
  if (v15) {
    BOOL v29 = v24 == v14;
  }
  if (v29) {
    goto LABEL_40;
  }
  unint64_t v30 = *((void *)a4 + 46) & 0xFFFFFFFFFFFFFFFLL;
  while (v15)
  {
    uint64_t v31 = *((void *)v22 + 2);
    if (*(void *)(v31 + 336 * v14 + 56) + 4 < v30)
    {
      unint64_t v146 = *(void *)(v31 + 336 * v14 + 8);
      if (v146)
      {
        if (*((void *)this + 188))
        {
          unint64_t v147 = 0x94D049BB133111EBLL
               * ((0xBF58476D1CE4E5B9 * (v146 ^ (v146 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v146 ^ (v146 >> 30))) >> 27));
          unint64_t v148 = (v147 ^ (v147 >> 31)) % *((unsigned int *)this + 382);
          uint64_t v149 = *((void *)this + 189);
          uint64_t v150 = *(unsigned int *)(v149 + 4 * v148);
          if (v150 != 0x7FFFFFFF)
          {
            uint64_t v151 = *((void *)this + 190);
            if (*(void *)(v151 + 336 * v150 + 8) == v146)
            {
              *(_DWORD *)(v149 + 4 * v14re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_DWORD *)(v151 + 336 * v150) & 0x7FFFFFFF;
LABEL_218:
              uint64_t v218 = *((void *)this + 190);
              float32x4_t v219 = (int *)(v218 + 336 * v150);
              int v220 = *v219;
              if (*v219 < 0)
              {
                int *v219 = v220 & 0x7FFFFFFF;
                uint64_t v218 = *((void *)this + 190);
                int v220 = *(_DWORD *)(v218 + 336 * v150);
              }
              *(_DWORD *)(v218 + 336 * v150) = *((_DWORD *)this + 385) | v220 & 0x80000000;
              *((_DWORD *)this + 385) = v150;
              --*((_DWORD *)this + 383);
              float32x4_t v216 = (char *)this + 1544;
LABEL_221:
              ++*(_DWORD *)v216;
            }
            else
            {
              while (1)
              {
                unsigned int v217 = v150;
                LODWORD(v150) = *(_DWORD *)(v151 + 336 * v150) & 0x7FFFFFFF;
                if (v150 == 0x7FFFFFFF) {
                  break;
                }
                if (*(void *)(v151 + 336 * v150 + 8) == v146)
                {
                  *(_DWORD *)(v151 + 336 * v217) = *(_DWORD *)(v151 + 336 * v217) & 0x80000000 | *(_DWORD *)(v151 + 336 * v150) & 0x7FFFFFFF;
                  goto LABEL_218;
                }
              }
            }
          }
        }
      }
      goto LABEL_40;
    }
    unsigned int v32 = v14 + 1;
    do
    {
      LODWORD(v14) = v32;
      if (v32 >= *((_DWORD *)v22 + 8)) {
        break;
      }
      ++v32;
    }
    while ((*(_DWORD *)(v31 + 336 * v14) & 0x80000000) == 0);
LABEL_37:
    BOOL v33 = v22 == v28;
    if (v15) {
      BOOL v33 = v24 == v14;
    }
    if (v33) {
      goto LABEL_40;
    }
  }
  if (*((void *)v22 + 7) + 4 >= v30)
  {
    v22 += 336;
    goto LABEL_37;
  }
  uint64_t v210 = *(void *)v22;
  if (*(void *)v22)
  {
    unint64_t v211 = *((void *)this + 18);
    if (v211)
    {
      if (*((void *)this + 20) == v210)
      {
        unint64_t v212 = 0;
        goto LABEL_212;
      }
      unint64_t v212 = 0;
      float32x4_t v213 = (uint64_t *)((char *)this + 496);
      do
      {
        if (v211 - 1 == v212) {
          goto LABEL_40;
        }
        uint64_t v214 = *v213;
        v213 += 42;
        ++v212;
      }
      while (v214 != v210);
      if (v212 < v211)
      {
LABEL_212:
        uint64_t v215 = v211 - 1;
        if (v211 - 1 > v212)
        {
          memcpy((char *)this + 336 * v212 + 160, (char *)this + 336 * v211 - 176, 0x150uLL);
          uint64_t v215 = *((void *)this + 18) - 1;
        }
        *((void *)this + 1re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v215;
        float32x4_t v216 = (char *)this + 152;
        goto LABEL_221;
      }
LABEL_223:
      re::internal::assertLog((re::internal *)6, v13, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "removeAt", 527, v212, v211);
      _os_crash();
      __break(1u);
    }
  }
LABEL_40:
  *(_DWORD *)__src = 0x1000000;
  *(void *)&__src[4] = _D8;
  *(_OWORD *)&__src[12] = xmmword_234414FB0;
  *(_DWORD *)&__src[28] = 1077516698;
  *(_OWORD *)&__src[32] = 0uLL;
  simd_float3 v34 = v21[1];
  long long v262 = (__int128)*v21;
  v263.columns[0] = v34;
  simd_float3 v35 = v21[3];
  simd_float3 v37 = *v21;
  simd_float3 v36 = v21[1];
  v263.columns[1] = v21[2];
  v263.columns[2] = v35;
  float32x4_t v38 = *(float32x4_t *)v21;
  int32x4_t v39 = (int32x4_t)v21[1];
  simd_float3 v40 = v21[3];
  simd_float3 v266 = v21[2];
  simd_float3 v267 = v40;
  float32x4_t v264 = v38;
  int32x4_t v265 = v39;
  simd_float3 v41 = v21[3];
  simd_float3 v270 = v21[2];
  simd_float3 v271 = v41;
  simd_float3 v42 = v21[1];
  simd_float3 v268 = *v21;
  simd_float3 v269 = v42;
  simd_float3 v43 = v21[3];
  simd_float3 v274 = v266;
  simd_float3 v275 = v43;
  simd_float3 v272 = v37;
  simd_float3 v273 = v36;
  uint64_t v277 = 0;
  uint64_t v276 = 0;
  long long v23 = (char *)re::SmallHashTable<unsigned long long,re::RenderGraphSFBSystemShellBlurProvider::BlurFrameContext,4ul,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false>::add((uint64_t)this + 128, (uint64_t *)&v254, __src, 1u);
LABEL_41:
  *((void *)v23 + 5) = *((void *)a4 + 46) & 0xFFFFFFFFFFFFFFFLL;
  uint64_t v245 = re::RenderGraphDataStore::tryGet<re::SFBSystemShellBlurContext>((uint64_t)v243, (int)"SFBSystemShellBlurContext", "RenderFrame");
  uint64_t v44 = *(void *)(*((void *)a4 + 1) + 88);
  uint64_t v45 = re::RenderGraphDataStore::tryGet<re::ViewportPercentData>((uint64_t)v243, v12);
  if (v45 && *(unsigned char *)(v45 + 64) == 2)
  {
    unint64_t v47 = *(void *)(v45 + 16);
    if (v47 <= 1)
    {
      re::internal::assertLog((re::internal *)6, v46, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, 1, v47);
      _os_crash();
      __break(1u);
      goto LABEL_223;
    }
    float v48 = *(float *)(v45 + 52);
    float v49 = *(float *)(v45 + 36);
    int v50 = v48 >= (float)(v49 + *(float *)(v45 + 44)) || v49 >= (float)(v48 + *(float *)(v45 + 60));
  }
  else
  {
    int v50 = 0;
  }
  _OWORD v23[2] = v50;
  uint64_t v51 = *(void *)(*((void *)a4 + 1) + 88);
  if (v51)
  {
    LODWORD(v254) = 0;
    *(void *)__src = 0x1389125D3C064618;
    *(void *)&__src[8] = "blur:passthroughTextureWidth";
    int v52 = re::DebugSettingsManager::getWithErrorCode<int>(v51, __src, &v254);
    re::StringID::destroyString((re::StringID *)__src);
    if (!v52)
    {
      int v53 = v254;
      *((_DWORD *)v23 + 3) = v254;
      *((_DWORD *)v23 + 4) = v53;
    }
    *(void *)__src = 0x441AC35BB1E33358;
    *(void *)&__src[8] = "blur:VCATextureWidth";
    int v54 = re::DebugSettingsManager::getWithErrorCode<int>(v51, __src, &v254);
    re::StringID::destroyString((re::StringID *)__src);
    if (!v54)
    {
      int v55 = v254;
      *((_DWORD *)v23 + 5) = v254;
      *((_DWORD *)v23 + re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v55;
    }
    *(_DWORD *)float32x4_t v248 = 0;
    *(void *)__src = 0xBA9708B410B41FEELL;
    *(void *)&__src[8] = "blur:VCABlurExpansion";
    int v56 = re::DebugSettingsManager::getWithErrorCode<float>(v51, __src, v248);
    re::StringID::destroyString((re::StringID *)__src);
    if (!v56) {
      *((_DWORD *)v23 + 7) = *(_DWORD *)v248;
    }
    int v50 = v23[2];
  }
  int v57 = *((_DWORD *)v23 + 4);
  double v58 = (double)*((int *)v23 + 3) * 1.5;
  if (v50)
  {
    if (v58 > (double)v57) {
      *((_DWORD *)v23 + 4) = 2 * v57;
    }
    int v59 = *((_DWORD *)v23 + 6);
    if ((double)*((int *)v23 + 5) * 1.5 > (double)v59)
    {
      int v60 = 2 * v59;
      goto LABEL_67;
    }
  }
  else
  {
    if (v58 > (double)v57)
    {
      if (v57 >= 0) {
        int v61 = *((_DWORD *)v23 + 4);
      }
      else {
        int v61 = v57 + 1;
      }
      *((_DWORD *)v23 + 4) = v61 >> 1;
    }
    int v62 = *((_DWORD *)v23 + 6);
    if ((double)*((int *)v23 + 5) * 1.5 <= (double)v62)
    {
      int v60 = v62 / 2;
LABEL_67:
      *((_DWORD *)v23 + re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v60;
    }
  }
  uint64_t v63 = *((void *)a4 + 52);
  *(void *)__src = 65290051;
  *((void *)v23 + 3re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = (unint64_t)re::RenderFrame::getScopeProtectionOptions((uint64_t)a4, a3, (uint64_t *)__src) & v63;
  float32x4_t v241 = this;
  uint64_t v242 = v44;
  if (a3)
  {
    uint64_t v65 = *a3;
    if (*a3)
    {
      char v66 = a3[1];
      if (v66)
      {
        float32x4_t v67 = a3 + 2;
        do
        {
          uint64_t v65 = 31 * v65 + v66;
          int v68 = *(unsigned __int8 *)v67++;
          char v66 = v68;
        }
        while (v68);
      }
      v65 &= ~0x8000000000000000;
    }
  }
  else
  {
    uint64_t v65 = 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v246 = v65;
  unsigned int v69 = re::supportedColorPixelFormat((id *)(*((void *)a4 + 1) + 184), v64);
  unint64_t v70 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v69) ^ ((0xBF58476D1CE4E5B9 * v69) >> 27));
  unint64_t v71 = ((((v12 + 0x292D39BBB76173E7) ^ 0x6DBE18E721BE9D42) << 6)
       - 0x61C8864680B583E9
       + (((v12 + 0x292D39BBB76173E7) ^ 0x6DBE18E721BE9D42) >> 2)
       + (v70 ^ (v70 >> 31))) ^ (v12 + 0x292D39BBB76173E7) ^ 0x6DBE18E721BE9D42;
  unint64_t v72 = ((v71 << 6) - 0x61C8864680B583E9 + (v71 >> 2)) ^ v71;
  uint64_t v73 = *((void *)a4 + 1);
  float32x2_t v74 = *(re::RenderGraphPersistentResourceManager **)(*(void *)a4 + 296);
  BOOL v253 = 0;
  int v76 = re::supportedColorPixelFormat((id *)(v73 + 184), v75);
  uint64_t v77 = *((void *)v23 + 38);
  *(void *)&__src[40] = _D8;
  v263.columns[1].i32[0] = -1;
  v263.columns[2].i64[0] = 0;
  v263.columns[2].i8[8] = 0;
  *(_DWORD *)&__src[8] = 3;
  uint64_t v78 = *(void *)(v23 + 12);
  long long v262 = xmmword_2343AEB90;
  v263.columns[0] = (simd_float3)xmmword_234414FC0;
  *(void *)&__src[12] = v78;
  __src[36] = 1;
  *(_OWORD *)&__src[20] = xmmword_234414FD0;
  v263.columns[1].i64[1] = v77;
  *(_DWORD *)&__src[4] = v76;
  *(_DWORD *)__src = 2;
  simd_float3 v258 = (simd_float3)xmmword_234414FC0;
  simd_float3 v259 = v263.columns[1];
  simd_float3 v260 = v263.columns[2];
  long long v254 = *(_OWORD *)__src;
  long long v255 = *(_OWORD *)&__src[16];
  long long v256 = *(_OWORD *)&__src[32];
  long long v257 = xmmword_2343AEB90;
  DWORD1(v254) = 115;
  if (v23[3]) {
    uint64_t v79 = 0x41835D6541233CC6;
  }
  else {
    uint64_t v79 = 0x6EE84F42E390DAAFLL;
  }
  if (v23[3]) {
    uint64_t v80 = 0x6EE84F42E390DAAFLL;
  }
  else {
    uint64_t v80 = 0x41835D6541233CC6;
  }
  *(void *)float32x4_t v248 = v79;
  uint64_t v252 = 0x224DEC6372A17064;
  re::RenderGraphPersistentResourceManager::registerPersistentTexture(v74, (const re::WeakStringID *)&v246, (const re::WeakStringID *)v248, (const re::WeakStringID *)&v252, a4, (const re::RenderGraphTargetDescription *)__src, &v253);
  BOOL v81 = v253;
  *(void *)float32x4_t v248 = v80;
  uint64_t v252 = 0x224DEC6372A17065;
  re::RenderGraphPersistentResourceManager::registerPersistentTexture(v74, (const re::WeakStringID *)&v246, (const re::WeakStringID *)v248, (const re::WeakStringID *)&v252, a4, (const re::RenderGraphTargetDescription *)__src, &v253);
  int v82 = v253 || v81;
  *(void *)float32x4_t v248 = 0x23D59F1355F7D636;
  uint64_t v252 = 0x500524C6A54C98FCLL;
  re::RenderGraphPersistentResourceManager::registerPersistentTexture(v74, (const re::WeakStringID *)&v246, (const re::WeakStringID *)v248, (const re::WeakStringID *)&v252, a4, (const re::RenderGraphTargetDescription *)__src, &v253);
  BOOL v83 = v253;
  *(void *)float32x4_t v248 = 0x72FE99054D3CC2B0;
  uint64_t v252 = 0x4BC26B238B46B276;
  re::RenderGraphPersistentResourceManager::registerPersistentTexture(v74, (const re::WeakStringID *)&v246, (const re::WeakStringID *)v248, (const re::WeakStringID *)&v252, a4, (const re::RenderGraphTargetDescription *)&v254, &v253);
  int v84 = v82 | (v83 || v253);
  if (v23[3]) {
    uint64_t v85 = 0x2E4F6D8BCDEF172CLL;
  }
  else {
    uint64_t v85 = 0x1B9E43EDF0404D09;
  }
  if (v23[3]) {
    uint64_t v86 = 0x1B9E43EDF0404D09;
  }
  else {
    uint64_t v86 = 0x2E4F6D8BCDEF172CLL;
  }
  int v87 = *((_DWORD *)v23 + 6);
  *(_DWORD *)&__src[12] = *((_DWORD *)v23 + 5);
  *(_DWORD *)&__src[16] = v87;
  HIDWORD(v254) = *(_DWORD *)&__src[12];
  LODWORD(v255) = v87;
  *(void *)float32x4_t v248 = v85;
  uint64_t v252 = 0x29CB6A1F26966DCALL;
  re::RenderGraphPersistentResourceManager::registerPersistentTexture(v74, (const re::WeakStringID *)&v246, (const re::WeakStringID *)v248, (const re::WeakStringID *)&v252, a4, (const re::RenderGraphTargetDescription *)__src, &v253);
  BOOL v88 = v253;
  *(void *)float32x4_t v248 = v86;
  uint64_t v252 = 0x29CB6A1F26966DCBLL;
  re::RenderGraphPersistentResourceManager::registerPersistentTexture(v74, (const re::WeakStringID *)&v246, (const re::WeakStringID *)v248, (const re::WeakStringID *)&v252, a4, (const re::RenderGraphTargetDescription *)__src, &v253);
  int v89 = v88 || v253;
  *(void *)float32x4_t v248 = 0x60DF09E0AF8AD07;
  uint64_t v252 = 0x245EA3C951D4BAF2;
  re::RenderGraphPersistentResourceManager::registerPersistentTexture(v74, (const re::WeakStringID *)&v246, (const re::WeakStringID *)v248, (const re::WeakStringID *)&v252, a4, (const re::RenderGraphTargetDescription *)&v254, &v253);
  BOOL v90 = (v84 | v89 | v253) != 0;
  *(void *)float32x4_t v248 = 0x2B6EE9216B5DB7CCLL;
  uint64_t v252 = 0x28E1A7364C7DB35DLL;
  re::RenderGraphPersistentResourceManager::registerPersistentTexture(v74, (const re::WeakStringID *)&v246, (const re::WeakStringID *)v248, (const re::WeakStringID *)&v252, a4, (const re::RenderGraphTargetDescription *)&v254, &v253);
  char v91 = v253 || v90;
  if (!*(unsigned char *)(*((void *)a4 + 1) + 303))
  {
    *(_OWORD *)float32x4_t v248 = *(_OWORD *)__src;
    *(_OWORD *)&v248[16] = *(_OWORD *)&__src[16];
    simd_float3x3 v251 = v263;
    long long v249 = *(_OWORD *)&__src[32];
    long long v250 = v262;
    *(int32x2_t *)&v248[12] = vshl_n_s32(*(int32x2_t *)&v248[12], 2uLL);
    uint64_t v252 = 0x7AC65E6EBC1A6022;
    uint64_t v247 = 0x2F5AA33D1CD8F884;
    re::RenderGraphPersistentResourceManager::registerPersistentTexture(v74, (const re::WeakStringID *)&v246, (const re::WeakStringID *)&v252, (const re::WeakStringID *)&v247, a4, (const re::RenderGraphTargetDescription *)v248, &v253);
    v91 |= v253;
  }
  *(void *)float32x4_t v248 = 0x365702DE80DBD47FLL;
  uint64_t v252 = 0x5E987FCC43D26868;
  re::RenderGraphPersistentResourceManager::registerPersistentTexture(v74, (const re::WeakStringID *)&v246, (const re::WeakStringID *)v248, (const re::WeakStringID *)&v252, a4, (const re::RenderGraphTargetDescription *)__src, &v253);
  BOOL v92 = v253 || v91 != 0;
  uint64_t v93 = *((void *)v23 + 39);
  uint64_t v94 = re::RenderGraphDataStore::tryGet<re::SceneScope>((uint64_t)v243, v12);
  if (v94
    && (uint64_t v95 = re::RenderGraphDataStore::tryGet<re::BlurPlanesRenderFrameData>((uint64_t)v243, (int)"BlurPlanesRenderFrameData", *(char **)(v94 + 8))) != 0)
  {
    unint64_t v96 = *(void *)(v95 + 16);
    unint64_t v97 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * (v96 ^ (v96 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v96 ^ (v96 >> 30))) >> 27));
    unint64_t v98 = v97 ^ (v97 >> 31);
    if (v96)
    {
      float32x4_t v99 = (unint64_t *)(*(void *)(v95 + 32) + 96);
      do
      {
        unint64_t v100 = *v99;
        v99 += 18;
        unint64_t v101 = 0x94D049BB133111EBLL
             * ((0xBF58476D1CE4E5B9 * (v100 ^ (v100 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v100 ^ (v100 >> 30))) >> 27));
        v98 ^= (v101 >> 31) ^ v101;
        --v96;
      }
      while (v96);
    }
  }
  else
  {
    unint64_t v98 = 0;
  }
  *((void *)v23 + 39) = v98;
  int v102 = 2;
  if (v92)
  {
    double v103 = (simd_float3 *)MEMORY[0x263EF89A8];
    goto LABEL_102;
  }
  _ZF = v98 == v93;
  double v103 = (simd_float3 *)MEMORY[0x263EF89A8];
  if (_ZF)
  {
    int v102 = *((_DWORD *)v23 + 8);
    if (v102 >= 1)
    {
      --v102;
      goto LABEL_102;
    }
  }
  else
  {
LABEL_102:
    *((_DWORD *)v23 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v102;
  }
  if (v245 && v102 <= 0 && *(unsigned char *)v245)
  {
    int v105 = 1;
  }
  else
  {
    int v105 = 0;
    v23[3] ^= 1u;
  }
  int v244 = v105;
  *(void *)__src = &unk_26E71F420;
  if (_AXSEnhanceBackgroundContrastEnabled())
  {
    __int32 v106 = _AXDarkenSystemColors();
    v107.i32[0] = 0;
    v108.i32[0] = v106;
    simd_float3 v109 = *v103;
    int8x16_t v110 = vbslq_s8(vdupq_lane_s8((int8x8_t)*(_OWORD *)&vceqq_s8(v108, v107), 0), (int8x16_t)vdupq_n_s32(0x3EE66666u), (int8x16_t)vdupq_n_s32(0x3E19999Au));
    simd_float3 v111 = v103[2];
    simd_float3 v112 = v103[3];
    simd_float3 v258 = v103[1];
    simd_float3 v259 = v111;
    simd_float3 v260 = v112;
    long long v254 = 0u;
    long long v255 = 0u;
    long long v256 = 0u;
    long long v257 = (__int128)v109;
    v263.columns[1] = v258;
    v263.columns[2] = v111;
    memset(&__src[16], 0, 32);
    long long v262 = 0u;
    v263.columns[0] = v109;
    float32x4_t v264 = (float32x4_t)v112;
    int32x4_t v265 = (int32x4_t)v110;
  }
  else if (_AXDarkenSystemColors())
  {
    simd_float3 v113 = *v103;
    simd_float3 v114 = v103[2];
    float32x4_t v115 = (float32x4_t)v103[3];
    v263.columns[1] = v103[1];
    v263.columns[2] = v114;
    *(_OWORD *)&__src[16] = xmmword_234414FE0;
    *(_OWORD *)&__src[32] = xmmword_234414FF0;
    long long v262 = xmmword_234415000;
    v263.columns[0] = v113;
    float32x4_t v264 = v115;
    int32x4_t v265 = vdupq_n_s32(0x3DCCCCCDu);
  }
  else
  {
    if (v242)
    {
      *(_DWORD *)float32x4_t v248 = 0;
      *(void *)&long long v254 = 0xE45FCCF0FB75A4E6;
      *((void *)&v254 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = "blur:filter.v00";
      __int32 v116 = re::DebugSettingsManager::getWithErrorCode<float>(v242, &v254, v248);
      v117.i32[0] = 0;
      v118.i32[0] = v116;
      int32x4_t v235 = v117;
      int8x16_t v238 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v118, v117), 0);
      re::StringID::destroyString((re::StringID *)&v254);
      float32x4_t v119 = (const float *)&unk_234415050;
      int8x16_t v120 = (int8x16_t)vld1q_dup_f32(v119);
      v120.i32[0] = *(_DWORD *)v248;
      int8x16_t v239 = vbslq_s8(v238, v120, (int8x16_t)xmmword_234415020);
      *(void *)&long long v254 = 0xE45FCCF0FB75A4E8;
      *((void *)&v254 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = "blur:filter.v01";
      v121.i32[0] = re::DebugSettingsManager::getWithErrorCode<float>(v242, &v254, v248);
      int8x16_t v227 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v121, v235), 0);
      re::StringID::destroyString((re::StringID *)&v254);
      v122.i64[0] = *(unsigned int *)v248 | 0x3F3C28F600000000;
      v122.i32[2] = -1098404332;
      int8x16_t v225 = v122;
      *(void *)&long long v254 = 0xE45FCCF0FB75A4EALL;
      *((void *)&v254 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = "blur:filter.v02";
      v123.i32[0] = re::DebugSettingsManager::getWithErrorCode<float>(v242, &v254, v248);
      int32x2_t v223 = (int32x2_t)vceqq_s32(v123, v235).u64[0];
      re::StringID::destroyString((re::StringID *)&v254);
      v124.i64[0] = *(unsigned int *)v248 | 0xBCDD2F1B00000000;
      int8x16_t v231 = v124;
      *(void *)&long long v254 = 0xE45FCCF0FB75A4EELL;
      *((void *)&v254 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = "blur:filter.v04";
      v125.i32[0] = re::DebugSettingsManager::getWithErrorCode<float>(v242, &v254, v248);
      int32x4_t v221 = v125;
      re::StringID::destroyString((re::StringID *)&v254);
      int8x16_t v126 = (const float *)&dword_23437C4BC;
      float32x4_t v127 = vld1q_dup_f32(v126);
      v127.i32[0] = *(_DWORD *)v248;
      int8x16_t v229 = (int8x16_t)v127;
      *(void *)&long long v254 = 0xE45FCCF0FB75A524;
      *((void *)&v254 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = "blur:filter.v10";
      int v128 = re::DebugSettingsManager::getWithErrorCode<float>(v242, &v254, v248);
      re::StringID::destroyString((re::StringID *)&v254);
      if (!v128)
      {
        int8x16_t v129 = v239;
        v129.i32[1] = *(_DWORD *)v248;
        int8x16_t v239 = v129;
      }
      int32x2_t v222 = (int32x2_t)vceqq_s32(v221, v235).u64[0];
      int8x16_t v224 = (int8x16_t)vdupq_lane_s32(v223, 0);
      int8x16_t v130 = v231;
      v130.i32[2] = 1064900231;
      int8x16_t v232 = v130;
      int8x16_t v236 = vbslq_s8(v227, v225, (int8x16_t)xmmword_234415030);
      *(void *)&long long v254 = 0xE45FCCF0FB75A526;
      *((void *)&v254 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = "blur:filter.v11";
      int v131 = re::DebugSettingsManager::getWithErrorCode<float>(v242, &v254, v248);
      re::StringID::destroyString((re::StringID *)&v254);
      if (!v131)
      {
        int8x16_t v132 = v236;
        v132.i32[1] = *(_DWORD *)v248;
        int8x16_t v236 = v132;
      }
      int8x16_t v226 = (int8x16_t)vdupq_n_s32(0x3E19999Au);
      int8x16_t v228 = (int8x16_t)vdupq_lane_s32(v222, 0);
      int8x16_t v233 = vbslq_s8(v224, v232, (int8x16_t)xmmword_234415010);
      *(void *)&long long v254 = 0xE45FCCF0FB75A528;
      *((void *)&v254 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = "blur:filter.v12";
      int v133 = re::DebugSettingsManager::getWithErrorCode<float>(v242, &v254, v248);
      re::StringID::destroyString((re::StringID *)&v254);
      if (!v133)
      {
        int8x16_t v134 = v233;
        v134.i32[1] = *(_DWORD *)v248;
        int8x16_t v233 = v134;
      }
      float32x4_t v230 = (float32x4_t)vbslq_s8(v228, v229, v226);
      *(void *)&long long v254 = 0xE45FCCF0FB75A52CLL;
      *((void *)&v254 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = "blur:filter.v14";
      int v135 = re::DebugSettingsManager::getWithErrorCode<float>(v242, &v254, v248);
      re::StringID::destroyString((re::StringID *)&v254);
      if (!v135)
      {
        float32x4_t v136 = v230;
        v136.i32[1] = *(_DWORD *)v248;
        float32x4_t v230 = v136;
      }
      *(void *)&long long v254 = 0xE45FCCF0FB75A562;
      *((void *)&v254 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = "blur:filter.v20";
      int v137 = re::DebugSettingsManager::getWithErrorCode<float>(v242, &v254, v248);
      re::StringID::destroyString((re::StringID *)&v254);
      if (!v137)
      {
        int8x16_t v138 = v239;
        v138.i32[2] = *(_DWORD *)v248;
        int8x16_t v239 = v138;
      }
      *(void *)&long long v254 = 0xE45FCCF0FB75A564;
      *((void *)&v254 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = "blur:filter.v21";
      int v139 = re::DebugSettingsManager::getWithErrorCode<float>(v242, &v254, v248);
      re::StringID::destroyString((re::StringID *)&v254);
      if (!v139)
      {
        int8x16_t v140 = v236;
        v140.i32[2] = *(_DWORD *)v248;
        int8x16_t v236 = v140;
      }
      *(void *)&long long v254 = 0xE45FCCF0FB75A566;
      *((void *)&v254 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = "blur:filter.v22";
      int v141 = re::DebugSettingsManager::getWithErrorCode<float>(v242, &v254, v248);
      re::StringID::destroyString((re::StringID *)&v254);
      if (!v141)
      {
        int8x16_t v142 = v233;
        v142.i32[2] = *(_DWORD *)v248;
        int8x16_t v233 = v142;
      }
      *(void *)&long long v254 = 0xE45FCCF0FB75A56ALL;
      *((void *)&v254 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = "blur:filter.v24";
      int v143 = re::DebugSettingsManager::getWithErrorCode<float>(v242, &v254, v248);
      re::StringID::destroyString((re::StringID *)&v254);
      if (!v143)
      {
        float32x4_t v144 = v230;
        v144.i32[2] = *(_DWORD *)v248;
        float32x4_t v230 = v144;
      }
      v145.columns[1] = (simd_float3)v236;
      v145.columns[0] = (simd_float3)v239;
      v145.columns[2] = (simd_float3)v233;
    }
    else
    {
      float32x4_t v230 = (float32x4_t)vdupq_n_s32(0x3E19999Au);
      v145.columns[2] = (simd_float3)xmmword_234415010;
      v145.columns[0] = (simd_float3)xmmword_234415020;
      v145.columns[1] = (simd_float3)xmmword_234415030;
    }
    simd_float3 v237 = v145.columns[1];
    simd_float3 v240 = v145.columns[0];
    simd_float3 v234 = v145.columns[2];
    simd_float3x3 v279 = __invert_f3(v145);
    *(simd_float3 *)&__src[16] = v240;
    *(simd_float3 *)&__src[32] = v237;
    long long v262 = (__int128)v234;
    simd_float3x3 v263 = v279;
    float32x4_t v264 = vnegq_f32(v230);
    int32x4_t v265 = (int32x4_t)v230;
  }
  uint64_t v152 = *(void *)(*((void *)a4 + 1) + 120);
  simd_float3 v153 = v263.columns[1];
  simd_float3 v154 = v263.columns[2];
  float32x4_t v155 = v264;
  *(simd_float3 *)(v152 + 224) = v263.columns[0];
  *(simd_float3 *)(v152 + 240) = v153;
  *(simd_float3 *)(v152 + 25re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v154;
  *(float32x4_t *)(v152 + 272) = v155;
  re::ColorHelpers::computeGamutTransformMatrix(1, 0, (uint64_t)&v254);
  v266.i32[2] = DWORD2(v254);
  v267.i32[2] = DWORD2(v255);
  v266.i64[0] = v254;
  v267.i64[0] = v255;
  v268.i32[2] = DWORD2(v256);
  v268.i64[0] = v256;
  unint64_t v156 = (unint64_t)"N2re24ColorFilterConstantsDataE";
  if (((unint64_t)"N2re24ColorFilterConstantsDataE" & 0x8000000000000000) != 0)
  {
    float32x4_t v157 = (unsigned __int8 *)((unint64_t)"N2re24ColorFilterConstantsDataE" & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v158 = 5381;
    do
    {
      unint64_t v156 = v158;
      unsigned int v159 = *v157++;
      uint64_t v158 = (33 * v158) ^ v159;
    }
    while (v159);
  }
  unint64_t v104 = ((v72 << 6) + (v72 >> 2) - 0xB36702970AA7E04) ^ v72;
  uint64_t v160 = ((v104 << 6) - 0x61C8864680B583E9 + (v104 >> 2)) ^ v104;
  unint64_t v161 = (v12 - 0x61C8864680B583E9 + (v156 << 6) + (v156 >> 2)) ^ v156;
  uint64_t v162 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**((void **)a4 + 5) + 32))(*((void *)a4 + 5), 192, 16);
  *(void *)uint64_t v162 = &unk_26E71F420;
  long long v164 = *(_OWORD *)&__src[32];
  long long v163 = v262;
  *(_OWORD *)(v162 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = *(_OWORD *)&__src[16];
  *(_OWORD *)(v162 + 32) = v164;
  *(_OWORD *)(v162 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v163;
  float32x4_t v165 = v264;
  simd_float3 v167 = v263.columns[0];
  simd_float3 v166 = v263.columns[1];
  *(simd_float3 *)(v162 + 9re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v263.columns[2];
  *(float32x4_t *)(v162 + 112) = v165;
  *(simd_float3 *)(v162 + 64) = v167;
  *(simd_float3 *)(v162 + 80) = v166;
  simd_float3 v168 = v268;
  int32x4_t v170 = v265;
  simd_float3 v169 = v266;
  *(simd_float3 *)(v162 + 160) = v267;
  *(simd_float3 *)(v162 + 17re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v168;
  *(int32x4_t *)(v162 + 12re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v170;
  *(simd_float3 *)(v162 + 144) = v169;
  unint64_t v171 = *((void *)a4 + 12);
  if (v171
    && (unint64_t v171 = v161 % *((unsigned int *)a4 + 30),
        uint64_t v172 = *(unsigned int *)(*((void *)a4 + 13) + 4 * v171),
        v172 != 0x7FFFFFFF))
  {
    uint64_t v208 = *((void *)a4 + 14);
    while (*(void *)(v208 + 24 * v172 + 8) != v161)
    {
      LODWORD(v172) = *(_DWORD *)(v208 + 24 * v172) & 0x7FFFFFFF;
      if (v172 == 0x7FFFFFFF) {
        goto LABEL_143;
      }
    }
  }
  else
  {
LABEL_143:
    uint64_t v173 = *((unsigned int *)a4 + 33);
    if (v173 == 0x7FFFFFFF)
    {
      uint64_t v173 = *((unsigned int *)a4 + 32);
      int v174 = v173;
      if (v173 == *((_DWORD *)a4 + 30))
      {
        re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity((uint64_t)a4 + 96, 2 * *((_DWORD *)a4 + 31));
        LODWORD(v17re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = v161 % *((unsigned int *)a4 + 30);
        int v174 = *((_DWORD *)a4 + 32);
      }
      *((_DWORD *)a4 + 32) = v174 + 1;
      uint64_t v175 = *((void *)a4 + 14);
      int v176 = *(_DWORD *)(v175 + 24 * v173);
    }
    else
    {
      uint64_t v175 = *((void *)a4 + 14);
      int v176 = *(_DWORD *)(v175 + 24 * v173);
      *((_DWORD *)a4 + 33) = v176 & 0x7FFFFFFF;
    }
    uint64_t v177 = 24 * v173;
    *(_DWORD *)(v175 + v177) = v176 | 0x80000000;
    *(_DWORD *)(*((void *)a4 + 14) + v177) = *(_DWORD *)(*((void *)a4 + 14) + 24 * v173) & 0x80000000 | *(_DWORD *)(*((void *)a4 + 13) + 4 * v171);
    *(void *)(*((void *)a4 + 14) + 24 * v173 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v161;
    *(void *)(*((void *)a4 + 14) + 24 * v173 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v162;
    *(_DWORD *)(*((void *)a4 + 13) + 4 * v17re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = v173;
    ++*((_DWORD *)a4 + 31);
    ++*((_DWORD *)a4 + 34);
  }
  uint64_t v27 = 2512009519;
  int v178 = *((unsigned __int8 *)v241 + 112);
  if ((v178 - 1) >= 2) {
    unint64_t v179 = v160;
  }
  else {
    unint64_t v179 = 2512009519;
  }
  if (v178 == 4)
  {
    int v181 = v244;
    uint64_t v27 = ((v179 << 6)
         - 0x61C8864680B583E9
         + (v179 >> 2)
         + re::RenderGraphSFBSystemShellBlurProvider::prepareVCABlur(v12, (uint64_t)a4, v244, (uint64_t)v23)) ^ v179;
    uint64_t v180 = v242;
  }
  else
  {
    uint64_t v180 = v242;
    int v181 = v244;
    if (v178 == 3)
    {
      re::RenderGraphSFBSystemShellBlurProvider::prepareVCABlur(v12, (uint64_t)a4, v244, (uint64_t)v23);
      char v182 = *v23 | v23[1];
      *long long v23 = v182;
      v23[1] = 0;
      if (v182)
      {
        unint64_t v183 = 0xBF58476D1CE4E5B9 * (*((int *)v23 + 3) ^ ((unint64_t)*((int *)v23 + 3) >> 30));
        uint64_t v27 = (((0x94D049BB133111EBLL * (v183 ^ (v183 >> 27))) ^ ((0x94D049BB133111EBLL * (v183 ^ (v183 >> 27))) >> 31))
             - 0x59ECBDB75CFBBFDFLL) ^ 0x23FB73AE8E00E62ALL;
      }
      uint64_t v27 = ((v179 << 6) - 0x61C8864680B583E9 + (v179 >> 2) + v27) ^ v179;
    }
  }
  if (v180)
  {
    LODWORD(v254) = 0;
    *(void *)__src = 0x55CC0F1AC1A278;
    *(void *)&__src[8] = "blur:taaMixValue.passthrough";
    int v184 = re::DebugSettingsManager::getWithErrorCode<float>(v180, __src, &v254);
    re::StringID::destroyString((re::StringID *)__src);
    if (v184) {
      float v185 = 0.65;
    }
    else {
      float v185 = *(float *)&v254;
    }
    *(void *)__src = 0x70F94BFC4F683DF8;
    *(void *)&__src[8] = "blur:taaMixValue.vca";
    int v186 = re::DebugSettingsManager::getWithErrorCode<float>(v180, __src, &v254);
    re::StringID::destroyString((re::StringID *)__src);
    if (v186) {
      float v187 = 0.65;
    }
    else {
      float v187 = *(float *)&v254;
    }
  }
  else
  {
    float v185 = 0.65;
    float v187 = 0.65;
  }
  *(void *)__src = &unk_26E71F460;
  __src[8] = v181;
  float v188 = 1.0;
  if (v102 <= 0) {
    float v189 = v185;
  }
  else {
    float v189 = 1.0;
  }
  if (v102 > 0) {
    float v187 = 1.0;
  }
  *(float *)&__src[12] = v189;
  *(float *)&__src[16] = v187;
  if (v181)
  {
    int v190 = *((_DWORD *)v23 + 9) + 1;
    float v191 = (float)v190 + 1.0;
  }
  else
  {
    int v190 = 0;
    float v191 = 1.0;
  }
  *((_DWORD *)v23 + 9) = v190;
  if (v245 && v102 <= 0)
  {
    float v188 = v191 / (float)(*(_DWORD *)(v245 + 4) + 1);
    if (v188 > 1.0) {
      float v188 = 1.0;
    }
    if (v188 < 0.0) {
      float v188 = 0.0;
    }
  }
  *(float *)&__src[20] = v188;
  if (v180)
  {
    v248[0] = 0;
    *(void *)&long long v254 = 0x13A98A684FC91826;
    *((void *)&v254 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = "blur:enableReprojectionLerping";
    int v192 = re::DebugSettingsManager::getWithErrorCode<BOOL>(v180, &v254, v248);
    int v193 = v248[0];
    re::StringID::destroyString((re::StringID *)&v254);
    if (!v192 && !v193) {
      *(_DWORD *)&__src[20] = 1065353216;
    }
  }
  unint64_t v194 = (unint64_t)"N2re21BlurReprojectionStateE";
  if (((unint64_t)"N2re21BlurReprojectionStateE" & 0x8000000000000000) != 0)
  {
    uint32x4_t v195 = (unsigned __int8 *)((unint64_t)"N2re21BlurReprojectionStateE" & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v196 = 5381;
    do
    {
      unint64_t v194 = v196;
      unsigned int v197 = *v195++;
      uint64_t v196 = (33 * v196) ^ v197;
    }
    while (v197);
  }
  unint64_t v198 = (v12 - 0x61C8864680B583E9 + (v194 << 6) + (v194 >> 2)) ^ v194;
  uint64_t v199 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**((void **)a4 + 5) + 32))(*((void *)a4 + 5), 24, 8);
  *(void *)uint64_t v199 = &unk_26E71F460;
  *(_OWORD *)(v199 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_OWORD *)&__src[8];
  unint64_t v200 = *((void *)a4 + 12);
  if (v200
    && (unint64_t v200 = v198 % *((unsigned int *)a4 + 30),
        uint64_t v201 = *(unsigned int *)(*((void *)a4 + 13) + 4 * v200),
        v201 != 0x7FFFFFFF))
  {
    uint64_t v209 = *((void *)a4 + 14);
    if (*(void *)(v209 + 24 * v201 + 8) != v198)
    {
      while (1)
      {
        LODWORD(v20re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = *(_DWORD *)(v209 + 24 * v201) & 0x7FFFFFFF;
        if (v201 == 0x7FFFFFFF) {
          break;
        }
        if (*(void *)(v209 + 24 * v201 + 8) == v198) {
          return v27;
        }
      }
      goto LABEL_189;
    }
  }
  else
  {
LABEL_189:
    uint64_t v202 = *((unsigned int *)a4 + 33);
    if (v202 == 0x7FFFFFFF)
    {
      uint64_t v202 = *((unsigned int *)a4 + 32);
      int v203 = v202;
      if (v202 == *((_DWORD *)a4 + 30))
      {
        re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity((uint64_t)a4 + 96, 2 * *((_DWORD *)a4 + 31));
        LODWORD(v200) = v198 % *((unsigned int *)a4 + 30);
        int v203 = *((_DWORD *)a4 + 32);
      }
      *((_DWORD *)a4 + 32) = v203 + 1;
      uint64_t v204 = *((void *)a4 + 14);
      int v205 = *(_DWORD *)(v204 + 24 * v202);
    }
    else
    {
      uint64_t v204 = *((void *)a4 + 14);
      int v205 = *(_DWORD *)(v204 + 24 * v202);
      *((_DWORD *)a4 + 33) = v205 & 0x7FFFFFFF;
    }
    uint64_t v206 = 24 * v202;
    *(_DWORD *)(v204 + v20re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v205 | 0x80000000;
    *(_DWORD *)(*((void *)a4 + 14) + v20re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = *(_DWORD *)(*((void *)a4 + 14) + 24 * v202) & 0x80000000 | *(_DWORD *)(*((void *)a4 + 13) + 4 * v200);
    *(void *)(*((void *)a4 + 14) + 24 * v202 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v198;
    *(void *)(*((void *)a4 + 14) + 24 * v202 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v199;
    *(_DWORD *)(*((void *)a4 + 13) + 4 * v200) = v202;
    ++*((_DWORD *)a4 + 31);
    ++*((_DWORD *)a4 + 34);
  }
  return v27;
}

void re::RenderGraphSFBSystemShellBlurProvider::provide(re::RenderGraphSFBSystemShellBlurProvider *this, const char *__s, char *a3, re::RenderFrame *a4)
{
  uint64_t v214 = *MEMORY[0x263EF8340];
  if (!*((unsigned char *)this + 112)) {
    return;
  }
  uint64_t v8 = 0x9E3779B97F4A7C17;
  size_t v9 = strlen(__s);
  if (v9)
  {
    MurmurHash3_x64_128((uint64_t)__s, v9, 0, (unint64_t *)__src);
    unint64_t v10 = (*(void *)&__src[8] - 0x61C8864680B583E9 + (*(void *)__src << 6) + (*(void *)__src >> 2)) ^ *(void *)__src;
  }
  else
  {
    unint64_t v10 = 0;
  }
  size_t v11 = strlen(a3);
  if (v11)
  {
    MurmurHash3_x64_128((uint64_t)a3, v11, 0, (unint64_t *)__src);
    uint64_t v8 = ((*(void *)&__src[8] - 0x61C8864680B583E9 + (*(void *)__src << 6) + (*(void *)__src >> 2)) ^ *(void *)__src)
       - 0x61C8864680B583E9;
  }
  unint64_t v12 = ((v10 >> 2) + (v10 << 6) + v8) ^ v10;
  unint64_t v135 = v12;
  if (!*((_DWORD *)this + 383))
  {
    uint64_t v30 = *((void *)this + 18);
    if (v30)
    {
      uint64_t v13 = (unsigned __int8 *)this + 176;
      uint64_t v31 = 336 * v30;
      while (*((void *)v13 - 2) != v12)
      {
        v13 += 336;
        v31 -= 336;
        if (!v31) {
          goto LABEL_14;
        }
      }
      goto LABEL_16;
    }
LABEL_14:
    *(_DWORD *)__src = 0x1000000;
    __asm { FMOV            V0.2S, #1.0 }
    *(void *)&__src[4] = _D0;
    *(_OWORD *)&__src[12] = xmmword_234414FB0;
    *(_DWORD *)&__src[28] = 1077516698;
    uint64_t v184 = 0;
    *(void *)&__src[32] = 0;
    long long v33 = *(_OWORD *)(MEMORY[0x263EF89A8] + 16);
    long long v185 = *MEMORY[0x263EF89A8];
    long long v34 = *MEMORY[0x263EF89A8];
    long long v186 = *(_OWORD *)(MEMORY[0x263EF89A8] + 16);
    long long v35 = *(_OWORD *)(MEMORY[0x263EF89A8] + 16);
    *(_OWORD *)float v187 = *(_OWORD *)(MEMORY[0x263EF89A8] + 32);
    long long v36 = *(_OWORD *)(MEMORY[0x263EF89A8] + 32);
    *(_OWORD *)&v187[16] = *(_OWORD *)(MEMORY[0x263EF89A8] + 48);
    long long v37 = *MEMORY[0x263EF89A8];
    long long v38 = *(_OWORD *)(MEMORY[0x263EF89A8] + 48);
    long long v190 = *(_OWORD *)(MEMORY[0x263EF89A8] + 32);
    long long v191 = v38;
    long long v188 = v37;
    long long v189 = v35;
    long long v39 = *(_OWORD *)(MEMORY[0x263EF89A8] + 48);
    long long v194 = *(_OWORD *)(MEMORY[0x263EF89A8] + 32);
    long long v195 = v39;
    long long v40 = *(_OWORD *)(MEMORY[0x263EF89A8] + 16);
    long long v192 = *MEMORY[0x263EF89A8];
    long long v193 = v40;
    long long v41 = *(_OWORD *)(MEMORY[0x263EF89A8] + 48);
    long long v198 = v36;
    long long v199 = v41;
    long long v196 = v34;
    long long v197 = v33;
    uint64_t v201 = 0;
    uint64_t v200 = 0;
    uint64_t v29 = (uint64_t)re::SmallHashTable<unsigned long long,re::RenderGraphSFBSystemShellBlurProvider::BlurFrameContext,4ul,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false>::add((uint64_t)this + 128, (uint64_t *)&v135, __src, 0);
    goto LABEL_15;
  }
  uint64_t v13 = (unsigned __int8 *)re::HashTable<unsigned long long,re::RenderGraphSFBSystemShellBlurProvider::BlurFrameContext,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::tryGet((uint64_t)this + 1504, v12);
  if (!v13)
  {
    *(_DWORD *)__src = 0x1000000;
    __asm { FMOV            V0.2S, #1.0 }
    *(void *)&__src[4] = _D0;
    *(_OWORD *)&__src[12] = xmmword_234414FB0;
    *(_DWORD *)&__src[28] = 1077516698;
    uint64_t v184 = 0;
    *(void *)&__src[32] = 0;
    long long v19 = *(_OWORD *)(MEMORY[0x263EF89A8] + 16);
    long long v185 = *MEMORY[0x263EF89A8];
    long long v186 = v19;
    long long v20 = *(_OWORD *)(MEMORY[0x263EF89A8] + 48);
    long long v22 = *MEMORY[0x263EF89A8];
    long long v21 = *(_OWORD *)(MEMORY[0x263EF89A8] + 16);
    *(_OWORD *)float v187 = *(_OWORD *)(MEMORY[0x263EF89A8] + 32);
    *(_OWORD *)&v187[16] = v20;
    long long v23 = *MEMORY[0x263EF89A8];
    long long v24 = *(_OWORD *)(MEMORY[0x263EF89A8] + 16);
    long long v25 = *(_OWORD *)(MEMORY[0x263EF89A8] + 48);
    long long v190 = *(_OWORD *)(MEMORY[0x263EF89A8] + 32);
    long long v191 = v25;
    long long v188 = v23;
    long long v189 = v24;
    long long v26 = *(_OWORD *)(MEMORY[0x263EF89A8] + 48);
    long long v194 = *(_OWORD *)(MEMORY[0x263EF89A8] + 32);
    long long v195 = v26;
    long long v27 = *(_OWORD *)(MEMORY[0x263EF89A8] + 16);
    long long v192 = *MEMORY[0x263EF89A8];
    long long v193 = v27;
    long long v28 = *(_OWORD *)(MEMORY[0x263EF89A8] + 48);
    long long v198 = v190;
    long long v199 = v28;
    long long v196 = v22;
    long long v197 = v21;
    uint64_t v201 = 0;
    uint64_t v200 = 0;
    uint64_t v29 = re::HashTable<unsigned long long,re::RenderGraphSFBSystemShellBlurProvider::BlurFrameContext,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::add((uint64_t)this + 1504, (uint64_t *)&v135, __src);
LABEL_15:
    uint64_t v13 = (unsigned __int8 *)v29;
  }
LABEL_16:
  if (*((unsigned __int8 *)this + 112) - 3 <= 1 && *v13 | v13[1])
  {
    re::AssetHandle::loadNow(*((void *)this + 12), 0);
    int v42 = *((_DWORD *)v13 + 4);
    int v120 = *((_DWORD *)v13 + 5);
    int v121 = *((_DWORD *)v13 + 6);
    int v43 = *((_DWORD *)v13 + 3);
    RenderGraph = (_anonymous_namespace_ *)re::RenderFrame::makeRenderGraph(a4, a3, 0);
    unsigned int v45 = re::supportedColorPixelFormat((id *)(*((void *)a4 + 1) + 184), v44);
    *(_DWORD *)&__src[8] = 3;
    *(_DWORD *)&__src[12] = v43;
    *(_DWORD *)&__src[16] = v42;
    *(_OWORD *)&__src[20] = xmmword_234414FD0;
    __src[36] = 1;
    __asm { FMOV            V8.2S, #1.0 }
    uint64_t v184 = _D8;
    long long v185 = xmmword_2343AEB90;
    long long v186 = xmmword_234414FC0;
    *(_DWORD *)float v187 = -1;
    *(_OWORD *)&v187[8] = xmmword_234378E20;
    v187[24] = 0;
    *(_DWORD *)&__src[4] = v45;
    *(_DWORD *)__src = 2;
    LODWORD(v17re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
    unsigned int v125 = v45;
    *(void *)((char *)&v176 + 4) = v45 | 0x300000000;
    HIDWORD(v17re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v43;
    *(_DWORD *)uint64_t v177 = v42;
    *(_OWORD *)&v177[4] = xmmword_234414FD0;
    v177[20] = 1;
    *(void *)&v177[24] = _D8;
    long long v178 = xmmword_2343AEB90;
    long long v179 = xmmword_234414FC0;
    *(_DWORD *)uint64_t v180 = -1;
    *(_OWORD *)&v180[8] = xmmword_234378E20;
    v180[24] = 0;
    int v113 = v42;
    if (a3)
    {
      uint64_t v47 = *a3;
      if (*a3)
      {
        char v48 = a3[1];
        if (v48)
        {
          float v49 = a3 + 2;
          do
          {
            uint64_t v47 = 31 * v47 + v48;
            int v50 = *(unsigned __int8 *)v49++;
            char v48 = v50;
          }
          while (v50);
        }
        v47 &= ~0x8000000000000000;
      }
    }
    else
    {
      uint64_t v47 = 0x7FFFFFFFFFFFFFFFLL;
    }
    uint64_t v122 = v47;
    int v131 = (uint64_t *)((char *)this + 88);
    uint64_t v51 = *((void *)a4 + 1);
    int v129 = *(unsigned __int8 *)(v51 + 303);
    uint64_t v52 = *(void *)(v51 + 120);
    int v133 = __s;
    int v114 = v43;
    if (v52)
    {
      re::BlurManager::getBackdropMaterial((re::AssetHandle *)v160, v52);
      BOOL v112 = *(void *)&v160[8] != 0;
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v160);
    }
    else
    {
      BOOL v112 = 0;
    }
    *(void *)uint64_t v160 = &v176;
    *(void *)&v160[8] = a4;
    *(void *)unint64_t v156 = 0x730609FCA8E5BE4FLL;
    *(void *)&v156[8] = "PassthroughColor";
    *(void *)&v160[16] = v156;
    v160[24] = 1;
    *(void *)&v160[32] = 65290051;
    *(void *)&v160[40] = "Color";
    LOBYTE(v16re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
    BYTE8(v162) = 0;
    *(void *)uint64_t v160 = __src;
    *(void *)&v160[8] = a4;
    *(void *)&v160[16] = &re::kPassthroughBlurredColorRead;
    v160[24] = 0;
    LOBYTE(v16re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
    BYTE8(v162) = 1;
    *(void *)long long v163 = v122;
    *(void *)uint64_t v160 = __src;
    *(void *)&v160[8] = a4;
    *(void *)&v160[16] = &re::kPassthroughBlurredColorWrite;
    v160[24] = 0;
    LOBYTE(v16re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
    BYTE8(v162) = 1;
    *(void *)long long v163 = v122;
    *(void *)uint64_t v160 = &v176;
    *(void *)&v160[8] = a4;
    *(void *)unint64_t v156 = 0x4231BC5CFFB1FB38;
    *(void *)&v156[8] = "UnprojectedBlurredColor";
    *(void *)&v160[16] = v156;
    v160[24] = 1;
    *(void *)&v160[32] = 65290051;
    *(void *)&v160[40] = "Color";
    LOBYTE(v16re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
    BYTE8(v162) = 0;
    *(void *)uint64_t v160 = __src;
    *(void *)&v160[8] = a4;
    *(void *)&v160[16] = &re::kOutputPassthroughBlurredColor;
    v160[24] = 0;
    LOBYTE(v16re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
    BYTE8(v162) = 1;
    *(void *)long long v163 = v122;
    *(void *)uint64_t v160 = 0x10CC0F66D471B4F0;
    re::RenderFrame::addTargetOutput(a4, (uint64_t *)v160, (double *)&v166, a3);
    *(void *)uint64_t v160 = __src;
    *(void *)&v160[8] = a4;
    *(void *)&v160[16] = &re::kOutputPassthroughBlurredColorSRGB;
    v160[24] = 0;
    LOBYTE(v16re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
    BYTE8(v162) = 1;
    *(void *)long long v163 = v122;
    *(void *)uint64_t v160 = 0x23D59E48A3024D6ALL;
    re::RenderFrame::addTargetOutput(a4, (uint64_t *)v160, (double *)&v164, a3);
    int v53 = re::RenderGraph::addNode<re::RenderGraphCameraSetupNode>(RenderGraph, "CameraSetup");
    *((unsigned char *)v53 + 25re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 1;
    int v54 = (re *)(*(uint64_t (**)(re::RenderGraphNode *, const char *, char *, re::RenderFrame *))(*(void *)v53 + 80))(v53, __s, a3, a4);
    *(void *)uint64_t v160 = 3;
    *(_DWORD *)&v160[8] = 2;
    memset(&v160[12], 255, 24);
    v160[36] = 0;
    *(void *)&v160[40] = _D8;
    long long v161 = xmmword_2343AEB90;
    long long v162 = xmmword_2343AEBA0;
    *(_DWORD *)long long v163 = -1;
    *(_OWORD *)&v163[8] = xmmword_234378E20;
    v163[24] = 0;
    *(void *)unint64_t v156 = 3;
    *(_DWORD *)&v156[8] = 2;
    memset(&v156[12], 255, 24);
    v156[36] = 0;
    *(void *)&v156[40] = _D8;
    long long v157 = xmmword_2343AEB90;
    long long v158 = xmmword_2343AEBA0;
    *(_DWORD *)unsigned int v159 = -1;
    *(_OWORD *)&v159[8] = xmmword_234378E20;
    v159[24] = 0;
    uint64_t v143 = 3;
    int v144 = 2;
    uint64_t v145 = -1;
    *(void *)&long long v146 = -1;
    *((void *)&v146 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = -1;
    char v147 = 0;
    uint64_t v150 = _D8;
    long long v151 = xmmword_2343AEB90;
    long long v152 = xmmword_2343AEBA0;
    int v153 = -1;
    long long v154 = xmmword_234378E20;
    char v155 = 0;
    uint64_t v141 = 0;
    uint64_t v142 = -1;
    uint64_t v139 = 0;
    uint64_t v140 = -1;
    __sa = a3;
    int8x16_t v132 = a4;
    if (v13[1])
    {
      TextureAlias = re::RenderGraph::addNode<re::SFBSystemShellCreateTextureAliasNode>(RenderGraph, "SetVCAPassthroughAlias");
      *(void *)uint64_t v208 = v166;
      *(void *)&v208[8] = v167;
      *(void *)&v208[16] = 0;
      *(void *)&v208[24] = 2;
      re::DynamicArray<re::TargetRead>::add((re::RenderGraphNode *)((char *)TextureAlias + 176), (__n128 *)v208);
      *((void *)TextureAlias + 33) = 0x23D59F1355F7D636;
      int v56 = re::RenderGraph::addNode<re::SFBSystemShellCreateTextureAliasNode>(RenderGraph, "SetVCAPassthroughSRGBAlias");
      *(void *)uint64_t v208 = v164;
      *(void *)&v208[8] = v165;
      *(void *)&v208[16] = 0;
      *(void *)&v208[24] = 2;
      re::DynamicArray<re::TargetRead>::add((re::RenderGraphNode *)((char *)v56 + 176), (__n128 *)v208);
      *((void *)v56 + 33) = 0x72FE99054D3CC2B0;
      __int16 v148 = v181;
      char v149 = v182;
      *(_DWORD *)&v160[8] = 3;
      *(_DWORD *)&v160[12] = v120;
      *(_DWORD *)&v160[16] = v121;
      *(_OWORD *)&v160[20] = xmmword_234414FD0;
      v160[36] = 1;
      *(_WORD *)&v160[37] = v181;
      v160[39] = v182;
      *(void *)&v160[40] = _D8;
      long long v161 = xmmword_2343AEB90;
      long long v162 = xmmword_234414FC0;
      *(_DWORD *)long long v163 = -1;
      *(_OWORD *)&v163[8] = xmmword_234378E20;
      v163[24] = 0;
      *(_DWORD *)&v160[4] = v125;
      *(_DWORD *)uint64_t v160 = 2;
      *(_OWORD *)&v159[9] = *(_OWORD *)&v163[9];
      long long v158 = xmmword_234414FC0;
      *(_OWORD *)unsigned int v159 = *(_OWORD *)v163;
      *(_OWORD *)&v156[32] = *(_OWORD *)&v160[32];
      long long v157 = xmmword_2343AEB90;
      *(_OWORD *)unint64_t v156 = *(_OWORD *)v160;
      *(_OWORD *)&v156[16] = *(_OWORD *)&v160[16];
      *(int32x2_t *)&v156[12] = vshl_n_s32(*(int32x2_t *)&v156[12], 2uLL);
      LODWORD(v143) = 0;
      HIDWORD(v143) = v125;
      long long v146 = xmmword_234414FD0;
      char v147 = 1;
      uint64_t v150 = _D8;
      long long v151 = xmmword_2343AEB90;
      long long v152 = xmmword_234415040;
      int v153 = -1;
      long long v154 = xmmword_234378E20;
      char v155 = 0;
      int v144 = 3;
      LODWORD(v145) = 4 * v120;
      HIDWORD(v145) = 4 * v121;
      if (v129)
      {
        *(void *)uint64_t v208 = &v143;
        *(void *)&v208[8] = a4;
        *(void *)&v208[16] = &re::kVCARenderTarget;
        v208[24] = 1;
        *(void *)&v208[32] = 65290051;
        *(void *)&v208[40] = "Color";
        v208[48] = 0;
        BYTE8(v209) = 0;
        uint64_t v57 = *(void *)v202;
        int v58 = *(_DWORD *)&v202[8];
        int v59 = *(_DWORD *)&v202[12];
        uint64_t v60 = v122;
      }
      else
      {
        *(void *)uint64_t v208 = v156;
        *(void *)&v208[8] = a4;
        *(void *)&v208[16] = &re::kVCARenderTarget;
        v208[24] = 0;
        v208[48] = 0;
        BYTE8(v209) = 1;
        uint64_t v60 = v122;
        *(void *)&long long v210 = v122;
        uint64_t v57 = *(void *)v202;
        int v58 = *(_DWORD *)&v202[8];
        int v59 = *(_DWORD *)&v202[12];
      }
      int v110 = v59;
      int v111 = v58;
      *(void *)uint64_t v208 = v160;
      *(void *)&v208[8] = a4;
      *(void *)&v208[16] = &re::kVCADownsampledColor;
      v208[24] = 0;
      v208[48] = 0;
      BYTE8(v209) = 1;
      *(void *)&long long v210 = v60;
      uint64_t v128 = *(void *)v202;
      int v126 = *(_DWORD *)&v202[12];
      int v127 = *(_DWORD *)&v202[8];
      *(void *)uint64_t v208 = v160;
      *(void *)&v208[8] = a4;
      *(void *)&v208[16] = &re::kVCABlurredColorRead;
      v208[24] = 0;
      v208[48] = 0;
      BYTE8(v209) = 1;
      *(void *)&long long v210 = v60;
      uint64_t v118 = *(void *)v202;
      int v116 = *(_DWORD *)&v202[12];
      int v117 = *(_DWORD *)&v202[8];
      *(void *)uint64_t v208 = v160;
      *(void *)&v208[8] = a4;
      *(void *)&v208[16] = &re::kVCABlurredColorWrite;
      v208[24] = 0;
      v208[48] = 0;
      BYTE8(v209) = 1;
      *(void *)&long long v210 = v60;
      uint64_t v104 = *(void *)v202;
      int v64 = *(_DWORD *)&v202[8];
      int v115 = *(_DWORD *)&v202[12];
      *(void *)uint64_t v208 = v160;
      *(void *)&v208[8] = a4;
      *(void *)&v208[16] = &re::kOutputVCABlurredColorSRGB;
      v208[24] = 0;
      v208[48] = 0;
      BYTE8(v209) = 1;
      *(void *)&long long v210 = v60;
      *(void *)uint64_t v208 = v160;
      *(void *)&v208[8] = a4;
      *(void *)&v208[16] = &re::kOutputVCOnlyBlurredColorSRGB;
      v208[24] = 0;
      v208[48] = 0;
      BYTE8(v209) = 1;
      *(void *)&long long v210 = v60;
      *(void *)uint64_t v208 = 0x7B9CDD367106FB41;
      re::RenderFrame::addTargetOutput(a4, (uint64_t *)v208, (double *)&v141, a3);
      *(void *)uint64_t v208 = 0x50A43212F8423086;
      re::RenderFrame::addTargetOutput(a4, (uint64_t *)v208, (double *)&v139, a3);
      int v119 = v64;
      if ([*(id *)(*((void *)a4 + 1) + 184) supportsSeparateDepthStencil])
      {
        HIDWORD(v143) = 252;
        *(void *)uint64_t v208 = &v143;
        *(void *)&v208[8] = a4;
        *(void *)&v213[0] = 0x23530BF6FEFLL;
        *((void *)&v213[0] + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = "VCADepth";
        *(void *)&v208[16] = v213;
        v208[24] = 1;
        *(void *)&v208[32] = 65919651;
        *(void *)&v208[40] = "Depth";
        v208[48] = 0;
        BYTE8(v209) = 0;
        uint64_t v124 = *(void *)v202;
        int v108 = *(_DWORD *)&v202[12];
        int v109 = *(_DWORD *)&v202[8];
        HIDWORD(v143) = 253;
        *(void *)uint64_t v208 = &v143;
        *(void *)&v208[8] = a4;
        *(void *)&v213[0] = 0x849AF311B97E8;
        *((void *)&v213[0] + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = "VCAStencil";
        *(void *)&v208[16] = v213;
        v208[24] = 1;
        *(void *)&v208[32] = 0x11F25A259CLL;
        *(void *)&v208[40] = "Stencil";
        v208[48] = 0;
        BYTE8(v209) = 0;
        uint64_t v107 = *(void *)v202;
        int v105 = *(_DWORD *)&v202[12];
        int v106 = *(_DWORD *)&v202[8];
      }
      else
      {
        HIDWORD(v143) = 260;
        *(void *)uint64_t v208 = &v143;
        *(void *)&v208[8] = a4;
        *(void *)&v213[0] = 0x7C3C8EACDA68BACDLL;
        *((void *)&v213[0] + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = "VCADepthStencil";
        *(void *)&v208[16] = v213;
        v208[24] = 1;
        *(void *)&v208[32] = 65919651;
        *(void *)&v208[40] = "Depth";
        v208[48] = 0;
        BYTE8(v209) = 0;
        uint64_t v107 = *(void *)v202;
        uint64_t v124 = *(void *)v202;
        int v105 = *(_DWORD *)&v202[12];
        int v108 = *(_DWORD *)&v202[12];
        int v106 = *(_DWORD *)&v202[8];
        int v109 = *(_DWORD *)&v202[8];
      }
      char v66 = re::globalAllocators(v65);
      uint64_t v67 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v66[2] + 32))(v66[2], 264, 8);
      int v68 = re::RenderGraphNode::RenderGraphNode((re::RenderGraphNode *)v67, "StencilBlurMeshNode");
      *((_DWORD *)v68 + 64) = 1;
      *(void *)int v68 = &unk_26E719EA8;
      *(void *)uint64_t v208 = v68;
      re::DynamicArray<re::TransitionCondition *>::add(RenderGraph, v208);
      *(void *)(v67 + 24) = *((void *)RenderGraph + 10);
      *(void *)(v67 + 32) = *((void *)RenderGraph + 12);
      *(void *)(v67 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *((void *)RenderGraph + 13);
      memset(&v202[8], 0, 18);
      *(void *)uint64_t v208 = v57;
      *(_DWORD *)&v208[8] = v111;
      *(_DWORD *)&v208[12] = v110;
      *(void *)&v208[16] = 0x100000000;
      *(_OWORD *)&v208[24] = *(unint64_t *)v202;
      *(_OWORD *)&v208[34] = 0u;
      *(void *)&v208[52] = 0;
      re::DynamicArray<re::TargetWrite>::add((_anonymous_namespace_ *)(v67 + 216), (uint64_t)v208);
      memset((char *)v213 + 8, 0, 18);
      *(void *)uint64_t v208 = v124;
      *(_DWORD *)&v208[8] = v109;
      *(_DWORD *)&v208[12] = v108;
      *(void *)&v208[16] = 0x200000000;
      *(_OWORD *)&v208[24] = *(unint64_t *)&v213[0];
      *(_OWORD *)&v208[34] = 0u;
      *(void *)&v208[52] = 0;
      re::DynamicArray<re::TargetWrite>::add((_anonymous_namespace_ *)(v67 + 216), (uint64_t)v208);
      memset((char *)v212 + 8, 0, 18);
      *(void *)uint64_t v208 = v107;
      *(_DWORD *)&v208[8] = v106;
      *(_DWORD *)&v208[12] = v105;
      *(void *)&v208[16] = 0x300000000;
      *(_OWORD *)&v208[24] = *(unint64_t *)&v212[0];
      *(_OWORD *)&v208[34] = 0u;
      *(void *)&v208[52] = 0;
      re::DynamicArray<re::TargetWrite>::add((_anonymous_namespace_ *)(v67 + 216), (uint64_t)v208);
      uint64_t v103 = v57;
      if (v129)
      {
        *(void *)uint64_t v208 = v128;
        *(_DWORD *)&v208[8] = v127;
        *(_DWORD *)&v208[12] = v126;
        *(void *)&v208[16] = 0x500000001;
        *(_OWORD *)&v208[32] = xmmword_23435FBB0;
        *(_WORD *)&v208[48] = 0;
        *(void *)&v208[52] = 0;
        re::DynamicArray<re::TargetWrite>::add((_anonymous_namespace_ *)(v67 + 216), (uint64_t)v208);
        *(unsigned char *)(v67 + 65) = 1;
        *(unsigned char *)(v67 + 80) = 3;
        re::RenderGraphNode::configure((re::RenderGraphNode *)v67, v133, a3, a4);
        unint64_t v70 = re::globalAllocators(v69);
        uint64_t v71 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v70[2] + 32))(v70[2], 448, 16);
        unint64_t v72 = re::RenderGraphMRCNode::RenderGraphMRCNode((re::RenderGraphMRCNode *)v71, "VCATiledDownsampleNode");
        *(void *)unint64_t v72 = &unk_26E71A238;
        *(void *)uint64_t v208 = v72;
        re::DynamicArray<re::TransitionCondition *>::add(RenderGraph, v208);
        *(void *)(v71 + 24) = *((void *)RenderGraph + 10);
        *(void *)(v71 + 32) = *((void *)RenderGraph + 12);
        *(void *)(v71 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *((void *)RenderGraph + 13);
        re::AssetHandle::operator=(v71 + 256, v131);
        *(void *)uint64_t v208 = "kernelTiledVCADownsample4x";
        *(void *)&v208[8] = 26;
        re::DynamicString::operator=((re::DynamicString *)(v71 + 280), (uint64_t)v208);
        *(void *)uint64_t v208 = v57;
        *(_DWORD *)&v208[8] = v111;
        *(_DWORD *)&v208[12] = v110;
        *(void *)&v208[16] = 0x100000000;
        *(_OWORD *)&v208[24] = *(_OWORD *)v202;
        *(_OWORD *)&v208[34] = *(_OWORD *)&v202[10];
        *(void *)&v208[52] = 0;
        re::DynamicArray<re::TargetWrite>::add((_anonymous_namespace_ *)(v71 + 216), (uint64_t)v208);
        *(void *)uint64_t v208 = v124;
        *(_DWORD *)&v208[8] = v109;
        *(_DWORD *)&v208[12] = v108;
        *(void *)&v208[16] = 0x200000000;
        *(_OWORD *)&v208[24] = v213[0];
        *(_OWORD *)&v208[34] = *(_OWORD *)((char *)v213 + 10);
        *(void *)&v208[52] = 0;
        re::DynamicArray<re::TargetWrite>::add((_anonymous_namespace_ *)(v71 + 216), (uint64_t)v208);
        *(void *)uint64_t v208 = v107;
        *(_DWORD *)&v208[8] = v106;
        *(_DWORD *)&v208[12] = v105;
        *(void *)&v208[16] = 0x300000000;
        *(_OWORD *)&v208[24] = v212[0];
        *(_OWORD *)&v208[34] = *(_OWORD *)((char *)v212 + 10);
        *(void *)&v208[52] = 0;
        re::DynamicArray<re::TargetWrite>::add((_anonymous_namespace_ *)(v71 + 216), (uint64_t)v208);
        *(void *)uint64_t v208 = v57;
        *(_DWORD *)&v208[8] = v111;
        *(_DWORD *)&v208[12] = v110;
        *(void *)&v208[16] = 0;
        *(void *)&v208[24] = 0xA00000002;
        re::DynamicArray<re::TargetRead>::add((_anonymous_namespace_ *)(v71 + 176), (__n128 *)v208);
        *(void *)uint64_t v208 = v128;
        *(_DWORD *)&v208[8] = v127;
        *(_DWORD *)&v208[12] = v126;
        *(void *)&v208[16] = 0x500000001;
        *(_OWORD *)&v208[32] = xmmword_23435FBB0;
        *(_WORD *)&v208[48] = 0;
        *(void *)&v208[52] = 0;
        __n128 v73 = re::DynamicArray<re::TargetWrite>::add((_anonymous_namespace_ *)(v71 + 216), (uint64_t)v208);
        *(unsigned char *)(v71 + 80) = 3;
        *(void *)(v71 + 33re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0x800000008;
        *(unsigned char *)(v71 + 344) = 0;
        *(unsigned char *)(v71 + 65) = 1;
        int v54 = (re *)(*(uint64_t (**)(uint64_t, const char *, char *, re::RenderFrame *, __n128))(*(void *)v71 + 80))(v71, v133, a3, a4, v73);
      }
      else
      {
        *(unsigned char *)(v67 + 65) = 1;
        *(unsigned char *)(v67 + 80) = 3;
        re::RenderGraphNode::configure((re::RenderGraphNode *)v67, v133, a3, a4);
      }
      int v63 = v43;
      int v123 = 2;
      int v61 = RenderGraph;
      int v62 = (uint64_t *)((char *)this + 88);
    }
    else
    {
      int v119 = -1;
      uint64_t v103 = 0;
      uint64_t v104 = 0;
      uint64_t v118 = 0;
      uint64_t v128 = 0;
      int v115 = -1;
      int v116 = -1;
      int v117 = -1;
      int v126 = -1;
      int v127 = -1;
      int v110 = -1;
      int v111 = -1;
      int v123 = -1;
      int v61 = RenderGraph;
      int v62 = (uint64_t *)((char *)this + 88);
      int v63 = v114;
    }
    if (v112)
    {
      *(_OWORD *)uint64_t v208 = v176;
      *(_OWORD *)&v208[16] = *(_OWORD *)v177;
      long long v209 = v179;
      long long v210 = *(_OWORD *)v180;
      long long v211 = *(_OWORD *)&v180[16];
      *(_OWORD *)&v208[32] = *(_OWORD *)&v177[16];
      *(_OWORD *)&v208[48] = v178;
      *(int32x2_t *)&v208[12] = vshl_n_s32(*(int32x2_t *)&v208[12], 2uLL);
      *(void *)uint64_t v202 = v208;
      *(void *)&v202[8] = a4;
      *(void *)&v213[0] = 0x304E5AEDEAECE73ELL;
      *((void *)&v213[0] + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = "SyntheticColor";
      *(void *)&v202[16] = v213;
      v202[24] = 1;
      *(void *)&long long v203 = 65290051;
      *((void *)&v203 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = "Color";
      LOBYTE(v204) = 0;
      char v207 = 0;
      *(_DWORD *)&v208[4] = 252;
      *(void *)uint64_t v202 = v208;
      *(void *)&v202[8] = a4;
      *(void *)&v213[0] = 0x304E5AEDEAF6829ELL;
      *((void *)&v213[0] + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = "SyntheticDepth";
      *(void *)&v202[16] = v213;
      v202[24] = 1;
      *(void *)&long long v203 = 65919651;
      *((void *)&v203 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = "Depth";
      LOBYTE(v204) = 0;
      char v207 = 0;
      uint64_t v74 = *(void *)(*((void *)a4 + 1) + 120);
      re::BlurManager::getBackdropMaterial((re::AssetHandle *)v213, v74);
      re::DynamicString::DynamicString((re::DynamicString *)v202, (const re::DynamicString *)(v74 + 192));
      float32x4_t v75 = re::RenderGraph::addNode<re::RenderGraphFullscreenNode>(v61, "BackdropPass");
      re::AssetHandle::operator=((uint64_t)v75 + 264, (uint64_t *)v213);
      re::DynamicString::operator=((re::RenderGraphFullscreenNode *)((char *)v75 + 288), (re::DynamicString *)v202);
      *((unsigned char *)v75 + 32re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 1;
      long long v136 = 0uLL;
      LOBYTE(v212[0]) = 0;
      re::RenderGraphMeshNodeBase::setColorAttachment((uint64_t)v75, 0, v138, &v136, 0, (uint64_t)v212);
      LOBYTE(v212[0]) = 0;
      double v76 = re::RenderGraphMeshNodeBase::setDepthOnlyAttachment((uint64_t)v75, (uint64_t *)v137, 0, (uint64_t)v212, 0.0);
      *((unsigned char *)v75 + 65) = 1;
      (*(void (**)(re::RenderGraphFullscreenNode *, const char *, char *, re::RenderFrame *, double))(*(void *)v75 + 80))(v75, v133, a3, a4, v76);
      if (*(void *)v202 && (v202[8] & 1) != 0) {
        (*(void (**)(void))(**(void **)v202 + 40))();
      }
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v213);
      uint64_t v77 = re::RenderGraph::addNode<re::SFBSystemShellComputeNode>(v61, "PassthroughDownsampleCompute");
      re::AssetHandle::operator=((uint64_t)v77 + 256, v62);
      *(void *)uint64_t v202 = "kernelSFBBilerpDownsample4x";
      *(void *)&v202[8] = 27;
      re::DynamicString::operator=((re::RenderGraphComputeNodeBase *)((char *)v77 + 280), (uint64_t)v202);
      int v78 = HIDWORD(v176);
      int v79 = *(_DWORD *)v177;
      int v80 = *(_DWORD *)&v177[8];
      *((_DWORD *)v77 + 104) = 1;
      *((_DWORD *)v77 + 102) = v78;
      *((_DWORD *)v77 + 103) = v80;
      *((void *)v77 + 53) = 0x100000001;
      *((_DWORD *)v77 + 105) = v79;
      *(void *)uint64_t v202 = v138[0];
      *(void *)&v202[8] = v138[1];
      *(void *)&v202[16] = 0;
      *(void *)&v202[24] = 2;
      re::DynamicArray<re::TargetRead>::add((re::RenderGraphComputeNodeBase *)((char *)v77 + 176), (__n128 *)v202);
      *(void *)uint64_t v202 = v168;
      *(void *)&v202[8] = v169;
      *(void *)&v202[16] = 0x500000001;
      BOOL v81 = v61;
      int v82 = v62;
      long long v203 = xmmword_23435FBB0;
      __int16 v204 = 0;
      int v206 = 0;
      int v205 = 0;
      __n128 v83 = re::DynamicArray<re::TargetWrite>::add((re::RenderGraphComputeNodeBase *)((char *)v77 + 216), (uint64_t)v202);
      int v84 = __sa;
      uint64_t v85 = (re *)(*(uint64_t (**)(re::RenderGraphComputeNodeBase *, const char *, const char *, re::RenderFrame *, __n128))(*(void *)v77 + 80))(v77, v133, __sa, v132, v83);
      int v86 = v113;
    }
    else
    {
      int v87 = re::globalAllocators(v54);
      uint64_t v88 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v87[2] + 32))(v87[2], 496, 16);
      int v89 = re::RenderGraphComputeNodeBase::RenderGraphComputeNodeBase((re::RenderGraphComputeNodeBase *)v88, "PassthroughDownsample");
      *(void *)int v89 = &unk_26E719F50;
      *((unsigned char *)v89 + 480) = 1;
      *(void *)uint64_t v208 = v89;
      re::DynamicArray<re::TransitionCondition *>::add(v61, v208);
      *(void *)(v88 + 24) = *((void *)v61 + 10);
      *(void *)(v88 + 32) = *((void *)v61 + 12);
      *(void *)(v88 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *((void *)v61 + 13);
      re::AssetHandle::operator=(v88 + 256, v62);
      *(void *)uint64_t v208 = "kernelSFBARKitPassthroughDownsample";
      *(void *)&v208[8] = 35;
      re::DynamicString::operator=((re::DynamicString *)(v88 + 280), (uint64_t)v208);
      *(unsigned char *)(v88 + 480) = 1;
      *(_DWORD *)(v88 + 40re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v63;
      *(void *)(v88 + 412) = 0x100000002;
      *(void *)(v88 + 424) = 0x100000001;
      int v86 = v113;
      *(_DWORD *)(v88 + 420) = v113;
      *(void *)uint64_t v208 = v168;
      *(void *)&v208[8] = v169;
      *(void *)&v208[16] = 0x500000002;
      BOOL v81 = v61;
      int v82 = v62;
      *(_OWORD *)&v208[32] = xmmword_23435FBB0;
      *(_WORD *)&v208[48] = 0;
      *(_DWORD *)&v208[56] = 0;
      *(_DWORD *)&v208[52] = 0;
      re::DynamicArray<re::TargetWrite>::add((_anonymous_namespace_ *)(v88 + 216), (uint64_t)v208);
      BOOL v90 = a4;
      int v84 = __sa;
      uint64_t v85 = (re *)re::RenderGraphComputeNodeBase::configure((re::RenderGraphComputeNodeBase *)v88, v133, __sa, v90);
    }
    char v91 = re::globalAllocators(v85);
    uint64_t v92 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v91[2] + 32))(v91[2], 480, 16);
    uint64_t v93 = re::RenderGraphComputeNodeBase::RenderGraphComputeNodeBase((re::RenderGraphComputeNodeBase *)v92, "PassthroughReprojectAndRectify");
    *(void *)uint64_t v93 = &unk_26E71A010;
    *(void *)uint64_t v208 = v93;
    re::DynamicArray<re::TransitionCondition *>::add(v81, v208);
    *(void *)(v92 + 24) = *((void *)v81 + 10);
    *(void *)(v92 + 32) = *((void *)v81 + 12);
    *(void *)(v92 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *((void *)v81 + 13);
    re::AssetHandle::operator=(v92 + 256, v82);
    *(void *)uint64_t v208 = "kernelSFBNoReprojectAndNoBlend";
    *(void *)&v208[8] = 30;
    re::DynamicString::operator=((re::DynamicString *)(v92 + 280), (uint64_t)v208);
    *(void *)uint64_t v208 = v174;
    *(void *)&v208[8] = v175;
    *(void *)&v208[16] = 0x500000000;
    *(_OWORD *)&v208[32] = xmmword_23435FBB0;
    *(_WORD *)&v208[48] = 0;
    *(void *)&v208[52] = 0;
    re::DynamicArray<re::TargetWrite>::add((_anonymous_namespace_ *)(v92 + 216), (uint64_t)v208);
    *(void *)uint64_t v208 = v168;
    *(void *)&v208[8] = v169;
    *(_DWORD *)&v208[16] = 1;
    *(_WORD *)&v208[20] = 0;
    v208[22] = 0;
    *(void *)&v208[24] = 2;
    re::DynamicArray<re::TargetRead>::add((_anonymous_namespace_ *)(v92 + 176), (__n128 *)v208);
    *(_DWORD *)(v92 + 40re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v63;
    *(void *)(v92 + 412) = 0x100000002;
    *(void *)(v92 + 424) = 0x100000001;
    *(_DWORD *)(v92 + 420) = v86;
    re::RenderGraphComputeNodeBase::configure((re::RenderGraphComputeNodeBase *)v92, v133, v84, v132);
    uint64_t v94 = re::RenderGraph::addNode<re::SFBSystemShellBlurTAANode>(v81, "PassthroughBlurAndFilter");
    re::AssetHandle::operator=((uint64_t)v94 + 256, v82);
    *(void *)uint64_t v208 = "kernelSFBBlurAndFilter";
    *(void *)&v208[8] = 22;
    re::DynamicString::operator=((re::RenderGraphComputeNodeBase *)((char *)v94 + 280), (uint64_t)v208);
    *((_DWORD *)v94 + 102) = v63;
    *(void *)((char *)v94 + 412) = 0x100000002;
    *((void *)v94 + 53) = 0x100000001;
    *((_DWORD *)v94 + 105) = v86;
    *(void *)uint64_t v208 = v174;
    *(void *)&v208[8] = v175;
    *(void *)&v208[16] = 0;
    *(void *)&v208[24] = 2;
    re::DynamicArray<re::TargetRead>::add((re::RenderGraphComputeNodeBase *)((char *)v94 + 176), (__n128 *)v208);
    *(void *)uint64_t v208 = v172;
    *(void *)&v208[8] = v173;
    *(_DWORD *)&v208[16] = 1;
    *(_WORD *)&v208[20] = 0;
    v208[22] = 0;
    *(void *)&v208[24] = 2;
    re::DynamicArray<re::TargetRead>::add((re::RenderGraphComputeNodeBase *)((char *)v94 + 176), (__n128 *)v208);
    *(void *)uint64_t v208 = v170;
    *(void *)&v208[8] = v171;
    *(void *)&v208[16] = 0x500000002;
    *(_OWORD *)&v208[32] = xmmword_23435FBB0;
    *(_WORD *)&v208[48] = 0;
    *(void *)&v208[52] = 0;
    re::DynamicArray<re::TargetWrite>::add((re::RenderGraphComputeNodeBase *)((char *)v94 + 216), (uint64_t)v208);
    *(void *)uint64_t v208 = v166;
    *(void *)&v208[8] = v167;
    *(void *)&v208[16] = 0x500000003;
    *(_OWORD *)&v208[32] = xmmword_23435FBB0;
    *(_WORD *)&v208[48] = 0;
    *(void *)&v208[52] = 0;
    re::DynamicArray<re::TargetWrite>::add((re::RenderGraphComputeNodeBase *)((char *)v94 + 216), (uint64_t)v208);
    *(void *)uint64_t v208 = v164;
    *(void *)&v208[8] = v165;
    *(void *)&v208[16] = 0x500000004;
    *(_OWORD *)&v208[32] = xmmword_23435FBB0;
    *(_WORD *)&v208[48] = 0;
    *(void *)&v208[52] = 0;
    re::DynamicArray<re::TargetWrite>::add((re::RenderGraphComputeNodeBase *)((char *)v94 + 216), (uint64_t)v208);
    int v95 = 8 * v86 + 15;
    *((void *)v94 + 9) = v95 & 0xFFFFFFF0;
    *(_DWORD *)uint64_t v208 = 0;
    *(_DWORD *)&v208[4] = v95 & 0xFFFFFFF0;
    re::DynamicArray<re::RenderGraphResourceAllocationManager::TextureIndexAndStage>::add((void *)v94 + 54, v208);
    (*(void (**)(re::RenderGraphComputeNodeBase *, const char *, const char *, re::RenderFrame *))(*(void *)v94 + 80))(v94, v133, v84, v132);
    *((unsigned char *)v94 + 480) = 0;
    *((_DWORD *)v94 + 122) = v63;
    *((_DWORD *)v94 + 12re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = v86;
    unint64_t v96 = re::RenderGraph::addNode<re::SFBSystemShellReprojectNode>(v81, "reprojectFilteredBlur");
    re::AssetHandle::operator=((uint64_t)v96 + 256, v131);
    *(void *)uint64_t v208 = "kernelSFBReprojectAndSRGBCorrect";
    *(void *)&v208[8] = 32;
    re::DynamicString::operator=((re::RenderGraphComputeNodeBase *)((char *)v96 + 280), (uint64_t)v208);
    *((_DWORD *)v96 + 102) = v63;
    *(void *)((char *)v96 + 412) = 0x100000002;
    *((void *)v96 + 53) = 0x100000001;
    *((_DWORD *)v96 + 105) = v86;
    *(void *)uint64_t v208 = v172;
    *(void *)&v208[8] = v173;
    *(void *)&v208[16] = 0;
    *(void *)&v208[24] = 2;
    re::DynamicArray<re::TargetRead>::add((re::RenderGraphComputeNodeBase *)((char *)v96 + 176), (__n128 *)v208);
    *(void *)uint64_t v208 = v170;
    *(void *)&v208[8] = v171;
    *(_DWORD *)&v208[16] = 1;
    *(_WORD *)&v208[20] = 0;
    v208[22] = 0;
    *(void *)&v208[24] = 2;
    re::DynamicArray<re::TargetRead>::add((re::RenderGraphComputeNodeBase *)((char *)v96 + 176), (__n128 *)v208);
    *(void *)uint64_t v208 = v166;
    *(void *)&v208[8] = v167;
    *(void *)&v208[16] = 0x500000002;
    *(_OWORD *)&v208[32] = xmmword_23435FBB0;
    *(_WORD *)&v208[48] = 0;
    *(void *)&v208[52] = 0;
    re::DynamicArray<re::TargetWrite>::add((re::RenderGraphComputeNodeBase *)((char *)v96 + 216), (uint64_t)v208);
    *(void *)uint64_t v208 = v164;
    *(void *)&v208[8] = v165;
    *(void *)&v208[16] = 0x500000003;
    *(_OWORD *)&v208[32] = xmmword_23435FBB0;
    *(_WORD *)&v208[48] = 0;
    *(void *)&v208[52] = 0;
    re::DynamicArray<re::TargetWrite>::add((re::RenderGraphComputeNodeBase *)((char *)v96 + 216), (uint64_t)v208);
    re::RenderGraphComputeNodeBase::configure(v96, v133, v84, v132);
    *((_DWORD *)v96 + 12re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = v63;
    *((_DWORD *)v96 + 120) = v86;
    if (v13[1])
    {
      if (!v129)
      {
        unint64_t v97 = re::RenderGraph::addNode<re::SFBSystemShellComputeNode>(v81, "VCADownsampleCompute");
        re::AssetHandle::operator=((uint64_t)v97 + 256, v131);
        *(void *)uint64_t v208 = "kernelSFBBilerpDownsample4x";
        *(void *)&v208[8] = 27;
        re::DynamicString::operator=((re::RenderGraphComputeNodeBase *)((char *)v97 + 280), (uint64_t)v208);
        *((_DWORD *)v97 + 104) = 1;
        *((_DWORD *)v97 + 102) = v120;
        *((_DWORD *)v97 + 103) = v123;
        *((void *)v97 + 53) = 0x100000001;
        *((_DWORD *)v97 + 105) = v121;
        *(void *)uint64_t v208 = v103;
        *(_DWORD *)&v208[8] = v111;
        *(_DWORD *)&v208[12] = v110;
        *(void *)&v208[16] = 0;
        *(void *)&v208[24] = 2;
        re::DynamicArray<re::TargetRead>::add((re::RenderGraphComputeNodeBase *)((char *)v97 + 176), (__n128 *)v208);
        *(void *)uint64_t v208 = v128;
        *(_DWORD *)&v208[8] = v127;
        *(_DWORD *)&v208[12] = v126;
        *(void *)&v208[16] = 0x500000001;
        *(_OWORD *)&v208[32] = xmmword_23435FBB0;
        *(_WORD *)&v208[48] = 0;
        *(_DWORD *)&v208[56] = 0;
        *(_DWORD *)&v208[52] = 0;
        __n128 v98 = re::DynamicArray<re::TargetWrite>::add((re::RenderGraphComputeNodeBase *)((char *)v97 + 216), (uint64_t)v208);
        (*(void (**)(re::RenderGraphComputeNodeBase *, const char *, const char *, re::RenderFrame *, __n128))(*(void *)v97 + 80))(v97, v133, v84, v132, v98);
      }
      float32x4_t v99 = re::RenderGraph::addNode<re::SFBSystemShellBlurTAANode>(v81, "VCABlurAndFilterAndBlendPassthrough");
      re::AssetHandle::operator=((uint64_t)v99 + 256, v131);
      *(void *)uint64_t v208 = "kernelSFBVCABlurAndFilterAndBlendPassthrough";
      *(void *)&v208[8] = 44;
      re::DynamicString::operator=((re::RenderGraphComputeNodeBase *)((char *)v99 + 280), (uint64_t)v208);
      *((_DWORD *)v99 + 104) = 1;
      *((_DWORD *)v99 + 102) = v120;
      *((_DWORD *)v99 + 103) = v123;
      *((void *)v99 + 53) = 0x100000001;
      *((_DWORD *)v99 + 105) = v121;
      *(void *)uint64_t v208 = v128;
      *(_DWORD *)&v208[8] = v127;
      *(_DWORD *)&v208[12] = v126;
      *(void *)&v208[16] = 0;
      *(void *)&v208[24] = 2;
      re::DynamicArray<re::TargetRead>::add((re::RenderGraphComputeNodeBase *)((char *)v99 + 176), (__n128 *)v208);
      *(void *)uint64_t v208 = v164;
      *(void *)&v208[8] = v165;
      *(_DWORD *)&v208[16] = 1;
      *(_WORD *)&v208[20] = 0;
      v208[22] = 0;
      *(void *)&v208[24] = 2;
      re::DynamicArray<re::TargetRead>::add((re::RenderGraphComputeNodeBase *)((char *)v99 + 176), (__n128 *)v208);
      *(void *)uint64_t v208 = v118;
      *(_DWORD *)&v208[8] = v117;
      *(_DWORD *)&v208[12] = v116;
      *(_DWORD *)&v208[16] = 2;
      *(_WORD *)&v208[20] = 0;
      v208[22] = 0;
      *(void *)&v208[24] = 0x500000002;
      re::DynamicArray<re::TargetRead>::add((re::RenderGraphComputeNodeBase *)((char *)v99 + 176), (__n128 *)v208);
      *(void *)uint64_t v208 = v104;
      *(_DWORD *)&v208[8] = v119;
      *(_DWORD *)&v208[12] = v115;
      *(void *)&v208[16] = 0x500000003;
      *(_OWORD *)&v208[32] = xmmword_23435FBB0;
      *(_WORD *)&v208[48] = 0;
      *(void *)&v208[52] = 0;
      re::DynamicArray<re::TargetWrite>::add((re::RenderGraphComputeNodeBase *)((char *)v99 + 216), (uint64_t)v208);
      *(void *)uint64_t v208 = v141;
      *(void *)&v208[8] = v142;
      *(void *)&v208[16] = 0x500000004;
      *(_OWORD *)&v208[32] = xmmword_23435FBB0;
      *(_WORD *)&v208[48] = 0;
      *(void *)&v208[52] = 0;
      re::DynamicArray<re::TargetWrite>::add((re::RenderGraphComputeNodeBase *)((char *)v99 + 216), (uint64_t)v208);
      *(void *)uint64_t v208 = v139;
      *(void *)&v208[8] = v140;
      *(void *)&v208[16] = 0x500000005;
      *(_OWORD *)&v208[32] = xmmword_23435FBB0;
      *(_WORD *)&v208[48] = 0;
      *(void *)&v208[52] = 0;
      re::DynamicArray<re::TargetWrite>::add((re::RenderGraphComputeNodeBase *)((char *)v99 + 216), (uint64_t)v208);
      int v100 = 8 * v121 + 15;
      *((void *)v99 + 9) = v100 & 0xFFFFFFF0;
      *(_DWORD *)uint64_t v208 = 0;
      *(_DWORD *)&v208[4] = v100 & 0xFFFFFFF0;
      re::DynamicArray<re::RenderGraphResourceAllocationManager::TextureIndexAndStage>::add((void *)v99 + 54, v208);
      (*(void (**)(re::RenderGraphComputeNodeBase *, const char *, const char *, re::RenderFrame *))(*(void *)v99 + 80))(v99, v133, v84, v132);
      *((unsigned char *)v99 + 480) = 1;
      *((_DWORD *)v99 + 122) = v120;
      *((_DWORD *)v99 + 12re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = v121;
      unint64_t v101 = re::RenderGraph::addNode<re::SFBSystemShellReprojectNode>(RenderGraph, "reprojectVCABlur");
      re::AssetHandle::operator=((uint64_t)v101 + 256, v131);
      *(void *)uint64_t v208 = "kernelSFBReprojectAndBlendPassthrough";
      *(void *)&v208[8] = 37;
      re::DynamicString::operator=((re::RenderGraphComputeNodeBase *)((char *)v101 + 280), (uint64_t)v208);
      *((_DWORD *)v101 + 104) = 1;
      *((_DWORD *)v101 + 102) = v120;
      *((_DWORD *)v101 + 103) = v123;
      *((void *)v101 + 53) = 0x100000001;
      *((_DWORD *)v101 + 105) = v121;
      *(void *)uint64_t v208 = v118;
      *(_DWORD *)&v208[8] = v117;
      *(_DWORD *)&v208[12] = v116;
      *(void *)&v208[16] = 0;
      *(void *)&v208[24] = 2;
      re::DynamicArray<re::TargetRead>::add((re::RenderGraphComputeNodeBase *)((char *)v101 + 176), (__n128 *)v208);
      *(void *)uint64_t v208 = v104;
      *(_DWORD *)&v208[8] = v119;
      *(_DWORD *)&v208[12] = v115;
      *(_DWORD *)&v208[16] = 1;
      *(_WORD *)&v208[20] = 0;
      v208[22] = 0;
      *(void *)&v208[24] = 2;
      re::DynamicArray<re::TargetRead>::add((re::RenderGraphComputeNodeBase *)((char *)v101 + 176), (__n128 *)v208);
      *(void *)uint64_t v208 = v164;
      *(void *)&v208[8] = v165;
      *(_DWORD *)&v208[16] = 4;
      *(_WORD *)&v208[20] = 0;
      v208[22] = 0;
      *(void *)&v208[24] = 2;
      re::DynamicArray<re::TargetRead>::add((re::RenderGraphComputeNodeBase *)((char *)v101 + 176), (__n128 *)v208);
      *(void *)uint64_t v208 = v141;
      *(void *)&v208[8] = v142;
      *(void *)&v208[16] = 0x500000002;
      *(_OWORD *)&v208[32] = xmmword_23435FBB0;
      *(_WORD *)&v208[48] = 0;
      *(void *)&v208[52] = 0;
      re::DynamicArray<re::TargetWrite>::add((re::RenderGraphComputeNodeBase *)((char *)v101 + 216), (uint64_t)v208);
      *(void *)uint64_t v208 = v139;
      *(void *)&v208[8] = v140;
      *(void *)&v208[16] = 0x500000005;
      *(_OWORD *)&v208[32] = xmmword_23435FBB0;
      *(_WORD *)&v208[48] = 0;
      *(void *)&v208[52] = 0;
      re::DynamicArray<re::TargetWrite>::add((re::RenderGraphComputeNodeBase *)((char *)v101 + 216), (uint64_t)v208);
      re::RenderGraphComputeNodeBase::configure(v101, v133, v84, v132);
      *((_DWORD *)v101 + 12re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = v120;
      *((_DWORD *)v101 + 120) = v121;
    }
    else
    {
      int v102 = re::RenderGraph::addNode<re::SFBSystemShellCreateTextureAliasNode>(v81, "SetVCAPassthroughSRGBAlias");
      *(void *)uint64_t v208 = v164;
      *(void *)&v208[8] = v165;
      *(void *)&v208[16] = 0;
      *(void *)&v208[24] = 2;
      re::DynamicArray<re::TargetRead>::add((re::RenderGraphNode *)((char *)v102 + 176), (__n128 *)v208);
      *((void *)v102 + 33) = 0x60DF09E0AF8AD07;
    }
  }
}

void re::SFBSystemShellBlurProvider::registerProviderCommon(re::SFBSystemShellBlurProvider *this, re::RenderGraphManager *a2, AssetService *a3, const re::AssetHandle *a4, re::AssetHandle *a5, re::AssetHandle *a6, re::ProviderHandle *a7)
{
  uint64_t v13 = re::globalAllocators(this);
  uint64_t v14 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v13[2] + 32))(v13[2], 1568, 16);
  re::RenderGraphSFBSystemShellBlurProvider::RenderGraphSFBSystemShellBlurProvider((uint64_t)v14, (const re::DynamicString *)v24);
  if (*(void *)&v24[0])
  {
    if (BYTE8(v24[0])) {
      (*(void (**)(void))(**(void **)&v24[0] + 40))();
    }
    memset(v24, 0, sizeof(v24));
  }
  (*(void (**)(long long *__return_ptr, re::RenderGraphManager *, const char *))(*(void *)a2 + 8))(&v22, a2, "engine:BuiltinRenderGraphResources/SFBSystemShell/SFBPbrBlur.rematerial");
  long long v15 = *(_OWORD *)(v14 + 5);
  *(_OWORD *)(v14 + 5) = v22;
  long long v22 = v15;
  uint64_t v16 = v14[7];
  v14[7] = v23;
  uint64_t v23 = v16;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v22);
  re::AssetHandle::loadAsync((re::AssetHandle *)(v14 + 5));
  re::AssetHandle::operator=((uint64_t)a4, v14 + 5);
  re::AssetHandle::operator=((uint64_t)(v14 + 11), (uint64_t *)a3);
  (*(void (**)(long long *__return_ptr, re::RenderGraphManager *, const char *))(*(void *)a2 + 8))(&v22, a2, "engine:BuiltinRenderGraphResources/SFBSystemShell/SFBVCABlur.rematerial");
  long long v17 = *((_OWORD *)v14 + 4);
  *((_OWORD *)v14 + 4) = v22;
  long long v22 = v17;
  uint64_t v18 = v14[10];
  v14[10] = v23;
  uint64_t v23 = v18;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v22);
  re::AssetHandle::loadAsync((re::AssetHandle *)(v14 + 8));
  re::AssetHandle::operator=((uint64_t)a5, v14 + 8);
  re::RenderGraphManager::addProviderInternal(this, "Camera", (const re::RenderGraphProviderBase *)v14, -60, 1, (uint64_t)&v22);
  long long v19 = v22;
  *(void *)&long long v22 = 0;
  *((void *)&v22 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = "";
  uint64_t v20 = *(void *)a6;
  uint64_t v21 = *((void *)a6 + 1);
  *(_OWORD *)a6 = v19;
  v25[0] = v19 & 0xFFFFFFFFFFFFFFFELL | v20 & 1;
  v25[1] = v21;
  re::StringID::destroyString((re::StringID *)v25);
  *((void *)a6 + 2) = v23;
  re::StringID::destroyString((re::StringID *)&v22);
}

void re::RenderGraphSFBSystemShellBlurProvider::~RenderGraphSFBSystemShellBlurProvider(re::RenderGraphSFBSystemShellBlurProvider *this)
{
  re::RenderGraphSFBSystemShellBlurProvider::~RenderGraphSFBSystemShellBlurProvider(this);
  JUMPOUT(0x237DBCBD0);
}

{
  uint64_t *v2;

  *((void *)this + 1re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  ++*((_DWORD *)this + 38);
  id v2 = (uint64_t *)((char *)this + 1504);
  re::HashTable<unsigned long long,re::RenderGraphSFBSystemShellBlurProvider::BlurFrameContext,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::deinit((uint64_t *)this + 188);
  *((void *)this + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  *((_DWORD *)this + 34) = 0;
  re::HashTable<unsigned long long,re::RenderGraphSFBSystemShellBlurProvider::BlurFrameContext,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::deinit(v2);
  *((void *)this + 1re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  ++*((_DWORD *)this + 38);
  re::AssetHandle::~AssetHandle((re::RenderGraphSFBSystemShellBlurProvider *)((char *)this + 88));
  re::AssetHandle::~AssetHandle((re::RenderGraphSFBSystemShellBlurProvider *)((char *)this + 64));
  re::AssetHandle::~AssetHandle((re::RenderGraphSFBSystemShellBlurProvider *)((char *)this + 40));
  *(void *)this = &unk_26E6D52C8;
  re::DynamicString::deinit((re::RenderGraphSFBSystemShellBlurProvider *)((char *)this + 8));
}

void *re::DynamicArray<re::VCARenderData::FrustumId>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    long long v5 = result;
    if (result[2] <= a2)
    {
      uint64_t result = (void *)*result;
      if (*v5)
      {
        if (!a2)
        {
          uint64_t v7 = 0;
          if (!v3) {
            goto LABEL_9;
          }
          goto LABEL_8;
        }
        if (is_mul_ok(a2, 0x70uLL))
        {
          uint64_t v2 = 112 * a2;
          uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 112 * a2, 16);
          if (result)
          {
            uint64_t v7 = result;
            if (!v5[1])
            {
LABEL_9:
              v5[4] = v7;
              v5[1] = a2;
              return result;
            }
LABEL_8:
            memcpy(v7, (const void *)v5[4], 112 * v5[2]);
            uint64_t result = (void *)(*(uint64_t (**)(void, void))(*(void *)*v5 + 40))(*v5, v5[4]);
            goto LABEL_9;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 112, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        uint64_t result = (void *)_os_crash();
        __break(1u);
      }
      else
      {
        uint64_t result = (void *)re::DynamicArray<re::VCARenderData::FrustumId>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
      }
    }
  }
  return result;
}

__n128 re::DynamicOverflowArray<re::Matrix4x4<float>,2ul>::add(uint64_t a1, uint64_t a2)
{
  if (!*(void *)a1)
  {
    unint64_t v10 = *(void *)(a1 + 8) + 1;
    re::DynamicOverflowArray<re::Matrix4x4<float>,2ul>::setCapacity((void *)a1, v10);
    int v11 = *(_DWORD *)(a1 + 16) + 2;
    *(_DWORD *)(a1 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v11;
    if ((v11 & 1) == 0) {
      goto LABEL_12;
    }
LABEL_18:
    uint64_t v12 = a1 + 32;
    goto LABEL_19;
  }
  unint64_t v4 = *(void *)(a1 + 8);
  int v5 = *(_DWORD *)(a1 + 16);
  if ((v5 & 1) == 0)
  {
    unint64_t v6 = *(void *)(a1 + 32);
    BOOL v8 = v4 >= v6;
    unint64_t v7 = v4 + 1;
    BOOL v8 = !v8 || v6 >= v7;
    if (!v8)
    {
      unint64_t v9 = 2 * v6;
      goto LABEL_14;
    }
    goto LABEL_11;
  }
  unint64_t v7 = v4 + 1;
  if (v7 < 3)
  {
LABEL_11:
    if ((v5 & 1) == 0) {
      goto LABEL_12;
    }
    goto LABEL_18;
  }
  unint64_t v9 = 4;
LABEL_14:
  if (v9 <= v7) {
    unint64_t v13 = v7;
  }
  else {
    unint64_t v13 = v9;
  }
  re::DynamicOverflowArray<re::Matrix4x4<float>,2ul>::setCapacity((void *)a1, v13);
  if (*(_DWORD *)(a1 + 16)) {
    goto LABEL_18;
  }
LABEL_12:
  uint64_t v12 = *(void *)(a1 + 40);
LABEL_19:
  uint64_t v14 = v12 + (*(void *)(a1 + 8) << 6);
  __n128 result = *(__n128 *)a2;
  long long v16 = *(_OWORD *)(a2 + 16);
  long long v17 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v14 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v14 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v17;
  *(__n128 *)uint64_t v14 = result;
  *(_OWORD *)(v14 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v16;
  ++*(void *)(a1 + 8);
  *(_DWORD *)(a1 + 16) += 2;
  return result;
}

_anonymous_namespace_ *re::DynamicArray<re::BlurPlaneTypeData>::add(_anonymous_namespace_ *result, void *a2)
{
  uint64_t v3 = result;
  unint64_t v4 = *((void *)result + 1);
  unint64_t v5 = *((void *)result + 2);
  if (v5 >= v4)
  {
    unint64_t v6 = v5 + 1;
    if (v4 < v5 + 1)
    {
      if (*(void *)result)
      {
        uint64_t v7 = 2 * v4;
        BOOL v8 = v4 == 0;
        unint64_t v9 = 8;
        if (!v8) {
          unint64_t v9 = v7;
        }
        if (v9 <= v6) {
          unint64_t v10 = v6;
        }
        else {
          unint64_t v10 = v9;
        }
        __n128 result = (_anonymous_namespace_ *)re::DynamicArray<re::MeshResourceDefinition::Level>::setCapacity(result, v10);
      }
      else
      {
        __n128 result = (_anonymous_namespace_ *)re::DynamicArray<re::MeshResourceDefinition::Level>::setCapacity(v3, v6);
        ++*((_DWORD *)v3 + 6);
      }
    }
    unint64_t v5 = *((void *)v3 + 2);
  }
  *(void *)(*((void *)v3 + 4) + 8 * v5) = *a2;
  ++*((void *)v3 + 2);
  ++*((_DWORD *)v3 + 6);
  return result;
}

void re::CameraProjFrustums::~CameraProjFrustums(re::CameraProjFrustums *this)
{
  *((void *)this + 2) = 0;
  ++*((_DWORD *)this + 6);
}

{
  *((void *)this + 2) = 0;
  ++*((_DWORD *)this + 6);
  JUMPOUT(0x237DBCBD0);
}

void *re::DynamicOverflowArray<re::Matrix4x4<float>,2ul>::setCapacity(void *result, unint64_t a2)
{
  unint64_t v4 = result;
  uint64_t v5 = *result;
  if (a2 && !v5)
  {
    __n128 result = (void *)re::DynamicOverflowArray<re::Matrix4x4<float>,2ul>::setCapacity(v4, a2);
    int v6 = *((_DWORD *)v4 + 4) + 2;
LABEL_4:
    *((_DWORD *)v4 + 4) = v6;
    return result;
  }
  int v7 = *((_DWORD *)result + 4);
  if (v7) {
    uint64_t v8 = 2;
  }
  else {
    uint64_t v8 = result[4];
  }
  if (v8 != a2)
  {
    unint64_t v9 = result[1];
    if (v9 <= a2 && (a2 > 2 || (v7 & 1) == 0))
    {
      if (a2 < 3)
      {
        uint64_t v14 = result + 4;
        uint64_t v15 = v4[5];
        if (v7) {
          long long v16 = v4 + 4;
        }
        else {
          long long v16 = (const void *)v4[5];
        }
        memcpy(v14, v16, v9 << 6);
        __n128 result = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 40))(v5, v15);
        int v6 = *((_DWORD *)v4 + 4) | 1;
        goto LABEL_4;
      }
      if (a2 >> 58)
      {
        re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicOverflowArray<T, N>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 646, 64, a2);
        _os_crash();
        __break(1u);
      }
      else
      {
        unint64_t v2 = a2 << 6;
        unint64_t v10 = (void *)(*(uint64_t (**)(void, unint64_t, uint64_t))(*(void *)v5 + 32))(*result, a2 << 6, 16);
        if (v10)
        {
          uint64_t v12 = v10;
          if (v4[2]) {
            unint64_t v13 = v4 + 4;
          }
          else {
            unint64_t v13 = (const void *)v4[5];
          }
          __n128 result = memcpy(v10, v13, v4[1] << 6);
          int v17 = *((_DWORD *)v4 + 4);
          if ((v17 & 1) == 0)
          {
            __n128 result = (void *)(*(uint64_t (**)(void, void))(*(void *)*v4 + 40))(*v4, v4[5]);
            int v17 = *((_DWORD *)v4 + 4);
          }
          *((_DWORD *)v4 + 4) = v17 & 0xFFFFFFFE;
          v4[4] = a2;
          v4[5] = v12;
          return result;
        }
      }
      re::internal::assertLog((re::internal *)6, v11, "assertion failure: '%s' (%s:line %i) DynamicOverflowArray<T, N> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 650, v2, *(void *)(*v4 + 8));
      __n128 result = (void *)_os_crash();
      __break(1u);
    }
  }
  return result;
}

void re::DynamicArray<re::VCARenderData::FrustumId>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 16);
  if (v4 >= a2)
  {
    if (v4 <= a2) {
      return;
    }
  }
  else
  {
    if (*(void *)(a1 + 8) < a2)
    {
      re::DynamicArray<re::VCARenderData::FrustumId>::setCapacity((void *)a1, a2);
      unint64_t v4 = *(void *)(a1 + 16);
    }
    if (v4 < a2)
    {
      uint64_t v5 = (void *)(*(void *)(a1 + 32) + 112 * v4);
      uint64_t v6 = 112 * a2 - 112 * v4;
      if (v6 >= 1) {
        bzero(v5, 112* (((((unint64_t)v6 >> 4) * (unsigned __int128)0x2492492492492493uLL) >> 64)- ((unint64_t)v6 > 0x6F))+ 112);
      }
    }
  }
  *(void *)(a1 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = a2;
  ++*(_DWORD *)(a1 + 24);
}

void re::WorldToViewCacheData::~WorldToViewCacheData(re::WorldToViewCacheData *this)
{
}

void std::__throw_bad_any_cast[abi:nn180100]()
{
  std::__libcpp_verbose_abort("bad_any_cast was thrown in -fno-exceptions mode");
  re::ColorFilterConstantsData::~ColorFilterConstantsData(v0);
}

void re::ColorFilterConstantsData::~ColorFilterConstantsData(re::ColorFilterConstantsData *this)
{
}

void re::BlurReprojectionState::~BlurReprojectionState(re::BlurReprojectionState *this)
{
}

uint64_t re::RenderGraphSFBSystemShellBlurProvider::RenderGraphSFBSystemShellBlurProvider(uint64_t a1, const re::DynamicString *a2)
{
  re::DynamicString::DynamicString((re::DynamicString *)&v4, a2);
  *(void *)a1 = &unk_26E6D52C8;
  re::DynamicString::DynamicString((re::DynamicString *)(a1 + 8), (const re::DynamicString *)&v4);
  if (v4 && (v5 & 1) != 0) {
    (*(void (**)(void))(*(void *)v4 + 40))();
  }
  *(void *)a1 = &unk_26E71F308;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 8re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
  *(void *)(a1 + 104) = 0;
  *(unsigned char *)(a1 + 112) = 4;
  *(void *)(a1 + 12re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  *(_DWORD *)(a1 + 13re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  *(void *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 1504) = 0u;
  *(_OWORD *)(a1 + 1520) = 0u;
  *(_DWORD *)(a1 + 153re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  *(void *)(a1 + 1540) = 0x7FFFFFFFLL;
  *(unsigned char *)(a1 + 1552) = 0;
  return a1;
}

double re::HashTable<unsigned long long,re::RenderGraphSFBSystemShellBlurProvider::BlurFrameContext,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    unsigned int v3 = *((_DWORD *)a1 + 8);
    if (v3)
    {
      uint64_t v4 = 0;
      uint64_t v5 = 336 * v3;
      do
      {
        uint64_t v6 = a1[2];
        int v7 = *(_DWORD *)(v6 + v4);
        if (v7 < 0) {
          *(_DWORD *)(v6 + v4) = v7 & 0x7FFFFFFF;
        }
        v4 += 336;
      }
      while (v5 != v4);
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 3re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0x7FFFFFFFLL;
  }
  return result;
}

uint64_t re::HashTable<unsigned long long,re::RenderGraphSFBSystemShellBlurProvider::BlurFrameContext,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::tryGet(uint64_t a1, unint64_t a2)
{
  if (!*(void *)a1) {
    return 0;
  }
  unint64_t v2 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
  uint64_t v3 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * ((v2 ^ (v2 >> 31)) % *(unsigned int *)(a1 + 24)));
  if (v3 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 16);
  if (*(void *)(v5 + 336 * v3 + 8) != a2)
  {
    while (1)
    {
      LODWORD(v3) = *(_DWORD *)(v5 + 336 * v3) & 0x7FFFFFFF;
      if (v3 == 0x7FFFFFFF) {
        break;
      }
      if (*(void *)(v5 + 336 * v3 + 8) == a2) {
        return v5 + 336 * v3 + 16;
      }
    }
    return 0;
  }
  return v5 + 336 * v3 + 16;
}

uint64_t *re::SmallHashTable<unsigned long long,re::RenderGraphSFBSystemShellBlurProvider::BlurFrameContext,4ul,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false>::add(uint64_t a1, uint64_t *a2, void *__src, unsigned int a4)
{
  uint64_t v7 = a1;
  uint64_t v25 = *MEMORY[0x263EF8340];
  unsigned int v8 = *(_DWORD *)(a1 + 1404);
  if (v8)
  {
    if (a4 == 1)
    {
      uint64_t v9 = a1 + 1376;
      goto LABEL_34;
    }
    if (!a4)
    {
      uint64_t v9 = a1 + 1376;
      goto LABEL_38;
    }
    unint64_t v10 = (unint64_t *)(a1 + 16);
    unint64_t v11 = *(void *)(a1 + 16);
    uint64_t v12 = (uint64_t *)(a1 + 32);
    unint64_t v13 = (uint64_t *)(a1 + 32 + 336 * v11);
    if (!v11) {
      goto LABEL_20;
    }
  }
  else
  {
    unint64_t v10 = (unint64_t *)(a1 + 16);
    unint64_t v11 = *(void *)(a1 + 16);
    uint64_t v12 = (uint64_t *)(a1 + 32);
    unint64_t v13 = (uint64_t *)(a1 + 32 + 336 * v11);
    if (!v11) {
      goto LABEL_21;
    }
  }
  uint64_t v14 = *a2;
  uint64_t v15 = v12;
  while (*v15 != v14)
  {
    v15 += 42;
    if (v15 == v13) {
      goto LABEL_15;
    }
  }
  if (a4 < 2) {
    return v15 + 2;
  }
LABEL_15:
  if (!v8) {
    unsigned int v8 = v11;
  }
  if (v8 >= 4)
  {
LABEL_25:
    if (!*(void *)(v7 + 1376))
    {
      uint64_t v20 = *(uint64_t **)v7;
      if (!*(void *)v7)
      {
      }
      re::HashTable<re::PeerVideoStreamId,re::StreamingInternal::StreamWriteEnd,re::Hash<re::PeerVideoStreamId>,re::EqualTo<re::PeerVideoStreamId>,true,false>::init(v7 + 1376, (uint64_t)v20, 8);
      unint64_t v11 = *v10;
    }
    if (v11)
    {
      uint64_t v21 = &v12[42 * v11];
      do
      {
        re::HashTable<unsigned long long,re::RenderGraphSFBSystemShellBlurProvider::BlurFrameContext,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::add(v7 + 1376, v12, v12 + 2);
        v12 += 42;
      }
      while (v12 != v21);
    }
    *(void *)(v7 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
    ++*(_DWORD *)(v7 + 24);
    if (!a4)
    {
      uint64_t v9 = v7 + 1376;
LABEL_38:
      long long v22 = a2;
      uint64_t v23 = __src;
      return (uint64_t *)re::HashTable<unsigned long long,re::RenderGraphSFBSystemShellBlurProvider::BlurFrameContext,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::add(v9, v22, v23);
    }
    uint64_t v9 = v7 + 1376;
LABEL_34:
    long long v22 = a2;
    uint64_t v23 = __src;
    return (uint64_t *)re::HashTable<unsigned long long,re::RenderGraphSFBSystemShellBlurProvider::BlurFrameContext,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::add(v9, v22, v23);
  }
  memcpy(&__srca[8], __src, 0x140uLL);
  if (v11 >= 4)
  {
    re::internal::assertLog((re::internal *)4, v17, "assertion failure: '%s' (%s:line %i) Capacity limit reached. DynamicInlineArray<T,N> cannot be resized.", "false", "ensureCapacity", 277);
    a1 = _os_crash();
    __break(1u);
LABEL_20:
    if (v8 <= 3)
    {
LABEL_21:
      uint64_t v14 = *a2;
      memcpy(&__srca[8], __src, 0x140uLL);
      goto LABEL_22;
    }
    unint64_t v11 = 0;
    goto LABEL_25;
  }
LABEL_22:
  *unint64_t v13 = v14;
  memcpy(v13 + 1, __srca, 0x148uLL);
  uint64_t v19 = *(void *)(v7 + 16);
  ++*(_DWORD *)(v7 + 24);
  *(void *)(v7 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v19 + 1;
  if (v19 == -1)
  {
    re::internal::assertLog((re::internal *)6, v18, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, -1, 0);
    _os_crash();
    __break(1u);
  }
  return &v12[42 * v19 + 2];
}

uint64_t re::HashTable<unsigned long long,re::RenderGraphSFBSystemShellBlurProvider::BlurFrameContext,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::add(uint64_t a1, uint64_t *a2, const void *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  unint64_t v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (!*(void *)a1)
  {
    LODWORD(v9) = 0;
    goto LABEL_8;
  }
  unint64_t v9 = v8 % *(unsigned int *)(a1 + 24);
  uint64_t v10 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v9);
  if (v10 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v13 = re::HashTable<unsigned long long,re::RenderGraphSFBSystemShellBlurProvider::BlurFrameContext,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::addAsMove(a1, v9, v8, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v12 = *(void *)(a1 + 16) + 336 * v13;
    return v12 + 16;
  }
  uint64_t v11 = *(void *)(a1 + 16);
  while (*(void *)(v11 + 336 * v10 + 8) != v6)
  {
    LODWORD(v10) = *(_DWORD *)(v11 + 336 * v10) & 0x7FFFFFFF;
    if (v10 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  uint64_t v12 = v11 + 336 * v10;
  return v12 + 16;
}

uint64_t re::HashTable<unsigned long long,re::RenderGraphSFBSystemShellBlurProvider::BlurFrameContext,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, const void *a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      int v12 = *(_DWORD *)(a1 + 28);
      signed int v13 = 2 * v12;
      uint64_t v14 = *(void *)a1;
      if (*(void *)a1)
      {
        if (v13) {
          BOOL v15 = v9 == v13;
        }
        else {
          BOOL v15 = 1;
        }
        if (!v15 && (v12 & 0x80000000) == 0)
        {
          memset(v30, 0, 36);
          *(void *)&v30[36] = 0x7FFFFFFFLL;
          re::HashTable<re::PeerVideoStreamId,re::StreamingInternal::StreamWriteEnd,re::Hash<re::PeerVideoStreamId>,re::EqualTo<re::PeerVideoStreamId>,true,false>::init((uint64_t)v30, v14, v13);
          long long v16 = *(_OWORD *)v30;
          *(_OWORD *)uint64_t v30 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v16;
          uint64_t v17 = *(void *)&v30[16];
          uint64_t v18 = *(void *)(a1 + 16);
          *(void *)&unsigned char v30[16] = v18;
          *(void *)(a1 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v17;
          long long v20 = *(_OWORD *)&v30[24];
          *(_OWORD *)&v30[24] = *(_OWORD *)(a1 + 24);
          unsigned int v19 = *(_DWORD *)&v30[32];
          *(_OWORD *)(a1 + 24) = v20;
          uint64_t v21 = v19;
          if (v19)
          {
            long long v22 = (void *)(v18 + 8);
            do
            {
              if ((*(_DWORD *)(v22 - 1) & 0x80000000) != 0)
              {
                unint64_t v23 = 0xBF58476D1CE4E5B9 * (*v22 ^ (*v22 >> 30));
                unint64_t v24 = (0x94D049BB133111EBLL * (v23 ^ (v23 >> 27))) ^ ((0x94D049BB133111EBLL * (v23 ^ (v23 >> 27))) >> 31);
                re::HashTable<unsigned long long,re::RenderGraphSFBSystemShellBlurProvider::BlurFrameContext,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::addAsMove(a1, v24 % *(unsigned int *)(a1 + 24), v24, v22, v22 + 1);
              }
              v22 += 42;
              --v21;
            }
            while (v21);
          }
          re::HashTable<unsigned long long,re::RenderGraphSFBSystemShellBlurProvider::BlurFrameContext,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::deinit((uint64_t *)v30);
        }
      }
      else
      {
        if (v13) {
          signed int v27 = 2 * v12;
        }
        else {
          signed int v27 = 3;
        }
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v25 = *(void *)(a1 + 16);
    int v26 = *(_DWORD *)(v25 + 336 * v9);
  }
  else
  {
    uint64_t v25 = *(void *)(a1 + 16);
    int v26 = *(_DWORD *)(v25 + 336 * v9);
    *(_DWORD *)(a1 + 3re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v26 & 0x7FFFFFFF;
  }
  uint64_t v28 = 336 * v9;
  *(_DWORD *)(v25 + v2re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v26 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + v2re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_DWORD *)(*(void *)(a1 + 16) + v28) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + v28 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *a4;
  memcpy((void *)(*(void *)(a1 + 16) + v28 + 16), a5, 0x140uLL);
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void *re::MeshShadowProvider::MeshShadowProvider(void *a1, const re::DynamicString *a2, const re::AssetHandle *a3)
{
  re::DynamicString::DynamicString((re::DynamicString *)v6, a2);
  *a1 = &unk_26E6D52C8;
  re::DynamicString::DynamicString((re::DynamicString *)(a1 + 1), (const re::DynamicString *)v6);
  if (*(void *)&v6[0])
  {
    if (BYTE8(v6[0])) {
      (*(void (**)(void))(**(void **)&v6[0] + 40))();
    }
    memset(v6, 0, sizeof(v6));
  }
  *a1 = &unk_26E71F4A0;
  re::AssetHandle::AssetHandle((re::AssetHandle *)(a1 + 5), a3);
  return a1;
}

uint64_t *re::MeshShadowProvider::prepareFrame(re::MeshShadowProvider *this, const char *__s, const char *a3, re::RenderFrame *a4)
{
  uint64_t v61 = *MEMORY[0x263EF8340];
  size_t v7 = strlen(__s);
  if (v7)
  {
    MurmurHash3_x64_128((uint64_t)__s, v7, 0, (unint64_t *)&v55);
    unint64_t v8 = (*((void *)&v55 + 1) - 0x61C8864680B583E9 + ((void)v55 << 6) + ((unint64_t)v55 >> 2)) ^ v55;
  }
  else
  {
    unint64_t v8 = 0;
  }
  size_t v9 = strlen(a3);
  if (v9)
  {
    MurmurHash3_x64_128((uint64_t)a3, v9, 0, (unint64_t *)&v55);
    unint64_t v10 = ((*((void *)&v55 + 1) - 0x61C8864680B583E9 + ((void)v55 << 6) + ((unint64_t)v55 >> 2)) ^ v55)
        - 0x61C8864680B583E9;
  }
  else
  {
    unint64_t v10 = 0x9E3779B97F4A7C17;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9D208, memory_order_acquire) & 1) == 0)
  {
    unsigned int v32 = (re *)__cxa_guard_acquire(&qword_26AF9D208);
    if (v32)
    {
      _MergedGlobals_478 = re::getCombinedScopeHash(v32, v33, v34);
      __cxa_guard_release(&qword_26AF9D208);
    }
  }
  if (a3)
  {
    uint64_t v11 = *a3;
    if (*a3)
    {
      char v12 = a3[1];
      if (v12)
      {
        signed int v13 = a3 + 2;
        do
        {
          uint64_t v11 = 31 * v11 + v12;
          int v14 = *(unsigned __int8 *)v13++;
          char v12 = v14;
        }
        while (v14);
      }
      v11 &= ~0x8000000000000000;
    }
  }
  else
  {
    uint64_t v11 = 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v54 = v11;
  unint64_t v15 = (unint64_t)"N2re27RenderGraphDataStoreWrapperINS_23MeshShadowRenderingDataEEE";
  if (((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_23MeshShadowRenderingDataEEE" & 0x8000000000000000) != 0)
  {
    long long v16 = (unsigned __int8 *)((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_23MeshShadowRenderingDataEEE" & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v17 = 5381;
    do
    {
      unint64_t v15 = v17;
      unsigned int v18 = *v16++;
      uint64_t v17 = (33 * v17) ^ v18;
    }
    while (v18);
  }
  *(void *)&long long v55 = (_MergedGlobals_478 - 0x61C8864680B583E9 + (v15 << 6) + (v15 >> 2)) ^ v15;
  double result = (uint64_t *)re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet((uint64_t)a4 + 96, (uint64_t *)&v55);
  if (result)
  {
    uint64_t v20 = *result;
    if (*result)
    {
      uint64_t v21 = *(re::RenderGraphPersistentResourceManager **)(*(void *)a4 + 296);
      unint64_t v22 = ((v8 >> 2) + (v8 << 6) + v10) ^ v8;
      uint64_t v23 = *(unsigned int *)(v20 + 24) + 7;
      *(void *)&long long v55 = 0xA00000000;
      int v24 = *(_DWORD *)(v20 + 16);
      if ((v23 & 0x1FFFFF800) != 0) {
        uint64_t v25 = 2048;
      }
      else {
        uint64_t v25 = v23 & 0x1FFFFFFF8;
      }
      DWORD2(v55) = 3;
      HIDWORD(v55) = v24;
      *(_DWORD *)int v56 = v24;
      *(_DWORD *)&v56[4] = 1;
      *(_DWORD *)&void v56[8] = v25;
      *(void *)&v56[12] = 0xFFFFFFFF00000001;
      v56[20] = 1;
      __asm { FMOV            V0.2S, #1.0 }
      *(void *)&v56[24] = _D0;
      long long v57 = xmmword_2343AEB90;
      long long v58 = xmmword_234414FC0;
      LODWORD(v59) = -1;
      BYTE8(v60) = 0;
      *((void *)&v59 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
      *(void *)&long long v60 = 0;
      *(void *)&v52[0] = 0x6AD7693626249265;
      *(void *)&v45[0] = 0x6AD7693626249265;
      re::RenderGraphPersistentResourceManager::registerPersistentTexture(v21, (const re::WeakStringID *)&v54, (const re::WeakStringID *)v52, (const re::WeakStringID *)v45, a4, (const re::RenderGraphTargetDescription *)&v55, &v53);
      v52[4] = v58;
      v52[5] = v59;
      v52[6] = v60;
      v52[0] = v55;
      v52[1] = *(_OWORD *)v56;
      v52[2] = *(_OWORD *)&v56[16];
      v52[3] = v57;
      DWORD1(v52[0]) = 20;
      *(void *)&v45[0] = 0x2C37E112E1E92C60;
      *(void *)&long long v38 = 0x2C37E112E1E92C60;
      re::RenderGraphPersistentResourceManager::registerPersistentTexture(v21, (const re::WeakStringID *)&v54, (const re::WeakStringID *)v45, (const re::WeakStringID *)&v38, a4, (const re::RenderGraphTargetDescription *)v52, &v53);
      int v46 = 0;
      uint64_t v47 = 80 * v25;
      char v48 = 0;
      int v49 = 1065353216;
      unint64_t v50 = 0xFFFFFFFF00000020;
      long long v51 = xmmword_234378E20;
      *(void *)&v45[0] = 0x19DF38FA543D0095;
      *(void *)&long long v38 = 0x19DF38FA543D0095;
      re::RenderGraphPersistentResourceManager::registerPersistentBuffer(v21, (const re::WeakStringID *)&v54, (const re::WeakStringID *)v45, (const re::WeakStringID *)&v38, a4, (const re::RenderGraphBufferDescription *)&v46, &v53, 0);
      v45[4] = v58;
      v45[5] = v59;
      v45[6] = v60;
      v45[0] = v55;
      v45[1] = *(_OWORD *)v56;
      v45[2] = *(_OWORD *)&v56[16];
      v45[3] = v57;
      DWORD1(v45[0]) = 250;
      *(void *)&long long v38 = 0x6B14F36D04976B05;
      *(void *)&v36[0] = 0x6B14F36D04976B05;
      re::RenderGraphPersistentResourceManager::registerPersistentTexture(v21, (const re::WeakStringID *)&v54, (const re::WeakStringID *)&v38, (const re::WeakStringID *)v36, a4, (const re::RenderGraphTargetDescription *)v45, &v53);
      long long v43 = v59;
      long long v44 = v60;
      long long v38 = v55;
      long long v39 = *(_OWORD *)v56;
      long long v41 = v57;
      long long v42 = v58;
      long long v40 = *(_OWORD *)&v56[16];
      HIDWORD(v39) = *(_DWORD *)(v20 + 96);
      *(void *)&v36[0] = 0x284EDEB613E4CA80;
      uint64_t v37 = 0x284EDEB613E4CA80;
      re::RenderGraphPersistentResourceManager::registerPersistentTexture(v21, (const re::WeakStringID *)&v54, (const re::WeakStringID *)v36, (const re::WeakStringID *)&v37, a4, (const re::RenderGraphTargetDescription *)&v38, &v53);
      unint64_t v36[4] = v42;
      v36[5] = v43;
      v36[6] = v44;
      v36[0] = v38;
      v36[1] = v39;
      unint64_t v36[2] = v40;
      v36[3] = v41;
      DWORD1(v36[0]) = 60;
      uint64_t v37 = 0x335A34A7FEF3F24;
      uint64_t v35 = 0x335A34A7FEF3F24;
      re::RenderGraphPersistentResourceManager::registerPersistentTexture(v21, (const re::WeakStringID *)&v54, (const re::WeakStringID *)&v37, (const re::WeakStringID *)&v35, a4, (const re::RenderGraphTargetDescription *)v36, &v53);
      uint64_t v37 = 0x59A6302C4491B15;
      uint64_t v35 = 0x59A6302C4491B15;
      re::RenderGraphPersistentResourceManager::registerPersistentTexture(v21, (const re::WeakStringID *)&v54, (const re::WeakStringID *)&v37, (const re::WeakStringID *)&v35, a4, (const re::RenderGraphTargetDescription *)&v38, &v53);
      unint64_t v31 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * *(unsigned __int8 *)(v20 + 28)) ^ ((0xBF58476D1CE4E5B9
                                                                       * *(unsigned __int8 *)(v20 + 28)) >> 27));
      return (uint64_t *)(((((v22 - 0x3869C2019F65CC2) ^ 0x1D5BABFC9CFDFE9ELL) << 6)
                        - 0x61C8864680B583E9
                        + (((v22 - 0x3869C2019F65CC2) ^ 0x1D5BABFC9CFDFE9ELL) >> 2)
                        + (v31 ^ (v31 >> 31))) ^ (v22 - 0x3869C2019F65CC2) ^ 0x1D5BABFC9CFDFE9ELL);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void re::MeshShadowProvider::provide(re::MeshShadowProvider *this, const char *a2, const char *a3, re::RenderFrame *a4)
{
  uint64_t v118 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9D218, memory_order_acquire) & 1) == 0)
  {
    BOOL v81 = (re *)__cxa_guard_acquire(&qword_26AF9D218);
    if (v81)
    {
      qword_26AF9D210 = re::getCombinedScopeHash(v81, v82, v83);
      __cxa_guard_release(&qword_26AF9D218);
    }
  }
  unint64_t v8 = (unint64_t)"N2re27RenderGraphDataStoreWrapperINS_23MeshShadowRenderingDataEEE";
  if (((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_23MeshShadowRenderingDataEEE" & 0x8000000000000000) != 0)
  {
    size_t v9 = (unsigned __int8 *)((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_23MeshShadowRenderingDataEEE" & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v10 = 5381;
    do
    {
      unint64_t v8 = v10;
      unsigned int v11 = *v9++;
      uint64_t v10 = (33 * v10) ^ v11;
    }
    while (v11);
  }
  unsigned int v12 = 0x7FFFFFFF;
  if (*((void *)a4 + 12))
  {
    unint64_t v13 = (qword_26AF9D210 + (v8 << 6) + (v8 >> 2) - 0x61C8864680B583E9) ^ v8;
    unsigned int v14 = *(_DWORD *)(*((void *)a4 + 13) + 4 * (v13 % *((unsigned int *)a4 + 30)));
    if (v14 != 0x7FFFFFFF)
    {
      uint64_t v15 = *((void *)a4 + 14);
      unsigned int v12 = *(_DWORD *)(*((void *)a4 + 13) + 4 * (v13 % *((unsigned int *)a4 + 30)));
      if (*(void *)(v15 + 24 * v14 + 8) != v13)
      {
        while (1)
        {
          unsigned int v12 = *(_DWORD *)(v15 + 24
                                * *(unsigned int *)(*((void *)a4 + 13) + 4 * (v13 % *((unsigned int *)a4 + 30)))) & 0x7FFFFFFF;
          if (v12 == 0x7FFFFFFF) {
            break;
          }
          if (*(void *)(v15 + 24 * v12 + 8) == v13) {
            goto LABEL_12;
          }
        }
        unsigned int v12 = 0x7FFFFFFF;
      }
    }
  }
LABEL_12:
  uint64_t v16 = *(void *)(*((void *)a4 + 14) + 24 * v12 + 16);
  uint64_t v98 = 2;
  int v99 = 2;
  uint64_t v100 = -1;
  uint64_t v101 = -1;
  uint64_t v102 = -1;
  char v103 = 1;
  __asm { FMOV            V0.2S, #1.0 }
  uint64_t v104 = _D0;
  long long v105 = xmmword_2344150F0;
  long long v106 = xmmword_2343AEBA0;
  int v107 = -1;
  uint64_t v108 = -1;
  char v110 = 0;
  if (a3)
  {
    uint64_t v22 = *a3;
    if (*a3)
    {
      char v23 = a3[1];
      if (v23)
      {
        int v24 = a3 + 2;
        do
        {
          uint64_t v22 = 31 * v22 + v23;
          int v25 = *(unsigned __int8 *)v24++;
          char v23 = v25;
        }
        while (v25);
      }
      v22 &= ~0x8000000000000000;
    }
  }
  else
  {
    uint64_t v22 = 0x7FFFFFFFFFFFFFFFLL;
  }
  *(void *)int v115 = 0xD5AED26C4C4924CALL;
  *(void *)&v115[8] = "MeshShadowColorTexture";
  uint64_t v109 = (v22 + 0x6EC7A19091F839F0) ^ 0x6AD7693626249265;
  re::StringID::destroyString((re::StringID *)v115);
  re::RenderFrame::createTarget(a4, (const re::RenderGraphTargetDescription *)&v98, "ProjectiveMeshShadowMapTexture", &v97);
  if (a3)
  {
    uint64_t v26 = *a3;
    if (*a3)
    {
      char v27 = a3[1];
      if (v27)
      {
        uint64_t v28 = a3 + 2;
        do
        {
          uint64_t v26 = 31 * v26 + v27;
          int v29 = *(unsigned __int8 *)v28++;
          char v27 = v29;
        }
        while (v29);
      }
      uint64_t v30 = ((v26 & 0x7FFFFFFFFFFFFFFFLL) - 0x48C249494DF020D1) ^ 0x2C37E112E1E92C60;
    }
    else
    {
      uint64_t v30 = 0x9B0A57A453E6F34FLL;
    }
    *(void *)int v115 = 0x586FC225C3D258C0;
    *(void *)&v115[8] = "MeshShadowDepthAsColorTexture";
    uint64_t v109 = v30;
    re::StringID::destroyString((re::StringID *)v115);
    re::RenderFrame::createTarget(a4, (const re::RenderGraphTargetDescription *)&v98, "TiledShadowDepthPrepassDepthAsColorTexture", &v96);
    char v103 = 0;
    uint64_t v32 = *a3;
    if (*a3)
    {
      char v33 = a3[1];
      if (v33)
      {
        long long v34 = a3 + 2;
        do
        {
          uint64_t v32 = 31 * v32 + v33;
          int v35 = *(unsigned __int8 *)v34++;
          char v33 = v35;
        }
        while (v35);
      }
      uint64_t v31 = ((v32 & 0x7FFFFFFFFFFFFFFFLL) + 0x7E3991D5E64B1818) ^ 0x6B14F36D04976B05;
    }
    else
    {
      uint64_t v31 = 0x152D62B8E2DC731DLL;
    }
  }
  else
  {
    *(void *)int v115 = 0x586FC225C3D258C0;
    *(void *)&v115[8] = "MeshShadowDepthAsColorTexture";
    uint64_t v109 = 0x1B0A57A453E6F34ELL;
    re::StringID::destroyString((re::StringID *)v115);
    re::RenderFrame::createTarget(a4, (const re::RenderGraphTargetDescription *)&v98, "TiledShadowDepthPrepassDepthAsColorTexture", &v96);
    char v103 = 0;
    uint64_t v31 = 0x952D62B8E2DC7312;
  }
  *(void *)int v115 = 0xD629E6DA092ED60ALL;
  *(void *)&v115[8] = "MeshShadowDepthTexture";
  uint64_t v109 = v31;
  re::StringID::destroyString((re::StringID *)v115);
  re::RenderFrame::createTarget(a4, (const re::RenderGraphTargetDescription *)&v98, "MeshShadowDepthTexture", &v95);
  if (a3)
  {
    uint64_t v36 = *a3;
    if (*a3)
    {
      char v37 = a3[1];
      if (v37)
      {
        long long v38 = a3 + 2;
        do
        {
          uint64_t v36 = 31 * v36 + v37;
          int v39 = *(unsigned __int8 *)v38++;
          char v37 = v39;
        }
        while (v39);
      }
      uint64_t v40 = ((v36 & 0x7FFFFFFFFFFFFFFFLL) - 0x43FD21140289B149) ^ 0x284EDEB613E4CA80;
    }
    else
    {
      uint64_t v40 = 0x944C005DEE928437;
    }
    *(void *)int v115 = 0x509DBD6C27C99500;
    *(void *)&v115[8] = "MeshShadowMippedColorTexture";
    uint64_t v109 = v40;
    re::StringID::destroyString((re::StringID *)v115);
    re::RenderFrame::createTarget(a4, (const re::RenderGraphTargetDescription *)&v98, "MeshShadowMippedColorTexture", &v94);
    uint64_t v42 = *a3;
    if (*a3)
    {
      char v43 = a3[1];
      if (v43)
      {
        long long v44 = a3 + 2;
        do
        {
          uint64_t v42 = 31 * v42 + v43;
          int v45 = *(unsigned __int8 *)v44++;
          char v43 = v45;
        }
        while (v45);
      }
      uint64_t v41 = ((v42 & 0x7FFFFFFFFFFFFFFFLL) + 0x636D32B42A3881CLL) ^ 0x59A6302C4491B15;
    }
    else
    {
      uint64_t v41 = 0x3ACB02986EA9309;
    }
  }
  else
  {
    *(void *)int v115 = 0x509DBD6C27C99500;
    *(void *)&v115[8] = "MeshShadowMippedColorTexture";
    uint64_t v109 = 0x144C005DEE928436;
    re::StringID::destroyString((re::StringID *)v115);
    re::RenderFrame::createTarget(a4, (const re::RenderGraphTargetDescription *)&v98, "MeshShadowMippedColorTexture", &v94);
    uint64_t v41 = 0x83ACB02986EA930ELL;
  }
  *(void *)int v115 = 0xB34C6058892362ALL;
  *(void *)&v115[8] = "MeshShadowIntermediateTexture";
  uint64_t v109 = v41;
  re::StringID::destroyString((re::StringID *)v115);
  re::RenderFrame::createTarget(a4, (const re::RenderGraphTargetDescription *)&v98, "MeshShadowIntermediateTexture", &v93);
  if (a3)
  {
    uint64_t v46 = *a3;
    if (*a3)
    {
      char v47 = a3[1];
      if (v47)
      {
        char v48 = a3 + 2;
        do
        {
          uint64_t v46 = 31 * v46 + v47;
          int v49 = *(unsigned __int8 *)v48++;
          char v47 = v49;
        }
        while (v49);
      }
      uint64_t v50 = ((v46 & 0x7FFFFFFFFFFFFFFFLL) + 0x6C6DB52C1B1614E0) ^ 0x335A34A7FEF3F24;
    }
    else
    {
      uint64_t v50 = 0x6F58166664F92BC4;
    }
  }
  else
  {
    uint64_t v50 = 0xEF58166664F92BFBLL;
  }
  *(void *)int v115 = 0x66B4694FFDE7E48;
  *(void *)&v115[8] = "MeshShadowMippedReceiverDepthColorTexture";
  uint64_t v109 = v50;
  re::StringID::destroyString((re::StringID *)v115);
  char v103 = 1;
  re::RenderFrame::createTarget(a4, (const re::RenderGraphTargetDescription *)&v98, "MeshShadowMippedReceiverDepthColorTexture", &v92);
  int v85 = 2;
  uint64_t v86 = -1;
  char v87 = 1;
  int v88 = 1065353216;
  unint64_t v89 = 0xFFFFFFFF00000020;
  uint64_t v90 = -1;
  if (a3)
  {
    uint64_t v51 = *a3;
    if (*a3)
    {
      char v52 = a3[1];
      if (v52)
      {
        BOOL v53 = a3 + 2;
        do
        {
          uint64_t v51 = 31 * v51 + v52;
          int v54 = *(unsigned __int8 *)v53++;
          char v52 = v54;
        }
        while (v54);
      }
      uint64_t v55 = ((v51 & 0x7FFFFFFFFFFFFFFFLL) + 0x1C7D868D2399E17CLL) ^ 0x19DF38FA543D0095;
    }
    else
    {
      uint64_t v55 = 0x5A2BE7777A4E1E9;
    }
  }
  else
  {
    uint64_t v55 = 0x85A2BE7777A4E1EELL;
  }
  *(void *)int v115 = 0x33BE71F4A87A012ALL;
  *(void *)&v115[8] = "MeshShadowMipDescriptionBuffer";
  uint64_t v91 = v55;
  re::StringID::destroyString((re::StringID *)v115);
  re::RenderFrame::createBuffer(a4, (const re::RenderGraphBufferDescription *)&v85, "MeshShadowMipDescriptionBuffer", &v84);
  RenderGraph = (re *)re::RenderFrame::makeRenderGraph(a4, "MeshShadowRenderGraph", 7uLL);
  long long v57 = re::globalAllocators(RenderGraph);
  long long v58 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v57[2] + 32))(v57[2], 256, 8);
  long long v59 = re::RenderGraphNode::RenderGraphNode((re::RenderGraphNode *)v58, "CopyShadowTextures");
  *(void *)long long v59 = &unk_26E7187C0;
  *(void *)int v115 = v59;
  re::DynamicArray<re::TransitionCondition *>::add(RenderGraph, v115);
  v58[3] = *((void *)RenderGraph + 10);
  v58[4] = *((void *)RenderGraph + 12);
  v58[6] = *((void *)RenderGraph + 13);
  *(_OWORD *)int v115 = v84;
  *(void *)&unsigned char v115[16] = 0x100000000;
  *(_OWORD *)&v116[8] = xmmword_23435FBB0;
  *(_WORD *)&v116[24] = 0;
  uint64_t v117 = 0;
  re::DynamicArray<re::TargetWrite>::add((_anonymous_namespace_ *)(v58 + 17), (uint64_t)v115);
  v58 += 27;
  *(_OWORD *)int v115 = v96;
  *(void *)&unsigned char v115[16] = 0x100000000;
  *(_OWORD *)&v116[8] = xmmword_23435FBB0;
  *(_WORD *)&v116[24] = 0;
  uint64_t v117 = 0;
  re::DynamicArray<re::TargetWrite>::add((_anonymous_namespace_ *)v58, (uint64_t)v115);
  *(_OWORD *)int v115 = v97;
  *(void *)&unsigned char v115[16] = 0x100000000;
  *(_OWORD *)&v116[8] = xmmword_23435FBB0;
  *(_WORD *)&v116[24] = 0;
  uint64_t v117 = 0;
  re::DynamicArray<re::TargetWrite>::add((_anonymous_namespace_ *)v58, (uint64_t)v115);
  unsigned __int8 v60 = *(unsigned char *)(v16 + 28);
  uint64_t v61 = (unsigned char *)*((void *)a4 + 1);
  if (v61[307] && *v61)
  {
    int v62 = (re::RenderGraphNode *)((char *)re::RenderGraph::addNode<re::GenerateTiledShadowDepthPrepassMapNode>(RenderGraph)
                                + 216);
    *(_OWORD *)int v115 = v94;
    *(void *)&unsigned char v115[16] = 0x100000000;
    *(_OWORD *)&v116[8] = xmmword_23435FD50;
    *(_WORD *)&v116[24] = v60;
    uint64_t v117 = 0;
    re::DynamicArray<re::TargetWrite>::add(v62, (uint64_t)v115);
    *(_OWORD *)int v115 = v92;
    *(void *)&unsigned char v115[16] = 0x100000001;
    *(_OWORD *)&v116[8] = xmmword_23435FD50;
    *(_WORD *)&v116[24] = v60;
    uint64_t v117 = 0;
    re::DynamicArray<re::TargetWrite>::add(v62, (uint64_t)v115);
    *(_OWORD *)int v115 = v95;
    *(void *)&unsigned char v115[16] = 0x200000000;
    *(_OWORD *)&v116[8] = xmmword_23435FBB0;
    *(_WORD *)&v116[24] = 0;
    uint64_t v117 = 0;
    re::DynamicArray<re::TargetWrite>::add(v62, (uint64_t)v115);
    ProjectiveMeshShadowMap = re::RenderGraph::addNode<re::GenerateProjectiveMeshShadowMapNode>(RenderGraph);
    uint64_t v112 = 0;
    uint64_t v113 = 0;
    __int16 v114 = 0;
    int v64 = (re::RenderGraphNode *)((char *)ProjectiveMeshShadowMap + 216);
    *(_OWORD *)int v115 = v94;
    *(void *)&unsigned char v115[16] = 0x100000000;
    *(_OWORD *)int v116 = v111;
    *(_OWORD *)&v116[10] = 0u;
    uint64_t v117 = 0;
    re::DynamicArray<re::TargetWrite>::add((re::RenderGraphNode *)((char *)ProjectiveMeshShadowMap + 216), (uint64_t)v115);
    uint64_t v112 = 0;
    uint64_t v113 = 0;
    __int16 v114 = 0;
    *(_OWORD *)int v115 = v92;
    *(void *)&unsigned char v115[16] = 0xA00000001;
    *(_OWORD *)int v116 = v111;
    *(_OWORD *)&v116[10] = 0u;
    uint64_t v117 = 0;
    re::DynamicArray<re::TargetWrite>::add(v64, (uint64_t)v115);
    *(_OWORD *)int v115 = v95;
    *(void *)&unsigned char v115[16] = 0x200000000;
    *(_OWORD *)&v116[8] = xmmword_23435FBB0;
    *(_WORD *)&v116[24] = 0;
    uint64_t v117 = 0;
    re::DynamicArray<re::TargetWrite>::add(v64, (uint64_t)v115);
  }
  else
  {
    char v66 = (re::RenderGraphNode *)((char *)re::RenderGraph::addNode<re::GenerateTiledShadowDepthPrepassMapNode>(RenderGraph)
                                + 216);
    *(_OWORD *)int v115 = v95;
    *(void *)&unsigned char v115[16] = 0x200000000;
    *(_OWORD *)&v116[8] = xmmword_23435FBB0;
    *(_WORD *)&v116[24] = 0;
    uint64_t v117 = 0;
    re::DynamicArray<re::TargetWrite>::add(v66, (uint64_t)v115);
    *(_OWORD *)int v115 = v92;
    *(void *)&unsigned char v115[16] = 0x100000001;
    *(_OWORD *)&v116[8] = xmmword_23435FD50;
    *(_WORD *)&v116[24] = v60;
    uint64_t v117 = 0;
    re::DynamicArray<re::TargetWrite>::add(v66, (uint64_t)v115);
    uint64_t v67 = re::RenderGraph::addNode<re::GenerateProjectiveMeshShadowMapNode>(RenderGraph);
    *(_OWORD *)int v115 = v94;
    *(void *)&unsigned char v115[16] = 0x100000000;
    *(_OWORD *)&v116[8] = xmmword_23435FD50;
    *(_WORD *)&v116[24] = v60;
    uint64_t v117 = 0;
    re::DynamicArray<re::TargetWrite>::add((re::RenderGraphNode *)((char *)v67 + 216), (uint64_t)v115);
    *(_OWORD *)int v115 = v92;
    *(void *)&unsigned char v115[16] = 0;
    *(void *)int v116 = 2;
    re::DynamicArray<re::TargetRead>::add((re::RenderGraphNode *)((char *)v67 + 176), (__n128 *)v115);
  }
  int v68 = re::globalAllocators(v65);
  uint64_t v69 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v68[2] + 32))(v68[2], 576, 16);
  unint64_t v70 = re::RenderGraphComputeNodeBase::RenderGraphComputeNodeBase((re::RenderGraphComputeNodeBase *)v69, "MeshShadowGenerateMips");
  *(void *)unint64_t v70 = &unk_26E718A60;
  uint64_t v71 = (re::RenderGraphComputeNodeBase *)((char *)v70 + 480);
  *((_OWORD *)v70 + 30) = 0u;
  *((_OWORD *)v70 + 3re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0u;
  unint64_t v72 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v71, 0);
  *(_OWORD *)(v69 + 512) = 0u;
  *(_OWORD *)(v69 + 52re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
  re::DynamicString::setCapacity((void *)(v69 + 512), 0);
  *(void *)(v69 + 560) = 0;
  *(_OWORD *)(v69 + 544) = 0u;
  *(void *)int v115 = v69;
  re::DynamicArray<re::TransitionCondition *>::add(RenderGraph, v115);
  *(void *)(v69 + 24) = *((void *)RenderGraph + 10);
  *(void *)(v69 + 32) = *((void *)RenderGraph + 12);
  *(void *)(v69 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *((void *)RenderGraph + 13);
  __n128 v73 = (uint64_t *)((char *)this + 40);
  re::AssetHandle::operator=(v69 + 256, v73);
  *(void *)int v115 = "meshShadowCalculateMip";
  *(void *)&v115[8] = 22;
  re::DynamicString::operator=((re::DynamicString *)(v69 + 512), (uint64_t)v115);
  *(void *)int v115 = "meshShadowGenerateMip";
  *(void *)&v115[8] = 21;
  re::DynamicString::operator=(v71, (uint64_t)v115);
  *(_OWORD *)int v115 = v94;
  *(void *)&unsigned char v115[16] = 0;
  *(void *)int v116 = 2;
  re::DynamicArray<re::TargetRead>::add((_anonymous_namespace_ *)(v69 + 176), (__n128 *)v115);
  *(_OWORD *)int v115 = v92;
  *(void *)&unsigned char v115[16] = 0;
  *(void *)int v116 = 2;
  re::DynamicArray<re::TargetRead>::add((_anonymous_namespace_ *)(v69 + 176), (__n128 *)v115);
  *(_OWORD *)int v115 = v94;
  *(void *)&unsigned char v115[16] = 0x100000000;
  *(_OWORD *)&v116[8] = xmmword_23435FBB0;
  *(_WORD *)&v116[24] = 0;
  uint64_t v117 = 0;
  re::DynamicArray<re::TargetWrite>::add((_anonymous_namespace_ *)(v69 + 216), (uint64_t)v115);
  *(_OWORD *)int v115 = v92;
  *(void *)&unsigned char v115[16] = 0x100000000;
  *(_OWORD *)&v116[8] = xmmword_23435FBB0;
  *(_WORD *)&v116[24] = 0;
  uint64_t v117 = 0;
  re::DynamicArray<re::TargetWrite>::add((_anonymous_namespace_ *)(v69 + 216), (uint64_t)v115);
  *(_OWORD *)int v115 = v84;
  *(void *)&unsigned char v115[16] = 0x500000000;
  *(_OWORD *)&v116[8] = xmmword_23435FBB0;
  *(_WORD *)&v116[24] = 0;
  uint64_t v117 = 0;
  re::DynamicArray<re::TargetWrite>::add((_anonymous_namespace_ *)(v69 + 136), (uint64_t)v115);
  re::MeshShadowGenerateMipmapNode::configure((void **)v69, a2, a3, a4);
  uint64_t v74 = re::RenderGraph::addNode<re::ProjectiveMeshShadowBlurNode>(RenderGraph, "MeshShadowBlurShadowX");
  re::AssetHandle::operator=((uint64_t)v74 + 256, v73);
  *(void *)int v115 = "projectiveMeshShadowDilateHorizontal";
  *(void *)&v115[8] = 36;
  re::DynamicString::operator=((re::RenderGraphComputeNodeBase *)((char *)v74 + 280), (uint64_t)v115);
  v115[0] = 1;
  *(_OWORD *)&v115[8] = v93;
  re::Optional<re::RenderGraphTargetHandle>::operator=((uint64_t)v74 + 312, v115);
  *(_OWORD *)int v115 = v94;
  *(void *)&unsigned char v115[16] = 0;
  *(void *)int v116 = 2;
  re::DynamicArray<re::TargetRead>::add((re::RenderGraphComputeNodeBase *)((char *)v74 + 176), (__n128 *)v115);
  *(_OWORD *)int v115 = v92;
  *(_DWORD *)&unsigned char v115[16] = 1;
  *(_WORD *)&v115[20] = 0;
  v115[22] = 0;
  *(void *)int v116 = 2;
  re::DynamicArray<re::TargetRead>::add((re::RenderGraphComputeNodeBase *)((char *)v74 + 176), (__n128 *)v115);
  *(_OWORD *)int v115 = v84;
  *(void *)&unsigned char v115[16] = 0;
  *(void *)int v116 = 2;
  re::DynamicArray<re::TargetRead>::add((re::RenderGraphComputeNodeBase *)((char *)v74 + 96), (__n128 *)v115);
  *(_OWORD *)int v115 = v93;
  *(void *)&unsigned char v115[16] = 0x500000002;
  *(_OWORD *)&v116[8] = xmmword_23435FBB0;
  *(_WORD *)&v116[24] = 0;
  uint64_t v117 = 0;
  re::DynamicArray<re::TargetWrite>::add((re::RenderGraphComputeNodeBase *)((char *)v74 + 216), (uint64_t)v115);
  *((_DWORD *)v74 + 120) = 0;
  re::ProjectiveMeshShadowBlurNode::configure((void **)v74, a2, a3, a4);
  float32x4_t v75 = re::RenderGraph::addNode<re::ProjectiveMeshShadowBlurNode>(RenderGraph, "MeshShadowBlurShadowY");
  re::AssetHandle::operator=((uint64_t)v75 + 256, v73);
  *(void *)int v115 = "projectiveMeshShadowDilateVertical";
  *(void *)&v115[8] = 34;
  re::DynamicString::operator=((re::RenderGraphComputeNodeBase *)((char *)v75 + 280), (uint64_t)v115);
  v115[0] = 1;
  *(_OWORD *)&v115[8] = v97;
  re::Optional<re::RenderGraphTargetHandle>::operator=((uint64_t)v75 + 312, v115);
  *(_OWORD *)int v115 = v93;
  *(void *)&unsigned char v115[16] = 0;
  *(void *)int v116 = 2;
  re::DynamicArray<re::TargetRead>::add((re::RenderGraphComputeNodeBase *)((char *)v75 + 176), (__n128 *)v115);
  *(_OWORD *)int v115 = v92;
  *(_DWORD *)&unsigned char v115[16] = 1;
  *(_WORD *)&v115[20] = 0;
  v115[22] = 0;
  *(void *)int v116 = 2;
  re::DynamicArray<re::TargetRead>::add((re::RenderGraphComputeNodeBase *)((char *)v75 + 176), (__n128 *)v115);
  *(_OWORD *)int v115 = v84;
  *(void *)&unsigned char v115[16] = 0;
  *(void *)int v116 = 2;
  re::DynamicArray<re::TargetRead>::add((re::RenderGraphComputeNodeBase *)((char *)v75 + 96), (__n128 *)v115);
  *(_OWORD *)int v115 = v94;
  *(void *)&unsigned char v115[16] = 0x500000002;
  *(_OWORD *)&v116[8] = xmmword_23435FBB0;
  *(_WORD *)&v116[24] = 0;
  uint64_t v117 = 0;
  re::DynamicArray<re::TargetWrite>::add((re::RenderGraphComputeNodeBase *)((char *)v75 + 216), (uint64_t)v115);
  *((_DWORD *)v75 + 120) = 1;
  double v76 = re::ProjectiveMeshShadowBlurNode::configure((void **)v75, a2, a3, a4);
  uint64_t v77 = re::globalAllocators((re *)v76);
  int v78 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v77[2] + 32))(v77[2], 480, 16);
  int v79 = re::RenderGraphComputeNodeBase::RenderGraphComputeNodeBase((re::RenderGraphComputeNodeBase *)v78, "MeshShadowGenerateFinalTexture");
  *(void *)int v79 = &unk_26E718B20;
  *(void *)int v115 = v79;
  re::DynamicArray<re::TransitionCondition *>::add(RenderGraph, v115);
  v78[3] = *((void *)RenderGraph + 10);
  v78[4] = *((void *)RenderGraph + 12);
  v78[6] = *((void *)RenderGraph + 13);
  re::AssetHandle::operator=((uint64_t)(v78 + 32), v73);
  *(void *)int v115 = "meshShadowGenerateFinalTexture";
  *(void *)&v115[8] = 30;
  re::DynamicString::operator=((re::DynamicString *)(v78 + 35), (uint64_t)v115);
  *(_OWORD *)int v115 = v94;
  *(void *)&unsigned char v115[16] = 0;
  *(void *)int v116 = 2;
  re::DynamicArray<re::TargetRead>::add((_anonymous_namespace_ *)(v78 + 22), (__n128 *)v115);
  *(_OWORD *)int v115 = v92;
  *(_DWORD *)&unsigned char v115[16] = 1;
  *(_WORD *)&v115[20] = 0;
  v115[22] = 0;
  *(void *)int v116 = 2;
  re::DynamicArray<re::TargetRead>::add((_anonymous_namespace_ *)(v78 + 22), (__n128 *)v115);
  *(_OWORD *)int v115 = v84;
  *(_DWORD *)&unsigned char v115[16] = 1;
  *(_WORD *)&v115[20] = 0;
  v115[22] = 0;
  *(void *)int v116 = 2;
  re::DynamicArray<re::TargetRead>::add((_anonymous_namespace_ *)(v78 + 12), (__n128 *)v115);
  *(_OWORD *)int v115 = v97;
  *(void *)&unsigned char v115[16] = 0x100000002;
  *(_OWORD *)&v116[8] = xmmword_23435FBB0;
  *(_WORD *)&v116[24] = 0;
  uint64_t v117 = 0;
  re::DynamicArray<re::TargetWrite>::add((_anonymous_namespace_ *)(v78 + 27), (uint64_t)v115);
  *(_OWORD *)int v115 = v96;
  *(void *)&unsigned char v115[16] = 0x100000003;
  *(_OWORD *)&v116[8] = xmmword_23435FBB0;
  *(_WORD *)&v116[24] = 0;
  uint64_t v117 = 0;
  __n128 v80 = re::DynamicArray<re::TargetWrite>::add((_anonymous_namespace_ *)(v78 + 27), (uint64_t)v115);
  (*(void (**)(void *, const char *, const char *, re::RenderFrame *, __n128))(*v78 + 80))(v78, a2, a3, a4, v80);
  *(void *)int v115 = 0x26220881977C39BCLL;
  re::RenderFrame::addTargetOutput(a4, (uint64_t *)v115, (double *)&v97, "ProjectiveMeshShadowMapScope");
  *(void *)int v115 = 0x25C1E79857068EA3;
  re::RenderFrame::addTargetOutput(a4, (uint64_t *)v115, (double *)&v96, "ProjectiveMeshShadowMapScope");
  *(void *)int v115 = 0x5878D331D268CBA0;
  re::RenderFrame::addBufferOutput(a4, (uint64_t *)v115, (double *)&v84, "ProjectiveMeshShadowMapScope");
}

re::RenderGraphNode *re::RenderGraph::addNode<re::GenerateTiledShadowDepthPrepassMapNode>(re *a1)
{
  unint64_t v2 = re::globalAllocators(a1);
  uint64_t v3 = (re::RenderGraphNode *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 264, 8);
  uint64_t v4 = re::RenderGraphNode::RenderGraphNode(v3, "GenerateTiledShadowDepthPrepassMap");
  *((_DWORD *)v4 + 64) = 1;
  *(void *)uint64_t v4 = &unk_26E718868;
  unint64_t v8 = v4;
  re::DynamicArray<re::TransitionCondition *>::add(a1, &v8);
  uint64_t v5 = *((void *)a1 + 12);
  uint64_t v6 = *((void *)a1 + 13);
  *((void *)v3 + 3) = *((void *)a1 + 10);
  *((void *)v3 + 4) = v5;
  *((void *)v3 + re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v6;
  return v3;
}

re::RenderGraphNode *re::RenderGraph::addNode<re::GenerateProjectiveMeshShadowMapNode>(re *a1)
{
  unint64_t v2 = re::globalAllocators(a1);
  uint64_t v3 = (re::RenderGraphNode *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 256, 8);
  uint64_t v4 = re::RenderGraphNode::RenderGraphNode(v3, "GenerateProjectiveMeshShadowMap");
  *(void *)uint64_t v4 = &unk_26E718910;
  unint64_t v8 = v4;
  re::DynamicArray<re::TransitionCondition *>::add(a1, &v8);
  uint64_t v5 = *((void *)a1 + 12);
  uint64_t v6 = *((void *)a1 + 13);
  *((void *)v3 + 3) = *((void *)a1 + 10);
  *((void *)v3 + 4) = v5;
  *((void *)v3 + re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v6;
  return v3;
}

re::RenderGraphComputeNodeBase *re::RenderGraph::addNode<re::ProjectiveMeshShadowBlurNode>(re *a1, const char *a2)
{
  uint64_t v4 = re::globalAllocators(a1);
  uint64_t v5 = (re::RenderGraphComputeNodeBase *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4[2] + 32))(v4[2], 672, 16);
  uint64_t v6 = re::RenderGraphComputeNodeBase::RenderGraphComputeNodeBase(v5, a2);
  *(void *)uint64_t v6 = &unk_26E718BE0;
  *(_OWORD *)((char *)v6 + 48re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
  *(_OWORD *)((char *)v6 + 504) = 0u;
  *(_OWORD *)((char *)v6 + 520) = 0u;
  *(_OWORD *)((char *)v6 + 53re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0u;
  *(_OWORD *)((char *)v6 + 552) = 0u;
  *(_OWORD *)((char *)v6 + 56re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
  *(_OWORD *)((char *)v6 + 584) = 0u;
  *(_OWORD *)((char *)v6 + 600) = 0u;
  *(_OWORD *)((char *)v6 + 61re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0u;
  *(_OWORD *)((char *)v6 + 632) = 0u;
  *(_OWORD *)((char *)v6 + 64re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
  uint64_t v10 = v6;
  re::DynamicArray<re::TransitionCondition *>::add(a1, &v10);
  uint64_t v7 = *((void *)a1 + 12);
  uint64_t v8 = *((void *)a1 + 13);
  *((void *)v5 + 3) = *((void *)a1 + 10);
  *((void *)v5 + 4) = v7;
  *((void *)v5 + re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v8;
  return v5;
}

void re::MeshShadowProvider::~MeshShadowProvider(re::MeshShadowProvider *this)
{
  *(void *)this = &unk_26E6D52C8;
  re::DynamicString::deinit((re::MeshShadowProvider *)((char *)this + 8));
}

{
  uint64_t vars8;

  re::AssetHandle::~AssetHandle((re::MeshShadowProvider *)((char *)this + 40));
  *(void *)this = &unk_26E6D52C8;
  re::DynamicString::deinit((re::MeshShadowProvider *)((char *)this + 8));
  JUMPOUT(0x237DBCBD0);
}

void re::RenderGraphGenerateMipmapsNode::execute(re::RenderGraphGenerateMipmapsNode *this, re::RenderGraphContext *a2)
{
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v10, 5062, 0);
  uint64_t v4 = re::DrawingManager::currentCommandBuffer(*(re::DrawingManager **)(*((void *)a2 + 1) + 104));
  re::RenderGraphContext::acquireManagedBlitEncoder((uint64_t)a2, v4, *((re::RenderGraphNodeBase **)a2 + 5), 0, &v9);
  uint64_t v5 = *((void *)this + 29);
  if (v5)
  {
    uint64_t v6 = *((void *)this + 31);
    uint64_t v7 = v5 << 6;
    do
    {
      re::RenderGraphContext::metalTexture((uint64_t)a2, v6, 0, 0, &v8);
      [v9 generateMipmapsForTexture:v8];
      if (v8) {

      }
      v6 += 64;
      v7 -= 64;
    }
    while (v7);
  }

  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v10);
}

uint64_t re::RenderGraphGenerateMipmapsNode::validateAttachmentsDuringGraphBuild(uint64_t result, uint64_t a2)
{
  uint64_t v3 = (void *)result;
  if (*(void *)(result + 112))
  {
    re::DynamicString::format((re::DynamicString *)"(%s): Buffer reads not supported for RenderGraphGenerateMipmapsNode.", (re::DynamicString *)&v4, *(void *)(result + 16));
    re::RenderGraphCompiled::addError(a2, (uint64_t)&v4);
    double result = v4;
    if (v4)
    {
      if (v5) {
        double result = (*(uint64_t (**)(void))(*(void *)v4 + 40))();
      }
    }
  }
  if (v3[19])
  {
    re::DynamicString::format((re::DynamicString *)"(%s): Buffer writes not supported for RenderGraphGenerateMipmapsNode.", (re::DynamicString *)&v4, v3[2]);
    re::RenderGraphCompiled::addError(a2, (uint64_t)&v4);
    double result = v4;
    if (v4)
    {
      if (v5) {
        double result = (*(uint64_t (**)(void))(*(void *)v4 + 40))();
      }
    }
  }
  if (v3[24])
  {
    re::DynamicString::format((re::DynamicString *)"(%s): Target reads not supported for RenderGraphGenerateMipmapsNode.", (re::DynamicString *)&v4, v3[2]);
    re::RenderGraphCompiled::addError(a2, (uint64_t)&v4);
    double result = v4;
    if (v4)
    {
      if (v5) {
        return (*(uint64_t (**)(void))(*(void *)v4 + 40))();
      }
    }
  }
  return result;
}

void re::RenderGraphTargetCopyNode::setup(BOOL this, re::RenderGraphBuilder *a2, re::RenderGraphDataStore *a3)
{
  uint64_t v4 = (re::RenderGraphNode *)this;
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(void *)(this + 232);
  if (v5)
  {
    uint64_t v6 = v5 << 6;
    uint64_t v7 = (_DWORD *)(*(void *)(this + 248) + 20);
    do
    {
      if (*v7 != 4)
      {
        _DWORD *v7 = 4;
        if ((atomic_exchange((atomic_uchar *volatile)&re::RenderGraphTargetCopyNode::setup(re::RenderGraphBuilder &,re::RenderGraphDataStore &)::__FILE____LINE___logged, 1u) & 1) == 0)
        {
          id v8 = *re::graphicsLogObjects((re *)this);
          this = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
          if (this)
          {
            uint64_t v9 = *((void *)v4 + 2);
            *(_DWORD *)simd_float4x4 buf = 136315138;
            uint64_t v12 = v9;
            _os_log_impl(&dword_233120000, v8, OS_LOG_TYPE_DEFAULT, "(%s): Defaulting target write type to kWriteBlit. Other operation types are not supported.", buf, 0xCu);
          }
        }
      }
      v7 += 16;
      v6 -= 64;
    }
    while (v6);
  }
  re::RenderGraphNode::setup(v4, a2, a3);
}

void re::RenderGraphTargetCopyNode::execute(re::RenderGraphTargetCopyNode *this, re::RenderGraphContext *a2)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v26, 5064, 0);
  uint64_t v4 = re::DrawingManager::currentCommandBuffer(*(re::DrawingManager **)(*((void *)a2 + 1) + 104));
  re::RenderGraphContext::acquireManagedBlitEncoder((uint64_t)a2, v4, *((re::RenderGraphNodeBase **)a2 + 5), 0, &v25);
  if (*((void *)this + 24))
  {
    unint64_t v5 = 0;
    unsigned int v6 = 1;
    do
    {
      re::RenderGraphContext::metalTexture((uint64_t)a2, *((void *)this + 26) + 32 * v5, 0, 0, &v24);
      unint64_t v7 = *((void *)this + 29);
      if (v7 <= v5)
      {
        *(void *)&long long v27 = 0;
        long long v35 = 0u;
        long long v36 = 0u;
        long long v33 = 0u;
        long long v34 = 0u;
        long long v32 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)int v29 = 136315906;
        *(void *)&v29[4] = "operator[]";
        *(_WORD *)&v29[12] = 1024;
        *(_DWORD *)&v29[14] = 789;
        *(_WORD *)&v29[18] = 2048;
        *(void *)&v29[20] = v5;
        __int16 v30 = 2048;
        unint64_t v31 = v7;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      re::RenderGraphContext::metalTexture((uint64_t)a2, *((void *)this + 31) + (v5 << 6), 0, 0, &v23);
      id v8 = v24;
      if (*((unsigned char *)this + 360))
      {
        [v25 copyFromTexture:v24 toTexture:v23];
      }
      else
      {
        uint64_t v9 = *((void *)this + 32);
        uint64_t v10 = *((void *)this + 33);
        long long v22 = *((_OWORD *)this + 17);
        uint64_t v11 = *((void *)this + 36);
        id v12 = objc_msgSend(v24, sel_width);
        if ((unint64_t)v12 >= *((void *)this + 37)) {
          id v13 = (id)*((void *)this + 37);
        }
        else {
          id v13 = v12;
        }
        id v14 = objc_msgSend(v24, sel_height);
        if ((unint64_t)v14 >= *((void *)this + 38)) {
          id v15 = (id)*((void *)this + 38);
        }
        else {
          id v15 = v14;
        }
        id v16 = objc_msgSend(v24, sel_depth);
        id v17 = (id)*((void *)this + 39);
        uint64_t v18 = *((void *)this + 40);
        if (v16 < v17) {
          id v17 = v16;
        }
        uint64_t v19 = *((void *)this + 41);
        uint64_t v20 = *((void *)this + 44);
        long long v32 = v22;
        *(void *)&long long v33 = v11;
        *(void *)int v29 = v13;
        *(void *)&v29[8] = v15;
        *(void *)&unsigned char v29[16] = v17;
        long long v27 = *((_OWORD *)this + 21);
        uint64_t v28 = v20;
        [v25 copyFromTexture:v8 sourceSlice:v9 sourceLevel:v10 sourceOrigin:&v32 sourceSize:v29 toTexture:v23 destinationSlice:v18 destinationLevel:v19 destinationOrigin:&v27];
      }
      if (v23) {

      }
      if (v24) {
      unint64_t v5 = v6;
      }
    }
    while (*((void *)this + 24) > (unint64_t)v6++);
  }

  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v26);
}

uint64_t re::RenderGraphTargetCopyNode::validateAttachmentsDuringGraphBuild(uint64_t result, uint64_t a2)
{
  uint64_t v3 = (void *)result;
  if (*(void *)(result + 112))
  {
    re::DynamicString::format((re::DynamicString *)"(%s): Buffer reads not supported for RenderGraphTargetCopyNode.", (re::DynamicString *)&v4, *(void *)(result + 16));
    re::RenderGraphCompiled::addError(a2, (uint64_t)&v4);
    double result = v4;
    if (v4)
    {
      if (v5) {
        double result = (*(uint64_t (**)(void))(*(void *)v4 + 40))();
      }
    }
  }
  if (v3[19])
  {
    re::DynamicString::format((re::DynamicString *)"(%s): Buffer writes not supported for RenderGraphTargetCopyNode.", (re::DynamicString *)&v4, v3[2]);
    re::RenderGraphCompiled::addError(a2, (uint64_t)&v4);
    double result = v4;
    if (v4)
    {
      if (v5) {
        double result = (*(uint64_t (**)(void))(*(void *)v4 + 40))();
      }
    }
  }
  if (v3[24] != v3[29])
  {
    re::DynamicString::format((re::DynamicString *)"(%s): Target reads must match up with the same number of target writes for RenderGraphTargetCopyNode.", (re::DynamicString *)&v4, v3[2]);
    re::RenderGraphCompiled::addError(a2, (uint64_t)&v4);
    double result = v4;
    if (v4)
    {
      if (v5) {
        return (*(uint64_t (**)(void))(*(void *)v4 + 40))();
      }
    }
  }
  return result;
}

void re::RenderGraphCopyEntityAttributeBufferNode::setup(BOOL this, re::RenderGraphBuilder *a2, re::RenderGraphDataStore *a3)
{
  uint64_t v4 = (re::RenderGraphNode *)this;
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(void *)(this + 152);
  if (v5)
  {
    uint64_t v6 = v5 << 6;
    unint64_t v7 = (_DWORD *)(*(void *)(this + 168) + 20);
    do
    {
      if (*v7 != 4)
      {
        _DWORD *v7 = 4;
        if ((atomic_exchange(re::RenderGraphCopyEntityAttributeBufferNode::setup(re::RenderGraphBuilder &,re::RenderGraphDataStore &)::__FILE____LINE___logged, 1u) & 1) == 0)
        {
          id v8 = *re::graphicsLogObjects((re *)this);
          this = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
          if (this)
          {
            uint64_t v9 = *((void *)v4 + 2);
            *(_DWORD *)simd_float4x4 buf = 136315138;
            uint64_t v12 = v9;
            _os_log_impl(&dword_233120000, v8, OS_LOG_TYPE_DEFAULT, "(%s): Defaulting buffer write type to kWriteBlit. Other operation types are not supported.", buf, 0xCu);
          }
        }
      }
      v7 += 16;
      v6 -= 64;
    }
    while (v6);
  }
  re::RenderGraphNode::setup(v4, a2, a3);
}

void re::RenderGraphCopyEntityAttributeBufferNode::execute(re::RenderGraphCopyEntityAttributeBufferNode *this, re::RenderGraphContext *a2)
{
  uint64_t v106 = *MEMORY[0x263EF8340];
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v93, 5095, 0);
  uint64_t v3 = re::RenderGraphDataStore::tryGet<re::CameraData>(*((void *)a2 + 146), *(void *)(*((void *)a2 + 5) + 48));
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)(*(void *)a2 + 24);
    unsigned int v91 = 0;
    long long v89 = 0u;
    long long v90 = 0u;
    uint64_t v92 = 0x7FFFFFFFLL;
    re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::init((uint64_t)&v89, v5, 3);
    uint64_t v75 = *(void *)(v4 + 440);
    double v76 = a2;
    uint64_t v74 = *(void *)(v75 + 40);
    if (v74)
    {
      unint64_t v6 = 0;
      uint64_t v7 = *(void *)(*((void *)a2 + 1) + 32);
      uint64_t v79 = v7 + 8;
      uint64_t v80 = v7 + 72;
      unint64_t v8 = 0xFFFFFFFFLL;
      do
      {
        unint64_t v77 = v6;
        uint64_t v9 = re::BucketArray<re::MeshSceneCollection,16ul>::operator[](v75, v6);
        uint64_t v10 = *(void *)(v9 + 16);
        if (v10)
        {
          uint64_t v11 = *(void **)(v9 + 32);
          int v78 = &v11[82 * v10];
          do
          {
            if (v11[52] == *((void *)this + 32) && v11[1])
            {
              unint64_t v12 = 0;
              BOOL v81 = v11;
              do
              {
                uint64_t v13 = (void *)re::DataArray<re::MeshInstance>::get(v80, *(void *)(*v11 + 8 * v12));
                uint64_t v14 = re::DataArray<re::MeshModel>::get(v79, v13[2]);
                uint64_t v15 = v14;
                uint64_t v16 = v11[2];
                if (v16 && (uint64_t v17 = *(void *)(v16 + 96)) != 0)
                {
                  unint64_t v18 = *(void *)(v17 + 8);
                  if (v18 <= v12)
                  {
                    uint64_t v94 = 0;
                    long long v104 = 0u;
                    long long v105 = 0u;
                    long long v103 = 0u;
                    memset(buf, 0, sizeof(buf));
                    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                    *(_DWORD *)long long v95 = 136315906;
                    *(void *)&v95[4] = "operator[]";
                    __int16 v96 = 1024;
                    int v97 = 468;
                    __int16 v98 = 2048;
                    unint64_t v99 = v12;
                    __int16 v100 = 2048;
                    unint64_t v101 = v18;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
LABEL_84:
                    re::internal::assertLog((re::internal *)6, v64, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v8, v64);
                    _os_crash();
                    __break(1u);
                  }
                  uint64_t v86 = *(void *)(*(void *)(v17 + 16) + 24 * v12 + 16);
                  unint64_t v88 = *(void *)(*(void *)(v17 + 16) + 24 * v12 + 8);
                }
                else
                {
                  uint64_t v86 = 0;
                  unint64_t v88 = 0;
                }
                unint64_t v82 = v12;
                if (*(void *)(v14 + 56))
                {
                  unint64_t v19 = 0;
                  do
                  {
                    uint64_t v20 = *(void *)(v15 + 64);
                    if (v19 >= v13[13]) {
                      int v21 = *(unsigned __int16 *)(v20 + 560 * v19 + 474);
                    }
                    else {
                      int v21 = *(_DWORD *)(v13[14] + 4 * v19);
                    }
                    BOOL v22 = re::HashTable<int,re::AttributeTable const*,re::Hash<int>,re::EqualTo<int>,true,false>::containsKey((uint64_t)&v89, v21);
                    if (v22)
                    {
                      id v23 = *re::graphicsLogObjects((re *)v22);
                      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
                      {
                        uint64_t v24 = *((void *)this + 2);
                        *(_DWORD *)simd_float4x4 buf = 136315394;
                        *(void *)&uint8_t buf[4] = v24;
                        *(_WORD *)&unsigned char buf[12] = 1024;
                        *(_DWORD *)&buf[14] = v21;
                        _os_log_impl(&dword_233120000, v23, OS_LOG_TYPE_DEFAULT, "(%s): Duplicate material indices detected: %d. Skipping.", buf, 0x12u);
                      }
                    }
                    else
                    {
                      if (v19 >= v88) {
                        uint64_t v25 = v20 + 560 * v19;
                      }
                      else {
                        uint64_t v25 = *(void *)(v86 + 8 * v19);
                      }
                      unint64_t v26 = 0xBF58476D1CE4E5B9 * (v21 ^ ((unint64_t)v21 >> 30));
                      unint64_t v27 = (0x94D049BB133111EBLL * (v26 ^ (v26 >> 27))) ^ ((0x94D049BB133111EBLL * (v26 ^ (v26 >> 27))) >> 31);
                      unint64_t v28 = v89;
                      if (!(void)v89
                        || (unint64_t v28 = v27 % DWORD2(v90),
                            uint64_t v29 = *(unsigned int *)(*((void *)&v89 + 1) + 4 * v28),
                            v29 == 0x7FFFFFFF))
                      {
LABEL_29:
                        int v30 = v8;
                        unsigned int v31 = v92;
                        if (v92 == 0x7FFFFFFF)
                        {
                          unsigned int v31 = v91;
                          unsigned int v32 = v91;
                          if (v91 == DWORD2(v90))
                          {
                            re::HashTable<int,re::AttributeTable const*,re::Hash<int>,re::EqualTo<int>,true,false>::setCapacity((uint64_t)&v89, 2 * HIDWORD(v90));
                            unsigned int v32 = v91;
                            unint64_t v28 = v27 % DWORD2(v90);
                          }
                          unsigned int v91 = v32 + 1;
                          uint64_t v33 = v90;
                          int v34 = *(_DWORD *)(v90 + 24 * v31 + 8);
                        }
                        else
                        {
                          uint64_t v33 = v90;
                          int v34 = *(_DWORD *)(v90 + 24 * v92 + 8);
                          LODWORD(v92) = v34 & 0x7FFFFFFF;
                        }
                        uint64_t v35 = v33 + 24 * v31;
                        *(_DWORD *)(v35 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v34 | 0x80000000;
                        uint64_t v36 = *((void *)&v89 + 1);
                        unsigned int v37 = *(_DWORD *)(*((void *)&v89 + 1) + 4 * v28) | 0x80000000;
                        *(void *)uint64_t v35 = v27;
                        *(_DWORD *)(v35 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v37;
                        *(_DWORD *)(v35 + 12) = v21;
                        *(void *)(v35 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v25;
                        *(_DWORD *)(v36 + 4 * v2re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v31;
                        ++HIDWORD(v90);
                        ++HIDWORD(v92);
                        LODWORD(vre::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v30;
                      }
                      else
                      {
                        while (*(_DWORD *)(v90 + 24 * v29 + 12) != v21)
                        {
                          LODWORD(v29) = *(_DWORD *)(v90 + 24 * v29 + 8) & 0x7FFFFFFF;
                          if (v29 == 0x7FFFFFFF) {
                            goto LABEL_29;
                          }
                        }
                      }
                      if (v21 <= (int)v8) {
                        unint64_t v8 = v8;
                      }
                      else {
                        unint64_t v8 = v21;
                      }
                    }
                    ++v19;
                  }
                  while (v19 < *(void *)(v15 + 56));
                }
                unint64_t v12 = v82 + 1;
                uint64_t v11 = v81;
              }
              while (v82 + 1 < v81[1]);
            }
            v11 += 82;
          }
          while (v11 != v78);
        }
        unint64_t v6 = v77 + 1;
      }
      while (v77 + 1 != v74);
    }
    else
    {
      unint64_t v8 = 0xFFFFFFFFLL;
    }
    long long v38 = a2;
    uint64_t v39 = re::DrawingManager::currentCommandBuffer(*(re::DrawingManager **)(*((void *)a2 + 1) + 104));
    re::RenderGraphContext::acquireManagedBlitEncoder((uint64_t)v38, v39, *((re::RenderGraphNodeBase **)v38 + 5), 0, v95);
    uint64_t v40 = *((void *)this + 19);
    if (!v40) {
      goto LABEL_81;
    }
    uint64_t v41 = *((void *)this + 21);
    uint64_t v83 = v41 + (v40 << 6);
    uint64_t v42 = (v8 + 1);
    while (2)
    {
      uint64_t v43 = re::RenderGraphContext::metalBuffer((uint64_t)v38, v41);
      id v44 = *(id *)v43;
      if ((v8 & 0x80000000) != 0) {
        goto LABEL_75;
      }
      unint64_t v45 = 0;
      unint64_t v46 = 0;
      unint64_t v87 = HIDWORD(*(void *)(v43 + 8));
      uint64_t v84 = *(void *)(v43 + 8);
      while (1)
      {
        BOOL v47 = re::HashTable<int,re::AttributeTable const*,re::Hash<int>,re::EqualTo<int>,true,false>::containsKey((uint64_t)&v89, v45);
        if (v47) {
          break;
        }
        char v52 = *re::graphicsLogObjects((re *)v47);
        if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v53 = *((void *)this + 2);
          *(_DWORD *)simd_float4x4 buf = 136315394;
          *(void *)&uint8_t buf[4] = v53;
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = v45;
          int v54 = v52;
          uint64_t v55 = "(%s): Missing material index: %d";
LABEL_70:
          _os_log_impl(&dword_233120000, v54, OS_LOG_TYPE_DEFAULT, v55, buf, 0x12u);
        }
LABEL_74:
        if (++v45 == v42) {
          goto LABEL_75;
        }
      }
      if ((void)v89)
      {
        unint64_t v48 = 0x94D049BB133111EBLL
            * ((0xBF58476D1CE4E5B9 * (v45 ^ (v45 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v45 ^ (v45 >> 30))) >> 27));
        unint64_t v49 = (v48 ^ (v48 >> 31)) % DWORD2(v90);
        uint64_t v50 = v90;
        uint64_t v51 = *(unsigned int *)(*((void *)&v89 + 1) + 4 * v49);
        if (v51 != 0x7FFFFFFF)
        {
          while (v45 != *(_DWORD *)(v90 + 24 * v51 + 12))
          {
            uint64_t v51 = *(_DWORD *)(v90 + 24 * v51 + 8) & 0x7FFFFFFF;
            if (v51 == 0x7FFFFFFF) {
              goto LABEL_57;
            }
          }
LABEL_58:
          int v56 = *(re::AttributeTable **)(v50 + 24 * v51 + 16);
          if (v56)
          {
            unint64_t v57 = v8;
            uint64_t v94 = *((void *)this + 33) >> 1;
            long long v58 = v56;
            do
            {
              long long v59 = v58;
              long long v58 = (re::AttributeTable *)*((void *)v58 + 1);
            }
            while (v58 && !*((void *)v59 + 9));
            uint64_t v60 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v59 + 6, &v94);
            uint64_t v61 = v56;
            if (v60 == -1)
            {
              uint64_t v69 = *re::graphicsLogObjects((re *)0xFFFFFFFFFFFFFFFFLL);
              if (os_log_type_enabled(v69, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v70 = *((void *)this + 2);
                uint64_t v71 = *((void *)this + 34);
                *(_DWORD *)simd_float4x4 buf = 136315650;
                *(void *)&uint8_t buf[4] = v70;
                *(_WORD *)&unsigned char buf[12] = 2080;
                *(void *)&buf[14] = v71;
                *(_WORD *)&buf[22] = 1024;
                *(_DWORD *)&buf[24] = v45;
                _os_log_impl(&dword_233120000, v69, OS_LOG_TYPE_DEFAULT, "(%s): Unable to find specified vertex buffer [ %s ] at material index %d.", buf, 0x1Cu);
              }
            }
            else
            {
              do
              {
                int v62 = v61;
                uint64_t v61 = (re::AttributeTable *)*((void *)v61 + 1);
              }
              while (v61 && !*((void *)v62 + 9));
              unint64_t v8 = *(unsigned __int8 *)(*((void *)v62 + 7)
                                      + 16
                                      * re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v62 + 6, &v94)+ 8);
              int v63 = (re *)re::AttributeTable::buffers(v56);
              if (v64 <= v8) {
                goto LABEL_84;
              }
              uint64_t v65 = (char *)v63 + 16 * v8;
              unint64_t v66 = v46 + *((unsigned int *)v65 + 3);
              if (v66 > v87)
              {
                unint64_t v72 = *re::graphicsLogObjects(v63);
                unint64_t v8 = v57;
                if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT))
                {
                  uint64_t v73 = *((void *)this + 2);
                  *(_DWORD *)simd_float4x4 buf = 136315138;
                  *(void *)&uint8_t buf[4] = v73;
                  _os_log_impl(&dword_233120000, v72, OS_LOG_TYPE_DEFAULT, "(%s): Write buffer not large enough for data.", buf, 0xCu);
                }
LABEL_75:
                if (v44) {

                }
                v41 += 64;
                long long v38 = v76;
                if (v41 == v83)
                {
LABEL_81:

                  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)&v89);
                  goto LABEL_82;
                }
                continue;
              }
              objc_msgSend(*(id *)v95, "copyFromBuffer:sourceOffset:toBuffer:destinationOffset:size:", *(void *)v65, *((unsigned int *)v65 + 2), v44, v46 + v84);
              unint64_t v46 = v66;
            }
            unint64_t v8 = v57;
          }
          else
          {
            uint64_t v67 = *re::graphicsLogObjects((re *)v47);
            if (os_log_type_enabled(v67, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v68 = *((void *)this + 2);
              *(_DWORD *)simd_float4x4 buf = 136315394;
              *(void *)&uint8_t buf[4] = v68;
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = v45;
              int v54 = v67;
              uint64_t v55 = "(%s): Invalid buffer table at material index %d.";
              goto LABEL_70;
            }
          }
          goto LABEL_74;
        }
      }
      else
      {
        uint64_t v50 = v90;
      }
      break;
    }
LABEL_57:
    LODWORD(v5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0x7FFFFFFF;
    goto LABEL_58;
  }
LABEL_82:
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v93);
}

BOOL re::HashTable<int,re::AttributeTable const*,re::Hash<int>,re::EqualTo<int>,true,false>::containsKey(uint64_t a1, int a2)
{
  if (!*(void *)a1) {
    return 0;
  }
  unint64_t v2 = 0xBF58476D1CE4E5B9 * (a2 ^ ((unint64_t)a2 >> 30));
  uint64_t v3 = *(unsigned int *)(*(void *)(a1 + 8)
                       + 4
                       * (((0x94D049BB133111EBLL * (v2 ^ (v2 >> 27))) ^ ((0x94D049BB133111EBLL * (v2 ^ (v2 >> 27))) >> 31))
                        % *(unsigned int *)(a1 + 24)));
  if (v3 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 16);
  if (*(_DWORD *)(v5 + 24 * v3 + 12) == a2) {
    return 1;
  }
  do
  {
    LODWORD(v3) = *(_DWORD *)(v5 + 24 * v3 + 8) & 0x7FFFFFFF;
    BOOL result = v3 != 0x7FFFFFFF;
  }
  while (v3 != 0x7FFFFFFF && *(_DWORD *)(v5 + 24 * v3 + 12) != a2);
  return result;
}

uint64_t re::RenderGraphCopyEntityAttributeBufferNode::validateAttachmentsDuringGraphBuild(uint64_t result, uint64_t a2)
{
  uint64_t v3 = (void *)result;
  if (*(void *)(result + 192))
  {
    re::DynamicString::format((re::DynamicString *)"(%s): Target reads not supported for RenderGraphCopyEntityAttributeBufferNode.", (re::DynamicString *)&v4, *(void *)(result + 16));
    re::RenderGraphCompiled::addError(a2, (uint64_t)&v4);
    BOOL result = v4;
    if (v4)
    {
      if (v5) {
        BOOL result = (*(uint64_t (**)(void))(*(void *)v4 + 40))();
      }
    }
  }
  if (v3[29])
  {
    re::DynamicString::format((re::DynamicString *)"(%s): Target writes not supported for RenderGraphCopyEntityAttributeBufferNode.", (re::DynamicString *)&v4, v3[2]);
    re::RenderGraphCompiled::addError(a2, (uint64_t)&v4);
    BOOL result = v4;
    if (v4)
    {
      if (v5) {
        BOOL result = (*(uint64_t (**)(void))(*(void *)v4 + 40))();
      }
    }
  }
  if (v3[14])
  {
    re::DynamicString::format((re::DynamicString *)"(%s): Buffer reads not supported for RenderGraphCopyEntityAttributeBufferNode.", (re::DynamicString *)&v4, v3[2]);
    re::RenderGraphCompiled::addError(a2, (uint64_t)&v4);
    BOOL result = v4;
    if (v4)
    {
      if (v5) {
        return (*(uint64_t (**)(void))(*(void *)v4 + 40))();
      }
    }
  }
  return result;
}

void re::RenderGraphSynchronizeTargetNode::execute(re::RenderGraphSynchronizeTargetNode *this, re::RenderGraphContext *a2)
{
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v10, 5066, 0);
  uint64_t v4 = re::DrawingManager::currentCommandBuffer(*(re::DrawingManager **)(*((void *)a2 + 1) + 104));
  re::RenderGraphContext::acquireManagedBlitEncoder((uint64_t)a2, v4, *((re::RenderGraphNodeBase **)a2 + 5), 0, &v9);
  uint64_t v5 = *((void *)this + 29);
  if (v5)
  {
    uint64_t v6 = *((void *)this + 31);
    uint64_t v7 = v5 << 6;
    do
    {
      re::RenderGraphContext::metalTexture((uint64_t)a2, v6, 0, 0, &v8);
      if (v8) {

      }
      v6 += 64;
      v7 -= 64;
    }
    while (v7);
  }

  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v10);
}

uint64_t re::RenderGraphSynchronizeTargetNode::validateAttachmentsDuringGraphBuild(uint64_t result, uint64_t a2)
{
  uint64_t v3 = (void *)result;
  if (*(void *)(result + 112))
  {
    re::DynamicString::format((re::DynamicString *)"(%s): Buffer reads not supported for RenderGraphSynchronizeTargetNode.", (re::DynamicString *)&v4, *(void *)(result + 16));
    re::RenderGraphCompiled::addError(a2, (uint64_t)&v4);
    BOOL result = v4;
    if (v4)
    {
      if (v5) {
        BOOL result = (*(uint64_t (**)(void))(*(void *)v4 + 40))();
      }
    }
  }
  if (v3[19])
  {
    re::DynamicString::format((re::DynamicString *)"(%s): Buffer writes not supported for RenderGraphSynchronizeTargetNode.", (re::DynamicString *)&v4, v3[2]);
    re::RenderGraphCompiled::addError(a2, (uint64_t)&v4);
    BOOL result = v4;
    if (v4)
    {
      if (v5) {
        BOOL result = (*(uint64_t (**)(void))(*(void *)v4 + 40))();
      }
    }
  }
  if (v3[24])
  {
    re::DynamicString::format((re::DynamicString *)"(%s): Target reads not supported for RenderGraphSynchronizeTargetNode.", (re::DynamicString *)&v4, v3[2]);
    re::RenderGraphCompiled::addError(a2, (uint64_t)&v4);
    BOOL result = v4;
    if (v4)
    {
      if (v5) {
        return (*(uint64_t (**)(void))(*(void *)v4 + 40))();
      }
    }
  }
  return result;
}

void re::RenderGraphSynchronizeBufferNode::execute(re::RenderGraphSynchronizeBufferNode *this, re::RenderGraphContext *a2)
{
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v9, 5068, 0);
  uint64_t v4 = re::DrawingManager::currentCommandBuffer(*(re::DrawingManager **)(*((void *)a2 + 1) + 104));
  re::RenderGraphContext::acquireManagedBlitEncoder((uint64_t)a2, v4, *((re::RenderGraphNodeBase **)a2 + 5), 0, &v8);
  uint64_t v5 = *((void *)this + 19);
  if (v5)
  {
    uint64_t v6 = *((void *)this + 21);
    uint64_t v7 = v5 << 6;
    do
    {
      re::RenderGraphContext::metalBuffer((uint64_t)a2, v6);
      v6 += 64;
      v7 -= 64;
    }
    while (v7);
  }

  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v9);
}

uint64_t re::RenderGraphSynchronizeBufferNode::validateAttachmentsDuringGraphBuild(uint64_t result, uint64_t a2)
{
  uint64_t v3 = (void *)result;
  if (*(void *)(result + 112))
  {
    re::DynamicString::format((re::DynamicString *)"(%s): Buffer reads not supported for RenderGraphSynchronizeTextureNode.", (re::DynamicString *)&v4, *(void *)(result + 16));
    re::RenderGraphCompiled::addError(a2, (uint64_t)&v4);
    BOOL result = v4;
    if (v4)
    {
      if (v5) {
        BOOL result = (*(uint64_t (**)(void))(*(void *)v4 + 40))();
      }
    }
  }
  if (v3[29])
  {
    re::DynamicString::format((re::DynamicString *)"(%s): Buffer writes not supported for RenderGraphSynchronizeTextureNode.", (re::DynamicString *)&v4, v3[2]);
    re::RenderGraphCompiled::addError(a2, (uint64_t)&v4);
    BOOL result = v4;
    if (v4)
    {
      if (v5) {
        BOOL result = (*(uint64_t (**)(void))(*(void *)v4 + 40))();
      }
    }
  }
  if (v3[24])
  {
    re::DynamicString::format((re::DynamicString *)"(%s): Target reads not supported for RenderGraphSynchronizeTextureNode.", (re::DynamicString *)&v4, v3[2]);
    re::RenderGraphCompiled::addError(a2, (uint64_t)&v4);
    BOOL result = v4;
    if (v4)
    {
      if (v5) {
        return (*(uint64_t (**)(void))(*(void *)v4 + 40))();
      }
    }
  }
  return result;
}

void re::RenderGraphFillBufferNode::execute(re::RenderGraphFillBufferNode *this, re::RenderGraphContext *a2)
{
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v10, 5070, 0);
  uint64_t v4 = re::DrawingManager::currentCommandBuffer(*(re::DrawingManager **)(*((void *)a2 + 1) + 104));
  re::RenderGraphContext::acquireManagedBlitEncoder((uint64_t)a2, v4, *((re::RenderGraphNodeBase **)a2 + 5), 0, &v9);
  uint64_t v5 = *((void *)this + 19);
  if (v5)
  {
    uint64_t v6 = *((void *)this + 21);
    uint64_t v7 = v5 << 6;
    do
    {
      uint64_t v8 = re::RenderGraphContext::metalBuffer((uint64_t)a2, v6);
      objc_msgSend(v9, "fillBuffer:range:value:", *(void *)v8, *(unsigned int *)(v8 + 8), *(unsigned int *)(v8 + 12), *((unsigned __int8 *)this + 256));
      v6 += 64;
      v7 -= 64;
    }
    while (v7);
  }

  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v10);
}

uint64_t re::RenderGraphFillBufferNode::validateAttachmentsDuringGraphBuild(uint64_t result, uint64_t a2)
{
  uint64_t v3 = (void *)result;
  if (*(void *)(result + 112))
  {
    re::DynamicString::format((re::DynamicString *)"(%s): Buffer reads not supported for RenderGraphFillBufferNode.", (re::DynamicString *)&v4, *(void *)(result + 16));
    re::RenderGraphCompiled::addError(a2, (uint64_t)&v4);
    BOOL result = v4;
    if (v4)
    {
      if (v5) {
        BOOL result = (*(uint64_t (**)(void))(*(void *)v4 + 40))();
      }
    }
  }
  if (v3[29])
  {
    re::DynamicString::format((re::DynamicString *)"(%s): Buffer writes not supported for RenderGraphFillBufferNode.", (re::DynamicString *)&v4, v3[2]);
    re::RenderGraphCompiled::addError(a2, (uint64_t)&v4);
    BOOL result = v4;
    if (v4)
    {
      if (v5) {
        BOOL result = (*(uint64_t (**)(void))(*(void *)v4 + 40))();
      }
    }
  }
  if (v3[24])
  {
    re::DynamicString::format((re::DynamicString *)"(%s): Target reads not supported for RenderGraphFillBufferNode.", (re::DynamicString *)&v4, v3[2]);
    re::RenderGraphCompiled::addError(a2, (uint64_t)&v4);
    BOOL result = v4;
    if (v4)
    {
      if (v5) {
        return (*(uint64_t (**)(void))(*(void *)v4 + 40))();
      }
    }
  }
  return result;
}

void *re::allocInfo_RenderGraphGenerateMipmapsNode(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_479, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_479))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF9D2D0, "RenderGraphGenerateMipmapsNode");
    __cxa_guard_release(&_MergedGlobals_479);
  }
  return &unk_26AF9D2D0;
}

void re::initInfo_RenderGraphGenerateMipmapsNode(re *this, re::IntrospectionBase *a2)
{
  v9[0] = 0x60380926AD0DCD00;
  v9[1] = "RenderGraphGenerateMipmapsNode";
  re::StringID::destroyString((re::StringID *)v9);
  *((_OWORD *)this + 2) = v10;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9D230, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF9D230);
    if (v4)
    {
      char v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::introspect_RenderGraphNode((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "RenderGraphNode";
      *(void *)(v7 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v7 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF9D228 = v7;
      __cxa_guard_release(&qword_26AF9D230);
    }
  }
  *((void *)this + 2) = 0x10000000008;
  *((_DWORD *)this + re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((void *)this + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = &qword_26AF9D228;
  *((void *)this + 9) = re::internal::defaultConstruct<re::RenderGraphGenerateMipmapsNode>;
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::RenderGraphGenerateMipmapsNode>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::RenderGraphGenerateMipmapsNode>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::RenderGraphGenerateMipmapsNode>;
  re::IntrospectionRegistry::add(this, v3);
  long long v8 = v10;
}

re::RenderGraphNode *re::internal::defaultConstruct<re::RenderGraphGenerateMipmapsNode>(int a1, int a2, re::RenderGraphNode *this)
{
  BOOL result = re::RenderGraphNode::RenderGraphNode(this);
  *(void *)BOOL result = &unk_26E71F4E8;
  return result;
}

void re::internal::defaultDestruct<re::RenderGraphGenerateMipmapsNode>(int a1, int a2, id *this)
{
}

re::RenderGraphNode *re::internal::defaultConstructV2<re::RenderGraphGenerateMipmapsNode>(re::RenderGraphNode *a1)
{
  BOOL result = re::RenderGraphNode::RenderGraphNode(a1);
  *(void *)BOOL result = &unk_26E71F4E8;
  return result;
}

uint64_t re::introspect_RenderGraphGenerateMipmapsNode(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RenderGraphGenerateMipmapsNode", (uint64_t (*)(re::internal *))re::allocInfo_RenderGraphGenerateMipmapsNode, (re::IntrospectionBase *(*)(void))re::initInfo_RenderGraphGenerateMipmapsNode, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::RenderGraphGenerateMipmapsNode>, this);
}

void *re::allocInfo_RenderGraphTargetCopyNode(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9D238, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9D238))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF9D348, "RenderGraphTargetCopyNode");
    __cxa_guard_release(&qword_26AF9D238);
  }
  return &unk_26AF9D348;
}

void re::initInfo_RenderGraphTargetCopyNode(re *this, re::IntrospectionBase *a2)
{
  v65[0] = 0xB8B72825D799A640;
  v65[1] = "RenderGraphTargetCopyNode";
  re::StringID::destroyString((re::StringID *)v65);
  *((_OWORD *)this + 2) = v66;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9D240, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF9D240);
    if (v4)
    {
      char v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::introspect_RenderGraphNode((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "RenderGraphNode";
      *(void *)(v7 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v7 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF9D3C0 = v7;
      long long v8 = re::introspectionAllocator((re *)v7);
      long long v10 = re::introspect_size_t((re *)1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "sourceSlice";
      *(void *)(v11 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x10000000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v11 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF9D3C8 = v11;
      unint64_t v12 = re::introspectionAllocator((re *)v11);
      uint64_t v14 = re::introspect_size_t((re *)1, v13);
      uint64_t v15 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 72, 8);
      *(_DWORD *)uint64_t v15 = 1;
      *(void *)(v15 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "sourceLevel";
      *(void *)(v15 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v14;
      *(void *)(v15 + 24) = 0;
      *(void *)(v15 + 32) = 0x10800000002;
      *(_DWORD *)(v15 + 40) = 0;
      *(void *)(v15 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v15 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_26AF9D3D0 = v15;
      uint64_t v16 = re::introspectionAllocator((re *)v15);
      unint64_t v18 = re::introspect_size_t((re *)1, v17);
      uint64_t v19 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v16 + 32))(v16, 72, 8);
      *(_DWORD *)uint64_t v19 = 1;
      *(void *)(v19 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "sourceX";
      *(void *)(v19 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v18;
      *(void *)(v19 + 24) = 0;
      *(void *)(v19 + 32) = 0x11000000003;
      *(_DWORD *)(v19 + 40) = 0;
      *(void *)(v19 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v19 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v19 + 64) = 0;
      qword_26AF9D3D8 = v19;
      uint64_t v20 = re::introspectionAllocator((re *)v19);
      BOOL v22 = re::introspect_size_t((re *)1, v21);
      uint64_t v23 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v20 + 32))(v20, 72, 8);
      *(_DWORD *)uint64_t v23 = 1;
      *(void *)(v23 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "sourceY";
      *(void *)(v23 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v22;
      *(void *)(v23 + 24) = 0;
      *(void *)(v23 + 32) = 0x11800000004;
      *(_DWORD *)(v23 + 40) = 0;
      *(void *)(v23 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v23 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v23 + 64) = 0;
      qword_26AF9D3E0 = v23;
      uint64_t v24 = re::introspectionAllocator((re *)v23);
      unint64_t v26 = re::introspect_size_t((re *)1, v25);
      uint64_t v27 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v24 + 32))(v24, 72, 8);
      *(_DWORD *)uint64_t v27 = 1;
      *(void *)(v27 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "sourceZ";
      *(void *)(v27 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v26;
      *(void *)(v27 + 24) = 0;
      *(void *)(v27 + 32) = 0x12000000005;
      *(_DWORD *)(v27 + 40) = 0;
      *(void *)(v27 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v27 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v27 + 64) = 0;
      qword_26AF9D3E8 = v27;
      unint64_t v28 = re::introspectionAllocator((re *)v27);
      int v30 = re::introspect_size_t((re *)1, v29);
      uint64_t v31 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v28 + 32))(v28, 72, 8);
      *(_DWORD *)uint64_t v31 = 1;
      *(void *)(v31 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "sourceWidth";
      *(void *)(v31 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v30;
      *(void *)(v31 + 24) = 0;
      *(void *)(v31 + 32) = 0x12800000006;
      *(_DWORD *)(v31 + 40) = 0;
      *(void *)(v31 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v31 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v31 + 64) = 0;
      qword_26AF9D3F0 = v31;
      unsigned int v32 = re::introspectionAllocator((re *)v31);
      int v34 = re::introspect_size_t((re *)1, v33);
      uint64_t v35 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v32 + 32))(v32, 72, 8);
      *(_DWORD *)uint64_t v35 = 1;
      *(void *)(v35 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "sourceHeight";
      *(void *)(v35 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v34;
      *(void *)(v35 + 24) = 0;
      *(void *)(v35 + 32) = 0x13000000007;
      *(_DWORD *)(v35 + 40) = 0;
      *(void *)(v35 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v35 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v35 + 64) = 0;
      qword_26AF9D3F8 = v35;
      uint64_t v36 = re::introspectionAllocator((re *)v35);
      long long v38 = re::introspect_size_t((re *)1, v37);
      uint64_t v39 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v36 + 32))(v36, 72, 8);
      *(_DWORD *)uint64_t v39 = 1;
      *(void *)(v39 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "sourceDepth";
      *(void *)(v39 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v38;
      *(void *)(v39 + 24) = 0;
      *(void *)(v39 + 32) = 0x13800000008;
      *(_DWORD *)(v39 + 40) = 0;
      *(void *)(v39 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v39 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v39 + 64) = 0;
      qword_26AF9D400 = v39;
      uint64_t v40 = re::introspectionAllocator((re *)v39);
      uint64_t v42 = re::introspect_size_t((re *)1, v41);
      uint64_t v43 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v40 + 32))(v40, 72, 8);
      *(_DWORD *)uint64_t v43 = 1;
      *(void *)(v43 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "destSlice";
      *(void *)(v43 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v42;
      *(void *)(v43 + 24) = 0;
      *(void *)(v43 + 32) = 0x14000000009;
      *(_DWORD *)(v43 + 40) = 0;
      *(void *)(v43 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v43 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v43 + 64) = 0;
      qword_26AF9D408 = v43;
      id v44 = re::introspectionAllocator((re *)v43);
      unint64_t v46 = re::introspect_size_t((re *)1, v45);
      uint64_t v47 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v44 + 32))(v44, 72, 8);
      *(_DWORD *)uint64_t v47 = 1;
      *(void *)(v47 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "destLevel";
      *(void *)(v47 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v46;
      *(void *)(v47 + 24) = 0;
      *(void *)(v47 + 32) = 0x1480000000ALL;
      *(_DWORD *)(v47 + 40) = 0;
      *(void *)(v47 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v47 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v47 + 64) = 0;
      qword_26AF9D410 = v47;
      unint64_t v48 = re::introspectionAllocator((re *)v47);
      uint64_t v50 = re::introspect_size_t((re *)1, v49);
      uint64_t v51 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v48 + 32))(v48, 72, 8);
      *(_DWORD *)uint64_t v51 = 1;
      *(void *)(v51 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "destX";
      *(void *)(v51 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v50;
      *(void *)(v51 + 24) = 0;
      *(void *)(v51 + 32) = 0x1500000000BLL;
      *(_DWORD *)(v51 + 40) = 0;
      *(void *)(v51 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v51 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v51 + 64) = 0;
      qword_26AF9D418 = v51;
      char v52 = re::introspectionAllocator((re *)v51);
      int v54 = re::introspect_size_t((re *)1, v53);
      uint64_t v55 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v52 + 32))(v52, 72, 8);
      *(_DWORD *)uint64_t v55 = 1;
      *(void *)(v55 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "destY";
      *(void *)(v55 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v54;
      *(void *)(v55 + 24) = 0;
      *(void *)(v55 + 32) = 0x1580000000CLL;
      *(_DWORD *)(v55 + 40) = 0;
      *(void *)(v55 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v55 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v55 + 64) = 0;
      qword_26AF9D420 = v55;
      int v56 = re::introspectionAllocator((re *)v55);
      long long v58 = re::introspect_size_t((re *)1, v57);
      uint64_t v59 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v56 + 32))(v56, 72, 8);
      *(_DWORD *)uint64_t v59 = 1;
      *(void *)(v59 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "destZ";
      *(void *)(v59 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v58;
      *(void *)(v59 + 24) = 0;
      *(void *)(v59 + 32) = 0x1600000000DLL;
      *(_DWORD *)(v59 + 40) = 0;
      *(void *)(v59 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v59 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v59 + 64) = 0;
      qword_26AF9D428 = v59;
      uint64_t v60 = re::introspectionAllocator((re *)v59);
      int v62 = re::introspect_BOOL((re *)1, v61);
      uint64_t v63 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v60 + 32))(v60, 72, 8);
      *(_DWORD *)uint64_t v63 = 1;
      *(void *)(v63 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "copyAllSlices";
      *(void *)(v63 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v62;
      *(void *)(v63 + 24) = 0;
      *(void *)(v63 + 32) = 0x1680000000ELL;
      *(_DWORD *)(v63 + 40) = 0;
      *(void *)(v63 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v63 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v63 + 64) = 0;
      qword_26AF9D430 = v63;
      __cxa_guard_release(&qword_26AF9D240);
    }
  }
  *((void *)this + 2) = 0x17000000008;
  *((_DWORD *)this + re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 15;
  *((void *)this + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = &qword_26AF9D3C0;
  *((void *)this + 9) = re::internal::defaultConstruct<re::RenderGraphTargetCopyNode>;
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::RenderGraphTargetCopyNode>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::RenderGraphTargetCopyNode>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::RenderGraphTargetCopyNode>;
  re::IntrospectionRegistry::add(this, v3);
  long long v64 = v66;
}

double re::internal::defaultConstruct<re::RenderGraphTargetCopyNode>(int a1, int a2, re::RenderGraphNode *this)
{
  uint64_t v3 = re::RenderGraphNode::RenderGraphNode(this);
  *(void *)uint64_t v3 = &unk_26E71F578;
  double result = 0.0;
  *((_OWORD *)v3 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0u;
  *((_OWORD *)v3 + 17) = 0u;
  *((void *)v3 + 3re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  *((void *)v3 + 37) = -1;
  *((void *)v3 + 3re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = -1;
  *((void *)v3 + 39) = -1;
  *((_OWORD *)v3 + 20) = 0u;
  *((_OWORD *)v3 + 2re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0u;
  *(_OWORD *)((char *)v3 + 345) = 0u;
  return result;
}

uint64_t re::internal::defaultDestruct<re::RenderGraphTargetCopyNode>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

double re::internal::defaultConstructV2<re::RenderGraphTargetCopyNode>(re::RenderGraphNode *a1)
{
  uint64_t v1 = re::RenderGraphNode::RenderGraphNode(a1);
  *(void *)uint64_t v1 = &unk_26E71F578;
  double result = 0.0;
  *((_OWORD *)v1 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0u;
  *((_OWORD *)v1 + 17) = 0u;
  *((void *)v1 + 3re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  *((void *)v1 + 37) = -1;
  *((void *)v1 + 3re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = -1;
  *((void *)v1 + 39) = -1;
  *((_OWORD *)v1 + 20) = 0u;
  *((_OWORD *)v1 + 2re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0u;
  *(_OWORD *)((char *)v1 + 345) = 0u;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::RenderGraphTargetCopyNode>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::introspect_RenderGraphTargetCopyNode(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RenderGraphTargetCopyNode", (uint64_t (*)(re::internal *))re::allocInfo_RenderGraphTargetCopyNode, (re::IntrospectionBase *(*)(void))re::initInfo_RenderGraphTargetCopyNode, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::RenderGraphTargetCopyNode>, this);
}

void *re::allocInfo_RenderGraphCopyEntityAttributeBufferNode(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9D248, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9D248))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF9D438, "RenderGraphCopyEntityAttributeBufferNode");
    __cxa_guard_release(&qword_26AF9D248);
  }
  return &unk_26AF9D438;
}

void re::initInfo_RenderGraphCopyEntityAttributeBufferNode(re *this, re::IntrospectionBase *a2)
{
  v17[0] = 0x8896AD266CD311DCLL;
  v17[1] = "RenderGraphCopyEntityAttributeBufferNode";
  re::StringID::destroyString((re::StringID *)v17);
  *((_OWORD *)this + 2) = v18;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9D250, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF9D250);
    if (v4)
    {
      char v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::introspect_RenderGraphNode((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "RenderGraphNode";
      *(void *)(v7 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v7 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF9D2A0 = v7;
      long long v8 = re::introspectionAllocator((re *)v7);
      long long v10 = re::introspect_uint64_t((re *)1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "sourceEntityId";
      *(void *)(v11 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x10000000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v11 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF9D2A8 = v11;
      unint64_t v12 = re::introspectionAllocator((re *)v11);
      uint64_t v14 = re::IntrospectionInfo<re::StringID>::get(1, v13);
      uint64_t v15 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 72, 8);
      *(_DWORD *)uint64_t v15 = 1;
      *(void *)(v15 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "attributeName";
      *(void *)(v15 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v14;
      *(void *)(v15 + 24) = 0;
      *(void *)(v15 + 32) = 0x10800000002;
      *(_DWORD *)(v15 + 40) = 0;
      *(void *)(v15 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v15 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_26AF9D2B0 = v15;
      __cxa_guard_release(&qword_26AF9D250);
    }
  }
  *((void *)this + 2) = 0x11800000008;
  *((_DWORD *)this + re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((void *)this + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = &qword_26AF9D2A0;
  *((void *)this + 9) = re::internal::defaultConstruct<re::RenderGraphCopyEntityAttributeBufferNode>;
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::RenderGraphCopyEntityAttributeBufferNode>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::RenderGraphCopyEntityAttributeBufferNode>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::RenderGraphCopyEntityAttributeBufferNode>;
  re::IntrospectionRegistry::add(this, v3);
  long long v16 = v18;
}

re::RenderGraphNode *re::internal::defaultConstruct<re::RenderGraphCopyEntityAttributeBufferNode>(int a1, int a2, re::RenderGraphNode *this)
{
  double result = re::RenderGraphNode::RenderGraphNode(this);
  *(void *)double result = &unk_26E71F608;
  *((void *)result + 32) = 0;
  *((void *)result + 33) = 0;
  *((void *)result + 34) = "";
  return result;
}

void re::internal::defaultDestruct<re::RenderGraphCopyEntityAttributeBufferNode>(uint64_t a1, uint64_t a2, id *a3)
{
  re::StringID::destroyString((re::StringID *)(a3 + 33));
  re::RenderGraphNode::~RenderGraphNode(a3);
}

re::RenderGraphNode *re::internal::defaultConstructV2<re::RenderGraphCopyEntityAttributeBufferNode>(re::RenderGraphNode *a1)
{
  double result = re::RenderGraphNode::RenderGraphNode(a1);
  *(void *)double result = &unk_26E71F608;
  *((void *)result + 32) = 0;
  *((void *)result + 33) = 0;
  *((void *)result + 34) = "";
  return result;
}

void re::internal::defaultDestructV2<re::RenderGraphCopyEntityAttributeBufferNode>(id *a1)
{
  re::StringID::destroyString((re::StringID *)(a1 + 33));
  re::RenderGraphNode::~RenderGraphNode(a1);
}

uint64_t re::introspect_RenderGraphCopyEntityAttributeBufferNode(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RenderGraphCopyEntityAttributeBufferNode", (uint64_t (*)(re::internal *))re::allocInfo_RenderGraphCopyEntityAttributeBufferNode, (re::IntrospectionBase *(*)(void))re::initInfo_RenderGraphCopyEntityAttributeBufferNode, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::RenderGraphCopyEntityAttributeBufferNode>, this);
}

void *re::allocInfo_RenderGraphSynchronizeTargetNode(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9D258, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9D258))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF9D4B0, "RenderGraphSynchronizeTargetNode");
    __cxa_guard_release(&qword_26AF9D258);
  }
  return &unk_26AF9D4B0;
}

void re::initInfo_RenderGraphSynchronizeTargetNode(re *this, re::IntrospectionBase *a2)
{
  v17[0] = 0x4E5165E59E70FC96;
  v17[1] = "RenderGraphSynchronizeTargetNode";
  re::StringID::destroyString((re::StringID *)v17);
  *((_OWORD *)this + 2) = v18;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9D260, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF9D260);
    if (v4)
    {
      char v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::introspect_RenderGraphNode((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "RenderGraphNode";
      *(void *)(v7 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v7 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF9D2B8 = v7;
      long long v8 = re::introspectionAllocator((re *)v7);
      long long v10 = re::introspect_size_t((re *)1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "slice";
      *(void *)(v11 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x10000000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v11 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF9D2C0 = v11;
      unint64_t v12 = re::introspectionAllocator((re *)v11);
      uint64_t v14 = re::introspect_size_t((re *)1, v13);
      uint64_t v15 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 72, 8);
      *(_DWORD *)uint64_t v15 = 1;
      *(void *)(v15 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "level";
      *(void *)(v15 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v14;
      *(void *)(v15 + 24) = 0;
      *(void *)(v15 + 32) = 0x10800000002;
      *(_DWORD *)(v15 + 40) = 0;
      *(void *)(v15 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v15 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_26AF9D2C8 = v15;
      __cxa_guard_release(&qword_26AF9D260);
    }
  }
  *((void *)this + 2) = 0x11000000008;
  *((_DWORD *)this + re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((void *)this + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = &qword_26AF9D2B8;
  *((void *)this + 9) = re::internal::defaultConstruct<re::RenderGraphSynchronizeTargetNode>;
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::RenderGraphSynchronizeTargetNode>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::RenderGraphSynchronizeTargetNode>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::RenderGraphSynchronizeTargetNode>;
  re::IntrospectionRegistry::add(this, v3);
  long long v16 = v18;
}

re::RenderGraphNode *re::internal::defaultConstruct<re::RenderGraphSynchronizeTargetNode>(int a1, int a2, re::RenderGraphNode *this)
{
  double result = re::RenderGraphNode::RenderGraphNode(this);
  *(void *)double result = &unk_26E71F698;
  *((void *)result + 32) = 0;
  *((void *)result + 33) = 0;
  return result;
}

void re::internal::defaultDestruct<re::RenderGraphSynchronizeTargetNode>(int a1, int a2, id *this)
{
}

re::RenderGraphNode *re::internal::defaultConstructV2<re::RenderGraphSynchronizeTargetNode>(re::RenderGraphNode *a1)
{
  double result = re::RenderGraphNode::RenderGraphNode(a1);
  *(void *)double result = &unk_26E71F698;
  *((void *)result + 32) = 0;
  *((void *)result + 33) = 0;
  return result;
}

uint64_t re::introspect_RenderGraphSynchronizeTargetNode(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RenderGraphSynchronizeTargetNode", (uint64_t (*)(re::internal *))re::allocInfo_RenderGraphSynchronizeTargetNode, (re::IntrospectionBase *(*)(void))re::initInfo_RenderGraphSynchronizeTargetNode, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::RenderGraphSynchronizeTargetNode>, this);
}

void *re::allocInfo_RenderGraphSynchronizeBufferNode(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9D268, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9D268))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF9D528, "RenderGraphSynchronizeBufferNode");
    __cxa_guard_release(&qword_26AF9D268);
  }
  return &unk_26AF9D528;
}

void re::initInfo_RenderGraphSynchronizeBufferNode(re *this, re::IntrospectionBase *a2)
{
  v9[0] = 0x4E4E22A447AD62F4;
  v9[1] = "RenderGraphSynchronizeBufferNode";
  re::StringID::destroyString((re::StringID *)v9);
  *((_OWORD *)this + 2) = v10;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9D278, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF9D278);
    if (v4)
    {
      char v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::introspect_RenderGraphNode((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "RenderGraphNode";
      *(void *)(v7 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v7 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF9D270 = v7;
      __cxa_guard_release(&qword_26AF9D278);
    }
  }
  *((void *)this + 2) = 0x10000000008;
  *((_DWORD *)this + re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((void *)this + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = &qword_26AF9D270;
  *((void *)this + 9) = re::internal::defaultConstruct<re::RenderGraphSynchronizeBufferNode>;
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::RenderGraphSynchronizeBufferNode>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::RenderGraphSynchronizeBufferNode>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::RenderGraphSynchronizeBufferNode>;
  re::IntrospectionRegistry::add(this, v3);
  long long v8 = v10;
}

re::RenderGraphNode *re::internal::defaultConstruct<re::RenderGraphSynchronizeBufferNode>(int a1, int a2, re::RenderGraphNode *this)
{
  double result = re::RenderGraphNode::RenderGraphNode(this);
  *(void *)double result = &unk_26E71F728;
  return result;
}

void re::internal::defaultDestruct<re::RenderGraphSynchronizeBufferNode>(int a1, int a2, id *this)
{
}

re::RenderGraphNode *re::internal::defaultConstructV2<re::RenderGraphSynchronizeBufferNode>(re::RenderGraphNode *a1)
{
  double result = re::RenderGraphNode::RenderGraphNode(a1);
  *(void *)double result = &unk_26E71F728;
  return result;
}

uint64_t re::introspect_RenderGraphSynchronizeBufferNode(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RenderGraphSynchronizeBufferNode", (uint64_t (*)(re::internal *))re::allocInfo_RenderGraphSynchronizeBufferNode, (re::IntrospectionBase *(*)(void))re::initInfo_RenderGraphSynchronizeBufferNode, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::RenderGraphSynchronizeBufferNode>, this);
}

void *re::allocInfo_RenderGraphFillBufferNode(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9D280, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9D280))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF9D5A0, "RenderGraphFillBufferNode");
    __cxa_guard_release(&qword_26AF9D280);
  }
  return &unk_26AF9D5A0;
}

void re::initInfo_RenderGraphFillBufferNode(re *this, re::IntrospectionBase *a2)
{
  v13[0] = 0x5358828A65A95F3ALL;
  v13[1] = "RenderGraphFillBufferNode";
  re::StringID::destroyString((re::StringID *)v13);
  *((_OWORD *)this + 2) = v14;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9D288, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF9D288);
    if (v4)
    {
      char v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::introspect_RenderGraphNode((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "RenderGraphNode";
      *(void *)(v7 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v7 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF9D290 = v7;
      long long v8 = re::introspectionAllocator((re *)v7);
      long long v10 = re::introspect_uint8_t((re *)1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "fillValue";
      *(void *)(v11 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x10000000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v11 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF9D298 = v11;
      __cxa_guard_release(&qword_26AF9D288);
    }
  }
  *((void *)this + 2) = 0x10800000008;
  *((_DWORD *)this + re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((void *)this + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = &qword_26AF9D290;
  *((void *)this + 9) = re::internal::defaultConstruct<re::RenderGraphFillBufferNode>;
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::RenderGraphFillBufferNode>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::RenderGraphFillBufferNode>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::RenderGraphFillBufferNode>;
  re::IntrospectionRegistry::add(this, v3);
  long long v12 = v14;
}

re::RenderGraphNode *re::internal::defaultConstruct<re::RenderGraphFillBufferNode>(int a1, int a2, re::RenderGraphNode *this)
{
  double result = re::RenderGraphNode::RenderGraphNode(this);
  *(void *)double result = &unk_26E71F7B8;
  return result;
}

void re::internal::defaultDestruct<re::RenderGraphFillBufferNode>(int a1, int a2, id *this)
{
}

re::RenderGraphNode *re::internal::defaultConstructV2<re::RenderGraphFillBufferNode>(re::RenderGraphNode *a1)
{
  double result = re::RenderGraphNode::RenderGraphNode(a1);
  *(void *)double result = &unk_26E71F7B8;
  return result;
}

uint64_t re::introspect_RenderGraphFillBufferNode(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RenderGraphFillBufferNode", (uint64_t (*)(re::internal *))re::allocInfo_RenderGraphFillBufferNode, (re::IntrospectionBase *(*)(void))re::initInfo_RenderGraphFillBufferNode, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::RenderGraphFillBufferNode>, this);
}

void re::RenderGraphGenerateMipmapsNode::~RenderGraphGenerateMipmapsNode(id *this)
{
  re::RenderGraphNode::~RenderGraphNode(this);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::RenderGraphGenerateMipmapsNode::getGraphBuildValidationCode(re::RenderGraphGenerateMipmapsNode *this)
{
  return 0x215010105886826FLL;
}

void re::RenderGraphTargetCopyNode::~RenderGraphTargetCopyNode(id *this)
{
  re::RenderGraphNode::~RenderGraphNode(this);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::RenderGraphTargetCopyNode::getGraphBuildValidationCode(re::RenderGraphTargetCopyNode *this)
{
  return 0x7DE3B33C6D8885D1;
}

void re::RenderGraphCopyEntityAttributeBufferNode::~RenderGraphCopyEntityAttributeBufferNode(id *this)
{
  re::StringID::destroyString((re::StringID *)(this + 33));
  re::RenderGraphNode::~RenderGraphNode(this);
}

{
  uint64_t vars8;

  re::StringID::destroyString((re::StringID *)(this + 33));
  re::RenderGraphNode::~RenderGraphNode(this);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::RenderGraphCopyEntityAttributeBufferNode::getGraphBuildValidationCode(re::RenderGraphCopyEntityAttributeBufferNode *this)
{
  return 0x66AC48B8EE54D601;
}

void re::RenderGraphSynchronizeTargetNode::~RenderGraphSynchronizeTargetNode(id *this)
{
  re::RenderGraphNode::~RenderGraphNode(this);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::RenderGraphSynchronizeTargetNode::getGraphBuildValidationCode(re::RenderGraphSynchronizeTargetNode *this)
{
  return 0x5CA152EF2BBAE5C4;
}

void re::RenderGraphSynchronizeBufferNode::~RenderGraphSynchronizeBufferNode(id *this)
{
  re::RenderGraphNode::~RenderGraphNode(this);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::RenderGraphSynchronizeBufferNode::getGraphBuildValidationCode(re::RenderGraphSynchronizeBufferNode *this)
{
  return 0x294FCB85553B53F5;
}

void re::RenderGraphFillBufferNode::~RenderGraphFillBufferNode(id *this)
{
  re::RenderGraphNode::~RenderGraphNode(this);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::RenderGraphFillBufferNode::getGraphBuildValidationCode(re::RenderGraphFillBufferNode *this)
{
  return 0x226F56FC52D0A374;
}

void re::HashTable<int,re::AttributeTable const*,re::Hash<int>,re::EqualTo<int>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v22, 0, 36);
      *(void *)&v22[36] = 0x7FFFFFFFLL;
      re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::init((uint64_t)v22, v4, a2);
      long long v5 = *(_OWORD *)a1;
      *(void *)a1 = *(void *)v22;
      uint64_t v6 = *(void *)(a1 + 16);
      long long v7 = *(_OWORD *)&v22[8];
      *(_OWORD *)BOOL v22 = v5;
      *(void *)&unsigned char v22[16] = v6;
      *(_OWORD *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v7;
      long long v9 = *(_OWORD *)&v22[24];
      *(_OWORD *)&v22[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v22[32];
      *(_OWORD *)(a1 + 24) = v9;
      uint64_t v10 = v8;
      if (v8)
      {
        int v11 = DWORD1(v9);
        uint64_t v12 = v7;
        uint64_t v13 = (void *)(v6 + 16);
        do
        {
          if ((*(_DWORD *)(v13 - 1) & 0x80000000) != 0)
          {
            unint64_t v14 = *(v13 - 2);
            unint64_t v15 = *(unsigned int *)(a1 + 24);
            unint64_t v16 = v14 % v15;
            uint64_t v17 = *(unsigned int *)(a1 + 36);
            if (v17 == 0x7FFFFFFF)
            {
              uint64_t v17 = *(unsigned int *)(a1 + 32);
              int v18 = v17;
              if (v17 == v15)
              {
                re::HashTable<int,re::AttributeTable const*,re::Hash<int>,re::EqualTo<int>,true,false>::setCapacity(a1, (2 * v11));
                unint64_t v16 = v14 % *(unsigned int *)(a1 + 24);
                int v18 = *(_DWORD *)(a1 + 32);
                uint64_t v12 = *(void *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v18 + 1;
              uint64_t v19 = *(void *)(a1 + 16);
              int v20 = *(_DWORD *)(v19 + 24 * v17 + 8);
            }
            else
            {
              uint64_t v19 = *(void *)(a1 + 16);
              int v20 = *(_DWORD *)(v19 + 24 * v17 + 8);
              *(_DWORD *)(a1 + 3re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v20 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v19 + 24 * v17 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v20 | 0x80000000;
            *(_DWORD *)(*(void *)(a1 + 16) + 24 * v17 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 24 * v17 + 8) & 0x80000000 | *(_DWORD *)(v12 + 4 * v16);
            *(void *)(*(void *)(a1 + 16) + 24 * v17) = v14;
            *(_DWORD *)(*(void *)(a1 + 16) + 24 * v17 + 12) = *((_DWORD *)v13 - 1);
            *(void *)(*(void *)(a1 + 16) + 24 * v17 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = *v13;
            uint64_t v12 = *(void *)(a1 + 8);
            *(_DWORD *)(v12 + 4 * v1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v17;
            int v11 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 2re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v11;
          }
          v13 += 3;
          --v10;
        }
        while (v10);
      }
      re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)v22);
    }
  }
  else
  {
    if (a2) {
      signed int v21 = a2;
    }
    else {
      signed int v21 = 3;
    }
  }
}

void re::RenderGraphVisualProxyHighFidelityNode::setup(re::RenderGraphNode *this, re::RenderGraphBuilder *a2, re::RenderGraphDataStore *a3)
{
  *((_WORD *)a2 + 29re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 257;
  re::RenderGraphNode::setup(this, a2, a3);
}

void re::RenderGraphVisualProxyHighFidelityNode::execute(const char **this, re::RenderGraphContext *a2)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9D620, memory_order_acquire) & 1) == 0)
  {
    unint64_t v16 = (re::RenderGraphVisualProxyHighFidelityNode *)this;
    int v18 = __cxa_guard_acquire(&qword_26AF9D620);
    this = (const char **)v16;
    if (v18)
    {
      _MergedGlobals_480 = re::hashString(v16, v17);
      __cxa_guard_release(&qword_26AF9D620);
      this = (const char **)v16;
    }
  }
  unint64_t v3 = 0x9E3779B97F4A7C17;
  unint64_t v4 = _MergedGlobals_480;
  long long v5 = this[4];
  size_t v6 = strlen(v5);
  if (v6)
  {
    MurmurHash3_x64_128((uint64_t)v5, v6, 0, &v22);
    unint64_t v3 = ((v23 - 0x61C8864680B583E9 + (v22 << 6) + (v22 >> 2)) ^ v22) - 0x61C8864680B583E9;
  }
  uint64_t v7 = re::RenderGraphDataStore::tryGet<re::RenderGraphDataStoreWrapper<re::VisualProxyHighFidelityHandlerData>>(*((void *)a2 + 146), ((v4 >> 2) + (v4 << 6) + v3) ^ v4);
  if (v7)
  {
    uint64_t v8 = v7;
    if (*(void *)(v7 + 24))
    {
      re::RenderGraphContext::makeBlitCommandEncoder(a2, 0, &v19);
      uint64_t v9 = *(void *)(v8 + 24);
      if (v9)
      {
        uint64_t v10 = *(id **)(v8 + 40);
        int v11 = &v10[2 * v9];
        do
        {
          id v12 = objc_msgSend(*v10, sel_width);
          id v13 = objc_msgSend(*v10, sel_height);
          objc_msgSend(v10[1], sel_width);
          objc_msgSend(v10[1], sel_height);
          id v14 = *v10;
          id v15 = v10[1];
          v10 += 2;
          uint64_t v23 = 0;
          uint64_t v24 = 0;
          void v21[2] = 1;
          unint64_t v22 = 0;
          v21[0] = v12;
          v21[1] = v13;
          memset(v20, 0, sizeof(v20));
          [v19 copyFromTexture:v14 sourceSlice:0 sourceLevel:0 sourceOrigin:&v22 sourceSize:v21 toTexture:v15 destinationSlice:0 destinationLevel:0 destinationOrigin:v20];
        }
        while (v10 != v11);
      }
      re::RenderGraphContext::finishEncoding<re::mtl::BlitCommandEncoder &>((uint64_t)a2, &v19);
    }
  }
}

void re::RenderGraphVisualProxyHighFidelityNode::~RenderGraphVisualProxyHighFidelityNode(id *this)
{
  re::RenderGraphNode::~RenderGraphNode(this);
  JUMPOUT(0x237DBCBD0);
}

re::RenderGraphMeshNode *re::RenderGraphMeshNode::RenderGraphMeshNode(re::RenderGraphMeshNode *this, const char *a2)
{
  unint64_t v3 = re::RenderGraphNode::RenderGraphNode(this, a2);
  *((_DWORD *)v3 + 64) = 1;
  *(void *)unint64_t v3 = &unk_26E71F980;
  unint64_t v4 = (void *)((char *)v3 + 264);
  *(_OWORD *)((char *)v3 + 264) = 0u;
  *(_OWORD *)((char *)v3 + 280) = 0u;
  re::DynamicString::setCapacity(v4, 0);
  *((void *)this + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
  *((void *)this + 3re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  *((void *)this + 39) = 0;
  *((void *)this + 37) = 0;
  *((_DWORD *)this + 80) = 0;
  *((_WORD *)this + 16re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 2;
  *((unsigned char *)this + 33re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  return this;
}

void re::RenderGraphMeshNode::setup(re::RenderGraphMeshNode *this, _anonymous_namespace_ **a2, re::RenderGraphDataStore *a3)
{
  unint64_t v6 = *((void *)this + 34);
  if (v6) {
    unint64_t v7 = v6 >> 1;
  }
  else {
    unint64_t v7 = v6 >> 1;
  }
  if (!v7)
  {
    re::DynamicString::format((re::DynamicString *)"(%s): No material pass set", (re::DynamicString *)&v8, *((void *)this + 2));
    re::RenderGraphBuilder::addError(a2[82], (uint64_t)&v8);
    if (v8)
    {
      if (v9) {
        (*(void (**)(void))(*(void *)v8 + 40))();
      }
    }
  }
  re::RenderGraphNode::setup(this, (re::RenderGraphBuilder *)a2, a3);
}

uint64_t re::RenderGraphBuilder::addError(_anonymous_namespace_ *a1, uint64_t a2)
{
  v4.n128_u64[0] = 2000;
  v4.n128_u64[1] = (unint64_t)&re::GraphicsErrorCategory(void)::instance;
  uint64_t v5 = *(void *)a2;
  uint64_t v7 = *(void *)(a2 + 24);
  long long v6 = *(_OWORD *)(a2 + 8);
  *(void *)(a2 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0;
  *(void *)(a2 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  __n128 v2 = re::DynamicArray<re::DetailedError>::add(a1, &v4);
  uint64_t result = v5;
  if (v5)
  {
    if (v6) {
      return (*(uint64_t (**)(__n128))(*(void *)v5 + 40))(v2);
    }
  }
  return result;
}

void re::RenderGraphMeshNode::execute(re::RenderGraphMeshNode *this, float32x4_t *a2)
{
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v22, 5030, 0);
  uint64_t v4 = re::RenderGraphDataStore::get<re::CameraMatrices>(a2[73].i64[0], *(void *)(a2[2].i64[1] + 48));
  unint64_t v5 = re::Hash<re::DynamicString>::operator()((uint64_t)&v19, (uint64_t)this + 264);
  uint64_t v6 = re::RenderGraphDataStore::tryGet<re::MeshPassInfoData>(a2[73].i64[0], *(void *)(a2[2].i64[1] + 48));
  if (v6)
  {
    unint64_t v19 = v5;
    uint64_t v7 = re::HashTable<unsigned long,re::MeshPassInfo,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(*(void *)(v6 + 8), (uint64_t *)&v19);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v8 = re::RenderGraphDataStore::tryGet<re::MeshNodeFilterData>(a2[73].i64[0], *(void *)(a2[2].i64[1] + 48));
  if (v8)
  {
    unint64_t v9 = *(void *)(v8 + 8) & 0xFFFFFFFF00000000;
    uint64_t v10 = *(void *)(v8 + 8);
    if (!v7) {
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v10 = 0;
    unint64_t v9 = 0;
    if (!v7) {
      goto LABEL_12;
    }
  }
  unint64_t v19 = v7;
  char v20 = 0;
  int v21 = 65280;
  int v11 = (unsigned char *)(v9 | v10);
  char v12 = *((unsigned char *)this + 336);
  v18[0] = 0;
  char v13 = *((unsigned char *)this + 337);
  if (*((unsigned char *)this + 272)) {
    id v14 = (const char *)*((void *)this + 35);
  }
  else {
    id v14 = (char *)this + 273;
  }
  uint64_t v15 = *((void *)this + 39);
  v16[0] = *((void *)this + 41);
  v16[1] = v15;
  char v17 = 0;
  re::RenderGraphMeshNodeBase::sortAndDrawMeshPartsInternal(this, a2, (uint64_t)&v19, (re::DrawTable *)1, v11, 0, v4, v12, v18, v13, v14, (uint64_t)v16, 0);
LABEL_12:
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v22);
}

void re::RenderGraphMultiPassMeshNode::configure(re::RenderGraphMultiPassMeshNode *this, const char *a2, const char *a3, const char **a4)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9D728, memory_order_acquire) & 1) == 0) {
    goto LABEL_72;
  }
  while (1)
  {
    uint64_t v48 = *((unsigned int *)this + 74);
    uint64_t v43 = a3;
    id v44 = (re::RenderFrame *)a4;
    uint64_t v42 = a2;
    uint64_t v8 = 0;
    if (v48)
    {
      unint64_t v9 = (int *)(*((void *)this + 35) + 8);
      while (1)
      {
        int v10 = *v9;
        v9 += 56;
        if (v10 < 0) {
          break;
        }
        if (v48 == ++v8)
        {
          LODWORD(vre::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *((_DWORD *)this + 74);
          break;
        }
      }
    }
    if (v48 == v8) {
      break;
    }
    uint64_t v11 = v8;
    unint64_t v45 = this;
    while (1)
    {
      uint64_t v12 = *((void *)this + 35);
      unint64_t v46 = (unsigned char *)(v12 + 224 * v11 + 217);
      if (!*v46)
      {
        this = (re::RenderGraphMultiPassMeshNode *)*(unsigned int *)(v12 + 224 * v11 + 200);
        if (this)
        {
          uint64_t v13 = 0;
          id v14 = (int *)(*(void *)(v12 + 224 * v11 + 184) + 8);
          while (1)
          {
            int v15 = *v14;
            v14 += 14;
            if (v15 < 0) {
              break;
            }
            if (this == (re::RenderGraphMultiPassMeshNode *)++v13)
            {
              LODWORD(v13) = *(_DWORD *)(v12 + 224 * v11 + 200);
              break;
            }
          }
        }
        else
        {
          LODWORD(v13) = 0;
        }
        if (this == v13)
        {
LABEL_30:
          int v50 = 0;
        }
        else
        {
          uint64_t v16 = v13;
          uint64_t v17 = *(void *)(v12 + 224 * v11 + 184);
          while (1)
          {
            int v18 = (*(unsigned char *)(v17 + 56 * v16 + 24) & 1) != 0
                ? *(const char **)(v17 + 56 * v16 + 32)
                : (const char *)(v17 + 9 + 56 * v16 + 16);
            if (!strcmp("Default", v18)) {
              break;
            }
            if (this <= (int)v13 + 1) {
              int v19 = v13 + 1;
            }
            else {
              int v19 = (int)this;
            }
            while (1)
            {
              uint64_t v16 = (v13 + 1);
              if (v19 - 1 == v13) {
                break;
              }
              LODWORD(v13) = v13 + 1;
              int v20 = v16;
              if ((*(_DWORD *)(v17 + 56 * v16 + 8) & 0x80000000) != 0) {
                goto LABEL_29;
              }
            }
            int v20 = v19;
LABEL_29:
            LODWORD(v13) = v20;
            if (this == v20) {
              goto LABEL_30;
            }
          }
          int v21 = 16843009 * *(unsigned __int8 *)(v17 + 56 * v16 + 48);
          int v50 = 1;
          *unint64_t v46 = 1;
          *(_DWORD *)(v12 + 224 * v11 + 21re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v21;
        }
        a3 = 0;
        if (this)
        {
          unint64_t v22 = (int *)(*(void *)(v12 + 224 * v11 + 184) + 8);
          while (1)
          {
            int v23 = *v22;
            v22 += 14;
            if (v23 < 0) {
              break;
            }
            if (this == (re::RenderGraphMultiPassMeshNode *)++a3)
            {
              a3 = (const char *)this;
              break;
            }
          }
        }
        if (this != a3) {
          break;
        }
      }
LABEL_61:
      this = v45;
      unsigned int v39 = *((_DWORD *)v45 + 74);
      if (v39 <= (int)v8 + 1) {
        unsigned int v39 = v8 + 1;
      }
      while (1)
      {
        uint64_t v11 = (v8 + 1);
        if (v39 - 1 == v8) {
          break;
        }
        LODWORD(vre::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v8 + 1;
        unsigned int v40 = v11;
        if ((*(_DWORD *)(*((void *)v45 + 35) + 224 * v11 + 8) & 0x80000000) != 0) {
          goto LABEL_67;
        }
      }
      unsigned int v40 = v39;
LABEL_67:
      LODWORD(vre::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v40;
      if (v48 == v40) {
        goto LABEL_68;
      }
    }
    unint64_t v24 = a3;
    uint64_t v25 = v12 + 224 * v11;
    uint64_t v47 = v25 + 218;
    uint64_t v26 = *(void *)(v25 + 184);
    uint64_t v27 = (unsigned int *)qword_26AF9D8C8;
    int v49 = v50;
    uint64_t v51 = this;
    while (1)
    {
      a2 = (const char *)*v27;
      if (a2) {
        break;
      }
LABEL_53:
      if (this <= (int)a3 + 1) {
        unint64_t v37 = (a3 + 1);
      }
      else {
        unint64_t v37 = this;
      }
      while (1)
      {
        unint64_t v24 = (a3 + 1);
        if (v37 - 1 == a3) {
          break;
        }
        LODWORD(a3) = a3 + 1;
        long long v38 = (const char *)v24;
        if ((*(_DWORD *)(v26 + 56 * v24 + 8) & 0x80000000) != 0) {
          goto LABEL_60;
        }
      }
      long long v38 = (const char *)v37;
LABEL_60:
      a3 = v38;
      if (this == v38) {
        goto LABEL_61;
      }
    }
    char v52 = (unsigned char *)(v26 + 56 * v24 + 48);
    uint64_t v53 = v27;
    unint64_t v28 = (const char ***)*((void *)v27 + 1);
    uint64_t v29 = 56 * v24;
    int v30 = (unsigned char *)(v26 + v29 + 24);
    uint64_t v31 = (const char **)(v26 + v29 + 32);
    uint64_t v32 = v26 + 9 + v29 + 16;
    while (1)
    {
      a4 = *v28;
      if (*(_DWORD *)*v28 == 1)
      {
        uint64_t v33 = (const char *)v32;
        if (*v30) {
          uint64_t v33 = *v31;
        }
        if (!strcmp(a4[2], v33)) {
          break;
        }
      }
      ++v28;
      if (!--a2)
      {
        LODWORD(this) = v51;
        uint64_t v27 = v53;
        goto LABEL_53;
      }
    }
    if (v49)
    {
      int v35 = v50;
      this = v51;
    }
    else
    {
      int v35 = 1;
      this = v51;
      if (!v50) {
        *unint64_t v46 = 1;
      }
    }
    uint64_t v36 = __clz(__rbit32(*((unsigned __int8 *)a4 + 8)));
    if (v36 < 4)
    {
      *(unsigned char *)(v47 + v3re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = *v52;
      uint64_t v27 = (unsigned int *)qword_26AF9D8C8;
      int v49 = 1;
      int v50 = v35;
      goto LABEL_53;
    }
    re::internal::assertLog((re::internal *)6, v34, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < N", "operator[]", 234, v36, 4);
    _os_crash();
    __break(1u);
LABEL_72:
    if (__cxa_guard_acquire(&qword_26AF9D728))
    {
      re::introspect_MeshPassFilterFlags(0, v41);
      __cxa_guard_release(&qword_26AF9D728);
    }
  }
LABEL_68:
  re::RenderGraphNode::configure(this, v42, v43, v44);
}

void re::RenderGraphMultiPassMeshNode::setup(re::RenderGraphMultiPassMeshNode *this, _anonymous_namespace_ **a2, re::RenderGraphDataStore *a3)
{
  if (!*((_DWORD *)this + 73))
  {
    re::DynamicString::format((re::DynamicString *)"(%s): No material passes", (re::DynamicString *)&v6, *((void *)this + 2));
    re::RenderGraphBuilder::addError(a2[82], (uint64_t)&v6);
    if (v6)
    {
      if (v7) {
        (*(void (**)(void))(*(void *)v6 + 40))();
      }
    }
  }
  re::RenderGraphNode::setup(this, (re::RenderGraphBuilder *)a2, a3);
}

void re::RenderGraphMultiPassMeshNode::execute(re::RenderGraphMultiPassMeshNode *this, float32x4_t *a2)
{
  uint64_t v79 = *MEMORY[0x263EF8340];
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v73, 5030, 0);
  uint64_t v4 = *(uint64_t **)(a2->i64[0] + 24);
  uint64_t v5 = re::RenderGraphDataStore::get<re::CameraMatrices>(a2[73].i64[0], *(void *)(a2[2].i64[1] + 48));
  uint64_t v67 = re::RenderGraphDataStore::tryGet<re::MeshPassInfoData>(a2[73].i64[0], *(void *)(a2[2].i64[1] + 48));
  if (v67)
  {
    unint64_t v6 = 0x9E3779B97F4A7C17;
    char v7 = *(const char **)(re::RenderGraphDataStore::get<re::SceneScope>(a2[73].i64[0], *(void *)(a2[2].i64[1] + 48))
                        + 8);
    size_t v8 = strlen(v7);
    if (v8)
    {
      MurmurHash3_x64_128((uint64_t)v7, v8, 0, (unint64_t *)&v74);
      unint64_t v6 = ((v75 - 0x61C8864680B583E9 + ((void)v74 << 6) + ((unint64_t)v74 >> 2)) ^ (unint64_t)v74)
         - 0x61C8864680B583E9;
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9D638, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_26AF9D638))
    {
      qword_26AF9D630 = re::hashString((re *)"RenderGraphDataPipeData", v61);
      __cxa_guard_release(&qword_26AF9D638);
    }
    uint64_t v9 = re::RenderGraphDataStore::tryGet<re::MeshSortingCollection>(a2[73].i64[0], (v6 + (qword_26AF9D630 << 6) + ((unint64_t)qword_26AF9D630 >> 2)) ^ qword_26AF9D630);
    if (v9)
    {
      if (*(unsigned char *)(v9 + 192)) {
        char v10 = 3;
      }
      else {
        char v10 = 1;
      }
      char v11 = v10 | (4 * (*(_DWORD *)(v9 + 172) != 0)) | (8 * *(unsigned char *)(v9 + 193));
    }
    else
    {
      char v11 = 1;
    }
    char v69 = v11;
    uint64_t v12 = *((void *)this + 46);
    if (v12)
    {
      unsigned __int8 v13 = 0;
      id v14 = (char *)*((void *)this + 48);
      do
      {
        char v15 = *v14++;
        v13 |= v15;
        --v12;
      }
      while (v12);
    }
    else
    {
      unsigned __int8 v13 = 0;
    }
    uint64_t v16 = *((void *)this + 51);
    int v62 = (re::MeshSortingCollection *)v9;
    char v17 = 0;
    if (v16)
    {
      int v18 = (char *)*((void *)this + 53);
      do
      {
        char v19 = *v18++;
        v17 |= v19;
        --v16;
      }
      while (v16);
    }
    uint64_t v78 = 0;
    unint64_t v75 = 0;
    double v76 = 0;
    int v77 = 0;
    uint64_t v74 = v4;
    re::DynamicArray<re::FilteredMeshPass>::setCapacity(&v74, 0);
    ++v77;
    uint64_t v21 = *((unsigned int *)this + 74);
    uint64_t v63 = v5;
    long long v64 = a2;
    uint64_t v22 = 0;
    if (v21)
    {
      int v23 = (int *)(*((void *)this + 35) + 8);
      while (1)
      {
        int v24 = *v23;
        v23 += 56;
        if (v24 < 0) {
          break;
        }
        if (v21 == ++v22)
        {
          LODWORD(v22) = *((_DWORD *)this + 74);
          break;
        }
      }
    }
    char v25 = v69;
    if (v21 != v22)
    {
      uint64_t v26 = v22;
      int v27 = v13;
      int v68 = *((_DWORD *)this + 74);
      do
      {
        uint64_t v28 = *((void *)this + 35);
        uint64_t v29 = v28 + 224 * v26;
        uint64_t v30 = *(void *)(v29 + 64);
        if (v30) {
          BOOL v31 = 0;
        }
        else {
          BOOL v31 = v27 == 0;
        }
        if (v31)
        {
          unsigned __int8 v32 = -1;
        }
        else
        {
          unsigned __int8 v32 = v13;
          if (v30)
          {
            uint64_t v33 = *(char **)(v29 + 80);
            unsigned __int8 v32 = v13;
            do
            {
              char v34 = *v33++;
              v32 |= v34;
              --v30;
            }
            while (v30);
          }
        }
        uint64_t v35 = v28 + 224 * v26;
        uint64_t v36 = *(void *)(v35 + 104);
        char v37 = v17;
        if (v36)
        {
          long long v38 = *(char **)(v35 + 120);
          char v37 = v17;
          do
          {
            char v39 = *v38++;
            v37 |= v39;
            --v36;
          }
          while (v36);
        }
        if ((v32 & v25) != 0 && (v13 & v69) == v13)
        {
          v70[0] = re::Hash<re::DynamicString>::operator()((uint64_t)v70, v29 + 16);
          unsigned int v40 = (_anonymous_namespace_ *)re::HashTable<unsigned long,re::MeshPassInfo,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(*(void *)(v67 + 8), v70);
          if (v40)
          {
            uint64_t v41 = v40;
            uint64_t v42 = v28 + 224 * v26;
            int v43 = *(unsigned __int8 *)(v42 + 217);
            LODWORD(v2re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = v68;
            if (*(unsigned char *)(v42 + 217)) {
              int v66 = *(_DWORD *)(v28 + 224 * v26 + 218);
            }
            int v44 = *(unsigned __int8 *)(v28 + 224 * v26 + 216);
            unint64_t v45 = v76;
            if ((unint64_t)v76 >= v75)
            {
              unint64_t v46 = (unint64_t)v76 + 1;
              if (v75 < (unint64_t)v76 + 1)
              {
                int v65 = v43;
                if (v74)
                {
                  unint64_t v47 = 2 * v75;
                  if (!v75) {
                    unint64_t v47 = 8;
                  }
                  if (v47 <= v46) {
                    unint64_t v48 = (unint64_t)v76 + 1;
                  }
                  else {
                    unint64_t v48 = v47;
                  }
                  re::DynamicArray<re::FilteredMeshPass>::setCapacity(&v74, v48);
                }
                else
                {
                  re::DynamicArray<re::FilteredMeshPass>::setCapacity(&v74, v46);
                  ++v77;
                }
                LODWORD(v2re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = v68;
                int v43 = v65;
              }
              unint64_t v45 = v76;
            }
            uint64_t v49 = v78;
            uint64_t v50 = v78 + 24 * (void)v45;
            *(void *)uint64_t v50 = v41;
            *(unsigned char *)(v50 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v43;
            if (v43) {
              *(_DWORD *)(v49 + 24 * (void)v45 + 9) = v66;
            }
            int v27 = v13;
            char v25 = v69;
            *(_DWORD *)(v49 + 24 * (void)v45 + 13) = v13 | (unsigned __int16)(v32 << 8) | ((v37 & v69) << 16) | (v44 << 24);
            double v76 = (re::DrawTable *)((char *)v45 + 1);
            ++v77;
          }
          else
          {
            char v25 = v69;
            LODWORD(v2re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = v68;
            int v27 = v13;
          }
        }
        unsigned int v51 = *((_DWORD *)this + 74);
        if (v51 <= (int)v22 + 1) {
          unsigned int v51 = v22 + 1;
        }
        while (1)
        {
          uint64_t v26 = (v22 + 1);
          if (v51 - 1 == v22) {
            break;
          }
          LODWORD(v22) = v22 + 1;
          unsigned int v52 = v26;
          if ((*(_DWORD *)(*((void *)this + 35) + 224 * v26 + 8) & 0x80000000) != 0) {
            goto LABEL_65;
          }
        }
        unsigned int v52 = v51;
LABEL_65:
        LODWORD(v22) = v52;
      }
      while (v21 != v52);
    }
    uint64_t v53 = v76;
    if (v76)
    {
      uint64_t v54 = re::RenderGraphDataStore::tryGet<re::MeshNodeFilterData>(v64[73].i64[0], *(void *)(v64[2].i64[1] + 48));
      if (v54) {
        uint64_t v55 = *(unsigned char **)(v54 + 8);
      }
      else {
        uint64_t v55 = 0;
      }
      char v56 = *((unsigned char *)this + 432);
      v72[0] = 0;
      char v57 = *((unsigned char *)this + 433);
      long long v58 = (const char *)*((void *)this + 2);
      uint64_t v59 = *((void *)this + 41);
      v70[0] = *((void *)this + 43);
      v70[1] = v59;
      char v71 = *((unsigned char *)this + 434);
      re::RenderGraphMeshNodeBase::sortAndDrawMeshPartsInternal(this, v64, v78, v53, v55, 0, v63, v56, v72, v57, v58, (uint64_t)v70, 0);
      v20.n128_f64[0] = re::RenderGraphMeshNodeBase::drawDebugSortPoints(this, (const re::RenderGraphContext *)v64, v62, v60);
    }
    if (v74 && v78) {
      (*(void (**)(uint64_t *, __n128))(*v74 + 40))(v74, v20);
    }
  }
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v73);
}

void re::RenderGraphMultiViewMeshNode::setup(re::RenderGraphMultiViewMeshNode *this, _anonymous_namespace_ **a2, re::RenderGraphDataStore *a3)
{
  unint64_t v6 = *((void *)this + 34);
  if (v6) {
    unint64_t v7 = v6 >> 1;
  }
  else {
    unint64_t v7 = v6 >> 1;
  }
  if (!v7)
  {
    re::DynamicString::format((re::DynamicString *)"(%s): No material pass set", (re::DynamicString *)&v8, *((void *)this + 2));
    re::RenderGraphBuilder::addError(a2[82], (uint64_t)&v8);
    if (v8)
    {
      if (v9) {
        (*(void (**)(void))(*(void *)v8 + 40))();
      }
    }
  }
  re::RenderGraphNode::setup(this, (re::RenderGraphBuilder *)a2, a3);
}

void re::RenderGraphMultiViewMeshNode::execute(re::RenderGraphMultiViewMeshNode *this, float32x4_t *a2)
{
  uint64_t v70 = *MEMORY[0x263EF8340];
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v55, 5097, 0);
  uint64_t v43 = re::RenderGraphDataStore::get<re::CameraArrayData>(a2[73].i64[0], *(void *)(a2[2].i64[1] + 48));
  int v44 = a2;
  uint64_t v3 = a2[73].i64[0];
  uint64_t v4 = *(void *)(a2[2].i64[1] + 48);
  unint64_t v5 = (unint64_t)"N2re26MultiViewCullModeArrayDataE";
  if (((unint64_t)"N2re26MultiViewCullModeArrayDataE" & 0x8000000000000000) != 0)
  {
    unint64_t v6 = (unsigned __int8 *)((unint64_t)"N2re26MultiViewCullModeArrayDataE" & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v7 = 5381;
    do
    {
      unint64_t v5 = v7;
      unsigned int v8 = *v6++;
      uint64_t v7 = (33 * v7) ^ v8;
    }
    while (v8);
  }
  unsigned int v9 = 0x7FFFFFFF;
  if (*(void *)(v3 + 64))
  {
    unint64_t v10 = (v4 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9) ^ v5;
    unsigned int v11 = *(_DWORD *)(*(void *)(v3 + 72) + 4 * (v10 % *(unsigned int *)(v3 + 88)));
    if (v11 != 0x7FFFFFFF)
    {
      uint64_t v12 = *(void *)(v3 + 80);
      unsigned int v9 = *(_DWORD *)(*(void *)(v3 + 72) + 4 * (v10 % *(unsigned int *)(v3 + 88)));
      if (*(void *)(v12 + 24 * v11 + 8) != v10)
      {
        while (1)
        {
          unsigned int v9 = *(_DWORD *)(v12 + 24 * *(unsigned int *)(*(void *)(v3 + 72) + 4 * (v10 % *(unsigned int *)(v3 + 88)))) & 0x7FFFFFFF;
          if (v9 == 0x7FFFFFFF) {
            break;
          }
          if (*(void *)(v12 + 24 * v9 + 8) == v10) {
            goto LABEL_11;
          }
        }
        unsigned int v9 = 0x7FFFFFFF;
      }
    }
  }
LABEL_11:
  uint64_t v47 = *(void *)(*(void *)(v3 + 80) + 24 * v9 + 16);
  uint64_t v48 = re::RenderGraphDataStore::get<re::CameraMatricesArray>(v3, v4);
  uint64_t v13 = re::RenderGraphDataStore::tryGet<re::MeshPassInfoArrayData>(a2[73].i64[0], *(void *)(a2[2].i64[1] + 48));
  uint64_t v14 = a2[73].i64[0];
  uint64_t v15 = *(void *)(a2[2].i64[1] + 48);
  unint64_t v16 = (unint64_t)"N2re17ViewportArrayDataE";
  if (((unint64_t)"N2re17ViewportArrayDataE" & 0x8000000000000000) != 0)
  {
    char v17 = (unsigned __int8 *)((unint64_t)"N2re17ViewportArrayDataE" & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v18 = 5381;
    do
    {
      unint64_t v16 = v18;
      unsigned int v19 = *v17++;
      uint64_t v18 = (33 * v18) ^ v19;
    }
    while (v19);
  }
  unsigned int v20 = 0x7FFFFFFF;
  if (*(void *)(v14 + 64))
  {
    unint64_t v21 = (v15 - 0x61C8864680B583E9 + (v16 << 6) + (v16 >> 2)) ^ v16;
    unsigned int v22 = *(_DWORD *)(*(void *)(v14 + 72) + 4 * (v21 % *(unsigned int *)(v14 + 88)));
    if (v22 != 0x7FFFFFFF)
    {
      uint64_t v23 = *(void *)(v14 + 80);
      unsigned int v20 = *(_DWORD *)(*(void *)(v14 + 72) + 4 * (v21 % *(unsigned int *)(v14 + 88)));
      if (*(void *)(v23 + 24 * v22 + 8) != v21)
      {
        while (1)
        {
          unsigned int v20 = *(_DWORD *)(v23
                          + 24 * *(unsigned int *)(*(void *)(v14 + 72) + 4 * (v21 % *(unsigned int *)(v14 + 88)))) & 0x7FFFFFFF;
          if (v20 == 0x7FFFFFFF) {
            break;
          }
          if (*(void *)(v23 + 24 * v20 + 8) == v21) {
            goto LABEL_21;
          }
        }
        unsigned int v20 = 0x7FFFFFFF;
      }
    }
  }
LABEL_21:
  uint64_t v24 = *(void *)(*(void *)(v14 + 80) + 24 * v20 + 16);
  uint64_t v25 = re::RenderGraphDataStore::tryGet<re::MeshNodeFilterData>(v14, v15);
  if (v25)
  {
    unint64_t v26 = *(void *)(v25 + 8) & 0xFFFFFFFF00000000;
    uint64_t v27 = *(void *)(v25 + 8);
  }
  else
  {
    uint64_t v27 = 0;
    unint64_t v26 = 0;
  }
  unint64_t v45 = re::Hash<re::DynamicString>::operator()((uint64_t)&v65, (uint64_t)this + 264);
  if (*(void *)(v48 + 24))
  {
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    unint64_t v31 = 0;
    uint64_t v42 = (unsigned char *)(v26 | v27);
    uint64_t v32 = 473;
    while (1)
    {
      unint64_t v33 = *(void *)(v47 + 16);
      if (v33 <= v31) {
        break;
      }
      unint64_t v33 = *(void *)(v24 + 16);
      if (v33 <= v31) {
        goto LABEL_40;
      }
      if (v13)
      {
        unint64_t v33 = *(void *)(v13 + 16);
        if (v33 <= v31) {
          goto LABEL_41;
        }
        uint64_t v34 = *(void *)(v48 + 40);
        unint64_t v26 = *(void *)(v47 + 24);
        uint64_t v35 = *(void *)(v24 + 24);
        uint64_t v36 = *(void *)(v13 + 24);
        *(void *)&long long v65 = v45;
        uint64_t v37 = re::HashTable<unsigned long,re::MeshPassInfo,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(*(void *)(v36 + 8 * v30 + 8), (uint64_t *)&v65);
        if (v37)
        {
          uint64_t v52 = v37;
          char v53 = 0;
          int v54 = 65280;
          char v38 = *((unsigned char *)this + 336);
          v51[0] = *(unsigned char *)(v26 + v30);
          if (v51[0]) {
            v51[1] = *(unsigned char *)(v26 + v30 + 1);
          }
          char v39 = (char *)this + 273;
          if (*((unsigned char *)this + 272)) {
            char v39 = (const char *)*((void *)this + 35);
          }
          char v40 = *((unsigned char *)this + 337);
          uint64_t v41 = *((void *)this + 39);
          v49[0] = *((void *)this + 41);
          v49[1] = v41;
          char v50 = 0;
          unint64_t v26 = *(void *)(v43 + 16);
          if (v26 <= v31) {
            goto LABEL_42;
          }
          re::RenderGraphMeshNodeBase::sortAndDrawMeshPartsInternal(this, v44, (uint64_t)&v52, (re::DrawTable *)1, v42, v35 + v29, v34 + v28, v38, v51, v40, v39, (uint64_t)v49, *(unsigned char *)(*(void *)(v43 + 24) + v32));
        }
      }
      ++v31;
      v32 += 528;
      v30 += 2;
      v29 += 32;
      v28 += 144;
      if (*(void *)(v48 + 24) <= v31) {
        goto LABEL_38;
      }
    }
    uint64_t v52 = 0;
    long long v68 = 0u;
    long long v69 = 0u;
    long long v66 = 0u;
    long long v67 = 0u;
    long long v65 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v57 = 136315906;
    long long v58 = "operator[]";
    __int16 v59 = 1024;
    int v60 = 476;
    __int16 v61 = 2048;
    unint64_t v62 = v31;
    __int16 v63 = 2048;
    unint64_t v64 = v33;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_40:
    uint64_t v52 = 0;
    long long v68 = 0u;
    long long v69 = 0u;
    long long v66 = 0u;
    long long v67 = 0u;
    long long v65 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v57 = 136315906;
    long long v58 = "operator[]";
    __int16 v59 = 1024;
    int v60 = 476;
    __int16 v61 = 2048;
    unint64_t v62 = v31;
    __int16 v63 = 2048;
    unint64_t v64 = v33;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_41:
    uint64_t v52 = 0;
    long long v68 = 0u;
    long long v69 = 0u;
    long long v66 = 0u;
    long long v67 = 0u;
    long long v65 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v57 = 136315906;
    long long v58 = "operator[]";
    __int16 v59 = 1024;
    int v60 = 476;
    __int16 v61 = 2048;
    unint64_t v62 = v31;
    __int16 v63 = 2048;
    unint64_t v64 = v33;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_42:
    uint64_t v56 = 0;
    long long v68 = 0u;
    long long v69 = 0u;
    long long v66 = 0u;
    long long v67 = 0u;
    long long v65 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v57 = 136315906;
    long long v58 = "operator[]";
    __int16 v59 = 1024;
    int v60 = 476;
    __int16 v61 = 2048;
    unint64_t v62 = v31;
    __int16 v63 = 2048;
    unint64_t v64 = v26;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
LABEL_38:
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v55);
}

void re::RenderGraphTextNode::execute(re::RenderGraphTextNode *this, re::RenderGraphContext *a2)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v44, 5032, 0);
  uint64_t v3 = re::RenderGraphDataStore::get<re::SceneScope>(*((void *)a2 + 146), *(void *)(*((void *)a2 + 5) + 48));
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9D648, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9D648))
  {
    qword_26AF9D640 = re::hashString((re *)"TextInfo", v32);
    __cxa_guard_release(&qword_26AF9D648);
  }
  unint64_t v4 = qword_26AF9D640;
  unint64_t v5 = *(const char **)(v3 + 8);
  size_t v6 = strlen(v5);
  if (v6)
  {
    MurmurHash3_x64_128((uint64_t)v5, v6, 0, (unint64_t *)v45);
    unint64_t v7 = ((v45[1] - 0x61C8864680B583E9 + (v45[0] << 6) + ((unint64_t)v45[0] >> 2)) ^ v45[0])
       - 0x61C8864680B583E9;
  }
  else
  {
    unint64_t v7 = 0x9E3779B97F4A7C17;
  }
  unint64_t v8 = ((v4 >> 2) + (v4 << 6) + v7) ^ v4;
  uint64_t v9 = *((void *)a2 + 146);
  unint64_t v10 = (unint64_t)"N2re27RenderGraphDataStoreWrapperINS_8TextInfoEEE";
  if (((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_8TextInfoEEE" & 0x8000000000000000) != 0)
  {
    unsigned int v11 = (unsigned __int8 *)((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_8TextInfoEEE" & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v12 = 5381;
    do
    {
      unint64_t v10 = v12;
      unsigned int v13 = *v11++;
      uint64_t v12 = (33 * v12) ^ v13;
    }
    while (v13);
  }
  v45[0] = (v8 - 0x61C8864680B583E9 + (v10 << 6) + (v10 >> 2)) ^ v10;
  uint64_t v14 = (uint64_t *)re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(v9 + 16, v45);
  if (v14)
  {
    uint64_t v15 = *v14;
    if (*v14)
    {
      uint64_t v16 = re::DrawingManager::currentCommandBuffer(*(re::DrawingManager **)(*((void *)a2 + 1) + 104));
      re::RenderGraphContext::acquireManagedRenderEncoder(v43, a2, v16, 0);
      uint64_t v33 = re::RenderGraphDataStore::get<re::CameraMatrices>(*((void *)a2 + 146), *(void *)(*((void *)a2 + 5) + 48));
      uint64_t v38 = re::RenderGraphDataStore::tryGet<re::StencilInfoData>(*((void *)a2 + 146), *(void *)(*((void *)a2 + 5) + 48));
      uint64_t v17 = re::RenderGraphDataStore::tryGet<re::ViewportPercentData>(*((void *)a2 + 146), *(void *)(*((void *)a2 + 5) + 48));
      if (v17) {
        unsigned __int8 v18 = *(unsigned char *)(v17 + 65) != 0;
      }
      else {
        unsigned __int8 v18 = 0;
      }
      uint64_t v34 = v15;
      uint64_t v36 = *(void *)(v15 + 16);
      if (v36)
      {
        uint64_t v35 = *(void *)(v36 + 40);
        if (v35)
        {
          unint64_t v19 = 0;
          do
          {
            unint64_t v37 = v19;
            uint64_t v20 = re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[](v36, v19);
            uint64_t v21 = *(void *)(v20 + 16);
            if (v21)
            {
              uint64_t v22 = *(void *)(v20 + 32);
              uint64_t v23 = v21 << 7;
              do
              {
                uint64_t v24 = *(re::TextManager **)(*((void *)a2 + 1) + 72);
                re::RenderGraphContext::rtInfo(a2, *((re::RenderGraphNodeBase **)a2 + 5), (uint64_t)v45);
                if (v38)
                {
                  long long v25 = *(_OWORD *)(v38 + 8);
                  char v42 = *(unsigned char *)(v38 + 24);
                  long long v41 = v25;
                }
                else
                {
                  *(void *)&long long v41 = 134217472;
                  *((void *)&v41 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 134217472;
                  char v42 = 0;
                }
                *(void *)&long long v53 = v33 + 8;
                *((void *)&v53 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = v33 + 48;
                re::TextManager::render(v24, (unsigned int *)v45, (uint64_t)&v41, (uint64_t)v43, *(void *)a2, v53, (unsigned char *)(v33 + 128), v22, v18, 1u);
                v22 += 128;
                v23 -= 128;
              }
              while (v23);
            }
            unint64_t v19 = v37 + 1;
          }
          while (v37 + 1 != v35);
        }
      }
      uint64_t v26 = *(void *)(v34 + 8);
      if (v26)
      {
        uint64_t v27 = *(void *)(v26 + 40);
        if (v27)
        {
          for (unint64_t i = 0; i != v27; ++i)
          {
            uint64_t v29 = (uint64_t *)re::BucketArray<unsigned long,4ul>::operator[](v26, i);
            re::StringID::invalid((re::StringID *)v45);
            v45[2] = 0x3F8000003F800000;
            v45[3] = 0x3F8000003F800000;
            long long v46 = 0u;
            long long v47 = 0u;
            long long v49 = 0u;
            long long v50 = 0u;
            long long v48 = 0u;
            uint64_t v51 = *v29;
            uint64_t v30 = *(re::TextManager **)(*((void *)a2 + 1) + 72);
            re::RenderGraphContext::rtInfo(a2, *((re::RenderGraphNodeBase **)a2 + 5), (uint64_t)&v41);
            if (v38)
            {
              long long v31 = *(_OWORD *)(v38 + 8);
              char v40 = *(unsigned char *)(v38 + 24);
              long long v39 = v31;
            }
            else
            {
              *(void *)&long long v39 = 134217472;
              *((void *)&v39 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 134217472;
              char v40 = 0;
            }
            *((void *)&v54 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = v33 + 48;
            *(void *)&long long v54 = v33 + 8;
            re::TextManager::render(v30, (unsigned int *)&v41, (uint64_t)&v39, (uint64_t)v43, *(void *)a2, v54, (unsigned char *)(v33 + 128), (uint64_t)v45, v18, 1u);
            re::StringID::destroyString((re::StringID *)v45);
          }
        }
      }
      re::mtl::RenderCommandEncoder::~RenderCommandEncoder((re::mtl::RenderCommandEncoder *)v43);
    }
  }
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v44);
}

#error "233EA87D0: call analysis failed (funcsize=80)"

re::RenderGraphMaterialReplaceNode *re::RenderGraphMaterialReplaceNode::RenderGraphMaterialReplaceNode(re::RenderGraphMaterialReplaceNode *this, const char *a2)
{
  uint64_t v3 = re::RenderGraphNode::RenderGraphNode(this, a2);
  *((_DWORD *)v3 + 64) = 1;
  *(void *)uint64_t v3 = &unk_26E71FC50;
  unint64_t v4 = (void *)((char *)v3 + 296);
  *(_OWORD *)((char *)v3 + 264) = 0u;
  *(_OWORD *)((char *)v3 + 280) = 0u;
  *(_OWORD *)((char *)v3 + 29re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0u;
  *(_OWORD *)((char *)v3 + 312) = 0u;
  unint64_t v5 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v4, 0);
  *(_OWORD *)((char *)this + 32re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  re::DynamicString::setCapacity((void *)this + 41, 0);
  *((_WORD *)this + 180) = 2;
  return this;
}

void re::RenderGraphMaterialReplaceNode::configure(re::RenderGraphMaterialReplaceNode *this, const char *a2, const char *a3, re::RenderFrame *a4)
{
  uint64_t v8 = re::AssetHandle::asset<re::MaterialAsset>((re::RenderGraphMaterialReplaceNode *)((char *)this + 272));
  *((void *)this + 33) = v8;
  if (v8)
  {
    re::RenderGraphNode::configure(this, a2, a3, a4);
  }
}

void re::RenderGraphMaterialReplaceNode::execute(re::RenderGraphMaterialReplaceNode *this, float32x4_t *a2)
{
  uint64_t v67 = *MEMORY[0x263EF8340];
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v55, 5046, 0);
  uint64_t v4 = *(void *)(*((void *)this + 33) + 1664);
  uint64_t v5 = re::RenderGraphDataStore::get<re::CameraMatrices>(a2[73].i64[0], *(void *)(a2[2].i64[1] + 48));
  unint64_t v6 = re::Hash<re::DynamicString>::operator()((uint64_t)&v59, (uint64_t)this + 296);
  unint64_t v7 = (uint64_t *)re::RenderGraphDataStore::tryGet<re::MeshPassInfoData>(a2[73].i64[0], *(void *)(a2[2].i64[1] + 48));
  if (v7)
  {
    *(void *)&long long v59 = v6;
    unint64_t v7 = (uint64_t *)re::HashTable<unsigned long,re::MeshPassInfo,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(v7[1], (uint64_t *)&v59);
    uint64_t v8 = v7;
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v38 = v5;
  if (a2[83].i8[4])
  {
LABEL_49:
    unint64_t v7 = (uint64_t *)re::DrawCallRecorder::allocateDrawCallRecorderGroup((re::DrawCallRecorder *)&a2[83].u32[2], *((const char **)this + 2), "MaterialReplace");
    uint64_t v39 = (uint64_t)v7;
    if (!v8) {
      goto LABEL_47;
    }
  }
  else
  {
    uint64_t v39 = 0;
    if (!v8) {
      goto LABEL_47;
    }
  }
  uint64_t v9 = *(re::Allocator **)(a2->i64[0] + 24);
  uint64_t v56 = v8;
  char v57 = 0;
  int v58 = 65280;
  v54[0] = (uint64_t)&v56;
  v54[1] = 1;
  uint64_t v62 = 0;
  memset(v61, 0, sizeof(v61));
  long long v59 = 0u;
  long long v60 = 0u;
  uint64_t v63 = re::globalAllocators((re *)v7)[2];
  uint64_t v64 = 0;
  __int16 v65 = 0;
  char v66 = 0;
  re::FunctionBase<32ul,BOOL ()(re::MeshPartDrawContext const&)>::destroyCallable((uint64_t)v61 + 8);
  if (v41 >= 2)
  {
    *(void *)&v61[0] = 0;
    *(void *)&long long v60 = 0;
    long long v59 = 0uLL;
    DWORD2(v60) = 0;
    re::DynamicArray<re::MeshLodLevelInfo>::setCapacity(&v59, v41);
    if (v41)
    {
      char v10 = 0;
      unsigned int v11 = v43;
      uint64_t v12 = (uint64_t *)((char *)v43 + 12 * v41);
      do
      {
        while (1)
        {
          uint64_t v13 = re::BucketArray<re::MeshPartDrawContext,128ul>::operator[]((uint64_t)v8, *(unsigned int *)v11);
          if (!*(_WORD *)(v13 + 148) || *(unsigned char *)(v13 + 150) == 0) {
            break;
          }
          unsigned int v11 = (uint64_t *)((char *)v11 + 12);
          char v10 = 1;
          if (v11 == v12) {
            goto LABEL_19;
          }
        }
        re::DynamicArray<re::MeshLodLevelInfo>::add(&v59, v11);
        unsigned int v11 = (uint64_t *)((char *)v11 + 12);
      }
      while (v11 != v12);
      if ((v10 & 1) == 0) {
        goto LABEL_26;
      }
LABEL_19:
      if (v40[0])
      {
        if ((void)v59) {
          re::DynamicArray<re::MeshLodLevelInfo>::copy(v40, (uint64_t)&v59);
        }
        else {
          unint64_t v41 = 0;
        }
        LODWORD(v42) = v42 + 1;
      }
      else
      {
        if (!(void)v59) {
          goto LABEL_29;
        }
        v40[0] = (void *)v59;
        re::DynamicArray<re::MeshLodLevelInfo>::setCapacity(v40, v60);
        LODWORD(v42) = v42 + 1;
        re::DynamicArray<re::MeshLodLevelInfo>::copy(v40, (uint64_t)&v59);
      }
    }
LABEL_26:
    if ((void)v59 && *(void *)&v61[0]) {
      (*(void (**)(void))(*(void *)v59 + 40))();
    }
  }
LABEL_29:
  uint64_t v8 = (uint64_t *)(*(uint64_t (**)(re::Allocator *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 328, 8);
  re::DrawTable::DrawTable((re::DrawTable *)v8, v9, (v41 + 127) >> 7);
  re::RenderGraphMeshNodeBase::makeDrawCallsFromMeshParts(v54, (uint64_t)v43, v41, a2, (uint64_t)v8, v39);
  if (v40[0] && v43) {
    (*(void (**)(void))(*(void *)v40[0] + 40))();
  }
  unint64_t v15 = re::Hash<re::DynamicString>::operator()((uint64_t)&v59, (uint64_t)this + 328);
  uint64_t v16 = (re::RenderGraphContext *)v8[5];
  if (v16)
  {
    uint64_t v17 = v15;
    uint64_t v36 = this;
    unint64_t v37 = (re::RenderGraphContext *)a2;
    a2 = 0;
    __asm { FMOV            V8.2S, #1.0 }
    do
    {
      this = (re::RenderGraphMaterialReplaceNode *)re::BucketArray<re::DrawCall,128ul>::operator[]((uint64_t)v8, (unint64_t)a2);
      if (re::MaterialParameterTableLayers::getPrioritizedPassTechniqueMapping(*((re::MaterialParameterTableLayers **)this + 8), v6))
      {
        uint64_t v22 = (*(uint64_t (**)(re::Allocator *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 224, 16);
        *(_OWORD *)(v22 + 144) = 0u;
        *(_OWORD *)(v22 + 192) = 0u;
        *(_OWORD *)(v22 + 20re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
        *(_OWORD *)(v22 + 160) = 0u;
        *(_OWORD *)(v22 + 17re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0u;
        *(_OWORD *)(v22 + 112) = 0u;
        *(_OWORD *)(v22 + 12re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
        *(_OWORD *)(v22 + 80) = 0u;
        *(_OWORD *)(v22 + 9re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0u;
        *(_OWORD *)(v22 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
        *(_OWORD *)(v22 + 64) = 0u;
        *(_OWORD *)(v22 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0u;
        *(_OWORD *)(v22 + 32) = 0u;
        *(_OWORD *)uint64_t v22 = 0u;
        *(void *)(v22 + 152) = _D8;
        *(_DWORD *)(v22 + 160) = 1065353216;
        uint64_t v23 = (long long *)*((void *)this + 8);
        long long v24 = *v23;
        long long v25 = v23[1];
        long long v26 = v23[3];
        *(_OWORD *)(v22 + 32) = v23[2];
        *(_OWORD *)(v22 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v26;
        *(_OWORD *)uint64_t v22 = v24;
        *(_OWORD *)(v22 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v25;
        long long v28 = v23[5];
        long long v27 = v23[6];
        long long v29 = v23[4];
        *(_OWORD *)(v22 + 10re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(long long *)((char *)v23 + 108);
        *(_OWORD *)(v22 + 80) = v28;
        *(_OWORD *)(v22 + 9re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v27;
        *(_OWORD *)(v22 + 64) = v29;
        if (*((unsigned char *)v23 + 128))
        {
          *(unsigned char *)(v22 + 12re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 1;
          *(void *)(v22 + 13re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = *((void *)v23 + 17);
        }
        long long v30 = v23[9];
        *(void *)(v22 + 157) = *(void *)((char *)v23 + 157);
        *(_OWORD *)(v22 + 144) = v30;
        if (*((unsigned char *)v23 + 176))
        {
          *(unsigned char *)(v22 + 17re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 1;
          long long v31 = v23[13];
          *(_OWORD *)(v22 + 192) = v23[12];
          *(_OWORD *)(v22 + 20re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v31;
        }
        *(void *)(v22 + 40) = v4;
        *((void *)this + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v22;
        uint64_t v32 = re::MaterialParameterTableLayers::resolveTechniqueIndices((re::MaterialParameterTableLayers *)v22, v17);
        if (!v33)
        {
          re::internal::assertLog((re::internal *)6, 0, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
          _os_crash();
          __break(1u);
          goto LABEL_49;
        }
        *((_DWORD *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = *v32;
      }
      a2 = (float32x4_t *)((char *)a2 + 1);
    }
    while (v16 != (re::RenderGraphContext *)a2);
    if (v8[5])
    {
      re::DrawTableSlice::DrawTableSlice(&v59, (uint64_t)v8);
      if (*((unsigned char *)v36 + 336)) {
        uint64_t v34 = (void *)*((void *)v36 + 43);
      }
      else {
        uint64_t v34 = (char *)v36 + 337;
      }
      v40[0] = v34;
      v40[1] = &v59;
      uint64_t v35 = *(void *)(v38 + 80);
      unint64_t v41 = *(void *)(v38 + 40);
      uint64_t v42 = v35;
      uint64_t v43 = 0;
      char v44 = *(unsigned char *)(v38 + 128);
      char v45 = *((unsigned char *)v36 + 360);
      char v46 = 0;
      char v47 = *((unsigned char *)v36 + 361);
      char v48 = 0;
      long long v49 = 0u;
      long long v50 = 0u;
      char v51 = 0;
      uint64_t v52 = v39;
      char v53 = 0;
      re::RenderGraphContext::getDefaultEncodeDrawCallDataStoreArgs(v37, (uint64_t *)&v56);
      re::RenderGraphContext::encodeDrawCalls(v37, &v56, v40);
    }
  }
LABEL_47:
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v55);
}

void *re::allocInfo_RenderGraphMeshNode(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9D650, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9D650))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF9D9C0, "RenderGraphMeshNode");
    __cxa_guard_release(&qword_26AF9D650);
  }
  return &unk_26AF9D9C0;
}

void re::initInfo_RenderGraphMeshNode(re *this, re::IntrospectionBase *a2)
{
  v31[0] = 0x11A172C87C45D5CELL;
  v31[1] = "RenderGraphMeshNode";
  re::StringID::destroyString((re::StringID *)v31);
  *((_OWORD *)this + 2) = v32;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9D658, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF9D658);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::introspect_RenderGraphNode((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "RenderGraphNode";
      *(void *)(v7 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v7 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF9D7D0 = v7;
      uint64_t v8 = re::introspectionAllocator((re *)v7);
      char v10 = re::IntrospectionInfo<re::DynamicString>::get(1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "materialPassName";
      *(void *)(v11 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x10800000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v11 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF9D7D8 = v11;
      uint64_t v12 = (re *)re::introspectionAllocator((re *)v11);
      re::IntrospectionInfo<re::DynamicArray<re::TechniqueTagFilter>>::get(v12);
      uint64_t v13 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 72, 8);
      *(_DWORD *)uint64_t v13 = 1;
      *(void *)(v13 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "excludedTechniqueTags";
      *(void *)(v13 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = &qword_26AF9D808;
      *(void *)(v13 + 24) = 0;
      *(void *)(v13 + 32) = 0x12800000002;
      *(_DWORD *)(v13 + 40) = 0;
      *(void *)(v13 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v13 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_26AF9D7E0 = v13;
      uint64_t v14 = re::introspectionAllocator((re *)v13);
      uint64_t v16 = re::mtl::introspect_CullMode((re::mtl *)1, v15);
      uint64_t v17 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v14 + 32))(v14, 72, 8);
      *(_DWORD *)uint64_t v17 = 1;
      *(void *)(v17 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "cullMode";
      *(void *)(v17 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v16;
      *(void *)(v17 + 24) = 0;
      *(void *)(v17 + 32) = 0x15000000003;
      *(_DWORD *)(v17 + 40) = 0;
      *(void *)(v17 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v17 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_26AF9D7E8 = v17;
      unsigned __int8 v18 = re::introspectionAllocator((re *)v17);
      uint64_t v20 = re::mtl::introspect_TriangleFillMode((re::mtl *)1, v19);
      uint64_t v21 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v18 + 32))(v18, 72, 8);
      *(_DWORD *)uint64_t v21 = 1;
      *(void *)(v21 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "fillMode";
      *(void *)(v21 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v20;
      *(void *)(v21 + 24) = 0;
      *(void *)(v21 + 32) = 0x15100000004;
      *(_DWORD *)(v21 + 40) = 0;
      *(void *)(v21 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v21 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v21 + 64) = 0;
      qword_26AF9D7F0 = v21;
      uint64_t v22 = re::introspectionAllocator((re *)v21);
      long long v24 = re::introspect_BOOL((re *)1, v23);
      uint64_t v25 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v22 + 32))(v22, 72, 8);
      *(_DWORD *)uint64_t v25 = 1;
      *(void *)(v25 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "useSubFrustums";
      *(void *)(v25 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v24;
      *(void *)(v25 + 24) = 0;
      *(void *)(v25 + 32) = 0x15200000005;
      *(_DWORD *)(v25 + 40) = 0;
      *(void *)(v25 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v25 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v25 + 64) = 0;
      qword_26AF9D7F8 = v25;
      long long v26 = re::introspectionAllocator((re *)v25);
      long long v28 = re::introspect_MeshSortMode((re *)1, v27);
      uint64_t v29 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v26 + 32))(v26, 72, 8);
      *(_DWORD *)uint64_t v29 = 1;
      *(void *)(v29 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "sortMode";
      *(void *)(v29 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v28;
      *(void *)(v29 + 24) = 0;
      *(void *)(v29 + 32) = 0x10000000006;
      *(_DWORD *)(v29 + 40) = 0;
      *(void *)(v29 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v29 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v29 + 64) = 0;
      qword_26AF9D800 = v29;
      __cxa_guard_release(&qword_26AF9D658);
    }
  }
  *((void *)this + 2) = 0x15800000008;
  *((_DWORD *)this + re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 7;
  *((void *)this + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = &qword_26AF9D7D0;
  *((void *)this + 9) = re::internal::defaultConstruct<re::RenderGraphMeshNode>;
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::RenderGraphMeshNode>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::RenderGraphMeshNode>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::RenderGraphMeshNode>;
  re::IntrospectionRegistry::add(this, v3);
  long long v30 = v32;
}

void re::IntrospectionInfo<re::DynamicArray<re::TechniqueTagFilter>>::get(re *a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9D730, memory_order_acquire) & 1) == 0)
  {
    a1 = (re *)__cxa_guard_acquire(&qword_26AF9D730);
    if (a1)
    {
      re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_26AF9D808);
      qword_26AF9D808 = (uint64_t)&unk_26E71FD70;
      __cxa_guard_release(&qword_26AF9D730);
    }
  }
  if ((byte_26AF9D629 & 1) == 0)
  {
    uint64_t v1 = (void *)qword_26AF9D720;
    if (qword_26AF9D720
      || (uint64_t v1 = re::allocInfo_TechniqueTagFilter(a1),
          qword_26AF9D720 = (uint64_t)v1,
          re::initInfo_TechniqueTagFilter((re *)v1, v2),
          (byte_26AF9D629 & 1) == 0))
    {
      byte_26AF9D629 = 1;
      int v3 = *((_DWORD *)v1 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF9D808, 0);
      qword_26AF9D818 = 0x2800000003;
      dword_26AF9D820 = v3;
      word_26AF9D824 = 0;
      *(void *)&xmmword_26AF9D828 = 0;
      *((void *)&xmmword_26AF9D828 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0xFFFFFFFFLL;
      qword_26AF9D838 = (uint64_t)v1;
      qword_26AF9D840 = 0;
      qword_26AF9D808 = (uint64_t)&unk_26E71FD70;
      re::IntrospectionRegistry::add(v4, v5);
      re::getPrettyTypeName((re *)&qword_26AF9D808, (const re::IntrospectionBase *)&v14);
      if (v15) {
        uint64_t v6 = *(const char **)&v16[7];
      }
      else {
        uint64_t v6 = v16;
      }
      if (v14 && (v15 & 1) != 0) {
        (*(void (**)(void))(*(void *)v14 + 40))();
      }
      long long v11 = *((_OWORD *)v1 + 2);
      uint64_t v7 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v12);
      if (v7)
      {
        uint64_t v8 = *v7;
        *((void *)&v10 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = v8;
      }
      else
      {
        long long v13 = v11;
        re::TypeBuilder::beginListType((uint64_t)&v14, v12, 1, 0x28uLL, 8uLL, &v13);
        re::TypeBuilder::setConstructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::TechniqueTagFilter>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::TechniqueTagFilter>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v14, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::TechniqueTagFilter>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::TechniqueTagFilter>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v14, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::TechniqueTagFilter>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v14, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::TechniqueTagFilter>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::TechniqueTagFilter>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::TechniqueTagFilter>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v14, v9);
      }
      xmmword_26AF9D828 = v10;
      re::StringID::destroyString((re::StringID *)v12);
    }
  }
}

re::RenderGraphMeshNode *re::internal::defaultConstruct<re::RenderGraphMeshNode>(int a1, int a2, re::RenderGraphMeshNode *this)
{
  return re::RenderGraphMeshNode::RenderGraphMeshNode(this);
}

uint64_t re::internal::defaultDestruct<re::RenderGraphMeshNode>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

uint64_t re::internal::defaultDestructV2<re::RenderGraphMeshNode>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::introspect_RenderGraphMeshNode(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RenderGraphMeshNode", (uint64_t (*)(re::internal *))re::allocInfo_RenderGraphMeshNode, (re::IntrospectionBase *(*)(void))re::initInfo_RenderGraphMeshNode, (void (*)(re::IntrospectionBase *))&qword_26AF9D660, this);
}

void *re::allocInfo_RenderGraphMultiPassMeshNode(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9D668, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9D668))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF9DA38, "RenderGraphMultiPassMeshNode");
    __cxa_guard_release(&qword_26AF9D668);
  }
  return &unk_26AF9DA38;
}

void re::initInfo_RenderGraphMultiPassMeshNode(re *this, re::IntrospectionBase *a2)
{
  v40[0] = 0x5BAAD2E756B69C82;
  v40[1] = "RenderGraphMultiPassMeshNode";
  re::StringID::destroyString((re::StringID *)v40);
  *((_OWORD *)this + 2) = v41;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9D670, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF9D670);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::introspect_RenderGraphNode((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "RenderGraphNode";
      *(void *)(v7 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v7 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF9D8D0 = v7;
      uint64_t v8 = re::introspectionAllocator((re *)v7);
      re::IntrospectionInfo<re::HashTable<re::DynamicString,re::MeshPassFilters,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get((uint64_t)v8, v9);
      uint64_t v10 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v10 = 1;
      *(void *)(v10 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "materialPasses";
      *(void *)(v10 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = &qword_26AF9D920;
      *(void *)(v10 + 24) = 0;
      *(void *)(v10 + 32) = 0x10800000001;
      *(_DWORD *)(v10 + 40) = 0;
      *(void *)(v10 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v10 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_26AF9D8D8 = v10;
      long long v11 = (re *)re::introspectionAllocator((re *)v10);
      re::IntrospectionInfo<re::DynamicArray<re::TechniqueTagFilter>>::get(v11);
      uint64_t v12 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v11 + 32))(v11, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "excludedTechniqueTags";
      *(void *)(v12 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = &qword_26AF9D808;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 32) = 0x13800000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v12 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF9D8E0 = v12;
      long long v13 = re::introspectionAllocator((re *)v12);
      char v15 = re::mtl::introspect_CullMode((re::mtl *)1, v14);
      uint64_t v16 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v13 + 32))(v13, 72, 8);
      *(_DWORD *)uint64_t v16 = 1;
      *(void *)(v16 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "cullMode";
      *(void *)(v16 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v15;
      *(void *)(v16 + 24) = 0;
      *(void *)(v16 + 32) = 0x1B000000003;
      *(_DWORD *)(v16 + 40) = 0;
      *(void *)(v16 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v16 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_26AF9D8E8 = v16;
      uint64_t v17 = re::introspectionAllocator((re *)v16);
      unint64_t v19 = re::mtl::introspect_TriangleFillMode((re::mtl *)1, v18);
      uint64_t v20 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v17 + 32))(v17, 72, 8);
      *(_DWORD *)uint64_t v20 = 1;
      *(void *)(v20 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "fillMode";
      *(void *)(v20 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v19;
      *(void *)(v20 + 24) = 0;
      *(void *)(v20 + 32) = 0x1B100000004;
      *(_DWORD *)(v20 + 40) = 0;
      *(void *)(v20 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v20 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_26AF9D8F0 = v20;
      uint64_t v21 = re::introspectionAllocator((re *)v20);
      uint64_t v23 = re::introspect_BOOL((re *)1, v22);
      uint64_t v24 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v21 + 32))(v21, 72, 8);
      *(_DWORD *)uint64_t v24 = 1;
      *(void *)(v24 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "useSubFrustums";
      *(void *)(v24 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v23;
      *(void *)(v24 + 24) = 0;
      *(void *)(v24 + 32) = 0x1B400000005;
      *(_DWORD *)(v24 + 40) = 0;
      *(void *)(v24 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v24 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v24 + 64) = 0;
      qword_26AF9D8F8 = v24;
      uint64_t v25 = re::introspectionAllocator((re *)v24);
      long long v27 = re::introspect_MeshSortMode((re *)1, v26);
      uint64_t v28 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v25 + 32))(v25, 72, 8);
      *(_DWORD *)uint64_t v28 = 1;
      *(void *)(v28 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "sortMode";
      *(void *)(v28 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v27;
      *(void *)(v28 + 24) = 0;
      *(void *)(v28 + 32) = 0x10000000006;
      *(_DWORD *)(v28 + 40) = 0;
      *(void *)(v28 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v28 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v28 + 64) = 0;
      qword_26AF9D900 = v28;
      uint64_t v29 = re::introspectionAllocator((re *)v28);
      long long v31 = re::introspect_uint16_t((re *)1, v30);
      uint64_t v32 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v29 + 32))(v29, 72, 8);
      *(_DWORD *)uint64_t v32 = 1;
      *(void *)(v32 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "fadeGroupRenderPassOrder";
      *(void *)(v32 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v31;
      *(void *)(v32 + 24) = 0;
      *(void *)(v32 + 32) = 0x1B20000000ALL;
      *(_DWORD *)(v32 + 40) = 0;
      *(void *)(v32 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v32 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v32 + 64) = 0;
      qword_26AF9D908 = v32;
      uint64_t v33 = re::introspectionAllocator((re *)v32);
      re::IntrospectionInfo<re::DynamicArray<re::MeshPassFilterFlags>>::get((uint64_t)v33, v34);
      uint64_t v35 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v33 + 32))(v33, 72, 8);
      *(_DWORD *)uint64_t v35 = 1;
      *(void *)(v35 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "globalRequiredFilters";
      *(void *)(v35 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = &qword_26AF9D848;
      *(void *)(v35 + 24) = 0;
      *(void *)(v35 + 32) = 0x1600000000CLL;
      *(_DWORD *)(v35 + 40) = 0;
      *(void *)(v35 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v35 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v35 + 64) = 0;
      qword_26AF9D910 = v35;
      uint64_t v36 = re::introspectionAllocator((re *)v35);
      re::IntrospectionInfo<re::DynamicArray<re::MeshPassFilterFlags>>::get((uint64_t)v36, v37);
      uint64_t v38 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v36 + 32))(v36, 72, 8);
      *(_DWORD *)uint64_t v38 = 1;
      *(void *)(v38 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "globalExcludedFilters";
      *(void *)(v38 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = &qword_26AF9D848;
      *(void *)(v38 + 24) = 0;
      *(void *)(v38 + 32) = 0x1880000000DLL;
      *(_DWORD *)(v38 + 40) = 0;
      *(void *)(v38 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v38 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v38 + 64) = 0;
      qword_26AF9D918 = v38;
      __cxa_guard_release(&qword_26AF9D670);
    }
  }
  *((void *)this + 2) = 0x1B800000008;
  *((_DWORD *)this + re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 10;
  *((void *)this + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = &qword_26AF9D8D0;
  *((void *)this + 9) = re::internal::defaultConstruct<re::RenderGraphMultiPassMeshNode>;
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::RenderGraphMultiPassMeshNode>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::RenderGraphMultiPassMeshNode>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::RenderGraphMultiPassMeshNode>;
  re::IntrospectionRegistry::add(this, v3);
  long long v39 = v41;
}

void re::IntrospectionInfo<re::HashTable<re::DynamicString,re::MeshPassFilters,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get(uint64_t a1, const re::IntrospectionBase *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9D738, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9D738))
  {
    re::IntrospectionHashTableBase::IntrospectionHashTableBase((re::IntrospectionHashTableBase *)&qword_26AF9D920);
    qword_26AF9D920 = (uint64_t)&unk_26E71FE08;
    __cxa_guard_release(&qword_26AF9D738);
  }
  if ((byte_26AF9D62A & 1) == 0)
  {
    __n128 v2 = (re *)re::IntrospectionInfo<re::DynamicString>::get(1, a2);
    uint64_t v3 = (uint64_t)v2;
    uint64_t v4 = (void *)qword_26AF9D708;
    if (!qword_26AF9D708)
    {
      uint64_t v4 = re::allocInfo_MeshPassFilters(v2);
      qword_26AF9D708 = (uint64_t)v4;
      re::initInfo_MeshPassFilters((re *)v4, v5);
    }
    if ((byte_26AF9D62A & 1) == 0)
    {
      byte_26AF9D62A = 1;
      int v6 = *((_DWORD *)v4 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF9D920, 0);
      qword_26AF9D930 = 0x3000000007;
      dword_26AF9D938 = v6;
      word_26AF9D93C = 0;
      *(void *)&xmmword_26AF9D940 = 0;
      *((void *)&xmmword_26AF9D940 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0xFFFFFFFFLL;
      qword_26AF9D950 = v3;
      qword_26AF9D958 = 0;
      qword_26AF9D960 = (uint64_t)v4;
      qword_26AF9D968 = 0;
      qword_26AF9D920 = (uint64_t)&unk_26E71FE08;
      re::IntrospectionRegistry::add(v7, v8);
      re::getPrettyTypeName((re *)&qword_26AF9D920, (const re::IntrospectionBase *)&v25);
      if (v26) {
        uint64_t v9 = v27;
      }
      else {
        uint64_t v9 = (char *)&v26 + 1;
      }
      if (v25 && (v26 & 1) != 0) {
        (*(void (**)(void))(*(void *)v25 + 40))();
      }
      long long v10 = *(_OWORD *)(v3 + 32);
      long long v20 = *((_OWORD *)v4 + 2);
      long long v21 = v10;
      long long v11 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v22);
      if (v11)
      {
        uint64_t v12 = *v11;
        *((void *)&v19 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = v12;
      }
      else
      {
        uint64_t v25 = 0x449AD97C4B77BED4;
        long long v26 = "_CompareFunc";
        long long v13 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, &v25);
        if (v13)
        {
          uint64_t v14 = *v13;
          re::StringID::destroyString((re::StringID *)&v25);
        }
        else
        {
          re::StringID::destroyString((re::StringID *)&v25);
          *(void *)&v30.var0 = 0x449AD97C4B77BED4;
          v30.var1 = "_CompareFunc";
          char v15 = (void *)v25;
          uint64_t v14 = (uint64_t)v26;
          re::StringID::destroyString((re::StringID *)&v30);
        }
        re::TypeInfo::TypeInfo((uint64_t)&v30, (uint64_t)&v26);
        if (!v15
          || (uint64_t v16 = *v31,
              uint64_t v25 = v14,
              long long v26 = v16,
              LODWORD(v27) = -1,
              (uint64_t v17 = (_anonymous_namespace_ *)re::HashTable<re::internal::TypeAttributeKey,re::internal::TypeAttributeData,re::Hash<re::internal::TypeAttributeKey>,re::EqualTo<re::internal::TypeAttributeKey>,true,false>::tryGet(*(void *)&v30.var0 + 768, &v25)) == 0)|| !*(void *)v17)
        {
          long long v29 = v21;
          v28[0] = v15;
          v28[1] = v14;
        }
        long long v23 = v20;
        long long v24 = v21;
        re::TypeBuilder::beginDictionaryType((uint64_t)&v25, v22, 1, 0x30uLL, 8uLL, &v24, &v23);
        re::TypeBuilder::setConstructor((uint64_t)&v25, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MeshPassFilters,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v25, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MeshPassFilters,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setDictionaryAccessors((uint64_t)&v25, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MeshPassFilters,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MeshPassFilters,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MeshPassFilters,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MeshPassFilters,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
        re::TypeBuilder::setDictionaryIterator((uint64_t)&v25, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MeshPassFilters,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (BOOL (*)(void *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MeshPassFilters,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (const void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MeshPassFilters,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MeshPassFilters,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MeshPassFilters,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v25, v18);
      }
      xmmword_26AF9D940 = v19;
      re::StringID::destroyString((re::StringID *)v22);
    }
  }
}

void re::IntrospectionInfo<re::DynamicArray<re::MeshPassFilterFlags>>::get(uint64_t a1, const re::IntrospectionBase *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9D740, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9D740))
  {
    re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_26AF9D848);
    qword_26AF9D848 = (uint64_t)&unk_26E71FEA8;
    __cxa_guard_release(&qword_26AF9D740);
  }
  if ((byte_26AF9D62B & 1) == 0)
  {
    re::introspect_MeshPassFilterFlags((re *)1, a2);
    if ((byte_26AF9D62B & 1) == 0)
    {
      byte_26AF9D62B = 1;
      int v2 = dword_26AF9D8A0;
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF9D848, 0);
      qword_26AF9D858 = 0x2800000003;
      dword_26AF9D860 = v2;
      word_26AF9D864 = 0;
      *(void *)&xmmword_26AF9D868 = 0;
      *((void *)&xmmword_26AF9D868 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0xFFFFFFFFLL;
      qword_26AF9D878 = (uint64_t)&qword_26AF9D888;
      qword_26AF9D880 = 0;
      qword_26AF9D848 = (uint64_t)&unk_26E71FEA8;
      re::IntrospectionRegistry::add(v3, v4);
      re::getPrettyTypeName((re *)&qword_26AF9D848, (const re::IntrospectionBase *)&v13);
      if (v14) {
        uint64_t v5 = *(const char **)&v15[7];
      }
      else {
        uint64_t v5 = v15;
      }
      if (v13 && (v14 & 1) != 0) {
        (*(void (**)(void))(*(void *)v13 + 40))();
      }
      long long v10 = xmmword_26AF9D8A8;
      int v6 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v11);
      if (v6)
      {
        uint64_t v7 = *v6;
        *((void *)&v9 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = v7;
      }
      else
      {
        long long v12 = v10;
        re::TypeBuilder::beginListType((uint64_t)&v13, v11, 1, 0x28uLL, 8uLL, &v12);
        re::TypeBuilder::setConstructor((uint64_t)&v13, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshPassFilterFlags>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v13, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshPassFilterFlags>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v13, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v13, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshPassFilterFlags>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshPassFilterFlags>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v13, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::MeshPassFilterFlags>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v13, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::MeshPassFilterFlags>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::MeshPassFilterFlags>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::MeshPassFilterFlags>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v13, v8);
      }
      xmmword_26AF9D868 = v9;
      re::StringID::destroyString((re::StringID *)v11);
    }
  }
}

double re::internal::defaultConstruct<re::RenderGraphMultiPassMeshNode>(int a1, int a2, re::RenderGraphNode *this)
{
  uint64_t v3 = re::RenderGraphNode::RenderGraphNode(this);
  *((_DWORD *)v3 + 64) = 1;
  *(void *)uint64_t v3 = &unk_26E71FA10;
  double result = 0.0;
  *(_OWORD *)((char *)v3 + 264) = 0u;
  *(_OWORD *)((char *)v3 + 280) = 0u;
  *((_DWORD *)v3 + 74) = 0;
  *(void *)((char *)v3 + 300) = 0x7FFFFFFFLL;
  *((void *)v3 + 40) = 0;
  *((void *)v3 + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
  *((void *)v3 + 39) = 0;
  *((_DWORD *)v3 + 84) = 0;
  *((void *)v3 + 53) = 0;
  *(_OWORD *)((char *)v3 + 344) = 0u;
  *(_OWORD *)((char *)v3 + 360) = 0u;
  *((_DWORD *)v3 + 94) = 0;
  *((_OWORD *)v3 + 24) = 0u;
  *((_OWORD *)v3 + 25) = 0u;
  *((_DWORD *)v3 + 104) = 0;
  *((unsigned char *)v3 + 432) = 2;
  *((unsigned char *)v3 + 437) = 0;
  *(_DWORD *)((char *)v3 + 433) = 0;
  return result;
}

uint64_t re::internal::defaultDestruct<re::RenderGraphMultiPassMeshNode>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

double re::internal::defaultConstructV2<re::RenderGraphMultiPassMeshNode>(re::RenderGraphNode *a1)
{
  uint64_t v1 = re::RenderGraphNode::RenderGraphNode(a1);
  *((_DWORD *)v1 + 64) = 1;
  *(void *)uint64_t v1 = &unk_26E71FA10;
  double result = 0.0;
  *(_OWORD *)((char *)v1 + 264) = 0u;
  *(_OWORD *)((char *)v1 + 280) = 0u;
  *((_DWORD *)v1 + 74) = 0;
  *(void *)((char *)v1 + 300) = 0x7FFFFFFFLL;
  *((void *)v1 + 40) = 0;
  *((void *)v1 + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
  *((void *)v1 + 39) = 0;
  *((_DWORD *)v1 + 84) = 0;
  *((void *)v1 + 53) = 0;
  *(_OWORD *)((char *)v1 + 344) = 0u;
  *(_OWORD *)((char *)v1 + 360) = 0u;
  *((_DWORD *)v1 + 94) = 0;
  *((_OWORD *)v1 + 24) = 0u;
  *((_OWORD *)v1 + 25) = 0u;
  *((_DWORD *)v1 + 104) = 0;
  *((unsigned char *)v1 + 432) = 2;
  *((unsigned char *)v1 + 437) = 0;
  *(_DWORD *)((char *)v1 + 433) = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::RenderGraphMultiPassMeshNode>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::introspect_RenderGraphMultiPassMeshNode(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RenderGraphMultiPassMeshNode", (uint64_t (*)(re::internal *))re::allocInfo_RenderGraphMultiPassMeshNode, (re::IntrospectionBase *(*)(void))re::initInfo_RenderGraphMultiPassMeshNode, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::RenderGraphMultiPassMeshNode>, this);
}

void *re::allocInfo_RenderGraphMultiViewMeshNode(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9D678, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9D678))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF9DAB0, "RenderGraphMultiViewMeshNode");
    __cxa_guard_release(&qword_26AF9D678);
  }
  return &unk_26AF9DAB0;
}

void re::initInfo_RenderGraphMultiViewMeshNode(re *this, re::IntrospectionBase *a2)
{
  v11[0] = 0x60120976EB70A1AALL;
  v11[1] = "RenderGraphMultiViewMeshNode";
  re::StringID::destroyString((re::StringID *)v11);
  *((_OWORD *)this + 2) = v12;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9D688, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF9D688);
    if (v4)
    {
      uint64_t v5 = (re *)re::introspectionAllocator(v4);
      int v6 = v5;
      uint64_t v7 = (re *)qword_26AF9D660;
      if (!qword_26AF9D660)
      {
        uint64_t v7 = (re *)re::allocInfo_RenderGraphMeshNode(v5);
        qword_26AF9D660 = (uint64_t)v7;
        re::initInfo_RenderGraphMeshNode(v7, v8);
      }
      uint64_t v9 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v6 + 32))(v6, 72, 8);
      *(_DWORD *)uint64_t v9 = 1;
      *(void *)(v9 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "RenderGraphMeshNode";
      *(void *)(v9 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v7;
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 32) = 0;
      *(_DWORD *)(v9 + 40) = 3;
      *(void *)(v9 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v9 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_26AF9D680 = v9;
      __cxa_guard_release(&qword_26AF9D688);
    }
  }
  *((void *)this + 2) = 0x15800000008;
  *((_DWORD *)this + re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((void *)this + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = &qword_26AF9D680;
  *((void *)this + 9) = re::internal::defaultConstruct<re::RenderGraphMultiViewMeshNode>;
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::RenderGraphMultiViewMeshNode>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::RenderGraphMultiViewMeshNode>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::RenderGraphMultiViewMeshNode>;
  re::IntrospectionRegistry::add(this, v3);
  long long v10 = v12;
}

re::RenderGraphMeshNode *re::internal::defaultConstruct<re::RenderGraphMultiViewMeshNode>(int a1, int a2, re::RenderGraphMeshNode *this)
{
  double result = re::RenderGraphMeshNode::RenderGraphMeshNode(this);
  *(void *)double result = &unk_26E71FAA0;
  return result;
}

uint64_t re::internal::defaultDestruct<re::RenderGraphMultiViewMeshNode>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

re::RenderGraphMeshNode *re::internal::defaultConstructV2<re::RenderGraphMultiViewMeshNode>(re::RenderGraphMeshNode *a1)
{
  double result = re::RenderGraphMeshNode::RenderGraphMeshNode(a1);
  *(void *)double result = &unk_26E71FAA0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::RenderGraphMultiViewMeshNode>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::introspect_RenderGraphMultiViewMeshNode(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RenderGraphMultiViewMeshNode", (uint64_t (*)(re::internal *))re::allocInfo_RenderGraphMultiViewMeshNode, (re::IntrospectionBase *(*)(void))re::initInfo_RenderGraphMultiViewMeshNode, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::RenderGraphMultiViewMeshNode>, this);
}

void *re::allocInfo_RenderGraphTextNode(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9D690, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9D690))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF9DB28, "RenderGraphTextNode");
    __cxa_guard_release(&qword_26AF9D690);
  }
  return &unk_26AF9DB28;
}

void re::initInfo_RenderGraphTextNode(re *this, re::IntrospectionBase *a2)
{
  v9[0] = 0x11A173223CF8F44ELL;
  v9[1] = "RenderGraphTextNode";
  re::StringID::destroyString((re::StringID *)v9);
  *((_OWORD *)this + 2) = v10;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9D6A0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF9D6A0);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::introspect_RenderGraphNode((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "RenderGraphNode";
      *(void *)(v7 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v7 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF9D698 = v7;
      __cxa_guard_release(&qword_26AF9D6A0);
    }
  }
  *((void *)this + 2) = 0x10800000008;
  *((_DWORD *)this + re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((void *)this + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = &qword_26AF9D698;
  *((void *)this + 9) = re::internal::defaultConstruct<re::RenderGraphTextNode>;
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::RenderGraphTextNode>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::RenderGraphTextNode>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::RenderGraphTextNode>;
  re::IntrospectionRegistry::add(this, v3);
  long long v8 = v10;
}

re::RenderGraphNode *re::internal::defaultConstruct<re::RenderGraphTextNode>(int a1, int a2, re::RenderGraphNode *this)
{
  double result = re::RenderGraphNode::RenderGraphNode(this);
  *((_DWORD *)result + 64) = 1;
  *(void *)double result = &unk_26E71FB30;
  return result;
}

void re::internal::defaultDestruct<re::RenderGraphTextNode>(int a1, int a2, id *this)
{
}

re::RenderGraphNode *re::internal::defaultConstructV2<re::RenderGraphTextNode>(re::RenderGraphNode *a1)
{
  double result = re::RenderGraphNode::RenderGraphNode(a1);
  *((_DWORD *)result + 64) = 1;
  *(void *)double result = &unk_26E71FB30;
  return result;
}

uint64_t re::introspect_RenderGraphTextNode(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RenderGraphTextNode", (uint64_t (*)(re::internal *))re::allocInfo_RenderGraphTextNode, (re::IntrospectionBase *(*)(void))re::initInfo_RenderGraphTextNode, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::RenderGraphTextNode>, this);
}

void *re::allocInfo_RenderGraphDebugNode(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9D6A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9D6A8))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF9DBA0, "RenderGraphDebugNode");
    __cxa_guard_release(&qword_26AF9D6A8);
  }
  return &unk_26AF9DBA0;
}

void re::initInfo_RenderGraphDebugNode(re *this, re::IntrospectionBase *a2)
{
  v9[0] = 0x228CD849C812213ALL;
  v9[1] = "RenderGraphDebugNode";
  re::StringID::destroyString((re::StringID *)v9);
  *((_OWORD *)this + 2) = v10;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9D6B8, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF9D6B8);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::introspect_RenderGraphNode((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "RenderGraphNode";
      *(void *)(v7 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v7 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF9D6B0 = v7;
      __cxa_guard_release(&qword_26AF9D6B8);
    }
  }
  *((void *)this + 2) = 0x10800000008;
  *((_DWORD *)this + re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((void *)this + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = &qword_26AF9D6B0;
  *((void *)this + 9) = re::internal::defaultConstruct<re::RenderGraphDebugNode>;
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::RenderGraphDebugNode>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::RenderGraphDebugNode>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::RenderGraphDebugNode>;
  re::IntrospectionRegistry::add(this, v3);
  long long v8 = v10;
}

re::RenderGraphNode *re::internal::defaultConstruct<re::RenderGraphDebugNode>(int a1, int a2, re::RenderGraphNode *this)
{
  double result = re::RenderGraphNode::RenderGraphNode(this);
  *((_DWORD *)result + 64) = 1;
  *(void *)double result = &unk_26E71FBC0;
  return result;
}

void re::internal::defaultDestruct<re::RenderGraphDebugNode>(int a1, int a2, id *this)
{
}

re::RenderGraphNode *re::internal::defaultConstructV2<re::RenderGraphDebugNode>(re::RenderGraphNode *a1)
{
  double result = re::RenderGraphNode::RenderGraphNode(a1);
  *((_DWORD *)result + 64) = 1;
  *(void *)double result = &unk_26E71FBC0;
  return result;
}

uint64_t re::introspect_RenderGraphDebugNode(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RenderGraphDebugNode", (uint64_t (*)(re::internal *))re::allocInfo_RenderGraphDebugNode, (re::IntrospectionBase *(*)(void))re::initInfo_RenderGraphDebugNode, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::RenderGraphDebugNode>, this);
}

void *re::allocInfo_RenderGraphMaterialReplaceNode(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9D6C0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9D6C0))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF9DC18, "RenderGraphMaterialReplaceNode");
    __cxa_guard_release(&qword_26AF9D6C0);
  }
  return &unk_26AF9DC18;
}

void re::initInfo_RenderGraphMaterialReplaceNode(re *this, re::IntrospectionBase *a2)
{
  v25[0] = 0xAF16046478AEDAELL;
  v25[1] = "RenderGraphMaterialReplaceNode";
  re::StringID::destroyString((re::StringID *)v25);
  *((_OWORD *)this + 2) = v26;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9D6C8, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF9D6C8);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::introspect_RenderGraphNode((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "RenderGraphNode";
      *(void *)(v7 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v7 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF9D780 = v7;
      long long v8 = re::introspectionAllocator((re *)v7);
      long long v10 = re::introspect_AssetHandle((re *)1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "material";
      *(void *)(v11 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x11000000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v11 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF9D788 = v11;
      long long v12 = re::introspectionAllocator((re *)v11);
      char v14 = re::IntrospectionInfo<re::DynamicString>::get(1, v13);
      uint64_t v15 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 72, 8);
      *(_DWORD *)uint64_t v15 = 1;
      *(void *)(v15 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "techniqueToReplace";
      *(void *)(v15 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v14;
      *(void *)(v15 + 24) = 0;
      *(void *)(v15 + 32) = 0x12800000002;
      *(_DWORD *)(v15 + 40) = 0;
      *(void *)(v15 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v15 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_26AF9D790 = v15;
      uint64_t v16 = re::introspectionAllocator((re *)v15);
      uint64_t v18 = re::IntrospectionInfo<re::DynamicString>::get(1, v17);
      uint64_t v19 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v16 + 32))(v16, 72, 8);
      *(_DWORD *)uint64_t v19 = 1;
      *(void *)(v19 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "techniqueToUse";
      *(void *)(v19 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v18;
      *(void *)(v19 + 24) = 0;
      *(void *)(v19 + 32) = 0x14800000003;
      *(_DWORD *)(v19 + 40) = 0;
      *(void *)(v19 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v19 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v19 + 64) = 0;
      qword_26AF9D798 = v19;
      long long v20 = re::introspectionAllocator((re *)v19);
      uint64_t v22 = re::mtl::introspect_CullMode((re::mtl *)1, v21);
      uint64_t v23 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v20 + 32))(v20, 72, 8);
      *(_DWORD *)uint64_t v23 = 1;
      *(void *)(v23 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "cullMode";
      *(void *)(v23 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v22;
      *(void *)(v23 + 24) = 0;
      *(void *)(v23 + 32) = 0x16800000004;
      *(_DWORD *)(v23 + 40) = 0;
      *(void *)(v23 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v23 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v23 + 64) = 0;
      qword_26AF9D7A0 = v23;
      __cxa_guard_release(&qword_26AF9D6C8);
    }
  }
  *((void *)this + 2) = 0x17000000008;
  *((_DWORD *)this + re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 5;
  *((void *)this + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = &qword_26AF9D780;
  *((void *)this + 9) = re::internal::defaultConstruct<re::RenderGraphMaterialReplaceNode>;
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::RenderGraphMaterialReplaceNode>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::RenderGraphMaterialReplaceNode>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::RenderGraphMaterialReplaceNode>;
  re::IntrospectionRegistry::add(this, v3);
  long long v24 = v26;
}

re::RenderGraphMaterialReplaceNode *re::internal::defaultConstruct<re::RenderGraphMaterialReplaceNode>(int a1, int a2, re::RenderGraphMaterialReplaceNode *this)
{
  return re::RenderGraphMaterialReplaceNode::RenderGraphMaterialReplaceNode(this);
}

void re::internal::defaultDestruct<re::RenderGraphMaterialReplaceNode>(int a1, int a2, id *this)
{
}

uint64_t re::introspect_RenderGraphMaterialReplaceNode(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RenderGraphMaterialReplaceNode", (uint64_t (*)(re::internal *))re::allocInfo_RenderGraphMaterialReplaceNode, (re::IntrospectionBase *(*)(void))re::initInfo_RenderGraphMaterialReplaceNode, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::RenderGraphMaterialReplaceNode>, this);
}

void *re::allocInfo_RenderGraphDebugMaterialsNode(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9D6D0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9D6D0))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF9DC90, "RenderGraphDebugMaterialsNode");
    __cxa_guard_release(&qword_26AF9D6D0);
  }
  return &unk_26AF9DC90;
}

void re::initInfo_RenderGraphDebugMaterialsNode(re *this, re::IntrospectionBase *a2)
{
  v9[0] = 0x86C8A26ABC359026;
  v9[1] = "RenderGraphDebugMaterialsNode";
  re::StringID::destroyString((re::StringID *)v9);
  *((_OWORD *)this + 2) = v10;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9D6E0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF9D6E0);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::introspect_RenderGraphNode((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "RenderGraphNode";
      *(void *)(v7 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v7 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF9D6D8 = v7;
      __cxa_guard_release(&qword_26AF9D6E0);
    }
  }
  *((void *)this + 2) = 0x10800000008;
  *((_DWORD *)this + re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((void *)this + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = &qword_26AF9D6D8;
  *((void *)this + 9) = re::internal::defaultConstruct<re::RenderGraphDebugMaterialsNode>;
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::RenderGraphDebugMaterialsNode>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::RenderGraphDebugMaterialsNode>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::RenderGraphDebugMaterialsNode>;
  re::IntrospectionRegistry::add(this, v3);
  long long v8 = v10;
}

re::RenderGraphNode *re::internal::defaultConstruct<re::RenderGraphDebugMaterialsNode>(int a1, int a2, re::RenderGraphNode *this)
{
  double result = re::RenderGraphNode::RenderGraphNode(this);
  *((_DWORD *)result + 64) = 1;
  *(void *)double result = &unk_26E6C6A10;
  return result;
}

void re::internal::defaultDestruct<re::RenderGraphDebugMaterialsNode>(int a1, int a2, id *this)
{
}

re::RenderGraphNode *re::internal::defaultConstructV2<re::RenderGraphDebugMaterialsNode>(re::RenderGraphNode *a1)
{
  double result = re::RenderGraphNode::RenderGraphNode(a1);
  *((_DWORD *)result + 64) = 1;
  *(void *)double result = &unk_26E6C6A10;
  return result;
}

uint64_t re::introspect_RenderGraphDebugMaterialsNode(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RenderGraphDebugMaterialsNode", (uint64_t (*)(re::internal *))re::allocInfo_RenderGraphDebugMaterialsNode, (re::IntrospectionBase *(*)(void))re::initInfo_RenderGraphDebugMaterialsNode, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::RenderGraphDebugMaterialsNode>, this);
}

void re::introspect_MeshPassFilterFlags(re *this, const re::IntrospectionBase *a2)
{
  int v2 = (int)this;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9D6E8, memory_order_acquire) & 1) == 0)
  {
    StringID v30 = (re *)__cxa_guard_acquire(&qword_26AF9D6E8);
    if (v30)
    {
      long long v31 = re::introspectionAllocator(v30);
      uint64_t v32 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v31 + 32))(v31, 24, 8);
      *(_DWORD *)uint64_t v32 = 1;
      *((void *)v32 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 1;
      *((void *)v32 + 2) = "Default";
      qword_26AF9D760 = (uint64_t)v32;
      uint64_t v33 = re::introspectionAllocator(v32);
      uint64_t v34 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v33 + 32))(v33, 24, 8);
      *(_DWORD *)uint64_t v34 = 1;
      *((void *)v34 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 2;
      *((void *)v34 + 2) = "TwoPassSortGroup";
      qword_26AF9D768 = (uint64_t)v34;
      uint64_t v35 = re::introspectionAllocator(v34);
      uint64_t v36 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v35 + 32))(v35, 24, 8);
      *(_DWORD *)uint64_t v36 = 1;
      *((void *)v36 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 4;
      *((void *)v36 + 2) = "RenderPassGroup";
      qword_26AF9D770 = (uint64_t)v36;
      unint64_t v37 = re::introspectionAllocator(v36);
      uint64_t v38 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v37 + 32))(v37, 24, 8);
      *(_DWORD *)uint64_t v38 = 1;
      *(void *)(v38 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 8;
      *(void *)(v38 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = "RenderOnTop";
      qword_26AF9D778 = v38;
      __cxa_guard_release(&qword_26AF9D6E8);
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9D6F0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9D6F0))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_26AF9D888, "MeshPassFilterFlags", 1, 1, 1, 1);
    qword_26AF9D888 = (uint64_t)&unk_26E715E00;
    qword_26AF9D8C8 = (uint64_t)&re::introspect_MeshPassFilterFlags(BOOL)::enumTable;
    dword_26AF9D898 = 9;
    __cxa_guard_release(&qword_26AF9D6F0);
  }
  if (v2)
  {
    if (_MergedGlobals_481) {
      return;
    }
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)v44);
    char v3 = _MergedGlobals_481;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)v44);
    if (v3) {
      return;
    }
    uint64_t v5 = re::introspectionSharedMutex(v4);
    std::__shared_mutex_base::lock(v5);
    if (_MergedGlobals_481) {
      goto LABEL_34;
    }
  }
  _MergedGlobals_481 = 1;
  re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_26AF9D888, a2);
  uint64_t v40 = 0xF30C980373391EA2;
  long long v41 = "MeshPassFilterFlags";
  v44[0] = 0x31CD534126;
  v44[1] = "uint8_t";
  uint64_t v7 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v44);
  if (!v7)
  {
    re::StringID::destroyString((re::StringID *)v44);
    re::internal::assertLog((re::internal *)5, v39, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "MeshPassFilterFlags", v40, v41);
    _os_crash();
    __break(1u);
    return;
  }
  uint64_t v8 = *v7;
  re::StringID::destroyString((re::StringID *)v44);
  uint64_t v9 = (unsigned int *)qword_26AF9D8C8;
  v43[1] = v8;
  re::TypeBuilder::beginEnumType((uint64_t)v44, &v40, 1, 1, (uint64_t)v43);
  unint64_t v11 = *v9;
  if (v11)
  {
    for (unint64_t i = 0; i < v11; ++i)
    {
      uint64_t v13 = *(void *)(*((void *)v9 + 1) + 8 * i);
      if (*(_DWORD *)v13 == 1)
      {
        char v14 = *(char **)(v13 + 16);
        if (v14)
        {
          uint64_t v15 = *v14;
          if (*v14)
          {
            char v16 = v14[1];
            if (v16)
            {
              uint64_t v17 = (unsigned __int8 *)(v14 + 2);
              do
              {
                uint64_t v15 = 31 * v15 + v16;
                int v18 = *v17++;
                char v16 = v18;
              }
              while (v18);
            }
          }
        }
        else
        {
          uint64_t v15 = 0;
        }
        uint64_t v19 = *(void *)(v13 + 8);
        *(void *)&v42.var0 = 2 * v15;
        v42.var1 = v14;
        re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v44, v19, &v42);
        re::StringID::destroyString((re::StringID *)&v42);
        unint64_t v11 = *v9;
      }
    }
    if (v11)
    {
      for (unint64_t j = 0; j < v11; ++j)
      {
        uint64_t v21 = *(void *)(*((void *)v9 + 1) + 8 * j);
        if (*(_DWORD *)v21 == 2)
        {
          uint64_t v22 = *(char **)(v21 + 16);
          if (v22)
          {
            uint64_t v23 = *v22;
            if (*v22)
            {
              char v24 = v22[1];
              if (v24)
              {
                uint64_t v25 = (unsigned __int8 *)(v22 + 2);
                do
                {
                  uint64_t v23 = 31 * v23 + v24;
                  int v26 = *v25++;
                  char v24 = v26;
                }
                while (v26);
              }
            }
          }
          else
          {
            uint64_t v23 = 0;
          }
          uint64_t v27 = *(void *)(v21 + 8);
          *(void *)&v42.var0 = 2 * v23;
          v42.var1 = v22;
          re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v44, v27, &v42);
          re::StringID::destroyString((re::StringID *)&v42);
          unint64_t v11 = *v9;
        }
      }
    }
  }
  re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v44, v28);
  xmmword_26AF9D8A8 = (__int128)v42;
  re::StringID::destroyString((re::StringID *)&v40);
  if ((v2 & 1) == 0)
  {
LABEL_34:
    long long v29 = re::introspectionSharedMutex(v6);
    std::__shared_mutex_base::unlock(v29);
  }
}

void *re::allocInfo_MeshPassFilters(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9D6F8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9D6F8))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF9DD08, "MeshPassFilters");
    __cxa_guard_release(&qword_26AF9D6F8);
  }
  return &unk_26AF9DD08;
}

void re::initInfo_MeshPassFilters(re *this, re::IntrospectionBase *a2)
{
  v22[0] = 0xBC5389F7EA012CBALL;
  v22[1] = "MeshPassFilters";
  re::StringID::destroyString((re::StringID *)v22);
  *((_OWORD *)this + 2) = v23;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9D700, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF9D700);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      re::IntrospectionInfo<re::DynamicArray<re::MeshPassFilterFlags>>::get((uint64_t)v5, v6);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "included";
      *(void *)(v7 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = &qword_26AF9D848;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 1;
      *(_DWORD *)(v7 + 40) = 0;
      *(void *)(v7 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v7 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF9D7A8 = v7;
      uint64_t v8 = re::introspectionAllocator((re *)v7);
      re::IntrospectionInfo<re::DynamicArray<re::MeshPassFilterFlags>>::get((uint64_t)v8, v9);
      uint64_t v10 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v10 = 1;
      *(void *)(v10 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "excluded";
      *(void *)(v10 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = &qword_26AF9D848;
      *(void *)(v10 + 24) = 0;
      *(void *)(v10 + 32) = 0x2800000002;
      *(_DWORD *)(v10 + 40) = 0;
      *(void *)(v10 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v10 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_26AF9D7B0 = v10;
      unint64_t v11 = re::introspectionAllocator((re *)v10);
      re::IntrospectionInfo<re::HashTable<re::DynamicString,unsigned short,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get((uint64_t)v11, v12);
      uint64_t v13 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v11 + 32))(v11, 72, 8);
      *(_DWORD *)uint64_t v13 = 1;
      *(void *)(v13 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "renderPassGroupOrder";
      *(void *)(v13 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = &qword_26AF9D970;
      *(void *)(v13 + 24) = 0;
      *(void *)(v13 + 32) = 0x7800000004;
      *(_DWORD *)(v13 + 40) = 0;
      *(void *)(v13 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v13 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_26AF9D7B8 = v13;
      char v14 = re::introspectionAllocator((re *)v13);
      re::IntrospectionInfo<re::DynamicArray<re::MeshPassFilterFlags>>::get((uint64_t)v14, v15);
      uint64_t v16 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v14 + 32))(v14, 72, 8);
      *(_DWORD *)uint64_t v16 = 1;
      *(void *)(v16 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "required";
      *(void *)(v16 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = &qword_26AF9D848;
      *(void *)(v16 + 24) = 0;
      *(void *)(v16 + 32) = 0x5000000005;
      *(_DWORD *)(v16 + 40) = 0;
      *(void *)(v16 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v16 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_26AF9D7C0 = v16;
      uint64_t v17 = re::introspectionAllocator((re *)v16);
      uint64_t v19 = re::introspect_BOOL((re *)1, v18);
      uint64_t v20 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v17 + 32))(v17, 72, 8);
      *(_DWORD *)uint64_t v20 = 1;
      *(void *)(v20 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "overrideDepthBiasPriorityWithRenderPassOrder";
      *(void *)(v20 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v19;
      *(void *)(v20 + 24) = 0;
      *(void *)(v20 + 32) = 0xA800000006;
      *(_DWORD *)(v20 + 40) = 0;
      *(void *)(v20 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v20 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_26AF9D7C8 = v20;
      __cxa_guard_release(&qword_26AF9D700);
    }
  }
  *((void *)this + 2) = 0xB000000008;
  *((_DWORD *)this + re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 5;
  *((void *)this + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = &qword_26AF9D7A8;
  *((void *)this + 9) = re::internal::defaultConstruct<re::MeshPassFilters>;
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::MeshPassFilters>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::MeshPassFilters>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::MeshPassFilters>;
  re::IntrospectionRegistry::add(this, v3);
  long long v21 = v23;
}

void re::IntrospectionInfo<re::HashTable<re::DynamicString,unsigned short,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get(uint64_t a1, const re::IntrospectionBase *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9D748, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9D748))
  {
    re::IntrospectionHashTableBase::IntrospectionHashTableBase((re::IntrospectionHashTableBase *)&qword_26AF9D970);
    qword_26AF9D970 = (uint64_t)&unk_26E71FF40;
    __cxa_guard_release(&qword_26AF9D748);
  }
  if ((byte_26AF9D62C & 1) == 0)
  {
    int v2 = re::IntrospectionInfo<re::DynamicString>::get(1, a2);
    uint64_t v4 = re::introspect_uint16_t((re *)1, v3);
    if ((byte_26AF9D62C & 1) == 0)
    {
      uint64_t v5 = (uint64_t)v4;
      byte_26AF9D62C = 1;
      int v6 = v4[6];
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF9D970, 0);
      qword_26AF9D980 = 0x3000000007;
      dword_26AF9D988 = v6;
      word_26AF9D98C = 0;
      *(void *)&xmmword_26AF9D990 = 0;
      *((void *)&xmmword_26AF9D990 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0xFFFFFFFFLL;
      qword_26AF9D9A0 = (uint64_t)v2;
      qword_26AF9D9A8 = 0;
      qword_26AF9D9B0 = v5;
      qword_26AF9D9B8 = 0;
      qword_26AF9D970 = (uint64_t)&unk_26E71FF40;
      re::IntrospectionRegistry::add(v7, v8);
      re::getPrettyTypeName((re *)&qword_26AF9D970, (const re::IntrospectionBase *)&v25);
      if (v26) {
        uint64_t v9 = v27;
      }
      else {
        uint64_t v9 = (char *)&v26 + 1;
      }
      if (v25 && (v26 & 1) != 0) {
        (*(void (**)(void))(*(void *)v25 + 40))();
      }
      long long v10 = v2[2];
      long long v20 = *(_OWORD *)(v5 + 32);
      long long v21 = v10;
      unint64_t v11 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v22);
      if (v11)
      {
        uint64_t v12 = *v11;
        *((void *)&v19 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = v12;
      }
      else
      {
        uint64_t v25 = 0x449AD97C4B77BED4;
        int v26 = "_CompareFunc";
        uint64_t v13 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, &v25);
        if (v13)
        {
          uint64_t v14 = *v13;
          re::StringID::destroyString((re::StringID *)&v25);
        }
        else
        {
          re::StringID::destroyString((re::StringID *)&v25);
          *(void *)&v30.var0 = 0x449AD97C4B77BED4;
          v30.var1 = "_CompareFunc";
          uint64_t v15 = (void *)v25;
          uint64_t v14 = (uint64_t)v26;
          re::StringID::destroyString((re::StringID *)&v30);
        }
        re::TypeInfo::TypeInfo((uint64_t)&v30, (uint64_t)&v26);
        if (!v15
          || (uint64_t v16 = *v31,
              uint64_t v25 = v14,
              int v26 = v16,
              LODWORD(v27) = -1,
              (uint64_t v17 = (_anonymous_namespace_ *)re::HashTable<re::internal::TypeAttributeKey,re::internal::TypeAttributeData,re::Hash<re::internal::TypeAttributeKey>,re::EqualTo<re::internal::TypeAttributeKey>,true,false>::tryGet(*(void *)&v30.var0 + 768, &v25)) == 0)|| !*(void *)v17)
        {
          long long v29 = v21;
          v28[0] = v15;
          v28[1] = v14;
        }
        long long v23 = v20;
        long long v24 = v21;
        re::TypeBuilder::beginDictionaryType((uint64_t)&v25, v22, 1, 0x30uLL, 8uLL, &v24, &v23);
        re::TypeBuilder::setConstructor((uint64_t)&v25, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,unsigned short,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v25, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,unsigned short,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setDictionaryAccessors((uint64_t)&v25, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,unsigned short,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,unsigned short,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,unsigned short,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,unsigned short,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
        re::TypeBuilder::setDictionaryIterator((uint64_t)&v25, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,unsigned short,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (BOOL (*)(void *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,unsigned short,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (const void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,unsigned short,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,unsigned short,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,unsigned short,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v25, v18);
      }
      xmmword_26AF9D990 = v19;
      re::StringID::destroyString((re::StringID *)v22);
    }
  }
}

double re::internal::defaultConstruct<re::MeshPassFilters>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a3 = 0;
  *(void *)(a3 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  *(_DWORD *)(a3 + 24) = 0;
  *(void *)(a3 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
  *(_DWORD *)(a3 + 64) = 0;
  *(_OWORD *)(a3 + 72) = 0u;
  *(_OWORD *)(a3 + 8re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
  *(_DWORD *)(a3 + 104) = 0;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 12re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a3 + 140) = 0u;
  *(void *)&double result = 0x7FFFFFFFLL;
  *(void *)(a3 + 15re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0x7FFFFFFFLL;
  *(_WORD *)(a3 + 16re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  return result;
}

uint64_t re::internal::defaultDestruct<re::MeshPassFilters>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)(a3 + 120));
  re::DynamicArray<unsigned long>::deinit(a3 + 80);
  re::DynamicArray<unsigned long>::deinit(a3 + 40);
  return re::DynamicArray<unsigned long>::deinit(a3);
}

double re::internal::defaultConstructV2<re::MeshPassFilters>(uint64_t a1)
{
  *(void *)a1 = 0;
  *(void *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
  *(_DWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 8re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
  *(_DWORD *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 12re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a1 + 140) = 0u;
  *(void *)&double result = 0x7FFFFFFFLL;
  *(void *)(a1 + 15re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0x7FFFFFFFLL;
  *(_WORD *)(a1 + 16re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::MeshPassFilters>(uint64_t a1)
{
  re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)(a1 + 120));
  re::DynamicArray<unsigned long>::deinit(a1 + 80);
  re::DynamicArray<unsigned long>::deinit(a1 + 40);
  return re::DynamicArray<unsigned long>::deinit(a1);
}

void *re::allocInfo_TechniqueTagFilter(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9D710, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9D710))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF9DD80, "TechniqueTagFilter");
    __cxa_guard_release(&qword_26AF9D710);
  }
  return &unk_26AF9DD80;
}

void re::initInfo_TechniqueTagFilter(re *this, re::IntrospectionBase *a2)
{
  v14[0] = 0x3F8C2D11870B6C4;
  v14[1] = "TechniqueTagFilter";
  re::StringID::destroyString((re::StringID *)v14);
  *((_OWORD *)this + 2) = v15;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9D718, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF9D718);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v7 = re::IntrospectionInfo<re::StringID>::get(1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "name";
      *(void *)(v8 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 32) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v8 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF9D750 = v8;
      uint64_t v9 = re::introspectionAllocator((re *)v8);
      unint64_t v11 = re::IntrospectionInfo<re::StringID>::get(1, v10);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "value";
      *(void *)(v12 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v11;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 32) = 0x1000000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v12 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF9D758 = v12;
      __cxa_guard_release(&qword_26AF9D718);
    }
  }
  *((void *)this + 2) = 0x2000000008;
  *((_DWORD *)this + re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((void *)this + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = &qword_26AF9D750;
  *((void *)this + 9) = re::internal::defaultConstruct<re::TechniqueTagFilter>;
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::TechniqueTagFilter>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::TechniqueTagFilter>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::TechniqueTagFilter>;
  re::IntrospectionRegistry::add(this, v3);
  long long v13 = v15;
}

void re::internal::defaultConstruct<re::TechniqueTagFilter>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = 0;
  a3[1] = "";
  a3[2] = 0;
  a3[3] = "";
}

void re::internal::defaultDestruct<re::TechniqueTagFilter>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::StringID::destroyString((re::StringID *)(a3 + 16));
  re::StringID::destroyString((re::StringID *)a3);
}

void *re::internal::defaultConstructV2<re::TechniqueTagFilter>(void *result)
{
  *double result = 0;
  result[1] = "";
  result[2] = 0;
  result[3] = "";
  return result;
}

void re::internal::defaultDestructV2<re::TechniqueTagFilter>(uint64_t a1)
{
  re::StringID::destroyString((re::StringID *)(a1 + 16));
  re::StringID::destroyString((re::StringID *)a1);
}

void re::RenderGraphMultiPassMeshNode::~RenderGraphMultiPassMeshNode(re::RenderGraphMultiPassMeshNode *this)
{
  re::RenderGraphMultiPassMeshNode::~RenderGraphMultiPassMeshNode(this);
  JUMPOUT(0x237DBCBD0);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E71FA10;
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 392);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 352);
  re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::deinit((uint64_t)this + 312);
  re::HashTable<re::DynamicString,re::MeshPassFilters,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 33);
  re::RenderGraphNode::~RenderGraphNode((id *)this);
}

void re::RenderGraphMultiViewMeshNode::~RenderGraphMultiViewMeshNode(id *this)
{
  re::RenderGraphMeshNode::~RenderGraphMeshNode(this);
  JUMPOUT(0x237DBCBD0);
}

void re::RenderGraphTextNode::~RenderGraphTextNode(id *this)
{
  re::RenderGraphNode::~RenderGraphNode(this);
  JUMPOUT(0x237DBCBD0);
}

void re::RenderGraphDebugNode::~RenderGraphDebugNode(id *this)
{
  re::RenderGraphNode::~RenderGraphNode(this);
  JUMPOUT(0x237DBCBD0);
}

void re::RenderGraphMaterialReplaceNode::~RenderGraphMaterialReplaceNode(id *this)
{
  re::RenderGraphMaterialReplaceNode::~RenderGraphMaterialReplaceNode(this);
  JUMPOUT(0x237DBCBD0);
}

{
  uint64_t vars8;

  re::DynamicString::deinit((re::DynamicString *)(this + 41));
  re::DynamicString::deinit((re::DynamicString *)(this + 37));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(this + 34));
  re::RenderGraphNode::~RenderGraphNode(this);
}

double re::HashTable<re::DynamicString,re::MeshPassFilters,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    if (*((_DWORD *)a1 + 8))
    {
      uint64_t v3 = 0;
      unint64_t v4 = 0;
      do
      {
        re::HashTable<re::DynamicString,re::MeshPassFilters,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::EntryWithHash::free(a1[2] + v3);
        ++v4;
        v3 += 224;
      }
      while (v4 < *((unsigned int *)a1 + 8));
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 3re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0x7FFFFFFFLL;
  }
  return result;
}

uint64_t re::HashTable<re::DynamicString,re::MeshPassFilters,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::EntryWithHash::free(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 8);
  if (v1 < 0)
  {
    uint64_t v2 = result;
    *(_DWORD *)(result + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v1 & 0x7FFFFFFF;
    re::DynamicString::deinit((re::DynamicString *)(result + 16));
    re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)(v2 + 168));
    re::DynamicArray<unsigned long>::deinit(v2 + 128);
    re::DynamicArray<unsigned long>::deinit(v2 + 88);
    return re::DynamicArray<unsigned long>::deinit(v2 + 48);
  }
  return result;
}

uint64_t re::RenderGraphDataStore::tryGet<re::MeshNodeFilterData>(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = (unint64_t)"N2re18MeshNodeFilterDataE";
  if (((unint64_t)"N2re18MeshNodeFilterDataE" & 0x8000000000000000) != 0)
  {
    uint64_t v3 = (unsigned __int8 *)((unint64_t)"N2re18MeshNodeFilterDataE" & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v4 = 5381;
    do
    {
      unint64_t v2 = v4;
      unsigned int v5 = *v3++;
      uint64_t v4 = (33 * v4) ^ v5;
    }
    while (v5);
  }
  unint64_t v7 = (a2 + (v2 << 6) + (v2 >> 2) - 0x61C8864680B583E9) ^ v2;
  uint64_t result = re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(a1 + 64, (uint64_t *)&v7);
  if (result) {
    return *(void *)result;
  }
  return result;
}

void *re::DynamicArray<re::FilteredMeshPass>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    unsigned int v5 = result;
    if (result[2] <= a2)
    {
      uint64_t result = (void *)*result;
      if (!*v5)
      {
        uint64_t result = (void *)re::DynamicArray<re::FilteredMeshPass>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x18uLL))
        {
          uint64_t v2 = 24 * a2;
          uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 24 * a2, 8);
          if (result)
          {
            unint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_18;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 24, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        uint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      unint64_t v7 = 0;
      if (!v3)
      {
LABEL_18:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = v8 + 24 * v9;
        unint64_t v11 = v7;
        do
        {
          *unint64_t v11 = *(void *)v8;
          int v12 = *(unsigned __int8 *)(v8 + 8);
          *((unsigned char *)v11 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v12;
          if (v12) {
            *(_DWORD *)((char *)v11 + 9) = *(_DWORD *)(v8 + 9);
          }
          *(_DWORD *)((char *)v11 + 13) = *(_DWORD *)(v8 + 13);
          v8 += 24;
          v11 += 3;
        }
        while (v8 != v10);
        uint64_t v8 = v5[4];
      }
      uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_18;
    }
  }
  return result;
}

void *re::IntrospectionDynamicArray<re::TechniqueTagFilter>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::TechniqueTagFilter>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionDynamicArray<re::TechniqueTagFilter>::construct(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  *(void *)(a2 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::TechniqueTagFilter>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::deinit(a2);
}

void *re::IntrospectionDynamicArray<re::TechniqueTagFilter>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::deinit(a2);
  *(void *)a2 = a3;
  uint64_t result = re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::setCapacity((void *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::TechniqueTagFilter>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (!*(void *)a4)
  {
    *(void *)a4 = a2;
    re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::setCapacity((void *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  unint64_t v10 = *(void *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
    {
      re::DynamicArray<re::ecs2::VideoMaterialAttachment>::resize(a4, a5);
    }
  }
  else
  {
    re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::setCapacity((void *)a4, a5);
    for (unint64_t i = a5 - *(void *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::TechniqueTagFilter>::addElement(re::Allocator **a1, re *a2, int a3, uint64_t a4)
{
  unint64_t v8 = *(void *)(a4 + 8);
  unint64_t v9 = *(void *)(a4 + 16);
  if (v9 >= v8)
  {
    unint64_t v10 = v9 + 1;
    if (v8 < v9 + 1)
    {
      if (*(void *)a4)
      {
        uint64_t v11 = 2 * v8;
        BOOL v12 = v8 == 0;
        unint64_t v13 = 8;
        if (!v12) {
          unint64_t v13 = v11;
        }
        if (v13 <= v10) {
          unint64_t v14 = v10;
        }
        else {
          unint64_t v14 = v13;
        }
        re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::setCapacity((void *)a4, v14);
      }
      else
      {
        re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::setCapacity((void *)a4, v10);
        ++*(_DWORD *)(a4 + 24);
      }
    }
    unint64_t v9 = *(void *)(a4 + 16);
  }
  long long v15 = (void *)(*(void *)(a4 + 32) + 32 * v9);
  *long long v15 = 0;
  v15[1] = "";
  v18[0] = 0;
  v18[1] = "";
  uint64_t v15[2] = 0;
  void v15[3] = "";
  v19[0] = 0;
  v19[1] = "";
  ++*(void *)(a4 + 16);
  ++*(_DWORD *)(a4 + 24);
  re::StringID::destroyString((re::StringID *)v19);
  re::StringID::destroyString((re::StringID *)v18);
  uint64_t v16 = (re::IntrospectionBase *)(*(void *)(a4 + 32) + 32 * *(void *)(a4 + 16) - 32);
  re::introspectionInitElement(a2, a3, a1[6], v16);
  return v16;
}

uint64_t re::IntrospectionDynamicArray<re::TechniqueTagFilter>::size(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::TechniqueTagFilter>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 32 * a3;
}

{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 32 * a3;
}

void *re::TypeBuilderHelper::registerDynamicArray<re::TechniqueTagFilter>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  *(void *)(a1 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)a1 = a3;
  uint64_t result = re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::setCapacity((void *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::TechniqueTagFilter>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::TechniqueTagFilter>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  if (*(re::Allocator **)a1 == a3)
  {
    uint64_t v8 = *(void *)(a1 + 16);
    *(void *)(a1 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
    if (v8)
    {
      uint64_t v9 = *(void *)(a1 + 32);
      uint64_t v10 = 32 * v8;
      do
      {
        re::StringID::destroyString((re::StringID *)(v9 + 16));
        re::StringID::destroyString((re::StringID *)v9);
        v9 += 32;
        v10 -= 32;
      }
      while (v10);
    }
  }
  else
  {
    re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::deinit(a1);
    *(void *)a1 = a3;
    re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::setCapacity((void *)a1, a4);
  }
  ++*(_DWORD *)(a1 + 24);
  re::DynamicArray<re::ecs2::VideoMaterialAttachment>::resize(a1, a4);
  {
    re::TypeRegistry::typeInfo(*(void **)a2, *(void *)(*(void *)(a2 + 16) + 72), v16);
    re::TypeInfo::TypeInfo((uint64_t)v15, (uint64_t)&v17);
    uint64_t v12 = *(void *)(a1 + 16);
    if (v12)
    {
      unint64_t v13 = *(char **)(a1 + 32);
      uint64_t v14 = 32 * v12;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v15, v13, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v15, (void **)v13, a3, 0);
        v13 += 32;
        v14 -= 32;
      }
      while (v14);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::TechniqueTagFilter>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 32) + 32 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::TechniqueTagFilter>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::TechniqueTagFilter>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 24))
  {
    int v3 = a1[3];
    unint64_t v4 = *(void *)(v2 + 16);
    if (v3 < (int)v4) {
      a1[3] = ++v3;
    }
    if (v4 <= v3) {
      return 0;
    }
    else {
      return *(void *)(v2 + 32) + 32 * v3;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::TechniqueTagFilter>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, result);
  }
  return result;
}

re::RenderGraphMeshNode *re::RenderGraphMeshNode::RenderGraphMeshNode(re::RenderGraphMeshNode *this)
{
  uint64_t v2 = re::RenderGraphNode::RenderGraphNode(this);
  *((_DWORD *)v2 + 64) = 1;
  *(void *)uint64_t v2 = &unk_26E71F980;
  int v3 = (void *)((char *)v2 + 264);
  *(_OWORD *)((char *)v2 + 264) = 0u;
  *(_OWORD *)((char *)v2 + 280) = 0u;
  re::DynamicString::setCapacity(v3, 0);
  *((void *)this + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
  *((void *)this + 3re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  *((void *)this + 39) = 0;
  *((void *)this + 37) = 0;
  *((_DWORD *)this + 80) = 0;
  *((_WORD *)this + 16re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 2;
  *((unsigned char *)this + 33re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  return this;
}

void *re::IntrospectionHashTable<re::DynamicString,re::MeshPassFilters,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::~IntrospectionHashTable(void *a1)
{
  *a1 = &unk_26E6C0400;
  uint64_t v2 = (uint64_t)(a1 + 6);
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 8));
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionHashTable<re::DynamicString,re::MeshPassFilters,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::~IntrospectionHashTable(void *a1)
{
  *a1 = &unk_26E6C0400;
  uint64_t v2 = (uint64_t)(a1 + 6);
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 8));
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

double re::IntrospectionHashTable<re::DynamicString,re::MeshPassFilters,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::construct(uint64_t a1, uint64_t a2)
{
  double result = 0.0;
  *(_OWORD *)(a2 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 3re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0x7FFFFFFF;
  return result;
}

double re::IntrospectionHashTable<re::DynamicString,re::MeshPassFilters,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::destroy(uint64_t a1, uint64_t *a2)
{
  return re::HashTable<re::DynamicString,re::MeshPassFilters,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a2);
}

void re::IntrospectionHashTable<re::DynamicString,re::MeshPassFilters,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  re::HashTable<re::DynamicString,re::MeshPassFilters,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a2);
  if (a4 <= 3) {
    signed int v7 = 3;
  }
  else {
    signed int v7 = a4;
  }
  re::HashTable<unsigned long long,re::MeshSortingCollection,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)a2, a3, v7);
}

void re::IntrospectionHashTable<re::DynamicString,re::MeshPassFilters,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(uint64_t a1, uint64_t a2, unsigned int a3)
{
}

uint64_t re::IntrospectionHashTable<re::DynamicString,re::MeshPassFilters,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::size(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 28);
}

void re::IntrospectionHashTable<re::DynamicString,re::MeshPassFilters,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(uint64_t a1, uint64_t a2)
{
}

re::IntrospectionBase *re::IntrospectionHashTable<re::DynamicString,re::MeshPassFilters,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addElement(uint64_t a1, re *a2, int a3, uint64_t a4, re::DynamicString *a5)
{
  long long v18 = 0u;
  long long v19 = 0u;
  memset(v17, 0, sizeof(v17));
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v12 = 0u;
  memset(v11, 0, sizeof(v11));
  HIDWORD(v1re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0x7FFFFFFF;
  uint64_t v8 = (re::IntrospectionBase *)re::HashTable<re::DynamicString,re::MeshPassFilters,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add(a4, a5, (uint64_t)v11);
  v9.n128_f64[0] = re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v17 + 1);
  if ((void)v15)
  {
    if (*(void *)&v17[0]) {
      (*(void (**)(double))(*(void *)v15 + 40))(v9.n128_f64[0]);
    }
    *(void *)&v17[0] = 0;
    *(void *)&long long v16 = 0;
    long long v15 = 0uLL;
    ++DWORD2(v16);
  }
  if (*((void *)&v12 + 1))
  {
    if (*((void *)&v14 + 1)) {
      (*(void (**)(__n128))(**((void **)&v12 + 1) + 40))(v9);
    }
    *((void *)&v14 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
    long long v13 = 0uLL;
    *((void *)&v12 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
    LODWORD(v14) = v14 + 1;
  }
  if (*(void *)&v11[0] && (void)v12) {
    (*(void (**)(__n128))(**(void **)&v11[0] + 40))(v9);
  }
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 64), v8);
  return v8;
}

uint64_t re::IntrospectionHashTable<re::DynamicString,re::MeshPassFilters,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::iterate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(unsigned int *)(a2 + 32);
  if (v5)
  {
    uint64_t v6 = 0;
    signed int v7 = (int *)(*(void *)(a2 + 16) + 8);
    while (1)
    {
      int v8 = *v7;
      v7 += 56;
      if (v8 < 0) {
        break;
      }
      if (v5 == ++v6)
      {
        LODWORD(vre::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(vre::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  }
  if (v5 == v6) {
    return 1;
  }
  uint64_t v10 = v6;
  do
  {
    uint64_t result = std::function<BOOL ()(void const*,void *)>::operator()(a3, *(void *)(a2 + 16) + 224 * v10 + 16, *(void *)(a2 + 16) + 224 * v10 + 48);
    if (!result) {
      break;
    }
    int v11 = *(_DWORD *)(a2 + 32) <= (v6 + 1) ? v6 + 1 : *(_DWORD *)(a2 + 32);
    while (1)
    {
      uint64_t v10 = (v6 + 1);
      if (v11 - 1 == v6) {
        break;
      }
      LODWORD(vre::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v6 + 1;
      int v12 = v10;
      if ((*(_DWORD *)(*(void *)(a2 + 16) + 224 * v10 + 8) & 0x80000000) != 0) {
        goto LABEL_18;
      }
    }
    int v12 = v11;
LABEL_18:
    LODWORD(vre::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v12;
  }
  while (v5 != v12);
  return result;
}

double re::IntrospectionHashTable<re::DynamicString,re::MeshPassFilters,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::destroyKey(int a1, re::DynamicString *this)
{
  return re::DynamicString::deinit(this);
}

void re::HashTable<re::DynamicString,re::MeshPassFilters,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(void *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<unsigned long long,re::MeshSortingCollection,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v13, v4, a2);
      long long v5 = *(_OWORD *)v13;
      *(_OWORD *)long long v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      uint64_t v6 = *(void *)&v13[16];
      uint64_t v7 = *(void *)(a1 + 16);
      *(void *)&unsigned char v13[16] = v7;
      *(void *)(a1 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v6;
      long long v9 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v9;
      uint64_t v10 = v8;
      if (v8)
      {
        uint64_t v11 = v7 + 48;
        do
        {
          if ((*(_DWORD *)(v11 - 40) & 0x80000000) != 0) {
            re::HashTable<re::DynamicString,re::MeshPassFilters,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(a1, *(void *)(v11 - 48) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(v11 - 48), (re::DynamicString *)(v11 - 32));
          }
          v11 += 224;
          --v10;
        }
        while (v10);
      }
      re::HashTable<re::DynamicString,re::MeshPassFilters,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2) {
      signed int v12 = a2;
    }
    else {
      signed int v12 = 3;
    }
  }
}

uint64_t re::HashTable<re::DynamicString,re::MeshPassFilters,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, re::DynamicString *a4, uint64_t a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::DynamicString,re::MeshPassFilters,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 224 * v9 + 8);
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 224 * v9 + 8);
    *(_DWORD *)(a1 + 3re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v12 & 0x7FFFFFFF;
  }
  uint64_t v13 = 224 * v9;
  *(_DWORD *)(v11 + 224 * v9 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v12 | 0x80000000;
  uint64_t v14 = a2;
  *(_DWORD *)(*(void *)(a1 + 16) + 224 * v9 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 224 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 224 * v9) = a3;
  re::DynamicString::DynamicString((re::DynamicString *)(*(void *)(a1 + 16) + 224 * v9 + 16), a4);
  uint64_t v15 = *(void *)(a1 + 16);
  uint64_t v16 = v15 + 224 * v9;
  *(void *)(v16 + 80) = 0;
  *(_DWORD *)(v16 + 72) = 0;
  *(void *)(v16 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  *(void *)(v16 + 64) = 0;
  *(void *)(v16 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  uint64_t v17 = *(void *)(a5 + 8);
  *(void *)(v16 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(void *)a5;
  *(void *)(v16 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v17;
  *(void *)a5 = 0;
  *(void *)(a5 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  uint64_t v18 = *(void *)(v16 + 64);
  *(void *)(v16 + 64) = *(void *)(a5 + 16);
  *(void *)(a5 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v18;
  uint64_t v19 = *(void *)(v16 + 80);
  *(void *)(v16 + 80) = *(void *)(a5 + 32);
  *(void *)(a5 + 32) = v19;
  ++*(_DWORD *)(a5 + 24);
  ++*(_DWORD *)(v16 + 72);
  *(void *)(v16 + 120) = 0;
  *(void *)(v16 + 9re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  *(void *)(v16 + 104) = 0;
  *(void *)(v16 + 8re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  *(_DWORD *)(v16 + 112) = 0;
  uint64_t v20 = *(void *)(a5 + 48);
  *(void *)(v16 + 8re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(void *)(a5 + 40);
  *(void *)(v16 + 9re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v20;
  *(void *)(a5 + 40) = 0;
  *(void *)(a5 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  uint64_t v21 = *(void *)(v16 + 104);
  *(void *)(v16 + 104) = *(void *)(a5 + 56);
  *(void *)(a5 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v21;
  uint64_t v22 = *(void *)(v16 + 120);
  *(void *)(v16 + 120) = *(void *)(a5 + 72);
  *(void *)(a5 + 72) = v22;
  ++*(_DWORD *)(a5 + 64);
  ++*(_DWORD *)(v16 + 112);
  *(void *)(v16 + 160) = 0;
  *(void *)(v16 + 13re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  *(void *)(v16 + 144) = 0;
  *(void *)(v16 + 12re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  *(_DWORD *)(v16 + 152) = 0;
  uint64_t v23 = *(void *)(a5 + 88);
  *(void *)(v16 + 12re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(void *)(a5 + 80);
  *(void *)(v16 + 13re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v23;
  *(void *)(a5 + 80) = 0;
  *(void *)(a5 + 8re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  uint64_t v24 = *(void *)(v16 + 144);
  *(void *)(v16 + 144) = *(void *)(a5 + 96);
  *(void *)(a5 + 9re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v24;
  uint64_t v25 = *(void *)(v16 + 160);
  *(void *)(v16 + 160) = *(void *)(a5 + 112);
  *(void *)(a5 + 112) = v25;
  ++*(_DWORD *)(a5 + 104);
  ++*(_DWORD *)(v16 + 152);
  *(_OWORD *)(v16 + 16re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
  v16 += 168;
  *(_OWORD *)(v16 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0u;
  *(_DWORD *)(v16 + 32) = 0;
  *(void *)(v16 + 3re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0x7FFFFFFFLL;
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)(v15 + 224 * v9 + 168), (uint64_t *)(a5 + 120));
  *(unsigned char *)(v15 + v13 + 21re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = *(unsigned char *)(a5 + 168);
  int v26 = *(unsigned __int8 *)(a5 + 169);
  *(unsigned char *)(v15 + v13 + 217) = v26;
  if (v26) {
    *(_DWORD *)(v15 + 224 * v9 + 21re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_DWORD *)(a5 + 170);
  }
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * v14) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<re::DynamicString,re::MeshPassFilters,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 28))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 24);
    if (v2) {
      memset_pattern16(*(void **)(a1 + 8), &unk_2343655D0, 4 * v2);
    }
    if (*(_DWORD *)(a1 + 32))
    {
      uint64_t v3 = 0;
      unint64_t v4 = 0;
      do
      {
        re::HashTable<re::DynamicString,re::MeshPassFilters,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::EntryWithHash::free(*(void *)(a1 + 16) + v3);
        ++v4;
        v3 += 224;
      }
      while (v4 < *(unsigned int *)(a1 + 32));
    }
    *(_DWORD *)(a1 + 2re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    int v5 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 3re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v5;
  }
}

uint64_t re::HashTable<re::DynamicString,re::MeshPassFilters,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add(uint64_t a1, re::DynamicString *a2, uint64_t a3)
{
  unint64_t v6 = re::Hash<re::DynamicString>::operator()((uint64_t)&v54, (uint64_t)a2);
  unint64_t v7 = v6;
  if (*(void *)a1)
  {
    unint64_t v8 = v6 % *(unsigned int *)(a1 + 24);
    uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v8);
    if (v9 != 0x7FFFFFFF)
    {
      uint64_t v10 = *(void *)(a1 + 16);
      while (!re::DynamicString::operator==(v10 + 224 * v9 + 16, (uint64_t)a2))
      {
        uint64_t v9 = *(_DWORD *)(v10 + 224 * v9 + 8) & 0x7FFFFFFF;
        if (v9 == 0x7FFFFFFF) {
          goto LABEL_8;
        }
      }
      uint64_t v14 = v10 + 224 * v9;
      re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v14 + 48, a3);
      re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v14 + 88, a3 + 40);
      re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v14 + 128, a3 + 80);
      if (v14 + 48 != a3)
      {
        uint64_t v15 = (uint64_t *)(a3 + 120);
        uint64_t v18 = *(void *)(v14 + 168);
        uint64_t v17 = (uint64_t *)(v14 + 168);
        uint64_t v16 = v18;
        if (!v18 || (uint64_t v19 = *v15, v16 == *v15))
        {
          re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap(v17, v15);
        }
        else
        {
          re::HashTable<re::DynamicString,unsigned long long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear((uint64_t)v17);
          if (v19)
          {
            char v53 = (unsigned int *)(v10 + 224 * v9 + 192);
            unsigned int v20 = *(_DWORD *)(a3 + 148);
            if (*v53 < v20) {
              re::HashTable<re::DynamicString,unsigned short,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity((uint64_t)v17, v20);
            }
            uint64_t v46 = (uint64_t)v17;
            unint64_t v21 = *(unsigned int *)(a3 + 152);
            if (v21)
            {
              uint64_t v22 = 0;
              unint64_t v23 = 0;
              uint64_t v24 = v10 + 224 * v9;
              uint64_t v25 = (int *)(v24 + 204);
              int v26 = (uint64_t *)(v24 + 184);
              char v47 = (unsigned int *)(v24 + 200);
              uint64_t v48 = a3;
              long long v50 = (int *)(v24 + 204);
              char v51 = (_DWORD *)(v24 + 196);
              long long v49 = (void *)(v24 + 176);
              uint64_t v52 = (uint64_t *)(v24 + 184);
              do
              {
                uint64_t v27 = (unint64_t *)(*(void *)(a3 + 136) + v22);
                if ((v27[1] & 0x80000000) != 0)
                {
                  uint64_t v28 = (const re::DynamicString *)(v27 + 2);
                  unint64_t v29 = *v27;
                  unint64_t v30 = *v53;
                  unint64_t v31 = *v27 % v30;
                  uint64_t v32 = *v25;
                  if (v32 == 0x7FFFFFFF)
                  {
                    uint64_t v33 = v47;
                    uint64_t v32 = *v47;
                    int v34 = v32;
                    if (v32 == v30)
                    {
                      unint64_t v35 = *v27;
                      re::HashTable<re::DynamicString,unsigned short,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(v46, 2 * *v51);
                      unint64_t v29 = v35;
                      uint64_t v28 = (const re::DynamicString *)(v27 + 2);
                      uint64_t v33 = v47;
                      int v26 = v52;
                      unint64_t v31 = v35 % *v53;
                      int v34 = *v47;
                    }
                    *uint64_t v33 = v34 + 1;
                    uint64_t v36 = *v26;
                    int v37 = *(_DWORD *)(*v26 + 56 * v32 + 8);
                  }
                  else
                  {
                    uint64_t v36 = *v26;
                    int v37 = *(_DWORD *)(*v26 + 56 * v32 + 8);
                    *uint64_t v25 = v37 & 0x7FFFFFFF;
                  }
                  *(_DWORD *)(v36 + 56 * v32 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v37 | 0x80000000;
                  *(_DWORD *)(*v26 + 56 * v32 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_DWORD *)(*v26 + 56 * v32 + 8) & 0x80000000 | *(_DWORD *)(*v49 + 4 * v31);
                  *(void *)(*v26 + 56 * v32) = v29;
                  re::DynamicString::DynamicString((re::DynamicString *)(*v26 + 56 * v32 + 16), v28);
                  int v26 = v52;
                  *(_WORD *)(*v52 + 56 * v32 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *((_WORD *)v27 + 24);
                  *(_DWORD *)(*v49 + 4 * v3re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = v32;
                  uint64_t v25 = v50;
                  ++*v51;
                  a3 = v48;
                  unint64_t v21 = *(unsigned int *)(v48 + 152);
                }
                ++v23;
                v22 += 56;
              }
              while (v23 < v21);
            }
            ++*(_DWORD *)(v10 + 224 * v9 + 208);
          }
        }
      }
      uint64_t v38 = v10 + 224 * v9;
      int v41 = *(unsigned __int8 *)(v38 + 217);
      uint64_t v39 = (unsigned char *)(v38 + 217);
      int v40 = v41;
      *(v39 - re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = *(unsigned char *)(a3 + 168);
      int v42 = *(unsigned __int8 *)(a3 + 169);
      if (v41) {
        BOOL v43 = 0;
      }
      else {
        BOOL v43 = v42 == 0;
      }
      if (v43) {
        goto LABEL_45;
      }
      if (v40) {
        BOOL v44 = v42 == 0;
      }
      else {
        BOOL v44 = 0;
      }
      if (v44)
      {
        *uint64_t v39 = 0;
      }
      else
      {
        if (v40) {
          BOOL v45 = 1;
        }
        else {
          BOOL v45 = v42 == 0;
        }
        if (v45)
        {
          if (v39 == (unsigned char *)(a3 + 169)) {
            goto LABEL_45;
          }
        }
        else
        {
          *uint64_t v39 = 1;
        }
        *(_DWORD *)(v10 + 224 * v9 + 21re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_DWORD *)(a3 + 170);
      }
LABEL_45:
      ++*(_DWORD *)(a1 + 40);
      uint64_t v12 = *(void *)(a1 + 16) + 224 * v9;
      return v12 + 48;
    }
  }
  else
  {
    LODWORD(vre::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  }
LABEL_8:
  unsigned int v11 = re::HashTable<re::DynamicString,re::MeshPassFilters,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(a1, v8, v7, a2, a3);
  ++*(_DWORD *)(a1 + 40);
  uint64_t v12 = *(void *)(a1 + 16) + 224 * v11;
  return v12 + 48;
}

void re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MeshPassFilters,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 3re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0x7FFFFFFF;
  re::HashTable<unsigned long long,re::MeshSortingCollection,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init(a1, a3, 3);
}

double re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MeshPassFilters,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t *a1)
{
  re::HashTable<re::DynamicString,re::MeshPassFilters,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a1);
  return re::HashTable<re::DynamicString,re::MeshPassFilters,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a1);
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MeshPassFilters,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

void re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MeshPassFilters,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (*a1 == a3)
  {
    re::HashTable<re::DynamicString,re::MeshPassFilters,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear((uint64_t)a1);
  }
  else
  {
    re::HashTable<re::DynamicString,re::MeshPassFilters,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a1);
    re::HashTable<unsigned long long,re::MeshSortingCollection,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)a1, a3, 3);
  }
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MeshPassFilters,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke(uint64_t a1, void **a2, re::Allocator *a3, re::DynamicString *a4)
{
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  Instance = re::TypeInfo::createInstance((re::TypeInfo *)v11, a3, 0);
  uint64_t v9 = re::HashTable<re::DynamicString,re::MeshPassFilters,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add(a1, a4, (uint64_t)Instance);
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  re::TypeInfo::releaseInstance((re::TypeInfo *)v11, Instance, a3, 0);
  return v9;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MeshPassFilters,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = re::Hash<re::DynamicString>::operator()((uint64_t)&v8, a2);
  if (!*(void *)a1) {
    return 0;
  }
  uint64_t v5 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * (v4 % *(unsigned int *)(a1 + 24)));
  if (v5 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 16);
  while (!re::DynamicString::operator==(v6 + 224 * v5 + 16, a2))
  {
    uint64_t v5 = *(_DWORD *)(v6 + 224 * v5 + 8) & 0x7FFFFFFF;
    if (v5 == 0x7FFFFFFF) {
      return 0;
    }
  }
  return v6 + 224 * v5 + 48;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MeshPassFilters,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 40, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_DWORD *)(a1 + 40);
  *(unsigned char *)(result + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MeshPassFilters,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (*((_DWORD *)a1 + 2) == *(_DWORD *)(*a1 + 40))
  {
    uint64_t v3 = *(unsigned int *)(v2 + 32);
    if (*((unsigned char *)a1 + 16))
    {
      int v4 = *((_DWORD *)a1 + 8);
      if (v4 == v3)
      {
        LODWORD(v5) = *(_DWORD *)(v2 + 32);
      }
      else
      {
        uint64_t v8 = a1[3];
        unsigned int v9 = *(_DWORD *)(v8 + 32);
        unsigned int v10 = v4 + 1;
        do
        {
          LODWORD(v5) = v10;
          *((_DWORD *)a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v10;
          if (v10 >= v9) {
            break;
          }
          int v11 = *(_DWORD *)(*(void *)(v8 + 16) + 224 * v10++ + 8);
        }
        while ((v11 & 0x80000000) == 0);
      }
    }
    else
    {
      uint64_t v5 = 0;
      if (v3)
      {
        uint64_t v6 = (int *)(*(void *)(v2 + 16) + 8);
        while (1)
        {
          int v7 = *v6;
          v6 += 56;
          if (v7 < 0) {
            break;
          }
          if (v3 == ++v5)
          {
            LODWORD(v5) = *(_DWORD *)(v2 + 32);
            break;
          }
        }
      }
      *((unsigned char *)a1 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 1;
      a1[3] = v2;
      a1[4] = v5;
      LODWORD(v3) = *(_DWORD *)(v2 + 32);
    }
    return v5 != v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 583);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MeshPassFilters,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(void *)a1 + 40)) {
    return *(void *)(*(void *)(a1 + 24) + 16) + 224 * *(unsigned int *)(a1 + 32) + 16;
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 598);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MeshPassFilters,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(void *)a1 + 40)) {
    return *(void *)(*(void *)(a1 + 24) + 16) + 224 * *(unsigned int *)(a1 + 32) + 48;
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 607);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MeshPassFilters,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 40))
  {
    uint64_t v2 = *(uint64_t (**)(uint64_t, _DWORD *))(*(void *)a2 + 40);
    return v2(a2, a1);
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 616);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

void *re::IntrospectionDynamicArray<re::MeshPassFilterFlags>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::MeshPassFilterFlags>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionDynamicArray<re::MeshPassFilterFlags>::construct(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  *(void *)(a2 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::MeshPassFilterFlags>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<unsigned long>::deinit(a2);
}

void *re::IntrospectionDynamicArray<re::MeshPassFilterFlags>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<unsigned long>::deinit(a2);
  *(void *)a2 = a3;
  uint64_t result = re::DynamicArray<BOOL>::setCapacity((void *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::MeshPassFilterFlags>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (!*(void *)a4)
  {
    *(void *)a4 = a2;
    re::DynamicArray<BOOL>::setCapacity((void *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  unint64_t v10 = *(void *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
    {
      re::DynamicArray<BOOL>::resize(a4, a5);
    }
  }
  else
  {
    re::DynamicArray<BOOL>::setCapacity((void *)a4, a5);
    for (unint64_t i = a5 - *(void *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::MeshPassFilterFlags>::addElement(re::Allocator **a1, re *this, int a3, uint64_t a4)
{
  unint64_t v9 = *(void *)(a4 + 8);
  unint64_t v8 = *(void *)(a4 + 16);
  if (v8 >= v9)
  {
    unint64_t v10 = v8 + 1;
    if (v9 < v8 + 1)
    {
      if (*(void *)a4)
      {
        unint64_t v11 = 2 * v9;
        if (!v9) {
          unint64_t v11 = 8;
        }
        if (v11 <= v10) {
          unint64_t v12 = v10;
        }
        else {
          unint64_t v12 = v11;
        }
        re::DynamicArray<BOOL>::setCapacity((void *)a4, v12);
      }
      else
      {
        re::DynamicArray<BOOL>::setCapacity((void *)a4, v10);
        ++*(_DWORD *)(a4 + 24);
      }
    }
    unint64_t v8 = *(void *)(a4 + 16);
  }
  uint64_t v13 = (re::IntrospectionBase *)(*(void *)(a4 + 32) + v8);
  *(unsigned char *)uint64_t v13 = 0;
  *(void *)(a4 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v8 + 1;
  ++*(_DWORD *)(a4 + 24);
  re::introspectionInitElement(this, a3, a1[6], v13);
  return v13;
}

uint64_t re::IntrospectionDynamicArray<re::MeshPassFilterFlags>::size(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

unint64_t re::IntrospectionDynamicArray<re::MeshPassFilterFlags>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + a3;
}

{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + a3;
}

void *re::TypeBuilderHelper::registerDynamicArray<re::MeshPassFilterFlags>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  *(void *)(a1 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)a1 = a3;
  uint64_t result = re::DynamicArray<BOOL>::setCapacity((void *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshPassFilterFlags>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::MeshPassFilterFlags>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  if (*(re::Allocator **)a1 == a3)
  {
    *(void *)(a1 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  }
  else
  {
    re::DynamicArray<unsigned long>::deinit(a1);
    *(void *)a1 = a3;
    re::DynamicArray<BOOL>::setCapacity((void *)a1, a4);
  }
  ++*(_DWORD *)(a1 + 24);
  re::DynamicArray<BOOL>::resize(a1, a4);
  {
    re::TypeRegistry::typeInfo(*(void **)a2, *(void *)(*(void *)(a2 + 16) + 72), v12);
    re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)&v13);
    uint64_t v9 = *(void *)(a1 + 16);
    if (v9)
    {
      unint64_t v10 = *(void ***)(a1 + 32);
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v11, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v11, v10, a3, 0);
        unint64_t v10 = (void **)((char *)v10 + 1);
        --v9;
      }
      while (v9);
    }
  }
}

unint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshPassFilterFlags>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 32) + a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshPassFilterFlags>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshPassFilterFlags>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 24))
  {
    int v3 = a1[3];
    unint64_t v4 = *(void *)(v2 + 16);
    if (v3 < (int)v4) {
      a1[3] = ++v3;
    }
    if (v4 <= v3) {
      return 0;
    }
    else {
      return *(void *)(v2 + 32) + v3;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshPassFilterFlags>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, result);
  }
  return result;
}

re::RenderGraphMaterialReplaceNode *re::RenderGraphMaterialReplaceNode::RenderGraphMaterialReplaceNode(re::RenderGraphMaterialReplaceNode *this)
{
  uint64_t v2 = re::RenderGraphNode::RenderGraphNode(this);
  *((_DWORD *)v2 + 64) = 1;
  *(void *)uint64_t v2 = &unk_26E71FC50;
  int v3 = (void *)((char *)v2 + 296);
  *(_OWORD *)((char *)v2 + 264) = 0u;
  *(_OWORD *)((char *)v2 + 280) = 0u;
  *(_OWORD *)((char *)v2 + 29re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0u;
  *(_OWORD *)((char *)v2 + 312) = 0u;
  unint64_t v4 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v3, 0);
  *(_OWORD *)((char *)this + 32re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  re::DynamicString::setCapacity((void *)this + 41, 0);
  *((_WORD *)this + 180) = 2;
  return this;
}

void *re::IntrospectionHashTable<re::DynamicString,unsigned short,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::~IntrospectionHashTable(void *a1)
{
  *a1 = &unk_26E6C0400;
  uint64_t v2 = (uint64_t)(a1 + 6);
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 8));
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionHashTable<re::DynamicString,unsigned short,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::~IntrospectionHashTable(void *a1)
{
  *a1 = &unk_26E6C0400;
  uint64_t v2 = (uint64_t)(a1 + 6);
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 8));
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

double re::IntrospectionHashTable<re::DynamicString,unsigned short,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::construct(uint64_t a1, uint64_t a2)
{
  double result = 0.0;
  *(_OWORD *)(a2 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 3re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0x7FFFFFFF;
  return result;
}

double re::IntrospectionHashTable<re::DynamicString,unsigned short,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::destroy(uint64_t a1, uint64_t *a2)
{
  return re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a2);
}

void re::IntrospectionHashTable<re::DynamicString,unsigned short,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a2);
  if (a4 <= 3) {
    signed int v7 = 3;
  }
  else {
    signed int v7 = a4;
  }
  re::HashTable<re::Pair<re::StringSlice,re::StringSlice,true>,unsigned long,re::Hash<re::Pair<re::StringSlice,re::StringSlice,true>>,re::EqualTo<re::Pair<re::StringSlice,re::StringSlice,true>>,true,false>::init((uint64_t)a2, a3, v7);
}

void re::IntrospectionHashTable<re::DynamicString,unsigned short,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(uint64_t a1, uint64_t a2, unsigned int a3)
{
}

uint64_t re::IntrospectionHashTable<re::DynamicString,unsigned short,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::size(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 28);
}

void re::IntrospectionHashTable<re::DynamicString,unsigned short,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(uint64_t a1, uint64_t a2)
{
}

re::IntrospectionBase *re::IntrospectionHashTable<re::DynamicString,unsigned short,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addElement(uint64_t a1, re *a2, int a3, uint64_t a4, re::DynamicString *a5)
{
  __int16 v10 = 0;
  unint64_t v8 = (re::IntrospectionBase *)re::HashTable<re::DynamicString,unsigned short,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addOrReplace(a4, a5, &v10);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 64), v8);
  return v8;
}

uint64_t re::IntrospectionHashTable<re::DynamicString,unsigned short,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::iterate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(unsigned int *)(a2 + 32);
  if (v5)
  {
    uint64_t v6 = 0;
    signed int v7 = (int *)(*(void *)(a2 + 16) + 8);
    while (1)
    {
      int v8 = *v7;
      v7 += 14;
      if (v8 < 0) {
        break;
      }
      if (v5 == ++v6)
      {
        LODWORD(vre::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(vre::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  }
  if (v5 == v6) {
    return 1;
  }
  uint64_t v10 = v6;
  do
  {
    uint64_t result = std::function<BOOL ()(void const*,void *)>::operator()(a3, *(void *)(a2 + 16) + 56 * v10 + 16, *(void *)(a2 + 16) + 56 * v10 + 48);
    if (!result) {
      break;
    }
    int v11 = *(_DWORD *)(a2 + 32) <= (v6 + 1) ? v6 + 1 : *(_DWORD *)(a2 + 32);
    while (1)
    {
      uint64_t v10 = (v6 + 1);
      if (v11 - 1 == v6) {
        break;
      }
      LODWORD(vre::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v6 + 1;
      int v12 = v10;
      if ((*(_DWORD *)(*(void *)(a2 + 16) + 56 * v10 + 8) & 0x80000000) != 0) {
        goto LABEL_18;
      }
    }
    int v12 = v11;
LABEL_18:
    LODWORD(vre::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v12;
  }
  while (v5 != v12);
  return result;
}

double re::IntrospectionHashTable<re::DynamicString,unsigned short,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::destroyKey(int a1, re::DynamicString *this)
{
  return re::DynamicString::deinit(this);
}

uint64_t re::HashTable<re::DynamicString,unsigned short,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addOrReplace(uint64_t a1, re::DynamicString *a2, _WORD *a3)
{
  unint64_t v6 = re::Hash<re::DynamicString>::operator()((uint64_t)&v14, (uint64_t)a2);
  unint64_t v7 = v6;
  if (!*(void *)a1)
  {
    LODWORD(vre::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
    goto LABEL_8;
  }
  unint64_t v8 = v6 % *(unsigned int *)(a1 + 24);
  uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v8);
  if (v9 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v11 = re::HashTable<re::DynamicString,unsigned short,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v12 = *(void *)(a1 + 16) + 56 * v11;
    return v12 + 48;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  while (!re::DynamicString::operator==(v10 + 56 * v9 + 16, (uint64_t)a2))
  {
    uint64_t v9 = *(_DWORD *)(v10 + 56 * v9 + 8) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  *(_WORD *)(v10 + 56 * v9 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *a3;
  ++*(_DWORD *)(a1 + 40);
  uint64_t v12 = *(void *)(a1 + 16) + 56 * v9;
  return v12 + 48;
}

void re::TypeBuilderHelper::registerHashTable<re::DynamicString,unsigned short,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 3re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0x7FFFFFFF;
  re::HashTable<re::Pair<re::StringSlice,re::StringSlice,true>,unsigned long,re::Hash<re::Pair<re::StringSlice,re::StringSlice,true>>,re::EqualTo<re::Pair<re::StringSlice,re::StringSlice,true>>,true,false>::init(a1, a3, 3);
}

double re::TypeBuilderHelper::registerHashTable<re::DynamicString,unsigned short,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t *a1)
{
  re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a1);
  return re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a1);
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,unsigned short,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

void re::TypeBuilderHelper::registerHashTable<re::DynamicString,unsigned short,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (*a1 == a3)
  {
    re::HashTable<re::DynamicString,unsigned long long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear((uint64_t)a1);
  }
  else
  {
    re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a1);
    re::HashTable<re::Pair<re::StringSlice,re::StringSlice,true>,unsigned long,re::Hash<re::Pair<re::StringSlice,re::StringSlice,true>>,re::EqualTo<re::Pair<re::StringSlice,re::StringSlice,true>>,true,false>::init((uint64_t)a1, a3, 3);
  }
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,unsigned short,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke(uint64_t a1, void **a2, re::Allocator *a3, re::DynamicString *a4)
{
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  Instance = re::TypeInfo::createInstance((re::TypeInfo *)v11, a3, 0);
  uint64_t v9 = re::HashTable<re::DynamicString,unsigned short,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addOrReplace(a1, a4, Instance);
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  re::TypeInfo::releaseInstance((re::TypeInfo *)v11, Instance, a3, 0);
  return v9;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,unsigned short,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 40, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_DWORD *)(a1 + 40);
  *(unsigned char *)(result + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,unsigned short,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (*((_DWORD *)a1 + 2) == *(_DWORD *)(*a1 + 40))
  {
    uint64_t v3 = *(unsigned int *)(v2 + 32);
    if (*((unsigned char *)a1 + 16))
    {
      int v4 = *((_DWORD *)a1 + 8);
      if (v4 == v3)
      {
        LODWORD(v5) = *(_DWORD *)(v2 + 32);
      }
      else
      {
        uint64_t v8 = a1[3];
        unsigned int v9 = *(_DWORD *)(v8 + 32);
        unsigned int v10 = v4 + 1;
        do
        {
          LODWORD(v5) = v10;
          *((_DWORD *)a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v10;
          if (v10 >= v9) {
            break;
          }
          int v11 = *(_DWORD *)(*(void *)(v8 + 16) + 56 * v10++ + 8);
        }
        while ((v11 & 0x80000000) == 0);
      }
    }
    else
    {
      uint64_t v5 = 0;
      if (v3)
      {
        unint64_t v6 = (int *)(*(void *)(v2 + 16) + 8);
        while (1)
        {
          int v7 = *v6;
          v6 += 14;
          if (v7 < 0) {
            break;
          }
          if (v3 == ++v5)
          {
            LODWORD(v5) = *(_DWORD *)(v2 + 32);
            break;
          }
        }
      }
      *((unsigned char *)a1 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 1;
      a1[3] = v2;
      a1[4] = v5;
      LODWORD(v3) = *(_DWORD *)(v2 + 32);
    }
    return v5 != v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 583);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,unsigned short,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(void *)a1 + 40)) {
    return *(void *)(*(void *)(a1 + 24) + 16) + 56 * *(unsigned int *)(a1 + 32) + 16;
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 598);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,unsigned short,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(void *)a1 + 40)) {
    return *(void *)(*(void *)(a1 + 24) + 16) + 56 * *(unsigned int *)(a1 + 32) + 48;
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 607);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,unsigned short,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 40))
  {
    uint64_t v2 = *(uint64_t (**)(uint64_t, _DWORD *))(*(void *)a2 + 40);
    return v2(a2, a1);
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 616);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

void re::ar::DualGuidedFilter::create(re::ar::DualGuidedFilter *this@<X0>, const re::mtl::Device *a2@<X1>, void *a3@<X8>)
{
  id v4 = (id)[objc_alloc((Class)getARDualGuidedFilterClass()) initWithDevice:*(void *)this useSmoothing:a2];
  *a3 = v4;
}

void re::ar::DualGuidedFilter::encodeDualCoefficients(void **a1, void **a2, void **a3, void **a4, id *a5, uint64_t *a6)
{
  unint64_t v6 = *a1;
  int v7 = *a2;
  uint64_t v8 = *a3;
  unsigned int v9 = *a4;
  uint64_t v10 = *a6;
  id v11 = *a5;
  id v12 = v9;
  id v13 = v8;
  id v14 = v7;
  id v15 = v6;
  [v15 encodeDualCoefficients:v14 guide:v13 stencil:v12 coefficientsTextureFG:v11 coefficientsTextureBG:v10];
}

Class initARDualGuidedFilter(void)
{
  if (qword_26AF9DE00 != -1) {
    dispatch_once(&qword_26AF9DE00, &__block_literal_global_43);
  }
  Class result = objc_getClass("ARDualGuidedFilter");
  _MergedGlobals_482 = (uint64_t)result;
  getARDualGuidedFilterClass = (uint64_t (*)(void))ARDualGuidedFilterFunction;
  return result;
}

id ARDualGuidedFilterFunction(void)
{
  return (id)_MergedGlobals_482;
}

void ___ZL9LoadARKitv_block_invoke()
{
  LoadARKit(void)::frameworkLibrary = (uint64_t)dlopen("/System/Library/Frameworks/ARKit.framework/ARKit", 2);
  if (!LoadARKit(void)::frameworkLibrary) {
    NSLog(&cfstr_FailedToSoftLi.isa);
  }
}

void re::ARGuidedFilterOcclusionNode::setup(re::ARGuidedFilterOcclusionNode *this, re::RenderGraphBuilder *a2, re::RenderGraphDataStore *a3)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  *((_WORD *)a2 + 29re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 257;
  *(_DWORD *)((char *)&v6 + 3) = 0;
  LODWORD(vre::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  uint64_t v7 = 2;
  re::RenderGraphBuilder::read((uint64_t)a2, (uint64_t)this + 256, (uint64_t)&v6);
  *(_DWORD *)((char *)&v6 + 3) = 0;
  LODWORD(vre::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  uint64_t v7 = 2;
  re::RenderGraphBuilder::read((uint64_t)a2, (uint64_t)this + 272, (uint64_t)&v6);
  *(_DWORD *)((char *)&v6 + 3) = 0;
  LODWORD(vre::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  uint64_t v7 = 2;
  re::RenderGraphBuilder::read((uint64_t)a2, (uint64_t)this + 288, (uint64_t)&v6);
  *(_DWORD *)((char *)&v6 + 3) = 0;
  LODWORD(vre::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  uint64_t v7 = 2;
  re::RenderGraphBuilder::read((uint64_t)a2, (uint64_t)this + 304, (uint64_t)&v6);
  uint64_t v6 = 0x500000000;
  long long v8 = xmmword_23435FBB0;
  __int16 v9 = 0;
  uint64_t v10 = 0;
  re::RenderGraphBuilder::write((uint64_t)a2, (uint64_t)this + 320, (uint64_t)&v6);
  *(_DWORD *)((char *)&v6 + 3) = 0;
  LODWORD(vre::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  uint64_t v7 = 2;
  re::RenderGraphBuilder::read((uint64_t)a2, (uint64_t)this + 320, (uint64_t)&v6);
  uint64_t v6 = 0x500000000;
  long long v8 = xmmword_23435FBB0;
  __int16 v9 = 0;
  uint64_t v10 = 0;
  re::RenderGraphBuilder::write((uint64_t)a2, (uint64_t)this + 336, (uint64_t)&v6);
  *(_DWORD *)((char *)&v6 + 3) = 0;
  LODWORD(vre::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  uint64_t v7 = 2;
  re::RenderGraphBuilder::read((uint64_t)a2, (uint64_t)this + 336, (uint64_t)&v6);
  uint64_t v6 = 0x500000000;
  long long v8 = xmmword_23435FBB0;
  __int16 v9 = 0;
  uint64_t v10 = 0;
  re::RenderGraphBuilder::write((uint64_t)a2, (uint64_t)this + 352, (uint64_t)&v6);
  *(_DWORD *)((char *)&v6 + 3) = 0;
  LODWORD(vre::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  uint64_t v7 = 2;
  re::RenderGraphBuilder::read((uint64_t)a2, (uint64_t)this + 352, (uint64_t)&v6);
  uint64_t v6 = 0x500000000;
  long long v8 = xmmword_23435FBB0;
  __int16 v9 = 0;
  uint64_t v10 = 0;
  re::RenderGraphBuilder::write((uint64_t)a2, (uint64_t)this + 368, (uint64_t)&v6);
  *(_DWORD *)((char *)&v6 + 3) = 0;
  LODWORD(vre::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  uint64_t v7 = 2;
  re::RenderGraphBuilder::read((uint64_t)a2, (uint64_t)this + 368, (uint64_t)&v6);
  uint64_t v6 = 0x500000000;
  long long v8 = xmmword_23435FBB0;
  __int16 v9 = 0;
  uint64_t v10 = 0;
  re::RenderGraphBuilder::write((uint64_t)a2, (uint64_t)this + 384, (uint64_t)&v6);
  *(_DWORD *)((char *)&v6 + 3) = 0;
  LODWORD(vre::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  uint64_t v7 = 2;
  re::RenderGraphBuilder::read((uint64_t)a2, (uint64_t)this + 384, (uint64_t)&v6);
  uint64_t v6 = 0x500000000;
  long long v8 = xmmword_23435FBB0;
  __int16 v9 = 0;
  uint64_t v10 = 0;
  re::RenderGraphBuilder::write((uint64_t)a2, (uint64_t)this + 400, (uint64_t)&v6);
  *(_DWORD *)((char *)&v6 + 3) = 0;
  LODWORD(vre::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  uint64_t v7 = 2;
  re::RenderGraphBuilder::read((uint64_t)a2, (uint64_t)this + 400, (uint64_t)&v6);
  uint64_t v6 = 0x500000000;
  long long v8 = xmmword_23435FBB0;
  __int16 v9 = 0;
  uint64_t v10 = 0;
  re::RenderGraphBuilder::write((uint64_t)a2, (uint64_t)this + 416, (uint64_t)&v6);
  *(_DWORD *)((char *)&v6 + 3) = 0;
  LODWORD(vre::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  uint64_t v7 = 2;
  re::RenderGraphBuilder::read((uint64_t)a2, (uint64_t)this + 416, (uint64_t)&v6);
  uint64_t v6 = 0x500000000;
  long long v8 = xmmword_23435FBB0;
  __int16 v9 = 0;
  uint64_t v10 = 0;
  re::RenderGraphBuilder::write((uint64_t)a2, (uint64_t)this + 432, (uint64_t)&v6);
  *(_DWORD *)((char *)&v6 + 3) = 0;
  LODWORD(vre::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  uint64_t v7 = 2;
  re::RenderGraphBuilder::read((uint64_t)a2, (uint64_t)this + 432, (uint64_t)&v6);
  uint64_t v6 = 0x500000000;
  long long v8 = xmmword_23435FBB0;
  __int16 v9 = 0;
  uint64_t v10 = 0;
  re::RenderGraphBuilder::write((uint64_t)a2, (uint64_t)this + 448, (uint64_t)&v6);
  *(_DWORD *)((char *)&v6 + 3) = 0;
  LODWORD(vre::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  uint64_t v7 = 2;
  re::RenderGraphBuilder::read((uint64_t)a2, (uint64_t)this + 448, (uint64_t)&v6);
  uint64_t v6 = 0x500000000;
  long long v8 = xmmword_23435FBB0;
  __int16 v9 = 0;
  uint64_t v10 = 0;
  re::RenderGraphBuilder::write((uint64_t)a2, (uint64_t)this + 464, (uint64_t)&v6);
  *(_DWORD *)((char *)&v6 + 3) = 0;
  LODWORD(vre::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  uint64_t v7 = 2;
  re::RenderGraphBuilder::read((uint64_t)a2, (uint64_t)this + 464, (uint64_t)&v6);
  uint64_t v6 = 0x500000000;
  long long v8 = xmmword_23435FBB0;
  __int16 v9 = 0;
  uint64_t v10 = 0;
  re::RenderGraphBuilder::write((uint64_t)a2, (uint64_t)this + 480, (uint64_t)&v6);
  *(_DWORD *)((char *)&v6 + 3) = 0;
  LODWORD(vre::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  uint64_t v7 = 2;
  re::RenderGraphBuilder::read((uint64_t)a2, (uint64_t)this + 480, (uint64_t)&v6);
  uint64_t v6 = 0x500000000;
  long long v8 = xmmword_23435FBB0;
  __int16 v9 = 0;
  uint64_t v10 = 0;
  re::RenderGraphBuilder::write((uint64_t)a2, (uint64_t)this + 496, (uint64_t)&v6);
  re::RenderGraphNode::setup(this, a2, a3);
}

void re::ARGuidedFilterOcclusionNode::execute(re::ARGuidedFilterOcclusionNode *this, re::RenderGraphContext *a2)
{
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v66, 5087, 0);
  id v4 = objc_retain(*(id *)(re::DrawingManager::currentCommandBuffer(*(re::DrawingManager **)(*((void *)a2 + 1) + 104))
                         + 16));
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9DE10, memory_order_acquire) & 1) == 0)
  {
    id v14 = (re *)__cxa_guard_acquire(&qword_26AF9DE10);
    if (v14)
    {
      _MergedGlobals_483 = re::getCombinedScopeHash(v14, v15, v16);
      __cxa_guard_release(&qword_26AF9DE10);
    }
  }
  uint64_t v5 = re::RenderGraphDataStore::tryGet<re::SceneUnderstandingGuidedFilterOcclusionData>(*((void *)a2 + 146), _MergedGlobals_483);
  uint64_t v6 = *(void **)(v5 + 32);
  uint64_t v7 = *v6;
  BOOL v8 = *v6 == 0;
  id v60 = *(id *)(*((void *)a2 + 1) + 184);
  id v9 = v4;
  id v59 = v9;
  char v10 = *(unsigned char *)(v5 + 184);
  id v62 = 0;
  id v63 = 0;
  locatiounint64_t n = 0;
  char v64 = v10;
  uint64_t v65 = 0;
  re::ObjCObject::operator=(&v62, &v59);
  re::ObjCObject::operator=(&location, &v60);

  id v52 = *(id *)(*((void *)a2 + 1) + 184);
  long long v53 = 0u;
  long long v54 = 0u;
  uint64_t v56 = v5;
  id v57 = 0;
  char v58 = 0;
  id v55 = 0;
  re::ObjCObject::operator=(&v57, &v52);

  re::guided_filter_occlusion::GuidedFilterOcclusionTextureRecycler::prepareTexturesForFrame((re::guided_filter_occlusion::GuidedFilterOcclusionTextureRecycler *)&v53);
  if (v58) {
    char v11 = 1;
  }
  else {
    char v11 = v8;
  }
  char v12 = *(unsigned char *)(v5 + 185) | v11;
  id v46 = *(id *)(*((void *)a2 + 1) + 184);
  long long v47 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  uint64_t v50 = v5;
  id v51 = 0;
  re::ObjCObject::operator=(&v51, &v46);

  id v45 = *(id *)(*(void *)(*((void *)a2 + 1) + 56) + 248);
  re::guided_filter_occlusion::GuidedFilterKernelRecycler::prepareKernelsForFrame((re::guided_filter_occlusion::GuidedFilterKernelRecycler *)&v47, *((const re::RenderManager **)a2 + 1), (re::mtl::Library *)&v45, v8);
  re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this + 256, 0, 0, &v29);
  re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this + 272, 0, 0, &v30);
  re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this + 288, 0, 0, &v31);
  re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this + 304, 0, 0, &v32);
  re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this + 320, 0, 0, &v33);
  re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this + 336, 0, 0, &v34);
  re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this + 352, 0, 0, &v35);
  re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this + 368, 0, 0, &v36);
  re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this + 384, 0, 0, &v37);
  re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this + 400, 0, 0, &v38);
  re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this + 416, 0, 0, &v39);
  re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this + 432, 0, 0, &v40);
  re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this + 448, 0, 0, &v41);
  re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this + 464, 0, 0, &v42);
  re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this + 480, 0, 0, &v43);
  re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this + 496, 0, 0, &v44);
  uint64_t v19 = a2;
  id v13 = v9;
  id v20 = v13;
  p_locatiounint64_t n = &location;
  uint64_t v22 = v5;
  unint64_t v23 = &v47;
  uint64_t v24 = &v53;
  uint64_t v25 = &v29;
  int v26 = v6;
  BOOL v27 = v8;
  char v28 = v12;
  id v18 = *((id *)&v53 + 1);
  id v17 = v55;
  if (v12 || !v7)
  {
    NS::SharedPtr<MTL::Texture>::operator=(&v18, (void **)&v53);
    NS::SharedPtr<MTL::Texture>::operator=(&v17, (void **)&v54 + 1);
  }
  [v13 pushDebugGroup:@"ARGuidedFilterOcclusionNode"];
  re::guided_filter_occlusion::encodeGuidedFilterOcclusionCommands((uint64_t)&v19);
  [v13 popDebugGroup];
  re::guided_filter_occlusion::GuidedFilterOcclusionTextureRecycler::saveTexturesForNextFrame((re::guided_filter_occlusion::GuidedFilterOcclusionTextureRecycler *)&v53);
  ++*v6;
  if (v17) {

  }
  if (v18) {
  if (v44)
  }
  {

    id v44 = 0;
  }
  if (v43)
  {

    id v43 = 0;
  }
  if (v42)
  {

    id v42 = 0;
  }
  if (v41)
  {

    id v41 = 0;
  }
  if (v40)
  {

    id v40 = 0;
  }
  if (v39)
  {

    id v39 = 0;
  }
  if (v38)
  {

    id v38 = 0;
  }
  if (v37)
  {

    id v37 = 0;
  }
  if (v36)
  {

    id v36 = 0;
  }
  if (v35)
  {

    id v35 = 0;
  }
  if (v34)
  {

    id v34 = 0;
  }
  if (v33)
  {

    id v33 = 0;
  }
  if (v32)
  {

    id v32 = 0;
  }
  if (v31)
  {

    id v31 = 0;
  }
  if (v30)
  {

    id v30 = 0;
  }
  if (v29) {

  }
  if (v55)
  {

    id v55 = 0;
  }
  if (*((void *)&v54 + 1))
  {

    *((void *)&v54 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
  }
  if ((void)v54)
  {

    *(void *)&long long v54 = 0;
  }
  if (*((void *)&v53 + 1))
  {

    *((void *)&v53 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
  }
  if ((void)v53) {

  }
  if (v63)
  {

    id v63 = 0;
  }

  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v66);
}

void *re::allocInfo_ARGuidedFilterOcclusionNode(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9DE18, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9DE18))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF9DE80, "ARGuidedFilterOcclusionNode");
    __cxa_guard_release(&qword_26AF9DE18);
  }
  return &unk_26AF9DE80;
}

void re::initInfo_ARGuidedFilterOcclusionNode(re *this, re::IntrospectionBase *a2)
{
  v73[0] = 0x30DAB7D54DFCD6BCLL;
  v73[1] = "ARGuidedFilterOcclusionNode";
  re::StringID::destroyString((re::StringID *)v73);
  *((_OWORD *)this + 2) = v74;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9DE20, memory_order_acquire) & 1) == 0)
  {
    id v4 = (re *)__cxa_guard_acquire(&qword_26AF9DE20);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::introspect_RenderGraphNode((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "RenderGraphNode";
      *(void *)(v7 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v7 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF9DF70 = v7;
      BOOL v8 = re::introspectionAllocator((re *)v7);
      char v10 = re::introspect_RenderGraphTargetHandle((re *)1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "suVirtualContentOpaqueOnlyDepth";
      *(void *)(v11 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x10000000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v11 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF9DF78 = v11;
      char v12 = re::introspectionAllocator((re *)v11);
      id v14 = re::introspect_RenderGraphTargetHandle((re *)1, v13);
      uint64_t v15 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 72, 8);
      *(_DWORD *)uint64_t v15 = 1;
      *(void *)(v15 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "suAllVirtualContentDepth";
      *(void *)(v15 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v14;
      *(void *)(v15 + 24) = 0;
      *(void *)(v15 + 32) = 0x11000000002;
      *(_DWORD *)(v15 + 40) = 0;
      *(void *)(v15 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v15 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_26AF9DF80 = v15;
      uint64_t v16 = re::introspectionAllocator((re *)v15);
      id v18 = re::introspect_RenderGraphTargetHandle((re *)1, v17);
      uint64_t v19 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v16 + 32))(v16, 72, 8);
      *(_DWORD *)uint64_t v19 = 1;
      *(void *)(v19 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "suVirtualContentDepthAsR16";
      *(void *)(v19 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v18;
      *(void *)(v19 + 24) = 0;
      *(void *)(v19 + 32) = 0x14000000003;
      *(_DWORD *)(v19 + 40) = 0;
      *(void *)(v19 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v19 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v19 + 64) = 0;
      qword_26AF9DF88 = v19;
      id v20 = re::introspectionAllocator((re *)v19);
      uint64_t v22 = re::introspect_RenderGraphTargetHandle((re *)1, v21);
      uint64_t v23 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v20 + 32))(v20, 72, 8);
      *(_DWORD *)uint64_t v23 = 1;
      *(void *)(v23 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "processedVirtualDepthAsR16";
      *(void *)(v23 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v22;
      *(void *)(v23 + 24) = 0;
      *(void *)(v23 + 32) = 0x15000000004;
      *(_DWORD *)(v23 + 40) = 0;
      *(void *)(v23 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v23 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v23 + 64) = 0;
      qword_26AF9DF90 = v23;
      uint64_t v24 = re::introspectionAllocator((re *)v23);
      int v26 = re::introspect_RenderGraphTargetHandle((re *)1, v25);
      uint64_t v27 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v24 + 32))(v24, 72, 8);
      *(_DWORD *)uint64_t v27 = 1;
      *(void *)(v27 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "suMeshDepthEdgesScratch";
      *(void *)(v27 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v26;
      *(void *)(v27 + 24) = 0;
      *(void *)(v27 + 32) = 0x16000000005;
      *(_DWORD *)(v27 + 40) = 0;
      *(void *)(v27 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v27 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v27 + 64) = 0;
      qword_26AF9DF98 = v27;
      char v28 = re::introspectionAllocator((re *)v27);
      id v30 = re::introspect_RenderGraphTargetHandle((re *)1, v29);
      uint64_t v31 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v28 + 32))(v28, 72, 8);
      *(_DWORD *)uint64_t v31 = 1;
      *(void *)(v31 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "suMeshDepthEdges";
      *(void *)(v31 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v30;
      *(void *)(v31 + 24) = 0;
      *(void *)(v31 + 32) = 0x17000000006;
      *(_DWORD *)(v31 + 40) = 0;
      *(void *)(v31 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v31 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v31 + 64) = 0;
      qword_26AF9DFA0 = v31;
      id v32 = re::introspectionAllocator((re *)v31);
      id v34 = re::introspect_RenderGraphTargetHandle((re *)1, v33);
      uint64_t v35 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v32 + 32))(v32, 72, 8);
      *(_DWORD *)uint64_t v35 = 1;
      *(void *)(v35 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "maskOfAllOcclusions";
      *(void *)(v35 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v34;
      *(void *)(v35 + 24) = 0;
      *(void *)(v35 + 32) = 0x18000000007;
      *(_DWORD *)(v35 + 40) = 0;
      *(void *)(v35 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v35 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v35 + 64) = 0;
      qword_26AF9DFA8 = v35;
      id v36 = re::introspectionAllocator((re *)v35);
      id v38 = re::introspect_RenderGraphTargetHandle((re *)1, v37);
      uint64_t v39 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v36 + 32))(v36, 72, 8);
      *(_DWORD *)uint64_t v39 = 1;
      *(void *)(v39 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "regressionInputCameraFeed";
      *(void *)(v39 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v38;
      *(void *)(v39 + 24) = 0;
      *(void *)(v39 + 32) = 0x19000000008;
      *(_DWORD *)(v39 + 40) = 0;
      *(void *)(v39 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v39 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v39 + 64) = 0;
      qword_26AF9DFB0 = v39;
      id v40 = re::introspectionAllocator((re *)v39);
      id v42 = re::introspect_RenderGraphTargetHandle((re *)1, v41);
      uint64_t v43 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v40 + 32))(v40, 72, 8);
      *(_DWORD *)uint64_t v43 = 1;
      *(void *)(v43 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "reconstructionInputCameraFeed";
      *(void *)(v43 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v42;
      *(void *)(v43 + 24) = 0;
      *(void *)(v43 + 32) = 0x1A000000009;
      *(_DWORD *)(v43 + 40) = 0;
      *(void *)(v43 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v43 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v43 + 64) = 0;
      qword_26AF9DFB8 = v43;
      id v44 = re::introspectionAllocator((re *)v43);
      id v46 = re::introspect_RenderGraphTargetHandle((re *)1, v45);
      uint64_t v47 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v44 + 32))(v44, 72, 8);
      *(_DWORD *)uint64_t v47 = 1;
      *(void *)(v47 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "cameraFeedRGBDownsampled";
      *(void *)(v47 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v46;
      *(void *)(v47 + 24) = 0;
      *(void *)(v47 + 32) = 0x1B00000000ALL;
      *(_DWORD *)(v47 + 40) = 0;
      *(void *)(v47 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v47 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v47 + 64) = 0;
      qword_26AF9DFC0 = v47;
      long long v48 = re::introspectionAllocator((re *)v47);
      uint64_t v50 = re::introspect_RenderGraphTargetHandle((re *)1, v49);
      uint64_t v51 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v48 + 32))(v48, 72, 8);
      *(_DWORD *)uint64_t v51 = 1;
      *(void *)(v51 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "guidedFilterInputWeights";
      *(void *)(v51 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v50;
      *(void *)(v51 + 24) = 0;
      *(void *)(v51 + 32) = 0x1C00000000BLL;
      *(_DWORD *)(v51 + 40) = 0;
      *(void *)(v51 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v51 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v51 + 64) = 0;
      qword_26AF9DFC8 = v51;
      id v52 = re::introspectionAllocator((re *)v51);
      long long v54 = re::introspect_RenderGraphTargetHandle((re *)1, v53);
      uint64_t v55 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v52 + 32))(v52, 72, 8);
      *(_DWORD *)uint64_t v55 = 1;
      *(void *)(v55 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "guidedFilterInputMask";
      *(void *)(v55 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v54;
      *(void *)(v55 + 24) = 0;
      *(void *)(v55 + 32) = 0x1D00000000CLL;
      *(_DWORD *)(v55 + 40) = 0;
      *(void *)(v55 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v55 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v55 + 64) = 0;
      qword_26AF9DFD0 = v55;
      uint64_t v56 = re::introspectionAllocator((re *)v55);
      char v58 = re::introspect_RenderGraphTargetHandle((re *)1, v57);
      uint64_t v59 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v56 + 32))(v56, 72, 8);
      *(_DWORD *)uint64_t v59 = 1;
      *(void *)(v59 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "reconstructedAlpha";
      *(void *)(v59 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v58;
      *(void *)(v59 + 24) = 0;
      *(void *)(v59 + 32) = 0x1E00000000DLL;
      *(_DWORD *)(v59 + 40) = 0;
      *(void *)(v59 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v59 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v59 + 64) = 0;
      qword_26AF9DFD8 = v59;
      id v60 = re::introspectionAllocator((re *)v59);
      id v62 = re::introspect_RenderGraphTargetHandle((re *)1, v61);
      uint64_t v63 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v60 + 32))(v60, 72, 8);
      *(_DWORD *)uint64_t v63 = 1;
      *(void *)(v63 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "suMeshDepth";
      *(void *)(v63 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v62;
      *(void *)(v63 + 24) = 0;
      *(void *)(v63 + 32) = 0x1200000000ELL;
      *(_DWORD *)(v63 + 40) = 0;
      *(void *)(v63 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v63 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v63 + 64) = 0;
      qword_26AF9DFE0 = v63;
      char v64 = re::introspectionAllocator((re *)v63);
      char v66 = re::introspect_RenderGraphTargetHandle((re *)1, v65);
      uint64_t v67 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v64 + 32))(v64, 72, 8);
      *(_DWORD *)uint64_t v67 = 1;
      *(void *)(v67 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "suMeshBackfacesDepth";
      *(void *)(v67 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v66;
      *(void *)(v67 + 24) = 0;
      *(void *)(v67 + 32) = 0x1300000000FLL;
      *(_DWORD *)(v67 + 40) = 0;
      *(void *)(v67 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v67 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v67 + 64) = 0;
      qword_26AF9DFE8 = v67;
      long long v68 = re::introspectionAllocator((re *)v67);
      uint64_t v70 = re::introspect_RenderGraphTargetHandle((re *)1, v69);
      uint64_t v71 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v68 + 32))(v68, 72, 8);
      *(_DWORD *)uint64_t v71 = 1;
      *(void *)(v71 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "suOcclusionMatte";
      *(void *)(v71 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v70;
      *(void *)(v71 + 24) = 0;
      *(void *)(v71 + 32) = 0x1F000000010;
      *(_DWORD *)(v71 + 40) = 0;
      *(void *)(v71 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v71 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v71 + 64) = 0;
      qword_26AF9DFF0 = v71;
      __cxa_guard_release(&qword_26AF9DE20);
    }
  }
  *((void *)this + 2) = 0x20000000008;
  *((_DWORD *)this + re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 17;
  *((void *)this + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = &qword_26AF9DF70;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ARGuidedFilterOcclusionNode>;
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ARGuidedFilterOcclusionNode>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ARGuidedFilterOcclusionNode>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ARGuidedFilterOcclusionNode>;
  re::IntrospectionRegistry::add(this, v3);
  long long v72 = v74;
}

double re::internal::defaultConstruct<re::ARGuidedFilterOcclusionNode>(int a1, int a2, re::ARGuidedFilterOcclusionNode *this)
{
  return re::ARGuidedFilterOcclusionNode::ARGuidedFilterOcclusionNode(this);
}

void re::internal::defaultDestruct<re::ARGuidedFilterOcclusionNode>(int a1, int a2, id *this)
{
}

uint64_t re::introspect_ARGuidedFilterOcclusionNode(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ARGuidedFilterOcclusionNode", (uint64_t (*)(re::internal *))re::allocInfo_ARGuidedFilterOcclusionNode, (re::IntrospectionBase *(*)(void))re::initInfo_ARGuidedFilterOcclusionNode, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ARGuidedFilterOcclusionNode>, this);
}

void *re::allocInfo_SceneUnderstandingGuidedFilterOcclusionConnectionData(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9DE28, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9DE28))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF9DEF8, "SceneUnderstandingGuidedFilterOcclusionConnectionData");
    __cxa_guard_release(&qword_26AF9DE28);
  }
  return &unk_26AF9DEF8;
}

void re::initInfo_SceneUnderstandingGuidedFilterOcclusionConnectionData(re *this, re::IntrospectionBase *a2)
{
  v41[0] = 0x4001EAA823D50D7ALL;
  v41[1] = "SceneUnderstandingGuidedFilterOcclusionConnectionData";
  re::StringID::destroyString((re::StringID *)v41);
  *((_OWORD *)this + 2) = v42;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9DE30, memory_order_acquire) & 1) == 0)
  {
    id v4 = (re *)__cxa_guard_acquire(&qword_26AF9DE30);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::introspect_RenderGraphData((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "RenderGraphData";
      *(void *)(v7 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v7 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF9DE38 = v7;
      BOOL v8 = re::introspectionAllocator((re *)v7);
      char v10 = re::introspect_uint32_t((re *)1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "guidedFilterResolutionX";
      *(void *)(v11 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x800000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v11 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF9DE40 = v11;
      char v12 = re::introspectionAllocator((re *)v11);
      id v14 = re::introspect_uint32_t((re *)1, v13);
      uint64_t v15 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 72, 8);
      *(_DWORD *)uint64_t v15 = 1;
      *(void *)(v15 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "guidedFilterResolutionY";
      *(void *)(v15 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v14;
      *(void *)(v15 + 24) = 0;
      *(void *)(v15 + 32) = 0xC00000002;
      *(_DWORD *)(v15 + 40) = 0;
      *(void *)(v15 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v15 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_26AF9DE48 = v15;
      uint64_t v16 = re::introspectionAllocator((re *)v15);
      id v18 = re::introspect_uint32_t((re *)1, v17);
      uint64_t v19 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v16 + 32))(v16, 72, 8);
      *(_DWORD *)uint64_t v19 = 1;
      *(void *)(v19 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "outputMatteResolutionX";
      *(void *)(v19 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v18;
      *(void *)(v19 + 24) = 0;
      *(void *)(v19 + 32) = 0x1000000003;
      *(_DWORD *)(v19 + 40) = 0;
      *(void *)(v19 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v19 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v19 + 64) = 0;
      qword_26AF9DE50 = v19;
      id v20 = re::introspectionAllocator((re *)v19);
      uint64_t v22 = re::introspect_uint32_t((re *)1, v21);
      uint64_t v23 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v20 + 32))(v20, 72, 8);
      *(_DWORD *)uint64_t v23 = 1;
      *(void *)(v23 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "outputMatteResolutionY";
      *(void *)(v23 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v22;
      *(void *)(v23 + 24) = 0;
      *(void *)(v23 + 32) = 0x1400000004;
      *(_DWORD *)(v23 + 40) = 0;
      *(void *)(v23 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v23 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v23 + 64) = 0;
      qword_26AF9DE58 = v23;
      uint64_t v24 = re::introspectionAllocator((re *)v23);
      int v26 = re::introspect_uint32_t((re *)1, v25);
      uint64_t v27 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v24 + 32))(v24, 72, 8);
      *(_DWORD *)uint64_t v27 = 1;
      *(void *)(v27 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "suMeshDepthEdgesResolutionX";
      *(void *)(v27 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v26;
      *(void *)(v27 + 24) = 0;
      *(void *)(v27 + 32) = 0x2000000005;
      *(_DWORD *)(v27 + 40) = 0;
      *(void *)(v27 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v27 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v27 + 64) = 0;
      qword_26AF9DE60 = v27;
      char v28 = re::introspectionAllocator((re *)v27);
      id v30 = re::introspect_uint32_t((re *)1, v29);
      uint64_t v31 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v28 + 32))(v28, 72, 8);
      *(_DWORD *)uint64_t v31 = 1;
      *(void *)(v31 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "suMeshDepthEdgesResolutionY";
      *(void *)(v31 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v30;
      *(void *)(v31 + 24) = 0;
      *(void *)(v31 + 32) = 0x2400000006;
      *(_DWORD *)(v31 + 40) = 0;
      *(void *)(v31 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v31 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v31 + 64) = 0;
      qword_26AF9DE68 = v31;
      id v32 = re::introspectionAllocator((re *)v31);
      id v34 = re::introspect_uint32_t((re *)1, v33);
      uint64_t v35 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v32 + 32))(v32, 72, 8);
      *(_DWORD *)uint64_t v35 = 1;
      *(void *)(v35 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "downsampledCameraFeedResolutionX";
      *(void *)(v35 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v34;
      *(void *)(v35 + 24) = 0;
      *(void *)(v35 + 32) = 0x1800000007;
      *(_DWORD *)(v35 + 40) = 0;
      *(void *)(v35 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v35 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v35 + 64) = 0;
      qword_26AF9DE70 = v35;
      id v36 = re::introspectionAllocator((re *)v35);
      id v38 = re::introspect_uint32_t((re *)1, v37);
      uint64_t v39 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v36 + 32))(v36, 72, 8);
      *(_DWORD *)uint64_t v39 = 1;
      *(void *)(v39 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "downsampledCameraFeedResolutionY";
      *(void *)(v39 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v38;
      *(void *)(v39 + 24) = 0;
      *(void *)(v39 + 32) = 0x1C00000008;
      *(_DWORD *)(v39 + 40) = 0;
      *(void *)(v39 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v39 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v39 + 64) = 0;
      qword_26AF9DE78 = v39;
      __cxa_guard_release(&qword_26AF9DE30);
    }
  }
  *((void *)this + 2) = 0x2800000008;
  *((_DWORD *)this + re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 9;
  *((void *)this + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = &qword_26AF9DE38;
  *((void *)this + 9) = re::internal::defaultConstruct<re::SceneUnderstandingGuidedFilterOcclusionConnectionData>;
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::SceneUnderstandingGuidedFilterOcclusionConnectionData>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::SceneUnderstandingGuidedFilterOcclusionConnectionData>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::SceneUnderstandingGuidedFilterOcclusionConnectionData>;
  re::IntrospectionRegistry::add(this, v3);
  long long v40 = v42;
}

void re::internal::defaultConstruct<re::SceneUnderstandingGuidedFilterOcclusionConnectionData>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = &unk_26E71F2C8;
}

void *re::internal::defaultConstructV2<re::SceneUnderstandingGuidedFilterOcclusionConnectionData>(void *result)
{
  *Class result = &unk_26E71F2C8;
  return result;
}

uint64_t re::introspect_SceneUnderstandingGuidedFilterOcclusionConnectionData(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"SceneUnderstandingGuidedFilterOcclusionConnectionData", (uint64_t (*)(re::internal *))re::allocInfo_SceneUnderstandingGuidedFilterOcclusionConnectionData, (re::IntrospectionBase *(*)(void))re::initInfo_SceneUnderstandingGuidedFilterOcclusionConnectionData, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::SceneUnderstandingGuidedFilterOcclusionConnectionData>, this);
}

void re::ARGuidedFilterOcclusionNode::~ARGuidedFilterOcclusionNode(id *this)
{
  re::RenderGraphNode::~RenderGraphNode(this);
  JUMPOUT(0x237DBCBD0);
}

double re::ARGuidedFilterOcclusionNode::ARGuidedFilterOcclusionNode(re::ARGuidedFilterOcclusionNode *this)
{
  int v1 = re::RenderGraphNode::RenderGraphNode(this);
  *(void *)int v1 = &unk_26E720000;
  *((void *)v1 + 32) = 0;
  double result = NAN;
  *((void *)v1 + 33) = -1;
  *((void *)v1 + 34) = 0;
  *((void *)v1 + 35) = -1;
  *((void *)v1 + 3re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  *((void *)v1 + 37) = -1;
  *((void *)v1 + 3re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  *((void *)v1 + 39) = -1;
  *((void *)v1 + 40) = 0;
  *((void *)v1 + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = -1;
  *((void *)v1 + 42) = 0;
  *((void *)v1 + 43) = -1;
  *((void *)v1 + 44) = 0;
  *((void *)v1 + 45) = -1;
  *((void *)v1 + 4re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  *((void *)v1 + 47) = -1;
  *((void *)v1 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  *((void *)v1 + 49) = -1;
  *((void *)v1 + 50) = 0;
  *((void *)v1 + 5re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = -1;
  *((void *)v1 + 52) = 0;
  *((void *)v1 + 53) = -1;
  *((void *)v1 + 54) = 0;
  *((void *)v1 + 55) = -1;
  *((void *)v1 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  *((void *)v1 + 57) = -1;
  *((void *)v1 + 5re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  *((void *)v1 + 59) = -1;
  *((void *)v1 + 60) = 0;
  *((void *)v1 + 6re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = -1;
  *((void *)v1 + 62) = 0;
  *((void *)v1 + 63) = -1;
  return result;
}

void re::RenderGraphBlurGenerationNode::configure(void **this, const char *a2, const char *a3, re::RenderFrame *a4)
{
  v13[0] = 0;
  uint64_t v22 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v18 = 0;
  int v21 = 0;
  char v23 = 0;
  char v24 = 0;
  uint64_t v25 = 0;
  char v26 = 0;
  ComputePipelineState = (void **)re::getOrCreateComputePipelineState(*((void *)a4 + 1), (uint64_t)v13);
  NS::SharedPtr<MTL::Texture>::operator=(this + 35, ComputePipelineState);
  re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)&v18);
  id v9 = (_anonymous_namespace_ *)v16;
  if ((void)v16)
  {
    if (BYTE8(v16)) {
      id v9 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v16 + 40))();
    }
    long long v16 = 0u;
    long long v17 = 0u;
  }
  if (v13[0])
  {
    id v9 = v14;
    if (v14)
    {
      if (v15) {
        id v9 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v14 + 40))();
      }
    }
  }
  v13[0] = 0;
  uint64_t v22 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v18 = 0;
  int v21 = 0;
  char v23 = 0;
  char v24 = 0;
  uint64_t v25 = 0;
  char v26 = 0;
  char v10 = (void **)re::getOrCreateComputePipelineState(*((void *)a4 + 1), (uint64_t)v13);
  NS::SharedPtr<MTL::Texture>::operator=(this + 36, v10);
  re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)&v18);
  uint64_t v11 = (_anonymous_namespace_ *)v16;
  if ((void)v16)
  {
    if (BYTE8(v16)) {
      uint64_t v11 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v16 + 40))();
    }
    long long v16 = 0u;
    long long v17 = 0u;
  }
  if (v13[0])
  {
    uint64_t v11 = v14;
    if (v14)
    {
      if (v15) {
        uint64_t v11 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v14 + 40))();
      }
    }
  }
  v13[0] = 0;
  uint64_t v22 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v18 = 0;
  int v21 = 0;
  char v23 = 0;
  char v24 = 0;
  uint64_t v25 = 0;
  char v26 = 0;
  char v12 = (void **)re::getOrCreateComputePipelineState(*((void *)a4 + 1), (uint64_t)v13);
  NS::SharedPtr<MTL::Texture>::operator=(this + 37, v12);
  re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)&v18);
  if ((void)v16)
  {
    if (BYTE8(v16)) {
      (*(void (**)(void))(*(void *)v16 + 40))();
    }
    long long v16 = 0u;
    long long v17 = 0u;
  }
  if (v13[0] && v14 && (v15 & 1) != 0) {
    (*(void (**)(void))(*(void *)v14 + 40))();
  }
  re::RenderGraphNode::configure((re::RenderGraphNode *)this, a2, a3, a4);
}

void re::RenderGraphBlurGenerationNode::setup(uint64_t a1, uint64_t a2)
{
  *(_WORD *)(a2 + 592) = 257;
}

void *re::RenderGraphBlurGenerationNode::execute(char **this, re::RenderGraphContext *a2)
{
  double result = (void *)re::RenderGraphDataStore::tryGet<re::BlurGenerationContext>(*((void *)a2 + 146), (int)"BlurGenerationContext", this[4]);
  if (result)
  {
    id v4 = result;
    uint64_t v59 = this;
    long long v74 = 0;
    v71[1] = 0;
    unint64_t v72 = 0;
    v71[0] = 0;
    int v73 = 0;
    if (*result)
    {
      unint64_t v5 = result[2];
      v71[0] = *result;
      re::DynamicArray<re::RenderGraphBlurGenerationData>::setCapacity(v71, v5);
      ++v73;
      unint64_t v6 = v4[2];
      if (v6 >= v72)
      {
        re::DynamicArray<re::RenderGraphBlurGenerationData>::setCapacity(v71, v4[2]);
        std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::RenderGraphBlurGenerationData *,re::RenderGraphBlurGenerationData *,re::RenderGraphBlurGenerationData *>((void **)v4[4], (void **)(v4[4] + 24 * v72), (uint64_t)v74);
        if (v72 != v6)
        {
          uint64_t v10 = v4[4];
          uint64_t v11 = v10 + 24 * v6;
          uint64_t v12 = v10 + 24 * v72;
          id v13 = &v74[3 * v72];
          do
          {
            *id v13 = *(id *)v12;
            v13[1] = *(id *)(v12 + 8);
            *((unsigned char *)v13 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = *(unsigned char *)(v12 + 16);
            v12 += 24;
            v13 += 3;
          }
          while (v12 != v11);
        }
      }
      else
      {
        std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::RenderGraphBlurGenerationData *,re::RenderGraphBlurGenerationData *,re::RenderGraphBlurGenerationData *>((void **)v4[4], (void **)(v4[4] + 24 * v6), (uint64_t)v74);
        if (v6 != v72)
        {
          uint64_t v7 = 24 * v72 - 24 * v6;
          BOOL v8 = &v74[3 * v6 + 1];
          do
          {
            if (*v8)
            {

              *BOOL v8 = 0;
            }
            id v9 = *(v8 - 1);
            if (v9)
            {

              *(v8 - re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
            }
            v8 += 3;
            v7 -= 24;
          }
          while (v7);
        }
      }
      unint64_t v72 = v6;
    }
    uint64_t v14 = *(void *)(*(void *)a2 + 24);
    unsigned int v69 = 0;
    long long v67 = 0u;
    long long v68 = 0u;
    uint64_t v70 = 0x7FFFFFFFLL;
    re::HashTable<unsigned long long,re::Function<void ()(void)>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)&v67, v14, 3);
    if (v72)
    {
      char v15 = v74;
      long long v16 = &v74[3 * v72];
      do
      {
        id v17 = *v15;
        unint64_t v18 = (unint64_t)objc_msgSend(v17, sel_protectionOptions);
        unint64_t v75 = v18;
        id v19 = v15[1];
        if (v19) {

        }
        uint64_t v20 = v67;
        unint64_t v21 = 0x94D049BB133111EBLL
            * ((0xBF58476D1CE4E5B9 * (v18 ^ (v18 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v18 ^ (v18 >> 30))) >> 27));
        unint64_t v22 = v21 ^ (v21 >> 31);
        if ((void)v67)
        {
          uint64_t v23 = *(unsigned int *)(*((void *)&v67 + 1) + 4 * (v22 % DWORD2(v68)));
          if (v23 != 0x7FFFFFFF)
          {
            while (*(void *)(v68 + (v23 << 6) + 16) != v18)
            {
              uint64_t v23 = *(_DWORD *)(v68 + (v23 << 6) + 8) & 0x7FFFFFFF;
              if (v23 == 0x7FFFFFFF) {
                goto LABEL_24;
              }
            }
            uint64_t v26 = v68 + (v23 << 6) + 24;
            goto LABEL_36;
          }
LABEL_24:
          int64x2_t v64 = 0uLL;
          int v65 = 0;
          uint64_t v66 = 0;
          uint64_t v63 = v14;
          re::DynamicArray<float *>::setCapacity(&v63, 0);
          ++v65;
          if (v20)
          {
            unint64_t v24 = v22 % DWORD2(v68);
            uint64_t v25 = *(unsigned int *)(*((void *)&v67 + 1) + 4 * v24);
            if (v25 != 0x7FFFFFFF)
            {
              while (*(void *)(v68 + (v25 << 6) + 16) != v18)
              {
                uint64_t v25 = *(_DWORD *)(v68 + (v25 << 6) + 8) & 0x7FFFFFFF;
                if (v25 == 0x7FFFFFFF) {
                  goto LABEL_32;
                }
              }
              uint64_t v28 = v68 + (v25 << 6);
              goto LABEL_33;
            }
          }
          else
          {
            LODWORD(v24) = 0;
          }
        }
        else
        {
          int64x2_t v64 = 0uLL;
          int v65 = 0;
          uint64_t v66 = 0;
          uint64_t v63 = v14;
          re::DynamicArray<float *>::setCapacity(&v63, 0);
          LODWORD(v24) = 0;
          ++v65;
        }
LABEL_32:
        unsigned int v27 = re::HashTable<unsigned long long,re::DynamicArray<re::RenderGraphBlurGenerationData const*>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove((uint64_t)&v67, v24, v22, &v75, (uint64_t)&v63);
        ++HIDWORD(v70);
        uint64_t v28 = v68 + ((unint64_t)v27 << 6);
LABEL_33:
        uint64_t v26 = v28 + 24;
        id v19 = (id)v63;
        if (v63 && v66) {
          id v19 = (id)(*(uint64_t (**)(void))(*(void *)v63 + 40))();
        }
LABEL_36:
        unint64_t v29 = *(void *)(v26 + 8);
        unint64_t v30 = *(void *)(v26 + 16);
        if (v30 >= v29)
        {
          unint64_t v31 = v30 + 1;
          if (v29 < v30 + 1)
          {
            if (*(void *)v26)
            {
              uint64_t v32 = 2 * v29;
              BOOL v33 = v29 == 0;
              unint64_t v34 = 8;
              if (!v33) {
                unint64_t v34 = v32;
              }
              if (v34 <= v31) {
                unint64_t v35 = v31;
              }
              else {
                unint64_t v35 = v34;
              }
              re::DynamicArray<float *>::setCapacity((void *)v26, v35);
            }
            else
            {
              re::DynamicArray<float *>::setCapacity((void *)v26, v31);
              ++*(_DWORD *)(v26 + 24);
            }
          }
          unint64_t v30 = *(void *)(v26 + 16);
        }
        *(void *)(*(void *)(v26 + 32) + 8 * v30) = v15;
        *(void *)(v26 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v30 + 1;
        ++*(_DWORD *)(v26 + 24);
        if (v17) {

        }
        v15 += 3;
      }
      while (v15 != v16);
    }
    if (v69)
    {
      uint64_t v36 = 0;
      id v37 = (int *)(v68 + 8);
      id v38 = v59;
      while (1)
      {
        int v39 = *v37;
        v37 += 16;
        if (v39 < 0) {
          break;
        }
        if (v69 == ++v36)
        {
          LODWORD(v3re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v69;
          break;
        }
      }
    }
    else
    {
      LODWORD(v3re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      id v38 = v59;
    }
    if (v69 != v36)
    {
      uint64_t v40 = v36;
      char v58 = (void **)(v38 + 37);
      id v41 = (void **)(v38 + 36);
      long long v42 = (void **)(v38 + 35);
      uint64_t v43 = v68;
      int64x2_t v60 = vdupq_n_s64(1uLL);
      unsigned int v56 = v69;
      while (1)
      {
        id v44 = (uint64_t *)(v43 + (v40 << 6));
        re::RenderGraphContext::makeComputeCommandEncoder(a2, v44[2], &v62);
        uint64_t v45 = v44[5];
        if (v45) {
          break;
        }
LABEL_71:
        re::RenderGraphContext::finishEncoding<re::mtl::ComputeCommandEncoder &>((uint64_t)a2, &v62);

        if (v56 <= (int)v36 + 1) {
          unsigned int v54 = v36 + 1;
        }
        else {
          unsigned int v54 = v56;
        }
        while (1)
        {
          uint64_t v40 = (v36 + 1);
          if (v54 - 1 == v36) {
            break;
          }
          LODWORD(v3re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v36 + 1;
          unsigned int v55 = v40;
          if ((*(_DWORD *)(v43 + (v40 << 6) + 8) & 0x80000000) != 0) {
            goto LABEL_78;
          }
        }
        unsigned int v55 = v54;
LABEL_78:
        LODWORD(v3re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v55;
        if (v56 == v55) {
          goto LABEL_79;
        }
      }
      id v46 = (id **)v44[7];
      uint64_t v47 = 8 * v45;
      while (1)
      {
        long long v48 = *v46;
        id v61 = 0;
        int v49 = *((unsigned __int8 *)v48 + 16);
        uint64_t v50 = v42;
        if (*((unsigned char *)v48 + 16))
        {
          if (v49 == 2)
          {
            uint64_t v50 = v58;
          }
          else
          {
            id v51 = 0;
            uint64_t v50 = v41;
            if (v49 != 1) {
              goto LABEL_68;
            }
          }
        }
        NS::SharedPtr<MTL::Texture>::operator=(&v61, v50);
        id v51 = v61;
LABEL_68:
        [v62 setComputePipelineState:v51];
        [v62 setTexture:*v48 atIndex:0];
        [v62 setTexture:v48[1] atIndex:1];
        id v52 = objc_msgSend(*v48, sel_height);
        [v62 setThreadgroupMemoryLength:(8 * (void)v52 + 15) & 0xFFFFFFFFFFFFFFF0 atIndex:0];
        unsigned int v53 = objc_msgSend(*v48, sel_height);
        LODWORD(v63) = objc_msgSend(*v48, sel_width);
        uint64_t v63 = v63;
        int64x2_t v64 = v60;
        unint64_t v75 = v53;
        int64x2_t v76 = v60;
        [v62 dispatchThreadgroups:&v63 threadsPerThreadgroup:&v75];
        if (v61) {

        }
        ++v46;
        v47 -= 8;
        if (!v47) {
          goto LABEL_71;
        }
      }
    }
LABEL_79:
    re::HashTable<unsigned long long,re::DynamicArray<re::ecs2::MeshSortingComponent *>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)&v67);
    return (void *)re::DynamicArray<re::VirtualEnvironmentProbeSource>::deinit((uint64_t)v71);
  }
  return result;
}

void re::RenderGraphBlurGenerationNode::~RenderGraphBlurGenerationNode(re::RenderGraphBlurGenerationNode *this)
{
  uint64_t v2 = (void *)*((void *)this + 37);
  if (v2)
  {

    *((void *)this + 37) = 0;
  }
  uint64_t v3 = (void *)*((void *)this + 36);
  if (v3)
  {

    *((void *)this + 3re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  }
  id v4 = (void *)*((void *)this + 35);
  if (v4)
  {

    *((void *)this + 35) = 0;
  }
  re::AssetHandle::~AssetHandle((re::RenderGraphBlurGenerationNode *)((char *)this + 256));
  re::RenderGraphNode::~RenderGraphNode((id *)this);
}

{
  void *v2;
  void *v3;
  void *v4;
  uint64_t vars8;

  uint64_t v2 = (void *)*((void *)this + 37);
  if (v2)
  {

    *((void *)this + 37) = 0;
  }
  uint64_t v3 = (void *)*((void *)this + 36);
  if (v3)
  {

    *((void *)this + 3re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  }
  id v4 = (void *)*((void *)this + 35);
  if (v4)
  {

    *((void *)this + 35) = 0;
  }
  re::AssetHandle::~AssetHandle((re::RenderGraphBlurGenerationNode *)((char *)this + 256));
  re::RenderGraphNode::~RenderGraphNode((id *)this);
  JUMPOUT(0x237DBCBD0);
}

void **std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::RenderGraphBlurGenerationData *,re::RenderGraphBlurGenerationData *,re::RenderGraphBlurGenerationData *>(void **result, void **a2, uint64_t a3)
{
  if (result != a2)
  {
    unint64_t v5 = result;
    do
    {
      NS::SharedPtr<MTL::Texture>::operator=((void **)a3, v5);
      double result = NS::SharedPtr<MTL::Texture>::operator=((void **)(a3 + 8), v5 + 1);
      *(unsigned char *)(a3 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = *((unsigned char *)v5 + 16);
      v5 += 3;
      a3 += 24;
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t re::HashTable<unsigned long long,re::DynamicArray<re::RenderGraphBlurGenerationData const*>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      int v11 = *(_DWORD *)(a1 + 28);
      signed int v12 = 2 * v11;
      uint64_t v13 = *(void *)a1;
      if (*(void *)a1)
      {
        if (v12) {
          BOOL v14 = v9 == v12;
        }
        else {
          BOOL v14 = 1;
        }
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v29, 0, 36);
          *(void *)&v29[36] = 0x7FFFFFFFLL;
          re::HashTable<unsigned long long,re::Function<void ()(void)>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v29, v13, v12);
          long long v15 = *(_OWORD *)v29;
          *(_OWORD *)unint64_t v29 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          uint64_t v16 = *(void *)&v29[16];
          uint64_t v17 = *(void *)(a1 + 16);
          *(void *)&unsigned char v29[16] = v17;
          *(void *)(a1 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v16;
          long long v19 = *(_OWORD *)&v29[24];
          *(_OWORD *)&v29[24] = *(_OWORD *)(a1 + 24);
          unsigned int v18 = *(_DWORD *)&v29[32];
          *(_OWORD *)(a1 + 24) = v19;
          uint64_t v20 = v18;
          if (v18)
          {
            uint64_t v21 = v17 + 16;
            do
            {
              if ((*(_DWORD *)(v21 - 8) & 0x80000000) != 0) {
                re::HashTable<unsigned long long,re::DynamicArray<re::RenderGraphBlurGenerationData const*>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, *(void *)(v21 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(v21 - 16), v21, v21 + 8);
              }
              v21 += 64;
              --v20;
            }
            while (v20);
          }
          re::HashTable<unsigned long long,re::DynamicArray<re::ecs2::MeshSortingComponent *>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v29);
        }
      }
      else
      {
        if (v12) {
          signed int v24 = 2 * v11;
        }
        else {
          signed int v24 = 3;
        }
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v22 = *(void *)(a1 + 16);
    int v23 = *(_DWORD *)(v22 + (v9 << 6) + 8);
  }
  else
  {
    uint64_t v22 = *(void *)(a1 + 16);
    int v23 = *(_DWORD *)(v22 + (v9 << 6) + 8);
    *(_DWORD *)(a1 + 3re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v23 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v22 + (v9 << 6) + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v23 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + (v9 << 6) + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_DWORD *)(*(void *)(a1 + 16) + (v9 << 6) + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + (v9 << 6)) = a3;
  *(void *)(*(void *)(a1 + 16) + (v9 << 6) + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = *a4;
  uint64_t v25 = *(void *)(a1 + 16) + (v9 << 6);
  *(void *)(v25 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  *(_DWORD *)(v25 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  *(void *)(v25 + 32) = 0;
  *(void *)(v25 + 40) = 0;
  *(void *)(v25 + 24) = 0;
  *(void *)(v25 + 24) = *(void *)a5;
  *(void *)a5 = 0;
  *(void *)(v25 + 32) = *(void *)(a5 + 8);
  *(void *)(a5 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  uint64_t v26 = *(void *)(v25 + 40);
  *(void *)(v25 + 40) = *(void *)(a5 + 16);
  *(void *)(a5 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v26;
  uint64_t v27 = *(void *)(v25 + 56);
  *(void *)(v25 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = *(void *)(a5 + 32);
  *(void *)(a5 + 32) = v27;
  ++*(_DWORD *)(a5 + 24);
  ++*(_DWORD *)(v25 + 48);
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void *re::ProjectiveShadowProvider::ProjectiveShadowProvider(void *a1, const re::DynamicString *a2, const re::AssetHandle *a3)
{
  re::DynamicString::DynamicString((re::DynamicString *)v6, a2);
  *a1 = &unk_26E6D52C8;
  re::DynamicString::DynamicString((re::DynamicString *)(a1 + 1), (const re::DynamicString *)v6);
  if (*(void *)&v6[0])
  {
    if (BYTE8(v6[0])) {
      (*(void (**)(void))(**(void **)&v6[0] + 40))();
    }
    memset(v6, 0, sizeof(v6));
  }
  *a1 = &unk_26E720150;
  re::AssetHandle::AssetHandle((re::AssetHandle *)(a1 + 5), a3);
  return a1;
}

unint64_t re::ProjectiveShadowProvider::prepareFrame(re::ProjectiveShadowProvider *this, const char *__s, const char *a3, re::RenderFrame *a4)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  size_t v7 = strlen(__s);
  if (v7)
  {
    MurmurHash3_x64_128((uint64_t)__s, v7, 0, &v22);
    unint64_t v8 = (v23 - 0x61C8864680B583E9 + (v22 << 6) + (v22 >> 2)) ^ v22;
  }
  else
  {
    unint64_t v8 = 0;
  }
  size_t v9 = strlen(a3);
  if (v9)
  {
    MurmurHash3_x64_128((uint64_t)a3, v9, 0, &v22);
    unint64_t v10 = ((v23 - 0x61C8864680B583E9 + (v22 << 6) + (v22 >> 2)) ^ v22) - 0x61C8864680B583E9;
  }
  else
  {
    unint64_t v10 = 0x9E3779B97F4A7C17;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9E000, memory_order_acquire) & 1) == 0)
  {
    long long v19 = (re *)__cxa_guard_acquire(&qword_26AF9E000);
    if (v19)
    {
      _MergedGlobals_484 = re::getCombinedScopeHash(v19, v20, v21);
      __cxa_guard_release(&qword_26AF9E000);
    }
  }
  unint64_t v11 = (unint64_t)"N2re28ProjectiveShadowMapDimensionE";
  if (((unint64_t)"N2re28ProjectiveShadowMapDimensionE" & 0x8000000000000000) != 0)
  {
    signed int v12 = (unsigned __int8 *)((unint64_t)"N2re28ProjectiveShadowMapDimensionE" & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v13 = 5381;
    do
    {
      unint64_t v11 = v13;
      unsigned int v14 = *v12++;
      uint64_t v13 = (33 * v13) ^ v14;
    }
    while (v14);
  }
  unint64_t v22 = (_MergedGlobals_484 - 0x61C8864680B583E9 + (v11 << 6) + (v11 >> 2)) ^ v11;
  unint64_t result = re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet((uint64_t)a4 + 96, (uint64_t *)&v22);
  if (result)
  {
    if (*(void *)result && (unint64_t v16 = *(unsigned int *)(*(void *)result + 8), v16))
    {
      unint64_t v17 = ((((v8 >> 2) + (v8 << 6) + v10) ^ v8) - 0x3E565E086D0568D5) ^ 0x1875534DAAA41C50;
      unint64_t v18 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * (v16 ^ (v16 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v16 ^ (v16 >> 30))) >> 27));
      return ((v17 << 6) - 0x61C8864680B583E9 + (v17 >> 2) + (v18 ^ (v18 >> 31))) ^ v17;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void re::ProjectiveShadowProvider::provide(re::ProjectiveShadowProvider *this, const char *a2, const char *a3, re::RenderFrame *a4)
{
  uint64_t v70 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9E010, memory_order_acquire) & 1) == 0)
  {
    uint64_t v40 = (re *)__cxa_guard_acquire(&qword_26AF9E010);
    if (v40)
    {
      qword_26AF9E008 = re::getCombinedScopeHash(v40, v41, v42);
      __cxa_guard_release(&qword_26AF9E010);
    }
  }
  unint64_t v8 = (unint64_t)"N2re28ProjectiveShadowMapDimensionE";
  if (((unint64_t)"N2re28ProjectiveShadowMapDimensionE" & 0x8000000000000000) != 0)
  {
    size_t v9 = (unsigned __int8 *)((unint64_t)"N2re28ProjectiveShadowMapDimensionE" & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v10 = 5381;
    do
    {
      unint64_t v8 = v10;
      unsigned int v11 = *v9++;
      uint64_t v10 = (33 * v10) ^ v11;
    }
    while (v11);
  }
  unsigned int v12 = 0x7FFFFFFF;
  if (*((void *)a4 + 12))
  {
    unint64_t v13 = (qword_26AF9E008 + (v8 << 6) + (v8 >> 2) - 0x61C8864680B583E9) ^ v8;
    unsigned int v14 = *(_DWORD *)(*((void *)a4 + 13) + 4 * (v13 % *((unsigned int *)a4 + 30)));
    if (v14 != 0x7FFFFFFF)
    {
      uint64_t v15 = *((void *)a4 + 14);
      unsigned int v12 = *(_DWORD *)(*((void *)a4 + 13) + 4 * (v13 % *((unsigned int *)a4 + 30)));
      if (*(void *)(v15 + 24 * v14 + 8) != v13)
      {
        while (1)
        {
          unsigned int v12 = *(_DWORD *)(v15 + 24
                                * *(unsigned int *)(*((void *)a4 + 13) + 4 * (v13 % *((unsigned int *)a4 + 30)))) & 0x7FFFFFFF;
          if (v12 == 0x7FFFFFFF) {
            break;
          }
          if (*(void *)(v15 + 24 * v12 + 8) == v13) {
            goto LABEL_12;
          }
        }
        unsigned int v12 = 0x7FFFFFFF;
      }
    }
  }
LABEL_12:
  uint64_t v16 = *(void *)(*((void *)a4 + 14) + 24 * v12 + 16);
  *(void *)uint64_t v59 = 0xA00000000;
  *(_DWORD *)&v59[8] = 2;
  *(void *)&v59[12] = *(void *)(v16 + 8);
  *(void *)&v59[28] = -1;
  *(void *)&v59[20] = -1;
  v59[36] = 0;
  __asm { FMOV            V1.2S, #1.0 }
  *(void *)&v59[40] = _D1;
  long long v60 = xmmword_2343AEB90;
  long long v61 = xmmword_234415040;
  LODWORD(v62) = -1;
  uint64_t v63 = 0;
  *(void *)&long long v64 = 0;
  BYTE8(v64) = 0;
  long long v52 = *(_OWORD *)v59;
  long long v53 = *(_OWORD *)&v59[16];
  long long v56 = xmmword_234415040;
  long long v57 = v62;
  long long v58 = v64;
  long long v54 = *(_OWORD *)&v59[32];
  long long v55 = xmmword_2343AEB90;
  HIDWORD(v52) = *(_DWORD *)&v59[12] >> 1;
  LODWORD(v53) = *(_DWORD *)&v59[12] >> 1;
  LODWORD(v5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 2;
  v46[0] = v52;
  v46[1] = v53;
  long long v47 = *(_OWORD *)&v59[32];
  long long v48 = xmmword_2343AEB90;
  long long v49 = v56;
  long long v50 = v62;
  long long v51 = v64;
  BYTE4(v47) = 1;
  re::RenderFrame::createTarget(a4, (const re::RenderGraphTargetDescription *)v59, "ProjectiveShadowMapTexture", &v45);
  re::RenderFrame::createTarget(a4, (const re::RenderGraphTargetDescription *)&v52, "DownsampledShadowMapTexture", &v44);
  re::RenderFrame::createTarget(a4, (const re::RenderGraphTargetDescription *)v46, "BlurredShadowMapTexture", &v43);
  RenderGraph = (re *)re::RenderFrame::makeRenderGraph(a4, "ProjectiveShadowRenderGraph", 3uLL);
  uint64_t v23 = re::globalAllocators(RenderGraph);
  uint64_t v24 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v23[2] + 32))(v23[2], 256, 8);
  uint64_t v25 = re::RenderGraphNode::RenderGraphNode((re::RenderGraphNode *)v24, "GenerateProjectiveShadowMap");
  *(void *)uint64_t v25 = &unk_26E71D560;
  *(void *)&long long v65 = v25;
  re::DynamicArray<re::TransitionCondition *>::add(RenderGraph, &v65);
  v24[3] = *((void *)RenderGraph + 10);
  void v24[4] = *((void *)RenderGraph + 12);
  v24[6] = *((void *)RenderGraph + 13);
  long long v65 = v45;
  uint64_t v66 = 0x100000000;
  __asm { FMOV            V0.4S, #1.0 }
  long long v67 = _Q0;
  __int16 v68 = 0;
  uint64_t v69 = 0;
  re::DynamicArray<re::TargetWrite>::add((_anonymous_namespace_ *)(v24 + 27), (uint64_t)&v65);
  uint64_t v28 = re::globalAllocators(v27);
  uint64_t v29 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v28[2] + 32))(v28[2], 320, 8);
  unint64_t v30 = re::RenderGraphNode::RenderGraphNode((re::RenderGraphNode *)v29, "DownsampleShadowMap");
  *(void *)unint64_t v30 = &unk_26E71D608;
  *((void *)v30 + 32) = 0;
  *((void *)v30 + 33) = -1;
  *((void *)v30 + 34) = 0;
  *((void *)v30 + 35) = -1;
  uint64_t v31 = (uint64_t)v30 + 288;
  *((_OWORD *)v30 + 1re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
  *((_OWORD *)v30 + 19) = 0u;
  *(void *)&long long v65 = v30;
  re::DynamicArray<re::TransitionCondition *>::add(RenderGraph, &v65);
  *(void *)(v29 + 24) = *((void *)RenderGraph + 10);
  *(void *)(v29 + 32) = *((void *)RenderGraph + 12);
  *(void *)(v29 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *((void *)RenderGraph + 13);
  long long v32 = v44;
  *(_OWORD *)(v29 + 25re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v45;
  *(_OWORD *)(v29 + 272) = v32;
  BOOL v33 = (uint64_t *)((char *)this + 40);
  re::AssetHandle::operator=(v31, v33);
  unint64_t v34 = (re *)re::DownsampleShadowMapNode::configure((void **)v29, a2, a3, a4);
  unint64_t v35 = re::globalAllocators(v34);
  uint64_t v36 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v35[2] + 32))(v35[2], 352, 8);
  id v37 = re::RenderGraphNode::RenderGraphNode((re::RenderGraphNode *)v36, "BlurShadowMap");
  *(void *)id v37 = &unk_26E71D6B0;
  *((void *)v37 + 32) = 0;
  *((void *)v37 + 33) = -1;
  *((void *)v37 + 34) = 0;
  *((void *)v37 + 35) = -1;
  id v38 = (re::RenderGraphNode *)((char *)v37 + 288);
  *((_OWORD *)v37 + 1re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
  *((_OWORD *)v37 + 19) = 0u;
  re::DynamicString::setCapacity(v38, 0);
  *(_OWORD *)(v36 + 320) = 0u;
  *(_OWORD *)(v36 + 33re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0u;
  *(void *)&long long v65 = v36;
  re::DynamicArray<re::TransitionCondition *>::add(RenderGraph, &v65);
  *(void *)(v36 + 24) = *((void *)RenderGraph + 10);
  *(void *)(v36 + 32) = *((void *)RenderGraph + 12);
  *(void *)(v36 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *((void *)RenderGraph + 13);
  long long v39 = v44;
  *(_OWORD *)(v36 + 25re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v43;
  *(_OWORD *)(v36 + 272) = v39;
  re::AssetHandle::operator=(v36 + 320, v33);
  *(void *)&long long v65 = "onePassGaussianBlur9Tap";
  *((void *)&v65 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 23;
  re::DynamicString::operator=(v38, (uint64_t)&v65);
  (*(void (**)(uint64_t, const char *, const char *, re::RenderFrame *))(*(void *)v36 + 80))(v36, a2, a3, a4);
  *(void *)&long long v65 = 0x1C44D2C7F312E749;
  re::RenderFrame::addTargetOutput(a4, (uint64_t *)&v65, (double *)&v43, "projectiveShadowMapScope");
}

void re::ProjectiveShadowProvider::~ProjectiveShadowProvider(re::ProjectiveShadowProvider *this)
{
  *(void *)this = &unk_26E6D52C8;
  re::DynamicString::deinit((re::ProjectiveShadowProvider *)((char *)this + 8));
}

{
  uint64_t vars8;

  re::AssetHandle::~AssetHandle((re::ProjectiveShadowProvider *)((char *)this + 40));
  *(void *)this = &unk_26E6D52C8;
  re::DynamicString::deinit((re::ProjectiveShadowProvider *)((char *)this + 8));
  JUMPOUT(0x237DBCBD0);
}

void re::GuidedFilterOcclusionManager::generatePerFrameGuidedFilterOcclusionData(re::GuidedFilterOcclusionManager *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26E703C30;
  *(unsigned char *)(a2 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  *(void *)(a2 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  id v4 = (void **)(a2 + 16);
  *(void *)(a2 + 24) = 0;
  uint64_t v5 = *(void *)this;
  if (*(void *)this)
  {
    uint64_t v5 = *((void *)this + 1);
    if (v5)
    {
      NS::SharedPtr<MTL::Texture>::operator=(v4, (void **)this);
      NS::SharedPtr<MTL::Texture>::operator=((void **)(a2 + 24), (void **)this + 1);
      long long v6 = *((_OWORD *)this + 2);
      *(_OWORD *)(a2 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *((_OWORD *)this + 1);
      *(_OWORD *)(a2 + 64) = v6;
      long long v7 = *((_OWORD *)this + 3);
      long long v8 = *((_OWORD *)this + 4);
      *(_OWORD *)(a2 + 80) = v7;
      *(_OWORD *)(a2 + 9re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v8;
      LODWORD(v7) = *((_DWORD *)this + 54);
      *(unsigned char *)(a2 + 184) = *((unsigned char *)this + 144);
      unsigned int v9 = exp2((double)(unint64_t)v7);
      *(double *)v10.i64 = simd_quaternion(*((simd_float3x3 *)this + 5));
      float32x4_t v43 = v10;
      *(double *)v11.i64 = simd_quaternion(*(simd_float3x3 *)((char *)this + 80));
      float32x4_t v12 = vmulq_f32(v43, (float32x4_t)xmmword_23440B6C0);
      int8x16_t v13 = (int8x16_t)vnegq_f32(v11);
      int8x16_t v14 = (int8x16_t)vtrn2q_s32((int32x4_t)v11, vtrn1q_s32((int32x4_t)v11, (int32x4_t)v13));
      float32x4_t v15 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v11, v13, 8uLL), *(float32x2_t *)v12.f32, 1), (float32x4_t)vextq_s8(v14, v14, 8uLL), v12.f32[0]);
      float32x4_t v16 = (float32x4_t)vrev64q_s32((int32x4_t)v11);
      v16.i32[0] = v13.i32[1];
      v16.i32[3] = v13.i32[2];
      LODWORD(v17) = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v11, v12, 3), v16, v12, 2), v15).i32[3];
      if (v17 > 1.0) {
        float v17 = 1.0;
      }
      float v18 = acosf(v17);
      float v19 = (float)((float)(v18 + v18) * 180.0) / 3.14159265;
      if (*((float *)this + 48) >= v19)
      {
        unint64_t v20 = *((void *)this + 38) + 1;
        BOOL v21 = v20 < 2;
      }
      else
      {
        unint64_t v20 = 0;
        BOOL v21 = 1;
      }
      *((void *)this + 3re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v20;
      *(unsigned char *)(a2 + 185) = v21;
      long long v22 = *((_OWORD *)this + 6);
      *((_OWORD *)this + 15) = *((_OWORD *)this + 5);
      *((_OWORD *)this + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v22;
      long long v23 = *((_OWORD *)this + 8);
      *((_OWORD *)this + 17) = *((_OWORD *)this + 7);
      *((_OWORD *)this + 1re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v23;
      unsigned int v24 = objc_msgSend(*(id *)(a2 + 16), sel_width, *(_OWORD *)&v43);
      unsigned int v25 = objc_msgSend(*(id *)(a2 + 16), sel_height);
      unsigned int v26 = COERCE_FLOAT(*((void *)this + 28));
      unsigned int v27 = COERCE_FLOAT(HIDWORD(*((void *)this + 28)));
      if (v26 <= v27) {
        unsigned int v28 = COERCE_FLOAT(HIDWORD(*((void *)this + 28)));
      }
      else {
        unsigned int v28 = COERCE_FLOAT(*((void *)this + 28));
      }
      if (v26 >= v27) {
        unsigned int v26 = COERCE_FLOAT(HIDWORD(*((void *)this + 28)));
      }
      int v30 = *((_DWORD *)this + 52);
      unsigned int v29 = *((_DWORD *)this + 53);
      unsigned int v31 = vcvtas_u32_f32((float)((float)v29 * (float)v26) / (float)v28);
      unsigned int v32 = v30 * v25 / v24;
      float v33 = round((float)(acosf(*((float *)this + 4)) * 180.0) / 3.14159265);
      BOOL v34 = v33 == 90.0;
      if (v33 == -90.0) {
        BOOL v34 = 1;
      }
      BOOL v35 = !v34;
      if (v34) {
        unsigned int v36 = v31;
      }
      else {
        unsigned int v36 = v29;
      }
      if (v35) {
        unsigned int v37 = v31;
      }
      else {
        unsigned int v37 = v29;
      }
      unsigned int v38 = 16 * v9;
      LODWORD(v5) = v36 / v38 * v38;
      unsigned int v39 = v37 / v38 * v38;
      *(_DWORD *)(a2 + 160) = v5;
      *(_DWORD *)(a2 + 164) = v39;
      *(_DWORD *)(a2 + 17re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v5 / v9;
      *(_DWORD *)(a2 + 180) = v39 / v9;
      *(_DWORD *)(a2 + 16re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v30;
      *(_DWORD *)(a2 + 172) = v32;
      long long v40 = *((_OWORD *)this + 10);
      LODWORD(v40) = HIDWORD(v40);
      HIDWORD(v40) = *((_OWORD *)this + 10);
      *(void *)(a2 + 152) = *((void *)this + 25);
      uint64_t v41 = *((void *)this + 23);
      int32x2_t v42 = vrev64_s32(*(int32x2_t *)((char *)this + 176));
      *(_OWORD *)(a2 + 112) = v40;
      *(_DWORD *)(a2 + 144) = *((_DWORD *)this + 49);
      *(int32x2_t *)(a2 + 12re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v42;
      *(void *)(a2 + 13re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v41;
      *(_DWORD *)(a2 + 14re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *((_DWORD *)this + 48);
      LOBYTE(v5) = 1;
    }
  }
  *(unsigned char *)(a2 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v5;
}

uint64_t re::SceneUnderstandingManager::setDepthFeatheringEnabled(uint64_t this, int a2)
{
  if (*(unsigned __int8 *)(this + 8) != a2) {
    *(unsigned char *)(this + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = a2;
  }
  return this;
}

uint64_t re::SceneUnderstandingManager::isDepthFeatheringEnabled(re::SceneUnderstandingManager *this)
{
  return *((unsigned __int8 *)this + 8);
}

uint64_t re::SceneUnderstandingManager::setGuidedFilterOcclusionSupportEnabled(uint64_t this, char a2)
{
  *(unsigned char *)(this + 9) = a2;
  return this;
}

uint64_t re::SceneUnderstandingManager::isGuidedFilterOcclusionSupportEnabled(re::SceneUnderstandingManager *this)
{
  return *((unsigned __int8 *)this + 9);
}

uint64_t re::SceneUnderstandingManager::setGuidedFilterOcclusionEnabled(uint64_t this, char a2)
{
  *(unsigned char *)(this + 10) = a2;
  return this;
}

uint64_t re::SceneUnderstandingManager::isGuidedFilterOcclusionEnabled(re::SceneUnderstandingManager *this)
{
  return *((unsigned __int8 *)this + 10);
}

uint64_t re::SceneUnderstandingManager::setGuidedFilterOcclusionUseSingleMTLEvent(uint64_t this, char a2)
{
  *(unsigned char *)(this + 160) = a2;
  return this;
}

void **re::SceneUnderstandingManager::setGuidedFilterOcclusionCameraFeed(uint64_t a1, void **a2, void **a3)
{
  NS::SharedPtr<MTL::Texture>::operator=((void **)(a1 + 16), a2);
  return NS::SharedPtr<MTL::Texture>::operator=((void **)(a1 + 24), a3);
}

uint64_t re::SceneUnderstandingManager::setGuidedFilterOcclusionCameraFeedCorrectionMatrix(uint64_t this, simd_float4x4 a2)
{
  *(simd_float4x4 *)(this + 32) = a2;
  return this;
}

uint64_t re::SceneUnderstandingManager::setGuidedFilterOcclusionCameraWorldTransformMatrix(uint64_t this, simd_float4x4 a2)
{
  *(simd_float4x4 *)(this + 9re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = a2;
  return this;
}

uint64_t re::SceneUnderstandingManager::setGuidedFilterOcclusionViewportSize(uint64_t result, double a2)
{
  *(double *)(result + 240) = a2;
  return result;
}

void re::SceneUnderstandingManager::getGuidedFilterOcclusionData(re::SceneUnderstandingManager *this@<X0>, uint64_t a2@<X8>)
{
}

double re::SceneUnderstandingManager::SceneUnderstandingManager(re::SceneUnderstandingManager *this)
{
  *(void *)this = &unk_26E720198;
  *((_WORD *)this + 4) = 0;
  *((unsigned char *)this + 10) = 0;
  *((unsigned char *)this + 160) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((_OWORD *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = xmmword_234415650;
  *((void *)this + 24) = 0x400000007;
  *((void *)this + 25) = 0x3EE147AE3F19999ALL;
  *((void *)this + 2re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0x93F19999ALL;
  *((void *)this + 27) = 0x3E6147AE3F19999ALL;
  *((void *)this + 2re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0x20000000200;
  *((_DWORD *)this + 5re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 1;
  *((void *)this + 30) = 0;
  *((_OWORD *)this + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = xmmword_23435FD50;
  *((_OWORD *)this + 17) = xmmword_23435FD60;
  double result = 0.0;
  *((_OWORD *)this + 1re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = xmmword_23435FD80;
  *((_OWORD *)this + 19) = xmmword_23435FBB0;
  *((void *)this + 40) = 0;
  return result;
}

void re::SceneUnderstandingManager::~SceneUnderstandingManager(re::SceneUnderstandingManager *this)
{
  *(void *)this = &unk_26E720198;
  uint64_t v2 = (void *)*((void *)this + 3);
  if (v2)
  {

    *((void *)this + 3) = 0;
  }
  uint64_t v3 = (void *)*((void *)this + 2);
  if (v3)
  {

    *((void *)this + 2) = 0;
  }
}

{
  uint64_t vars8;

  re::SceneUnderstandingManager::~SceneUnderstandingManager(this);
  JUMPOUT(0x237DBCBD0);
}

void *re::allocInfo_SceneUnderstandingService(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_485, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_485))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF9E020, "SceneUnderstandingService");
    __cxa_guard_release(&_MergedGlobals_485);
  }
  return &unk_26AF9E020;
}

void re::initInfo_SceneUnderstandingService(re *this, re::IntrospectionBase *a2)
{
  v5[0] = 0x751DCB99112AFALL;
  v5[1] = "SceneUnderstandingService";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0x800000008;
  *((_DWORD *)this + re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = &re::initInfo_SceneUnderstandingService(re::IntrospectionBase *)::structureAttributes;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

uint64_t re::introspect_SceneUnderstandingService(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"SceneUnderstandingService", (uint64_t (*)(re::internal *))re::allocInfo_SceneUnderstandingService, (re::IntrospectionBase *(*)(void))re::initInfo_SceneUnderstandingService, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::SceneUnderstandingService>, this);
}

re::TypeRegistry *re::createTypeRegistry(uint64_t a1, re::Allocator *a2, re::Allocator *a3)
{
  long long v4 = a2;
  uint64_t v69 = *MEMORY[0x263EF8340];
  long long v6 = (re::TypeRegistry *)(*(uint64_t (**)(re::Allocator *, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 864, 8);
  unint64_t v62 = re::TypeRegistry::TypeRegistry(v6, v4);
  v63[0] = 0;
  v63[1] = 0xFFFFFFFFLL;
  *(void *)&long long v64 = 0;
  *(void *)&long long v65 = 0;
  DWORD2(v65) = -1;
  *(void *)&long long v66 = 0;
  DWORD2(v6re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = -1;
  *(void *)&long long v67 = 0;
  *((void *)&v67 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0xFFFFFFFFLL;
  v61[0] = v4;
  v61[1] = a3;
  _OWORD v61[2] = a1;
  *(void *)&v48[0] = 6059476;
  *((void *)&v48[0] + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = "BOOL";
  re::TypeBuilderHelper::registerBasic<BOOL>(v62, (uint64_t *)v48, &v60);
  re::StringID::destroyString((re::StringID *)v48);
  *(void *)&v48[0] = 6104748;
  *((void *)&v48[0] + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = "char";
  re::TypeBuilderHelper::registerBasic<BOOL>(v6, (uint64_t *)v48, &v59);
  re::StringID::destroyString((re::StringID *)v48);
  *(void *)&v48[0] = 0x161EEF7A2;
  *((void *)&v48[0] + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = "double";
  re::TypeBuilderHelper::registerBasic<double>(v6, (uint64_t *)v48, &v58);
  re::StringID::destroyString((re::StringID *)v48);
  *(void *)&v48[0] = 195052728;
  *((void *)&v48[0] + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = "float";
  re::TypeBuilderHelper::registerBasic<float>(v6, (uint64_t *)v48, &v57);
  re::StringID::destroyString((re::StringID *)v48);
  *(void *)&v48[0] = 218827000;
  *((void *)&v48[0] + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = "short";
  re::TypeBuilderHelper::registerBasic<short>(v6, (uint64_t *)v48, &v56);
  re::StringID::destroyString((re::StringID *)v48);
  *(void *)&v48[0] = 208862;
  *((void *)&v48[0] + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = "int";
  re::TypeBuilderHelper::registerBasic<int>(v6, (uint64_t *)v48, &v55);
  re::StringID::destroyString((re::StringID *)v48);
  *(void *)&v48[0] = 6655224;
  *((void *)&v48[0] + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = "long";
  re::TypeBuilderHelper::registerBasic<long>(v6, (uint64_t *)v48, &v54);
  re::StringID::destroyString((re::StringID *)v48);
  *(void *)&v48[0] = 0x1947BDF6CLL;
  *((void *)&v48[0] + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = "size_t";
  re::TypeBuilderHelper::registerBasic<long>(v6, (uint64_t *)v48, &v53);
  re::StringID::destroyString((re::StringID *)v48);
  *(void *)&v48[0] = 0x2CE93EC744;
  *((void *)&v48[0] + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = "int64_t";
  re::TypeBuilderHelper::registerBasic<long>(v6, (uint64_t *)v48, &v52);
  re::StringID::destroyString((re::StringID *)v48);
  *(void *)&__s.var0 = 0x31CD534126;
  __s.var1 = "uint8_t";
  re::TypeBuilderHelper::registerBasic<BOOL>(v6, (uint64_t *)&__s, (re::TypeRegistry **)v48);
  long long v64 = v48[0];
  re::StringID::destroyString((re::StringID *)&__s);
  *(void *)&__s.var0 = 0x607DD0D4E68;
  __s.var1 = "uint16_t";
  re::TypeBuilderHelper::registerBasic<short>(v6, (uint64_t *)&__s, (re::TypeRegistry **)v48);
  long long v65 = v48[0];
  re::StringID::destroyString((re::StringID *)&__s);
  *(void *)&__s.var0 = 0x607DD0F01DCLL;
  __s.var1 = "uint32_t";
  re::TypeBuilderHelper::registerBasic<int>(v6, (uint64_t *)&__s, (re::TypeRegistry **)v48);
  long long v66 = v48[0];
  re::StringID::destroyString((re::StringID *)&__s);
  *(void *)&__s.var0 = 0x607DD11CB1ALL;
  __s.var1 = "uint64_t";
  re::TypeBuilderHelper::registerBasic<long>(v6, (uint64_t *)&__s, (re::TypeRegistry **)v48);
  long long v67 = v48[0];
  re::StringID::destroyString((re::StringID *)&__s);
  *(void *)&v48[0] = 218827000;
  *((void *)&v48[0] + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = "short";
  *(void *)&__s.var0 = 0x2CE93A4A92;
  __s.var1 = "int16_t";
  re::TypeRegistry::declareTypeAlias(v6, (const re::StringID *)v48, &__s);
  re::StringID::destroyString((re::StringID *)&__s);
  re::StringID::destroyString((re::StringID *)v48);
  *(void *)&v48[0] = 208862;
  *((void *)&v48[0] + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = "int";
  *(void *)&__s.var0 = 0x2CE93BFE06;
  __s.var1 = "int32_t";
  re::TypeRegistry::declareTypeAlias(v6, (const re::StringID *)v48, &__s);
  re::StringID::destroyString((re::StringID *)&__s);
  re::StringID::destroyString((re::StringID *)v48);
  re::TypeBuilderHelper::registerCString(v6, &v51);
  re::TypeBuilderHelper::registerDynamicString(v6, &v50);
  re::TypeBuilderHelper::registerStringID(v6, &v49);
  re::TypeBuilder::TypeBuilder((re::TypeBuilder *)v48, a3);
  *(void *)&__s.var0 = 0x258C98EAAF29A10ALL;
  __s.var1 = "CallbackSerializerAttribute";
  v47[0] = 0;
  v47[1] = 0xFFFFFFFFLL;
  re::TypeBuilder::beginObjectType((uint64_t)v48, (uint64_t *)&__s, 1, 1, 8uLL, 8uLL, (uint64_t)v47);
  re::StringID::destroyString((re::StringID *)&__s);
  re::TypeBuilder::commitTo((re::TypeBuilder *)v48, v6, v63);
  uint64_t v8 = *(unsigned int *)(a1 + 32);
  if (v8)
  {
    uint64_t v9 = 0;
    float32x4_t v10 = (int *)(*(void *)(a1 + 16) + 8);
    while (1)
    {
      int v11 = *v10;
      v10 += 14;
      if (v11 < 0) {
        break;
      }
      if (v8 == ++v9)
      {
        LODWORD(v9) = *(_DWORD *)(a1 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v9) = 0;
  }
  unsigned int v12 = *(_DWORD *)(a1 + 32);
  if (v8 == v9)
  {
LABEL_18:
    uint64_t v16 = 0;
    if (v12)
    {
      float v17 = (int *)(*(void *)(a1 + 16) + 8);
      while (1)
      {
        int v18 = *v17;
        v17 += 14;
        if (v18 < 0) {
          break;
        }
        if (v12 == ++v16)
        {
          LODWORD(v1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v12;
          break;
        }
      }
    }
    if (v12 != v16)
    {
      uint64_t v19 = v16;
      unsigned int v20 = v12;
      unsigned int v39 = v4;
      while (1)
      {
        uint64_t v21 = *(void *)(*(void *)(a1 + 16) + 56 * v19 + 48);
        if (*(_DWORD *)(v21 + 16) == 8)
        {
          uint64_t v22 = *(unsigned int *)(v21 + 56);
          if (v22) {
            break;
          }
        }
LABEL_45:
        if (v20 <= (int)v16 + 1) {
          unsigned int v33 = v16 + 1;
        }
        else {
          unsigned int v33 = v20;
        }
        while (1)
        {
          uint64_t v19 = (v16 + 1);
          if (v33 - 1 == v16) {
            break;
          }
          LODWORD(v1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v16 + 1;
          unsigned int v34 = v19;
          if ((*(_DWORD *)(*(void *)(a1 + 16) + 56 * v19 + 8) & 0x80000000) != 0) {
            goto LABEL_52;
          }
        }
        unsigned int v34 = v33;
LABEL_52:
        LODWORD(v1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v34;
        if (v12 == v34) {
          goto LABEL_58;
        }
      }
      uint64_t v38 = *(void *)(a1 + 16);
      uint64_t v23 = *(void *)(v21 + 64);
      uint64_t v40 = v23 + 8 * v22;
      while (1)
      {
        if (**(_DWORD **)v23 == 2)
        {
          unsigned int v24 = *(unsigned int **)(*(void *)v23 + 8);
          if (v24)
          {
            unsigned int v25 = *v24;
            if (*v24) {
              break;
            }
          }
        }
LABEL_43:
        v23 += 8;
        if (v23 == v40)
        {
          unsigned int v20 = *(_DWORD *)(a1 + 32);
          goto LABEL_45;
        }
      }
      uint64_t v26 = *((void *)v24 + 1);
      uint64_t v41 = v26 + 40 * v25;
      uint64_t v27 = v26 + 8;
      while (1)
      {
        uint64_t v28 = v27 - 8;
        *(void *)&__s.var0 = *(void *)(v27 - 8);
        uint64_t v44 = 0;
        uint64_t v29 = *(void *)(v27 + 8);
        if (v29)
        {
          if (*(unsigned char *)(v29 + 8)) {
            int v30 = *(const char **)(v29 + 16);
          }
          else {
            int v30 = (const char *)(v29 + 9);
          }
          uint64_t v31 = (uint64_t)re::SerializedReference<re::IntrospectionBase const*>::setString((uint64_t)&__s.var1, v30, *(void *)v29);
        }
        else
        {
          uint64_t v31 = re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)&__s.var1);
          __s.var1 = *(char **)v27;
        }
        uint64_t v32 = *(void *)(v27 + 16);
        int v46 = *(_DWORD *)(v27 + 24);
        uint64_t v45 = v32;
        if (!*(void *)&__s.var0 {
          || !**(unsigned char **)&__s.var0
        }
        {
          BOOL v35 = *re::foundationSerializationLogObjects((re *)v31);
          long long v4 = v39;
          if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
          {
            if (*(unsigned char *)(v38 + 56 * v19 + 24)) {
              uint64_t v37 = *(void *)(v38 + 56 * v19 + 32);
            }
            else {
              uint64_t v37 = v38 + 56 * v19 + 25;
            }
            *(_DWORD *)simd_float4x4 buf = 136315138;
            *(void *)&uint8_t buf[4] = v37;
            _os_log_error_impl(&dword_233120000, v35, OS_LOG_TYPE_ERROR, "Invalid polymorphic table in type \"%s\"", buf, 0xCu);
          }
          re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)&__s.var1);
          goto LABEL_56;
        }
        if (!*(void *)buf) {
          break;
        }
        re::TypeRegistry::makeStringID(v6, *(const char **)&__s.var0, (re::StringID *)&v42);
        re::TypeRegistry::overridePolymorphicObjectName((uint64_t)v6, (uint64_t)buf, &v42);
        re::StringID::destroyString((re::StringID *)&v42);
        re::TypeRegistry::overrideCustomClassID((uint64_t)v6, (uint64_t)buf, v45);
        re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)&__s.var1);
        v27 += 40;
        if (v28 + 40 == v41) {
          goto LABEL_43;
        }
      }
      re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)&__s.var1);
      long long v4 = v39;
      if (v6) {
        goto LABEL_57;
      }
    }
  }
  else
  {
    uint64_t v13 = v9;
    while (1)
    {
      if (!*(void *)&__s.var0) {
        break;
      }
      unsigned int v12 = *(_DWORD *)(a1 + 32);
      if (v12 <= (int)v9 + 1) {
        int v14 = v9 + 1;
      }
      else {
        int v14 = *(_DWORD *)(a1 + 32);
      }
      while (1)
      {
        uint64_t v13 = (v9 + 1);
        if (v14 - 1 == v9) {
          break;
        }
        LODWORD(v9) = v9 + 1;
        int v15 = v13;
        if ((*(_DWORD *)(*(void *)(a1 + 16) + 56 * v13 + 8) & 0x80000000) != 0) {
          goto LABEL_17;
        }
      }
      int v15 = v14;
LABEL_17:
      LODWORD(v9) = v15;
      if (v8 == v15) {
        goto LABEL_18;
      }
    }
LABEL_56:
    if (v6)
    {
LABEL_57:
      re::TypeRegistry::~TypeRegistry(v6);
      (*(void (**)(re::Allocator *, re::TypeRegistry *))(*(void *)v4 + 40))(v4, v6);
      long long v6 = 0;
    }
  }
LABEL_58:
  re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v48, v7);
  return v6;
}

void anonymous namespace'::getTypeID(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v139 = *MEMORY[0x263EF8340];
  uint64_t v8 = a4[3];
  uint64_t v9 = *(char **)(a2 + 16);
  uint64_t v10 = a2 + 9;
  if ((*(unsigned char *)(a2 + 8) & 1) == 0) {
    uint64_t v9 = (char *)(a2 + 9);
  }
  if (v9)
  {
    uint64_t v11 = *v9;
    if (*v9)
    {
      char v12 = v9[1];
      if (v12)
      {
        uint64_t v13 = (unsigned __int8 *)(v9 + 2);
        do
        {
          uint64_t v11 = 31 * v11 + v12;
          int v14 = *v13++;
          char v12 = v14;
        }
        while (v14);
      }
    }
  }
  else
  {
    uint64_t v11 = 0;
  }
  *((void *)&buf + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = v9;
  *(void *)&long long buf = 2 * v11;
  int v15 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(v8 + 200, &buf);
  if (v15)
  {
    uint64_t v16 = *v15;
    re::StringID::destroyString((re::StringID *)&buf);
    if (v8)
    {
      *a1 = v8;
      a1[1] = v16;
      return;
    }
  }
  else
  {
    re::StringID::destroyString((re::StringID *)&buf);
  }
  if (!a3)
  {
    uint64_t v28 = (re *)re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet(a4[2], a2);
    if (!v28 || (a3 = *(void *)v28) == 0)
    {
      uint64_t v29 = *re::foundationSerializationLogObjects(v28);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
      {
        if (*(void *)(a2 + 8)) {
          uint64_t v54 = *(void *)(a2 + 16);
        }
        else {
          uint64_t v54 = v10;
        }
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = v54;
        _os_log_error_impl(&dword_233120000, v29, OS_LOG_TYPE_ERROR, "Invalid introspection info. Type name: \"%s\"", (uint8_t *)&buf, 0xCu);
      }
      *a1 = 0;
      a1[1] = 0xFFFFFFFFLL;
      return;
    }
  }
  uint64_t v17 = *(int *)(a3 + 16);
  if (v17 > 0xD) {
    int v18 = 0;
  }
  else {
    int v18 = byte_2344156BA[v17];
  }
  re::StringID::StringID((re::StringID *)&v90, (const re::DynamicString *)a2);
  if (*(_DWORD *)(a3 + 16) == 8) {
    StructureVersiounint64_t n = re::introspectionFindStructureVersion((re *)a3, v19);
  }
  else {
    StructureVersiounint64_t n = 1;
  }
  re::TypeRegistry::declareType(a4[3], v18, &v90, StructureVersion, 0, &buf);
  uint64_t v88 = *((void *)&buf + 1);
  uint64_t v89 = buf;
  uint64_t v21 = (re *)a4[3];
  unint64_t v23 = *(int *)(a3 + 20);
  unint64_t v22 = *(int *)(a3 + 24);
  re::TypeBuilder::TypeBuilder((re::TypeBuilder *)&buf, (re::Allocator *)a4[1]);
  switch(*(_DWORD *)(a3 + 16))
  {
    case 1:
        goto LABEL_173;
      if (!*(void *)&v117.var0) {
        goto LABEL_173;
      }
      StringID v136 = v117;
      re::TypeBuilder::beginPointerType((uint64_t)&buf, (uint64_t *)&v90, 1, v23, v22, (uint64_t)&v136, 1);
      uint64_t v26 = v88;
      uint64_t v25 = v89;
      v135[0] = v89;
      v135[1] = v88;
      uint64_t v27 = v135;
      goto LABEL_168;
    case 2:
        goto LABEL_173;
      if (!*(void *)&v117.var0) {
        goto LABEL_173;
      }
      StringID v134 = v117;
      re::TypeBuilder::beginArrayType((uint64_t)&buf, (uint64_t *)&v90, (re **)&v134, *(int *)(a3 + 64));
      uint64_t v26 = v88;
      uint64_t v25 = v89;
      v133[0] = v89;
      v133[1] = v88;
      uint64_t v27 = v133;
      goto LABEL_168;
    case 3:
        goto LABEL_173;
      if (!*(void *)&v117.var0) {
        goto LABEL_173;
      }
      StringID v132 = v117;
      re::TypeBuilder::beginListType((uint64_t)&buf, (uint64_t *)&v90, 1, v23, v22, (long long *)&v132);
      re::TypeBuilder::setIsIncomplete((uint64_t)&buf, 1);
      uint64_t v26 = v88;
      uint64_t v25 = v89;
      v131[0] = v89;
      v131[1] = v88;
      uint64_t v27 = v131;
      goto LABEL_168;
    case 4:
        goto LABEL_173;
      if (!*(void *)&v117.var0) {
        goto LABEL_173;
      }
      StringID v130 = v117;
      re::TypeBuilder::beginListType((uint64_t)&buf, (uint64_t *)&v90, 1, v23, v22, (long long *)&v130);
      re::TypeBuilder::setIsIncomplete((uint64_t)&buf, 1);
      uint64_t v26 = v88;
      uint64_t v25 = v89;
      v129[0] = v89;
      v129[1] = v88;
      uint64_t v27 = v129;
      goto LABEL_168;
    case 5:
        goto LABEL_173;
      if (!*(void *)&v117.var0) {
        goto LABEL_173;
      }
      StringID v128 = v117;
      re::TypeBuilder::beginListType((uint64_t)&buf, (uint64_t *)&v90, 1, v23, v22, (long long *)&v128);
      re::TypeBuilder::setIsIncomplete((uint64_t)&buf, 1);
      uint64_t v26 = v88;
      uint64_t v25 = v89;
      v127[0] = v89;
      v127[1] = v88;
      uint64_t v27 = v127;
      goto LABEL_168;
    case 7:
        goto LABEL_173;
        goto LABEL_173;
      if (!*(void *)&v117.var0) {
        goto LABEL_173;
      }
      if (!(void)v118) {
        goto LABEL_173;
      }
      StringID v126 = v117;
      long long v125 = v118;
      re::TypeBuilder::beginDictionaryType((uint64_t)&buf, (uint64_t *)&v90, 1, v23, v22, (long long *)&v126, &v125);
      re::TypeBuilder::setIsIncomplete((uint64_t)&buf, 1);
      uint64_t v26 = v88;
      uint64_t v25 = v89;
      v124[0] = v89;
      v124[1] = v88;
      uint64_t v27 = v124;
      goto LABEL_168;
    case 8:
      v123[0] = 0;
      v123[1] = 0xFFFFFFFFLL;
      unint64_t TypeID = re::TypeBuilder::beginObjectType((uint64_t)&buf, (uint64_t *)&v90, 1, -2, v23, v22, (uint64_t)v123);
      uint64_t v31 = *(void **)(a3 + 64);
      uint64_t v32 = *(unsigned int *)(a3 + 56);
      uint64_t v33 = 8 * v32;
      if (!v32)
      {
        char v47 = 0;
        uint64_t v26 = v88;
        uint64_t v25 = v89;
        goto LABEL_91;
      }
      int v84 = v32;
      char v85 = 0;
      char v87 = 0;
      uint64_t v86 = (long long *)(a4 + 12);
      uint64_t v34 = 8 * v32;
      BOOL v35 = v31;
      break;
    case 9:
      if (!*(void *)(a3 + 64)) {
        goto LABEL_173;
      }
      switch(*(_DWORD *)(a3 + 20))
      {
        case 1:
          long long v48 = a4 + 6;
          break;
        case 2:
          long long v48 = a4 + 8;
          break;
        case 4:
          long long v48 = a4 + 10;
          break;
        case 8:
          long long v48 = a4 + 12;
          break;
        default:
          goto LABEL_173;
      }
      if (!*v48) {
        goto LABEL_173;
      }
      v97[0] = *v48;
      v97[1] = v48[1];
      uint64_t v55 = re::TypeBuilder::beginEnumType((uint64_t)&buf, (uint64_t *)&v90, 1, -2, (uint64_t)v97);
      long long v56 = *(unsigned int **)(a3 + 64);
      long long v57 = (void *)*((void *)v56 + 1);
      uint64_t v58 = *v56;
      uint64_t v59 = 8 * v58;
      if (v58)
      {
        uint64_t v60 = 8 * v58;
        long long v61 = (void *)*((void *)v56 + 1);
        do
        {
          unint64_t v62 = (_DWORD *)*v61;
          if (*(_DWORD *)*v61 == 1)
          {
            uint64_t v63 = *((void *)v62 + 1);
            long long v64 = (const char *)*((void *)v62 + 2);
            *(void *)&v117.var0 = 0;
            v117.var1 = "";
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)&buf, v63, &v117);
            re::StringID::destroyString((re::StringID *)&v117);
          }
          ++v61;
          v60 -= 8;
        }
        while (v60);
      }
      if (*(void *)&v90.var0 >> 1 == 0x4848FE09E6F816FDLL)
      {
        if (v90.var1 == "RERotationOrder" || (uint64_t v55 = strcmp(v90.var1, "RERotationOrder"), !v55))
        {
          *(void *)&v117.var0 = 174834;
          v117.var1 = "XYZ";
          re::TypeBuilder::addEnumConstant((re::TypeBuilder *)&buf, 0, &v117);
          re::StringID::destroyString((re::StringID *)&v117);
          *(void *)&v117.var0 = 176814;
          v117.var1 = "YZX";
          re::TypeBuilder::addEnumConstant((re::TypeBuilder *)&buf, 1, &v117);
          re::StringID::destroyString((re::StringID *)&v117);
          *(void *)&v117.var0 = 178614;
          v117.var1 = "ZXY";
          re::TypeBuilder::addEnumConstant((re::TypeBuilder *)&buf, 2, &v117);
          re::StringID::destroyString((re::StringID *)&v117);
          *(void *)&v117.var0 = 174894;
          v117.var1 = "XZY";
          re::TypeBuilder::addEnumConstant((re::TypeBuilder *)&buf, 3, &v117);
          re::StringID::destroyString((re::StringID *)&v117);
          *(void *)&v117.var0 = 176694;
          v117.var1 = "YXZ";
          re::TypeBuilder::addEnumConstant((re::TypeBuilder *)&buf, 4, &v117);
          re::StringID::destroyString((re::StringID *)&v117);
          *(void *)&v117.var0 = 178674;
          v117.var1 = "ZYX";
          re::TypeBuilder::addEnumConstant((re::TypeBuilder *)&buf, 5, &v117);
          re::StringID::destroyString((re::StringID *)&v117);
          *(void *)&v117.var0 = 130597342;
          v117.var1 = "Count";
          re::TypeBuilder::addEnumConstant((re::TypeBuilder *)&buf, 6, &v117);
          re::StringID::destroyString((re::StringID *)&v117);
          *(void *)&v117.var0 = 0x1FB01113AELL;
          v117.var1 = "Invalid";
          re::TypeBuilder::addEnumConstant((re::TypeBuilder *)&buf, 7, &v117);
          re::StringID::destroyString((re::StringID *)&v117);
        }
      }
      if (v58)
      {
        do
        {
          long long v65 = (_DWORD *)*v57;
          if (*(_DWORD *)*v57 == 2)
          {
            uint64_t v66 = *((void *)v65 + 1);
            long long v67 = (const char *)*((void *)v65 + 2);
            *(void *)&v117.var0 = 0;
            v117.var1 = "";
            re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)&buf, v66, &v117);
            re::StringID::destroyString((re::StringID *)&v117);
          }
          ++v57;
          v59 -= 8;
        }
        while (v59);
      }
      uint64_t v26 = v88;
      uint64_t v25 = v89;
      v96[0] = v89;
      v96[1] = v88;
      uint64_t v27 = v96;
      goto LABEL_168;
    case 0xB:
      v95[0] = 0;
      v95[1] = 0xFFFFFFFFLL;
      re::TypeBuilder::beginObjectType((uint64_t)&buf, (uint64_t *)&v90, 1, -2, v23, v22, (uint64_t)v95);
      uint64_t v49 = (void *)(*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*a4 + 32))(*a4, 8, 8);
      *uint64_t v49 = 0;
      long long v94 = *((_OWORD *)a4 + 2);
      re::TypeBuilder::addAttribute(&buf, (uint64_t)&v94, (uint64_t)v49, -1, 1);
      re::TypeBuilder::setIsCallbackSerializer((uint64_t)&buf, 1);
      re::TypeBuilder::setIsIncomplete((uint64_t)&buf, 1);
      uint64_t v26 = v88;
      uint64_t v25 = v89;
      uint64_t v93 = v89;
      uint64_t v27 = &v93;
      goto LABEL_167;
    case 0xD:
        goto LABEL_173;
      if (!*(void *)&v117.var0) {
        goto LABEL_173;
      }
      StringID v92 = v117;
      re::TypeBuilder::beginOptionalType((uint64_t)&buf, (uint64_t *)&v90, v23, v22, (long long *)&v92);
      re::TypeBuilder::setIsIncomplete((uint64_t)&buf, 1);
      uint64_t v26 = v88;
      uint64_t v25 = v89;
      v91[0] = v89;
      v91[1] = v88;
      uint64_t v27 = v91;
      goto LABEL_168;
    default:
      goto LABEL_173;
  }
  while (2)
  {
    unsigned int v36 = (_DWORD *)*v35;
    switch(*(_DWORD *)*v35)
    {
      case 1:
          goto LABEL_173;
        if (!(void)v122) {
          goto LABEL_173;
        }
        break;
      case 3:
          goto LABEL_173;
        StringID v105 = v117;
        *(void *)&long long v118 = 0xC98E91CCDF0B5FC4;
        *((void *)&v118 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = "customClassID";
        re::TypeBuilder::addObjectMemberCustomClassID((uint64_t)&buf, (uint64_t)&v105, (uint64_t *)&v118, v36[6]);
        re::StringID::destroyString((re::StringID *)&v118);
        goto LABEL_80;
      case 4:
        if (v36[1] == 1) {
          unint64_t TypeID = re::TypeBuilder::setHideObjectWithOneMember((uint64_t)&buf, 1);
        }
        goto LABEL_80;
      case 6:
        unint64_t v40 = *((void *)v36 + 1);
        if (v40 > v138) {
          unint64_t TypeID = re::TypeBuilder::setVersion((uint64_t)&buf, v40);
        }
        goto LABEL_80;
      default:
        goto LABEL_80;
    }
    switch(v36[10])
    {
      case 0:
        long long v120 = v122;
        re::StringID::StringID((re::StringID *)&v117, *((const char **)v36 + 1));
        re::TypeBuilder::addObjectMember((uint64_t)&buf, 0xFFFFFFFFLL, (uint64_t)&v120, (uint64_t *)&v117, v36[9]);
        re::StringID::destroyString((re::StringID *)&v117);
        uint64_t v37 = *((void *)v36 + 1);
        unint64_t TypeID = strlen((const char *)v37);
        BOOL v39 = TypeID == 6 && *(_DWORD *)v37 == 1701470831 && *(_WORD *)(v37 + 4) == 29795;
        v87 |= v39;
        goto LABEL_80;
      case 1:
        re::TypeRegistry::typeInfo(v21, (re **)&v122, &v118);
        if (!(_BYTE)v118 || v119 != 9) {
          goto LABEL_173;
        }
        re::TypeBuilder::TypeBuilder((re::TypeBuilder *)&v117, (re::Allocator *)a4[1]);
        re::DynamicString::format((re::DynamicString *)"%s::%s", (re::DynamicString *)&v115, v90.var1, *((void *)v36 + 1));
        re::StringID::StringID((re::StringID *)v114, (const re::DynamicString *)&v115);
        re::TypeInfo::referencedType((re::TypeInfo *)((char *)&v118 + 8), (uint64_t)&v111);
        uint64_t v41 = *v112;
        v113[0] = (re *)v111;
        v113[1] = v41;
        long long v110 = *v86;
        re::TypeBuilder::beginArrayType((uint64_t)&v117, v114, v113, (uint64_t)&v110, 0);
        re::StringID::destroyString((re::StringID *)v114);
        re::TypeBuilder::commitTo((re::TypeBuilder *)&v117, v21, &v111);
        if (!(void)v111) {
          goto LABEL_169;
        }
        long long v109 = v111;
        re::StringID::StringID((re::StringID *)v114, *((const char **)v36 + 1));
        int v43 = v36[9];
        uint64_t v44 = &v109;
        goto LABEL_73;
      case 2:
        re::TypeRegistry::typeInfo(v21, (re **)&v122, &v118);
        if (!(_BYTE)v118 || v119 != 9) {
          goto LABEL_173;
        }
        re::TypeBuilder::TypeBuilder((re::TypeBuilder *)&v117, (re::Allocator *)a4[1]);
        re::DynamicString::format((re::DynamicString *)"%s::%s", (re::DynamicString *)&v115, v90.var1, *((void *)v36 + 1));
        re::StringID::StringID((re::StringID *)v114, (const re::DynamicString *)&v115);
        re::TypeInfo::referencedType((re::TypeInfo *)((char *)&v118 + 8), (uint64_t)&v111);
        uint64_t v45 = *v112;
        v108[0] = v111;
        v108[1] = v45;
        re::TypeBuilder::beginPointerType((uint64_t)&v117, v114, 1, 8uLL, 8uLL, (uint64_t)v108, 1);
        re::StringID::destroyString((re::StringID *)v114);
        long long v107 = *v86;
        re::TypeBuilder::addCustomClassIDForPointer((uint64_t)&v117, (uint64_t)&v107, 8);
        re::TypeBuilder::commitTo((re::TypeBuilder *)&v117, v21, &v111);
        if (!(void)v111)
        {
LABEL_169:
          if (v115 && (v116 & 1) != 0) {
            (*(void (**)(void))(*(void *)v115 + 40))();
          }
          re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v117, v42);
LABEL_173:
          re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&buf, v24);
          unint64_t v82 = *re::foundationSerializationLogObjects(v81);
          if (os_log_type_enabled(v82, OS_LOG_TYPE_ERROR))
          {
            if (*(void *)(a2 + 8)) {
              uint64_t v83 = *(void *)(a2 + 16);
            }
            else {
              uint64_t v83 = v10;
            }
            LODWORD(buf) = 136315138;
            *(void *)((char *)&buf + 4) = v83;
            _os_log_error_impl(&dword_233120000, v82, OS_LOG_TYPE_ERROR, "Failed to create type info for type \"%s\".", (uint8_t *)&buf, 0xCu);
          }
          *a1 = 0;
          a1[1] = 0xFFFFFFFFLL;
          goto LABEL_175;
        }
        long long v106 = v111;
        re::StringID::StringID((re::StringID *)v114, *((const char **)v36 + 1));
        int v43 = v36[9];
        uint64_t v44 = &v106;
LABEL_73:
        re::TypeBuilder::addObjectMember((uint64_t)&buf, 0xFFFFFFFFLL, (uint64_t)v44, v114, v43);
        re::StringID::destroyString((re::StringID *)v114);
        if (v115 && (v116 & 1) != 0) {
          (*(void (**)(void))(*(void *)v115 + 40))();
        }
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v117, v46);
LABEL_80:
        ++v35;
        v34 -= 8;
        if (v34) {
          continue;
        }
        uint64_t v26 = v88;
        uint64_t v25 = v89;
        LODWORD(v32) = v84;
        char v47 = v87;
        if (v85) {
          goto LABEL_162;
        }
LABEL_91:
        unint64_t v50 = *(void *)&v90.var0;
        uint64_t v51 = *(void *)&v90.var0 >> 1;
        if (*(void *)&v90.var0 >> 1 > 0x30E420B6B6B86DA7uLL)
        {
          switch(v51)
          {
            case 0x30E420B6B6B86DA8:
              var1 = v90.var1;
              if (v90.var1 == "AnchorComponent") {
                goto LABEL_140;
              }
              long long v53 = "AnchorComponent";
              break;
            case 0x61364BE27E2A4A64:
              var1 = v90.var1;
              if (v90.var1 == "BodyTrackingComponent") {
                goto LABEL_140;
              }
              long long v53 = "BodyTrackingComponent";
              break;
            case 0x6AED206A3BA9D6E9:
              var1 = v90.var1;
              if (v90.var1 == "ClusterShadowMarkerComponent") {
                goto LABEL_140;
              }
              long long v53 = "ClusterShadowMarkerComponent";
              break;
            default:
              goto LABEL_133;
          }
LABEL_132:
          unint64_t TypeID = strcmp(var1, v53);
          if (!TypeID) {
            goto LABEL_140;
          }
LABEL_133:
          if (v47)
          {
            unint64_t TypeID = strlen(v90.var1);
            if (TypeID >= 0xF
              && *(void *)v90.var1 == 0x6F436D6F74737543
              && *(void *)(v90.var1 + 7) == 0x746E656E6F706D6FLL)
            {
              goto LABEL_140;
            }
          }
          goto LABEL_144;
        }
        if (v51 == 0x10DD8B3803C67A90)
        {
          var1 = v90.var1;
          if (v90.var1 == "AnchoringComponent") {
            goto LABEL_140;
          }
          long long v53 = "AnchoringComponent";
          goto LABEL_132;
        }
        if (v51 == 0x1F68485107138B4BLL)
        {
          var1 = v90.var1;
          if (v90.var1 == "SimpleComponent") {
            goto LABEL_140;
          }
          long long v53 = "SimpleComponent";
          goto LABEL_132;
        }
        if (v51 != 0x2E6717DB96117F50) {
          goto LABEL_133;
        }
        var1 = v90.var1;
        if (v90.var1 != "PhysicsOriginComponent")
        {
          long long v53 = "PhysicsOriginComponent";
          goto LABEL_132;
        }
LABEL_140:
        *(void *)&v117.var0 = 0x6DAE480279BALL;
        v117.var1 = "Component";
        uint64_t v69 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v21 + 200, &v117);
        if (v69)
        {
          uint64_t v104 = *v69;
          uint64_t v70 = v21;
        }
        else
        {
          uint64_t v70 = 0;
          uint64_t v104 = 0xFFFFFFFFLL;
        }
        long long v103 = v70;
        re::TypeBuilder::setObjectSuperClass((uint64_t)&buf, &v103);
        re::StringID::destroyString((re::StringID *)&v117);
        unint64_t v50 = *(void *)&v90.var0;
LABEL_144:
        if (v50 >> 1 == 0x29AC414532D4AF9DLL)
        {
          if (v90.var1 == "RenderGraphFillBufferNode"
            || (unint64_t TypeID = strcmp(v90.var1, "RenderGraphFillBufferNode"), !TypeID))
          {
            *(void *)&v117.var0 = 0xA3C1F00635C716B4;
            v117.var1 = "RenderGraphNode";
            uint64_t v71 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v21 + 200, &v117);
            if (v71)
            {
              uint64_t v102 = *v71;
              unint64_t v72 = v21;
            }
            else
            {
              unint64_t v72 = 0;
              uint64_t v102 = 0xFFFFFFFFLL;
            }
            unint64_t v101 = v72;
            re::TypeBuilder::setObjectSuperClass((uint64_t)&buf, &v101);
            re::StringID::destroyString((re::StringID *)&v117);
            unint64_t v50 = *(void *)&v90.var0;
          }
        }
        if (v50 >> 1 == 0x7FEDDCE41DFF568DLL)
        {
          int v73 = v90.var1;
          if (v90.var1 != "RenderGraphSpecifyTargetOperation")
          {
            long long v74 = "RenderGraphSpecifyTargetOperation";
            goto LABEL_157;
          }
        }
        else
        {
          if (v50 >> 1 != 0x775B4322064CEE52) {
            goto LABEL_162;
          }
          int v73 = v90.var1;
          if (v90.var1 != "RenderGraphSpecifyLaneOperation")
          {
            long long v74 = "RenderGraphSpecifyLaneOperation";
LABEL_157:
            unint64_t TypeID = strcmp(v73, v74);
            if (TypeID) {
              goto LABEL_162;
            }
          }
        }
        *(void *)&v117.var0 = 0x3AAEC69498BCCC9ELL;
        v117.var1 = "RenderGraphSpecifyOperationBase";
        unint64_t v75 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v21 + 200, &v117);
        if (v75)
        {
          uint64_t v100 = *v75;
        }
        else
        {
          uint64_t v21 = 0;
          uint64_t v100 = 0xFFFFFFFFLL;
        }
        unint64_t v99 = v21;
        re::TypeBuilder::setObjectSuperClass((uint64_t)&buf, &v99);
        re::StringID::destroyString((re::StringID *)&v117);
LABEL_162:
        if (v32)
        {
          do
          {
            int64x2_t v76 = (_DWORD *)*v31;
            if (*(_DWORD *)*v31 == 5)
            {
              int v77 = (const char *)*((void *)v76 + 2);
              *(void *)&v117.var0 = 0;
              v117.var1 = "";
              uint64_t v78 = (const char *)*((void *)v76 + 1);
              *(void *)&long long v118 = 0;
              *((void *)&v118 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = "";
              re::TypeBuilder::addObjectMemberRenaming((re::TypeBuilder *)&buf, (const re::StringID *)&v117, (const re::StringID *)&v118);
              re::StringID::destroyString((re::StringID *)&v118);
              re::StringID::destroyString((re::StringID *)&v117);
            }
            ++v31;
            v33 -= 8;
          }
          while (v33);
        }
        re::TypeBuilder::setIsIncomplete((uint64_t)&buf, 1);
        uint64_t v98 = v25;
        uint64_t v27 = &v98;
LABEL_167:
        v27[1] = v26;
LABEL_168:
        re::TypeBuilder::commitTo((unsigned __int8 *)&buf, v27);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&buf, v80);
        *a1 = v25;
        a1[1] = v26;
LABEL_175:
        re::StringID::destroyString((re::StringID *)&v90);
        return;
      case 3:
        long long v121 = v122;
        unint64_t TypeID = re::TypeBuilder::setObjectSuperClass((uint64_t)&buf, &v121);
        char v85 = 1;
        goto LABEL_80;
      default:
        goto LABEL_80;
    }
  }
}

BOOL anonymous namespace'::checkPointer(uint64_t a1)
{
  if (!a1)
  {
    uint64_t v2 = *re::foundationSerializationLogObjects(0);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long v4 = 0;
      _os_log_error_impl(&dword_233120000, v2, OS_LOG_TYPE_ERROR, "Error converting PersistedSchema to TypeRegistry. Pointers are already hooked up.", v4, 2u);
    }
  }
  return a1 != 0;
}

uint64_t re::PersistedSchema::addIntrospectionGraph(re::PersistedSchema *this, const re::IntrospectionBase *a2)
{
  v15[4] = *MEMORY[0x263EF8340];
  int v14 = a2;
  re::getPrettyTypeName(a2, (const re::IntrospectionBase *)&v12);
  re::HashTable<re::DynamicString,re::IntrospectionBase const*,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addNew((uint64_t)this, (re::DynamicString *)&v12, &v14);
  uint64_t v11 = 0;
  v8[1] = 0;
  uint64_t v9 = 0;
  v8[0] = 0;
  int v10 = 0;
  re::DynamicArray<re::TransitionCondition *>::add(v8, &v14);
  v15[0] = &unk_26E720250;
  v15[1] = this;
  uint64_t v15[2] = v8;
  void v15[3] = v15;
  {
    re::introspect<re::IntrospectionBase const*>(void)::info = (uint64_t)re::IntrospectionInfo<re::IntrospectionBase const*>::get(0);
  }
  uint64_t v3 = v9;
  if (v9)
  {
    uint64_t v4 = re::introspect<re::IntrospectionBase const*>(void)::info;
    do
    {
      uint64_t v7 = 0;
      uint64_t v5 = v3 - 1;
      uint64_t v7 = *(const re::IntrospectionBase **)(v11 + 8 * v5);
      uint64_t v9 = v5;
      ++v10;
      re::IntrospectionWalker::walk(v4, &v7, (uint64_t)v15);
      uint64_t v3 = v9;
    }
    while (v9);
  }
  std::__function::__value_func<void ()(re::IntrospectionBase const&,void const*)>::~__value_func[abi:nn180100](v15);
  if (v8[0] && v11) {
    (*(void (**)(void))(*(void *)v8[0] + 40))();
  }
  uint64_t result = v12;
  if (v12)
  {
    if (v13) {
      return (*(uint64_t (**)(void))(*(void *)v12 + 40))();
    }
  }
  return result;
}

uint64_t re::PersistedSchema::introspectionInfo(re::PersistedSchema *this, const char *a2)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  uint64_t v4 = re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet((uint64_t)this, (uint64_t)&v27);
  if (void)v27 && (BYTE8(v27)) {
    (*(void (**)(void))(*(void *)v27 + 40))();
  }
  if (v4) {
    return *(void *)v4;
  }
  uint64_t v33 = 0;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  {
    re::introspect<BOOL>(void)::info = re::introspect_BOOL(0, v10);
  }
  *(void *)&long long v27 = re::introspect<BOOL>(void)::info;
  {
    re::introspect<char>(void)::info = (uint64_t)re::introspect_char(0, v11);
  }
  *((void *)&v27 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = re::introspect<char>(void)::info;
  {
    re::introspect<double>(void)::info = (uint64_t)re::introspect_double(0, v12);
  }
  *(void *)&long long v28 = re::introspect<double>(void)::info;
  {
    re::introspect<float>(void)::info = re::introspect_float(0, v13);
  }
  *((void *)&v28 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = re::introspect<float>(void)::info;
  {
    re::introspect<short>(void)::info = (uint64_t)re::introspect_short(0, v14);
  }
  *(void *)&long long v29 = re::introspect<short>(void)::info;
  {
    re::introspect<int>(void)::info = re::introspect_int(0, v15);
  }
  *((void *)&v29 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = re::introspect<int>(void)::info;
  {
    re::introspect<long>(void)::info = (uint64_t)re::introspect_long(0, v16);
  }
  *(void *)&long long v30 = re::introspect<long>(void)::info;
  {
    re::introspect<unsigned long>(void)::info = (uint64_t)re::introspect_size_t(0, v17);
  }
  *((void *)&v30 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = re::introspect<unsigned long>(void)::info;
  {
    re::introspect<long long>(void)::info = (uint64_t)re::introspect_int64_t(0, v18);
  }
  *(void *)&long long v31 = re::introspect<long long>(void)::info;
  {
    re::introspect<unsigned char>(void)::info = re::introspect_uint8_t(0, v19);
  }
  *((void *)&v31 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = re::introspect<unsigned char>(void)::info;
  {
    re::introspect<unsigned short>(void)::info = (uint64_t)re::introspect_uint16_t(0, v20);
  }
  *(void *)&long long v32 = re::introspect<unsigned short>(void)::info;
  {
    re::introspect<unsigned int>(void)::info = re::introspect_uint32_t(0, v21);
  }
  *((void *)&v32 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = re::introspect<unsigned int>(void)::info;
  {
    re::introspect<unsigned long long>(void)::info = (uint64_t)re::introspect_uint64_t(0, v22);
  }
  uint64_t v7 = 0;
  uint64_t v33 = re::introspect<unsigned long long>(void)::info;
  while (1)
  {
    uint64_t v5 = *(void *)((char *)&v27 + v7);
    if (!strcmp(a2, *(const char **)(v5 + 48))) {
      break;
    }
    v7 += 8;
    if (v7 == 104)
    {
      if (!strcmp(a2, "DynamicString"))
      {
        {
          re::introspect<re::DynamicString>(void)::info = (uint64_t)re::IntrospectionInfo<re::DynamicString>::get(0, v23);
        }
        return re::introspect<re::DynamicString>(void)::info;
      }
      else
      {
        uint64_t v8 = (re *)strcmp(a2, "StringID");
        if (v8)
        {
          uint64_t v9 = *re::foundationSerializationLogObjects(v8);
          if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
          {
            int v25 = 136315138;
            uint64_t v26 = a2;
            _os_log_impl(&dword_233120000, v9, OS_LOG_TYPE_DEFAULT, "Unknown type name in PersistedSchema '%s'", (uint8_t *)&v25, 0xCu);
          }
          return 0;
        }
        else
        {
          {
            re::introspect<re::StringID>(void)::info = (uint64_t)re::IntrospectionInfo<re::StringID>::get(0, v24);
          }
          return re::introspect<re::StringID>(void)::info;
        }
      }
    }
  }
  return v5;
}

__n128 anonymous namespace'::serializePersistedSchemaInternal@<Q0>(_anonymous_namespace_ *a1@<X0>, int a2@<W1>, _anonymous_namespace_ *a3@<X2>, uint64_t a4@<X8>)
{
  if (!a2)
  {
    {
      re::introspect<re::PersistedSchema>(void)::info = re::internal::getOrCreateInfo((re::internal *)"PersistedSchema", (uint64_t (*)(re::internal *))re::allocInfo_PersistedSchema, (re::IntrospectionBase *(*)(void))re::initInfo_PersistedSchema, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::PersistedSchema>, 0);
    }
    if ((v12 & 1) == 0)
    {
      uint64_t v11 = "Failed to serialized schema in binary format.";
      goto LABEL_11;
    }
    goto LABEL_8;
  }
  if (a2 != 1)
  {
    uint64_t v11 = "Invalid format argument.";
    goto LABEL_11;
  }
  {
    {
      re::introspect<re::PersistedSchema>(void)::info = re::internal::getOrCreateInfo((re::internal *)"PersistedSchema", (uint64_t (*)(re::internal *))re::allocInfo_PersistedSchema, (re::IntrospectionBase *(*)(void))re::initInfo_PersistedSchema, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::PersistedSchema>, 0);
    }
  }
  if (v9)
  {
LABEL_8:
    *(unsigned char *)a4 = 1;
    return result;
  }
  uint64_t v11 = "Failed to serialized schema as JSON.";
LABEL_11:
  __n128 result = v15;
  uint64_t v13 = v16;
  uint64_t v14 = v17;
  *(unsigned char *)a4 = 0;
  *(__n128 *)(a4 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = result;
  *(void *)(a4 + 24) = v13;
  *(void *)(a4 + 32) = v14;
  return result;
}

__n128 anonymous namespace'::deserializePersistedSchemaInternal@<Q0>(_anonymous_namespace_ *a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  uint64_t v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*a4 + 32))(a4, 48, 8);
  *(_OWORD *)(v10 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0u;
  *(_OWORD *)(v10 + 32) = 0u;
  *(_OWORD *)uint64_t v10 = 0u;
  *(_DWORD *)(v10 + 3re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0x7FFFFFFF;
  re::HashTable<re::Pair<re::StringSlice,re::StringSlice,true>,unsigned long,re::Hash<re::Pair<re::StringSlice,re::StringSlice,true>>,re::EqualTo<re::Pair<re::StringSlice,re::StringSlice,true>>,true,false>::init(v10, (uint64_t)a4, 3);
  if (!a2)
  {
    {
      re::introspect<re::PersistedSchema>(void)::info = re::internal::getOrCreateInfo((re::internal *)"PersistedSchema", (uint64_t (*)(re::internal *))re::allocInfo_PersistedSchema, (re::IntrospectionBase *(*)(void))re::initInfo_PersistedSchema, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::PersistedSchema>, 0);
    }
    if (v16) {
      goto LABEL_14;
    }
    uint64_t v19 = "Failed to deserialize schema from binary format.";
LABEL_21:
    __n128 result = v25;
    unsigned int v20 = v26;
    uint64_t v21 = v27;
    *(unsigned char *)a5 = 0;
    *(__n128 *)(a5 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = result;
    *(void *)(a5 + 24) = v20;
    *(void *)(a5 + 32) = v21;
    return result;
  }
  if (a2 != 1)
  {
    uint64_t v19 = "Invalid format argument.";
    goto LABEL_21;
  }
  {
    re::introspect<re::PersistedSchema>(void)::info = re::internal::getOrCreateInfo((re::internal *)"PersistedSchema", (uint64_t (*)(re::internal *))re::allocInfo_PersistedSchema, (re::IntrospectionBase *(*)(void))re::initInfo_PersistedSchema, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::PersistedSchema>, 0);
  }
  if (v25.n128_u8[0])
  {
LABEL_14:
    if (!a3) {
      goto LABEL_17;
    }
    {
      re::introspect<re::PersistedSchema>(void)::info = re::internal::getOrCreateInfo((re::internal *)"PersistedSchema", (uint64_t (*)(re::internal *))re::allocInfo_PersistedSchema, (re::IntrospectionBase *(*)(void))re::initInfo_PersistedSchema, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::PersistedSchema>, 0);
    }
    v22.n128_u8[0] = 1;
    v25.n128_u64[0] = (unint64_t)&unk_26E720298;
    v25.n128_u64[1] = v10;
    uint64_t v26 = &v22;
    long long v27 = &v25;
    re::IntrospectionWalker::walk(re::introspect<re::PersistedSchema>(void)::info, (const re::IntrospectionBase **)v10, (uint64_t)&v25);
    int v17 = v22.n128_u8[0];
    int v18 = (_anonymous_namespace_ *)std::__function::__value_func<void ()(re::IntrospectionBase const&,void const*)>::~__value_func[abi:nn180100](&v25);
    if (v17)
    {
LABEL_17:
      *(unsigned char *)a5 = 1;
      *(void *)(a5 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v10;
      return result;
    }
    uint64_t v19 = "Failed to hook up schema.";
    goto LABEL_21;
  }
  if (v28) {
    uint64_t v13 = *(unsigned char **)&v29[7];
  }
  else {
    uint64_t v13 = v29;
  }
  re::DynamicString::format((re::DynamicString *)"Failed to deserialize schema from JSON. Details: %s", (re::DynamicString *)&v22, v13);
  __n128 result = v22;
  uint64_t v14 = v23;
  uint64_t v15 = v24;
  *(unsigned char *)a5 = 0;
  *(__n128 *)(a5 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = result;
  *(void *)(a5 + 24) = v14;
  *(void *)(a5 + 32) = v15;
  if (!v25.n128_u8[0] && v27 && (v28 & 1) != 0) {
    (*(void (**)(void))(v27->n128_u64[0] + 40))();
  }
  return result;
}

void re::introspect_IntrospectionBasePointer(re *this, const re::IntrospectionBase *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9E0A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9E0A8))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_26AF9EA48, "IntrospectionBasePointer", 16, 8, 0, 0);
    qword_26AF9EA48 = (uint64_t)&unk_26E715E40;
    qword_26AF9EA88 = (uint64_t)re::internal::defaultConstruct<re::SerializedReference<re::IntrospectionBase const*>>;
    qword_26AF9EAB0 = 0;
    qword_26AF9EAA8 = 0;
    dword_26AF9EA58 = 11;
    __cxa_guard_release(&qword_26AF9E0A8);
  }
  if ((_MergedGlobals_486 & 1) == 0)
  {
    _MergedGlobals_486 = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_26AF9EA48, a2);
    v2[0] = 0x2DF81B3A31597722;
    v2[1] = "IntrospectionBasePointer";
    xmmword_26AF9EA68 = v3;
    re::StringID::destroyString((re::StringID *)v2);
  }
}

uint64_t re::internal::defaultConstruct<re::SerializedReference<re::IntrospectionBase const*>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a3 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  return re::SerializedReference<re::IntrospectionBase const*>::reset(a3);
}

uint64_t anonymous namespace'::introspectionBaseSerialize(int a1, int a2, re **a3, re::DynamicString *this)
{
  if (*a3)
  {
    re::getPrettyTypeName(*a3, (const re::IntrospectionBase *)&v6);
    re::DynamicString::operator=(this, (re::DynamicString *)&v6);
    if (v6 && (v7 & 1) != 0) {
      (*(void (**)(void))(*(void *)v6 + 40))();
    }
  }
  else
  {
    long long v6 = "";
    uint64_t v7 = 0;
    re::DynamicString::operator=(this, (uint64_t)&v6);
  }
  return 1;
}

uint64_t anonymous namespace'::introspectionBaseDeserialize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  return 1;
}

uint64_t anonymous namespace'::introspectionBaseDeepCopy(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  re::SerializedReference<re::IntrospectionBase const*>::operator=(a5, a4);
  return 1;
}

uint64_t re::internal::defaultConstructV2<re::SerializedReference<re::IntrospectionBase const*>>(uint64_t result)
{
  *(void *)(result + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  return re::SerializedReference<re::IntrospectionBase const*>::reset(result);
}

void re::introspectionTable_IntrospectionBase(re *this)
{
  if ((byte_26AF9E099 & 1) == 0)
  {
    byte_26AF9E099 = 1;
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9E0B0, memory_order_acquire) & 1) == 0)
    {
      int v1 = (re *)__cxa_guard_acquire(&qword_26AF9E0B0);
      if (v1)
      {
        qword_26879C3F8 = (uint64_t)"IntrospectionBasic";
        uint64_t v2 = (re *)qword_26AF9E0E0;
        if (!qword_26AF9E0E0)
        {
          uint64_t v2 = (re *)re::allocInfo_IntrospectionBasic(v1);
          qword_26AF9E0E0 = (uint64_t)v2;
          re::initInfo_IntrospectionBasic(v2, v3);
        }
        qword_26879C408 = 0;
        unk_26879C410 = 0;
        qword_26879C400 = (uint64_t)v2;
        dword_26879C418 = 0;
        qword_26879C420 = (uint64_t)"IntrospectionPointer";
        uint64_t v4 = (re *)qword_26AF9E0F8;
        if (!qword_26AF9E0F8)
        {
          uint64_t v4 = (re *)re::allocInfo_IntrospectionPointer(v1);
          qword_26AF9E0F8 = (uint64_t)v4;
          re::initInfo_IntrospectionPointer(v4, v5);
        }
        qword_26879C428 = (uint64_t)v4;
        unk_26879C430 = 0;
        qword_26879C438 = 1;
        dword_26879C440 = 0;
        qword_26879C448 = (uint64_t)"IntrospectionCStyleArray";
        long long v6 = (re *)qword_26AF9E110;
        if (!qword_26AF9E110)
        {
          long long v6 = (re *)re::allocInfo_IntrospectionCStyleArray(v1);
          qword_26AF9E110 = (uint64_t)v6;
          re::initInfo_IntrospectionCStyleArray(v6, v7);
        }
        qword_26879C450 = (uint64_t)v6;
        *(void *)algn_26879C458 = 0;
        qword_26879C460 = 2;
        dword_26879C468 = 0;
        qword_26879C470 = (uint64_t)"IntrospectionDynamicArrayBase";
        uint64_t v8 = (re *)qword_26AF9E128;
        if (!qword_26AF9E128)
        {
          uint64_t v8 = (re *)re::allocInfo_IntrospectionDynamicArrayBase(v1);
          qword_26AF9E128 = (uint64_t)v8;
          re::initInfo_IntrospectionDynamicArrayBase(v8, v9);
        }
        qword_26879C478 = (uint64_t)v8;
        unk_26879C480 = 0;
        qword_26879C488 = 3;
        dword_26879C490 = 0;
        qword_26879C498 = (uint64_t)"IntrospectionFixedArrayBase";
        uint64_t v10 = (re *)qword_26AF9E140;
        if (!qword_26AF9E140)
        {
          uint64_t v10 = (re *)re::allocInfo_IntrospectionFixedArrayBase(v1);
          qword_26AF9E140 = (uint64_t)v10;
          re::initInfo_IntrospectionFixedArrayBase(v10, v11);
        }
        qword_26879C4A0 = (uint64_t)v10;
        *(void *)algn_26879C4A8 = 0;
        qword_26879C4B0 = 4;
        dword_26879C4B8 = 0;
        qword_26879C4C0 = (uint64_t)"IntrospectionDataArrayBase";
        uint64_t v12 = (re *)qword_26AF9E158;
        if (!qword_26AF9E158)
        {
          uint64_t v12 = (re *)re::allocInfo_IntrospectionDataArrayBase(v1);
          qword_26AF9E158 = (uint64_t)v12;
          re::initInfo_IntrospectionDataArrayBase(v12, v13);
        }
        qword_26879C4C8 = (uint64_t)v12;
        unk_26879C4D0 = 0;
        qword_26879C4D8 = 5;
        dword_26879C4E0 = 0;
        qword_26879C4E8 = (uint64_t)"IntrospectionDynamicString";
        uint64_t v14 = (re *)qword_26AF9E178;
        if (!qword_26AF9E178)
        {
          uint64_t v14 = (re *)re::allocInfo_IntrospectionDynamicString(v1);
          qword_26AF9E178 = (uint64_t)v14;
          re::initInfo_IntrospectionDynamicString(v14, v15);
        }
        qword_26879C4F0 = (uint64_t)v14;
        *(void *)algn_26879C4F8 = 0;
        qword_26879C500 = 6;
        dword_26879C508 = 0;
        qword_26879C510 = (uint64_t)"IntrospectionHashTableBase";
        uint64_t v16 = (re *)qword_26AF9E190;
        if (!qword_26AF9E190)
        {
          uint64_t v16 = (re *)re::allocInfo_IntrospectionHashTableBase(v1);
          qword_26AF9E190 = (uint64_t)v16;
          re::initInfo_IntrospectionHashTableBase(v16, v17);
        }
        qword_26879C518 = (uint64_t)v16;
        unk_26879C520 = 0;
        qword_26879C528 = 7;
        dword_26879C530 = 0;
        qword_26879C538 = (uint64_t)"IntrospectionStructure";
        int v18 = (re *)qword_26AF9E2D0;
        if (!qword_26AF9E2D0)
        {
          int v18 = (re *)re::allocInfo_IntrospectionStructure(v1);
          qword_26AF9E2D0 = (uint64_t)v18;
          re::initInfo_IntrospectionStructure(v18, v19);
        }
        qword_26879C540 = (uint64_t)v18;
        *(void *)algn_26879C548 = 0;
        qword_26879C550 = 8;
        dword_26879C558 = 0;
        qword_26879C560 = (uint64_t)"IntrospectionEnum";
        unsigned int v20 = (re *)qword_26AF9E368;
        if (!qword_26AF9E368)
        {
          unsigned int v20 = (re *)re::allocInfo_IntrospectionEnum(v1);
          qword_26AF9E368 = (uint64_t)v20;
          re::initInfo_IntrospectionEnum(v20, v21);
        }
        qword_26879C568 = (uint64_t)v20;
        unk_26879C570 = 0;
        qword_26879C578 = 9;
        dword_26879C580 = 0;
        qword_26879C588 = (uint64_t)"IntrospectionStringID";
        __n128 v22 = (re *)qword_26AF9E388;
        if (!qword_26AF9E388)
        {
          __n128 v22 = (re *)re::allocInfo_IntrospectionStringID(v1);
          qword_26AF9E388 = (uint64_t)v22;
          re::initInfo_IntrospectionStringID(v22, v23);
        }
        qword_26879C590 = (uint64_t)v22;
        *(void *)algn_26879C598 = 0;
        qword_26879C5A0 = 10;
        dword_26879C5A8 = 0;
        qword_26879C5B0 = (uint64_t)"IntrospectionCallbackSerializer";
        uint64_t v24 = (re *)qword_26AF9E3A8;
        if (!qword_26AF9E3A8)
        {
          uint64_t v24 = (re *)re::allocInfo_IntrospectionCallbackSerializer(v1);
          qword_26AF9E3A8 = (uint64_t)v24;
          re::initInfo_IntrospectionCallbackSerializer(v24, v25);
        }
        qword_26879C5B8 = (uint64_t)v24;
        unk_26879C5C0 = 0;
        qword_26879C5C8 = 11;
        dword_26879C5D0 = 0;
        qword_26879C5D8 = (uint64_t)"IntrospectionOptionalBase";
        uint64_t v26 = (re *)qword_26AF9E3C0;
        if (!qword_26AF9E3C0)
        {
          uint64_t v26 = (re *)re::allocInfo_IntrospectionOptionalBase(v1);
          qword_26AF9E3C0 = (uint64_t)v26;
          re::initInfo_IntrospectionOptionalBase(v26, v27);
        }
        qword_26879C5E0 = (uint64_t)v26;
        *(void *)algn_26879C5E8 = 0;
        qword_26879C5F0 = 13;
        dword_26879C5F8 = 0;
        __cxa_guard_release(&qword_26AF9E0B0);
      }
    }
    dword_26AF9E430 = 13;
    qword_26AF9E438 = (uint64_t)&qword_26879C3F8;
  }
}

void *re::allocInfo_IntrospectionBase(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9E0B8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9E0B8))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF9EAB8, "IntrospectionBase");
    __cxa_guard_release(&qword_26AF9E0B8);
  }
  return &unk_26AF9EAB8;
}

void re::initInfo_IntrospectionBase(re *this, re::IntrospectionBase *a2)
{
  v15[0] = 0xAF6C477EF8EF2A18;
  v15[1] = "IntrospectionBase";
  re::StringID::destroyString((re::StringID *)v15);
  *((_OWORD *)this + 2) = v16;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9E0C0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF9E0C0);
    if (v4)
    {
      uint64_t v5 = (re *)re::introspectionAllocator(v4);
      re::introspect_IntrospectionType(v5, v6);
      uint64_t v7 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 32, 8);
      *(_DWORD *)uint64_t v7 = 3;
      *(void *)(v7 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = &qword_26AF9E958;
      *(void *)(v7 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v7 + 24) = 16;
      qword_26AF9E520 = v7;
      uint64_t v8 = (re *)re::introspectionAllocator((re *)v7);
      re::introspectionTable_IntrospectionBase(v8);
      BOOL v9 = (re *)(*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 16, 8);
      *(_DWORD *)BOOL v9 = 2;
      *((void *)v9 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = &dword_26AF9E430;
      qword_26AF9E528 = (uint64_t)v9;
      uint64_t v10 = re::introspectionAllocator(v9);
      uint64_t v12 = re::introspect_int((re *)1, v11);
      uint64_t v13 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v10 + 32))(v10, 72, 8);
      *(_DWORD *)uint64_t v13 = 1;
      *(void *)(v13 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "size";
      *(void *)(v13 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v12;
      *(void *)(v13 + 24) = 0;
      *(void *)(v13 + 32) = 0x1400000001;
      *(_DWORD *)(v13 + 40) = 0;
      *(void *)(v13 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v13 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_26AF9E530 = v13;
      __cxa_guard_release(&qword_26AF9E0C0);
    }
  }
  *((void *)this + 2) = 0x3000000008;
  *((_DWORD *)this + re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((void *)this + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = &qword_26AF9E520;
  *((void *)this + 9) = re::internal::defaultConstruct<re::IntrospectionBase>;
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::IntrospectionBase>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::IntrospectionBase>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::IntrospectionBase>;
  re::IntrospectionRegistry::add(this, v3);
  long long v14 = v16;
}

double re::internal::defaultConstruct<re::IntrospectionBase>(int a1, int a2, ArcSharedObject *this)
{
  *((_OWORD *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  void *v3 = &unk_26E6BEA60;
  v3[2] = 0;
  *(void *)((char *)v3 + 22) = 0;
  v3[4] = 0;
  *(void *)&double result = 0xFFFFFFFFLL;
  v3[5] = 0xFFFFFFFFLL;
  return result;
}

uint64_t re::internal::defaultDestruct<re::IntrospectionBase>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

double re::internal::defaultConstructV2<re::IntrospectionBase>(ArcSharedObject *a1)
{
  *((_OWORD *)a1 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *(_OWORD *)a1 = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  void *v1 = &unk_26E6BEA60;
  v1[2] = 0;
  *(void *)((char *)v1 + 22) = 0;
  v1[4] = 0;
  *(void *)&double result = 0xFFFFFFFFLL;
  v1[5] = 0xFFFFFFFFLL;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::IntrospectionBase>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

void *re::allocInfo_IntrospectionBasic(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9E0D0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9E0D0))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF9EB30, "IntrospectionBasic");
    __cxa_guard_release(&qword_26AF9E0D0);
  }
  return &unk_26AF9EB30;
}

void re::initInfo_IntrospectionBasic(re *this, re::IntrospectionBase *a2)
{
  v14[0] = 0x3E1CA86024F61AA6;
  v14[1] = "IntrospectionBasic";
  re::StringID::destroyString((re::StringID *)v14);
  *((_OWORD *)this + 2) = v15;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9E0D8, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF9E0D8);
    if (v4)
    {
      uint64_t v5 = (re *)re::introspectionAllocator(v4);
      long long v6 = v5;
      uint64_t v7 = (re *)qword_26AF9E0C8;
      if (!qword_26AF9E0C8)
      {
        uint64_t v7 = (re *)re::allocInfo_IntrospectionBase(v5);
        qword_26AF9E0C8 = (uint64_t)v7;
        re::initInfo_IntrospectionBase(v7, v8);
      }
      uint64_t v9 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v6 + 32))(v6, 72, 8);
      *(_DWORD *)uint64_t v9 = 1;
      *(void *)(v9 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "IntrospectionBase";
      *(void *)(v9 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v7;
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 32) = 0;
      *(_DWORD *)(v9 + 40) = 3;
      *(void *)(v9 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v9 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_26AF9E440 = v9;
      uint64_t v10 = re::introspectionAllocator((re *)v9);
      re::IntrospectionInfo<char const*>::get((uint64_t)v10, v11);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v10 + 32))(v10, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "name";
      *(void *)(v12 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = &qword_26AF9E680;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 32) = 0x3000000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v12 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF9E448 = v12;
      __cxa_guard_release(&qword_26AF9E0D8);
    }
  }
  *((void *)this + 2) = 0x4000000008;
  *((_DWORD *)this + re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((void *)this + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = &qword_26AF9E440;
  *((void *)this + 9) = re::internal::defaultConstruct<re::IntrospectionBasic>;
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::IntrospectionBasic>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::IntrospectionBasic>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::IntrospectionBasic>;
  re::IntrospectionRegistry::add(this, v3);
  long long v13 = v15;
}

void re::IntrospectionInfo<char const*>::get(uint64_t a1, const re::IntrospectionBase *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9E3F0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9E3F0))
  {
    re::IntrospectionPointer::IntrospectionPointer((re::IntrospectionPointer *)&qword_26AF9E680);
    __cxa_guard_release(&qword_26AF9E3F0);
  }
  if ((byte_26AF9E0A0 & 1) == 0)
  {
    byte_26AF9E0A0 = 1;
    uint64_t v2 = re::introspect_char((re *)1, a2);
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF9E680, 0);
    qword_26AF9E690 = 0x800000001;
    dword_26AF9E698 = 8;
    word_26AF9E69C = 0;
    *(void *)&xmmword_26AF9E6A0 = 0;
    *((void *)&xmmword_26AF9E6A0 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0xFFFFFFFFLL;
    qword_26AF9E680 = (uint64_t)&unk_26E6CDA08;
    qword_26AF9E6B0 = (uint64_t)v2;
    qword_26AF9E6B8 = 0;
    re::IntrospectionRegistry::add(v3, v4);
    re::getPrettyTypeName((re *)&qword_26AF9E680, (const re::IntrospectionBase *)&v8);
    if (BYTE8(v8)) {
      uint64_t v5 = v9;
    }
    else {
      uint64_t v5 = (char *)&v8 + 9;
    }
    if (void)v8 && (BYTE8(v8)) {
      (*(void (**)(void))(*(void *)v8 + 40))();
    }
    if (v10 >> 1 == 94623636 && (__s1 == "char*" || !strcmp(__s1, "char*")))
    {
      long long v6 = v8;
    }
    else
    {
      long long v8 = v2[2];
      long long v6 = v7;
    }
    xmmword_26AF9E6A0 = v6;
    re::StringID::destroyString((re::StringID *)&v10);
  }
}

double re::internal::defaultConstruct<re::IntrospectionBasic>(int a1, int a2, ArcSharedObject *this)
{
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)(v3 + 22) = 0;
  *(void *)(v3 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  *(void *)(v3 + 32) = 0;
  *(void *)&double result = 0xFFFFFFFFLL;
  *(void *)(v3 + 40) = 0xFFFFFFFFLL;
  *(void *)uint64_t v3 = &unk_26E715D00;
  *(void *)(v3 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  *(_DWORD *)(v3 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  return result;
}

uint64_t re::internal::defaultDestruct<re::IntrospectionBasic>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

double re::internal::defaultConstructV2<re::IntrospectionBasic>(ArcSharedObject *a1)
{
  *((_OWORD *)a1 + 2) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(void *)(v1 + 22) = 0;
  *(void *)(v1 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  *(void *)(v1 + 32) = 0;
  *(void *)&double result = 0xFFFFFFFFLL;
  *(void *)(v1 + 40) = 0xFFFFFFFFLL;
  *(void *)uint64_t v1 = &unk_26E715D00;
  *(void *)(v1 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  *(_DWORD *)(v1 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::IntrospectionBasic>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

void *re::allocInfo_IntrospectionPointer(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9E0E8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9E0E8))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF9EBA8, "IntrospectionPointer");
    __cxa_guard_release(&qword_26AF9E0E8);
  }
  return &unk_26AF9EBA8;
}

void re::initInfo_IntrospectionPointer(re *this, re::IntrospectionBase *a2)
{
  v14[0] = 0x299410F0B7BB8444;
  v14[1] = "IntrospectionPointer";
  re::StringID::destroyString((re::StringID *)v14);
  *((_OWORD *)this + 2) = v15;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9E0F0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF9E0F0);
    if (v4)
    {
      uint64_t v5 = (re *)re::introspectionAllocator(v4);
      long long v6 = v5;
      long long v7 = (re *)qword_26AF9E0C8;
      if (!qword_26AF9E0C8)
      {
        long long v7 = (re *)re::allocInfo_IntrospectionBase(v5);
        qword_26AF9E0C8 = (uint64_t)v7;
        re::initInfo_IntrospectionBase(v7, v8);
      }
      uint64_t v9 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v6 + 32))(v6, 72, 8);
      *(_DWORD *)uint64_t v9 = 1;
      *(void *)(v9 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "IntrospectionBase";
      *(void *)(v9 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v7;
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 32) = 0;
      *(_DWORD *)(v9 + 40) = 3;
      *(void *)(v9 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v9 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_26AF9E450 = v9;
      unint64_t v10 = (re *)re::introspectionAllocator((re *)v9);
      re::introspect_IntrospectionBasePointer(v10, v11);
      uint64_t v12 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v10 + 32))(v10, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "pointeeInfo";
      *(void *)(v12 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = &qword_26AF9EA48;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 32) = 0x3000000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v12 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF9E458 = v12;
      __cxa_guard_release(&qword_26AF9E0F0);
    }
  }
  *((void *)this + 2) = 0x4000000008;
  *((_DWORD *)this + re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((void *)this + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = &qword_26AF9E450;
  *((void *)this + 9) = re::internal::defaultConstruct<re::IntrospectionPointer>;
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::IntrospectionPointer>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::IntrospectionPointer>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::IntrospectionPointer>;
  re::IntrospectionRegistry::add(this, v3);
  long long v13 = v15;
}

re::IntrospectionPointer *re::internal::defaultConstruct<re::IntrospectionPointer>(int a1, int a2, re::IntrospectionPointer *this)
{
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0u;
  return re::IntrospectionPointer::IntrospectionPointer(this);
}

uint64_t re::internal::defaultDestruct<re::IntrospectionPointer>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

re::IntrospectionPointer *re::internal::defaultConstructV2<re::IntrospectionPointer>(re::IntrospectionPointer *this)
{
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0u;
  return re::IntrospectionPointer::IntrospectionPointer(this);
}

uint64_t re::internal::defaultDestructV2<re::IntrospectionPointer>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

void *re::allocInfo_IntrospectionCStyleArray(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9E100, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9E100))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF9EC20, "IntrospectionCStyleArray");
    __cxa_guard_release(&qword_26AF9E100);
  }
  return &unk_26AF9EC20;
}

void re::initInfo_IntrospectionCStyleArray(re *this, re::IntrospectionBase *a2)
{
  v18[0] = 0x2DFB4F6972AAA2A0;
  v18[1] = "IntrospectionCStyleArray";
  re::StringID::destroyString((re::StringID *)v18);
  *((_OWORD *)this + 2) = v19;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9E108, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF9E108);
    if (v4)
    {
      uint64_t v5 = (re *)re::introspectionAllocator(v4);
      long long v6 = v5;
      long long v7 = (re *)qword_26AF9E0C8;
      if (!qword_26AF9E0C8)
      {
        long long v7 = (re *)re::allocInfo_IntrospectionBase(v5);
        qword_26AF9E0C8 = (uint64_t)v7;
        re::initInfo_IntrospectionBase(v7, v8);
      }
      uint64_t v9 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v6 + 32))(v6, 72, 8);
      *(_DWORD *)uint64_t v9 = 1;
      *(void *)(v9 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "IntrospectionBase";
      *(void *)(v9 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v7;
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 32) = 0;
      *(_DWORD *)(v9 + 40) = 3;
      *(void *)(v9 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v9 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_26AF9E538 = v9;
      unint64_t v10 = (re *)re::introspectionAllocator((re *)v9);
      re::introspect_IntrospectionBasePointer(v10, v11);
      uint64_t v12 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v10 + 32))(v10, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "elementInfo";
      *(void *)(v12 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = &qword_26AF9EA48;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 32) = 0x3000000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v12 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF9E540 = v12;
      long long v13 = re::introspectionAllocator((re *)v12);
      long long v15 = re::introspect_int((re *)1, v14);
      uint64_t v16 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v13 + 32))(v13, 72, 8);
      *(_DWORD *)uint64_t v16 = 1;
      *(void *)(v16 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "length";
      *(void *)(v16 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v15;
      *(void *)(v16 + 24) = 0;
      *(void *)(v16 + 32) = 0x4000000002;
      *(_DWORD *)(v16 + 40) = 0;
      *(void *)(v16 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v16 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_26AF9E548 = v16;
      __cxa_guard_release(&qword_26AF9E108);
    }
  }
  *((void *)this + 2) = 0x4800000008;
  *((_DWORD *)this + re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((void *)this + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = &qword_26AF9E538;
  *((void *)this + 9) = re::internal::defaultConstruct<re::IntrospectionCStyleArray>;
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::IntrospectionCStyleArray>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::IntrospectionCStyleArray>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::IntrospectionCStyleArray>;
  re::IntrospectionRegistry::add(this, v3);
  long long v17 = v19;
}

re::IntrospectionCStyleArray *re::internal::defaultConstruct<re::IntrospectionCStyleArray>(int a1, int a2, re::IntrospectionCStyleArray *this)
{
  *((void *)this + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0u;
  return re::IntrospectionCStyleArray::IntrospectionCStyleArray(this);
}

uint64_t re::internal::defaultDestruct<re::IntrospectionCStyleArray>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

re::IntrospectionCStyleArray *re::internal::defaultConstructV2<re::IntrospectionCStyleArray>(re::IntrospectionCStyleArray *this)
{
  *((void *)this + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0u;
  return re::IntrospectionCStyleArray::IntrospectionCStyleArray(this);
}

uint64_t re::internal::defaultDestructV2<re::IntrospectionCStyleArray>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

void *re::allocInfo_IntrospectionDynamicArrayBase(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9E118, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9E118))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF9EC98, "IntrospectionDynamicArrayBase");
    __cxa_guard_release(&qword_26AF9E118);
  }
  return &unk_26AF9EC98;
}

void re::initInfo_IntrospectionDynamicArrayBase(re *this, re::IntrospectionBase *a2)
{
  v14[0] = 0x9D159A3DE5177A0CLL;
  v14[1] = "IntrospectionDynamicArrayBase";
  re::StringID::destroyString((re::StringID *)v14);
  *((_OWORD *)this + 2) = v15;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9E120, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF9E120);
    if (v4)
    {
      uint64_t v5 = (re *)re::introspectionAllocator(v4);
      long long v6 = v5;
      long long v7 = (re *)qword_26AF9E0C8;
      if (!qword_26AF9E0C8)
      {
        long long v7 = (re *)re::allocInfo_IntrospectionBase(v5);
        qword_26AF9E0C8 = (uint64_t)v7;
        re::initInfo_IntrospectionBase(v7, v8);
      }
      uint64_t v9 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v6 + 32))(v6, 72, 8);
      *(_DWORD *)uint64_t v9 = 1;
      *(void *)(v9 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "IntrospectionBase";
      *(void *)(v9 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v7;
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 32) = 0;
      *(_DWORD *)(v9 + 40) = 3;
      *(void *)(v9 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v9 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_26AF9E460 = v9;
      unint64_t v10 = (re *)re::introspectionAllocator((re *)v9);
      re::introspect_IntrospectionBasePointer(v10, v11);
      uint64_t v12 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v10 + 32))(v10, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "elementInfo";
      *(void *)(v12 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = &qword_26AF9EA48;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 32) = 0x3000000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v12 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF9E468 = v12;
      __cxa_guard_release(&qword_26AF9E120);
    }
  }
  *((void *)this + 2) = 0x4000000008;
  *((_DWORD *)this + re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((void *)this + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = &qword_26AF9E460;
  *((void *)this + 9) = re::internal::defaultConstruct<re::IntrospectionDynamicArrayBase>;
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::IntrospectionDynamicArrayBase>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::IntrospectionDynamicArrayBase>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::IntrospectionDynamicArrayBase>;
  re::IntrospectionRegistry::add(this, v3);
  long long v13 = v15;
}

re::IntrospectionDynamicArrayBase *re::internal::defaultConstruct<re::IntrospectionDynamicArrayBase>(int a1, int a2, re::IntrospectionDynamicArrayBase *this)
{
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0u;
  return re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase(this);
}

uint64_t re::internal::defaultDestruct<re::IntrospectionDynamicArrayBase>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

re::IntrospectionDynamicArrayBase *re::internal::defaultConstructV2<re::IntrospectionDynamicArrayBase>(re::IntrospectionDynamicArrayBase *this)
{
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0u;
  return re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase(this);
}

uint64_t re::internal::defaultDestructV2<re::IntrospectionDynamicArrayBase>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

void *re::allocInfo_IntrospectionFixedArrayBase(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9E130, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9E130))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF9ED10, "IntrospectionFixedArrayBase");
    __cxa_guard_release(&qword_26AF9E130);
  }
  return &unk_26AF9ED10;
}

void re::initInfo_IntrospectionFixedArrayBase(re *this, re::IntrospectionBase *a2)
{
  v14[0] = 0xC4BC7EA0B7596862;
  v14[1] = "IntrospectionFixedArrayBase";
  re::StringID::destroyString((re::StringID *)v14);
  *((_OWORD *)this + 2) = v15;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9E138, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF9E138);
    if (v4)
    {
      uint64_t v5 = (re *)re::introspectionAllocator(v4);
      long long v6 = v5;
      long long v7 = (re *)qword_26AF9E0C8;
      if (!qword_26AF9E0C8)
      {
        long long v7 = (re *)re::allocInfo_IntrospectionBase(v5);
        qword_26AF9E0C8 = (uint64_t)v7;
        re::initInfo_IntrospectionBase(v7, v8);
      }
      uint64_t v9 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v6 + 32))(v6, 72, 8);
      *(_DWORD *)uint64_t v9 = 1;
      *(void *)(v9 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "IntrospectionBase";
      *(void *)(v9 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v7;
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 32) = 0;
      *(_DWORD *)(v9 + 40) = 3;
      *(void *)(v9 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v9 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_26AF9E470 = v9;
      unint64_t v10 = (re *)re::introspectionAllocator((re *)v9);
      re::introspect_IntrospectionBasePointer(v10, v11);
      uint64_t v12 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v10 + 32))(v10, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "elementInfo";
      *(void *)(v12 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = &qword_26AF9EA48;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 32) = 0x3000000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v12 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF9E478 = v12;
      __cxa_guard_release(&qword_26AF9E138);
    }
  }
  *((void *)this + 2) = 0x4000000008;
  *((_DWORD *)this + re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((void *)this + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = &qword_26AF9E470;
  *((void *)this + 9) = re::internal::defaultConstruct<re::IntrospectionFixedArrayBase>;
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::IntrospectionFixedArrayBase>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::IntrospectionFixedArrayBase>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::IntrospectionFixedArrayBase>;
  re::IntrospectionRegistry::add(this, v3);
  long long v13 = v15;
}

re::IntrospectionFixedArrayBase *re::internal::defaultConstruct<re::IntrospectionFixedArrayBase>(int a1, int a2, re::IntrospectionFixedArrayBase *this)
{
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0u;
  return re::IntrospectionFixedArrayBase::IntrospectionFixedArrayBase(this);
}

uint64_t re::internal::defaultDestruct<re::IntrospectionFixedArrayBase>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

re::IntrospectionFixedArrayBase *re::internal::defaultConstructV2<re::IntrospectionFixedArrayBase>(re::IntrospectionFixedArrayBase *this)
{
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0u;
  return re::IntrospectionFixedArrayBase::IntrospectionFixedArrayBase(this);
}

uint64_t re::internal::defaultDestructV2<re::IntrospectionFixedArrayBase>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

void *re::allocInfo_IntrospectionDataArrayBase(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9E148, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9E148))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF9ED88, "IntrospectionDataArrayBase");
    __cxa_guard_release(&qword_26AF9E148);
  }
  return &unk_26AF9ED88;
}

void re::initInfo_IntrospectionDataArrayBase(re *this, re::IntrospectionBase *a2)
{
  v14[0] = 0xBC1C8D611DE318CALL;
  v14[1] = "IntrospectionDataArrayBase";
  re::StringID::destroyString((re::StringID *)v14);
  *((_OWORD *)this + 2) = v15;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9E150, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF9E150);
    if (v4)
    {
      uint64_t v5 = (re *)re::introspectionAllocator(v4);
      long long v6 = v5;
      long long v7 = (re *)qword_26AF9E0C8;
      if (!qword_26AF9E0C8)
      {
        long long v7 = (re *)re::allocInfo_IntrospectionBase(v5);
        qword_26AF9E0C8 = (uint64_t)v7;
        re::initInfo_IntrospectionBase(v7, v8);
      }
      uint64_t v9 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v6 + 32))(v6, 72, 8);
      *(_DWORD *)uint64_t v9 = 1;
      *(void *)(v9 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "IntrospectionBase";
      *(void *)(v9 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v7;
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 32) = 0;
      *(_DWORD *)(v9 + 40) = 3;
      *(void *)(v9 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v9 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_26AF9E480 = v9;
      unint64_t v10 = (re *)re::introspectionAllocator((re *)v9);
      re::introspect_IntrospectionBasePointer(v10, v11);
      uint64_t v12 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v10 + 32))(v10, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "elementInfo";
      *(void *)(v12 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = &qword_26AF9EA48;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 32) = 0x3000000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v12 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF9E488 = v12;
      __cxa_guard_release(&qword_26AF9E150);
    }
  }
  *((void *)this + 2) = 0x4000000008;
  *((_DWORD *)this + re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((void *)this + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = &qword_26AF9E480;
  *((void *)this + 9) = re::internal::defaultConstruct<re::IntrospectionDataArrayBase>;
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::IntrospectionDataArrayBase>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::IntrospectionDataArrayBase>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::IntrospectionDataArrayBase>;
  re::IntrospectionRegistry::add(this, v3);
  long long v13 = v15;
}

re::IntrospectionDataArrayBase *re::internal::defaultConstruct<re::IntrospectionDataArrayBase>(int a1, int a2, re::IntrospectionDataArrayBase *this)
{
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0u;
  return re::IntrospectionDataArrayBase::IntrospectionDataArrayBase(this);
}

uint64_t re::internal::defaultDestruct<re::IntrospectionDataArrayBase>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

re::IntrospectionDataArrayBase *re::internal::defaultConstructV2<re::IntrospectionDataArrayBase>(re::IntrospectionDataArrayBase *this)
{
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0u;
  return re::IntrospectionDataArrayBase::IntrospectionDataArrayBase(this);
}

uint64_t re::internal::defaultDestructV2<re::IntrospectionDataArrayBase>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

void *re::allocInfo_IntrospectionDynamicString(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9E160, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9E160))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF9EE00, "IntrospectionDynamicString");
    __cxa_guard_release(&qword_26AF9E160);
  }
  return &unk_26AF9EE00;
}

void re::initInfo_IntrospectionDynamicString(re *this, re::IntrospectionBase *a2)
{
  v11[0] = 0xCCE6C9CCDB070AAALL;
  v11[1] = "IntrospectionDynamicString";
  re::StringID::destroyString((re::StringID *)v11);
  *((_OWORD *)this + 2) = v12;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9E170, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF9E170);
    if (v4)
    {
      uint64_t v5 = (re *)re::introspectionAllocator(v4);
      long long v6 = v5;
      long long v7 = (re *)qword_26AF9E0C8;
      if (!qword_26AF9E0C8)
      {
        long long v7 = (re *)re::allocInfo_IntrospectionBase(v5);
        qword_26AF9E0C8 = (uint64_t)v7;
        re::initInfo_IntrospectionBase(v7, v8);
      }
      uint64_t v9 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v6 + 32))(v6, 72, 8);
      *(_DWORD *)uint64_t v9 = 1;
      *(void *)(v9 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "IntrospectionBase";
      *(void *)(v9 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v7;
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 32) = 0;
      *(_DWORD *)(v9 + 40) = 3;
      *(void *)(v9 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v9 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_26AF9E168 = v9;
      __cxa_guard_release(&qword_26AF9E170);
    }
  }
  *((void *)this + 2) = 0x3000000008;
  *((_DWORD *)this + re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((void *)this + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = &qword_26AF9E168;
  *((void *)this + 9) = re::internal::defaultConstruct<re::IntrospectionDynamicString>;
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::IntrospectionDynamicString>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::IntrospectionDynamicString>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::IntrospectionDynamicString>;
  re::IntrospectionRegistry::add(this, v3);
  long long v10 = v12;
}

double re::internal::defaultConstruct<re::IntrospectionDynamicString>(int a1, int a2, ArcSharedObject *this)
{
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)(v3 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0x2000000006;
  *(_DWORD *)(v3 + 24) = 8;
  *(_WORD *)(v3 + 2re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  *(void *)(v3 + 32) = 0;
  *(void *)&double result = 0xFFFFFFFFLL;
  *(void *)(v3 + 40) = 0xFFFFFFFFLL;
  *(void *)uint64_t v3 = &unk_26E715DC0;
  return result;
}

uint64_t re::internal::defaultDestruct<re::IntrospectionDynamicString>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

double re::internal::defaultConstructV2<re::IntrospectionDynamicString>(ArcSharedObject *a1)
{
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(void *)(v1 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0x2000000006;
  *(_DWORD *)(v1 + 24) = 8;
  *(_WORD *)(v1 + 2re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  *(void *)(v1 + 32) = 0;
  *(void *)&double result = 0xFFFFFFFFLL;
  *(void *)(v1 + 40) = 0xFFFFFFFFLL;
  *(void *)uint64_t v1 = &unk_26E715DC0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::IntrospectionDynamicString>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

void *re::allocInfo_IntrospectionHashTableBase(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9E180, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9E180))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF9EE78, "IntrospectionHashTableBase");
    __cxa_guard_release(&qword_26AF9E180);
  }
  return &unk_26AF9EE78;
}

void re::initInfo_IntrospectionHashTableBase(re *this, re::IntrospectionBase *a2)
{
  v17[0] = 0x138AE0C4810624ECLL;
  v17[1] = "IntrospectionHashTableBase";
  re::StringID::destroyString((re::StringID *)v17);
  *((_OWORD *)this + 2) = v18;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9E188, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF9E188);
    if (v4)
    {
      uint64_t v5 = (re *)re::introspectionAllocator(v4);
      long long v6 = v5;
      long long v7 = (re *)qword_26AF9E0C8;
      if (!qword_26AF9E0C8)
      {
        long long v7 = (re *)re::allocInfo_IntrospectionBase(v5);
        qword_26AF9E0C8 = (uint64_t)v7;
        re::initInfo_IntrospectionBase(v7, v8);
      }
      uint64_t v9 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v6 + 32))(v6, 72, 8);
      *(_DWORD *)uint64_t v9 = 1;
      *(void *)(v9 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "IntrospectionBase";
      *(void *)(v9 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v7;
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 32) = 0;
      *(_DWORD *)(v9 + 40) = 3;
      *(void *)(v9 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v9 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_26AF9E550 = v9;
      long long v10 = (re *)re::introspectionAllocator((re *)v9);
      re::introspect_IntrospectionBasePointer(v10, v11);
      uint64_t v12 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v10 + 32))(v10, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "keyInfo";
      *(void *)(v12 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = &qword_26AF9EA48;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 32) = 0x3000000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v12 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF9E558 = v12;
      long long v13 = (re *)re::introspectionAllocator((re *)v12);
      re::introspect_IntrospectionBasePointer(v13, v14);
      uint64_t v15 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v13 + 32))(v13, 72, 8);
      *(_DWORD *)uint64_t v15 = 1;
      *(void *)(v15 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "valueInfo";
      *(void *)(v15 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = &qword_26AF9EA48;
      *(void *)(v15 + 24) = 0;
      *(void *)(v15 + 32) = 0x4000000002;
      *(_DWORD *)(v15 + 40) = 0;
      *(void *)(v15 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v15 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_26AF9E560 = v15;
      __cxa_guard_release(&qword_26AF9E188);
    }
  }
  *((void *)this + 2) = 0x5000000008;
  *((_DWORD *)this + re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((void *)this + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = &qword_26AF9E550;
  *((void *)this + 9) = re::internal::defaultConstruct<re::IntrospectionHashTableBase>;
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::IntrospectionHashTableBase>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::IntrospectionHashTableBase>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::IntrospectionHashTableBase>;
  re::IntrospectionRegistry::add(this, v3);
  long long v16 = v18;
}

re::IntrospectionHashTableBase *re::internal::defaultConstruct<re::IntrospectionHashTableBase>(int a1, int a2, re::IntrospectionHashTableBase *this)
{
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  return re::IntrospectionHashTableBase::IntrospectionHashTableBase(this);
}

uint64_t re::internal::defaultDestruct<re::IntrospectionHashTableBase>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

re::IntrospectionHashTableBase *re::internal::defaultConstructV2<re::IntrospectionHashTableBase>(re::IntrospectionHashTableBase *this)
{
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  return re::IntrospectionHashTableBase::IntrospectionHashTableBase(this);
}

uint64_t re::internal::defaultDestructV2<re::IntrospectionHashTableBase>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

void *re::allocInfo_IntrospectionPolymorphicType(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9E198, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9E198))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF9EEF0, "IntrospectionPolymorphicType");
    __cxa_guard_release(&qword_26AF9E198);
  }
  return &unk_26AF9EEF0;
}

void re::initInfo_IntrospectionPolymorphicType(re *this, re::IntrospectionBase *a2)
{
  v16[0] = 0x6B4F0BF1FB5DBC2ALL;
  v16[1] = "IntrospectionPolymorphicType";
  re::StringID::destroyString((re::StringID *)v16);
  *((_OWORD *)this + 2) = v17;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9E1A0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF9E1A0);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      re::IntrospectionInfo<char const*>::get((uint64_t)v5, v6);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "name";
      *(void *)(v7 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = &qword_26AF9E680;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 1;
      *(_DWORD *)(v7 + 40) = 0;
      *(void *)(v7 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v7 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF9E568 = v7;
      long long v8 = (re *)re::introspectionAllocator((re *)v7);
      re::introspect_IntrospectionBasePointer(v8, v9);
      uint64_t v10 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v10 = 1;
      *(void *)(v10 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "info";
      *(void *)(v10 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = &qword_26AF9EA48;
      *(void *)(v10 + 24) = 0;
      *(void *)(v10 + 32) = 0x800000002;
      *(_DWORD *)(v10 + 40) = 0;
      *(void *)(v10 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v10 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_26AF9E570 = v10;
      uint64_t v11 = re::introspectionAllocator((re *)v10);
      long long v13 = re::introspect_uint64_t((re *)1, v12);
      uint64_t v14 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v11 + 32))(v11, 72, 8);
      *(_DWORD *)uint64_t v14 = 1;
      *(void *)(v14 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "typeData";
      *(void *)(v14 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v13;
      *(void *)(v14 + 24) = 0;
      *(void *)(v14 + 32) = 0x1800000003;
      *(_DWORD *)(v14 + 40) = 0;
      *(void *)(v14 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v14 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_26AF9E578 = v14;
      __cxa_guard_release(&qword_26AF9E1A0);
    }
  }
  *((void *)this + 2) = 0x2800000008;
  *((_DWORD *)this + re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((void *)this + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = &qword_26AF9E568;
  *((void *)this + 9) = re::internal::defaultConstruct<re::IntrospectionPolymorphicType>;
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::IntrospectionPolymorphicType>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::IntrospectionPolymorphicType>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::IntrospectionPolymorphicType>;
  re::IntrospectionRegistry::add(this, v3);
  long long v15 = v17;
}

uint64_t re::internal::defaultConstruct<re::IntrospectionPolymorphicType>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  uint64_t result = re::SerializedReference<re::IntrospectionBase const*>::reset(a3 + 8);
  *(void *)(a3 + 24) = 0;
  *(_DWORD *)(a3 + 32) = 0;
  return result;
}

uint64_t re::internal::defaultDestruct<re::IntrospectionPolymorphicType>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::SerializedReference<re::IntrospectionBase const*>::reset(a3 + 8);
}

uint64_t re::internal::defaultConstructV2<re::IntrospectionPolymorphicType>(uint64_t a1)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  uint64_t result = re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 8);
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::IntrospectionPolymorphicType>(uint64_t a1)
{
  return re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 8);
}

void *re::allocInfo_IntrospectionPolymorphicTable(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9E1B0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9E1B0))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF9EF68, "IntrospectionPolymorphicTable");
    __cxa_guard_release(&qword_26AF9E1B0);
  }
  return &unk_26AF9EF68;
}

void re::initInfo_IntrospectionPolymorphicTable(re *this, re::IntrospectionBase *a2)
{
  v10[0] = 0xFE92724D704390A6;
  v10[1] = "IntrospectionPolymorphicTable";
  re::StringID::destroyString((re::StringID *)v10);
  *((_OWORD *)this + 2) = v11;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9E1C0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF9E1C0);
    if (v4)
    {
      uint64_t v5 = (re *)re::introspectionAllocator(v4);
      re::IntrospectionInfo<re::IntrospectionPolymorphicType const*>::get(v5);
      uint64_t v7 = re::introspect_uint32_t((re *)1, v6);
      uint64_t v8 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "table";
      *(void *)(v8 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = &qword_26AF9E6C0;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 32) = 0x800000001;
      *(_DWORD *)(v8 + 40) = 1;
      *(void *)(v8 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v7;
      *(void *)(v8 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF9E1B8 = v8;
      __cxa_guard_release(&qword_26AF9E1C0);
    }
  }
  *((void *)this + 2) = 0x1000000008;
  *((_DWORD *)this + re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 8;
  *((_WORD *)this + 14) = 1;
  *((_DWORD *)this + 14) = 1;
  *((void *)this + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = &qword_26AF9E1B8;
  *((void *)this + 9) = re::internal::defaultConstruct<re::IntrospectionPolymorphicTable>;
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::IntrospectionPolymorphicTable>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::IntrospectionPolymorphicTable>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::IntrospectionPolymorphicTable>;
  re::IntrospectionRegistry::add(this, v3);
  long long v9 = v11;
}

void re::IntrospectionInfo<re::IntrospectionPolymorphicType const*>::get(re *a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9E3F8, memory_order_acquire) & 1) == 0)
  {
    a1 = (re *)__cxa_guard_acquire(&qword_26AF9E3F8);
    if (a1)
    {
      re::IntrospectionPointer::IntrospectionPointer((re::IntrospectionPointer *)&qword_26AF9E6C0);
      __cxa_guard_release(&qword_26AF9E3F8);
    }
  }
  if ((byte_26AF9E0A1 & 1) == 0)
  {
    byte_26AF9E0A1 = 1;
    uint64_t v1 = (re *)qword_26AF9E1A8;
    if (!qword_26AF9E1A8)
    {
      uint64_t v1 = (re *)re::allocInfo_IntrospectionPolymorphicType(a1);
      qword_26AF9E1A8 = (uint64_t)v1;
      re::initInfo_IntrospectionPolymorphicType(v1, v2);
    }
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF9E6C0, 0);
    qword_26AF9E6D0 = 0x800000001;
    dword_26AF9E6D8 = 8;
    word_26AF9E6DC = 0;
    *(void *)&xmmword_26AF9E6E0 = 0;
    *((void *)&xmmword_26AF9E6E0 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0xFFFFFFFFLL;
    qword_26AF9E6C0 = (uint64_t)&unk_26E6CDA08;
    qword_26AF9E6F0 = (uint64_t)v1;
    unk_26AF9E6F8 = 0;
    re::IntrospectionRegistry::add(v3, v4);
    re::getPrettyTypeName((re *)&qword_26AF9E6C0, (const re::IntrospectionBase *)&v8);
    if (BYTE8(v8)) {
      uint64_t v5 = v9;
    }
    else {
      uint64_t v5 = (char *)&v8 + 9;
    }
    if (void)v8 && (BYTE8(v8)) {
      (*(void (**)(void))(*(void *)v8 + 40))();
    }
    if (v10 >> 1 == 94623636 && (__s1 == "char*" || !strcmp(__s1, "char*")))
    {
      long long v6 = v8;
    }
    else
    {
      long long v8 = *((_OWORD *)v1 + 2);
      long long v6 = v7;
    }
    xmmword_26AF9E6E0 = v6;
    re::StringID::destroyString((re::StringID *)&v10);
  }
}

void re::internal::defaultConstruct<re::IntrospectionPolymorphicTable>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a3 = 0;
  *(void *)(a3 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
}

uint64_t re::internal::defaultConstructV2<re::IntrospectionPolymorphicTable>(uint64_t result)
{
  *(_DWORD *)uint64_t result = 0;
  *(void *)(result + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  return result;
}

void re::introspect_IntrospectionMemberType(re *this, const re::IntrospectionBase *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9E1D0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v24 = (re *)__cxa_guard_acquire(&qword_26AF9E1D0);
    if (v24)
    {
      __n128 v25 = re::introspectionAllocator(v24);
      uint64_t v26 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v25 + 32))(v25, 24, 8);
      *(_DWORD *)uint64_t v26 = 1;
      *((void *)v26 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
      *((void *)v26 + 2) = "Simple";
      qword_26AF9E610 = (uint64_t)v26;
      long long v27 = re::introspectionAllocator(v26);
      char v28 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v27 + 32))(v27, 24, 8);
      *(_DWORD *)char v28 = 1;
      *((void *)v28 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 1;
      *((void *)v28 + 2) = "ArrayWithSize";
      qword_26AF9E618 = (uint64_t)v28;
      long long v29 = re::introspectionAllocator(v28);
      uint64_t v30 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v29 + 32))(v29, 24, 8);
      *(_DWORD *)uint64_t v30 = 1;
      *((void *)v30 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 2;
      *((void *)v30 + 2) = "PolymorphicWithInlineType";
      qword_26AF9E620 = (uint64_t)v30;
      long long v31 = re::introspectionAllocator(v30);
      uint64_t v32 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v31 + 32))(v31, 24, 8);
      *(_DWORD *)uint64_t v32 = 1;
      *(void *)(v32 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 3;
      *(void *)(v32 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = "Parent";
      qword_26AF9E628 = v32;
      __cxa_guard_release(&qword_26AF9E1D0);
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9E1D8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9E1D8))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_26AF9E880, "IntrospectionMemberType", 4, 4, 1, 1);
    qword_26AF9E880 = (uint64_t)&unk_26E715E00;
    qword_26AF9E8C0 = (uint64_t)&re::introspect_IntrospectionMemberType(BOOL)::enumTable;
    dword_26AF9E890 = 9;
    __cxa_guard_release(&qword_26AF9E1D8);
  }
  if ((byte_26AF9E09A & 1) == 0)
  {
    byte_26AF9E09A = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_26AF9E880, a2);
    uint64_t v34 = 0x859EBCF7EF0CCDDELL;
    BOOL v35 = "IntrospectionMemberType";
    v38[0] = 208862;
    v38[1] = "int";
    uint64_t v2 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v38);
    if (v2)
    {
      uint64_t v3 = *v2;
      re::StringID::destroyString((re::StringID *)v38);
      uint64_t v4 = (unsigned int *)qword_26AF9E8C0;
      v37[1] = v3;
      re::TypeBuilder::beginEnumType((uint64_t)v38, &v34, 1, 1, (uint64_t)v37);
      unint64_t v6 = *v4;
      if (v6)
      {
        for (unint64_t i = 0; i < v6; ++i)
        {
          uint64_t v8 = *(void *)(*((void *)v4 + 1) + 8 * i);
          if (*(_DWORD *)v8 == 1)
          {
            long long v9 = *(char **)(v8 + 16);
            if (v9)
            {
              uint64_t v10 = *v9;
              if (*v9)
              {
                char v11 = v9[1];
                if (v11)
                {
                  uint64_t v12 = (unsigned __int8 *)(v9 + 2);
                  do
                  {
                    uint64_t v10 = 31 * v10 + v11;
                    int v13 = *v12++;
                    char v11 = v13;
                  }
                  while (v13);
                }
              }
            }
            else
            {
              uint64_t v10 = 0;
            }
            uint64_t v14 = *(void *)(v8 + 8);
            *(void *)&v36.var0 = 2 * v10;
            v36.var1 = v9;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v38, v14, &v36);
            re::StringID::destroyString((re::StringID *)&v36);
            unint64_t v6 = *v4;
          }
        }
        if (v6)
        {
          for (unint64_t j = 0; j < v6; ++j)
          {
            uint64_t v16 = *(void *)(*((void *)v4 + 1) + 8 * j);
            if (*(_DWORD *)v16 == 2)
            {
              long long v17 = *(char **)(v16 + 16);
              if (v17)
              {
                uint64_t v18 = *v17;
                if (*v17)
                {
                  char v19 = v17[1];
                  if (v19)
                  {
                    unsigned int v20 = (unsigned __int8 *)(v17 + 2);
                    do
                    {
                      uint64_t v18 = 31 * v18 + v19;
                      int v21 = *v20++;
                      char v19 = v21;
                    }
                    while (v21);
                  }
                }
              }
              else
              {
                uint64_t v18 = 0;
              }
              uint64_t v22 = *(void *)(v16 + 8);
              *(void *)&v36.var0 = 2 * v18;
              v36.var1 = v17;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v38, v22, &v36);
              re::StringID::destroyString((re::StringID *)&v36);
              unint64_t v6 = *v4;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v38, v23);
      xmmword_26AF9E8A0 = (__int128)v36;
      re::StringID::destroyString((re::StringID *)&v34);
    }
    else
    {
      re::StringID::destroyString((re::StringID *)v38);
      re::internal::assertLog((re::internal *)5, v33, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "IntrospectionMemberType", v34, v35);
      _os_crash();
      __break(1u);
    }
  }
}

void re::introspect_IntrospectionStructureAttributeType(re *this, const re::IntrospectionBase *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9E1E0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v24 = (re *)__cxa_guard_acquire(&qword_26AF9E1E0);
    if (v24)
    {
      __n128 v25 = re::introspectionAllocator(v24);
      uint64_t v26 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v25 + 32))(v25, 24, 8);
      *(_DWORD *)uint64_t v26 = 1;
      *((void *)v26 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 1;
      *((void *)v26 + 2) = "Member";
      qword_26AF9E650 = (uint64_t)v26;
      long long v27 = re::introspectionAllocator(v26);
      char v28 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v27 + 32))(v27, 24, 8);
      *(_DWORD *)char v28 = 1;
      *((void *)v28 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 2;
      *((void *)v28 + 2) = "PolymorphicTable";
      qword_26AF9E658 = (uint64_t)v28;
      long long v29 = re::introspectionAllocator(v28);
      uint64_t v30 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v29 + 32))(v29, 24, 8);
      *(_DWORD *)uint64_t v30 = 1;
      *((void *)v30 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 3;
      *((void *)v30 + 2) = "PolymorphicType";
      qword_26AF9E660 = (uint64_t)v30;
      long long v31 = re::introspectionAllocator(v30);
      uint64_t v32 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v31 + 32))(v31, 24, 8);
      *(_DWORD *)uint64_t v32 = 1;
      *((void *)v32 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 4;
      *((void *)v32 + 2) = "Flags";
      qword_26AF9E668 = (uint64_t)v32;
      uint64_t v33 = re::introspectionAllocator(v32);
      uint64_t v34 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v33 + 32))(v33, 24, 8);
      *(_DWORD *)uint64_t v34 = 1;
      *((void *)v34 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 5;
      *((void *)v34 + 2) = "RenameMember";
      qword_26AF9E670 = (uint64_t)v34;
      BOOL v35 = re::introspectionAllocator(v34);
      uint64_t v36 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v35 + 32))(v35, 24, 8);
      *(_DWORD *)uint64_t v36 = 1;
      *(void *)(v36 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 6;
      *(void *)(v36 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = "ComplexVersioningFunction";
      qword_26AF9E678 = v36;
      __cxa_guard_release(&qword_26AF9E1E0);
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9E1E8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9E1E8))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_26AF9E8C8, "IntrospectionStructureAttributeType", 4, 4, 1, 1);
    qword_26AF9E8C8 = (uint64_t)&unk_26E715E00;
    qword_26AF9E908 = (uint64_t)&re::introspect_IntrospectionStructureAttributeType(BOOL)::enumTable;
    dword_26AF9E8D8 = 9;
    __cxa_guard_release(&qword_26AF9E1E8);
  }
  if ((byte_26AF9E09B & 1) == 0)
  {
    byte_26AF9E09B = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_26AF9E8C8, a2);
    uint64_t v38 = 0xE05DA9CA5EB8957CLL;
    BOOL v39 = "IntrospectionStructureAttributeType";
    v42[0] = 208862;
    v42[1] = "int";
    uint64_t v2 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v42);
    if (v2)
    {
      uint64_t v3 = *v2;
      re::StringID::destroyString((re::StringID *)v42);
      uint64_t v4 = (unsigned int *)qword_26AF9E908;
      v41[1] = v3;
      re::TypeBuilder::beginEnumType((uint64_t)v42, &v38, 1, 1, (uint64_t)v41);
      unint64_t v6 = *v4;
      if (v6)
      {
        for (unint64_t i = 0; i < v6; ++i)
        {
          uint64_t v8 = *(void *)(*((void *)v4 + 1) + 8 * i);
          if (*(_DWORD *)v8 == 1)
          {
            long long v9 = *(char **)(v8 + 16);
            if (v9)
            {
              uint64_t v10 = *v9;
              if (*v9)
              {
                char v11 = v9[1];
                if (v11)
                {
                  uint64_t v12 = (unsigned __int8 *)(v9 + 2);
                  do
                  {
                    uint64_t v10 = 31 * v10 + v11;
                    int v13 = *v12++;
                    char v11 = v13;
                  }
                  while (v13);
                }
              }
            }
            else
            {
              uint64_t v10 = 0;
            }
            uint64_t v14 = *(void *)(v8 + 8);
            *(void *)&v40.var0 = 2 * v10;
            v40.var1 = v9;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v42, v14, &v40);
            re::StringID::destroyString((re::StringID *)&v40);
            unint64_t v6 = *v4;
          }
        }
        if (v6)
        {
          for (unint64_t j = 0; j < v6; ++j)
          {
            uint64_t v16 = *(void *)(*((void *)v4 + 1) + 8 * j);
            if (*(_DWORD *)v16 == 2)
            {
              long long v17 = *(char **)(v16 + 16);
              if (v17)
              {
                uint64_t v18 = *v17;
                if (*v17)
                {
                  char v19 = v17[1];
                  if (v19)
                  {
                    unsigned int v20 = (unsigned __int8 *)(v17 + 2);
                    do
                    {
                      uint64_t v18 = 31 * v18 + v19;
                      int v21 = *v20++;
                      char v19 = v21;
                    }
                    while (v21);
                  }
                }
              }
              else
              {
                uint64_t v18 = 0;
              }
              uint64_t v22 = *(void *)(v16 + 8);
              *(void *)&v40.var0 = 2 * v18;
              v40.var1 = v17;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v42, v22, &v40);
              re::StringID::destroyString((re::StringID *)&v40);
              unint64_t v6 = *v4;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v42, v23);
      xmmword_26AF9E8E8 = (__int128)v40;
      re::StringID::destroyString((re::StringID *)&v38);
    }
    else
    {
      re::StringID::destroyString((re::StringID *)v42);
      re::internal::assertLog((re::internal *)5, v37, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "IntrospectionStructureAttributeType", v38, v39);
      _os_crash();
      __break(1u);
    }
  }
}

void re::introspectionTable_IntrospectionStructureAttribute(re *this)
{
  if ((byte_26AF9E09C & 1) == 0)
  {
    byte_26AF9E09C = 1;
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9E1F0, memory_order_acquire) & 1) == 0)
    {
      uint64_t v1 = (re *)__cxa_guard_acquire(&qword_26AF9E1F0);
      if (v1)
      {
        qword_26879C2E0 = (uint64_t)"IntrospectionMember";
        uint64_t v2 = (re *)qword_26AF9E220;
        if (!qword_26AF9E220)
        {
          uint64_t v2 = (re *)re::allocInfo_IntrospectionMember(v1);
          qword_26AF9E220 = (uint64_t)v2;
          re::initInfo_IntrospectionMember(v2, v3);
        }
        qword_26879C2E8 = (uint64_t)v2;
        unk_26879C2F0 = 0;
        qword_26879C2F8 = 1;
        dword_26879C300 = 0;
        qword_26879C308 = (uint64_t)"IntrospectionPolymorphicTableAttribute";
        uint64_t v4 = (re *)qword_26AF9E238;
        if (!qword_26AF9E238)
        {
          uint64_t v4 = (re *)re::allocInfo_IntrospectionPolymorphicTableAttribute(v1);
          qword_26AF9E238 = (uint64_t)v4;
          re::initInfo_IntrospectionPolymorphicTableAttribute(v4, v5);
        }
        qword_26879C310 = (uint64_t)v4;
        *(void *)algn_26879C318 = 0;
        qword_26879C320 = 2;
        dword_26879C328 = 0;
        qword_26879C330 = (uint64_t)"IntrospectionPolymorphicTypeAttribute";
        unint64_t v6 = (re *)qword_26AF9E250;
        if (!qword_26AF9E250)
        {
          unint64_t v6 = (re *)re::allocInfo_IntrospectionPolymorphicTypeAttribute(v1);
          qword_26AF9E250 = (uint64_t)v6;
          re::initInfo_IntrospectionPolymorphicTypeAttribute(v6, v7);
        }
        qword_26879C338 = (uint64_t)v6;
        unk_26879C340 = 0;
        qword_26879C348 = 3;
        dword_26879C350 = 0;
        qword_26879C358 = (uint64_t)"IntrospectionFlagsAttribute";
        uint64_t v8 = (re *)qword_26AF9E268;
        if (!qword_26AF9E268)
        {
          uint64_t v8 = (re *)re::allocInfo_IntrospectionFlagsAttribute(v1);
          qword_26AF9E268 = (uint64_t)v8;
          re::initInfo_IntrospectionFlagsAttribute(v8, v9);
        }
        qword_26879C360 = (uint64_t)v8;
        *(void *)algn_26879C368 = 0;
        qword_26879C370 = 4;
        dword_26879C378 = 0;
        qword_26879C380 = (uint64_t)"IntrospectionRenameMemberAttribute";
        uint64_t v10 = (re *)qword_26AF9E280;
        if (!qword_26AF9E280)
        {
          uint64_t v10 = (re *)re::allocInfo_IntrospectionRenameMemberAttribute(v1);
          qword_26AF9E280 = (uint64_t)v10;
          re::initInfo_IntrospectionRenameMemberAttribute(v10, v11);
        }
        qword_26879C388 = (uint64_t)v10;
        unk_26879C390 = 0;
        qword_26879C398 = 5;
        dword_26879C3A0 = 0;
        qword_26879C3A8 = (uint64_t)"IntrospectionComplexVersioningAttribute";
        uint64_t v12 = (re *)qword_26AF9E298;
        if (!qword_26AF9E298)
        {
          uint64_t v12 = (re *)re::allocInfo_IntrospectionComplexVersioningAttribute(v1);
          qword_26AF9E298 = (uint64_t)v12;
          re::initInfo_IntrospectionComplexVersioningAttribute(v12, v13);
        }
        qword_26879C3B0 = (uint64_t)v12;
        *(void *)algn_26879C3B8 = 0;
        qword_26879C3C0 = 6;
        dword_26879C3C8 = 0;
        qword_26879C3D0 = (uint64_t)"IntrospectionCreateBindPointAttribute";
        BindPointAttribute = (re *)qword_26AF9E2B8;
        if (!qword_26AF9E2B8)
        {
          BindPointAttribute = (re *)re::allocInfo_IntrospectionCreateBindPointAttribute(v1);
          qword_26AF9E2B8 = (uint64_t)BindPointAttribute;
          re::initInfo_IntrospectionCreateBindPointAttribute(BindPointAttribute, v15);
        }
        qword_26879C3D8 = (uint64_t)BindPointAttribute;
        unk_26879C3E0 = 0;
        qword_26879C3E8 = 7;
        dword_26879C3F0 = 0;
        __cxa_guard_release(&qword_26AF9E1F0);
      }
    }
    dword_26AF9E490 = 7;
    qword_26AF9E498 = (uint64_t)&qword_26879C2E0;
  }
}

void *re::allocInfo_IntrospectionStructureAttribute(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9E1F8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9E1F8))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF9EFE0, "IntrospectionStructureAttribute");
    __cxa_guard_release(&qword_26AF9E1F8);
  }
  return &unk_26AF9EFE0;
}

void re::initInfo_IntrospectionStructureAttribute(re *this, re::IntrospectionBase *a2)
{
  v11[0] = 0x868C2D67524F32C8;
  v11[1] = "IntrospectionStructureAttribute";
  re::StringID::destroyString((re::StringID *)v11);
  *((_OWORD *)this + 2) = v12;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9E200, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF9E200);
    if (v4)
    {
      uint64_t v5 = (re *)re::introspectionAllocator(v4);
      re::introspect_IntrospectionStructureAttributeType(v5, v6);
      uint64_t v7 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 32, 8);
      *(_DWORD *)uint64_t v7 = 3;
      *(void *)(v7 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = &qword_26AF9E8C8;
      *(void *)(v7 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v7 + 24) = 0;
      qword_26AF9E4A0 = v7;
      uint64_t v8 = (re *)re::introspectionAllocator((re *)v7);
      re::introspectionTable_IntrospectionStructureAttribute(v8);
      uint64_t v9 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 16, 8);
      *(_DWORD *)uint64_t v9 = 2;
      *(void *)(v9 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = &dword_26AF9E490;
      qword_26AF9E4A8 = v9;
      __cxa_guard_release(&qword_26AF9E200);
    }
  }
  *((void *)this + 2) = 0x400000008;
  *((_DWORD *)this + re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 4;
  *((_WORD *)this + 14) = 1;
  *((_DWORD *)this + 14) = 2;
  *((void *)this + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = &qword_26AF9E4A0;
  *((void *)this + 9) = re::internal::defaultConstruct<re::IntrospectionStructureAttribute>;
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::IntrospectionStructureAttribute>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::IntrospectionStructureAttribute>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::IntrospectionStructureAttribute>;
  re::IntrospectionRegistry::add(this, v3);
  long long v10 = v12;
}

void re::internal::defaultConstruct<re::IntrospectionStructureAttribute>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *a3 = 0;
}

_DWORD *re::internal::defaultConstructV2<re::IntrospectionStructureAttribute>(_DWORD *result)
{
  *uint64_t result = 0;
  return result;
}

void *re::allocInfo_IntrospectionMember(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9E210, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9E210))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&_MergedGlobals_209, "IntrospectionMember");
    __cxa_guard_release(&qword_26AF9E210);
  }
  return &_MergedGlobals_209;
}

void re::initInfo_IntrospectionMember(re *this, re::IntrospectionBase *a2)
{
  v20[0] = 0x857863A49FC2EC2ALL;
  v20[1] = "IntrospectionMember";
  re::StringID::destroyString((re::StringID *)v20);
  *((_OWORD *)this + 2) = v21;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9E218, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF9E218);
    if (v4)
    {
      uint64_t v5 = (re *)re::introspectionAllocator(v4);
      unint64_t v6 = v5;
      uint64_t v7 = (re *)qword_26AF9E208;
      if (!qword_26AF9E208)
      {
        uint64_t v7 = (re *)re::allocInfo_IntrospectionStructureAttribute(v5);
        qword_26AF9E208 = (uint64_t)v7;
        re::initInfo_IntrospectionStructureAttribute(v7, v8);
      }
      uint64_t v9 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v6 + 32))(v6, 72, 8);
      *(_DWORD *)uint64_t v9 = 1;
      *(void *)(v9 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "IntrospectionStructureAttribute";
      *(void *)(v9 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v7;
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 32) = 0;
      *(_DWORD *)(v9 + 40) = 3;
      *(void *)(v9 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v9 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_26AF9E630 = v9;
      long long v10 = re::introspectionAllocator((re *)v9);
      re::IntrospectionInfo<char const*>::get((uint64_t)v10, v11);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v10 + 32))(v10, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "name";
      *(void *)(v12 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = &qword_26AF9E680;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 32) = 0x800000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v12 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF9E638 = v12;
      int v13 = (re *)re::introspectionAllocator((re *)v12);
      re::introspect_IntrospectionBasePointer(v13, v14);
      uint64_t v15 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v13 + 32))(v13, 72, 8);
      *(_DWORD *)uint64_t v15 = 1;
      *(void *)(v15 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "memberInfo";
      *(void *)(v15 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = &qword_26AF9EA48;
      *(void *)(v15 + 24) = 0;
      *(void *)(v15 + 32) = 0x1000000002;
      *(_DWORD *)(v15 + 40) = 0;
      *(void *)(v15 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v15 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_26AF9E640 = v15;
      uint64_t v16 = (re *)re::introspectionAllocator((re *)v15);
      re::introspect_IntrospectionMemberType(v16, v17);
      uint64_t v18 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v16 + 32))(v16, 72, 8);
      *(_DWORD *)uint64_t v18 = 1;
      *(void *)(v18 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "memberType";
      *(void *)(v18 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = &qword_26AF9E880;
      *(void *)(v18 + 24) = 0;
      *(void *)(v18 + 32) = 0x2800000003;
      *(_DWORD *)(v18 + 40) = 0;
      *(void *)(v18 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v18 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v18 + 64) = 0;
      qword_26AF9E648 = v18;
      __cxa_guard_release(&qword_26AF9E218);
    }
  }
  *((void *)this + 2) = 0x4800000008;
  *((_DWORD *)this + re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 4;
  *((void *)this + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = &qword_26AF9E630;
  *((void *)this + 9) = re::internal::defaultConstruct<re::IntrospectionMember>;
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::IntrospectionMember>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::IntrospectionMember>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::IntrospectionMember>;
  re::IntrospectionRegistry::add(this, v3);
  long long v19 = v21;
}

re::IntrospectionMember *re::internal::defaultConstruct<re::IntrospectionMember>(int a1, int a2, re::IntrospectionMember *this)
{
  return re::IntrospectionMember::IntrospectionMember(this);
}

uint64_t re::internal::defaultDestruct<re::IntrospectionMember>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::SerializedReference<re::IntrospectionBase const*>::reset(a3 + 48);
  return re::SerializedReference<re::IntrospectionBase const*>::reset(a3 + 16);
}

uint64_t re::internal::defaultDestructV2<re::IntrospectionMember>(uint64_t a1)
{
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 48);
  return re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 16);
}

void *re::allocInfo_IntrospectionPolymorphicTableAttribute(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9E228, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9E228))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26879BB60, "IntrospectionPolymorphicTableAttribute");
    __cxa_guard_release(&qword_26AF9E228);
  }
  return &unk_26879BB60;
}

void re::initInfo_IntrospectionPolymorphicTableAttribute(re *this, re::IntrospectionBase *a2)
{
  v13[0] = 0x7BCA109D2D15F12;
  v13[1] = "IntrospectionPolymorphicTableAttribute";
  re::StringID::destroyString((re::StringID *)v13);
  *((_OWORD *)this + 2) = v14;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9E230, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF9E230);
    if (v4)
    {
      uint64_t v5 = (re *)re::introspectionAllocator(v4);
      unint64_t v6 = v5;
      uint64_t v7 = (re *)qword_26AF9E208;
      if (!qword_26AF9E208)
      {
        uint64_t v7 = (re *)re::allocInfo_IntrospectionStructureAttribute(v5);
        qword_26AF9E208 = (uint64_t)v7;
        re::initInfo_IntrospectionStructureAttribute(v7, v8);
      }
      uint64_t v9 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v6 + 32))(v6, 72, 8);
      *(_DWORD *)uint64_t v9 = 1;
      *(void *)(v9 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "IntrospectionStructureAttribute";
      *(void *)(v9 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v7;
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 32) = 0;
      *(_DWORD *)(v9 + 40) = 3;
      *(void *)(v9 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v9 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_26AF9E4B0 = v9;
      long long v10 = (re *)re::introspectionAllocator((re *)v9);
      re::IntrospectionInfo<re::IntrospectionPolymorphicTable const*>::get(v10);
      uint64_t v11 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v10 + 32))(v10, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "polymorphicTable";
      *(void *)(v11 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = &qword_26AF9E700;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x800000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v11 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF9E4B8 = v11;
      __cxa_guard_release(&qword_26AF9E230);
    }
  }
  *((void *)this + 2) = 0x1000000008;
  *((_DWORD *)this + re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 8;
  *((_WORD *)this + 14) = 1;
  *((_DWORD *)this + 14) = 2;
  *((void *)this + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = &qword_26AF9E4B0;
  *((void *)this + 9) = re::internal::defaultConstruct<re::IntrospectionPolymorphicTableAttribute>;
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::IntrospectionPolymorphicTableAttribute>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::IntrospectionPolymorphicTableAttribute>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::IntrospectionPolymorphicTableAttribute>;
  re::IntrospectionRegistry::add(this, v3);
  long long v12 = v14;
}

void re::IntrospectionInfo<re::IntrospectionPolymorphicTable const*>::get(re *a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9E400, memory_order_acquire) & 1) == 0)
  {
    a1 = (re *)__cxa_guard_acquire(&qword_26AF9E400);
    if (a1)
    {
      re::IntrospectionPointer::IntrospectionPointer((re::IntrospectionPointer *)&qword_26AF9E700);
      __cxa_guard_release(&qword_26AF9E400);
    }
  }
  if ((byte_26AF9E0A2 & 1) == 0)
  {
    byte_26AF9E0A2 = 1;
    uint64_t v1 = (re *)qword_26AF9E1C8;
    if (!qword_26AF9E1C8)
    {
      uint64_t v1 = (re *)re::allocInfo_IntrospectionPolymorphicTable(a1);
      qword_26AF9E1C8 = (uint64_t)v1;
      re::initInfo_IntrospectionPolymorphicTable(v1, v2);
    }
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF9E700, 0);
    qword_26AF9E710 = 0x800000001;
    dword_26AF9E718 = 8;
    word_26AF9E71C = 0;
    *(void *)&xmmword_26AF9E720 = 0;
    *((void *)&xmmword_26AF9E720 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0xFFFFFFFFLL;
    qword_26AF9E700 = (uint64_t)&unk_26E6CDA08;
    qword_26AF9E730 = (uint64_t)v1;
    unk_26AF9E738 = 0;
    re::IntrospectionRegistry::add(v3, v4);
    re::getPrettyTypeName((re *)&qword_26AF9E700, (const re::IntrospectionBase *)&v8);
    if (BYTE8(v8)) {
      uint64_t v5 = v9;
    }
    else {
      uint64_t v5 = (char *)&v8 + 9;
    }
    if (void)v8 && (BYTE8(v8)) {
      (*(void (**)(void))(*(void *)v8 + 40))();
    }
    if (v10 >> 1 == 94623636 && (__s1 == "char*" || !strcmp(__s1, "char*")))
    {
      long long v6 = v8;
    }
    else
    {
      long long v8 = *((_OWORD *)v1 + 2);
      long long v6 = v7;
    }
    xmmword_26AF9E720 = v6;
    re::StringID::destroyString((re::StringID *)&v10);
  }
}

void re::internal::defaultConstruct<re::IntrospectionPolymorphicTableAttribute>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a3 = 0;
  *(void *)(a3 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
}

uint64_t re::internal::defaultConstructV2<re::IntrospectionPolymorphicTableAttribute>(uint64_t result)
{
  *(_DWORD *)uint64_t result = 0;
  *(void *)(result + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  return result;
}

void *re::allocInfo_IntrospectionPolymorphicTypeAttribute(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9E240, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9E240))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26879BBD8, "IntrospectionPolymorphicTypeAttribute");
    __cxa_guard_release(&qword_26AF9E240);
  }
  return &unk_26879BBD8;
}

void re::initInfo_IntrospectionPolymorphicTypeAttribute(re *this, re::IntrospectionBase *a2)
{
  v18[0] = 0x8519B7F970D5E80ELL;
  v18[1] = "IntrospectionPolymorphicTypeAttribute";
  re::StringID::destroyString((re::StringID *)v18);
  *((_OWORD *)this + 2) = v19;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9E248, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF9E248);
    if (v4)
    {
      uint64_t v5 = (re *)re::introspectionAllocator(v4);
      long long v6 = v5;
      long long v7 = (re *)qword_26AF9E208;
      if (!qword_26AF9E208)
      {
        long long v7 = (re *)re::allocInfo_IntrospectionStructureAttribute(v5);
        qword_26AF9E208 = (uint64_t)v7;
        re::initInfo_IntrospectionStructureAttribute(v7, v8);
      }
      uint64_t v9 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v6 + 32))(v6, 72, 8);
      *(_DWORD *)uint64_t v9 = 1;
      *(void *)(v9 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "IntrospectionStructureAttribute";
      *(void *)(v9 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v7;
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 32) = 0;
      *(_DWORD *)(v9 + 40) = 3;
      *(void *)(v9 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v9 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_26AF9E580 = v9;
      unint64_t v10 = (re *)re::introspectionAllocator((re *)v9);
      re::introspect_IntrospectionBasePointer(v10, v11);
      uint64_t v12 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v10 + 32))(v10, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "polymorphicInfo";
      *(void *)(v12 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = &qword_26AF9EA48;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 32) = 0x800000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v12 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF9E588 = v12;
      int v13 = re::introspectionAllocator((re *)v12);
      uint64_t v15 = re::introspect_int((re *)1, v14);
      uint64_t v16 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v13 + 32))(v13, 72, 8);
      *(_DWORD *)uint64_t v16 = 1;
      *(void *)(v16 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "polymorphicTypeOffset";
      *(void *)(v16 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v15;
      *(void *)(v16 + 24) = 0;
      *(void *)(v16 + 32) = 0x1800000002;
      *(_DWORD *)(v16 + 40) = 0;
      *(void *)(v16 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v16 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_26AF9E590 = v16;
      __cxa_guard_release(&qword_26AF9E248);
    }
  }
  *((void *)this + 2) = 0x2000000008;
  *((_DWORD *)this + re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((void *)this + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = &qword_26AF9E580;
  *((void *)this + 9) = re::internal::defaultConstruct<re::IntrospectionPolymorphicTypeAttribute>;
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::IntrospectionPolymorphicTypeAttribute>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::IntrospectionPolymorphicTypeAttribute>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::IntrospectionPolymorphicTypeAttribute>;
  re::IntrospectionRegistry::add(this, v3);
  long long v17 = v19;
}

uint64_t re::internal::defaultConstruct<re::IntrospectionPolymorphicTypeAttribute>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a3 = 0;
  *(void *)(a3 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  uint64_t result = re::SerializedReference<re::IntrospectionBase const*>::reset(a3 + 8);
  *(_DWORD *)(a3 + 24) = 0;
  return result;
}

uint64_t re::internal::defaultDestruct<re::IntrospectionPolymorphicTypeAttribute>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::SerializedReference<re::IntrospectionBase const*>::reset(a3 + 8);
}

uint64_t re::internal::defaultConstructV2<re::IntrospectionPolymorphicTypeAttribute>(uint64_t a1)
{
  *(_DWORD *)a1 = 0;
  *(void *)(a1 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  uint64_t result = re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 8);
  *(_DWORD *)(a1 + 24) = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::IntrospectionPolymorphicTypeAttribute>(uint64_t a1)
{
  return re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 8);
}

void *re::allocInfo_IntrospectionFlagsAttribute(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9E258, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9E258))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26879BC50, "IntrospectionFlagsAttribute");
    __cxa_guard_release(&qword_26AF9E258);
  }
  return &unk_26879BC50;
}

void re::initInfo_IntrospectionFlagsAttribute(re *this, re::IntrospectionBase *a2)
{
  v15[0] = 0xF628A0708C2B08A0;
  v15[1] = "IntrospectionFlagsAttribute";
  re::StringID::destroyString((re::StringID *)v15);
  *((_OWORD *)this + 2) = v16;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9E260, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF9E260);
    if (v4)
    {
      uint64_t v5 = (re *)re::introspectionAllocator(v4);
      long long v6 = v5;
      long long v7 = (re *)qword_26AF9E208;
      if (!qword_26AF9E208)
      {
        long long v7 = (re *)re::allocInfo_IntrospectionStructureAttribute(v5);
        qword_26AF9E208 = (uint64_t)v7;
        re::initInfo_IntrospectionStructureAttribute(v7, v8);
      }
      uint64_t v9 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v6 + 32))(v6, 72, 8);
      *(_DWORD *)uint64_t v9 = 1;
      *(void *)(v9 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "IntrospectionStructureAttribute";
      *(void *)(v9 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v7;
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 32) = 0;
      *(_DWORD *)(v9 + 40) = 3;
      *(void *)(v9 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v9 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_26AF9E4C0 = v9;
      unint64_t v10 = re::introspectionAllocator((re *)v9);
      uint64_t v12 = re::introspect_uint32_t((re *)1, v11);
      uint64_t v13 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v10 + 32))(v10, 72, 8);
      *(_DWORD *)uint64_t v13 = 1;
      *(void *)(v13 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "flags";
      *(void *)(v13 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v12;
      *(void *)(v13 + 24) = 0;
      *(void *)(v13 + 32) = 0x400000001;
      *(_DWORD *)(v13 + 40) = 0;
      *(void *)(v13 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v13 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_26AF9E4C8 = v13;
      __cxa_guard_release(&qword_26AF9E260);
    }
  }
  *((void *)this + 2) = 0x800000008;
  *((_DWORD *)this + re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 4;
  *((_WORD *)this + 14) = 1;
  *((_DWORD *)this + 14) = 2;
  *((void *)this + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = &qword_26AF9E4C0;
  *((void *)this + 9) = re::internal::defaultConstruct<re::IntrospectionFlagsAttribute>;
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::IntrospectionFlagsAttribute>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::IntrospectionFlagsAttribute>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::IntrospectionFlagsAttribute>;
  re::IntrospectionRegistry::add(this, v3);
  long long v14 = v16;
}

void re::internal::defaultConstruct<re::IntrospectionFlagsAttribute>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = 0;
}

void *re::internal::defaultConstructV2<re::IntrospectionFlagsAttribute>(void *result)
{
  *uint64_t result = 0;
  return result;
}

void *re::allocInfo_IntrospectionRenameMemberAttribute(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9E270, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9E270))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26879BCC8, "IntrospectionRenameMemberAttribute");
    __cxa_guard_release(&qword_26AF9E270);
  }
  return &unk_26879BCC8;
}

void re::initInfo_IntrospectionRenameMemberAttribute(re *this, re::IntrospectionBase *a2)
{
  v17[0] = 0x5F5C67A515547252;
  v17[1] = "IntrospectionRenameMemberAttribute";
  re::StringID::destroyString((re::StringID *)v17);
  *((_OWORD *)this + 2) = v18;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9E278, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF9E278);
    if (v4)
    {
      uint64_t v5 = (re *)re::introspectionAllocator(v4);
      long long v6 = v5;
      long long v7 = (re *)qword_26AF9E208;
      if (!qword_26AF9E208)
      {
        long long v7 = (re *)re::allocInfo_IntrospectionStructureAttribute(v5);
        qword_26AF9E208 = (uint64_t)v7;
        re::initInfo_IntrospectionStructureAttribute(v7, v8);
      }
      uint64_t v9 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v6 + 32))(v6, 72, 8);
      *(_DWORD *)uint64_t v9 = 1;
      *(void *)(v9 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "IntrospectionStructureAttribute";
      *(void *)(v9 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = v7;
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 32) = 0;
      *(_DWORD *)(v9 + 40) = 3;
      *(void *)(v9 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v9 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_26AF9E598 = v9;
      unint64_t v10 = re::introspectionAllocator((re *)v9);
      re::IntrospectionInfo<char const*>::get((uint64_t)v10, v11);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v10 + 32))(v10, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "oldName";
      *(void *)(v12 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = &qword_26AF9E680;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 32) = 0x800000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v12 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF9E5A0 = v12;
      uint64_t v13 = re::introspectionAllocator((re *)v12);
      re::IntrospectionInfo<char const*>::get((uint64_t)v13, v14);
      uint64_t v15 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v13 + 32))(v13, 72, 8);
      *(_DWORD *)uint64_t v15 = 1;
      *(void *)(v15 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "currentName";
      *(void *)(v15 + 1re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = &qword_26AF9E680;
      *(void *)(v15 + 24) = 0;
      *(void *)(v15 + 32) = 0x1000000002;
      *(_DWORD *)(v15 + 40) = 0;
      *(void *)(v15 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v15 + 5re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_26AF9E5A8 = v15;
      __cxa_guard_release(&qword_26AF9E278);
    }
  }
  *((void *)this + 2) = 0x1800000008;
  *((_DWORD *)this + re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6) = 8;
  *((_WORD *)this + 14) = 1;
  *((_DWORD *)this + 14) = 3;
  *((void *)this + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = &qword_26AF9E598;
  *((void *)this + 9) = re::internal::defaultConstruct<re::IntrospectionRenameMemberAttribute>;
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::IntrospectionRenameMemberAttribute>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::IntrospectionRenameMemberAttribute>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::IntrospectionRenameMemberAttribute>;
  re::IntrospectionRegistry::add(this, v3);
  long long v16 = v18;
}